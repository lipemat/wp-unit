diff --git a/data/blocks/fixtures/core__quote__style-1.server.html b/data/blocks/fixtures/core__quote__style-1.server.html
index 369cebb77d..9bfb5f14a8 100644
--- a/data/blocks/fixtures/core__quote__style-1.server.html
+++ b/data/blocks/fixtures/core__quote__style-1.server.html
@@ -1,3 +1,3 @@
 
-<blockquote class="wp-block-quote"><p>The editor will endeavour to create a new page and post building experience that makes writing rich posts effortless, and has “blocks” to make it easy what today might take shortcodes, custom HTML, or “mystery meat” embed discovery.</p><cite>Matt Mullenweg, 2017</cite></blockquote>
+<blockquote class="wp-block-quote is-layout-flow wp-block-quote-is-layout-flow"><p>The editor will endeavour to create a new page and post building experience that makes writing rich posts effortless, and has “blocks” to make it easy what today might take shortcodes, custom HTML, or “mystery meat” embed discovery.</p><cite>Matt Mullenweg, 2017</cite></blockquote>
 
diff --git a/data/blocks/fixtures/core__quote__style-2.server.html b/data/blocks/fixtures/core__quote__style-2.server.html
index f75ac8088b..0a58628dbc 100644
--- a/data/blocks/fixtures/core__quote__style-2.server.html
+++ b/data/blocks/fixtures/core__quote__style-2.server.html
@@ -1,3 +1,3 @@
 
-<blockquote class="wp-block-quote is-style-large"><p>There is no greater agony than bearing an untold story inside you.</p><cite>Maya Angelou</cite></blockquote>
+<blockquote class="wp-block-quote is-style-large is-layout-flow wp-block-quote-is-layout-flow"><p>There is no greater agony than bearing an untold story inside you.</p><cite>Maya Angelou</cite></blockquote>
 
diff --git a/data/blocks/hooked-block-error/block.json b/data/blocks/hooked-block-error/block.json
index 346c43b5b3..fdbafa980d 100644
--- a/data/blocks/hooked-block-error/block.json
+++ b/data/blocks/hooked-block-error/block.json
@@ -1,4 +1,5 @@
 {
+	"$schema": "https://schemas.wp.org/trunk/block.json",
 	"name": "tests/hooked-block-error",
 	"description": "A block that throws an error because it tries to hook a block to itself.",
 	"blockHooks": {
diff --git a/data/blocks/notice/block-view.css b/data/blocks/notice/block-view.css
new file mode 100644
index 0000000000..5aefdf30e0
--- /dev/null
+++ b/data/blocks/notice/block-view.css
@@ -0,0 +1 @@
+/* Test front end only CSS file */
\ No newline at end of file
diff --git a/data/blocks/notice/block.json b/data/blocks/notice/block.json
index 909137252a..7ccaef2d13 100644
--- a/data/blocks/notice/block.json
+++ b/data/blocks/notice/block.json
@@ -1,4 +1,5 @@
 {
+	"$schema": "https://schemas.wp.org/trunk/block.json",
 	"apiVersion": 2,
 	"name": "tests/notice",
 	"title": "Notice",
@@ -67,7 +68,9 @@
 	"editorScript": "tests-notice-editor-script",
 	"script": "tests-notice-script",
 	"viewScript": [ "tests-notice-view-script", "tests-notice-view-script-2" ],
+	"viewScriptModule": [ "tests-notice-view-script-module", "tests-notice-view-script-module-2" ],
 	"editorStyle": "tests-notice-editor-style",
 	"style": [ "tests-notice-style", "tests-notice-style-2" ],
+	"viewStyle": [ "tests-notice-view-style" ],
 	"render": "file:./render.php"
 }
diff --git a/data/blocks/notice/shared-script.asset.php b/data/blocks/notice/shared-script.asset.php
new file mode 100644
index 0000000000..d35471c73d
--- /dev/null
+++ b/data/blocks/notice/shared-script.asset.php
@@ -0,0 +1,7 @@
+<?php
+
+return array(
+	'handle'       => 'tests-my-shared-script',
+	'dependencies' => array(),
+	'version'      => 'test',
+);
diff --git a/data/blocks/notice/shared-script.js b/data/blocks/notice/shared-script.js
new file mode 100644
index 0000000000..a9abbdbcc3
--- /dev/null
+++ b/data/blocks/notice/shared-script.js
@@ -0,0 +1 @@
+/* Another test JavaScript file. */
diff --git a/data/filesystem/_source-license b/data/filesystem/_source-license
new file mode 100644
index 0000000000..580a1492a4
--- /dev/null
+++ b/data/filesystem/_source-license
@@ -0,0 +1,33 @@
+The following files were sourced from https://github.com/ZJONSSON/node-unzipper a fork of https://github.com/EvanOxfeld/node-unzip
+
+* archive-comment.zip
+* archive-cp866.zip
+* archive-directory-entry.zip
+* archive-encrypted.zip
+* archive-flags-set.zip
+* archive-invalid.zip
+* archive-large.zip
+* archive-uncompressed.zip
+* archive.crx
+
+Copyright (c) 2012 - 2013 Near Infinity Corporation
+Copyright (c) 2016 - 2024 Ziggy Jonsson (ziggy.jonsson.nyc@gmail.com)
+
+Permission is hereby granted, free of charge, to any person obtaining
+a copy of this software and associated documentation files (the
+"Software"), to deal in the Software without restriction, including
+without limitation the rights to use, copy, modify, merge, publish,
+distribute, sublicense, and/or sell copies of the Software, and to
+permit persons to whom the Software is furnished to do so, subject to
+the following conditions:
+
+The above copyright notice and this permission notice shall be
+included in all copies or substantial portions of the Software.
+
+THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
+EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
+MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
+NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
+LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
+OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
+WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
diff --git a/data/filesystem/archive-comment.zip b/data/filesystem/archive-comment.zip
new file mode 100644
index 0000000000..14a862f1f1
Binary files /dev/null and b/data/filesystem/archive-comment.zip differ
diff --git a/data/filesystem/archive-cp866.zip b/data/filesystem/archive-cp866.zip
new file mode 100644
index 0000000000..04bd3c9372
Binary files /dev/null and b/data/filesystem/archive-cp866.zip differ
diff --git a/data/filesystem/archive-directory-entry.zip b/data/filesystem/archive-directory-entry.zip
new file mode 100644
index 0000000000..e81a6aa7e0
Binary files /dev/null and b/data/filesystem/archive-directory-entry.zip differ
diff --git a/data/filesystem/archive-encrypted.zip b/data/filesystem/archive-encrypted.zip
new file mode 100644
index 0000000000..fd58fb4f1d
Binary files /dev/null and b/data/filesystem/archive-encrypted.zip differ
diff --git a/data/filesystem/archive-flags-set.zip b/data/filesystem/archive-flags-set.zip
new file mode 100644
index 0000000000..015ce233c4
Binary files /dev/null and b/data/filesystem/archive-flags-set.zip differ
diff --git a/data/filesystem/archive-gnome.zip b/data/filesystem/archive-gnome.zip
new file mode 100644
index 0000000000..0f1fc181ea
Binary files /dev/null and b/data/filesystem/archive-gnome.zip differ
diff --git a/data/filesystem/archive-invalid-ext.md b/data/filesystem/archive-invalid-ext.md
new file mode 100644
index 0000000000..1531b03435
--- /dev/null
+++ b/data/filesystem/archive-invalid-ext.md
@@ -0,0 +1,7 @@
+# Shucked
+
+Shucked is a 2022 musical with music and lyrics by Brandy Clark and Shane McAnally, and a book by Robert Horn. The Broadway production began previews at the Nederlander Theatre on March 8, 2023, before opening on April 4. The show received positive reviews and went on to receive nine nominations at the 76th Tony Awards, including Best Musical. Cast member Alex Newell became one of the first two openly non-binary performers to be nominated for and win a Tony Award, with their win for Best Featured Actor in a Musical.
+
+A U.S. tour, West End production, and feature film adaptation are currently planned.
+
+From Wikipedia (https://en.wikipedia.org/wiki/Shucked) under Creative Commons Attribution CC-BY-SA 3.0 (https://creativecommons.org/licenses/by-sa/3.0/legalcode)
diff --git a/data/filesystem/archive-invalid.zip b/data/filesystem/archive-invalid.zip
new file mode 100644
index 0000000000..d13ba6b7ff
Binary files /dev/null and b/data/filesystem/archive-invalid.zip differ
diff --git a/data/filesystem/archive-large.zip b/data/filesystem/archive-large.zip
new file mode 100644
index 0000000000..57c1635fdf
Binary files /dev/null and b/data/filesystem/archive-large.zip differ
diff --git a/data/filesystem/archive-macos.zip b/data/filesystem/archive-macos.zip
new file mode 100644
index 0000000000..a5493f9fa0
Binary files /dev/null and b/data/filesystem/archive-macos.zip differ
diff --git a/data/filesystem/archive-ubuntu-nautilus.zip b/data/filesystem/archive-ubuntu-nautilus.zip
new file mode 100644
index 0000000000..a1d65d1771
Binary files /dev/null and b/data/filesystem/archive-ubuntu-nautilus.zip differ
diff --git a/data/filesystem/archive-uncompressed.zip b/data/filesystem/archive-uncompressed.zip
new file mode 100644
index 0000000000..2d3626d6b6
Binary files /dev/null and b/data/filesystem/archive-uncompressed.zip differ
diff --git a/data/filesystem/archive.crx b/data/filesystem/archive.crx
new file mode 100644
index 0000000000..c07b21c6c1
Binary files /dev/null and b/data/filesystem/archive.crx differ
diff --git a/data/fonts/OpenSans-Regular.otf b/data/fonts/OpenSans-Regular.otf
new file mode 100644
index 0000000000..8db0f64c67
Binary files /dev/null and b/data/fonts/OpenSans-Regular.otf differ
diff --git a/data/fonts/OpenSans-Regular.ttf b/data/fonts/OpenSans-Regular.ttf
new file mode 100644
index 0000000000..ae716936e9
Binary files /dev/null and b/data/fonts/OpenSans-Regular.ttf differ
diff --git a/data/fonts/OpenSans-Regular.woff b/data/fonts/OpenSans-Regular.woff
new file mode 100644
index 0000000000..bd0f824b20
Binary files /dev/null and b/data/fonts/OpenSans-Regular.woff differ
diff --git a/data/fonts/OpenSans-Regular.woff2 b/data/fonts/OpenSans-Regular.woff2
new file mode 100644
index 0000000000..f778f9c845
Binary files /dev/null and b/data/fonts/OpenSans-Regular.woff2 differ
diff --git a/data/images/avif-animated.avif b/data/images/avif-animated.avif
new file mode 100644
index 0000000000..6d6a34a730
Binary files /dev/null and b/data/images/avif-animated.avif differ
diff --git a/data/images/avif-lossless.avif b/data/images/avif-lossless.avif
new file mode 100644
index 0000000000..7eb2d5ce68
Binary files /dev/null and b/data/images/avif-lossless.avif differ
diff --git a/data/images/avif-lossy.avif b/data/images/avif-lossy.avif
new file mode 100644
index 0000000000..0aba41c1bf
Binary files /dev/null and b/data/images/avif-lossy.avif differ
diff --git a/data/images/avif-transparent.avif b/data/images/avif-transparent.avif
new file mode 100644
index 0000000000..8165f9ff46
Binary files /dev/null and b/data/images/avif-transparent.avif differ
diff --git a/data/images/color_grid_alpha_nogrid.avif b/data/images/color_grid_alpha_nogrid.avif
new file mode 100644
index 0000000000..fa301f5898
Binary files /dev/null and b/data/images/color_grid_alpha_nogrid.avif differ
diff --git a/data/images/colors_hdr_p3.avif b/data/images/colors_hdr_p3.avif
new file mode 100644
index 0000000000..6a2403f110
Binary files /dev/null and b/data/images/colors_hdr_p3.avif differ
diff --git a/data/l10n/example-simple.mo b/data/l10n/example-simple.mo
new file mode 100644
index 0000000000..cf39269a46
Binary files /dev/null and b/data/l10n/example-simple.mo differ
diff --git a/data/l10n/example-simple.php b/data/l10n/example-simple.php
new file mode 100644
index 0000000000..24b3552bfd
--- /dev/null
+++ b/data/l10n/example-simple.php
@@ -0,0 +1,11 @@
+<?php
+return [
+	'messages' =>
+		[
+			'original' => 'translation',
+			'contextoriginal with context' => 'translation with context',
+			'plural0' => 'translation0'  . "\0" . 'translation1',
+			'contextplural0 with context' => 'translation0 with context' . "\0" . 'translation1 with context',
+			'Product' => 'Produkt' . "\0" . 'Produkte',
+		],
+];
diff --git a/data/l10n/example-simple.po b/data/l10n/example-simple.po
new file mode 100644
index 0000000000..9aff39e121
--- /dev/null
+++ b/data/l10n/example-simple.po
@@ -0,0 +1,26 @@
+msgid ""
+msgstr ""
+"PO-Revision-Date: 2016-01-05 18:45:32+1000\n"
+
+msgid "original"
+msgstr "translation"
+
+msgctxt "context"
+msgid "original with context"
+msgstr "translation with context"
+
+msgid "plural0"
+msgid_plural "plural1"
+msgstr[0] "translation0"
+msgstr[1] "translation1"
+
+msgctxt "context"
+msgid "plural0 with context"
+msgid_plural "plural1 with context"
+msgstr[0] "translation0 with context"
+msgstr[1] "translation1 with context"
+
+msgid "Product"
+msgid_plural "Products"
+msgstr[0] "Produkt"
+msgstr[1] "Produkte"
diff --git a/data/l10n/fa_IR.mo b/data/l10n/fa_IR.mo
new file mode 100644
index 0000000000..19f165658e
Binary files /dev/null and b/data/l10n/fa_IR.mo differ
diff --git a/data/l10n/plural-complex.mo b/data/l10n/plural-complex.mo
new file mode 100644
index 0000000000..9cb7b2820e
Binary files /dev/null and b/data/l10n/plural-complex.mo differ
diff --git a/data/l10n/plural-complex.php b/data/l10n/plural-complex.php
new file mode 100644
index 0000000000..b214214f2a
--- /dev/null
+++ b/data/l10n/plural-complex.php
@@ -0,0 +1,2 @@
+<?php
+return ['x-generator'=>'GlotPress/4.0.0-beta.2','translation-revision-date'=>'2024-01-18 05:40:05+0000','plural-forms'=>'nplurals=4; plural=(n % 100 == 1) ? 0 : ((n % 100 == 2) ? 1 : ((n % 100 == 3 || n % 100 == 4) ? 2 : 3));','project-id-version'=>'WordPress - 6.4.x - Development','language'=>'sl_SI','messages'=>['%s update available'=>'%s razpoložljiva posodobitev' . "\0" . '%s razpoložljivi posodobitvi' . "\0" . '%s razpoložljive posodobitve' . "\0" . '%s razpoložljivih posodobitev']];
\ No newline at end of file
diff --git a/data/l10n/plural.mo b/data/l10n/plural.mo
new file mode 100644
index 0000000000..c838ad5bbf
Binary files /dev/null and b/data/l10n/plural.mo differ
diff --git a/data/l10n/simple.mo b/data/l10n/simple.mo
new file mode 100644
index 0000000000..18ca12d94e
Binary files /dev/null and b/data/l10n/simple.mo differ
diff --git a/data/languages/admin-en_GB.l10n.php b/data/languages/admin-en_GB.l10n.php
new file mode 100644
index 0000000000..ca1d62f663
--- /dev/null
+++ b/data/languages/admin-en_GB.l10n.php
@@ -0,0 +1,2 @@
+<?php
+return ['domain'=>NULL,'plural-forms'=>'nplurals=2; plural=n != 1;','messages'=>['Thank you for updating! WordPress %s makes your site more connected and responsive.'=>'Thank you for updating! WordPress %s makes your site more connected and responsive.','New %1$s, %2$s, and %3$s objects make interacting with terms, comments, and networks more predictable and intuitive in code.'=>'New %1$s, %2$s, and %3$s objects make interacting with terms, comments, and networks more predictable and intuitive in code.','Comment queries now have cache handling to improve performance. New arguments in %s make crafting robust comment queries simpler.'=>'Comment queries now have cache handling to improve performance. New arguments in %s make crafting robust comment queries simpler.','Term, comment, and network objects'=>'Term, comment, and network objects','Comment query improvements'=>'Comment query improvements'],'language'=>'en_GB','x-generator'=>'Poedit 1.8.10'];
\ No newline at end of file
diff --git a/data/languages/admin-es_ES.l10n.php b/data/languages/admin-es_ES.l10n.php
new file mode 100644
index 0000000000..27df773c21
--- /dev/null
+++ b/data/languages/admin-es_ES.l10n.php
@@ -0,0 +1,2 @@
+<?php
+return ['domain'=>NULL,'plural-forms'=>'nplurals=2; plural=n != 1;','messages'=>['Thank you for updating! WordPress %s makes your site more connected and responsive.'=>'¡Gracias por actualizar! WordPress %s hace que tu sitio esté más conectado y sea más adaptable.','New %1$s, %2$s, and %3$s objects make interacting with terms, comments, and networks more predictable and intuitive in code.'=>'Ahora los objetos %1$s, %2$s y %3$s hacen que interactuar con términos, comentarios y redes sea más predecible y que el código sea más intuitivo.','Comment queries now have cache handling to improve performance. New arguments in %s make crafting robust comment queries simpler.'=>'Las consultas de comentarios ahora tiene una caché que mejora el rendimiento. Nuevos argumentos en %s hacen que sea más fácil crear consultas robustas.','Term, comment, and network objects'=>'Objetos de término, comentario y red','Comment query improvements'=>'Mejoras en las consultas de comentarios'],'language'=>'es_ES','x-generator'=>'Poedit 1.8.10'];
\ No newline at end of file
diff --git a/data/languages/admin-network-en_GB.l10n.php b/data/languages/admin-network-en_GB.l10n.php
new file mode 100644
index 0000000000..05171a7e49
--- /dev/null
+++ b/data/languages/admin-network-en_GB.l10n.php
@@ -0,0 +1,2 @@
+<?php
+return ['domain'=>NULL,'plural-forms'=>'nplurals=2; plural=n != 1;','messages'=>['A password reset link will be sent to the user via email.'=>'A password reset link will be sent to the user via email.','If registration is disabled, please set %1$s in %2$s to a URL you will redirect visitors to if they visit a non-existent site.'=>'If registration is disabled, please set %1$s in %2$s to a URL you will redirect visitors to if they visit a non-existent site.','Site users list'=>'Site users list','Site users list navigation'=>'Site users list navigation','Sites list'=>'Sites list'],'language'=>'en_GB','x-generator'=>'Poedit 1.8.10'];
\ No newline at end of file
diff --git a/data/languages/admin-network-es_ES.l10n.php b/data/languages/admin-network-es_ES.l10n.php
new file mode 100644
index 0000000000..0e8f9d4fad
--- /dev/null
+++ b/data/languages/admin-network-es_ES.l10n.php
@@ -0,0 +1,2 @@
+<?php
+return ['domain'=>NULL,'plural-forms'=>'nplurals=2; plural=n != 1;','messages'=>['A password reset link will be sent to the user via email.'=>'Se te enviará un enlace por email para que puedas cambiar la contraseña.','If registration is disabled, please set %1$s in %2$s to a URL you will redirect visitors to if they visit a non-existent site.'=>'Si el registro de usuarios está desactivado , establece como valor de %1$s en %2$s una URL donde redirigir a los visitantes que accedan a un sitio inexistente.','Site users list navigation'=>'Navegación por la lista de usuarios del sitio','Site users list'=>'Lista de usuarios del sitio','Sites list navigation'=>'Navegación por la lista de sitios'],'language'=>'es_ES','x-generator'=>'Poedit 1.8.10'];
\ No newline at end of file
diff --git a/data/languages/continents-cities-es_ES.l10n.php b/data/languages/continents-cities-es_ES.l10n.php
new file mode 100644
index 0000000000..11a692aa5d
--- /dev/null
+++ b/data/languages/continents-cities-es_ES.l10n.php
@@ -0,0 +1,2 @@
+<?php
+return ['domain'=>NULL,'plural-forms'=>'nplurals=2; plural=n != 1;','messages'=>['Vincennes'=>'Vincennes','Winamac'=>'Winamac','Inuvik'=>'Inuvik','Iqaluit'=>'Iqaluit','Jamaica'=>'Jamaica'],'language'=>'es_ES','x-generator'=>'Poedit 1.8.10'];
\ No newline at end of file
diff --git a/data/languages/de_DE.l10n.php b/data/languages/de_DE.l10n.php
new file mode 100644
index 0000000000..8eef01d79c
--- /dev/null
+++ b/data/languages/de_DE.l10n.php
@@ -0,0 +1,2 @@
+<?php
+return ['domain'=>NULL,'plural-forms'=>'nplurals=2; plural=n != 1;','messages'=>['html_lang_attribute'=>'de-DE','text directionltr'=>'ltr','number_format_decimal_point'=>',','number_format_thousands_sep'=>'.','Update %s now'=>'Jetzt %s aktualisieren','[%1$s] Confirm Action: %2$s'=>'[%1$s] Aktion bestätigen: %2$s','[%s] Erasure Request Fulfilled'=>'[%s] Löschauftrag ausgeführt','[%s] Personal Data Export'=>'[%s] Export personenbezogener Daten'],'language'=>'de_DE','x-generator'=>'Poedit 2.2.1'];
\ No newline at end of file
diff --git a/data/languages/en_GB.l10n.php b/data/languages/en_GB.l10n.php
new file mode 100644
index 0000000000..265e1f670f
--- /dev/null
+++ b/data/languages/en_GB.l10n.php
@@ -0,0 +1,2 @@
+<?php
+return ['domain'=>NULL,'plural-forms'=>'nplurals=2; plural=n != 1;','messages'=>['text directionltr'=>'ltr','<strong>ERROR</strong>: Sorry, that username is not allowed.'=>'<strong>ERROR</strong>: Sorry, that username is not allowed.','Invalid parameter.'=>'Invalid parameter.','menu location(Current: %s)'=>'(Current: %s)','menu(Currently set to: %s)'=>'(Currently set to: %s)'],'language'=>'en_GB','x-generator'=>'Poedit 1.8.10'];
\ No newline at end of file
diff --git a/data/languages/es_ES.l10n.php b/data/languages/es_ES.l10n.php
new file mode 100644
index 0000000000..827f1f766b
--- /dev/null
+++ b/data/languages/es_ES.l10n.php
@@ -0,0 +1,2 @@
+<?php
+return ['domain'=>NULL,'plural-forms'=>'nplurals=2; plural=n != 1;','messages'=>['text directionltr'=>'ltr','<strong>ERROR</strong>: Sorry, that username is not allowed.'=>'<strong>ERROR</strong>: Lo siento, ese nombre de usuario no está permitido.','Invalid parameter.'=>'Parámetro no válido. ','menu location(Current: %s)'=>'(Actual: %s)','menu(Currently set to: %s)'=>'(Actualmente fijado en: %s)','[%1$s] Confirm Action: %2$s'=>'[%1$s] Confirmar la acción: %2$s','[%s] Erasure Request Fulfilled'=>'[%s] Solicitud de borrado completada','[%s] Personal Data Export'=>'[%s] Exportación de datos personales'],'language'=>'es_ES','x-generator'=>'Poedit 2.3'];
\ No newline at end of file
diff --git a/data/languages/ja_JP.l10n.php b/data/languages/ja_JP.l10n.php
new file mode 100644
index 0000000000..e8872714ac
--- /dev/null
+++ b/data/languages/ja_JP.l10n.php
@@ -0,0 +1,2 @@
+<?php
+return ['domain'=>NULL,'plural-forms'=>'nplurals=2; plural=n != 1;','messages'=>['html_lang_attribute'=>'ja','text directionltr'=>'ltr','number_format_decimal_point'=>'number_format_decimal_point','number_format_thousands_sep'=>'number_format_thousands_sep','Update %s now'=>'今すぐ %s を更新','Word count type. Do not translate!words'=>'characters_including_spaces','excerpt_length55'=>'110','comment_excerpt_length20'=>'40','draft_length10'=>'40'],'language'=>'ja_JP','x-generator'=>'Poedit 1.8.10'];
\ No newline at end of file
diff --git a/data/languages/plugins/internationalized-plugin-2-de_DE.l10n.php b/data/languages/plugins/internationalized-plugin-2-de_DE.l10n.php
new file mode 100644
index 0000000000..4002587e9e
--- /dev/null
+++ b/data/languages/plugins/internationalized-plugin-2-de_DE.l10n.php
@@ -0,0 +1,2 @@
+<?php
+return ['domain'=>NULL,'plural-forms'=>'nplurals=2; plural=(n != 1);','messages'=>['This is a dummy plugin'=>'Das ist ein Dummy Plugin'],'language'=>'de_DE','x-generator'=>'Poedit 2.4.1'];
\ No newline at end of file
diff --git a/data/languages/plugins/internationalized-plugin-2-es_ES.l10n.php b/data/languages/plugins/internationalized-plugin-2-es_ES.l10n.php
new file mode 100644
index 0000000000..c38b5058f6
--- /dev/null
+++ b/data/languages/plugins/internationalized-plugin-2-es_ES.l10n.php
@@ -0,0 +1,2 @@
+<?php
+return ['domain'=>NULL,'plural-forms'=>'nplurals=2; plural=(n != 1);','messages'=>['This is a dummy plugin'=>'Este es un plugin dummy'],'language'=>'de_DE','x-generator'=>'Poedit 2.4.1'];
\ No newline at end of file
diff --git a/data/plugins/internationalized-plugin-2.php b/data/plugins/internationalized-plugin-2.php
new file mode 100644
index 0000000000..5e75cf6b7f
--- /dev/null
+++ b/data/plugins/internationalized-plugin-2.php
@@ -0,0 +1,12 @@
+<?php
+/*
+Plugin Name: Dummy Plugin 2
+Plugin URI: https://wordpress.org/
+Description: For testing purposes only. Only has an .l10n.php translation file.
+Version: 1.0.0
+Text Domain: internationalized-plugin
+*/
+
+function i18n_plugin_2_test() {
+	return __( 'This is a dummy plugin', 'internationalized-plugin-2' );
+}
diff --git a/data/plugins/link-manager.json b/data/plugins/link-manager.json
new file mode 100644
index 0000000000..5752aac562
--- /dev/null
+++ b/data/plugins/link-manager.json
@@ -0,0 +1 @@
+{"name":"Link Manager","slug":"link-manager","version":"0.1-beta","author":"WordPress","author_profile":"https:\/\/profiles.wordpress.org\/nacin\/","contributors":{"nacin":{"profile":"https:\/\/profiles.wordpress.org\/nacin\/","avatar":"https:\/\/secure.gravatar.com\/avatar\/01cfe9feaafb068590891bbd1f6a7f5a?s=96&d=monsterid&r=g","display_name":"Andrew Nacin"}},"requires":"3.5","tested":"6.1.5","requires_php":false,"requires_plugins":[],"rating":90,"ratings":{"5":27,"4":3,"3":0,"2":0,"1":3},"num_ratings":33,"support_url":"https:\/\/wordpress.org\/support\/plugin\/link-manager\/","support_threads":1,"support_threads_resolved":1,"active_installs":30000,"last_updated":"2012-08-16 10:57pm GMT","added":"2012-08-16","homepage":"","download_link":"https:\/\/downloads.wordpress.org\/plugin\/link-manager.zip","upgrade_notice":[],"screenshots":[],"tags":{"blogroll":"blogroll","link-manager":"link manager","links":"links"},"versions":[],"business_model":false,"repository_url":"","commercial_support_url":"","donate_link":"","banners":[],"preview_link":"","language_packs":[]}
\ No newline at end of file
diff --git a/data/pomo/simple.l10n.php b/data/pomo/simple.l10n.php
new file mode 100644
index 0000000000..078c8a95cb
--- /dev/null
+++ b/data/pomo/simple.l10n.php
@@ -0,0 +1,3 @@
+<?php
+return ['project-id-version'=>'WordPress 2.6-bleeding','report-msgid-bugs-to'=>'wp-polyglots@lists.automattic.com','messages'=>['baba'=>'dyado','kuku
+ruku'=>'yes']];
diff --git a/data/themedir1/block-theme-child-deprecated-path/theme.json b/data/themedir1/block-theme-child-deprecated-path/theme.json
index 38fcb1d9dd..1be2ba0116 100644
--- a/data/themedir1/block-theme-child-deprecated-path/theme.json
+++ b/data/themedir1/block-theme-child-deprecated-path/theme.json
@@ -1,4 +1,5 @@
 {
+	"$schema": "https://schemas.wp.org/trunk/theme.json",
 	"version": 1,
 	"settings": {
 		"color": {
diff --git a/data/themedir1/block-theme-child-with-fluid-layout/theme.json b/data/themedir1/block-theme-child-with-fluid-layout/theme.json
index 6985da16c6..710ec336df 100644
--- a/data/themedir1/block-theme-child-with-fluid-layout/theme.json
+++ b/data/themedir1/block-theme-child-with-fluid-layout/theme.json
@@ -1,4 +1,5 @@
 {
+	"$schema": "https://schemas.wp.org/trunk/theme.json",
 	"version": 2,
 	"settings": {
 		"appearanceTools": true,
diff --git a/data/themedir1/block-theme-child-with-fluid-typography-config/theme.json b/data/themedir1/block-theme-child-with-fluid-typography-config/theme.json
index 65ed480f20..dcd3745f16 100644
--- a/data/themedir1/block-theme-child-with-fluid-typography-config/theme.json
+++ b/data/themedir1/block-theme-child-with-fluid-typography-config/theme.json
@@ -1,4 +1,5 @@
 {
+	"$schema": "https://schemas.wp.org/trunk/theme.json",
 	"version": 2,
 	"settings": {
 		"appearanceTools": true,
diff --git a/data/themedir1/block-theme-child-with-fluid-typography/theme.json b/data/themedir1/block-theme-child-with-fluid-typography/theme.json
index 93234766ed..7b34524270 100644
--- a/data/themedir1/block-theme-child-with-fluid-typography/theme.json
+++ b/data/themedir1/block-theme-child-with-fluid-typography/theme.json
@@ -1,4 +1,5 @@
 {
+	"$schema": "https://schemas.wp.org/trunk/theme.json",
 	"version": 2,
 	"settings": {
 		"appearanceTools": true,
diff --git a/data/themedir1/block-theme-child/blocks/example-block/block.json b/data/themedir1/block-theme-child/blocks/example-block/block.json
index 419a332b58..3eb86f3f77 100644
--- a/data/themedir1/block-theme-child/blocks/example-block/block.json
+++ b/data/themedir1/block-theme-child/blocks/example-block/block.json
@@ -1,4 +1,5 @@
 {
+	"$schema": "https://schemas.wp.org/trunk/block.json",
 	"apiVersion": 2,
 	"title": "Example Theme Block",
 	"name": "block-theme/example-block",
diff --git a/data/themedir1/block-theme-child/styles/variation-a.json b/data/themedir1/block-theme-child/styles/variation-a.json
new file mode 100644
index 0000000000..a9d5ade894
--- /dev/null
+++ b/data/themedir1/block-theme-child/styles/variation-a.json
@@ -0,0 +1,18 @@
+{
+	"version": 2,
+	"settings": {
+		"blocks": {
+			"core/paragraph": {
+				"color": {
+					"palette": [
+						{
+							"slug": "dark",
+							"name": "Dark",
+							"color": "#010101"
+						}
+					]
+				}
+			}
+		}
+	}
+}
diff --git a/data/themedir1/block-theme-child/theme.json b/data/themedir1/block-theme-child/theme.json
index 90fe35e758..1157fa9128 100644
--- a/data/themedir1/block-theme-child/theme.json
+++ b/data/themedir1/block-theme-child/theme.json
@@ -1,5 +1,6 @@
 {
-	"version": 1,
+	"$schema": "https://schemas.wp.org/trunk/theme.json",
+	"version": 2,
 	"settings": {
 		"color": {
 			"palette": [
diff --git a/data/themedir1/block-theme-deprecated-path/theme.json b/data/themedir1/block-theme-deprecated-path/theme.json
index 38fcb1d9dd..1be2ba0116 100644
--- a/data/themedir1/block-theme-deprecated-path/theme.json
+++ b/data/themedir1/block-theme-deprecated-path/theme.json
@@ -1,4 +1,5 @@
 {
+	"$schema": "https://schemas.wp.org/trunk/theme.json",
 	"version": 1,
 	"settings": {
 		"color": {
diff --git a/data/themedir1/block-theme-non-latin/theme.json b/data/themedir1/block-theme-non-latin/theme.json
index f0c59a63ab..855a48a8cc 100644
--- a/data/themedir1/block-theme-non-latin/theme.json
+++ b/data/themedir1/block-theme-non-latin/theme.json
@@ -1,4 +1,5 @@
 {
+	"$schema": "https://schemas.wp.org/trunk/theme.json",
 	"version": 1,
 	"settings": {
 		"color": {
diff --git a/data/themedir1/block-theme-patterns/patterns/cta.php b/data/themedir1/block-theme-patterns/patterns/cta.php
new file mode 100644
index 0000000000..f6e0b1d308
--- /dev/null
+++ b/data/themedir1/block-theme-patterns/patterns/cta.php
@@ -0,0 +1,36 @@
+<?php
+/**
+ * Title: Centered Call To Action
+ * Slug: block-theme-patterns/cta
+ * Categories: call-to-action
+ */
+?>
+
+<!-- wp:group {"align":"full","style":{"spacing":{"padding":{"top":"var:preset|spacing|50","bottom":"var:preset|spacing|50","left":"var:preset|spacing|50","right":"var:preset|spacing|50"}}},"layout":{"type":"constrained"}} -->
+<div class="wp-block-group alignfull" style="padding-top:var(--wp--preset--spacing--50);padding-right:var(--wp--preset--spacing--50);padding-bottom:var(--wp--preset--spacing--50);padding-left:var(--wp--preset--spacing--50)"><!-- wp:group {"align":"wide","style":{"border":{"radius":"16px"},"spacing":{"padding":{"top":"var:preset|spacing|40","bottom":"var:preset|spacing|40","left":"var:preset|spacing|50","right":"var:preset|spacing|50"}}},"backgroundColor":"base-2","layout":{"type":"constrained"}} -->
+	<div class="wp-block-group alignwide has-base-2-background-color has-background" style="border-radius:16px;padding-top:var(--wp--preset--spacing--40);padding-right:var(--wp--preset--spacing--50);padding-bottom:var(--wp--preset--spacing--40);padding-left:var(--wp--preset--spacing--50)"><!-- wp:spacer {"height":"var:preset|spacing|10"} -->
+		<div style="height:var(--wp--preset--spacing--10)" aria-hidden="true" class="wp-block-spacer"></div>
+		<!-- /wp:spacer -->
+
+		<!-- wp:heading {"textAlign":"center","fontSize":"x-large"} -->
+		<h2 class="wp-block-heading has-text-align-center has-x-large-font-size"><?php echo esc_html_x( 'Join 900+ subscribers', 'Sample text for Subscriber Heading with numbers', 'twentytwentyfour' ); ?></h2>
+		<!-- /wp:heading -->
+
+		<!-- wp:paragraph {"align":"center"} -->
+		<p class="has-text-align-center"><?php echo esc_html_x( 'Stay in the loop with everything you need to know.', 'Sample text for Subscriber Description', 'twentytwentyfour' ); ?></p>
+		<!-- /wp:paragraph -->
+
+		<!-- wp:buttons {"layout":{"type":"flex","justifyContent":"center"}} -->
+		<div class="wp-block-buttons"><!-- wp:button -->
+			<div class="wp-block-button"><a class="wp-block-button__link wp-element-button"><?php echo esc_html_x( 'Sign up', 'Sample text for Sign Up Button', 'twentytwentyfour' ); ?></a></div>
+			<!-- /wp:button -->
+		</div>
+		<!-- /wp:buttons -->
+
+		<!-- wp:spacer {"height":"var:preset|spacing|10"} -->
+		<div style="height:var(--wp--preset--spacing--10)" aria-hidden="true" class="wp-block-spacer"></div>
+		<!-- /wp:spacer -->
+	</div>
+	<!-- /wp:group -->
+</div>
+<!-- /wp:group -->
diff --git a/data/themedir1/block-theme-patterns/style.css b/data/themedir1/block-theme-patterns/style.css
new file mode 100644
index 0000000000..5bb4fdb800
--- /dev/null
+++ b/data/themedir1/block-theme-patterns/style.css
@@ -0,0 +1,8 @@
+/*
+Theme Name: Block Theme Patterns
+Theme URI: https://wordpress.org/
+Description: For testing purposes only.
+Template: block-theme
+Version: 1.0.0
+Text Domain: block-theme-patterns
+*/
diff --git a/data/themedir1/block-theme-post-content-default/theme.json b/data/themedir1/block-theme-post-content-default/theme.json
index 781d5ed669..2a9533972f 100644
--- a/data/themedir1/block-theme-post-content-default/theme.json
+++ b/data/themedir1/block-theme-post-content-default/theme.json
@@ -1,4 +1,5 @@
 {
+	"$schema": "https://schemas.wp.org/trunk/theme.json",
 	"version": 1,
 	"title": "Block theme",
 	"settings": {
diff --git a/data/themedir1/block-theme-with-hooked-blocks/blocks/hooked-after/block.json b/data/themedir1/block-theme-with-hooked-blocks/blocks/hooked-after/block.json
new file mode 100644
index 0000000000..2e66adecc4
--- /dev/null
+++ b/data/themedir1/block-theme-with-hooked-blocks/blocks/hooked-after/block.json
@@ -0,0 +1,9 @@
+{
+	"$schema": "https://schemas.wp.org/trunk/block.json",
+	"title": "Hooked Block (after)",
+	"name": "tests/hooked-after",
+	"blockHooks": {
+		"core/post-content": "after"
+	},
+	"render": "file:render.php"
+}
diff --git a/data/themedir1/block-theme-with-hooked-blocks/blocks/hooked-after/render.php b/data/themedir1/block-theme-with-hooked-blocks/blocks/hooked-after/render.php
new file mode 100644
index 0000000000..11842e2fac
--- /dev/null
+++ b/data/themedir1/block-theme-with-hooked-blocks/blocks/hooked-after/render.php
@@ -0,0 +1 @@
+<p>Block hooked after.<p>
diff --git a/data/themedir1/block-theme-with-hooked-blocks/blocks/hooked-before/block.json b/data/themedir1/block-theme-with-hooked-blocks/blocks/hooked-before/block.json
new file mode 100644
index 0000000000..800a005cce
--- /dev/null
+++ b/data/themedir1/block-theme-with-hooked-blocks/blocks/hooked-before/block.json
@@ -0,0 +1,9 @@
+{
+	"$schema": "https://schemas.wp.org/trunk/block.json",
+	"title": "Hooked Block (before)",
+	"name": "tests/hooked-before",
+	"blockHooks": {
+		"core/navigation": "before"
+	},
+	"render": "file:render.php"
+}
diff --git a/data/themedir1/block-theme-with-hooked-blocks/blocks/hooked-before/render.php b/data/themedir1/block-theme-with-hooked-blocks/blocks/hooked-before/render.php
new file mode 100644
index 0000000000..11cf764e0c
--- /dev/null
+++ b/data/themedir1/block-theme-with-hooked-blocks/blocks/hooked-before/render.php
@@ -0,0 +1 @@
+<p>Block hooked before.<p>
diff --git a/data/themedir1/block-theme-with-hooked-blocks/blocks/hooked-first-child/block.json b/data/themedir1/block-theme-with-hooked-blocks/blocks/hooked-first-child/block.json
new file mode 100644
index 0000000000..ae044d21ed
--- /dev/null
+++ b/data/themedir1/block-theme-with-hooked-blocks/blocks/hooked-first-child/block.json
@@ -0,0 +1,9 @@
+{
+	"$schema": "https://schemas.wp.org/trunk/block.json",
+	"title": "Hooked Block (first child)",
+	"name": "tests/hooked-first-child",
+	"blockHooks": {
+		"core/comments": "firstChild"
+	},
+	"render": "file:render.php"
+}
diff --git a/data/themedir1/block-theme-with-hooked-blocks/blocks/hooked-first-child/render.php b/data/themedir1/block-theme-with-hooked-blocks/blocks/hooked-first-child/render.php
new file mode 100644
index 0000000000..cf18dbec73
--- /dev/null
+++ b/data/themedir1/block-theme-with-hooked-blocks/blocks/hooked-first-child/render.php
@@ -0,0 +1 @@
+<p>Block hooked as the first child.<p>
diff --git a/data/themedir1/block-theme-with-hooked-blocks/blocks/hooked-last-child/block.json b/data/themedir1/block-theme-with-hooked-blocks/blocks/hooked-last-child/block.json
new file mode 100644
index 0000000000..8e602902af
--- /dev/null
+++ b/data/themedir1/block-theme-with-hooked-blocks/blocks/hooked-last-child/block.json
@@ -0,0 +1,9 @@
+{
+	"$schema": "https://schemas.wp.org/trunk/block.json",
+	"title": "Hooked Block (last child)",
+	"name": "tests/hooked-last-child",
+	"blockHooks": {
+		"core/comment-template": "lastChild"
+	},
+	"render": "file:render.php"
+}
diff --git a/data/themedir1/block-theme-with-hooked-blocks/blocks/hooked-last-child/render.php b/data/themedir1/block-theme-with-hooked-blocks/blocks/hooked-last-child/render.php
new file mode 100644
index 0000000000..6a33b30c4c
--- /dev/null
+++ b/data/themedir1/block-theme-with-hooked-blocks/blocks/hooked-last-child/render.php
@@ -0,0 +1 @@
+<p>Block hooked as the last child.<p>
diff --git a/data/themedir1/block-theme-with-hooked-blocks/parts/comments.html b/data/themedir1/block-theme-with-hooked-blocks/parts/comments.html
new file mode 100644
index 0000000000..09938c14cf
--- /dev/null
+++ b/data/themedir1/block-theme-with-hooked-blocks/parts/comments.html
@@ -0,0 +1 @@
+<!-- wp:pattern {"slug":"block-theme-with-hooked-blocks/hidden-comments"} /-->
diff --git a/data/themedir1/block-theme-with-hooked-blocks/parts/footer.html b/data/themedir1/block-theme-with-hooked-blocks/parts/footer.html
new file mode 100644
index 0000000000..e7657167e5
--- /dev/null
+++ b/data/themedir1/block-theme-with-hooked-blocks/parts/footer.html
@@ -0,0 +1 @@
+<!-- wp:pattern {"slug":"block-theme-with-hooked-blocks/footer-default"} /-->
diff --git a/data/themedir1/block-theme-with-hooked-blocks/parts/header.html b/data/themedir1/block-theme-with-hooked-blocks/parts/header.html
new file mode 100644
index 0000000000..475e811571
--- /dev/null
+++ b/data/themedir1/block-theme-with-hooked-blocks/parts/header.html
@@ -0,0 +1,10 @@
+<!-- wp:group {"layout":{"type":"constrained"}} -->
+<div class="wp-block-group">
+	<!-- wp:group {"align":"wide","layout":{"type":"flex","justifyContent":"space-between"}} -->
+	<div class="wp-block-group alignwide">
+		<!-- wp:site-title {"level":0} /-->
+		<!-- wp:navigation {"layout":{"type":"flex","setCascadingProperties":true,"justifyContent":"right"}} /-->
+	</div>
+	<!-- /wp:group -->
+</div>
+<!-- /wp:group -->
diff --git a/data/themedir1/block-theme-with-hooked-blocks/patterns/footer-default.php b/data/themedir1/block-theme-with-hooked-blocks/patterns/footer-default.php
new file mode 100644
index 0000000000..353149ec47
--- /dev/null
+++ b/data/themedir1/block-theme-with-hooked-blocks/patterns/footer-default.php
@@ -0,0 +1,28 @@
+<?php
+/**
+ * Title: Default Footer
+ * Slug: block-theme-with-hooked-blocks/footer-default
+ * Categories: footer
+ * Block Types: core/template-part/footer
+ */
+?>
+<!-- wp:group {"layout":{"type":"constrained"}} -->
+<div class="wp-block-group">
+	<!-- wp:group {"align":"wide","layout":{"type":"flex","justifyContent":"space-between"}} -->
+	<div class="wp-block-group alignwide">
+		<!-- wp:site-title {"level":0} /-->
+		<!-- wp:paragraph {"align":"right"} -->
+		<p class="has-text-align-right">
+		<?php
+		printf(
+			/* Translators: WordPress link. */
+			esc_html__( 'Proudly powered by %s', 'block-theme-with-hooked-blocks' ),
+			'<a href="' . esc_url( __( 'https://wordpress.org', 'block-theme-with-hooked-blocks' ) ) . '" rel="nofollow">WordPress</a>'
+		)
+		?>
+		</p>
+		<!-- /wp:paragraph -->
+	</div>
+	<!-- /wp:group -->
+</div>
+<!-- /wp:group -->
diff --git a/data/themedir1/block-theme-with-hooked-blocks/patterns/hidden-comments.php b/data/themedir1/block-theme-with-hooked-blocks/patterns/hidden-comments.php
new file mode 100644
index 0000000000..243eb13029
--- /dev/null
+++ b/data/themedir1/block-theme-with-hooked-blocks/patterns/hidden-comments.php
@@ -0,0 +1,57 @@
+<?php
+/**
+ * Title: Hidden Comments
+ * Slug: block-theme-with-hooked-blocks/hidden-comments
+ * Inserter: no
+ */
+?>
+<!-- wp:group {"layout":{"type":"constrained"}} -->
+<div class="wp-block-group" >
+	<!-- wp:comments -->
+	<div class="wp-block-comments">
+		<!-- wp:heading {"level":2} -->
+		<h2><?php echo esc_html_x( 'Comments', 'Title of comments section', 'block-theme-with-hooked-blocks' ); ?></h2>
+		<!-- /wp:heading -->
+
+		<!-- wp:comments-title {"level":3} /-->
+
+		<!-- wp:comment-template -->
+			<!-- wp:columns -->
+			<div class="wp-block-columns">
+				<!-- wp:column -->
+				<div class="wp-block-column">
+					<!-- wp:avatar /-->
+				</div>
+				<!-- /wp:column -->
+
+				<!-- wp:column -->
+				<div class="wp-block-column">
+					<!-- wp:comment-author-name /-->
+
+					<!-- wp:group -->
+					<div class="wp-block-group">
+						<!-- wp:comment-date /-->
+						<!-- wp:comment-edit-link /-->
+					</div>
+					<!-- /wp:group -->
+
+					<!-- wp:comment-content /-->
+
+					<!-- wp:comment-reply-link /-->
+				</div>
+				<!-- /wp:column -->
+			</div>
+			<!-- /wp:columns -->
+		<!-- /wp:comment-template -->
+
+		<!-- wp:comments-pagination {"paginationArrow":"arrow","layout":{"type":"flex","justifyContent":"space-between"}} -->
+			<!-- wp:comments-pagination-previous /-->
+			<!-- wp:comments-pagination-numbers /-->
+			<!-- wp:comments-pagination-next /-->
+		<!-- /wp:comments-pagination -->
+
+	<!-- wp:post-comments-form /-->
+	</div>
+	<!-- /wp:comments -->
+</div>
+<!-- /wp:group -->
diff --git a/data/themedir1/block-theme-with-hooked-blocks/patterns/post-meta.php b/data/themedir1/block-theme-with-hooked-blocks/patterns/post-meta.php
new file mode 100644
index 0000000000..48bb51c720
--- /dev/null
+++ b/data/themedir1/block-theme-with-hooked-blocks/patterns/post-meta.php
@@ -0,0 +1,76 @@
+<?php
+/**
+ * Title: Post Meta
+ * Slug: block-theme-with-hooked-blocks/post-meta
+ * Categories: query
+ * Keywords: post meta
+ * Block Types: core/template-part/post-meta
+ */
+?>
+<!-- wp:spacer {"height":"0"} -->
+<div style="height:0" aria-hidden="true" class="wp-block-spacer"></div>
+<!-- /wp:spacer -->
+
+<!-- wp:group {"layout":{"type":"constrained"}} -->
+<div class="wp-block-group">
+	<!-- wp:separator {"opacity":"css","align":"wide","className":"is-style-wide"} -->
+	<hr class="wp-block-separator alignwide has-css-opacity is-style-wide"/>
+	<!-- /wp:separator -->
+
+	<!-- wp:columns -->
+	<div class="wp-block-columns">
+		<!-- wp:column -->
+		<div class="wp-block-column">
+			<!-- wp:group {"layout":{"type":"flex"}} -->
+			<div class="wp-block-group">
+				<!-- wp:paragraph -->
+				<p>
+					<?php echo esc_html_x( 'Posted', 'Verb to explain the publication status of a post', 'block-theme-with-hooked-blocks' ); ?>
+				</p>
+				<!-- /wp:paragraph -->
+
+				<!-- wp:post-date /-->
+
+				<!-- wp:paragraph -->
+				<p>
+					<?php echo esc_html_x( 'in', 'Preposition to show the relationship between the post and its categories', 'block-theme-with-hooked-blocks' ); ?>
+				</p>
+				<!-- /wp:paragraph -->
+
+				<!-- wp:post-terms {"term":"category"} /-->
+			</div>
+			<!-- /wp:group -->
+
+			<!-- wp:group {"layout":{"type":"flex"}} -->
+			<div class="wp-block-group">
+				<!-- wp:paragraph -->
+				<p>
+					<?php echo esc_html_x( 'by', 'Preposition to show the relationship between the post and its author', 'block-theme-with-hooked-blocks' ); ?>
+				</p>
+				<!-- /wp:paragraph -->
+
+				<!-- wp:post-author {"showAvatar":false} /-->
+			</div>
+			<!-- /wp:group -->
+		</div>
+		<!-- /wp:column -->
+
+		<!-- wp:column -->
+		<div class="wp-block-column">
+			<!-- wp:group {"layout":{"type":"flex","orientation":"vertical"}} -->
+			<div class="wp-block-group">
+				<!-- wp:paragraph -->
+				<p>
+					<?php echo esc_html_x( 'Tags:', 'Label for a list of post tags', 'block-theme-with-hooked-blocks' ); ?>
+				</p>
+				<!-- /wp:paragraph -->
+
+				<!-- wp:post-terms {"term":"post_tag"} /-->
+			</div>
+			<!-- /wp:group -->
+		</div>
+		<!-- /wp:column -->
+	</div>
+	<!-- /wp:columns -->
+</div>
+<!-- /wp:group -->
diff --git a/data/themedir1/block-theme-with-hooked-blocks/style.css b/data/themedir1/block-theme-with-hooked-blocks/style.css
new file mode 100644
index 0000000000..cbfd71f6b6
--- /dev/null
+++ b/data/themedir1/block-theme-with-hooked-blocks/style.css
@@ -0,0 +1,7 @@
+/*
+Theme Name: Block Theme with Hooked Blocks
+Theme URI: https://wordpress.org/
+Description: For testing purposes only.
+Version: 1.0.0
+Text Domain: block-theme-with-hooked-blocks
+*/
diff --git a/data/themedir1/block-theme-with-hooked-blocks/templates/index.html b/data/themedir1/block-theme-with-hooked-blocks/templates/index.html
new file mode 100644
index 0000000000..5ebe02764b
--- /dev/null
+++ b/data/themedir1/block-theme-with-hooked-blocks/templates/index.html
@@ -0,0 +1,23 @@
+<!-- wp:template-part {"slug":"header","tagName":"header"} /-->
+
+<!-- wp:group {"tagName":"main","layout":{"type":"constrained"}} -->
+<main class="wp-block-group">
+	<!-- wp:query {"query":{"pages":0,"offset":0,"postType":"post","order":"desc","orderBy":"date","author":"","search":"","exclude":[],"sticky":"","inherit":true,"taxQuery":null,"parents":[]},"displayLayout":{"type":"flex","columns":3},"align":"wide","layout":{"type":"default"}} -->
+	<div class="wp-block-query alignwide">
+		<!-- wp:post-template {"align":"wide"} -->
+			<!-- wp:post-featured-image {"isLink":true,"width":"100%","height":"clamp(15vw, 30vh, 400px)","align":"wide"} /-->
+			<!-- wp:post-title {"isLink":true,"align":"wide"} /-->
+			<!-- wp:post-excerpt /-->
+			<!-- wp:post-date {"isLink":true} /-->
+		<!-- /wp:post-template -->
+
+		<!-- wp:query-pagination {"paginationArrow":"arrow","align":"wide","layout":{"type":"flex","justifyContent":"space-between"}} -->
+			<!-- wp:query-pagination-previous /-->
+			<!-- wp:query-pagination-next /-->
+		<!-- /wp:query-pagination -->
+	</div>
+	<!-- /wp:query -->
+</main>
+<!-- /wp:group -->
+
+<!-- wp:template-part {"slug":"footer","tagName":"footer"} /-->
diff --git a/data/themedir1/block-theme-with-hooked-blocks/templates/single.html b/data/themedir1/block-theme-with-hooked-blocks/templates/single.html
new file mode 100644
index 0000000000..742c3aba5e
--- /dev/null
+++ b/data/themedir1/block-theme-with-hooked-blocks/templates/single.html
@@ -0,0 +1,18 @@
+<!-- wp:template-part {"slug":"header","tagName":"header"} /-->
+
+<!-- wp:group {"tagName":"main"} -->
+<main class="wp-block-group">
+	<!-- wp:group {"layout":{"type":"constrained"}} -->
+	<div class="wp-block-group">
+		<!-- wp:post-featured-image /-->
+		<!-- wp:post-title /-->
+	</div>
+	<!-- /wp:group -->
+
+	<!-- wp:post-content {"layout":{"type":"constrained"}} /-->
+	<!-- wp:pattern {"slug":"block-theme-with-hooked-blocks/post-meta"} /-->
+	<!-- wp:template-part {"slug":"comments","tagName":"section"} /-->
+</main>
+<!-- /wp:group -->
+
+<!-- wp:template-part {"slug":"footer","tagName":"footer"} /-->
diff --git a/data/themedir1/block-theme-with-hooked-blocks/theme.json b/data/themedir1/block-theme-with-hooked-blocks/theme.json
new file mode 100644
index 0000000000..28f3d7aa84
--- /dev/null
+++ b/data/themedir1/block-theme-with-hooked-blocks/theme.json
@@ -0,0 +1,21 @@
+{
+	"$schema": "https://schemas.wp.org/trunk/theme.json",
+	"version": 2,
+	"templateParts": [
+		{
+			"area": "header",
+			"name": "header",
+			"title": "Header"
+		},
+		{
+			"area": "footer",
+			"name": "footer",
+			"title": "Footer"
+		},
+		{
+			"area": "uncategorized",
+			"name": "comments",
+			"title": "Comments"
+		}
+	]
+}
diff --git a/data/themedir1/block-theme/blocks/example-block/block.json b/data/themedir1/block-theme/blocks/example-block/block.json
index 419a332b58..3eb86f3f77 100644
--- a/data/themedir1/block-theme/blocks/example-block/block.json
+++ b/data/themedir1/block-theme/blocks/example-block/block.json
@@ -1,4 +1,5 @@
 {
+	"$schema": "https://schemas.wp.org/trunk/block.json",
 	"apiVersion": 2,
 	"title": "Example Theme Block",
 	"name": "block-theme/example-block",
diff --git a/data/themedir1/block-theme/styles/variation-a.json b/data/themedir1/block-theme/styles/variation-a.json
new file mode 100644
index 0000000000..42c20fc63b
--- /dev/null
+++ b/data/themedir1/block-theme/styles/variation-a.json
@@ -0,0 +1,18 @@
+{
+	"version": 2,
+	"settings": {
+		"blocks": {
+			"core/paragraph": {
+				"color": {
+					"palette": [
+						{
+							"slug": "light",
+							"name": "Light",
+							"color": "#f2f2f2"
+						}
+					]
+				}
+			}
+		}
+	}
+}
diff --git a/data/themedir1/block-theme/theme.json b/data/themedir1/block-theme/theme.json
index 982ad8ca39..212ef5df78 100644
--- a/data/themedir1/block-theme/theme.json
+++ b/data/themedir1/block-theme/theme.json
@@ -1,5 +1,6 @@
 {
-	"version": 1,
+	"$schema": "https://schemas.wp.org/trunk/theme.json",
+	"version": 2,
 	"title": "Block theme",
 	"settings": {
 		"color": {
@@ -41,11 +42,11 @@
 				}
 			],
 			"customFontSize": false,
-			"customLineHeight": true
+			"lineHeight": true
 		},
 		"spacing": {
-			"units": ["rem"],
-			"customPadding": true,
+			"units": [ "rem" ],
+			"padding": true,
 			"blockGap": true
 		},
 		"blocks": {
@@ -62,8 +63,8 @@
 			}
 		}
 	},
-	"styles" : {
-		"blocks" :{
+	"styles": {
+		"blocks": {
 			"core/post-featured-image": {
 				"shadow": "10px 10px 5px 0px rgba(0,0,0,0.66)",
 				"filter": {
@@ -121,7 +122,7 @@
 		{
 			"name": "custom-single-post-template",
 			"title": "Custom Single Post template",
-			"postTypes": ["post"]
+			"postTypes": [ "post" ]
 		}
 	],
 	"templateParts": [
diff --git a/data/themedir1/block_theme-[0.4.0]/theme.json b/data/themedir1/block_theme-[0.4.0]/theme.json
index 38fcb1d9dd..1be2ba0116 100644
--- a/data/themedir1/block_theme-[0.4.0]/theme.json
+++ b/data/themedir1/block_theme-[0.4.0]/theme.json
@@ -1,4 +1,5 @@
 {
+	"$schema": "https://schemas.wp.org/trunk/theme.json",
 	"version": 1,
 	"settings": {
 		"color": {
diff --git a/data/themedir1/empty-fontface-theme/theme.json b/data/themedir1/empty-fontface-theme/theme.json
index a9f1cb5080..92b1663112 100644
--- a/data/themedir1/empty-fontface-theme/theme.json
+++ b/data/themedir1/empty-fontface-theme/theme.json
@@ -1,4 +1,5 @@
 {
+	"$schema": "https://schemas.wp.org/trunk/theme.json",
   "version": 2,
   "customTemplates": [
 	{
diff --git a/data/themedir1/fonts-block-theme/styles/variation-new-font-family.json b/data/themedir1/fonts-block-theme/styles/variation-new-font-family.json
index 01c6027835..0af954cbec 100644
--- a/data/themedir1/fonts-block-theme/styles/variation-new-font-family.json
+++ b/data/themedir1/fonts-block-theme/styles/variation-new-font-family.json
@@ -15,7 +15,7 @@
 							"fontStyle": "normal",
 							"fontWeight": "400",
 							"src": [
-								"file:./assets/fonts/open-sans/OpenSans-VariableFont_wdth,wght.tff"
+								"file:./assets/fonts/open-sans/OpenSans-VariableFont_wdth,wght.ttf"
 							]
 						},
 						{
@@ -24,7 +24,7 @@
 							"fontStyle": "italic",
 							"fontWeight": "400",
 							"src": [
-								"file:./assets/fonts/open-sans/OpenSans-Italic-VariableFont_wdth,wght.tff"
+								"file:./assets/fonts/open-sans/OpenSans-Italic-VariableFont_wdth,wght.ttf"
 							]
 						}
 					]
diff --git a/data/themedir1/fonts-block-theme/theme.json b/data/themedir1/fonts-block-theme/theme.json
index a8212b79e1..a5d40da2b5 100644
--- a/data/themedir1/fonts-block-theme/theme.json
+++ b/data/themedir1/fonts-block-theme/theme.json
@@ -1,4 +1,5 @@
 {
+	"$schema": "https://schemas.wp.org/trunk/theme.json",
 	"version": 2,
 	"settings": {
 		"appearanceTools": true,
diff --git a/data/themedir1/subdir/block_theme-[1.0.0]/theme.json b/data/themedir1/subdir/block_theme-[1.0.0]/theme.json
index 38fcb1d9dd..1be2ba0116 100644
--- a/data/themedir1/subdir/block_theme-[1.0.0]/theme.json
+++ b/data/themedir1/subdir/block_theme-[1.0.0]/theme.json
@@ -1,4 +1,5 @@
 {
+	"$schema": "https://schemas.wp.org/trunk/theme.json",
 	"version": 1,
 	"settings": {
 		"color": {
diff --git a/data/themedir2/test-parent/functions.php b/data/themedir2/test-parent/functions.php
new file mode 100644
index 0000000000..f538fe4230
--- /dev/null
+++ b/data/themedir2/test-parent/functions.php
@@ -0,0 +1,7 @@
+<?php
+
+// Dummy theme.
+
+echo __DIR__ . '/' . basename(__FILE__);
+
+?>
diff --git a/data/themedir2/test-parent/index.php b/data/themedir2/test-parent/index.php
new file mode 100644
index 0000000000..f538fe4230
--- /dev/null
+++ b/data/themedir2/test-parent/index.php
@@ -0,0 +1,7 @@
+<?php
+
+// Dummy theme.
+
+echo __DIR__ . '/' . basename(__FILE__);
+
+?>
diff --git a/data/themedir2/test-parent/style.css b/data/themedir2/test-parent/style.css
new file mode 100644
index 0000000000..aaa61dfea4
--- /dev/null
+++ b/data/themedir2/test-parent/style.css
@@ -0,0 +1,12 @@
+/*
+Theme Name: Test Parent Theme
+Theme URI: http://example.org/
+Description: An example parent theme
+Version: 1.3
+Author: Minnie Bannister
+Author URI: http://example.com/
+Template: test-parent
+*/
+
+
+
diff --git a/data/themedir2/test/functions.php b/data/themedir2/test/functions.php
new file mode 100644
index 0000000000..f538fe4230
--- /dev/null
+++ b/data/themedir2/test/functions.php
@@ -0,0 +1,7 @@
+<?php
+
+// Dummy theme.
+
+echo __DIR__ . '/' . basename(__FILE__);
+
+?>
diff --git a/data/themedir2/test/index.php b/data/themedir2/test/index.php
new file mode 100644
index 0000000000..f538fe4230
--- /dev/null
+++ b/data/themedir2/test/index.php
@@ -0,0 +1,7 @@
+<?php
+
+// Dummy theme.
+
+echo __DIR__ . '/' . basename(__FILE__);
+
+?>
diff --git a/data/themedir2/test/style.css b/data/themedir2/test/style.css
new file mode 100644
index 0000000000..b3d9e77cd2
--- /dev/null
+++ b/data/themedir2/test/style.css
@@ -0,0 +1,12 @@
+/*
+Theme Name: Test Theme
+Theme URI: http://example.org/
+Description: An example theme
+Version: 1.3
+Author: Minnie Bannister
+Author URI: http://example.com/
+Template: test-parent
+*/
+
+
+
diff --git a/includes/abstract-testcase.php b/includes/abstract-testcase.php
index 3f5519ae41..5860ddc436 100644
--- a/includes/abstract-testcase.php
+++ b/includes/abstract-testcase.php
@@ -72,7 +72,7 @@ abstract class WP_UnitTestCase_Base extends PHPUnit_Adapter_TestCase {
 		$class = get_called_class();
 
 		if ( method_exists( $class, 'wpSetUpBeforeClass' ) ) {
-			call_user_func( array( $class, 'wpSetUpBeforeClass' ), self::factory() );
+			call_user_func( array( $class, 'wpSetUpBeforeClass' ), static::factory() );
 		}
 
 		self::commit_transaction();
@@ -102,7 +102,7 @@ abstract class WP_UnitTestCase_Base extends PHPUnit_Adapter_TestCase {
 	public function set_up() {
 		set_time_limit( 0 );
 
-		$this->factory = self::factory();
+		$this->factory = static::factory();
 
 		if ( ! self::$ignore_files ) {
 			self::$ignore_files = $this->scan_user_uploads();
@@ -190,6 +190,10 @@ abstract class WP_UnitTestCase_Base extends PHPUnit_Adapter_TestCase {
 		 */
 		$GLOBALS['wp_sitemaps'] = null;
 
+		// Reset template globals.
+		$GLOBALS['wp_stylesheet_path'] = null;
+		$GLOBALS['wp_template_path']   = null;
+
 		$this->unregister_all_meta_keys();
 		remove_theme_support( 'html5' );
 		remove_filter( 'query', array( $this, '_create_temporary_tables' ) );
@@ -412,6 +416,7 @@ abstract class WP_UnitTestCase_Base extends PHPUnit_Adapter_TestCase {
 				'site-options',
 				'site-queries',
 				'site-transient',
+				'theme_files',
 				'rss',
 				'users',
 				'user-queries',
diff --git a/includes/class-wp-test-stream.php b/includes/class-wp-test-stream.php
index 11997507d0..17d930b586 100644
--- a/includes/class-wp-test-stream.php
+++ b/includes/class-wp-test-stream.php
@@ -198,16 +198,27 @@ class WP_Test_Stream {
 	 * Creates a directory.
 	 *
 	 * @see streamWrapper::mkdir
+	 *
+	 * @param string $path    Directory which should be created.
+	 * @param int    $mode    The value passed to mkdir().
+	 * @param int    $options A bitwise mask of values, such as STREAM_MKDIR_RECURSIVE.
+	 * @return bool True on success, false on failure.
 	 */
 	public function mkdir( $path, $mode, $options ) {
 		$this->open( $path );
+
 		$plainfile = rtrim( $this->file, '/' );
 
-		if ( isset( WP_Test_Stream::$data[ $this->bucket ][ $file ] ) ) {
+		// Check if a file or directory with the same name already exists.
+		if ( isset( WP_Test_Stream::$data[ $this->bucket ][ $plainfile ] )
+			|| isset( WP_Test_Stream::$data[ $this->bucket ][ $plainfile . '/' ] )
+		) {
 			return false;
 		}
+
 		$dir_ref = & $this->get_directory_ref();
 		$dir_ref = 'DIRECTORY';
+
 		return true;
 	}
 
diff --git a/includes/factory/class-wp-unittest-factory-for-blog.php b/includes/factory/class-wp-unittest-factory-for-blog.php
index 39b59f7169..c9ce9f335c 100644
--- a/includes/factory/class-wp-unittest-factory-for-blog.php
+++ b/includes/factory/class-wp-unittest-factory-for-blog.php
@@ -73,8 +73,6 @@ class WP_UnitTest_Factory_For_Blog extends WP_UnitTest_Factory_For_Thing {
 	 *
 	 * @param int   $blog_id ID of the site to update.
 	 * @param array $fields  The fields to update.
-	 *
-	 * @return void
 	 */
 	public function update_object( $blog_id, $fields ) {}
 
diff --git a/includes/factory/class-wp-unittest-factory-for-network.php b/includes/factory/class-wp-unittest-factory-for-network.php
index a578bddb6a..686ebe89bb 100644
--- a/includes/factory/class-wp-unittest-factory-for-network.php
+++ b/includes/factory/class-wp-unittest-factory-for-network.php
@@ -65,8 +65,6 @@ class WP_UnitTest_Factory_For_Network extends WP_UnitTest_Factory_For_Thing {
 	 *
 	 * @param int   $network_id ID of the network to update.
 	 * @param array $fields  The fields to update.
-	 *
-	 * @return void
 	 */
 	public function update_object( $network_id, $fields ) {}
 
diff --git a/includes/functions.php b/includes/functions.php
index 81d4339db1..c2976dba9f 100644
--- a/includes/functions.php
+++ b/includes/functions.php
@@ -339,10 +339,26 @@ tests_add_filter( 'send_auth_cookies', '__return_false' );
  * @since 5.0.0
  */
 function _unhook_block_registration() {
+	// Block types.
 	require __DIR__ . '/unregister-blocks-hooks.php';
 	remove_action( 'init', 'register_core_block_types_from_metadata' );
 	remove_action( 'init', 'register_block_core_legacy_widget' );
 	remove_action( 'init', 'register_block_core_widget_group' );
 	remove_action( 'init', 'register_core_block_types_from_metadata' );
+
+	// Block binding sources.
+	remove_action( 'init', '_register_block_bindings_pattern_overrides_source' );
+	remove_action( 'init', '_register_block_bindings_post_meta_source' );
 }
 tests_add_filter( 'init', '_unhook_block_registration', 1000 );
+
+/**
+ * After the init action has been run once, trying to re-register font collections can cause
+ * errors. To avoid this, unhook the font registration functions.
+ *
+ * @since 6.5.0
+ */
+function _unhook_font_registration() {
+	remove_action( 'init', '_wp_register_default_font_collections' );
+}
+tests_add_filter( 'init', '_unhook_font_registration', 1000 );
diff --git a/includes/object-cache.php b/includes/object-cache.php
index e1404188f3..ef03546892 100644
--- a/includes/object-cache.php
+++ b/includes/object-cache.php
@@ -820,7 +820,6 @@ function wp_cache_set_option( $option, $value ) {
  * Switches blog prefix, which changes the cache that is accessed.
  *
  * @param int $blog_id Blog to switch to.
- * @return void
  */
 function wp_cache_switch_to_blog( $blog_id ) {
 	global $wp_object_cache;
@@ -832,7 +831,6 @@ function wp_cache_switch_to_blog( $blog_id ) {
  * Sets up Object Cache Global and assigns it.
  *
  * @global WP_Object_Cache $wp_object_cache WordPress Object Cache
- * @return void
  */
 function wp_cache_init() {
 	global $wp_object_cache;
@@ -843,7 +841,6 @@ function wp_cache_init() {
  * Adds a group or set of groups to the list of non-persistent groups.
  *
  * @param string|array $groups A group or an array of groups to add.
- * @return void
  */
 function wp_cache_add_global_groups( $groups ) {
 	global $wp_object_cache;
@@ -854,7 +851,6 @@ function wp_cache_add_global_groups( $groups ) {
  * Adds a group or set of groups to the list of non-Memcached groups.
  *
  * @param string|array $groups A group or an array of groups to add.
- * @return void
  */
 function wp_cache_add_non_persistent_groups( $groups ) {
 	global $wp_object_cache;
@@ -2329,7 +2325,6 @@ class WP_Object_Cache {
 	 * @link http://wordpress.org/extend/plugins/memcached/
 	 *
 	 * @param array $groups Array of groups.
-	 * @return void
 	 */
 	public function add_global_groups( $groups ) {
 		if ( ! is_array( $groups ) ) {
@@ -2349,7 +2344,6 @@ class WP_Object_Cache {
 	 * @link http://wordpress.org/extend/plugins/memcached/
 	 *
 	 * @param array $groups Array of groups.
-	 * @return void
 	 */
 	public function add_non_persistent_groups( $groups ) {
 		if ( ! is_array( $groups ) ) {
@@ -2381,7 +2375,6 @@ class WP_Object_Cache {
 	 * Switches blog prefix, which changes the cache that is accessed.
 	 *
 	 * @param int $blog_id Blog to switch to.
-	 * @return void
 	 */
 	public function switch_to_blog( $blog_id ) {
 		global $table_prefix;
diff --git a/includes/spy-rest-server.php b/includes/spy-rest-server.php
index 49cda8748a..4266a3de56 100644
--- a/includes/spy-rest-server.php
+++ b/includes/spy-rest-server.php
@@ -25,6 +25,10 @@ class Spy_REST_Server extends WP_REST_Server {
 	 * @return mixed
 	 */
 	public function __call( $method, $args ) {
+		if ( ! method_exists( $this, $method ) ) {
+			throw new Error( sprintf( 'Call to undefined method %s::%s()', get_class( $this ), $method ) );
+		}
+
 		return call_user_func_array( array( $this, $method ), $args );
 	}
 
diff --git a/includes/testcase-rest-post-type-controller.php b/includes/testcase-rest-post-type-controller.php
index cd8ccaefc7..9b1d366315 100644
--- a/includes/testcase-rest-post-type-controller.php
+++ b/includes/testcase-rest-post-type-controller.php
@@ -77,7 +77,16 @@ abstract class WP_Test_REST_Post_Type_Controller_Testcase extends WP_Test_REST_C
 			$this->assertSame( get_page_template_slug( $post->ID ), $data['template'] );
 		}
 
-		if ( post_type_supports( $post->post_type, 'thumbnail' ) ) {
+		if (
+			post_type_supports( $post->post_type, 'thumbnail' ) ||
+			(
+				'attachment' === $post->post_type &&
+				(
+					post_type_supports( 'attachment:audio', 'thumbnail' ) ||
+					post_type_supports( 'attachment:video', 'thumbnail' )
+				)
+			)
+		) {
 			$this->assertSame( (int) get_post_thumbnail_id( $post->ID ), $data['featured_media'] );
 		} else {
 			$this->assertArrayNotHasKey( 'featured_media', $data );
diff --git a/includes/unregister-blocks-hooks.php b/includes/unregister-blocks-hooks.php
index 2255c266db..164c9c98db 100644
--- a/includes/unregister-blocks-hooks.php
+++ b/includes/unregister-blocks-hooks.php
@@ -63,3 +63,4 @@ remove_action( 'init', 'register_block_core_site_title' );
 remove_action( 'init', 'register_block_core_social_link' );
 remove_action( 'init', 'register_block_core_tag_cloud' );
 remove_action( 'init', 'register_block_core_template_part' );
+remove_action( 'init', 'register_block_core_term_description' );
diff --git a/includes/utils.php b/includes/utils.php
index 272e9a75b0..ead788f996 100644
--- a/includes/utils.php
+++ b/includes/utils.php
@@ -6,17 +6,17 @@
  * Returns a string of the required length containing random characters. Note that
  * the maximum possible string length is 32.
  *
- * @param int $len Optional. The required length. Default 32.
+ * @param int $length Optional. The required length. Default 32.
  * @return string The string.
  */
-function rand_str( $len = 32 ) {
-	return substr( md5( uniqid( rand() ) ), 0, $len );
+function rand_str( $length = 32 ) {
+	return substr( md5( uniqid( rand() ) ), 0, $length );
 }
 
 /**
  * Returns a string of the required length containing random characters.
  *
- * @param int $len The required length.
+ * @param int $length The required length.
  * @return string The string.
  */
 function rand_long_str( $length ) {
@@ -49,7 +49,7 @@ function strip_ws( $txt ) {
 	return trim( implode( "\n", $result ) );
 }
 
-/*
+/**
  * Helper class for testing code that involves actions and filters.
  *
  * Typical use:
diff --git a/includes/wp-profiler.php b/includes/wp-profiler.php
index 5c4ea902d0..fefdca63c6 100644
--- a/includes/wp-profiler.php
+++ b/includes/wp-profiler.php
@@ -1,6 +1,6 @@
 <?php
 
-/*
+/**
  * A simple manually-instrumented profiler for WordPress.
  *
  * This records basic execution time, and a summary of the actions and SQL queries run within each block.
@@ -15,7 +15,6 @@
  *
  * Multiple profile blocks are permitted, and they may be nested.
  */
-
 class WPProfiler {
 	public $stack;
 	public $profile;
diff --git a/tests/actions.php b/tests/actions.php
index 8b57382b9c..e25183f759 100644
--- a/tests/actions.php
+++ b/tests/actions.php
@@ -229,35 +229,133 @@ class Tests_Actions extends WP_UnitTestCase {
 		$this->assertSame( array( $val ), array_pop( $argsvar ) );
 	}
 
-	public function test_action_priority() {
-		$a         = new MockAction();
+	/**
+	 * @ticket 60193
+	 *
+	 * @dataProvider data_priority_callback_order_with_integers
+	 * @dataProvider data_priority_callback_order_with_unhappy_path_nonintegers
+	 *
+	 * @covers ::do_action
+	 *
+	 * @param array $priorities {
+	 *     Indexed array of the priorities for the MockAction callbacks.
+	 *
+	 *     @type mixed $0 Priority for 'action' callback.
+	 *     @type mixed $1 Priority for 'action2' callback.
+	 * }
+	 * @param array  $expected_call_order  An array of callback names in expected call order.
+	 * @param string $expected_deprecation Optional. Deprecation message. Default ''.
+	 */
+	public function test_priority_callback_order( $priorities, $expected_call_order, $expected_deprecation = '' ) {
+		$mock      = new MockAction();
 		$hook_name = __FUNCTION__;
 
-		add_action( $hook_name, array( &$a, 'action' ), 10 );
-		add_action( $hook_name, array( &$a, 'action2' ), 9 );
+		if ( $expected_deprecation && PHP_VERSION_ID >= 80100 ) {
+			$this->expectDeprecation();
+			$this->expectDeprecationMessage( $expected_deprecation );
+		}
+
+		add_action( $hook_name, array( $mock, 'action' ), $priorities[0] );
+		add_action( $hook_name, array( $mock, 'action2' ), $priorities[1] );
 		do_action( $hook_name );
 
-		// Two events, one per action.
-		$this->assertSame( 2, $a->get_call_count() );
+		$this->assertSame( 2, $mock->get_call_count(), 'The number of call counts does not match' );
+
+		$actual_call_order = wp_list_pluck( $mock->get_events(), 'action' );
+		$this->assertSame( $expected_call_order, $actual_call_order, 'The action callback order does not match the expected order' );
+	}
 
-		$expected = array(
-			// 'action2' is called first because it has priority 9.
-			array(
-				'action'    => 'action2',
-				'hook_name' => $hook_name,
-				'tag'       => $hook_name, // Back compat.
-				'args'      => array( '' ),
+	/**
+	 * Happy path data provider.
+	 *
+	 * @return array[]
+	 */
+	public function data_priority_callback_order_with_integers() {
+		return array(
+			'int DESC' => array(
+				'priorities'          => array( 10, 9 ),
+				'expected_call_order' => array( 'action2', 'action' ),
 			),
-			// 'action' is called second.
-			array(
-				'action'    => 'action',
-				'hook_name' => $hook_name,
-				'tag'       => $hook_name, // Back compat.
-				'args'      => array( '' ),
+			'int ASC'  => array(
+				'priorities'          => array( 9, 10 ),
+				'expected_call_order' => array( 'action', 'action2' ),
 			),
 		);
+	}
+
+	/**
+	 * Unhappy path data provider.
+	 *
+	 * @return array[]
+	 */
+	public function data_priority_callback_order_with_unhappy_path_nonintegers() {
+		return array(
+			// Numbers as strings and floats.
+			'int as string DESC'               => array(
+				'priorities'          => array( '10', '9' ),
+				'expected_call_order' => array( 'action2', 'action' ),
+			),
+			'int as string ASC'                => array(
+				'priorities'          => array( '9', '10' ),
+				'expected_call_order' => array( 'action', 'action2' ),
+			),
+			'float DESC'                       => array(
+				'priorities'           => array( 10.0, 9.5 ),
+				'expected_call_order'  => array( 'action2', 'action' ),
+				'expected_deprecation' => 'Implicit conversion from float 9.5 to int loses precision',
+			),
+			'float ASC'                        => array(
+				'priorities'           => array( 9.5, 10.0 ),
+				'expected_call_order'  => array( 'action', 'action2' ),
+				'expected_deprecation' => 'Implicit conversion from float 9.5 to int loses precision',
+			),
+			'float as string DESC'             => array(
+				'priorities'          => array( '10.0', '9.5' ),
+				'expected_call_order' => array( 'action2', 'action' ),
+			),
+			'float as string ASC'              => array(
+				'priorities'          => array( '9.5', '10.0' ),
+				'expected_call_order' => array( 'action', 'action2' ),
+			),
 
-		$this->assertSame( $expected, $a->get_events() );
+			// Non-numeric.
+			'null'                             => array(
+				'priorities'          => array( null, null ),
+				'expected_call_order' => array( 'action', 'action2' ),
+			),
+			'bool DESC'                        => array(
+				'priorities'          => array( true, false ),
+				'expected_call_order' => array( 'action2', 'action' ),
+			),
+			'bool ASC'                         => array(
+				'priorities'          => array( false, true ),
+				'expected_call_order' => array( 'action', 'action2' ),
+			),
+			'non-numerical string DESC'        => array(
+				'priorities'          => array( 'test1', 'test2' ),
+				'expected_call_order' => array( 'action', 'action2' ),
+			),
+			'non-numerical string ASC'         => array(
+				'priorities'          => array( 'test1', 'test2' ),
+				'expected_call_order' => array( 'action', 'action2' ),
+			),
+			'int, non-numerical string DESC'   => array(
+				'priorities'          => array( 10, 'test' ),
+				'expected_call_order' => array( 'action2', 'action' ),
+			),
+			'int, non-numerical string ASC'    => array(
+				'priorities'          => array( 'test', 10 ),
+				'expected_call_order' => array( 'action', 'action2' ),
+			),
+			'float, non-numerical string DESC' => array(
+				'priorities'          => array( 10.0, 'test' ),
+				'expected_call_order' => array( 'action2', 'action' ),
+			),
+			'float, non-numerical string ASC'  => array(
+				'priorities'          => array( 'test', 10.0 ),
+				'expected_call_order' => array( 'action', 'action2' ),
+			),
+		);
 	}
 
 	/**
diff --git a/tests/admin/exportWp.php b/tests/admin/exportWp.php
new file mode 100644
index 0000000000..ebb60018c0
--- /dev/null
+++ b/tests/admin/exportWp.php
@@ -0,0 +1,293 @@
+<?php
+
+/**
+ * @group admin
+ * @group export
+ *
+ * @covers ::export_wp
+ *
+ * Tests run in a separate process to prevent "headers already sent" error.
+ * @runTestsInSeparateProcesses
+ * @preserveGlobalState disabled
+ */
+class Tests_Admin_ExportWp extends WP_UnitTestCase {
+	/**
+	 * Post IDs for posts, pages, and attachments.
+	 *
+	 * The structure is shown for understanding how to
+	 * lookup / reference the information within it.
+	 *
+	 * IDs will be created in this order.
+	 *
+	 * @var array {
+	 *      @type array $data {
+	 *          Data for each post, page, or attachment.
+	 *
+	 *          @type int $post_id        The ID for the post, page, or attachment.
+	 *          @type int $post_author    The author's ID.
+	 *          @type int $xml_item_index The XML item index for this post, page, or attachment.
+	 *                                    This number is based upon all of the posts, pages, and attachments
+	 *                                    in the self::$post_ids static property.
+	 *      }
+	 * }
+	 */
+	private static $post_ids = array(
+		'post 1'                => array(),
+		'attachment for post 1' => array(),
+		'post 2'                => array(),
+		'attachment for post 2' => array(),
+		'page 1'                => array(),
+		'attachment for page 1' => array(),
+		'page 2'                => array(),
+		'attachment for page 2' => array(),
+	);
+
+	public static function wpSetUpBeforeClass( WP_UnitTest_Factory $factory ) {
+		require_once ABSPATH . 'wp-admin/includes/export.php';
+		$file = DIR_TESTDATA . '/images/test-image.jpg';
+
+		$dataset = array(
+			'post 1' => array(
+				'post_title' => 'Test Post 1',
+				'post_type'  => 'post',
+			),
+			'post 2' => array(
+				'post_title' => 'Test Post 2',
+				'post_type'  => 'post',
+			),
+			'page 1' => array(
+				'post_title' => 'Test Page 1',
+				'post_type'  => 'page',
+			),
+			'page 2' => array(
+				'post_title' => 'Test Page 2',
+				'post_type'  => 'page',
+			),
+		);
+
+		$xml_item_index = -1;
+
+		foreach ( $dataset as $post_key => $post_data ) {
+			$attachment_key           = "attachment for $post_key";
+			$post_data['post_author'] = $factory->user->create( array( 'role' => 'editor' ) );
+
+			$post_id       = $factory->post->create( $post_data );
+			$attachment_id = $factory->attachment->create_upload_object( $file, $post_id );
+			set_post_thumbnail( $post_id, $attachment_id );
+
+			self::$post_ids[ $post_key ]       = array(
+				'post_id'        => $post_id,
+				'post_author'    => $post_data['post_author'],
+				'xml_item_index' => ++$xml_item_index,
+			);
+			self::$post_ids[ $attachment_key ] = array(
+				'post_id'        => $attachment_id,
+				'post_author'    => $post_data['post_author'],
+				'xml_item_index' => ++$xml_item_index,
+			);
+		}
+	}
+
+	/**
+	 * @dataProvider data_should_include_attachments
+	 *
+	 * @ticket 17379
+	 *
+	 * @param array $args            Arguments to pass to export_wp().
+	 * @param array $expected {
+	 *     The expected data.
+	 *
+	 *     @type array $items {
+	 *         The expected XML items count assertion arguments.
+	 *
+	 *         @type int    $number_of_items The expected number of XML items.
+	 *         @type string $message         The assertion failure message.
+	 *     }
+	 *     @type array $ids A list of self::$post_ids keys.
+	 */
+	public function test_should_include_attachments( array $args, array $expected ) {
+		$this->populate_args_post_authors( $args, $expected['ids'] );
+
+		$xml = $this->get_the_export( $args );
+
+		$expected_number_of_items = $expected['items']['number_of_items'];
+		$this->assertCount( $expected_number_of_items, $xml->channel->item, $expected['items']['message'] );
+
+		// Test each XML item's post ID to valid the post, page, and attachment (when appropriate) were exported.
+		foreach ( $expected['ids'] as $post_ids_key ) {
+			$xml_item = $this->get_xml_item( $xml, $post_ids_key, $expected_number_of_items );
+
+			$this->assertSame(
+				$this->get_expected_id( $post_ids_key ),
+				(int) $xml_item->post_id,
+				"In the XML, the {$post_ids_key}'s ID should match the expected content"
+			);
+		}
+	}
+
+	/**
+	 * Data provider.
+	 *
+	 * @return array
+	 */
+	public function data_should_include_attachments() {
+		return array(
+			'for all content'           => array(
+				'args'     => array(
+					'content' => 'all',
+				),
+				'expected' => array(
+					'items' => array(
+						'number_of_items' => 8,
+						'message'         => 'The number of items should be 8 = 2 pages, 2 posts and 4 attachments',
+					),
+					'ids'   => array(
+						'post 1',
+						'post 2',
+						'page 1',
+						'page 2',
+						'attachment for page 1',
+						'attachment for post 2',
+						'attachment for page 1',
+						'attachment for page 2',
+					),
+				),
+			),
+			'for all posts'             => array(
+				'args'     => array(
+					'content' => 'post',
+				),
+				'expected' => array(
+					'items' => array(
+						'number_of_items' => 4,
+						'message'         => 'The number of items should be 4 = 2 posts and 2 attachments',
+					),
+					'ids'   => array(
+						'post 1',
+						'post 2',
+						'attachment for post 1',
+						'attachment for post 2',
+					),
+				),
+			),
+			'for all pages'             => array(
+				'args'     => array(
+					'content' => 'page',
+				),
+				'expected' => array(
+					'items' => array(
+						'number_of_items' => 4,
+						'message'         => 'The number of items should be 4 = 2 pages and 2 attachments',
+					),
+					'ids'   => array(
+						'page 1',
+						'attachment for page 1',
+						'page 2',
+						'attachment for page 2',
+					),
+				),
+			),
+			'for specific author posts' => array(
+				'args'     => array(
+					'content' => 'post',
+					'author'  => '', // The test will populate the author's ID.
+				),
+				'expected' => array(
+					'items' => array(
+						'number_of_items' => 2,
+						'message'         => 'The number of items should be 2 = 1 post and 1 attachment',
+					),
+					'ids'   => array(
+						'post 1',
+						'attachment for post 1',
+					),
+				),
+			),
+			'for specific author pages' => array(
+				'args'     => array(
+					'content' => 'page',
+					'author'  => '', // The test will populate the author's ID.
+				),
+				'expected' => array(
+					'items' => array(
+						'number_of_items' => 2,
+						'message'         => 'The number of items should be 2 = 1 page and 1 attachment',
+					),
+					'ids'   => array(
+						'page 2',
+						'attachment for page 2',
+					),
+				),
+			),
+		);
+	}
+
+	/**
+	 * Gets the export results.
+	 *
+	 * @since 6.5.0
+	 *
+	 * @param array $args Arguments to pass to export_wp().
+	 * @return SimpleXMLElement|false Returns the XML object on success, otherwise false is returned.
+	 */
+	private function get_the_export( $args ) {
+		ob_start();
+		export_wp( $args );
+		$results = ob_get_clean();
+
+		return simplexml_load_string( $results );
+	}
+
+	/**
+	 * Gets the expected ID.
+	 *
+	 * @since 6.5.0
+	 *
+	 * @param string $post_ids_key The key to lookup in the $post_ids static property.
+	 * @return int Expected ID.
+	 */
+	private function get_expected_id( $post_ids_key ) {
+		$post_info = self::$post_ids[ $post_ids_key ];
+
+		return $post_info['post_id'];
+	}
+
+	/**
+	 * Gets the XML item for the given post or attachment in the self::$post_ids.
+	 *
+	 * @since 6.5.0
+	 *
+	 * @param SimpleXMLElement $xml             XML object.
+	 * @param string           $post_ids_key    The key to lookup in the $post_ids static property.
+	 * @param int              $number_of_items The number of expected XML items.
+	 * @return SimpleXMLElement The XML item.
+	 */
+	private function get_xml_item( $xml, $post_ids_key, $number_of_items ) {
+		$post_info = self::$post_ids[ $post_ids_key ];
+
+		if ( $post_info['xml_item_index'] < $number_of_items ) {
+			$xml_item_index = $post_info['xml_item_index'];
+		} elseif ( 2 === $number_of_items ) {
+			$xml_item_index = 0 === $post_info['xml_item_index'] % 2 ? 0 : 1;
+		} else {
+			$xml_item_index = $post_info['xml_item_index'] - $number_of_items;
+		}
+
+		return $xml->channel->item[ $xml_item_index ]->children( 'wp', true );
+	}
+
+	/**
+	 * Populates the post author in the given args.
+	 *
+	 * @since 6.5.0
+	 *
+	 * @param array $args Passed by reference. export_wp() arguments to process.
+	 */
+	private function populate_args_post_authors( array &$args, $expected_ids ) {
+		if ( ! isset( $args['author'] ) ) {
+			return;
+		}
+		$post_ids_key   = $expected_ids[0];
+		$args['author'] = self::$post_ids[ $post_ids_key ]['post_author'];
+	}
+}
diff --git a/tests/admin/includesComment.php b/tests/admin/includesComment.php
index 1e0aba2108..ace0988570 100644
--- a/tests/admin/includesComment.php
+++ b/tests/admin/includesComment.php
@@ -52,7 +52,7 @@ class Tests_Admin_IncludesComment extends WP_UnitTestCase {
 	 */
 	public function test_must_match_date_and_author() {
 		$this->assertNull( comment_exists( 1, '2004-01-02 12:00:00' ) );
-		$this->assertEquals( self::$post_id, comment_exists( 1, '2014-05-06 12:00:00' ) );
+		$this->assertSame( (string) self::$post_id, comment_exists( 1, '2014-05-06 12:00:00' ) );
 	}
 
 	/**
@@ -61,7 +61,7 @@ class Tests_Admin_IncludesComment extends WP_UnitTestCase {
 	 * @covers ::comment_exists
 	 */
 	public function test_default_value_of_timezone_should_be_blog() {
-		$this->assertEquals( self::$post_id, comment_exists( 1, '2014-05-06 12:00:00' ) );
+		$this->assertSame( (string) self::$post_id, comment_exists( 1, '2014-05-06 12:00:00' ) );
 	}
 
 	/**
@@ -70,7 +70,7 @@ class Tests_Admin_IncludesComment extends WP_UnitTestCase {
 	 * @covers ::comment_exists
 	 */
 	public function test_should_respect_timezone_blog() {
-		$this->assertEquals( self::$post_id, comment_exists( 1, '2014-05-06 12:00:00', 'blog' ) );
+		$this->assertSame( (string) self::$post_id, comment_exists( 1, '2014-05-06 12:00:00', 'blog' ) );
 	}
 
 	/**
@@ -79,7 +79,7 @@ class Tests_Admin_IncludesComment extends WP_UnitTestCase {
 	 * @covers ::comment_exists
 	 */
 	public function test_should_respect_timezone_gmt() {
-		$this->assertEquals( self::$post_id, comment_exists( 1, '2014-05-06 07:00:00', 'gmt' ) );
+		$this->assertSame( (string) self::$post_id, comment_exists( 1, '2014-05-06 07:00:00', 'gmt' ) );
 	}
 
 	/**
@@ -88,6 +88,6 @@ class Tests_Admin_IncludesComment extends WP_UnitTestCase {
 	 * @covers ::comment_exists
 	 */
 	public function test_invalid_timezone_should_fall_back_on_blog() {
-		$this->assertEquals( self::$post_id, comment_exists( 1, '2014-05-06 12:00:00', 'not_a_valid_value' ) );
+		$this->assertSame( (string) self::$post_id, comment_exists( 1, '2014-05-06 12:00:00', 'not_a_valid_value' ) );
 	}
 }
diff --git a/tests/admin/includesMisc.php b/tests/admin/includesMisc.php
index ce0ef7c6c5..2903ea1ca6 100644
--- a/tests/admin/includesMisc.php
+++ b/tests/admin/includesMisc.php
@@ -27,4 +27,30 @@ class Tests_Admin_IncludesMisc extends WP_UnitTestCase {
 			$this->assertSame( $v, url_shorten( $k ) );
 		}
 	}
+
+	/**
+	 * @ticket 59520
+	 */
+	public function test_new_admin_email_subject_filter() {
+		// Default value.
+		$mailer = tests_retrieve_phpmailer_instance();
+		update_option_new_admin_email( 'old@example.com', 'new@example.com' );
+		$this->assertSame( '[Test Blog] New Admin Email Address', $mailer->get_sent()->subject );
+
+		// Filtered value.
+		add_filter(
+			'new_admin_email_subject',
+			function () {
+				return 'Filtered Admin Email Address';
+			},
+			10,
+			1
+		);
+
+		$mailer->mock_sent = array();
+
+		$mailer = tests_retrieve_phpmailer_instance();
+		update_option_new_admin_email( 'old@example.com', 'new@example.com' );
+		$this->assertSame( 'Filtered Admin Email Address', $mailer->get_sent()->subject );
+	}
 }
diff --git a/tests/admin/includesPost.php b/tests/admin/includesPost.php
index f4eaa0f513..0796b1012c 100644
--- a/tests/admin/includesPost.php
+++ b/tests/admin/includesPost.php
@@ -384,6 +384,131 @@ class Tests_Admin_IncludesPost extends WP_UnitTestCase {
 		}
 	}
 
+	/**
+	 * @ticket 11302
+	 */
+	public function test_bulk_edit_if_categories_unchanged() {
+		wp_set_current_user( self::$admin_id );
+
+		$post_ids = self::factory()->post->create_many( 3 );
+
+		wp_set_post_categories( $post_ids[0], array( 'test1', 'test2' ) );
+		wp_set_post_categories( $post_ids[1], array( 'test2', 'test3' ) );
+		wp_set_post_categories( $post_ids[2], array( 'test1', 'test3' ) );
+
+		$terms1 = wp_get_post_categories( $post_ids[0] );
+		$terms2 = wp_get_post_categories( $post_ids[1] );
+		$terms3 = wp_get_post_categories( $post_ids[2] );
+
+		$indeterminate_categories = array_merge( $terms1, $terms2, $terms3 );
+
+		$request = array(
+			'_status'                     => -1,
+			'post'                        => $post_ids,
+			'indeterminate_post_category' => $indeterminate_categories,
+		);
+
+		bulk_edit_posts( $request );
+
+		$updated_terms1 = wp_get_post_categories( $post_ids[0] );
+		$updated_terms2 = wp_get_post_categories( $post_ids[1] );
+		$updated_terms3 = wp_get_post_categories( $post_ids[2] );
+
+		$this->assertSame( $terms1, $updated_terms1, 'Post 1 should have terms 1 and 2.' );
+		$this->assertSame( $terms2, $updated_terms2, 'Post 2 should have terms 2 and 3.' );
+		$this->assertSame( $terms3, $updated_terms3, 'Post 3 should have terms 1 and 3.' );
+	}
+
+	/**
+	 * @ticket 11302
+	 */
+	public function test_bulk_edit_if_some_categories_added() {
+		wp_set_current_user( self::$admin_id );
+
+		$post_ids = self::factory()->post->create_many( 3 );
+		$term1    = wp_create_category( 'test1' );
+		$term2    = wp_create_category( 'test2' );
+		$term3    = wp_create_category( 'test3' );
+		$term4    = wp_create_category( 'test4' );
+
+		wp_set_post_categories( $post_ids[0], array( $term1, $term2 ) );
+		wp_set_post_categories( $post_ids[1], array( $term2, $term3 ) );
+		wp_set_post_categories( $post_ids[2], array( $term1, $term3 ) );
+
+		$terms1 = wp_get_post_categories( $post_ids[0], array( 'fields' => 'ids' ) );
+		$terms2 = wp_get_post_categories( $post_ids[1], array( 'fields' => 'ids' ) );
+		$terms3 = wp_get_post_categories( $post_ids[2], array( 'fields' => 'ids' ) );
+		// All existing categories are indeterminate.
+		$indeterminate = array_unique( array_merge( $terms1, $terms2, $terms3 ) );
+		// Add new category.
+		$categories[] = $term4;
+
+		$request = array(
+			'_status'                     => -1,
+			'post'                        => $post_ids,
+			'post_category'               => $categories,
+			'indeterminate_post_category' => $indeterminate,
+		);
+
+		bulk_edit_posts( $request );
+
+		$updated_terms1 = wp_get_post_categories( $post_ids[0], array( 'fields' => 'ids' ) );
+		$updated_terms2 = wp_get_post_categories( $post_ids[1], array( 'fields' => 'ids' ) );
+		$updated_terms3 = wp_get_post_categories( $post_ids[2], array( 'fields' => 'ids' ) );
+
+		// Each post should have the same categories as before and add term 4.
+		$this->assertSame( array( $term1, $term2, $term4 ), $updated_terms1, 'Post should have terms 1, 2, and 4.' );
+		$this->assertSame( array( $term2, $term3, $term4 ), $updated_terms2, 'Post should have terms 2, 3, and 4.' );
+		$this->assertSame( array( $term1, $term3, $term4 ), $updated_terms3, 'Post should have terms 1, 3, and 4.' );
+	}
+
+	/**
+	 * @ticket 11302
+	 */
+	public function test_bulk_edit_if_some_categories_removed() {
+		wp_set_current_user( self::$admin_id );
+
+		$post_ids = self::factory()->post->create_many( 3 );
+		$term1    = wp_create_category( 'test1' );
+		$term2    = wp_create_category( 'test2' );
+		$term3    = wp_create_category( 'test3' );
+
+		wp_set_post_categories( $post_ids[0], array( $term1, $term2 ) );
+		wp_set_post_categories( $post_ids[1], array( $term2, $term3 ) );
+		wp_set_post_categories( $post_ids[2], array( $term1, $term3 ) );
+
+		$terms1 = wp_get_post_categories( $post_ids[0], array( 'fields' => 'ids' ) );
+		$terms2 = wp_get_post_categories( $post_ids[1], array( 'fields' => 'ids' ) );
+		$terms3 = wp_get_post_categories( $post_ids[2], array( 'fields' => 'ids' ) );
+
+		// Terms 2 and 3 are in indeterminate state.
+		$indeterminate = array( $term2, $term3 );
+		// Remove term 1 from selected categories.
+		$categories = array_unique( array_merge( $terms1, $terms2, $terms3 ) );
+		$remove_key = array_search( $term1, $categories, true );
+		unset( $categories[ $remove_key ] );
+
+		$request = array(
+			'_status'                     => -1,
+			'post'                        => $post_ids,
+			'post_category'               => $categories,
+			'indeterminate_post_category' => $indeterminate,
+		);
+
+		bulk_edit_posts( $request );
+
+		$updated_terms1 = wp_get_post_categories( $post_ids[0], array( 'fields' => 'ids' ) );
+		$updated_terms2 = wp_get_post_categories( $post_ids[1], array( 'fields' => 'ids' ) );
+		$updated_terms3 = wp_get_post_categories( $post_ids[2], array( 'fields' => 'ids' ) );
+
+		// Post 1 should only have term 2.
+		$this->assertSame( $updated_terms1, array( $term2 ), 'Post 1 should only have term 2.' );
+		// Post 2 should be unchanged.
+		$this->assertSame( $terms2, $updated_terms2, 'Post 2 should be unchanged.' );
+		// Post 3 should only have term 3.
+		$this->assertSame( $updated_terms3, array( $term3 ), 'Post 3 should only have term 3.' );
+	}
+
 	/**
 	 * Tests that `bulk_edit_posts()` fires the 'bulk_edit_posts' action.
 	 *
@@ -935,7 +1060,8 @@ class Tests_Admin_IncludesPost extends WP_UnitTestCase {
 				'description' => '',
 				'icon'        => 'text',
 				'attributes'  => array(
-					'lock' => array( 'type' => 'object' ),
+					'lock'     => array( 'type' => 'object' ),
+					'metadata' => array( 'type' => 'object' ),
 				),
 				'usesContext' => array(),
 				'blockHooks'  => array( 'core/post-content' => 'before' ),
@@ -1144,8 +1270,6 @@ class Tests_Admin_IncludesPost extends WP_UnitTestCase {
 
 	/**
 	 * Test refreshed nonce for metabox loader.
-	 *
-	 * @return void
 	 */
 	public function test_user_get_refreshed_metabox_nonce() {
 
diff --git a/tests/admin/includesTheme.php b/tests/admin/includesTheme.php
index 9f2fdbc085..ed90cf9514 100644
--- a/tests/admin/includesTheme.php
+++ b/tests/admin/includesTheme.php
@@ -1,5 +1,6 @@
 <?php
 /**
+ * @group admin
  * @group themes
  */
 class Tests_Admin_IncludesTheme extends WP_UnitTestCase {
diff --git a/tests/admin/plugin-dependencies/base.php b/tests/admin/plugin-dependencies/base.php
new file mode 100644
index 0000000000..a827b4b1e7
--- /dev/null
+++ b/tests/admin/plugin-dependencies/base.php
@@ -0,0 +1,127 @@
+<?php
+/**
+ * Test case for the Plugin Dependencies tests.
+ *
+ * @package WP_Plugin_Dependencies
+ *
+ * Abstracts the common properties and tasks for the Plugin Dependencies tests.
+ */
+abstract class WP_PluginDependencies_UnitTestCase extends WP_UnitTestCase {
+
+	/**
+	 * Stores an instance of WP_Plugin_Dependencies
+	 * for managing property visibility during tests.
+	 *
+	 * @var WP_Plugin_Dependencies
+	 */
+	protected static $instance;
+
+	/**
+	 * Stores a list of static properties and their default values.
+	 * for resetting after each test runs.
+	 *
+	 * @var array
+	 */
+	protected static $static_properties = array(
+		'plugins'                     => null,
+		'plugin_dirnames'             => null,
+		'dependencies'                => null,
+		'dependency_slugs'            => null,
+		'dependent_slugs'             => null,
+		'dependency_api_data'         => null,
+		'dependency_filepaths'        => null,
+		'circular_dependencies_pairs' => null,
+		'circular_dependencies_slugs' => null,
+		'initialized'                 => false,
+	);
+
+	/**
+	 * An array of reflected class members.
+	 *
+	 * @var ReflectionMethod[]|ReflectionProperty[]
+	 */
+	protected static $reflected_members = array();
+
+	/**
+	 * Sets up the WP_Plugin_Dependencies instance before any tests run.
+	 */
+	public static function set_up_before_class() {
+		parent::set_up_before_class();
+
+		self::$instance = new WP_Plugin_Dependencies();
+	}
+
+	/**
+	 * Empties the '$reflected_members' property after all tests run.
+	 */
+	public static function tear_down_after_class() {
+		self::$reflected_members = array();
+
+		parent::tear_down_after_class();
+	}
+
+	/**
+	 * Resets all static properties to a default value after each test.
+	 */
+	public function tear_down() {
+		foreach ( self::$static_properties as $name => $default_value ) {
+			$this->set_property_value( $name, $default_value );
+		}
+
+		parent::tear_down();
+	}
+
+	/**
+	 * Temporarily modifies the accessibility of a property to change its value.
+	 *
+	 * @param string $property The property's name.
+	 * @param mixed  $value The new value.
+	 */
+	public function set_property_value( $property, $value ) {
+		if ( ! isset( self::$reflected_members[ $property ] ) ) {
+			self::$reflected_members[ $property ] = new ReflectionProperty( self::$instance, $property );
+		}
+
+		self::$reflected_members[ $property ]->setAccessible( true );
+		self::$reflected_members[ $property ]->setValue( self::$instance, $value );
+		self::$reflected_members[ $property ]->setAccessible( false );
+	}
+
+	/**
+	 * Temporarily modifies the accessibility of a property to get its value.
+	 *
+	 * @param string $property The property's name.
+	 * @return mixed The value of the property.
+	 */
+	public function get_property_value( $property ) {
+		if ( ! isset( self::$reflected_members[ $property ] ) ) {
+			self::$reflected_members[ $property ] = new ReflectionProperty( self::$instance, $property );
+		}
+
+		self::$reflected_members[ $property ]->setAccessible( true );
+		$value = self::$reflected_members[ $property ]->getValue( self::$instance );
+		self::$reflected_members[ $property ]->setAccessible( false );
+
+		return $value;
+	}
+
+	/**
+	 * Temporarily modifies the accessibility of a method to invoke it
+	 * and return its result.
+	 *
+	 * @param string $method  The method's name.
+	 * @param mixed  ...$args Arguments for the method.
+	 * @return mixed The result of the method call.
+	 */
+	protected function call_method( $method, ...$args ) {
+		if ( ! isset( self::$reflected_members[ $method ] ) ) {
+			self::$reflected_members[ $method ] = new ReflectionMethod( self::$instance, $method );
+		}
+
+		self::$reflected_members[ $method ]->setAccessible( true );
+		$value = self::$reflected_members[ $method ]->invokeArgs( self::$instance, $args );
+		self::$reflected_members[ $method ]->setAccessible( false );
+
+		return $value;
+	}
+}
diff --git a/tests/admin/plugin-dependencies/getDependencies.php b/tests/admin/plugin-dependencies/getDependencies.php
new file mode 100644
index 0000000000..ca9510493e
--- /dev/null
+++ b/tests/admin/plugin-dependencies/getDependencies.php
@@ -0,0 +1,40 @@
+<?php
+/**
+ * Tests for the WP_Plugin_Dependencies::get_dependencies() method.
+ *
+ * @package WordPress
+ */
+
+require_once __DIR__ . '/base.php';
+
+/**
+ * @group admin
+ * @group plugins
+ *
+ * @covers WP_Plugin_Dependencies::get_dependencies
+ */
+class Tests_Admin_WPPluginDependencies_GetDependencies extends WP_PluginDependencies_UnitTestCase {
+
+	/**
+	 * Tests that a plugin with no dependencies will return an empty array.
+	 *
+	 * @ticket 22316
+	 */
+	public function test_should_return_an_empty_array_when_a_plugin_has_no_dependencies() {
+		$this->assertSame( array(), self::$instance::get_dependencies( 'dependent/dependent.php' ) );
+	}
+
+	/**
+	 * Tests that a plugin with dependencies will return an array of dependencies.
+	 *
+	 * @ticket 22316
+	 */
+	public function test_should_return_an_array_of_dependencies_when_a_plugin_has_dependencies() {
+		$expected = array( 'dependency', 'dependency2' );
+		$this->set_property_value(
+			'dependencies',
+			array( 'dependent/dependent.php' => $expected )
+		);
+		$this->assertSame( $expected, self::$instance::get_dependencies( 'dependent/dependent.php' ) );
+	}
+}
diff --git a/tests/admin/plugin-dependencies/getDependencyData.php b/tests/admin/plugin-dependencies/getDependencyData.php
new file mode 100644
index 0000000000..79b235d2f2
--- /dev/null
+++ b/tests/admin/plugin-dependencies/getDependencyData.php
@@ -0,0 +1,129 @@
+<?php
+/**
+ * Tests for the WP_Plugin_Dependencies::get_dependency_data() method.
+ *
+ * @package WordPress
+ */
+
+require_once __DIR__ . '/base.php';
+
+/**
+ * @group admin
+ * @group plugins
+ *
+ * @covers WP_Plugin_Dependencies::get_dependency_data
+ * @covers WP_Plugin_Dependencies::get_dependency_api_data
+ */
+class Tests_Admin_WPPluginDependencies_GetDependencyData extends WP_PluginDependencies_UnitTestCase {
+
+	/**
+	 * Tests that dependency data is retrieved.
+	 *
+	 * @ticket 22316
+	 *
+	 * @global string $pagenow The filename of the current screen.
+	 */
+	public function test_should_get_dependency_data() {
+		global $pagenow;
+
+		// Backup $pagenow.
+		$old_pagenow = $pagenow;
+
+		// Ensure is_admin() and screen checks pass.
+		$pagenow = 'plugins.php';
+		set_current_screen( 'plugins.php' );
+
+		$expected = array( 'name' => 'Dependency 1' );
+		$this->set_property_value( 'dependency_api_data', array( 'dependency' => $expected ) );
+
+		$actual = self::$instance::get_dependency_data( 'dependency' );
+
+		// Restore $pagenow.
+		$pagenow = $old_pagenow;
+
+		$this->assertSame( $expected, $actual );
+	}
+
+	/**
+	 * Tests that false is returned when no dependency data exists.
+	 *
+	 * @ticket 22316
+	 *
+	 * @global string $pagenow The filename of the current screen.
+	 */
+	public function test_should_return_false_when_no_dependency_data_exists() {
+		global $pagenow;
+
+		// Backup $pagenow.
+		$old_pagenow = $pagenow;
+
+		// Ensure is_admin() and screen checks pass.
+		$pagenow = 'plugins.php';
+		set_current_screen( 'plugins.php' );
+
+		$this->set_property_value( 'dependency_api_data', array() );
+
+		$actual = self::$instance::get_dependency_data( 'dependency' );
+
+		// Restore $pagenow.
+		$pagenow = $old_pagenow;
+
+		$this->assertFalse( $actual );
+	}
+
+	/**
+	 * Tests that a 'slug' key in the Plugins API response object is not assumed.
+	 *
+	 * @ticket 60540
+	 */
+	public function test_should_not_assume_a_slug_key_exists_in_the_response() {
+		global $pagenow;
+
+		// Backup $pagenow.
+		$old_pagenow = $pagenow;
+
+		// Ensure is_admin() and screen checks pass.
+		$pagenow = 'plugins.php';
+		set_current_screen( 'plugins.php' );
+
+		add_filter(
+			'plugins_api',
+			static function ( $bypass, $action, $args ) {
+				if ( 'plugin_information' === $action && isset( $args->slug ) && 'dependency' === $args->slug ) {
+					$bypass = (object) array( 'name' => 'Dependency 1' );
+				}
+				return $bypass;
+			},
+			10,
+			3
+		);
+
+		$this->set_property_value(
+			'plugins',
+			array(
+				'dependent/dependent.php' => array(
+					'Name'            => 'Dependent',
+					'RequiresPlugins' => 'dependency',
+				),
+			)
+		);
+
+		self::$instance->initialize();
+
+		$actual = $this->get_property_value( 'dependency_api_data' );
+
+		// Restore $pagenow.
+		$pagenow = $old_pagenow;
+
+		$this->assertSame(
+			array(
+				'dependency' => array(
+					'name'     => 'Dependency 1',
+					'external' => true,
+					'Name'     => 'Dependency 1',
+				),
+			),
+			$actual
+		);
+	}
+}
diff --git a/tests/admin/plugin-dependencies/getDependencyFilepath.php b/tests/admin/plugin-dependencies/getDependencyFilepath.php
new file mode 100644
index 0000000000..04b4948e63
--- /dev/null
+++ b/tests/admin/plugin-dependencies/getDependencyFilepath.php
@@ -0,0 +1,159 @@
+<?php
+/**
+ * Tests for the WP_Plugin_Dependencies::get_dependency_filepath() method.
+ *
+ * @package WordPress
+ */
+
+require_once __DIR__ . '/base.php';
+
+/**
+ * @group admin
+ * @group plugins
+ *
+ * @covers WP_Plugin_Dependencies::get_dependency_filepath
+ * @covers WP_Plugin_Dependencies::get_dependency_filepaths
+ * @covers WP_Plugin_Dependencies::get_plugin_dirnames
+ */
+class Tests_Admin_WPPluginDependencies_GetDependencyFilepath extends WP_PluginDependencies_UnitTestCase {
+
+	/**
+	 * Tests that false is returned if Plugin Dependencies has not been initialized.
+	 *
+	 * @ticket 60457
+	 */
+	public function test_should_return_false_before_initialization() {
+		// Ensure Plugin Dependencies has not been initialized.
+		$this->assertFalse(
+			$this->get_property_value( 'initialized' ),
+			'Plugin Dependencies has been initialized.'
+		);
+
+		$this->assertSame(
+			self::$static_properties['dependency_slugs'],
+			$this->get_property_value( 'dependency_slugs' ),
+			'"dependency_slugs" was not set to its default value.'
+		);
+
+		$this->assertFalse(
+			self::$instance->get_dependency_filepath( 'dependency' ),
+			'false was not returned before initialization.'
+		);
+	}
+
+	/**
+	 * Tests that the expected dependency filepaths are retrieved for installed dependencies.
+	 *
+	 * @ticket 22316
+	 *
+	 * @dataProvider data_get_dependency_filepath
+	 *
+	 * @param string[]     $dependency_slug The dependency slug.
+	 * @param string[]     $plugins         An array of plugin paths.
+	 * @param string|false $expected       The expected result.
+	 */
+	public function test_should_return_filepaths_for_installed_dependencies( $dependency_slug, $plugins, $expected ) {
+		$this->set_property_value( 'plugins', $plugins );
+		$this->assertNull( $this->get_property_value( 'dependency_filepaths' ) );
+		self::$instance::initialize();
+
+		$this->assertSame(
+			$expected,
+			self::$instance::get_dependency_filepath( $dependency_slug ),
+			'The incorrect filepath was returned.'
+		);
+	}
+
+	/**
+	 * Data provider.
+	 *
+	 * @return array[]
+	 */
+	public function data_get_dependency_filepath() {
+		return array(
+			'no plugins'                      => array(
+				'dependency_slug' => 'dependency',
+				'plugins'         => array(),
+				'expected'        => false,
+			),
+			'a plugin that starts with slug/' => array(
+				'dependency_slug' => 'dependency',
+				'plugins'         => array(
+					'dependency-pro/dependency.php' => array( 'RequiresPlugins' => '' ),
+					'dependent/dependent.php'       => array( 'RequiresPlugins' => 'dependency' ),
+				),
+				'expected'        => false,
+			),
+			'a plugin that ends with slug/'   => array(
+				'dependency_slugs' => 'dependency',
+				'plugins'          => array(
+					'addon-for-dependency/dependency.php' => array( 'RequiresPlugins' => '' ),
+					'dependent/dependent.php'             => array( 'RequiresPlugins' => 'dependency' ),
+				),
+				'expected'         => false,
+			),
+			'a plugin that does not exist'    => array(
+				'dependency_slugs' => 'dependency2',
+				'plugins'          => array(
+					'dependency/dependency.php' => array( 'RequiresPlugins' => '' ),
+					'dependent/dependent.php'   => array( 'RequiresPlugins' => 'dependency2' ),
+				),
+				'expected'         => false,
+			),
+			'a plugin that exists'            => array(
+				'dependency_slugs' => 'dependency',
+				'plugins'          => array(
+					'dependency/dependency.php' => array( 'RequiresPlugins' => '' ),
+					'dependent/dependent.php'   => array( 'RequiresPlugins' => 'dependency' ),
+				),
+				'expected'         => 'dependency/dependency.php',
+			),
+		);
+	}
+
+	/**
+	 * Tests that an existing value for dependency filepaths is returned.
+	 *
+	 * @ticket 22316
+	 */
+	public function test_should_return_existing_value_for_dependency_filepaths() {
+		$expected = 'dependency/dependency.php';
+
+		$this->set_property_value( 'dependency_filepaths', array( 'dependency' => $expected ) );
+
+		/*
+		 * If existing dependency filepaths are not returned,
+		 * they'll be built from this data.
+		 *
+		 * This data is explicitly set to ensure that no
+		 * test plugins ever interfere with this test.
+		 */
+		$this->set_property_value(
+			'dependency_slugs',
+			array( 'dependency', 'dependency2', 'dependency3' )
+		);
+
+		$this->set_property_value(
+			'plugins',
+			array(
+				// This is flipped as paths are stored in the keys.
+				'dependency/dependency.php'   => array(),
+				'dependency2/dependency2.php' => array(),
+				'dependency3/dependency3.php' => array(),
+			)
+		);
+
+		$this->assertSame( $expected, self::$instance::get_dependency_filepath( 'dependency' ) );
+	}
+
+	/**
+	 * Tests that an empty array is returned when
+	 * no plugin directory names are stored.
+	 *
+	 * @ticket 22316
+	 */
+	public function test_should_return_empty_array_for_no_plugin_dirnames() {
+		$this->set_property_value( 'dependency_slugs', array() );
+		$this->assertFalse( self::$instance::get_dependency_filepath( 'dependency' ) );
+	}
+}
diff --git a/tests/admin/plugin-dependencies/getDependencyNames.php b/tests/admin/plugin-dependencies/getDependencyNames.php
new file mode 100644
index 0000000000..2b4fd7ef79
--- /dev/null
+++ b/tests/admin/plugin-dependencies/getDependencyNames.php
@@ -0,0 +1,256 @@
+<?php
+/**
+ * Tests for the WP_Plugin_Dependencies::get_dependency_names() method.
+ *
+ * @package WordPress
+ */
+
+require_once __DIR__ . '/base.php';
+
+/**
+ * @group admin
+ * @group plugins
+ *
+ * @covers WP_Plugin_Dependencies::get_dependency_names
+ * @covers WP_Plugin_Dependencies::get_dependency_api_data
+ * @covers WP_Plugin_Dependencies::get_dependencies
+ * @covers WP_Plugin_Dependencies::get_dependency_filepaths
+ */
+class Tests_Admin_WPPluginDependencies_GetDependencyNames extends WP_PluginDependencies_UnitTestCase {
+
+	/**
+	 * Mocks an API response.
+	 *
+	 * @param string $type The type of response. Accepts 'success' or 'failure'.
+	 */
+	private function mock_api_response( $type ) {
+		add_filter(
+			'plugins_api',
+			function ( $bypass, $action, $args ) use ( $type ) {
+				if ( 'plugin_information' === $action && isset( $args->slug ) && str_starts_with( $args->slug, 'dependency' ) ) {
+					if ( 'success' === $type ) {
+						return (object) array(
+							'slug' => $args->slug,
+							'name' => 'Dependency ' . str_replace( 'dependency', '', $args->slug ),
+						);
+					} elseif ( 'failure' === $type ) {
+						return new WP_Error( 'plugin_not_found', 'Plugin not found.' );
+					}
+				}
+
+				return $bypass;
+			},
+			10,
+			3
+		);
+	}
+
+	/**
+	 * Tests that dependency names are retrieved.
+	 *
+	 * @ticket 22316
+	 *
+	 * @global string $pagenow The filename of the current screen.
+	 */
+	public function test_should_get_dependency_names() {
+		global $pagenow;
+
+		// Backup $pagenow.
+		$old_pagenow = $pagenow;
+
+		// Ensure is_admin() and screen checks pass.
+		$pagenow = 'plugins.php';
+		set_current_screen( 'plugins.php' );
+
+		$this->set_property_value(
+			'plugins',
+			array( 'dependent/dependent.php' => array( 'RequiresPlugins' => 'dependency, dependency2' ) )
+		);
+
+		$this->mock_api_response( 'success' );
+		self::$instance::initialize();
+
+		$this->set_property_value(
+			'dependency_filepaths',
+			array(
+				'dependency'  => 'dependency/dependency.php',
+				'dependency2' => 'dependency2/dependency2.php',
+			)
+		);
+
+		$this->set_property_value(
+			'dependency_api_data',
+			array(
+				'dependency'  => array(
+					'name' => 'Dependency 1',
+				),
+				'dependency2' => array(
+					'name' => 'Dependency 2',
+				),
+			)
+		);
+
+		$actual = self::$instance::get_dependency_names( 'dependent/dependent.php' );
+
+		// Restore $pagenow.
+		$pagenow = $old_pagenow;
+
+		$this->assertSame(
+			array(
+				'dependency'  => 'Dependency 1',
+				'dependency2' => 'Dependency 2',
+			),
+			$actual
+		);
+	}
+
+	/**
+	 * Tests that dependency slugs are used if their name is not available.
+	 *
+	 * @ticket 22316
+	 *
+	 * @global string $pagenow The filename of the current screen.
+	 */
+	public function test_should_use_dependency_name_from_file() {
+		global $pagenow;
+
+		// Backup $pagenow.
+		$old_pagenow = $pagenow;
+
+		// Ensure is_admin() and screen checks pass.
+		$pagenow = 'plugins.php';
+		set_current_screen( 'plugins.php' );
+
+		$this->set_property_value(
+			'plugins',
+			array(
+				'dependent/dependent.php'     => array( 'RequiresPlugins' => 'dependency, dependency2' ),
+				'dependency/dependency.php'   => array(
+					'Name'            => 'Dependency 1',
+					'RequiresPlugins' => '',
+				),
+				'dependency2/dependency2.php' => array(
+					'Name'            => 'Dependency 2',
+					'RequiresPlugins' => '',
+				),
+			)
+		);
+
+		$this->mock_api_response( 'failure' );
+		self::$instance::initialize();
+
+		$this->set_property_value(
+			'dependency_filepaths',
+			array(
+				'dependency'  => 'dependency/dependency.php',
+				'dependency2' => 'dependency2/dependency2.php',
+			)
+		);
+
+		// The plugins are not in the Plugins repository.
+		$this->set_property_value( 'dependency_api_data', array() );
+
+		$actual = self::$instance::get_dependency_names( 'dependent/dependent.php' );
+
+		// Restore $pagenow.
+		$pagenow = $old_pagenow;
+
+		$this->assertSame(
+			array(
+				'dependency'  => 'Dependency 1',
+				'dependency2' => 'Dependency 2',
+			),
+			$actual
+		);
+	}
+
+	/**
+	 * Tests that dependency slugs are used if their name is not available.
+	 *
+	 * @ticket 22316
+	 *
+	 * @global string $pagenow The filename of the current screen.
+	 */
+	public function test_should_use_dependency_slugs() {
+		global $pagenow;
+
+		// Backup $pagenow.
+		$old_pagenow = $pagenow;
+
+		// Ensure is_admin() and screen checks pass.
+		$pagenow = 'plugins.php';
+		set_current_screen( 'plugins.php' );
+
+		$this->set_property_value(
+			'plugins',
+			array( 'dependent/dependent.php' => array( 'RequiresPlugins' => 'dependency, dependency2' ) )
+		);
+
+		$this->mock_api_response( 'failure' );
+		self::$instance::initialize();
+
+		// The plugins are not in the Plugins repository.
+		$this->set_property_value( 'dependency_api_data', array() );
+
+		$actual = self::$instance::get_dependency_names( 'dependent/dependent.php' );
+
+		// Restore $pagenow.
+		$pagenow = $old_pagenow;
+
+		$this->assertSame(
+			array(
+				'dependency'  => 'dependency',
+				'dependency2' => 'dependency2',
+			),
+			$actual
+		);
+	}
+
+	/**
+	 * Tests that `$dependency_api_data` is set when it's not already available.
+	 *
+	 * @ticket 22316
+	 *
+	 * @global string $pagenow The filename of the current screen.
+	 */
+	public function test_should_set_dependency_data_when_not_already_available() {
+		global $pagenow;
+
+		// Backup $pagenow.
+		$old_pagenow = $pagenow;
+
+		// Ensure is_admin() and screen checks pass.
+		$pagenow = 'plugins.php';
+		set_current_screen( 'plugins.php' );
+
+		$this->set_property_value(
+			'plugins',
+			array(
+				'dependent/dependent.php'   => array(
+					'Name'            => 'Dependent 1',
+					'RequiresPlugins' => 'dependency',
+				),
+				'dependency/dependency.php' => array(
+					'Name'            => 'Dependency 1',
+					'RequiresPlugins' => '',
+				),
+			)
+		);
+
+		$this->set_property_value( 'dependency_slugs', array( 'dependency' ) );
+
+		set_site_transient( 'wp_plugin_dependencies_plugin_data', array( 'dependency' => false ) );
+		set_site_transient( 'wp_plugin_dependencies_plugin_timeout_dependency', true, 12 * HOUR_IN_SECONDS );
+
+		$this->mock_api_response( 'success' );
+		self::$instance::get_dependency_names( 'dependent' );
+
+		// Restore $pagenow.
+		$pagenow = $old_pagenow;
+
+		$this->assertSame(
+			array( 'dependency' => array( 'Name' => 'Dependency 1' ) ),
+			$this->get_property_value( 'dependency_api_data' )
+		);
+	}
+}
diff --git a/tests/admin/plugin-dependencies/getDependentFilepath.php b/tests/admin/plugin-dependencies/getDependentFilepath.php
new file mode 100644
index 0000000000..1cfdb30b13
--- /dev/null
+++ b/tests/admin/plugin-dependencies/getDependentFilepath.php
@@ -0,0 +1,75 @@
+<?php
+/**
+ * Tests for the WP_Plugin_Dependencies::get_dependent_filepath() method.
+ *
+ * @package WordPress
+ */
+
+require_once __DIR__ . '/base.php';
+
+/**
+ * @group admin
+ * @group plugins
+ *
+ * @covers WP_Plugin_Dependencies::get_dependent_filepath
+ * @covers WP_Plugin_Dependencies::get_plugin_dirnames
+ */
+class Tests_Admin_WPPluginDependencies_GetDependentFilepath extends WP_PluginDependencies_UnitTestCase {
+
+	/**
+	 * Tests that the expected dependent filepath is retrieved.
+	 *
+	 * @ticket 22316
+	 *
+	 * @dataProvider data_get_dependent_filepath
+	 *
+	 * @param string       $dependent_slug The dependent slug.
+	 * @param string[]     $plugins        An array of plugin data.
+	 * @param string|false $expected       The expected result.
+	 */
+	public function test_should_return_filepaths_for_installed_dependents( $dependent_slug, $plugins, $expected ) {
+		$this->set_property_value( 'plugins', $plugins );
+		self::$instance::initialize();
+
+		$this->assertSame(
+			$expected,
+			self::$instance::get_dependent_filepath( $dependent_slug ),
+			'The incorrect filepath was returned.'
+		);
+	}
+
+	/**
+	 * Data provider.
+	 *
+	 * @return array[]
+	 */
+	public function data_get_dependent_filepath() {
+		return array(
+			'a plugin that exists'            => array(
+				'dependent_slug' => 'dependent',
+				'plugins'        => array( 'dependent/dependent.php' => array( 'RequiresPlugins' => 'woocommerce' ) ),
+				'expected'       => 'dependent/dependent.php',
+			),
+			'no plugins'                      => array(
+				'dependent_slug' => 'dependent',
+				'plugins'        => array(),
+				'expected'       => false,
+			),
+			'a plugin that starts with slug/' => array(
+				'dependent_slug' => 'dependent',
+				'plugins'        => array( 'dependent-pro/dependent.php' => array( 'RequiresPlugins' => 'woocommerce' ) ),
+				'expected'       => false,
+			),
+			'a plugin that ends with slug/'   => array(
+				'dependent_slug' => 'dependent',
+				'plugins'        => array( 'not-dependent/not-dependent.php' => array( 'RequiresPlugins' => 'woocommerce' ) ),
+				'expected'       => false,
+			),
+			'a plugin that does not exist'    => array(
+				'dependent_slug' => 'dependent2',
+				'plugins'        => array( 'dependent/dependent.php' => array( 'RequiresPlugins' => 'woocommerce' ) ),
+				'expected'       => false,
+			),
+		);
+	}
+}
diff --git a/tests/admin/plugin-dependencies/getDependentNames.php b/tests/admin/plugin-dependencies/getDependentNames.php
new file mode 100644
index 0000000000..751e588c21
--- /dev/null
+++ b/tests/admin/plugin-dependencies/getDependentNames.php
@@ -0,0 +1,76 @@
+<?php
+/**
+ * Tests for the WP_Plugin_Dependencies::get_dependent_names() method.
+ *
+ * @package WordPress
+ */
+
+require_once __DIR__ . '/base.php';
+
+/**
+ * @group admin
+ * @group plugins
+ *
+ * @covers WP_Plugin_Dependencies::get_dependent_names
+ * @covers WP_Plugin_Dependencies::get_plugins
+ * @covers WP_Plugin_Dependencies::convert_to_slug
+ * @covers WP_Plugin_Dependencies::get_dependents
+ */
+class Tests_Admin_WPPluginDependencies_GetDependentNames extends WP_PluginDependencies_UnitTestCase {
+
+	/**
+	 * Tests that dependent names are retrieved.
+	 *
+	 * @ticket 22316
+	 */
+	public function test_should_get_dependent_names() {
+		$this->set_property_value(
+			'plugins',
+			array(
+				'dependent/dependent.php'   => array(
+					'Name'            => 'Dependent 1',
+					'RequiresPlugins' => 'dependency',
+				),
+				'dependent2/dependent2.php' => array(
+					'Name'            => 'Dependent 2',
+					'RequiresPlugins' => 'dependency',
+				),
+			)
+		);
+
+		self::$instance::initialize();
+
+		$this->assertSame(
+			array( 'Dependent 1', 'Dependent 2' ),
+			self::$instance::get_dependent_names( 'dependency/dependency.php' )
+		);
+	}
+
+	/**
+	 * Tests that dependent names are sorted.
+	 *
+	 * @ticket 22316
+	 */
+	public function test_should_sort_dependent_names() {
+		$this->set_property_value(
+			'plugins',
+			array(
+				'dependent2/dependent2.php' => array(
+					'Name'            => 'Dependent 2',
+					'RequiresPlugins' => 'dependency',
+				),
+				'dependent/dependent.php'   => array(
+					'Name'            => 'Dependent 1',
+					'RequiresPlugins' => 'dependency',
+				),
+			)
+		);
+
+		self::$instance::initialize();
+
+		$this->assertSame(
+			array( 'Dependent 1', 'Dependent 2' ),
+			self::$instance::get_dependent_names( 'dependency/dependency.php' )
+		);
+	}
+}
diff --git a/tests/admin/plugin-dependencies/getDependents.php b/tests/admin/plugin-dependencies/getDependents.php
new file mode 100644
index 0000000000..da8522bfb7
--- /dev/null
+++ b/tests/admin/plugin-dependencies/getDependents.php
@@ -0,0 +1,50 @@
+<?php
+/**
+ * Tests for the WP_Plugin_Dependencies::get_dependents() method.
+ *
+ * @package WordPress
+ */
+
+require_once __DIR__ . '/base.php';
+
+/**
+ * @group admin
+ * @group plugins
+ *
+ * @covers WP_Plugin_Dependencies::get_dependents
+ */
+class Tests_Admin_WPPluginDependencies_GetDependents extends WP_PluginDependencies_UnitTestCase {
+
+	/**
+	 * Tests that a plugin with no dependents will return an empty array.
+	 *
+	 * @ticket 22316
+	 */
+	public function test_should_return_an_empty_array_when_a_plugin_has_no_dependents() {
+		self::$instance::initialize();
+		$this->assertSame(
+			array(),
+			self::$instance::get_dependents( 'dependency' )
+		);
+	}
+
+	/**
+	 * Tests that a plugin with dependents will return an array of dependents.
+	 *
+	 * @ticket 22316
+	 */
+	public function test_should_return_an_array_of_dependents_when_a_plugin_has_dependents() {
+		$this->set_property_value(
+			'dependencies',
+			array(
+				'dependent/dependent.php'   => array( 'dependency' ),
+				'dependent2/dependent2.php' => array( 'dependency' ),
+			)
+		);
+
+		$this->assertSame(
+			array( 'dependent/dependent.php', 'dependent2/dependent2.php' ),
+			self::$instance::get_dependents( 'dependency' )
+		);
+	}
+}
diff --git a/tests/admin/plugin-dependencies/hasActiveDependents.php b/tests/admin/plugin-dependencies/hasActiveDependents.php
new file mode 100644
index 0000000000..b4d5243376
--- /dev/null
+++ b/tests/admin/plugin-dependencies/hasActiveDependents.php
@@ -0,0 +1,201 @@
+<?php
+/**
+ * Tests for the WP_Plugin_Dependencies::has_active_dependents() method.
+ *
+ * @package WordPress
+ */
+
+require_once __DIR__ . '/base.php';
+
+/**
+ * @group admin
+ * @group plugins
+ *
+ * @covers WP_Plugin_Dependencies::has_active_dependents
+ */
+class Tests_Admin_WPPluginDependencies_HasActiveDependents extends WP_PluginDependencies_UnitTestCase {
+
+	/**
+	 * Tests that a plugin with no dependents will return true.
+	 *
+	 * @ticket 22316
+	 */
+	public function test_should_return_false_when_a_plugin_has_no_dependents() {
+		$this->set_property_value(
+			'dependencies',
+			array( 'dependent/dependent.php' => array( 'dependency' ) )
+		);
+
+		update_option( 'active_plugins', array( 'dependent/dependent.php' ) );
+
+		$this->assertFalse( self::$instance::has_active_dependents( 'dependency2/dependency2.php' ) );
+	}
+
+	/**
+	 * Tests that a plugin with active dependents will return true.
+	 *
+	 * @ticket 22316
+	 */
+	public function test_should_return_true_when_a_plugin_has_active_dependents() {
+		$this->set_property_value(
+			'dependencies',
+			array( 'dependent/dependent.php' => array( 'dependency' ) )
+		);
+
+		update_option( 'active_plugins', array( 'dependent/dependent.php' ) );
+
+		$this->assertTrue( self::$instance::has_active_dependents( 'dependency/dependency.php' ) );
+	}
+
+	/**
+	 * Tests that a plugin with one inactive and one active dependent will return true.
+	 *
+	 * @ticket 22316
+	 */
+	public function test_should_return_true_when_a_plugin_has_one_inactive_and_one_active_dependent() {
+		$this->set_property_value(
+			'dependencies',
+			array(
+				'dependent2/dependent2.php' => array( 'dependency' ),
+				'dependent/dependent.php'   => array( 'dependency' ),
+			)
+		);
+
+		update_option( 'active_plugins', array( 'dependent/dependent.php' ) );
+
+		$this->assertTrue( self::$instance::has_active_dependents( 'dependency/dependency.php' ) );
+	}
+
+	/**
+	 * Tests that a plugin with one active and one inactive dependent will return true.
+	 *
+	 * @ticket 22316
+	 */
+	public function test_should_return_true_when_a_plugin_has_one_active_and_one_inactive_dependent() {
+		$this->set_property_value(
+			'dependencies',
+			array(
+				'dependent/dependent.php'   => array( 'dependency' ),
+				'dependent2/dependent2.php' => array( 'dependency' ),
+			)
+		);
+
+		update_option( 'active_plugins', array( 'dependent/dependent.php' ) );
+
+		$this->assertTrue( self::$instance::has_active_dependents( 'dependency/dependency.php' ) );
+	}
+
+	/**
+	 * Tests that when a plugin with active dependents is earlier in the list,
+	 * it will return true if a later plugin has no active dependents.
+	 *
+	 * @ticket 22316
+	 */
+	public function test_should_return_true_when_the_earlier_plugin_has_active_dependents_but_the_later_plugin_does_not() {
+		$this->set_property_value(
+			'dependencies',
+			array( 'dependent2/dependent2.php' => array( 'dependency' ) )
+		);
+
+		$this->set_property_value(
+			'dependencies',
+			array(
+				'dependent/dependent.php'   => array( 'dependency' ),
+				'dependent2/dependent2.php' => array( 'dependency2' ),
+			)
+		);
+
+		update_option( 'active_plugins', array( 'dependent/dependent.php' ) );
+
+		$this->assertTrue( self::$instance::has_active_dependents( 'dependency/dependency.php' ) );
+	}
+
+	/**
+	 * Tests that when a plugin with active dependents is later in the list,
+	 * it will return true if an earlier plugin has no active dependents.
+	 *
+	 * @ticket 22316
+	 */
+	public function test_should_return_true_when_the_later_plugin_has_active_dependents_but_the_earlier_plugin_does_not() {
+		$this->set_property_value(
+			'dependencies',
+			array( 'dependent2/dependent2.php' => array( 'dependency' ) )
+		);
+
+		$this->set_property_value(
+			'dependencies',
+			array(
+				'dependent/dependent.php'   => array( 'dependency' ),
+				'dependent2/dependent2.php' => array( 'dependency2' ),
+			)
+		);
+
+		update_option( 'active_plugins', array( 'dependent2/dependent2.php' ) );
+
+		$this->assertTrue( self::$instance::has_active_dependents( 'dependency2/dependency2.php' ) );
+	}
+
+	/**
+	 * Tests that a plugin with no dependents will return false.
+	 *
+	 * @ticket 22316
+	 */
+	public function test_should_return_false_when_a_plugin_has_no_active_dependents() {
+		$this->set_property_value(
+			'dependencies',
+			array( 'dependent/dependent.php' => array( 'dependency' ) )
+		);
+
+		$this->assertFalse( self::$instance::has_active_dependents( 'dependency/dependency.php' ) );
+	}
+
+	/**
+	 * Tests that when a plugin with no active dependents is earlier in the list,
+	 * it will return false if a later plugin has active dependents.
+	 *
+	 * @ticket 22316
+	 */
+	public function test_should_return_false_when_the_earlier_plugin_has_no_active_dependents_but_the_later_plugin_does() {
+		$this->set_property_value(
+			'dependencies',
+			array( 'dependent2/dependent2.php' => array( 'dependency' ) )
+		);
+
+		$this->set_property_value(
+			'dependencies',
+			array(
+				'dependent/dependent.php'   => array( 'dependency' ),
+				'dependent2/dependent2.php' => array( 'dependency2' ),
+			)
+		);
+
+		update_option( 'active_plugins', array( 'dependent2/dependent2.php' ) );
+
+		$this->assertFalse( self::$instance::has_active_dependents( 'dependency/dependency.php' ) );
+	}
+
+	/**
+	 * Tests that when a plugin with no active dependents is later in the list,
+	 * it will return false if an earlier plugin has active dependents.
+	 *
+	 * @ticket 22316
+	 */
+	public function test_should_return_false_when_the_later_plugin_has_no_active_dependents_but_the_earlier_plugin_does() {
+		$this->set_property_value(
+			'dependencies',
+			array( 'dependent2/dependent2.php' => array( 'dependency' ) )
+		);
+
+		$this->set_property_value(
+			'dependencies',
+			array(
+				'dependent/dependent.php'   => array( 'dependency' ),
+				'dependent2/dependent2.php' => array( 'dependency2' ),
+			)
+		);
+
+		update_option( 'active_plugins', array( 'dependent/dependent.php' ) );
+
+		$this->assertFalse( self::$instance::has_active_dependents( 'dependency2/dependency2.php' ) );
+	}
+}
diff --git a/tests/admin/plugin-dependencies/hasCircularDependency.php b/tests/admin/plugin-dependencies/hasCircularDependency.php
new file mode 100644
index 0000000000..10d00d96b7
--- /dev/null
+++ b/tests/admin/plugin-dependencies/hasCircularDependency.php
@@ -0,0 +1,165 @@
+<?php
+/**
+ * Tests for the WP_Plugin_Dependencies::has_circular_dependency() method.
+ *
+ * @package WordPress
+ */
+
+require_once __DIR__ . '/base.php';
+
+/**
+ * @group admin
+ * @group plugins
+ *
+ * @covers WP_Plugin_Dependencies::has_circular_dependency
+ * @covers WP_Plugin_Dependencies::get_circular_dependencies
+ * @covers WP_Plugin_Dependencies::check_for_circular_dependencies
+ */
+class Tests_Admin_WPPluginDependencies_HasCircularDependency extends WP_PluginDependencies_UnitTestCase {
+
+	/**
+	 * Tests that false is returned if Plugin Dependencies has not been initialized.
+	 *
+	 * @ticket 60457
+	 */
+	public function test_should_return_false_before_initialization() {
+		$this->set_property_value(
+			'plugins',
+			array(
+				'dependent/dependent.php'   => array(
+					'Name'            => 'Dependent',
+					'RequiresPlugins' => 'dependency',
+				),
+				'dependency/dependency.php' => array(
+					'Name'            => 'Dependency',
+					'RequiresPlugins' => 'dependent',
+				),
+			)
+		);
+
+		// Ensure Plugin Dependencies has not been initialized.
+		$this->assertFalse(
+			$this->get_property_value( 'initialized' ),
+			'Plugin Dependencies has been initialized.'
+		);
+
+		$this->assertSame(
+			self::$static_properties['circular_dependencies_slugs'],
+			$this->get_property_value( 'circular_dependencies_slugs' ),
+			'"circular_dependencies_slugs" was not set to its default value.'
+		);
+
+		$this->assertFalse(
+			self::$instance->has_circular_dependency( 'dependency' ),
+			'false was not returned before initialization.'
+		);
+	}
+
+	/**
+	 * Tests that a plugin with a circular dependency will return true.
+	 *
+	 * @ticket 22316
+	 *
+	 * @dataProvider data_circular_dependencies
+	 *
+	 * @param string  $plugin_to_check The plugin file of the plugin to check.
+	 * @param array[] $plugins         An array of plugins.
+	 */
+	public function test_should_return_true_when_a_plugin_has_circular_dependency( $plugin_to_check, $plugins ) {
+		$this->set_property_value( 'plugins', $plugins );
+		self::$instance::initialize();
+
+		$this->assertTrue( self::$instance::has_circular_dependency( $plugin_to_check ) );
+	}
+
+	/**
+	 * Data provider.
+	 *
+	 * @return array[]
+	 */
+	public function data_circular_dependencies() {
+		return array(
+			'a plugin that depends on itself' => array(
+				'plugin_to_check' => 'dependency/dependency.php',
+				'plugins'         => array(
+					'dependency/dependency.php' => array(
+						'Name'            => 'Dependency 1',
+						'RequiresPlugins' => 'dependency',
+					),
+				),
+			),
+			'two plugins'                     => array(
+				'plugin_to_check' => 'dependency/dependency.php',
+				'plugins'         => array(
+					'dependency/dependency.php'   => array(
+						'Name'            => 'Dependency 1',
+						'RequiresPlugins' => 'dependency2',
+					),
+					'dependency2/dependency2.php' => array(
+						'Name'            => 'Dependency 2',
+						'RequiresPlugins' => 'dependency',
+					),
+				),
+			),
+			'three plugins'                   => array(
+				'plugin_to_check' => 'dependency/dependency.php',
+				'plugins'         => array(
+					'dependency/dependency.php'   => array(
+						'Name'            => 'Dependency 1',
+						'RequiresPlugins' => 'dependency2',
+					),
+					'dependency2/dependency2.php' => array(
+						'Name'            => 'Dependency 2',
+						'RequiresPlugins' => 'dependency3',
+					),
+					'dependency3/dependency3.php' => array(
+						'Name'            => 'Dependency 3',
+						'RequiresPlugins' => 'dependency',
+					),
+				),
+			),
+			'four plugins'                    => array(
+				'plugin_to_check' => 'dependency/dependency.php',
+				'plugins'         => array(
+					'dependency/dependency.php'   => array(
+						'Name'            => 'Dependency 1',
+						'RequiresPlugins' => 'dependency4',
+					),
+					'dependency2/dependency2.php' => array(
+						'Name'            => 'Dependency 2',
+						'RequiresPlugins' => 'dependency3',
+					),
+					'dependency3/dependency3.php' => array(
+						'Name'            => 'Dependency 3',
+						'RequiresPlugins' => 'dependency',
+					),
+					'dependency4/dependency4.php' => array(
+						'Name'            => 'Dependency 4',
+						'RequiresPlugins' => 'dependency2',
+					),
+				),
+			),
+		);
+	}
+
+	/**
+	 * Tests that a plugin with no circular dependencies will return false.
+	 *
+	 * @ticket 22316
+	 */
+	public function test_should_return_false_when_a_plugin_has_no_circular_dependency() {
+		$this->set_property_value(
+			'plugins',
+			array(
+				'dependency/dependency.php' => array(
+					'Name'            => 'Dependency 1',
+					'RequiresPlugins' => 'dependency2',
+				),
+			)
+		);
+
+		self::$instance::initialize();
+
+		$this->assertFalse( self::$instance::has_circular_dependency( 'dependent/dependent.php' ) );
+	}
+}
diff --git a/tests/admin/plugin-dependencies/hasDependencies.php b/tests/admin/plugin-dependencies/hasDependencies.php
new file mode 100644
index 0000000000..bd59b6acfe
--- /dev/null
+++ b/tests/admin/plugin-dependencies/hasDependencies.php
@@ -0,0 +1,37 @@
+<?php
+/**
+ * Tests for the WP_Plugin_Dependencies::has_dependencies() method.
+ *
+ * @package WordPress
+ */
+
+require_once __DIR__ . '/base.php';
+
+/**
+ * @group admin
+ * @group plugins
+ *
+ * @covers WP_Plugin_Dependencies::has_dependencies
+ */
+class Tests_Admin_WPPluginDependencies_HasDependencies extends WP_PluginDependencies_UnitTestCase {
+
+	/**
+	 * Tests that a plugin with dependencies will return true.
+	 *
+	 * @ticket 22316
+	 */
+	public function test_should_return_true_when_a_plugin_has_dependencies() {
+		$this->set_property_value( 'dependencies', array( 'dependent/dependent.php' => array() ) );
+		$this->assertTrue( self::$instance::has_dependencies( 'dependent/dependent.php' ) );
+	}
+
+	/**
+	 * Tests that a plugin with no dependencies will return false.
+	 *
+	 * @ticket 22316
+	 */
+	public function test_should_return_false_when_a_plugin_has_no_dependencies() {
+		$this->set_property_value( 'dependencies', array( 'dependent2/dependent2.php' => array() ) );
+		$this->assertFalse( self::$instance::has_dependencies( 'dependent/dependent.php' ) );
+	}
+}
diff --git a/tests/admin/plugin-dependencies/hasDependents.php b/tests/admin/plugin-dependencies/hasDependents.php
new file mode 100644
index 0000000000..43093537ba
--- /dev/null
+++ b/tests/admin/plugin-dependencies/hasDependents.php
@@ -0,0 +1,58 @@
+<?php
+/**
+ * Tests for the WP_Plugin_Dependencies::has_dependents() method.
+ *
+ * @package WordPress
+ */
+
+require_once __DIR__ . '/base.php';
+
+/**
+ * @group admin
+ * @group plugins
+ *
+ * @covers WP_Plugin_Dependencies::has_dependents
+ * @covers WP_Plugin_Dependencies::convert_to_slug
+ */
+class Tests_Admin_WPPluginDependencies_HasDependents extends WP_PluginDependencies_UnitTestCase {
+
+	/**
+	 * Tests that a plugin with dependents will return true.
+	 *
+	 * @ticket 22316
+	 */
+	public function test_should_return_true_when_a_plugin_has_dependents() {
+		$this->set_property_value( 'dependency_slugs', array( 'dependent' ) );
+		$this->assertTrue( self::$instance::has_dependents( 'dependent/dependent.php' ) );
+	}
+
+	/**
+	 * Tests that a single file plugin with dependents will return true.
+	 *
+	 * @ticket 22316
+	 */
+	public function test_should_return_true_when_a_single_file_plugin_has_dependents() {
+		$this->set_property_value( 'dependency_slugs', array( 'dependent' ) );
+		$this->assertTrue( self::$instance::has_dependents( 'dependent.php' ) );
+	}
+
+	/**
+	 * Tests that a plugin with no dependents will return false.
+	 *
+	 * @ticket 22316
+	 */
+	public function test_should_return_false_when_a_plugin_has_no_dependents() {
+		$this->set_property_value( 'dependency_slugs', array( 'dependent2' ) );
+		$this->assertFalse( self::$instance::has_dependents( 'dependent/dependent.php' ) );
+	}
+
+	/**
+	 * Tests that 'hello.php' is converted to 'hello-dolly'.
+	 *
+	 * @ticket 22316
+	 */
+	public function test_should_convert_hellophp_to_hello_dolly() {
+		$this->set_property_value( 'dependency_slugs', array( 'hello-dolly' ) );
+		$this->assertTrue( self::$instance::has_dependents( 'hello.php' ) );
+	}
+}
diff --git a/tests/admin/plugin-dependencies/hasUnmetDependencies.php b/tests/admin/plugin-dependencies/hasUnmetDependencies.php
new file mode 100644
index 0000000000..28ed59354f
--- /dev/null
+++ b/tests/admin/plugin-dependencies/hasUnmetDependencies.php
@@ -0,0 +1,146 @@
+<?php
+/**
+ * Tests for the WP_Plugin_Dependencies::has_unmet_dependencies() method.
+ *
+ * @package WordPress
+ */
+
+require_once __DIR__ . '/base.php';
+
+/**
+ * @group admin
+ * @group plugins
+ *
+ * @covers WP_Plugin_Dependencies::has_unmet_dependencies
+ */
+class Tests_Admin_WPPluginDependencies_HasUnmetDependencies extends WP_PluginDependencies_UnitTestCase {
+
+	/**
+	 * Tests that a plugin with no dependencies will return false.
+	 *
+	 * @ticket 22316
+	 */
+	public function test_should_return_false_when_a_plugin_has_no_dependencies() {
+		$this->set_property_value( 'dependencies', array( 'dependent/dependent.php' => array( 'dependency' ) ) );
+		$this->assertFalse( self::$instance::has_unmet_dependencies( 'dependent2/dependent2.php' ) );
+	}
+
+	/**
+	 * Tests that a plugin whose dependencies are installed and active will return false.
+	 *
+	 * @ticket 22316
+	 */
+	public function test_should_return_false_when_a_plugin_has_no_unmet_dependencies() {
+		$this->set_property_value(
+			'dependencies',
+			array( 'dependent/dependent.php' => array( 'dependency' ) )
+		);
+
+		$this->set_property_value(
+			'dependency_filepaths',
+			array( 'dependency' => 'dependency/dependency.php' )
+		);
+
+		update_option( 'active_plugins', array( 'dependency/dependency.php' ) );
+
+		$this->assertFalse( self::$instance::has_unmet_dependencies( 'dependent/dependent.php' ) );
+	}
+
+	/**
+	 * Tests that a plugin with a dependency that is not installed will return true.
+	 *
+	 * @ticket 22316
+	 */
+	public function test_should_return_true_when_a_plugin_has_a_dependency_that_is_not_installed() {
+		self::$instance::initialize();
+		$this->set_property_value(
+			'dependencies',
+			array( 'dependent/dependent.php' => array( 'dependency' ) )
+		);
+
+		$this->assertTrue( self::$instance::has_unmet_dependencies( 'dependent/dependent.php' ) );
+	}
+
+	/**
+	 * Tests that a plugin with a dependency that is inactive will return true.
+	 *
+	 * @ticket 22316
+	 */
+	public function test_should_return_true_when_a_plugin_has_a_dependency_that_is_inactive() {
+		$this->set_property_value(
+			'dependencies',
+			array( 'dependent/dependent.php' => array( 'dependency' ) )
+		);
+
+		$this->set_property_value(
+			'dependency_filepaths',
+			array( 'dependency' => 'dependency/dependency.php' )
+		);
+
+		$this->assertTrue( self::$instance::has_unmet_dependencies( 'dependent/dependent.php' ) );
+	}
+
+	/**
+	 * Tests that a plugin with one dependency that is active and one dependency that is inactive will return true.
+	 *
+	 * @ticket 22316
+	 */
+	public function test_should_return_true_when_a_plugin_has_one_active_dependency_and_one_inactive_dependency() {
+		$this->set_property_value(
+			'dependencies',
+			array( 'dependent/dependent.php' => array( 'dependency', 'dependency2' ) )
+		);
+
+		$this->set_property_value(
+			'dependency_filepaths',
+			array(
+				'dependency'  => 'dependency/dependency.php',
+				'dependency2' => 'dependency2/dependency2.php',
+			)
+		);
+
+		update_option( 'active_plugins', array( 'dependency/dependency.php' ) );
+
+		$this->assertTrue( self::$instance::has_unmet_dependencies( 'dependent/dependent.php' ) );
+	}
+
+	/**
+	 * Tests that a plugin with one dependency that is active and one dependency that is not installed will return true.
+	 *
+	 * @ticket 22316
+	 */
+	public function test_should_return_true_when_a_plugin_has_one_active_dependency_and_one_that_is_not_installed() {
+		$this->set_property_value(
+			'dependencies',
+			array( 'dependent/dependent.php' => array( 'dependency', 'dependency2' ) )
+		);
+
+		$this->set_property_value(
+			'dependency_filepaths',
+			array( 'dependency' => 'dependency/dependency.php' )
+		);
+
+		update_option( 'active_plugins', array( 'dependency/dependency.php' ) );
+
+		$this->assertTrue( self::$instance::has_unmet_dependencies( 'dependent/dependent.php' ) );
+	}
+
+	/**
+	 * Tests that a plugin with one dependency that is inactive and one dependency that is not installed will return true.
+	 *
+	 * @ticket 22316
+	 */
+	public function test_should_return_true_when_a_plugin_has_one_inactive_dependency_and_one_that_is_not_installed() {
+		$this->set_property_value(
+			'dependencies',
+			array( 'dependent/dependent.php' => array( 'dependency', 'dependency2' ) )
+		);
+
+		$this->set_property_value(
+			'dependency_filepaths',
+			array( 'dependency' => 'dependency/dependency.php' )
+		);
+
+		$this->assertTrue( self::$instance::has_unmet_dependencies( 'dependent/dependent.php' ) );
+	}
+}
diff --git a/tests/admin/plugin-dependencies/initialize.php b/tests/admin/plugin-dependencies/initialize.php
new file mode 100644
index 0000000000..375e30c4bd
--- /dev/null
+++ b/tests/admin/plugin-dependencies/initialize.php
@@ -0,0 +1,303 @@
+<?php
+/**
+ * Tests for the WP_Plugin_Dependencies::initialize() method.
+ *
+ * @package WordPress
+ */
+
+require_once __DIR__ . '/base.php';
+
+/**
+ * @group admin
+ * @group plugins
+ *
+ * @covers WP_Plugin_Dependencies::initialize
+ */
+class Tests_Admin_WPPluginDependencies_Initialize extends WP_PluginDependencies_UnitTestCase {
+
+	/**
+	 * Tests that initialization runs only once.
+	 *
+	 * @ticket 60457
+	 *
+	 * @dataProvider data_static_properties_set_during_initialization
+	 *
+	 * @param string $property_name The name of the property to check.
+	 */
+	public function test_should_only_initialize_once( $property_name ) {
+		$this->assertFalse(
+			$this->get_property_value( 'initialized' ),
+			'Plugin Dependencies has already been initialized.'
+		);
+
+		self::$instance->initialize();
+
+		$this->assertTrue(
+			$this->get_property_value( 'initialized' ),
+			'"initialized" was not set to true during initialization.'
+		);
+
+		$default_value = self::$static_properties[ $property_name ];
+
+		$this->assertNotSame(
+			$default_value,
+			$this->get_property_value( $property_name ),
+			"\"{$property_name}\" was not set during initialization."
+		);
+
+		// Reset it to its default.
+		$this->set_property_value( $property_name, self::$static_properties[ $property_name ] );
+
+		self::$instance->initialize();
+
+		$this->assertSame(
+			$default_value,
+			$this->get_property_value( $property_name ),
+			"\"{$property_name}\" was set during the second initialization attempt."
+		);
+	}
+
+	/**
+	 * Data provider.
+	 *
+	 * @return array[]
+	 */
+	public function data_static_properties_set_during_initialization() {
+		/*
+		 * This does not include 'dependency_api_data' as it is only set
+		 * on certain pages. This is tested later.
+		 */
+		return self::text_array_to_dataprovider(
+			array(
+				'plugins',
+				'dependencies',
+				'dependency_slugs',
+				'dependent_slugs',
+			)
+		);
+	}
+
+	/**
+	 * Tests that `$dependency_api_data` is set on certain screens.
+	 *
+	 * @ticket 22316
+	 *
+	 * @covers WP_Plugin_Dependencies::get_dependency_api_data
+	 * @covers WP_Plugin_Dependencies::get_plugins
+	 *
+	 * @dataProvider data_screens
+	 *
+	 * @global string $pagenow The filename of the current screen.
+	 *
+	 * @param string $screen The screen file.
+	 */
+	public function test_should_set_dependency_api_data_on_certain_screens( $screen ) {
+		global $pagenow;
+
+		// Backup $pagenow.
+		$old_pagenow = $pagenow;
+
+		// Ensure is_admin() and screen checks pass.
+		$pagenow = $screen;
+		set_current_screen( $screen );
+
+		self::$instance::initialize();
+
+		// Restore $pagenow.
+		$pagenow = $old_pagenow;
+
+		$dependency_api_data = $this->get_property_value( 'dependency_api_data' );
+
+		$this->assertIsArray( $dependency_api_data, '$dependency_api_data is not an array.' );
+		$this->assertEmpty( $dependency_api_data, '$dependency_api_data is not empty.' );
+	}
+
+	/**
+	 * Data provider.
+	 *
+	 * @return array[]
+	 */
+	public function data_screens() {
+		return array(
+			'plugins.php'        => array(
+				'screen' => 'plugins.php',
+			),
+			'plugin-install.php' => array(
+				'screen' => 'plugin-install.php',
+			),
+		);
+	}
+
+	/**
+	 * Tests that `$dependency_api_data` is not set by default.
+	 *
+	 * @ticket 22316
+	 *
+	 * @covers WP_Plugin_Dependencies::get_dependency_api_data
+	 */
+	public function test_should_not_set_dependency_api_data() {
+		self::$instance::initialize();
+
+		$dependency_api_data = $this->get_property_value( 'dependency_api_data' );
+
+		$this->assertNull( $dependency_api_data, '$dependency_api_data was set.' );
+	}
+
+	/**
+	 * Tests that dependency slugs are loaded and sanitized.
+	 *
+	 * @ticket 22316
+	 *
+	 * @covers WP_Plugin_Dependencies::read_dependencies_from_plugin_headers
+	 * @covers WP_Plugin_Dependencies::sanitize_dependency_slugs
+	 *
+	 * @dataProvider data_should_sanitize_slugs
+	 *
+	 * @param string $requires_plugins The unsanitized dependency slug(s).
+	 * @param array  $expected         Optional. The sanitized dependency slug(s). Default empty array.
+	 */
+	public function test_initialize_should_load_and_sanitize_dependency_slugs_from_plugin_headers( $requires_plugins, $expected = array() ) {
+		$this->set_property_value( 'plugins', array( 'dependent/dependent.php' => array( 'RequiresPlugins' => $requires_plugins ) ) );
+		self::$instance->initialize();
+		$this->assertSame( $expected, $this->get_property_value( 'dependency_slugs' ) );
+	}
+
+	/**
+	 * Data provider.
+	 *
+	 * @return array[]
+	 */
+	public function data_should_sanitize_slugs() {
+		return array(
+			// Valid slugs.
+			'one dependency'                         => array(
+				'requires_plugins' => 'hello-dolly',
+				'expected'         => array( 'hello-dolly' ),
+			),
+			'two dependencies in alphabetical order' => array(
+				'requires_plugins' => 'hello-dolly, woocommerce',
+				'expected'         => array(
+					'hello-dolly',
+					'woocommerce',
+				),
+			),
+			'two dependencies in reverse alphabetical order' => array(
+				'requires_plugins' => 'woocommerce, hello-dolly',
+				'expected'         => array(
+					'hello-dolly',
+					'woocommerce',
+				),
+			),
+			'two dependencies with a space'          => array(
+				'requires_plugins' => 'hello-dolly , woocommerce',
+				'expected'         => array(
+					'hello-dolly',
+					'woocommerce',
+				),
+			),
+			'a repeated dependency'                  => array(
+				'requires_plugins' => 'hello-dolly, woocommerce, hello-dolly',
+				'expected'         => array(
+					'hello-dolly',
+					'woocommerce',
+				),
+			),
+			'a dependency with multiple dashes'      => array(
+				'requires_plugins' => 'this-is-a-valid-slug',
+				'expected'         => array( 'this-is-a-valid-slug' ),
+			),
+			'a dependency starting with numbers'     => array(
+				'requires_plugins' => '123slug',
+				'expected'         => array( '123slug' ),
+			),
+			'a dependency with a trailing comma'     => array(
+				'requires_plugins' => 'hello-dolly,',
+				'expected'         => array( 'hello-dolly' ),
+			),
+			'a dependency with a leading comma'      => array(
+				'requires_plugins' => ',hello-dolly',
+				'expected'         => array( 'hello-dolly' ),
+			),
+			'a dependency with leading and trailing commas' => array(
+				'requires_plugins' => ',hello-dolly,',
+				'expected'         => array( 'hello-dolly' ),
+			),
+			'a dependency with a trailing comma and a space' => array(
+				'requires_plugins' => 'hello-dolly, ',
+				'expected'         => array( 'hello-dolly' ),
+			),
+
+			// Invalid or empty slugs.
+			'no dependencies'                        => array(
+				'requires_plugins' => '',
+			),
+			'a dependency with an underscore'        => array(
+				'requires_plugins' => 'hello_dolly',
+			),
+			'a dependency with a space'              => array(
+				'requires_plugins' => 'hello dolly',
+			),
+			'a dependency in quotes'                 => array(
+				'requires_plugins' => '"hello-dolly"',
+			),
+			'two dependencies in quotes'             => array(
+				'requires_plugins' => '"hello-dolly, woocommerce"',
+			),
+			'a dependency with trailing dash'        => array(
+				'requires_plugins' => 'ending-dash-',
+			),
+			'a dependency with leading dash'         => array(
+				'requires_plugins' => '-slug',
+			),
+			'a dependency with double dashes'        => array(
+				'requires_plugins' => 'abc--123',
+			),
+			'cyrillic dependencies'                  => array(
+				'requires_plugins' => 'я-делюсь',
+			),
+			'arabic dependencies'                    => array(
+				'requires_plugins' => 'لينوكس-ويكى',
+			),
+			'chinese dependencies'                   => array(
+				'requires_plugins' => '唐诗宋词chinese-poem,社交登录,腾讯微博一键登录,豆瓣秀-for-wordpress',
+			),
+			'symbol dependencies'                    => array(
+				'requires_plugins' => '★-wpsymbols-★',
+			),
+		);
+	}
+
+	/**
+	 * Tests that dependent files are loaded and slugified.
+	 *
+	 * @ticket 22316
+	 *
+	 * @covers WP_Plugin_Dependencies::read_dependencies_from_plugin_headers
+	 * @covers WP_Plugin_Dependencies::convert_to_slug
+	 */
+	public function test_should_slugify_dependent_files() {
+		$plugins = get_plugins();
+
+		$expected_slugs = array();
+		foreach ( $plugins as $plugin_file => &$headers ) {
+			// Create the expected slugs.
+			if ( 'hello.php' === $plugin_file ) {
+				$slug = 'hello-dolly';
+			} else {
+				$slug = str_replace( '.php', '', explode( '/', $plugin_file )[0] );
+			}
+
+			$expected_slugs[ $plugin_file ] = $slug;
+
+			// While here, ensure the plugins are all dependents.
+			$headers['RequiresPlugins'] = 'dependency';
+		}
+		unset( $headers );
+
+		// Set the plugins property with the plugin data modified to make them dependents.
+		$this->set_property_value( 'plugins', $plugins );
+
+		self::$instance->initialize();
+		$this->assertSame( $expected_slugs, $this->get_property_value( 'dependent_slugs' ) );
+	}
+}
diff --git a/tests/admin/wpAutomaticUpdater.php b/tests/admin/wpAutomaticUpdater.php
index 9eed08e850..db485fe910 100644
--- a/tests/admin/wpAutomaticUpdater.php
+++ b/tests/admin/wpAutomaticUpdater.php
@@ -1,6 +1,7 @@
 <?php
 
 /**
+ * @group admin
  * @group upgrade
  *
  * @covers WP_Automatic_Updater
diff --git a/tests/admin/wpSiteHealth.php b/tests/admin/wpSiteHealth.php
index f8b2e2e0c8..07fe300060 100644
--- a/tests/admin/wpSiteHealth.php
+++ b/tests/admin/wpSiteHealth.php
@@ -1,6 +1,7 @@
 <?php
 
 /**
+ * @group admin
  * @group site-health
  *
  * @coversDefaultClass WP_Site_Health
diff --git a/tests/admin/wpUpgrader.php b/tests/admin/wpUpgrader.php
new file mode 100644
index 0000000000..9de3ed07cd
--- /dev/null
+++ b/tests/admin/wpUpgrader.php
@@ -0,0 +1,1616 @@
+<?php
+/**
+ * Tests the `WP_Upgrader` class.
+ *
+ * @group admin
+ * @group upgrade
+ */
+class Tests_Admin_WpUpgrader extends WP_UnitTestCase {
+
+	/**
+	 * An instance of the WP_Upgrader class being tested.
+	 *
+	 * @var WP_Upgrader
+	 */
+	private static $instance;
+
+	/**
+	 * @var WP_Upgrader_Skin&PHPUnit\Framework\MockObject\MockObject
+	 */
+	private static $upgrader_skin_mock;
+
+	/**
+	 * Filesystem mock.
+	 *
+	 * @var WP_Filesystem_Base&PHPUnit\Framework\MockObject\MockObject
+	 */
+	private static $wp_filesystem_mock;
+
+	/**
+	 * A backup of the existing 'wp_filesystem' global.
+	 *
+	 * @var mixed|null
+	 */
+	private static $wp_filesystem_backup = null;
+
+	/**
+	 * Loads the class to be tested.
+	 */
+	public static function set_up_before_class() {
+		parent::set_up_before_class();
+
+		require_once ABSPATH . 'wp-admin/includes/class-wp-upgrader.php';
+		require_once ABSPATH . 'wp-admin/includes/class-wp-filesystem-base.php';
+	}
+
+	/**
+	 * Sets up the class instance and mocks needed for each test.
+	 */
+	public function set_up() {
+		parent::set_up();
+
+		self::$upgrader_skin_mock = $this->getMockBuilder( 'WP_Upgrader_Skin' )->getMock();
+
+		self::$instance = new WP_Upgrader( self::$upgrader_skin_mock );
+
+		self::$wp_filesystem_mock = $this->getMockBuilder( 'WP_Filesystem_Base' )->getMock();
+
+		if ( array_key_exists( 'wp_filesystem', $GLOBALS ) ) {
+			self::$wp_filesystem_backup = $GLOBALS['wp_filesystem'];
+		}
+
+		$GLOBALS['wp_filesystem'] = self::$wp_filesystem_mock;
+	}
+
+	/**
+	 * Cleans up after each test.
+	 */
+	public function tear_down() {
+		if ( null !== self::$wp_filesystem_backup ) {
+			$GLOBALS['wp_filesystem'] = self::$wp_filesystem_backup;
+		} else {
+			unset( $GLOBALS['wp_filesystem'] );
+		}
+
+		parent::tear_down();
+	}
+
+	/**
+	 * Tests that `WP_Upgrader::__construct()` creates a skin when one is not
+	 * passed to the constructor.
+	 *
+	 * @ticket 54245
+	 *
+	 * @covers WP_Upgrader::__construct
+	 */
+	public function test_constructor_should_create_skin_when_one_is_not_provided() {
+		$instance = new WP_Upgrader();
+
+		$this->assertInstanceOf( WP_Upgrader_Skin::class, $instance->skin );
+	}
+
+	/**
+	 * Tests that `WP_Upgrader::init()` calls `WP_Upgrader::set_upgrader()`.
+	 *
+	 * @ticket 54245
+	 *
+	 * @covers WP_Upgrader::init
+	 */
+	public function test_init_should_call_set_upgrader() {
+		self::$upgrader_skin_mock->expects( $this->once() )->method( 'set_upgrader' )->with( self::$instance );
+		self::$instance->init();
+	}
+
+	/**
+	 * Tests that `WP_Upgrader::init()` initializes the `$strings` property.
+	 *
+	 * @ticket 54245
+	 *
+	 * @covers WP_Upgrader::init
+	 * @covers WP_Upgrader::generic_strings
+	 *
+	 * @dataProvider data_init_should_initialize_strings
+	 *
+	 * @param string $key The key to check.
+	 */
+	public function test_init_should_initialize_strings( $key ) {
+		$this->assertEmpty( self::$instance->strings, '"$strings" has already been initialized' );
+
+		self::$instance->init();
+
+		$this->assertArrayHasKey( $key, self::$instance->strings, "The '$key' key was not created" );
+	}
+
+	/**
+	 * Data provider.
+	 *
+	 * @return array[]
+	 */
+	public function data_init_should_initialize_strings() {
+		return self::text_array_to_dataprovider(
+			array(
+				'bad_request',
+				'fs_unavailable',
+				'fs_error',
+				'fs_no_root_dir',
+				'fs_no_content_dir',
+				'fs_no_plugins_dir',
+				'fs_no_themes_dir',
+				'fs_no_folder',
+				'download_failed',
+				'installing_package',
+				'no_files',
+				'folder_exists',
+				'mkdir_failed',
+				'incompatible_archive',
+				'files_not_writable',
+				'maintenance_start',
+				'maintenance_end',
+				'temp_backup_mkdir_failed',
+				'temp_backup_move_failed',
+				'temp_backup_restore_failed',
+				'temp_backup_delete_failed',
+			)
+		);
+	}
+
+	/**
+	 * Tests that `WP_Upgrader::flatten_dirlist()` returns the expected file list.
+	 *
+	 * @ticket 54245
+	 *
+	 * @dataProvider data_should_flatten_dirlist
+	 *
+	 * @covers WP_Upgrader::flatten_dirlist
+	 *
+	 * @param array  $expected     The expected flattened dirlist.
+	 * @param array  $nested_files Array of files as returned by WP_Filesystem_Base::dirlist().
+	 * @param string $path         Optional. Relative path to prepend to child nodes. Default empty string.
+	 */
+	public function test_flatten_dirlist_should_flatten_the_provided_directory_list( $expected, $nested_files, $path = '' ) {
+		$flatten_dirlist = new ReflectionMethod( self::$instance, 'flatten_dirlist' );
+		$flatten_dirlist->setAccessible( true );
+		$actual = $flatten_dirlist->invoke( self::$instance, $nested_files, $path );
+		$flatten_dirlist->setAccessible( false );
+
+		$this->assertSameSetsWithIndex( $expected, $actual );
+	}
+
+	/**
+	 * Data provider.
+	 *
+	 * @return array[]
+	 */
+	public function data_should_flatten_dirlist() {
+		return array(
+			'empty array, default path'       => array(
+				'expected'     => array(),
+				'nested_files' => array(),
+			),
+			'root only'                       => array(
+				'expected'     => array(
+					'file1.php' => array( 'name' => 'file1.php' ),
+					'file2.php' => array( 'name' => 'file2.php' ),
+				),
+				'nested_files' => array(
+					'file1.php' => array( 'name' => 'file1.php' ),
+					'file2.php' => array( 'name' => 'file2.php' ),
+				),
+			),
+			'root only and custom path'       => array(
+				'expected'     => array(
+					'custom_path/file1.php' => array( 'name' => 'file1.php' ),
+					'custom_path/file2.php' => array( 'name' => 'file2.php' ),
+				),
+				'nested_files' => array(
+					'file1.php' => array( 'name' => 'file1.php' ),
+					'file2.php' => array( 'name' => 'file2.php' ),
+				),
+				'path'         => 'custom_path/',
+			),
+			'one level deep'                  => array(
+				'expected'     => array(
+					'subdir1'              => array(
+						'files' => array(
+							'subfile1.php' => array( 'name' => 'subfile1.php' ),
+							'subfile2.php' => array( 'name' => 'subfile2.php' ),
+						),
+					),
+					'subdir2'              => array(
+						'files' => array(
+							'subfile3.php' => array( 'name' => 'subfile3.php' ),
+							'subfile4.php' => array( 'name' => 'subfile4.php' ),
+						),
+					),
+					'subdir1/subfile1.php' => array( 'name' => 'subfile1.php' ),
+					'subdir1/subfile2.php' => array( 'name' => 'subfile2.php' ),
+					'subdir2/subfile3.php' => array( 'name' => 'subfile3.php' ),
+					'subdir2/subfile4.php' => array( 'name' => 'subfile4.php' ),
+				),
+				'nested_files' => array(
+					'subdir1' => array(
+						'files' => array(
+							'subfile1.php' => array( 'name' => 'subfile1.php' ),
+							'subfile2.php' => array( 'name' => 'subfile2.php' ),
+						),
+					),
+					'subdir2' => array(
+						'files' => array(
+							'subfile3.php' => array( 'name' => 'subfile3.php' ),
+							'subfile4.php' => array( 'name' => 'subfile4.php' ),
+						),
+					),
+				),
+			),
+			'one level deep and numeric keys' => array(
+				'expected'     => array(
+					'subdir1'   => array(
+						'files' => array(
+							0 => array( 'name' => '0' ),
+							1 => array( 'name' => '1' ),
+						),
+					),
+					'subdir2'   => array(
+						'files' => array(
+							2 => array( 'name' => '2' ),
+							3 => array( 'name' => '3' ),
+						),
+					),
+					'subdir1/0' => array( 'name' => '0' ),
+					'subdir1/1' => array( 'name' => '1' ),
+					'subdir2/2' => array( 'name' => '2' ),
+					'subdir2/3' => array( 'name' => '3' ),
+				),
+				'nested_files' => array(
+					'subdir1' => array(
+						'files' => array(
+							'0' => array( 'name' => '0' ),
+							'1' => array( 'name' => '1' ),
+						),
+					),
+					'subdir2' => array(
+						'files' => array(
+							'2' => array( 'name' => '2' ),
+							'3' => array( 'name' => '3' ),
+						),
+					),
+				),
+			),
+			'one level deep and custom path'  => array(
+				'expected'     => array(
+					'custom_path/subdir1'              => array(
+						'files' => array(
+							'subfile1.php' => array( 'name' => 'subfile1.php' ),
+							'subfile2.php' => array( 'name' => 'subfile2.php' ),
+						),
+					),
+					'custom_path/subdir2'              => array(
+						'files' => array(
+							'subfile3.php' => array( 'name' => 'subfile3.php' ),
+							'subfile4.php' => array( 'name' => 'subfile4.php' ),
+						),
+					),
+					'custom_path/subdir1/subfile1.php' => array(
+						'name' => 'subfile1.php',
+					),
+					'custom_path/subdir1/subfile2.php' => array(
+						'name' => 'subfile2.php',
+					),
+					'custom_path/subdir2/subfile3.php' => array(
+						'name' => 'subfile3.php',
+					),
+					'custom_path/subdir2/subfile4.php' => array(
+						'name' => 'subfile4.php',
+					),
+				),
+				'nested_files' => array(
+					'subdir1' => array(
+						'files' => array(
+							'subfile1.php' => array( 'name' => 'subfile1.php' ),
+							'subfile2.php' => array( 'name' => 'subfile2.php' ),
+						),
+					),
+					'subdir2' => array(
+						'files' => array(
+							'subfile3.php' => array( 'name' => 'subfile3.php' ),
+							'subfile4.php' => array( 'name' => 'subfile4.php' ),
+						),
+					),
+				),
+				'path'         => 'custom_path/',
+			),
+			'two levels deep'                 => array(
+				'expected'     => array(
+					'subdir1'                            => array(
+						'files' => array(
+							'subfile1.php' => array(
+								'name' => 'subfile1.php',
+							),
+							'subfile2.php' => array(
+								'name' => 'subfile2.php',
+							),
+							'subsubdir1'   => array(
+								'files' => array(
+									'subsubfile1.php' => array(
+										'name' => 'subsubfile1.php',
+									),
+									'subsubfile2.php' => array(
+										'name' => 'subsubfile2.php',
+									),
+								),
+							),
+						),
+					),
+					'subdir1/subfile1.php'               => array(
+						'name' => 'subfile1.php',
+					),
+					'subdir1/subfile2.php'               => array(
+						'name' => 'subfile2.php',
+					),
+					'subdir1/subsubdir1'                 => array(
+						'files' => array(
+							'subsubfile1.php' => array(
+								'name' => 'subsubfile1.php',
+							),
+							'subsubfile2.php' => array(
+								'name' => 'subsubfile2.php',
+							),
+						),
+					),
+					'subdir1/subsubdir1/subsubfile1.php' => array(
+						'name' => 'subsubfile1.php',
+					),
+					'subdir1/subsubdir1/subsubfile2.php' => array(
+						'name' => 'subsubfile2.php',
+					),
+					'subdir2'                            => array(
+						'files' => array(
+							'subfile3.php' => array( 'name' => 'subfile3.php' ),
+							'subfile4.php' => array( 'name' => 'subfile4.php' ),
+							'subsubdir2'   => array(
+								'files' => array(
+									'subsubfile3.php' => array(
+										'name' => 'subsubfile3.php',
+									),
+									'subsubfile4.php' => array(
+										'name' => 'subsubfile4.php',
+									),
+								),
+							),
+						),
+					),
+					'subdir2/subfile3.php'               => array(
+						'name' => 'subfile3.php',
+					),
+					'subdir2/subfile4.php'               => array(
+						'name' => 'subfile4.php',
+					),
+					'subdir2/subsubdir2'                 => array(
+						'files' => array(
+							'subsubfile3.php' => array(
+								'name' => 'subsubfile3.php',
+							),
+							'subsubfile4.php' => array(
+								'name' => 'subsubfile4.php',
+							),
+						),
+					),
+					'subdir2/subsubdir2/subsubfile3.php' => array(
+						'name' => 'subsubfile3.php',
+					),
+					'subdir2/subsubdir2/subsubfile4.php' => array(
+						'name' => 'subsubfile4.php',
+					),
+				),
+				'nested_files' => array(
+					'subdir1' => array(
+						'files' => array(
+							'subfile1.php' => array( 'name' => 'subfile1.php' ),
+							'subfile2.php' => array( 'name' => 'subfile2.php' ),
+							'subsubdir1'   => array(
+								'files' => array(
+									'subsubfile1.php' => array(
+										'name' => 'subsubfile1.php',
+									),
+									'subsubfile2.php' => array(
+										'name' => 'subsubfile2.php',
+									),
+								),
+							),
+						),
+					),
+					'subdir2' => array(
+						'files' => array(
+							'subfile3.php' => array( 'name' => 'subfile3.php' ),
+							'subfile4.php' => array( 'name' => 'subfile4.php' ),
+							'subsubdir2'   => array(
+								'files' => array(
+									'subsubfile3.php' => array(
+										'name' => 'subsubfile3.php',
+									),
+									'subsubfile4.php' => array(
+										'name' => 'subsubfile4.php',
+									),
+								),
+							),
+						),
+					),
+				),
+			),
+			'two levels deep and custom path' => array(
+				'expected'     => array(
+					'custom_path/subdir1'              => array(
+						'files' => array(
+							'subfile1.php' => array(
+								'name' => 'subfile1.php',
+							),
+							'subfile2.php' => array(
+								'name' => 'subfile2.php',
+							),
+							'subsubdir1'   => array(
+								'files' => array(
+									'subsubfile1.php' => array(
+										'name' => 'subsubfile1.php',
+									),
+									'subsubfile2.php' => array(
+										'name' => 'subsubfile2.php',
+									),
+								),
+							),
+						),
+					),
+					'custom_path/subdir1/subfile1.php' => array(
+						'name' => 'subfile1.php',
+					),
+					'custom_path/subdir1/subfile2.php' => array(
+						'name' => 'subfile2.php',
+					),
+					'custom_path/subdir1/subsubdir1'   => array(
+						'files' => array(
+							'subsubfile1.php' => array(
+								'name' => 'subsubfile1.php',
+							),
+							'subsubfile2.php' => array(
+								'name' => 'subsubfile2.php',
+							),
+						),
+					),
+					'custom_path/subdir1/subsubdir1/subsubfile1.php' => array(
+						'name' => 'subsubfile1.php',
+					),
+					'custom_path/subdir1/subsubdir1/subsubfile2.php' => array(
+						'name' => 'subsubfile2.php',
+					),
+					'custom_path/subdir2'              => array(
+						'files' => array(
+							'subfile3.php' => array( 'name' => 'subfile3.php' ),
+							'subfile4.php' => array( 'name' => 'subfile4.php' ),
+							'subsubdir2'   => array(
+								'files' => array(
+									'subsubfile3.php' => array(
+										'name' => 'subsubfile3.php',
+									),
+									'subsubfile4.php' => array(
+										'name' => 'subsubfile4.php',
+									),
+								),
+							),
+						),
+					),
+					'custom_path/subdir2/subfile3.php' => array(
+						'name' => 'subfile3.php',
+					),
+					'custom_path/subdir2/subfile4.php' => array(
+						'name' => 'subfile4.php',
+					),
+					'custom_path/subdir2/subsubdir2'   => array(
+						'files' => array(
+							'subsubfile3.php' => array(
+								'name' => 'subsubfile3.php',
+							),
+							'subsubfile4.php' => array(
+								'name' => 'subsubfile4.php',
+							),
+						),
+					),
+					'custom_path/subdir2/subsubdir2/subsubfile3.php' => array(
+						'name' => 'subsubfile3.php',
+					),
+					'custom_path/subdir2/subsubdir2/subsubfile4.php' => array(
+						'name' => 'subsubfile4.php',
+					),
+				),
+				'nested_files' => array(
+					'subdir1' => array(
+						'files' => array(
+							'subfile1.php' => array( 'name' => 'subfile1.php' ),
+							'subfile2.php' => array( 'name' => 'subfile2.php' ),
+							'subsubdir1'   => array(
+								'files' => array(
+									'subsubfile1.php' => array(
+										'name' => 'subsubfile1.php',
+									),
+									'subsubfile2.php' => array(
+										'name' => 'subsubfile2.php',
+									),
+								),
+							),
+						),
+					),
+					'subdir2' => array(
+						'files' => array(
+							'subfile3.php' => array( 'name' => 'subfile3.php' ),
+							'subfile4.php' => array( 'name' => 'subfile4.php' ),
+							'subsubdir2'   => array(
+								'files' => array(
+									'subsubfile3.php' => array(
+										'name' => 'subsubfile3.php',
+									),
+									'subsubfile4.php' => array(
+										'name' => 'subsubfile4.php',
+									),
+								),
+							),
+						),
+					),
+				),
+				'path'         => 'custom_path/',
+			),
+		);
+	}
+
+	/**
+	 * Tests that `WP_Upgrader::clear_destination()` returns early with `true`
+	 * when the destination does not exist.
+	 *
+	 * @ticket 54245
+	 *
+	 * @covers WP_Upgrader::clear_destination
+	 */
+	public function test_clear_destination_should_return_early_when_the_destination_does_not_exist() {
+		self::$wp_filesystem_mock->expects( $this->never() )->method( 'is_writable' );
+		self::$wp_filesystem_mock->expects( $this->never() )->method( 'chmod' );
+		self::$wp_filesystem_mock->expects( $this->never() )->method( 'delete' );
+
+		$destination = DIR_TESTDATA . '/upgrade/';
+
+		self::$wp_filesystem_mock
+				->expects( $this->once() )
+				->method( 'dirlist' )
+				->with( $destination )
+				->willReturn( false );
+
+		$this->assertTrue( self::$instance->clear_destination( $destination ) );
+	}
+
+	/**
+	 * Tests that `WP_Upgrader::clear_destination()` clears
+	 * the destination directory.
+	 *
+	 * @ticket 54245
+	 *
+	 * @covers WP_Upgrader::clear_destination
+	 */
+	public function test_clear_destination_should_clear_the_destination_directory() {
+		$destination = DIR_TESTDATA . '/upgrade/';
+
+		self::$wp_filesystem_mock
+				->expects( $this->once() )
+				->method( 'dirlist' )
+				->with( $destination )
+				->willReturn( array() );
+
+		self::$wp_filesystem_mock
+				->expects( $this->once() )
+				->method( 'delete' )
+				->with( $destination )
+				->willReturn( true );
+
+		$this->assertTrue( self::$instance->clear_destination( $destination ) );
+	}
+
+	/**
+	 * Tests that `WP_Upgrader::clear_destination()` returns a WP_Error object
+	 * if files are not writable.
+	 *
+	 * This test runs in a separate process so that it can define
+	 * constants without impacting other tests.
+	 *
+	 * This test does not preserve global state to prevent the exception
+	 * "Serialization of 'Closure' is not allowed." when running in a
+	 * separate process.
+	 *
+	 * @ticket 54245
+	 *
+	 * @covers WP_Upgrader::clear_destination
+	 *
+	 * @runInSeparateProcess
+	 * @preserveGlobalState disabled
+	 */
+	public function test_clear_destination_should_return_wp_error_if_files_are_not_writable() {
+		define( 'FS_CHMOD_FILE', 0644 );
+		define( 'FS_CHMOD_DIR', 0755 );
+
+		self::$instance->generic_strings();
+
+		self::$wp_filesystem_mock->expects( $this->never() )->method( 'delete' );
+
+		$destination = DIR_TESTDATA . '/upgrade/';
+		$dirlist     = array(
+			'file1.php' => array(
+				'name' => 'file1.php',
+				'type' => 'f',
+			),
+			'subdir'    => array(
+				'name' => 'subdir',
+				'type' => 'd',
+			),
+		);
+
+		self::$wp_filesystem_mock
+				->expects( $this->once() )
+				->method( 'dirlist' )
+				->with( $destination )
+				->willReturn( $dirlist );
+
+		$unwritable_checks = array(
+			array( $destination . 'file1.php' ),
+			array( $destination . 'file1.php' ),
+			array( $destination . 'subdir' ),
+			array( $destination . 'subdir' ),
+		);
+
+		self::$wp_filesystem_mock
+				->expects( $this->exactly( 4 ) )
+				->method( 'is_writable' )
+				->withConsecutive( ...$unwritable_checks )
+				->willReturn( false );
+
+		$actual = self::$instance->clear_destination( $destination );
+
+		$this->assertWPError(
+			$actual,
+			'WP_Upgrader::clear_destination() did not return a WP_Error object'
+		);
+
+		$this->assertSame(
+			'files_not_writable',
+			$actual->get_error_code(),
+			'Unexpected WP_Error code'
+		);
+
+		$this->assertSameSets(
+			array( 'file1.php, subdir' ),
+			$actual->get_all_error_data(),
+			'Unexpected WP_Error data'
+		);
+	}
+
+	/**
+	 * Tests that `WP_Upgrader::install_package()` returns a WP_Error object
+	 * when an invalid source is passed.
+	 *
+	 * @ticket 54245
+	 *
+	 * @covers WP_Upgrader::install_package
+	 *
+	 * @dataProvider data_install_package_invalid_paths
+	 *
+	 * @param mixed $path The path to test.
+	 */
+	public function test_install_package_should_return_wp_error_with_invalid_source( $path ) {
+		self::$instance->generic_strings();
+
+		self::$upgrader_skin_mock->expects( $this->never() )->method( 'feedback' );
+		self::$wp_filesystem_mock->expects( $this->never() )->method( 'dirlist' );
+		self::$wp_filesystem_mock->expects( $this->never() )->method( 'find_folder' );
+		self::$wp_filesystem_mock->expects( $this->never() )->method( 'is_dir' );
+		self::$wp_filesystem_mock->expects( $this->never() )->method( 'exists' );
+		self::$wp_filesystem_mock->expects( $this->never() )->method( 'delete' );
+		self::$wp_filesystem_mock->expects( $this->never() )->method( 'mkdir' );
+
+		$args = array(
+			'source'      => $path,
+			'destination' => '/',
+		);
+
+		$actual = self::$instance->install_package( $args );
+
+		$this->assertWPError(
+			$actual,
+			'WP_Upgrader::install_package() did not return a WP_Error object'
+		);
+
+		$this->assertSame(
+			'bad_request',
+			$actual->get_error_code(),
+			'Unexpected WP_Error code'
+		);
+	}
+
+	/**
+	 * Tests that `WP_Upgrader::install_package()` returns a WP_Error object
+	 * when an invalid destination is passed.
+	 *
+	 * @ticket 54245
+	 *
+	 * @covers WP_Upgrader::install_package
+	 *
+	 * @dataProvider data_install_package_invalid_paths
+	 *
+	 * @param mixed $path The path to test.
+	 */
+	public function test_install_package_should_return_wp_error_with_invalid_destination( $path ) {
+		self::$instance->generic_strings();
+
+		self::$upgrader_skin_mock->expects( $this->never() )->method( 'feedback' );
+		self::$wp_filesystem_mock->expects( $this->never() )->method( 'dirlist' );
+		self::$wp_filesystem_mock->expects( $this->never() )->method( 'find_folder' );
+		self::$wp_filesystem_mock->expects( $this->never() )->method( 'is_dir' );
+		self::$wp_filesystem_mock->expects( $this->never() )->method( 'exists' );
+		self::$wp_filesystem_mock->expects( $this->never() )->method( 'delete' );
+		self::$wp_filesystem_mock->expects( $this->never() )->method( 'mkdir' );
+
+		$args = array(
+			'source'      => '/',
+			'destination' => $path,
+		);
+
+		$actual = self::$instance->install_package( $args );
+
+		$this->assertWPError(
+			$actual,
+			'WP_Upgrader::install_package() did not return a WP_Error object'
+		);
+
+		$this->assertSame(
+			'bad_request',
+			$actual->get_error_code(),
+			'Unexpected WP_Error code'
+		);
+	}
+
+	/**
+	 * Data provider.
+	 *
+	 * @return array[]
+	 */
+	public function data_install_package_invalid_paths() {
+		return array(
+			'empty string' => array( 'path' => '' ),
+
+			// Type checks.
+			'empty array'  => array( 'path' => array() ),
+			'(int) 0'      => array( 'path' => 0 ),
+			'(int) -0'     => array( 'path' => -0 ),
+			'(float) 0.0'  => array( 'path' => 0.0 ),
+			'(float) -0.0' => array( 'path' => -0.0 ),
+			'(bool) false' => array( 'path' => false ),
+			'null'         => array( 'path' => null ),
+		);
+	}
+
+	/**
+	 * Tests that `WP_Upgrader::install_package()` returns a WP_Error object
+	 * when the 'upgrader_pre_install' filter returns a WP_Error object.
+	 *
+	 * @ticket 54245
+	 *
+	 * @covers WP_Upgrader::install_package
+	 */
+	public function test_install_package_should_return_wp_error_when_pre_install_filter_returns_wp_error() {
+		self::$instance->generic_strings();
+
+		self::$upgrader_skin_mock
+				->expects( $this->once() )
+				->method( 'feedback' )
+				->with( 'installing_package' );
+
+		add_filter(
+			'upgrader_pre_install',
+			static function () {
+				return new WP_Error( 'from_upgrader_pre_install' );
+			}
+		);
+
+		$args = array(
+			'source'      => '/',
+			'destination' => '/',
+		);
+
+		$actual = self::$instance->install_package( $args );
+
+		$this->assertWPError(
+			$actual,
+			'WP_Upgrader::install_package() did not return a WP_Error object'
+		);
+
+		$this->assertSame(
+			'from_upgrader_pre_install',
+			$actual->get_error_code(),
+			'The WP_Error object was not returned from the filter'
+		);
+	}
+
+	/**
+	 * Tests that `WP_Upgrader::install_package()` adds a trailing slash to
+	 * the source directory and a single subdirectory.
+	 *
+	 * @ticket 54245
+	 *
+	 * @covers WP_Upgrader::install_package
+	 */
+	public function test_install_package_should_add_trailing_slash_to_source_and_subdirectory() {
+		self::$instance->generic_strings();
+
+		self::$upgrader_skin_mock
+				->expects( $this->once() )
+				->method( 'feedback' )
+				->with( 'installing_package' );
+
+		$dirlist = array(
+			'subdir' => array(
+				'name'  => 'subdir',
+				'type'  => 'd',
+				'files' => array( 'subfile.php' ),
+			),
+		);
+
+		self::$wp_filesystem_mock
+				->expects( $this->once() )
+				->method( 'dirlist' )
+				->with( '/source_dir' )
+				->willReturn( $dirlist );
+
+		self::$wp_filesystem_mock
+				->expects( $this->once() )
+				->method( 'is_dir' )
+				->with( '/source_dir/subdir/' )
+				->willReturn( true );
+
+		add_filter(
+			'upgrader_source_selection',
+			function ( $source ) {
+				$this->assertSame( '/source_dir/subdir/', $source );
+
+				// Return a WP_Error to exit before `move_dir()/copy_dir()`.
+				return new WP_Error();
+			}
+		);
+
+		$args = array(
+			'source'      => '/source_dir',
+			'destination' => '/dest_dir',
+		);
+
+		self::$instance->install_package( $args );
+	}
+
+	/**
+	 * Tests that `WP_Upgrader::install_package()` returns a WP_Error object
+	 * when no source files exist.
+	 *
+	 * @ticket 54245
+	 *
+	 * @covers WP_Upgrader::install_package
+	 */
+	public function test_install_package_should_return_wp_error_when_no_source_files_exist() {
+		self::$instance->generic_strings();
+
+		self::$upgrader_skin_mock
+				->expects( $this->once() )
+				->method( 'feedback' )
+				->with( 'installing_package' );
+
+		self::$wp_filesystem_mock
+				->expects( $this->once() )
+				->method( 'dirlist' )
+				->with( '/' )
+				->willReturn( array() );
+
+		$args = array(
+			'source'      => '/',
+			'destination' => '/',
+		);
+
+		$actual = self::$instance->install_package( $args );
+
+		$this->assertWPError(
+			$actual,
+			'WP_Upgrader::install_package() did not return a WP_Error object'
+		);
+
+		$this->assertSame(
+			'incompatible_archive_empty',
+			$actual->get_error_code(),
+			'Unexpected WP_Error code'
+		);
+	}
+
+	/**
+	 * Tests that `WP_Upgrader::install_package()` adds a trailing slash to
+	 * the source directory of a single file.
+	 *
+	 * @ticket 54245
+	 *
+	 * @covers WP_Upgrader::install_package
+	 */
+	public function test_install_package_should_add_trailing_slash_to_the_source_directory_of_single_file() {
+		self::$instance->generic_strings();
+
+		self::$upgrader_skin_mock
+				->expects( $this->once() )
+				->method( 'feedback' )
+				->with( 'installing_package' );
+
+		self::$wp_filesystem_mock
+				->expects( $this->once() )
+				->method( 'dirlist' )
+				->with( '/source_dir' )
+				->willReturn( array( 'file1.php' ) );
+
+		add_filter(
+			'upgrader_source_selection',
+			function ( $source ) {
+				$this->assertSame( '/source_dir/', $source );
+
+				// Return a WP_Error to exit before `move_dir()/copy_dir()`.
+				return new WP_Error();
+			}
+		);
+
+		$args = array(
+			'source'      => '/source_dir',
+			'destination' => '/dest_dir',
+		);
+
+		self::$instance->install_package( $args );
+	}
+
+	/**
+	 * Tests that `WP_Upgrader::install_package()` applies
+	 * 'upgrader_clear_destination' filters with arguments.
+	 *
+	 * This test runs in a separate process so that it can define
+	 * constants without impacting other tests.
+	 *
+	 * This test does not preserve global state to prevent the exception
+	 * "Serialization of 'Closure' is not allowed." when running in a
+	 * separate process.
+	 *
+	 * @ticket 54245
+	 *
+	 * @covers WP_Upgrader::install_package
+	 *
+	 * @runInSeparateProcess
+	 * @preserveGlobalState disabled
+	 */
+	public function test_install_package_should_clear_destination_when_clear_destination_is_true() {
+		define( 'FS_CHMOD_FILE', 0644 );
+
+		self::$instance->generic_strings();
+
+		self::$upgrader_skin_mock
+				->expects( $this->exactly( 2 ) )
+				->method( 'feedback' )
+				->withConsecutive(
+					array( 'installing_package' ),
+					array( 'remove_old' )
+				);
+
+		self::$wp_filesystem_mock
+				->expects( $this->once() )
+				->method( 'find_folder' )
+				->with( '/dest_dir' )
+				->willReturn( '/dest_dir/' );
+
+		$dirlist_args = array(
+			array( '/source_dir' ),
+			array( '/source_dir/' ),
+			array( '/dest_dir/' ),
+		);
+
+		$dirlist_results = array(
+			'file1.php' => array(
+				'name' => 'file1.php',
+				'type' => 'f',
+			),
+		);
+
+		self::$wp_filesystem_mock
+				->expects( $this->exactly( 3 ) )
+				->method( 'dirlist' )
+				->withConsecutive( ...$dirlist_args )
+				->willReturn( $dirlist_results );
+
+		add_filter(
+			'upgrader_clear_destination',
+			function ( $removed, $local_destination, $remote_destination, $hook_extra ) {
+				$this->assertTrue(
+					is_bool( $removed ) || is_wp_error( $removed ),
+					'The "removed" argument is not a bool or WP_Error'
+				);
+
+				$this->assertIsString(
+					$local_destination,
+					'The "local_destination" argument is not a string'
+				);
+
+				$this->assertIsString(
+					$remote_destination,
+					'The "remote_destination" argument is not a string'
+				);
+
+				$this->assertIsArray(
+					$hook_extra,
+					'The "hook_extra" argument is not an array'
+				);
+
+				return new WP_Error( 'exit_early' );
+			},
+			10,
+			4
+		);
+
+		$args = array(
+			'source'            => '/source_dir',
+			'destination'       => '/dest_dir',
+			'clear_destination' => true,
+		);
+
+		self::$instance->install_package( $args );
+	}
+
+	/**
+	 * Tests that `WP_Upgrader::install_package()` makes the
+	 * remote destination safe when set to a protected directory.
+	 *
+	 * This test runs in a separate process so that it can define
+	 * constants without impacting other tests.
+	 *
+	 * This test does not preserve global state to prevent the exception
+	 * "Serialization of 'Closure' is not allowed." when running in a
+	 * separate process.
+	 *
+	 * @ticket 54245
+	 *
+	 * @covers WP_Upgrader::install_package
+	 *
+	 * @dataProvider data_install_package_should_make_remote_destination_safe_when_set_to_a_protected_directory
+	 *
+	 * @runInSeparateProcess
+	 * @preserveGlobalState disabled
+	 *
+	 * @param string $protected_directory The path to a protected directory.
+	 * @param string $expected            The expected safe remote destination.
+	 */
+	public function test_install_package_should_make_remote_destination_safe_when_set_to_a_protected_directory( $protected_directory, $expected ) {
+		define( 'FS_CHMOD_FILE', 0644 );
+
+		self::$instance->generic_strings();
+
+		self::$upgrader_skin_mock
+				->expects( $this->exactly( 2 ) )
+				->method( 'feedback' )
+				->withConsecutive(
+					array( 'installing_package' ),
+					array( 'remove_old' )
+				);
+
+		self::$wp_filesystem_mock
+				->expects( $this->once() )
+				->method( 'find_folder' )
+				->with( $protected_directory )
+				->willReturn( trailingslashit( $protected_directory ) );
+
+		$dirlist_args = array(
+			array( '/source_dir' ),
+			array( '/source_dir/' ),
+			array( $expected ),
+		);
+
+		$dirlist_results = array(
+			'file1.php' => array(
+				'name' => 'file1.php',
+				'type' => 'f',
+			),
+		);
+
+		self::$wp_filesystem_mock
+				->expects( $this->exactly( 3 ) )
+				->method( 'dirlist' )
+				->withConsecutive( ...$dirlist_args )
+				->willReturn( $dirlist_results );
+
+		add_filter(
+			'upgrader_clear_destination',
+			function ( $removed, $local_destination, $remote_destination ) use ( $expected ) {
+				$this->assertSame( $expected, $remote_destination );
+				return new WP_Error( 'exit_early' );
+			},
+			10,
+			3
+		);
+
+		$args = array(
+			'source'            => '/source_dir',
+			'destination'       => $protected_directory,
+			'clear_destination' => true,
+		);
+
+		self::$instance->install_package( $args );
+	}
+
+	/**
+	 * Data provider.
+	 *
+	 * @return array[]
+	 */
+	public function data_install_package_should_make_remote_destination_safe_when_set_to_a_protected_directory() {
+		return array(
+			'ABSPATH'               => array(
+				'protected_directory' => ABSPATH,
+				'expected'            => ABSPATH . 'source_dir/',
+			),
+			'WP_CONTENT_DIR'        => array(
+				'protected_directory' => WP_CONTENT_DIR,
+				'expected'            => WP_CONTENT_DIR . '/source_dir/',
+			),
+			'WP_PLUGIN_DIR'         => array(
+				'protected_directory' => WP_PLUGIN_DIR,
+				'expected'            => WP_PLUGIN_DIR . '/source_dir/',
+			),
+			'WP_CONTENT_DIR/themes' => array(
+				'protected_directory' => WP_CONTENT_DIR . '/themes',
+				'expected'            => WP_CONTENT_DIR . '/themes/source_dir/',
+			),
+		);
+	}
+
+	/**
+	 * Tests that `WP_Upgrader::install_package()` returns a WP_Error object
+	 * if the destination directory exists.
+	 *
+	 * @ticket 54245
+	 *
+	 * @covers WP_Upgrader::install_package
+	 */
+	public function test_install_package_should_abort_if_the_destination_directory_exists() {
+		self::$instance->generic_strings();
+
+		self::$upgrader_skin_mock
+				->expects( $this->once() )
+				->method( 'feedback' )
+				->with( 'installing_package' );
+
+		self::$wp_filesystem_mock
+				->expects( $this->once() )
+				->method( 'find_folder' )
+				->with( '/dest_dir' )
+				->willReturn( '/dest_dir/' );
+
+		$dirlist_args = array(
+			array( '/source_dir' ),
+			array( '/source_dir/' ),
+			array( '/dest_dir/' ),
+		);
+
+		$dirlist_results = array(
+			'file1.php' => array(
+				'name' => 'file1.php',
+				'type' => 'f',
+			),
+		);
+
+		self::$wp_filesystem_mock
+				->expects( $this->exactly( 3 ) )
+				->method( 'dirlist' )
+				->withConsecutive( ...$dirlist_args )
+				->willReturn( $dirlist_results );
+
+		self::$wp_filesystem_mock
+				->expects( $this->once() )
+				->method( 'exists' )
+				->with( '/dest_dir/' )
+				->willReturn( true );
+
+		$args = array(
+			'source'      => '/source_dir',
+			'destination' => '/dest_dir',
+		);
+
+		$actual = self::$instance->install_package( $args );
+
+		$this->assertWPError(
+			$actual,
+			'WP_Upgrader::install_package() did not return a WP_Error object'
+		);
+
+		$this->assertSame(
+			'folder_exists',
+			$actual->get_error_code(),
+			'Unexpected WP_Error code'
+		);
+	}
+
+	/**
+	 * Tests that `WP_Upgrader::install_package()` returns a WP_Error
+	 * if the destination directory cannot be created.
+	 *
+	 * This test runs in a separate process so that it can define
+	 * constants without impacting other tests.
+	 *
+	 * This test does not preserve global state to prevent the exception
+	 * "Serialization of 'Closure' is not allowed." when running in a
+	 * separate process.
+	 *
+	 * @ticket 54245
+	 *
+	 * @covers WP_Upgrader::install_package
+	 *
+	 * @runInSeparateProcess
+	 * @preserveGlobalState disabled
+	 */
+	public function test_install_package_should_return_wp_error_if_destination_cannot_be_created() {
+		define( 'FS_CHMOD_DIR', 0755 );
+
+		self::$instance->generic_strings();
+
+		self::$upgrader_skin_mock
+				->expects( $this->once() )
+				->method( 'feedback' )
+				->with( 'installing_package' );
+
+		self::$wp_filesystem_mock
+				->expects( $this->once() )
+				->method( 'find_folder' )
+				->with( '/dest_dir' )
+				->willReturn( '/dest_dir/' );
+
+		$dirlist_args = array(
+			array( '/source_dir' ),
+			array( '/source_dir/' ),
+		);
+
+		$dirlist_results = array(
+			'file1.php' => array(
+				'name' => 'file1.php',
+				'type' => 'f',
+			),
+		);
+
+		self::$wp_filesystem_mock
+				->expects( $this->exactly( 2 ) )
+				->method( 'dirlist' )
+				->withConsecutive( ...$dirlist_args )
+				->willReturn( $dirlist_results );
+
+		self::$wp_filesystem_mock
+				->expects( $this->once() )
+				->method( 'exists' )
+				->with( '/dest_dir/' )
+				->willReturn( false );
+
+		self::$wp_filesystem_mock
+				->expects( $this->once() )
+				->method( 'mkdir' )
+				->with( '/dest_dir/' )
+				->willReturn( false );
+
+		$args = array(
+			'source'                      => '/source_dir',
+			'destination'                 => '/dest_dir',
+			'abort_if_destination_exists' => false,
+		);
+
+		$actual = self::$instance->install_package( $args );
+
+		$this->assertWPError(
+			$actual,
+			'WP_Upgrader::install_package() did not return a WP_Error object'
+		);
+
+		$this->assertSame(
+			'mkdir_failed_destination',
+			$actual->get_error_code(),
+			'Unexpected WP_Error code'
+		);
+	}
+
+	/**
+	 * Tests that `WP_Upgrader::run()` returns `false` when
+	 * requesting filesystem credentials fails.
+	 *
+	 * @ticket 54245
+	 *
+	 * @covers WP_Upgrader::run
+	 */
+	public function test_run_should_return_false_when_requesting_filesystem_credentials_fails() {
+		self::$upgrader_skin_mock
+				->expects( $this->once() )
+				->method( 'request_filesystem_credentials' )
+				->willReturn( false );
+
+		self::$upgrader_skin_mock
+				->expects( $this->once() )
+				->method( 'footer' );
+
+		$this->assertFalse( self::$instance->run( array() ) );
+	}
+
+	/**
+	 * Tests that `WP_Upgrader::maintenance_mode()` removes the `.maintenance` file.
+	 *
+	 * @ticket 54245
+	 *
+	 * @covers WP_Upgrader::maintenance_mode
+	 */
+	public function test_maintenance_mode_should_disable_maintenance_mode_if_maintenance_file_exists() {
+		self::$wp_filesystem_mock
+				->expects( $this->once() )
+				->method( 'abspath' )
+				->willReturn( '/' );
+
+		self::$wp_filesystem_mock
+				->expects( $this->once() )
+				->method( 'exists' )
+				->with( '/.maintenance' )
+				->willReturn( true );
+
+		self::$upgrader_skin_mock
+				->expects( $this->once() )
+				->method( 'feedback' )
+				->with( 'maintenance_end' );
+
+		self::$wp_filesystem_mock
+				->expects( $this->once() )
+				->method( 'delete' )
+				->with( '/.maintenance' );
+
+		self::$instance->maintenance_mode();
+	}
+
+	/**
+	 * Tests that `WP_Upgrader::maintenance_mode()` does nothing if
+	 * the `.maintenance` file does not exist.
+	 *
+	 * @ticket 54245
+	 *
+	 * @covers WP_Upgrader::maintenance_mode
+	 */
+	public function test_maintenance_mode_should_not_disable_maintenance_mode_if_no_maintenance_file_exists() {
+		self::$upgrader_skin_mock->expects( $this->never() )->method( 'feedback' );
+		self::$wp_filesystem_mock->expects( $this->never() )->method( 'delete' );
+
+		self::$wp_filesystem_mock
+				->expects( $this->once() )
+				->method( 'abspath' )
+				->willReturn( '/' );
+
+		self::$wp_filesystem_mock
+				->expects( $this->once() )
+				->method( 'exists' )
+				->with( '/.maintenance' )
+				->willReturn( false );
+
+		self::$instance->maintenance_mode();
+	}
+
+	/**
+	 * Tests that `WP_Upgrader::maintenance_mode()` creates
+	 * a `.maintenance` file with a boolean `$enable` argument.
+	 *
+	 * This test runs in a separate process so that it can define
+	 * constants without impacting other tests.
+	 *
+	 * This test does not preserve global state to prevent the exception
+	 * "Serialization of 'Closure' is not allowed." when running in a
+	 * separate process.
+	 *
+	 * @ticket 54245
+	 *
+	 * @covers WP_Upgrader::maintenance_mode
+	 *
+	 * @runInSeparateProcess
+	 * @preserveGlobalState disabled
+	 */
+	public function test_maintenance_mode_should_create_maintenance_file_with_boolean() {
+		define( 'FS_CHMOD_FILE', 0644 );
+
+		self::$wp_filesystem_mock
+				->expects( $this->once() )
+				->method( 'abspath' )
+				->willReturn( '/' );
+
+		self::$upgrader_skin_mock
+				->expects( $this->once() )
+				->method( 'feedback' )
+				->with( 'maintenance_start' );
+
+		self::$wp_filesystem_mock
+				->expects( $this->once() )
+				->method( 'delete' )
+				->with( '/.maintenance' );
+
+		self::$wp_filesystem_mock
+				->expects( $this->once() )
+				->method( 'put_contents' )
+				->with(
+					'/.maintenance',
+					$this->stringContains( '<?php $upgrading =' ),
+					FS_CHMOD_FILE
+				);
+
+		self::$instance->maintenance_mode( true );
+	}
+
+	/**
+	 * Tests that `WP_Upgrader::release_lock()` removes the 'lock' option.
+	 *
+	 * @ticket 54245
+	 *
+	 * @covers WP_Upgrader::release_lock
+	 */
+	public function test_release_lock_should_remove_lock_option() {
+		global $wpdb;
+
+		$this->assertSame(
+			1,
+			$wpdb->insert(
+				$wpdb->options,
+				array(
+					'option_name'  => 'lock.lock',
+					'option_value' => 'content',
+				),
+				'%s'
+			),
+			'The initial lock was not created.'
+		);
+
+		WP_Upgrader::release_lock( 'lock' );
+
+		$this->assertNotSame( 'content', get_option( 'lock.lock' ) );
+	}
+
+	/**
+	 * Tests that `WP_Upgrader::download_package()` returns early when
+	 * the 'upgrader_pre_download' filter returns a non-false value.
+	 *
+	 * @ticket 54245
+	 *
+	 * @covers WP_Upgrader::download_package
+	 */
+	public function test_download_package_should_exit_early_when_the_upgrader_pre_download_filter_returns_non_false() {
+		self::$upgrader_skin_mock->expects( $this->never() )->method( 'feedback' );
+
+		add_filter(
+			'upgrader_pre_download',
+			static function () {
+				return 'a non-false value';
+			}
+		);
+
+		$result = self::$instance->download_package( 'package' );
+
+		$this->assertSame( 'a non-false value', $result );
+	}
+
+	/**
+	 * Tests that `WP_Upgrader::download_package()` should apply
+	 * 'upgrader_pre_download' filters with expected arguments.
+	 *
+	 * @ticket 54245
+	 *
+	 * @covers WP_Upgrader::download_package
+	 */
+	public function test_download_package_should_apply_upgrader_pre_download_filter_with_arguments() {
+		self::$upgrader_skin_mock->expects( $this->never() )->method( 'feedback' );
+
+		add_filter(
+			'upgrader_pre_download',
+			function ( $reply, $package, $upgrader, $hook_extra ) {
+				$this->assertFalse( $reply, '"$reply" was not false' );
+
+				$this->assertSame(
+					'package',
+					$package,
+					'The package file name was not "package"'
+				);
+
+				$this->assertSame(
+					self::$instance,
+					$upgrader,
+					'The wrong WP_Upgrader instance was passed'
+				);
+
+				$this->assertSameSets(
+					array( 'hook_extra' ),
+					$hook_extra,
+					'The "$hook_extra" array was not the expected array'
+				);
+
+				return ! $reply;
+			},
+			10,
+			4
+		);
+
+		$result = self::$instance->download_package( 'package', false, array( 'hook_extra' ) );
+
+		$this->assertTrue(
+			$result,
+			'WP_Upgrader::download_package() did not return true'
+		);
+	}
+
+	/**
+	 * Tests that `WP_Upgrader::download_package()` returns an existing file.
+	 *
+	 * @ticket 54245
+	 *
+	 * @covers WP_Upgrader::download_package
+	 */
+	public function test_download_package_should_return_an_existing_file() {
+		$result = self::$instance->download_package( __FILE__ );
+
+		$this->assertSame( __FILE__, $result );
+	}
+
+	/**
+	 * Tests that `WP_Upgrader::download_package()` returns a file with the
+	 * package name in it.
+	 *
+	 * @ticket 54245
+	 *
+	 * @covers WP_Upgrader::download_package
+	 */
+	public function test_download_package_should_return_a_file_with_the_package_name() {
+		add_filter(
+			'pre_http_request',
+			static function () {
+				return array( 'response' => array( 'code' => 200 ) );
+			}
+		);
+
+		$result = self::$instance->download_package( 'wordpress-seo' );
+
+		$this->assertStringContainsString( '/wordpress-seo-', $result );
+	}
+
+	/**
+	 * Tests that `WP_Upgrader::download_package()` returns a package URL error
+	 * as a `WP_Error` object.
+	 *
+	 * @ticket 54245
+	 *
+	 * @covers WP_Upgrader::download_package
+	 */
+	public function test_download_package_should_return_a_wp_error_object() {
+		self::$instance->generic_strings();
+
+		add_filter(
+			'pre_http_request',
+			static function () {
+				return array(
+					'response' => array(
+						'code'    => 400,
+						'message' => 'error',
+					),
+				);
+			}
+		);
+
+		$result = self::$instance->download_package( 'wordpress-seo' );
+
+		$this->assertWPError(
+			$result,
+			'WP_Upgrader::download_package() did not return a WP_Error object'
+		);
+
+		$this->assertSame(
+			'download_failed',
+			$result->get_error_code(),
+			'Unexpected WP_Error code'
+		);
+	}
+}
diff --git a/tests/admin/wpUserSearch.php b/tests/admin/wpUserSearch.php
index e24b4d0c6a..4ad20f77c4 100644
--- a/tests/admin/wpUserSearch.php
+++ b/tests/admin/wpUserSearch.php
@@ -1,5 +1,8 @@
 <?php
 /**
+ * @group admin
+ * @group user
+ *
  * @coversDefaultClass WP_User_Search
  */
 class Tests_Admin_wpUserSearch extends WP_UnitTestCase {
diff --git a/tests/admin/wpUsersListTable.php b/tests/admin/wpUsersListTable.php
index bdf765fbfe..17438d074c 100644
--- a/tests/admin/wpUsersListTable.php
+++ b/tests/admin/wpUsersListTable.php
@@ -2,6 +2,7 @@
 
 /**
  * @group admin
+ * @group user
  *
  * @covers WP_Users_List_Table
  */
diff --git a/tests/adminbar.php b/tests/adminbar.php
index 4ca3f64d0d..b002423e38 100644
--- a/tests/adminbar.php
+++ b/tests/adminbar.php
@@ -94,10 +94,9 @@ class Tests_AdminBar extends WP_UnitTestCase {
 
 		$wp_admin_bar = $this->get_standard_admin_bar();
 
-		$node_site_name    = $wp_admin_bar->get_node( 'site-name' );
-		$node_my_account   = $wp_admin_bar->get_node( 'my-account' );
-		$node_user_info    = $wp_admin_bar->get_node( 'user-info' );
-		$node_edit_profile = $wp_admin_bar->get_node( 'edit-profile' );
+		$node_site_name  = $wp_admin_bar->get_node( 'site-name' );
+		$node_my_account = $wp_admin_bar->get_node( 'my-account' );
+		$node_user_info  = $wp_admin_bar->get_node( 'user-info' );
 
 		// Site menu points to the home page instead of the admin URL.
 		$this->assertSame( home_url( '/' ), $node_site_name->href );
@@ -105,7 +104,6 @@ class Tests_AdminBar extends WP_UnitTestCase {
 		// No profile links as the user doesn't have any permissions on the site.
 		$this->assertFalse( $node_my_account->href );
 		$this->assertFalse( $node_user_info->href );
-		$this->assertNull( $node_edit_profile );
 	}
 
 	/**
@@ -119,10 +117,9 @@ class Tests_AdminBar extends WP_UnitTestCase {
 
 		$wp_admin_bar = $this->get_standard_admin_bar();
 
-		$node_site_name    = $wp_admin_bar->get_node( 'site-name' );
-		$node_my_account   = $wp_admin_bar->get_node( 'my-account' );
-		$node_user_info    = $wp_admin_bar->get_node( 'user-info' );
-		$node_edit_profile = $wp_admin_bar->get_node( 'edit-profile' );
+		$node_site_name  = $wp_admin_bar->get_node( 'site-name' );
+		$node_my_account = $wp_admin_bar->get_node( 'my-account' );
+		$node_user_info  = $wp_admin_bar->get_node( 'user-info' );
 
 		// Site menu points to the admin URL.
 		$this->assertSame( admin_url( '/' ), $node_site_name->href );
@@ -132,7 +129,6 @@ class Tests_AdminBar extends WP_UnitTestCase {
 		// Profile URLs point to profile.php.
 		$this->assertSame( $profile_url, $node_my_account->href );
 		$this->assertSame( $profile_url, $node_user_info->href );
-		$this->assertSame( $profile_url, $node_edit_profile->href );
 	}
 
 	/**
@@ -159,10 +155,9 @@ class Tests_AdminBar extends WP_UnitTestCase {
 
 		$wp_admin_bar = $this->get_standard_admin_bar();
 
-		$node_site_name    = $wp_admin_bar->get_node( 'site-name' );
-		$node_my_account   = $wp_admin_bar->get_node( 'my-account' );
-		$node_user_info    = $wp_admin_bar->get_node( 'user-info' );
-		$node_edit_profile = $wp_admin_bar->get_node( 'edit-profile' );
+		$node_site_name  = $wp_admin_bar->get_node( 'site-name' );
+		$node_my_account = $wp_admin_bar->get_node( 'my-account' );
+		$node_user_info  = $wp_admin_bar->get_node( 'user-info' );
 
 		// Get primary blog.
 		$primary = get_active_blog_for_user( self::$editor_id );
@@ -179,7 +174,6 @@ class Tests_AdminBar extends WP_UnitTestCase {
 		// Profile URLs should go to the user's primary blog.
 		$this->assertSame( $primary_profile_url, $node_my_account->href );
 		$this->assertSame( $primary_profile_url, $node_user_info->href );
-		$this->assertSame( $primary_profile_url, $node_edit_profile->href );
 
 		restore_current_blog();
 	}
@@ -215,10 +209,9 @@ class Tests_AdminBar extends WP_UnitTestCase {
 
 		$wp_admin_bar = $this->get_standard_admin_bar();
 
-		$node_site_name    = $wp_admin_bar->get_node( 'site-name' );
-		$node_my_account   = $wp_admin_bar->get_node( 'my-account' );
-		$node_user_info    = $wp_admin_bar->get_node( 'user-info' );
-		$node_edit_profile = $wp_admin_bar->get_node( 'edit-profile' );
+		$node_site_name  = $wp_admin_bar->get_node( 'site-name' );
+		$node_my_account = $wp_admin_bar->get_node( 'my-account' );
+		$node_user_info  = $wp_admin_bar->get_node( 'user-info' );
 
 		// Get primary blog.
 		$primary = get_active_blog_for_user( self::$no_role_id );
@@ -234,7 +227,6 @@ class Tests_AdminBar extends WP_UnitTestCase {
 		// Profile URLs should go to the user's primary blog.
 		$this->assertSame( $user_profile_url, $node_my_account->href );
 		$this->assertSame( $user_profile_url, $node_user_info->href );
-		$this->assertSame( $user_profile_url, $node_edit_profile->href );
 
 		restore_current_blog();
 	}
@@ -284,7 +276,7 @@ class Tests_AdminBar extends WP_UnitTestCase {
 				array(
 					'id' => 'test-node',
 				),
-				'<div class="ab-item ab-empty-item">',
+				'<div class="ab-item ab-empty-item" role="menuitem">',
 			),
 			array(
 				// Empty string.
@@ -292,7 +284,7 @@ class Tests_AdminBar extends WP_UnitTestCase {
 					'id'   => 'test-node',
 					'meta' => array( 'tabindex' => '' ),
 				),
-				'<div class="ab-item ab-empty-item">',
+				'<div class="ab-item ab-empty-item" role="menuitem">',
 			),
 			array(
 				// Integer 1 as string.
@@ -300,7 +292,7 @@ class Tests_AdminBar extends WP_UnitTestCase {
 					'id'   => 'test-node',
 					'meta' => array( 'tabindex' => '1' ),
 				),
-				'<div class="ab-item ab-empty-item" tabindex="1">',
+				'<div class="ab-item ab-empty-item" tabindex="1" role="menuitem">',
 			),
 			array(
 				// Integer -1 as string.
@@ -308,7 +300,7 @@ class Tests_AdminBar extends WP_UnitTestCase {
 					'id'   => 'test-node',
 					'meta' => array( 'tabindex' => '-1' ),
 				),
-				'<div class="ab-item ab-empty-item" tabindex="-1">',
+				'<div class="ab-item ab-empty-item" tabindex="-1" role="menuitem">',
 			),
 			array(
 				// Integer 0 as string.
@@ -316,7 +308,7 @@ class Tests_AdminBar extends WP_UnitTestCase {
 					'id'   => 'test-node',
 					'meta' => array( 'tabindex' => '0' ),
 				),
-				'<div class="ab-item ab-empty-item" tabindex="0">',
+				'<div class="ab-item ab-empty-item" tabindex="0" role="menuitem">',
 			),
 			array(
 				// Integer, 0.
@@ -324,7 +316,7 @@ class Tests_AdminBar extends WP_UnitTestCase {
 					'id'   => 'test-node',
 					'meta' => array( 'tabindex' => 0 ),
 				),
-				'<div class="ab-item ab-empty-item" tabindex="0">',
+				'<div class="ab-item ab-empty-item" tabindex="0" role="menuitem">',
 			),
 			array(
 				// Integer, 2.
@@ -332,7 +324,7 @@ class Tests_AdminBar extends WP_UnitTestCase {
 					'id'   => 'test-node',
 					'meta' => array( 'tabindex' => 2 ),
 				),
-				'<div class="ab-item ab-empty-item" tabindex="2">',
+				'<div class="ab-item ab-empty-item" tabindex="2" role="menuitem">',
 			),
 			array(
 				// Boolean, false.
@@ -340,7 +332,7 @@ class Tests_AdminBar extends WP_UnitTestCase {
 					'id'   => 'test-node',
 					'meta' => array( 'tabindex' => false ),
 				),
-				'<div class="ab-item ab-empty-item">',
+				'<div class="ab-item ab-empty-item" role="menuitem">',
 			),
 		);
 	}
diff --git a/tests/ajax/wpAjaxImageEditor.php b/tests/ajax/wpAjaxImageEditor.php
index ac761c3520..89745d6458 100644
--- a/tests/ajax/wpAjaxImageEditor.php
+++ b/tests/ajax/wpAjaxImageEditor.php
@@ -52,7 +52,7 @@ class Tests_Ajax_wpAjaxImageEditor extends WP_Ajax_UnitTestCase {
 		$ret = wp_save_image( $id );
 
 		$this->assertObjectHasProperty( 'error', $ret );
-		$this->assertEquals( 'Images cannot be scaled to a size larger than the original.', $ret->error );
+		$this->assertSame( 'Images cannot be scaled to a size larger than the original.', $ret->error );
 	}
 
 	/**
diff --git a/tests/ajax/wpAjaxInlineSave.php b/tests/ajax/wpAjaxInlineSave.php
index 3537def1dc..afb73e6dcf 100644
--- a/tests/ajax/wpAjaxInlineSave.php
+++ b/tests/ajax/wpAjaxInlineSave.php
@@ -89,7 +89,7 @@ class Tests_Ajax_wpAjaxInlineSave extends WP_Ajax_UnitTestCase {
 	}
 
 	/**
-	 * When updating a draft in quick edit mode, it should not set the publish date of the post when this one will be published.
+	 * When updating a draft in quick edit mode, it should not set the publish date of the post if the date passed is unchanged.
 	 *
 	 * @ticket 19907
 	 *
@@ -110,7 +110,7 @@ class Tests_Ajax_wpAjaxInlineSave extends WP_Ajax_UnitTestCase {
 
 		$this->assertSame( 'draft', $post->post_status );
 
-		$this->assertEquals( '0000-00-00 00:00:00', $post->post_date_gmt );
+		$this->assertSame( '0000-00-00 00:00:00', $post->post_date_gmt );
 
 		// Set up a request.
 		$_POST['_inline_edit'] = wp_create_nonce( 'inlineeditnonce' );
@@ -124,6 +124,63 @@ class Tests_Ajax_wpAjaxInlineSave extends WP_Ajax_UnitTestCase {
 		$_POST['screen']       = 'edit-post';
 		$_POST['post_view']    = 'list';
 		$_POST['edit_date']    = 'false';
+		$_POST['mm']           = get_the_date( 'm', $post );
+		$_POST['jj']           = get_the_date( 'd', $post );
+		$_POST['aa']           = get_the_date( 'Y', $post );
+		$_POST['hh']           = get_the_date( 'H', $post );
+		$_POST['mn']           = get_the_date( 'i', $post );
+		$_POST['ss']           = get_the_date( 's', $post );
+
+		// Make the request.
+		try {
+			$this->_handleAjax( 'inline-save' );
+		} catch ( WPAjaxDieContinueException $e ) {
+			unset( $e );
+		}
+
+		$post = get_post( $post->ID );
+
+		$post_date = sprintf( '%04d-%02d-%02d %02d:%02d:%02d', $_POST['aa'], $_POST['mm'], $_POST['jj'], $_POST['hh'], $_POST['mn'], $_POST['ss'] );
+
+		$this->assertSame( '0000-00-00 00:00:00', $post->post_date_gmt );
+	}
+
+	/**
+	 * When updating a draft in quick edit mode, it should set the publish date of the post if there is a new date set.
+	 *
+	 * @ticket 59125
+	 *
+	 * @covers ::edit_post
+	 */
+	public function test_quick_edit_draft_should_set_publish_date() {
+		// Become an administrator.
+		$this->_setRole( 'administrator' );
+
+		$user = get_current_user_id();
+
+		$post = self::factory()->post->create_and_get(
+			array(
+				'post_status' => 'draft',
+				'post_author' => $user,
+			)
+		);
+
+		$this->assertSame( 'draft', $post->post_status );
+
+		$this->assertSame( '0000-00-00 00:00:00', $post->post_date_gmt );
+
+		// Set up a request.
+		$_POST['_inline_edit'] = wp_create_nonce( 'inlineeditnonce' );
+		$_POST['post_ID']      = $post->ID;
+		$_POST['post_type']    = 'post';
+		$_POST['content']      = 'content test';
+		$_POST['excerpt']      = 'excerpt test';
+		$_POST['_status']      = $post->post_status;
+		$_POST['post_status']  = $post->post_status;
+		$_POST['post_author']  = $user;
+		$_POST['screen']       = 'edit-post';
+		$_POST['post_view']    = 'list';
+		$_POST['edit_date']    = 'true';
 		$_POST['mm']           = '09';
 		$_POST['jj']           = 11;
 		$_POST['aa']           = 2020;
@@ -140,6 +197,6 @@ class Tests_Ajax_wpAjaxInlineSave extends WP_Ajax_UnitTestCase {
 
 		$post = get_post( $post->ID );
 
-		$this->assertEquals( '0000-00-00 00:00:00', $post->post_date_gmt );
+		$this->assertSame( '2020-09-11 19:20:11', $post->post_date_gmt );
 	}
 }
diff --git a/tests/ajax/wpAjaxParseMediaShortcode.php b/tests/ajax/wpAjaxParseMediaShortcode.php
new file mode 100755
index 0000000000..19c7f20449
--- /dev/null
+++ b/tests/ajax/wpAjaxParseMediaShortcode.php
@@ -0,0 +1,85 @@
+<?php
+
+/**
+ * Admin Ajax functions to be tested.
+ */
+require_once ABSPATH . 'wp-admin/includes/ajax-actions.php';
+
+/**
+ * Testing Ajax save draft functionality.
+ *
+ * @package WordPress
+ * @subpackage UnitTests
+ * @since 6.3.2
+ *
+ * @group ajax
+ *
+ * @covers ::wp_ajax_parse-media-shortcode
+ */
+class Tests_Ajax_wpAjaxParseMediaShortcode extends WP_Ajax_UnitTestCase {
+	const SHORTCODE_RETURN_VALUE = 'TEST';
+	private static $media_id;
+	public static function wpSetUpBeforeClass( WP_UnitTest_Factory $factory ) {
+		self::$media_id = self::factory()->attachment->create_object(
+			get_temp_dir() . 'canola.jpg',
+			0,
+			array(
+				'post_mime_type' => 'image/jpeg',
+				'post_excerpt'   => 'A sample caption',
+				'post_name'      => 'restapi-client-fixture-attachment',
+				'post_title'     => 'REST API Client Fixture: Attachment',
+				'post_date'      => '2017-02-14 00:00:00',
+				'post_date_gmt'  => '2017-02-14 00:00:00',
+				'post_author'    => 0,
+			)
+		);
+	}
+	/**
+	 * @dataProvider shortcode_provider
+	 */
+	public function test_parse_shortcode( array $payload, $expected ) {
+		add_shortcode( 'test', array( $this, 'shortcode_test' ) );
+
+		$_POST = array_merge(
+			array(
+				'action' => 'paser-media-shortcode',
+				'type'   => '',
+			),
+			$payload
+		);
+		// Make the request.
+		try {
+			$this->_handleAjax( 'parse-media-shortcode' );
+		} catch ( WPAjaxDieContinueException $e ) {
+			unset( $e );
+		}
+		// Get the response, it is in heartbeat's response.
+		$response = json_decode( $this->_last_response, true );
+		$body     = $response['data']['body'] ?? '';
+		if ( $body ) {
+			$this->assertStringNotContainsString( self::SHORTCODE_RETURN_VALUE, $body );
+		}
+		$this->assertSame( $expected['success'], $response['success'] );
+	}
+
+	public function shortcode_test() {
+		return self::SHORTCODE_RETURN_VALUE;
+	}
+
+	public function shortcode_provider() {
+		return array(
+			'gallery_shortcode_is_allowed'         => array(
+				'payload'  => array( 'shortcode' => '[gallery ids=" ' . self::$media_id . '"]' ),
+				'expected' => array( 'success' => true ),
+			),
+			'gallery_and_custom_test_shortcode_is_not_allowed' => array(
+				'payload'  => array( 'shortcode' => '[gallery ids=" ' . self::$media_id . '"] [test]' ),
+				'expected' => array( 'success' => false ),
+			),
+			'custom_test_shortcode_is_not_allowed' => array(
+				'payload'  => array( 'shortcode' => '[test]' ),
+				'expected' => array( 'success' => false ),
+			),
+		);
+	}
+}
diff --git a/tests/ajax/wpCustomizeNavMenus.php b/tests/ajax/wpCustomizeNavMenus.php
index 40f2dd1f6f..1dfe5f684d 100644
--- a/tests/ajax/wpCustomizeNavMenus.php
+++ b/tests/ajax/wpCustomizeNavMenus.php
@@ -119,8 +119,8 @@ class Tests_Ajax_wpCustomizeNavMenus extends WP_Ajax_UnitTestCase {
 	 *
 	 * @return array {
 	 *     @type array {
-	 *         @string string $role             The role that will test caps for.
-	 *         @array  array  $expected_results The expected results from the Ajax call.
+	 *         @type string $role             The role that will test caps for.
+	 *         @type array  $expected_results The expected results from the Ajax call.
 	 *     }
 	 * }
 	 */
@@ -191,8 +191,8 @@ class Tests_Ajax_wpCustomizeNavMenus extends WP_Ajax_UnitTestCase {
 	 *
 	 * @return array {
 	 *     @type array {
-	 * @array array $post_args        The arguments that will merged with the $_POST array.
-	 * @array array $expected_results The expected results from the Ajax call.
+	 *         @type array $post_args        The arguments that will merged with the $_POST array.
+	 *         @type array $expected_results The expected results from the Ajax call.
 	 *     }
 	 * }
 	 */
@@ -515,8 +515,8 @@ class Tests_Ajax_wpCustomizeNavMenus extends WP_Ajax_UnitTestCase {
 	 *
 	 * @return array {
 	 *     @type array {
-	 * @string string $role             The role that will test caps for.
-	 * @array  array  $expected_results The expected results from the Ajax call.
+	 *         @type string $role             The role that will test caps for.
+	 *         @type array  $expected_results The expected results from the Ajax call.
 	 *     }
 	 * }
 	 */
@@ -610,8 +610,8 @@ class Tests_Ajax_wpCustomizeNavMenus extends WP_Ajax_UnitTestCase {
 	 *
 	 * @return array {
 	 *     @type array {
-	 * @string string $post_args        The args that will be passed to Ajax.
-	 * @array  array  $expected_results The expected results from the Ajax call.
+	 *         @type string $post_args        The args that will be passed to Ajax.
+	 *         @type array  $expected_results The expected results from the Ajax call.
 	 *     }
 	 * }
 	 */
diff --git a/tests/auth.php b/tests/auth.php
index facd456dd0..0bdf87485c 100644
--- a/tests/auth.php
+++ b/tests/auth.php
@@ -838,10 +838,74 @@ class Tests_Auth extends WP_UnitTestCase {
 		}
 	}
 
+	/**
+	 * @ticket 52529
+	 */
+	public function test_reset_password_with_apostrophe_in_email() {
+		$user_args = array(
+			'user_email' => "jo'hn@example.com",
+			'user_pass'  => 'password',
+		);
+
+		$user_id = self::factory()->user->create( $user_args );
+
+		$user = get_userdata( $user_id );
+		$key  = get_password_reset_key( $user );
+
+		// A correctly saved key should be accepted.
+		$check = check_password_reset_key( $key, $user->user_login );
+
+		$this->assertNotWPError( $check );
+		$this->assertInstanceOf( 'WP_User', $check );
+		$this->assertSame( $user_id, $check->ID );
+	}
+
 	public function data_application_passwords_can_use_capability_checks_to_determine_feature_availability() {
 		return array(
 			'allowed'     => array( 'editor', true ),
 			'not allowed' => array( 'subscriber', false ),
 		);
 	}
+
+	/*
+	 * @ticket 57512
+	 * @covers ::wp_populate_basic_auth_from_authorization_header
+	 */
+	public function tests_basic_http_authentication_with_username_and_password() {
+		// Header passed as "username:password".
+		$_SERVER['HTTP_AUTHORIZATION'] = 'Basic dXNlcm5hbWU6cGFzc3dvcmQ=';
+
+		wp_populate_basic_auth_from_authorization_header();
+
+		$this->assertSame( $_SERVER['PHP_AUTH_USER'], 'username' );
+		$this->assertSame( $_SERVER['PHP_AUTH_PW'], 'password' );
+	}
+
+	/*
+	 * @ticket 57512
+	 * @covers ::wp_populate_basic_auth_from_authorization_header
+	 */
+	public function tests_basic_http_authentication_with_username_only() {
+		// Malformed header passed as "username" with no password.
+		$_SERVER['HTTP_AUTHORIZATION'] = 'Basic dXNlcm5hbWU=';
+
+		wp_populate_basic_auth_from_authorization_header();
+
+		$this->assertArrayNotHasKey( 'PHP_AUTH_USER', $_SERVER );
+		$this->assertArrayNotHasKey( 'PHP_AUTH_PW', $_SERVER );
+	}
+
+	/*
+	 * @ticket 57512
+	 * @covers ::wp_populate_basic_auth_from_authorization_header
+	 */
+	public function tests_basic_http_authentication_with_colon_in_password() {
+		// Header passed as "username:pass:word" where password contains colon.
+		$_SERVER['HTTP_AUTHORIZATION'] = 'Basic dXNlcm5hbWU6cGFzczp3b3Jk';
+
+		wp_populate_basic_auth_from_authorization_header();
+
+		$this->assertSame( $_SERVER['PHP_AUTH_USER'], 'username' );
+		$this->assertSame( $_SERVER['PHP_AUTH_PW'], 'pass:word' );
+	}
 }
diff --git a/tests/block-bindings/postMetaSource.php b/tests/block-bindings/postMetaSource.php
new file mode 100644
index 0000000000..81a8a5861a
--- /dev/null
+++ b/tests/block-bindings/postMetaSource.php
@@ -0,0 +1,269 @@
+<?php
+/**
+ * Tests for Block Bindings API "core/post-meta" source.
+ *
+ * @package WordPress
+ * @subpackage Blocks
+ * @since 6.5.0
+ *
+ * @group blocks
+ * @group block-bindings
+ */
+class Tests_Block_Bindings_Post_Meta_Source extends WP_UnitTestCase {
+	protected static $post;
+	protected static $wp_meta_keys_saved;
+
+	/**
+	 * Modify the post content.
+	 *
+	 * @param string $content The new content.
+	 */
+	private function get_modified_post_content( $content ) {
+		$GLOBALS['post']->post_content = $content;
+		return apply_filters( 'the_content', $GLOBALS['post']->post_content );
+	}
+
+	/**
+	 * Sets up shared fixtures.
+	 */
+	public static function wpSetUpBeforeClass( WP_UnitTest_Factory $factory ) {
+		self::$post               = $factory->post->create_and_get();
+		self::$wp_meta_keys_saved = isset( $GLOBALS['wp_meta_keys'] ) ? $GLOBALS['wp_meta_keys'] : array();
+	}
+
+	/**
+	 * Tear down after class.
+	 */
+	public static function wpTearDownAfterClass() {
+		$GLOBALS['wp_meta_keys'] = self::$wp_meta_keys_saved;
+	}
+
+	/**
+	 * Set up before each test.
+	 *
+	 * @since 6.5.0
+	 */
+	public function set_up() {
+		parent::set_up();
+		// Needed because tear_down() will reset it between tests.
+		$GLOBALS['post'] = self::$post;
+	}
+
+	/**
+	 * Tests that a block connected to a custom field renders its value.
+	 *
+	 * @ticket 60651
+	 */
+	public function test_custom_field_value_is_rendered() {
+		register_meta(
+			'post',
+			'tests_custom_field',
+			array(
+				'show_in_rest' => true,
+				'single'       => true,
+				'type'         => 'string',
+				'default'      => 'Custom field value',
+			)
+		);
+
+		$content = $this->get_modified_post_content( '<!-- wp:paragraph {"metadata":{"bindings":{"content":{"source":"core/post-meta","args":{"key":"tests_custom_field"}}}}} --><p>Fallback value</p><!-- /wp:paragraph -->' );
+		$this->assertSame(
+			'<p>Custom field value</p>',
+			$content,
+			'The post content should show the value of the custom field . '
+		);
+	}
+
+	/**
+	 * Tests that an html attribute connected to a custom field renders its value.
+	 *
+	 * @ticket 60651
+	 */
+	public function test_html_attribute_connected_to_custom_field_value_is_rendered() {
+		register_meta(
+			'post',
+			'tests_url_custom_field',
+			array(
+				'show_in_rest' => true,
+				'single'       => true,
+				'type'         => 'string',
+				'default'      => 'https://example.com/foo.png',
+			)
+		);
+
+		$content = $this->get_modified_post_content( '<!-- wp:image {"metadata":{"bindings":{"url":{"source":"core/post-meta","args":{"key":"tests_url_custom_field"}}}}} --><figure class="wp-block-image"><img alt=""/></figure><!-- /wp:image -->' );
+		$this->assertSame(
+			'<figure class="wp-block-image"><img decoding="async" src="https://example.com/foo.png" alt=""/></figure>',
+			$content,
+			'The image src should point to the value of the custom field . '
+		);
+	}
+
+	/**
+	 * Tests that a blocks connected in a password protected post don't render the value.
+	 *
+	 * @ticket 60651
+	 */
+	public function test_custom_field_value_is_not_shown_in_password_protected_posts() {
+		register_meta(
+			'post',
+			'tests_custom_field',
+			array(
+				'show_in_rest' => true,
+				'single'       => true,
+				'type'         => 'string',
+				'default'      => 'Custom field value',
+			)
+		);
+
+		add_filter( 'post_password_required', '__return_true' );
+
+		$content = $this->get_modified_post_content( '<!-- wp:paragraph {"metadata":{"bindings":{"content":{"source":"core/post-meta","args":{"key":"tests_custom_field"}}}}} --><p>Fallback value</p><!-- /wp:paragraph -->' );
+
+		remove_filter( 'post_password_required', '__return_true' );
+
+		$this->assertSame(
+			'<p>Fallback value</p>',
+			$content,
+			'The post content should show the fallback value instead of the custom field value.'
+		);
+	}
+
+	/**
+	 * Tests that a blocks connected in a post that is not publicly viewable don't render the value.
+	 *
+	 * @ticket 60651
+	 */
+	public function test_custom_field_value_is_not_shown_in_non_viewable_posts() {
+		register_meta(
+			'post',
+			'tests_custom_field',
+			array(
+				'show_in_rest' => true,
+				'single'       => true,
+				'type'         => 'string',
+				'default'      => 'Custom field value',
+			)
+		);
+
+		add_filter( 'is_post_status_viewable', '__return_false' );
+
+		$content = $this->get_modified_post_content( '<!-- wp:paragraph {"metadata":{"bindings":{"content":{"source":"core/post-meta","args":{"key":"tests_custom_field"}}}}} --><p>Fallback value</p><!-- /wp:paragraph -->' );
+
+		remove_filter( 'is_post_status_viewable', '__return_false' );
+
+		$this->assertSame(
+			'<p>Fallback value</p>',
+			$content,
+			'The post content should show the fallback value instead of the custom field value.'
+		);
+	}
+
+	/**
+	 * Tests that a block connected to a meta key that doesn't exist renders the fallback.
+	 *
+	 * @ticket 60651
+	 */
+	public function test_binding_to_non_existing_meta_key() {
+		$content = $this->get_modified_post_content( '<!-- wp:paragraph {"metadata":{"bindings":{"content":{"source":"core/post-meta","args":{"key":"tests_non_existing_field"}}}}} --><p>Fallback value</p><!-- /wp:paragraph -->' );
+
+		$this->assertSame(
+			'<p>Fallback value</p>',
+			$content,
+			'The post content should show the fallback value.'
+		);
+	}
+
+	/**
+	 * Tests that a block connected without specifying the custom field renders the fallback.
+	 *
+	 * @ticket 60651
+	 */
+	public function test_binding_without_key_renders_the_fallback() {
+		$content = $this->get_modified_post_content( '<!-- wp:paragraph {"metadata":{"bindings":{"content":{"source":"core/post-meta"}}}} --><p>Fallback value</p><!-- /wp:paragraph -->' );
+
+		$this->assertSame(
+			'<p>Fallback value</p>',
+			$content,
+			'The post content should show the fallback value.'
+		);
+	}
+
+	/**
+	 * Tests that a block connected to a protected field doesn't show the value.
+	 *
+	 * @ticket 60651
+	 */
+	public function test_protected_field_value_is_not_shown() {
+		register_meta(
+			'post',
+			'_tests_protected_field',
+			array(
+				'show_in_rest' => true,
+				'single'       => true,
+				'type'         => 'string',
+				'default'      => 'Protected value',
+			)
+		);
+
+		$content = $this->get_modified_post_content( '<!-- wp:paragraph {"metadata":{"bindings":{"content":{"source":"core/post-meta","args":{"key":"_tests_protected_field"}}}}} --><p>Fallback value</p><!-- /wp:paragraph -->' );
+
+		$this->assertSame(
+			'<p>Fallback value</p>',
+			$content,
+			'The post content should show the fallback value instead of the protected value.'
+		);
+	}
+
+	/**
+	 * Tests that a block connected to a field not exposed in the REST API doesn't show the value.
+	 *
+	 * @ticket 60651
+	 */
+	public function test_custom_field_not_exposed_in_rest_api_is_not_shown() {
+		register_meta(
+			'post',
+			'tests_show_in_rest_false_field',
+			array(
+				'show_in_rest' => false,
+				'single'       => true,
+				'type'         => 'string',
+				'default'      => 'Protected value',
+			)
+		);
+
+		$content = $this->get_modified_post_content( '<!-- wp:paragraph {"metadata":{"bindings":{"content":{"source":"core/post-meta","args":{"key":"tests_show_in_rest_false_field"}}}}} --><p>Fallback value</p><!-- /wp:paragraph -->' );
+
+		$this->assertSame(
+			'<p>Fallback value</p>',
+			$content,
+			'The post content should show the fallback value instead of the protected value.'
+		);
+	}
+
+	/**
+	 * Tests that meta key with unsafe HTML is sanitized.
+	 *
+	 * @ticket 60651
+	 */
+	public function test_custom_field_with_unsafe_html_is_sanitized() {
+		register_meta(
+			'post',
+			'tests_unsafe_html_field',
+			array(
+				'show_in_rest' => true,
+				'single'       => true,
+				'type'         => 'string',
+				'default'      => '<script>alert("Unsafe HTML")</script>',
+			)
+		);
+
+		$content = $this->get_modified_post_content( '<!-- wp:paragraph {"metadata":{"bindings":{"content":{"source":"core/post-meta","args":{"key":"tests_unsafe_html_field"}}}}} --><p>Fallback value</p><!-- /wp:paragraph -->' );
+
+		$this->assertSame(
+			'<p>alert(&#8220;Unsafe HTML&#8221;)</p>',
+			$content,
+			'The post content should not include the script tag.'
+		);
+	}
+}
diff --git a/tests/block-bindings/register.php b/tests/block-bindings/register.php
new file mode 100644
index 0000000000..49dd203d30
--- /dev/null
+++ b/tests/block-bindings/register.php
@@ -0,0 +1,104 @@
+<?php
+/**
+ * Tests for Block Bindings API helper functions.
+ *
+ * @package WordPress
+ * @subpackage Blocks
+ * @since 6.5.0
+ *
+ * @group blocks
+ * @group block-bindings
+ */
+class Tests_Block_Bindings_Register extends WP_UnitTestCase {
+
+	public static $test_source_name       = 'test/source';
+	public static $test_source_properties = array();
+
+	/**
+	 * Set up before each test.
+	 *
+	 * @since 6.5.0
+	 */
+	public function set_up() {
+		parent::set_up();
+
+		self::$test_source_properties = array(
+			'label'              => 'Test source',
+			'get_value_callback' => function () {
+				return 'test-value';
+			},
+		);
+	}
+
+	/**
+	 * Tear down after each test.
+	 *
+	 * @since 6.5.0
+	 */
+	public function tear_down() {
+		foreach ( get_all_registered_block_bindings_sources() as $source_name => $source_properties ) {
+			if ( str_starts_with( $source_name, 'test/' ) ) {
+				unregister_block_bindings_source( $source_name );
+			}
+		}
+
+		parent::tear_down();
+	}
+
+	/**
+	 * Should find all registered sources.
+	 *
+	 * @ticket 60282
+	 *
+	 * @covers ::register_block_bindings_source
+	 * @covers ::get_all_registered_block_bindings_sources
+	 * @covers ::get_block_bindings_source
+	 * @covers WP_Block_Bindings_Source::__construct
+	 */
+	public function test_get_all_registered() {
+		$source_one_name       = 'test/source-one';
+		$source_one_properties = self::$test_source_properties;
+		register_block_bindings_source( $source_one_name, $source_one_properties );
+
+		$source_two_name       = 'test/source-two';
+		$source_two_properties = self::$test_source_properties;
+		register_block_bindings_source( $source_two_name, $source_two_properties );
+
+		$source_three_name       = 'test/source-three';
+		$source_three_properties = self::$test_source_properties;
+		register_block_bindings_source( $source_three_name, $source_three_properties );
+
+		$expected = array(
+			$source_one_name         => new WP_Block_Bindings_Source( $source_one_name, $source_one_properties ),
+			$source_two_name         => new WP_Block_Bindings_Source( $source_two_name, $source_two_properties ),
+			$source_three_name       => new WP_Block_Bindings_Source( $source_three_name, $source_three_properties ),
+			'core/post-meta'         => get_block_bindings_source( 'core/post-meta' ),
+			'core/pattern-overrides' => get_block_bindings_source( 'core/pattern-overrides' ),
+		);
+
+		$registered = get_all_registered_block_bindings_sources();
+		$this->assertEquals( $expected, $registered );
+	}
+
+	/**
+	 * Should unregister existing block binding source.
+	 *
+	 * @ticket 60282
+	 *
+	 * @covers ::register_block_bindings_source
+	 * @covers ::unregister_block_bindings_source
+	 * @covers WP_Block_Bindings_Source::__construct
+	 */
+	public function test_unregister_block_source() {
+		register_block_bindings_source( self::$test_source_name, self::$test_source_properties );
+
+		$result = unregister_block_bindings_source( self::$test_source_name );
+		$this->assertEquals(
+			new WP_Block_Bindings_Source(
+				self::$test_source_name,
+				self::$test_source_properties
+			),
+			$result
+		);
+	}
+}
diff --git a/tests/block-bindings/render.php b/tests/block-bindings/render.php
new file mode 100644
index 0000000000..aac4c417fd
--- /dev/null
+++ b/tests/block-bindings/render.php
@@ -0,0 +1,237 @@
+<?php
+/**
+ * Tests for Block Bindings integration with block rendering.
+ *
+ * @package WordPress
+ * @subpackage Blocks
+ * @since 6.5.0
+ *
+ * @group blocks
+ * @group block-bindings
+ */
+class WP_Block_Bindings_Render extends WP_UnitTestCase {
+
+	const SOURCE_NAME  = 'test/source';
+	const SOURCE_LABEL = array(
+		'label' => 'Test source',
+	);
+
+	/**
+	 * Tear down after each test.
+	 *
+	 * @since 6.5.0
+	 */
+	public function tear_down() {
+		foreach ( get_all_registered_block_bindings_sources() as $source_name => $source_properties ) {
+			if ( str_starts_with( $source_name, 'test/' ) ) {
+				unregister_block_bindings_source( $source_name );
+			}
+		}
+
+		parent::tear_down();
+	}
+
+	/**
+	 * Test if the block content is updated with the value returned by the source.
+	 *
+	 * @ticket 60282
+	 *
+	 * @covers ::register_block_bindings_source
+	 */
+	public function test_update_block_with_value_from_source() {
+		$get_value_callback = function () {
+			return 'test source value';
+		};
+
+		register_block_bindings_source(
+			self::SOURCE_NAME,
+			array(
+				'label'              => self::SOURCE_LABEL,
+				'get_value_callback' => $get_value_callback,
+			)
+		);
+
+		$block_content = <<<HTML
+<!-- wp:paragraph {"metadata":{"bindings":{"content":{"source":"test/source"}}}} -->
+<p>This should not appear</p>
+<!-- /wp:paragraph -->
+HTML;
+		$parsed_blocks = parse_blocks( $block_content );
+		$block         = new WP_Block( $parsed_blocks[0] );
+		$result        = $block->render();
+
+		$this->assertSame(
+			'test source value',
+			$block->attributes['content'],
+			"The 'content' attribute should be updated with the value returned by the source."
+		);
+		$this->assertSame(
+			'<p>test source value</p>',
+			trim( $result ),
+			'The block content should be updated with the value returned by the source.'
+		);
+	}
+
+	/**
+	 * Test passing arguments to the source.
+	 *
+	 * @ticket 60282
+	 *
+	 * @covers ::register_block_bindings_source
+	 */
+	public function test_passing_arguments_to_source() {
+		$get_value_callback = function ( $source_args, $block_instance, $attribute_name ) {
+			$value = $source_args['key'];
+			return "The attribute name is '$attribute_name' and its binding has argument 'key' with value '$value'.";
+		};
+
+		register_block_bindings_source(
+			self::SOURCE_NAME,
+			array(
+				'label'              => self::SOURCE_LABEL,
+				'get_value_callback' => $get_value_callback,
+			)
+		);
+
+		$block_content = <<<HTML
+<!-- wp:paragraph {"metadata":{"bindings":{"content":{"source":"test/source", "args": {"key": "test"}}}}} -->
+<p>This should not appear</p>
+<!-- /wp:paragraph -->
+HTML;
+		$parsed_blocks = parse_blocks( $block_content );
+		$block         = new WP_Block( $parsed_blocks[0] );
+		$result        = $block->render();
+
+		$this->assertSame(
+			"The attribute name is 'content' and its binding has argument 'key' with value 'test'.",
+			$block->attributes['content'],
+			"The 'content' attribute should be updated with the value returned by the source."
+		);
+		$this->assertSame(
+			"<p>The attribute name is 'content' and its binding has argument 'key' with value 'test'.</p>",
+			trim( $result ),
+			'The block content should be updated with the value returned by the source.'
+		);
+	}
+
+	/**
+	 * Tests passing `uses_context` as argument to the source.
+	 *
+	 * @ticket 60525
+	 *
+	 * @covers ::register_block_bindings_source
+	 */
+	public function test_passing_uses_context_to_source() {
+		$get_value_callback = function ( $source_args, $block_instance, $attribute_name ) {
+			$value = $block_instance->context['sourceContext'];
+			return "Value: $value";
+		};
+
+		register_block_bindings_source(
+			self::SOURCE_NAME,
+			array(
+				'label'              => self::SOURCE_LABEL,
+				'get_value_callback' => $get_value_callback,
+				'uses_context'       => array( 'sourceContext' ),
+			)
+		);
+
+		$block_content = <<<HTML
+<!-- wp:paragraph {"metadata":{"bindings":{"content":{"source":"test/source", "args": {"key": "test"}}}}} -->
+<p>This should not appear</p>
+<!-- /wp:paragraph -->
+HTML;
+		$parsed_blocks = parse_blocks( $block_content );
+		$block         = new WP_Block( $parsed_blocks[0], array( 'sourceContext' => 'source context value' ) );
+		$result        = $block->render();
+
+		$this->assertSame(
+			'Value: source context value',
+			$block->attributes['content'],
+			"The 'content' should be updated with the value of the source context."
+		);
+		$this->assertSame(
+			'<p>Value: source context value</p>',
+			trim( $result ),
+			'The block content should be updated with the value of the source context.'
+		);
+	}
+
+	/**
+	 * Tests if the block content is updated with the value returned by the source
+	 * for the Image block in the placeholder state.
+	 *
+	 * @ticket 60282
+	 *
+	 * @covers ::register_block_bindings_source
+	 */
+	public function test_update_block_with_value_from_source_image_placeholder() {
+		$get_value_callback = function () {
+			return 'https://example.com/image.jpg';
+		};
+
+		register_block_bindings_source(
+			self::SOURCE_NAME,
+			array(
+				'label'              => self::SOURCE_LABEL,
+				'get_value_callback' => $get_value_callback,
+			)
+		);
+
+		$block_content = <<<HTML
+<!-- wp:image {"metadata":{"bindings":{"url":{"source":"test/source"}}}} -->
+<figure class="wp-block-image"><img alt=""/></figure>
+<!-- /wp:image -->
+HTML;
+		$parsed_blocks = parse_blocks( $block_content );
+		$block         = new WP_Block( $parsed_blocks[0] );
+		$result        = $block->render();
+
+		$this->assertSame(
+			'https://example.com/image.jpg',
+			$block->attributes['url'],
+			"The 'url' attribute should be updated with the value returned by the source."
+		);
+		$this->assertSame(
+			'<figure class="wp-block-image"><img src="https://example.com/image.jpg" alt=""/></figure>',
+			trim( $result ),
+			'The block content should be updated with the value returned by the source.'
+		);
+	}
+
+	/**
+	 * Tests if the block content is sanitized when unsafe HTML is passed.
+	 *
+	 * @ticket 60651
+	 *
+	 * @covers ::register_block_bindings_source
+	 */
+	public function test_source_value_with_unsafe_html_is_sanitized() {
+		$get_value_callback = function () {
+			return '<script>alert("Unsafe HTML")</script>';
+		};
+
+		register_block_bindings_source(
+			self::SOURCE_NAME,
+			array(
+				'label'              => self::SOURCE_LABEL,
+				'get_value_callback' => $get_value_callback,
+			)
+		);
+
+		$block_content = <<<HTML
+<!-- wp:paragraph {"metadata":{"bindings":{"content":{"source":"test/source"}}}} -->
+<p>This should not appear</p>
+<!-- /wp:paragraph -->
+HTML;
+		$parsed_blocks = parse_blocks( $block_content );
+		$block         = new WP_Block( $parsed_blocks[0] );
+		$result        = $block->render();
+
+		$this->assertSame(
+			'<p>alert("Unsafe HTML")</p>',
+			trim( $result ),
+			'The block content should be updated with the value returned by the source.'
+		);
+	}
+}
diff --git a/tests/block-bindings/wpBlockBindingsRegistry.php b/tests/block-bindings/wpBlockBindingsRegistry.php
new file mode 100644
index 0000000000..28e1a5b4bb
--- /dev/null
+++ b/tests/block-bindings/wpBlockBindingsRegistry.php
@@ -0,0 +1,394 @@
+<?php
+/**
+ * Tests for WP_Block_Bindings_Registry.
+ *
+ * @package WordPress
+ * @subpackage Blocks
+ * @since 6.5.0
+ *
+ * @group blocks
+ * @group block-bindings
+ *
+ * @coversDefaultClass WP_Block_Bindings_Registry
+ */
+class Tests_Blocks_wpBlockBindingsRegistry extends WP_UnitTestCase {
+
+	public static $test_source_name       = 'test/source';
+	public static $test_source_properties = array();
+
+	/**
+	 * Fake block bindings registry.
+	 *
+	 * @since 6.5.0
+	 * @var WP_Block_Bindings_Registry
+	 */
+	private $registry = null;
+
+	/**
+	 * Set up each test method.
+	 *
+	 * @since 6.5.0
+	 */
+	public function set_up() {
+		parent::set_up();
+
+		$this->registry = new WP_Block_Bindings_Registry();
+
+		self::$test_source_properties = array(
+			'label'              => 'Test source',
+			'get_value_callback' => function () {
+				return 'test-value';
+			},
+			'uses_context'       => array( 'sourceContext' ),
+		);
+	}
+
+	/**
+	 * Tear down each test method.
+	 *
+	 * @since 6.5.0
+	 */
+	public function tear_down() {
+		$this->registry = null;
+
+		parent::tear_down();
+	}
+
+	/**
+	 * Should reject numbers as block binding source name.
+	 *
+	 * @ticket 60282
+	 *
+	 * @covers WP_Block_Bindings_Registry::register
+	 *
+	 * @expectedIncorrectUsage WP_Block_Bindings_Registry::register
+	 */
+	public function test_register_invalid_non_string_names() {
+		$result = $this->registry->register( 1, self::$test_source_properties );
+		$this->assertFalse( $result );
+	}
+
+	/**
+	 * Should reject block binding source name without a namespace.
+	 *
+	 * @ticket 60282
+	 *
+	 * @covers WP_Block_Bindings_Registry::register
+	 *
+	 * @expectedIncorrectUsage WP_Block_Bindings_Registry::register
+	 */
+	public function test_register_invalid_names_without_namespace() {
+		$result = $this->registry->register( 'post-meta', self::$test_source_properties );
+		$this->assertFalse( $result );
+	}
+
+	/**
+	 * Should reject block binding source name with invalid characters.
+	 *
+	 * @ticket 60282
+	 *
+	 * @covers WP_Block_Bindings_Registry::register
+	 *
+	 * @expectedIncorrectUsage WP_Block_Bindings_Registry::register
+	 */
+	public function test_register_invalid_characters() {
+		$result = $this->registry->register( 'still/_doing_it_wrong', array() );
+		$this->assertFalse( $result );
+	}
+
+	/**
+	 * Should reject block binding source name with uppercase characters.
+	 *
+	 * @ticket 60282
+	 *
+	 * @covers WP_Block_Bindings_Registry::register
+	 *
+	 * @expectedIncorrectUsage WP_Block_Bindings_Registry::register
+	 */
+	public function test_register_invalid_uppercase_characters() {
+		$result = $this->registry->register( 'Core/PostMeta', self::$test_source_properties );
+		$this->assertFalse( $result );
+	}
+
+	/**
+	 * Should reject block bindings registration without a label.
+	 *
+	 * @ticket 60282
+	 *
+	 * @covers WP_Block_Bindings_Registry::register
+	 *
+	 * @expectedIncorrectUsage WP_Block_Bindings_Registry::register
+	 */
+	public function test_register_invalid_missing_label() {
+
+		// Remove the label from the properties.
+		unset( self::$test_source_properties['label'] );
+
+		$result = $this->registry->register( self::$test_source_name, self::$test_source_properties );
+		$this->assertFalse( $result );
+	}
+
+	/**
+	 * Should reject block bindings registration without a get_value_callback.
+	 *
+	 * @ticket 60282
+	 *
+	 * @covers WP_Block_Bindings_Registry::register
+	 *
+	 * @expectedIncorrectUsage WP_Block_Bindings_Registry::register
+	 */
+	public function test_register_invalid_missing_get_value_callback() {
+
+		// Remove the get_value_callback from the properties.
+		unset( self::$test_source_properties['get_value_callback'] );
+
+		$result = $this->registry->register( self::$test_source_name, self::$test_source_properties );
+		$this->assertFalse( $result );
+	}
+
+	/**
+	 * Should reject block bindings registration if `get_value_callback` is not a callable.
+	 *
+	 * @ticket 60282
+	 *
+	 * @covers WP_Block_Bindings_Registry::register
+	 *
+	 * @expectedIncorrectUsage WP_Block_Bindings_Registry::register
+	 */
+	public function test_register_invalid_incorrect_callback_type() {
+
+		self::$test_source_properties['get_value_callback'] = 'not-a-callback';
+
+		$result = $this->registry->register( self::$test_source_name, self::$test_source_properties );
+		$this->assertFalse( $result );
+	}
+
+	/**
+	 * Should reject block bindings registration if `uses_context` is not an array.
+	 *
+	 * @ticket 60525
+	 *
+	 * @covers WP_Block_Bindings_Registry::register
+	 *
+	 * @expectedIncorrectUsage WP_Block_Bindings_Registry::register
+	 */
+	public function test_register_invalid_string_uses_context() {
+
+		self::$test_source_properties['uses_context'] = 'not-an-array';
+
+		$result = $this->registry->register( self::$test_source_name, self::$test_source_properties );
+		$this->assertFalse( $result );
+	}
+
+	/**
+	 * Should accept valid block binding source.
+	 *
+	 * @ticket 60282
+	 *
+	 * @covers WP_Block_Bindings_Registry::register
+	 * @covers WP_Block_Bindings_Source::__construct
+	 */
+	public function test_register_block_binding_source() {
+		$result = $this->registry->register( self::$test_source_name, self::$test_source_properties );
+		$this->assertEquals(
+			new WP_Block_Bindings_Source(
+				self::$test_source_name,
+				self::$test_source_properties
+			),
+			$result
+		);
+		$this->assertSame( 'test/source', $result->name );
+		$this->assertSame( 'Test source', $result->label );
+		$this->assertSame(
+			'test-value',
+			$result->get_value( array(), null, '' )
+		);
+		$this->assertEquals( array( 'sourceContext' ), $result->uses_context );
+	}
+
+	/**
+	 * Unregistering should fail if a block binding source is not registered.
+	 *
+	 * @ticket 60282
+	 *
+	 * @covers WP_Block_Bindings_Registry::unregister
+	 *
+	 * @expectedIncorrectUsage WP_Block_Bindings_Registry::unregister
+	 */
+	public function test_unregister_not_registered_block() {
+		$result = $this->registry->unregister( 'test/unregistered' );
+		$this->assertFalse( $result );
+	}
+
+	/**
+	 * Should unregister existing block binding source.
+	 *
+	 * @ticket 60282
+	 *
+	 * @covers WP_Block_Bindings_Registry::register
+	 * @covers WP_Block_Bindings_Registry::unregister
+	 * WP_Block_Bindings_Source::__construct
+	 */
+	public function test_unregister_block_source() {
+		$this->registry->register( self::$test_source_name, self::$test_source_properties );
+
+		$result = $this->registry->unregister( self::$test_source_name );
+		$this->assertEquals(
+			new WP_Block_Bindings_Source(
+				self::$test_source_name,
+				self::$test_source_properties
+			),
+			$result
+		);
+	}
+
+	/**
+	 * Should find all registered sources.
+	 *
+	 * @ticket 60282
+	 *
+	 * @covers WP_Block_Bindings_Registry::register
+	 * @covers WP_Block_Bindings_Registry::get_all_registered
+	 * WP_Block_Bindings_Source::__construct
+	 */
+	public function test_get_all_registered() {
+		$source_one_name       = 'test/source-one';
+		$source_one_properties = self::$test_source_properties;
+		$this->registry->register( $source_one_name, $source_one_properties );
+
+		$source_two_name       = 'test/source-two';
+		$source_two_properties = self::$test_source_properties;
+		$this->registry->register( $source_two_name, $source_two_properties );
+
+		$source_three_name       = 'test/source-three';
+		$source_three_properties = self::$test_source_properties;
+		$this->registry->register( $source_three_name, $source_three_properties );
+
+		$expected = array(
+			$source_one_name   => new WP_Block_Bindings_Source( $source_one_name, $source_one_properties ),
+			$source_two_name   => new WP_Block_Bindings_Source( $source_two_name, $source_two_properties ),
+			$source_three_name => new WP_Block_Bindings_Source( $source_three_name, $source_three_properties ),
+		);
+
+		$registered = $this->registry->get_all_registered();
+		$this->assertEquals( $expected, $registered );
+	}
+
+	/**
+	 * Should not find source that's not registered.
+	 *
+	 * @ticket 60282
+	 *
+	 * @covers WP_Block_Bindings_Registry::register
+	 * @covers WP_Block_Bindings_Registry::get_registered
+	 */
+	public function test_get_registered_rejects_unknown_source_name() {
+		$this->registry->register( self::$test_source_name, self::$test_source_properties );
+
+		$source = $this->registry->get_registered( 'test/unknown-source' );
+		$this->assertNull( $source );
+	}
+
+	/**
+	 * Should find registered block binding source by name.
+	 *
+	 * @ticket 60282
+	 *
+	 * @covers WP_Block_Bindings_Registry::register
+	 * @covers WP_Block_Bindings_Registry::get_registered
+	 * @covers WP_Block_Bindings_Source::__construct
+	 */
+	public function test_get_registered() {
+		$source_one_name       = 'test/source-one';
+		$source_one_properties = self::$test_source_properties;
+		$this->registry->register( $source_one_name, $source_one_properties );
+
+		$source_two_name       = 'test/source-two';
+		$source_two_properties = self::$test_source_properties;
+		$this->registry->register( $source_two_name, $source_two_properties );
+
+		$source_three_name       = 'test/source-three';
+		$source_three_properties = self::$test_source_properties;
+		$this->registry->register( $source_three_name, $source_three_properties );
+
+		$expected = new WP_Block_Bindings_Source( $source_two_name, $source_two_properties );
+		$result   = $this->registry->get_registered( 'test/source-two' );
+
+		$this->assertEquals(
+			$expected,
+			$result
+		);
+	}
+
+	/**
+	 * Should return false for source that's not registered.
+	 *
+	 * @ticket 60282
+	 *
+	 * @covers WP_Block_Bindings_Registry::is_registered
+	 */
+	public function test_is_registered_for_unknown_source() {
+		$result = $this->registry->is_registered( 'test/one' );
+		$this->assertFalse( $result );
+	}
+
+	/**
+	 * Should return true if source is registered.
+	 *
+	 * @ticket 60282
+	 *
+	 * @covers WP_Block_Bindings_Registry::register
+	 * @covers WP_Block_Bindings_Registry::is_registered
+	 */
+	public function test_is_registered_for_known_source() {
+		$this->registry->register( self::$test_source_name, self::$test_source_properties );
+
+		$result = $this->registry->is_registered( self::$test_source_name );
+		$this->assertTrue( $result );
+	}
+
+	/**
+	 * Tests merging `uses_context` from multiple sources.
+	 *
+	 * @ticket 60525
+	 *
+	 * @covers ::register_block_bindings_source
+	 * @covers WP_Block_Type::get_uses_context
+	 */
+	public function test_merging_uses_context_from_multiple_sources() {
+		$get_value_callback = function () {
+			return 'Anything';
+		};
+
+		$block_registry        = WP_Block_Type_Registry::get_instance();
+		$original_uses_context = $block_registry->get_registered( 'core/paragraph' )->uses_context;
+
+		register_block_bindings_source(
+			'test/source-one',
+			array(
+				'label'              => 'Test Source One',
+				'get_value_callback' => $get_value_callback,
+				'uses_context'       => array( 'commonContext', 'sourceOneContext' ),
+			)
+		);
+
+		register_block_bindings_source(
+			'test/source-two',
+			array(
+				'label'              => 'Test Source Two',
+				'get_value_callback' => $get_value_callback,
+				'uses_context'       => array( 'commonContext', 'sourceTwoContext' ),
+			)
+		);
+
+		$new_uses_context = $block_registry->get_registered( 'core/paragraph' )->uses_context;
+		// Checks that the resulting `uses_context` contains the values from both sources.
+		$this->assertContains( 'commonContext', $new_uses_context );
+		$this->assertContains( 'sourceOneContext', $new_uses_context );
+		$this->assertContains( 'sourceTwoContext', $new_uses_context );
+		// Checks that the resulting `uses_context` added 3 unique items.
+		$this->assertSame( count( $original_uses_context ) + 3, count( $new_uses_context ) );
+		// Checks that the array isn't sparse to prevent issues in the editor.
+		$this->assertSame( array_key_last( $new_uses_context ), count( $new_uses_context ) - 1 );
+	}
+}
diff --git a/tests/block-supports/duotone.php b/tests/block-supports/duotone.php
index 2077ef705b..5a31dc9362 100644
--- a/tests/block-supports/duotone.php
+++ b/tests/block-supports/duotone.php
@@ -3,12 +3,14 @@
 /**
  * Test the block WP_Duotone class.
  *
- * @package WordPress
+ * @group block-supports
+ *
+ * @coversDefaultClass WP_Duotone
  */
 
-class Tests_Block_Supports_DuoTones extends WP_UnitTestCase {
+class Tests_Block_Supports_Duotone extends WP_UnitTestCase {
 	/**
-	 * Cleans up CSS added to block-supports from duotone styles. We neeed to do this
+	 * Cleans up CSS added to block-supports from duotone styles. We need to do this
 	 * in order to avoid impacting other tests.
 	 */
 	public static function wpTearDownAfterClass() {
@@ -100,6 +102,46 @@ class Tests_Block_Supports_DuoTones extends WP_UnitTestCase {
 		);
 	}
 
+	/**
+	 * Tests whether the CSS declarations are generated even if the block content is
+	 * empty. This is needed to make the CSS output stable across paginations for
+	 * features like the enhanced pagination of the Query block.
+	 *
+	 * @ticket 59694
+	 *
+	 * @covers ::render_duotone_support
+	 */
+	public function test_css_declarations_are_generated_even_with_empty_block_content() {
+		$block    = array(
+			'blockName' => 'core/image',
+			'attrs'     => array( 'style' => array( 'color' => array( 'duotone' => 'var:preset|duotone|blue-orange' ) ) ),
+		);
+		$wp_block = new WP_Block( $block );
+
+		/*
+		 * Handling to access the static WP_Duotone::$block_css_declarations property.
+		 *
+		 * Why is an instance needed?
+		 * WP_Duotone is a static class by design, meaning it only contains static properties and methods.
+		 * In production, it should not be instantiated. However, as of PHP 8.3, ReflectionProperty::setValue()
+		 * needs an object.
+		 */
+		$wp_duotone                      = new WP_Duotone();
+		$block_css_declarations_property = new ReflectionProperty( 'WP_Duotone', 'block_css_declarations' );
+		$block_css_declarations_property->setAccessible( true );
+		$previous_value = $block_css_declarations_property->getValue();
+		$block_css_declarations_property->setValue( $wp_duotone, array() );
+
+		WP_Duotone::render_duotone_support( '', $block, $wp_block );
+		$actual = $block_css_declarations_property->getValue();
+
+		// Reset the property.
+		$block_css_declarations_property->setValue( $wp_duotone, $previous_value );
+		$block_css_declarations_property->setAccessible( false );
+
+		$this->assertNotEmpty( $actual );
+	}
+
 	/**
 	 * @dataProvider data_is_preset
 	 */
@@ -124,4 +166,32 @@ class Tests_Block_Supports_DuoTones extends WP_UnitTestCase {
 			'invalid'                         => array( 'not a valid attribute', false ),
 		);
 	}
+
+	/**
+	 * @dataProvider data_colord_parse_hue
+	 * @ticket 59496
+	 */
+	public function test_colord_parse_hue( $value, $unit, $expected ) {
+		$reflection = new ReflectionMethod( 'WP_Duotone', 'colord_parse_hue' );
+		$reflection->setAccessible( true );
+
+		$this->assertSame( $expected, $reflection->invoke( null, $value, $unit ) );
+	}
+
+	/**
+	 * Data provider.
+	 *
+	 * @return array[].
+	 */
+	public function data_colord_parse_hue() {
+		return array(
+			'deg-angle-unit'                => array( 120, 'deg', 120.0 ),
+			'grad-angle-unit'               => array( 120, 'grad', 108.0 ),
+			'turn-angle-unit'               => array( 120, 'turn', 43200.0 ),
+			'rad-angle-unit'                => array( 120, 'rad', 6875.493541569878 ),
+			'empty-angle-unit'              => array( 120, '', 120.0 ),
+			'invalid-angle-unit'            => array( 120, 'invalid', 120.0 ),
+			'negative-value-deg-angle-unit' => array( -120, 'deg', -120.0 ),
+		);
+	}
 }
diff --git a/tests/block-supports/elements.php b/tests/block-supports/elements.php
deleted file mode 100644
index 0b1f720b5a..0000000000
--- a/tests/block-supports/elements.php
+++ /dev/null
@@ -1,173 +0,0 @@
-<?php
-/**
- * @group block-supports
- *
- * @covers ::wp_render_elements_support
- */
-class Tests_Block_Supports_Elements extends WP_UnitTestCase {
-	/**
-	 * Given a string containing a class prefixed by "wp-elements-" followed by a unique id,
-	 * this function returns a string where the id is one instead of being unique.
-	 *
-	 * @param string $block_content String containing unique id classes.
-	 * @return string String where the unique id classes were replaced with "wp-elements-1".
-	 */
-	private static function make_unique_id_one( $block_content ) {
-		return preg_replace( '/wp-elements-[a-zA-Z0-9]+/', 'wp-elements-1', $block_content );
-	}
-
-	/**
-	 * Test wp_render_elements_support() with a simple paragraph and link color preset.
-	 * @ticket 54337
-	 */
-	public function test_simple_paragraph_link_color() {
-		$result = self::make_unique_id_one(
-			wp_render_elements_support(
-				'<p>Hello <a href="http://www.wordpress.org/">WordPress</a>!</p>',
-				array(
-					'blockName' => 'core/paragraph',
-					'attrs'     => array(
-						'style' => array(
-							'elements' => array(
-								'link' => array(
-									'color' => array(
-										'text' => 'var:preset|color|subtle-background',
-									),
-								),
-							),
-						),
-					),
-				)
-			)
-		);
-		$this->assertSame(
-			$result,
-			'<p class="wp-elements-1">Hello <a href="http://www.wordpress.org/">WordPress</a>!</p>'
-		);
-	}
-
-	/**
-	 * Test wp_render_elements_support() with a paragraph containing a class.
-	 * @ticket 54337
-	 */
-	public function test_class_paragraph_link_color() {
-		$result = self::make_unique_id_one(
-			wp_render_elements_support(
-				'<p class="has-dark-gray-background-color has-background">Hello <a href="http://www.wordpress.org/">WordPress</a>!</p>',
-				array(
-					'blockName' => 'core/paragraph',
-					'attrs'     => array(
-						'style'           => array(
-							'elements' => array(
-								'link' => array(
-									'color' => array(
-										'text' => 'red',
-									),
-								),
-							),
-						),
-						'backgroundColor' => 'dark-gray',
-					),
-				)
-			)
-		);
-		$this->assertSame(
-			$result,
-			'<p class="has-dark-gray-background-color has-background wp-elements-1">Hello <a href="http://www.wordpress.org/">WordPress</a>!</p>'
-		);
-	}
-
-	/**
-	 * Test wp_render_elements_support() with a paragraph containing a anchor.
-	 * @ticket 54337
-	 */
-	public function test_anchor_paragraph_link_color() {
-		$result = self::make_unique_id_one(
-			wp_render_elements_support(
-				'<p id="anchor">Hello <a href="http://www.wordpress.org/">WordPress</a>!</p>',
-				array(
-					'blockName' => 'core/paragraph',
-					'attrs'     => array(
-						'style' => array(
-							'elements' => array(
-								'link' => array(
-									'color' => array(
-										'text' => '#fff000',
-									),
-								),
-							),
-						),
-					),
-				)
-			)
-		);
-		$this->assertSame(
-			$result,
-			'<p class="wp-elements-1" id="anchor">Hello <a href="http://www.wordpress.org/">WordPress</a>!</p>'
-		);
-	}
-
-	/**
-	 * Test wp_render_elements_support() with a group block that has a button
-	 * element color set.
-	 *
-	 * @ticket 59309
-	 */
-	public function test_group_with_button_element_style() {
-		$result = self::make_unique_id_one(
-			wp_render_elements_support(
-				'<div class="wp-block-group"><div class="wp-block-buttons is-layout-flex wp-block-buttons-is-layout-flex"><div class="wp-block-button"><a class="wp-block-button__link wp-element-button">Button</a></div></div></div>',
-				array(
-					'blockName' => 'core/group',
-					'attrs'     => array(
-						'style' => array(
-							'elements' => array(
-								'button' => array(
-									'color' => array(
-										'text' => 'var:preset|color|vivid-red',
-									),
-								),
-							),
-						),
-					),
-				)
-			)
-		);
-		$this->assertSame(
-			$result,
-			'<div class="wp-block-group wp-elements-1"><div class="wp-block-buttons is-layout-flex wp-block-buttons-is-layout-flex"><div class="wp-block-button"><a class="wp-block-button__link wp-element-button">Button</a></div></div></div>'
-		);
-	}
-
-	/**
-	 * Test wp_render_elements_support() with a group block that has a heading
-	 * element color set.
-	 *
-	 * @ticket 59309
-	 */
-	public function test_group_with_heading_element_style() {
-		$result = self::make_unique_id_one(
-			wp_render_elements_support(
-				'<div class="wp-block-group"><h2 class="wp-block-heading">Test</h2></div>',
-				array(
-					'blockName' => 'core/group',
-					'attrs'     => array(
-						'style' => array(
-							'elements' => array(
-								'heading' => array(
-									'color' => array(
-										'text' => 'var:preset|color|vivid-red',
-									),
-								),
-							),
-						),
-					),
-				)
-			)
-		);
-		$this->assertSame(
-			$result,
-			'<div class="wp-block-group wp-elements-1"><h2 class="wp-block-heading">Test</h2></div>'
-		);
-	}
-}
diff --git a/tests/block-supports/layout.php b/tests/block-supports/layout.php
index df0abf9b49..a5f67f50f9 100644
--- a/tests/block-supports/layout.php
+++ b/tests/block-supports/layout.php
@@ -171,6 +171,7 @@ class Test_Block_Supports_Layout extends WP_UnitTestCase {
 	/**
 	 * @ticket 57584
 	 * @ticket 58548
+	 * @ticket 60292
 	 *
 	 * @dataProvider data_layout_support_flag_renders_classnames_on_wrapper
 	 *
@@ -250,6 +251,115 @@ class Test_Block_Supports_Layout extends WP_UnitTestCase {
 				),
 				'expected_output' => '<div class="wp-block-group"><div class="wp-block-group__inner-wrapper is-layout-flow wp-block-group-is-layout-flow"></div></div>',
 			),
+			'skip classname output if block does not support layout and there are no child layout classes to be output' => array(
+				'args'            => array(
+					'block_content' => '<p>A paragraph</p>',
+					'block'         => array(
+						'blockName'    => 'core/paragraph',
+						'attrs'        => array(
+							'style' => array(
+								'layout' => array(
+									'selfStretch' => 'fit',
+								),
+							),
+						),
+						'innerBlocks'  => array(),
+						'innerHTML'    => '<p>A paragraph</p>',
+						'innerContent' => array( '<p>A paragraph</p>' ),
+					),
+				),
+				'expected_output' => '<p>A paragraph</p>',
+			),
+		);
+	}
+
+	/**
+	 * Check that wp_restore_group_inner_container() restores the legacy inner container on the Group block.
+	 *
+	 * @ticket 60130
+	 *
+	 * @covers ::wp_restore_group_inner_container
+	 *
+	 * @dataProvider data_restore_group_inner_container
+	 *
+	 * @param array  $args            Dataset to test.
+	 * @param string $expected_output The expected output.
+	 */
+	public function test_restore_group_inner_container( $args, $expected_output ) {
+		$actual_output = wp_restore_group_inner_container( $args['block_content'], $args['block'] );
+		$this->assertEquals( $expected_output, $actual_output );
+	}
+
+	/**
+	 * Data provider for test_restore_group_inner_container.
+	 *
+	 * @return array
+	 */
+	public function data_restore_group_inner_container() {
+		return array(
+			'group block with existing inner container'    => array(
+				'args'            => array(
+					'block_content' => '<div class="wp-block-group"><div class="wp-block-group__inner-container"></div></div>',
+					'block'         => array(
+						'blockName'    => 'core/group',
+						'attrs'        => array(
+							'layout' => array(
+								'type' => 'default',
+							),
+						),
+						'innerBlocks'  => array(),
+						'innerHTML'    => '<div class="wp-block-group"><div class="wp-block-group__inner-container"></div></div>',
+						'innerContent' => array(
+							'<div class="wp-block-group"><div class="wp-block-group__inner-container">',
+							' ',
+							' </div></div>',
+						),
+					),
+				),
+				'expected_output' => '<div class="wp-block-group"><div class="wp-block-group__inner-container"></div></div>',
+			),
+			'group block with no existing inner container' => array(
+				'args'            => array(
+					'block_content' => '<div class="wp-block-group"></div>',
+					'block'         => array(
+						'blockName'    => 'core/group',
+						'attrs'        => array(
+							'layout' => array(
+								'type' => 'default',
+							),
+						),
+						'innerBlocks'  => array(),
+						'innerHTML'    => '<div class="wp-block-group"></div>',
+						'innerContent' => array(
+							'<div class="wp-block-group">',
+							' ',
+							' </div>',
+						),
+					),
+				),
+				'expected_output' => '<div class="wp-block-group"><div class="wp-block-group__inner-container"></div></div>',
+			),
+			'group block with layout classnames'           => array(
+				'args'            => array(
+					'block_content' => '<div class="wp-block-group is-layout-constrained wp-block-group-is-layout-constrained"></div>',
+					'block'         => array(
+						'blockName'    => 'core/group',
+						'attrs'        => array(
+							'layout' => array(
+								'type' => 'default',
+							),
+						),
+						'innerBlocks'  => array(),
+						'innerHTML'    => '<div class="wp-block-group"></div>',
+						'innerContent' => array(
+							'<div class="wp-block-group">',
+							' ',
+							' </div>',
+						),
+					),
+				),
+				'expected_output' => '<div class="wp-block-group"><div class="wp-block-group__inner-container is-layout-constrained wp-block-group-is-layout-constrained"></div></div>',
+			),
 		);
 	}
 }
diff --git a/tests/block-supports/typography.php b/tests/block-supports/typography.php
index 9c547b4e5c..1eb29e1493 100644
--- a/tests/block-supports/typography.php
+++ b/tests/block-supports/typography.php
@@ -913,6 +913,7 @@ class Tests_Block_Supports_Typography extends WP_UnitTestCase {
 	 * Tests computed font size values.
 	 *
 	 * @ticket 58522
+	 * @ticket 60263
 	 *
 	 * @covers ::wp_get_computed_fluid_typography_value
 	 *
@@ -951,6 +952,16 @@ class Tests_Block_Supports_Typography extends WP_UnitTestCase {
 				),
 				'expected_output' => 'clamp(50px, 3.125rem + ((1vw - 3.2px) * 7.353), 100px)',
 			),
+			'returns `null` when maximum and minimum viewport width are equal' => array(
+				'args'            => array(
+					'minimum_viewport_width' => '800px',
+					'maximum_viewport_width' => '800px',
+					'minimum_font_size'      => '50px',
+					'maximum_font_size'      => '100px',
+					'scale_factor'           => 1,
+				),
+				'expected_output' => null,
+			),
 			'returns `null` when `maximum_viewport_width` is an unsupported unit' => array(
 				'args'            => array(
 					'minimum_viewport_width' => '320px',
diff --git a/tests/block-supports/wpRenderBackgroundSupport.php b/tests/block-supports/wpRenderBackgroundSupport.php
index 4f38db87ab..83ea7cd47c 100644
--- a/tests/block-supports/wpRenderBackgroundSupport.php
+++ b/tests/block-supports/wpRenderBackgroundSupport.php
@@ -67,6 +67,7 @@ class Tests_Block_Supports_WpRenderBackgroundSupport extends WP_UnitTestCase {
 	 * Tests that background image block support works as expected.
 	 *
 	 * @ticket 59357
+	 * @ticket 60175
 	 *
 	 * @covers ::wp_render_background_support
 	 *
@@ -135,7 +136,24 @@ class Tests_Block_Supports_WpRenderBackgroundSupport extends WP_UnitTestCase {
 						'source' => 'file',
 					),
 				),
-				'expected_wrapper'    => '<div style="background-image:url(&#039;https://example.com/image.jpg&#039;);background-size:cover;">Content</div>',
+				'expected_wrapper'    => '<div class="has-background" style="background-image:url(&#039;https://example.com/image.jpg&#039;);background-size:cover;">Content</div>',
+				'wrapper'             => '<div>Content</div>',
+			),
+			'background image style with contain, position, and repeat is applied' => array(
+				'theme_name'          => 'block-theme-child-with-fluid-typography',
+				'block_name'          => 'test/background-rules-are-output',
+				'background_settings' => array(
+					'backgroundImage' => true,
+				),
+				'background_style'    => array(
+					'backgroundImage'  => array(
+						'url'    => 'https://example.com/image.jpg',
+						'source' => 'file',
+					),
+					'backgroundRepeat' => 'no-repeat',
+					'backgroundSize'   => 'contain',
+				),
+				'expected_wrapper'    => '<div class="has-background" style="background-image:url(&#039;https://example.com/image.jpg&#039;);background-position:center;background-repeat:no-repeat;background-size:contain;">Content</div>',
 				'wrapper'             => '<div>Content</div>',
 			),
 			'background image style is appended if a style attribute already exists' => array(
@@ -150,8 +168,8 @@ class Tests_Block_Supports_WpRenderBackgroundSupport extends WP_UnitTestCase {
 						'source' => 'file',
 					),
 				),
-				'expected_wrapper'    => '<div classname="wp-block-test" style="color: red;background-image:url(&#039;https://example.com/image.jpg&#039;);background-size:cover;">Content</div>',
-				'wrapper'             => '<div classname="wp-block-test" style="color: red">Content</div>',
+				'expected_wrapper'    => '<div class="wp-block-test has-background" style="color: red;background-image:url(&#039;https://example.com/image.jpg&#039;);background-size:cover;">Content</div>',
+				'wrapper'             => '<div class="wp-block-test" style="color: red">Content</div>',
 			),
 			'background image style is appended if a style attribute containing multiple styles already exists' => array(
 				'theme_name'          => 'block-theme-child-with-fluid-typography',
@@ -165,8 +183,8 @@ class Tests_Block_Supports_WpRenderBackgroundSupport extends WP_UnitTestCase {
 						'source' => 'file',
 					),
 				),
-				'expected_wrapper'    => '<div classname="wp-block-test" style="color: red;font-size: 15px;background-image:url(&#039;https://example.com/image.jpg&#039;);background-size:cover;">Content</div>',
-				'wrapper'             => '<div classname="wp-block-test" style="color: red;font-size: 15px;">Content</div>',
+				'expected_wrapper'    => '<div class="wp-block-test has-background" style="color: red;font-size: 15px;background-image:url(&#039;https://example.com/image.jpg&#039;);background-size:cover;">Content</div>',
+				'wrapper'             => '<div class="wp-block-test" style="color: red;font-size: 15px;">Content</div>',
 			),
 			'background image style is not applied if the block does not support background image' => array(
 				'theme_name'          => 'block-theme-child-with-fluid-typography',
diff --git a/tests/block-supports/wpRenderDimensionsSupport.php b/tests/block-supports/wpRenderDimensionsSupport.php
new file mode 100644
index 0000000000..5d51c5e0a1
--- /dev/null
+++ b/tests/block-supports/wpRenderDimensionsSupport.php
@@ -0,0 +1,176 @@
+<?php
+/**
+ * @group block-supports
+ *
+ * @covers ::wp_render_dimensions_support
+ */
+class Tests_Block_Supports_WpRenderDimensionsSupport extends WP_UnitTestCase {
+	/**
+	 * @var string|null
+	 */
+	private $test_block_name;
+
+	/**
+	 * Theme root directory.
+	 *
+	 * @var string
+	 */
+	private $theme_root;
+
+	/**
+	 * Original theme directory.
+	 *
+	 * @var string
+	 */
+	private $orig_theme_dir;
+
+	public function set_up() {
+		parent::set_up();
+		$this->test_block_name = null;
+		$this->theme_root      = realpath( DIR_TESTDATA . '/themedir1' );
+		$this->orig_theme_dir  = $GLOBALS['wp_theme_directories'];
+
+		// /themes is necessary as theme.php functions assume /themes is the root if there is only one root.
+		$GLOBALS['wp_theme_directories'] = array( WP_CONTENT_DIR . '/themes', $this->theme_root );
+
+		add_filter( 'theme_root', array( $this, 'filter_set_theme_root' ) );
+		add_filter( 'stylesheet_root', array( $this, 'filter_set_theme_root' ) );
+		add_filter( 'template_root', array( $this, 'filter_set_theme_root' ) );
+
+		// Clear caches.
+		wp_clean_themes_cache();
+		unset( $GLOBALS['wp_themes'] );
+		WP_Style_Engine_CSS_Rules_Store::remove_all_stores();
+	}
+
+	public function tear_down() {
+		$GLOBALS['wp_theme_directories'] = $this->orig_theme_dir;
+
+		// Clear up the filters to modify the theme root.
+		remove_filter( 'theme_root', array( $this, 'filter_set_theme_root' ) );
+		remove_filter( 'stylesheet_root', array( $this, 'filter_set_theme_root' ) );
+		remove_filter( 'template_root', array( $this, 'filter_set_theme_root' ) );
+
+		wp_clean_themes_cache();
+		unset( $GLOBALS['wp_themes'] );
+		WP_Style_Engine_CSS_Rules_Store::remove_all_stores();
+		unregister_block_type( $this->test_block_name );
+		$this->test_block_name = null;
+		parent::tear_down();
+	}
+
+	public function filter_set_theme_root() {
+		return $this->theme_root;
+	}
+
+	/**
+	 * Tests that dimensions block support works as expected.
+	 *
+	 * @ticket 60365
+	 *
+	 * @covers ::wp_render_dimensions_support
+	 *
+	 * @dataProvider data_dimensions_block_support
+	 *
+	 * @param string $theme_name          The theme to switch to.
+	 * @param string $block_name          The test block name to register.
+	 * @param mixed  $dimensions_settings The dimensions block support settings.
+	 * @param mixed  $dimensions_style    The dimensions styles within the block attributes.
+	 * @param string $expected_wrapper    Expected markup for the block wrapper.
+	 * @param string $wrapper             Existing markup for the block wrapper.
+	 */
+	public function test_dimensions_block_support( $theme_name, $block_name, $dimensions_settings, $dimensions_style, $expected_wrapper, $wrapper ) {
+		switch_theme( $theme_name );
+		$this->test_block_name = $block_name;
+
+		register_block_type(
+			$this->test_block_name,
+			array(
+				'api_version' => 2,
+				'attributes'  => array(
+					'style' => array(
+						'type' => 'object',
+					),
+				),
+				'supports'    => array(
+					'dimensions' => $dimensions_settings,
+				),
+			)
+		);
+
+		$block = array(
+			'blockName' => $block_name,
+			'attrs'     => array(
+				'style' => array(
+					'dimensions' => $dimensions_style,
+				),
+			),
+		);
+
+		$actual = wp_render_dimensions_support( $wrapper, $block );
+
+		$this->assertEquals(
+			$expected_wrapper,
+			$actual,
+			'Dimensions block wrapper markup should be correct'
+		);
+	}
+
+	/**
+	 * Data provider.
+	 *
+	 * @return array
+	 */
+	public function data_dimensions_block_support() {
+		return array(
+			'aspect ratio style is applied, with min-height unset' => array(
+				'theme_name'          => 'block-theme-child-with-fluid-typography',
+				'block_name'          => 'test/dimensions-rules-are-output',
+				'dimensions_settings' => array(
+					'aspectRatio' => true,
+				),
+				'dimensions_style'    => array(
+					'aspectRatio' => '16/9',
+				),
+				'expected_wrapper'    => '<div class="has-aspect-ratio" style="aspect-ratio:16/9;min-height:unset;">Content</div>',
+				'wrapper'             => '<div>Content</div>',
+			),
+			'dimensions style is appended if a style attribute already exists' => array(
+				'theme_name'          => 'block-theme-child-with-fluid-typography',
+				'block_name'          => 'test/dimensions-rules-are-output',
+				'dimensions_settings' => array(
+					'aspectRatio' => true,
+				),
+				'dimensions_style'    => array(
+					'aspectRatio' => '16/9',
+				),
+				'expected_wrapper'    => '<div class="wp-block-test has-aspect-ratio" style="color:red;aspect-ratio:16/9;min-height:unset;">Content</div>',
+				'wrapper'             => '<div class="wp-block-test" style="color:red;">Content</div>',
+			),
+			'aspect ratio style is unset if block has min-height set' => array(
+				'theme_name'          => 'block-theme-child-with-fluid-typography',
+				'block_name'          => 'test/dimensions-rules-are-output',
+				'dimensions_settings' => array(
+					'aspectRatio' => true,
+				),
+				'dimensions_style'    => array(
+					'minHeight' => '100px',
+				),
+				'expected_wrapper'    => '<div style="min-height:100px;aspect-ratio:unset;">Content</div>',
+				'wrapper'             => '<div style="min-height:100px">Content</div>',
+			),
+			'aspect ratio style is not applied if the block does not support aspect ratio' => array(
+				'theme_name'          => 'block-theme-child-with-fluid-typography',
+				'block_name'          => 'test/background-rules-are-not-output',
+				'dimensions_settings' => array(
+					'aspectRatio' => false,
+				),
+				'dimensions_style'    => array(
+					'aspectRatio' => '16/9',
+				),
+				'expected_wrapper'    => '<div>Content</div>',
+				'wrapper'             => '<div>Content</div>',
+			),
+		);
+	}
+}
diff --git a/tests/block-supports/wpRenderElementsSupport.php b/tests/block-supports/wpRenderElementsSupport.php
new file mode 100644
index 0000000000..791cec8a72
--- /dev/null
+++ b/tests/block-supports/wpRenderElementsSupport.php
@@ -0,0 +1,217 @@
+<?php
+
+/**
+ * @group block-supports
+ *
+ * @covers ::wp_render_elements_support
+ */
+class Tests_Block_Supports_WpRenderElementsSupport extends WP_UnitTestCase {
+	/**
+	 * @var string|null
+	 */
+	private $test_block_name;
+
+	public function tear_down() {
+		WP_Style_Engine_CSS_Rules_Store::remove_all_stores();
+		unregister_block_type( $this->test_block_name );
+		$this->test_block_name = null;
+		parent::tear_down();
+	}
+
+	/**
+	 * Tests that block supports leaves block content alone if the block type
+	 * isn't registered.
+	 *
+	 * @ticket 59578
+	 *
+	 * @covers ::wp_render_elements_support
+	 */
+	public function test_leaves_block_content_alone_when_block_type_not_registered() {
+		$block = array(
+			'blockName' => 'test/element-block-supports',
+			'attrs'     => array(
+				'style' => array(
+					'elements' => array(
+						'button' => array(
+							'color' => array(
+								'text'       => 'var:preset|color|vivid-red',
+								'background' => '#fff',
+							),
+						),
+					),
+				),
+			),
+		);
+
+		$block_markup = '<p>Hello <a href="http://www.wordpress.org/">WordPress</a>!</p>';
+		$actual       = wp_render_elements_support( $block_markup, $block );
+
+		$this->assertSame( $block_markup, $actual, 'Expected to leave block content unmodified, but found changes.' );
+	}
+
+	/**
+	 * Tests that elements block support applies the correct classname.
+	 *
+	 * @ticket 59555
+	 *
+	 * @covers ::wp_render_elements_support
+	 *
+	 * @dataProvider data_elements_block_support_class
+	 *
+	 * @param array  $color_settings  The color block support settings used for elements support.
+	 * @param array  $elements_styles The elements styles within the block attributes.
+	 * @param string $block_markup    Original block markup.
+	 * @param string $expected_markup Resulting markup after application of elements block support.
+	 */
+	public function test_elements_block_support_class( $color_settings, $elements_styles, $block_markup, $expected_markup ) {
+		$this->test_block_name = 'test/element-block-supports';
+
+		register_block_type(
+			$this->test_block_name,
+			array(
+				'api_version' => 3,
+				'attributes'  => array(
+					'style' => array(
+						'type' => 'object',
+					),
+				),
+				'supports'    => array(
+					'color' => $color_settings,
+				),
+			)
+		);
+
+		$block = array(
+			'blockName' => $this->test_block_name,
+			'attrs'     => array(
+				'style' => array(
+					'elements' => $elements_styles,
+				),
+			),
+		);
+
+		$actual = wp_render_elements_support( $block_markup, $block );
+
+		$this->assertMatchesRegularExpression(
+			$expected_markup,
+			$actual,
+			'Block wrapper markup should be correct'
+		);
+	}
+
+	/**
+	 * Data provider.
+	 *
+	 * @return array
+	 */
+	public function data_elements_block_support_class() {
+		$color_styles = array(
+			'text'       => 'var:preset|color|vivid-red',
+			'background' => '#fff',
+		);
+
+		return array(
+			// @ticket 59578
+			'empty block markup remains untouched'         => array(
+				'color_settings'  => array(
+					'button' => true,
+				),
+				'elements_styles' => array(
+					'button' => array( 'color' => $color_styles ),
+				),
+				'block_markup'    => '',
+				'expected_markup' => '/^$/',
+			),
+			'empty block markup remains untouched when no block attributes' => array(
+				'color_settings'  => array(
+					'button' => true,
+				),
+				'elements_styles' => null,
+				'block_markup'    => '',
+				'expected_markup' => '/^$/',
+			),
+			'block markup remains untouched when block has no attributes' => array(
+				'color_settings'  => array(
+					'button' => true,
+				),
+				'elements_styles' => null,
+				'block_markup'    => '<p>Hello <a href="http://www.wordpress.org/">WordPress</a>!</p>',
+				'expected_markup' => '/^<p>Hello <a href="http:\/\/www.wordpress.org\/">WordPress<\/a>!<\/p>$/',
+			),
+			// @ticket 5418
+			'button element styles with serialization skipped' => array(
+				'color_settings'  => array(
+					'button'                          => true,
+					'__experimentalSkipSerialization' => true,
+				),
+				'elements_styles' => array(
+					'button' => array( 'color' => $color_styles ),
+				),
+				'block_markup'    => '<p>Hello <a href="http://www.wordpress.org/">WordPress</a>!</p>',
+				'expected_markup' => '/^<p>Hello <a href="http:\/\/www.wordpress.org\/">WordPress<\/a>!<\/p>$/',
+			),
+			'link element styles with serialization skipped' => array(
+				'color_settings'  => array(
+					'link'                            => true,
+					'__experimentalSkipSerialization' => true,
+				),
+				'elements_styles' => array(
+					'link' => array( 'color' => $color_styles ),
+				),
+				'block_markup'    => '<p>Hello <a href="http://www.wordpress.org/">WordPress</a>!</p>',
+				'expected_markup' => '/^<p>Hello <a href="http:\/\/www.wordpress.org\/">WordPress<\/a>!<\/p>$/',
+			),
+			'heading element styles with serialization skipped' => array(
+				'color_settings'  => array(
+					'heading'                         => true,
+					'__experimentalSkipSerialization' => true,
+				),
+				'elements_styles' => array(
+					'heading' => array( 'color' => $color_styles ),
+				),
+				'block_markup'    => '<p>Hello <a href="http://www.wordpress.org/">WordPress</a>!</p>',
+				'expected_markup' => '/^<p>Hello <a href="http:\/\/www.wordpress.org\/">WordPress<\/a>!<\/p>$/',
+			),
+			'button element styles apply class to wrapper' => array(
+				'color_settings'  => array( 'button' => true ),
+				'elements_styles' => array(
+					'button' => array( 'color' => $color_styles ),
+				),
+				'block_markup'    => '<p>Hello <a href="http://www.wordpress.org/">WordPress</a>!</p>',
+				'expected_markup' => '/^<p class="wp-elements-[a-f0-9]{32}">Hello <a href="http:\/\/www.wordpress.org\/">WordPress<\/a>!<\/p>$/',
+			),
+			'link element styles apply class to wrapper'   => array(
+				'color_settings'  => array( 'link' => true ),
+				'elements_styles' => array(
+					'link' => array( 'color' => $color_styles ),
+				),
+				'block_markup'    => '<p>Hello <a href="http://www.wordpress.org/">WordPress</a>!</p>',
+				'expected_markup' => '/^<p class="wp-elements-[a-f0-9]{32}">Hello <a href="http:\/\/www.wordpress.org\/">WordPress<\/a>!<\/p>$/',
+			),
+			'heading element styles apply class to wrapper' => array(
+				'color_settings'  => array( 'heading' => true ),
+				'elements_styles' => array(
+					'heading' => array( 'color' => $color_styles ),
+				),
+				'block_markup'    => '<p>Hello <a href="http://www.wordpress.org/">WordPress</a>!</p>',
+				'expected_markup' => '/^<p class="wp-elements-[a-f0-9]{32}">Hello <a href="http:\/\/www.wordpress.org\/">WordPress<\/a>!<\/p>$/',
+			),
+			'element styles apply class to wrapper when it has other classes' => array(
+				'color_settings'  => array( 'link' => true ),
+				'elements_styles' => array(
+					'link' => array( 'color' => $color_styles ),
+				),
+				'block_markup'    => '<p class="has-dark-gray-background-color has-background">Hello <a href="http://www.wordpress.org/">WordPress</a>!</p>',
+				'expected_markup' => '/^<p class="has-dark-gray-background-color has-background wp-elements-[a-f0-9]{32}">Hello <a href="http:\/\/www.wordpress.org\/">WordPress<\/a>!<\/p>$/',
+			),
+			'element styles apply class to wrapper when it has other attributes' => array(
+				'color_settings'  => array( 'link' => true ),
+				'elements_styles' => array(
+					'link' => array( 'color' => $color_styles ),
+				),
+				'block_markup'    => '<p id="anchor">Hello <a href="http://www.wordpress.org/">WordPress</a>!</p>',
+				'expected_markup' => '/^<p class="wp-elements-[a-f0-9]{32}" id="anchor">Hello <a href="http:\/\/www.wordpress.org\/">WordPress<\/a>!<\/p>$/',
+			),
+		);
+	}
+}
diff --git a/tests/block-supports/wpRenderElementsSupportStyles.php b/tests/block-supports/wpRenderElementsSupportStyles.php
new file mode 100644
index 0000000000..3be0fa1e10
--- /dev/null
+++ b/tests/block-supports/wpRenderElementsSupportStyles.php
@@ -0,0 +1,172 @@
+<?php
+
+/**
+ * @group block-supports
+ *
+ * @covers ::wp_render_elements_support_styles
+ */
+class Tests_Block_Supports_WpRenderElementsSupportStyles extends WP_UnitTestCase {
+	/**
+	 * @var string|null
+	 */
+	private $test_block_name;
+
+	public function tear_down() {
+		WP_Style_Engine_CSS_Rules_Store::remove_all_stores();
+		unregister_block_type( $this->test_block_name );
+		$this->test_block_name = null;
+		parent::tear_down();
+	}
+
+	/**
+	 * Tests that elements block support generates appropriate styles.
+	 *
+	 * @ticket 59555
+	 * @ticket 60557
+	 *
+	 * @covers ::wp_render_elements_support_styles
+	 *
+	 * @dataProvider data_elements_block_support_styles
+	 *
+	 * @param mixed  $color_settings  The color block support settings used for elements support.
+	 * @param mixed  $elements_styles The elements styles within the block attributes.
+	 * @param string $expected_styles Expected styles enqueued by the style engine.
+	 */
+	public function test_elements_block_support_styles( $color_settings, $elements_styles, $expected_styles ) {
+		$this->test_block_name = 'test/element-block-supports';
+
+		register_block_type(
+			$this->test_block_name,
+			array(
+				'api_version' => 3,
+				'attributes'  => array(
+					'style' => array(
+						'type' => 'object',
+					),
+				),
+				'supports'    => array(
+					'color' => $color_settings,
+				),
+			)
+		);
+
+		$block = array(
+			'blockName' => $this->test_block_name,
+			'attrs'     => array(
+				'style' => array(
+					'elements' => $elements_styles,
+				),
+			),
+		);
+
+		wp_render_elements_support_styles( null, $block );
+		$actual_stylesheet = wp_style_engine_get_stylesheet_from_context( 'block-supports', array( 'prettify' => false ) );
+
+		$this->assertMatchesRegularExpression(
+			$expected_styles,
+			$actual_stylesheet,
+			'Elements style rules output should be correct'
+		);
+	}
+
+	/**
+	 * Data provider.
+	 *
+	 * @return array
+	 */
+	public function data_elements_block_support_styles() {
+		$color_styles    = array(
+			'text'       => 'var:preset|color|vivid-red',
+			'background' => '#fff',
+		);
+		$color_css_rules = preg_quote( '{color:var(--wp--preset--color--vivid-red);background-color:#fff;}' );
+
+		return array(
+			'button element styles are not applied if serialization is skipped' => array(
+				'color_settings'  => array(
+					'button'                          => true,
+					'__experimentalSkipSerialization' => true,
+				),
+				'elements_styles' => array(
+					'button' => array( 'color' => $color_styles ),
+				),
+				'expected_styles' => '/^$/',
+			),
+			'link element styles are not applied if serialization is skipped' => array(
+				'color_settings'  => array(
+					'link'                            => true,
+					'__experimentalSkipSerialization' => true,
+				),
+				'elements_styles' => array(
+					'link' => array(
+						'color'  => $color_styles,
+						':hover' => array(
+							'color' => $color_styles,
+						),
+					),
+				),
+				'expected_styles' => '/^$/',
+			),
+			'heading element styles are not applied if serialization is skipped' => array(
+				'color_settings'  => array(
+					'heading'                         => true,
+					'__experimentalSkipSerialization' => true,
+				),
+				'elements_styles' => array(
+					'heading' => array( 'color' => $color_styles ),
+					'h1'      => array( 'color' => $color_styles ),
+					'h2'      => array( 'color' => $color_styles ),
+					'h3'      => array( 'color' => $color_styles ),
+					'h4'      => array( 'color' => $color_styles ),
+					'h5'      => array( 'color' => $color_styles ),
+					'h6'      => array( 'color' => $color_styles ),
+				),
+				'expected_styles' => '/^$/',
+			),
+			'button element styles are applied'          => array(
+				'color_settings'  => array( 'button' => true ),
+				'elements_styles' => array(
+					'button' => array( 'color' => $color_styles ),
+				),
+				'expected_styles' => '/^.wp-elements-[a-f0-9]{32} .wp-element-button, .wp-elements-[a-f0-9]{32} .wp-block-button__link' . $color_css_rules . '$/',
+			),
+			'link element styles are applied'            => array(
+				'color_settings'  => array( 'link' => true ),
+				'elements_styles' => array(
+					'link' => array(
+						'color'  => $color_styles,
+						':hover' => array(
+							'color' => $color_styles,
+						),
+					),
+				),
+				'expected_styles' => '/^.wp-elements-[a-f0-9]{32} a:where\(:not\(.wp-element-button\)\)' . $color_css_rules .
+					'.wp-elements-[a-f0-9]{32} a:where\(:not\(.wp-element-button\)\):hover' . $color_css_rules . '$/',
+			),
+			'generic heading element styles are applied' => array(
+				'color_settings'  => array( 'heading' => true ),
+				'elements_styles' => array(
+					'heading' => array( 'color' => $color_styles ),
+				),
+				'expected_styles' => '/^.wp-elements-[a-f0-9]{32} h1, .wp-elements-[a-f0-9]{32} h2, .wp-elements-[a-f0-9]{32} h3, .wp-elements-[a-f0-9]{32} h4, .wp-elements-[a-f0-9]{32} h5, .wp-elements-[a-f0-9]{32} h6' . $color_css_rules . '$/',
+			),
+			'individual heading element styles are applied' => array(
+				'color_settings'  => array( 'heading' => true ),
+				'elements_styles' => array(
+					'h1' => array( 'color' => $color_styles ),
+					'h2' => array( 'color' => $color_styles ),
+					'h3' => array( 'color' => $color_styles ),
+					'h4' => array( 'color' => $color_styles ),
+					'h5' => array( 'color' => $color_styles ),
+					'h6' => array( 'color' => $color_styles ),
+				),
+				'expected_styles' => '/^.wp-elements-[a-f0-9]{32} h1' . $color_css_rules .
+					'.wp-elements-[a-f0-9]{32} h2' . $color_css_rules .
+					'.wp-elements-[a-f0-9]{32} h3' . $color_css_rules .
+					'.wp-elements-[a-f0-9]{32} h4' . $color_css_rules .
+					'.wp-elements-[a-f0-9]{32} h5' . $color_css_rules .
+					'.wp-elements-[a-f0-9]{32} h6' . $color_css_rules . '$/',
+			),
+		);
+	}
+}
diff --git a/tests/block-template-utils.php b/tests/block-template-utils.php
index b06e931529..4d92c277a9 100644
--- a/tests/block-template-utils.php
+++ b/tests/block-template-utils.php
@@ -86,137 +86,17 @@ class Tests_Block_Template_Utils extends WP_UnitTestCase {
 		switch_theme( self::TEST_THEME );
 	}
 
-	public function test_build_block_template_result_from_post() {
-		$template = _build_block_template_result_from_post(
-			self::$template_post,
-			'wp_template'
-		);
-
-		$this->assertNotWPError( $template );
-		$this->assertSame( get_stylesheet() . '//my_template', $template->id );
-		$this->assertSame( get_stylesheet(), $template->theme );
-		$this->assertSame( 'my_template', $template->slug );
-		$this->assertSame( 'publish', $template->status );
-		$this->assertSame( 'custom', $template->source );
-		$this->assertSame( 'My Template', $template->title );
-		$this->assertSame( 'Description of my template', $template->description );
-		$this->assertSame( 'wp_template', $template->type );
-		$this->assertSame( self::$template_post->post_modified, $template->modified, 'Template result properties match' );
-
-		// Test template parts.
-		$template_part = _build_block_template_result_from_post(
-			self::$template_part_post,
-			'wp_template_part'
-		);
-		$this->assertNotWPError( $template_part );
-		$this->assertSame( get_stylesheet() . '//my_template_part', $template_part->id );
-		$this->assertSame( get_stylesheet(), $template_part->theme );
-		$this->assertSame( 'my_template_part', $template_part->slug );
-		$this->assertSame( 'publish', $template_part->status );
-		$this->assertSame( 'custom', $template_part->source );
-		$this->assertSame( 'My Template Part', $template_part->title );
-		$this->assertSame( 'Description of my template part', $template_part->description );
-		$this->assertSame( 'wp_template_part', $template_part->type );
-		$this->assertSame( WP_TEMPLATE_PART_AREA_HEADER, $template_part->area );
-		$this->assertSame( self::$template_part_post->post_modified, $template_part->modified, 'Template part result properties match' );
-	}
-
-	public function test_build_block_template_result_from_file() {
-		$template = _build_block_template_result_from_file(
-			array(
-				'slug' => 'single',
-				'path' => __DIR__ . '/../data/templates/template.html',
-			),
-			'wp_template'
-		);
-
-		$this->assertSame( get_stylesheet() . '//single', $template->id );
-		$this->assertSame( get_stylesheet(), $template->theme );
-		$this->assertSame( 'single', $template->slug );
-		$this->assertSame( 'publish', $template->status );
-		$this->assertSame( 'theme', $template->source );
-		$this->assertSame( 'Single Posts', $template->title );
-		$this->assertSame( 'Displays single posts on your website unless a custom template has been applied to that post or a dedicated template exists.', $template->description );
-		$this->assertSame( 'wp_template', $template->type );
-		$this->assertEmpty( $template->modified );
-
-		// Test template parts.
-		$template_part = _build_block_template_result_from_file(
-			array(
-				'slug' => 'header',
-				'path' => __DIR__ . '/../data/templates/template.html',
-				'area' => WP_TEMPLATE_PART_AREA_HEADER,
-			),
-			'wp_template_part'
-		);
-		$this->assertSame( get_stylesheet() . '//header', $template_part->id );
-		$this->assertSame( get_stylesheet(), $template_part->theme );
-		$this->assertSame( 'header', $template_part->slug );
-		$this->assertSame( 'publish', $template_part->status );
-		$this->assertSame( 'theme', $template_part->source );
-		$this->assertSame( 'header', $template_part->title );
-		$this->assertSame( '', $template_part->description );
-		$this->assertSame( 'wp_template_part', $template_part->type );
-		$this->assertSame( WP_TEMPLATE_PART_AREA_HEADER, $template_part->area );
-		$this->assertEmpty( $template_part->modified );
-	}
-
 	/**
-	 * @ticket 59325
-	 *
-	 * @covers ::_build_block_template_result_from_file
+	 * Tear down after each test.
 	 *
-	 * @dataProvider data_build_block_template_result_from_file_injects_theme_attribute
-	 *
-	 * @param string $filename The template's filename.
-	 * @param string $expected The expected block markup.
+	 * @since 6.5.0
 	 */
-	public function test_build_block_template_result_from_file_injects_theme_attribute( $filename, $expected ) {
-		$template = _build_block_template_result_from_file(
-			array(
-				'slug' => 'single',
-				'path' => DIR_TESTDATA . "/templates/$filename",
-			),
-			'wp_template'
-		);
-		$this->assertSame( $expected, $template->content );
-	}
+	public function tear_down() {
+		if ( WP_Block_Type_Registry::get_instance()->is_registered( 'tests/hooked-block' ) ) {
+			unregister_block_type( 'tests/hooked-block' );
+		}
 
-	/**
-	 * Data provider.
-	 *
-	 * @return array[]
-	 */
-	public function data_build_block_template_result_from_file_injects_theme_attribute() {
-		$theme = 'block-theme';
-		return array(
-			'a template with a template part block'  => array(
-				'filename' => 'template-with-template-part.html',
-				'expected' => sprintf(
-					'<!-- wp:template-part {"slug":"header","align":"full","tagName":"header","className":"site-header","theme":"%s"} /-->',
-					$theme
-				),
-			),
-			'a template with a template part block nested inside another block' => array(
-				'filename' => 'template-with-nested-template-part.html',
-				'expected' => sprintf(
-					'<!-- wp:group -->
-<!-- wp:template-part {"slug":"header","align":"full","tagName":"header","className":"site-header","theme":"%s"} /-->
-<!-- /wp:group -->',
-					$theme
-				),
-			),
-			'a template with a template part block with an existing theme attribute' => array(
-				'filename' => 'template-with-template-part-with-existing-theme-attribute.html',
-				'expected' => '<!-- wp:template-part {"slug":"header","theme":"fake-theme","align":"full","tagName":"header","className":"site-header"} /-->',
-			),
-			'a template with no template part block' => array(
-				'filename' => 'template.html',
-				'expected' => '<!-- wp:paragraph -->
-<p>Just a paragraph</p>
-<!-- /wp:paragraph -->',
-			),
-		);
+		parent::tear_down();
 	}
 
 	/**
@@ -523,4 +403,72 @@ class Tests_Block_Template_Utils extends WP_UnitTestCase {
 		}
 		$this->assertTrue( $has_html_files, 'contains at least one html file' );
 	}
+
+	/**
+	 * @ticket 60671
+	 *
+	 * @covers inject_ignored_hooked_blocks_metadata_attributes
+	 */
+	public function test_inject_ignored_hooked_blocks_metadata_attributes_into_template() {
+		global $wp_current_filter;
+		// Mock currently set filter. The $wp_current_filter global is reset during teardown by
+		// WP_UnitTestCase_Base::_restore_hooks() in tests/phpunit/includes/abstract-testcase.php.
+		$wp_current_filter[] = 'rest_pre_insert_wp_template';
+
+		register_block_type(
+			'tests/hooked-block',
+			array(
+				'block_hooks' => array(
+					'tests/anchor-block' => 'after',
+				),
+			)
+		);
+
+		$id      = self::TEST_THEME . '//' . 'my_template';
+		$request = new WP_REST_Request( 'POST', '/wp/v2/templates/' . $id );
+
+		$changes               = new stdClass();
+		$changes->post_content = '<!-- wp:tests/anchor-block -->Hello<!-- /wp:tests/anchor-block -->';
+
+		$post = inject_ignored_hooked_blocks_metadata_attributes( $changes, $request );
+		$this->assertSame(
+			'<!-- wp:tests/anchor-block {"metadata":{"ignoredHookedBlocks":["tests/hooked-block"]}} -->Hello<!-- /wp:tests/anchor-block -->',
+			$post->post_content,
+			'The hooked block was not injected into the anchor block\'s ignoredHookedBlocks metadata.'
+		);
+	}
+
+	/**
+	 * @ticket 60671
+	 *
+	 * @covers inject_ignored_hooked_blocks_metadata_attributes
+	 */
+	public function test_inject_ignored_hooked_blocks_metadata_attributes_into_template_part() {
+		global $wp_current_filter;
+		// Mock currently set filter. The $wp_current_filter global is reset during teardown by
+		// WP_UnitTestCase_Base::_restore_hooks() in tests/phpunit/includes/abstract-testcase.php.
+		$wp_current_filter[] = 'rest_pre_insert_wp_template_part';
+
+		register_block_type(
+			'tests/hooked-block',
+			array(
+				'block_hooks' => array(
+					'tests/anchor-block' => 'after',
+				),
+			)
+		);
+
+		$id      = self::TEST_THEME . '//' . 'my_template_part';
+		$request = new WP_REST_Request( 'POST', '/wp/v2/template-parts/' . $id );
+
+		$changes               = new stdClass();
+		$changes->post_content = '<!-- wp:tests/anchor-block -->Hello<!-- /wp:tests/anchor-block -->';
+
+		$post = inject_ignored_hooked_blocks_metadata_attributes( $changes, $request );
+		$this->assertSame(
+			'<!-- wp:tests/anchor-block {"metadata":{"ignoredHookedBlocks":["tests/hooked-block"]}} -->Hello<!-- /wp:tests/anchor-block -->',
+			$post->post_content,
+			'The hooked block was not injected into the anchor block\'s ignoredHookedBlocks metadata.'
+		);
+	}
 }
diff --git a/tests/block-template.php b/tests/block-template.php
index 7b4cbf3322..dcc3f6282d 100644
--- a/tests/block-template.php
+++ b/tests/block-template.php
@@ -15,11 +15,12 @@ class Tests_Block_Template extends WP_UnitTestCase {
 		parent::set_up();
 		switch_theme( 'block-theme' );
 		do_action( 'setup_theme' );
+		do_action( 'after_setup_theme' );
 	}
 
 	public function tear_down() {
-		global $_wp_current_template_content;
-		unset( $_wp_current_template_content );
+		global $_wp_current_template_id, $_wp_current_template_content;
+		unset( $_wp_current_template_id, $_wp_current_template_content );
 
 		parent::tear_down();
 	}
@@ -192,10 +193,11 @@ class Tests_Block_Template extends WP_UnitTestCase {
 	 * since there is only a single post in the main query loop in such cases anyway.
 	 *
 	 * @ticket 58154
+	 * @ticket 59736
 	 * @covers ::get_the_block_template_html
 	 */
 	public function test_get_the_block_template_html_enforces_singular_query_loop() {
-		global $_wp_current_template_content, $wp_query, $wp_the_query;
+		global $_wp_current_template_id, $_wp_current_template_content, $wp_query, $wp_the_query;
 
 		// Register test block to log `in_the_loop()` results.
 		$in_the_loop_logs = array();
@@ -206,6 +208,8 @@ class Tests_Block_Template extends WP_UnitTestCase {
 		$wp_query     = new WP_Query( array( 'p' => $post_id ) );
 		$wp_the_query = $wp_query;
 
+		// Force a template ID that is for the current stylesheet.
+		$_wp_current_template_id = get_stylesheet() . '//single';
 		// Use block template that just renders post title and the above test block.
 		$_wp_current_template_content = '<!-- wp:post-title /--><!-- wp:test/in-the-loop-logger /-->';
 
@@ -226,7 +230,7 @@ class Tests_Block_Template extends WP_UnitTestCase {
 	 * @covers ::get_the_block_template_html
 	 */
 	public function test_get_the_block_template_html_does_not_generally_enforce_loop() {
-		global $_wp_current_template_content, $wp_query, $wp_the_query;
+		global $_wp_current_template_id, $_wp_current_template_content, $wp_query, $wp_the_query;
 
 		// Register test block to log `in_the_loop()` results.
 		$in_the_loop_logs = array();
@@ -247,6 +251,9 @@ class Tests_Block_Template extends WP_UnitTestCase {
 		);
 		$wp_the_query = $wp_query;
 
+		// Force a template ID that is for the current stylesheet.
+		$_wp_current_template_id = get_stylesheet() . '//home';
+
 		/*
 		 * Use block template that renders the above test block, followed by a main query loop.
 		 * `get_the_block_template_html()` should not start the loop, but the `core/query` and `core/post-template`
@@ -275,6 +282,35 @@ class Tests_Block_Template extends WP_UnitTestCase {
 		$this->assertSame( array( false, true ), $in_the_loop_logs, 'Main query loop was triggered incorrectly' );
 	}
 
+	/**
+	 * Tests that `get_the_block_template_html()` does not start the main query loop when on a template that is not from the current theme.
+	 *
+	 * @ticket 58154
+	 * @ticket 59736
+	 * @covers ::get_the_block_template_html
+	 */
+	public function test_get_the_block_template_html_skips_singular_query_loop_when_non_theme_template() {
+		global $_wp_current_template_id, $_wp_current_template_content, $wp_query, $wp_the_query;
+
+		// Register test block to log `in_the_loop()` results.
+		$in_the_loop_logs = array();
+		$this->register_in_the_loop_logger_block( $in_the_loop_logs );
+
+		// Set main query to single post.
+		$post_id      = self::factory()->post->create( array( 'post_title' => 'A single post' ) );
+		$wp_query     = new WP_Query( array( 'p' => $post_id ) );
+		$wp_the_query = $wp_query;
+
+		// Force a template ID that is not for the current stylesheet.
+		$_wp_current_template_id = 'some-plugin-slug//single';
+		// Use block template that just renders post title and the above test block.
+		$_wp_current_template_content = '<!-- wp:post-title /--><!-- wp:test/in-the-loop-logger /-->';
+
+		$output = get_the_block_template_html();
+		$this->unregister_in_the_loop_logger_block();
+		$this->assertSame( array( false ), $in_the_loop_logs, 'Main query loop was triggered despite a custom block template outside the current theme being used' );
+	}
+
 	/**
 	 * @ticket 58319
 	 *
@@ -351,6 +387,49 @@ class Tests_Block_Template extends WP_UnitTestCase {
 		);
 	}
 
+	/**
+	 * Tests `_get_block_templates_paths()` for an invalid directory.
+	 *
+	 * @ticket 58196
+	 *
+	 * @covers ::_get_block_templates_paths
+	 */
+	public function test_get_block_templates_paths_dir_exists() {
+		$theme_dir = get_template_directory();
+		// Templates in the current theme.
+		$templates = array(
+			'parts/small-header.html',
+			'templates/custom-single-post-template.html',
+			'templates/index.html',
+			'templates/page-home.html',
+			'templates/page.html',
+			'templates/single.html',
+		);
+
+		$expected_template_paths = array_map(
+			static function ( $template ) use ( $theme_dir ) {
+				return $theme_dir . '/' . $template;
+			},
+			$templates
+		);
+
+		$template_paths = _get_block_templates_paths( $theme_dir );
+		$this->assertSameSets( $expected_template_paths, $template_paths );
+	}
+
+	/**
+	 * Test _get_block_templates_paths() for a invalid dir.
+	 *
+	 * @ticket 58196
+	 *
+	 * @covers ::_get_block_templates_paths
+	 */
+	public function test_get_block_templates_paths_dir_doesnt_exists() {
+		// Should return empty array for invalid path.
+		$template_paths = _get_block_templates_paths( '/tmp/random-invalid-theme-path' );
+		$this->assertSame( array(), $template_paths );
+	}
+
 	/**
 	 * Registers a test block to log `in_the_loop()` results.
 	 *
diff --git a/tests/block-templates/base.php b/tests/block-templates/base.php
index f6a5a9f4df..daa58c041c 100644
--- a/tests/block-templates/base.php
+++ b/tests/block-templates/base.php
@@ -39,7 +39,7 @@ abstract class WP_Block_Templates_UnitTestCase extends WP_UnitTestCase {
 				'post_type'    => 'wp_template',
 				'post_name'    => 'my_template',
 				'post_title'   => 'My Template',
-				'post_content' => 'Content',
+				'post_content' => '<!-- wp:heading {"level":1,"metadata":{"ignoredHookedBlocks":["tests/ignored"]}} --><h1>Template</h1><!-- /wp:heading -->',
 				'post_excerpt' => 'Description of my template',
 				'tax_input'    => array(
 					'wp_theme' => array(
@@ -57,7 +57,7 @@ abstract class WP_Block_Templates_UnitTestCase extends WP_UnitTestCase {
 				'post_type'    => 'wp_template_part',
 				'post_name'    => 'my_template_part',
 				'post_title'   => 'My Template Part',
-				'post_content' => 'Content',
+				'post_content' => '<!-- wp:heading {"level":2,"metadata":{"ignoredHookedBlocks":["tests/ignored"]}} --><h2>Template Part</h2><!-- /wp:heading -->',
 				'post_excerpt' => 'Description of my template part',
 				'tax_input'    => array(
 					'wp_theme'              => array(
diff --git a/tests/block-templates/buildBlockTemplateResultFromFile.php b/tests/block-templates/buildBlockTemplateResultFromFile.php
new file mode 100644
index 0000000000..3aedcf0c2c
--- /dev/null
+++ b/tests/block-templates/buildBlockTemplateResultFromFile.php
@@ -0,0 +1,181 @@
+<?php
+
+require_once __DIR__ . '/base.php';
+
+/**
+ * @group block-templates
+ * @covers ::_build_block_template_result_from_file
+ */
+class Tests_Block_Templates_BuildBlockTemplateResultFromFile extends WP_Block_Templates_UnitTestCase {
+
+	/**
+	 * @ticket 54335
+	 */
+	public function test_should_build_template() {
+		$template = _build_block_template_result_from_file(
+			array(
+				'slug' => 'single',
+				'path' => DIR_TESTDATA . '/templates/template.html',
+			),
+			'wp_template'
+		);
+
+		$this->assertSame( get_stylesheet() . '//single', $template->id );
+		$this->assertSame( get_stylesheet(), $template->theme );
+		$this->assertSame( 'single', $template->slug );
+		$this->assertSame( 'publish', $template->status );
+		$this->assertSame( 'theme', $template->source );
+		$this->assertSame( 'Single Posts', $template->title );
+		$this->assertSame( 'Displays a single post on your website unless a custom template has been applied to that post or a dedicated template exists.', $template->description );
+		$this->assertSame( 'wp_template', $template->type );
+		$this->assertEmpty( $template->modified );
+	}
+
+	/**
+	 * @ticket 59325
+	 */
+	public function test_should_build_template_using_custom_properties() {
+		$template = _build_block_template_result_from_file(
+			array(
+				'slug'  => 'custom',
+				'title' => 'Custom Title',
+				'path'  => DIR_TESTDATA . '/templates/template.html',
+			),
+			'wp_template'
+		);
+
+		$this->assertSame( 'custom', $template->slug );
+		$this->assertSame( 'Custom Title', $template->title );
+		$this->assertTrue( $template->is_custom );
+	}
+
+	/**
+	 * @ticket 59325
+	 */
+	public function test_should_enforce_default_properties_when_building_template() {
+		$template = _build_block_template_result_from_file(
+			array(
+				'slug'  => 'single',
+				'title' => 'Custom title',
+				'path'  => DIR_TESTDATA . '/templates/template.html',
+			),
+			'wp_template'
+		);
+
+		$this->assertSame( 'single', $template->slug );
+		$this->assertSame( 'Single Posts', $template->title );
+		$this->assertSame( 'Displays a single post on your website unless a custom template has been applied to that post or a dedicated template exists.', $template->description );
+		$this->assertFalse( $template->is_custom );
+	}
+
+	/**
+	 * @ticket 59325
+	 */
+	public function test_should_respect_post_types_property_when_building_template() {
+		$template = _build_block_template_result_from_file(
+			array(
+				'slug'      => 'single',
+				'postTypes' => array( 'post' ),
+				'path'      => DIR_TESTDATA . '/templates/template.html',
+			),
+			'wp_template'
+		);
+
+		$this->assertSameSets( array( 'post' ), $template->post_types );
+	}
+
+	/**
+	 * @ticket 59325
+	 *
+	 * @dataProvider data_build_template_injects_theme_attribute
+	 *
+	 * @param string $filename The template's filename.
+	 * @param string $expected The expected block markup.
+	 */
+	public function test_should_build_template_and_inject_theme_attribute( $filename, $expected ) {
+		$template = _build_block_template_result_from_file(
+			array(
+				'slug' => 'single',
+				'path' => DIR_TESTDATA . "/templates/$filename",
+			),
+			'wp_template'
+		);
+		$this->assertSame( $expected, $template->content );
+	}
+
+	/**
+	 * Data provider.
+	 *
+	 * @return array[]
+	 */
+	public function data_build_template_injects_theme_attribute() {
+		return array(
+			'a template with a template part block'  => array(
+				'filename' => 'template-with-template-part.html',
+				'expected' => sprintf(
+					'<!-- wp:template-part {"slug":"header","align":"full","tagName":"header","className":"site-header","theme":"%s"} /-->',
+					self::TEST_THEME
+				),
+			),
+			'a template with a template part block nested inside another block' => array(
+				'filename' => 'template-with-nested-template-part.html',
+				'expected' => sprintf(
+					'<!-- wp:group -->
+<!-- wp:template-part {"slug":"header","align":"full","tagName":"header","className":"site-header","theme":"%s"} /-->
+<!-- /wp:group -->',
+					self::TEST_THEME
+				),
+			),
+			'a template with a template part block with an existing theme attribute' => array(
+				'filename' => 'template-with-template-part-with-existing-theme-attribute.html',
+				'expected' => '<!-- wp:template-part {"slug":"header","theme":"fake-theme","align":"full","tagName":"header","className":"site-header"} /-->',
+			),
+			'a template with no template part block' => array(
+				'filename' => 'template.html',
+				'expected' => '<!-- wp:paragraph -->
+<p>Just a paragraph</p>
+<!-- /wp:paragraph -->',
+			),
+		);
+	}
+
+	/**
+	 * @ticket 54335
+	 */
+	public function test_should_build_template_part() {
+		$template_part = _build_block_template_result_from_file(
+			array(
+				'slug' => 'header',
+				'path' => DIR_TESTDATA . '/templates/template.html',
+				'area' => WP_TEMPLATE_PART_AREA_HEADER,
+			),
+			'wp_template_part'
+		);
+		$this->assertSame( get_stylesheet() . '//header', $template_part->id );
+		$this->assertSame( get_stylesheet(), $template_part->theme );
+		$this->assertSame( 'header', $template_part->slug );
+		$this->assertSame( 'publish', $template_part->status );
+		$this->assertSame( 'theme', $template_part->source );
+		$this->assertSame( 'header', $template_part->title );
+		$this->assertSame( '', $template_part->description );
+		$this->assertSame( 'wp_template_part', $template_part->type );
+		$this->assertSame( WP_TEMPLATE_PART_AREA_HEADER, $template_part->area );
+		$this->assertEmpty( $template_part->modified );
+	}
+
+	/**
+	 * @ticket 59325
+	 */
+	public function test_should_ignore_post_types_property_when_building_template_part() {
+		$template = _build_block_template_result_from_file(
+			array(
+				'slug'      => 'header',
+				'postTypes' => array( 'post' ),
+				'path'      => DIR_TESTDATA . '/templates/template.html',
+			),
+			'wp_template_part'
+		);
+
+		$this->assertEmpty( $template->post_types );
+	}
+}
diff --git a/tests/block-templates/buildBlockTemplateResultFromPost.php b/tests/block-templates/buildBlockTemplateResultFromPost.php
new file mode 100644
index 0000000000..586e9beded
--- /dev/null
+++ b/tests/block-templates/buildBlockTemplateResultFromPost.php
@@ -0,0 +1,155 @@
+<?php
+
+require_once __DIR__ . '/base.php';
+
+/**
+ * @group block-templates
+ * @covers ::_build_block_template_result_from_post
+ */
+class Tests_Block_Templates_BuildBlockTemplateResultFromPost extends WP_Block_Templates_UnitTestCase {
+
+	/**
+	 * Tear down each test method.
+	 *
+	 * @since 6.5.0
+	 */
+	public function tear_down() {
+		$registry = WP_Block_Type_Registry::get_instance();
+
+		if ( $registry->is_registered( 'tests/my-block' ) ) {
+			$registry->unregister( 'tests/my-block' );
+		}
+
+		if ( $registry->is_registered( 'tests/ignored' ) ) {
+			$registry->unregister( 'tests/ignored' );
+		}
+
+		parent::tear_down();
+	}
+
+	/**
+	 * @ticket 54335
+	 */
+	public function test_should_build_template() {
+		$template = _build_block_template_result_from_post(
+			self::$template_post,
+			'wp_template'
+		);
+
+		$this->assertNotWPError( $template );
+		$this->assertSame( get_stylesheet() . '//my_template', $template->id );
+		$this->assertSame( get_stylesheet(), $template->theme );
+		$this->assertSame( 'my_template', $template->slug );
+		$this->assertSame( 'publish', $template->status );
+		$this->assertSame( 'custom', $template->source );
+		$this->assertSame( 'My Template', $template->title );
+		$this->assertSame( 'Description of my template', $template->description );
+		$this->assertSame( 'wp_template', $template->type );
+		$this->assertSame( self::$template_post->post_modified, $template->modified, 'Template result properties match' );
+	}
+
+	/**
+	 * @ticket 54335
+	 */
+	public function test_should_build_template_part() {
+		$template_part = _build_block_template_result_from_post(
+			self::$template_part_post,
+			'wp_template_part'
+		);
+		$this->assertNotWPError( $template_part );
+		$this->assertSame( get_stylesheet() . '//my_template_part', $template_part->id );
+		$this->assertSame( get_stylesheet(), $template_part->theme );
+		$this->assertSame( 'my_template_part', $template_part->slug );
+		$this->assertSame( 'publish', $template_part->status );
+		$this->assertSame( 'custom', $template_part->source );
+		$this->assertSame( 'My Template Part', $template_part->title );
+		$this->assertSame( 'Description of my template part', $template_part->description );
+		$this->assertSame( 'wp_template_part', $template_part->type );
+		$this->assertSame( WP_TEMPLATE_PART_AREA_HEADER, $template_part->area );
+		$this->assertSame( self::$template_part_post->post_modified, $template_part->modified, 'Template part result properties match' );
+	}
+
+	/**
+	 * @ticket 59646
+	 * @ticket 60506
+	 */
+	public function test_should_inject_hooked_block_into_template() {
+		register_block_type(
+			'tests/my-block',
+			array(
+				'block_hooks' => array(
+					'core/heading' => 'before',
+				),
+			)
+		);
+
+		$template = _build_block_template_result_from_post(
+			self::$template_post,
+			'wp_template'
+		);
+		$this->assertStringStartsWith( '<!-- wp:tests/my-block /-->', $template->content );
+	}
+
+	/**
+	 * @ticket 59646
+	 * @ticket 60506
+	 */
+	public function test_should_inject_hooked_block_into_template_part() {
+		register_block_type(
+			'tests/my-block',
+			array(
+				'block_hooks' => array(
+					'core/heading' => 'after',
+				),
+			)
+		);
+
+		$template_part = _build_block_template_result_from_post(
+			self::$template_part_post,
+			'wp_template_part'
+		);
+		$this->assertStringEndsWith( '<!-- wp:tests/my-block /-->', $template_part->content );
+	}
+
+	/**
+	 * @ticket 59646
+	 * @ticket 60506
+	 */
+	public function test_should_not_inject_ignored_hooked_block_into_template() {
+		register_block_type(
+			'tests/ignored',
+			array(
+				'block_hooks' => array(
+					'core/heading' => 'after',
+				),
+			)
+		);
+
+		$template = _build_block_template_result_from_post(
+			self::$template_post,
+			'wp_template'
+		);
+		$this->assertStringNotContainsString( '<!-- wp:tests/ignored /-->', $template->content );
+	}
+
+	/**
+	 * @ticket 59646
+	 * @ticket 60506
+	 */
+	public function test_should_not_inject_ignored_hooked_block_into_template_part() {
+		register_block_type(
+			'tests/ignored',
+			array(
+				'block_hooks' => array(
+					'core/heading' => 'after',
+				),
+			)
+		);
+
+		$template_part = _build_block_template_result_from_post(
+			self::$template_part_post,
+			'wp_template_part'
+		);
+		$this->assertStringNotContainsString( '<!-- wp:tests/ignored /-->', $template_part->content );
+	}
+}
diff --git a/tests/blocks/blockHooks.php b/tests/blocks/blockHooks.php
deleted file mode 100644
index 4f7f419337..0000000000
--- a/tests/blocks/blockHooks.php
+++ /dev/null
@@ -1,122 +0,0 @@
-<?php
-/**
- * Tests for block hooks feature functions.
- *
- * @package WordPress
- * @subpackage Blocks
- *
- * @since 6.4.0
- *
- * @group blocks
- */
-class Tests_Blocks_BlockHooks extends WP_UnitTestCase {
-
-	/**
-	 * Tear down after each test.
-	 *
-	 * @since 6.4.0
-	 */
-	public function tear_down() {
-		$registry = WP_Block_Type_Registry::get_instance();
-
-		foreach ( array( 'tests/my-block', 'tests/my-container-block' ) as $block_name ) {
-			if ( $registry->is_registered( $block_name ) ) {
-				$registry->unregister( $block_name );
-			}
-		}
-
-		parent::tear_down();
-	}
-
-	/**
-	 * @ticket 59383
-	 *
-	 * @covers ::get_hooked_blocks
-	 */
-	public function test_get_hooked_blocks_no_match_found() {
-		$result = get_hooked_blocks( 'tests/no-hooked-blocks' );
-
-		$this->assertSame( array(), $result );
-	}
-
-	/**
-	 * @ticket 59383
-	 *
-	 * @covers ::get_hooked_blocks
-	 */
-	public function test_get_hooked_blocks_matches_found() {
-		register_block_type(
-			'tests/injected-one',
-			array(
-				'block_hooks' => array(
-					'tests/hooked-at-before'           => 'before',
-					'tests/hooked-at-after'            => 'after',
-					'tests/hooked-at-before-and-after' => 'before',
-				),
-			)
-		);
-		register_block_type(
-			'tests/injected-two',
-			array(
-				'block_hooks' => array(
-					'tests/hooked-at-before'           => 'before',
-					'tests/hooked-at-after'            => 'after',
-					'tests/hooked-at-before-and-after' => 'after',
-					'tests/hooked-at-first-child'      => 'first_child',
-					'tests/hooked-at-last-child'       => 'last_child',
-				),
-			)
-		);
-
-		$this->assertSame(
-			array(
-				'before' => array(
-					'tests/injected-one',
-					'tests/injected-two',
-				),
-			),
-			get_hooked_blocks( 'tests/hooked-at-before' ),
-			'block hooked at the before position'
-		);
-		$this->assertSame(
-			array(
-				'after' => array(
-					'tests/injected-one',
-					'tests/injected-two',
-				),
-			),
-			get_hooked_blocks( 'tests/hooked-at-after' ),
-			'block hooked at the after position'
-		);
-		$this->assertSame(
-			array(
-				'first_child' => array(
-					'tests/injected-two',
-				),
-			),
-			get_hooked_blocks( 'tests/hooked-at-first-child' ),
-			'block hooked at the first child position'
-		);
-		$this->assertSame(
-			array(
-				'last_child' => array(
-					'tests/injected-two',
-				),
-			),
-			get_hooked_blocks( 'tests/hooked-at-last-child' ),
-			'block hooked at the last child position'
-		);
-		$this->assertSame(
-			array(
-				'before' => array(
-					'tests/injected-one',
-				),
-				'after'  => array(
-					'tests/injected-two',
-				),
-			),
-			get_hooked_blocks( 'tests/hooked-at-before-and-after' ),
-			'block hooked before one block and after another'
-		);
-	}
-}
diff --git a/tests/blocks/getBlockTemplates.php b/tests/blocks/getBlockTemplates.php
index 9b1729f93b..92e0f14821 100644
--- a/tests/blocks/getBlockTemplates.php
+++ b/tests/blocks/getBlockTemplates.php
@@ -1,5 +1,6 @@
 <?php
 /**
+ * @group blocks
  * @group block-templates
  *
  * @covers ::get_block_templates
diff --git a/tests/blocks/getHookedBlocks.php b/tests/blocks/getHookedBlocks.php
new file mode 100644
index 0000000000..30fba1f2b5
--- /dev/null
+++ b/tests/blocks/getHookedBlocks.php
@@ -0,0 +1,235 @@
+<?php
+/**
+ * Tests for the features using get_hooked_blocks function.
+ *
+ * @package WordPress
+ * @subpackage Blocks
+ *
+ * @since 6.4.0
+ *
+ * @group blocks
+ * @group block-hooks
+ */
+class Tests_Blocks_GetHookedBlocks extends WP_UnitTestCase {
+
+	const TEST_THEME_NAME = 'block-theme-with-hooked-blocks';
+
+	/**
+	 * Tear down after each test.
+	 *
+	 * @since 6.4.0
+	 */
+	public function tear_down() {
+		// Removes test block types registered by test cases.
+		$block_types = WP_Block_Type_Registry::get_instance()->get_all_registered();
+		foreach ( $block_types as $block_type ) {
+			$block_name = $block_type->name;
+			if ( str_starts_with( $block_name, 'tests/' ) ) {
+				unregister_block_type( $block_name );
+			}
+		}
+
+		// Removes test block patterns registered with the test theme.
+		$patterns = WP_Block_Patterns_Registry::get_instance()->get_all_registered();
+		foreach ( $patterns as $pattern ) {
+			if ( empty( $pattern['slug'] ) ) {
+				continue;
+			}
+			$pattern_name = $pattern['slug'];
+			if ( str_starts_with( $pattern_name, self::TEST_THEME_NAME ) ) {
+				unregister_block_pattern( $pattern_name );
+			}
+		}
+
+		parent::tear_down();
+	}
+
+	private function switch_to_block_theme_hooked_blocks() {
+		switch_theme( self::TEST_THEME_NAME );
+
+		_register_theme_block_patterns();
+
+		$theme_blocks_dir = wp_normalize_path( realpath( get_theme_file_path( 'blocks' ) ) );
+		register_block_type( $theme_blocks_dir . '/hooked-before' );
+		register_block_type( $theme_blocks_dir . '/hooked-after' );
+		register_block_type( $theme_blocks_dir . '/hooked-first-child' );
+		register_block_type( $theme_blocks_dir . '/hooked-last-child' );
+	}
+
+	/**
+	 * @ticket 59383
+	 *
+	 * @covers ::get_hooked_blocks
+	 */
+	public function test_get_hooked_blocks_no_match_found() {
+		$result = get_hooked_blocks();
+
+		$this->assertSame( array(), $result );
+	}
+
+	/**
+	 * @ticket 59383
+	 *
+	 * @covers ::get_hooked_blocks
+	 */
+	public function test_get_hooked_blocks_matches_found() {
+		register_block_type(
+			'tests/injected-one',
+			array(
+				'block_hooks' => array(
+					'tests/hooked-at-before'           => 'before',
+					'tests/hooked-at-after'            => 'after',
+					'tests/hooked-at-before-and-after' => 'before',
+				),
+			)
+		);
+		register_block_type(
+			'tests/injected-two',
+			array(
+				'block_hooks' => array(
+					'tests/hooked-at-before'           => 'before',
+					'tests/hooked-at-after'            => 'after',
+					'tests/hooked-at-before-and-after' => 'after',
+					'tests/hooked-at-first-child'      => 'first_child',
+					'tests/hooked-at-last-child'       => 'last_child',
+				),
+			)
+		);
+
+		$this->assertSame(
+			array(
+				'tests/hooked-at-before'           => array(
+					'before' => array(
+						'tests/injected-one',
+						'tests/injected-two',
+					),
+				),
+				'tests/hooked-at-after'            => array(
+					'after' => array(
+						'tests/injected-one',
+						'tests/injected-two',
+					),
+				),
+				'tests/hooked-at-before-and-after' => array(
+					'before' => array(
+						'tests/injected-one',
+					),
+					'after'  => array(
+						'tests/injected-two',
+					),
+				),
+				'tests/hooked-at-first-child'      => array(
+					'first_child' => array(
+						'tests/injected-two',
+					),
+				),
+				'tests/hooked-at-last-child'       => array(
+					'last_child' => array(
+						'tests/injected-two',
+					),
+				),
+			),
+			get_hooked_blocks()
+		);
+	}
+
+	/**
+	 * @ticket 59313
+	 * @ticket 60008
+	 * @ticket 60506
+	 *
+	 * @covers ::get_hooked_blocks
+	 * @covers ::get_block_file_template
+	 */
+	public function test_loading_template_with_hooked_blocks() {
+		$this->switch_to_block_theme_hooked_blocks();
+
+		$template = get_block_file_template( get_stylesheet() . '//single' );
+
+		$this->assertStringNotContainsString(
+			'<!-- wp:tests/hooked-before /-->',
+			$template->content
+		);
+		$this->assertStringContainsString(
+			'<!-- wp:post-content {"layout":{"type":"constrained"}} /-->'
+			. '<!-- wp:tests/hooked-after /-->',
+			$template->content
+		);
+		$this->assertStringNotContainsString(
+			'<!-- wp:tests/hooked-first-child /-->',
+			$template->content
+		);
+		$this->assertStringNotContainsString(
+			'<!-- wp:tests/hooked-last-child /-->',
+			$template->content
+		);
+	}
+
+	/**
+	 * @ticket 59313
+	 * @ticket 60008
+	 * @ticket 60506
+	 *
+	 * @covers ::get_hooked_blocks
+	 * @covers ::get_block_file_template
+	 */
+	public function test_loading_template_part_with_hooked_blocks() {
+		$this->switch_to_block_theme_hooked_blocks();
+
+		$template = get_block_file_template( get_stylesheet() . '//header', 'wp_template_part' );
+
+		$this->assertStringContainsString(
+			'<!-- wp:tests/hooked-before /-->'
+			. '<!-- wp:navigation {"layout":{"type":"flex","setCascadingProperties":true,"justifyContent":"right"}} /-->',
+			$template->content
+		);
+		$this->assertStringNotContainsString(
+			'<!-- wp:tests/hooked-after /-->',
+			$template->content
+		);
+		$this->assertStringNotContainsString(
+			'<!-- wp:tests/hooked-first-child /-->',
+			$template->content
+		);
+		$this->assertStringNotContainsString(
+			'<!-- wp:tests/hooked-last-child /-->',
+			$template->content
+		);
+	}
+
+	/**
+	 * @ticket 59313
+	 * @ticket 60008
+	 * @ticket 60506
+	 *
+	 * @covers ::get_hooked_blocks
+	 * @covers WP_Block_Patterns_Registry::get_registered
+	 */
+	public function test_loading_pattern_with_hooked_blocks() {
+		$this->switch_to_block_theme_hooked_blocks();
+
+		$pattern = WP_Block_Patterns_Registry::get_instance()->get_registered(
+			get_stylesheet() . '/hidden-comments'
+		);
+
+		$this->assertStringNotContainsString(
+			'<!-- wp:tests/hooked-before /-->',
+			$pattern['content']
+		);
+		$this->assertStringNotContainsString(
+			'<!-- wp:tests/hooked-after /-->',
+			$pattern['content']
+		);
+		$this->assertStringContainsString(
+			'<!-- wp:comments -->'
+			. '<div class="wp-block-comments">'
+			. '<!-- wp:tests/hooked-first-child /-->',
+			str_replace( array( "\n", "\t" ), '', $pattern['content'] )
+		);
+		$this->assertStringContainsString(
+			'<!-- wp:tests/hooked-last-child /-->'
+			. '<!-- /wp:comment-template -->',
+			str_replace( array( "\n", "\t" ), '', $pattern['content'] )
+		);
+	}
+}
diff --git a/tests/blocks/insertHookedBlocks.php b/tests/blocks/insertHookedBlocks.php
new file mode 100644
index 0000000000..cf99b213e5
--- /dev/null
+++ b/tests/blocks/insertHookedBlocks.php
@@ -0,0 +1,221 @@
+<?php
+/**
+ * Tests for the insert_hooked_blocks function.
+ *
+ * @package WordPress
+ * @subpackage Blocks
+ *
+ * @since 6.5.0
+ *
+ * @group blocks
+ * @group block-hooks
+ */
+class Tests_Blocks_InsertHookedBlocks extends WP_UnitTestCase {
+	const ANCHOR_BLOCK_TYPE       = 'tests/anchor-block';
+	const HOOKED_BLOCK_TYPE       = 'tests/hooked-block';
+	const OTHER_HOOKED_BLOCK_TYPE = 'tests/other-hooked-block';
+
+	const HOOKED_BLOCKS = array(
+		self::ANCHOR_BLOCK_TYPE => array(
+			'after'  => array( self::HOOKED_BLOCK_TYPE ),
+			'before' => array( self::OTHER_HOOKED_BLOCK_TYPE ),
+		),
+	);
+
+	/**
+	 * @ticket 59572
+	 * @ticket 60126
+	 * @ticket 60506
+	 *
+	 * @covers ::insert_hooked_blocks
+	 */
+	public function test_insert_hooked_blocks_returns_correct_markup() {
+		$anchor_block = array(
+			'blockName' => self::ANCHOR_BLOCK_TYPE,
+		);
+
+		$actual = insert_hooked_blocks( $anchor_block, 'after', self::HOOKED_BLOCKS, array() );
+		$this->assertSame(
+			'<!-- wp:' . self::HOOKED_BLOCK_TYPE . ' /-->',
+			$actual,
+			"Markup for hooked block wasn't generated correctly."
+		);
+	}
+
+	/**
+	 * @ticket 59572
+	 * @ticket 60126
+	 * @ticket 60506
+	 *
+	 * @covers ::insert_hooked_blocks
+	 */
+	public function test_insert_hooked_blocks_if_block_is_ignored() {
+		$anchor_block = array(
+			'blockName' => 'tests/anchor-block',
+			'attrs'     => array(
+				'metadata' => array(
+					'ignoredHookedBlocks' => array( self::HOOKED_BLOCK_TYPE ),
+				),
+			),
+		);
+
+		$actual = insert_hooked_blocks( $anchor_block, 'after', self::HOOKED_BLOCKS, array() );
+		$this->assertSame(
+			'',
+			$actual,
+			"No markup should've been generated for ignored hooked block."
+		);
+	}
+
+	/**
+	 * @ticket 59572
+	 * @ticket 60126
+	 * @ticket 60506
+	 *
+	 * @covers ::insert_hooked_blocks
+	 */
+	public function test_insert_hooked_blocks_if_other_block_is_ignored() {
+		$anchor_block = array(
+			'blockName' => 'tests/anchor-block',
+			'attrs'     => array(
+				'metadata' => array(
+					'ignoredHookedBlocks' => array( self::HOOKED_BLOCK_TYPE ),
+				),
+			),
+		);
+
+		$actual = insert_hooked_blocks( $anchor_block, 'before', self::HOOKED_BLOCKS, array() );
+		$this->assertSame(
+			'<!-- wp:' . self::OTHER_HOOKED_BLOCK_TYPE . ' /-->',
+			$actual,
+			"Markup for newly hooked block should've been generated."
+		);
+	}
+
+	/**
+	 * @ticket 59572
+	 * @ticket 60126
+	 * @ticket 60506
+	 *
+	 * @covers ::insert_hooked_blocks
+	 */
+	public function test_insert_hooked_blocks_filter_can_set_attributes() {
+		$anchor_block = array(
+			'blockName'    => self::ANCHOR_BLOCK_TYPE,
+			'attrs'        => array(
+				'layout' => array(
+					'type' => 'constrained',
+				),
+			),
+			'innerContent' => array(),
+		);
+
+		$filter = function ( $parsed_hooked_block, $hooked_block_type, $relative_position, $parsed_anchor_block ) {
+			// Is the hooked block adjacent to the anchor block?
+			if ( 'before' !== $relative_position && 'after' !== $relative_position ) {
+				return $parsed_hooked_block;
+			}
+
+			// Does the anchor block have a layout attribute?
+			if ( isset( $parsed_anchor_block['attrs']['layout'] ) ) {
+				// Copy the anchor block's layout attribute to the hooked block.
+				$parsed_hooked_block['attrs']['layout'] = $parsed_anchor_block['attrs']['layout'];
+			}
+
+			return $parsed_hooked_block;
+		};
+		add_filter( 'hooked_block_' . self::HOOKED_BLOCK_TYPE, $filter, 10, 4 );
+		$actual = insert_hooked_blocks( $anchor_block, 'after', self::HOOKED_BLOCKS, array() );
+		remove_filter( 'hooked_block_' . self::HOOKED_BLOCK_TYPE, $filter );
+
+		$this->assertSame(
+			'<!-- wp:' . self::HOOKED_BLOCK_TYPE . ' {"layout":{"type":"constrained"}} /-->',
+			$actual,
+			"Markup wasn't generated correctly for hooked block with attribute set by filter."
+		);
+	}
+
+	/**
+	 * @ticket 59572
+	 * @ticket 60126
+	 * @ticket 60506
+	 *
+	 * @covers ::insert_hooked_blocks
+	 */
+	public function test_insert_hooked_blocks_filter_can_wrap_block() {
+		$anchor_block = array(
+			'blockName'    => self::ANCHOR_BLOCK_TYPE,
+			'attrs'        => array(
+				'layout' => array(
+					'type' => 'constrained',
+				),
+			),
+			'innerContent' => array(),
+		);
+
+		$filter = function ( $parsed_hooked_block ) {
+			if ( self::HOOKED_BLOCK_TYPE !== $parsed_hooked_block['blockName'] ) {
+				return $parsed_hooked_block;
+			}
+
+			// Wrap the block in a Group block.
+			return array(
+				'blockName'    => 'core/group',
+				'attrs'        => array(),
+				'innerBlocks'  => array( $parsed_hooked_block ),
+				'innerContent' => array(
+					'<div class="wp-block-group">',
+					null,
+					'</div>',
+				),
+			);
+		};
+		add_filter( 'hooked_block_' . self::HOOKED_BLOCK_TYPE, $filter, 10, 3 );
+		$actual = insert_hooked_blocks( $anchor_block, 'after', self::HOOKED_BLOCKS, array() );
+		remove_filter( 'hooked_block_' . self::HOOKED_BLOCK_TYPE, $filter );
+
+		$this->assertSame(
+			'<!-- wp:group --><div class="wp-block-group"><!-- wp:' . self::HOOKED_BLOCK_TYPE . ' /--></div><!-- /wp:group -->',
+			$actual,
+			"Markup wasn't generated correctly for hooked block wrapped in Group block by filter."
+		);
+	}
+
+	/**
+	 * @ticket 60580
+	 *
+	 * @covers ::insert_hooked_blocks
+	 */
+	public function test_insert_hooked_blocks_filter_can_suppress_hooked_block() {
+		$anchor_block = array(
+			'blockName'    => self::ANCHOR_BLOCK_TYPE,
+			'attrs'        => array(
+				'layout' => array(
+					'type' => 'flex',
+				),
+			),
+			'innerContent' => array(),
+		);
+
+		$filter = function ( $parsed_hooked_block, $hooked_block_type, $relative_position, $parsed_anchor_block ) {
+			// Is the hooked block adjacent to the anchor block?
+			if ( 'before' !== $relative_position && 'after' !== $relative_position ) {
+				return $parsed_hooked_block;
+			}
+
+			if (
+				isset( $parsed_anchor_block['attrs']['layout']['type'] ) &&
+				'flex' === $parsed_anchor_block['attrs']['layout']['type']
+			) {
+				return null;
+			}
+
+			return $parsed_hooked_block;
+		};
+		add_filter( 'hooked_block_' . self::HOOKED_BLOCK_TYPE, $filter, 10, 4 );
+		$actual = insert_hooked_blocks( $anchor_block, 'after', self::HOOKED_BLOCKS, array() );
+		remove_filter( 'hooked_block_' . self::HOOKED_BLOCK_TYPE, $filter );
+
+		$this->assertSame( '', $actual, "No markup should've been generated for hooked block suppressed by filter." );
+	}
+}
diff --git a/tests/blocks/register.php b/tests/blocks/register.php
index 3e55206037..02920a1c21 100644
--- a/tests/blocks/register.php
+++ b/tests/blocks/register.php
@@ -52,11 +52,18 @@ class Tests_Blocks_Register extends WP_UnitTestCase {
 	 * @since 5.0.0
 	 */
 	public function tear_down() {
-		$registry = WP_Block_Type_Registry::get_instance();
+		// Removes test block types registered by test cases.
+		$block_types = WP_Block_Type_Registry::get_instance()->get_all_registered();
+		foreach ( $block_types as $block_type ) {
+			$block_name = $block_type->name;
+			if ( str_starts_with( $block_name, 'tests/' ) ) {
+				unregister_block_type( $block_name );
+			}
+		}
 
-		foreach ( array( 'core/test-static', 'core/test-dynamic', 'tests/notice' ) as $block_name ) {
-			if ( $registry->is_registered( $block_name ) ) {
-				$registry->unregister( $block_name );
+		foreach ( wp_scripts()->registered as $script_handle => $script ) {
+			if ( str_starts_with( $script_handle, 'tests-' ) ) {
+				wp_deregister_script( $script_handle );
 			}
 		}
 
@@ -76,7 +83,7 @@ class Tests_Blocks_Register extends WP_UnitTestCase {
 	 * @ticket 45109
 	 */
 	public function test_register_affects_main_registry() {
-		$name     = 'core/test-static';
+		$name     = 'tests/static';
 		$settings = array(
 			'icon' => 'text',
 		);
@@ -91,7 +98,7 @@ class Tests_Blocks_Register extends WP_UnitTestCase {
 	 * @ticket 45109
 	 */
 	public function test_unregister_affects_main_registry() {
-		$name     = 'core/test-static';
+		$name     = 'tests/static';
 		$settings = array(
 			'icon' => 'text',
 		);
@@ -132,30 +139,49 @@ class Tests_Blocks_Register extends WP_UnitTestCase {
 
 	/**
 	 * @ticket 50263
+	 * @ticket 60233
 	 */
 	public function test_generate_block_asset_handle() {
-		$block_name = 'unit-tests/my-block';
+		$block_name = 'tests/my-block';
 
 		$this->assertSame(
-			'unit-tests-my-block-editor-script',
+			'tests-my-block-editor-script',
 			generate_block_asset_handle( $block_name, 'editorScript' )
 		);
 		$this->assertSame(
-			'unit-tests-my-block-script',
+			'tests-my-block-script',
 			generate_block_asset_handle( $block_name, 'script', 0 )
 		);
 		$this->assertSame(
-			'unit-tests-my-block-view-script-100',
+			'tests-my-block-view-script-100',
 			generate_block_asset_handle( $block_name, 'viewScript', 99 )
 		);
 		$this->assertSame(
-			'unit-tests-my-block-editor-style-2',
+			'tests-my-block-view-script-module',
+			generate_block_asset_handle( $block_name, 'viewScriptModule' )
+		);
+		$this->assertSame(
+			'tests-my-block-view-script-module-2',
+			generate_block_asset_handle( $block_name, 'viewScriptModule', 1 )
+		);
+		$this->assertSame(
+			'tests-my-block-view-script-module-100',
+			generate_block_asset_handle( $block_name, 'viewScriptModule', 99 )
+		);
+		$this->assertSame(
+			'tests-my-block-editor-style-2',
 			generate_block_asset_handle( $block_name, 'editorStyle', 1 )
 		);
 		$this->assertSame(
-			'unit-tests-my-block-style',
+			'tests-my-block-style',
 			generate_block_asset_handle( $block_name, 'style' )
 		);
+		// @ticket 59673
+		$this->assertSame(
+			'tests-my-block-view-style',
+			generate_block_asset_handle( $block_name, 'viewStyle' ),
+			'asset handle for viewStyle is not generated correctly'
+		);
 	}
 
 	/**
@@ -186,6 +212,52 @@ class Tests_Blocks_Register extends WP_UnitTestCase {
 		);
 	}
 
+	/**
+	 * @ticket 60233
+	 */
+	public function test_generate_block_asset_handle_core_block_module() {
+		$block_name = 'core/paragraph';
+
+		$this->assertSame(
+			'wp-block-paragraph-editor-script-module',
+			generate_block_asset_handle( $block_name, 'editorScriptModule' )
+		);
+		$this->assertSame(
+			'wp-block-paragraph-editor-script-module-2',
+			generate_block_asset_handle( $block_name, 'editorScriptModule', 1 )
+		);
+		$this->assertSame(
+			'wp-block-paragraph-editor-script-module-100',
+			generate_block_asset_handle( $block_name, 'editorScriptModule', 99 )
+		);
+
+		$this->assertSame(
+			'wp-block-paragraph-view-script-module',
+			generate_block_asset_handle( $block_name, 'viewScriptModule' )
+		);
+		$this->assertSame(
+			'wp-block-paragraph-view-script-module-2',
+			generate_block_asset_handle( $block_name, 'viewScriptModule', 1 )
+		);
+		$this->assertSame(
+			'wp-block-paragraph-view-script-module-100',
+			generate_block_asset_handle( $block_name, 'viewScriptModule', 99 )
+		);
+
+		$this->assertSame(
+			'wp-block-paragraph-script-module',
+			generate_block_asset_handle( $block_name, 'scriptModule' )
+		);
+		$this->assertSame(
+			'wp-block-paragraph-script-module-2',
+			generate_block_asset_handle( $block_name, 'scriptModule', 1 )
+		);
+		$this->assertSame(
+			'wp-block-paragraph-script-module-100',
+			generate_block_asset_handle( $block_name, 'scriptModule', 99 )
+		);
+	}
+
 	/**
 	 * @ticket 50263
 	 */
@@ -220,18 +292,112 @@ class Tests_Blocks_Register extends WP_UnitTestCase {
 	}
 
 	/**
-	 * @expectedIncorrectUsage register_block_script_handle
-	 * @ticket 50263
+	 * @ticket 60233
+	 */
+	public function test_field_not_found_register_block_script_module_id() {
+		$result = register_block_script_module_id( array(), 'viewScriptModule' );
+
+		$this->assertFalse( $result );
+	}
+
+	/**
+	 * @ticket 60233
+	 */
+	public function test_empty_string_value_do_not_register_block_script_module_id() {
+		$metadata = array( 'viewScriptModule' => '' );
+		$result   = register_block_script_module_id( $metadata, 'viewScriptModule' );
+
+		$this->assertFalse( $result );
+	}
+
+	/**
+	 * @ticket 60233
 	 */
-	public function test_missing_asset_file_register_block_script_handle() {
+	public function test_empty_array_value_do_not_register_block_script_module_id() {
+		$metadata = array( 'viewScriptModule' => array() );
+		$result   = register_block_script_module_id( $metadata, 'viewScriptModule' );
+
+		$this->assertFalse( $result );
+	}
+
+	/**
+	 * @ticket 60233
+	 */
+	public function test_wrong_array_index_do_not_register_block_script_module_id() {
+		$metadata = array( 'viewScriptModule' => array( 'test-module_id' ) );
+		$result   = register_block_script_module_id( $metadata, 'script', 1 );
+
+		$this->assertFalse( $result );
+	}
+
+	/**
+	 * @ticket 60233
+	 */
+	public function test_missing_asset_file_register_block_script_module_id() {
 		$metadata = array(
-			'file'   => __FILE__,
-			'name'   => 'unit-tests/test-block',
-			'script' => 'file:./blocks/notice/missing-asset.js',
+			'file'             => __FILE__,
+			'name'             => 'tests/test-block',
+			'viewScriptModule' => 'file:./blocks/notice/missing-asset.js',
 		);
-		$result   = register_block_script_handle( $metadata, 'script' );
+		$result   = register_block_script_module_id( $metadata, 'viewScriptModule' );
 
-		$this->assertFalse( $result );
+		$this->assertSame( 'tests-test-block-view-script-module', $result );
+	}
+
+	/**
+	 * @ticket 60233
+	 */
+	public function test_handle_passed_register_block_script_module_id() {
+		$metadata = array(
+			'viewScriptModule' => 'test-script-module-id',
+		);
+		$result   = register_block_script_module_id( $metadata, 'viewScriptModule' );
+
+		$this->assertSame( 'test-script-module-id', $result );
+	}
+
+	/**
+	 * @ticket 60233
+	 */
+	public function test_handles_passed_register_block_script_module_ids() {
+		$metadata = array(
+			'viewScriptModule' => array( 'test-id', 'test-id-other' ),
+		);
+
+		$result = register_block_script_module_id( $metadata, 'viewScriptModule' );
+		$this->assertSame( 'test-id', $result );
+
+		$result = register_block_script_module_id( $metadata, 'viewScriptModule', 1 );
+		$this->assertSame( 'test-id-other', $result );
+	}
+
+	/**
+	 * @ticket 60233
+	 */
+	public function test_success_register_block_script_module_id() {
+		$metadata = array(
+			'file'             => DIR_TESTDATA . '/blocks/notice/block.json',
+			'name'             => 'tests/test-block',
+			'viewScriptModule' => 'file:./block.js',
+		);
+		$result   = register_block_script_module_id( $metadata, 'viewScriptModule' );
+
+		$this->assertSame( 'tests-test-block-view-script-module', $result );
+
+		// Test the behavior directly within the unit test.
+		$this->assertFalse(
+			strpos(
+				wp_normalize_path( realpath( dirname( $metadata['file'] ) . '/' . $metadata['viewScriptModule'] ) ),
+				trailingslashit( wp_normalize_path( get_template_directory() ) )
+			) === 0
+		);
+
+		$this->assertFalse(
+			strpos(
+				wp_normalize_path( realpath( dirname( $metadata['file'] ) . '/' . $metadata['viewScriptModule'] ) ),
+				trailingslashit( wp_normalize_path( get_stylesheet_directory() ) )
+			) === 0
+		);
 	}
 
 	/**
@@ -248,14 +414,29 @@ class Tests_Blocks_Register extends WP_UnitTestCase {
 
 	public function test_handles_passed_register_block_script_handles() {
 		$metadata = array(
-			'script' => array( 'test-script-handle', 'test-script-handle-2' ),
+			'script' => array( 'test-script-handle', 'test-script-handle-other' ),
 		);
 
 		$result = register_block_script_handle( $metadata, 'script' );
 		$this->assertSame( 'test-script-handle', $result );
 
 		$result = register_block_script_handle( $metadata, 'script', 1 );
-		$this->assertSame( 'test-script-handle-2', $result, 1 );
+		$this->assertSame( 'test-script-handle-other', $result );
+	}
+
+	/**
+	 * @ticket 50263
+	 * @ticket 60460
+	 */
+	public function test_missing_asset_file_register_block_script_handle_with_default_settings() {
+		$metadata = array(
+			'file'   => __FILE__,
+			'name'   => 'tests/test-block',
+			'script' => 'file:./blocks/notice/missing-asset.js',
+		);
+		$result   = register_block_script_handle( $metadata, 'script' );
+
+		$this->assertSame( 'tests-test-block-script', $result );
 	}
 
 	/**
@@ -264,14 +445,14 @@ class Tests_Blocks_Register extends WP_UnitTestCase {
 	public function test_success_register_block_script_handle() {
 		$metadata = array(
 			'file'   => DIR_TESTDATA . '/blocks/notice/block.json',
-			'name'   => 'unit-tests/test-block',
+			'name'   => 'tests/test-block',
 			'script' => 'file:./block.js',
 		);
 		$result   = register_block_script_handle( $metadata, 'script' );
 
-		$this->assertSame( 'unit-tests-test-block-script', $result );
+		$this->assertSame( 'tests-test-block-script', $result );
 
-		// Test the behavior directly within the unit test
+		// Test the behavior directly within the unit test.
 		$this->assertFalse(
 			strpos(
 				wp_normalize_path( realpath( dirname( $metadata['file'] ) . '/' . $metadata['script'] ) ),
@@ -287,6 +468,51 @@ class Tests_Blocks_Register extends WP_UnitTestCase {
 		);
 	}
 
+	/**
+	 * @ticket 60485
+	 */
+	public function test_success_register_block_script_handle_with_custom_handle_name() {
+		$custom_script_handle = 'tests-my-shared-script';
+		$metadata             = array(
+			'file'   => DIR_TESTDATA . '/blocks/notice/block.json',
+			'name'   => 'tests/sample-block',
+			'script' => 'file:./shared-script.js',
+		);
+		$result               = register_block_script_handle( $metadata, 'script' );
+
+		$this->assertSame( $custom_script_handle, $result );
+		$this->assertStringEndsWith(
+			'shared-script.js',
+			wp_scripts()->registered[ $custom_script_handle ]->src
+		);
+	}
+
+	/**
+	 * @ticket 60485
+	 */
+	public function test_reuse_registered_block_script_handle_with_custom_handle_name() {
+		$custom_script_handle = 'tests-my-shared-script';
+		$custom_script_src    = 'https://example.com/foo.js';
+		wp_register_script( $custom_script_handle, $custom_script_src );
+
+		$this->assertTrue(
+			wp_script_is( $custom_script_handle, 'registered' )
+		);
+
+		$metadata = array(
+			'file'   => DIR_TESTDATA . '/blocks/notice/block.json',
+			'name'   => 'tests/sample-block',
+			'script' => 'file:./shared-script.js',
+		);
+		$result   = register_block_script_handle( $metadata, 'script' );
+
+		$this->assertSame( $custom_script_handle, $result );
+		$this->assertSame(
+			$custom_script_src,
+			wp_scripts()->registered[ $custom_script_handle ]->src
+		);
+	}
+
 	/**
 	 * @ticket 55513
 	 */
@@ -439,22 +665,34 @@ class Tests_Blocks_Register extends WP_UnitTestCase {
 	 */
 	public function test_success_register_block_style_handle() {
 		$metadata = array(
-			'file'  => DIR_TESTDATA . '/blocks/notice/block.json',
-			'name'  => 'unit-tests/test-block',
-			'style' => 'file:./block.css',
+			'file'      => DIR_TESTDATA . '/blocks/notice/block.json',
+			'name'      => 'tests/test-block',
+			'style'     => 'file:./block.css',
+			'viewStyle' => 'file:./block-view.css',
 		);
 		$result   = register_block_style_handle( $metadata, 'style' );
 
-		$this->assertSame( 'unit-tests-test-block-style', $result );
-		$this->assertFalse( wp_styles()->get_data( 'unit-tests-test-block-style', 'rtl' ) );
+		$this->assertSame( 'tests-test-block-style', $result );
+		$this->assertFalse( wp_styles()->get_data( 'tests-test-block-style', 'rtl' ) );
 
 		// @ticket 50328
 		$this->assertSame(
 			wp_normalize_path( realpath( DIR_TESTDATA . '/blocks/notice/block.css' ) ),
-			wp_normalize_path( wp_styles()->get_data( 'unit-tests-test-block-style', 'path' ) )
+			wp_normalize_path( wp_styles()->get_data( 'tests-test-block-style', 'path' ) )
 		);
 
-		// Test the behavior directly within the unit test
+		// Test viewStyle property
+		$result = register_block_style_handle( $metadata, 'viewStyle' );
+		$this->assertSame( 'tests-test-block-view-style', $result );
+
+		// @ticket 59673
+		$this->assertSame(
+			wp_normalize_path( realpath( DIR_TESTDATA . '/blocks/notice/block-view.css' ) ),
+			wp_normalize_path( wp_styles()->get_data( 'tests-test-block-view-style', 'path' ) ),
+			'viewStyle asset path is not correct'
+		);
+
+		// Test the behavior directly within the unit test.
 		$this->assertFalse(
 			strpos(
 				wp_normalize_path( realpath( dirname( $metadata['file'] ) . '/' . $metadata['style'] ) ),
@@ -483,7 +721,7 @@ class Tests_Blocks_Register extends WP_UnitTestCase {
 
 		$metadata = array(
 			'file'  => DIR_TESTDATA . '/blocks/notice/block.json',
-			'name'  => 'unit-tests/test-block-rtl',
+			'name'  => 'tests/test-block-rtl',
 			'style' => 'file:./block.css',
 		);
 
@@ -491,14 +729,14 @@ class Tests_Blocks_Register extends WP_UnitTestCase {
 		$wp_locale->text_direction = 'rtl';
 
 		$handle       = register_block_style_handle( $metadata, 'style' );
-		$extra_rtl    = wp_styles()->get_data( 'unit-tests-test-block-rtl-style', 'rtl' );
-		$extra_suffix = wp_styles()->get_data( 'unit-tests-test-block-rtl-style', 'suffix' );
-		$extra_path   = wp_normalize_path( wp_styles()->get_data( 'unit-tests-test-block-rtl-style', 'path' ) );
+		$extra_rtl    = wp_styles()->get_data( 'tests-test-block-rtl-style', 'rtl' );
+		$extra_suffix = wp_styles()->get_data( 'tests-test-block-rtl-style', 'suffix' );
+		$extra_path   = wp_normalize_path( wp_styles()->get_data( 'tests-test-block-rtl-style', 'path' ) );
 
 		$wp_locale->text_direction = $orig_text_dir;
 
 		$this->assertSame(
-			'unit-tests-test-block-rtl-style',
+			'tests-test-block-rtl-style',
 			$handle,
 			'The handle did not match the expected handle.'
 		);
@@ -528,13 +766,13 @@ class Tests_Blocks_Register extends WP_UnitTestCase {
 	public function test_register_nonexistent_stylesheet() {
 		$metadata = array(
 			'file'  => DIR_TESTDATA . '/blocks/notice/block.json',
-			'name'  => 'unit-tests/test-block-nonexistent-stylesheet',
+			'name'  => 'tests/test-block-nonexistent-stylesheet',
 			'style' => 'file:./nonexistent.css',
 		);
 		register_block_style_handle( $metadata, 'style' );
 
 		global $wp_styles;
-		$this->assertFalse( $wp_styles->registered['unit-tests-test-block-nonexistent-stylesheet-style']->src );
+		$this->assertFalse( $wp_styles->registered['tests-test-block-nonexistent-stylesheet-style']->src );
 	}
 
 	/**
@@ -599,6 +837,126 @@ class Tests_Blocks_Register extends WP_UnitTestCase {
 		$this->assertFalse( $result );
 	}
 
+	/**
+	 * Tests registering a block using arguments instead of a block.json file.
+	 *
+	 * @ticket 56865
+	 *
+	 * @covers ::register_block_type_from_metadata
+	 */
+	public function test_register_block_type_from_metadata_with_arguments() {
+		$result = register_block_type_from_metadata(
+			'',
+			array(
+				'api_version' => 2,
+				'name'        => 'tests/notice-from-array',
+				'title'       => 'Notice from array',
+				'category'    => 'common',
+				'icon'        => 'star',
+				'description' => 'Shows warning, error or success notices… (registered from an array)',
+				'keywords'    => array(
+					'alert',
+					'message',
+				),
+				'textdomain'  => 'notice-from-array',
+			)
+		);
+
+		$this->assertInstanceOf( 'WP_Block_Type', $result, 'The block was not registered' );
+		$this->assertSame( 2, $result->api_version, 'The API version is incorrect' );
+		$this->assertSame( 'tests/notice-from-array', $result->name, 'The block name is incorrect' );
+		$this->assertSame( 'Notice from array', $result->title, 'The block title is incorrect' );
+		$this->assertSame( 'common', $result->category, 'The block category is incorrect' );
+		$this->assertSame( 'star', $result->icon, 'The block icon is incorrect' );
+		$this->assertSame(
+			'Shows warning, error or success notices… (registered from an array)',
+			$result->description,
+			'The block description is incorrect'
+		);
+		$this->assertSameSets( array( 'alert', 'message' ), $result->keywords, 'The block keywords are incorrect' );
+	}
+
+	/**
+	 * Tests that defined $args can properly override the block.json file.
+	 *
+	 * @ticket 56865
+	 *
+	 * @covers ::register_block_type_from_metadata
+	 */
+	public function test_block_registers_with_args_override() {
+		$result = register_block_type_from_metadata(
+			DIR_TESTDATA . '/blocks/notice',
+			array(
+				'name'  => 'tests/notice-with-overrides',
+				'title' => 'Overriden title',
+				'style' => array( 'tests-notice-style-overridden' ),
+			)
+		);
+
+		$this->assertInstanceOf( 'WP_Block_Type', $result, 'The block was not registered' );
+		$this->assertSame( 2, $result->api_version, 'The API version is incorrect' );
+		$this->assertSame( 'tests/notice-with-overrides', $result->name, 'The block name was not overridden' );
+		$this->assertSame( 'Overriden title', $result->title, 'The block title was not overridden' );
+		$this->assertSameSets(
+			array( 'tests-notice-editor-script' ),
+			$result->editor_script_handles,
+			'The block editor script is incorrect'
+		);
+		$this->assertSameSets(
+			array( 'tests-notice-style-overridden' ),
+			$result->style_handles,
+			'The block style was not overridden'
+		);
+		$this->assertIsCallable( $result->render_callback );
+	}
+
+	/**
+	 * Tests that when the `name` is missing, `register_block_type_from_metadata()`
+	 * will return `false`.
+	 *
+	 * @ticket 56865
+	 *
+	 * @covers ::register_block_type_from_metadata
+	 *
+	 * @dataProvider data_register_block_registers_with_args_override_returns_false_when_name_is_missing
+	 *
+	 * @param string $file The metadata file.
+	 * @param array  $args Array of block type arguments.
+	 */
+	public function test_block_registers_with_args_override_returns_false_when_name_is_missing( $file, $args ) {
+		$this->assertFalse( register_block_type_from_metadata( $file, $args ) );
+	}
+
+	/**
+	 * Data provider.
+	 *
+	 * @return array[]
+	 */
+	public function data_register_block_registers_with_args_override_returns_false_when_name_is_missing() {
+		return array(
+			'no block.json file and no name argument' => array(
+				'file' => '', // No block.json file.
+				'args' => array(
+					'title' => 'Overriden title',
+					'style' => array( 'tests-notice-style-overridden' ),
+				),
+			),
+			'existing file and args not an array'     => array(
+				// A file that exists but is empty. This will bypass the file_exists() check.
+				'file' => DIR_TESTDATA . '/blocks/notice/block.js',
+				'args' => false,
+			),
+			'existing file and args[name] missing'    => array(
+				// A file that exists but is empty. This will bypass the file_exists() check.
+				'file' => DIR_TESTDATA . '/blocks/notice/block.js',
+				'args' => array(
+					'title' => 'Overriden title',
+					'style' => array( 'tests-notice-style-overridden' ),
+				),
+			),
+		);
+	}
+
 	/**
 	 * Tests that the function returns the registered block when the `block.json`
 	 * is found in the fixtures directory.
@@ -606,6 +964,8 @@ class Tests_Blocks_Register extends WP_UnitTestCase {
 	 * @ticket 50263
 	 * @ticket 50328
 	 * @ticket 57585
+	 * @ticket 59797
+	 * @ticket 60233
 	 */
 	public function test_block_registers_with_metadata_fixture() {
 		$result = register_block_type_from_metadata(
@@ -624,10 +984,11 @@ class Tests_Blocks_Register extends WP_UnitTestCase {
 		$this->assertSameSets( array( 'alert', 'message' ), $result->keywords );
 		$this->assertSame(
 			array(
-				'message' => array(
+				'message'  => array(
 					'type' => 'string',
 				),
-				'lock'    => array( 'type' => 'object' ),
+				'lock'     => array( 'type' => 'object' ),
+				'metadata' => array( 'type' => 'object' ),
 			),
 			$result->attributes
 		);
@@ -707,6 +1068,10 @@ class Tests_Blocks_Register extends WP_UnitTestCase {
 			array( 'tests-notice-view-script', 'tests-notice-view-script-2' ),
 			$result->view_script_handles
 		);
+		$this->assertSameSets(
+			array( 'tests-notice-view-script-module', 'tests-notice-view-script-module-2' ),
+			$result->view_script_module_ids
+		);
 		$this->assertSameSets(
 			array( 'tests-notice-editor-style' ),
 			$result->editor_style_handles
@@ -715,11 +1080,24 @@ class Tests_Blocks_Register extends WP_UnitTestCase {
 			array( 'tests-notice-style', 'tests-notice-style-2' ),
 			$result->style_handles
 		);
+		// @ticket 59673
+		$this->assertSameSets(
+			array( 'tests-notice-view-style' ),
+			$result->view_style_handles,
+			'parsed view_style_handles is not correct'
+		);
 
 		// @ticket 50328
 		$this->assertSame(
 			wp_normalize_path( realpath( DIR_TESTDATA . '/blocks/notice/block.css' ) ),
-			wp_normalize_path( wp_styles()->get_data( 'unit-tests-test-block-style', 'path' ) )
+			wp_normalize_path( wp_styles()->get_data( 'tests-test-block-style', 'path' ) )
+		);
+
+		// @ticket 59673
+		$this->assertSame(
+			wp_normalize_path( realpath( DIR_TESTDATA . '/blocks/notice/block-view.css' ) ),
+			wp_normalize_path( wp_styles()->get_data( 'tests-test-block-view-style', 'path' ) ),
+			'viewStyle asset path is not correct'
 		);
 
 		// @ticket 53148
@@ -757,10 +1135,10 @@ class Tests_Blocks_Register extends WP_UnitTestCase {
 	 */
 	public function test_register_block_type_accepts_editor_script_array( $editor_script, $expected ) {
 		$settings = array( 'editor_script' => $editor_script );
-		register_block_type( 'core/test-static', $settings );
+		register_block_type( 'tests/static', $settings );
 
 		$registry   = WP_Block_Type_Registry::get_instance();
-		$block_type = $registry->get_registered( 'core/test-static' );
+		$block_type = $registry->get_registered( 'tests/static' );
 		$this->assertObjectHasProperty( 'editor_script_handles', $block_type );
 		$actual_script         = $block_type->editor_script;
 		$actual_script_handles = $block_type->editor_script_handles;
@@ -823,10 +1201,10 @@ class Tests_Blocks_Register extends WP_UnitTestCase {
 	 */
 	public function test_register_block_type_throws_doing_it_wrong( $editor_script, $expected ) {
 		$settings = array( 'editor_script' => $editor_script );
-		register_block_type( 'core/test-static', $settings );
+		register_block_type( 'tests/static', $settings );
 
 		$registry   = WP_Block_Type_Registry::get_instance();
-		$block_type = $registry->get_registered( 'core/test-static' );
+		$block_type = $registry->get_registered( 'tests/static' );
 		$this->assertObjectHasProperty( 'editor_script_handles', $block_type );
 		$actual_script         = $block_type->editor_script;
 		$actual_script_handles = $block_type->editor_script_handles;
@@ -916,13 +1294,13 @@ class Tests_Blocks_Register extends WP_UnitTestCase {
 	 * @ticket 45109
 	 */
 	public function test_get_dynamic_block_names() {
-		register_block_type( 'core/test-static', array() );
-		register_block_type( 'core/test-dynamic', array( 'render_callback' => array( $this, 'render_stub' ) ) );
+		register_block_type( 'tests/static', array() );
+		register_block_type( 'tests/dynamic', array( 'render_callback' => array( $this, 'render_stub' ) ) );
 
 		$dynamic_block_names = get_dynamic_block_names();
 
-		$this->assertContains( 'core/test-dynamic', $dynamic_block_names );
-		$this->assertNotContains( 'core/test-static', $dynamic_block_names );
+		$this->assertContains( 'tests/dynamic', $dynamic_block_names );
+		$this->assertNotContains( 'tests/static', $dynamic_block_names );
 	}
 
 	/**
diff --git a/tests/blocks/registerCoreBlockStyleHandles.php b/tests/blocks/registerCoreBlockStyleHandles.php
index a4ed1dd418..6f710cab18 100644
--- a/tests/blocks/registerCoreBlockStyleHandles.php
+++ b/tests/blocks/registerCoreBlockStyleHandles.php
@@ -95,7 +95,7 @@ class Tests_Blocks_registerCoreBlockStyleHandles extends WP_UnitTestCase {
 
 			$this->assertArrayHasKey( $style_handle, $wp_styles->registered, 'The key should exist, as this style should be registered' );
 			if ( false === $wp_styles->registered[ $style_handle ]->src ) {
-				$this->assertEmpty( $wp_styles->registered[ $style_handle ]->extra, 'If source is false, not style path should be set' );
+				$this->assertEmpty( $wp_styles->registered[ $style_handle ]->extra, 'If source is false, style path should not be set' );
 			} else {
 				$this->assertStringContainsString( $this->includes_url, $wp_styles->registered[ $style_handle ]->src, 'Source of style should contain the includes url' );
 				$this->assertNotEmpty( $wp_styles->registered[ $style_handle ]->extra, 'The path of the style should exist' );
@@ -123,7 +123,7 @@ class Tests_Blocks_registerCoreBlockStyleHandles extends WP_UnitTestCase {
 
 		$this->assertArrayHasKey( $style_handle, $wp_styles->registered, 'The key should exist, as this style should be registered' );
 		if ( false === $wp_styles->registered[ $style_handle ]->src ) {
-			$this->assertEmpty( $wp_styles->registered[ $style_handle ]->extra, 'If source is false, not style path should be set' );
+			$this->assertEmpty( $wp_styles->registered[ $style_handle ]->extra, 'If source is false, style path should not be set' );
 		} else {
 			$this->assertStringContainsString( $this->includes_url, $wp_styles->registered[ $style_handle ]->src, 'Source of style should contain the includes url' );
 			$this->assertNotEmpty( $wp_styles->registered[ $style_handle ]->extra, 'The path of the style should exist' );
@@ -132,6 +132,40 @@ class Tests_Blocks_registerCoreBlockStyleHandles extends WP_UnitTestCase {
 		}
 	}
 
+	/**
+	 * @ticket 59715
+	 *
+	 * @dataProvider data_block_data
+	 *
+	 * @param string $name The block name.
+	 */
+	public function test_register_core_block_style_handles_should_load_rtl_stylesheets_for_rtl_text_direction( $name ) {
+		global $wp_locale;
+
+		$orig_text_dir             = $wp_locale->text_direction;
+		$wp_locale->text_direction = 'rtl';
+
+		add_filter( 'should_load_separate_core_block_assets', '__return_true' );
+		register_core_block_style_handles();
+
+		$wp_styles = $GLOBALS['wp_styles'];
+
+		$style_handle = "wp-block-{$name}-theme";
+
+		$wp_locale->text_direction = $orig_text_dir;
+
+		$this->assertArrayHasKey( $style_handle, $wp_styles->registered, 'The key should exist, as this style should be registered' );
+		if ( false === $wp_styles->registered[ $style_handle ]->src ) {
+			$this->assertEmpty( $wp_styles->registered[ $style_handle ]->extra, 'If source is false, style path should not be set' );
+		} else {
+			$this->assertStringContainsString( $this->includes_url, $wp_styles->registered[ $style_handle ]->src, 'Source of style should contain the includes url' );
+			$this->assertNotEmpty( $wp_styles->registered[ $style_handle ]->extra, 'The path of the style should exist' );
+			$this->assertArrayHasKey( 'path', $wp_styles->registered[ $style_handle ]->extra, 'The path key of the style should exist in extra array' );
+			$this->assertNotEmpty( $wp_styles->registered[ $style_handle ]->extra['path'], 'The path key of the style should not be empty' );
+			$this->assertArrayHasKey( 'rtl', $wp_styles->registered[ $style_handle ]->extra, 'The rtl key of the style should exist in extra array' );
+		}
+	}
+
 	public function data_block_data() {
 		$core_blocks_meta = require ABSPATH . WPINC . '/blocks/blocks-json.php';
 
diff --git a/tests/blocks/render.php b/tests/blocks/render.php
index 632298186e..cb06030282 100644
--- a/tests/blocks/render.php
+++ b/tests/blocks/render.php
@@ -218,9 +218,9 @@ class Tests_Blocks_Render extends WP_UnitTestCase {
 
 		$html = do_blocks( self::strip_r( file_get_contents( $html_path ) ) );
 		// If blocks opt into Gutenberg's layout implementation
-		// the container will receive an added classname of `wp_unique_id( 'wp-container-' )`
+		// the container will receive an additional, unique classname based on "wp-container-[blockname]-layout"
 		// so we need to normalize the random id.
-		$normalized_html = preg_replace( '/wp-container-\d+/', 'wp-container-1', $html );
+		$normalized_html = preg_replace( '/wp-container-[a-z-]+\d+/', 'wp-container-1', $html );
 
 		// The gallery block uses a unique class name of `wp_unique_id( 'wp-block-gallery-' )`
 		// so we need to normalize the random id.
diff --git a/tests/blocks/context.php b/tests/blocks/renderBlock.php
similarity index 57%
rename from tests/blocks/context.php
rename to tests/blocks/renderBlock.php
index 3edddcf8ef..0c1c4ce10a 100644
--- a/tests/blocks/context.php
+++ b/tests/blocks/renderBlock.php
@@ -1,6 +1,6 @@
 <?php
 /**
- * Tests for block context functions.
+ * Tests for render block functions.
  *
  * @package WordPress
  * @subpackage Blocks
@@ -8,14 +8,7 @@
  *
  * @group blocks
  */
-class Tests_Blocks_Context extends WP_UnitTestCase {
-
-	/**
-	 * Registered block names.
-	 *
-	 * @var string[]
-	 */
-	private $registered_block_names = array();
+class Tests_Blocks_RenderBlock extends WP_UnitTestCase {
 
 	/**
 	 * Sets up each test method.
@@ -38,44 +31,32 @@ class Tests_Blocks_Context extends WP_UnitTestCase {
 	 * Tear down each test method.
 	 */
 	public function tear_down() {
-		while ( ! empty( $this->registered_block_names ) ) {
-			$block_name = array_pop( $this->registered_block_names );
-			unregister_block_type( $block_name );
+		// Removes test block types registered by test cases.
+		$block_types = WP_Block_Type_Registry::get_instance()->get_all_registered();
+		foreach ( $block_types as $block_type ) {
+			$block_name = $block_type->name;
+			if ( str_starts_with( $block_name, 'tests/' ) ) {
+				unregister_block_type( $block_name );
+			}
 		}
 
 		parent::tear_down();
 	}
 
-	/**
-	 * Registers a block type.
-	 *
-	 * @param string|WP_Block_Type $name Block type name including namespace, or alternatively a
-	 *                                   complete WP_Block_Type instance. In case a WP_Block_Type
-	 *                                   is provided, the $args parameter will be ignored.
-	 * @param array                $args {
-	 *     Optional. Array of block type arguments. Any arguments may be defined, however the
-	 *     ones described below are supported by default. Default empty array.
-	 *
-	 *     @type callable $render_callback Callback used to render blocks of this block type.
-	 * }
-	 */
-	protected function register_block_type( $name, $args ) {
-		register_block_type( $name, $args );
-
-		$this->registered_block_names[] = $name;
-	}
-
 	/**
 	 * Tests that a block which provides context makes that context available to
 	 * its inner blocks.
 	 *
 	 * @ticket 49927
+	 *
+	 * @covers ::register_block_type
+	 * @covers ::render_block
 	 */
 	public function test_provides_block_context() {
 		$provided_context = array();
 
-		$this->register_block_type(
-			'gutenberg/test-context-provider',
+		register_block_type(
+			'tests/context-provider',
 			array(
 				'attributes'       => array(
 					'contextWithAssigned'   => array(
@@ -93,21 +74,21 @@ class Tests_Blocks_Context extends WP_UnitTestCase {
 					),
 				),
 				'provides_context' => array(
-					'gutenberg/contextWithAssigned'   => 'contextWithAssigned',
-					'gutenberg/contextWithDefault'    => 'contextWithDefault',
-					'gutenberg/contextWithoutDefault' => 'contextWithoutDefault',
-					'gutenberg/contextNotRequested'   => 'contextNotRequested',
+					'tests/contextWithAssigned'   => 'contextWithAssigned',
+					'tests/contextWithDefault'    => 'contextWithDefault',
+					'tests/contextWithoutDefault' => 'contextWithoutDefault',
+					'tests/contextNotRequested'   => 'contextNotRequested',
 				),
 			)
 		);
 
-		$this->register_block_type(
-			'gutenberg/test-context-consumer',
+		register_block_type(
+			'tests/context-consumer',
 			array(
 				'uses_context'    => array(
-					'gutenberg/contextWithDefault',
-					'gutenberg/contextWithAssigned',
-					'gutenberg/contextWithoutDefault',
+					'tests/contextWithDefault',
+					'tests/contextWithAssigned',
+					'tests/contextWithoutDefault',
 				),
 				'render_callback' => static function ( $attributes, $content, $block ) use ( &$provided_context ) {
 					$provided_context[] = $block->context;
@@ -118,17 +99,17 @@ class Tests_Blocks_Context extends WP_UnitTestCase {
 		);
 
 		$parsed_blocks = parse_blocks(
-			'<!-- wp:gutenberg/test-context-provider {"contextWithAssigned":10} -->' .
-			'<!-- wp:gutenberg/test-context-consumer /-->' .
-			'<!-- /wp:gutenberg/test-context-provider -->'
+			'<!-- wp:tests/context-provider {"contextWithAssigned":10} -->' .
+			'<!-- wp:tests/context-consumer /-->' .
+			'<!-- /wp:tests/context-provider -->'
 		);
 
 		render_block( $parsed_blocks[0] );
 
 		$this->assertSame(
 			array(
-				'gutenberg/contextWithDefault'  => 0,
-				'gutenberg/contextWithAssigned' => 10,
+				'tests/contextWithDefault'  => 0,
+				'tests/contextWithAssigned' => 10,
 			),
 			$provided_context[0]
 		);
@@ -139,14 +120,17 @@ class Tests_Blocks_Context extends WP_UnitTestCase {
 	 * render_block.
 	 *
 	 * @ticket 49927
+	 *
+	 * @covers ::register_block_type
+	 * @covers ::render_block
 	 */
 	public function test_provides_default_context() {
 		global $post;
 
 		$provided_context = array();
 
-		$this->register_block_type(
-			'gutenberg/test-context-consumer',
+		register_block_type(
+			'tests/context-consumer',
 			array(
 				'uses_context'    => array( 'postId', 'postType' ),
 				'render_callback' => static function ( $attributes, $content, $block ) use ( &$provided_context ) {
@@ -157,7 +141,7 @@ class Tests_Blocks_Context extends WP_UnitTestCase {
 			)
 		);
 
-		$parsed_blocks = parse_blocks( '<!-- wp:gutenberg/test-context-consumer /-->' );
+		$parsed_blocks = parse_blocks( '<!-- wp:tests/context-consumer /-->' );
 
 		render_block( $parsed_blocks[0] );
 
@@ -174,12 +158,15 @@ class Tests_Blocks_Context extends WP_UnitTestCase {
 	 * Tests that default block context can be filtered.
 	 *
 	 * @ticket 49927
+	 *
+	 * @covers ::register_block_type
+	 * @covers ::render_block
 	 */
 	public function test_default_context_is_filterable() {
 		$provided_context = array();
 
-		$this->register_block_type(
-			'gutenberg/test-context-consumer',
+		register_block_type(
+			'tests/context-consumer',
 			array(
 				'uses_context'    => array( 'example' ),
 				'render_callback' => static function ( $attributes, $content, $block ) use ( &$provided_context ) {
@@ -195,7 +182,7 @@ class Tests_Blocks_Context extends WP_UnitTestCase {
 			return $context;
 		};
 
-		$parsed_blocks = parse_blocks( '<!-- wp:gutenberg/test-context-consumer /-->' );
+		$parsed_blocks = parse_blocks( '<!-- wp:tests/context-consumer /-->' );
 
 		add_filter( 'render_block_context', $filter_block_context );
 
diff --git a/tests/blocks/renderReusable.php b/tests/blocks/renderReusable.php
index 7609872b77..d3b0cf3ece 100644
--- a/tests/blocks/renderReusable.php
+++ b/tests/blocks/renderReusable.php
@@ -1,6 +1,6 @@
 <?php
 /**
- * Tests for reusable block rendering.
+ * Tests for synced pattern rendering.
  *
  * @package WordPress
  * @subpackage Blocks
@@ -83,7 +83,7 @@ class Tests_Blocks_RenderReusable extends WP_UnitTestCase {
 	}
 
 	/**
-	 * Make sure that a reusable block can be rendered twice in a row.
+	 * Make sure that a synced pattern can be rendered twice in a row.
 	 *
 	 * @ticket 52364
 	 */
diff --git a/tests/blocks/serialize.php b/tests/blocks/serialize.php
index 12da03e3cd..b4221ef3c5 100644
--- a/tests/blocks/serialize.php
+++ b/tests/blocks/serialize.php
@@ -74,6 +74,23 @@ class Tests_Blocks_Serialize extends WP_UnitTestCase {
 		);
 	}
 
+	/**
+	 * @ticket 59669
+	 *
+	 * @covers ::traverse_and_serialize_blocks
+	 */
+	public function test_traverse_and_serialize_blocks_post_callback_modifies_current_block() {
+		$markup = "<!-- wp:outer --><!-- wp:inner {\"key\":\"value\"} -->Example.<!-- /wp:inner -->\n\nExample.\n\n<!-- wp:void /--><!-- /wp:outer -->";
+		$blocks = parse_blocks( $markup );
+
+		$actual = traverse_and_serialize_blocks( $blocks, null, array( __CLASS__, 'add_attribute_to_inner_block' ) );
+
+		$this->assertSame(
+			"<!-- wp:outer --><!-- wp:inner {\"key\":\"value\",\"myattr\":\"myvalue\"} -->Example.<!-- /wp:inner -->\n\nExample.\n\n<!-- wp:void /--><!-- /wp:outer -->",
+			$actual
+		);
+	}
+
 	public static function add_attribute_to_inner_block( &$block ) {
 		if ( 'core/inner' === $block['blockName'] ) {
 			$block['attrs']['myattr'] = 'myvalue';
diff --git a/tests/blocks/setIgnoredHookedBlocksMetadata.php b/tests/blocks/setIgnoredHookedBlocksMetadata.php
new file mode 100644
index 0000000000..7145e56cde
--- /dev/null
+++ b/tests/blocks/setIgnoredHookedBlocksMetadata.php
@@ -0,0 +1,183 @@
+<?php
+/**
+ * Tests for the set_ignored_hooked_blocks_metadata function.
+ *
+ * @package WordPress
+ * @subpackage Blocks
+ *
+ * @since 6.5.0
+ *
+ * @group blocks
+ * @group block-hooks
+ */
+class Tests_Blocks_SetIgnoredHookedBlocksMetadata extends WP_UnitTestCase {
+	/**
+	 * @ticket 60506
+	 */
+	private static function create_block_template_object() {
+		$template              = new WP_Block_Template();
+		$template->type        = 'wp_template';
+		$template->theme       = 'test-theme';
+		$template->slug        = 'single';
+		$template->id          = $template->theme . '//' . $template->slug;
+		$template->title       = 'Single';
+		$template->content     = '<!-- wp:tests/anchor-block /-->';
+		$template->description = 'Description of my template';
+
+		return $template;
+	}
+
+	/**
+	 * @ticket 60506
+	 *
+	 * @covers ::set_ignored_hooked_blocks_metadata
+	 */
+	public function test_set_ignored_hooked_blocks_metadata() {
+		$anchor_block = array(
+			'blockName' => 'tests/anchor-block',
+		);
+
+		$hooked_blocks = array(
+			'tests/anchor-block' => array(
+				'after' => array( 'tests/hooked-block' ),
+			),
+		);
+
+		set_ignored_hooked_blocks_metadata( $anchor_block, 'after', $hooked_blocks, null );
+		$this->assertSame( array( 'tests/hooked-block' ), $anchor_block['attrs']['metadata']['ignoredHookedBlocks'] );
+	}
+
+	/**
+	 * @ticket 60506
+	 *
+	 * @covers ::set_ignored_hooked_blocks_metadata
+	 */
+	public function test_set_ignored_hooked_blocks_metadata_retains_existing_items() {
+		$anchor_block = array(
+			'blockName' => 'tests/anchor-block',
+			'attrs'     => array(
+				'metadata' => array(
+					'ignoredHookedBlocks' => array( 'tests/other-ignored-block' ),
+				),
+			),
+		);
+
+		$hooked_blocks = array(
+			'tests/anchor-block' => array(
+				'after' => array( 'tests/hooked-block' ),
+			),
+		);
+
+		set_ignored_hooked_blocks_metadata( $anchor_block, 'after', $hooked_blocks, null );
+		$this->assertSame(
+			array( 'tests/other-ignored-block', 'tests/hooked-block' ),
+			$anchor_block['attrs']['metadata']['ignoredHookedBlocks']
+		);
+	}
+
+	/**
+	 * @ticket 60506
+	 *
+	 * @covers ::set_ignored_hooked_blocks_metadata
+	 */
+	public function test_set_ignored_hooked_blocks_metadata_for_block_added_by_filter() {
+		$anchor_block = array(
+			'blockName' => 'tests/anchor-block',
+			'attrs'     => array(),
+		);
+
+		$hooked_blocks = array();
+
+		$filter = function ( $hooked_block_types, $relative_position, $anchor_block_type ) {
+			if ( 'tests/anchor-block' === $anchor_block_type && 'after' === $relative_position ) {
+				$hooked_block_types[] = 'tests/hooked-block-added-by-filter';
+			}
+
+			return $hooked_block_types;
+		};
+
+		add_filter( 'hooked_block_types', $filter, 10, 3 );
+		set_ignored_hooked_blocks_metadata( $anchor_block, 'after', $hooked_blocks, null );
+		remove_filter( 'hooked_block_types', $filter, 10 );
+
+		$this->assertSame(
+			array( 'tests/hooked-block-added-by-filter' ),
+			$anchor_block['attrs']['metadata']['ignoredHookedBlocks']
+		);
+	}
+
+	/**
+	 * @ticket 60506
+	 *
+	 * @covers ::set_ignored_hooked_blocks_metadata
+	 */
+	public function test_set_ignored_hooked_blocks_metadata_for_block_added_by_context_aware_filter() {
+		$anchor_block = array(
+			'blockName' => 'tests/anchor-block',
+			'attrs'     => array(),
+		);
+
+		$filter = function ( $hooked_block_types, $relative_position, $anchor_block_type, $context ) {
+			if (
+				! $context instanceof WP_Block_Template ||
+				! property_exists( $context, 'slug' ) ||
+				'single' !== $context->slug
+			) {
+				return $hooked_block_types;
+			}
+
+			if ( 'tests/anchor-block' === $anchor_block_type && 'after' === $relative_position ) {
+				$hooked_block_types[] = 'tests/hooked-block-added-by-filter';
+			}
+
+			return $hooked_block_types;
+		};
+
+		$template = self::create_block_template_object();
+
+		add_filter( 'hooked_block_types', $filter, 10, 4 );
+		set_ignored_hooked_blocks_metadata( $anchor_block, 'after', array(), $template );
+		remove_filter( 'hooked_block_types', $filter, 10 );
+
+		$this->assertSame(
+			array( 'tests/hooked-block-added-by-filter' ),
+			$anchor_block['attrs']['metadata']['ignoredHookedBlocks']
+		);
+	}
+
+	/**
+	 * @ticket 60580
+	 *
+	 * @covers ::set_ignored_hooked_blocks_metadata
+	 */
+	public function test_set_ignored_hooked_blocks_metadata_for_block_suppressed_by_filter() {
+		$anchor_block = array(
+			'blockName' => 'tests/anchor-block',
+			'attrs'     => array(),
+		);
+
+		$hooked_blocks = array(
+			'tests/anchor-block' => array(
+				'after' => array( 'tests/hooked-block', 'tests/hooked-block-suppressed-by-filter' ),
+			),
+		);
+
+		$filter = function ( $parsed_hooked_block, $hooked_block_type, $relative_position, $parsed_anchor_block ) {
+			if (
+				'tests/hooked-block-suppressed-by-filter' === $hooked_block_type &&
+				'after' === $relative_position &&
+				'tests/anchor-block' === $parsed_anchor_block['blockName']
+			) {
+				return null;
+			}
+
+			return $parsed_hooked_block;
+		};
+
+		add_filter( 'hooked_block', $filter, 10, 4 );
+		set_ignored_hooked_blocks_metadata( $anchor_block, 'after', $hooked_blocks, null );
+		remove_filter( 'hooked_block', $filter );
+
+		$this->assertSame( array( 'tests/hooked-block' ), $anchor_block['attrs']['metadata']['ignoredHookedBlocks'] );
+	}
+}
diff --git a/tests/blocks/wpBlock.php b/tests/blocks/wpBlock.php
index dcafe53378..f3edcb8302 100644
--- a/tests/blocks/wpBlock.php
+++ b/tests/blocks/wpBlock.php
@@ -59,6 +59,7 @@ class Tests_Blocks_wpBlock extends WP_UnitTestCase {
 
 	/**
 	 * @ticket 49927
+	 * @ticket 59797
 	 */
 	public function test_constructor_assigns_block_type_from_registry() {
 		$block_type_settings = array(
@@ -83,6 +84,7 @@ class Tests_Blocks_wpBlock extends WP_UnitTestCase {
 					'default' => 10,
 				),
 				'lock'      => array( 'type' => 'object' ),
+				'metadata'  => array( 'type' => 'object' ),
 			),
 			$block->block_type->attributes
 		);
diff --git a/tests/blocks/wpBlockPatternsRegistry.php b/tests/blocks/wpBlockPatternsRegistry.php
index 8eb4fce78b..5015b07f5a 100644
--- a/tests/blocks/wpBlockPatternsRegistry.php
+++ b/tests/blocks/wpBlockPatternsRegistry.php
@@ -20,6 +20,15 @@ class Tests_Blocks_wpBlockPattersRegistry extends WP_UnitTestCase {
 	 */
 	private $registry = null;
 
+	/**
+	 * Original registered patterns.
+	 * This is the value from the internal private property.
+	 *
+	 * @since 6.5.0
+	 * @var array
+	 */
+	private $original_registered_patterns = null;
+
 	/**
 	 * Set up each test method.
 	 *
@@ -28,7 +37,8 @@ class Tests_Blocks_wpBlockPattersRegistry extends WP_UnitTestCase {
 	public function set_up() {
 		parent::set_up();
 
-		$this->registry = new WP_Block_Patterns_Registry();
+		$this->registry                     = new WP_Block_Patterns_Registry();
+		$this->original_registered_patterns = $this->get_registered_patterns_variable_value();
 	}
 
 	/**
@@ -45,6 +55,7 @@ class Tests_Blocks_wpBlockPattersRegistry extends WP_UnitTestCase {
 			$registry->unregister( 'tests/my-block' );
 		}
 
+		$this->set_registered_patterns_variable_value( $this->original_registered_patterns );
 		parent::tear_down();
 	}
 
@@ -316,10 +327,35 @@ class Tests_Blocks_wpBlockPattersRegistry extends WP_UnitTestCase {
 		$this->assertSame( $pattern_two, $pattern );
 	}
 
+	/**
+	 * Should insert a theme attribute into Template Part blocks in registered patterns.
+	 *
+	 * @ticket 59583
+	 *
+	 * @covers WP_Block_Patterns_Registry::register
+	 * @covers WP_Block_Patterns_Registry::get_all_registered
+	 */
+	public function test_get_all_registered_includes_theme_attribute() {
+		$test_pattern = array(
+			'title'   => 'Test Pattern',
+			'content' => '<!-- wp:template-part {"slug":"header","align":"full","tagName":"header","className":"site-header"} /-->',
+		);
+		$this->registry->register( 'test/pattern', $test_pattern );
+
+		$expected = sprintf(
+			'<!-- wp:template-part {"slug":"header","align":"full","tagName":"header","className":"site-header","theme":"%s"} /-->',
+			get_stylesheet()
+		);
+		$patterns = $this->registry->get_all_registered();
+		$this->assertSame( $expected, $patterns[0]['content'] );
+	}
+
 	/**
 	 * Should insert hooked blocks into registered patterns.
 	 *
 	 * @ticket 59476
+	 * @ticket 60008
+	 * @ticket 60506
 	 *
 	 * @covers WP_Block_Patterns_Registry::register
 	 * @covers WP_Block_Patterns_Registry::get_all_registered
@@ -358,20 +394,41 @@ class Tests_Blocks_wpBlockPattersRegistry extends WP_UnitTestCase {
 		$pattern_three['name']     = 'test/three';
 		$pattern_three['content'] .= '<!-- wp:tests/my-block /-->';
 
-		$expected = array(
-			$pattern_one,
-			$pattern_two,
-			$pattern_three,
+		$registered = $this->registry->get_all_registered();
+		$this->assertCount( 3, $registered );
+		$this->assertStringEndsWith( '<!-- wp:tests/my-block /-->', $registered[1]['content'] );
+		$this->assertStringEndsWith( '<!-- wp:tests/my-block /-->', $registered[2]['content'] );
+	}
+
+	/**
+	 * Should insert a theme attribute into Template Part blocks in registered patterns.
+	 *
+	 * @ticket 59583
+	 *
+	 * @covers WP_Block_Patterns_Registry::register
+	 * @covers WP_Block_Patterns_Registry::get_registered
+	 */
+	public function test_get_registered_includes_theme_attribute() {
+		$test_pattern = array(
+			'title'   => 'Test Pattern',
+			'content' => '<!-- wp:template-part {"slug":"header","align":"full","tagName":"header","className":"site-header"} /-->',
 		);
+		$this->registry->register( 'test/pattern', $test_pattern );
 
-		$registered = $this->registry->get_all_registered();
-		$this->assertSame( $expected, $registered );
+		$expected = sprintf(
+			'<!-- wp:template-part {"slug":"header","align":"full","tagName":"header","className":"site-header","theme":"%s"} /-->',
+			get_stylesheet()
+		);
+		$pattern  = $this->registry->get_registered( 'test/pattern' );
+		$this->assertSame( $expected, $pattern['content'] );
 	}
 
 	/**
 	 * Should insert hooked blocks into registered patterns.
 	 *
 	 * @ticket 59476
+	 * @ticket 60008
+	 * @ticket 60506
 	 *
 	 * @covers WP_Block_Patterns_Registry::register
 	 * @covers WP_Block_Patterns_Registry::get_registered
@@ -398,11 +455,8 @@ class Tests_Blocks_wpBlockPattersRegistry extends WP_UnitTestCase {
 		);
 		$this->registry->register( 'test/two', $pattern_two );
 
-		$pattern_one['name']    = 'test/one';
-		$pattern_one['content'] = '<!-- wp:tests/my-block /-->' . $pattern_one['content'];
-
 		$pattern = $this->registry->get_registered( 'test/one' );
-		$this->assertSame( $pattern_one, $pattern );
+		$this->assertStringStartsWith( '<!-- wp:tests/my-block /-->', $pattern['content'] );
 	}
 
 	/**
@@ -436,4 +490,203 @@ class Tests_Blocks_wpBlockPattersRegistry extends WP_UnitTestCase {
 		$result = $this->registry->is_registered( 'test/one' );
 		$this->assertTrue( $result );
 	}
+
+	/**
+	 * Ensures theme patterns are registered on init.
+	 *
+	 * @ticket 59723
+	 *
+	 * @covers ::_register_theme_block_patterns
+	 */
+	public function test_register_theme_block_patterns_on_init() {
+		// This test needs to use access static class properties.
+		$registry = WP_Block_Patterns_Registry::get_instance();
+
+		// Ensure we're using a theme with patterns.
+		switch_theme( 'twentytwentythree' );
+
+		$theme          = wp_get_theme();
+		$theme_patterns = array_values( wp_list_pluck( $theme->get_block_patterns(), 'slug' ) );
+
+		// This helper is fired on the init hook.
+		_register_theme_block_patterns();
+
+		$registered = wp_list_pluck( $registry->get_all_registered(), 'name' );
+
+		// Cleanup patterns registry.
+		foreach ( $theme_patterns as $pattern ) {
+			$registry->unregister( $pattern );
+		}
+
+		$this->assertSameSets( $theme_patterns, array_intersect( $theme_patterns, $registered ), 'Could not confirm theme patterns were registered.' );
+	}
+
+	/**
+	 * Ensures theme patterns are not registered when no themes are active and valid.
+	 *
+	 * @ticket 59723
+	 *
+	 * @covers ::_register_theme_block_patterns
+	 */
+	public function test_register_theme_block_patterns_on_init_skipped_during_install() {
+		// This test needs to use access static class properties.
+		$registry = WP_Block_Patterns_Registry::get_instance();
+
+		// Ensure we're using a theme with patterns.
+		switch_theme( 'twentytwentythree' );
+
+		$theme          = wp_get_theme();
+		$theme_patterns = array_values( wp_list_pluck( $theme->get_block_patterns(), 'slug' ) );
+
+		/*
+		 * This will short-circuit theme activation.
+		 * @see wp_get_active_and_valid_themes().
+		 */
+		wp_installing( true );
+
+		// This helper is fired on the init hook.
+		_register_theme_block_patterns();
+
+		$registered = wp_list_pluck( $registry->get_all_registered(), 'name' );
+
+		// Cleanup.
+		wp_installing( false );
+
+		$this->assertEmpty( array_intersect( $theme_patterns, $registered ), 'Theme patterns were were incorrectly registered.' );
+	}
+
+	/**
+	 * Ensures theme patterns are lazy loaded.
+	 *
+	 * @ticket 59532
+	 *
+	 * @covers WP_Block_Patterns_Registry::get_all_registered
+	 */
+	public function test_lazy_loading_block_patterns_get_all_registered() {
+		// This test needs to use access static class properties.
+		$registry = WP_Block_Patterns_Registry::get_instance();
+
+		// Testing only the first pattern loaded from the theme.
+		$pattern_name = 'twentytwentythree/footer-default';
+
+		// Ensure we're using a theme with patterns.
+		switch_theme( 'twentytwentythree' );
+
+		// This helper is fired on the init hook.
+		_register_theme_block_patterns();
+
+		// Get the value of the private property.
+		$registered_patterns = $this->get_registered_patterns_variable_value();
+
+		$this->assertTrue(
+			isset( $registered_patterns[ $pattern_name ]['filePath'] ) &&
+			! isset( $registered_patterns[ $pattern_name ]['content'] ),
+			'Pattern was not lazy loaded.'
+		);
+
+		$all_patterns = $registry->get_all_registered();
+
+		$loaded_pattern = array_values(
+			array_filter(
+				$all_patterns,
+				function ( $pattern ) use ( $pattern_name ) {
+					return $pattern['name'] === $pattern_name;
+				}
+			)
+		);
+
+		$this->assertTrue(
+			! empty( $loaded_pattern[0]['content'] ),
+			'Content not loaded.'
+		);
+
+		// Check if the original property was updated.
+		$registered_patterns = $this->get_registered_patterns_variable_value();
+
+		$this->assertTrue(
+			! empty( $registered_patterns[ $pattern_name ]['content'] ),
+			'Content not updated.'
+		);
+	}
+
+	/**
+	 * Ensures theme patterns are lazy loaded.
+	 *
+	 * @ticket 59532
+	 *
+	 * @covers WP_Block_Patterns_Registry::get_registered
+	 */
+	public function test_lazy_loading_block_patterns_get_registered() {
+		// This test needs to use access static class properties.
+		$registry = WP_Block_Patterns_Registry::get_instance();
+
+		// Testing only the first pattern loaded from the theme.
+		$pattern_name = 'twentytwentythree/footer-default';
+
+		// Ensure we're using a theme with patterns.
+		switch_theme( 'twentytwentythree' );
+
+		// This helper is fired on the init hook.
+		_register_theme_block_patterns();
+
+		// Get the value of the private property.
+		$registered_patterns = $this->get_registered_patterns_variable_value();
+
+		$this->assertTrue(
+			isset( $registered_patterns[ $pattern_name ]['filePath'] ) &&
+			! isset( $registered_patterns[ $pattern_name ]['content'] ),
+			'Pattern was not lazy loaded.'
+		);
+
+		$loaded_pattern = $registry->get_registered( $pattern_name );
+
+		$this->assertTrue(
+			! empty( $loaded_pattern['content'] ),
+			'Content not loaded.'
+		);
+
+		// Check if the original property was updated.
+		$registered_patterns = $this->get_registered_patterns_variable_value();
+
+		$this->assertTrue(
+			! empty( $registered_patterns[ $pattern_name ]['content'] ),
+			'Content not updated.'
+		);
+	}
+
+	/**
+	 * Get the value of the `$registered_patterns` private property.
+	 *
+	 * @return array
+	 */
+	private function get_registered_patterns_variable_value() {
+		$registry = WP_Block_Patterns_Registry::get_instance();
+		// Use Reflection to access private property.
+		$reflection = new ReflectionClass( $registry );
+		$property   = $reflection->getProperty( 'registered_patterns' );
+		$property->setAccessible( true );
+
+		// Get the value of the private property.
+		$registered_patterns = $property->getValue( $registry );
+		$property->setAccessible( false );
+
+		return $registered_patterns;
+	}
+
+	/**
+	 * Set the value of the `$registered_patterns` private property.
+	 *
+	 * @param array $value The value to set.
+	 */
+	private function set_registered_patterns_variable_value( $value ) {
+		$registry = WP_Block_Patterns_Registry::get_instance();
+		// Use Reflection to access private property.
+		$reflection = new ReflectionClass( $registry );
+		$property   = $reflection->getProperty( 'registered_patterns' );
+		$property->setAccessible( true );
+
+		// Set the value of the private property.
+		$property->setValue( $registry, $value );
+		$property->setAccessible( false );
+	}
 }
diff --git a/tests/blocks/wpBlockType.php b/tests/blocks/wpBlockType.php
index 330d082bc2..b826faf575 100644
--- a/tests/blocks/wpBlockType.php
+++ b/tests/blocks/wpBlockType.php
@@ -80,6 +80,7 @@ class Tests_Blocks_wpBlockType extends WP_UnitTestCase {
 
 	/*
 	 * @ticket 55567
+	 * @ticket 59797
 	 * @covers WP_Block_Type::set_props
 	 */
 	public function test_core_attributes() {
@@ -87,7 +88,8 @@ class Tests_Blocks_wpBlockType extends WP_UnitTestCase {
 
 		$this->assertSameSetsWithIndex(
 			array(
-				'lock' => array( 'type' => 'object' ),
+				'lock'     => array( 'type' => 'object' ),
+				'metadata' => array( 'type' => 'object' ),
 			),
 			$block_type->attributes
 		);
@@ -95,6 +97,7 @@ class Tests_Blocks_wpBlockType extends WP_UnitTestCase {
 
 	/*
 	 * @ticket 55567
+	 * @ticket 59797
 	 * @covers WP_Block_Type::set_props
 	 */
 	public function test_core_attributes_matches_custom() {
@@ -102,9 +105,12 @@ class Tests_Blocks_wpBlockType extends WP_UnitTestCase {
 			'core/fake',
 			array(
 				'attributes' => array(
-					'lock' => array(
+					'lock'     => array(
 						'type' => 'string',
 					),
+					'metadata' => array(
+						'type' => 'number',
+					),
 				),
 			)
 		);
@@ -112,7 +118,8 @@ class Tests_Blocks_wpBlockType extends WP_UnitTestCase {
 		// Backward compatibility: Don't override attributes with the same name.
 		$this->assertSameSetsWithIndex(
 			array(
-				'lock' => array( 'type' => 'string' ),
+				'lock'     => array( 'type' => 'string' ),
+				'metadata' => array( 'type' => 'number' ),
 			),
 			$block_type->attributes
 		);
@@ -453,4 +460,196 @@ class Tests_Blocks_wpBlockType extends WP_UnitTestCase {
 			array( '<!- - wp:core/separator -->', 0 ),
 		);
 	}
+
+	/**
+	 * @ticket 59969
+	 */
+	public function test_variation_callback() {
+		$block_type = new WP_Block_Type(
+			'test/block',
+			array(
+				'title'              => 'Test title',
+				'variation_callback' => array( $this, 'mock_variation_callback' ),
+			)
+		);
+
+		$this->assertSameSets( $this->mock_variation_callback(), $block_type->variations );
+	}
+
+	/**
+	 * @ticket 59969
+	 * @covers WP_Block_Type::get_variations
+	 */
+	public function test_get_variations() {
+		$block_type = new WP_Block_Type(
+			'test/block',
+			array(
+				'title'              => 'Test title',
+				'variation_callback' => array( $this, 'mock_variation_callback' ),
+			)
+		);
+
+		$this->assertSameSets( $this->mock_variation_callback(), $block_type->get_variations() );
+	}
+
+	/**
+	 * @ticket 59969
+	 */
+	public function test_variations_precedence_over_callback() {
+		$test_variations = array( 'name' => 'test1' );
+
+		$block_type = new WP_Block_Type(
+			'test/block',
+			array(
+				'title'              => 'Test title',
+				'variations'         => $test_variations,
+				'variation_callback' => array( $this, 'mock_variation_callback' ),
+			)
+		);
+
+		// If the variations are defined, the callback should not be used.
+		$this->assertSameSets( $test_variations, $block_type->variations );
+	}
+
+	/**
+	 * @ticket 59969
+	 */
+	public function test_variations_callback_are_lazy_loaded() {
+		$callback_called = false;
+
+		$block_type = new WP_Block_Type(
+			'test/block',
+			array(
+				'title'              => 'Test title',
+				'variation_callback' => function () use ( &$callback_called ) {
+					$callback_called = true;
+					return $this->mock_variation_callback();
+				},
+			)
+		);
+
+		$this->assertSame( false, $callback_called, 'The callback should not be called before the variations are accessed.' );
+		$block_type->variations; // access the variations.
+		$this->assertSame( true, $callback_called, 'The callback should be called when the variations are accessed.' );
+	}
+
+	/**
+	 * @ticket 59969
+	 * @covers WP_Block_Type::get_variations
+	 */
+	public function test_variations_precedence_over_callback_post_registration() {
+		$test_variations = array( 'name' => 'test1' );
+		$callback_called = false;
+
+		$block_type             = new WP_Block_Type(
+			'test/block',
+			array(
+				'title'              => 'Test title',
+				'variation_callback' => function () use ( &$callback_called ) {
+					$callback_called = true;
+					return $this->mock_variation_callback();
+				},
+			)
+		);
+		$block_type->variations = $test_variations;
+
+		// If the variations are defined after registration but before first access, the callback should not override it.
+		$this->assertSameSets( $test_variations, $block_type->get_variations(), 'Variations are same as variations set' );
+		$this->assertSame( false, $callback_called, 'The callback was never called.' );
+	}
+
+	/**
+	 * @ticket 59969
+	 * @covers WP_Block_Type::get_variations
+	 */
+	public function test_variations_callback_happens_only_once() {
+		$callback_count = 0;
+
+		$block_type = new WP_Block_Type(
+			'test/block',
+			array(
+				'title'              => 'Test title',
+				'variation_callback' => function () use ( &$callback_count ) {
+					$callback_count++;
+					return $this->mock_variation_callback();
+				},
+			)
+		);
+
+		$this->assertSame( 0, $callback_count, 'The callback should not be called before the variations are accessed.' );
+		$block_type->get_variations(); // access the variations.
+		$this->assertSame( 1, $callback_count, 'The callback should be called when the variations are accessed.' );
+		$block_type->get_variations(); // access the variations again.
+		$this->assertSame( 1, $callback_count, 'The callback should not be called again.' );
+	}
+
+	/**
+	 * Test filter function for get_block_type_variations filter.
+	 *
+	 * @param array $variations Block variations before filter.
+	 * @param WP_Block_Type $block_type Block type.
+	 *
+	 * @return array Block variations after filter.
+	 */
+	public function filter_test_variations( $variations, $block_type ) {
+		return array( array( 'name' => 'test1' ) );
+	}
+
+	/**
+	 * @ticket 59969
+	 */
+	public function test_get_block_type_variations_filter_with_variation_callback() {
+		// Filter will override the variations obtained from the callback.
+		add_filter( 'get_block_type_variations', array( $this, 'filter_test_variations' ), 10, 2 );
+		$expected_variations = array( array( 'name' => 'test1' ) );
+
+		$callback_called = false;
+		$block_type      = new WP_Block_Type(
+			'test/block',
+			array(
+				'title'              => 'Test title',
+				'variation_callback' => function () use ( &$callback_called ) {
+					$callback_called = true;
+					return $this->mock_variation_callback();
+				},
+			)
+		);
+
+		$obtained_variations = $block_type->variations; // access the variations.
+
+		$this->assertSame( true, $callback_called, 'The callback should be called when the variations are accessed.' );
+		$this->assertSameSets( $obtained_variations, $expected_variations, 'The variations obtained from the callback should be filtered.' );
+	}
+
+	/**
+	 * @ticket 59969
+	 */
+	public function test_get_block_type_variations_filter_variations() {
+		// Filter will override the variations set during registration.
+		add_filter( 'get_block_type_variations', array( $this, 'filter_test_variations' ), 10, 2 );
+		$expected_variations = array( array( 'name' => 'test1' ) );
+
+		$block_type = new WP_Block_Type(
+			'test/block',
+			array(
+				'title'      => 'Test title',
+				'variations' => $this->mock_variation_callback(),
+			)
+		);
+
+		$obtained_variations = $block_type->variations; // access the variations.
+		$this->assertSameSets( $obtained_variations, $expected_variations, 'The variations that was initially set should be filtered.' );
+	}
+
+	/**
+	 * Mock variation callback.
+	 *
+	 * @return array
+	 */
+	public function mock_variation_callback() {
+		return array(
+			array( 'name' => 'var1' ),
+			array( 'name' => 'var2' ),
+		);
+	}
 }
diff --git a/tests/canonical.php b/tests/canonical.php
index 8bad744061..b83e9563d1 100644
--- a/tests/canonical.php
+++ b/tests/canonical.php
@@ -10,11 +10,45 @@
  */
 class Tests_Canonical extends WP_Canonical_UnitTestCase {
 
+	public static $private_cpt_post;
+
+	public static function wpSetUpBeforeClass( WP_UnitTest_Factory $factory ) {
+		// Set up fixtures in WP_Canonical_UnitTestCase.
+		parent::wpSetUpBeforeClass( $factory );
+
+		self::set_up_custom_post_types();
+		self::$private_cpt_post = $factory->post->create(
+			array(
+				'post_type'  => 'wp_tests_private',
+				'post_title' => 'private-cpt-post',
+			)
+		);
+	}
+
 	public function set_up() {
 		parent::set_up();
 		wp_set_current_user( self::$author_id );
+		self::set_up_custom_post_types();
 
-		add_filter( 'pre_option_wp_attachment_pages_enabled', '__return_true' );
+		update_option( 'wp_attachment_pages_enabled', 1 );
+	}
+
+	/**
+	 * Register custom post type for tests.
+	 *
+	 * Register non publicly queryable post type with public set to true.
+	 *
+	 * These arguments are intentionally contradictory for the test associated
+	 * with ticket #59795.
+	 */
+	public static function set_up_custom_post_types() {
+		register_post_type(
+			'wp_tests_private',
+			array(
+				'public'             => true,
+				'publicly_queryable' => false,
+			)
+		);
 	}
 
 	/**
@@ -206,6 +240,7 @@ class Tests_Canonical extends WP_Canonical_UnitTestCase {
 			array( '/?author=%d', '/author/canonical-author/' ),
 			// array( '/?author=%d&year=2008', '/2008/?author=3'),
 			// array( '/author/canonical-author/?year=2008', '/2008/?author=3'), // Either or, see previous testcase.
+			array( '/author/canonical-author/?author[1]=hello', '/author/canonical-author/?author[1]=hello', 60059 ),
 
 			// Feeds.
 			array( '/?feed=atom', '/feed/atom/' ),
@@ -342,20 +377,43 @@ class Tests_Canonical extends WP_Canonical_UnitTestCase {
 	 * Ensure multiple post types do not throw a notice.
 	 *
 	 * @ticket 43056
+	 * @ticket 59795
+	 *
+	 * @dataProvider data_redirect_guess_404_permalink_post_types
 	 */
-	public function test_redirect_guess_404_permalink_post_types() {
-		/*
-		 * Sample-page is intentionally missspelt as sample-pag to ensure
-		 * the 404 post permalink guessing runs.
-		 *
-		 * Please do not correct the apparent typo.
-		 */
+	public function test_redirect_guess_404_permalink_post_types( $original_url, $expected ) {
+		$this->assertCanonical( $original_url, $expected );
+	}
 
-		// String format post type.
-		$this->assertCanonical( '/?name=sample-pag&post_type=page', '/sample-page/' );
-		// Array formatted post type or types.
-		$this->assertCanonical( '/?name=sample-pag&post_type[]=page', '/sample-page/' );
-		$this->assertCanonical( '/?name=sample-pag&post_type[]=page&post_type[]=post', '/sample-page/' );
+	/**
+	 * Data provider for test_redirect_guess_404_permalink_post_types().
+	 *
+	 * In the original URLs the post names are intentionally misspelled
+	 * to test the redirection.
+	 *
+	 * Please do not correct the apparent typos.
+	 *
+	 * @return array[]
+	 */
+	public function data_redirect_guess_404_permalink_post_types() {
+		return array(
+			'single string formatted post type'    => array(
+				'original_url' => '/?name=sample-pag&post_type=page',
+				'expected'     => '/sample-page/',
+			),
+			'single array formatted post type'     => array(
+				'original_url' => '/?name=sample-pag&post_type[]=page',
+				'expected'     => '/sample-page/',
+			),
+			'multiple array formatted post type'   => array(
+				'original_url' => '/?name=sample-pag&post_type[]=page&post_type[]=post',
+				'expected'     => '/sample-page/',
+			),
+			'do not redirect to private post type' => array(
+				'original_url' => '/?name=private-cpt-po&post_type[]=wp_tests_private',
+				'expected'     => '/?name=private-cpt-po&post_type[]=wp_tests_private',
+			),
+		);
 	}
 
 	/**
@@ -406,23 +464,83 @@ class Tests_Canonical extends WP_Canonical_UnitTestCase {
 	}
 
 	/**
+	 * Test canonical redirects for attachment pages when the option is disabled.
+	 *
 	 * @ticket 57913
+	 * @ticket 59866
+	 *
+	 * @dataProvider data_canonical_attachment_page_redirect_with_option_disabled
 	 */
-	public function test_canonical_attachment_page_redirect_with_option_disabled() {
-		add_filter( 'pre_option_wp_attachment_pages_enabled', '__return_false' );
+	public function test_canonical_attachment_page_redirect_with_option_disabled( $expected, $user = null, $parent_post_status = '' ) {
+		update_option( 'wp_attachment_pages_enabled', 0 );
+
+		if ( '' !== $parent_post_status ) {
+			$parent_post_id = self::factory()->post->create(
+				array(
+					'post_status' => $parent_post_status,
+				)
+			);
+		} else {
+			$parent_post_id = 0;
+		}
 
 		$filename = DIR_TESTDATA . '/images/test-image.jpg';
 		$contents = file_get_contents( $filename );
 		$upload   = wp_upload_bits( wp_basename( $filename ), null, $contents );
 
-		$attachment_id   = $this->_make_attachment( $upload );
+		$attachment_id   = $this->_make_attachment( $upload, $parent_post_id );
+		$attachment_url  = wp_get_attachment_url( $attachment_id );
 		$attachment_page = get_permalink( $attachment_id );
 
+		// Set as anonymous/logged out user.
+		if ( null !== $user ) {
+			wp_set_current_user( $user );
+		}
+
 		$this->go_to( $attachment_page );
 
-		$url      = redirect_canonical( $attachment_page, false );
-		$expected = wp_get_attachment_url( $attachment_id );
+		$url = redirect_canonical( $attachment_page, false );
+		if ( is_string( $expected ) ) {
+			$expected = str_replace( '%%attachment_url%%', $attachment_url, $expected );
+		}
 
 		$this->assertSame( $expected, $url );
 	}
+
+	/**
+	 * Data provider for test_canonical_attachment_page_redirect_with_option_disabled().
+	 *
+	 * @return array[]
+	 */
+	public function data_canonical_attachment_page_redirect_with_option_disabled() {
+		return array(
+			'logged out user, no parent'      => array(
+				'%%attachment_url%%',
+				0,
+			),
+			'logged in user, no parent'       => array(
+				'%%attachment_url%%',
+			),
+			'logged out user, private parent' => array(
+				null,
+				0,
+				'private',
+			),
+			'logged in user, private parent'  => array(
+				'%%attachment_url%%',
+				null,
+				'private',
+			),
+			'logged out user, public parent'  => array(
+				'%%attachment_url%%',
+				0,
+				'publish',
+			),
+			'logged in user, public parent'   => array(
+				'%%attachment_url%%',
+				null,
+				'publish',
+			),
+		);
+	}
 }
diff --git a/tests/canonical/category.php b/tests/canonical/category.php
index a7923b573c..9619d708ca 100644
--- a/tests/canonical/category.php
+++ b/tests/canonical/category.php
@@ -2,6 +2,8 @@
 
 /**
  * @group canonical
+ * @group rewrite
+ * @group query
  */
 class Tests_Canonical_Category extends WP_Canonical_UnitTestCase {
 	public $structure = '/%category%/%postname%/';
diff --git a/tests/canonical/postStatus.php b/tests/canonical/postStatus.php
index 9b68e61f36..7620ccfdd1 100644
--- a/tests/canonical/postStatus.php
+++ b/tests/canonical/postStatus.php
@@ -169,8 +169,6 @@ class Tests_Canonical_PostStatus extends WP_Canonical_UnitTestCase {
 	public function set_up() {
 		parent::set_up();
 		self::setup_custom_types();
-
-		add_filter( 'pre_option_wp_attachment_pages_enabled', '__return_true' );
 	}
 
 	/**
@@ -223,8 +221,15 @@ class Tests_Canonical_PostStatus extends WP_Canonical_UnitTestCase {
 	 * @param string $user_role User role.
 	 * @param string $requested Requested URL.
 	 * @param string $expected  Expected URL.
+	 * @param string $enable_attachment_pages Whether to enable attachment pages. Default true.
 	 */
-	public function test_canonical_redirects_to_plain_permalinks( $post_key, $user_role, $requested, $expected ) {
+	public function test_canonical_redirects_to_plain_permalinks( $post_key, $user_role, $requested, $expected, $enable_attachment_pages = true ) {
+		if ( $enable_attachment_pages ) {
+			update_option( 'wp_attachment_pages_enabled', 1 );
+		} else {
+			update_option( 'wp_attachment_pages_enabled', 0 );
+		}
+
 		wp_set_current_user( self::$users[ $user_role ] );
 		$this->set_permalink_structure( '' );
 		$post = self::$posts[ $post_key ];
@@ -243,12 +248,7 @@ class Tests_Canonical_PostStatus extends WP_Canonical_UnitTestCase {
 	/**
 	 * Data provider for test_canonical_redirects_to_plain_permalinks.
 	 *
-	 * @return array[] Array of arguments for tests {
-	 *     @type string $post_key  Post key used for creating fixtures.
-	 *     @type string $user_role User role.
-	 *     @type string $requested Requested URL.
-	 *     @type string $expected  Expected URL.
-	 * }
+	 * @return array[]
 	 */
 	public function data_canonical_redirects_to_plain_permalinks() {
 		$data              = array();
@@ -273,6 +273,15 @@ class Tests_Canonical_PostStatus extends WP_Canonical_UnitTestCase {
 					$user,
 					'/?post_type=page&p=%ID%',
 					'/?post_type=page&p=%ID%',
+					true,
+				);
+
+				$data[] = array(
+					"$post_key-page",
+					$user,
+					'/?post_type=page&p=%ID%',
+					'/?post_type=page&p=%ID%',
+					false,
 				);
 
 				$data[] = array(
@@ -280,6 +289,15 @@ class Tests_Canonical_PostStatus extends WP_Canonical_UnitTestCase {
 					$user,
 					"/?name=$post_key-post",
 					"/?name=$post_key-post",
+					true,
+				);
+
+				$data[] = array(
+					$post_key,
+					$user,
+					"/?name=$post_key-post",
+					"/?name=$post_key-post",
+					false,
 				);
 
 				// Ensure rss redirects to rss2.
@@ -288,6 +306,15 @@ class Tests_Canonical_PostStatus extends WP_Canonical_UnitTestCase {
 					$user,
 					'/?feed=rss&p=%ID%',
 					'/?feed=rss2&p=%ID%',
+					true,
+				);
+
+				$data[] = array(
+					$post_key,
+					$user,
+					'/?feed=rss&p=%ID%',
+					'/?feed=rss2&p=%ID%',
+					false,
 				);
 
 				// Ensure rss redirects to rss2.
@@ -296,6 +323,15 @@ class Tests_Canonical_PostStatus extends WP_Canonical_UnitTestCase {
 					$user,
 					'/?feed=rss&page_id=%ID%',
 					'/?feed=rss2&page_id=%ID%',
+					true,
+				);
+
+				$data[] = array(
+					"$post_key-page",
+					$user,
+					'/?feed=rss&page_id=%ID%',
+					'/?feed=rss2&page_id=%ID%',
+					false,
 				);
 			}
 		}
@@ -311,6 +347,23 @@ class Tests_Canonical_PostStatus extends WP_Canonical_UnitTestCase {
 					$user,
 					'/?post_type=page&p=%ID%',
 					'/?post_type=page&p=%ID%',
+					true,
+				);
+
+				$data[] = array(
+					"$post_key-page",
+					$user,
+					'/?post_type=page&p=%ID%',
+					'/?post_type=page&p=%ID%',
+					false,
+				);
+
+				$data[] = array(
+					$post_key,
+					$user,
+					"/?name=$post_key-post",
+					"/?name=$post_key-post",
+					true,
 				);
 
 				$data[] = array(
@@ -318,6 +371,7 @@ class Tests_Canonical_PostStatus extends WP_Canonical_UnitTestCase {
 					$user,
 					"/?name=$post_key-post",
 					"/?name=$post_key-post",
+					false,
 				);
 
 				// Ensure rss redirects to rss2.
@@ -326,6 +380,15 @@ class Tests_Canonical_PostStatus extends WP_Canonical_UnitTestCase {
 					$user,
 					'/?feed=rss&p=%ID%',
 					'/?feed=rss2&p=%ID%',
+					true,
+				);
+
+				$data[] = array(
+					$post_key,
+					$user,
+					'/?feed=rss&p=%ID%',
+					'/?feed=rss2&p=%ID%',
+					false,
 				);
 
 				// Ensure rss redirects to rss2.
@@ -334,6 +397,15 @@ class Tests_Canonical_PostStatus extends WP_Canonical_UnitTestCase {
 					$user,
 					'/?feed=rss&page_id=%ID%',
 					'/?feed=rss2&page_id=%ID%',
+					true,
+				);
+
+				$data[] = array(
+					"$post_key-page",
+					$user,
+					'/?feed=rss&page_id=%ID%',
+					'/?feed=rss2&page_id=%ID%',
+					false,
 				);
 			}
 
@@ -347,6 +419,15 @@ class Tests_Canonical_PostStatus extends WP_Canonical_UnitTestCase {
 					$user,
 					'/?post_type=page&p=%ID%',
 					'/?post_type=page&p=%ID%',
+					true,
+				);
+
+				$data[] = array(
+					"$post_key-page",
+					$user,
+					'/?post_type=page&p=%ID%',
+					'/?post_type=page&p=%ID%',
+					false,
 				);
 
 				$data[] = array(
@@ -354,6 +435,15 @@ class Tests_Canonical_PostStatus extends WP_Canonical_UnitTestCase {
 					$user,
 					"/?name=$post_key-post",
 					"/?name=$post_key-post",
+					true,
+				);
+
+				$data[] = array(
+					$post_key,
+					$user,
+					"/?name=$post_key-post",
+					"/?name=$post_key-post",
+					false,
 				);
 
 				// Ensure post's existence is not demonstrated by changing rss to rss2.
@@ -362,6 +452,15 @@ class Tests_Canonical_PostStatus extends WP_Canonical_UnitTestCase {
 					$user,
 					'/?feed=rss&p=%ID%',
 					'/?feed=rss&p=%ID%',
+					true,
+				);
+
+				$data[] = array(
+					$post_key,
+					$user,
+					'/?feed=rss&p=%ID%',
+					'/?feed=rss&p=%ID%',
+					false,
 				);
 
 				// Ensure post's existence is not demonstrated by changing rss to rss2.
@@ -370,6 +469,15 @@ class Tests_Canonical_PostStatus extends WP_Canonical_UnitTestCase {
 					$user,
 					'/?feed=rss&page_id=%ID%',
 					'/?feed=rss&page_id=%ID%',
+					true,
+				);
+
+				$data[] = array(
+					"$post_key-page",
+					$user,
+					'/?feed=rss&page_id=%ID%',
+					'/?feed=rss&page_id=%ID%',
+					false,
 				);
 			}
 		}
@@ -385,6 +493,23 @@ class Tests_Canonical_PostStatus extends WP_Canonical_UnitTestCase {
 					$user,
 					'/?post_type=page&p=%ID%',
 					'/?post_type=page&p=%ID%',
+					true,
+				);
+
+				$data[] = array(
+					"$post_key-page",
+					$user,
+					'/?post_type=page&p=%ID%',
+					'/?post_type=page&p=%ID%',
+					false,
+				);
+
+				$data[] = array(
+					$post_key,
+					$user,
+					"/?name=$post_key-post",
+					"/?name=$post_key-post",
+					true,
 				);
 
 				$data[] = array(
@@ -392,6 +517,7 @@ class Tests_Canonical_PostStatus extends WP_Canonical_UnitTestCase {
 					$user,
 					"/?name=$post_key-post",
 					"/?name=$post_key-post",
+					false,
 				);
 
 				// Ensure post's existence is not demonstrated by changing rss to rss2.
@@ -400,6 +526,15 @@ class Tests_Canonical_PostStatus extends WP_Canonical_UnitTestCase {
 					$user,
 					'/?feed=rss&p=%ID%',
 					'/?feed=rss&p=%ID%',
+					true,
+				);
+
+				$data[] = array(
+					$post_key,
+					$user,
+					'/?feed=rss&p=%ID%',
+					'/?feed=rss&p=%ID%',
+					false,
 				);
 
 				// Ensure post's existence is not demonstrated by changing rss to rss2.
@@ -408,6 +543,15 @@ class Tests_Canonical_PostStatus extends WP_Canonical_UnitTestCase {
 					$user,
 					'/?feed=rss&page_id=%ID%',
 					'/?feed=rss&page_id=%ID%',
+					true,
+				);
+
+				$data[] = array(
+					"$post_key-page",
+					$user,
+					'/?feed=rss&page_id=%ID%',
+					'/?feed=rss&page_id=%ID%',
+					false,
 				);
 			}
 		}
@@ -423,6 +567,15 @@ class Tests_Canonical_PostStatus extends WP_Canonical_UnitTestCase {
 					$user,
 					'/?post_type=page&p=%ID%',
 					'/?post_type=page&p=%ID%',
+					true,
+				);
+
+				$data[] = array(
+					"$post_key-page",
+					$user,
+					'/?post_type=page&p=%ID%',
+					'/?post_type=page&p=%ID%',
+					false,
 				);
 
 				$data[] = array(
@@ -430,6 +583,15 @@ class Tests_Canonical_PostStatus extends WP_Canonical_UnitTestCase {
 					$user,
 					"/?name=$post_key-post",
 					"/?name=$post_key-post",
+					true,
+				);
+
+				$data[] = array(
+					$post_key,
+					$user,
+					"/?name=$post_key-post",
+					"/?name=$post_key-post",
+					false,
 				);
 
 				// Ensure post's existence is not demonstrated by changing rss to rss2.
@@ -438,6 +600,15 @@ class Tests_Canonical_PostStatus extends WP_Canonical_UnitTestCase {
 					$user,
 					'/?feed=rss&p=%ID%',
 					'/?feed=rss&p=%ID%',
+					true,
+				);
+
+				$data[] = array(
+					$post_key,
+					$user,
+					'/?feed=rss&p=%ID%',
+					'/?feed=rss&p=%ID%',
+					false,
 				);
 
 				// Ensure post's existence is not demonstrated by changing rss to rss2.
@@ -446,6 +617,15 @@ class Tests_Canonical_PostStatus extends WP_Canonical_UnitTestCase {
 					$user,
 					'/?feed=rss&page_id=%ID%',
 					'/?feed=rss&page_id=%ID%',
+					true,
+				);
+
+				$data[] = array(
+					"$post_key-page",
+					$user,
+					'/?feed=rss&page_id=%ID%',
+					'/?feed=rss&page_id=%ID%',
+					false,
 				);
 			}
 		}
@@ -457,6 +637,23 @@ class Tests_Canonical_PostStatus extends WP_Canonical_UnitTestCase {
 					$user,
 					'/?p=%ID%',
 					'/?a-public-cpt=a-public-cpt',
+					true,
+				);
+
+				$data[] = array(
+					$post_key,
+					$user,
+					'/?p=%ID%',
+					'/?a-public-cpt=a-public-cpt',
+					false,
+				);
+
+				$data[] = array(
+					"$post_key-attachment",
+					$user,
+					'/?attachment_id=%ID%',
+					'/?attachment_id=%ID%',
+					true,
 				);
 
 				$data[] = array(
@@ -464,6 +661,15 @@ class Tests_Canonical_PostStatus extends WP_Canonical_UnitTestCase {
 					$user,
 					'/?attachment_id=%ID%',
 					'/?attachment_id=%ID%',
+					false,
+				);
+
+				$data[] = array(
+					$post_key,
+					$user,
+					"/?name=$post_key&post_type=$post_key",
+					"/?name=$post_key&post_type=$post_key",
+					true,
 				);
 
 				$data[] = array(
@@ -471,6 +677,7 @@ class Tests_Canonical_PostStatus extends WP_Canonical_UnitTestCase {
 					$user,
 					"/?name=$post_key&post_type=$post_key",
 					"/?name=$post_key&post_type=$post_key",
+					false,
 				);
 
 				// Ensure rss is replaced by rss2.
@@ -479,6 +686,15 @@ class Tests_Canonical_PostStatus extends WP_Canonical_UnitTestCase {
 					$user,
 					'/?feed=rss&p=%ID%',
 					'/?a-public-cpt=a-public-cpt&feed=rss2',
+					true,
+				);
+
+				$data[] = array(
+					$post_key,
+					$user,
+					'/?feed=rss&p=%ID%',
+					'/?a-public-cpt=a-public-cpt&feed=rss2',
+					false,
 				);
 			}
 
@@ -488,6 +704,15 @@ class Tests_Canonical_PostStatus extends WP_Canonical_UnitTestCase {
 					$user,
 					'/?p=%ID%',
 					'/?p=%ID%',
+					true,
+				);
+
+				$data[] = array(
+					$post_key,
+					$user,
+					'/?p=%ID%',
+					'/?p=%ID%',
+					false,
 				);
 
 				$data[] = array(
@@ -495,6 +720,23 @@ class Tests_Canonical_PostStatus extends WP_Canonical_UnitTestCase {
 					$user,
 					'/?attachment_id=%ID%',
 					'/?attachment_id=%ID%',
+					true,
+				);
+
+				$data[] = array(
+					"$post_key-attachment",
+					$user,
+					'/?attachment_id=%ID%',
+					'/?attachment_id=%ID%',
+					false,
+				);
+
+				$data[] = array(
+					$post_key,
+					$user,
+					"/?name=$post_key&post_type=$post_key",
+					"/?name=$post_key&post_type=$post_key",
+					true,
 				);
 
 				$data[] = array(
@@ -502,6 +744,7 @@ class Tests_Canonical_PostStatus extends WP_Canonical_UnitTestCase {
 					$user,
 					"/?name=$post_key&post_type=$post_key",
 					"/?name=$post_key&post_type=$post_key",
+					false,
 				);
 
 				// Ensure rss is not replaced with rss2.
@@ -510,6 +753,15 @@ class Tests_Canonical_PostStatus extends WP_Canonical_UnitTestCase {
 					$user,
 					'/?feed=rss&p=%ID%',
 					'/?feed=rss&p=%ID%',
+					true,
+				);
+
+				$data[] = array(
+					$post_key,
+					$user,
+					'/?feed=rss&p=%ID%',
+					'/?feed=rss&p=%ID%',
+					false,
 				);
 			}
 		}
@@ -521,6 +773,23 @@ class Tests_Canonical_PostStatus extends WP_Canonical_UnitTestCase {
 					$user,
 					'/?p=%ID%',
 					'/?p=%ID%',
+					true,
+				);
+
+				$data[] = array(
+					$post_key,
+					$user,
+					'/?p=%ID%',
+					'/?p=%ID%',
+					false,
+				);
+
+				$data[] = array(
+					"$post_key-attachment",
+					$user,
+					'/?attachment_id=%ID%',
+					'/?attachment_id=%ID%',
+					true,
 				);
 
 				$data[] = array(
@@ -528,6 +797,15 @@ class Tests_Canonical_PostStatus extends WP_Canonical_UnitTestCase {
 					$user,
 					'/?attachment_id=%ID%',
 					'/?attachment_id=%ID%',
+					false,
+				);
+
+				$data[] = array(
+					$post_key,
+					$user,
+					"/?name=$post_key&post_type=$post_key",
+					"/?name=$post_key&post_type=$post_key",
+					true,
 				);
 
 				$data[] = array(
@@ -535,6 +813,15 @@ class Tests_Canonical_PostStatus extends WP_Canonical_UnitTestCase {
 					$user,
 					"/?name=$post_key&post_type=$post_key",
 					"/?name=$post_key&post_type=$post_key",
+					false,
+				);
+
+				$data[] = array(
+					$post_key,
+					$user,
+					'/?feed=rss&p=%ID%',
+					'/?feed=rss&p=%ID%',
+					true,
 				);
 
 				$data[] = array(
@@ -542,6 +829,7 @@ class Tests_Canonical_PostStatus extends WP_Canonical_UnitTestCase {
 					$user,
 					'/?feed=rss&p=%ID%',
 					'/?feed=rss&p=%ID%',
+					false,
 				);
 			}
 		}
@@ -559,8 +847,15 @@ class Tests_Canonical_PostStatus extends WP_Canonical_UnitTestCase {
 	 * @param string $user_role User role.
 	 * @param string $requested Requested URL.
 	 * @param string $expected  Expected URL.
+	 * @param string $enable_attachment_pages Whether to enable attachment pages. Default true.
 	 */
-	public function test_canonical_redirects_to_pretty_permalinks( $post_key, $user_role, $requested, $expected ) {
+	public function test_canonical_redirects_to_pretty_permalinks( $post_key, $user_role, $requested, $expected, $enable_attachment_pages = true ) {
+		if ( $enable_attachment_pages ) {
+			update_option( 'wp_attachment_pages_enabled', 1 );
+		} else {
+			update_option( 'wp_attachment_pages_enabled', 0 );
+		}
+
 		wp_set_current_user( self::$users[ $user_role ] );
 		$this->set_permalink_structure( '/%postname%/' );
 		$post = self::$posts[ $post_key ];
@@ -605,6 +900,15 @@ class Tests_Canonical_PostStatus extends WP_Canonical_UnitTestCase {
 					$user,
 					'/?p=%ID%',
 					"/$post_key-post/",
+					true,
+				);
+
+				$data[] = array(
+					$post_key,
+					$user,
+					'/?p=%ID%',
+					"/$post_key-post/",
+					false,
 				);
 
 				$data[] = array(
@@ -612,27 +916,63 @@ class Tests_Canonical_PostStatus extends WP_Canonical_UnitTestCase {
 					$user,
 					'/?attachment_id=%ID%',
 					"/$post_key-post/$post_key-inherited-attachment/",
+					true,
 				);
 
 				$data[] = array(
-					"$post_key-page",
+					"$post_key-attachment",
 					$user,
-					'/?post_type=page&p=%ID%',
-					"/$post_key-page/",
+					'/?attachment_id=%ID%',
+					'/?attachment_id=%ID%',
+					false,
 				);
 
 				$data[] = array(
 					"$post_key-page",
 					$user,
-					'/?page_id=%ID%',
+					'/?post_type=page&p=%ID%',
 					"/$post_key-page/",
+					true,
 				);
 
 				$data[] = array(
-					$post_key,
+					"$post_key-page",
 					$user,
-					"/?name=$post_key-post",
-					"/$post_key-post/",
+					'/?post_type=page&p=%ID%',
+					"/$post_key-page/",
+					false,
+				);
+
+				$data[] = array(
+					"$post_key-page",
+					$user,
+					'/?page_id=%ID%',
+					"/$post_key-page/",
+					true,
+				);
+
+				$data[] = array(
+					"$post_key-page",
+					$user,
+					'/?page_id=%ID%',
+					"/$post_key-page/",
+					false,
+				);
+
+				$data[] = array(
+					$post_key,
+					$user,
+					"/?name=$post_key-post",
+					"/$post_key-post/",
+					true,
+				);
+
+				$data[] = array(
+					$post_key,
+					$user,
+					"/?name=$post_key-post",
+					"/$post_key-post/",
+					false,
 				);
 
 				$data[] = array(
@@ -640,6 +980,23 @@ class Tests_Canonical_PostStatus extends WP_Canonical_UnitTestCase {
 					$user,
 					'/?feed=rss&p=%ID%',
 					"/$post_key-post/feed/",
+					true,
+				);
+
+				$data[] = array(
+					$post_key,
+					$user,
+					'/?feed=rss&p=%ID%',
+					"/$post_key-post/feed/",
+					false,
+				);
+
+				$data[] = array(
+					"$post_key-page",
+					$user,
+					'/?feed=rss&page_id=%ID%',
+					"/$post_key-page/feed/",
+					true,
 				);
 
 				$data[] = array(
@@ -647,6 +1004,7 @@ class Tests_Canonical_PostStatus extends WP_Canonical_UnitTestCase {
 					$user,
 					'/?feed=rss&page_id=%ID%',
 					"/$post_key-page/feed/",
+					false,
 				);
 			}
 		}
@@ -658,6 +1016,15 @@ class Tests_Canonical_PostStatus extends WP_Canonical_UnitTestCase {
 					$user,
 					'/?p=%ID%',
 					"/$post_key-post/",
+					true,
+				);
+
+				$data[] = array(
+					$post_key,
+					$user,
+					'/?p=%ID%',
+					"/$post_key-post/",
+					false,
 				);
 
 				$data[] = array(
@@ -665,6 +1032,23 @@ class Tests_Canonical_PostStatus extends WP_Canonical_UnitTestCase {
 					$user,
 					'/?attachment_id=%ID%',
 					"/$post_key-post/$post_key-inherited-attachment/",
+					true,
+				);
+
+				$data[] = array(
+					"$post_key-attachment",
+					$user,
+					'/?attachment_id=%ID%',
+					'/?attachment_id=%ID%',
+					false,
+				);
+
+				$data[] = array(
+					"$post_key-page",
+					$user,
+					'/?post_type=page&p=%ID%',
+					"/$post_key-page/",
+					true,
 				);
 
 				$data[] = array(
@@ -672,6 +1056,7 @@ class Tests_Canonical_PostStatus extends WP_Canonical_UnitTestCase {
 					$user,
 					'/?post_type=page&p=%ID%',
 					"/$post_key-page/",
+					false,
 				);
 
 				$data[] = array(
@@ -679,6 +1064,15 @@ class Tests_Canonical_PostStatus extends WP_Canonical_UnitTestCase {
 					$user,
 					'/?page_id=%ID%',
 					"/$post_key-page/",
+					true,
+				);
+
+				$data[] = array(
+					"$post_key-page",
+					$user,
+					'/?page_id=%ID%',
+					"/$post_key-page/",
+					false,
 				);
 
 				$data[] = array(
@@ -686,6 +1080,23 @@ class Tests_Canonical_PostStatus extends WP_Canonical_UnitTestCase {
 					$user,
 					"/?name=$post_key-post",
 					"/$post_key-post/",
+					true,
+				);
+
+				$data[] = array(
+					$post_key,
+					$user,
+					"/?name=$post_key-post",
+					"/$post_key-post/",
+					false,
+				);
+
+				$data[] = array(
+					$post_key,
+					$user,
+					'/?feed=rss&p=%ID%',
+					"/$post_key-post/feed/",
+					true,
 				);
 
 				$data[] = array(
@@ -693,6 +1104,7 @@ class Tests_Canonical_PostStatus extends WP_Canonical_UnitTestCase {
 					$user,
 					'/?feed=rss&p=%ID%',
 					"/$post_key-post/feed/",
+					false,
 				);
 
 				$data[] = array(
@@ -700,6 +1112,15 @@ class Tests_Canonical_PostStatus extends WP_Canonical_UnitTestCase {
 					$user,
 					'/?feed=rss&page_id=%ID%',
 					"/$post_key-page/feed/",
+					true,
+				);
+
+				$data[] = array(
+					"$post_key-page",
+					$user,
+					'/?feed=rss&page_id=%ID%',
+					"/$post_key-page/feed/",
+					false,
 				);
 			}
 
@@ -709,6 +1130,23 @@ class Tests_Canonical_PostStatus extends WP_Canonical_UnitTestCase {
 					$user,
 					'/?p=%ID%',
 					'/?p=%ID%',
+					true,
+				);
+
+				$data[] = array(
+					$post_key,
+					$user,
+					'/?p=%ID%',
+					'/?p=%ID%',
+					false,
+				);
+
+				$data[] = array(
+					"$post_key-attachment",
+					$user,
+					'/?attachment_id=%ID%',
+					'/?attachment_id=%ID%',
+					true,
 				);
 
 				$data[] = array(
@@ -716,6 +1154,7 @@ class Tests_Canonical_PostStatus extends WP_Canonical_UnitTestCase {
 					$user,
 					'/?attachment_id=%ID%',
 					'/?attachment_id=%ID%',
+					false,
 				);
 
 				$data[] = array(
@@ -723,6 +1162,15 @@ class Tests_Canonical_PostStatus extends WP_Canonical_UnitTestCase {
 					$user,
 					'/?post_type=page&p=%ID%',
 					'/?post_type=page&p=%ID%',
+					true,
+				);
+
+				$data[] = array(
+					"$post_key-page",
+					$user,
+					'/?post_type=page&p=%ID%',
+					'/?post_type=page&p=%ID%',
+					false,
 				);
 
 				$data[] = array(
@@ -730,6 +1178,23 @@ class Tests_Canonical_PostStatus extends WP_Canonical_UnitTestCase {
 					$user,
 					'/?page_id=%ID%',
 					'/?page_id=%ID%',
+					true,
+				);
+
+				$data[] = array(
+					"$post_key-page",
+					$user,
+					'/?page_id=%ID%',
+					'/?page_id=%ID%',
+					false,
+				);
+
+				$data[] = array(
+					$post_key,
+					$user,
+					"/?name=$post_key-post",
+					"/?name=$post_key-post",
+					true,
 				);
 
 				$data[] = array(
@@ -737,6 +1202,7 @@ class Tests_Canonical_PostStatus extends WP_Canonical_UnitTestCase {
 					$user,
 					"/?name=$post_key-post",
 					"/?name=$post_key-post",
+					false,
 				);
 
 				$data[] = array(
@@ -744,6 +1210,15 @@ class Tests_Canonical_PostStatus extends WP_Canonical_UnitTestCase {
 					$user,
 					'/?feed=rss&p=%ID%',
 					'/?feed=rss&p=%ID%',
+					true,
+				);
+
+				$data[] = array(
+					$post_key,
+					$user,
+					'/?feed=rss&p=%ID%',
+					'/?feed=rss&p=%ID%',
+					false,
 				);
 
 				$data[] = array(
@@ -751,6 +1226,15 @@ class Tests_Canonical_PostStatus extends WP_Canonical_UnitTestCase {
 					$user,
 					'/?feed=rss&page_id=%ID%',
 					'/?feed=rss&page_id=%ID%',
+					true,
+				);
+
+				$data[] = array(
+					"$post_key-page",
+					$user,
+					'/?feed=rss&page_id=%ID%',
+					'/?feed=rss&page_id=%ID%',
+					false,
 				);
 			}
 		}
@@ -762,6 +1246,15 @@ class Tests_Canonical_PostStatus extends WP_Canonical_UnitTestCase {
 					$user,
 					'/?p=%ID%',
 					"/$post_key/$post_key/",
+					true,
+				);
+
+				$data[] = array(
+					$post_key,
+					$user,
+					'/?p=%ID%',
+					"/$post_key/$post_key/",
+					false,
 				);
 
 				$data[] = array(
@@ -769,6 +1262,15 @@ class Tests_Canonical_PostStatus extends WP_Canonical_UnitTestCase {
 					$user,
 					'/?attachment_id=%ID%',
 					"/$post_key/$post_key/$post_key-inherited-attachment/",
+					true,
+				);
+
+				$data[] = array(
+					"$post_key-attachment",
+					$user,
+					'/?attachment_id=%ID%',
+					'/?attachment_id=%ID%',
+					false,
 				);
 
 				$data[] = array(
@@ -776,6 +1278,23 @@ class Tests_Canonical_PostStatus extends WP_Canonical_UnitTestCase {
 					$user,
 					"/?name=$post_key&post_type=$post_key",
 					"/$post_key/$post_key/?post_type=$post_key",
+					true,
+				);
+
+				$data[] = array(
+					$post_key,
+					$user,
+					"/?name=$post_key&post_type=$post_key",
+					"/$post_key/$post_key/?post_type=$post_key",
+					false,
+				);
+
+				$data[] = array(
+					$post_key,
+					$user,
+					'/?feed=rss&p=%ID%',
+					"/$post_key/$post_key/feed/",
+					true,
 				);
 
 				$data[] = array(
@@ -783,6 +1302,7 @@ class Tests_Canonical_PostStatus extends WP_Canonical_UnitTestCase {
 					$user,
 					'/?feed=rss&p=%ID%',
 					"/$post_key/$post_key/feed/",
+					false,
 				);
 			}
 
@@ -792,6 +1312,15 @@ class Tests_Canonical_PostStatus extends WP_Canonical_UnitTestCase {
 					$user,
 					'/?p=%ID%',
 					'/?p=%ID%',
+					true,
+				);
+
+				$data[] = array(
+					$post_key,
+					$user,
+					'/?p=%ID%',
+					'/?p=%ID%',
+					false,
 				);
 
 				$data[] = array(
@@ -799,6 +1328,23 @@ class Tests_Canonical_PostStatus extends WP_Canonical_UnitTestCase {
 					$user,
 					'/?attachment_id=%ID%',
 					'/?attachment_id=%ID%',
+					true,
+				);
+
+				$data[] = array(
+					"$post_key-attachment",
+					$user,
+					'/?attachment_id=%ID%',
+					'/?attachment_id=%ID%',
+					false,
+				);
+
+				$data[] = array(
+					$post_key,
+					$user,
+					"/?name=$post_key&post_type=$post_key",
+					"/?name=$post_key&post_type=$post_key",
+					true,
 				);
 
 				$data[] = array(
@@ -806,6 +1352,7 @@ class Tests_Canonical_PostStatus extends WP_Canonical_UnitTestCase {
 					$user,
 					"/?name=$post_key&post_type=$post_key",
 					"/?name=$post_key&post_type=$post_key",
+					false,
 				);
 
 				$data[] = array(
@@ -813,6 +1360,15 @@ class Tests_Canonical_PostStatus extends WP_Canonical_UnitTestCase {
 					$user,
 					'/?feed=rss&p=%ID%',
 					'/?feed=rss&p=%ID%',
+					true,
+				);
+
+				$data[] = array(
+					$post_key,
+					$user,
+					'/?feed=rss&p=%ID%',
+					'/?feed=rss&p=%ID%',
+					false,
 				);
 			}
 		}
@@ -824,6 +1380,23 @@ class Tests_Canonical_PostStatus extends WP_Canonical_UnitTestCase {
 					$user,
 					'/?p=%ID%',
 					'/?p=%ID%',
+					true,
+				);
+
+				$data[] = array(
+					$post_key,
+					$user,
+					'/?p=%ID%',
+					'/?p=%ID%',
+					false,
+				);
+
+				$data[] = array(
+					"$post_key-attachment",
+					$user,
+					'/?attachment_id=%ID%',
+					'/?attachment_id=%ID%',
+					true,
 				);
 
 				$data[] = array(
@@ -831,7 +1404,7 @@ class Tests_Canonical_PostStatus extends WP_Canonical_UnitTestCase {
 					$user,
 					'/?attachment_id=%ID%',
 					'/?attachment_id=%ID%',
-					// "/$post_key-inherited-attachment/",
+					false,
 				);
 
 				$data[] = array(
@@ -839,6 +1412,15 @@ class Tests_Canonical_PostStatus extends WP_Canonical_UnitTestCase {
 					$user,
 					"/?name=$post_key&post_type=$post_key",
 					"/?name=$post_key&post_type=$post_key",
+					true,
+				);
+
+				$data[] = array(
+					$post_key,
+					$user,
+					"/?name=$post_key&post_type=$post_key",
+					"/?name=$post_key&post_type=$post_key",
+					false,
 				);
 
 				$data[] = array(
@@ -846,6 +1428,15 @@ class Tests_Canonical_PostStatus extends WP_Canonical_UnitTestCase {
 					$user,
 					'/?feed=rss&p=%ID%',
 					'/?feed=rss&p=%ID%',
+					true,
+				);
+
+				$data[] = array(
+					$post_key,
+					$user,
+					'/?feed=rss&p=%ID%',
+					'/?feed=rss&p=%ID%',
+					false,
 				);
 			}
 		}
@@ -857,6 +1448,15 @@ class Tests_Canonical_PostStatus extends WP_Canonical_UnitTestCase {
 					$user,
 					'/?p=%ID%',
 					'/?p=%ID%',
+					true,
+				);
+
+				$data[] = array(
+					$post_key,
+					$user,
+					'/?p=%ID%',
+					'/?p=%ID%',
+					false,
 				);
 
 				$data[] = array(
@@ -864,6 +1464,15 @@ class Tests_Canonical_PostStatus extends WP_Canonical_UnitTestCase {
 					$user,
 					'/?attachment_id=%ID%',
 					'/?attachment_id=%ID%',
+					true,
+				);
+
+				$data[] = array(
+					"$post_key-attachment",
+					$user,
+					'/?attachment_id=%ID%',
+					'/?attachment_id=%ID%',
+					false,
 				);
 
 				$data[] = array(
@@ -871,6 +1480,23 @@ class Tests_Canonical_PostStatus extends WP_Canonical_UnitTestCase {
 					$user,
 					'/?post_type=page&p=%ID%',
 					'/?post_type=page&p=%ID%',
+					true,
+				);
+
+				$data[] = array(
+					"$post_key-page",
+					$user,
+					'/?post_type=page&p=%ID%',
+					'/?post_type=page&p=%ID%',
+					false,
+				);
+
+				$data[] = array(
+					"$post_key-page",
+					$user,
+					'/?page_id=%ID%',
+					'/?page_id=%ID%',
+					true,
 				);
 
 				$data[] = array(
@@ -878,6 +1504,7 @@ class Tests_Canonical_PostStatus extends WP_Canonical_UnitTestCase {
 					$user,
 					'/?page_id=%ID%',
 					'/?page_id=%ID%',
+					false,
 				);
 
 				$data[] = array(
@@ -885,6 +1512,15 @@ class Tests_Canonical_PostStatus extends WP_Canonical_UnitTestCase {
 					$user,
 					"/?name=$post_key-post",
 					"/?name=$post_key-post",
+					true,
+				);
+
+				$data[] = array(
+					$post_key,
+					$user,
+					"/?name=$post_key-post",
+					"/?name=$post_key-post",
+					false,
 				);
 
 				$data[] = array(
@@ -892,6 +1528,23 @@ class Tests_Canonical_PostStatus extends WP_Canonical_UnitTestCase {
 					$user,
 					'/?feed=rss&p=%ID%',
 					'/?feed=rss&p=%ID%',
+					true,
+				);
+
+				$data[] = array(
+					$post_key,
+					$user,
+					'/?feed=rss&p=%ID%',
+					'/?feed=rss&p=%ID%',
+					false,
+				);
+
+				$data[] = array(
+					"$post_key-page",
+					$user,
+					'/?feed=rss&page_id=%ID%',
+					'/?feed=rss&page_id=%ID%',
+					true,
 				);
 
 				$data[] = array(
@@ -899,6 +1552,7 @@ class Tests_Canonical_PostStatus extends WP_Canonical_UnitTestCase {
 					$user,
 					'/?feed=rss&page_id=%ID%',
 					'/?feed=rss&page_id=%ID%',
+					false,
 				);
 			}
 		}
@@ -910,6 +1564,15 @@ class Tests_Canonical_PostStatus extends WP_Canonical_UnitTestCase {
 					$user,
 					'/?p=%ID%',
 					'/?p=%ID%',
+					true,
+				);
+
+				$data[] = array(
+					$post_key,
+					$user,
+					'/?p=%ID%',
+					'/?p=%ID%',
+					false,
 				);
 
 				$data[] = array(
@@ -917,6 +1580,23 @@ class Tests_Canonical_PostStatus extends WP_Canonical_UnitTestCase {
 					$user,
 					'/?attachment_id=%ID%',
 					'/?attachment_id=%ID%',
+					true,
+				);
+
+				$data[] = array(
+					"$post_key-attachment",
+					$user,
+					'/?attachment_id=%ID%',
+					'/?attachment_id=%ID%',
+					false,
+				);
+
+				$data[] = array(
+					"$post_key-attachment",
+					$user,
+					'/trash-post/trash-post-inherited-attachment/',
+					'/?attachment_id=%ID%',
+					true,
 				);
 
 				$data[] = array(
@@ -924,6 +1604,7 @@ class Tests_Canonical_PostStatus extends WP_Canonical_UnitTestCase {
 					$user,
 					'/trash-post/trash-post-inherited-attachment/',
 					'/?attachment_id=%ID%',
+					false,
 				);
 
 				$data[] = array(
@@ -931,6 +1612,15 @@ class Tests_Canonical_PostStatus extends WP_Canonical_UnitTestCase {
 					$user,
 					'/trash-post__trashed/trash-post-inherited-attachment/',
 					'/?attachment_id=%ID%',
+					true,
+				);
+
+				$data[] = array(
+					"$post_key-attachment",
+					$user,
+					'/trash-post__trashed/trash-post-inherited-attachment/',
+					'/?attachment_id=%ID%',
+					false,
 				);
 
 				$data[] = array(
@@ -938,6 +1628,23 @@ class Tests_Canonical_PostStatus extends WP_Canonical_UnitTestCase {
 					$user,
 					'/?post_type=page&p=%ID%',
 					'/?post_type=page&p=%ID%',
+					true,
+				);
+
+				$data[] = array(
+					"$post_key-page",
+					$user,
+					'/?post_type=page&p=%ID%',
+					'/?post_type=page&p=%ID%',
+					false,
+				);
+
+				$data[] = array(
+					"$post_key-page",
+					$user,
+					'/?page_id=%ID%',
+					'/?page_id=%ID%',
+					true,
 				);
 
 				$data[] = array(
@@ -945,6 +1652,7 @@ class Tests_Canonical_PostStatus extends WP_Canonical_UnitTestCase {
 					$user,
 					'/?page_id=%ID%',
 					'/?page_id=%ID%',
+					false,
 				);
 
 				$data[] = array(
@@ -952,6 +1660,15 @@ class Tests_Canonical_PostStatus extends WP_Canonical_UnitTestCase {
 					$user,
 					"/?name=$post_key-post",
 					"/?name=$post_key-post",
+					true,
+				);
+
+				$data[] = array(
+					$post_key,
+					$user,
+					"/?name=$post_key-post",
+					"/?name=$post_key-post",
+					false,
 				);
 
 				$data[] = array(
@@ -959,6 +1676,23 @@ class Tests_Canonical_PostStatus extends WP_Canonical_UnitTestCase {
 					$user,
 					'/?feed=rss&p=%ID%',
 					'/?feed=rss&p=%ID%',
+					true,
+				);
+
+				$data[] = array(
+					$post_key,
+					$user,
+					'/?feed=rss&p=%ID%',
+					'/?feed=rss&p=%ID%',
+					false,
+				);
+
+				$data[] = array(
+					"$post_key-page",
+					$user,
+					'/?feed=rss&page_id=%ID%',
+					'/?feed=rss&page_id=%ID%',
+					true,
 				);
 
 				$data[] = array(
@@ -966,6 +1700,7 @@ class Tests_Canonical_PostStatus extends WP_Canonical_UnitTestCase {
 					$user,
 					'/?feed=rss&page_id=%ID%',
 					'/?feed=rss&page_id=%ID%',
+					false,
 				);
 			}
 		}
diff --git a/tests/canonical/stripFragmentFromUrl.php b/tests/canonical/stripFragmentFromUrl.php
index 053ad88528..efb54d26a2 100644
--- a/tests/canonical/stripFragmentFromUrl.php
+++ b/tests/canonical/stripFragmentFromUrl.php
@@ -4,6 +4,7 @@
  * @group canonical
  * @group rewrite
  * @group query
+ *
  * @covers ::strip_fragment_from_url
  */
 class Tests_Canonical_StripFragmentFromUrl extends WP_UnitTestCase {
diff --git a/tests/category/categoryDescription.php b/tests/category/categoryDescription.php
index a6442cb4b1..5804dee624 100644
--- a/tests/category/categoryDescription.php
+++ b/tests/category/categoryDescription.php
@@ -2,6 +2,7 @@
 
 /**
  * @group taxonomy
+ * @group category
  *
  * @covers ::category_description
  */
diff --git a/tests/category/getAllCategoryIds.php b/tests/category/getAllCategoryIds.php
index 21d2fed5ec..3fb8223afa 100644
--- a/tests/category/getAllCategoryIds.php
+++ b/tests/category/getAllCategoryIds.php
@@ -1,7 +1,7 @@
 <?php
 /**
  * @group taxonomy
- * @group category.php
+ * @group category
  *
  * @covers ::get_all_category_ids
  */
diff --git a/tests/category/getCatId.php b/tests/category/getCatId.php
index 33709a68d3..ff41a43cac 100644
--- a/tests/category/getCatId.php
+++ b/tests/category/getCatId.php
@@ -1,7 +1,7 @@
 <?php
 /**
  * @group taxonomy
- * @group category.php
+ * @group category
  *
  * @covers ::get_cat_ID
  */
diff --git a/tests/category/getCatName.php b/tests/category/getCatName.php
index 1a0364abbc..767164bf58 100644
--- a/tests/category/getCatName.php
+++ b/tests/category/getCatName.php
@@ -1,7 +1,7 @@
 <?php
 /**
  * @group taxonomy
- * @group category.php
+ * @group category
  *
  * @covers ::get_cat_name
  */
diff --git a/tests/category/getCategories.php b/tests/category/getCategories.php
index 6beb0f97a3..df44eb92dc 100644
--- a/tests/category/getCategories.php
+++ b/tests/category/getCategories.php
@@ -2,7 +2,7 @@
 
 /**
  * @group taxonomy
- * @group category.php
+ * @group category
  *
  * @covers ::get_categories
  */
diff --git a/tests/category/getCategoryByPath.php b/tests/category/getCategoryByPath.php
index e4d34f2458..09c943ed30 100644
--- a/tests/category/getCategoryByPath.php
+++ b/tests/category/getCategoryByPath.php
@@ -1,7 +1,7 @@
 <?php
 /**
  * @group taxonomy
- * @group category.php
+ * @group category
  *
  * @covers ::get_category_by_path
  */
diff --git a/tests/category/getCategoryBySlug.php b/tests/category/getCategoryBySlug.php
index 58ff5bfb27..d9eaf4be89 100644
--- a/tests/category/getCategoryBySlug.php
+++ b/tests/category/getCategoryBySlug.php
@@ -1,7 +1,7 @@
 <?php
 /**
  * @group taxonomy
- * @group category.php
+ * @group category
  *
  * @covers ::get_category_by_slug
  */
diff --git a/tests/category/getCategoryLink.php b/tests/category/getCategoryLink.php
index 268e7c5738..30bf629825 100644
--- a/tests/category/getCategoryLink.php
+++ b/tests/category/getCategoryLink.php
@@ -2,6 +2,7 @@
 
 /**
  * @group taxonomy
+ * @group category
  *
  * @covers ::get_category_link
  */
diff --git a/tests/category/getCategoryParents.php b/tests/category/getCategoryParents.php
index faf6630e14..f2b7e83d1d 100644
--- a/tests/category/getCategoryParents.php
+++ b/tests/category/getCategoryParents.php
@@ -2,6 +2,7 @@
 
 /**
  * @group taxonomy
+ * @group category
  *
  * @covers ::get_category_parents
  */
diff --git a/tests/category/getTheCategoryById.php b/tests/category/getTheCategoryById.php
index f927c796d8..ab52a269d6 100644
--- a/tests/category/getTheCategoryById.php
+++ b/tests/category/getTheCategoryById.php
@@ -2,6 +2,7 @@
 
 /**
  * @group taxonomy
+ * @group category
  *
  * @covers ::get_the_category_by_ID
  */
diff --git a/tests/category/makeCatCompat.php b/tests/category/makeCatCompat.php
index 17999228c5..42d51d0b78 100644
--- a/tests/category/makeCatCompat.php
+++ b/tests/category/makeCatCompat.php
@@ -1,7 +1,7 @@
 <?php
 /**
  * @group taxonomy
- * @group category.php
+ * @group category
  *
  * @covers ::_make_cat_compat
  */
diff --git a/tests/category/walkerCategory.php b/tests/category/walkerCategory.php
index 9e1ff4e094..e13ce9bb10 100644
--- a/tests/category/walkerCategory.php
+++ b/tests/category/walkerCategory.php
@@ -1,6 +1,7 @@
 <?php
 /**
  * @group taxonomy
+ * @group category
  * @group walker
  *
  * @covers Walker_Category::start_el
diff --git a/tests/category/wpDropdownCategories.php b/tests/category/wpDropdownCategories.php
index 19fa298486..9fbe1215f2 100644
--- a/tests/category/wpDropdownCategories.php
+++ b/tests/category/wpDropdownCategories.php
@@ -1,7 +1,7 @@
 <?php
 /**
  * @group taxonomy
- * @group category.php
+ * @group category
  *
  * @covers ::wp_dropdown_categories
  */
diff --git a/tests/category/wpListCategories.php b/tests/category/wpListCategories.php
index ab76c09fc9..197ce1cf27 100644
--- a/tests/category/wpListCategories.php
+++ b/tests/category/wpListCategories.php
@@ -2,6 +2,7 @@
 
 /**
  * @group taxonomy
+ * @group category
  *
  * @covers ::wp_list_categories
  */
diff --git a/tests/comment.php b/tests/comment.php
index d37007d824..2af822f456 100644
--- a/tests/comment.php
+++ b/tests/comment.php
@@ -121,14 +121,14 @@ class Tests_Comment extends WP_UnitTestCase {
 			)
 		);
 
+		wp_set_current_user( 0 );
+
 		$comment          = get_comment( $comment_id );
 		$expected_content = is_multisite()
 			? 'new comment '
 			: 'new comment <img onerror=demo src=x>';
 
 		$this->assertSame( $expected_content, $comment->comment_content );
-
-		wp_set_current_user( 0 );
 	}
 
 	public function test_update_comment_from_unprivileged_user_by_privileged_user() {
@@ -165,9 +165,10 @@ class Tests_Comment extends WP_UnitTestCase {
 			)
 		);
 
+		wp_set_current_user( 0 );
+
 		$comment = get_comment( $comment_id );
 		$this->assertSame( '<a href="http://example.localhost/something.html" rel="nofollow ugc">click</a>', $comment->comment_content, 'Comment: ' . $comment->comment_content );
-		wp_set_current_user( 0 );
 	}
 
 	/**
diff --git a/tests/comment/commentForm.php b/tests/comment/commentForm.php
index 05a9269ffb..771cbc1b57 100644
--- a/tests/comment/commentForm.php
+++ b/tests/comment/commentForm.php
@@ -1,7 +1,7 @@
 <?php
 
 /**
- * @group  comment
+ * @group comment
  *
  * @covers ::comment_form
  */
diff --git a/tests/comment/commentsOpen.php b/tests/comment/commentsOpen.php
index 7549498e90..229a6ed935 100644
--- a/tests/comment/commentsOpen.php
+++ b/tests/comment/commentsOpen.php
@@ -1,7 +1,8 @@
 <?php
 
 /**
- * @group  comment
+ * @group comment
+ *
  * @covers ::comments_open
  */
 class Tests_Comment_CommentsOpen extends WP_UnitTestCase {
diff --git a/tests/comment/commentsTemplate.php b/tests/comment/commentsTemplate.php
index cb033a55e3..7fa51f79f9 100644
--- a/tests/comment/commentsTemplate.php
+++ b/tests/comment/commentsTemplate.php
@@ -1,10 +1,10 @@
 <?php
 
 /**
- * @group comment
- *
  * Testing items that are only testable by grabbing the markup of `comments_template()` from the output buffer.
  *
+ * @group comment
+ *
  * @covers ::comments_template
  */
 class Tests_Comment_CommentsTemplate extends WP_UnitTestCase {
diff --git a/tests/comment/getCommentsPagesCount.php b/tests/comment/getCommentsPagesCount.php
index a3c815f8c4..146def6fd5 100644
--- a/tests/comment/getCommentsPagesCount.php
+++ b/tests/comment/getCommentsPagesCount.php
@@ -78,9 +78,9 @@ class Tests_Comment_GetCommentsPagesCount extends WP_UnitTestCase {
 		self::factory()->comment->create_post_comments( $post->ID, 6, array( 'comment_parent' => $comments[0] ) );
 		$comments = get_comments( array( 'post_id' => $post->ID ) );
 
-		$this->assertEquals( 3, get_comment_pages_count( $comments, 10, false ) );
-		$this->assertEquals( 2, get_comment_pages_count( $comments, 10, true ) );
-		$this->assertEquals( 4, get_comment_pages_count( $comments, 4, true ) );
+		$this->assertSame( 3, get_comment_pages_count( $comments, 10, false ) );
+		$this->assertSame( 2, get_comment_pages_count( $comments, 10, true ) );
+		$this->assertSame( 4, get_comment_pages_count( $comments, 4, true ) );
 	}
 
 	/**
@@ -101,17 +101,17 @@ class Tests_Comment_GetCommentsPagesCount extends WP_UnitTestCase {
 
 		update_option( 'thread_comments', false );
 
-		$this->assertEquals( 3, get_comment_pages_count( $comments, 10, false ) );
-		$this->assertEquals( 2, get_comment_pages_count( $comments, 10, true ) );
-		$this->assertEquals( 3, get_comment_pages_count( $comments, 10, null ) );
-		$this->assertEquals( 3, get_comment_pages_count( $comments, 10 ) );
+		$this->assertSame( 3, get_comment_pages_count( $comments, 10, false ) );
+		$this->assertSame( 2, get_comment_pages_count( $comments, 10, true ) );
+		$this->assertSame( 3, get_comment_pages_count( $comments, 10, null ) );
+		$this->assertSame( 3, get_comment_pages_count( $comments, 10 ) );
 
 		update_option( 'thread_comments', true );
 
-		$this->assertEquals( 3, get_comment_pages_count( $comments, 10, false ) );
-		$this->assertEquals( 2, get_comment_pages_count( $comments, 10, true ) );
-		$this->assertEquals( 2, get_comment_pages_count( $comments, 10, null ) );
-		$this->assertEquals( 2, get_comment_pages_count( $comments, 10 ) );
+		$this->assertSame( 3, get_comment_pages_count( $comments, 10, false ) );
+		$this->assertSame( 2, get_comment_pages_count( $comments, 10, true ) );
+		$this->assertSame( 2, get_comment_pages_count( $comments, 10, null ) );
+		$this->assertSame( 2, get_comment_pages_count( $comments, 10 ) );
 	}
 
 	/**
@@ -140,8 +140,8 @@ class Tests_Comment_GetCommentsPagesCount extends WP_UnitTestCase {
 
 		update_option( 'comments_per_page', 25 );
 
-		$this->assertEquals( 3, get_comment_pages_count() );
-		$this->assertEquals( 2, get_comment_pages_count( null, 20 ) );
+		$this->assertSame( 3, get_comment_pages_count() );
+		$this->assertSame( 2, get_comment_pages_count( null, 20 ) );
 
 		$wp_query = new WP_Query(
 			array(
@@ -151,16 +151,16 @@ class Tests_Comment_GetCommentsPagesCount extends WP_UnitTestCase {
 			)
 		);
 
-		$this->assertEquals( 1, get_comment_pages_count() );
-		$this->assertEquals( 5, get_comment_pages_count( null, 5 ) );
+		$this->assertSame( 1, get_comment_pages_count() );
+		$this->assertSame( 5, get_comment_pages_count( null, 5 ) );
 
 		$wp_query->query_vars['comments_per_page'] = null;
 
 		update_option( 'comments_per_page', 5 );
 
-		$this->assertEquals( 5, get_comment_pages_count() );
-		$this->assertEquals( 3, get_comment_pages_count( null, 11 ) );
-		$this->assertEquals( 5, get_comment_pages_count( null, 0 ) );
+		$this->assertSame( 5, get_comment_pages_count() );
+		$this->assertSame( 3, get_comment_pages_count( null, 11 ) );
+		$this->assertSame( 5, get_comment_pages_count( null, 0 ) );
 	}
 
 	/**
diff --git a/tests/comment/metaCache.php b/tests/comment/metaCache.php
index 828363e580..75695ccfa9 100644
--- a/tests/comment/metaCache.php
+++ b/tests/comment/metaCache.php
@@ -6,6 +6,14 @@ class Tests_Comment_MetaCache extends WP_UnitTestCase {
 	protected $i       = 0;
 	protected $queries = 0;
 
+	/**
+	 * Performs setup tasks for every test.
+	 */
+	public function set_up() {
+		parent::set_up();
+		switch_theme( 'default' );
+	}
+
 	/**
 	 * @ticket 16894
 	 *
diff --git a/tests/comment/pingsOpen.php b/tests/comment/pingsOpen.php
index 93a25d5a73..638f71f1b4 100644
--- a/tests/comment/pingsOpen.php
+++ b/tests/comment/pingsOpen.php
@@ -1,7 +1,7 @@
 <?php
 
 /**
- * @group  comment
+ * @group comment
  * @covers ::pings_open
  */
 class Tests_Comment_PingsOpen extends WP_UnitTestCase {
diff --git a/tests/comment/query.php b/tests/comment/query.php
index 6a367e43b4..4104bc12c7 100644
--- a/tests/comment/query.php
+++ b/tests/comment/query.php
@@ -3988,7 +3988,7 @@ class Tests_Comment_Query extends WP_UnitTestCase {
 		);
 
 		$this->assertSame( 3, $q->found_comments );
-		$this->assertEquals( 2, $q->max_num_pages );
+		$this->assertSame( 2, $q->max_num_pages );
 	}
 
 	/**
@@ -4017,7 +4017,7 @@ class Tests_Comment_Query extends WP_UnitTestCase {
 		);
 
 		$this->assertSame( 3, $q->found_comments );
-		$this->assertEquals( 2, $q->max_num_pages );
+		$this->assertSame( 2, $q->max_num_pages );
 	}
 
 	/**
@@ -5350,4 +5350,26 @@ class Tests_Comment_Query extends WP_UnitTestCase {
 		$this->assertNotSame( "Column 'comment_ID' in where clause is ambiguous", $wpdb->last_error );
 		$this->assertStringNotContainsString( ' comment_ID ', $wpdb->last_query );
 	}
+
+	/**
+	 * @ticket 56841
+	 */
+	public function test_query_does_not_have_leading_whitespace() {
+		self::factory()->comment->create(
+			array(
+				'comment_post_ID' => self::$post_id,
+				'user_id'         => 7,
+			)
+		);
+
+		$q = new WP_Comment_Query();
+		$q->query(
+			array(
+				'count'   => true,
+				'orderby' => 'none',
+			)
+		);
+
+		$this->assertSame( ltrim( $q->request ), $q->request, 'The query has leading whitespace' );
+	}
 }
diff --git a/tests/comment/wpUpdateCommentCountNow.php b/tests/comment/wpUpdateCommentCountNow.php
index 76f890f90f..3436934845 100644
--- a/tests/comment/wpUpdateCommentCountNow.php
+++ b/tests/comment/wpUpdateCommentCountNow.php
@@ -1,7 +1,7 @@
 <?php
 
 /**
- * @group  comment
+ * @group comment
  *
  * @covers ::wp_update_comment_count_now
  */
diff --git a/tests/compat/arrayIsList.php b/tests/compat/arrayIsList.php
new file mode 100644
index 0000000000..90e500103e
--- /dev/null
+++ b/tests/compat/arrayIsList.php
@@ -0,0 +1,115 @@
+<?php
+
+/**
+ * @group compat
+ *
+ * @covers ::array_is_list
+ */
+class Tests_Compat_arrayIsList extends WP_UnitTestCase {
+
+	/**
+	 * Test that array_is_list() is always available (either from PHP or WP).
+	 *
+	 * @ticket 55105
+	 */
+	public function test_array_is_list_availability() {
+		$this->assertTrue( function_exists( 'array_is_list' ) );
+	}
+
+	/**
+	 * @dataProvider data_array_is_list
+	 *
+	 * @ticket 55105
+	 *
+	 * @param bool  $expected Whether the array is a list.
+	 * @param array $arr      The array.
+	 */
+	public function test_array_is_list( $expected, $arr ) {
+		$this->assertSame( $expected, array_is_list( $arr ) );
+	}
+
+	/**
+	 * Data provider.
+	 *
+	 * @return array[]
+	 */
+	public function data_array_is_list() {
+		return array(
+			'empty array'                   => array(
+				'expected' => true,
+				'arr'      => array(),
+			),
+			'array(NAN)'                    => array(
+				'expected' => true,
+				'arr'      => array( NAN ),
+			),
+			'array( INF )'                  => array(
+				'expected' => true,
+				'arr'      => array( INF ),
+			),
+			'consecutive int keys from 0'   => array(
+				'expected' => true,
+				'arr'      => array(
+					0 => 'one',
+					1 => 'two',
+				),
+			),
+			'consecutive float keys from 0' => array(
+				'expected' => true,
+				'arr'      => array(
+					0.0 => 'one',
+					1.0 => 'two',
+				),
+			),
+			'consecutive str keys from 0'   => array(
+				'expected' => true,
+				'arr'      => array(
+					'0' => 'one',
+					'1' => 'two',
+				),
+			),
+			'consecutive int keys from 1'   => array(
+				'expected' => false,
+				'arr'      => array(
+					1 => 'one',
+					2 => 'two',
+				),
+			),
+			'consecutive float keys from 1' => array(
+				'expected' => false,
+				'arr'      => array(
+					1.0 => 'one',
+					2.0 => 'two',
+				),
+			),
+			'consecutive str keys from 1'   => array(
+				'expected' => false,
+				'arr'      => array(
+					'1' => 'one',
+					'2' => 'two',
+				),
+			),
+			'non-consecutive int keys'      => array(
+				'expected' => false,
+				'arr'      => array(
+					1 => 'one',
+					0 => 'two',
+				),
+			),
+			'non-consecutive float keys'    => array(
+				'expected' => false,
+				'arr'      => array(
+					1.0 => 'one',
+					0.0 => 'two',
+				),
+			),
+			'non-consecutive string keys'   => array(
+				'expected' => false,
+				'arr'      => array(
+					'1' => 'one',
+					'0' => 'two',
+				),
+			),
+		);
+	}
+}
diff --git a/tests/compat/arrayKeyFirst.php b/tests/compat/arrayKeyFirst.php
index b3b97ad464..28db82e363 100644
--- a/tests/compat/arrayKeyFirst.php
+++ b/tests/compat/arrayKeyFirst.php
@@ -24,14 +24,7 @@ class Tests_Compat_arrayKeyFirst extends WP_UnitTestCase {
 	 * @param array $arr     The array to get first key from.
 	 */
 	public function test_array_key_first( $expected, $arr ) {
-		if ( ! function_exists( 'array_key_first' ) ) {
-			$this->markTestSkipped( 'array_key_first() is not available.' );
-		} else {
-			$this->assertSame(
-				$expected,
-				array_key_first( $arr )
-			);
-		}
+		$this->assertSame( $expected, array_key_first( $arr ) );
 	}
 
 	/**
diff --git a/tests/compat/arrayKeyLast.php b/tests/compat/arrayKeyLast.php
index 77510c8320..819e850f13 100644
--- a/tests/compat/arrayKeyLast.php
+++ b/tests/compat/arrayKeyLast.php
@@ -25,11 +25,7 @@ class Tests_Compat_ArrayKeyLast extends WP_UnitTestCase {
 	 * @param array $arr      The array to get last key from.
 	 */
 	public function test_array_key_last( $expected, $arr ) {
-		if ( ! function_exists( 'array_key_last' ) ) {
-			$this->markTestSkipped( 'array_key_last() is not available.' );
-		} else {
-			$this->assertSame( $expected, array_key_last( $arr ) );
-		}
+		$this->assertSame( $expected, array_key_last( $arr ) );
 	}
 
 	/**
diff --git a/tests/compat/strContains.php b/tests/compat/strContains.php
index ee5bb6e1d3..381365b408 100644
--- a/tests/compat/strContains.php
+++ b/tests/compat/strContains.php
@@ -26,14 +26,7 @@ class Tests_Compat_strContains extends WP_UnitTestCase {
 	 * @param string $needle   The substring to search for in `$haystack`.
 	 */
 	public function test_str_contains( $expected, $haystack, $needle ) {
-		if ( ! function_exists( 'str_contains' ) ) {
-			$this->markTestSkipped( 'str_contains() is not available.' );
-		} else {
-			$this->assertSame(
-				$expected,
-				str_contains( $haystack, $needle )
-			);
-		}
+		$this->assertSame( $expected, str_contains( $haystack, $needle ) );
 	}
 
 	/**
diff --git a/tests/compat/strEndsWith.php b/tests/compat/strEndsWith.php
index 7cf1e2b15d..8467675613 100644
--- a/tests/compat/strEndsWith.php
+++ b/tests/compat/strEndsWith.php
@@ -26,14 +26,7 @@ class Tests_Compat_StrEndsWith extends WP_UnitTestCase {
 	 * @param string $needle   The substring to search for at the end of `$haystack`.
 	 */
 	public function test_str_ends_with( $expected, $haystack, $needle ) {
-		if ( ! function_exists( 'str_ends_with' ) ) {
-			$this->markTestSkipped( 'str_ends_with() is not available.' );
-		} else {
-			$this->assertSame(
-				$expected,
-				str_ends_with( $haystack, $needle )
-			);
-		}
+		$this->assertSame( $expected, str_ends_with( $haystack, $needle ) );
 	}
 
 	/**
diff --git a/tests/compat/strStartsWith.php b/tests/compat/strStartsWith.php
index 6bf72cd621..a7ea8ff3d9 100644
--- a/tests/compat/strStartsWith.php
+++ b/tests/compat/strStartsWith.php
@@ -26,14 +26,7 @@ class Tests_Compat_StrStartsWith extends WP_UnitTestCase {
 	 * @param string $needle   The substring to search for at the start of `$haystack`.
 	 */
 	public function test_str_starts_with( $expected, $haystack, $needle ) {
-		if ( ! function_exists( 'str_starts_with' ) ) {
-			$this->markTestSkipped( 'str_starts_with() is not available.' );
-		} else {
-			$this->assertSame(
-				$expected,
-				str_starts_with( $haystack, $needle )
-			);
-		}
+		$this->assertSame( $expected, str_starts_with( $haystack, $needle ) );
 	}
 
 	/**
diff --git a/tests/customize/manager.php b/tests/customize/manager.php
index 9f0ff383ed..0f8ddb2d9b 100644
--- a/tests/customize/manager.php
+++ b/tests/customize/manager.php
@@ -2150,6 +2150,45 @@ class Tests_WP_Customize_Manager extends WP_UnitTestCase {
 		$this->assertSame( $args['post_content'], $post->post_content );
 	}
 
+	/**
+	 * Test that trash_changeset_post() passes the correct number of arguments to post trash hooks.
+	 *
+	 * @ticket 60183
+	 * @covers WP_Customize_Manager::trash_changeset_post
+	 */
+	public function test_trash_changeset_post_passes_all_arguments_to_trash_hooks() {
+		$args = array(
+			'post_type'    => 'customize_changeset',
+			'post_content' => wp_json_encode(
+				array(
+					'blogname' => array(
+						'value' => 'Test',
+					),
+				)
+			),
+			'post_name'    => wp_generate_uuid4(),
+			'post_status'  => 'draft',
+		);
+
+		$post_id = wp_insert_post( $args );
+
+		$manager = $this->create_test_manager( $args['post_name'] );
+
+		$pre_trash_post = new MockAction();
+		$wp_trash_post  = new MockAction();
+		$trashed_post   = new MockAction();
+
+		add_action( 'pre_trash_post', array( $pre_trash_post, 'action' ), 10, 3 );
+		add_action( 'wp_trash_post', array( $wp_trash_post, 'action' ), 10, 2 );
+		add_action( 'trashed_post', array( $trashed_post, 'action' ), 10, 2 );
+
+		$manager->trash_changeset_post( $post_id );
+
+		$this->assertCount( 3, $pre_trash_post->get_args()[0] );
+		$this->assertCount( 2, $wp_trash_post->get_args()[0] );
+		$this->assertCount( 2, $trashed_post->get_args()[0] );
+	}
+
 	/**
 	 * Register scratchpad setting.
 	 *
diff --git a/tests/customize/selective-refresh-ajax.php b/tests/customize/selective-refresh-ajax.php
index cb225498f3..39d3d45a70 100644
--- a/tests/customize/selective-refresh-ajax.php
+++ b/tests/customize/selective-refresh-ajax.php
@@ -9,6 +9,7 @@
  * @subpackage UnitTests
  * @since 4.5.0
  *
+ * @group customize
  * @group ajax
  */
 class Test_WP_Customize_Selective_Refresh_Ajax extends WP_UnitTestCase {
diff --git a/tests/date/currentDatetime.php b/tests/date/currentDatetime.php
index 21ef037897..ebb68dc7c0 100644
--- a/tests/date/currentDatetime.php
+++ b/tests/date/currentDatetime.php
@@ -3,6 +3,7 @@
 /**
  * @group date
  * @group datetime
+ *
  * @covers ::current_datetime
  */
 class Tests_Date_CurrentDatetime extends WP_UnitTestCase {
diff --git a/tests/date/currentTime.php b/tests/date/currentTime.php
index 66c2fdf3c5..b308f4918f 100644
--- a/tests/date/currentTime.php
+++ b/tests/date/currentTime.php
@@ -3,6 +3,7 @@
 /**
  * @group date
  * @group datetime
+ *
  * @covers ::current_time
  */
 class Tests_Date_CurrentTime extends WP_UnitTestCase {
diff --git a/tests/date/dateI18n.php b/tests/date/dateI18n.php
index 544ea9ae47..7423328969 100644
--- a/tests/date/dateI18n.php
+++ b/tests/date/dateI18n.php
@@ -3,6 +3,7 @@
 /**
  * @group date
  * @group datetime
+ *
  * @covers ::date_i18n
  */
 class Tests_Date_DateI18n extends WP_UnitTestCase {
diff --git a/tests/date/getCommentDate.php b/tests/date/getCommentDate.php
index 20186bc908..2c25a0e2be 100644
--- a/tests/date/getCommentDate.php
+++ b/tests/date/getCommentDate.php
@@ -4,6 +4,7 @@
  * @group date
  * @group datetime
  * @group comment
+ *
  * @covers ::get_comment_date
  */
 class Tests_Date_GetCommentDate extends WP_UnitTestCase {
diff --git a/tests/date/getFeedBuildDate.php b/tests/date/getFeedBuildDate.php
index 39cfd988d1..d884c0baef 100644
--- a/tests/date/getFeedBuildDate.php
+++ b/tests/date/getFeedBuildDate.php
@@ -4,6 +4,7 @@
  * @group date
  * @group datetime
  * @group feed
+ *
  * @covers ::get_feed_build_date
  */
 class Tests_Date_GetFeedBuildDate extends WP_UnitTestCase {
diff --git a/tests/date/getPermalink.php b/tests/date/getPermalink.php
index 195717dbd8..ff7ddcdb27 100644
--- a/tests/date/getPermalink.php
+++ b/tests/date/getPermalink.php
@@ -4,6 +4,7 @@
  * @group date
  * @group datetime
  * @group post
+ *
  * @covers ::get_permalink
  */
 class Tests_Date_GetPermalink extends WP_UnitTestCase {
diff --git a/tests/date/getPostTime.php b/tests/date/getPostTime.php
index 441e886210..7aba1879b9 100644
--- a/tests/date/getPostTime.php
+++ b/tests/date/getPostTime.php
@@ -4,6 +4,7 @@
  * @group date
  * @group datetime
  * @group post
+ *
  * @covers ::get_post_time
  * @covers ::get_post_modified_time
  */
diff --git a/tests/date/getTheDate.php b/tests/date/getTheDate.php
index 18df7b8915..2123021c3b 100644
--- a/tests/date/getTheDate.php
+++ b/tests/date/getTheDate.php
@@ -4,6 +4,7 @@
  * @group date
  * @group datetime
  * @group post
+ *
  * @covers ::get_the_date
  */
 class Tests_Date_GetTheDate extends WP_UnitTestCase {
diff --git a/tests/date/getTheModifiedDate.php b/tests/date/getTheModifiedDate.php
index 7189a7282c..ec834ba8b8 100644
--- a/tests/date/getTheModifiedDate.php
+++ b/tests/date/getTheModifiedDate.php
@@ -4,6 +4,7 @@
  * @group date
  * @group datetime
  * @group post
+ *
  * @covers ::get_the_modified_date
  */
 class Tests_Date_GetTheModifiedDate extends WP_UnitTestCase {
diff --git a/tests/date/maybeDeclineDate.php b/tests/date/maybeDeclineDate.php
index 857bd41af3..4c26d2ae0e 100644
--- a/tests/date/maybeDeclineDate.php
+++ b/tests/date/maybeDeclineDate.php
@@ -1,9 +1,11 @@
 <?php
 
 /**
- * @group functions.php
- * @group i18n
+ * @group date
  * @group datetime
+ * @group i18n
+ * @group functions
+ *
  * @covers ::wp_maybe_decline_date
  */
 class Tests_Date_MaybeDeclineDate extends WP_UnitTestCase {
diff --git a/tests/date/mysql2date.php b/tests/date/mysql2date.php
index 2ae4939c56..0686bec79e 100644
--- a/tests/date/mysql2date.php
+++ b/tests/date/mysql2date.php
@@ -3,6 +3,8 @@
 /**
  * @group date
  * @group datetime
+ * @group functions
+ *
  * @covers ::mysql2date
  */
 class Tests_Date_mysql2date extends WP_UnitTestCase {
diff --git a/tests/date/query.php b/tests/date/query.php
index 2f12d1fe90..4d7b630495 100644
--- a/tests/date/query.php
+++ b/tests/date/query.php
@@ -5,8 +5,10 @@
  *
  * See query/dateQuery.php for tests that require WP_Query.
  *
- * @group datequery
  * @group date
+ * @group datetime
+ * @group datequery
+ *
  * @covers WP_Date_Query
  */
 class Tests_Date_Query extends WP_UnitTestCase {
diff --git a/tests/date/theDate.php b/tests/date/theDate.php
index fffcb47ad5..e4bfaabf73 100644
--- a/tests/date/theDate.php
+++ b/tests/date/theDate.php
@@ -4,6 +4,7 @@
  * @group date
  * @group datetime
  * @group post
+ *
  * @covers ::the_date
  * @covers ::the_weekday_date
  */
diff --git a/tests/date/wpCheckdate.php b/tests/date/wpCheckdate.php
new file mode 100644
index 0000000000..96cd38e7d8
--- /dev/null
+++ b/tests/date/wpCheckdate.php
@@ -0,0 +1,67 @@
+<?php
+
+/**
+ * Tests for the wp_checkdate() function.
+ *
+ * @group date
+ * @group datetime
+ * @group functions
+ *
+ * @covers ::wp_checkdate
+ */
+class Tests_Date_wpCheckdate extends WP_UnitTestCase {
+
+	/**
+	 * @ticket 59825
+	 *
+	 * @dataProvider data_wp_checkdate
+	 *
+	 * @param int|string $month       The month to check.
+	 * @param int|string $day         The day to check.
+	 * @param int|string $year        The year to check.
+	 * @param string     $source_date The date to pass to the wp_checkdate filter.
+	 * @param bool       $expected    The expected result.
+	 */
+	public function test_wp_checkdate( $month, $day, $year, $source_date, $expected ) {
+		$this->assertSame( $expected, wp_checkdate( $month, $day, $year, $source_date ) );
+	}
+
+	/**
+	 * Data provider for test_wp_checkdate().
+	 *
+	 * @return array
+	 */
+	public function data_wp_checkdate() {
+		return array(
+			'integers'              => array( 1, 1, 1, '1-1-1', true ),
+			'strings'               => array( '1', '1', '1', '1-1-1', true ),
+			'arbitrary source_date' => array( 1, 1, 1, 'arbitrary source_date', true ), // source_date is only used by the filter.
+			'valid day'             => array( 2, 29, 2024, '2/29/2024', true ),         // 2024 is a leap year.
+			'invalid day'           => array( 2, 29, 2023, '2/29/2023', false ),        // 2023 is not a leap year.
+			'invalid month'         => array( 99, 1, 1, '1-1-1', false ),               // Month must be between 1 and 12.
+			'invalid year'          => array( 1, 1, 0, '1-1-0', false ),                // Year must be between 1 and 32767.
+		);
+	}
+
+	/**
+	 * Checks that the filter overrides the return value.
+	 */
+	public function test_wp_checkdate_filter() {
+		add_filter(
+			'wp_checkdate',
+			static function ( $is_valid_date, $source_date ) {
+				if ( '2/29/2023' === $source_date ) {
+					// Date is invalid, but return true anyway.
+					return true;
+				}
+
+				return $is_valid_date;
+			},
+			10,
+			2
+		);
+
+		// Test with an invalid date that the filter will return as valid.
+		$this->assertTrue( wp_checkdate( '2', '29', '2023', '2/29/2023' ) );
+	}
+}
diff --git a/tests/date/wpDate.php b/tests/date/wpDate.php
index 341e590a74..c80a2a997b 100644
--- a/tests/date/wpDate.php
+++ b/tests/date/wpDate.php
@@ -3,6 +3,7 @@
 /**
  * @group date
  * @group datetime
+ *
  * @covers ::wp_date
  */
 class Tests_Date_wpDate extends WP_UnitTestCase {
diff --git a/tests/date/wpTimezone.php b/tests/date/wpTimezone.php
index f28ebbf658..d4e7e7e220 100644
--- a/tests/date/wpTimezone.php
+++ b/tests/date/wpTimezone.php
@@ -3,6 +3,7 @@
 /**
  * @group date
  * @group datetime
+ *
  * @covers ::wp_timezone_string
  * @covers ::wp_timezone
  */
diff --git a/tests/date/xmlrpc.php b/tests/date/xmlrpc.php
index 63daeb41da..d73e5b1fe9 100644
--- a/tests/date/xmlrpc.php
+++ b/tests/date/xmlrpc.php
@@ -4,6 +4,7 @@
  * @group date
  * @group datetime
  * @group xmlrpc
+ *
  * @covers IXR_Date
  */
 class Tests_Date_XMLRPC extends WP_XMLRPC_UnitTestCase {
diff --git a/tests/db.php b/tests/db.php
index 21c34cbadb..984fe6765c 100644
--- a/tests/db.php
+++ b/tests/db.php
@@ -2469,4 +2469,17 @@ class Tests_DB extends WP_UnitTestCase {
 			),
 		);
 	}
+
+	/**
+	 * This private property is no longer used but needs to be retained as it can be
+	 * accessed externally due to the `__get()` magic method.
+	 *
+	 * @ticket 59118
+	 * @ticket 59846
+	 */
+	public function test_use_mysqli_property_access() {
+		global $wpdb;
+
+		$this->assertTrue( $wpdb->use_mysqli );
+	}
 }
diff --git a/tests/db/charset.php b/tests/db/charset.php
index 1a79ab911f..52eb56a7a8 100644
--- a/tests/db/charset.php
+++ b/tests/db/charset.php
@@ -1022,7 +1022,7 @@ class Tests_DB_Charset extends WP_UnitTestCase {
 		$table_name = 'table_collation_check';
 		$data       = array(
 			'utf8_bin'                   => array(
-				// utf8_bin tables don't need extra sanity checking.
+				// utf8_bin tables don't need extra confidence checking.
 				'create'   => '( a VARCHAR(50) COLLATE utf8_bin )',
 				'expected' => true,
 			),
@@ -1037,13 +1037,13 @@ class Tests_DB_Charset extends WP_UnitTestCase {
 				'expected' => false,
 			),
 			'utf8_bin + big5_chinese_ci' => array(
-				// utf8_bin tables don't need extra sanity checking,
+				// utf8_bin tables don't need extra confidence checking,
 				// except for when they're not just utf8_bin.
 				'create'   => '( a VARCHAR(50) COLLATE utf8_bin, b VARCHAR(50) COLLATE big5_chinese_ci )',
 				'expected' => false,
 			),
 			'utf8_bin + int'             => array(
-				// utf8_bin tables don't need extra sanity checking
+				// utf8_bin tables don't need extra confidence checking
 				// when the other columns aren't strings.
 				'create'   => '( a VARCHAR(50) COLLATE utf8_bin, b INT )',
 				'expected' => true,
diff --git a/tests/db/dbDelta.php b/tests/db/dbDelta.php
index b28905749c..bba1fb0524 100644
--- a/tests/db/dbDelta.php
+++ b/tests/db/dbDelta.php
@@ -3,8 +3,9 @@
 /**
  * Test dbDelta()
  *
- * @group upgrade
+ * @group wpdb
  * @group dbdelta
+ * @group upgrade
  *
  * @covers ::dbDelta
  */
diff --git a/tests/dependencies/scripts.php b/tests/dependencies/scripts.php
index 7f2b956127..5e9cec7039 100644
--- a/tests/dependencies/scripts.php
+++ b/tests/dependencies/scripts.php
@@ -3065,4 +3065,358 @@ HTML
 	protected function add_html5_script_theme_support() {
 		add_theme_support( 'html5', array( 'script' ) );
 	}
+
+	/**
+	 * Test that a script is moved to the footer if it is made non-deferrable, was in the header and
+	 * all scripts that depend on it are in the footer.
+	 *
+	 * @ticket 58599
+	 *
+	 * @dataProvider data_provider_script_move_to_footer
+	 *
+	 * @param callable $set_up             Test setup.
+	 * @param string   $expected_header    Expected output for header.
+	 * @param string   $expected_footer    Expected output for footer.
+	 * @param string[] $expected_in_footer Handles expected to be in the footer.
+	 * @param array    $expected_groups    Expected groups.
+	 */
+	public function test_wp_scripts_move_to_footer( $set_up, $expected_header, $expected_footer, $expected_in_footer, $expected_groups ) {
+		$set_up();
+
+		// Get the header output.
+		ob_start();
+		wp_scripts()->do_head_items();
+		$header = ob_get_clean();
+
+		// Print a script in the body just to make sure it doesn't cause problems.
+		ob_start();
+		wp_print_scripts( array( 'jquery' ) );
+		ob_end_clean();
+
+		// Get the footer output.
+		ob_start();
+		wp_scripts()->do_footer_items();
+		$footer = ob_get_clean();
+
+		$this->assertEqualMarkup( $expected_header, $header, 'Expected header script markup to match.' );
+		$this->assertEqualMarkup( $expected_footer, $footer, 'Expected footer script markup to match.' );
+		$this->assertEqualSets( $expected_in_footer, wp_scripts()->in_footer, 'Expected to have the same handles for in_footer.' );
+		$this->assertEquals( $expected_groups, wp_scripts()->groups, 'Expected groups to match.' );
+	}
+
+	/**
+	 * Test that get_script_polyfill() returns the correct polyfill.
+	 *
+	 * @ticket 60348
+	 *
+	 * @covers ::wp_get_script_polyfill
+	 *
+	 * @global WP_Scripts $wp_scripts WP_Scripts instance.
+	 */
+	public function test_wp_get_script_polyfill() {
+		global $wp_scripts;
+		$script_name = 'wp-polyfill-importmap';
+		$test_script = 'HTMLScriptElement.supports && HTMLScriptElement.supports("importmap")';
+		$script_url  = 'https://example.com/wp-polyfill-importmap.js';
+		wp_register_script( $script_name, $script_url );
+
+		$polyfill = wp_get_script_polyfill(
+			$wp_scripts,
+			array(
+				$test_script => $script_name,
+			)
+		);
+
+		wp_deregister_script( $script_name );
+
+		$expected = '( ' . $test_script . ' ) || document.write( \'<script src="' . $script_url . '"></scr\' + \'ipt>\' );';
+
+		$this->assertEquals( $expected, $polyfill );
+	}
+
+	/**
+	 * Data provider for test_wp_scripts_move_to_footer.
+	 *
+	 * @return array[]
+	 */
+	public function data_provider_script_move_to_footer() {
+		return array(
+			'footer-blocking-dependent-of-defer-head-script' => array(
+				'set_up'             => static function () {
+					wp_enqueue_script( 'script-a', 'https://example.com/script-a.js', array(), null, array( 'strategy' => 'defer' ) );
+					wp_enqueue_script( 'script-b', 'https://example.com/script-b.js', array( 'script-a' ), null, array( 'in_footer' => true ) );
+				},
+				'expected_header'    => '',
+				'expected_footer'    => '
+					<script type="text/javascript" src="https://example.com/script-a.js" id="script-a-js" data-wp-strategy="defer"></script>
+					<script type="text/javascript" src="https://example.com/script-b.js" id="script-b-js"></script>
+				',
+				'expected_in_footer' => array(
+					'script-a',
+					'script-b',
+				),
+				'expected_groups'    => array(
+					'script-a' => 0,
+					'script-b' => 1,
+					'jquery'   => 0,
+				),
+			),
+
+			'footer-blocking-dependent-of-async-head-script' => array(
+				'set_up'             => static function () {
+					wp_enqueue_script( 'script-a', 'https://example.com/script-a.js', array(), null, array( 'strategy' => 'async' ) );
+					wp_enqueue_script( 'script-b', 'https://example.com/script-b.js', array( 'script-a' ), null, array( 'in_footer' => true ) );
+				},
+				'expected_header'    => '',
+				'expected_footer'    => '
+					<script type="text/javascript" src="https://example.com/script-a.js" id="script-a-js" data-wp-strategy="async"></script>
+					<script type="text/javascript" src="https://example.com/script-b.js" id="script-b-js"></script>
+				',
+				'expected_in_footer' => array(
+					'script-a',
+					'script-b',
+				),
+				'expected_groups'    => array(
+					'script-a' => 0,
+					'script-b' => 1,
+					'jquery'   => 0,
+				),
+			),
+
+			'head-blocking-dependent-of-delayed-head-script' => array(
+				'set_up'             => static function () {
+					wp_enqueue_script( 'script-a', 'https://example.com/script-a.js', array(), null, array( 'strategy' => 'defer' ) );
+					wp_enqueue_script( 'script-b', 'https://example.com/script-b.js', array( 'script-a' ), null, array( 'in_footer' => false ) );
+				},
+				'expected_header'    => '
+					<script type="text/javascript" src="https://example.com/script-a.js" id="script-a-js" data-wp-strategy="defer"></script>
+					<script type="text/javascript" src="https://example.com/script-b.js" id="script-b-js"></script>
+				',
+				'expected_footer'    => '',
+				'expected_in_footer' => array(),
+				'expected_groups'    => array(
+					'script-a' => 0,
+					'script-b' => 0,
+					'jquery'   => 0,
+				),
+			),
+
+			'delayed-footer-dependent-of-delayed-head-script' => array(
+				'set_up'             => static function () {
+					wp_enqueue_script( 'script-a', 'https://example.com/script-a.js', array(), null, array( 'strategy' => 'defer' ) );
+					wp_enqueue_script(
+						'script-b',
+						'https://example.com/script-b.js',
+						array( 'script-a' ),
+						null,
+						array(
+							'strategy'  => 'defer',
+							'in_footer' => true,
+						)
+					);
+				},
+				'expected_header'    => '
+					<script type="text/javascript" src="https://example.com/script-a.js" id="script-a-js" defer="defer" data-wp-strategy="defer"></script>
+				',
+				'expected_footer'    => '
+					<script type="text/javascript" src="https://example.com/script-b.js" id="script-b-js" defer="defer" data-wp-strategy="defer"></script>
+				',
+				'expected_in_footer' => array(
+					'script-b',
+				),
+				'expected_groups'    => array(
+					'script-a' => 0,
+					'script-b' => 1,
+					'jquery'   => 0,
+				),
+			),
+
+			'delayed-dependent-in-header-and-delayed-dependents-in-footer' => array(
+				'set_up'             => static function () {
+					wp_enqueue_script( 'script-a', 'https://example.com/script-a.js', array(), null, array( 'strategy' => 'defer' ) );
+					wp_enqueue_script(
+						'script-b',
+						'https://example.com/script-b.js',
+						array( 'script-a' ),
+						null,
+						array(
+							'strategy'  => 'defer',
+							'in_footer' => false,
+						)
+					);
+					wp_enqueue_script(
+						'script-c',
+						'https://example.com/script-c.js',
+						array( 'script-a' ),
+						null,
+						array(
+							'strategy'  => 'defer',
+							'in_footer' => true,
+						)
+					);
+					wp_enqueue_script(
+						'script-d',
+						'https://example.com/script-d.js',
+						array( 'script-a' ),
+						null,
+						array(
+							'strategy'  => 'defer',
+							'in_footer' => true,
+						)
+					);
+				},
+				'expected_header'    => '
+					<script type="text/javascript" src="https://example.com/script-a.js" id="script-a-js" defer="defer" data-wp-strategy="defer"></script>
+					<script type="text/javascript" src="https://example.com/script-b.js" id="script-b-js" defer="defer" data-wp-strategy="defer"></script>
+				',
+				'expected_footer'    => '
+					<script type="text/javascript" src="https://example.com/script-c.js" id="script-c-js" defer="defer" data-wp-strategy="defer"></script>
+					<script type="text/javascript" src="https://example.com/script-d.js" id="script-d-js" defer="defer" data-wp-strategy="defer"></script>
+				',
+				'expected_in_footer' => array(
+					'script-c',
+					'script-d',
+				),
+				'expected_groups'    => array(
+					'script-a' => 0,
+					'script-b' => 0,
+					'script-c' => 1,
+					'script-d' => 1,
+					'jquery'   => 0,
+				),
+			),
+
+			'all-dependents-in-footer-with-one-blocking' => array(
+				'set_up'             => static function () {
+					wp_enqueue_script( 'script-a', 'https://example.com/script-a.js', array(), null, array( 'strategy' => 'defer' ) );
+					wp_enqueue_script(
+						'script-b',
+						'https://example.com/script-b.js',
+						array( 'script-a' ),
+						null,
+						array(
+							'strategy'  => 'defer',
+							'in_footer' => true,
+						)
+					);
+					wp_enqueue_script( 'script-c', 'https://example.com/script-c.js', array( 'script-a' ), null, true );
+					wp_enqueue_script(
+						'script-d',
+						'https://example.com/script-d.js',
+						array( 'script-a' ),
+						null,
+						array(
+							'strategy'  => 'defer',
+							'in_footer' => true,
+						)
+					);
+				},
+				'expected_header'    => '',
+				'expected_footer'    => '
+					<script type="text/javascript" src="https://example.com/script-a.js" id="script-a-js" data-wp-strategy="defer"></script>
+					<script type="text/javascript" src="https://example.com/script-b.js" id="script-b-js" defer="defer" data-wp-strategy="defer"></script>
+					<script type="text/javascript" src="https://example.com/script-c.js" id="script-c-js"></script>
+					<script type="text/javascript" src="https://example.com/script-d.js" id="script-d-js" defer="defer" data-wp-strategy="defer"></script>
+				',
+				'expected_in_footer' => array(
+					'script-a',
+					'script-b',
+					'script-c',
+					'script-d',
+				),
+				'expected_groups'    => array(
+					'script-a' => 0,
+					'script-b' => 1,
+					'script-c' => 1,
+					'script-d' => 1,
+					'jquery'   => 0,
+
+				),
+			),
+
+			'blocking-dependents-in-head-and-footer'     => array(
+				'set_up'             => static function () {
+					wp_enqueue_script( 'script-a', 'https://example.com/script-a.js', array(), null, array( 'strategy' => 'defer' ) );
+					wp_enqueue_script(
+						'script-b',
+						'https://example.com/script-b.js',
+						array( 'script-a' ),
+						null,
+						array(
+							'strategy'  => 'defer',
+							'in_footer' => false,
+						)
+					);
+					wp_enqueue_script( 'script-c', 'https://example.com/script-c.js', array( 'script-a' ), null, true );
+					wp_enqueue_script(
+						'script-d',
+						'https://example.com/script-d.js',
+						array( 'script-a' ),
+						null,
+						array(
+							'strategy'  => 'defer',
+							'in_footer' => true,
+						)
+					);
+				},
+				'expected_header'    => '
+					<script type="text/javascript" src="https://example.com/script-a.js" id="script-a-js" data-wp-strategy="defer"></script>
+					<script type="text/javascript" src="https://example.com/script-b.js" id="script-b-js" defer="defer" data-wp-strategy="defer"></script>
+				',
+				'expected_footer'    => '
+					<script type="text/javascript" src="https://example.com/script-c.js" id="script-c-js"></script>
+					<script type="text/javascript" src="https://example.com/script-d.js" id="script-d-js" defer="defer" data-wp-strategy="defer"></script>
+				',
+				'expected_in_footer' => array(
+					'script-c',
+					'script-d',
+				),
+				'expected_groups'    => array(
+					'script-a' => 0,
+					'script-b' => 0,
+					'script-c' => 1,
+					'script-d' => 1,
+					'jquery'   => 0,
+				),
+			),
+
+		);
+	}
+
+	/**
+	 * @ticket 60048
+	 *
+	 * @covers ::wp_default_packages_vendor
+	 *
+	 * @dataProvider data_wp_default_packages_vendor
+	 */
+	public function test_wp_default_packages_vendor( $script ) {
+		global $wp_scripts;
+		$package_json = $this->_scripts_from_package_json();
+
+		wp_default_packages_vendor( $wp_scripts );
+
+		$this->assertSame( $package_json[ $script ], $wp_scripts->query( $script, 'registered' )->ver );
+	}
+
+	public function data_wp_default_packages_vendor() {
+		return array(
+			array( 'script' => 'lodash' ),
+			array( 'script' => 'moment' ),
+			array( 'script' => 'react' ),
+			array( 'script' => 'react-dom' ),
+			array( 'script' => 'regenerator-runtime' ),
+		);
+	}
+
+	/**
+	 * Helper to return dependencies from package.json.
+	 */
+	private function _scripts_from_package_json() {
+		$package = file_get_contents( ABSPATH . '../package.json' );
+		$data    = json_decode( $package, true );
+
+		$provider = array();
+		return $data['dependencies'];
+	}
 }
diff --git a/tests/dependencies/wpInlineScriptTag.php b/tests/dependencies/wpInlineScriptTag.php
index 2bbb665d39..7192570838 100644
--- a/tests/dependencies/wpInlineScriptTag.php
+++ b/tests/dependencies/wpInlineScriptTag.php
@@ -10,6 +10,20 @@
  */
 class Tests_Functions_wpInlineScriptTag extends WP_UnitTestCase {
 
+	private $original_theme_features = array();
+
+	public function set_up() {
+		global $_wp_theme_features;
+		parent::set_up();
+		$this->original_theme_features = $_wp_theme_features;
+	}
+
+	public function tear_down() {
+		global $_wp_theme_features;
+		$_wp_theme_features = $this->original_theme_features;
+		parent::tear_down();
+	}
+
 	private $event_handler = <<<'JS'
 document.addEventListener( 'DOMContentLoaded', function () {
 	document.getElementById( 'elementID' )
@@ -133,4 +147,74 @@ JS;
 			wp_get_inline_script_tag( "/* <![CDATA[ */ console.log( 'Hello World!' ); /* ]]> */" )
 		);
 	}
+
+	public function data_provider_to_test_cdata_wrapper_omitted_for_non_javascript_scripts() {
+		return array(
+			'no-type'     => array(
+				'type'           => null,
+				'data'           => 'alert("hello")',
+				'expected_cdata' => true,
+			),
+			'js-type'     => array(
+				'type'           => 'text/javascript',
+				'data'           => 'alert("hello")',
+				'expected_cdata' => true,
+			),
+			'js-alt-type' => array(
+				'type'           => 'application/javascript',
+				'data'           => 'alert("hello")',
+				'expected_cdata' => true,
+			),
+			'module'      => array(
+				'type'           => 'module',
+				'data'           => 'alert("hello")',
+				'expected_cdata' => true,
+			),
+			'importmap'   => array(
+				'type'           => 'importmap',
+				'data'           => '{"imports":{"bar":"http:\/\/localhost:10023\/bar.js?ver=6.5-alpha-57321"}}',
+				'expected_cdata' => false,
+			),
+			'html'        => array(
+				'type'           => 'text/html',
+				'data'           => '<div>template code</div>',
+				'expected_cdata' => false,
+			),
+			'json'        => array(
+				'type'           => 'application/json',
+				'data'           => '{}',
+				'expected_cdata' => false,
+			),
+			'ld'          => array(
+				'type'           => 'application/ld+json',
+				'data'           => '{}',
+				'expected_cdata' => false,
+			),
+			'specrules'   => array(
+				'type'           => 'speculationrules',
+				'data'           => '{}',
+				'expected_cdata' => false,
+			),
+		);
+	}
+
+	/**
+	 * Tests that CDATA wrapper is not added for non-JavaScript scripts.
+	 *
+	 * @ticket 60320
+	 *
+	 * @dataProvider data_provider_to_test_cdata_wrapper_omitted_for_non_javascript_scripts
+	 */
+	public function test_cdata_wrapper_omitted_for_non_javascript_scripts( $type, $data, $expected_cdata ) {
+		remove_theme_support( 'html5' );
+
+		$attrs = array();
+		if ( $type ) {
+			$attrs['type'] = $type;
+		}
+		$script = wp_get_inline_script_tag( $data, $attrs );
+		$this->assertSame( $expected_cdata, str_contains( $script, '/* <![CDATA[ */' ) );
+		$this->assertSame( $expected_cdata, str_contains( $script, '/* ]]> */' ) );
+		$this->assertStringContainsString( $data, $script );
+	}
 }
diff --git a/tests/editor/classic-to-block-menu-converter.php b/tests/editor/classic-to-block-menu-converter.php
index 9ec6c04183..5b9f83a987 100644
--- a/tests/editor/classic-to-block-menu-converter.php
+++ b/tests/editor/classic-to-block-menu-converter.php
@@ -7,6 +7,8 @@
 
 /**
  * Tests for the WP_Classic_To_Block_Menu_Converter_Test class.
+ *
+ * @group editor
  */
 class WP_Classic_To_Block_Menu_Converter_Test extends WP_UnitTestCase {
 
diff --git a/tests/editor/navigation-fallback.php b/tests/editor/navigation-fallback.php
index 6cdf1b35be..7b9f199a32 100644
--- a/tests/editor/navigation-fallback.php
+++ b/tests/editor/navigation-fallback.php
@@ -7,6 +7,8 @@
 
 /**
  * Tests for the WP_Navigation_Fallback class.
+ *
+ * @group editor
  */
 class WP_Navigation_Fallback_Test extends WP_UnitTestCase {
 
diff --git a/tests/filesystem/copyDir.php b/tests/filesystem/copyDir.php
index 914e2b867c..ff80273c8a 100644
--- a/tests/filesystem/copyDir.php
+++ b/tests/filesystem/copyDir.php
@@ -3,7 +3,8 @@
 /**
  * Tests copy_dir().
  *
- * @group file.php
+ * @group file
+ * @group filesystem
  *
  * @covers ::copy_dir
  */
diff --git a/tests/filesystem/findFolder.php b/tests/filesystem/findFolder.php
index 59e9e8c605..e2be834792 100644
--- a/tests/filesystem/findFolder.php
+++ b/tests/filesystem/findFolder.php
@@ -3,8 +3,8 @@
 require_once __DIR__ . '/base.php';
 
 /**
+ * @group file
  * @group filesystem
- * @group wp-filesystem
  */
 class WP_Filesystem_Find_Folder_Test extends WP_Filesystem_UnitTestCase {
 
@@ -90,7 +90,7 @@ class WP_Filesystem_Find_Folder_Test extends WP_Filesystem_UnitTestCase {
 			/example.com/www/index.php
 			/example.com/www/wp-includes/
 			/example.com/www/wp-content/plugins/
-			
+
 			# sub.example.com
 			/example.com/sub/index.php
 			/example.com/sub/wp-includes/
diff --git a/tests/filesystem/moveDir.php b/tests/filesystem/moveDir.php
index d2661fd48d..7def36a5b2 100644
--- a/tests/filesystem/moveDir.php
+++ b/tests/filesystem/moveDir.php
@@ -3,7 +3,8 @@
 /**
  * Tests move_dir().
  *
- * @group file.php
+ * @group file
+ * @group filesystem
  *
  * @covers ::move_dir
  */
diff --git a/tests/filesystem/_unzipFilePclzip.php b/tests/filesystem/unzipFilePclzip.php
similarity index 98%
rename from tests/filesystem/_unzipFilePclzip.php
rename to tests/filesystem/unzipFilePclzip.php
index c3098c6a86..5a195417fe 100644
--- a/tests/filesystem/_unzipFilePclzip.php
+++ b/tests/filesystem/unzipFilePclzip.php
@@ -3,7 +3,8 @@
 /**
  * Tests _unzip_file_pclzip().
  *
- * @group file.php
+ * @group file
+ * @group filesystem
  *
  * @covers ::_unzip_file_pclzip
  */
diff --git a/tests/filesystem/_unzipFileZiparchive.php b/tests/filesystem/unzipFileZiparchive.php
similarity index 98%
rename from tests/filesystem/_unzipFileZiparchive.php
rename to tests/filesystem/unzipFileZiparchive.php
index a9d385d339..53cabd9454 100644
--- a/tests/filesystem/_unzipFileZiparchive.php
+++ b/tests/filesystem/unzipFileZiparchive.php
@@ -3,7 +3,8 @@
 /**
  * Tests _unzip_file_ziparchive().
  *
- * @group file.php
+ * @group file
+ * @group filesystem
  *
  * @covers ::_unzip_file_ziparchive
  */
diff --git a/tests/filesystem/wpFilesystemDirect/atime.php b/tests/filesystem/wpFilesystemDirect/atime.php
new file mode 100644
index 0000000000..c6f57780c0
--- /dev/null
+++ b/tests/filesystem/wpFilesystemDirect/atime.php
@@ -0,0 +1,50 @@
+<?php
+/**
+ * Tests for the WP_Filesystem_Direct::atime() method.
+ *
+ * @package WordPress
+ */
+
+require_once __DIR__ . '/base.php';
+
+/**
+ * @group admin
+ * @group filesystem
+ * @group filesystem-direct
+ *
+ * @covers WP_Filesystem_Direct::atime
+ */
+class Tests_Filesystem_WpFilesystemDirect_Atime extends WP_Filesystem_Direct_UnitTestCase {
+
+	/**
+	 * Tests that `WP_Filesystem_Direct::atime()`
+	 * returns an integer for a path that exists.
+	 *
+	 * @ticket 57774
+	 *
+	 * @dataProvider data_paths_that_exist
+	 *
+	 * @param string $path The path.
+	 */
+	public function test_should_determine_accessed_time( $path ) {
+		$path = self::$file_structure['test_dir']['path'] . $path;
+
+		$this->assertIsInt( self::$filesystem->atime( $path ) );
+	}
+
+	/**
+	 * Tests that `WP_Filesystem_Direct::atime()`
+	 * returns false for a path that does not exist.
+	 *
+	 * @ticket 57774
+	 *
+	 * @dataProvider data_paths_that_do_not_exist
+	 *
+	 * @param string $path The path.
+	 */
+	public function test_should_return_false_for_a_path_that_does_not_exist( $path ) {
+		$path = self::$file_structure['test_dir']['path'] . $path;
+
+		$this->assertFalse( self::$filesystem->atime( $path ) );
+	}
+}
diff --git a/tests/filesystem/wpFilesystemDirect/base.php b/tests/filesystem/wpFilesystemDirect/base.php
new file mode 100644
index 0000000000..dc1252bd3a
--- /dev/null
+++ b/tests/filesystem/wpFilesystemDirect/base.php
@@ -0,0 +1,197 @@
+<?php
+
+/**
+ * Base class for WP_Filesystem_Direct tests.
+ *
+ * @package WordPress
+ */
+abstract class WP_Filesystem_Direct_UnitTestCase extends WP_UnitTestCase {
+
+	/**
+	 * The filesystem object.
+	 *
+	 * @var WP_Filesystem_Direct
+	 */
+	protected static $filesystem;
+
+	/**
+	 * The file structure for tests.
+	 *
+	 * @var array
+	 */
+	protected static $file_structure = array();
+
+	/**
+	 * Sets up test assets before the class.
+	 */
+	public static function set_up_before_class() {
+		parent::set_up_before_class();
+
+		require_once ABSPATH . 'wp-admin/includes/class-wp-filesystem-base.php';
+		require_once ABSPATH . 'wp-admin/includes/class-wp-filesystem-direct.php';
+
+		self::$filesystem = new WP_Filesystem_Direct( null );
+
+		$filesystem_data_dir = wp_normalize_path( DIR_TESTDATA . '/filesystem/' );
+		if ( ! file_exists( $filesystem_data_dir ) ) {
+			mkdir( $filesystem_data_dir );
+		}
+
+		/*
+		 * These must be created during the tests as they may be modified or deleted
+		 * during testing, either intentionally or accidentally as a result of test failure.
+		 */
+		$test_data_root_dir = $filesystem_data_dir . 'filesystem_api/';
+		$test_data_dir      = $test_data_root_dir . 'wpFilesystemDirect/';
+
+		self::$file_structure = array(
+			// Directories first.
+			'test_dir_root' => array(
+				'type' => 'd',
+				'path' => $test_data_root_dir,
+			),
+			'test_dir'      => array(
+				'type' => 'd',
+				'path' => $test_data_dir,
+			),
+			'subdir'        => array(
+				'type' => 'd',
+				'path' => $test_data_dir . 'subdir/',
+			),
+
+			// Then files.
+			'visible_file'  => array(
+				'type'     => 'f',
+				'path'     => $test_data_dir . 'a_file_that_exists.txt',
+				'contents' => "Contents of a file.\r\nNext line of a file.\r\n",
+			),
+			'hidden_file'   => array(
+				'type'     => 'f',
+				'path'     => $test_data_dir . '.a_hidden_file',
+				'contents' => "A hidden file.\r\n",
+			),
+			'subfile'       => array(
+				'type'     => 'f',
+				'path'     => $test_data_dir . 'subdir/subfile.txt',
+				'contents' => "A file in a subdirectory.\r\n",
+			),
+		);
+	}
+
+	/**
+	 * Creates any missing test assets before each test.
+	 */
+	public function set_up() {
+		parent::set_up();
+
+		foreach ( self::$file_structure as $entry ) {
+			if ( 'd' === $entry['type'] ) {
+				$this->create_directory_if_needed( $entry['path'] );
+			} elseif ( 'f' === $entry['type'] ) {
+				$this->create_file_if_needed(
+					$entry['path'],
+					isset( $entry['contents'] ) ? $entry['contents'] : ''
+				);
+			}
+		}
+	}
+
+	/**
+	 * Removes any existing test assets after each test.
+	 */
+	public function tear_down() {
+		foreach ( array_reverse( self::$file_structure ) as $entry ) {
+			if ( ! file_exists( $entry['path'] ) ) {
+				continue;
+			}
+
+			if ( 'f' === $entry['type'] ) {
+				unlink( $entry['path'] );
+			} elseif ( 'd' === $entry['type'] ) {
+				rmdir( $entry['path'] );
+			}
+		}
+
+		parent::tear_down();
+	}
+
+	/**
+	 * Creates a directory if it doesn't already exist.
+	 *
+	 * @throws Exception If the path already exists as a file.
+	 *
+	 * @param string $path The path to the directory.
+	 */
+	public function create_directory_if_needed( $path ) {
+		if ( file_exists( $path ) ) {
+			if ( is_file( $path ) ) {
+				throw new Exception( "$path already exists as a file." );
+			}
+
+			return;
+		}
+
+		mkdir( $path );
+	}
+
+	/**
+	 * Creates a file if it doesn't already exist.
+	 *
+	 * @throws Exception If the path already exists as a directory.
+	 *
+	 * @param string $path     The path to the file.
+	 * @param string $contents Optional. The contents of the file. Default empty string.
+	 */
+	public function create_file_if_needed( $path, $contents = '' ) {
+		if ( file_exists( $path ) ) {
+			if ( is_dir( $path ) ) {
+				throw new Exception( "$path already exists as a directory." );
+			}
+
+			return;
+		}
+
+		file_put_contents( $path, $contents );
+	}
+
+	/**
+	 * Determines whether the operating system is Windows.
+	 *
+	 * @return bool Whether the operating system is Windows.
+	 */
+	public static function is_windows() {
+		return 'WIN' === substr( PHP_OS, 0, 3 );
+	}
+
+	/**
+	 * Data provider.
+	 *
+	 * @return array[]
+	 */
+	public function data_paths_that_exist() {
+		return array(
+			'a file that exists'      => array(
+				'path' => 'a_file_that_exists.txt',
+			),
+			'a directory that exists' => array(
+				'path' => '',
+			),
+		);
+	}
+
+	/**
+	 * Data provider.
+	 *
+	 * @return array[]
+	 */
+	public function data_paths_that_do_not_exist() {
+		return array(
+			'a file that does not exist'      => array(
+				'path' => 'a_file_that_does_not_exist.txt',
+			),
+			'a directory that does not exist' => array(
+				'path' => 'a_directory_that_does_not_exist',
+			),
+		);
+	}
+}
diff --git a/tests/filesystem/wpFilesystemDirect/chdir.php b/tests/filesystem/wpFilesystemDirect/chdir.php
new file mode 100644
index 0000000000..cdea47928b
--- /dev/null
+++ b/tests/filesystem/wpFilesystemDirect/chdir.php
@@ -0,0 +1,95 @@
+<?php
+/**
+ * Tests for the WP_Filesystem_Direct::chdir() method.
+ *
+ * @package WordPress
+ */
+
+require_once __DIR__ . '/base.php';
+
+/**
+ * @group admin
+ * @group filesystem
+ * @group filesystem-direct
+ *
+ * @covers WP_Filesystem_Direct::chdir
+ */
+class Tests_Filesystem_WpFilesystemDirect_Chdir extends WP_Filesystem_Direct_UnitTestCase {
+
+	/**
+	 * Tests that `WP_Filesystem_Direct::chdir()`
+	 * returns false for a path that does not exist.
+	 *
+	 * @ticket 57774
+	 *
+	 * @dataProvider data_should_fail_to_change_directory
+	 *
+	 * @param string $path The path.
+	 */
+	public function test_should_fail_to_change_directory( $path ) {
+		$original_cwd = self::$filesystem->cwd();
+		$path         = wp_normalize_path( realpath( self::$file_structure['test_dir']['path'] ) ) . $path;
+		$chdir_result = self::$filesystem->chdir( $path );
+		$cwd_result   = self::$filesystem->cwd();
+
+		// Reset the current working directory.
+		self::$filesystem->chdir( $original_cwd );
+
+		$this->assertFalse(
+			$chdir_result,
+			'Changing working directory succeeded.'
+		);
+
+		$this->assertSame(
+			$original_cwd,
+			$cwd_result,
+			'The current working directory was changed.'
+		);
+	}
+
+	/**
+	 * Data provider.
+	 *
+	 * @return array[]
+	 */
+	public function data_should_fail_to_change_directory() {
+		return array(
+			'a file that exists'              => array(
+				'path' => 'a_file_that_exists.txt',
+			),
+			'a file that does not exist'      => array(
+				'path' => 'a_file_that_does_not_exist.txt',
+			),
+			'a directory that does not exist' => array(
+				'path' => 'a_directory_that_does_not_exist',
+			),
+		);
+	}
+
+	/**
+	 * Tests that `WP_Filesystem_Direct::chdir()` changes to
+	 * an existing directory.
+	 *
+	 * @ticket 57774
+	 */
+	public function test_should_change_directory() {
+		$original_cwd = self::$filesystem->cwd();
+		$path         = wp_normalize_path( realpath( self::$file_structure['test_dir']['path'] ) );
+		$chdir_result = self::$filesystem->chdir( $path );
+		$cwd_result   = self::$filesystem->cwd();
+
+		// Reset the current working directory.
+		self::$filesystem->chdir( $original_cwd );
+
+		$this->assertTrue(
+			$chdir_result,
+			'Changing working directory failed.'
+		);
+
+		$this->assertSame(
+			$path,
+			$cwd_result,
+			'The current working directory was incorrect.'
+		);
+	}
+}
diff --git a/tests/filesystem/wpFilesystemDirect/chgrp.php b/tests/filesystem/wpFilesystemDirect/chgrp.php
new file mode 100644
index 0000000000..a56e5c5ac2
--- /dev/null
+++ b/tests/filesystem/wpFilesystemDirect/chgrp.php
@@ -0,0 +1,32 @@
+<?php
+/**
+ * Tests for the WP_Filesystem_Direct::chgrp() method.
+ *
+ * @package WordPress
+ */
+
+require_once __DIR__ . '/base.php';
+
+/**
+ * @group admin
+ * @group filesystem
+ * @group filesystem-direct
+ *
+ * @covers WP_Filesystem_Direct::chgrp
+ */
+class Tests_Filesystem_WpFilesystemDirect_Chgrp extends WP_Filesystem_Direct_UnitTestCase {
+
+	/**
+	 * Tests that `WP_Filesystem_Direct::chgrp()`
+	 * returns false for a path that does not exist.
+	 *
+	 * @ticket 57774
+	 *
+	 * @dataProvider data_paths_that_do_not_exist
+	 *
+	 * @param string $path The path.
+	 */
+	public function test_should_fail_to_change_file_group( $path ) {
+		$this->assertFalse( self::$filesystem->chgrp( self::$file_structure['test_dir']['path'] . $path, 0 ) );
+	}
+}
diff --git a/tests/filesystem/wpFilesystemDirect/chmod.php b/tests/filesystem/wpFilesystemDirect/chmod.php
new file mode 100644
index 0000000000..4deb47c4f0
--- /dev/null
+++ b/tests/filesystem/wpFilesystemDirect/chmod.php
@@ -0,0 +1,77 @@
+<?php
+/**
+ * Tests for the WP_Filesystem_Direct::chmod() method.
+ *
+ * @package WordPress
+ */
+
+require_once __DIR__ . '/base.php';
+
+/**
+ * @group admin
+ * @group filesystem
+ * @group filesystem-direct
+ *
+ * @covers WP_Filesystem_Direct::chmod
+ */
+class Tests_Filesystem_WpFilesystemDirect_Chmod extends WP_Filesystem_Direct_UnitTestCase {
+
+	/**
+	 * Tests that `WP_Filesystem_Direct::chmod()`
+	 * returns false for a path that does not exist.
+	 *
+	 * @ticket 57774
+	 *
+	 * @dataProvider data_paths_that_do_not_exist
+	 *
+	 * @param string $path The path.
+	 */
+	public function test_should_return_false( $path ) {
+		$this->assertFalse( self::$filesystem->chmod( $path ) );
+	}
+
+	/**
+	 * Tests that `WP_Filesystem_Direct::chmod()` should set
+	 * $mode when it is not passed.
+	 *
+	 * This test runs in a separate process so that it can define
+	 * constants without impacting other tests.
+	 *
+	 * This test does not preserve global state to prevent the exception
+	 * "Serialization of 'Closure' is not allowed." when running in a
+	 * separate process.
+	 *
+	 * @ticket 57774
+	 *
+	 * @dataProvider data_should_set_mode_when_not_passed
+	 *
+	 * @runInSeparateProcess
+	 * @preserveGlobalState disabled
+	 *
+	 * @param string $path The path.
+	 * @param string $type The type of path. "FILE" for file, "DIR" for directory.
+	 */
+	public function test_should_handle_set_mode_when_not_passed( $path, $type ) {
+		define( 'FS_CHMOD_' . $type, ( 'FILE' === $type ? 0644 : 0755 ) );
+
+		$this->assertTrue( self::$filesystem->chmod( self::$file_structure['test_dir']['path'] . $path, false ) );
+	}
+
+	/**
+	 * Data provider.
+	 *
+	 * @return array[]
+	 */
+	public function data_should_set_mode_when_not_passed() {
+		return array(
+			'a file'      => array(
+				'path' => 'a_file_that_exists.txt',
+				'type' => 'FILE',
+			),
+			'a directory' => array(
+				'path' => '',
+				'type' => 'DIR',
+			),
+		);
+	}
+}
diff --git a/tests/filesystem/wpFilesystemDirect/chown.php b/tests/filesystem/wpFilesystemDirect/chown.php
new file mode 100644
index 0000000000..040693b03c
--- /dev/null
+++ b/tests/filesystem/wpFilesystemDirect/chown.php
@@ -0,0 +1,32 @@
+<?php
+/**
+ * Tests for the WP_Filesystem_Direct::chown() method.
+ *
+ * @package WordPress
+ */
+
+require_once __DIR__ . '/base.php';
+
+/**
+ * @group admin
+ * @group filesystem
+ * @group filesystem-direct
+ *
+ * @covers WP_Filesystem_Direct::chown
+ */
+class Tests_Filesystem_WpFilesystemDirect_Chown extends WP_Filesystem_Direct_UnitTestCase {
+
+	/**
+	 * Tests that `WP_Filesystem_Direct::chown()`
+	 * returns false for a path that does not exist.
+	 *
+	 * @ticket 57774
+	 *
+	 * @dataProvider data_paths_that_do_not_exist
+	 *
+	 * @param string $path The path.
+	 */
+	public function test_should_return_false( $path ) {
+		$this->assertFalse( self::$filesystem->chown( $path, fileowner( __FILE__ ) ) );
+	}
+}
diff --git a/tests/filesystem/wpFilesystemDirect/construct.php b/tests/filesystem/wpFilesystemDirect/construct.php
new file mode 100644
index 0000000000..e8c475a9ee
--- /dev/null
+++ b/tests/filesystem/wpFilesystemDirect/construct.php
@@ -0,0 +1,39 @@
+<?php
+/**
+ * Tests for the WP_Filesystem_Direct::__construct() method.
+ *
+ * @package WordPress
+ */
+
+/**
+ * @group admin
+ * @group filesystem
+ * @group filesystem-direct
+ *
+ * @covers WP_Filesystem_Direct::__construct
+ */
+class Tests_Filesystem_WpFilesystemDirect_Construct extends WP_Filesystem_Direct_UnitTestCase {
+
+	/**
+	 * Tests that the $method and $errors properties are set upon
+	 * the instantiation of a WP_Filesystem_Direct object.
+	 *
+	 * @ticket 57774
+	 */
+	public function test_should_set_method_and_errors() {
+		// For coverage reports, a new object must be created in the method.
+		$filesystem = new WP_Filesystem_Direct( null );
+
+		$this->assertSame(
+			'direct',
+			$filesystem->method,
+			'The "$method" property is not set to "direct".'
+		);
+
+		$this->assertInstanceOf(
+			'WP_Error',
+			$filesystem->errors,
+			'The "$errors" property is not set to a WP_Error object.'
+		);
+	}
+}
diff --git a/tests/filesystem/wpFilesystemDirect/copy.php b/tests/filesystem/wpFilesystemDirect/copy.php
new file mode 100644
index 0000000000..d0355c20e5
--- /dev/null
+++ b/tests/filesystem/wpFilesystemDirect/copy.php
@@ -0,0 +1,72 @@
+<?php
+/**
+ * Tests for the WP_Filesystem_Direct::copy() method.
+ *
+ * @package WordPress
+ */
+
+require_once __DIR__ . '/base.php';
+
+/**
+ * @group admin
+ * @group filesystem
+ * @group filesystem-direct
+ *
+ * @covers WP_Filesystem_Direct::copy
+ */
+class Tests_Filesystem_WpFilesystemDirect_Copy extends WP_Filesystem_Direct_UnitTestCase {
+
+	/**
+	 * Tests that `WP_Filesystem_Direct::copy()` overwrites an existing
+	 * destination when overwriting is enabled.
+	 *
+	 * @ticket 57774
+	 */
+	public function test_should_overwrite_an_existing_file_when_overwriting_is_enabled() {
+		$source      = self::$file_structure['visible_file']['path'];
+		$destination = self::$file_structure['test_dir']['path'] . 'a_file_that_exists.dest';
+
+		if ( ! file_exists( $destination ) ) {
+			touch( $destination );
+		}
+
+		$actual = self::$filesystem->copy( $source, $destination, true );
+
+		unlink( $destination );
+
+		$this->assertTrue( $actual );
+	}
+
+	/**
+	 * Tests that `WP_Filesystem_Direct::copy()` does not overwrite
+	 * an existing destination when overwriting is disabled.
+	 *
+	 * @ticket 57774
+	 */
+	public function test_should_not_overwrite_an_existing_file_when_overwriting_is_disabled() {
+		$source      = self::$file_structure['test_dir']['path'] . 'a_file_that_exists.txt';
+		$destination = self::$file_structure['test_dir']['path'] . 'a_file_that_exists.dest';
+
+		if ( ! file_exists( $destination ) ) {
+			touch( $destination );
+		}
+
+		$actual = self::$filesystem->copy( $source, $destination );
+
+		unlink( $destination );
+
+		$this->assertFalse( $actual );
+	}
+
+	/**
+	 * Tests that `WP_Filesystem_Direct::copy()` does not overwrite an existing
+	 * destination when overwriting is enabled and the source and destination
+	 * are the same.
+	 *
+	 * @ticket 57774
+	 */
+	public function test_should_not_overwrite_when_overwriting_is_enabled_and_source_and_destination_are_the_same() {
+		$source = self::$file_structure['test_dir']['path'] . 'a_file_that_exists.txt';
+		$this->assertFalse( self::$filesystem->copy( $source, $source, true ) );
+	}
+}
diff --git a/tests/filesystem/wpFilesystemDirect/cwd.php b/tests/filesystem/wpFilesystemDirect/cwd.php
new file mode 100644
index 0000000000..c4ce961731
--- /dev/null
+++ b/tests/filesystem/wpFilesystemDirect/cwd.php
@@ -0,0 +1,26 @@
+<?php
+/**
+ * Tests for the WP_Filesystem_Direct::cwd() method.
+ *
+ * @package WordPress
+ */
+
+/**
+ * @group admin
+ * @group filesystem
+ * @group filesystem-direct
+ *
+ * @covers WP_Filesystem_Direct::cwd
+ */
+class Tests_Filesystem_WpFilesystemDirect_Cwd extends WP_Filesystem_Direct_UnitTestCase {
+
+	/**
+	 * Tests that `WP_Filesystem_Direct::cwd()` returns the current
+	 * working directory.
+	 *
+	 * @ticket 57774
+	 */
+	public function test_should_get_current_working_directory() {
+		$this->assertSame( wp_normalize_path( dirname( ABSPATH ) ), wp_normalize_path( self::$filesystem->cwd() ) );
+	}
+}
diff --git a/tests/filesystem/wpFilesystemDirect/delete.php b/tests/filesystem/wpFilesystemDirect/delete.php
new file mode 100644
index 0000000000..4afe54890a
--- /dev/null
+++ b/tests/filesystem/wpFilesystemDirect/delete.php
@@ -0,0 +1,204 @@
+<?php
+/**
+ * Tests for the WP_Filesystem_Direct::delete() method.
+ *
+ * @package WordPress
+ */
+
+require_once __DIR__ . '/base.php';
+
+/**
+ * @group admin
+ * @group filesystem
+ * @group filesystem-direct
+ *
+ * @covers WP_Filesystem_Direct::delete
+ */
+class Tests_Filesystem_WpFilesystemDirect_Delete extends WP_Filesystem_Direct_UnitTestCase {
+
+	/**
+	 * Tests that `WP_Filesystem_Direct::delete()` returns false
+	 * for an empty path.
+	 *
+	 * @ticket 57774
+	 */
+	public function test_should_return_false_for_empty_path() {
+		$this->assertFalse( self::$filesystem->delete( '' ) );
+	}
+
+	/**
+	 * Tests that `WP_Filesystem_Direct::delete()` deletes an empty directory.
+	 *
+	 * @ticket 57774
+	 */
+	public function test_should_delete_an_empty_directory() {
+		$dir = self::$file_structure['test_dir']['path'] . 'directory-to-delete';
+
+		$this->assertTrue(
+			mkdir( $dir ),
+			'The directory was not created.'
+		);
+
+		$this->assertTrue(
+			self::$filesystem->delete( $dir ),
+			'The directory was not deleted.'
+		);
+	}
+
+	/**
+	 * Tests that `WP_Filesystem_Direct::delete()` deletes a directory with contents.
+	 *
+	 * @ticket 57774
+	 */
+	public function test_should_delete_a_directory_with_contents() {
+		$this->assertTrue(
+			self::$filesystem->delete( self::$file_structure['test_dir']['path'], true ),
+			'Directory deletion failed.'
+		);
+
+		$this->assertDirectoryDoesNotExist(
+			self::$file_structure['test_dir']['path'],
+			'The directory was not deleted.'
+		);
+	}
+
+	/**
+	 * Tests that `WP_Filesystem_Direct::delete()` deletes a file.
+	 *
+	 * @ticket 57774
+	 *
+	 * @dataProvider data_should_delete_a_file
+	 *
+	 * @param string $key The key for the file in `self::$filesystem_structure`.
+	 */
+	public function test_should_delete_a_file( $file ) {
+		$file = self::$file_structure[ $file ]['path'] . $file;
+
+		$this->assertTrue( self::$filesystem->delete( $file ), 'File deletion failed.' );
+		$this->assertFileDoesNotExist( $file, 'The file was not deleted.' );
+	}
+
+	/**
+	 * Data provider.
+	 *
+	 * @return array[]
+	 */
+	public function data_should_delete_a_file() {
+		return array(
+			'A visible file' => array(
+				'key' => 'visible_file',
+			),
+			'A hidden file'  => array(
+				'key' => 'hidden_file',
+			),
+		);
+	}
+
+	/**
+	 * Tests that `WP_Filesystem_Direct::delete()`
+	 * returns true when deleting a path that does not exist.
+	 *
+	 * @ticket 57774
+	 *
+	 * @dataProvider data_paths_that_do_not_exist
+	 *
+	 * @param string $path The path.
+	 */
+	public function test_should_return_true_when_deleting_path_that_does_not_exist( $path ) {
+		$path = self::$file_structure['test_dir']['path'] . $path;
+
+		/*
+		 * Verify that the path doesn't exist before testing.
+		 *
+		 * assertFileDoesNotExist() uses file_exists(), which returns the same result for both
+		 * files and directories.
+		 * assertDirectoryDoesNotExist() uses is_dir(), which tests strictly for a directory.
+		 *
+		 * For more useful debugging in the event of a failure, test for a directory first.
+		 */
+		$this->assertDirectoryDoesNotExist( $path, "$path already existed as a directory before testing." );
+		$this->assertFileDoesNotExist( $path, "$path already existed as a file before testing." );
+
+		$this->assertTrue( self::$filesystem->delete( $path ), 'Attempting to delete a non-existent path should return true.' );
+	}
+
+	/**
+	 * Tests that `WP_Filesystem_Direct::delete()`
+	 * returns false when a directory's contents cannot be deleted.
+	 *
+	 * @ticket 57774
+	 */
+	public function test_should_return_false_when_contents_cannot_be_deleted() {
+		global $wp_filesystem;
+
+		$wp_filesystem = new WP_Filesystem_Direct( array() );
+
+		$path = self::$file_structure['test_dir']['path'] . 'dir-to-delete/';
+
+		if ( ! is_dir( $path ) ) {
+			mkdir( $path );
+		}
+
+		// Set up mock filesystem.
+		$filesystem_mock = $this->getMockBuilder( 'WP_Filesystem_Direct' )
+								->setConstructorArgs( array( null ) )
+								// Note: setMethods() is deprecated in PHPUnit 9, but still supported.
+								->setMethods( array( 'dirlist' ) )
+								->getMock();
+
+		$filesystem_mock->expects( $this->once() )
+						->method( 'dirlist' )
+						->willReturn(
+							array( 'a_file_that_does_not_exist.txt' => array( 'type' => 'f' ) )
+						);
+
+		$wp_filesystem_backup = $wp_filesystem;
+		$wp_filesystem        = $filesystem_mock;
+
+		$actual = $filesystem_mock->delete( $path, true );
+
+		if ( $actual ) {
+			rmdir( $path );
+		}
+
+		$wp_filesystem = $wp_filesystem_backup;
+
+		$this->assertFalse( $actual );
+	}
+
+	/**
+	 * Tests that `WP_Filesystem_Direct::delete()`
+	 * returns false when the path is not a file or directory, but exists.
+	 *
+	 * @ticket 57774
+	 */
+	public function test_should_return_false_when_path_exists_but_is_not_a_file_or_directory() {
+		global $wp_filesystem;
+
+		$wp_filesystem = new WP_Filesystem_Direct( array() );
+
+		// Set up mock filesystem.
+		$filesystem_mock = $this->getMockBuilder( 'WP_Filesystem_Direct' )
+								->setConstructorArgs( array( null ) )
+								// Note: setMethods() is deprecated in PHPUnit 9, but still supported.
+								->setMethods( array( 'is_file', 'dirlist' ) )
+								->getMock();
+
+		$filesystem_mock->expects( $this->once() )
+						->method( 'is_file' )
+						->willReturn( false );
+
+		$filesystem_mock->expects( $this->once() )
+						->method( 'dirlist' )
+						->willReturn( false );
+
+		$wp_filesystem_backup = $wp_filesystem;
+		$wp_filesystem        = $filesystem_mock;
+
+		$actual = $filesystem_mock->delete( self::$file_structure['subdir']['path'], true );
+
+		$wp_filesystem = $wp_filesystem_backup;
+
+		$this->assertFalse( $actual );
+	}
+}
diff --git a/tests/filesystem/wpFilesystemDirect/dirlist.php b/tests/filesystem/wpFilesystemDirect/dirlist.php
new file mode 100644
index 0000000000..04dab2a48a
--- /dev/null
+++ b/tests/filesystem/wpFilesystemDirect/dirlist.php
@@ -0,0 +1,130 @@
+<?php
+/**
+ * Tests for the WP_Filesystem_Direct::dirlist() method.
+ *
+ * @package WordPress
+ */
+
+require_once __DIR__ . '/base.php';
+
+/**
+ * @group admin
+ * @group filesystem
+ * @group filesystem-direct
+ *
+ * @covers WP_Filesystem_Direct::dirlist
+ */
+class Tests_Filesystem_WpFilesystemDirect_Dirlist extends WP_Filesystem_Direct_UnitTestCase {
+
+	/**
+	 * Tests that `WP_Filesystem_Direct::dirlist()` returns
+	 * the expected result for a path.
+	 *
+	 * @ticket 57774
+	 *
+	 * @dataProvider data_should_get_dirlist
+	 *
+	 * @param string      $path           The path.
+	 * @param bool        $include_hidden Whether to include hidden files.
+	 * @param bool        $recursive      Whether to recursive into subdirectories.
+	 * @param array|false $expected       The expected result.
+	 */
+	public function test_should_get_dirlist( $path, $include_hidden, $recursive, $expected ) {
+		$actual = self::$filesystem->dirlist( self::$file_structure['test_dir']['path'] . $path, $include_hidden, $recursive );
+
+		if ( is_array( $expected ) ) {
+			$this->assertSameSets(
+				$expected,
+				array_keys( $actual ),
+				'The array keys do not match.'
+			);
+		} else {
+			$this->assertFalse(
+				$actual,
+				'`WP_Filesystem_Direct::dirlist()` did not return false.'
+			);
+		}
+	}
+
+	/**
+	 * Data provider.
+	 *
+	 * @return array[]
+	 */
+	public function data_should_get_dirlist() {
+		return array(
+			'a directory that exists excluding hidden files' => array(
+				'path'           => '',
+				'include_hidden' => false,
+				'recursive'      => false,
+				'expected'       => array(
+					'a_file_that_exists.txt',
+					'subdir',
+				),
+			),
+			'a directory that exists including hidden files' => array(
+				'path'           => '',
+				'include_hidden' => true,
+				'recursive'      => false,
+				'expected'       => array(
+					'a_file_that_exists.txt',
+					'.a_hidden_file',
+					'subdir',
+				),
+			),
+			'a directory that does not exist' => array(
+				'path'           => 'a_directory_that_does_not_exist/',
+				'include_hidden' => true,
+				'recursive'      => false,
+				'expected'       => false,
+			),
+			'a file that exists'              => array(
+				'path'           => 'a_file_that_exists.txt',
+				'include_hidden' => true,
+				'recursive'      => false,
+				'expected'       => array(
+					'a_file_that_exists.txt',
+				),
+			),
+			'a file that does not exist'      => array(
+				'path'           => 'a_file_that_does_not_exist.txt',
+				'include_hidden' => true,
+				'recursive'      => false,
+				'expected'       => false,
+			),
+		);
+	}
+
+	/**
+	 * Tests that `WP_Filesystem_Direct::dirlist()` recurses
+	 * into a subdirectory.
+	 *
+	 * @ticket 57774
+	 */
+	public function test_should_recurse_into_subdirectory() {
+		$actual = self::$filesystem->dirlist( self::$file_structure['test_dir']['path'], true, true );
+
+		$this->assertIsArray( $actual, 'Did not return an array.' );
+		$this->assertArrayHasKey( 'subdir', $actual, 'The subdirectory was not detected.' );
+		$this->assertArrayHasKey( 'files', $actual['subdir'], 'The subdirectory does not have a "files" key.' );
+		$this->assertNotEmpty( $actual['subdir']['files'], "The subdirectory's contents were not retrieved." );
+		$this->assertArrayHasKey( 'subfile.txt', $actual['subdir']['files'], 'The subfile was not detected.' );
+	}
+
+	/**
+	 * Tests that `WP_Filesystem_Direct::dirlist()` should not recurse
+	 * into a subdirectory.
+	 *
+	 * @ticket 57774
+	 */
+	public function test_should_not_recurse_into_subdirectory() {
+
+		$actual = self::$filesystem->dirlist( self::$file_structure['test_dir']['path'], true, false );
+
+		$this->assertIsArray( $actual, 'Did not return an array.' );
+		$this->assertArrayHasKey( 'subdir', $actual, 'The subdirectory was not detected.' );
+		$this->assertArrayHasKey( 'files', $actual['subdir'], 'The "files" key was not set.' );
+		$this->assertIsArray( $actual['subdir']['files'], 'The "files" key was not set to an array.' );
+		$this->assertEmpty( $actual['subdir']['files'], 'The "files" array was not empty.' );
+	}
+}
diff --git a/tests/filesystem/wpFilesystemDirect/exists.php b/tests/filesystem/wpFilesystemDirect/exists.php
new file mode 100644
index 0000000000..11eb32621d
--- /dev/null
+++ b/tests/filesystem/wpFilesystemDirect/exists.php
@@ -0,0 +1,44 @@
+<?php
+/**
+ * Tests for the WP_Filesystem_Direct::exists() method.
+ *
+ * @package WordPress
+ */
+
+/**
+ * @group admin
+ * @group filesystem
+ * @group filesystem-direct
+ *
+ * @covers WP_Filesystem_Direct::exists
+ */
+class Tests_Filesystem_WpFilesystemDirect_Exists extends WP_Filesystem_Direct_UnitTestCase {
+
+	/**
+	 * Tests that `WP_Filesystem_Direct::exists()` determines that
+	 * a path exists.
+	 *
+	 * @ticket 57774
+	 *
+	 * @dataProvider data_paths_that_exist
+	 *
+	 * @param string $path The path to check.
+	 */
+	public function test_should_determine_that_a_path_exists( $path ) {
+		$this->assertTrue( self::$filesystem->exists( self::$file_structure['test_dir']['path'] . $path ) );
+	}
+
+	/**
+	 * Tests that `WP_Filesystem_Direct::exists()` determines that
+	 * a path does not exist.
+	 *
+	 * @ticket 57774
+	 *
+	 * @dataProvider data_paths_that_do_not_exist
+	 *
+	 * @param string $path The path to check.
+	 */
+	public function test_should_determine_that_a_path_does_not_exist( $path ) {
+		$this->assertFalse( self::$filesystem->exists( self::$file_structure['test_dir']['path'] . $path ) );
+	}
+}
diff --git a/tests/filesystem/wpFilesystemDirect/getContents.php b/tests/filesystem/wpFilesystemDirect/getContents.php
new file mode 100644
index 0000000000..fed713239a
--- /dev/null
+++ b/tests/filesystem/wpFilesystemDirect/getContents.php
@@ -0,0 +1,47 @@
+<?php
+/**
+ * Tests for the WP_Filesystem_Direct::get_contents() method.
+ *
+ * @package WordPress
+ */
+
+require_once __DIR__ . '/base.php';
+
+/**
+ * @group admin
+ * @group filesystem
+ * @group filesystem-direct
+ *
+ * @covers WP_Filesystem_Direct::get_contents
+ */
+class Tests_Filesystem_WpFilesystemDirect_GetContents extends WP_Filesystem_Direct_UnitTestCase {
+
+	/**
+	 * Tests that `WP_Filesystem_Direct::get_contents()` gets the
+	 * contents of the provided $file.
+	 *
+	 * @ticket 57774
+	 */
+	public function test_should_get_the_contents_of_a_file() {
+		$file = self::$file_structure['visible_file']['path'];
+
+		$this->assertSame(
+			"Contents of a file.\r\nNext line of a file.\r\n",
+			self::$filesystem->get_contents( $file )
+		);
+	}
+
+	/**
+	 * Tests that `WP_Filesystem_Direct::get_contents()`
+	 * returns false for a file that does not exist.
+	 *
+	 * @ticket 57774
+	 *
+	 * @dataProvider data_paths_that_do_not_exist
+	 *
+	 * @param string $path The path.
+	 */
+	public function test_should_return_false( $path ) {
+		$this->assertFalse( self::$filesystem->get_contents( self::$file_structure['test_dir']['path'] . $path ) );
+	}
+}
diff --git a/tests/filesystem/wpFilesystemDirect/getContentsArray.php b/tests/filesystem/wpFilesystemDirect/getContentsArray.php
new file mode 100644
index 0000000000..0e09822c07
--- /dev/null
+++ b/tests/filesystem/wpFilesystemDirect/getContentsArray.php
@@ -0,0 +1,57 @@
+<?php
+/**
+ * Tests for the WP_Filesystem_Direct::get_contents_array() method.
+ *
+ * @package WordPress
+ */
+
+require_once __DIR__ . '/base.php';
+
+/**
+ * @group admin
+ * @group filesystem
+ * @group filesystem-direct
+ *
+ * @covers WP_Filesystem_Direct::get_contents_array
+ */
+class Tests_Filesystem_WpFilesystemDirect_GetContentsArray extends WP_Filesystem_Direct_UnitTestCase {
+
+	/**
+	 * Tests that `WP_Filesystem_Direct::get_contents_array()` gets
+	 * the contents of the provided file.
+	 *
+	 * @ticket 57774
+	 */
+	public function test_should_get_the_contents_of_a_file_as_an_array() {
+		$file     = self::$file_structure['visible_file']['path'];
+		$contents = self::$filesystem->get_contents_array( $file );
+
+		$this->assertIsArray(
+			$contents,
+			'The file contents are not an array.'
+		);
+
+		$this->assertSameSetsWithIndex(
+			array(
+				"Contents of a file.\r\n",
+				"Next line of a file.\r\n",
+			),
+			$contents,
+			'The file contents do not match the expected value.'
+		);
+	}
+
+	/**
+	 * Tests that `WP_Filesystem_Direct::get_contents_array()`
+	 * returns false for a path that does not exist.
+	 *
+	 * @ticket 57774
+	 *
+	 * @dataProvider data_paths_that_do_not_exist
+	 *
+	 * @param string $path The path.
+	 */
+	public function test_should_return_false( $path ) {
+		$this->assertFalse( self::$filesystem->get_contents_array( self::$file_structure['test_dir']['path'] . $path ) );
+	}
+}
diff --git a/tests/filesystem/wpFilesystemDirect/getchmod.php b/tests/filesystem/wpFilesystemDirect/getchmod.php
new file mode 100644
index 0000000000..2b0c2ce327
--- /dev/null
+++ b/tests/filesystem/wpFilesystemDirect/getchmod.php
@@ -0,0 +1,48 @@
+<?php
+/**
+ * Tests for the WP_Filesystem_Direct::getchmod() method.
+ *
+ * @package WordPress
+ */
+
+require_once __DIR__ . '/base.php';
+
+/**
+ * @group admin
+ * @group filesystem
+ * @group filesystem-direct
+ *
+ * @covers WP_Filesystem_Direct::getchmod
+ */
+class Tests_Filesystem_WpFilesystemDirect_Getchmod extends WP_Filesystem_Direct_UnitTestCase {
+
+	/**
+	 * Tests that `WP_Filesystem_Direct::getchmod()` returns
+	 * the permissions for a path that exists.
+	 *
+	 * @dataProvider data_paths_that_exist
+	 *
+	 * @ticket 57774
+	 *
+	 * @param string $path The path.
+	 */
+	public function test_should_get_chmod_for_a_path_that_exists( $path ) {
+		$actual = self::$filesystem->getchmod( self::$file_structure['test_dir']['path'] . $path );
+		$this->assertNotSame( '', $actual );
+	}
+
+	/**
+	 * Tests that `WP_Filesystem_Direct::getchmod()` returns
+	 * the permissions for a path that does not exist.
+	 *
+	 * @dataProvider data_paths_that_do_not_exist
+	 *
+	 * @ticket 57774
+	 *
+	 * @param string $path The path.
+	 */
+	public function test_should_get_chmod_for_a_path_that_does_not_exist( $path ) {
+		$actual = self::$filesystem->getchmod( self::$file_structure['test_dir']['path'] . $path );
+		$this->assertNotSame( '', $actual );
+	}
+}
diff --git a/tests/filesystem/wpFilesystemDirect/isDir.php b/tests/filesystem/wpFilesystemDirect/isDir.php
new file mode 100644
index 0000000000..1a367851f6
--- /dev/null
+++ b/tests/filesystem/wpFilesystemDirect/isDir.php
@@ -0,0 +1,63 @@
+<?php
+/**
+ * Tests for the WP_Filesystem_Direct::is_dir() method.
+ *
+ * @package WordPress
+ */
+
+require_once __DIR__ . '/base.php';
+
+/**
+ * @group admin
+ * @group filesystem
+ * @group filesystem-direct
+ *
+ * @covers WP_Filesystem_Direct::is_dir
+ */
+class Tests_Filesystem_WpFilesystemDirect_IsDir extends WP_Filesystem_Direct_UnitTestCase {
+
+	/**
+	 * Tests that `WP_Filesystem_Direct::is_directory()` determines that
+	 * a path is a directory.
+	 *
+	 * @ticket 57774
+	 */
+	public function test_should_determine_that_a_path_is_a_directory() {
+		$this->assertTrue( self::$filesystem->is_dir( self::$file_structure['test_dir']['path'] ) );
+	}
+
+	/**
+	 * Tests that `WP_Filesystem_Direct::is_directory()` determines that
+	 * a path is not a directory.
+	 *
+	 * @ticket 57774
+	 *
+	 * @dataProvider data_should_determine_that_a_path_is_not_a_directory
+	 *
+	 * @param string $path The path to check.
+	 * @param string $type The type of resource. Accepts 'f' or 'd'.
+	 *                     Used to invert $expected due to data provider setup.
+	 */
+	public function test_should_determine_that_a_path_is_not_a_directory( $path ) {
+		$this->assertFalse( self::$filesystem->is_dir( self::$file_structure['test_dir']['path'] . $path ) );
+	}
+
+	/**
+	 * Data provider.
+	 *
+	 * @return array[]
+	 */
+	public function data_should_determine_that_a_path_is_not_a_directory() {
+		return array(
+			'a file that exists'              => array(
+				'path' => 'a_file_that_exists.txt',
+			),
+			'a file that does not exist'      => array(
+				'path' => 'a_file_that_does_not_exist.txt',
+			),
+			'a directory that does not exist' => array(
+				'path' => 'a_directory_that_does_not_exist',
+			),
+		);
+	}
+}
diff --git a/tests/filesystem/wpFilesystemDirect/isFile.php b/tests/filesystem/wpFilesystemDirect/isFile.php
new file mode 100644
index 0000000000..e0471f309b
--- /dev/null
+++ b/tests/filesystem/wpFilesystemDirect/isFile.php
@@ -0,0 +1,61 @@
+<?php
+/**
+ * Tests for the WP_Filesystem_Direct::is_file() method.
+ *
+ * @package WordPress
+ */
+
+require_once __DIR__ . '/base.php';
+
+/**
+ * @group admin
+ * @group filesystem
+ * @group filesystem-direct
+ *
+ * @covers WP_Filesystem_Direct::is_file
+ */
+class Tests_Filesystem_WpFilesystemDirect_IsFile extends WP_Filesystem_Direct_UnitTestCase {
+
+	/**
+	 * Tests that `WP_Filesystem_Direct::is_file()` determies that
+	 * a path is a file.
+	 *
+	 * @ticket 57774
+	 */
+	public function test_should_determine_that_a_path_is_a_file() {
+		$this->assertTrue( self::$filesystem->is_file( self::$file_structure['test_dir']['path'] . 'a_file_that_exists.txt' ) );
+	}
+
+	/**
+	 * Tests that `WP_Filesystem_Direct::is_file()` determies that
+	 * a path is not a file.
+	 *
+	 * @ticket 57774
+	 *
+	 * @dataProvider data_should_determine_if_a_path_is_not_a_file
+	 *
+	 * @param string $path The path to check.
+	 */
+	public function test_should_determine_that_a_path_is_not_a_file( $path ) {
+		$this->assertFalse( self::$filesystem->is_file( self::$file_structure['test_dir']['path'] . $path ) );
+	}
+
+	/**
+	 * Data provider.
+	 *
+	 * @return array[]
+	 */
+	public function data_should_determine_if_a_path_is_not_a_file() {
+		return array(
+			'a file that does not exist'      => array(
+				'path' => 'a_file_that_does_not_exist.txt',
+			),
+			'a directory that exists'         => array(
+				'path' => '',
+			),
+			'a directory that does not exist' => array(
+				'path' => 'a_directory_that_does_not_exist',
+			),
+		);
+	}
+}
diff --git a/tests/filesystem/wpFilesystemDirect/isReadable.php b/tests/filesystem/wpFilesystemDirect/isReadable.php
new file mode 100644
index 0000000000..9ccde92c70
--- /dev/null
+++ b/tests/filesystem/wpFilesystemDirect/isReadable.php
@@ -0,0 +1,46 @@
+<?php
+/**
+ * Tests for the WP_Filesystem_Direct::is_readable() method.
+ *
+ * @package WordPress
+ */
+
+require_once __DIR__ . '/base.php';
+
+/**
+ * @group admin
+ * @group filesystem
+ * @group filesystem-direct
+ *
+ * @covers WP_Filesystem_Direct::is_readable
+ */
+class Tests_Filesystem_WpFilesystemDirect_IsReadable extends WP_Filesystem_Direct_UnitTestCase {
+
+	/**
+	 * Tests that `WP_Filesystem_Direct::is_readable()` determines that
+	 * a path is readable.
+	 *
+	 * @ticket 57774
+	 *
+	 * @dataProvider data_paths_that_exist
+	 *
+	 * @param string $path The path.
+	 */
+	public function test_should_determine_that_a_path_is_readable( $path ) {
+		$this->assertTrue( self::$filesystem->is_readable( self::$file_structure['test_dir']['path'] . $path ) );
+	}
+
+	/**
+	 * Tests that `WP_Filesystem_Direct::is_readable()` determines that
+	 * a path is not readable.
+	 *
+	 * @ticket 57774
+	 *
+	 * @dataProvider data_paths_that_do_not_exist
+	 *
+	 * @param string $path The path.
+	 */
+	public function test_should_determine_that_a_path_is_not_readable( $path ) {
+		$this->assertFalse( self::$filesystem->is_readable( self::$file_structure['test_dir']['path'] . $path ) );
+	}
+}
diff --git a/tests/filesystem/wpFilesystemDirect/isWritable.php b/tests/filesystem/wpFilesystemDirect/isWritable.php
new file mode 100644
index 0000000000..f3a1e0ea75
--- /dev/null
+++ b/tests/filesystem/wpFilesystemDirect/isWritable.php
@@ -0,0 +1,46 @@
+<?php
+/**
+ * Tests for the WP_Filesystem_Direct::is_writable() method.
+ *
+ * @package WordPress
+ */
+
+require_once __DIR__ . '/base.php';
+
+/**
+ * @group admin
+ * @group filesystem
+ * @group filesystem-direct
+ *
+ * @covers WP_Filesystem_Direct::is_writable
+ */
+class Tests_Filesystem_WpFilesystemDirect_IsWritable extends WP_Filesystem_Direct_UnitTestCase {
+
+	/**
+	 * Tests that `WP_Filesystem_Direct::is_writable()` determines that
+	 * a path is writable.
+	 *
+	 * @ticket 57774
+	 *
+	 * @dataProvider data_paths_that_exist
+	 *
+	 * @param string $path The path.
+	 */
+	public function test_should_determine_that_a_path_is_writable( $path ) {
+		$this->assertTrue( self::$filesystem->is_writable( self::$file_structure['test_dir']['path'] . $path ) );
+	}
+
+	/**
+	 * Tests that `WP_Filesystem_Direct::is_writable()` determines that
+	 * a path is not writable.
+	 *
+	 * @ticket 57774
+	 *
+	 * @dataProvider data_paths_that_do_not_exist
+	 *
+	 * @param string $path The path.
+	 */
+	public function test_should_determine_that_a_path_is_not_writable( $path ) {
+		$this->assertFalse( self::$filesystem->is_writable( self::$file_structure['test_dir']['path'] . $path ) );
+	}
+}
diff --git a/tests/filesystem/wpFilesystemDirect/mkdir.php b/tests/filesystem/wpFilesystemDirect/mkdir.php
new file mode 100644
index 0000000000..0d87bd536b
--- /dev/null
+++ b/tests/filesystem/wpFilesystemDirect/mkdir.php
@@ -0,0 +1,209 @@
+<?php
+/**
+ * Tests for the WP_Filesystem_Direct::mkdir() method.
+ *
+ * @package WordPress
+ */
+
+require_once __DIR__ . '/base.php';
+
+/**
+ * @group admin
+ * @group filesystem
+ * @group filesystem-direct
+ *
+ * @covers WP_Filesystem_Direct::mkdir
+ */
+class Tests_Filesystem_WpFilesystemDirect_Mkdir extends WP_Filesystem_Direct_UnitTestCase {
+
+	/**
+	 * Tests that `WP_Filesystem_Direct::mkdir()` creates a directory.
+	 *
+	 * This test runs in a separate process so that it can define
+	 * constants without impacting other tests.
+	 *
+	 * This test does not preserve global state to prevent the exception
+	 * "Serialization of 'Closure' is not allowed." when running in a
+	 * separate process.
+	 *
+	 * @ticket 57774
+	 *
+	 * @dataProvider data_should_create_directory
+	 *
+	 * @runInSeparateProcess
+	 * @preserveGlobalState disabled
+	 *
+	 * @param mixed $path The path to create.
+	 */
+	public function test_should_create_directory( $path ) {
+		define( 'FS_CHMOD_DIR', 0755 );
+
+		$path   = str_replace( 'TEST_DIR', self::$file_structure['test_dir']['path'], $path );
+		$actual = self::$filesystem->mkdir( $path );
+
+		if ( $path !== self::$file_structure['test_dir']['path'] && is_dir( $path ) ) {
+			rmdir( $path );
+		}
+
+		$this->assertTrue( $actual );
+	}
+
+	/**
+	 * Data provider.
+	 *
+	 * @return array[]
+	 */
+	public function data_should_create_directory() {
+		return array(
+			'no trailing slash' => array(
+				'path' => 'TEST_DIR/directory-to-create',
+			),
+			'a trailing slash'  => array(
+				'path' => 'TEST_DIR/directory-to-create/',
+			),
+		);
+	}
+
+	/**
+	 * Tests that `WP_Filesystem_Direct::mkdir()` does not create a directory.
+	 *
+	 * This test runs in a separate process so that it can define
+	 * constants without impacting other tests.
+	 *
+	 * This test does not preserve global state to prevent the exception
+	 * "Serialization of 'Closure' is not allowed." when running in a
+	 * separate process.
+	 *
+	 * @ticket 57774
+	 *
+	 * @dataProvider data_should_not_create_directory
+	 *
+	 * @runInSeparateProcess
+	 * @preserveGlobalState disabled
+	 *
+	 * @param mixed $path     The path to create.
+	 */
+	public function test_should_not_create_directory( $path ) {
+		define( 'FS_CHMOD_DIR', 0755 );
+
+		$path   = str_replace( 'TEST_DIR', self::$file_structure['test_dir']['path'], $path );
+		$actual = self::$filesystem->mkdir( $path );
+
+		if ( $path !== self::$file_structure['test_dir']['path'] && is_dir( $path ) ) {
+			rmdir( $path );
+		}
+
+		$this->assertFalse( $actual );
+	}
+
+	/**
+	 * Data provider.
+	 *
+	 * @return array[]
+	 */
+	public function data_should_not_create_directory() {
+		return array(
+			'empty path'         => array(
+				'path' => '',
+			),
+			'a path that exists' => array(
+				'path' => 'TEST_DIR',
+			),
+		);
+	}
+
+	/**
+	 * Tests that `WP_Filesystem_Direct::mkdir()` sets chmod.
+	 *
+	 * @ticket 57774
+	 */
+	public function test_should_set_chmod() {
+		$path = self::$file_structure['test_dir']['path'] . 'directory-to-create';
+
+		$created = self::$filesystem->mkdir( $path, 0644 );
+		$chmod   = substr( sprintf( '%o', fileperms( $path ) ), -4 );
+
+		if ( $path !== self::$file_structure['test_dir']['path'] && is_dir( $path ) ) {
+			rmdir( $path );
+		}
+
+		$expected_permissions = $this->is_windows() ? '0777' : '0644';
+
+		$this->assertTrue( $created, 'The directory was not created.' );
+		$this->assertSame( $expected_permissions, $chmod, 'The permissions are incorrect.' );
+	}
+
+	/**
+	 * Tests that `WP_Filesystem_Direct::mkdir()` sets the owner.
+	 *
+	 * This test runs in a separate process so that it can define
+	 * constants without impacting other tests.
+	 *
+	 * This test does not preserve global state to prevent the exception
+	 * "Serialization of 'Closure' is not allowed." when running in a
+	 * separate process.
+	 *
+	 * @ticket 57774
+	 *
+	 * @runInSeparateProcess
+	 * @preserveGlobalState disabled
+	 */
+	public function test_should_set_owner() {
+		define( 'FS_CHMOD_DIR', 0755 );
+
+		$path = self::$file_structure['test_dir']['path'] . 'directory-to-create';
+
+		// Get the default owner.
+		self::$filesystem->mkdir( $path );
+		$original_owner = fileowner( $path );
+
+		rmdir( $path );
+
+		$created = self::$filesystem->mkdir( $path, 0755, $original_owner );
+		$owner   = fileowner( $path );
+
+		if ( $path !== self::$file_structure['test_dir']['path'] && is_dir( $path ) ) {
+			rmdir( $path );
+		}
+
+		$this->assertTrue( $created, 'The directory was not created.' );
+		$this->assertSame( $original_owner, $owner, 'The owner is incorrect.' );
+	}
+
+	/**
+	 * Tests that `WP_Filesystem_Direct::mkdir()` sets the group.
+	 *
+	 * This test runs in a separate process so that it can define
+	 * constants without impacting other tests.
+	 *
+	 * This test does not preserve global state to prevent the exception
+	 * "Serialization of 'Closure' is not allowed." when running in a
+	 * separate process.
+	 *
+	 * @ticket 57774
+	 *
+	 * @runInSeparateProcess
+	 * @preserveGlobalState disabled
+	 */
+	public function test_should_set_group() {
+		define( 'FS_CHMOD_DIR', 0755 );
+
+		$path = self::$file_structure['test_dir']['path'] . 'directory-to-create';
+
+		// Get the default group.
+		self::$filesystem->mkdir( $path );
+		$original_group = filegroup( $path );
+
+		rmdir( $path );
+
+		$created = self::$filesystem->mkdir( $path, 0755, false, $original_group );
+		$group   = filegroup( $path );
+
+		if ( $path !== self::$file_structure['test_dir']['path'] && is_dir( $path ) ) {
+			rmdir( $path );
+		}
+
+		$this->assertTrue( $created, 'The directory was not created.' );
+		$this->assertSame( $original_group, $group, 'The group is incorrect.' );
+	}
+}
diff --git a/tests/filesystem/wpFilesystemDirect/move.php b/tests/filesystem/wpFilesystemDirect/move.php
new file mode 100644
index 0000000000..a6822a90f4
--- /dev/null
+++ b/tests/filesystem/wpFilesystemDirect/move.php
@@ -0,0 +1,150 @@
+<?php
+/**
+ * Tests for the WP_Filesystem_Direct::move() method.
+ *
+ * @package WordPress
+ */
+
+require_once __DIR__ . '/base.php';
+
+/**
+ * @group admin
+ * @group filesystem
+ * @group filesystem-direct
+ *
+ * @covers WP_Filesystem_Direct::move
+ */
+class Tests_Filesystem_WpFilesystemDirect_Move extends WP_Filesystem_Direct_UnitTestCase {
+
+	/**
+	 * Tests that `WP_Filesystem_Direct::copy()` overwrites an existing
+	 * destination when overwriting is enabled.
+	 *
+	 * @ticket 57774
+	 */
+	public function test_should_overwrite_an_existing_file_when_overwriting_is_enabled() {
+		$source      = self::$file_structure['visible_file']['path'];
+		$destination = self::$file_structure['test_dir']['path'] . 'a_file_that_exists.dest';
+		$actual      = self::$filesystem->move( $source, $destination, true );
+
+		rename( $destination, $source );
+
+		$this->assertTrue( $actual );
+	}
+
+	/**
+	 * Tests that `WP_Filesystem_Direct::move()` does not overwrite
+	 * an existing destination when overwriting is disabled.
+	 *
+	 * @ticket 57774
+	 */
+	public function test_should_not_overwrite_an_existing_file_when_overwriting_is_disabled() {
+		$source      = self::$file_structure['visible_file']['path'];
+		$destination = self::$file_structure['subfile']['path'];
+		$actual      = self::$filesystem->move( $source, $destination );
+
+		$this->assertFalse( $actual );
+	}
+
+	/**
+	 * Tests that `WP_Filesystem_Direct::move()` moves directories.
+	 *
+	 * @ticket 57774
+	 */
+	public function test_should_move_directories() {
+		$source      = self::$file_structure['test_dir']['path'];
+		$destination = untrailingslashit( self::$file_structure['test_dir']['path'] ) . '-dest';
+		$actual      = self::$filesystem->move( $source, $destination, true );
+
+		$source_exists      = is_dir( $source );
+		$destination_exists = is_dir( $destination );
+
+		if ( $actual ) {
+			$restored = rename( $destination, $source );
+		}
+
+		$this->assertTrue( $actual, 'The directory was not moved.' );
+		$this->assertFalse( $source_exists, 'The source still exists.' );
+		$this->assertTrue( $destination_exists, 'The destination does not exist.' );
+		$this->assertTrue( $restored, 'The test assets were not cleaned up after the test.' );
+	}
+
+	/**
+	 * Tests that `WP_Filesystem_Direct::move()` returns false for an
+	 * invalid destination.
+	 *
+	 * @ticket 57774
+	 */
+	public function test_should_return_false_for_invalid_destination() {
+		$source      = self::$file_structure['test_dir']['path'];
+		$destination = 'http://example.org';
+
+		$this->assertFalse( self::$filesystem->move( $source, $destination, true ) );
+	}
+
+	/**
+	 * Tests that `WP_Filesystem_Direct::move()` returns false for an
+	 * invalid destination.
+	 *
+	 * @ticket 57774
+	 */
+	public function test_should_return_false_when_overwriting_is_enabled_the_destination_exists_but_cannot_be_deleted() {
+		global $wp_filesystem;
+		$wpfilesystem_backup = $wp_filesystem;
+
+		// Force failure conditions.
+		$filesystem_mock = $this->getMockBuilder( 'WP_Filesystem_Direct' )
+								// Note: setMethods() is deprecated in PHPUnit 9, but still supported.
+								->setMethods( array( 'exists', 'delete' ) )
+								->setConstructorArgs( array( null ) )
+								->getMock();
+
+		$filesystem_mock->expects( $this->once() )->method( 'exists' )->willReturn( true );
+		$filesystem_mock->expects( $this->once() )->method( 'delete' )->willReturn( false );
+		$wp_filesystem = $filesystem_mock;
+
+		$actual = $wp_filesystem->move(
+			self::$file_structure['test_dir']['path'],
+			self::$file_structure['subdir']['path'],
+			true
+		);
+
+		// Restore the filesystem.
+		$wp_filesystem = $wpfilesystem_backup;
+
+		$this->assertFalse( $actual );
+	}
+
+	/**
+	 * Tests that `WP_Filesystem_Direct::move()` falls back to a single
+	 * file copy when the source and destination do not exist.
+	 *
+	 * @ticket 57774
+	 */
+	public function test_should_fall_back_to_single_file_copy_when_source_and_destination_do_not_exist() {
+		global $wp_filesystem;
+
+		$source      = self::$file_structure['test_dir']['path'] . 'a_file_that_does_not_exist.txt';
+		$destination = self::$file_structure['test_dir']['path'] . 'another_file_that_does_not_exist.txt';
+
+		// Set up mock filesystem.
+		$filesystem_mock = $this->getMockBuilder( 'WP_Filesystem_Direct' )
+								->setConstructorArgs( array( null ) )
+								// Note: setMethods() is deprecated in PHPUnit 9, but still supported.
+								->setMethods( array( 'exists', 'delete', 'is_file', 'copy' ) )
+								->getMock();
+
+		$filesystem_mock->expects( $this->exactly( 2 ) )->method( 'exists' )->willReturn( array( true, true ) );
+		$filesystem_mock->expects( $this->exactly( 2 ) )->method( 'delete' )->willReturn( array( true, false ) );
+		$filesystem_mock->expects( $this->once() )->method( 'is_file' )->willReturn( true );
+		$filesystem_mock->expects( $this->once() )->method( 'copy' )->willReturn( true );
+
+		$wp_filesystem_backup = $wp_filesystem;
+		$wp_filesystem        = $filesystem_mock;
+
+		$actual        = $filesystem_mock->move( $source, $destination, true );
+		$wp_filesystem = $wp_filesystem_backup;
+
+		$this->assertTrue( $actual );
+	}
+}
diff --git a/tests/filesystem/wpFilesystemDirect/mtime.php b/tests/filesystem/wpFilesystemDirect/mtime.php
new file mode 100644
index 0000000000..57d6f92bbc
--- /dev/null
+++ b/tests/filesystem/wpFilesystemDirect/mtime.php
@@ -0,0 +1,68 @@
+<?php
+/**
+ * Tests for the WP_Filesystem_Direct::mtime() method.
+ *
+ * @package WordPress
+ */
+
+require_once __DIR__ . '/base.php';
+
+/**
+ * @group admin
+ * @group filesystem
+ * @group filesystem-direct
+ *
+ * @covers WP_Filesystem_Direct::mtime
+ */
+class Tests_Filesystem_WpFilesystemDirect_Mtime extends WP_Filesystem_Direct_UnitTestCase {
+
+	/**
+	 * Tests that `WP_Filesystem_Direct::mtime()` determines
+	 * the mtime of a path.
+	 *
+	 * @ticket 57774
+	 *
+	 * @dataProvider data_paths_that_exist
+	 *
+	 * @param string $path The path.
+	 */
+	public function test_should_determine_file_modified_time( $path ) {
+		$result    = self::$filesystem->mtime( self::$file_structure['test_dir']['path'] . $path );
+		$has_mtime = false !== $result;
+
+		$this->assertTrue(
+			$has_mtime,
+			'The mtime was not determined.'
+		);
+
+		$this->assertIsInt(
+			$result,
+			'The mtime is not an integer.'
+		);
+	}
+
+	/**
+	 * Tests that `WP_Filesystem_Direct::mtime()` does not determine
+	 * the mtime of a path.
+	 *
+	 * @ticket 57774
+	 *
+	 * @dataProvider data_paths_that_do_not_exist
+	 *
+	 * @param string $path The path.
+	 */
+	public function test_should_not_determine_file_modified_time( $path ) {
+		$result    = self::$filesystem->mtime( self::$file_structure['test_dir']['path'] . $path );
+		$has_mtime = false !== $result;
+
+		$this->assertFalse(
+			$has_mtime,
+			'An mtime was determined.'
+		);
+
+		$this->assertIsNotInt(
+			$result,
+			'The mtime is an integer.'
+		);
+	}
+}
diff --git a/tests/filesystem/wpFilesystemDirect/putContents.php b/tests/filesystem/wpFilesystemDirect/putContents.php
new file mode 100644
index 0000000000..8eabfffdb2
--- /dev/null
+++ b/tests/filesystem/wpFilesystemDirect/putContents.php
@@ -0,0 +1,42 @@
+<?php
+/**
+ * Tests for the WP_Filesystem_Direct::put_contents() method.
+ *
+ * @package WordPress
+ */
+
+require_once __DIR__ . '/base.php';
+
+/**
+ * @group admin
+ * @group filesystem
+ * @group filesystem-direct
+ *
+ * @covers WP_Filesystem_Direct::put_contents
+ */
+class Tests_Filesystem_WpFilesystemDirect_PutContents extends WP_Filesystem_Direct_UnitTestCase {
+
+	/**
+	 * Tests that `WP_Filesystem_Direct::put_contents()`
+	 * returns false for a directory.
+	 *
+	 * @ticket 57774
+	 */
+	public function test_should_return_false_for_a_directory() {
+		$this->assertFalse( self::$filesystem->put_contents( self::$file_structure['test_dir']['path'], 'New content.' ) );
+	}
+
+	/**
+	 * Tests that `WP_Filesystem_Direct::put_contents()` inserts
+	 * content into the provided file.
+	 *
+	 * @ticket 57774
+	 */
+	public function test_should_insert_contents_into_file() {
+		$file   = self::$file_structure['test_dir']['path'] . 'file-to-create.txt';
+		$actual = self::$filesystem->put_contents( $file, 'New content.', 0644 );
+		unlink( $file );
+
+		$this->assertTrue( $actual, 'The contents were not inserted.' );
+	}
+}
diff --git a/tests/filesystem/wpFilesystemDirect/rmdir.php b/tests/filesystem/wpFilesystemDirect/rmdir.php
new file mode 100644
index 0000000000..9186fcf2e0
--- /dev/null
+++ b/tests/filesystem/wpFilesystemDirect/rmdir.php
@@ -0,0 +1,200 @@
+<?php
+/**
+ * Tests for the WP_Filesystem_Direct::rmdir() method.
+ *
+ * @package WordPress
+ */
+
+require_once __DIR__ . '/base.php';
+
+/**
+ * @group admin
+ * @group filesystem
+ * @group filesystem-direct
+ *
+ * @covers WP_Filesystem_Direct::rmdir
+ */
+class Tests_Filesystem_WpFilesystemDirect_Rmdir extends WP_Filesystem_Direct_UnitTestCase {
+
+	/**
+	 * Tests that `WP_Filesystem_Direct::rmdir()` returns false
+	 * for an empty path.
+	 *
+	 * @ticket 57774
+	 */
+	public function test_should_return_false_for_empty_path() {
+		$this->assertFalse( self::$filesystem->rmdir( '' ) );
+	}
+
+	/**
+	 * Tests that `WP_Filesystem_Direct::rmdir()` deletes an empty directory.
+	 *
+	 * @ticket 57774
+	 */
+	public function test_should_delete_an_empty_directory() {
+		$dir = self::$file_structure['test_dir']['path'] . 'directory-to-delete/';
+
+		if ( ! is_dir( $dir ) ) {
+			mkdir( $dir );
+		}
+
+		$actual = self::$filesystem->rmdir( $dir );
+
+		if ( ! $actual ) {
+			rmdir( $dir );
+		}
+
+		$this->assertTrue( $actual, 'The directory was not deleted.' );
+	}
+
+	/**
+	 * Tests that `WP_Filesystem_Direct::rmdir()` recursively deletes
+	 * a directory with contents.
+	 *
+	 * @ticket 57774
+	 */
+	public function test_should_recursively_delete_a_directory() {
+		$dir     = self::$file_structure['test_dir']['path'] . 'directory-to-delete/';
+		$file    = $dir . 'file-to-delete.txt';
+		$subdir  = $dir . 'subdirectory-to-delete/';
+		$subfile = $subdir . 'subfile-to-delete.txt';
+
+		mkdir( $dir, 0755 );
+		mkdir( $subdir, 0755 );
+		touch( $file, 0644 );
+		touch( $subfile, 0644 );
+
+		$actual = self::$filesystem->rmdir( self::$file_structure['test_dir']['path'], true );
+
+		if ( ! $actual ) {
+			unlink( $file );
+			unlink( $subfile );
+			rmdir( $subdir );
+			rmdir( $dir );
+		}
+
+		$this->assertTrue( $actual, 'The directory was deleted.' );
+	}
+
+	/**
+	 * Tests that `WP_Filesystem_Direct::rmdir()` deletes a file.
+	 *
+	 * @ticket 57774
+	 */
+	public function test_should_delete_a_file() {
+		$file = self::$file_structure['test_dir']['path'] . 'file-to-delete.txt';
+
+		touch( $file );
+
+		$actual = self::$filesystem->rmdir( $file );
+
+		if ( ! $actual ) {
+			unlink( $file );
+		}
+
+		$this->assertTrue( $actual, 'The directory was not deleted.' );
+	}
+
+	/**
+	 * Tests that `WP_Filesystem_Direct::rmdir()`
+	 * returns true when deleting a path that does not exist.
+	 *
+	 * @ticket 57774
+	 *
+	 * @dataProvider data_paths_that_do_not_exist
+	 *
+	 * @param string $path The path.
+	 */
+	public function test_should_return_true_when_deleting_path_that_does_not_exist( $path ) {
+		if (
+			'' === $path
+			|| str_starts_with( $path, '.' )
+			|| str_starts_with( $path, '/' )
+		) {
+			$this->markTestSkipped( 'Dangerous delete path.' );
+		}
+
+		$this->assertTrue( self::$filesystem->rmdir( self::$file_structure['test_dir']['path'] . $path ) );
+	}
+
+	/**
+	 * Tests that `WP_Filesystem_Direct::rmdir()`
+	 * returns false when a directory's contents cannot be deleted.
+	 *
+	 * @ticket 57774
+	 */
+	public function test_should_return_false_when_contents_cannot_be_deleted() {
+
+		global $wp_filesystem;
+
+		$wp_filesystem = new WP_Filesystem_Direct( array() );
+
+		$path = self::$file_structure['test_dir']['path'] . 'dir-to-delete/';
+
+		if ( ! is_dir( $path ) ) {
+			mkdir( $path );
+		}
+
+		// Set up mock filesystem.
+		$filesystem_mock = $this->getMockBuilder( 'WP_Filesystem_Direct' )
+								->setConstructorArgs( array( null ) )
+								// Note: setMethods() is deprecated in PHPUnit 9, but still supported.
+								->setMethods( array( 'dirlist' ) )
+								->getMock();
+
+		$filesystem_mock->expects( $this->once() )
+						->method( 'dirlist' )
+						->willReturn(
+							array( 'a_file_that_does_not_exist.txt' => array( 'type' => 'f' ) )
+						);
+
+		$wp_filesystem_backup = $wp_filesystem;
+		$wp_filesystem        = $filesystem_mock;
+
+		$actual = $filesystem_mock->rmdir( $path, true );
+
+		if ( $actual ) {
+			rmdir( $path );
+		}
+
+		$wp_filesystem = $wp_filesystem_backup;
+
+		$this->assertFalse( $actual );
+	}
+
+	/**
+	 * Tests that `WP_Filesystem_Direct::rmdir()`
+	 * returns false when the path is not a file or directory, but exists.
+	 *
+	 * @ticket 57774
+	 */
+	public function test_should_return_false_when_path_exists_but_is_not_a_file_or_directory() {
+		global $wp_filesystem;
+
+		$wp_filesystem = new WP_Filesystem_Direct( array() );
+
+		// Set up mock filesystem.
+		$filesystem_mock = $this->getMockBuilder( 'WP_Filesystem_Direct' )
+								->setConstructorArgs( array( null ) )
+								// Note: setMethods() is deprecated in PHPUnit 9, but still supported.
+								->setMethods( array( 'is_file', 'dirlist' ) )
+								->getMock();
+
+		$filesystem_mock->expects( $this->once() )
+						->method( 'is_file' )
+						->willReturn( false );
+
+		$filesystem_mock->expects( $this->once() )
+						->method( 'dirlist' )
+						->willReturn( false );
+
+		$wp_filesystem_backup = $wp_filesystem;
+		$wp_filesystem        = $filesystem_mock;
+
+		$actual = $filesystem_mock->rmdir( self::$file_structure['subdir']['path'], true );
+
+		$wp_filesystem = $wp_filesystem_backup;
+
+		$this->assertFalse( $actual );
+	}
+}
diff --git a/tests/filesystem/wpFilesystemDirect/size.php b/tests/filesystem/wpFilesystemDirect/size.php
new file mode 100644
index 0000000000..8870b8ac8c
--- /dev/null
+++ b/tests/filesystem/wpFilesystemDirect/size.php
@@ -0,0 +1,63 @@
+<?php
+/**
+ * Tests for the WP_Filesystem_Direct::size() method.
+ *
+ * @package WordPress
+ */
+
+require_once __DIR__ . '/base.php';
+
+/**
+ * @group admin
+ * @group filesystem
+ * @group filesystem-direct
+ *
+ * @covers WP_Filesystem_Direct::size
+ */
+class Tests_Filesystem_WpFilesystemDirect_Size extends WP_Filesystem_Direct_UnitTestCase {
+
+	/**
+	 * Tests that `WP_Filesystem_Direct::size()` determines
+	 * the file size of a path that exists.
+	 *
+	 * @ticket 57774
+	 *
+	 * @dataProvider data_paths_that_exist
+	 *
+	 * @param string $path The path.
+	 */
+	public function test_should_determine_file_size( $path ) {
+		$result       = self::$filesystem->size( self::$file_structure['test_dir']['path'] . $path );
+		$has_filesize = false !== $result;
+
+		$this->assertTrue(
+			$has_filesize,
+			'The file size was not determined.'
+		);
+
+		$this->assertIsInt(
+			$result,
+			'The file size is not an integer.'
+		);
+	}
+
+	/**
+	 * Tests that `WP_Filesystem_Direct::size()` does not determine
+	 * the filesize of a path that does not exist.
+	 *
+	 * @ticket 57774
+	 *
+	 * @dataProvider data_paths_that_do_not_exist
+	 *
+	 * @param string $path The path.
+	 */
+	public function test_should_not_determine_file_size( $path ) {
+		$result       = self::$filesystem->size( self::$file_structure['test_dir']['path'] . $path );
+		$has_filesize = false !== $result;
+
+		$this->assertFalse(
+			$has_filesize,
+			'A file size was determined.'
+		);
+	}
+}
diff --git a/tests/filesystem/wpFilesystemDirect/touch.php b/tests/filesystem/wpFilesystemDirect/touch.php
new file mode 100644
index 0000000000..6fc494479c
--- /dev/null
+++ b/tests/filesystem/wpFilesystemDirect/touch.php
@@ -0,0 +1,93 @@
+<?php
+/**
+ * Tests for the WP_Filesystem_Direct::touch() method.
+ *
+ * @package WordPress
+ */
+
+require_once __DIR__ . '/base.php';
+
+/**
+ * @group admin
+ * @group filesystem
+ * @group filesystem-direct
+ *
+ * @covers WP_Filesystem_Direct::touch
+ */
+class Tests_Filesystem_WpFilesystemDirect_Touch extends WP_Filesystem_Direct_UnitTestCase {
+
+	/**
+	 * Tests that `WP_Filesystem_Direct::touch()` creates a file.
+	 *
+	 * @ticket 57774
+	 *
+	 * @dataProvider data_should_create_file
+	 *
+	 * @param string $file  The file path.
+	 * @param int    $mtime The modified time to set.
+	 * @param int    $atime The accessed time to set.
+	 */
+	public function test_should_create_file( $file, $mtime, $atime ) {
+		$file = str_replace( 'TEST_DATA', self::$file_structure['test_dir']['path'], $file );
+
+		if ( is_string( $mtime ) ) {
+			$mtime = (int) str_replace(
+				array( 'time plus one minute', time() + MINUTE_IN_SECONDS ),
+				array( 'time', time() ),
+				$mtime
+			);
+		}
+
+		$expected_mtime = 0 === $mtime ? time() : $mtime;
+
+		if ( is_string( $atime ) ) {
+			$atime = (int) str_replace(
+				array( 'time plus one minute', time() + MINUTE_IN_SECONDS ),
+				array( 'time', time() ),
+				$atime
+			);
+		}
+
+		$expected_atime = 0 === $atime ? time() : $atime;
+
+		$result = self::$filesystem->touch( $file, $mtime, $atime );
+
+		$actual_atime  = fileatime( $file );
+		$actual_exists = file_exists( $file );
+		$actual_mtime  = filemtime( $file );
+
+		if ( $actual_exists ) {
+			unlink( $file );
+		}
+
+		$this->assertTrue( $result, 'WP_Filesystem_Direct::touch() did not return true.' );
+		$this->assertTrue( $actual_exists, 'The file does not exist.' );
+		$this->assertSame( $actual_atime, $expected_atime, 'The file does not have the expected atime.' );
+		$this->assertSame( $actual_mtime, $expected_mtime, 'The file does not have the expected mtime.' );
+	}
+
+	/**
+	 * Data provider.
+	 *
+	 * @return array[]
+	 */
+	public function data_should_create_file() {
+		return array(
+			'default mtime or atime'      => array(
+				'file'  => 'TEST_DATA/file-to-create.txt',
+				'mtime' => 0,
+				'atime' => 0,
+			),
+			'set mtime and default atime' => array(
+				'file'  => 'TEST_DATA/file-to-create.txt',
+				'mtime' => 'time plus one minute',
+				'atime' => 'time',
+			),
+			'default mtime and set atime' => array(
+				'file'  => 'TEST_DATA/file-to-create.txt',
+				'mtime' => 'time',
+				'atime' => 'time plus one minute',
+			),
+		);
+	}
+}
diff --git a/tests/filesystem/wpOpcacheInvalidateDirectory.php b/tests/filesystem/wpOpcacheInvalidateDirectory.php
index 54c71c7ab0..d0275b5ebf 100644
--- a/tests/filesystem/wpOpcacheInvalidateDirectory.php
+++ b/tests/filesystem/wpOpcacheInvalidateDirectory.php
@@ -3,7 +3,8 @@
 /**
  * Tests wp_opcache_invalidate_directory().
  *
- * @group file.php
+ * @group file
+ * @group filesystem
  *
  * @covers ::wp_opcache_invalidate_directory
  */
diff --git a/tests/filesystem/wpZipFileIsValid.php b/tests/filesystem/wpZipFileIsValid.php
new file mode 100644
index 0000000000..94a5f4ebbd
--- /dev/null
+++ b/tests/filesystem/wpZipFileIsValid.php
@@ -0,0 +1,75 @@
+<?php
+
+/**
+ * Tests wp_zip_file_is_valid().
+ *
+ * @group file
+ * @group filesystem
+ *
+ * @covers ::wp_zip_file_is_valid
+ */
+class Tests_Filesystem_WpZipFileIsValid extends WP_UnitTestCase {
+
+	/**
+	 * The test data directory.
+	 *
+	 * @var string $test_data_dir
+	 */
+	private static $test_data_dir;
+
+	/**
+	 * Sets up the filesystem and test data directory property
+	 * before any tests run.
+	 */
+	public static function set_up_before_class() {
+		parent::set_up_before_class();
+
+		require_once ABSPATH . 'wp-admin/includes/file.php';
+		WP_Filesystem();
+
+		self::$test_data_dir = DIR_TESTDATA . '/filesystem/';
+	}
+
+	/**
+	 * Tests ZIP file validity is correctly determined.
+	 *
+	 * @ticket 60398
+	 *
+	 * @dataProvider data_zip_file_validity
+	 *
+	 * @param string $file     The ZIP file to test.
+	 * @param bool   $expected Whether the ZIP file is expected to be valid.
+	 */
+	public function test_zip_file_validity( $file, $expected ) {
+		$zip_file = self::$test_data_dir . $file;
+
+		$expected_message = $expected ? 'valid' : 'invalid';
+		$this->assertSame( $expected, wp_zip_file_is_valid( $zip_file ), "Expected archive to be {$expected_message}." );
+	}
+
+	/**
+	 * Data provider.
+	 *
+	 * @return array[]
+	 */
+	public function data_zip_file_validity() {
+		return array(
+			'standard zip'           => array( 'archive.zip', true ),
+			'large zip'              => array( 'archive-large.zip', true ),
+			'commented zip'          => array( 'archive-comment.zip', true ),
+			'cp866 zip'              => array( 'archive-cp866.zip', true ),
+			'directory entry zip'    => array( 'archive-directory-entry.zip', true ),
+			'encrypted zip'          => array( 'archive-encrypted.zip', true ),
+			'flags-set zip'          => array( 'archive-flags-set.zip', true ),
+			'uncompressed zip'       => array( 'archive-uncompressed.zip', true ),
+			'crx zip'                => array( 'archive.crx', true ),
+			'macos generated zip'    => array( 'archive-macos.zip', true ),
+			'gnome generated zip'    => array( 'archive-gnome.zip', true ),
+			'ubuntu nautilus zip'    => array( 'archive-ubuntu-nautilus.zip', true ),
+
+			'invalid zip file'       => array( 'archive-invalid.zip', false ),
+			'invalid file extension' => array( 'archive-invalid-ext.md', false ),
+			'non-existent file'      => array( 'archive-non-existent.zip', false ),
+		);
+	}
+}
diff --git a/tests/filters.php b/tests/filters.php
index 04a5f9e915..6d512a19ac 100644
--- a/tests/filters.php
+++ b/tests/filters.php
@@ -118,37 +118,133 @@ class Tests_Filters extends WP_UnitTestCase {
 		$this->assertSame( array( $val ), array_pop( $argsvar2 ) );
 	}
 
-	public function test_filter_priority() {
-		$a         = new MockAction();
+	/**
+	 * @ticket 60193
+	 *
+	 * @dataProvider data_priority_callback_order_with_integers
+	 * @dataProvider data_priority_callback_order_with_unhappy_path_nonintegers
+	 *
+	 * @covers ::apply_filters
+	 *
+	 * @param array $priorities {
+	 *     Indexed array of the priorities for the MockAction callbacks.
+	 *
+	 *     @type mixed $0 Priority for 'action' callback.
+	 *     @type mixed $1 Priority for 'action2' callback.
+	 * }
+	 * @param array  $expected_call_order  An array of callback names in expected call order.
+	 * @param string $expected_deprecation Optional. Deprecation message. Default ''.
+	 */
+	public function test_priority_callback_order( $priorities, $expected_call_order, $expected_deprecation = '' ) {
+		$mock      = new MockAction();
 		$hook_name = __FUNCTION__;
-		$val       = __FUNCTION__ . '_val';
 
-		// Make two filters with different priorities.
-		add_filter( $hook_name, array( $a, 'filter' ), 10 );
-		add_filter( $hook_name, array( $a, 'filter2' ), 9 );
-		$this->assertSame( $val, apply_filters( $hook_name, $val ) );
+		if ( $expected_deprecation && PHP_VERSION_ID >= 80100 ) {
+			$this->expectDeprecation();
+			$this->expectDeprecationMessage( $expected_deprecation );
+		}
+
+		add_filter( $hook_name, array( $mock, 'filter' ), $priorities[0] );
+		add_filter( $hook_name, array( $mock, 'filter2' ), $priorities[1] );
+		apply_filters( $hook_name, __FUNCTION__ . '_val' );
+
+		$this->assertSame( 2, $mock->get_call_count(), 'The number of call counts does not match' );
 
-		// There should be two events, one per filter.
-		$this->assertSame( 2, $a->get_call_count() );
+		$actual_call_order = wp_list_pluck( $mock->get_events(), 'filter' );
+		$this->assertSame( $expected_call_order, $actual_call_order, 'The filter callback order does not match the expected order' );
+	}
 
-		$expected = array(
-			// 'filter2' is called first because it has priority 9.
-			array(
-				'filter'    => 'filter2',
-				'hook_name' => $hook_name,
-				'tag'       => $hook_name, // Back compat.
-				'args'      => array( $val ),
+	/**
+	 * Happy path data provider.
+	 *
+	 * @return array[]
+	 */
+	public function data_priority_callback_order_with_integers() {
+		return array(
+			'int DESC' => array(
+				'priorities'          => array( 10, 9 ),
+				'expected_call_order' => array( 'filter2', 'filter' ),
 			),
-			// 'filter' is called second.
-			array(
-				'filter'    => 'filter',
-				'hook_name' => $hook_name,
-				'tag'       => $hook_name, // Back compat.
-				'args'      => array( $val ),
+			'int ASC'  => array(
+				'priorities'          => array( 9, 10 ),
+				'expected_call_order' => array( 'filter', 'filter2' ),
 			),
 		);
+	}
 
-		$this->assertSame( $expected, $a->get_events() );
+	/**
+	 * Unhappy path data provider.
+	 *
+	 * @return array[]
+	 */
+	public function data_priority_callback_order_with_unhappy_path_nonintegers() {
+		return array(
+			// Numbers as strings and floats.
+			'int as string DESC'               => array(
+				'priorities'          => array( '10', '9' ),
+				'expected_call_order' => array( 'filter2', 'filter' ),
+			),
+			'int as string ASC'                => array(
+				'priorities'          => array( '9', '10' ),
+				'expected_call_order' => array( 'filter', 'filter2' ),
+			),
+			'float DESC'                       => array(
+				'priorities'           => array( 10.0, 9.5 ),
+				'expected_call_order'  => array( 'filter2', 'filter' ),
+				'expected_deprecation' => 'Implicit conversion from float 9.5 to int loses precision',
+			),
+			'float ASC'                        => array(
+				'priorities'           => array( 9.5, 10.0 ),
+				'expected_call_order'  => array( 'filter', 'filter2' ),
+				'expected_deprecation' => 'Implicit conversion from float 9.5 to int loses precision',
+			),
+			'float as string DESC'             => array(
+				'priorities'          => array( '10.0', '9.5' ),
+				'expected_call_order' => array( 'filter2', 'filter' ),
+			),
+			'float as string ASC'              => array(
+				'priorities'          => array( '9.5', '10.0' ),
+				'expected_call_order' => array( 'filter', 'filter2' ),
+			),
+
+			// Non-numeric.
+			'null'                             => array(
+				'priorities'          => array( null, null ),
+				'expected_call_order' => array( 'filter', 'filter2' ),
+			),
+			'bool DESC'                        => array(
+				'priorities'          => array( true, false ),
+				'expected_call_order' => array( 'filter2', 'filter' ),
+			),
+			'bool ASC'                         => array(
+				'priorities'          => array( false, true ),
+				'expected_call_order' => array( 'filter', 'filter2' ),
+			),
+			'non-numerical string DESC'        => array(
+				'priorities'          => array( 'test1', 'test2' ),
+				'expected_call_order' => array( 'filter', 'filter2' ),
+			),
+			'non-numerical string ASC'         => array(
+				'priorities'          => array( 'test1', 'test2' ),
+				'expected_call_order' => array( 'filter', 'filter2' ),
+			),
+			'int, non-numerical string DESC'   => array(
+				'priorities'          => array( 10, 'test' ),
+				'expected_call_order' => array( 'filter2', 'filter' ),
+			),
+			'int, non-numerical string ASC'    => array(
+				'priorities'          => array( 'test', 10 ),
+				'expected_call_order' => array( 'filter', 'filter2' ),
+			),
+			'float, non-numerical string DESC' => array(
+				'priorities'          => array( 10.0, 'test' ),
+				'expected_call_order' => array( 'filter2', 'filter' ),
+			),
+			'float, non-numerical string ASC'  => array(
+				'priorities'          => array( 'test', 10.0 ),
+				'expected_call_order' => array( 'filter', 'filter2' ),
+			),
+		);
 	}
 
 	/**
diff --git a/tests/fonts/font-face/wp-font-face-tests-dataset.php b/tests/fonts/font-face/wp-font-face-tests-dataset.php
index 00ae66e865..1432c8589f 100644
--- a/tests/fonts/font-face/wp-font-face-tests-dataset.php
+++ b/tests/fonts/font-face/wp-font-face-tests-dataset.php
@@ -92,7 +92,7 @@ CSS
 			,
 			),
 			'multiple woff2 format fonts'    => array(
-				'fonts'    => array(
+				'fonts'                  => array(
 					'DM Sans'       =>
 						array(
 							array(
@@ -184,7 +184,7 @@ CSS
 							),
 						),
 				),
-				'expected' => <<<CSS
+				'expected'               => <<<CSS
 @font-face{font-family:"DM Sans";font-style:normal;font-weight:400;font-display:fallback;src:url('https://example.org/assets/fonts/dm-sans/DMSans-Regular.woff2') format('woff2');font-stretch:normal;}
 @font-face{font-family:"DM Sans";font-style:italic;font-weight:400;font-display:fallback;src:url('https://example.org/assets/fonts/dm-sans/DMSans-Regular-Italic.woff2') format('woff2');font-stretch:normal;}
 @font-face{font-family:"DM Sans";font-style:normal;font-weight:700;font-display:fallback;src:url('https://example.org/assets/fonts/dm-sans/DMSans-Bold.woff2') format('woff2');font-stretch:normal;}
@@ -195,6 +195,49 @@ CSS
 @font-face{font-family:"IBM Plex Mono";font-style:normal;font-weight:700;font-display:block;src:url('https://example.org/assets/fonts/ibm-plex-mono/IBMPlexMono-Bold.woff2') format('woff2');font-stretch:normal;}
 CSS
 			,
+				'indexed array as input' => array(
+					'fonts'    => array(
+						array(
+							array(
+								'font-family'  => 'Piazzolla',
+								'src'          => array( 'https://example.org/fonts/piazzolla400.ttf' ),
+								'font-style'   => 'normal',
+								'font-weight'  => '400',
+								'font-stretch' => 'normal',
+							),
+							array(
+								'font-family'  => 'Piazzolla',
+								'src'          => array( 'https://example.org/fonts/piazzolla500.ttf' ),
+								'font-style'   => 'normal',
+								'font-weight'  => '400',
+								'font-stretch' => 'normal',
+							),
+						),
+						array(
+							array(
+								'font-family'  => 'Lobster',
+								'src'          => array( 'https://example.org/fonts/lobster400.ttf' ),
+								'font-style'   => 'normal',
+								'font-weight'  => '400',
+								'font-stretch' => 'normal',
+							),
+							array(
+								'font-family'  => 'Lobster',
+								'src'          => array( 'https://example.org/fonts/lobster500.ttf' ),
+								'font-style'   => 'normal',
+								'font-weight'  => '500',
+								'font-stretch' => 'normal',
+							),
+						),
+					),
+					'expected' => <<<CSS
+@font-face{font-family:Piazzolla;font-style:normal;font-weight:400;font-display:fallback;src:url('https://example.org/fonts/piazzolla400.ttf') format('truetype');font-stretch:normal;}
+@font-face{font-family:Piazzolla;font-style:normal;font-weight:400;font-display:fallback;src:url('https://example.org/fonts/piazzolla500.ttf') format('truetype');font-stretch:normal;}
+@font-face{font-family:Lobster;font-style:normal;font-weight:400;font-display:fallback;src:url('https://example.org/fonts/lobster400.ttf') format('truetype');font-stretch:normal;}
+@font-face{font-family:Lobster;font-style:normal;font-weight:500;font-display:fallback;src:url('https://example.org/fonts/lobster500.ttf') format('truetype');font-stretch:normal;}
+CSS
+					,
+				),
 			),
 		);
 	}
@@ -206,7 +249,7 @@ CSS
 			$uri  = get_stylesheet_directory_uri() . '/assets/fonts/';
 			$data = array(
 				'fonts'            => array(
-					'DM Sans'          => array(
+					array(
 						array(
 							'src'          => array( $uri . 'dm-sans/DMSans-Regular.woff2' ),
 							'font-family'  => 'DM Sans',
@@ -236,7 +279,7 @@ CSS
 							'font-weight'  => '700',
 						),
 					),
-					'Source Serif Pro' => array(
+					array(
 						array(
 							'src'          => array( $uri . 'source-serif-pro/SourceSerif4Variable-Roman.ttf.woff2' ),
 							'font-family'  => 'Source Serif Pro',
@@ -271,4 +314,93 @@ CSS
 
 		return $data;
 	}
+
+	public static function get_custom_font_families( $key = '' ) {
+		static $data = null;
+
+		$custom_theme_json_fonts = array(
+			array(
+				'fontFamily' => 'Piazzolla, serif',
+				'name'       => 'Piazzolla',
+				'slug'       => 'piazzolla',
+				'fontFace'   => array(
+					array(
+						'fontFamily' => 'Piazzolla',
+						'src'        => array( 'https://example.org/fonts/piazzolla400.ttf' ),
+						'fontStyle'  => 'normal',
+						'fontWeight' => '400',
+					),
+					array(
+						'fontFamily' => 'Piazzolla',
+						'src'        => array( 'https://example.org/fonts/piazzolla500.ttf' ),
+						'fontStyle'  => 'normal',
+						'fontWeight' => '400',
+					),
+				),
+			),
+			array(
+				'fontFamily' => 'Lobster, sans-serif',
+				'name'       => 'Lobster',
+				'slug'       => 'lobster',
+				'fontFace'   => array(
+					array(
+						'fontFamily' => 'Lobster',
+						'src'        => array( 'https://example.org/fonts/lobster400.ttf' ),
+						'fontStyle'  => 'normal',
+						'fontWeight' => '400',
+					),
+					array(
+						'fontFamily' => 'Lobster',
+						'src'        => array( 'https://example.org/fonts/lobster500.ttf' ),
+						'fontStyle'  => 'normal',
+						'fontWeight' => '500',
+					),
+				),
+			),
+		);
+
+		$expected_font_faces = array(
+			array(
+				array(
+					'src'         => array( 'https://example.org/fonts/piazzolla400.ttf' ),
+					'font-family' => 'Piazzolla',
+					'font-style'  => 'normal',
+					'font-weight' => '400',
+				),
+				array(
+					'src'         => array( 'https://example.org/fonts/piazzolla500.ttf' ),
+					'font-family' => 'Piazzolla',
+					'font-style'  => 'normal',
+					'font-weight' => '400',
+				),
+			),
+			array(
+				array(
+					'src'         => array( 'https://example.org/fonts/lobster400.ttf' ),
+					'font-family' => 'Lobster',
+					'font-style'  => 'normal',
+					'font-weight' => '400',
+				),
+				array(
+					'src'         => array( 'https://example.org/fonts/lobster500.ttf' ),
+					'font-family' => 'Lobster',
+					'font-style'  => 'normal',
+					'font-weight' => '500',
+				),
+			),
+		);
+
+		if ( null === $data ) {
+			$data = array(
+				'input'    => $custom_theme_json_fonts,
+				'expected' => $expected_font_faces,
+			);
+		}
+
+		if ( isset( $data[ $key ] ) ) {
+			return $data[ $key ];
+		}
+
+		return $data;
+	}
 }
diff --git a/tests/fonts/font-face/wpFontFaceResolver/getFontsFromThemeJson.php b/tests/fonts/font-face/wpFontFaceResolver/getFontsFromThemeJson.php
index 654601363f..1e48c5ae7d 100644
--- a/tests/fonts/font-face/wpFontFaceResolver/getFontsFromThemeJson.php
+++ b/tests/fonts/font-face/wpFontFaceResolver/getFontsFromThemeJson.php
@@ -37,20 +37,58 @@ class Tests_Fonts_WPFontFaceResolver_GetFontsFromThemeJson extends WP_Font_Face_
 		$this->assertSame( $expected, $actual );
 	}
 
+	/**
+	 * @ticket 60605
+	 */
+	public function test_should_return_all_fonts_from_all_theme_origins() {
+		switch_theme( static::FONTS_THEME );
+
+		$add_custom_fonts = static function ( $theme_json_data ) {
+			$data = $theme_json_data->get_data();
+			// Add font families to the custom origin of theme json.
+			$data['settings']['typography']['fontFamilies']['custom'] = self::get_custom_font_families( 'input' );
+			return new WP_Theme_JSON_Data( $data );
+		};
+
+		add_filter( 'wp_theme_json_data_theme', $add_custom_fonts );
+		$actual = WP_Font_Face_Resolver::get_fonts_from_theme_json();
+		remove_filter( 'wp_theme_json_data_theme', $add_custom_fonts );
+
+		$expected = array_merge(
+			$this->get_expected_fonts_for_fonts_block_theme( 'fonts' ),
+			$this->get_custom_font_families( 'expected' )
+		);
+
+		$this->assertSame( $expected, $actual, 'Both the fonts from the theme and the custom origin should be returned.' );
+	}
+
 	/**
 	 * @dataProvider data_should_replace_src_file_placeholder
 	 *
 	 * @param string $font_name  Font's name.
-	 * @param string $font_index Font's index in the $fonts array.
+	 * @param string $font_weight Font's weight.
+	 * @param string $font_style  Font's style.
 	 * @param string $expected   Expected src.
 	 */
-	public function test_should_replace_src_file_placeholder( $font_name, $font_index, $expected ) {
+	public function test_should_replace_src_file_placeholder( $font_name, $font_weight, $font_style, $expected ) {
 		switch_theme( static::FONTS_THEME );
 
 		$fonts = WP_Font_Face_Resolver::get_fonts_from_theme_json();
+		$fonts = array_merge( array(), ...array_map( 'array_values', $fonts ) );
+
+		$font = array_filter(
+			$fonts,
+			static function ( $font ) use ( $font_name, $font_weight, $font_style ) {
+				return $font['font-family'] === $font_name
+				&& $font['font-weight'] === $font_weight
+				&& $font['font-style'] === $font_style;
+			}
+		);
+
+		$font = reset( $font );
 
-		$actual   = $fonts[ $font_name ][ $font_index ]['src'][0];
 		$expected = get_stylesheet_directory_uri() . $expected;
+		$actual   = $font['src'][0];
 
 		$this->assertStringNotContainsString( 'file:./', $actual, 'Font src should not contain the "file:./" placeholder' );
 		$this->assertSame( $expected, $actual, 'Font src should be an URL to its file' );
@@ -65,34 +103,40 @@ class Tests_Fonts_WPFontFaceResolver_GetFontsFromThemeJson extends WP_Font_Face_
 		return array(
 			// Theme's theme.json.
 			'DM Sans: 400 normal'              => array(
-				'font_name'  => 'DM Sans',
-				'font_index' => 0,
-				'expected'   => '/assets/fonts/dm-sans/DMSans-Regular.woff2',
+				'font_name'   => 'DM Sans',
+				'font_weight' => '400',
+				'font_style'  => 'normal',
+				'expected'    => '/assets/fonts/dm-sans/DMSans-Regular.woff2',
 			),
 			'DM Sans: 400 italic'              => array(
-				'font_name'  => 'DM Sans',
-				'font_index' => 1,
-				'expected'   => '/assets/fonts/dm-sans/DMSans-Regular-Italic.woff2',
+				'font_name'   => 'DM Sans',
+				'font_weight' => '400',
+				'font_style'  => 'italic',
+				'expected'    => '/assets/fonts/dm-sans/DMSans-Regular-Italic.woff2',
 			),
 			'DM Sans: 700 normal'              => array(
-				'font_name'  => 'DM Sans',
-				'font_index' => 2,
-				'expected'   => '/assets/fonts/dm-sans/DMSans-Bold.woff2',
+				'font_name'   => 'DM Sans',
+				'font_weight' => '700',
+				'font_style'  => 'normal',
+				'expected'    => '/assets/fonts/dm-sans/DMSans-Bold.woff2',
 			),
 			'DM Sans: 700 italic'              => array(
-				'font_name'  => 'DM Sans',
-				'font_index' => 3,
-				'expected'   => '/assets/fonts/dm-sans/DMSans-Bold-Italic.woff2',
+				'font_name'   => 'DM Sans',
+				'font_weight' => '700',
+				'font_style'  => 'italic',
+				'expected'    => '/assets/fonts/dm-sans/DMSans-Bold-Italic.woff2',
 			),
 			'Source Serif Pro: 200-900 normal' => array(
-				'font_name'  => 'Source Serif Pro',
-				'font_index' => 0,
-				'expected'   => '/assets/fonts/source-serif-pro/SourceSerif4Variable-Roman.ttf.woff2',
+				'font_name'   => 'Source Serif Pro',
+				'font_weight' => '200 900',
+				'font_style'  => 'normal',
+				'expected'    => '/assets/fonts/source-serif-pro/SourceSerif4Variable-Roman.ttf.woff2',
 			),
 			'Source Serif Pro: 200-900 italic' => array(
-				'font_name'  => 'Source Serif Pro',
-				'font_index' => 1,
-				'expected'   => '/assets/fonts/source-serif-pro/SourceSerif4Variable-Italic.ttf.woff2',
+				'font_name'   => 'Source Serif Pro',
+				'font_weight' => '200 900',
+				'font_style'  => 'italic',
+				'expected'    => '/assets/fonts/source-serif-pro/SourceSerif4Variable-Italic.ttf.woff2',
 			),
 		);
 	}
@@ -118,7 +162,17 @@ class Tests_Fonts_WPFontFaceResolver_GetFontsFromThemeJson extends WP_Font_Face_
 		$fonts = WP_Font_Face_Resolver::get_fonts_from_theme_json();
 		remove_filter( 'wp_theme_json_data_theme', $replace_fonts );
 
-		$this->assertArrayHasKey( $expected_name, $fonts );
+		// flatten the array to make it easier to test.
+		$fonts = array_merge( array(), ...array_map( 'array_values', $fonts ) );
+
+		$fonts_found = array_filter(
+			$fonts,
+			function ( $font ) use ( $expected_name ) {
+				return $font['font-family'] === $expected_name;
+			}
+		);
+
+		$this->assertNotEmpty( $fonts_found, 'Expected font-family name not found in the array' );
 	}
 
 	/**
diff --git a/tests/fonts/font-library/fontLibraryHooks.php b/tests/fonts/font-library/fontLibraryHooks.php
new file mode 100644
index 0000000000..083c12202a
--- /dev/null
+++ b/tests/fonts/font-library/fontLibraryHooks.php
@@ -0,0 +1,87 @@
+<?php
+/**
+ * Test deleting wp_font_family and wp_font_face post types.
+ *
+ * @package WordPress
+ * @subpackage Font Library
+ *
+ * @group fonts
+ * @group font-library
+ */
+class Tests_Fonts_FontLibraryHooks extends WP_UnitTestCase {
+
+	public function test_deleting_font_family_deletes_child_font_faces() {
+		$font_family_id       = self::factory()->post->create(
+			array(
+				'post_type' => 'wp_font_family',
+			)
+		);
+		$font_face_id         = self::factory()->post->create(
+			array(
+				'post_type'   => 'wp_font_face',
+				'post_parent' => $font_family_id,
+			)
+		);
+		$other_font_family_id = self::factory()->post->create(
+			array(
+				'post_type' => 'wp_font_family',
+			)
+		);
+		$other_font_face_id   = self::factory()->post->create(
+			array(
+				'post_type'   => 'wp_font_face',
+				'post_parent' => $other_font_family_id,
+			)
+		);
+
+		wp_delete_post( $font_family_id, true );
+
+		$this->assertNull( get_post( $font_face_id ), 'Font face post should also have been deleted.' );
+		$this->assertNotNull( get_post( $other_font_face_id ), 'The other post should exist.' );
+	}
+
+	public function test_deleting_font_faces_deletes_associated_font_files() {
+		list( $font_face_id, $font_path ) = $this->create_font_face_with_file( 'OpenSans-Regular.woff2' );
+		list( , $other_font_path )        = $this->create_font_face_with_file( 'OpenSans-Regular.ttf' );
+
+		wp_delete_post( $font_face_id, true );
+
+		$this->assertFalse( file_exists( $font_path ), 'The font file should have been deleted when the post was deleted.' );
+		$this->assertTrue( file_exists( $other_font_path ), 'The other font file should exist.' );
+	}
+
+	protected function create_font_face_with_file( $filename ) {
+		$font_face_id = self::factory()->post->create(
+			array(
+				'post_type' => 'wp_font_face',
+			)
+		);
+
+		$font_file = $this->upload_font_file( $filename );
+
+		// Make sure the font file uploaded successfully.
+		$this->assertFalse( $font_file['error'] );
+
+		$font_path     = $font_file['file'];
+		$font_filename = basename( $font_path );
+		add_post_meta( $font_face_id, '_wp_font_face_file', $font_filename );
+
+		return array( $font_face_id, $font_path );
+	}
+
+	protected function upload_font_file( $font_filename ) {
+		$font_file_path = DIR_TESTDATA . '/fonts/' . $font_filename;
+
+		add_filter( 'upload_mimes', array( 'WP_Font_Utils', 'get_allowed_font_mime_types' ) );
+		add_filter( 'upload_dir', 'wp_get_font_dir' );
+		$font_file = wp_upload_bits(
+			$font_filename,
+			null,
+			file_get_contents( $font_file_path )
+		);
+		remove_filter( 'upload_dir', 'wp_get_font_dir' );
+		remove_filter( 'upload_mimes', array( 'WP_Font_Utils', 'get_allowed_font_mime_types' ) );
+
+		return $font_file;
+	}
+}
diff --git a/tests/fonts/font-library/wpFontCollection/__construct.php b/tests/fonts/font-library/wpFontCollection/__construct.php
new file mode 100644
index 0000000000..a0693ce341
--- /dev/null
+++ b/tests/fonts/font-library/wpFontCollection/__construct.php
@@ -0,0 +1,26 @@
+<?php
+/**
+ * Test WP_Font_Collection constructor.
+ *
+ * @package WordPress
+ * @subpackage Font Library
+ *
+ * @group fonts
+ * @group font-library
+ *
+ * @covers WP_Font_Collection::__construct
+ */
+class Tests_Fonts_WpFontCollection_Construct extends WP_UnitTestCase {
+
+	public function test_should_do_it_wrong_with_invalid_slug() {
+		$this->setExpectedIncorrectUsage( 'WP_Font_Collection::__construct' );
+		$mock_collection_data = array(
+			'name'          => 'Test Collection',
+			'font_families' => array( 'mock ' ),
+		);
+
+		$collection = new WP_Font_Collection( 'slug with spaces', $mock_collection_data );
+
+		$this->assertSame( 'slug-with-spaces', $collection->slug, 'Slug is not sanitized.' );
+	}
+}
diff --git a/tests/fonts/font-library/wpFontCollection/getData.php b/tests/fonts/font-library/wpFontCollection/getData.php
new file mode 100644
index 0000000000..97ea664d48
--- /dev/null
+++ b/tests/fonts/font-library/wpFontCollection/getData.php
@@ -0,0 +1,400 @@
+<?php
+/**
+ * Test WP_Font_Collection::get_data.
+ *
+ * @package WordPress
+ * @subpackage Font Library
+ *
+ * @group fonts
+ * @group font-library
+ *
+ * @covers WP_Font_Collection::get_data
+ */
+class Tests_Fonts_WpFontCollection_GetData extends WP_UnitTestCase {
+
+	private static $mock_collection_data;
+
+	/**
+	 * @dataProvider data_create_font_collection
+	 *
+	 * @param string $slug          Font collection slug.
+	 * @param array  $config        Font collection config.
+	 * @param array  $expected_data Expected collection data.
+	 */
+	public function test_should_get_data_from_config_array( $slug, $config, $expected_data ) {
+		$collection = new WP_Font_Collection( $slug, $config );
+		$data       = $collection->get_data();
+
+		$this->assertSame( $slug, $collection->slug, 'The slug should match.' );
+		$this->assertSame( $expected_data, $data, 'The collection data should match.' );
+	}
+
+	/**
+	 * @dataProvider data_create_font_collection
+	 *
+	 * @param string $slug          Font collection slug.
+	 * @param array  $config        Font collection config.
+	 * @param array  $expected_data Expected collection data.
+	 */
+	public function test_should_get_data_from_json_file( $slug, $config, $expected_data ) {
+		$mock_file = wp_tempnam( 'my-collection-data-' );
+		file_put_contents( $mock_file, wp_json_encode( $config ) );
+
+		$collection = new WP_Font_Collection(
+			$slug,
+			array_merge(
+				$config,
+				array( 'font_families' => $mock_file )
+			)
+		);
+		$data       = $collection->get_data();
+
+		$this->assertSame( $slug, $collection->slug, 'The slug should match.' );
+		$this->assertEqualSetsWithIndex( $expected_data, $data, 'The collection data should match.' );
+	}
+
+	/**
+	 * @dataProvider data_create_font_collection
+	 *
+	 * @param string $slug          Font collection slug.
+	 * @param array  $config        Font collection config.
+	 * @param array  $expected_data Expected collection data.
+	 */
+	public function test_should_get_data_from_json_url( $slug, $config, $expected_data ) {
+		add_filter( 'pre_http_request', array( $this, 'mock_request' ), 10, 3 );
+
+		self::$mock_collection_data = $config;
+		$collection                 = new WP_Font_Collection(
+			$slug,
+			array_merge(
+				$config,
+				array(
+					'font_families' => 'https://example.com/fonts/mock-font-collection.json',
+				)
+			)
+		);
+		$data                       = $collection->get_data();
+
+		remove_filter( 'pre_http_request', array( $this, 'mock_request' ) );
+
+		$this->assertSame( $slug, $collection->slug, 'The slug should match.' );
+		$this->assertEqualSetsWithIndex( $expected_data, $data, 'The collection data should match.' );
+	}
+
+	/**
+	 * Data provider.
+	 *
+	 * @return array
+	 */
+	public function data_create_font_collection() {
+		return array(
+			'font collection with required data' => array(
+				'slug'          => 'my-collection',
+				'config'        => array(
+					'name'          => 'My Collection',
+					'font_families' => array( array() ),
+				),
+				'expected_data' => array(
+					'description'   => '',
+					'categories'    => array(),
+					'name'          => 'My Collection',
+					'font_families' => array( array() ),
+				),
+			),
+
+			'font collection with all data'      => array(
+				'slug'          => 'my-collection',
+				'config'        => array(
+					'name'          => 'My Collection',
+					'description'   => 'My collection description',
+					'font_families' => array( array() ),
+					'categories'    => array(),
+				),
+				'expected_data' => array(
+					'description'   => 'My collection description',
+					'categories'    => array(),
+					'name'          => 'My Collection',
+					'font_families' => array( array() ),
+				),
+			),
+
+			'font collection with risky data'    => array(
+				'slug'          => 'my-collection',
+				'config'        => array(
+					'name'              => 'My Collection<script>alert("xss")</script>',
+					'description'       => 'My collection description<script>alert("xss")</script>',
+					'font_families'     => array(
+						array(
+							'font_family_settings' => array(
+								'fontFamily'        => 'Open Sans, sans-serif<script>alert("xss")</script>',
+								'slug'              => 'open-sans',
+								'name'              => 'Open Sans<script>alert("xss")</script>',
+								'fontFace'          => array(
+									array(
+										'fontFamily' => 'Open Sans',
+										'fontStyle'  => 'normal',
+										'fontWeight' => '400',
+										'src'        => 'https://example.com/src-as-string.ttf?a=<script>alert("xss")</script>',
+									),
+									array(
+										'fontFamily' => 'Open Sans',
+										'fontStyle'  => 'normal',
+										'fontWeight' => '400',
+										'src'        => array(
+											'https://example.com/src-as-array.woff2?a=<script>alert("xss")</script>',
+											'https://example.com/src-as-array.ttf',
+										),
+									),
+								),
+								'unwanted_property' => 'potentially evil value',
+							),
+							'categories'           => array( 'sans-serif<script>alert("xss")</script>' ),
+						),
+					),
+					'categories'        => array(
+						array(
+							'name'              => 'Mock col<script>alert("xss")</script>',
+							'slug'              => 'mock-col<script>alert("xss")</script>',
+							'unwanted_property' => 'potentially evil value',
+						),
+					),
+					'unwanted_property' => 'potentially evil value',
+				),
+				'expected_data' => array(
+					'description'   => 'My collection description',
+					'categories'    => array(
+						array(
+							'name' => 'Mock col',
+							'slug' => 'mock-colalertxss',
+						),
+					),
+					'name'          => 'My Collection',
+					'font_families' => array(
+						array(
+							'font_family_settings' => array(
+								'fontFamily' => '"Open Sans", sans-serif',
+								'slug'       => 'open-sans',
+								'name'       => 'Open Sans',
+								'fontFace'   => array(
+									array(
+										'fontFamily' => 'Open Sans',
+										'fontStyle'  => 'normal',
+										'fontWeight' => '400',
+										'src'        => 'https://example.com/src-as-string.ttf?a=',
+									),
+									array(
+										'fontFamily' => 'Open Sans',
+										'fontStyle'  => 'normal',
+										'fontWeight' => '400',
+										'src'        => array(
+											'https://example.com/src-as-array.woff2?a=',
+											'https://example.com/src-as-array.ttf',
+										),
+									),
+								),
+							),
+							'categories'           => array( 'sans-serifalertxss' ),
+						),
+					),
+				),
+			),
+		);
+	}
+
+	/**
+	 * @dataProvider data_should_error_when_missing_properties
+	 *
+	 * @param array $config Font collection config.
+	 */
+	public function test_should_error_when_missing_properties( $config ) {
+		$this->setExpectedIncorrectUsage( 'WP_Font_Collection::sanitize_and_validate_data' );
+
+		$collection = new WP_Font_Collection( 'my-collection', $config );
+		$data       = $collection->get_data();
+
+		$this->assertWPError( $data, 'Error is not returned when property is missing or invalid.' );
+		$this->assertSame(
+			'font_collection_missing_property',
+			$data->get_error_code(),
+			'Incorrect error code when property is missing or invalid.'
+		);
+	}
+
+	/**
+	 * Data provider.
+	 *
+	 * @return array
+	 */
+	public function data_should_error_when_missing_properties() {
+		return array(
+			'missing name'          => array(
+				'config' => array(
+					'font_families' => array( 'mock' ),
+				),
+			),
+			'empty name'            => array(
+				'config' => array(
+					'name'          => '',
+					'font_families' => array( 'mock' ),
+				),
+			),
+			'missing font_families' => array(
+				'config' => array(
+					'name' => 'My Collection',
+				),
+			),
+			'empty font_families'   => array(
+				'config' => array(
+					'name'          => 'My Collection',
+					'font_families' => array(),
+				),
+			),
+		);
+	}
+
+	public function test_should_error_with_invalid_json_file_path() {
+		$this->setExpectedIncorrectUsage( 'WP_Font_Collection::load_from_json' );
+
+		$collection = new WP_Font_Collection(
+			'my-collection',
+			array(
+				'name'          => 'My collection',
+				'font_families' => 'non-existing.json',
+			)
+		);
+		$data       = $collection->get_data();
+
+		$this->assertWPError( $data, 'Error is not returned when invalid file path is provided.' );
+		$this->assertSame(
+			'font_collection_json_missing',
+			$data->get_error_code(),
+			'Incorrect error code when invalid file path is provided.'
+		);
+	}
+
+	public function test_should_error_with_invalid_json_from_file() {
+		$mock_file = wp_tempnam( 'my-collection-data-' );
+		file_put_contents( $mock_file, 'invalid-json' );
+
+		$collection = new WP_Font_Collection(
+			'my-collection',
+			array(
+				'name'          => 'Invalid collection',
+				'font_families' => $mock_file,
+			)
+		);
+
+		// phpcs:ignore WordPress.PHP.NoSilencedErrors.Discouraged -- Testing error response returned by `load_from_json`, not the underlying error from `wp_json_file_decode`.
+		$data = @$collection->get_data();
+
+		$this->assertWPError( $data, 'Error is not returned with invalid json file contents.' );
+		$this->assertSame(
+			'font_collection_decode_error',
+			$data->get_error_code(),
+			'Incorrect error code with invalid json file contents.'
+		);
+	}
+
+	public function test_should_error_with_invalid_url() {
+		$this->setExpectedIncorrectUsage( 'WP_Font_Collection::load_from_json' );
+
+		$collection = new WP_Font_Collection(
+			'my-collection',
+			array(
+				'name'          => 'Invalid collection',
+				'font_families' => 'not-a-url',
+			)
+		);
+		$data       = $collection->get_data();
+
+		$this->assertWPError( $data, 'Error is not returned when invalid url is provided.' );
+		$this->assertSame(
+			'font_collection_json_missing',
+			$data->get_error_code(),
+			'Incorrect error code when invalid url is provided.'
+		);
+	}
+
+	public function test_should_error_with_unsuccessful_response_status() {
+		add_filter( 'pre_http_request', array( $this, 'mock_request_unsuccessful_response' ), 10, 3 );
+
+		$collection = new WP_Font_Collection(
+			'my-collection',
+			array(
+				'name'          => 'Missing collection',
+				'font_families' => 'https://example.com/fonts/missing-collection.json',
+			)
+		);
+		$data       = $collection->get_data();
+
+		remove_filter( 'pre_http_request', array( $this, 'mock_request_unsuccessful_response' ) );
+
+		$this->assertWPError( $data, 'Error is not returned when response is unsuccessful.' );
+		$this->assertSame(
+			'font_collection_request_error',
+			$data->get_error_code(),
+			'Incorrect error code when response is unsuccessful.'
+		);
+	}
+
+	public function test_should_error_with_invalid_json_from_url() {
+		add_filter( 'pre_http_request', array( $this, 'mock_request_invalid_json' ), 10, 3 );
+
+		$collection = new WP_Font_Collection(
+			'my-collection',
+			array(
+				'name'          => 'Invalid collection',
+				'font_families' => 'https://example.com/fonts/invalid-collection.json',
+			)
+		);
+		$data       = $collection->get_data();
+
+		remove_filter( 'pre_http_request', array( $this, 'mock_request_invalid_json' ) );
+
+		$this->assertWPError( $data, 'Error is not returned when response is invalid json.' );
+		$this->assertSame(
+			'font_collection_decode_error',
+			$data->get_error_code(),
+			'Incorrect error code when response is invalid json.'
+		);
+	}
+
+	public function mock_request( $preempt, $args, $url ) {
+		if ( 'https://example.com/fonts/mock-font-collection.json' !== $url ) {
+			return false;
+		}
+
+		return array(
+			'body'     => wp_json_encode( self::$mock_collection_data ),
+			'response' => array(
+				'code' => 200,
+			),
+		);
+	}
+
+	public function mock_request_unsuccessful_response( $preempt, $args, $url ) {
+		if ( 'https://example.com/fonts/missing-collection.json' !== $url ) {
+			return false;
+		}
+
+		return array(
+			'body'     => '',
+			'response' => array(
+				'code' => 404,
+			),
+		);
+	}
+
+	public function mock_request_invalid_json( $preempt, $args, $url ) {
+		if ( 'https://example.com/fonts/invalid-collection.json' !== $url ) {
+			return false;
+		}
+
+		return array(
+			'body'     => 'invalid',
+			'response' => array(
+				'code' => 200,
+			),
+		);
+	}
+}
diff --git a/tests/fonts/font-library/wpFontLibrary/base.php b/tests/fonts/font-library/wpFontLibrary/base.php
new file mode 100644
index 0000000000..135329e5ad
--- /dev/null
+++ b/tests/fonts/font-library/wpFontLibrary/base.php
@@ -0,0 +1,25 @@
+<?php
+/**
+ * Test Case for WP_Font_Library tests.
+ *
+ * @package WordPress
+ * @subpackage Font Library
+ */
+abstract class WP_Font_Library_UnitTestCase extends WP_UnitTestCase {
+	public function reset_font_collections() {
+		$collections = WP_Font_Library::get_instance()->get_font_collections();
+		foreach ( $collections as $slug => $collection ) {
+			WP_Font_Library::get_instance()->unregister_font_collection( $slug );
+		}
+	}
+
+	public function set_up() {
+		parent::set_up();
+		$this->reset_font_collections();
+	}
+
+	public function tear_down() {
+		parent::tear_down();
+		$this->reset_font_collections();
+	}
+}
diff --git a/tests/fonts/font-library/wpFontLibrary/getFontCollection.php b/tests/fonts/font-library/wpFontLibrary/getFontCollection.php
new file mode 100644
index 0000000000..e01cc2c1a1
--- /dev/null
+++ b/tests/fonts/font-library/wpFontLibrary/getFontCollection.php
@@ -0,0 +1,30 @@
+<?php
+/**
+ * Test WP_Font_Library::get_font_collections().
+ *
+ * @package WordPress
+ * @subpackage Font Library
+ *
+ * @group fonts
+ * @group font-library
+ *
+ * @covers WP_Font_Library::get_font_collection
+ */
+class Tests_Fonts_WpFontLibrary_GetFontCollection extends WP_Font_Library_UnitTestCase {
+
+	public function test_should_get_font_collection() {
+		$mock_collection_data = array(
+			'name'          => 'Test Collection',
+			'font_families' => array( 'mock' ),
+		);
+
+		wp_register_font_collection( 'my-font-collection', $mock_collection_data );
+		$font_collection = WP_Font_Library::get_instance()->get_font_collection( 'my-font-collection' );
+		$this->assertInstanceOf( 'WP_Font_Collection', $font_collection );
+	}
+
+	public function test_should_get_no_font_collection_if_the_slug_is_not_registered() {
+		$font_collection = WP_Font_Library::get_instance()->get_font_collection( 'not-registered-font-collection' );
+		$this->assertNull( $font_collection );
+	}
+}
diff --git a/tests/fonts/font-library/wpFontLibrary/getFontCollections.php b/tests/fonts/font-library/wpFontLibrary/getFontCollections.php
new file mode 100644
index 0000000000..f5ca6389b8
--- /dev/null
+++ b/tests/fonts/font-library/wpFontLibrary/getFontCollections.php
@@ -0,0 +1,34 @@
+<?php
+/**
+ * Test WP_Font_Library::get_font_collections().
+ *
+ * @package WordPress
+ * @subpackage Font Library
+ *
+ * @group fonts
+ * @group font-library
+ *
+ * @covers WP_Font_Library::get_font_collections
+ */
+class Tests_Fonts_WpFontLibrary_GetFontCollections extends WP_Font_Library_UnitTestCase {
+	public function test_should_get_an_empty_list() {
+		$font_collections = WP_Font_Library::get_instance()->get_font_collections();
+		$this->assertEmpty( $font_collections, 'Should return an empty array.' );
+	}
+
+	public function test_should_get_mock_font_collection() {
+		$my_font_collection_config = array(
+			'name'          => 'My Font Collection',
+			'description'   => 'Demo about how to a font collection to your WordPress Font Library.',
+			'font_families' => array( 'mock' ),
+		);
+
+		WP_Font_Library::get_instance()->register_font_collection( 'my-font-collection', $my_font_collection_config );
+
+		$font_collections = WP_Font_Library::get_instance()->get_font_collections();
+		$this->assertNotEmpty( $font_collections, 'Should return an array of font collections.' );
+		$this->assertCount( 1, $font_collections, 'Should return an array with one font collection.' );
+		$this->assertArrayHasKey( 'my-font-collection', $font_collections, 'The array should have the key of the registered font collection id.' );
+		$this->assertInstanceOf( 'WP_Font_Collection', $font_collections['my-font-collection'], 'The value of the array $font_collections[id] should be an instance of WP_Font_Collection class.' );
+	}
+}
diff --git a/tests/fonts/font-library/wpFontLibrary/registerFontCollection.php b/tests/fonts/font-library/wpFontLibrary/registerFontCollection.php
new file mode 100644
index 0000000000..d3b0f126e2
--- /dev/null
+++ b/tests/fonts/font-library/wpFontLibrary/registerFontCollection.php
@@ -0,0 +1,40 @@
+<?php
+/**
+ * Test WP_Font_Library::register_font_collection().
+ *
+ * @package WordPress
+ * @subpackage Font Library
+ *
+ * @group fonts
+ * @group font-library
+ *
+ * @covers WP_Font_Library::register_font_collection
+ */
+class Tests_Fonts_WpFontLibrary_RegisterFontCollection extends WP_Font_Library_UnitTestCase {
+	public function test_should_register_font_collection() {
+		$config = array(
+			'name'          => 'My Collection',
+			'font_families' => array( 'mock' ),
+		);
+
+		$collection = WP_Font_Library::get_instance()->register_font_collection( 'my-collection', $config );
+		$this->assertInstanceOf( 'WP_Font_Collection', $collection );
+	}
+
+	public function test_should_return_error_if_slug_is_repeated() {
+		$mock_collection_data = array(
+			'name'          => 'Test Collection',
+			'font_families' => array( 'mock' ),
+		);
+
+		// Register first collection.
+		$collection1 = WP_Font_Library::get_instance()->register_font_collection( 'my-collection-1', $mock_collection_data );
+		$this->assertInstanceOf( 'WP_Font_Collection', $collection1, 'A collection should be registered.' );
+
+		// Expects a _doing_it_wrong notice.
+		$this->setExpectedIncorrectUsage( 'WP_Font_Library::register_font_collection' );
+
+		// Try to register a second collection with same slug.
+		WP_Font_Library::get_instance()->register_font_collection( 'my-collection-1', $mock_collection_data );
+	}
+}
diff --git a/tests/fonts/font-library/wpFontLibrary/unregisterFontCollection.php b/tests/fonts/font-library/wpFontLibrary/unregisterFontCollection.php
new file mode 100644
index 0000000000..ddb0fa91c1
--- /dev/null
+++ b/tests/fonts/font-library/wpFontLibrary/unregisterFontCollection.php
@@ -0,0 +1,46 @@
+<?php
+/**
+ * Test WP_Font_Library::unregister_font_collection().
+ *
+ * @package WordPress
+ * @subpackage Font Library
+ *
+ * @group fonts
+ * @group font-library
+ *
+ * @covers WP_Font_Library::unregister_font_collection
+ */
+class Tests_Fonts_WpFontLibrary_UnregisterFontCollection extends WP_Font_Library_UnitTestCase {
+
+	public function test_should_unregister_font_collection() {
+		$mock_collection_data = array(
+			'name'          => 'Test Collection',
+			'font_families' => array( 'mock' ),
+		);
+
+		// Registers two mock font collections.
+		WP_Font_Library::get_instance()->register_font_collection( 'mock-font-collection-1', $mock_collection_data );
+		WP_Font_Library::get_instance()->register_font_collection( 'mock-font-collection-2', $mock_collection_data );
+
+		// Unregister mock font collection.
+		WP_Font_Library::get_instance()->unregister_font_collection( 'mock-font-collection-1' );
+		$collections = WP_Font_Library::get_instance()->get_font_collections();
+		$this->assertArrayNotHasKey( 'mock-font-collection-1', $collections, 'Font collection was not unregistered.' );
+		$this->assertArrayHasKey( 'mock-font-collection-2', $collections, 'Font collection was unregistered by mistake.' );
+
+		// Unregisters remaining mock font collection.
+		WP_Font_Library::get_instance()->unregister_font_collection( 'mock-font-collection-2' );
+		$collections = WP_Font_Library::get_instance()->get_font_collections();
+		$this->assertArrayNotHasKey( 'mock-font-collection-2', $collections, 'Mock font collection was not unregistered.' );
+
+		// Checks that all font collections were unregistered.
+		$this->assertEmpty( $collections, 'Font collections were not unregistered.' );
+	}
+
+	public function unregister_non_existing_collection() {
+		// Unregisters non-existing font collection.
+		WP_Font_Library::get_instance()->unregister_font_collection( 'non-existing-collection' );
+		$collections = WP_Font_Library::get_instance()->get_font_collections();
+		$this->assertEmpty( $collections, 'No collections should be registered.' );
+	}
+}
diff --git a/tests/fonts/font-library/wpFontUtils/getFontFaceSlug.php b/tests/fonts/font-library/wpFontUtils/getFontFaceSlug.php
new file mode 100644
index 0000000000..de0b02e631
--- /dev/null
+++ b/tests/fonts/font-library/wpFontUtils/getFontFaceSlug.php
@@ -0,0 +1,92 @@
+<?php
+/**
+ * Test WP_Font_Utils::get_font_face_slug().
+ *
+ * @package WordPress
+ * @subpackage Font Library
+ *
+ * @group fonts
+ * @group font-library
+ *
+ * @covers WP_Font_Utils::get_font_face_slug
+ */
+class Tests_Fonts_WpFontUtils_GetFontFaceSlug extends WP_UnitTestCase {
+	/**
+	 * @dataProvider data_get_font_face_slug_normalizes_values
+	 *
+	 * @param string[] $settings      Settings to test.
+	 * @param string   $expected_slug Expected slug results.
+	 */
+	public function test_get_font_face_slug_normalizes_values( $settings, $expected_slug ) {
+		$slug = WP_Font_Utils::get_font_face_slug( $settings );
+
+		$this->assertSame( $expected_slug, $slug );
+	}
+
+	/**
+	 * Data provider.
+	 *
+	 * @return array
+	 */
+	public function data_get_font_face_slug_normalizes_values() {
+		return array(
+			'Sets defaults'                           => array(
+				'settings'      => array(
+					'fontFamily' => 'Open Sans',
+				),
+				'expected_slug' => 'open sans;normal;400;100%;U+0-10FFFF',
+			),
+			'Converts normal weight to 400'           => array(
+				'settings'      => array(
+					'fontFamily' => 'Open Sans',
+					'fontWeight' => 'normal',
+				),
+				'expected_slug' => 'open sans;normal;400;100%;U+0-10FFFF',
+			),
+			'Converts bold weight to 700'             => array(
+				'settings'      => array(
+					'fontFamily' => 'Open Sans',
+					'fontWeight' => 'bold',
+				),
+				'expected_slug' => 'open sans;normal;700;100%;U+0-10FFFF',
+			),
+			'Converts normal font-stretch to 100%'    => array(
+				'settings'      => array(
+					'fontFamily'  => 'Open Sans',
+					'fontStretch' => 'normal',
+				),
+				'expected_slug' => 'open sans;normal;400;100%;U+0-10FFFF',
+			),
+			'Removes double quotes from fontFamilies' => array(
+				'settings'      => array(
+					'fontFamily' => '"Open Sans"',
+				),
+				'expected_slug' => 'open sans;normal;400;100%;U+0-10FFFF',
+			),
+			'Removes single quotes from fontFamilies' => array(
+				'settings'      => array(
+					'fontFamily' => "'Open Sans'",
+				),
+				'expected_slug' => 'open sans;normal;400;100%;U+0-10FFFF',
+			),
+			'Removes spaces between comma separated font families' => array(
+				'settings'      => array(
+					'fontFamily' => 'Open Sans, serif',
+				),
+				'expected_slug' => 'open sans,serif;normal;400;100%;U+0-10FFFF',
+			),
+			'Removes tabs between comma separated font families' => array(
+				'settings'      => array(
+					'fontFamily' => "Open Sans,\tserif",
+				),
+				'expected_slug' => 'open sans,serif;normal;400;100%;U+0-10FFFF',
+			),
+			'Removes new lines between comma separated font families' => array(
+				'settings'      => array(
+					'fontFamily' => "Open Sans,\nserif",
+				),
+				'expected_slug' => 'open sans,serif;normal;400;100%;U+0-10FFFF',
+			),
+		);
+	}
+}
diff --git a/tests/fonts/font-library/wpFontUtils/sanitizeFontFamily.php b/tests/fonts/font-library/wpFontUtils/sanitizeFontFamily.php
new file mode 100644
index 0000000000..ff6b083eca
--- /dev/null
+++ b/tests/fonts/font-library/wpFontUtils/sanitizeFontFamily.php
@@ -0,0 +1,63 @@
+<?php
+/**
+ * Test WP_Font_Utils::sanitize_font_family().
+ *
+ * @package WordPress
+ * @subpackage Font Library
+ *
+ * @group fonts
+ * @group font-library
+ *
+ * @covers WP_Font_Utils::sanitize_font_family
+ */
+class Tests_Fonts_WpFontUtils_SanitizeFontFamily extends WP_UnitTestCase {
+
+	/**
+	 * @dataProvider data_should_sanitize_font_family
+	 *
+	 * @param string $font_family Font family to test.
+	 * @param string $expected    Expected family.
+	 */
+	public function test_should_sanitize_font_family( $font_family, $expected ) {
+		$this->assertSame(
+			$expected,
+			WP_Font_Utils::sanitize_font_family(
+				$font_family
+			)
+		);
+	}
+
+	/**
+	 * Data provider.
+	 *
+	 * @return array
+	 */
+	public function data_should_sanitize_font_family() {
+		return array(
+			'data_families_with_spaces_and_numbers' => array(
+				'font_family' => 'Arial, Rock 3D , Open Sans,serif',
+				'expected'    => 'Arial, "Rock 3D", "Open Sans", serif',
+			),
+			'data_single_font_family'               => array(
+				'font_family' => 'Rock 3D',
+				'expected'    => '"Rock 3D"',
+			),
+			'data_many_spaces_and_existing_quotes'  => array(
+				'font_family' => 'Rock 3D serif, serif,sans-serif, "Open Sans"',
+				'expected'    => '"Rock 3D serif", serif, sans-serif, "Open Sans"',
+			),
+			'data_empty_family'                     => array(
+				'font_family' => ' ',
+				'expected'    => '',
+			),
+			'data_font_family_with_whitespace_tags_new_lines' => array(
+				'font_family' => "   Rock      3D</style><script>alert('XSS');</script>\n    ",
+				'expected'    => '"Rock 3D"',
+			),
+			'data_font_family_with_generic_names'   => array(
+				'font_family' => 'generic(kai), generic(font[name]), generic(fangsong), Rock 3D',
+				'expected'    => 'generic(kai), "generic(font[name])", generic(fangsong), "Rock 3D"',
+			),
+		);
+	}
+}
diff --git a/tests/fonts/font-library/wpFontUtils/sanitizeFromSchema.php b/tests/fonts/font-library/wpFontUtils/sanitizeFromSchema.php
new file mode 100644
index 0000000000..88983fe15a
--- /dev/null
+++ b/tests/fonts/font-library/wpFontUtils/sanitizeFromSchema.php
@@ -0,0 +1,310 @@
+<?php
+/**
+ * Test WP_Font_Utils::sanitize_from_schema().
+ *
+ * @package WordPress
+ * @subpackage Font Library
+ *
+ * @group fonts
+ * @group font-library
+ *
+ * @covers WP_Font_Utils::sanitize_from_schema
+ */
+class Tests_Fonts_WpFontUtils_SanitizeFromSchema extends WP_UnitTestCase {
+	/**
+	 * @dataProvider data_sanitize_from_schema
+	 *
+	 * @param array $data     Data to sanitize.
+	 * @param array $schema   Schema to use for sanitization.
+	 * @param array $expected Expected result.
+	 */
+	public function test_sanitize_from_schema( $data, $schema, $expected ) {
+		$result = WP_Font_Utils::sanitize_from_schema( $data, $schema );
+
+		$this->assertSame( $result, $expected );
+	}
+
+	public function data_sanitize_from_schema() {
+		return array(
+			'One level associative array'  => array(
+				'data'     => array(
+					'slug'       => 'open      -       sans</style><script>alert("xss")</script>',
+					'fontFamily' => 'Open Sans, sans-serif</style><script>alert("xss")</script>',
+					'src'        => 'https://wordpress.org/example.json</style><script>alert("xss")</script>',
+				),
+				'schema'   => array(
+					'slug'       => 'sanitize_title',
+					'fontFamily' => 'sanitize_text_field',
+					'src'        => 'sanitize_url',
+				),
+				'expected' => array(
+					'slug'       => 'open-sansalertxss',
+					'fontFamily' => 'Open Sans, sans-serif',
+					'src'        => 'https://wordpress.org/example.json/stylescriptalert(xss)/script',
+				),
+			),
+
+			'Nested associative arrays'    => array(
+				'data'     => array(
+					'slug'       => 'open      -       sans</style><script>alert("xss")</script>',
+					'fontFamily' => 'Open Sans, sans-serif</style><script>alert("xss")</script>',
+					'src'        => 'https://wordpress.org/example.json</style><script>alert("xss")</script>',
+					'nested'     => array(
+						'key1'    => 'value1</style><script>alert("xss")</script>',
+						'key2'    => 'value2</style><script>alert("xss")</script>',
+						'nested2' => array(
+							'key3' => 'value3</style><script>alert("xss")</script>',
+							'key4' => 'value4</style><script>alert("xss")</script>',
+						),
+					),
+				),
+				'schema'   => array(
+					'slug'       => 'sanitize_title',
+					'fontFamily' => 'sanitize_text_field',
+					'src'        => 'sanitize_url',
+					'nested'     => array(
+						'key1'    => 'sanitize_text_field',
+						'key2'    => 'sanitize_text_field',
+						'nested2' => array(
+							'key3' => 'sanitize_text_field',
+							'key4' => 'sanitize_text_field',
+						),
+					),
+				),
+				'expected' => array(
+					'slug'       => 'open-sansalertxss',
+					'fontFamily' => 'Open Sans, sans-serif',
+					'src'        => 'https://wordpress.org/example.json/stylescriptalert(xss)/script',
+					'nested'     => array(
+						'key1'    => 'value1',
+						'key2'    => 'value2',
+						'nested2' => array(
+							'key3' => 'value3',
+							'key4' => 'value4',
+						),
+					),
+				),
+			),
+
+			'Indexed arrays'               => array(
+				'data'     => array(
+					'slug' => 'oPeN SaNs',
+					'enum' => array(
+						'value1<script>alert("xss")</script>',
+						'value2<script>alert("xss")</script>',
+						'value3<script>alert("xss")</script>',
+					),
+				),
+				'schema'   => array(
+					'slug' => 'sanitize_title',
+					'enum' => array( 'sanitize_text_field' ),
+				),
+				'expected' => array(
+					'slug' => 'open-sans',
+					'enum' => array( 'value1', 'value2', 'value3' ),
+				),
+			),
+
+			'Nested indexed arrays'        => array(
+				'data'     => array(
+					'slug'     => 'OPEN-SANS',
+					'name'     => 'Open Sans</style><script>alert("xss")</script>',
+					'fontFace' => array(
+						array(
+							'fontFamily' => 'Open Sans, sans-serif</style><script>alert("xss")</script>',
+							'src'        => 'https://wordpress.org/example.json/stylescriptalert(xss)/script',
+						),
+						array(
+							'fontFamily' => 'Open Sans, sans-serif</style><script>alert("xss")</script>',
+							'src'        => 'https://wordpress.org/example.json/stylescriptalert(xss)/script',
+						),
+					),
+				),
+				'schema'   => array(
+					'slug'     => 'sanitize_title',
+					'name'     => 'sanitize_text_field',
+					'fontFace' => array(
+						array(
+							'fontFamily' => 'sanitize_text_field',
+							'src'        => 'sanitize_url',
+						),
+					),
+				),
+				'expected' => array(
+					'slug'     => 'open-sans',
+					'name'     => 'Open Sans',
+					'fontFace' => array(
+						array(
+							'fontFamily' => 'Open Sans, sans-serif',
+							'src'        => 'https://wordpress.org/example.json/stylescriptalert(xss)/script',
+						),
+						array(
+							'fontFamily' => 'Open Sans, sans-serif',
+							'src'        => 'https://wordpress.org/example.json/stylescriptalert(xss)/script',
+						),
+					),
+				),
+			),
+
+			'Custom sanitization function' => array(
+				'data'     => array(
+					'key1' => 'abc123edf456ghi789',
+					'key2' => 'value2',
+				),
+				'schema'   => array(
+					'key1' => function ( $value ) {
+						// Remove the six first character.
+						return substr( $value, 6 );
+					},
+					'key2' => function ( $value ) {
+						// Capitalize the value.
+						return strtoupper( $value );
+					},
+				),
+				'expected' => array(
+					'key1' => 'edf456ghi789',
+					'key2' => 'VALUE2',
+				),
+			),
+
+			'Null as schema value'         => array(
+				'data'     => array(
+					'key1'   => 'value1<script>alert("xss")</script>',
+					'key2'   => 'value2',
+					'nested' => array(
+						'key3' => 'value3',
+						'key4' => 'value4',
+					),
+				),
+				'schema'   => array(
+					'key1'   => null,
+					'key2'   => 'sanitize_text_field',
+					'nested' => null,
+				),
+				'expected' => array(
+					'key1'   => 'value1<script>alert("xss")</script>',
+					'key2'   => 'value2',
+					'nested' => array(
+						'key3' => 'value3',
+						'key4' => 'value4',
+					),
+				),
+			),
+
+			'Keys to remove'               => array(
+				'data'     => array(
+					'key1'              => 'value1',
+					'key2'              => 'value2',
+					'unwanted1'         => 'value',
+					'unwanted2'         => 'value',
+					'nestedAssociative' => array(
+						'key5'      => 'value5',
+						'unwanted3' => 'value',
+					),
+					'nestedIndexed'     => array(
+						array(
+							'key6'      => 'value7',
+							'unwanted4' => 'value',
+						),
+						array(
+							'key6'      => 'value7',
+							'unwanted5' => 'value',
+						),
+					),
+
+				),
+				'schema'   => array(
+					'key1'              => 'sanitize_text_field',
+					'key2'              => 'sanitize_text_field',
+					'nestedAssociative' => array(
+						'key5' => 'sanitize_text_field',
+					),
+					'nestedIndexed'     => array(
+						array(
+							'key6' => 'sanitize_text_field',
+						),
+					),
+				),
+				'expected' => array(
+					'key1'              => 'value1',
+					'key2'              => 'value2',
+					'nestedAssociative' => array(
+						'key5' => 'value5',
+					),
+					'nestedIndexed'     => array(
+						array(
+							'key6' => 'value7',
+						),
+						array(
+							'key6' => 'value7',
+						),
+					),
+				),
+			),
+
+			'With empty structure'         => array(
+				'data'     => array(
+					'slug'   => 'open-sans',
+					'nested' => array(
+						'key1'    => 'value</style><script>alert("xss")</script>',
+						'nested2' => array(
+							'key2'    => 'value</style><script>alert("xss")</script>',
+							'nested3' => array(
+								'nested4' => array(),
+							),
+						),
+					),
+				),
+				'schema'   => array(
+					'slug'   => 'sanitize_title',
+					'nested' => array(
+						'key1'    => 'sanitize_text_field',
+						'nested2' => array(
+							'key2'    => 'sanitize_text_field',
+							'nested3' => array(
+								'key3'    => 'sanitize_text_field',
+								'nested4' => array(
+									'key4' => 'sanitize_text_field',
+								),
+							),
+						),
+					),
+				),
+				'expected' => array(
+					'slug'   => 'open-sans',
+					'nested' => array(
+						'key1'    => 'value',
+						'nested2' => array(
+							'key2' => 'value',
+						),
+					),
+				),
+			),
+		);
+	}
+
+	public function test_sanitize_from_schema_with_invalid_data() {
+		$data   = 'invalid data';
+		$schema = array(
+			'key1' => 'sanitize_text_field',
+			'key2' => 'sanitize_text_field',
+		);
+
+		$result = WP_Font_Utils::sanitize_from_schema( $data, $schema );
+
+		$this->assertSame( $result, array() );
+	}
+
+
+	public function test_sanitize_from_schema_with_invalid_schema() {
+		$data   = array(
+			'key1' => 'value1',
+			'key2' => 'value2',
+		);
+		$schema = 'invalid schema';
+
+		$result = WP_Font_Utils::sanitize_from_schema( $data, $schema );
+
+		$this->assertSame( $result, array() );
+	}
+}
diff --git a/tests/fonts/font-library/wpFontsDir.php b/tests/fonts/font-library/wpFontsDir.php
new file mode 100644
index 0000000000..a8f7988831
--- /dev/null
+++ b/tests/fonts/font-library/wpFontsDir.php
@@ -0,0 +1,72 @@
+<?php
+/**
+ * Test wp_get_font_dir().
+ *
+ * @package WordPress
+ * @subpackage Font Library
+ *
+ * @group fonts
+ * @group font-library
+ *
+ * @covers ::wp_get_font_dir
+ */
+class Tests_Fonts_WpFontDir extends WP_UnitTestCase {
+	private static $dir_defaults;
+
+	public static function set_up_before_class() {
+		parent::set_up_before_class();
+
+		static::$dir_defaults = array(
+			'path'    => path_join( WP_CONTENT_DIR, 'fonts' ),
+			'url'     => content_url( 'fonts' ),
+			'subdir'  => '',
+			'basedir' => path_join( WP_CONTENT_DIR, 'fonts' ),
+			'baseurl' => content_url( 'fonts' ),
+			'error'   => false,
+		);
+	}
+
+	public function test_fonts_dir() {
+		$font_dir = wp_get_font_dir();
+
+		$this->assertSame( $font_dir, static::$dir_defaults );
+	}
+
+	public function test_fonts_dir_with_filter() {
+		// Define a callback function to pass to the filter.
+		function set_new_values( $defaults ) {
+			$defaults['path']    = '/custom-path/fonts/my-custom-subdir';
+			$defaults['url']     = 'http://example.com/custom-path/fonts/my-custom-subdir';
+			$defaults['subdir']  = 'my-custom-subdir';
+			$defaults['basedir'] = '/custom-path/fonts';
+			$defaults['baseurl'] = 'http://example.com/custom-path/fonts';
+			$defaults['error']   = false;
+			return $defaults;
+		}
+
+		// Add the filter.
+		add_filter( 'font_dir', 'set_new_values' );
+
+		// Gets the fonts dir.
+		$font_dir = wp_get_font_dir();
+
+		$expected = array(
+			'path'    => '/custom-path/fonts/my-custom-subdir',
+			'url'     => 'http://example.com/custom-path/fonts/my-custom-subdir',
+			'subdir'  => 'my-custom-subdir',
+			'basedir' => '/custom-path/fonts',
+			'baseurl' => 'http://example.com/custom-path/fonts',
+			'error'   => false,
+		);
+
+		// Remove the filter.
+		remove_filter( 'font_dir', 'set_new_values' );
+
+		$this->assertSame( $expected, $font_dir, 'The wp_get_font_dir() method should return the expected values.' );
+
+		// Gets the fonts dir.
+		$font_dir = wp_get_font_dir();
+
+		$this->assertSame( static::$dir_defaults, $font_dir, 'The wp_get_font_dir() method should return the default values.' );
+	}
+}
diff --git a/tests/fonts/font-library/wpRestFontCollectionsController.php b/tests/fonts/font-library/wpRestFontCollectionsController.php
new file mode 100644
index 0000000000..f5af774d0d
--- /dev/null
+++ b/tests/fonts/font-library/wpRestFontCollectionsController.php
@@ -0,0 +1,227 @@
+<?php
+/**
+ * Unit tests covering WP_REST_Font_Collections_Controller functionality.
+ *
+ * @package WordPress
+ * @subpackage REST_API
+ * @since 6.5.0
+ *
+ * @group restapi
+ * @group fonts
+ * @group font-library
+ *
+ * @coversDefaultClass WP_REST_Font_Collections_Controller
+ */
+class Tests_REST_WpRestFontCollectionsController extends WP_Test_REST_Controller_Testcase {
+	protected static $admin_id;
+	protected static $editor_id;
+	protected static $mock_file;
+
+
+	public static function wpSetUpBeforeClass( WP_UnitTest_Factory $factory ) {
+		// Clear the font collections.
+		$collections = WP_Font_Library::get_instance()->get_font_collections();
+		foreach ( $collections as $slug => $collection ) {
+			WP_Font_Library::get_instance()->unregister_font_collection( $slug );
+		}
+
+		self::$admin_id  = $factory->user->create(
+			array(
+				'role' => 'administrator',
+			)
+		);
+		self::$editor_id = $factory->user->create(
+			array(
+				'role' => 'editor',
+			)
+		);
+		$mock_file       = wp_tempnam( 'my-collection-data-' );
+		file_put_contents( $mock_file, '{"name": "Mock Collection", "font_families": [ "mock" ], "categories": [ "mock" ] }' );
+
+		wp_register_font_collection(
+			'mock-col-slug',
+			array(
+				'name'          => 'My collection',
+				'font_families' => $mock_file,
+			)
+		);
+	}
+
+	public static function wpTearDownAfterClass() {
+		self::delete_user( self::$admin_id );
+		self::delete_user( self::$editor_id );
+		wp_unregister_font_collection( 'mock-col-slug' );
+	}
+
+	/**
+	 * @covers WP_REST_Font_Collections_Controller::register_routes
+	 */
+	public function test_register_routes() {
+		$routes = rest_get_server()->get_routes();
+		$this->assertCount( 1, $routes['/wp/v2/font-collections'], 'Rest server has not the collections path initialized.' );
+		$this->assertCount( 1, $routes['/wp/v2/font-collections/(?P<slug>[\/\w-]+)'], 'Rest server has not the collection path initialized.' );
+
+		$this->assertArrayHasKey( 'GET', $routes['/wp/v2/font-collections'][0]['methods'], 'Rest server has not the GET method for collections initialized.' );
+		$this->assertArrayHasKey( 'GET', $routes['/wp/v2/font-collections/(?P<slug>[\/\w-]+)'][0]['methods'], 'Rest server has not the GET method for collection initialized.' );
+	}
+
+	/**
+	 * @covers WP_REST_Font_Collections_Controller::get_items
+	 */
+	public function test_get_items() {
+		wp_set_current_user( self::$admin_id );
+		$request  = new WP_REST_Request( 'GET', '/wp/v2/font-collections' );
+		$response = rest_get_server()->dispatch( $request );
+		$content  = $response->get_data();
+		$this->assertIsArray( $content );
+		$this->assertSame( 200, $response->get_status() );
+	}
+
+	/**
+	 * @covers WP_REST_Font_Collections_Controller::get_items
+	 */
+	public function test_get_items_should_only_return_valid_collections() {
+		$this->setExpectedIncorrectUsage( 'WP_Font_Collection::load_from_json' );
+
+		wp_set_current_user( self::$admin_id );
+		wp_register_font_collection(
+			'invalid-collection',
+			array(
+				'name'          => 'My collection',
+				'font_families' => 'invalid-collection-file',
+			)
+		);
+
+		$request  = new WP_REST_Request( 'GET', '/wp/v2/font-collections' );
+		$response = rest_get_server()->dispatch( $request );
+		$content  = $response->get_data();
+
+		wp_unregister_font_collection( 'invalid-collection' );
+
+		$this->assertSame( 200, $response->get_status(), 'The response status should be 200.' );
+		$this->assertCount( 1, $content, 'The response should only contain valid collections.' );
+	}
+
+	/**
+	 * @covers WP_REST_Font_Collections_Controller::get_item
+	 */
+	public function test_get_item() {
+		wp_set_current_user( self::$admin_id );
+		$request  = new WP_REST_Request( 'GET', '/wp/v2/font-collections/mock-col-slug' );
+		$response = rest_get_server()->dispatch( $request );
+		$this->assertSame( 200, $response->get_status(), 'The response status should be 200.' );
+
+		$response_data = $response->get_data();
+		$this->assertArrayHasKey( 'name', $response_data, 'Response data does not have the name key.' );
+		$this->assertArrayHasKey( 'slug', $response_data, 'Response data does not have the slug key.' );
+		$this->assertArrayHasKey( 'description', $response_data, 'Response data does not have the description key.' );
+		$this->assertArrayHasKey( 'font_families', $response_data, 'Response data does not have the font_families key.' );
+		$this->assertArrayHasKey( 'categories', $response_data, 'Response data does not have the categories key.' );
+
+		$this->assertIsString( $response_data['name'], 'name is not a string.' );
+		$this->assertIsString( $response_data['slug'], 'slug is not a string.' );
+		$this->assertIsString( $response_data['description'], 'description is not a string.' );
+
+		$this->assertIsArray( $response_data['font_families'], 'font_families is not an array.' );
+		$this->assertIsArray( $response_data['categories'], 'categories is not an array.' );
+	}
+
+	/**
+	 * @covers WP_REST_Font_Collections_Controller::get_item
+	 */
+	public function test_get_item_invalid_slug() {
+		wp_set_current_user( self::$admin_id );
+		$request  = new WP_REST_Request( 'GET', '/wp/v2/font-collections/non-existing-collection' );
+		$response = rest_get_server()->dispatch( $request );
+		$this->assertErrorResponse( 'rest_font_collection_not_found', $response, 404 );
+	}
+
+	/**
+	 * @covers WP_REST_Font_Collections_Controller::get_item
+	 */
+	public function test_get_item_invalid_collection() {
+		$this->setExpectedIncorrectUsage( 'WP_Font_Collection::load_from_json' );
+
+		wp_set_current_user( self::$admin_id );
+		$slug = 'invalid-collection';
+		wp_register_font_collection(
+			$slug,
+			array(
+				'name'          => 'My collection',
+				'font_families' => 'invalid-collection-file',
+			)
+		);
+
+		$request  = new WP_REST_Request( 'GET', '/wp/v2/font-collections/' . $slug );
+		$response = rest_get_server()->dispatch( $request );
+
+		wp_unregister_font_collection( $slug );
+
+		$this->assertErrorResponse( 'font_collection_json_missing', $response, 500 );
+	}
+
+	/**
+	 * @covers WP_REST_Font_Collections_Controller::get_item
+	 */
+	public function test_get_item_invalid_id_permission() {
+		$request = new WP_REST_Request( 'GET', '/wp/v2/font-collections/mock-col-slug' );
+
+		wp_set_current_user( 0 );
+		$response = rest_get_server()->dispatch( $request );
+		$this->assertErrorResponse( 'rest_cannot_read', $response, 401 );
+
+		wp_set_current_user( self::$editor_id );
+		$response = rest_get_server()->dispatch( $request );
+		$this->assertErrorResponse( 'rest_cannot_read', $response, 403 );
+	}
+
+	/**
+	 * @doesNotPerformAssertions
+	 */
+	public function test_context_param() {
+		// Controller does not use get_context_param().
+	}
+
+	/**
+	 * @doesNotPerformAssertions
+	 */
+	public function test_create_item() {
+		// Controller does not use test_create_item().
+	}
+
+	/**
+	 * @doesNotPerformAssertions
+	 */
+	public function test_update_item() {
+		// Controller does not use test_update_item().
+	}
+
+	/**
+	 * @doesNotPerformAssertions
+	 */
+	public function test_delete_item() {
+		// Controller does not use test_delete_item().
+	}
+
+	/**
+	 * @doesNotPerformAssertions
+	 */
+	public function test_prepare_item() {
+		// Controller does not use test_prepare_item().
+	}
+
+	public function test_get_item_schema() {
+		$request  = new WP_REST_Request( 'OPTIONS', '/wp/v2/font-collections' );
+		$response = rest_get_server()->dispatch( $request );
+		$data     = $response->get_data();
+
+		$this->assertSame( 200, $response->get_status(), 'The response status should be 200.' );
+		$properties = $data['schema']['properties'];
+		$this->assertCount( 5, $properties, 'There should be 5 properties in the response data schema.' );
+		$this->assertArrayHasKey( 'slug', $properties, 'The slug property should exist in the response data schema.' );
+		$this->assertArrayHasKey( 'name', $properties, 'The name property should exist in the response data schema.' );
+		$this->assertArrayHasKey( 'description', $properties, 'The description property should exist in the response data schema.' );
+		$this->assertArrayHasKey( 'font_families', $properties, 'The slug font_families should exist in the response data schema.' );
+		$this->assertArrayHasKey( 'categories', $properties, 'The categories property should exist in the response data schema.' );
+	}
+}
diff --git a/tests/fonts/font-library/wpRestFontFacesController.php b/tests/fonts/font-library/wpRestFontFacesController.php
new file mode 100644
index 0000000000..3e74b23b7c
--- /dev/null
+++ b/tests/fonts/font-library/wpRestFontFacesController.php
@@ -0,0 +1,1076 @@
+<?php
+/**
+ * Unit tests covering WP_REST_Font_Faces_Controller_Test functionality.
+ *
+ * @package WordPress
+ * @subpackage REST_API
+ * @since 6.5.0
+ *
+ * @group restapi
+ * @group fonts
+ * @group font-library
+ *
+ * @coversDefaultClass WP_REST_Font_Faces_Controller
+ */
+class Tests_REST_WpRestFontFacesController extends WP_Test_REST_Controller_Testcase {
+	protected static $admin_id;
+	protected static $editor_id;
+
+	protected static $font_family_id;
+	protected static $other_font_family_id;
+
+	protected static $font_face_id1;
+	protected static $font_face_id2;
+
+	private static $post_ids_for_cleanup = array();
+
+	protected static $default_settings = array(
+		'fontFamily' => '"Open Sans"',
+		'fontWeight' => '400',
+		'fontStyle'  => 'normal',
+		'src'        => 'https://fonts.gstatic.com/s/open-sans/v30/KFOkCnqEu92Fr1MmgWxPKTM1K9nz.ttf',
+	);
+
+	public static function wpSetUpBeforeClass( WP_UnitTest_Factory $factory ) {
+		self::$font_family_id       = Tests_REST_WpRestFontFamiliesController::create_font_family_post();
+		self::$other_font_family_id = Tests_REST_WpRestFontFamiliesController::create_font_family_post();
+
+		self::$font_face_id1 = self::create_font_face_post(
+			self::$font_family_id,
+			array(
+				'fontFamily' => '"Open Sans"',
+				'fontWeight' => '400',
+				'fontStyle'  => 'normal',
+				'src'        => home_url( '/wp-content/fonts/open-sans-medium.ttf' ),
+			)
+		);
+		self::$font_face_id2 = self::create_font_face_post(
+			self::$font_family_id,
+			array(
+				'fontFamily' => '"Open Sans"',
+				'fontWeight' => '900',
+				'fontStyle'  => 'normal',
+				'src'        => home_url( '/wp-content/fonts/open-sans-bold.ttf' ),
+			)
+		);
+
+		self::$admin_id  = $factory->user->create(
+			array(
+				'role' => 'administrator',
+			)
+		);
+		self::$editor_id = $factory->user->create(
+			array(
+				'role' => 'editor',
+			)
+		);
+
+		self::$post_ids_for_cleanup = array();
+	}
+
+	public static function wpTearDownAfterClass() {
+		self::delete_user( self::$admin_id );
+		self::delete_user( self::$editor_id );
+
+		wp_delete_post( self::$font_family_id, true );
+		wp_delete_post( self::$other_font_family_id, true );
+		wp_delete_post( self::$font_face_id1, true );
+		wp_delete_post( self::$font_face_id2, true );
+	}
+
+	public function tear_down() {
+		foreach ( self::$post_ids_for_cleanup as $post_id ) {
+			wp_delete_post( $post_id, true );
+		}
+		self::$post_ids_for_cleanup = array();
+		parent::tear_down();
+	}
+
+	public static function create_font_face_post( $parent_id, $settings = array() ) {
+		$settings = array_merge( self::$default_settings, $settings );
+		$title    = WP_Font_Utils::get_font_face_slug( $settings );
+		$post_id  = self::factory()->post->create(
+			wp_slash(
+				array(
+					'post_type'    => 'wp_font_face',
+					'post_status'  => 'publish',
+					'post_title'   => $title,
+					'post_name'    => sanitize_title( $title ),
+					'post_content' => wp_json_encode( $settings ),
+					'post_parent'  => $parent_id,
+				)
+			)
+		);
+
+		self::$post_ids_for_cleanup[] = $post_id;
+
+		return $post_id;
+	}
+
+	/**
+	 * @covers WP_REST_Font_Faces_Controller::register_routes
+	 */
+	public function test_register_routes() {
+		$routes = rest_get_server()->get_routes();
+		$this->assertArrayHasKey(
+			'/wp/v2/font-families/(?P<font_family_id>[\d]+)/font-faces',
+			$routes,
+			'Font faces collection for the given font family does not exist'
+		);
+		$this->assertCount(
+			2,
+			$routes['/wp/v2/font-families/(?P<font_family_id>[\d]+)/font-faces'],
+			'Font faces collection for the given font family does not have exactly two elements'
+		);
+		$this->assertArrayHasKey(
+			'/wp/v2/font-families/(?P<font_family_id>[\d]+)/font-faces/(?P<id>[\d]+)',
+			$routes,
+			'Single font face route for the given font family does not exist'
+		);
+		$this->assertCount(
+			2,
+			$routes['/wp/v2/font-families/(?P<font_family_id>[\d]+)/font-faces/(?P<id>[\d]+)'],
+			'Font faces collection for the given font family does not have exactly two elements'
+		);
+	}
+
+	public function test_font_faces_no_autosave_routes() {
+		$routes = rest_get_server()->get_routes();
+		$this->assertArrayNotHasKey(
+			'/wp/v2/font-families/(?P<font_family_id>[\d]+)/font-faces/(?P<id>[\d]+)/autosaves',
+			$routes,
+			'Font faces autosaves route exists.'
+		);
+		$this->assertArrayNotHasKey(
+			'/wp/v2/font-families/(?P<font_family_id>[\d]+)/font-faces/(?P<parent>[\d]+)/autosaves/(?P<id>[\d]+)',
+			$routes,
+			'Font faces autosaves by id route exists.'
+		);
+	}
+
+	/**
+	 * @doesNotPerformAssertions
+	 */
+	public function test_context_param() {
+		// See test_get_context_param().
+	}
+
+	/**
+	 * @dataProvider data_get_context_param
+	 *
+	 * @covers WP_REST_Font_Faces_Controller::get_context_param
+	 *
+	 * @param bool $single_route Whether to test a single route.
+	 */
+	public function test_get_context_param( $single_route ) {
+		$route = '/wp/v2/font-families/' . self::$font_family_id . '/font-faces';
+		if ( $single_route ) {
+			$route .= '/' . self::$font_face_id1;
+		}
+
+		$request  = new WP_REST_Request( 'OPTIONS', $route );
+		$response = rest_get_server()->dispatch( $request );
+		$data     = $response->get_data();
+
+		$endpoint_data = $data['endpoints'][0];
+		$this->assertArrayNotHasKey( 'allow_batch', $endpoint_data, 'The allow_batch property should not exist in the endpoint data.' );
+		$this->assertSame( 'view', $endpoint_data['args']['context']['default'], 'The endpoint\'s args::context::default should be set to view.' );
+		$this->assertSame( array( 'view', 'embed', 'edit' ), $endpoint_data['args']['context']['enum'], 'The endpoint\'s args::context::enum should be set to [ view, embed, edit ].' );
+	}
+
+	/**
+	 * Data provider.
+	 *
+	 * @return array
+	 */
+	public function data_get_context_param() {
+		return array(
+			'Collection' => array( false ),
+			'Single'     => array( true ),
+		);
+	}
+
+	/**
+	 * @covers WP_REST_Font_Faces_Controller::get_items
+	 */
+	public function test_get_items() {
+		wp_set_current_user( self::$admin_id );
+		$request  = new WP_REST_Request( 'GET', '/wp/v2/font-families/' . self::$font_family_id . '/font-faces' );
+		$response = rest_get_server()->dispatch( $request );
+		$data     = $response->get_data();
+
+		$this->assertSame( 200, $response->get_status(), 'The response status should be 200' );
+		$this->assertCount( 2, $data, 'There should be 2 properties in the response data.' );
+		$this->assertArrayHasKey( '_links', $data[0], 'The _links property should exist in the response data 0.' );
+		$this->check_font_face_data( $data[0], self::$font_face_id2, $data[0]['_links'] );
+		$this->assertArrayHasKey( '_links', $data[1], 'The _links property should exist in the response data 1.' );
+		$this->check_font_face_data( $data[1], self::$font_face_id1, $data[1]['_links'] );
+	}
+
+	/**
+	 * @covers WP_REST_Font_Faces_Controller::get_items
+	 */
+	public function test_get_items_no_permission() {
+		wp_set_current_user( 0 );
+		$request  = new WP_REST_Request( 'GET', '/wp/v2/font-families/' . self::$font_family_id . '/font-faces' );
+		$response = rest_get_server()->dispatch( $request );
+		$this->assertErrorResponse( 'rest_cannot_read', $response, 401, 'The response should return an error with a "rest_cannot_read" code and 401 status.' );
+
+		wp_set_current_user( self::$editor_id );
+		$response = rest_get_server()->dispatch( $request );
+		$this->assertErrorResponse( 'rest_cannot_read', $response, 403, 'The response should return an error with a "rest_cannot_read" code and 403 status.' );
+	}
+
+	/**
+	 * @covers WP_REST_Font_Faces_Controller::get_items
+	 */
+	public function test_get_items_missing_parent() {
+		wp_set_current_user( self::$admin_id );
+		$request  = new WP_REST_Request( 'GET', '/wp/v2/font-families/' . REST_TESTS_IMPOSSIBLY_HIGH_NUMBER . '/font-faces' );
+		$response = rest_get_server()->dispatch( $request );
+		$this->assertErrorResponse( 'rest_post_invalid_parent', $response, 404 );
+	}
+
+	/**
+	 * @covers WP_REST_Font_Faces_Controller::get_item
+	 */
+	public function test_get_item() {
+		wp_set_current_user( self::$admin_id );
+		$request  = new WP_REST_Request( 'GET', '/wp/v2/font-families/' . self::$font_family_id . '/font-faces/' . self::$font_face_id1 );
+		$response = rest_get_server()->dispatch( $request );
+		$data     = $response->get_data();
+
+		$this->assertSame( 200, $response->get_status(), 'The response status should be 200.' );
+		$this->check_font_face_data( $data, self::$font_face_id1, $response->get_links() );
+	}
+
+	/**
+	 * @covers WP_REST_Font_Faces_Controller::prepare_item_for_response
+	 */
+	public function test_get_item_removes_extra_settings() {
+		$font_face_id = self::create_font_face_post( self::$font_family_id, array( 'extra' => array() ) );
+
+		wp_set_current_user( self::$admin_id );
+		$request  = new WP_REST_Request( 'GET', '/wp/v2/font-families/' . self::$font_family_id . '/font-faces/' . $font_face_id );
+		$response = rest_get_server()->dispatch( $request );
+		$data     = $response->get_data();
+
+		$this->assertSame( 200, $response->get_status(), 'The response status should be 200.' );
+		$this->assertArrayHasKey( 'font_face_settings', $data, 'The font_face_settings property should exist in the response data.' );
+		$this->assertArrayNotHasKey( 'extra', $data['font_face_settings'], 'The extra property should exist in the font_face_settings data.' );
+	}
+
+	/**
+	 * @covers WP_REST_Font_Faces_Controller::prepare_item_for_response
+	 */
+	public function test_get_item_malformed_post_content_returns_empty_settings() {
+		$font_face_id = wp_insert_post(
+			array(
+				'post_type'    => 'wp_font_face',
+				'post_parent'  => self::$font_family_id,
+				'post_status'  => 'publish',
+				'post_content' => 'invalid',
+			)
+		);
+
+		self::$post_ids_for_cleanup[] = $font_face_id;
+
+		$empty_settings = array(
+			'fontFamily' => '',
+			'src'        => array(),
+		);
+
+		wp_set_current_user( self::$admin_id );
+		$request  = new WP_REST_Request( 'GET', '/wp/v2/font-families/' . self::$font_family_id . '/font-faces/' . $font_face_id );
+		$response = rest_get_server()->dispatch( $request );
+		$data     = $response->get_data();
+
+		$this->assertSame( 200, $response->get_status(), 'The response status should be 200.' );
+		$this->assertArrayHasKey( 'font_face_settings', $data, 'The font_face_settings property should exist in the response data.' );
+		$this->assertSame( $empty_settings, $data['font_face_settings'], 'The empty settings should exist in the font_face_settings data.' );
+	}
+
+	/**
+	 * @covers WP_REST_Font_Faces_Controller::get_item
+	 */
+	public function test_get_item_invalid_font_face_id() {
+		wp_set_current_user( self::$admin_id );
+		$request  = new WP_REST_Request( 'GET', '/wp/v2/font-families/' . self::$font_family_id . '/font-faces/' . REST_TESTS_IMPOSSIBLY_HIGH_NUMBER );
+		$response = rest_get_server()->dispatch( $request );
+		$this->assertErrorResponse( 'rest_post_invalid_id', $response, 404 );
+	}
+
+	/**
+	 * @covers WP_REST_Font_Faces_Controller::get_item
+	 */
+	public function test_get_item_no_permission() {
+		wp_set_current_user( 0 );
+		$request = new WP_REST_Request( 'GET', '/wp/v2/font-families/' . self::$font_family_id . '/font-faces/' . self::$font_face_id1 );
+
+		$response = rest_get_server()->dispatch( $request );
+		$this->assertErrorResponse( 'rest_cannot_read', $response, 401, 'The response should return an error with a "rest_cannot_read" code and 401 status.' );
+
+		wp_set_current_user( self::$editor_id );
+		$response = rest_get_server()->dispatch( $request );
+		$this->assertErrorResponse( 'rest_cannot_read', $response, 403, 'The response should return an error with a "rest_cannot_read" code and 403 status.' );
+	}
+
+	/**
+	 * @covers WP_REST_Font_Faces_Controller::get_item
+	 */
+	public function test_get_item_missing_parent() {
+		wp_set_current_user( self::$admin_id );
+		$request  = new WP_REST_Request( 'GET', '/wp/v2/font-families/' . REST_TESTS_IMPOSSIBLY_HIGH_NUMBER . '/font-faces/' . self::$font_face_id1 );
+		$response = rest_get_server()->dispatch( $request );
+
+		$this->assertErrorResponse( 'rest_post_invalid_parent', $response, 404 );
+	}
+
+	/**
+	 * @covers WP_REST_Font_Faces_Controller::get_item
+	 */
+	public function test_get_item_valid_parent_id() {
+		wp_set_current_user( self::$admin_id );
+		$request  = new WP_REST_Request( 'GET', '/wp/v2/font-families/' . self::$font_family_id . '/font-faces/' . self::$font_face_id1 );
+		$response = rest_get_server()->dispatch( $request );
+		$data     = $response->get_data();
+
+		$this->assertSame( 200, $response->get_status(), 'The response status should be 200.' );
+		$this->assertSame( self::$font_family_id, $data['parent'], 'The returned parent id should match the font family id.' );
+	}
+
+	/**
+	 * @covers WP_REST_Font_Faces_Controller::get_item
+	 */
+	public function test_get_item_invalid_parent_id() {
+		wp_set_current_user( self::$admin_id );
+		$request  = new WP_REST_Request( 'GET', '/wp/v2/font-families/' . self::$other_font_family_id . '/font-faces/' . self::$font_face_id1 );
+		$response = rest_get_server()->dispatch( $request );
+		$this->assertErrorResponse( 'rest_font_face_parent_id_mismatch', $response, 404 );
+
+		$expected_message = 'The font face does not belong to the specified font family with id of "' . self::$other_font_family_id . '".';
+		$this->assertSame( $expected_message, $response->as_error()->get_error_messages()[0], 'The message must contain the correct parent ID.' );
+	}
+
+	/**
+	 * @covers WP_REST_Font_Faces_Controller::create_item
+	 */
+	public function test_create_item() {
+		wp_set_current_user( self::$admin_id );
+		$files = $this->setup_font_file_upload( array( 'woff2' ) );
+
+		$request = new WP_REST_Request( 'POST', '/wp/v2/font-families/' . self::$font_family_id . '/font-faces' );
+		$request->set_param( 'theme_json_version', WP_REST_Font_Faces_Controller::LATEST_THEME_JSON_VERSION_SUPPORTED );
+		$request->set_param(
+			'font_face_settings',
+			wp_json_encode(
+				array(
+					'fontFamily' => '"Open Sans"',
+					'fontWeight' => '200',
+					'fontStyle'  => 'normal',
+					'src'        => array_keys( $files )[0],
+				)
+			)
+		);
+		$request->set_file_params( $files );
+
+		$response = rest_get_server()->dispatch( $request );
+		$data     = $response->get_data();
+
+		$this->assertSame( 201, $response->get_status(), 'The response status should be 201.' );
+		$this->check_font_face_data( $data, $data['id'], $response->get_links() );
+		$this->check_file_meta( $data['id'], array( $data['font_face_settings']['src'] ) );
+
+		$settings = $data['font_face_settings'];
+		unset( $settings['src'] );
+		$this->assertSame(
+			array(
+				'fontFamily' => '"Open Sans"',
+				'fontWeight' => '200',
+				'fontStyle'  => 'normal',
+			),
+			$settings,
+			'The font_face_settings data should match the expected data.'
+		);
+
+		$this->assertSame( self::$font_family_id, $data['parent'], 'The returned parent id should match the font family id.' );
+	}
+
+	/**
+	 * @covers WP_REST_Font_Faces_Controller::create_item
+	 */
+	public function test_create_item_with_multiple_font_files() {
+		wp_set_current_user( self::$admin_id );
+		$files = $this->setup_font_file_upload( array( 'ttf', 'otf', 'woff', 'woff2' ) );
+
+		$request = new WP_REST_Request( 'POST', '/wp/v2/font-families/' . self::$font_family_id . '/font-faces' );
+		$request->set_param( 'theme_json_version', WP_REST_Font_Faces_Controller::LATEST_THEME_JSON_VERSION_SUPPORTED );
+		$request->set_param(
+			'font_face_settings',
+			wp_json_encode(
+				array(
+					'fontFamily' => '"Open Sans"',
+					'fontWeight' => '200',
+					'fontStyle'  => 'normal',
+					'src'        => array_keys( $files ),
+				)
+			)
+		);
+		$request->set_file_params( $files );
+
+		$response = rest_get_server()->dispatch( $request );
+		$data     = $response->get_data();
+
+		$this->assertSame( 201, $response->get_status(), 'The response status should be 201.' );
+		$this->check_font_face_data( $data, $data['id'], $response->get_links() );
+		$this->check_file_meta( $data['id'], $data['font_face_settings']['src'] );
+
+		$settings = $data['font_face_settings'];
+		$this->assertCount( 4, $settings['src'], 'There should be 4 items in the font_face_settings::src data.' );
+	}
+
+	/**
+	 * @covers WP_REST_Font_Faces_Controller::create_item
+	 */
+	public function test_create_item_invalid_file_type() {
+		$image_file = DIR_TESTDATA . '/images/canola.jpg';
+		$image_path = wp_tempnam( 'canola.jpg' );
+		copy( $image_file, $image_path );
+
+		$files = array(
+			'file-0' => array(
+				'name'      => 'canola.jpg',
+				'full_path' => 'canola.jpg',
+				'type'      => 'font/woff2',
+				'tmp_name'  => $image_path,
+				'error'     => 0,
+				'size'      => filesize( $image_path ),
+			),
+		);
+
+		wp_set_current_user( self::$admin_id );
+		$request = new WP_REST_Request( 'POST', '/wp/v2/font-families/' . self::$font_family_id . '/font-faces' );
+		$request->set_param( 'theme_json_version', WP_REST_Font_Faces_Controller::LATEST_THEME_JSON_VERSION_SUPPORTED );
+		$request->set_param(
+			'font_face_settings',
+			wp_json_encode(
+				array_merge(
+					self::$default_settings,
+					array(
+						'fontWeight' => '200',
+						'src'        => array_keys( $files )[0],
+					)
+				)
+			)
+		);
+		$request->set_file_params( $files );
+
+		$response = rest_get_server()->dispatch( $request );
+
+		$this->assertErrorResponse( 'rest_font_upload_invalid_file_type', $response, 400 );
+	}
+
+	/**
+	 * @covers WP_REST_Font_Faces_Controller::create_item
+	 */
+	public function test_create_item_with_url_src() {
+		wp_set_current_user( self::$admin_id );
+		$request = new WP_REST_Request( 'POST', '/wp/v2/font-families/' . self::$font_family_id . '/font-faces' );
+		$request->set_param( 'theme_json_version', WP_REST_Font_Faces_Controller::LATEST_THEME_JSON_VERSION_SUPPORTED );
+		$request->set_param(
+			'font_face_settings',
+			wp_json_encode(
+				array(
+					'fontFamily' => '"Open Sans"',
+					'fontWeight' => '200',
+					'fontStyle'  => 'normal',
+					'src'        => 'https://fonts.gstatic.com/s/open-sans/v30/KFOkCnqEu92Fr1MmgWxPKTM1K9nz.ttf',
+				)
+			)
+		);
+
+		$response = rest_get_server()->dispatch( $request );
+		$data     = $response->get_data();
+
+		$this->assertSame( 201, $response->get_status(), 'The response status should be 201.' );
+		$this->check_font_face_data( $data, $data['id'], $response->get_links() );
+	}
+
+	/**
+	 * @covers WP_REST_Font_Faces_Controller::create_item
+	 */
+	public function test_create_item_with_all_properties() {
+		wp_set_current_user( self::$admin_id );
+
+		$properties = array(
+			'fontFamily'            => '"Open Sans"',
+			'fontWeight'            => '300 500',
+			'fontStyle'             => 'oblique 30deg 50deg',
+			'fontDisplay'           => 'swap',
+			'fontStretch'           => 'expanded',
+			'ascentOverride'        => '70%',
+			'descentOverride'       => '30%',
+			'fontVariant'           => 'normal',
+			'fontFeatureSettings'   => '"swsh" 2',
+			'fontVariationSettings' => '"xhgt" 0.7',
+			'lineGapOverride'       => '10%',
+			'sizeAdjust'            => '90%',
+			'unicodeRange'          => 'U+0025-00FF, U+4??',
+			'preview'               => 'https://s.w.org/images/fonts/16.7/previews/open-sans/open-sans-400-normal.svg',
+			'src'                   => 'https://fonts.gstatic.com/s/open-sans/v30/KFOkCnqEu92Fr1MmgWxPKTM1K9nz.ttf',
+		);
+
+		$request = new WP_REST_Request( 'POST', '/wp/v2/font-families/' . self::$font_family_id . '/font-faces' );
+		$request->set_param( 'theme_json_version', WP_REST_Font_Faces_Controller::LATEST_THEME_JSON_VERSION_SUPPORTED );
+		$request->set_param( 'font_face_settings', wp_json_encode( $properties ) );
+
+		$response = rest_get_server()->dispatch( $request );
+		$data     = $response->get_data();
+		wp_delete_post( $data['id'], true );
+
+		$this->assertSame( 201, $response->get_status(), 'The response status should be 201.' );
+		$this->assertArrayHasKey( 'font_face_settings', $data, 'The font_face_settings property should exist in the response data.' );
+		$this->assertSame( $properties, $data['font_face_settings'], 'The font_face_settings should match the expected properties.' );
+	}
+
+	/**
+	 * @covers WP_REST_Font_Faces_Controller::create_item
+	 */
+	public function test_create_item_missing_parent() {
+		wp_set_current_user( self::$admin_id );
+		$request = new WP_REST_Request( 'POST', '/wp/v2/font-families/' . REST_TESTS_IMPOSSIBLY_HIGH_NUMBER . '/font-faces' );
+		$request->set_param(
+			'font_face_settings',
+			wp_json_encode( array_merge( self::$default_settings, array( 'fontWeight' => '100' ) ) )
+		);
+		$response = rest_get_server()->dispatch( $request );
+
+		$this->assertErrorResponse( 'rest_post_invalid_parent', $response, 404 );
+	}
+
+	/**
+	 * @covers WP_REST_Font_Faces_Controller::create_item
+	 */
+	public function test_create_item_with_duplicate_properties() {
+		$settings = array(
+			'fontFamily' => '"Open Sans"',
+			'fontWeight' => '200',
+			'fontStyle'  => 'italic',
+			'src'        => home_url( '/wp-content/fonts/open-sans-italic-light.ttf' ),
+		);
+		self::create_font_face_post( self::$font_family_id, $settings );
+
+		wp_set_current_user( self::$admin_id );
+		$request = new WP_REST_Request( 'POST', '/wp/v2/font-families/' . self::$font_family_id . '/font-faces' );
+		$request->set_param( 'font_face_settings', wp_json_encode( $settings ) );
+
+		$response = rest_get_server()->dispatch( $request );
+
+		$this->assertErrorResponse( 'rest_duplicate_font_face', $response, 400, 'The response should return an error for "rest_duplicate_font_face" with 400 status.' );
+		$expected_message = 'A font face matching those settings already exists.';
+		$message          = $response->as_error()->get_error_messages()[0];
+		$this->assertSame( $expected_message, $message, 'The response error message should match.' );
+	}
+
+	/**
+	 * @covers WP_REST_Font_Faces_Controller::validate_create_font_face_request
+	 */
+	public function test_create_item_default_theme_json_version() {
+		wp_set_current_user( self::$admin_id );
+		$request = new WP_REST_Request( 'POST', '/wp/v2/font-families/' . self::$font_family_id . '/font-faces' );
+		$request->set_param(
+			'font_face_settings',
+			wp_json_encode(
+				array(
+					'fontFamily' => '"Open Sans"',
+					'fontWeight' => '200',
+					'src'        => 'https://fonts.gstatic.com/s/open-sans/v30/KFOkCnqEu92Fr1MmgWxPKTM1K9nz.ttf',
+				)
+			)
+		);
+
+		$response = rest_get_server()->dispatch( $request );
+		$data     = $response->get_data();
+		wp_delete_post( $data['id'], true );
+
+		$this->assertSame( 201, $response->get_status(), 'The response status should be 201.' );
+		$this->assertArrayHasKey( 'theme_json_version', $data, 'The theme_json_version property should exist in the response data.' );
+		$this->assertSame( WP_REST_Font_Faces_Controller::LATEST_THEME_JSON_VERSION_SUPPORTED, $data['theme_json_version'], 'The default theme.json version should match the latest version supported by the controller.' );
+	}
+
+	/**
+	 * @dataProvider data_create_item_invalid_theme_json_version
+	 *
+	 * @covers WP_REST_Font_Faces_Controller::create_item
+	 *
+	 * @param int $theme_json_version Version input to test.
+	 */
+	public function test_create_item_invalid_theme_json_version( $theme_json_version ) {
+		wp_set_current_user( self::$admin_id );
+		$request = new WP_REST_Request( 'POST', '/wp/v2/font-families/' . self::$font_family_id . '/font-faces' );
+		$request->set_param( 'theme_json_version', $theme_json_version );
+		$request->set_param( 'font_face_settings', '' );
+
+		$response = rest_get_server()->dispatch( $request );
+		$this->assertErrorResponse( 'rest_invalid_param', $response, 400 );
+	}
+
+	/**
+	 * Data provider.
+	 *
+	 * @return array
+	 */
+	public function data_create_item_invalid_theme_json_version() {
+		return array(
+			array( 1 ),
+			array( 3 ),
+		);
+	}
+
+	/**
+	 * @dataProvider data_create_item_invalid_settings
+	 *
+	 * @covers WP_REST_Font_Faces_Controller::validate_create_font_face_settings
+	 *
+	 * @param mixed $settings Settings to test.
+	 */
+	public function test_create_item_invalid_settings( $settings ) {
+		wp_set_current_user( self::$admin_id );
+		$request = new WP_REST_Request( 'POST', '/wp/v2/font-families/' . self::$font_family_id . '/font-faces' );
+		$request->set_param( 'theme_json_version', WP_REST_Font_Faces_Controller::LATEST_THEME_JSON_VERSION_SUPPORTED );
+		$request->set_param( 'font_face_settings', wp_json_encode( $settings ) );
+
+		$response = rest_get_server()->dispatch( $request );
+
+		$this->assertErrorResponse( 'rest_invalid_param', $response, 400 );
+	}
+
+	/**
+	 * Data provider.
+	 *
+	 * @return array
+	 */
+	public function data_create_item_invalid_settings() {
+		return array(
+			'Missing fontFamily'     => array(
+				'settings' => array_diff_key( self::$default_settings, array( 'fontFamily' => '' ) ),
+			),
+			'Empty fontFamily'       => array(
+				'settings' => array_merge( self::$default_settings, array( 'fontFamily' => '' ) ),
+			),
+			'Wrong fontFamily type'  => array(
+				'settings' => array_merge( self::$default_settings, array( 'fontFamily' => 1234 ) ),
+			),
+			'Invalid fontDisplay'    => array(
+				'settings' => array_merge( self::$default_settings, array( 'fontDisplay' => 'invalid' ) ),
+			),
+			'Missing src'            => array(
+				'settings' => array_diff_key( self::$default_settings, array( 'src' => '' ) ),
+			),
+			'Empty src string'       => array(
+				'settings' => array_merge( self::$default_settings, array( 'src' => '' ) ),
+			),
+			'Empty src array'        => array(
+				'settings' => array_merge( self::$default_settings, array( 'src' => array() ) ),
+			),
+			'Empty src array values' => array(
+				'settings' => array_merge( self::$default_settings, array( '', '' ) ),
+			),
+			'Wrong src type'         => array(
+				'settings' => array_merge( self::$default_settings, array( 'src' => 1234 ) ),
+			),
+			'Wrong src array types'  => array(
+				'settings' => array_merge( self::$default_settings, array( 'src' => array( 1234, 5678 ) ) ),
+			),
+		);
+	}
+
+	/**
+	 * @covers WP_REST_Font_Faces_Controller::validate_create_font_face_settings
+	 */
+	public function test_create_item_invalid_settings_json() {
+		wp_set_current_user( self::$admin_id );
+		$request = new WP_REST_Request( 'POST', '/wp/v2/font-families/' . self::$font_family_id . '/font-faces' );
+		$request->set_param( 'theme_json_version', WP_REST_Font_Faces_Controller::LATEST_THEME_JSON_VERSION_SUPPORTED );
+		$request->set_param( 'font_face_settings', 'invalid' );
+
+		$response = rest_get_server()->dispatch( $request );
+
+		$this->assertErrorResponse( 'rest_invalid_param', $response, 400, 'The response should return an error for "rest_invalid_param" with 400 status.' );
+		$expected_message = 'font_face_settings parameter must be a valid JSON string.';
+		$message          = $response->as_error()->get_all_error_data()[0]['params']['font_face_settings'];
+		$this->assertSame( $expected_message, $message, 'The response error message should match.' );
+	}
+
+	/**
+	 * @covers WP_REST_Font_Faces_Controller::validate_create_font_face_settings
+	 */
+	public function test_create_item_invalid_file_src() {
+		$files = $this->setup_font_file_upload( array( 'woff2' ) );
+
+		wp_set_current_user( self::$admin_id );
+		$src     = 'invalid';
+		$request = new WP_REST_Request( 'POST', '/wp/v2/font-families/' . self::$font_family_id . '/font-faces' );
+		$request->set_param( 'theme_json_version', WP_REST_Font_Faces_Controller::LATEST_THEME_JSON_VERSION_SUPPORTED );
+		$request->set_param(
+			'font_face_settings',
+			wp_json_encode(
+				array_merge( self::$default_settings, array( 'src' => $src ) )
+			)
+		);
+		$request->set_file_params( $files );
+
+		$response = rest_get_server()->dispatch( $request );
+
+		$this->assertErrorResponse( 'rest_invalid_param', $response, 400, 'The response should return an error for "rest_invalid_param" with 400 status.' );
+		$expected_message = 'font_face_settings[src] value "' . $src . '" must be a valid URL or file reference.';
+		$message          = $response->as_error()->get_all_error_data()[0]['params']['font_face_settings'];
+		$this->assertSame( $expected_message, $message, 'The response error message should match.' );
+	}
+
+	/**
+	 * @covers WP_REST_Font_Faces_Controller::validate_create_font_face_settings
+	 */
+	public function test_create_item_missing_file_src() {
+		$files = $this->setup_font_file_upload( array( 'woff2', 'woff' ) );
+
+		wp_set_current_user( self::$admin_id );
+		$request = new WP_REST_Request( 'POST', '/wp/v2/font-families/' . self::$font_family_id . '/font-faces' );
+		$request->set_param( 'theme_json_version', WP_REST_Font_Faces_Controller::LATEST_THEME_JSON_VERSION_SUPPORTED );
+		$request->set_param(
+			'font_face_settings',
+			wp_json_encode(
+				array_merge( self::$default_settings, array( 'src' => array( array_keys( $files )[0] ) ) )
+			)
+		);
+		$request->set_file_params( $files );
+
+		$response = rest_get_server()->dispatch( $request );
+
+		$this->assertErrorResponse( 'rest_invalid_param', $response, 400, 'The response should return an error for "rest_invalid_param" with 400 status.' );
+		$expected_message = 'File ' . array_keys( $files )[1] . ' must be used in font_face_settings[src].';
+		$message          = $response->as_error()->get_all_error_data()[0]['params']['font_face_settings'];
+		$this->assertSame( $expected_message, $message, 'The response error message should match.' );
+	}
+
+	/**
+	 * @dataProvider data_sanitize_font_face_settings
+	 *
+	 * @covers WP_REST_Font_Face_Controller::sanitize_font_face_settings
+	 *
+	 * @param string $settings Settings to test.
+	 * @param string $expected Expected settings result.
+	 */
+	public function test_create_item_sanitize_font_face_settings( $settings, $expected ) {
+		$settings = array_merge( self::$default_settings, $settings );
+		$expected = array_merge( self::$default_settings, $expected );
+
+		wp_set_current_user( self::$admin_id );
+		$request = new WP_REST_Request( 'POST', '/wp/v2/font-families/' . self::$font_family_id . '/font-faces' );
+		$request->set_param( 'font_face_settings', wp_json_encode( $settings ) );
+		$response = rest_get_server()->dispatch( $request );
+		$data     = $response->get_data();
+		wp_delete_post( $data['id'], true );
+
+		$this->assertSame( 201, $response->get_status(), 'The response status should be 201.' );
+		$this->assertSame( $expected, $data['font_face_settings'], 'The response font_face_settings should match.' );
+	}
+
+	/**
+	 * Data provider.
+	 *
+	 * @return array
+	 */
+	public function data_sanitize_font_face_settings() {
+		return array(
+			'settings with tags, extra whitespace, new lines' => array(
+				'settings' => array(
+					'fontFamily'            => "   Open   Sans</style><script>alert('XSS');</script>\n    ",
+					'fontStyle'             => "   oblique 20deg 50deg</style><script>alert('XSS');</script>\n    ",
+					'fontWeight'            => "   200</style><script>alert('XSS');</script>\n    ",
+					'src'                   => "   https://example.com/</style><script>alert('XSS');</script>      ",
+					'fontStretch'           => "   expanded</style><script>alert('XSS');</script>\n    ",
+					'ascentOverride'        => "   70%</style><script>alert('XSS');</script>\n    ",
+					'descentOverride'       => "   30%</style><script>alert('XSS');</script>\n    ",
+					'fontVariant'           => "   normal</style><script>alert('XSS');</script>\n    ",
+					'fontFeatureSettings'   => "   \"swsh\" 2</style><script>alert('XSS');</script>\n    ",
+					'fontVariationSettings' => "   \"xhgt\" 0.7</style><script>alert('XSS');</script>\n    ",
+					'lineGapOverride'       => "   10%</style><script>alert('XSS');</script>\n    ",
+					'sizeAdjust'            => "   90%</style><script>alert('XSS');</script>\n    ",
+					'unicodeRange'          => "   U+0025-00FF, U+4??</style><script>alert('XSS');</script>\n    ",
+					'preview'               => "   https://example.com/</style><script>alert('XSS');</script>      ",
+				),
+				'expected' => array(
+					'fontFamily'            => '"Open Sans"',
+					'fontStyle'             => 'oblique 20deg 50deg',
+					'fontWeight'            => '200',
+					'src'                   => 'https://example.com//stylescriptalert(\'XSS\');/script%20%20%20%20%20%20',
+					'fontStretch'           => 'expanded',
+					'ascentOverride'        => '70%',
+					'descentOverride'       => '30%',
+					'fontVariant'           => 'normal',
+					'fontFeatureSettings'   => '"swsh" 2',
+					'fontVariationSettings' => '"xhgt" 0.7',
+					'lineGapOverride'       => '10%',
+					'sizeAdjust'            => '90%',
+					'unicodeRange'          => 'U+0025-00FF, U+4??',
+					'preview'               => 'https://example.com//stylescriptalert(\'XSS\');/script%20%20%20%20%20%20',
+				),
+			),
+			'multiword font family name with integer' => array(
+				'settings' => array(
+					'fontFamily' => 'Libre Barcode 128 Text',
+				),
+				'expected' => array(
+					'fontFamily' => '"Libre Barcode 128 Text"',
+				),
+			),
+			'multiword font family name'              => array(
+				'settings' => array(
+					'fontFamily' => 'B612 Mono',
+				),
+				'expected' => array(
+					'fontFamily' => '"B612 Mono"',
+				),
+			),
+			'comma-separated font family names'       => array(
+				'settings' => array(
+					'fontFamily' => 'Open Sans, Noto Sans, sans-serif',
+				),
+				'expected' => array(
+					'fontFamily' => '"Open Sans", "Noto Sans", sans-serif',
+				),
+			),
+		);
+	}
+
+	/**
+	 * @covers WP_REST_Font_Faces_Controller::create_item
+	 */
+	// public function test_create_item_no_permission() {}
+
+	/**
+	 * @covers WP_REST_Font_Faces_Controller::update_item
+	 */
+	public function test_update_item() {
+		$request  = new WP_REST_Request( 'POST', '/wp/v2/font-families/' . self::$font_family_id . '/font-faces/' . self::$font_face_id1 );
+		$response = rest_get_server()->dispatch( $request );
+		$this->assertErrorResponse( 'rest_no_route', $response, 404 );
+	}
+
+	/**
+	 * @covers WP_REST_Font_Faces_Controller::delete_item
+	 */
+	public function test_delete_item() {
+		wp_set_current_user( self::$admin_id );
+		$font_face_id = self::create_font_face_post( self::$font_family_id );
+		$request      = new WP_REST_Request( 'DELETE', '/wp/v2/font-families/' . self::$font_family_id . '/font-faces/' . $font_face_id );
+		$request->set_param( 'force', true );
+		$response = rest_get_server()->dispatch( $request );
+
+		$this->assertSame( 200, $response->get_status(), 'The response status should be 201.' );
+		$this->assertNull( get_post( $font_face_id ), 'The deleted post should not exist.' );
+	}
+
+	/**
+	 * @covers WP_REST_Font_Faces_Controller::delete_item
+	 */
+	public function test_delete_item_no_trash() {
+		wp_set_current_user( self::$admin_id );
+		$font_face_id = self::create_font_face_post( self::$font_family_id );
+
+		// Attempt trashing.
+		$request  = new WP_REST_Request( 'DELETE', '/wp/v2/font-families/' . self::$font_family_id . '/font-faces/' . $font_face_id );
+		$response = rest_get_server()->dispatch( $request );
+		$this->assertErrorResponse( 'rest_trash_not_supported', $response, 501, 'The response should return an error for "rest_trash_not_supported" with 501 status.' );
+
+		$request->set_param( 'force', 'false' );
+		$response = rest_get_server()->dispatch( $request );
+		$this->assertErrorResponse( 'rest_trash_not_supported', $response, 501, 'When "force" is false, the response should return an error for "rest_trash_not_supported" with 501 status.' );
+
+		// Ensure the post still exists.
+		$post = get_post( $font_face_id );
+		$this->assertNotEmpty( $post, 'The post should still exists.' );
+	}
+
+	/**
+	 * @covers WP_REST_Font_Faces_Controller::delete_item
+	 */
+	public function test_delete_item_invalid_font_face_id() {
+		wp_set_current_user( self::$admin_id );
+		$request = new WP_REST_Request( 'DELETE', '/wp/v2/font-families/' . self::$font_family_id . '/font-faces/' . REST_TESTS_IMPOSSIBLY_HIGH_NUMBER );
+		$request->set_param( 'force', true );
+		$response = rest_get_server()->dispatch( $request );
+		$this->assertErrorResponse( 'rest_post_invalid_id', $response, 404 );
+	}
+
+	/**
+	 * @covers WP_REST_Font_Faces_Controller::delete
+	 */
+	public function test_delete_item_missing_parent() {
+		wp_set_current_user( self::$admin_id );
+		$request = new WP_REST_Request( 'DELETE', '/wp/v2/font-families/' . REST_TESTS_IMPOSSIBLY_HIGH_NUMBER . '/font-faces/' . self::$font_face_id1 );
+		$request->set_param( 'force', true );
+		$response = rest_get_server()->dispatch( $request );
+
+		$this->assertErrorResponse( 'rest_post_invalid_parent', $response, 404 );
+	}
+
+	/**
+	 * @covers WP_REST_Font_Faces_Controller::get_item
+	 */
+	public function test_delete_item_invalid_parent_id() {
+		wp_set_current_user( self::$admin_id );
+		$request = new WP_REST_Request( 'DELETE', '/wp/v2/font-families/' . self::$other_font_family_id . '/font-faces/' . self::$font_face_id1 );
+		$request->set_param( 'force', true );
+		$response = rest_get_server()->dispatch( $request );
+		$this->assertErrorResponse( 'rest_font_face_parent_id_mismatch', $response, 404, 'The response should return an error for "rest_font_face_parent_id_mismatch" with 404 status.' );
+
+		$expected_message = 'The font face does not belong to the specified font family with id of "' . self::$other_font_family_id . '".';
+		$this->assertSame( $expected_message, $response->as_error()->get_error_messages()[0], 'The message must contain the correct parent ID.' );
+	}
+
+	/**
+	 * @covers WP_REST_Font_Faces_Controller::delete_item
+	 */
+	public function test_delete_item_no_permissions() {
+		$font_face_id = $this->create_font_face_post( self::$font_family_id );
+
+		wp_set_current_user( 0 );
+		$request  = new WP_REST_Request( 'DELETE', '/wp/v2/font-families/' . self::$font_family_id . '/font-faces/' . $font_face_id );
+		$response = rest_get_server()->dispatch( $request );
+		$this->assertErrorResponse( 'rest_cannot_delete', $response, 401, 'The response should return an error for "rest_cannot_delete" with 401 status for an invalid user.' );
+
+		wp_set_current_user( self::$editor_id );
+		$request  = new WP_REST_Request( 'DELETE', '/wp/v2/font-families/' . self::$font_family_id . '/font-faces/' . $font_face_id );
+		$response = rest_get_server()->dispatch( $request );
+		$this->assertErrorResponse( 'rest_cannot_delete', $response, 403, 'The response should return an error for "rest_cannot_delete" with 403 status for a user without permission.' );
+	}
+
+	/**
+	 * @covers WP_REST_Font_Faces_Controller::prepare_item_for_response
+	 */
+	public function test_prepare_item() {
+		wp_set_current_user( self::$admin_id );
+		$request  = new WP_REST_Request( 'GET', '/wp/v2/font-families/' . self::$font_family_id . '/font-faces/' . self::$font_face_id2 );
+		$response = rest_get_server()->dispatch( $request );
+		$data     = $response->get_data();
+
+		$this->assertSame( 200, $response->get_status(), 'The response status should be 200.' );
+		$this->check_font_face_data( $data, self::$font_face_id2, $response->get_links() );
+	}
+
+	/**
+	 * @covers WP_REST_Font_Faces_Controller::get_item_schema
+	 */
+	public function test_get_item_schema() {
+		$request  = new WP_REST_Request( 'OPTIONS', '/wp/v2/font-families/' . self::$font_family_id . '/font-faces' );
+		$response = rest_get_server()->dispatch( $request );
+		$data     = $response->get_data();
+
+		$this->assertSame( 200, $response->get_status(), 'The response status should be 200.' );
+		$properties = $data['schema']['properties'];
+		$this->assertCount( 4, $properties, 'There should be 4 properties in the schema::properties data.' );
+		$this->assertArrayHasKey( 'id', $properties, 'The id property should exist in the schema::properties data.' );
+		$this->assertArrayHasKey( 'theme_json_version', $properties, 'The theme_json_version property should exist in the schema::properties data.' );
+		$this->assertArrayHasKey( 'parent', $properties, 'The parent property should exist in the schema::properties data.' );
+		$this->assertArrayHasKey( 'font_face_settings', $properties, 'The font_face_settings property should exist in the schema::properties data.' );
+	}
+
+	/**
+	 * @covers WP_REST_Font_Faces_Controller::get_item_schema
+	 */
+	public function test_get_item_schema_font_face_settings_should_all_have_sanitize_callbacks() {
+		$schema                    = ( new WP_REST_Font_Faces_Controller( 'wp_font_face' ) )->get_item_schema();
+		$font_face_settings_schema = $schema['properties']['font_face_settings'];
+
+		$this->assertArrayHasKey( 'properties', $font_face_settings_schema, 'font_face_settings schema is missing properties.' );
+		$this->assertIsArray( $font_face_settings_schema['properties'], 'font_face_settings properties should be an array.' );
+
+		// arg_options should be removed for each setting property.
+		foreach ( $font_face_settings_schema['properties'] as $property ) {
+			$this->assertArrayHasKey( 'arg_options', $property, 'Setting schema should have arg_options.' );
+			$this->assertArrayHasKey( 'sanitize_callback', $property['arg_options'], 'Setting schema should have a sanitize_callback.' );
+			$this->assertIsCallable( $property['arg_options']['sanitize_callback'], 'The sanitize_callback value should be callable.' );
+		}
+	}
+
+	/**
+	 * @covers WP_REST_Font_Faces_Controller::get_public_item_schema
+	 */
+	public function test_get_public_item_schema_should_not_have_arg_options() {
+		$schema                    = ( new WP_REST_Font_Faces_Controller( 'wp_font_face' ) )->get_public_item_schema();
+		$font_face_settings_schema = $schema['properties']['font_face_settings'];
+
+		$this->assertArrayHasKey( 'properties', $font_face_settings_schema, 'font_face_settings schema is missing properties.' );
+		$this->assertIsArray( $font_face_settings_schema['properties'], 'font_face_settings properties should be an array.' );
+
+		// arg_options should be removed for each setting property.
+		foreach ( $font_face_settings_schema['properties'] as $property ) {
+			$this->assertArrayNotHasKey( 'arg_options', $property, 'arg_options should be removed from the schema for each setting.' );
+		}
+	}
+
+	/**
+	 * If WP_Theme_JSON::LATEST_SCHEMA is changed, the controller should be updated to handle any differences
+	 * in `fontFace` structure to ensure support for the latest theme.json schema, and backwards compatibility
+	 * for existing wp_font_face posts.
+	 */
+	public function test_controller_supports_latest_theme_json_version() {
+		$this->assertSame( WP_Theme_JSON::LATEST_SCHEMA, WP_REST_Font_Faces_Controller::LATEST_THEME_JSON_VERSION_SUPPORTED );
+	}
+
+	protected function check_font_face_data( $data, $post_id, $links ) {
+		self::$post_ids_for_cleanup[] = $post_id;
+		$post                         = get_post( $post_id );
+
+		$this->assertArrayHasKey( 'id', $data, 'The id property should exist in response data.' );
+		$this->assertSame( $post->ID, $data['id'], 'The "id" from the response data should match the post ID.' );
+
+		$this->assertArrayHasKey( 'parent', $data, 'The parent property should exist in response data.' );
+		$this->assertSame( $post->post_parent, $data['parent'], 'The "parent" from the response data should match the post parent.' );
+
+		$this->assertArrayHasKey( 'theme_json_version', $data, 'The theme_json_version property should exist in response data.' );
+		$this->assertSame( WP_REST_Font_Faces_Controller::LATEST_THEME_JSON_VERSION_SUPPORTED, $data['theme_json_version'], 'The "theme_json_version" from the response data should match the latest version supported by the controller.' );
+
+		$this->assertArrayHasKey( 'font_face_settings', $data, 'The font_face_settings property should exist in response data.' );
+		$this->assertSame( $post->post_content, wp_json_encode( $data['font_face_settings'] ), 'The encoded "font_face_settings" from the response data should match the post content.' );
+
+		$this->assertNotEmpty( $links, 'The links should not be empty in the response data.' );
+		$expected = rest_url( 'wp/v2/font-families/' . $post->post_parent . '/font-faces/' . $post->ID );
+		$this->assertSame( $expected, $links['self'][0]['href'], 'The links URL from the response data should match the post\'s REST endpoint.' );
+		$expected = rest_url( 'wp/v2/font-families/' . $post->post_parent . '/font-faces' );
+		$this->assertSame( $expected, $links['collection'][0]['href'], 'The links collection URL from the response data should match the REST endpoint.' );
+		$expected = rest_url( 'wp/v2/font-families/' . $post->post_parent );
+		$this->assertSame( $expected, $links['parent'][0]['href'], 'The links for a parent URL from the response data should match the parent\'s REST endpoint.' );
+	}
+
+	protected function check_file_meta( $font_face_id, $src_attributes ) {
+		$file_meta = get_post_meta( $font_face_id, '_wp_font_face_file' );
+
+		foreach ( $src_attributes as $src_attribute ) {
+			$file_name = basename( $src_attribute );
+			$this->assertContains( $file_name, $file_meta, 'The uploaded font file path should be saved in the post meta.' );
+		}
+	}
+
+	protected function setup_font_file_upload( $formats ) {
+		$files = array();
+		foreach ( $formats as $format ) {
+			$font_file = DIR_TESTDATA . '/fonts/OpenSans-Regular.' . $format;
+			$font_path = wp_tempnam( 'OpenSans-Regular.' . $format );
+			copy( $font_file, $font_path );
+
+			$files[ 'file-' . count( $files ) ] = array(
+				'name'      => 'OpenSans-Regular.' . $format,
+				'full_path' => 'OpenSans-Regular.' . $format,
+				'type'      => 'font/' . $format,
+				'tmp_name'  => $font_path,
+				'error'     => 0,
+				'size'      => filesize( $font_path ),
+			);
+		}
+
+		return $files;
+	}
+}
diff --git a/tests/fonts/font-library/wpRestFontFamiliesController.php b/tests/fonts/font-library/wpRestFontFamiliesController.php
new file mode 100644
index 0000000000..c78efdf03e
--- /dev/null
+++ b/tests/fonts/font-library/wpRestFontFamiliesController.php
@@ -0,0 +1,1057 @@
+<?php
+/**
+ * Unit tests covering WP_REST_Font_Families_Controller_Test functionality.
+ *
+ * @package WordPress
+ * @subpackage REST_API
+ * @since 6.5.0
+ *
+ * @group restapi
+ * @group fonts
+ * @group font-library
+ *
+ * @coversDefaultClass WP_REST_Font_Families_Controller
+ */
+class Tests_REST_WpRestFontFamiliesController extends WP_Test_REST_Controller_Testcase {
+	protected static $admin_id;
+	protected static $editor_id;
+
+	protected static $font_family_id1;
+	protected static $font_family_id2;
+
+	protected static $font_face_id1;
+	protected static $font_face_id2;
+
+	private static $post_ids_to_cleanup = array();
+
+	protected static $default_settings = array(
+		'name'       => 'Open Sans',
+		'slug'       => 'open-sans',
+		'fontFamily' => '"Open Sans", sans-serif',
+		'preview'    => 'https://s.w.org/images/fonts/16.7/previews/open-sans/open-sans-400-normal.svg',
+	);
+
+	public static function wpSetUpBeforeClass( WP_UnitTest_Factory $factory ) {
+		self::$admin_id  = $factory->user->create(
+			array(
+				'role' => 'administrator',
+			)
+		);
+		self::$editor_id = $factory->user->create(
+			array(
+				'role' => 'editor',
+			)
+		);
+
+		self::$font_family_id1 = self::create_font_family_post(
+			array(
+				'name'       => 'Open Sans',
+				'slug'       => 'open-sans',
+				'fontFamily' => '"Open Sans", sans-serif',
+				'preview'    => 'https://s.w.org/images/fonts/16.7/previews/open-sans/open-sans-400-normal.svg',
+			)
+		);
+		self::$font_family_id2 = self::create_font_family_post(
+			array(
+				'name'       => 'Helvetica',
+				'slug'       => 'helvetica',
+				'fontFamily' => 'Helvetica, Arial, sans-serif',
+			)
+		);
+		self::$font_face_id1   = Tests_REST_WpRestFontFacesController::create_font_face_post(
+			self::$font_family_id1,
+			array(
+				'fontFamily' => '"Open Sans"',
+				'fontWeight' => '400',
+				'fontStyle'  => 'normal',
+				'src'        => home_url( '/wp-content/fonts/open-sans-medium.ttf' ),
+			)
+		);
+		self::$font_face_id2   = Tests_REST_WpRestFontFacesController::create_font_face_post(
+			self::$font_family_id1,
+			array(
+				'fontFamily' => '"Open Sans"',
+				'fontWeight' => '900',
+				'fontStyle'  => 'normal',
+				'src'        => home_url( '/wp-content/fonts/open-sans-bold.ttf' ),
+			)
+		);
+
+		static::$post_ids_to_cleanup = array();
+	}
+
+	public static function wpTearDownAfterClass() {
+		self::delete_user( self::$admin_id );
+		self::delete_user( self::$editor_id );
+
+		wp_delete_post( self::$font_family_id1 );
+		wp_delete_post( self::$font_family_id2 );
+		wp_delete_post( self::$font_face_id1 );
+		wp_delete_post( self::$font_face_id2 );
+	}
+
+	public function tear_down() {
+		foreach ( static::$post_ids_to_cleanup as $post_id ) {
+			wp_delete_post( $post_id, true );
+		}
+		static::$post_ids_to_cleanup = array();
+
+		parent::tear_down();
+	}
+
+	public static function create_font_family_post( $settings = array() ) {
+		$settings = array_merge( self::$default_settings, $settings );
+		$post_id  = self::factory()->post->create(
+			wp_slash(
+				array(
+					'post_type'    => 'wp_font_family',
+					'post_status'  => 'publish',
+					'post_title'   => $settings['name'],
+					'post_name'    => $settings['slug'],
+					'post_content' => wp_json_encode(
+						array(
+							'fontFamily' => $settings['fontFamily'],
+							'preview'    => $settings['preview'],
+						)
+					),
+				)
+			)
+		);
+
+		static::$post_ids_to_cleanup[] = $post_id;
+
+		return $post_id;
+	}
+
+	/**
+	 * @covers WP_REST_Font_Families_Controller::register_routes
+	 */
+	public function test_register_routes() {
+		$routes = rest_get_server()->get_routes();
+		$this->assertArrayHasKey(
+			'/wp/v2/font-families',
+			$routes,
+			'Font faces collection for the given font family does not exist'
+		);
+		$this->assertCount(
+			2,
+			$routes['/wp/v2/font-families'],
+			'Font faces collection for the given font family does not have exactly two elements'
+		);
+		$this->assertArrayHasKey(
+			'/wp/v2/font-families/(?P<id>[\d]+)',
+			$routes,
+			'Single font face route for the given font family does not exist'
+		);
+		$this->assertCount(
+			3,
+			$routes['/wp/v2/font-families/(?P<id>[\d]+)'],
+			'Font faces collection for the given font family does not have exactly two elements'
+		);
+	}
+
+	public function test_font_families_no_autosave_routes() {
+		$routes = rest_get_server()->get_routes();
+		$this->assertArrayNotHasKey(
+			'/wp/v2/font-families/(?P<id>[\d]+)/autosaves',
+			$routes,
+			'Font families autosaves route exists.'
+		);
+		$this->assertArrayNotHasKey(
+			'/wp/v2/font-families/(?P<parent>[\d]+)/autosaves/(?P<id>[\d]+)',
+			$routes,
+			'Font families autosaves by id route exists.'
+		);
+	}
+
+	/**
+	 * @doesNotPerformAssertions
+	 */
+	public function test_context_param() {
+		// See test_get_context_param().
+	}
+
+	/**
+	 * @dataProvider data_get_context_param
+	 *
+	 * @covers WP_REST_Font_Families_Controller::get_context_param
+	 *
+	 * @param bool $single_route Whether to test a single route.
+	 */
+	public function test_get_context_param( $single_route ) {
+		$route = '/wp/v2/font-families';
+		if ( $single_route ) {
+			$route .= '/' . self::$font_family_id1;
+		}
+
+		$request  = new WP_REST_Request( 'OPTIONS', $route );
+		$response = rest_get_server()->dispatch( $request );
+		$data     = $response->get_data();
+
+		$endpoint_data = $data['endpoints'][0];
+		$this->assertArrayNotHasKey( 'allow_batch', $endpoint_data, 'The allow_batch property should not exist in the endpoint data.' );
+		$this->assertSame( 'view', $endpoint_data['args']['context']['default'], 'The endpoint\'s args::context::default should be set to view.' );
+		$this->assertSame( array( 'view', 'embed', 'edit' ), $endpoint_data['args']['context']['enum'], 'The endpoint\'s args::context::enum should be set to [ view, embed, edit ].' );
+	}
+
+	/**
+	 * Data provider.
+	 *
+	 * @return array
+	 */
+	public function data_get_context_param() {
+		return array(
+			'Collection' => array( false ),
+			'Single'     => array( true ),
+		);
+	}
+
+	/**
+	 * @covers WP_REST_Font_Families_Controller::get_items
+	 */
+	public function test_get_items() {
+		wp_set_current_user( self::$admin_id );
+		$request  = new WP_REST_Request( 'GET', '/wp/v2/font-families' );
+		$response = rest_get_server()->dispatch( $request );
+		$data     = $response->get_data();
+
+		$this->assertSame( 200, $response->get_status(), 'The response status should be 200.' );
+		$this->assertCount( 2, $data, 'There should be 2 properties in the response data.' );
+		$this->assertArrayHasKey( '_links', $data[0], 'The _links property should exist in the response data 0.' );
+		$this->check_font_family_data( $data[0], self::$font_family_id2, $data[0]['_links'] );
+		$this->assertArrayHasKey( '_links', $data[1], 'The _links property should exist in the response data 1.' );
+		$this->check_font_family_data( $data[1], self::$font_family_id1, $data[1]['_links'] );
+	}
+
+	/**
+	 * @covers WP_REST_Font_Families_Controller::get_items
+	 */
+	public function test_get_items_by_slug() {
+		$font_family = get_post( self::$font_family_id2 );
+
+		wp_set_current_user( self::$admin_id );
+		$request = new WP_REST_Request( 'GET', '/wp/v2/font-families' );
+		$request->set_param( 'slug', $font_family->post_name );
+		$response = rest_get_server()->dispatch( $request );
+		$data     = $response->get_data();
+
+		$this->assertSame( 200, $response->get_status(), 'The response status should be 200.' );
+		$this->assertCount( 1, $data, 'There should be 2 properties in the response data.' );
+		$this->assertArrayHasKey( 'id', $data[0], 'The id property should exist in the response data.' );
+		$this->assertSame( $font_family->ID, $data[0]['id'], 'The id should match the expected ID in the response data.' );
+	}
+
+	/**
+	 * @covers WP_REST_Font_Families_Controller::get_items
+	 */
+	public function test_get_items_no_permission() {
+		wp_set_current_user( 0 );
+		$request  = new WP_REST_Request( 'GET', '/wp/v2/font-families' );
+		$response = rest_get_server()->dispatch( $request );
+		$this->assertErrorResponse( 'rest_cannot_read', $response, 401, 'The response should return an error with a "rest_cannot_read" code and 401 status.' );
+
+		wp_set_current_user( self::$editor_id );
+		$request  = new WP_REST_Request( 'GET', '/wp/v2/font-families' );
+		$response = rest_get_server()->dispatch( $request );
+		$this->assertErrorResponse( 'rest_cannot_read', $response, 403, 'The response should return an error with a "rest_cannot_read" code and 403 status.' );
+	}
+
+	/**
+	 * @covers WP_REST_Font_Families_Controller::get_item
+	 */
+	public function test_get_item() {
+		wp_set_current_user( self::$admin_id );
+		$request  = new WP_REST_Request( 'GET', '/wp/v2/font-families/' . self::$font_family_id1 );
+		$response = rest_get_server()->dispatch( $request );
+		$data     = $response->get_data();
+
+		$this->assertSame( 200, $response->get_status(), 'The response status should be 200.' );
+		$this->check_font_family_data( $data, self::$font_family_id1, $response->get_links() );
+	}
+
+	/**
+	 * @covers WP_REST_Font_Families_Controller::prepare_item_for_response
+	 */
+	public function test_get_item_embedded_font_faces() {
+		wp_set_current_user( self::$admin_id );
+		$request = new WP_REST_Request( 'GET', '/wp/v2/font-families/' . self::$font_family_id1 );
+		$request->set_param( '_embed', true );
+		$response = rest_get_server()->dispatch( $request );
+		$data     = rest_get_server()->response_to_data( $response, true );
+
+		$this->assertSame( 200, $response->get_status(), 'The response status should be 200.' );
+		$this->assertArrayHasKey( '_embedded', $data, 'The _embedded property should exist in the response data.' );
+		$this->assertArrayHasKey( 'font_faces', $data['_embedded'], 'The font_faces property should exist in _embedded data.' );
+		$this->assertCount( 2, $data['_embedded']['font_faces'], 'There should be 2 font_faces in the _embedded data.' );
+
+		foreach ( $data['_embedded']['font_faces'] as $font_face ) {
+			$this->assertArrayHasKey( 'id', $font_face, 'The id property should exist in the _embedded font_face data.' );
+
+			$font_face_request  = new WP_REST_Request( 'GET', '/wp/v2/font-families/' . self::$font_family_id1 . '/font-faces/' . $font_face['id'] );
+			$font_face_response = rest_get_server()->dispatch( $font_face_request );
+			$font_face_data     = rest_get_server()->response_to_data( $font_face_response, true );
+
+			$this->assertSame( $font_face_data, $font_face, 'The embedded font_face data should match when the data from a single request.' );
+		}
+	}
+
+	/**
+	 * @covers WP_REST_Font_Families_Controller::get_item
+	 */
+	public function test_get_item_removes_extra_settings() {
+		$font_family_id = self::create_font_family_post( array( 'fontFace' => array() ) );
+
+		wp_set_current_user( self::$admin_id );
+		$request  = new WP_REST_Request( 'GET', '/wp/v2/font-families/' . $font_family_id );
+		$response = rest_get_server()->dispatch( $request );
+		$data     = $response->get_data();
+
+		$this->assertSame( 200, $response->get_status(), 'The response status should be 200.' );
+		$this->assertArrayNotHasKey( 'fontFace', $data['font_family_settings'], 'The fontFace property should not exist in the font_family_settings data.' );
+	}
+
+	/**
+	 * @covers WP_REST_Font_Families_Controller::prepare_item_for_response
+	 */
+	public function test_get_item_malformed_post_content_returns_empty_settings() {
+		$font_family_id = wp_insert_post(
+			array(
+				'post_type'    => 'wp_font_family',
+				'post_status'  => 'publish',
+				'post_content' => 'invalid',
+			)
+		);
+
+		static::$post_ids_to_cleanup[] = $font_family_id;
+
+		$empty_settings = array(
+			'name'       => '',
+			// Slug will default to the post id.
+			'slug'       => (string) $font_family_id,
+			'fontFamily' => '',
+			'preview'    => '',
+		);
+
+		wp_set_current_user( self::$admin_id );
+		$request  = new WP_REST_Request( 'GET', '/wp/v2/font-families/' . $font_family_id );
+		$response = rest_get_server()->dispatch( $request );
+		$data     = $response->get_data();
+
+		$this->assertSame( 200, $response->get_status(), 'The response status should be 200.' );
+		$this->assertSame( $empty_settings, $data['font_family_settings'], 'The empty settings should exist in the font_family_settings data.' );
+	}
+
+	/**
+	 * @covers WP_REST_Font_Families_Controller::get_item
+	 */
+	public function test_get_item_invalid_font_family_id() {
+		wp_set_current_user( self::$admin_id );
+		$request  = new WP_REST_Request( 'GET', '/wp/v2/font-families/' . REST_TESTS_IMPOSSIBLY_HIGH_NUMBER );
+		$response = rest_get_server()->dispatch( $request );
+		$this->assertErrorResponse( 'rest_post_invalid_id', $response, 404 );
+	}
+
+	/**
+	 * @covers WP_REST_Font_Families_Controller::get_item
+	 */
+	public function test_get_item_no_permission() {
+		wp_set_current_user( 0 );
+		$request = new WP_REST_Request( 'GET', '/wp/v2/font-families/' . self::$font_family_id1 );
+
+		$response = rest_get_server()->dispatch( $request );
+		$this->assertErrorResponse( 'rest_cannot_read', $response, 401, 'The response should return an error with a "rest_cannot_read" code and 401 status.' );
+
+		wp_set_current_user( self::$editor_id );
+		$response = rest_get_server()->dispatch( $request );
+		$this->assertErrorResponse( 'rest_cannot_read', $response, 403, 'The response should return an error with a "rest_cannot_read" code and 403 status.' );
+	}
+
+	/**
+	 * @covers WP_REST_Font_Families_Controller::create_item
+	 */
+	public function test_create_item() {
+		$settings = array_merge( self::$default_settings, array( 'slug' => 'open-sans-2' ) );
+
+		wp_set_current_user( self::$admin_id );
+		$request = new WP_REST_Request( 'POST', '/wp/v2/font-families' );
+		$request->set_param( 'theme_json_version', WP_REST_Font_Families_Controller::LATEST_THEME_JSON_VERSION_SUPPORTED );
+		$request->set_param( 'font_family_settings', wp_json_encode( $settings ) );
+		$response = rest_get_server()->dispatch( $request );
+		$data     = $response->get_data();
+
+		$this->assertSame( 201, $response->get_status(), 'The response status should be 201.' );
+		$this->check_font_family_data( $data, $data['id'], $response->get_links() );
+
+		$reponse_settings = $data['font_family_settings'];
+		$this->assertSame( $settings, $reponse_settings, 'The expected settings should exist in the font_family_settings data.' );
+		$this->assertEmpty( $data['font_faces'], 'The font_faces should be empty or not exist in the response data.' );
+	}
+
+	/**
+	 * @covers WP_REST_Font_Families_Controller::validate_create_font_face_request
+	 */
+	public function test_create_item_default_theme_json_version() {
+		$settings = array_merge( self::$default_settings, array( 'slug' => 'open-sans-2' ) );
+		wp_set_current_user( self::$admin_id );
+		$request = new WP_REST_Request( 'POST', '/wp/v2/font-families' );
+		$request->set_param( 'font_family_settings', wp_json_encode( $settings ) );
+
+		$response = rest_get_server()->dispatch( $request );
+		$data     = $response->get_data();
+
+		static::$post_ids_to_cleanup[] = $data['id'];
+
+		$this->assertSame( 201, $response->get_status(), 'The response status should be 201.' );
+		$this->assertArrayHasKey( 'theme_json_version', $data, 'The theme_json_version property should exist in the response data.' );
+		$this->assertSame( WP_REST_Font_Families_Controller::LATEST_THEME_JSON_VERSION_SUPPORTED, $data['theme_json_version'], 'The default theme.json version should match the latest version supported by the controller.' );
+	}
+
+	/**
+	 * @dataProvider data_create_item_invalid_theme_json_version
+	 *
+	 * @covers WP_REST_Font_Families_Controller::create_item
+	 *
+	 * @param int $theme_json_version Version to test.
+	 */
+	public function test_create_item_invalid_theme_json_version( $theme_json_version ) {
+		wp_set_current_user( self::$admin_id );
+		$request = new WP_REST_Request( 'POST', '/wp/v2/font-families' );
+		$request->set_param( 'theme_json_version', $theme_json_version );
+		$request->set_param( 'font_family_settings', wp_json_encode( self::$default_settings ) );
+
+		$response = rest_get_server()->dispatch( $request );
+		$this->assertErrorResponse( 'rest_invalid_param', $response, 400 );
+	}
+
+	/**
+	 * Data provider.
+	 *
+	 * @return array
+	 */
+	public function data_create_item_invalid_theme_json_version() {
+		return array(
+			array( 1 ),
+			array( 3 ),
+		);
+	}
+
+	/**
+	 * @dataProvider data_create_item_with_default_preview
+	 *
+	 * @covers WP_REST_Font_Families_Controller::sanitize_font_family_settings
+	 *
+	 * @param array $settings Settings to test.
+	 */
+	public function test_create_item_with_default_preview( $settings ) {
+		wp_set_current_user( self::$admin_id );
+		$request = new WP_REST_Request( 'POST', '/wp/v2/font-families' );
+		$request->set_param( 'theme_json_version', WP_REST_Font_Families_Controller::LATEST_THEME_JSON_VERSION_SUPPORTED );
+		$request->set_param( 'font_family_settings', wp_json_encode( $settings ) );
+		$response = rest_get_server()->dispatch( $request );
+		$data     = $response->get_data();
+
+		static::$post_ids_to_cleanup[] = $data['id'];
+
+		$this->assertSame( 201, $response->get_status(), 'The response status should be 201.' );
+		$response_settings = $data['font_family_settings'];
+		$this->assertArrayHasKey( 'preview', $response_settings, 'The preview property should exist in the font_family_settings data.' );
+		$this->assertSame( '', $response_settings['preview'], 'The preview data should be an empty string.' );
+	}
+
+	/**
+	 * Data provider.
+	 *
+	 * @return array
+	 */
+	public function data_create_item_with_default_preview() {
+		$default_settings = array(
+			'name'       => 'Open Sans',
+			'slug'       => 'open-sans-2',
+			'fontFamily' => '"Open Sans", sans-serif',
+		);
+		return array(
+			'No preview param' => array(
+				'settings' => $default_settings,
+			),
+			'Empty preview'    => array(
+				'settings' => array_merge( $default_settings, array( 'preview' => '' ) ),
+			),
+		);
+	}
+
+	/**
+	 * @dataProvider data_sanitize_font_family_settings
+	 *
+	 * @covers WP_REST_Font_Families_Controller::sanitize_font_family_settings
+	 *
+	 * @param string $settings Font family settings to test.
+	 * @param string $expected Expected settings result.
+	 */
+	public function test_create_item_santize_font_family_settings( $settings, $expected ) {
+		$settings = array_merge( self::$default_settings, $settings );
+		$expected = array_merge( self::$default_settings, $expected );
+
+		wp_set_current_user( self::$admin_id );
+		$request = new WP_REST_Request( 'POST', '/wp/v2/font-families' );
+		$request->set_param( 'font_family_settings', wp_json_encode( $settings ) );
+		$response = rest_get_server()->dispatch( $request );
+		$data     = $response->get_data();
+
+		static::$post_ids_to_cleanup[] = $data['id'];
+
+		$this->assertSame( 201, $response->get_status(), 'The response status should be 201.' );
+		$this->assertSame( $expected, $data['font_family_settings'], 'The response font_family_settings should match.' );
+	}
+
+	/**
+	 * Data provider.
+	 *
+	 * @return array
+	 */
+	public function data_sanitize_font_family_settings() {
+		return array(
+			'settings with tags, extra whitespace, new lines' => array(
+				'settings' => array(
+					'name'       => "   Opening   Sans</style><script>alert('XSS');</script>\n    ",
+					'slug'       => "   OPENing SanS </style><script>alert('XSS');</script>\n    ",
+					'fontFamily' => "   Opening   Sans</style><script>alert('XSS');</script>\n    ",
+					'preview'    => "   https://example.com/</style><script>alert('XSS');</script>      ",
+				),
+				'expected' => array(
+					'name'       => 'Opening Sans',
+					'slug'       => 'opening-sans-alertxss',
+					'fontFamily' => '"Opening Sans"',
+					'preview'    => "https://example.com//stylescriptalert('XSS');/script%20%20%20%20%20%20",
+				),
+			),
+			'multiword font family name with integer' => array(
+				'settings' => array(
+					'slug'       => 'libre-barcode-128-text',
+					'fontFamily' => 'Libre Barcode 128 Text',
+				),
+				'expected' => array(
+					'slug'       => 'libre-barcode-128-text',
+					'fontFamily' => '"Libre Barcode 128 Text"',
+				),
+			),
+			'multiword font family name'              => array(
+				'settings' => array(
+					'slug'       => 'b612-mono',
+					'fontFamily' => 'B612 Mono',
+				),
+				'expected' => array(
+					'slug'       => 'b612-mono',
+					'fontFamily' => '"B612 Mono"',
+				),
+			),
+			'comma-separated font family names'       => array(
+				'settings' => array(
+					'slug'       => 'open-sans-noto-sans',
+					'fontFamily' => 'Open Sans, Noto Sans, sans-serif',
+				),
+				'expected' => array(
+					'slug'       => 'open-sans-noto-sans',
+					'fontFamily' => '"Open Sans", "Noto Sans", sans-serif',
+				),
+			),
+		);
+	}
+
+	/**
+	 * @dataProvider data_create_item_invalid_settings
+	 *
+	 * @covers WP_REST_Font_Families_Controller::validate_create_font_face_settings
+	 *
+	 * @param array $settings Settings to test.
+	 */
+	public function test_create_item_invalid_settings( $settings ) {
+		wp_set_current_user( self::$admin_id );
+		$request = new WP_REST_Request( 'POST', '/wp/v2/font-families' );
+		$request->set_param( 'theme_json_version', WP_REST_Font_Families_Controller::LATEST_THEME_JSON_VERSION_SUPPORTED );
+		$request->set_param( 'font_family_settings', wp_json_encode( $settings ) );
+
+		$response = rest_get_server()->dispatch( $request );
+		$this->assertErrorResponse( 'rest_invalid_param', $response, 400 );
+	}
+
+	/**
+	 * Data provider.
+	 *
+	 * @return array
+	 */
+	public function data_create_item_invalid_settings() {
+		return array(
+			'Missing name'          => array(
+				'settings' => array_diff_key( self::$default_settings, array( 'name' => '' ) ),
+			),
+			'Empty name'            => array(
+				'settings' => array_merge( self::$default_settings, array( 'name' => '' ) ),
+			),
+			'Wrong name type'       => array(
+				'settings' => array_merge( self::$default_settings, array( 'name' => 1234 ) ),
+			),
+			'Missing slug'          => array(
+				'settings' => array_diff_key( self::$default_settings, array( 'slug' => '' ) ),
+			),
+			'Empty slug'            => array(
+				'settings' => array_merge( self::$default_settings, array( 'slug' => '' ) ),
+			),
+			'Wrong slug type'       => array(
+				'settings' => array_merge( self::$default_settings, array( 'slug' => 1234 ) ),
+			),
+			'Missing fontFamily'    => array(
+				'settings' => array_diff_key( self::$default_settings, array( 'fontFamily' => '' ) ),
+			),
+			'Empty fontFamily'      => array(
+				'settings' => array_merge( self::$default_settings, array( 'fontFamily' => '' ) ),
+			),
+			'Wrong fontFamily type' => array(
+				'settings' => array_merge( self::$default_settings, array( 'fontFamily' => 1234 ) ),
+			),
+		);
+	}
+
+	/**
+	 * @covers WP_REST_Font_Family_Controller::validate_font_family_settings
+	 */
+	public function test_create_item_invalid_settings_json() {
+		wp_set_current_user( self::$admin_id );
+		$request = new WP_REST_Request( 'POST', '/wp/v2/font-families' );
+		$request->set_param( 'theme_json_version', WP_REST_Font_Families_Controller::LATEST_THEME_JSON_VERSION_SUPPORTED );
+		$request->set_param( 'font_family_settings', 'invalid' );
+
+		$response = rest_get_server()->dispatch( $request );
+
+		$this->assertErrorResponse( 'rest_invalid_param', $response, 400, 'The response should return an error for "rest_invalid_param" with 400 status.' );
+		$expected_message = 'font_family_settings parameter must be a valid JSON string.';
+		$message          = $response->as_error()->get_all_error_data()[0]['params']['font_family_settings'];
+		$this->assertSame( $expected_message, $message, 'The response error message should match.' );
+	}
+
+	/**
+	 * @covers WP_REST_Font_Family_Controller::create_item
+	 */
+	public function test_create_item_with_duplicate_slug() {
+		wp_set_current_user( self::$admin_id );
+		$request = new WP_REST_Request( 'POST', '/wp/v2/font-families' );
+		$request->set_param( 'theme_json_version', WP_REST_Font_Families_Controller::LATEST_THEME_JSON_VERSION_SUPPORTED );
+		$request->set_param( 'font_family_settings', wp_json_encode( array_merge( self::$default_settings, array( 'slug' => 'helvetica' ) ) ) );
+
+		$response = rest_get_server()->dispatch( $request );
+
+		$this->assertErrorResponse( 'rest_duplicate_font_family', $response, 400, 'The response should return an error for "rest_duplicate_font_family" with 400 status.' );
+		$expected_message = 'A font family with slug "helvetica" already exists.';
+		$message          = $response->as_error()->get_error_messages()[0];
+		$this->assertSame( $expected_message, $message, 'The response error message should match.' );
+	}
+
+	/**
+	 * @covers WP_REST_Font_Families_Controller::create_item
+	 */
+	public function test_create_item_no_permission() {
+		$settings = array_merge( self::$default_settings, array( 'slug' => 'open-sans-2' ) );
+		wp_set_current_user( 0 );
+		$request = new WP_REST_Request( 'POST', '/wp/v2/font-families' );
+		$request->set_param( 'font_family_settings', wp_json_encode( $settings ) );
+		$response = rest_get_server()->dispatch( $request );
+		$this->assertErrorResponse( 'rest_cannot_create', $response, 401, 'The response should return an error for "rest_cannot_create" with 401 status.' );
+
+		wp_set_current_user( self::$editor_id );
+		$request = new WP_REST_Request( 'POST', '/wp/v2/font-families' );
+		$request->set_param(
+			'font_family_settings',
+			wp_json_encode(
+				array(
+					'name'       => 'Open Sans',
+					'slug'       => 'open-sans',
+					'fontFamily' => '"Open Sans", sans-serif',
+					'preview'    => 'https://s.w.org/images/fonts/16.7/previews/open-sans/open-sans-400-normal.svg',
+				)
+			)
+		);
+		$response = rest_get_server()->dispatch( $request );
+		$this->assertErrorResponse( 'rest_cannot_create', $response, 403, 'The response should return an error for "rest_cannot_create" with 403 status.' );
+	}
+
+	/**
+	 * @covers WP_REST_Font_Families_Controller::update_item
+	 */
+	public function test_update_item() {
+		wp_set_current_user( self::$admin_id );
+
+		$settings = array(
+			'name'       => 'Open Sans',
+			'fontFamily' => 'Open Sans, "Noto Sans", sans-serif',
+			'preview'    => 'https://s.w.org/images/fonts/16.9/previews/open-sans/open-sans-400-normal.svg',
+		);
+
+		$font_family_id = self::create_font_family_post( array( 'slug' => 'open-sans-2' ) );
+		$request        = new WP_REST_Request( 'POST', '/wp/v2/font-families/' . $font_family_id );
+		$request->set_param(
+			'font_family_settings',
+			wp_json_encode( $settings )
+		);
+		$response = rest_get_server()->dispatch( $request );
+		$data     = $response->get_data();
+
+		$this->assertSame( 200, $response->get_status(), 'The response status should be 200.' );
+		$this->check_font_family_data( $data, $font_family_id, $response->get_links() );
+
+		$expected_settings = array(
+			'name'       => $settings['name'],
+			'slug'       => 'open-sans-2',
+			'fontFamily' => '"Open Sans", "Noto Sans", sans-serif',
+			'preview'    => $settings['preview'],
+		);
+		$this->assertSame( $expected_settings, $data['font_family_settings'], 'The response font_family_settings should match expected settings.' );
+	}
+
+	/**
+	 * @dataProvider data_update_item_individual_settings
+	 *
+	 * @covers WP_REST_Font_Families_Controller::update_item
+	 *
+	 * @param array $settings Settings to test.
+	 */
+	public function test_update_item_individual_settings( $settings ) {
+		wp_set_current_user( self::$admin_id );
+
+		$font_family_id = self::create_font_family_post();
+		$request        = new WP_REST_Request( 'POST', '/wp/v2/font-families/' . $font_family_id );
+		$request->set_param( 'font_family_settings', wp_json_encode( $settings ) );
+		$response = rest_get_server()->dispatch( $request );
+		$data     = $response->get_data();
+
+		$this->assertSame( 200, $response->get_status(), 'The response status should be 200.' );
+		$key   = key( $settings );
+		$value = current( $settings );
+		$this->assertArrayHasKey( $key, $data['font_family_settings'], 'The expected key should exist in the font_family_settings data.' );
+		$this->assertSame( $value, $data['font_family_settings'][ $key ], 'The font_family_settings data should match.' );
+	}
+
+	/**
+	 * Data provider.
+	 *
+	 * @return array
+	 */
+	public function data_update_item_individual_settings() {
+		return array(
+			array( array( 'name' => 'Opened Sans' ) ),
+			array( array( 'fontFamily' => '"Opened Sans", sans-serif' ) ),
+			array( array( 'preview' => 'https://s.w.org/images/fonts/16.7/previews/opened-sans/opened-sans-400-normal.svg' ) ),
+			// Empty preview is allowed.
+			array( array( 'preview' => '' ) ),
+		);
+	}
+
+	/**
+	 * @dataProvider data_sanitize_font_family_settings
+	 *
+	 * @covers WP_REST_Font_Families_Controller::sanitize_font_family_settings
+	 *
+	 * @param string $settings Font family settings to test.
+	 * @param string $expected Expected settings result.
+	 */
+	public function test_update_item_santize_font_family_settings( $settings, $expected ) {
+		// Unset/modify slug from the data provider, since we're updating rather than creating.
+		unset( $settings['slug'] );
+		$initial_settings = array( 'slug' => 'open-sans-update' );
+		$expected         = array_merge( self::$default_settings, $expected, $initial_settings );
+
+		wp_set_current_user( self::$admin_id );
+		$font_family_id                = self::create_font_family_post( $initial_settings );
+		static::$post_ids_to_cleanup[] = $font_family_id;
+
+		$request = new WP_REST_Request( 'POST', '/wp/v2/font-families/' . $font_family_id );
+		$request->set_param( 'font_family_settings', wp_json_encode( $settings ) );
+		$response = rest_get_server()->dispatch( $request );
+		$data     = $response->get_data();
+
+		$this->assertSame( 200, $response->get_status(), 'The response status should be 200.' );
+		$this->assertSame( $expected, $data['font_family_settings'], 'The response font_family_settings should match.' );
+	}
+
+	/**
+	 * @dataProvider data_update_item_invalid_settings
+	 *
+	 * @covers WP_REST_Font_Families_Controller::update_item
+	 *
+	 * @param array $settings Settings to test.
+	 */
+	public function test_update_item_empty_settings( $settings ) {
+		wp_set_current_user( self::$admin_id );
+		$request = new WP_REST_Request( 'POST', '/wp/v2/font-families/' . self::$font_family_id1 );
+		$request->set_param(
+			'font_family_settings',
+			wp_json_encode( $settings )
+		);
+		$response = rest_get_server()->dispatch( $request );
+		$this->assertErrorResponse( 'rest_invalid_param', $response, 400 );
+	}
+
+	/**
+	 * Data provider.
+	 *
+	 * @return array
+	 */
+	public function data_update_item_invalid_settings() {
+		return array(
+			'Empty name'            => array(
+				array( 'name' => '' ),
+			),
+			'Wrong name type'       => array(
+				array( 'name' => 1234 ),
+			),
+			'Empty fontFamily'      => array(
+				array( 'fontFamily' => '' ),
+			),
+			'Wrong fontFamily type' => array(
+				array( 'fontFamily' => 1234 ),
+			),
+		);
+	}
+
+	/**
+	 * @covers WP_REST_Font_Families_Controller::update_item
+	 */
+	public function test_update_item_update_slug_not_allowed() {
+		wp_set_current_user( self::$admin_id );
+		$request = new WP_REST_Request( 'POST', '/wp/v2/font-families/' . self::$font_family_id1 );
+		$request->set_param(
+			'font_family_settings',
+			wp_json_encode( array( 'slug' => 'new-slug' ) )
+		);
+		$response = rest_get_server()->dispatch( $request );
+
+		$this->assertErrorResponse( 'rest_invalid_param', $response, 400, 'The response should return an error for "rest_invalid_param" with 400 status.' );
+		$expected_message = 'font_family_settings[slug] cannot be updated.';
+		$message          = $response->as_error()->get_all_error_data()[0]['params']['font_family_settings'];
+		$this->assertSame( $expected_message, $message, 'The response error message should match.' );
+	}
+
+	/**
+	 * @covers WP_REST_Font_Families_Controller::update_item
+	 */
+	public function test_update_item_invalid_font_family_id() {
+		$settings = array_diff_key( self::$default_settings, array( 'slug' => '' ) );
+
+		wp_set_current_user( self::$admin_id );
+		$request = new WP_REST_Request( 'POST', '/wp/v2/font-families/' . REST_TESTS_IMPOSSIBLY_HIGH_NUMBER );
+		$request->set_param( 'font_family_settings', wp_json_encode( $settings ) );
+		$response = rest_get_server()->dispatch( $request );
+		$this->assertErrorResponse( 'rest_post_invalid_id', $response, 404, 'The response should return an error for "rest_post_invalid_id" with 404 status.' );
+	}
+
+	/**
+	 * @covers WP_REST_Font_Families_Controller::update_item
+	 */
+	public function test_update_item_no_permission() {
+		$settings = array_diff_key( self::$default_settings, array( 'slug' => '' ) );
+
+		wp_set_current_user( 0 );
+		$request = new WP_REST_Request( 'POST', '/wp/v2/font-families/' . self::$font_family_id1 );
+		$request->set_param( 'font_family_settings', wp_json_encode( $settings ) );
+		$response = rest_get_server()->dispatch( $request );
+		$this->assertErrorResponse( 'rest_cannot_edit', $response, 401, 'The response should return an error for "rest_cannot_edit" with 401 status for an invalid user.' );
+
+		wp_set_current_user( self::$editor_id );
+		$request = new WP_REST_Request( 'POST', '/wp/v2/font-families/' . self::$font_family_id1 );
+		$request->set_param( 'font_family_settings', wp_json_encode( $settings ) );
+		$response = rest_get_server()->dispatch( $request );
+		$this->assertErrorResponse( 'rest_cannot_edit', $response, 403, 'The response should return an error for "rest_cannot_edit" with 403 status for a user without permission.' );
+	}
+
+
+	/**
+	 * @covers WP_REST_Font_Families_Controller::delete_item
+	 */
+	public function test_delete_item() {
+		wp_set_current_user( self::$admin_id );
+		$font_family_id   = self::create_font_family_post();
+		$request          = new WP_REST_Request( 'DELETE', '/wp/v2/font-families/' . $font_family_id );
+		$request['force'] = true;
+		$response         = rest_get_server()->dispatch( $request );
+
+		$this->assertSame( 200, $response->get_status(), 'The response status should be 200.' );
+		$this->assertNull( get_post( $font_family_id ), 'The post should not exist after deleting.' );
+	}
+
+	/**
+	 * @covers WP_REST_Font_Families_Controller::delete_item
+	 */
+	public function test_delete_item_no_trash() {
+		wp_set_current_user( self::$admin_id );
+		$font_family_id = self::create_font_family_post();
+
+		// Attempt trashing.
+		$request  = new WP_REST_Request( 'DELETE', '/wp/v2/font-families/' . $font_family_id );
+		$response = rest_get_server()->dispatch( $request );
+		$this->assertErrorResponse( 'rest_trash_not_supported', $response, 501, 'The response should return an error for "rest_trash_not_supported" with 501 status.' );
+
+		$request->set_param( 'force', 'false' );
+		$response = rest_get_server()->dispatch( $request );
+		$this->assertErrorResponse( 'rest_trash_not_supported', $response, 501, 'When "force" is false, the response should return an error for "rest_trash_not_supported" with 501 status.' );
+
+		// Ensure the post still exists.
+		$post = get_post( $font_family_id );
+		$this->assertNotEmpty( $post, 'The post should still exist.' );
+	}
+
+	/**
+	 * @covers WP_REST_Font_Families_Controller::delete_item
+	 */
+	public function test_delete_item_invalid_font_family_id() {
+		wp_set_current_user( self::$admin_id );
+		$request  = new WP_REST_Request( 'DELETE', '/wp/v2/font-families/' . REST_TESTS_IMPOSSIBLY_HIGH_NUMBER );
+		$response = rest_get_server()->dispatch( $request );
+		$this->assertErrorResponse( 'rest_post_invalid_id', $response, 404 );
+	}
+
+	/**
+	 * @covers WP_REST_Font_Families_Controller::delete_item
+	 */
+	public function test_delete_item_no_permissions() {
+		$font_family_id = self::create_font_family_post();
+
+		wp_set_current_user( 0 );
+		$request  = new WP_REST_Request( 'DELETE', '/wp/v2/font-families/' . $font_family_id );
+		$response = rest_get_server()->dispatch( $request );
+		$this->assertErrorResponse( 'rest_cannot_delete', $response, 401, 'The response should return an error for "rest_cannot_delete" with 401 status for an invalid user.' );
+
+		wp_set_current_user( self::$editor_id );
+		$request  = new WP_REST_Request( 'DELETE', '/wp/v2/font-families/' . $font_family_id );
+		$response = rest_get_server()->dispatch( $request );
+		$this->assertErrorResponse( 'rest_cannot_delete', $response, 403, 'The response should return an error for "rest_cannot_delete" with 403 status for a user without permission.' );
+	}
+
+	/**
+	 * @covers WP_REST_Font_Families_Controller::prepare_item_for_response
+	 */
+	public function test_prepare_item() {
+		wp_set_current_user( self::$admin_id );
+		$request  = new WP_REST_Request( 'GET', '/wp/v2/font-families/' . self::$font_family_id2 );
+		$response = rest_get_server()->dispatch( $request );
+		$data     = $response->get_data();
+
+		$this->assertSame( 200, $response->get_status(), 'The response status should be 200.' );
+		$this->check_font_family_data( $data, self::$font_family_id2, $response->get_links() );
+	}
+
+	/**
+	 * @covers WP_REST_Font_Families_Controller::get_item_schema
+	 */
+	public function test_get_item_schema() {
+		$request  = new WP_REST_Request( 'OPTIONS', '/wp/v2/font-families' );
+		$response = rest_get_server()->dispatch( $request );
+		$data     = $response->get_data();
+
+		$this->assertSame( 200, $response->get_status(), 'The response status should be 200.' );
+		$properties = $data['schema']['properties'];
+		$this->assertCount( 4, $properties, 'There should be 4 properties in the schema::properties data.' );
+		$this->assertArrayHasKey( 'id', $properties, 'The id property should exist in the schema::properties data.' );
+		$this->assertArrayHasKey( 'theme_json_version', $properties, 'The theme_json_version property should exist in the schema::properties data.' );
+		$this->assertArrayHasKey( 'font_faces', $properties, 'The font_faces property should exist in the schema::properties data.' );
+		$this->assertArrayHasKey( 'font_family_settings', $properties, 'The font_family_settings property should exist in the schema::properties data.' );
+	}
+
+	/**
+	 * @covers WP_REST_Font_Families_Controller::get_item_schema
+	 */
+	public function test_get_item_schema_font_family_settings_should_all_have_sanitize_callbacks() {
+		$schema                      = ( new WP_REST_Font_Families_Controller( 'wp_font_family' ) )->get_item_schema();
+		$font_family_settings_schema = $schema['properties']['font_family_settings'];
+
+		$this->assertArrayHasKey( 'properties', $font_family_settings_schema, 'font_family_settings schema is missing properties.' );
+		$this->assertIsArray( $font_family_settings_schema['properties'], 'font_family_settings properties should be an array.' );
+
+		// arg_options should be removed for each setting property.
+		foreach ( $font_family_settings_schema['properties'] as $property ) {
+			$this->assertArrayHasKey( 'arg_options', $property, 'Setting schema should have arg_options.' );
+			$this->assertArrayHasKey( 'sanitize_callback', $property['arg_options'], 'Setting schema should have a sanitize_callback.' );
+			$this->assertIsCallable( $property['arg_options']['sanitize_callback'], 'That sanitize_callback value should be callable.' );
+		}
+	}
+
+	/**
+	 * @covers WP_REST_Font_Families_Controller::get_public_item_schema
+	 */
+	public function test_get_public_item_schema_should_not_have_arg_options() {
+		$schema                      = ( new WP_REST_Font_Families_Controller( 'wp_font_family' ) )->get_public_item_schema();
+		$font_family_settings_schema = $schema['properties']['font_family_settings'];
+
+		$this->assertArrayHasKey( 'properties', $font_family_settings_schema, 'font_family_settings schema is missing properties.' );
+		$this->assertIsArray( $font_family_settings_schema['properties'], 'font_family_settings properties should be an array.' );
+
+		// arg_options should be removed for each setting property.
+		foreach ( $font_family_settings_schema['properties'] as $property ) {
+			$this->assertArrayNotHasKey( 'arg_options', $property, 'arg_options should be removed from the schema for each setting.' );
+		}
+	}
+
+	/**
+	 * If WP_Theme_JSON::LATEST_SCHEMA is changed, the controller should be updated to handle any differences
+	 * in `fontFamilies` structure to ensure support for the latest theme.json schema, and backwards compatibility
+	 * for existing wp_font_family posts.
+	 */
+	public function test_controller_supports_latest_theme_json_version() {
+		$this->assertSame( WP_Theme_JSON::LATEST_SCHEMA, WP_REST_Font_Families_Controller::LATEST_THEME_JSON_VERSION_SUPPORTED );
+	}
+
+	protected function check_font_family_data( $data, $post_id, $links ) {
+		static::$post_ids_to_cleanup[] = $post_id;
+		$post                          = get_post( $post_id );
+
+		$this->assertArrayHasKey( 'id', $data, 'The id property should exist in response data.' );
+		$this->assertSame( $post->ID, $data['id'], 'The "id" from the response data should match the post ID.' );
+
+		$this->assertArrayHasKey( 'theme_json_version', $data, 'The theme_json_version property should exist in response data.' );
+		$this->assertSame( WP_REST_Font_Families_Controller::LATEST_THEME_JSON_VERSION_SUPPORTED, $data['theme_json_version'], 'The "theme_json_version" from the response data should match the latest version supported by the controller.' );
+
+		$font_face_ids = get_children(
+			array(
+				'fields'      => 'ids',
+				'post_parent' => $post_id,
+				'post_type'   => 'wp_font_face',
+				'order'       => 'ASC',
+				'orderby'     => 'ID',
+			)
+		);
+		$this->assertArrayHasKey( 'font_faces', $data, 'The font_faces property should exist in the response data.' );
+
+		foreach ( $font_face_ids as $font_face_id ) {
+			$this->assertContains( $font_face_id, $data['font_faces'], 'The ID is in the font_faces data.' );
+		}
+
+		$this->assertArrayHasKey( 'font_family_settings', $data, 'The font_family_settings property should exist in the response data.' );
+		$settings          = $data['font_family_settings'];
+		$expected_settings = array(
+			'name'       => $post->post_title,
+			'slug'       => $post->post_name,
+			'fontFamily' => $settings['fontFamily'],
+			'preview'    => $settings['preview'],
+		);
+		$this->assertSame( $expected_settings, $settings, 'The font_family_settings should match.' );
+
+		$this->assertNotEmpty( $links, 'The links should not be empty in the response data.' );
+		$expected = rest_url( 'wp/v2/font-families/' . $post->ID );
+		$this->assertSame( $expected, $links['self'][0]['href'], 'The links URL from the response data should match the post\'s REST endpoint.' );
+		$expected = rest_url( 'wp/v2/font-families' );
+		$this->assertSame( $expected, $links['collection'][0]['href'], 'The links collection URL from the response data should match the REST endpoint.' );
+
+		if ( ! $font_face_ids ) {
+			return;
+		}
+
+		// Check font_face links, if present.
+		$this->assertArrayHasKey( 'font_faces', $links );
+		foreach ( $links['font_faces'] as $index => $link ) {
+			$expected = rest_url( 'wp/v2/font-families/' . $post->ID . '/font-faces/' . $font_face_ids[ $index ] );
+			$this->assertSame( $expected, $link['href'], 'The links for a font faces URL from the response data should match the REST endpoint.' );
+
+			$embeddable = isset( $link['attributes']['embeddable'] )
+				? $link['attributes']['embeddable']
+				: $link['embeddable'];
+			$this->assertTrue( $embeddable, 'The embeddable should be true.' );
+		}
+	}
+}
diff --git a/tests/formatting/emoji.php b/tests/formatting/emoji.php
index cff36ccb8a..a8a83781b1 100644
--- a/tests/formatting/emoji.php
+++ b/tests/formatting/emoji.php
@@ -6,8 +6,8 @@
  */
 class Tests_Formatting_Emoji extends WP_UnitTestCase {
 
-	private $png_cdn = 'https://s.w.org/images/core/emoji/14.0.0/72x72/';
-	private $svn_cdn = 'https://s.w.org/images/core/emoji/14.0.0/svg/';
+	private $png_cdn = 'https://s.w.org/images/core/emoji/15.0.3/72x72/';
+	private $svn_cdn = 'https://s.w.org/images/core/emoji/15.0.3/svg/';
 
 	/**
 	 * @ticket 36525
@@ -80,15 +80,20 @@ class Tests_Formatting_Emoji extends WP_UnitTestCase {
 	 */
 	public function test_wp_emoji_list_returns_data() {
 		$default = _wp_emoji_list();
-		$this->assertNotEmpty( $default );
+		$this->assertNotEmpty( $default, 'Default should not be empty' );
 
 		$entities = _wp_emoji_list( 'entities' );
-		$this->assertNotEmpty( $entities );
-
-		$this->assertSame( $default, $entities );
+		$this->assertNotEmpty( $entities, 'Entities should not be empty' );
+		$this->assertIsArray( $entities, 'Entities should be an array' );
+		// Emoji 15 contains 3718 entities, this number will only increase.
+		$this->assertGreaterThanOrEqual( 3718, count( $entities ), 'Entities should contain at least 3718 items' );
+		$this->assertSame( $default, $entities, 'Entities should be returned by default' );
 
 		$partials = _wp_emoji_list( 'partials' );
-		$this->assertNotEmpty( $partials );
+		$this->assertNotEmpty( $partials, 'Partials should not be empty' );
+		$this->assertIsArray( $partials, 'Partials should be an array' );
+		// Emoji 15 contains 1424 partials, this number will only increase.
+		$this->assertGreaterThanOrEqual( 1424, count( $partials ), 'Partials should contain at least 1424 items' );
 
 		$this->assertNotSame( $default, $partials );
 	}
@@ -106,9 +111,9 @@ class Tests_Formatting_Emoji extends WP_UnitTestCase {
 				'&#x1f642;',
 			),
 			array(
-				// Skin tone, gender, ZWJ, emoji selector.
-				'👮🏼‍♀️',
-				'&#x1f46e;&#x1f3fc;&#x200d;&#x2640;&#xfe0f;',
+				// Bird, ZWJ, black large squre, emoji selector.
+				'🐦‍⬛',
+				'&#x1f426;&#x200d;&#x2b1b;',
 			),
 			array(
 				// Unicode 10.
diff --git a/tests/formatting/maybeHashHexColor.php b/tests/formatting/maybeHashHexColor.php
new file mode 100644
index 0000000000..88ed38e8e9
--- /dev/null
+++ b/tests/formatting/maybeHashHexColor.php
@@ -0,0 +1,174 @@
+<?php
+
+/**
+ * Tests for the sanitize_hex_color function.
+ *
+ * @group formatting
+ *
+ * @covers ::maybe_hash_hex_color
+ */
+class Tests_Formatting_MaybeHashHexColor extends WP_UnitTestCase {
+
+	/**
+	 * @ticket 60272
+	 *
+	 * @dataProvider data_sanitize_hex_color_no_hash
+	 *
+	 * @param string $color    Color.
+	 * @param string $expected Expected.
+	 */
+	public function test_maybe_hash_hex_color( $color, $expected ) {
+		$this->assertSame( $expected, maybe_hash_hex_color( $color ) );
+	}
+
+	/**
+	 * Data provider for test_maybe_hash_hex_color().
+	 *
+	 * @return array[]
+	 */
+	public function data_sanitize_hex_color_no_hash() {
+		return array(
+			'$maybe_alpha = false, 3 digit'               => array(
+				'color'    => '#123',
+				'expected' => '#123',
+			),
+			'$maybe_alpha = false, 3 letter'              => array(
+				'color'    => '#abc',
+				'expected' => '#abc',
+			),
+			'$maybe_alpha = false, 3 mixed'               => array(
+				'color'    => '#0ab',
+				'expected' => '#0ab',
+			),
+			'$maybe_alpha = false, 6 digit'               => array(
+				'color'    => '#123456',
+				'expected' => '#123456',
+			),
+			'$maybe_alpha = false, 6 letter'              => array(
+				'color'    => '#abcdef',
+				'expected' => '#abcdef',
+			),
+			'$maybe_alpha = false, 6 mixed'               => array(
+				'color'    => '#abc123',
+				'expected' => '#abc123',
+			),
+			'empty string'                                => array(
+				'color'    => '',
+				'expected' => '',
+			),
+			'just #'                                      => array(
+				'color'    => '#',
+				'expected' => '#',
+			),
+			'no hash'                                     => array(
+				'color'    => '123',
+				'expected' => '#123',
+			),
+			'not a-f'                                     => array(
+				'color'    => '#hjg',
+				'expected' => '#hjg',
+			),
+			'not upper A-F'                               => array(
+				'color'    => '#HJG',
+				'expected' => '#HJG',
+			),
+			'$maybe_alpha = false, 3 digit with 1 alpha'  => array(
+				'color'    => '#123f',
+				'expected' => '#123f',
+			),
+			'$maybe_alpha = false, 3 letter with 1 alpha' => array(
+				'color'    => '#abcf',
+				'expected' => '#abcf',
+			),
+			'$maybe_alpha = false, 3 mixed with 1 alpha'  => array(
+				'color'    => '#0abf',
+				'expected' => '#0abf',
+			),
+			'$maybe_alpha = false, 6 digit with 2 alpha'  => array(
+				'color'    => '#123456ff',
+				'expected' => '#123456ff',
+			),
+			'$maybe_alpha = false, 6 letter with 2 alpha' => array(
+				'color'    => '#abcdefff',
+				'expected' => '#abcdefff',
+			),
+			'$maybe_alpha = false, 6 mixed with 2 alpha'  => array(
+				'color'    => '#abc123ff',
+				'expected' => '#abc123ff',
+			),
+			// Happy.
+			'$maybe_alpha = true, 3 digit'                => array(
+				'color'    => '#123',
+				'expected' => '#123',
+			),
+			'$maybe_alpha = true, 3 letter'               => array(
+				'color'    => '#abc',
+				'expected' => '#abc',
+			),
+			'$maybe_alpha = true, 3 mixed'                => array(
+				'color'    => '0ab',
+				'expected' => '#0ab',
+			),
+			'$maybe_alpha = true, 6 digit'                => array(
+				'color'    => '123456',
+				'expected' => '#123456',
+			),
+			'$maybe_alpha = true, 6 letter'               => array(
+				'color'    => 'abcdef',
+				'expected' => '#abcdef',
+			),
+			'$maybe_alpha = true, 6 mixed'                => array(
+				'color'    => 'abc123',
+				'expected' => '#abc123',
+			),
+			'$maybe_alpha = true, 3 digit with 1 alpha'   => array(
+				'color'    => '123f',
+				'expected' => '123f',
+			),
+			'$maybe_alpha = true, 3 letter with 1 alpha'  => array(
+				'color'    => 'abcf',
+				'expected' => 'abcf',
+			),
+			'$maybe_alpha = true, 3 mixed with 1 alpha'   => array(
+				'color'    => '0abf',
+				'expected' => '0abf',
+			),
+			'$maybe_alpha = true, 6 digit with 2 alpha'   => array(
+				'color'    => '123456ff',
+				'expected' => '123456ff',
+			),
+			'$maybe_alpha = true, 6 letter with 2 alpha'  => array(
+				'color'    => 'abcdefff',
+				'expected' => 'abcdefff',
+			),
+			'$maybe_alpha = true, 6 mixed with 2 alpha'   => array(
+				'color'    => 'abc123ff',
+				'expected' => 'abc123ff',
+			),
+			'$maybe_alpha = true, 3 digit with 2 alpha'   => array(
+				'color'    => '123ff',
+				'expected' => '123ff',
+			),
+			'$maybe_alpha = true, 3 letter with 2 alpha'  => array(
+				'color'    => 'abcff',
+				'expected' => 'abcff',
+			),
+			'$maybe_alpha = true, 3 mixed with 2 alpha'   => array(
+				'color'    => '0abff',
+				'expected' => '0abff',
+			),
+			'$maybe_alpha = true, 6 digit with 1 alpha'   => array(
+				'color'    => '123456f',
+				'expected' => '123456f',
+			),
+			'$maybe_alpha = true, 6 letter with 1 alpha'  => array(
+				'color'    => 'abcff',
+				'expected' => 'abcff',
+			),
+			'$maybe_alpha = true, 6 mixed with 1 alpha'   => array(
+				'color'    => '0abff',
+				'expected' => '0abff',
+			),
+		);
+	}
+}
diff --git a/tests/formatting/redirect.php b/tests/formatting/redirect.php
index 99e4c8a882..4fdcf0f621 100644
--- a/tests/formatting/redirect.php
+++ b/tests/formatting/redirect.php
@@ -203,7 +203,7 @@ class Tests_Formatting_Redirect extends WP_UnitTestCase {
 	}
 
 	/**
-	 * Data provider for test_wp_validate_redirect_relative_url.
+	 * Data provider for test_wp_validate_redirect_relative_url().
 	 *
 	 * @return array[] {
 	 *      string Current URI (i.e. path and query string only).
diff --git a/tests/formatting/sanitizeHexColor.php b/tests/formatting/sanitizeHexColor.php
new file mode 100644
index 0000000000..77c058be3d
--- /dev/null
+++ b/tests/formatting/sanitizeHexColor.php
@@ -0,0 +1,170 @@
+<?php
+
+/**
+ * Tests for the sanitize_hex_color() function.
+ *
+ * @group formatting
+ *
+ * @covers ::sanitize_hex_color
+ */
+class Tests_Formatting_SanitizeHexColor extends WP_UnitTestCase {
+
+	/**
+	 * @ticket 60270
+	 *
+	 * @dataProvider data_sanitize_hex_color
+	 *
+	 * @param string $color    Color.
+	 * @param string $expected Expected.
+	 */
+	public function test_sanitize_hex_color( $color, $expected ) {
+		$this->assertSame( $expected, sanitize_hex_color( $color ) );
+	}
+
+	/**
+	 * Data provider for test_sanitize_hex_color().
+	 *
+	 * @return array[]
+	 */
+	public function data_sanitize_hex_color() {
+		return array(
+			'$maybe_alpha = false, 3 digit'               => array(
+				'color'    => '#123',
+				'expected' => '#123',
+			),
+			'$maybe_alpha = false, 3 letter'              => array(
+				'color'    => '#abc',
+				'expected' => '#abc',
+			),
+			'$maybe_alpha = false, 3 mixed'               => array(
+				'color'    => '#0ab',
+				'expected' => '#0ab',
+			),
+			'$maybe_alpha = false, 6 digit'               => array(
+				'color'    => '#123456',
+				'expected' => '#123456',
+			),
+			'$maybe_alpha = false, 6 letter'              => array(
+				'color'    => '#abcdef',
+				'expected' => '#abcdef',
+			),
+			'$maybe_alpha = false, 6 mixed'               => array(
+				'color'    => '#abc123',
+				'expected' => '#abc123',
+			),
+			'empty string'                                => array(
+				'color'    => '',
+				'expected' => '',
+			),
+			'no hash'                                     => array(
+				'color'    => '123',
+				'expected' => null,
+			),
+			'not a-f'                                     => array(
+				'color'    => '#hjg',
+				'expected' => null,
+			),
+			'not upper A-F'                               => array(
+				'color'    => '#HJG',
+				'expected' => null,
+			),
+			'$maybe_alpha = false, 3 digit with 1 alpha'  => array(
+				'color'    => '#123f',
+				'expected' => null,
+			),
+			'$maybe_alpha = false, 3 letter with 1 alpha' => array(
+				'color'    => '#abcf',
+				'expected' => null,
+			),
+			'$maybe_alpha = false, 3 mixed with 1 alpha'  => array(
+				'color'    => '#0abf',
+				'expected' => null,
+			),
+			'$maybe_alpha = false, 6 digit with 2 alpha'  => array(
+				'color'    => '#123456ff',
+				'expected' => null,
+			),
+			'$maybe_alpha = false, 6 letter with 2 alpha' => array(
+				'color'    => '#abcdefff',
+				'expected' => null,
+			),
+			'$maybe_alpha = false, 6 mixed with 2 alpha'  => array(
+				'color'    => '#abc123ff',
+				'expected' => null,
+			),
+			// Happy.
+			'$maybe_alpha = true, 3 digit'                => array(
+				'color'    => '#123',
+				'expected' => '#123',
+			),
+			'$maybe_alpha = true, 3 letter'               => array(
+				'color'    => '#abc',
+				'expected' => '#abc',
+			),
+			'$maybe_alpha = true, 3 mixed'                => array(
+				'color'    => '#0ab',
+				'expected' => '#0ab',
+			),
+			'$maybe_alpha = true, 6 digit'                => array(
+				'color'    => '#123456',
+				'expected' => '#123456',
+			),
+			'$maybe_alpha = true, 6 letter'               => array(
+				'color'    => '#abcdef',
+				'expected' => '#abcdef',
+			),
+			'$maybe_alpha = true, 6 mixed'                => array(
+				'color'    => '#abc123',
+				'expected' => '#abc123',
+			),
+			'$maybe_alpha = true, 3 digit with 1 alpha'   => array(
+				'color'    => '#123f',
+				'expected' => null,
+			),
+			'$maybe_alpha = true, 3 letter with 1 alpha'  => array(
+				'color'    => '#abcf',
+				'expected' => null,
+			),
+			'$maybe_alpha = true, 3 mixed with 1 alpha'   => array(
+				'color'    => '#0abf',
+				'expected' => null,
+			),
+			'$maybe_alpha = true, 6 digit with 2 alpha'   => array(
+				'color'    => '#123456ff',
+				'expected' => null,
+			),
+			'$maybe_alpha = true, 6 letter with 2 alpha'  => array(
+				'color'    => '#abcdefff',
+				'expected' => null,
+			),
+			'$maybe_alpha = true, 6 mixed with 2 alpha'   => array(
+				'color'    => '#abc123ff',
+				'expected' => null,
+			),
+			'$maybe_alpha = true, 3 digit with 2 alpha'   => array(
+				'color'    => '#123ff',
+				'expected' => null,
+			),
+			'$maybe_alpha = true, 3 letter with 2 alpha'  => array(
+				'color'    => '#abcff',
+				'expected' => null,
+			),
+			'$maybe_alpha = true, 3 mixed with 2 alpha'   => array(
+				'color'    => '#0abff',
+				'expected' => null,
+			),
+			'$maybe_alpha = true, 6 digit with 1 alpha'   => array(
+				'color'    => '#123456f',
+				'expected' => null,
+			),
+			'$maybe_alpha = true, 6 letter with 1 alpha'  => array(
+				'color'    => '#abcff',
+				'expected' => null,
+			),
+			'$maybe_alpha = true, 6 mixed with 1 alpha'   => array(
+				'color'    => '#0abff',
+				'expected' => null,
+			),
+		);
+	}
+}
diff --git a/tests/formatting/sanitizeHexColorNoHash.php b/tests/formatting/sanitizeHexColorNoHash.php
new file mode 100644
index 0000000000..4c22006e40
--- /dev/null
+++ b/tests/formatting/sanitizeHexColorNoHash.php
@@ -0,0 +1,174 @@
+<?php
+
+/**
+ * Tests for the sanitize_hex_color_no_hash() function.
+ *
+ * @group formatting
+ *
+ * @covers ::sanitize_hex_color_no_hash
+ */
+class Tests_Formatting_SanitizeHexColorNoHash extends WP_UnitTestCase {
+
+	/**
+	 * @ticket 60271
+	 *
+	 * @dataProvider data_sanitize_hex_color_no_hash
+	 *
+	 * @param string $color    Color.
+	 * @param string $expected Expected.
+	 */
+	public function test_sanitize_hex_color_no_hash( $color, $expected ) {
+		$this->assertSame( $expected, sanitize_hex_color_no_hash( $color ) );
+	}
+
+	/**
+	 * Data provider for data_sanitize_hex_color_no_hash().
+	 *
+	 * @return array[]
+	 */
+	public function data_sanitize_hex_color_no_hash() {
+		return array(
+			'$maybe_alpha = false, 3 digit'               => array(
+				'color'    => '#123',
+				'expected' => '123',
+			),
+			'$maybe_alpha = false, 3 letter'              => array(
+				'color'    => '#abc',
+				'expected' => 'abc',
+			),
+			'$maybe_alpha = false, 3 mixed'               => array(
+				'color'    => '#0ab',
+				'expected' => '0ab',
+			),
+			'$maybe_alpha = false, 6 digit'               => array(
+				'color'    => '#123456',
+				'expected' => '123456',
+			),
+			'$maybe_alpha = false, 6 letter'              => array(
+				'color'    => '#abcdef',
+				'expected' => 'abcdef',
+			),
+			'$maybe_alpha = false, 6 mixed'               => array(
+				'color'    => '#abc123',
+				'expected' => 'abc123',
+			),
+			'empty string'                                => array(
+				'color'    => '',
+				'expected' => '',
+			),
+			'just #'                                      => array(
+				'color'    => '#',
+				'expected' => '',
+			),
+			'no hash'                                     => array(
+				'color'    => '123',
+				'expected' => '123',
+			),
+			'not a-f'                                     => array(
+				'color'    => '#hjg',
+				'expected' => null,
+			),
+			'not upper A-F'                               => array(
+				'color'    => '#HJG',
+				'expected' => null,
+			),
+			'$maybe_alpha = false, 3 digit with 1 alpha'  => array(
+				'color'    => '#123f',
+				'expected' => null,
+			),
+			'$maybe_alpha = false, 3 letter with 1 alpha' => array(
+				'color'    => '#abcf',
+				'expected' => null,
+			),
+			'$maybe_alpha = false, 3 mixed with 1 alpha'  => array(
+				'color'    => '#0abf',
+				'expected' => null,
+			),
+			'$maybe_alpha = false, 6 digit with 2 alpha'  => array(
+				'color'    => '#123456ff',
+				'expected' => null,
+			),
+			'$maybe_alpha = false, 6 letter with 2 alpha' => array(
+				'color'    => '#abcdefff',
+				'expected' => null,
+			),
+			'$maybe_alpha = false, 6 mixed with 2 alpha'  => array(
+				'color'    => '#abc123ff',
+				'expected' => null,
+			),
+			// Happy.
+			'$maybe_alpha = true, 3 digit'                => array(
+				'color'    => '#123',
+				'expected' => '123',
+			),
+			'$maybe_alpha = true, 3 letter'               => array(
+				'color'    => '#abc',
+				'expected' => 'abc',
+			),
+			'$maybe_alpha = true, 3 mixed'                => array(
+				'color'    => '#0ab',
+				'expected' => '0ab',
+			),
+			'$maybe_alpha = true, 6 digit'                => array(
+				'color'    => '#123456',
+				'expected' => '123456',
+			),
+			'$maybe_alpha = true, 6 letter'               => array(
+				'color'    => '#abcdef',
+				'expected' => 'abcdef',
+			),
+			'$maybe_alpha = true, 6 mixed'                => array(
+				'color'    => '#abc123',
+				'expected' => 'abc123',
+			),
+			'$maybe_alpha = true, 3 digit with 1 alpha'   => array(
+				'color'    => '#123f',
+				'expected' => null,
+			),
+			'$maybe_alpha = true, 3 letter with 1 alpha'  => array(
+				'color'    => '#abcf',
+				'expected' => null,
+			),
+			'$maybe_alpha = true, 3 mixed with 1 alpha'   => array(
+				'color'    => '#0abf',
+				'expected' => null,
+			),
+			'$maybe_alpha = true, 6 digit with 2 alpha'   => array(
+				'color'    => '#123456ff',
+				'expected' => null,
+			),
+			'$maybe_alpha = true, 6 letter with 2 alpha'  => array(
+				'color'    => '#abcdefff',
+				'expected' => null,
+			),
+			'$maybe_alpha = true, 6 mixed with 2 alpha'   => array(
+				'color'    => '#abc123ff',
+				'expected' => null,
+			),
+			'$maybe_alpha = true, 3 digit with 2 alpha'   => array(
+				'color'    => '#123ff',
+				'expected' => null,
+			),
+			'$maybe_alpha = true, 3 letter with 2 alpha'  => array(
+				'color'    => '#abcff',
+				'expected' => null,
+			),
+			'$maybe_alpha = true, 3 mixed with 2 alpha'   => array(
+				'color'    => '#0abff',
+				'expected' => null,
+			),
+			'$maybe_alpha = true, 6 digit with 1 alpha'   => array(
+				'color'    => '#123456f',
+				'expected' => null,
+			),
+			'$maybe_alpha = true, 6 letter with 1 alpha'  => array(
+				'color'    => '#abcff',
+				'expected' => null,
+			),
+			'$maybe_alpha = true, 6 mixed with 1 alpha'   => array(
+				'color'    => '#0abff',
+				'expected' => null,
+			),
+		);
+	}
+}
diff --git a/tests/formatting/sanitizeTextField.php b/tests/formatting/sanitizeTextField.php
index d7a58486d1..82cef34a38 100644
--- a/tests/formatting/sanitizeTextField.php
+++ b/tests/formatting/sanitizeTextField.php
@@ -143,4 +143,26 @@ class Tests_Formatting_SanitizeTextField extends WP_UnitTestCase {
 			),
 		);
 	}
+
+	/**
+	 * @ticket 60357
+	 */
+	public function test_sanitize_text_field_filter() {
+		$filter = new MockAction();
+		add_filter( 'sanitize_text_field', array( $filter, 'filter' ) );
+
+		$this->assertSame( 'example', sanitize_text_field( 'example' ) );
+		$this->assertSame( 1, $filter->get_call_count(), 'The sanitize_text_field filter was not called.' );
+	}
+
+	/**
+	 * @ticket 60357
+	 */
+	public function test_sanitize_textarea_field_filter() {
+		$filter = new MockAction();
+		add_filter( 'sanitize_textarea_field', array( $filter, 'filter' ) );
+
+		$this->assertSame( 'example', sanitize_textarea_field( 'example' ) );
+		$this->assertSame( 1, $filter->get_call_count(), 'The sanitize_textarea_field filter was not called.' );
+	}
 }
diff --git a/tests/formatting/wpStripAllTags.php b/tests/formatting/wpStripAllTags.php
index 703d334858..6afcbed79f 100644
--- a/tests/formatting/wpStripAllTags.php
+++ b/tests/formatting/wpStripAllTags.php
@@ -86,7 +86,7 @@ class Tests_Formatting_wpStripAllTags extends WP_UnitTestCase {
 	}
 
 	/**
-	 * Data provider for test_wp_strip_all_tags_should_cast_scalar_values_to_string()/
+	 * Data provider for test_wp_strip_all_tags_should_cast_scalar_values_to_string().
 	 *
 	 * @return array[]
 	 */
diff --git a/tests/formatting/wpTexturize.php b/tests/formatting/wpTexturize.php
index 3202db4ba7..fa81245c83 100644
--- a/tests/formatting/wpTexturize.php
+++ b/tests/formatting/wpTexturize.php
@@ -1788,7 +1788,7 @@ class Tests_Formatting_wpTexturize extends WP_UnitTestCase {
 	}
 
 	/**
-	 * Extra sanity checks for _wptexturize_pushpop_element()
+	 * Extra confidence checks for _wptexturize_pushpop_element()
 	 *
 	 * @ticket 28483
 	 * @dataProvider data_element_stack
diff --git a/tests/functions.php b/tests/functions.php
index 5c8a1aa25f..ffc3eac05c 100644
--- a/tests/functions.php
+++ b/tests/functions.php
@@ -1,7 +1,7 @@
 <?php
 
 /**
- * @group functions.php
+ * @group functions
  */
 class Tests_Functions extends WP_UnitTestCase {
 	public function test_wp_parse_args_object() {
@@ -229,7 +229,7 @@ class Tests_Functions extends WP_UnitTestCase {
 
 		$testdir = DIR_TESTDATA . '/images/';
 
-		// Sanity check.
+		// Confidence check.
 		$this->assertSame( 'abcdefg.png', wp_unique_filename( $testdir, 'abcdefg.png' ), 'Test non-existing file, file name should be unchanged.' );
 
 		// Ensure correct images exist.
@@ -726,65 +726,6 @@ class Tests_Functions extends WP_UnitTestCase {
 		update_option( 'blog_charset', $orig_blog_charset );
 	}
 
-	/**
-	 * @ticket 43977
-	 * @dataProvider data_wp_parse_list
-	 */
-	public function test_wp_parse_list( $expected, $actual ) {
-		$this->assertSame( $expected, array_values( wp_parse_list( $actual ) ) );
-	}
-
-	public function data_wp_parse_list() {
-		return array(
-			array( array( '1', '2', '3', '4' ), '1,2,3,4' ),
-			array( array( 'apple', 'banana', 'carrot', 'dog' ), 'apple,banana,carrot,dog' ),
-			array( array( '1', '2', 'apple', 'banana' ), '1,2,apple,banana' ),
-			array( array( '1', '2', 'apple', 'banana' ), '1, 2,apple,banana' ),
-			array( array( '1', '2', 'apple', 'banana' ), '1,2,apple,,banana' ),
-			array( array( '1', '2', 'apple', 'banana' ), ',1,2,apple,banana' ),
-			array( array( '1', '2', 'apple', 'banana' ), '1,2,apple,banana,' ),
-			array( array( '1', '2', 'apple', 'banana' ), '1,2 ,apple,banana' ),
-			array( array(), '' ),
-			array( array(), ',' ),
-			array( array(), ',,' ),
-		);
-	}
-
-	/**
-	 * @dataProvider data_wp_parse_id_list
-	 */
-	public function test_wp_parse_id_list( $expected, $actual ) {
-		$this->assertSame( $expected, array_values( wp_parse_id_list( $actual ) ) );
-	}
-
-	public function data_wp_parse_id_list() {
-		return array(
-			array( array( 1, 2, 3, 4 ), '1,2,3,4' ),
-			array( array( 1, 2, 3, 4 ), '1, 2,,3,4' ),
-			array( array( 1, 2, 3, 4 ), '1,2,2,3,4' ),
-			array( array( 1, 2, 3, 4 ), array( '1', '2', '3', '4', '3' ) ),
-			array( array( 1, 2, 3, 4 ), array( 1, '2', 3, '4' ) ),
-			array( array( 1, 2, 3, 4 ), '-1,2,-3,4' ),
-			array( array( 1, 2, 3, 4 ), array( -1, 2, '-3', '4' ) ),
-		);
-	}
-
-	/**
-	 * @dataProvider data_wp_parse_slug_list
-	 */
-	public function test_wp_parse_slug_list( $expected, $actual ) {
-		$this->assertSame( $expected, array_values( wp_parse_slug_list( $actual ) ) );
-	}
-
-	public function data_wp_parse_slug_list() {
-		return array(
-			array( array( 'apple', 'banana', 'carrot', 'dog' ), 'apple,banana,carrot,dog' ),
-			array( array( 'apple', 'banana', 'carrot', 'dog' ), 'apple, banana,,carrot,dog' ),
-			array( array( 'apple', 'banana', 'carrot', 'dog' ), 'apple banana carrot dog' ),
-			array( array( 'apple', 'banana-carrot', 'd-o-g' ), array( 'apple ', 'banana carrot', 'd o g' ) ),
-		);
-	}
-
 	/**
 	 * @dataProvider data_device_can_upload
 	 */
@@ -1394,6 +1335,26 @@ class Tests_Functions extends WP_UnitTestCase {
 				DIR_TESTDATA . '/uploads/dashicons.woff',
 				false,
 			),
+			// Animated AVIF.
+			array(
+				DIR_TESTDATA . '/images/avif-animated.avif',
+				'image/avif',
+			),
+			// Lossless AVIF.
+			array(
+				DIR_TESTDATA . '/images/avif-lossless.avif',
+				'image/avif',
+			),
+			// Lossy AVIF.
+			array(
+				DIR_TESTDATA . '/images/avif-lossy.avif',
+				'image/avif',
+			),
+			// Transparent AVIF.
+			array(
+				DIR_TESTDATA . '/images/avif-transparent.avif',
+				'image/avif',
+			),
 		);
 
 		return $data;
@@ -1520,6 +1481,50 @@ class Tests_Functions extends WP_UnitTestCase {
 				DIR_TESTDATA . '/uploads/dashicons.woff',
 				false,
 			),
+			// Animated AVIF.
+			array(
+				DIR_TESTDATA . '/images/avif-animated.avif',
+				array(
+					150,
+					150,
+					IMAGETYPE_AVIF,
+					'width="150" height="150"',
+					'mime' => 'image/avif',
+				),
+			),
+			// Lossless AVIF.
+			array(
+				DIR_TESTDATA . '/images/avif-lossless.avif',
+				array(
+					400,
+					400,
+					IMAGETYPE_AVIF,
+					'width="400" height="400"',
+					'mime' => 'image/avif',
+				),
+			),
+			// Lossy AVIF.
+			array(
+				DIR_TESTDATA . '/images/avif-lossy.avif',
+				array(
+					400,
+					400,
+					IMAGETYPE_AVIF,
+					'width="400" height="400"',
+					'mime' => 'image/avif',
+				),
+			),
+			// Transparent AVIF.
+			array(
+				DIR_TESTDATA . '/images/avif-transparent.avif',
+				array(
+					128,
+					128,
+					IMAGETYPE_AVIF,
+					'width="128" height="128"',
+					'mime' => 'image/avif',
+				),
+			),
 		);
 
 		return $data;
diff --git a/tests/functions/absint.php b/tests/functions/absint.php
new file mode 100644
index 0000000000..1528a92f40
--- /dev/null
+++ b/tests/functions/absint.php
@@ -0,0 +1,81 @@
+<?php
+
+/**
+ * Tests for the absint function.
+ *
+ * @group functions
+ *
+ * @covers ::absint
+ */
+class Tests_Functions_absint extends WP_UnitTestCase {
+
+	/**
+	 * @ticket 60101
+	 *
+	 * @dataProvider data_absint
+	 */
+	public function test_absint( $maybe_int, $expected_value ) {
+
+		$this->assertEquals( $expected_value, absint( $maybe_int ) );
+	}
+
+	/**
+	 * @ticket 60101
+	 *
+	 * Returns an array of test data for the `data_absint` method.
+	 *
+	 * @return array[] An array of test data.
+	 */
+	public function data_absint() {
+		return array(
+			'1_int'                 => array(
+				'maybe_int'      => 1,
+				'expected_value' => 1,
+			),
+			'9.1_int'               => array(
+				'maybe_int'      => 9.1,
+				'expected_value' => 9,
+			),
+			'9.9_int'               => array(
+				'maybe_int'      => 9.9,
+				'expected_value' => 9,
+			),
+			'1_string'              => array(
+				'maybe_int'      => 1,
+				'expected_value' => '1',
+			),
+			'-1_int'                => array(
+				'maybe_int'      => 1,
+				'expected_value' => 1,
+			),
+			'-1_string'             => array(
+				'maybe_int'      => 1,
+				'expected_value' => 1,
+			),
+			'string'                => array(
+				'maybe_int'      => 'string',
+				'expected_value' => 0,
+			),
+			'999_string'            => array(
+				'maybe_int'      => '999_string',
+				'expected_value' => 999,
+			),
+			'string_1'              => array(
+				'maybe_int'      => 'string_1',
+				'expected_value' => 0,
+			),
+			'99 string with spaces' => array(
+				'maybe_int'      => '99 string with spaces',
+				'expected_value' => 99,
+			),
+			'array(99)'             => array(
+				'maybe_int'      => array( 99 ),
+				'expected_value' => 1,
+			),
+			'array("99")'           => array(
+				'maybe_int'      => array( '99' ),
+				'expected_value' => 1,
+			),
+		);
+	}
+}
diff --git a/tests/functions/addMagicQuotes.php b/tests/functions/addMagicQuotes.php
index 47085efe76..2ad1a4ed98 100644
--- a/tests/functions/addMagicQuotes.php
+++ b/tests/functions/addMagicQuotes.php
@@ -2,7 +2,8 @@
 
 /**
  * @group formatting
- * @group functions.php
+ * @group functions
+ *
  * @covers ::add_magic_quotes
  */
 class Tests_Functions_AddMagicQuotes extends WP_UnitTestCase {
@@ -20,7 +21,7 @@ class Tests_Functions_AddMagicQuotes extends WP_UnitTestCase {
 	}
 
 	/**
-	 * Data provider for test_add_magic_quotes.
+	 * Data provider for test_add_magic_quotes().
 	 *
 	 * @return array[] Test parameters {
 	 *     @type array $test_array Test value.
diff --git a/tests/functions/allowedProtocols.php b/tests/functions/allowedProtocols.php
index 8484024c86..4d4ecf5320 100644
--- a/tests/functions/allowedProtocols.php
+++ b/tests/functions/allowedProtocols.php
@@ -2,7 +2,8 @@
 
 /**
  * @group formatting
- * @group functions.php
+ * @group functions
+ *
  * @covers ::wp_allowed_protocols
  */
 class Tests_Functions_AllowedProtocols extends WP_UnitTestCase {
@@ -35,7 +36,11 @@ class Tests_Functions_AllowedProtocols extends WP_UnitTestCase {
 	}
 
 	/**
+	 * Data provider.
+	 *
 	 * @link http://www.iana.org/assignments/uri-schemes/uri-schemes.xhtml
+	 *
+	 * @return array[]
 	 */
 	public function data_example_urls() {
 		return array(
diff --git a/tests/functions/anonymization.php b/tests/functions/anonymization.php
index 7a4ff6a26b..c4b979bfe9 100644
--- a/tests/functions/anonymization.php
+++ b/tests/functions/anonymization.php
@@ -6,8 +6,9 @@
  *
  * @since 4.9.6
  *
- * @group functions.php
+ * @group functions
  * @group privacy
+ *
  * @covers ::wp_privacy_anonymize_data
  */
 class Tests_Functions_Anonymization extends WP_UnitTestCase {
@@ -40,8 +41,8 @@ class Tests_Functions_Anonymization extends WP_UnitTestCase {
 	 *
 	 * @return array {
 	 *     @type array {
-	 *         @string string $raw_ip          Raw IP address.
-	 *         @string string $expected_result Expected result.
+	 *         @type string $raw_ip          Raw IP address.
+	 *         @type string $expected_result Expected result.
 	 *     }
 	 * }
 	 */
@@ -194,8 +195,8 @@ class Tests_Functions_Anonymization extends WP_UnitTestCase {
 	 *
 	 * @return array {
 	 *     @type array {
-	 *         @string string $raw_ip          Raw IP address.
-	 *         @string string $expected_result Expected result.
+	 *         @type string $raw_ip          Raw IP address.
+	 *         @type string $expected_result Expected result.
 	 *     }
 	 * }
 	 */
diff --git a/tests/functions/canonicalCharset.php b/tests/functions/canonicalCharset.php
index 4a11e9c764..f13e0cca15 100644
--- a/tests/functions/canonicalCharset.php
+++ b/tests/functions/canonicalCharset.php
@@ -5,7 +5,8 @@
  *
  * @since 4.8.0
  *
- * @group functions.php
+ * @group functions
+ *
  * @covers ::_canonical_charset
  */
 class Tests_Functions_CanonicalCharset extends WP_UnitTestCase {
diff --git a/tests/functions/cleanDirsizeCache.php b/tests/functions/cleanDirsizeCache.php
index c10dc8b97b..f4f1f6a788 100644
--- a/tests/functions/cleanDirsizeCache.php
+++ b/tests/functions/cleanDirsizeCache.php
@@ -3,7 +3,9 @@
 /**
  * Tests specific to the directory size caching.
  *
- * @group functions.php
+ * @group functions
+ *
+ * @covers ::clean_dirsize_cache
  */
 class Tests_Functions_CleanDirsizeCache extends WP_UnitTestCase {
 
@@ -12,8 +14,6 @@ class Tests_Functions_CleanDirsizeCache extends WP_UnitTestCase {
 	 *
 	 * @ticket 52241
 	 *
-	 * @covers ::clean_dirsize_cache
-	 *
 	 * @dataProvider data_clean_dirsize_cache_with_invalid_inputs
 	 *
 	 * @param mixed  $path             Path input to use in the test.
@@ -57,8 +57,6 @@ class Tests_Functions_CleanDirsizeCache extends WP_UnitTestCase {
 	 *
 	 * @ticket 52241
 	 *
-	 * @covers ::clean_dirsize_cache
-	 *
 	 * @dataProvider data_clean_dirsize_cache_with_non_path_string
 	 *
 	 * @param string $path           Path input to use in the test.
diff --git a/tests/functions/cleanupHeaderComment.php b/tests/functions/cleanupHeaderComment.php
index 06af432fd1..95c1b88d20 100644
--- a/tests/functions/cleanupHeaderComment.php
+++ b/tests/functions/cleanupHeaderComment.php
@@ -5,7 +5,8 @@
  * @ticket 8497
  * @ticket 38101
  *
- * @group functions.php
+ * @group functions
+ *
  * @covers ::_cleanup_header_comment
  */
 class Tests_Functions_CleanupHeaderComment extends WP_UnitTestCase {
diff --git a/tests/functions/deleteOptionFreshSite.php b/tests/functions/deleteOptionFreshSite.php
new file mode 100644
index 0000000000..c9f44e293d
--- /dev/null
+++ b/tests/functions/deleteOptionFreshSite.php
@@ -0,0 +1,25 @@
+<?php
+
+/**
+ * Tests for _delete_option_fresh_site function.
+ *
+ * @group functions
+ *
+ * @covers ::_delete_option_fresh_site
+ */
+class Tests_Functions_DeleteOptionFreshSite extends WP_UnitTestCase {
+
+	/**
+	 * @ticket 57191
+	 */
+	public function test_delete_option_fresh_site() {
+		$current_option = get_option( 'fresh_site' );
+		update_option( 'fresh_site', '1' );
+
+		_delete_option_fresh_site();
+		$actual = get_option( 'fresh_site' );
+		update_option( 'fresh_site', $current_option );
+
+		$this->assertSame( '0', $actual );
+	}
+}
diff --git a/tests/functions/doEnclose.php b/tests/functions/doEnclose.php
index d906ed6f61..6d36fd373a 100644
--- a/tests/functions/doEnclose.php
+++ b/tests/functions/doEnclose.php
@@ -7,8 +7,9 @@
  *
  * @since 5.3.0
  *
- * @group functions.php
+ * @group functions
  * @group post
+ *
  * @covers ::do_enclose
  */
 class Tests_Functions_DoEnclose extends WP_UnitTestCase {
diff --git a/tests/functions/getNonCachedIds.php b/tests/functions/getNonCachedIds.php
index 07943bbdc8..0f6b93227d 100644
--- a/tests/functions/getNonCachedIds.php
+++ b/tests/functions/getNonCachedIds.php
@@ -4,6 +4,7 @@
  *
  * @package WordPress
  *
+ * @group functions
  * @group cache
  *
  * @covers ::_get_non_cached_ids
diff --git a/tests/functions/getStatusHeaderDesc.php b/tests/functions/getStatusHeaderDesc.php
index c3826c5dc8..1bcc6b4864 100644
--- a/tests/functions/getStatusHeaderDesc.php
+++ b/tests/functions/getStatusHeaderDesc.php
@@ -5,7 +5,8 @@
  *
  * @since 5.3.0
  *
- * @group functions.php
+ * @group functions
+ *
  * @covers ::get_status_header_desc
  */
 class Tests_Functions_GetStatusHeaderDesc extends WP_UnitTestCase {
@@ -23,7 +24,7 @@ class Tests_Functions_GetStatusHeaderDesc extends WP_UnitTestCase {
 	/**
 	 * Data provider for test_get_status_header_desc().
 	 *
-	 * @return array
+	 * @return array[]
 	 */
 	public function data_get_status_header_desc() {
 		return array(
diff --git a/tests/functions/getWeekstartend.php b/tests/functions/getWeekstartend.php
index 3b162b8401..45d10a9253 100644
--- a/tests/functions/getWeekstartend.php
+++ b/tests/functions/getWeekstartend.php
@@ -1,7 +1,8 @@
 <?php
 
 /**
- * @group functions.php
+ * @group functions
+ *
  * @covers ::get_weekstartend
  */
 class Tests_Functions_GetWeekstartend extends WP_UnitTestCase {
diff --git a/tests/functions/isNewDay.php b/tests/functions/isNewDay.php
index b1993e09e1..27c9b5232f 100644
--- a/tests/functions/isNewDay.php
+++ b/tests/functions/isNewDay.php
@@ -4,7 +4,8 @@
  *
  * @since 5.2.0
  *
- * @group functions.php
+ * @group functions
+ *
  * @covers ::is_new_day
  */
 class Tests_Functions_IsNewDate extends WP_UnitTestCase {
@@ -26,6 +27,11 @@ class Tests_Functions_IsNewDate extends WP_UnitTestCase {
 		$this->assertSame( $expected, is_new_day() );
 	}
 
+	/**
+	 * Data provider.
+	 *
+	 * @return array[]
+	 */
 	public function data_is_new_date() {
 		return array(
 			array( '21.05.19', '21.05.19', 0 ),
diff --git a/tests/functions/isPhpVersionCompatible.php b/tests/functions/isPhpVersionCompatible.php
index e455cde9ef..e471a2ea98 100644
--- a/tests/functions/isPhpVersionCompatible.php
+++ b/tests/functions/isPhpVersionCompatible.php
@@ -3,7 +3,8 @@
 /**
  * Tests the is_php_version_compatible() function.
  *
- * @group functions.php
+ * @group functions
+ *
  * @covers ::is_php_version_compatible
  */
 class Tests_Functions_IsPhpVersionCompatible extends WP_UnitTestCase {
@@ -24,7 +25,7 @@ class Tests_Functions_IsPhpVersionCompatible extends WP_UnitTestCase {
 	/**
 	 * Data provider.
 	 *
-	 * @return array
+	 * @return array[]
 	 */
 	public function data_is_php_version_compatible() {
 		$php_version = PHP_VERSION;
diff --git a/tests/functions/isSerialized.php b/tests/functions/isSerialized.php
index 8ecbd5273c..fdc7e124fb 100644
--- a/tests/functions/isSerialized.php
+++ b/tests/functions/isSerialized.php
@@ -5,7 +5,8 @@
  *
  * @ticket 53299
  *
- * @group functions.php
+ * @group functions
+ *
  * @covers ::is_serialized
  */
 class Tests_Functions_IsSerialized extends WP_UnitTestCase {
@@ -24,7 +25,7 @@ class Tests_Functions_IsSerialized extends WP_UnitTestCase {
 	/**
 	 * Data provider for `test_is_serialized()`.
 	 *
-	 * @return array
+	 * @return array[]
 	 */
 	public function data_is_serialized() {
 		return array(
@@ -96,7 +97,7 @@ class Tests_Functions_IsSerialized extends WP_UnitTestCase {
 	/**
 	 * Data provider for `test_is_serialized()`.
 	 *
-	 * @return array
+	 * @return array[]
 	 */
 	public function data_is_not_serialized() {
 		return array(
@@ -191,6 +192,11 @@ class Tests_Functions_IsSerialized extends WP_UnitTestCase {
 		$this->assertTrue( is_serialized( $value ) );
 	}
 
+	/**
+	 * Data provider.
+	 *
+	 * @return array[]
+	 */
 	public function data_is_serialized_should_return_true_for_large_floats() {
 		return array(
 			array( serialize( 1.7976931348623157E+308 ) ),
diff --git a/tests/functions/isSerializedString.php b/tests/functions/isSerializedString.php
index f8f33a2c33..cc0099e96b 100644
--- a/tests/functions/isSerializedString.php
+++ b/tests/functions/isSerializedString.php
@@ -5,7 +5,8 @@
  *
  * @ticket 42870
  *
- * @group functions.php
+ * @group functions
+ *
  * @covers ::is_serialized_string
  */
 class Tests_Functions_IsSerializedString extends WP_UnitTestCase {
@@ -23,7 +24,7 @@ class Tests_Functions_IsSerializedString extends WP_UnitTestCase {
 	/**
 	 * Data provider for `test_is_serialized_string()`.
 	 *
-	 * @return array
+	 * @return array[]
 	 */
 	public function data_is_serialized_string() {
 		return array(
diff --git a/tests/functions/isWpVersionCompatible.php b/tests/functions/isWpVersionCompatible.php
index 6a6b424e92..599f3b29f0 100644
--- a/tests/functions/isWpVersionCompatible.php
+++ b/tests/functions/isWpVersionCompatible.php
@@ -3,7 +3,8 @@
 /**
  * Tests the is_wp_version_compatible() function.
  *
- * @group functions.php
+ * @group functions
+ *
  * @covers ::is_wp_version_compatible
  */
 class Tests_Functions_IsWpVersionCompatible extends WP_UnitTestCase {
@@ -24,7 +25,7 @@ class Tests_Functions_IsWpVersionCompatible extends WP_UnitTestCase {
 	/**
 	 * Data provider.
 	 *
-	 * @return array
+	 * @return array[]
 	 */
 	public function data_is_wp_version_compatible() {
 		global $wp_version;
@@ -42,51 +43,140 @@ class Tests_Functions_IsWpVersionCompatible extends WP_UnitTestCase {
 
 		return array(
 			// Happy paths.
-			'the same version'          => array(
+			'the same version'                => array(
 				'required' => $wp_version,
 				'expected' => true,
 			),
-			'a lower required version'  => array(
+			'a lower required version'        => array(
 				'required' => $lower_version,
 				'expected' => true,
 			),
-			'a higher required version' => array(
+			'a higher required version'       => array(
 				'required' => $higher_version,
 				'expected' => false,
 			),
 
+			// Acceptable versions containing '.0'.
+			'correct version ending with x.0' => array(
+				'required' => '5.0',
+				'expected' => true,
+			),
+			'correct version with x.0.x in middle of version' => array(
+				'required' => '5.0.1',
+				'expected' => true,
+			),
+
 			// Falsey values.
-			'false'                     => array(
+			'false'                           => array(
 				'required' => false,
 				'expected' => true,
 			),
-			'null'                      => array(
+			'null'                            => array(
 				'required' => null,
 				'expected' => true,
 			),
-			'0 int'                     => array(
+			'0 int'                           => array(
 				'required' => 0,
 				'expected' => true,
 			),
-			'0.0 float'                 => array(
+			'0.0 float'                       => array(
 				'required' => 0.0,
 				'expected' => true,
 			),
-			'0 string'                  => array(
+			'0 string'                        => array(
 				'required' => '0',
 				'expected' => true,
 			),
-			'empty string'              => array(
+			'empty string'                    => array(
 				'required' => '',
 				'expected' => true,
 			),
-			'empty array'               => array(
+			'empty array'                     => array(
 				'required' => array(),
 				'expected' => true,
 			),
 		);
 	}
 
+	/**
+	 * Tests that is_wp_version_compatible() gracefully handles incorrect version numbering.
+	 *
+	 * @dataProvider data_is_wp_version_compatible_should_gracefully_handle_trailing_point_zero_version_numbers
+	 *
+	 * @ticket 59448
+	 *
+	 * @param mixed  $required The minimum required WordPress version.
+	 * @param string $wp       The value for the $wp_version global variable.
+	 * @param bool   $expected The expected result.
+	 */
+	public function test_is_wp_version_compatible_should_gracefully_handle_trailing_point_zero_version_numbers( $required, $wp, $expected ) {
+		global $wp_version;
+		$original_version = $wp_version;
+		$wp_version       = $wp;
+
+		$actual = is_wp_version_compatible( $required );
+
+		// Reset the version before the assertion in case of failure.
+		$wp_version = $original_version;
+
+		$this->assertSame( $expected, $actual, 'The expected result was not returned.' );
+	}
+
+	/**
+	 * Data provider.
+	 *
+	 * @return array[]
+	 */
+	public function data_is_wp_version_compatible_should_gracefully_handle_trailing_point_zero_version_numbers() {
+		return array(
+			'an incorrect trailing .0 and the same version' => array(
+				'required' => '5.2.0',
+				'wp'       => '5.2',
+				'expected' => true,
+			),
+			'an incorrect trailing .0 and the same x.0 version' => array(
+				'required' => '5.0.0',
+				'wp'       => '5.0',
+				'expected' => true,
+			),
+			'an incorrect trailing .0 and space and same x.0 version' => array(
+				'required' => '5.0.0 ',
+				'wp'       => '5.0',
+				'expected' => true,
+			),
+			'incorrect preceding and trailing spaces trailing .0' => array(
+				'required' => ' 5.0.0 ',
+				'wp'       => '5.0',
+				'expected' => true,
+			),
+			'an incorrect trailing .0 on x.0.x version'    => array(
+				'required' => '5.0.1.0',
+				'wp'       => '5.0.1',
+				'expected' => true,
+			),
+			'an incorrect trailing .0 and an earlier version' => array(
+				'required' => '5.0.0',
+				'wp'       => '4.0',
+				'expected' => false,
+			),
+			'an incorrect trailing .0 and an earlier x.0 version' => array(
+				'required' => '5.0.0',
+				'wp'       => '4.0',
+				'expected' => false,
+			),
+			'an incorrect trailing .0 and a later version' => array(
+				'required' => '5.0.0',
+				'wp'       => '6.0',
+				'expected' => true,
+			),
+			'an incorrect trailing .0 and a later x.0 version' => array(
+				'required' => '5.0.0',
+				'wp'       => '6.0',
+				'expected' => true,
+			),
+		);
+	}
+
 	/**
 	 * Tests is_wp_version_compatible() with development versions.
 	 *
@@ -114,7 +204,7 @@ class Tests_Functions_IsWpVersionCompatible extends WP_UnitTestCase {
 	/**
 	 * Data provider.
 	 *
-	 * @return array
+	 * @return array[]
 	 */
 	public function data_is_wp_version_compatible_with_development_versions() {
 		global $wp_version;
diff --git a/tests/functions/listFiles.php b/tests/functions/listFiles.php
index bfdd080f8b..a7e7346956 100644
--- a/tests/functions/listFiles.php
+++ b/tests/functions/listFiles.php
@@ -3,7 +3,8 @@
 /**
  * Test list_files().
  *
- * @group functions.php
+ * @group functions
+ *
  * @covers ::list_files
  */
 class Tests_Functions_ListFiles extends WP_UnitTestCase {
diff --git a/tests/functions/maybeSerialize.php b/tests/functions/maybeSerialize.php
index e8986d9818..ce38f1ad85 100644
--- a/tests/functions/maybeSerialize.php
+++ b/tests/functions/maybeSerialize.php
@@ -3,7 +3,8 @@
 /**
  * Tests for `maybe_serialize()` and `maybe_unserialize()`.
  *
- * @group functions.php
+ * @group functions
+ *
  * @covers ::maybe_serialize
  * @covers ::maybe_unserialize
  */
@@ -52,7 +53,7 @@ class Tests_Functions_MaybeSerialize extends WP_UnitTestCase {
 	/**
 	 * Data provider for `test_maybe_unserialize()`.
 	 *
-	 * @return array
+	 * @return array[]
 	 */
 	public function data_is_serialized() {
 		return array(
@@ -120,7 +121,7 @@ class Tests_Functions_MaybeSerialize extends WP_UnitTestCase {
 	/**
 	 * Data provider for `test_maybe_serialize()`.
 	 *
-	 * @return array
+	 * @return array[]
 	 */
 	public function data_is_not_serialized() {
 		return array(
@@ -228,7 +229,7 @@ class Tests_Functions_MaybeSerialize extends WP_UnitTestCase {
 	/**
 	 * Data provider for test_deserialize_request_utility_filtered_iterator_objects().
 	 *
-	 * @return array
+	 * @return array[]
 	 */
 	public function data_serialize_deserialize_objects() {
 		return array(
diff --git a/tests/functions/mceSetDirection.php b/tests/functions/mceSetDirection.php
new file mode 100644
index 0000000000..485dd06dcc
--- /dev/null
+++ b/tests/functions/mceSetDirection.php
@@ -0,0 +1,42 @@
+<?php
+
+/**
+ * Tests for the _mce_set_direction() function.
+ *
+ * @group functions
+ *
+ * @covers ::_mce_set_direction
+ */
+class Tests_Functions_MceSetDirection extends WP_UnitTestCase {
+
+	/**
+	 * @ticket 60219
+	 */
+	public function test__mce_set_direction() {
+		global $wp_locale;
+
+		$mce_init = array(
+			'directionality' => 'ltr',
+			'rtl_ui'         => false,
+			'plugins'        => 'plugins',
+			'toolbar1'       => 'toolbar1',
+		);
+
+		$expected = array(
+			'directionality' => 'rtl',
+			'rtl_ui'         => true,
+			'plugins'        => 'plugins,directionality',
+			'toolbar1'       => 'toolbar1,ltr',
+		);
+
+		$actual = _mce_set_direction( $mce_init );
+		$this->assertSameSets( $mce_init, $actual, 'An unexpected LTR result was returned.' );
+
+		$orig_text_dir             = $wp_locale->text_direction;
+		$wp_locale->text_direction = 'rtl';
+		$actual                    = _mce_set_direction( $mce_init );
+		$wp_locale->text_direction = $orig_text_dir;
+
+		$this->assertSameSets( $expected, $actual, 'An unexpected RTL result was returned.' );
+	}
+}
diff --git a/tests/functions/numberFormatI18n.php b/tests/functions/numberFormatI18n.php
index c57405887d..fbddcacf7b 100644
--- a/tests/functions/numberFormatI18n.php
+++ b/tests/functions/numberFormatI18n.php
@@ -3,8 +3,9 @@
 /**
  * Tests for number_format_i18n()
  *
- * @group functions.php
+ * @group functions
  * @group i18n
+ *
  * @covers ::number_format_i18n
  */
 class Tests_Functions_NumberFormatI18n extends WP_UnitTestCase {
diff --git a/tests/functions/pluginBasename.php b/tests/functions/pluginBasename.php
index d28cf914cf..ac41348c4c 100644
--- a/tests/functions/pluginBasename.php
+++ b/tests/functions/pluginBasename.php
@@ -3,8 +3,9 @@
 /**
  * Tests for plugin_basename()
  *
- * @group functions.php
+ * @group functions
  * @group plugins
+ *
  * @covers ::plugin_basename
  */
 class Tests_Functions_PluginBasename extends WP_UnitTestCase {
diff --git a/tests/functions/referer.php b/tests/functions/referer.php
index 0abe528c48..d73360a0a0 100644
--- a/tests/functions/referer.php
+++ b/tests/functions/referer.php
@@ -3,7 +3,8 @@
 /**
  * Test wp_get_referer().
  *
- * @group functions.php
+ * @group functions
+ *
  * @covers ::wp_get_referer
  * @covers ::wp_get_raw_referer
  */
diff --git a/tests/functions/removeQueryArg.php b/tests/functions/removeQueryArg.php
index 8d05a6c230..43252fc11c 100644
--- a/tests/functions/removeQueryArg.php
+++ b/tests/functions/removeQueryArg.php
@@ -1,7 +1,8 @@
 <?php
 
 /**
- * @group functions.php
+ * @group functions
+ *
  * @covers ::remove_query_arg
  */
 class Tests_Functions_RemoveQueryArg extends WP_UnitTestCase {
@@ -16,6 +17,11 @@ class Tests_Functions_RemoveQueryArg extends WP_UnitTestCase {
 		$this->assertSame( $expected, $actual );
 	}
 
+	/**
+	 * Data provider.
+	 *
+	 * @return array[]
+	 */
 	public function data_remove_query_arg() {
 		return array(
 			array( 'foo', 'edit.php?foo=test1&baz=test1', 'edit.php?baz=test1' ),
diff --git a/tests/functions/sizeFormat.php b/tests/functions/sizeFormat.php
index bed09d15aa..7713418863 100644
--- a/tests/functions/sizeFormat.php
+++ b/tests/functions/sizeFormat.php
@@ -7,11 +7,17 @@
  * @ticket 36635
  * @ticket 40875
  *
- * @group functions.php
+ * @group functions
+ *
  * @covers ::size_format
  */
 class Tests_Functions_SizeFormat extends WP_UnitTestCase {
 
+	/**
+	 * Data provider.
+	 *
+	 * @return array[]
+	 */
 	public function data_size_format() {
 		return array(
 			// Invalid values.
diff --git a/tests/functions/underscoreReturn.php b/tests/functions/underscoreReturn.php
index 4973c2d328..86c6ca1e45 100644
--- a/tests/functions/underscoreReturn.php
+++ b/tests/functions/underscoreReturn.php
@@ -4,7 +4,7 @@
  *
  * @since 5.1.0
  *
- * @group functions.php
+ * @group functions
  */
 class Tests_Functions_UnderscoreReturn extends WP_UnitTestCase {
 
diff --git a/tests/functions/wp.php b/tests/functions/wp.php
index 14356a4ebc..984e754fc9 100644
--- a/tests/functions/wp.php
+++ b/tests/functions/wp.php
@@ -1,8 +1,9 @@
 <?php
 
 /**
- * @group functions.php
+ * @group functions
  * @group query
+ *
  * @covers ::wp
  */
 class Tests_Functions_WP extends WP_UnitTestCase {
diff --git a/tests/functions/wpAdminNotice.php b/tests/functions/wpAdminNotice.php
index 2756ab1de9..e2b694d726 100644
--- a/tests/functions/wpAdminNotice.php
+++ b/tests/functions/wpAdminNotice.php
@@ -1,326 +1,326 @@
-<?php
-
-/**
- * Tests for `wp_admin_notice()`.
- *
- * @group functions.php
- *
- * @covers ::wp_admin_notice
- */
-class Tests_Functions_WpAdminNotice extends WP_UnitTestCase {
-
-	/**
-	 * Tests that `wp_admin_notice()` outputs the expected admin notice markup.
-	 *
-	 * @ticket 57791
-	 *
-	 * @dataProvider data_should_output_admin_notice
-	 *
-	 * @param string $message  The message to output.
-	 * @param array  $args     Arguments for the admin notice.
-	 * @param string $expected The expected admin notice markup.
-	 */
-	public function test_should_output_admin_notice( $message, $args, $expected ) {
-		ob_start();
-		wp_admin_notice( $message, $args );
-		$actual = ob_get_clean();
-
-		$this->assertSame( $expected, $actual );
-	}
-
-	/**
-	 * Data provider.
-	 *
-	 * @return array[]
-	 */
-	public function data_should_output_admin_notice() {
-		return array(
-			'defaults'                                  => array(
-				'message'  => 'A notice with defaults.',
-				'args'     => array(),
-				'expected' => '<div class="notice"><p>A notice with defaults.</p></div>',
-			),
-			'an empty message (used for templates)'     => array(
-				'message'  => '',
-				'args'     => array(
-					'type'               => 'error',
-					'dismissible'        => true,
-					'id'                 => 'message',
-					'additional_classes' => array( 'inline', 'hidden' ),
-				),
-				'expected' => '<div id="message" class="notice notice-error is-dismissible inline hidden"><p></p></div>',
-			),
-			'an empty message (used for templates) without paragraph wrapping' => array(
-				'message'  => '',
-				'args'     => array(
-					'type'               => 'error',
-					'dismissible'        => true,
-					'id'                 => 'message',
-					'additional_classes' => array( 'inline', 'hidden' ),
-					'paragraph_wrap'     => false,
-				),
-				'expected' => '<div id="message" class="notice notice-error is-dismissible inline hidden"></div>',
-			),
-			'an "error" notice'                         => array(
-				'message'  => 'An "error" notice.',
-				'args'     => array(
-					'type' => 'error',
-				),
-				'expected' => '<div class="notice notice-error"><p>An "error" notice.</p></div>',
-			),
-			'a "success" notice'                        => array(
-				'message'  => 'A "success" notice.',
-				'args'     => array(
-					'type' => 'success',
-				),
-				'expected' => '<div class="notice notice-success"><p>A "success" notice.</p></div>',
-			),
-			'a "warning" notice'                        => array(
-				'message'  => 'A "warning" notice.',
-				'args'     => array(
-					'type' => 'warning',
-				),
-				'expected' => '<div class="notice notice-warning"><p>A "warning" notice.</p></div>',
-			),
-			'an "info" notice'                          => array(
-				'message'  => 'An "info" notice.',
-				'args'     => array(
-					'type' => 'info',
-				),
-				'expected' => '<div class="notice notice-info"><p>An "info" notice.</p></div>',
-			),
-			'a type that already starts with "notice-"' => array(
-				'message'  => 'A type that already starts with "notice-".',
-				'args'     => array(
-					'type' => 'notice-info',
-				),
-				'expected' => '<div class="notice notice-notice-info"><p>A type that already starts with "notice-".</p></div>',
-			),
-			'a dismissible notice'                      => array(
-				'message'  => 'A dismissible notice.',
-				'args'     => array(
-					'dismissible' => true,
-				),
-				'expected' => '<div class="notice is-dismissible"><p>A dismissible notice.</p></div>',
-			),
-			'no type and an ID'                         => array(
-				'message'  => 'A notice with an ID.',
-				'args'     => array(
-					'id' => 'message',
-				),
-				'expected' => '<div id="message" class="notice"><p>A notice with an ID.</p></div>',
-			),
-			'a type and an ID'                          => array(
-				'message'  => 'A warning notice with an ID.',
-				'args'     => array(
-					'type' => 'warning',
-					'id'   => 'message',
-				),
-				'expected' => '<div id="message" class="notice notice-warning"><p>A warning notice with an ID.</p></div>',
-			),
-			'no type and additional classes'            => array(
-				'message'  => 'A notice with additional classes.',
-				'args'     => array(
-					'additional_classes' => array( 'error', 'notice-alt' ),
-				),
-				'expected' => '<div class="notice error notice-alt"><p>A notice with additional classes.</p></div>',
-			),
-			'a type and additional classes'             => array(
-				'message'  => 'A warning notice with additional classes.',
-				'args'     => array(
-					'type'               => 'warning',
-					'additional_classes' => array( 'error', 'notice-alt' ),
-				),
-				'expected' => '<div class="notice notice-warning error notice-alt"><p>A warning notice with additional classes.</p></div>',
-			),
-			'a dismissible notice with a type and additional classes' => array(
-				'message'  => 'A dismissible warning notice with a type and additional classes.',
-				'args'     => array(
-					'type'               => 'warning',
-					'dismissible'        => true,
-					'additional_classes' => array( 'error', 'notice-alt' ),
-				),
-				'expected' => '<div class="notice notice-warning is-dismissible error notice-alt"><p>A dismissible warning notice with a type and additional classes.</p></div>',
-			),
-			'a notice without paragraph wrapping'       => array(
-				'message'  => '<span>A notice without paragraph wrapping.</span>',
-				'args'     => array(
-					'paragraph_wrap' => false,
-				),
-				'expected' => '<div class="notice"><span>A notice without paragraph wrapping.</span></div>',
-			),
-			'an unsafe type'                            => array(
-				'message'  => 'A notice with an unsafe type.',
-				'args'     => array(
-					'type' => '"><script>alert("Howdy,admin!");</script>',
-				),
-				'expected' => '<div class="notice notice-">alert("Howdy,admin!");"&gt;<p>A notice with an unsafe type.</p></div>',
-			),
-			'an unsafe ID'                              => array(
-				'message'  => 'A notice with an unsafe ID.',
-				'args'     => array(
-					'id' => '"><script>alert( "Howdy, admin!" );</script> <div class="notice',
-				),
-				'expected' => '<div id="">alert( "Howdy, admin!" ); <div class="notice"><p>A notice with an unsafe ID.</p></div>',
-			),
-			'unsafe additional classes'                 => array(
-				'message'  => 'A notice with unsafe additional classes.',
-				'args'     => array(
-					'additional_classes' => array( '"><script>alert( "Howdy, admin!" );</script> <div class="notice' ),
-				),
-				'expected' => '<div class="notice ">alert( "Howdy, admin!" ); <div class="notice"><p>A notice with unsafe additional classes.</p></div>',
-			),
-			'a type that is not a string'               => array(
-				'message'  => 'A notice with a type that is not a string.',
-				'args'     => array(
-					'type' => array(),
-				),
-				'expected' => '<div class="notice"><p>A notice with a type that is not a string.</p></div>',
-			),
-			'a type with only empty space'              => array(
-				'message'  => 'A notice with a type with only empty space.',
-				'args'     => array(
-					'type' => " \t\r\n",
-				),
-				'expected' => '<div class="notice"><p>A notice with a type with only empty space.</p></div>',
-			),
-			'an ID that is not a string'                => array(
-				'message'  => 'A notice with an ID that is not a string.',
-				'args'     => array(
-					'id' => array( 'message' ),
-				),
-				'expected' => '<div class="notice"><p>A notice with an ID that is not a string.</p></div>',
-			),
-			'an ID with only empty space'               => array(
-				'message'  => 'A notice with an ID with only empty space.',
-				'args'     => array(
-					'id' => " \t\r\n",
-				),
-				'expected' => '<div class="notice"><p>A notice with an ID with only empty space.</p></div>',
-			),
-			'dismissible as a truthy value rather than (bool) true' => array(
-				'message'  => 'A notice with dismissible as a truthy value rather than (bool) true.',
-				'args'     => array(
-					'dismissible' => 1,
-				),
-				'expected' => '<div class="notice"><p>A notice with dismissible as a truthy value rather than (bool) true.</p></div>',
-			),
-			'additional classes that are not an array'  => array(
-				'message'  => 'A notice with additional classes that are not an array.',
-				'args'     => array(
-					'additional_classes' => 'class-1 class-2 class-3',
-				),
-				'expected' => '<div class="notice"><p>A notice with additional classes that are not an array.</p></div>',
-			),
-			'additional attribute with a value'         => array(
-				'message'  => 'A notice with an additional attribute with a value.',
-				'args'     => array(
-					'attributes' => array( 'aria-live' => 'assertive' ),
-				),
-				'expected' => '<div class="notice" aria-live="assertive"><p>A notice with an additional attribute with a value.</p></div>',
-			),
-			'additional hidden attribute'               => array(
-				'message'  => 'A notice with the hidden attribute.',
-				'args'     => array(
-					'attributes' => array( 'hidden' => true ),
-				),
-				'expected' => '<div class="notice" hidden><p>A notice with the hidden attribute.</p></div>',
-			),
-			'additional attribute no associative keys'  => array(
-				'message'  => 'A notice with a boolean attribute without an associative key.',
-				'args'     => array(
-					'attributes' => array( 'hidden' ),
-				),
-				'expected' => '<div class="notice" hidden><p>A notice with a boolean attribute without an associative key.</p></div>',
-			),
-			'additional attribute with role'            => array(
-				'message'  => 'A notice with an additional attribute role.',
-				'args'     => array(
-					'attributes' => array( 'role' => 'alert' ),
-				),
-				'expected' => '<div class="notice" role="alert"><p>A notice with an additional attribute role.</p></div>',
-			),
-			'multiple additional attributes'            => array(
-				'message'  => 'A notice with multiple additional attributes.',
-				'args'     => array(
-					'attributes' => array(
-						'role'      => 'alert',
-						'data-test' => -1,
-					),
-				),
-				'expected' => '<div class="notice" role="alert" data-test="-1"><p>A notice with multiple additional attributes.</p></div>',
-			),
-			'data attribute with unsafe value'          => array(
-				'message'  => 'A notice with an additional attribute with an unsafe value.',
-				'args'     => array(
-					'attributes' => array( 'data-unsafe' => '<script>alert( "Howdy, admin!" );</script>' ),
-				),
-				'expected' => '<div class="notice" data-unsafe="&lt;script&gt;alert( &quot;Howdy, admin!&quot; );&lt;/script&gt;"><p>A notice with an additional attribute with an unsafe value.</p></div>',
-			),
-			'additional invalid attribute'              => array(
-				'message'  => 'A notice with an additional attribute that is invalid.',
-				'args'     => array(
-					'attributes' => array( 'not-valid' => 'not-valid' ),
-				),
-				'expected' => '<div class="notice"><p>A notice with an additional attribute that is invalid.</p></div>',
-			),
-			'multiple attributes with "role", invalid, data-*, numeric, and boolean' => array(
-				'message'  => 'A notice with multiple attributes with "role", invalid, "data-*", numeric, and boolean.',
-				'args'     => array(
-					'attributes' => array(
-						'role'      => 'alert',
-						'disabled'  => 'disabled',
-						'data-name' => 'my-name',
-						'data-id'   => 1,
-						'hidden',
-					),
-				),
-				'expected' => '<div class="notice" role="alert" data-name="my-name" data-id="1" hidden><p>A notice with multiple attributes with "role", invalid, "data-*", numeric, and boolean.</p></div>',
-			),
-			'paragraph wrapping as a falsy value rather than (bool) false' => array(
-				'message'  => 'A notice with paragraph wrapping as a falsy value rather than (bool) false.',
-				'args'     => array(
-					'paragraph_wrap' => 0,
-				),
-				'expected' => '<div class="notice"><p>A notice with paragraph wrapping as a falsy value rather than (bool) false.</p></div>',
-			),
-		);
-	}
-
-	/**
-	 * Tests that `_doing_it_wrong()` is thrown when a 'type' containing spaces is passed.
-	 *
-	 * @ticket 57791
-	 *
-	 * @expectedIncorrectUsage wp_get_admin_notice
-	 */
-	public function test_should_throw_doing_it_wrong_with_a_type_containing_spaces() {
-		ob_start();
-		wp_admin_notice(
-			'A type containing spaces.',
-			array( 'type' => 'first second third fourth' )
-		);
-		$actual = ob_get_clean();
-
-		$this->assertSame(
-			'<div class="notice notice-first second third fourth"><p>A type containing spaces.</p></div>',
-			$actual
-		);
-	}
-
-	/**
-	 * Tests that `wp_admin_notice()` fires the 'wp_admin_notice' action.
-	 *
-	 * @ticket 57791
-	 */
-	public function test_should_fire_wp_admin_notice_action() {
-		$action = new MockAction();
-		add_action( 'wp_admin_notice', array( $action, 'action' ) );
-
-		ob_start();
-		wp_admin_notice( 'A notice.', array( 'type' => 'success' ) );
-		ob_end_clean();
-
-		$this->assertSame( 1, $action->get_call_count() );
-	}
-}
+<?php
+
+/**
+ * Tests for `wp_admin_notice()`.
+ *
+ * @group functions
+ *
+ * @covers ::wp_admin_notice
+ */
+class Tests_Functions_WpAdminNotice extends WP_UnitTestCase {
+
+	/**
+	 * Tests that `wp_admin_notice()` outputs the expected admin notice markup.
+	 *
+	 * @ticket 57791
+	 *
+	 * @dataProvider data_should_output_admin_notice
+	 *
+	 * @param string $message  The message to output.
+	 * @param array  $args     Arguments for the admin notice.
+	 * @param string $expected The expected admin notice markup.
+	 */
+	public function test_should_output_admin_notice( $message, $args, $expected ) {
+		ob_start();
+		wp_admin_notice( $message, $args );
+		$actual = ob_get_clean();
+
+		$this->assertSame( $expected, $actual );
+	}
+
+	/**
+	 * Data provider.
+	 *
+	 * @return array[]
+	 */
+	public function data_should_output_admin_notice() {
+		return array(
+			'defaults'                                  => array(
+				'message'  => 'A notice with defaults.',
+				'args'     => array(),
+				'expected' => '<div class="notice"><p>A notice with defaults.</p></div>',
+			),
+			'an empty message (used for templates)'     => array(
+				'message'  => '',
+				'args'     => array(
+					'type'               => 'error',
+					'dismissible'        => true,
+					'id'                 => 'message',
+					'additional_classes' => array( 'inline', 'hidden' ),
+				),
+				'expected' => '<div id="message" class="notice notice-error is-dismissible inline hidden"><p></p></div>',
+			),
+			'an empty message (used for templates) without paragraph wrapping' => array(
+				'message'  => '',
+				'args'     => array(
+					'type'               => 'error',
+					'dismissible'        => true,
+					'id'                 => 'message',
+					'additional_classes' => array( 'inline', 'hidden' ),
+					'paragraph_wrap'     => false,
+				),
+				'expected' => '<div id="message" class="notice notice-error is-dismissible inline hidden"></div>',
+			),
+			'an "error" notice'                         => array(
+				'message'  => 'An "error" notice.',
+				'args'     => array(
+					'type' => 'error',
+				),
+				'expected' => '<div class="notice notice-error"><p>An "error" notice.</p></div>',
+			),
+			'a "success" notice'                        => array(
+				'message'  => 'A "success" notice.',
+				'args'     => array(
+					'type' => 'success',
+				),
+				'expected' => '<div class="notice notice-success"><p>A "success" notice.</p></div>',
+			),
+			'a "warning" notice'                        => array(
+				'message'  => 'A "warning" notice.',
+				'args'     => array(
+					'type' => 'warning',
+				),
+				'expected' => '<div class="notice notice-warning"><p>A "warning" notice.</p></div>',
+			),
+			'an "info" notice'                          => array(
+				'message'  => 'An "info" notice.',
+				'args'     => array(
+					'type' => 'info',
+				),
+				'expected' => '<div class="notice notice-info"><p>An "info" notice.</p></div>',
+			),
+			'a type that already starts with "notice-"' => array(
+				'message'  => 'A type that already starts with "notice-".',
+				'args'     => array(
+					'type' => 'notice-info',
+				),
+				'expected' => '<div class="notice notice-notice-info"><p>A type that already starts with "notice-".</p></div>',
+			),
+			'a dismissible notice'                      => array(
+				'message'  => 'A dismissible notice.',
+				'args'     => array(
+					'dismissible' => true,
+				),
+				'expected' => '<div class="notice is-dismissible"><p>A dismissible notice.</p></div>',
+			),
+			'no type and an ID'                         => array(
+				'message'  => 'A notice with an ID.',
+				'args'     => array(
+					'id' => 'message',
+				),
+				'expected' => '<div id="message" class="notice"><p>A notice with an ID.</p></div>',
+			),
+			'a type and an ID'                          => array(
+				'message'  => 'A warning notice with an ID.',
+				'args'     => array(
+					'type' => 'warning',
+					'id'   => 'message',
+				),
+				'expected' => '<div id="message" class="notice notice-warning"><p>A warning notice with an ID.</p></div>',
+			),
+			'no type and additional classes'            => array(
+				'message'  => 'A notice with additional classes.',
+				'args'     => array(
+					'additional_classes' => array( 'error', 'notice-alt' ),
+				),
+				'expected' => '<div class="notice error notice-alt"><p>A notice with additional classes.</p></div>',
+			),
+			'a type and additional classes'             => array(
+				'message'  => 'A warning notice with additional classes.',
+				'args'     => array(
+					'type'               => 'warning',
+					'additional_classes' => array( 'error', 'notice-alt' ),
+				),
+				'expected' => '<div class="notice notice-warning error notice-alt"><p>A warning notice with additional classes.</p></div>',
+			),
+			'a dismissible notice with a type and additional classes' => array(
+				'message'  => 'A dismissible warning notice with a type and additional classes.',
+				'args'     => array(
+					'type'               => 'warning',
+					'dismissible'        => true,
+					'additional_classes' => array( 'error', 'notice-alt' ),
+				),
+				'expected' => '<div class="notice notice-warning is-dismissible error notice-alt"><p>A dismissible warning notice with a type and additional classes.</p></div>',
+			),
+			'a notice without paragraph wrapping'       => array(
+				'message'  => '<span>A notice without paragraph wrapping.</span>',
+				'args'     => array(
+					'paragraph_wrap' => false,
+				),
+				'expected' => '<div class="notice"><span>A notice without paragraph wrapping.</span></div>',
+			),
+			'an unsafe type'                            => array(
+				'message'  => 'A notice with an unsafe type.',
+				'args'     => array(
+					'type' => '"><script>alert("Howdy,admin!");</script>',
+				),
+				'expected' => '<div class="notice notice-">alert("Howdy,admin!");"&gt;<p>A notice with an unsafe type.</p></div>',
+			),
+			'an unsafe ID'                              => array(
+				'message'  => 'A notice with an unsafe ID.',
+				'args'     => array(
+					'id' => '"><script>alert( "Howdy, admin!" );</script> <div class="notice',
+				),
+				'expected' => '<div id="">alert( "Howdy, admin!" ); <div class="notice"><p>A notice with an unsafe ID.</p></div>',
+			),
+			'unsafe additional classes'                 => array(
+				'message'  => 'A notice with unsafe additional classes.',
+				'args'     => array(
+					'additional_classes' => array( '"><script>alert( "Howdy, admin!" );</script> <div class="notice' ),
+				),
+				'expected' => '<div class="notice ">alert( "Howdy, admin!" ); <div class="notice"><p>A notice with unsafe additional classes.</p></div>',
+			),
+			'a type that is not a string'               => array(
+				'message'  => 'A notice with a type that is not a string.',
+				'args'     => array(
+					'type' => array(),
+				),
+				'expected' => '<div class="notice"><p>A notice with a type that is not a string.</p></div>',
+			),
+			'a type with only empty space'              => array(
+				'message'  => 'A notice with a type with only empty space.',
+				'args'     => array(
+					'type' => " \t\r\n",
+				),
+				'expected' => '<div class="notice"><p>A notice with a type with only empty space.</p></div>',
+			),
+			'an ID that is not a string'                => array(
+				'message'  => 'A notice with an ID that is not a string.',
+				'args'     => array(
+					'id' => array( 'message' ),
+				),
+				'expected' => '<div class="notice"><p>A notice with an ID that is not a string.</p></div>',
+			),
+			'an ID with only empty space'               => array(
+				'message'  => 'A notice with an ID with only empty space.',
+				'args'     => array(
+					'id' => " \t\r\n",
+				),
+				'expected' => '<div class="notice"><p>A notice with an ID with only empty space.</p></div>',
+			),
+			'dismissible as a truthy value rather than (bool) true' => array(
+				'message'  => 'A notice with dismissible as a truthy value rather than (bool) true.',
+				'args'     => array(
+					'dismissible' => 1,
+				),
+				'expected' => '<div class="notice"><p>A notice with dismissible as a truthy value rather than (bool) true.</p></div>',
+			),
+			'additional classes that are not an array'  => array(
+				'message'  => 'A notice with additional classes that are not an array.',
+				'args'     => array(
+					'additional_classes' => 'class-1 class-2 class-3',
+				),
+				'expected' => '<div class="notice"><p>A notice with additional classes that are not an array.</p></div>',
+			),
+			'additional attribute with a value'         => array(
+				'message'  => 'A notice with an additional attribute with a value.',
+				'args'     => array(
+					'attributes' => array( 'aria-live' => 'assertive' ),
+				),
+				'expected' => '<div class="notice" aria-live="assertive"><p>A notice with an additional attribute with a value.</p></div>',
+			),
+			'additional hidden attribute'               => array(
+				'message'  => 'A notice with the hidden attribute.',
+				'args'     => array(
+					'attributes' => array( 'hidden' => true ),
+				),
+				'expected' => '<div class="notice" hidden><p>A notice with the hidden attribute.</p></div>',
+			),
+			'additional attribute no associative keys'  => array(
+				'message'  => 'A notice with a boolean attribute without an associative key.',
+				'args'     => array(
+					'attributes' => array( 'hidden' ),
+				),
+				'expected' => '<div class="notice" hidden><p>A notice with a boolean attribute without an associative key.</p></div>',
+			),
+			'additional attribute with role'            => array(
+				'message'  => 'A notice with an additional attribute role.',
+				'args'     => array(
+					'attributes' => array( 'role' => 'alert' ),
+				),
+				'expected' => '<div class="notice" role="alert"><p>A notice with an additional attribute role.</p></div>',
+			),
+			'multiple additional attributes'            => array(
+				'message'  => 'A notice with multiple additional attributes.',
+				'args'     => array(
+					'attributes' => array(
+						'role'      => 'alert',
+						'data-test' => -1,
+					),
+				),
+				'expected' => '<div class="notice" role="alert" data-test="-1"><p>A notice with multiple additional attributes.</p></div>',
+			),
+			'data attribute with unsafe value'          => array(
+				'message'  => 'A notice with an additional attribute with an unsafe value.',
+				'args'     => array(
+					'attributes' => array( 'data-unsafe' => '<script>alert( "Howdy, admin!" );</script>' ),
+				),
+				'expected' => '<div class="notice" data-unsafe="&lt;script&gt;alert( &quot;Howdy, admin!&quot; );&lt;/script&gt;"><p>A notice with an additional attribute with an unsafe value.</p></div>',
+			),
+			'additional invalid attribute'              => array(
+				'message'  => 'A notice with an additional attribute that is invalid.',
+				'args'     => array(
+					'attributes' => array( 'not-valid' => 'not-valid' ),
+				),
+				'expected' => '<div class="notice"><p>A notice with an additional attribute that is invalid.</p></div>',
+			),
+			'multiple attributes with "role", invalid, data-*, numeric, and boolean' => array(
+				'message'  => 'A notice with multiple attributes with "role", invalid, "data-*", numeric, and boolean.',
+				'args'     => array(
+					'attributes' => array(
+						'role'      => 'alert',
+						'disabled'  => 'disabled',
+						'data-name' => 'my-name',
+						'data-id'   => 1,
+						'hidden',
+					),
+				),
+				'expected' => '<div class="notice" role="alert" data-name="my-name" data-id="1" hidden><p>A notice with multiple attributes with "role", invalid, "data-*", numeric, and boolean.</p></div>',
+			),
+			'paragraph wrapping as a falsy value rather than (bool) false' => array(
+				'message'  => 'A notice with paragraph wrapping as a falsy value rather than (bool) false.',
+				'args'     => array(
+					'paragraph_wrap' => 0,
+				),
+				'expected' => '<div class="notice"><p>A notice with paragraph wrapping as a falsy value rather than (bool) false.</p></div>',
+			),
+		);
+	}
+
+	/**
+	 * Tests that `_doing_it_wrong()` is thrown when a 'type' containing spaces is passed.
+	 *
+	 * @ticket 57791
+	 *
+	 * @expectedIncorrectUsage wp_get_admin_notice
+	 */
+	public function test_should_throw_doing_it_wrong_with_a_type_containing_spaces() {
+		ob_start();
+		wp_admin_notice(
+			'A type containing spaces.',
+			array( 'type' => 'first second third fourth' )
+		);
+		$actual = ob_get_clean();
+
+		$this->assertSame(
+			'<div class="notice notice-first second third fourth"><p>A type containing spaces.</p></div>',
+			$actual
+		);
+	}
+
+	/**
+	 * Tests that `wp_admin_notice()` fires the 'wp_admin_notice' action.
+	 *
+	 * @ticket 57791
+	 */
+	public function test_should_fire_wp_admin_notice_action() {
+		$action = new MockAction();
+		add_action( 'wp_admin_notice', array( $action, 'action' ) );
+
+		ob_start();
+		wp_admin_notice( 'A notice.', array( 'type' => 'success' ) );
+		ob_end_clean();
+
+		$this->assertSame( 1, $action->get_call_count() );
+	}
+}
diff --git a/tests/functions/wpArrayGet.php b/tests/functions/wpArrayGet.php
index 4249aa9b70..0c12cfba9b 100644
--- a/tests/functions/wpArrayGet.php
+++ b/tests/functions/wpArrayGet.php
@@ -5,7 +5,8 @@
  *
  * @since 5.6.0
  *
- * @group functions.php
+ * @group functions
+ *
  * @covers ::_wp_array_get
  */
 class Tests_Functions_wpArrayGet extends WP_UnitTestCase {
diff --git a/tests/functions/wpArraySet.php b/tests/functions/wpArraySet.php
index 568ef637f1..159565bf8e 100644
--- a/tests/functions/wpArraySet.php
+++ b/tests/functions/wpArraySet.php
@@ -5,7 +5,8 @@
  *
  * @since 5.8.0
  *
- * @group functions.php
+ * @group functions
+ *
  * @covers ::_wp_array_set
  */
 class Tests_Functions_wpArraySet extends WP_UnitTestCase {
diff --git a/tests/functions/wpArraySliceAssoc.php b/tests/functions/wpArraySliceAssoc.php
index f4f2c503e8..9e3cb65e81 100644
--- a/tests/functions/wpArraySliceAssoc.php
+++ b/tests/functions/wpArraySliceAssoc.php
@@ -5,7 +5,8 @@
  *
  * @since 5.3.0
  *
- * @group functions.php
+ * @group functions
+ *
  * @covers ::wp_array_slice_assoc
  */
 class Tests_Functions_wpArraySliceAssoc extends WP_UnitTestCase {
@@ -28,7 +29,7 @@ class Tests_Functions_wpArraySliceAssoc extends WP_UnitTestCase {
 	/**
 	 * Data provider for wp_array_slice_assoc().
 	 *
-	 * @return array
+	 * @return array[]
 	 */
 	public function data_wp_array_slice_assoc_arrays() {
 		return array(
diff --git a/tests/functions/wpAuthCheck.php b/tests/functions/wpAuthCheck.php
index 70c1780faa..639634b2b7 100644
--- a/tests/functions/wpAuthCheck.php
+++ b/tests/functions/wpAuthCheck.php
@@ -3,7 +3,8 @@
 /**
  * Tests for the behavior of `wp_auth_check()`
  *
- * @group functions.php
+ * @group functions
+ *
  * @covers ::is_user_logged_in
  * @covers ::wp_auth_check
  */
diff --git a/tests/functions/wpCacheSetLastChanged.php b/tests/functions/wpCacheSetLastChanged.php
new file mode 100644
index 0000000000..0ffe54b37e
--- /dev/null
+++ b/tests/functions/wpCacheSetLastChanged.php
@@ -0,0 +1,35 @@
+<?php
+/**
+ * Tests for the wp_cache_set_last_changed() function.
+ *
+ * @group functions
+ *
+ * @covers ::wp_cache_set_last_changed
+ */
+class Tests_Functions_wpCacheSetLastChanged extends WP_UnitTestCase {
+
+	/**
+	 * Check the cache key last_changed is set for the specified group.
+	 *
+	 * @ticket 59737
+	 */
+	public function test_wp_cache_set_last_changed() {
+		$group = 'group_name';
+
+		$this->assertSame( wp_cache_set_last_changed( $group ), wp_cache_get( 'last_changed', $group ) );
+	}
+
+	/**
+	 * Check the action is called.
+	 *
+	 * @ticket 59737
+	 */
+	public function test_wp_cache_set_last_changed_action_is_called() {
+		$a1 = new MockAction();
+		add_action( 'wp_cache_set_last_changed', array( $a1, 'action' ) );
+
+		wp_cache_set_last_changed( 'group_name' );
+
+		$this->assertSame( 1, $a1->get_call_count() );
+	}
+}
diff --git a/tests/functions/wpCheckAlternateFileNames.php b/tests/functions/wpCheckAlternateFileNames.php
index c21ae3374d..47a99244d7 100644
--- a/tests/functions/wpCheckAlternateFileNames.php
+++ b/tests/functions/wpCheckAlternateFileNames.php
@@ -1,7 +1,8 @@
 <?php
 
 /**
- * @group functions.php
+ * @group functions
+ *
  * @covers ::_wp_check_alternate_file_names
  */
 class Tests_Functions_WpCheckAlternateFileNames extends WP_UnitTestCase {
diff --git a/tests/functions/wpCheckFiletype.php b/tests/functions/wpCheckFiletype.php
index ad947c628b..37d7afdd01 100644
--- a/tests/functions/wpCheckFiletype.php
+++ b/tests/functions/wpCheckFiletype.php
@@ -3,7 +3,7 @@
 /**
  * Tests for wp_check_filetype().
  *
- * @group functions.php
+ * @group functions
  * @group upload
  *
  * @covers ::wp_check_filetype
@@ -28,7 +28,7 @@ class Tests_Functions_WpCheckFiletype extends WP_UnitTestCase {
 	/**
 	 * Data provider.
 	 *
-	 * @return[]
+	 * @return array[]
 	 */
 	public function data_wp_check_filetype() {
 		return array(
@@ -105,7 +105,6 @@ class Tests_Functions_WpCheckFiletype extends WP_UnitTestCase {
 					'type' => false,
 				),
 			),
-
 		);
 	}
 }
diff --git a/tests/functions/wpFilesize.php b/tests/functions/wpFilesize.php
index 250f7e79c7..4ed6de5676 100644
--- a/tests/functions/wpFilesize.php
+++ b/tests/functions/wpFilesize.php
@@ -3,7 +3,8 @@
 /**
  * Tests for the wp_filesize() function.
  *
- * @group functions.php
+ * @group functions
+ *
  * @covers ::wp_filesize
  */
 class Tests_Functions_wpFilesize extends WP_UnitTestCase {
diff --git a/tests/functions/wpFilterObjectList.php b/tests/functions/wpFilterObjectList.php
index b0c9edc4ed..21b633e352 100644
--- a/tests/functions/wpFilterObjectList.php
+++ b/tests/functions/wpFilterObjectList.php
@@ -3,7 +3,7 @@
 /**
  * Test wp_filter_object_list().
  *
- * @group functions.php
+ * @group functions
  * @covers ::wp_filter_object_list
  */
 class Tests_Functions_wpFilterObjectList extends WP_UnitTestCase {
diff --git a/tests/functions/wpFuzzyNumberMatch.php b/tests/functions/wpFuzzyNumberMatch.php
index 77a06e2bb7..1935edefef 100644
--- a/tests/functions/wpFuzzyNumberMatch.php
+++ b/tests/functions/wpFuzzyNumberMatch.php
@@ -3,7 +3,8 @@
 /**
  * Test wp_fuzzy_number_match().
  *
- * @group functions.php
+ * @group functions
+ *
  * @covers ::wp_fuzzy_number_match
  */
 class Tests_Functions_wpFuzzyNumberMatch extends WP_UnitTestCase {
diff --git a/tests/functions/wpGetAdminNotice.php b/tests/functions/wpGetAdminNotice.php
index aeeadff96d..41b24a122b 100644
--- a/tests/functions/wpGetAdminNotice.php
+++ b/tests/functions/wpGetAdminNotice.php
@@ -1,326 +1,326 @@
-<?php
-
-/**
- * Tests for `wp_get_admin_notice()`.
- *
- * @group functions.php
- *
- * @covers ::wp_get_admin_notice
- */
-class Tests_Functions_WpGetAdminNotice extends WP_UnitTestCase {
-
-	/**
-	 * Tests that `wp_get_admin_notice()` returns the expected admin notice markup.
-	 *
-	 * @ticket 57791
-	 *
-	 * @dataProvider data_should_return_admin_notice
-	 *
-	 * @param string $message  The message.
-	 * @param array  $args     Arguments for the admin notice.
-	 * @param string $expected The expected admin notice markup.
-	 */
-	public function test_should_return_admin_notice( $message, $args, $expected ) {
-		$this->assertSame( $expected, wp_get_admin_notice( $message, $args ) );
-	}
-
-	/**
-	 * Data provider.
-	 *
-	 * @return array[]
-	 */
-	public function data_should_return_admin_notice() {
-		return array(
-			'defaults'                                  => array(
-				'message'  => 'A notice with defaults.',
-				'args'     => array(),
-				'expected' => '<div class="notice"><p>A notice with defaults.</p></div>',
-			),
-			'an empty message (used for templates)'     => array(
-				'message'  => '',
-				'args'     => array(
-					'type'               => 'error',
-					'dismissible'        => true,
-					'id'                 => 'message',
-					'additional_classes' => array( 'inline', 'hidden' ),
-				),
-				'expected' => '<div id="message" class="notice notice-error is-dismissible inline hidden"><p></p></div>',
-			),
-			'an empty message (used for templates) without paragraph wrapping' => array(
-				'message'  => '',
-				'args'     => array(
-					'type'               => 'error',
-					'dismissible'        => true,
-					'id'                 => 'message',
-					'additional_classes' => array( 'inline', 'hidden' ),
-					'paragraph_wrap'     => false,
-				),
-				'expected' => '<div id="message" class="notice notice-error is-dismissible inline hidden"></div>',
-			),
-			'an "error" notice'                         => array(
-				'message'  => 'An "error" notice.',
-				'args'     => array(
-					'type' => 'error',
-				),
-				'expected' => '<div class="notice notice-error"><p>An "error" notice.</p></div>',
-			),
-			'a "success" notice'                        => array(
-				'message'  => 'A "success" notice.',
-				'args'     => array(
-					'type' => 'success',
-				),
-				'expected' => '<div class="notice notice-success"><p>A "success" notice.</p></div>',
-			),
-			'a "warning" notice'                        => array(
-				'message'  => 'A "warning" notice.',
-				'args'     => array(
-					'type' => 'warning',
-				),
-				'expected' => '<div class="notice notice-warning"><p>A "warning" notice.</p></div>',
-			),
-			'an "info" notice'                          => array(
-				'message'  => 'An "info" notice.',
-				'args'     => array(
-					'type' => 'info',
-				),
-				'expected' => '<div class="notice notice-info"><p>An "info" notice.</p></div>',
-			),
-			'a type that already starts with "notice-"' => array(
-				'message'  => 'A type that already starts with "notice-".',
-				'args'     => array(
-					'type' => 'notice-info',
-				),
-				'expected' => '<div class="notice notice-notice-info"><p>A type that already starts with "notice-".</p></div>',
-			),
-			'a dismissible notice'                      => array(
-				'message'  => 'A dismissible notice.',
-				'args'     => array(
-					'dismissible' => true,
-				),
-				'expected' => '<div class="notice is-dismissible"><p>A dismissible notice.</p></div>',
-			),
-			'no type and an ID'                         => array(
-				'message'  => 'A notice with an ID.',
-				'args'     => array(
-					'id' => 'message',
-				),
-				'expected' => '<div id="message" class="notice"><p>A notice with an ID.</p></div>',
-			),
-			'a type and an ID'                          => array(
-				'message'  => 'A warning notice with an ID.',
-				'args'     => array(
-					'type' => 'warning',
-					'id'   => 'message',
-				),
-				'expected' => '<div id="message" class="notice notice-warning"><p>A warning notice with an ID.</p></div>',
-			),
-			'no type and additional classes'            => array(
-				'message'  => 'A notice with additional classes.',
-				'args'     => array(
-					'additional_classes' => array( 'error', 'notice-alt' ),
-				),
-				'expected' => '<div class="notice error notice-alt"><p>A notice with additional classes.</p></div>',
-			),
-			'a type and additional classes'             => array(
-				'message'  => 'A warning notice with additional classes.',
-				'args'     => array(
-					'type'               => 'warning',
-					'additional_classes' => array( 'error', 'notice-alt' ),
-				),
-				'expected' => '<div class="notice notice-warning error notice-alt"><p>A warning notice with additional classes.</p></div>',
-			),
-			'a dismissible notice with a type and additional classes' => array(
-				'message'  => 'A dismissible warning notice with a type and additional classes.',
-				'args'     => array(
-					'type'               => 'warning',
-					'dismissible'        => true,
-					'additional_classes' => array( 'error', 'notice-alt' ),
-				),
-				'expected' => '<div class="notice notice-warning is-dismissible error notice-alt"><p>A dismissible warning notice with a type and additional classes.</p></div>',
-			),
-			'a notice without paragraph wrapping'       => array(
-				'message'  => '<span>A notice without paragraph wrapping.</span>',
-				'args'     => array(
-					'paragraph_wrap' => false,
-				),
-				'expected' => '<div class="notice"><span>A notice without paragraph wrapping.</span></div>',
-			),
-			'an unsafe type'                            => array(
-				'message'  => 'A notice with an unsafe type.',
-				'args'     => array(
-					'type' => '"><script>alert("Howdy,admin!");</script>',
-				),
-				'expected' => '<div class="notice notice-"><script>alert("Howdy,admin!");</script>"><p>A notice with an unsafe type.</p></div>',
-			),
-			'an unsafe ID'                              => array(
-				'message'  => 'A notice with an unsafe ID.',
-				'args'     => array(
-					'id' => '"><script>alert( "Howdy, admin!" );</script> <div class="notice',
-				),
-				'expected' => '<div id=""><script>alert( "Howdy, admin!" );</script> <div class="notice" class="notice"><p>A notice with an unsafe ID.</p></div>',
-			),
-			'unsafe additional classes'                 => array(
-				'message'  => 'A notice with unsafe additional classes.',
-				'args'     => array(
-					'additional_classes' => array( '"><script>alert( "Howdy, admin!" );</script> <div class="notice' ),
-				),
-				'expected' => '<div class="notice "><script>alert( "Howdy, admin!" );</script> <div class="notice"><p>A notice with unsafe additional classes.</p></div>',
-			),
-			'a type that is not a string'               => array(
-				'message'  => 'A notice with a type that is not a string.',
-				'args'     => array(
-					'type' => array(),
-				),
-				'expected' => '<div class="notice"><p>A notice with a type that is not a string.</p></div>',
-			),
-			'a type with only empty space'              => array(
-				'message'  => 'A notice with a type with only empty space.',
-				'args'     => array(
-					'type' => " \t\r\n",
-				),
-				'expected' => '<div class="notice"><p>A notice with a type with only empty space.</p></div>',
-			),
-			'an ID that is not a string'                => array(
-				'message'  => 'A notice with an ID that is not a string.',
-				'args'     => array(
-					'id' => array( 'message' ),
-				),
-				'expected' => '<div class="notice"><p>A notice with an ID that is not a string.</p></div>',
-			),
-			'an ID with only empty space'               => array(
-				'message'  => 'A notice with an ID with only empty space.',
-				'args'     => array(
-					'id' => " \t\r\n",
-				),
-				'expected' => '<div class="notice"><p>A notice with an ID with only empty space.</p></div>',
-			),
-			'dismissible as a truthy value rather than (bool) true' => array(
-				'message'  => 'A notice with dismissible as a truthy value rather than (bool) true.',
-				'args'     => array(
-					'dismissible' => 1,
-				),
-				'expected' => '<div class="notice"><p>A notice with dismissible as a truthy value rather than (bool) true.</p></div>',
-			),
-			'additional classes that are not an array'  => array(
-				'message'  => 'A notice with additional classes that are not an array.',
-				'args'     => array(
-					'additional_classes' => 'class-1 class-2 class-3',
-				),
-				'expected' => '<div class="notice"><p>A notice with additional classes that are not an array.</p></div>',
-			),
-			'additional attribute with a value'         => array(
-				'message'  => 'A notice with an additional attribute with a value.',
-				'args'     => array(
-					'attributes' => array( 'aria-live' => 'assertive' ),
-				),
-				'expected' => '<div class="notice" aria-live="assertive"><p>A notice with an additional attribute with a value.</p></div>',
-			),
-			'additional hidden attribute'               => array(
-				'message'  => 'A notice with the hidden attribute.',
-				'args'     => array(
-					'attributes' => array( 'hidden' => true ),
-				),
-				'expected' => '<div class="notice" hidden><p>A notice with the hidden attribute.</p></div>',
-			),
-			'additional attribute no associative keys'  => array(
-				'message'  => 'A notice with a boolean attribute without an associative key.',
-				'args'     => array(
-					'attributes' => array( 'hidden' ),
-				),
-				'expected' => '<div class="notice" hidden><p>A notice with a boolean attribute without an associative key.</p></div>',
-			),
-			'additional attribute with role'            => array(
-				'message'  => 'A notice with an additional attribute role.',
-				'args'     => array(
-					'attributes' => array( 'role' => 'alert' ),
-				),
-				'expected' => '<div class="notice" role="alert"><p>A notice with an additional attribute role.</p></div>',
-			),
-			'multiple additional attributes'            => array(
-				'message'  => 'A notice with multiple additional attributes.',
-				'args'     => array(
-					'attributes' => array(
-						'role'      => 'alert',
-						'data-test' => -1,
-					),
-				),
-				'expected' => '<div class="notice" role="alert" data-test="-1"><p>A notice with multiple additional attributes.</p></div>',
-			),
-			'data attribute with unsafe value'          => array(
-				'message'  => 'A notice with an additional attribute with an unsafe value.',
-				'args'     => array(
-					'attributes' => array( 'data-unsafe' => '<script>alert( "Howdy, admin!" );</script>' ),
-				),
-				'expected' => '<div class="notice" data-unsafe="&lt;script&gt;alert( &quot;Howdy, admin!&quot; );&lt;/script&gt;"><p>A notice with an additional attribute with an unsafe value.</p></div>',
-			),
-			'multiple attributes with "role", invalid, data-*, numeric, and boolean' => array(
-				'message'  => 'A notice with multiple attributes with "role", invalid, "data-*", numeric, and boolean.',
-				'args'     => array(
-					'attributes' => array(
-						'role'      => 'alert',
-						'disabled'  => 'disabled',
-						'data-name' => 'my-name',
-						'data-id'   => 1,
-						'hidden',
-					),
-				),
-				'expected' => '<div class="notice" role="alert" disabled="disabled" data-name="my-name" data-id="1" hidden><p>A notice with multiple attributes with "role", invalid, "data-*", numeric, and boolean.</p></div>',
-			),
-			'paragraph wrapping as a falsy value rather than (bool) false' => array(
-				'message'  => 'A notice with paragraph wrapping as a falsy value rather than (bool) false.',
-				'args'     => array(
-					'paragraph_wrap' => 0,
-				),
-				'expected' => '<div class="notice"><p>A notice with paragraph wrapping as a falsy value rather than (bool) false.</p></div>',
-			),
-		);
-	}
-
-	/**
-	 * Tests that `wp_get_admin_notice()` throws a `_doing_it_wrong()` when
-	 * a 'type' containing spaces is passed.
-	 *
-	 * @ticket 57791
-	 *
-	 * @expectedIncorrectUsage wp_get_admin_notice
-	 */
-	public function test_should_throw_doing_it_wrong_with_a_type_containing_spaces() {
-		$this->assertSame(
-			'<div class="notice notice-first second third fourth"><p>A type containing spaces.</p></div>',
-			wp_get_admin_notice(
-				'A type containing spaces.',
-				array( 'type' => 'first second third fourth' )
-			)
-		);
-	}
-
-	/**
-	 * Tests that `wp_get_admin_notice()` applies filters.
-	 *
-	 * @ticket 57791
-	 *
-	 * @dataProvider data_should_apply_filters
-	 *
-	 * @param string $hook_name The name of the filter hook.
-	 */
-	public function test_should_apply_filters( $hook_name ) {
-		$filter = new MockAction();
-		add_filter( $hook_name, array( $filter, 'filter' ) );
-
-		wp_get_admin_notice( 'A notice.', array( 'type' => 'success' ) );
-
-		$this->assertSame( 1, $filter->get_call_count() );
-	}
-
-	/**
-	 * Data provider.
-	 *
-	 * @return array[]
-	 */
-	public function data_should_apply_filters() {
-		return array(
-			'wp_admin_notice_args'   => array( 'hook_name' => 'wp_admin_notice_args' ),
-			'wp_admin_notice_markup' => array( 'hook_name' => 'wp_admin_notice_markup' ),
-		);
-	}
-}
+<?php
+
+/**
+ * Tests for `wp_get_admin_notice()`.
+ *
+ * @group functions
+ *
+ * @covers ::wp_get_admin_notice
+ */
+class Tests_Functions_WpGetAdminNotice extends WP_UnitTestCase {
+
+	/**
+	 * Tests that `wp_get_admin_notice()` returns the expected admin notice markup.
+	 *
+	 * @ticket 57791
+	 *
+	 * @dataProvider data_should_return_admin_notice
+	 *
+	 * @param string $message  The message.
+	 * @param array  $args     Arguments for the admin notice.
+	 * @param string $expected The expected admin notice markup.
+	 */
+	public function test_should_return_admin_notice( $message, $args, $expected ) {
+		$this->assertSame( $expected, wp_get_admin_notice( $message, $args ) );
+	}
+
+	/**
+	 * Data provider.
+	 *
+	 * @return array[]
+	 */
+	public function data_should_return_admin_notice() {
+		return array(
+			'defaults'                                  => array(
+				'message'  => 'A notice with defaults.',
+				'args'     => array(),
+				'expected' => '<div class="notice"><p>A notice with defaults.</p></div>',
+			),
+			'an empty message (used for templates)'     => array(
+				'message'  => '',
+				'args'     => array(
+					'type'               => 'error',
+					'dismissible'        => true,
+					'id'                 => 'message',
+					'additional_classes' => array( 'inline', 'hidden' ),
+				),
+				'expected' => '<div id="message" class="notice notice-error is-dismissible inline hidden"><p></p></div>',
+			),
+			'an empty message (used for templates) without paragraph wrapping' => array(
+				'message'  => '',
+				'args'     => array(
+					'type'               => 'error',
+					'dismissible'        => true,
+					'id'                 => 'message',
+					'additional_classes' => array( 'inline', 'hidden' ),
+					'paragraph_wrap'     => false,
+				),
+				'expected' => '<div id="message" class="notice notice-error is-dismissible inline hidden"></div>',
+			),
+			'an "error" notice'                         => array(
+				'message'  => 'An "error" notice.',
+				'args'     => array(
+					'type' => 'error',
+				),
+				'expected' => '<div class="notice notice-error"><p>An "error" notice.</p></div>',
+			),
+			'a "success" notice'                        => array(
+				'message'  => 'A "success" notice.',
+				'args'     => array(
+					'type' => 'success',
+				),
+				'expected' => '<div class="notice notice-success"><p>A "success" notice.</p></div>',
+			),
+			'a "warning" notice'                        => array(
+				'message'  => 'A "warning" notice.',
+				'args'     => array(
+					'type' => 'warning',
+				),
+				'expected' => '<div class="notice notice-warning"><p>A "warning" notice.</p></div>',
+			),
+			'an "info" notice'                          => array(
+				'message'  => 'An "info" notice.',
+				'args'     => array(
+					'type' => 'info',
+				),
+				'expected' => '<div class="notice notice-info"><p>An "info" notice.</p></div>',
+			),
+			'a type that already starts with "notice-"' => array(
+				'message'  => 'A type that already starts with "notice-".',
+				'args'     => array(
+					'type' => 'notice-info',
+				),
+				'expected' => '<div class="notice notice-notice-info"><p>A type that already starts with "notice-".</p></div>',
+			),
+			'a dismissible notice'                      => array(
+				'message'  => 'A dismissible notice.',
+				'args'     => array(
+					'dismissible' => true,
+				),
+				'expected' => '<div class="notice is-dismissible"><p>A dismissible notice.</p></div>',
+			),
+			'no type and an ID'                         => array(
+				'message'  => 'A notice with an ID.',
+				'args'     => array(
+					'id' => 'message',
+				),
+				'expected' => '<div id="message" class="notice"><p>A notice with an ID.</p></div>',
+			),
+			'a type and an ID'                          => array(
+				'message'  => 'A warning notice with an ID.',
+				'args'     => array(
+					'type' => 'warning',
+					'id'   => 'message',
+				),
+				'expected' => '<div id="message" class="notice notice-warning"><p>A warning notice with an ID.</p></div>',
+			),
+			'no type and additional classes'            => array(
+				'message'  => 'A notice with additional classes.',
+				'args'     => array(
+					'additional_classes' => array( 'error', 'notice-alt' ),
+				),
+				'expected' => '<div class="notice error notice-alt"><p>A notice with additional classes.</p></div>',
+			),
+			'a type and additional classes'             => array(
+				'message'  => 'A warning notice with additional classes.',
+				'args'     => array(
+					'type'               => 'warning',
+					'additional_classes' => array( 'error', 'notice-alt' ),
+				),
+				'expected' => '<div class="notice notice-warning error notice-alt"><p>A warning notice with additional classes.</p></div>',
+			),
+			'a dismissible notice with a type and additional classes' => array(
+				'message'  => 'A dismissible warning notice with a type and additional classes.',
+				'args'     => array(
+					'type'               => 'warning',
+					'dismissible'        => true,
+					'additional_classes' => array( 'error', 'notice-alt' ),
+				),
+				'expected' => '<div class="notice notice-warning is-dismissible error notice-alt"><p>A dismissible warning notice with a type and additional classes.</p></div>',
+			),
+			'a notice without paragraph wrapping'       => array(
+				'message'  => '<span>A notice without paragraph wrapping.</span>',
+				'args'     => array(
+					'paragraph_wrap' => false,
+				),
+				'expected' => '<div class="notice"><span>A notice without paragraph wrapping.</span></div>',
+			),
+			'an unsafe type'                            => array(
+				'message'  => 'A notice with an unsafe type.',
+				'args'     => array(
+					'type' => '"><script>alert("Howdy,admin!");</script>',
+				),
+				'expected' => '<div class="notice notice-"><script>alert("Howdy,admin!");</script>"><p>A notice with an unsafe type.</p></div>',
+			),
+			'an unsafe ID'                              => array(
+				'message'  => 'A notice with an unsafe ID.',
+				'args'     => array(
+					'id' => '"><script>alert( "Howdy, admin!" );</script> <div class="notice',
+				),
+				'expected' => '<div id=""><script>alert( "Howdy, admin!" );</script> <div class="notice" class="notice"><p>A notice with an unsafe ID.</p></div>',
+			),
+			'unsafe additional classes'                 => array(
+				'message'  => 'A notice with unsafe additional classes.',
+				'args'     => array(
+					'additional_classes' => array( '"><script>alert( "Howdy, admin!" );</script> <div class="notice' ),
+				),
+				'expected' => '<div class="notice "><script>alert( "Howdy, admin!" );</script> <div class="notice"><p>A notice with unsafe additional classes.</p></div>',
+			),
+			'a type that is not a string'               => array(
+				'message'  => 'A notice with a type that is not a string.',
+				'args'     => array(
+					'type' => array(),
+				),
+				'expected' => '<div class="notice"><p>A notice with a type that is not a string.</p></div>',
+			),
+			'a type with only empty space'              => array(
+				'message'  => 'A notice with a type with only empty space.',
+				'args'     => array(
+					'type' => " \t\r\n",
+				),
+				'expected' => '<div class="notice"><p>A notice with a type with only empty space.</p></div>',
+			),
+			'an ID that is not a string'                => array(
+				'message'  => 'A notice with an ID that is not a string.',
+				'args'     => array(
+					'id' => array( 'message' ),
+				),
+				'expected' => '<div class="notice"><p>A notice with an ID that is not a string.</p></div>',
+			),
+			'an ID with only empty space'               => array(
+				'message'  => 'A notice with an ID with only empty space.',
+				'args'     => array(
+					'id' => " \t\r\n",
+				),
+				'expected' => '<div class="notice"><p>A notice with an ID with only empty space.</p></div>',
+			),
+			'dismissible as a truthy value rather than (bool) true' => array(
+				'message'  => 'A notice with dismissible as a truthy value rather than (bool) true.',
+				'args'     => array(
+					'dismissible' => 1,
+				),
+				'expected' => '<div class="notice"><p>A notice with dismissible as a truthy value rather than (bool) true.</p></div>',
+			),
+			'additional classes that are not an array'  => array(
+				'message'  => 'A notice with additional classes that are not an array.',
+				'args'     => array(
+					'additional_classes' => 'class-1 class-2 class-3',
+				),
+				'expected' => '<div class="notice"><p>A notice with additional classes that are not an array.</p></div>',
+			),
+			'additional attribute with a value'         => array(
+				'message'  => 'A notice with an additional attribute with a value.',
+				'args'     => array(
+					'attributes' => array( 'aria-live' => 'assertive' ),
+				),
+				'expected' => '<div class="notice" aria-live="assertive"><p>A notice with an additional attribute with a value.</p></div>',
+			),
+			'additional hidden attribute'               => array(
+				'message'  => 'A notice with the hidden attribute.',
+				'args'     => array(
+					'attributes' => array( 'hidden' => true ),
+				),
+				'expected' => '<div class="notice" hidden><p>A notice with the hidden attribute.</p></div>',
+			),
+			'additional attribute no associative keys'  => array(
+				'message'  => 'A notice with a boolean attribute without an associative key.',
+				'args'     => array(
+					'attributes' => array( 'hidden' ),
+				),
+				'expected' => '<div class="notice" hidden><p>A notice with a boolean attribute without an associative key.</p></div>',
+			),
+			'additional attribute with role'            => array(
+				'message'  => 'A notice with an additional attribute role.',
+				'args'     => array(
+					'attributes' => array( 'role' => 'alert' ),
+				),
+				'expected' => '<div class="notice" role="alert"><p>A notice with an additional attribute role.</p></div>',
+			),
+			'multiple additional attributes'            => array(
+				'message'  => 'A notice with multiple additional attributes.',
+				'args'     => array(
+					'attributes' => array(
+						'role'      => 'alert',
+						'data-test' => -1,
+					),
+				),
+				'expected' => '<div class="notice" role="alert" data-test="-1"><p>A notice with multiple additional attributes.</p></div>',
+			),
+			'data attribute with unsafe value'          => array(
+				'message'  => 'A notice with an additional attribute with an unsafe value.',
+				'args'     => array(
+					'attributes' => array( 'data-unsafe' => '<script>alert( "Howdy, admin!" );</script>' ),
+				),
+				'expected' => '<div class="notice" data-unsafe="&lt;script&gt;alert( &quot;Howdy, admin!&quot; );&lt;/script&gt;"><p>A notice with an additional attribute with an unsafe value.</p></div>',
+			),
+			'multiple attributes with "role", invalid, data-*, numeric, and boolean' => array(
+				'message'  => 'A notice with multiple attributes with "role", invalid, "data-*", numeric, and boolean.',
+				'args'     => array(
+					'attributes' => array(
+						'role'      => 'alert',
+						'disabled'  => 'disabled',
+						'data-name' => 'my-name',
+						'data-id'   => 1,
+						'hidden',
+					),
+				),
+				'expected' => '<div class="notice" role="alert" disabled="disabled" data-name="my-name" data-id="1" hidden><p>A notice with multiple attributes with "role", invalid, "data-*", numeric, and boolean.</p></div>',
+			),
+			'paragraph wrapping as a falsy value rather than (bool) false' => array(
+				'message'  => 'A notice with paragraph wrapping as a falsy value rather than (bool) false.',
+				'args'     => array(
+					'paragraph_wrap' => 0,
+				),
+				'expected' => '<div class="notice"><p>A notice with paragraph wrapping as a falsy value rather than (bool) false.</p></div>',
+			),
+		);
+	}
+
+	/**
+	 * Tests that `wp_get_admin_notice()` throws a `_doing_it_wrong()` when
+	 * a 'type' containing spaces is passed.
+	 *
+	 * @ticket 57791
+	 *
+	 * @expectedIncorrectUsage wp_get_admin_notice
+	 */
+	public function test_should_throw_doing_it_wrong_with_a_type_containing_spaces() {
+		$this->assertSame(
+			'<div class="notice notice-first second third fourth"><p>A type containing spaces.</p></div>',
+			wp_get_admin_notice(
+				'A type containing spaces.',
+				array( 'type' => 'first second third fourth' )
+			)
+		);
+	}
+
+	/**
+	 * Tests that `wp_get_admin_notice()` applies filters.
+	 *
+	 * @ticket 57791
+	 *
+	 * @dataProvider data_should_apply_filters
+	 *
+	 * @param string $hook_name The name of the filter hook.
+	 */
+	public function test_should_apply_filters( $hook_name ) {
+		$filter = new MockAction();
+		add_filter( $hook_name, array( $filter, 'filter' ) );
+
+		wp_get_admin_notice( 'A notice.', array( 'type' => 'success' ) );
+
+		$this->assertSame( 1, $filter->get_call_count() );
+	}
+
+	/**
+	 * Data provider.
+	 *
+	 * @return array[]
+	 */
+	public function data_should_apply_filters() {
+		return array(
+			'wp_admin_notice_args'   => array( 'hook_name' => 'wp_admin_notice_args' ),
+			'wp_admin_notice_markup' => array( 'hook_name' => 'wp_admin_notice_markup' ),
+		);
+	}
+}
diff --git a/tests/functions/wpGetArchives.php b/tests/functions/wpGetArchives.php
index 6d0eaded28..b12fe262e8 100644
--- a/tests/functions/wpGetArchives.php
+++ b/tests/functions/wpGetArchives.php
@@ -1,7 +1,8 @@
 <?php
 
 /**
- * @group functions.php
+ * @group functions
+ *
  * @covers ::wp_get_archives
  */
 class Tests_Functions_wpGetArchives extends WP_UnitTestCase {
diff --git a/tests/functions/wpGetMimeTypes.php b/tests/functions/wpGetMimeTypes.php
index 2bef07644f..8bcd0aed8a 100644
--- a/tests/functions/wpGetMimeTypes.php
+++ b/tests/functions/wpGetMimeTypes.php
@@ -3,7 +3,8 @@
 /**
  * Test wp_get_mime_types().
  *
- * @group functions.php
+ * @group functions
+ *
  * @covers ::wp_get_mime_types
  */
 class Tests_Functions_wpGetMimeTypes extends WP_UnitTestCase {
diff --git a/tests/functions/wpGuessUrl.php b/tests/functions/wpGuessUrl.php
index cfa21bb4d3..88347c7f17 100644
--- a/tests/functions/wpGuessUrl.php
+++ b/tests/functions/wpGuessUrl.php
@@ -3,7 +3,8 @@
 /**
  * Test wp_guess_url().
  *
- * @group functions.php
+ * @group functions
+ *
  * @covers ::wp_guess_url
  */
 class Tests_Functions_wpGuessUrl extends WP_UnitTestCase {
@@ -24,7 +25,7 @@ class Tests_Functions_wpGuessUrl extends WP_UnitTestCase {
 	/**
 	 * Data provider.
 	 *
-	 * @return array
+	 * @return array[]
 	 */
 	public function data_wp_guess_url_should_return_site_url() {
 		return array(
diff --git a/tests/functions/wpIsNumericArray.php b/tests/functions/wpIsNumericArray.php
index 309f901e35..4eeab0af81 100644
--- a/tests/functions/wpIsNumericArray.php
+++ b/tests/functions/wpIsNumericArray.php
@@ -1,7 +1,8 @@
 <?php
 
 /**
- * @group functions.php
+ * @group functions
+ *
  * @covers ::wp_is_numeric_array
  */
 class Tests_Functions_wpIsNumericArray extends WP_UnitTestCase {
diff --git a/tests/functions/wpListFilter.php b/tests/functions/wpListFilter.php
index 042325227e..d9fca8cf5c 100644
--- a/tests/functions/wpListFilter.php
+++ b/tests/functions/wpListFilter.php
@@ -3,7 +3,8 @@
 /**
  * Test wp_list_filter().
  *
- * @group functions.php
+ * @group functions
+ *
  * @covers ::wp_list_filter
  */
 class Tests_Functions_wpListFilter extends WP_UnitTestCase {
@@ -21,6 +22,11 @@ class Tests_Functions_wpListFilter extends WP_UnitTestCase {
 		$this->assertEqualSetsWithIndex( $expected, wp_list_filter( $input_list, $args, $operator ) );
 	}
 
+	/**
+	 * Data provider.
+	 *
+	 * @return array[]
+	 */
 	public function data_wp_list_filter() {
 		return array(
 			'string instead of array'  => array(
diff --git a/tests/functions/wpListPluck.php b/tests/functions/wpListPluck.php
index cb3c4bfe27..8313116294 100644
--- a/tests/functions/wpListPluck.php
+++ b/tests/functions/wpListPluck.php
@@ -3,7 +3,8 @@
 /**
  * Test wp_list_pluck().
  *
- * @group functions.php
+ * @group functions
+ *
  * @covers ::wp_list_pluck
  */
 class Tests_Functions_wpListPluck extends WP_UnitTestCase {
@@ -215,6 +216,11 @@ class Tests_Functions_wpListPluck extends WP_UnitTestCase {
 		$this->assertSameSetsWithIndex( $expected, wp_list_pluck( $input_list, $field, $index_key ) );
 	}
 
+	/**
+	 * Data provider.
+	 *
+	 * @return array[]
+	 */
 	public function data_wp_list_pluck() {
 		return array(
 			'arrays'                         => array(
diff --git a/tests/functions/wpListSort.php b/tests/functions/wpListSort.php
index 63c495dd84..8bcf8e5441 100644
--- a/tests/functions/wpListSort.php
+++ b/tests/functions/wpListSort.php
@@ -3,7 +3,8 @@
 /**
  * Test wp_list_sort().
  *
- * @group functions.php
+ * @group functions
+ *
  * @covers ::wp_list_sort
  */
 class Tests_Functions_wpListSort extends WP_UnitTestCase {
@@ -19,6 +20,11 @@ class Tests_Functions_wpListSort extends WP_UnitTestCase {
 		$this->assertSame( $expected, wp_list_sort( $input_list, $orderby, $order ) );
 	}
 
+	/**
+	 * Data provider.
+	 *
+	 * @return array[]
+	 */
 	public function data_wp_list_sort() {
 		return array(
 			'single orderby ascending'        => array(
@@ -344,6 +350,11 @@ class Tests_Functions_wpListSort extends WP_UnitTestCase {
 		$this->assertSame( $expected, wp_list_sort( $input_list, $orderby, $order, true ) );
 	}
 
+	/**
+	 * Data provider.
+	 *
+	 * @return array[]
+	 */
 	public function data_wp_list_sort_preserve_keys() {
 		return array(
 			'single orderby ascending'        => array(
diff --git a/tests/functions/wpListUtil.php b/tests/functions/wpListUtil.php
index dba0a12797..fd068387fd 100644
--- a/tests/functions/wpListUtil.php
+++ b/tests/functions/wpListUtil.php
@@ -3,7 +3,7 @@
 /**
  * Test WP_List_Util class.
  *
- * @group functions.php
+ * @group functions
  */
 class Tests_Functions_wpListUtil extends WP_UnitTestCase {
 
@@ -147,7 +147,7 @@ class Tests_Functions_wpListUtil extends WP_UnitTestCase {
 	/**
 	 * Data provider that provides invalid input arrays.
 	 *
-	 * @return array
+	 * @return array[]
 	 */
 	public function data_wp_list_pluck_should_throw_doing_it_wrong_with_invalid_input() {
 		return array(
diff --git a/tests/functions/wpMysqlWeek.php b/tests/functions/wpMysqlWeek.php
new file mode 100644
index 0000000000..1a17a86ffc
--- /dev/null
+++ b/tests/functions/wpMysqlWeek.php
@@ -0,0 +1,44 @@
+<?php
+
+/**
+ * Tests for the _wp_mysql_week() function.
+ *
+ * @group functions
+ *
+ * @covers ::_wp_mysql_week
+ */
+class Tests_Functons_WpMysqlWeek extends WP_UnitTestCase {
+
+	/**
+	 * @ticket 59931
+	 *
+	 * @dataProvider data_wp_mysql_week
+	 */
+	public function test_wp_mysql_week( $date, $start_of_week, $expected_sql ) {
+
+		add_filter(
+			'pre_option_start_of_week',
+			static function ( $value ) use ( $start_of_week ) {
+				return $start_of_week ?? $value;
+			}
+		);
+
+		$this->assertSame( $expected_sql, _wp_mysql_week( 'col_name' ) );
+	}
+
+	/**
+	 * @return array[]
+	 */
+	public function data_wp_mysql_week() {
+		return array(
+			array( '1969-12-25', 0, 'WEEK( col_name, 0 )' ),
+			array( '1969-12-25', 1, 'WEEK( col_name, 1 )' ),
+			array( '1969-12-25', 2, 'WEEK( DATE_SUB( col_name, INTERVAL 2 DAY ), 0 )' ),
+			array( '1969-12-25', 3, 'WEEK( DATE_SUB( col_name, INTERVAL 3 DAY ), 0 )' ),
+			array( '1969-12-25', 4, 'WEEK( DATE_SUB( col_name, INTERVAL 4 DAY ), 0 )' ),
+			array( '1969-12-25', 5, 'WEEK( DATE_SUB( col_name, INTERVAL 5 DAY ), 0 )' ),
+			array( '1969-12-25', 6, 'WEEK( DATE_SUB( col_name, INTERVAL 6 DAY ), 0 )' ),
+			array( '1969-12-25', 9, 'WEEK( col_name, 0 )' ),
+		);
+	}
+}
diff --git a/tests/functions/wpNonceAys.php b/tests/functions/wpNonceAys.php
index 06b807da42..02ccbd9b52 100644
--- a/tests/functions/wpNonceAys.php
+++ b/tests/functions/wpNonceAys.php
@@ -5,7 +5,8 @@
  *
  * @since 5.9.0
  *
- * @group functions.php
+ * @group functions
+ *
  * @covers ::wp_nonce_ays
  */
 class Tests_Functions_wpNonceAys extends WP_UnitTestCase {
diff --git a/tests/functions/wpNonceField.php b/tests/functions/wpNonceField.php
index 78116f01e5..7ca6e80d0d 100644
--- a/tests/functions/wpNonceField.php
+++ b/tests/functions/wpNonceField.php
@@ -5,7 +5,8 @@
  *
  * @since 6.1.0
  *
- * @group functions.php
+ * @group functions
+ *
  * @covers ::wp_nonce_field
  */
 class Tests_Functions_wpNonceField extends WP_UnitTestCase {
@@ -43,7 +44,7 @@ class Tests_Functions_wpNonceField extends WP_UnitTestCase {
 	/**
 	 * Data provider.
 	 *
-	 * @return array
+	 * @return array[]
 	 */
 	public function data_wp_nonce_field() {
 		return array(
diff --git a/tests/functions/wpNonceUrl.php b/tests/functions/wpNonceUrl.php
index f98b3a3fe8..a4d409dd86 100644
--- a/tests/functions/wpNonceUrl.php
+++ b/tests/functions/wpNonceUrl.php
@@ -1,7 +1,7 @@
 <?php
 
 /**
- * @group functions.php
+ * @group functions
  *
  * @covers ::wp_nonce_url
  */
@@ -37,7 +37,7 @@ class Tests_Functions_WpNonceUrl extends WP_UnitTestCase {
 	/**
 	 * Data provider for test_should_append_nonce_name_and_value().
 	 *
-	 * @return array
+	 * @return array[]
 	 */
 	public function data_should_append_nonce_name_and_value() {
 		return array(
@@ -124,7 +124,7 @@ class Tests_Functions_WpNonceUrl extends WP_UnitTestCase {
 	/**
 	 * Data provider for test_should_handle_existing_query_args().
 	 *
-	 * @return array
+	 * @return array[]
 	 */
 	public function data_should_handle_existing_query_args() {
 		return array(
diff --git a/tests/functions/wpParseIdList.php b/tests/functions/wpParseIdList.php
new file mode 100644
index 0000000000..cd1af1e923
--- /dev/null
+++ b/tests/functions/wpParseIdList.php
@@ -0,0 +1,102 @@
+<?php
+
+/**
+ * Tests for the wp_parse_id_list() function.
+ *
+ * @group functions
+ *
+ * @covers ::wp_parse_id_list
+ */
+class Tests_Functions_wpParseIdList extends WP_UnitTestCase {
+
+	/**
+	 * @ticket 22074
+	 * @ticket 60218
+	 *
+	 * @dataProvider data_wp_parse_id_list
+	 * @dataProvider data_unexpected_input
+	 */
+	public function test_wp_parse_id_list( $input_list, $expected ) {
+		$this->assertSameSets( $expected, wp_parse_id_list( $input_list ) );
+	}
+
+	/**
+	 * Data provider.
+	 *
+	 * @return array[]
+	 */
+	public function data_wp_parse_id_list() {
+		return array(
+			'regular'                  => array(
+				'input_list' => '1,2,3,4',
+				'expected'   => array( 1, 2, 3, 4 ),
+			),
+			'double comma'             => array(
+				'input_list' => '1, 2,,3,4',
+				'expected'   => array( 1, 2, 3, 4 ),
+			),
+			'duplicate id in a string' => array(
+				'input_list' => '1,2,2,3,4',
+				'expected'   => array( 1, 2, 3, 4 ),
+			),
+			'duplicate id in an array' => array(
+				'input_list' => array( '1', '2', '3', '4', '3' ),
+				'expected'   => array( 1, 2, 3, 4 ),
+			),
+			'mixed type'               => array(
+				'input_list' => array( 1, '2', 3, '4' ),
+				'expected'   => array( 1, 2, 3, 4 ),
+			),
+			'negative ids in a string' => array(
+				'input_list' => '-1,2,-3,4',
+				'expected'   => array( 1, 2, 3, 4 ),
+			),
+			'negative ids in an array' => array(
+				'input_list' => array( -1, 2, '-3', '4' ),
+				'expected'   => array( 1, 2, 3, 4 ),
+			),
+		);
+	}
+
+	/**
+	 * Data provider.
+	 *
+	 * @return array[]
+	 */
+	public function data_unexpected_input() {
+		return array(
+			'string with commas' => array(
+				'input_list' => '1,2,string with spaces',
+				'expected'   => array( 1, 2, 0 ),
+			),
+			'array'              => array(
+				'input_list' => array( '1', 2, 'string with spaces' ),
+				'expected'   => array( 1, 2, 0 ),
+			),
+			'string with spaces' => array(
+				'input_list' => '1 2 string with spaces',
+				'expected'   => array( 1, 2, 0 ),
+			),
+			'array with spaces'  => array(
+				'input_list' => array( '1 2 string with spaces' ),
+				'expected'   => array( 1 ),
+			),
+			'string with html'   => array(
+				'input_list' => '1 2 string <strong>with</strong> <h1>HEADING</h1>',
+				'expected'   => array( 1, 2, 0 ),
+			),
+			'array with html'    => array(
+				'input_list' => array( '1', 2, 'string <strong>with</strong> <h1>HEADING</h1>' ),
+				'expected'   => array( 1, 2, 0 ),
+			),
+			'array with null'    => array(
+				'input_list' => array( 1, 2, null ),
+				'expected'   => array( 1, 2 ),
+			),
+			'array with false'   => array(
+				'input_list' => array( 1, 2, false ),
+				'expected'   => array( 1, 2, 0 ),
+			),
+		);
+	}
+}
diff --git a/tests/functions/wpParseList.php b/tests/functions/wpParseList.php
new file mode 100644
index 0000000000..2f7bf086e4
--- /dev/null
+++ b/tests/functions/wpParseList.php
@@ -0,0 +1,74 @@
+<?php
+
+/**
+ * Tests for the wp_parse_list() function.
+ *
+ * @group functions
+ *
+ * @covers ::wp_parse_list
+ */
+class Tests_Functions_wpParseList extends WP_UnitTestCase {
+
+	/**
+	 * @ticket 43977
+	 *
+	 * @dataProvider data_wp_parse_list
+	 */
+	public function test_wp_parse_list( $input_list, $expected ) {
+		$this->assertSameSets( $expected, wp_parse_list( $input_list ) );
+	}
+
+	/**
+	 * Data provider.
+	 *
+	 * @return array[]
+	 */
+	public function data_wp_parse_list() {
+		return array(
+			'ids only'           => array(
+				'input_list' => '1,2,3,4',
+				'expected'   => array( '1', '2', '3', '4' ),
+			),
+			'slugs only'         => array(
+				'input_list' => 'apple,banana,carrot,dog',
+				'expected'   => array( 'apple', 'banana', 'carrot', 'dog' ),
+			),
+			'ids and slugs'      => array(
+				'input_list' => '1,2,apple,banana',
+				'expected'   => array( '1', '2', 'apple', 'banana' ),
+			),
+			'space after comma'  => array(
+				'input_list' => '1, 2,apple,banana',
+				'expected'   => array( '1', '2', 'apple', 'banana' ),
+			),
+			'double comma'       => array(
+				'input_list' => '1,2,apple,,banana',
+				'expected'   => array( '1', '2', 'apple', 'banana' ),
+			),
+			'leading comma'      => array(
+				'input_list' => ',1,2,apple,banana',
+				'expected'   => array( '1', '2', 'apple', 'banana' ),
+			),
+			'trailing comma'     => array(
+				'input_list' => '1,2,apple,banana,',
+				'expected'   => array( '1', '2', 'apple', 'banana' ),
+			),
+			'space before comma' => array(
+				'input_list' => '1,2 ,apple,banana',
+				'expected'   => array( '1', '2', 'apple', 'banana' ),
+			),
+			'empty string'       => array(
+				'input_list' => '',
+				'expected'   => array(),
+			),
+			'comma only'         => array(
+				'input_list' => ',',
+				'expected'   => array(),
+			),
+			'double comma only'  => array(
+				'input_list' => ',,',
+				'expected'   => array(),
+			),
+		);
+	}
+}
diff --git a/tests/functions/wpParseSlugList.php b/tests/functions/wpParseSlugList.php
new file mode 100644
index 0000000000..8b9ccb2ddb
--- /dev/null
+++ b/tests/functions/wpParseSlugList.php
@@ -0,0 +1,98 @@
+<?php
+
+/**
+ * Tests for the wp_parse_slug_list() function.
+ *
+ * @group functions
+ *
+ * @covers ::wp_parse_slug_list
+ */
+class Tests_Functions_WpParseSlugList extends WP_UnitTestCase {
+
+	/**
+	 * @ticket 35582
+	 * @ticket 60217
+	 *
+	 * @dataProvider data_wp_parse_slug_list
+	 * @dataProvider data_unexpected_input
+	 */
+	public function test_wp_parse_slug_list( $input_list, $expected ) {
+		$this->assertSameSets( $expected, wp_parse_slug_list( $input_list ) );
+	}
+
+	/**
+	 * Data provider.
+	 *
+	 * @return array[]
+	 */
+	public function data_wp_parse_slug_list() {
+		return array(
+			'regular'                    => array(
+				'input_list' => 'apple,banana,carrot,dog',
+				'expected'   => array( 'apple', 'banana', 'carrot', 'dog' ),
+			),
+			'double comma'               => array(
+				'input_list' => 'apple, banana,,carrot,dog',
+				'expected'   => array( 'apple', 'banana', 'carrot', 'dog' ),
+			),
+			'duplicate slug in a string' => array(
+				'input_list' => 'apple,banana,carrot,carrot,dog',
+				'expected'   => array( 'apple', 'banana', 'carrot', 'dog' ),
+			),
+			'duplicate slug in an array' => array(
+				'input_list' => array( 'apple', 'banana', 'carrot', 'carrot', 'dog' ),
+				'expected'   => array( 'apple', 'banana', 'carrot', 'dog' ),
+			),
+			'string with spaces'         => array(
+				'input_list' => 'apple banana carrot dog',
+				'expected'   => array( 'apple', 'banana', 'carrot', 'dog' ),
+			),
+			'array with spaces'          => array(
+				'input_list' => array( 'apple ', 'banana carrot', 'd o g' ),
+				'expected'   => array( 'apple', 'banana-carrot', 'd-o-g' ),
+			),
+		);
+	}
+
+	/**
+	 * Data provider.
+	 *
+	 * @return array[]
+	 */
+	public function data_unexpected_input() {
+		return array(
+			'string with commas' => array(
+				'input_list' => '1,2,string with spaces',
+				'expected'   => array( '1', '2', 'string', 'with', 'spaces' ),
+			),
+			'array'              => array(
+				'input_list' => array( '1', 2, 'string with spaces' ),
+				'expected'   => array( '1', '2', 'string-with-spaces' ),
+			),
+			'string with spaces' => array(
+				'input_list' => '1 2 string with spaces',
+				'expected'   => array( '1', '2', 'string', 'with', 'spaces' ),
+			),
+			'array with spaces'  => array(
+				'input_list' => array( '1 2 string with spaces' ),
+				'expected'   => array( '1-2-string-with-spaces' ),
+			),
+			'string with html'   => array(
+				'input_list' => '1 2 string <strong>with</strong> <h1>HEADING</h1>',
+				'expected'   => array( '1', '2', 'string', 'with', 'heading' ),
+			),
+			'array with html'    => array(
+				'input_list' => array( '1', 2, 'string <strong>with</strong> <h1>HEADING</h1>' ),
+				'expected'   => array( '1', '2', 'string-with-heading' ),
+			),
+			'array with null'    => array(
+				'input_list' => array( 1, 2, null ),
+				'expected'   => array( '1', '2' ),
+			),
+			'array with false'   => array(
+				'input_list' => array( 1, 2, false ),
+				'expected'   => array( '1', '2', '' ),
+			),
+		);
+	}
+}
diff --git a/tests/functions/wpRefererField.php b/tests/functions/wpRefererField.php
index 227fee71f4..72e2fe99d5 100644
--- a/tests/functions/wpRefererField.php
+++ b/tests/functions/wpRefererField.php
@@ -5,7 +5,8 @@
  *
  * @since 6.1.0
  *
- * @group functions.php
+ * @group functions
+ *
  * @covers ::wp_referer_field
  */
 class Tests_Functions_wpRefererField extends WP_UnitTestCase {
@@ -47,7 +48,7 @@ class Tests_Functions_wpRefererField extends WP_UnitTestCase {
 	/**
 	 * Data provider for test_wp_referer_field_should_respect_display_arg().
 	 *
-	 * @return array
+	 * @return array[]
 	 */
 	public function data_wp_referer_field_should_respect_display_arg() {
 		return array(
diff --git a/tests/functions/wpRemoteFopen.php b/tests/functions/wpRemoteFopen.php
index e29c9d3181..1e687d73d1 100644
--- a/tests/functions/wpRemoteFopen.php
+++ b/tests/functions/wpRemoteFopen.php
@@ -2,7 +2,8 @@
 /**
  * @group http
  * @group external-http
- * @group functions.php
+ * @group functions
+ *
  * @covers ::wp_remote_fopen
  */
 class Tests_Functions_wpRemoteFopen extends WP_UnitTestCase {
diff --git a/tests/functions/wpScheduledDelete.php b/tests/functions/wpScheduledDelete.php
new file mode 100644
index 0000000000..c7963578db
--- /dev/null
+++ b/tests/functions/wpScheduledDelete.php
@@ -0,0 +1,171 @@
+<?php
+
+/**
+ * Tests for the wp_scheduled_delete() function.
+ *
+ * @group functions
+ *
+ * @covers ::wp_scheduled_delete
+ */
+class Tests_Functions_wpScheduledDelete extends WP_UnitTestCase {
+
+	protected static $comment_id;
+	protected static $page_id;
+
+	public function tear_down() {
+		// Remove comment.
+		if ( self::$comment_id ) {
+			wp_delete_comment( self::$comment_id );
+		}
+
+		// Remove page.
+		if ( self::$page_id ) {
+			wp_delete_post( self::$page_id );
+		}
+
+		parent::tear_down();
+	}
+
+	/**
+	 * Tests that old trashed posts/pages are deleted.
+	 *
+	 * @ticket 59938
+	 */
+	public function test_wp_scheduled_delete() {
+		self::$page_id = self::factory()->post->create(
+			array(
+				'post_type'   => 'page',
+				'post_status' => 'trash',
+			)
+		);
+		add_post_meta( self::$page_id, '_wp_trash_meta_time', time() - ( DAY_IN_SECONDS * EMPTY_TRASH_DAYS + 1 ) );
+		add_post_meta( self::$page_id, '_wp_trash_meta_status', 'published' );
+
+		$this->assertInstanceOf( 'WP_Post', get_post( self::$page_id ) );
+
+		wp_scheduled_delete();
+
+		$this->assertNull( get_post( self::$page_id ) );
+	}
+
+	/**
+	 * Tests that old trashed posts/pages are not deleted if status is not 'trash'.
+	 *
+	 * Ensures that the trash meta status is removed.
+	 *
+	 * @ticket 59938
+	 */
+	public function test_wp_scheduled_delete_status_not_trash() {
+		self::$page_id = self::factory()->post->create(
+			array(
+				'post_type'   => 'page',
+				'post_status' => 'published',
+			)
+		);
+		add_post_meta( self::$page_id, '_wp_trash_meta_time', time() - ( DAY_IN_SECONDS * EMPTY_TRASH_DAYS + 1 ) );
+		add_post_meta( self::$page_id, '_wp_trash_meta_status', 'published' );
+
+		$this->assertInstanceOf( 'WP_Post', get_post( self::$page_id ) );
+
+		wp_scheduled_delete();
+
+		$this->assertInstanceOf( 'WP_Post', get_post( self::$page_id ) );
+		$this->assertSame( '', get_post_meta( self::$page_id, '_wp_trash_meta_time', true ) );
+		$this->assertSame( '', get_post_meta( self::$page_id, '_wp_trash_meta_status', true ) );
+	}
+
+
+	/**
+	 * Tests that old trashed posts/pages are not deleted if not old enough.
+	 *
+	 * @ticket 59938
+	 */
+	public function test_wp_scheduled_delete_page_not_old_enough() {
+		self::$page_id = self::factory()->post->create(
+			array(
+				'post_type'   => 'page',
+				'post_status' => 'trash',
+			)
+		);
+		add_post_meta( self::$page_id, '_wp_trash_meta_time', time() - ( DAY_IN_SECONDS * EMPTY_TRASH_DAYS - 1 ) );
+		add_post_meta( self::$page_id, '_wp_trash_meta_status', 'published' );
+
+		$this->assertInstanceOf( 'WP_Post', get_post( self::$page_id ) );
+
+		wp_scheduled_delete();
+
+		$this->assertInstanceOf( 'WP_Post', get_post( self::$page_id ) );
+		$this->assertIsNumeric( get_post_meta( self::$page_id, '_wp_trash_meta_time', true ) );
+		$this->assertSame( 'published', get_post_meta( self::$page_id, '_wp_trash_meta_status', true ) );
+	}
+
+	/**
+	 * Tests that old trashed comments are deleted.
+	 *
+	 * @ticket 59938
+	 */
+	public function test_wp_scheduled_delete_comment() {
+		self::$comment_id = self::factory()->comment->create(
+			array(
+				'comment_approved' => 'trash',
+			)
+		);
+		add_comment_meta( self::$comment_id, '_wp_trash_meta_time', time() - ( DAY_IN_SECONDS * EMPTY_TRASH_DAYS + 1 ) );
+		add_post_meta( self::$comment_id, '_wp_trash_meta_status', 'published' );
+
+		$this->assertInstanceOf( 'WP_Comment', get_comment( self::$comment_id ) );
+
+		wp_scheduled_delete();
+
+		$this->assertNull( get_comment( self::$comment_id ) );
+	}
+
+	/**
+	 * Tests that old trashed comments are not deleted if status is not 'trash'.
+	 *
+	 * Ensures that the trash meta status is removed.
+	 *
+	 * @ticket 59938
+	 */
+	public function test_wp_scheduled_delete_comment_status_not_trash() {
+		self::$comment_id = self::factory()->comment->create(
+			array(
+				'comment_approved' => '1',
+			)
+		);
+		add_comment_meta( self::$comment_id, '_wp_trash_meta_time', time() - ( DAY_IN_SECONDS * EMPTY_TRASH_DAYS + 1 ) );
+		add_comment_meta( self::$comment_id, '_wp_trash_meta_status', 'published' );
+
+		$this->assertInstanceOf( 'WP_Comment', get_comment( self::$comment_id ) );
+
+		wp_scheduled_delete();
+
+		$this->assertInstanceOf( 'WP_Comment', get_comment( self::$comment_id ) );
+		$this->assertSame( '', get_comment_meta( self::$comment_id, '_wp_trash_meta_time', true ) );
+		$this->assertSame( '', get_comment_meta( self::$comment_id, '_wp_trash_meta_status', true ) );
+	}
+
+
+	/**
+	 * Tests that old trashed comments are not deleted if not old enough.
+	 *
+	 * @ticket 59938
+	 */
+	public function test_wp_scheduled_delete_comment_not_old_enough() {
+		self::$comment_id = self::factory()->comment->create(
+			array(
+				'comment_approved' => 'trash',
+			)
+		);
+		add_comment_meta( self::$comment_id, '_wp_trash_meta_time', time() - ( DAY_IN_SECONDS * EMPTY_TRASH_DAYS - 1 ) );
+		add_comment_meta( self::$comment_id, '_wp_trash_meta_status', 'published' );
+
+		$this->assertInstanceOf( 'WP_Comment', get_comment( self::$comment_id ) );
+
+		wp_scheduled_delete();
+
+		$this->assertInstanceOf( 'WP_Comment', get_comment( self::$comment_id ) );
+		$this->assertIsNumeric( get_comment_meta( self::$comment_id, '_wp_trash_meta_time', true ) );
+		$this->assertSame( 'published', get_comment_meta( self::$comment_id, '_wp_trash_meta_status', true ) );
+	}
+}
diff --git a/tests/functions/wpTimezoneChoiceUsortCallback.php b/tests/functions/wpTimezoneChoiceUsortCallback.php
new file mode 100644
index 0000000000..5c89cbaf4e
--- /dev/null
+++ b/tests/functions/wpTimezoneChoiceUsortCallback.php
@@ -0,0 +1,642 @@
+<?php
+
+/**
+ * Tests for the _wp_timezone_choice_usort_callback() function.
+ *
+ * @group functions
+ *
+ * @covers ::_wp_timezone_choice_usort_callback
+ */
+class Tests_Functions_WpTimezoneChoiceUsortCallback extends WP_UnitTestCase {
+
+	/**
+	 * @ticket 59953
+	 *
+	 * @dataProvider data_wp_timezone_choice_usort_callback
+	 */
+	public function test_wp_timezone_choice_usort_callback( $unsorted, $sorted ) {
+		usort( $unsorted, '_wp_timezone_choice_usort_callback' );
+
+		$this->assertSame( $sorted, $unsorted );
+	}
+
+	public function data_wp_timezone_choice_usort_callback() {
+		return array(
+			'just GMT+'                         => array(
+				'unsorted' => array(
+					array(
+						'continent'   => 'Etc',
+						'city'        => 'GMT+a',
+						't_continent' => '',
+						't_city'      => '',
+						't_subcity'   => '',
+					),
+					array(
+						'continent'   => 'Etc',
+						'city'        => 'GMT+b',
+						't_continent' => '',
+						't_city'      => '',
+						't_subcity'   => '',
+					),
+					array(
+						'continent'   => 'Etc',
+						'city'        => 'GMT+c',
+						't_continent' => '',
+						't_city'      => '',
+						't_subcity'   => '',
+					),
+					array(
+						'continent'   => 'Etc',
+						'city'        => 'GMT+e',
+						't_continent' => '',
+						't_city'      => '',
+						't_subcity'   => '',
+					),
+					array(
+						'continent'   => 'Etc',
+						'city'        => 'GMT+d',
+						't_continent' => '',
+						't_city'      => '',
+						't_subcity'   => '',
+					),
+				),
+				'sorted'   => array(
+					array(
+						'continent'   => 'Etc',
+						'city'        => 'GMT+e',
+						't_continent' => '',
+						't_city'      => '',
+						't_subcity'   => '',
+					),
+					array(
+						'continent'   => 'Etc',
+						'city'        => 'GMT+d',
+						't_continent' => '',
+						't_city'      => '',
+						't_subcity'   => '',
+					),
+					array(
+						'continent'   => 'Etc',
+						'city'        => 'GMT+c',
+						't_continent' => '',
+						't_city'      => '',
+						't_subcity'   => '',
+					),
+					array(
+						'continent'   => 'Etc',
+						'city'        => 'GMT+b',
+						't_continent' => '',
+						't_city'      => '',
+						't_subcity'   => '',
+					),
+					array(
+						'continent'   => 'Etc',
+						'city'        => 'GMT+a',
+						't_continent' => '',
+						't_city'      => '',
+						't_subcity'   => '',
+					),
+				),
+			),
+
+			'mixed UTC and GMT'                 => array(
+				'unsorted' => array(
+					array(
+						'continent'   => 'Etc',
+						'city'        => 'GMT+a',
+						't_continent' => '',
+						't_city'      => '',
+						't_subcity'   => '',
+					),
+					array(
+						'continent'   => 'Etc',
+						'city'        => 'UTC',
+						't_continent' => '',
+						't_city'      => '',
+						't_subcity'   => '',
+					),
+					array(
+						'continent'   => 'Etc',
+						'city'        => 'GMT+c',
+						't_continent' => '',
+						't_city'      => '',
+						't_subcity'   => '',
+					),
+					array(
+						'continent'   => 'Etc',
+						'city'        => 'UTC',
+						't_continent' => '',
+						't_city'      => '',
+						't_subcity'   => '',
+					),
+					array(
+						'continent'   => 'Etc',
+						'city'        => 'GMT+d',
+						't_continent' => '',
+						't_city'      => '',
+						't_subcity'   => '',
+					),
+				),
+				'sorted'   => array(
+					array(
+						'continent'   => 'Etc',
+						'city'        => 'GMT+d',
+						't_continent' => '',
+						't_city'      => '',
+						't_subcity'   => '',
+					),
+					array(
+						'continent'   => 'Etc',
+						'city'        => 'GMT+c',
+						't_continent' => '',
+						't_city'      => '',
+						't_subcity'   => '',
+					),
+					array(
+						'continent'   => 'Etc',
+						'city'        => 'GMT+a',
+						't_continent' => '',
+						't_city'      => '',
+						't_subcity'   => '',
+					),
+					array(
+						'continent'   => 'Etc',
+						'city'        => 'UTC',
+						't_continent' => '',
+						't_city'      => '',
+						't_subcity'   => '',
+					),
+					array(
+						'continent'   => 'Etc',
+						'city'        => 'UTC',
+						't_continent' => '',
+						't_city'      => '',
+						't_subcity'   => '',
+					),
+				),
+			),
+
+			'just alpha city'                   => array(
+				'unsorted' => array(
+					array(
+						'continent'   => 'Etc',
+						'city'        => 'a',
+						't_continent' => '',
+						't_city'      => '',
+						't_subcity'   => '',
+					),
+					array(
+						'continent'   => 'Etc',
+						'city'        => 'e',
+						't_continent' => '',
+						't_city'      => '',
+						't_subcity'   => '',
+					),
+					array(
+						'continent'   => 'Etc',
+						'city'        => 'b',
+						't_continent' => '',
+						't_city'      => '',
+						't_subcity'   => '',
+					),
+					array(
+						'continent'   => 'Etc',
+						'city'        => 'd',
+						't_continent' => '',
+						't_city'      => '',
+						't_subcity'   => '',
+					),
+					array(
+						'continent'   => 'Etc',
+						'city'        => 'c',
+						't_continent' => '',
+						't_city'      => '',
+						't_subcity'   => '',
+					),
+				),
+				'sorted'   => array(
+					array(
+						'continent'   => 'Etc',
+						'city'        => 'a',
+						't_continent' => '',
+						't_city'      => '',
+						't_subcity'   => '',
+					),
+					array(
+						'continent'   => 'Etc',
+						'city'        => 'b',
+						't_continent' => '',
+						't_city'      => '',
+						't_subcity'   => '',
+					),
+					array(
+						'continent'   => 'Etc',
+						'city'        => 'c',
+						't_continent' => '',
+						't_city'      => '',
+						't_subcity'   => '',
+					),
+					array(
+						'continent'   => 'Etc',
+						'city'        => 'd',
+						't_continent' => '',
+						't_city'      => '',
+						't_subcity'   => '',
+					),
+					array(
+						'continent'   => 'Etc',
+						'city'        => 'e',
+						't_continent' => '',
+						't_city'      => '',
+						't_subcity'   => '',
+					),
+				),
+			),
+
+			'not Etc continents are not sorted' => array(
+				'unsorted' => array(
+					array(
+						'continent'   => 'd',
+						'city'        => '',
+						't_continent' => '',
+						't_city'      => '',
+						't_subcity'   => '',
+					),
+					array(
+						'continent'   => 'c',
+						'city'        => '',
+						't_continent' => '',
+						't_city'      => '',
+						't_subcity'   => '',
+					),
+					array(
+						'continent'   => 'a',
+						'city'        => '',
+						't_continent' => '',
+						't_city'      => '',
+						't_subcity'   => '',
+					),
+					array(
+						'continent'   => 'd',
+						'city'        => '',
+						't_continent' => '',
+						't_city'      => '',
+						't_subcity'   => '',
+					),
+					array(
+						'continent'   => 'e',
+						'city'        => '',
+						't_continent' => '',
+						't_city'      => '',
+						't_subcity'   => '',
+					),
+				),
+				'sorted'   => array(
+					array(
+						'continent'   => 'd',
+						'city'        => '',
+						't_continent' => '',
+						't_city'      => '',
+						't_subcity'   => '',
+					),
+					array(
+						'continent'   => 'c',
+						'city'        => '',
+						't_continent' => '',
+						't_city'      => '',
+						't_subcity'   => '',
+					),
+					array(
+						'continent'   => 'a',
+						'city'        => '',
+						't_continent' => '',
+						't_city'      => '',
+						't_subcity'   => '',
+					),
+					array(
+						'continent'   => 'd',
+						'city'        => '',
+						't_continent' => '',
+						't_city'      => '',
+						't_subcity'   => '',
+					),
+					array(
+						'continent'   => 'e',
+						'city'        => '',
+						't_continent' => '',
+						't_city'      => '',
+						't_subcity'   => '',
+					),
+				),
+			),
+
+			'not Etc just t_continent'          => array(
+				'unsorted' => array(
+					array(
+						'continent'   => '',
+						'city'        => '',
+						't_continent' => 'a',
+						't_city'      => '',
+						't_subcity'   => '',
+					),
+					array(
+						'continent'   => '',
+						'city'        => '',
+						't_continent' => 'd',
+						't_city'      => '',
+						't_subcity'   => '',
+					),
+					array(
+						'continent'   => '',
+						'city'        => '',
+						't_continent' => 'b',
+						't_city'      => '',
+						't_subcity'   => '',
+					),
+					array(
+						'continent'   => '',
+						'city'        => '',
+						't_continent' => 'e',
+						't_city'      => '',
+						't_subcity'   => '',
+					),
+					array(
+						'continent'   => '',
+						'city'        => '',
+						't_continent' => 'c',
+						't_city'      => '',
+						't_subcity'   => '',
+					),
+				),
+				'sorted'   => array(
+					array(
+						'continent'   => '',
+						'city'        => '',
+						't_continent' => 'a',
+						't_city'      => '',
+						't_subcity'   => '',
+					),
+					array(
+						'continent'   => '',
+						'city'        => '',
+						't_continent' => 'b',
+						't_city'      => '',
+						't_subcity'   => '',
+					),
+					array(
+						'continent'   => '',
+						'city'        => '',
+						't_continent' => 'c',
+						't_city'      => '',
+						't_subcity'   => '',
+					),
+					array(
+						'continent'   => '',
+						'city'        => '',
+						't_continent' => 'd',
+						't_city'      => '',
+						't_subcity'   => '',
+					),
+					array(
+						'continent'   => '',
+						'city'        => '',
+						't_continent' => 'e',
+						't_city'      => '',
+						't_subcity'   => '',
+					),
+				),
+			),
+
+			'not Etc just t_city'               => array(
+				'unsorted' => array(
+					array(
+						'continent'   => '',
+						'city'        => '',
+						't_continent' => 'a',
+						't_city'      => 'd',
+						't_subcity'   => '',
+					),
+					array(
+						'continent'   => '',
+						'city'        => '',
+						't_continent' => 'a',
+						't_city'      => 'e',
+						't_subcity'   => '',
+					),
+					array(
+						'continent'   => '',
+						'city'        => '',
+						't_continent' => 'a',
+						't_city'      => 'c',
+						't_subcity'   => '',
+					),
+					array(
+						'continent'   => '',
+						'city'        => '',
+						't_continent' => 'a',
+						't_city'      => 'a',
+						't_subcity'   => '',
+					),
+					array(
+						'continent'   => '',
+						'city'        => '',
+						't_continent' => 'a',
+						't_city'      => 'b',
+						't_subcity'   => '',
+					),
+				),
+				'sorted'   => array(
+					array(
+						'continent'   => '',
+						'city'        => '',
+						't_continent' => 'a',
+						't_city'      => 'a',
+						't_subcity'   => '',
+					),
+					array(
+						'continent'   => '',
+						'city'        => '',
+						't_continent' => 'a',
+						't_city'      => 'b',
+						't_subcity'   => '',
+					),
+					array(
+						'continent'   => '',
+						'city'        => '',
+						't_continent' => 'a',
+						't_city'      => 'c',
+						't_subcity'   => '',
+					),
+					array(
+						'continent'   => '',
+						'city'        => '',
+						't_continent' => 'a',
+						't_city'      => 'd',
+						't_subcity'   => '',
+					),
+					array(
+						'continent'   => '',
+						'city'        => '',
+						't_continent' => 'a',
+						't_city'      => 'e',
+						't_subcity'   => '',
+					),
+				),
+			),
+
+			'not Etc just t_subcity'            => array(
+				'unsorted' => array(
+					array(
+						'continent'   => '',
+						'city'        => '',
+						't_continent' => 'a',
+						't_city'      => 'a',
+						't_subcity'   => 'b',
+					),
+					array(
+						'continent'   => '',
+						'city'        => '',
+						't_continent' => 'a',
+						't_city'      => 'a',
+						't_subcity'   => 'e',
+					),
+					array(
+						'continent'   => '',
+						'city'        => '',
+						't_continent' => 'a',
+						't_city'      => 'a',
+						't_subcity'   => 'a',
+					),
+					array(
+						'continent'   => '',
+						'city'        => '',
+						't_continent' => 'a',
+						't_city'      => 'a',
+						't_subcity'   => 'c',
+					),
+					array(
+						'continent'   => '',
+						'city'        => '',
+						't_continent' => 'a',
+						't_city'      => 'a',
+						't_subcity'   => 'd',
+					),
+				),
+				'sorted'   => array(
+					array(
+						'continent'   => '',
+						'city'        => '',
+						't_continent' => 'a',
+						't_city'      => 'a',
+						't_subcity'   => 'a',
+					),
+					array(
+						'continent'   => '',
+						'city'        => '',
+						't_continent' => 'a',
+						't_city'      => 'a',
+						't_subcity'   => 'b',
+					),
+					array(
+						'continent'   => '',
+						'city'        => '',
+						't_continent' => 'a',
+						't_city'      => 'a',
+						't_subcity'   => 'c',
+					),
+					array(
+						'continent'   => '',
+						'city'        => '',
+						't_continent' => 'a',
+						't_city'      => 'a',
+						't_subcity'   => 'd',
+					),
+					array(
+						'continent'   => '',
+						'city'        => '',
+						't_continent' => 'a',
+						't_city'      => 'a',
+						't_subcity'   => 'e',
+					),
+				),
+			),
+
+			'just continent with Etc which pulls 1 to bottom' => array(
+				'unsorted' => array(
+					array(
+						'continent'   => '',
+						'city'        => '',
+						't_continent' => 'b',
+						't_city'      => '',
+						't_subcity'   => '',
+					),
+					array(
+						'continent'   => '',
+						'city'        => '',
+						't_continent' => 'c',
+						't_city'      => '',
+						't_subcity'   => '',
+					),
+					array(
+						'continent'   => 'Etc',
+						'city'        => '',
+						't_continent' => '1',
+						't_city'      => '',
+						't_subcity'   => '',
+					),
+					array(
+						'continent'   => '',
+						'city'        => '',
+						't_continent' => 'd',
+						't_city'      => '',
+						't_subcity'   => '',
+					),
+					array(
+						'continent'   => '',
+						'city'        => '',
+						't_continent' => 'a',
+						't_city'      => '',
+						't_subcity'   => '',
+					),
+				),
+				'sorted'   => array(
+					array(
+						'continent'   => '',
+						'city'        => '',
+						't_continent' => 'a',
+						't_city'      => '',
+						't_subcity'   => '',
+					),
+					array(
+						'continent'   => '',
+						'city'        => '',
+						't_continent' => 'b',
+						't_city'      => '',
+						't_subcity'   => '',
+					),
+					array(
+						'continent'   => '',
+						'city'        => '',
+						't_continent' => 'c',
+						't_city'      => '',
+						't_subcity'   => '',
+					),
+					array(
+						'continent'   => '',
+						'city'        => '',
+						't_continent' => 'd',
+						't_city'      => '',
+						't_subcity'   => '',
+					),
+					array(
+						'continent'   => 'Etc',
+						'city'        => '',
+						't_continent' => '1',
+						't_city'      => '',
+						't_subcity'   => '',
+					),
+				),
+			),
+		);
+	}
+}
diff --git a/tests/functions/wpToKebabCase.php b/tests/functions/wpToKebabCase.php
index 7a765c78f3..c7fb5a4a7e 100644
--- a/tests/functions/wpToKebabCase.php
+++ b/tests/functions/wpToKebabCase.php
@@ -5,7 +5,8 @@
  *
  * @since 5.8.0
  *
- * @group functions.php
+ * @group functions
+ *
  * @covers ::_wp_to_kebab_case
  */
 class Tests_Functions_wpToKebabCase extends WP_UnitTestCase {
diff --git a/tests/functions/wpTriggerError.php b/tests/functions/wpTriggerError.php
index 40582bc24a..053acaf160 100644
--- a/tests/functions/wpTriggerError.php
+++ b/tests/functions/wpTriggerError.php
@@ -5,7 +5,8 @@
  *
  * @since 6.4.0
  *
- * @group functions.php
+ * @group functions
+ *
  * @covers ::wp_trigger_error
  */
 class Tests_Functions_WpTriggerError extends WP_UnitTestCase {
@@ -77,7 +78,7 @@ class Tests_Functions_WpTriggerError extends WP_UnitTestCase {
 	/**
 	 * Data provider.
 	 *
-	 * @return array
+	 * @return array[]
 	 */
 	public function data_should_trigger_error() {
 		return array(
diff --git a/tests/functions/wpUniquePrefixedId.php b/tests/functions/wpUniquePrefixedId.php
new file mode 100644
index 0000000000..ed6e489a3e
--- /dev/null
+++ b/tests/functions/wpUniquePrefixedId.php
@@ -0,0 +1,196 @@
+<?php
+
+/**
+ * Test cases for the `wp_unique_prefixed_id()` function.
+ *
+ * @package WordPress\UnitTests
+ *
+ * @since 6.4.0
+ *
+ * @group functions
+ * @covers ::wp_unique_prefixed_id
+ */
+class Tests_Functions_WpUniquePrefixedId extends WP_UnitTestCase {
+
+	/**
+	 * Tests that the expected unique prefixed IDs are created.
+	 *
+	 * @ticket 59681
+	 *
+	 * @dataProvider data_should_create_unique_prefixed_ids
+	 *
+	 * @runInSeparateProcess
+	 * @preserveGlobalState disabled
+	 *
+	 * @param mixed $prefix   The prefix.
+	 * @param array $expected The next two expected IDs.
+	 */
+	public function test_should_create_unique_prefixed_ids( $prefix, $expected ) {
+		$id1 = wp_unique_prefixed_id( $prefix );
+		$id2 = wp_unique_prefixed_id( $prefix );
+
+		$this->assertNotSame( $id1, $id2, 'The IDs are not unique.' );
+		$this->assertSame( $expected, array( $id1, $id2 ), 'The IDs did not match the expected values.' );
+	}
+
+	/**
+	 * Data provider.
+	 *
+	 * @return array[]
+	 */
+	public function data_should_create_unique_prefixed_ids() {
+		return array(
+			'prefix as empty string'       => array(
+				'prefix'   => '',
+				'expected' => array( '1', '2' ),
+			),
+			'prefix as (string) "0"'       => array(
+				'prefix'   => '0',
+				'expected' => array( '01', '02' ),
+			),
+			'prefix as string'             => array(
+				'prefix'   => 'test',
+				'expected' => array( 'test1', 'test2' ),
+			),
+			'prefix as string with spaces' => array(
+				'prefix'   => '   ',
+				'expected' => array( '   1', '   2' ),
+			),
+			'prefix as (string) "1"'       => array(
+				'prefix'   => '1',
+				'expected' => array( '11', '12' ),
+			),
+			'prefix as a (string) "."'     => array(
+				'prefix'   => '.',
+				'expected' => array( '.1', '.2' ),
+			),
+			'prefix as a block name'       => array(
+				'prefix'   => 'core/list-item',
+				'expected' => array( 'core/list-item1', 'core/list-item2' ),
+			),
+		);
+	}
+
+	/**
+	 * @ticket 59681
+	 *
+	 * @dataProvider data_should_raise_notice_and_use_empty_string_prefix_when_nonstring_given
+	 *
+	 * @runInSeparateProcess
+	 * @preserveGlobalState disabled
+	 *
+	 * @param mixed  $non_string_prefix         Non-string prefix.
+	 * @param int    $number_of_ids_to_generate Number of IDs to generate.
+	 *                                          As the prefix will default to an empty string, changing the number of IDs generated within each dataset further tests ID uniqueness.
+	 * @param string $expected_message          Expected notice message.
+	 * @param array  $expected_ids              Expected unique IDs.
+	 */
+	public function test_should_raise_notice_and_use_empty_string_prefix_when_nonstring_given( $non_string_prefix, $number_of_ids_to_generate, $expected_message, $expected_ids ) {
+		$this->expectNotice();
+		$this->expectNoticeMessage( $expected_message );
+
+		$ids = array();
+		for ( $i = 0; $i < $number_of_ids_to_generate; $i++ ) {
+			$ids[] = wp_unique_prefixed_id( $non_string_prefix );
+		}
+
+		$this->assertSameSets( $ids, array_unique( $ids ), 'IDs are not unique.' );
+		$this->assertSameSets( $expected_ids, $ids, 'The IDs did not match the expected values.' );
+	}
+
+	/**
+	 * Data provider.
+	 *
+	 * @return array[]
+	 */
+	public function data_should_raise_notice_and_use_empty_string_prefix_when_nonstring_given() {
+		$message = 'wp_unique_prefixed_id(): The prefix must be a string. "%s" data type given.';
+		return array(
+			'prefix as null'          => array(
+				'non_string_prefix'         => null,
+				'number_of_ids_to_generate' => 2,
+				'expected_message'          => sprintf( $message, 'NULL' ),
+				'expected_ids'              => array( '1', '2' ),
+			),
+			'prefix as (int) 0'       => array(
+				'non_string_prefix'         => 0,
+				'number_of_ids_to_generate' => 3,
+				'expected_message'          => sprintf( $message, 'integer' ),
+				'expected_ids'              => array( '1', '2', '3' ),
+			),
+			'prefix as (int) 1'       => array(
+				'non_string_prefix'         => 1,
+				'number_of_ids_to_generate' => 4,
+				'expected_data_type'        => sprintf( $message, 'integer' ),
+				'expected_ids'              => array( '1', '2', '3', '4' ),
+			),
+			'prefix as (bool) false'  => array(
+				'non_string_prefix'         => false,
+				'number_of_ids_to_generate' => 5,
+				'expected_data_type'        => sprintf( $message, 'boolean' ),
+				'expected_ids'              => array( '1', '2', '3', '4', '5' ),
+			),
+			'prefix as (double) 98.7' => array(
+				'non_string_prefix'         => 98.7,
+				'number_of_ids_to_generate' => 6,
+				'expected_data_type'        => sprintf( $message, 'double' ),
+				'expected_ids'              => array( '1', '2', '3', '4', '5', '6' ),
+			),
+		);
+	}
+
+	/**
+	 * Prefixes that are or will become the same should generate unique IDs.
+	 *
+	 * This test is added to avoid future regressions if the function's prefix data type check is
+	 * modified to type juggle or check for scalar data types.
+	 *
+	 * @ticket 59681
+	 *
+	 * @dataProvider data_same_prefixes_should_generate_unique_ids
+	 *
+	 * @runInSeparateProcess
+	 * @preserveGlobalState disabled
+	 *
+	 * @param array $prefixes The prefixes to check.
+	 * @param array $expected The expected unique IDs.
+	 */
+	public function test_same_prefixes_should_generate_unique_ids( array $prefixes, array $expected ) {
+		// Suppress E_USER_NOTICE, which will be raised when a prefix is non-string.
+		$original_error_reporting = error_reporting();
+		error_reporting( $original_error_reporting & ~E_USER_NOTICE );
+
+		$ids = array();
+		foreach ( $prefixes as $prefix ) {
+			$ids[] = wp_unique_prefixed_id( $prefix );
+		}
+
+		// Reset error reporting.
+		error_reporting( $original_error_reporting );
+
+		$this->assertSameSets( $ids, array_unique( $ids ), 'IDs are not unique.' );
+		$this->assertSameSets( $expected, $ids, 'The IDs did not match the expected values.' );
+	}
+
+	/**
+	 * Data provider.
+	 *
+	 * @return array[]
+	 */
+	public function data_same_prefixes_should_generate_unique_ids() {
+		return array(
+			'prefixes = empty string' => array(
+				'prefixes' => array( null, true, '' ),
+				'expected' => array( '1', '2', '3' ),
+			),
+			'prefixes = 0'            => array(
+				'prefixes' => array( '0', 0, 0.0, false ),
+				'expected' => array( '01', '1', '2', '3' ),
+			),
+			'prefixes = 1'            => array(
+				'prefixes' => array( '1', 1, 1.0, true ),
+				'expected' => array( '11', '1', '2', '3' ),
+			),
+		);
+	}
+}
diff --git a/tests/functions/wpValidateBoolean.php b/tests/functions/wpValidateBoolean.php
index 4cef4534ab..832e28ffc5 100644
--- a/tests/functions/wpValidateBoolean.php
+++ b/tests/functions/wpValidateBoolean.php
@@ -3,7 +3,8 @@
 /**
  * Tests for the wp_validate_boolean() function.
  *
- * @group functions.php
+ * @group functions
+ *
  * @covers ::wp_validate_boolean
  */
 class Tests_Functions_wpValidateBoolean extends WP_UnitTestCase {
diff --git a/tests/functions/xmlrpc.php b/tests/functions/xmlrpc.php
index 20164e2e4f..925801326f 100644
--- a/tests/functions/xmlrpc.php
+++ b/tests/functions/xmlrpc.php
@@ -1,7 +1,9 @@
 <?php
 
 /**
+ * @group functions
  * @group xmlrpc
+ *
  * @ticket 53490
  */
 class Tests_Functions_XMLRPC extends WP_UnitTestCase {
diff --git a/tests/general/template_CheckedSelectedHelper.php b/tests/general/template_CheckedSelectedHelper.php
index 2c3afa9a80..c6d3a5b9de 100644
--- a/tests/general/template_CheckedSelectedHelper.php
+++ b/tests/general/template_CheckedSelectedHelper.php
@@ -56,12 +56,9 @@ class Tests_General_Template_CheckedSelectedHelper extends WP_UnitTestCase {
 	 *
 	 * @ticket 53858
 	 * @covers ::readonly
+	 * @requires PHP < 8.1
 	 */
 	public function test_readonly_with_equal_values() {
-		if ( ! function_exists( 'readonly' ) ) {
-			$this->markTestSkipped( 'readonly() function is not available on PHP 8.1' );
-		}
-
 		$this->setExpectedDeprecated( 'readonly' );
 
 		// Call the function via a variable to prevent a parse error for this file on PHP 8.1.
diff --git a/tests/general/wpPreloadResources.php b/tests/general/wpPreloadResources.php
index 8648da8949..778805e840 100644
--- a/tests/general/wpPreloadResources.php
+++ b/tests/general/wpPreloadResources.php
@@ -247,6 +247,16 @@ class Tests_General_wpPreloadResources extends WP_UnitTestCase {
 					),
 				),
 			),
+			'fetchpriority'          => array(
+				'expected'  => "<link rel='preload' href='https://example.com/image.jpg' as='image' fetchpriority='high' />\n",
+				'resources' => array(
+					array(
+						'href'          => 'https://example.com/image.jpg',
+						'as'            => 'image',
+						'fetchpriority' => 'high',
+					),
+				),
+			),
 		);
 	}
 }
diff --git a/tests/hooks/applyFilters.php b/tests/hooks/applyFilters.php
index 4c3a594aa9..50c35e3498 100644
--- a/tests/hooks/applyFilters.php
+++ b/tests/hooks/applyFilters.php
@@ -42,4 +42,132 @@ class Tests_Hooks_ApplyFilters extends WP_UnitTestCase {
 		$this->assertSame( $returned_two, $arg );
 		$this->assertSame( 2, $a->get_call_count() );
 	}
+
+	/**
+	 * @ticket 60193
+	 *
+	 * @dataProvider data_priority_callback_order_with_integers
+	 * @dataProvider data_priority_callback_order_with_unhappy_path_nonintegers
+	 *
+	 * @param array $priorities {
+	 *     Indexed array of the priorities for the MockAction callbacks.
+	 *
+	 *     @type mixed $0 Priority for 'action' callback.
+	 *     @type mixed $1 Priority for 'action2' callback.
+	 * }
+	 * @param array  $expected_call_order  An array of callback names in expected call order.
+	 * @param string $expected_deprecation Optional. Deprecation message. Default ''.
+	 */
+	public function test_priority_callback_order( $priorities, $expected_call_order, $expected_deprecation = '' ) {
+		$mock      = new MockAction();
+		$hook      = new WP_Hook();
+		$hook_name = __FUNCTION__;
+
+		if ( $expected_deprecation && PHP_VERSION_ID >= 80100 ) {
+			$this->expectDeprecation();
+			$this->expectDeprecationMessage( $expected_deprecation );
+		}
+
+		$hook->add_filter( $hook_name, array( $mock, 'filter' ), $priorities[0], 1 );
+		$hook->add_filter( $hook_name, array( $mock, 'filter2' ), $priorities[1], 1 );
+		$hook->apply_filters( __FUNCTION__ . '_val', array( '' ) );
+
+		$this->assertSame( 2, $mock->get_call_count(), 'The number of call counts does not match' );
+
+		$actual_call_order = wp_list_pluck( $mock->get_events(), 'filter' );
+		$this->assertSame( $expected_call_order, $actual_call_order, 'The filter callback order does not match the expected order' );
+	}
+
+	/**
+	 * Happy path data provider.
+	 *
+	 * @return array[]
+	 */
+	public function data_priority_callback_order_with_integers() {
+		return array(
+			'int DESC' => array(
+				'priorities'          => array( 10, 9 ),
+				'expected_call_order' => array( 'filter2', 'filter' ),
+			),
+			'int ASC'  => array(
+				'priorities'          => array( 9, 10 ),
+				'expected_call_order' => array( 'filter', 'filter2' ),
+			),
+		);
+	}
+
+	/**
+	 * Unhappy path data provider.
+	 *
+	 * @return array[]
+	 */
+	public function data_priority_callback_order_with_unhappy_path_nonintegers() {
+		return array(
+			// Numbers as strings and floats.
+			'int as string DESC'               => array(
+				'priorities'          => array( '10', '9' ),
+				'expected_call_order' => array( 'filter2', 'filter' ),
+			),
+			'int as string ASC'                => array(
+				'priorities'          => array( '9', '10' ),
+				'expected_call_order' => array( 'filter', 'filter2' ),
+			),
+			'float DESC'                       => array(
+				'priorities'           => array( 10.0, 9.5 ),
+				'expected_call_order'  => array( 'filter2', 'filter' ),
+				'expected_deprecation' => 'Implicit conversion from float 9.5 to int loses precision',
+			),
+			'float ASC'                        => array(
+				'priorities'           => array( 9.5, 10.0 ),
+				'expected_call_order'  => array( 'filter', 'filter2' ),
+				'expected_deprecation' => 'Implicit conversion from float 9.5 to int loses precision',
+			),
+			'float as string DESC'             => array(
+				'priorities'          => array( '10.0', '9.5' ),
+				'expected_call_order' => array( 'filter2', 'filter' ),
+			),
+			'float as string ASC'              => array(
+				'priorities'          => array( '9.5', '10.0' ),
+				'expected_call_order' => array( 'filter', 'filter2' ),
+			),
+
+			// Non-numeric.
+			'null'                             => array(
+				'priorities'          => array( null, null ),
+				'expected_call_order' => array( 'filter', 'filter2' ),
+			),
+			'bool DESC'                        => array(
+				'priorities'          => array( true, false ),
+				'expected_call_order' => array( 'filter2', 'filter' ),
+			),
+			'bool ASC'                         => array(
+				'priorities'          => array( false, true ),
+				'expected_call_order' => array( 'filter', 'filter2' ),
+			),
+			'non-numerical string DESC'        => array(
+				'priorities'          => array( 'test1', 'test2' ),
+				'expected_call_order' => array( 'filter', 'filter2' ),
+			),
+			'non-numerical string ASC'         => array(
+				'priorities'          => array( 'test1', 'test2' ),
+				'expected_call_order' => array( 'filter', 'filter2' ),
+			),
+			'int, non-numerical string DESC'   => array(
+				'priorities'          => array( 10, 'test' ),
+				'expected_call_order' => array( 'filter2', 'filter' ),
+			),
+			'int, non-numerical string ASC'    => array(
+				'priorities'          => array( 'test', 10 ),
+				'expected_call_order' => array( 'filter', 'filter2' ),
+			),
+			'float, non-numerical string DESC' => array(
+				'priorities'          => array( 10.0, 'test' ),
+				'expected_call_order' => array( 'filter2', 'filter' ),
+			),
+			'float, non-numerical string ASC'  => array(
+				'priorities'          => array( 'test', 10.0 ),
+				'expected_call_order' => array( 'filter', 'filter2' ),
+			),
+		);
+	}
 }
diff --git a/tests/hooks/doAction.php b/tests/hooks/doAction.php
index 858917fdce..c9767f865d 100644
--- a/tests/hooks/doAction.php
+++ b/tests/hooks/doAction.php
@@ -85,6 +85,134 @@ class Tests_Hooks_DoAction extends WP_UnitTestCase {
 		$this->assertSame( 1, $a->get_call_count() );
 	}
 
+	/**
+	 * @ticket 60193
+	 *
+	 * @dataProvider data_priority_callback_order_with_integers
+	 * @dataProvider data_priority_callback_order_with_unhappy_path_nonintegers
+	 *
+	 * @param array $priorities {
+	 *     Indexed array of the priorities for the MockAction callbacks.
+	 *
+	 *     @type mixed $0 Priority for 'action' callback.
+	 *     @type mixed $1 Priority for 'action2' callback.
+	 * }
+	 * @param array  $expected_call_order  An array of callback names in expected call order.
+	 * @param string $expected_deprecation Optional. Deprecation message. Default ''.
+	 */
+	public function test_priority_callback_order( $priorities, $expected_call_order, $expected_deprecation = '' ) {
+		$mock      = new MockAction();
+		$hook      = new WP_Hook();
+		$hook_name = __FUNCTION__;
+
+		if ( $expected_deprecation && PHP_VERSION_ID >= 80100 ) {
+			$this->expectDeprecation();
+			$this->expectDeprecationMessage( $expected_deprecation );
+		}
+
+		$hook->add_filter( $hook_name, array( $mock, 'action' ), $priorities[0], 1 );
+		$hook->add_filter( $hook_name, array( $mock, 'action2' ), $priorities[1], 1 );
+		$hook->do_action( array( '' ) );
+
+		$this->assertSame( 2, $mock->get_call_count(), 'The number of call counts does not match' );
+
+		$actual_call_order = wp_list_pluck( $mock->get_events(), 'action' );
+		$this->assertSame( $expected_call_order, $actual_call_order, 'The action callback order does not match the expected order' );
+	}
+
+	/**
+	 * Happy path data provider.
+	 *
+	 * @return array[]
+	 */
+	public function data_priority_callback_order_with_integers() {
+		return array(
+			'int DESC' => array(
+				'priorities'          => array( 10, 9 ),
+				'expected_call_order' => array( 'action2', 'action' ),
+			),
+			'int ASC'  => array(
+				'priorities'          => array( 9, 10 ),
+				'expected_call_order' => array( 'action', 'action2' ),
+			),
+		);
+	}
+
+	/**
+	 * Unhappy path data provider.
+	 *
+	 * @return array[]
+	 */
+	public function data_priority_callback_order_with_unhappy_path_nonintegers() {
+		return array(
+			// Numbers as strings and floats.
+			'int as string DESC'               => array(
+				'priorities'          => array( '10', '9' ),
+				'expected_call_order' => array( 'action2', 'action' ),
+			),
+			'int as string ASC'                => array(
+				'priorities'          => array( '9', '10' ),
+				'expected_call_order' => array( 'action', 'action2' ),
+			),
+			'float DESC'                       => array(
+				'priorities'           => array( 10.0, 9.5 ),
+				'expected_call_order'  => array( 'action2', 'action' ),
+				'expected_deprecation' => 'Implicit conversion from float 9.5 to int loses precision',
+			),
+			'float ASC'                        => array(
+				'priorities'           => array( 9.5, 10.0 ),
+				'expected_call_order'  => array( 'action', 'action2' ),
+				'expected_deprecation' => 'Implicit conversion from float 9.5 to int loses precision',
+			),
+			'float as string DESC'             => array(
+				'priorities'          => array( '10.0', '9.5' ),
+				'expected_call_order' => array( 'action2', 'action' ),
+			),
+			'float as string ASC'              => array(
+				'priorities'          => array( '9.5', '10.0' ),
+				'expected_call_order' => array( 'action', 'action2' ),
+			),
+
+			// Non-numeric.
+			'null'                             => array(
+				'priorities'          => array( null, null ),
+				'expected_call_order' => array( 'action', 'action2' ),
+			),
+			'bool DESC'                        => array(
+				'priorities'          => array( true, false ),
+				'expected_call_order' => array( 'action2', 'action' ),
+			),
+			'bool ASC'                         => array(
+				'priorities'          => array( false, true ),
+				'expected_call_order' => array( 'action', 'action2' ),
+			),
+			'non-numerical string DESC'        => array(
+				'priorities'          => array( 'test1', 'test2' ),
+				'expected_call_order' => array( 'action', 'action2' ),
+			),
+			'non-numerical string ASC'         => array(
+				'priorities'          => array( 'test1', 'test2' ),
+				'expected_call_order' => array( 'action', 'action2' ),
+			),
+			'int, non-numerical string DESC'   => array(
+				'priorities'          => array( 10, 'test' ),
+				'expected_call_order' => array( 'action2', 'action' ),
+			),
+			'int, non-numerical string ASC'    => array(
+				'priorities'          => array( 'test', 10 ),
+				'expected_call_order' => array( 'action', 'action2' ),
+			),
+			'float, non-numerical string DESC' => array(
+				'priorities'          => array( 10.0, 'test' ),
+				'expected_call_order' => array( 'action2', 'action' ),
+			),
+			'float, non-numerical string ASC'  => array(
+				'priorities'          => array( 'test', 10.0 ),
+				'expected_call_order' => array( 'action', 'action2' ),
+			),
+		);
+	}
+
 	public function test_do_action_with_no_accepted_args() {
 		$callback      = array( $this, '_action_callback' );
 		$hook          = new WP_Hook();
diff --git a/tests/html-api/wpHtmlProcessor.php b/tests/html-api/wpHtmlProcessor.php
index d6b818dd44..26dc7b0bdb 100644
--- a/tests/html-api/wpHtmlProcessor.php
+++ b/tests/html-api/wpHtmlProcessor.php
@@ -52,28 +52,12 @@ class Tests_HtmlApi_WpHtmlProcessor extends WP_UnitTestCase {
 	 * @covers WP_HTML_Processor::get_tag
 	 */
 	public function test_get_tag_is_null_once_document_is_finished() {
-		$p = WP_HTML_Processor::createFragment( '<div class="test">Test</div>' );
-		$p->next_tag();
-		$this->assertSame( 'DIV', $p->get_tag() );
+		$processor = WP_HTML_Processor::create_fragment( '<div class="test">Test</div>' );
+		$processor->next_tag();
+		$this->assertSame( 'DIV', $processor->get_tag() );
 
-		$this->assertFalse( $p->next_tag() );
-		$this->assertNull( $p->get_tag() );
-	}
-
-	/**
-	 * Ensures that if the HTML Processor encounters inputs that it can't properly handle,
-	 * that it stops processing the rest of the document. This prevents data corruption.
-	 *
-	 * @ticket 59167
-	 *
-	 * @covers WP_HTML_Processor::next_tag
-	 */
-	public function test_stops_processing_after_unsupported_elements() {
-		$p = WP_HTML_Processor::createFragment( '<p><x-not-supported></p><p></p>' );
-		$p->next_tag( 'P' );
-		$this->assertFalse( $p->next_tag(), 'Stepped into a tag after encountering X-NOT-SUPPORTED element when it should have aborted.' );
-		$this->assertNull( $p->get_tag(), "Should have aborted processing, but still reported tag {$p->get_tag()} after properly failing to step into tag." );
-		$this->assertFalse( $p->next_tag( 'P' ), 'Stepped into normal P element after X-NOT-SUPPORTED element when it should have aborted.' );
+		$this->assertFalse( $processor->next_tag() );
+		$this->assertNull( $processor->get_tag() );
 	}
 
 	/**
@@ -91,48 +75,46 @@ class Tests_HtmlApi_WpHtmlProcessor extends WP_UnitTestCase {
 	 *
 	 * @covers WP_HTML_Processor::next_tag
 	 * @covers WP_HTML_Processor::seek
-	 *
-	 * @throws WP_HTML_Unsupported_Exception
 	 */
 	public function test_clear_to_navigate_after_seeking() {
-		$p = WP_HTML_Processor::createFragment( '<div one><strong></strong></div><p><strong two></strong></p>' );
+		$processor = WP_HTML_Processor::create_fragment( '<div one><strong></strong></div><p><strong two></strong></p>' );
 
-		while ( $p->next_tag() ) {
+		while ( $processor->next_tag() ) {
 			// Create a bookmark before entering a stack of elements and formatting elements.
-			if ( null !== $p->get_attribute( 'one' ) ) {
-				$this->assertTrue( $p->set_bookmark( 'one' ) );
+			if ( null !== $processor->get_attribute( 'one' ) ) {
+				$this->assertTrue( $processor->set_bookmark( 'one' ) );
 				continue;
 			}
 
 			// Create a bookmark inside of that stack.
-			if ( null !== $p->get_attribute( 'two' ) ) {
-				$p->set_bookmark( 'two' );
+			if ( null !== $processor->get_attribute( 'two' ) ) {
+				$processor->set_bookmark( 'two' );
 				break;
 			}
 		}
 
 		// Ensure that it's possible to seek back to the outside location.
-		$this->assertTrue( $p->seek( 'one' ), 'Could not seek to earlier-seen location.' );
-		$this->assertSame( 'DIV', $p->get_tag(), "Should have jumped back to DIV but found {$p->get_tag()} instead." );
+		$this->assertTrue( $processor->seek( 'one' ), 'Could not seek to earlier-seen location.' );
+		$this->assertSame( 'DIV', $processor->get_tag(), "Should have jumped back to DIV but found {$processor->get_tag()} instead." );
 
 		/*
 		 * Ensure that the P element from the inner location isn't still on the stack of open elements.
 		 * If it were, then the first STRONG element, inside the outer DIV would match the next call.
 		 */
-		$this->assertTrue( $p->next_tag( array( 'breadcrumbs' => array( 'P', 'STRONG' ) ) ), 'Failed to find given location after seeking.' );
+		$this->assertTrue( $processor->next_tag( array( 'breadcrumbs' => array( 'P', 'STRONG' ) ) ), 'Failed to find given location after seeking.' );
 
 		// Only if the stack is properly managed will the processor advance to the inner STRONG element.
-		$this->assertTrue( $p->get_attribute( 'two' ), "Found the wrong location given the breadcrumbs, at {$p->get_tag()}." );
+		$this->assertTrue( $processor->get_attribute( 'two' ), "Found the wrong location given the breadcrumbs, at {$processor->get_tag()}." );
 
 		// Ensure that in seeking backwards the processor reports the correct full set of breadcrumbs.
-		$this->assertTrue( $p->seek( 'one' ), 'Failed to jump back to first bookmark.' );
-		$this->assertSame( array( 'HTML', 'BODY', 'DIV' ), $p->get_breadcrumbs(), 'Found wrong set of breadcrumbs navigating to node "one".' );
+		$this->assertTrue( $processor->seek( 'one' ), 'Failed to jump back to first bookmark.' );
+		$this->assertSame( array( 'HTML', 'BODY', 'DIV' ), $processor->get_breadcrumbs(), 'Found wrong set of breadcrumbs navigating to node "one".' );
 
 		// Ensure that in seeking forwards the processor reports the correct full set of breadcrumbs.
-		$this->assertTrue( $p->seek( 'two' ), 'Failed to jump forward to second bookmark.' );
-		$this->assertTrue( $p->get_attribute( 'two' ), "Found the wrong location given the bookmark, at {$p->get_tag()}." );
+		$this->assertTrue( $processor->seek( 'two' ), 'Failed to jump forward to second bookmark.' );
+		$this->assertTrue( $processor->get_attribute( 'two' ), "Found the wrong location given the bookmark, at {$processor->get_tag()}." );
 
-		$this->assertSame( array( 'HTML', 'BODY', 'P', 'STRONG' ), $p->get_breadcrumbs(), 'Found wrong set of bookmarks navigating to node "two".' );
+		$this->assertSame( array( 'HTML', 'BODY', 'P', 'STRONG' ), $processor->get_breadcrumbs(), 'Found wrong set of bookmarks navigating to node "two".' );
 	}
 
 	/**
@@ -144,9 +126,218 @@ class Tests_HtmlApi_WpHtmlProcessor extends WP_UnitTestCase {
 	 * @covers WP_HTML_Processor::reconstruct_active_formatting_elements
 	 */
 	public function test_fails_to_reconstruct_formatting_elements() {
-		$p = WP_HTML_Processor::createFragment( '<p><em>One<p><em>Two<p><em>Three<p><em>Four' );
+		$processor = WP_HTML_Processor::create_fragment( '<p><em>One<p><em>Two<p><em>Three<p><em>Four' );
+
+		$this->assertTrue( $processor->next_tag( 'EM' ), 'Could not find first EM.' );
+		$this->assertFalse( $processor->next_tag( 'EM' ), 'Should have aborted before finding second EM as it required reconstructing the first EM.' );
+	}
+
+	/**
+	 * Ensure non-nesting tags do not nest.
+	 *
+	 * @ticket 60283
+	 *
+	 * @covers WP_HTML_Processor::step_in_body
+	 * @covers WP_HTML_Processor::is_void
+	 *
+	 * @dataProvider data_void_tags
+	 *
+	 * @param string $tag_name Name of void tag under test.
+	 */
+	public function test_cannot_nest_void_tags( $tag_name ) {
+		$processor = WP_HTML_Processor::create_fragment( "<{$tag_name}><div>" );
+
+		/*
+		 * This HTML represents the same as the following HTML,
+		 * assuming that it were provided `<img>` as the tag:
+		 *
+		 *     <html>
+		 *         <body>
+		 *             <img>
+		 *             <div></div>
+		 *         </body>
+		 *     </html>
+		 */
+
+		$found_tag = $processor->next_tag();
+
+		if ( WP_HTML_Processor::ERROR_UNSUPPORTED === $processor->get_last_error() ) {
+			$this->markTestSkipped( "Tag {$tag_name} is not supported." );
+		}
+
+		$this->assertTrue(
+			$found_tag,
+			"Could not find first {$tag_name}."
+		);
+
+		$this->assertSame(
+			array( 'HTML', 'BODY', $tag_name ),
+			$processor->get_breadcrumbs(),
+			'Found incorrect nesting of first element.'
+		);
+
+		$this->assertTrue(
+			$processor->next_tag(),
+			'Should have found the DIV as the second tag.'
+		);
+
+		$this->assertSame(
+			array( 'HTML', 'BODY', 'DIV' ),
+			$processor->get_breadcrumbs(),
+			"DIV should have been a sibling of the {$tag_name}."
+		);
+	}
+
+	/**
+	 * Ensure non-nesting tags do not nest when processing tokens.
+	 *
+	 * @ticket 60382
+	 *
+	 * @dataProvider data_void_tags
+	 *
+	 * @param string $tag_name Name of void tag under test.
+	 */
+	public function test_cannot_nest_void_tags_next_token( $tag_name ) {
+		$processor = WP_HTML_Processor::create_fragment( "<{$tag_name}><div>" );
+
+		/*
+		 * This HTML represents the same as the following HTML,
+		 * assuming that it were provided `<img>` as the tag:
+		 *
+		 *     <html>
+		 *         <body>
+		 *             <img>
+		 *             <div></div>
+		 *         </body>
+		 *     </html>
+		 */
+
+		$found_tag = $processor->next_token();
+
+		if ( WP_HTML_Processor::ERROR_UNSUPPORTED === $processor->get_last_error() ) {
+			$this->markTestSkipped( "Tag {$tag_name} is not supported." );
+		}
+
+		$this->assertTrue(
+			$found_tag,
+			"Could not find first {$tag_name}."
+		);
+
+		$this->assertSame(
+			array( 'HTML', 'BODY', $tag_name ),
+			$processor->get_breadcrumbs(),
+			'Found incorrect nesting of first element.'
+		);
+
+		$this->assertTrue(
+			$processor->next_token(),
+			'Should have found the DIV as the second tag.'
+		);
+
+		$this->assertSame(
+			array( 'HTML', 'BODY', 'DIV' ),
+			$processor->get_breadcrumbs(),
+			"DIV should have been a sibling of the {$tag_name}."
+		);
+	}
 
-		$this->assertTrue( $p->next_tag( 'EM' ), 'Could not find first EM.' );
-		$this->assertFalse( $p->next_tag( 'EM' ), 'Should have aborted before finding second EM as it required reconstructing the first EM.' );
+	/**
+	 * Data provider.
+	 *
+	 * @return array[]
+	 */
+	public static function data_void_tags() {
+		return array(
+			'AREA'   => array( 'AREA' ),
+			'BASE'   => array( 'BASE' ),
+			'BR'     => array( 'BR' ),
+			'COL'    => array( 'COL' ),
+			'EMBED'  => array( 'EMBED' ),
+			'HR'     => array( 'HR' ),
+			'IMG'    => array( 'IMG' ),
+			'INPUT'  => array( 'INPUT' ),
+			'KEYGEN' => array( 'KEYGEN' ),
+			'LINK'   => array( 'LINK' ),
+			'META'   => array( 'META' ),
+			'PARAM'  => array( 'PARAM' ),
+			'SOURCE' => array( 'SOURCE' ),
+			'TRACK'  => array( 'TRACK' ),
+			'WBR'    => array( 'WBR' ),
+		);
+	}
+
+	/**
+	 * Ensures that special handling of unsupported tags is cleaned up
+	 * as handling is implemented. Otherwise there's risk of leaving special
+	 * handling (that is never reached) when tag handling is implemented.
+	 *
+	 * @ticket 60092
+	 *
+	 * @dataProvider data_unsupported_special_in_body_tags
+	 *
+	 * @covers WP_HTML_Processor::step_in_body
+	 *
+	 * @param string $tag_name Name of the tag to test.
+	 */
+	public function test_step_in_body_fails_on_unsupported_tags( $tag_name ) {
+		$fragment = WP_HTML_Processor::create_fragment( '<' . $tag_name . '></' . $tag_name . '>' );
+		$this->assertFalse( $fragment->next_tag(), 'Should fail to find tag: ' . $tag_name . '.' );
+		$this->assertEquals( $fragment->get_last_error(), WP_HTML_Processor::ERROR_UNSUPPORTED, 'Should have unsupported last error.' );
+	}
+
+	/**
+	 * Data provider.
+	 *
+	 * @return array[]
+	 */
+	public static function data_unsupported_special_in_body_tags() {
+		return array(
+			'APPLET'    => array( 'APPLET' ),
+			'BASE'      => array( 'BASE' ),
+			'BASEFONT'  => array( 'BASEFONT' ),
+			'BGSOUND'   => array( 'BGSOUND' ),
+			'BODY'      => array( 'BODY' ),
+			'CAPTION'   => array( 'CAPTION' ),
+			'COL'       => array( 'COL' ),
+			'COLGROUP'  => array( 'COLGROUP' ),
+			'FORM'      => array( 'FORM' ),
+			'FRAME'     => array( 'FRAME' ),
+			'FRAMESET'  => array( 'FRAMESET' ),
+			'HEAD'      => array( 'HEAD' ),
+			'HTML'      => array( 'HTML' ),
+			'IFRAME'    => array( 'IFRAME' ),
+			'LINK'      => array( 'LINK' ),
+			'MARQUEE'   => array( 'MARQUEE' ),
+			'MATH'      => array( 'MATH' ),
+			'META'      => array( 'META' ),
+			'NOBR'      => array( 'NOBR' ),
+			'NOEMBED'   => array( 'NOEMBED' ),
+			'NOFRAMES'  => array( 'NOFRAMES' ),
+			'NOSCRIPT'  => array( 'NOSCRIPT' ),
+			'OBJECT'    => array( 'OBJECT' ),
+			'OPTGROUP'  => array( 'OPTGROUP' ),
+			'OPTION'    => array( 'OPTION' ),
+			'PLAINTEXT' => array( 'PLAINTEXT' ),
+			'RB'        => array( 'RB' ),
+			'RP'        => array( 'RP' ),
+			'RT'        => array( 'RT' ),
+			'RTC'       => array( 'RTC' ),
+			'SARCASM'   => array( 'SARCASM' ),
+			'SCRIPT'    => array( 'SCRIPT' ),
+			'SELECT'    => array( 'SELECT' ),
+			'STYLE'     => array( 'STYLE' ),
+			'SVG'       => array( 'SVG' ),
+			'TABLE'     => array( 'TABLE' ),
+			'TBODY'     => array( 'TBODY' ),
+			'TD'        => array( 'TD' ),
+			'TEMPLATE'  => array( 'TEMPLATE' ),
+			'TEXTAREA'  => array( 'TEXTAREA' ),
+			'TFOOT'     => array( 'TFOOT' ),
+			'TH'        => array( 'TH' ),
+			'THEAD'     => array( 'THEAD' ),
+			'TITLE'     => array( 'TITLE' ),
+			'TR'        => array( 'TR' ),
+			'XMP'       => array( 'XMP' ),
+		);
 	}
 }
diff --git a/tests/html-api/wpHtmlProcessorBreadcrumbs.php b/tests/html-api/wpHtmlProcessorBreadcrumbs.php
index 4f86f856e7..b6f9131f56 100644
--- a/tests/html-api/wpHtmlProcessorBreadcrumbs.php
+++ b/tests/html-api/wpHtmlProcessorBreadcrumbs.php
@@ -23,10 +23,10 @@ class Tests_HtmlApi_WpHtmlProcessorBreadcrumbs extends WP_UnitTestCase {
 	 * @param string $tag_name Name of first tag in HTML (because HTML treats IMAGE as IMG this may not match the HTML).
 	 */
 	public function test_navigates_into_normative_html_for_supported_elements( $html, $tag_name ) {
-		$p = WP_HTML_Processor::createFragment( $html );
+		$processor = WP_HTML_Processor::create_fragment( $html );
 
-		$this->assertTrue( $p->step(), "Failed to step into supported {$tag_name} element." );
-		$this->assertSame( $tag_name, $p->get_tag(), "Misread {$tag_name} as a {$p->get_tag()} element." );
+		$this->assertTrue( $processor->step(), "Failed to step into supported {$tag_name} element." );
+		$this->assertSame( $tag_name, $processor->get_tag(), "Misread {$tag_name} as a {$processor->get_tag()} element." );
 	}
 
 	/**
@@ -34,27 +34,97 @@ class Tests_HtmlApi_WpHtmlProcessorBreadcrumbs extends WP_UnitTestCase {
 	 *
 	 * @return array[]
 	 */
-	public function data_single_tag_of_supported_elements() {
+	public static function data_single_tag_of_supported_elements() {
 		$supported_elements = array(
 			'A',
+			'ABBR',
+			'ACRONYM', // Neutralized.
+			'ADDRESS',
+			'AREA',
+			'ARTICLE',
+			'ASIDE',
+			'AUDIO',
 			'B',
+			'BDI',
+			'BDO',
 			'BIG',
+			'BLINK', // Deprecated.
+			'BR',
 			'BUTTON',
+			'CANVAS',
+			'CENTER', // Neutralized.
+			'CITE',
 			'CODE',
+			'DATA',
+			'DD',
+			'DATALIST',
+			'DFN',
+			'DEL',
+			'DETAILS',
+			'DIALOG',
+			'DIR',
 			'DIV',
+			'DL',
+			'DT',
 			'EM',
+			'EMBED',
+			'FIELDSET',
 			'FIGCAPTION',
 			'FIGURE',
 			'FONT',
+			'FOOTER',
+			'H1',
+			'H2',
+			'H3',
+			'H4',
+			'H5',
+			'H6',
+			'HEADER',
+			'HGROUP',
+			'HR',
 			'I',
 			'IMG',
+			'INS',
+			'LI',
+			'ISINDEX', // Deprecated.
+			'KBD',
+			'KEYGEN', // Deprecated.
+			'LABEL',
+			'LEGEND',
+			'LISTING', // Deprecated.
+			'MAIN',
+			'MAP',
+			'MARK',
+			'MENU',
+			'METER',
+			'MULTICOL', // Deprecated.
+			'NAV',
+			'NEXTID', // Deprecated.
+			'OL',
+			'OUTPUT',
 			'P',
+			'PICTURE',
+			'PROGRESS',
+			'Q',
+			'RUBY',
+			'SAMP',
+			'SEARCH',
+			'SECTION',
+			'SLOT',
 			'SMALL',
+			'SPACER', // Deprecated.
 			'SPAN',
 			'STRIKE',
 			'STRONG',
+			'SUB',
+			'SUMMARY',
+			'SUP',
+			'TIME',
 			'TT',
 			'U',
+			'UL',
+			'VAR',
+			'VIDEO',
 		);
 
 		$data = array();
@@ -85,9 +155,9 @@ class Tests_HtmlApi_WpHtmlProcessorBreadcrumbs extends WP_UnitTestCase {
 	 * @param string $html HTML string containing unsupported elements.
 	 */
 	public function test_fails_when_encountering_unsupported_tag( $html ) {
-		$p = WP_HTML_Processor::createFragment( $html );
+		$processor = WP_HTML_Processor::create_fragment( $html );
 
-		$this->assertFalse( $p->step(), "Should not have stepped into unsupported {$p->get_tag()} element." );
+		$this->assertFalse( $processor->step(), "Should not have stepped into unsupported {$processor->get_tag()} element." );
 	}
 
 	/**
@@ -95,107 +165,40 @@ class Tests_HtmlApi_WpHtmlProcessorBreadcrumbs extends WP_UnitTestCase {
 	 *
 	 * @return array[]
 	 */
-	public function data_unsupported_elements() {
+	public static function data_unsupported_elements() {
 		$unsupported_elements = array(
-			'ABBR',
-			'ACRONYM', // Neutralized
-			'ADDRESS',
-			'APPLET', // Deprecated
-			'AREA',
-			'ARTICLE',
-			'ASIDE',
-			'AUDIO',
+			'APPLET', // Deprecated.
 			'BASE',
-			'BDI',
-			'BDO',
 			'BGSOUND', // Deprecated; self-closing if self-closing flag provided, otherwise normal.
-			'BLINK', // Deprecated
 			'BODY',
-			'BR',
-			'CANVAS',
 			'CAPTION',
-			'CENTER', // Neutralized
-			'CITE',
 			'COL',
 			'COLGROUP',
-			'DATA',
-			'DATALIST',
-			'DD',
-			'DEL',
-			'DETAILS',
-			'DEFN',
-			'DIALOG',
-			'DL',
-			'DT',
-			'EMBED',
-			'FIELDSET',
-			'FOOTER',
 			'FORM',
 			'FRAME',
 			'FRAMESET',
-			'H1',
-			'H2',
-			'H3',
-			'H4',
-			'H5',
-			'H6',
 			'HEAD',
-			'HEADER',
-			'HGROUP',
-			'HR',
 			'HTML',
 			'IFRAME',
-			'INPUT',
-			'INS',
-			'ISINDEX', // Deprecated
-			'KBD',
-			'KEYGEN', // Deprecated; void
-			'LABEL',
-			'LEGEND',
-			'LI',
 			'LINK',
-			'LISTING', // Deprecated, use PRE instead.
-			'MAIN',
-			'MAP',
-			'MARK',
-			'MARQUEE', // Deprecated
+			'MARQUEE', // Deprecated.
 			'MATH',
-			'MENU',
 			'META',
-			'METER',
-			'MULTICOL', // Deprecated
-			'NAV',
-			'NEXTID', // Deprecated
-			'NOBR', // Neutralized
-			'NOEMBED', // Neutralized
-			'NOFRAMES', // Neutralized
+			'NOBR', // Neutralized.
+			'NOEMBED', // Neutralized.
+			'NOFRAMES', // Neutralized.
 			'NOSCRIPT',
 			'OBJECT',
-			'OL',
 			'OPTGROUP',
 			'OPTION',
-			'OUTPUT',
-			'PICTURE',
-			'PLAINTEXT', // Neutralized
-			'PRE',
-			'PROGRESS',
-			'Q',
-			'RB', // Neutralized
+			'PLAINTEXT', // Neutralized.
+			'RB', // Neutralized.
 			'RP',
 			'RT',
-			'RTC', // Neutralized
-			'RUBY',
-			'SAMP',
+			'RTC', // Neutralized.
 			'SCRIPT',
-			'SECTION',
 			'SELECT',
-			'SLOT',
-			'SOURCE',
-			'SPACER', // Deprecated
 			'STYLE',
-			'SUB',
-			'SUMMARY',
-			'SUP',
 			'SVG',
 			'TABLE',
 			'TBODY',
@@ -205,19 +208,9 @@ class Tests_HtmlApi_WpHtmlProcessorBreadcrumbs extends WP_UnitTestCase {
 			'TFOOT',
 			'TH',
 			'THEAD',
-			'TIME',
 			'TITLE',
 			'TR',
-			'TRACK',
-			'UL',
-			'VAR',
-			'VIDEO',
-			'WBR',
 			'XMP', // Deprecated, use PRE instead.
-
-			// Made up elements, custom elements.
-			'X-NOT-AN-HTML-ELEMENT',
-			'HUMAN-TIME',
 		);
 
 		$data = array();
@@ -236,14 +229,14 @@ class Tests_HtmlApi_WpHtmlProcessorBreadcrumbs extends WP_UnitTestCase {
 	 * @param string $html HTML containing unsupported markup.
 	 */
 	public function test_fails_when_encountering_unsupported_markup( $html, $description ) {
-		$p = WP_HTML_Processor::createFragment( $html );
+		$processor = WP_HTML_Processor::create_fragment( $html );
 
-		while ( $p->step() && null === $p->get_attribute( 'supported' ) ) {
+		while ( $processor->step() && null === $processor->get_attribute( 'supported' ) ) {
 			continue;
 		}
 
-		$this->assertTrue( $p->get_attribute( 'supported' ), 'Did not find required supported element.' );
-		$this->assertFalse( $p->step(), "Didn't properly reject unsupported markup: {$description}" );
+		$this->assertTrue( $processor->get_attribute( 'supported' ), 'Did not find required supported element.' );
+		$this->assertFalse( $processor->step(), "Didn't properly reject unsupported markup: {$description}" );
 	}
 
 	/**
@@ -251,7 +244,7 @@ class Tests_HtmlApi_WpHtmlProcessorBreadcrumbs extends WP_UnitTestCase {
 	 *
 	 * @return array[]
 	 */
-	public function data_unsupported_markup() {
+	public static function data_unsupported_markup() {
 		return array(
 			'A with formatting following unclosed A' => array(
 				'<a><strong>Click <a supported><big unsupported>Here</big></a></strong></a>',
@@ -277,17 +270,17 @@ class Tests_HtmlApi_WpHtmlProcessorBreadcrumbs extends WP_UnitTestCase {
 	 * @param int    $n           How many breadcrumb matches to scan through in order to find "target" element.
 	 */
 	public function test_finds_correct_tag_given_breadcrumbs( $html, $breadcrumbs, $n ) {
-		$p = WP_HTML_Processor::createFragment( $html );
+		$processor = WP_HTML_Processor::create_fragment( $html );
 
-		$p->next_tag(
+		$processor->next_tag(
 			array(
 				'breadcrumbs'  => $breadcrumbs,
 				'match_offset' => $n,
 			)
 		);
 
-		$this->assertNotNull( $p->get_tag(), 'Failed to find target node.' );
-		$this->assertTrue( $p->get_attribute( 'target' ), "Found {$p->get_tag()} element didn't contain the necessary 'target' attribute." );
+		$this->assertNotNull( $processor->get_tag(), 'Failed to find target node.' );
+		$this->assertTrue( $processor->get_attribute( 'target' ), "Found {$processor->get_tag()} element didn't contain the necessary 'target' attribute." );
 	}
 
 	/**
@@ -300,17 +293,16 @@ class Tests_HtmlApi_WpHtmlProcessorBreadcrumbs extends WP_UnitTestCase {
 	 * @param string $html        HTML string with tags in it, one of which contains the "target" attribute.
 	 * @param array  $breadcrumbs Breadcrumbs of element with "target" attribute set.
 	 * @param int    $ignored_n   Not used in this test but provided in the dataset for other tests.
-	 * @return void
 	 */
 	public function test_reports_correct_breadcrumbs_for_html( $html, $breadcrumbs, $ignored_n ) {
-		$p = WP_HTML_Processor::createFragment( $html );
+		$processor = WP_HTML_Processor::create_fragment( $html );
 
-		while ( $p->next_tag() && null === $p->get_attribute( 'target' ) ) {
+		while ( $processor->next_tag() && null === $processor->get_attribute( 'target' ) ) {
 			continue;
 		}
 
-		$this->assertNotNull( $p->get_tag(), 'Failed to find the target node.' );
-		$this->assertSame( $breadcrumbs, $p->get_breadcrumbs(), 'Found the wrong path from the root of the HTML document to the target node.' );
+		$this->assertNotNull( $processor->get_tag(), 'Failed to find the target node.' );
+		$this->assertSame( $breadcrumbs, $processor->get_breadcrumbs(), 'Found the wrong path from the root of the HTML document to the target node.' );
 	}
 
 	/**
@@ -318,7 +310,7 @@ class Tests_HtmlApi_WpHtmlProcessorBreadcrumbs extends WP_UnitTestCase {
 	 *
 	 * @return array[]
 	 */
-	public function data_html_target_with_breadcrumbs() {
+	public static function data_html_target_with_breadcrumbs() {
 		return array(
 			'Simple IMG tag'                        => array( '<img target>', array( 'HTML', 'BODY', 'IMG' ), 1 ),
 			'Two sibling IMG tags'                  => array( '<img><img target>', array( 'HTML', 'BODY', 'IMG' ), 2 ),
@@ -349,6 +341,26 @@ class Tests_HtmlApi_WpHtmlProcessorBreadcrumbs extends WP_UnitTestCase {
 				array( 'HTML', 'BODY', 'DIV', 'DIV', 'DIV', 'DIV', 'DIV', 'DIV', 'DIV', 'DIV', 'DIV', 'STRONG', 'EM', 'CODE' ),
 				2,
 			),
+			'MAIN inside MAIN inside SPAN'          => array( '<span><main><main target>', array( 'HTML', 'BODY', 'SPAN', 'MAIN', 'MAIN' ), 1 ),
+			'MAIN next to unclosed P'               => array( '<p><main target>', array( 'HTML', 'BODY', 'MAIN' ), 1 ),
+			'LI after unclosed LI'                  => array( '<li>one<li>two<li target>three', array( 'HTML', 'BODY', 'LI' ), 3 ),
+			'LI in UL in LI'                        => array( '<ul><li>one<ul><li target>two', array( 'HTML', 'BODY', 'UL', 'LI', 'UL', 'LI' ), 1 ),
+			'DD and DT mutually close, LI self-closes (dt 2)' => array( '<dd><dd><dt><dt target><dd><li><li>', array( 'HTML', 'BODY', 'DT' ), 2 ),
+			'DD and DT mutually close, LI self-closes (dd 3)' => array( '<dd><dd><dt><dt><dd target><li><li>', array( 'HTML', 'BODY', 'DD' ), 3 ),
+			'DD and DT mutually close, LI self-closes (li 1)' => array( '<dd><dd><dt><dt><dd><li target><li>', array( 'HTML', 'BODY', 'DD', 'LI' ), 1 ),
+			'DD and DT mutually close, LI self-closes (li 2)' => array( '<dd><dd><dt><dt><dd><li><li target>', array( 'HTML', 'BODY', 'DD', 'LI' ), 2 ),
+
+			// H1 - H6 close out _any_ H1 - H6 when encountering _any_ of H1 - H6, making this section surprising.
+			'EM inside H3 after unclosed P'         => array( '<p><h3><em target>Important Message</em></h3>', array( 'HTML', 'BODY', 'H3', 'EM' ), 1 ),
+			'H4 after H2'                           => array( '<h2>Major</h2><h4 target>Minor</h4>', array( 'HTML', 'BODY', 'H4' ), 1 ),
+			'H4 after unclosed H2'                  => array( '<h2>Major<h4 target>Minor</h3>', array( 'HTML', 'BODY', 'H4' ), 1 ),
+			'H4 inside H2'                          => array( '<h2><span>Major<h4 target>Minor</h3></span>', array( 'HTML', 'BODY', 'H2', 'SPAN', 'H4' ), 1 ),
+			'H5 after unclosed H4 inside H2'        => array( '<h2><span>Major<h4>Minor</span></h3><h5 target>', array( 'HTML', 'BODY', 'H2', 'SPAN', 'H5' ), 1 ),
+			'H5 after H4 inside H2'                 => array( '<h2><span>Major<h4>Minor</h4></span></h3><h5 target>', array( 'HTML', 'BODY', 'H5' ), 1 ),
+
+			// Custom elements.
+			'WP-EMOJI'                              => array( '<div><wp-emoji target></wp-emoji></div>', array( 'HTML', 'BODY', 'DIV', 'WP-EMOJI' ), 1 ),
+			'WP-EMOJI then IMG'                     => array( '<div><wp-emoji></wp-emoji><img target></div>', array( 'HTML', 'BODY', 'DIV', 'IMG' ), 1 ),
 		);
 	}
 
@@ -362,7 +374,7 @@ class Tests_HtmlApi_WpHtmlProcessorBreadcrumbs extends WP_UnitTestCase {
 	 * @param bool     $should_match          Whether the target node should match the breadcrumbs.
 	 */
 	public function test_reports_if_tag_matches_breadcrumbs_of_various_specificity( $html_with_target_node, $breadcrumbs, $should_match ) {
-		$processor = WP_HTML_Processor::createFragment( $html_with_target_node );
+		$processor = WP_HTML_Processor::create_fragment( $html_with_target_node );
 		while ( $processor->next_tag() && null === $processor->get_attribute( 'target' ) ) {
 			continue;
 		}
@@ -381,32 +393,79 @@ class Tests_HtmlApi_WpHtmlProcessorBreadcrumbs extends WP_UnitTestCase {
 	 *
 	 * @return array[].
 	 */
-	public function data_html_with_breadcrumbs_of_various_specificity() {
+	public static function data_html_with_breadcrumbs_of_various_specificity() {
 		return array(
 			// Test with void elements.
-			'Inner IMG'                      => array( '<div><span><figure><img target></figure></span></div>', array( 'span', 'figure', 'img' ), true ),
-			'Inner IMG wildcard'             => array( '<div><span><figure><img target></figure></span></div>', array( 'span', '*', 'img' ), true ),
-			'Inner IMG no wildcard'          => array( '<div><span><figure><img target></figure></span></div>', array( 'span', 'img' ), false ),
-			'Full specification'             => array( '<div><span><figure><img target></figure></span></div>', array( 'html', 'body', 'div', 'span', 'figure', 'img' ), true ),
-			'Invalid Full specification'     => array( '<div><span><figure><img target></figure></span></div>', array( 'html', 'div', 'span', 'figure', 'img' ), false ),
+			'Inner IMG'                               => array( '<div><span><figure><img target></figure></span></div>', array( 'span', 'figure', 'img' ), true ),
+			'Inner IMG wildcard'                      => array( '<div><span><figure><img target></figure></span></div>', array( 'span', '*', 'img' ), true ),
+			'Inner IMG no wildcard'                   => array( '<div><span><figure><img target></figure></span></div>', array( 'span', 'img' ), false ),
+			'Full specification'                      => array( '<div><span><figure><img target></figure></span></div>', array( 'html', 'body', 'div', 'span', 'figure', 'img' ), true ),
+			'Invalid Full specification'              => array( '<div><span><figure><img target></figure></span></div>', array( 'html', 'div', 'span', 'figure', 'img' ), false ),
 
 			// Test also with non-void elements that open and close.
-			'Inner P'                        => array( '<div><span><figure><p target></figure></span></div>', array( 'span', 'figure', 'p' ), true ),
-			'Inner P wildcard'               => array( '<div><span><figure><p target></figure></span></div>', array( 'span', '*', 'p' ), true ),
-			'Inner P no wildcard'            => array( '<div><span><figure><p target></figure></span></div>', array( 'span', 'p' ), false ),
-			'Full specification (P)'         => array( '<div><span><figure><p target></figure></span></div>', array( 'html', 'body', 'div', 'span', 'figure', 'p' ), true ),
-			'Invalid Full specification (P)' => array( '<div><span><figure><p target></figure></span></div>', array( 'html', 'div', 'span', 'figure', 'p' ), false ),
+			'Inner P'                                 => array( '<div><span><figure><p target></figure></span></div>', array( 'span', 'figure', 'p' ), true ),
+			'Inner P wildcard'                        => array( '<div><span><figure><p target></figure></span></div>', array( 'span', '*', 'p' ), true ),
+			'Inner P no wildcard'                     => array( '<div><span><figure><p target></figure></span></div>', array( 'span', 'p' ), false ),
+			'Full specification (P)'                  => array( '<div><span><figure><p target></figure></span></div>', array( 'html', 'body', 'div', 'span', 'figure', 'p' ), true ),
+			'Invalid Full specification (P)'          => array( '<div><span><figure><p target></figure></span></div>', array( 'html', 'div', 'span', 'figure', 'p' ), false ),
 
 			// Ensure that matches aren't on tag closers.
-			'Inner P'                        => array( '<div><span><figure></p target></figure></span></div>', array( 'span', 'figure', 'p' ), false ),
-			'Inner P wildcard'               => array( '<div><span><figure></p target></figure></span></div>', array( 'span', '*', 'p' ), false ),
-			'Inner P no wildcard'            => array( '<div><span><figure></p target></figure></span></div>', array( 'span', 'p' ), false ),
-			'Full specification (P)'         => array( '<div><span><figure></p target></figure></span></div>', array( 'html', 'body', 'div', 'span', 'figure', 'p' ), false ),
-			'Invalid Full specification (P)' => array( '<div><span><figure></p target></figure></span></div>', array( 'html', 'div', 'span', 'figure', 'p' ), false ),
+			'Inner P (Closer)'                        => array( '<div><span><figure></p target></figure></span></div>', array( 'span', 'figure', 'p' ), false ),
+			'Inner P wildcard (Closer)'               => array( '<div><span><figure></p target></figure></span></div>', array( 'span', '*', 'p' ), false ),
+			'Inner P no wildcard (Closer)'            => array( '<div><span><figure></p target></figure></span></div>', array( 'span', 'p' ), false ),
+			'Full specification (P) (Closer)'         => array( '<div><span><figure></p target></figure></span></div>', array( 'html', 'body', 'div', 'span', 'figure', 'p' ), false ),
+			'Invalid Full specification (P) (Closer)' => array( '<div><span><figure></p target></figure></span></div>', array( 'html', 'div', 'span', 'figure', 'p' ), false ),
 
 			// Test wildcard behaviors.
-			'Single wildcard element'        => array( '<figure><code><div><p><span><img target></span></p></div></code></figure>', array( '*' ), true ),
-			'Child of wildcard element'      => array( '<figure><code><div><p><span><img target></span></p></div></code></figure>', array( 'SPAN', '*' ), true ),
+			'Single wildcard element'                 => array( '<figure><code><div><p><span><img target></span></p></div></code></figure>', array( '*' ), true ),
+			'Child of wildcard element'               => array( '<figure><code><div><p><span><img target></span></p></div></code></figure>', array( 'SPAN', '*' ), true ),
+		);
+	}
+
+	/**
+	 * Ensures that updating tag's attributes doesn't shift the current position
+	 * in the input HTML document.
+	 *
+	 * @since 6.4.0
+	 *
+	 * @ticket 59607
+	 *
+	 * @covers WP_HTML_Tag_Processor::get_updated_html
+	 */
+	public function test_remains_stable_when_editing_attributes() {
+		$processor = WP_HTML_Processor::create_fragment( '<div><button>First<button><b here>Second' );
+		$processor->next_tag( array( 'breadcrumbs' => array( 'BUTTON', 'B' ) ) );
+
+		$this->assertSame(
+			array( 'HTML', 'BODY', 'DIV', 'BUTTON', 'B' ),
+			$processor->get_breadcrumbs(),
+			'Found the wrong nested structure at the matched tag.'
+		);
+
+		$processor->set_attribute( 'a-name', 'a-value' );
+
+		$this->assertTrue(
+			$processor->get_attribute( 'here' ),
+			'Should have found the B tag but could not find expected "here" attribute.'
+		);
+
+		$this->assertSame(
+			array( 'HTML', 'BODY', 'DIV', 'BUTTON', 'B' ),
+			$processor->get_breadcrumbs(),
+			'Found the wrong nested structure at the matched tag.'
+		);
+
+		$processor->get_updated_html();
+
+		$this->assertTrue(
+			$processor->get_attribute( 'here' ),
+			'Should have stayed at the B tag but could not find expected "here" attribute.'
+		);
+
+		$this->assertSame(
+			array( 'HTML', 'BODY', 'DIV', 'BUTTON', 'B' ),
+			$processor->get_breadcrumbs(),
+			'Found the wrong nested structure at the matched tag after updating attributes.'
 		);
 	}
 
@@ -417,15 +476,15 @@ class Tests_HtmlApi_WpHtmlProcessorBreadcrumbs extends WP_UnitTestCase {
 	 *
 	 * @ticket 58517
 	 *
-	 * @covers WP_HTML_Processor::set_attribute
+	 * @covers WP_HTML_Tag_Processor::set_attribute
 	 */
 	public function test_can_modify_attributes_after_finding_tag() {
-		$p = WP_HTML_Processor::createFragment( '<div><figure><img><figcaption>test</figcaption></figure>' );
+		$processor = WP_HTML_Processor::create_fragment( '<div><figure><img><figcaption>test</figcaption></figure>' );
 
-		$this->assertTrue( $p->next_tag( array( 'breadcrumbs' => array( 'figcaption' ) ) ), 'Unable to find given tag.' );
+		$this->assertTrue( $processor->next_tag( array( 'breadcrumbs' => array( 'figcaption' ) ) ), 'Unable to find given tag.' );
 
-		$p->set_attribute( 'found-it', true );
-		$this->assertSame( '<div><figure><img><figcaption found-it>test</figcaption></figure>', $p->get_updated_html() );
+		$processor->set_attribute( 'found-it', true );
+		$this->assertSame( '<div><figure><img><figcaption found-it>test</figcaption></figure>', $processor->get_updated_html() );
 	}
 
 	/**
@@ -438,11 +497,11 @@ class Tests_HtmlApi_WpHtmlProcessorBreadcrumbs extends WP_UnitTestCase {
 	 * @covers WP_HTML_Processor::next_tag
 	 */
 	public function test_can_query_an_element_by_tag_name() {
-		$p = WP_HTML_Processor::createFragment( '<div><DIV><strong><img></strong></DIV>' );
-		$p->next_tag( 'IMG' );
-		$p->set_attribute( 'loading', 'lazy' );
+		$processor = WP_HTML_Processor::create_fragment( '<div><DIV><strong><img></strong></DIV>' );
+		$processor->next_tag( 'IMG' );
+		$processor->set_attribute( 'loading', 'lazy' );
 
-		$this->assertSame( '<div><DIV><strong><img loading="lazy"></strong></DIV>', $p->get_updated_html() );
+		$this->assertSame( '<div><DIV><strong><img loading="lazy"></strong></DIV>', $processor->get_updated_html() );
 	}
 
 	/**
@@ -455,31 +514,57 @@ class Tests_HtmlApi_WpHtmlProcessorBreadcrumbs extends WP_UnitTestCase {
 	 * @covers WP_HTML_Processor::seek
 	 */
 	public function test_can_seek_back_and_forth() {
-		$p = WP_HTML_Processor::createFragment( '<div><p one><div><p><div two><p><div><p><div><p three>' );
+		$processor = WP_HTML_Processor::create_fragment(
+			<<<'HTML'
+<div>text<p one>more stuff<div><![CDATA[this is not real CDATA]]><p><!-- hi --><div two><p><div><p>three comes soon<div><p three>' );
+HTML
+		);
 
 		// Find first tag of interest.
-		while ( $p->next_tag() && null === $p->get_attribute( 'one' ) ) {
+		while ( $processor->next_tag() && null === $processor->get_attribute( 'one' ) ) {
 			continue;
 		}
-		$p->set_bookmark( 'first' );
+		$processor->set_bookmark( 'first' );
 
 		// Find second tag of interest.
-		while ( $p->next_tag() && null === $p->get_attribute( 'two' ) ) {
+		while ( $processor->next_tag() && null === $processor->get_attribute( 'two' ) ) {
 			continue;
 		}
-		$p->set_bookmark( 'second' );
+		$processor->set_bookmark( 'second' );
 
 		// Find third tag of interest.
-		while ( $p->next_tag() && null === $p->get_attribute( 'three' ) ) {
+		while ( $processor->next_tag() && null === $processor->get_attribute( 'three' ) ) {
 			continue;
 		}
-		$p->set_bookmark( 'third' );
+		$processor->set_bookmark( 'third' );
 
 		// Seek backwards.
-		$p->seek( 'first' );
+		$processor->seek( 'first' );
 
 		// Seek forwards. If the current token isn't also updated this could appear like a backwards seek.
-		$p->seek( 'second' );
-		$this->assertTrue( $p->get_attribute( 'two' ) );
+		$processor->seek( 'second' );
+		$this->assertTrue( $processor->get_attribute( 'two' ) );
+	}
+
+	/**
+	 * Ensures that breadcrumbs are properly reported after seeking backward to a location
+	 * inside an element which has been fully closed before the seek.
+	 *
+	 * @ticket 60687
+	 */
+	public function test_retains_proper_bookmarks_after_seeking_back_to_closed_element() {
+		$processor = WP_HTML_Processor::create_fragment( '<div><img></div><div><hr></div>' );
+
+		$processor->next_tag( 'IMG' );
+		$processor->set_bookmark( 'first' );
+
+		$processor->next_tag( 'HR' );
+
+		$processor->seek( 'first' );
+		$this->assertSame(
+			array( 'HTML', 'BODY', 'DIV', 'IMG' ),
+			$processor->get_breadcrumbs(),
+			'Should have retained breadcrumbs from bookmarked location after seeking backwards to it.'
+		);
 	}
 }
diff --git a/tests/html-api/wpHtmlProcessorSemanticRules.php b/tests/html-api/wpHtmlProcessorSemanticRules.php
index 8fd3661ea0..68700370cf 100644
--- a/tests/html-api/wpHtmlProcessorSemanticRules.php
+++ b/tests/html-api/wpHtmlProcessorSemanticRules.php
@@ -16,56 +16,150 @@ class Tests_HtmlApi_WpHtmlProcessorSemanticRules extends WP_UnitTestCase {
 	 * RULES FOR "IN BODY" MODE
 	 *******************************************************************/
 
+	/**
+	 * Verifies that tags in the container group, including the ARTICLE element,
+	 * close out an open P element if one exists.
+	 *
+	 * @covers WP_HTML_Processor::step_in_body
+	 *
+	 * @ticket 59914
+	 *
+	 * @dataProvider data_article_container_group
+	 *
+	 * @param string $tag_name Name of tag in group under test.
+	 */
+	public function test_in_body_article_group_closes_open_p_element( $tag_name ) {
+		$processor = WP_HTML_Processor::create_fragment( "<p><p><p><p><{$tag_name} target>" );
+
+		while ( $processor->next_tag() && null === $processor->get_attribute( 'target' ) ) {
+			continue;
+		}
+
+		$this->assertSame(
+			$tag_name,
+			$processor->get_tag(),
+			"Expected to find {$tag_name} but found {$processor->get_tag()} instead."
+		);
+
+		$this->assertSame(
+			array( 'HTML', 'BODY', $tag_name ),
+			$processor->get_breadcrumbs(),
+			"Expected to find {$tag_name} as direct child of BODY as a result of implicitly closing an open P element."
+		);
+	}
+
+	/**
+	 * Verifies that tags in the container group, including the ARTICLE element,
+	 * nest inside each other despite being invalid in most cases.
+	 *
+	 * @covers WP_HTML_Processor::step_in_body
+	 *
+	 * @ticket 59914
+	 *
+	 * @dataProvider data_article_container_group
+	 *
+	 * @param string $tag_name Name of tag in group under test.
+	 */
+	public function test_in_body_article_group_can_nest_inside_itself( $tag_name ) {
+		$processor = WP_HTML_Processor::create_fragment( "<div><{$tag_name}><{$tag_name}></{$tag_name}><{$tag_name}><span><{$tag_name} target>" );
+
+		while ( $processor->next_tag() && null === $processor->get_attribute( 'target' ) ) {
+			continue;
+		}
+
+		$this->assertSame(
+			array( 'HTML', 'BODY', 'DIV', $tag_name, $tag_name, 'SPAN', $tag_name ),
+			$processor->get_breadcrumbs(),
+			"Expected to find {$tag_name} deeply nested inside itself."
+		);
+	}
+
+	/**
+	 * Data provider.
+	 *
+	 * @return array[].
+	 */
+	public static function data_article_container_group() {
+		$group = array();
+
+		foreach (
+			array(
+				'ADDRESS',
+				'ARTICLE',
+				'ASIDE',
+				'BLOCKQUOTE',
+				'CENTER',
+				'DETAILS',
+				'DIALOG',
+				'DIR',
+				'DL',
+				'DIV',
+				'FIELDSET',
+				'FIGCAPTION',
+				'FIGURE',
+				'FOOTER',
+				'HEADER',
+				'HGROUP',
+				'MAIN',
+				'MENU',
+				'NAV',
+				'SEARCH',
+				'SECTION',
+				'SUMMARY',
+			)
+			as $tag_name
+		) {
+			$group[ $tag_name ] = array( $tag_name );
+		}
+
+		return $group;
+	}
+
 	/**
 	 * Verifies that when encountering an end tag for which there is no corresponding
 	 * element in scope, that it skips the tag entirely.
 	 *
 	 * @ticket 58961
-	 *
-	 * @since 6.4.0
-	 *
-	 * @throws Exception
 	 */
 	public function test_in_body_skips_unexpected_button_closer() {
-		$p = WP_HTML_Processor::createFragment( '<div>Test</button></div>' );
+		$processor = WP_HTML_Processor::create_fragment( '<div>Test</button></div>' );
+
+		$processor->step();
+		$this->assertSame( 'DIV', $processor->get_tag(), 'Did not stop at initial DIV tag.' );
+		$this->assertFalse( $processor->is_tag_closer(), 'Did not find that initial DIV tag is an opener.' );
 
-		$p->step();
-		$this->assertEquals( 'DIV', $p->get_tag(), 'Did not stop at initial DIV tag.' );
-		$this->assertFalse( $p->is_tag_closer(), 'Did not find that initial DIV tag is an opener.' );
+		$processor->step();
+		$this->assertSame( '#text', $processor->get_token_type(), 'Should have found the text node.' );
 
 		/*
 		 * When encountering the BUTTON closing tag, there is no BUTTON in the stack of open elements.
 		 * It should be ignored as there's no BUTTON to close.
 		 */
-		$this->assertTrue( $p->step(), 'Found no further tags when it should have found the closing DIV' );
-		$this->assertEquals( 'DIV', $p->get_tag(), "Did not skip unexpected BUTTON; stopped at {$p->get_tag()}." );
-		$this->assertTrue( $p->is_tag_closer(), 'Did not find that the terminal DIV tag is a closer.' );
+		$this->assertTrue( $processor->step(), 'Found no further tags when it should have found the closing DIV' );
+		$this->assertSame( 'DIV', $processor->get_tag(), "Did not skip unexpected BUTTON; stopped at {$processor->get_tag()}." );
+		$this->assertTrue( $processor->is_tag_closer(), 'Did not find that the terminal DIV tag is a closer.' );
 	}
 
 	/**
 	 * Verifies insertion of a BUTTON element when no existing BUTTON is already in scope.
 	 *
 	 * @ticket 58961
-	 *
-	 * @since 6.4.0
-	 *
-	 * @throws WP_HTML_Unsupported_Exception
 	 */
 	public function test_in_body_button_with_no_button_in_scope() {
-		$p = WP_HTML_Processor::createFragment( '<div><p>Click the button <button one>here</button>!</p></div><button two>not here</button>' );
+		$processor = WP_HTML_Processor::create_fragment( '<div><p>Click the button <button one>here</button>!</p></div><button two>not here</button>' );
 
-		$this->assertTrue( $p->next_tag( 'BUTTON' ), 'Could not find expected first button.' );
-		$this->assertTrue( $p->get_attribute( 'one' ), 'Failed to match expected attribute on first button.' );
-		$this->assertSame( array( 'HTML', 'BODY', 'DIV', 'P', 'BUTTON' ), $p->get_breadcrumbs(), 'Failed to produce expected DOM nesting for first button.' );
+		$this->assertTrue( $processor->next_tag( 'BUTTON' ), 'Could not find expected first button.' );
+		$this->assertTrue( $processor->get_attribute( 'one' ), 'Failed to match expected attribute on first button.' );
+		$this->assertSame( array( 'HTML', 'BODY', 'DIV', 'P', 'BUTTON' ), $processor->get_breadcrumbs(), 'Failed to produce expected DOM nesting for first button.' );
 
 		/*
 		 * There's nothing special about this HTML construction, but it's important to verify that
 		 * the HTML Processor can find a BUTTON under normal and normative scenarios, not just the
 		 * malformed and unexpected ones.
 		 */
-		$this->assertTrue( $p->next_tag( 'BUTTON' ), 'Could not find expected second button.' );
-		$this->assertTrue( $p->get_attribute( 'two' ), 'Failed to match expected attribute on second button.' );
-		$this->assertSame( array( 'HTML', 'BODY', 'BUTTON' ), $p->get_breadcrumbs(), 'Failed to produce expected DOM nesting for second button.' );
+		$this->assertTrue( $processor->next_tag( 'BUTTON' ), 'Could not find expected second button.' );
+		$this->assertTrue( $processor->get_attribute( 'two' ), 'Failed to match expected attribute on second button.' );
+		$this->assertSame( array( 'HTML', 'BODY', 'BUTTON' ), $processor->get_breadcrumbs(), 'Failed to produce expected DOM nesting for second button.' );
 	}
 
 	/**
@@ -75,31 +169,29 @@ class Tests_HtmlApi_WpHtmlProcessorSemanticRules extends WP_UnitTestCase {
 	 * @ticket 58961
 	 *
 	 * @since 6.4.0
-	 *
-	 * @throws WP_HTML_Unsupported_Exception
 	 */
 	public function test_in_body_button_with_button_in_scope_as_parent() {
-		$p = WP_HTML_Processor::createFragment( '<div><p>Click the button <button one>almost<button two>here</button>!</p></div><button three>not here</button>' );
+		$processor = WP_HTML_Processor::create_fragment( '<div><p>Click the button <button one>almost<button two>here</button>!</p></div><button three>not here</button>' );
 
-		$this->assertTrue( $p->next_tag( 'BUTTON' ), 'Could not find expected first button.' );
-		$this->assertTrue( $p->get_attribute( 'one' ), 'Failed to match expected attribute on first button.' );
-		$this->assertSame( array( 'HTML', 'BODY', 'DIV', 'P', 'BUTTON' ), $p->get_breadcrumbs(), 'Failed to produce expected DOM nesting for first button.' );
+		$this->assertTrue( $processor->next_tag( 'BUTTON' ), 'Could not find expected first button.' );
+		$this->assertTrue( $processor->get_attribute( 'one' ), 'Failed to match expected attribute on first button.' );
+		$this->assertSame( array( 'HTML', 'BODY', 'DIV', 'P', 'BUTTON' ), $processor->get_breadcrumbs(), 'Failed to produce expected DOM nesting for first button.' );
 
 		/*
 		 * A naive parser might skip the second BUTTON because it's looking for the close of the first one,
 		 * or it may place it as a child of the first one, but it implicitly closes the open BUTTON.
 		 */
-		$this->assertTrue( $p->next_tag( 'BUTTON' ), 'Could not find expected second button.' );
-		$this->assertTrue( $p->get_attribute( 'two' ), 'Failed to match expected attribute on second button.' );
-		$this->assertSame( array( 'HTML', 'BODY', 'DIV', 'P', 'BUTTON' ), $p->get_breadcrumbs(), 'Failed to produce expected DOM nesting for second button.' );
+		$this->assertTrue( $processor->next_tag( 'BUTTON' ), 'Could not find expected second button.' );
+		$this->assertTrue( $processor->get_attribute( 'two' ), 'Failed to match expected attribute on second button.' );
+		$this->assertSame( array( 'HTML', 'BODY', 'DIV', 'P', 'BUTTON' ), $processor->get_breadcrumbs(), 'Failed to produce expected DOM nesting for second button.' );
 
 		/*
 		 * This is another form of the test for the second button, but from a different side. The test is
 		 * looking for proper handling of the open and close sequence for the BUTTON tags.
 		 */
-		$this->assertTrue( $p->next_tag( 'BUTTON' ), 'Could not find expected third button.' );
-		$this->assertTrue( $p->get_attribute( 'three' ), 'Failed to match expected attribute on third button.' );
-		$this->assertSame( array( 'HTML', 'BODY', 'BUTTON' ), $p->get_breadcrumbs(), 'Failed to produce expected DOM nesting for third button.' );
+		$this->assertTrue( $processor->next_tag( 'BUTTON' ), 'Could not find expected third button.' );
+		$this->assertTrue( $processor->get_attribute( 'three' ), 'Failed to match expected attribute on third button.' );
+		$this->assertSame( array( 'HTML', 'BODY', 'BUTTON' ), $processor->get_breadcrumbs(), 'Failed to produce expected DOM nesting for third button.' );
 	}
 
 	/**
@@ -110,16 +202,14 @@ class Tests_HtmlApi_WpHtmlProcessorSemanticRules extends WP_UnitTestCase {
 	 * @ticket 58961
 	 *
 	 * @since 6.4.0
-	 *
-	 * @throws WP_HTML_Unsupported_Exception
 	 */
 	public function test_in_body_button_with_button_in_scope_as_ancestor() {
-		$p = WP_HTML_Processor::createFragment( '<div><button one><p>Click the button <span><button two>here</button>!</span></p></div><button three>not here</button>' );
+		$processor = WP_HTML_Processor::create_fragment( '<div><button one><p>Click the button <span><button two>here</button>!</span></p></div><button three>not here</button>' );
 
 		// This button finds itself normally nesting inside the DIV.
-		$this->assertTrue( $p->next_tag( 'BUTTON' ), 'Could not find expected first button.' );
-		$this->assertTrue( $p->get_attribute( 'one' ), 'Failed to match expected attribute on first button.' );
-		$this->assertSame( array( 'HTML', 'BODY', 'DIV', 'BUTTON' ), $p->get_breadcrumbs(), 'Failed to produce expected DOM nesting for first button.' );
+		$this->assertTrue( $processor->next_tag( 'BUTTON' ), 'Could not find expected first button.' );
+		$this->assertTrue( $processor->get_attribute( 'one' ), 'Failed to match expected attribute on first button.' );
+		$this->assertSame( array( 'HTML', 'BODY', 'DIV', 'BUTTON' ), $processor->get_breadcrumbs(), 'Failed to produce expected DOM nesting for first button.' );
 
 		/*
 		 * Because the second button appears while a BUTTON is in scope, it generates implied end tags and closes
@@ -127,63 +217,207 @@ class Tests_HtmlApi_WpHtmlProcessorSemanticRules extends WP_UnitTestCase {
 		 * of an unexpected closing SPAN tag because the SPAN was closed by the second BUTTON. This element finds
 		 * itself a child of the most-recent open element above the most-recent BUTTON, or the DIV.
 		 */
-		$this->assertTrue( $p->next_tag( 'BUTTON' ), 'Could not find expected second button.' );
-		$this->assertTrue( $p->get_attribute( 'two' ), 'Failed to match expected attribute on second button.' );
-		$this->assertSame( array( 'HTML', 'BODY', 'DIV', 'BUTTON' ), $p->get_breadcrumbs(), 'Failed to produce expected DOM nesting for second button.' );
+		$this->assertTrue( $processor->next_tag( 'BUTTON' ), 'Could not find expected second button.' );
+		$this->assertTrue( $processor->get_attribute( 'two' ), 'Failed to match expected attribute on second button.' );
+		$this->assertSame( array( 'HTML', 'BODY', 'DIV', 'BUTTON' ), $processor->get_breadcrumbs(), 'Failed to produce expected DOM nesting for second button.' );
 
 		// The third button is back to normal, because everything has been implicitly or explicitly closed by now.
-		$this->assertTrue( $p->next_tag( 'BUTTON' ), 'Could not find expected third button.' );
-		$this->assertTrue( $p->get_attribute( 'three' ), 'Failed to match expected attribute on third button.' );
-		$this->assertSame( array( 'HTML', 'BODY', 'BUTTON' ), $p->get_breadcrumbs(), 'Failed to produce expected DOM nesting for third button.' );
+		$this->assertTrue( $processor->next_tag( 'BUTTON' ), 'Could not find expected third button.' );
+		$this->assertTrue( $processor->get_attribute( 'three' ), 'Failed to match expected attribute on third button.' );
+		$this->assertSame( array( 'HTML', 'BODY', 'BUTTON' ), $processor->get_breadcrumbs(), 'Failed to produce expected DOM nesting for third button.' );
+	}
+
+	/**
+	 * Verifies that HR closes an open p tag
+	 *
+	 * @ticket 60283
+	 */
+	public function test_in_body_hr_element_closes_open_p_tag() {
+		$processor = WP_HTML_Processor::create_fragment( '<p><hr>' );
+
+		$processor->next_tag( 'HR' );
+		$this->assertSame(
+			array( 'HTML', 'BODY', 'HR' ),
+			$processor->get_breadcrumbs(),
+			'Expected HR to be a direct child of the BODY, having closed the open P element.'
+		);
 	}
 
-	/*
+	/**
+	 * Verifies that H1 through H6 elements close an open P element.
+	 *
+	 * @ticket 60215
+	 *
+	 * @dataProvider data_heading_elements
+	 *
+	 * @param string $tag_name Name of H1 - H6 element under test.
+	 */
+	public function test_in_body_heading_element_closes_open_p_tag( $tag_name ) {
+		$processor = WP_HTML_Processor::create_fragment(
+			"<p>Open<{$tag_name}>Closed P</{$tag_name}><img></p>"
+		);
+
+		$processor->next_tag( $tag_name );
+		$this->assertSame(
+			array( 'HTML', 'BODY', $tag_name ),
+			$processor->get_breadcrumbs(),
+			"Expected {$tag_name} to be a direct child of the BODY, having closed the open P element."
+		);
+
+		$processor->next_tag( 'IMG' );
+		$this->assertSame(
+			array( 'HTML', 'BODY', 'IMG' ),
+			$processor->get_breadcrumbs(),
+			'Expected IMG to be a direct child of BODY, having closed the open P element.'
+		);
+	}
+
+	/**
+	 * Data provider.
+	 *
+	 * @return array[].
+	 */
+	public static function data_heading_elements() {
+		return array(
+			'H1' => array( 'H1' ),
+			'H2' => array( 'H2' ),
+			'H3' => array( 'H3' ),
+			'H4' => array( 'H4' ),
+			'H5' => array( 'H5' ),
+			'H6' => array( 'H5' ),
+		);
+	}
+
+	/**
+	 * Verifies that H1 through H6 elements close an open H1 through H6 element.
+	 *
+	 * @ticket 60215
+	 *
+	 * @dataProvider data_heading_combinations
+	 *
+	 * @param string $first_heading  H1 - H6 element appearing (unclosed) before the second.
+	 * @param string $second_heading H1 - H6 element appearing after the first.
+	 */
+	public function test_in_body_heading_element_closes_other_heading_elements( $first_heading, $second_heading ) {
+		$processor = WP_HTML_Processor::create_fragment(
+			"<div><{$first_heading} first> then <{$second_heading} second> and end </{$second_heading}><img></{$first_heading}></div>"
+		);
+
+		while ( $processor->next_tag() && null === $processor->get_attribute( 'second' ) ) {
+			continue;
+		}
+
+		$this->assertTrue(
+			$processor->get_attribute( 'second' ),
+			"Failed to find expected {$second_heading} tag."
+		);
+
+		$this->assertSame(
+			array( 'HTML', 'BODY', 'DIV', $second_heading ),
+			$processor->get_breadcrumbs(),
+			"Expected {$second_heading} to be a direct child of the DIV, having closed the open {$first_heading} element."
+		);
+
+		$processor->next_tag( 'IMG' );
+		$this->assertSame(
+			array( 'HTML', 'BODY', 'DIV', 'IMG' ),
+			$processor->get_breadcrumbs(),
+			"Expected IMG to be a direct child of DIV, having closed the open {$first_heading} element."
+		);
+	}
+
+	/**
+	 * Data provider.
+	 *
+	 * @return array[]
+	 */
+	public static function data_heading_combinations() {
+		$headings = array( 'H1', 'H2', 'H3', 'H4', 'H5', 'H6' );
+
+		$combinations = array();
+
+		// Create all unique pairs of H1 - H6 elements.
+		foreach ( $headings as $first_tag ) {
+			foreach ( $headings as $second_tag ) {
+				$combinations[ "{$first_tag} then {$second_tag}" ] = array( $first_tag, $second_tag );
+			}
+		}
+
+		return $combinations;
+	}
+
+	/**
 	 * Verifies that when "in body" and encountering "any other end tag"
 	 * that the HTML processor ignores the end tag if there's a special
 	 * element on the stack of open elements before the matching opening.
 	 *
+	 * @covers WP_HTML_Processor::step_in_body
+	 *
 	 * @ticket 58907
 	 *
 	 * @since 6.4.0
-	 *
-	 * @covers WP_HTML_Processor::step_in_body
 	 */
 	public function test_in_body_any_other_end_tag_with_unclosed_special_element() {
-		$p = WP_HTML_Processor::createFragment( '<div><span><p></span><div>' );
+		$processor = WP_HTML_Processor::create_fragment( '<div><span><p></span><div>' );
 
-		$p->next_tag( 'P' );
-		$this->assertSame( 'P', $p->get_tag(), "Expected to start test on P element but found {$p->get_tag()} instead." );
-		$this->assertSame( array( 'HTML', 'BODY', 'DIV', 'SPAN', 'P' ), $p->get_breadcrumbs(), 'Failed to produce expected DOM nesting.' );
+		$processor->next_tag( 'P' );
+		$this->assertSame( 'P', $processor->get_tag(), "Expected to start test on P element but found {$processor->get_tag()} instead." );
+		$this->assertSame( array( 'HTML', 'BODY', 'DIV', 'SPAN', 'P' ), $processor->get_breadcrumbs(), 'Failed to produce expected DOM nesting.' );
 
-		$this->assertTrue( $p->next_tag(), 'Failed to advance past P tag to expected DIV opener.' );
-		$this->assertSame( 'DIV', $p->get_tag(), "Expected to find DIV element, but found {$p->get_tag()} instead." );
-		$this->assertSame( array( 'HTML', 'BODY', 'DIV', 'SPAN', 'DIV' ), $p->get_breadcrumbs(), 'Failed to produce expected DOM nesting: SPAN should still be open and DIV should be its child.' );
+		$this->assertTrue( $processor->next_tag(), 'Failed to advance past P tag to expected DIV opener.' );
+		$this->assertSame( 'DIV', $processor->get_tag(), "Expected to find DIV element, but found {$processor->get_tag()} instead." );
+		$this->assertSame( array( 'HTML', 'BODY', 'DIV', 'SPAN', 'DIV' ), $processor->get_breadcrumbs(), 'Failed to produce expected DOM nesting: SPAN should still be open and DIV should be its child.' );
 	}
 
-	/*
+	/**
 	 * Verifies that when "in body" and encountering "any other end tag"
 	 * that the HTML processor closes appropriate elements on the stack of
 	 * open elements up to the matching opening.
 	 *
+	 * @covers WP_HTML_Processor::step_in_body
+	 *
 	 * @ticket 58907
 	 *
 	 * @since 6.4.0
-	 *
-	 * @covers WP_HTML_Processor::step_in_body
 	 */
 	public function test_in_body_any_other_end_tag_with_unclosed_non_special_element() {
-		$p = WP_HTML_Processor::createFragment( '<div><span><code></span><div>' );
+		$processor = WP_HTML_Processor::create_fragment( '<div><span><code></span><div>' );
+
+		$processor->next_tag( 'CODE' );
+		$this->assertSame( 'CODE', $processor->get_tag(), "Expected to start test on CODE element but found {$processor->get_tag()} instead." );
+		$this->assertSame( array( 'HTML', 'BODY', 'DIV', 'SPAN', 'CODE' ), $processor->get_breadcrumbs(), 'Failed to produce expected DOM nesting.' );
+
+		$this->assertTrue( $processor->step(), 'Failed to advance past CODE tag to expected SPAN closer.' );
+		$this->assertTrue( $processor->is_tag_closer(), 'Expected to find closing SPAN, but found opener instead.' );
+		$this->assertSame( array( 'HTML', 'BODY', 'DIV' ), $processor->get_breadcrumbs(), 'Failed to advance past CODE tag to expected DIV opener.' );
 
-		$p->next_tag( 'CODE' );
-		$this->assertSame( 'CODE', $p->get_tag(), "Expected to start test on CODE element but found {$p->get_tag()} instead." );
-		$this->assertSame( array( 'HTML', 'BODY', 'DIV', 'SPAN', 'CODE' ), $p->get_breadcrumbs(), 'Failed to produce expected DOM nesting.' );
+		$this->assertTrue( $processor->next_tag(), 'Failed to advance past SPAN closer to expected DIV opener.' );
+		$this->assertSame( 'DIV', $processor->get_tag(), "Expected to find DIV element, but found {$processor->get_tag()} instead." );
+		$this->assertSame( array( 'HTML', 'BODY', 'DIV', 'DIV' ), $processor->get_breadcrumbs(), 'Failed to produce expected DOM nesting: SPAN should be closed and DIV should be its sibling.' );
+	}
 
-		$this->assertTrue( $p->step(), 'Failed to advance past CODE tag to expected SPAN closer.' );
-		$this->assertTrue( $p->is_tag_closer(), 'Expected to find closing SPAN, but found opener instead.' );
-		$this->assertSame( array( 'HTML', 'BODY', 'DIV' ), $p->get_breadcrumbs(), 'Failed to advance past CODE tag to expected DIV opener.' );
+	/**
+	 * Ensures that support isn't accidentally partially added for the closing BR tag `</br>`.
+	 *
+	 * This tag closer has special rules and support shouldn't be added without implementing full support.
+	 *
+	 * > An end tag whose tag name is "br"
+	 * >   Parse error. Drop the attributes from the token, and act as described in the next entry;
+	 * >   i.e. act as if this was a "br" start tag token with no attributes, rather than the end
+	 * >   tag token that it actually is.
+	 *
+	 * When this handling is implemented, this test should be removed. It's not incorporated
+	 * into the existing unsupported tag behavior test because the opening tag is supported;
+	 * only the closing tag isn't.
+	 *
+	 * @covers WP_HTML_Processor::step_in_body
+	 *
+	 * @ticket 60283
+	 */
+	public function test_br_end_tag_unsupported() {
+		$processor = WP_HTML_Processor::create_fragment( '</br>' );
 
-		$this->assertTrue( $p->next_tag(), 'Failed to advance past SPAN closer to expected DIV opener.' );
-		$this->assertSame( 'DIV', $p->get_tag(), "Expected to find DIV element, but found {$p->get_tag()} instead." );
-		$this->assertSame( array( 'HTML', 'BODY', 'DIV', 'DIV' ), $p->get_breadcrumbs(), 'Failed to produce expected DOM nesting: SPAN should be closed and DIV should be its sibling.' );
+		$this->assertFalse( $processor->next_tag(), 'Found a BR tag that should not be handled.' );
+		$this->assertSame( WP_HTML_Processor::ERROR_UNSUPPORTED, $processor->get_last_error() );
 	}
 }
diff --git a/tests/html-api/wpHtmlProcessorSemanticRulesHeadingElements.php b/tests/html-api/wpHtmlProcessorSemanticRulesHeadingElements.php
new file mode 100644
index 0000000000..b33c6e072d
--- /dev/null
+++ b/tests/html-api/wpHtmlProcessorSemanticRulesHeadingElements.php
@@ -0,0 +1,126 @@
+<?php
+/**
+ * Unit tests covering WP_HTML_Processor compliance with HTML5 semantic parsing rules
+ * for the H1 - H6 heading elements.
+ *
+ * @package WordPress
+ * @subpackage HTML-API
+ *
+ * @since 6.5.0
+ *
+ * @group html-api
+ *
+ * @coversDefaultClass WP_HTML_Processor
+ */
+class Tests_HtmlApi_WpHtmlProcessorSemanticRulesHeadingElements extends WP_UnitTestCase {
+	/*******************************************************************
+	 * RULES FOR "IN BODY" MODE
+	 *******************************************************************/
+
+	/**
+	 * Verifies that H1 through H6 elements generate implied end tags.
+	 *
+	 * @ticket 60060
+	 *
+	 * @covers WP_HTML_Processor::step
+	 *
+	 * @dataProvider data_heading_elements
+	 *
+	 * @param string $tag_name Name of H1 - H6 element under test.
+	 */
+	public function test_in_body_heading_element_closes_open_p_tag( $tag_name ) {
+		$processor = WP_HTML_Processor::create_fragment(
+			"<p>Open<{$tag_name}>Closed P</{$tag_name}><img></p>"
+		);
+
+		$processor->next_tag( $tag_name );
+		$this->assertSame(
+			array( 'HTML', 'BODY', $tag_name ),
+			$processor->get_breadcrumbs(),
+			"Expected {$tag_name} to be a direct child of the BODY, having closed the open P element."
+		);
+
+		$processor->next_tag( 'IMG' );
+		$this->assertSame(
+			array( 'HTML', 'BODY', 'IMG' ),
+			$processor->get_breadcrumbs(),
+			'Expected IMG to be a direct child of BODY, having closed the open P element.'
+		);
+	}
+
+	/**
+	 * Data provider.
+	 *
+	 * @return array[].
+	 */
+	public static function data_heading_elements() {
+		return array(
+			'H1' => array( 'H1' ),
+			'H2' => array( 'H2' ),
+			'H3' => array( 'H3' ),
+			'H4' => array( 'H4' ),
+			'H5' => array( 'H5' ),
+			'H6' => array( 'H5' ),
+		);
+	}
+
+	/**
+	 * Verifies that H1 through H6 elements close an open H1 through H6 element.
+	 *
+	 * @ticket 60060
+	 *
+	 * @covers WP_HTML_Processor::step
+	 *
+	 * @dataProvider data_heading_combinations
+	 *
+	 * @param string $first_heading  H1 - H6 element appearing (unclosed) before the second.
+	 * @param string $second_heading H1 - H6 element appearing after the first.
+	 */
+	public function test_in_body_heading_element_closes_other_heading_elements( $first_heading, $second_heading ) {
+		$processor = WP_HTML_Processor::create_fragment(
+			"<div><{$first_heading} first> then <{$second_heading} second> and end </{$second_heading}><img></{$first_heading}></div>"
+		);
+
+		while ( $processor->next_tag() && null === $processor->get_attribute( 'second' ) ) {
+			continue;
+		}
+
+		$this->assertTrue(
+			$processor->get_attribute( 'second' ),
+			"Failed to find expected {$second_heading} tag."
+		);
+
+		$this->assertSame(
+			array( 'HTML', 'BODY', 'DIV', $second_heading ),
+			$processor->get_breadcrumbs(),
+			"Expected {$second_heading} to be a direct child of the DIV, having closed the open {$first_heading} element."
+		);
+
+		$processor->next_tag( 'IMG' );
+		$this->assertSame(
+			array( 'HTML', 'BODY', 'DIV', 'IMG' ),
+			$processor->get_breadcrumbs(),
+			"Expected IMG to be a direct child of DIV, having closed the open {$first_heading} element."
+		);
+	}
+
+	/**
+	 * Data provider.
+	 *
+	 * @return array[]
+	 */
+	public static function data_heading_combinations() {
+		$headings = array( 'H1', 'H2', 'H3', 'H4', 'H5', 'H6' );
+
+		$combinations = array();
+
+		// Create all unique pairs of H1 - H6 elements.
+		foreach ( $headings as $first_tag ) {
+			foreach ( $headings as $second_tag ) {
+				$combinations[ "{$first_tag} then {$second_tag}" ] = array( $first_tag, $second_tag );
+			}
+		}
+
+		return $combinations;
+	}
+}
diff --git a/tests/html-api/wpHtmlProcessorSemanticRulesListElements.php b/tests/html-api/wpHtmlProcessorSemanticRulesListElements.php
new file mode 100644
index 0000000000..0c7e3422f0
--- /dev/null
+++ b/tests/html-api/wpHtmlProcessorSemanticRulesListElements.php
@@ -0,0 +1,431 @@
+<?php
+/**
+ * Unit tests covering WP_HTML_Processor compliance with HTML5 semantic parsing rules
+ * for the list elements, including DD, DL, DT, LI, OL, and UL.
+ *
+ * @package WordPress
+ * @subpackage HTML-API
+ *
+ * @since 6.5.0
+ *
+ * @group html-api
+ *
+ * @coversDefaultClass WP_HTML_Processor
+ */
+class Tests_HtmlApi_WpHtmlProcessorSemanticRulesListElements extends WP_UnitTestCase {
+	/*******************************************************************
+	 * RULES FOR "IN BODY" MODE
+	 *******************************************************************/
+
+	/**
+	 * Ensures that an opening LI element implicitly closes an open LI element.
+	 *
+	 * @ticket 60215
+	 */
+	public function test_in_body_li_closes_open_li() {
+		$processor = WP_HTML_Processor::create_fragment( '<li><li><li target>' );
+
+		while (
+			null === $processor->get_attribute( 'target' ) &&
+			$processor->next_tag()
+		) {
+			continue;
+		}
+
+		$this->assertTrue(
+			$processor->get_attribute( 'target' ),
+			'Failed to find target node.'
+		);
+
+		$this->assertSame(
+			array( 'HTML', 'BODY', 'LI' ),
+			$processor->get_breadcrumbs(),
+			"LI should have closed open LI, but didn't."
+		);
+	}
+
+	/**
+	 * Ensures that an opening LI element implicitly closes other open elements with optional closing tags.
+	 *
+	 * @ticket 60215
+	 */
+	public function test_in_body_li_generates_implied_end_tags_inside_open_li() {
+		$processor = WP_HTML_Processor::create_fragment( '<li><li><div><li target>' );
+
+		while (
+			null === $processor->get_attribute( 'target' ) &&
+			$processor->next_tag()
+		) {
+			continue;
+		}
+
+		$this->assertTrue(
+			$processor->get_attribute( 'target' ),
+			'Failed to find target node.'
+		);
+
+		$this->assertSame(
+			array( 'HTML', 'BODY', 'LI' ),
+			$processor->get_breadcrumbs(),
+			"LI should have closed open LI, but didn't."
+		);
+	}
+
+	/**
+	 * Ensures that when closing tags with optional tag closers, an opening LI tag doesn't close beyond a special boundary.
+	 *
+	 * @ticket 60215
+	 */
+	public function test_in_body_li_generates_implied_end_tags_inside_open_li_but_stopping_at_special_tags() {
+		$processor = WP_HTML_Processor::create_fragment( '<li><li><blockquote><li target>' );
+
+		while (
+			null === $processor->get_attribute( 'target' ) &&
+			$processor->next_tag()
+		) {
+			continue;
+		}
+
+		$this->assertTrue(
+			$processor->get_attribute( 'target' ),
+			'Failed to find target node.'
+		);
+
+		$this->assertSame(
+			array( 'HTML', 'BODY', 'LI', 'BLOCKQUOTE', 'LI' ),
+			$processor->get_breadcrumbs(),
+			'LI should have left the BLOCKQOUTE open, but closed it.'
+		);
+	}
+
+	/**
+	 * Ensures that an opening LI closes an open P in button scope.
+	 *
+	 * @ticket 60215
+	 */
+	public function test_in_body_li_in_li_closes_p_in_button_scope() {
+		$processor = WP_HTML_Processor::create_fragment( '<li><li><p><button><p><li target>' );
+
+		while (
+			null === $processor->get_attribute( 'target' ) &&
+			$processor->next_tag()
+		) {
+			continue;
+		}
+
+		$this->assertTrue(
+			$processor->get_attribute( 'target' ),
+			'Failed to find target node.'
+		);
+
+		$this->assertSame(
+			array( 'HTML', 'BODY', 'LI', 'P', 'BUTTON', 'LI' ),
+			$processor->get_breadcrumbs(),
+			'LI should have left the outer P open, but closed it.'
+		);
+	}
+
+	/**
+	 * Ensures that an opening DD closes an open DD element.
+	 *
+	 * Note that a DD closes an open DD and also an open DT.
+	 *
+	 * @ticket 60215
+	 */
+	public function test_in_body_dd_closes_open_dd() {
+		$processor = WP_HTML_Processor::create_fragment( '<dd><dd><dd target>' );
+
+		while (
+			null === $processor->get_attribute( 'target' ) &&
+			$processor->next_tag()
+		) {
+			continue;
+		}
+
+		$this->assertTrue(
+			$processor->get_attribute( 'target' ),
+			'Failed to find target node.'
+		);
+
+		$this->assertSame(
+			array( 'HTML', 'BODY', 'DD' ),
+			$processor->get_breadcrumbs(),
+			"DD should have closed open DD, but didn't."
+		);
+	}
+
+	/**
+	 * Ensures that an opening DD closes an open DT element.
+	 *
+	 * Note that a DD closes an open DD and also an open DT.
+	 *
+	 * @ticket 60215
+	 */
+	public function test_in_body_dd_closes_open_dt() {
+		$processor = WP_HTML_Processor::create_fragment( '<dt><dt><dd target>' );
+
+		while (
+			null === $processor->get_attribute( 'target' ) &&
+			$processor->next_tag()
+		) {
+			continue;
+		}
+
+		$this->assertTrue(
+			$processor->get_attribute( 'target' ),
+			'Failed to find target node.'
+		);
+
+		$this->assertSame(
+			array( 'HTML', 'BODY', 'DD' ),
+			$processor->get_breadcrumbs(),
+			"DD should have closed open DD, but didn't."
+		);
+	}
+
+	/**
+	 * Ensures that an opening DD implicitly closes open elements with optional closing tags.
+	 *
+	 * @ticket 60215
+	 */
+	public function test_in_body_dd_generates_implied_end_tags_inside_open_dd() {
+		$processor = WP_HTML_Processor::create_fragment( '<dd><dd><div><dd target>' );
+
+		while (
+			null === $processor->get_attribute( 'target' ) &&
+			$processor->next_tag()
+		) {
+			continue;
+		}
+
+		$this->assertTrue(
+			$processor->get_attribute( 'target' ),
+			'Failed to find target node.'
+		);
+
+		$this->assertSame(
+			array( 'HTML', 'BODY', 'DD' ),
+			$processor->get_breadcrumbs(),
+			"DD should have closed open DD, but didn't."
+		);
+	}
+
+	/**
+	 * Ensures that an opening DD implicitly closes open elements with optional closing tags,
+	 * but doesn't close beyond a special boundary.
+	 *
+	 * @ticket 60215
+	 */
+	public function test_in_body_dd_generates_implied_end_tags_inside_open_dd_but_stopping_at_special_tags() {
+		$processor = WP_HTML_Processor::create_fragment( '<dd><dd><blockquote><dd target>' );
+
+		while (
+			null === $processor->get_attribute( 'target' ) &&
+			$processor->next_tag()
+		) {
+			continue;
+		}
+
+		$this->assertTrue(
+			$processor->get_attribute( 'target' ),
+			'Failed to find target node.'
+		);
+
+		$this->assertSame(
+			array( 'HTML', 'BODY', 'DD', 'BLOCKQUOTE', 'DD' ),
+			$processor->get_breadcrumbs(),
+			'DD should have left the BLOCKQOUTE open, but closed it.'
+		);
+	}
+
+	/**
+	 * Ensures that an opening DD inside a DD closes a P in button scope.
+	 *
+	 * @ticket 60215
+	 */
+	public function test_in_body_dd_in_dd_closes_p_in_button_scope() {
+		$processor = WP_HTML_Processor::create_fragment( '<dd><dd><p><button><p><dd target>' );
+
+		while (
+			null === $processor->get_attribute( 'target' ) &&
+			$processor->next_tag()
+		) {
+			continue;
+		}
+
+		$this->assertTrue(
+			$processor->get_attribute( 'target' ),
+			'Failed to find target node.'
+		);
+
+		$this->assertSame(
+			array( 'HTML', 'BODY', 'DD', 'P', 'BUTTON', 'DD' ),
+			$processor->get_breadcrumbs(),
+			'DD should have left the outer P open, but closed it.'
+		);
+	}
+
+	/**
+	 * Ensures that an opening DT closes an open DT element.
+	 *
+	 * @ticket 60215
+	 */
+	public function test_in_body_dt_closes_open_dt() {
+		$processor = WP_HTML_Processor::create_fragment( '<dt><dt><dt target>' );
+
+		while (
+			null === $processor->get_attribute( 'target' ) &&
+			$processor->next_tag()
+		) {
+			continue;
+		}
+
+		$this->assertTrue(
+			$processor->get_attribute( 'target' ),
+			'Failed to find target node.'
+		);
+
+		$this->assertSame(
+			array( 'HTML', 'BODY', 'DT' ),
+			$processor->get_breadcrumbs(),
+			"DT should have closed open DT, but didn't."
+		);
+	}
+
+	/**
+	 * Ensures that an opening DT closes an open DD.
+	 *
+	 * @ticket 60215
+	 */
+	public function test_in_body_dt_closes_open_dd() {
+		$processor = WP_HTML_Processor::create_fragment( '<dd><dd><dt target>' );
+
+		while (
+			null === $processor->get_attribute( 'target' ) &&
+			$processor->next_tag()
+		) {
+			continue;
+		}
+
+		$this->assertTrue(
+			$processor->get_attribute( 'target' ),
+			'Failed to find target node.'
+		);
+
+		$this->assertSame(
+			array( 'HTML', 'BODY', 'DT' ),
+			$processor->get_breadcrumbs(),
+			"DT should have closed open DT, but didn't."
+		);
+	}
+
+	/**
+	 * Ensures that an opening DT implicitly closes open elements with optional closing tags.
+	 *
+	 * @ticket 60215
+	 */
+	public function test_in_body_dt_generates_implied_end_tags_inside_open_dt() {
+		$processor = WP_HTML_Processor::create_fragment( '<dt><dt><div><dt target>' );
+
+		while (
+			null === $processor->get_attribute( 'target' ) &&
+			$processor->next_tag()
+		) {
+			continue;
+		}
+
+		$this->assertTrue(
+			$processor->get_attribute( 'target' ),
+			'Failed to find target node.'
+		);
+
+		$this->assertSame(
+			array( 'HTML', 'BODY', 'DT' ),
+			$processor->get_breadcrumbs(),
+			"DT should have closed open DT, but didn't."
+		);
+	}
+
+	/**
+	 * Ensures that an opening DT implicitly closes open elements with optional closing tags,
+	 * but doesn't close beyond a special boundary.
+	 *
+	 * @ticket 60215
+	 */
+	public function test_in_body_dt_generates_implied_end_tags_inside_open_dt_but_stopping_at_special_tags() {
+		$processor = WP_HTML_Processor::create_fragment( '<dt><dt><blockquote><dt target>' );
+
+		while (
+			null === $processor->get_attribute( 'target' ) &&
+			$processor->next_tag()
+		) {
+			continue;
+		}
+
+		$this->assertTrue(
+			$processor->get_attribute( 'target' ),
+			'Failed to find target node.'
+		);
+
+		$this->assertSame(
+			array( 'HTML', 'BODY', 'DT', 'BLOCKQUOTE', 'DT' ),
+			$processor->get_breadcrumbs(),
+			'DT should have left the BLOCKQOUTE open, but closed it.'
+		);
+	}
+
+	/**
+	 * Ensures that an opening DT inside a DT closes a P in button scope.
+	 *
+	 * @ticket 60215
+	 */
+	public function test_in_body_dt_in_dt_closes_p_in_button_scope() {
+		$processor = WP_HTML_Processor::create_fragment( '<dt><dt><p><button><p><dt target>' );
+
+		while (
+			null === $processor->get_attribute( 'target' ) &&
+			$processor->next_tag()
+		) {
+			continue;
+		}
+
+		$this->assertTrue(
+			$processor->get_attribute( 'target' ),
+			'Failed to find target node.'
+		);
+
+		$this->assertSame(
+			array( 'HTML', 'BODY', 'DT', 'P', 'BUTTON', 'DT' ),
+			$processor->get_breadcrumbs(),
+			'DT should have left the outer P open, but closed it.'
+		);
+	}
+
+	/**
+	 * Ensures that an unexpected LI doesn't close more elements than it should, that it doesn't
+	 * close open LI elements that are beyond a special element (in this case, the UL).
+	 *
+	 * @ticket 60215
+	 */
+	public function test_unexpected_li_close_tag_is_properly_contained() {
+		$processor = WP_HTML_Processor::create_fragment( '<ul><li><ul></li><li target>a</li></ul></li></ul>' );
+
+		while (
+			null === $processor->get_attribute( 'target' ) &&
+			$processor->next_tag()
+		) {
+			continue;
+		}
+
+		$this->assertTrue(
+			$processor->get_attribute( 'target' ),
+			'Failed to find target node.'
+		);
+
+		$this->assertSame(
+			array( 'HTML', 'BODY', 'UL', 'LI', 'UL', 'LI' ),
+			$processor->get_breadcrumbs(),
+			'Unexpected LI close tag should have left its containing UL open, but closed it.'
+		);
+	}
+}
diff --git a/tests/html-api/wpHtmlSupportRequiredActiveFormatReconstruction.php b/tests/html-api/wpHtmlSupportRequiredActiveFormatReconstruction.php
new file mode 100644
index 0000000000..a139850752
--- /dev/null
+++ b/tests/html-api/wpHtmlSupportRequiredActiveFormatReconstruction.php
@@ -0,0 +1,70 @@
+<?php
+/**
+ * Unit tests for the HTML API ensuring proper handling of behaviors related to
+ * active format reconstruction.
+ *
+ * @package WordPress
+ * @subpackage HTML-API
+ *
+ * @since 6.5.0
+ *
+ * @group html-api
+ *
+ * @coversDefaultClass WP_HTML_Processor
+ */
+class Tests_HtmlApi_WpHtmlSupportRequiredActiveFormatReconstruction extends WP_UnitTestCase {
+	/**
+	 * Ensures that active formats are properly reconstructed when visiting text nodes,
+	 * verifying that the proper breadcrumbs are maintained when scanning through HTML.
+	 *
+	 * @ticket 60455
+	 */
+	public function test_reconstructs_active_formats_on_text_nodes() {
+		$processor = WP_HTML_Processor::create_fragment( '<p><b>One<p><source>Two<source>' );
+
+		// The SOURCE element doesn't trigger reconstruction, and this test asserts that.
+		$this->assertTrue(
+			$processor->next_tag( 'SOURCE' ),
+			'Should have found the first custom element.'
+		);
+
+		$this->assertSame(
+			array( 'HTML', 'BODY', 'P', 'SOURCE' ),
+			$processor->get_breadcrumbs(),
+			'Should have closed formatting element at first P element.'
+		);
+
+		/*
+		 * There are two ways this test could fail. One is to appropriately find the
+		 * second text node but fail to reconstruct the implicitly-closed B element.
+		 * The other way is to fail to abort when encountering the second text node
+		 * because the kind of active format reconstruction isn't supported.
+		 *
+		 * At the time of writing this test, the HTML Processor bails whenever it
+		 * needs to reconstruct active formats, unless there are no active formats.
+		 * To ensure that this test properly works once that support is expanded,
+		 * it's written to verify both circumstances. Once support is added, this
+		 * can be simplified to only contain the first clause of the conditional.
+		 *
+		 * The use of the SOURCE element is important here because most elements
+		 * will also trigger reconstruction, which would conflate the test results
+		 * with the text node triggering reconstruction. The SOURCE element won't
+		 * do this, making it neutral. Therefore, the implicitly-closed B element
+		 * will only be reconstructed by the text node.
+		 */
+
+		if ( $processor->next_tag( 'SOURCE' ) ) {
+			$this->assertSame(
+				array( 'HTML', 'BODY', 'P', 'B', 'SOURCE' ),
+				$processor->get_breadcrumbs(),
+				'Should have reconstructed the implicitly-closed B element.'
+			);
+		} else {
+			$this->assertSame(
+				WP_HTML_Processor::ERROR_UNSUPPORTED,
+				$processor->get_last_error(),
+				'Should have aborted for incomplete active format reconstruction when encountering the second text node.'
+			);
+		}
+	}
+}
diff --git a/tests/html-api/wpHtmlSupportRequiredHtmlProcessor.php b/tests/html-api/wpHtmlSupportRequiredHtmlProcessor.php
index b9dbbc8cb8..2d3cd21ce4 100644
--- a/tests/html-api/wpHtmlSupportRequiredHtmlProcessor.php
+++ b/tests/html-api/wpHtmlSupportRequiredHtmlProcessor.php
@@ -42,9 +42,9 @@ class Tests_HtmlApi_WpHtmlSupportRequiredHtmlProcessor extends WP_UnitTestCase {
 	 * @param string $tag_name the HTML Processor should abort when encountering this tag, e.g. "BUTTON".
 	 */
 	private function ensure_support_is_added_everywhere( $tag_name ) {
-		$p = WP_HTML_Processor::createFragment( "<$tag_name>" );
+		$processor = WP_HTML_Processor::create_fragment( "<$tag_name>" );
 
-		$this->assertFalse( $p->step(), "Must support terminating elements in specific scope check before adding support for the {$tag_name} element." );
+		$this->assertFalse( $processor->step(), "Must support terminating elements in specific scope check before adding support for the {$tag_name} element." );
 	}
 
 	/**
@@ -58,9 +58,6 @@ class Tests_HtmlApi_WpHtmlSupportRequiredHtmlProcessor extends WP_UnitTestCase {
 	 * @covers WP_HTML_Processor::generate_implied_end_tags
 	 */
 	public function test_generate_implied_end_tags_needs_support() {
-		$this->ensure_support_is_added_everywhere( 'DD' );
-		$this->ensure_support_is_added_everywhere( 'DT' );
-		$this->ensure_support_is_added_everywhere( 'LI' );
 		$this->ensure_support_is_added_everywhere( 'OPTGROUP' );
 		$this->ensure_support_is_added_everywhere( 'OPTION' );
 		$this->ensure_support_is_added_everywhere( 'RB' );
@@ -82,9 +79,6 @@ class Tests_HtmlApi_WpHtmlSupportRequiredHtmlProcessor extends WP_UnitTestCase {
 	public function test_generate_implied_end_tags_thoroughly_needs_support() {
 		$this->ensure_support_is_added_everywhere( 'CAPTION' );
 		$this->ensure_support_is_added_everywhere( 'COLGROUP' );
-		$this->ensure_support_is_added_everywhere( 'DD' );
-		$this->ensure_support_is_added_everywhere( 'DT' );
-		$this->ensure_support_is_added_everywhere( 'LI' );
 		$this->ensure_support_is_added_everywhere( 'OPTGROUP' );
 		$this->ensure_support_is_added_everywhere( 'OPTION' );
 		$this->ensure_support_is_added_everywhere( 'RB' );
diff --git a/tests/html-api/wpHtmlSupportRequiredOpenElements.php b/tests/html-api/wpHtmlSupportRequiredOpenElements.php
index afc619a869..c2e8c697e8 100644
--- a/tests/html-api/wpHtmlSupportRequiredOpenElements.php
+++ b/tests/html-api/wpHtmlSupportRequiredOpenElements.php
@@ -44,9 +44,9 @@ class Tests_HtmlApi_WpHtmlSupportRequiredOpenElements extends WP_UnitTestCase {
 	 * @param string $tag_name the HTML Processor should abort when encountering this tag, e.g. "BUTTON".
 	 */
 	private function ensure_support_is_added_everywhere( $tag_name ) {
-		$p = WP_HTML_Processor::createFragment( "<$tag_name>" );
+		$processor = WP_HTML_Processor::create_fragment( "<$tag_name>" );
 
-		$this->assertFalse( $p->step(), "Must support terminating elements in specific scope check before adding support for the {$tag_name} element." );
+		$this->assertFalse( $processor->step(), "Must support terminating elements in specific scope check before adding support for the {$tag_name} element." );
 	}
 
 	/**
@@ -72,21 +72,16 @@ class Tests_HtmlApi_WpHtmlSupportRequiredOpenElements extends WP_UnitTestCase {
 		$this->ensure_support_is_added_everywhere( 'OBJECT' );
 		$this->ensure_support_is_added_everywhere( 'TEMPLATE' );
 
-		// MathML Elements
-		$this->ensure_support_is_added_everywhere( 'MI' );
-		$this->ensure_support_is_added_everywhere( 'MO' );
-		$this->ensure_support_is_added_everywhere( 'MN' );
-		$this->ensure_support_is_added_everywhere( 'MS' );
-		$this->ensure_support_is_added_everywhere( 'MTEXT' );
-		$this->ensure_support_is_added_everywhere( 'ANNOTATION-XML' );
+		// MathML Elements: MI, MO, MN, MS, MTEXT, ANNOTATION-XML.
+		$this->ensure_support_is_added_everywhere( 'MATH' );
 
 		/*
 		 * SVG elements: note that TITLE is both an HTML element and an SVG element
 		 * so care must be taken when adding support for either one.
+		 *
+		 * FOREIGNOBJECT, DESC, TITLE.
 		 */
-		$this->ensure_support_is_added_everywhere( 'FOREIGNOBJECT' );
-		$this->ensure_support_is_added_everywhere( 'DESC' );
-		$this->ensure_support_is_added_everywhere( 'TITLE' );
+		$this->ensure_support_is_added_everywhere( 'SVG' );
 	}
 
 	/**
@@ -115,28 +110,16 @@ class Tests_HtmlApi_WpHtmlSupportRequiredOpenElements extends WP_UnitTestCase {
 		$this->ensure_support_is_added_everywhere( 'OBJECT' );
 		$this->ensure_support_is_added_everywhere( 'TEMPLATE' );
 
-		// MathML Elements
-		$this->ensure_support_is_added_everywhere( 'MI' );
-		$this->ensure_support_is_added_everywhere( 'MO' );
-		$this->ensure_support_is_added_everywhere( 'MN' );
-		$this->ensure_support_is_added_everywhere( 'MS' );
-		$this->ensure_support_is_added_everywhere( 'MTEXT' );
-		$this->ensure_support_is_added_everywhere( 'ANNOTATION-XML' );
+		// MathML Elements: MI, MO, MN, MS, MTEXT, ANNOTATION-XML.
+		$this->ensure_support_is_added_everywhere( 'MATH' );
 
 		/*
 		 * SVG elements: note that TITLE is both an HTML element and an SVG element
 		 * so care must be taken when adding support for either one.
+		 *
+		 * FOREIGNOBJECT, DESC, TITLE.
 		 */
-		$this->ensure_support_is_added_everywhere( 'FOREIGNOBJECT' );
-		$this->ensure_support_is_added_everywhere( 'DESC' );
-		$this->ensure_support_is_added_everywhere( 'TITLE' );
-
-		// These elements are specific to list item scope.
-		$this->ensure_support_is_added_everywhere( 'OL' );
-		$this->ensure_support_is_added_everywhere( 'UL' );
-
-		// This element is the only element that depends on list item scope.
-		$this->ensure_support_is_added_everywhere( 'LI' );
+		$this->ensure_support_is_added_everywhere( 'SVG' );
 	}
 
 	/**
@@ -161,21 +144,16 @@ class Tests_HtmlApi_WpHtmlSupportRequiredOpenElements extends WP_UnitTestCase {
 		$this->ensure_support_is_added_everywhere( 'OBJECT' );
 		$this->ensure_support_is_added_everywhere( 'TEMPLATE' );
 
-		// MathML Elements
-		$this->ensure_support_is_added_everywhere( 'MI' );
-		$this->ensure_support_is_added_everywhere( 'MO' );
-		$this->ensure_support_is_added_everywhere( 'MN' );
-		$this->ensure_support_is_added_everywhere( 'MS' );
-		$this->ensure_support_is_added_everywhere( 'MTEXT' );
-		$this->ensure_support_is_added_everywhere( 'ANNOTATION-XML' );
+		// MathML Elements: MI, MO, MN, MS, MTEXT, ANNOTATION-XML.
+		$this->ensure_support_is_added_everywhere( 'MATH' );
 
 		/*
 		 * SVG elements: note that TITLE is both an HTML element and an SVG element
 		 * so care must be taken when adding support for either one.
+		 *
+		 * FOREIGNOBJECT, DESC, TITLE.
 		 */
-		$this->ensure_support_is_added_everywhere( 'FOREIGNOBJECT' );
-		$this->ensure_support_is_added_everywhere( 'DESC' );
-		$this->ensure_support_is_added_everywhere( 'TITLE' );
+		$this->ensure_support_is_added_everywhere( 'SVG' );
 	}
 
 	/**
@@ -201,21 +179,16 @@ class Tests_HtmlApi_WpHtmlSupportRequiredOpenElements extends WP_UnitTestCase {
 		$this->ensure_support_is_added_everywhere( 'OBJECT' );
 		$this->ensure_support_is_added_everywhere( 'TEMPLATE' );
 
-		// MathML Elements
-		$this->ensure_support_is_added_everywhere( 'MI' );
-		$this->ensure_support_is_added_everywhere( 'MO' );
-		$this->ensure_support_is_added_everywhere( 'MN' );
-		$this->ensure_support_is_added_everywhere( 'MS' );
-		$this->ensure_support_is_added_everywhere( 'MTEXT' );
-		$this->ensure_support_is_added_everywhere( 'ANNOTATION-XML' );
+		// MathML Elements: MI, MO, MN, MS, MTEXT, ANNOTATION-XML.
+		$this->ensure_support_is_added_everywhere( 'MATH' );
 
 		/*
 		 * SVG elements: note that TITLE is both an HTML element and an SVG element
 		 * so care must be taken when adding support for either one.
+		 *
+		 * FOREIGNOBJECT, DESC, TITLE.
 		 */
-		$this->ensure_support_is_added_everywhere( 'FOREIGNOBJECT' );
-		$this->ensure_support_is_added_everywhere( 'DESC' );
-		$this->ensure_support_is_added_everywhere( 'TITLE' );
+		$this->ensure_support_is_added_everywhere( 'SVG' );
 	}
 
 	/**
@@ -241,21 +214,16 @@ class Tests_HtmlApi_WpHtmlSupportRequiredOpenElements extends WP_UnitTestCase {
 		$this->ensure_support_is_added_everywhere( 'OBJECT' );
 		$this->ensure_support_is_added_everywhere( 'TEMPLATE' );
 
-		// MathML Elements
-		$this->ensure_support_is_added_everywhere( 'MI' );
-		$this->ensure_support_is_added_everywhere( 'MO' );
-		$this->ensure_support_is_added_everywhere( 'MN' );
-		$this->ensure_support_is_added_everywhere( 'MS' );
-		$this->ensure_support_is_added_everywhere( 'MTEXT' );
-		$this->ensure_support_is_added_everywhere( 'ANNOTATION-XML' );
+		// MathML Elements: MI, MO, MN, MS, MTEXT, ANNOTATION-XML.
+		$this->ensure_support_is_added_everywhere( 'MATH' );
 
 		/*
 		 * SVG elements: note that TITLE is both an HTML element and an SVG element
 		 * so care must be taken when adding support for either one.
+		 *
+		 * FOREIGNOBJECT, DESC, TITLE.
 		 */
-		$this->ensure_support_is_added_everywhere( 'FOREIGNOBJECT' );
-		$this->ensure_support_is_added_everywhere( 'DESC' );
-		$this->ensure_support_is_added_everywhere( 'TITLE' );
+		$this->ensure_support_is_added_everywhere( 'SVG' );
 	}
 
 	/**
@@ -280,21 +248,16 @@ class Tests_HtmlApi_WpHtmlSupportRequiredOpenElements extends WP_UnitTestCase {
 		$this->ensure_support_is_added_everywhere( 'OBJECT' );
 		$this->ensure_support_is_added_everywhere( 'TEMPLATE' );
 
-		// MathML Elements
-		$this->ensure_support_is_added_everywhere( 'MI' );
-		$this->ensure_support_is_added_everywhere( 'MO' );
-		$this->ensure_support_is_added_everywhere( 'MN' );
-		$this->ensure_support_is_added_everywhere( 'MS' );
-		$this->ensure_support_is_added_everywhere( 'MTEXT' );
-		$this->ensure_support_is_added_everywhere( 'ANNOTATION-XML' );
+		// MathML Elements: MI, MO, MN, MS, MTEXT, ANNOTATION-XML.
+		$this->ensure_support_is_added_everywhere( 'MATH' );
 
 		/*
 		 * SVG elements: note that TITLE is both an HTML element and an SVG element
 		 * so care must be taken when adding support for either one.
+		 *
+		 * FOREIGNOBJECT, DESC, TITLE.
 		 */
-		$this->ensure_support_is_added_everywhere( 'FOREIGNOBJECT' );
-		$this->ensure_support_is_added_everywhere( 'DESC' );
-		$this->ensure_support_is_added_everywhere( 'TITLE' );
+		$this->ensure_support_is_added_everywhere( 'SVG' );
 
 		// These elements are specific to TABLE scope.
 		$this->ensure_support_is_added_everywhere( 'HTML' );
@@ -335,21 +298,16 @@ class Tests_HtmlApi_WpHtmlSupportRequiredOpenElements extends WP_UnitTestCase {
 		$this->ensure_support_is_added_everywhere( 'OBJECT' );
 		$this->ensure_support_is_added_everywhere( 'TEMPLATE' );
 
-		// MathML Elements
-		$this->ensure_support_is_added_everywhere( 'MI' );
-		$this->ensure_support_is_added_everywhere( 'MO' );
-		$this->ensure_support_is_added_everywhere( 'MN' );
-		$this->ensure_support_is_added_everywhere( 'MS' );
-		$this->ensure_support_is_added_everywhere( 'MTEXT' );
-		$this->ensure_support_is_added_everywhere( 'ANNOTATION-XML' );
+		// MathML Elements: MI, MO, MN, MS, MTEXT, ANNOTATION-XML.
+		$this->ensure_support_is_added_everywhere( 'MATH' );
 
 		/*
 		 * SVG elements: note that TITLE is both an HTML element and an SVG element
 		 * so care must be taken when adding support for either one.
+		 *
+		 * FOREIGNOBJECT, DESC, TITLE.
 		 */
-		$this->ensure_support_is_added_everywhere( 'FOREIGNOBJECT' );
-		$this->ensure_support_is_added_everywhere( 'DESC' );
-		$this->ensure_support_is_added_everywhere( 'TITLE' );
+		$this->ensure_support_is_added_everywhere( 'SVG' );
 
 		// These elements are specific to SELECT scope.
 		$this->ensure_support_is_added_everywhere( 'OPTGROUP' );
diff --git a/tests/html-api/wpHtmlTagProcessor-bookmark.php b/tests/html-api/wpHtmlTagProcessor-bookmark.php
index 90adfb20be..0c5093d03c 100644
--- a/tests/html-api/wpHtmlTagProcessor-bookmark.php
+++ b/tests/html-api/wpHtmlTagProcessor-bookmark.php
@@ -19,12 +19,12 @@ class Tests_HtmlApi_WpHtmlTagProcessor_Bookmark extends WP_UnitTestCase {
 	 * @covers WP_HTML_Tag_Processor::set_bookmark
 	 */
 	public function test_set_bookmark() {
-		$p = new WP_HTML_Tag_Processor( '<ul><li>One</li><li>Two</li><li>Three</li></ul>' );
-		$p->next_tag( 'li' );
-		$this->assertTrue( $p->set_bookmark( 'first li' ), 'Could not allocate a "first li" bookmark' );
-		$p->next_tag( 'li' );
-		$this->assertTrue( $p->set_bookmark( 'second li' ), 'Could not allocate a "second li" bookmark' );
-		$this->assertTrue( $p->set_bookmark( 'first li' ), 'Could not move the "first li" bookmark' );
+		$processor = new WP_HTML_Tag_Processor( '<ul><li>One</li><li>Two</li><li>Three</li></ul>' );
+		$processor->next_tag( 'li' );
+		$this->assertTrue( $processor->set_bookmark( 'first li' ), 'Could not allocate a "first li" bookmark' );
+		$processor->next_tag( 'li' );
+		$this->assertTrue( $processor->set_bookmark( 'second li' ), 'Could not allocate a "second li" bookmark' );
+		$this->assertTrue( $processor->set_bookmark( 'first li' ), 'Could not move the "first li" bookmark' );
 	}
 
 	/**
@@ -33,11 +33,11 @@ class Tests_HtmlApi_WpHtmlTagProcessor_Bookmark extends WP_UnitTestCase {
 	 * @covers WP_HTML_Tag_Processor::release_bookmark
 	 */
 	public function test_release_bookmark() {
-		$p = new WP_HTML_Tag_Processor( '<ul><li>One</li><li>Two</li><li>Three</li></ul>' );
-		$p->next_tag( 'li' );
-		$this->assertFalse( $p->release_bookmark( 'first li' ), 'Released a non-existing bookmark' );
-		$p->set_bookmark( 'first li' );
-		$this->assertTrue( $p->release_bookmark( 'first li' ), 'Could not release a bookmark' );
+		$processor = new WP_HTML_Tag_Processor( '<ul><li>One</li><li>Two</li><li>Three</li></ul>' );
+		$processor->next_tag( 'li' );
+		$this->assertFalse( $processor->release_bookmark( 'first li' ), 'Released a non-existing bookmark' );
+		$processor->set_bookmark( 'first li' );
+		$this->assertTrue( $processor->release_bookmark( 'first li' ), 'Could not release a bookmark' );
 	}
 
 	/**
@@ -46,8 +46,8 @@ class Tests_HtmlApi_WpHtmlTagProcessor_Bookmark extends WP_UnitTestCase {
 	 * @covers WP_HTML_Tag_Processor::has_bookmark
 	 */
 	public function test_has_bookmark_returns_false_if_bookmark_does_not_exist() {
-		$p = new WP_HTML_Tag_Processor( '<div>Test</div>' );
-		$this->assertFalse( $p->has_bookmark( 'my-bookmark' ) );
+		$processor = new WP_HTML_Tag_Processor( '<div>Test</div>' );
+		$this->assertFalse( $processor->has_bookmark( 'my-bookmark' ) );
 	}
 
 	/**
@@ -56,10 +56,10 @@ class Tests_HtmlApi_WpHtmlTagProcessor_Bookmark extends WP_UnitTestCase {
 	 * @covers WP_HTML_Tag_Processor::has_bookmark
 	 */
 	public function test_has_bookmark_returns_true_if_bookmark_exists() {
-		$p = new WP_HTML_Tag_Processor( '<div>Test</div>' );
-		$p->next_tag();
-		$p->set_bookmark( 'my-bookmark' );
-		$this->assertTrue( $p->has_bookmark( 'my-bookmark' ) );
+		$processor = new WP_HTML_Tag_Processor( '<div>Test</div>' );
+		$processor->next_tag();
+		$processor->set_bookmark( 'my-bookmark' );
+		$this->assertTrue( $processor->has_bookmark( 'my-bookmark' ) );
 	}
 
 	/**
@@ -68,11 +68,11 @@ class Tests_HtmlApi_WpHtmlTagProcessor_Bookmark extends WP_UnitTestCase {
 	 * @covers WP_HTML_Tag_Processor::has_bookmark
 	 */
 	public function test_has_bookmark_returns_false_if_bookmark_has_been_released() {
-		$p = new WP_HTML_Tag_Processor( '<div>Test</div>' );
-		$p->next_tag();
-		$p->set_bookmark( 'my-bookmark' );
-		$p->release_bookmark( 'my-bookmark' );
-		$this->assertFalse( $p->has_bookmark( 'my-bookmark' ) );
+		$processor = new WP_HTML_Tag_Processor( '<div>Test</div>' );
+		$processor->next_tag();
+		$processor->set_bookmark( 'my-bookmark' );
+		$processor->release_bookmark( 'my-bookmark' );
+		$this->assertFalse( $processor->has_bookmark( 'my-bookmark' ) );
 	}
 
 	/**
@@ -81,19 +81,19 @@ class Tests_HtmlApi_WpHtmlTagProcessor_Bookmark extends WP_UnitTestCase {
 	 * @covers WP_HTML_Tag_Processor::seek
 	 */
 	public function test_seek() {
-		$p = new WP_HTML_Tag_Processor( '<ul><li>One</li><li>Two</li><li>Three</li></ul>' );
-		$p->next_tag( 'li' );
-		$p->set_bookmark( 'first li' );
+		$processor = new WP_HTML_Tag_Processor( '<ul><li>One</li><li>Two</li><li>Three</li></ul>' );
+		$processor->next_tag( 'li' );
+		$processor->set_bookmark( 'first li' );
 
-		$p->next_tag( 'li' );
-		$p->set_attribute( 'foo-2', 'bar-2' );
+		$processor->next_tag( 'li' );
+		$processor->set_attribute( 'foo-2', 'bar-2' );
 
-		$p->seek( 'first li' );
-		$p->set_attribute( 'foo-1', 'bar-1' );
+		$processor->seek( 'first li' );
+		$processor->set_attribute( 'foo-1', 'bar-1' );
 
 		$this->assertSame(
 			'<ul><li foo-1="bar-1">One</li><li foo-2="bar-2">Two</li><li>Three</li></ul>',
-			$p->get_updated_html(),
+			$processor->get_updated_html(),
 			'Did not seek to the intended bookmark locations'
 		);
 	}
@@ -104,18 +104,18 @@ class Tests_HtmlApi_WpHtmlTagProcessor_Bookmark extends WP_UnitTestCase {
 	 * @covers WP_HTML_Tag_Processor::seek
 	 */
 	public function test_seeks_to_tag_closer_bookmark() {
-		$p = new WP_HTML_Tag_Processor( '<div>First</div><span>Second</span>' );
-		$p->next_tag( array( 'tag_closers' => 'visit' ) );
-		$p->set_bookmark( 'first' );
-		$p->next_tag( array( 'tag_closers' => 'visit' ) );
-		$p->set_bookmark( 'second' );
+		$processor = new WP_HTML_Tag_Processor( '<div>First</div><span>Second</span>' );
+		$processor->next_tag( array( 'tag_closers' => 'visit' ) );
+		$processor->set_bookmark( 'first' );
+		$processor->next_tag( array( 'tag_closers' => 'visit' ) );
+		$processor->set_bookmark( 'second' );
 
-		$p->seek( 'first' );
-		$p->seek( 'second' );
+		$processor->seek( 'first' );
+		$processor->seek( 'second' );
 
 		$this->assertSame(
 			'DIV',
-			$p->get_tag(),
+			$processor->get_tag(),
 			'Did not seek to the intended bookmark location'
 		);
 	}
@@ -159,24 +159,24 @@ class Tests_HtmlApi_WpHtmlTagProcessor_Bookmark extends WP_UnitTestCase {
 	 * @covers WP_HTML_Tag_Processor::set_bookmark
 	 */
 	public function test_removing_long_attributes_doesnt_break_seek() {
-		$input = <<<HTML
+		$input     = <<<HTML
 		<button twenty_one_characters 7_chars></button><button></button>
 HTML;
-		$p     = new WP_HTML_Tag_Processor( $input );
-		$p->next_tag( 'button' );
-		$p->set_bookmark( 'first' );
-		$p->next_tag( 'button' );
-		$p->set_bookmark( 'second' );
+		$processor = new WP_HTML_Tag_Processor( $input );
+		$processor->next_tag( 'button' );
+		$processor->set_bookmark( 'first' );
+		$processor->next_tag( 'button' );
+		$processor->set_bookmark( 'second' );
 
 		$this->assertTrue(
-			$p->seek( 'first' ),
+			$processor->seek( 'first' ),
 			'Seek() to the first button has failed'
 		);
-		$p->remove_attribute( 'twenty_one_characters' );
-		$p->remove_attribute( '7_chars' );
+		$processor->remove_attribute( 'twenty_one_characters' );
+		$processor->remove_attribute( '7_chars' );
 
 		$this->assertTrue(
-			$p->seek( 'second' ),
+			$processor->seek( 'second' ),
 			'Seek() to the second button has failed'
 		);
 	}
@@ -232,83 +232,92 @@ HTML;
 	</div>
 </div>
 HTML;
-		$p               = new WP_HTML_Tag_Processor( $input );
-		$p->next_tag( 'div' );
-		$p->next_tag( 'div' );
-		$p->next_tag( 'div' );
-		$p->set_bookmark( 'first div' );
-		$p->next_tag( 'button' );
-		$p->set_bookmark( 'first button' );
-		$p->next_tag( 'button' );
-		$p->set_bookmark( 'second button' );
-		$p->next_tag( 'button' );
-		$p->set_bookmark( 'third button' );
-		$p->next_tag( 'button' );
-		$p->set_bookmark( 'fourth button' );
-
-		$p->seek( 'first button' );
-		$p->set_attribute( 'type', 'submit' );
+		$processor       = new WP_HTML_Tag_Processor( $input );
+		$processor->next_tag( 'div' );
+		$processor->next_tag( 'div' );
+		$processor->next_tag( 'div' );
+		$processor->set_bookmark( 'first div' );
+		$processor->next_tag( 'button' );
+		$processor->set_bookmark( 'first button' );
+		$processor->next_tag( 'button' );
+		$processor->set_bookmark( 'second button' );
+		$processor->next_tag( 'button' );
+		$processor->set_bookmark( 'third button' );
+		$processor->next_tag( 'button' );
+		$processor->set_bookmark( 'fourth button' );
+
+		$processor->seek( 'first button' );
+		$processor->set_attribute( 'type', 'submit' );
 
 		$this->assertTrue(
-			$p->seek( 'third button' ),
+			$processor->seek( 'third button' ),
 			'Seek() to the third button failed'
 		);
-		$p->remove_attribute( 'class' );
-		$p->remove_attribute( 'type' );
-		$p->remove_attribute( 'aria-expanded' );
-		$p->set_attribute( 'id', 'rebase-and-merge' );
-		$p->remove_attribute( 'data-details-container' );
+		$processor->remove_attribute( 'class' );
+		$processor->remove_attribute( 'type' );
+		$processor->remove_attribute( 'aria-expanded' );
+		$processor->set_attribute( 'id', 'rebase-and-merge' );
+		$processor->remove_attribute( 'data-details-container' );
 
 		$this->assertTrue(
-			$p->seek( 'first div' ),
+			$processor->seek( 'first div' ),
 			'Seek() to the first div failed'
 		);
-		$p->set_attribute( 'checked', false );
+		$processor->set_attribute( 'checked', false );
 
 		$this->assertTrue(
-			$p->seek( 'fourth button' ),
+			$processor->seek( 'fourth button' ),
 			'Seek() to the fourth button failed'
 		);
-		$p->set_attribute( 'id', 'last-button' );
-		$p->remove_attribute( 'class' );
-		$p->remove_attribute( 'type' );
-		$p->remove_attribute( 'checked' );
-		$p->remove_attribute( 'aria-label' );
-		$p->remove_attribute( 'disabled' );
-		$p->remove_attribute( 'data-view-component' );
+		$processor->set_attribute( 'id', 'last-button' );
+		$processor->remove_attribute( 'class' );
+		$processor->remove_attribute( 'type' );
+		$processor->remove_attribute( 'checked' );
+		$processor->remove_attribute( 'aria-label' );
+		$processor->remove_attribute( 'disabled' );
+		$processor->remove_attribute( 'data-view-component' );
 
 		$this->assertTrue(
-			$p->seek( 'second button' ),
+			$processor->seek( 'second button' ),
 			'Seek() to the second button failed'
 		);
-		$p->remove_attribute( 'type' );
-		$p->set_attribute( 'class', 'hx_create-pr-button' );
+		$processor->remove_attribute( 'type' );
+		$processor->set_attribute( 'class', 'hx_create-pr-button' );
 
 		$this->assertSame(
 			$expected_output,
-			$p->get_updated_html(),
+			$processor->get_updated_html(),
 			'Performing several attribute updates on different tags does not produce the expected HTML snippet'
 		);
 	}
 
 	/**
 	 * @ticket 56299
+	 * @ticket 60697
 	 *
 	 * @covers WP_HTML_Tag_Processor::seek
 	 */
 	public function test_updates_bookmark_for_additions_after_both_sides() {
-		$p = new WP_HTML_Tag_Processor( '<div>First</div><div>Second</div>' );
-		$p->next_tag();
-		$p->set_bookmark( 'first' );
-		$p->next_tag();
-		$p->add_class( 'second' );
+		$processor = new WP_HTML_Tag_Processor( '<div>First</div><div>Second</div>' );
+		$processor->next_tag();
+		$processor->set_attribute( 'id', 'one' );
+		$processor->set_bookmark( 'first' );
+		$processor->next_tag();
+		$processor->set_attribute( 'id', 'two' );
+		$processor->add_class( 'second' );
 
-		$p->seek( 'first' );
-		$p->add_class( 'first' );
+		$processor->seek( 'first' );
+		$processor->add_class( 'first' );
 
 		$this->assertSame(
-			'<div class="first">First</div><div class="second">Second</div>',
-			$p->get_updated_html(),
+			'one',
+			$processor->get_attribute( 'id' ),
+			'Should have remembered attribute change from before the seek.'
+		);
+
+		$this->assertSame(
+			'<div class="first" id="one">First</div><div class="second" id="two">Second</div>',
+			$processor->get_updated_html(),
 			'The bookmark was updated incorrectly in response to HTML markup updates'
 		);
 	}
@@ -319,21 +328,21 @@ HTML;
 	 * @covers WP_HTML_Tag_Processor::seek
 	 */
 	public function test_updates_bookmark_for_additions_before_both_sides() {
-		$p = new WP_HTML_Tag_Processor( '<div>First</div><div>Second</div>' );
-		$p->next_tag();
-		$p->set_bookmark( 'first' );
-		$p->next_tag();
-		$p->set_bookmark( 'second' );
+		$processor = new WP_HTML_Tag_Processor( '<div>First</div><div>Second</div>' );
+		$processor->next_tag();
+		$processor->set_bookmark( 'first' );
+		$processor->next_tag();
+		$processor->set_bookmark( 'second' );
 
-		$p->seek( 'first' );
-		$p->add_class( 'first' );
+		$processor->seek( 'first' );
+		$processor->add_class( 'first' );
 
-		$p->seek( 'second' );
-		$p->add_class( 'second' );
+		$processor->seek( 'second' );
+		$processor->add_class( 'second' );
 
 		$this->assertSame(
 			'<div class="first">First</div><div class="second">Second</div>',
-			$p->get_updated_html(),
+			$processor->get_updated_html(),
 			'The bookmark was updated incorrectly in response to HTML markup updates'
 		);
 	}
@@ -344,14 +353,14 @@ HTML;
 	 * @covers WP_HTML_Tag_Processor::seek
 	 */
 	public function test_updates_bookmark_for_deletions_after_both_sides() {
-		$p = new WP_HTML_Tag_Processor( '<div>First</div><div disabled>Second</div>' );
-		$p->next_tag();
-		$p->set_bookmark( 'first' );
-		$p->next_tag();
-		$p->remove_attribute( 'disabled' );
+		$processor = new WP_HTML_Tag_Processor( '<div>First</div><div disabled>Second</div>' );
+		$processor->next_tag();
+		$processor->set_bookmark( 'first' );
+		$processor->next_tag();
+		$processor->remove_attribute( 'disabled' );
 
-		$p->seek( 'first' );
-		$p->set_attribute( 'untouched', true );
+		$processor->seek( 'first' );
+		$processor->set_attribute( 'untouched', true );
 
 		$this->assertSame(
 			/*
@@ -363,7 +372,7 @@ HTML;
 			 * is not required.
 			 */
 			'<div untouched>First</div><div >Second</div>',
-			$p->get_updated_html(),
+			$processor->get_updated_html(),
 			'The bookmark was incorrectly in response to HTML markup updates'
 		);
 	}
@@ -374,17 +383,17 @@ HTML;
 	 * @covers WP_HTML_Tag_Processor::seek
 	 */
 	public function test_updates_bookmark_for_deletions_before_both_sides() {
-		$p = new WP_HTML_Tag_Processor( '<div disabled>First</div><div>Second</div>' );
-		$p->next_tag();
-		$p->set_bookmark( 'first' );
-		$p->next_tag();
-		$p->set_bookmark( 'second' );
+		$processor = new WP_HTML_Tag_Processor( '<div disabled>First</div><div>Second</div>' );
+		$processor->next_tag();
+		$processor->set_bookmark( 'first' );
+		$processor->next_tag();
+		$processor->set_bookmark( 'second' );
 
-		$p->seek( 'first' );
-		$p->remove_attribute( 'disabled' );
+		$processor->seek( 'first' );
+		$processor->remove_attribute( 'disabled' );
 
-		$p->seek( 'second' );
-		$p->set_attribute( 'safe', true );
+		$processor->seek( 'second' );
+		$processor->set_attribute( 'safe', true );
 
 		$this->assertSame(
 			/*
@@ -396,7 +405,7 @@ HTML;
 			 * is not required.
 			 */
 			'<div >First</div><div safe>Second</div>',
-			$p->get_updated_html(),
+			$processor->get_updated_html(),
 			'The bookmark was updated incorrectly in response to HTML markup updates'
 		);
 	}
@@ -407,15 +416,15 @@ HTML;
 	 * @covers WP_HTML_Tag_Processor::set_bookmark
 	 */
 	public function test_limits_the_number_of_bookmarks() {
-		$p = new WP_HTML_Tag_Processor( '<ul><li>One</li><li>Two</li><li>Three</li></ul>' );
-		$p->next_tag( 'li' );
+		$processor = new WP_HTML_Tag_Processor( '<ul><li>One</li><li>Two</li><li>Three</li></ul>' );
+		$processor->next_tag( 'li' );
 
 		for ( $i = 0; $i < WP_HTML_Tag_Processor::MAX_BOOKMARKS; $i++ ) {
-			$this->assertTrue( $p->set_bookmark( "bookmark $i" ), "Could not allocate the bookmark #$i" );
+			$this->assertTrue( $processor->set_bookmark( "bookmark $i" ), "Could not allocate the bookmark #$i" );
 		}
 
 		$this->setExpectedIncorrectUsage( 'WP_HTML_Tag_Processor::set_bookmark' );
-		$this->assertFalse( $p->set_bookmark( 'final bookmark' ), "Allocated $i bookmarks, which is one above the limit" );
+		$this->assertFalse( $processor->set_bookmark( 'final bookmark' ), "Allocated $i bookmarks, which is one above the limit" );
 	}
 
 	/**
@@ -424,15 +433,60 @@ HTML;
 	 * @covers WP_HTML_Tag_Processor::seek
 	 */
 	public function test_limits_the_number_of_seek_calls() {
-		$p = new WP_HTML_Tag_Processor( '<ul><li>One</li><li>Two</li><li>Three</li></ul>' );
-		$p->next_tag( 'li' );
-		$p->set_bookmark( 'bookmark' );
+		$processor = new WP_HTML_Tag_Processor( '<ul><li>One</li><li>Two</li><li>Three</li></ul>' );
+		$processor->next_tag( 'li' );
+		$processor->set_bookmark( 'bookmark' );
 
 		for ( $i = 0; $i < WP_HTML_Tag_Processor::MAX_SEEK_OPS; $i++ ) {
-			$this->assertTrue( $p->seek( 'bookmark' ), 'Could not seek to the "bookmark"' );
+			$this->assertTrue( $processor->seek( 'bookmark' ), 'Could not seek to the "bookmark"' );
 		}
 
 		$this->setExpectedIncorrectUsage( 'WP_HTML_Tag_Processor::seek' );
-		$this->assertFalse( $p->seek( 'bookmark' ), "$i-th seek() to the bookmark succeeded, even though it should exceed the allowed limit" );
+		$this->assertFalse( $processor->seek( 'bookmark' ), "$i-th seek() to the bookmark succeeded, even though it should exceed the allowed limit" );
+	}
+
+	/**
+	 * Ensures that it's possible to seek to an earlier location in a document even
+	 * after reaching the end of a document, when most functionality shuts down.
+	 *
+	 * @ticket 60428
+	 *
+	 * @dataProvider data_incomplete_html_with_target_nodes_for_seeking
+	 *
+	 * @param string $html_with_target_element HTML string containing a tag with a `target` attribute.
+	 */
+	public function test_can_seek_after_document_ends( $html_with_target_element ) {
+		$processor = new WP_HTML_Tag_Processor( $html_with_target_element );
+
+		$sought_tag_name = null;
+		while ( $processor->next_tag() ) {
+			if ( null !== $processor->get_attribute( 'target' ) ) {
+				$processor->set_bookmark( 'target' );
+				$sought_tag_name = $processor->get_tag();
+			}
+		}
+
+		$this->assertTrue(
+			$processor->seek( 'target' ),
+			'Should have been able to seek to the target bookmark after reaching the end of the document.'
+		);
+
+		$this->assertSame(
+			$sought_tag_name,
+			$processor->get_tag(),
+			"Should have found original target node instead of {$processor->get_tag()}."
+		);
+	}
+
+	/**
+	 * Data provider.
+	 *
+	 * @return array[].
+	 */
+	public static function data_incomplete_html_with_target_nodes_for_seeking() {
+		return array(
+			'Compete document'    => array( '<div><img target></div>' ),
+			'Incomplete document' => array( '<div><img target></div' ),
+		);
 	}
 }
diff --git a/tests/html-api/wpHtmlTagProcessor-token-scanning.php b/tests/html-api/wpHtmlTagProcessor-token-scanning.php
new file mode 100644
index 0000000000..4f1e1dab24
--- /dev/null
+++ b/tests/html-api/wpHtmlTagProcessor-token-scanning.php
@@ -0,0 +1,772 @@
+<?php
+/**
+ * Unit tests covering WP_HTML_Tag_Processor token-scanning functionality.
+ *
+ * @package WordPress
+ * @subpackage HTML-API
+ *
+ * @since 6.5.0
+ *
+ * @group html-api
+ *
+ * @coversDefaultClass WP_HTML_Tag_Processor
+ */
+class Tests_HtmlApi_WpHtmlProcessor_Token_Scanning extends WP_UnitTestCase {
+	/**
+	 * Ensures that scanning finishes in a complete form when the document is empty.
+	 *
+	 * @ticket 60170
+	 *
+	 * @since 6.5.0
+	 *
+	 * @covers WP_HTML_Tag_Processor::next_token
+	 */
+	public function test_completes_empty_document() {
+		$processor = new WP_HTML_Tag_Processor( '' );
+
+		$this->assertFalse(
+			$processor->next_token(),
+			"Should not have found any tokens but found {$processor->get_token_type()}."
+		);
+	}
+
+	/**
+	 * Ensures that normative text nodes are properly parsed.
+	 *
+	 * @ticket 60170
+	 *
+	 * @since 6.5.0
+	 *
+	 * @covers WP_HTML_Tag_Processor::next_token
+	 */
+	public function test_basic_assertion_text_node() {
+		$processor = new WP_HTML_Tag_Processor( 'Hello, World!' );
+		$processor->next_token();
+
+		$this->assertSame(
+			'#text',
+			$processor->get_token_type(),
+			"Should have found #text token type but found {$processor->get_token_type()} instead."
+		);
+
+		$this->assertSame(
+			'Hello, World!',
+			$processor->get_modifiable_text(),
+			'Found incorrect modifiable text.'
+		);
+	}
+
+	/**
+	 * Ensures that normative Elements are properly parsed.
+	 *
+	 * @ticket 60170
+	 *
+	 * @since 6.5.0
+	 *
+	 * @covers WP_HTML_Tag_Processor::next_token
+	 */
+	public function test_basic_assertion_element() {
+		$processor = new WP_HTML_Tag_Processor( '<div id="test" inert>Hello, World!</div>' );
+		$processor->next_token();
+
+		$this->assertSame(
+			'DIV',
+			$processor->get_token_name(),
+			"Should have found DIV tag name but found {$processor->get_token_name()} instead."
+		);
+
+		$this->assertSame(
+			'test',
+			$processor->get_attribute( 'id' ),
+			"Should have found id attribute value 'test' but found {$processor->get_attribute( 'id' )} instead."
+		);
+
+		$this->assertTrue(
+			$processor->get_attribute( 'inert' ),
+			"Should have found boolean attribute 'inert' but didn't."
+		);
+
+		$attributes     = $processor->get_attribute_names_with_prefix( '' );
+		$attribute_list = array_map( 'Tests_HtmlApi_WpHtmlProcessor_Token_Scanning::quoted', $attributes );
+		$this->assertSame(
+			array( 'id', 'inert' ),
+			$attributes,
+			'Should have found only two attributes but found ' . implode( ', ', $attribute_list ) . ' instead.'
+		);
+
+		$this->assertSame(
+			'',
+			$processor->get_modifiable_text(),
+			"Should have found empty modifiable text but found '{$processor->get_modifiable_text()}' instead."
+		);
+	}
+
+	/**
+	 * Ensures that normative SCRIPT elements are properly parsed.
+	 *
+	 * @ticket 60170
+	 *
+	 * @since 6.5.0
+	 *
+	 * @covers WP_HTML_Tag_Processor::next_token
+	 */
+	public function test_basic_assertion_script_element() {
+		$processor = new WP_HTML_Tag_Processor( '<script type="module">console.log( "Hello, World!" );</script>' );
+		$processor->next_token();
+
+		$this->assertSame(
+			'SCRIPT',
+			$processor->get_token_name(),
+			"Should have found SCRIPT tag name but found {$processor->get_token_name()} instead."
+		);
+
+		$this->assertSame(
+			'module',
+			$processor->get_attribute( 'type' ),
+			"Should have found type attribute value 'module' but found {$processor->get_attribute( 'type' )} instead."
+		);
+
+		$attributes     = $processor->get_attribute_names_with_prefix( '' );
+		$attribute_list = array_map( 'Tests_HtmlApi_WpHtmlProcessor_Token_Scanning::quoted', $attributes );
+		$this->assertSame(
+			array( 'type' ),
+			$attributes,
+			"Should have found single 'type' attribute but found " . implode( ', ', $attribute_list ) . ' instead.'
+		);
+
+		$this->assertSame(
+			'console.log( "Hello, World!" );',
+			$processor->get_modifiable_text(),
+			'Found incorrect modifiable text.'
+		);
+	}
+
+	/**
+	 * Ensures that normative TEXTAREA elements are properly parsed.
+	 *
+	 * @ticket 60170
+	 *
+	 * @since 6.5.0
+	 *
+	 * @covers WP_HTML_Tag_Processor::next_token
+	 */
+	public function test_basic_assertion_textarea_element() {
+		$processor = new WP_HTML_Tag_Processor(
+			<<<HTML
+<textarea rows=30 cols="80">
+Is <HTML> &gt; XHTML?
+</textarea>
+HTML
+		);
+		$processor->next_token();
+
+		$this->assertSame(
+			'TEXTAREA',
+			$processor->get_token_name(),
+			"Should have found TEXTAREA tag name but found {$processor->get_token_name()} instead."
+		);
+
+		$this->assertSame(
+			'30',
+			$processor->get_attribute( 'rows' ),
+			"Should have found rows attribute value 'module' but found {$processor->get_attribute( 'rows' )} instead."
+		);
+
+		$this->assertSame(
+			'80',
+			$processor->get_attribute( 'cols' ),
+			"Should have found cols attribute value 'module' but found {$processor->get_attribute( 'cols' )} instead."
+		);
+
+		$attributes     = $processor->get_attribute_names_with_prefix( '' );
+		$attribute_list = array_map( 'Tests_HtmlApi_WpHtmlProcessor_Token_Scanning::quoted', $attributes );
+		$this->assertSame(
+			array( 'rows', 'cols' ),
+			$attributes,
+			'Should have found only two attributes but found ' . implode( ', ', $attribute_list ) . ' instead.'
+		);
+
+		// Note that the leading newline should be removed from the TEXTAREA contents.
+		$this->assertSame(
+			"Is <HTML> > XHTML?\n",
+			$processor->get_modifiable_text(),
+			'Found incorrect modifiable text.'
+		);
+	}
+
+	/**
+	 * Ensures that normative TITLE elements are properly parsed.
+	 *
+	 * @ticket 60170
+	 *
+	 * @since 6.5.0
+	 *
+	 * @covers WP_HTML_Tag_Processor::next_token
+	 */
+	public function test_basic_assertion_title_element() {
+		$processor = new WP_HTML_Tag_Processor(
+			<<<HTML
+<title class="multi-line-title">
+Is <HTML> &gt; XHTML?
+</title>
+HTML
+		);
+		$processor->next_token();
+
+		$this->assertSame(
+			'TITLE',
+			$processor->get_token_name(),
+			"Should have found TITLE tag name but found {$processor->get_token_name()} instead."
+		);
+
+		$this->assertSame(
+			'multi-line-title',
+			$processor->get_attribute( 'class' ),
+			"Should have found class attribute value 'multi-line-title' but found {$processor->get_attribute( 'rows' )} instead."
+		);
+
+		$attributes     = $processor->get_attribute_names_with_prefix( '' );
+		$attribute_list = array_map( 'Tests_HtmlApi_WpHtmlProcessor_Token_Scanning::quoted', $attributes );
+		$this->assertSame(
+			array( 'class' ),
+			$attributes,
+			'Should have found only one attribute but found ' . implode( ', ', $attribute_list ) . ' instead.'
+		);
+
+		$this->assertSame(
+			"\nIs <HTML> > XHTML?\n",
+			$processor->get_modifiable_text(),
+			'Found incorrect modifiable text.'
+		);
+	}
+
+	/**
+	 * Ensures that normative RAWTEXT elements are properly parsed.
+	 *
+	 * @ticket 60170
+	 *
+	 * @since 6.5.0
+	 *
+	 * @covers WP_HTML_Tag_Processor::next_token
+	 *
+	 * @dataProvider data_rawtext_elements
+	 *
+	 * @param string $tag_name The name of the RAWTEXT tag to test.
+	 */
+	public function test_basic_assertion_rawtext_elements( $tag_name ) {
+		$processor = new WP_HTML_Tag_Processor(
+			<<<HTML
+<{$tag_name} class="multi-line-title">
+Is <HTML> &gt; XHTML?
+</{$tag_name}>
+HTML
+		);
+		$processor->next_token();
+
+		$this->assertSame(
+			$tag_name,
+			$processor->get_token_name(),
+			"Should have found {$tag_name} tag name but found {$processor->get_token_name()} instead."
+		);
+
+		$this->assertSame(
+			'multi-line-title',
+			$processor->get_attribute( 'class' ),
+			"Should have found class attribute value 'multi-line-title' but found {$processor->get_attribute( 'rows' )} instead."
+		);
+
+		$attributes     = $processor->get_attribute_names_with_prefix( '' );
+		$attribute_list = array_map( 'Tests_HtmlApi_WpHtmlProcessor_Token_Scanning::quoted', $attributes );
+		$this->assertSame(
+			array( 'class' ),
+			$attributes,
+			'Should have found only one attribute but found ' . implode( ', ', $attribute_list ) . ' instead.'
+		);
+
+		$this->assertSame(
+			"\nIs <HTML> &gt; XHTML?\n",
+			$processor->get_modifiable_text(),
+			'Found incorrect modifiable text.'
+		);
+	}
+
+	/**
+	 * Data provider.
+	 *
+	 * @return array[].
+	 */
+	public static function data_rawtext_elements() {
+		return array(
+			'IFRAME'   => array( 'IFRAME' ),
+			'NOEMBED'  => array( 'NOEMBED' ),
+			'NOFRAMES' => array( 'NOFRAMES' ),
+			'STYLE'    => array( 'STYLE' ),
+			'XMP'      => array( 'XMP' ),
+		);
+	}
+
+	/**
+	 * Ensures that normative CDATA sections are properly parsed.
+	 *
+	 * @ticket 60170
+	 *
+	 * @since 6.5.0
+	 *
+	 * @covers WP_HTML_Tag_Processor::next_token
+	 */
+	public function test_basic_assertion_cdata_section() {
+		$processor = new WP_HTML_Tag_Processor( '<![CDATA[this is a comment]]>' );
+		$processor->next_token();
+
+		$this->assertSame(
+			'#comment',
+			$processor->get_token_name(),
+			"Should have found comment token but found {$processor->get_token_name()} instead."
+		);
+
+		$this->assertSame(
+			WP_HTML_Processor::COMMENT_AS_CDATA_LOOKALIKE,
+			$processor->get_comment_type(),
+			'Should have detected a CDATA-like invalid comment.'
+		);
+
+		$this->assertNull(
+			$processor->get_tag(),
+			'Should not have been able to query tag name on non-element token.'
+		);
+
+		$this->assertNull(
+			$processor->get_attribute( 'type' ),
+			'Should not have been able to query attributes on non-element token.'
+		);
+
+		$this->assertSame(
+			'this is a comment',
+			$processor->get_modifiable_text(),
+			'Found incorrect modifiable text.'
+		);
+	}
+
+	/**
+	 * Ensures that normative CDATA sections are properly parsed.
+	 *
+	 * @ticket 60406
+	 *
+	 * @since 6.5.0
+	 *
+	 * @covers WP_HTML_Tag_Processor::next_token
+	 */
+	public function test_cdata_comment_with_incorrect_closer() {
+		$processor = new WP_HTML_Tag_Processor( '<![CDATA[this is missing a closing square bracket]>' );
+		$processor->next_token();
+
+		$this->assertSame(
+			'#comment',
+			$processor->get_token_name(),
+			"Should have found comment token but found {$processor->get_token_name()} instead."
+		);
+
+		$this->assertSame(
+			WP_HTML_Processor::COMMENT_AS_INVALID_HTML,
+			$processor->get_comment_type(),
+			'Should have detected invalid HTML comment.'
+		);
+
+		$this->assertSame(
+			'[CDATA[this is missing a closing square bracket]',
+			$processor->get_modifiable_text(),
+			'Found incorrect modifiable text.'
+		);
+	}
+
+	/**
+	 * Ensures that abruptly-closed CDATA sections are properly parsed as comments.
+	 *
+	 * @ticket 60170
+	 *
+	 * @since 6.5.0
+	 *
+	 * @covers WP_HTML_Tag_Processor::next_token
+	 */
+	public function test_basic_assertion_abruptly_closed_cdata_section() {
+		$processor = new WP_HTML_Tag_Processor( '<![CDATA[this is > a comment]]>' );
+		$processor->next_token();
+
+		$this->assertSame(
+			'#comment',
+			$processor->get_token_name(),
+			"Should have found a bogus comment but found {$processor->get_token_name()} instead."
+		);
+
+		$this->assertSame(
+			WP_HTML_Processor::COMMENT_AS_INVALID_HTML,
+			$processor->get_comment_type(),
+			'Should have detected invalid HTML comment.'
+		);
+
+		$this->assertNull(
+			$processor->get_tag(),
+			'Should not have been able to query tag name on non-element token.'
+		);
+
+		$this->assertNull(
+			$processor->get_attribute( 'type' ),
+			'Should not have been able to query attributes on non-element token.'
+		);
+
+		$this->assertSame(
+			'[CDATA[this is ',
+			$processor->get_modifiable_text(),
+			'Found incorrect modifiable text.'
+		);
+
+		$processor->next_token();
+
+		$this->assertSame(
+			'#text',
+			$processor->get_token_name(),
+			"Should have found text node but found {$processor->get_token_name()} instead."
+		);
+
+		$this->assertSame(
+			' a comment]]>',
+			$processor->get_modifiable_text(),
+			'Should have found remaining syntax from abruptly-closed CDATA section.'
+		);
+	}
+
+	/**
+	 * Ensures that normative Processing Instruction nodes are properly parsed.
+	 *
+	 * @ticket 60170
+	 *
+	 * @since 6.5.0
+	 *
+	 * @covers WP_HTML_Tag_Processor::next_token
+	 */
+	public function test_basic_assertion_processing_instruction() {
+		$processor = new WP_HTML_Tag_Processor( '<?wp-bit {"just": "kidding"}?>' );
+		$processor->next_token();
+
+		$this->assertSame(
+			'#comment',
+			$processor->get_token_name(),
+			"Should have found comment token but found {$processor->get_token_name()} instead."
+		);
+
+		$this->assertSame(
+			WP_HTML_Processor::COMMENT_AS_PI_NODE_LOOKALIKE,
+			$processor->get_comment_type(),
+			'Should have detected a Processing Instruction-like invalid comment.'
+		);
+
+		$this->assertSame(
+			'wp-bit',
+			$processor->get_tag(),
+			"Should have found PI target as tag name but found {$processor->get_tag()} instead."
+		);
+
+		$this->assertNull(
+			$processor->get_attribute( 'type' ),
+			'Should not have been able to query attributes on non-element token.'
+		);
+
+		$this->assertSame(
+			' {"just": "kidding"}',
+			$processor->get_modifiable_text(),
+			'Found incorrect modifiable text.'
+		);
+	}
+
+	/**
+	 * Ensures that abruptly-closed Processing Instruction nodes are properly parsed as comments.
+	 *
+	 * @ticket 60170
+	 *
+	 * @since 6.5.0
+	 *
+	 * @covers WP_HTML_Tag_Processor::next_token
+	 */
+	public function test_basic_assertion_abruptly_closed_processing_instruction() {
+		$processor = new WP_HTML_Tag_Processor( '<?version=">=5.3.6"?>' );
+		$processor->next_token();
+
+		$this->assertSame(
+			'#comment',
+			$processor->get_token_type(),
+			"Should have found bogus comment but found {$processor->get_token_type()} instead."
+		);
+
+		$this->assertSame(
+			'#comment',
+			$processor->get_token_name(),
+			"Should have found #comment as name but found {$processor->get_token_name()} instead."
+		);
+
+		$this->assertNull(
+			$processor->get_tag(),
+			'Should not have been able to query tag name on non-element token.'
+		);
+
+		$this->assertNull(
+			$processor->get_attribute( 'type' ),
+			'Should not have been able to query attributes on non-element token.'
+		);
+
+		$this->assertSame(
+			'version="',
+			$processor->get_modifiable_text(),
+			'Found incorrect modifiable text.'
+		);
+
+		$processor->next_token();
+
+		$this->assertSame(
+			'=5.3.6"?>',
+			$processor->get_modifiable_text(),
+			'Should have found remaining syntax from abruptly-closed Processing Instruction.'
+		);
+	}
+
+	/**
+	 * Ensures that common comments are properly parsed.
+	 *
+	 * @ticket 60170
+	 *
+	 * @since 6.5.0
+	 *
+	 * @dataProvider data_common_comments
+	 *
+	 * @covers WP_HTML_Tag_Processor::next_token
+	 *
+	 * @param string $html Contains the comment in full.
+	 * @param string $text Contains the appropriate modifiable text.
+	 */
+	public function test_basic_assertion_common_comments( $html, $text ) {
+		$processor = new WP_HTML_Tag_Processor( $html );
+		$processor->next_token();
+
+		$this->assertSame(
+			'#comment',
+			$processor->get_token_type(),
+			"Should have found comment but found {$processor->get_token_type()} instead."
+		);
+
+		$this->assertSame(
+			'#comment',
+			$processor->get_token_name(),
+			"Should have found #comment as name but found {$processor->get_token_name()} instead."
+		);
+
+		$this->assertNull(
+			$processor->get_tag(),
+			'Should not have been able to query tag name on non-element token.'
+		);
+
+		$this->assertNull(
+			$processor->get_attribute( 'type' ),
+			'Should not have been able to query attributes on non-element token.'
+		);
+
+		$this->assertSame(
+			$text,
+			$processor->get_modifiable_text(),
+			'Found incorrect modifiable text.'
+		);
+	}
+
+	/**
+	 * Data provider.
+	 *
+	 * @return array[].
+	 */
+	public static function data_common_comments() {
+		return array(
+			'Shortest comment'        => array( '<!-->', '' ),
+			'Short comment'           => array( '<!--->', '' ),
+			'Short comment w/o text'  => array( '<!---->', '' ),
+			'Short comment with text' => array( '<!----->', '-' ),
+			'PI node without target'  => array( '<? missing?>', ' missing?' ),
+			'Invalid PI node'         => array( '<?/missing/>', '/missing/' ),
+			'Invalid ! directive'     => array( '<!something else>', 'something else' ),
+		);
+	}
+
+	/**
+	 * Ensures that normative HTML comments are properly parsed.
+	 *
+	 * @ticket 60170
+	 *
+	 * @since 6.5.0
+	 *
+	 * @covers WP_HTML_Tag_Processor::next_token
+	 */
+	public function test_basic_assertion_html_comment() {
+		$processor = new WP_HTML_Tag_Processor( '<!-- wp:paragraph -->' );
+		$processor->next_token();
+
+		$this->assertSame(
+			'#comment',
+			$processor->get_token_type(),
+			"Should have found comment but found {$processor->get_token_type()} instead."
+		);
+
+		$this->assertSame(
+			'#comment',
+			$processor->get_token_name(),
+			"Should have found #comment as name but found {$processor->get_token_name()} instead."
+		);
+
+		$this->assertNull(
+			$processor->get_tag(),
+			'Should not have been able to query tag name on non-element token.'
+		);
+
+		$this->assertNull(
+			$processor->get_attribute( 'type' ),
+			'Should not have been able to query attributes on non-element token.'
+		);
+
+		$this->assertSame(
+			' wp:paragraph ',
+			$processor->get_modifiable_text(),
+			'Found incorrect modifiable text.'
+		);
+	}
+
+	/**
+	 * Ensures that normative DOCTYPE elements are properly parsed.
+	 *
+	 * @ticket 60170
+	 *
+	 * @since 6.5.0
+	 *
+	 * @covers WP_HTML_Tag_Processor::next_token
+	 */
+	public function test_basic_assertion_doctype() {
+		$processor = new WP_HTML_Tag_Processor( '<!DOCTYPE html>' );
+		$processor->next_token();
+
+		$this->assertSame(
+			'#doctype',
+			$processor->get_token_type(),
+			"Should have found DOCTYPE but found {$processor->get_token_type()} instead."
+		);
+
+		$this->assertSame(
+			'html',
+			$processor->get_token_name(),
+			"Should have found 'html' as name but found {$processor->get_token_name()} instead."
+		);
+
+		$this->assertNull(
+			$processor->get_tag(),
+			'Should not have been able to query tag name on non-element token.'
+		);
+
+		$this->assertNull(
+			$processor->get_attribute( 'type' ),
+			'Should not have been able to query attributes on non-element token.'
+		);
+
+		$this->assertSame(
+			' html',
+			$processor->get_modifiable_text(),
+			'Found incorrect modifiable text.'
+		);
+	}
+
+	/**
+	 * Ensures that normative presumptuous tag closers (empty closers) are properly parsed.
+	 *
+	 * @ticket 60170
+	 *
+	 * @since 6.5.0
+	 *
+	 * @covers WP_HTML_Tag_Processor::next_token
+	 */
+	public function test_basic_assertion_presumptuous_tag() {
+		$processor = new WP_HTML_Tag_Processor( '</>' );
+		$processor->next_token();
+
+		$this->assertSame(
+			'#presumptuous-tag',
+			$processor->get_token_type(),
+			"Should have found presumptuous tag but found {$processor->get_token_type()} instead."
+		);
+
+		$this->assertSame(
+			'#presumptuous-tag',
+			$processor->get_token_name(),
+			"Should have found #presumptuous-tag as name but found {$processor->get_token_name()} instead."
+		);
+
+		$this->assertNull(
+			$processor->get_tag(),
+			'Should not have been able to query tag name on non-element token.'
+		);
+
+		$this->assertNull(
+			$processor->get_attribute( 'type' ),
+			'Should not have been able to query attributes on non-element token.'
+		);
+
+		$this->assertSame(
+			'',
+			$processor->get_modifiable_text(),
+			'Found incorrect modifiable text.'
+		);
+	}
+
+	/**
+	 * Ensures that normative funky comments are properly parsed.
+	 *
+	 * @ticket 60170
+	 *
+	 * @since 6.5.0
+	 *
+	 * @covers WP_HTML_Tag_Processor::next_token
+	 */
+	public function test_basic_assertion_funky_comment() {
+		$processor = new WP_HTML_Tag_Processor( '</%url>' );
+		$processor->next_token();
+
+		$this->assertSame(
+			'#funky-comment',
+			$processor->get_token_type(),
+			"Should have found funky comment but found {$processor->get_token_type()} instead."
+		);
+
+		$this->assertSame(
+			'#funky-comment',
+			$processor->get_token_name(),
+			"Should have found #funky-comment as name but found {$processor->get_token_name()} instead."
+		);
+
+		$this->assertNull(
+			$processor->get_tag(),
+			'Should not have been able to query tag name on non-element token.'
+		);
+
+		$this->assertNull(
+			$processor->get_attribute( 'type' ),
+			'Should not have been able to query attributes on non-element token.'
+		);
+
+		$this->assertSame(
+			'%url',
+			$processor->get_modifiable_text(),
+			'Found incorrect modifiable text.'
+		);
+	}
+
+	/**
+	 * Test helper that wraps a string in double quotes.
+	 *
+	 * @param string $s The string to wrap in double-quotes.
+	 * @return string The string wrapped in double-quotes.
+	 */
+	private static function quoted( $s ) {
+		return "\"$s\"";
+	}
+}
diff --git a/tests/html-api/wpHtmlTagProcessor.php b/tests/html-api/wpHtmlTagProcessor.php
index 4469f90c4f..824630b335 100644
--- a/tests/html-api/wpHtmlTagProcessor.php
+++ b/tests/html-api/wpHtmlTagProcessor.php
@@ -22,9 +22,9 @@ class Tests_HtmlApi_WpHtmlTagProcessor extends WP_UnitTestCase {
 	 * @covers WP_HTML_Tag_Processor::get_tag
 	 */
 	public function test_get_tag_returns_null_before_finding_tags() {
-		$p = new WP_HTML_Tag_Processor( '<div>Test</div>' );
+		$processor = new WP_HTML_Tag_Processor( '<div>Test</div>' );
 
-		$this->assertNull( $p->get_tag(), 'Calling get_tag() without selecting a tag did not return null' );
+		$this->assertNull( $processor->get_tag(), 'Calling get_tag() without selecting a tag did not return null' );
 	}
 
 	/**
@@ -33,10 +33,10 @@ class Tests_HtmlApi_WpHtmlTagProcessor extends WP_UnitTestCase {
 	 * @covers WP_HTML_Tag_Processor::get_tag
 	 */
 	public function test_get_tag_returns_null_when_not_in_open_tag() {
-		$p = new WP_HTML_Tag_Processor( '<div>Test</div>' );
+		$processor = new WP_HTML_Tag_Processor( '<div>Test</div>' );
 
-		$this->assertFalse( $p->next_tag( 'p' ), 'Querying a non-existing tag did not return false' );
-		$this->assertNull( $p->get_tag(), 'Accessing a non-existing tag did not return null' );
+		$this->assertFalse( $processor->next_tag( 'p' ), 'Querying a non-existing tag did not return false' );
+		$this->assertNull( $processor->get_tag(), 'Accessing a non-existing tag did not return null' );
 	}
 
 	/**
@@ -45,10 +45,10 @@ class Tests_HtmlApi_WpHtmlTagProcessor extends WP_UnitTestCase {
 	 * @covers WP_HTML_Tag_Processor::get_tag
 	 */
 	public function test_get_tag_returns_open_tag_name() {
-		$p = new WP_HTML_Tag_Processor( '<div>Test</div>' );
+		$processor = new WP_HTML_Tag_Processor( '<div>Test</div>' );
 
-		$this->assertTrue( $p->next_tag( 'div' ), 'Querying an existing tag did not return true' );
-		$this->assertSame( 'DIV', $p->get_tag(), 'Accessing an existing tag name did not return "div"' );
+		$this->assertTrue( $processor->next_tag( 'div' ), 'Querying an existing tag did not return true' );
+		$this->assertSame( 'DIV', $processor->get_tag(), 'Accessing an existing tag name did not return "div"' );
 	}
 
 	/**
@@ -62,13 +62,13 @@ class Tests_HtmlApi_WpHtmlTagProcessor extends WP_UnitTestCase {
 	 * @param bool $flag_is_set Whether the input HTML's first tag contains the self-closing flag.
 	 */
 	public function test_has_self_closing_flag_matches_input_html( $html, $flag_is_set ) {
-		$p = new WP_HTML_Tag_Processor( $html );
-		$p->next_tag( array( 'tag_closers' => 'visit' ) );
+		$processor = new WP_HTML_Tag_Processor( $html );
+		$processor->next_tag( array( 'tag_closers' => 'visit' ) );
 
 		if ( $flag_is_set ) {
-			$this->assertTrue( $p->has_self_closing_flag(), 'Did not find the self-closing tag when it was present.' );
+			$this->assertTrue( $processor->has_self_closing_flag(), 'Did not find the self-closing tag when it was present.' );
 		} else {
-			$this->assertFalse( $p->has_self_closing_flag(), 'Found the self-closing tag when it was absent.' );
+			$this->assertFalse( $processor->has_self_closing_flag(), 'Found the self-closing tag when it was absent.' );
 		}
 	}
 
@@ -77,7 +77,7 @@ class Tests_HtmlApi_WpHtmlTagProcessor extends WP_UnitTestCase {
 	 *
 	 * @return array[]
 	 */
-	public function data_has_self_closing_flag() {
+	public static function data_has_self_closing_flag() {
 		return array(
 			// These should not have a self-closer, and will leave an element un-closed if it's assumed they are self-closing.
 			'Self-closing flag on non-void HTML element' => array( '<div />', true ),
@@ -107,9 +107,9 @@ class Tests_HtmlApi_WpHtmlTagProcessor extends WP_UnitTestCase {
 	 * @covers WP_HTML_Tag_Processor::get_attribute
 	 */
 	public function test_get_attribute_returns_null_before_finding_tags() {
-		$p = new WP_HTML_Tag_Processor( '<div class="test">Test</div>' );
+		$processor = new WP_HTML_Tag_Processor( '<div class="test">Test</div>' );
 
-		$this->assertNull( $p->get_attribute( 'class' ), 'Accessing an attribute without selecting a tag did not return null' );
+		$this->assertNull( $processor->get_attribute( 'class' ), 'Accessing an attribute without selecting a tag did not return null' );
 	}
 
 	/**
@@ -118,10 +118,10 @@ class Tests_HtmlApi_WpHtmlTagProcessor extends WP_UnitTestCase {
 	 * @covers WP_HTML_Tag_Processor::get_attribute
 	 */
 	public function test_get_attribute_returns_null_when_not_in_open_tag() {
-		$p = new WP_HTML_Tag_Processor( '<div class="test">Test</div>' );
+		$processor = new WP_HTML_Tag_Processor( '<div class="test">Test</div>' );
 
-		$this->assertFalse( $p->next_tag( 'p' ), 'Querying a non-existing tag did not return false' );
-		$this->assertNull( $p->get_attribute( 'class' ), 'Accessing an attribute of a non-existing tag did not return null' );
+		$this->assertFalse( $processor->next_tag( 'p' ), 'Querying a non-existing tag did not return false' );
+		$this->assertNull( $processor->get_attribute( 'class' ), 'Accessing an attribute of a non-existing tag did not return null' );
 	}
 
 	/**
@@ -130,11 +130,11 @@ class Tests_HtmlApi_WpHtmlTagProcessor extends WP_UnitTestCase {
 	 * @covers WP_HTML_Tag_Processor::get_attribute
 	 */
 	public function test_get_attribute_returns_null_when_in_closing_tag() {
-		$p = new WP_HTML_Tag_Processor( '<div class="test">Test</div>' );
+		$processor = new WP_HTML_Tag_Processor( '<div class="test">Test</div>' );
 
-		$this->assertTrue( $p->next_tag( 'div' ), 'Querying an existing tag did not return true' );
-		$this->assertTrue( $p->next_tag( array( 'tag_closers' => 'visit' ) ), 'Querying an existing closing tag did not return true' );
-		$this->assertNull( $p->get_attribute( 'class' ), 'Accessing an attribute of a closing tag did not return null' );
+		$this->assertTrue( $processor->next_tag( 'div' ), 'Querying an existing tag did not return true' );
+		$this->assertTrue( $processor->next_tag( array( 'tag_closers' => 'visit' ) ), 'Querying an existing closing tag did not return true' );
+		$this->assertNull( $processor->get_attribute( 'class' ), 'Accessing an attribute of a closing tag did not return null' );
 	}
 
 	/**
@@ -143,10 +143,10 @@ class Tests_HtmlApi_WpHtmlTagProcessor extends WP_UnitTestCase {
 	 * @covers WP_HTML_Tag_Processor::get_attribute
 	 */
 	public function test_get_attribute_returns_null_when_attribute_missing() {
-		$p = new WP_HTML_Tag_Processor( '<div class="test">Test</div>' );
+		$processor = new WP_HTML_Tag_Processor( '<div class="test">Test</div>' );
 
-		$this->assertTrue( $p->next_tag( 'div' ), 'Querying an existing tag did not return true' );
-		$this->assertNull( $p->get_attribute( 'test-id' ), 'Accessing a non-existing attribute did not return null' );
+		$this->assertTrue( $processor->next_tag( 'div' ), 'Querying an existing tag did not return true' );
+		$this->assertNull( $processor->get_attribute( 'test-id' ), 'Accessing a non-existing attribute did not return null' );
 	}
 
 	/**
@@ -155,10 +155,10 @@ class Tests_HtmlApi_WpHtmlTagProcessor extends WP_UnitTestCase {
 	 * @covers WP_HTML_Tag_Processor::get_attribute
 	 */
 	public function test_get_attribute_returns_attribute_value() {
-		$p = new WP_HTML_Tag_Processor( '<div class="test">Test</div>' );
+		$processor = new WP_HTML_Tag_Processor( '<div class="test">Test</div>' );
 
-		$this->assertTrue( $p->next_tag( 'div' ), 'Querying an existing tag did not return true' );
-		$this->assertSame( 'test', $p->get_attribute( 'class' ), 'Accessing a class="test" attribute value did not return "test"' );
+		$this->assertTrue( $processor->next_tag( 'div' ), 'Querying an existing tag did not return true' );
+		$this->assertSame( 'test', $processor->get_attribute( 'class' ), 'Accessing a class="test" attribute value did not return "test"' );
 	}
 
 	/**
@@ -167,10 +167,10 @@ class Tests_HtmlApi_WpHtmlTagProcessor extends WP_UnitTestCase {
 	 * @covers WP_HTML_Tag_Processor::get_attribute
 	 */
 	public function test_get_attribute_returns_true_for_boolean_attribute() {
-		$p = new WP_HTML_Tag_Processor( '<div enabled class="test">Test</div>' );
+		$processor = new WP_HTML_Tag_Processor( '<div enabled class="test">Test</div>' );
 
-		$this->assertTrue( $p->next_tag( array( 'class_name' => 'test' ) ), 'Querying an existing tag did not return true' );
-		$this->assertTrue( $p->get_attribute( 'enabled' ), 'Accessing a boolean "enabled" attribute value did not return true' );
+		$this->assertTrue( $processor->next_tag( array( 'class_name' => 'test' ) ), 'Querying an existing tag did not return true' );
+		$this->assertTrue( $processor->get_attribute( 'enabled' ), 'Accessing a boolean "enabled" attribute value did not return true' );
 	}
 
 	/**
@@ -179,12 +179,12 @@ class Tests_HtmlApi_WpHtmlTagProcessor extends WP_UnitTestCase {
 	 * @covers WP_HTML_Tag_Processor::get_attribute
 	 */
 	public function test_get_attribute_returns_string_for_truthy_attributes() {
-		$p = new WP_HTML_Tag_Processor( '<div enabled=enabled checked=1 hidden="true" class="test">Test</div>' );
+		$processor = new WP_HTML_Tag_Processor( '<div enabled=enabled checked=1 hidden="true" class="test">Test</div>' );
 
-		$this->assertTrue( $p->next_tag(), 'Querying an existing tag did not return true' );
-		$this->assertSame( 'enabled', $p->get_attribute( 'enabled' ), 'Accessing a boolean "enabled" attribute value did not return true' );
-		$this->assertSame( '1', $p->get_attribute( 'checked' ), 'Accessing a checked=1 attribute value did not return "1"' );
-		$this->assertSame( 'true', $p->get_attribute( 'hidden' ), 'Accessing a hidden="true" attribute value did not return "true"' );
+		$this->assertTrue( $processor->next_tag(), 'Querying an existing tag did not return true' );
+		$this->assertSame( 'enabled', $processor->get_attribute( 'enabled' ), 'Accessing a boolean "enabled" attribute value did not return true' );
+		$this->assertSame( '1', $processor->get_attribute( 'checked' ), 'Accessing a checked=1 attribute value did not return "1"' );
+		$this->assertSame( 'true', $processor->get_attribute( 'hidden' ), 'Accessing a hidden="true" attribute value did not return "true"' );
 	}
 
 	/**
@@ -193,10 +193,10 @@ class Tests_HtmlApi_WpHtmlTagProcessor extends WP_UnitTestCase {
 	 * @covers WP_HTML_Tag_Processor::get_attribute
 	 */
 	public function test_get_attribute_decodes_html_character_references() {
-		$p = new WP_HTML_Tag_Processor( '<div id="the &quot;grande&quot; is &lt; &#x033;&#50;oz&dagger;"></div>' );
-		$p->next_tag();
+		$processor = new WP_HTML_Tag_Processor( '<div id="the &quot;grande&quot; is &lt; &#x033;&#50;oz&dagger;"></div>' );
+		$processor->next_tag();
 
-		$this->assertSame( 'the "grande" is < 32oz†', $p->get_attribute( 'id' ), 'HTML Attribute value was returned without decoding character references' );
+		$this->assertSame( 'the "grande" is < 32oz†', $processor->get_attribute( 'id' ), 'HTML Attribute value was returned without decoding character references' );
 	}
 
 	/**
@@ -205,14 +205,14 @@ class Tests_HtmlApi_WpHtmlTagProcessor extends WP_UnitTestCase {
 	 * @covers WP_HTML_Tag_Processor::get_attribute
 	 */
 	public function test_attributes_parser_treats_slash_as_attribute_separator() {
-		$p = new WP_HTML_Tag_Processor( '<div a/b/c/d/e="test">Test</div>' );
+		$processor = new WP_HTML_Tag_Processor( '<div a/b/c/d/e="test">Test</div>' );
 
-		$this->assertTrue( $p->next_tag(), 'Querying an existing tag did not return true' );
-		$this->assertTrue( $p->get_attribute( 'a' ), 'Accessing an existing attribute did not return true' );
-		$this->assertTrue( $p->get_attribute( 'b' ), 'Accessing an existing attribute did not return true' );
-		$this->assertTrue( $p->get_attribute( 'c' ), 'Accessing an existing attribute did not return true' );
-		$this->assertTrue( $p->get_attribute( 'd' ), 'Accessing an existing attribute did not return true' );
-		$this->assertSame( 'test', $p->get_attribute( 'e' ), 'Accessing an existing e="test" did not return "test"' );
+		$this->assertTrue( $processor->next_tag(), 'Querying an existing tag did not return true' );
+		$this->assertTrue( $processor->get_attribute( 'a' ), 'Accessing an existing attribute did not return true' );
+		$this->assertTrue( $processor->get_attribute( 'b' ), 'Accessing an existing attribute did not return true' );
+		$this->assertTrue( $processor->get_attribute( 'c' ), 'Accessing an existing attribute did not return true' );
+		$this->assertTrue( $processor->get_attribute( 'd' ), 'Accessing an existing attribute did not return true' );
+		$this->assertSame( 'test', $processor->get_attribute( 'e' ), 'Accessing an existing e="test" did not return "test"' );
 	}
 
 	/**
@@ -225,12 +225,12 @@ class Tests_HtmlApi_WpHtmlTagProcessor extends WP_UnitTestCase {
 	 * @param string $attribute_name Name of data-enabled attribute with case variations.
 	 */
 	public function test_get_attribute_is_case_insensitive_for_attributes_with_values( $attribute_name ) {
-		$p = new WP_HTML_Tag_Processor( '<div DATA-enabled="true">Test</div>' );
-		$p->next_tag();
+		$processor = new WP_HTML_Tag_Processor( '<div DATA-enabled="true">Test</div>' );
+		$processor->next_tag();
 
 		$this->assertSame(
 			'true',
-			$p->get_attribute( $attribute_name ),
+			$processor->get_attribute( $attribute_name ),
 			'Accessing an attribute by a differently-cased name did not return its value'
 		);
 	}
@@ -245,11 +245,11 @@ class Tests_HtmlApi_WpHtmlTagProcessor extends WP_UnitTestCase {
 	 * @param string $attribute_name Name of data-enabled attribute with case variations.
 	 */
 	public function test_attributes_parser_is_case_insensitive_for_attributes_without_values( $attribute_name ) {
-		$p = new WP_HTML_Tag_Processor( '<div DATA-enabled>Test</div>' );
-		$p->next_tag();
+		$processor = new WP_HTML_Tag_Processor( '<div DATA-enabled>Test</div>' );
+		$processor->next_tag();
 
 		$this->assertTrue(
-			$p->get_attribute( $attribute_name ),
+			$processor->get_attribute( $attribute_name ),
 			'Accessing an attribute by a differently-cased name did not return its value'
 		);
 	}
@@ -259,7 +259,7 @@ class Tests_HtmlApi_WpHtmlTagProcessor extends WP_UnitTestCase {
 	 *
 	 * @return array[].
 	 */
-	public function data_attribute_name_case_variants() {
+	public static function data_attribute_name_case_variants() {
 		return array(
 			array( 'DATA-enabled' ),
 			array( 'data-enabled' ),
@@ -274,11 +274,11 @@ class Tests_HtmlApi_WpHtmlTagProcessor extends WP_UnitTestCase {
 	 * @covers WP_HTML_Tag_Processor::remove_attribute
 	 */
 	public function test_remove_attribute_is_case_insensitive() {
-		$p = new WP_HTML_Tag_Processor( '<div DATA-enabled="true">Test</div>' );
-		$p->next_tag();
-		$p->remove_attribute( 'data-enabled' );
+		$processor = new WP_HTML_Tag_Processor( '<div DATA-enabled="true">Test</div>' );
+		$processor->next_tag();
+		$processor->remove_attribute( 'data-enabled' );
 
-		$this->assertSame( '<div >Test</div>', $p->get_updated_html(), 'A case-insensitive remove_attribute call did not remove the attribute' );
+		$this->assertSame( '<div >Test</div>', $processor->get_updated_html(), 'A case-insensitive remove_attribute call did not remove the attribute' );
 	}
 
 	/**
@@ -287,11 +287,11 @@ class Tests_HtmlApi_WpHtmlTagProcessor extends WP_UnitTestCase {
 	 * @covers WP_HTML_Tag_Processor::set_attribute
 	 */
 	public function test_set_attribute_is_case_insensitive() {
-		$p = new WP_HTML_Tag_Processor( '<div DATA-enabled="true">Test</div>' );
-		$p->next_tag();
-		$p->set_attribute( 'data-enabled', 'abc' );
+		$processor = new WP_HTML_Tag_Processor( '<div DATA-enabled="true">Test</div>' );
+		$processor->next_tag();
+		$processor->set_attribute( 'data-enabled', 'abc' );
 
-		$this->assertSame( '<div data-enabled="abc">Test</div>', $p->get_updated_html(), 'A case-insensitive set_attribute call did not update the existing attribute' );
+		$this->assertSame( '<div data-enabled="abc">Test</div>', $processor->get_updated_html(), 'A case-insensitive set_attribute call did not update the existing attribute' );
 	}
 
 	/**
@@ -300,9 +300,9 @@ class Tests_HtmlApi_WpHtmlTagProcessor extends WP_UnitTestCase {
 	 * @covers WP_HTML_Tag_Processor::get_attribute_names_with_prefix
 	 */
 	public function test_get_attribute_names_with_prefix_returns_null_before_finding_tags() {
-		$p = new WP_HTML_Tag_Processor( '<div data-foo="bar">Test</div>' );
+		$processor = new WP_HTML_Tag_Processor( '<div data-foo="bar">Test</div>' );
 		$this->assertNull(
-			$p->get_attribute_names_with_prefix( 'data-' ),
+			$processor->get_attribute_names_with_prefix( 'data-' ),
 			'Accessing attributes by their prefix did not return null when no tag was selected'
 		);
 	}
@@ -313,9 +313,9 @@ class Tests_HtmlApi_WpHtmlTagProcessor extends WP_UnitTestCase {
 	 * @covers WP_HTML_Tag_Processor::get_attribute_names_with_prefix
 	 */
 	public function test_get_attribute_names_with_prefix_returns_null_when_not_in_open_tag() {
-		$p = new WP_HTML_Tag_Processor( '<div data-foo="bar">Test</div>' );
-		$p->next_tag( 'p' );
-		$this->assertNull( $p->get_attribute_names_with_prefix( 'data-' ), 'Accessing attributes of a non-existing tag did not return null' );
+		$processor = new WP_HTML_Tag_Processor( '<div data-foo="bar">Test</div>' );
+		$processor->next_tag( 'p' );
+		$this->assertNull( $processor->get_attribute_names_with_prefix( 'data-' ), 'Accessing attributes of a non-existing tag did not return null' );
 	}
 
 	/**
@@ -324,11 +324,11 @@ class Tests_HtmlApi_WpHtmlTagProcessor extends WP_UnitTestCase {
 	 * @covers WP_HTML_Tag_Processor::get_attribute_names_with_prefix
 	 */
 	public function test_get_attribute_names_with_prefix_returns_null_when_in_closing_tag() {
-		$p = new WP_HTML_Tag_Processor( '<div data-foo="bar">Test</div>' );
-		$p->next_tag( 'div' );
-		$p->next_tag( array( 'tag_closers' => 'visit' ) );
+		$processor = new WP_HTML_Tag_Processor( '<div data-foo="bar">Test</div>' );
+		$processor->next_tag( 'div' );
+		$processor->next_tag( array( 'tag_closers' => 'visit' ) );
 
-		$this->assertNull( $p->get_attribute_names_with_prefix( 'data-' ), 'Accessing attributes of a closing tag did not return null' );
+		$this->assertNull( $processor->get_attribute_names_with_prefix( 'data-' ), 'Accessing attributes of a closing tag did not return null' );
 	}
 
 	/**
@@ -337,10 +337,10 @@ class Tests_HtmlApi_WpHtmlTagProcessor extends WP_UnitTestCase {
 	 * @covers WP_HTML_Tag_Processor::get_attribute_names_with_prefix
 	 */
 	public function test_get_attribute_names_with_prefix_returns_empty_array_when_no_attributes_present() {
-		$p = new WP_HTML_Tag_Processor( '<div>Test</div>' );
-		$p->next_tag( 'div' );
+		$processor = new WP_HTML_Tag_Processor( '<div>Test</div>' );
+		$processor->next_tag( 'div' );
 
-		$this->assertSame( array(), $p->get_attribute_names_with_prefix( 'data-' ), 'Accessing the attributes on a tag without any did not return an empty array' );
+		$this->assertSame( array(), $processor->get_attribute_names_with_prefix( 'data-' ), 'Accessing the attributes on a tag without any did not return an empty array' );
 	}
 
 	/**
@@ -349,12 +349,12 @@ class Tests_HtmlApi_WpHtmlTagProcessor extends WP_UnitTestCase {
 	 * @covers WP_HTML_Tag_Processor::get_attribute_names_with_prefix
 	 */
 	public function test_get_attribute_names_with_prefix_returns_matching_attribute_names_in_lowercase() {
-		$p = new WP_HTML_Tag_Processor( '<div DATA-enabled class="test" data-test-ID="14">Test</div>' );
-		$p->next_tag();
+		$processor = new WP_HTML_Tag_Processor( '<div DATA-enabled class="test" data-test-ID="14">Test</div>' );
+		$processor->next_tag();
 
 		$this->assertSame(
 			array( 'data-enabled', 'data-test-id' ),
-			$p->get_attribute_names_with_prefix( 'data-' ),
+			$processor->get_attribute_names_with_prefix( 'data-' ),
 			'Accessing attributes by their prefix did not return their lowercase names'
 		);
 	}
@@ -365,18 +365,18 @@ class Tests_HtmlApi_WpHtmlTagProcessor extends WP_UnitTestCase {
 	 * @covers WP_HTML_Tag_Processor::get_attribute_names_with_prefix
 	 */
 	public function test_get_attribute_names_with_prefix_returns_attribute_added_by_set_attribute() {
-		$p = new WP_HTML_Tag_Processor( '<div data-foo="bar">Test</div>' );
-		$p->next_tag();
-		$p->set_attribute( 'data-test-id', '14' );
+		$processor = new WP_HTML_Tag_Processor( '<div data-foo="bar">Test</div>' );
+		$processor->next_tag();
+		$processor->set_attribute( 'data-test-id', '14' );
 
 		$this->assertSame(
 			'<div data-test-id="14" data-foo="bar">Test</div>',
-			$p->get_updated_html(),
+			$processor->get_updated_html(),
 			"Updated HTML doesn't include attribute added via set_attribute"
 		);
 		$this->assertSame(
 			array( 'data-test-id', 'data-foo' ),
-			$p->get_attribute_names_with_prefix( 'data-' ),
+			$processor->get_attribute_names_with_prefix( 'data-' ),
 			"Accessing attribute names doesn't find attribute added via set_attribute"
 		);
 	}
@@ -387,17 +387,17 @@ class Tests_HtmlApi_WpHtmlTagProcessor extends WP_UnitTestCase {
 	 * @covers WP_HTML_Tag_Processor::__toString
 	 */
 	public function test_to_string_returns_updated_html() {
-		$p = new WP_HTML_Tag_Processor( '<hr id="remove" /><div enabled class="test">Test</div><span id="span-id"></span>' );
-		$p->next_tag();
-		$p->remove_attribute( 'id' );
+		$processor = new WP_HTML_Tag_Processor( '<hr id="remove" /><div enabled class="test">Test</div><span id="span-id"></span>' );
+		$processor->next_tag();
+		$processor->remove_attribute( 'id' );
 
-		$p->next_tag();
-		$p->set_attribute( 'id', 'div-id-1' );
-		$p->add_class( 'new_class_1' );
+		$processor->next_tag();
+		$processor->set_attribute( 'id', 'div-id-1' );
+		$processor->add_class( 'new_class_1' );
 
 		$this->assertSame(
-			$p->get_updated_html(),
-			(string) $p,
+			$processor->get_updated_html(),
+			(string) $processor,
 			'get_updated_html() returned a different value than __toString()'
 		);
 	}
@@ -408,35 +408,35 @@ class Tests_HtmlApi_WpHtmlTagProcessor extends WP_UnitTestCase {
 	 * @covers WP_HTML_Tag_Processor::get_updated_html
 	 */
 	public function test_get_updated_html_applies_the_updates_so_far_and_keeps_the_processor_on_the_current_tag() {
-		$p = new WP_HTML_Tag_Processor( '<hr id="remove" /><div enabled class="test">Test</div><span id="span-id"></span>' );
-		$p->next_tag();
-		$p->remove_attribute( 'id' );
+		$processor = new WP_HTML_Tag_Processor( '<hr id="remove" /><div enabled class="test">Test</div><span id="span-id"></span>' );
+		$processor->next_tag();
+		$processor->remove_attribute( 'id' );
 
-		$p->next_tag();
-		$p->set_attribute( 'id', 'div-id-1' );
-		$p->add_class( 'new_class_1' );
+		$processor->next_tag();
+		$processor->set_attribute( 'id', 'div-id-1' );
+		$processor->add_class( 'new_class_1' );
 
 		$this->assertSame(
 			'<hr  /><div id="div-id-1" enabled class="test new_class_1">Test</div><span id="span-id"></span>',
-			$p->get_updated_html(),
+			$processor->get_updated_html(),
 			'Calling get_updated_html after updating the attributes of the second tag returned different HTML than expected'
 		);
 
-		$p->set_attribute( 'id', 'div-id-2' );
-		$p->add_class( 'new_class_2' );
+		$processor->set_attribute( 'id', 'div-id-2' );
+		$processor->add_class( 'new_class_2' );
 
 		$this->assertSame(
 			'<hr  /><div id="div-id-2" enabled class="test new_class_1 new_class_2">Test</div><span id="span-id"></span>',
-			$p->get_updated_html(),
+			$processor->get_updated_html(),
 			'Calling get_updated_html after updating the attributes of the second tag for the second time returned different HTML than expected'
 		);
 
-		$p->next_tag();
-		$p->remove_attribute( 'id' );
+		$processor->next_tag();
+		$processor->remove_attribute( 'id' );
 
 		$this->assertSame(
 			'<hr  /><div id="div-id-2" enabled class="test new_class_1 new_class_2">Test</div><span ></span>',
-			$p->get_updated_html(),
+			$processor->get_updated_html(),
 			'Calling get_updated_html after removing the id attribute of the third tag returned different HTML than expected'
 		);
 	}
@@ -447,11 +447,11 @@ class Tests_HtmlApi_WpHtmlTagProcessor extends WP_UnitTestCase {
 	 * @covers WP_HTML_Tag_Processor::get_updated_html
 	 */
 	public function test_get_updated_html_without_updating_any_attributes_returns_the_original_html() {
-		$p = new WP_HTML_Tag_Processor( self::HTML_SIMPLE );
+		$processor = new WP_HTML_Tag_Processor( self::HTML_SIMPLE );
 
 		$this->assertSame(
 			self::HTML_SIMPLE,
-			$p->get_updated_html(),
+			$processor->get_updated_html(),
 			'Casting WP_HTML_Tag_Processor to a string without performing any updates did not return the initial HTML snippet'
 		);
 	}
@@ -463,17 +463,17 @@ class Tests_HtmlApi_WpHtmlTagProcessor extends WP_UnitTestCase {
 	 * @ticket 58160
 	 */
 	public function test_get_updated_html_applies_updates_to_content_after_seeking_to_before_parsed_bytes() {
-		$p = new WP_HTML_Tag_Processor( '<div><img hidden></div>' );
+		$processor = new WP_HTML_Tag_Processor( '<div><img hidden></div>' );
 
-		$p->next_tag();
-		$p->set_attribute( 'wonky', true );
-		$p->next_tag();
-		$p->set_bookmark( 'here' );
+		$processor->next_tag();
+		$processor->set_attribute( 'wonky', true );
+		$processor->next_tag();
+		$processor->set_bookmark( 'here' );
 
-		$p->next_tag( array( 'tag_closers' => 'visit' ) );
-		$p->seek( 'here' );
+		$processor->next_tag( array( 'tag_closers' => 'visit' ) );
+		$processor->seek( 'here' );
 
-		$this->assertSame( '<div wonky><img hidden></div>', $p->get_updated_html() );
+		$this->assertSame( '<div wonky><img hidden></div>', $processor->get_updated_html() );
 	}
 
 	/**
@@ -482,9 +482,9 @@ class Tests_HtmlApi_WpHtmlTagProcessor extends WP_UnitTestCase {
 	 * @covers WP_HTML_Tag_Processor::next_tag
 	 */
 	public function test_next_tag_with_no_arguments_should_find_the_next_existing_tag() {
-		$p = new WP_HTML_Tag_Processor( self::HTML_SIMPLE );
+		$processor = new WP_HTML_Tag_Processor( self::HTML_SIMPLE );
 
-		$this->assertTrue( $p->next_tag(), 'Querying an existing tag did not return true' );
+		$this->assertTrue( $processor->next_tag(), 'Querying an existing tag did not return true' );
 	}
 
 	/**
@@ -493,9 +493,9 @@ class Tests_HtmlApi_WpHtmlTagProcessor extends WP_UnitTestCase {
 	 * @covers WP_HTML_Tag_Processor::next_tag
 	 */
 	public function test_next_tag_should_return_false_for_a_non_existing_tag() {
-		$p = new WP_HTML_Tag_Processor( self::HTML_SIMPLE );
+		$processor = new WP_HTML_Tag_Processor( self::HTML_SIMPLE );
 
-		$this->assertFalse( $p->next_tag( 'p' ), 'Querying a non-existing tag did not return false' );
+		$this->assertFalse( $processor->next_tag( 'p' ), 'Querying a non-existing tag did not return false' );
 	}
 
 	/**
@@ -504,9 +504,9 @@ class Tests_HtmlApi_WpHtmlTagProcessor extends WP_UnitTestCase {
 	 * @covers WP_HTML_Tag_Processor::next_tag
 	 */
 	public function test_next_tag_matches_decoded_class_names() {
-		$p = new WP_HTML_Tag_Processor( '<div class="&lt;egg&gt;">' );
+		$processor = new WP_HTML_Tag_Processor( '<div class="&lt;egg&gt;">' );
 
-		$this->assertTrue( $p->next_tag( array( 'class_name' => '<egg>' ) ), 'Failed to find tag with HTML-encoded class name.' );
+		$this->assertTrue( $processor->next_tag( array( 'class_name' => '<egg>' ) ), 'Failed to find tag with HTML-encoded class name.' );
 	}
 
 	/**
@@ -517,22 +517,22 @@ class Tests_HtmlApi_WpHtmlTagProcessor extends WP_UnitTestCase {
 	 * @covers WP_HTML_Tag_Processor::is_tag_closer
 	 */
 	public function test_next_tag_should_stop_on_closers_only_when_requested() {
-		$p = new WP_HTML_Tag_Processor( '<div><img /></div>' );
+		$processor = new WP_HTML_Tag_Processor( '<div><img /></div>' );
 
-		$this->assertTrue( $p->next_tag( array( 'tag_name' => 'div' ) ), 'Did not find desired tag opener' );
-		$this->assertFalse( $p->next_tag( array( 'tag_name' => 'div' ) ), 'Visited an unwanted tag, a tag closer' );
+		$this->assertTrue( $processor->next_tag( array( 'tag_name' => 'div' ) ), 'Did not find desired tag opener' );
+		$this->assertFalse( $processor->next_tag( array( 'tag_name' => 'div' ) ), 'Visited an unwanted tag, a tag closer' );
 
-		$p = new WP_HTML_Tag_Processor( '<div><img /></div>' );
-		$p->next_tag(
+		$processor = new WP_HTML_Tag_Processor( '<div><img /></div>' );
+		$processor->next_tag(
 			array(
 				'tag_name'    => 'div',
 				'tag_closers' => 'visit',
 			)
 		);
 
-		$this->assertFalse( $p->is_tag_closer(), 'Indicated a tag opener is a tag closer' );
+		$this->assertFalse( $processor->is_tag_closer(), 'Indicated a tag opener is a tag closer' );
 		$this->assertTrue(
-			$p->next_tag(
+			$processor->next_tag(
 				array(
 					'tag_name'    => 'div',
 					'tag_closers' => 'visit',
@@ -540,11 +540,11 @@ class Tests_HtmlApi_WpHtmlTagProcessor extends WP_UnitTestCase {
 			),
 			'Did not stop at desired tag closer'
 		);
-		$this->assertTrue( $p->is_tag_closer(), 'Indicated a tag closer is a tag opener' );
+		$this->assertTrue( $processor->is_tag_closer(), 'Indicated a tag closer is a tag opener' );
 
-		$p = new WP_HTML_Tag_Processor( '<div>' );
-		$this->assertTrue( $p->next_tag( array( 'tag_closers' => 'visit' ) ), "Did not find a tag opener when tag_closers was set to 'visit'" );
-		$this->assertFalse( $p->next_tag( array( 'tag_closers' => 'visit' ) ), "Found a closer where there wasn't one" );
+		$processor = new WP_HTML_Tag_Processor( '<div>' );
+		$this->assertTrue( $processor->next_tag( array( 'tag_closers' => 'visit' ) ), "Did not find a tag opener when tag_closers was set to 'visit'" );
+		$this->assertFalse( $processor->next_tag( array( 'tag_closers' => 'visit' ) ), "Found a closer where there wasn't one" );
 	}
 
 	/**
@@ -554,32 +554,38 @@ class Tests_HtmlApi_WpHtmlTagProcessor extends WP_UnitTestCase {
 	 * @covers WP_HTML_Tag_Processor::is_tag_closer
 	 */
 	public function test_next_tag_should_stop_on_rcdata_and_script_tag_closers_when_requested() {
-		$p = new WP_HTML_Tag_Processor( '<script>abc</script>' );
+		$processor = new WP_HTML_Tag_Processor( '<script>abc</script>' );
 
-		$p->next_tag();
-		$this->assertTrue( $p->next_tag( array( 'tag_closers' => 'visit' ) ), 'Did not find the </script> tag closer' );
-		$this->assertTrue( $p->is_tag_closer(), 'Indicated a <script> tag opener is a tag closer' );
+		$processor->next_tag();
+		$this->assertFalse(
+			$processor->next_tag( array( 'tag_closers' => 'visit' ) ),
+			'Should not have found closing SCRIPT tag when closing an opener.'
+		);
 
-		$p = new WP_HTML_Tag_Processor( 'abc</script>' );
-		$this->assertTrue( $p->next_tag( array( 'tag_closers' => 'visit' ) ), 'Did not find the </script> tag closer when there was no tag opener' );
+		$processor = new WP_HTML_Tag_Processor( 'abc</script>' );
+		$this->assertTrue( $processor->next_tag( array( 'tag_closers' => 'visit' ) ), 'Did not find the </script> tag closer when there was no tag opener' );
 
-		$p = new WP_HTML_Tag_Processor( '<textarea>abc</textarea>' );
+		$processor = new WP_HTML_Tag_Processor( '<textarea>abc</textarea>' );
 
-		$p->next_tag();
-		$this->assertTrue( $p->next_tag( array( 'tag_closers' => 'visit' ) ), 'Did not find the </textarea> tag closer' );
-		$this->assertTrue( $p->is_tag_closer(), 'Indicated a <textarea> tag opener is a tag closer' );
+		$processor->next_tag();
+		$this->assertFalse(
+			$processor->next_tag( array( 'tag_closers' => 'visit' ) ),
+			'Should not have found closing TEXTAREA when closing an opener.'
+		);
 
-		$p = new WP_HTML_Tag_Processor( 'abc</textarea>' );
-		$this->assertTrue( $p->next_tag( array( 'tag_closers' => 'visit' ) ), 'Did not find the </textarea> tag closer when there was no tag opener' );
+		$processor = new WP_HTML_Tag_Processor( 'abc</textarea>' );
+		$this->assertTrue( $processor->next_tag( array( 'tag_closers' => 'visit' ) ), 'Did not find the </textarea> tag closer when there was no tag opener' );
 
-		$p = new WP_HTML_Tag_Processor( '<title>abc</title>' );
+		$processor = new WP_HTML_Tag_Processor( '<title>abc</title>' );
 
-		$p->next_tag();
-		$this->assertTrue( $p->next_tag( array( 'tag_closers' => 'visit' ) ), 'Did not find the </title> tag closer' );
-		$this->assertTrue( $p->is_tag_closer(), 'Indicated a <title> tag opener is a tag closer' );
+		$processor->next_tag();
+		$this->assertFalse(
+			$processor->next_tag( array( 'tag_closers' => 'visit' ) ),
+			'Should not have found closing TITLE when closing an opener.'
+		);
 
-		$p = new WP_HTML_Tag_Processor( 'abc</title>' );
-		$this->assertTrue( $p->next_tag( array( 'tag_closers' => 'visit' ) ), 'Did not find the </title> tag closer when there was no tag opener' );
+		$processor = new WP_HTML_Tag_Processor( 'abc</title>' );
+		$this->assertTrue( $processor->next_tag( array( 'tag_closers' => 'visit' ) ), 'Did not find the </title> tag closer when there was no tag opener' );
 	}
 
 	/**
@@ -614,16 +620,16 @@ class Tests_HtmlApi_WpHtmlTagProcessor extends WP_UnitTestCase {
 	 * @covers WP_HTML_Tag_Processor::set_attribute
 	 */
 	public function test_set_attribute_on_a_non_existing_tag_does_not_change_the_markup() {
-		$p = new WP_HTML_Tag_Processor( self::HTML_SIMPLE );
+		$processor = new WP_HTML_Tag_Processor( self::HTML_SIMPLE );
 
-		$this->assertFalse( $p->next_tag( 'p' ), 'Querying a non-existing tag did not return false' );
-		$this->assertFalse( $p->next_tag( 'div' ), 'Querying a non-existing tag did not return false' );
+		$this->assertFalse( $processor->next_tag( 'p' ), 'Querying a non-existing tag did not return false' );
+		$this->assertFalse( $processor->next_tag( 'div' ), 'Querying a non-existing tag did not return false' );
 
-		$p->set_attribute( 'id', 'primary' );
+		$processor->set_attribute( 'id', 'primary' );
 
 		$this->assertSame(
 			self::HTML_SIMPLE,
-			$p->get_updated_html(),
+			$processor->get_updated_html(),
 			'Calling get_updated_html after updating a non-existing tag returned an HTML that was different from the original HTML'
 		);
 	}
@@ -637,31 +643,31 @@ class Tests_HtmlApi_WpHtmlTagProcessor extends WP_UnitTestCase {
 	 * @covers WP_HTML_Tag_Processor::remove_class
 	 */
 	public function test_attribute_ops_on_tag_closer_do_not_change_the_markup() {
-		$p = new WP_HTML_Tag_Processor( '<div id=3></div invalid-id=4>' );
-		$p->next_tag(
+		$processor = new WP_HTML_Tag_Processor( '<div id=3></div invalid-id=4>' );
+		$processor->next_tag(
 			array(
 				'tag_name'    => 'div',
 				'tag_closers' => 'visit',
 			)
 		);
 
-		$this->assertFalse( $p->is_tag_closer(), 'Skipped tag opener' );
+		$this->assertFalse( $processor->is_tag_closer(), 'Skipped tag opener' );
 
-		$p->next_tag(
+		$processor->next_tag(
 			array(
 				'tag_name'    => 'div',
 				'tag_closers' => 'visit',
 			)
 		);
 
-		$this->assertTrue( $p->is_tag_closer(), 'Skipped tag closer' );
-		$this->assertFalse( $p->set_attribute( 'id', 'test' ), "Allowed setting an attribute on a tag closer when it shouldn't have" );
-		$this->assertFalse( $p->remove_attribute( 'invalid-id' ), "Allowed removing an attribute on a tag closer when it shouldn't have" );
-		$this->assertFalse( $p->add_class( 'sneaky' ), "Allowed adding a class on a tag closer when it shouldn't have" );
-		$this->assertFalse( $p->remove_class( 'not-appearing-in-this-test' ), "Allowed removing a class on a tag closer when it shouldn't have" );
+		$this->assertTrue( $processor->is_tag_closer(), 'Skipped tag closer' );
+		$this->assertFalse( $processor->set_attribute( 'id', 'test' ), "Allowed setting an attribute on a tag closer when it shouldn't have" );
+		$this->assertFalse( $processor->remove_attribute( 'invalid-id' ), "Allowed removing an attribute on a tag closer when it shouldn't have" );
+		$this->assertFalse( $processor->add_class( 'sneaky' ), "Allowed adding a class on a tag closer when it shouldn't have" );
+		$this->assertFalse( $processor->remove_class( 'not-appearing-in-this-test' ), "Allowed removing a class on a tag closer when it shouldn't have" );
 		$this->assertSame(
 			'<div id=3></div invalid-id=4>',
-			$p->get_updated_html(),
+			$processor->get_updated_html(),
 			'Calling get_updated_html after updating a non-existing tag returned an HTML that was different from the original HTML'
 		);
 	}
@@ -670,9 +676,9 @@ class Tests_HtmlApi_WpHtmlTagProcessor extends WP_UnitTestCase {
 	 * Passing a double quote inside of an attribute value could lead to an XSS attack as follows:
 	 *
 	 * ```php
-	 *     $p = new WP_HTML_Tag_Processor( '<div class="header"></div>' );
-	 *     $p->next_tag();
-	 *     $p->set_attribute('class', '" onclick="alert');
+	 *     $processor = new WP_HTML_Tag_Processor( '<div class="header"></div>' );
+	 *     $processor->next_tag();
+	 *     $processor->set_attribute('class', '" onclick="alert');
 	 *     echo $p;
 	 *     // <div class="" onclick="alert"></div>
 	 * ```
@@ -691,9 +697,9 @@ class Tests_HtmlApi_WpHtmlTagProcessor extends WP_UnitTestCase {
 	 * @param string $attribute_value A value with potential XSS exploit.
 	 */
 	public function test_set_attribute_prevents_xss( $attribute_value ) {
-		$p = new WP_HTML_Tag_Processor( '<div></div>' );
-		$p->next_tag();
-		$p->set_attribute( 'test', $attribute_value );
+		$processor = new WP_HTML_Tag_Processor( '<div></div>' );
+		$processor->next_tag();
+		$processor->set_attribute( 'test', $attribute_value );
 
 		/*
 		 * Testing the escaping is hard using tools that properly parse
@@ -707,7 +713,7 @@ class Tests_HtmlApi_WpHtmlTagProcessor extends WP_UnitTestCase {
 		 * content and (b) looks at the raw values.
 		 */
 		$match = null;
-		preg_match( '~^<div test=(.*)></div>$~', $p->get_updated_html(), $match );
+		preg_match( '~^<div test=(.*)></div>$~', $processor->get_updated_html(), $match );
 		list( , $actual_value ) = $match;
 
 		$this->assertSame( '"' . esc_attr( $attribute_value ) . '"', $actual_value, 'Entities were not properly escaped in the attribute value' );
@@ -718,7 +724,7 @@ class Tests_HtmlApi_WpHtmlTagProcessor extends WP_UnitTestCase {
 	 *
 	 * @return string[][].
 	 */
-	public function data_set_attribute_prevents_xss() {
+	public static function data_set_attribute_prevents_xss() {
 		return array(
 			array( '"' ),
 			array( '&quot;' ),
@@ -738,18 +744,18 @@ class Tests_HtmlApi_WpHtmlTagProcessor extends WP_UnitTestCase {
 	 * @covers WP_HTML_Tag_Processor::set_attribute
 	 */
 	public function test_set_attribute_with_a_non_existing_attribute_adds_a_new_attribute_to_the_markup() {
-		$p = new WP_HTML_Tag_Processor( self::HTML_SIMPLE );
-		$p->next_tag();
-		$p->set_attribute( 'test-attribute', 'test-value' );
+		$processor = new WP_HTML_Tag_Processor( self::HTML_SIMPLE );
+		$processor->next_tag();
+		$processor->set_attribute( 'test-attribute', 'test-value' );
 
 		$this->assertSame(
 			'<div test-attribute="test-value" id="first"><span id="second">Text</span></div>',
-			$p->get_updated_html(),
+			$processor->get_updated_html(),
 			'Updated HTML does not include attribute added via set_attribute()'
 		);
 		$this->assertSame(
 			'test-value',
-			$p->get_attribute( 'test-attribute' ),
+			$processor->get_attribute( 'test-attribute' ),
 			'get_attribute() (called after get_updated_html()) did not return attribute added via set_attribute()'
 		);
 	}
@@ -760,18 +766,18 @@ class Tests_HtmlApi_WpHtmlTagProcessor extends WP_UnitTestCase {
 	 * @covers WP_HTML_Tag_Processor::get_attribute
 	 */
 	public function test_get_attribute_returns_updated_values_before_they_are_applied() {
-		$p = new WP_HTML_Tag_Processor( self::HTML_SIMPLE );
-		$p->next_tag();
-		$p->set_attribute( 'test-attribute', 'test-value' );
+		$processor = new WP_HTML_Tag_Processor( self::HTML_SIMPLE );
+		$processor->next_tag();
+		$processor->set_attribute( 'test-attribute', 'test-value' );
 
 		$this->assertSame(
 			'test-value',
-			$p->get_attribute( 'test-attribute' ),
+			$processor->get_attribute( 'test-attribute' ),
 			'get_attribute() (called before get_updated_html()) did not return attribute added via set_attribute()'
 		);
 		$this->assertSame(
 			'<div test-attribute="test-value" id="first"><span id="second">Text</span></div>',
-			$p->get_updated_html(),
+			$processor->get_updated_html(),
 			'Updated HTML does not include attribute added via set_attribute()'
 		);
 	}
@@ -782,18 +788,18 @@ class Tests_HtmlApi_WpHtmlTagProcessor extends WP_UnitTestCase {
 	 * @covers WP_HTML_Tag_Processor::get_attribute
 	 */
 	public function test_get_attribute_returns_updated_values_before_they_are_applied_with_different_name_casing() {
-		$p = new WP_HTML_Tag_Processor( self::HTML_SIMPLE );
-		$p->next_tag();
-		$p->set_attribute( 'test-ATTribute', 'test-value' );
+		$processor = new WP_HTML_Tag_Processor( self::HTML_SIMPLE );
+		$processor->next_tag();
+		$processor->set_attribute( 'test-ATTribute', 'test-value' );
 
 		$this->assertSame(
 			'test-value',
-			$p->get_attribute( 'test-attribute' ),
+			$processor->get_attribute( 'test-attribute' ),
 			'get_attribute() (called before get_updated_html()) did not return attribute added via set_attribute()'
 		);
 		$this->assertSame(
 			'<div test-ATTribute="test-value" id="first"><span id="second">Text</span></div>',
-			$p->get_updated_html(),
+			$processor->get_updated_html(),
 			'Updated HTML does not include attribute added via set_attribute()'
 		);
 	}
@@ -804,18 +810,18 @@ class Tests_HtmlApi_WpHtmlTagProcessor extends WP_UnitTestCase {
 	 * @covers WP_HTML_Tag_Processor::get_attribute
 	 */
 	public function test_get_attribute_reflects_added_class_names_before_they_are_applied() {
-		$p = new WP_HTML_Tag_Processor( self::HTML_SIMPLE );
-		$p->next_tag();
-		$p->add_class( 'my-class' );
+		$processor = new WP_HTML_Tag_Processor( self::HTML_SIMPLE );
+		$processor->next_tag();
+		$processor->add_class( 'my-class' );
 
 		$this->assertSame(
 			'my-class',
-			$p->get_attribute( 'class' ),
+			$processor->get_attribute( 'class' ),
 			'get_attribute() (called before get_updated_html()) did not return class name added via add_class()'
 		);
 		$this->assertSame(
 			'<div class="my-class" id="first"><span id="second">Text</span></div>',
-			$p->get_updated_html(),
+			$processor->get_updated_html(),
 			'Updated HTML does not include class name added via add_class()'
 		);
 	}
@@ -826,26 +832,26 @@ class Tests_HtmlApi_WpHtmlTagProcessor extends WP_UnitTestCase {
 	 * @covers WP_HTML_Tag_Processor::get_attribute
 	 */
 	public function test_get_attribute_reflects_added_class_names_before_they_are_applied_and_retains_classes_from_previous_add_class_calls() {
-		$p = new WP_HTML_Tag_Processor( self::HTML_SIMPLE );
-		$p->next_tag();
-		$p->add_class( 'my-class' );
+		$processor = new WP_HTML_Tag_Processor( self::HTML_SIMPLE );
+		$processor->next_tag();
+		$processor->add_class( 'my-class' );
 
 		$this->assertSame(
 			'my-class',
-			$p->get_attribute( 'class' ),
+			$processor->get_attribute( 'class' ),
 			'get_attribute() (called before get_updated_html()) did not return class name added via add_class()'
 		);
 
-		$p->add_class( 'my-other-class' );
+		$processor->add_class( 'my-other-class' );
 
 		$this->assertSame(
 			'my-class my-other-class',
-			$p->get_attribute( 'class' ),
+			$processor->get_attribute( 'class' ),
 			'get_attribute() (called before get_updated_html()) did not return class names added via subsequent add_class() calls'
 		);
 		$this->assertSame(
 			'<div class="my-class my-other-class" id="first"><span id="second">Text</span></div>',
-			$p->get_updated_html(),
+			$processor->get_updated_html(),
 			'Updated HTML does not include class names added via subsequent add_class() calls'
 		);
 	}
@@ -856,17 +862,17 @@ class Tests_HtmlApi_WpHtmlTagProcessor extends WP_UnitTestCase {
 	 * @covers WP_HTML_Tag_Processor::get_attribute
 	 */
 	public function test_get_attribute_reflects_removed_attribute_before_it_is_applied() {
-		$p = new WP_HTML_Tag_Processor( self::HTML_SIMPLE );
-		$p->next_tag();
-		$p->remove_attribute( 'id' );
+		$processor = new WP_HTML_Tag_Processor( self::HTML_SIMPLE );
+		$processor->next_tag();
+		$processor->remove_attribute( 'id' );
 
 		$this->assertNull(
-			$p->get_attribute( 'id' ),
+			$processor->get_attribute( 'id' ),
 			'get_attribute() (called before get_updated_html()) returned attribute that was removed by remove_attribute()'
 		);
 		$this->assertSame(
 			'<div ><span id="second">Text</span></div>',
-			$p->get_updated_html(),
+			$processor->get_updated_html(),
 			'Updated HTML includes attribute that was removed by remove_attribute()'
 		);
 	}
@@ -877,18 +883,18 @@ class Tests_HtmlApi_WpHtmlTagProcessor extends WP_UnitTestCase {
 	 * @covers WP_HTML_Tag_Processor::get_attribute
 	 */
 	public function test_get_attribute_reflects_adding_and_then_removing_an_attribute_before_those_updates_are_applied() {
-		$p = new WP_HTML_Tag_Processor( self::HTML_SIMPLE );
-		$p->next_tag();
-		$p->set_attribute( 'test-attribute', 'test-value' );
-		$p->remove_attribute( 'test-attribute' );
+		$processor = new WP_HTML_Tag_Processor( self::HTML_SIMPLE );
+		$processor->next_tag();
+		$processor->set_attribute( 'test-attribute', 'test-value' );
+		$processor->remove_attribute( 'test-attribute' );
 
 		$this->assertNull(
-			$p->get_attribute( 'test-attribute' ),
+			$processor->get_attribute( 'test-attribute' ),
 			'get_attribute() (called before get_updated_html()) returned attribute that was added via set_attribute() and then removed by remove_attribute()'
 		);
 		$this->assertSame(
 			self::HTML_SIMPLE,
-			$p->get_updated_html(),
+			$processor->get_updated_html(),
 			'Updated HTML includes attribute that was added via set_attribute() and then removed by remove_attribute()'
 		);
 	}
@@ -899,18 +905,18 @@ class Tests_HtmlApi_WpHtmlTagProcessor extends WP_UnitTestCase {
 	 * @covers WP_HTML_Tag_Processor::get_attribute
 	 */
 	public function test_get_attribute_reflects_setting_and_then_removing_an_existing_attribute_before_those_updates_are_applied() {
-		$p = new WP_HTML_Tag_Processor( self::HTML_SIMPLE );
-		$p->next_tag();
-		$p->set_attribute( 'id', 'test-value' );
-		$p->remove_attribute( 'id' );
+		$processor = new WP_HTML_Tag_Processor( self::HTML_SIMPLE );
+		$processor->next_tag();
+		$processor->set_attribute( 'id', 'test-value' );
+		$processor->remove_attribute( 'id' );
 
 		$this->assertNull(
-			$p->get_attribute( 'id' ),
+			$processor->get_attribute( 'id' ),
 			'get_attribute() (called before get_updated_html()) returned attribute that was overwritten by set_attribute() and then removed by remove_attribute()'
 		);
 		$this->assertSame(
 			'<div ><span id="second">Text</span></div>',
-			$p->get_updated_html(),
+			$processor->get_updated_html(),
 			'Updated HTML includes attribute that was overwritten by set_attribute() and then removed by remove_attribute()'
 		);
 	}
@@ -921,18 +927,18 @@ class Tests_HtmlApi_WpHtmlTagProcessor extends WP_UnitTestCase {
 	 * @covers WP_HTML_Tag_Processor::get_attribute
 	 */
 	public function test_get_attribute_reflects_removed_class_names_before_they_are_applied() {
-		$p = new WP_HTML_Tag_Processor( self::HTML_WITH_CLASSES );
-		$p->next_tag();
-		$p->remove_class( 'with-border' );
+		$processor = new WP_HTML_Tag_Processor( self::HTML_WITH_CLASSES );
+		$processor->next_tag();
+		$processor->remove_class( 'with-border' );
 
 		$this->assertSame(
 			'main',
-			$p->get_attribute( 'class' ),
+			$processor->get_attribute( 'class' ),
 			'get_attribute() (called before get_updated_html()) returned the wrong attribute after calling remove_attribute()'
 		);
 		$this->assertSame(
 			'<div class="main" id="first"><span class="not-main bold with-border" id="second">Text</span></div>',
-			$p->get_updated_html(),
+			$processor->get_updated_html(),
 			'Updated HTML includes wrong attribute after calling remove_attribute()'
 		);
 	}
@@ -943,19 +949,19 @@ class Tests_HtmlApi_WpHtmlTagProcessor extends WP_UnitTestCase {
 	 * @covers WP_HTML_Tag_Processor::get_attribute
 	 */
 	public function test_get_attribute_reflects_setting_and_then_removing_a_class_name_before_those_updates_are_applied() {
-		$p = new WP_HTML_Tag_Processor( self::HTML_WITH_CLASSES );
-		$p->next_tag();
-		$p->add_class( 'foo-class' );
-		$p->remove_class( 'foo-class' );
+		$processor = new WP_HTML_Tag_Processor( self::HTML_WITH_CLASSES );
+		$processor->next_tag();
+		$processor->add_class( 'foo-class' );
+		$processor->remove_class( 'foo-class' );
 
 		$this->assertSame(
 			'main with-border',
-			$p->get_attribute( 'class' ),
+			$processor->get_attribute( 'class' ),
 			'get_attribute() (called before get_updated_html()) returned class name that was added via add_class() and then removed by remove_class()'
 		);
 		$this->assertSame(
 			self::HTML_WITH_CLASSES,
-			$p->get_updated_html(),
+			$processor->get_updated_html(),
 			'Updated HTML includes class that was added via add_class() and then removed by remove_class()'
 		);
 	}
@@ -966,19 +972,19 @@ class Tests_HtmlApi_WpHtmlTagProcessor extends WP_UnitTestCase {
 	 * @covers WP_HTML_Tag_Processor::get_attribute
 	 */
 	public function test_get_attribute_reflects_duplicating_and_then_removing_an_existing_class_name_before_those_updates_are_applied() {
-		$p = new WP_HTML_Tag_Processor( self::HTML_WITH_CLASSES );
-		$p->next_tag();
-		$p->add_class( 'with-border' );
-		$p->remove_class( 'with-border' );
+		$processor = new WP_HTML_Tag_Processor( self::HTML_WITH_CLASSES );
+		$processor->next_tag();
+		$processor->add_class( 'with-border' );
+		$processor->remove_class( 'with-border' );
 
 		$this->assertSame(
 			'main',
-			$p->get_attribute( 'class' ),
+			$processor->get_attribute( 'class' ),
 			'get_attribute() (called before get_updated_html()) returned class name that was duplicated via add_class() and then removed by remove_class()'
 		);
 		$this->assertSame(
 			'<div class="main" id="first"><span class="not-main bold with-border" id="second">Text</span></div>',
-			$p->get_updated_html(),
+			$processor->get_updated_html(),
 			'Updated HTML includes class that was duplicated via add_class() and then removed by remove_class()'
 		);
 	}
@@ -992,13 +998,13 @@ class Tests_HtmlApi_WpHtmlTagProcessor extends WP_UnitTestCase {
 	 * @covers WP_HTML_Tag_Processor::set_attribute
 	 */
 	public function test_update_first_attribute_when_duplicated_attributes_exist() {
-		$p = new WP_HTML_Tag_Processor( '<div id="update-me" id="ignored-id"><span id="second">Text</span></div>' );
-		$p->next_tag();
-		$p->set_attribute( 'id', 'updated-id' );
+		$processor = new WP_HTML_Tag_Processor( '<div id="update-me" id="ignored-id"><span id="second">Text</span></div>' );
+		$processor->next_tag();
+		$processor->set_attribute( 'id', 'updated-id' );
 
 		$this->assertSame(
 			'<div id="updated-id" id="ignored-id"><span id="second">Text</span></div>',
-			$p->get_updated_html(),
+			$processor->get_updated_html(),
 			'Proper (first) appearance of attribute was not updated when duplicates exist'
 		);
 	}
@@ -1009,12 +1015,12 @@ class Tests_HtmlApi_WpHtmlTagProcessor extends WP_UnitTestCase {
 	 * @covers WP_HTML_Tag_Processor::set_attribute
 	 */
 	public function test_set_attribute_with_an_existing_attribute_name_updates_its_value_in_the_markup() {
-		$p = new WP_HTML_Tag_Processor( self::HTML_SIMPLE );
-		$p->next_tag();
-		$p->set_attribute( 'id', 'new-id' );
+		$processor = new WP_HTML_Tag_Processor( self::HTML_SIMPLE );
+		$processor->next_tag();
+		$processor->set_attribute( 'id', 'new-id' );
 		$this->assertSame(
 			'<div id="new-id"><span id="second">Text</span></div>',
-			$p->get_updated_html(),
+			$processor->get_updated_html(),
 			'Existing attribute was not updated'
 		);
 	}
@@ -1028,13 +1034,13 @@ class Tests_HtmlApi_WpHtmlTagProcessor extends WP_UnitTestCase {
 	 * @covers WP_HTML_Tag_Processor::set_attribute
 	 */
 	public function test_set_attribute_with_case_variants_updates_only_the_original_first_copy() {
-		$p = new WP_HTML_Tag_Processor( '<div data-enabled="5">' );
-		$p->next_tag();
-		$p->set_attribute( 'DATA-ENABLED', 'canary' );
-		$p->set_attribute( 'Data-Enabled', 'canary' );
-		$p->set_attribute( 'dATa-EnABled', 'canary' );
+		$processor = new WP_HTML_Tag_Processor( '<div data-enabled="5">' );
+		$processor->next_tag();
+		$processor->set_attribute( 'DATA-ENABLED', 'canary' );
+		$processor->set_attribute( 'Data-Enabled', 'canary' );
+		$processor->set_attribute( 'dATa-EnABled', 'canary' );
 
-		$this->assertSame( '<div data-enabled="canary">', strtolower( $p->get_updated_html() ) );
+		$this->assertSame( '<div data-enabled="canary">', strtolower( $processor->get_updated_html() ) );
 	}
 
 	/**
@@ -1044,14 +1050,14 @@ class Tests_HtmlApi_WpHtmlTagProcessor extends WP_UnitTestCase {
 	 * @covers WP_HTML_Tag_Processor::set_attribute
 	 */
 	public function test_next_tag_and_set_attribute_in_a_loop_update_all_tags_in_the_markup() {
-		$p = new WP_HTML_Tag_Processor( self::HTML_SIMPLE );
-		while ( $p->next_tag() ) {
-			$p->set_attribute( 'data-foo', 'bar' );
+		$processor = new WP_HTML_Tag_Processor( self::HTML_SIMPLE );
+		while ( $processor->next_tag() ) {
+			$processor->set_attribute( 'data-foo', 'bar' );
 		}
 
 		$this->assertSame(
 			'<div data-foo="bar" id="first"><span data-foo="bar" id="second">Text</span></div>',
-			$p->get_updated_html(),
+			$processor->get_updated_html(),
 			'Not all tags were updated when looping with next_tag() and set_attribute()'
 		);
 	}
@@ -1067,13 +1073,13 @@ class Tests_HtmlApi_WpHtmlTagProcessor extends WP_UnitTestCase {
 	 * @covers WP_HTML_Tag_Processor::remove_attribute
 	 */
 	public function test_remove_first_when_duplicated_attribute() {
-		$p = new WP_HTML_Tag_Processor( '<div id="update-me" id="ignored-id"><span id="second">Text</span></div>' );
-		$p->next_tag();
-		$p->remove_attribute( 'id' );
+		$processor = new WP_HTML_Tag_Processor( '<div id="update-me" id="ignored-id"><span id="second">Text</span></div>' );
+		$processor->next_tag();
+		$processor->remove_attribute( 'id' );
 
 		$this->assertStringNotContainsString(
 			'update-me',
-			$p->get_updated_html(),
+			$processor->get_updated_html(),
 			'First attribute (when duplicates exist) was not removed'
 		);
 	}
@@ -1084,13 +1090,13 @@ class Tests_HtmlApi_WpHtmlTagProcessor extends WP_UnitTestCase {
 	 * @covers WP_HTML_Tag_Processor::remove_attribute
 	 */
 	public function test_remove_attribute_with_an_existing_attribute_name_removes_it_from_the_markup() {
-		$p = new WP_HTML_Tag_Processor( self::HTML_SIMPLE );
-		$p->next_tag();
-		$p->remove_attribute( 'id' );
+		$processor = new WP_HTML_Tag_Processor( self::HTML_SIMPLE );
+		$processor->next_tag();
+		$processor->remove_attribute( 'id' );
 
 		$this->assertSame(
 			'<div ><span id="second">Text</span></div>',
-			$p->get_updated_html(),
+			$processor->get_updated_html(),
 			'Attribute was not removed'
 		);
 	}
@@ -1105,16 +1111,16 @@ class Tests_HtmlApi_WpHtmlTagProcessor extends WP_UnitTestCase {
 	 * @dataProvider data_html_with_duplicated_attributes
 	 */
 	public function test_remove_attribute_with_duplicated_attributes_removes_all_of_them( $html_with_duplicate_attributes, $attribute_to_remove ) {
-		$p = new WP_HTML_Tag_Processor( $html_with_duplicate_attributes );
-		$p->next_tag();
+		$processor = new WP_HTML_Tag_Processor( $html_with_duplicate_attributes );
+		$processor->next_tag();
 
-		$p->remove_attribute( $attribute_to_remove );
-		$this->assertNull( $p->get_attribute( $attribute_to_remove ), 'Failed to remove all copies of an attribute when duplicated in modified source.' );
+		$processor->remove_attribute( $attribute_to_remove );
+		$this->assertNull( $processor->get_attribute( $attribute_to_remove ), 'Failed to remove all copies of an attribute when duplicated in modified source.' );
 
 		// Recreate a tag processor with the updated HTML after removing the attribute.
-		$p = new WP_HTML_Tag_Processor( $p->get_updated_html() );
-		$p->next_tag();
-		$this->assertNull( $p->get_attribute( $attribute_to_remove ), 'Failed to remove all copies of duplicated attributes when getting updated HTML.' );
+		$processor = new WP_HTML_Tag_Processor( $processor->get_updated_html() );
+		$processor->next_tag();
+		$this->assertNull( $processor->get_attribute( $attribute_to_remove ), 'Failed to remove all copies of duplicated attributes when getting updated HTML.' );
 	}
 
 	/**
@@ -1125,12 +1131,12 @@ class Tests_HtmlApi_WpHtmlTagProcessor extends WP_UnitTestCase {
 	 * @covers WP_HTML_Tag_Processor::remove_attribute
 	 */
 	public function test_previous_duplicated_attributes_are_not_removed_on_successive_tag_removal() {
-		$p = new WP_HTML_Tag_Processor( '<span id=one id=two id=three><span id=four>' );
-		$p->next_tag();
-		$p->next_tag();
-		$p->remove_attribute( 'id' );
+		$processor = new WP_HTML_Tag_Processor( '<span id=one id=two id=three><span id=four>' );
+		$processor->next_tag();
+		$processor->next_tag();
+		$processor->remove_attribute( 'id' );
 
-		$this->assertSame( '<span id=one id=two id=three><span >', $p->get_updated_html() );
+		$this->assertSame( '<span id=one id=two id=three><span >', $processor->get_updated_html() );
 	}
 
 	/**
@@ -1140,7 +1146,7 @@ class Tests_HtmlApi_WpHtmlTagProcessor extends WP_UnitTestCase {
 	 *
 	 * @return array[].
 	 */
-	public function data_html_with_duplicated_attributes() {
+	public static function data_html_with_duplicated_attributes() {
 		return array(
 			'Double attributes'               => array( '<div id=one id=two>', 'id' ),
 			'Triple attributes'               => array( '<div id=one id=two id=three>', 'id' ),
@@ -1156,13 +1162,13 @@ class Tests_HtmlApi_WpHtmlTagProcessor extends WP_UnitTestCase {
 	 * @covers WP_HTML_Tag_Processor::remove_attribute
 	 */
 	public function test_remove_attribute_with_a_non_existing_attribute_name_does_not_change_the_markup() {
-		$p = new WP_HTML_Tag_Processor( self::HTML_SIMPLE );
-		$p->next_tag();
-		$p->remove_attribute( 'no-such-attribute' );
+		$processor = new WP_HTML_Tag_Processor( self::HTML_SIMPLE );
+		$processor->next_tag();
+		$processor->remove_attribute( 'no-such-attribute' );
 
 		$this->assertSame(
 			self::HTML_SIMPLE,
-			$p->get_updated_html(),
+			$processor->get_updated_html(),
 			'Content was changed when attempting to remove an attribute that did not exist'
 		);
 	}
@@ -1173,18 +1179,18 @@ class Tests_HtmlApi_WpHtmlTagProcessor extends WP_UnitTestCase {
 	 * @covers WP_HTML_Tag_Processor::add_class
 	 */
 	public function test_add_class_creates_a_class_attribute_when_there_is_none() {
-		$p = new WP_HTML_Tag_Processor( self::HTML_SIMPLE );
-		$p->next_tag();
-		$p->add_class( 'foo-class' );
+		$processor = new WP_HTML_Tag_Processor( self::HTML_SIMPLE );
+		$processor->next_tag();
+		$processor->add_class( 'foo-class' );
 
 		$this->assertSame(
 			'<div class="foo-class" id="first"><span id="second">Text</span></div>',
-			$p->get_updated_html(),
+			$processor->get_updated_html(),
 			'Updated HTML does not include class name added via add_class()'
 		);
 		$this->assertSame(
 			'foo-class',
-			$p->get_attribute( 'class' ),
+			$processor->get_attribute( 'class' ),
 			"get_attribute( 'class' ) did not return class name added via add_class()"
 		);
 	}
@@ -1195,19 +1201,19 @@ class Tests_HtmlApi_WpHtmlTagProcessor extends WP_UnitTestCase {
 	 * @covers WP_HTML_Tag_Processor::add_class
 	 */
 	public function test_calling_add_class_twice_creates_a_class_attribute_with_both_class_names_when_there_is_no_class_attribute() {
-		$p = new WP_HTML_Tag_Processor( self::HTML_SIMPLE );
-		$p->next_tag();
-		$p->add_class( 'foo-class' );
-		$p->add_class( 'bar-class' );
+		$processor = new WP_HTML_Tag_Processor( self::HTML_SIMPLE );
+		$processor->next_tag();
+		$processor->add_class( 'foo-class' );
+		$processor->add_class( 'bar-class' );
 
 		$this->assertSame(
 			'<div class="foo-class bar-class" id="first"><span id="second">Text</span></div>',
-			$p->get_updated_html(),
+			$processor->get_updated_html(),
 			'Updated HTML does not include class names added via subsequent add_class() calls'
 		);
 		$this->assertSame(
 			'foo-class bar-class',
-			$p->get_attribute( 'class' ),
+			$processor->get_attribute( 'class' ),
 			"get_attribute( 'class' ) did not return class names added via subsequent add_class() calls"
 		);
 	}
@@ -1218,17 +1224,17 @@ class Tests_HtmlApi_WpHtmlTagProcessor extends WP_UnitTestCase {
 	 * @covers WP_HTML_Tag_Processor::remove_class
 	 */
 	public function test_remove_class_does_not_change_the_markup_when_there_is_no_class_attribute() {
-		$p = new WP_HTML_Tag_Processor( self::HTML_SIMPLE );
-		$p->next_tag();
-		$p->remove_class( 'foo-class' );
+		$processor = new WP_HTML_Tag_Processor( self::HTML_SIMPLE );
+		$processor->next_tag();
+		$processor->remove_class( 'foo-class' );
 
 		$this->assertSame(
 			self::HTML_SIMPLE,
-			$p->get_updated_html(),
+			$processor->get_updated_html(),
 			'Updated HTML includes class name that was removed by remove_class()'
 		);
 		$this->assertNull(
-			$p->get_attribute( 'class' ),
+			$processor->get_attribute( 'class' ),
 			"get_attribute( 'class' ) did not return null for class name that was removed by remove_class()"
 		);
 	}
@@ -1239,19 +1245,19 @@ class Tests_HtmlApi_WpHtmlTagProcessor extends WP_UnitTestCase {
 	 * @covers WP_HTML_Tag_Processor::add_class
 	 */
 	public function test_add_class_appends_class_names_to_the_existing_class_attribute_when_one_already_exists() {
-		$p = new WP_HTML_Tag_Processor( self::HTML_WITH_CLASSES );
-		$p->next_tag();
-		$p->add_class( 'foo-class' );
-		$p->add_class( 'bar-class' );
+		$processor = new WP_HTML_Tag_Processor( self::HTML_WITH_CLASSES );
+		$processor->next_tag();
+		$processor->add_class( 'foo-class' );
+		$processor->add_class( 'bar-class' );
 
 		$this->assertSame(
 			'<div class="main with-border foo-class bar-class" id="first"><span class="not-main bold with-border" id="second">Text</span></div>',
-			$p->get_updated_html(),
+			$processor->get_updated_html(),
 			'Updated HTML does not reflect class names added to existing class attribute via subsequent add_class() calls'
 		);
 		$this->assertSame(
 			'main with-border foo-class bar-class',
-			$p->get_attribute( 'class' ),
+			$processor->get_attribute( 'class' ),
 			"get_attribute( 'class' ) does not reflect class names added to existing class attribute via subsequent add_class() calls"
 		);
 	}
@@ -1262,18 +1268,18 @@ class Tests_HtmlApi_WpHtmlTagProcessor extends WP_UnitTestCase {
 	 * @covers WP_HTML_Tag_Processor::remove_class
 	 */
 	public function test_remove_class_removes_a_single_class_from_the_class_attribute_when_one_exists() {
-		$p = new WP_HTML_Tag_Processor( self::HTML_WITH_CLASSES );
-		$p->next_tag();
-		$p->remove_class( 'main' );
+		$processor = new WP_HTML_Tag_Processor( self::HTML_WITH_CLASSES );
+		$processor->next_tag();
+		$processor->remove_class( 'main' );
 
 		$this->assertSame(
 			'<div class=" with-border" id="first"><span class="not-main bold with-border" id="second">Text</span></div>',
-			$p->get_updated_html(),
+			$processor->get_updated_html(),
 			'Updated HTML does not reflect class name removed from existing class attribute via remove_class()'
 		);
 		$this->assertSame(
 			' with-border',
-			$p->get_attribute( 'class' ),
+			$processor->get_attribute( 'class' ),
 			"get_attribute( 'class' ) does not reflect class name removed from existing class attribute via remove_class()"
 		);
 	}
@@ -1284,18 +1290,18 @@ class Tests_HtmlApi_WpHtmlTagProcessor extends WP_UnitTestCase {
 	 * @covers WP_HTML_Tag_Processor::remove_class
 	 */
 	public function test_calling_remove_class_with_all_listed_class_names_removes_the_existing_class_attribute_from_the_markup() {
-		$p = new WP_HTML_Tag_Processor( self::HTML_WITH_CLASSES );
-		$p->next_tag();
-		$p->remove_class( 'main' );
-		$p->remove_class( 'with-border' );
+		$processor = new WP_HTML_Tag_Processor( self::HTML_WITH_CLASSES );
+		$processor->next_tag();
+		$processor->remove_class( 'main' );
+		$processor->remove_class( 'with-border' );
 
 		$this->assertSame(
 			'<div  id="first"><span class="not-main bold with-border" id="second">Text</span></div>',
-			$p->get_updated_html(),
+			$processor->get_updated_html(),
 			'Updated HTML does not reflect class attribute removed via subesequent remove_class() calls'
 		);
 		$this->assertNull(
-			$p->get_attribute( 'class' ),
+			$processor->get_attribute( 'class' ),
 			"get_attribute( 'class' ) did not return null for class attribute removed via subesequent remove_class() calls"
 		);
 	}
@@ -1306,18 +1312,18 @@ class Tests_HtmlApi_WpHtmlTagProcessor extends WP_UnitTestCase {
 	 * @covers WP_HTML_Tag_Processor::add_class
 	 */
 	public function test_add_class_does_not_add_duplicate_class_names() {
-		$p = new WP_HTML_Tag_Processor( self::HTML_WITH_CLASSES );
-		$p->next_tag();
-		$p->add_class( 'with-border' );
+		$processor = new WP_HTML_Tag_Processor( self::HTML_WITH_CLASSES );
+		$processor->next_tag();
+		$processor->add_class( 'with-border' );
 
 		$this->assertSame(
 			'<div class="main with-border" id="first"><span class="not-main bold with-border" id="second">Text</span></div>',
-			$p->get_updated_html(),
+			$processor->get_updated_html(),
 			'Updated HTML does not reflect deduplicated class name added via add_class()'
 		);
 		$this->assertSame(
 			'main with-border',
-			$p->get_attribute( 'class' ),
+			$processor->get_attribute( 'class' ),
 			"get_attribute( 'class' ) does not reflect deduplicated class name added via add_class()"
 		);
 	}
@@ -1328,18 +1334,18 @@ class Tests_HtmlApi_WpHtmlTagProcessor extends WP_UnitTestCase {
 	 * @covers WP_HTML_Tag_Processor::add_class
 	 */
 	public function test_add_class_preserves_class_name_order_when_a_duplicate_class_name_is_added() {
-		$p = new WP_HTML_Tag_Processor( self::HTML_WITH_CLASSES );
-		$p->next_tag();
-		$p->add_class( 'main' );
+		$processor = new WP_HTML_Tag_Processor( self::HTML_WITH_CLASSES );
+		$processor->next_tag();
+		$processor->add_class( 'main' );
 
 		$this->assertSame(
 			'<div class="main with-border" id="first"><span class="not-main bold with-border" id="second">Text</span></div>',
-			$p->get_updated_html(),
+			$processor->get_updated_html(),
 			'Updated HTML does not reflect class name order after adding duplicated class name via add_class()'
 		);
 		$this->assertSame(
 			'main with-border',
-			$p->get_attribute( 'class' ),
+			$processor->get_attribute( 'class' ),
 			"get_attribute( 'class' ) does not reflect class name order after adding duplicated class name added via add_class()"
 		);
 	}
@@ -1350,20 +1356,20 @@ class Tests_HtmlApi_WpHtmlTagProcessor extends WP_UnitTestCase {
 	 * @covers WP_HTML_Tag_Processor::add_class
 	 */
 	public function test_add_class_when_there_is_a_class_attribute_with_excessive_whitespaces() {
-		$p = new WP_HTML_Tag_Processor(
+		$processor = new WP_HTML_Tag_Processor(
 			'<div class="   main   with-border   " id="first"><span class="not-main bold with-border" id="second">Text</span></div>'
 		);
-		$p->next_tag();
-		$p->add_class( 'foo-class' );
+		$processor->next_tag();
+		$processor->add_class( 'foo-class' );
 
 		$this->assertSame(
 			'<div class="   main   with-border foo-class" id="first"><span class="not-main bold with-border" id="second">Text</span></div>',
-			$p->get_updated_html(),
+			$processor->get_updated_html(),
 			'Updated HTML does not reflect existing excessive whitespace after adding class name via add_class()'
 		);
 		$this->assertSame(
 			'   main   with-border foo-class',
-			$p->get_attribute( 'class' ),
+			$processor->get_attribute( 'class' ),
 			"get_attribute( 'class' ) does not reflect existing excessive whitespace after adding class name via add_class()"
 		);
 	}
@@ -1374,20 +1380,20 @@ class Tests_HtmlApi_WpHtmlTagProcessor extends WP_UnitTestCase {
 	 * @covers WP_HTML_Tag_Processor::remove_class
 	 */
 	public function test_remove_class_preserves_whitespaces_when_there_is_a_class_attribute_with_excessive_whitespaces() {
-		$p = new WP_HTML_Tag_Processor(
+		$processor = new WP_HTML_Tag_Processor(
 			'<div class="   main   with-border   " id="first"><span class="not-main bold with-border" id="second">Text</span></div>'
 		);
-		$p->next_tag();
-		$p->remove_class( 'with-border' );
+		$processor->next_tag();
+		$processor->remove_class( 'with-border' );
 
 		$this->assertSame(
 			'<div class="   main" id="first"><span class="not-main bold with-border" id="second">Text</span></div>',
-			$p->get_updated_html(),
+			$processor->get_updated_html(),
 			'Updated HTML does not reflect existing excessive whitespace after removing class name via remove_class()'
 		);
 		$this->assertSame(
 			'   main',
-			$p->get_attribute( 'class' ),
+			$processor->get_attribute( 'class' ),
 			"get_attribute( 'class' ) does not reflect existing excessive whitespace after removing class name via removing_class()"
 		);
 	}
@@ -1398,19 +1404,19 @@ class Tests_HtmlApi_WpHtmlTagProcessor extends WP_UnitTestCase {
 	 * @covers WP_HTML_Tag_Processor::remove_class
 	 */
 	public function test_removing_all_classes_removes_the_existing_class_attribute_from_the_markup_even_when_excessive_whitespaces_are_present() {
-		$p = new WP_HTML_Tag_Processor(
+		$processor = new WP_HTML_Tag_Processor(
 			'<div class="   main   with-border   " id="first"><span class="not-main bold with-border" id="second">Text</span></div>'
 		);
-		$p->next_tag();
-		$p->remove_class( 'main' );
-		$p->remove_class( 'with-border' );
+		$processor->next_tag();
+		$processor->remove_class( 'main' );
+		$processor->remove_class( 'with-border' );
 		$this->assertSame(
 			'<div  id="first"><span class="not-main bold with-border" id="second">Text</span></div>',
-			$p->get_updated_html(),
+			$processor->get_updated_html(),
 			'Updated HTML does not reflect removed class attribute after removing all class names via remove_class()'
 		);
 		$this->assertNull(
-			$p->get_attribute( 'class' ),
+			$processor->get_attribute( 'class' ),
 			"get_attribute( 'class' ) did not return null after removing all class names via remove_class()"
 		);
 	}
@@ -1429,33 +1435,33 @@ class Tests_HtmlApi_WpHtmlTagProcessor extends WP_UnitTestCase {
 	 * @covers WP_HTML_Tag_Processor::set_attribute
 	 */
 	public function test_set_attribute_takes_priority_over_add_class() {
-		$p = new WP_HTML_Tag_Processor( self::HTML_WITH_CLASSES );
-		$p->next_tag();
-		$p->add_class( 'add_class' );
-		$p->set_attribute( 'class', 'set_attribute' );
+		$processor = new WP_HTML_Tag_Processor( self::HTML_WITH_CLASSES );
+		$processor->next_tag();
+		$processor->add_class( 'add_class' );
+		$processor->set_attribute( 'class', 'set_attribute' );
 		$this->assertSame(
 			'<div class="set_attribute" id="first"><span class="not-main bold with-border" id="second">Text</span></div>',
-			$p->get_updated_html(),
+			$processor->get_updated_html(),
 			"Calling get_updated_html after updating first tag's attributes did not return the expected HTML"
 		);
 		$this->assertSame(
 			'set_attribute',
-			$p->get_attribute( 'class' ),
+			$processor->get_attribute( 'class' ),
 			"Calling get_attribute after updating first tag's attributes did not return the expected class name"
 		);
 
-		$p = new WP_HTML_Tag_Processor( self::HTML_WITH_CLASSES );
-		$p->next_tag();
-		$p->set_attribute( 'class', 'set_attribute' );
-		$p->add_class( 'add_class' );
+		$processor = new WP_HTML_Tag_Processor( self::HTML_WITH_CLASSES );
+		$processor->next_tag();
+		$processor->set_attribute( 'class', 'set_attribute' );
+		$processor->add_class( 'add_class' );
 		$this->assertSame(
 			'<div class="set_attribute add_class" id="first"><span class="not-main bold with-border" id="second">Text</span></div>',
-			$p->get_updated_html(),
+			$processor->get_updated_html(),
 			"Calling get_updated_html after updating first tag's attributes did not return the expected HTML"
 		);
 		$this->assertSame(
 			'set_attribute add_class',
-			$p->get_attribute( 'class' ),
+			$processor->get_attribute( 'class' ),
 			"Calling get_attribute after updating first tag's attributes did not return the expected class name"
 		);
 	}
@@ -1476,33 +1482,33 @@ class Tests_HtmlApi_WpHtmlTagProcessor extends WP_UnitTestCase {
 	 * @covers WP_HTML_Tag_Processor::set_attribute
 	 */
 	public function test_set_attribute_takes_priority_over_add_class_even_before_updating() {
-		$p = new WP_HTML_Tag_Processor( self::HTML_WITH_CLASSES );
-		$p->next_tag();
-		$p->add_class( 'add_class' );
-		$p->set_attribute( 'class', 'set_attribute' );
+		$processor = new WP_HTML_Tag_Processor( self::HTML_WITH_CLASSES );
+		$processor->next_tag();
+		$processor->add_class( 'add_class' );
+		$processor->set_attribute( 'class', 'set_attribute' );
 		$this->assertSame(
 			'set_attribute',
-			$p->get_attribute( 'class' ),
+			$processor->get_attribute( 'class' ),
 			"Calling get_attribute after updating first tag's attributes did not return the expected class name"
 		);
 		$this->assertSame(
 			'<div class="set_attribute" id="first"><span class="not-main bold with-border" id="second">Text</span></div>',
-			$p->get_updated_html(),
+			$processor->get_updated_html(),
 			"Calling get_updated_html after updating first tag's attributes did not return the expected HTML"
 		);
 
-		$p = new WP_HTML_Tag_Processor( self::HTML_WITH_CLASSES );
-		$p->next_tag();
-		$p->set_attribute( 'class', 'set_attribute' );
-		$p->add_class( 'add_class' );
+		$processor = new WP_HTML_Tag_Processor( self::HTML_WITH_CLASSES );
+		$processor->next_tag();
+		$processor->set_attribute( 'class', 'set_attribute' );
+		$processor->add_class( 'add_class' );
 		$this->assertSame(
 			'set_attribute add_class',
-			$p->get_attribute( 'class' ),
+			$processor->get_attribute( 'class' ),
 			"Calling get_attribute after updating first tag's attributes did not return the expected class name"
 		);
 		$this->assertSame(
 			'<div class="set_attribute add_class" id="first"><span class="not-main bold with-border" id="second">Text</span></div>',
-			$p->get_updated_html(),
+			$processor->get_updated_html(),
 			"Calling get_updated_html after updating first tag's attributes did not return the expected HTML"
 		);
 	}
@@ -1513,18 +1519,18 @@ class Tests_HtmlApi_WpHtmlTagProcessor extends WP_UnitTestCase {
 	 * @covers WP_HTML_Tag_Processor::add_class
 	 */
 	public function test_add_class_overrides_boolean_class_attribute() {
-		$p = new WP_HTML_Tag_Processor( self::HTML_SIMPLE );
-		$p->next_tag();
-		$p->set_attribute( 'class', true );
-		$p->add_class( 'add_class' );
+		$processor = new WP_HTML_Tag_Processor( self::HTML_SIMPLE );
+		$processor->next_tag();
+		$processor->set_attribute( 'class', true );
+		$processor->add_class( 'add_class' );
 		$this->assertSame(
 			'<div class="add_class" id="first"><span id="second">Text</span></div>',
-			$p->get_updated_html(),
+			$processor->get_updated_html(),
 			"Updated HTML doesn't reflect class added via add_class that was originally set as boolean attribute"
 		);
 		$this->assertSame(
 			'add_class',
-			$p->get_attribute( 'class' ),
+			$processor->get_attribute( 'class' ),
 			"get_attribute (called after get_updated_html()) doesn't reflect class added via add_class that was originally set as boolean attribute"
 		);
 	}
@@ -1535,18 +1541,18 @@ class Tests_HtmlApi_WpHtmlTagProcessor extends WP_UnitTestCase {
 	 * @covers WP_HTML_Tag_Processor::add_class
 	 */
 	public function test_add_class_overrides_boolean_class_attribute_even_before_updating() {
-		$p = new WP_HTML_Tag_Processor( self::HTML_SIMPLE );
-		$p->next_tag();
-		$p->set_attribute( 'class', true );
-		$p->add_class( 'add_class' );
+		$processor = new WP_HTML_Tag_Processor( self::HTML_SIMPLE );
+		$processor->next_tag();
+		$processor->set_attribute( 'class', true );
+		$processor->add_class( 'add_class' );
 		$this->assertSame(
 			'add_class',
-			$p->get_attribute( 'class' ),
+			$processor->get_attribute( 'class' ),
 			"get_attribute (called before get_updated_html()) doesn't reflect class added via add_class that was originally set as boolean attribute"
 		);
 		$this->assertSame(
 			'<div class="add_class" id="first"><span id="second">Text</span></div>',
-			$p->get_updated_html(),
+			$processor->get_updated_html(),
 			"Updated HTML doesn't reflect class added via add_class that was originally set as boolean attribute"
 		);
 	}
@@ -1607,12 +1613,12 @@ HTML;
 </div>
 HTML;
 
-		$p = new WP_HTML_Tag_Processor( $input );
-		$this->assertTrue( $p->next_tag( 'div' ), 'Did not find first DIV tag in input.' );
-		$p->set_attribute( 'data-details', '{ "key": "value" }' );
-		$p->add_class( 'is-processed' );
+		$processor = new WP_HTML_Tag_Processor( $input );
+		$this->assertTrue( $processor->next_tag( 'div' ), 'Did not find first DIV tag in input.' );
+		$processor->set_attribute( 'data-details', '{ "key": "value" }' );
+		$processor->add_class( 'is-processed' );
 		$this->assertTrue(
-			$p->next_tag(
+			$processor->next_tag(
 				array(
 					'tag_name'   => 'div',
 					'class_name' => 'BtnGroup',
@@ -1620,11 +1626,11 @@ HTML;
 			),
 			'Did not find the first BtnGroup DIV tag'
 		);
-		$p->remove_class( 'BtnGroup' );
-		$p->add_class( 'button-group' );
-		$p->add_class( 'Another-Mixed-Case' );
+		$processor->remove_class( 'BtnGroup' );
+		$processor->add_class( 'button-group' );
+		$processor->add_class( 'Another-Mixed-Case' );
 		$this->assertTrue(
-			$p->next_tag(
+			$processor->next_tag(
 				array(
 					'tag_name'   => 'div',
 					'class_name' => 'BtnGroup',
@@ -1632,11 +1638,11 @@ HTML;
 			),
 			'Did not find the second BtnGroup DIV tag'
 		);
-		$p->remove_class( 'BtnGroup' );
-		$p->add_class( 'button-group' );
-		$p->add_class( 'Another-Mixed-Case' );
+		$processor->remove_class( 'BtnGroup' );
+		$processor->add_class( 'button-group' );
+		$processor->add_class( 'Another-Mixed-Case' );
 		$this->assertTrue(
-			$p->next_tag(
+			$processor->next_tag(
 				array(
 					'tag_name'     => 'button',
 					'class_name'   => 'btn',
@@ -1645,10 +1651,10 @@ HTML;
 			),
 			'Did not find third BUTTON tag with "btn" CSS class'
 		);
-		$p->remove_attribute( 'class' );
-		$this->assertFalse( $p->next_tag( 'non-existent' ), "Found a {$p->get_tag()} tag when none should have been found." );
-		$p->set_attribute( 'class', 'test' );
-		$this->assertSame( $expected_output, $p->get_updated_html(), 'Calling get_updated_html after updating the attributes did not return the expected HTML' );
+		$processor->remove_attribute( 'class' );
+		$this->assertFalse( $processor->next_tag( 'non-existent' ), "Found a {$processor->get_tag()} tag when none should have been found." );
+		$processor->set_attribute( 'class', 'test' );
+		$this->assertSame( $expected_output, $processor->get_updated_html(), 'Calling get_updated_html after updating the attributes did not return the expected HTML' );
 	}
 
 	/**
@@ -1657,26 +1663,26 @@ HTML;
 	 * @covers WP_HTML_Tag_Processor::next_tag
 	 */
 	public function test_correctly_parses_html_attributes_wrapped_in_single_quotation_marks() {
-		$p = new WP_HTML_Tag_Processor(
+		$processor = new WP_HTML_Tag_Processor(
 			'<div id=\'first\'><span id=\'second\'>Text</span></div>'
 		);
-		$p->next_tag(
+		$processor->next_tag(
 			array(
 				'tag_name' => 'div',
 				'id'       => 'first',
 			)
 		);
-		$p->remove_attribute( 'id' );
-		$p->next_tag(
+		$processor->remove_attribute( 'id' );
+		$processor->next_tag(
 			array(
 				'tag_name' => 'span',
 				'id'       => 'second',
 			)
 		);
-		$p->set_attribute( 'id', 'single-quote' );
+		$processor->set_attribute( 'id', 'single-quote' );
 		$this->assertSame(
 			'<div ><span id="single-quote">Text</span></div>',
-			$p->get_updated_html(),
+			$processor->get_updated_html(),
 			'Did not remove single-quoted attribute'
 		);
 	}
@@ -1687,14 +1693,14 @@ HTML;
 	 * @covers WP_HTML_Tag_Processor::set_attribute
 	 */
 	public function test_set_attribute_with_value_equal_to_true_adds_a_boolean_html_attribute_with_implicit_value() {
-		$p = new WP_HTML_Tag_Processor(
+		$processor = new WP_HTML_Tag_Processor(
 			'<form action="/action_page.php"><input type="checkbox" name="vehicle" value="Bike"><label for="vehicle">I have a bike</label></form>'
 		);
-		$p->next_tag( 'input' );
-		$p->set_attribute( 'checked', true );
+		$processor->next_tag( 'input' );
+		$processor->set_attribute( 'checked', true );
 		$this->assertSame(
 			'<form action="/action_page.php"><input checked type="checkbox" name="vehicle" value="Bike"><label for="vehicle">I have a bike</label></form>',
-			$p->get_updated_html(),
+			$processor->get_updated_html(),
 			'Did not add "checked" as an expected boolean attribute'
 		);
 	}
@@ -1705,14 +1711,14 @@ HTML;
 	 * @covers WP_HTML_Tag_Processor::set_attribute
 	 */
 	public function test_setting_a_boolean_attribute_to_false_removes_it_from_the_markup() {
-		$p = new WP_HTML_Tag_Processor(
+		$processor = new WP_HTML_Tag_Processor(
 			'<form action="/action_page.php"><input checked type="checkbox" name="vehicle" value="Bike"><label for="vehicle">I have a bike</label></form>'
 		);
-		$p->next_tag( 'input' );
-		$p->set_attribute( 'checked', false );
+		$processor->next_tag( 'input' );
+		$processor->set_attribute( 'checked', false );
 		$this->assertSame(
 			'<form action="/action_page.php"><input  type="checkbox" name="vehicle" value="Bike"><label for="vehicle">I have a bike</label></form>',
-			$p->get_updated_html(),
+			$processor->get_updated_html(),
 			'Did not remove boolean attribute when set to false'
 		);
 	}
@@ -1724,12 +1730,12 @@ HTML;
 	 */
 	public function test_setting_a_missing_attribute_to_false_does_not_change_the_markup() {
 		$html_input = '<form action="/action_page.php"><input type="checkbox" name="vehicle" value="Bike"><label for="vehicle">I have a bike</label></form>';
-		$p          = new WP_HTML_Tag_Processor( $html_input );
-		$p->next_tag( 'input' );
-		$p->set_attribute( 'checked', false );
+		$processor  = new WP_HTML_Tag_Processor( $html_input );
+		$processor->next_tag( 'input' );
+		$processor->set_attribute( 'checked', false );
 		$this->assertSame(
 			$html_input,
-			$p->get_updated_html(),
+			$processor->get_updated_html(),
 			'Changed the markup unexpectedly when setting a non-existing attribute to false'
 		);
 	}
@@ -1740,14 +1746,14 @@ HTML;
 	 * @covers WP_HTML_Tag_Processor::set_attribute
 	 */
 	public function test_setting_a_boolean_attribute_to_a_string_value_adds_explicit_value_to_the_markup() {
-		$p = new WP_HTML_Tag_Processor(
+		$processor = new WP_HTML_Tag_Processor(
 			'<form action="/action_page.php"><input checked type="checkbox" name="vehicle" value="Bike"><label for="vehicle">I have a bike</label></form>'
 		);
-		$p->next_tag( 'input' );
-		$p->set_attribute( 'checked', 'checked' );
+		$processor->next_tag( 'input' );
+		$processor->set_attribute( 'checked', 'checked' );
 		$this->assertSame(
 			'<form action="/action_page.php"><input checked="checked" type="checkbox" name="vehicle" value="Bike"><label for="vehicle">I have a bike</label></form>',
-			$p->get_updated_html(),
+			$processor->get_updated_html(),
 			'Did not add string value to existing boolean attribute'
 		);
 	}
@@ -1756,12 +1762,21 @@ HTML;
 	 * @ticket 56299
 	 *
 	 * @covers WP_HTML_Tag_Processor::next_tag
+	 * @covers WP_HTML_Tag_Processor::paused_at_incomplete_token
 	 */
 	public function test_unclosed_script_tag_should_not_cause_an_infinite_loop() {
-		$p = new WP_HTML_Tag_Processor( '<script>' );
-		$p->next_tag();
-		$this->assertSame( 'SCRIPT', $p->get_tag(), 'Did not find script tag' );
-		$p->next_tag();
+		$processor = new WP_HTML_Tag_Processor( '<script><div>' );
+		$this->assertFalse(
+			$processor->next_tag(),
+			'Should not have stopped on an opening SCRIPT tag without a proper closing tag in the document.'
+		);
+		$this->assertTrue(
+			$processor->paused_at_incomplete_token(),
+			"Should have paused the parser because of the incomplete SCRIPT tag but didn't."
+		);
+
+		// Run this to ensure that the test ends (not in an infinite loop).
+		$processor->next_tag();
 	}
 
 	/**
@@ -1774,11 +1789,11 @@ HTML;
 	 * @param string $script_then_div HTML to test.
 	 */
 	public function test_next_tag_ignores_script_tag_contents( $script_then_div ) {
-		$p = new WP_HTML_Tag_Processor( $script_then_div );
-		$p->next_tag();
-		$this->assertSame( 'SCRIPT', $p->get_tag(), 'The first found tag was not "script"' );
-		$p->next_tag();
-		$this->assertSame( 'DIV', $p->get_tag(), 'The second found tag was not "div"' );
+		$processor = new WP_HTML_Tag_Processor( $script_then_div );
+		$processor->next_tag();
+		$this->assertSame( 'SCRIPT', $processor->get_tag(), 'The first found tag was not "script"' );
+		$processor->next_tag();
+		$this->assertSame( 'DIV', $processor->get_tag(), 'The second found tag was not "div"' );
 	}
 
 	/**
@@ -1786,7 +1801,7 @@ HTML;
 	 *
 	 * @return array[].
 	 */
-	public function data_next_tag_ignores_script_tag_contents() {
+	public static function data_next_tag_ignores_script_tag_contents() {
 		return array(
 			'Simple script tag'                          => array(
 				'<script><span class="d-none d-md-inline">Back to notifications</span></script><div></div>',
@@ -1851,11 +1866,11 @@ HTML;
 	 *                                  element after contain the "start" and "end" CSS classes.
 	 */
 	public function test_next_tag_ignores_invalid_first_character_of_tag_name_comments( $html_with_markers ) {
-		$p = new WP_HTML_Tag_Processor( $html_with_markers );
-		$p->next_tag( array( 'class_name' => 'start' ) );
-		$p->next_tag();
+		$processor = new WP_HTML_Tag_Processor( $html_with_markers );
+		$processor->next_tag( array( 'class_name' => 'start' ) );
+		$processor->next_tag();
 
-		$this->assertSame( 'end', $p->get_attribute( 'class' ) );
+		$this->assertSame( 'end', $processor->get_attribute( 'class' ) );
 	}
 
 	/**
@@ -1863,7 +1878,7 @@ HTML;
 	 *
 	 * @return array[]
 	 */
-	public function data_next_tag_ignores_invalid_first_character_of_tag_name_comments() {
+	public static function data_next_tag_ignores_invalid_first_character_of_tag_name_comments() {
 		return array(
 			'Invalid tag openers as normal text'           => array(
 				'<ul><li><div class=start>I <3 when outflow > inflow</div><img class=end></li></ul>',
@@ -1890,11 +1905,11 @@ HTML;
 	 * @param string $rcdata_tag      RCDATA tag.
 	 */
 	public function test_next_tag_ignores_contents_of_rcdata_tag( $rcdata_then_div, $rcdata_tag ) {
-		$p = new WP_HTML_Tag_Processor( $rcdata_then_div );
-		$p->next_tag();
-		$this->assertSame( $rcdata_tag, $p->get_tag(), "The first found tag was not '$rcdata_tag'" );
-		$p->next_tag();
-		$this->assertSame( 'DIV', $p->get_tag(), "The second found tag was not 'div'" );
+		$processor = new WP_HTML_Tag_Processor( $rcdata_then_div );
+		$processor->next_tag();
+		$this->assertSame( $rcdata_tag, $processor->get_tag(), "The first found tag was not '$rcdata_tag'" );
+		$processor->next_tag();
+		$this->assertSame( 'DIV', $processor->get_tag(), "The second found tag was not 'div'" );
 	}
 
 	/**
@@ -1902,7 +1917,7 @@ HTML;
 	 *
 	 * @return array[]
 	 */
-	public function data_next_tag_ignores_contents_of_rcdata_tag() {
+	public static function data_next_tag_ignores_contents_of_rcdata_tag() {
 		return array(
 			'simple textarea'                          => array(
 				'rcdata_then_div' => '<textarea><span class="d-none d-md-inline">Back to notifications</span></textarea><div></div>',
@@ -1931,6 +1946,30 @@ HTML;
 		);
 	}
 
+	/**
+	 * Ensures matching elements inside NOSCRIPT elements.
+	 *
+	 * In a browser when the scripting flag is enabled, everything inside
+	 * the NOSCRIPT element will be ignored and treated at RAW TEXT. This
+	 * means that it's valid to send what looks like incomplete or partial
+	 * HTML syntax without impacting a rendered page. The Tag Processor is
+	 * a parser with the scripting flag disabled, however, and needs to
+	 * expose all the potential content that some code might want to modify.
+	 *
+	 * Were it not for this then the NOSCRIPT tag would be handled like the
+	 * other tags in the RAW TEXT special group, e.g. NOEMBED or STYLE.
+	 *
+	 * @ticket 60122
+	 *
+	 * @covers WP_HTML_Tag_Processor::next_tag
+	 */
+	public function test_processes_inside_of_noscript_elements() {
+		$processor = new WP_HTML_Tag_Processor( '<noscript><input type="submit"></noscript><div>' );
+
+		$this->assertTrue( $processor->next_tag( 'INPUT' ), 'Failed to find INPUT element inside NOSCRIPT element.' );
+		$this->assertTrue( $processor->next_tag( 'DIV' ), 'Failed to find DIV element after NOSCRIPT element.' );
+	}
+
 	/**
 	 * @ticket 59292
 	 *
@@ -1957,12 +1996,11 @@ HTML;
 	 *
 	 * @return array[].
 	 */
-	public function data_next_tag_ignores_contents_of_rawtext_tags() {
+	public static function data_next_tag_ignores_contents_of_rawtext_tags() {
 		return array(
 			'IFRAME'           => array( '<iframe><section>Inside</section></iframe><section target>' ),
 			'NOEMBED'          => array( '<noembed><p></p></noembed><div target>' ),
 			'NOFRAMES'         => array( '<noframes><p>Check the rules here.</p></noframes><div target>' ),
-			'NOSCRIPT'         => array( '<noscript><span>This assumes that scripting mode is enabled.</span></noscript><p target>' ),
 			'STYLE'            => array( '<style>* { margin: 0 }</style><div target>' ),
 			'STYLE hiding DIV' => array( '<style>li::before { content: "<div non-target>" }</style><div target>' ),
 		);
@@ -1974,11 +2012,11 @@ HTML;
 	 * @covers WP_HTML_Tag_Processor::class_list
 	 */
 	public function test_class_list_empty_when_missing_class() {
-		$p = new WP_HTML_Tag_Processor( '<div>' );
-		$p->next_tag();
+		$processor = new WP_HTML_Tag_Processor( '<div>' );
+		$processor->next_tag();
 
 		$found_classes = false;
-		foreach ( $p->class_list() as $class ) {
+		foreach ( $processor->class_list() as $class ) {
 			$found_classes = true;
 		}
 
@@ -1991,11 +2029,11 @@ HTML;
 	 * @covers WP_HTML_Tag_Processor::class_list
 	 */
 	public function test_class_list_empty_when_class_is_boolean() {
-		$p = new WP_HTML_Tag_Processor( '<div class>' );
-		$p->next_tag();
+		$processor = new WP_HTML_Tag_Processor( '<div class>' );
+		$processor->next_tag();
 
 		$found_classes = false;
-		foreach ( $p->class_list() as $class ) {
+		foreach ( $processor->class_list() as $class ) {
 			$found_classes = true;
 		}
 
@@ -2008,11 +2046,11 @@ HTML;
 	 * @covers WP_HTML_Tag_Processor::class_list
 	 */
 	public function test_class_list_empty_when_class_is_empty() {
-		$p = new WP_HTML_Tag_Processor( '<div class="">' );
-		$p->next_tag();
+		$processor = new WP_HTML_Tag_Processor( '<div class="">' );
+		$processor->next_tag();
 
 		$found_classes = false;
-		foreach ( $p->class_list() as $class ) {
+		foreach ( $processor->class_list() as $class ) {
 			$found_classes = true;
 		}
 
@@ -2025,11 +2063,11 @@ HTML;
 	 * @covers WP_HTML_Tag_Processor::class_list
 	 */
 	public function test_class_list_visits_each_class_in_order() {
-		$p = new WP_HTML_Tag_Processor( '<div class="one two three">' );
-		$p->next_tag();
+		$processor = new WP_HTML_Tag_Processor( '<div class="one two three">' );
+		$processor->next_tag();
 
 		$found_classes = array();
-		foreach ( $p->class_list() as $class ) {
+		foreach ( $processor->class_list() as $class ) {
 			$found_classes[] = $class;
 		}
 
@@ -2042,11 +2080,11 @@ HTML;
 	 * @covers WP_HTML_Tag_Processor::class_list
 	 */
 	public function test_class_list_decodes_class_names() {
-		$p = new WP_HTML_Tag_Processor( '<div class="&notin;-class &lt;egg&gt; &#xff03;">' );
-		$p->next_tag();
+		$processor = new WP_HTML_Tag_Processor( '<div class="&notin;-class &lt;egg&gt; &#xff03;">' );
+		$processor->next_tag();
 
 		$found_classes = array();
-		foreach ( $p->class_list() as $class ) {
+		foreach ( $processor->class_list() as $class ) {
 			$found_classes[] = $class;
 		}
 
@@ -2059,11 +2097,11 @@ HTML;
 	 * @covers WP_HTML_Tag_Processor::class_list
 	 */
 	public function test_class_list_visits_unique_class_names_only_once() {
-		$p = new WP_HTML_Tag_Processor( '<div class="one one &#x6f;ne">' );
-		$p->next_tag();
+		$processor = new WP_HTML_Tag_Processor( '<div class="one one &#x6f;ne">' );
+		$processor->next_tag();
 
 		$found_classes = array();
-		foreach ( $p->class_list() as $class ) {
+		foreach ( $processor->class_list() as $class ) {
 			$found_classes[] = $class;
 		}
 
@@ -2082,13 +2120,13 @@ HTML;
 	 * @param bool   $has_class    Whether the sought class exists in the given HTML.
 	 */
 	public function test_has_class_handles_expected_class_name_variations( $html, $sought_class, $has_class ) {
-		$p = new WP_HTML_Tag_Processor( $html );
-		$p->next_tag();
+		$processor = new WP_HTML_Tag_Processor( $html );
+		$processor->next_tag();
 
 		if ( $has_class ) {
-			$this->assertTrue( $p->has_class( $sought_class ), "Failed to find expected class {$sought_class}." );
+			$this->assertTrue( $processor->has_class( $sought_class ), "Failed to find expected class {$sought_class}." );
 		} else {
-			$this->assertFalse( $p->has_class( $sought_class ), "Found class {$sought_class} when it doesn't exist." );
+			$this->assertFalse( $processor->has_class( $sought_class ), "Found class {$sought_class} when it doesn't exist." );
 		}
 	}
 
@@ -2097,7 +2135,7 @@ HTML;
 	 *
 	 * @return array[]
 	 */
-	public function data_html_with_variations_of_class_values_and_sought_class_names() {
+	public static function data_html_with_variations_of_class_values_and_sought_class_names() {
 		return array(
 			'Tag without any classes'      => array( '<div>', 'foo', false ),
 			'Tag with boolean class'       => array( '<img class>', 'foo', false ),
@@ -2121,16 +2159,16 @@ HTML;
 	 *
 	 */
 	public function test_allows_incorrectly_closed_comments() {
-		$p = new WP_HTML_Tag_Processor( '<img id=before><!-- <img id=inside> --!><img id=after>--><img id=final>' );
+		$processor = new WP_HTML_Tag_Processor( '<img id=before><!-- <img id=inside> --!><img id=after>--><img id=final>' );
 
-		$p->next_tag();
-		$this->assertSame( 'before', $p->get_attribute( 'id' ), 'Did not find starting tag.' );
+		$processor->next_tag();
+		$this->assertSame( 'before', $processor->get_attribute( 'id' ), 'Did not find starting tag.' );
 
-		$p->next_tag();
-		$this->assertSame( 'after', $p->get_attribute( 'id' ), 'Did not properly close improperly-closed comment.' );
+		$processor->next_tag();
+		$this->assertSame( 'after', $processor->get_attribute( 'id' ), 'Did not properly close improperly-closed comment.' );
 
-		$p->next_tag();
-		$this->assertSame( 'final', $p->get_attribute( 'id' ), 'Did not skip over unopened comment-closer.' );
+		$processor->next_tag();
+		$this->assertSame( 'final', $processor->get_attribute( 'id' ), 'Did not skip over unopened comment-closer.' );
 	}
 
 	/**
@@ -2139,15 +2177,24 @@ HTML;
 	 * @ticket 58007
 	 *
 	 * @covers WP_HTML_Tag_Processor::next_tag
+	 * @covers WP_HTML_Tag_Processor::paused_at_incomplete_token
 	 *
 	 * @dataProvider data_html_with_unclosed_comments
 	 *
-	 * @param string $html_ending_before_comment_close HTML with opened comments that aren't closed
+	 * @param string $html_ending_before_comment_close HTML with opened comments that aren't closed.
 	 */
 	public function test_documents_may_end_with_unclosed_comment( $html_ending_before_comment_close ) {
-		$p = new WP_HTML_Tag_Processor( $html_ending_before_comment_close );
+		$processor = new WP_HTML_Tag_Processor( $html_ending_before_comment_close );
 
-		$this->assertFalse( $p->next_tag() );
+		$this->assertFalse(
+			$processor->next_tag(),
+			"Should not have found any tag, but found {$processor->get_tag()}."
+		);
+
+		$this->assertTrue(
+			$processor->paused_at_incomplete_token(),
+			"Should have indicated that the parser found an incomplete token but didn't."
+		);
 	}
 
 	/**
@@ -2155,7 +2202,7 @@ HTML;
 	 *
 	 * @return array[]
 	 */
-	public function data_html_with_unclosed_comments() {
+	public static function data_html_with_unclosed_comments() {
 		return array(
 			'Shortest open valid comment'      => array( '<!--' ),
 			'Basic truncated comment'          => array( '<!-- this ends --' ),
@@ -2178,11 +2225,11 @@ HTML;
 	 * @param string $html_with_after_marker HTML to test with "id=after" on element immediately following an abruptly closed comment.
 	 */
 	public function test_closes_abrupt_closing_of_empty_comment( $html_with_after_marker ) {
-		$p = new WP_HTML_Tag_Processor( $html_with_after_marker );
-		$p->next_tag();
-		$p->next_tag();
+		$processor = new WP_HTML_Tag_Processor( $html_with_after_marker );
+		$processor->next_tag();
+		$processor->next_tag();
 
-		$this->assertSame( 'after', $p->get_attribute( 'id' ), 'Did not find tag after closing abruptly-closed comment' );
+		$this->assertSame( 'after', $processor->get_attribute( 'id' ), 'Did not find tag after closing abruptly-closed comment' );
 	}
 
 	/**
@@ -2190,7 +2237,7 @@ HTML;
 	 *
 	 * @return array[]
 	 */
-	public function data_abruptly_closed_empty_comments() {
+	public static function data_abruptly_closed_empty_comments() {
 		return array(
 			'Empty comment with two dashes only' => array( '<hr><!--><hr id=after>' ),
 			'Empty comment with two dashes only, improperly closed' => array( '<hr><!--!><hr id=inside>--><hr id=after>' ),
@@ -2215,11 +2262,11 @@ HTML;
 	 * @param $input_html HTML with multiple divs, one of which carries the "target" attribute.
 	 */
 	public function test_skips_contents_of_script_and_rcdata_regions( $input_html ) {
-		$p = new WP_HTML_Tag_Processor( $input_html );
-		$p->next_tag( 'div' );
+		$processor = new WP_HTML_Tag_Processor( $input_html );
+		$processor->next_tag( 'div' );
 
 		$this->assertTrue(
-			$p->get_attribute( 'target' ),
+			$processor->get_attribute( 'target' ),
 			'Did not properly skip over script and rcdata regions; incorrectly found tags inside'
 		);
 	}
@@ -2229,7 +2276,7 @@ HTML;
 	 *
 	 * @return array[]
 	 */
-	public function data_skips_contents_of_script_and_rcdata_regions() {
+	public static function data_skips_contents_of_script_and_rcdata_regions() {
 		return array(
 			'Balanced SCRIPT tags'                => array( '<script>console.log("<div>");</script><div target><div>' ),
 			'Unexpected SCRIPT closer after DIV'  => array( 'console.log("<div target>")</script><div><div>' ),
@@ -2248,16 +2295,16 @@ HTML;
 	 * @covers WP_HTML_Tag_Processor::set_attribute
 	 */
 	public function test_can_query_and_update_wrongly_nested_tags() {
-		$p = new WP_HTML_Tag_Processor(
+		$processor = new WP_HTML_Tag_Processor(
 			'<span>123<p>456</span>789</p>'
 		);
-		$p->next_tag( 'span' );
-		$p->set_attribute( 'class', 'span-class' );
-		$p->next_tag( 'p' );
-		$p->set_attribute( 'class', 'p-class' );
+		$processor->next_tag( 'span' );
+		$processor->set_attribute( 'class', 'span-class' );
+		$processor->next_tag( 'p' );
+		$processor->set_attribute( 'class', 'p-class' );
 		$this->assertSame(
 			'<span class="span-class">123<p class="p-class">456</span>789</p>',
-			$p->get_updated_html(),
+			$processor->get_updated_html(),
 			'Did not find overlapping p tag'
 		);
 	}
@@ -2269,28 +2316,83 @@ HTML;
 	 * @covers WP_HTML_Tag_Processor::remove_attribute
 	 */
 	public function test_removing_specific_attributes_in_malformed_html() {
-		$p = new WP_HTML_Tag_Processor( self::HTML_MALFORMED );
-		$p->next_tag( 'span' );
-		$p->remove_attribute( 'Notifications<' );
+		$processor = new WP_HTML_Tag_Processor( self::HTML_MALFORMED );
+		$processor->next_tag( 'span' );
+		$processor->remove_attribute( 'Notifications<' );
 		$this->assertSame(
 			'<div><span class="d-md-none" /span><span class="d-none d-md-inline">Back to notifications</span></div>',
-			$p->get_updated_html(),
+			$processor->get_updated_html(),
 			'Did not remove "Notifications<" attribute in malformed input'
 		);
 	}
 
 	/**
+	 * Ensures that no tags are matched in a document containing only non-tag content.
+	 *
+	 * @ticket 60122
+	 *
+	 * @covers WP_HTML_Tag_Processor::next_tag
+	 * @covers WP_HTML_Tag_Processor::paused_at_incomplete_token
+	 *
+	 * @dataProvider data_html_without_tags
+	 *
+	 * @param string $html_without_tags HTML without any tags in it.
+	 */
+	public function test_next_tag_returns_false_when_there_are_no_tags( $html_without_tags ) {
+		$processor = new WP_HTML_Tag_Processor( $html_without_tags );
+
+		$this->assertFalse(
+			$processor->next_tag(),
+			"Shouldn't have found any tags but found {$processor->get_tag()}."
+		);
+
+		$this->assertFalse(
+			$processor->paused_at_incomplete_token(),
+			'Should have indicated that end of document was reached without evidence that elements were truncated.'
+		);
+	}
+
+	/**
+	 * Data provider.
+	 *
+	 * @return array[]
+	 */
+	public static function data_html_without_tags() {
+		return array(
+			'DOCTYPE declaration'    => array( '<!DOCTYPE html>Just some HTML' ),
+			'No tags'                => array( 'this is nothing more than a text node' ),
+			'Text with comments'     => array( 'One <!-- sneaky --> comment.' ),
+			'Empty tag closer'       => array( '</>' ),
+			'CDATA as HTML comment'  => array( '<![CDATA[this closes at the first &gt;]>' ),
+			'Processing instruction' => array( '<?xml version="1.0"?>' ),
+			'Combination XML-like'   => array( '<!DOCTYPE xml><?xml version=""?><!-- this is not a real document. --><![CDATA[it only serves as a test]]>' ),
+		);
+	}
+
+	/**
+	 * Ensures that the processor doesn't attempt to match an incomplete token.
+	 *
 	 * @ticket 58637
 	 *
 	 * @covers WP_HTML_Tag_Processor::next_tag
+	 * @covers WP_HTML_Tag_Processor::paused_at_incomplete_token
 	 *
 	 * @dataProvider data_incomplete_syntax_elements
 	 *
 	 * @param string $incomplete_html HTML text containing some kind of incomplete syntax.
 	 */
-	public function test_returns_false_for_incomplete_syntax_elements( $incomplete_html ) {
-		$p = new WP_HTML_Tag_Processor( $incomplete_html );
-		$this->assertFalse( $p->next_tag() );
+	public function test_next_tag_returns_false_for_incomplete_syntax_elements( $incomplete_html ) {
+		$processor = new WP_HTML_Tag_Processor( $incomplete_html );
+
+		$this->assertFalse(
+			$processor->next_tag(),
+			"Shouldn't have found any tags but found {$processor->get_tag()}."
+		);
+
+		$this->assertTrue(
+			$processor->paused_at_incomplete_token(),
+			"Should have indicated that the parser found an incomplete token but didn't."
+		);
 	}
 
 	/**
@@ -2298,9 +2400,8 @@ HTML;
 	 *
 	 * @return array[]
 	 */
-	public function data_incomplete_syntax_elements() {
+	public static function data_incomplete_syntax_elements() {
 		return array(
-			'No tags'                              => array( 'this is nothing more than a text node' ),
 			'Incomplete tag name'                  => array( '<swit' ),
 			'Incomplete tag (no attributes)'       => array( '<div' ),
 			'Incomplete tag (attributes)'          => array( '<div inert title="test"' ),
@@ -2313,10 +2414,25 @@ HTML;
 			'Incomplete comment (bogus comment)'   => array( '</3 is not a tag' ),
 			'Incomplete DOCTYPE'                   => array( '<!DOCTYPE html' ),
 			'Partial DOCTYPE'                      => array( '<!DOCTY' ),
-			'Incomplete CDATA'                     => array( '<[CDATA[something inside of here needs to get out' ),
-			'Partial CDATA'                        => array( '<[CDA' ),
-			'Partially closed CDATA]'              => array( '<[CDATA[cannot escape]' ),
-			'Partially closed CDATA]>'             => array( '<[CDATA[cannot escape]>' ),
+			'Incomplete CDATA'                     => array( '<![CDATA[something inside of here needs to get out' ),
+			'Partial CDATA'                        => array( '<![CDA' ),
+			'Partially closed CDATA]'              => array( '<![CDATA[cannot escape]' ),
+			'Unclosed IFRAME'                      => array( '<iframe><div>' ),
+			'Unclosed NOEMBED'                     => array( '<noembed><div>' ),
+			'Unclosed NOFRAMES'                    => array( '<noframes><div>' ),
+			'Unclosed SCRIPT'                      => array( '<script><div>' ),
+			'Unclosed STYLE'                       => array( '<style><div>' ),
+			'Unclosed TEXTAREA'                    => array( '<textarea><div>' ),
+			'Unclosed TITLE'                       => array( '<title><div>' ),
+			'Unclosed XMP'                         => array( '<xmp><div>' ),
+			'Partially closed IFRAME'              => array( '<iframe><div></iframe' ),
+			'Partially closed NOEMBED'             => array( '<noembed><div></noembed' ),
+			'Partially closed NOFRAMES'            => array( '<noframes><div></noframes' ),
+			'Partially closed SCRIPT'              => array( '<script><div></script' ),
+			'Partially closed STYLE'               => array( '<style><div></style' ),
+			'Partially closed TEXTAREA'            => array( '<textarea><div></textarea' ),
+			'Partially closed TITLE'               => array( '<title><div></title' ),
+			'Partially closed XMP'                 => array( '<xmp><div></xmp' ),
 		);
 	}
 
@@ -2326,14 +2442,14 @@ HTML;
 	 * @covers WP_HTML_Tag_Processor::set_attribute
 	 */
 	public function test_updating_specific_attributes_in_malformed_html() {
-		$p = new WP_HTML_Tag_Processor( self::HTML_MALFORMED );
-		$p->next_tag( 'span' );
-		$p->set_attribute( 'id', 'first' );
-		$p->next_tag( 'span' );
-		$p->set_attribute( 'id', 'second' );
+		$processor = new WP_HTML_Tag_Processor( self::HTML_MALFORMED );
+		$processor->next_tag( 'span' );
+		$processor->set_attribute( 'id', 'first' );
+		$processor->next_tag( 'span' );
+		$processor->set_attribute( 'id', 'second' );
 		$this->assertSame(
 			'<div><span id="first" class="d-md-none" Notifications</span><span id="second" class="d-none d-md-inline">Back to notifications</span></div>',
-			$p->get_updated_html(),
+			$processor->get_updated_html(),
 			'Did not add id attributes properly to malformed input'
 		);
 	}
@@ -2350,16 +2466,16 @@ HTML;
 	 * @param string $expected Expected updated HTML.
 	 */
 	public function test_updating_attributes( $html, $expected ) {
-		$p = new WP_HTML_Tag_Processor( $html );
-		$p->next_tag();
-		$p->set_attribute( 'foo', 'bar' );
-		$p->add_class( 'firstTag' );
-		$p->next_tag();
-		$p->add_class( 'secondTag' );
+		$processor = new WP_HTML_Tag_Processor( $html );
+		$processor->next_tag();
+		$processor->set_attribute( 'foo', 'bar' );
+		$processor->add_class( 'firstTag' );
+		$processor->next_tag();
+		$processor->add_class( 'secondTag' );
 
 		$this->assertSame(
 			$expected,
-			$p->get_updated_html(),
+			$processor->get_updated_html(),
 			'Did not properly add attributes and class names'
 		);
 	}
@@ -2369,7 +2485,7 @@ HTML;
 	 *
 	 * @return array[]
 	 */
-	public function data_updating_attributes() {
+	public static function data_updating_attributes() {
 		return array(
 			'tags inside of a comment' => array(
 				'input'    => '<!-- this is a comment. no <strong>tags</strong> allowed --><span>test</span>',
@@ -2397,7 +2513,7 @@ HTML;
 			),
 			'tag inside of CDATA'      => array(
 				'input'    => '<![CDATA[This <is> a <strong id="yes">HTML Tag</strong>]]><span>test</span>',
-				'expected' => '<![CDATA[This <is> a <strong id="yes">HTML Tag</strong>]]><span class="firstTag" foo="bar">test</span>',
+				'expected' => '<![CDATA[This <is> a <strong class="firstTag" foo="bar" id="yes">HTML Tag</strong>]]><span class="secondTag">test</span>',
 			),
 		);
 	}
@@ -2414,16 +2530,16 @@ HTML;
 	 * @param string $expected Expected updated HTML.
 	 */
 	public function test_updating_attributes_in_malformed_html( $html, $expected ) {
-		$p = new WP_HTML_Tag_Processor( $html );
-		$p->next_tag();
-		$p->set_attribute( 'foo', 'bar' );
-		$p->add_class( 'firstTag' );
-		$p->next_tag();
-		$p->add_class( 'secondTag' );
+		$processor = new WP_HTML_Tag_Processor( $html );
+		$this->assertTrue( $processor->next_tag(), 'Could not find first tag.' );
+		$processor->set_attribute( 'foo', 'bar' );
+		$processor->add_class( 'firstTag' );
+		$processor->next_tag();
+		$processor->add_class( 'secondTag' );
 
 		$this->assertSame(
 			$expected,
-			$p->get_updated_html(),
+			$processor->get_updated_html(),
 			'Did not properly update attributes and classnames given malformed input'
 		);
 	}
@@ -2433,9 +2549,7 @@ HTML;
 	 *
 	 * @return array[]
 	 */
-	public function data_updating_attributes_in_malformed_html() {
-		$null_byte = chr( 0 );
-
+	public static function data_updating_attributes_in_malformed_html() {
 		return array(
 			'Invalid entity inside attribute value'        => array(
 				'input'    => '<img src="https://s0.wp.com/i/atat.png" title="&; First &lt;title&gt; is &notit;" TITLE="second title" title="An Imperial &imperial; AT-AT"><span>test</span>',
@@ -2494,8 +2608,8 @@ HTML;
 				'expected' => '<hr class="firstTag" foo="bar" id"quo="test"><span class="secondTag">test</span>',
 			),
 			'id without double quotation marks around null byte' => array(
-				'input'    => '<hr id' . $null_byte . 'zero="test"><span>test</span>',
-				'expected' => '<hr class="firstTag" foo="bar" id' . $null_byte . 'zero="test"><span class="secondTag">test</span>',
+				'input'    => "<hr id\x00zero=\"test\"><span>test</span>",
+				'expected' => "<hr class=\"firstTag\" foo=\"bar\" id\x00zero=\"test\"><span class=\"secondTag\">test</span>",
 			),
 			'Unexpected > before an attribute'             => array(
 				'input'    => '<hr >id="test"><span>test</span>',
@@ -2583,4 +2697,79 @@ HTML
 			),
 		);
 	}
+
+	/**
+	 * @covers WP_HTML_Tag_Processor::next_tag
+	 */
+	public function test_handles_malformed_taglike_open_short_html() {
+		$processor = new WP_HTML_Tag_Processor( '<' );
+		$result    = $processor->next_tag();
+		$this->assertFalse( $result, 'Did not handle "<" html properly.' );
+	}
+
+	/**
+	 * @covers WP_HTML_Tag_Processor::next_tag
+	 */
+	public function test_handles_malformed_taglike_close_short_html() {
+		$processor = new WP_HTML_Tag_Processor( '</ ' );
+		$result    = $processor->next_tag();
+		$this->assertFalse( $result, 'Did not handle "</ " html properly.' );
+	}
+
+	/**
+	 * Ensures that non-tag syntax starting with `<` is consumed inside a text node.
+	 *
+	 * @ticket 60385
+	 */
+	public function test_single_text_node_with_taglike_text() {
+		$processor = new WP_HTML_Tag_Processor( 'test< /A>' );
+		$processor->next_token();
+		$this->assertSame( '#text', $processor->get_token_type(), 'Did not find text node.' );
+		$this->assertSame( 'test< /A>', $processor->get_modifiable_text(), 'Did not find complete text node.' );
+	}
+
+	/**
+	 * Ensures that updates which are enqueued in front of the cursor
+	 * are applied before moving forward in the document.
+	 *
+	 * @ticket 60697
+	 */
+	public function test_applies_updates_before_proceeding() {
+		$html = '<div><img></div><div><img></div>';
+
+		$subclass = new class( $html ) extends WP_HTML_Tag_Processor {
+			/**
+			 * Inserts raw text after the current token.
+			 *
+			 * @param string $new_html Raw text to insert.
+			 */
+			public function insert_after( $new_html ) {
+				$this->set_bookmark( 'here' );
+				$this->lexical_updates[] = new WP_HTML_Text_Replacement(
+					$this->bookmarks['here']->start + $this->bookmarks['here']->length + 1,
+					0,
+					$new_html
+				);
+			}
+		};
+
+		$subclass->next_tag( 'img' );
+		$subclass->insert_after( '<p>snow-capped</p>' );
+
+		$subclass->next_tag();
+		$this->assertSame(
+			'P',
+			$subclass->get_tag(),
+			'Should have matched inserted HTML as next tag.'
+		);
+
+		$subclass->next_tag( 'img' );
+		$subclass->set_attribute( 'alt', 'mountain' );
+
+		$this->assertSame(
+			'<div><img><p>snow-capped</p></div><div><img alt="mountain"></div>',
+			$subclass->get_updated_html(),
+			'Should have properly applied the update from in front of the cursor.'
+		);
+	}
 }
diff --git a/tests/http/http.php b/tests/http/http.php
index 1648cca4ea..77a5239819 100644
--- a/tests/http/http.php
+++ b/tests/http/http.php
@@ -661,4 +661,56 @@ class Tests_HTTP_HTTP extends WP_UnitTestCase {
 		$this->assertSame( 'PASS', wp_remote_retrieve_body( $redirect_response ), 'Redirect response body is expected to be PASS.' );
 		$this->assertTrue( $pre_http_request_filter_has_run, 'The pre_http_request filter is expected to run.' );
 	}
+
+	/**
+	 * Test that WP_Http::normalize_cookies method correctly casts integer keys to string.
+	 * @ticket 58566
+	 *
+	 * @covers WP_Http::normalize_cookies
+	 */
+	public function test_normalize_cookies_casts_integer_keys_to_string() {
+		$http = _wp_http_get_object();
+
+		$cookies = array(
+			'1'   => 'foo',
+			2     => 'bar',
+			'qux' => 7,
+		);
+
+		$cookie_jar = $http->normalize_cookies( $cookies );
+
+		$this->assertInstanceOf( 'WpOrg\Requests\Cookie\Jar', $cookie_jar );
+
+		foreach ( array_keys( $cookies ) as $cookie ) {
+			if ( is_string( $cookie ) ) {
+				$this->assertInstanceOf( 'WpOrg\Requests\Cookie', $cookie_jar[ $cookie ] );
+			} else {
+				$this->assertInstanceOf( 'WpOrg\Requests\Cookie', $cookie_jar[ (string) $cookie ] );
+			}
+		}
+	}
+
+	/**
+	 * Test that WP_Http::normalize_cookies method correctly casts integer cookie names to strings.
+	 * @ticket 58566
+	 *
+	 * @covers WP_Http::normalize_cookies
+	 */
+	public function test_normalize_cookies_casts_cookie_name_integer_to_string() {
+		$http = _wp_http_get_object();
+
+		$cookies = array(
+			'foo' => new WP_Http_Cookie(
+				array(
+					'name'  => 1,
+					'value' => 'foo',
+				)
+			),
+		);
+
+		$cookie_jar = $http->normalize_cookies( $cookies );
+
+		$this->assertInstanceOf( 'WpOrg\Requests\Cookie\Jar', $cookie_jar );
+		$this->assertInstanceOf( 'WpOrg\Requests\Cookie', $cookie_jar['1'] );
+	}
 }
diff --git a/tests/image/editor.php b/tests/image/editor.php
index bd54b803e2..5e857bf472 100644
--- a/tests/image/editor.php
+++ b/tests/image/editor.php
@@ -292,12 +292,6 @@ class Tests_Image_Editor extends WP_Image_UnitTestCase {
 	 *
 	 */
 	public function test_wp_get_webp_info( $file, $expected ) {
-		$editor = wp_get_image_editor( $file );
-
-		if ( is_wp_error( $editor ) || ! $editor->supports_mime_type( 'image/webp' ) ) {
-			$this->markTestSkipped( sprintf( 'No WebP support in the editor engine %s on this system.', $this->editor_engine ) );
-		}
-
 		$file_data = wp_get_webp_info( $file );
 		$this->assertSame( $expected, $file_data );
 	}
@@ -363,4 +357,105 @@ class Tests_Image_Editor extends WP_Image_UnitTestCase {
 			),
 		);
 	}
+
+	/**
+	 * Test wp_get_avif_info.
+	 *
+	 * @ticket 51228
+	 *
+	 * @dataProvider data_wp_get_avif_info
+	 *
+	 * @param string $file     The path to the AVIF file for testing.
+	 * @param array  $expected The expected AVIF file information.
+	 */
+	public function test_wp_get_avif_info( $file, $expected ) {
+		$file_data = wp_get_avif_info( $file );
+		$this->assertSame( $expected, $file_data );
+	}
+
+	/**
+	 * Data provider for test_wp_get_avif_info().
+	 */
+	public function data_wp_get_avif_info() {
+		return array(
+			// Standard JPEG.
+			array(
+				DIR_TESTDATA . '/images/test-image.jpg',
+				array(
+					'width'        => false,
+					'height'       => false,
+					'bit_depth'    => false,
+					'num_channels' => false,
+				),
+			),
+			// Standard GIF.
+			array(
+				DIR_TESTDATA . '/images/test-image.gif',
+				array(
+					'width'        => false,
+					'height'       => false,
+					'bit_depth'    => false,
+					'num_channels' => false,
+				),
+			),
+			// Animated AVIF.
+			array(
+				DIR_TESTDATA . '/images/avif-animated.avif',
+				array(
+					'width'        => 150,
+					'height'       => 150,
+					'bit_depth'    => 8,
+					'num_channels' => 4,
+				),
+			),
+			// Lossless AVIF.
+			array(
+				DIR_TESTDATA . '/images/avif-lossless.avif',
+				array(
+					'width'        => 400,
+					'height'       => 400,
+					'bit_depth'    => 8,
+					'num_channels' => 3,
+				),
+			),
+			// Lossy AVIF.
+			array(
+				DIR_TESTDATA . '/images/avif-lossy.avif',
+				array(
+					'width'        => 400,
+					'height'       => 400,
+					'bit_depth'    => 8,
+					'num_channels' => 3,
+				),
+			),
+			// Transparent AVIF.
+			array(
+				DIR_TESTDATA . '/images/avif-transparent.avif',
+				array(
+					'width'        => 128,
+					'height'       => 128,
+					'bit_depth'    => 12,
+					'num_channels' => 4,
+				),
+			),
+			array(
+				DIR_TESTDATA . '/images/color_grid_alpha_nogrid.avif',
+				array(
+					'width'        => 80,
+					'height'       => 80,
+					'bit_depth'    => 8,
+					'num_channels' => 4,
+				),
+			),
+			array(
+				DIR_TESTDATA . '/images/colors_hdr_p3.avif',
+				array(
+					'width'        => 200,
+					'height'       => 200,
+					'bit_depth'    => 10,
+					'num_channels' => 3,
+				),
+			),
+		);
+	}
 }
diff --git a/tests/image/functions.php b/tests/image/functions.php
index f55b164496..56c81a62f0 100644
--- a/tests/image/functions.php
+++ b/tests/image/functions.php
@@ -111,6 +111,10 @@ class Tests_Image_Functions extends WP_UnitTestCase {
 			'webp-lossless.webp',
 			'webp-lossy.webp',
 			'webp-transparent.webp',
+			'avif-animated.avif',
+			'avif-lossless.avif',
+			'avif-lossy.avif',
+			'avif-transparent.avif',
 		);
 
 		return $this->text_array_to_dataprovider( $files );
@@ -186,6 +190,17 @@ class Tests_Image_Functions extends WP_UnitTestCase {
 			$files[] = 'webp-transparent.webp';
 		}
 
+		// Add AVIF images if the image editor supports them.
+		$file   = DIR_TESTDATA . '/images/avif-lossless.avif';
+		$editor = wp_get_image_editor( $file );
+
+		if ( ! is_wp_error( $editor ) && $editor->supports_mime_type( 'image/avif' ) ) {
+			$files[] = 'avif-animated.avif';
+			$files[] = 'avif-lossless.avif';
+			$files[] = 'avif-lossy.avif';
+			$files[] = 'avif-transparent.avif';
+		}
+
 		return $this->text_array_to_dataprovider( $files );
 	}
 
diff --git a/tests/image/header.php b/tests/image/header.php
index afb9feb61f..0257c732d4 100644
--- a/tests/image/header.php
+++ b/tests/image/header.php
@@ -108,25 +108,6 @@ class Tests_Image_Header extends WP_UnitTestCase {
 		$this->assertSame( 1200, $dimensions['dst_height'] );
 	}
 
-	public function test_create_attachment_object() {
-		$id = wp_insert_attachment(
-			array(
-				'post_status' => 'publish',
-				'post_title'  => 'foo.png',
-				'post_type'   => 'post',
-				'guid'        => 'http://localhost/foo.png',
-			)
-		);
-
-		$cropped = 'foo-cropped.png';
-
-		$object = $this->custom_image_header->create_attachment_object( $cropped, $id );
-		$this->assertSame( 'foo-cropped.png', $object['post_title'] );
-		$this->assertSame( 'http://localhost/' . $cropped, $object['guid'] );
-		$this->assertSame( 'custom-header', $object['context'] );
-		$this->assertSame( 'image/jpeg', $object['post_mime_type'] );
-	}
-
 	public function test_insert_cropped_attachment() {
 		$id = wp_insert_attachment(
 			array(
@@ -138,7 +119,7 @@ class Tests_Image_Header extends WP_UnitTestCase {
 		);
 
 		$cropped = 'foo-cropped.png';
-		$object  = $this->custom_image_header->create_attachment_object( $cropped, $id );
+		$object  = wp_copy_parent_attachment_properties( $cropped, $id, 'custom-header' );
 
 		$cropped_id = $this->custom_image_header->insert_attachment( $object, $cropped );
 
@@ -161,7 +142,7 @@ class Tests_Image_Header extends WP_UnitTestCase {
 
 		// Create inital crop object.
 		$cropped_1 = 'foo-cropped-1.png';
-		$object    = $this->custom_image_header->create_attachment_object( $cropped_1, $id );
+		$object    = wp_copy_parent_attachment_properties( $cropped_1, $id, 'custom-header' );
 
 		// Ensure no previous crop exists.
 		$previous = $this->custom_image_header->get_previous_crop( $object );
@@ -175,7 +156,7 @@ class Tests_Image_Header extends WP_UnitTestCase {
 
 		// Create second crop.
 		$cropped_2 = 'foo-cropped-2.png';
-		$object    = $this->custom_image_header->create_attachment_object( $cropped_2, $id );
+		$object    = wp_copy_parent_attachment_properties( $cropped_2, $id );
 
 		// Test that a previous crop is found.
 		$previous = $this->custom_image_header->get_previous_crop( $object );
diff --git a/tests/image/meta.php b/tests/image/meta.php
index b362cf1f20..8da543878b 100644
--- a/tests/image/meta.php
+++ b/tests/image/meta.php
@@ -32,15 +32,15 @@ class Tests_Image_Meta extends WP_UnitTestCase {
 		// Exif from a Nikon D70.
 		$out = wp_read_image_metadata( DIR_TESTDATA . '/images/2004-07-22-DSC_0008.jpg' );
 
-		$this->assertEquals( 6.3, $out['aperture'], 'Aperture value not equivalent' );
+		$this->assertSame( '6.3', $out['aperture'], 'Aperture value not equivalent' );
 		$this->assertSame( '', $out['credit'], 'Credit value not the same' );
 		$this->assertSame( 'NIKON D70', $out['camera'], 'Camera value not the same' );
 		$this->assertSame( '', $out['caption'], 'Caption value not the same' );
-		$this->assertEquals( strtotime( '2004-07-22 17:14:59' ), $out['created_timestamp'], 'Timestamp value not equivalent' );
+		$this->assertSame( (string) strtotime( '2004-07-22 17:14:59' ), $out['created_timestamp'], 'Timestamp value not equivalent' );
 		$this->assertSame( '', $out['copyright'], 'Copyright value not the same' );
-		$this->assertEquals( 27, $out['focal_length'], 'Focal length value not equivalent' );
-		$this->assertEquals( 400, $out['iso'], 'Iso value not equivalent' );
-		$this->assertEquals( 1 / 40, $out['shutter_speed'], 'Shutter speed value not equivalent' );
+		$this->assertSame( '27', $out['focal_length'], 'Focal length value not equivalent' );
+		$this->assertSame( '400', $out['iso'], 'Iso value not equivalent' );
+		$this->assertSame( (string) ( 1 / 40 ), $out['shutter_speed'], 'Shutter speed value not equivalent' );
 		$this->assertSame( '', $out['title'], 'Title value not the same' );
 	}
 
@@ -51,13 +51,13 @@ class Tests_Image_Meta extends WP_UnitTestCase {
 		$this->assertSame( '0', $out['aperture'], 'Aperture value not the same' );
 		$this->assertSame( '', $out['credit'], 'Credit value not the same' );
 		$this->assertSame( 'NIKON D70', $out['camera'], 'Camera value not the same' );
-		$this->assertSame( '', $out['caption'], 'Caption value not the same' );
-		$this->assertEquals( strtotime( '2007-06-17 21:18:00' ), $out['created_timestamp'], 'Timestamp value not equivalent' );
+		$this->assertSame( 'Copyright Alex Shiels', $out['caption'], 'Caption value not the same' );
+		$this->assertSame( (string) strtotime( '2007-06-17 21:18:00' ), $out['created_timestamp'], 'Timestamp value not equivalent' );
 		$this->assertSame( '', $out['copyright'], 'Copyright value not the same' );
-		$this->assertEquals( 0, $out['focal_length'], 'Focal length value not equivalent' );
-		$this->assertEquals( 0, $out['iso'], 'Iso value not equivalent' ); // Interesting - a Nikon bug?
-		$this->assertEquals( 1 / 500, $out['shutter_speed'], 'Shutter speed value not equivalent' );
-		$this->assertSame( '', $out['title'], 'Title value not the same' );
+		$this->assertSame( '0', $out['focal_length'], 'Focal length value not equivalent' );
+		$this->assertSame( '0', $out['iso'], 'Iso value not equivalent' ); // Interesting - a Nikon bug?
+		$this->assertSame( (string) ( 1 / 500 ), $out['shutter_speed'], 'Shutter speed value not equivalent' );
+		$this->assertSame( 'Copyright Alex Shiels', $out['title'], 'Title value not the same' );
 		// $this->assertSame( array( 'Flowers' ), $out['keywords'] );
 	}
 
@@ -65,15 +65,15 @@ class Tests_Image_Meta extends WP_UnitTestCase {
 		// Exif from a Nikon D70 with IPTC data added later.
 		$out = wp_read_image_metadata( DIR_TESTDATA . '/images/2004-07-22-DSC_0007.jpg' );
 
-		$this->assertEquals( 6.3, $out['aperture'], 'Aperture value not equivalent' );
+		$this->assertSame( '6.3', $out['aperture'], 'Aperture value not equivalent' );
 		$this->assertSame( 'IPTC Creator', $out['credit'], 'Credit value not the same' );
 		$this->assertSame( 'NIKON D70', $out['camera'], 'Camera value not the same' );
 		$this->assertSame( 'IPTC Caption', $out['caption'], 'Caption value not the same' );
-		$this->assertEquals( strtotime( '2004-07-22 17:14:35' ), $out['created_timestamp'], 'Timestamp value not equivalent' );
+		$this->assertSame( (string) strtotime( '2004-07-22 17:14:35' ), $out['created_timestamp'], 'Timestamp value not equivalent' );
 		$this->assertSame( 'IPTC Copyright', $out['copyright'], 'Copyright value not the same' );
-		$this->assertEquals( 18, $out['focal_length'], 'Focal length value not equivalent' );
-		$this->assertEquals( 200, $out['iso'], 'Iso value not equivalent' );
-		$this->assertEquals( 1 / 25, $out['shutter_speed'], 'Shutter speed value not equivalent' );
+		$this->assertSame( '18', $out['focal_length'], 'Focal length value not equivalent' );
+		$this->assertSame( '200', $out['iso'], 'Iso value not equivalent' );
+		$this->assertSame( (string) ( 1 / 25 ), $out['shutter_speed'], 'Shutter speed value not equivalent' );
 		$this->assertSame( 'IPTC Headline', $out['title'], 'Title value not the same' );
 	}
 
@@ -81,15 +81,15 @@ class Tests_Image_Meta extends WP_UnitTestCase {
 		// Exif from a Fuji FinePix S5600 (thanks Mark).
 		$out = wp_read_image_metadata( DIR_TESTDATA . '/images/a2-small.jpg' );
 
-		$this->assertEquals( 4.5, $out['aperture'], 'Aperture value not equivalent' );
+		$this->assertSame( '4.5', $out['aperture'], 'Aperture value not equivalent' );
 		$this->assertSame( '', $out['credit'], 'Credit value not the same' );
 		$this->assertSame( 'FinePix S5600', $out['camera'], 'Camera value not the same' );
 		$this->assertSame( '', $out['caption'], 'Caption value not the same' );
-		$this->assertEquals( strtotime( '2007-09-03 10:17:03' ), $out['created_timestamp'], 'Timestamp value not equivalent' );
+		$this->assertSame( (string) strtotime( '2007-09-03 10:17:03' ), $out['created_timestamp'], 'Timestamp value not equivalent' );
 		$this->assertSame( '', $out['copyright'], 'Copyright value not the same' );
-		$this->assertEquals( 6.3, $out['focal_length'], 'Focal length value not equivalent' );
-		$this->assertEquals( 64, $out['iso'], 'Iso value not equivalent' );
-		$this->assertEquals( 1 / 320, $out['shutter_speed'], 'Shutter speed value not equivalent' );
+		$this->assertSame( '6.3', $out['focal_length'], 'Focal length value not equivalent' );
+		$this->assertSame( '64', $out['iso'], 'Iso value not equivalent' );
+		$this->assertSame( (string) ( 1 / 320 ), $out['shutter_speed'], 'Shutter speed value not equivalent' );
 		$this->assertSame( '', $out['title'], 'Title value not the same' );
 	}
 
@@ -101,15 +101,15 @@ class Tests_Image_Meta extends WP_UnitTestCase {
 		// This triggers a warning mesage when reading the Exif block.
 		$out = wp_read_image_metadata( DIR_TESTDATA . '/images/waffles.jpg' );
 
-		$this->assertEquals( 0, $out['aperture'], 'Aperture value not equivalent' );
+		$this->assertSame( '0', $out['aperture'], 'Aperture value not equivalent' );
 		$this->assertSame( '', $out['credit'], 'Credit value not the same' );
 		$this->assertSame( '', $out['camera'], 'Camera value not the same' );
 		$this->assertSame( '', $out['caption'], 'Caption value not the same' );
-		$this->assertEquals( 0, $out['created_timestamp'], 'Timestamp value not equivalent' );
+		$this->assertSame( '0', $out['created_timestamp'], 'Timestamp value not equivalent' );
 		$this->assertSame( '', $out['copyright'], 'Copyright value not the same' );
-		$this->assertEquals( 0, $out['focal_length'], 'Focal length value not equivalent' );
-		$this->assertEquals( 0, $out['iso'], 'Iso value not equivalent' );
-		$this->assertEquals( 0, $out['shutter_speed'], 'Shutter speed value not equivalent' );
+		$this->assertSame( '0', $out['focal_length'], 'Focal length value not equivalent' );
+		$this->assertSame( '0', $out['iso'], 'Iso value not equivalent' );
+		$this->assertSame( '0', $out['shutter_speed'], 'Shutter speed value not equivalent' );
 		$this->assertSame( '', $out['title'], 'Title value not the same' );
 	}
 
@@ -117,15 +117,15 @@ class Tests_Image_Meta extends WP_UnitTestCase {
 		// No Exif data in this image (from burningwell.org).
 		$out = wp_read_image_metadata( DIR_TESTDATA . '/images/canola.jpg' );
 
-		$this->assertEquals( 0, $out['aperture'], 'Aperture value not equivalent' );
+		$this->assertSame( '0', $out['aperture'], 'Aperture value not equivalent' );
 		$this->assertSame( '', $out['credit'], 'Credit value not the same' );
 		$this->assertSame( '', $out['camera'], 'Camera value not the same' );
 		$this->assertSame( '', $out['caption'], 'Caption value not the same' );
-		$this->assertEquals( 0, $out['created_timestamp'], 'Timestamp value not equivalent' );
+		$this->assertSame( '0', $out['created_timestamp'], 'Timestamp value not equivalent' );
 		$this->assertSame( '', $out['copyright'], 'Copyright value not the same' );
-		$this->assertEquals( 0, $out['focal_length'], 'Focal length value not equivalent' );
-		$this->assertEquals( 0, $out['iso'], 'Iso value not equivalent' );
-		$this->assertEquals( 0, $out['shutter_speed'], 'Shutter speed value not equivalent' );
+		$this->assertSame( '0', $out['focal_length'], 'Focal length value not equivalent' );
+		$this->assertSame( '0', $out['iso'], 'Iso value not equivalent' );
+		$this->assertSame( '0', $out['shutter_speed'], 'Shutter speed value not equivalent' );
 		$this->assertSame( '', $out['title'], 'Title value not the same' );
 	}
 
@@ -158,13 +158,13 @@ class Tests_Image_Meta extends WP_UnitTestCase {
 		$this->assertSame( 'Photoshop Author', $out['credit'], 'Credit value not the same' );
 		$this->assertSame( 'DMC-LX2', $out['camera'], 'Camera value not the same' );
 		$this->assertSame( 'Photoshop Description', $out['caption'], 'Caption value not the same' );
-		$this->assertEquals( 1306315327, $out['created_timestamp'], 'Timestamp value not equivalent' );
+		$this->assertSame( '1306315327', $out['created_timestamp'], 'Timestamp value not equivalent' );
 		$this->assertSame( 'Photoshop Copyrright Notice', $out['copyright'], 'Copyright value not the same' );
 		$this->assertSame( '6.3', $out['focal_length'], 'Focal length value not the same' );
 		$this->assertSame( '100', $out['iso'], 'Iso value not the same' );
 		$this->assertSame( '0.0025', $out['shutter_speed'], 'Shutter speed value not the same' );
 		$this->assertSame( 'Photoshop Document Ttitle', $out['title'], 'Title value not the same' );
-		$this->assertEquals( 1, $out['orientation'], 'Orientation value not equivalent' );
+		$this->assertSame( '1', $out['orientation'], 'Orientation value not equivalent' );
 		$this->assertSame( array( 'beach', 'baywatch', 'LA', 'sunset' ), $out['keywords'], 'Keywords not the same' );
 	}
 
@@ -246,15 +246,15 @@ class Tests_Image_Meta extends WP_UnitTestCase {
 		// Unexpected Exif data: FNumber is "0/0", aperture should be 0.
 		$out = wp_read_image_metadata( DIR_TESTDATA . '/images/sugarloaf-mountain.jpg' );
 
-		$this->assertEquals( 0, $out['aperture'], 'Aperture value not equivalent' );
+		$this->assertSame( '0', $out['aperture'], 'Aperture value not equivalent' );
 		$this->assertSame( '', $out['credit'], 'Credit value not the same' );
 		$this->assertSame( 'X-T1', $out['camera'], 'Camera value not the same' );
 		$this->assertSame( '', $out['caption'], 'Caption value not the same' );
-		$this->assertEquals( 0, $out['created_timestamp'], 'Timestamp value not equivalent' );
+		$this->assertSame( '0', $out['created_timestamp'], 'Timestamp value not equivalent' );
 		$this->assertSame( '', $out['copyright'], 'Copyright value not the same' );
-		$this->assertEquals( 50, $out['focal_length'], 'Focal length value not equivalent' );
-		$this->assertEquals( 200, $out['iso'], 'Iso value not equivalent' );
-		$this->assertEquals( 2, $out['shutter_speed'], 'Shutter speed value not equivalent' );
+		$this->assertSame( '50', $out['focal_length'], 'Focal length value not equivalent' );
+		$this->assertSame( '200', $out['iso'], 'Iso value not equivalent' );
+		$this->assertSame( '2', $out['shutter_speed'], 'Shutter speed value not equivalent' );
 		$this->assertSame( 'Sugarloaf Panorama', $out['title'], 'Title value not the same' );
 	}
 }
diff --git a/tests/image/resize.php b/tests/image/resize.php
index 5b302ce295..e82dd3d2e6 100644
--- a/tests/image/resize.php
+++ b/tests/image/resize.php
@@ -88,6 +88,32 @@ abstract class WP_Tests_Image_Resize_UnitTestCase extends WP_Image_UnitTestCase
 		$this->assertSame( IMAGETYPE_WEBP, $type );
 	}
 
+	/**
+	 * Test resizing AVIF image.
+	 *
+	 * @ticket 51228
+	 */
+	public function test_resize_avif() {
+		$file   = DIR_TESTDATA . '/images/avif-lossy.avif';
+		$editor = wp_get_image_editor( $file );
+
+		// Check if the editor supports the avif mime type.
+		if ( is_wp_error( $editor ) || ! $editor->supports_mime_type( 'image/avif' ) ) {
+			$this->markTestSkipped( sprintf( 'No AVIF support in the editor engine %s on this system.', $this->editor_engine ) );
+		}
+
+		$image = $this->resize_helper( $file, 25, 25 );
+
+		list( $w, $h, $type ) = wp_getimagesize( $image );
+
+		unlink( $image );
+
+		$this->assertSame( 'avif-lossy-25x25.avif', wp_basename( $image ) );
+		$this->assertSame( 25, $w );
+		$this->assertSame( 25, $h );
+		$this->assertSame( IMAGETYPE_AVIF, $type );
+	}
+
 	public function test_resize_larger() {
 		// image_resize() should refuse to make an image larger.
 		$image = $this->resize_helper( DIR_TESTDATA . '/images/test-image.jpg', 100, 100 );
diff --git a/tests/image/siteIcon.php b/tests/image/siteIcon.php
index 369aed06f9..4927c1b4ff 100644
--- a/tests/image/siteIcon.php
+++ b/tests/image/siteIcon.php
@@ -98,26 +98,12 @@ class Tests_WP_Site_Icon extends WP_UnitTestCase {
 		unset( $this->wp_site_icon->site_icon_sizes[ array_search( 321, $this->wp_site_icon->site_icon_sizes, true ) ] );
 	}
 
-	public function test_create_attachment_object() {
-		$attachment_id = $this->insert_attachment();
-		$parent_url    = get_post( $attachment_id )->guid;
-		$cropped       = str_replace( wp_basename( $parent_url ), 'cropped-test-image.jpg', $parent_url );
-
-		$object = $this->wp_site_icon->create_attachment_object( $cropped, $attachment_id );
-
-		$this->assertSame( $object['post_title'], 'cropped-test-image.jpg' );
-		$this->assertSame( $object['context'], 'site-icon' );
-		$this->assertSame( $object['post_mime_type'], 'image/jpeg' );
-		$this->assertSame( $object['post_content'], $cropped );
-		$this->assertSame( $object['guid'], $cropped );
-	}
-
 	public function test_insert_cropped_attachment() {
 		$attachment_id = $this->insert_attachment();
 		$parent_url    = get_post( $attachment_id )->guid;
 		$cropped       = str_replace( wp_basename( $parent_url ), 'cropped-test-image.jpg', $parent_url );
 
-		$object     = $this->wp_site_icon->create_attachment_object( $cropped, $attachment_id );
+		$object     = wp_copy_parent_attachment_properties( $cropped, $attachment_id, 'site-icon' );
 		$cropped_id = $this->wp_site_icon->insert_attachment( $object, $cropped );
 
 		$this->assertIsInt( $cropped_id );
diff --git a/tests/interactivity-api/wpInteractivityAPI-wp-bind.php b/tests/interactivity-api/wpInteractivityAPI-wp-bind.php
new file mode 100644
index 0000000000..ef1b79326d
--- /dev/null
+++ b/tests/interactivity-api/wpInteractivityAPI-wp-bind.php
@@ -0,0 +1,399 @@
+<?php
+/**
+ * Unit tests covering the data_wp_bind_processor functionality of the
+ * WP_Interactivity_API class.
+ *
+ * @package WordPress
+ * @subpackage Interactivity API
+ *
+ * @coversDefaultClass WP_Interactivity_API
+ *
+ * @since 6.5.0
+ *
+ * @group interactivity-api
+ */
+class Tests_WP_Interactivity_API_WP_Bind extends WP_UnitTestCase {
+	/**
+	 * Instance of WP_Interactivity_API.
+	 *
+	 * @var WP_Interactivity_API
+	 */
+	protected $interactivity;
+
+	/**
+	 * Set up.
+	 */
+	public function set_up() {
+		parent::set_up();
+		$this->interactivity = new WP_Interactivity_API();
+		$this->interactivity->state(
+			'myPlugin',
+			array(
+				'id'          => 'some-id',
+				'width'       => 100,
+				'isOpen'      => false,
+				'null'        => null,
+				'trueString'  => 'true',
+				'falseString' => 'false',
+				'trueValue'   => true,
+				'falseValue'  => false,
+			)
+		);
+	}
+
+	/**
+	 * Invokes the `process_directives` method of WP_Interactivity_API class.
+	 *
+	 * @param string $html The HTML that needs to be processed.
+	 * @return array An array containing an instance of the WP_HTML_Tag_Processor and the processed HTML.
+	 */
+	private function process_directives( $html ) {
+		$new_html = $this->interactivity->process_directives( $html );
+		$p        = new WP_HTML_Tag_Processor( $new_html );
+		$p->next_tag();
+		return array( $p, $new_html );
+	}
+
+	/**
+	 * Tests setting an attribute via `data-wp-bind`.
+	 *
+	 * @ticket 60356
+	 *
+	 * @covers ::process_directives
+	 */
+	public function test_wp_bind_sets_attribute() {
+		$html    = '<div data-wp-bind--id="myPlugin::state.id">Text</div>';
+		list($p) = $this->process_directives( $html );
+		$this->assertSame( 'some-id', $p->get_attribute( 'id' ) );
+	}
+
+	/**
+	 * Tests replacing an existing attribute via `data-wp-bind`.
+	 *
+	 * @ticket 60356
+	 *
+	 * @covers ::process_directives
+	 */
+	public function test_wp_bind_replaces_attribute() {
+		$html    = '<div id="other-id" data-wp-bind--id="myPlugin::state.id">Text</div>';
+		list($p) = $this->process_directives( $html );
+		$this->assertSame( 'some-id', $p->get_attribute( 'id' ) );
+	}
+
+	/**
+	 * Tests setting a numerical value as an attribute via `data-wp-bind`.
+	 *
+	 * @ticket 60356
+	 *
+	 * @covers ::process_directives
+	 */
+	public function test_wp_bind_sets_number_value() {
+		$html    = '<img data-wp-bind--width="myPlugin::state.width">';
+		list($p) = $this->process_directives( $html );
+		$this->assertSame( '100', $p->get_attribute( 'width' ) );
+	}
+
+	/**
+	 * Tests that true strings are set properly as attribute values.
+	 *
+	 * @ticket 60356
+	 *
+	 * @covers ::process_directives
+	 */
+	public function test_wp_bind_sets_true_string() {
+		$html               = '<div data-wp-bind--id="myPlugin::state.trueString">Text</div>';
+		list($p, $new_html) = $this->process_directives( $html );
+		$this->assertSame( 'true', $p->get_attribute( 'id' ) );
+		$this->assertSame( '<div id="true" data-wp-bind--id="myPlugin::state.trueString">Text</div>', $new_html );
+	}
+
+	/**
+	 * Tests that false strings are set properly as attribute values.
+	 *
+	 * @ticket 60356
+	 *
+	 * @covers ::process_directives
+	 */
+	public function test_wp_bind_sets_false_string() {
+		$html               = '<div data-wp-bind--id="myPlugin::state.falseString">Text</div>';
+		list($p, $new_html) = $this->process_directives( $html );
+		$this->assertSame( 'false', $p->get_attribute( 'id' ) );
+		$this->assertSame( '<div id="false" data-wp-bind--id="myPlugin::state.falseString">Text</div>', $new_html );
+	}
+
+	/**
+	 * Tests that `data-wp-bind` ignores directives with no suffix.
+	 *
+	 * @ticket 60356
+	 *
+	 * @covers ::process_directives
+	 */
+	public function test_wp_bind_ignores_empty_bound_attribute() {
+		$html     = '<div data-wp-bind="myPlugin::state.id">Text</div>';
+		$new_html = $this->interactivity->process_directives( $html );
+		$this->assertSame( $html, $new_html );
+	}
+
+	/**
+	 * Tests that `data-wp-bind` does nothing when referencing non-existent
+	 * references.
+	 *
+	 * @ticket 60356
+	 *
+	 * @covers ::process_directives
+	 */
+	public function test_wp_bind_doesnt_do_anything_on_non_existent_references() {
+		$html     = '<div data-wp-bind--id="myPlugin::state.nonExistengKey">Text</div>';
+		$new_html = $this->interactivity->process_directives( $html );
+		$this->assertSame( $html, $new_html );
+	}
+
+	/**
+	 * Tests that `data-wp-bind` ignores directives with empty values.
+	 *
+	 * @ticket 60356
+	 *
+	 * @covers ::process_directives
+	 */
+	public function test_wp_bind_ignores_empty_value() {
+		$html     = '<div data-wp-bind--id="">Text</div>';
+		$new_html = $this->interactivity->process_directives( $html );
+		$this->assertSame( $html, $new_html );
+	}
+
+	/**
+	 * Tests that `data-wp-bind` ignores directives without values.
+	 *
+	 * @ticket 60356
+	 *
+	 * @covers ::process_directives
+	 */
+	public function test_wp_bind_ignores_without_value() {
+		$html     = '<div data-wp-bind--id>Text</div>';
+		$new_html = $this->interactivity->process_directives( $html );
+		$this->assertSame( $html, $new_html );
+	}
+
+	/**
+	 * Tests that `data-wp-bind` works with multiple instances of the same
+	 * directive on a tag.
+	 *
+	 * @ticket 60356
+	 *
+	 * @covers ::process_directives
+	 */
+	public function test_wp_bind_works_with_multiple_same_directives() {
+		$html    = '<div data-wp-bind--id="myPlugin::state.id" data-wp-bind--id="myPlugin::state.id">Text</div>';
+		list($p) = $this->process_directives( $html );
+		$this->assertSame( 'some-id', $p->get_attribute( 'id' ) );
+	}
+
+	/**
+	 * Tests that `data-wp-bind` works with multiple instances of different
+	 * directives on a tag.
+	 *
+	 * @ticket 60356
+	 *
+	 * @covers ::process_directives
+	 */
+	public function test_wp_bind_works_with_multiple_different_directives() {
+		$html    = '<img data-wp-bind--id="myPlugin::state.id" data-wp-bind--width="myPlugin::state.width">';
+		list($p) = $this->process_directives( $html );
+		$this->assertSame( 'some-id', $p->get_attribute( 'id' ) );
+		$this->assertSame( '100', $p->get_attribute( 'width' ) );
+	}
+
+	/**
+	 * Tests adding boolean attributes to a tag using `data-wp-bind`.
+	 *
+	 * @ticket 60356
+	 *
+	 * @covers ::process_directives
+	 */
+	public function test_wp_bind_adds_boolean_attribute_if_true() {
+		$html               = '<div data-wp-bind--hidden="myPlugin::!state.isOpen">Text</div>';
+		list($p, $new_html) = $this->process_directives( $html );
+		$this->assertTrue( $p->get_attribute( 'hidden' ) );
+		$this->assertSame( '<div hidden data-wp-bind--hidden="myPlugin::!state.isOpen">Text</div>', $new_html );
+	}
+
+	/**
+	 * Tests replacing a pre-existing boolean attribute on a tag using
+	 * `data-wp-bind`.
+	 *
+	 * @ticket 60356
+	 *
+	 * @covers ::process_directives
+	 */
+	public function test_wp_bind_replaces_existing_attribute_if_true() {
+		$html               = '<div hidden="true" data-wp-bind--hidden="myPlugin::!state.isOpen">Text</div>';
+		list($p, $new_html) = $this->process_directives( $html );
+		$this->assertTrue( $p->get_attribute( 'hidden' ) );
+		$this->assertSame( '<div hidden data-wp-bind--hidden="myPlugin::!state.isOpen">Text</div>', $new_html );
+	}
+
+	/**
+	 * Tests that boolean attributes are not added when bound to false or null
+	 * values.
+	 *
+	 * @ticket 60356
+	 *
+	 * @covers ::process_directives
+	 */
+	public function test_wp_bind_doesnt_add_boolean_attribute_if_false_or_null() {
+		$html               = '<div data-wp-bind--hidden="myPlugin::state.isOpen">Text</div>';
+		list($p, $new_html) = $this->process_directives( $html );
+		$this->assertNull( $p->get_attribute( 'hidden' ) );
+		$this->assertSame( $html, $new_html );
+
+		$html               = '<div data-wp-bind--hidden="myPlugin::state.null">Text</div>';
+		list($p, $new_html) = $this->process_directives( $html );
+		$this->assertNull( $p->get_attribute( 'hidden' ) );
+		$this->assertSame( $html, $new_html );
+	}
+
+	/**
+	 * Tests removing boolean attributes from a tag using `data-wp-bind` and a
+	 * false or null value.
+	 *
+	 * @ticket 60356
+	 *
+	 * @covers ::process_directives
+	 */
+	public function test_wp_bind_removes_boolean_attribute_if_false_or_null() {
+		$html    = '<div hidden data-wp-bind--hidden="myPlugin::state.isOpen">Text</div>';
+		list($p) = $this->process_directives( $html );
+		$this->assertNull( $p->get_attribute( 'hidden' ) );
+
+		$html    = '<div hidden data-wp-bind--hidden="myPlugin::state.null">Text</div>';
+		list($p) = $this->process_directives( $html );
+		$this->assertNull( $p->get_attribute( 'hidden' ) );
+	}
+
+	/**
+	 * Tests adding values to aria or data attributes when the condition evaluates
+	 * to true.
+	 *
+	 * @ticket 60356
+	 *
+	 * @covers ::process_directives
+	 */
+	public function test_wp_bind_adds_value_if_true_in_aria_or_data_attributes() {
+		$html               = '<div data-wp-bind--aria-hidden="myPlugin::!state.isOpen">Text</div>';
+		list($p, $new_html) = $this->process_directives( $html );
+		$this->assertSame( 'true', $p->get_attribute( 'aria-hidden' ) );
+		$this->assertSame( '<div aria-hidden="true" data-wp-bind--aria-hidden="myPlugin::!state.isOpen">Text</div>', $new_html );
+
+		$html               = '<div data-wp-bind--data-is-closed="myPlugin::!state.isOpen">Text</div>';
+		list($p, $new_html) = $this->process_directives( $html );
+		$this->assertSame( 'true', $p->get_attribute( 'data-is-closed' ) );
+		$this->assertSame( '<div data-is-closed="true" data-wp-bind--data-is-closed="myPlugin::!state.isOpen">Text</div>', $new_html );
+	}
+
+	/**
+	 * Tests replacing values in aria or data attributes when the condition
+	 * evaluates to true.
+	 *
+	 * @ticket 60356
+	 *
+	 * @covers ::process_directives
+	 */
+	public function test_wp_bind_replaces_value_if_true_in_aria_or_data_attributes() {
+		$html               = '<div aria-hidden="false" data-wp-bind--aria-hidden="myPlugin::!state.isOpen">Text</div>';
+		list($p, $new_html) = $this->process_directives( $html );
+		$this->assertSame( 'true', $p->get_attribute( 'aria-hidden' ) );
+		$this->assertSame( '<div aria-hidden="true" data-wp-bind--aria-hidden="myPlugin::!state.isOpen">Text</div>', $new_html );
+
+		$html     = '<div data-is-closed="false" data-wp-bind--data-is-closed="myPlugin::!state.isOpen">Text</div>';
+		$new_html = $this->interactivity->process_directives( $html );
+		$p        = new WP_HTML_Tag_Processor( $new_html );
+		$p->next_tag();
+		$this->assertSame( 'true', $p->get_attribute( 'data-is-closed' ) );
+		$this->assertSame( '<div data-is-closed="true" data-wp-bind--data-is-closed="myPlugin::!state.isOpen">Text</div>', $new_html );
+	}
+
+	/**
+	 * Tests adding the value 'false' to aria or data attributes when the
+	 * condition evaluates to false.
+	 *
+	 * @ticket 60356
+	 *
+	 * @covers ::process_directives
+	 */
+	public function test_wp_bind_adds_value_if_false_in_aria_or_data_attributes() {
+		$html               = '<div data-wp-bind--aria-hidden="myPlugin::state.isOpen">Text</div>';
+		list($p, $new_html) = $this->process_directives( $html );
+		$this->assertSame( 'false', $p->get_attribute( 'aria-hidden' ) );
+		$this->assertSame( '<div aria-hidden="false" data-wp-bind--aria-hidden="myPlugin::state.isOpen">Text</div>', $new_html );
+
+		$html               = '<div data-wp-bind--data-is-closed="myPlugin::state.isOpen">Text</div>';
+		list($p, $new_html) = $this->process_directives( $html );
+		$this->assertSame( 'false', $p->get_attribute( 'data-is-closed' ) );
+		$this->assertSame( '<div data-is-closed="false" data-wp-bind--data-is-closed="myPlugin::state.isOpen">Text</div>', $new_html );
+	}
+
+	/**
+	 * Tests replacing values in aria or data attributes when the condition
+	 * evaluates to false.
+	 *
+	 * @ticket 60356
+	 *
+	 * @covers ::process_directives
+	 */
+	public function test_wp_bind_replaces_value_if_false_in_aria_or_data_attributes() {
+		$html               = '<div aria-hidden="true" data-wp-bind--aria-hidden="myPlugin::state.isOpen">Text</div>';
+		list($p, $new_html) = $this->process_directives( $html );
+		$this->assertSame( 'false', $p->get_attribute( 'aria-hidden' ) );
+		$this->assertSame( '<div aria-hidden="false" data-wp-bind--aria-hidden="myPlugin::state.isOpen">Text</div>', $new_html );
+
+		$html               = '<div data-is-closed="true" data-wp-bind--data-is-closed="myPlugin::state.isOpen">Text</div>';
+		list($p, $new_html) = $this->process_directives( $html );
+		$this->assertSame( 'false', $p->get_attribute( 'data-is-closed' ) );
+		$this->assertSame( '<div data-is-closed="false" data-wp-bind--data-is-closed="myPlugin::state.isOpen">Text</div>', $new_html );
+	}
+
+	/**
+	 * Tests removing values from aria or data attributes when the value is null.
+	 *
+	 * @ticket 60356
+	 *
+	 * @covers ::process_directives
+	 */
+	public function test_wp_bind_removes_value_if_null_in_aria_or_data_attributes() {
+		$html    = '<div aria-hidden="true" data-wp-bind--aria-hidden="myPlugin::state.null">Text</div>';
+		list($p) = $this->process_directives( $html );
+		$this->assertNull( $p->get_attribute( 'aria-hidden' ) );
+
+		$html    = '<div data-is-closed="true" data-wp-bind--data-is-closed="myPlugin::state.null">Text</div>';
+		list($p) = $this->process_directives( $html );
+		$this->assertNull( $p->get_attribute( 'data-is-closed' ) );
+	}
+
+	/**
+	 * Tests handling of bindings within nested tags.
+	 *
+	 * @ticket 60356
+	 *
+	 * @covers ::process_directives
+	 */
+	public function test_wp_bind_handles_nested_bindings() {
+		$html    = '<div data-wp-bind--id="myPlugin::state.id"><img data-wp-bind--width="myPlugin::state.width"></div>';
+		list($p) = $this->process_directives( $html );
+		$this->assertSame( 'some-id', $p->get_attribute( 'id' ) );
+		$p->next_tag();
+		$this->assertSame( '100', $p->get_attribute( 'width' ) );
+	}
+
+	/**
+	 * Tests handling bindings to boolean values.
+	 *
+	 * @ticket 60758
+	 *
+	 * @covers ::process_directives
+	 */
+	public function test_wp_bind_handles_true_value() {
+		$html    = '<div data-wp-bind--id="myPlugin::state.trueValue"></div>';
+		list($p) = $this->process_directives( $html );
+		$this->assertSame( true, $p->get_attribute( 'id' ) );
+	}
+}
diff --git a/tests/interactivity-api/wpInteractivityAPI-wp-class.php b/tests/interactivity-api/wpInteractivityAPI-wp-class.php
new file mode 100644
index 0000000000..95fdaed6f7
--- /dev/null
+++ b/tests/interactivity-api/wpInteractivityAPI-wp-class.php
@@ -0,0 +1,329 @@
+<?php
+/**
+ * Unit tests covering the data_wp_class_processor functionality of the
+ * WP_Interactivity_API class.
+ *
+ * @package WordPress
+ * @subpackage Interactivity API
+ *
+ * @since 6.5.0
+ *
+ * @coversDefaultClass WP_Interactivity_API
+ *
+ * @group interactivity-api
+ */
+class Tests_WP_Interactivity_API_WP_Class extends WP_UnitTestCase {
+	/**
+	 * Instance of WP_Interactivity_API.
+	 *
+	 * @var WP_Interactivity_API
+	 */
+	protected $interactivity;
+
+	/**
+	 * Set up.
+	 */
+	public function set_up() {
+		parent::set_up();
+		$this->interactivity = new WP_Interactivity_API();
+		$this->interactivity->state(
+			'myPlugin',
+			array(
+				'true'  => true,
+				'false' => false,
+			)
+		);
+	}
+
+	/**
+	 * Invokes the `process_directives` method of WP_Interactivity_API class.
+	 *
+	 * @param string $html The HTML that needs to be processed.
+	 * @return array An array containing an instance of the WP_HTML_Tag_Processor and the processed HTML.
+	 */
+	private function process_directives( $html ) {
+		$new_html = $this->interactivity->process_directives( $html );
+		$p        = new WP_HTML_Tag_Processor( $new_html );
+		$p->next_tag();
+		return array( $p, $new_html );
+	}
+
+	/**
+	 * Tests that `data-wp-class` adds a class when the condition is true.
+	 *
+	 * @ticket 60356
+	 *
+	 * @covers ::process_directives
+	 */
+	public function test_wp_class_sets_class_name() {
+		$html    = '<div data-wp-class--some-class="myPlugin::state.true">Text</div>';
+		list($p) = $this->process_directives( $html );
+		$this->assertEquals( 'some-class', $p->get_attribute( 'class' ) );
+	}
+
+	/**
+	 * Tests that `data-wp-class` can add multiple classes based on true
+	 * conditions.
+	 *
+	 * @ticket 60356
+	 *
+	 * @covers ::process_directives
+	 */
+	public function test_wp_class_sets_multiple_class_names() {
+		$html    = '
+			<div
+				data-wp-class--some-class="myPlugin::state.true"
+				data-wp-class--other-class="myPlugin::state.true"
+			>Text</div>';
+		list($p) = $this->process_directives( $html );
+		$this->assertEquals( 'some-class other-class', $p->get_attribute( 'class' ) );
+	}
+
+	/**
+	 * Tests handling of adding one and not adding another class based on
+	 * different boolean values.
+	 *
+	 * @ticket 60356
+	 *
+	 * @covers ::process_directives
+	 */
+	public function test_wp_class_handles_multiple_class_names_with_different_values() {
+		$html    = '
+			<div
+				data-wp-class--some-class="myPlugin::state.true"
+				data-wp-class--other-class="myPlugin::state.false"
+			>Text</div>';
+		list($p) = $this->process_directives( $html );
+		$this->assertEquals( 'some-class', $p->get_attribute( 'class' ) );
+
+		$html    = '
+			<div
+				class="other-class"
+				data-wp-class--some-class="myPlugin::state.true"
+				data-wp-class--other-class="myPlugin::state.false"
+			>Text</div>';
+		list($p) = $this->process_directives( $html );
+		$this->assertEquals( 'some-class', $p->get_attribute( 'class' ) );
+	}
+
+	/**
+	 * Tests that `data-wp-class` adds new classes alongside existing ones.
+	 *
+	 * @ticket 60356
+	 *
+	 * @covers ::process_directives
+	 */
+	public function test_wp_class_sets_class_name_when_class_attribute_exists() {
+		$html    = '<div class="other-class" data-wp-class--some-class="myPlugin::state.true">Text</div>';
+		list($p) = $this->process_directives( $html );
+		$this->assertEquals( 'other-class some-class', $p->get_attribute( 'class' ) );
+	}
+
+	/**
+	 * Tests that no class is added when the associated state is false.
+	 *
+	 * @ticket 60356
+	 *
+	 * @covers ::process_directives
+	 */
+	public function test_wp_class_doesnt_add_class_attribute_on_false() {
+		$html    = '<div data-wp-class--some-class="myPlugin::state.false">Text</div>';
+		list($p) = $this->process_directives( $html );
+		$this->assertNull( $p->get_attribute( 'class' ) );
+	}
+
+	/**
+	 * Tests that existing class names are preserved when the directive condition
+	 * is false.
+	 *
+	 * @ticket 60356
+	 *
+	 * @covers ::process_directives
+	 */
+	public function test_wp_class_doesnt_add_class_name_on_false() {
+		$html    = '<div class="other-class" data-wp-class--some-class="myPlugin::state.false">Text</div>';
+		list($p) = $this->process_directives( $html );
+		$this->assertEquals( 'other-class', $p->get_attribute( 'class' ) );
+	}
+
+	/**
+	 * Tests that existing class names remain intact when they should be re-added
+	 * as per their directive.
+	 *
+	 * @ticket 60356
+	 *
+	 * @covers ::process_directives
+	 */
+	public function test_wp_class_keeps_class_name_when_class_name_exists() {
+		$html    = '<div class="some-class" data-wp-class--some-class="myPlugin::state.true">Text</div>';
+		list($p) = $this->process_directives( $html );
+		$this->assertEquals( 'some-class', $p->get_attribute( 'class' ) );
+	}
+
+	/**
+	 * Tests preservation of existing class names, even when one is repeated in a
+	 * directive that evaluates to true.
+	 *
+	 * @ticket 60356
+	 *
+	 * @covers ::process_directives
+	 */
+	public function test_wp_class_keeps_class_name_when_class_name_exists_and_is_not_the_only_one() {
+		$html    = '<div class="other-class some-class" data-wp-class--some-class="myPlugin::state.true">Text</div>';
+		list($p) = $this->process_directives( $html );
+		$this->assertEquals( 'other-class some-class', $p->get_attribute( 'class' ) );
+	}
+
+	/**
+	 * Tests that a class attribute with only one class name is removed when the
+	 * directive evaluates to false.
+	 *
+	 * @ticket 60356
+	 *
+	 * @covers ::process_directives
+	 */
+	public function test_wp_class_removes_class_attribute_when_class_name_exists_and_is_the_only_one() {
+		$html    = '<div class="some-class" data-wp-class--some-class="myPlugin::state.false">Text</div>';
+		list($p) = $this->process_directives( $html );
+		$this->assertNull( $p->get_attribute( 'class' ) );
+	}
+
+	/**
+	 * Tests that one of several class names is removed when its directive
+	 * evaluates to false.
+	 *
+	 * @ticket 60356
+	 *
+	 * @covers ::process_directives
+	 */
+	public function test_wp_class_removes_class_name_when_class_name_exists_and_is_not_the_only_one() {
+		$html    = '<div class="other-class some-class" data-wp-class--some-class="myPlugin::state.false">Text</div>';
+		list($p) = $this->process_directives( $html );
+		$this->assertEquals( 'other-class', $p->get_attribute( 'class' ) );
+	}
+
+	/**
+	 * Tests that an empty class attribute is not removed even if a directive
+	 * evaluates to false.
+	 *
+	 * @ticket 60356
+	 *
+	 * @covers ::process_directives
+	 */
+	public function test_wp_class_doesnt_remove_empty_class_attribute() {
+		$html    = '<div class data-wp-class--some-class="myPlugin::state.false">Text</div>';
+		list($p) = $this->process_directives( $html );
+		$this->assertTrue( $p->get_attribute( 'class' ) );
+	}
+
+	/**
+	 * Tests that the class attribute remains unchanged if the data-wp-class
+	 * suffix is empty.
+	 *
+	 * @ticket 60356
+	 *
+	 * @covers ::process_directives
+	 */
+	public function test_wp_class_doesnt_change_class_attribute_with_empty_directive_suffix() {
+		$html    = '<div class="other-class" data-wp-class="myPlugin::state.true">Text</div>';
+		list($p) = $this->process_directives( $html );
+		$this->assertEquals( 'other-class', $p->get_attribute( 'class' ) );
+	}
+
+	/**
+	 * Tests that the class attribute is not altered if the value of the
+	 * `data-wp-class` directive is empty.
+	 *
+	 * @ticket 60356
+	 *
+	 * @covers ::process_directives
+	 */
+	public function test_wp_class_doesnt_change_class_attribute_with_empty_value() {
+		$html    = '<div class="other-class" data-wp-class--some-class="">Text</div>';
+		list($p) = $this->process_directives( $html );
+		$this->assertEquals( 'other-class', $p->get_attribute( 'class' ) );
+	}
+
+	/**
+	 * Tests that an existing class attribute is not affected by a `data-wp-class`
+	 * directive without a value.
+	 *
+	 * @ticket 60356
+	 *
+	 * @covers ::process_directives
+	 */
+	public function test_wp_class_doesnt_change_class_attribute_without_value() {
+		$html    = '<div class="other-class" data-wp-class--some-class>Text</div>';
+		list($p) = $this->process_directives( $html );
+		$this->assertEquals( 'other-class', $p->get_attribute( 'class' ) );
+	}
+
+	/**
+	 * Tests that multiple directives for the same class yield the correct result
+	 * when the condition is true.
+	 *
+	 * @ticket 60356
+	 *
+	 * @covers ::process_directives
+	 */
+	public function test_wp_class_works_with_multiple_directives() {
+		$html    = '<div data-wp-class--some-class="myPlugin::state.true" data-wp-class--some-class="myPlugin::state.true">Text</div>';
+		list($p) = $this->process_directives( $html );
+		$this->assertEquals( 'some-class', $p->get_attribute( 'class' ) );
+	}
+
+	/**
+	 * Tests setting class names based on truthy values other than just true
+	 * booleans.
+	 *
+	 * @ticket 60356
+	 *
+	 * @covers ::process_directives
+	 */
+	public function test_wp_class_sets_class_name_on_truthy_values() {
+		$this->interactivity->state( 'myPlugin', array( 'text' => 'some text' ) );
+		$html    = '<div data-wp-class--some-class="myPlugin::state.text">Text</div>';
+		list($p) = $this->process_directives( $html );
+		$this->assertEquals( 'some-class', $p->get_attribute( 'class' ) );
+
+		$this->interactivity->state( 'myPlugin', array( 'array' => array( 1, 2 ) ) );
+		$html    = '<div data-wp-class--some-class="myPlugin::state.array">Text</div>';
+		list($p) = $this->process_directives( $html );
+		$this->assertEquals( 'some-class', $p->get_attribute( 'class' ) );
+
+		$this->interactivity->state( 'myPlugin', array( 'number' => 1 ) );
+		$html    = '<div data-wp-class--some-class="myPlugin::state.number">Text</div>';
+		list($p) = $this->process_directives( $html );
+		$this->assertEquals( 'some-class', $p->get_attribute( 'class' ) );
+	}
+
+	/**
+	 * Tests that class attributes aren't set for falsy values other than just
+	 * false booleans.
+	 *
+	 * @ticket 60356
+	 *
+	 * @covers ::process_directives
+	 */
+	public function test_wp_class_sets_class_name_on_falsy_values() {
+		$this->interactivity->state( 'myPlugin', array( 'text' => '' ) );
+		$html    = '<div data-wp-class--some-class="myPlugin::state.text">Text</div>';
+		list($p) = $this->process_directives( $html );
+		$this->assertNull( $p->get_attribute( 'class' ) );
+
+		$this->interactivity->state( 'myPlugin', array( 'array' => array() ) );
+		$html    = '<div data-wp-class--some-class="myPlugin::state.array">Text</div>';
+		list($p) = $this->process_directives( $html );
+		$this->assertNull( $p->get_attribute( 'class' ) );
+
+		$this->interactivity->state( 'myPlugin', array( 'number' => 0 ) );
+		$html    = '<div data-wp-class--some-class="myPlugin::state.number">Text</div>';
+		list($p) = $this->process_directives( $html );
+		$this->assertNull( $p->get_attribute( 'class' ) );
+
+		$this->interactivity->state( 'myPlugin', array( 'null' => null ) );
+		$html    = '<div data-wp-class--some-class="myPlugin::state.null">Text</div>';
+		list($p) = $this->process_directives( $html );
+		$this->assertNull( $p->get_attribute( 'class' ) );
+	}
+}
diff --git a/tests/interactivity-api/wpInteractivityAPI-wp-context.php b/tests/interactivity-api/wpInteractivityAPI-wp-context.php
new file mode 100644
index 0000000000..469e1d6e14
--- /dev/null
+++ b/tests/interactivity-api/wpInteractivityAPI-wp-context.php
@@ -0,0 +1,524 @@
+<?php
+/**
+ * Unit tests covering the data_wp_context_processor functionality of the
+ * WP_Interactivity_API class.
+ *
+ * @package WordPress
+ * @subpackage Interactivity API
+ *
+ * @since 6.5.0
+ *
+ * @coversDefaultClass WP_Interactivity_API
+ *
+ * @group interactivity-api
+ */
+class Tests_WP_Interactivity_API_WP_Context extends WP_UnitTestCase {
+	/**
+	 * Instance of WP_Interactivity_API.
+	 *
+	 * @var WP_Interactivity_API
+	 */
+	protected $interactivity;
+
+	/**
+	 * Set up.
+	 */
+	public function set_up() {
+		parent::set_up();
+		$this->interactivity = new WP_Interactivity_API();
+	}
+
+	/**
+	 * Invokes the `process_directives` method of WP_Interactivity_API class.
+	 *
+	 * @param string $html The HTML that needs to be processed.
+	 * @return array An array containing an instance of the WP_HTML_Tag_Processor and the processed HTML.
+	 */
+	private function process_directives( $html ) {
+		$new_html = $this->interactivity->process_directives( $html );
+		$p        = new WP_HTML_Tag_Processor( $new_html );
+		$p->next_tag( array( 'class_name' => 'test' ) );
+		return array( $p, $new_html );
+	}
+
+	/**
+	 * Tests that the `data-wp-context` directive can set a context in a custom
+	 * namespace.
+	 *
+	 * @ticket 60356
+	 *
+	 * @covers ::process_directives
+	 */
+	public function test_wp_context_directive_sets_a_context_in_a_custom_namespace() {
+		$html    = '
+			<div data-wp-context=\'myPlugin::{ "id": "some-id" }\'>
+				<div class="test" data-wp-bind--id="myPlugin::context.id">Text</div>
+			</div>
+		';
+		list($p) = $this->process_directives( $html );
+		$this->assertEquals( 'some-id', $p->get_attribute( 'id' ) );
+	}
+
+	/**
+	 * Tests that the `data-wp-context` directive can set a context in the same
+	 * tag.
+	 *
+	 * @ticket 60356
+	 *
+	 * @covers ::process_directives
+	 */
+	public function test_wp_context_directive_can_set_a_context_in_the_same_tag() {
+		$html    = '
+			<div
+				class="test"
+				data-wp-context=\'myPlugin::{ "id": "some-id" }\'
+				data-wp-bind--id="myPlugin::context.id"
+			>
+				Text
+			</div>
+		';
+		list($p) = $this->process_directives( $html );
+		$this->assertEquals( 'some-id', $p->get_attribute( 'id' ) );
+	}
+
+	/**
+	 * Tests that the `data-wp-context` directive merges context in the same
+	 * custom namespace.
+	 *
+	 * @ticket 60356
+	 *
+	 * @covers ::process_directives
+	 */
+	public function test_wp_context_directive_merges_context_in_the_same_custom_namespace() {
+		$html    = '
+			<div data-wp-context=\'myPlugin::{ "id1": "some-id-1" }\'>
+				<div data-wp-context=\'myPlugin::{ "id2": "some-id-2" }\'>
+					<div class="test" data-wp-bind--id="myPlugin::context.id1">Text</div>
+					<div class="test" data-wp-bind--id="myPlugin::context.id2">Text</div>
+				</div>
+			</div>
+		';
+		list($p) = $this->process_directives( $html );
+		$this->assertEquals( 'some-id-1', $p->get_attribute( 'id' ) );
+		$p->next_tag( array( 'class_name' => 'test' ) );
+		$this->assertEquals( 'some-id-2', $p->get_attribute( 'id' ) );
+	}
+
+	/**
+	 * Tests that the `data-wp-context` directive overwrites context in the same
+	 * custom namespace.
+	 *
+	 * @ticket 60356
+	 *
+	 * @covers ::process_directives
+	 */
+	public function test_wp_context_directive_overwrites_context_in_the_same_custom_namespace() {
+		$html    = '
+			<div data-wp-context=\'myPlugin::{ "id": "some-id-1" }\'>
+				<div data-wp-context=\'myPlugin::{ "id": "some-id-2" }\'>
+					<div class="test" data-wp-bind--id="myPlugin::context.id">Text</div>
+				</div>
+			</div>
+		';
+		list($p) = $this->process_directives( $html );
+		$this->assertEquals( 'some-id-2', $p->get_attribute( 'id' ) );
+	}
+
+	/**
+	 * Tests that the `data-wp-context` directive replaces the old context after a
+	 * closing tag in the same custom namespace.
+	 *
+	 * @ticket 60356
+	 *
+	 * @covers ::process_directives
+	 */
+	public function test_wp_context_directive_replaces_old_context_after_closing_tag_in_the_same_custom_namespace() {
+		$html    = '
+			<div data-wp-context=\'myPlugin::{ "id": "some-id-1" }\'>
+				<div data-wp-context=\'myPlugin::{ "id": "some-id-2" }\'>
+					<div class="test" data-wp-bind--id="myPlugin::context.id">Text</div>
+				</div>
+				<div class="test" data-wp-bind--id="myPlugin::context.id">Text</div>
+			</div>
+		';
+		list($p) = $this->process_directives( $html );
+		$this->assertEquals( 'some-id-2', $p->get_attribute( 'id' ) );
+		$p->next_tag( array( 'class_name' => 'test' ) );
+		$this->assertEquals( 'some-id-1', $p->get_attribute( 'id' ) );
+	}
+
+	/**
+	 * Tests that the `data-wp-context` directive merges context in different
+	 * custom namespaces.
+	 *
+	 * @ticket 60356
+	 *
+	 * @covers ::process_directives
+	 */
+	public function test_wp_context_directive_merges_context_in_different_custom_namespaces() {
+		$html    = '
+			<div data-wp-context=\'myPlugin::{ "id": "some-id-1" }\'>
+				<div data-wp-context=\'otherPlugin::{ "id": "some-id-2" }\'>
+					<div class="test" data-wp-bind--id="myPlugin::context.id">Text</div>
+					<div class="test" data-wp-bind--id="otherPlugin::context.id">Text</div>
+				</div>
+			</div>
+		';
+		list($p) = $this->process_directives( $html );
+		$this->assertEquals( 'some-id-1', $p->get_attribute( 'id' ) );
+		$p->next_tag( array( 'class_name' => 'test' ) );
+		$this->assertEquals( 'some-id-2', $p->get_attribute( 'id' ) );
+	}
+
+	/**
+	 * Tests that the `data-wp-context` directive doesn't throw on malformed
+	 * context objects.
+	 *
+	 * @ticket 60356
+	 *
+	 * @covers ::process_directives
+	 */
+	public function test_wp_context_directive_doesnt_throw_on_malformed_context_objects() {
+		$html    = '
+			<div data-wp-context=\'myPlugin::{ id: "some-id" }\'>
+				<div class="test" data-wp-bind--id="myPlugin::context.id">Text</div>
+			</div>
+		';
+		list($p) = $this->process_directives( $html );
+		$this->assertNull( $p->get_attribute( 'id' ) );
+	}
+
+	/**
+	 * Tests that the `data-wp-context` directive doesn't overwrite context on
+	 * malformed context objects.
+	 *
+	 * @ticket 60356
+	 *
+	 * @covers ::process_directives
+	 */
+	public function test_wp_context_directive_doesnt_overwrite_context_on_malformed_context_objects() {
+		$html    = '
+			<div data-wp-context=\'myPlugin::{ "id": "some-id-1" }\'>
+				<div data-wp-context=\'myPlugin::{ id: "some-id-2" }\'>
+					<div class="test" data-wp-bind--id="myPlugin::context.id">Text</div>
+				</div>
+				<div class="test" data-wp-bind--id="myPlugin::context.id">Text</div>
+			</div>
+		';
+		list($p) = $this->process_directives( $html );
+		$this->assertEquals( 'some-id-1', $p->get_attribute( 'id' ) );
+		$p->next_tag( array( 'class_name' => 'test' ) );
+		$this->assertEquals( 'some-id-1', $p->get_attribute( 'id' ) );
+	}
+
+	/**
+	 * Tests that the `data-wp-context` directive doesn't throw on an empty
+	 * context object.
+	 *
+	 * @ticket 60356
+	 *
+	 * @covers ::process_directives
+	 */
+	public function test_wp_context_directive_doesnt_throw_on_empty_context() {
+		$html    = '
+			<div data-wp-context="">
+				<div class="test" data-wp-bind--id="myPlugin::context.id">Text</div>
+			</div>
+		';
+		list($p) = $this->process_directives( $html );
+		$this->assertNull( $p->get_attribute( 'id' ) );
+	}
+
+	/**
+	 * Tests that the `data-wp-context` directive doesn't overwrite the context on
+	 * empty context directive.
+	 *
+	 * @ticket 60356
+	 *
+	 * @covers ::process_directives
+	 */
+	public function test_wp_context_directive_doesnt_overwrite_context_on_empty_context() {
+		$html    = '
+			<div data-wp-context=\'myPlugin::{ "id": "some-id-1" }\'>
+				<div data-wp-context="">
+					<div class="test" data-wp-bind--id="myPlugin::context.id">Text</div>
+				</div>
+				<div class="test" data-wp-bind--id="myPlugin::context.id">Text</div>
+			</div>
+		';
+		list($p) = $this->process_directives( $html );
+		$this->assertEquals( 'some-id-1', $p->get_attribute( 'id' ) );
+		$p->next_tag( array( 'class_name' => 'test' ) );
+		$this->assertEquals( 'some-id-1', $p->get_attribute( 'id' ) );
+	}
+
+	/**
+	 * Tests that the `data-wp-context` directive doesn't throw on context without
+	 * value.
+	 *
+	 * @ticket 60356
+	 *
+	 * @covers ::process_directives
+	 */
+	public function test_wp_context_directive_doesnt_throw_on_context_without_value() {
+		$html    = '
+			<div data-wp-context>
+				<div class="test" data-wp-bind--id="myPlugin::context.id">Text</div>
+			</div>
+		';
+		list($p) = $this->process_directives( $html );
+		$this->assertNull( $p->get_attribute( 'id' ) );
+	}
+
+	/**
+	 * Tests that the `data-wp-context` directive doesn't overwrite context on
+	 * context without value.
+	 *
+	 * @ticket 60356
+	 *
+	 * @covers ::process_directives
+	 */
+	public function test_wp_context_directive_doesnt_overwrite_context_on_context_without_value() {
+		$html    = '
+			<div data-wp-context=\'myPlugin::{ "id": "some-id-1" }\'>
+				<div data-wp-context>
+					<div class="test" data-wp-bind--id="myPlugin::context.id">Text</div>
+				</div>
+				<div class="test" data-wp-bind--id="myPlugin::context.id">Text</div>
+			</div>
+		';
+		list($p) = $this->process_directives( $html );
+		$this->assertEquals( 'some-id-1', $p->get_attribute( 'id' ) );
+		$p->next_tag( array( 'class_name' => 'test' ) );
+		$this->assertEquals( 'some-id-1', $p->get_attribute( 'id' ) );
+	}
+
+	/**
+	 * Tests that the `data-wp-context` directive works with multiple directives.
+	 *
+	 * @ticket 60356
+	 *
+	 * @covers ::process_directives
+	 */
+	public function test_wp_context_works_with_multiple_directives() {
+		$html    = '
+			<div data-wp-context=\'myPlugin::{ "id": "some-id" }\' data-wp-context=\'myPlugin::{ "id": "some-id" }\'>
+				<div class="test" data-wp-bind--id="myPlugin::context.id">Text</div>
+			</div>
+		';
+		list($p) = $this->process_directives( $html );
+		$this->assertEquals( 'some-id', $p->get_attribute( 'id' ) );
+	}
+
+	/**
+	 * Tests that the `data-wp-context` directive doesn't work without any
+	 * namespace.
+	 *
+	 * @ticket 60356
+	 *
+	 * @covers ::process_directives
+	 */
+	public function test_wp_context_directive_doesnt_work_without_any_namespace() {
+		$html    = '
+			<div data-wp-context=\'{ "id": "some-id" }\'>
+				<div class="test" data-wp-bind--id="context.id">Text</div>
+			</div>
+		';
+		list($p) = $this->process_directives( $html );
+		$this->assertNull( $p->get_attribute( 'id' ) );
+	}
+
+	/**
+	 * Tests that the `data-wp-context` directive works with a default namespace.
+	 *
+	 * @ticket 60356
+	 *
+	 * @covers ::process_directives
+	 */
+	public function test_wp_context_directive_works_with_default_namespace() {
+		$html    = '
+			<div
+			 data-wp-interactive=\'{ "namespace": "myPlugin" }\'
+			 data-wp-context=\'{ "id": "some-id" }\'
+			>
+				<div class="test" data-wp-bind--id="context.id">Text</div>
+			</div>
+		';
+		list($p) = $this->process_directives( $html );
+		$this->assertEquals( 'some-id', $p->get_attribute( 'id' ) );
+	}
+
+	/**
+	 * Tests that the `data-wp-context` directive overrides a default namespace.
+	 *
+	 * @ticket 60356
+	 *
+	 * @covers ::process_directives
+	 */
+	public function test_wp_context_directive_overrides_default_namespace() {
+		$html    = '
+			<div
+			 data-wp-interactive=\'{ "namespace": "myPlugin" }\'
+			 data-wp-context=\'otherPlugin::{ "id": "some-id" }\'
+			>
+				<div data-wp-interactive=\'{ "namespace": "otherPlugin" }\'>
+					<div class="test" data-wp-bind--id="context.id">Text</div>
+				</div>
+			</div>
+		';
+		list($p) = $this->process_directives( $html );
+		$this->assertEquals( 'some-id', $p->get_attribute( 'id' ) );
+	}
+
+	/**
+	 * Tests that the `data-wp-context` directive overrides the default namespace
+	 * with the same namespace.
+	 *
+	 * @ticket 60356
+	 *
+	 * @covers ::process_directives
+	 */
+	public function test_wp_context_directive_overrides_default_namespace_with_same_namespace() {
+		$html    = '
+			<div
+			 data-wp-interactive=\'{ "namespace": "myPlugin" }\'
+			 data-wp-context=\'myPlugin::{ "id": "some-id" }\'
+			>
+				<div class="test" data-wp-bind--id="context.id">Text</div>
+			</div>
+		';
+		list($p) = $this->process_directives( $html );
+		$this->assertEquals( 'some-id', $p->get_attribute( 'id' ) );
+	}
+
+	/**
+	 * Tests that the `data-wp-context` directive works with nested default
+	 * namespaces.
+	 *
+	 * @ticket 60356
+	 *
+	 * @covers ::process_directives
+	 */
+	public function test_wp_context_directive_works_with_nested_default_namespaces() {
+		$html    = '
+			<div data-wp-interactive=\'{ "namespace": "myPlugin" }\'>
+				<div data-wp-context=\'{ "id": "some-id" }\'>
+					<div data-wp-interactive=\'{ "namespace": "otherPlugin" }\'>
+						<div data-wp-context=\'{ "id": "other-id" }\'>
+							<div class="test" data-wp-bind--id="context.id">Text</div>
+							<div class="test" data-wp-bind--id="myPlugin::context.id">Text</div>
+						</div>
+					</div>
+					<div class="test" data-wp-bind--id="context.id">Text</div>
+				</div>
+				<div class="test" data-wp-bind--id="context.id">Text</div>
+			</div>
+		';
+		list($p) = $this->process_directives( $html );
+		$this->assertEquals( 'other-id', $p->get_attribute( 'id' ) );
+		$p->next_tag( array( 'class_name' => 'test' ) );
+		$this->assertEquals( 'some-id', $p->get_attribute( 'id' ) );
+		$p->next_tag( array( 'class_name' => 'test' ) );
+		$this->assertEquals( 'some-id', $p->get_attribute( 'id' ) );
+		$p->next_tag( array( 'class_name' => 'test' ) );
+		$this->assertNull( $p->get_attribute( 'id' ) );
+	}
+
+	/**
+	 * Tests that the `data-wp-context` directive works with a default namespace
+	 * in the same tag.
+	 *
+	 * @ticket 60356
+	 *
+	 * @covers ::process_directives
+	 */
+	public function test_wp_context_directive_works_with_default_namespace_in_the_same_tag() {
+		$html    = '
+			<div
+			 class="test"
+			 data-wp-interactive=\'{ "namespace": "myPlugin" }\'
+			 data-wp-context=\'{ "id": "some-id" }\'
+			 data-wp-bind--id="context.id"
+			>
+				Text
+			</div>
+		';
+		list($p) = $this->process_directives( $html );
+		$this->assertEquals( 'some-id', $p->get_attribute( 'id' ) );
+	}
+
+	/**
+	 * Tests that the `data-wp-context` directive merges the context in the same
+	 * default namespace.
+	 *
+	 * @ticket 60356
+	 *
+	 * @covers ::process_directives
+	 */
+	public function test_wp_context_directive_merges_context_in_the_same_default_namespace() {
+		$html    = '
+			<div
+				data-wp-interactive=\'{ "namespace": "myPlugin" }\'
+				data-wp-context=\'{ "id1": "some-id-1" }\'
+			>
+				<div data-wp-context=\'{ "id2": "some-id-2" }\'>
+					<div class="test" data-wp-bind--id="context.id1">Text</div>
+					<div class="test" data-wp-bind--id="context.id2">Text</div>
+				</div>
+			</div>
+		';
+		list($p) = $this->process_directives( $html );
+		$this->assertEquals( 'some-id-1', $p->get_attribute( 'id' ) );
+		$p->next_tag( array( 'class_name' => 'test' ) );
+		$this->assertEquals( 'some-id-2', $p->get_attribute( 'id' ) );
+	}
+
+	/**
+	 * Tests that the `data-wp-context` directive overwrites context in the same
+	 * default namespace.
+	 *
+	 * @ticket 60356
+	 *
+	 * @covers ::process_directives
+	 */
+	public function test_wp_context_directive_overwrites_context_in_the_same_default_namespace() {
+		$html    = '
+			<div
+				data-wp-interactive=\'{ "namespace": "myPlugin" }\'
+				data-wp-context=\'{ "id": "some-id-1" }\'
+			>
+				<div data-wp-context=\'{ "id": "some-id-2" }\'>
+					<div class="test" data-wp-bind--id="context.id">Text</div>
+				</div>
+			</div>
+		';
+		list($p) = $this->process_directives( $html );
+		$this->assertEquals( 'some-id-2', $p->get_attribute( 'id' ) );
+	}
+
+	/**
+	 * Tests that the `data-wp-context` directive replaces the old context after
+	 * the closing tag in the same default namespace.
+	 *
+	 * @ticket 60356
+	 *
+	 * @covers ::process_directives
+	 */
+	public function test_wp_context_directive_replaces_old_context_after_closing_tag_in_the_same_default_namespace() {
+		$html    = '
+			<div
+				data-wp-interactive=\'{ "namespace": "myPlugin" }\'
+				data-wp-context=\'{ "id": "some-id-1" }\'
+			>
+				<div data-wp-context=\'{ "id": "some-id-2" }\'>
+					<div class="test" data-wp-bind--id="context.id">Text</div>
+				</div>
+				<div class="test" data-wp-bind--id="context.id">Text</div>
+			</div>
+		';
+		list($p) = $this->process_directives( $html );
+		$this->assertEquals( 'some-id-2', $p->get_attribute( 'id' ) );
+		$p->next_tag( array( 'class_name' => 'test' ) );
+		$this->assertEquals( 'some-id-1', $p->get_attribute( 'id' ) );
+	}
+}
diff --git a/tests/interactivity-api/wpInteractivityAPI-wp-each.php b/tests/interactivity-api/wpInteractivityAPI-wp-each.php
new file mode 100644
index 0000000000..42edd9f1b3
--- /dev/null
+++ b/tests/interactivity-api/wpInteractivityAPI-wp-each.php
@@ -0,0 +1,683 @@
+<?php
+/**
+ * Unit tests covering the data_wp_each_processor functionality of the
+ * WP_Interactivity_API class.
+ *
+ * @package WordPress
+ * @subpackage Interactivity API
+ *
+ * @coversDefaultClass WP_Interactivity_API
+ *
+ * @group interactivity-api
+ */
+class Tests_WP_Interactivity_API_WP_Each extends WP_UnitTestCase {
+	/**
+	 * Instance of WP_Interactivity_API.
+	 *
+	 * @var WP_Interactivity_API
+	 */
+	protected $interactivity;
+
+	/**
+	 * Set up.
+	 */
+	public function set_up() {
+		parent::set_up();
+		$this->interactivity = new WP_Interactivity_API();
+		$this->interactivity->state( 'myPlugin', array( 'list' => array( 1, 2 ) ) );
+		$this->interactivity->state( 'myPlugin', array( 'after' => 'after-wp-each' ) );
+	}
+
+	/**
+	 * Tests that the `data-wp-each` directive doesn't do anything if it's not on
+	 * a template tag.
+	 *
+	 * @ticket 60356
+	 *
+	 * @covers ::process_directives
+	 */
+	public function test_wp_each_doesnt_do_anything_on_non_template_tags() {
+		$original = '
+			<div data-wp-each="myPlugin::state.list">
+				<span data-wp-text="myPlugin::context.item"></span>
+			</div>';
+		$new      = $this->interactivity->process_directives( $original );
+		$this->assertEquals( $original, $new );
+	}
+
+	/**
+	 * Tests that the `data-wp-each` directive doesn't do anything if the array
+	 * is associative instead of indexed.
+	 *
+	 * @ticket 60356
+	 *
+	 * @covers ::process_directives
+	 */
+	public function test_wp_each_doesnt_do_anything_on_associative_arrays() {
+		$this->interactivity->state(
+			'myPlugin',
+			array(
+				'assoc' => array(
+					'one' => 1,
+					'two' => 2,
+				),
+			)
+		);
+		$original = '
+			<template data-wp-each="myPlugin::state.assoc">
+				<span data-wp-text="myPlugin::context.item"></span>
+			</template>';
+		$new      = $this->interactivity->process_directives( $original );
+		$this->assertEquals( $original, $new );
+	}
+
+	/**
+	 * Tests that the `data-wp-each` directive works with simple tags.
+	 *
+	 * @ticket 60356
+	 *
+	 * @covers ::process_directives
+	 */
+	public function test_wp_each_simple_tags() {
+		$original = '' .
+			'<template data-wp-each="myPlugin::state.list">' .
+				'<span data-wp-text="myPlugin::context.item"></span>' .
+			'</template>' .
+			'<div data-wp-bind--id="myPlugin::state.after">Text</div>';
+		$expected = '' .
+			'<template data-wp-each="myPlugin::state.list">' .
+				'<span data-wp-text="myPlugin::context.item"></span>' .
+			'</template>' .
+			'<span data-wp-each-child data-wp-text="myPlugin::context.item">1</span>' .
+			'<span data-wp-each-child data-wp-text="myPlugin::context.item">2</span>' .
+			'<div id="after-wp-each" data-wp-bind--id="myPlugin::state.after">Text</div>';
+		$new      = $this->interactivity->process_directives( $original );
+		$this->assertEquals( $expected, $new );
+	}
+
+	/**
+	 * Tests that the `data-wp-each` directive doesn't do anything if the array is
+	 * empty.
+	 *
+	 * @ticket 60356
+	 *
+	 * @covers ::process_directives
+	 */
+	public function test_wp_each_empty_array() {
+		$this->interactivity->state( 'myPlugin', array( 'empty' => array() ) );
+		$original = '' .
+			'<template data-wp-each="myPlugin::state.empty">' .
+				'<span data-wp-text="myPlugin::context.item"></span>' .
+			'</template>' .
+			'<div data-wp-bind--id="myPlugin::state.after">Text</div>';
+		$expected = '' .
+			'<template data-wp-each="myPlugin::state.empty">' .
+				'<span data-wp-text="myPlugin::context.item"></span>' .
+			'</template>' .
+			'<div id="after-wp-each" data-wp-bind--id="myPlugin::state.after">Text</div>';
+		$new      = $this->interactivity->process_directives( $original );
+		$this->assertEquals( $expected, $new );
+	}
+
+	/**
+	 * Tests that the `data-wp-each` directive merges the item with the previous
+	 * context correctly.
+	 *
+	 * @ticket 60356
+	 *
+	 * @covers ::process_directives
+	 */
+	public function test_wp_each_merges_context_correctly() {
+		$original = '' .
+			'<div data-wp-context=\'myPlugin::{ "item": "New text", "id": "some-id", "after": "after-wp-each" }\'>' .
+				'<template data-wp-each="myPlugin::state.list">' .
+					'<span data-wp-bind--id="myPlugin::context.id" data-wp-text="myPlugin::context.item"></span>' .
+				'</template>' .
+				'<div data-wp-bind--id="myPlugin::context.after" data-wp-text="myPlugin::context.item">Text</div>' .
+			'</div>';
+		$expected = '' .
+			'<div data-wp-context=\'myPlugin::{ "item": "New text", "id": "some-id", "after": "after-wp-each" }\'>' .
+				'<template data-wp-each="myPlugin::state.list">' .
+					'<span data-wp-bind--id="myPlugin::context.id" data-wp-text="myPlugin::context.item"></span>' .
+				'</template>' .
+				'<span data-wp-each-child id="some-id" data-wp-bind--id="myPlugin::context.id" data-wp-text="myPlugin::context.item">1</span>' .
+				'<span data-wp-each-child id="some-id" data-wp-bind--id="myPlugin::context.id" data-wp-text="myPlugin::context.item">2</span>' .
+				'<div id="after-wp-each" data-wp-bind--id="myPlugin::context.after" data-wp-text="myPlugin::context.item">New text</div>' .
+			'</div>';
+		$new      = $this->interactivity->process_directives( $original );
+		$this->assertEquals( $expected, $new );
+	}
+
+	/**
+	 * Tests that the `data-wp-each` directive works with arrays from the context.
+	 *
+	 * @ticket 60356
+	 *
+	 * @covers ::process_directives
+	 */
+	public function test_wp_each_gets_arrays_from_context() {
+		$original = '' .
+			'<div data-wp-context=\'myPlugin::{ "list": [ 1, 2 ] }\'>' .
+				'<template data-wp-each="myPlugin::context.list">' .
+					'<span data-wp-text="myPlugin::context.item"></span>' .
+				'</template>' .
+				'<div data-wp-bind--id="myPlugin::state.after">Text</div>' .
+			'</div>';
+		$expected = '' .
+			'<div data-wp-context=\'myPlugin::{ "list": [ 1, 2 ] }\'>' .
+				'<template data-wp-each="myPlugin::context.list">' .
+					'<span data-wp-text="myPlugin::context.item"></span>' .
+				'</template>' .
+				'<span data-wp-each-child data-wp-text="myPlugin::context.item">1</span>' .
+				'<span data-wp-each-child data-wp-text="myPlugin::context.item">2</span>' .
+				'<div id="after-wp-each" data-wp-bind--id="myPlugin::state.after">Text</div>' .
+			'</div>';
+		$new      = $this->interactivity->process_directives( $original );
+		$this->assertEquals( $expected, $new );
+	}
+
+	/**
+	 * Tests that the `data-wp-each` directive works with the default namespace.
+	 *
+	 * @ticket 60356
+	 *
+	 * @covers ::process_directives
+	 */
+	public function test_wp_each_default_namespace() {
+		$original = '' .
+			'<div data-wp-interactive=\'{ "namespace": "myPlugin" }\'>' .
+				'<template data-wp-each="state.list">' .
+					'<span data-wp-text="context.item"></span>' .
+				'</template>' .
+				'<div data-wp-bind--id="state.after">Text</div>' .
+			'</div>';
+		$expected = '' .
+			'<div data-wp-interactive=\'{ "namespace": "myPlugin" }\'>' .
+				'<template data-wp-each="state.list">' .
+					'<span data-wp-text="context.item"></span>' .
+				'</template>' .
+				'<span data-wp-each-child data-wp-text="context.item">1</span>' .
+				'<span data-wp-each-child data-wp-text="context.item">2</span>' .
+				'<div id="after-wp-each" data-wp-bind--id="state.after">Text</div>' .
+			'</div>';
+		$new      = $this->interactivity->process_directives( $original );
+		$this->assertEquals( $expected, $new );
+	}
+
+	/**
+	 * Tests that the `data-wp-each` directive works with multiple tags per item.
+	 *
+	 * @ticket 60356
+	 *
+	 * @covers ::process_directives
+	 */
+	public function test_wp_each_multiple_tags_per_item() {
+		$original = '' .
+			'<template data-wp-each="myPlugin::state.list">' .
+				'<span data-wp-text="myPlugin::context.item"></span>' .
+				'<span data-wp-text="myPlugin::context.item"></span>' .
+			'</template>' .
+			'<div data-wp-bind--id="myPlugin::state.after">Text</div>';
+		$expected = '' .
+			'<template data-wp-each="myPlugin::state.list">' .
+				'<span data-wp-text="myPlugin::context.item"></span>' .
+				'<span data-wp-text="myPlugin::context.item"></span>' .
+			'</template>' .
+			'<span data-wp-each-child data-wp-text="myPlugin::context.item">1</span>' .
+			'<span data-wp-each-child data-wp-text="myPlugin::context.item">1</span>' .
+			'<span data-wp-each-child data-wp-text="myPlugin::context.item">2</span>' .
+			'<span data-wp-each-child data-wp-text="myPlugin::context.item">2</span>' .
+			'<div id="after-wp-each" data-wp-bind--id="myPlugin::state.after">Text</div>';
+		$new      = $this->interactivity->process_directives( $original );
+		$this->assertEquals( $expected, $new );
+	}
+
+	/**
+	 * Tests that the `data-wp-each` directive works with void tags.
+	 *
+	 * @ticket 60356
+	 *
+	 * @covers ::process_directives
+	 */
+	public function test_wp_each_void_tags() {
+		$original = '' .
+			'<template data-wp-each="myPlugin::state.list">' .
+				'<img data-wp-bind--id="myPlugin::context.item">' .
+				'<img data-wp-bind--id="myPlugin::context.item">' .
+			'</template>' .
+			'<div data-wp-bind--id="myPlugin::state.after">Text</div>';
+		$expected = '' .
+			'<template data-wp-each="myPlugin::state.list">' .
+				'<img data-wp-bind--id="myPlugin::context.item">' .
+				'<img data-wp-bind--id="myPlugin::context.item">' .
+			'</template>' .
+			'<img data-wp-each-child id="1" data-wp-bind--id="myPlugin::context.item">' .
+			'<img data-wp-each-child id="1" data-wp-bind--id="myPlugin::context.item">' .
+			'<img data-wp-each-child id="2" data-wp-bind--id="myPlugin::context.item">' .
+			'<img data-wp-each-child id="2" data-wp-bind--id="myPlugin::context.item">' .
+			'<div id="after-wp-each" data-wp-bind--id="myPlugin::state.after">Text</div>';
+		$new      = $this->interactivity->process_directives( $original );
+		$this->assertEquals( $expected, $new );
+	}
+
+	/**
+	 * Tests that the `data-wp-each` directive works with combinations of void and
+	 * non-void tags.
+	 *
+	 * @ticket 60356
+	 *
+	 * @covers ::process_directives
+	 */
+	public function test_wp_each_void_and_non_void_tags() {
+		$original = '' .
+			'<template data-wp-each="myPlugin::state.list">' .
+				'<img data-wp-bind--id="myPlugin::context.item">' .
+				'<span data-wp-text="myPlugin::context.item"></span>' .
+			'</template>' .
+			'<div data-wp-bind--id="myPlugin::state.after">Text</div>';
+		$expected = '' .
+			'<template data-wp-each="myPlugin::state.list">' .
+				'<img data-wp-bind--id="myPlugin::context.item">' .
+				'<span data-wp-text="myPlugin::context.item"></span>' .
+			'</template>' .
+			'<img data-wp-each-child id="1" data-wp-bind--id="myPlugin::context.item">' .
+			'<span data-wp-each-child data-wp-text="myPlugin::context.item">1</span>' .
+			'<img data-wp-each-child id="2" data-wp-bind--id="myPlugin::context.item">' .
+			'<span data-wp-each-child data-wp-text="myPlugin::context.item">2</span>' .
+			'<div id="after-wp-each" data-wp-bind--id="myPlugin::state.after">Text</div>';
+		$new      = $this->interactivity->process_directives( $original );
+		$this->assertEquals( $expected, $new );
+	}
+
+	/**
+	 * Tests that the `data-wp-each` directive works with nested tags.
+	 *
+	 * @ticket 60356
+	 *
+	 * @covers ::process_directives
+	 */
+	public function test_wp_each_nested_tags() {
+		$original = '' .
+			'<template data-wp-each="myPlugin::state.list">' .
+				'<div data-wp-bind--id="myPlugin::context.item">' .
+					'id: <span data-wp-text="myPlugin::context.item"></span>' .
+				'</div>' .
+			'</template>' .
+			'<div data-wp-bind--id="myPlugin::state.after">Text</div>';
+		$expected = '' .
+			'<template data-wp-each="myPlugin::state.list">' .
+				'<div data-wp-bind--id="myPlugin::context.item">' .
+					'id: <span data-wp-text="myPlugin::context.item"></span>' .
+				'</div>' .
+			'</template>' .
+			'<div data-wp-each-child id="1" data-wp-bind--id="myPlugin::context.item">' .
+				'id: <span data-wp-text="myPlugin::context.item">1</span>' .
+			'</div>' .
+			'<div data-wp-each-child id="2" data-wp-bind--id="myPlugin::context.item">' .
+				'id: <span data-wp-text="myPlugin::context.item">2</span>' .
+			'</div>' .
+			'<div id="after-wp-each" data-wp-bind--id="myPlugin::state.after">Text</div>';
+		$new      = $this->interactivity->process_directives( $original );
+		$this->assertEquals( $expected, $new );
+	}
+
+	/**
+	 * Tests that the `data-wp-each` directive works with nested item properties.
+	 *
+	 * @ticket 60356
+	 *
+	 * @covers ::process_directives
+	 */
+	public function test_wp_each_nested_item_properties() {
+		$this->interactivity->state(
+			'myPlugin',
+			array(
+				'list' => array(
+					array(
+						'id'   => 1,
+						'name' => 'one',
+					),
+					array(
+						'id'   => 2,
+						'name' => 'two',
+					),
+				),
+			)
+		);
+		$original = '' .
+			'<template data-wp-each="myPlugin::state.list">' .
+				'<span data-wp-text="myPlugin::context.item.id"></span>' .
+				'<span data-wp-text="myPlugin::context.item.name"></span>' .
+			'</template>' .
+			'<div data-wp-bind--id="myPlugin::state.after">Text</div>';
+		$expected = '' .
+			'<template data-wp-each="myPlugin::state.list">' .
+				'<span data-wp-text="myPlugin::context.item.id"></span>' .
+				'<span data-wp-text="myPlugin::context.item.name"></span>' .
+			'</template>' .
+			'<span data-wp-each-child data-wp-text="myPlugin::context.item.id">1</span>' .
+			'<span data-wp-each-child data-wp-text="myPlugin::context.item.name">one</span>' .
+			'<span data-wp-each-child data-wp-text="myPlugin::context.item.id">2</span>' .
+			'<span data-wp-each-child data-wp-text="myPlugin::context.item.name">two</span>' .
+			'<div id="after-wp-each" data-wp-bind--id="myPlugin::state.after">Text</div>';
+		$new      = $this->interactivity->process_directives( $original );
+		$this->assertEquals( $expected, $new );
+	}
+
+	/**
+	 * Tests that the `data-wp-each` directive works with different item names.
+	 *
+	 * @ticket 60356
+	 *
+	 * @covers ::process_directives
+	 */
+	public function test_wp_each_different_item_names() {
+		$original = '' .
+			'<template data-wp-each--myitem="myPlugin::state.list">' .
+				'<span data-wp-text="myPlugin::context.myitem"></span>' .
+			'</template>' .
+			'<div data-wp-bind--id="myPlugin::state.after">Text</div>';
+		$expected = '' .
+			'<template data-wp-each--myitem="myPlugin::state.list">' .
+				'<span data-wp-text="myPlugin::context.myitem"></span>' .
+			'</template>' .
+			'<span data-wp-each-child data-wp-text="myPlugin::context.myitem">1</span>' .
+			'<span data-wp-each-child data-wp-text="myPlugin::context.myitem">2</span>' .
+			'<div id="after-wp-each" data-wp-bind--id="myPlugin::state.after">Text</div>';
+		$new      = $this->interactivity->process_directives( $original );
+		$this->assertEquals( $expected, $new );
+	}
+
+	/**
+	 * Tests that the `data-wp-each` directive transforms kebab-case into
+	 * camelCase.
+	 *
+	 * @ticket 60356
+	 *
+	 * @covers ::process_directives
+	 */
+	public function test_wp_each_different_item_names_transforms_camelcase() {
+		$original = '' .
+			'<template data-wp-each--my-item="myPlugin::state.list">' .
+				'<span data-wp-text="myPlugin::context.myItem"></span>' .
+			'</template>' .
+			'<div data-wp-bind--id="myPlugin::state.after">Text</div>';
+		$expected = '' .
+			'<template data-wp-each--my-item="myPlugin::state.list">' .
+				'<span data-wp-text="myPlugin::context.myItem"></span>' .
+			'</template>' .
+			'<span data-wp-each-child data-wp-text="myPlugin::context.myItem">1</span>' .
+			'<span data-wp-each-child data-wp-text="myPlugin::context.myItem">2</span>' .
+			'<div id="after-wp-each" data-wp-bind--id="myPlugin::state.after">Text</div>';
+		$new      = $this->interactivity->process_directives( $original );
+		$this->assertEquals( $expected, $new );
+	}
+
+	/**
+	 * Tests that the `data-wp-each` directive doesn't work with top-level texts.
+	 *
+	 * @ticket 60356
+	 *
+	 * @covers ::process_directives
+	 */
+	public function test_wp_each_doesnt_work_with_top_level_text() {
+		$original = '' .
+			'<template data-wp-each="myPlugin::state.list">' .
+				'id: <span data-wp-text="myPlugin::context.item"></span>' .
+			'</template>';
+		$new      = $this->interactivity->process_directives( $original );
+		$this->assertEquals( $original, $new );
+
+		$original = '' .
+			'<template data-wp-each="myPlugin::state.list">' .
+				'<span data-wp-text="myPlugin::context.item"></span>!' .
+			'</template>';
+		$new      = $this->interactivity->process_directives( $original );
+		$this->assertEquals( $original, $new );
+
+		// But it should work fine with spaces and linebreaks.
+		$original = '
+			<template data-wp-each="myPlugin::state.list">
+				<span class="test" data-wp-bind--id="myPlugin::context.item"></span>
+			</template>';
+		$new      = $this->interactivity->process_directives( $original );
+		$p        = new WP_HTML_Tag_Processor( $new );
+		$p->next_tag( array( 'class_name' => 'test' ) );
+		$p->next_tag( array( 'class_name' => 'test' ) );
+		$this->assertEquals( '1', $p->get_attribute( 'id' ) );
+		$p->next_tag( array( 'class_name' => 'test' ) );
+		$this->assertEquals( '2', $p->get_attribute( 'id' ) );
+	}
+
+	/**
+	 * Tests that the `data-wp-each` directive works with nested template tags.
+	 *
+	 * @ticket 60356
+	 *
+	 * @covers ::process_directives
+	 */
+	public function test_wp_each_nested_template_tags() {
+		$this->interactivity->state( 'myPlugin', array( 'list2' => array( 3, 4 ) ) );
+		$original = '' .
+			'<template data-wp-each--item1="myPlugin::state.list">' .
+				'<span data-wp-text="myPlugin::context.item1"></span>' .
+				'<template data-wp-each--item2="myPlugin::state.list2">' .
+					'<span data-wp-text="myPlugin::context.item2"></span>' .
+				'</template>' .
+			'</template>' .
+			'<div data-wp-bind--id="myPlugin::state.after">Text</div>';
+		$expected = '' .
+			'<template data-wp-each--item1="myPlugin::state.list">' .
+				'<span data-wp-text="myPlugin::context.item1"></span>' .
+				'<template data-wp-each--item2="myPlugin::state.list2">' .
+					'<span data-wp-text="myPlugin::context.item2"></span>' .
+				'</template>' .
+			'</template>' .
+			'<span data-wp-each-child data-wp-text="myPlugin::context.item1">1</span>' .
+			'<template data-wp-each-child data-wp-each--item2="myPlugin::state.list2">' .
+				'<span data-wp-text="myPlugin::context.item2"></span>' .
+			'</template>' .
+			'<span data-wp-each-child data-wp-text="myPlugin::context.item2">3</span>' .
+			'<span data-wp-each-child data-wp-text="myPlugin::context.item2">4</span>' .
+			'<span data-wp-each-child data-wp-text="myPlugin::context.item1">2</span>' .
+			'<template data-wp-each-child data-wp-each--item2="myPlugin::state.list2">' .
+				'<span data-wp-text="myPlugin::context.item2"></span>' .
+			'</template>' .
+			'<span data-wp-each-child data-wp-text="myPlugin::context.item2">3</span>' .
+			'<span data-wp-each-child data-wp-text="myPlugin::context.item2">4</span>' .
+			'<div id="after-wp-each" data-wp-bind--id="myPlugin::state.after">Text</div>';
+		$new      = $this->interactivity->process_directives( $original );
+		$this->assertEquals( $expected, $new );
+	}
+
+	/**
+	 * Tests that the `data-wp-each` directive works with directly nested template
+	 * tags.
+	 *
+	 * @ticket 60356
+	 *
+	 * @covers ::process_directives
+	 */
+	public function test_wp_each_directly_nested_template_tags() {
+		$this->interactivity->state( 'myPlugin', array( 'list2' => array( 3, 4 ) ) );
+		$original = '' .
+			'<template data-wp-each--item1="myPlugin::state.list">' .
+				'<template data-wp-each--item2="myPlugin::state.list2">' .
+					'<span data-wp-text="myPlugin::context.item1"></span>' .
+					'<span data-wp-text="myPlugin::context.item2"></span>' .
+				'</template>' .
+			'</template>' .
+			'<div data-wp-bind--id="myPlugin::state.after">Text</div>';
+		$expected = '' .
+			'<template data-wp-each--item1="myPlugin::state.list">' .
+				'<template data-wp-each--item2="myPlugin::state.list2">' .
+					'<span data-wp-text="myPlugin::context.item1"></span>' .
+					'<span data-wp-text="myPlugin::context.item2"></span>' .
+				'</template>' .
+			'</template>' .
+			'<template data-wp-each-child data-wp-each--item2="myPlugin::state.list2">' .
+				'<span data-wp-text="myPlugin::context.item1"></span>' .
+				'<span data-wp-text="myPlugin::context.item2"></span>' .
+			'</template>' .
+			'<span data-wp-each-child data-wp-text="myPlugin::context.item1">1</span>' .
+			'<span data-wp-each-child data-wp-text="myPlugin::context.item2">3</span>' .
+			'<span data-wp-each-child data-wp-text="myPlugin::context.item1">1</span>' .
+			'<span data-wp-each-child data-wp-text="myPlugin::context.item2">4</span>' .
+			'<template data-wp-each-child data-wp-each--item2="myPlugin::state.list2">' .
+				'<span data-wp-text="myPlugin::context.item1"></span>' .
+				'<span data-wp-text="myPlugin::context.item2"></span>' .
+			'</template>' .
+			'<span data-wp-each-child data-wp-text="myPlugin::context.item1">2</span>' .
+			'<span data-wp-each-child data-wp-text="myPlugin::context.item2">3</span>' .
+			'<span data-wp-each-child data-wp-text="myPlugin::context.item1">2</span>' .
+			'<span data-wp-each-child data-wp-text="myPlugin::context.item2">4</span>' .
+			'<div id="after-wp-each" data-wp-bind--id="myPlugin::state.after">Text</div>';
+		$new      = $this->interactivity->process_directives( $original );
+		$this->assertEquals( $expected, $new );
+	}
+
+	/**
+	 * Tests that the `data-wp-each` directive works with nestded template tags
+	 * that use a previous item as a list.
+	 *
+	 * @ticket 60356
+	 *
+	 * @covers ::process_directives
+	 */
+	public function test_wp_each_nested_template_tags_using_previous_item_as_list() {
+		$this->interactivity->state( 'myPlugin', array( 'list2' => array( array( 1, 2 ), array( 3, 4 ) ) ) );
+		$original = '' .
+			'<template data-wp-each--list="myPlugin::state.list2">' .
+				'<template data-wp-each--number="myPlugin::context.list">' .
+					'<span data-wp-text="myPlugin::context.number"></span>' .
+				'</template>' .
+			'</template>' .
+			'<div data-wp-bind--id="myPlugin::state.after">Text</div>';
+		$expected = '' .
+			'<template data-wp-each--list="myPlugin::state.list2">' .
+				'<template data-wp-each--number="myPlugin::context.list">' .
+					'<span data-wp-text="myPlugin::context.number"></span>' .
+				'</template>' .
+			'</template>' .
+			'<template data-wp-each-child data-wp-each--number="myPlugin::context.list">' .
+				'<span data-wp-text="myPlugin::context.number"></span>' .
+			'</template>' .
+			'<span data-wp-each-child data-wp-text="myPlugin::context.number">1</span>' .
+			'<span data-wp-each-child data-wp-text="myPlugin::context.number">2</span>' .
+			'<template data-wp-each-child data-wp-each--number="myPlugin::context.list">' .
+				'<span data-wp-text="myPlugin::context.number"></span>' .
+			'</template>' .
+			'<span data-wp-each-child data-wp-text="myPlugin::context.number">3</span>' .
+			'<span data-wp-each-child data-wp-text="myPlugin::context.number">4</span>' .
+			'<div id="after-wp-each" data-wp-bind--id="myPlugin::state.after">Text</div>';
+		$new      = $this->interactivity->process_directives( $original );
+		$this->assertEquals( $expected, $new );
+	}
+
+	/**
+	 * Tests that the `data-wp-each` directive doesn't process unbalanced tags.
+	 *
+	 * @ticket 60356
+	 *
+	 * @covers ::process_directives
+	 */
+	public function test_wp_each_unbalanced_tags() {
+		$original = '' .
+			'<template data-wp-each="myPlugin::state.list">' .
+				'<span data-wp-text="myPlugin::context.item">' .
+			'</template>' .
+			'<div data-wp-bind--id="myPlugin::state.after">Text</div>';
+		$new      = $this->interactivity->process_directives( $original );
+		$this->assertEquals( $original, $new );
+	}
+
+	/**
+	 * Tests that the `data-wp-each` directive doesn't process unbalanced tags in
+	 * nested templates.
+	 *
+	 * @ticket 60356
+	 *
+	 * @covers ::process_directives
+	 */
+	public function test_wp_each_unbalanced_tags_in_nested_template_tags() {
+		$this->interactivity->state( 'myPlugin', array( 'list2' => array( 3, 4 ) ) );
+		$original = '' .
+			'<template data-wp-each--item1="myPlugin::state.list">' .
+				'<span data-wp-text="myPlugin::context.item1"></span>' .
+				'<template data-wp-each--item2="myPlugin::state.list2">' .
+					'<span data-wp-text="myPlugin::context.item2">' .
+				'</template>' .
+			'</template>' .
+			'<div data-wp-bind--id="myPlugin::state.after">Text</div>';
+		$new      = $this->interactivity->process_directives( $original );
+		$this->assertEquals( $original, $new );
+	}
+
+	/**
+	 * Tests that the `data-wp-each` directive doesn't process if it doesn't get
+	 * an array.
+	 *
+	 * @ticket 60356
+	 *
+	 * @covers ::process_directives
+	 */
+	public function test_wp_each_doesnt_process_if_not_array() {
+		$original = '' .
+			'<template data-wp-each="myPlugin::state.list">' .
+				'<span data-wp-text="myPlugin::context.item"></span>' .
+			'</template>' .
+			'<div data-wp-bind--id="myPlugin::state.after">Text</div>';
+		$expected = '' .
+			'<template data-wp-each="myPlugin::state.list">' .
+				'<span data-wp-text="myPlugin::context.item"></span>' .
+			'</template>' .
+			'<div id="after-wp-each" data-wp-bind--id="myPlugin::state.after">Text</div>';
+
+		$this->interactivity->state( 'myPlugin', array( 'list' => null ) );
+		$new = $this->interactivity->process_directives( $original );
+		$this->assertEquals( $expected, $new );
+
+		$this->interactivity->state( 'myPlugin', array( 'list' => 'Text' ) );
+		$new = $this->interactivity->process_directives( $original );
+		$this->assertEquals( $expected, $new );
+
+		$this->interactivity->state( 'myPlugin', array( 'list' => 100 ) );
+		$new = $this->interactivity->process_directives( $original );
+		$this->assertEquals( $expected, $new );
+
+		$this->interactivity->state( 'myPlugin', array( 'list' => false ) );
+		$new = $this->interactivity->process_directives( $original );
+		$this->assertEquals( $expected, $new );
+
+		$this->interactivity->state( 'myPlugin', array( 'list' => true ) );
+		$new = $this->interactivity->process_directives( $original );
+		$this->assertEquals( $expected, $new );
+	}
+
+	/**
+	 * Tests that the `data-wp-each` directive doesn't process anything if it
+	 * detects manual server-side processing.
+	 *
+	 * @ticket 60356
+	 *
+	 * @covers ::process_directives
+	 */
+	public function test_wp_each_doesnt_process_with_manual_server_directive_processing() {
+		$original = '' .
+			'<template data-wp-each="myPlugin::state.list">' .
+				'<span data-wp-text="myPlugin::context.item"></span>' .
+			'</template>' .
+			'<span data-wp-each-child data-wp-text="myPlugin::context.item">1</span>' .
+			'<span data-wp-each-child data-wp-text="myPlugin::context.item">2</span>' .
+			'<div data-wp-bind--id="myPlugin::state.after">Text</div>';
+		$expected = '' .
+			'<template data-wp-each="myPlugin::state.list">' .
+				'<span data-wp-text="myPlugin::context.item"></span>' .
+			'</template>' .
+			'<span data-wp-each-child data-wp-text="myPlugin::context.item">1</span>' .
+			'<span data-wp-each-child data-wp-text="myPlugin::context.item">2</span>' .
+			'<div id="after-wp-each" data-wp-bind--id="myPlugin::state.after">Text</div>';
+		$new      = $this->interactivity->process_directives( $original );
+		$this->assertEquals( $expected, $new );
+	}
+}
diff --git a/tests/interactivity-api/wpInteractivityAPI-wp-interactive.php b/tests/interactivity-api/wpInteractivityAPI-wp-interactive.php
new file mode 100644
index 0000000000..65f4e4258b
--- /dev/null
+++ b/tests/interactivity-api/wpInteractivityAPI-wp-interactive.php
@@ -0,0 +1,268 @@
+<?php
+/**
+ * Unit tests covering the data_wp_interactive_processor functionality of the
+ * WP_Interactivity_API class.
+ *
+ * @package WordPress
+ * @subpackage Interactivity API
+ *
+ * @since 6.5.0
+ *
+ * @coversDefaultClass WP_Interactivity_API
+ *
+ * @group interactivity-api
+ */
+class Tests_WP_Interactivity_API_WP_Interactive extends WP_UnitTestCase {
+	/**
+	 * Instance of WP_Interactivity_API.
+	 *
+	 * @var WP_Interactivity_API
+	 */
+	protected $interactivity;
+
+	/**
+	 * Set up.
+	 */
+	public function set_up() {
+		parent::set_up();
+		$this->interactivity = new WP_Interactivity_API();
+		$this->interactivity->state( 'myPlugin', array( 'id' => 'some-id' ) );
+		$this->interactivity->state( 'otherPlugin', array( 'id' => 'other-id' ) );
+	}
+
+	/**
+	 * Invokes the `process_directives` method of WP_Interactivity_API class.
+	 *
+	 * @param string $html The HTML that needs to be processed.
+	 * @return array An array containing an instance of the WP_HTML_Tag_Processor and the processed HTML.
+	 */
+	private function process_directives( $html ) {
+		$new_html = $this->interactivity->process_directives( $html );
+		$p        = new WP_HTML_Tag_Processor( $new_html );
+		$p->next_tag( array( 'class_name' => 'test' ) );
+		return array( $p, $new_html );
+	}
+
+	/**
+	 * Tests that a default namespace is applied when using the
+	 * `data-wp-interactive` directive with a json object.
+	 *
+	 * @ticket 60356
+	 *
+	 * @covers ::process_directives
+	 */
+	public function test_wp_interactive_sets_a_default_namespace_with_object() {
+		$html    = '
+					<div data-wp-interactive=\'{ "namespace": "myPlugin" }\'>
+							<div class="test" data-wp-bind--id="state.id">Text</div>
+					</div>
+			';
+		list($p) = $this->process_directives( $html );
+		$this->assertEquals( 'some-id', $p->get_attribute( 'id' ) );
+	}
+
+	/**
+	 * Tests that a default namespace is applied when using the
+	 * `data-wp-interactive` directive with a string.
+	 *
+	 * @ticket 60356
+	 *
+	 * @covers ::process_directives
+	 */
+	public function test_wp_interactive_sets_a_default_namespace_with_string() {
+		$html    = '
+					<div data-wp-interactive="myPlugin">
+							<div class="test" data-wp-bind--id="state.id">Text</div>
+					</div>
+			';
+		list($p) = $this->process_directives( $html );
+		$this->assertEquals( 'some-id', $p->get_attribute( 'id' ) );
+	}
+
+	/**
+	 * Tests that the most recent `data-wp-interactive` directive replaces the
+	 * previous default namespace.
+	 *
+	 * @ticket 60356
+	 *
+	 * @covers ::process_directives
+	 */
+	public function test_wp_interactive_replaces_the_previous_default_namespace() {
+		$html    = '
+					<div data-wp-interactive=\'{ "namespace": "otherPlugin" }\'>
+							<div data-wp-interactive=\'{ "namespace": "myPlugin" }\'>
+									<div class="test" data-wp-bind--id="state.id">Text</div>
+							</div>
+							<div class="test" data-wp-bind--id="state.id">Text</div>
+					</div>
+			';
+		list($p) = $this->process_directives( $html );
+		$this->assertEquals( 'some-id', $p->get_attribute( 'id' ) );
+		$p->next_tag( array( 'class_name' => 'test' ) );
+		$this->assertEquals( 'other-id', $p->get_attribute( 'id' ) );
+	}
+
+	/**
+	 * Tests that a `data-wp-interactive` directive with a json object that
+	 * doesn't have a namespace property does not replace the previously
+	 * established default namespace.
+	 *
+	 * @ticket 60356
+	 *
+	 * @covers ::process_directives
+	 */
+	public function test_wp_interactive_json_without_namespace_doesnt_replace_the_previous_default_namespace() {
+		$html    = '
+					<div data-wp-interactive=\'{ "namespace": "myPlugin" }\'>
+							<div data-wp-interactive=\'{}\'>
+									<div class="test" data-wp-bind--id="state.id">Text</div>
+							</div>
+							<div class="test" data-wp-bind--id="state.id">Text</div>
+					</div>
+			';
+		list($p) = $this->process_directives( $html );
+		$this->assertEquals( 'some-id', $p->get_attribute( 'id' ) );
+		$p->next_tag( array( 'class_name' => 'test' ) );
+		$this->assertEquals( 'some-id', $p->get_attribute( 'id' ) );
+	}
+
+	/**
+	 * Tests that an empty value for `data-wp-interactive` does not replace the
+	 * previously established default namespace.
+	 *
+	 * @ticket 60356
+	 *
+	 * @covers ::process_directives
+	 */
+	public function test_wp_interactive_with_empty_value_doesnt_replace_the_previous_default_namespace() {
+		$html    = '
+					<div data-wp-interactive=\'{ "namespace": "myPlugin" }\'>
+							<div data-wp-interactive="">
+									<div class="test" data-wp-bind--id="state.id">Text</div>
+							</div>
+							<div class="test" data-wp-bind--id="state.id">Text</div>
+					</div>
+			';
+		list($p) = $this->process_directives( $html );
+		$this->assertEquals( 'some-id', $p->get_attribute( 'id' ) );
+		$p->next_tag( array( 'class_name' => 'test' ) );
+		$this->assertEquals( 'some-id', $p->get_attribute( 'id' ) );
+	}
+
+	/**
+	 * Tests that an invalid value for `data-wp-interactive` does not replace the
+	 * previously established default namespace.
+	 *
+	 * @ticket 60356
+	 *
+	 * @covers ::process_directives
+	 */
+	public function test_wp_interactive_with_invalid_value_doesnt_replace_the_previous_default_namespace() {
+		$html    = '
+				<div data-wp-interactive=\'{ "namespace": "myPlugin" }\'>
+						<div data-wp-interactive="$myPlugin">
+								<div class="test" data-wp-bind--id="state.id">Text</div>
+						</div>
+						<div class="test" data-wp-bind--id="state.id">Text</div>
+				</div>
+		';
+		list($p) = $this->process_directives( $html );
+		$this->assertEquals( 'some-id', $p->get_attribute( 'id' ) );
+		$p->next_tag( array( 'class_name' => 'test' ) );
+		$this->assertEquals( 'some-id', $p->get_attribute( 'id' ) );
+	}
+
+	/**
+	 * Tests that a `data-wp-interactive` directive with no assigned value does
+	 * not replace the previously established default namespace.
+	 *
+	 * @ticket 60356
+	 *
+	 * @covers ::process_directives
+	 */
+	public function test_wp_interactive_without_value_doesnt_replace_the_previous_default_namespace() {
+		$html    = '
+					<div data-wp-interactive=\'{ "namespace": "myPlugin" }\'>
+							<div data-wp-interactive>
+									<div class="test" data-wp-bind--id="state.id">Text</div>
+							</div>
+							<div class="test" data-wp-bind--id="state.id">Text</div>
+					</div>
+			';
+		list($p) = $this->process_directives( $html );
+		$this->assertEquals( 'some-id', $p->get_attribute( 'id' ) );
+		$p->next_tag( array( 'class_name' => 'test' ) );
+		$this->assertEquals( 'some-id', $p->get_attribute( 'id' ) );
+	}
+
+	/**
+	 * Tests that multiple `data-wp-interactive` directives work correctly.
+	 *
+	 * @ticket 60356
+	 *
+	 * @covers ::process_directives
+	 */
+	public function test_wp_interactive_works_with_multiple_directives() {
+		$html    = '
+					<div data-wp-interactive=\'{ "namespace": "myPlugin" }\' data-wp-interactive=\'{ "namespace": "myPlugin" }\'>
+							<div class="test" data-wp-bind--id="state.id">Text</div>
+					</div>
+			';
+		list($p) = $this->process_directives( $html );
+		$this->assertEquals( 'some-id', $p->get_attribute( 'id' ) );
+	}
+
+	/**
+	 * Tests that a custom namespace can override the default one provided by a
+	 * `data-wp-interactive` directive.
+	 *
+	 * @ticket 60356
+	 *
+	 * @covers ::process_directives
+	 */
+	public function test_wp_interactive_namespace_can_be_override_by_custom_one() {
+		$html    = '
+					<div data-wp-interactive=\'{ "namespace": "myPlugin" }\'>
+							<div class="test" data-wp-bind--id="otherPlugin::state.id">Text</div>
+					</div>
+			';
+		list($p) = $this->process_directives( $html );
+		$this->assertEquals( 'other-id', $p->get_attribute( 'id' ) );
+	}
+
+	/**
+	 * Tests that the `data-wp-interactive` setting is reset appropriately after a
+	 * closing HTML tag.
+	 *
+	 * @ticket 60356
+	 *
+	 * @covers ::process_directives
+	 */
+	public function test_wp_interactive_set_is_unset_on_closing_tag() {
+		$html    = '
+					<div data-wp-interactive=\'{ "namespace": "myPlugin" }\'>
+							<div class="test" data-wp-bind--id="state.id">Text</div>
+					</div>
+					<div data-wp-interactive=\'{ "namespace": "otherPlugin" }\'>
+							<div class="test" data-wp-bind--id="state.id">Text</div>
+					</div>
+			';
+		list($p) = $this->process_directives( $html );
+		$this->assertEquals( 'some-id', $p->get_attribute( 'id' ) );
+		$p->next_tag( array( 'class_name' => 'test' ) );
+		$this->assertEquals( 'other-id', $p->get_attribute( 'id' ) );
+
+		$html    = '
+					<div data-wp-interactive=\'{ "namespace": "myPlugin" }\'>
+							<div data-wp-interactive=\'{ "namespace": "otherPlugin" }\'>
+									<div class="test" data-wp-bind--id="state.id">Text</div>
+							</div>
+							<div class="test" data-wp-bind--id="state.id">Text</div>
+					</div>
+			';
+		list($p) = $this->process_directives( $html );
+		$this->assertEquals( 'other-id', $p->get_attribute( 'id' ) );
+		$p->next_tag( array( 'class_name' => 'test' ) );
+		$this->assertEquals( 'some-id', $p->get_attribute( 'id' ) );
+	}
+}
diff --git a/tests/interactivity-api/wpInteractivityAPI-wp-router-region.php b/tests/interactivity-api/wpInteractivityAPI-wp-router-region.php
new file mode 100644
index 0000000000..88a03e483d
--- /dev/null
+++ b/tests/interactivity-api/wpInteractivityAPI-wp-router-region.php
@@ -0,0 +1,133 @@
+<?php
+/**
+ * Unit tests covering the `data_wp_router_region` processor functionality of
+ * the WP_Interactivity_API class.
+ *
+ * @package WordPress
+ * @subpackage Interactivity API
+ *
+ * @coversDefaultClass WP_Interactivity_API
+ *
+ * @group interactivity-api
+ */
+class Tests_WP_Interactivity_API_WP_Router_Region extends WP_UnitTestCase {
+	/**
+	 * Instance of WP_Interactivity_API.
+	 *
+	 * @var WP_Interactivity_API
+	 */
+	protected $interactivity;
+
+	/**
+	 * Original WP_Hook instance associated to `wp_footer`.
+	 *
+	 * @var WP_Hook
+	 */
+	protected $original_wp_footer;
+
+	/**
+	 * Original instance associated to `wp_footer`.
+	 *
+	 * @var WP_Styles
+	 */
+	protected $original_wp_styles;
+
+	/**
+	 * Set up.
+	 */
+	public function set_up() {
+		parent::set_up();
+		$this->interactivity = new WP_Interactivity_API();
+
+		// Removes all hooks set for `wp_footer`.
+		global $wp_filter;
+		$this->original_wp_footer = $wp_filter['wp_footer'];
+		$wp_filter['wp_footer']   = new WP_Hook();
+
+		// Removes all registered styles.
+		$this->original_wp_styles = isset( $GLOBALS['wp_styles'] ) ? $GLOBALS['wp_styles'] : null;
+		$GLOBALS['wp_styles']     = new WP_Styles();
+		remove_action( 'wp_default_styles', 'wp_default_styles' );
+		remove_action( 'wp_print_styles', 'print_emoji_styles' );
+	}
+
+	/**
+	 * Tear down.
+	 */
+	public function tear_down() {
+		// Restores all previous hooks set for `wp_footer`.
+		global $wp_filter;
+		$wp_filter['wp_footer'] = $this->original_wp_footer;
+
+		// Restores all previous registered styles.
+		$GLOBALS['wp_styles'] = $this->original_wp_styles;
+		add_action( 'wp_default_styles', 'wp_default_styles' );
+		add_action( 'wp_print_styles', 'print_emoji_styles' );
+
+		parent::tear_down();
+	}
+
+	/**
+	 * Executes the hooks associated to `wp_footer`.
+	 */
+	protected function render_wp_footer() {
+		ob_start();
+		do_action( 'wp_footer' );
+		return ob_get_clean();
+	}
+
+	/**
+	 * Tests that no elements are added if the `data-wp-router-region` is
+	 * missing.
+	 *
+	 * @ticket 60356
+	 *
+	 * @covers ::process_directives
+	 */
+	public function test_wp_router_region_missing() {
+		$html     = '<div>Nothing here</div>';
+		$new_html = $this->interactivity->process_directives( $html );
+		$footer   = $this->render_wp_footer();
+		$this->assertEquals( $html, $new_html );
+		$this->assertEquals( '', $footer );
+		$this->assertEquals( '', get_echo( 'wp_print_styles' ) );
+	}
+
+	/**
+	 * Tests that the `data-wp-router-region` directive adds a loading bar and a
+	 * region for screen reader announcements in the footer, and styles for the
+	 * loading bar. Also checks that the markup and styles are only added once.
+	 *
+	 * @ticket 60356
+	 *
+	 * @covers ::process_directives
+	 */
+	public function test_wp_router_region_adds_loading_bar_aria_live_region_only_once() {
+		$html     = '
+			<div data-wp-router-region="region A">Interactive region</div>
+			<div data-wp-router-region="region B">Another interactive region</div>
+		';
+		$new_html = $this->interactivity->process_directives( $html );
+		$this->assertEquals( $html, $new_html );
+
+		// Check that the style is loaded, but only once.
+		$styles = get_echo( 'wp_print_styles' );
+		$query  = array( 'tag_name' => 'style' );
+		$p      = new WP_HTML_Tag_Processor( $styles );
+		$this->assertTrue( $p->next_tag( $query ) );
+		$this->assertEquals( 'wp-interactivity-router-animations-inline-css', $p->get_attribute( 'id' ) );
+		$this->assertStringContainsString( '.wp-interactivity-router-loading-bar', $styles );
+		$this->assertFalse( $p->next_tag( $query ) );
+
+		// Check that the markup is loaded, but only once.
+		$footer = $this->render_wp_footer();
+		$query  = array( 'class_name' => 'wp-interactivity-router-loading-bar' );
+		$p      = new WP_HTML_Tag_Processor( $footer );
+		$this->assertTrue( $p->next_tag( $query ) );
+		$this->assertFalse( $p->next_tag( $query ) );
+		$query = array( 'class_name' => 'screen-reader-text' );
+		$p     = new WP_HTML_Tag_Processor( $footer );
+		$this->assertTrue( $p->next_tag( $query ) );
+		$this->assertFalse( $p->next_tag( $query ) );
+	}
+}
diff --git a/tests/interactivity-api/wpInteractivityAPI-wp-style.php b/tests/interactivity-api/wpInteractivityAPI-wp-style.php
new file mode 100644
index 0000000000..d3ac196eae
--- /dev/null
+++ b/tests/interactivity-api/wpInteractivityAPI-wp-style.php
@@ -0,0 +1,447 @@
+<?php
+/**
+ * Unit tests covering the data_wp_style_processor functionality of the
+ * WP_Interactivity_API class.
+ *
+ * @package WordPress
+ * @subpackage Interactivity API
+ *
+ * @since 6.5.0
+ *
+ * @coversDefaultClass WP_Interactivity_API
+ *
+ * @group interactivity-api
+ */
+class Tests_WP_Interactivity_API_WP_Style extends WP_UnitTestCase {
+	/**
+	 * Instance of WP_Interactivity_API.
+	 *
+	 * @var WP_Interactivity_API
+	 */
+	protected $interactivity;
+
+	/**
+	 * Set up.
+	 */
+	public function set_up() {
+		parent::set_up();
+		$this->interactivity = new WP_Interactivity_API();
+		$this->interactivity->state(
+			'myPlugin',
+			array(
+				'green' => 'green',
+				'false' => false,
+			)
+		);
+	}
+
+	/**
+	 * Invokes the private `merge_style_property` method of WP_Interactivity_API
+	 * class.
+	 *
+	 * @param string            $style_attribute_value The current style attribute value.
+	 * @param string            $style_property_name   The style property name to set.
+	 * @param string|false|null $style_property_value  The value to set for the style property. With false, null or an
+	 *                                                 empty string, it removes the style property.
+	 * @return string The new style attribute value after the specified property has been added, updated or removed.
+	 */
+	private function merge_style_property( $style_attribute_value, $style_property_name, $style_property_value ) {
+		$evaluate = new ReflectionMethod( $this->interactivity, 'merge_style_property' );
+		$evaluate->setAccessible( true );
+		return $evaluate->invokeArgs( $this->interactivity, array( $style_attribute_value, $style_property_name, $style_property_value ) );
+	}
+
+	/**
+	 * Tests that `merge_style_property` correctly sets style properties.
+	 *
+	 * @ticket 60356
+	 *
+	 * @covers ::merge_style_property
+	 */
+	public function test_merge_style_property_sets_properties() {
+		// Adds property on empty style attribute.
+		$result = $this->merge_style_property( '', 'color', 'green' );
+		$this->assertEquals( 'color:green;', $result );
+
+		// Changes style property when there is an existing property.
+		$result = $this->merge_style_property( 'color:red;', 'color', 'green' );
+		$this->assertEquals( 'color:green;', $result );
+
+		// Adds a new property when the existing one does not match.
+		$result = $this->merge_style_property( 'color:red;', 'background', 'blue' );
+		$this->assertEquals( 'color:red;background:blue;', $result );
+
+		// Handles multiple existing properties.
+		$result = $this->merge_style_property( 'color:red;margin:5px;', 'color', 'green' );
+		$this->assertEquals( 'margin:5px;color:green;', $result );
+
+		// Adds a new property when multiple existing properties do not match.
+		$result = $this->merge_style_property( 'color:red;margin:5px;', 'padding', '10px' );
+		$this->assertEquals( 'color:red;margin:5px;padding:10px;', $result );
+
+		// Removes whitespaces in all properties.
+		$result = $this->merge_style_property( ' color : red; margin : 5px; ', 'padding', ' 10px ' );
+		$this->assertEquals( 'color:red;margin:5px;padding:10px;', $result );
+
+		// Updates a property when it's not the first one in the value.
+		$result = $this->merge_style_property( 'color:red;margin:5px;', 'margin', '15px' );
+		$this->assertEquals( 'color:red;margin:15px;', $result );
+
+		// Adds missing trailing semicolon.
+		$result = $this->merge_style_property( 'color:red;margin:5px', 'padding', '10px' );
+		$this->assertEquals( 'color:red;margin:5px;padding:10px;', $result );
+
+		// Doesn't add double semicolons.
+		$result = $this->merge_style_property( 'color:red;margin:5px;', 'padding', '10px;' );
+		$this->assertEquals( 'color:red;margin:5px;padding:10px;', $result );
+
+		// Handles empty properties in the input.
+		$result = $this->merge_style_property( 'color:red;;margin:5px;;', 'padding', '10px' );
+		$this->assertEquals( 'color:red;margin:5px;padding:10px;', $result );
+
+		// Moves the modified property to the end.
+		$result = $this->merge_style_property( 'border-style: dashed; border: 3px solid red;', 'border-style', 'inset' );
+		$this->assertEquals( 'border:3px solid red;border-style:inset;', $result );
+	}
+
+	/**
+	 * Tests that `merge_style_property` works correctly with falsy values,
+	 * removing or ignoring them as appropriate.
+	 *
+	 * @ticket 60356
+	 *
+	 * @covers ::merge_style_property
+	 */
+	public function test_merge_style_property_with_falsy_values() {
+		// Removes a property with an empty string.
+		$result = $this->merge_style_property( 'color:red;margin:5px;', 'color', '' );
+		$this->assertEquals( 'margin:5px;', $result );
+
+		// Removes a property with null.
+		$result = $this->merge_style_property( 'color:red;margin:5px;', 'color', null );
+		$this->assertEquals( 'margin:5px;', $result );
+
+		// Removes a property with false.
+		$result = $this->merge_style_property( 'color:red;margin:5px;', 'color', false );
+		$this->assertEquals( 'margin:5px;', $result );
+
+		// Removes a property with 0.
+		$result = $this->merge_style_property( 'color:red;margin:5px;', 'color', 0 );
+		$this->assertEquals( 'margin:5px;', $result );
+
+		// It doesn't add a new property with an empty string.
+		$result = $this->merge_style_property( 'color:red;', 'padding', '' );
+		$this->assertEquals( 'color:red;', $result );
+
+		// It doesn't add a new property with null.
+		$result = $this->merge_style_property( 'color:red;', 'padding', null );
+		$this->assertEquals( 'color:red;', $result );
+
+		// It doesn't add a new property with false.
+		$result = $this->merge_style_property( 'color:red;', 'padding', false );
+		$this->assertEquals( 'color:red;', $result );
+
+		// It doesn't add a new property with 0.
+		$result = $this->merge_style_property( 'color:red;', 'padding', 0 );
+		$this->assertEquals( 'color:red;', $result );
+	}
+
+	/**
+	 * Invokes the `process_directives` method of WP_Interactivity_API class.
+	 *
+	 * @param string $html The HTML that needs to be processed.
+	 * @return array An array containing an instance of the WP_HTML_Tag_Processor and the processed HTML.
+	 */
+	private function process_directives( $html ) {
+		$new_html = $this->interactivity->process_directives( $html );
+		$p        = new WP_HTML_Tag_Processor( $new_html );
+		$p->next_tag();
+		return array( $p, $new_html );
+	}
+
+	/**
+	 * Tests that the `data-wp-style` directive sets a style attribute with
+	 * correct property and value.
+	 *
+	 * @ticket 60356
+	 *
+	 * @covers ::process_directives
+	 */
+	public function test_wp_style_sets_style_attribute() {
+		$html    = '<div data-wp-style--color="myPlugin::state.green">Text</div>';
+		list($p) = $this->process_directives( $html );
+		$this->assertEquals( 'color:green;', $p->get_attribute( 'style' ) );
+	}
+
+	/**
+	 * Tests that the `data-wp-style` directive applies multiple style properties
+	 * correctly.
+	 *
+	 * @ticket 60356
+	 *
+	 * @covers ::process_directives
+	 */
+	public function test_wp_style_sets_multiple_style_properties() {
+		$html    = '
+			<div
+				data-wp-style--color="myPlugin::state.green"
+				data-wp-style--background="myPlugin::state.green"
+			>Text</div>';
+		list($p) = $this->process_directives( $html );
+		$this->assertEquals( 'color:green;background:green;', $p->get_attribute( 'style' ) );
+	}
+
+	/**
+	 * Tests that the `data-wp-style` directive correctly handles different style
+	 * property values.
+	 *
+	 * @ticket 60356
+	 *
+	 * @covers ::process_directives
+	 */
+	public function test_wp_style_sets_multiple_style_properties_with_different_values() {
+		$html    = '
+			<div
+				data-wp-style--color="myPlugin::state.green"
+				data-wp-style--background="myPlugin::state.false"
+			>Text</div>';
+		list($p) = $this->process_directives( $html );
+		$this->assertEquals( 'color:green;', $p->get_attribute( 'style' ) );
+
+		$html    = '
+			<div
+				style="background:red;"
+				data-wp-style--color="myPlugin::state.green"
+				data-wp-style--background="myPlugin::state.false"
+			>Text</div>';
+		list($p) = $this->process_directives( $html );
+		$this->assertEquals( 'color:green;', $p->get_attribute( 'style' ) );
+	}
+
+	/**
+	 * Tests that the `data-wp-style` directive sets a new style property when
+	 * another already exists.
+	 *
+	 * @ticket 60356
+	 *
+	 * @covers ::process_directives
+	 */
+	public function test_wp_style_sets_style_property_when_style_attribute_exists() {
+		$html    = '<div style="padding:10px;" data-wp-style--color="myPlugin::state.green">Text</div>';
+		list($p) = $this->process_directives( $html );
+		$this->assertEquals( 'padding:10px;color:green;', $p->get_attribute( 'style' ) );
+	}
+
+	/**
+	 * Tests that the `data-wp-style` directive overwrites an existing style
+	 * property with a new value.
+	 *
+	 * @ticket 60356
+	 *
+	 * @covers ::process_directives
+	 */
+	public function test_wp_style_overwrites_style_property_when_style_property_exists() {
+		$html    = '<div style="color:red;" data-wp-style--color="myPlugin::state.green">Text</div>';
+		list($p) = $this->process_directives( $html );
+		$this->assertEquals( 'color:green;', $p->get_attribute( 'style' ) );
+	}
+
+	/**
+	 * Tests that the `data-wp-style` directive doesn't add a style property when
+	 * the directive value is false.
+	 *
+	 * @ticket 60356
+	 *
+	 * @covers ::process_directives
+	 */
+	public function test_wp_style_doesnt_add_style_attribute_on_false() {
+		$html    = '<div data-wp-style--color="myPlugin::state.false">Text</div>';
+		list($p) = $this->process_directives( $html );
+		$this->assertNull( $p->get_attribute( 'style' ) );
+	}
+
+	/**
+	 * Tests that the `data-wp-style` directive doesn't modify existing style
+	 * properties when directive value is false.
+	 *
+	 * @ticket 60356
+	 *
+	 * @covers ::process_directives
+	 */
+	public function test_wp_style_doesnt_add_style_property_on_false() {
+		$html    = '<div style="padding:10px;" data-wp-style--color="myPlugin::state.false">Text</div>';
+		list($p) = $this->process_directives( $html );
+		$this->assertEquals( 'padding:10px;', $p->get_attribute( 'style' ) );
+	}
+
+	/**
+	 * Tests that the `data-wp-style` directive keeps an existing style property
+	 * with a matching value.
+	 *
+	 * @ticket 60356
+	 *
+	 * @covers ::process_directives
+	 */
+	public function test_wp_style_keeps_style_property_when_style_property_exists() {
+		$html    = '<div style="color:green;" data-wp-style--color="myPlugin::state.green">Text</div>';
+		list($p) = $this->process_directives( $html );
+		$this->assertEquals( 'color:green;', $p->get_attribute( 'style' ) );
+	}
+
+	/**
+	 * Tests that the `data-wp-style` directive maintains style properties even
+	 * when they aren't the only ones present.
+	 *
+	 * @ticket 60356
+	 *
+	 * @covers ::process_directives
+	 */
+	public function test_wp_style_keeps_style_property_when_style_property_exists_and_is_not_the_only_one() {
+		$html    = '<div style="padding:10px;color:green;" data-wp-style--color="myPlugin::state.green">Text</div>';
+		list($p) = $this->process_directives( $html );
+		$this->assertEquals( 'padding:10px;color:green;', $p->get_attribute( 'style' ) );
+	}
+
+	/**
+	 * Tests that the `data-wp-style` directive removes the style attribute when
+	 * it contains only one property which is being removed.
+	 *
+	 * @ticket 60356
+	 *
+	 * @covers ::process_directives
+	 */
+	public function test_wp_style_removes_style_attribute_when_style_property_exists_and_is_the_only_one() {
+		$html    = '<div style="color:green;" data-wp-style--color="myPlugin::state.false">Text</div>';
+		list($p) = $this->process_directives( $html );
+		$this->assertNull( $p->get_attribute( 'style' ) );
+	}
+
+	/**
+	 * Tests that the `data-wp-style` directive removes a style property when it's
+	 * not the only one present and the directive value is false.
+	 *
+	 * @ticket 60356
+	 *
+	 * @covers ::process_directives
+	 */
+	public function test_wp_style_removes_style_property_when_style_property_exists_and_is_not_the_only_one() {
+		$html    = '<div style="padding:10px;color:green;" data-wp-style--color="myPlugin::state.false">Text</div>';
+		list($p) = $this->process_directives( $html );
+		$this->assertEquals( 'padding:10px;', $p->get_attribute( 'style' ) );
+	}
+
+	/**
+	 * Tests that the `data-wp-style` directive does not remove an empty style
+	 * attribute.
+	 *
+	 * @ticket 60356
+	 *
+	 * @covers ::process_directives
+	 */
+	public function test_wp_style_doesnt_remove_empty_style_attribute() {
+		$html    = '<div style data-wp-style--color="myPlugin::state.false">Text</div>';
+		list($p) = $this->process_directives( $html );
+		$this->assertTrue( $p->get_attribute( 'style' ) );
+	}
+
+	/**
+	 * Tests that the `data-wp-style` directive does not change the style
+	 * attribute when the directive suffix is empty.
+	 *
+	 * @ticket 60356
+	 *
+	 * @covers ::process_directives
+	 */
+	public function test_wp_style_doesnt_change_style_attribute_with_empty_directive_suffix() {
+		$html    = '<div style="padding:10px;" data-wp-style="myPlugin::state.green">Text</div>';
+		list($p) = $this->process_directives( $html );
+		$this->assertEquals( 'padding:10px;', $p->get_attribute( 'style' ) );
+	}
+
+	/**
+	 * Tests that the `data-wp-style` directive does not change the style
+	 * attribute when the value of the directive is empty.
+	 *
+	 * @ticket 60356
+	 *
+	 * @covers ::process_directives
+	 */
+	public function test_wp_style_doesnt_change_style_attribute_with_empty_value() {
+		$html    = '<div style="padding:10px" data-wp-style--color="">Text</div>';
+		list($p) = $this->process_directives( $html );
+		$this->assertEquals( 'padding:10px;', $p->get_attribute( 'style' ) );
+	}
+
+	/**
+	 * Tests that the `data-wp-style` directive doesn't apply changes if no value
+	 * is provided for the style property.
+	 *
+	 * @ticket 60356
+	 *
+	 * @covers ::process_directives
+	 */
+	public function test_wp_style_doesnt_change_style_attribute_without_value() {
+		$html    = '<div style="padding: 10px;" data-wp-style--color>Text</div>';
+		list($p) = $this->process_directives( $html );
+		$this->assertEquals( 'padding:10px;', $p->get_attribute( 'style' ) );
+	}
+
+	/**
+	 * Tests that the `data-wp-style` directive functions correctly with multiple
+	 * identical directives.
+	 *
+	 * @ticket 60356
+	 *
+	 * @covers ::process_directives
+	 */
+	public function test_wp_style_works_with_multiple_directives() {
+		$html    = '<div data-wp-style--color="myPlugin::state.green" data-wp-style--color="myPlugin::state.green">Text</div>';
+		list($p) = $this->process_directives( $html );
+		$this->assertEquals( 'color:green;', $p->get_attribute( 'style' ) );
+	}
+
+	/**
+	 * Tests that the `data-wp-style` directive doesn't apply any changes when the
+	 * state value is true.
+	 *
+	 * @ticket 60356
+	 *
+	 * @covers ::process_directives
+	 */
+	public function test_wp_style_doesnt_do_anything_on_true_values() {
+		$this->interactivity->state( 'myPlugin', array( 'true' => true ) );
+		$html    = '<div data-wp-style--color="myPlugin::state.text">Text</div>';
+		list($p) = $this->process_directives( $html );
+		$this->assertNull( $p->get_attribute( 'style' ) );
+	}
+
+	/**
+	 * Tests that the `data-wp-style` directive doesn't add a style property for
+	 * various falsy values in the state.
+	 *
+	 * @ticket 60356
+	 *
+	 * @covers ::process_directives
+	 */
+	public function test_wp_style_doesnt_add_style_property_on_falsy_values() {
+		$this->interactivity->state( 'myPlugin', array( 'text' => '' ) );
+		$html    = '<div data-wp-style--color="myPlugin::state.text">Text</div>';
+		list($p) = $this->process_directives( $html );
+		$this->assertNull( $p->get_attribute( 'style' ) );
+
+		$this->interactivity->state( 'myPlugin', array( 'array' => array() ) );
+		$html    = '<div data-wp-style--color="myPlugin::state.array">Text</div>';
+		list($p) = $this->process_directives( $html );
+		$this->assertNull( $p->get_attribute( 'style' ) );
+
+		$this->interactivity->state( 'myPlugin', array( 'number' => 0 ) );
+		$html    = '<div data-wp-style--color="myPlugin::state.number">Text</div>';
+		list($p) = $this->process_directives( $html );
+		$this->assertNull( $p->get_attribute( 'style' ) );
+
+		$this->interactivity->state( 'myPlugin', array( 'null' => null ) );
+		$html    = '<div data-wp-style--color="myPlugin::state.null">Text</div>';
+		list($p) = $this->process_directives( $html );
+		$this->assertNull( $p->get_attribute( 'style' ) );
+	}
+}
diff --git a/tests/interactivity-api/wpInteractivityAPI-wp-text.php b/tests/interactivity-api/wpInteractivityAPI-wp-text.php
new file mode 100644
index 0000000000..2fa9363ac9
--- /dev/null
+++ b/tests/interactivity-api/wpInteractivityAPI-wp-text.php
@@ -0,0 +1,155 @@
+<?php
+/**
+ * Unit tests covering the data_wp_text_processor functionality of the
+ * WP_Interactivity_API class.
+ *
+ * @package WordPress
+ * @subpackage Interactivity API
+ *
+ * @since 6.5.0
+ *
+ * @coversDefaultClass WP_Interactivity_API
+ *
+ * @group interactivity-api
+ */
+class Tests_WP_Interactivity_API_WP_Text extends WP_UnitTestCase {
+	/**
+	 * Instance of WP_Interactivity_API.
+	 *
+	 * @var WP_Interactivity_API
+	 */
+	protected $interactivity;
+
+	/**
+	 * Set up.
+	 */
+	public function set_up() {
+		parent::set_up();
+		$this->interactivity = new WP_Interactivity_API();
+		$this->interactivity->state( 'myPlugin', array( 'text' => 'Updated' ) );
+	}
+
+	/**
+	 * Tests that the `data-wp-text` directive sets inner text content.
+	 *
+	 * @ticket 60356
+	 *
+	 * @covers ::process_directives
+	 */
+	public function test_wp_text_sets_inner_content() {
+		$html     = '<div data-wp-text="myPlugin::state.text">Text</div>';
+		$new_html = $this->interactivity->process_directives( $html );
+		$this->assertEquals( '<div data-wp-text="myPlugin::state.text">Updated</div>', $new_html );
+	}
+
+	/**
+	 * Tests that the `data-wp-text` directive works with numerical values.
+	 *
+	 * @ticket 60356
+	 *
+	 * @covers ::process_directives
+	 */
+	public function test_wp_text_sets_inner_content_numbers() {
+		$this->interactivity->state( 'myPlugin', array( 'number' => 100 ) );
+		$html     = '<div data-wp-text="myPlugin::state.number">Text</div>';
+		$new_html = $this->interactivity->process_directives( $html );
+		$this->assertEquals( '<div data-wp-text="myPlugin::state.number">100</div>', $new_html );
+	}
+
+	/**
+	 * Tests that the `data-wp-text` directive removes inner text content when the
+	 * state is not a string or number.
+	 *
+	 * @ticket 60356
+	 *
+	 * @covers ::process_directives
+	 */
+	public function test_wp_text_removes_inner_content_on_types_that_are_not_strings_or_numbers() {
+		$this->interactivity->state(
+			'myPlugin',
+			array(
+				'true'  => true,
+				'false' => false,
+				'null'  => null,
+				'array' => array(),
+				'func'  => function () {},
+			)
+		);
+		$html     = '<div data-wp-text="myPlugin::state.true">Text</div>';
+		$new_html = $this->interactivity->process_directives( $html );
+		$this->assertEquals( '<div data-wp-text="myPlugin::state.true"></div>', $new_html );
+
+		$html     = '<div data-wp-text="myPlugin::state.false">Text</div>';
+		$new_html = $this->interactivity->process_directives( $html );
+		$this->assertEquals( '<div data-wp-text="myPlugin::state.false"></div>', $new_html );
+
+		$html     = '<div data-wp-text="myPlugin::state.null">Text</div>';
+		$new_html = $this->interactivity->process_directives( $html );
+		$this->assertEquals( '<div data-wp-text="myPlugin::state.null"></div>', $new_html );
+
+		$html     = '<div data-wp-text="myPlugin::state.array">Text</div>';
+		$new_html = $this->interactivity->process_directives( $html );
+		$this->assertEquals( '<div data-wp-text="myPlugin::state.array"></div>', $new_html );
+
+		$html     = '<div data-wp-text="myPlugin::state.func">Text</div>';
+		$new_html = $this->interactivity->process_directives( $html );
+		$this->assertEquals( '<div data-wp-text="myPlugin::state.func"></div>', $new_html );
+	}
+
+	/**
+	 * Tests that the `data-wp-text` directive overwrites entire inner content,
+	 * including nested tags.
+	 *
+	 * @ticket 60356
+	 *
+	 * @covers ::process_directives
+	 */
+	public function test_wp_text_sets_inner_content_with_nested_tags() {
+		$html     = '<div data-wp-text="myPlugin::state.text"><div><div>Text</div><div>Another text</div></div></div>';
+		$new_html = $this->interactivity->process_directives( $html );
+		$this->assertEquals( '<div data-wp-text="myPlugin::state.text">Updated</div>', $new_html );
+	}
+
+	/**
+	 * Tests that the `data-wp-text` directive works even with unbalanced tags
+	 * when they are different tags (div -> unbalanced span).
+	 *
+	 * @ticket 60356
+	 *
+	 * @covers ::process_directives
+	 */
+	public function test_wp_text_sets_inner_content_even_with_unbalanced_but_different_tags_inside_content() {
+		$html     = '<div data-wp-text="myPlugin::state.text"><span>Text</div>';
+		$new_html = $this->interactivity->process_directives( $html );
+		$this->assertEquals( '<div data-wp-text="myPlugin::state.text">Updated</div>', $new_html );
+	}
+
+	/**
+	 * Tests that the `data-wp-text` fails to overwrite inner content if there are
+	 * unbalanced when they are the same tags (div -> unbalanced div).
+	 *
+	 * @ticket 60356
+	 *
+	 * @covers ::process_directives
+	 */
+	public function test_wp_text_fails_with_unbalanced_and_same_tags_inside_content() {
+		$html     = '<div data-wp-text="myPlugin::state.text">Text<div></div>';
+		$new_html = $this->interactivity->process_directives( $html );
+		$this->assertEquals( '<div data-wp-text="myPlugin::state.text">Text<div></div>', $new_html );
+	}
+
+	/**
+	 * Tests that the `data-wp-text` directive cannot set inner HTML content and
+	 * it will be encoded as text.
+	 *
+	 * @ticket 60356
+	 *
+	 * @covers ::process_directives
+	 */
+	public function test_wp_text_cant_set_inner_html_in_the_content() {
+		$this->interactivity->state( 'myPlugin', array( 'text' => '<span>Updated</span>' ) );
+		$html     = '<div data-wp-text="myPlugin::state.text">Text</div>';
+		$new_html = $this->interactivity->process_directives( $html );
+		$this->assertEquals( '<div data-wp-text="myPlugin::state.text">&lt;span&gt;Updated&lt;/span&gt;</div>', $new_html );
+	}
+}
diff --git a/tests/interactivity-api/wpInteractivityAPI.php b/tests/interactivity-api/wpInteractivityAPI.php
new file mode 100644
index 0000000000..72dd9da8ed
--- /dev/null
+++ b/tests/interactivity-api/wpInteractivityAPI.php
@@ -0,0 +1,881 @@
+<?php
+/**
+ * Unit tests covering WP_Interactivity_API functionality.
+ *
+ * @package WordPress
+ * @subpackage Interactivity API
+ *
+ * @since 6.5.0
+ *
+ * @group interactivity-api
+ *
+ * @coversDefaultClass WP_Interactivity_API
+ */
+class Tests_Interactivity_API_WpInteractivityAPI extends WP_UnitTestCase {
+	/**
+	 * Instance of WP_Interactivity_API.
+	 *
+	 * @var WP_Interactivity_API
+	 */
+	protected $interactivity;
+
+	/**
+	 * Set up.
+	 */
+	public function set_up() {
+		parent::set_up();
+		$this->interactivity = new WP_Interactivity_API();
+	}
+
+	/**
+	 * Tests that the state and config methods return an empty array at the
+	 * beginning.
+	 *
+	 * @ticket 60356
+	 *
+	 * @covers ::state
+	 * @covers ::config
+	 */
+	public function test_state_and_config_should_be_empty() {
+		$this->assertEquals( array(), $this->interactivity->state( 'myPlugin' ) );
+		$this->assertEquals( array(), $this->interactivity->config( 'myPlugin' ) );
+	}
+
+	/**
+	 * Tests that the state and config methods can change the state and
+	 * configuration.
+	 *
+	 * @ticket 60356
+	 *
+	 * @covers ::state
+	 * @covers ::config
+	 */
+	public function test_state_and_config_can_be_changed() {
+		$state  = array(
+			'a'      => 1,
+			'b'      => 2,
+			'nested' => array( 'c' => 3 ),
+		);
+		$result = $this->interactivity->state( 'myPlugin', $state );
+		$this->assertEquals( $state, $result );
+		$result = $this->interactivity->config( 'myPlugin', $state );
+		$this->assertEquals( $state, $result );
+	}
+
+	/**
+	 * Tests that different initial states and configurations can be merged.
+	 *
+	 * @ticket 60356
+	 *
+	 * @covers ::state
+	 * @covers ::config
+	 */
+	public function test_state_and_config_can_be_merged() {
+		$this->interactivity->state( 'myPlugin', array( 'a' => 1 ) );
+		$this->interactivity->state( 'myPlugin', array( 'b' => 2 ) );
+		$this->interactivity->state( 'otherPlugin', array( 'c' => 3 ) );
+		$this->assertEquals(
+			array(
+				'a' => 1,
+				'b' => 2,
+			),
+			$this->interactivity->state( 'myPlugin' )
+		);
+		$this->assertEquals(
+			array( 'c' => 3 ),
+			$this->interactivity->state( 'otherPlugin' )
+		);
+
+		$this->interactivity->config( 'myPlugin', array( 'a' => 1 ) );
+		$this->interactivity->config( 'myPlugin', array( 'b' => 2 ) );
+		$this->interactivity->config( 'otherPlugin', array( 'c' => 3 ) );
+		$this->assertEquals(
+			array(
+				'a' => 1,
+				'b' => 2,
+			),
+			$this->interactivity->config( 'myPlugin' )
+		);
+		$this->assertEquals(
+			array( 'c' => 3 ),
+			$this->interactivity->config( 'otherPlugin' )
+		);  }
+
+	/**
+	 * Tests that existing keys in the initial state and configuration can be
+	 * overwritten.
+	 *
+	 * @ticket 60356
+	 *
+	 * @covers ::state
+	 * @covers ::config
+	 */
+	public function test_state_and_config_existing_props_can_be_overwritten() {
+		$this->interactivity->state( 'myPlugin', array( 'a' => 1 ) );
+		$this->interactivity->state( 'myPlugin', array( 'a' => 2 ) );
+		$this->assertEquals(
+			array( 'a' => 2 ),
+			$this->interactivity->state( 'myPlugin' )
+		);
+
+		$this->interactivity->config( 'myPlugin', array( 'a' => 1 ) );
+		$this->interactivity->config( 'myPlugin', array( 'a' => 2 ) );
+		$this->assertEquals(
+			array( 'a' => 2 ),
+			$this->interactivity->config( 'myPlugin' )
+		);
+	}
+
+	/**
+	 * Tests that existing indexed arrays in the initial state and configuration
+	 * are replaced, not merged.
+	 *
+	 * @ticket 60356
+	 *
+	 * @covers ::state
+	 * @covers ::config
+	 */
+	public function test_state_and_config_existing_indexed_arrays_are_replaced() {
+		$this->interactivity->state( 'myPlugin', array( 'a' => array( 1, 2 ) ) );
+		$this->interactivity->state( 'myPlugin', array( 'a' => array( 3, 4 ) ) );
+		$this->assertEquals(
+			array( 'a' => array( 3, 4 ) ),
+			$this->interactivity->state( 'myPlugin' )
+		);
+
+		$this->interactivity->config( 'myPlugin', array( 'a' => array( 1, 2 ) ) );
+		$this->interactivity->config( 'myPlugin', array( 'a' => array( 3, 4 ) ) );
+		$this->assertEquals(
+			array( 'a' => array( 3, 4 ) ),
+			$this->interactivity->config( 'myPlugin' )
+		);
+	}
+
+	/**
+	 * Invokes the private `print_client_interactivity` method of
+	 * WP_Interactivity_API class.
+	 *
+	 * @return array|null The content of the JSON object printed on the client-side or null if nothings was printed.
+	 */
+	private function print_client_interactivity_data() {
+		$interactivity_data_markup = get_echo( array( $this->interactivity, 'print_client_interactivity_data' ) );
+		preg_match( '/<script type="application\/json" id="wp-interactivity-data">.*?(\{.*\}).*?<\/script>/s', $interactivity_data_markup, $interactivity_data_string );
+		return isset( $interactivity_data_string[1] ) ? json_decode( $interactivity_data_string[1], true ) : null;
+	}
+
+	/**
+	 * Tests that the initial state and config are correctly printed on the
+	 * client-side.
+	 *
+	 * @ticket 60356
+	 *
+	 * @covers ::state
+	 * @covers ::config
+	 * @covers ::print_client_interactivity_data
+	 */
+	public function test_state_and_config_is_correctly_printed() {
+		$this->interactivity->state( 'myPlugin', array( 'a' => 1 ) );
+		$this->interactivity->state( 'otherPlugin', array( 'b' => 2 ) );
+		$this->interactivity->config( 'myPlugin', array( 'a' => 1 ) );
+		$this->interactivity->config( 'otherPlugin', array( 'b' => 2 ) );
+
+		$result = $this->print_client_interactivity_data();
+
+		$data = array(
+			'myPlugin'    => array( 'a' => 1 ),
+			'otherPlugin' => array( 'b' => 2 ),
+		);
+
+		$this->assertEquals(
+			array(
+				'state'  => $data,
+				'config' => $data,
+			),
+			$result
+		);
+	}
+
+	/**
+	 * Tests that the wp-interactivity-data script is not printed if both state
+	 * and config are empty.
+	 *
+	 * @ticket 60356
+	 *
+	 * @covers ::print_client_interactivity_data
+	 */
+	public function test_state_and_config_dont_print_when_empty() {
+		$result = $this->print_client_interactivity_data();
+		$this->assertNull( $result );
+	}
+
+	/**
+	 * Tests that the config is not printed if it's empty.
+	 *
+	 * @ticket 60356
+	 *
+	 * @covers ::state
+	 * @covers ::print_client_interactivity_data
+	 */
+	public function test_config_not_printed_when_empty() {
+		$this->interactivity->state( 'myPlugin', array( 'a' => 1 ) );
+		$result = $this->print_client_interactivity_data();
+		$this->assertEquals( array( 'state' => array( 'myPlugin' => array( 'a' => 1 ) ) ), $result );
+	}
+
+	/**
+	 * Tests that the state is not printed if it's empty.
+	 *
+	 * @ticket 60356
+	 *
+	 * @covers ::config
+	 * @covers ::print_client_interactivity_data
+	 */
+	public function test_state_not_printed_when_empty() {
+		$this->interactivity->config( 'myPlugin', array( 'a' => 1 ) );
+		$result = $this->print_client_interactivity_data();
+		$this->assertEquals( array( 'config' => array( 'myPlugin' => array( 'a' => 1 ) ) ), $result );
+	}
+
+	/**
+	 * Tests that empty state objects are pruned from printed data.
+	 *
+	 * @ticket 60761
+	 *
+	 * @covers ::print_client_interactivity_data
+	 */
+	public function test_state_not_printed_when_empty_array() {
+		$this->interactivity->state( 'pluginWithEmptyState_prune', array() );
+		$this->interactivity->state( 'pluginWithState_include', array( 'value' => 'excellent' ) );
+		$printed_script = get_echo( array( $this->interactivity, 'print_client_interactivity_data' ) );
+		$expected       = <<<'SCRIPT_TAG'
+<script type="application/json" id="wp-interactivity-data">
+{"state":{"pluginWithState_include":{"value":"excellent"}}}
+</script>
+
+SCRIPT_TAG;
+
+		$this->assertSame( $expected, $printed_script );
+	}
+
+	/**
+	 * Tests that data consisting of only empty state objects is not printed.
+	 *
+	 * @ticket 60761
+	 *
+	 * @covers ::print_client_interactivity_data
+	 */
+	public function test_state_not_printed_when_only_empty_arrays() {
+		$this->interactivity->state( 'pluginWithEmptyState_prune', array() );
+		$printed_script = get_echo( array( $this->interactivity, 'print_client_interactivity_data' ) );
+		$this->assertSame( '', $printed_script );
+	}
+
+	/**
+	 * Tests that nested empty state objects are printed correctly.
+	 *
+	 * @ticket 60761
+	 *
+	 * @covers ::print_client_interactivity_data
+	 */
+	public function test_state_printed_correctly_with_nested_empty_array() {
+		$this->interactivity->state( 'myPlugin', array( 'emptyArray' => array() ) );
+		$printed_script = get_echo( array( $this->interactivity, 'print_client_interactivity_data' ) );
+		$expected       = <<<'SCRIPT_TAG'
+<script type="application/json" id="wp-interactivity-data">
+{"state":{"myPlugin":{"emptyArray":[]}}}
+</script>
+
+SCRIPT_TAG;
+
+		$this->assertSame( $expected, $printed_script );
+	}
+
+	/**
+	 * Tests that empty config objects are pruned from printed data.
+	 *
+	 * @ticket 60761
+	 *
+	 * @covers ::print_client_interactivity_data
+	 */
+	public function test_config_not_printed_when_empty_array() {
+		$this->interactivity->config( 'pluginWithEmptyConfig_prune', array() );
+		$this->interactivity->config( 'pluginWithConfig_include', array( 'value' => 'excellent' ) );
+		$printed_script = get_echo( array( $this->interactivity, 'print_client_interactivity_data' ) );
+		$expected       = <<<'SCRIPT_TAG'
+<script type="application/json" id="wp-interactivity-data">
+{"config":{"pluginWithConfig_include":{"value":"excellent"}}}
+</script>
+
+SCRIPT_TAG;
+
+		$this->assertSame( $expected, $printed_script );
+	}
+
+	/**
+	 * Tests that data consisting of only empty config objects is not printed.
+	 *
+	 * @ticket 60761
+	 *
+	 * @covers ::print_client_interactivity_data
+	 */
+	public function test_config_not_printed_when_only_empty_arrays() {
+		$this->interactivity->config( 'pluginWithEmptyConfig_prune', array() );
+		$printed_script = get_echo( array( $this->interactivity, 'print_client_interactivity_data' ) );
+		$this->assertSame( '', $printed_script );
+	}
+
+	/**
+	 * Tests that nested empty config objects are printed correctly.
+	 *
+	 * @ticket 60761
+	 *
+	 * @covers ::print_client_interactivity_data
+	 */
+	public function test_config_printed_correctly_with_nested_empty_array() {
+		$this->interactivity->config( 'myPlugin', array( 'emptyArray' => array() ) );
+		$printed_script = get_echo( array( $this->interactivity, 'print_client_interactivity_data' ) );
+		$expected       = <<<'SCRIPT_TAG'
+<script type="application/json" id="wp-interactivity-data">
+{"config":{"myPlugin":{"emptyArray":[]}}}
+</script>
+
+SCRIPT_TAG;
+
+		$this->assertSame( $expected, $printed_script );
+	}
+
+	/**
+	 * Tests that special characters in the initial state and configuration are
+	 * properly escaped.
+	 *
+	 * @ticket 60356
+	 *
+	 * @covers ::state
+	 * @covers ::config
+	 * @covers ::print_client_interactivity_data
+	 */
+	public function test_state_and_config_escape_special_characters() {
+		$this->interactivity->state( 'myPlugin', array( 'amps' => 'http://site.test/?foo=1&baz=2' ) );
+		$this->interactivity->config( 'myPlugin', array( 'tags' => 'Tags: <!-- <script>' ) );
+
+		$interactivity_data_markup = get_echo( array( $this->interactivity, 'print_client_interactivity_data' ) );
+		preg_match( '/<script type="application\/json" id="wp-interactivity-data">.*?(\{.*\}).*?<\/script>/s', $interactivity_data_markup, $interactivity_data_string );
+
+		$this->assertEquals(
+			'{"config":{"myPlugin":{"tags":"Tags: \u003C!-- \u003Cscript\u003E"}},"state":{"myPlugin":{"amps":"http:\/\/site.test\/?foo=1\u0026baz=2"}}}',
+			$interactivity_data_string[1]
+		);
+	}
+
+	/**
+	 * Tests extracting directive values from different string formats.
+	 *
+	 * @ticket 60356
+	 *
+	 * @covers ::extract_directive_value
+	 */
+	public function test_extract_directive_value() {
+		$extract_directive_value = new ReflectionMethod( $this->interactivity, 'extract_directive_value' );
+		$extract_directive_value->setAccessible( true );
+
+		$result = $extract_directive_value->invoke( $this->interactivity, 'state.foo', 'myPlugin' );
+		$this->assertEquals( array( 'myPlugin', 'state.foo' ), $result );
+
+		$result = $extract_directive_value->invoke( $this->interactivity, 'otherPlugin::state.foo', 'myPlugin' );
+		$this->assertEquals( array( 'otherPlugin', 'state.foo' ), $result );
+
+		$result = $extract_directive_value->invoke( $this->interactivity, '{ "isOpen": false }', 'myPlugin' );
+		$this->assertEquals( array( 'myPlugin', array( 'isOpen' => false ) ), $result );
+
+		$result = $extract_directive_value->invoke( $this->interactivity, 'otherPlugin::{ "isOpen": false }', 'myPlugin' );
+		$this->assertEquals( array( 'otherPlugin', array( 'isOpen' => false ) ), $result );
+
+		$result = $extract_directive_value->invoke( $this->interactivity, 'true', 'myPlugin' );
+		$this->assertEquals( array( 'myPlugin', true ), $result );
+
+		$result = $extract_directive_value->invoke( $this->interactivity, 'false', 'myPlugin' );
+		$this->assertEquals( array( 'myPlugin', false ), $result );
+
+		$result = $extract_directive_value->invoke( $this->interactivity, 'null', 'myPlugin' );
+		$this->assertEquals( array( 'myPlugin', null ), $result );
+
+		$result = $extract_directive_value->invoke( $this->interactivity, '100', 'myPlugin' );
+		$this->assertEquals( array( 'myPlugin', 100 ), $result );
+
+		$result = $extract_directive_value->invoke( $this->interactivity, '1.2', 'myPlugin' );
+		$this->assertEquals( array( 'myPlugin', 1.2 ), $result );
+
+		$result = $extract_directive_value->invoke( $this->interactivity, '1.2.3', 'myPlugin' );
+		$this->assertEquals( array( 'myPlugin', '1.2.3' ), $result );
+
+		$result = $extract_directive_value->invoke( $this->interactivity, 'otherPlugin::true', 'myPlugin' );
+		$this->assertEquals( array( 'otherPlugin', true ), $result );
+
+		$result = $extract_directive_value->invoke( $this->interactivity, 'otherPlugin::false', 'myPlugin' );
+		$this->assertEquals( array( 'otherPlugin', false ), $result );
+
+		$result = $extract_directive_value->invoke( $this->interactivity, 'otherPlugin::null', 'myPlugin' );
+		$this->assertEquals( array( 'otherPlugin', null ), $result );
+
+		$result = $extract_directive_value->invoke( $this->interactivity, 'otherPlugin::100', 'myPlugin' );
+		$this->assertEquals( array( 'otherPlugin', 100 ), $result );
+
+		$result = $extract_directive_value->invoke( $this->interactivity, 'otherPlugin::1.2', 'myPlugin' );
+		$this->assertEquals( array( 'otherPlugin', 1.2 ), $result );
+
+		$result = $extract_directive_value->invoke( $this->interactivity, 'otherPlugin::1.2.3', 'myPlugin' );
+		$this->assertEquals( array( 'otherPlugin', '1.2.3' ), $result );
+
+		$result = $extract_directive_value->invoke( $this->interactivity, 'otherPlugin::[{"o":4}, null, 3e6]', 'myPlugin' );
+		$this->assertEquals( array( 'otherPlugin', array( array( 'o' => 4 ), null, 3000000.0 ) ), $result );
+	}
+
+	/**
+	 * Tests extracting directive values with empty or invalid input.
+	 *
+	 * @ticket 60356
+	 *
+	 * @covers ::extract_directive_value
+	 */
+	public function test_extract_directive_value_empty_values() {
+		$extract_directive_value = new ReflectionMethod( $this->interactivity, 'extract_directive_value' );
+		$extract_directive_value->setAccessible( true );
+
+		$result = $extract_directive_value->invoke( $this->interactivity, '', 'myPlugin' );
+		$this->assertEquals( array( 'myPlugin', null ), $result );
+
+		// This is a boolean attribute.
+		$result = $extract_directive_value->invoke( $this->interactivity, true, 'myPlugin' );
+		$this->assertEquals( array( 'myPlugin', null ), $result );
+
+		$result = $extract_directive_value->invoke( $this->interactivity, false, 'myPlugin' );
+		$this->assertEquals( array( 'myPlugin', null ), $result );
+
+		$result = $extract_directive_value->invoke( $this->interactivity, null, 'myPlugin' );
+		$this->assertEquals( array( 'myPlugin', null ), $result );
+
+		// A string ending in `::` without any extra characters is not considered a
+		// namespace.
+		$result = $extract_directive_value->invoke( $this->interactivity, 'myPlugin::', 'myPlugin' );
+		$this->assertEquals( array( 'myPlugin', 'myPlugin::' ), $result );
+
+		// A namespace with invalid characters is not considered a valid namespace.
+		$result = $extract_directive_value->invoke( $this->interactivity, '$myPlugin::state.foo', 'myPlugin' );
+		$this->assertEquals( array( 'myPlugin', '$myPlugin::state.foo' ), $result );
+	}
+
+	/**
+	 * Tests extracting directive values from invalid JSON strings.
+	 *
+	 * @ticket 60356
+	 *
+	 * @covers ::extract_directive_value
+	 */
+	public function test_extract_directive_value_invalid_json() {
+		$extract_directive_value = new ReflectionMethod( $this->interactivity, 'extract_directive_value' );
+		$extract_directive_value->setAccessible( true );
+
+		// Invalid JSON due to missing quotes. Returns the original value.
+		$result = $extract_directive_value->invoke( $this->interactivity, '{ isOpen: false }', 'myPlugin' );
+		$this->assertEquals( array( 'myPlugin', '{ isOpen: false }' ), $result );
+
+		// Null string. Returns null.
+		$result = $extract_directive_value->invoke( $this->interactivity, 'null', 'myPlugin' );
+		$this->assertEquals( array( 'myPlugin', null ), $result );
+	}
+
+	/**
+	 * Tests the ability to extract prefix and suffix from a directive attribute
+	 * name.
+	 *
+	 * @ticket 60356
+	 *
+	 * @covers ::extract_prefix_and_suffix
+	 */
+	public function test_extract_prefix_and_suffix() {
+		$extract_prefix_and_suffix = new ReflectionMethod( $this->interactivity, 'extract_prefix_and_suffix' );
+		$extract_prefix_and_suffix->setAccessible( true );
+
+		$result = $extract_prefix_and_suffix->invoke( $this->interactivity, 'data-wp-interactive' );
+		$this->assertEquals( array( 'data-wp-interactive' ), $result );
+
+		$result = $extract_prefix_and_suffix->invoke( $this->interactivity, 'data-wp-bind--src' );
+		$this->assertEquals( array( 'data-wp-bind', 'src' ), $result );
+
+		$result = $extract_prefix_and_suffix->invoke( $this->interactivity, 'data-wp-foo--and--bar' );
+		$this->assertEquals( array( 'data-wp-foo', 'and--bar' ), $result );
+	}
+
+	/**
+	 * Tests that the `process_directives` method doesn't change the HTML if it
+	 * doesn't contain directives.
+	 *
+	 * @ticket 60356
+	 *
+	 * @covers ::process_directives
+	 */
+	public function test_process_directives_do_nothing_without_directives() {
+		$html           = '<div>Inner content here</div>';
+		$processed_html = $this->interactivity->process_directives( $html );
+		$this->assertEquals( $html, $processed_html );
+
+		$html           = '<div><span>Content</span><strong>More Content</strong></div>';
+		$processed_html = $this->interactivity->process_directives( $html );
+		$this->assertEquals( $html, $processed_html );
+	}
+
+	/**
+	 * Tests that the `process_directives` method changes the HTML if it contains
+	 * directives.
+	 *
+	 * @ticket 60356
+	 *
+	 * @covers ::process_directives
+	 */
+	public function test_process_directives_changes_html_with_balanced_tags() {
+		$this->interactivity->state( 'myPlugin', array( 'id' => 'some-id' ) );
+		$html           = '<div data-wp-bind--id="myPlugin::state.id">Inner content</div>';
+		$processed_html = $this->interactivity->process_directives( $html );
+		$p              = new WP_HTML_Tag_Processor( $processed_html );
+		$p->next_tag();
+		$this->assertEquals( 'some-id', $p->get_attribute( 'id' ) );
+	}
+
+	/**
+	 * Tests how `process_directives` handles HTML with unknown directives.
+	 *
+	 * @ticket 60356
+	 *
+	 * @covers ::process_directives
+	 */
+	public function test_process_directives_doesnt_fail_with_unknown_directives() {
+		$html           = '<div data-wp-uknown="">Text</div>';
+		$processed_html = $this->interactivity->process_directives( $html );
+		$this->assertEquals( $html, $processed_html );
+	}
+
+	/**
+	 * Tests that directives are processed in the correct order.
+	 *
+	 * @ticket 60356
+	 *
+	 * @covers ::process_directives
+	 */
+	public function test_process_directives_process_the_directives_in_the_correct_order() {
+		$html           = '
+			<div
+				data-wp-interactive=\'{ "namespace": "test" }\'
+				data-wp-context=\'{ "isClass": true, "id": "some-id", "text": "Updated", "display": "none" }\'
+				data-wp-bind--id="context.id"
+				data-wp-class--some-class="context.isClass"
+				data-wp-style--display="context.display"
+				data-wp-text="context.text"
+			>Text</div>';
+		$processed_html = $this->interactivity->process_directives( $html );
+		$p              = new WP_HTML_Tag_Processor( $processed_html );
+		$p->next_tag();
+		$this->assertEquals( 'some-id', $p->get_attribute( 'id' ) );
+		$this->assertEquals( 'some-class', $p->get_attribute( 'class' ) );
+		$this->assertEquals( 'display:none;', $p->get_attribute( 'style' ) );
+		$this->assertStringContainsString( 'Updated', $p->get_updated_html() );
+		$this->assertStringNotContainsString( 'Text', $p->get_updated_html() );
+	}
+
+	/**
+	 * Tests that the `process_directives` returns the same HTML if it contains
+	 * unbalanced tags.
+	 *
+	 * @ticket 60356
+	 *
+	 * @covers ::process_directives
+	 */
+	public function test_process_directives_doesnt_change_html_if_contains_unbalanced_tags() {
+		$this->interactivity->state( 'myPlugin', array( 'id' => 'some-id' ) );
+
+		$html_samples = array(
+			'<div data-wp-bind--id="myPlugin::state.id">Inner content</div></div>',
+			'<div data-wp-bind--id="myPlugin::state.id">Inner content</div><div>',
+			'<div><div data-wp-bind--id="myPlugin::state.id">Inner content</div>',
+			'</div><div data-wp-bind--id="myPlugin::state.id">Inner content</div>',
+			'<div data-wp-bind--id="myPlugin::state.id">Inner<div>content</div>',
+			'<div data-wp-bind--id="myPlugin::state.id">Inner</div>content</div>',
+			'<div data-wp-bind--id="myPlugin::state.id"><span>Inner content</div>',
+			'<div data-wp-bind--id="myPlugin::state.id">Inner content</div></span>',
+			'<div data-wp-bind--id="myPlugin::state.id"><span>Inner content</div></span>',
+			'<div data-wp-bind--id="myPlugin::state.id">Inner conntent</ ></div>',
+		);
+
+		foreach ( $html_samples as $html ) {
+			$processed_html = $this->interactivity->process_directives( $html );
+			$p              = new WP_HTML_Tag_Processor( $processed_html );
+			$p->next_tag();
+			$this->assertNull( $p->get_attribute( 'id' ) );
+		}
+	}
+
+	/**
+	 * Tests that the `process_directives` process the HTML outside a SVG tag.
+	 *
+	 * @ticket 60517
+	 *
+	 * @covers ::process_directives
+	 */
+	public function test_process_directives_changes_html_if_contains_svgs() {
+		$this->interactivity->state(
+			'myPlugin',
+			array(
+				'id'    => 'some-id',
+				'width' => '100',
+			)
+		);
+		$html           = '
+			<header>
+				<svg height="100" data-wp-bind--width="myPlugin::state.width">
+					<title>Red Circle</title>
+					<circle cx="50" cy="50" r="40" stroke="black" stroke-width="3" fill="red" />
+				</svg>
+				<div data-wp-bind--id="myPlugin::state.id"></div>
+				<div data-wp-bind--id="myPlugin::state.width"></div>
+			</header>
+		';
+		$processed_html = $this->interactivity->process_directives( $html );
+		$p              = new WP_HTML_Tag_Processor( $processed_html );
+		$p->next_tag( 'svg' );
+		$this->assertNull( $p->get_attribute( 'width' ) );
+		$p->next_tag( 'div' );
+		$this->assertEquals( 'some-id', $p->get_attribute( 'id' ) );
+		$p->next_tag( 'div' );
+		$this->assertEquals( '100', $p->get_attribute( 'id' ) );
+	}
+
+	/**
+	 * Tests that the `process_directives` does not process the HTML
+	 * inside SVG tags.
+	 *
+	 * @ticket 60517
+	 *
+	 * @covers ::process_directives
+	 */
+	public function test_process_directives_does_not_change_inner_html_in_svgs() {
+		$this->interactivity->state(
+			'myPlugin',
+			array(
+				'id' => 'some-id',
+			)
+		);
+		$html           = '
+			<header>
+				<svg height="100">
+					<circle cx="50" cy="50" r="40" stroke="black" stroke-width="3" fill="red" />
+					<g data-wp-bind--id="myPlugin::state.id" />
+				</svg>
+			</header>
+		';
+		$processed_html = $this->interactivity->process_directives( $html );
+		$p              = new WP_HTML_Tag_Processor( $processed_html );
+		$p->next_tag( 'div' );
+		$this->assertNull( $p->get_attribute( 'id' ) );
+	}
+
+	/**
+	 * Tests that the `process_directives` process the HTML outside the
+	 * MathML tag.
+	 *
+	 * @ticket 60517
+	 *
+	 * @covers ::process_directives
+	 */
+	public function test_process_directives_change_html_if_contains_math() {
+		$this->interactivity->state(
+			'myPlugin',
+			array(
+				'id'   => 'some-id',
+				'math' => 'ml-id',
+			)
+		);
+		$html           = '
+			<header>
+				<math data-wp-bind--id="myPlugin::state.math">
+					<mi>x</mi>
+					<mo>=</mo>
+					<mi>1</mi>
+				</math>
+				<div data-wp-bind--id="myPlugin::state.id"></div>
+			</header>
+		';
+		$processed_html = $this->interactivity->process_directives( $html );
+		$p              = new WP_HTML_Tag_Processor( $processed_html );
+		$p->next_tag( 'math' );
+		$this->assertNull( $p->get_attribute( 'id' ) );
+		$p->next_tag( 'div' );
+		$this->assertEquals( 'some-id', $p->get_attribute( 'id' ) );
+	}
+
+	/**
+	 * Tests that the `process_directives` does not process the HTML
+	 * inside MathML tags.
+	 *
+	 * @ticket 60517
+	 *
+	 * @covers ::process_directives
+	 */
+	public function test_process_directives_does_not_change_inner_html_in_math() {
+		$this->interactivity->state(
+			'myPlugin',
+			array(
+				'id' => 'some-id',
+			)
+		);
+		$html           = '
+			<header>
+				<math data-wp-bind--id="myPlugin::state.math">
+					<mrow data-wp-bind--id="myPlugin::state.id" />
+					<mi>x</mi>
+					<mo>=</mo>
+					<mi>1</mi>
+				</math>
+			</header>
+		';
+		$processed_html = $this->interactivity->process_directives( $html );
+		$p              = new WP_HTML_Tag_Processor( $processed_html );
+		$p->next_tag( 'div' );
+		$this->assertNull( $p->get_attribute( 'id' ) );
+	}
+
+	/**
+	 * Invokes the private `evaluate` method of WP_Interactivity_API class.
+	 *
+	 * @param string $directive_value The directive attribute value to evaluate.
+	 * @return mixed The result of the evaluate method.
+	 */
+	private function evaluate( $directive_value ) {
+		$generate_state = function ( $name ) {
+			return array(
+				'key'    => $name,
+				'nested' => array( 'key' => $name . '-nested' ),
+			);
+		};
+		$this->interactivity->state( 'myPlugin', $generate_state( 'myPlugin-state' ) );
+		$this->interactivity->state( 'otherPlugin', $generate_state( 'otherPlugin-state' ) );
+		$context  = array(
+			'myPlugin'    => $generate_state( 'myPlugin-context' ),
+			'otherPlugin' => $generate_state( 'otherPlugin-context' ),
+		);
+		$evaluate = new ReflectionMethod( $this->interactivity, 'evaluate' );
+		$evaluate->setAccessible( true );
+		return $evaluate->invokeArgs( $this->interactivity, array( $directive_value, 'myPlugin', $context ) );
+	}
+
+	/**
+	 * Tests that the `evaluate` method operates correctly for valid expressions.
+	 *
+	 * @ticket 60356
+	 *
+	 * @covers ::evaluate
+	 */
+	public function test_evaluate_value() {
+		$result = $this->evaluate( 'state.key' );
+		$this->assertEquals( 'myPlugin-state', $result );
+
+		$result = $this->evaluate( 'context.key' );
+		$this->assertEquals( 'myPlugin-context', $result );
+
+		$result = $this->evaluate( 'otherPlugin::state.key' );
+		$this->assertEquals( 'otherPlugin-state', $result );
+
+		$result = $this->evaluate( 'otherPlugin::context.key' );
+		$this->assertEquals( 'otherPlugin-context', $result );
+	}
+
+	/**
+	 * Tests that the `evaluate` method operates correctly when used with the
+	 * negation operator (!).
+	 *
+	 * @ticket 60356
+	 *
+	 * @covers ::evaluate
+	 */
+	public function test_evaluate_value_negation() {
+		$result = $this->evaluate( '!state.key' );
+		$this->assertFalse( $result );
+
+		$result = $this->evaluate( '!context.key' );
+		$this->assertFalse( $result );
+
+		$result = $this->evaluate( 'otherPlugin::!state.key' );
+		$this->assertFalse( $result );
+
+		$result = $this->evaluate( 'otherPlugin::!context.key' );
+		$this->assertFalse( $result );
+	}
+
+	/**
+	 * Tests the `evaluate` method with non-existent paths.
+	 *
+	 * @ticket 60356
+	 *
+	 * @covers ::evaluate
+	 */
+	public function test_evaluate_non_existent_path() {
+		$result = $this->evaluate( 'state.nonExistentKey' );
+		$this->assertNull( $result );
+
+		$result = $this->evaluate( 'context.nonExistentKey' );
+		$this->assertNull( $result );
+
+		$result = $this->evaluate( 'otherPlugin::state.nonExistentKey' );
+		$this->assertNull( $result );
+
+		$result = $this->evaluate( 'otherPlugin::context.nonExistentKey' );
+		$this->assertNull( $result );
+
+		$result = $this->evaluate( ' state.key' ); // Extra space.
+		$this->assertNull( $result );
+
+		$result = $this->evaluate( 'otherPlugin:: state.key' ); // Extra space.
+		$this->assertNull( $result );
+	}
+
+	/**
+	 * Tests the `evaluate` method for retrieving nested values.
+	 *
+	 * @ticket 60356
+	 *
+	 * @covers ::evaluate
+	 */
+	public function test_evaluate_nested_value() {
+		$result = $this->evaluate( 'state.nested.key' );
+		$this->assertEquals( 'myPlugin-state-nested', $result );
+
+		$result = $this->evaluate( 'context.nested.key' );
+		$this->assertEquals( 'myPlugin-context-nested', $result );
+
+		$result = $this->evaluate( 'otherPlugin::state.nested.key' );
+		$this->assertEquals( 'otherPlugin-state-nested', $result );
+
+		$result = $this->evaluate( 'otherPlugin::context.nested.key' );
+		$this->assertEquals( 'otherPlugin-context-nested', $result );
+	}
+
+	/**
+	 * Tests the `kebab_to_camel_case` method.
+	 *
+	 * @covers ::kebab_to_camel_case
+	 */
+	public function test_kebab_to_camel_case() {
+		$method = new ReflectionMethod( $this->interactivity, 'kebab_to_camel_case' );
+		$method->setAccessible( true );
+
+		$this->assertSame( '', $method->invoke( $this->interactivity, '' ) );
+		$this->assertSame( 'item', $method->invoke( $this->interactivity, 'item' ) );
+		$this->assertSame( 'myItem', $method->invoke( $this->interactivity, 'my-item' ) );
+		$this->assertSame( 'my_item', $method->invoke( $this->interactivity, 'my_item' ) );
+		$this->assertSame( 'myItem', $method->invoke( $this->interactivity, 'My-iTem' ) );
+		$this->assertSame( 'myItemWithMultipleHyphens', $method->invoke( $this->interactivity, 'my-item-with-multiple-hyphens' ) );
+		$this->assertSame( 'myItemWith-DoubleHyphens', $method->invoke( $this->interactivity, 'my-item-with--double-hyphens' ) );
+		$this->assertSame( 'myItemWith_underScore', $method->invoke( $this->interactivity, 'my-item-with_under-score' ) );
+		$this->assertSame( 'myItem', $method->invoke( $this->interactivity, '-my-item' ) );
+		$this->assertSame( 'myItem', $method->invoke( $this->interactivity, 'my-item-' ) );
+		$this->assertSame( 'myItem', $method->invoke( $this->interactivity, '-my-item-' ) );
+	}
+}
diff --git a/tests/interactivity-api/wpInteractivityAPIDirectivesProcessor.php b/tests/interactivity-api/wpInteractivityAPIDirectivesProcessor.php
new file mode 100644
index 0000000000..e7395b5f38
--- /dev/null
+++ b/tests/interactivity-api/wpInteractivityAPIDirectivesProcessor.php
@@ -0,0 +1,828 @@
+<?php
+/**
+ * Unit tests covering WP_Interactivity_API_Directives_Processor functionality.
+ *
+ * @package WordPress
+ * @subpackage Interactivity API
+ *
+ * @since 6.5.0
+ *
+ * @group interactivity-api
+ *
+ * @coversDefaultClass WP_Interactivity_API_Directives_Processor
+ */
+class Tests_Interactivity_API_WpInteractivityAPIDirectivesProcessor extends WP_UnitTestCase {
+	/**
+	 * Tests the `get_content_between_balanced_template_tags` method on template
+	 * tags.
+	 *
+	 * @ticket 60356
+	 *
+	 * @covers ::get_content_between_balanced_template_tags
+	 */
+	public function test_get_content_between_balanced_template_tags_standard_tags() {
+		$content = '<template>Text</template>';
+		$p       = new WP_Interactivity_API_Directives_Processor( $content );
+		$p->next_tag();
+		$this->assertEquals( 'Text', $p->get_content_between_balanced_template_tags() );
+
+		$content = '<template>Text</template><template>More text</template>';
+		$p       = new WP_Interactivity_API_Directives_Processor( $content );
+		$p->next_tag();
+		$this->assertEquals( 'Text', $p->get_content_between_balanced_template_tags() );
+		$p->next_tag();
+		$this->assertEquals( 'More text', $p->get_content_between_balanced_template_tags() );
+	}
+
+	/**
+	 * Tests the `get_content_between_balanced_template_tags` method on an empty
+	 * tag.
+	 *
+	 * @ticket 60356
+	 *
+	 * @covers ::get_content_between_balanced_template_tags
+	 */
+	public function test_get_content_between_balanced_template_tags_empty_tag() {
+		$content = '<template></template>';
+		$p       = new WP_Interactivity_API_Directives_Processor( $content );
+		$p->next_tag();
+		$this->assertEquals( '', $p->get_content_between_balanced_template_tags() );
+	}
+
+	/**
+	 * Tests the `get_content_between_balanced_template_tags` method with
+	 * non-template tags.
+	 *
+	 * @ticket 60356
+	 *
+	 * @covers ::get_content_between_balanced_template_tags
+	 */
+	public function test_get_content_between_balanced_template_tags_self_closing_tag() {
+		$content = '<img src="example.jpg">';
+		$p       = new WP_Interactivity_API_Directives_Processor( $content );
+		$p->next_tag();
+		$this->assertNull( $p->get_content_between_balanced_template_tags() );
+
+		$content = '<div>Text</div>';
+		$p       = new WP_Interactivity_API_Directives_Processor( $content );
+		$p->next_tag();
+		$this->assertNull( $p->get_content_between_balanced_template_tags() );
+	}
+
+	/**
+	 * Tests the `get_content_between_balanced_template_tags` method with nested
+	 * template tags.
+	 *
+	 * @ticket 60356
+	 *
+	 * @covers ::get_content_between_balanced_template_tags
+	 */
+	public function test_get_content_between_balanced_template_tags_nested_tags() {
+		$content = '<template><span>Content</span><strong>More Content</strong></template>';
+		$p       = new WP_Interactivity_API_Directives_Processor( $content );
+		$p->next_tag();
+		$this->assertEquals( '<span>Content</span><strong>More Content</strong>', $p->get_content_between_balanced_template_tags() );
+
+		$content = '<template><template>Content</template><img src="example.jpg"></template>';
+		$p       = new WP_Interactivity_API_Directives_Processor( $content );
+		$p->next_tag();
+		$this->assertEquals( '<template>Content</template><img src="example.jpg">', $p->get_content_between_balanced_template_tags() );
+	}
+
+	/**
+	 * Tests the `get_content_between_balanced_template_tags` method when no tags
+	 * are present.
+	 *
+	 * @ticket 60356
+	 *
+	 * @covers ::get_content_between_balanced_template_tags
+	 */
+	public function test_get_content_between_balanced_template_tags_no_tags() {
+		$content = 'Just a string with no tags.';
+		$p       = new WP_Interactivity_API_Directives_Processor( $content );
+		$p->next_tag();
+		$this->assertNull( $p->get_content_between_balanced_template_tags() );
+	}
+
+	/**
+	 * Tests the `get_content_between_balanced_template_tags` method with unbalanced tags.
+	 *
+	 * @ticket 60356
+	 *
+	 * @covers ::get_content_between_balanced_template_tags
+	 */
+	public function test_get_content_between_balanced_template_tags_with_unbalanced_tags() {
+		$content = '<template>Missing closing template';
+		$p       = new WP_Interactivity_API_Directives_Processor( $content );
+		$p->next_tag();
+		$this->assertNull( $p->get_content_between_balanced_template_tags() );
+
+		$content = '<template><template>Missing closing template</template>';
+		$p       = new WP_Interactivity_API_Directives_Processor( $content );
+		$p->next_tag();
+		$this->assertNull( $p->get_content_between_balanced_template_tags() );
+
+		$content = '<template>Missing closing template</span>';
+		$p       = new WP_Interactivity_API_Directives_Processor( $content );
+		$p->next_tag();
+		$this->assertNull( $p->get_content_between_balanced_template_tags() );
+
+		// It supports unbalanced tags inside the content.
+		$content = '<template>Missing opening span</span></template>';
+		$p       = new WP_Interactivity_API_Directives_Processor( $content );
+		$p->next_tag();
+		$this->assertEquals( 'Missing opening span</span>', $p->get_content_between_balanced_template_tags() );
+	}
+
+	/**
+	 * Tests the `get_content_between_balanced_template_tags` method when called
+	 * on a closer tag.
+	 *
+	 * @ticket 60356
+	 *
+	 * @covers ::get_content_between_balanced_template_tags
+	 */
+	public function test_get_content_between_balanced_template_tags_on_closing_tag() {
+		$content = '<template>Text</template>';
+		$p       = new WP_Interactivity_API_Directives_Processor( $content );
+		$p->next_tag( array( 'tag_closers' => 'visit' ) );
+		$p->next_tag( array( 'tag_closers' => 'visit' ) );
+		$this->assertNull( $p->get_content_between_balanced_template_tags() );
+	}
+
+	/**
+	 * Tests the `get_content_between_balanced_template_tags` method positions the
+	 * cursor on the closer tag.
+	 *
+	 * @ticket 60356
+	 *
+	 * @covers ::get_content_between_balanced_template_tags
+	 */
+	public function test_get_content_between_balanced_template_tags_positions_cursor_on_closer_tag() {
+		$content = '<template>Text</template><div>More text</div>';
+		$p       = new WP_Interactivity_API_Directives_Processor( $content );
+		$p->next_tag();
+		$p->get_content_between_balanced_template_tags();
+		$this->assertEquals( 'TEMPLATE', $p->get_tag() );
+		$this->assertTrue( $p->is_tag_closer() );
+		$p->next_tag();
+		$this->assertEquals( 'DIV', $p->get_tag() );
+	}
+
+	/**
+	 * Tests the `set_content_between_balanced_tags` method on standard tags.
+	 *
+	 * @ticket 60356
+	 *
+	 * @covers ::set_content_between_balanced_tags
+	 */
+	public function test_set_content_between_balanced_tags_standard_tags() {
+		$content = '<div>Text</div>';
+		$p       = new WP_Interactivity_API_Directives_Processor( $content );
+		$p->next_tag();
+		$result = $p->set_content_between_balanced_tags( 'New text' );
+		$this->assertTrue( $result );
+		$this->assertEquals( '<div>New text</div>', $p );
+
+		$content = '<div>Text</div><div>More text</div>';
+		$p       = new WP_Interactivity_API_Directives_Processor( $content );
+		$p->next_tag();
+		$result = $p->set_content_between_balanced_tags( 'New text' );
+		$this->assertTrue( $result );
+		$this->assertEquals( '<div>New text</div><div>More text</div>', $p );
+		$p->next_tag();
+		$result = $p->set_content_between_balanced_tags( 'More new text' );
+		$this->assertTrue( $result );
+		$this->assertEquals( '<div>New text</div><div>More new text</div>', $p );
+	}
+
+	/**
+	 * Tests the `set_content_between_balanced_tags` method when called on a
+	 * closing tag.
+	 *
+	 * @ticket 60356
+	 *
+	 * @covers ::set_content_between_balanced_tags
+	 */
+	public function test_set_content_between_balanced_tags_on_closing_tag() {
+		$content = '<div>Text</div>';
+		$p       = new WP_Interactivity_API_Directives_Processor( $content );
+		$p->next_tag( array( 'tag_closers' => 'visit' ) );
+		$p->next_tag( array( 'tag_closers' => 'visit' ) );
+		$result = $p->set_content_between_balanced_tags( 'New text' );
+		$this->assertFalse( $result );
+		$this->assertEquals( '<div>Text</div>', $p );
+	}
+
+	/**
+	 * Tests the `set_content_between_balanced_tags` method on multiple calls to
+	 * the same tag.
+	 *
+	 * @ticket 60356
+	 *
+	 * @covers ::set_content_between_balanced_tags
+	 */
+	public function test_set_content_between_balanced_tags_multiple_calls_in_same_tag() {
+		$content = '<div>Text</div>';
+		$p       = new WP_Interactivity_API_Directives_Processor( $content );
+		$p->next_tag();
+		$result = $p->set_content_between_balanced_tags( 'New text' );
+		$this->assertTrue( $result );
+		$this->assertEquals( '<div>New text</div>', $p );
+		$result = $p->set_content_between_balanced_tags( 'More text' );
+		$this->assertTrue( $result );
+		$this->assertEquals( '<div>More text</div>', $p );
+	}
+
+	/**
+	 * Tests the `set_content_between_balanced_tags` method on combinations with
+	 * set_attribute calls.
+	 *
+	 * @ticket 60356
+	 *
+	 * @covers ::set_content_between_balanced_tags
+	 */
+	public function test_set_content_between_balanced_tags_with_set_attribute() {
+		$content = '<div>Text</div>';
+		$p       = new WP_Interactivity_API_Directives_Processor( $content );
+		$p->next_tag();
+		$p->set_attribute( 'class', 'test' );
+		$result = $p->set_content_between_balanced_tags( 'New text' );
+		$this->assertTrue( $result );
+		$this->assertEquals( '<div class="test">New text</div>', $p );
+
+		$content = '<div>Text</div>';
+		$p       = new WP_Interactivity_API_Directives_Processor( $content );
+		$p->next_tag();
+		$result = $p->set_content_between_balanced_tags( 'New text' );
+		$this->assertTrue( $result );
+		$p->set_attribute( 'class', 'test' );
+		$this->assertEquals( '<div class="test">New text</div>', $p );
+	}
+
+	/**
+	 * Tests the `set_content_between_balanced_tags` method where the existing
+	 * content includes tags.
+	 *
+	 * @ticket 60356
+	 *
+	 * @covers ::set_content_between_balanced_tags
+	 */
+	public function test_set_content_between_balanced_tags_with_existing_tags() {
+		$content = '<div><span>Text</span></div>';
+		$p       = new WP_Interactivity_API_Directives_Processor( $content );
+		$p->next_tag();
+		$result = $p->set_content_between_balanced_tags( 'New text' );
+		$this->assertTrue( $result );
+		$this->assertEquals( '<div>New text</div>', $p );
+	}
+
+	/**
+	 * Tests the `set_content_between_balanced_tags` method where the new content
+	 * includes tags.
+	 *
+	 * @ticket 60356
+	 *
+	 * @covers ::set_content_between_balanced_tags
+	 */
+	public function test_set_content_between_balanced_tags_with_new_tags() {
+		$content     = '<div>Text</div>';
+		$new_content = '<span>New text</span><a href="#">Link</a>';
+		$p           = new WP_Interactivity_API_Directives_Processor( $content );
+		$p->next_tag();
+		$p->set_content_between_balanced_tags( $new_content );
+		$this->assertEquals( '<div>&lt;span&gt;New text&lt;/span&gt;&lt;a href=&quot;#&quot;&gt;Link&lt;/a&gt;</div>', $p );
+	}
+
+	/**
+	 * Tests the `set_content_between_balanced_tags` method with an empty string.
+	 *
+	 * @ticket 60356
+	 *
+	 * @covers ::set_content_between_balanced_tags
+	 */
+	public function test_set_content_between_balanced_tags_empty() {
+		$content = '<div>Text</div>';
+		$p       = new WP_Interactivity_API_Directives_Processor( $content );
+		$p->next_tag();
+		$result = $p->set_content_between_balanced_tags( '' );
+		$this->assertTrue( $result );
+		$this->assertEquals( '<div></div>', $p );
+
+		$content = '<div><div>Text</div></div>';
+		$p       = new WP_Interactivity_API_Directives_Processor( $content );
+		$p->next_tag();
+		$result = $p->set_content_between_balanced_tags( '' );
+		$this->assertTrue( $result );
+		$this->assertEquals( '<div></div>', $p );
+	}
+
+	/**
+	 * Tests the `set_content_between_balanced_tags` method on self-closing tags.
+	 *
+	 * @ticket 60356
+	 *
+	 * @covers ::set_content_between_balanced_tags
+	 */
+	public function test_set_content_between_balanced_tags_self_closing_tag() {
+		$content = '<img src="example.jpg">';
+		$p       = new WP_Interactivity_API_Directives_Processor( $content );
+		$p->next_tag();
+		$result = $p->set_content_between_balanced_tags( 'New text' );
+		$this->assertFalse( $result );
+		$this->assertEquals( $content, $p );
+	}
+
+	/**
+	 * Tests the `set_content_between_balanced_tags` method on a non-existent tag.
+	 *
+	 * @ticket 60356
+	 *
+	 * @covers ::set_content_between_balanced_tags
+	 */
+	public function test_set_content_between_balanced_tags_non_existent_tag() {
+		$content = 'Just a string with no tags.';
+		$p       = new WP_Interactivity_API_Directives_Processor( $content );
+		$p->next_tag();
+		$result = $p->set_content_between_balanced_tags( 'New text' );
+		$this->assertFalse( $result );
+		$this->assertEquals( $content, $p );
+	}
+
+	/**
+	 * Tests the `set_content_between_balanced_tags` method with unbalanced tags.
+	 *
+	 * @ticket 60356
+	 *
+	 * @covers ::set_content_between_balanced_tags
+	 */
+	public function test_set_content_between_balanced_tags_with_unbalanced_tags() {
+		$new_content = 'New text';
+
+		$content = '<div>Missing closing div';
+		$p       = new WP_Interactivity_API_Directives_Processor( $content );
+		$p->next_tag();
+		$result = $p->set_content_between_balanced_tags( $new_content );
+		$this->assertFalse( $result );
+		$this->assertEquals( $content, $p );
+
+		$content = '<div><div>Missing closing div</div>';
+		$p       = new WP_Interactivity_API_Directives_Processor( $content );
+		$p->next_tag();
+		$result = $p->set_content_between_balanced_tags( $new_content );
+		$this->assertFalse( $result );
+		$this->assertEquals( $content, $p );
+
+		$content = '<div>Missing closing div</span>';
+		$p       = new WP_Interactivity_API_Directives_Processor( $content );
+		$p->next_tag();
+		$result = $p->set_content_between_balanced_tags( $new_content );
+		$this->assertFalse( $result );
+		$this->assertEquals( $content, $p );
+
+		// It supports unbalanced tags inside the content.
+		$content = '<div>Missing opening span</span></div>';
+		$p       = new WP_Interactivity_API_Directives_Processor( $content );
+		$p->next_tag();
+		$result = $p->set_content_between_balanced_tags( $new_content );
+		$this->assertTrue( $result );
+		$this->assertEquals( '<div>New text</div>', $p );
+	}
+
+	/**
+	 * Tests the `has_and_visits_its_closer_tag` method.
+	 *
+	 * @ticket 60356
+	 *
+	 * @covers ::has_and_visits_its_closer_tag
+	 */
+	public function test_has_and_visits_its_closer_tag() {
+		$void_tags = array( 'area', 'base', 'br', 'col', 'embed', 'hr', 'img', 'input', 'link', 'meta', 'source', 'track', 'wbr' );
+		foreach ( $void_tags as $tag_name ) {
+			$content = "<{$tag_name} id={$tag_name}>";
+			$p       = new WP_Interactivity_API_Directives_Processor( $content );
+			$p->next_tag();
+			$this->assertFalse( $p->has_and_visits_its_closer_tag() );
+		}
+
+		$tags_that_dont_visit_closing_tag = array( 'script', 'iframe', 'textarea', 'iframe', 'style' );
+		foreach ( $tags_that_dont_visit_closing_tag as $tag_name ) {
+			$content = "<{$tag_name} id={$tag_name}>Some content</{$tag_name}>";
+			$p       = new WP_Interactivity_API_Directives_Processor( $content );
+			$p->next_tag();
+			$this->assertFalse( $p->has_and_visits_its_closer_tag() );
+		}
+
+		$tags_that_visit_closing_tag = array( 'div', 'span', 'p', 'h1', 'main' );
+		foreach ( $tags_that_visit_closing_tag as $tag_name ) {
+			$content = "<{$tag_name} id={$tag_name}>Some content</{$tag_name}>";
+			$p       = new WP_Interactivity_API_Directives_Processor( $content );
+			$p->next_tag();
+			$this->assertTrue( $p->has_and_visits_its_closer_tag() );
+		}
+
+		// Test an upercase tag.
+		$content = '<IMG src="example.jpg">';
+		$p       = new WP_Interactivity_API_Directives_Processor( $content );
+		$p->next_tag();
+		$this->assertFalse( $p->has_and_visits_its_closer_tag() );
+
+		// Test an empty string.
+		$content = '';
+		$p       = new WP_Interactivity_API_Directives_Processor( $content );
+		$p->next_tag();
+		$this->assertFalse( $p->has_and_visits_its_closer_tag() );
+
+		// Test on text nodes.
+		$content = 'This is just some text';
+		$p       = new WP_Interactivity_API_Directives_Processor( $content );
+		$p->next_tag();
+		$this->assertFalse( $p->has_and_visits_its_closer_tag() );
+	}
+
+	/**
+	 * Tests the `append_content_after_template_tag_closer` method with a simple
+	 * text.
+	 *
+	 * @ticket 60356
+	 *
+	 * @covers ::append_content_after_template_tag_closer
+	 */
+	public function test_append_content_after_template_tag_closer_simple_text() {
+		$content_1 = '<template>Text</template>';
+		$content_2 = 'New text';
+		$p         = new WP_Interactivity_API_Directives_Processor( $content_1 );
+		$p->next_tag( array( 'tag_closers' => 'visit' ) );
+		$p->next_tag( array( 'tag_closers' => 'visit' ) );
+		$result = $p->append_content_after_template_tag_closer( $content_2 );
+		$this->assertTrue( $result );
+		$this->assertEquals( $content_1 . $content_2, $p );
+		$this->assertFalse( $p->next_tag() ); // There are no more tags.
+	}
+
+	/**
+	 * Tests the `append_content_after_template_tag_closer` method with simple
+	 * tags.
+	 *
+	 * @ticket 60356
+	 *
+	 * @covers ::append_content_after_template_tag_closer
+	 */
+	public function test_append_content_after_template_tag_closer_simple_tags() {
+		$content_1 = '<template>Text</template>';
+		$content_2 = '<template class="content-2">New text</template>';
+		$content_3 = '<template class="content-3">More new text</template>';
+		$p         = new WP_Interactivity_API_Directives_Processor( $content_1 );
+		$p->next_tag( array( 'tag_closers' => 'visit' ) );
+		$p->next_tag( array( 'tag_closers' => 'visit' ) );
+		$result = $p->append_content_after_template_tag_closer( $content_2 );
+		$this->assertTrue( $result );
+		$this->assertEquals( $content_1 . $content_2, $p );
+		$p->next_tag( array( 'tag_closers' => 'visit' ) );
+		$this->assertEquals( 'content-2', $p->get_attribute( 'class' ) );
+		$p->next_tag( array( 'tag_closers' => 'visit' ) );
+		$result = $p->append_content_after_template_tag_closer( $content_3 );
+		$this->assertTrue( $result );
+		$p->next_tag( array( 'tag_closers' => 'visit' ) );
+		$this->assertEquals( $content_1 . $content_2 . $content_3, $p );
+		$this->assertEquals( 'content-3', $p->get_attribute( 'class' ) );
+	}
+
+	/**
+	 * Tests the `append_content_after_template_tag_closer` method in the middle
+	 * of two tags.
+	 *
+	 * @ticket 60356
+	 *
+	 * @covers ::append_content_after_template_tag_closer
+	 */
+	public function test_append_content_after_template_tag_closer_in_the_middle_of_tags() {
+		$content_1 = '<template>Text</template>';
+		$content_2 = 'New text';
+		$content_3 = '<template class="content-3">More new text</template>';
+		$content_4 = '<template class="content-4">Even more new text</template>';
+
+		$p = new WP_Interactivity_API_Directives_Processor( $content_1 . $content_3 );
+		$p->next_tag( array( 'tag_closers' => 'visit' ) );
+		$p->next_tag( array( 'tag_closers' => 'visit' ) );
+		$result = $p->append_content_after_template_tag_closer( $content_2 );
+		$this->assertTrue( $result );
+		$this->assertEquals( $content_1 . $content_2 . $content_3, $p );
+		$p->next_tag( array( 'tag_closers' => 'visit' ) );
+		$this->assertEquals( 'content-3', $p->get_attribute( 'class' ) );
+
+		$p = new WP_Interactivity_API_Directives_Processor( $content_1 . $content_3 );
+		$p->next_tag( array( 'tag_closers' => 'visit' ) );
+		$p->next_tag( array( 'tag_closers' => 'visit' ) );
+		$result = $p->append_content_after_template_tag_closer( $content_4 );
+		$this->assertTrue( $result );
+		$this->assertEquals( $content_1 . $content_4 . $content_3, $p );
+		$p->next_tag( array( 'tag_closers' => 'visit' ) );
+		$this->assertEquals( 'content-4', $p->get_attribute( 'class' ) );
+	}
+
+	/**
+	 * Tests the `append_content_after_template_tag_closer` method doesn't modify
+	 * the content when called on an opener tag.
+	 *
+	 * @ticket 60356
+	 *
+	 * @covers ::append_content_after_template_tag_closer
+	 */
+	public function test_append_content_after_template_tag_closer_on_opener_tag() {
+		$content = '<template>Text</template>';
+		$p       = new WP_Interactivity_API_Directives_Processor( $content );
+		$p->next_tag( array( 'tag_closers' => 'visit' ) );
+		$result = $p->append_content_after_template_tag_closer( 'New text' );
+		$this->assertFalse( $result );
+		$this->assertEquals( $content, $p );
+	}
+
+	/**
+	 * Tests the `append_content_after_template_tag_closer` method on multiple
+	 * calls to the same tag.
+	 *
+	 * @ticket 60356
+	 *
+	 * @covers ::append_content_after_template_tag_closer
+	 */
+	public function test_append_content_after_template_tag_closer_multiple_calls_in_same_tag() {
+		$content_1 = '<template class="content-1">Text</template>';
+		$content_2 = '<template class="content-2">New text</template>';
+		$content_3 = '<template class="content-3">More new text</template>';
+		$p         = new WP_Interactivity_API_Directives_Processor( $content_1 );
+		$p->next_tag( array( 'tag_closers' => 'visit' ) );
+		$p->set_bookmark( 'first template' );
+		$p->next_tag( array( 'tag_closers' => 'visit' ) );
+		$result = $p->append_content_after_template_tag_closer( $content_2 );
+		$this->assertTrue( $result );
+		$this->assertEquals( $content_1 . $content_2, $p );
+		$p->next_tag( array( 'tag_closers' => 'visit' ) );
+		$this->assertEquals( 'content-2', $p->get_attribute( 'class' ) );
+		// Rewinds to the first template.
+		$p->seek( 'first template' );
+		$p->release_bookmark( 'first template' );
+		$this->assertEquals( 'content-1', $p->get_attribute( 'class' ) );
+		$p->next_tag( array( 'tag_closers' => 'visit' ) );
+		$result = $p->append_content_after_template_tag_closer( $content_3 );
+		$this->assertEquals( $content_1 . $content_3 . $content_2, $p );
+		$p->next_tag( array( 'tag_closers' => 'visit' ) );
+		$this->assertEquals( 'content-3', $p->get_attribute( 'class' ) );
+	}
+
+	/**
+	 * Tests the `append_content_after_template_tag_closer` method on
+	 * set_attribute calls.
+	 *
+	 * @ticket 60356
+	 *
+	 * @covers ::append_content_after_template_tag_closer
+	 */
+	public function test_append_content_after_template_tag_closer_with_set_attribute() {
+		$content_1 = '<template>Text</template>';
+		$content_2 = '<template>New text</template>';
+
+		$p = new WP_Interactivity_API_Directives_Processor( $content_1 );
+		$p->next_tag( array( 'tag_closers' => 'visit' ) );
+		$p->set_attribute( 'class', 'test' );
+		$p->next_tag( array( 'tag_closers' => 'visit' ) );
+		$result = $p->append_content_after_template_tag_closer( $content_2 );
+		$this->assertTrue( $result );
+		$this->assertEquals( '<template class="test">Text</template>' . $content_2, $p );
+	}
+
+	/**
+	 * Tests the `append_content_after_template_tag_closer` method where the
+	 * existing content includes tags.
+	 *
+	 * @ticket 60356
+	 *
+	 * @covers ::append_content_after_template_tag_closer
+	 */
+	public function test_append_content_after_template_tag_closer_with_existing_tags() {
+		$content_1 = '<template><span>Text</span></template>';
+		$content_2 = '<template class="content-2-template-1"><template class="content-2-template-2">New text</template></template>';
+		$content_3 = '<template><span>More new text</span></template>';
+		$p         = new WP_Interactivity_API_Directives_Processor( $content_1 );
+		$p->next_tag();
+		$p->next_tag(
+			array(
+				'tag_name'    => 'template',
+				'tag_closers' => 'visit',
+			)
+		);
+		$result = $p->append_content_after_template_tag_closer( $content_2 );
+		$this->assertTrue( $result );
+		$this->assertEquals( $content_1 . $content_2, $p );
+		$p->next_tag();
+		$this->assertEquals( 'content-2-template-1', $p->get_attribute( 'class' ) );
+		$p->next_tag();
+		$this->assertEquals( 'content-2-template-2', $p->get_attribute( 'class' ) );
+		$p->next_tag( array( 'tag_closers' => 'visit' ) );
+		$result = $p->append_content_after_template_tag_closer( $content_3 );
+		$this->assertTrue( $result );
+		$this->assertEquals( $content_1 . '<template class="content-2-template-1"><template class="content-2-template-2">New text</template>' . $content_3 . '</template>', $p );
+	}
+
+	/**
+	 * Tests the `append_content_after_template_tag_closer` method fails with an
+	 * empty string.
+	 *
+	 * @ticket 60356
+	 *
+	 * @covers ::append_content_after_template_tag_closer
+	 */
+	public function test_append_content_after_template_tag_closer_empty() {
+		$content = '<template class="content">Text</template>';
+		$p       = new WP_Interactivity_API_Directives_Processor( $content );
+		$p->next_tag( array( 'tag_closers' => 'visit' ) );
+		$p->next_tag( array( 'tag_closers' => 'visit' ) );
+		$result = $p->append_content_after_template_tag_closer( '' );
+		$this->assertFalse( $result );
+		$this->assertEquals( $content, $p );
+		$this->assertEquals( 'TEMPLATE', $p->get_tag() ); // It didn't move.
+		$this->assertTrue( $p->is_tag_closer() ); // It didn't move.
+	}
+
+	/**
+	 * Tests the `append_content_after_template_tag_closer` method on a
+	 * non-existent tag.
+	 *
+	 * @ticket 60356
+	 *
+	 * @covers ::append_content_after_template_tag_closer
+	 */
+	public function test_append_content_after_template_tag_closer_non_existent_tag() {
+		$content_1 = 'Just a string with no tags.';
+		$content_2 = '<div>New text</div>';
+		$p         = new WP_Interactivity_API_Directives_Processor( $content_1 );
+		$p->next_tag();
+		$result = $p->append_content_after_template_tag_closer( $content_2 );
+		$this->assertFalse( $result );
+		$this->assertEquals( $content_1, $p );
+	}
+
+	/**
+	 * Tests the `append_content_after_template_tag_closer` method on non-template
+	 * tags.
+	 *
+	 * @ticket 60356
+	 *
+	 * @covers ::append_content_after_template_tag_closer
+	 */
+	public function test_append_content_after_template_tag_closer_non_template_tags() {
+		$content_1 = '<div>Text</div>';
+		$content_2 = '<div>New text</div>';
+		$p         = new WP_Interactivity_API_Directives_Processor( $content_1 );
+		$p->next_tag( array( 'tag_closers' => 'visit' ) );
+		$p->next_tag( array( 'tag_closers' => 'visit' ) );
+		$result = $p->append_content_after_template_tag_closer( $content_2 );
+		$this->assertFalse( $result );
+		$this->assertEquals( $content_1, $p );
+	}
+
+	/**
+	 * Tests that the `next_balanced_tag_closer_tag` method finds a closing tag
+	 * for a standard tag.
+	 *
+	 * @ticket 60356
+	 *
+	 * @covers ::next_balanced_tag_closer_tag
+	 */
+	public function test_next_balanced_tag_closer_tag_standard_tags() {
+		$content = '<div>Text</div>';
+		$p       = new WP_Interactivity_API_Directives_Processor( $content );
+		$p->next_tag();
+		$this->assertTrue( $p->next_balanced_tag_closer_tag() );
+		$this->assertEquals( 'DIV', $p->get_tag() );
+		$this->assertTrue( $p->is_tag_closer() );
+	}
+
+	/**
+	 * Tests that the `next_balanced_tag_closer_tag` method returns false for a
+	 * self-closing tag.
+	 *
+	 * @ticket 60356
+	 *
+	 * @covers ::next_balanced_tag_closer_tag
+	 */
+	public function test_next_balanced_tag_closer_tag_void_tag() {
+		$content = '<img src="image.jpg" />';
+		$p       = new WP_Interactivity_API_Directives_Processor( $content );
+		$p->next_tag();
+		$this->assertFalse( $p->next_balanced_tag_closer_tag() );
+
+		$content = '<img src="image.jpg" /><div>Text</div>';
+		$p       = new WP_Interactivity_API_Directives_Processor( $content );
+		$p->next_tag();
+		$this->assertFalse( $p->next_balanced_tag_closer_tag() );
+	}
+
+	/**
+	 * Tests that the `next_balanced_tag_closer_tag` method correctly handles
+	 * nested tags.
+	 *
+	 * @ticket 60356
+	 *
+	 * @covers ::next_balanced_tag_closer_tag
+	 */
+	public function test_next_balanced_tag_closer_tag_nested_tags() {
+		$content = '<div><span>Nested content</span></div>';
+		$p       = new WP_Interactivity_API_Directives_Processor( $content );
+		$p->next_tag();
+		$this->assertTrue( $p->next_balanced_tag_closer_tag() );
+		$this->assertEquals( 'DIV', $p->get_tag() );
+		$this->assertTrue( $p->is_tag_closer() );
+
+		$content = '<div><div>Nested content</div></div>';
+		$p       = new WP_Interactivity_API_Directives_Processor( $content );
+		$p->next_tag();
+		$this->assertTrue( $p->next_balanced_tag_closer_tag() );
+		$this->assertEquals( 'DIV', $p->get_tag() );
+		$this->assertTrue( $p->is_tag_closer() );
+		$this->assertFalse( $p->next_tag() ); // No more content.
+	}
+
+	/**
+	 * Tests that the `next_balanced_tag_closer_tag` method returns false when no
+	 * matching closing tag is found.
+	 *
+	 * @ticket 60356
+	 *
+	 * @covers ::next_balanced_tag_closer_tag
+	 */
+	public function test_next_balanced_tag_closer_tag_no_matching_closing_tag() {
+		$content = '<div>No closing tag here';
+		$p       = new WP_Interactivity_API_Directives_Processor( $content );
+		$p->next_tag();
+
+		$content = '<div><div>No closing tag here</div>';
+		$p       = new WP_Interactivity_API_Directives_Processor( $content );
+		$p->next_tag();
+		$this->assertFalse( $p->next_balanced_tag_closer_tag() );
+	}
+
+	/**
+	 * Test that the `next_balanced_tag_closer_tag` method returns false when
+	 * returned on a closing tag.
+	 *
+	 * @ticket 60356
+	 *
+	 * @covers ::next_balanced_tag_closer_tag
+	 */
+	public function test_next_balanced_tag_closer_tag_on_closing_tag() {
+		$content = '<div>Closing tag after this</div>';
+		$p       = new WP_Interactivity_API_Directives_Processor( $content );
+		// Visit opening tag first and then closing tag.
+		$p->next_tag();
+		$p->next_tag( array( 'tag_closers' => 'visit' ) );
+		$this->assertFalse( $p->next_balanced_tag_closer_tag() );
+	}
+
+	/**
+	 * Tests that skip_to_tag_closer skips to the next tag,
+	 * independant of the content.
+	 *
+	 * @ticket 60517
+	 *
+	 * @covers ::skip_to_tag_closer
+	 */
+	public function test_skip_to_tag_closer() {
+		$content = '<div><span>Not closed</div>';
+		$p       = new WP_Interactivity_API_Directives_Processor( $content );
+		$p->next_tag();
+		$this->assertTrue( $p->skip_to_tag_closer() );
+		$this->assertTrue( $p->is_tag_closer() );
+		$this->assertEquals( 'DIV', $p->get_tag() );
+	}
+
+	/**
+	 * Tests that skip_to_tag_closer does not skip to the
+	 * next tag if there is no closing tag.
+	 *
+	 * @ticket 60517
+	 *
+	 * @covers ::skip_to_tag_closer
+	 */
+	public function test_skip_to_tag_closer_bails_not_closed() {
+		$content = '<div>Not closed parent';
+		$p       = new WP_Interactivity_API_Directives_Processor( $content );
+		$p->next_tag();
+		$this->assertFalse( $p->skip_to_tag_closer() );
+	}
+
+	/**
+	 * Tests that skip_to_tag_closer does not skip to the next
+	 * tag if the closing tag is different from the current tag.
+	 *
+	 * @ticket 60517
+	 *
+	 * @covers ::skip_to_tag_closer
+	 */
+	public function test_skip_to_tag_closer_bails_different_tags() {
+		$content = '<div></span>';
+		$p       = new WP_Interactivity_API_Directives_Processor( $content );
+		$p->next_tag();
+		$this->assertFalse( $p->skip_to_tag_closer() );
+	}
+}
diff --git a/tests/interactivity-api/wpInteractivityAPIFunctions.php b/tests/interactivity-api/wpInteractivityAPIFunctions.php
new file mode 100644
index 0000000000..a9e7adaf82
--- /dev/null
+++ b/tests/interactivity-api/wpInteractivityAPIFunctions.php
@@ -0,0 +1,528 @@
+<?php
+/**
+ * Unit tests covering the functionality of the public functions of the
+ * Interactivity API.
+ *
+ * @package WordPress
+ * @subpackage Interactivity API
+ *
+ * @since 6.5.0
+ *
+ * @group interactivity-api
+ */
+class Tests_Interactivity_API_wpInteractivityAPIFunctions extends WP_UnitTestCase {
+	/**
+	 * Set up.
+	 */
+	public function set_up() {
+		parent::set_up();
+
+		$interactive_block = array(
+			'render_callback' => function ( $attributes, $content ) {
+				return '
+						<div
+							data-wp-interactive=\'{ "namespace": "myPlugin" }\'
+							data-wp-context=\'{ "block": ' . $attributes['block'] . ' }\'
+						>
+							<input
+								class="interactive/block-' . $attributes['block'] . '"
+								data-wp-bind--value="context.block"
+							>' .
+						$content .
+					'</div>';
+			},
+			'supports'        => array(
+				'interactivity' => true,
+			),
+		);
+
+		register_block_type( 'test/interactive-block', $interactive_block );
+		register_block_type( 'test/interactive-block-2', $interactive_block );
+
+		register_block_type(
+			'test/non-interactive-block',
+			array(
+				'render_callback' => function ( $attributes, $content ) {
+					$directive = isset( $attributes['hasDirective'] ) ? ' data-wp-bind--value="context.block"' : '';
+					return '
+						<div>
+							<input class="non-interactive/block-' . $attributes['block'] . '"' . $directive . '>' .
+							$content .
+						'</div>';
+				},
+			)
+		);
+	}
+
+	/**
+	 * Tear down.
+	 */
+	public function tear_down() {
+		unregister_block_type( 'test/interactive-block' );
+		unregister_block_type( 'test/interactive-block-2' );
+		unregister_block_type( 'test/non-interactive-block' );
+		parent::tear_down();
+	}
+
+	/**
+	 * Tests processing of a single interactive block.
+	 *
+	 * @ticket 60356
+	 *
+	 * @covers wp_interactivity_process_directives_of_interactive_blocks
+	 */
+	public function test_processs_directives_of_single_interactive_block() {
+		$post_content    = '<!-- wp:test/interactive-block { "block": 1 } /-->';
+		$rendered_blocks = do_blocks( $post_content );
+		$p               = new WP_HTML_Tag_Processor( $rendered_blocks );
+		$p->next_tag( array( 'class_name' => 'interactive/block-1' ) );
+		$this->assertEquals( '1', $p->get_attribute( 'value' ) );
+	}
+
+	/**
+	 * Tests processing of multiple interactive blocks in parallel along with a
+	 * non-interactive block.
+	 *
+	 * @ticket 60356
+	 *
+	 * @covers wp_interactivity_process_directives_of_interactive_blocks
+	 */
+	public function test_processs_directives_of_multiple_interactive_blocks_in_paralell() {
+		$post_content    = '
+			<!-- wp:test/interactive-block { "block": 1 } /-->
+			<!-- wp:test/interactive-block-2 { "block": 2 } /-->
+			<!-- wp:test/non-interactive-block { "block": 3, "hasDirective": true } /-->
+			<!-- wp:test/interactive-block { "block": 4 } /-->
+		';
+		$rendered_blocks = do_blocks( $post_content );
+		$p               = new WP_HTML_Tag_Processor( $rendered_blocks );
+		$p->next_tag( array( 'class_name' => 'interactive/block-1' ) );
+		$this->assertEquals( '1', $p->get_attribute( 'value' ) );
+		$p->next_tag( array( 'class_name' => 'interactive/block-2' ) );
+		$this->assertEquals( '2', $p->get_attribute( 'value' ) );
+		$p->next_tag( array( 'class_name' => 'non-interactive/block-3' ) );
+		$this->assertNull( $p->get_attribute( 'value' ) );
+		$p->next_tag( array( 'class_name' => 'interactive/block-4' ) );
+		$this->assertEquals( '4', $p->get_attribute( 'value' ) );
+	}
+
+	/**
+	 * Tests processing of an interactive block inside a non-interactive block.
+	 *
+	 * @ticket 60356
+	 *
+	 * @covers wp_interactivity_process_directives_of_interactive_blocks
+	 */
+	public function test_processs_directives_of_interactive_block_inside_non_interactive_block() {
+		$post_content    = '
+			<!-- wp:test/non-interactive-block { "block": 1 } -->
+				<!-- wp:test/interactive-block { "block": 2 } /-->
+			<!-- /wp:test/non-interactive-block -->
+		';
+		$rendered_blocks = do_blocks( $post_content );
+		$p               = new WP_HTML_Tag_Processor( $rendered_blocks );
+		$p->next_tag( array( 'class_name' => 'interactive/block-2' ) );
+		$this->assertEquals( '2', $p->get_attribute( 'value' ) );
+	}
+
+	/**
+	 * Tests processing of multiple interactive blocks nested inside a
+	 * non-interactive block.
+	 *
+	 * @ticket 60356
+	 *
+	 * @covers wp_interactivity_process_directives_of_interactive_blocks
+	 */
+	public function test_processs_directives_of_multple_interactive_blocks_inside_non_interactive_block() {
+		$post_content    = '
+			<!-- wp:test/non-interactive-block { "block": 1 } -->
+				<!-- wp:test/interactive-block { "block": 2 } /-->
+				<!-- wp:test/interactive-block { "block": 3 } /-->
+			<!-- /wp:test/non-interactive-block -->
+		';
+		$rendered_blocks = do_blocks( $post_content );
+		$p               = new WP_HTML_Tag_Processor( $rendered_blocks );
+		$p->next_tag( array( 'class_name' => 'interactive/block-2' ) );
+		$this->assertEquals( '2', $p->get_attribute( 'value' ) );
+		$p->next_tag( array( 'class_name' => 'interactive/block-3' ) );
+		$this->assertEquals( '3', $p->get_attribute( 'value' ) );
+	}
+
+	/**
+	 * Tests processing of a single interactive block directive nested inside
+	 * multiple non-interactive blocks.
+	 *
+	 * @ticket 60356
+	 *
+	 * @covers wp_interactivity_process_directives_of_interactive_blocks
+	 */
+	public function test_processs_directives_of_interactive_block_inside_multple_non_interactive_block() {
+		$post_content    = '
+			<!-- wp:test/non-interactive-block { "block": 1 } -->
+				<!-- wp:test/interactive-block { "block": 2 } /-->
+			<!-- /wp:test/non-interactive-block -->
+			<!-- wp:test/non-interactive-block { "block": 3 } -->
+				<!-- wp:test/interactive-block-2 { "block": 4 } /-->
+			<!-- /wp:test/non-interactive-block -->
+		';
+		$rendered_blocks = do_blocks( $post_content );
+		$p               = new WP_HTML_Tag_Processor( $rendered_blocks );
+		$p->next_tag( array( 'class_name' => 'interactive/block-2' ) );
+		$this->assertEquals( '2', $p->get_attribute( 'value' ) );
+		$p->next_tag( array( 'class_name' => 'interactive/block-4' ) );
+		$this->assertEquals( '4', $p->get_attribute( 'value' ) );
+	}
+
+	/**
+	 * Tests processing of directives for an interactive block containing a
+	 * non-interactive block without directives.
+	 *
+	 * @ticket 60356
+	 *
+	 * @covers wp_interactivity_process_directives_of_interactive_blocks
+	 */
+	public function test_processs_directives_of_interactive_block_containing_non_interactive_block_without_directives() {
+		$post_content    = '
+			<!-- wp:test/interactive-block { "block": 1 } -->
+				<!-- wp:test/non-interactive-block { "block": 2 } /-->
+			<!-- /wp:test/interactive-block -->
+		';
+		$rendered_blocks = do_blocks( $post_content );
+		$p               = new WP_HTML_Tag_Processor( $rendered_blocks );
+		$p->next_tag( array( 'class_name' => 'interactive/block-1' ) );
+		$this->assertEquals( '1', $p->get_attribute( 'value' ) );
+		$p->next_tag( array( 'class_name' => 'non-interactive/block-2' ) );
+		$this->assertNull( $p->get_attribute( 'value' ) );
+	}
+
+	/**
+	 * Tests processing of directives for an interactive block containing a
+	 * non-interactive block with directives.
+	 *
+	 * @ticket 60356
+	 *
+	 * @covers wp_interactivity_process_directives_of_interactive_blocks
+	 */
+	public function test_processs_directives_of_interactive_block_containing_non_interactive_block_with_directives() {
+		$post_content    = '
+			<!-- wp:test/interactive-block { "block": 1 } -->
+				<!-- wp:test/non-interactive-block { "block": 2, "hasDirective": true } /-->
+			<!-- /wp:test/interactive-block -->
+		';
+		$rendered_blocks = do_blocks( $post_content );
+		$p               = new WP_HTML_Tag_Processor( $rendered_blocks );
+		$p->next_tag( array( 'class_name' => 'interactive/block-1' ) );
+		$this->assertEquals( '1', $p->get_attribute( 'value' ) );
+		$p->next_tag( array( 'class_name' => 'non-interactive/block-2' ) );
+		$this->assertEquals( '1', $p->get_attribute( 'value' ) );
+	}
+
+	/**
+	 * Tests processing of directives for an interactive block containing nested
+	 * interactive and non-interactive blocks, checking proper propagation of
+	 * context.
+	 *
+	 * @ticket 60356
+	 *
+	 * @covers wp_interactivity_process_directives_of_interactive_blocks
+	 */
+	public function test_processs_directives_of_interactive_block_containing_nested_interactive_and_non_interactive_blocks() {
+		$post_content    = '
+			<!-- wp:test/interactive-block { "block": 1 } -->
+				<!-- wp:test/interactive-block-2 { "block": 2 } -->
+					<!-- wp:test/non-interactive-block { "block": 3, "hasDirective": true } /-->
+				<!-- /wp:test/interactive-block-2 -->
+				<!-- wp:test/non-interactive-block { "block": 4, "hasDirective": true } /-->
+			<!-- /wp:test/interactive-block -->
+		';
+		$rendered_blocks = do_blocks( $post_content );
+		$p               = new WP_HTML_Tag_Processor( $rendered_blocks );
+		$p->next_tag( array( 'class_name' => 'interactive/block-1' ) );
+		$this->assertEquals( '1', $p->get_attribute( 'value' ) );
+		$p->next_tag( array( 'class_name' => 'interactive/block-2' ) );
+		$this->assertEquals( '2', $p->get_attribute( 'value' ) );
+		$p->next_tag( array( 'class_name' => 'non-interactive/block-3' ) );
+		$this->assertEquals( '2', $p->get_attribute( 'value' ) );
+		$p->next_tag( array( 'class_name' => 'non-interactive/block-4' ) );
+		$this->assertEquals( '1', $p->get_attribute( 'value' ) );
+	}
+
+	/**
+	 * Counter for the number of times the test directive processor is called.
+	 *
+	 * @var int
+	 */
+	private $data_wp_test_processor_count = 0;
+
+	/**
+	 * Test directive processor callback.
+	 *
+	 * Increments the $data_wp_test_processor_count every time a tag that is not a
+	 * tag closer is processed.
+	 *
+	 * @param WP_HTML_Tag_Processor $p Instance of the processor handling the current HTML tag.
+	 */
+	public function data_wp_test_processor( $p ) {
+		if ( ! $p->is_tag_closer() ) {
+			$this->data_wp_test_processor_count = $this->data_wp_test_processor_count + 1;
+		}
+	}
+
+	/**
+	 * Tests that directives are only processed once for the root interactive
+	 * blocks.
+	 *
+	 * This ensures that nested blocks do not trigger additional processing of the
+	 * same directives, leading to incorrect behavior or performance issues.
+	 *
+	 * @ticket 60356
+	 *
+	 * @covers wp_interactivity_process_directives_of_interactive_blocks
+	 */
+	public function test_process_directives_only_process_the_root_interactive_blocks() {
+		$class                = new ReflectionClass( 'WP_Interactivity_API' );
+		$directive_processors = $class->getProperty( 'directive_processors' );
+		$directive_processors->setAccessible( true );
+		$old_directive_processors = $directive_processors->getValue();
+		$directive_processors->setValue( null, array( 'data-wp-test' => array( $this, 'data_wp_test_processor' ) ) );
+		$html                               = '<div data-wp-test></div>';
+		$this->data_wp_test_processor_count = 0;
+		wp_interactivity_process_directives( $html );
+		$this->assertEquals( 1, $this->data_wp_test_processor_count );
+
+		register_block_type(
+			'test/custom-directive-block',
+			array(
+				'render_callback' => function ( $attributes, $content ) {
+					return '<div class="test" data-wp-test>' . $content . '</div>';
+				},
+				'supports'        => array(
+					'interactivity' => true,
+				),
+			)
+		);
+		$post_content                       = '
+			<!-- wp:test/custom-directive-block -->
+				<!-- wp:test/custom-directive-block /-->
+			<!-- /wp:test/custom-directive-block -->
+		';
+		$this->data_wp_test_processor_count = 0;
+		do_blocks( $post_content );
+		unregister_block_type( 'test/custom-directive-block' );
+		$this->assertEquals( 2, $this->data_wp_test_processor_count );
+		$directive_processors->setValue( null, $old_directive_processors );
+	}
+
+	/**
+	 * Tests that directives are server side processing even if the $parsed_block variable is edited by a filter.
+	 *
+	 * @ticket 60743
+	 *
+	 * @covers ::wp_interactivity_process_directives_of_interactive_blocks
+	 */
+	public function test_process_directives_when_block_is_filtered() {
+		register_block_type(
+			'test/custom-directive-block',
+			array(
+				'render_callback' => function () {
+					return '<input data-wp-interactive="nameSpace" ' . wp_interactivity_data_wp_context( array( 'text' => 'test' ) ) . ' data-wp-bind--value="context.text" />';
+				},
+				'supports'        => array(
+					'interactivity' => true,
+				),
+			)
+		);
+		function test_render_block_data( $parsed_block ) {
+			$parsed_block['testKey'] = true;
+			return $parsed_block;
+		}
+		add_filter( 'render_block_data', 'test_render_block_data' );
+		$post_content      = '<!-- wp:test/custom-directive-block /-->';
+		$processed_content = do_blocks( $post_content );
+		$processor         = new WP_HTML_Tag_Processor( $processed_content );
+		$processor->next_tag( array( 'data-wp-interactive' => 'nameSpace' ) );
+		remove_filter( 'render_block_data', 'test_render_block_data' );
+		unregister_block_type( 'test/custom-directive-block' );
+		$this->assertEquals( 'test', $processor->get_attribute( 'value' ) );
+	}
+
+	/**
+	 * Tests that wp_interactivity_data_wp_context function correctly converts different array
+	 * structures to a JSON string.
+	 *
+	 * @ticket 60356
+	 *
+	 * @covers wp_interactivity_data_wp_context
+	 */
+	public function test_wp_interactivity_data_wp_context_with_different_arrays() {
+		$this->assertEquals( 'data-wp-context=\'{}\'', wp_interactivity_data_wp_context( array() ) );
+		$this->assertEquals(
+			'data-wp-context=\'{"a":1,"b":"2","c":true}\'',
+			wp_interactivity_data_wp_context(
+				array(
+					'a' => 1,
+					'b' => '2',
+					'c' => true,
+				)
+			)
+		);
+		$this->assertEquals(
+			'data-wp-context=\'{"a":[1,2]}\'',
+			wp_interactivity_data_wp_context( array( 'a' => array( 1, 2 ) ) )
+		);
+		$this->assertEquals(
+			'data-wp-context=\'[1,2]\'',
+			wp_interactivity_data_wp_context( array( 1, 2 ) )
+		);
+	}
+
+	/**
+	 * Tests that wp_interactivity_data_wp_context function correctly converts different array
+	 * structures to a JSON string and adds a namespace.
+	 *
+	 * @ticket 60356
+	 *
+	 * @covers wp_interactivity_data_wp_context
+	 */
+	public function test_wp_interactivity_data_wp_context_with_different_arrays_and_a_namespace() {
+		$this->assertEquals( 'data-wp-context=\'myPlugin::{}\'', wp_interactivity_data_wp_context( array(), 'myPlugin' ) );
+		$this->assertEquals(
+			'data-wp-context=\'myPlugin::{"a":1,"b":"2","c":true}\'',
+			wp_interactivity_data_wp_context(
+				array(
+					'a' => 1,
+					'b' => '2',
+					'c' => true,
+				),
+				'myPlugin'
+			)
+		);
+		$this->assertEquals(
+			'data-wp-context=\'myPlugin::{"a":[1,2]}\'',
+			wp_interactivity_data_wp_context( array( 'a' => array( 1, 2 ) ), 'myPlugin' )
+		);
+		$this->assertEquals(
+			'data-wp-context=\'myPlugin::[1,2]\'',
+			wp_interactivity_data_wp_context( array( 1, 2 ), 'myPlugin' )
+		);
+	}
+
+	/**
+	 * Tests that wp_interactivity_data_wp_context function correctly applies the JSON encoding
+	 * flags. This ensures that characters like `<`, `>`, `'`, or `&` are
+	 * properly escaped in the JSON-encoded string to prevent potential XSS
+	 * attacks.
+	 *
+	 * @ticket 60356
+	 *
+	 * @covers wp_interactivity_data_wp_context
+	 */
+	public function test_wp_interactivity_data_wp_context_with_json_flags() {
+		$this->assertEquals( 'data-wp-context=\'{"tag":"\u003Cfoo\u003E"}\'', wp_interactivity_data_wp_context( array( 'tag' => '<foo>' ) ) );
+		$this->assertEquals( 'data-wp-context=\'{"apos":"\u0027bar\u0027"}\'', wp_interactivity_data_wp_context( array( 'apos' => "'bar'" ) ) );
+		$this->assertEquals( 'data-wp-context=\'{"quot":"\u0022baz\u0022"}\'', wp_interactivity_data_wp_context( array( 'quot' => '"baz"' ) ) );
+		$this->assertEquals( 'data-wp-context=\'{"amp":"T\u0026T"}\'', wp_interactivity_data_wp_context( array( 'amp' => 'T&T' ) ) );
+	}
+
+	/**
+	 * Tests that directives processing of tags that don't visit closer tag work.
+	 *
+	 * @ticket 60746
+	 *
+	 * @covers ::wp_interactivity_process_directives_of_interactive_blocks
+	 */
+	public function test_process_directives_in_tags_that_dont_visit_closer_tag() {
+		register_block_type(
+			'test/custom-directive-block',
+			array(
+				'render_callback' => function () {
+					return '<iframe data-wp-interactive="nameSpace" ' . wp_interactivity_data_wp_context( array( 'text' => 'test' ) ) . ' data-wp-class--test="context.text" src="1"></iframe>';
+				},
+				'supports'        => array(
+					'interactivity' => true,
+				),
+			)
+		);
+		$post_content      = '<!-- wp:test/custom-directive-block /-->';
+		$processed_content = do_blocks( $post_content );
+		$processor         = new WP_HTML_Tag_Processor( $processed_content );
+		$processor->next_tag( array( 'class_name' => 'test' ) );
+		unregister_block_type( 'test/custom-directive-block' );
+		$this->assertEquals( '1', $processor->get_attribute( 'src' ) );
+	}
+
+	/**
+	 * Tests that context from void tags is not propagated to next tags.
+	 *
+	 * @ticket 60768
+	 *
+	 * @covers wp_interactivity_process_directives_of_interactive_blocks
+	 */
+	public function test_process_context_directive_in_void_tags() {
+		register_block_type(
+			'test/custom-directive-block',
+			array(
+				'render_callback' => function () {
+					return '<div data-wp-interactive="nameSpace" data-wp-context=\'{"text": "outer"}\'><input id="first-input" data-wp-context=\'{"text": "inner"}\' data-wp-bind--value="context.text" /><input id="second-input" data-wp-bind--value="context.text" /></div>';
+				},
+				'supports'        => array(
+					'interactivity' => true,
+				),
+			)
+		);
+		$post_content      = '<!-- wp:test/custom-directive-block /-->';
+		$processed_content = do_blocks( $post_content );
+		$processor         = new WP_HTML_Tag_Processor( $processed_content );
+		$processor->next_tag(
+			array(
+				'tag_name' => 'input',
+				'id'       => 'first-input',
+			)
+		);
+		$first_input_value = $processor->get_attribute( 'value' );
+		$processor->next_tag(
+			array(
+				'tag_name' => 'input',
+				'id'       => 'second-input',
+			)
+		);
+		$second_input_value = $processor->get_attribute( 'value' );
+		unregister_block_type( 'test/custom-directive-block' );
+		$this->assertEquals( 'inner', $first_input_value );
+		$this->assertEquals( 'outer', $second_input_value );
+	}
+
+	/**
+	 * Tests that namespace from void tags is not propagated to next tags.
+	 *
+	 * @ticket 60768
+	 *
+	 * @covers wp_interactivity_process_directives_of_interactive_blocks
+	 */
+	public function test_process_interactive_directive_in_void_tags() {
+		wp_interactivity_state(
+			'void',
+			array(
+				'text' => 'void',
+			)
+		);
+		register_block_type(
+			'test/custom-directive-block',
+			array(
+				'render_callback' => function () {
+					return '<div data-wp-interactive="parent"><img data-wp-interactive="void" /><input data-wp-bind--value="state.text" /></div>';
+				},
+				'supports'        => array(
+					'interactivity' => true,
+				),
+			)
+		);
+		$post_content      = '<!-- wp:test/custom-directive-block /-->';
+		$processed_content = do_blocks( $post_content );
+		$processor         = new WP_HTML_Tag_Processor( $processed_content );
+		$processor->next_tag( array( 'tag_name' => 'input' ) );
+		$input_value = $processor->get_attribute( 'value' );
+		unregister_block_type( 'test/custom-directive-block' );
+		$this->assertNull( $input_value );
+	}
+}
diff --git a/tests/kses.php b/tests/kses.php
index 45f2862d14..b2ef5edeff 100644
--- a/tests/kses.php
+++ b/tests/kses.php
@@ -938,6 +938,8 @@ EOF;
 	 * @ticket 55966
 	 * @ticket 56122
 	 * @ticket 58551
+	 * @ticket 60132
+	 *
 	 * @dataProvider data_safecss_filter_attr
 	 *
 	 * @param string $css      A string of CSS rules.
@@ -952,8 +954,8 @@ EOF;
 	 *
 	 * @return array {
 	 *     @type array {
-	 *         @string string $css      A string of CSS rules.
-	 *         @string string $expected Expected string of CSS rules.
+	 *         @type string $css      A string of CSS rules.
+	 *         @type string $expected Expected string of CSS rules.
 	 *     }
 	 * }
 	 */
@@ -1346,6 +1348,11 @@ EOF;
 				'css'      => 'writing-mode: vertical-rl',
 				'expected' => 'writing-mode: vertical-rl',
 			),
+			// `background-repeat` introduced in 6.5.
+			array(
+				'css'      => 'background-repeat: no-repeat',
+				'expected' => 'background-repeat: no-repeat',
+			),
 		);
 	}
 
@@ -1614,8 +1621,8 @@ EOF;
 	 *
 	 * @return array {
 	 *     @type array {
-	 *         @string string $css      A string of CSS rules.
-	 *         @string string $expected Expected string of CSS rules.
+	 *         @type string $css      A string of CSS rules.
+	 *         @type string $expected Expected string of CSS rules.
 	 *     }
 	 * }
 	 */
@@ -2133,7 +2140,7 @@ HTML;
 			// $allowedentitynames values testing.
 			'nbsp'               => array(
 				'input'    => array( '', 'nbsp' ),
-				'expected' => utf8_encode( chr( 160 ) ),
+				'expected' => "\u{00A0}",
 			),
 			'iexcl'              => array(
 				'input'    => array( '', 'iexcl' ),
diff --git a/tests/l10n/determineLocale.php b/tests/l10n/determineLocale.php
index 51ab1c28b9..ca8c0bafec 100644
--- a/tests/l10n/determineLocale.php
+++ b/tests/l10n/determineLocale.php
@@ -20,7 +20,15 @@ class Tests_L10n_DetermineLocale extends WP_UnitTestCase {
 	}
 
 	public function tear_down() {
-		unset( $_SERVER['CONTENT_TYPE'], $_GET['_locale'], $_COOKIE['wp_lang'], $GLOBALS['pagenow'] );
+		unset(
+			$_SERVER['CONTENT_TYPE'],
+			$_GET['_locale'],
+			$_COOKIE['wp_lang'],
+			$GLOBALS['pagenow'],
+			$GLOBALS['wp_local_package'],
+			$_REQUEST['language']
+		);
+		wp_installing( false );
 
 		parent::tear_down();
 	}
@@ -273,4 +281,31 @@ class Tests_L10n_DetermineLocale extends WP_UnitTestCase {
 
 		$this->assertSame( 'siteLocale', determine_locale() );
 	}
+
+	public function test_language_param_not_installing() {
+		$_REQUEST['language'] = 'de_DE';
+		$this->assertSame( 'en_US', determine_locale() );
+	}
+
+	public function test_language_param_installing() {
+		$_REQUEST['language'] = 'de_DE';
+		wp_installing( true );
+		$this->assertSame( 'de_DE', determine_locale() );
+	}
+
+	public function test_language_param_installing_incorrect_string() {
+		$_REQUEST['language'] = '####';  // Something sanitize_locale_name() strips away.
+		wp_installing( true );
+		$this->assertSame( 'en_US', determine_locale() );
+	}
+
+	public function test_wp_local_package_global_not_installing() {
+		$GLOBALS['wp_local_package'] = 'de_DE';
+		$this->assertSame( 'en_US', determine_locale() );
+	}
+	public function test_wp_local_package_global_installing() {
+		$GLOBALS['wp_local_package'] = 'de_DE';
+		wp_installing( true );
+		$this->assertSame( 'de_DE', determine_locale() );
+	}
 }
diff --git a/tests/l10n/getLocale.php b/tests/l10n/getLocale.php
index 1f16448318..bebae56316 100644
--- a/tests/l10n/getLocale.php
+++ b/tests/l10n/getLocale.php
@@ -40,10 +40,6 @@ class Tests_L10n_GetLocale extends WP_UnitTestCase {
 	 * @group ms-required
 	 */
 	public function test_network_option_should_be_fallback_on_multisite() {
-		if ( ! is_multisite() ) {
-			$this->markTestSkipped( 'This test requires Multisite.' );
-		}
-
 		global $locale;
 		$old_locale = $locale;
 		$locale     = null;
@@ -60,10 +56,6 @@ class Tests_L10n_GetLocale extends WP_UnitTestCase {
 	 * @group ms-excluded
 	 */
 	public function test_option_should_be_respected_on_nonmultisite() {
-		if ( is_multisite() ) {
-			$this->markTestSkipped( 'This test does not apply to Multisite.' );
-		}
-
 		global $locale;
 		$old_locale = $locale;
 		$locale     = null;
diff --git a/tests/l10n/getUserLocale.php b/tests/l10n/getUserLocale.php
index 91e98b63e1..76492b3b70 100644
--- a/tests/l10n/getUserLocale.php
+++ b/tests/l10n/getUserLocale.php
@@ -67,10 +67,6 @@ class Tests_L10n_GetUserLocale extends WP_UnitTestCase {
 	 * @group ms-required
 	 */
 	public function test_user_locale_is_same_across_network() {
-		if ( ! is_multisite() ) {
-			$this->markTestSkipped( 'This test requires Multisite.' );
-		}
-
 		$user_locale = get_user_locale();
 
 		switch_to_blog( self::factory()->blog->create() );
diff --git a/tests/l10n/loadTextdomainJustInTime.php b/tests/l10n/loadTextdomainJustInTime.php
index 3b93d4a975..ea6de4017b 100644
--- a/tests/l10n/loadTextdomainJustInTime.php
+++ b/tests/l10n/loadTextdomainJustInTime.php
@@ -48,6 +48,10 @@ class Tests_L10n_LoadTextdomainJustInTime extends WP_UnitTestCase {
 
 		$wp_textdomain_registry = new WP_Textdomain_Registry();
 
+		unload_textdomain( 'internationalized-plugin' );
+		unload_textdomain( 'internationalized-plugin-2' );
+		unload_textdomain( 'internationalized-theme' );
+
 		parent::tear_down();
 	}
 
@@ -83,6 +87,27 @@ class Tests_L10n_LoadTextdomainJustInTime extends WP_UnitTestCase {
 		$this->assertTrue( $is_textdomain_loaded_after );
 	}
 
+	/**
+	 * @ticket 59656
+	 *
+	 * @covers ::is_textdomain_loaded
+	 */
+	public function test_plugin_translation_should_be_translated_with_only_an_l10n_php_file() {
+		add_filter( 'locale', array( $this, 'filter_set_locale_to_german' ) );
+
+		require_once DIR_TESTDATA . '/plugins/internationalized-plugin-2.php';
+
+		$is_textdomain_loaded_before = is_textdomain_loaded( 'internationalized-plugin-2' );
+		$actual_output               = i18n_plugin_2_test();
+		$is_textdomain_loaded_after  = is_textdomain_loaded( 'internationalized-plugin-2' );
+
+		remove_filter( 'locale', array( $this, 'filter_set_locale_to_german' ) );
+
+		$this->assertFalse( $is_textdomain_loaded_before );
+		$this->assertSame( 'Das ist ein Dummy Plugin', $actual_output );
+		$this->assertTrue( $is_textdomain_loaded_after );
+	}
+
 	/**
 	 * @ticket 34114
 	 *
diff --git a/tests/l10n/wpLocaleSwitcher.php b/tests/l10n/wpLocaleSwitcher.php
index 1b0b8f796d..ba12a432e4 100644
--- a/tests/l10n/wpLocaleSwitcher.php
+++ b/tests/l10n/wpLocaleSwitcher.php
@@ -21,6 +21,11 @@ class Tests_L10n_wpLocaleSwitcher extends WP_UnitTestCase {
 	 */
 	protected static $user_id;
 
+	/**
+	 * @var WP_Locale_Switcher
+	 */
+	protected $orig_instance;
+
 	public static function wpSetUpBeforeClass( WP_UnitTest_Factory $factory ) {
 		self::$user_id = $factory->user->create(
 			array(
@@ -42,7 +47,11 @@ class Tests_L10n_wpLocaleSwitcher extends WP_UnitTestCase {
 
 		$wp_textdomain_registry = new WP_Textdomain_Registry();
 
-		remove_filter( 'locale', array( $wp_locale_switcher, 'filter_locale' ) );
+		$this->orig_instance = $wp_locale_switcher;
+
+		remove_all_filters( 'locale' );
+		remove_all_filters( 'determine_locale' );
+
 		$wp_locale_switcher = new WP_Locale_Switcher();
 		$wp_locale_switcher->init();
 	}
@@ -58,9 +67,13 @@ class Tests_L10n_wpLocaleSwitcher extends WP_UnitTestCase {
 		// before resetting $wp_locale_switcher.
 		restore_current_locale();
 
-		remove_filter( 'locale', array( $wp_locale_switcher, 'filter_locale' ) );
-		$wp_locale_switcher = new WP_Locale_Switcher();
-		$wp_locale_switcher->init();
+		remove_all_filters( 'locale' );
+		remove_all_filters( 'determine_locale' );
+
+		$wp_locale_switcher = $this->orig_instance;
+
+		unload_textdomain( 'internationalized-plugin' );
+		unload_textdomain( 'custom-internationalized-theme' );
 
 		parent::tear_down();
 	}
diff --git a/tests/l10n/wpTextdomainRegistry.php b/tests/l10n/wpTextdomainRegistry.php
index fc53dd9c56..0344fe6caf 100644
--- a/tests/l10n/wpTextdomainRegistry.php
+++ b/tests/l10n/wpTextdomainRegistry.php
@@ -18,21 +18,21 @@ class Tests_L10n_wpTextdomainRegistry extends WP_UnitTestCase {
 		$this->instance = new WP_Textdomain_Registry();
 	}
 
+	public function tear_down() {
+		wp_cache_delete( md5( WP_LANG_DIR . '/foobar/' ), 'translation_files' );
+		wp_cache_delete( md5( WP_LANG_DIR . '/plugins/' ), 'translation_files' );
+		wp_cache_delete( md5( WP_LANG_DIR . '/themes/' ), 'translation_files' );
+		wp_cache_delete( md5( WP_LANG_DIR . '/' ), 'translation_files' );
+
+		parent::tear_down();
+	}
+
 	/**
 	 * @covers ::has
 	 * @covers ::get
 	 * @covers ::set_custom_path
 	 */
 	public function test_set_custom_path() {
-		$reflection          = new ReflectionClass( $this->instance );
-		$reflection_property = $reflection->getProperty( 'cached_mo_files' );
-		$reflection_property->setAccessible( true );
-
-		$this->assertEmpty(
-			$reflection_property->getValue( $this->instance ),
-			'Cache not empty by default'
-		);
-
 		$this->instance->set_custom_path( 'foo', WP_LANG_DIR . '/bar' );
 
 		$this->assertTrue(
@@ -48,10 +48,9 @@ class Tests_L10n_wpTextdomainRegistry extends WP_UnitTestCase {
 			$this->instance->get( 'foo', 'de_DE' ),
 			'Custom path for textdomain not returned'
 		);
-		$this->assertArrayHasKey(
-			WP_LANG_DIR . '/bar',
-			$reflection_property->getValue( $this->instance ),
-			'Custom path missing from cache'
+		$this->assertNotFalse(
+			wp_cache_get( md5( WP_LANG_DIR . '/bar/' ), 'translation_files' ),
+			'List of files in custom path not cached'
 		);
 	}
 
@@ -60,22 +59,12 @@ class Tests_L10n_wpTextdomainRegistry extends WP_UnitTestCase {
 	 * @dataProvider data_domains_locales
 	 */
 	public function test_get( $domain, $locale, $expected ) {
-		$reflection          = new ReflectionClass( $this->instance );
-		$reflection_property = $reflection->getProperty( 'cached_mo_files' );
-		$reflection_property->setAccessible( true );
-
 		$actual = $this->instance->get( $domain, $locale );
 		$this->assertSame(
 			$expected,
 			$actual,
 			'Expected languages directory path not matching actual one'
 		);
-
-		$this->assertArrayHasKey(
-			WP_LANG_DIR . '/plugins',
-			$reflection_property->getValue( $this->instance ),
-			'Default plugins path missing from cache'
-		);
 	}
 
 	/**
@@ -91,38 +80,117 @@ class Tests_L10n_wpTextdomainRegistry extends WP_UnitTestCase {
 		);
 	}
 
+	/**
+	 * @covers ::get_language_files_from_path
+	 */
+	public function test_get_language_files_from_path_caches_results() {
+		$this->instance->get_language_files_from_path( WP_LANG_DIR . '/foobar/' );
+		$this->instance->get_language_files_from_path( WP_LANG_DIR . '/plugins/' );
+		$this->instance->get_language_files_from_path( WP_LANG_DIR . '/themes/' );
+		$this->instance->get_language_files_from_path( WP_LANG_DIR . '/' );
+
+		$this->assertNotFalse( wp_cache_get( md5( WP_LANG_DIR . '/plugins/' ), 'translation_files' ) );
+		$this->assertNotFalse( wp_cache_get( md5( WP_LANG_DIR . '/themes/' ), 'translation_files' ) );
+		$this->assertNotFalse( wp_cache_get( md5( WP_LANG_DIR . '/foobar/' ), 'translation_files' ) );
+		$this->assertNotFalse( wp_cache_get( md5( WP_LANG_DIR . '/' ), 'translation_files' ) );
+	}
+
+	/**
+	 * @covers ::get_language_files_from_path
+	 */
+	public function test_get_language_files_from_path_short_circuit() {
+		add_filter( 'pre_get_language_files_from_path', '__return_empty_array' );
+		$result = $this->instance->get_language_files_from_path( WP_LANG_DIR . '/plugins/' );
+		remove_filter( 'pre_get_language_files_from_path', '__return_empty_array' );
+
+		$cache = wp_cache_get( md5( WP_LANG_DIR . '/plugins/' ), 'translation_files' );
+
+		$this->assertEmpty( $result );
+		$this->assertFalse( $cache );
+	}
+
+	/**
+	 * @covers ::invalidate_mo_files_cache
+	 */
+	public function test_invalidate_mo_files_cache() {
+		$this->instance->get_language_files_from_path( WP_LANG_DIR . '/plugins/' );
+		$this->instance->get_language_files_from_path( WP_LANG_DIR . '/themes/' );
+		$this->instance->get_language_files_from_path( WP_LANG_DIR . '/' );
+
+		$this->instance->invalidate_mo_files_cache(
+			null,
+			array(
+				'type'         => 'translation',
+				'translations' => array(
+					(object) array(
+						'type'     => 'plugin',
+						'slug'     => 'internationalized-plugin',
+						'language' => 'de_DE',
+						'version'  => '99.9.9',
+					),
+					(object) array(
+						'type'     => 'theme',
+						'slug'     => 'internationalized-theme',
+						'language' => 'de_DE',
+						'version'  => '99.9.9',
+					),
+					(object) array(
+						'type'     => 'core',
+						'slug'     => 'default',
+						'language' => 'es_ES',
+						'version'  => '99.9.9',
+					),
+				),
+			)
+		);
+
+		$this->assertFalse( wp_cache_get( md5( WP_LANG_DIR . '/plugins/' ), 'translation_files' ) );
+		$this->assertFalse( wp_cache_get( md5( WP_LANG_DIR . '/themes/' ), 'translation_files' ) );
+		$this->assertFalse( wp_cache_get( md5( WP_LANG_DIR . '/' ), 'translation_files' ) );
+	}
+
 	public function data_domains_locales() {
 		return array(
-			'Non-existent plugin'            => array(
+			'Non-existent plugin'                      => array(
 				'unknown-plugin',
 				'en_US',
 				false,
 			),
-			'Non-existent plugin with de_DE' => array(
+			'Non-existent plugin with de_DE'           => array(
 				'unknown-plugin',
 				'de_DE',
 				false,
 			),
-			'Available de_DE translations'   => array(
+			'Available de_DE translations'             => array(
 				'internationalized-plugin',
 				'de_DE',
 				WP_LANG_DIR . '/plugins/',
 			),
-			'Available es_ES translations'   => array(
+			'Available es_ES translations'             => array(
 				'internationalized-plugin',
 				'es_ES',
 				WP_LANG_DIR . '/plugins/',
 			),
-			'Unavailable fr_FR translations' => array(
+			'Unavailable fr_FR translations'           => array(
 				'internationalized-plugin',
 				'fr_FR',
 				false,
 			),
-			'Unavailable en_US translations' => array(
+			'Unavailable en_US translations'           => array(
 				'internationalized-plugin',
 				'en_US',
 				false,
 			),
+			'Available de_DE translations (.l10n.php)' => array(
+				'internationalized-plugin-2',
+				'de_DE',
+				WP_LANG_DIR . '/plugins/',
+			),
+			'Available es_ES translations (.l10n.php)' => array(
+				'internationalized-plugin-2',
+				'es_ES',
+				WP_LANG_DIR . '/plugins/',
+			),
 		);
 	}
 }
diff --git a/tests/l10n/wpTranslationController.php b/tests/l10n/wpTranslationController.php
new file mode 100644
index 0000000000..6c8fb6dc9d
--- /dev/null
+++ b/tests/l10n/wpTranslationController.php
@@ -0,0 +1,364 @@
+<?php
+
+/**
+ * @group l10n
+ * @group i18n
+ */
+class WP_Translation_Controller_Tests extends WP_UnitTestCase {
+	public function tear_down() {
+		remove_all_filters( 'translation_file_format' );
+		unload_textdomain( 'wp-tests-domain' );
+		unload_textdomain( 'internationalized-plugin' );
+
+		parent::tear_down();
+	}
+
+	/**
+	 * @covers ::load_textdomain
+	 * @covers WP_Translation_Controller::get_entries
+	 * @covers WP_Translation_Controller::get_headers
+	 * @covers WP_Translation_Controller::normalize_header
+	 */
+	public function test_load_textdomain() {
+		global $l10n;
+
+		$loaded_before_load = is_textdomain_loaded( 'wp-tests-domain' );
+
+		$load_successful = load_textdomain( 'wp-tests-domain', DIR_TESTDATA . '/pomo/simple.mo' );
+
+		$loaded_after_load = is_textdomain_loaded( 'wp-tests-domain' );
+
+		$compat_instance = $l10n['wp-tests-domain'] ?? null;
+
+		$is_loaded = WP_Translation_Controller::get_instance()->is_textdomain_loaded( 'wp-tests-domain' );
+		$headers   = WP_Translation_Controller::get_instance()->get_headers( 'wp-tests-domain' );
+		$entries   = WP_Translation_Controller::get_instance()->get_entries( 'wp-tests-domain' );
+
+		$unload_successful = unload_textdomain( 'wp-tests-domain' );
+
+		$loaded_after_unload = is_textdomain_loaded( 'wp-tests-domain' );
+
+		$this->assertFalse( $loaded_before_load, 'Text domain was already loaded at beginning of the test' );
+		$this->assertTrue( $load_successful, 'Text domain not successfully loaded' );
+		$this->assertTrue( $loaded_after_load, 'Text domain is not considered loaded' );
+		$this->assertInstanceOf( WP_Translations::class, $compat_instance, 'No compat provider instance used' );
+		$this->assertTrue( $unload_successful, 'Text domain not successfully unloaded' );
+		$this->assertFalse( $loaded_after_unload, 'Text domain still considered loaded after unload' );
+		$this->assertTrue( $is_loaded, 'Text domain not considered loaded' );
+		$this->assertEqualSetsWithIndex(
+			array(
+				'Project-Id-Version'   => 'WordPress 2.6-bleeding',
+				'Report-Msgid-Bugs-To' => 'wp-polyglots@lists.automattic.com',
+			),
+			$headers,
+			'Actual translation headers do not match expected ones'
+		);
+		$this->assertEqualSetsWithIndex(
+			array(
+				'baba'       => 'dyado',
+				"kuku\nruku" => 'yes',
+			),
+			$entries,
+			'Actual translation entries do not match expected ones'
+		);
+	}
+
+	/**
+	 * @covers ::load_textdomain
+	 * @covers WP_Translation_Controller::get_entries
+	 * @covers WP_Translation_Controller::get_headers
+	 * @covers WP_Translation_Controller::normalize_header
+	 */
+	public function test_load_textdomain_existing_override() {
+		add_filter( 'override_load_textdomain', '__return_true' );
+
+		load_textdomain( 'wp-tests-domain', DIR_TESTDATA . '/pomo/simple.mo' );
+
+		$is_loaded_wp = is_textdomain_loaded( 'wp-tests-domain' );
+
+		$is_loaded = WP_Translation_Controller::get_instance()->is_textdomain_loaded( 'wp-tests-domain' );
+
+		remove_filter( 'override_load_textdomain', '__return_true' );
+
+		$this->assertFalse( $is_loaded_wp );
+		$this->assertFalse( $is_loaded );
+	}
+
+	/**
+	 * @covers ::load_textdomain
+	 */
+	public function test_load_textdomain_php_files() {
+		$load_php_successful = load_textdomain( 'wp-tests-domain', DIR_TESTDATA . '/pomo/simple.l10n.php' );
+
+		$unload_php_successful = unload_textdomain( 'wp-tests-domain' );
+
+		$this->assertTrue( $load_php_successful, 'PHP file not successfully loaded' );
+		$this->assertTrue( $unload_php_successful );
+	}
+
+	/**
+	 * @covers ::load_textdomain
+	 */
+	public function test_load_textdomain_prefers_php_files_by_default() {
+		$load_successful = load_textdomain( 'wp-tests-domain', DIR_TESTDATA . '/pomo/simple.mo' );
+
+		$instance = WP_Translation_Controller::get_instance();
+
+		$is_loaded = $instance->is_textdomain_loaded( 'wp-tests-domain', 'en_US' );
+
+		$unload_mo  = $instance->unload_file( DIR_TESTDATA . '/pomo/simple.mo', 'wp-tests-domain' );
+		$unload_php = $instance->unload_file( DIR_TESTDATA . '/pomo/simple.l10n.php', 'wp-tests-domain' );
+
+		$unload_successful = unload_textdomain( 'wp-tests-domain' );
+
+		$this->assertTrue( $load_successful, 'Translation not successfully loaded' );
+		$this->assertTrue( $is_loaded );
+		$this->assertFalse( $unload_mo );
+		$this->assertTrue( $unload_php );
+		$this->assertTrue( $unload_successful );
+	}
+
+	/**
+	 * @covers ::load_textdomain
+	 */
+	public function test_load_textdomain_reads_php_files_if_filtered_format_is_unsupported() {
+		add_filter(
+			'translation_file_format',
+			static function () {
+				return 'unknown-format';
+			}
+		);
+
+		$load_mo_successful = load_textdomain( 'wp-tests-domain', DIR_TESTDATA . '/pomo/simple.mo' );
+
+		$unload_mo_successful = unload_textdomain( 'wp-tests-domain' );
+
+		$load_php_successful = load_textdomain( 'wp-tests-domain', DIR_TESTDATA . '/pomo/simple.l10n.php' );
+
+		$unload_php_successful = unload_textdomain( 'wp-tests-domain' );
+
+		$this->assertTrue( $load_mo_successful, 'MO file not successfully loaded' );
+		$this->assertTrue( $unload_mo_successful );
+		$this->assertTrue( $load_php_successful, 'PHP file not successfully loaded' );
+		$this->assertTrue( $unload_php_successful );
+	}
+
+	/**
+	 * @covers ::load_textdomain
+	 */
+	public function test_load_textdomain_existing_translation_is_kept() {
+		global $l10n;
+
+		load_textdomain( 'wp-tests-domain', DIR_TESTDATA . '/pomo/simple.mo' );
+
+		load_textdomain( 'wp-tests-domain', DIR_TESTDATA . '/pomo/context.mo' );
+
+		$mo = new MO();
+		$mo->import_from_file( DIR_TESTDATA . '/pomo/context.mo' );
+		$mo->merge_with( $l10n['wp-tests-domain'] );
+		$l10n['wp-tests-domain'] = $mo;
+
+		$simple  = __( 'baba', 'wp-tests-domain' );
+		$context = _x( 'one dragon', 'not so dragon', 'wp-tests-domain' );
+
+		$this->assertSame( 'dyado', $simple );
+		$this->assertSame( 'oney dragoney', $context );
+		$this->assertInstanceOf( Translations::class, $l10n['wp-tests-domain'] );
+	}
+
+	/**
+	 * @covers ::load_textdomain
+	 */
+	public function test_load_textdomain_loads_existing_translation() {
+		global $l10n;
+
+		$mo = new MO();
+		$mo->import_from_file( DIR_TESTDATA . '/pomo/simple.mo' );
+		$l10n['wp-tests-domain'] = $mo;
+
+		load_textdomain( 'wp-tests-domain', DIR_TESTDATA . '/pomo/context.mo' );
+
+		$simple  = __( 'baba', 'wp-tests-domain' );
+		$context = _x( 'one dragon', 'not so dragon', 'wp-tests-domain' );
+
+		$this->assertSame( 'dyado', $simple );
+		$this->assertSame( 'oney dragoney', $context );
+		$this->assertInstanceOf( WP_Translations::class, $l10n['wp-tests-domain'] );
+	}
+
+	/**
+	 * @covers ::load_textdomain
+	 */
+	public function test_load_textdomain_loads_existing_translation_mo_files() {
+		global $l10n;
+
+		add_filter(
+			'translation_file_format',
+			static function () {
+				return 'mo';
+			}
+		);
+
+		load_textdomain( 'wp-tests-domain', DIR_TESTDATA . '/pomo/simple.mo' );
+
+		$mo = new MO();
+		$mo->import_from_file( DIR_TESTDATA . '/pomo/simple.mo' );
+		$l10n['wp-tests-domain'] = $mo;
+
+		load_textdomain( 'wp-tests-domain', DIR_TESTDATA . '/pomo/context.mo' );
+
+		$simple  = __( 'baba', 'wp-tests-domain' );
+		$context = _x( 'one dragon', 'not so dragon', 'wp-tests-domain' );
+
+		$this->assertSame( 'dyado', $simple );
+		$this->assertSame( 'oney dragoney', $context );
+		$this->assertInstanceOf( WP_Translations::class, $l10n['wp-tests-domain'] );
+	}
+
+	/**
+	 * @covers ::load_textdomain
+	 */
+	public function test_load_textdomain_loads_existing_translation_php_files() {
+		global $l10n;
+
+		// Just to ensure the PHP files exist.
+		load_textdomain( 'wp-tests-domain', DIR_TESTDATA . '/pomo/simple.mo' );
+		load_textdomain( 'wp-tests-domain', DIR_TESTDATA . '/pomo/context.mo' );
+		unload_textdomain( 'wp-tests-domain' );
+
+		load_textdomain( 'wp-tests-domain', DIR_TESTDATA . '/pomo/simple.mo' );
+
+		$mo = new MO();
+		$mo->import_from_file( DIR_TESTDATA . '/pomo/simple.mo' );
+		$l10n['wp-tests-domain'] = $mo;
+
+		load_textdomain( 'wp-tests-domain', DIR_TESTDATA . '/pomo/context.mo' );
+
+		$simple  = __( 'baba', 'wp-tests-domain' );
+		$context = _x( 'one dragon', 'not so dragon', 'wp-tests-domain' );
+
+		$this->assertSame( 'dyado', $simple );
+		$this->assertSame( 'oney dragoney', $context );
+		$this->assertInstanceOf( WP_Translations::class, $l10n['wp-tests-domain'] );
+	}
+
+	/**
+	 * @covers ::unload_textdomain
+	 * @covers WP_Translation_Controller::get_entries
+	 * @covers WP_Translation_Controller::get_headers
+	 * @covers WP_Translation_Controller::normalize_header
+	 */
+	public function test_unload_textdomain() {
+		global $l10n;
+
+		load_textdomain( 'wp-tests-domain', DIR_TESTDATA . '/pomo/simple.mo' );
+
+		$unload_successful = unload_textdomain( 'wp-tests-domain' );
+
+		$loaded_after_unload = is_textdomain_loaded( 'wp-tests-domain' );
+
+		$compat_instance = $l10n['wp-tests-domain'] ?? null;
+
+		$is_loaded = WP_Translation_Controller::get_instance()->is_textdomain_loaded( 'wp-tests-domain' );
+		$headers   = WP_Translation_Controller::get_instance()->get_headers( 'wp-tests-domain' );
+		$entries   = WP_Translation_Controller::get_instance()->get_entries( 'wp-tests-domain' );
+
+		$this->assertNull( $compat_instance, 'Compat instance was not removed' );
+		$this->assertTrue( $unload_successful, 'Text domain not successfully unloaded' );
+		$this->assertFalse( $loaded_after_unload, 'Text domain still considered loaded after unload' );
+		$this->assertFalse( $is_loaded, 'Text domain still considered loaded' );
+		$this->assertEmpty( $headers, 'Actual translation headers are not empty' );
+		$this->assertEmpty( $entries, 'Actual translation entries are not empty' );
+	}
+
+	/**
+	 * @covers ::unload_textdomain
+	 */
+	public function test_unload_textdomain_existing_override() {
+		add_filter( 'override_unload_textdomain', '__return_true' );
+
+		load_textdomain( 'wp-tests-domain', DIR_TESTDATA . '/pomo/simple.mo' );
+
+		$unload_successful = unload_textdomain( 'wp-tests-domain' );
+
+		$is_loaded = WP_Translation_Controller::get_instance()->is_textdomain_loaded( 'wp-tests-domain' );
+
+		remove_filter( 'override_unload_textdomain', '__return_true' );
+
+		$unload_successful_after = unload_textdomain( 'wp-tests-domain' );
+
+		$is_loaded_after = WP_Translation_Controller::get_instance()->is_textdomain_loaded( 'wp-tests-domain' );
+
+		$this->assertTrue( $unload_successful );
+		$this->assertTrue( $is_loaded );
+		$this->assertTrue( $unload_successful_after );
+		$this->assertFalse( $is_loaded_after );
+	}
+
+	/**
+	 * @covers ::unload_file
+	 * @covers ::unload_textdomain
+	 */
+	public function test_unload_non_existent_files_and_textdomains() {
+		$controller = new WP_Translation_Controller();
+		$this->assertFalse( $controller->unload_textdomain( 'foobarbaz' ) );
+		$this->assertFalse( $controller->unload_textdomain( 'foobarbaz', 'es_ES' ) );
+		$this->assertFalse( $controller->unload_textdomain( 'default', 'es_ES' ) );
+		$this->assertFalse( $controller->unload_file( DIR_TESTDATA . '/l10n/fa_IR.mo' ) );
+		$this->assertFalse( $controller->unload_file( DIR_TESTDATA . '/l10n/fa_IR.mo', 'es_ES' ) );
+	}
+
+	/**
+	 * @covers ::load_textdomain
+	 * @covers ::unload_textdomain
+	 */
+	public function test_switch_to_locale_translations_stay_loaded_default_textdomain() {
+		switch_to_locale( 'es_ES' );
+
+		$actual = __( 'Invalid parameter.' );
+
+		$this->assertTrue( WP_Translation_Controller::get_instance()->is_textdomain_loaded() );
+		$this->assertTrue( WP_Translation_Controller::get_instance()->is_textdomain_loaded( 'default', 'es_ES' ) );
+
+		restore_previous_locale();
+
+		$actual_2 = __( 'Invalid parameter.' );
+
+		$this->assertTrue( WP_Translation_Controller::get_instance()->is_textdomain_loaded( 'default', 'es_ES' ) );
+
+		$this->assertSame( 'Parámetro no válido. ', $actual );
+		$this->assertSame( 'Invalid parameter.', $actual_2 );
+	}
+
+	/**
+	 * @covers ::load_textdomain
+	 * @covers ::unload_textdomain
+	 * @covers ::change_locale
+	 */
+	public function test_switch_to_locale_translations_stay_loaded_custom_textdomain() {
+		$this->assertSame( 'en_US', WP_Translation_Controller::get_instance()->get_locale() );
+
+		require_once DIR_TESTDATA . '/plugins/internationalized-plugin.php';
+
+		$before = i18n_plugin_test();
+
+		switch_to_locale( 'es_ES' );
+
+		$actual = i18n_plugin_test();
+
+		$this->assertSame( 'es_ES', WP_Translation_Controller::get_instance()->get_locale() );
+		$this->assertTrue( WP_Translation_Controller::get_instance()->is_textdomain_loaded( 'internationalized-plugin', 'es_ES' ) );
+		$this->assertTrue( WP_Translation_Controller::get_instance()->is_textdomain_loaded( 'default', 'es_ES' ) );
+		$this->assertFalse( WP_Translation_Controller::get_instance()->is_textdomain_loaded( 'foo-bar', 'es_ES' ) );
+
+		restore_previous_locale();
+
+		$after = i18n_plugin_test();
+
+		$this->assertTrue( WP_Translation_Controller::get_instance()->is_textdomain_loaded( 'internationalized-plugin', 'es_ES' ) );
+
+		$this->assertSame( 'This is a dummy plugin', $before );
+		$this->assertSame( 'Este es un plugin dummy', $actual );
+		$this->assertSame( 'This is a dummy plugin', $after );
+	}
+}
diff --git a/tests/l10n/wpTranslations.php b/tests/l10n/wpTranslations.php
new file mode 100644
index 0000000000..70abc4fd30
--- /dev/null
+++ b/tests/l10n/wpTranslations.php
@@ -0,0 +1,316 @@
+<?php
+
+/**
+ * @coversDefaultClass WP_Translations
+ * @group l10n
+ * @group i18n
+ */
+class WP_Translations_Tests extends WP_UnitTestCase {
+	public function tear_down() {
+		unload_textdomain( 'wp-tests-domain' );
+
+		parent::tear_down();
+	}
+
+	/**
+	 * @covers ::__construct
+	 * @covers ::__get
+	 * @covers ::make_entry
+	 */
+	public function test_get_entries() {
+		global $l10n;
+
+		load_textdomain( 'wp-tests-domain', DIR_TESTDATA . '/pomo/simple.mo' );
+
+		$compat_instance = $l10n['wp-tests-domain'] ?? null;
+
+		$entries = $compat_instance ? $compat_instance->entries : array();
+
+		$unload_successful = unload_textdomain( 'wp-tests-domain' );
+
+		$this->assertInstanceOf( WP_Translations::class, $compat_instance, 'No compat provider instance used' );
+		$this->assertTrue( $unload_successful, 'Text domain not successfully unloaded' );
+		$this->assertEqualSets(
+			array(
+				new Translation_Entry(
+					array(
+						'singular'     => 'baba',
+						'translations' => array( 'dyado' ),
+					)
+				),
+				new Translation_Entry(
+					array(
+						'singular'     => "kuku\nruku",
+						'translations' => array( 'yes' ),
+					)
+				),
+			),
+			$entries,
+			'Actual translation entries do not match expected ones'
+		);
+	}
+
+	/**
+	 * @covers ::__get
+	 * @covers ::make_entry
+	 */
+	public function test_get_entries_plural() {
+		global $l10n;
+
+		load_textdomain( 'wp-tests-domain', DIR_TESTDATA . '/pomo/plural.mo' );
+
+		$compat_instance = $l10n['wp-tests-domain'] ?? null;
+
+		$entries = $compat_instance ? $compat_instance->entries : array();
+
+		$unload_successful = unload_textdomain( 'wp-tests-domain' );
+
+		$this->assertInstanceOf( WP_Translations::class, $compat_instance, 'No compat provider instance used' );
+		$this->assertTrue( $unload_successful, 'Text domain not successfully unloaded' );
+		$this->assertEqualSets(
+			array(
+				new Translation_Entry(
+					array(
+						'is_plural'    => true,
+						'singular'     => 'one dragon',
+						'translations' => array(
+							'oney dragoney',
+							'twoey dragoney',
+							'manyey dragoney',
+							'manyeyey dragoney',
+							'manyeyeyey dragoney',
+						),
+					)
+				),
+			),
+			$entries,
+			'Actual translation entries do not match expected ones'
+		);
+	}
+
+
+	/**
+	 * @covers ::__get
+	 * @covers ::make_entry
+	 */
+	public function test_get_entries_context() {
+		global $l10n;
+
+		load_textdomain( 'wp-tests-domain', DIR_TESTDATA . '/pomo/context.mo' );
+
+		$compat_instance = $l10n['wp-tests-domain'] ?? null;
+
+		$entries = $compat_instance ? $compat_instance->entries : array();
+
+		$unload_successful = unload_textdomain( 'wp-tests-domain' );
+
+		$this->assertInstanceOf( WP_Translations::class, $compat_instance, 'No compat provider instance used' );
+		$this->assertTrue( $unload_successful, 'Text domain not successfully unloaded' );
+		$this->assertEqualSets(
+			array(
+				new Translation_Entry(
+					array(
+						'context'      => 'not so dragon',
+						'singular'     => 'one dragon',
+						'translations' => array( 'oney dragoney' ),
+					)
+				),
+				new Translation_Entry(
+					array(
+						'is_plural'    => true,
+						'singular'     => 'one dragon',
+						'context'      => 'dragonland',
+						'translations' => array(
+							'oney dragoney',
+							'twoey dragoney',
+							'manyey dragoney',
+						),
+					)
+				),
+			),
+			$entries,
+			'Actual translation entries do not match expected ones'
+		);
+	}
+
+	/**
+	 * @covers ::__get
+	 */
+	public function test_get_headers() {
+		global $l10n;
+
+		$load_successful = load_textdomain( 'wp-tests-domain', DIR_TESTDATA . '/pomo/simple.mo' );
+
+		$compat_instance = $l10n['wp-tests-domain'] ?? null;
+
+		$headers = $compat_instance ? $compat_instance->headers : array();
+
+		$unload_successful = unload_textdomain( 'wp-tests-domain' );
+
+		$this->assertTrue( $load_successful, 'Text domain not successfully loaded' );
+		$this->assertInstanceOf( WP_Translations::class, $compat_instance, 'No compat provider instance used' );
+		$this->assertTrue( $unload_successful, 'Text domain not successfully unloaded' );
+		$this->assertEqualSetsWithIndex(
+			array(
+				'Project-Id-Version'   => 'WordPress 2.6-bleeding',
+				'Report-Msgid-Bugs-To' => 'wp-polyglots@lists.automattic.com',
+			),
+			$headers,
+			'Actual translation headers do not match expected ones'
+		);
+	}
+
+	/**
+	 * @covers ::__get
+	 */
+	public function test_getter_unsupported_property() {
+		global $l10n;
+
+		load_textdomain( 'wp-tests-domain', DIR_TESTDATA . '/pomo/simple.mo' );
+
+		$compat_instance = $l10n['wp-tests-domain'] ?? null;
+
+		$this->assertInstanceOf( WP_Translations::class, $compat_instance );
+
+		$this->assertNull( $compat_instance->foo );
+	}
+
+	/**
+	 * @covers ::translate
+	 */
+	public function test_translate() {
+		global $l10n;
+
+		load_textdomain( 'wp-tests-domain', DIR_TESTDATA . '/pomo/simple.mo' );
+
+		$compat_instance = $l10n['wp-tests-domain'] ?? null;
+
+		$translation         = $compat_instance ? $compat_instance->translate( 'baba' ) : false;
+		$translation_missing = $compat_instance ? $compat_instance->translate( 'does not exist' ) : false;
+
+		$unload_successful = unload_textdomain( 'wp-tests-domain' );
+
+		$this->assertInstanceOf( WP_Translations::class, $compat_instance, 'No compat provider instance used' );
+		$this->assertSame( 'dyado', $translation, 'Actual translation does not match expected one' );
+		$this->assertSame( 'does not exist', $translation_missing, 'Actual translation fallback does not match expected one' );
+		$this->assertTrue( $unload_successful, 'Text domain not successfully unloaded' );
+	}
+
+	/**
+	 * @covers ::translate_plural
+	 */
+	public function test_translate_plural() {
+		global $l10n;
+
+		load_textdomain( 'wp-tests-domain', DIR_TESTDATA . '/pomo/plural.mo' );
+
+		$compat_instance = $l10n['wp-tests-domain'] ?? null;
+
+		$translation_1       = $compat_instance ? $compat_instance->translate_plural( 'one dragon', '%d dragons', 1 ) : false;
+		$translation_2       = $compat_instance ? $compat_instance->translate_plural( 'one dragon', '%d dragons', 2 ) : false;
+		$translation_minus_8 = $compat_instance ? $compat_instance->translate_plural( 'one dragon', '%d dragons', -8 ) : false;
+
+		$unload_successful = unload_textdomain( 'wp-tests-domain' );
+
+		$this->assertInstanceOf( WP_Translations::class, $compat_instance, 'No compat provider instance used' );
+		$this->assertSame( 'oney dragoney', $translation_1, 'Actual translation does not match expected one' );
+		$this->assertSame( 'twoey dragoney', $translation_2, 'Actual translation does not match expected one' );
+		$this->assertSame( 'twoey dragoney', $translation_minus_8, 'Actual translation does not match expected one' );
+		$this->assertTrue( $unload_successful, 'Text domain not successfully unloaded' );
+	}
+
+	/**
+	 * @covers ::translate_plural
+	 * @covers WP_Translation_File::get_plural_form
+	 */
+	public function test_translate_plural_complex() {
+		load_textdomain( 'wp-tests-domain', DIR_TESTDATA . '/l10n/plural-complex.mo' );
+
+		$this->assertSame( '%s razpoložljiva posodobitev', _n( '%s update available', '%s updates available', 101, 'wp-tests-domain' ) ); // 1, 101, 201
+		$this->assertSame( '%s razpoložljivi posodobitvi', _n( '%s update available', '%s updates available', 102, 'wp-tests-domain' ) ); // 2, 102, 202
+		$this->assertSame( '%s razpoložljive posodobitve', _n( '%s update available', '%s updates available', 103, 'wp-tests-domain' ) ); // 3, 4, 103
+		$this->assertSame( '%s razpoložljivih posodobitev', _n( '%s update available', '%s updates available', 5, 'wp-tests-domain' ) ); // 0, 5, 6
+	}
+
+	/**
+	 * @covers ::translate_plural
+	 * @covers WP_Translation_File::get_plural_form
+	 */
+	public function test_translate_plural_complex_php() {
+		load_textdomain( 'wp-tests-domain', DIR_TESTDATA . '/l10n/plural-complex.php' );
+
+		$this->assertSame( '%s razpoložljiva posodobitev', _n( '%s update available', '%s updates available', 101, 'wp-tests-domain' ) ); // 1, 101, 201
+		$this->assertSame( '%s razpoložljivi posodobitvi', _n( '%s update available', '%s updates available', 102, 'wp-tests-domain' ) ); // 2, 102, 202
+		$this->assertSame( '%s razpoložljive posodobitve', _n( '%s update available', '%s updates available', 103, 'wp-tests-domain' ) ); // 3, 4, 103
+		$this->assertSame( '%s razpoložljivih posodobitev', _n( '%s update available', '%s updates available', 5, 'wp-tests-domain' ) ); // 0, 5, 6
+	}
+
+	/**
+	 * @covers WP_Translation_File::get_plural_form
+	 */
+	public function test_get_plural_form() {
+		$moe = WP_Translation_File::create( DIR_TESTDATA . '/l10n/plural-complex.mo' );
+
+		$this->assertSame( 0, $moe->get_plural_form( 1 ) );
+		$this->assertSame( 0, $moe->get_plural_form( 101 ) );
+		$this->assertSame( 0, $moe->get_plural_form( 201 ) );
+		$this->assertSame( 1, $moe->get_plural_form( 2 ) );
+		$this->assertSame( 1, $moe->get_plural_form( 102 ) );
+		$this->assertSame( 1, $moe->get_plural_form( 202 ) );
+		$this->assertSame( 2, $moe->get_plural_form( 3 ) );
+		$this->assertSame( 2, $moe->get_plural_form( 4 ) );
+		$this->assertSame( 2, $moe->get_plural_form( 103 ) );
+		$this->assertSame( 3, $moe->get_plural_form( 0 ) );
+		$this->assertSame( 3, $moe->get_plural_form( 5 ) );
+		$this->assertSame( 3, $moe->get_plural_form( 6 ) );
+	}
+
+	/**
+	 * @covers ::translate_plural
+	 */
+	public function test_translate_plural_missing() {
+		global $l10n;
+
+		load_textdomain( 'wp-tests-domain', DIR_TESTDATA . '/pomo/plural.mo' );
+
+		$compat_instance = $l10n['wp-tests-domain'] ?? null;
+
+		$translation_1 = $compat_instance ? $compat_instance->translate_plural( '%d house', '%d houses', 1 ) : false;
+		$translation_2 = $compat_instance ? $compat_instance->translate_plural( '%d car', '%d cars', 2 ) : false;
+
+		$unload_successful = unload_textdomain( 'wp-tests-domain' );
+
+		$this->assertInstanceOf( WP_Translations::class, $compat_instance, 'No compat provider instance used' );
+		$this->assertSame( '%d house', $translation_1, 'Actual translation fallback does not match expected one' );
+		$this->assertSame( '%d cars', $translation_2, 'Actual plural translation fallback does not match expected one' );
+		$this->assertTrue( $unload_successful, 'Text domain not successfully unloaded' );
+	}
+
+	/**
+	 * @covers ::translate
+	 * @covers ::translate_plural
+	 *
+	 * @ticket 41257
+	 */
+	public function test_translate_invalid_edge_cases() {
+		load_textdomain( 'wp-tests-domain', DIR_TESTDATA . '/pomo/simple.mo' );
+
+		// phpcs:disable WordPress.WP.I18n
+		$null_string   = __( null, 'wp-tests-domain' );
+		$null_singular = _n( null, 'plural', 1, 'wp-tests-domain' );
+		$null_plural   = _n( 'singular', null, 1, 'wp-tests-domain' );
+		$null_both     = _n( null, null, 1, 'wp-tests-domain' );
+		$null_context  = _x( 'foo', null, 'wp-tests-domain' );
+		$float_number  = _n( '%d house', '%d houses', 7.5, 'wp-tests-domain' );
+		// phpcs:enable WordPress.WP.I18n
+
+		unload_textdomain( 'wp-tests-domain' );
+
+		$this->assertNull( $null_string );
+		$this->assertNull( $null_singular );
+		$this->assertSame( 'singular', $null_plural );
+		$this->assertNull( $null_both );
+		$this->assertSame( 'foo', $null_context );
+		$this->assertSame( '%d houses', $float_number );
+	}
+}
diff --git a/tests/l10n/wpTranslationsConvert.php b/tests/l10n/wpTranslationsConvert.php
new file mode 100644
index 0000000000..ea318eb329
--- /dev/null
+++ b/tests/l10n/wpTranslationsConvert.php
@@ -0,0 +1,548 @@
+<?php
+
+/**
+ * @coversDefaultClass WP_Translation_Controller
+ * @group l10n
+ * @group i18n
+ */
+class WP_Translation_Controller_Convert_Tests extends WP_UnitTestCase {
+	/**
+	 * @covers ::instance
+	 */
+	public function test_get_instance() {
+		$instance  = WP_Translation_Controller::get_instance();
+		$instance2 = WP_Translation_Controller::get_instance();
+
+		$this->assertSame( $instance, $instance2 );
+	}
+
+	public function test_no_files_loaded_returns_false() {
+		$instance = new WP_Translation_Controller();
+		$this->assertFalse( $instance->translate( 'singular' ) );
+		$this->assertFalse( $instance->translate_plural( array( 'plural0', 'plural1' ), 1 ) );
+	}
+
+	/**
+	 * @covers ::unload_textdomain
+	 */
+	public function test_unload_not_loaded() {
+		$instance = new WP_Translation_Controller();
+		$this->assertFalse( $instance->is_textdomain_loaded( 'unittest' ) );
+		$this->assertFalse( $instance->unload_textdomain( 'unittest' ) );
+	}
+
+	/**
+	 * @covers ::load
+	 * @covers ::unload_textdomain
+	 * @covers ::is_textdomain_loaded
+	 * @covers ::translate
+	 * @covers ::locate_translation
+	 * @covers ::get_files
+	 */
+	public function test_unload_entire_textdomain() {
+		$instance = new WP_Translation_Controller();
+		$this->assertFalse( $instance->is_textdomain_loaded( 'unittest' ) );
+		$this->assertTrue( $instance->load_file( DIR_TESTDATA . '/l10n/example-simple.php', 'unittest' ) );
+		$this->assertTrue( $instance->is_textdomain_loaded( 'unittest' ) );
+
+		$this->assertSame( 'translation', $instance->translate( 'original', '', 'unittest' ) );
+
+		$this->assertTrue( $instance->unload_textdomain( 'unittest' ) );
+		$this->assertFalse( $instance->is_textdomain_loaded( 'unittest' ) );
+		$this->assertFalse( $instance->translate( 'original', '', 'unittest' ) );
+	}
+
+	/**
+	 * @covers ::unload_file
+	 * @covers WP_Translation_File::get_file
+	 */
+	public function test_unload_file_is_not_actually_loaded() {
+		$controller = new WP_Translation_Controller();
+		$this->assertTrue( $controller->load_file( DIR_TESTDATA . '/l10n/example-simple.mo', 'unittest' ) );
+		$this->assertFalse( $controller->unload_file( DIR_TESTDATA . '/l10n/simple.mo', 'unittest' ) );
+
+		$this->assertTrue( $controller->is_textdomain_loaded( 'unittest' ) );
+		$this->assertSame( 'translation', $controller->translate( 'original', '', 'unittest' ) );
+	}
+
+	/**
+	 * @covers ::unload_textdomain
+	 * @covers ::is_textdomain_loaded
+	 */
+	public function test_unload_specific_locale() {
+		$instance = new WP_Translation_Controller();
+		$this->assertFalse( $instance->is_textdomain_loaded( 'unittest' ) );
+		$this->assertTrue( $instance->load_file( DIR_TESTDATA . '/l10n/example-simple.php', 'unittest' ) );
+		$this->assertTrue( $instance->is_textdomain_loaded( 'unittest' ) );
+
+		$this->assertFalse( $instance->is_textdomain_loaded( 'unittest', 'es_ES' ) );
+		$this->assertTrue( $instance->load_file( DIR_TESTDATA . '/l10n/example-simple.php', 'unittest', 'es_ES' ) );
+		$this->assertTrue( $instance->is_textdomain_loaded( 'unittest', 'es_ES' ) );
+
+		$this->assertSame( 'translation', $instance->translate( 'original', '', 'unittest' ) );
+		$this->assertSame( 'translation', $instance->translate( 'original', '', 'unittest', 'es_ES' ) );
+
+		$this->assertTrue( $instance->unload_textdomain( 'unittest', $instance->get_locale() ) );
+		$this->assertFalse( $instance->is_textdomain_loaded( 'unittest' ) );
+		$this->assertFalse( $instance->translate( 'original', '', 'unittest' ) );
+
+		$this->assertTrue( $instance->is_textdomain_loaded( 'unittest', 'es_ES' ) );
+		$this->assertTrue( $instance->unload_textdomain( 'unittest', 'es_ES' ) );
+		$this->assertFalse( $instance->is_textdomain_loaded( 'unittest', 'es_ES' ) );
+		$this->assertFalse( $instance->translate( 'original', '', 'unittest', 'es_ES' ) );
+	}
+
+	/**
+	 * @dataProvider data_invalid_files
+	 *
+	 * @param string $type
+	 * @param string $file_contents
+	 * @param string|bool $expected_error
+	 */
+	public function test_invalid_files( string $type, string $file_contents, $expected_error = null ) {
+		$file = $this->temp_filename();
+
+		$this->assertNotFalse( $file );
+
+		file_put_contents( $file, $file_contents );
+
+		$instance = WP_Translation_File::create( $file, $type );
+
+		$this->assertInstanceOf( WP_Translation_File::class, $instance );
+
+		// Not an error condition until it attempts to parse the file.
+		$this->assertNull( $instance->error() );
+
+		// Trigger parsing.
+		$instance->headers();
+
+		$this->assertNotNull( $instance->error() );
+
+		if ( null !== $expected_error ) {
+			$this->assertSame( $expected_error, $instance->error() );
+		}
+	}
+
+	/**
+	 * @return array{0: array{0: 'mo'|'php', 1: string|false, 2?: string}}
+	 */
+	public function data_invalid_files(): array {
+		return array(
+			array( 'php', '' ),
+			array( 'php', '<?php // This is a php file without a payload' ),
+			array( 'mo', '', 'Invalid data' ),
+			array( 'mo', 'Random data in a file long enough to be a real header', 'Magic marker does not exist' ),
+			array( 'mo', pack( 'V*', 0x950412de ), 'Invalid data' ),
+			array( 'mo', pack( 'V*', 0x950412de ) . 'AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA', 'Unsupported revision' ),
+			array( 'mo', pack( 'V*', 0x950412de, 0x0 ) . 'AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA', 'Invalid data' ),
+		);
+	}
+
+	/**
+	 * @covers WP_Translation_Controller::load
+	 * @covers WP_Translation_Controller::is_textdomain_loaded
+	 */
+	public function test_load_non_existent_file() {
+		$instance = new WP_Translation_Controller();
+
+		$this->assertFalse( $instance->load_file( DIR_TESTDATA . '/l10n/file-that-doesnt-exist.mo', 'unittest' ) );
+		$this->assertFalse( $instance->is_textdomain_loaded( 'unittest' ) );
+	}
+
+	/**
+	 * @covers WP_Translation_File::create
+	 */
+	public function test_create_non_existent_file() {
+		$this->assertFalse( WP_Translation_File::create( 'this-file-does-not-exist' ) );
+	}
+
+	/**
+	 * @covers WP_Translation_File::create
+	 */
+	public function test_create_invalid_filetype() {
+		$file = $this->temp_filename();
+		$this->assertNotFalse( $file );
+		file_put_contents( $file, '' );
+		$this->assertFalse( WP_Translation_File::create( $file, 'invalid' ) );
+	}
+
+	/**
+	 * @covers ::load
+	 * @covers ::is_textdomain_loaded
+	 * @covers ::translate
+	 * @covers ::translate_plural
+	 * @covers ::locate_translation
+	 * @covers ::get_files
+	 * @covers WP_Translation_File::translate
+	 *
+	 * @dataProvider data_simple_example_files
+	 *
+	 * @param string $file
+	 */
+	public function test_simple_translation_files( string $file ) {
+		$controller = new WP_Translation_Controller();
+		$this->assertTrue( $controller->load_file( DIR_TESTDATA . '/l10n/' . $file, 'unittest' ) );
+
+		$this->assertTrue( $controller->is_textdomain_loaded( 'unittest' ) );
+		$this->assertFalse( $controller->is_textdomain_loaded( 'textdomain not loaded' ) );
+
+		$this->assertFalse( $controller->translate( "string that doesn't exist", '', 'unittest' ) );
+		$this->assertFalse( $controller->translate( 'original', '', 'textdomain not loaded' ) );
+
+		$this->assertSame( 'translation', $controller->translate( 'original', '', 'unittest' ) );
+		$this->assertSame( 'translation with context', $controller->translate( 'original with context', 'context', 'unittest' ) );
+
+		$this->assertSame( 'translation1', $controller->translate_plural( array( 'plural0', 'plural1' ), 0, '', 'unittest' ) );
+		$this->assertSame( 'translation0', $controller->translate_plural( array( 'plural0', 'plural1' ), 1, '', 'unittest' ) );
+		$this->assertSame( 'translation1', $controller->translate_plural( array( 'plural0', 'plural1' ), 2, '', 'unittest' ) );
+
+		$this->assertSame( 'translation1 with context', $controller->translate_plural( array( 'plural0 with context', 'plural1 with context' ), 0, 'context', 'unittest' ) );
+		$this->assertSame( 'translation0 with context', $controller->translate_plural( array( 'plural0 with context', 'plural1 with context' ), 1, 'context', 'unittest' ) );
+		$this->assertSame( 'translation1 with context', $controller->translate_plural( array( 'plural0 with context', 'plural1 with context' ), 2, 'context', 'unittest' ) );
+
+		$this->assertSame( 'Produkt', $controller->translate( 'Product', '', 'unittest' ) );
+		$this->assertSame( 'Produkt', $controller->translate_plural( array( 'Product', 'Products' ), 1, '', 'unittest' ) );
+		$this->assertSame( 'Produkte', $controller->translate_plural( array( 'Product', 'Products' ), 2, '', 'unittest' ) );
+	}
+
+	/**
+	 * @return array<array{0: string}>
+	 */
+	public function data_simple_example_files(): array {
+		return array(
+			array( 'example-simple.mo' ),
+			array( 'example-simple.php' ),
+		);
+	}
+
+	/**
+	 * @covers ::load
+	 * @covers ::unload_file
+	 * @covers ::is_textdomain_loaded
+	 * @covers ::translate
+	 * @covers ::translate_plural
+	 * @covers ::locate_translation
+	 * @covers ::get_files
+	 * @covers WP_Translation_File::get_plural_form
+	 * @covers WP_Translation_File::make_plural_form_function
+	 */
+	public function test_load_multiple_files() {
+		$controller = new WP_Translation_Controller();
+		$this->assertTrue( $controller->load_file( DIR_TESTDATA . '/l10n/example-simple.mo', 'unittest' ) );
+		$this->assertTrue( $controller->load_file( DIR_TESTDATA . '/l10n/simple.mo', 'unittest' ) );
+		$this->assertTrue( $controller->load_file( DIR_TESTDATA . '/l10n/plural.mo', 'unittest' ) );
+
+		$this->assertTrue( $controller->is_textdomain_loaded( 'unittest' ) );
+
+		$this->assertFalse( $controller->translate( "string that doesn't exist", '', 'unittest' ) );
+		$this->assertFalse( $controller->translate( 'original', '', 'textdomain not loaded' ) );
+
+		// From example-simple.mo
+
+		$this->assertSame( 'translation', $controller->translate( 'original', '', 'unittest' ) );
+		$this->assertSame( 'translation with context', $controller->translate( 'original with context', 'context', 'unittest' ) );
+
+		$this->assertSame( 'translation1', $controller->translate_plural( array( 'plural0', 'plural1' ), 0, '', 'unittest' ) );
+		$this->assertSame( 'translation0', $controller->translate_plural( array( 'plural0', 'plural1' ), 1, '', 'unittest' ) );
+		$this->assertSame( 'translation1', $controller->translate_plural( array( 'plural0', 'plural1' ), 2, '', 'unittest' ) );
+
+		$this->assertSame( 'translation1 with context', $controller->translate_plural( array( 'plural0 with context', 'plural1 with context' ), 0, 'context', 'unittest' ) );
+		$this->assertSame( 'translation0 with context', $controller->translate_plural( array( 'plural0 with context', 'plural1 with context' ), 1, 'context', 'unittest' ) );
+		$this->assertSame( 'translation1 with context', $controller->translate_plural( array( 'plural0 with context', 'plural1 with context' ), 2, 'context', 'unittest' ) );
+
+		// From simple.mo.
+
+		$this->assertSame( 'dyado', $controller->translate( 'baba', '', 'unittest' ) );
+
+		// From plural.mo.
+
+		$this->assertSame( 'oney dragoney', $controller->translate_plural( array( 'one dragon', '%d dragons' ), 1, '', 'unittest' ), 'Actual translation does not match expected one' );
+		$this->assertSame( 'twoey dragoney', $controller->translate_plural( array( 'one dragon', '%d dragons' ), 2, '', 'unittest' ), 'Actual translation does not match expected one' );
+		$this->assertSame( 'twoey dragoney', $controller->translate_plural( array( 'one dragon', '%d dragons' ), -8, '', 'unittest' ), 'Actual translation does not match expected one' );
+
+		$this->assertTrue( $controller->unload_file( DIR_TESTDATA . '/l10n/simple.mo', 'unittest' ) );
+
+		$this->assertFalse( $controller->translate( 'baba', '', 'unittest' ) );
+	}
+
+	/**
+	 * @covers ::set_locale
+	 * @covers ::get_locale
+	 * @covers ::load
+	 * @covers ::unload_file
+	 * @covers ::is_textdomain_loaded
+	 * @covers ::translate
+	 * @covers ::translate_plural
+	 */
+	public function test_load_multiple_locales() {
+		$controller = new WP_Translation_Controller();
+
+		$this->assertSame( 'en_US', $controller->get_locale() );
+
+		$controller->set_locale( 'de_DE' );
+
+		$this->assertSame( 'de_DE', $controller->get_locale() );
+
+		$this->assertTrue( $controller->load_file( DIR_TESTDATA . '/l10n/example-simple.mo', 'unittest' ) );
+		$this->assertTrue( $controller->load_file( DIR_TESTDATA . '/l10n/simple.mo', 'unittest', 'es_ES' ) );
+		$this->assertTrue( $controller->load_file( DIR_TESTDATA . '/l10n/plural.mo', 'unittest', 'en_US' ) );
+
+		$this->assertTrue( $controller->is_textdomain_loaded( 'unittest' ) );
+
+		// From example-simple.mo
+
+		$this->assertSame( 'translation', $controller->translate( 'original', '', 'unittest' ), 'String should be translated in de_DE' );
+		$this->assertFalse( $controller->translate( 'original', '', 'unittest', 'es_ES' ), 'String should not be translated in es_ES' );
+		$this->assertFalse( $controller->translate( 'original', '', 'unittest', 'en_US' ), 'String should not be translated in en_US' );
+
+		// From simple.mo.
+
+		$this->assertFalse( $controller->translate( 'baba', '', 'unittest' ), 'String should not be translated in de_DE' );
+		$this->assertSame( 'dyado', $controller->translate( 'baba', '', 'unittest', 'es_ES' ), 'String should be translated in es_ES' );
+		$this->assertFalse( $controller->translate( 'baba', '', 'unittest', 'en_US' ), 'String should not be translated in en_US' );
+
+		$this->assertTrue( $controller->unload_file( DIR_TESTDATA . '/l10n/plural.mo', 'unittest', 'de_DE' ) );
+
+		$this->assertSame( 'oney dragoney', $controller->translate_plural( array( 'one dragon', '%d dragons' ), 1, '', 'unittest', 'en_US' ), 'String should be translated in en_US' );
+
+		$this->assertTrue( $controller->unload_file( DIR_TESTDATA . '/l10n/plural.mo', 'unittest', 'en_US' ) );
+
+		$this->assertFalse( $controller->translate_plural( array( 'one dragon', '%d dragons' ), 1, '', 'unittest', 'en_US' ), 'String should not be translated in en_US' );
+	}
+
+	/**
+	 * @covers ::unload_textdomain
+	 */
+	public function test_unload_with_multiple_locales() {
+		$ginger_mo = new WP_Translation_Controller();
+
+		$ginger_mo->set_locale( 'de_DE' );
+
+		$this->assertSame( 'de_DE', $ginger_mo->get_locale() );
+		$this->assertTrue( $ginger_mo->load_file( DIR_TESTDATA . '/l10n/example-simple.mo', 'unittest' ) );
+		$ginger_mo->set_locale( 'es_ES' );
+		$this->assertTrue( $ginger_mo->load_file( DIR_TESTDATA . '/l10n/simple.mo', 'unittest' ) );
+		$ginger_mo->set_locale( 'pl_PL' );
+		$this->assertTrue( $ginger_mo->load_file( DIR_TESTDATA . '/l10n/plural.mo', 'unittest' ) );
+		$this->assertSame( 'pl_PL', $ginger_mo->get_locale() );
+
+		$this->assertTrue( $ginger_mo->is_textdomain_loaded( 'unittest' ) );
+
+		$ginger_mo->set_locale( 'en_US' );
+		$this->assertSame( 'en_US', $ginger_mo->get_locale() );
+
+		$this->assertFalse( $ginger_mo->is_textdomain_loaded( 'unittest' ) );
+		$this->assertTrue( $ginger_mo->is_textdomain_loaded( 'unittest', 'pl_PL' ) );
+		$this->assertTrue( $ginger_mo->is_textdomain_loaded( 'unittest', 'es_ES' ) );
+		$this->assertTrue( $ginger_mo->is_textdomain_loaded( 'unittest', 'de_DE' ) );
+
+		$this->assertTrue( $ginger_mo->unload_textdomain( 'unittest' ) );
+
+		$this->assertFalse( $ginger_mo->is_textdomain_loaded( 'unittest' ) );
+		$this->assertFalse( $ginger_mo->is_textdomain_loaded( 'unittest', 'pl_PL' ) );
+		$this->assertFalse( $ginger_mo->is_textdomain_loaded( 'unittest', 'es_ES' ) );
+		$this->assertFalse( $ginger_mo->is_textdomain_loaded( 'unittest', 'de_DE' ) );
+	}
+
+	/**
+	 * @covers ::load
+	 * @covers ::locate_translation
+	 */
+	public function test_load_with_default_textdomain() {
+		$controller = new WP_Translation_Controller();
+		$this->assertTrue( $controller->load_file( DIR_TESTDATA . '/l10n/example-simple.mo' ) );
+		$this->assertTrue( $controller->load_file( DIR_TESTDATA . '/l10n/example-simple.mo' ) );
+		$this->assertFalse( $controller->is_textdomain_loaded( 'unittest' ) );
+		$this->assertSame( 'translation', $controller->translate( 'original' ) );
+	}
+
+	/**
+	 * @covers ::load
+	 */
+	public function test_load_same_file_twice() {
+		$controller = new WP_Translation_Controller();
+		$this->assertTrue( $controller->load_file( DIR_TESTDATA . '/l10n/example-simple.mo', 'unittest' ) );
+		$this->assertTrue( $controller->load_file( DIR_TESTDATA . '/l10n/example-simple.mo', 'unittest' ) );
+
+		$this->assertTrue( $controller->is_textdomain_loaded( 'unittest' ) );
+	}
+
+	/**
+	 * @covers ::load
+	 */
+	public function test_load_file_is_already_loaded_for_different_textdomain() {
+		$controller = new WP_Translation_Controller();
+		$this->assertTrue( $controller->load_file( DIR_TESTDATA . '/l10n/example-simple.mo', 'foo' ) );
+		$this->assertTrue( $controller->load_file( DIR_TESTDATA . '/l10n/example-simple.mo', 'bar' ) );
+
+		$this->assertTrue( $controller->is_textdomain_loaded( 'foo' ) );
+		$this->assertTrue( $controller->is_textdomain_loaded( 'bar' ) );
+	}
+
+	/**
+	 * @covers ::load
+	 * @covers ::is_textdomain_loaded
+	 * @covers ::translate
+	 * @covers ::translate_plural
+	 * @covers ::locate_translation
+	 * @covers ::get_files
+	 * @covers WP_Translation_File::get_plural_form
+	 * @covers WP_Translation_File::make_plural_form_function
+	 */
+	public function test_load_no_plurals() {
+		$controller = new WP_Translation_Controller();
+		$this->assertTrue( $controller->load_file( DIR_TESTDATA . '/l10n/fa_IR.mo', 'unittest' ) );
+
+		$this->assertTrue( $controller->is_textdomain_loaded( 'unittest' ) );
+
+		$this->assertFalse( $controller->translate( "string that doesn't exist", '', 'unittest' ) );
+
+		$this->assertSame( 'رونوشت‌ها فعال نشدند.', $controller->translate( 'Revisions not enabled.', '', 'unittest' ) );
+		$this->assertSame( 'افزودن جدید', $controller->translate( 'Add New', 'file', 'unittest' ) );
+
+		$this->assertSame( '%s دیدگاه', $controller->translate_plural( array( '%s comment', '%s comments' ), 0, '', 'unittest' ) );
+		$this->assertSame( '%s دیدگاه', $controller->translate_plural( array( '%s comment', '%s comments' ), 1, '', 'unittest' ) );
+		$this->assertSame( '%s دیدگاه', $controller->translate_plural( array( '%s comment', '%s comments' ), 2, '', 'unittest' ) );
+	}
+
+	/**
+	 * @covers ::get_headers
+	 */
+	public function test_get_headers_no_loaded_translations() {
+		$controller = new WP_Translation_Controller();
+		$headers    = $controller->get_headers();
+		$this->assertEmpty( $headers );
+	}
+
+	/**
+	 * @covers ::get_headers
+	 */
+	public function test_get_headers_with_default_textdomain() {
+		$controller = new WP_Translation_Controller();
+		$controller->load_file( DIR_TESTDATA . '/l10n/example-simple.mo' );
+		$headers = $controller->get_headers();
+		$this->assertSame(
+			array(
+				'Po-Revision-Date' => '2016-01-05 18:45:32+1000',
+			),
+			$headers
+		);
+	}
+
+	/**
+	 * @covers ::get_headers
+	 */
+	public function test_get_headers_no_loaded_translations_for_domain() {
+		$controller = new WP_Translation_Controller();
+		$controller->load_file( DIR_TESTDATA . '/l10n/example-simple.mo', 'foo' );
+		$headers = $controller->get_headers( 'bar' );
+		$this->assertEmpty( $headers );
+	}
+
+
+	/**
+	 * @covers ::get_entries
+	 */
+	public function test_get_entries_no_loaded_translations() {
+		$controller = new WP_Translation_Controller();
+		$headers    = $controller->get_entries();
+		$this->assertEmpty( $headers );
+	}
+
+	/**
+	 * @covers ::get_entries
+	 */
+	public function test_get_entries_with_default_textdomain() {
+		$controller = new WP_Translation_Controller();
+		$controller->load_file( DIR_TESTDATA . '/l10n/simple.mo' );
+		$headers = $controller->get_entries();
+		$this->assertSame(
+			array(
+				'baba'       => 'dyado',
+				"kuku\nruku" => 'yes',
+			),
+			$headers
+		);
+	}
+
+	/**
+	 * @covers ::get_entries
+	 */
+	public function test_get_entries_no_loaded_translations_for_domain() {
+		$controller = new WP_Translation_Controller();
+		$controller->load_file( DIR_TESTDATA . '/l10n/simple.mo', 'foo' );
+		$headers = $controller->get_entries( 'bar' );
+		$this->assertEmpty( $headers );
+	}
+
+	/**
+	 * @dataProvider data_export_matrix
+	 *
+	 * @param string $source_file
+	 * @param string $destination_format
+	 */
+	public function test_convert_format( string $source_file, string $destination_format ) {
+		$destination_file = $this->temp_filename();
+
+		$this->assertNotFalse( $destination_file );
+
+		$source = WP_Translation_File::create( $source_file );
+
+		$this->assertInstanceOf( WP_Translation_File::class, $source );
+
+		$contents = WP_Translation_File::transform( $source_file, $destination_format );
+
+		$this->assertNotFalse( $contents );
+
+		file_put_contents( $destination_file, $contents );
+
+		$destination = WP_Translation_File::create( $destination_file, $destination_format );
+
+		$this->assertInstanceOf( WP_Translation_File::class, $destination );
+		$this->assertNull( $destination->error() );
+
+		$this->assertTrue( filesize( $destination_file ) > 0 );
+
+		$destination_read = WP_Translation_File::create( $destination_file, $destination_format );
+
+		$this->assertInstanceOf( WP_Translation_File::class, $destination_read );
+		$this->assertNull( $destination_read->error() );
+
+		$source_headers      = $source->headers();
+		$destination_headers = $destination_read->headers();
+
+		$this->assertEquals( $source_headers, $destination_headers );
+
+		foreach ( $source->entries() as $original => $translation ) {
+			// Verify the translation is in the destination file
+			$new_translation = $destination_read->translate( $original );
+			$this->assertSame( $translation, $new_translation );
+		}
+	}
+
+	/**
+	 * @return array<array{0:string, 1: 'mo'|'php'}>
+	 */
+	public function data_export_matrix(): array {
+		$formats = array( 'mo', 'php' );
+
+		$matrix = array();
+
+		foreach ( $formats as $input_format ) {
+			foreach ( $formats as $output_format ) {
+				$matrix[ "$input_format to $output_format" ] = array( DIR_TESTDATA . '/l10n/example-simple.' . $input_format, $output_format );
+			}
+		}
+
+		return $matrix;
+	}
+
+	/**
+	 * @covers WP_Translation_File::transform
+	 */
+	public function test_convert_format_invalid_source() {
+		$this->assertFalse( WP_Translation_File::transform( 'this-file-does-not-exist', 'invalid' ) );
+		$this->assertFalse( WP_Translation_File::transform( DIR_TESTDATA . '/l10n/example-simple.mo', 'invalid' ) );
+		$this->assertNotFalse( WP_Translation_File::transform( DIR_TESTDATA . '/l10n/example-simple.mo', 'php' ) );
+	}
+}
diff --git a/tests/link.php b/tests/link.php
index f3216c17ee..d05a6b210f 100644
--- a/tests/link.php
+++ b/tests/link.php
@@ -4,28 +4,6 @@
  */
 class Tests_Link extends WP_UnitTestCase {
 
-	public function get_pagenum_link_cb( $url ) {
-		return $url . '/WooHoo';
-	}
-
-	/**
-	 * @ticket 8847
-	 */
-	public function test_get_pagenum_link_case_insensitivity() {
-		$old_req_uri = $_SERVER['REQUEST_URI'];
-
-		$this->set_permalink_structure( '/%year%/%monthnum%/%day%/%postname%/' );
-
-		add_filter( 'home_url', array( $this, 'get_pagenum_link_cb' ) );
-		$_SERVER['REQUEST_URI'] = '/woohoo';
-		$paged                  = get_pagenum_link( 2 );
-
-		remove_filter( 'home_url', array( $this, 'get_pagenum_link_cb' ) );
-		$this->assertSame( $paged, home_url( '/WooHoo/page/2/' ) );
-
-		$_SERVER['REQUEST_URI'] = $old_req_uri;
-	}
-
 	public function test_wp_get_shortlink() {
 		$post_id  = self::factory()->post->create();
 		$post_id2 = self::factory()->post->create();
diff --git a/tests/link/getPagenumLink.php b/tests/link/getPagenumLink.php
new file mode 100644
index 0000000000..9c81cc8454
--- /dev/null
+++ b/tests/link/getPagenumLink.php
@@ -0,0 +1,199 @@
+<?php
+
+/**
+ * @group link
+ * @covers ::get_pagenum_link
+ */
+class Tests_Link_GetPagenumLink extends WP_UnitTestCase {
+
+	/**
+	 * The original value of `$_SERVER['REQUEST_URI']`.
+	 *
+	 * @var string|null
+	 */
+	protected static $request_uri_original;
+
+	/**
+	 * Backs up the value of `$_SERVER['REQUEST_URI']` before any tests run.
+	 */
+	public static function set_up_before_class() {
+		parent::set_up_before_class();
+
+		if ( isset( $_SERVER['REQUEST_URI'] ) ) {
+			self::$request_uri_original = $_SERVER['REQUEST_URI'];
+		}
+	}
+
+	/**
+	 * Restores the value of `$_SERVER['REQUEST_URI']` after each test runs.
+	 */
+	public function tear_down() {
+		if ( null === self::$request_uri_original ) {
+			unset( $_SERVER['REQUEST_URI'] );
+		} else {
+			$_SERVER['REQUEST_URI'] = self::$request_uri_original;
+		}
+
+		parent::tear_down();
+	}
+
+	/**
+	 * @ticket 8847
+	 */
+	public function test_get_pagenum_link_case_insensitivity() {
+		$this->set_permalink_structure( '/%year%/%monthnum%/%day%/%postname%/' );
+
+		add_filter( 'home_url', array( $this, 'get_pagenum_link_cb' ) );
+		$_SERVER['REQUEST_URI'] = '/woohoo';
+		$paged                  = get_pagenum_link( 2 );
+
+		remove_filter( 'home_url', array( $this, 'get_pagenum_link_cb' ) );
+		$this->assertSame( $paged, home_url( '/WooHoo/page/2/' ) );
+	}
+
+	/**
+	 * Appends '/WooHoo' to the provided URL.
+	 *
+	 * Callback for the 'home_url' filter hook.
+	 *
+	 * @param string $url The base URL.
+	 * @return string The base URL with '/WooHoo' appended.
+	 */
+	public function get_pagenum_link_cb( $url ) {
+		return $url . '/WooHoo';
+	}
+
+	/**
+	 * Tests that a trailing slash is not added to the link.
+	 *
+	 * @ticket 2877
+	 *
+	 * @dataProvider data_get_pagenum_link_plain_permalinks
+	 * @dataProvider data_get_pagenum_link
+	 *
+	 * @param string $permalink_structure The structure to use for permalinks.
+	 * @param string $request_uri         The value for `$_SERVER['REQUEST_URI']`.
+	 * @param int    $pagenum             The page number to get the link for.
+	 * @param string $expected            The expected relative URL.
+	 */
+	public function test_get_pagenum_link_should_not_add_trailing_slash( $permalink_structure, $request_uri, $pagenum, $expected ) {
+		$this->set_permalink_structure( $permalink_structure );
+		$_SERVER['REQUEST_URI'] = $request_uri;
+		$paged                  = get_pagenum_link( $pagenum );
+
+		$this->assertSame( home_url( $expected ), $paged );
+	}
+
+	/**
+	 * Data provider.
+	 *
+	 * @return array[]
+	 */
+	public function data_get_pagenum_link_plain_permalinks() {
+		return array(
+			'page 1 and plain permalinks' => array(
+				'permalink_structure' => '',
+				'request_uri'         => '/?paged=2',
+				'pagenum'             => 1,
+				'expected'            => '/',
+			),
+			'page 2 and plain permalinks' => array(
+				'permalink_structure' => '',
+				'request_uri'         => '/',
+				'pagenum'             => 2,
+				'expected'            => '/?paged=2',
+			),
+		);
+	}
+
+	/**
+	 * Tests that a trailing slash is added to the link when a trailing slash
+	 * exists in the permalink structure.
+	 *
+	 * @ticket 2877
+	 *
+	 * @dataProvider data_get_pagenum_link
+	 *
+	 * @param string $permalink_structure The structure to use for permalinks.
+	 * @param string $request_uri         The value for `$_SERVER['REQUEST_URI']`.
+	 * @param int    $pagenum             The page number to get the link for.
+	 * @param string $expected            The expected relative URL.
+	 */
+	public function test_get_pagenum_link_should_add_trailing_slash( $permalink_structure, $request_uri, $pagenum, $expected ) {
+		// Ensure the permalink structure has a trailing slash.
+		$permalink_structure = trailingslashit( $permalink_structure );
+
+		// Ensure the expected value has a trailing slash at the appropriate position.
+		if ( str_contains( $expected, '?' ) ) {
+			// Contains query args.
+			$parts    = explode( '?', $expected, 2 );
+			$expected = trailingslashit( $parts[0] ) . '?' . $parts[1];
+		} else {
+			$expected = trailingslashit( $expected );
+		}
+
+		$this->set_permalink_structure( $permalink_structure );
+		$_SERVER['REQUEST_URI'] = $request_uri;
+		$paged                  = get_pagenum_link( $pagenum );
+
+		$this->assertSame( home_url( $expected ), $paged );
+	}
+
+	/**
+	 * Data provider.
+	 *
+	 * @return array[]
+	 */
+	public function data_get_pagenum_link() {
+		return array(
+			'page 1 and index.php'                  => array(
+				'permalink_structure' => '/index.php/%year%/%monthnum%/%day%/%postname%',
+				'request_uri'         => '/index.php/woohoo/page/2/',
+				'pagenum'             => 1,
+				'expected'            => '/index.php/woohoo',
+			),
+			'page 2 and index.php'                  => array(
+				'permalink_structure' => '/index.php/%year%/%monthnum%/%day%/%postname%',
+				'request_uri'         => '/index.php/woohoo/page/2/',
+				'pagenum'             => 2,
+				'expected'            => '/index.php/woohoo/page/2',
+			),
+			'page 1 with date-based permalinks'     => array(
+				'permalink_structure' => '/%year%/%monthnum%/%day%/%postname%',
+				'request_uri'         => '/woohoo/page/2/',
+				'pagenum'             => 1,
+				'expected'            => '/woohoo',
+			),
+			'page 2 with date-based permalinks'     => array(
+				'permalink_structure' => '/%year%/%monthnum%/%day%/%postname%',
+				'request_uri'         => '/woohoo',
+				'pagenum'             => 2,
+				'expected'            => '/woohoo/page/2',
+			),
+			'page 1 with postname-based permalinks' => array(
+				'permalink_structure' => '/%postname%',
+				'request_uri'         => '/woohoo/page/2',
+				'pagenum'             => 1,
+				'expected'            => '/woohoo',
+			),
+			'page 2 with postname-based permalinks' => array(
+				'permalink_structure' => '/%postname%',
+				'request_uri'         => '/woohoo',
+				'pagenum'             => 2,
+				'expected'            => '/woohoo/page/2',
+			),
+			'page 1 with postname-based permalinks and query args' => array(
+				'permalink_structure' => '/%postname%',
+				'request_uri'         => '/woohoo/page/2?test=1234',
+				'pagenum'             => 1,
+				'expected'            => '/woohoo?test=1234',
+			),
+			'page 2 with postname-based permalinks and query args' => array(
+				'permalink_structure' => '/%postname%',
+				'request_uri'         => '/woohoo?test=1234',
+				'pagenum'             => 2,
+				'expected'            => '/woohoo/page/2?test=1234',
+			),
+		);
+	}
+}
diff --git a/tests/load/isLogin.php b/tests/load/isLogin.php
index 84d9a26d9a..88f8700b97 100644
--- a/tests/load/isLogin.php
+++ b/tests/load/isLogin.php
@@ -3,7 +3,8 @@
 /**
  * Tests for is_login().
  *
- * @group load.php
+ * @group load
+ *
  * @covers ::is_login
  */
 class Tests_Load_IsLogin extends WP_UnitTestCase {
diff --git a/tests/load/wpConvertHrToBytes.php b/tests/load/wpConvertHrToBytes.php
index 66f4d4329b..62b3fb05e1 100644
--- a/tests/load/wpConvertHrToBytes.php
+++ b/tests/load/wpConvertHrToBytes.php
@@ -3,7 +3,7 @@
 /**
  * Tests for wp_convert_hr_to_bytes().
  *
- * @group load.php
+ * @group load
  *
  * @covers ::wp_convert_hr_to_bytes
  */
diff --git a/tests/load/wpDebugMode.php b/tests/load/wpDebugMode.php
index f873ad9069..a63f161369 100644
--- a/tests/load/wpDebugMode.php
+++ b/tests/load/wpDebugMode.php
@@ -7,8 +7,9 @@
  * @subpackage UnitTests
  * @since 5.9.0
  *
- * @group load.php
+ * @group load
  * @group wp-debug-mode
+ *
  * @covers ::wp_debug_mode
  */
 class Test_WP_Debug_Mode extends WP_UnitTestCase {
diff --git a/tests/load/wpGetDevelopmentMode.php b/tests/load/wpGetDevelopmentMode.php
index 430c6b4948..ad5ef32176 100644
--- a/tests/load/wpGetDevelopmentMode.php
+++ b/tests/load/wpGetDevelopmentMode.php
@@ -6,7 +6,8 @@
  * @subpackage UnitTests
  * @since 6.3.0
  *
- * @group load.php
+ * @group load
+ *
  * @covers ::wp_get_development_mode
  * @covers ::wp_is_development_mode
  */
diff --git a/tests/load/wpIsIniValueChangeable.php b/tests/load/wpIsIniValueChangeable.php
index 6b73bb9e5f..0f7779dc7d 100644
--- a/tests/load/wpIsIniValueChangeable.php
+++ b/tests/load/wpIsIniValueChangeable.php
@@ -3,7 +3,7 @@
 /**
  * Tests for wp_is_ini_value_changeable().
  *
- * @group load.php
+ * @group load
  *
  * @covers ::wp_is_ini_value_changeable
  */
diff --git a/tests/media.php b/tests/media.php
index 3b8615dd82..7cc9f5470f 100644
--- a/tests/media.php
+++ b/tests/media.php
@@ -79,6 +79,9 @@ CAP;
 	 * Ensures that the static content media count, fetchpriority element flag and related filter are reset between tests.
 	 */
 	public function tear_down() {
+		global $_wp_current_template_id, $_wp_current_template_content;
+		unset( $_wp_current_template_id, $_wp_current_template_content );
+
 		parent::tear_down();
 
 		$this->reset_content_media_count();
@@ -396,7 +399,7 @@ https://w.org</a>',
 		$this->assertSame( '', $prepped['subtype'] );
 		// #21963, there will be a GUID always, so there will be a URL.
 		$this->assertNotEquals( '', $prepped['url'] );
-		$this->assertSame( site_url( 'wp-includes/images/media/default.png' ), $prepped['icon'] );
+		$this->assertSame( site_url( 'wp-includes/images/media/default.svg' ), $prepped['icon'] );
 
 		// Fake a mime.
 		$post->post_mime_type = 'image/jpeg';
@@ -3972,7 +3975,7 @@ EOF;
 	 * @covers ::wp_get_loading_optimization_attributes
 	 */
 	public function test_wp_filter_content_tags_does_not_lazy_load_first_image_in_block_theme() {
-		global $_wp_current_template_content, $wp_query, $wp_the_query, $post;
+		global $_wp_current_template_id, $_wp_current_template_content, $wp_query, $wp_the_query, $post;
 
 		// Do not add srcset, sizes, or decoding attributes as they are irrelevant for this test.
 		add_filter( 'wp_img_tag_add_srcset_and_sizes_attr', '__return_false' );
@@ -4001,6 +4004,8 @@ EOF;
 		$wp_the_query = $wp_query;
 		$post         = get_post( self::$post_ids['publish'] );
 
+		// Force a template ID that is for the current stylesheet.
+		$_wp_current_template_id      = get_stylesheet() . '//single';
 		$_wp_current_template_content = '<!-- wp:post-content /-->';
 
 		$html = get_the_block_template_html();
@@ -4020,7 +4025,7 @@ EOF;
 	 * @covers ::wp_get_loading_optimization_attributes
 	 */
 	public function test_wp_filter_content_tags_does_not_lazy_load_first_featured_image_in_block_theme() {
-		global $_wp_current_template_content, $wp_query, $wp_the_query, $post;
+		global $_wp_current_template_id, $_wp_current_template_content, $wp_query, $wp_the_query, $post;
 
 		// Do not add srcset, sizes, or decoding attributes as they are irrelevant for this test.
 		add_filter( 'wp_img_tag_add_srcset_and_sizes_attr', '__return_false' );
@@ -4069,6 +4074,8 @@ EOF;
 		$wp_the_query = $wp_query;
 		$post         = get_post( self::$post_ids['publish'] );
 
+		// Force a template ID that is for the current stylesheet.
+		$_wp_current_template_id      = get_stylesheet() . '//single';
 		$_wp_current_template_content = '<!-- wp:post-featured-image /--> <!-- wp:post-content /-->';
 
 		$html = get_the_block_template_html();
@@ -4087,7 +4094,7 @@ EOF;
 	 * @covers ::wp_get_loading_optimization_attributes
 	 */
 	public function test_wp_filter_content_tags_does_not_lazy_load_images_in_header() {
-		global $_wp_current_template_content;
+		global $_wp_current_template_id, $_wp_current_template_content;
 
 		// Do not add srcset, sizes, or decoding attributes as they are irrelevant for this test.
 		add_filter( 'wp_img_tag_add_srcset_and_sizes_attr', '__return_false' );
@@ -4122,6 +4129,8 @@ EOF;
 		wp_set_post_terms( $footer_post_id, WP_TEMPLATE_PART_AREA_FOOTER, 'wp_template_part_area' );
 		wp_set_post_terms( $footer_post_id, get_stylesheet(), 'wp_theme' );
 
+		// Force a template ID that is for the current stylesheet.
+		$_wp_current_template_id      = get_stylesheet() . '//single';
 		$_wp_current_template_content = '<!-- wp:template-part {"slug":"header","theme":"' . get_stylesheet() . '","tagName":"header"} /--><!-- wp:template-part {"slug":"footer","theme":"' . get_stylesheet() . '","tagName":"footer"} /-->';
 
 		// Header image should not be lazy-loaded, footer image should be lazy-loaded.
diff --git a/tests/media/wpCopyParentAttachmentProperties.php b/tests/media/wpCopyParentAttachmentProperties.php
new file mode 100644
index 0000000000..a91431263b
--- /dev/null
+++ b/tests/media/wpCopyParentAttachmentProperties.php
@@ -0,0 +1,52 @@
+<?php
+
+/**
+ * Tests for the `wp_copy_parent_attachment_properties()` function.
+ *
+ * @group media
+ * @covers ::wp_copy_parent_attachment_properties
+ */
+class Tests_Media_wpCopyParentAttachmentProperties extends WP_UnitTestCase {
+
+	public function tear_down() {
+		$this->remove_added_uploads();
+
+		parent::tear_down();
+	}
+
+	public function test_wp_copy_parent_attachment_properties() {
+		$attachment = $this->factory->attachment->create_upload_object( DIR_TESTDATA . '/images/canola.jpg' );
+		$parent_url = get_post( $attachment )->guid;
+		// Add alternative text.
+		update_post_meta( $attachment, '_wp_attachment_image_alt', 'Alt text' );
+		// Add image description.
+		wp_update_post(
+			array(
+				'ID'           => $attachment,
+				'post_excerpt' => 'Image description',
+			)
+		);
+		$file = wp_crop_image(
+			DIR_TESTDATA . '/images/canola.jpg',
+			0,
+			0,
+			100,
+			100,
+			100,
+			100
+		);
+
+		$object  = wp_copy_parent_attachment_properties( $file, $attachment );
+		$cropped = str_replace( wp_basename( $parent_url ), 'cropped-canola.jpg', $parent_url );
+
+		$this->assertSame( $object['post_title'], 'cropped-canola.jpg', 'Attachment title is not identical' );
+		$this->assertSame( $object['context'], '', 'Attachment context is not identical' );
+		$this->assertSame( $object['post_mime_type'], 'image/jpeg', 'Attachment mime type is not identical' );
+		$this->assertSame( $object['post_content'], $cropped, 'Attachment content is not identical' );
+		$this->assertSame( $object['guid'], $cropped, 'Attachment GUID is not identical' );
+		$this->assertSame( $object['meta_input']['_wp_attachment_image_alt'], 'Alt text', 'Attachment alt text is not identical' );
+		$this->assertSame( $object['post_excerpt'], 'Image description', 'Attachment description is not identical' );
+
+		unlink( $file );
+	}
+}
diff --git a/tests/media/wpImgTagAddWidthAndHeightAttr.php b/tests/media/wpImgTagAddWidthAndHeightAttr.php
new file mode 100644
index 0000000000..84bfc7cc7e
--- /dev/null
+++ b/tests/media/wpImgTagAddWidthAndHeightAttr.php
@@ -0,0 +1,85 @@
+<?php
+
+/**
+ * Tests for the `wp_img_tag_add_width_and_height_attr()` function.
+ *
+ * @group media
+ * @covers ::wp_img_tag_add_width_and_height_attr
+ */
+class Tests_Media_Wp_Img_Tag_Add_Width_And_Height_Attr extends WP_UnitTestCase {
+
+	protected static $attachment_id;
+	protected static $attachment_width;
+	protected static $attachment_height;
+
+	public static function wpSetUpBeforeClass( WP_UnitTest_Factory $factory ) {
+		$file                    = DIR_TESTDATA . '/images/2007-06-17DSC_4173.JPG';
+		self::$attachment_id     = $factory->attachment->create_upload_object( $file );
+		self::$attachment_width  = 680;
+		self::$attachment_height = 1024;
+	}
+
+	public static function tear_down_after_class() {
+		wp_delete_attachment( self::$attachment_id, true );
+		parent::tear_down_after_class();
+	}
+
+	/**
+	 * Tests that `wp_img_tag_add_width_and_height_attr()` adds dimension attributes to an image when they are missing.
+	 *
+	 * @ticket 50367
+	 */
+	public function test_add_width_and_height_when_missing() {
+		$image_tag = '<img src="' . wp_get_attachment_image_url( self::$attachment_id, 'full' ) . '">';
+
+		$this->assertSame(
+			'<img width="' . self::$attachment_width . '" height="' . self::$attachment_height . '" src="' . wp_get_attachment_image_url( self::$attachment_id, 'full' ) . '">',
+			wp_img_tag_add_width_and_height_attr( $image_tag, 'the_content', self::$attachment_id )
+		);
+	}
+
+	/**
+	 * Tests that `wp_img_tag_add_width_and_height_attr()` does not add dimension attributes when disabled via filter.
+	 *
+	 * @ticket 50367
+	 */
+	public function test_do_not_add_width_and_height_when_disabled_via_filter() {
+		add_filter( 'wp_img_tag_add_width_and_height_attr', '__return_false' );
+		$image_tag = '<img src="' . wp_get_attachment_image_url( self::$attachment_id, 'full' ) . '">';
+
+		$this->assertSame(
+			$image_tag,
+			wp_img_tag_add_width_and_height_attr( $image_tag, 'the_content', self::$attachment_id )
+		);
+	}
+
+	/**
+	 * Tests that `wp_img_tag_add_width_and_height_attr()` does not add dimension attributes to an image without src.
+	 *
+	 * @ticket 50367
+	 */
+	public function test_do_not_add_width_and_height_without_src() {
+		$image_tag = '<img>';
+
+		$this->assertSame(
+			$image_tag,
+			wp_img_tag_add_width_and_height_attr( $image_tag, 'the_content', self::$attachment_id )
+		);
+	}
+
+	/**
+	 * Tests that `wp_img_tag_add_width_and_height_attr()` respects the style attribute from the inline image format to
+	 * correctly set width and height based on that.
+	 *
+	 * @ticket 59352
+	 */
+	public function test_consider_inline_image_style_attr_to_set_width_and_height() {
+		// '85px' is the original width (680px) divided by 8, so the expected height is equivalently 1024/8=128.
+		$image_tag = '<img src="' . wp_get_attachment_image_url( self::$attachment_id, 'full' ) . '" style="width: 85px;">';
+
+		$this->assertSame(
+			'<img width="85" height="128" src="' . wp_get_attachment_image_url( self::$attachment_id, 'full' ) . '" style="width: 85px;">',
+			wp_img_tag_add_width_and_height_attr( $image_tag, 'the_content', self::$attachment_id )
+		);
+	}
+}
diff --git a/tests/multisite/wpNetworkQuery.php b/tests/multisite/wpNetworkQuery.php
index f59a4c6628..cb346e6649 100644
--- a/tests/multisite/wpNetworkQuery.php
+++ b/tests/multisite/wpNetworkQuery.php
@@ -608,6 +608,23 @@ if ( is_multisite() ) :
 		public static function filter_networks_pre_query_and_set_networks( $networks, $query ) {
 			return array( get_network( self::$network_ids['wordpress.org/'] ) );
 		}
+
+		/**
+		 * @ticket 56841
+		 */
+		public function test_wp_network_query_does_not_have_leading_whitespace() {
+			$q = new WP_Network_Query();
+			$q->query(
+				array(
+					'fields'               => 'all',
+					'number'               => 3,
+					'order'                => 'ASC',
+					'update_network_cache' => true,
+				)
+			);
+
+			$this->assertSame( ltrim( $q->request ), $q->request, 'The query has leading whitespace' );
+		}
 	}
 
 endif;
diff --git a/tests/multisite/wpSiteQuery.php b/tests/multisite/wpSiteQuery.php
index 2b2bed37de..d22faeecb3 100644
--- a/tests/multisite/wpSiteQuery.php
+++ b/tests/multisite/wpSiteQuery.php
@@ -1162,6 +1162,26 @@ if ( is_multisite() ) :
 		public static function filter_sites_pre_query_and_set_sites( $sites, $query ) {
 			return array( get_site( self::$site_ids['wordpress.org/'] ) );
 		}
+
+		/**
+		 * @ticket 56841
+		 */
+		public function test_wp_site_query_does_not_have_leading_whitespace() {
+			$q = new WP_Site_Query();
+
+			$q->query(
+				array(
+					'fields'                 => 'ids',
+					'network_id'             => self::$network_ids['wordpress.org/'],
+					'number'                 => 3,
+					'order'                  => 'ASC',
+					'update_site_cache'      => true,
+					'update_site_meta_cache' => true,
+				)
+			);
+
+			$this->assertSame( ltrim( $q->request ), $q->request, 'The query has leading whitespace' );
+		}
 	}
 
 endif;
diff --git a/tests/oembed/template.php b/tests/oembed/template.php
index 12092ff669..fca6aadd95 100644
--- a/tests/oembed/template.php
+++ b/tests/oembed/template.php
@@ -10,8 +10,6 @@ class Tests_Embed_Template extends WP_UnitTestCase {
 
 		global $wp_scripts;
 		$wp_scripts = null;
-
-		remove_action( 'wp_print_styles', 'print_emoji_styles' );
 	}
 
 	public function tear_down() {
diff --git a/tests/option/isEqualDatabaseValue.php b/tests/option/isEqualDatabaseValue.php
deleted file mode 100644
index 22d1d2ac1c..0000000000
--- a/tests/option/isEqualDatabaseValue.php
+++ /dev/null
@@ -1,71 +0,0 @@
-<?php
-/**
- * Tests for _is_equal_database_value().
- *
- * @group option
- *
- * @covers ::_is_equal_database_value
- */
-class Tests_Option_IsEqualDatabaseValue extends WP_UnitTestCase {
-
-	/**
-	 * @ticket 22192
-	 *
-	 * @dataProvider data_is_equal_database_value
-	 *
-	 * @param mixed $old_value The old value to compare.
-	 * @param mixed $new_value The new value to compare.
-	 * @param bool  $expected  The expected result.
-	 */
-	public function test_is_equal_database_value( $old_value, $new_value, $expected ) {
-		$this->assertSame( $expected, _is_equal_database_value( $old_value, $new_value ) );
-	}
-
-	/**
-	 * Data provider.
-	 *
-	 * @return array
-	 */
-	public function data_is_equal_database_value() {
-		return array(
-			// Equal values.
-			array( '123', '123', true ),
-
-			// Not equal values.
-			array( '123', '456', false ),
-
-			// Truthy.
-			array( 1, '1', true ),
-			array( 1.0, '1', true ),
-			array( '1', '1', true ),
-			array( true, '1', true ),
-			array( '1.0', '1', false ),
-			array( '    ', '1', false ),
-			array( array( '0' ), '1', false ),
-			array( new stdClass(), '1', false ),
-			array( 'Howdy, admin!', '1', false ),
-
-			// False-ish values and empty strings.
-			array( 0, '0', true ),
-			array( 0.0, '0', true ),
-			array( '0', '0', true ),
-			array( '', '0', false ),
-			array( false, '0', false ),
-			array( null, '0', false ),
-			array( array(), '0', false ),
-
-			// Object values.
-			array( (object) array( 'foo' => 'bar' ), (object) array( 'foo' => 'bar' ), true ),
-			array( (object) array( 'foo' => 'bar' ), (object) array( 'foo' => 'baz' ), false ),
-			array( (object) array( 'foo' => 'bar' ), serialize( (object) array( 'foo' => 'bar' ) ), false ),
-			array( serialize( (object) array( 'foo' => 'bar' ) ), (object) array( 'foo' => 'bar' ), false ),
-			array( serialize( (object) array( 'foo' => 'bar' ) ), (object) array( 'foo' => 'baz' ), false ),
-
-			// Serialized values.
-			array( array( 'foo' => 'bar' ), serialize( array( 'foo' => 'bar' ) ), false ),
-			array( array( 'foo' => 'bar' ), serialize( array( 'foo' => 'baz' ) ), false ),
-			array( serialize( (object) array( 'foo' => 'bar' ) ), serialize( (object) array( 'foo' => 'bar' ) ), true ),
-			array( serialize( (object) array( 'foo' => 'bar' ) ), serialize( (object) array( 'foo' => 'baz' ) ), false ),
-		);
-	}
-}
diff --git a/tests/option/option.php b/tests/option/option.php
index e2e4a8abe9..c01479192c 100644
--- a/tests/option/option.php
+++ b/tests/option/option.php
@@ -370,268 +370,34 @@ class Tests_Option_Option extends WP_UnitTestCase {
 	}
 
 	/**
-	 * Ensure the database is getting updated when type changes, but not otherwise.
+	 * Tests that calling update_option() with changed autoload from 'no' to 'yes' updates the cache correctly.
 	 *
-	 * @ticket 22192
+	 * This ensures that no stale data is served in case the option is deleted after.
 	 *
-	 * @covers ::update_option
-	 *
-	 * @dataProvider data_update_option_type_juggling
-	 */
-	public function test_update_loosey_options( $old_value, $new_value, $update = false ) {
-		add_option( 'foo', $old_value );
-
-		// Comparison will happen against value cached during add_option() above.
-		$updated = update_option( 'foo', $new_value );
-
-		if ( $update ) {
-			$this->assertTrue( $updated, 'This loosely equal option should trigger an update.' );
-		} else {
-			$this->assertFalse( $updated, 'Loosely equal option should not trigger an update.' );
-		}
-	}
-
-	/**
-	 * Ensure the database is getting updated when type changes, but not otherwise.
-	 *
-	 * @ticket 22192
+	 * @ticket 51352
 	 *
 	 * @covers ::update_option
-	 *
-	 * @dataProvider data_update_option_type_juggling
-	 */
-	public function test_update_loosey_options_from_db( $old_value, $new_value, $update = false ) {
-		add_option( 'foo', $old_value );
-
-		// Delete cache.
-		wp_cache_delete( 'alloptions', 'options' );
-		$updated = update_option( 'foo', $new_value );
-
-		if ( $update ) {
-			$this->assertTrue( $updated, 'This loosely equal option should trigger an update.' );
-		} else {
-			$this->assertFalse( $updated, 'Loosely equal option should not trigger an update.' );
-		}
-	}
-
-	/**
-	 * Ensure the database is getting updated when type changes, but not otherwise.
-	 *
-	 * @ticket 22192
-	 *
-	 * @covers ::update_option
-	 *
-	 * @dataProvider data_update_option_type_juggling
 	 */
-	public function test_update_loosey_options_from_refreshed_cache( $old_value, $new_value, $update = false ) {
-		add_option( 'foo', $old_value );
-
-		// Delete and refresh cache from DB.
-		wp_cache_delete( 'alloptions', 'options' );
-		wp_load_alloptions();
-
-		$updated = update_option( 'foo', $new_value );
-
-		if ( $update ) {
-			$this->assertTrue( $updated, 'This loosely equal option should trigger an update.' );
-		} else {
-			$this->assertFalse( $updated, 'Loosely equal option should not trigger an update.' );
-		}
+	public function test_update_option_with_autoload_change_no_to_yes() {
+		add_option( 'foo', 'value1', '', 'no' );
+		update_option( 'foo', 'value2', 'yes' );
+		delete_option( 'foo' );
+		$this->assertFalse( get_option( 'foo' ) );
 	}
 
 	/**
-	 * Data provider.
+	 * Tests that calling update_option() with changed autoload from 'yes' to 'no' updates the cache correctly.
 	 *
-	 * @return array
-	 */
-	public function data_update_option_type_juggling() {
-		return array(
-			/*
-			 * Truthy values.
-			 * Loosely equal truthy scalar values should never result in a DB update.
-			 */
-			array( '1', '1' ),
-			array( '1', 1 ),
-			array( '1', 1.0 ),
-			array( '1', true ),
-			array( 1, '1' ),
-			array( 1, 1 ),
-			array( 1, 1.0 ),
-			array( 1, true ),
-			array( 1.0, '1' ),
-			array( 1.0, 1 ),
-			array( 1.0, 1.0 ),
-			array( 1.0, true ),
-			array( true, '1' ),
-			array( true, 1 ),
-			array( true, 1.0 ),
-			array( true, true ),
-
-			/*
-			 * Falsey values.
-			 * Loosely equal falsey scalar values only sometimes result in a DB update.
-			 */
-			array( '0', '0' ),
-			array( '0', 0 ),
-			array( '0', 0.0 ),
-			array( '0', false, true ), // Should update.
-			array( '', '' ),
-			array( '', 0, true ), // Should update.
-			array( '', 0.0, true ), // Should update.
-			array( '', false ),
-			array( 0, '0' ),
-			array( 0, '', true ), // Should update.
-			array( 0, 0 ),
-			array( 0, 0.0 ),
-			array( 0, false, true ), // Should update.
-			array( 0.0, '0' ),
-			array( 0.0, '', true ), // Should update.
-			array( 0.0, 0 ),
-			array( 0.0, 0.0 ),
-			array( 0.0, false, true ), // Should update.
-			array( false, '0', true ), // Should update.
-			array( false, '' ),
-			array( false, 0, true ), // Should update.
-			array( false, 0.0, true ), // Should update.
-			array( false, false ),
-
-			/*
-			 * Non scalar values.
-			 * Loosely equal non-scalar values should almost always result in an update.
-			 */
-			array( false, array(), true ),
-			array( 'false', array(), true ),
-			array( '', array(), true ),
-			array( 0, array(), true ),
-			array( '0', array(), true ),
-			array( false, null ), // Does not update.
-			array( 'false', null, true ),
-			array( '', null ), // Does not update.
-			array( 0, null, true ),
-			array( '0', null, true ),
-			array( array(), false, true ),
-			array( array(), 'false', true ),
-			array( array(), '', true ),
-			array( array(), 0, true ),
-			array( array(), '0', true ),
-			array( array(), null, true ),
-			array( null, false ), // Does not update.
-			array( null, 'false', true ),
-			array( null, '' ), // Does not update.
-			array( null, 0, true ),
-			array( null, '0', true ),
-			array( null, array(), true ),
-		);
-	}
-
-	/**
-	 * Tests that update_option() stores an option that uses
-	 * an unfiltered default value of (bool) false.
+	 * This ensures that no stale data is served in case the option is deleted after.
 	 *
-	 * @ticket 22192
+	 * @ticket 51352
 	 *
 	 * @covers ::update_option
 	 */
-	public function test_update_option_should_store_option_with_default_value_false() {
-		global $wpdb;
-
-		$option = 'update_option_default_false';
-		update_option( $option, false );
-
-		$actual = $wpdb->query(
-			$wpdb->prepare(
-				"SELECT option_name FROM $wpdb->options WHERE option_name = %s LIMIT 1",
-				$option
-			)
-		);
-
-		$this->assertSame( 1, $actual );
-	}
-
-	/**
-	 * Tests that update_option() stores an option that uses
-	 * a filtered default value.
-	 *
-	 * @ticket 22192
-	 *
-	 * @covers ::update_option
-	 */
-	public function test_update_option_should_store_option_with_filtered_default_value() {
-		global $wpdb;
-
-		$option        = 'update_option_custom_default';
-		$default_value = 'default-value';
-
-		add_filter(
-			"default_option_{$option}",
-			static function () use ( $default_value ) {
-				return $default_value;
-			}
-		);
-
-		update_option( $option, $default_value );
-
-		$actual = $wpdb->query(
-			$wpdb->prepare(
-				"SELECT option_name FROM $wpdb->options WHERE option_name = %s LIMIT 1",
-				$option
-			)
-		);
-
-		$this->assertSame( 1, $actual );
-	}
-
-	/**
-	 * Tests that a non-existing option is added even when its pre filter returns a value.
-	 *
-	 * @ticket 22192
-	 *
-	 * @covers ::update_option
-	 */
-	public function test_update_option_with_pre_filter_adds_missing_option() {
-		// Force a return value of integer 0.
-		add_filter( 'pre_option_foo', '__return_zero' );
-
-		/*
-		 * This should succeed, since the 'foo' option does not exist in the database.
-		 * The default value is false, so it differs from 0.
-		 */
-		$this->assertTrue( update_option( 'foo', 0 ) );
-	}
-
-	/**
-	 * Tests that an existing option is updated even when its pre filter returns the same value.
-	 *
-	 * @ticket 22192
-	 *
-	 * @covers ::update_option
-	 */
-	public function test_update_option_with_pre_filter_updates_option_with_different_value() {
-		// Add the option with a value of 1 to the database.
-		add_option( 'foo', 1 );
-
-		// Force a return value of integer 0.
-		add_filter( 'pre_option_foo', '__return_zero' );
-
-		/*
-		 * This should succeed, since the 'foo' option has a value of 1 in the database.
-		 * Therefore it differs from 0 and should be updated.
-		 */
-		$this->assertTrue( update_option( 'foo', 0 ) );
-	}
-
-	/**
-	 * Tests that calling update_option() does not permanently remove pre filters.
-	 *
-	 * @ticket 22192
-	 *
-	 * @covers ::update_option
-	 */
-	public function test_update_option_maintains_pre_filters() {
-		add_filter( 'pre_option_foo', '__return_zero' );
-		update_option( 'foo', 0 );
-
-		// Assert that the filter is still present.
-		$this->assertSame( 10, has_filter( 'pre_option_foo', '__return_zero' ) );
+	public function test_update_option_with_autoload_change_yes_to_no() {
+		add_option( 'foo', 'value1', '', 'yes' );
+		update_option( 'foo', 'value2', 'no' );
+		delete_option( 'foo' );
+		$this->assertFalse( get_option( 'foo' ) );
 	}
 }
diff --git a/tests/option/primeOptions.php b/tests/option/primeOptions.php
deleted file mode 100644
index 6798d33f04..0000000000
--- a/tests/option/primeOptions.php
+++ /dev/null
@@ -1,130 +0,0 @@
-<?php
-/**
- * Test prime_options().
- *
- * @group option
- *
- * @covers ::prime_options
- */
-class Tests_Option_PrimeOptions extends WP_UnitTestCase {
-
-	/**
-	 * Tests that prime_options() primes multiple options.
-	 *
-	 * @ticket 58962
-	 */
-	public function test_prime_options() {
-		// Create some options to prime.
-		$options_to_prime = array(
-			'option1',
-			'option2',
-			'option3',
-		);
-
-		/*
-		 * Set values for the options,
-		 * clear the cache for the options,
-		 * check options are not in cache initially.
-		 */
-		foreach ( $options_to_prime as $option ) {
-			update_option( $option, "value_$option", false );
-			wp_cache_delete( $option, 'options' );
-			$this->assertFalse( wp_cache_get( $option, 'options' ), "$option was not deleted from the cache." );
-		}
-
-		// Call the prime_options function to prime the options.
-		prime_options( $options_to_prime );
-
-		// Store the initial database query count.
-		$initial_query_count = get_num_queries();
-
-		// Check that options are only in the 'options' cache group.
-		foreach ( $options_to_prime as $option ) {
-			$this->assertSame(
-				wp_cache_get( $option, 'options' ),
-				get_option( $option ),
-				"$option was not primed to the 'options' cache group."
-			);
-
-			$this->assertFalse(
-				wp_cache_get( $option, 'notoptions' ),
-				get_option( $option ),
-				"$option was primed to the 'notoptions' cache group."
-			);
-		}
-
-		// Ensure no additional database queries were made.
-		$this->assertSame(
-			$initial_query_count,
-			get_num_queries(),
-			'Additional database queries were made.'
-		);
-	}
-
-	/**
-	 * Tests prime_options() with options that do not exist in the database.
-	 *
-	 * @ticket 58962
-	 */
-	public function test_prime_options_with_nonexistent_options() {
-		// Create some options to prime.
-		$options_to_prime = array(
-			'option1',
-			'option2',
-		);
-
-		/*
-		 * Set values for the options,
-		 * clear the cache for the options,
-		 * check options are not in cache initially.
-		 */
-		foreach ( $options_to_prime as $option ) {
-			$this->assertFalse( wp_cache_get( $option, 'options' ), "$option was not deleted from the cache." );
-		}
-
-		// Call the prime_options function to prime the options.
-		prime_options( $options_to_prime );
-
-		// Check that options are not in the cache or database.
-		foreach ( $options_to_prime as $option ) {
-			$this->assertFalse( wp_cache_get( $option, 'options' ), "$option was not deleted from the cache." );
-		}
-
-		// Check that options are present in the notoptions cache.
-		$new_notoptions = wp_cache_get( 'notoptions', 'options' );
-		$this->assertIsArray( $new_notoptions, 'The notoptions cache should be an array.' );
-		foreach ( $options_to_prime as $option ) {
-			$this->assertArrayHasKey( $option, $new_notoptions, "$option was not added to the notoptions cache." );
-		}
-	}
-
-	/**
-	 * Tests prime_options() with an empty array.
-	 *
-	 * @ticket 58962
-	 */
-	public function test_prime_options_with_empty_array() {
-		$alloptions = wp_load_alloptions();
-		$notoptions = wp_cache_get( 'notoptions', 'options' );
-
-		prime_options( array() );
-
-		$this->assertSame( $alloptions, wp_cache_get( 'alloptions', 'options' ), 'The alloptions cache was modified.' );
-		$this->assertSame( $notoptions, wp_cache_get( 'notoptions', 'options' ), 'The notoptions cache was modified.' );
-	}
-
-	/**
-	 * Tests that prime_options handles an empty "notoptions" cache.
-	 *
-	 * @ticket 58962
-	 */
-	public function test_prime_options_handles_empty_notoptions_cache() {
-		wp_cache_delete( 'notoptions', 'options' );
-
-		prime_options( array( 'nonexistent_option' ) );
-
-		$notoptions = wp_cache_get( 'notoptions', 'options' );
-		$this->assertIsArray( $notoptions, 'The notoptions cache should be an array.' );
-		$this->assertArrayHasKey( 'nonexistent_option', $notoptions, 'nonexistent_option was not added to notoptions.' );
-	}
-}
diff --git a/tests/option/registration.php b/tests/option/registration.php
index 04991e4a33..9b0e418c91 100644
--- a/tests/option/registration.php
+++ b/tests/option/registration.php
@@ -149,4 +149,18 @@ class Tests_Option_Registration extends WP_UnitTestCase {
 
 		$this->assertFalse( has_filter( 'default_option_test_default', 'filter_default_option' ) );
 	}
+
+	/**
+	 * The test passes if a Notice | Warning | Error is not raised. Thus. the absence of a Notice | Warning | Error
+	 * is an indicator the fix in the ticket resolves the issue.
+	 *
+	 * @ticket 57674
+	 *
+	 * @covers ::unregister_setting
+	 */
+	public function test_unregister_invalid_setting_does_not_raise_php_notice_warning_or_error() {
+		$setting = uniqid();
+		unregister_setting( $setting, $setting );
+		$this->assertFalse( has_filter( 'default_option_' . $setting, 'filter_default_option' ) );
+	}
 }
diff --git a/tests/option/wpPrimeOptionCaches.php b/tests/option/wpPrimeOptionCaches.php
new file mode 100644
index 0000000000..8b75bc286c
--- /dev/null
+++ b/tests/option/wpPrimeOptionCaches.php
@@ -0,0 +1,461 @@
+<?php
+/**
+ * Test wp_prime_option_caches().
+ *
+ * @group option
+ *
+ * @covers ::wp_prime_option_caches
+ */
+class Tests_Option_WpPrimeOptionCaches extends WP_UnitTestCase {
+
+	/**
+	 * Tests that wp_prime_option_caches() primes multiple options.
+	 *
+	 * @ticket 58962
+	 */
+	public function test_wp_prime_option_caches() {
+		// Create some options to prime.
+		$options_to_prime = array(
+			'option1',
+			'option2',
+			'option3',
+		);
+
+		/*
+		 * Set values for the options,
+		 * clear the cache for the options,
+		 * check options are not in cache initially.
+		 */
+		foreach ( $options_to_prime as $option ) {
+			update_option( $option, "value_$option", false );
+			wp_cache_delete( $option, 'options' );
+			$this->assertFalse( wp_cache_get( $option, 'options' ), "$option was not deleted from the cache." );
+		}
+
+		// Call the wp_prime_option_caches function to prime the options.
+		wp_prime_option_caches( $options_to_prime );
+
+		// Store the initial database query count.
+		$initial_query_count = get_num_queries();
+
+		// Check that options are only in the 'options' cache group.
+		foreach ( $options_to_prime as $option ) {
+			$this->assertSame(
+				"value_$option",
+				wp_cache_get( $option, 'options' ),
+				"$option was not primed in the 'options' cache group."
+			);
+
+			$new_notoptions = wp_cache_get( $option, 'notoptions' );
+			if ( ! is_array( $new_notoptions ) ) {
+				$new_notoptions = array();
+			}
+			$this->assertArrayNotHasKey(
+				$option,
+				$new_notoptions,
+				"$option was primed in the 'notoptions' cache."
+			);
+		}
+
+		// Ensure no additional database queries were made.
+		$this->assertSame(
+			$initial_query_count,
+			get_num_queries(),
+			'Additional database queries were made.'
+		);
+	}
+
+	/**
+	 * Tests that wp_prime_option_caches() handles a mix of primed and unprimed options.
+	 *
+	 * @ticket 58962
+	 */
+	public function test_wp_prime_option_caches_handles_a_mix_of_primed_and_unprimed_options() {
+		global $wpdb;
+		// Create some options to prime.
+		$options_to_prime = array(
+			'option1',
+			'option2',
+			'option3',
+		);
+
+		/*
+		 * Set values for the options,
+		 * clear the cache for the options,
+		 * check options are not in cache initially.
+		 */
+		foreach ( $options_to_prime as $option ) {
+			update_option( $option, "value_$option", false );
+			wp_cache_delete( $option, 'options' );
+			$this->assertFalse( wp_cache_get( $option, 'options' ), "$option was not deleted from the cache." );
+		}
+
+		// Add non-existent option to the options to prime.
+		$options_to_prime[] = 'option404notfound';
+
+		// Prime the first option with a non-existent option.
+		wp_prime_option_caches( array( 'option1', 'option404notfound' ) );
+
+		// Store the initial database query count.
+		$initial_query_count = get_num_queries();
+
+		// Prime all the options, including the pre-primed option.
+		wp_prime_option_caches( $options_to_prime );
+
+		// Ensure an additional database query was made.
+		$this->assertSame(
+			1,
+			get_num_queries() - $initial_query_count,
+			'Additional database queries were not made.'
+		);
+
+		// Ensure the last query does not contain the pre-primed option.
+		$this->assertStringNotContainsString(
+			"\'option1\'",
+			$wpdb->last_query,
+			'The last query should not contain the pre-primed option.'
+		);
+
+		// Ensure the last query does not contain the pre-primed notoption.
+		$this->assertStringNotContainsString(
+			"\'option404notfound\'",
+			$wpdb->last_query,
+			'The last query should not contain the pre-primed non-existent option.'
+		);
+	}
+
+	/**
+	 * Tests wp_prime_option_caches() with options that do not exist in the database.
+	 *
+	 * @ticket 58962
+	 * @ticket 59738
+	 */
+	public function test_wp_prime_option_caches_with_nonexistent_options() {
+		// Create some options to prime.
+		$options_to_prime = array(
+			'option1',
+			'option2',
+		);
+
+		/*
+		 * Set values for the options,
+		 * clear the cache for the options,
+		 * check options are not in cache initially.
+		 */
+		foreach ( $options_to_prime as $option ) {
+			$this->assertFalse( wp_cache_get( $option, 'options' ), "$option was not deleted from the cache." );
+		}
+
+		// Call the wp_prime_option_caches function to prime the options.
+		wp_prime_option_caches( $options_to_prime );
+
+		// Check that options are not in the cache or database.
+		foreach ( $options_to_prime as $option ) {
+			$this->assertFalse( wp_cache_get( $option, 'options' ), "$option was not deleted from the cache." );
+		}
+
+		// Check that options are present in the notoptions cache.
+		$new_notoptions = wp_cache_get( 'notoptions', 'options' );
+		$this->assertIsArray( $new_notoptions, 'The notoptions cache should be an array.' );
+		foreach ( $options_to_prime as $option ) {
+			$this->assertArrayHasKey( $option, $new_notoptions, "$option was not added to the notoptions cache." );
+		}
+
+		// Check getting and re-priming the options does not result in additional database queries.
+		$initial_query_count = get_num_queries();
+		foreach ( $options_to_prime as $option ) {
+			get_option( $option );
+			$this->assertSame(
+				0,
+				get_num_queries() - $initial_query_count,
+				"Additional database queries were made getting option $option."
+			);
+		}
+
+		wp_prime_option_caches( $options_to_prime );
+		$this->assertSame(
+			0,
+			get_num_queries() - $initial_query_count,
+			'Additional database queries were made re-priming the options.'
+		);
+	}
+
+	/**
+	 * Tests wp_prime_option_caches() with an empty array.
+	 *
+	 * @ticket 58962
+	 * @ticket 59738
+	 */
+	public function test_wp_prime_option_caches_with_empty_array() {
+		$alloptions = wp_load_alloptions();
+		$notoptions = wp_cache_get( 'notoptions', 'options' );
+
+		$initial_query_count = get_num_queries();
+		wp_prime_option_caches( array() );
+
+		$this->assertSame( $alloptions, wp_cache_get( 'alloptions', 'options' ), 'The alloptions cache was modified.' );
+		$this->assertSame( $notoptions, wp_cache_get( 'notoptions', 'options' ), 'The notoptions cache was modified.' );
+
+		// Check priming an empty array does not result in additional database queries.
+		$this->assertSame(
+			0,
+			get_num_queries() - $initial_query_count,
+			'Additional database queries were made.'
+		);
+	}
+
+	/**
+	 * Tests that wp_prime_option_caches() handles an empty "notoptions" cache.
+	 *
+	 * @ticket 58962
+	 * @ticket 59738
+	 */
+	public function test_wp_prime_option_caches_handles_empty_notoptions_cache() {
+		wp_cache_delete( 'notoptions', 'options' );
+
+		wp_prime_option_caches( array( 'nonexistent_option' ) );
+
+		$notoptions = wp_cache_get( 'notoptions', 'options' );
+		$this->assertIsArray( $notoptions, 'The notoptions cache should be an array.' );
+		$this->assertArrayHasKey( 'nonexistent_option', $notoptions, 'nonexistent_option was not added to notoptions.' );
+
+		// Check getting and re-priming the options does not result in additional database queries.
+		$initial_query_count = get_num_queries();
+
+		get_option( 'nonexistent_option' );
+		$this->assertSame(
+			0,
+			get_num_queries() - $initial_query_count,
+			'Additional database queries were made getting nonexistent_option.'
+		);
+
+		wp_prime_option_caches( array( 'nonexistent_option' ) );
+		$this->assertSame(
+			0,
+			get_num_queries() - $initial_query_count,
+			'Additional database queries were made.'
+		);
+	}
+
+	/**
+	 * Test options primed by the wp_prime_option_caches() function are identical to those primed by get_option().
+	 *
+	 * @ticket 59738
+	 *
+	 * @dataProvider data_option_types
+	 *
+	 * @param mixed $option_value An option value.
+	 */
+	public function test_get_option_should_return_identical_value_when_pre_primed_by_wp_prime_option_caches( $option_value ) {
+		// As this includes a test setting the value to `(bool) false`, update_option() can not be used so add_option() is used instead.
+		add_option( 'type_of_option', $option_value, '', false );
+		wp_cache_delete( 'type_of_option', 'options' );
+
+		$this->assertFalse( wp_cache_get( 'type_of_option', 'options' ), 'type_of_option was not deleted from the cache for priming.' );
+
+		// Call the wp_prime_option_caches function to prime the options.
+		wp_prime_option_caches( array( 'type_of_option' ) );
+		$value_after_pre_priming = get_option( 'type_of_option' );
+
+		// Clear the cache and call get_option directly.
+		wp_cache_delete( 'type_of_option', 'options' );
+		$this->assertFalse( wp_cache_get( 'type_of_option', 'options' ), 'type_of_option was not deleted from the cache for get_option.' );
+		$value_after_get_option = get_option( 'type_of_option' );
+
+		/*
+		 * If the option value is an object, use assertEquals() to compare the values.
+		 *
+		 * This is to compare the shape of the object rather than the identity of the object.
+		 */
+		if ( is_object( $option_value ) ) {
+			$this->assertEquals( $value_after_get_option, $value_after_pre_priming, 'The values should be equal.' );
+		} else {
+			$this->assertSame( $value_after_get_option, $value_after_pre_priming, 'The values should be identical.' );
+		}
+	}
+
+	/**
+	 * Tests that wp_prime_option_caches() shapes the cache in the same fashion as get_option()
+	 *
+	 * @ticket 59738
+	 *
+	 * @dataProvider data_option_types
+	 *
+	 * @param mixed $option_value An option value.
+	 */
+	public function test_wp_prime_option_caches_cache_should_be_identical_to_get_option_cache( $option_value ) {
+		// As this includes a test setting the value to `(bool) false`, update_option() can not be used so add_option() is used instead.
+		add_option( 'type_of_option', $option_value, '', false );
+		wp_cache_delete( 'type_of_option', 'options' );
+
+		$this->assertFalse( wp_cache_get( 'type_of_option', 'options' ), 'type_of_option was not deleted from the cache for wp_prime_option_caches().' );
+
+		// Call the wp_prime_option_caches function to prime the options.
+		wp_prime_option_caches( array( 'type_of_option' ) );
+		$value_from_priming = wp_cache_get( 'type_of_option', 'options' );
+
+		wp_cache_delete( 'type_of_option', 'options' );
+		$this->assertFalse( wp_cache_get( 'type_of_option', 'options' ), 'type_of_option was not deleted from the cache for get_option().' );
+
+		// Call get_option() to prime the options.
+		get_option( 'type_of_option' );
+		$value_from_get_option = wp_cache_get( 'type_of_option', 'options' );
+
+		$this->assertIsString( $value_from_get_option, 'Cache from get_option() should always be a string' );
+		$this->assertIsString( $value_from_priming, 'Cache from wp_prime_option_caches() should always be a string' );
+		$this->assertSame( $value_from_get_option, $value_from_priming, 'The values should be identical.' );
+	}
+
+	/**
+	 * Tests that wp_prime_option_caches() doesn't trigger DB queries on already primed options.
+	 *
+	 * @ticket 59738
+	 *
+	 * @dataProvider data_option_types
+	 *
+	 * @param mixed $option_value An option value.
+	 */
+	public function test_wp_prime_option_caches_does_not_trigger_db_queries_repriming_options( $option_value ) {
+		// As this includes a test setting the value to `(bool) false`, update_option() can not be used so add_option() is used instead.
+		add_option( 'double_primed_option', $option_value, '', false );
+		wp_cache_delete( 'double_primed_option', 'options' );
+		$options_to_prime = array( 'double_primed_option' );
+
+		$this->assertFalse( wp_cache_get( 'double_primed_option', 'options' ), 'double_primed_option was not deleted from the cache.' );
+
+		// Call the wp_prime_option_caches function to prime the options.
+		wp_prime_option_caches( $options_to_prime );
+
+		// Store the initial database query count.
+		$initial_query_count = get_num_queries();
+
+		// Check that options are only in the 'options' cache group.
+		foreach ( $options_to_prime as $option ) {
+			$this->assertNotFalse(
+				wp_cache_get( $option, 'options' ),
+				"$option was not primed in the 'options' cache group."
+			);
+
+			$new_notoptions = wp_cache_get( $option, 'notoptions' );
+			if ( ! is_array( $new_notoptions ) ) {
+				$new_notoptions = array();
+			}
+			$this->assertArrayNotHasKey(
+				$option,
+				$new_notoptions,
+				"$option was primed in the 'notoptions' cache."
+			);
+		}
+
+		// Call the wp_prime_option_caches function to prime the options.
+		wp_prime_option_caches( $options_to_prime );
+
+		// Ensure no additional database queries were made.
+		$this->assertSame(
+			$initial_query_count,
+			get_num_queries(),
+			'Additional database queries were made.'
+		);
+	}
+
+	/**
+	 * Tests that wp_prime_option_caches() doesn't trigger DB queries for items primed in alloptions.
+	 *
+	 * @ticket 59738
+	 *
+	 * @dataProvider data_option_types
+	 *
+	 * @param mixed $option_value An option value.
+	 */
+	public function test_wp_prime_option_caches_does_not_trigger_db_queries_for_alloptions( $option_value ) {
+		// As this includes a test setting the value to `(bool) false`, update_option() can not be used so add_option() is used instead.
+		add_option( 'option_in_alloptions', $option_value, '', true );
+		wp_cache_delete( 'alloptions', 'options' );
+		wp_cache_delete( 'option_in_alloptions', 'options' );
+		$options_to_prime = array( 'option_in_alloptions' );
+
+		$this->assertFalse( wp_cache_get( 'option_in_alloptions', 'options' ), 'option_in_alloptions was not deleted from the cache.' );
+		$this->assertFalse( wp_cache_get( 'alloptions', 'options' ), 'alloptions was not deleted from the cache.' );
+
+		// Prime the alloptions cache.
+		wp_load_alloptions();
+
+		// Store the initial database query count.
+		$initial_query_count = get_num_queries();
+
+		// Call the wp_prime_option_caches function to reprime the option.
+		wp_prime_option_caches( $options_to_prime );
+
+		// Check that options are in the 'alloptions' cache only.
+		foreach ( $options_to_prime as $option ) {
+			$this->assertFalse(
+				wp_cache_get( $option, 'options' ),
+				"$option was primed in the 'options' cache group."
+			);
+
+			$new_notoptions = wp_cache_get( $option, 'notoptions' );
+			if ( ! is_array( $new_notoptions ) ) {
+				$new_notoptions = array();
+			}
+			$this->assertArrayNotHasKey(
+				$option,
+				$new_notoptions,
+				"$option was primed in the 'notoptions' cache."
+			);
+
+			$new_alloptions = wp_cache_get( 'alloptions', 'options' );
+			if ( ! is_array( $new_alloptions ) ) {
+				$new_alloptions = array();
+			}
+			$this->assertArrayHasKey(
+				$option,
+				$new_alloptions,
+				"$option was not primed in the 'alloptions' cache."
+			);
+		}
+
+		// Ensure no additional database queries were made.
+		$this->assertSame(
+			0,
+			get_num_queries() - $initial_query_count,
+			'Additional database queries were made.'
+		);
+	}
+
+	/**
+	 * Data provider.
+	 *
+	 * @return array[]
+	 */
+	public function data_option_types() {
+		return array(
+			'null'                              => array( null ),
+			'(bool) false'                      => array( false ),
+			'(bool) true'                       => array( true ),
+			'(int) 0'                           => array( 0 ),
+			'(int) -0'                          => array( -0 ),
+			'(int) 1'                           => array( 1 ),
+			'(int) -1'                          => array( -1 ),
+			'(float) 0.0'                       => array( 0.0 ),
+			'(float) -0.0'                      => array( -0.0 ),
+			'(float) 1.0'                       => array( 1.0 ),
+			'empty string'                      => array( '' ),
+			'string with only tabs'             => array( "\t\t" ),
+			'string with only newlines'         => array( "\n\n" ),
+			'string with only carriage returns' => array( "\r\r" ),
+			'string with only spaces'           => array( '   ' ),
+			'populated string'                  => array( 'string' ),
+			'string (1)'                        => array( '1' ),
+			'string (0)'                        => array( '0' ),
+			'string (0.0)'                      => array( '0.0' ),
+			'string (-0)'                       => array( '-0' ),
+			'string (-0.0)'                     => array( '-0.0' ),
+			'empty array'                       => array( array() ),
+			'populated array'                   => array( array( 'string' ) ),
+			'empty object'                      => array( new stdClass() ),
+			'populated object'                  => array( (object) array( 'string' ) ),
+			'INF'                               => array( INF ),
+			'NAN'                               => array( NAN ),
+		);
+	}
+}
diff --git a/tests/option/primeOptionsByGroup.php b/tests/option/wpPrimeOptionCachesByGroup.php
similarity index 54%
rename from tests/option/primeOptionsByGroup.php
rename to tests/option/wpPrimeOptionCachesByGroup.php
index 9d6819664c..33ba6bc07d 100644
--- a/tests/option/primeOptionsByGroup.php
+++ b/tests/option/wpPrimeOptionCachesByGroup.php
@@ -1,19 +1,19 @@
 <?php
 /**
- * Test prime_options_by_group().
+ * Test wp_prime_option_caches_by_group().
  *
  * @group option
  *
- * @covers ::prime_options_by_group
+ * @covers ::wp_prime_option_caches_by_group
  */
-class Tests_Option_PrimeOptionsByGroup extends WP_UnitTestCase {
+class Tests_Option_WpPrimeOptionCachesByGroup extends WP_UnitTestCase {
 
 	/**
-	 * Tests that prime_options_by_group() only primes options in the specified group.
+	 * Tests that wp_prime_option_caches_by_group() only primes options in the specified group.
 	 *
 	 * @ticket 58962
 	 */
-	public function test_prime_options_by_group() {
+	public function test_wp_prime_option_caches_by_group() {
 		global $new_allowed_options;
 
 		// Create some options to prime.
@@ -44,29 +44,36 @@ class Tests_Option_PrimeOptionsByGroup extends WP_UnitTestCase {
 			$this->assertFalse( wp_cache_get( $option, 'options' ), "$option was not deleted from the cache." );
 		}
 
-		// Call the prime_options_by_group function to prime the options.
-		prime_options_by_group( 'group1' );
+		// Call the wp_prime_option_caches_by_group function to prime the options.
+		wp_prime_option_caches_by_group( 'group1' );
 
-		// Check that options are now in the cache.
-		$this->assertSame( get_option( 'option1' ), wp_cache_get( 'option1', 'options' ), 'option1 was not primed.' );
-		$this->assertSame( get_option( 'option2' ), wp_cache_get( 'option2', 'options' ), 'option2 was not primed.' );
+		/*
+		 * Check that options are now in the cache.
+		 *
+		 * Repeat the string here rather than using get_option as get_option
+		 * will prime the cache before the call to wp_cache_get if the option
+		 * is not in the cache. Thus causing the tests to pass when they should
+		 * fail.
+		 */
+		$this->assertSame( 'value_option1', wp_cache_get( 'option1', 'options' ), 'option1\'s cache was not primed.' );
+		$this->assertSame( 'value_option2', wp_cache_get( 'option2', 'options' ), 'option2\'s cache was not primed.' );
 
 		// Make sure option3 is still not in cache.
 		$this->assertFalse( wp_cache_get( 'option3', 'options' ), 'option3 was not deleted from the cache.' );
 	}
 
 	/**
-	 * Tests prime_options_by_group() with a nonexistent option group.
+	 * Tests wp_prime_option_caches_by_group() with a nonexistent option group.
 	 *
 	 * @ticket 58962
 	 */
-	public function test_prime_options_by_group_with_nonexistent_group() {
+	public function test_wp_prime_option_caches_by_group_with_nonexistent_group() {
 		// Make sure options are not in cache or database initially.
 		$this->assertFalse( wp_cache_get( 'option1', 'options' ), 'option1 was not deleted from the cache.' );
 		$this->assertFalse( wp_cache_get( 'option2', 'options' ), 'option2 was not deleted from the cache.' );
 
-		// Call the prime_options_by_group function with a nonexistent group.
-		prime_options_by_group( 'nonexistent_group' );
+		// Call the wp_prime_option_caches_by_group function with a nonexistent group.
+		wp_prime_option_caches_by_group( 'nonexistent_group' );
 
 		// Check that options are still not in the cache or database.
 		$this->assertFalse( wp_cache_get( 'option1', 'options' ), 'option1 was not deleted from the cache.' );
diff --git a/tests/post.php b/tests/post.php
index 548c5eb2ca..6e0207add2 100644
--- a/tests/post.php
+++ b/tests/post.php
@@ -329,12 +329,12 @@ class Tests_Post extends WP_UnitTestCase {
 		);
 		stick_post( $post->ID );
 
-		// Sanity check.
+		// Confidence check.
 		$this->assertTrue( is_sticky( $post->ID ) );
 
 		wp_set_current_user( self::$grammarian_id );
 
-		// Sanity check.
+		// Confidence check.
 		$this->assertFalse( current_user_can( 'publish_posts' ) );
 		$this->assertTrue( current_user_can( 'edit_others_posts' ) );
 		$this->assertTrue( current_user_can( 'edit_published_posts' ) );
@@ -367,12 +367,12 @@ class Tests_Post extends WP_UnitTestCase {
 		);
 		stick_post( $post->ID );
 
-		// Sanity check.
+		// Confidence check.
 		$this->assertTrue( is_sticky( $post->ID ) );
 
 		wp_set_current_user( self::$grammarian_id );
 
-		// Sanity check.
+		// Confidence check.
 		$this->assertFalse( current_user_can( 'publish_posts' ) );
 		$this->assertTrue( current_user_can( 'edit_others_posts' ) );
 		$this->assertTrue( current_user_can( 'edit_published_posts' ) );
diff --git a/tests/post/metaRevisions.php b/tests/post/metaRevisions.php
index 74442b53c8..a387678c34 100644
--- a/tests/post/metaRevisions.php
+++ b/tests/post/metaRevisions.php
@@ -9,7 +9,7 @@
  * @group meta
  * @group meta-revisions
  */
-class MetaRevisionTests extends WP_UnitTestCase {
+class Tests_Post_MetaRevisions extends WP_UnitTestCase {
 
 	/**
 	 * Callback function to add the revisioned keys.
@@ -50,7 +50,7 @@ class MetaRevisionTests extends WP_UnitTestCase {
 
 		// Store a custom meta value, which is not revisioned by default.
 		update_post_meta( $post_id, 'meta_revision_test', wp_slash( $passed ) );
-		$this->assertEquals( $expected, get_post_meta( $post_id, 'meta_revision_test', true ) );
+		$this->assertSame( $expected, get_post_meta( $post_id, 'meta_revision_test', true ) );
 
 		// Update the post, storing a revision.
 		wp_update_post(
@@ -80,7 +80,7 @@ class MetaRevisionTests extends WP_UnitTestCase {
 		// Restore!
 		wp_restore_post_revision( $last_revision->ID );
 
-		$this->assertEquals( $expected, get_post_meta( $post_id, 'meta_revision_test', true ) );
+		$this->assertSame( $expected, get_post_meta( $post_id, 'meta_revision_test', true ) );
 	}
 
 	/**
@@ -188,7 +188,7 @@ class MetaRevisionTests extends WP_UnitTestCase {
 		 */
 
 		// Custom post meta should NOT be restored, orignal value should not be restored, value still 'update1'.
-		$this->assertEquals( 'update1', get_post_meta( $post_id, 'meta_revision_test', true ) );
+		$this->assertSame( 'update1', get_post_meta( $post_id, 'meta_revision_test', true ) );
 
 		update_post_meta( $post_id, 'meta_revision_test', 'update2' );
 
@@ -209,7 +209,7 @@ class MetaRevisionTests extends WP_UnitTestCase {
 
 		$revisions = array_values( wp_get_post_revisions( $post_id ) );
 		$this->assertCount( 5, $revisions );
-		$this->assertEquals( 'update2', get_post_meta( $revisions[0]->ID, 'meta_revision_test', true ) );
+		$this->assertSame( 'update2', get_post_meta( $revisions[0]->ID, 'meta_revision_test', true ) );
 
 		// Store custom meta values, which should now be revisioned.
 		update_post_meta( $post_id, 'meta_revision_test', 'update3' );
@@ -231,7 +231,7 @@ class MetaRevisionTests extends WP_UnitTestCase {
 		$this->assertCount( 6, $revisions );
 
 		// Verify that previous post meta is set.
-		$this->assertEquals( 'update3', get_post_meta( $post_id, 'meta_revision_test', true ) );
+		$this->assertSame( 'update3', get_post_meta( $post_id, 'meta_revision_test', true ) );
 
 		// Restore the previous revision.
 		$revisions = wp_get_post_revisions( $post_id );
@@ -244,7 +244,7 @@ class MetaRevisionTests extends WP_UnitTestCase {
 		/*
 		 * Verify that previous post meta is restored.
 		 */
-		$this->assertEquals( 'update2', get_post_meta( $post_id, 'meta_revision_test', true ) );
+		$this->assertSame( 'update2', get_post_meta( $post_id, 'meta_revision_test', true ) );
 
 		// Try storing a blank meta.
 		update_post_meta( $post_id, 'meta_revision_test', '' );
@@ -270,7 +270,7 @@ class MetaRevisionTests extends WP_UnitTestCase {
 		/*
 		 * Verify that previous blank post meta is restored.
 		 */
-		$this->assertEquals( '', get_post_meta( $post_id, 'meta_revision_test', true ) );
+		$this->assertSame( '', get_post_meta( $post_id, 'meta_revision_test', true ) );
 
 		/*
 		 * Test not tracking a key - remove the key from the revisioned meta.
@@ -302,7 +302,7 @@ class MetaRevisionTests extends WP_UnitTestCase {
 		/*
 		 * Verify that previous post meta is NOT restored.
 		 */
-		$this->assertEquals( 'update 6', get_post_meta( $post_id, 'meta_revision_test', true ) );
+		$this->assertSame( 'update 6', get_post_meta( $post_id, 'meta_revision_test', true ) );
 
 		// Add the custom field to be revised via the wp_post_revision_meta_keys filter.
 		add_filter( 'wp_post_revision_meta_keys', array( $this, 'add_revisioned_keys' ) );
@@ -330,7 +330,7 @@ class MetaRevisionTests extends WP_UnitTestCase {
 		/*
 		 * Verify that multiple metas stored correctly.
 		 */
-		$this->assertEquals( array( 'update 7', 'update 7 number 2', 'update 7 number 3' ), get_post_meta( $post_id, 'meta_revision_test' ) );
+		$this->assertSame( array( 'update 7', 'update 7 number 2', 'update 7 number 3' ), get_post_meta( $post_id, 'meta_revision_test' ) );
 
 		/*
 		 * Test the revisioning of a multidimensional array.
@@ -373,7 +373,7 @@ class MetaRevisionTests extends WP_UnitTestCase {
 		 * Verify  multidimensional array stored correctly.
 		 */
 		$stored_array = get_post_meta( $post_id, 'meta_revision_test' );
-		$this->assertEquals( $test_array, $stored_array[0] );
+		$this->assertSame( $test_array, $stored_array[0] );
 		/*
 
 		 * Test multiple revisions on the same key.
@@ -390,7 +390,7 @@ class MetaRevisionTests extends WP_UnitTestCase {
 		$stored_array = get_post_meta( $post_id, 'meta_multiples_test' );
 		$expect       = array( 'test1', 'test2', 'test3' );
 
-		$this->assertEquals( $expect, $stored_array );
+		$this->assertSame( $expect, $stored_array );
 
 		// Restore the previous revision.
 		$revisions     = wp_get_post_revisions( $post_id );
@@ -400,7 +400,7 @@ class MetaRevisionTests extends WP_UnitTestCase {
 		$stored_array = get_post_meta( $post_id, 'meta_multiples_test' );
 		$expect       = array( 'test1', 'test2', 'test3' );
 
-		$this->assertEquals( $expect, $stored_array );
+		$this->assertSame( $expect, $stored_array );
 
 		// Cleanup!
 		wp_delete_post( $original_post_id );
@@ -482,14 +482,14 @@ class MetaRevisionTests extends WP_UnitTestCase {
 		$stored_array = get_post_meta( $post_id, 'meta_multiples_test' );
 		$expect       = array( 'test1', 'test2', 'test3' );
 
-		$this->assertEquals( $expect, $stored_array );
+		$this->assertSame( $expect, $stored_array );
 
 		// Restore the previous revision.
 		$revisions     = wp_get_post_revisions( $post_id );
 		$last_revision = array_shift( $revisions );
 		wp_restore_post_revision( $last_revision->ID );
 		$stored_data = get_post_meta( $post_id, 'foo' );
-		$this->assertEquals( '', $stored_data[0] );
+		$this->assertSame( '', $stored_data[0] );
 	}
 
 	/**
@@ -526,13 +526,13 @@ class MetaRevisionTests extends WP_UnitTestCase {
 
 		// Check that the meta is blank.
 		$stored_data = get_post_meta( $post_id, 'meta_revision_test', true );
-		$this->assertEquals( '', $stored_data );
+		$this->assertSame( '', $stored_data );
 
 		// Also verify that the latest revision has blank stored for the meta.
 		$revisions     = wp_get_post_revisions( $post_id );
 		$last_revision = array_shift( $revisions );
 		$stored_data   = get_post_meta( $last_revision->ID, 'meta_revision_test', true );
-		$this->assertEquals( '', $stored_data );
+		$this->assertSame( '', $stored_data );
 
 		// Delete the meta.
 		delete_post_meta( $post_id, 'meta_revision_test' );
@@ -546,14 +546,14 @@ class MetaRevisionTests extends WP_UnitTestCase {
 		);
 
 		// Check that the default meta value is returned.
-		$this->assertEquals( 'default value', get_post_meta( $post_id, 'meta_revision_test', true ) );
+		$this->assertSame( 'default value', get_post_meta( $post_id, 'meta_revision_test', true ) );
 
 		// Also verify that the latest revision has the default value returned for the meta.
 		$revisions     = wp_get_post_revisions( $post_id );
 		$last_revision = array_shift( $revisions );
 
 		// No ,eta data should be stored in the revision.
-		$this->assertEquals( array(), get_post_meta( $last_revision->ID ) );
+		$this->assertSame( array(), get_post_meta( $last_revision->ID ) );
 
 		// Set the test meta again.
 		update_post_meta( $post_id, 'meta_revision_test', 'test' );
@@ -565,7 +565,7 @@ class MetaRevisionTests extends WP_UnitTestCase {
 		wp_restore_post_revision( $last_revision->ID );
 
 		// Verify the default meta value is still returned.
-		$this->assertEquals( 'default value', get_post_meta( $post_id, 'meta_revision_test', true ) );
+		$this->assertSame( 'default value', get_post_meta( $post_id, 'meta_revision_test', true ) );
 	}
 
 	/**
@@ -598,7 +598,7 @@ class MetaRevisionTests extends WP_UnitTestCase {
 		$revisions       = wp_get_post_revisions( $post_id );
 		$revision        = array_shift( $revisions );
 		$revisioned_meta = get_post_meta( $revision->ID, $meta_key, true );
-		$this->assertEquals( $expected_is_revisioned, 'bar' === $revisioned_meta );
+		$this->assertSame( $expected_is_revisioned, 'bar' === $revisioned_meta );
 
 		// Reset global so subsequent data tests do not get polluted.
 		$GLOBALS['wp_meta_keys'] = array();
@@ -690,7 +690,7 @@ class MetaRevisionTests extends WP_UnitTestCase {
 			// Go back to load the previous revision.
 			$last_revision = array_shift( $revisions );
 				wp_restore_post_revision( $last_revision->ID );
-			$this->assertEquals( $expected, get_post_meta( $page_id, 'meta_revision_test', true ) );
+			$this->assertSame( $expected, get_post_meta( $page_id, 'meta_revision_test', true ) );
 		} else {
 			$this->assertEmpty( $revisions );
 		}
diff --git a/tests/post/primePostParentsCaches.php b/tests/post/primePostParentsCaches.php
new file mode 100644
index 0000000000..1379aa4afb
--- /dev/null
+++ b/tests/post/primePostParentsCaches.php
@@ -0,0 +1,138 @@
+<?php
+/**
+ * Test `_prime_post_parent_id_caches()`.
+ *
+ * @package WordPress
+ */
+
+/**
+ * Test class for `_prime_post_parent_id_caches()`.
+ *
+ * @group post
+ * @group cache
+ *
+ * @covers ::_prime_post_parent_id_caches
+ */
+class Tests_Post_PrimePostParentIdCaches extends WP_UnitTestCase {
+
+	/**
+	 * Post IDs.
+	 *
+	 * @var int[]
+	 */
+	public static $posts;
+
+	/**
+	 * Set up test resources before the class.
+	 *
+	 * @param WP_UnitTest_Factory $factory The unit test factory.
+	 */
+	public static function wpSetupBeforeClass( WP_UnitTest_Factory $factory ) {
+		self::$posts = $factory->post->create_many( 3 );
+	}
+
+	/**
+	 * @ticket 59188
+	 */
+	public function test_prime_post_parent_id_caches() {
+		$post_id = self::$posts[0];
+
+		$before_num_queries = get_num_queries();
+		_prime_post_parent_id_caches( array( $post_id ) );
+		$num_queries = get_num_queries() - $before_num_queries;
+
+		$this->assertSame( 1, $num_queries, 'Unexpected number of queries.' );
+		$this->assertSameSets( array( 0 ), wp_cache_get_multiple( array( "post_parent:{$post_id}" ), 'posts' ), 'Array of parent ids' );
+	}
+
+	/**
+	 * @ticket 59188
+	 */
+	public function test_prime_post_parent_id_caches_multiple() {
+		$before_num_queries = get_num_queries();
+		_prime_post_parent_id_caches( self::$posts );
+		$num_queries = get_num_queries() - $before_num_queries;
+
+		$cache_keys = array_map(
+			function ( $post_id ) {
+				return "post_parent:{$post_id}";
+			},
+			self::$posts
+		);
+
+		$this->assertSame( 1, $num_queries, 'Unexpected number of queries.' );
+		$this->assertSameSets( array( 0, 0, 0 ), wp_cache_get_multiple( $cache_keys, 'posts' ), 'Array of parent ids' );
+	}
+
+	/**
+	 * @ticket 59188
+	 */
+	public function test_prime_post_parent_id_caches_multiple_runs() {
+		_prime_post_parent_id_caches( self::$posts );
+		$before_num_queries = get_num_queries();
+		_prime_post_parent_id_caches( self::$posts );
+		$num_queries = get_num_queries() - $before_num_queries;
+
+		$this->assertSame( 0, $num_queries, 'Unexpected number of queries.' );
+	}
+
+	/**
+	 * @ticket 59188
+	 */
+	public function test_prime_post_parent_id_caches_update() {
+		$page_id            = self::factory()->post->create(
+			array(
+				'post_type'   => 'page',
+				'post_parent' => self::$posts[0],
+			)
+		);
+		$before_num_queries = get_num_queries();
+		_prime_post_parent_id_caches( array( $page_id ) );
+		$num_queries = get_num_queries() - $before_num_queries;
+
+		$this->assertSame( 1, $num_queries, 'Unexpected number of queries on first run' );
+		$this->assertSameSets( array( self::$posts[0] ), wp_cache_get_multiple( array( "post_parent:{$page_id}" ), 'posts' ), 'Array of parent ids with post 0 as parent' );
+
+		wp_update_post(
+			array(
+				'ID'          => $page_id,
+				'post_parent' => self::$posts[1],
+			)
+		);
+
+		$before_num_queries = get_num_queries();
+		_prime_post_parent_id_caches( array( $page_id ) );
+		$num_queries = get_num_queries() - $before_num_queries;
+
+		$this->assertSame( 1, $num_queries, 'Unexpected number of queries on second run' );
+		$this->assertSameSets( array( self::$posts[1] ), wp_cache_get_multiple( array( "post_parent:{$page_id}" ), 'posts' ), 'Array of parent ids with post 1 as parent' );
+	}
+
+	/**
+	 * @ticket 59188
+	 */
+	public function test_prime_post_parent_id_caches_delete() {
+		$parent_page_id     = self::factory()->post->create(
+			array(
+				'post_type' => 'page',
+			)
+		);
+		$page_id            = self::factory()->post->create(
+			array(
+				'post_type'   => 'page',
+				'post_parent' => $parent_page_id,
+			)
+		);
+		$before_num_queries = get_num_queries();
+		_prime_post_parent_id_caches( array( $page_id ) );
+		$num_queries = get_num_queries() - $before_num_queries;
+
+		$this->assertSame( 1, $num_queries, 'Unexpected number of queries on first run' );
+		$this->assertSameSets( array( $parent_page_id ), wp_cache_get_multiple( array( "post_parent:{$page_id}" ), 'posts' ), 'Array of parent ids with post 0 as parent' );
+
+		wp_delete_post( $parent_page_id, true );
+
+		$this->assertSame( 1, $num_queries, 'Unexpected number of queries on second run' );
+		$this->assertSameSets( array( false ), wp_cache_get_multiple( array( "post_parent:{$page_id}" ), 'posts' ), 'Array of parent ids with false values' );
+	}
+}
diff --git a/tests/post/query.php b/tests/post/query.php
index 9c118cbb9e..941b6db7fd 100644
--- a/tests/post/query.php
+++ b/tests/post/query.php
@@ -631,7 +631,7 @@ class Tests_Post_Query extends WP_UnitTestCase {
 		);
 
 		$this->assertSame( 2, $q->found_posts );
-		$this->assertEquals( 2, $q->max_num_pages );
+		$this->assertSame( 2, $q->max_num_pages );
 	}
 
 	/**
@@ -654,7 +654,7 @@ class Tests_Post_Query extends WP_UnitTestCase {
 		);
 
 		$this->assertSame( 2, $q->found_posts );
-		$this->assertEquals( 2, $q->max_num_pages );
+		$this->assertSame( 2, $q->max_num_pages );
 	}
 
 	/**
@@ -680,7 +680,7 @@ class Tests_Post_Query extends WP_UnitTestCase {
 		remove_filter( 'split_the_query', '__return_true' );
 
 		$this->assertSame( 2, $q->found_posts );
-		$this->assertEquals( 2, $q->max_num_pages );
+		$this->assertSame( 2, $q->max_num_pages );
 	}
 
 	/**
@@ -707,7 +707,7 @@ class Tests_Post_Query extends WP_UnitTestCase {
 		remove_filter( 'split_the_query', '__return_false' );
 
 		$this->assertSame( 2, $q->found_posts );
-		$this->assertEquals( 2, $q->max_num_pages );
+		$this->assertSame( 2, $q->max_num_pages );
 	}
 
 	/**
@@ -792,4 +792,38 @@ class Tests_Post_Query extends WP_UnitTestCase {
 
 		$this->assertSame( (bool) wp_using_ext_object_cache(), $filter->get_args()[0][0] );
 	}
+
+	/**
+	 * @ticket 56841
+	 */
+	public function test_query_does_not_have_leading_whitespace() {
+		add_filter( 'split_the_query', '__return_false' );
+
+		$q = new WP_Query(
+			array(
+				'posts_per_page' => 501,
+			)
+		);
+
+		remove_filter( 'split_the_query', '__return_false' );
+
+		$this->assertSame( ltrim( $q->request ), $q->request, 'The query has leading whitespace' );
+	}
+
+	/**
+	 * @ticket 56841
+	 */
+	public function test_query_does_not_have_leading_whitespace_split_the_query() {
+		add_filter( 'split_the_query', '__return_true' );
+
+		$q = new WP_Query(
+			array(
+				'posts_per_page' => 501,
+			)
+		);
+
+		remove_filter( 'split_the_query', '__return_true' );
+
+		$this->assertSame( ltrim( $q->request ), $q->request, 'The query has leading whitespace' );
+	}
 }
diff --git a/tests/post/thumbnails.php b/tests/post/thumbnails.php
index b06ec02570..fbc8b7bc6e 100644
--- a/tests/post/thumbnails.php
+++ b/tests/post/thumbnails.php
@@ -455,7 +455,7 @@ class Tests_Post_Thumbnail_Template extends WP_UnitTestCase {
 	 *
 	 * @ticket 58212
 	 *
-	 * @covers::_wp_post_thumbnail_context_filter
+	 * @covers ::_wp_post_thumbnail_context_filter
 	 */
 	public function test_wp_post_thumbnail_context_filter_should_return_the_post_thumbnail() {
 		$this->assertSame( 'the_post_thumbnail', _wp_post_thumbnail_context_filter( 'wp_get_attachment_image' ) );
diff --git a/tests/post/wpInsertPost.php b/tests/post/wpInsertPost.php
index 1b0838cf06..701a48bdea 100644
--- a/tests/post/wpInsertPost.php
+++ b/tests/post/wpInsertPost.php
@@ -128,7 +128,7 @@ class Tests_Post_wpInsertPost extends WP_UnitTestCase {
 		$this->assertSame( $data['post_content'], $post->post_content );
 		$this->assertSame( $data['post_title'], $post->post_title );
 		$this->assertSame( $data['post_status'], $post->post_status );
-		$this->assertEquals( $data['post_author'], $post->post_author );
+		$this->assertSame( (string) $data['post_author'], $post->post_author );
 
 		// Test cache state.
 		$post_cache = wp_cache_get( $post_id, 'posts' );
@@ -675,7 +675,7 @@ class Tests_Post_wpInsertPost extends WP_UnitTestCase {
 		$this->assertGreaterThan( 0, $post_id );
 
 		$post = get_post( $post_id );
-		$this->assertEquals( self::$user_ids['editor'], $post->post_author );
+		$this->assertSame( (string) self::$user_ids['editor'], $post->post_author );
 		$this->assertSame( $title, $post->post_title );
 	}
 
@@ -787,7 +787,7 @@ class Tests_Post_wpInsertPost extends WP_UnitTestCase {
 	public function test_wp_insert_post_author_zero() {
 		$post_id = self::factory()->post->create( array( 'post_author' => 0 ) );
 
-		$this->assertEquals( 0, get_post( $post_id )->post_author );
+		$this->assertSame( '0', get_post( $post_id )->post_author );
 	}
 
 	/**
@@ -798,7 +798,7 @@ class Tests_Post_wpInsertPost extends WP_UnitTestCase {
 
 		$post_id = self::factory()->post->create( array( 'post_author' => null ) );
 
-		$this->assertEquals( self::$user_ids['editor'], get_post( $post_id )->post_author );
+		$this->assertSame( (string) self::$user_ids['editor'], get_post( $post_id )->post_author );
 	}
 
 	/**
@@ -916,7 +916,7 @@ class Tests_Post_wpInsertPost extends WP_UnitTestCase {
 
 		// Validate that the post has had the default category assigned again.
 		$this->assertCount( 1, $assigned_terms );
-		$this->assertEquals( get_option( 'default_category' ), $assigned_terms[0]->term_id );
+		$this->assertSame( (int) get_option( 'default_category' ), $assigned_terms[0]->term_id );
 	}
 
 	/**
diff --git a/tests/post/wpPostType.php b/tests/post/wpPostType.php
index 8443c804ad..2a8ad42f0a 100644
--- a/tests/post/wpPostType.php
+++ b/tests/post/wpPostType.php
@@ -229,4 +229,214 @@ class Tests_Post_WP_Post_Type extends WP_UnitTestCase {
 
 		$this->assertSame( 3, $action->get_call_count() );
 	}
+
+	/**
+	 * @ticket 56922
+	 *
+	 * @dataProvider data_should_have_correct_custom_revisions_and_autosaves_controllers_properties
+	 *
+	 * @covers WP_Post_Type::set_props
+	 *
+	 * @param string      $property_name           Property name.
+	 * @param string      $property_value          Property value.
+	 * @param string|bool $expected_property_value Expected property value.
+	 */
+	public function test_should_have_correct_custom_revisions_and_autosaves_controllers_properties( $property_name, $property_value, $expected_property_value ) {
+		$properties = null === $property_value ? array() : array( $property_name => $property_value );
+
+		$post_type = new WP_Post_Type( 'test_post_type', $properties );
+
+		$this->assertObjectHasProperty( $property_name, $post_type, "The WP_Post_Type object does not have the expected {$property_name} property." );
+		$this->assertSame(
+			$expected_property_value,
+			$post_type->$property_name,
+			sprintf( 'Expected the property "%s" to have the %s value.', $property_name, var_export( $expected_property_value, true ) )
+		);
+	}
+
+	/**
+	 * Data provider for test_should_allow_to_set_custom_revisions_and_autosaves_controllers_properties.
+	 *
+	 * @return array[] Arguments {
+	 *     @type string $property_name           Property name.
+	 *     @type string $property_value          Property value.
+	 *     @type string|bool $expected_property_value Expected property value.
+	 * }
+	 */
+	public function data_should_have_correct_custom_revisions_and_autosaves_controllers_properties() {
+		return array(
+			'autosave_rest_controller_class property'  => array(
+				'autosave_rest_controller_class',
+				'My_Custom_Template_Autosaves_Controller',
+				'My_Custom_Template_Autosaves_Controller',
+			),
+			'autosave_rest_controller_class property (null value)' => array(
+				'autosave_rest_controller_class',
+				null,
+				false,
+			),
+			'revisions_rest_controller_class property' => array(
+				'revisions_rest_controller_class',
+				'My_Custom_Template_Revisions_Controller',
+				'My_Custom_Template_Revisions_Controller',
+			),
+			'revisions_rest_controller_class property (null value)' => array(
+				'revisions_rest_controller_class',
+				null,
+				false,
+			),
+		);
+	}
+
+	/**
+	 * @ticket 56922
+	 *
+	 * @covers WP_Post_Type::get_revisions_rest_controller
+	 *
+	 * @dataProvider data_get_revisions_rest_controller_should_return_correct_values
+	 *
+	 * @param bool        $show_in_rest                    Enables "show_in_rest" support.
+	 * @param bool        $supports_revisions              Enables revisions support.
+	 * @param string|bool $revisions_rest_controller_class Custom revisions REST controller class.
+	 * @param string|null $expected_value                  Expected value.
+	 */
+	public function test_get_revisions_rest_controller_should_return_correct_values( $show_in_rest, $supports_revisions, $revisions_rest_controller_class, $expected_value ) {
+		$post_type  = 'test_post_type';
+		$properties = array(
+			'show_in_rest'                    => $show_in_rest,
+			'supports'                        => $supports_revisions ? array( 'revisions' ) : array(),
+			'revisions_rest_controller_class' => $revisions_rest_controller_class,
+		);
+		register_post_type( $post_type, $properties );
+		$post_type = get_post_type_object( $post_type );
+
+		$controller = $post_type->get_revisions_rest_controller();
+		if ( $expected_value ) {
+			$this->assertInstanceOf( $expected_value, $controller );
+
+			return;
+		}
+
+		$this->assertSame( $expected_value, $controller );
+	}
+
+	/**
+	 * Data provider for test_get_revisions_rest_controller_should_return_correct_values.
+	 *
+	 * @return array[] Arguments {
+	 *     @type bool             $show_in_rest                    Enables "show_in_rest" support.
+	 *     @type bool             $supports_revisions              Enables revisions support.
+	 *     @type string|bool      $revisions_rest_controller_class Custom revisions REST controller class.
+	 *     @type string|null      $expected_value                  Expected value.
+	 * }
+	 */
+	public function data_get_revisions_rest_controller_should_return_correct_values() {
+		return array(
+			'disable show_in_rest'                => array(
+				false,
+				false,
+				false,
+				null,
+			),
+			'disable revisions support'           => array(
+				true,
+				false,
+				false,
+				null,
+			),
+			'default rest revisions controller'   => array(
+				true,
+				true,
+				false,
+				WP_REST_Revisions_Controller::class,
+			),
+			'incorrect rest revisions controller' => array(
+				true,
+				true,
+				stdClass::class,
+				null,
+			),
+			'correct rest revisions controller'   => array(
+				true,
+				true,
+				WP_REST_Template_Revisions_Controller::class,
+				WP_REST_Template_Revisions_Controller::class,
+			),
+		);
+	}
+
+	/**
+	 * @ticket 56922
+	 *
+	 * @covers WP_Post_Type::get_autosave_rest_controller
+	 *
+	 * @dataProvider data_get_autosave_rest_controller_should_return_correct_values
+	 *
+	 * @param bool        $show_in_rest                   Enables "show_in_rest" support.
+	 * @param string      $post_type                      Post type.
+	 * @param string|bool $autosave_rest_controller_class Custom autosave REST controller class.
+	 * @param string|null $expected_value                 Expected value.
+	 */
+	public function test_get_autosave_rest_controller_should_return_correct_values( $show_in_rest, $post_type, $autosave_rest_controller_class, $expected_value ) {
+		$properties = array(
+			'show_in_rest'                   => $show_in_rest,
+			'autosave_rest_controller_class' => $autosave_rest_controller_class,
+		);
+		register_post_type( $post_type, $properties );
+		$post_type = get_post_type_object( $post_type );
+
+		$controller = $post_type->get_autosave_rest_controller();
+		if ( $expected_value ) {
+			$this->assertInstanceOf( $expected_value, $controller );
+
+			return;
+		}
+
+		$this->assertSame( $expected_value, $controller );
+	}
+
+	/**
+	 * Data provider for test_get_autosave_rest_controller_should_return_correct_values.
+	 *
+	 * @return array[] Arguments {
+	 *     @type bool        $show_in_rest                   Enables "show_in_rest" support.
+	 *     @type string      $post_type                      Post type.
+	 *     @type string|bool $autosave_rest_controller_class Custom autosave REST controller class.
+	 *     @type string|null $expected_value                 Expected value.
+	 * }
+	 */
+	public function data_get_autosave_rest_controller_should_return_correct_values() {
+		return array(
+			'disable show_in_rest'               => array(
+				false,
+				'attachment',
+				false,
+				null,
+			),
+			'invalid post type'                  => array(
+				true,
+				'attachment',
+				false,
+				null,
+			),
+			'default rest autosave controller'   => array(
+				true,
+				'test_post_type',
+				false,
+				WP_REST_Autosaves_Controller::class,
+			),
+			'incorrect rest autosave controller' => array(
+				true,
+				'test_post_type',
+				stdClass::class,
+				null,
+			),
+			'correct rest autosave controller'   => array(
+				true,
+				'test_post_type',
+				WP_REST_Template_Autosaves_Controller::class,
+				WP_REST_Template_Autosaves_Controller::class,
+			),
+		);
+	}
 }
diff --git a/tests/privacy/wpPrivacyProcessPersonalDataExportPage.php b/tests/privacy/wpPrivacyProcessPersonalDataExportPage.php
index 3f7f7074e6..5410f851f4 100644
--- a/tests/privacy/wpPrivacyProcessPersonalDataExportPage.php
+++ b/tests/privacy/wpPrivacyProcessPersonalDataExportPage.php
@@ -626,12 +626,12 @@ class Tests_Privacy_wpPrivacyProcessPersonalDataExportPage extends WP_UnitTestCa
 	 *
 	 * @return array {
 	 *     @type array {
-	 *         @string string $expected_status The expected post status after calling the function.
-	 *         @string string $response_page   The exporter page to pass. Options are 'first' and 'last'. Default 'first'.
-	 *         @string string $exporter_index  The exporter index to pass. Options are 'first' and 'last'. Default 'first'.
-	 *         @string string $page_index      The page index to pass. Options are 'first' and 'last'. Default 'first'.
-	 *         @bool   bool   $send_as_email   If the response should be sent as an email.
-	 *         @string string $exporter_key    The slug (key) of the exporter to pass.
+	 *         @type string $expected_status The expected post status after calling the function.
+	 *         @type string $response_page   The exporter page to pass. Options are 'first' and 'last'. Default 'first'.
+	 *         @type string $exporter_index  The exporter index to pass. Options are 'first' and 'last'. Default 'first'.
+	 *         @type string $page_index      The page index to pass. Options are 'first' and 'last'. Default 'first'.
+	 *         @type bool   $send_as_email   If the response should be sent as an email.
+	 *         @type string $exporter_key    The slug (key) of the exporter to pass.
 	 *     }
 	 * }
 	 */
diff --git a/tests/query/cacheResults.php b/tests/query/cacheResults.php
index b3923d8229..dace2e313b 100644
--- a/tests/query/cacheResults.php
+++ b/tests/query/cacheResults.php
@@ -710,7 +710,7 @@ class Test_Query_CacheResults extends WP_UnitTestCase {
 		$query2->query( $args );
 		$queries_after = get_num_queries();
 
-		$this->assertSame( $queries_before, $queries_after );
+		$this->assertSame( 1, $queries_after - $queries_before );
 		$this->assertCount( 5, $query1->posts );
 		$this->assertCount( 5, $query2->posts );
 		$this->assertSame( $query1->found_posts, $query2->found_posts );
@@ -726,6 +726,117 @@ class Test_Query_CacheResults extends WP_UnitTestCase {
 		$this->assertNotEquals( $query1->posts, $query2->posts );
 	}
 
+
+	/**
+	 * @ticket 59188
+	 */
+	public function test_query_cache_unprimed_parents() {
+		$args   = array(
+			'cache_results' => true,
+			'fields'        => 'id=>parent',
+		);
+		$query1 = new WP_Query();
+		$query1->query( $args );
+
+		$post_ids   = wp_list_pluck( $query1->posts, 'ID' );
+		$cache_keys = array_map(
+			function ( $post_id ) {
+				return "post_parent:{$post_id}";
+			},
+			$post_ids
+		);
+
+		wp_cache_delete_multiple( $cache_keys, 'posts' );
+
+		$queries_before = get_num_queries();
+		$query2         = new WP_Query();
+		$query2->query( $args );
+		$queries_after = get_num_queries();
+
+		$this->assertSame( 1, $queries_after - $queries_before, 'There should be only one query to prime parents' );
+		$this->assertCount( 5, $query1->posts, 'There should be only 5 posts returned on first query' );
+		$this->assertCount( 5, $query2->posts, 'There should be only 5 posts returned on second query' );
+		$this->assertSame( $query1->found_posts, $query2->found_posts, 'Found posts should match on second query' );
+	}
+
+	/**
+	 * @ticket 59188
+	 */
+	public function test_query_cache_update_parent() {
+		$page_id = self::factory()->post->create(
+			array(
+				'post_type'   => 'page',
+				'post_parent' => self::$pages[0],
+			)
+		);
+		$args    = array(
+			'cache_results' => true,
+			'post_type'     => 'page',
+			'fields'        => 'id=>parent',
+			'post__in'      => array(
+				$page_id,
+			),
+		);
+		$query1  = new WP_Query();
+		$query1->query( $args );
+
+		wp_update_post(
+			array(
+				'ID'          => $page_id,
+				'post_parent' => self::$pages[1],
+			)
+		);
+
+		$queries_before = get_num_queries();
+		$query2         = new WP_Query();
+		$query2->query( $args );
+		$queries_after = get_num_queries();
+
+		$this->assertSame( self::$pages[0], $query1->posts[0]->post_parent, 'Check post parent on first query' );
+		$this->assertSame( self::$pages[1], $query2->posts[0]->post_parent, 'Check post parent on second query' );
+		$this->assertSame( 2, $queries_after - $queries_before, 'There should be 2 queries, one for id=>parent' );
+		$this->assertSame( $query1->found_posts, $query2->found_posts, 'Found posts should match on second query' );
+	}
+
+	/**
+	 * @ticket 59188
+	 */
+	public function test_query_cache_delete_parent() {
+		$parent_page_id = self::factory()->post->create(
+			array(
+				'post_type' => 'page',
+			)
+		);
+		$page_id        = self::factory()->post->create(
+			array(
+				'post_type'   => 'page',
+				'post_parent' => $parent_page_id,
+			)
+		);
+		$args           = array(
+			'cache_results' => true,
+			'post_type'     => 'page',
+			'fields'        => 'id=>parent',
+			'post__in'      => array(
+				$page_id,
+			),
+		);
+		$query1         = new WP_Query();
+		$query1->query( $args );
+
+		wp_delete_post( $parent_page_id, true );
+
+		$queries_before = get_num_queries();
+		$query2         = new WP_Query();
+		$query2->query( $args );
+		$queries_after = get_num_queries();
+
+		$this->assertSame( $parent_page_id, $query1->posts[0]->post_parent, 'Check post parent on first query' );
+		$this->assertSame( 0, $query2->posts[0]->post_parent, 'Check post parent on second query' );
+		$this->assertSame( 2, $queries_after - $queries_before, 'There should be 2 queries, one for id=>parent' );
+		$this->assertSame( $query1->found_posts, $query2->found_posts, 'Found posts should match on second query' );
+	}
+
 	/**
 	 * @ticket 22176
 	 */
diff --git a/tests/query/fieldsClause.php b/tests/query/fieldsClause.php
index 28c040d79c..c5febb9733 100644
--- a/tests/query/fieldsClause.php
+++ b/tests/query/fieldsClause.php
@@ -62,7 +62,7 @@ class Tests_Query_FieldsClause extends WP_UnitTestCase {
 
 		$this->assertEqualSets( $expected, $q->posts, 'Posts property for first query is not of expected form.' );
 		$this->assertSame( 5, $q->found_posts, 'Number of found posts is not five.' );
-		$this->assertEquals( 1, $q->max_num_pages, 'Number of found pages is not one.' );
+		$this->assertSame( 1, $q->max_num_pages, 'Number of found pages is not one.' );
 
 		// Test the second query's results match.
 		$q2 = new WP_Query( $query_args );
@@ -86,7 +86,7 @@ class Tests_Query_FieldsClause extends WP_UnitTestCase {
 
 		$this->assertEqualSets( $expected, $q->posts, 'Posts property for first query is not of expected form.' );
 		$this->assertSame( 5, $q->found_posts, 'Number of found posts is not five.' );
-		$this->assertEquals( 1, $q->max_num_pages, 'Number of found pages is not one.' );
+		$this->assertSame( 1, $q->max_num_pages, 'Number of found pages is not one.' );
 
 		// Test the second query's results match.
 		$q2 = new WP_Query( $query_args );
@@ -110,7 +110,7 @@ class Tests_Query_FieldsClause extends WP_UnitTestCase {
 
 		$this->assertEqualSets( $expected, $q->posts, 'Posts property for first query is not of expected form.' );
 		$this->assertSame( 5, $q->found_posts, 'Number of found posts is not five.' );
-		$this->assertEquals( 1, $q->max_num_pages, 'Number of found pages is not one.' );
+		$this->assertSame( 1, $q->max_num_pages, 'Number of found pages is not one.' );
 
 		// Test the second query's results match.
 		$q2 = new WP_Query( $query_args );
@@ -145,7 +145,7 @@ class Tests_Query_FieldsClause extends WP_UnitTestCase {
 
 		$this->assertEqualSets( $expected, $q->posts, 'Posts property for first query is not of expected form.' );
 		$this->assertSame( 5, $q->found_posts, 'Number of found posts is not five.' );
-		$this->assertEquals( 1, $q->max_num_pages, 'Number of found pages is not one.' );
+		$this->assertSame( 1, $q->max_num_pages, 'Number of found pages is not one.' );
 
 		// Test the second query's results match.
 		$q2 = new WP_Query( $query_args );
@@ -173,7 +173,7 @@ class Tests_Query_FieldsClause extends WP_UnitTestCase {
 
 		$this->assertEqualSets( $expected, $q->posts, 'Posts property for first query is not of expected form.' );
 		$this->assertSame( 5, $q->found_posts, 'Number of found posts is not five.' );
-		$this->assertEquals( 1, $q->max_num_pages, 'Number of found pages is not one.' );
+		$this->assertSame( 1, $q->max_num_pages, 'Number of found pages is not one.' );
 
 		// Test the second query's results match.
 		$q2 = new WP_Query( $query_args );
@@ -204,7 +204,7 @@ class Tests_Query_FieldsClause extends WP_UnitTestCase {
 
 		$this->assertEqualSets( $expected, $q->posts, 'Posts property for first query is not of expected form.' );
 		$this->assertSame( 5, $q->found_posts, 'Number of found posts is not five.' );
-		$this->assertEquals( 1, $q->max_num_pages, 'Number of found pages is not one.' );
+		$this->assertSame( 1, $q->max_num_pages, 'Number of found pages is not one.' );
 
 		// Test the second query's results match.
 		$q2 = new WP_Query( $query_args );
diff --git a/tests/query/invalidQueries.php b/tests/query/invalidQueries.php
index 4c0b631f80..0cec942245 100644
--- a/tests/query/invalidQueries.php
+++ b/tests/query/invalidQueries.php
@@ -159,4 +159,20 @@ class Tests_Query_InvalidQueries extends WP_UnitTestCase {
 		// Only the published post should be returned.
 		$this->assertCount( 1, $query->posts );
 	}
+
+	/**
+	 * Ensure a non-scalar page parameter does not throw a fatal error for trim().
+	 *
+	 * @ticket 56558
+	 * @covers WP_Query::get_posts
+	 */
+	public function test_non_scalar_page_value() {
+		$query = new WP_Query(
+			array(
+				'page' => array( 1, 2, 3 ),
+			)
+		);
+
+		$this->assertSame( 0, $query->query_vars['page'] );
+	}
 }
diff --git a/tests/query/results.php b/tests/query/results.php
index 40d05a4d9f..412d02fe83 100644
--- a/tests/query/results.php
+++ b/tests/query/results.php
@@ -156,7 +156,7 @@ class Tests_Query_Results extends WP_UnitTestCase {
 		self::$post_ids[] = $factory->post->create(
 			array(
 				'post_title' => 'no-comments',
-				'post_date'  => '2009-10-01 00:00:00',
+				'post_date'  => '2009-10-15 00:00:00',
 			)
 		);
 		self::$post_ids[] = $factory->post->create(
diff --git a/tests/readme.php b/tests/readme.php
index f0068d821e..7ec762b665 100644
--- a/tests/readme.php
+++ b/tests/readme.php
@@ -48,11 +48,11 @@ class Tests_Readme extends WP_UnitTestCase {
 		/*
 		 * Per https://www.mysql.com/support/, Oracle actively supports MySQL releases for 5 years from GA release.
 		 *
-		 * The currently recommended MySQL 5.7 branch moved from active support to extended support on 2020-10-21.
-		 * As WordPress core is not fully compatible with MySQL 8.0 at this time, the "supported" period here
+		 * The currently recommended MySQL 8.0 branch moved from active support to extended support on 2023-04-19.
+		 * As WordPress core may not be fully compatible with MySQL 8.1 at this time, the "supported" period here
 		 * is increased to 8 years to include extended support.
 		 *
-		 * TODO: Reduce this back to 5 years once MySQL 8.0 compatibility is achieved.
+		 * TODO: Reduce this back to 5 years once MySQL 8.1 compatibility is achieved.
 		 */
 		$mysql_eol    = gmdate( 'Y-m-d', strtotime( $mysql_matches[1] . ' +8 years' ) );
 		$current_date = gmdate( 'Y-m-d' );
diff --git a/tests/rest-api.php b/tests/rest-api.php
index 4a575b8803..7b0ee18f68 100644
--- a/tests/rest-api.php
+++ b/tests/rest-api.php
@@ -31,6 +31,11 @@ class Tests_REST_API extends WP_UnitTestCase {
 		return 'Spy_REST_Server';
 	}
 
+	public function test_rest_get_server_fails_with_undefined_method() {
+		$this->expectException( Error::class );
+		rest_get_server()->does_not_exist();
+	}
+
 	/**
 	 * Checks that the main classes are loaded.
 	 */
diff --git a/tests/rest-api/rest-attachments-controller.php b/tests/rest-api/rest-attachments-controller.php
index 0e721258ed..19719b5b20 100644
--- a/tests/rest-api/rest-attachments-controller.php
+++ b/tests/rest-api/rest-attachments-controller.php
@@ -1045,6 +1045,99 @@ class WP_Test_REST_Attachments_Controller extends WP_Test_REST_Post_Type_Control
 		$this->assertStringNotContainsString( ABSPATH, get_post_meta( $attachment['id'], '_wp_attached_file', true ) );
 	}
 
+	/**
+	 * @ticket 57897
+	 *
+	 * @requires function imagejpeg
+	 */
+	public function test_create_item_with_terms() {
+		wp_set_current_user( self::$author_id );
+		register_taxonomy_for_object_type( 'category', 'attachment' );
+		$category = wp_insert_term( 'Media Category', 'category' );
+		$request  = new WP_REST_Request( 'POST', '/wp/v2/media' );
+		$request->set_header( 'Content-Type', 'image/jpeg' );
+		$request->set_header( 'Content-Disposition', 'attachment; filename=canola.jpg' );
+
+		$request->set_body( file_get_contents( self::$test_file ) );
+		$request->set_param( 'categories', array( $category['term_id'] ) );
+		$response   = rest_get_server()->dispatch( $request );
+		$attachment = $response->get_data();
+
+		$term = wp_get_post_terms( $attachment['id'], 'category' );
+		$this->assertSame( $category['term_id'], $term[0]->term_id );
+	}
+
+	/**
+	 * @ticket 41692
+	 */
+	public function test_create_update_post_with_featured_media() {
+		// Add support for thumbnails on all attachment types to avoid incorrect-usage notice.
+		add_post_type_support( 'attachment', 'thumbnail' );
+
+		wp_set_current_user( self::$editor_id );
+
+		$request = new WP_REST_Request( 'POST', '/wp/v2/media' );
+		$request->set_file_params(
+			array(
+				'file' => array(
+					'file'     => file_get_contents( self::$test_file ),
+					'name'     => 'canola.jpg',
+					'size'     => filesize( self::$test_file ),
+					'tmp_name' => self::$test_file,
+				),
+			)
+		);
+		$request->set_header( 'Content-MD5', md5_file( self::$test_file ) );
+
+		$file          = DIR_TESTDATA . '/images/canola.jpg';
+		$attachment_id = self::factory()->attachment->create_object(
+			$file,
+			0,
+			array(
+				'post_mime_type' => 'image/jpeg',
+				'menu_order'     => rand( 1, 100 ),
+			)
+		);
+
+		$request->set_param( 'featured_media', $attachment_id );
+
+		$response = rest_get_server()->dispatch( $request );
+		$data     = $response->get_data();
+
+		$this->assertEquals( 201, $response->get_status() );
+
+		$new_attachment = get_post( $data['id'] );
+
+		$this->assertEquals( $attachment_id, (int) get_post_thumbnail_id( $new_attachment->ID ) );
+		$this->assertEquals( $attachment_id, $data['featured_media'] );
+
+		$request = new WP_REST_Request( 'PUT', '/wp/v2/media/' . $new_attachment->ID );
+		$params  = $this->set_post_data(
+			array(
+				'featured_media' => 0,
+			)
+		);
+		$request->set_body_params( $params );
+		$response = rest_get_server()->dispatch( $request );
+		$this->assertEquals( 200, $response->get_status() );
+		$data = $response->get_data();
+		$this->assertEquals( 0, $data['featured_media'] );
+		$this->assertEquals( 0, (int) get_post_thumbnail_id( $new_attachment->ID ) );
+
+		$request = new WP_REST_Request( 'PUT', '/wp/v2/media/' . $new_attachment->ID );
+		$params  = $this->set_post_data(
+			array(
+				'featured_media' => $attachment_id,
+			)
+		);
+		$request->set_body_params( $params );
+		$response = rest_get_server()->dispatch( $request );
+		$this->assertEquals( 200, $response->get_status() );
+		$data = $response->get_data();
+		$this->assertEquals( $attachment_id, $data['featured_media'] );
+		$this->assertEquals( $attachment_id, (int) get_post_thumbnail_id( $new_attachment->ID ) );
+	}
+
 	public function test_update_item() {
 		wp_set_current_user( self::$editor_id );
 		$attachment_id = self::factory()->attachment->create_object(
@@ -1554,7 +1647,7 @@ class WP_Test_REST_Attachments_Controller extends WP_Test_REST_Post_Type_Control
 		$response   = rest_get_server()->dispatch( $request );
 		$data       = $response->get_data();
 		$properties = $data['schema']['properties'];
-		$this->assertCount( 27, $properties );
+		$this->assertCount( 28, $properties );
 		$this->assertArrayHasKey( 'author', $properties );
 		$this->assertArrayHasKey( 'alt_text', $properties );
 		$this->assertArrayHasKey( 'caption', $properties );
@@ -1588,6 +1681,7 @@ class WP_Test_REST_Attachments_Controller extends WP_Test_REST_Post_Type_Control
 		$this->assertArrayHasKey( 'rendered', $properties['title']['properties'] );
 		$this->assertArrayHasKey( 'type', $properties );
 		$this->assertArrayHasKey( 'missing_image_sizes', $properties );
+		$this->assertArrayHasKey( 'featured_media', $properties );
 	}
 
 	public function test_get_additional_field_registration() {
diff --git a/tests/rest-api/rest-block-type-controller.php b/tests/rest-api/rest-block-type-controller.php
index 2745b61195..6ae8954abf 100644
--- a/tests/rest-api/rest-block-type-controller.php
+++ b/tests/rest-api/rest-block-type-controller.php
@@ -198,6 +198,7 @@ class REST_Block_Type_Controller_Test extends WP_Test_REST_Controller_Testcase {
 	 * @ticket 47620
 	 * @ticket 57585
 	 * @ticket 59346
+	 * @ticket 59797
 	 */
 	public function test_get_item_invalid() {
 		$block_type = 'fake/invalid';
@@ -206,6 +207,7 @@ class REST_Block_Type_Controller_Test extends WP_Test_REST_Controller_Testcase {
 			'category'         => true,
 			'parent'           => 'invalid_parent',
 			'ancestor'         => 'invalid_ancestor',
+			'allowed_blocks'   => 'invalid_allowed_blocks',
 			'icon'             => true,
 			'description'      => true,
 			'keywords'         => 'invalid_keywords',
@@ -236,13 +238,15 @@ class REST_Block_Type_Controller_Test extends WP_Test_REST_Controller_Testcase {
 		$this->assertNull( $data['category'] );
 		$this->assertSameSets( array( 'invalid_parent' ), $data['parent'] );
 		$this->assertSameSets( array( 'invalid_ancestor' ), $data['ancestor'] );
+		$this->assertSameSets( array( 'invalid_allowed_blocks' ), $data['allowed_blocks'] );
 		$this->assertNull( $data['icon'] );
 		$this->assertSame( '1', $data['description'] );
 		$this->assertSameSets( array( 'invalid_keywords' ), $data['keywords'] );
 		$this->assertNull( $data['textdomain'] );
 		$this->assertSameSetsWithIndex(
 			array(
-				'lock' => array( 'type' => 'object' ),
+				'lock'     => array( 'type' => 'object' ),
+				'metadata' => array( 'type' => 'object' ),
 			),
 			$data['attributes']
 		);
@@ -257,6 +261,7 @@ class REST_Block_Type_Controller_Test extends WP_Test_REST_Controller_Testcase {
 		$this->assertSameSets( array(), $data['editor_script_handles'] );
 		$this->assertSameSets( array(), $data['script_handles'] );
 		$this->assertSameSets( array(), $data['view_script_handles'] );
+		$this->assertSameSets( array(), $data['view_script_module_ids'] );
 		$this->assertSameSets( array(), $data['editor_style_handles'] );
 		$this->assertSameSets( array(), $data['style_handles'] );
 		$this->assertFalse( $data['is_dynamic'] );
@@ -272,6 +277,7 @@ class REST_Block_Type_Controller_Test extends WP_Test_REST_Controller_Testcase {
 	 * @ticket 47620
 	 * @ticket 57585
 	 * @ticket 59346
+	 * @ticket 59797
 	 */
 	public function test_get_item_defaults() {
 		$block_type = 'fake/false';
@@ -280,6 +286,7 @@ class REST_Block_Type_Controller_Test extends WP_Test_REST_Controller_Testcase {
 			'category'         => false,
 			'parent'           => false,
 			'ancestor'         => false,
+			'allowed_blocks'   => false,
 			'icon'             => false,
 			'description'      => false,
 			'keywords'         => false,
@@ -310,13 +317,15 @@ class REST_Block_Type_Controller_Test extends WP_Test_REST_Controller_Testcase {
 		$this->assertNull( $data['category'] );
 		$this->assertSameSets( array(), $data['parent'] );
 		$this->assertSameSets( array(), $data['ancestor'] );
+		$this->assertSameSets( array(), $data['allowed_blocks'] );
 		$this->assertNull( $data['icon'] );
 		$this->assertSame( '', $data['description'] );
 		$this->assertSameSets( array(), $data['keywords'] );
 		$this->assertNull( $data['textdomain'] );
 		$this->assertSameSetsWithIndex(
 			array(
-				'lock' => array( 'type' => 'object' ),
+				'lock'     => array( 'type' => 'object' ),
+				'metadata' => array( 'type' => 'object' ),
 			),
 			$data['attributes']
 		);
@@ -331,6 +340,7 @@ class REST_Block_Type_Controller_Test extends WP_Test_REST_Controller_Testcase {
 		$this->assertSameSets( array(), $data['editor_script_handles'] );
 		$this->assertSameSets( array(), $data['script_handles'] );
 		$this->assertSameSets( array(), $data['view_script_handles'] );
+		$this->assertSameSets( array(), $data['view_script_module_ids'] );
 		$this->assertSameSets( array(), $data['editor_style_handles'] );
 		$this->assertSameSets( array(), $data['style_handles'] );
 		$this->assertFalse( $data['is_dynamic'] );
@@ -546,6 +556,7 @@ class REST_Block_Type_Controller_Test extends WP_Test_REST_Controller_Testcase {
 	 * @ticket 47620
 	 * @ticket 57585
 	 * @ticket 59346
+	 * @ticket 60403
 	 */
 	public function test_get_item_schema() {
 		wp_set_current_user( self::$admin_id );
@@ -553,13 +564,14 @@ class REST_Block_Type_Controller_Test extends WP_Test_REST_Controller_Testcase {
 		$response   = rest_get_server()->dispatch( $request );
 		$data       = $response->get_data();
 		$properties = $data['schema']['properties'];
-		$this->assertCount( 30, $properties );
+		$this->assertCount( 33, $properties );
 		$this->assertArrayHasKey( 'api_version', $properties );
 		$this->assertArrayHasKey( 'name', $properties );
 		$this->assertArrayHasKey( 'title', $properties );
 		$this->assertArrayHasKey( 'category', $properties );
 		$this->assertArrayHasKey( 'parent', $properties );
 		$this->assertArrayHasKey( 'ancestor', $properties );
+		$this->assertArrayHasKey( 'allowed_blocks', $properties );
 		$this->assertArrayHasKey( 'icon', $properties );
 		$this->assertArrayHasKey( 'description', $properties );
 		$this->assertArrayHasKey( 'keywords', $properties );
@@ -576,8 +588,10 @@ class REST_Block_Type_Controller_Test extends WP_Test_REST_Controller_Testcase {
 		$this->assertArrayHasKey( 'editor_script_handles', $properties );
 		$this->assertArrayHasKey( 'script_handles', $properties );
 		$this->assertArrayHasKey( 'view_script_handles', $properties );
+		$this->assertArrayHasKey( 'view_script_module_ids', $properties );
 		$this->assertArrayHasKey( 'editor_style_handles', $properties );
 		$this->assertArrayHasKey( 'style_handles', $properties );
+		$this->assertArrayHasKey( 'view_style_handles', $properties, 'schema must contain view_style_handles' );
 		$this->assertArrayHasKey( 'is_dynamic', $properties );
 		// Deprecated properties.
 		$this->assertArrayHasKey( 'editor_script', $properties );
@@ -691,6 +705,7 @@ class REST_Block_Type_Controller_Test extends WP_Test_REST_Controller_Testcase {
 			'category',
 			'parent',
 			'ancestor',
+			'allowedBlocks',
 			'icon',
 			'description',
 			'keywords',
@@ -706,6 +721,7 @@ class REST_Block_Type_Controller_Test extends WP_Test_REST_Controller_Testcase {
 			'editor_script_handles',
 			'script_handles',
 			'view_script_handles',
+			'view_script_module_ids',
 			'editor_style_handles',
 			'style_handles',
 			// Deprecated fields.
@@ -730,6 +746,35 @@ class REST_Block_Type_Controller_Test extends WP_Test_REST_Controller_Testcase {
 		}
 	}
 
+	/**
+	 * @ticket 59969
+	 */
+	public function test_variation_callback() {
+		$block_type = 'test/block';
+		$settings   = array(
+			'title'              => true,
+			'variation_callback' => array( $this, 'mock_variation_callback' ),
+		);
+		register_block_type( $block_type, $settings );
+		wp_set_current_user( self::$admin_id );
+		$request  = new WP_REST_Request( 'GET', '/wp/v2/block-types/' . $block_type );
+		$response = rest_get_server()->dispatch( $request );
+		$data     = $response->get_data();
+		$this->assertSameSets( $this->mock_variation_callback(), $data['variations'] );
+	}
+
+	/**
+	 * Mock variation callback.
+	 *
+	 * @return array
+	 */
+	public function mock_variation_callback() {
+		return array(
+			array( 'name' => 'var1' ),
+			array( 'name' => 'var2' ),
+		);
+	}
+
 	/**
 	 * The create_item() method does not exist for block types.
 	 *
diff --git a/tests/rest-api/rest-blocks-controller.php b/tests/rest-api/rest-blocks-controller.php
index 1cdd3474dd..43a181683c 100644
--- a/tests/rest-api/rest-blocks-controller.php
+++ b/tests/rest-api/rest-blocks-controller.php
@@ -98,7 +98,7 @@ class REST_Blocks_Controller_Test extends WP_UnitTestCase {
 
 	/**
 	 * Exhaustively check that each role either can or cannot create, edit,
-	 * update, and delete reusable blocks.
+	 * update, and delete synced patterns.
 	 *
 	 * @ticket 45098
 	 *
diff --git a/tests/rest-api/rest-comments-controller.php b/tests/rest-api/rest-comments-controller.php
index ab8f672c5d..ee42906c61 100644
--- a/tests/rest-api/rest-comments-controller.php
+++ b/tests/rest-api/rest-comments-controller.php
@@ -966,6 +966,21 @@ class WP_Test_REST_Comments_Controller extends WP_Test_REST_Controller_Testcase
 		);
 	}
 
+	/**
+	 * @ticket 58238
+	 */
+	public function test_prepare_item_comment_text_filter() {
+		$filter = new MockAction();
+		add_filter( 'comment_text', array( $filter, 'filter' ), 10, 3 );
+
+		$request = new WP_REST_Request( 'GET', sprintf( '/wp/v2/comments/%d', self::$approved_id ) );
+
+		$response = rest_get_server()->dispatch( $request );
+
+		$this->assertSame( 1, $filter->get_call_count() );
+		$this->assertCount( 3, $filter->get_args()[0] );
+	}
+
 	public function test_get_comment_author_avatar_urls() {
 		$request = new WP_REST_Request( 'GET', sprintf( '/wp/v2/comments/%d', self::$approved_id ) );
 
diff --git a/tests/rest-api/rest-global-styles-controller.php b/tests/rest-api/rest-global-styles-controller.php
index 07050a0515..efc4fdb463 100644
--- a/tests/rest-api/rest-global-styles-controller.php
+++ b/tests/rest-api/rest-global-styles-controller.php
@@ -31,17 +31,6 @@ class WP_REST_Global_Styles_Controller_Test extends WP_Test_REST_Controller_Test
 	 */
 	protected static $post_id;
 
-	private function find_and_normalize_global_styles_by_id( $global_styles, $id ) {
-		foreach ( $global_styles as $style ) {
-			if ( $style['id'] === $id ) {
-				unset( $style['_links'] );
-				return $style;
-			}
-		}
-
-		return null;
-	}
-
 	public function set_up() {
 		parent::set_up();
 		switch_theme( 'tt1-blocks' );
@@ -130,6 +119,89 @@ class WP_REST_Global_Styles_Controller_Test extends WP_Test_REST_Controller_Test
 		// Controller does not use get_context_param().
 	}
 
+	public function test_get_theme_items() {
+		wp_set_current_user( self::$admin_id );
+		switch_theme( 'block-theme' );
+		$request  = new WP_REST_Request( 'GET', '/wp/v2/global-styles/themes/block-theme/variations' );
+		$response = rest_get_server()->dispatch( $request );
+		$data     = $response->get_data();
+		$expected = array(
+			array(
+				'version'  => 2,
+				'title'    => 'variation-a',
+				'settings' => array(
+					'blocks' => array(
+						'core/paragraph' => array(
+							'color' => array(
+								'palette' => array(
+									'theme' => array(
+										array(
+											'slug'  => 'light',
+											'name'  => 'Light',
+											'color' => '#f2f2f2',
+										),
+									),
+								),
+							),
+						),
+					),
+				),
+			),
+			array(
+				'version'  => 2,
+				'title'    => 'variation-b',
+				'settings' => array(
+					'blocks' => array(
+						'core/post-title' => array(
+							'color' => array(
+								'palette' => array(
+									'theme' => array(
+										array(
+											'slug'  => 'light',
+											'name'  => 'Light',
+											'color' => '#f1f1f1',
+										),
+									),
+								),
+							),
+						),
+					),
+				),
+			),
+			array(
+				'version'  => 2,
+				'title'    => 'Block theme variation',
+				'settings' => array(
+					'color' => array(
+						'palette' => array(
+							'theme' => array(
+								array(
+									'slug'  => 'foreground',
+									'color' => '#3F67C6',
+									'name'  => 'Foreground',
+								),
+							),
+						),
+					),
+				),
+				'styles'   => array(
+					'blocks' => array(
+						'core/post-title' => array(
+							'typography' => array(
+								'fontWeight' => '700',
+							),
+						),
+					),
+				),
+			),
+		);
+
+		wp_recursive_ksort( $data );
+		wp_recursive_ksort( $expected );
+
+		$this->assertSameSets( $expected, $data );
+	}
+
 	/**
 	 * @doesNotPerformAssertions
 	 */
@@ -411,7 +483,6 @@ class WP_REST_Global_Styles_Controller_Test extends WP_Test_REST_Controller_Test
 		$this->assertSame( 'My new global styles title', $data['title']['raw'] );
 	}
 
-
 	/**
 	 * @covers WP_REST_Global_Styles_Controller::update_item
 	 * @ticket 54516
@@ -445,6 +516,45 @@ class WP_REST_Global_Styles_Controller_Test extends WP_Test_REST_Controller_Test
 		$this->assertErrorResponse( 'rest_cannot_edit', $response, 403 );
 	}
 
+	/**
+	 * @covers WP_REST_Global_Styles_Controller::update_item
+	 * @ticket 57536
+	 */
+	public function test_update_item_valid_styles_css() {
+		wp_set_current_user( self::$admin_id );
+		if ( is_multisite() ) {
+			grant_super_admin( self::$admin_id );
+		}
+		$request = new WP_REST_Request( 'PUT', '/wp/v2/global-styles/' . self::$global_styles_id );
+		$request->set_body_params(
+			array(
+				'styles' => array( 'css' => 'body { color: red; }' ),
+			)
+		);
+		$response = rest_get_server()->dispatch( $request );
+		$data     = $response->get_data();
+		$this->assertSame( 'body { color: red; }', $data['styles']['css'] );
+	}
+
+	/**
+	 * @covers WP_REST_Global_Styles_Controller::update_item
+	 * @ticket 57536
+	 */
+	public function test_update_item_invalid_styles_css() {
+		wp_set_current_user( self::$admin_id );
+		if ( is_multisite() ) {
+			grant_super_admin( self::$admin_id );
+		}
+		$request = new WP_REST_Request( 'PUT', '/wp/v2/global-styles/' . self::$global_styles_id );
+		$request->set_body_params(
+			array(
+				'styles' => array( 'css' => '<p>test</p> body { color: red; }' ),
+			)
+		);
+		$response = rest_get_server()->dispatch( $request );
+		$this->assertErrorResponse( 'rest_custom_css_illegal_markup', $response, 400 );
+	}
+
 	/**
 	 * @doesNotPerformAssertions
 	 */
@@ -475,69 +585,6 @@ class WP_REST_Global_Styles_Controller_Test extends WP_Test_REST_Controller_Test
 		$this->assertArrayHasKey( 'title', $properties, 'Schema properties array does not have "title" key' );
 	}
 
-
-	public function test_get_theme_items() {
-		wp_set_current_user( self::$admin_id );
-		switch_theme( 'block-theme' );
-		$request  = new WP_REST_Request( 'GET', '/wp/v2/global-styles/themes/block-theme/variations' );
-		$response = rest_get_server()->dispatch( $request );
-		$data     = $response->get_data();
-		$expected = array(
-			array(
-				'version'  => 2,
-				'title'    => 'variation-b',
-				'settings' => array(
-					'blocks' => array(
-						'core/post-title' => array(
-							'color' => array(
-								'palette' => array(
-									'theme' => array(
-										array(
-											'slug'  => 'light',
-											'name'  => 'Light',
-											'color' => '#f1f1f1',
-										),
-									),
-								),
-							),
-						),
-					),
-				),
-			),
-			array(
-				'version'  => 2,
-				'title'    => 'Block theme variation',
-				'settings' => array(
-					'color' => array(
-						'palette' => array(
-							'theme' => array(
-								array(
-									'slug'  => 'foreground',
-									'color' => '#3F67C6',
-									'name'  => 'Foreground',
-								),
-							),
-						),
-					),
-				),
-				'styles'   => array(
-					'blocks' => array(
-						'core/post-title' => array(
-							'typography' => array(
-								'fontWeight' => '700',
-							),
-						),
-					),
-				),
-			),
-		);
-
-		wp_recursive_ksort( $data );
-		wp_recursive_ksort( $expected );
-
-		$this->assertSameSets( $data, $expected );
-	}
-
 	/**
 	 * @covers WP_REST_Global_Styles_Controller::get_available_actions
 	 */
@@ -556,43 +603,4 @@ class WP_REST_Global_Styles_Controller_Test extends WP_Test_REST_Controller_Test
 			$this->assertArrayHasKey( 'https://api.w.org/action-edit-css', $links );
 		}
 	}
-
-	/**
-	 * @covers WP_REST_Global_Styles_Controller::update_item
-	 * @ticket 57536
-	 */
-	public function test_update_item_valid_styles_css() {
-		wp_set_current_user( self::$admin_id );
-		if ( is_multisite() ) {
-			grant_super_admin( self::$admin_id );
-		}
-		$request = new WP_REST_Request( 'PUT', '/wp/v2/global-styles/' . self::$global_styles_id );
-		$request->set_body_params(
-			array(
-				'styles' => array( 'css' => 'body { color: red; }' ),
-			)
-		);
-		$response = rest_get_server()->dispatch( $request );
-		$data     = $response->get_data();
-		$this->assertSame( 'body { color: red; }', $data['styles']['css'] );
-	}
-
-	/**
-	 * @covers WP_REST_Global_Styles_Controller::update_item
-	 * @ticket 57536
-	 */
-	public function test_update_item_invalid_styles_css() {
-		wp_set_current_user( self::$admin_id );
-		if ( is_multisite() ) {
-			grant_super_admin( self::$admin_id );
-		}
-		$request = new WP_REST_Request( 'PUT', '/wp/v2/global-styles/' . self::$global_styles_id );
-		$request->set_body_params(
-			array(
-				'styles' => array( 'css' => '<p>test</p> body { color: red; }' ),
-			)
-		);
-		$response = rest_get_server()->dispatch( $request );
-		$this->assertErrorResponse( 'rest_custom_css_illegal_markup', $response, 400 );
-	}
 }
diff --git a/tests/rest-api/rest-global-styles-revisions-controller.php b/tests/rest-api/rest-global-styles-revisions-controller.php
index 30e5b983ea..3773b5fd1f 100644
--- a/tests/rest-api/rest-global-styles-revisions-controller.php
+++ b/tests/rest-api/rest-global-styles-revisions-controller.php
@@ -226,6 +226,7 @@ class WP_REST_Global_Styles_Revisions_Controller_Test extends WP_Test_REST_Contr
 
 	/**
 	 * @ticket 58524
+	 * @ticket 59810
 	 *
 	 * @covers WP_REST_Global_Styles_Controller::register_routes
 	 */
@@ -236,6 +237,11 @@ class WP_REST_Global_Styles_Revisions_Controller_Test extends WP_Test_REST_Contr
 			$routes,
 			'Global style revisions based on the given parentID route does not exist.'
 		);
+		$this->assertArrayHasKey(
+			'/wp/v2/global-styles/(?P<parent>[\d]+)/revisions/(?P<id>[\d]+)',
+			$routes,
+			'Single global style revisions based on the given parentID and revision ID route does not exist.'
+		);
 	}
 
 	/**
@@ -304,6 +310,38 @@ class WP_REST_Global_Styles_Revisions_Controller_Test extends WP_Test_REST_Contr
 		$this->check_get_revision_response( $data[2], $this->revision_1 );
 	}
 
+	/**
+	 * @ticket 59810
+	 *
+	 * @covers WP_REST_Global_Styles_Controller::get_item
+	 */
+	public function test_get_item() {
+		wp_set_current_user( self::$admin_id );
+
+		$request  = new WP_REST_Request( 'GET', '/wp/v2/global-styles/' . self::$global_styles_id . '/revisions/' . $this->revision_1_id );
+		$response = rest_get_server()->dispatch( $request );
+		$data     = $response->get_data();
+
+		$this->assertSame( 200, $response->get_status(), 'Response status is 200.' );
+		$this->check_get_revision_response( $data, $this->revision_1 );
+	}
+
+	/**
+	 * @ticket 59810
+	 *
+	 * @covers WP_REST_Global_Styles_Controller::get_revision
+	 */
+	public function test_get_item_invalid_revision_id_should_error() {
+		wp_set_current_user( self::$admin_id );
+
+		$expected_error  = 'rest_post_invalid_id';
+		$expected_status = 404;
+		$request         = new WP_REST_Request( 'GET', '/wp/v2/global-styles/' . self::$global_styles_id . '/revisions/20000001' );
+		$response        = rest_get_server()->dispatch( $request );
+
+		$this->assertErrorResponse( $expected_error, $response, $expected_status );
+	}
+
 	/**
 	 * @ticket 58524
 	 *
@@ -794,13 +832,6 @@ class WP_REST_Global_Styles_Revisions_Controller_Test extends WP_Test_REST_Contr
 		// Controller does not implement test_context_param().
 	}
 
-	/**
-	 * @doesNotPerformAssertions
-	 */
-	public function test_get_item() {
-		// Controller does not implement get_item().
-	}
-
 	/**
 	 * @doesNotPerformAssertions
 	 */
diff --git a/tests/rest-api/rest-navigation-fallback-controller.php b/tests/rest-api/rest-navigation-fallback-controller.php
index 43111020e2..3be0bba59f 100644
--- a/tests/rest-api/rest-navigation-fallback-controller.php
+++ b/tests/rest-api/rest-navigation-fallback-controller.php
@@ -61,11 +61,11 @@ class WP_REST_Navigation_Fallback_Controller_Test extends WP_Test_REST_Controlle
 		$response = rest_get_server()->dispatch( $request );
 		$data     = $response->get_data();
 
-		$this->assertEquals( 403, $response->get_status(), 'Response should indicate user does not have permission.' );
+		$this->assertSame( 403, $response->get_status(), 'Response should indicate user does not have permission.' );
 
-		$this->assertEquals( 'rest_cannot_create', $data['code'], 'Response should indicate user cannot create.' );
+		$this->assertSame( 'rest_cannot_create', $data['code'], 'Response should indicate user cannot create.' );
 
-		$this->assertEquals( 'Sorry, you are not allowed to create Navigation Menus as this user.', $data['message'], 'Response should indicate failed request status.' );
+		$this->assertSame( 'Sorry, you are not allowed to create Navigation Menus as this user.', $data['message'], 'Response should indicate failed request status.' );
 	}
 
 	/**
@@ -80,13 +80,13 @@ class WP_REST_Navigation_Fallback_Controller_Test extends WP_Test_REST_Controlle
 		$response = rest_get_server()->dispatch( $request );
 		$data     = $response->get_data();
 
-		$this->assertEquals( 200, $response->get_status(), 'Status should indicate successful request.' );
+		$this->assertSame( 200, $response->get_status(), 'Status should indicate successful request.' );
 
 		$this->assertIsArray( $data, 'Response should be of correct type.' );
 
 		$this->assertArrayHasKey( 'id', $data, 'Response should contain expected fields.' );
 
-		$this->assertEquals( 'wp_navigation', get_post_type( $data['id'] ), '"id" field should represent a post of type "wp_navigation"' );
+		$this->assertSame( 'wp_navigation', get_post_type( $data['id'] ), '"id" field should represent a post of type "wp_navigation"' );
 
 		// Check that only a single Navigation fallback was created.
 		$navs_in_db = $this->get_navigations_in_database();
@@ -105,16 +105,16 @@ class WP_REST_Navigation_Fallback_Controller_Test extends WP_Test_REST_Controlle
 		$response = rest_get_server()->dispatch( $request );
 		$data     = $response->get_data();
 
-		$this->assertEquals( 200, $response->get_status(), 'Status should indicate successful request.' );
+		$this->assertSame( 200, $response->get_status(), 'Status should indicate successful request.' );
 
 		$this->assertArrayHasKey( 'schema', $data, '"schema" key should exist in response.' );
 
 		$schema = $data['schema'];
 
-		$this->assertEquals( 'object', $schema['type'], 'The schema type should match the expected type.' );
+		$this->assertSame( 'object', $schema['type'], 'The schema type should match the expected type.' );
 
 		$this->assertArrayHasKey( 'id', $schema['properties'], 'Schema should have an "id" property.' );
-		$this->assertEquals( 'integer', $schema['properties']['id']['type'], 'Schema "id" property should be an integer.' );
+		$this->assertSame( 'integer', $schema['properties']['id']['type'], 'Schema "id" property should be an integer.' );
 		$this->assertTrue( $schema['properties']['id']['readonly'], 'Schema "id" property should be readonly.' );
 	}
 
@@ -152,7 +152,7 @@ class WP_REST_Navigation_Fallback_Controller_Test extends WP_Test_REST_Controlle
 	 *
 	 * @ticket 58557
 	 *
-	 * @covers ::wp_add_fields_to_navigation_fallback_embedded_links
+	 * @covers WP_Navigation_Fallback::update_wp_navigation_post_schema
 	 *
 	 * @since 6.3.0 Added Navigation Fallbacks endpoint.
 	 */
@@ -160,30 +160,20 @@ class WP_REST_Navigation_Fallback_Controller_Test extends WP_Test_REST_Controlle
 		// First we'll use the navigation fallback to get a link to the navigation endpoint.
 		$request  = new WP_REST_Request( 'GET', '/wp-block-editor/v1/navigation-fallback' );
 		$response = rest_get_server()->dispatch( $request );
-		$links    = $response->get_links();
-
-		// Extract the navigation endpoint URL from the response.
-		$embedded_navigation_href = $links['self'][0]['href'];
-		preg_match( '/\?rest_route=(.*)/', $embedded_navigation_href, $matches );
-		$navigation_endpoint = $matches[1];
-
-		// Fetch the "linked" navigation post from the endpoint, with the context parameter set to 'embed' to simulate fetching embedded links.
-		$request = new WP_REST_Request( 'GET', $navigation_endpoint );
-		$request->set_param( 'context', 'embed' );
-		$response = rest_get_server()->dispatch( $request );
-		$data     = $response->get_data();
+		$data     = rest_get_server()->response_to_data( $response, true );
+		$embedded = $data['_embedded']['self'][0];
 
 		// Verify that the additional status field is present.
-		$this->assertArrayHasKey( 'status', $data, 'Response title should contain a "status" field.' );
+		$this->assertArrayHasKey( 'status', $embedded, 'Response title should contain a "status" field.' );
 
 		// Verify that the additional content fields are present.
-		$this->assertArrayHasKey( 'content', $data, 'Response should contain a "content" field.' );
-		$this->assertArrayHasKey( 'raw', $data['content'], 'Response content should contain a "raw" field.' );
-		$this->assertArrayHasKey( 'rendered', $data['content'], 'Response content should contain a "rendered" field.' );
-		$this->assertArrayHasKey( 'block_version', $data['content'], 'Response should contain a "block_version" field.' );
+		$this->assertArrayHasKey( 'content', $embedded, 'Response should contain a "content" field.' );
+		$this->assertArrayHasKey( 'raw', $embedded['content'], 'Response content should contain a "raw" field.' );
+		$this->assertArrayHasKey( 'rendered', $embedded['content'], 'Response content should contain a "rendered" field.' );
+		$this->assertArrayHasKey( 'block_version', $embedded['content'], 'Response should contain a "block_version" field.' );
 
 		// Verify that the additional title.raw field is present.
-		$this->assertArrayHasKey( 'raw', $data['title'], 'Response title should contain a "raw" key.' );
+		$this->assertArrayHasKey( 'raw', $embedded['title'], 'Response title should contain a "raw" key.' );
 	}
 
 	private function get_navigations_in_database() {
diff --git a/tests/rest-api/rest-plugins-controller.php b/tests/rest-api/rest-plugins-controller.php
index 1da20c8315..d6290b071b 100644
--- a/tests/rest-api/rest-plugins-controller.php
+++ b/tests/rest-api/rest-plugins-controller.php
@@ -40,6 +40,13 @@ class WP_REST_Plugins_Controller_Test extends WP_Test_REST_Controller_Testcase {
 	 */
 	private static $admin;
 
+	/**
+	 * JSON decoded response from the WordPress.org plugin API.
+	 *
+	 * @var stdClass
+	 */
+	private static $plugin_api_decoded_response;
+
 	/**
 	 * Set up class test fixtures.
 	 *
@@ -67,6 +74,8 @@ class WP_REST_Plugins_Controller_Test extends WP_Test_REST_Controller_Testcase {
 		if ( is_multisite() ) {
 			grant_super_admin( self::$super_admin );
 		}
+
+		self::$plugin_api_decoded_response = json_decode( file_get_contents( DIR_TESTDATA . '/plugins/link-manager.json' ) );
 	}
 
 	/**
@@ -1012,12 +1021,17 @@ class WP_REST_Plugins_Controller_Test extends WP_Test_REST_Controller_Testcase {
 		$this->assertSame( 'My &#8216;Cool&#8217; Plugin <cite>By <a href="https://wordpress.org/">WordPress.org</a>.</cite>', $data['description']['rendered'] );
 		$this->assertSame( $network_only, $data['network_only'] );
 		$this->assertSame( '5.6.0', $data['requires_php'] );
-		$this->assertSame( '5.4.0', $data['requires_wp'] );
+		$this->assertSame( '5.4', $data['requires_wp'] );
 		$this->assertSame( 'test-plugin', $data['textdomain'] );
 	}
 
 	/**
-	 * Sets up the plugin download to come locally instead of downloading it from .org
+	 * Sets up the plugin repository requests to use local data.
+	 *
+	 * Requests to the plugin repository are mocked to avoid external HTTP requests so
+	 * the test suite does not produce false negatives due to network failures.
+	 *
+	 * Both the plugin ZIP file and the plugin API response are mocked.
 	 *
 	 * @since 5.5.0
 	 */
@@ -1036,8 +1050,23 @@ class WP_REST_Plugins_Controller_Test extends WP_Test_REST_Controller_Testcase {
 			3
 		);
 
-		// Remove upgrade hooks which are not required for plugin installation tests
-		// and may interfere with the results due to a timeout in external HTTP requests.
+		add_filter(
+			'plugins_api',
+			function ( $bypass, $action, $args ) {
+				// Only mock the plugin_information (link-manager) request.
+				if ( 'plugin_information' !== $action || 'link-manager' !== $args->slug ) {
+					return $bypass;
+				}
+				return self::$plugin_api_decoded_response;
+			},
+			10,
+			3
+		);
+
+		/*
+		 * Remove upgrade hooks which are not required for plugin installation tests
+		 * and may interfere with the results due to a timeout in external HTTP requests.
+		 */
 		remove_action( 'upgrader_process_complete', array( 'Language_Pack_Upgrader', 'async_upgrade' ), 20 );
 		remove_action( 'upgrader_process_complete', 'wp_version_check' );
 		remove_action( 'upgrader_process_complete', 'wp_update_plugins' );
@@ -1120,7 +1149,7 @@ class WP_REST_Plugins_Controller_Test extends WP_Test_REST_Controller_Testcase {
  * Author URI: https://wordpress.org/
  * Text Domain: test-plugin
  * Requires PHP: 5.6.0
- * Requires at least: 5.4.0{$network}
+ * Requires at least: 5.4{$network}
  */
 PHP;
 		wp_mkdir_p( WP_PLUGIN_DIR . '/test-plugin' );
diff --git a/tests/rest-api/rest-post-meta-fields.php b/tests/rest-api/rest-post-meta-fields.php
index dcf39f59c9..1418db19db 100644
--- a/tests/rest-api/rest-post-meta-fields.php
+++ b/tests/rest-api/rest-post-meta-fields.php
@@ -3095,6 +3095,52 @@ class WP_Test_REST_Post_Meta_Fields extends WP_Test_REST_TestCase {
 		$this->assertSame( 'Goodnight Moon', $schema['default'] );
 	}
 
+	/**
+	 * @ticket 48823
+	 */
+	public function test_multiple_errors_are_returned_at_once() {
+		$this->grant_write_permission();
+		register_post_meta(
+			'post',
+			'error_1',
+			array(
+				'single'       => true,
+				'show_in_rest' => array(
+					'schema' => array(
+						'enum' => array( 'a', 'b' ),
+					),
+				),
+			)
+		);
+		register_post_meta(
+			'post',
+			'error_2',
+			array(
+				'single'       => true,
+				'show_in_rest' => array(
+					'schema' => array(
+						'minLength' => 1,
+					),
+				),
+			)
+		);
+
+		$request = new WP_REST_Request( 'PUT', '/wp/v2/posts/' . self::$post_id );
+		$request->set_body_params(
+			array(
+				'meta' => array(
+					'error_1' => 'c',
+					'error_2' => '',
+				),
+			)
+		);
+		$response = rest_do_request( $request );
+		$error    = $response->as_error();
+		$this->assertWPError( $error );
+		$this->assertContains( 'meta.error_1 is not one of a and b.', $error->get_error_messages() );
+		$this->assertContains( 'meta.error_2 must be at least 1 character long.', $error->get_error_messages() );
+	}
+
 	/**
 	 * Internal function used to disable an insert query which
 	 * will trigger a wpdb error for testing purposes.
diff --git a/tests/rest-api/rest-posts-controller.php b/tests/rest-api/rest-posts-controller.php
index 3b58464295..2d1d9130ca 100644
--- a/tests/rest-api/rest-posts-controller.php
+++ b/tests/rest-api/rest-posts-controller.php
@@ -18,6 +18,7 @@ class WP_Test_REST_Posts_Controller extends WP_Test_REST_Post_Type_Controller_Te
 
 	protected static $supported_formats;
 	protected static $post_ids    = array();
+	protected static $terms       = array();
 	protected static $total_posts = 30;
 	protected static $per_page    = 50;
 
@@ -28,6 +29,8 @@ class WP_Test_REST_Posts_Controller extends WP_Test_REST_Post_Type_Controller_Te
 
 	public static function wpSetUpBeforeClass( WP_UnitTest_Factory $factory ) {
 		self::$post_id = $factory->post->create();
+		self::$terms   = $factory->term->create_many( 15, array( 'taxonomy' => 'category' ) );
+		wp_set_object_terms( self::$post_id, self::$terms, 'category' );
 
 		self::$superadmin_id  = $factory->user->create(
 			array(
@@ -223,6 +226,21 @@ class WP_Test_REST_Posts_Controller extends WP_Test_REST_Post_Type_Controller_Te
 		$this->assertSame( array( 'context', 'id', 'password' ), $keys );
 	}
 
+	public function test_registered_get_items_embed() {
+		$request = new WP_REST_Request( 'GET', '/wp/v2/posts' );
+		$request->set_param( 'include', array( self::$post_id ) );
+		$response = rest_get_server()->dispatch( $request );
+		$response = rest_get_server()->response_to_data( $response, true );
+		$this->assertArrayHasKey( '_embedded', $response[0], 'The _embedded key must exist' );
+		$this->assertArrayHasKey( 'wp:term', $response[0]['_embedded'], 'The wp:term key must exist' );
+		$this->assertCount( 15, $response[0]['_embedded']['wp:term'][0], 'Should should be 15 terms and not the default 10' );
+		$i = 0;
+		foreach ( $response[0]['_embedded']['wp:term'][0] as $term ) {
+			$this->assertSame( self::$terms[ $i ], $term['id'], 'Check term id existing in response' );
+			++$i;
+		}
+	}
+
 	/**
 	 * @ticket 43701
 	 */
@@ -256,7 +274,7 @@ class WP_Test_REST_Posts_Controller extends WP_Test_REST_Post_Type_Controller_Te
 	/**
 	 * A valid query that returns 0 results should return an empty JSON list.
 	 *
-	 * @issue 862
+	 * @link https://github.com/WP-API/WP-API/issues/862
 	 */
 	public function test_get_items_empty_query() {
 		$request = new WP_REST_Request( 'GET', '/wp/v2/posts' );
diff --git a/tests/rest-api/rest-revisions-controller.php b/tests/rest-api/rest-revisions-controller.php
index 74cd040d85..0813805506 100644
--- a/tests/rest-api/rest-revisions-controller.php
+++ b/tests/rest-api/rest-revisions-controller.php
@@ -9,6 +9,7 @@
  */
 class WP_Test_REST_Revisions_Controller extends WP_Test_REST_Controller_Testcase {
 	protected static $post_id;
+	protected static $post_id_2;
 	protected static $page_id;
 
 	protected static $editor_id;
@@ -22,10 +23,12 @@ class WP_Test_REST_Revisions_Controller extends WP_Test_REST_Controller_Testcase
 	private $revision_id2;
 	private $revision_3;
 	private $revision_id3;
+	private $revision_2_1_id;
 
 	public static function wpSetUpBeforeClass( WP_UnitTest_Factory $factory ) {
-		self::$post_id = $factory->post->create();
-		self::$page_id = $factory->post->create( array( 'post_type' => 'page' ) );
+		self::$post_id   = $factory->post->create();
+		self::$post_id_2 = $factory->post->create();
+		self::$page_id   = $factory->post->create( array( 'post_type' => 'page' ) );
 
 		self::$editor_id      = $factory->user->create(
 			array(
@@ -57,12 +60,25 @@ class WP_Test_REST_Revisions_Controller extends WP_Test_REST_Controller_Testcase
 				'ID'           => self::$post_id,
 			)
 		);
+		wp_update_post(
+			array(
+				'post_content' => 'A second post.',
+				'ID'           => self::$post_id_2,
+			)
+		);
+		wp_update_post(
+			array(
+				'post_content' => 'A second post. How prolific.',
+				'ID'           => self::$post_id_2,
+			)
+		);
 		wp_set_current_user( 0 );
 	}
 
 	public static function wpTearDownAfterClass() {
 		// Also deletes revisions.
 		wp_delete_post( self::$post_id, true );
+		wp_delete_post( self::$post_id_2, true );
 		wp_delete_post( self::$page_id, true );
 
 		self::delete_user( self::$editor_id );
@@ -72,6 +88,7 @@ class WP_Test_REST_Revisions_Controller extends WP_Test_REST_Controller_Testcase
 	public function set_up() {
 		parent::set_up();
 
+		// Set first post revision vars.
 		$revisions             = wp_get_post_revisions( self::$post_id );
 		$this->total_revisions = count( $revisions );
 		$this->revisions       = $revisions;
@@ -81,6 +98,11 @@ class WP_Test_REST_Revisions_Controller extends WP_Test_REST_Controller_Testcase
 		$this->revision_id2    = $this->revision_2->ID;
 		$this->revision_3      = array_pop( $revisions );
 		$this->revision_id3    = $this->revision_3->ID;
+
+		// Set second post revision vars.
+		$revisions             = wp_get_post_revisions( self::$post_id_2 );
+		$post_2_revision       = array_pop( $revisions );
+		$this->revision_2_1_id = $post_2_revision->ID;
 	}
 
 	public function _filter_map_meta_cap_remove_no_allow_revisions( $caps, $cap, $user_id, $args ) {
@@ -234,6 +256,31 @@ class WP_Test_REST_Revisions_Controller extends WP_Test_REST_Controller_Testcase
 		$this->assertErrorResponse( 'rest_post_invalid_parent', $response, 404 );
 	}
 
+	/**
+	 * @ticket 59875
+	 */
+	public function test_get_item_valid_parent_id() {
+		wp_set_current_user( self::$editor_id );
+		$request  = new WP_REST_Request( 'GET', '/wp/v2/posts/' . self::$post_id . '/revisions/' . $this->revision_id1 );
+		$response = rest_get_server()->dispatch( $request );
+		$data     = $response->get_data();
+		$this->assertSame( self::$post_id, $data['parent'], "The returned revision's id should match the parent id." );
+		$this->check_get_revision_response( $response, $this->revision_1 );
+	}
+
+	/**
+	 * @ticket 59875
+	 */
+	public function test_get_item_invalid_parent_id() {
+		wp_set_current_user( self::$editor_id );
+		$request  = new WP_REST_Request( 'GET', '/wp/v2/posts/' . self::$post_id . '/revisions/' . $this->revision_2_1_id );
+		$response = rest_get_server()->dispatch( $request );
+		$this->assertErrorResponse( 'rest_revision_parent_id_mismatch', $response, 404 );
+
+		$expected_message = 'The revision does not belong to the specified parent with id of "' . self::$post_id . '"';
+		$this->assertSame( $expected_message, $response->as_error()->get_error_messages()[0], 'The message must contain the correct parent ID.' );
+	}
+
 	public function test_delete_item() {
 		wp_set_current_user( self::$editor_id );
 		$request = new WP_REST_Request( 'DELETE', '/wp/v2/posts/' . self::$post_id . '/revisions/' . $this->revision_id1 );
diff --git a/tests/rest-api/rest-schema-setup.php b/tests/rest-api/rest-schema-setup.php
index dfd98877d8..a81ef0d433 100644
--- a/tests/rest-api/rest-schema-setup.php
+++ b/tests/rest-api/rest-schema-setup.php
@@ -135,6 +135,7 @@ class WP_Test_REST_Schema_Initialization extends WP_Test_REST_TestCase {
 			'/wp/v2/comments/(?P<id>[\\d]+)',
 			'/wp/v2/global-styles/(?P<id>[\/\w-]+)',
 			'/wp/v2/global-styles/(?P<parent>[\d]+)/revisions',
+			'/wp/v2/global-styles/(?P<parent>[\d]+)/revisions/(?P<id>[\d]+)',
 			'/wp/v2/global-styles/themes/(?P<stylesheet>[\/\s%\w\.\(\)\[\]\@_\-]+)/variations',
 			'/wp/v2/global-styles/themes/(?P<stylesheet>[^\/:<>\*\?"\|]+(?:\/[^\/:<>\*\?"\|]+)?)',
 			'/wp/v2/search',
@@ -144,18 +145,18 @@ class WP_Test_REST_Schema_Initialization extends WP_Test_REST_TestCase {
 			'/wp/v2/block-types/(?P<namespace>[a-zA-Z0-9_-]+)/(?P<name>[a-zA-Z0-9_-]+)',
 			'/wp/v2/settings',
 			'/wp/v2/template-parts',
-			'/wp/v2/template-parts/(?P<id>[\d]+)/autosaves',
 			'/wp/v2/template-parts/(?P<id>([^\/:<>\*\?"\|]+(?:\/[^\/:<>\*\?"\|]+)?)[\/\w%-]+)',
-			'/wp/v2/template-parts/(?P<parent>[\d]+)/autosaves/(?P<id>[\d]+)',
-			'/wp/v2/template-parts/(?P<parent>[\d]+)/revisions',
-			'/wp/v2/template-parts/(?P<parent>[\d]+)/revisions/(?P<id>[\d]+)',
+			'/wp/v2/template-parts/(?P<id>([^\/:<>\*\?"\|]+(?:\/[^\/:<>\*\?"\|]+)?)[\/\w%-]+)/autosaves',
+			'/wp/v2/template-parts/(?P<parent>([^\/:<>\*\?"\|]+(?:\/[^\/:<>\*\?"\|]+)?)[\/\w%-]+)/autosaves/(?P<id>[\d]+)',
+			'/wp/v2/template-parts/(?P<parent>([^\/:<>\*\?"\|]+(?:\/[^\/:<>\*\?"\|]+)?)[\/\w%-]+)/revisions',
+			'/wp/v2/template-parts/(?P<parent>([^\/:<>\*\?"\|]+(?:\/[^\/:<>\*\?"\|]+)?)[\/\w%-]+)/revisions/(?P<id>[\d]+)',
 			'/wp/v2/template-parts/lookup',
 			'/wp/v2/templates',
-			'/wp/v2/templates/(?P<id>[\d]+)/autosaves',
 			'/wp/v2/templates/(?P<id>([^\/:<>\*\?"\|]+(?:\/[^\/:<>\*\?"\|]+)?)[\/\w%-]+)',
-			'/wp/v2/templates/(?P<parent>[\d]+)/autosaves/(?P<id>[\d]+)',
-			'/wp/v2/templates/(?P<parent>[\d]+)/revisions',
-			'/wp/v2/templates/(?P<parent>[\d]+)/revisions/(?P<id>[\d]+)',
+			'/wp/v2/templates/(?P<id>([^\/:<>\*\?"\|]+(?:\/[^\/:<>\*\?"\|]+)?)[\/\w%-]+)/autosaves',
+			'/wp/v2/templates/(?P<parent>([^\/:<>\*\?"\|]+(?:\/[^\/:<>\*\?"\|]+)?)[\/\w%-]+)/autosaves/(?P<id>[\d]+)',
+			'/wp/v2/templates/(?P<parent>([^\/:<>\*\?"\|]+(?:\/[^\/:<>\*\?"\|]+)?)[\/\w%-]+)/revisions',
+			'/wp/v2/templates/(?P<parent>([^\/:<>\*\?"\|]+(?:\/[^\/:<>\*\?"\|]+)?)[\/\w%-]+)/revisions/(?P<id>[\d]+)',
 			'/wp/v2/templates/lookup',
 			'/wp/v2/themes',
 			'/wp/v2/themes/(?P<stylesheet>[^\/:<>\*\?"\|]+(?:\/[^\/:<>\*\?"\|]+)?)',
@@ -188,6 +189,12 @@ class WP_Test_REST_Schema_Initialization extends WP_Test_REST_TestCase {
 			'/wp-site-health/v1/directory-sizes',
 			'/wp/v2/wp_pattern_category',
 			'/wp/v2/wp_pattern_category/(?P<id>[\d]+)',
+			'/wp/v2/font-collections',
+			'/wp/v2/font-collections/(?P<slug>[\/\w-]+)',
+			'/wp/v2/font-families',
+			'/wp/v2/font-families/(?P<font_family_id>[\d]+)/font-faces',
+			'/wp/v2/font-families/(?P<font_family_id>[\d]+)/font-faces/(?P<id>[\d]+)',
+			'/wp/v2/font-families/(?P<id>[\d]+)',
 		);
 
 		$this->assertSameSets( $expected_routes, $routes );
diff --git a/tests/rest-api/rest-search-controller.php b/tests/rest-api/rest-search-controller.php
index 7345d45f86..668cfb4e6b 100644
--- a/tests/rest-api/rest-search-controller.php
+++ b/tests/rest-api/rest-search-controller.php
@@ -888,4 +888,18 @@ class WP_Test_REST_Search_Controller extends WP_Test_REST_Controller_Testcase {
 			wp_list_pluck( $response->get_data(), 'id' )
 		);
 	}
+
+	/**
+	 * @ticket 60771
+	 */
+	public function test_sanitize_subtypes_validates_type() {
+		$response = $this->do_request_with_params(
+			array(
+				'subtype' => 'page',
+				'type'    => array( 'invalid' ),
+			)
+		);
+
+		$this->assertErrorResponse( 'rest_invalid_param', $response, 400 );
+	}
 }
diff --git a/tests/rest-api/rest-server.php b/tests/rest-api/rest-server.php
index 6432026697..8d05192bc1 100644
--- a/tests/rest-api/rest-server.php
+++ b/tests/rest-api/rest-server.php
@@ -931,6 +931,39 @@ class Tests_REST_Server extends WP_Test_REST_TestCase {
 		$this->assertSame( 'data', $result['untouched'] );
 	}
 
+	/**
+	 * Ensure embedding is with links in the data.
+	 *
+	 * @ticket 43439
+	 */
+	public function test_link_embedding_with_links() {
+		$data = array(
+			'_links' => array(
+				'wp:term' => array(
+					array(
+						'taxonomy'   => 'category',
+						'embeddable' => true,
+						'href'       => get_rest_url( 0, '/wp/v2/categories' ),
+					),
+					array(
+						'taxonomy'   => 'post_tag',
+						'embeddable' => true,
+						'href'       => get_rest_url( 0, '/wp/v2/tags' ),
+					),
+				),
+			),
+		);
+
+		$mock = new MockAction();
+		add_filter( 'rest_post_dispatch', array( $mock, 'filter' ), 10, 3 );
+
+		rest_get_server()->embed_links( $data, true );
+		$args = $mock->get_args();
+		foreach ( $args as $arg ) {
+			$this->assertSame( 100, $arg[2]['per_page'], 'Posts per page should be 100' );
+		}
+	}
+
 	/**
 	 * Ensure embed_links handles WP_Error objects returned by dispatch
 	 *
@@ -1187,17 +1220,132 @@ class Tests_REST_Server extends WP_Test_REST_TestCase {
 
 	/**
 	 * @ticket 52321
+	 * @ticket 59935
+	 *
+	 * @covers WP_REST_Server::get_index
 	 */
-	public function test_index_includes_site_icon() {
-		$server = new WP_REST_Server();
+	public function test_get_index_should_include_site_icon() {
 		update_option( 'site_icon', self::$icon_id );
 
+		$server  = new WP_REST_Server();
 		$request = new WP_REST_Request( 'GET', '/' );
 		$index   = $server->dispatch( $request );
 		$data    = $index->get_data();
 
-		$this->assertArrayHasKey( 'site_icon', $data );
-		$this->assertSame( self::$icon_id, $data['site_icon'] );
+		$this->assertArrayHasKey( 'site_logo', $data, 'The "site_logo" field is missing in the response.' );
+		$this->assertArrayHasKey( 'site_icon', $data, 'The "site_icon" field is missing in the response.' );
+		$this->assertArrayHasKey( 'site_icon_url', $data, 'The "site_icon_url" field is missing in the response.' );
+		$this->assertSame( self::$icon_id, $data['site_icon'], 'The response "site_icon" ID does not match.' );
+		$this->assertStringContainsString( 'test-image-large', $data['site_icon_url'], 'The "site_icon_url" should contain the expected image.' );
+	}
+	/**
+	 * @ticket 52321
+	 * @ticket 59935
+	 *
+	 * @covers WP_REST_Server::get_index
+	 */
+	public function test_get_index_should_not_include_site_icon() {
+		$server  = new WP_REST_Server();
+		$request = new WP_REST_Request( 'GET', '/' );
+		$index   = $server->dispatch( $request );
+		$data    = $index->get_data();
+
+		$this->assertArrayHasKey( 'site_logo', $data, 'The "site_logo" field is missing in the response.' );
+		$this->assertArrayHasKey( 'site_icon', $data, 'The "site_icon" field is missing in the response.' );
+		$this->assertArrayHasKey( 'site_icon_url', $data, 'The "site_icon_url" field is missing in the response.' );
+		$this->assertSame( 0, $data['site_icon'], 'Response "site_icon" should be 0.' );
+		$this->assertSame( '', $data['site_icon_url'], 'Response "site_icon_url" should be an empty string.' );
+	}
+
+	/**
+	 * Test that the "get_index" method returns the expected site_icon*
+	 * and site_logo fields based on the specified request parameters.
+	 *
+	 * @ticket 59935
+	 *
+	 * @covers WP_REST_Server::get_index
+	 *
+	 * @dataProvider data_get_index_should_return_site_icon_and_site_logo_fields
+	 *
+	 * @param string $fields            List of fields to use in the request.
+	 * @param array  $expected_fields   Expected fields.
+	 * @param array  $unexpected_fields Optional. Fields that should not be in the results. Default array().
+	 * @param bool   $is_embed          Optional. Whether to use the "_embed" request parameter. Default false.
+	 */
+	public function test_get_index_should_return_site_icon_and_site_logo_fields( $fields, $expected_fields, $unexpected_fields = array(), $is_embed = false ) {
+		$server  = new WP_REST_Server();
+		$request = new WP_REST_Request( 'GET', '/', array() );
+		$request->set_param( '_fields', $fields );
+		if ( $is_embed ) {
+			$request->set_param( '_embed', true );
+		}
+
+		$response = $server->get_index( $request )->get_data();
+
+		foreach ( $expected_fields as $expected_field ) {
+			$this->assertArrayHasKey( $expected_field, $response, "Expected \"{$expected_field}\" field is missing in the response." );
+		}
+
+		foreach ( $unexpected_fields as $unexpected_field ) {
+			$this->assertArrayNotHasKey( $unexpected_field, $response, "Response must not contain the \"{$unexpected_field}\" field." );
+		}
+	}
+
+	/**
+	 * Data provider.
+	 *
+	 * @return array
+	 */
+	public function data_get_index_should_return_site_icon_and_site_logo_fields() {
+		return array(
+			'no site_logo or site_icon fields'   => array(
+				'fields'            => 'name',
+				'expected_fields'   => array(),
+				'unexpected_fields' => array( 'site_logo', 'site_icon', 'site_icon_url' ),
+			),
+			'_links request parameter'           => array(
+				'fields'          => '_links',
+				'expected_fields' => array( 'site_logo', 'site_icon', 'site_icon_url' ),
+			),
+			'_embed request parameter'           => array(
+				'field'             => '_embed',
+				'expected_fields'   => array( 'site_logo', 'site_icon', 'site_icon_url' ),
+				'unexpected_fields' => array(),
+				'is_embed'          => true,
+			),
+			'site_logo field'                    => array(
+				'fields'            => 'site_logo',
+				'expected_fields'   => array( 'site_logo' ),
+				'unexpected_fields' => array( 'site_icon', 'site_icon_url' ),
+			),
+			'site_icon field'                    => array(
+				'fields'            => 'site_icon',
+				'expected_fields'   => array( 'site_icon', 'site_icon_url' ),
+				'unexpected_fields' => array( 'site_logo' ),
+			),
+			'site_icon_url field'                => array(
+				'fields'            => 'site_icon_url',
+				'expected_fields'   => array( 'site_icon', 'site_icon_url' ),
+				'unexpected_fields' => array( 'site_logo' ),
+			),
+			'site_icon and site_icon_url field'  => array(
+				'fields'            => 'site_icon_url',
+				'expected_fields'   => array( 'site_icon', 'site_icon_url' ),
+				'unexpected_fields' => array( 'site_logo' ),
+			),
+			'site_logo and site_icon fields'     => array(
+				'fields'          => 'site_logo,site_icon',
+				'expected_fields' => array( 'site_logo', 'site_icon', 'site_icon_url' ),
+			),
+			'site_logo and site_icon_url fields' => array(
+				'fields'          => 'site_logo,site_icon_url',
+				'expected_fields' => array( 'site_logo', 'site_icon', 'site_icon_url' ),
+			),
+			'site_logo, site_icon, and site_icon_url fields' => array(
+				'fields'          => 'site_logo,site_icon,site_icon_url',
+				'expected_fields' => array( 'site_logo', 'site_icon', 'site_icon_url' ),
+			),
+		);
 	}
 
 	public function test_get_namespace_index() {
diff --git a/tests/rest-api/rest-themes-controller.php b/tests/rest-api/rest-themes-controller.php
index 24b564debb..7a5438951c 100644
--- a/tests/rest-api/rest-themes-controller.php
+++ b/tests/rest-api/rest-themes-controller.php
@@ -127,6 +127,9 @@ class WP_Test_REST_Themes_Controller extends WP_Test_REST_Controller_Testcase {
 		self::delete_user( self::$subscriber_id );
 		self::delete_user( self::$contributor_id );
 		self::delete_user( self::$admin_id );
+
+		remove_theme_support( 'editor-gradient-presets' );
+		remove_theme_support( 'editor-color-palette' );
 	}
 
 	/**
diff --git a/tests/rest-api/rest-users-controller.php b/tests/rest-api/rest-users-controller.php
index f4dbc2d57f..2cad1ef032 100644
--- a/tests/rest-api/rest-users-controller.php
+++ b/tests/rest-api/rest-users-controller.php
@@ -691,6 +691,25 @@ class WP_Test_REST_Users_Controller extends WP_Test_REST_Controller_Testcase {
 		$this->assertSame( $adam_id, $data[0]['id'] );
 	}
 
+	public function test_get_items_search_fields() {
+		$request = new WP_REST_Request( 'GET', '/wp/v2/users' );
+		$request->set_param( 'search', 'yololololo' );
+		$response = rest_get_server()->dispatch( $request );
+		$this->assertCount( 0, $response->get_data() );
+
+		$yolo_id = self::factory()->user->create( array( 'user_email' => 'yololololo@example.localhost' ) );
+
+		wp_set_current_user( self::$user );
+		$request = new WP_REST_Request( 'GET', '/wp/v2/users' );
+		$request->set_param( 'search', 'yololololo' );
+		$response = rest_get_server()->dispatch( $request );
+		$this->assertCount( 1, $response->get_data() );
+
+		wp_set_current_user( self::$editor );
+		$response = rest_get_server()->dispatch( $request );
+		$this->assertCount( 0, $response->get_data() );
+	}
+
 	public function test_get_items_slug_query() {
 		wp_set_current_user( self::$user );
 
@@ -2501,7 +2520,7 @@ class WP_Test_REST_Users_Controller extends WP_Test_REST_Controller_Testcase {
 			)
 		);
 
-		// Sanity check to ensure the factory created the post correctly.
+		// Confidence check to ensure the factory created the post correctly.
 		$post = get_post( $test_post );
 		$this->assertEquals( $user_id, $post->post_author );
 
diff --git a/tests/rest-api/wpIsRestEndpoint.php b/tests/rest-api/wpIsRestEndpoint.php
new file mode 100644
index 0000000000..b46749310a
--- /dev/null
+++ b/tests/rest-api/wpIsRestEndpoint.php
@@ -0,0 +1,66 @@
+<?php
+
+/**
+ * Tests for the `wp_is_rest_endpoint()` function.
+ *
+ * @group rest-api
+ * @covers ::wp_is_rest_endpoint
+ */
+class Tests_Media_Wp_Is_Rest_Endpoint extends WP_UnitTestCase {
+
+	/**
+	 * Tests that `wp_is_rest_endpoint()` returns false by default.
+	 *
+	 * @ticket 42061
+	 */
+	public function test_wp_is_rest_endpoint_default() {
+		$this->assertFalse( wp_is_rest_endpoint() );
+	}
+
+	/**
+	 * Tests that `wp_is_rest_endpoint()` relies on whether the global REST server is dispatching.
+	 *
+	 * @ticket 42061
+	 */
+	public function test_wp_is_rest_endpoint_via_global() {
+		global $wp_rest_server;
+
+		$wp_rest_server = new Spy_REST_Server();
+		do_action( 'rest_api_init', $wp_rest_server );
+
+		// The presence of a REST server itself won't set this to true.
+		$this->assertFalse( wp_is_rest_endpoint() );
+
+		// Set up filter to record value during dispatching.
+		$result_within_request = null;
+		add_filter(
+			'rest_pre_dispatch',
+			function ( $result ) use ( &$result_within_request ) {
+				$result_within_request = wp_is_rest_endpoint();
+				return $result;
+			}
+		);
+
+		/*
+		 * Dispatch a request (doesn't matter that it's invalid).
+		 * This already is completed after this method call.
+		 */
+		$wp_rest_server->dispatch( new WP_REST_Request() );
+
+		// Within that request, the function should have returned true.
+		$this->assertTrue( $result_within_request );
+
+		// After the dispatching, the function should return false again.
+		$this->assertFalse( wp_is_rest_endpoint() );
+	}
+
+	/**
+	 * Tests that `wp_is_rest_endpoint()` returns a result enforced via filter.
+	 *
+	 * @ticket 42061
+	 */
+	public function test_wp_is_rest_endpoint_via_filter() {
+		add_filter( 'wp_is_rest_endpoint', '__return_true' );
+		$this->assertTrue( wp_is_rest_endpoint() );
+	}
+}
diff --git a/tests/rest-api/wpRestTemplateAutosavesController.php b/tests/rest-api/wpRestTemplateAutosavesController.php
new file mode 100644
index 0000000000..430bc87cc2
--- /dev/null
+++ b/tests/rest-api/wpRestTemplateAutosavesController.php
@@ -0,0 +1,415 @@
+<?php
+/**
+ * Unit tests covering WP_REST_Template_Autosaves_Controller functionality.
+ *
+ * @package WordPress
+ * @subpackage REST API
+ *
+ * @group restapi
+ */
+class Tests_REST_wpRestTemplateAutosavesController extends WP_Test_REST_Controller_Testcase {
+
+	/**
+	 * @var string
+	 */
+	const TEST_THEME = 'block-theme';
+
+	/**
+	 * @var string
+	 */
+	const TEMPLATE_NAME = 'my_template';
+
+	/**
+	 * @var string
+	 */
+	const PARENT_POST_TYPE = 'wp_template';
+
+	/**
+	 * Admin user ID.
+	 *
+	 * @since 6.4.0
+	 *
+	 * @var int
+	 */
+	private static $admin_id;
+
+	/**
+	 * Contributor user ID.
+	 *
+	 * @since 6.4.0
+	 *
+	 * @var int
+	 */
+	private static $contributor_id;
+
+	/**
+	 * Template post.
+	 *
+	 * @since 6.4.0
+	 *
+	 * @var WP_Post
+	 */
+	private static $template_post;
+
+	/**
+	 * Create fake data before our tests run.
+	 *
+	 * @param WP_UnitTest_Factory $factory Helper that lets us create fake data.
+	 */
+	public static function wpSetUpBeforeClass( WP_UnitTest_Factory $factory ) {
+		self::$contributor_id = $factory->user->create(
+			array(
+				'role' => 'contributor',
+			)
+		);
+
+		self::$admin_id = $factory->user->create(
+			array(
+				'role' => 'administrator',
+			)
+		);
+		wp_set_current_user( self::$admin_id );
+
+		// Set up template post.
+		self::$template_post = $factory->post->create_and_get(
+			array(
+				'post_type'    => self::PARENT_POST_TYPE,
+				'post_name'    => self::TEMPLATE_NAME,
+				'post_title'   => 'My Template',
+				'post_content' => 'Content',
+				'post_excerpt' => 'Description of my template',
+				'tax_input'    => array(
+					'wp_theme' => array(
+						self::TEST_THEME,
+					),
+				),
+			)
+		);
+		wp_set_post_terms( self::$template_post->ID, self::TEST_THEME, 'wp_theme' );
+	}
+
+	/**
+	 * @covers WP_REST_Template_Autosaves_Controller::register_routes
+	 * @ticket 56922
+	 */
+	public function test_register_routes() {
+		$routes = rest_get_server()->get_routes();
+		$this->assertArrayHasKey(
+			'/wp/v2/templates/(?P<id>([^\/:<>\*\?"\|]+(?:\/[^\/:<>\*\?"\|]+)?)[\/\w%-]+)/autosaves',
+			$routes,
+			'Template autosaves route does not exist.'
+		);
+		$this->assertArrayHasKey(
+			'/wp/v2/templates/(?P<parent>([^\/:<>\*\?"\|]+(?:\/[^\/:<>\*\?"\|]+)?)[\/\w%-]+)/autosaves/(?P<id>[\d]+)',
+			$routes,
+			'Single template autosave based on the given ID route does not exist.'
+		);
+		$this->assertArrayHasKey(
+			'/wp/v2/template-parts/(?P<id>([^\/:<>\*\?"\|]+(?:\/[^\/:<>\*\?"\|]+)?)[\/\w%-]+)/autosaves',
+			$routes,
+			'Template part autosaves route does not exist.'
+		);
+		$this->assertArrayHasKey(
+			'/wp/v2/template-parts/(?P<parent>([^\/:<>\*\?"\|]+(?:\/[^\/:<>\*\?"\|]+)?)[\/\w%-]+)/autosaves/(?P<id>[\d]+)',
+			$routes,
+			'Single template part autosave based on the given ID route does not exist.'
+		);
+	}
+
+	/**
+	 * @covers WP_REST_Template_Autosaves_Controller::get_context_param
+	 * @ticket 56922
+	 */
+	public function test_context_param() {
+		// Collection.
+		$request  = new WP_REST_Request( 'OPTIONS', '/wp/v2/templates/' . self::TEST_THEME . '/' . self::TEMPLATE_NAME . '/autosaves' );
+		$response = rest_get_server()->dispatch( $request );
+		$data     = $response->get_data();
+
+		// Collection.
+		$this->assertCount(
+			2,
+			$data['endpoints'],
+			'Failed to assert that the collection autosave endpoints count is 2.'
+		);
+		$this->assertSame(
+			'view',
+			$data['endpoints'][0]['args']['context']['default'],
+			'Failed to assert that the default context for the GET collection endpoint is "view".'
+		);
+		$this->assertSame(
+			array( 'view', 'embed', 'edit' ),
+			$data['endpoints'][0]['args']['context']['enum'],
+			"Failed to assert that the enum values for the GET collection endpoint are 'view', 'embed', and 'edit'."
+		);
+
+		// Single.
+		$request  = new WP_REST_Request( 'OPTIONS', '/wp/v2/templates/' . self::TEST_THEME . '/' . self::TEMPLATE_NAME . '/autosaves/1' );
+		$response = rest_get_server()->dispatch( $request );
+		$data     = $response->get_data();
+		$this->assertCount(
+			1,
+			$data['endpoints'],
+			'Failed to assert that the single autosave endpoints count is 1.'
+		);
+		$this->assertSame(
+			'view',
+			$data['endpoints'][0]['args']['context']['default'],
+			'Failed to assert that the default context for the single autosave endpoint is "view".'
+		);
+		$this->assertSame(
+			array( 'view', 'embed', 'edit' ),
+			$data['endpoints'][0]['args']['context']['enum'],
+			"Failed to assert that the enum values for the single autosave endpoint are 'view', 'embed', and 'edit'."
+		);
+	}
+
+	/**
+	 * @covers WP_REST_Template_Autosaves_Controller::get_items
+	 * @ticket 56922
+	 */
+	public function test_get_items() {
+		wp_set_current_user( self::$admin_id );
+		$autosave_post_id = wp_create_post_autosave(
+			array(
+				'post_content' => 'Autosave content.',
+				'post_ID'      => self::$template_post->ID,
+				'post_type'    => self::PARENT_POST_TYPE,
+			)
+		);
+
+		$request   = new WP_REST_Request(
+			'GET',
+			'/wp/v2/templates/' . self::TEST_THEME . '/' . self::TEMPLATE_NAME . '/autosaves'
+		);
+		$response  = rest_get_server()->dispatch( $request );
+		$autosaves = $response->get_data();
+
+		$this->assertCount(
+			1,
+			$autosaves,
+			'Failed asserting that the response data contains exactly 1 item.'
+		);
+
+		$this->assertSame(
+			$autosave_post_id,
+			$autosaves[0]['wp_id'],
+			'Failed asserting that the ID of the autosave matches the expected autosave post ID.'
+		);
+		$this->assertSame(
+			self::$template_post->ID,
+			$autosaves[0]['parent'],
+			'Failed asserting that the parent ID of the autosave matches the template post ID.'
+		);
+		$this->assertSame(
+			'Autosave content.',
+			$autosaves[0]['content']['raw'],
+			'Failed asserting that the content of the autosave is "Autosave content.".'
+		);
+	}
+
+	/**
+	 * @covers WP_REST_Template_Autosaves_Controller::get_item
+	 * @ticket 56922
+	 */
+	public function test_get_item() {
+		wp_set_current_user( self::$admin_id );
+
+		$autosave_post_id = wp_create_post_autosave(
+			array(
+				'post_content' => 'Autosave content.',
+				'post_ID'      => self::$template_post->ID,
+				'post_type'    => self::PARENT_POST_TYPE,
+			)
+		);
+
+		$request  = new WP_REST_Request( 'GET', '/wp/v2/templates/' . self::TEST_THEME . '/' . self::TEMPLATE_NAME . '/autosaves/' . $autosave_post_id );
+		$response = rest_get_server()->dispatch( $request );
+		$autosave = $response->get_data();
+
+		$this->assertIsArray( $autosave, 'Failed asserting that the autosave is an array.' );
+		$this->assertSame(
+			$autosave_post_id,
+			$autosave['wp_id'],
+			"Failed asserting that the autosave id is the same as $autosave_post_id."
+		);
+		$this->assertSame(
+			self::$template_post->ID,
+			$autosave['parent'],
+			sprintf(
+				'Failed asserting that the parent id of the autosave is the same as %s.',
+				self::$template_post->ID
+			)
+		);
+	}
+
+	/**
+	 * @covers WP_REST_Template_Autosaves_Controller::prepare_item_for_response
+	 * @ticket 56922
+	 */
+	public function test_prepare_item() {
+		wp_set_current_user( self::$admin_id );
+		$autosave_post_id = wp_create_post_autosave(
+			array(
+				'post_content' => 'Autosave content.',
+				'post_ID'      => self::$template_post->ID,
+				'post_type'    => self::PARENT_POST_TYPE,
+			)
+		);
+		$autosave_db_post = get_post( $autosave_post_id );
+		$template_id      = self::TEST_THEME . '//' . self::TEMPLATE_NAME;
+		$request          = new WP_REST_Request( 'GET', '/wp/v2/templates/' . $template_id . '/autosaves/' . $autosave_db_post->ID );
+		$controller       = new WP_REST_Template_Autosaves_Controller( self::PARENT_POST_TYPE );
+		$response         = $controller->prepare_item_for_response( $autosave_db_post, $request );
+		$this->assertInstanceOf(
+			WP_REST_Response::class,
+			$response,
+			'Failed asserting that the response object is an instance of WP_REST_Response.'
+		);
+
+		$autosave = $response->get_data();
+		$this->assertIsArray( $autosave, 'Failed asserting that the autosave is an array.' );
+		$this->assertSame(
+			$autosave_db_post->ID,
+			$autosave['wp_id'],
+			"Failed asserting that the autosave id is the same as $autosave_db_post->ID."
+		);
+		$this->assertSame(
+			self::$template_post->ID,
+			$autosave['parent'],
+			sprintf(
+				'Failed asserting that the parent id of the autosave is the same as %s.',
+				self::$template_post->ID
+			)
+		);
+
+		$links = $response->get_links();
+		$this->assertIsArray( $links, 'Failed asserting that the links are an array.' );
+
+		$this->assertStringEndsWith(
+			$template_id . '/autosaves/' . $autosave_db_post->ID,
+			$links['self'][0]['href'],
+			"Failed asserting that the self link ends with $template_id . '/autosaves/' . $autosave_db_post->ID."
+		);
+
+		$this->assertStringEndsWith(
+			$template_id,
+			$links['parent'][0]['href'],
+			"Failed asserting that the parent link ends with %$template_id."
+		);
+	}
+
+	/**
+	 * @covers WP_REST_Template_Autosaves_Controller::get_item_schema
+	 * @ticket 56922
+	 */
+	public function test_get_item_schema() {
+		$request  = new WP_REST_Request( 'OPTIONS', '/wp/v2/templates/' . self::TEST_THEME . '/' . self::TEMPLATE_NAME . '/autosaves' );
+		$response = rest_get_server()->dispatch( $request );
+		$data     = $response->get_data();
+
+		$properties = $data['schema']['properties'];
+
+		$this->assertCount( 18, $properties );
+		$this->assertArrayHasKey( 'id', $properties, 'ID key should exist in properties.' );
+		$this->assertArrayHasKey( 'slug', $properties, 'Slug key should exist in properties.' );
+		$this->assertArrayHasKey( 'theme', $properties, 'Theme key should exist in properties.' );
+		$this->assertArrayHasKey( 'source', $properties, 'Source key should exist in properties.' );
+		$this->assertArrayHasKey( 'origin', $properties, 'Origin key should exist in properties.' );
+		$this->assertArrayHasKey( 'content', $properties, 'Content key should exist in properties.' );
+		$this->assertArrayHasKey( 'title', $properties, 'Title key should exist in properties.' );
+		$this->assertArrayHasKey( 'description', $properties, 'description key should exist in properties.' );
+		$this->assertArrayHasKey( 'status', $properties, 'status key should exist in properties.' );
+		$this->assertArrayHasKey( 'wp_id', $properties, 'wp_id key should exist in properties.' );
+		$this->assertArrayHasKey( 'has_theme_file', $properties, 'has_theme_file key should exist in properties.' );
+		$this->assertArrayHasKey( 'author', $properties, 'author key should exist in properties.' );
+		$this->assertArrayHasKey( 'modified', $properties, 'modified key should exist in properties.' );
+		$this->assertArrayHasKey( 'is_custom', $properties, 'is_custom key should exist in properties.' );
+		$this->assertArrayHasKey( 'parent', $properties, 'Parent key should exist in properties.' );
+		$this->assertArrayHasKey( 'author_text', $properties, 'author_text key should exist in properties.' );
+		$this->assertArrayHasKey( 'original_source', $properties, 'original_source key should exist in properties.' );
+	}
+
+	/**
+	 * @covers WP_REST_Template_Autosaves_Controller::create_item
+	 * @ticket 56922
+	 */
+	public function test_create_item() {
+		wp_set_current_user( self::$admin_id );
+
+		$template_id = self::TEST_THEME . '/' . self::TEMPLATE_NAME;
+		$request     = new WP_REST_Request( 'POST', '/wp/v2/templates/' . $template_id . '/autosaves' );
+		$request->add_header( 'Content-Type', 'application/x-www-form-urlencoded' );
+
+		$request_parameters = array(
+			'title'   => 'Post Title',
+			'content' => 'Post content',
+			'excerpt' => 'Post excerpt',
+			'name'    => 'test',
+			'id'      => $template_id,
+		);
+
+		$request->set_body_params( $request_parameters );
+		$response = rest_get_server()->dispatch( $request );
+
+		$this->assertNotWPError( $response, 'The response from this request should not return a WP_Error object' );
+		$response = rest_ensure_response( $response );
+		$data     = $response->get_data();
+
+		$this->assertArrayHasKey( 'content', $data, 'Response should contain a key called content' );
+		$this->assertSame( $request_parameters['content'], $data['content']['raw'], 'Response data should match for field content' );
+
+		$this->assertArrayHasKey( 'title', $data, 'Response should contain a key called title' );
+		$this->assertSame( $request_parameters['title'], $data['title']['raw'], 'Response data should match for field title' );
+	}
+
+	/**
+	 * @covers WP_REST_Template_Autosaves_Controller::delete_item
+	 * @ticket 56922
+	 */
+	public function test_create_item_incorrect_permission() {
+		wp_set_current_user( self::$contributor_id );
+		$template_id = self::TEST_THEME . '/' . self::TEMPLATE_NAME;
+		$request     = new WP_REST_Request( 'POST', '/wp/v2/templates/' . $template_id . '/autosaves' );
+		$response    = rest_get_server()->dispatch( $request );
+		$this->assertErrorResponse( 'rest_cannot_manage_templates', $response, WP_Http::FORBIDDEN );
+	}
+
+	/**
+	 * @covers WP_REST_Template_Autosaves_Controller::delete_item
+	 * @ticket 56922
+	 */
+	public function test_create_item_no_permission() {
+		wp_set_current_user( 0 );
+		$template_id = self::TEST_THEME . '/' . self::TEMPLATE_NAME;
+		$request     = new WP_REST_Request( 'POST', '/wp/v2/templates/' . $template_id . '/autosaves' );
+		$response    = rest_get_server()->dispatch( $request );
+		$this->assertErrorResponse( 'rest_cannot_manage_templates', $response, WP_Http::UNAUTHORIZED );
+	}
+
+	/**
+	 * @coversNothing
+	 * @ticket 56922
+	 */
+	public function test_update_item() {
+		$this->markTestSkipped(
+			sprintf(
+				"The '%s' controller doesn't currently support the ability to update template autosaves.",
+				WP_REST_Template_Autosaves_Controller::class
+			)
+		);
+	}
+
+	/**
+	 * @coversNothing
+	 * @ticket 56922
+	 */
+	public function test_delete_item() {
+		$this->markTestSkipped(
+			sprintf(
+				"The '%s' controller doesn't currently support the ability to delete template autosaves.",
+				WP_REST_Template_Autosaves_Controller::class
+			)
+		);
+	}
+}
diff --git a/tests/rest-api/wpRestTemplateRevisionsController.php b/tests/rest-api/wpRestTemplateRevisionsController.php
new file mode 100644
index 0000000000..9362dd42a7
--- /dev/null
+++ b/tests/rest-api/wpRestTemplateRevisionsController.php
@@ -0,0 +1,561 @@
+<?php
+/**
+ * Unit tests covering WP_REST_Template_Revisions_Controller functionality.
+ *
+ * @package WordPress
+ * @subpackage REST API
+ *
+ * @group restapi
+ */
+class Tests_REST_wpRestTemplateRevisionsController extends WP_Test_REST_Controller_Testcase {
+
+	/**
+	 * @var string
+	 */
+	const TEST_THEME = 'block-theme';
+
+	/**
+	 * @var string
+	 */
+	const TEMPLATE_NAME = 'my_template';
+
+	/**
+	 * @var string
+	 */
+	const TEMPLATE_NAME_2 = 'my_template_2';
+
+	/**
+	 * @var string
+	 */
+	const PARENT_POST_TYPE = 'wp_template';
+
+	/**
+	 * Admin user ID.
+	 *
+	 * @since 6.4.0
+	 *
+	 * @var int
+	 */
+	private static $admin_id;
+
+	/**
+	 * Contributor user ID.
+	 *
+	 * @since 6.4.0
+	 *
+	 * @var int
+	 */
+	private static $contributor_id;
+
+	/**
+	 * Template post.
+	 *
+	 * @since 6.4.0
+	 *
+	 * @var WP_Post
+	 */
+	private static $template_post;
+
+	/**
+	 * Template post.
+	 *
+	 * @since 6.5.0
+	 *
+	 * @var WP_Post
+	 */
+	private static $template_post_2;
+
+	/**
+	 * @var array
+	 */
+	private static $revisions = array();
+
+	/**
+	 * Create fake data before our tests run.
+	 *
+	 * @param WP_UnitTest_Factory $factory Helper that lets us create fake data.
+	 */
+	public static function wpSetUpBeforeClass( WP_UnitTest_Factory $factory ) {
+		self::$admin_id = $factory->user->create(
+			array(
+				'role' => 'administrator',
+			)
+		);
+		wp_set_current_user( self::$admin_id );
+
+		self::$contributor_id = $factory->user->create(
+			array(
+				'role' => 'contributor',
+			)
+		);
+
+		// Set up template post.
+		self::$template_post = $factory->post->create_and_get(
+			array(
+				'post_type'    => self::PARENT_POST_TYPE,
+				'post_name'    => self::TEMPLATE_NAME,
+				'post_title'   => 'My Template',
+				'post_content' => 'Content',
+				'post_excerpt' => 'Description of my template',
+				'tax_input'    => array(
+					'wp_theme' => array(
+						self::TEST_THEME,
+					),
+				),
+			)
+		);
+		wp_set_post_terms( self::$template_post->ID, self::TEST_THEME, 'wp_theme' );
+
+		// Update post to create a new revisions.
+		self::$revisions[] = _wp_put_post_revision(
+			array(
+				'ID'           => self::$template_post->ID,
+				'post_content' => 'Content revision #2',
+			)
+		);
+
+		// Update post to create a new revisions.
+		self::$revisions[] = _wp_put_post_revision(
+			array(
+				'ID'           => self::$template_post->ID,
+				'post_content' => 'Content revision #3',
+			)
+		);
+
+		// Update post to create a new revisions.
+		self::$revisions[] = _wp_put_post_revision(
+			array(
+				'ID'           => self::$template_post->ID,
+				'post_content' => 'Content revision #4',
+			)
+		);
+
+		// Update post to create a new revisions.
+		self::$revisions[] = _wp_put_post_revision(
+			array(
+				'ID'           => self::$template_post->ID,
+				'post_content' => 'Content revision #5',
+			)
+		);
+
+		// Create a new template post to test the get_item method.
+		self::$template_post_2 = $factory->post->create_and_get(
+			array(
+				'post_type'    => self::PARENT_POST_TYPE,
+				'post_name'    => self::TEMPLATE_NAME_2,
+				'post_title'   => 'My Template 2',
+				'post_content' => 'Content 2',
+				'post_excerpt' => 'Description of my template 2',
+				'tax_input'    => array(
+					'wp_theme' => array(
+						self::TEST_THEME,
+					),
+				),
+			)
+		);
+		wp_set_post_terms( self::$template_post_2->ID, self::TEST_THEME, 'wp_theme' );
+	}
+
+	/**
+	 * Remove revisions when tests are complete.
+	 */
+	public static function wpTearDownAfterClass() {
+		// Also deletes revisions.
+		foreach ( self::$revisions as $revision ) {
+			wp_delete_post( $revision, true );
+		}
+	}
+
+	/**
+	 * @covers WP_REST_Template_Revisions_Controller::register_routes
+	 * @ticket 56922
+	 */
+	public function test_register_routes() {
+		$routes = rest_get_server()->get_routes();
+		$this->assertArrayHasKey(
+			'/wp/v2/templates/(?P<parent>([^\/:<>\*\?"\|]+(?:\/[^\/:<>\*\?"\|]+)?)[\/\w%-]+)/revisions',
+			$routes,
+			'Template revisions route does not exist.'
+		);
+		$this->assertArrayHasKey(
+			'/wp/v2/templates/(?P<parent>([^\/:<>\*\?"\|]+(?:\/[^\/:<>\*\?"\|]+)?)[\/\w%-]+)/revisions/(?P<id>[\d]+)',
+			$routes,
+			'Single template revision based on the given ID route does not exist.'
+		);
+		$this->assertArrayHasKey(
+			'/wp/v2/template-parts/(?P<parent>([^\/:<>\*\?"\|]+(?:\/[^\/:<>\*\?"\|]+)?)[\/\w%-]+)/revisions',
+			$routes,
+			'Template part revisions route does not exist.'
+		);
+		$this->assertArrayHasKey(
+			'/wp/v2/template-parts/(?P<parent>([^\/:<>\*\?"\|]+(?:\/[^\/:<>\*\?"\|]+)?)[\/\w%-]+)/revisions/(?P<id>[\d]+)',
+			$routes,
+			'Single template part revision based on the given ID route does not exist.'
+		);
+	}
+
+	/**
+	 * @covers WP_REST_Template_Revisions_Controller::get_context_param
+	 * @ticket 56922
+	 */
+	public function test_context_param() {
+		// Collection.
+		$request  = new WP_REST_Request( 'OPTIONS', '/wp/v2/templates/' . self::TEST_THEME . '/' . self::TEMPLATE_NAME . '/revisions' );
+		$response = rest_get_server()->dispatch( $request );
+		$data     = $response->get_data();
+		$this->assertSame(
+			'view',
+			$data['endpoints'][0]['args']['context']['default'],
+			'Failed to assert that the default context for the collection endpoint is "view".'
+		);
+		$this->assertSame(
+			array( 'view', 'embed', 'edit' ),
+			$data['endpoints'][0]['args']['context']['enum'],
+			'Failed to assert correct enum values for the collection endpoint.'
+		);
+
+		// Single.
+		$request  = new WP_REST_Request( 'OPTIONS', '/wp/v2/templates/' . self::TEST_THEME . '/' . self::TEMPLATE_NAME . '/revisions/1' );
+		$response = rest_get_server()->dispatch( $request );
+		$data     = $response->get_data();
+		$this->assertCount(
+			2,
+			$data['endpoints'],
+			'Failed to assert that the single revision endpoint count is 2.'
+		);
+		$this->assertSame(
+			'view',
+			$data['endpoints'][0]['args']['context']['default'],
+			'Failed to assert that the default context for the single revision endpoint is "view".'
+		);
+		$this->assertSame(
+			array( 'view', 'embed', 'edit' ),
+			$data['endpoints'][0]['args']['context']['enum'],
+			'Failed to assert correct enum values for the single revision endpoint.'
+		);
+	}
+
+	/**
+	 * @covers WP_REST_Template_Revisions_Controller::get_items
+	 * @ticket 56922
+	 */
+	public function test_get_items() {
+		wp_set_current_user( self::$admin_id );
+		$request   = new WP_REST_Request(
+			'GET',
+			'/wp/v2/templates/' . self::TEST_THEME . '/' . self::TEMPLATE_NAME . '/revisions'
+		);
+		$response  = rest_get_server()->dispatch( $request );
+		$revisions = $response->get_data();
+
+		$this->assertCount(
+			4,
+			$revisions,
+			'Failed asserting that the response data contains exactly 4 items.'
+		);
+
+		$this->assertSame(
+			self::$template_post->ID,
+			$revisions[0]['parent'],
+			'Failed asserting that the parent ID of the revision matches the template post ID.'
+		);
+		$this->assertSame(
+			'Content revision #5',
+			$revisions[0]['content']['raw'],
+			'Failed asserting that the content of the revision is "Content revision #5".'
+		);
+
+		$this->assertSame(
+			self::$template_post->ID,
+			$revisions[1]['parent'],
+			'Failed asserting that the parent ID of the revision matches the template post ID.'
+		);
+		$this->assertSame(
+			'Content revision #4',
+			$revisions[1]['content']['raw'],
+			'Failed asserting that the content of the revision is "Content revision #4".'
+		);
+
+		$this->assertSame(
+			self::$template_post->ID,
+			$revisions[2]['parent'],
+			'Failed asserting that the parent ID of the revision matches the template post ID.'
+		);
+		$this->assertSame(
+			'Content revision #3',
+			$revisions[2]['content']['raw'],
+			'Failed asserting that the content of the revision is "Content revision #3".'
+		);
+
+		$this->assertSame(
+			self::$template_post->ID,
+			$revisions[3]['parent'],
+			'Failed asserting that the parent ID of the revision matches the template post ID.'
+		);
+		$this->assertSame(
+			'Content revision #2',
+			$revisions[3]['content']['raw'],
+			'Failed asserting that the content of the revision is "Content revision #2".'
+		);
+	}
+
+
+	/**
+	 * @covers WP_REST_Template_Revisions_Controller::get_items_permissions_check
+	 * @ticket 56922
+	 */
+	public function test_get_items_endpoint_should_return_unauthorized_https_status_code_for_unauthorized_request() {
+		wp_set_current_user( 0 );
+		$request  = new WP_REST_Request( 'GET', '/wp/v2/templates/' . self::TEST_THEME . '/' . self::TEMPLATE_NAME . '/revisions' );
+		$response = rest_get_server()->dispatch( $request );
+		$this->assertErrorResponse( 'rest_cannot_read', $response, WP_Http::UNAUTHORIZED );
+	}
+
+	/**
+	 * @covers WP_REST_Template_Revisions_Controller::get_items_permissions_check
+	 * @ticket 56922
+	 */
+	public function test_get_items_endpoint_should_return_forbidden_https_status_code_for_users_with_insufficient_permissions() {
+		wp_set_current_user( self::$contributor_id );
+		$request  = new WP_REST_Request( 'GET', '/wp/v2/templates/' . self::TEST_THEME . '/' . self::TEMPLATE_NAME . '/revisions' );
+		$response = rest_get_server()->dispatch( $request );
+		$this->assertErrorResponse( 'rest_cannot_read', $response, WP_Http::FORBIDDEN );
+	}
+
+	/**
+	 * @covers WP_REST_Template_Revisions_Controller::get_item
+	 * @ticket 56922
+	 */
+	public function test_get_item() {
+		wp_set_current_user( self::$admin_id );
+
+		$revisions   = wp_get_post_revisions( self::$template_post, array( 'fields' => 'ids' ) );
+		$revision_id = array_shift( $revisions );
+
+		$request  = new WP_REST_Request( 'GET', '/wp/v2/templates/' . self::TEST_THEME . '/' . self::TEMPLATE_NAME . '/revisions/' . $revision_id );
+		$response = rest_get_server()->dispatch( $request );
+		$revision = $response->get_data();
+
+		$this->assertIsArray( $revision, 'Failed asserting that the revision is an array.' );
+		$this->assertSame(
+			$revision_id,
+			$revision['wp_id'],
+			"Failed asserting that the revision id is the same as $revision_id"
+		);
+		$this->assertSame(
+			self::$template_post->ID,
+			$revision['parent'],
+			sprintf(
+				'Failed asserting that the parent id of the revision is the same as %s.',
+				self::$template_post->ID
+			)
+		);
+	}
+
+	/**
+	 * @covers WP_REST_Template_Revisions_Controller::get_item
+	 * @ticket 56922
+	 */
+	public function test_get_item_not_found() {
+		wp_set_current_user( self::$admin_id );
+
+		$revisions   = wp_get_post_revisions( self::$template_post, array( 'fields' => 'ids' ) );
+		$revision_id = array_shift( $revisions );
+
+		$request  = new WP_REST_Request( 'GET', '/wp/v2/templates/invalid//parent/revisions/' . $revision_id );
+		$response = rest_get_server()->dispatch( $request );
+		$this->assertErrorResponse( 'rest_post_invalid_parent', $response, WP_Http::NOT_FOUND );
+	}
+
+	/**
+	 * @ticket 59875
+	 */
+	public function test_get_item_invalid_parent_id() {
+		wp_set_current_user( self::$admin_id );
+		$revisions   = wp_get_post_revisions( self::$template_post, array( 'fields' => 'ids' ) );
+		$revision_id = array_shift( $revisions );
+
+		$request = new WP_REST_Request( 'GET', '/wp/v2/templates/' . self::TEST_THEME . '/' . self::TEMPLATE_NAME_2 . '/revisions/' . $revision_id );
+
+		$response = rest_get_server()->dispatch( $request );
+		$this->assertErrorResponse( 'rest_revision_parent_id_mismatch', $response, 404 );
+
+		$expected_message = 'The revision does not belong to the specified parent with id of "' . self::$template_post_2->ID . '"';
+		$this->assertSame( $expected_message, $response->as_error()->get_error_messages()[0], 'The message must contain the correct parent ID.' );
+	}
+
+	/**
+	 * @covers WP_REST_Template_Revisions_Controller::prepare_item_for_response
+	 * @ticket 56922
+	 */
+	public function test_prepare_item() {
+		$revisions   = wp_get_post_revisions( self::$template_post, array( 'fields' => 'ids' ) );
+		$revision_id = array_shift( $revisions );
+		$post        = get_post( $revision_id );
+		$request     = new WP_REST_Request( 'GET', '/wp/v2/templates/' . self::TEST_THEME . '/' . self::TEMPLATE_NAME . '/revisions/' . $revision_id );
+		$controller  = new WP_REST_Template_Revisions_Controller( self::PARENT_POST_TYPE );
+		$response    = $controller->prepare_item_for_response( $post, $request );
+		$this->assertInstanceOf(
+			WP_REST_Response::class,
+			$response,
+			'Failed asserting that the response object is an instance of WP_REST_Response.'
+		);
+
+		$revision = $response->get_data();
+		$this->assertIsArray( $revision, 'Failed asserting that the revision is an array.' );
+		$this->assertSame(
+			$revision_id,
+			$revision['wp_id'],
+			"Failed asserting that the revision id is the same as $revision_id."
+		);
+		$this->assertSame(
+			self::$template_post->ID,
+			$revision['parent'],
+			sprintf(
+				'Failed asserting that the parent id of the revision is the same as %s.',
+				self::$template_post->ID
+			)
+		);
+
+		$links = $response->get_links();
+		$this->assertIsArray( $links, 'Failed asserting that the links are an array.' );
+
+		$this->assertStringEndsWith(
+			self::TEST_THEME . '//' . self::TEMPLATE_NAME . '/revisions/' . $revision_id,
+			$links['self'][0]['href'],
+			sprintf(
+				'Failed asserting that the self link ends with %s.',
+				self::TEST_THEME . '//' . self::TEMPLATE_NAME . '/revisions/' . $revision_id
+			)
+		);
+
+		$this->assertStringEndsWith(
+			self::TEST_THEME . '//' . self::TEMPLATE_NAME,
+			$links['parent'][0]['href'],
+			sprintf(
+				'Failed asserting that the parent link ends with %s.',
+				self::TEST_THEME . '//' . self::TEMPLATE_NAME
+			)
+		);
+	}
+
+	/**
+	 * @covers WP_REST_Template_Revisions_Controller::get_item_schema
+	 * @ticket 56922
+	 */
+	public function test_get_item_schema() {
+		$request    = new WP_REST_Request( 'OPTIONS', '/wp/v2/templates/' . self::TEST_THEME . '/' . self::TEMPLATE_NAME . '/revisions' );
+		$response   = rest_get_server()->dispatch( $request );
+		$data       = $response->get_data();
+		$properties = $data['schema']['properties'];
+
+		$this->assertCount( 18, $properties );
+		$this->assertArrayHasKey( 'id', $properties, 'ID key should exist in properties.' );
+		$this->assertArrayHasKey( 'slug', $properties, 'Slug key should exist in properties.' );
+		$this->assertArrayHasKey( 'theme', $properties, 'Theme key should exist in properties.' );
+		$this->assertArrayHasKey( 'source', $properties, 'Source key should exist in properties.' );
+		$this->assertArrayHasKey( 'origin', $properties, 'Origin key should exist in properties.' );
+		$this->assertArrayHasKey( 'content', $properties, 'Content key should exist in properties.' );
+		$this->assertArrayHasKey( 'title', $properties, 'Title key should exist in properties.' );
+		$this->assertArrayHasKey( 'description', $properties, 'description key should exist in properties.' );
+		$this->assertArrayHasKey( 'status', $properties, 'status key should exist in properties.' );
+		$this->assertArrayHasKey( 'wp_id', $properties, 'wp_id key should exist in properties.' );
+		$this->assertArrayHasKey( 'has_theme_file', $properties, 'has_theme_file key should exist in properties.' );
+		$this->assertArrayHasKey( 'author', $properties, 'author key should exist in properties.' );
+		$this->assertArrayHasKey( 'modified', $properties, 'modified key should exist in properties.' );
+		$this->assertArrayHasKey( 'is_custom', $properties, 'is_custom key should exist in properties.' );
+		$this->assertArrayHasKey( 'parent', $properties, 'Parent key should exist in properties.' );
+		$this->assertArrayHasKey( 'author_text', $properties, 'author_text key should exist in properties.' );
+		$this->assertArrayHasKey( 'original_source', $properties, 'original_source key should exist in properties.' );
+	}
+
+	/**
+	 * @coversNothing
+	 * @ticket 56922
+	 */
+	public function test_create_item() {
+		$this->markTestSkipped(
+			sprintf(
+				"The '%s' controller doesn't currently support the ability to create template revisions.",
+				WP_REST_Template_Revisions_Controller::class
+			)
+		);
+	}
+
+	/**
+	 * @coversNothing
+	 * @ticket 56922
+	 */
+	public function test_update_item() {
+		$this->markTestSkipped(
+			sprintf(
+				"The '%s' controller doesn't currently support the ability to update template revisions.",
+				WP_REST_Template_Revisions_Controller::class
+			)
+		);
+	}
+
+	/**
+	 * @covers WP_REST_Templates_Controller::delete_item
+	 * @ticket 56922
+	 */
+	public function test_delete_item() {
+		wp_set_current_user( self::$admin_id );
+
+		$revision_id       = _wp_put_post_revision( self::$template_post );
+		self::$revisions[] = $revision_id;
+
+		$request = new WP_REST_Request( 'DELETE', '/wp/v2/templates/' . self::TEST_THEME . '/' . self::TEMPLATE_NAME . '/revisions/' . $revision_id );
+		$request->set_param( 'force', true );
+		$response = rest_get_server()->dispatch( $request );
+
+		$this->assertSame( 200, $response->get_status(), 'Failed asserting that the response status is 200.' );
+		$this->assertNull( get_post( $revision_id ), 'Failed asserting that the post with the given revision ID is deleted.' );
+	}
+
+	/**
+	 * @covers WP_REST_Templates_Controller::delete_item
+	 * @ticket 56922
+	 */
+	public function test_delete_item_incorrect_permission() {
+		wp_set_current_user( self::$contributor_id );
+		$revision_id       = _wp_put_post_revision( self::$template_post );
+		self::$revisions[] = $revision_id;
+
+		$request = new WP_REST_Request( 'DELETE', '/wp/v2/templates/' . self::TEST_THEME . '/' . self::TEMPLATE_NAME . '/revisions/' . $revision_id );
+		$request->set_param( 'force', true );
+		$response = rest_get_server()->dispatch( $request );
+		$this->assertErrorResponse( 'rest_cannot_delete', $response, WP_Http::FORBIDDEN );
+	}
+
+	/**
+	 * @covers WP_REST_Templates_Controller::delete_item
+	 * @ticket 56922
+	 */
+	public function test_delete_item_no_permission() {
+		wp_set_current_user( 0 );
+		$revision_id       = _wp_put_post_revision( self::$template_post );
+		self::$revisions[] = $revision_id;
+
+		$request = new WP_REST_Request( 'DELETE', '/wp/v2/templates/' . self::TEST_THEME . '/' . self::TEMPLATE_NAME . '/revisions/' . $revision_id );
+		$request->set_param( 'force', true );
+		$response = rest_get_server()->dispatch( $request );
+		$this->assertErrorResponse( 'rest_cannot_delete', $response, WP_Http::UNAUTHORIZED );
+	}
+
+	/**
+	 * @covers WP_REST_Template_Revisions_Controller::get_item
+	 * @ticket 56922
+	 */
+	public function test_delete_item_not_found() {
+		wp_set_current_user( self::$admin_id );
+
+		$revision_id       = _wp_put_post_revision( self::$template_post );
+		self::$revisions[] = $revision_id;
+
+		$request = new WP_REST_Request( 'DELETE', '/wp/v2/templates/invalid//parent/revisions/' . $revision_id );
+		$request->set_param( 'force', true );
+		$response = rest_get_server()->dispatch( $request );
+		$this->assertErrorResponse( 'rest_post_invalid_parent', $response, WP_Http::NOT_FOUND );
+	}
+}
diff --git a/tests/rest-api/wpRestTemplatesController.php b/tests/rest-api/wpRestTemplatesController.php
index 266ca89a33..9665939dd6 100644
--- a/tests/rest-api/wpRestTemplatesController.php
+++ b/tests/rest-api/wpRestTemplatesController.php
@@ -49,6 +49,22 @@ class Tests_REST_WpRestTemplatesController extends WP_Test_REST_Controller_Testc
 		wp_delete_post( self::$post->ID );
 	}
 
+	/**
+	 * Tear down after each test.
+	 *
+	 * @since 6.5.0
+	 */
+	public function tear_down() {
+		if ( has_filter( 'rest_pre_insert_wp_template_part', 'inject_ignored_hooked_blocks_metadata_attributes' ) ) {
+			remove_filter( 'rest_pre_insert_wp_template_part', 'inject_ignored_hooked_blocks_metadata_attributes', 10 );
+		}
+		if ( WP_Block_Type_Registry::get_instance()->is_registered( 'tests/block' ) ) {
+			unregister_block_type( 'tests/hooked-block' );
+		}
+
+		parent::tear_down();
+	}
+
 	/**
 	 * @covers WP_REST_Templates_Controller::register_routes
 	 * @ticket 54596
@@ -102,23 +118,25 @@ class Tests_REST_WpRestTemplatesController extends WP_Test_REST_Controller_Testc
 
 		$this->assertSame(
 			array(
-				'id'             => 'default//my_template',
-				'theme'          => 'default',
-				'slug'           => 'my_template',
-				'source'         => 'custom',
-				'origin'         => null,
-				'type'           => 'wp_template',
-				'description'    => 'Description of my template.',
-				'title'          => array(
+				'id'              => 'default//my_template',
+				'theme'           => 'default',
+				'slug'            => 'my_template',
+				'source'          => 'custom',
+				'origin'          => null,
+				'type'            => 'wp_template',
+				'description'     => 'Description of my template.',
+				'title'           => array(
 					'raw'      => 'My Template',
 					'rendered' => 'My Template',
 				),
-				'status'         => 'publish',
-				'wp_id'          => self::$post->ID,
-				'has_theme_file' => false,
-				'is_custom'      => true,
-				'author'         => 0,
-				'modified'       => mysql_to_rfc3339( self::$post->post_modified ),
+				'status'          => 'publish',
+				'wp_id'           => self::$post->ID,
+				'has_theme_file'  => false,
+				'is_custom'       => true,
+				'author'          => 0,
+				'modified'        => mysql_to_rfc3339( self::$post->post_modified ),
+				'author_text'     => 'Test Blog',
+				'original_source' => 'site',
 			),
 			$this->find_and_normalize_template_by_id( $data, 'default//my_template' )
 		);
@@ -147,23 +165,25 @@ class Tests_REST_WpRestTemplatesController extends WP_Test_REST_Controller_Testc
 
 		$this->assertSame(
 			array(
-				'id'             => 'default//my_template',
-				'theme'          => 'default',
-				'slug'           => 'my_template',
-				'source'         => 'custom',
-				'origin'         => null,
-				'type'           => 'wp_template',
-				'description'    => 'Description of my template.',
-				'title'          => array(
+				'id'              => 'default//my_template',
+				'theme'           => 'default',
+				'slug'            => 'my_template',
+				'source'          => 'custom',
+				'origin'          => null,
+				'type'            => 'wp_template',
+				'description'     => 'Description of my template.',
+				'title'           => array(
 					'raw'      => 'My Template',
 					'rendered' => 'My Template',
 				),
-				'status'         => 'publish',
-				'wp_id'          => self::$post->ID,
-				'has_theme_file' => false,
-				'is_custom'      => true,
-				'author'         => 0,
-				'modified'       => mysql_to_rfc3339( self::$post->post_modified ),
+				'status'          => 'publish',
+				'wp_id'           => self::$post->ID,
+				'has_theme_file'  => false,
+				'is_custom'       => true,
+				'author'          => 0,
+				'modified'        => mysql_to_rfc3339( self::$post->post_modified ),
+				'author_text'     => 'Test Blog',
+				'original_source' => 'site',
 			),
 			$data
 		);
@@ -184,23 +204,25 @@ class Tests_REST_WpRestTemplatesController extends WP_Test_REST_Controller_Testc
 
 		$this->assertSame(
 			array(
-				'id'             => 'default//my_template',
-				'theme'          => 'default',
-				'slug'           => 'my_template',
-				'source'         => 'custom',
-				'origin'         => null,
-				'type'           => 'wp_template',
-				'description'    => 'Description of my template.',
-				'title'          => array(
+				'id'              => 'default//my_template',
+				'theme'           => 'default',
+				'slug'            => 'my_template',
+				'source'          => 'custom',
+				'origin'          => null,
+				'type'            => 'wp_template',
+				'description'     => 'Description of my template.',
+				'title'           => array(
 					'raw'      => 'My Template',
 					'rendered' => 'My Template',
 				),
-				'status'         => 'publish',
-				'wp_id'          => self::$post->ID,
-				'has_theme_file' => false,
-				'is_custom'      => true,
-				'author'         => 0,
-				'modified'       => mysql_to_rfc3339( self::$post->post_modified ),
+				'status'          => 'publish',
+				'wp_id'           => self::$post->ID,
+				'has_theme_file'  => false,
+				'is_custom'       => true,
+				'author'          => 0,
+				'modified'        => mysql_to_rfc3339( self::$post->post_modified ),
+				'author_text'     => 'Test Blog',
+				'original_source' => 'site',
 			),
 			$data
 		);
@@ -241,26 +263,29 @@ class Tests_REST_WpRestTemplatesController extends WP_Test_REST_Controller_Testc
 		$data     = $response->get_data();
 		unset( $data['content'] );
 		unset( $data['_links'] );
+		$author_name = get_user_by( 'id', self::$admin_id )->get( 'display_name' );
 
 		$this->assertSameSetsWithIndex(
 			array(
-				'id'             => "{$theme_dir}//{$template}",
-				'theme'          => $theme_dir,
-				'slug'           => $template,
-				'source'         => 'custom',
-				'origin'         => null,
-				'type'           => 'wp_template',
-				'description'    => $args['post_excerpt'],
-				'title'          => array(
+				'id'              => "{$theme_dir}//{$template}",
+				'theme'           => $theme_dir,
+				'slug'            => $template,
+				'source'          => 'custom',
+				'origin'          => null,
+				'type'            => 'wp_template',
+				'description'     => $args['post_excerpt'],
+				'title'           => array(
 					'raw'      => $args['post_title'],
 					'rendered' => $args['post_title'],
 				),
-				'status'         => 'publish',
-				'wp_id'          => $post->ID,
-				'has_theme_file' => false,
-				'is_custom'      => true,
-				'author'         => self::$admin_id,
-				'modified'       => mysql_to_rfc3339( $post->post_modified ),
+				'status'          => 'publish',
+				'wp_id'           => $post->ID,
+				'has_theme_file'  => false,
+				'is_custom'       => true,
+				'author'          => self::$admin_id,
+				'modified'        => mysql_to_rfc3339( $post->post_modified ),
+				'author_text'     => $author_name,
+				'original_source' => 'user',
 			),
 			$data
 		);
@@ -421,27 +446,31 @@ class Tests_REST_WpRestTemplatesController extends WP_Test_REST_Controller_Testc
 		unset( $data['_links'] );
 		unset( $data['wp_id'] );
 
+		$author_name = get_user_by( 'id', self::$admin_id )->get( 'display_name' );
+
 		$this->assertSame(
 			array(
-				'id'             => 'default//my_custom_template',
-				'theme'          => 'default',
-				'content'        => array(
+				'id'              => 'default//my_custom_template',
+				'theme'           => 'default',
+				'content'         => array(
 					'raw' => 'Content',
 				),
-				'slug'           => 'my_custom_template',
-				'source'         => 'custom',
-				'origin'         => null,
-				'type'           => 'wp_template',
-				'description'    => 'Just a description',
-				'title'          => array(
+				'slug'            => 'my_custom_template',
+				'source'          => 'custom',
+				'origin'          => null,
+				'type'            => 'wp_template',
+				'description'     => 'Just a description',
+				'title'           => array(
 					'raw'      => 'My Template',
 					'rendered' => 'My Template',
 				),
-				'status'         => 'publish',
-				'has_theme_file' => false,
-				'is_custom'      => true,
-				'author'         => self::$admin_id,
-				'modified'       => mysql_to_rfc3339( $modified ),
+				'status'          => 'publish',
+				'has_theme_file'  => false,
+				'is_custom'       => true,
+				'author'          => self::$admin_id,
+				'modified'        => mysql_to_rfc3339( $modified ),
+				'author_text'     => $author_name,
+				'original_source' => 'user',
 			),
 			$data
 		);
@@ -469,27 +498,31 @@ class Tests_REST_WpRestTemplatesController extends WP_Test_REST_Controller_Testc
 		unset( $data['_links'] );
 		unset( $data['wp_id'] );
 
+		$author_name = get_user_by( 'id', self::$admin_id )->get( 'display_name' );
+
 		$this->assertSame(
 			array(
-				'id'             => 'default//404',
-				'theme'          => 'default',
-				'content'        => array(
+				'id'              => 'default//404',
+				'theme'           => 'default',
+				'content'         => array(
 					'raw' => '',
 				),
-				'slug'           => '404',
-				'source'         => 'custom',
-				'origin'         => null,
-				'type'           => 'wp_template',
-				'description'    => 'Template shown when no content is found.',
-				'title'          => array(
+				'slug'            => '404',
+				'source'          => 'custom',
+				'origin'          => null,
+				'type'            => 'wp_template',
+				'description'     => 'Template shown when no content is found.',
+				'title'           => array(
 					'raw'      => '404',
 					'rendered' => '404',
 				),
-				'status'         => 'publish',
-				'has_theme_file' => false,
-				'is_custom'      => false,
-				'author'         => self::$admin_id,
-				'modified'       => mysql_to_rfc3339( $modified ),
+				'status'          => 'publish',
+				'has_theme_file'  => false,
+				'is_custom'       => false,
+				'author'          => self::$admin_id,
+				'modified'        => mysql_to_rfc3339( $modified ),
+				'author_text'     => $author_name,
+				'original_source' => 'user',
 			),
 			$data
 		);
@@ -521,27 +554,31 @@ class Tests_REST_WpRestTemplatesController extends WP_Test_REST_Controller_Testc
 		unset( $data['_links'] );
 		unset( $data['wp_id'] );
 
+		$author_name = get_user_by( 'id', self::$admin_id )->get( 'display_name' );
+
 		$this->assertSame(
 			array(
-				'id'             => 'default//my_custom_template_raw',
-				'theme'          => 'default',
-				'content'        => array(
+				'id'              => 'default//my_custom_template_raw',
+				'theme'           => 'default',
+				'content'         => array(
 					'raw' => 'Content',
 				),
-				'slug'           => 'my_custom_template_raw',
-				'source'         => 'custom',
-				'origin'         => null,
-				'type'           => 'wp_template',
-				'description'    => 'Just a description',
-				'title'          => array(
+				'slug'            => 'my_custom_template_raw',
+				'source'          => 'custom',
+				'origin'          => null,
+				'type'            => 'wp_template',
+				'description'     => 'Just a description',
+				'title'           => array(
 					'raw'      => 'My Template',
 					'rendered' => 'My Template',
 				),
-				'status'         => 'publish',
-				'has_theme_file' => false,
-				'is_custom'      => true,
-				'author'         => self::$admin_id,
-				'modified'       => mysql_to_rfc3339( $modified ),
+				'status'          => 'publish',
+				'has_theme_file'  => false,
+				'is_custom'       => true,
+				'author'          => self::$admin_id,
+				'modified'        => mysql_to_rfc3339( $modified ),
+				'author_text'     => $author_name,
+				'original_source' => 'user',
 			),
 			$data
 		);
@@ -700,7 +737,7 @@ class Tests_REST_WpRestTemplatesController extends WP_Test_REST_Controller_Testc
 		$response   = rest_get_server()->dispatch( $request );
 		$data       = $response->get_data();
 		$properties = $data['schema']['properties'];
-		$this->assertCount( 15, $properties );
+		$this->assertCount( 17, $properties );
 		$this->assertArrayHasKey( 'id', $properties );
 		$this->assertArrayHasKey( 'description', $properties );
 		$this->assertArrayHasKey( 'slug', $properties );
@@ -717,6 +754,8 @@ class Tests_REST_WpRestTemplatesController extends WP_Test_REST_Controller_Testc
 		$this->assertArrayHasKey( 'is_custom', $properties );
 		$this->assertArrayHasKey( 'author', $properties );
 		$this->assertArrayHasKey( 'modified', $properties );
+		$this->assertArrayHasKey( 'author_text', $properties );
+		$this->assertArrayHasKey( 'original_source', $properties );
 	}
 
 	protected function find_and_normalize_template_by_id( $templates, $id ) {
@@ -747,10 +786,13 @@ class Tests_REST_WpRestTemplatesController extends WP_Test_REST_Controller_Testc
 
 		$request = new WP_REST_Request( 'POST', '/wp/v2/templates' );
 		$request->set_body_params( $body_params );
-		$response             = rest_get_server()->dispatch( $request );
-		$data                 = $response->get_data();
-		$modified             = get_post( $data['wp_id'] )->post_modified;
-		$expected['modified'] = mysql_to_rfc3339( $modified );
+		$response                    = rest_get_server()->dispatch( $request );
+		$data                        = $response->get_data();
+		$modified                    = get_post( $data['wp_id'] )->post_modified;
+		$expected['modified']        = mysql_to_rfc3339( $modified );
+		$expected['author_text']     = get_user_by( 'id', self::$admin_id )->get( 'display_name' );
+		$expected['original_source'] = 'user';
+
 		unset( $data['_links'] );
 		unset( $data['wp_id'] );
 
@@ -885,4 +927,44 @@ class Tests_REST_WpRestTemplatesController extends WP_Test_REST_Controller_Testc
 
 		$this->assertEmpty( $prepared->post_content, 'The content was not correct in the prepared template part.' );
 	}
+
+	/**
+	 * @ticket 60671
+	 *
+	 * @covers WP_REST_Templates_Controller::prepare_item_for_database
+	 * @covers inject_ignored_hooked_blocks_metadata_attributes
+	 */
+	public function test_prepare_item_for_database_injects_hooked_block() {
+		register_block_type(
+			'tests/hooked-block',
+			array(
+				'block_hooks' => array(
+					'tests/anchor-block' => 'after',
+				),
+			)
+		);
+
+		add_filter( 'rest_pre_insert_wp_template_part', 'inject_ignored_hooked_blocks_metadata_attributes', 10, 2 );
+
+		$endpoint = new WP_REST_Templates_Controller( 'wp_template_part' );
+
+		$prepare_item_for_database = new ReflectionMethod( $endpoint, 'prepare_item_for_database' );
+		$prepare_item_for_database->setAccessible( true );
+
+		$body_params = array(
+			'title'   => 'Untitled Template Part',
+			'slug'    => 'untitled-template-part',
+			'content' => '<!-- wp:tests/anchor-block -->Hello<!-- /wp:tests/anchor-block -->',
+		);
+
+		$request = new WP_REST_Request( 'POST', '/wp/v2/template-parts' );
+		$request->set_body_params( $body_params );
+
+		$prepared = $prepare_item_for_database->invoke( $endpoint, $request );
+		$this->assertSame(
+			'<!-- wp:tests/anchor-block {"metadata":{"ignoredHookedBlocks":["tests/hooked-block"]}} -->Hello<!-- /wp:tests/anchor-block -->',
+			$prepared->post_content,
+			'The hooked block was not injected into the anchor block\'s ignoredHookedBlocks metadata.'
+		);
+	}
 }
diff --git a/tests/script-modules/wpScriptModules.php b/tests/script-modules/wpScriptModules.php
new file mode 100644
index 0000000000..d8562b1c5e
--- /dev/null
+++ b/tests/script-modules/wpScriptModules.php
@@ -0,0 +1,735 @@
+<?php
+/**
+ * Unit tests covering WP_Script_Modules functionality.
+ *
+ * @package WordPress
+ * @subpackage Script Modules
+ *
+ * @since 6.5.0
+ *
+ * @group script-modules
+ *
+ * @coversDefaultClass WP_Script_Modules
+ */
+class Tests_Script_Modules_WpScriptModules extends WP_UnitTestCase {
+
+	/**
+	 * Instance of WP_Script_Modules.
+	 *
+	 * @var WP_Script_Modules
+	 */
+	protected $script_modules;
+
+	/**
+	 * Set up.
+	 */
+	public function set_up() {
+		parent::set_up();
+		// Set up the WP_Script_Modules instance.
+		$this->script_modules = new WP_Script_Modules();
+	}
+
+	/**
+	 * Gets a list of the enqueued script modules.
+	 *
+	 * @return array Enqueued script module URLs, keyed by script module identifier.
+	 */
+	public function get_enqueued_script_modules() {
+		$script_modules_markup   = get_echo( array( $this->script_modules, 'print_enqueued_script_modules' ) );
+		$p                       = new WP_HTML_Tag_Processor( $script_modules_markup );
+		$enqueued_script_modules = array();
+
+		while ( $p->next_tag( array( 'tag' => 'SCRIPT' ) ) ) {
+			if ( 'module' === $p->get_attribute( 'type' ) ) {
+				$id                             = preg_replace( '/-js-module$/', '', $p->get_attribute( 'id' ) );
+				$enqueued_script_modules[ $id ] = $p->get_attribute( 'src' );
+			}
+		}
+
+		return $enqueued_script_modules;
+	}
+
+	/**
+	 * Gets the script modules listed in the import map.
+	 *
+	 * @return array Import map entry URLs, keyed by script module identifier.
+	 */
+	public function get_import_map() {
+		$import_map_markup = get_echo( array( $this->script_modules, 'print_import_map' ) );
+		preg_match( '/<script type="importmap" id="wp-importmap">.*?(\{.*\}).*?<\/script>/s', $import_map_markup, $import_map_string );
+		return json_decode( $import_map_string[1], true )['imports'];
+	}
+
+	/**
+	 * Gets a list of preloaded script modules.
+	 *
+	 * @return array Preloaded script module URLs, keyed by script module identifier.
+	 */
+	public function get_preloaded_script_modules() {
+		$preloaded_markup         = get_echo( array( $this->script_modules, 'print_script_module_preloads' ) );
+		$p                        = new WP_HTML_Tag_Processor( $preloaded_markup );
+		$preloaded_script_modules = array();
+
+		while ( $p->next_tag( array( 'tag' => 'LINK' ) ) ) {
+			if ( 'modulepreload' === $p->get_attribute( 'rel' ) ) {
+				$id                              = preg_replace( '/-js-modulepreload$/', '', $p->get_attribute( 'id' ) );
+				$preloaded_script_modules[ $id ] = $p->get_attribute( 'href' );
+			}
+		}
+
+		return $preloaded_script_modules;
+	}
+
+	/**
+	 * Tests that a script module gets enqueued correctly after being registered.
+	 *
+	 * @ticket 56313
+	 *
+	 * @covers ::register()
+	 * @covers ::enqueue()
+	 * @covers ::print_enqueued_script_modules()
+	 */
+	public function test_wp_enqueue_script_module() {
+		$this->script_modules->register( 'foo', '/foo.js' );
+		$this->script_modules->register( 'bar', '/bar.js' );
+		$this->script_modules->enqueue( 'foo' );
+		$this->script_modules->enqueue( 'bar' );
+
+		$enqueued_script_modules = $this->get_enqueued_script_modules();
+
+		$this->assertCount( 2, $enqueued_script_modules );
+		$this->assertStringStartsWith( '/foo.js', $enqueued_script_modules['foo'] );
+		$this->assertStringStartsWith( '/bar.js', $enqueued_script_modules['bar'] );
+	}
+
+	/**
+	* Tests that a script module can be dequeued after being enqueued.
+	*
+	* @ticket 56313
+	*
+	* @covers ::register()
+	* @covers ::enqueue()
+	* @covers ::dequeue()
+	* @covers ::print_enqueued_script_modules()
+	*/
+	public function test_wp_dequeue_script_module() {
+		$this->script_modules->register( 'foo', '/foo.js' );
+		$this->script_modules->register( 'bar', '/bar.js' );
+		$this->script_modules->enqueue( 'foo' );
+		$this->script_modules->enqueue( 'bar' );
+		$this->script_modules->dequeue( 'foo' ); // Dequeued.
+
+		$enqueued_script_modules = $this->get_enqueued_script_modules();
+
+		$this->assertCount( 1, $enqueued_script_modules );
+		$this->assertFalse( isset( $enqueued_script_modules['foo'] ) );
+		$this->assertTrue( isset( $enqueued_script_modules['bar'] ) );
+	}
+
+
+	/**
+	 * Tests that a script module can be deregistered
+	 * after being enqueued, and that will be removed
+	 * from the enqueue list too.
+	 *
+	 * @ticket 60463
+	 *
+	 * @covers ::register()
+	 * @covers ::enqueue()
+	 * @covers ::deregister()
+	 * @covers ::get_enqueued_script_modules()
+	 */
+	public function test_wp_deregister_script_module() {
+		$this->script_modules->register( 'foo', '/foo.js' );
+		$this->script_modules->register( 'bar', '/bar.js' );
+		$this->script_modules->enqueue( 'foo' );
+		$this->script_modules->enqueue( 'bar' );
+		$this->script_modules->deregister( 'foo' ); // Dequeued.
+
+		$enqueued_script_modules = $this->get_enqueued_script_modules();
+
+		$this->assertCount( 1, $enqueued_script_modules );
+		$this->assertFalse( isset( $enqueued_script_modules['foo'] ) );
+		$this->assertTrue( isset( $enqueued_script_modules['bar'] ) );
+	}
+
+	/**
+	 * Tests that a script module is not deregistered
+	 * if it has not been registered before, causing
+	 * no errors.
+	 *
+	 * @ticket 60463
+	 *
+	 * @covers ::deregister()
+	 * @covers ::get_enqueued_script_modules()
+	 */
+	public function test_wp_deregister_unexistent_script_module() {
+		$this->script_modules->deregister( 'unexistent' );
+		$enqueued_script_modules = $this->get_enqueued_script_modules();
+
+		$this->assertCount( 0, $enqueued_script_modules );
+		$this->assertFalse( isset( $enqueued_script_modules['unexistent'] ) );
+	}
+
+	/**
+	 * Tests that a script module is not deregistered
+	 * if it has been deregistered previously, causing
+	 * no errors.
+	 *
+	 * @ticket 60463
+	 *
+	 * @covers ::get_enqueued_script_modules()
+	 * @covers ::register()
+	 * @covers ::deregister()
+	 * @covers ::enqueue()
+	 */
+	public function test_wp_deregister_already_deregistered_script_module() {
+		$this->script_modules->register( 'foo', '/foo.js' );
+		$this->script_modules->enqueue( 'foo' );
+		$this->script_modules->deregister( 'foo' ); // Dequeued.
+		$enqueued_script_modules = $this->get_enqueued_script_modules();
+
+		$this->assertCount( 0, $enqueued_script_modules );
+		$this->assertFalse( isset( $enqueued_script_modules['foo'] ) );
+
+		$this->script_modules->deregister( 'foo' ); // Dequeued.
+		$enqueued_script_modules = $this->get_enqueued_script_modules();
+
+		$this->assertCount( 0, $enqueued_script_modules );
+		$this->assertFalse( isset( $enqueued_script_modules['foo'] ) );
+	}
+
+	/**
+	* Tests that a script module can be enqueued before it is registered, and will
+	* be handled correctly once registered.
+	*
+	* @ticket 56313
+	*
+	* @covers ::register()
+	* @covers ::enqueue()
+	* @covers ::print_enqueued_script_modules()
+	*/
+	public function test_wp_enqueue_script_module_works_before_register() {
+		$this->script_modules->enqueue( 'foo' );
+		$this->script_modules->register( 'foo', '/foo.js' );
+		$this->script_modules->enqueue( 'bar' ); // Not registered.
+
+		$enqueued_script_modules = $this->get_enqueued_script_modules();
+
+		$this->assertCount( 1, $enqueued_script_modules );
+		$this->assertStringStartsWith( '/foo.js', $enqueued_script_modules['foo'] );
+		$this->assertFalse( isset( $enqueued_script_modules['bar'] ) );
+	}
+
+	/**
+	 * Tests that a script module can be dequeued before it is registered and
+	 * ensures that it is not enqueued after registration.
+	 *
+	 * @ticket 56313
+	 *
+	 * @covers ::register()
+	 * @covers ::enqueue()
+	 * @covers ::dequeue()
+	 * @covers ::print_enqueued_script_modules()
+	 */
+	public function test_wp_dequeue_script_module_works_before_register() {
+		$this->script_modules->enqueue( 'foo' );
+		$this->script_modules->enqueue( 'bar' );
+		$this->script_modules->dequeue( 'foo' );
+		$this->script_modules->register( 'foo', '/foo.js' );
+		$this->script_modules->register( 'bar', '/bar.js' );
+
+		$enqueued_script_modules = $this->get_enqueued_script_modules();
+
+		$this->assertCount( 1, $enqueued_script_modules );
+		$this->assertFalse( isset( $enqueued_script_modules['foo'] ) );
+		$this->assertTrue( isset( $enqueued_script_modules['bar'] ) );
+	}
+
+	/**
+	 * Tests that dependencies for a registered module are added to the import map
+	 * when the script module is enqueued.
+	 *
+	 * @ticket 56313
+	 *
+	 * @covers ::register()
+	 * @covers ::enqueue()
+	 * @covers ::print_import_map()
+	 */
+	public function test_wp_import_map_dependencies() {
+		$this->script_modules->register( 'foo', '/foo.js', array( 'dep' ) );
+		$this->script_modules->register( 'dep', '/dep.js' );
+		$this->script_modules->register( 'no-dep', '/no-dep.js' );
+		$this->script_modules->enqueue( 'foo' );
+
+		$import_map = $this->get_import_map();
+
+		$this->assertCount( 1, $import_map );
+		$this->assertStringStartsWith( '/dep.js', $import_map['dep'] );
+		$this->assertFalse( isset( $import_map['no-dep'] ) );
+	}
+
+	/**
+	 * Tests that dependencies are not duplicated in the import map when multiple
+	 * script modules require the same dependency.
+	 *
+	 * @ticket 56313
+	 *
+	 * @covers ::register()
+	 * @covers ::enqueue()
+	 * @covers ::print_import_map()
+	 */
+	public function test_wp_import_map_no_duplicate_dependencies() {
+		$this->script_modules->register( 'foo', '/foo.js', array( 'dep' ) );
+		$this->script_modules->register( 'bar', '/bar.js', array( 'dep' ) );
+		$this->script_modules->register( 'dep', '/dep.js' );
+		$this->script_modules->enqueue( 'foo' );
+		$this->script_modules->enqueue( 'bar' );
+
+		$import_map = $this->get_import_map();
+
+		$this->assertCount( 1, $import_map );
+		$this->assertStringStartsWith( '/dep.js', $import_map['dep'] );
+	}
+
+	/**
+	 * Tests that all recursive dependencies (both static and dynamic) are
+	 * included in the import map.
+	 *
+	 * @ticket 56313
+	 *
+	 * @covers ::register()
+	 * @covers ::enqueue()
+	 * @covers ::print_import_map()
+	 */
+	public function test_wp_import_map_recursive_dependencies() {
+		$this->script_modules->register(
+			'foo',
+			'/foo.js',
+			array(
+				'static-dep',
+				array(
+					'id'     => 'dynamic-dep',
+					'import' => 'dynamic',
+				),
+			)
+		);
+		$this->script_modules->register(
+			'static-dep',
+			'/static-dep.js',
+			array(
+				array(
+					'id'     => 'nested-static-dep',
+					'import' => 'static',
+				),
+				array(
+					'id'     => 'nested-dynamic-dep',
+					'import' => 'dynamic',
+				),
+			)
+		);
+		$this->script_modules->register( 'dynamic-dep', '/dynamic-dep.js' );
+		$this->script_modules->register( 'nested-static-dep', '/nested-static-dep.js' );
+		$this->script_modules->register( 'nested-dynamic-dep', '/nested-dynamic-dep.js' );
+		$this->script_modules->register( 'no-dep', '/no-dep.js' );
+		$this->script_modules->enqueue( 'foo' );
+
+		$import_map = $this->get_import_map();
+
+		$this->assertStringStartsWith( '/static-dep.js', $import_map['static-dep'] );
+		$this->assertStringStartsWith( '/dynamic-dep.js', $import_map['dynamic-dep'] );
+		$this->assertStringStartsWith( '/nested-static-dep.js', $import_map['nested-static-dep'] );
+		$this->assertStringStartsWith( '/nested-dynamic-dep.js', $import_map['nested-dynamic-dep'] );
+		$this->assertFalse( isset( $import_map['no-dep'] ) );
+	}
+
+	/**
+	 * Tests that the import map is not printed at all if there are no
+	 * dependencies.
+	 *
+	 * @ticket 56313
+	 *
+	 * @covers ::register()
+	 * @covers ::enqueue()
+	 * @covers ::print_import_map()
+	 */
+	public function test_wp_import_map_doesnt_print_if_no_dependencies() {
+		$this->script_modules->register( 'foo', '/foo.js' ); // No deps.
+		$this->script_modules->enqueue( 'foo' );
+
+		$import_map_markup = get_echo( array( $this->script_modules, 'print_import_map' ) );
+
+		$this->assertEmpty( $import_map_markup );
+	}
+
+	/**
+	 * Tests that only static dependencies are preloaded and dynamic ones are
+	 * excluded.
+	 *
+	 * @ticket 56313
+	 *
+	 * @covers ::register()
+	 * @covers ::enqueue()
+	 * @covers ::print_script_module_preloads()
+	 */
+	public function test_wp_enqueue_preloaded_static_dependencies() {
+		$this->script_modules->register(
+			'foo',
+			'/foo.js',
+			array(
+				'static-dep',
+				array(
+					'id'     => 'dynamic-dep',
+					'import' => 'dynamic',
+				),
+			)
+		);
+		$this->script_modules->register(
+			'static-dep',
+			'/static-dep.js',
+			array(
+				array(
+					'id'     => 'nested-static-dep',
+					'import' => 'static',
+				),
+				array(
+					'id'     => 'nested-dynamic-dep',
+					'import' => 'dynamic',
+				),
+			)
+		);
+		$this->script_modules->register( 'dynamic-dep', '/dynamic-dep.js' );
+		$this->script_modules->register( 'nested-static-dep', '/nested-static-dep.js' );
+		$this->script_modules->register( 'nested-dynamic-dep', '/nested-dynamic-dep.js' );
+		$this->script_modules->register( 'no-dep', '/no-dep.js' );
+		$this->script_modules->enqueue( 'foo' );
+
+		$preloaded_script_modules = $this->get_preloaded_script_modules();
+
+		$this->assertCount( 2, $preloaded_script_modules );
+		$this->assertStringStartsWith( '/static-dep.js', $preloaded_script_modules['static-dep'] );
+		$this->assertStringStartsWith( '/nested-static-dep.js', $preloaded_script_modules['nested-static-dep'] );
+		$this->assertFalse( isset( $preloaded_script_modules['no-dep'] ) );
+		$this->assertFalse( isset( $preloaded_script_modules['dynamic-dep'] ) );
+		$this->assertFalse( isset( $preloaded_script_modules['nested-dynamic-dep'] ) );
+	}
+
+	/**
+	 * Tests that static dependencies of dynamic depenendencies are not preloaded.
+	 *
+	 * @ticket 56313
+	 *
+	 * @covers ::register()
+	 * @covers ::enqueue()
+	 * @covers ::print_script_module_preloads()
+	 */
+	public function test_wp_dont_preload_static_dependencies_of_dynamic_dependencies() {
+		$this->script_modules->register(
+			'foo',
+			'/foo.js',
+			array(
+				'static-dep',
+				array(
+					'id'     => 'dynamic-dep',
+					'import' => 'dynamic',
+				),
+			)
+		);
+		$this->script_modules->register( 'static-dep', '/static-dep.js' );
+		$this->script_modules->register( 'dynamic-dep', '/dynamic-dep.js', array( 'nested-static-dep' ) );
+		$this->script_modules->register( 'nested-static-dep', '/nested-static-dep.js' );
+		$this->script_modules->register( 'no-dep', '/no-dep.js' );
+		$this->script_modules->enqueue( 'foo' );
+
+		$preloaded_script_modules = $this->get_preloaded_script_modules();
+
+		$this->assertCount( 1, $preloaded_script_modules );
+		$this->assertStringStartsWith( '/static-dep.js', $preloaded_script_modules['static-dep'] );
+		$this->assertFalse( isset( $preloaded_script_modules['dynamic-dep'] ) );
+		$this->assertFalse( isset( $preloaded_script_modules['nested-static-dep'] ) );
+		$this->assertFalse( isset( $preloaded_script_modules['no-dep'] ) );
+	}
+
+	/**
+	 * Tests that preloaded dependencies don't include enqueued script modules.
+	 *
+	 * @ticket 56313
+	 *
+	 * @covers ::register()
+	 * @covers ::enqueue()
+	 * @covers ::print_script_module_preloads()
+	 */
+	public function test_wp_preloaded_dependencies_filter_enqueued_script_modules() {
+		$this->script_modules->register(
+			'foo',
+			'/foo.js',
+			array(
+				'dep',
+				'enqueued-dep',
+			)
+		);
+		$this->script_modules->register( 'dep', '/dep.js' );
+		$this->script_modules->register( 'enqueued-dep', '/enqueued-dep.js' );
+		$this->script_modules->enqueue( 'foo' );
+		$this->script_modules->enqueue( 'enqueued-dep' ); // Not preloaded.
+
+		$preloaded_script_modules = $this->get_preloaded_script_modules();
+
+		$this->assertCount( 1, $preloaded_script_modules );
+		$this->assertTrue( isset( $preloaded_script_modules['dep'] ) );
+		$this->assertFalse( isset( $preloaded_script_modules['enqueued-dep'] ) );
+	}
+
+	/**
+	 * Tests that enqueued script modules with dependants correctly add both the
+	 * script module and its dependencies to the import map.
+	 *
+	 * @ticket 56313
+	 *
+	 * @covers ::register()
+	 * @covers ::enqueue()
+	 * @covers ::print_import_map()
+	 */
+	public function test_wp_enqueued_script_modules_with_dependants_add_import_map() {
+		$this->script_modules->register(
+			'foo',
+			'/foo.js',
+			array(
+				'dep',
+				'enqueued-dep',
+			)
+		);
+		$this->script_modules->register( 'dep', '/dep.js' );
+		$this->script_modules->register( 'enqueued-dep', '/enqueued-dep.js' );
+		$this->script_modules->enqueue( 'foo' );
+		$this->script_modules->enqueue( 'enqueued-dep' ); // Also in the import map.
+
+		$import_map = $this->get_import_map();
+
+		$this->assertCount( 2, $import_map );
+		$this->assertTrue( isset( $import_map['dep'] ) );
+		$this->assertTrue( isset( $import_map['enqueued-dep'] ) );
+	}
+
+	/**
+	 * Tests the functionality of the `get_src` method to ensure
+	 * proper URLs with version strings are returned.
+	 *
+	 * @ticket 56313
+	 *
+	 * @covers ::get_src()
+	 */
+	public function test_get_src() {
+		$get_src = new ReflectionMethod( $this->script_modules, 'get_src' );
+		$get_src->setAccessible( true );
+
+		$this->script_modules->register(
+			'module_with_version',
+			'http://example.com/module.js',
+			array(),
+			'1.0'
+		);
+
+		$result = $get_src->invoke( $this->script_modules, 'module_with_version' );
+		$this->assertEquals( 'http://example.com/module.js?ver=1.0', $result );
+
+		$this->script_modules->register(
+			'module_without_version',
+			'http://example.com/module.js',
+			array(),
+			null
+		);
+
+		$result = $get_src->invoke( $this->script_modules, 'module_without_version' );
+		$this->assertEquals( 'http://example.com/module.js', $result );
+
+		$this->script_modules->register(
+			'module_with_wp_version',
+			'http://example.com/module.js',
+			array(),
+			false
+		);
+
+		$result = $get_src->invoke( $this->script_modules, 'module_with_wp_version' );
+		$this->assertEquals( 'http://example.com/module.js?ver=' . get_bloginfo( 'version' ), $result );
+
+		$this->script_modules->register(
+			'module_with_existing_query_string',
+			'http://example.com/module.js?foo=bar',
+			array(),
+			'1.0'
+		);
+
+		$result = $get_src->invoke( $this->script_modules, 'module_with_existing_query_string' );
+		$this->assertEquals( 'http://example.com/module.js?foo=bar&ver=1.0', $result );
+
+		// Filter the version to include the ID in the final URL, to test the filter, this should affect the tests below.
+		add_filter(
+			'script_module_loader_src',
+			function ( $src, $id ) {
+				return add_query_arg( 'script_module_id', urlencode( $id ), $src );
+			},
+			10,
+			2
+		);
+
+		$result = $get_src->invoke( $this->script_modules, 'module_without_version' );
+		$this->assertEquals( 'http://example.com/module.js?script_module_id=module_without_version', $result );
+
+		$result = $get_src->invoke( $this->script_modules, 'module_with_existing_query_string' );
+		$this->assertEquals( 'http://example.com/module.js?foo=bar&ver=1.0&script_module_id=module_with_existing_query_string', $result );
+	}
+
+	/**
+	 * Tests that the correct version is propagated to the import map, enqueued
+	 * script modules and preloaded script modules.
+	 *
+	 * @ticket 56313
+	 *
+	 * @covers ::register()
+	 * @covers ::enqueue()
+	 * @covers ::print_enqueued_script_modules()
+	 * @covers ::print_import_map()
+	 * @covers ::print_script_module_preloads()
+	 * @covers ::get_version_query_string()
+	 */
+	public function test_version_is_propagated_correctly() {
+		$this->script_modules->register(
+			'foo',
+			'/foo.js',
+			array(
+				'dep',
+			),
+			'1.0'
+		);
+		$this->script_modules->register( 'dep', '/dep.js', array(), '2.0' );
+		$this->script_modules->enqueue( 'foo' );
+
+		$enqueued_script_modules = $this->get_enqueued_script_modules();
+		$this->assertEquals( '/foo.js?ver=1.0', $enqueued_script_modules['foo'] );
+
+		$import_map = $this->get_import_map();
+		$this->assertEquals( '/dep.js?ver=2.0', $import_map['dep'] );
+
+		$preloaded_script_modules = $this->get_preloaded_script_modules();
+		$this->assertEquals( '/dep.js?ver=2.0', $preloaded_script_modules['dep'] );
+	}
+
+	/**
+	 * Tests that a script module is not registered when calling enqueue without a
+	 * valid src.
+	 *
+	 * @ticket 56313
+	 *
+	 * @covers ::enqueue()
+	 * @covers ::print_enqueued_script_modules()
+	 */
+	public function test_wp_enqueue_script_module_doesnt_register_without_a_valid_src() {
+		$this->script_modules->enqueue( 'foo' );
+
+		$enqueued_script_modules = $this->get_enqueued_script_modules();
+
+		$this->assertCount( 0, $enqueued_script_modules );
+		$this->assertFalse( isset( $enqueued_script_modules['foo'] ) );
+	}
+
+	/**
+	 * Tests that a script module is registered when calling enqueue with a valid
+	 * src.
+	 *
+	 * @ticket 56313
+	 *
+	 * @covers ::enqueue()
+	 * @covers ::print_enqueued_script_modules()
+	 */
+	public function test_wp_enqueue_script_module_registers_with_valid_src() {
+		$this->script_modules->enqueue( 'foo', '/foo.js' );
+
+		$enqueued_script_modules = $this->get_enqueued_script_modules();
+
+		$this->assertCount( 1, $enqueued_script_modules );
+		$this->assertStringStartsWith( '/foo.js', $enqueued_script_modules['foo'] );
+	}
+
+	/**
+	 * Tests that a script module is registered when calling enqueue with a valid
+	 * src the second time.
+	 *
+	 * @ticket 56313
+	 *
+	 * @covers ::enqueue()
+	 * @covers ::print_enqueued_script_modules()
+	 */
+	public function test_wp_enqueue_script_module_registers_with_valid_src_the_second_time() {
+		$this->script_modules->enqueue( 'foo' ); // Not valid src.
+
+		$enqueued_script_modules = $this->get_enqueued_script_modules();
+
+		$this->assertCount( 0, $enqueued_script_modules );
+		$this->assertFalse( isset( $enqueued_script_modules['foo'] ) );
+
+		$this->script_modules->enqueue( 'foo', '/foo.js' ); // Valid src.
+
+		$enqueued_script_modules = $this->get_enqueued_script_modules();
+
+		$this->assertCount( 1, $enqueued_script_modules );
+		$this->assertStringStartsWith( '/foo.js', $enqueued_script_modules['foo'] );
+	}
+
+	/**
+	 * Tests that a script module is registered with all the params when calling
+	 * enqueue.
+	 *
+	 * @ticket 56313
+	 *
+	 * @covers ::register()
+	 * @covers ::enqueue()
+	 * @covers ::print_enqueued_script_modules()
+	 * @covers ::print_import_map()
+	 */
+	public function test_wp_enqueue_script_module_registers_all_params() {
+		$this->script_modules->enqueue( 'foo', '/foo.js', array( 'dep' ), '1.0' );
+		$this->script_modules->register( 'dep', '/dep.js' );
+
+		$enqueued_script_modules = $this->get_enqueued_script_modules();
+		$import_map              = $this->get_import_map();
+
+		$this->assertCount( 1, $enqueued_script_modules );
+		$this->assertEquals( '/foo.js?ver=1.0', $enqueued_script_modules['foo'] );
+		$this->assertCount( 1, $import_map );
+		$this->assertStringStartsWith( '/dep.js', $import_map['dep'] );
+	}
+
+	/**
+	 * @ticket 60348
+	 *
+	 * @covers ::print_import_map_polyfill()
+	 */
+	public function test_wp_print_import_map_has_no_polyfill_when_no_modules_registered() {
+		$import_map_polyfill = get_echo( array( $this->script_modules, 'print_import_map' ) );
+
+		$this->assertEquals( '', $import_map_polyfill );
+	}
+
+	/**
+	 * @ticket 60348
+	 *
+	 * @covers ::print_import_map_polyfill()
+	 */
+	public function test_wp_print_import_map_has_polyfill_when_modules_registered() {
+		$script_name = 'wp-polyfill-importmap';
+		wp_register_script( $script_name, '/wp-polyfill-importmap.js' );
+
+		$this->script_modules->enqueue( 'foo', '/foo.js', array( 'dep' ), '1.0' );
+		$this->script_modules->register( 'dep', '/dep.js' );
+		$import_map_polyfill = get_echo( array( $this->script_modules, 'print_import_map' ) );
+
+		wp_deregister_script( $script_name );
+
+		$p = new WP_HTML_Tag_Processor( $import_map_polyfill );
+		$p->next_tag( array( 'tag' => 'SCRIPT' ) );
+		$id = $p->get_attribute( 'id' );
+
+		$this->assertEquals( 'wp-load-polyfill-importmap', $id );
+	}
+}
diff --git a/tests/shortcode.php b/tests/shortcode.php
index e8aa82c5a8..2c5b04d02e 100644
--- a/tests/shortcode.php
+++ b/tests/shortcode.php
@@ -105,9 +105,13 @@ class Tests_Shortcode extends WP_UnitTestCase {
 		return $out;
 	}
 
+	/**
+	 * @ticket 59249
+	 */
 	public function test_noatts() {
 		do_shortcode( '[test-shortcode-tag /]' );
-		$this->assertSame( '', $this->atts );
+		$this->assertIsArray( $this->atts );
+		$this->assertEmpty( $this->atts );
 		$this->assertSame( 'test-shortcode-tag', $this->tagname );
 	}
 
@@ -181,9 +185,13 @@ class Tests_Shortcode extends WP_UnitTestCase {
 		$this->assertSame( 'test-shortcode-tag', $this->tagname );
 	}
 
+	/**
+	 * @ticket 59249
+	 */
 	public function test_noatts_enclosing() {
 		do_shortcode( '[test-shortcode-tag]content[/test-shortcode-tag]' );
-		$this->assertSame( '', $this->atts );
+		$this->assertIsArray( $this->atts );
+		$this->assertEmpty( $this->atts );
 		$this->assertSame( 'content', $this->content );
 		$this->assertSame( 'test-shortcode-tag', $this->tagname );
 	}
@@ -208,10 +216,14 @@ class Tests_Shortcode extends WP_UnitTestCase {
 		$this->assertSame( 'test-shortcode-tag', $this->tagname );
 	}
 
+	/**
+	 * @ticket 59249
+	 */
 	public function test_unclosed() {
 		$out = do_shortcode( '[test-shortcode-tag]' );
 		$this->assertSame( '', $out );
-		$this->assertSame( '', $this->atts );
+		$this->assertIsArray( $this->atts );
+		$this->assertEmpty( $this->atts );
 		$this->assertSame( 'test-shortcode-tag', $this->tagname );
 	}
 
@@ -998,4 +1010,13 @@ EOF;
 		);
 		$this->assertSame( 'test-shortcode-tag', $this->tagname );
 	}
+
+	/**
+	 * @ticket 59249
+	 */
+	public function test_shortcode_parse_atts_empty() {
+		$out = shortcode_parse_atts( '' );
+		$this->assertIsArray( $out, 'Return value is not an array' );
+		$this->assertEmpty( $out, 'Returned array is not empty' );
+	}
 }
diff --git a/tests/sitemaps/sitemaps.php b/tests/sitemaps/sitemaps.php
index a4fa6b14d7..349bdd961c 100644
--- a/tests/sitemaps/sitemaps.php
+++ b/tests/sitemaps/sitemaps.php
@@ -251,13 +251,16 @@ class Tests_Sitemaps_Sitemaps extends WP_UnitTestCase {
 
 		$post_list = $providers['posts']->get_url_list( 1, 'page' );
 
+		$post_list_sorted = wp_list_sort( $post_list, 'lastmod', 'DESC' );
+
 		$expected = $this->_get_expected_url_list( 'page', self::$pages );
 
 		// Add the homepage to the front of the URL list.
 		array_unshift(
 			$expected,
 			array(
-				'loc' => home_url( '/' ),
+				'loc'     => home_url( '/' ),
+				'lastmod' => $post_list_sorted[0]['lastmod'],
 			)
 		);
 
@@ -378,7 +381,8 @@ class Tests_Sitemaps_Sitemaps extends WP_UnitTestCase {
 		return array_map(
 			static function ( $post ) {
 				return array(
-					'loc' => get_permalink( $post ),
+					'loc'     => get_permalink( $post ),
+					'lastmod' => get_post_modified_time( DATE_W3C, true, $post ),
 				);
 			},
 			$posts
diff --git a/tests/sitemaps/wpSitemapsPosts.php b/tests/sitemaps/wpSitemapsPosts.php
index 2bdeb92e8e..70b2fbc250 100644
--- a/tests/sitemaps/wpSitemapsPosts.php
+++ b/tests/sitemaps/wpSitemapsPosts.php
@@ -59,14 +59,20 @@ class Tests_Sitemaps_wpSitemapsPosts extends WP_UnitTestCase {
 		$url_list      = $posts_provider->get_url_list( 1, 'page' );
 		$sitemap_entry = array_shift( $url_list );
 
-		$this->assertArrayHasKey( 'lastmod', $sitemap_entry );
+		$this->assertEqualSetsWithIndex(
+			array(
+				'loc'     => home_url( '/' ),
+				'lastmod' => '2000-01-01',
+			),
+			$sitemap_entry
+		);
 	}
 
 	/**
 	 * Callback for 'wp_sitemaps_posts_show_on_front_entry' filter.
 	 */
 	public function _show_on_front_entry( $sitemap_entry ) {
-		$sitemap_entry['lastmod'] = wp_date( DATE_W3C, time() );
+		$sitemap_entry['lastmod'] = '2000-01-01';
 
 		return $sitemap_entry;
 	}
@@ -93,7 +99,10 @@ class Tests_Sitemaps_wpSitemapsPosts extends WP_UnitTestCase {
 		$expected = array();
 
 		foreach ( $post_ids as $post_id ) {
-			$expected[] = array( 'loc' => home_url( "?p={$post_id}" ) );
+			$expected[] = array(
+				'loc'     => home_url( "?p={$post_id}" ),
+				'lastmod' => get_post_modified_time( DATE_W3C, true, $post_id ),
+			);
 		}
 
 		// Check that the URL list is still in the order of the post IDs (i.e., sticky post wasn't moved to the front).
diff --git a/tests/style-engine/styleEngine.php b/tests/style-engine/styleEngine.php
index b1a01563c2..794f540baf 100644
--- a/tests/style-engine/styleEngine.php
+++ b/tests/style-engine/styleEngine.php
@@ -27,6 +27,7 @@ class Tests_wpStyleEngine extends WP_UnitTestCase {
 	 * @ticket 56467
 	 * @ticket 58549
 	 * @ticket 58590
+	 * @ticket 60175
 	 *
 	 * @covers ::wp_style_engine_get_styles
 	 *
@@ -183,6 +184,24 @@ class Tests_wpStyleEngine extends WP_UnitTestCase {
 				),
 			),
 
+			'inline_valid_aspect_ratio_style'              => array(
+				'block_styles'    => array(
+					'dimensions' => array(
+						'aspectRatio' => '4/3',
+						'minHeight'   => 'unset',
+					),
+				),
+				'options'         => null,
+				'expected_output' => array(
+					'css'          => 'aspect-ratio:4/3;min-height:unset;',
+					'declarations' => array(
+						'aspect-ratio' => '4/3',
+						'min-height'   => 'unset',
+					),
+					'classnames'   => 'has-aspect-ratio',
+				),
+			),
+
 			'inline_valid_shadow_style'                    => array(
 				'block_styles'    => array(
 					'shadow' => 'inset 5em 1em gold',
@@ -252,19 +271,26 @@ class Tests_wpStyleEngine extends WP_UnitTestCase {
 
 			'elements_with_css_var_value'                  => array(
 				'block_styles'    => array(
-					'color' => array(
+					'color'      => array(
 						'text' => 'var:preset|color|my-little-pony',
 					),
+					'typography' => array(
+						'fontSize'   => 'var:preset|font-size|cabbage-patch',
+						'fontFamily' => 'var:preset|font-family|transformers',
+					),
 				),
 				'options'         => array(
 					'selector' => '.wp-selector',
 				),
 				'expected_output' => array(
-					'css'          => '.wp-selector{color:var(--wp--preset--color--my-little-pony);}',
+					'css'          => '.wp-selector{color:var(--wp--preset--color--my-little-pony);font-size:var(--wp--preset--font-size--cabbage-patch);font-family:var(--wp--preset--font-family--transformers);}',
 					'declarations' => array(
-						'color' => 'var(--wp--preset--color--my-little-pony)',
+						'color'       => 'var(--wp--preset--color--my-little-pony)',
+						'font-size'   => 'var(--wp--preset--font-size--cabbage-patch)',
+						'font-family' => 'var(--wp--preset--font-family--transformers)',
+
 					),
-					'classnames'   => 'has-text-color has-my-little-pony-color',
+					'classnames'   => 'has-text-color has-my-little-pony-color has-cabbage-patch-font-size has-transformers-font-family',
 				),
 			),
 
@@ -513,18 +539,22 @@ class Tests_wpStyleEngine extends WP_UnitTestCase {
 			'inline_background_image_url_with_background_size' => array(
 				'block_styles'    => array(
 					'background' => array(
-						'backgroundImage' => array(
+						'backgroundImage'    => array(
 							'url' => 'https://example.com/image.jpg',
 						),
-						'backgroundSize'  => 'cover',
+						'backgroundPosition' => 'center',
+						'backgroundRepeat'   => 'no-repeat',
+						'backgroundSize'     => 'cover',
 					),
 				),
 				'options'         => array(),
 				'expected_output' => array(
-					'css'          => "background-image:url('https://example.com/image.jpg');background-size:cover;",
+					'css'          => "background-image:url('https://example.com/image.jpg');background-position:center;background-repeat:no-repeat;background-size:cover;",
 					'declarations' => array(
-						'background-image' => "url('https://example.com/image.jpg')",
-						'background-size'  => 'cover',
+						'background-image'    => "url('https://example.com/image.jpg')",
+						'background-position' => 'center',
+						'background-repeat'   => 'no-repeat',
+						'background-size'     => 'cover',
 					),
 				),
 			),
diff --git a/tests/term.php b/tests/term.php
index 2c1e58d2ec..a9b97c1f36 100644
--- a/tests/term.php
+++ b/tests/term.php
@@ -2,6 +2,7 @@
 
 /**
  * @group taxonomy
+ * @group category
  */
 class Tests_Term extends WP_UnitTestCase {
 	protected $taxonomy        = 'category';
@@ -127,9 +128,6 @@ class Tests_Term extends WP_UnitTestCase {
 		}
 	}
 
-	/**
-	 * @group category.php
-	 */
 	public function test_term_is_ancestor_of() {
 		$term  = rand_str();
 		$term2 = rand_str();
diff --git a/tests/term/query.php b/tests/term/query.php
index 682e86a8df..b6ece543b7 100644
--- a/tests/term/query.php
+++ b/tests/term/query.php
@@ -1123,4 +1123,19 @@ class Tests_Term_Query extends WP_UnitTestCase {
 			),
 		);
 	}
+
+	/**
+	 * @ticket 56841
+	 */
+	public function test_query_does_not_have_leading_whitespace() {
+		$q = new WP_Term_Query(
+			array(
+				'taxonomy'   => 'wptests_tax',
+				'hide_empty' => true,
+				'fields'     => 'ids',
+			)
+		);
+
+		$this->assertSame( ltrim( $q->request ), $q->request, 'The query has leading whitespace' );
+	}
 }
diff --git a/tests/term/wpInsertTerm.php b/tests/term/wpInsertTerm.php
index d99593b1d5..798db9233b 100644
--- a/tests/term/wpInsertTerm.php
+++ b/tests/term/wpInsertTerm.php
@@ -895,6 +895,19 @@ class Tests_Term_WpInsertTerm extends WP_UnitTestCase {
 		$this->assertSame( '', $term_object->description );
 	}
 
+	/**
+	 * @ticket 59995
+	 */
+	public function test_wp_insert_term_with_empty_name_after_db_sanitization() {
+		$term = wp_insert_term(
+			'<script>onclick=alert("hello")</script>',
+			'post_tag'
+		);
+
+		$this->assertWPError( $term );
+		$this->assertSame( 'invalid_term_name', $term->get_error_code() );
+	}
+
 	/** Helpers */
 
 	public function deleted_term_cb( $term, $tt_id, $taxonomy, $deleted_term, $object_ids ) {
diff --git a/tests/theme-previews.php b/tests/theme-previews.php
index e4abd621b2..22c9a8bbd2 100644
--- a/tests/theme-previews.php
+++ b/tests/theme-previews.php
@@ -17,7 +17,7 @@ class Tests_Theme_Previews extends WP_UnitTestCase {
 
 	public function test_initialize_theme_preview_hooks() {
 		$_GET['wp_theme_preview'] = 'twentytwentythree';
-		do_action( 'plugins_loaded' ); // Ensure `plugins_loaded` triggers `initialize_theme_preview_hooks`.
+		do_action( 'plugins_loaded' ); // Ensure `plugins_loaded` triggers `wp_initialize_theme_preview_hooks`.
 
 		$this->assertEquals( has_filter( 'stylesheet', 'wp_get_theme_preview_path' ), 10 );
 		$this->assertEquals( has_filter( 'template', 'wp_get_theme_preview_path' ), 10 );
diff --git a/tests/theme.php b/tests/theme.php
index 721fa81f22..d2539db5cd 100644
--- a/tests/theme.php
+++ b/tests/theme.php
@@ -317,7 +317,7 @@ class Tests_Theme extends WP_UnitTestCase {
 				$this->assertSame( $root_uri . '/' . get_template(), get_template_directory_uri() );
 
 				// Skip block themes for get_query_template() tests since this test is focused on classic templates.
-				if ( wp_is_block_theme() && current_theme_supports( 'block-templates' ) ) {
+				if ( wp_is_block_theme() || wp_theme_has_theme_json() ) {
 					continue;
 				}
 
@@ -746,6 +746,7 @@ class Tests_Theme extends WP_UnitTestCase {
 	 *
 	 * @ticket 54597
 	 * @ticket 54731
+	 * @ticket 59732
 	 *
 	 * @dataProvider data_block_theme_has_default_support
 	 *
@@ -774,7 +775,7 @@ class Tests_Theme extends WP_UnitTestCase {
 			"Could not remove support for $support_data_str."
 		);
 
-		do_action( 'setup_theme' );
+		do_action( 'after_setup_theme' );
 
 		$this->assertTrue(
 			current_theme_supports( ...$support_data ),
@@ -858,6 +859,7 @@ class Tests_Theme extends WP_UnitTestCase {
 	 * Tests that block themes load separate core block assets by default.
 	 *
 	 * @ticket 54597
+	 * @ticket 59732
 	 *
 	 * @covers ::_add_default_theme_supports
 	 * @covers ::wp_should_load_separate_core_block_assets
@@ -872,7 +874,7 @@ class Tests_Theme extends WP_UnitTestCase {
 			'Could not disable loading separate core block assets.'
 		);
 
-		do_action( 'setup_theme' );
+		do_action( 'after_setup_theme' );
 
 		$this->assertTrue(
 			wp_should_load_separate_core_block_assets(),
@@ -1058,6 +1060,102 @@ class Tests_Theme extends WP_UnitTestCase {
 		);
 	}
 
+	/**
+	 * Tests whether a switched site retrieves the correct stylesheet directory.
+	 *
+	 * @ticket 59677
+	 * @group ms-required
+	 *
+	 * @covers ::get_stylesheet_directory
+	 */
+	public function test_get_stylesheet_directory_with_switched_site() {
+		$blog_id = self::factory()->blog->create();
+
+		update_blog_option( $blog_id, 'stylesheet', 'switched_stylesheet' );
+
+		// Prime global storage with the current site's data.
+		get_stylesheet_directory();
+
+		switch_to_blog( $blog_id );
+		$switched_stylesheet = get_stylesheet_directory();
+		restore_current_blog();
+
+		$this->assertSame( WP_CONTENT_DIR . '/themes/switched_stylesheet', $switched_stylesheet );
+	}
+
+	/**
+	 * Tests whether a switched site retrieves the correct template directory.
+	 *
+	 * @ticket 59677
+	 * @group ms-required
+	 *
+	 * @covers ::get_template_directory
+	 */
+	public function test_get_template_directory_with_switched_site() {
+		$blog_id = self::factory()->blog->create();
+
+		update_blog_option( $blog_id, 'template', 'switched_template' );
+
+		// Prime global storage with the current site's data.
+		get_template_directory();
+
+		switch_to_blog( $blog_id );
+		$switched_template = get_template_directory();
+		restore_current_blog();
+
+		$this->assertSame( WP_CONTENT_DIR . '/themes/switched_template', $switched_template );
+	}
+
+	/**
+	 * Tests whether a restored site retrieves the correct stylesheet directory.
+	 *
+	 * @ticket 59677
+	 * @group ms-required
+	 *
+	 * @covers ::get_stylesheet_directory
+	 */
+	public function test_get_stylesheet_directory_with_restored_site() {
+		$blog_id = self::factory()->blog->create();
+
+		update_option( 'stylesheet', 'original_stylesheet' );
+		update_blog_option( $blog_id, 'stylesheet', 'switched_stylesheet' );
+
+		$stylesheet = get_stylesheet_directory();
+
+		switch_to_blog( $blog_id );
+
+		// Prime global storage with the restored site's data.
+		get_stylesheet_directory();
+		restore_current_blog();
+
+		$this->assertSame( WP_CONTENT_DIR . '/themes/original_stylesheet', $stylesheet );
+	}
+
+	/**
+	 * Tests whether a restored site retrieves the correct template directory.
+	 *
+	 * @ticket 59677
+	 * @group ms-required
+	 *
+	 * @covers ::get_template_directory
+	 */
+	public function test_get_template_directory_with_restored_site() {
+		$blog_id = self::factory()->blog->create();
+
+		update_option( 'template', 'original_template' );
+		update_blog_option( $blog_id, 'template', 'switched_template' );
+
+		$template = get_template_directory();
+
+		switch_to_blog( $blog_id );
+
+		// Prime global storage with the switched site's data.
+		get_template_directory();
+		restore_current_blog();
+
+		$this->assertSame( WP_CONTENT_DIR . '/themes/original_template', $template );
+	}
+
 	/**
 	 * Helper function to ensure that a block theme is available and active.
 	 */
@@ -1081,4 +1179,156 @@ class Tests_Theme extends WP_UnitTestCase {
 			$this->markTestSkipped( "Could not switch to $block_theme." );
 		}
 	}
+
+	/**
+	 * Make sure filters added after the initial call are fired.
+	 *
+	 * @ticket 59847
+	 *
+	 * @covers ::get_stylesheet_directory
+	 */
+	public function test_get_stylesheet_directory_filters_apply() {
+		// Call the function prior to the filter being added.
+		get_stylesheet_directory();
+
+		$expected = 'test_root/dir';
+
+		// Add the filer.
+		add_filter(
+			'stylesheet_directory',
+			function () use ( $expected ) {
+				return $expected;
+			}
+		);
+
+		$this->assertSame( $expected, get_stylesheet_directory() );
+	}
+
+	/**
+	 * Make sure filters added after the initial call are fired.
+	 *
+	 * @ticket 59847
+	 *
+	 * @covers ::get_template_directory
+	 */
+	public function test_get_template_directory_filters_apply() {
+		// Call the function prior to the filter being added.
+		get_template_directory();
+
+		$expected = 'test_root/dir';
+
+		// Add the filer.
+		add_filter(
+			'template_directory',
+			function () use ( $expected ) {
+				return $expected;
+			}
+		);
+
+		$this->assertSame( $expected, get_template_directory() );
+	}
+
+	/**
+	 * Make sure get_stylesheet_directory uses the correct path when the root theme dir changes.
+	 *
+	 * @ticket 59847
+	 *
+	 * @covers ::get_stylesheet_directory
+	 */
+	public function test_get_stylesheet_directory_uses_registered_theme_dir() {
+		$old_theme = wp_get_theme();
+
+		switch_theme( 'test' );
+
+		$old_root = get_theme_root( 'test' );
+		$path1    = get_stylesheet_directory();
+
+		$new_root = DIR_TESTDATA . '/themedir2';
+		register_theme_directory( $new_root );
+
+		// Mock the stylesheet root option to mimic that the active root has changed.
+		add_filter(
+			'pre_option_stylesheet_root',
+			function () use ( $new_root ) {
+				return $new_root;
+			}
+		);
+
+		$path2 = get_stylesheet_directory();
+
+		// Cleanup.
+		switch_theme( $old_theme->get_stylesheet() );
+
+		$this->assertSame( $old_root . '/test', $path1, 'The original stylesheet path is not correct' );
+		$this->assertSame( $new_root . '/test', $path2, 'The new stylesheet path is not correct' );
+	}
+
+	/**
+	 * Make sure get_template_directory uses the correct path when the root theme dir changes.
+	 *
+	 * @ticket 59847
+	 *
+	 * @covers ::get_template_directory
+	 */
+	public function test_get_template_directory_uses_registered_theme_dir() {
+		$old_theme = wp_get_theme();
+
+		switch_theme( 'test' );
+
+		// Mock parent theme to be returned as the template.
+		add_filter(
+			'pre_option_template',
+			function () {
+				return 'test-parent';
+			}
+		);
+
+		$old_root = get_theme_root( 'test' );
+		$path1    = get_template_directory();
+
+		$new_root = DIR_TESTDATA . '/themedir2';
+		register_theme_directory( $new_root );
+
+		// Mock the template root option to mimic that the active root has changed.
+		add_filter(
+			'pre_option_template_root',
+			function () use ( $new_root ) {
+				return $new_root;
+			}
+		);
+
+		$path2 = get_template_directory();
+
+		// Cleanup.
+		switch_theme( $old_theme->get_stylesheet() );
+
+		$this->assertSame( $old_root . '/test-parent', $path1, 'The original template path is not correct' );
+		$this->assertSame( $new_root . '/test-parent', $path2, 'The new template path is not correct' );
+	}
+
+	/**
+	 * Tests that switch_to_blog() uses the original template path.
+	 *
+	 * @ticket 60290
+	 *
+	 * @group ms-required
+	 *
+	 * @covers ::locate_template
+	 */
+	public function test_switch_to_blog_uses_original_template_path() {
+		$old_theme     = wp_get_theme();
+		$template_path = locate_template( 'index.php' );
+
+		$blog_id = self::factory()->blog->create();
+		switch_to_blog( $blog_id );
+
+		switch_theme( 'block-theme' );
+		$new_template_path = locate_template( 'index.php' );
+
+		// Cleanup.
+		restore_current_blog();
+		switch_theme( $old_theme->get_stylesheet() );
+
+		$this->assertSame( $template_path, $new_template_path, 'Switching blogs switches the template path' );
+	}
 }
diff --git a/tests/theme/autoloadThemeMods.php b/tests/theme/autoloadThemeMods.php
new file mode 100644
index 0000000000..e653ac6a77
--- /dev/null
+++ b/tests/theme/autoloadThemeMods.php
@@ -0,0 +1,42 @@
+<?php
+
+require_once __DIR__ . '/base.php';
+
+/**
+ * Test autoload for theme mods.
+ *
+ * @package WordPress
+ * @subpackage Theme
+ *
+ * @group themes
+ */
+class Tests_Autoload_Theme_Mods extends WP_Theme_UnitTestCase {
+
+	/**
+	 * Tests that theme mods should not autoloaded after switch_theme.
+	 *
+	 * @ticket 39537
+	 */
+	public function test_that_on_switch_theme_previous_theme_mods_should_not_be_autoload() {
+		global $wpdb;
+
+		$current_theme_stylesheet = get_stylesheet();
+
+		// Set a theme mod for the current theme.
+		$new_theme_stylesheet = 'block-theme';
+		set_theme_mod( 'foo-bar-option', 'a-value' );
+
+		switch_theme( $new_theme_stylesheet );
+
+		$this->assertSame( 'no', $wpdb->get_var( $wpdb->prepare( "SELECT autoload FROM $wpdb->options WHERE option_name = %s", "theme_mods_$current_theme_stylesheet" ) ), 'Theme mods autoload value not set to no in database' );
+		$this->assertSame( 'yes', $wpdb->get_var( $wpdb->prepare( "SELECT autoload FROM $wpdb->options WHERE option_name = %s", "theme_mods_$new_theme_stylesheet" ) ), 'Theme mods autoload value not set to yes in database' );
+
+		switch_theme( $current_theme_stylesheet );
+
+		$this->assertSame( 'yes', $wpdb->get_var( $wpdb->prepare( "SELECT autoload FROM $wpdb->options WHERE option_name = %s", "theme_mods_$current_theme_stylesheet" ) ), 'Theme mods autoload value not set to yes in database' );
+		$this->assertSame( 'no', $wpdb->get_var( $wpdb->prepare( "SELECT autoload FROM $wpdb->options WHERE option_name = %s", "theme_mods_$new_theme_stylesheet" ) ), 'Theme mods autoload value not set to no in database' );
+
+		// Basic assertion to make sure that we haven't lost the mods.
+		$this->assertSame( 'a-value', get_theme_mod( 'foo-bar-option' ) );
+	}
+}
diff --git a/tests/theme/themeDir.php b/tests/theme/themeDir.php
index eedd92bcf6..1d6fb45db3 100644
--- a/tests/theme/themeDir.php
+++ b/tests/theme/themeDir.php
@@ -185,8 +185,10 @@ class Tests_Theme_ThemeDir extends WP_UnitTestCase {
 			'Block Theme [0.4.0]',
 			'Block Theme [1.0.0] in subdirectory',
 			'Block Theme Deprecated Path',
+			'Block Theme Patterns',
 			'Block Theme Post Content Default',
 			'Block Theme with defined Typography Fonts',
+			'Block Theme with Hooked Blocks',
 			'Empty `fontFace` in theme.json - no webfonts defined',
 			'A theme with the Update URI header',
 		);
diff --git a/tests/theme/wpGetGlobalStylesheet.php b/tests/theme/wpGetGlobalStylesheet.php
index 40d87940b4..a3b6ce0c2f 100644
--- a/tests/theme/wpGetGlobalStylesheet.php
+++ b/tests/theme/wpGetGlobalStylesheet.php
@@ -18,6 +18,13 @@ class Tests_Theme_WpGetGlobalStylesheet extends WP_Theme_UnitTestCase {
 	 */
 	private $remove_theme_support_at_teardown = false;
 
+	/**
+	 * Flag to indicate whether to remove 'border' theme support at tear_down().
+	 *
+	 * @var bool
+	 */
+	private $remove_border_support_at_teardown = false;
+
 	/**
 	 * Flag to indicate whether to switch back to the default theme at tear down.
 	 *
@@ -26,6 +33,9 @@ class Tests_Theme_WpGetGlobalStylesheet extends WP_Theme_UnitTestCase {
 	private $switch_to_default_theme_at_teardown = false;
 
 	public function tear_down() {
+		// Reset development mode after each test.
+		unset( $GLOBALS['_wp_tests_development_mode'] );
+
 		// Reset the theme support.
 		if ( $this->remove_theme_support_at_teardown ) {
 			$this->remove_theme_support_at_teardown = false;
@@ -37,6 +47,12 @@ class Tests_Theme_WpGetGlobalStylesheet extends WP_Theme_UnitTestCase {
 			switch_theme( WP_DEFAULT_THEME );
 		}
 
+		if ( $this->remove_border_support_at_teardown ) {
+			$this->remove_border_support_at_teardown = false;
+			remove_theme_support( 'border' );
+			remove_theme_support( 'editor-color-palette' );
+		}
+
 		parent::tear_down();
 	}
 
@@ -243,6 +259,64 @@ class Tests_Theme_WpGetGlobalStylesheet extends WP_Theme_UnitTestCase {
 		$this->assertNotSame( $css, wp_get_global_stylesheet(), 'Caching was used despite theme development mode' );
 	}
 
+	/**
+	 * Tests that theme color palette presets are output when appearance tools are enabled via theme support.
+	 *
+	 * @ticket 60134
+	 */
+	public function test_theme_color_palette_presets_output_when_border_support_enabled() {
+
+		$args = array(
+			array(
+				'name'  => 'Black',
+				'slug'  => 'nice-black',
+				'color' => '#000000',
+			),
+			array(
+				'name'  => 'Dark Gray',
+				'slug'  => 'dark-gray',
+				'color' => '#28303D',
+			),
+			array(
+				'name'  => 'Green',
+				'slug'  => 'haunted-green',
+				'color' => '#D1E4DD',
+			),
+			array(
+				'name'  => 'Blue',
+				'slug'  => 'soft-blue',
+				'color' => '#D1DFE4',
+			),
+			array(
+				'name'  => 'Purple',
+				'slug'  => 'cool-purple',
+				'color' => '#D1D1E4',
+			),
+		);
+
+		// Add theme support for appearance tools.
+		add_theme_support( 'border' );
+		add_theme_support( 'editor-color-palette', $args );
+		$this->remove_border_support_at_teardown = true;
+
+		// Check for both the variable declaration and its use as a value.
+		$variables = wp_get_global_stylesheet( array( 'variables' ) );
+
+		$this->assertStringContainsString( '--wp--preset--color--nice-black: #000000', $variables );
+		$this->assertStringContainsString( '--wp--preset--color--dark-gray: #28303D', $variables );
+		$this->assertStringContainsString( '--wp--preset--color--haunted-green: #D1E4DD', $variables );
+		$this->assertStringContainsString( '--wp--preset--color--soft-blue: #D1DFE4', $variables );
+		$this->assertStringContainsString( '--wp--preset--color--cool-purple: #D1D1E4', $variables );
+
+		$presets = wp_get_global_stylesheet( array( 'presets' ) );
+
+		$this->assertStringContainsString( 'var(--wp--preset--color--nice-black)', $presets );
+		$this->assertStringContainsString( 'var(--wp--preset--color--dark-gray)', $presets );
+		$this->assertStringContainsString( 'var(--wp--preset--color--haunted-green)', $presets );
+		$this->assertStringContainsString( 'var(--wp--preset--color--soft-blue)', $presets );
+		$this->assertStringContainsString( 'var(--wp--preset--color--cool-purple)', $presets );
+	}
+
 	/**
 	 * Adds the 'editor-font-sizes' theme support with custom font sizes.
 	 *
diff --git a/tests/theme/wpThemeGetAllowedFilters.php b/tests/theme/wpThemeGetAllowedFilters.php
index 356e7f166f..8af704a7d2 100644
--- a/tests/theme/wpThemeGetAllowedFilters.php
+++ b/tests/theme/wpThemeGetAllowedFilters.php
@@ -8,7 +8,7 @@ if ( is_multisite() ) :
 	 */
 	class Tests_Theme_wpThemeGetAllowedFilters extends WP_UnitTestCase {
 		/**
-		 * @array List of themes allowed before filters are applied.
+		 * @var array List of themes allowed before filters are applied.
 		 */
 		protected $default_allowed;
 
diff --git a/tests/theme/wpThemeGetBlockPatterns.php b/tests/theme/wpThemeGetBlockPatterns.php
new file mode 100644
index 0000000000..45b4083262
--- /dev/null
+++ b/tests/theme/wpThemeGetBlockPatterns.php
@@ -0,0 +1,199 @@
+<?php
+/**
+ * Tests for WP_Theme::get_block_patterns.
+ *
+ * @package WordPress
+ * @subpackage Blocks
+ * @since 6.4.0
+ *
+ * @group blocks
+ * @group themes
+ *
+ * @covers WP_Theme::get_block_patterns
+ */
+class Tests_Theme_WPThemeGetBlockPatterns extends WP_UnitTestCase {
+
+	public static function wpSetUpBeforeClass() {
+		// Ensure development mode is reset before running these tests.
+		unset( $GLOBALS['_wp_tests_development_mode'] );
+	}
+
+	public static function wpTearDownAfterClass() {
+		// Ensure development mode is reset after running these tests.
+		unset( $GLOBALS['_wp_tests_development_mode'] );
+	}
+
+	/**
+	 * Test helper to access the private get_pattern_cache method of a theme.
+	 *
+	 * @param WP_Theme $wp_theme A WP_Theme object.
+	 * @return array|false Returns an array of patterns if cache is found, otherwise false.
+	 */
+	private function get_pattern_cache( $wp_theme ) {
+		$reflection = new ReflectionMethod( $wp_theme, 'get_pattern_cache' );
+		$reflection->setAccessible( true );
+
+		$pattern_cache = $reflection->invoke( $wp_theme, 'get_pattern_cache' );
+		$reflection->setAccessible( false );
+
+		return $pattern_cache;
+	}
+
+	/**
+	 * @ticket 59490
+	 *
+	 * @dataProvider data_get_block_patterns
+	 *
+	 * @param string $theme_slug The theme's slug.
+	 * @param array  $expected   The expected pattern data.
+	 */
+	public function test_should_return_block_patterns( $theme_slug, $expected ) {
+		$theme    = wp_get_theme( $theme_slug );
+		$patterns = $theme->get_block_patterns();
+		$this->assertSameSets( $expected, $patterns );
+	}
+
+	/**
+	 * @ticket 59490
+	 *
+	 * @covers WP_Theme::delete_pattern_cache
+	 */
+	public function test_delete_pattern_cache() {
+		$theme = wp_get_theme( 'block-theme-patterns' );
+
+		$this->assertTrue( $theme->exists(), 'The test theme could not be found.' );
+
+		$theme->get_block_patterns();
+
+		$this->assertSameSets(
+			array(
+				'cta.php' => array(
+					'title'       => 'Centered Call To Action',
+					'slug'        => 'block-theme-patterns/cta',
+					'description' => '',
+					'categories'  => array( 'call-to-action' ),
+				),
+			),
+			$this->get_pattern_cache( $theme ),
+			'The cache for block theme patterns should match the expected.'
+		);
+		$theme->delete_pattern_cache();
+		$this->assertFalse(
+			$this->get_pattern_cache( $theme ),
+			'The cache for block theme patterns should have been cleared.'
+		);
+	}
+
+	/**
+	 * @ticket 59490
+	 * @group ms-excluded
+	 */
+	public function test_should_clear_cache_after_switching_theme() {
+		switch_theme( 'block-theme' );
+		$theme1 = wp_get_theme();
+
+		$this->assertTrue( $theme1->exists(), 'The block-theme test theme could not be found.' );
+
+		$theme1->get_block_patterns();
+		$this->assertSameSets(
+			array(),
+			$this->get_pattern_cache( $theme1 ),
+			'The cache for block theme should be empty.'
+		);
+
+		switch_theme( 'block-theme-patterns' );
+
+		$theme2 = wp_get_theme();
+		$this->assertTrue( $theme2->exists(), 'The block-theme-patterns test theme could not be found.' );
+
+		$this->assertFalse( $this->get_pattern_cache( $theme1 ), 'Cache should not be set for block theme after switch theme.' );
+		$this->assertFalse( $this->get_pattern_cache( $theme2 ), 'Cache should not be set for block theme patterns before being requested.' );
+
+		$theme2->get_block_patterns( $theme2 );
+		$this->assertSameSets(
+			array(
+				'cta.php' => array(
+					'title'       => 'Centered Call To Action',
+					'slug'        => 'block-theme-patterns/cta',
+					'description' => '',
+					'categories'  => array( 'call-to-action' ),
+				),
+
+			),
+			$this->get_pattern_cache( $theme2 ),
+			'The cache for block theme patterns should match the expected.'
+		);
+	}
+
+	/**
+	 * Data provider.
+	 *
+	 * @return array[]
+	 */
+	public function data_get_block_patterns() {
+		return array(
+			array(
+				'theme'    => 'block-theme',
+				'patterns' => array(),
+			),
+			array(
+				'theme'    => 'block-theme-child',
+				'patterns' => array(),
+			),
+			array(
+				'theme'    => 'block-theme-patterns',
+				'patterns' => array(
+					'cta.php' => array(
+						'title'       => 'Centered Call To Action',
+						'slug'        => 'block-theme-patterns/cta',
+						'description' => '',
+						'categories'  => array( 'call-to-action' ),
+					),
+				),
+			),
+			array(
+				'theme'    => 'broken-theme',
+				'patterns' => array(),
+			),
+			array(
+				'theme'    => 'invalid',
+				'patterns' => array(),
+			),
+		);
+	}
+
+	/**
+	 * Tests that WP_Theme::get_block_patterns() clears existing cache when in theme development mode.
+	 *
+	 * @ticket 59591
+	 */
+	public function test_should_clear_existing_cache_when_in_development_mode() {
+		$theme = wp_get_theme( 'block-theme-patterns' );
+
+		$this->assertTrue( $theme->exists(), 'The test theme could not be found.' );
+
+		// Calling the function should set the cache.
+		$theme->get_block_patterns();
+		$this->assertSameSets(
+			array(
+				'cta.php' => array(
+					'title'       => 'Centered Call To Action',
+					'slug'        => 'block-theme-patterns/cta',
+					'description' => '',
+					'categories'  => array( 'call-to-action' ),
+				),
+			),
+			$this->get_pattern_cache( $theme ),
+			'The cache for block theme patterns should be set.'
+		);
+
+		// Calling the function while in theme development mode should clear the cache.
+		$GLOBALS['_wp_tests_development_mode'] = 'theme';
+		$theme->get_block_patterns( $theme );
+		unset( $GLOBALS['_wp_tests_development_mode'] ); // Reset to not pollute other tests.
+		$this->assertFalse(
+			$this->get_pattern_cache( $theme ),
+			'The cache for block theme patterns should have been cleared due to theme development mode.'
+		);
+	}
+}
diff --git a/tests/theme/wpThemeJson.php b/tests/theme/wpThemeJson.php
index 6da723583b..f38b7f21db 100644
--- a/tests/theme/wpThemeJson.php
+++ b/tests/theme/wpThemeJson.php
@@ -264,6 +264,7 @@ class Tests_Theme_wpThemeJson extends WP_UnitTestCase {
 		$expected = array(
 			'background' => array(
 				'backgroundImage' => true,
+				'backgroundSize'  => true,
 			),
 			'border'     => array(
 				'width'  => true,
@@ -278,7 +279,8 @@ class Tests_Theme_wpThemeJson extends WP_UnitTestCase {
 				'caption' => true,
 			),
 			'dimensions' => array(
-				'minHeight' => true,
+				'aspectRatio' => true,
+				'minHeight'   => true,
 			),
 			'position'   => array(
 				'sticky' => true,
@@ -291,6 +293,9 @@ class Tests_Theme_wpThemeJson extends WP_UnitTestCase {
 			'typography' => array(
 				'lineHeight' => true,
 			),
+			'shadow'     => array(
+				'defaultPresets' => true,
+			),
 			'blocks'     => array(
 				'core/paragraph' => array(
 					'typography' => array(
@@ -300,6 +305,7 @@ class Tests_Theme_wpThemeJson extends WP_UnitTestCase {
 				'core/group'     => array(
 					'background' => array(
 						'backgroundImage' => true,
+						'backgroundSize'  => true,
 					),
 					'border'     => array(
 						'width'  => true,
@@ -314,7 +320,8 @@ class Tests_Theme_wpThemeJson extends WP_UnitTestCase {
 						'caption' => true,
 					),
 					'dimensions' => array(
-						'minHeight' => true,
+						'aspectRatio' => true,
+						'minHeight'   => true,
 					),
 					'position'   => array(
 						'sticky' => true,
@@ -327,6 +334,9 @@ class Tests_Theme_wpThemeJson extends WP_UnitTestCase {
 					'typography' => array(
 						'lineHeight' => false,
 					),
+					'shadow'     => array(
+						'defaultPresets' => true,
+					),
 				),
 			),
 		);
@@ -382,117 +392,13 @@ class Tests_Theme_wpThemeJson extends WP_UnitTestCase {
 		$this->assertEqualSetsWithIndex( $expected, $actual );
 	}
 
-	/**
-	 * @ticket 54336
-	 * @ticket 58550
-	 */
-	public function test_get_stylesheet_support_for_shorthand_and_longhand_values() {
-		$theme_json = new WP_Theme_JSON(
-			array(
-				'version' => WP_Theme_JSON::LATEST_SCHEMA,
-				'styles'  => array(
-					'blocks' => array(
-						'core/group' => array(
-							'border'  => array(
-								'radius' => '10px',
-							),
-							'spacing' => array(
-								'padding' => '24px',
-								'margin'  => '1em',
-							),
-						),
-						'core/image' => array(
-							'border'  => array(
-								'radius' => array(
-									'topLeft'     => '10px',
-									'bottomRight' => '1em',
-								),
-							),
-							'spacing' => array(
-								'padding' => array(
-									'top' => '15px',
-								),
-								'margin'  => array(
-									'bottom' => '30px',
-								),
-							),
-						),
-					),
-				),
-			)
-		);
-
-		$styles = 'body { margin: 0; }.wp-site-blocks > .alignleft { float: left; margin-right: 2em; }.wp-site-blocks > .alignright { float: right; margin-left: 2em; }.wp-site-blocks > .aligncenter { justify-content: center; margin-left: auto; margin-right: auto; }:where(.is-layout-flex){gap: 0.5em;}:where(.is-layout-grid){gap: 0.5em;}body .is-layout-flow > .alignleft{float: left;margin-inline-start: 0;margin-inline-end: 2em;}body .is-layout-flow > .alignright{float: right;margin-inline-start: 2em;margin-inline-end: 0;}body .is-layout-flow > .aligncenter{margin-left: auto !important;margin-right: auto !important;}body .is-layout-constrained > .alignleft{float: left;margin-inline-start: 0;margin-inline-end: 2em;}body .is-layout-constrained > .alignright{float: right;margin-inline-start: 2em;margin-inline-end: 0;}body .is-layout-constrained > .aligncenter{margin-left: auto !important;margin-right: auto !important;}body .is-layout-constrained > :where(:not(.alignleft):not(.alignright):not(.alignfull)){max-width: var(--wp--style--global--content-size);margin-left: auto !important;margin-right: auto !important;}body .is-layout-constrained > .alignwide{max-width: var(--wp--style--global--wide-size);}body .is-layout-flex{display: flex;}body .is-layout-flex{flex-wrap: wrap;align-items: center;}body .is-layout-flex > *{margin: 0;}body .is-layout-grid{display: grid;}body .is-layout-grid > *{margin: 0;}.wp-block-group{border-radius: 10px;margin: 1em;padding: 24px;}.wp-block-image{margin-bottom: 30px;padding-top: 15px;}.wp-block-image img, .wp-block-image .wp-block-image__crop-area, .wp-block-image .components-placeholder{border-top-left-radius: 10px;border-bottom-right-radius: 1em;}';
-		$this->assertSame( $styles, $theme_json->get_stylesheet() );
-		$this->assertSame( $styles, $theme_json->get_stylesheet( array( 'styles' ) ) );
-	}
-
-	/**
-	 * @ticket 54336
-	 * @ticket 58550
-	 */
-	public function test_get_stylesheet_skips_disabled_protected_properties() {
-		$theme_json = new WP_Theme_JSON(
-			array(
-				'version'  => WP_Theme_JSON::LATEST_SCHEMA,
-				'settings' => array(
-					'spacing' => array(
-						'blockGap' => null,
-					),
-				),
-				'styles'   => array(
-					'spacing' => array(
-						'blockGap' => '1em',
-					),
-					'blocks'  => array(
-						'core/columns' => array(
-							'spacing' => array(
-								'blockGap' => '24px',
-							),
-						),
-					),
-				),
-			)
-		);
-
-		$expected = 'body { margin: 0; }.wp-site-blocks > .alignleft { float: left; margin-right: 2em; }.wp-site-blocks > .alignright { float: right; margin-left: 2em; }.wp-site-blocks > .aligncenter { justify-content: center; margin-left: auto; margin-right: auto; }:where(.is-layout-flex){gap: 0.5em;}:where(.is-layout-grid){gap: 0.5em;}body .is-layout-flow > .alignleft{float: left;margin-inline-start: 0;margin-inline-end: 2em;}body .is-layout-flow > .alignright{float: right;margin-inline-start: 2em;margin-inline-end: 0;}body .is-layout-flow > .aligncenter{margin-left: auto !important;margin-right: auto !important;}body .is-layout-constrained > .alignleft{float: left;margin-inline-start: 0;margin-inline-end: 2em;}body .is-layout-constrained > .alignright{float: right;margin-inline-start: 2em;margin-inline-end: 0;}body .is-layout-constrained > .aligncenter{margin-left: auto !important;margin-right: auto !important;}body .is-layout-constrained > :where(:not(.alignleft):not(.alignright):not(.alignfull)){max-width: var(--wp--style--global--content-size);margin-left: auto !important;margin-right: auto !important;}body .is-layout-constrained > .alignwide{max-width: var(--wp--style--global--wide-size);}body .is-layout-flex{display: flex;}body .is-layout-flex{flex-wrap: wrap;align-items: center;}body .is-layout-flex > *{margin: 0;}body .is-layout-grid{display: grid;}body .is-layout-grid > *{margin: 0;}:where(.wp-block-columns.is-layout-flex){gap: 2em;}:where(.wp-block-columns.is-layout-grid){gap: 2em;}';
-		$this->assertSame( $expected, $theme_json->get_stylesheet() );
-		$this->assertSame( $expected, $theme_json->get_stylesheet( array( 'styles' ) ) );
-	}
-
-	/**
-	 * @ticket 54336
-	 * @ticket 58548
-	 * @ticket 58550
-	 */
-	public function test_get_stylesheet_renders_enabled_protected_properties() {
-		$theme_json = new WP_Theme_JSON(
-			array(
-				'version'  => WP_Theme_JSON::LATEST_SCHEMA,
-				'settings' => array(
-					'spacing' => array(
-						'blockGap' => true,
-					),
-				),
-				'styles'   => array(
-					'spacing' => array(
-						'blockGap' => '1em',
-					),
-				),
-			)
-		);
-
-		$expected = 'body { margin: 0; }.wp-site-blocks > .alignleft { float: left; margin-right: 2em; }.wp-site-blocks > .alignright { float: right; margin-left: 2em; }.wp-site-blocks > .aligncenter { justify-content: center; margin-left: auto; margin-right: auto; }:where(.wp-site-blocks) > * { margin-block-start: 1em; margin-block-end: 0; }:where(.wp-site-blocks) > :first-child:first-child { margin-block-start: 0; }:where(.wp-site-blocks) > :last-child:last-child { margin-block-end: 0; }body { --wp--style--block-gap: 1em; }:where(body .is-layout-flow)  > :first-child:first-child{margin-block-start: 0;}:where(body .is-layout-flow)  > :last-child:last-child{margin-block-end: 0;}:where(body .is-layout-flow)  > *{margin-block-start: 1em;margin-block-end: 0;}:where(body .is-layout-constrained)  > :first-child:first-child{margin-block-start: 0;}:where(body .is-layout-constrained)  > :last-child:last-child{margin-block-end: 0;}:where(body .is-layout-constrained)  > *{margin-block-start: 1em;margin-block-end: 0;}:where(body .is-layout-flex) {gap: 1em;}:where(body .is-layout-grid) {gap: 1em;}body .is-layout-flow > .alignleft{float: left;margin-inline-start: 0;margin-inline-end: 2em;}body .is-layout-flow > .alignright{float: right;margin-inline-start: 2em;margin-inline-end: 0;}body .is-layout-flow > .aligncenter{margin-left: auto !important;margin-right: auto !important;}body .is-layout-constrained > .alignleft{float: left;margin-inline-start: 0;margin-inline-end: 2em;}body .is-layout-constrained > .alignright{float: right;margin-inline-start: 2em;margin-inline-end: 0;}body .is-layout-constrained > .aligncenter{margin-left: auto !important;margin-right: auto !important;}body .is-layout-constrained > :where(:not(.alignleft):not(.alignright):not(.alignfull)){max-width: var(--wp--style--global--content-size);margin-left: auto !important;margin-right: auto !important;}body .is-layout-constrained > .alignwide{max-width: var(--wp--style--global--wide-size);}body .is-layout-flex{display: flex;}body .is-layout-flex{flex-wrap: wrap;align-items: center;}body .is-layout-flex > *{margin: 0;}body .is-layout-grid{display: grid;}body .is-layout-grid > *{margin: 0;}';
-		$this->assertSame( $expected, $theme_json->get_stylesheet() );
-		$this->assertSame( $expected, $theme_json->get_stylesheet( array( 'styles' ) ) );
-	}
-
 	/**
 	 * @ticket 53175
 	 * @ticket 54336
 	 * @ticket 56611
 	 * @ticket 58549
 	 * @ticket 58550
+	 * @ticket 60365
 	 */
 	public function test_get_stylesheet() {
 		$theme_json = new WP_Theme_JSON(
@@ -525,12 +431,19 @@ class Tests_Theme_wpThemeJson extends WP_UnitTestCase {
 					'typography' => array(
 						'fontFamilies' => array(
 							array(
-								'slug'       => 'small',
-								'fontFamily' => '14px',
+								'name'       => 'Arial',
+								'slug'       => 'arial',
+								'fontFamily' => 'Arial, serif',
+							),
+						),
+						'fontSizes'    => array(
+							array(
+								'slug' => 'small',
+								'size' => '14px',
 							),
 							array(
-								'slug'       => 'big',
-								'fontFamily' => '41px',
+								'slug' => 'big',
+								'size' => '41px',
 							),
 						),
 					),
@@ -565,21 +478,29 @@ class Tests_Theme_wpThemeJson extends WP_UnitTestCase {
 						),
 					),
 					'blocks'   => array(
+						'core/cover'        => array(
+							'dimensions' => array(
+								'aspectRatio' => '16/9',
+							),
+						),
 						'core/group'        => array(
-							'color'    => array(
+							'color'      => array(
 								'gradient' => 'var:preset|gradient|custom-gradient',
 							),
-							'border'   => array(
+							'border'     => array(
 								'radius' => '10px',
 							),
-							'elements' => array(
+							'dimensions' => array(
+								'minHeight' => '50vh',
+							),
+							'elements'   => array(
 								'link' => array(
 									'color' => array(
 										'text' => '#111',
 									),
 								),
 							),
-							'spacing'  => array(
+							'spacing'    => array(
 								'padding' => '24px',
 							),
 						),
@@ -642,14 +563,120 @@ class Tests_Theme_wpThemeJson extends WP_UnitTestCase {
 			)
 		);
 
-		$variables = 'body{--wp--preset--color--grey: grey;--wp--preset--gradient--custom-gradient: linear-gradient(135deg,rgba(0,0,0) 0%,rgb(0,0,0) 100%);--wp--preset--font-family--small: 14px;--wp--preset--font-family--big: 41px;}.wp-block-group{--wp--custom--base-font: 16;--wp--custom--line-height--small: 1.2;--wp--custom--line-height--medium: 1.4;--wp--custom--line-height--large: 1.8;}';
-		$styles    = 'body { margin: 0; }.wp-site-blocks > .alignleft { float: left; margin-right: 2em; }.wp-site-blocks > .alignright { float: right; margin-left: 2em; }.wp-site-blocks > .aligncenter { justify-content: center; margin-left: auto; margin-right: auto; }:where(.is-layout-flex){gap: 0.5em;}:where(.is-layout-grid){gap: 0.5em;}body .is-layout-flow > .alignleft{float: left;margin-inline-start: 0;margin-inline-end: 2em;}body .is-layout-flow > .alignright{float: right;margin-inline-start: 2em;margin-inline-end: 0;}body .is-layout-flow > .aligncenter{margin-left: auto !important;margin-right: auto !important;}body .is-layout-constrained > .alignleft{float: left;margin-inline-start: 0;margin-inline-end: 2em;}body .is-layout-constrained > .alignright{float: right;margin-inline-start: 2em;margin-inline-end: 0;}body .is-layout-constrained > .aligncenter{margin-left: auto !important;margin-right: auto !important;}body .is-layout-constrained > :where(:not(.alignleft):not(.alignright):not(.alignfull)){max-width: var(--wp--style--global--content-size);margin-left: auto !important;margin-right: auto !important;}body .is-layout-constrained > .alignwide{max-width: var(--wp--style--global--wide-size);}body .is-layout-flex{display: flex;}body .is-layout-flex{flex-wrap: wrap;align-items: center;}body .is-layout-flex > *{margin: 0;}body .is-layout-grid{display: grid;}body .is-layout-grid > *{margin: 0;}body{color: var(--wp--preset--color--grey);}a:where(:not(.wp-element-button)){background-color: #333;color: #111;}.wp-element-button, .wp-block-button__link{box-shadow: 10px 10px 5px 0px rgba(0,0,0,0.66);}.wp-block-group{background: var(--wp--preset--gradient--custom-gradient);border-radius: 10px;padding: 24px;}.wp-block-group a:where(:not(.wp-element-button)){color: #111;}.wp-block-heading{color: #123456;}.wp-block-heading a:where(:not(.wp-element-button)){background-color: #333;color: #111;font-size: 60px;}.wp-block-post-date{color: #123456;}.wp-block-post-date a:where(:not(.wp-element-button)){background-color: #777;color: #555;}.wp-block-post-excerpt{column-count: 2;}.wp-block-image{margin-bottom: 30px;}.wp-block-image img, .wp-block-image .wp-block-image__crop-area, .wp-block-image .components-placeholder{border-top-left-radius: 10px;border-bottom-right-radius: 1em;}.wp-block-image img, .wp-block-image .components-placeholder{filter: var(--wp--preset--duotone--custom-duotone);}';
-		$presets   = '.has-grey-color{color: var(--wp--preset--color--grey) !important;}.has-grey-background-color{background-color: var(--wp--preset--color--grey) !important;}.has-grey-border-color{border-color: var(--wp--preset--color--grey) !important;}.has-custom-gradient-gradient-background{background: var(--wp--preset--gradient--custom-gradient) !important;}.has-small-font-family{font-family: var(--wp--preset--font-family--small) !important;}.has-big-font-family{font-family: var(--wp--preset--font-family--big) !important;}';
+		$variables = 'body{--wp--preset--color--grey: grey;--wp--preset--gradient--custom-gradient: linear-gradient(135deg,rgba(0,0,0) 0%,rgb(0,0,0) 100%);--wp--preset--font-size--small: 14px;--wp--preset--font-size--big: 41px;--wp--preset--font-family--arial: Arial, serif;}.wp-block-group{--wp--custom--base-font: 16;--wp--custom--line-height--small: 1.2;--wp--custom--line-height--medium: 1.4;--wp--custom--line-height--large: 1.8;}';
+		$styles    = 'body { margin: 0; }.wp-site-blocks > .alignleft { float: left; margin-right: 2em; }.wp-site-blocks > .alignright { float: right; margin-left: 2em; }.wp-site-blocks > .aligncenter { justify-content: center; margin-left: auto; margin-right: auto; }:where(.is-layout-flex){gap: 0.5em;}:where(.is-layout-grid){gap: 0.5em;}body .is-layout-flow > .alignleft{float: left;margin-inline-start: 0;margin-inline-end: 2em;}body .is-layout-flow > .alignright{float: right;margin-inline-start: 2em;margin-inline-end: 0;}body .is-layout-flow > .aligncenter{margin-left: auto !important;margin-right: auto !important;}body .is-layout-constrained > .alignleft{float: left;margin-inline-start: 0;margin-inline-end: 2em;}body .is-layout-constrained > .alignright{float: right;margin-inline-start: 2em;margin-inline-end: 0;}body .is-layout-constrained > .aligncenter{margin-left: auto !important;margin-right: auto !important;}body .is-layout-constrained > :where(:not(.alignleft):not(.alignright):not(.alignfull)){max-width: var(--wp--style--global--content-size);margin-left: auto !important;margin-right: auto !important;}body .is-layout-constrained > .alignwide{max-width: var(--wp--style--global--wide-size);}body .is-layout-flex{display: flex;}body .is-layout-flex{flex-wrap: wrap;align-items: center;}body .is-layout-flex > *{margin: 0;}body .is-layout-grid{display: grid;}body .is-layout-grid > *{margin: 0;}body{color: var(--wp--preset--color--grey);}a:where(:not(.wp-element-button)){background-color: #333;color: #111;}.wp-element-button, .wp-block-button__link{box-shadow: 10px 10px 5px 0px rgba(0,0,0,0.66);}.wp-block-cover{min-height: unset;aspect-ratio: 16/9;}.wp-block-group{background: var(--wp--preset--gradient--custom-gradient);border-radius: 10px;min-height: 50vh;padding: 24px;}.wp-block-group a:where(:not(.wp-element-button)){color: #111;}.wp-block-heading{color: #123456;}.wp-block-heading a:where(:not(.wp-element-button)){background-color: #333;color: #111;font-size: 60px;}.wp-block-post-date{color: #123456;}.wp-block-post-date a:where(:not(.wp-element-button)){background-color: #777;color: #555;}.wp-block-post-excerpt{column-count: 2;}.wp-block-image{margin-bottom: 30px;}.wp-block-image img, .wp-block-image .wp-block-image__crop-area, .wp-block-image .components-placeholder{border-top-left-radius: 10px;border-bottom-right-radius: 1em;}.wp-block-image img, .wp-block-image .components-placeholder{filter: var(--wp--preset--duotone--custom-duotone);}';
+		$presets   = '.has-grey-color{color: var(--wp--preset--color--grey) !important;}.has-grey-background-color{background-color: var(--wp--preset--color--grey) !important;}.has-grey-border-color{border-color: var(--wp--preset--color--grey) !important;}.has-custom-gradient-gradient-background{background: var(--wp--preset--gradient--custom-gradient) !important;}.has-small-font-size{font-size: var(--wp--preset--font-size--small) !important;}.has-big-font-size{font-size: var(--wp--preset--font-size--big) !important;}.has-arial-font-family{font-family: var(--wp--preset--font-family--arial) !important;}';
 		$all       = $variables . $styles . $presets;
-		$this->assertSame( $all, $theme_json->get_stylesheet() );
+
+		$this->assertSame( $variables, $theme_json->get_stylesheet( array( 'variables' ) ) );
 		$this->assertSame( $styles, $theme_json->get_stylesheet( array( 'styles' ) ) );
 		$this->assertSame( $presets, $theme_json->get_stylesheet( array( 'presets' ) ) );
-		$this->assertSame( $variables, $theme_json->get_stylesheet( array( 'variables' ) ) );
+		$this->assertSame( $all, $theme_json->get_stylesheet() );
+	}
+
+	/**
+	 * @ticket 54336
+	 * @ticket 58550
+	 */
+	public function test_get_stylesheet_support_for_shorthand_and_longhand_values() {
+		$theme_json = new WP_Theme_JSON(
+			array(
+				'version' => WP_Theme_JSON::LATEST_SCHEMA,
+				'styles'  => array(
+					'blocks' => array(
+						'core/group' => array(
+							'border'  => array(
+								'radius' => '10px',
+							),
+							'spacing' => array(
+								'padding' => '24px',
+								'margin'  => '1em',
+							),
+						),
+						'core/image' => array(
+							'border'  => array(
+								'radius' => array(
+									'topLeft'     => '10px',
+									'bottomRight' => '1em',
+								),
+							),
+							'spacing' => array(
+								'padding' => array(
+									'top' => '15px',
+								),
+								'margin'  => array(
+									'bottom' => '30px',
+								),
+							),
+						),
+					),
+				),
+			)
+		);
+
+		$styles = 'body { margin: 0; }.wp-site-blocks > .alignleft { float: left; margin-right: 2em; }.wp-site-blocks > .alignright { float: right; margin-left: 2em; }.wp-site-blocks > .aligncenter { justify-content: center; margin-left: auto; margin-right: auto; }:where(.is-layout-flex){gap: 0.5em;}:where(.is-layout-grid){gap: 0.5em;}body .is-layout-flow > .alignleft{float: left;margin-inline-start: 0;margin-inline-end: 2em;}body .is-layout-flow > .alignright{float: right;margin-inline-start: 2em;margin-inline-end: 0;}body .is-layout-flow > .aligncenter{margin-left: auto !important;margin-right: auto !important;}body .is-layout-constrained > .alignleft{float: left;margin-inline-start: 0;margin-inline-end: 2em;}body .is-layout-constrained > .alignright{float: right;margin-inline-start: 2em;margin-inline-end: 0;}body .is-layout-constrained > .aligncenter{margin-left: auto !important;margin-right: auto !important;}body .is-layout-constrained > :where(:not(.alignleft):not(.alignright):not(.alignfull)){max-width: var(--wp--style--global--content-size);margin-left: auto !important;margin-right: auto !important;}body .is-layout-constrained > .alignwide{max-width: var(--wp--style--global--wide-size);}body .is-layout-flex{display: flex;}body .is-layout-flex{flex-wrap: wrap;align-items: center;}body .is-layout-flex > *{margin: 0;}body .is-layout-grid{display: grid;}body .is-layout-grid > *{margin: 0;}.wp-block-group{border-radius: 10px;margin: 1em;padding: 24px;}.wp-block-image{margin-bottom: 30px;padding-top: 15px;}.wp-block-image img, .wp-block-image .wp-block-image__crop-area, .wp-block-image .components-placeholder{border-top-left-radius: 10px;border-bottom-right-radius: 1em;}';
+		$this->assertSame( $styles, $theme_json->get_stylesheet() );
+		$this->assertSame( $styles, $theme_json->get_stylesheet( array( 'styles' ) ) );
+	}
+
+	/**
+	 * @ticket 54336
+	 * @ticket 58550
+	 */
+	public function test_get_stylesheet_skips_disabled_protected_properties() {
+		$theme_json = new WP_Theme_JSON(
+			array(
+				'version'  => WP_Theme_JSON::LATEST_SCHEMA,
+				'settings' => array(
+					'spacing' => array(
+						'blockGap' => null,
+					),
+				),
+				'styles'   => array(
+					'spacing' => array(
+						'blockGap' => '1em',
+					),
+					'blocks'  => array(
+						'core/columns' => array(
+							'spacing' => array(
+								'blockGap' => '24px',
+							),
+						),
+					),
+				),
+			)
+		);
+
+		$expected = 'body { margin: 0; }.wp-site-blocks > .alignleft { float: left; margin-right: 2em; }.wp-site-blocks > .alignright { float: right; margin-left: 2em; }.wp-site-blocks > .aligncenter { justify-content: center; margin-left: auto; margin-right: auto; }:where(.is-layout-flex){gap: 0.5em;}:where(.is-layout-grid){gap: 0.5em;}body .is-layout-flow > .alignleft{float: left;margin-inline-start: 0;margin-inline-end: 2em;}body .is-layout-flow > .alignright{float: right;margin-inline-start: 2em;margin-inline-end: 0;}body .is-layout-flow > .aligncenter{margin-left: auto !important;margin-right: auto !important;}body .is-layout-constrained > .alignleft{float: left;margin-inline-start: 0;margin-inline-end: 2em;}body .is-layout-constrained > .alignright{float: right;margin-inline-start: 2em;margin-inline-end: 0;}body .is-layout-constrained > .aligncenter{margin-left: auto !important;margin-right: auto !important;}body .is-layout-constrained > :where(:not(.alignleft):not(.alignright):not(.alignfull)){max-width: var(--wp--style--global--content-size);margin-left: auto !important;margin-right: auto !important;}body .is-layout-constrained > .alignwide{max-width: var(--wp--style--global--wide-size);}body .is-layout-flex{display: flex;}body .is-layout-flex{flex-wrap: wrap;align-items: center;}body .is-layout-flex > *{margin: 0;}body .is-layout-grid{display: grid;}body .is-layout-grid > *{margin: 0;}:where(.wp-block-columns.is-layout-flex){gap: 2em;}:where(.wp-block-columns.is-layout-grid){gap: 2em;}';
+		$this->assertSame( $expected, $theme_json->get_stylesheet() );
+		$this->assertSame( $expected, $theme_json->get_stylesheet( array( 'styles' ) ) );
+	}
+
+	/**
+	 * @ticket 54336
+	 * @ticket 58548
+	 * @ticket 58550
+	 */
+	public function test_get_stylesheet_renders_enabled_protected_properties() {
+		$theme_json = new WP_Theme_JSON(
+			array(
+				'version'  => WP_Theme_JSON::LATEST_SCHEMA,
+				'settings' => array(
+					'spacing' => array(
+						'blockGap' => true,
+					),
+				),
+				'styles'   => array(
+					'spacing' => array(
+						'blockGap' => '1em',
+					),
+				),
+			)
+		);
+
+		$expected = 'body { margin: 0; }.wp-site-blocks > .alignleft { float: left; margin-right: 2em; }.wp-site-blocks > .alignright { float: right; margin-left: 2em; }.wp-site-blocks > .aligncenter { justify-content: center; margin-left: auto; margin-right: auto; }:where(.wp-site-blocks) > * { margin-block-start: 1em; margin-block-end: 0; }:where(.wp-site-blocks) > :first-child:first-child { margin-block-start: 0; }:where(.wp-site-blocks) > :last-child:last-child { margin-block-end: 0; }body { --wp--style--block-gap: 1em; }:where(body .is-layout-flow)  > :first-child:first-child{margin-block-start: 0;}:where(body .is-layout-flow)  > :last-child:last-child{margin-block-end: 0;}:where(body .is-layout-flow)  > *{margin-block-start: 1em;margin-block-end: 0;}:where(body .is-layout-constrained)  > :first-child:first-child{margin-block-start: 0;}:where(body .is-layout-constrained)  > :last-child:last-child{margin-block-end: 0;}:where(body .is-layout-constrained)  > *{margin-block-start: 1em;margin-block-end: 0;}:where(body .is-layout-flex) {gap: 1em;}:where(body .is-layout-grid) {gap: 1em;}body .is-layout-flow > .alignleft{float: left;margin-inline-start: 0;margin-inline-end: 2em;}body .is-layout-flow > .alignright{float: right;margin-inline-start: 2em;margin-inline-end: 0;}body .is-layout-flow > .aligncenter{margin-left: auto !important;margin-right: auto !important;}body .is-layout-constrained > .alignleft{float: left;margin-inline-start: 0;margin-inline-end: 2em;}body .is-layout-constrained > .alignright{float: right;margin-inline-start: 2em;margin-inline-end: 0;}body .is-layout-constrained > .aligncenter{margin-left: auto !important;margin-right: auto !important;}body .is-layout-constrained > :where(:not(.alignleft):not(.alignright):not(.alignfull)){max-width: var(--wp--style--global--content-size);margin-left: auto !important;margin-right: auto !important;}body .is-layout-constrained > .alignwide{max-width: var(--wp--style--global--wide-size);}body .is-layout-flex{display: flex;}body .is-layout-flex{flex-wrap: wrap;align-items: center;}body .is-layout-flex > *{margin: 0;}body .is-layout-grid{display: grid;}body .is-layout-grid > *{margin: 0;}';
+		$this->assertSame( $expected, $theme_json->get_stylesheet() );
+		$this->assertSame( $expected, $theme_json->get_stylesheet( array( 'styles' ) ) );
 	}
 
 	/**
@@ -721,7 +748,9 @@ class Tests_Theme_wpThemeJson extends WP_UnitTestCase {
 		$styles    = 'body { margin: 0; }.wp-site-blocks > .alignleft { float: left; margin-right: 2em; }.wp-site-blocks > .alignright { float: right; margin-left: 2em; }.wp-site-blocks > .aligncenter { justify-content: center; margin-left: auto; margin-right: auto; }:where(.is-layout-flex){gap: 0.5em;}:where(.is-layout-grid){gap: 0.5em;}body .is-layout-flow > .alignleft{float: left;margin-inline-start: 0;margin-inline-end: 2em;}body .is-layout-flow > .alignright{float: right;margin-inline-start: 2em;margin-inline-end: 0;}body .is-layout-flow > .aligncenter{margin-left: auto !important;margin-right: auto !important;}body .is-layout-constrained > .alignleft{float: left;margin-inline-start: 0;margin-inline-end: 2em;}body .is-layout-constrained > .alignright{float: right;margin-inline-start: 2em;margin-inline-end: 0;}body .is-layout-constrained > .aligncenter{margin-left: auto !important;margin-right: auto !important;}body .is-layout-constrained > :where(:not(.alignleft):not(.alignright):not(.alignfull)){max-width: var(--wp--style--global--content-size);margin-left: auto !important;margin-right: auto !important;}body .is-layout-constrained > .alignwide{max-width: var(--wp--style--global--wide-size);}body .is-layout-flex{display: flex;}body .is-layout-flex{flex-wrap: wrap;align-items: center;}body .is-layout-flex > *{margin: 0;}body .is-layout-grid{display: grid;}body .is-layout-grid > *{margin: 0;}.wp-block-group{color: red;}';
 		$presets   = '.wp-block-group.has-grey-color{color: var(--wp--preset--color--grey) !important;}.wp-block-group.has-grey-background-color{background-color: var(--wp--preset--color--grey) !important;}.wp-block-group.has-grey-border-color{border-color: var(--wp--preset--color--grey) !important;}';
 		$variables = '.wp-block-group{--wp--preset--color--grey: grey;}';
-		$all       = $variables . $styles . $presets;
+
+		$all = $variables . $styles . $presets;
+
 		$this->assertSame( $all, $theme_json->get_stylesheet() );
 		$this->assertSame( $styles, $theme_json->get_stylesheet( array( 'styles' ) ) );
 		$this->assertSame( $presets, $theme_json->get_stylesheet( array( 'presets' ) ) );
@@ -1096,30 +1125,346 @@ class Tests_Theme_wpThemeJson extends WP_UnitTestCase {
 	}
 
 	/**
-	 * @ticket 52991
-	 * @ticket 54336
+	 * @ticket 56467
+	 * @ticket 58548
+	 * @ticket 58550
 	 */
-	public function test_merge_incoming_data() {
+	public function test_get_stylesheet_generates_layout_styles() {
 		$theme_json = new WP_Theme_JSON(
 			array(
 				'version'  => WP_Theme_JSON::LATEST_SCHEMA,
 				'settings' => array(
-					'color'  => array(
-						'custom'  => false,
-						'palette' => array(
-							array(
-								'slug'  => 'red',
-								'color' => 'red',
-							),
-							array(
-								'slug'  => 'green',
-								'color' => 'green',
-							),
-						),
+					'spacing' => array(
+						'blockGap' => true,
 					),
-					'blocks' => array(
-						'core/paragraph' => array(
-							'color' => array(
+				),
+				'styles'   => array(
+					'spacing' => array(
+						'blockGap' => '1em',
+					),
+				),
+			),
+			'default'
+		);
+
+		// Results also include root site blocks styles.
+		$this->assertSame(
+			'body { margin: 0; }.wp-site-blocks > .alignleft { float: left; margin-right: 2em; }.wp-site-blocks > .alignright { float: right; margin-left: 2em; }.wp-site-blocks > .aligncenter { justify-content: center; margin-left: auto; margin-right: auto; }:where(.wp-site-blocks) > * { margin-block-start: 1em; margin-block-end: 0; }:where(.wp-site-blocks) > :first-child:first-child { margin-block-start: 0; }:where(.wp-site-blocks) > :last-child:last-child { margin-block-end: 0; }body { --wp--style--block-gap: 1em; }:where(body .is-layout-flow)  > :first-child:first-child{margin-block-start: 0;}:where(body .is-layout-flow)  > :last-child:last-child{margin-block-end: 0;}:where(body .is-layout-flow)  > *{margin-block-start: 1em;margin-block-end: 0;}:where(body .is-layout-constrained)  > :first-child:first-child{margin-block-start: 0;}:where(body .is-layout-constrained)  > :last-child:last-child{margin-block-end: 0;}:where(body .is-layout-constrained)  > *{margin-block-start: 1em;margin-block-end: 0;}:where(body .is-layout-flex) {gap: 1em;}:where(body .is-layout-grid) {gap: 1em;}body .is-layout-flow > .alignleft{float: left;margin-inline-start: 0;margin-inline-end: 2em;}body .is-layout-flow > .alignright{float: right;margin-inline-start: 2em;margin-inline-end: 0;}body .is-layout-flow > .aligncenter{margin-left: auto !important;margin-right: auto !important;}body .is-layout-constrained > .alignleft{float: left;margin-inline-start: 0;margin-inline-end: 2em;}body .is-layout-constrained > .alignright{float: right;margin-inline-start: 2em;margin-inline-end: 0;}body .is-layout-constrained > .aligncenter{margin-left: auto !important;margin-right: auto !important;}body .is-layout-constrained > :where(:not(.alignleft):not(.alignright):not(.alignfull)){max-width: var(--wp--style--global--content-size);margin-left: auto !important;margin-right: auto !important;}body .is-layout-constrained > .alignwide{max-width: var(--wp--style--global--wide-size);}body .is-layout-flex{display: flex;}body .is-layout-flex{flex-wrap: wrap;align-items: center;}body .is-layout-flex > *{margin: 0;}body .is-layout-grid{display: grid;}body .is-layout-grid > *{margin: 0;}',
+			$theme_json->get_stylesheet( array( 'styles' ) )
+		);
+	}
+
+	/**
+	 * @ticket 56467
+	 * @ticket 58548
+	 * @ticket 58550
+	 */
+	public function test_get_stylesheet_generates_layout_styles_with_spacing_presets() {
+		$theme_json = new WP_Theme_JSON(
+			array(
+				'version'  => WP_Theme_JSON::LATEST_SCHEMA,
+				'settings' => array(
+					'spacing' => array(
+						'blockGap' => true,
+					),
+				),
+				'styles'   => array(
+					'spacing' => array(
+						'blockGap' => 'var:preset|spacing|60',
+					),
+				),
+			),
+			'default'
+		);
+
+		// Results also include root site blocks styles.
+		$this->assertSame(
+			'body { margin: 0; }.wp-site-blocks > .alignleft { float: left; margin-right: 2em; }.wp-site-blocks > .alignright { float: right; margin-left: 2em; }.wp-site-blocks > .aligncenter { justify-content: center; margin-left: auto; margin-right: auto; }:where(.wp-site-blocks) > * { margin-block-start: var(--wp--preset--spacing--60); margin-block-end: 0; }:where(.wp-site-blocks) > :first-child:first-child { margin-block-start: 0; }:where(.wp-site-blocks) > :last-child:last-child { margin-block-end: 0; }body { --wp--style--block-gap: var(--wp--preset--spacing--60); }:where(body .is-layout-flow)  > :first-child:first-child{margin-block-start: 0;}:where(body .is-layout-flow)  > :last-child:last-child{margin-block-end: 0;}:where(body .is-layout-flow)  > *{margin-block-start: var(--wp--preset--spacing--60);margin-block-end: 0;}:where(body .is-layout-constrained)  > :first-child:first-child{margin-block-start: 0;}:where(body .is-layout-constrained)  > :last-child:last-child{margin-block-end: 0;}:where(body .is-layout-constrained)  > *{margin-block-start: var(--wp--preset--spacing--60);margin-block-end: 0;}:where(body .is-layout-flex) {gap: var(--wp--preset--spacing--60);}:where(body .is-layout-grid) {gap: var(--wp--preset--spacing--60);}body .is-layout-flow > .alignleft{float: left;margin-inline-start: 0;margin-inline-end: 2em;}body .is-layout-flow > .alignright{float: right;margin-inline-start: 2em;margin-inline-end: 0;}body .is-layout-flow > .aligncenter{margin-left: auto !important;margin-right: auto !important;}body .is-layout-constrained > .alignleft{float: left;margin-inline-start: 0;margin-inline-end: 2em;}body .is-layout-constrained > .alignright{float: right;margin-inline-start: 2em;margin-inline-end: 0;}body .is-layout-constrained > .aligncenter{margin-left: auto !important;margin-right: auto !important;}body .is-layout-constrained > :where(:not(.alignleft):not(.alignright):not(.alignfull)){max-width: var(--wp--style--global--content-size);margin-left: auto !important;margin-right: auto !important;}body .is-layout-constrained > .alignwide{max-width: var(--wp--style--global--wide-size);}body .is-layout-flex{display: flex;}body .is-layout-flex{flex-wrap: wrap;align-items: center;}body .is-layout-flex > *{margin: 0;}body .is-layout-grid{display: grid;}body .is-layout-grid > *{margin: 0;}',
+			$theme_json->get_stylesheet( array( 'styles' ) )
+		);
+	}
+
+	/**
+	 * @ticket 56467
+	 * @ticket 58550
+	 */
+	public function test_get_stylesheet_generates_fallback_gap_layout_styles() {
+		$theme_json = new WP_Theme_JSON(
+			array(
+				'version'  => WP_Theme_JSON::LATEST_SCHEMA,
+				'settings' => array(
+					'spacing' => array(
+						'blockGap' => null,
+					),
+				),
+				'styles'   => array(
+					'spacing' => array(
+						'blockGap' => '1em',
+					),
+				),
+			),
+			'default'
+		);
+		$stylesheet = $theme_json->get_stylesheet( array( 'styles' ) );
+
+		// Results also include root site blocks styles.
+		$this->assertSame(
+			'body { margin: 0; }.wp-site-blocks > .alignleft { float: left; margin-right: 2em; }.wp-site-blocks > .alignright { float: right; margin-left: 2em; }.wp-site-blocks > .aligncenter { justify-content: center; margin-left: auto; margin-right: auto; }:where(.is-layout-flex){gap: 0.5em;}:where(.is-layout-grid){gap: 0.5em;}body .is-layout-flow > .alignleft{float: left;margin-inline-start: 0;margin-inline-end: 2em;}body .is-layout-flow > .alignright{float: right;margin-inline-start: 2em;margin-inline-end: 0;}body .is-layout-flow > .aligncenter{margin-left: auto !important;margin-right: auto !important;}body .is-layout-constrained > .alignleft{float: left;margin-inline-start: 0;margin-inline-end: 2em;}body .is-layout-constrained > .alignright{float: right;margin-inline-start: 2em;margin-inline-end: 0;}body .is-layout-constrained > .aligncenter{margin-left: auto !important;margin-right: auto !important;}body .is-layout-constrained > :where(:not(.alignleft):not(.alignright):not(.alignfull)){max-width: var(--wp--style--global--content-size);margin-left: auto !important;margin-right: auto !important;}body .is-layout-constrained > .alignwide{max-width: var(--wp--style--global--wide-size);}body .is-layout-flex{display: flex;}body .is-layout-flex{flex-wrap: wrap;align-items: center;}body .is-layout-flex > *{margin: 0;}body .is-layout-grid{display: grid;}body .is-layout-grid > *{margin: 0;}',
+			$stylesheet
+		);
+	}
+
+	/**
+	 * @ticket 56467
+	 * @ticket 58550
+	 */
+	public function test_get_stylesheet_generates_base_fallback_gap_layout_styles() {
+		$theme_json = new WP_Theme_JSON(
+			array(
+				'version'  => WP_Theme_JSON::LATEST_SCHEMA,
+				'settings' => array(
+					'spacing' => array(
+						'blockGap' => null,
+					),
+				),
+			),
+			'default'
+		);
+		$stylesheet = $theme_json->get_stylesheet( array( 'base-layout-styles' ) );
+
+		// Note the `base-layout-styles` includes a fallback gap for the Columns block for backwards compatibility.
+		$this->assertSame(
+			':where(.is-layout-flex){gap: 0.5em;}:where(.is-layout-grid){gap: 0.5em;}body .is-layout-flow > .alignleft{float: left;margin-inline-start: 0;margin-inline-end: 2em;}body .is-layout-flow > .alignright{float: right;margin-inline-start: 2em;margin-inline-end: 0;}body .is-layout-flow > .aligncenter{margin-left: auto !important;margin-right: auto !important;}body .is-layout-constrained > .alignleft{float: left;margin-inline-start: 0;margin-inline-end: 2em;}body .is-layout-constrained > .alignright{float: right;margin-inline-start: 2em;margin-inline-end: 0;}body .is-layout-constrained > .aligncenter{margin-left: auto !important;margin-right: auto !important;}body .is-layout-constrained > :where(:not(.alignleft):not(.alignright):not(.alignfull)){max-width: var(--wp--style--global--content-size);margin-left: auto !important;margin-right: auto !important;}body .is-layout-constrained > .alignwide{max-width: var(--wp--style--global--wide-size);}body .is-layout-flex{display: flex;}body .is-layout-flex{flex-wrap: wrap;align-items: center;}body .is-layout-flex > *{margin: 0;}body .is-layout-grid{display: grid;}body .is-layout-grid > *{margin: 0;}:where(.wp-block-columns.is-layout-flex){gap: 2em;}:where(.wp-block-columns.is-layout-grid){gap: 2em;}:where(.wp-block-post-template.is-layout-flex){gap: 1.25em;}:where(.wp-block-post-template.is-layout-grid){gap: 1.25em;}',
+			$stylesheet
+		);
+	}
+
+	/**
+	 * @ticket 56467
+	 * @ticket 58550
+	 */
+	public function test_get_stylesheet_skips_layout_styles() {
+		add_theme_support( 'disable-layout-styles' );
+		$theme_json = new WP_Theme_JSON(
+			array(
+				'version'  => WP_Theme_JSON::LATEST_SCHEMA,
+				'settings' => array(
+					'spacing' => array(
+						'blockGap' => null,
+					),
+				),
+			),
+			'default'
+		);
+		$stylesheet = $theme_json->get_stylesheet( array( 'base-layout-styles' ) );
+		remove_theme_support( 'disable-layout-styles' );
+
+		// All Layout styles should be skipped.
+		$this->assertSame(
+			'',
+			$stylesheet
+		);
+	}
+
+	/**
+	 * @ticket 56467
+	 * @ticket 58550
+	 */
+	public function test_get_stylesheet_generates_valid_block_gap_values_and_skips_null_or_false_values() {
+		$theme_json = new WP_Theme_JSON(
+			array(
+				'version'  => WP_Theme_JSON::LATEST_SCHEMA,
+				'settings' => array(
+					'spacing' => array(
+						'blockGap' => true,
+					),
+				),
+				'styles'   => array(
+					'spacing' => array(
+						'blockGap' => '1rem',
+					),
+					'blocks'  => array(
+						'core/post-content' => array(
+							'color' => array(
+								'text' => 'gray', // This value should not render block layout styles.
+							),
+						),
+						'core/social-links' => array(
+							'spacing' => array(
+								'blockGap' => '0', // This value should render block layout gap as zero.
+							),
+						),
+						'core/buttons'      => array(
+							'spacing' => array(
+								'blockGap' => 0, // This value should render block layout gap as zero.
+							),
+						),
+						'core/columns'      => array(
+							'spacing' => array(
+								'blockGap' => false, // This value should be ignored. The block will use the global layout value.
+							),
+						),
+					),
+				),
+			),
+			'default'
+		);
+
+		$this->assertSame(
+			'body { margin: 0; }.wp-site-blocks > .alignleft { float: left; margin-right: 2em; }.wp-site-blocks > .alignright { float: right; margin-left: 2em; }.wp-site-blocks > .aligncenter { justify-content: center; margin-left: auto; margin-right: auto; }:where(.wp-site-blocks) > * { margin-block-start: 1rem; margin-block-end: 0; }:where(.wp-site-blocks) > :first-child:first-child { margin-block-start: 0; }:where(.wp-site-blocks) > :last-child:last-child { margin-block-end: 0; }body { --wp--style--block-gap: 1rem; }:where(body .is-layout-flow)  > :first-child:first-child{margin-block-start: 0;}:where(body .is-layout-flow)  > :last-child:last-child{margin-block-end: 0;}:where(body .is-layout-flow)  > *{margin-block-start: 1rem;margin-block-end: 0;}:where(body .is-layout-constrained)  > :first-child:first-child{margin-block-start: 0;}:where(body .is-layout-constrained)  > :last-child:last-child{margin-block-end: 0;}:where(body .is-layout-constrained)  > *{margin-block-start: 1rem;margin-block-end: 0;}:where(body .is-layout-flex) {gap: 1rem;}:where(body .is-layout-grid) {gap: 1rem;}body .is-layout-flow > .alignleft{float: left;margin-inline-start: 0;margin-inline-end: 2em;}body .is-layout-flow > .alignright{float: right;margin-inline-start: 2em;margin-inline-end: 0;}body .is-layout-flow > .aligncenter{margin-left: auto !important;margin-right: auto !important;}body .is-layout-constrained > .alignleft{float: left;margin-inline-start: 0;margin-inline-end: 2em;}body .is-layout-constrained > .alignright{float: right;margin-inline-start: 2em;margin-inline-end: 0;}body .is-layout-constrained > .aligncenter{margin-left: auto !important;margin-right: auto !important;}body .is-layout-constrained > :where(:not(.alignleft):not(.alignright):not(.alignfull)){max-width: var(--wp--style--global--content-size);margin-left: auto !important;margin-right: auto !important;}body .is-layout-constrained > .alignwide{max-width: var(--wp--style--global--wide-size);}body .is-layout-flex{display: flex;}body .is-layout-flex{flex-wrap: wrap;align-items: center;}body .is-layout-flex > *{margin: 0;}body .is-layout-grid{display: grid;}body .is-layout-grid > *{margin: 0;}.wp-block-post-content{color: gray;}.wp-block-social-links-is-layout-flow > :first-child:first-child{margin-block-start: 0;}.wp-block-social-links-is-layout-flow > :last-child:last-child{margin-block-end: 0;}.wp-block-social-links-is-layout-flow > *{margin-block-start: 0;margin-block-end: 0;}.wp-block-social-links-is-layout-constrained > :first-child:first-child{margin-block-start: 0;}.wp-block-social-links-is-layout-constrained > :last-child:last-child{margin-block-end: 0;}.wp-block-social-links-is-layout-constrained > *{margin-block-start: 0;margin-block-end: 0;}.wp-block-social-links-is-layout-flex{gap: 0;}.wp-block-social-links-is-layout-grid{gap: 0;}.wp-block-buttons-is-layout-flow > :first-child:first-child{margin-block-start: 0;}.wp-block-buttons-is-layout-flow > :last-child:last-child{margin-block-end: 0;}.wp-block-buttons-is-layout-flow > *{margin-block-start: 0;margin-block-end: 0;}.wp-block-buttons-is-layout-constrained > :first-child:first-child{margin-block-start: 0;}.wp-block-buttons-is-layout-constrained > :last-child:last-child{margin-block-end: 0;}.wp-block-buttons-is-layout-constrained > *{margin-block-start: 0;margin-block-end: 0;}.wp-block-buttons-is-layout-flex{gap: 0;}.wp-block-buttons-is-layout-grid{gap: 0;}',
+			$theme_json->get_stylesheet()
+		);
+	}
+
+	/**
+	 * @ticket 57354
+	 * @ticket 58550
+	 */
+	public function test_get_stylesheet_returns_outline_styles() {
+		$theme_json = new WP_Theme_JSON(
+			array(
+				'version' => WP_Theme_JSON::LATEST_SCHEMA,
+				'styles'  => array(
+					'elements' => array(
+						'button' => array(
+							'outline' => array(
+								'offset' => '3px',
+								'width'  => '3px',
+								'style'  => 'dashed',
+								'color'  => 'red',
+							),
+							':hover'  => array(
+								'outline' => array(
+									'offset' => '3px',
+									'width'  => '3px',
+									'style'  => 'solid',
+									'color'  => 'blue',
+								),
+							),
+						),
+					),
+				),
+			)
+		);
+
+		$base_styles = 'body { margin: 0; }.wp-site-blocks > .alignleft { float: left; margin-right: 2em; }.wp-site-blocks > .alignright { float: right; margin-left: 2em; }.wp-site-blocks > .aligncenter { justify-content: center; margin-left: auto; margin-right: auto; }:where(.is-layout-flex){gap: 0.5em;}:where(.is-layout-grid){gap: 0.5em;}body .is-layout-flow > .alignleft{float: left;margin-inline-start: 0;margin-inline-end: 2em;}body .is-layout-flow > .alignright{float: right;margin-inline-start: 2em;margin-inline-end: 0;}body .is-layout-flow > .aligncenter{margin-left: auto !important;margin-right: auto !important;}body .is-layout-constrained > .alignleft{float: left;margin-inline-start: 0;margin-inline-end: 2em;}body .is-layout-constrained > .alignright{float: right;margin-inline-start: 2em;margin-inline-end: 0;}body .is-layout-constrained > .aligncenter{margin-left: auto !important;margin-right: auto !important;}body .is-layout-constrained > :where(:not(.alignleft):not(.alignright):not(.alignfull)){max-width: var(--wp--style--global--content-size);margin-left: auto !important;margin-right: auto !important;}body .is-layout-constrained > .alignwide{max-width: var(--wp--style--global--wide-size);}body .is-layout-flex{display: flex;}body .is-layout-flex{flex-wrap: wrap;align-items: center;}body .is-layout-flex > *{margin: 0;}body .is-layout-grid{display: grid;}body .is-layout-grid > *{margin: 0;}';
+
+		$element_styles = '.wp-element-button, .wp-block-button__link{outline-color: red;outline-offset: 3px;outline-style: dashed;outline-width: 3px;}.wp-element-button:hover, .wp-block-button__link:hover{outline-color: blue;outline-offset: 3px;outline-style: solid;outline-width: 3px;}';
+
+		$expected = $base_styles . $element_styles;
+		$this->assertSame( $expected, $theme_json->get_stylesheet() );
+	}
+
+	/**
+	 * Tests that a custom root selector is correctly applied when generating a stylesheet.
+	 *
+	 * @ticket 60343
+	 */
+	public function test_get_stylesheet_custom_root_selector() {
+		$theme_json = new WP_Theme_JSON(
+			array(
+				'version' => WP_Theme_JSON::LATEST_SCHEMA,
+				'styles'  => array(
+					'color' => array(
+						'text' => 'teal',
+					),
+				),
+			),
+			'default'
+		);
+
+		$options = array( 'root_selector' => '.custom' );
+		$actual  = $theme_json->get_stylesheet( array( 'styles' ), null, $options );
+
+		// Results also include root site blocks styles which hard code
+		// `body { margin: 0; }`.
+		$this->assertSame(
+			'body { margin: 0; }.wp-site-blocks > .alignleft { float: left; margin-right: 2em; }.wp-site-blocks > .alignright { float: right; margin-left: 2em; }.wp-site-blocks > .aligncenter { justify-content: center; margin-left: auto; margin-right: auto; }.custom{color: teal;}',
+			$actual
+		);
+	}
+
+	public function test_allow_indirect_properties() {
+		$actual = WP_Theme_JSON::remove_insecure_properties(
+			array(
+				'version'  => WP_Theme_JSON::LATEST_SCHEMA,
+				'styles'   => array(
+					'blocks'  => array(
+						'core/social-links' => array(
+							'spacing' => array(
+								'blockGap' => array(
+									'top'  => '1em',
+									'left' => '2em',
+								),
+							),
+						),
+					),
+					'spacing' => array(
+						'blockGap' => '3em',
+					),
+				),
+				'settings' => array(
+					'layout' => array(
+						'contentSize' => '800px',
+						'wideSize'    => '1000px',
+					),
+				),
+			)
+		);
+
+		$expected = array(
+			'version'  => WP_Theme_JSON::LATEST_SCHEMA,
+			'styles'   => array(
+				'blocks'  => array(
+					'core/social-links' => array(
+						'spacing' => array(
+							'blockGap' => array(
+								'top'  => '1em',
+								'left' => '2em',
+							),
+						),
+					),
+				),
+				'spacing' => array(
+					'blockGap' => '3em',
+				),
+			),
+			'settings' => array(
+				'layout' => array(
+					'contentSize' => '800px',
+					'wideSize'    => '1000px',
+				),
+			),
+		);
+
+		$this->assertEqualSetsWithIndex( $expected, $actual );
+	}
+
+	/**
+	 * @ticket 52991
+	 * @ticket 54336
+	 */
+	public function test_merge_incoming_data() {
+		$theme_json = new WP_Theme_JSON(
+			array(
+				'version'  => WP_Theme_JSON::LATEST_SCHEMA,
+				'settings' => array(
+					'color'  => array(
+						'custom'  => false,
+						'palette' => array(
+							array(
+								'slug'  => 'red',
+								'color' => 'red',
+							),
+							array(
+								'slug'  => 'green',
+								'color' => 'green',
+							),
+						),
+					),
+					'blocks' => array(
+						'core/paragraph' => array(
+							'color' => array(
 								'custom' => false,
 							),
 						),
@@ -2537,6 +2882,11 @@ class Tests_Theme_wpThemeJson extends WP_UnitTestCase {
 									'background' => 'blue',
 								),
 							),
+							':seen'  => array(
+								'color' => array(
+									'background' => 'ivory',
+								),
+							),
 						),
 					),
 				),
@@ -2822,49 +3172,6 @@ class Tests_Theme_wpThemeJson extends WP_UnitTestCase {
 		$this->assertEqualSetsWithIndex( $expected, $actual['settings']['spacing'] );
 	}
 
-	/**
-	 * @ticket 54487
-	 */
-	public function test_sanitization() {
-		$theme_json = new WP_Theme_JSON(
-			array(
-				'version' => 2,
-				'styles'  => array(
-					'spacing' => array(
-						'blockGap' => 'valid value',
-					),
-					'blocks'  => array(
-						'core/group' => array(
-							'spacing' => array(
-								'margin'  => 'valid value',
-								'display' => 'none',
-							),
-						),
-					),
-				),
-			)
-		);
-
-		$actual   = $theme_json->get_raw_data();
-		$expected = array(
-			'version' => 2,
-			'styles'  => array(
-				'spacing' => array(
-					'blockGap' => 'valid value',
-				),
-				'blocks'  => array(
-					'core/group' => array(
-						'spacing' => array(
-							'margin' => 'valid value',
-						),
-					),
-				),
-			),
-		);
-
-		$this->assertEqualSetsWithIndex( $expected, $actual );
-	}
-
 	/**
 	 * @ticket 55505
 	 */
@@ -3137,6 +3444,51 @@ class Tests_Theme_wpThemeJson extends WP_UnitTestCase {
 		$this->assertEqualSetsWithIndex( $expected, $actual );
 	}
 
+	public function test_remove_invalid_font_family_settings() {
+		$actual = WP_Theme_JSON::remove_insecure_properties(
+			array(
+				'version'  => WP_Theme_JSON::LATEST_SCHEMA,
+				'settings' => array(
+					'typography' => array(
+						'fontFamilies' => array(
+							'custom' => array(
+								array(
+									'name'       => 'Open Sans',
+									'slug'       => 'open-sans',
+									'fontFamily' => '"Open Sans", sans-serif</style><script>alert("xss")</script>',
+								),
+								array(
+									'name'       => 'Arial',
+									'slug'       => 'arial',
+									'fontFamily' => 'Arial, serif',
+								),
+							),
+						),
+					),
+				),
+			),
+			true
+		);
+
+		$expected = array(
+			'version'  => WP_Theme_JSON::LATEST_SCHEMA,
+			'settings' => array(
+				'typography' => array(
+					'fontFamilies' => array(
+						'custom' => array(
+							array(
+								'name'       => 'Arial',
+								'slug'       => 'arial',
+								'fontFamily' => 'Arial, serif',
+							),
+						),
+					),
+				),
+			),
+		);
+
+		$this->assertEqualSetsWithIndex( $expected, $actual );
+	}
 
 	/**
 	 * @ticket 56467
@@ -3186,7 +3538,9 @@ class Tests_Theme_wpThemeJson extends WP_UnitTestCase {
 			)
 		);
 
-		$expected = 'body { margin: 0; }.wp-site-blocks > .alignleft { float: left; margin-right: 2em; }.wp-site-blocks > .alignright { float: right; margin-left: 2em; }.wp-site-blocks > .aligncenter { justify-content: center; margin-left: auto; margin-right: auto; }:where(.is-layout-flex){gap: 0.5em;}:where(.is-layout-grid){gap: 0.5em;}body .is-layout-flow > .alignleft{float: left;margin-inline-start: 0;margin-inline-end: 2em;}body .is-layout-flow > .alignright{float: right;margin-inline-start: 2em;margin-inline-end: 0;}body .is-layout-flow > .aligncenter{margin-left: auto !important;margin-right: auto !important;}body .is-layout-constrained > .alignleft{float: left;margin-inline-start: 0;margin-inline-end: 2em;}body .is-layout-constrained > .alignright{float: right;margin-inline-start: 2em;margin-inline-end: 0;}body .is-layout-constrained > .aligncenter{margin-left: auto !important;margin-right: auto !important;}body .is-layout-constrained > :where(:not(.alignleft):not(.alignright):not(.alignfull)){max-width: var(--wp--style--global--content-size);margin-left: auto !important;margin-right: auto !important;}body .is-layout-constrained > .alignwide{max-width: var(--wp--style--global--wide-size);}body .is-layout-flex{display: flex;}body .is-layout-flex{flex-wrap: wrap;align-items: center;}body .is-layout-flex > *{margin: 0;}body .is-layout-grid{display: grid;}body .is-layout-grid > *{margin: 0;}body{background-color: #ffffff;color: #000000;}.wp-element-button, .wp-block-button__link{background-color: #000000;color: #ffffff;}';
+		$base_styles  = 'body { margin: 0; }.wp-site-blocks > .alignleft { float: left; margin-right: 2em; }.wp-site-blocks > .alignright { float: right; margin-left: 2em; }.wp-site-blocks > .aligncenter { justify-content: center; margin-left: auto; margin-right: auto; }:where(.is-layout-flex){gap: 0.5em;}:where(.is-layout-grid){gap: 0.5em;}body .is-layout-flow > .alignleft{float: left;margin-inline-start: 0;margin-inline-end: 2em;}body .is-layout-flow > .alignright{float: right;margin-inline-start: 2em;margin-inline-end: 0;}body .is-layout-flow > .aligncenter{margin-left: auto !important;margin-right: auto !important;}body .is-layout-constrained > .alignleft{float: left;margin-inline-start: 0;margin-inline-end: 2em;}body .is-layout-constrained > .alignright{float: right;margin-inline-start: 2em;margin-inline-end: 0;}body .is-layout-constrained > .aligncenter{margin-left: auto !important;margin-right: auto !important;}body .is-layout-constrained > :where(:not(.alignleft):not(.alignright):not(.alignfull)){max-width: var(--wp--style--global--content-size);margin-left: auto !important;margin-right: auto !important;}body .is-layout-constrained > .alignwide{max-width: var(--wp--style--global--wide-size);}body .is-layout-flex{display: flex;}body .is-layout-flex{flex-wrap: wrap;align-items: center;}body .is-layout-flex > *{margin: 0;}body .is-layout-grid{display: grid;}body .is-layout-grid > *{margin: 0;}';
+		$color_styles = 'body{background-color: #ffffff;color: #000000;}.wp-element-button, .wp-block-button__link{background-color: #000000;color: #ffffff;}';
+		$expected     = $base_styles . $color_styles;
 		$this->assertSame( $expected, $theme_json->get_stylesheet() );
 	}
 
@@ -3208,7 +3562,6 @@ class Tests_Theme_wpThemeJson extends WP_UnitTestCase {
 	 *
 	 * @param array $styles An array with style definitions.
 	 * @param array $path   Path to the desired properties.
-	 *
 	 */
 	public function test_get_property_value_should_return_string_for_invalid_paths_or_null_values( $styles, $path ) {
 		$reflection_class = new ReflectionClass( WP_Theme_JSON::class );
@@ -3239,7 +3592,8 @@ class Tests_Theme_wpThemeJson extends WP_UnitTestCase {
 	}
 
 	/**
-	 * Testing that dynamic properties in theme.json that refer to other dynamic properties in a loop
+	 * Testing that dynamic properties in theme.json that
+	 * refer to other dynamic properties in a loop
 	 * should be left untouched.
 	 *
 	 * @ticket 56467
@@ -3267,12 +3621,15 @@ class Tests_Theme_wpThemeJson extends WP_UnitTestCase {
 			)
 		);
 
-		$expected = 'body { margin: 0; }.wp-site-blocks > .alignleft { float: left; margin-right: 2em; }.wp-site-blocks > .alignright { float: right; margin-left: 2em; }.wp-site-blocks > .aligncenter { justify-content: center; margin-left: auto; margin-right: auto; }:where(.is-layout-flex){gap: 0.5em;}:where(.is-layout-grid){gap: 0.5em;}body .is-layout-flow > .alignleft{float: left;margin-inline-start: 0;margin-inline-end: 2em;}body .is-layout-flow > .alignright{float: right;margin-inline-start: 2em;margin-inline-end: 0;}body .is-layout-flow > .aligncenter{margin-left: auto !important;margin-right: auto !important;}body .is-layout-constrained > .alignleft{float: left;margin-inline-start: 0;margin-inline-end: 2em;}body .is-layout-constrained > .alignright{float: right;margin-inline-start: 2em;margin-inline-end: 0;}body .is-layout-constrained > .aligncenter{margin-left: auto !important;margin-right: auto !important;}body .is-layout-constrained > :where(:not(.alignleft):not(.alignright):not(.alignfull)){max-width: var(--wp--style--global--content-size);margin-left: auto !important;margin-right: auto !important;}body .is-layout-constrained > .alignwide{max-width: var(--wp--style--global--wide-size);}body .is-layout-flex{display: flex;}body .is-layout-flex{flex-wrap: wrap;align-items: center;}body .is-layout-flex > *{margin: 0;}body .is-layout-grid{display: grid;}body .is-layout-grid > *{margin: 0;}body{background-color: #ffffff;}.wp-element-button, .wp-block-button__link{color: #ffffff;}';
+		$base_styles  = 'body { margin: 0; }.wp-site-blocks > .alignleft { float: left; margin-right: 2em; }.wp-site-blocks > .alignright { float: right; margin-left: 2em; }.wp-site-blocks > .aligncenter { justify-content: center; margin-left: auto; margin-right: auto; }:where(.is-layout-flex){gap: 0.5em;}:where(.is-layout-grid){gap: 0.5em;}body .is-layout-flow > .alignleft{float: left;margin-inline-start: 0;margin-inline-end: 2em;}body .is-layout-flow > .alignright{float: right;margin-inline-start: 2em;margin-inline-end: 0;}body .is-layout-flow > .aligncenter{margin-left: auto !important;margin-right: auto !important;}body .is-layout-constrained > .alignleft{float: left;margin-inline-start: 0;margin-inline-end: 2em;}body .is-layout-constrained > .alignright{float: right;margin-inline-start: 2em;margin-inline-end: 0;}body .is-layout-constrained > .aligncenter{margin-left: auto !important;margin-right: auto !important;}body .is-layout-constrained > :where(:not(.alignleft):not(.alignright):not(.alignfull)){max-width: var(--wp--style--global--content-size);margin-left: auto !important;margin-right: auto !important;}body .is-layout-constrained > .alignwide{max-width: var(--wp--style--global--wide-size);}body .is-layout-flex{display: flex;}body .is-layout-flex{flex-wrap: wrap;align-items: center;}body .is-layout-flex > *{margin: 0;}body .is-layout-grid{display: grid;}body .is-layout-grid > *{margin: 0;}';
+		$color_styles = 'body{background-color: #ffffff;}.wp-element-button, .wp-block-button__link{color: #ffffff;}';
+		$expected     = $base_styles . $color_styles;
 		$this->assertSame( $expected, $theme_json->get_stylesheet() );
 	}
 
 	/**
-	 * Testing that dynamic properties in theme.json that refer to other dynamic properties
+	 * Testing that dynamic properties in theme.json that
+	 * refer to other dynamic properties
 	 * should be left unprocessed.
 	 *
 	 * @ticket 56467
@@ -3300,13 +3657,15 @@ class Tests_Theme_wpThemeJson extends WP_UnitTestCase {
 			)
 		);
 
-		$expected = 'body { margin: 0; }.wp-site-blocks > .alignleft { float: left; margin-right: 2em; }.wp-site-blocks > .alignright { float: right; margin-left: 2em; }.wp-site-blocks > .aligncenter { justify-content: center; margin-left: auto; margin-right: auto; }:where(.is-layout-flex){gap: 0.5em;}:where(.is-layout-grid){gap: 0.5em;}body .is-layout-flow > .alignleft{float: left;margin-inline-start: 0;margin-inline-end: 2em;}body .is-layout-flow > .alignright{float: right;margin-inline-start: 2em;margin-inline-end: 0;}body .is-layout-flow > .aligncenter{margin-left: auto !important;margin-right: auto !important;}body .is-layout-constrained > .alignleft{float: left;margin-inline-start: 0;margin-inline-end: 2em;}body .is-layout-constrained > .alignright{float: right;margin-inline-start: 2em;margin-inline-end: 0;}body .is-layout-constrained > .aligncenter{margin-left: auto !important;margin-right: auto !important;}body .is-layout-constrained > :where(:not(.alignleft):not(.alignright):not(.alignfull)){max-width: var(--wp--style--global--content-size);margin-left: auto !important;margin-right: auto !important;}body .is-layout-constrained > .alignwide{max-width: var(--wp--style--global--wide-size);}body .is-layout-flex{display: flex;}body .is-layout-flex{flex-wrap: wrap;align-items: center;}body .is-layout-flex > *{margin: 0;}body .is-layout-grid{display: grid;}body .is-layout-grid > *{margin: 0;}body{background-color: #ffffff;color: #ffffff;}.wp-element-button, .wp-block-button__link{color: #ffffff;}';
+		$base_styles  = 'body { margin: 0; }.wp-site-blocks > .alignleft { float: left; margin-right: 2em; }.wp-site-blocks > .alignright { float: right; margin-left: 2em; }.wp-site-blocks > .aligncenter { justify-content: center; margin-left: auto; margin-right: auto; }:where(.is-layout-flex){gap: 0.5em;}:where(.is-layout-grid){gap: 0.5em;}body .is-layout-flow > .alignleft{float: left;margin-inline-start: 0;margin-inline-end: 2em;}body .is-layout-flow > .alignright{float: right;margin-inline-start: 2em;margin-inline-end: 0;}body .is-layout-flow > .aligncenter{margin-left: auto !important;margin-right: auto !important;}body .is-layout-constrained > .alignleft{float: left;margin-inline-start: 0;margin-inline-end: 2em;}body .is-layout-constrained > .alignright{float: right;margin-inline-start: 2em;margin-inline-end: 0;}body .is-layout-constrained > .aligncenter{margin-left: auto !important;margin-right: auto !important;}body .is-layout-constrained > :where(:not(.alignleft):not(.alignright):not(.alignfull)){max-width: var(--wp--style--global--content-size);margin-left: auto !important;margin-right: auto !important;}body .is-layout-constrained > .alignwide{max-width: var(--wp--style--global--wide-size);}body .is-layout-flex{display: flex;}body .is-layout-flex{flex-wrap: wrap;align-items: center;}body .is-layout-flex > *{margin: 0;}body .is-layout-grid{display: grid;}body .is-layout-grid > *{margin: 0;}';
+		$color_styles = 'body{background-color: #ffffff;color: #ffffff;}.wp-element-button, .wp-block-button__link{color: #ffffff;}';
+		$expected     = $base_styles . $color_styles;
 		$this->assertSame( $expected, $theme_json->get_stylesheet() );
 	}
 
 	/**
-	 * Testing that dynamic properties in theme.json that refer to themselves
-	 * should be left unprocessed.
+	 * Testing that dynamic properties in theme.json that
+	 * refer to themselves should be left unprocessed.
 	 *
 	 * @ticket 56467
 	 * @ticket 58550
@@ -3325,202 +3684,12 @@ class Tests_Theme_wpThemeJson extends WP_UnitTestCase {
 			)
 		);
 
-		$expected = 'body { margin: 0; }.wp-site-blocks > .alignleft { float: left; margin-right: 2em; }.wp-site-blocks > .alignright { float: right; margin-left: 2em; }.wp-site-blocks > .aligncenter { justify-content: center; margin-left: auto; margin-right: auto; }:where(.is-layout-flex){gap: 0.5em;}:where(.is-layout-grid){gap: 0.5em;}body .is-layout-flow > .alignleft{float: left;margin-inline-start: 0;margin-inline-end: 2em;}body .is-layout-flow > .alignright{float: right;margin-inline-start: 2em;margin-inline-end: 0;}body .is-layout-flow > .aligncenter{margin-left: auto !important;margin-right: auto !important;}body .is-layout-constrained > .alignleft{float: left;margin-inline-start: 0;margin-inline-end: 2em;}body .is-layout-constrained > .alignright{float: right;margin-inline-start: 2em;margin-inline-end: 0;}body .is-layout-constrained > .aligncenter{margin-left: auto !important;margin-right: auto !important;}body .is-layout-constrained > :where(:not(.alignleft):not(.alignright):not(.alignfull)){max-width: var(--wp--style--global--content-size);margin-left: auto !important;margin-right: auto !important;}body .is-layout-constrained > .alignwide{max-width: var(--wp--style--global--wide-size);}body .is-layout-flex{display: flex;}body .is-layout-flex{flex-wrap: wrap;align-items: center;}body .is-layout-flex > *{margin: 0;}body .is-layout-grid{display: grid;}body .is-layout-grid > *{margin: 0;}body{background-color: #ffffff;}';
+		$base_styles  = 'body { margin: 0; }.wp-site-blocks > .alignleft { float: left; margin-right: 2em; }.wp-site-blocks > .alignright { float: right; margin-left: 2em; }.wp-site-blocks > .aligncenter { justify-content: center; margin-left: auto; margin-right: auto; }:where(.is-layout-flex){gap: 0.5em;}:where(.is-layout-grid){gap: 0.5em;}body .is-layout-flow > .alignleft{float: left;margin-inline-start: 0;margin-inline-end: 2em;}body .is-layout-flow > .alignright{float: right;margin-inline-start: 2em;margin-inline-end: 0;}body .is-layout-flow > .aligncenter{margin-left: auto !important;margin-right: auto !important;}body .is-layout-constrained > .alignleft{float: left;margin-inline-start: 0;margin-inline-end: 2em;}body .is-layout-constrained > .alignright{float: right;margin-inline-start: 2em;margin-inline-end: 0;}body .is-layout-constrained > .aligncenter{margin-left: auto !important;margin-right: auto !important;}body .is-layout-constrained > :where(:not(.alignleft):not(.alignright):not(.alignfull)){max-width: var(--wp--style--global--content-size);margin-left: auto !important;margin-right: auto !important;}body .is-layout-constrained > .alignwide{max-width: var(--wp--style--global--wide-size);}body .is-layout-flex{display: flex;}body .is-layout-flex{flex-wrap: wrap;align-items: center;}body .is-layout-flex > *{margin: 0;}body .is-layout-grid{display: grid;}body .is-layout-grid > *{margin: 0;}';
+		$color_styles = 'body{background-color: #ffffff;}';
+		$expected     = $base_styles . $color_styles;
 		$this->assertSame( $expected, $theme_json->get_stylesheet() );
 	}
 
-	/**
-	 * @ticket 56467
-	 * @ticket 58548
-	 * @ticket 58550
-	 */
-	public function test_get_stylesheet_generates_layout_styles() {
-		$theme_json = new WP_Theme_JSON(
-			array(
-				'version'  => WP_Theme_JSON::LATEST_SCHEMA,
-				'settings' => array(
-					'spacing' => array(
-						'blockGap' => true,
-					),
-				),
-				'styles'   => array(
-					'spacing' => array(
-						'blockGap' => '1em',
-					),
-				),
-			),
-			'default'
-		);
-
-		// Results also include root site blocks styles.
-		$this->assertSame(
-			'body { margin: 0; }.wp-site-blocks > .alignleft { float: left; margin-right: 2em; }.wp-site-blocks > .alignright { float: right; margin-left: 2em; }.wp-site-blocks > .aligncenter { justify-content: center; margin-left: auto; margin-right: auto; }:where(.wp-site-blocks) > * { margin-block-start: 1em; margin-block-end: 0; }:where(.wp-site-blocks) > :first-child:first-child { margin-block-start: 0; }:where(.wp-site-blocks) > :last-child:last-child { margin-block-end: 0; }body { --wp--style--block-gap: 1em; }:where(body .is-layout-flow)  > :first-child:first-child{margin-block-start: 0;}:where(body .is-layout-flow)  > :last-child:last-child{margin-block-end: 0;}:where(body .is-layout-flow)  > *{margin-block-start: 1em;margin-block-end: 0;}:where(body .is-layout-constrained)  > :first-child:first-child{margin-block-start: 0;}:where(body .is-layout-constrained)  > :last-child:last-child{margin-block-end: 0;}:where(body .is-layout-constrained)  > *{margin-block-start: 1em;margin-block-end: 0;}:where(body .is-layout-flex) {gap: 1em;}:where(body .is-layout-grid) {gap: 1em;}body .is-layout-flow > .alignleft{float: left;margin-inline-start: 0;margin-inline-end: 2em;}body .is-layout-flow > .alignright{float: right;margin-inline-start: 2em;margin-inline-end: 0;}body .is-layout-flow > .aligncenter{margin-left: auto !important;margin-right: auto !important;}body .is-layout-constrained > .alignleft{float: left;margin-inline-start: 0;margin-inline-end: 2em;}body .is-layout-constrained > .alignright{float: right;margin-inline-start: 2em;margin-inline-end: 0;}body .is-layout-constrained > .aligncenter{margin-left: auto !important;margin-right: auto !important;}body .is-layout-constrained > :where(:not(.alignleft):not(.alignright):not(.alignfull)){max-width: var(--wp--style--global--content-size);margin-left: auto !important;margin-right: auto !important;}body .is-layout-constrained > .alignwide{max-width: var(--wp--style--global--wide-size);}body .is-layout-flex{display: flex;}body .is-layout-flex{flex-wrap: wrap;align-items: center;}body .is-layout-flex > *{margin: 0;}body .is-layout-grid{display: grid;}body .is-layout-grid > *{margin: 0;}',
-			$theme_json->get_stylesheet( array( 'styles' ) )
-		);
-	}
-
-	/**
-	 * @ticket 56467
-	 * @ticket 58548
-	 * @ticket 58550
-	 */
-	public function test_get_stylesheet_generates_layout_styles_with_spacing_presets() {
-		$theme_json = new WP_Theme_JSON(
-			array(
-				'version'  => WP_Theme_JSON::LATEST_SCHEMA,
-				'settings' => array(
-					'spacing' => array(
-						'blockGap' => true,
-					),
-				),
-				'styles'   => array(
-					'spacing' => array(
-						'blockGap' => 'var:preset|spacing|60',
-					),
-				),
-			),
-			'default'
-		);
-
-		// Results also include root site blocks styles.
-		$this->assertSame(
-			'body { margin: 0; }.wp-site-blocks > .alignleft { float: left; margin-right: 2em; }.wp-site-blocks > .alignright { float: right; margin-left: 2em; }.wp-site-blocks > .aligncenter { justify-content: center; margin-left: auto; margin-right: auto; }:where(.wp-site-blocks) > * { margin-block-start: var(--wp--preset--spacing--60); margin-block-end: 0; }:where(.wp-site-blocks) > :first-child:first-child { margin-block-start: 0; }:where(.wp-site-blocks) > :last-child:last-child { margin-block-end: 0; }body { --wp--style--block-gap: var(--wp--preset--spacing--60); }:where(body .is-layout-flow)  > :first-child:first-child{margin-block-start: 0;}:where(body .is-layout-flow)  > :last-child:last-child{margin-block-end: 0;}:where(body .is-layout-flow)  > *{margin-block-start: var(--wp--preset--spacing--60);margin-block-end: 0;}:where(body .is-layout-constrained)  > :first-child:first-child{margin-block-start: 0;}:where(body .is-layout-constrained)  > :last-child:last-child{margin-block-end: 0;}:where(body .is-layout-constrained)  > *{margin-block-start: var(--wp--preset--spacing--60);margin-block-end: 0;}:where(body .is-layout-flex) {gap: var(--wp--preset--spacing--60);}:where(body .is-layout-grid) {gap: var(--wp--preset--spacing--60);}body .is-layout-flow > .alignleft{float: left;margin-inline-start: 0;margin-inline-end: 2em;}body .is-layout-flow > .alignright{float: right;margin-inline-start: 2em;margin-inline-end: 0;}body .is-layout-flow > .aligncenter{margin-left: auto !important;margin-right: auto !important;}body .is-layout-constrained > .alignleft{float: left;margin-inline-start: 0;margin-inline-end: 2em;}body .is-layout-constrained > .alignright{float: right;margin-inline-start: 2em;margin-inline-end: 0;}body .is-layout-constrained > .aligncenter{margin-left: auto !important;margin-right: auto !important;}body .is-layout-constrained > :where(:not(.alignleft):not(.alignright):not(.alignfull)){max-width: var(--wp--style--global--content-size);margin-left: auto !important;margin-right: auto !important;}body .is-layout-constrained > .alignwide{max-width: var(--wp--style--global--wide-size);}body .is-layout-flex{display: flex;}body .is-layout-flex{flex-wrap: wrap;align-items: center;}body .is-layout-flex > *{margin: 0;}body .is-layout-grid{display: grid;}body .is-layout-grid > *{margin: 0;}',
-			$theme_json->get_stylesheet( array( 'styles' ) )
-		);
-	}
-
-	/**
-	 * @ticket 56467
-	 * @ticket 58550
-	 */
-	public function test_get_stylesheet_generates_fallback_gap_layout_styles() {
-		$theme_json = new WP_Theme_JSON(
-			array(
-				'version'  => WP_Theme_JSON::LATEST_SCHEMA,
-				'settings' => array(
-					'spacing' => array(
-						'blockGap' => null,
-					),
-				),
-				'styles'   => array(
-					'spacing' => array(
-						'blockGap' => '1em',
-					),
-				),
-			),
-			'default'
-		);
-		$stylesheet = $theme_json->get_stylesheet( array( 'styles' ) );
-
-		// Results also include root site blocks styles.
-		$this->assertSame(
-			'body { margin: 0; }.wp-site-blocks > .alignleft { float: left; margin-right: 2em; }.wp-site-blocks > .alignright { float: right; margin-left: 2em; }.wp-site-blocks > .aligncenter { justify-content: center; margin-left: auto; margin-right: auto; }:where(.is-layout-flex){gap: 0.5em;}:where(.is-layout-grid){gap: 0.5em;}body .is-layout-flow > .alignleft{float: left;margin-inline-start: 0;margin-inline-end: 2em;}body .is-layout-flow > .alignright{float: right;margin-inline-start: 2em;margin-inline-end: 0;}body .is-layout-flow > .aligncenter{margin-left: auto !important;margin-right: auto !important;}body .is-layout-constrained > .alignleft{float: left;margin-inline-start: 0;margin-inline-end: 2em;}body .is-layout-constrained > .alignright{float: right;margin-inline-start: 2em;margin-inline-end: 0;}body .is-layout-constrained > .aligncenter{margin-left: auto !important;margin-right: auto !important;}body .is-layout-constrained > :where(:not(.alignleft):not(.alignright):not(.alignfull)){max-width: var(--wp--style--global--content-size);margin-left: auto !important;margin-right: auto !important;}body .is-layout-constrained > .alignwide{max-width: var(--wp--style--global--wide-size);}body .is-layout-flex{display: flex;}body .is-layout-flex{flex-wrap: wrap;align-items: center;}body .is-layout-flex > *{margin: 0;}body .is-layout-grid{display: grid;}body .is-layout-grid > *{margin: 0;}',
-			$stylesheet
-		);
-	}
-
-	/**
-	 * @ticket 56467
-	 * @ticket 58550
-	 */
-	public function test_get_stylesheet_generates_base_fallback_gap_layout_styles() {
-		$theme_json = new WP_Theme_JSON(
-			array(
-				'version'  => WP_Theme_JSON::LATEST_SCHEMA,
-				'settings' => array(
-					'spacing' => array(
-						'blockGap' => null,
-					),
-				),
-			),
-			'default'
-		);
-		$stylesheet = $theme_json->get_stylesheet( array( 'base-layout-styles' ) );
-
-		// Note the `base-layout-styles` includes a fallback gap for the Columns block for backwards compatibility.
-		$this->assertSame(
-			':where(.is-layout-flex){gap: 0.5em;}:where(.is-layout-grid){gap: 0.5em;}body .is-layout-flow > .alignleft{float: left;margin-inline-start: 0;margin-inline-end: 2em;}body .is-layout-flow > .alignright{float: right;margin-inline-start: 2em;margin-inline-end: 0;}body .is-layout-flow > .aligncenter{margin-left: auto !important;margin-right: auto !important;}body .is-layout-constrained > .alignleft{float: left;margin-inline-start: 0;margin-inline-end: 2em;}body .is-layout-constrained > .alignright{float: right;margin-inline-start: 2em;margin-inline-end: 0;}body .is-layout-constrained > .aligncenter{margin-left: auto !important;margin-right: auto !important;}body .is-layout-constrained > :where(:not(.alignleft):not(.alignright):not(.alignfull)){max-width: var(--wp--style--global--content-size);margin-left: auto !important;margin-right: auto !important;}body .is-layout-constrained > .alignwide{max-width: var(--wp--style--global--wide-size);}body .is-layout-flex{display: flex;}body .is-layout-flex{flex-wrap: wrap;align-items: center;}body .is-layout-flex > *{margin: 0;}body .is-layout-grid{display: grid;}body .is-layout-grid > *{margin: 0;}:where(.wp-block-columns.is-layout-flex){gap: 2em;}:where(.wp-block-columns.is-layout-grid){gap: 2em;}:where(.wp-block-post-template.is-layout-flex){gap: 1.25em;}:where(.wp-block-post-template.is-layout-grid){gap: 1.25em;}',
-			$stylesheet
-		);
-	}
-
-	/**
-	 * @ticket 56467
-	 * @ticket 58550
-	 */
-	public function test_get_stylesheet_skips_layout_styles() {
-		add_theme_support( 'disable-layout-styles' );
-		$theme_json = new WP_Theme_JSON(
-			array(
-				'version'  => WP_Theme_JSON::LATEST_SCHEMA,
-				'settings' => array(
-					'spacing' => array(
-						'blockGap' => null,
-					),
-				),
-			),
-			'default'
-		);
-		$stylesheet = $theme_json->get_stylesheet( array( 'base-layout-styles' ) );
-		remove_theme_support( 'disable-layout-styles' );
-
-		// All Layout styles should be skipped.
-		$this->assertSame(
-			'',
-			$stylesheet
-		);
-	}
-
-	/**
-	 * @ticket 56467
-	 * @ticket 58550
-	 */
-	public function test_get_stylesheet_generates_valid_block_gap_values_and_skips_null_or_false_values() {
-		$theme_json = new WP_Theme_JSON(
-			array(
-				'version'  => WP_Theme_JSON::LATEST_SCHEMA,
-				'settings' => array(
-					'spacing' => array(
-						'blockGap' => true,
-					),
-				),
-				'styles'   => array(
-					'spacing' => array(
-						'blockGap' => '1rem',
-					),
-					'blocks'  => array(
-						'core/post-content' => array(
-							'color' => array(
-								'text' => 'gray', // This value should not render block layout styles.
-							),
-						),
-						'core/social-links' => array(
-							'spacing' => array(
-								'blockGap' => '0', // This value should render block layout gap as zero.
-							),
-						),
-						'core/buttons'      => array(
-							'spacing' => array(
-								'blockGap' => 0, // This value should render block layout gap as zero.
-							),
-						),
-						'core/columns'      => array(
-							'spacing' => array(
-								'blockGap' => false, // This value should be ignored. The block will use the global layout value.
-							),
-						),
-					),
-				),
-			),
-			'default'
-		);
-
-		$this->assertSame(
-			'body { margin: 0; }.wp-site-blocks > .alignleft { float: left; margin-right: 2em; }.wp-site-blocks > .alignright { float: right; margin-left: 2em; }.wp-site-blocks > .aligncenter { justify-content: center; margin-left: auto; margin-right: auto; }:where(.wp-site-blocks) > * { margin-block-start: 1rem; margin-block-end: 0; }:where(.wp-site-blocks) > :first-child:first-child { margin-block-start: 0; }:where(.wp-site-blocks) > :last-child:last-child { margin-block-end: 0; }body { --wp--style--block-gap: 1rem; }:where(body .is-layout-flow)  > :first-child:first-child{margin-block-start: 0;}:where(body .is-layout-flow)  > :last-child:last-child{margin-block-end: 0;}:where(body .is-layout-flow)  > *{margin-block-start: 1rem;margin-block-end: 0;}:where(body .is-layout-constrained)  > :first-child:first-child{margin-block-start: 0;}:where(body .is-layout-constrained)  > :last-child:last-child{margin-block-end: 0;}:where(body .is-layout-constrained)  > *{margin-block-start: 1rem;margin-block-end: 0;}:where(body .is-layout-flex) {gap: 1rem;}:where(body .is-layout-grid) {gap: 1rem;}body .is-layout-flow > .alignleft{float: left;margin-inline-start: 0;margin-inline-end: 2em;}body .is-layout-flow > .alignright{float: right;margin-inline-start: 2em;margin-inline-end: 0;}body .is-layout-flow > .aligncenter{margin-left: auto !important;margin-right: auto !important;}body .is-layout-constrained > .alignleft{float: left;margin-inline-start: 0;margin-inline-end: 2em;}body .is-layout-constrained > .alignright{float: right;margin-inline-start: 2em;margin-inline-end: 0;}body .is-layout-constrained > .aligncenter{margin-left: auto !important;margin-right: auto !important;}body .is-layout-constrained > :where(:not(.alignleft):not(.alignright):not(.alignfull)){max-width: var(--wp--style--global--content-size);margin-left: auto !important;margin-right: auto !important;}body .is-layout-constrained > .alignwide{max-width: var(--wp--style--global--wide-size);}body .is-layout-flex{display: flex;}body .is-layout-flex{flex-wrap: wrap;align-items: center;}body .is-layout-flex > *{margin: 0;}body .is-layout-grid{display: grid;}body .is-layout-grid > *{margin: 0;}.wp-block-post-content{color: gray;}.wp-block-social-links-is-layout-flow > :first-child:first-child{margin-block-start: 0;}.wp-block-social-links-is-layout-flow > :last-child:last-child{margin-block-end: 0;}.wp-block-social-links-is-layout-flow > *{margin-block-start: 0;margin-block-end: 0;}.wp-block-social-links-is-layout-constrained > :first-child:first-child{margin-block-start: 0;}.wp-block-social-links-is-layout-constrained > :last-child:last-child{margin-block-end: 0;}.wp-block-social-links-is-layout-constrained > *{margin-block-start: 0;margin-block-end: 0;}.wp-block-social-links-is-layout-flex{gap: 0;}.wp-block-social-links-is-layout-grid{gap: 0;}.wp-block-buttons-is-layout-flow > :first-child:first-child{margin-block-start: 0;}.wp-block-buttons-is-layout-flow > :last-child:last-child{margin-block-end: 0;}.wp-block-buttons-is-layout-flow > *{margin-block-start: 0;margin-block-end: 0;}.wp-block-buttons-is-layout-constrained > :first-child:first-child{margin-block-start: 0;}.wp-block-buttons-is-layout-constrained > :last-child:last-child{margin-block-end: 0;}.wp-block-buttons-is-layout-constrained > *{margin-block-start: 0;margin-block-end: 0;}.wp-block-buttons-is-layout-flex{gap: 0;}.wp-block-buttons-is-layout-grid{gap: 0;}',
-			$theme_json->get_stylesheet()
-		);
-	}
-
 	/**
 	 * @ticket 56467
 	 * @ticket 58550
@@ -3582,25 +3751,51 @@ class Tests_Theme_wpThemeJson extends WP_UnitTestCase {
 			'selector' => 'body',
 		);
 
-		$expected    = 'body { margin: 0; }.wp-site-blocks > .alignleft { float: left; margin-right: 2em; }.wp-site-blocks > .alignright { float: right; margin-left: 2em; }.wp-site-blocks > .aligncenter { justify-content: center; margin-left: auto; margin-right: auto; }:where(.is-layout-flex){gap: 0.5em;}:where(.is-layout-grid){gap: 0.5em;}body .is-layout-flow > .alignleft{float: left;margin-inline-start: 0;margin-inline-end: 2em;}body .is-layout-flow > .alignright{float: right;margin-inline-start: 2em;margin-inline-end: 0;}body .is-layout-flow > .aligncenter{margin-left: auto !important;margin-right: auto !important;}body .is-layout-constrained > .alignleft{float: left;margin-inline-start: 0;margin-inline-end: 2em;}body .is-layout-constrained > .alignright{float: right;margin-inline-start: 2em;margin-inline-end: 0;}body .is-layout-constrained > .aligncenter{margin-left: auto !important;margin-right: auto !important;}body .is-layout-constrained > :where(:not(.alignleft):not(.alignright):not(.alignfull)){max-width: var(--wp--style--global--content-size);margin-left: auto !important;margin-right: auto !important;}body .is-layout-constrained > .alignwide{max-width: var(--wp--style--global--wide-size);}body .is-layout-flex{display: flex;}body .is-layout-flex{flex-wrap: wrap;align-items: center;}body .is-layout-flex > *{margin: 0;}body .is-layout-grid{display: grid;}body .is-layout-grid > *{margin: 0;}body{padding-top: 10px;padding-right: 12px;padding-bottom: 10px;padding-left: 12px;}';
+		$expected    = 'body { margin: 0; }.wp-site-blocks > .alignleft { float: left; margin-right: 2em; }.wp-site-blocks > .alignright { float: right; margin-left: 2em; }.wp-site-blocks > .aligncenter { justify-content: center; margin-left: auto; margin-right: auto; }:where(.is-layout-flex){gap: 0.5em;}:where(.is-layout-grid){gap: 0.5em;}body .is-layout-flow > .alignleft{float: left;margin-inline-start: 0;margin-inline-end: 2em;}body .is-layout-flow > .alignright{float: right;margin-inline-start: 2em;margin-inline-end: 0;}body .is-layout-flow > .aligncenter{margin-left: auto !important;margin-right: auto !important;}body .is-layout-constrained > .alignleft{float: left;margin-inline-start: 0;margin-inline-end: 2em;}body .is-layout-constrained > .alignright{float: right;margin-inline-start: 2em;margin-inline-end: 0;}body .is-layout-constrained > .aligncenter{margin-left: auto !important;margin-right: auto !important;}body .is-layout-constrained > :where(:not(.alignleft):not(.alignright):not(.alignfull)){max-width: var(--wp--style--global--content-size);margin-left: auto !important;margin-right: auto !important;}body .is-layout-constrained > .alignwide{max-width: var(--wp--style--global--wide-size);}body .is-layout-flex{display: flex;}body .is-layout-flex{flex-wrap: wrap;align-items: center;}body .is-layout-flex > *{margin: 0;}body .is-layout-grid{display: grid;}body .is-layout-grid > *{margin: 0;}body{padding-top: 10px;padding-right: 12px;padding-bottom: 10px;padding-left: 12px;}';
+		$root_rules  = $theme_json->get_root_layout_rules( WP_Theme_JSON::ROOT_BLOCK_SELECTOR, $metadata );
+		$style_rules = $theme_json->get_styles_for_block( $metadata );
+		$this->assertSame( $expected, $root_rules . $style_rules );
+	}
+
+	/**
+	 * @ticket 56467
+	 * @ticket 58550
+	 */
+	public function test_get_styles_for_block_with_content_width() {
+		$theme_json = new WP_Theme_JSON(
+			array(
+				'version'  => 2,
+				'settings' => array(
+					'layout' => array(
+						'contentSize' => '800px',
+						'wideSize'    => '1000px',
+					),
+				),
+			)
+		);
+
+		$metadata = array(
+			'path'     => array( 'settings' ),
+			'selector' => 'body',
+		);
+
+		$expected    = 'body { margin: 0;--wp--style--global--content-size: 800px;--wp--style--global--wide-size: 1000px; }.wp-site-blocks > .alignleft { float: left; margin-right: 2em; }.wp-site-blocks > .alignright { float: right; margin-left: 2em; }.wp-site-blocks > .aligncenter { justify-content: center; margin-left: auto; margin-right: auto; }:where(.is-layout-flex){gap: 0.5em;}:where(.is-layout-grid){gap: 0.5em;}body .is-layout-flow > .alignleft{float: left;margin-inline-start: 0;margin-inline-end: 2em;}body .is-layout-flow > .alignright{float: right;margin-inline-start: 2em;margin-inline-end: 0;}body .is-layout-flow > .aligncenter{margin-left: auto !important;margin-right: auto !important;}body .is-layout-constrained > .alignleft{float: left;margin-inline-start: 0;margin-inline-end: 2em;}body .is-layout-constrained > .alignright{float: right;margin-inline-start: 2em;margin-inline-end: 0;}body .is-layout-constrained > .aligncenter{margin-left: auto !important;margin-right: auto !important;}body .is-layout-constrained > :where(:not(.alignleft):not(.alignright):not(.alignfull)){max-width: var(--wp--style--global--content-size);margin-left: auto !important;margin-right: auto !important;}body .is-layout-constrained > .alignwide{max-width: var(--wp--style--global--wide-size);}body .is-layout-flex{display: flex;}body .is-layout-flex{flex-wrap: wrap;align-items: center;}body .is-layout-flex > *{margin: 0;}body .is-layout-grid{display: grid;}body .is-layout-grid > *{margin: 0;}';
 		$root_rules  = $theme_json->get_root_layout_rules( WP_Theme_JSON::ROOT_BLOCK_SELECTOR, $metadata );
 		$style_rules = $theme_json->get_styles_for_block( $metadata );
 		$this->assertSame( $expected, $root_rules . $style_rules );
 	}
 
 	/**
-	 * @ticket 56467
+	 * @ticket 56611
+	 * @ticket 58548
 	 * @ticket 58550
 	 */
-	public function test_get_styles_for_block_with_content_width() {
+	public function test_get_styles_with_appearance_tools() {
 		$theme_json = new WP_Theme_JSON(
 			array(
 				'version'  => 2,
 				'settings' => array(
-					'layout' => array(
-						'contentSize' => '800px',
-						'wideSize'    => '1000px',
-					),
+					'appearanceTools' => true,
 				),
 			)
 		);
@@ -3610,10 +3805,52 @@ class Tests_Theme_wpThemeJson extends WP_UnitTestCase {
 			'selector' => 'body',
 		);
 
-		$expected    = 'body { margin: 0;--wp--style--global--content-size: 800px;--wp--style--global--wide-size: 1000px; }.wp-site-blocks > .alignleft { float: left; margin-right: 2em; }.wp-site-blocks > .alignright { float: right; margin-left: 2em; }.wp-site-blocks > .aligncenter { justify-content: center; margin-left: auto; margin-right: auto; }:where(.is-layout-flex){gap: 0.5em;}:where(.is-layout-grid){gap: 0.5em;}body .is-layout-flow > .alignleft{float: left;margin-inline-start: 0;margin-inline-end: 2em;}body .is-layout-flow > .alignright{float: right;margin-inline-start: 2em;margin-inline-end: 0;}body .is-layout-flow > .aligncenter{margin-left: auto !important;margin-right: auto !important;}body .is-layout-constrained > .alignleft{float: left;margin-inline-start: 0;margin-inline-end: 2em;}body .is-layout-constrained > .alignright{float: right;margin-inline-start: 2em;margin-inline-end: 0;}body .is-layout-constrained > .aligncenter{margin-left: auto !important;margin-right: auto !important;}body .is-layout-constrained > :where(:not(.alignleft):not(.alignright):not(.alignfull)){max-width: var(--wp--style--global--content-size);margin-left: auto !important;margin-right: auto !important;}body .is-layout-constrained > .alignwide{max-width: var(--wp--style--global--wide-size);}body .is-layout-flex{display: flex;}body .is-layout-flex{flex-wrap: wrap;align-items: center;}body .is-layout-flex > *{margin: 0;}body .is-layout-grid{display: grid;}body .is-layout-grid > *{margin: 0;}';
-		$root_rules  = $theme_json->get_root_layout_rules( WP_Theme_JSON::ROOT_BLOCK_SELECTOR, $metadata );
-		$style_rules = $theme_json->get_styles_for_block( $metadata );
-		$this->assertSame( $expected, $root_rules . $style_rules );
+		$expected   = 'body { margin: 0; }.wp-site-blocks > .alignleft { float: left; margin-right: 2em; }.wp-site-blocks > .alignright { float: right; margin-left: 2em; }.wp-site-blocks > .aligncenter { justify-content: center; margin-left: auto; margin-right: auto; }:where(.wp-site-blocks) > * { margin-block-start: ; margin-block-end: 0; }:where(.wp-site-blocks) > :first-child:first-child { margin-block-start: 0; }:where(.wp-site-blocks) > :last-child:last-child { margin-block-end: 0; }body { --wp--style--block-gap: ; }:where(body .is-layout-flow)  > :first-child:first-child{margin-block-start: 0;}:where(body .is-layout-flow)  > :last-child:last-child{margin-block-end: 0;}:where(body .is-layout-flow)  > *{margin-block-start: 1;margin-block-end: 0;}:where(body .is-layout-constrained)  > :first-child:first-child{margin-block-start: 0;}:where(body .is-layout-constrained)  > :last-child:last-child{margin-block-end: 0;}:where(body .is-layout-constrained)  > *{margin-block-start: 1;margin-block-end: 0;}:where(body .is-layout-flex) {gap: 1;}:where(body .is-layout-grid) {gap: 1;}body .is-layout-flow > .alignleft{float: left;margin-inline-start: 0;margin-inline-end: 2em;}body .is-layout-flow > .alignright{float: right;margin-inline-start: 2em;margin-inline-end: 0;}body .is-layout-flow > .aligncenter{margin-left: auto !important;margin-right: auto !important;}body .is-layout-constrained > .alignleft{float: left;margin-inline-start: 0;margin-inline-end: 2em;}body .is-layout-constrained > .alignright{float: right;margin-inline-start: 2em;margin-inline-end: 0;}body .is-layout-constrained > .aligncenter{margin-left: auto !important;margin-right: auto !important;}body .is-layout-constrained > :where(:not(.alignleft):not(.alignright):not(.alignfull)){max-width: var(--wp--style--global--content-size);margin-left: auto !important;margin-right: auto !important;}body .is-layout-constrained > .alignwide{max-width: var(--wp--style--global--wide-size);}body .is-layout-flex{display: flex;}body .is-layout-flex{flex-wrap: wrap;align-items: center;}body .is-layout-flex > *{margin: 0;}body .is-layout-grid{display: grid;}body .is-layout-grid > *{margin: 0;}';
+		$root_rules = $theme_json->get_root_layout_rules( WP_Theme_JSON::ROOT_BLOCK_SELECTOR, $metadata );
+		$this->assertSame( $expected, $root_rules );
+	}
+
+	/**
+	 * @ticket 54487
+	 */
+	public function test_sanitization() {
+		$theme_json = new WP_Theme_JSON(
+			array(
+				'version' => 2,
+				'styles'  => array(
+					'spacing' => array(
+						'blockGap' => 'valid value',
+					),
+					'blocks'  => array(
+						'core/group' => array(
+							'spacing' => array(
+								'margin'  => 'valid value',
+								'display' => 'none',
+							),
+						),
+					),
+				),
+			)
+		);
+
+		$actual   = $theme_json->get_raw_data();
+		$expected = array(
+			'version' => 2,
+			'styles'  => array(
+				'spacing' => array(
+					'blockGap' => 'valid value',
+				),
+				'blocks'  => array(
+					'core/group' => array(
+						'spacing' => array(
+							'margin' => 'valid value',
+						),
+					),
+				),
+			),
+		);
+
+		$this->assertEqualSetsWithIndex( $expected, $actual );
 	}
 
 	/*
@@ -3751,6 +3988,141 @@ class Tests_Theme_wpThemeJson extends WP_UnitTestCase {
 		);
 	}
 
+	/**
+	 * Tests that invalid properties are removed from the theme.json inside indexed arrays as settings.typography.fontFamilies.
+	 *
+	 * @ticket 60360
+	 */
+	public function test_sanitize_indexed_arrays() {
+		$theme_json = new WP_Theme_JSON(
+			array(
+				'version'  => '2',
+				'badKey2'  => 'I am Evil!',
+				'settings' => array(
+					'badKey3'    => 'I am Evil!',
+					'typography' => array(
+						'badKey4'      => 'I am Evil!',
+						'fontFamilies' => array(
+							'custom' => array(
+								array(
+									'badKey4'    => 'I am Evil!',
+									'name'       => 'Arial',
+									'slug'       => 'arial',
+									'fontFamily' => 'Arial, sans-serif',
+								),
+							),
+							'theme'  => array(
+								array(
+									'badKey5'    => 'I am Evil!',
+									'name'       => 'Piazzolla',
+									'slug'       => 'piazzolla',
+									'fontFamily' => 'Piazzolla',
+									'fontFace'   => array(
+										array(
+											'badKey6'    => 'I am Evil!',
+											'fontFamily' => 'Piazzolla',
+											'fontStyle'  => 'italic',
+											'fontWeight' => '400',
+											'src'        => 'https://example.com/font.ttf',
+										),
+										array(
+											'badKey7'    => 'I am Evil!',
+											'fontFamily' => 'Piazzolla',
+											'fontStyle'  => 'italic',
+											'fontWeight' => '400',
+											'src'        => 'https://example.com/font.ttf',
+										),
+									),
+								),
+								array(
+									'badKey8'    => 'I am Evil!',
+									'name'       => 'Inter',
+									'slug'       => 'Inter',
+									'fontFamily' => 'Inter',
+									'fontFace'   => array(
+										array(
+											'badKey9'    => 'I am Evil!',
+											'fontFamily' => 'Inter',
+											'fontStyle'  => 'italic',
+											'fontWeight' => '400',
+											'src'        => 'https://example.com/font.ttf',
+										),
+										array(
+											'badKey10'   => 'I am Evil!',
+											'fontFamily' => 'Inter',
+											'fontStyle'  => 'italic',
+											'fontWeight' => '400',
+											'src'        => 'https://example.com/font.ttf',
+										),
+									),
+								),
+							),
+						),
+					),
+				),
+			)
+		);
+
+		$expected_sanitized   = array(
+			'version'  => '2',
+			'settings' => array(
+				'typography' => array(
+					'fontFamilies' => array(
+						'custom' => array(
+							array(
+								'name'       => 'Arial',
+								'slug'       => 'arial',
+								'fontFamily' => 'Arial, sans-serif',
+							),
+						),
+						'theme'  => array(
+							array(
+								'name'       => 'Piazzolla',
+								'slug'       => 'piazzolla',
+								'fontFamily' => 'Piazzolla',
+								'fontFace'   => array(
+									array(
+										'fontFamily' => 'Piazzolla',
+										'fontStyle'  => 'italic',
+										'fontWeight' => '400',
+										'src'        => 'https://example.com/font.ttf',
+									),
+									array(
+										'fontFamily' => 'Piazzolla',
+										'fontStyle'  => 'italic',
+										'fontWeight' => '400',
+										'src'        => 'https://example.com/font.ttf',
+									),
+								),
+							),
+							array(
+								'name'       => 'Inter',
+								'slug'       => 'Inter',
+								'fontFamily' => 'Inter',
+								'fontFace'   => array(
+									array(
+										'fontFamily' => 'Inter',
+										'fontStyle'  => 'italic',
+										'fontWeight' => '400',
+										'src'        => 'https://example.com/font.ttf',
+									),
+									array(
+										'fontFamily' => 'Inter',
+										'fontStyle'  => 'italic',
+										'fontWeight' => '400',
+										'src'        => 'https://example.com/font.ttf',
+									),
+								),
+							),
+						),
+					),
+				),
+			),
+		);
+		$sanitized_theme_json = $theme_json->get_raw_data();
+		$this->assertSameSetsWithIndex( $expected_sanitized, $sanitized_theme_json, 'Sanitized theme.json does not match' );
+	}
+
 	/**
 	 * @ticket 57583
 	 *
@@ -3952,42 +4324,14 @@ class Tests_Theme_wpThemeJson extends WP_UnitTestCase {
 		$this->assertSameSetsWithIndex( $expected, $actual );
 	}
 
-	/**
-	 * @ticket 56611
-	 * @ticket 58548
-	 * @ticket 58550
-	 */
-	public function test_get_styles_with_appearance_tools() {
-		$theme_json = new WP_Theme_JSON(
-			array(
-				'version'  => 2,
-				'settings' => array(
-					'appearanceTools' => true,
-				),
-			)
-		);
-
-		$metadata = array(
-			'path'     => array( 'settings' ),
-			'selector' => 'body',
-		);
-
-		$expected   = 'body { margin: 0; }.wp-site-blocks > .alignleft { float: left; margin-right: 2em; }.wp-site-blocks > .alignright { float: right; margin-left: 2em; }.wp-site-blocks > .aligncenter { justify-content: center; margin-left: auto; margin-right: auto; }:where(.wp-site-blocks) > * { margin-block-start: ; margin-block-end: 0; }:where(.wp-site-blocks) > :first-child:first-child { margin-block-start: 0; }:where(.wp-site-blocks) > :last-child:last-child { margin-block-end: 0; }body { --wp--style--block-gap: ; }:where(body .is-layout-flow)  > :first-child:first-child{margin-block-start: 0;}:where(body .is-layout-flow)  > :last-child:last-child{margin-block-end: 0;}:where(body .is-layout-flow)  > *{margin-block-start: 1;margin-block-end: 0;}:where(body .is-layout-constrained)  > :first-child:first-child{margin-block-start: 0;}:where(body .is-layout-constrained)  > :last-child:last-child{margin-block-end: 0;}:where(body .is-layout-constrained)  > *{margin-block-start: 1;margin-block-end: 0;}:where(body .is-layout-flex) {gap: 1;}:where(body .is-layout-grid) {gap: 1;}body .is-layout-flow > .alignleft{float: left;margin-inline-start: 0;margin-inline-end: 2em;}body .is-layout-flow > .alignright{float: right;margin-inline-start: 2em;margin-inline-end: 0;}body .is-layout-flow > .aligncenter{margin-left: auto !important;margin-right: auto !important;}body .is-layout-constrained > .alignleft{float: left;margin-inline-start: 0;margin-inline-end: 2em;}body .is-layout-constrained > .alignright{float: right;margin-inline-start: 2em;margin-inline-end: 0;}body .is-layout-constrained > .aligncenter{margin-left: auto !important;margin-right: auto !important;}body .is-layout-constrained > :where(:not(.alignleft):not(.alignright):not(.alignfull)){max-width: var(--wp--style--global--content-size);margin-left: auto !important;margin-right: auto !important;}body .is-layout-constrained > .alignwide{max-width: var(--wp--style--global--wide-size);}body .is-layout-flex{display: flex;}body .is-layout-flex{flex-wrap: wrap;align-items: center;}body .is-layout-flex > *{margin: 0;}body .is-layout-grid{display: grid;}body .is-layout-grid > *{margin: 0;}';
-		$root_rules = $theme_json->get_root_layout_rules( WP_Theme_JSON::ROOT_BLOCK_SELECTOR, $metadata );
-		$this->assertSame( $expected, $root_rules );
-	}
-
 	/**
 	 * Tests generating the spacing presets array based on the spacing scale provided.
 	 *
 	 * @ticket 56467
 	 *
-	 * @dataProvider data_generate_spacing_scale_fixtures
-	 *
-	 * @param array $spacing_scale   Example spacing scale definitions from the data provider.
-	 * @param array $expected_output Expected output from data provider.
+	 * @dataProvider data_set_spacing_sizes
 	 */
-	public function test_should_set_spacing_sizes( $spacing_scale, $expected_output ) {
+	public function test_set_spacing_sizes( $spacing_scale, $expected_output ) {
 		$theme_json = new WP_Theme_JSON(
 			array(
 				'version'  => 2,
@@ -4010,7 +4354,7 @@ class Tests_Theme_wpThemeJson extends WP_UnitTestCase {
 	 *
 	 * @return array
 	 */
-	public function data_generate_spacing_scale_fixtures() {
+	public function data_set_spacing_sizes() {
 		return array(
 			'only one value when single step in spacing scale' => array(
 				'spacing_scale'   => array(
@@ -4278,9 +4622,9 @@ class Tests_Theme_wpThemeJson extends WP_UnitTestCase {
 	 * @param array $spacing_scale   Example spacing scale definitions from the data provider.
 	 * @param array $expected_output Expected output from data provider.
 	 */
-	public function test_set_spacing_sizes_should_detect_invalid_spacing_scale( $spacing_scale, $expected_output ) {
-		$this->expectNotice();
-		$this->expectNoticeMessage( 'Some of the theme.json settings.spacing.spacingScale values are invalid' );
+	public function test_set_spacing_sizes_when_invalid( $spacing_scale, $expected_output ) {
+		$this->expectException( Exception::class );
+		$this->expectExceptionMessage( 'Some of the theme.json settings.spacing.spacingScale values are invalid' );
 
 		$theme_json = new WP_Theme_JSON(
 			array(
@@ -4293,7 +4637,19 @@ class Tests_Theme_wpThemeJson extends WP_UnitTestCase {
 			)
 		);
 
+		// Ensure PHPUnit 10 compatibility.
+		set_error_handler(
+			static function ( $errno, $errstr ) {
+				restore_error_handler();
+				throw new Exception( $errstr, $errno );
+			},
+			E_ALL
+		);
+
 		$theme_json->set_spacing_sizes();
+
+		restore_error_handler();
+
 		$this->assertSame( $expected_output, _wp_array_get( $theme_json->get_raw_data(), array( 'settings', 'spacing', 'spacingSizes', 'default' ) ) );
 	}
 
@@ -4451,45 +4807,6 @@ class Tests_Theme_wpThemeJson extends WP_UnitTestCase {
 		);
 	}
 
-	/**
-	 * @ticket 57354
-	 * @ticket 58550
-	 */
-	public function test_get_stylesheet_returns_outline_styles() {
-		$theme_json = new WP_Theme_JSON(
-			array(
-				'version' => WP_Theme_JSON::LATEST_SCHEMA,
-				'styles'  => array(
-					'elements' => array(
-						'button' => array(
-							'outline' => array(
-								'offset' => '3px',
-								'width'  => '3px',
-								'style'  => 'dashed',
-								'color'  => 'red',
-							),
-							':hover'  => array(
-								'outline' => array(
-									'offset' => '3px',
-									'width'  => '3px',
-									'style'  => 'solid',
-									'color'  => 'blue',
-								),
-							),
-						),
-					),
-				),
-			)
-		);
-
-		$base_styles = 'body { margin: 0; }.wp-site-blocks > .alignleft { float: left; margin-right: 2em; }.wp-site-blocks > .alignright { float: right; margin-left: 2em; }.wp-site-blocks > .aligncenter { justify-content: center; margin-left: auto; margin-right: auto; }:where(.is-layout-flex){gap: 0.5em;}:where(.is-layout-grid){gap: 0.5em;}body .is-layout-flow > .alignleft{float: left;margin-inline-start: 0;margin-inline-end: 2em;}body .is-layout-flow > .alignright{float: right;margin-inline-start: 2em;margin-inline-end: 0;}body .is-layout-flow > .aligncenter{margin-left: auto !important;margin-right: auto !important;}body .is-layout-constrained > .alignleft{float: left;margin-inline-start: 0;margin-inline-end: 2em;}body .is-layout-constrained > .alignright{float: right;margin-inline-start: 2em;margin-inline-end: 0;}body .is-layout-constrained > .aligncenter{margin-left: auto !important;margin-right: auto !important;}body .is-layout-constrained > :where(:not(.alignleft):not(.alignright):not(.alignfull)){max-width: var(--wp--style--global--content-size);margin-left: auto !important;margin-right: auto !important;}body .is-layout-constrained > .alignwide{max-width: var(--wp--style--global--wide-size);}body .is-layout-flex{display: flex;}body .is-layout-flex{flex-wrap: wrap;align-items: center;}body .is-layout-flex > *{margin: 0;}body .is-layout-grid{display: grid;}body .is-layout-grid > *{margin: 0;}';
-
-		$element_styles = '.wp-element-button, .wp-block-button__link{outline-color: red;outline-offset: 3px;outline-style: dashed;outline-width: 3px;}.wp-element-button:hover, .wp-block-button__link:hover{outline-color: blue;outline-offset: 3px;outline-style: solid;outline-width: 3px;}';
-
-		$expected = $base_styles . $element_styles;
-		$this->assertSame( $expected, $theme_json->get_stylesheet() );
-	}
-
 	/**
 	 * @ticket 57559
 	 */
@@ -4558,7 +4875,6 @@ class Tests_Theme_wpThemeJson extends WP_UnitTestCase {
 		$global_styles   = 'body{--wp--preset--shadow--natural: 5px 5px 0 0 black;}body { margin: 0; }.wp-site-blocks > .alignleft { float: left; margin-right: 2em; }.wp-site-blocks > .alignright { float: right; margin-left: 2em; }.wp-site-blocks > .aligncenter { justify-content: center; margin-left: auto; margin-right: auto; }:where(.is-layout-flex){gap: 0.5em;}:where(.is-layout-grid){gap: 0.5em;}body .is-layout-flow > .alignleft{float: left;margin-inline-start: 0;margin-inline-end: 2em;}body .is-layout-flow > .alignright{float: right;margin-inline-start: 2em;margin-inline-end: 0;}body .is-layout-flow > .aligncenter{margin-left: auto !important;margin-right: auto !important;}body .is-layout-constrained > .alignleft{float: left;margin-inline-start: 0;margin-inline-end: 2em;}body .is-layout-constrained > .alignright{float: right;margin-inline-start: 2em;margin-inline-end: 0;}body .is-layout-constrained > .aligncenter{margin-left: auto !important;margin-right: auto !important;}body .is-layout-constrained > :where(:not(.alignleft):not(.alignright):not(.alignfull)){max-width: var(--wp--style--global--content-size);margin-left: auto !important;margin-right: auto !important;}body .is-layout-constrained > .alignwide{max-width: var(--wp--style--global--wide-size);}body .is-layout-flex{display: flex;}body .is-layout-flex{flex-wrap: wrap;align-items: center;}body .is-layout-flex > *{margin: 0;}body .is-layout-grid{display: grid;}body .is-layout-grid > *{margin: 0;}';
 		$element_styles  = 'a:where(:not(.wp-element-button)){box-shadow: var(--wp--preset--shadow--natural);}.wp-element-button, .wp-block-button__link{box-shadow: var(--wp--preset--shadow--natural);}p{box-shadow: var(--wp--preset--shadow--natural);}';
 		$expected_styles = $global_styles . $element_styles;
-
 		$this->assertSame( $expected_styles, $theme_json->get_stylesheet() );
 	}
 
@@ -4570,11 +4886,17 @@ class Tests_Theme_wpThemeJson extends WP_UnitTestCase {
 			array(
 				'version' => WP_Theme_JSON::LATEST_SCHEMA,
 				'styles'  => array(
-					'css' => 'body { color:purple; }',
+					'css'    => 'body {color:purple;}',
+					'blocks' => array(
+						'core/paragraph' => array(
+							'css' => 'color:red;',
+						),
+					),
 				),
 			)
 		);
-		$custom_css = 'body { color:purple; }';
+
+		$custom_css = 'body {color:purple;}p{color:red;}';
 		$this->assertSame( $custom_css, $theme_json->get_custom_css() );
 	}
 
@@ -4677,29 +4999,37 @@ class Tests_Theme_wpThemeJson extends WP_UnitTestCase {
 	 */
 	public function data_process_blocks_custom_css() {
 		return array(
-			// Simple CSS without any child selectors.
-			'no child selectors'                => array(
+			// Simple CSS without any nested selectors.
+			'no nested selectors'          => array(
 				'input'    => array(
 					'selector' => '.foo',
 					'css'      => 'color: red; margin: auto;',
 				),
 				'expected' => '.foo{color: red; margin: auto;}',
 			),
-			// CSS with child selectors.
-			'with children'                     => array(
+			// CSS with nested selectors.
+			'with nested selector'         => array(
 				'input'    => array(
 					'selector' => '.foo',
-					'css'      => 'color: red; margin: auto; & .bar{color: blue;}',
+					'css'      => 'color: red; margin: auto; &.one{color: blue;} & .two{color: green;}',
 				),
-				'expected' => '.foo{color: red; margin: auto;}.foo .bar{color: blue;}',
+				'expected' => '.foo{color: red; margin: auto;}.foo.one{color: blue;}.foo .two{color: green;}',
 			),
-			// CSS with child selectors and pseudo elements.
-			'with children and pseudo elements' => array(
+			// CSS with pseudo elements.
+			'with pseudo elements'         => array(
 				'input'    => array(
 					'selector' => '.foo',
-					'css'      => 'color: red; margin: auto; & .bar{color: blue;} &::before{color: green;}',
+					'css'      => 'color: red; margin: auto; &::before{color: blue;} & ::before{color: green;}  &.one::before{color: yellow;} & .two::before{color: purple;}',
+				),
+				'expected' => '.foo{color: red; margin: auto;}.foo::before{color: blue;}.foo ::before{color: green;}.foo.one::before{color: yellow;}.foo .two::before{color: purple;}',
+			),
+			// CSS with multiple root selectors.
+			'with multiple root selectors' => array(
+				'input'    => array(
+					'selector' => '.foo, .bar',
+					'css'      => 'color: red; margin: auto; &.one{color: blue;} & .two{color: green;} &::before{color: yellow;} & ::before{color: purple;}  &.three::before{color: orange;} & .four::before{color: skyblue;}',
 				),
-				'expected' => '.foo{color: red; margin: auto;}.foo .bar{color: blue;}.foo::before{color: green;}',
+				'expected' => '.foo, .bar{color: red; margin: auto;}.foo.one, .bar.one{color: blue;}.foo .two, .bar .two{color: green;}.foo::before, .bar::before{color: yellow;}.foo ::before, .bar ::before{color: purple;}.foo.three::before, .bar.three::before{color: orange;}.foo .four::before, .bar .four::before{color: skyblue;}',
 			),
 		);
 	}
@@ -4768,6 +5098,15 @@ class Tests_Theme_wpThemeJson extends WP_UnitTestCase {
 		$this->assertEquals( 'var(--wp--preset--color--s)', $styles['blocks']['core/quote']['variations']['plain']['color']['background'], 'Style variations: Assert the internal variables are convert to CSS custom variables.' );
 	}
 
+	/**
+	 * Tests that the theme.json file is correctly parsed and the variables are resolved.
+	 *
+	 * @ticket 58588
+	 * @ticket 60613
+	 *
+	 * @covers WP_Theme_JSON_Gutenberg::resolve_variables
+	 * @covers WP_Theme_JSON_Gutenberg::convert_variables_to_value
+	 */
 	public function test_resolve_variables() {
 		$primary_color   = '#9DFF20';
 		$secondary_color = '#9DFF21';
@@ -4775,6 +5114,7 @@ class Tests_Theme_wpThemeJson extends WP_UnitTestCase {
 		$raw_color_value = '#efefef';
 		$large_font      = '18px';
 		$small_font      = '12px';
+		$spacing         = 'clamp(1.5rem, 5vw, 2rem)';
 		$theme_json      = new WP_Theme_JSON(
 			array(
 				'version'  => WP_Theme_JSON::LATEST_SCHEMA,
@@ -4814,6 +5154,15 @@ class Tests_Theme_wpThemeJson extends WP_UnitTestCase {
 							),
 						),
 					),
+					'spacing'    => array(
+						'spacingSizes' => array(
+							array(
+								'size' => $spacing,
+								'name' => '100',
+								'slug' => '100',
+							),
+						),
+					),
 				),
 				'styles'   => array(
 					'color'    => array(
@@ -4876,6 +5225,16 @@ class Tests_Theme_wpThemeJson extends WP_UnitTestCase {
 								),
 							),
 						),
+						'core/post-template'   => array(
+							'spacing' => array(
+								'blockGap' => null,
+							),
+						),
+						'core/columns'         => array(
+							'spacing' => array(
+								'blockGap' => 'var(--wp--preset--spacing--100)',
+							),
+						),
 					),
 				),
 			)
@@ -4919,5 +5278,106 @@ class Tests_Theme_wpThemeJson extends WP_UnitTestCase {
 
 		$this->assertEquals( $small_font, $styles['blocks']['core/quote']['variations']['plain']['typography']['fontSize'], 'Block variations: font-size' );
 		$this->assertEquals( $secondary_color, $styles['blocks']['core/quote']['variations']['plain']['color']['background'], 'Block variations: color' );
+		/*
+		 * As with wp_get_global_styles(), WP_Theme_JSON::resolve_variables may be called with merged data from
+		 * WP_Theme_JSON_Resolver. WP_Theme_JSON_Resolver::get_block_data() sets blockGap for supported blocks to `null` if the value is not defined.
+		 */
+		$this->assertNull(
+			$styles['blocks']['core/post-template']['spacing']['blockGap'],
+			'Blocks: Post Template spacing.blockGap should be null'
+		);
+		$this->assertEquals(
+			$spacing,
+			$styles['blocks']['core/columns']['spacing']['blockGap'],
+			'Blocks: Columns spacing.blockGap should match'
+		);
+	}
+
+	/**
+	 * Tests the correct application of a block style variation's selector to
+	 * a block's selector.
+	 *
+	 * @ticket 60453
+	 *
+	 * @dataProvider data_get_block_style_variation_selector
+	 *
+	 * @param string $selector  CSS selector.
+	 * @param string $expected  Expected block style variation CSS selector.
+	 */
+	public function test_get_block_style_variation_selector( $selector, $expected ) {
+		$theme_json = new ReflectionClass( 'WP_Theme_JSON' );
+
+		$func = $theme_json->getMethod( 'get_block_style_variation_selector' );
+		$func->setAccessible( true );
+
+		$actual = $func->invoke( null, 'custom', $selector );
+
+		$this->assertEquals( $expected, $actual );
+	}
+
+	/**
+	 * Data provider for generating block style variation selectors.
+	 *
+	 * @return array[]
+	 */
+	public function data_get_block_style_variation_selector() {
+		return array(
+			'empty block selector'     => array(
+				'selector' => '',
+				'expected' => '.is-style-custom',
+			),
+			'class selector'           => array(
+				'selector' => '.wp-block',
+				'expected' => '.wp-block.is-style-custom',
+			),
+			'id selector'              => array(
+				'selector' => '#wp-block',
+				'expected' => '#wp-block.is-style-custom',
+			),
+			'element tag selector'     => array(
+				'selector' => 'p',
+				'expected' => 'p.is-style-custom',
+			),
+			'attribute selector'       => array(
+				'selector' => '[style*="color"]',
+				'expected' => '[style*="color"].is-style-custom',
+			),
+			'descendant selector'      => array(
+				'selector' => '.wp-block .inner',
+				'expected' => '.wp-block.is-style-custom .inner',
+			),
+			'comma separated selector' => array(
+				'selector' => '.wp-block .inner, .wp-block .alternative',
+				'expected' => '.wp-block.is-style-custom .inner, .wp-block.is-style-custom .alternative',
+			),
+			'pseudo selector'          => array(
+				'selector' => 'div:first-child',
+				'expected' => 'div.is-style-custom:first-child',
+			),
+			':is selector'             => array(
+				'selector' => '.wp-block:is(.outer .inner:first-child)',
+				'expected' => '.wp-block.is-style-custom:is(.outer .inner:first-child)',
+			),
+			':not selector'            => array(
+				'selector' => '.wp-block:not(.outer .inner:first-child)',
+				'expected' => '.wp-block.is-style-custom:not(.outer .inner:first-child)',
+			),
+			':has selector'            => array(
+				'selector' => '.wp-block:has(.outer .inner:first-child)',
+				'expected' => '.wp-block.is-style-custom:has(.outer .inner:first-child)',
+			),
+			':where selector'          => array(
+				'selector' => '.wp-block:where(.outer .inner:first-child)',
+				'expected' => '.wp-block.is-style-custom:where(.outer .inner:first-child)',
+			),
+			'wrapping :where selector' => array(
+				'selector' => ':where(.outer .inner:first-child)',
+				'expected' => ':where(.outer.is-style-custom .inner:first-child)',
+			),
+			'complex'                  => array(
+				'selector' => '.wp:where(.something):is(.test:not(.nothing p)):has(div[style]) .content, .wp:where(.nothing):not(.test:is(.something div)):has(span[style]) .inner',
+				'expected' => '.wp.is-style-custom:where(.something):is(.test:not(.nothing p)):has(div[style]) .content, .wp.is-style-custom:where(.nothing):not(.test:is(.something div)):has(span[style]) .inner',
+			),
+		);
 	}
 }
diff --git a/tests/theme/wpThemeJsonResolver.php b/tests/theme/wpThemeJsonResolver.php
index cc7cfa2f65..0e91e27bc2 100644
--- a/tests/theme/wpThemeJsonResolver.php
+++ b/tests/theme/wpThemeJsonResolver.php
@@ -19,20 +19,6 @@ class Tests_Theme_wpThemeJsonResolver extends WP_UnitTestCase {
 	 */
 	protected static $administrator_id;
 
-	/**
-	 * Theme root directory.
-	 *
-	 * @var string
-	 */
-	private $theme_root;
-
-	/**
-	 * Original theme directory.
-	 *
-	 * @var string
-	 */
-	private $orig_theme_dir;
-
 	/**
 	 * WP_Theme_JSON_Resolver::$blocks_cache property.
 	 *
@@ -61,6 +47,25 @@ class Tests_Theme_wpThemeJsonResolver extends WP_UnitTestCase {
 	 */
 	private static $property_core_orig_value;
 
+	/**
+	 * Theme root directory.
+	 *
+	 * @var string|null
+	 */
+	private $theme_root;
+
+	/**
+	 * Original theme directory.
+	 *
+	 * @var array|null
+	 */
+	private $orig_theme_dir;
+
+	/**
+	 * @var array|null
+	 */
+	private $queries;
+
 	public static function set_up_before_class() {
 		parent::set_up_before_class();
 
@@ -98,7 +103,7 @@ class Tests_Theme_wpThemeJsonResolver extends WP_UnitTestCase {
 		add_filter( 'theme_root', array( $this, 'filter_set_theme_root' ) );
 		add_filter( 'stylesheet_root', array( $this, 'filter_set_theme_root' ) );
 		add_filter( 'template_root', array( $this, 'filter_set_theme_root' ) );
-
+		$this->queries = array();
 		// Clear caches.
 		wp_clean_themes_cache();
 		unset( $GLOBALS['wp_themes'] );
@@ -140,7 +145,7 @@ class Tests_Theme_wpThemeJsonResolver extends WP_UnitTestCase {
 
 		$this->assertSame( 'block-theme', wp_get_theme()->get( 'TextDomain' ) );
 		$this->assertSame( 'Motyw blokowy', $theme_data->get_data()['title'] );
-		$this->assertSameSets(
+		$this->assertSame(
 			array(
 				'color'      => array(
 					'custom'         => false,
@@ -218,12 +223,13 @@ class Tests_Theme_wpThemeJsonResolver extends WP_UnitTestCase {
 		$custom_templates = $theme_data->get_custom_templates();
 		$this->assertArrayHasKey( 'page-home', $custom_templates );
 		$this->assertSame(
-			$custom_templates['page-home'],
 			array(
 				'title'     => 'Szablon strony głównej',
 				'postTypes' => array( 'page' ),
-			)
+			),
+			$custom_templates['page-home']
 		);
+
 		$this->assertSameSets(
 			array(
 				'small-header' => array(
@@ -233,9 +239,10 @@ class Tests_Theme_wpThemeJsonResolver extends WP_UnitTestCase {
 			),
 			$theme_data->get_template_parts()
 		);
+
 		$this->assertSame(
 			'Wariant motywu blokowego',
-			$style_variations[1]['title']
+			$style_variations[2]['title']
 		);
 	}
 
@@ -257,8 +264,8 @@ class Tests_Theme_wpThemeJsonResolver extends WP_UnitTestCase {
 	}
 
 	/**
-	 * Tests when WP_Theme_JSON_Resolver::$blocks_cache is empty or does not match
-	 * the all registered blocks.
+	 * Tests when WP_Theme_JSON_Resolver::$blocks_cache is empty or
+	 * does not match the all registered blocks.
 	 *
 	 * Though this is a non-public method, it is vital to other functionality.
 	 * Therefore, tests are provided to validate it functions as expected.
@@ -331,8 +338,8 @@ class Tests_Theme_wpThemeJsonResolver extends WP_UnitTestCase {
 	}
 
 	/**
-	 * Tests when WP_Theme_JSON_Resolver::$blocks_cache is empty or does not match
-	 * the all registered blocks.
+	 * Tests when WP_Theme_JSON_Resolver::$blocks_cache is empty or
+	 * does not match the all registered blocks.
 	 *
 	 * Though this is a non-public method, it is vital to other functionality.
 	 * Therefore, tests are provided to validate it functions as expected.
@@ -433,6 +440,9 @@ class Tests_Theme_wpThemeJsonResolver extends WP_UnitTestCase {
 
 	/**
 	 * @ticket 54336
+	 * @ticket 60118
+	 *
+	 * @covers ::add_theme_support
 	 */
 	public function test_add_theme_supports_are_loaded_for_themes_without_theme_json() {
 		switch_theme( 'default' );
@@ -455,15 +465,34 @@ class Tests_Theme_wpThemeJsonResolver extends WP_UnitTestCase {
 		);
 		add_theme_support( 'editor-color-palette', $color_palette );
 		add_theme_support( 'custom-line-height' );
+		add_theme_support( 'appearance-tools' );
 
 		$settings = WP_Theme_JSON_Resolver::get_theme_data()->get_settings();
 
 		remove_theme_support( 'custom-line-height' );
 		remove_theme_support( 'editor-color-palette' );
+		remove_theme_support( 'appearance-tools' );
 
 		$this->assertFalse( wp_theme_has_theme_json() );
 		$this->assertTrue( $settings['typography']['lineHeight'] );
 		$this->assertSame( $color_palette, $settings['color']['palette']['theme'] );
+		$this->assertTrue( $settings['border']['color'], 'Support for "appearance-tools" was not added.' );
+	}
+
+	/**
+	 * Tests that classic themes still get core default settings such as color palette and duotone.
+	 *
+	 * @ticket 60136
+	 */
+	public function test_core_default_settings_are_loaded_for_themes_without_theme_json() {
+		switch_theme( 'default' );
+
+		$settings = WP_Theme_JSON_Resolver::get_merged_data( 'theme' )->get_settings();
+
+		$this->assertFalse( wp_theme_has_theme_json() );
+		$this->assertTrue( $settings['color']['defaultPalette'] );
+		$this->assertTrue( $settings['color']['defaultDuotone'] );
+		$this->assertTrue( $settings['color']['defaultGradients'] );
 	}
 
 	/**
@@ -574,7 +603,6 @@ class Tests_Theme_wpThemeJsonResolver extends WP_UnitTestCase {
 		);
 
 		$this->assertSame(
-			WP_Theme_JSON_Resolver::get_theme_data()->get_custom_templates(),
 			array(
 				'page-home'                   => array(
 					'title'     => 'Homepage',
@@ -584,7 +612,8 @@ class Tests_Theme_wpThemeJsonResolver extends WP_UnitTestCase {
 					'title'     => 'Custom Single Post template',
 					'postTypes' => array( 'post' ),
 				),
-			)
+			),
+			WP_Theme_JSON_Resolver::get_theme_data()->get_custom_templates()
 		);
 	}
 
@@ -727,6 +756,8 @@ class Tests_Theme_wpThemeJsonResolver extends WP_UnitTestCase {
 	 * @covers WP_Theme_JSON_Resolver::get_theme_data
 	 */
 	public function test_get_theme_data_theme_supports_overrides_theme_json() {
+		switch_theme( 'default' );
+
 		// Test that get_theme_data() returns a WP_Theme_JSON object.
 		$theme_json_resolver = new WP_Theme_JSON_Resolver();
 		$theme_json_resolver->get_merged_data();
@@ -740,10 +771,12 @@ class Tests_Theme_wpThemeJsonResolver extends WP_UnitTestCase {
 		$previous_settings    = $theme_data->get_settings();
 		$previous_line_height = $previous_settings['typography']['lineHeight'];
 		$this->assertFalse( $previous_line_height, 'lineHeight setting from theme.json should be false.' );
+
 		add_theme_support( 'custom-line-height' );
 		$current_settings = $theme_json_resolver->get_theme_data()->get_settings();
 		$line_height      = $current_settings['typography']['lineHeight'];
 		$this->assertTrue( $line_height, 'lineHeight setting after add_theme_support() should be true.' );
+		remove_theme_support( 'custom-line-height' );
 	}
 
 	/**
@@ -787,15 +820,15 @@ class Tests_Theme_wpThemeJsonResolver extends WP_UnitTestCase {
 	 * @param string $block_styles_text  Message.
 	 * @param bool   $theme_palette      Whether the theme palette is present.
 	 * @param string $theme_palette_text Message.
-	 * @param bool   $user_palette        Whether the user palette is present.
-	 * @param string $user_palette_text   Message.
+	 * @param bool   $user_palette       Whether the user palette is present.
+	 * @param string $user_palette_text  Message.
 	 */
 	public function test_get_merged_data_returns_origin( $origin, $core_palette, $core_palette_text, $block_styles, $block_styles_text, $theme_palette, $theme_palette_text, $user_palette, $user_palette_text ) {
 		// Make sure there is data from the blocks origin.
 		register_block_type(
 			'my/block-with-styles',
 			array(
-				'api_version' => 2,
+				'api_version' => 3,
 				'attributes'  => array(
 					'borderColor' => array(
 						'type' => 'string',
@@ -855,7 +888,6 @@ class Tests_Theme_wpThemeJsonResolver extends WP_UnitTestCase {
 	 * @ticket 57824
 	 *
 	 * @covers WP_Theme_JSON_Resolver::get_merged_data
-	 *
 	 */
 	public function test_get_merged_data_returns_origin_proper() {
 		// Make sure the theme has a theme.json
@@ -892,7 +924,7 @@ class Tests_Theme_wpThemeJsonResolver extends WP_UnitTestCase {
 	}
 
 	/**
-	 * Data provider.
+	 * Data provider for test_get_merged_data_returns_origin.
 	 *
 	 * @return array[]
 	 */
@@ -961,7 +993,28 @@ class Tests_Theme_wpThemeJsonResolver extends WP_UnitTestCase {
 		$actual_settings   = WP_Theme_JSON_Resolver::get_style_variations();
 		$expected_settings = array(
 			array(
-				'version'  => 2,
+				'version'  => WP_Theme_JSON::LATEST_SCHEMA,
+				'title'    => 'variation-a',
+				'settings' => array(
+					'blocks' => array(
+						'core/paragraph' => array(
+							'color' => array(
+								'palette' => array(
+									'theme' => array(
+										array(
+											'slug'  => 'dark',
+											'name'  => 'Dark',
+											'color' => '#010101',
+										),
+									),
+								),
+							),
+						),
+					),
+				),
+			),
+			array(
+				'version'  => WP_Theme_JSON::LATEST_SCHEMA,
 				'title'    => 'variation-b',
 				'settings' => array(
 					'blocks' => array(
@@ -982,7 +1035,7 @@ class Tests_Theme_wpThemeJsonResolver extends WP_UnitTestCase {
 				),
 			),
 			array(
-				'version'  => 2,
+				'version'  => WP_Theme_JSON::LATEST_SCHEMA,
 				'title'    => 'Block theme variation',
 				'settings' => array(
 					'color' => array(
diff --git a/tests/theme/wpThemeJsonSchema.php b/tests/theme/wpThemeJsonSchema.php
index e93ef0673a..cb5bb41780 100644
--- a/tests/theme/wpThemeJsonSchema.php
+++ b/tests/theme/wpThemeJsonSchema.php
@@ -11,15 +11,10 @@
  * @group themes
  */
 class Tests_Theme_wpThemeJsonSchema extends WP_UnitTestCase {
-	/**
-	 * The current theme.json schema version.
-	 */
-	const LATEST_SCHEMA_VERSION = WP_Theme_JSON::LATEST_SCHEMA;
-
 	/**
 	 * @ticket 54336
 	 */
-	public function test_migrate_v1_to_v2() {
+	public function test_migrate_v1_to_latest() {
 		$theme_json_v1 = array(
 			'version'  => 1,
 			'settings' => array(
@@ -106,7 +101,7 @@ class Tests_Theme_wpThemeJsonSchema extends WP_UnitTestCase {
 		$actual = WP_Theme_JSON_Schema::migrate( $theme_json_v1 );
 
 		$expected = array(
-			'version'  => self::LATEST_SCHEMA_VERSION,
+			'version'  => WP_Theme_JSON::LATEST_SCHEMA,
 			'settings' => array(
 				'color'      => array(
 					'palette' => array(
diff --git a/tests/user/query.php b/tests/user/query.php
index 21275738e7..887064b8ca 100644
--- a/tests/user/query.php
+++ b/tests/user/query.php
@@ -1,6 +1,6 @@
 <?php
 /**
- * Test WP_User Query, in wp-includes/user.php
+ * Test WP_User_Query, in wp-includes/class-wp-user-query.php.
  *
  * @group user
  */
@@ -2378,4 +2378,17 @@ class Tests_User_Query extends WP_UnitTestCase {
 			),
 		);
 	}
+
+	/**
+	 * @ticket 56841
+	 */
+	public function test_query_does_not_have_leading_whitespace() {
+		$q = new WP_User_Query(
+			array(
+				'number' => 2,
+			)
+		);
+
+		$this->assertSame( ltrim( $q->request ), $q->request, 'The query has leading whitespace' );
+	}
 }
diff --git a/tests/user/queryCache.php b/tests/user/queryCache.php
index 7e63907f74..985c6d7da9 100644
--- a/tests/user/queryCache.php
+++ b/tests/user/queryCache.php
@@ -1,6 +1,6 @@
 <?php
 /**
- * Test WP_User Query, in wp-includes/user.php
+ * Test WP_User_Query, in wp-includes/class-wp-user-query.php.
  *
  * @group user
  *
diff --git a/tests/vars.php b/tests/vars.php
index 698f61a0e9..bb5a89c77f 100644
--- a/tests/vars.php
+++ b/tests/vars.php
@@ -2,7 +2,7 @@
 /**
  * Test functions in wp-includes/vars.php
  *
- * @group vars.php
+ * @group vars
  */
 class Tests_Vars extends WP_UnitTestCase {
 
