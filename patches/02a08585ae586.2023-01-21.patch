diff --git a/data/blocks/fixtures/core__column.server.html b/data/blocks/fixtures/core__column.server.html
index cdc525068b..d3d3cac083 100644
--- a/data/blocks/fixtures/core__column.server.html
+++ b/data/blocks/fixtures/core__column.server.html
@@ -1,5 +1,5 @@
 
-<div class="wp-container-1 wp-block-column">
+<div class="is-layout-flow wp-block-column">
 	
 	<p>Column One, Paragraph One</p>
 	
diff --git a/data/blocks/fixtures/core__columns.server.html b/data/blocks/fixtures/core__columns.server.html
index 1999742228..f8b9705b59 100644
--- a/data/blocks/fixtures/core__columns.server.html
+++ b/data/blocks/fixtures/core__columns.server.html
@@ -1,7 +1,7 @@
 
-<div class="wp-container-1 wp-block-columns has-3-columns">
+<div class="is-layout-flex wp-container-1 wp-block-columns has-3-columns">
 	
-	<div class="wp-container-1 wp-block-column">
+	<div class="is-layout-flow wp-block-column">
 		
 		<p>Column One, Paragraph One</p>
 		
@@ -11,7 +11,7 @@
 	</div>
 	
 	
-	<div class="wp-container-1 wp-block-column">
+	<div class="is-layout-flow wp-block-column">
 		
 		<p>Column Two, Paragraph One</p>
 		
diff --git a/data/blocks/fixtures/core__columns__deprecated.server.html b/data/blocks/fixtures/core__columns__deprecated.server.html
index 8aa88433d6..6240dc51a8 100644
--- a/data/blocks/fixtures/core__columns__deprecated.server.html
+++ b/data/blocks/fixtures/core__columns__deprecated.server.html
@@ -1,5 +1,5 @@
 
-<div class="wp-container-1 wp-block-columns has-3-columns">
+<div class="is-layout-flex wp-container-1 wp-block-columns has-3-columns">
 	
 	<p class="layout-column-1">Column One, Paragraph One</p>
 	
diff --git a/data/blocks/fixtures/core__gallery.server.html b/data/blocks/fixtures/core__gallery.server.html
index a185c67cd7..c7a5d3bb44 100644
--- a/data/blocks/fixtures/core__gallery.server.html
+++ b/data/blocks/fixtures/core__gallery.server.html
@@ -1,5 +1,5 @@
 
-<figure class="wp-container-1 wp-block-gallery-1 wp-block-gallery has-nested-images columns-default is-cropped columns-2">
+<figure class="is-layout-flex wp-block-gallery-1 wp-block-gallery has-nested-images columns-default is-cropped columns-2">
 	
 	<figure class="wp-block-image size-large">
 		<img src="https://cldup.com/uuUqE_dXzy.jpg" alt="Image gallery image" />
diff --git a/data/blocks/fixtures/core__gallery__columns.server.html b/data/blocks/fixtures/core__gallery__columns.server.html
index 4056203589..2970d60ced 100644
--- a/data/blocks/fixtures/core__gallery__columns.server.html
+++ b/data/blocks/fixtures/core__gallery__columns.server.html
@@ -1,5 +1,5 @@
 
-<figure class="wp-container-1 wp-block-gallery-1 wp-block-gallery has-nested-images is-cropped columns-1" >
+<figure class="is-layout-flex wp-block-gallery-1 wp-block-gallery has-nested-images is-cropped columns-1" >
 	
 	<figure class="wp-block-image size-large">
 		<img src="https://cldup.com/uuUqE_dXzy.jpg" alt="Image gallery image" />
diff --git a/data/themedir1/block-theme-child-no-theme-json/style.css b/data/themedir1/block-theme-child-no-theme-json/style.css
new file mode 100644
index 0000000000..3444412882
--- /dev/null
+++ b/data/themedir1/block-theme-child-no-theme-json/style.css
@@ -0,0 +1,8 @@
+/*
+Theme Name: Block Theme Child with no theme.json
+Theme URI: https://wordpress.org/
+Description: For testing purposes only.
+Template: block-theme
+Version: 1.0.0
+Text Domain: block-theme-child-no-theme-json
+*/
diff --git a/data/themedir1/block-theme-child-with-fluid-typography/style.css b/data/themedir1/block-theme-child-with-fluid-typography/style.css
new file mode 100644
index 0000000000..19abbecf86
--- /dev/null
+++ b/data/themedir1/block-theme-child-with-fluid-typography/style.css
@@ -0,0 +1,8 @@
+/*
+Theme Name: Block Theme Child Theme With Fluid Typography
+Theme URI: https://wordpress.org/
+Description: For testing purposes only.
+Template: block-theme
+Version: 1.0.0
+Text Domain: block-theme-child-with-fluid-typography
+*/
diff --git a/data/themedir1/block-theme-child-with-fluid-typography/theme.json b/data/themedir1/block-theme-child-with-fluid-typography/theme.json
new file mode 100644
index 0000000000..93234766ed
--- /dev/null
+++ b/data/themedir1/block-theme-child-with-fluid-typography/theme.json
@@ -0,0 +1,9 @@
+{
+	"version": 2,
+	"settings": {
+		"appearanceTools": true,
+		"typography": {
+			"fluid": true
+		}
+	}
+}
diff --git a/data/themedir1/block-theme/theme.json b/data/themedir1/block-theme/theme.json
index 4961a620a2..d023faec53 100644
--- a/data/themedir1/block-theme/theme.json
+++ b/data/themedir1/block-theme/theme.json
@@ -22,6 +22,13 @@
 					"slug": "custom-gradient"
 				}
 			],
+			"duotone": [
+				{
+					"colors": [ "#333333", "#aaaaaa" ],
+					"slug": "custom-duotone",
+					"name": "Custom Duotone"
+				}
+			],
 			"custom": false,
 			"customGradient": false
 		},
@@ -38,7 +45,8 @@
 		},
 		"spacing": {
 			"units": ["rem"],
-			"customPadding": true
+			"customPadding": true,
+			"blockGap": true
 		},
 		"blocks": {
 			"core/paragraph": {
@@ -54,6 +62,50 @@
 			}
 		}
 	},
+	"styles" : {
+		"blocks" :{
+			"core/post-featured-image": {
+				"shadow": "10px 10px 5px 0px rgba(0,0,0,0.66)",
+				"filter": {
+					"duotone": "var(--wp--preset--duotone--custom-duotone)"
+				}
+			},
+			"my/third-party-block": {
+				"color": {
+					"background": "hotpink"
+				}
+			}
+		},
+		"elements": {
+			"button": {
+				"shadow": "10px 10px 5px 0px rgba(0,0,0,0.66)"
+			},
+			"link": {
+				"typography": {
+					"textDecoration": "none"
+				},
+				"border": {
+					"bottom": {
+						"width": "2px",
+						"color": "currentColor",
+						"style": "solid"
+					}
+				},
+				":hover": {
+					"typography": {
+						"textDecoration": "none"
+					},
+					"border": {
+						"bottom": {
+							"width": "2px",
+							"color": "#000",
+							"style": "dotted"
+						}
+					}
+				}
+			}
+		}
+	},
 	"customTemplates": [
 		{
 			"name": "page-home",
@@ -72,4 +124,4 @@
 			"area": "header"
 		}
 	]
-}
+}
\ No newline at end of file
diff --git a/data/themedir1/default-child-no-theme-json/style.css b/data/themedir1/default-child-no-theme-json/style.css
new file mode 100644
index 0000000000..8f971990d9
--- /dev/null
+++ b/data/themedir1/default-child-no-theme-json/style.css
@@ -0,0 +1,8 @@
+/*
+Theme Name: Default Child Theme with no theme.json
+Theme URI: https://wordpress.org/
+Description: For testing purposes only.
+Template: default
+Version: 1.0.0
+Text Domain: default-child-no-theme-json
+*/
diff --git a/includes/abstract-testcase.php b/includes/abstract-testcase.php
index c20f450f7c..bae787a42d 100644
--- a/includes/abstract-testcase.php
+++ b/includes/abstract-testcase.php
@@ -62,13 +62,13 @@ abstract class WP_UnitTestCase_Base extends PHPUnit_Adapter_TestCase {
 	public static function set_up_before_class() {
 		global $wpdb;
 
+		parent::set_up_before_class();
+
 		$wpdb->suppress_errors = false;
 		$wpdb->show_errors     = true;
 		$wpdb->db_connect();
 		ini_set( 'display_errors', 1 );
 
-		parent::set_up_before_class();
-
 		$class = get_called_class();
 
 		if ( method_exists( $class, 'wpSetUpBeforeClass' ) ) {
@@ -82,18 +82,18 @@ abstract class WP_UnitTestCase_Base extends PHPUnit_Adapter_TestCase {
 	 * Runs the routine after all tests have been run.
 	 */
 	public static function tear_down_after_class() {
-		parent::tear_down_after_class();
-
-		_delete_all_data();
-		self::flush_cache();
-
 		$class = get_called_class();
 
 		if ( method_exists( $class, 'wpTearDownAfterClass' ) ) {
 			call_user_func( array( $class, 'wpTearDownAfterClass' ) );
 		}
 
+		_delete_all_data();
+		self::flush_cache();
+
 		self::commit_transaction();
+
+		parent::tear_down_after_class();
 	}
 
 	/**
@@ -322,7 +322,7 @@ abstract class WP_UnitTestCase_Base extends PHPUnit_Adapter_TestCase {
 	 * Saves the action and filter-related globals so they can be restored later.
 	 *
 	 * Stores $wp_actions, $wp_current_filter, and $wp_filter on a class variable
-	 * so they can be restored on tearDown() using _restore_hooks().
+	 * so they can be restored on tear_down() using _restore_hooks().
 	 *
 	 * @global array $wp_actions
 	 * @global array $wp_current_filter
@@ -340,7 +340,7 @@ abstract class WP_UnitTestCase_Base extends PHPUnit_Adapter_TestCase {
 	}
 
 	/**
-	 * Restores the hook-related globals to their state at setUp()
+	 * Restores the hook-related globals to their state at set_up()
 	 * so that future tests aren't affected by hooks set during this last test.
 	 *
 	 * @global array $wp_actions
@@ -682,26 +682,26 @@ abstract class WP_UnitTestCase_Base extends PHPUnit_Adapter_TestCase {
 	 * @since 3.7.0
 	 * @since 6.1.0 Added the `$replacement`, `$version`, and `$message` parameters.
 	 *
-	 * @param string $function    The deprecated function.
-	 * @param string $replacement The function that should have been called.
-	 * @param string $version     The version of WordPress that deprecated the function.
-	 * @param string $message     Optional. A message regarding the change.
+	 * @param string $function_name The deprecated function.
+	 * @param string $replacement   The function that should have been called.
+	 * @param string $version       The version of WordPress that deprecated the function.
+	 * @param string $message       Optional. A message regarding the change.
 	 */
-	public function deprecated_function_run( $function, $replacement, $version, $message = '' ) {
-		if ( ! isset( $this->caught_deprecated[ $function ] ) ) {
+	public function deprecated_function_run( $function_name, $replacement, $version, $message = '' ) {
+		if ( ! isset( $this->caught_deprecated[ $function_name ] ) ) {
 			switch ( current_action() ) {
 				case 'deprecated_function_run':
 					if ( $replacement ) {
 						$message = sprintf(
 							'Function %1$s is deprecated since version %2$s! Use %3$s instead.',
-							$function,
+							$function_name,
 							$version,
 							$replacement
 						);
 					} else {
 						$message = sprintf(
 							'Function %1$s is deprecated since version %2$s with no alternative available.',
-							$function,
+							$function_name,
 							$version
 						);
 					}
@@ -711,14 +711,14 @@ abstract class WP_UnitTestCase_Base extends PHPUnit_Adapter_TestCase {
 					if ( $replacement ) {
 						$message = sprintf(
 							'Function %1$s was called with an argument that is deprecated since version %2$s! %3$s',
-							$function,
+							$function_name,
 							$version,
 							$replacement
 						);
 					} else {
 						$message = sprintf(
 							'Function %1$s was called with an argument that is deprecated since version %2$s with no alternative available.',
-							$function,
+							$function_name,
 							$version
 						);
 					}
@@ -728,14 +728,14 @@ abstract class WP_UnitTestCase_Base extends PHPUnit_Adapter_TestCase {
 					if ( $replacement ) {
 						$message = sprintf(
 							'File %1$s is deprecated since version %2$s! Use %3$s instead.',
-							$function,
+							$function_name,
 							$version,
 							$replacement
 						) . ' ' . $message;
 					} else {
 						$message = sprintf(
 							'File %1$s is deprecated since version %2$s with no alternative available.',
-							$function,
+							$function_name,
 							$version
 						) . ' ' . $message;
 					}
@@ -745,21 +745,21 @@ abstract class WP_UnitTestCase_Base extends PHPUnit_Adapter_TestCase {
 					if ( $replacement ) {
 						$message = sprintf(
 							'Hook %1$s is deprecated since version %2$s! Use %3$s instead.',
-							$function,
+							$function_name,
 							$version,
 							$replacement
 						) . ' ' . $message;
 					} else {
 						$message = sprintf(
 							'Hook %1$s is deprecated since version %2$s with no alternative available.',
-							$function,
+							$function_name,
 							$version
 						) . ' ' . $message;
 					}
 					break;
 			}
 
-			$this->caught_deprecated[ $function ] = $message;
+			$this->caught_deprecated[ $function_name ] = $message;
 		}
 	}
 
@@ -769,17 +769,17 @@ abstract class WP_UnitTestCase_Base extends PHPUnit_Adapter_TestCase {
 	 * @since 3.7.0
 	 * @since 6.1.0 Added the `$message` and `$version` parameters.
 	 *
-	 * @param string $function The function to add.
-	 * @param string $message  A message explaining what has been done incorrectly.
-	 * @param string $version  The version of WordPress where the message was added.
+	 * @param string $function_name The function to add.
+	 * @param string $message       A message explaining what has been done incorrectly.
+	 * @param string $version       The version of WordPress where the message was added.
 	 */
-	public function doing_it_wrong_run( $function, $message, $version ) {
-		if ( ! isset( $this->caught_doing_it_wrong[ $function ] ) ) {
+	public function doing_it_wrong_run( $function_name, $message, $version ) {
+		if ( ! isset( $this->caught_doing_it_wrong[ $function_name ] ) ) {
 			if ( $version ) {
 				$message .= ' ' . sprintf( '(This message was added in version %s.)', $version );
 			}
 
-			$this->caught_doing_it_wrong[ $function ] = $message;
+			$this->caught_doing_it_wrong[ $function_name ] = $message;
 		}
 	}
 
@@ -837,18 +837,18 @@ abstract class WP_UnitTestCase_Base extends PHPUnit_Adapter_TestCase {
 	 * @since UT (3.7.0)
 	 * @since 5.9.0 Added the `$message` parameter.
 	 *
-	 * @param object $object  The object to check.
+	 * @param object $actual  The object to check.
 	 * @param array  $fields  The fields to check.
 	 * @param string $message Optional. Message to display when the assertion fails.
 	 */
-	public function assertEqualFields( $object, $fields, $message = '' ) {
-		$this->assertIsObject( $object, $message . ' Passed $object is not an object.' );
+	public function assertEqualFields( $actual, $fields, $message = '' ) {
+		$this->assertIsObject( $actual, $message . ' Passed $actual is not an object.' );
 		$this->assertIsArray( $fields, $message . ' Passed $fields is not an array.' );
 		$this->assertNotEmpty( $fields, $message . ' Fields array is empty.' );
 
 		foreach ( $fields as $field_name => $field_value ) {
-			$this->assertObjectHasAttribute( $field_name, $object, $message . " Property $field_name does not exist on the object." );
-			$this->assertSame( $field_value, $object->$field_name, $message . " Value of property $field_name is not $field_value." );
+			$this->assertObjectHasAttribute( $field_name, $actual, $message . " Property $field_name does not exist on the object." );
+			$this->assertSame( $field_value, $actual->$field_name, $message . " Value of property $field_name is not $field_value." );
 		}
 	}
 
@@ -1012,14 +1012,14 @@ abstract class WP_UnitTestCase_Base extends PHPUnit_Adapter_TestCase {
 	 * @since 4.8.0
 	 * @since 5.9.0 Added the `$message` parameter.
 	 *
-	 * @param array  $array   Array to check.
+	 * @param array  $actual  Array to check.
 	 * @param string $message Optional. Message to display when the assertion fails.
 	 */
-	public function assertNonEmptyMultidimensionalArray( $array, $message = '' ) {
-		$this->assertIsArray( $array, $message . ' Value under test is not an array.' );
-		$this->assertNotEmpty( $array, $message . ' Array is empty.' );
+	public function assertNonEmptyMultidimensionalArray( $actual, $message = '' ) {
+		$this->assertIsArray( $actual, $message . ' Value under test is not an array.' );
+		$this->assertNotEmpty( $actual, $message . ' Array is empty.' );
 
-		foreach ( $array as $sub_array ) {
+		foreach ( $actual as $sub_array ) {
 			$this->assertIsArray( $sub_array, $message . ' Subitem of the array is not an array.' );
 			$this->assertNotEmpty( $sub_array, $message . ' Subitem of the array is empty.' );
 		}
@@ -1349,6 +1349,8 @@ abstract class WP_UnitTestCase_Base extends PHPUnit_Adapter_TestCase {
 	 *
 	 * Does not delete files if their paths are set in the `$ignore_files` property.
 	 *
+	 * @since 4.0.0
+	 *
 	 * @param string $path Directory path.
 	 */
 	public function rmdir( $path ) {
@@ -1363,11 +1365,12 @@ abstract class WP_UnitTestCase_Base extends PHPUnit_Adapter_TestCase {
 	/**
 	 * Deletes files added to the `uploads` directory during tests.
 	 *
-	 * This method works in tandem with the `setUp()` and `rmdir()` methods:
-	 * - `setUp()` scans the `uploads` directory before every test, and stores its contents inside of the
-	 *   `$ignore_files` property.
-	 * - `rmdir()` and its helper methods only delete files that are not listed in the `$ignore_files` property. If
-	 *   called during `tearDown()` in tests, this will only delete files added during the previously run test.
+	 * This method works in tandem with the `set_up()` and `rmdir()` methods:
+	 * - `set_up()` scans the `uploads` directory before every test, and stores
+	 *   its contents inside of the `$ignore_files` property.
+	 * - `rmdir()` and its helper methods only delete files that are not listed
+	 *   in the `$ignore_files` property. If called during `tear_down()` in tests,
+	 *   this will only delete files added during the previously run test.
 	 */
 	public function remove_added_uploads() {
 		$uploads = wp_upload_dir();
@@ -1519,10 +1522,11 @@ abstract class WP_UnitTestCase_Base extends PHPUnit_Adapter_TestCase {
 	 * Creates an attachment post from an uploaded file.
 	 *
 	 * @since 4.4.0
+	 * @since 6.2.0 Returns a WP_Error object on failure.
 	 *
 	 * @param array $upload         Array of information about the uploaded file, provided by wp_upload_bits().
 	 * @param int   $parent_post_id Optional. Parent post ID.
-	 * @return int|WP_Error The attachment ID on success. The value 0 or WP_Error on failure.
+	 * @return int|WP_Error The attachment ID on success, WP_Error object on failure.
 	 */
 	public function _make_attachment( $upload, $parent_post_id = 0 ) {
 		$type = '';
@@ -1544,9 +1548,18 @@ abstract class WP_UnitTestCase_Base extends PHPUnit_Adapter_TestCase {
 			'guid'           => $upload['url'],
 		);
 
-		$id = wp_insert_attachment( $attachment, $upload['file'], $parent_post_id );
-		wp_update_attachment_metadata( $id, wp_generate_attachment_metadata( $id, $upload['file'] ) );
-		return $id;
+		$attachment_id = wp_insert_attachment( $attachment, $upload['file'], $parent_post_id, true );
+
+		if ( is_wp_error( $attachment_id ) ) {
+			return $attachment_id;
+		}
+
+		wp_update_attachment_metadata(
+			$attachment_id,
+			wp_generate_attachment_metadata( $attachment_id, $upload['file'] )
+		);
+
+		return $attachment_id;
 	}
 
 	/**
diff --git a/includes/bootstrap.php b/includes/bootstrap.php
index 9a1b234b71..1113a87eea 100644
--- a/includes/bootstrap.php
+++ b/includes/bootstrap.php
@@ -302,7 +302,7 @@ if ( isset( $GLOBALS['wp_tests_options'] ) ) {
 }
 
 // Load WordPress.
-require_once ABSPATH . '/wp-settings.php';
+require_once ABSPATH . 'wp-settings.php';
 
 // Delete any default posts & related data.
 _delete_all_posts();
diff --git a/includes/class-wp-test-stream.php b/includes/class-wp-test-stream.php
index 78ce816f69..11997507d0 100644
--- a/includes/class-wp-test-stream.php
+++ b/includes/class-wp-test-stream.php
@@ -183,7 +183,7 @@ class WP_Test_Stream {
 	 *
 	 * @see streamWrapper::stream_metadata
 	 */
-	public function stream_metadata( $path, $option, $var ) {
+	public function stream_metadata( $path, $option, $value ) {
 		$this->open( $path );
 		if ( STREAM_META_TOUCH === $option ) {
 			if ( ! isset( $this->data_ref ) ) {
diff --git a/includes/factory/class-wp-unittest-factory-callback-after-create.php b/includes/factory/class-wp-unittest-factory-callback-after-create.php
index 5f544e5569..115c950c2f 100644
--- a/includes/factory/class-wp-unittest-factory-callback-after-create.php
+++ b/includes/factory/class-wp-unittest-factory-callback-after-create.php
@@ -10,6 +10,8 @@ class WP_UnitTest_Factory_Callback_After_Create {
 	/**
 	 * WP_UnitTest_Factory_Callback_After_Create constructor.
 	 *
+	 * @since UT (3.7.0)
+	 *
 	 * @param callable $callback A callback function.
 	 */
 	public function __construct( $callback ) {
@@ -19,11 +21,13 @@ class WP_UnitTest_Factory_Callback_After_Create {
 	/**
 	 * Calls the set callback on a given object.
 	 *
-	 * @param mixed $object The object to apply the callback on.
+	 * @since UT (3.7.0)
+	 *
+	 * @param int $object_id ID of the object to apply the callback on.
 	 *
-	 * @return mixed The possibly altered object.
+	 * @return mixed Updated object field.
 	 */
-	public function call( $object ) {
-		return call_user_func( $this->callback, $object );
+	public function call( $object_id ) {
+		return call_user_func( $this->callback, $object_id );
 	}
 }
diff --git a/includes/factory/class-wp-unittest-factory-for-attachment.php b/includes/factory/class-wp-unittest-factory-for-attachment.php
index ffa5756859..262c6c4640 100644
--- a/includes/factory/class-wp-unittest-factory-for-attachment.php
+++ b/includes/factory/class-wp-unittest-factory-for-attachment.php
@@ -1,10 +1,23 @@
 <?php
 
+/**
+ * Unit test factory for attachments.
+ *
+ * Note: The below @method notations are defined solely for the benefit of IDEs,
+ * as a way to indicate expected return values from the given factory methods.
+ *
+ * @method int|WP_Error     create( $args = array(), $generation_definitions = null )
+ * @method WP_Post|WP_Error create_and_get( $args = array(), $generation_definitions = null )
+ * @method (int|WP_Error)[] create_many( $count, $args = array(), $generation_definitions = null )
+ */
 class WP_UnitTest_Factory_For_Attachment extends WP_UnitTest_Factory_For_Post {
 
 	/**
 	 * Create an attachment fixture.
 	 *
+	 * @since UT (3.7.0)
+	 * @since 6.2.0 Returns a WP_Error object on failure.
+	 *
 	 * @param array $args {
 	 *     Array of arguments. Accepts all arguments that can be passed to
 	 *     wp_insert_attachment(), in addition to the following:
@@ -14,7 +27,7 @@ class WP_UnitTest_Factory_For_Attachment extends WP_UnitTest_Factory_For_Post {
 	 * @param int   $legacy_parent Deprecated.
 	 * @param array $legacy_args   Deprecated.
 	 *
-	 * @return int|WP_Error The attachment ID on success. The value 0 or WP_Error on failure.
+	 * @return int|WP_Error The attachment ID on success, WP_Error object on failure.
 	 */
 	public function create_object( $args, $legacy_parent = 0, $legacy_args = array() ) {
 		// Backward compatibility for legacy argument format.
@@ -33,18 +46,21 @@ class WP_UnitTest_Factory_For_Attachment extends WP_UnitTest_Factory_For_Post {
 			$args
 		);
 
-		return wp_insert_attachment( $r, $r['file'], $r['post_parent'] );
+		return wp_insert_attachment( $r, $r['file'], $r['post_parent'], true );
 	}
 
 	/**
 	 * Saves an attachment.
 	 *
-	 * @param string $file   The file name to create attachment object for.
-	 * @param int    $parent ID of the post to attach the file to.
+	 * @since 4.4.0
+	 * @since 6.2.0 Returns a WP_Error object on failure.
+	 *
+	 * @param string $file           The file name to create attachment object for.
+	 * @param int    $parent_post_id ID of the post to attach the file to.
 	 *
-	 * @return int|WP_Error The attachment ID on success. The value 0 or WP_Error on failure.
+	 * @return int|WP_Error The attachment ID on success, WP_Error object on failure.
 	 */
-	public function create_upload_object( $file, $parent = 0 ) {
+	public function create_upload_object( $file, $parent_post_id = 0 ) {
 		$contents = file_get_contents( $file );
 		$upload   = wp_upload_bits( wp_basename( $file ), null, $contents );
 
@@ -62,15 +78,23 @@ class WP_UnitTest_Factory_For_Attachment extends WP_UnitTest_Factory_For_Post {
 			'post_title'     => wp_basename( $upload['file'] ),
 			'post_content'   => '',
 			'post_type'      => 'attachment',
-			'post_parent'    => $parent,
+			'post_parent'    => $parent_post_id,
 			'post_mime_type' => $type,
 			'guid'           => $upload['url'],
 		);
 
 		// Save the data.
-		$id = wp_insert_attachment( $attachment, $upload['file'], $parent );
-		wp_update_attachment_metadata( $id, wp_generate_attachment_metadata( $id, $upload['file'] ) );
+		$attachment_id = wp_insert_attachment( $attachment, $upload['file'], $parent_post_id, true );
+
+		if ( is_wp_error( $attachment_id ) ) {
+			return $attachment_id;
+		}
+
+		wp_update_attachment_metadata(
+			$attachment_id,
+			wp_generate_attachment_metadata( $attachment_id, $upload['file'] )
+		);
 
-		return $id;
+		return $attachment_id;
 	}
 }
diff --git a/includes/factory/class-wp-unittest-factory-for-blog.php b/includes/factory/class-wp-unittest-factory-for-blog.php
index aba7f0d378..39b59f7169 100644
--- a/includes/factory/class-wp-unittest-factory-for-blog.php
+++ b/includes/factory/class-wp-unittest-factory-for-blog.php
@@ -6,9 +6,9 @@
  * Note: The below @method notations are defined solely for the benefit of IDEs,
  * as a way to indicate expected return values from the given factory methods.
  *
- * @method int create( $args = array(), $generation_definitions = null )
- * @method WP_Site create_and_get( $args = array(), $generation_definitions = null )
- * @method int[] create_many( $count, $args = array(), $generation_definitions = null )
+ * @method int|WP_Error     create( $args = array(), $generation_definitions = null )
+ * @method WP_Site|WP_Error create_and_get( $args = array(), $generation_definitions = null )
+ * @method (int|WP_Error)[] create_many( $count, $args = array(), $generation_definitions = null )
  */
 class WP_UnitTest_Factory_For_Blog extends WP_UnitTest_Factory_For_Thing {
 
diff --git a/includes/factory/class-wp-unittest-factory-for-bookmark.php b/includes/factory/class-wp-unittest-factory-for-bookmark.php
index 4c18a34507..d9f8e06fbe 100644
--- a/includes/factory/class-wp-unittest-factory-for-bookmark.php
+++ b/includes/factory/class-wp-unittest-factory-for-bookmark.php
@@ -8,9 +8,9 @@
  *
  * @since 4.6.0
  *
- * @method int create( $args = array(), $generation_definitions = null )
- * @method object create_and_get( $args = array(), $generation_definitions = null )
- * @method int[] create_many( $count, $args = array(), $generation_definitions = null )
+ * @method int|WP_Error     create( $args = array(), $generation_definitions = null )
+ * @method object|WP_Error  create_and_get( $args = array(), $generation_definitions = null )
+ * @method (int|WP_Error)[] create_many( $count, $args = array(), $generation_definitions = null )
  */
 class WP_UnitTest_Factory_For_Bookmark extends WP_UnitTest_Factory_For_Thing {
 
@@ -22,15 +22,52 @@ class WP_UnitTest_Factory_For_Bookmark extends WP_UnitTest_Factory_For_Thing {
 		);
 	}
 
+	/**
+	 * Creates a link object.
+	 *
+	 * @since 4.6.0
+	 * @since 6.2.0 Returns a WP_Error object on failure.
+	 *
+	 * @param array $args Arguments for the link object.
+	 *
+	 * @return int|WP_Error The link ID on success, WP_Error object on failure.
+	 */
 	public function create_object( $args ) {
-		return wp_insert_link( $args );
+		return wp_insert_link( $args, true );
 	}
 
+	/**
+	 * Updates a link object.
+	 *
+	 * @since 4.6.0
+	 * @since 6.2.0 Returns a WP_Error object on failure.
+	 *
+	 * @param int   $link_id ID of the link to update.
+	 * @param array $fields  The fields to update.
+	 *
+	 * @return int|WP_Error The link ID on success, WP_Error object on failure.
+	 */
 	public function update_object( $link_id, $fields ) {
 		$fields['link_id'] = $link_id;
-		return wp_update_link( $fields );
+
+		$result = wp_update_link( $fields );
+
+		if ( 0 === $result ) {
+			return new WP_Error( 'link_update_error', __( 'Could not update link.' ) );
+		}
+
+		return $result;
 	}
 
+	/**
+	 * Retrieves a link by a given ID.
+	 *
+	 * @since 4.6.0
+	 *
+	 * @param int $link_id ID of the link to retrieve.
+	 *
+	 * @return object|null The link object on success, null on failure.
+	 */
 	public function get_object_by_id( $link_id ) {
 		return get_bookmark( $link_id );
 	}
diff --git a/includes/factory/class-wp-unittest-factory-for-comment.php b/includes/factory/class-wp-unittest-factory-for-comment.php
index 17f37437ce..194a8bf6ec 100644
--- a/includes/factory/class-wp-unittest-factory-for-comment.php
+++ b/includes/factory/class-wp-unittest-factory-for-comment.php
@@ -6,9 +6,9 @@
  * Note: The below @method notations are defined solely for the benefit of IDEs,
  * as a way to indicate expected return values from the given factory methods.
  *
- * @method int create( $args = array(), $generation_definitions = null )
- * @method WP_Comment create_and_get( $args = array(), $generation_definitions = null )
- * @method int[] create_many( $count, $args = array(), $generation_definitions = null )
+ * @method int|WP_Error        create( $args = array(), $generation_definitions = null )
+ * @method WP_Comment|WP_Error create_and_get( $args = array(), $generation_definitions = null )
+ * @method (int|WP_Error)[]    create_many( $count, $args = array(), $generation_definitions = null )
  */
 class WP_UnitTest_Factory_For_Comment extends WP_UnitTest_Factory_For_Thing {
 
@@ -25,30 +25,53 @@ class WP_UnitTest_Factory_For_Comment extends WP_UnitTest_Factory_For_Thing {
 	/**
 	 * Inserts a comment.
 	 *
+	 * @since UT (3.7.0)
+	 * @since 6.2.0 Returns a WP_Error object on failure.
+	 *
+	 * @global wpdb $wpdb WordPress database abstraction object.
+	 *
 	 * @param array $args The comment details.
 	 *
-	 * @return int|false The comment's ID on success, false on failure.
+	 * @return int|WP_Error The comment ID on success, WP_Error object on failure.
 	 */
 	public function create_object( $args ) {
-		return wp_insert_comment( $this->addslashes_deep( $args ) );
+		global $wpdb;
+
+		$comment_id = wp_insert_comment( $this->addslashes_deep( $args ) );
+
+		if ( false === $comment_id ) {
+			return new WP_Error(
+				'db_insert_error',
+				__( 'Could not insert comment into the database.' ),
+				$wpdb->last_error
+			);
+		}
+
+		return $comment_id;
 	}
 
 	/**
 	 * Updates a comment.
 	 *
+	 * @since UT (3.7.0)
+	 * @since 6.2.0 Returns a WP_Error object on failure.
+	 *
 	 * @param int   $comment_id The comment ID.
 	 * @param array $fields     The comment details.
 	 *
-	 * @return int The value 1 if the comment was updated, 0 if not updated.
+	 * @return int|WP_Error The value 1 if the comment was updated, 0 if not updated.
+	 *                      WP_Error object on failure.
 	 */
 	public function update_object( $comment_id, $fields ) {
 		$fields['comment_ID'] = $comment_id;
-		return wp_update_comment( $this->addslashes_deep( $fields ) );
+		return wp_update_comment( $this->addslashes_deep( $fields ), true );
 	}
 
 	/**
 	 * Creates multiple comments on a given post.
 	 *
+	 * @since UT (3.7.0)
+	 *
 	 * @param int   $post_id                ID of the post to create comments for.
 	 * @param int   $count                  Total amount of comments to create.
 	 * @param array $args                   The comment details.
@@ -64,6 +87,8 @@ class WP_UnitTest_Factory_For_Comment extends WP_UnitTest_Factory_For_Thing {
 	/**
 	 * Retrieves a comment by a given ID.
 	 *
+	 * @since UT (3.7.0)
+	 *
 	 * @param int $comment_id ID of the comment to retrieve.
 	 *
 	 * @return WP_Comment|null WP_Comment object on success, null on failure.
diff --git a/includes/factory/class-wp-unittest-factory-for-network.php b/includes/factory/class-wp-unittest-factory-for-network.php
index b6d3ece393..a578bddb6a 100644
--- a/includes/factory/class-wp-unittest-factory-for-network.php
+++ b/includes/factory/class-wp-unittest-factory-for-network.php
@@ -6,9 +6,9 @@
  * Note: The below @method notations are defined solely for the benefit of IDEs,
  * as a way to indicate expected return values from the given factory methods.
  *
- * @method int create( $args = array(), $generation_definitions = null )
- * @method WP_Network create_and_get( $args = array(), $generation_definitions = null )
- * @method int[] create_many( $count, $args = array(), $generation_definitions = null )
+ * @method int|WP_Error        create( $args = array(), $generation_definitions = null )
+ * @method WP_Network|WP_Error create_and_get( $args = array(), $generation_definitions = null )
+ * @method (int|WP_Error)[]    create_many( $count, $args = array(), $generation_definitions = null )
  */
 class WP_UnitTest_Factory_For_Network extends WP_UnitTest_Factory_For_Thing {
 
@@ -23,6 +23,16 @@ class WP_UnitTest_Factory_For_Network extends WP_UnitTest_Factory_For_Thing {
 		);
 	}
 
+	/**
+	 * Creates a network object.
+	 *
+	 * @since 3.9.0
+	 * @since 6.2.0 Returns a WP_Error object on failure.
+	 *
+	 * @param array $args Arguments for the network object.
+	 *
+	 * @return int|WP_Error The network ID on success, WP_Error object on failure.
+	 */
 	public function create_object( $args ) {
 		require_once ABSPATH . 'wp-admin/includes/upgrade.php';
 
@@ -32,12 +42,43 @@ class WP_UnitTest_Factory_For_Network extends WP_UnitTest_Factory_For_Thing {
 			$email = get_userdata( $args['user'] )->user_email;
 		}
 
-		populate_network( $args['network_id'], $args['domain'], $email, $args['title'], $args['path'], $args['subdomain_install'] );
+		$result = populate_network(
+			$args['network_id'],
+			$args['domain'],
+			$email,
+			$args['title'],
+			$args['path'],
+			$args['subdomain_install']
+		);
+
+		if ( is_wp_error( $result ) ) {
+			return $result;
+		}
+
 		return (int) $args['network_id'];
 	}
 
+	/**
+	 * Updates a network object. Not implemented.
+	 *
+	 * @since 3.9.0
+	 *
+	 * @param int   $network_id ID of the network to update.
+	 * @param array $fields  The fields to update.
+	 *
+	 * @return void
+	 */
 	public function update_object( $network_id, $fields ) {}
 
+	/**
+	 * Retrieves a network by a given ID.
+	 *
+	 * @since 3.9.0
+	 *
+	 * @param int $network_id ID of the network to retrieve.
+	 *
+	 * @return WP_Network|null The network object on success, null on failure.
+	 */
 	public function get_object_by_id( $network_id ) {
 		return get_network( $network_id );
 	}
diff --git a/includes/factory/class-wp-unittest-factory-for-post.php b/includes/factory/class-wp-unittest-factory-for-post.php
index 312fd90dc8..16fdf04166 100644
--- a/includes/factory/class-wp-unittest-factory-for-post.php
+++ b/includes/factory/class-wp-unittest-factory-for-post.php
@@ -6,9 +6,9 @@
  * Note: The below @method notations are defined solely for the benefit of IDEs,
  * as a way to indicate expected return values from the given factory methods.
  *
- * @method int create( $args = array(), $generation_definitions = null )
- * @method WP_Post create_and_get( $args = array(), $generation_definitions = null )
- * @method int[] create_many( $count, $args = array(), $generation_definitions = null )
+ * @method int|WP_Error     create( $args = array(), $generation_definitions = null )
+ * @method WP_Post|WP_Error create_and_get( $args = array(), $generation_definitions = null )
+ * @method (int|WP_Error)[] create_many( $count, $args = array(), $generation_definitions = null )
  */
 class WP_UnitTest_Factory_For_Post extends WP_UnitTest_Factory_For_Thing {
 
@@ -26,30 +26,38 @@ class WP_UnitTest_Factory_For_Post extends WP_UnitTest_Factory_For_Thing {
 	/**
 	 * Creates a post object.
 	 *
+	 * @since UT (3.7.0)
+	 * @since 6.2.0 Returns a WP_Error object on failure.
+	 *
 	 * @param array $args Array with elements for the post.
 	 *
-	 * @return int The post ID on success. The value 0 on failure.
+	 * @return int|WP_Error The post ID on success, WP_Error object on failure.
 	 */
 	public function create_object( $args ) {
-		return wp_insert_post( $args );
+		return wp_insert_post( $args, true );
 	}
 
 	/**
 	 * Updates an existing post object.
 	 *
+	 * @since UT (3.7.0)
+	 * @since 6.2.0 Returns a WP_Error object on failure.
+	 *
 	 * @param int   $post_id ID of the post to update.
 	 * @param array $fields  Post data.
 	 *
-	 * @return int The post ID on success. The value 0 on failure.
+	 * @return int|WP_Error The post ID on success, WP_Error object on failure.
 	 */
 	public function update_object( $post_id, $fields ) {
 		$fields['ID'] = $post_id;
-		return wp_update_post( $fields );
+		return wp_update_post( $fields, true );
 	}
 
 	/**
 	 * Retrieves a post by a given ID.
 	 *
+	 * @since UT (3.7.0)
+	 *
 	 * @param int $post_id ID of the post to retrieve.
 	 *
 	 * @return WP_Post|null WP_Post object on success, null on failure.
diff --git a/includes/factory/class-wp-unittest-factory-for-term.php b/includes/factory/class-wp-unittest-factory-for-term.php
index 1d4a5cba9c..ee082b3f97 100644
--- a/includes/factory/class-wp-unittest-factory-for-term.php
+++ b/includes/factory/class-wp-unittest-factory-for-term.php
@@ -6,9 +6,9 @@
  * Note: The below @method notations are defined solely for the benefit of IDEs,
  * as a way to indicate expected return values from the given factory methods.
  *
- * @method int create( $args = array(), $generation_definitions = null )
- * @method WP_Term create_and_get( $args = array(), $generation_definitions = null )
- * @method int[] create_many( $count, $args = array(), $generation_definitions = null )
+ * @method int|WP_Error          create( $args = array(), $generation_definitions = null )
+ * @method WP_Term|WP_Error|null create_and_get( $args = array(), $generation_definitions = null )
+ * @method (int|WP_Error)[]      create_many( $count, $args = array(), $generation_definitions = null )
  */
 class WP_UnitTest_Factory_For_Term extends WP_UnitTest_Factory_For_Thing {
 
@@ -28,39 +28,55 @@ class WP_UnitTest_Factory_For_Term extends WP_UnitTest_Factory_For_Thing {
 	/**
 	 * Creates a term object.
 	 *
-	 * @param array $args Array or string of arguments for inserting a term.
+	 * @since UT (3.7.0)
 	 *
-	 * @return array|WP_Error
+	 * @param array $args Array of arguments for inserting a term.
+	 *
+	 * @return int|WP_Error The term ID on success, WP_Error object on failure.
 	 */
 	public function create_object( $args ) {
 		$args         = array_merge( array( 'taxonomy' => $this->taxonomy ), $args );
 		$term_id_pair = wp_insert_term( $args['name'], $args['taxonomy'], $args );
+
 		if ( is_wp_error( $term_id_pair ) ) {
 			return $term_id_pair;
 		}
+
 		return $term_id_pair['term_id'];
 	}
 
 	/**
 	 * Updates the term.
 	 *
-	 * @param int|object   $term   The term to update.
-	 * @param array|string $fields The context in which to relate the term to the object.
+	 * @since UT (3.7.0)
+	 * @since 6.2.0 Returns a WP_Error object on failure.
+	 *
+	 * @param int|object $term   The term to update.
+	 * @param array      $fields Array of arguments for updating a term.
 	 *
-	 * @return int The term ID.
+	 * @return int|WP_Error The term ID on success, WP_Error object on failure.
 	 */
 	public function update_object( $term, $fields ) {
 		$fields = array_merge( array( 'taxonomy' => $this->taxonomy ), $fields );
+
 		if ( is_object( $term ) ) {
 			$taxonomy = $term->taxonomy;
 		}
+
 		$term_id_pair = wp_update_term( $term, $taxonomy, $fields );
+
+		if ( is_wp_error( $term_id_pair ) ) {
+			return $term_id_pair;
+		}
+
 		return $term_id_pair['term_id'];
 	}
 
 	/**
 	 * Attach terms to the given post.
 	 *
+	 * @since UT (3.7.0)
+	 *
 	 * @param int          $post_id  The post ID.
 	 * @param string|array $terms    An array of terms to set for the post, or a string of terms
 	 *                               separated by commas. Hierarchical taxonomies must always pass IDs rather
@@ -79,6 +95,8 @@ class WP_UnitTest_Factory_For_Term extends WP_UnitTest_Factory_For_Thing {
 	/**
 	 * Create a term and returns it as an object.
 	 *
+	 * @since 4.3.0
+	 *
 	 * @param array $args                   Array or string of arguments for inserting a term.
 	 * @param null  $generation_definitions The default values.
 	 *
@@ -92,12 +110,15 @@ class WP_UnitTest_Factory_For_Term extends WP_UnitTest_Factory_For_Thing {
 		}
 
 		$taxonomy = isset( $args['taxonomy'] ) ? $args['taxonomy'] : $this->taxonomy;
+
 		return get_term( $term_id, $taxonomy );
 	}
 
 	/**
 	 * Retrieves the term by a given ID.
 	 *
+	 * @since UT (3.7.0)
+	 *
 	 * @param int $term_id ID of the term to retrieve.
 	 *
 	 * @return WP_Term|WP_Error|null WP_Term on success. WP_Error if taxonomy does not exist. Null for miscellaneous failure.
diff --git a/includes/factory/class-wp-unittest-factory-for-thing.php b/includes/factory/class-wp-unittest-factory-for-thing.php
index d996213f45..ebdb450163 100644
--- a/includes/factory/class-wp-unittest-factory-for-thing.php
+++ b/includes/factory/class-wp-unittest-factory-for-thing.php
@@ -9,12 +9,19 @@ abstract class WP_UnitTest_Factory_For_Thing {
 	public $factory;
 
 	/**
-	 * Creates a new factory, which will create objects of a specific Thing
-	 *
-	 * @param object $factory Global factory that can be used to create other objects on the system
-	 * @param array $default_generation_definitions Defines what default values should the properties of the object have. The default values
-	 * can be generators -- an object with next() method. There are some default generators: {@link WP_UnitTest_Generator_Sequence},
-	 * {@link WP_UnitTest_Generator_Locale_Name}, {@link WP_UnitTest_Factory_Callback_After_Create}.
+	 * Creates a new factory, which will create objects of a specific Thing.
+	 *
+	 * @since UT (3.7.0)
+	 *
+	 * @param object $factory                       Global factory that can be used to create other objects
+	 *                                              on the system.
+	 * @param array $default_generation_definitions Defines what default values should the properties
+	 *                                              of the object have. The default values can be generators --
+	 *                                              an object with the next() method.
+	 *                                              There are some default generators:
+	 *                                               - {@link WP_UnitTest_Generator_Sequence}
+	 *                                               - {@link WP_UnitTest_Generator_Locale_Name}
+	 *                                               - {@link WP_UnitTest_Factory_Callback_After_Create}
 	 */
 	public function __construct( $factory, $default_generation_definitions = array() ) {
 		$this->factory                        = $factory;
@@ -22,31 +29,39 @@ abstract class WP_UnitTest_Factory_For_Thing {
 	}
 
 	/**
-	 * Creates an object.
+	 * Creates an object and returns its ID.
+	 *
+	 * @since UT (3.7.0)
 	 *
 	 * @param array $args The arguments.
 	 *
-	 * @return mixed The result. Can be anything.
+	 * @return int|WP_Error The object ID on success, WP_Error object on failure.
 	 */
 	abstract public function create_object( $args );
 
 	/**
 	 * Updates an existing object.
 	 *
-	 * @param int   $object The object ID.
-	 * @param array $fields The values to update.
+	 * @since UT (3.7.0)
+	 *
+	 * @param int   $object_id The object ID.
+	 * @param array $fields    The values to update.
 	 *
-	 * @return mixed The result. Can be anything.
+	 * @return int|WP_Error The object ID on success, WP_Error object on failure.
 	 */
-	abstract public function update_object( $object, $fields );
+	abstract public function update_object( $object_id, $fields );
 
 	/**
-	 * Creates an object.
+	 * Creates an object and returns its ID.
 	 *
-	 * @param array $args                   Optional. The arguments for the object to create. Default is empty array.
-	 * @param null  $generation_definitions Optional. The default values for the object. Default is null.
+	 * @since UT (3.7.0)
 	 *
-	 * @return mixed The result. Can be anything.
+	 * @param array $args                   Optional. The arguments for the object to create.
+	 *                                      Default empty array.
+	 * @param null  $generation_definitions Optional. The default values for the object.
+	 *                                      Default null.
+	 *
+	 * @return int|WP_Error The object ID on success, WP_Error object on failure.
 	 */
 	public function create( $args = array(), $generation_definitions = null ) {
 		if ( is_null( $generation_definitions ) ) {
@@ -54,28 +69,35 @@ abstract class WP_UnitTest_Factory_For_Thing {
 		}
 
 		$generated_args = $this->generate_args( $args, $generation_definitions, $callbacks );
-		$created        = $this->create_object( $generated_args );
-		if ( ! $created || is_wp_error( $created ) ) {
-			return $created;
+		$object_id      = $this->create_object( $generated_args );
+
+		if ( ! $object_id || is_wp_error( $object_id ) ) {
+			return $object_id;
 		}
 
 		if ( $callbacks ) {
-			$updated_fields = $this->apply_callbacks( $callbacks, $created );
-			$save_result    = $this->update_object( $created, $updated_fields );
+			$updated_fields = $this->apply_callbacks( $callbacks, $object_id );
+			$save_result    = $this->update_object( $object_id, $updated_fields );
+
 			if ( ! $save_result || is_wp_error( $save_result ) ) {
 				return $save_result;
 			}
 		}
-		return $created;
+
+		return $object_id;
 	}
 
 	/**
-	 * Creates an object and returns its object.
+	 * Creates and returns an object.
+	 *
+	 * @since UT (3.7.0)
 	 *
-	 * @param array $args                   Optional. The arguments for the object to create. Default is empty array.
-	 * @param null  $generation_definitions Optional. The default values for the object. Default is null.
+	 * @param array $args                   Optional. The arguments for the object to create.
+	 *                                      Default empty array.
+	 * @param null  $generation_definitions Optional. The default values for the object.
+	 *                                      Default null.
 	 *
-	 * @return mixed The created object. Can be anything.
+	 * @return mixed The created object. Can be anything. WP_Error object on failure.
 	 */
 	public function create_and_get( $args = array(), $generation_definitions = null ) {
 		$object_id = $this->create( $args, $generation_definitions );
@@ -90,6 +112,8 @@ abstract class WP_UnitTest_Factory_For_Thing {
 	/**
 	 * Retrieves an object by ID.
 	 *
+	 * @since UT (3.7.0)
+	 *
 	 * @param int $object_id The object ID.
 	 *
 	 * @return mixed The object. Can be anything.
@@ -99,17 +123,23 @@ abstract class WP_UnitTest_Factory_For_Thing {
 	/**
 	 * Creates multiple objects.
 	 *
+	 * @since UT (3.7.0)
+	 *
 	 * @param int   $count                  Amount of objects to create.
-	 * @param array $args                   Optional. The arguments for the object to create. Default is empty array.
-	 * @param null  $generation_definitions Optional. The default values for the object. Default is null.
+	 * @param array $args                   Optional. The arguments for the object to create.
+	 *                                      Default empty array.
+	 * @param null  $generation_definitions Optional. The default values for the object.
+	 *                                      Default null.
 	 *
 	 * @return array
 	 */
 	public function create_many( $count, $args = array(), $generation_definitions = null ) {
 		$results = array();
+
 		for ( $i = 0; $i < $count; $i++ ) {
 			$results[] = $this->create( $args, $generation_definitions );
 		}
+
 		return $results;
 	}
 
@@ -117,9 +147,13 @@ abstract class WP_UnitTest_Factory_For_Thing {
 	 * Combines the given arguments with the generation_definitions (defaults) and applies
 	 * possibly set callbacks on it.
 	 *
-	 * @param array       $args                   Optional. The arguments to combine with defaults. Default is empty array.
-	 * @param array|null  $generation_definitions Optional. The defaults. Default is null.
-	 * @param array|null  $callbacks              Optional. Array with callbacks to apply on the fields. Default is null.
+	 * @since UT (3.7.0)
+	 *
+	 * @param array       $args                   Optional. The arguments to combine with defaults.
+	 *                                            Default empty array.
+	 * @param array|null  $generation_definitions Optional. The defaults. Default null.
+	 * @param array|null  $callbacks              Optional. Array with callbacks to apply on the fields.
+	 *                                            Default null.
 	 *
 	 * @return array|WP_Error Combined array on success. WP_Error when default value is incorrent.
 	 */
@@ -144,7 +178,10 @@ abstract class WP_UnitTest_Factory_For_Thing {
 				} elseif ( is_object( $generator ) ) {
 					$args[ $field_name ] = sprintf( $generator->get_template_string(), $incr );
 				} else {
-					return new WP_Error( 'invalid_argument', 'Factory default value should be either a scalar or an generator object.' );
+					return new WP_Error(
+						'invalid_argument',
+						'Factory default value should be either a scalar or an generator object.'
+					);
 				}
 			}
 		}
@@ -156,34 +193,41 @@ abstract class WP_UnitTest_Factory_For_Thing {
 	/**
 	 * Applies the callbacks on the created object.
 	 *
+	 * @since UT (3.7.0)
+	 *
 	 * @param WP_UnitTest_Factory_Callback_After_Create[] $callbacks Array with callback functions.
-	 * @param mixed                                       $created   The object to apply callbacks for.
+	 * @param int                                         $object_id ID of the object to apply callbacks for.
 	 *
 	 * @return array The altered fields.
 	 */
-	public function apply_callbacks( $callbacks, $created ) {
+	public function apply_callbacks( $callbacks, $object_id ) {
 		$updated_fields = array();
 
 		foreach ( $callbacks as $field_name => $generator ) {
-			$updated_fields[ $field_name ] = $generator->call( $created );
+			$updated_fields[ $field_name ] = $generator->call( $object_id );
 		}
+
 		return $updated_fields;
 	}
 
 	/**
-	 * Instantiates a callback objects for the given function name.
+	 * Instantiates a callback object for the given function name.
 	 *
-	 * @param string $function The callback function.
+	 * @since UT (3.7.0)
+	 *
+	 * @param callable $callback The callback function.
 	 *
 	 * @return WP_UnitTest_Factory_Callback_After_Create
 	 */
-	public function callback( $function ) {
-		return new WP_UnitTest_Factory_Callback_After_Create( $function );
+	public function callback( $callback ) {
+		return new WP_UnitTest_Factory_Callback_After_Create( $callback );
 	}
 
 	/**
 	 * Adds slashes to the given value.
 	 *
+	 * @since UT (3.7.0)
+	 *
 	 * @param array|object|string|mixed $value The value to add slashes to.
 	 *
 	 * @return array|string The value with the possibly applied slashes.
diff --git a/includes/factory/class-wp-unittest-factory-for-user.php b/includes/factory/class-wp-unittest-factory-for-user.php
index 966eed8021..5bdc8312fc 100644
--- a/includes/factory/class-wp-unittest-factory-for-user.php
+++ b/includes/factory/class-wp-unittest-factory-for-user.php
@@ -6,9 +6,9 @@
  * Note: The below @method notations are defined solely for the benefit of IDEs,
  * as a way to indicate expected return values from the given factory methods.
  *
- * @method int create( $args = array(), $generation_definitions = null )
- * @method WP_User create_and_get( $args = array(), $generation_definitions = null )
- * @method int[] create_many( $count, $args = array(), $generation_definitions = null )
+ * @method int|WP_Error     create( $args = array(), $generation_definitions = null )
+ * @method WP_User|WP_Error create_and_get( $args = array(), $generation_definitions = null )
+ * @method (int|WP_Error)[] create_many( $count, $args = array(), $generation_definitions = null )
  */
 class WP_UnitTest_Factory_For_User extends WP_UnitTest_Factory_For_Thing {
 
@@ -24,6 +24,8 @@ class WP_UnitTest_Factory_For_User extends WP_UnitTest_Factory_For_Thing {
 	/**
 	 * Inserts an user.
 	 *
+	 * @since UT (3.7.0)
+	 *
 	 * @param array $args The user data to insert.
 	 *
 	 * @return int|WP_Error The user ID on success, WP_Error object on failure.
@@ -35,6 +37,8 @@ class WP_UnitTest_Factory_For_User extends WP_UnitTest_Factory_For_Thing {
 	/**
 	 * Updates the user data.
 	 *
+	 * @since UT (3.7.0)
+	 *
 	 * @param int   $user_id ID of the user to update.
 	 * @param array $fields  The user data to update.
 	 *
@@ -48,6 +52,8 @@ class WP_UnitTest_Factory_For_User extends WP_UnitTest_Factory_For_Thing {
 	/**
 	 * Retrieves the user for a given ID.
 	 *
+	 * @since UT (3.7.0)
+	 *
 	 * @param int $user_id ID of the user ID to retrieve.
 	 *
 	 * @return WP_User The user object.
diff --git a/includes/functions.php b/includes/functions.php
index 3845f930a5..0c9dbd019f 100644
--- a/includes/functions.php
+++ b/includes/functions.php
@@ -37,63 +37,70 @@ function tests_reset__SERVER() { // phpcs:ignore WordPress.NamingConventions.Val
 /**
  * Adds hooks before loading WP.
  *
+ * @since UT (3.7.0)
+ *
  * @see add_filter()
+ * @global WP_Hook[] $wp_filter A multidimensional array of all hooks and the callbacks hooked to them.
  *
- * @param string   $tag             The name of the filter to hook the $function_to_add callback to.
- * @param callable $function_to_add The callback to be run when the filter is applied.
- * @param int      $priority        Optional. Used to specify the order in which the functions
- *                                  associated with a particular action are executed.
- *                                  Lower numbers correspond with earlier execution,
- *                                  and functions with the same priority are executed
- *                                  in the order in which they were added to the action. Default 10.
- * @param int      $accepted_args   Optional. The number of arguments the function accepts. Default 1.
- * @return true
+ * @param string   $hook_name     The name of the filter to add the callback to.
+ * @param callable $callback      The callback to be run when the filter is applied.
+ * @param int      $priority      Optional. Used to specify the order in which the functions
+ *                                associated with a particular action are executed.
+ *                                Lower numbers correspond with earlier execution,
+ *                                and functions with the same priority are executed
+ *                                in the order in which they were added to the action. Default 10.
+ * @param int      $accepted_args Optional. The number of arguments the function accepts. Default 1.
+ * @return true Always returns true.
  */
-function tests_add_filter( $tag, $function_to_add, $priority = 10, $accepted_args = 1 ) {
+function tests_add_filter( $hook_name, $callback, $priority = 10, $accepted_args = 1 ) {
 	global $wp_filter;
 
 	if ( function_exists( 'add_filter' ) ) {
-		add_filter( $tag, $function_to_add, $priority, $accepted_args );
+		add_filter( $hook_name, $callback, $priority, $accepted_args );
 	} else {
-		$idx = _test_filter_build_unique_id( $tag, $function_to_add, $priority );
+		$idx = _test_filter_build_unique_id( $hook_name, $callback, $priority );
 
-		$wp_filter[ $tag ][ $priority ][ $idx ] = array(
-			'function'      => $function_to_add,
+		$wp_filter[ $hook_name ][ $priority ][ $idx ] = array(
+			'function'      => $callback,
 			'accepted_args' => $accepted_args,
 		);
 	}
+
 	return true;
 }
 
 /**
  * Generates a unique function ID based on the given arguments.
  *
+ * @since UT (3.7.0)
+ *
  * @see _wp_filter_build_unique_id()
  *
- * @param string   $tag      Unused. The name of the filter to build ID for.
- * @param callable $function The function to generate ID for.
- * @param int      $priority Unused. The order in which the functions
- *                           associated with a particular action are executed.
+ * @param string                $hook_name Unused. The name of the filter to build ID for.
+ * @param callable|string|array $callback  The callback to generate ID for. The callback may
+ *                                         or may not exist.
+ * @param int                   $priority  Unused. The order in which the functions
+ *                                         associated with a particular action are executed.
  * @return string Unique function ID for usage as array key.
  */
-function _test_filter_build_unique_id( $tag, $function, $priority ) {
-	if ( is_string( $function ) ) {
-		return $function;
+function _test_filter_build_unique_id( $hook_name, $callback, $priority ) {
+	if ( is_string( $callback ) ) {
+		return $callback;
 	}
 
-	if ( is_object( $function ) ) {
+	if ( is_object( $callback ) ) {
 		// Closures are currently implemented as objects.
-		$function = array( $function, '' );
+		$callback = array( $callback, '' );
 	} else {
-		$function = (array) $function;
+		$callback = (array) $callback;
 	}
 
-	if ( is_object( $function[0] ) ) {
+	if ( is_object( $callback[0] ) ) {
 		// Object class calling.
-		return spl_object_hash( $function[0] ) . $function[1];
-	} elseif ( is_string( $function[0] ) ) {
+		return spl_object_hash( $callback[0] ) . $callback[1];
+	} elseif ( is_string( $callback[0] ) ) {
 		// Static calling.
-		return $function[0] . '::' . $function[1];
+		return $callback[0] . '::' . $callback[1];
 	}
 }
 
diff --git a/includes/install.php b/includes/install.php
index 1357b4d5fe..3157fd9384 100644
--- a/includes/install.php
+++ b/includes/install.php
@@ -37,10 +37,10 @@ $_SERVER['PHP_SELF'] = '/index.php';
 
 tests_add_filter( 'wp_die_handler', '_wp_die_handler_filter_exit' );
 
-require_once ABSPATH . '/wp-settings.php';
+require_once ABSPATH . 'wp-settings.php';
 
-require_once ABSPATH . '/wp-admin/includes/upgrade.php';
-require_once ABSPATH . '/wp-includes/class-wpdb.php';
+require_once ABSPATH . 'wp-admin/includes/upgrade.php';
+require_once ABSPATH . 'wp-includes/class-wpdb.php';
 
 // Override the PHPMailer.
 global $phpmailer;
diff --git a/includes/object-cache.php b/includes/object-cache.php
index f07460c24f..c9e51e6d4b 100644
--- a/includes/object-cache.php
+++ b/includes/object-cache.php
@@ -40,6 +40,21 @@ function wp_cache_add_by_key( $server_key, $key, $value, $group = '', $expiratio
 	return $wp_object_cache->addByKey( $server_key, $key, $value, $group, $expiration );
 }
 
+/**
+ * Adds multiple values to the cache in one call, if the cache keys don't already exist.
+ *
+ * @param array  $items      Array of keys and values to be added.
+ * @param string $group      Optional. Where the cache contents are grouped. Default empty.
+ * @param int    $expiration Optional. When to expire the cache contents, in seconds.
+ *                           Default 0 (no expiration).
+ * @return bool[] Array of return values, grouped by key. Each value is either
+ *                true on success, or false if cache key and group already exist.
+ */
+function wp_cache_add_multiple( array $items, $group = '', $expiration = 0 ) {
+	global $wp_object_cache;
+	return $wp_object_cache->addMultiple( $items, $group, $expiration );
+}
+
 /**
  * Adds a single server to the list of Memcached servers.
  *
@@ -247,6 +262,19 @@ function wp_cache_delete_by_key( $server_key, $key, $group = '', $time = 0 ) {
 	return $wp_object_cache->deleteByKey( $server_key, $key, $group, $time );
 }
 
+/**
+ * Deletes multiple values from the cache in one call.
+ *
+ * @param array  $keys  Array of keys under which the cache to deleted.
+ * @param string $group Optional. Where the cache contents are grouped. Default empty.
+ * @return bool[] Array of return values, grouped by key. Each value is either
+ *                true on success, or false if the contents were not deleted.
+ */
+function wp_cache_delete_multiple( array $keys, $group = '' ) {
+	global $wp_object_cache;
+	return $wp_object_cache->deleteMultiple( $keys, $group );
+}
+
 /**
  * Fetches the next result.
  *
@@ -285,14 +313,22 @@ function wp_cache_flush( $delay = 0 ) {
 }
 
 /**
- * Whether the object cache implementation supports flushing individual cache groups.
+ * Determines whether the object cache implementation supports a particular feature.
  *
  * @since 6.1.0
  *
- * @return bool True if group flushing is supported, false otherwise.
+ * @param string $feature Name of the feature to check for. Possible values include:
+ *                        'add_multiple', 'set_multiple', 'get_multiple', 'delete_multiple',
+ *                        'flush_runtime', 'flush_group'.
+ * @return bool True if the feature is supported, false otherwise.
  */
-function wp_cache_supports_group_flush() {
-	return false;
+function wp_cache_supports( $feature ) {
+	switch ( $feature ) {
+		case 'get_multiple':
+			return true;
+		default:
+			return false;
+	}
 }
 
 /**
@@ -439,6 +475,25 @@ function wp_cache_get_multi_by_key( $server_key, $keys, $groups = '', &$cas_toke
 	}
 }
 
+/**
+ * Retrieves multiple values from the cache in one call.
+ *
+ * @param array  $keys  Array of keys under which the cache contents are stored.
+ * @param string $group Optional. Where the cache contents are grouped. Default empty.
+ * @param bool   $force Optional. Whether to force an update of the local cache
+ *                      from the persistent cache. Default false.
+ * @return array Array of return values, grouped by key. Each value is either
+ *               the cache contents on success, or false on failure.
+ */
+function wp_cache_get_multiple( $keys, $group = '', $force = false ) {
+	global $wp_object_cache;
+
+	// Prime multiple keys in a single Memcached call.
+	$wp_object_cache->getMulti( $keys, $group );
+
+	return $wp_object_cache->getMultiple( $keys, $group, $force );
+}
+
 /**
  * Retrieves a Memcached option value.
  *
@@ -719,6 +774,23 @@ function wp_cache_set_multi_by_key( $server_key, $items, $groups = 'default', $e
 	return $wp_object_cache->setMultiByKey( $server_key, $items, $groups, $expiration );
 }
 
+/**
+ * Sets multiple values to the cache in one call.
+ *
+ * Differs from wp_cache_add_multiple() in that it will always write data.
+ *
+ * @param array  $items      Array of keys and values to be set.
+ * @param string $group      Optional. Where the cache contents are grouped. Default empty.
+ * @param int    $expiration Optional. When to expire the cache contents, in seconds.
+ *                           Default 0 (no expiration).
+ * @return bool[] Array of return values, grouped by key. Each value is either
+ *                true on success, or false on failure.
+ */
+function wp_cache_set_multiple( array $items, $group = '', $expiration = 0 ) {
+	global $wp_object_cache;
+	return $wp_object_cache->setMultiple( $items, $group, $expiration );
+}
+
 /**
  * Sets a Memcached option.
  *
@@ -956,6 +1028,26 @@ class WP_Object_Cache {
 		return $this->add( $key, $value, $group, $expiration, $server_key, true );
 	}
 
+	/**
+	 * Adds multiple values to cache.
+	 *
+	 * @param array  $items      Array of keys and values to be added.
+	 * @param string $group      Optional. Where the cache contents are grouped. Default empty.
+	 * @param int    $expiration Optional. When to expire the cache contents, in seconds.
+	 *                           Default 0 (no expiration).
+	 * @return bool[] Array of return values, grouped by key. Each value is either
+	 *                true on success, or false if cache key and group already exist.
+	 */
+	public function addMultiple( array $items, $group = '', $expiration = 0 ) {
+		$values = array();
+
+		foreach ( $items as $key => $value ) {
+			$values[ $key ] = $this->add( $key, $value, $group, $expiration );
+		}
+
+		return $values;
+	}
+
 	/**
 	 * Adds a single server to the list of Memcached servers.
 	 *
@@ -1259,6 +1351,24 @@ class WP_Object_Cache {
 		return $this->delete( $key, $group, $time, $server_key, true );
 	}
 
+	/**
+	 * Removes multiple items from the cache.
+	 *
+	 * @param array  $keys  Array of keys under which the cache to deleted.
+	 * @param string $group Optional. Where the cache contents are grouped. Default empty.
+	 * @return bool[] Array of return values, grouped by key. Each value is either
+	 *                true on success, or false if the contents were not deleted.
+	 */
+	public function deleteMultiple( $keys, $group ) {
+		$values = array();
+
+		foreach ( $keys as $key ) {
+			$values[ $key ] = $this->delete( $key, $group );
+		}
+
+		return $values;
+	}
+
 	/**
 	 * Fetches the next result.
 	 *
@@ -1536,6 +1646,28 @@ class WP_Object_Cache {
 		}
 	}
 
+	/**
+	 * Get multiple items from the cache.
+	 *
+	 * @param array  $keys  Array of keys under which the cache contents are stored.
+	 * @param string $group Optional. Where the cache contents are grouped. Default empty.
+	 * @param bool   $force Optional. Whether to force an update of the local cache
+	 *                      from the persistent cache. Default false.
+	 * @return array Array of return values, grouped by key. Each value is either
+	 *               the cache contents on success, or false on failure.
+	 */
+	public function getMultiple( $keys, $group = '', $force = false ) {
+		$values = array();
+
+		foreach ( $keys as $key ) {
+			$found          = null;
+			$value          = $this->get( $key, $group, $force, $found );
+			$values[ $key ] = $found ? $value : false;
+		}
+
+		return $values;
+	}
+
 	/**
 	 * Retrieves a Memcached option value.
 	 *
@@ -1952,6 +2084,26 @@ class WP_Object_Cache {
 		return $this->setMulti( $items, $groups, $expiration, $server_key, true );
 	}
 
+	/**
+	 * Sets multiple values in cache.
+	 *
+	 * @param array  $items      Array of keys and values to be set.
+	 * @param string $group      Optional. Where the cache contents are grouped. Default empty.
+	 * @param int    $expiration Optional. When to expire the cache contents, in seconds.
+	 *                           Default 0 (no expiration).
+	 * @return bool[] Array of return values, grouped by key. Each value is either
+	 *                true on success, or false on failure.
+	 */
+	public function setMultiple( array $items, $group = '', $expiration = 0 ) {
+		$values = array();
+
+		foreach ( $items as $key => $value ) {
+			$values[ $key ] = $this->set( $key, $value, $group, $expiration );
+		}
+
+		return $values;
+	}
+
 	/**
 	 * Sets a Memcached option.
 	 *
@@ -2018,6 +2170,7 @@ class WP_Object_Cache {
 		if ( ! is_array( $keys ) ) {
 			$keys = (array) $keys;
 		}
+		$keys = array_values( $keys );
 
 		// If we have equal numbers of keys and groups, merge $keys[n] and $group[n].
 		if ( count( $keys ) === count( $groups ) ) {
diff --git a/includes/spy-rest-server.php b/includes/spy-rest-server.php
index 0702ebbb23..49cda8748a 100644
--- a/includes/spy-rest-server.php
+++ b/includes/spy-rest-server.php
@@ -70,15 +70,15 @@ class Spy_REST_Server extends WP_REST_Server {
 	/**
 	 * Overrides the register_route method so we can re-register routes internally if needed.
 	 *
-	 * @param string $namespace  Namespace.
-	 * @param string $route      The REST route.
-	 * @param array  $route_args Route arguments.
-	 * @param bool   $override   Optional. Whether the route should be overridden if it already exists.
-	 *                           Default false. Also set `$GLOBALS['wp_rest_server']->override_by_default = true`
-	 *                           to set overrides when you don't have access to the caller context.
+	 * @param string $route_namespace Namespace.
+	 * @param string $route           The REST route.
+	 * @param array  $route_args      Route arguments.
+	 * @param bool   $override        Optional. Whether the route should be overridden if it already exists.
+	 *                                Default false. Also set `$GLOBALS['wp_rest_server']->override_by_default = true`
+	 *                                to set overrides when you don't have access to the caller context.
 	 */
-	public function register_route( $namespace, $route, $route_args, $override = false ) {
-		parent::register_route( $namespace, $route, $route_args, $override || $this->override_by_default );
+	public function register_route( $route_namespace, $route, $route_args, $override = false ) {
+		parent::register_route( $route_namespace, $route, $route_args, $override || $this->override_by_default );
 	}
 
 	/**
diff --git a/includes/testcase-canonical.php b/includes/testcase-canonical.php
index 833df23e5b..26916fac6e 100644
--- a/includes/testcase-canonical.php
+++ b/includes/testcase-canonical.php
@@ -37,7 +37,7 @@ abstract class WP_Canonical_UnitTestCase extends WP_UnitTestCase {
 	/**
 	 * Generate fixtures to be shared between canonical tests.
 	 *
-	 * Abstracted here because it's invoked by setUpBeforeClass() in more than one class.
+	 * Abstracted here because it's invoked by wpSetUpBeforeClass() in more than one class.
 	 *
 	 * @since 4.1.0
 	 */
@@ -46,7 +46,7 @@ abstract class WP_Canonical_UnitTestCase extends WP_UnitTestCase {
 		self::$author_id        = $factory->user->create( array( 'user_login' => 'canonical-author' ) );
 
 		/*
-		 * Also set in self::setUp(), but we must configure here to make sure that
+		 * Also set in self::set_up(), but we must configure here to make sure that
 		 * post authorship is properly attributed for fixtures.
 		 */
 		wp_set_current_user( self::$author_id );
diff --git a/includes/testcase-rest-controller.php b/includes/testcase-rest-controller.php
index 67a7970b66..9a4c2a0b61 100644
--- a/includes/testcase-rest-controller.php
+++ b/includes/testcase-rest-controller.php
@@ -9,7 +9,7 @@ abstract class WP_Test_REST_Controller_Testcase extends WP_Test_REST_TestCase {
 		add_filter( 'rest_url', array( $this, 'filter_rest_url_for_leading_slash' ), 10, 2 );
 		/** @var WP_REST_Server $wp_rest_server */
 		global $wp_rest_server;
-		$wp_rest_server = new Spy_REST_Server;
+		$wp_rest_server = new Spy_REST_Server();
 		do_action( 'rest_api_init', $wp_rest_server );
 	}
 
diff --git a/includes/unregister-blocks-hooks.php b/includes/unregister-blocks-hooks.php
index 6cde091330..df08612e8c 100644
--- a/includes/unregister-blocks-hooks.php
+++ b/includes/unregister-blocks-hooks.php
@@ -12,6 +12,7 @@ remove_action( 'init', 'register_block_core_comment_date' );
 remove_action( 'init', 'register_block_core_comment_edit_link' );
 remove_action( 'init', 'register_block_core_comment_reply_link' );
 remove_action( 'init', 'register_block_core_comment_template' );
+remove_action( 'init', 'register_block_core_comments' );
 remove_action( 'init', 'register_block_core_comments_pagination' );
 remove_action( 'init', 'register_block_core_comments_pagination_next' );
 remove_action( 'init', 'register_block_core_comments_pagination_numbers' );
@@ -32,7 +33,6 @@ remove_action( 'init', 'register_block_core_page_list' );
 remove_action( 'init', 'register_block_core_pattern' );
 remove_action( 'init', 'register_block_core_post_author' );
 remove_action( 'init', 'register_block_core_post_author_biography' );
-remove_action( 'init', 'register_block_core_post_comments' );
 remove_action( 'init', 'register_block_core_post_comments_form' );
 remove_action( 'init', 'register_block_core_post_content' );
 remove_action( 'init', 'register_block_core_post_date' );
diff --git a/includes/utils.php b/includes/utils.php
index 16b331b6a6..30af6aa348 100644
--- a/includes/utils.php
+++ b/includes/utils.php
@@ -431,16 +431,17 @@ function dmp_filter( $a ) {
 	return $a;
 }
 
-function get_echo( $callable, $args = array() ) {
+function get_echo( $callback, $args = array() ) {
 	ob_start();
-	call_user_func_array( $callable, $args );
+	call_user_func_array( $callback, $args );
 	return ob_get_clean();
 }
 
 // Recursively generate some quick assertEquals() tests based on an array.
-function gen_tests_array( $name, $array ) {
+function gen_tests_array( $name, $expected_data ) {
 	$out = array();
-	foreach ( $array as $k => $v ) {
+
+	foreach ( $expected_data as $k => $v ) {
 		if ( is_numeric( $k ) ) {
 			$index = (string) $k;
 		} else {
@@ -455,16 +456,17 @@ function gen_tests_array( $name, $array ) {
 			$out[] = gen_tests_array( "{$name}[{$index}]", $v );
 		}
 	}
+
 	return implode( "\n", $out ) . "\n";
 }
 
 /**
- * Use to create objects by yourself
+ * Use to create objects by yourself.
  */
 class MockClass extends stdClass {}
 
 /**
- * Drops all tables from the WordPress database
+ * Drops all tables from the WordPress database.
  */
 function drop_tables() {
 	global $wpdb;
diff --git a/includes/wp-profiler.php b/includes/wp-profiler.php
index 17c79ee51b..ce78ba4c8e 100644
--- a/includes/wp-profiler.php
+++ b/includes/wp-profiler.php
@@ -73,7 +73,7 @@ class WPProfiler {
 
 		if ( isset( $this->profile[ $name ] ) ) {
 			$this->profile[ $name ]['time'] += $time;
-			$this->profile[ $name ]['calls'] ++;
+			$this->profile[ $name ]['calls']++;
 			$this->profile[ $name ]['cache_cold_hits']    += ( $wp_object_cache->cold_cache_hits - $item['cache_cold_hits'] );
 			$this->profile[ $name ]['cache_warm_hits']    += ( $wp_object_cache->warm_cache_hits - $item['cache_warm_hits'] );
 			$this->profile[ $name ]['cache_misses']       += ( $wp_object_cache->cache_misses - $item['cache_misses'] );
@@ -143,7 +143,7 @@ class WPProfiler {
 			$sql = preg_replace( '/(WHERE \w+ =) \d+/', '$1 x', $sql );
 			$sql = preg_replace( '/(WHERE \w+ =) \'\[-\w]+\'/', '$1 \'xxx\'', $sql );
 
-			$out[ $sql ] ++;
+			$out[ $sql ]++;
 		}
 		asort( $out );
 		return;
diff --git a/tests/admin/includesFile.php b/tests/admin/includesFile.php
index b598a2d3bd..5ff28ba90c 100644
--- a/tests/admin/includesFile.php
+++ b/tests/admin/includesFile.php
@@ -68,8 +68,8 @@ class Tests_Admin_IncludesFile extends WP_UnitTestCase {
 		remove_filter( 'pre_http_request', array( $this, '_fake_download_url_non_200_response_code' ) );
 	}
 
-	public function _fake_download_url_non_200_response_code( $response, $args, $url ) {
-		file_put_contents( $args['filename'], 'This is an unexpected error message from your favorite server.' );
+	public function _fake_download_url_non_200_response_code( $response, $parsed_args, $url ) {
+		file_put_contents( $parsed_args['filename'], 'This is an unexpected error message from your favorite server.' );
 		return array(
 			'response' => array(
 				'code'    => 418,
@@ -150,7 +150,7 @@ class Tests_Admin_IncludesFile extends WP_UnitTestCase {
 	 *
 	 * @return array
 	 */
-	public function filter_content_disposition_header_with_filename( $response, $args, $url ) {
+	public function filter_content_disposition_header_with_filename( $response, $parsed_args, $url ) {
 		return array(
 			'response' => array(
 				'code' => 200,
@@ -168,7 +168,7 @@ class Tests_Admin_IncludesFile extends WP_UnitTestCase {
 	 *
 	 * @return array
 	 */
-	public function filter_content_disposition_header_with_filename_with_path_traversal( $response, $args, $url ) {
+	public function filter_content_disposition_header_with_filename_with_path_traversal( $response, $parsed_args, $url ) {
 		return array(
 			'response' => array(
 				'code' => 200,
@@ -186,7 +186,7 @@ class Tests_Admin_IncludesFile extends WP_UnitTestCase {
 	 *
 	 * @return array
 	 */
-	public function filter_content_disposition_header_with_filename_without_quotes( $response, $args, $url ) {
+	public function filter_content_disposition_header_with_filename_without_quotes( $response, $parsed_args, $url ) {
 		return array(
 			'response' => array(
 				'code' => 200,
@@ -235,7 +235,7 @@ class Tests_Admin_IncludesFile extends WP_UnitTestCase {
 	 *
 	 * @return array
 	 */
-	public function filter_content_disposition_header_with_filename_without_context( $response, $args, $url ) {
+	public function filter_content_disposition_header_with_filename_without_context( $response, $parsed_args, $url ) {
 		return array(
 			'response' => array(
 				'code' => 200,
@@ -253,7 +253,7 @@ class Tests_Admin_IncludesFile extends WP_UnitTestCase {
 	 *
 	 * @return array
 	 */
-	public function filter_content_disposition_header_with_filename_with_inline_context( $response, $args, $url ) {
+	public function filter_content_disposition_header_with_filename_with_inline_context( $response, $parsed_args, $url ) {
 		return array(
 			'response' => array(
 				'code' => 200,
@@ -271,7 +271,7 @@ class Tests_Admin_IncludesFile extends WP_UnitTestCase {
 	 *
 	 * @return array
 	 */
-	public function filter_content_disposition_header_with_filename_with_form_data_context( $response, $args, $url ) {
+	public function filter_content_disposition_header_with_filename_with_form_data_context( $response, $parsed_args, $url ) {
 		return array(
 			'response' => array(
 				'code' => 200,
@@ -365,12 +365,12 @@ class Tests_Admin_IncludesFile extends WP_UnitTestCase {
 	/**
 	 * Mock the HTTP request response.
 	 *
-	 * @param bool   $false     False.
-	 * @param array  $arguments Request arguments.
-	 * @param string $url       Request URL.
-	 * @return array|bool
+	 * @param false|array|WP_Error $response    A preemptive return value of an HTTP request. Default false.
+	 * @param array                $parsed_args HTTP request arguments.
+	 * @param string               $url         The request URL.
+	 * @return false|array|WP_Error Response data.
 	 */
-	public function mock_http_request( $false, $arguments, $url ) {
+	public function mock_http_request( $response, $parsed_args, $url ) {
 		if ( 'https://example.com' === $url ) {
 			return array(
 				'response' => array(
@@ -379,6 +379,6 @@ class Tests_Admin_IncludesFile extends WP_UnitTestCase {
 			);
 		}
 
-		return $false;
+		return $response;
 	}
 }
diff --git a/tests/admin/includesPost.php b/tests/admin/includesPost.php
index 2a41131a92..799d927dfa 100644
--- a/tests/admin/includesPost.php
+++ b/tests/admin/includesPost.php
@@ -686,6 +686,36 @@ class Tests_Admin_IncludesPost extends WP_UnitTestCase {
 		$this->assertSame( 'child-page', $actual[1] );
 	}
 
+	/**
+	 * Tests that get_sample_permalink() preserves the original WP_Post properties.
+	 *
+	 * @ticket 54736
+	 *
+	 * @covers ::get_sample_permalink
+	 */
+	public function test_get_sample_permalink_should_preserve_the_original_post_properties() {
+		$post = self::factory()->post->create_and_get(
+			array(
+				'post_status' => 'draft',
+			)
+		);
+
+		$post_original = clone $post;
+
+		add_filter(
+			'get_sample_permalink',
+			function( $permalink, $post_id, $title, $name, $post ) use ( $post_original ) {
+				$this->assertEquals( $post_original, $post, 'Modified post object passed to get_sample_permalink filter.' );
+				return $permalink;
+			},
+			10,
+			5
+		);
+
+		get_sample_permalink( $post );
+		$this->assertEquals( $post_original, $post, 'get_sample_permalink() modifies the post object.' );
+	}
+
 	public function test_post_exists_should_match_title() {
 		$p = self::factory()->post->create(
 			array(
diff --git a/tests/admin/includesSchema.php b/tests/admin/includesSchema.php
index ea392e41c3..f33dff148b 100644
--- a/tests/admin/includesSchema.php
+++ b/tests/admin/includesSchema.php
@@ -177,6 +177,47 @@ class Tests_Admin_IncludesSchema extends WP_UnitTestCase {
 		);
 	}
 
+	/**
+	 * Ensures that deprecated timezone strings set as a default in a translation are handled correctly.
+	 *
+	 * @ticket 56468
+	 */
+	public function test_populate_options_when_locale_uses_deprecated_timezone_string() {
+		global $wpdb;
+
+		// Back up.
+		$orig_options  = $wpdb->options;
+		$wpdb->options = self::$options;
+
+		// Set the "default" value for the timezone to a deprecated timezone.
+		add_filter(
+			'gettext_with_context',
+			static function( $translation, $text, $context ) {
+				if ( '0' === $text && 'default GMT offset or timezone string' === $context ) {
+					return 'America/Buenos_Aires';
+				}
+
+				return $translation;
+			},
+			10,
+			3
+		);
+
+		// Test.
+		populate_options();
+
+		wp_cache_delete( 'alloptions', 'options' );
+
+		$result = get_option( 'timezone_string' );
+
+		// Reset.
+		$wpdb->query( "TRUNCATE TABLE {$wpdb->options}" );
+		$wpdb->options = $orig_options;
+
+		// Assert.
+		$this->assertSame( 'America/Buenos_Aires', $result );
+	}
+
 	/**
 	 * @ticket 44896
 	 * @group multisite
diff --git a/tests/admin/includesUser.php b/tests/admin/includesUser.php
index 4e0d99c639..0b590377e9 100644
--- a/tests/admin/includesUser.php
+++ b/tests/admin/includesUser.php
@@ -17,7 +17,7 @@ class Tests_Admin_IncludesUser extends WP_UnitTestCase {
 
 		if ( $error_code ) {
 			$this->assertWPError( $error );
-			$this->assertEquals( $error_code, $error->get_error_code() );
+			$this->assertSame( $error_code, $error->get_error_code() );
 		} else {
 			$this->assertNotWPError( $error );
 		}
diff --git a/tests/admin/wpCommentsListTable.php b/tests/admin/wpCommentsListTable.php
index 20fcd836e2..a394823d37 100644
--- a/tests/admin/wpCommentsListTable.php
+++ b/tests/admin/wpCommentsListTable.php
@@ -10,7 +10,7 @@ class Tests_Admin_wpCommentsListTable extends WP_UnitTestCase {
 	 */
 	protected $table;
 
-	function set_up() {
+	public function set_up() {
 		parent::set_up();
 		$this->table = _get_list_table( 'WP_Comments_List_Table', array( 'screen' => 'edit-comments' ) );
 	}
diff --git a/tests/admin/wpPostCommentsListTable.php b/tests/admin/wpPostCommentsListTable.php
index 98cb834bff..126126327f 100644
--- a/tests/admin/wpPostCommentsListTable.php
+++ b/tests/admin/wpPostCommentsListTable.php
@@ -12,7 +12,7 @@ class Tests_Admin_wpPostCommentsListTable extends WP_UnitTestCase {
 	 */
 	protected $table;
 
-	function set_up() {
+	public function set_up() {
 		parent::set_up();
 		$this->table = _get_list_table( 'WP_Post_Comments_List_Table', array( 'screen' => 'edit-post-comments' ) );
 	}
diff --git a/tests/admin/wpPostsListTable.php b/tests/admin/wpPostsListTable.php
index c209179870..c2dd5f586a 100644
--- a/tests/admin/wpPostsListTable.php
+++ b/tests/admin/wpPostsListTable.php
@@ -14,7 +14,7 @@ class Tests_Admin_wpPostsListTable extends WP_UnitTestCase {
 	 */
 	protected $table;
 
-	function set_up() {
+	public function set_up() {
 		parent::set_up();
 		$this->table = _get_list_table( 'WP_Posts_List_Table', array( 'screen' => 'edit-page' ) );
 	}
@@ -79,7 +79,7 @@ class Tests_Admin_wpPostsListTable extends WP_UnitTestCase {
 	 * @covers WP_Posts_List_Table::display_rows
 	 * @covers WP_Posts_List_Table::set_hierarchical_display
 	 */
-	function test_list_hierarchical_pages_first_page() {
+	public function test_list_hierarchical_pages_first_page() {
 		$this->_test_list_hierarchical_page(
 			array(
 				'paged'          => 1,
@@ -98,7 +98,7 @@ class Tests_Admin_wpPostsListTable extends WP_UnitTestCase {
 	 * @covers WP_Posts_List_Table::display_rows
 	 * @covers WP_Posts_List_Table::set_hierarchical_display
 	 */
-	function test_list_hierarchical_pages_second_page() {
+	public function test_list_hierarchical_pages_second_page() {
 		$this->_test_list_hierarchical_page(
 			array(
 				'paged'          => 2,
@@ -118,7 +118,7 @@ class Tests_Admin_wpPostsListTable extends WP_UnitTestCase {
 	 * @covers WP_Posts_List_Table::display_rows
 	 * @covers WP_Posts_List_Table::set_hierarchical_display
 	 */
-	function test_search_hierarchical_pages_first_page() {
+	public function test_search_hierarchical_pages_first_page() {
 		$this->_test_list_hierarchical_page(
 			array(
 				'paged'          => 1,
@@ -138,7 +138,7 @@ class Tests_Admin_wpPostsListTable extends WP_UnitTestCase {
 	 * @covers WP_Posts_List_Table::display_rows
 	 * @covers WP_Posts_List_Table::set_hierarchical_display
 	 */
-	function test_search_hierarchical_pages_second_page() {
+	public function test_search_hierarchical_pages_second_page() {
 		$this->_test_list_hierarchical_page(
 			array(
 				'paged'          => 2,
@@ -158,7 +158,7 @@ class Tests_Admin_wpPostsListTable extends WP_UnitTestCase {
 	 * @covers WP_Posts_List_Table::display_rows
 	 * @covers WP_Posts_List_Table::set_hierarchical_display
 	 */
-	function test_grandchildren_hierarchical_pages_first_page() {
+	public function test_grandchildren_hierarchical_pages_first_page() {
 		// Page 6 is the first page with grandchildren.
 		$this->_test_list_hierarchical_page(
 			array(
@@ -180,7 +180,7 @@ class Tests_Admin_wpPostsListTable extends WP_UnitTestCase {
 	 * @covers WP_Posts_List_Table::display_rows
 	 * @covers WP_Posts_List_Table::set_hierarchical_display
 	 */
-	function test_grandchildren_hierarchical_pages_second_page() {
+	public function test_grandchildren_hierarchical_pages_second_page() {
 		// Page 7 is the second page with grandchildren.
 		$this->_test_list_hierarchical_page(
 			array(
@@ -225,7 +225,7 @@ class Tests_Admin_wpPostsListTable extends WP_UnitTestCase {
 			$args
 		);
 
-		// Mimic the behaviour of `wp_edit_posts_query()`:
+		// Mimic the behavior of `wp_edit_posts_query()`:
 		if ( ! isset( $args['orderby'] ) ) {
 			$args['orderby']                = 'menu_order title';
 			$args['order']                  = 'asc';
@@ -260,7 +260,7 @@ class Tests_Admin_wpPostsListTable extends WP_UnitTestCase {
 	 *
 	 * @covers WP_Posts_List_Table::extra_tablenav
 	 */
-	function test_filter_button_should_not_be_shown_if_there_are_no_posts() {
+	public function test_filter_button_should_not_be_shown_if_there_are_no_posts() {
 		// Set post type to a non-existent one.
 		$this->table->screen->post_type = 'foo';
 
@@ -276,7 +276,7 @@ class Tests_Admin_wpPostsListTable extends WP_UnitTestCase {
 	 *
 	 * @covers WP_Posts_List_Table::extra_tablenav
 	 */
-	function test_months_dropdown_should_not_be_shown_if_there_are_no_posts() {
+	public function test_months_dropdown_should_not_be_shown_if_there_are_no_posts() {
 		// Set post type to a non-existent one.
 		$this->table->screen->post_type = 'foo';
 
@@ -292,7 +292,7 @@ class Tests_Admin_wpPostsListTable extends WP_UnitTestCase {
 	 *
 	 * @covers WP_Posts_List_Table::extra_tablenav
 	 */
-	function test_category_dropdown_should_not_be_shown_if_there_are_no_posts() {
+	public function test_category_dropdown_should_not_be_shown_if_there_are_no_posts() {
 		// Set post type to a non-existent one.
 		$this->table->screen->post_type = 'foo';
 
diff --git a/tests/admin/wpSiteHealth.php b/tests/admin/wpSiteHealth.php
index 8339821791..62697c576c 100644
--- a/tests/admin/wpSiteHealth.php
+++ b/tests/admin/wpSiteHealth.php
@@ -202,7 +202,7 @@ class Tests_Admin_wpSiteHealth extends WP_UnitTestCase {
 
 		add_filter(
 			'pre_http_request',
-			function ( $r, $parsed_args ) use ( &$responses, &$is_unauthorized, $good_basic_auth, $delay_the_response, $threshold ) {
+			function ( $response, $parsed_args ) use ( &$responses, &$is_unauthorized, $good_basic_auth, $delay_the_response, $threshold ) {
 
 				$expected_response = array_shift( $responses );
 
diff --git a/tests/adminbar.php b/tests/adminbar.php
index 228063e911..cec80d0cae 100644
--- a/tests/adminbar.php
+++ b/tests/adminbar.php
@@ -37,7 +37,7 @@ class Tests_AdminBar extends WP_UnitTestCase {
 
 		register_post_type( 'content', array( 'show_in_admin_bar' => true ) );
 
-		$admin_bar = new WP_Admin_Bar;
+		$admin_bar = new WP_Admin_Bar();
 
 		wp_admin_bar_new_content_menu( $admin_bar );
 
@@ -54,7 +54,7 @@ class Tests_AdminBar extends WP_UnitTestCase {
 	public function test_merging_existing_meta_values() {
 		wp_set_current_user( self::$editor_id );
 
-		$admin_bar = new WP_Admin_Bar;
+		$admin_bar = new WP_Admin_Bar();
 
 		$admin_bar->add_node(
 			array(
diff --git a/tests/ajax/AddMeta.php b/tests/ajax/wpAjaxAddMeta.php
similarity index 93%
rename from tests/ajax/AddMeta.php
rename to tests/ajax/wpAjaxAddMeta.php
index e34adc9c1f..dbaee104ba 100644
--- a/tests/ajax/AddMeta.php
+++ b/tests/ajax/wpAjaxAddMeta.php
@@ -9,12 +9,14 @@ require_once ABSPATH . 'wp-admin/includes/ajax-actions.php';
  * Testing Add Meta AJAX functionality.
  *
  * @group ajax
+ *
+ * @covers ::wp_ajax_add_meta
  */
-class Tests_Ajax_AddMeta extends WP_Ajax_UnitTestCase {
+class Tests_Ajax_wpAjaxAddMeta extends WP_Ajax_UnitTestCase {
+
 	/**
 	 * @ticket 43559
 	 *
-	 * @covers ::wp_ajax_add_meta
 	 * @covers ::add_post_meta
 	 */
 	public function test_wp_ajax_add_meta_allows_empty_values_on_adding() {
@@ -43,7 +45,6 @@ class Tests_Ajax_AddMeta extends WP_Ajax_UnitTestCase {
 	/**
 	 * @ticket 43559
 	 *
-	 * @covers ::wp_ajax_add_meta
 	 * @covers ::update_metadata_by_mid
 	 */
 	public function test_wp_ajax_add_meta_allows_empty_values_on_updating() {
diff --git a/tests/ajax/AddTag.php b/tests/ajax/wpAjaxAddTag.php
similarity index 96%
rename from tests/ajax/AddTag.php
rename to tests/ajax/wpAjaxAddTag.php
index cf10110d91..6060b1db64 100755
--- a/tests/ajax/AddTag.php
+++ b/tests/ajax/wpAjaxAddTag.php
@@ -9,15 +9,16 @@ require_once ABSPATH . 'wp-admin/includes/ajax-actions.php';
  * Class for testing ajax add tag functionality.
  *
  * @group ajax
+ *
+ * @covers ::wp_ajax_add_tag
  */
-class Tests_Ajax_AddTag extends WP_Ajax_UnitTestCase {
+class Tests_Ajax_wpAjaxAddTag extends WP_Ajax_UnitTestCase {
 
 	/**
 	 * @dataProvider data_add_tag
 	 *
 	 * @ticket 42937
 	 *
-	 * @covers ::wp_ajax_add_tag
 	 * @covers ::wp_insert_term
 	 *
 	 * @param array                 $post_data Data to populate $_POST.
@@ -93,8 +94,6 @@ class Tests_Ajax_AddTag extends WP_Ajax_UnitTestCase {
 
 	/**
 	 * @ticket 42937
-	 *
-	 * @covers ::wp_ajax_add_tag
 	 */
 	public function test_adding_category_without_capability_should_error() {
 		$this->_setRole( 'subscriber' );
@@ -114,7 +113,6 @@ class Tests_Ajax_AddTag extends WP_Ajax_UnitTestCase {
 	/**
 	 * @ticket 42937
 	 *
-	 * @covers ::wp_ajax_add_tag
 	 * @covers ::wp_insert_term
 	 */
 	public function test_adding_existing_category_should_error() {
diff --git a/tests/ajax/TagSearch.php b/tests/ajax/wpAjaxAjaxTagSearch.php
similarity index 97%
rename from tests/ajax/TagSearch.php
rename to tests/ajax/wpAjaxAjaxTagSearch.php
index 3374033092..fa41463c62 100644
--- a/tests/ajax/TagSearch.php
+++ b/tests/ajax/wpAjaxAjaxTagSearch.php
@@ -8,14 +8,15 @@ require_once ABSPATH . 'wp-admin/includes/ajax-actions.php';
 /**
  * Testing Ajax tag search functionality.
  *
- * @package    WordPress
+ * @package WordPress
  * @subpackage UnitTests
- * @since      3.4.0
- * @group      ajax
+ * @since 3.4.0
+ *
+ * @group ajax
  *
  * @covers ::wp_ajax_ajax_tag_search
  */
-class Tests_Ajax_TagSearch extends WP_Ajax_UnitTestCase {
+class Tests_Ajax_wpAjaxAjaxTagSearch extends WP_Ajax_UnitTestCase {
 
 	/**
 	 * List of terms to insert on setup
diff --git a/tests/ajax/wpAjaxCropImage.php b/tests/ajax/wpAjaxCropImage.php
index 008cfa7d1b..3a23f3a425 100644
--- a/tests/ajax/wpAjaxCropImage.php
+++ b/tests/ajax/wpAjaxCropImage.php
@@ -11,6 +11,7 @@ require_once ABSPATH . 'wp-admin/includes/class-wp-filesystem-direct.php';
  * Class for testing ajax crop image functionality.
  *
  * @group ajax
+ *
  * @covers ::wp_ajax_crop_image
  */
 class Tests_Ajax_WpAjaxCropImage extends WP_Ajax_UnitTestCase {
diff --git a/tests/ajax/DeleteComment.php b/tests/ajax/wpAjaxDeleteComment.php
similarity index 95%
rename from tests/ajax/DeleteComment.php
rename to tests/ajax/wpAjaxDeleteComment.php
index 84dd82fc8e..c6547f9b7c 100644
--- a/tests/ajax/DeleteComment.php
+++ b/tests/ajax/wpAjaxDeleteComment.php
@@ -8,12 +8,15 @@ require_once ABSPATH . 'wp-admin/includes/ajax-actions.php';
 /**
  * Testing Ajax comment functionality.
  *
- * @package    WordPress
+ * @package WordPress
  * @subpackage UnitTests
- * @since      3.4.0
- * @group      ajax
+ * @since 3.4.0
+ *
+ * @group ajax
+ *
+ * @covers ::wp_ajax_delete_comment
  */
-class Tests_Ajax_DeleteComment extends WP_Ajax_UnitTestCase {
+class Tests_Ajax_wpAjaxDeleteComment extends WP_Ajax_UnitTestCase {
 
 	/**
 	 * List of comments.
@@ -57,7 +60,6 @@ class Tests_Ajax_DeleteComment extends WP_Ajax_UnitTestCase {
 	 *
 	 * Expects test to pass.
 	 *
-	 * @covers ::wp_ajax_delete_comment
 	 * @covers ::_wp_ajax_delete_comment_response
 	 *
 	 * @param WP_Comment $comment Comment object.
@@ -119,8 +121,6 @@ class Tests_Ajax_DeleteComment extends WP_Ajax_UnitTestCase {
 	 *
 	 * Expects test to fail.
 	 *
-	 * @covers ::wp_ajax_delete_comment
-	 *
 	 * @param WP_Comment $comment Comment object.
 	 * @param string     $action  Action: 'trash', 'untrash', etc.
 	 */
@@ -153,8 +153,6 @@ class Tests_Ajax_DeleteComment extends WP_Ajax_UnitTestCase {
 	 *
 	 * Expects test to fail.
 	 *
-	 * @covers ::wp_ajax_delete_comment
-	 *
 	 * @param WP_Comment $comment Comment object.
 	 * @param string     $action  Action: 'trash', 'untrash', etc.
 	 */
@@ -186,8 +184,6 @@ class Tests_Ajax_DeleteComment extends WP_Ajax_UnitTestCase {
 	 *
 	 * Expects test to fail.
 	 *
-	 * @covers ::wp_ajax_delete_comment
-	 *
 	 * @param WP_Comment $comment Comment object.
 	 * @param string     $action  Action: 'trash', 'untrash', etc.
 	 */
@@ -225,8 +221,6 @@ class Tests_Ajax_DeleteComment extends WP_Ajax_UnitTestCase {
 	 *
 	 * Expects test to fail.
 	 *
-	 * @covers ::wp_ajax_delete_comment
-	 *
 	 * @param WP_Comment $comment Comment object.
 	 * @param string     $action  Action: 'trash', 'untrash', etc.
 	 */
@@ -275,7 +269,6 @@ class Tests_Ajax_DeleteComment extends WP_Ajax_UnitTestCase {
 	/**
 	 * Deletes a comment as an administrator (expects success).
 	 *
-	 * @covers ::wp_ajax_delete_comment
 	 * @covers ::_wp_ajax_delete_comment_response
 	 */
 	public function test_ajax_comment_trash_actions_as_administrator() {
@@ -293,8 +286,6 @@ class Tests_Ajax_DeleteComment extends WP_Ajax_UnitTestCase {
 
 	/**
 	 * Deletes a comment as a subscriber (expects permission denied).
-	 *
-	 * @covers ::wp_ajax_delete_comment
 	 */
 	public function test_ajax_comment_trash_actions_as_subscriber() {
 		// Test trash/untrash.
@@ -312,7 +303,6 @@ class Tests_Ajax_DeleteComment extends WP_Ajax_UnitTestCase {
 	/**
 	 * Deletes a comment with no ID.
 	 *
-	 * @covers ::wp_ajax_delete_comment
 	 * @covers ::_wp_ajax_delete_comment_response
 	 */
 	public function test_ajax_trash_comment_no_id() {
@@ -330,8 +320,6 @@ class Tests_Ajax_DeleteComment extends WP_Ajax_UnitTestCase {
 
 	/**
 	 * Deletes a comment with a bad nonce.
-	 *
-	 * @covers ::wp_ajax_delete_comment
 	 */
 	public function test_ajax_trash_comment_bad_nonce() {
 		// Test trash/untrash.
@@ -348,8 +336,6 @@ class Tests_Ajax_DeleteComment extends WP_Ajax_UnitTestCase {
 
 	/**
 	 * Tests trashing an already trashed comment, etc.
-	 *
-	 * @covers ::wp_ajax_delete_comment
 	 */
 	public function test_ajax_trash_double_action() {
 		// Test trash/untrash.
diff --git a/tests/ajax/DeletePlugin.php b/tests/ajax/wpAjaxDeletePlugin.php
similarity index 97%
rename from tests/ajax/DeletePlugin.php
rename to tests/ajax/wpAjaxDeletePlugin.php
index 57a66a0dbf..1fc3d9422d 100644
--- a/tests/ajax/DeletePlugin.php
+++ b/tests/ajax/wpAjaxDeletePlugin.php
@@ -11,7 +11,7 @@ require_once ABSPATH . 'wp-admin/includes/ajax-actions.php';
  *
  * @covers ::wp_ajax_delete_plugin
  */
-class Tests_Ajax_Delete_Plugin extends WP_Ajax_UnitTestCase {
+class Tests_Ajax_wpAjaxDeletePlugin extends WP_Ajax_UnitTestCase {
 
 	public function test_missing_nonce() {
 		$this->expectException( 'WPAjaxDieStopException' );
@@ -130,7 +130,6 @@ class Tests_Ajax_Delete_Plugin extends WP_Ajax_UnitTestCase {
 	/**
 	 * @group ms-excluded
 	 *
-	 * @covers ::wp_ajax_delete_plugin
 	 * @covers ::delete_plugins
 	 */
 	public function test_delete_plugin() {
diff --git a/tests/ajax/DimComment.php b/tests/ajax/wpAjaxDimComment.php
similarity index 98%
rename from tests/ajax/DimComment.php
rename to tests/ajax/wpAjaxDimComment.php
index 6881279e07..2fde579605 100644
--- a/tests/ajax/DimComment.php
+++ b/tests/ajax/wpAjaxDimComment.php
@@ -8,14 +8,15 @@ require_once ABSPATH . 'wp-admin/includes/ajax-actions.php';
 /**
  * Testing Ajax comment functionality
  *
- * @package    WordPress
+ * @package WordPress
  * @subpackage UnitTests
- * @since      3.4.0
- * @group      ajax
+ * @since 3.4.0
+ *
+ * @group ajax
  *
  * @covers ::wp_ajax_dim_comment
  */
-class Tests_Ajax_DimComment extends WP_Ajax_UnitTestCase {
+class Tests_Ajax_wpAjaxDimComment extends WP_Ajax_UnitTestCase {
 
 	/**
 	 * List of comments.
diff --git a/tests/ajax/EditComment.php b/tests/ajax/wpAjaxEditComment.php
similarity index 98%
rename from tests/ajax/EditComment.php
rename to tests/ajax/wpAjaxEditComment.php
index fba7bd46a3..fb39bd4dae 100644
--- a/tests/ajax/EditComment.php
+++ b/tests/ajax/wpAjaxEditComment.php
@@ -8,14 +8,15 @@ require_once ABSPATH . 'wp-admin/includes/ajax-actions.php';
 /**
  * Testing Ajax comment functionality.
  *
- * @package    WordPress
+ * @package WordPress
  * @subpackage UnitTests
- * @since      3.4.0
- * @group      ajax
+ * @since 3.4.0
+ *
+ * @group ajax
  *
  * @covers ::wp_ajax_edit_comment
  */
-class Tests_Ajax_EditComment extends WP_Ajax_UnitTestCase {
+class Tests_Ajax_wpAjaxEditComment extends WP_Ajax_UnitTestCase {
 
 	/**
 	 * A post with at least one comment.
diff --git a/tests/ajax/GetComments.php b/tests/ajax/wpAjaxGetComments.php
similarity index 96%
rename from tests/ajax/GetComments.php
rename to tests/ajax/wpAjaxGetComments.php
index a828aa3df6..4e72d1c8b8 100644
--- a/tests/ajax/GetComments.php
+++ b/tests/ajax/wpAjaxGetComments.php
@@ -8,14 +8,15 @@ require_once ABSPATH . 'wp-admin/includes/ajax-actions.php';
 /**
  * Testing Ajax comment functionality.
  *
- * @package    WordPress
+ * @package WordPress
  * @subpackage UnitTests
- * @since      3.4.0
- * @group      ajax
+ * @since 3.4.0
+ *
+ * @group ajax
  *
  * @covers ::wp_ajax_get_comments
  */
-class Tests_Ajax_GetComments extends WP_Ajax_UnitTestCase {
+class Tests_Ajax_wpAjaxGetComments extends WP_Ajax_UnitTestCase {
 
 	/**
 	 * A post with at least one comment.
diff --git a/tests/ajax/Autosave.php b/tests/ajax/wpAjaxHeartbeat.php
similarity index 88%
rename from tests/ajax/Autosave.php
rename to tests/ajax/wpAjaxHeartbeat.php
index a3c57070ef..6759d9f0db 100644
--- a/tests/ajax/Autosave.php
+++ b/tests/ajax/wpAjaxHeartbeat.php
@@ -8,12 +8,15 @@ require_once ABSPATH . 'wp-admin/includes/ajax-actions.php';
 /**
  * Testing Ajax save draft functionality.
  *
- * @package    WordPress
+ * @package WordPress
  * @subpackage UnitTests
- * @since      3.4.0
- * @group      ajax
+ * @since 3.4.0
+ *
+ * @group ajax
+ *
+ * @covers ::wp_ajax_heartbeat
  */
-class Tests_Ajax_Autosave extends WP_Ajax_UnitTestCase {
+class Tests_Ajax_wpAjaxHeartbeat extends WP_Ajax_UnitTestCase {
 
 	/**
 	 * Post
@@ -26,13 +29,10 @@ class Tests_Ajax_Autosave extends WP_Ajax_UnitTestCase {
 	protected static $editor_id = 0;
 	protected static $post;
 	protected static $post_id;
-	protected static $user_ids = array();
 
 	public static function wpSetUpBeforeClass( WP_UnitTest_Factory $factory ) {
-		self::$admin_id   = $factory->user->create( array( 'role' => 'administrator' ) );
-		self::$user_ids[] = self::$admin_id;
-		self::$editor_id  = $factory->user->create( array( 'role' => 'editor' ) );
-		self::$user_ids[] = self::$editor_id;
+		self::$admin_id  = $factory->user->create( array( 'role' => 'administrator' ) );
+		self::$editor_id = $factory->user->create( array( 'role' => 'editor' ) );
 
 		// Set a user so the $post has 'post_author'.
 		wp_set_current_user( self::$admin_id );
@@ -43,8 +43,6 @@ class Tests_Ajax_Autosave extends WP_Ajax_UnitTestCase {
 
 	/**
 	 * Tests autosaving a post.
-	 *
-	 * @covers ::wp_ajax_heartbeat
 	 */
 	public function test_autosave_post() {
 		// The original post_author.
@@ -86,8 +84,6 @@ class Tests_Ajax_Autosave extends WP_Ajax_UnitTestCase {
 
 	/**
 	 * Tests autosaving a locked post.
-	 *
-	 * @covers ::wp_ajax_heartbeat
 	 */
 	public function test_autosave_locked_post() {
 		// Lock the post to another user.
@@ -139,8 +135,6 @@ class Tests_Ajax_Autosave extends WP_Ajax_UnitTestCase {
 
 	/**
 	 * Tests with an invalid nonce.
-	 *
-	 * @covers ::wp_ajax_heartbeat
 	 */
 	public function test_with_invalid_nonce() {
 
diff --git a/tests/ajax/MediaEdit.php b/tests/ajax/wpAjaxImageEditor.php
similarity index 94%
rename from tests/ajax/MediaEdit.php
rename to tests/ajax/wpAjaxImageEditor.php
index 83c478c83b..f09721b74f 100644
--- a/tests/ajax/MediaEdit.php
+++ b/tests/ajax/wpAjaxImageEditor.php
@@ -7,14 +7,17 @@ require_once ABSPATH . 'wp-admin/includes/ajax-actions.php';
 /**
  * Testing Ajax media editing.
  *
- * @package    WordPress
+ * @package WordPress
  * @subpackage UnitTests
- * @since      3.5.0
- * @group      ajax
+ * @since 3.5.0
  *
- * @requires   function imagejpeg
+ * @group ajax
+ *
+ * @covers ::wp_ajax_image_editor
+ *
+ * @requires function imagejpeg
  */
-class Tests_Ajax_MediaEdit extends WP_Ajax_UnitTestCase {
+class Tests_Ajax_wpAjaxImageEditor extends WP_Ajax_UnitTestCase {
 
 	/**
 	 * Tear down the test fixture.
diff --git a/tests/ajax/QuickEdit.php b/tests/ajax/wpAjaxInlineSave.php
similarity index 95%
rename from tests/ajax/QuickEdit.php
rename to tests/ajax/wpAjaxInlineSave.php
index d94f3d6cb2..ad03e8eb00 100644
--- a/tests/ajax/QuickEdit.php
+++ b/tests/ajax/wpAjaxInlineSave.php
@@ -9,13 +9,14 @@ require_once ABSPATH . 'wp-admin/includes/ajax-actions.php';
  * Testing Quick Edit AJAX functionality.
  *
  * @group ajax
+ *
+ * @covers ::wp_ajax_inline_save
  */
-class Tests_Ajax_QuickEdit extends WP_Ajax_UnitTestCase {
+class Tests_Ajax_wpAjaxInlineSave extends WP_Ajax_UnitTestCase {
 
 	/**
 	 * @ticket 26948
 	 *
-	 * @covers ::wp_ajax_inline_save
 	 * @covers ::edit_post
 	 */
 	public function test_dont_process_terms_if_taxonomy_does_not_allow_show_on_quick_edit() {
diff --git a/tests/ajax/ReplytoComment.php b/tests/ajax/wpAjaxReplytoComment.php
similarity index 97%
rename from tests/ajax/ReplytoComment.php
rename to tests/ajax/wpAjaxReplytoComment.php
index 6a150ca12b..b67a7ba828 100644
--- a/tests/ajax/ReplytoComment.php
+++ b/tests/ajax/wpAjaxReplytoComment.php
@@ -8,14 +8,15 @@ require_once ABSPATH . 'wp-admin/includes/ajax-actions.php';
 /**
  * Testing Ajax comment functionality.
  *
- * @package    WordPress
+ * @package WordPress
  * @subpackage UnitTests
- * @since      3.4.0
- * @group      ajax
+ * @since 3.4.0
+ *
+ * @group ajax
  *
  * @covers ::wp_ajax_replyto_comment
  */
-class Tests_Ajax_ReplytoComment extends WP_Ajax_UnitTestCase {
+class Tests_Ajax_wpAjaxReplytoComment extends WP_Ajax_UnitTestCase {
 
 	/**
 	 * A post with at least one comment.
@@ -97,7 +98,7 @@ class Tests_Ajax_ReplytoComment extends WP_Ajax_UnitTestCase {
 	 */
 	public function test_as_subscriber() {
 
-		// Become an administrator.
+		// Become a subscriber.
 		$this->_setRole( 'subscriber' );
 
 		// Get a comment.
diff --git a/tests/ajax/Response.php b/tests/ajax/wpAjaxResponse.php
similarity index 95%
rename from tests/ajax/Response.php
rename to tests/ajax/wpAjaxResponse.php
index bf3335ad98..8573dae527 100644
--- a/tests/ajax/Response.php
+++ b/tests/ajax/wpAjaxResponse.php
@@ -2,14 +2,15 @@
 /**
  * Testing Ajax response class
  *
- * @package    WordPress
+ * @package WordPress
  * @subpackage UnitTests
- * @since      3.5.0
- * @group      ajax
+ * @since 3.5.0
+ *
+ * @group ajax
  *
  * @covers WP_Ajax_Response::send
  */
-class Tests_Ajax_Response extends WP_UnitTestCase {
+class Tests_Ajax_wpAjaxResponse extends WP_UnitTestCase {
 
 	/**
 	 * Saved error reporting level
diff --git a/tests/ajax/Attachments.php b/tests/ajax/wpAjaxSendAttachmentToEditor.php
similarity index 93%
rename from tests/ajax/Attachments.php
rename to tests/ajax/wpAjaxSendAttachmentToEditor.php
index 91d6943c99..277ce3d299 100644
--- a/tests/ajax/Attachments.php
+++ b/tests/ajax/wpAjaxSendAttachmentToEditor.php
@@ -8,12 +8,14 @@ require_once ABSPATH . 'wp-admin/includes/ajax-actions.php';
  * Testing Ajax attachment handling.
  *
  * @group ajax
+ *
+ * @covers ::wp_ajax_send_attachment_to_editor
  */
-class Tests_Ajax_Attachments extends WP_Ajax_UnitTestCase {
+class Tests_Ajax_wpAjaxSendAttachmentToEditor extends WP_Ajax_UnitTestCase {
+
 	/**
 	 * @ticket 36578
 	 *
-	 * @covers ::wp_ajax_send_attachment_to_editor
 	 * @covers ::get_image_send_to_editor
 	 */
 	public function test_wp_ajax_send_attachment_to_editor_should_return_an_image() {
@@ -58,12 +60,8 @@ class Tests_Ajax_Attachments extends WP_Ajax_UnitTestCase {
 	/**
 	 * @ticket 36578
 	 * @group ms-excluded
-	 *
-	 * @covers ::wp_ajax_send_attachment_to_editor
 	 */
 	public function test_wp_ajax_send_attachment_to_editor_should_return_a_link() {
-		$this->skipWithMultisite();
-
 		// Become an administrator.
 		$this->_setRole( 'administrator' );
 
diff --git a/tests/ajax/UpdatePlugin.php b/tests/ajax/wpAjaxUpdatePlugin.php
similarity index 96%
rename from tests/ajax/UpdatePlugin.php
rename to tests/ajax/wpAjaxUpdatePlugin.php
index 07ab868ea3..08d65879ee 100644
--- a/tests/ajax/UpdatePlugin.php
+++ b/tests/ajax/wpAjaxUpdatePlugin.php
@@ -11,7 +11,7 @@ require_once ABSPATH . 'wp-admin/includes/ajax-actions.php';
  *
  * @covers ::wp_ajax_update_plugin
  */
-class Tests_Ajax_Update_Plugin extends WP_Ajax_UnitTestCase {
+class Tests_Ajax_wpAjaxUpdatePlugin extends WP_Ajax_UnitTestCase {
 
 	public function test_missing_nonce() {
 		$this->expectException( 'WPAjaxDieStopException' );
@@ -141,16 +141,18 @@ class Tests_Ajax_Update_Plugin extends WP_Ajax_UnitTestCase {
 		$_POST['plugin']      = 'hello.php';
 		$_POST['slug']        = 'hello-dolly';
 
+		// Prevent wp_update_plugins() from running.
+		wp_installing( true );
+
 		// Make the request.
 		try {
-			// Prevent wp_update_plugins() from running.
-			wp_installing( true );
 			$this->_handleAjax( 'update-plugin' );
-			wp_installing( false );
 		} catch ( WPAjaxDieContinueException $e ) {
 			unset( $e );
 		}
 
+		wp_installing( false );
+
 		// Get the response.
 		$response = json_decode( $this->_last_response, true );
 
diff --git a/tests/ajax/ManageThemes.php b/tests/ajax/wpAjaxUpdateTheme.php
similarity index 93%
rename from tests/ajax/ManageThemes.php
rename to tests/ajax/wpAjaxUpdateTheme.php
index f689515fe3..610cafb169 100644
--- a/tests/ajax/ManageThemes.php
+++ b/tests/ajax/wpAjaxUpdateTheme.php
@@ -5,13 +5,13 @@
 require_once ABSPATH . 'wp-admin/includes/ajax-actions.php';
 
 /**
- * Testing Ajax handler for instlaling, updating, and deleting themes.
+ * Testing Ajax handler for installing, updating, and deleting themes.
  *
  * @group ajax
  *
  * @covers ::wp_ajax_update_theme
  */
-class Tests_Ajax_Manage_Themes extends WP_Ajax_UnitTestCase {
+class Tests_Ajax_wpAjaxUpdateTheme extends WP_Ajax_UnitTestCase {
 	private $orig_theme_dir;
 	private $theme_root;
 
@@ -112,18 +112,18 @@ class Tests_Ajax_Manage_Themes extends WP_Ajax_UnitTestCase {
 		$_POST['_ajax_nonce'] = wp_create_nonce( 'updates' );
 		$_POST['slug']        = 'twentyten';
 
+		// Prevent wp_update_themes() from running.
+		wp_installing( true );
+
 		// Make the request.
 		try {
-
-			// Prevent wp_update_themes() from running.
-			wp_installing( true );
 			$this->_handleAjax( 'update-theme' );
-			wp_installing( false );
-
 		} catch ( WPAjaxDieContinueException $e ) {
 			unset( $e );
 		}
 
+		wp_installing( false );
+
 		// Get the response.
 		$response = json_decode( $this->_last_response, true );
 
@@ -152,6 +152,9 @@ class Tests_Ajax_Manage_Themes extends WP_Ajax_UnitTestCase {
 		$_POST['_ajax_nonce'] = wp_create_nonce( 'updates' );
 		$_POST['slug']        = 'camelCase';
 
+		// Prevent wp_update_themes() from running.
+		wp_installing( true );
+
 		// Make the request.
 		try {
 			$this->_handleAjax( 'update-theme' );
@@ -159,6 +162,8 @@ class Tests_Ajax_Manage_Themes extends WP_Ajax_UnitTestCase {
 			unset( $e );
 		}
 
+		wp_installing( false );
+
 		// Get the response.
 		$response = json_decode( $this->_last_response, true );
 
diff --git a/tests/ajax/Compression.php b/tests/ajax/wpAjaxWpCompressionTest.php
similarity index 86%
rename from tests/ajax/Compression.php
rename to tests/ajax/wpAjaxWpCompressionTest.php
index 9c4b369ebb..ebca789033 100644
--- a/tests/ajax/Compression.php
+++ b/tests/ajax/wpAjaxWpCompressionTest.php
@@ -8,17 +8,18 @@ require_once ABSPATH . 'wp-admin/includes/ajax-actions.php';
 /**
  * Testing Ajax compression test functionality.
  *
- * @package    WordPress
+ * @package WordPress
  * @subpackage UnitTests
- * @since      3.4.0
- * @group      ajax
+ * @since 3.4.0
+ *
+ * @group ajax
+ *
+ * @covers ::wp_ajax_wp_compression_test
  */
-class Tests_Ajax_CompressionTest extends WP_Ajax_UnitTestCase {
+class Tests_Ajax_wpAjaxWpCompressionTest extends WP_Ajax_UnitTestCase {
 
 	/**
 	 * Test as a logged out user
-	 *
-	 * @covers ::wp_ajax_wp_compression_test
 	 */
 	public function test_logged_out() {
 		$this->logout();
@@ -34,8 +35,6 @@ class Tests_Ajax_CompressionTest extends WP_Ajax_UnitTestCase {
 
 	/**
 	 * Fetch the test text
-	 *
-	 * @covers ::wp_ajax_wp_compression_test
 	 */
 	public function test_text() {
 
@@ -60,8 +59,6 @@ class Tests_Ajax_CompressionTest extends WP_Ajax_UnitTestCase {
 	 * Fetch the test text (gzdeflate)
 	 *
 	 * @requires function gzdeflate
-	 *
-	 * @covers ::wp_ajax_wp_compression_test
 	 */
 	public function test_gzdeflate() {
 
@@ -87,8 +84,6 @@ class Tests_Ajax_CompressionTest extends WP_Ajax_UnitTestCase {
 	 * Fetch the test text (gzencode)
 	 *
 	 * @requires function gzencode
-	 *
-	 * @covers ::wp_ajax_wp_compression_test
 	 */
 	public function test_gzencode() {
 
@@ -112,8 +107,6 @@ class Tests_Ajax_CompressionTest extends WP_Ajax_UnitTestCase {
 
 	/**
 	 * Fetch the test text (unknown encoding)
-	 *
-	 * @covers ::wp_ajax_wp_compression_test
 	 */
 	public function test_unknown_encoding() {
 
@@ -132,8 +125,6 @@ class Tests_Ajax_CompressionTest extends WP_Ajax_UnitTestCase {
 
 	/**
 	 * Set the 'can_compress_scripts' site option to true
-	 *
-	 * @covers ::wp_ajax_wp_compression_test
 	 */
 	public function test_set_yes() {
 
@@ -154,7 +145,7 @@ class Tests_Ajax_CompressionTest extends WP_Ajax_UnitTestCase {
 		}
 
 		// Check the site option is not changed due to lack of nonce.
-		$this->assertSame( 0, (int) get_site_option( 'can_compress_scripts' ) );
+		$this->assertSame( 0, get_site_option( 'can_compress_scripts' ) );
 
 		// Add a nonce.
 		$_GET['_ajax_nonce'] = wp_create_nonce( 'update_can_compress_scripts' );
@@ -167,13 +158,11 @@ class Tests_Ajax_CompressionTest extends WP_Ajax_UnitTestCase {
 		}
 
 		// Check the site option is changed.
-		$this->assertSame( 1, (int) get_site_option( 'can_compress_scripts' ) );
+		$this->assertSame( 1, get_site_option( 'can_compress_scripts' ) );
 	}
 
 	/**
 	 * Set the 'can_compress_scripts' site option to false
-	 *
-	 * @covers ::wp_ajax_wp_compression_test
 	 */
 	public function test_set_no() {
 
@@ -194,7 +183,7 @@ class Tests_Ajax_CompressionTest extends WP_Ajax_UnitTestCase {
 		}
 
 		// Check the site option is not changed due to lack of nonce.
-		$this->assertSame( 1, (int) get_site_option( 'can_compress_scripts' ) );
+		$this->assertSame( 1, get_site_option( 'can_compress_scripts' ) );
 
 		// Add a nonce.
 		$_GET['_ajax_nonce'] = wp_create_nonce( 'update_can_compress_scripts' );
@@ -207,7 +196,7 @@ class Tests_Ajax_CompressionTest extends WP_Ajax_UnitTestCase {
 		}
 
 		// Check the site option is changed.
-		$this->assertSame( 0, (int) get_site_option( 'can_compress_scripts' ) );
+		$this->assertSame( 0, get_site_option( 'can_compress_scripts' ) );
 	}
 
 	/**
diff --git a/tests/ajax/PrivacyErasePersonalData.php b/tests/ajax/wpAjaxWpPrivacyErasePersonalData.php
similarity index 99%
rename from tests/ajax/PrivacyErasePersonalData.php
rename to tests/ajax/wpAjaxWpPrivacyErasePersonalData.php
index 194840f163..068165b991 100644
--- a/tests/ajax/PrivacyErasePersonalData.php
+++ b/tests/ajax/wpAjaxWpPrivacyErasePersonalData.php
@@ -16,7 +16,7 @@
  *
  * @covers ::wp_ajax_wp_privacy_erase_personal_data
  */
-class Tests_Ajax_PrivacyErasePersonalData extends WP_Ajax_UnitTestCase {
+class Tests_Ajax_wpAjaxWpPrivacyErasePersonalData extends WP_Ajax_UnitTestCase {
 
 	/**
 	 * User Request ID.
diff --git a/tests/ajax/PrivacyExportPersonalData.php b/tests/ajax/wpAjaxWpPrivacyExportPersonalData.php
similarity index 99%
rename from tests/ajax/PrivacyExportPersonalData.php
rename to tests/ajax/wpAjaxWpPrivacyExportPersonalData.php
index 4707635a70..f8e588ff5e 100644
--- a/tests/ajax/PrivacyExportPersonalData.php
+++ b/tests/ajax/wpAjaxWpPrivacyExportPersonalData.php
@@ -16,7 +16,7 @@
  *
  * @covers ::wp_ajax_wp_privacy_export_personal_data
  */
-class Tests_Ajax_PrivacyExportPersonalData extends WP_Ajax_UnitTestCase {
+class Tests_Ajax_wpAjaxWpPrivacyExportPersonalData extends WP_Ajax_UnitTestCase {
 
 	/**
 	 * User Request ID.
diff --git a/tests/ajax/CustomizeManager.php b/tests/ajax/wpCustomizeManager.php
similarity index 99%
rename from tests/ajax/CustomizeManager.php
rename to tests/ajax/wpCustomizeManager.php
index 6116aea2c4..15ee1f0d5c 100644
--- a/tests/ajax/CustomizeManager.php
+++ b/tests/ajax/wpCustomizeManager.php
@@ -2,12 +2,13 @@
 /**
  * Testing Ajax customize manager functionality.
  *
- * @package    WordPress
+ * @package WordPress
  * @subpackage UnitTests
- * @since      4.3.0
- * @group      ajax
+ * @since 4.3.0
+ *
+ * @group ajax
  */
-class Tests_Ajax_CustomizeManager extends WP_Ajax_UnitTestCase {
+class Tests_Ajax_wpCustomizeManager extends WP_Ajax_UnitTestCase {
 
 	/**
 	 * Instance of WP_Customize_Manager which is reset for each test.
@@ -132,7 +133,7 @@ class Tests_Ajax_CustomizeManager extends WP_Ajax_UnitTestCase {
 			$exception = $e;
 		}
 		$this->assertNotEmpty( $e );
-		$this->assertEquals( -1, $e->getMessage() );
+		$this->assertSame( '-1', $e->getMessage() );
 
 		// Not called setup_theme.
 		wp_set_current_user( self::$admin_user_id );
diff --git a/tests/ajax/CustomizeMenus.php b/tests/ajax/wpCustomizeNavMenus.php
similarity index 99%
rename from tests/ajax/CustomizeMenus.php
rename to tests/ajax/wpCustomizeNavMenus.php
index 92a1263919..db34c1c5d0 100644
--- a/tests/ajax/CustomizeMenus.php
+++ b/tests/ajax/wpCustomizeNavMenus.php
@@ -2,12 +2,13 @@
 /**
  * Testing Ajax customize menus functionality.
  *
- * @package    WordPress
+ * @package WordPress
  * @subpackage UnitTests
- * @since      4.3.0
- * @group      ajax
+ * @since 4.3.0
+ *
+ * @group ajax
  */
-class Tests_Ajax_CustomizeMenus extends WP_Ajax_UnitTestCase {
+class Tests_Ajax_wpCustomizeNavMenus extends WP_Ajax_UnitTestCase {
 
 	/**
 	 * Instance of WP_Customize_Manager which is reset for each test.
diff --git a/tests/block-supports/border.php b/tests/block-supports/border.php
index 204c8e43a0..aae4d4d2cc 100644
--- a/tests/block-supports/border.php
+++ b/tests/block-supports/border.php
@@ -10,12 +10,12 @@ class Test_Block_Supports_Border extends WP_UnitTestCase {
 	 */
 	private $test_block_name;
 
-	function set_up() {
+	public function set_up() {
 		parent::set_up();
 		$this->test_block_name = null;
 	}
 
-	function tear_down() {
+	public function tear_down() {
 		unregister_block_type( $this->test_block_name );
 		$this->test_block_name = null;
 		parent::set_up();
@@ -24,7 +24,7 @@ class Test_Block_Supports_Border extends WP_UnitTestCase {
 	/**
 	 * @ticket 55505
 	 */
-	function test_border_color_slug_with_numbers_is_kebab_cased_properly() {
+	public function test_border_color_slug_with_numbers_is_kebab_cased_properly() {
 		$this->test_block_name = 'test/border-color-slug-with-numbers-is-kebab-cased-properly';
 		register_block_type(
 			$this->test_block_name,
@@ -73,7 +73,7 @@ class Test_Block_Supports_Border extends WP_UnitTestCase {
 	/**
 	 * @ticket 55505
 	 */
-	function test_border_with_skipped_serialization_block_supports() {
+	public function test_border_with_skipped_serialization_block_supports() {
 		$this->test_block_name = 'test/border-with-skipped-serialization-block-supports';
 		register_block_type(
 			$this->test_block_name,
@@ -117,7 +117,7 @@ class Test_Block_Supports_Border extends WP_UnitTestCase {
 	/**
 	 * @ticket 55505
 	 */
-	function test_radius_with_individual_skipped_serialization_block_supports() {
+	public function test_radius_with_individual_skipped_serialization_block_supports() {
 		$this->test_block_name = 'test/radius-with-individual-skipped-serialization-block-supports';
 		register_block_type(
 			$this->test_block_name,
diff --git a/tests/block-supports/colors.php b/tests/block-supports/colors.php
index 109709e3d7..f9d302a741 100644
--- a/tests/block-supports/colors.php
+++ b/tests/block-supports/colors.php
@@ -10,12 +10,12 @@ class Tests_Block_Supports_Colors extends WP_UnitTestCase {
 	 */
 	private $test_block_name;
 
-	function set_up() {
+	public function set_up() {
 		parent::set_up();
 		$this->test_block_name = null;
 	}
 
-	function tear_down() {
+	public function tear_down() {
 		unregister_block_type( $this->test_block_name );
 		$this->test_block_name = null;
 		parent::set_up();
@@ -24,7 +24,7 @@ class Tests_Block_Supports_Colors extends WP_UnitTestCase {
 	/**
 	 * @ticket 54337
 	 */
-	function test_color_slugs_with_numbers_are_kebab_cased_properly() {
+	public function test_color_slugs_with_numbers_are_kebab_cased_properly() {
 		$this->test_block_name = 'test/color-slug-with-numbers';
 		register_block_type(
 			$this->test_block_name,
@@ -68,7 +68,7 @@ class Tests_Block_Supports_Colors extends WP_UnitTestCase {
 	/**
 	 * @ticket 55505
 	 */
-	function test_color_with_skipped_serialization_block_supports() {
+	public function test_color_with_skipped_serialization_block_supports() {
 		$this->test_block_name = 'test/color-with-skipped-serialization-block-supports';
 		register_block_type(
 			$this->test_block_name,
@@ -109,7 +109,7 @@ class Tests_Block_Supports_Colors extends WP_UnitTestCase {
 	/**
 	 * @ticket 55505
 	 */
-	function test_gradient_with_individual_skipped_serialization_block_supports() {
+	public function test_gradient_with_individual_skipped_serialization_block_supports() {
 		$this->test_block_name = 'test/gradient-with-individual-skipped-serialization-block-support';
 		register_block_type(
 			$this->test_block_name,
diff --git a/tests/block-supports/elements.php b/tests/block-supports/elements.php
index 97026f8092..be98fe590a 100644
--- a/tests/block-supports/elements.php
+++ b/tests/block-supports/elements.php
@@ -9,11 +9,11 @@ class Tests_Block_Supports_Elements extends WP_UnitTestCase {
 	 * Given a string containing a class prefixed by "wp-elements-" followed by a unique id,
 	 * this function returns a string where the id is one instead of being unique.
 	 *
-	 * @param  string $string String containing unique id classes.
-	 * @return string                String where the unique id classes were replaced with "wp-elements-1".
+	 * @param string $block_content String containing unique id classes.
+	 * @return string String where the unique id classes were replaced with "wp-elements-1".
 	 */
-	private static function make_unique_id_one( $string ) {
-		return preg_replace( '/wp-elements-[a-zA-Z0-9]+/', 'wp-elements-1', $string );
+	private static function make_unique_id_one( $block_content ) {
+		return preg_replace( '/wp-elements-[a-zA-Z0-9]+/', 'wp-elements-1', $block_content );
 	}
 
 	/**
diff --git a/tests/block-supports/layout.php b/tests/block-supports/layout.php
index 3611c28efa..bcc21775ba 100644
--- a/tests/block-supports/layout.php
+++ b/tests/block-supports/layout.php
@@ -32,7 +32,7 @@ class Test_Block_Supports_Layout extends WP_UnitTestCase {
 	 */
 	private $orig_theme_dir;
 
-	function set_up() {
+	public function set_up() {
 		parent::set_up();
 		$this->theme_root     = realpath( DIR_TESTDATA . '/themedir1' );
 		$this->orig_theme_dir = $GLOBALS['wp_theme_directories'];
@@ -50,7 +50,7 @@ class Test_Block_Supports_Layout extends WP_UnitTestCase {
 		unset( $GLOBALS['wp_themes'] );
 	}
 
-	function tear_down() {
+	public function tear_down() {
 		$GLOBALS['wp_theme_directories'] = $this->orig_theme_dir;
 
 		// Clear up the filters to modify the theme root.
@@ -63,14 +63,14 @@ class Test_Block_Supports_Layout extends WP_UnitTestCase {
 		parent::tear_down();
 	}
 
-	function filter_set_theme_root() {
+	public function filter_set_theme_root() {
 		return $this->theme_root;
 	}
 
 	/**
 	 * @ticket 55505
 	 */
-	function test_outer_container_not_restored_for_non_aligned_image_block_with_non_themejson_theme() {
+	public function test_outer_container_not_restored_for_non_aligned_image_block_with_non_themejson_theme() {
 		// The "default" theme doesn't have theme.json support.
 		switch_theme( 'default' );
 		$block         = array(
@@ -86,7 +86,7 @@ class Test_Block_Supports_Layout extends WP_UnitTestCase {
 	/**
 	 * @ticket 55505
 	 */
-	function test_outer_container_restored_for_aligned_image_block_with_non_themejson_theme() {
+	public function test_outer_container_restored_for_aligned_image_block_with_non_themejson_theme() {
 		// The "default" theme doesn't have theme.json support.
 		switch_theme( 'default' );
 		$block         = array(
@@ -107,7 +107,7 @@ class Test_Block_Supports_Layout extends WP_UnitTestCase {
 	 * @param string $block_image_html The block image HTML passed to `wp_restore_image_outer_container`.
 	 * @param string $expected         The expected block image HTML.
 	 */
-	function test_additional_styles_moved_to_restored_outer_container_for_aligned_image_block_with_non_themejson_theme( $block_image_html, $expected ) {
+	public function test_additional_styles_moved_to_restored_outer_container_for_aligned_image_block_with_non_themejson_theme( $block_image_html, $expected ) {
 		// The "default" theme doesn't have theme.json support.
 		switch_theme( 'default' );
 		$block = array(
@@ -160,7 +160,7 @@ class Test_Block_Supports_Layout extends WP_UnitTestCase {
 	/**
 	 * @ticket 55505
 	 */
-	function test_outer_container_not_restored_for_aligned_image_block_with_themejson_theme() {
+	public function test_outer_container_not_restored_for_aligned_image_block_with_themejson_theme() {
 		switch_theme( 'block-theme' );
 		$block         = array(
 			'blockName' => 'core/image',
diff --git a/tests/block-supports/spacing.php b/tests/block-supports/spacing.php
index e0a849cf6b..4b5ada3798 100644
--- a/tests/block-supports/spacing.php
+++ b/tests/block-supports/spacing.php
@@ -10,12 +10,12 @@ class Test_Block_Supports_Spacing extends WP_UnitTestCase {
 	 */
 	private $test_block_name;
 
-	function set_up() {
+	public function set_up() {
 		parent::set_up();
 		$this->test_block_name = null;
 	}
 
-	function tear_down() {
+	public function tear_down() {
 		unregister_block_type( $this->test_block_name );
 		$this->test_block_name = null;
 		parent::set_up();
@@ -24,7 +24,7 @@ class Test_Block_Supports_Spacing extends WP_UnitTestCase {
 	/**
 	 * @ticket 55505
 	 */
-	function test_spacing_style_is_applied() {
+	public function test_spacing_style_is_applied() {
 		$this->test_block_name = 'test/spacing-style-is-applied';
 		register_block_type(
 			$this->test_block_name,
@@ -72,7 +72,7 @@ class Test_Block_Supports_Spacing extends WP_UnitTestCase {
 	/**
 	 * @ticket 55505
 	 */
-	function test_spacing_with_skipped_serialization_block_supports() {
+	public function test_spacing_with_skipped_serialization_block_supports() {
 		$this->test_block_name = 'test/spacing-with-skipped-serialization-block-supports';
 		register_block_type(
 			$this->test_block_name,
@@ -119,7 +119,7 @@ class Test_Block_Supports_Spacing extends WP_UnitTestCase {
 	/**
 	 * @ticket 55505
 	 */
-	function test_margin_with_individual_skipped_serialization_block_supports() {
+	public function test_margin_with_individual_skipped_serialization_block_supports() {
 		$this->test_block_name = 'test/margin-with-individual-skipped-serialization-block-supports';
 		register_block_type(
 			$this->test_block_name,
diff --git a/tests/block-supports/typography.php b/tests/block-supports/typography.php
index 859f11c557..177a154b9e 100644
--- a/tests/block-supports/typography.php
+++ b/tests/block-supports/typography.php
@@ -1,8 +1,6 @@
 <?php
 /**
  * @group block-supports
- *
- * @covers ::wp_apply_typography_support
  */
 class Tests_Block_Supports_Typography extends WP_UnitTestCase {
 	/**
@@ -10,21 +8,67 @@ class Tests_Block_Supports_Typography extends WP_UnitTestCase {
 	 */
 	private $test_block_name;
 
-	function set_up() {
+	/**
+	 * Stores the current test theme root.
+	 *
+	 * @var string|null
+	 */
+	private $theme_root;
+
+	/**
+	 * Caches the original theme directory global value in order
+	 * to restore it in tear_down().
+	 *
+	 * @var string|null
+	 */
+	private $orig_theme_dir;
+
+	public function set_up() {
 		parent::set_up();
+
 		$this->test_block_name = null;
+
+		// Sets up the `wp-content/themes/` directory to ensure consistency when running tests.
+		$this->theme_root                = realpath( DIR_TESTDATA . '/themedir1' );
+		$this->orig_theme_dir            = $GLOBALS['wp_theme_directories'];
+		$GLOBALS['wp_theme_directories'] = array( WP_CONTENT_DIR . '/themes', $this->theme_root );
+
+		$theme_root_callback = function () {
+			return $this->theme_root;
+		};
+		add_filter( 'theme_root', $theme_root_callback );
+		add_filter( 'stylesheet_root', $theme_root_callback );
+		add_filter( 'template_root', $theme_root_callback );
+
+		// Clear caches.
+		wp_clean_themes_cache();
+		unset( $GLOBALS['wp_themes'] );
 	}
 
-	function tear_down() {
+	/**
+	 * Unregisters block type after each test.
+	 */
+	public function tear_down() {
+		// Restores the original theme directory setup.
+		$GLOBALS['wp_theme_directories'] = $this->orig_theme_dir;
+		wp_clean_themes_cache();
+		unset( $GLOBALS['wp_themes'] );
+
+		// Resets test block name.
 		unregister_block_type( $this->test_block_name );
 		$this->test_block_name = null;
-		parent::set_up();
+
+		parent::tear_down();
 	}
 
 	/**
+	 * Tests whether slugs with numbers are kebab cased.
+	 *
 	 * @ticket 54337
+	 *
+	 * @covers ::wp_apply_typography_support
 	 */
-	function test_font_size_slug_with_numbers_is_kebab_cased_properly() {
+	public function test_should_kebab_case_font_size_slug_with_numbers() {
 		$this->test_block_name = 'test/font-size-slug-with-numbers';
 		register_block_type(
 			$this->test_block_name,
@@ -52,10 +96,15 @@ class Tests_Block_Supports_Typography extends WP_UnitTestCase {
 
 		$this->assertSame( $expected, $actual );
 	}
+
 	/**
+	 * Tests legacy inline styles for font family.
+	 *
 	 * @ticket 54337
+	 *
+	 * @covers ::wp_apply_typography_support
 	 */
-	function test_font_family_with_legacy_inline_styles_using_a_value() {
+	public function test_should_generate_font_family_with_legacy_inline_styles_using_a_value() {
 		$this->test_block_name = 'test/font-family-with-inline-styles-using-value';
 		register_block_type(
 			$this->test_block_name,
@@ -78,15 +127,19 @@ class Tests_Block_Supports_Typography extends WP_UnitTestCase {
 		$block_atts = array( 'style' => array( 'typography' => array( 'fontFamily' => 'serif' ) ) );
 
 		$actual   = wp_apply_typography_support( $block_type, $block_atts );
-		$expected = array( 'style' => 'font-family: serif;' );
+		$expected = array( 'style' => 'font-family:serif;' );
 
 		$this->assertSame( $expected, $actual );
 	}
 
 	/**
+	 * Tests skipping serialization.
+	 *
 	 * @ticket 55505
+	 *
+	 * @covers ::wp_apply_typography_support
 	 */
-	function test_typography_with_skipped_serialization_block_supports() {
+	public function test_should_skip_serialization_for_typography_block_supports() {
 		$this->test_block_name = 'test/typography-with-skipped-serialization-block-supports';
 		register_block_type(
 			$this->test_block_name,
@@ -128,10 +181,14 @@ class Tests_Block_Supports_Typography extends WP_UnitTestCase {
 	}
 
 	/**
+	 * Tests skipping serialization of individual block supports properties.
+	 *
 	 * @ticket 55505
+	 *
+	 * @covers ::wp_apply_typography_support
 	 */
-	function test_letter_spacing_with_individual_skipped_serialization_block_supports() {
-		$this->test_block_name = 'test/letter-spacing-with-individua-skipped-serialization-block-supports';
+	public function test_should_skip_serialization_for_letter_spacing_block_supports() {
+		$this->test_block_name = 'test/letter-spacing-with-individual-skipped-serialization-block-supports';
 		register_block_type(
 			$this->test_block_name,
 			array(
@@ -160,10 +217,15 @@ class Tests_Block_Supports_Typography extends WP_UnitTestCase {
 
 		$this->assertSame( $expected, $actual );
 	}
+
 	/**
+	 * Tests legacy css var inline styles for font family.
+	 *
 	 * @ticket 54337
+	 *
+	 * @covers ::wp_apply_typography_support
 	 */
-	function test_font_family_with_legacy_inline_styles_using_a_css_var() {
+	public function test_should_generate_css_var_for_font_family_with_legacy_inline_styles() {
 		$this->test_block_name = 'test/font-family-with-inline-styles-using-css-var';
 		register_block_type(
 			$this->test_block_name,
@@ -186,14 +248,19 @@ class Tests_Block_Supports_Typography extends WP_UnitTestCase {
 		$block_atts = array( 'style' => array( 'typography' => array( 'fontFamily' => 'var:preset|font-family|h1' ) ) );
 
 		$actual   = wp_apply_typography_support( $block_type, $block_atts );
-		$expected = array( 'style' => 'font-family: var(--wp--preset--font-family--h-1);' );
+		$expected = array( 'style' => 'font-family:var(--wp--preset--font-family--h-1);' );
 
 		$this->assertSame( $expected, $actual );
 	}
+
 	/**
+	 * Tests that a classname is generated for font family.
+	 *
 	 * @ticket 54337
+	 *
+	 * @covers ::wp_apply_typography_support
 	 */
-	function test_font_family_with_class() {
+	public function test_should_generate_classname_for_font_family() {
 		$this->test_block_name = 'test/font-family-with-class';
 		register_block_type(
 			$this->test_block_name,
@@ -221,4 +288,551 @@ class Tests_Block_Supports_Typography extends WP_UnitTestCase {
 		$this->assertSame( $expected, $actual );
 	}
 
+	/**
+	 * Tests generating font size values, including fluid formulae, from fontSizes preset.
+	 *
+	 * @ticket 56467
+	 * @ticket 57065
+	 *
+	 * @covers ::wp_get_typography_font_size_value
+	 *
+	 * @dataProvider data_generate_font_size_preset_fixtures
+	 *
+	 * @param array  $font_size_preset            {
+	 *      Required. fontSizes preset value as seen in theme.json.
+	 *
+	 *     @type string $name Name of the font size preset.
+	 *     @type string $slug Kebab-case unique identifier for the font size preset.
+	 *     @type string $size CSS font-size value, including units where applicable.
+	 * }
+	 * @param bool   $should_use_fluid_typography An override to switch fluid typography "on". Can be used for unit testing.
+	 * @param string $expected_output             Expected output.
+	 */
+	public function test_wp_get_typography_font_size_value( $font_size_preset, $should_use_fluid_typography, $expected_output ) {
+		$actual = wp_get_typography_font_size_value( $font_size_preset, $should_use_fluid_typography );
+
+		$this->assertSame( $expected_output, $actual );
+	}
+
+	/**
+	 * Data provider.
+	 *
+	 * @return array
+	 */
+	public function data_generate_font_size_preset_fixtures() {
+		return array(
+			'returns value when fluid typography is deactivated' => array(
+				'font_size_preset'            => array(
+					'size' => '28px',
+				),
+				'should_use_fluid_typography' => false,
+				'expected_output'             => '28px',
+			),
+
+			'returns value where font size is 0'         => array(
+				'font_size_preset'            => array(
+					'size' => 0,
+				),
+				'should_use_fluid_typography' => true,
+				'expected_output'             => 0,
+			),
+
+			"returns value where font size is '0'"       => array(
+				'font_size_preset'            => array(
+					'size' => '0',
+				),
+				'should_use_fluid_typography' => true,
+				'expected_output'             => '0',
+			),
+
+			'returns value where `size` is `null`'       => array(
+				'font_size_preset'            => array(
+					'size' => null,
+				),
+				'should_use_fluid_typography' => false,
+				'expected_output'             => null,
+			),
+
+			'returns value when fluid is `false`'        => array(
+				'font_size_preset'            => array(
+					'size'  => '28px',
+					'fluid' => false,
+				),
+				'should_use_fluid_typography' => true,
+				'expected_output'             => '28px',
+			),
+
+			'returns already clamped value'              => array(
+				'font_size_preset'            => array(
+					'size'  => 'clamp(21px, 1.313rem + ((1vw - 7.68px) * 2.524), 42px)',
+					'fluid' => false,
+				),
+				'should_use_fluid_typography' => true,
+				'expected_output'             => 'clamp(21px, 1.313rem + ((1vw - 7.68px) * 2.524), 42px)',
+			),
+
+			'returns value with unsupported unit'        => array(
+				'font_size_preset'            => array(
+					'size'  => '1000%',
+					'fluid' => false,
+				),
+				'should_use_fluid_typography' => true,
+				'expected_output'             => '1000%',
+			),
+
+			'returns clamp value with rem min and max units' => array(
+				'font_size_preset'            => array(
+					'size' => '1.75rem',
+				),
+				'should_use_fluid_typography' => true,
+				'expected_output'             => 'clamp(1.313rem, 1.313rem + ((1vw - 0.48rem) * 0.84), 1.75rem)',
+			),
+
+			'returns clamp value with em min and max units' => array(
+				'font_size'                   => array(
+					'size' => '1.75em',
+				),
+				'should_use_fluid_typography' => true,
+				'expected_output'             => 'clamp(1.313em, 1.313rem + ((1vw - 0.48em) * 0.84), 1.75em)',
+			),
+
+			'returns clamp value for floats'             => array(
+				'font_size'                   => array(
+					'size' => '100.175px',
+				),
+				'should_use_fluid_typography' => true,
+				'expected_output'             => 'clamp(75.131px, 4.696rem + ((1vw - 7.68px) * 3.01), 100.175px)',
+			),
+
+			'coerces integer to `px` and returns clamp value' => array(
+				'font_size_preset'            => array(
+					'size' => 33,
+				),
+				'should_use_fluid_typography' => true,
+				'expected_output'             => 'clamp(24.75px, 1.547rem + ((1vw - 7.68px) * 0.992), 33px)',
+			),
+
+			'coerces float to `px` and returns clamp value' => array(
+				'font_size_preset'            => array(
+					'size' => 100.23,
+				),
+				'should_use_fluid_typography' => true,
+				'expected_output'             => 'clamp(75.173px, 4.698rem + ((1vw - 7.68px) * 3.012), 100.23px)',
+			),
+
+			'returns clamp value when `fluid` is empty array' => array(
+				'font_size_preset'            => array(
+					'size'  => '28px',
+					'fluid' => array(),
+				),
+				'should_use_fluid_typography' => true,
+				'expected_output'             => 'clamp(21px, 1.313rem + ((1vw - 7.68px) * 0.841), 28px)',
+			),
+
+			'returns clamp value when `fluid` is `null`' => array(
+				'font_size_preset'            => array(
+					'size'  => '28px',
+					'fluid' => null,
+				),
+				'should_use_fluid_typography' => true,
+				'expected_output'             => 'clamp(21px, 1.313rem + ((1vw - 7.68px) * 0.841), 28px)',
+			),
+
+			'returns clamp value if min font size is greater than max' => array(
+				'font_size_preset'            => array(
+					'size'  => '3rem',
+					'fluid' => array(
+						'min' => '5rem',
+						'max' => '32px',
+					),
+				),
+				'should_use_fluid_typography' => true,
+				'expected_output'             => 'clamp(5rem, 5rem + ((1vw - 0.48rem) * -5.769), 32px)',
+			),
+
+			'returns value with invalid min/max fluid units' => array(
+				'font_size_preset'            => array(
+					'size'  => '10em',
+					'fluid' => array(
+						'min' => '20vw',
+						'max' => '50%',
+					),
+				),
+				'should_use_fluid_typography' => true,
+				'expected_output'             => '10em',
+			),
+
+			'returns value when size is < lower bounds and no fluid min/max set' => array(
+				'font_size_preset'            => array(
+					'size' => '3px',
+				),
+				'should_use_fluid_typography' => true,
+				'expected_output'             => '3px',
+			),
+
+			'returns value when size is equal to lower bounds and no fluid min/max set' => array(
+				'font_size'                   => array(
+					'size' => '14px',
+				),
+				'should_use_fluid_typography' => true,
+				'expected_output'             => '14px',
+			),
+
+			'returns clamp value with different min max units' => array(
+				'font_size_preset'            => array(
+					'size'  => '28px',
+					'fluid' => array(
+						'min' => '20px',
+						'max' => '50rem',
+					),
+				),
+				'should_use_fluid_typography' => true,
+				'expected_output'             => 'clamp(20px, 1.25rem + ((1vw - 7.68px) * 93.75), 50rem)',
+			),
+
+			'returns clamp value where no fluid max size is set' => array(
+				'font_size_preset'            => array(
+					'size'  => '28px',
+					'fluid' => array(
+						'min' => '2.6rem',
+					),
+				),
+				'should_use_fluid_typography' => true,
+				'expected_output'             => 'clamp(2.6rem, 2.6rem + ((1vw - 0.48rem) * -1.635), 28px)',
+			),
+
+			'returns clamp value where no fluid min size is set' => array(
+				'font_size_preset'            => array(
+					'size'  => '28px',
+					'fluid' => array(
+						'max' => '80px',
+					),
+				),
+				'should_use_fluid_typography' => true,
+				'expected_output'             => 'clamp(21px, 1.313rem + ((1vw - 7.68px) * 7.091), 80px)',
+			),
+
+			'should not apply lower bound test when fluid values are set' => array(
+				'font_size_preset'            => array(
+					'size'  => '1.5rem',
+					'fluid' => array(
+						'min' => '0.5rem',
+						'max' => '5rem',
+					),
+				),
+				'should_use_fluid_typography' => true,
+				'expected_output'             => 'clamp(0.5rem, 0.5rem + ((1vw - 0.48rem) * 8.654), 5rem)',
+			),
+
+			'should not apply lower bound test when only fluid min is set' => array(
+				'font_size'                   => array(
+					'size'  => '20px',
+					'fluid' => array(
+						'min' => '12px',
+					),
+				),
+				'should_use_fluid_typography' => true,
+				'expected_output'             => 'clamp(12px, 0.75rem + ((1vw - 7.68px) * 0.962), 20px)',
+			),
+
+			'should not apply lower bound test when only fluid max is set' => array(
+				'font_size'                   => array(
+					'size'  => '0.875rem',
+					'fluid' => array(
+						'max' => '20rem',
+					),
+				),
+				'should_use_fluid_typography' => true,
+				'expected_output'             => 'clamp(0.875rem, 0.875rem + ((1vw - 0.48rem) * 36.779), 20rem)',
+			),
+
+			'returns clamp value when min and max font sizes are equal' => array(
+				'font_size_preset'            => array(
+					'size'  => '4rem',
+					'fluid' => array(
+						'min' => '30px',
+						'max' => '30px',
+					),
+				),
+				'should_use_fluid_typography' => true,
+				'expected_output'             => 'clamp(30px, 1.875rem + ((1vw - 7.68px) * 1), 30px)',
+			),
+		);
+	}
+
+	/**
+	 * Tests that custom font sizes are converted to fluid values
+	 * in inline block supports styles
+	 * when "settings.typography.fluid" is set to true.
+	 *
+	 * @ticket 56467
+	 * @ticket 57065
+	 *
+	 * @covers ::wp_register_typography_support
+	 *
+	 * @dataProvider data_generate_block_supports_font_size_fixtures
+	 *
+	 * @param string $font_size_value             The block supports custom font size value.
+	 * @param bool   $should_use_fluid_typography An override to switch fluid typography "on". Can be used for unit testing.
+	 * @param string $expected_output             Expected value of style property from wp_apply_typography_support().
+	 */
+	public function test_should_covert_font_sizes_to_fluid_values( $font_size_value, $should_use_fluid_typography, $expected_output ) {
+		if ( $should_use_fluid_typography ) {
+			switch_theme( 'block-theme-child-with-fluid-typography' );
+		} else {
+			switch_theme( 'default' );
+		}
+
+		$this->test_block_name = 'test/font-size-fluid-value';
+		register_block_type(
+			$this->test_block_name,
+			array(
+				'api_version' => 2,
+				'attributes'  => array(
+					'style' => array(
+						'type' => 'object',
+					),
+				),
+				'supports'    => array(
+					'typography' => array(
+						'fontSize' => true,
+					),
+				),
+			)
+		);
+		$registry         = WP_Block_Type_Registry::get_instance();
+		$block_type       = $registry->get_registered( $this->test_block_name );
+		$block_attributes = array(
+			'style' => array(
+				'typography' => array(
+					'fontSize' => $font_size_value,
+				),
+			),
+		);
+
+		$actual   = wp_apply_typography_support( $block_type, $block_attributes );
+		$expected = array( 'style' => $expected_output );
+
+		$this->assertSame( $expected, $actual );
+	}
+
+	/**
+	 * Data provider for test_should_covert_font_sizes_to_fluid_values().
+	 *
+	 * @return array
+	 */
+	public function data_generate_block_supports_font_size_fixtures() {
+		return array(
+			'default_return_value'               => array(
+				'font_size_value'             => '50px',
+				'should_use_fluid_typography' => false,
+				'expected_output'             => 'font-size:50px;',
+			),
+			'return_value_with_fluid_typography' => array(
+				'font_size_value'             => '50px',
+				'should_use_fluid_typography' => true,
+				'expected_output'             => 'font-size:clamp(37.5px, 2.344rem + ((1vw - 7.68px) * 1.502), 50px);',
+			),
+		);
+	}
+
+	/**
+	 * Tests that a block element's custom font size in the inline style attribute
+	 * is replaced with a fluid value when "settings.typography.fluid" is set to true,
+	 * and the correct block content is generated.
+	 *
+	 * @ticket 56467
+	 * @ticket 57065
+	 *
+	 * @dataProvider data_generate_replace_inline_font_styles_with_fluid_values_fixtures
+	 *
+	 * @param string $block_content               HTML block content.
+	 * @param string $font_size_value             The block supports custom font size value.
+	 * @param bool   $should_use_fluid_typography An override to switch fluid typography "on". Can be used for unit testing.
+	 * @param string $expected_output             Expected value of style property from wp_apply_typography_support().
+	 */
+	public function test_should_replace_inline_font_styles_with_fluid_values( $block_content, $font_size_value, $should_use_fluid_typography, $expected_output ) {
+		if ( $should_use_fluid_typography ) {
+			switch_theme( 'block-theme-child-with-fluid-typography' );
+		} else {
+			switch_theme( 'default' );
+		}
+
+		$block  = array(
+			'blockName' => 'core/image',
+			'attrs'     => array(
+				'style' => array(
+					'typography' => array(
+						'fontSize' => $font_size_value,
+					),
+				),
+			),
+		);
+		$actual = wp_render_typography_support( $block_content, $block );
+
+		$this->assertSame( $expected_output, $actual );
+	}
+
+	/**
+	 * Data provider for test_should_replace_inline_font_styles_with_fluid_values().
+	 *
+	 * @return array
+	 */
+	public function data_generate_replace_inline_font_styles_with_fluid_values_fixtures() {
+		return array(
+			'default_return_content'                       => array(
+				'block_content'               => '<h2 class="has-vivid-red-background-color has-background has-link-color" style="margin-top:var(--wp--preset--spacing--60);font-size:4rem;font-style:normal;font-weight:600;letter-spacing:29px;text-decoration:underline;text-transform:capitalize">This is a heading</h2>',
+				'font_size_value'             => '4rem',
+				'should_use_fluid_typography' => false,
+				'expected_output'             => '<h2 class="has-vivid-red-background-color has-background has-link-color" style="margin-top:var(--wp--preset--spacing--60);font-size:4rem;font-style:normal;font-weight:600;letter-spacing:29px;text-decoration:underline;text-transform:capitalize">This is a heading</h2>',
+			),
+			'return_content_with_replaced_fluid_font_size_inline_style' => array(
+				'block_content'               => '<h2 class="has-vivid-red-background-color has-background has-link-color" style="margin-top:var(--wp--preset--spacing--60);font-size:4rem;font-style:normal;font-weight:600;letter-spacing:29px;text-decoration:underline;text-transform:capitalize">This is a heading</h2>',
+				'font_size_value'             => '4rem',
+				'should_use_fluid_typography' => true,
+				'expected_output'             => '<h2 class="has-vivid-red-background-color has-background has-link-color" style="margin-top:var(--wp--preset--spacing--60);font-size:clamp(3rem, 3rem + ((1vw - 0.48rem) * 1.923), 4rem);font-style:normal;font-weight:600;letter-spacing:29px;text-decoration:underline;text-transform:capitalize">This is a heading</h2>',
+			),
+			'return_content_if_no_inline_font_size_found'  => array(
+				'block_content'               => '<p class="has-medium-font-size" style="font-style:normal;font-weight:600;letter-spacing:29px;">A paragraph inside a group</p>',
+				'font_size_value'             => '20px',
+				'should_use_fluid_typography' => true,
+				'expected_output'             => '<p class="has-medium-font-size" style="font-style:normal;font-weight:600;letter-spacing:29px;">A paragraph inside a group</p>',
+			),
+			'return_content_css_var'                       => array(
+				'block_content'               => '<p class="has-medium-font-size" style="font-size:var(--wp--preset--font-size--x-large);">A paragraph inside a group</p>',
+				'font_size_value'             => 'var:preset|font-size|x-large',
+				'should_use_fluid_typography' => true,
+				'expected_output'             => '<p class="has-medium-font-size" style="font-size:var(--wp--preset--font-size--x-large);">A paragraph inside a group</p>',
+			),
+			'return_content_with_spaces'                   => array(
+				'block_content'               => '<p class="has-medium-font-size" style="    font-size:   20px   ;    ">A paragraph inside a group</p>',
+				'font_size_value'             => '20px',
+				'should_use_fluid_typography' => true,
+				'expected_output'             => '<p class="has-medium-font-size" style="    font-size:clamp(15px, 0.938rem + ((1vw - 7.68px) * 0.601), 20px);    ">A paragraph inside a group</p>',
+			),
+			'return_content_with_first_match_replace_only' => array(
+				'block_content'               => "<div class=\"wp-block-group\" style=\"font-size:1.5em\"> \n \n<p style=\"font-size:1.5em\">A paragraph inside a group</p></div>",
+				'font_size_value'             => '1.5em',
+				'should_use_fluid_typography' => true,
+				'expected_output'             => "<div class=\"wp-block-group\" style=\"font-size:clamp(1.125em, 1.125rem + ((1vw - 0.48em) * 0.721), 1.5em);\"> \n \n<p style=\"font-size:1.5em\">A paragraph inside a group</p></div>",
+			),
+		);
+	}
+
+	/**
+	 * Tests that valid font size values are parsed.
+	 *
+	 * @ticket 56467
+	 *
+	 * @covers ::wp_get_typography_value_and_unit
+	 *
+	 * @dataProvider data_valid_size_wp_get_typography_value_and_unit
+	 *
+	 * @param mixed $raw_value Raw size value to test.
+	 * @param mixed $expected  An expected return value.
+	 */
+	public function test_valid_size_wp_get_typography_value_and_unit( $raw_value, $expected ) {
+		$this->assertEquals( $expected, wp_get_typography_value_and_unit( $raw_value ) );
+	}
+
+	/**
+	 * Data provider for test_valid_size_wp_get_typography_value_and_unit().
+	 *
+	 * @return array
+	 */
+	public function data_valid_size_wp_get_typography_value_and_unit() {
+		return array(
+			'size: 10vh with default units do not match' => array(
+				'raw_value' => '10vh',
+				'expected'  => null,
+			),
+			'size: calc() values do not match'           => array(
+				'raw_value' => 'calc(2 * 10px)',
+				'expected'  => null,
+			),
+			'size: clamp() values do not match'          => array(
+				'raw_value' => 'clamp(15px, 0.9375rem + ((1vw - 7.68px) * 5.409), 60px)',
+				'expected'  => null,
+			),
+			'size: `"10"`'                               => array(
+				'raw_value' => '10',
+				'expected'  => array(
+					'value' => 10,
+					'unit'  => 'px',
+				),
+			),
+			'size: `11`'                                 => array(
+				'raw_value' => 11,
+				'expected'  => array(
+					'value' => 11,
+					'unit'  => 'px',
+				),
+			),
+			'size: `11.234`'                             => array(
+				'raw_value' => '11.234',
+				'expected'  => array(
+					'value' => 11.234,
+					'unit'  => 'px',
+				),
+			),
+			'size: `"12rem"`'                            => array(
+				'raw_value' => '12rem',
+				'expected'  => array(
+					'value' => 12,
+					'unit'  => 'rem',
+				),
+			),
+			'size: `"12px"`'                             => array(
+				'raw_value' => '12px',
+				'expected'  => array(
+					'value' => 12,
+					'unit'  => 'px',
+				),
+			),
+			'size: `"12em"`'                             => array(
+				'raw_value' => '12em',
+				'expected'  => array(
+					'value' => 12,
+					'unit'  => 'em',
+				),
+			),
+			'size: `"12.74em"`'                          => array(
+				'raw_value' => '12.74em',
+				'expected'  => array(
+					'value' => 12.74,
+					'unit'  => 'em',
+				),
+			),
+		);
+	}
+
+	/**
+	 * Tests that invalid font size values are not parsed and trigger incorrect usage.
+	 *
+	 * @ticket 56467
+	 *
+	 * @covers ::wp_get_typography_value_and_unit
+	 *
+	 * @dataProvider data_invalid_size_wp_get_typography_value_and_unit
+	 * @expectedIncorrectUsage wp_get_typography_value_and_unit
+	 *
+	 * @param mixed $raw_value Raw size value to test.
+	 */
+	public function test_invalid_size_wp_get_typography_value_and_unit( $raw_value ) {
+		$this->assertNull( wp_get_typography_value_and_unit( $raw_value ) );
+	}
+
+	/**
+	 * Data provider for test_invalid_size_wp_get_typography_value_and_unit().
+	 *
+	 * @return array
+	 */
+	public function data_invalid_size_wp_get_typography_value_and_unit() {
+		return array(
+			'size: null'  => array( null ),
+			'size: false' => array( false ),
+			'size: true'  => array( true ),
+			'size: array' => array( array( '10' ) ),
+		);
+	}
 }
diff --git a/tests/block-supports/wpGetLayoutStyle.php b/tests/block-supports/wpGetLayoutStyle.php
new file mode 100644
index 0000000000..6ac4d05a96
--- /dev/null
+++ b/tests/block-supports/wpGetLayoutStyle.php
@@ -0,0 +1,267 @@
+<?php
+
+/**
+ * @group block-supports
+ * @covers ::wp_get_layout_style
+ */
+class Tests_Block_Supports_WpGetLayoutStyle extends WP_UnitTestCase {
+	const ARGS_DEFAULTS = array(
+		'selector'                      => null,
+		'layout'                        => null,
+		'has_block_gap_support'         => false,
+		'gap_value'                     => null,
+		'should_skip_gap_serialization' => false,
+		'fallback_gap_value'            => '0.5em',
+		'block_spacing'                 => null,
+	);
+
+	/**
+	 * @dataProvider data_wp_get_layout_style
+	 * @ticket       56467
+	 *
+	 * @param array  $args            Dataset to test.
+	 * @param string $expected_output The expected output.
+	 */
+	public function test_wp_get_layout_style( array $args, $expected_output ) {
+		$args          = array_merge( static::ARGS_DEFAULTS, $args );
+		$layout_styles = wp_get_layout_style(
+			$args['selector'],
+			$args['layout'],
+			$args['has_block_gap_support'],
+			$args['gap_value'],
+			$args['should_skip_gap_serialization'],
+			$args['fallback_gap_value'],
+			$args['block_spacing']
+		);
+
+		$this->assertSame( $expected_output, $layout_styles );
+	}
+
+	/**
+	 * Data provider.
+	 *
+	 * @return array
+	 */
+	public function data_wp_get_layout_style() {
+		return array(
+			'no args should return empty value'            => array(
+				'args'            => array(),
+				'expected_output' => '',
+			),
+			'nulled args should return empty value'        => array(
+				'args'            => array(
+					'selector'                      => null,
+					'layout'                        => null,
+					'has_block_gap_support'         => null,
+					'gap_value'                     => null,
+					'should_skip_gap_serialization' => null,
+					'fallback_gap_value'            => null,
+					'block_spacing'                 => null,
+				),
+				'expected_output' => '',
+			),
+			'only selector should return empty value'      => array(
+				'args'            => array(
+					'selector' => '.wp-layout',
+				),
+				'expected_output' => '',
+			),
+			'default layout and block gap support'         => array(
+				'args'            => array(
+					'selector'              => '.wp-layout',
+					'has_block_gap_support' => true,
+					'gap_value'             => '1em',
+				),
+				'expected_output' => '.wp-layout > *{margin-block-start:0;margin-block-end:0;}.wp-layout.wp-layout > * + *{margin-block-start:1em;margin-block-end:0;}',
+			),
+			'skip serialization should return empty value' => array(
+				'args'            => array(
+					'selector'                      => '.wp-layout',
+					'has_block_gap_support'         => true,
+					'gap_value'                     => '1em',
+					'should_skip_gap_serialization' => true,
+				),
+				'expected_output' => '',
+			),
+			'default layout and axial block gap support'   => array(
+				'args'            => array(
+					'selector'              => '.wp-layout',
+					'has_block_gap_support' => true,
+					'gap_value'             => array( 'top' => '1em' ),
+				),
+				'expected_output' => '.wp-layout > *{margin-block-start:0;margin-block-end:0;}.wp-layout.wp-layout > * + *{margin-block-start:1em;margin-block-end:0;}',
+			),
+			'constrained layout with sizes'                => array(
+				'args'            => array(
+					'selector' => '.wp-layout',
+					'layout'   => array(
+						'type'        => 'constrained',
+						'contentSize' => '800px',
+						'wideSize'    => '1200px',
+					),
+				),
+				'expected_output' => '.wp-layout > :where(:not(.alignleft):not(.alignright):not(.alignfull)){max-width:800px;margin-left:auto !important;margin-right:auto !important;}.wp-layout > .alignwide{max-width:1200px;}.wp-layout .alignfull{max-width:none;}',
+			),
+			'constrained layout with sizes and block spacing' => array(
+				'args'            => array(
+					'selector'      => '.wp-layout',
+					'layout'        => array(
+						'type'        => 'constrained',
+						'contentSize' => '800px',
+						'wideSize'    => '1200px',
+					),
+					'block_spacing' => array(
+						'padding' => array(
+							'left'  => '20px',
+							'right' => '10px',
+						),
+					),
+				),
+				'expected_output' => '.wp-layout > :where(:not(.alignleft):not(.alignright):not(.alignfull)){max-width:800px;margin-left:auto !important;margin-right:auto !important;}.wp-layout > .alignwide{max-width:1200px;}.wp-layout .alignfull{max-width:none;}.wp-layout > .alignfull{margin-right:calc(10px * -1);margin-left:calc(20px * -1);}',
+			),
+			'constrained layout with block gap support'    => array(
+				'args'            => array(
+					'selector'              => '.wp-layout',
+					'layout'                => array(
+						'type' => 'constrained',
+					),
+					'has_block_gap_support' => true,
+					'gap_value'             => '2.5rem',
+				),
+				'expected_output' => '.wp-layout > *{margin-block-start:0;margin-block-end:0;}.wp-layout.wp-layout > * + *{margin-block-start:2.5rem;margin-block-end:0;}',
+			),
+			'constrained layout with axial block gap support' => array(
+				'args'            => array(
+					'selector'              => '.wp-layout',
+					'layout'                => array(
+						'type' => 'constrained',
+					),
+					'has_block_gap_support' => true,
+					'gap_value'             => array( 'top' => '2.5rem' ),
+				),
+				'expected_output' => '.wp-layout > *{margin-block-start:0;margin-block-end:0;}.wp-layout.wp-layout > * + *{margin-block-start:2.5rem;margin-block-end:0;}',
+			),
+			'constrained layout with block gap support and spacing preset' => array(
+				'args'            => array(
+					'selector'              => '.wp-layout',
+					'layout'                => array(
+						'type' => 'constrained',
+					),
+					'has_block_gap_support' => true,
+					'gap_value'             => 'var:preset|spacing|50',
+				),
+				'expected_output' => '.wp-layout > *{margin-block-start:0;margin-block-end:0;}.wp-layout.wp-layout > * + *{margin-block-start:var(--wp--preset--spacing--50);margin-block-end:0;}',
+			),
+			'flex layout with no args should return empty value' => array(
+				'args'            => array(
+					'selector' => '.wp-layout',
+					'layout'   => array(
+						'type' => 'flex',
+					),
+				),
+				'expected_output' => '',
+			),
+			'horizontal flex layout should return empty value' => array(
+				'args'            => array(
+					'selector' => '.wp-layout',
+					'layout'   => array(
+						'type'        => 'flex',
+						'orientation' => 'horizontal',
+					),
+				),
+				'expected_output' => '',
+			),
+			'flex layout with properties'                  => array(
+				'args'            => array(
+					'selector' => '.wp-layout',
+					'layout'   => array(
+						'type'              => 'flex',
+						'orientation'       => 'horizontal',
+						'flexWrap'          => 'nowrap',
+						'justifyContent'    => 'left',
+						'verticalAlignment' => 'bottom',
+					),
+				),
+				'expected_output' => '.wp-layout{flex-wrap:nowrap;justify-content:flex-start;align-items:flex-end;}',
+			),
+			'flex layout with properties and block gap'    => array(
+				'args'            => array(
+					'selector'              => '.wp-layout',
+					'layout'                => array(
+						'type'              => 'flex',
+						'orientation'       => 'horizontal',
+						'flexWrap'          => 'nowrap',
+						'justifyContent'    => 'left',
+						'verticalAlignment' => 'bottom',
+					),
+					'has_block_gap_support' => true,
+					'gap_value'             => '29px',
+				),
+				'expected_output' => '.wp-layout{flex-wrap:nowrap;gap:29px;justify-content:flex-start;align-items:flex-end;}',
+			),
+			'flex layout with properties and axial block gap' => array(
+				'args'            => array(
+					'selector'              => '.wp-layout',
+					'layout'                => array(
+						'type'              => 'flex',
+						'orientation'       => 'horizontal',
+						'flexWrap'          => 'nowrap',
+						'justifyContent'    => 'left',
+						'verticalAlignment' => 'bottom',
+					),
+					'has_block_gap_support' => true,
+					'gap_value'             => array(
+						'top'  => '1px',
+						'left' => '2px',
+					),
+				),
+				'expected_output' => '.wp-layout{flex-wrap:nowrap;gap:1px 2px;justify-content:flex-start;align-items:flex-end;}',
+			),
+			'flex layout with properties and axial block gap using spacing preset' => array(
+				'args'            => array(
+					'selector'              => '.wp-layout',
+					'layout'                => array(
+						'type'              => 'flex',
+						'orientation'       => 'horizontal',
+						'flexWrap'          => 'nowrap',
+						'justifyContent'    => 'left',
+						'verticalAlignment' => 'bottom',
+					),
+					'has_block_gap_support' => true,
+					'gap_value'             => array(
+						'left' => 'var:preset|spacing|40',
+					),
+					'fallback_gap_value'    => '11px',
+				),
+				'expected_output' => '.wp-layout{flex-wrap:nowrap;gap:11px var(--wp--preset--spacing--40);justify-content:flex-start;align-items:flex-end;}',
+			),
+			'vertical flex layout with properties'         => array(
+				'args'            => array(
+					'selector' => '.wp-layout',
+					'layout'   => array(
+						'type'              => 'flex',
+						'orientation'       => 'vertical',
+						'flexWrap'          => 'nowrap',
+						'justifyContent'    => 'left',
+						'verticalAlignment' => 'bottom',
+					),
+				),
+				'expected_output' => '.wp-layout{flex-wrap:nowrap;flex-direction:column;align-items:flex-start;}',
+			),
+			'default layout with blockGap to verify converting gap value into valid CSS' => array(
+				'args'            => array(
+					'selector'              => '.wp-block-group.wp-container-6',
+					'layout'                => array(
+						'type' => 'default',
+					),
+					'has_block_gap_support' => true,
+					'gap_value'             => 'var:preset|spacing|70',
+					'block_spacing'         => array(
+						'blockGap' => 'var(--wp--preset--spacing--70)',
+					),
+				),
+				'expected_output' => '.wp-block-group.wp-container-6 > *{margin-block-start:0;margin-block-end:0;}.wp-block-group.wp-container-6.wp-block-group.wp-container-6 > * + *{margin-block-start:var(--wp--preset--spacing--70);margin-block-end:0;}',
+			),
+		);
+	}
+}
diff --git a/tests/block-template-utils.php b/tests/block-template-utils.php
index 7410dcaed3..6e4a5b9e5c 100644
--- a/tests/block-template-utils.php
+++ b/tests/block-template-utils.php
@@ -123,7 +123,26 @@ class Tests_Block_Template_Utils extends WP_UnitTestCase {
 		$this->assertSame( WP_TEMPLATE_PART_AREA_HEADER, $template_part->area );
 	}
 
-	function test_build_block_template_result_from_file() {
+	/**
+	 * Tests that _build_block_template_result_from_post() returns the correct theme
+	 * for the template when a child theme is active.
+	 *
+	 * @ticket 55437
+	 *
+	 * @covers ::_build_block_template_result_from_post
+	 */
+	public function test_build_block_template_result_from_post_with_child_theme() {
+		switch_theme( 'block-theme-child' );
+
+		$template = _build_block_template_result_from_post(
+			self::$template_post,
+			'wp_template'
+		);
+
+		$this->assertSame( self::TEST_THEME, $template->theme );
+	}
+
+	public function test_build_block_template_result_from_file() {
 		$template = _build_block_template_result_from_file(
 			array(
 				'slug' => 'single',
@@ -161,7 +180,30 @@ class Tests_Block_Template_Utils extends WP_UnitTestCase {
 		$this->assertSame( WP_TEMPLATE_PART_AREA_HEADER, $template_part->area );
 	}
 
-	function test_inject_theme_attribute_in_block_template_content() {
+	/**
+	 * Tests that _build_block_template_result_from_file() returns the correct theme
+	 * for the template when a child theme is active.
+	 *
+	 * @ticket 55437
+	 *
+	 * @covers ::_build_block_template_result_from_file
+	 */
+	public function test_build_block_template_result_from_file_with_child_theme() {
+		switch_theme( 'block-theme-child' );
+
+		$template = _build_block_template_result_from_file(
+			array(
+				'slug'  => 'single',
+				'path'  => __DIR__ . '/../data/templates/template.html',
+				'theme' => self::TEST_THEME,
+			),
+			'wp_template'
+		);
+
+		$this->assertSame( self::TEST_THEME, $template->theme );
+	}
+
+	public function test_inject_theme_attribute_in_block_template_content() {
 		$theme                           = get_stylesheet();
 		$content_without_theme_attribute = '<!-- wp:template-part {"slug":"header","align":"full", "tagName":"header","className":"site-header"} /-->';
 		$template_content                = _inject_theme_attribute_in_block_template_content(
@@ -207,11 +249,11 @@ class Tests_Block_Template_Utils extends WP_UnitTestCase {
 	 *
 	 * @dataProvider data_remove_theme_attribute_in_block_template_content
 	 */
-	function test_remove_theme_attribute_in_block_template_content( $template_content, $expected ) {
-		$this->assertEquals( $expected, _remove_theme_attribute_in_block_template_content( $template_content ) );
+	public function test_remove_theme_attribute_in_block_template_content( $template_content, $expected ) {
+		$this->assertSame( $expected, _remove_theme_attribute_in_block_template_content( $template_content ) );
 	}
 
-	function data_remove_theme_attribute_in_block_template_content() {
+	public function data_remove_theme_attribute_in_block_template_content() {
 		return array(
 			array(
 				'<!-- wp:template-part {"slug":"header","theme":"tt1-blocks","align":"full","tagName":"header","className":"site-header"} /-->',
@@ -237,7 +279,7 @@ class Tests_Block_Template_Utils extends WP_UnitTestCase {
 	/**
 	 * Should retrieve the template from the theme files.
 	 */
-	function test_get_block_template_from_file() {
+	public function test_get_block_template_from_file() {
 		$id       = get_stylesheet() . '//' . 'index';
 		$template = get_block_template( $id, 'wp_template' );
 		$this->assertSame( $id, $template->id );
@@ -287,7 +329,7 @@ class Tests_Block_Template_Utils extends WP_UnitTestCase {
 	/**
 	 * Should flatten nested blocks
 	 */
-	function test_flatten_blocks() {
+	public function test_flatten_blocks() {
 		$content_template_part_inside_group = '<!-- wp:group --><!-- wp:template-part {"slug":"header"} /--><!-- /wp:group -->';
 		$blocks                             = parse_blocks( $content_template_part_inside_group );
 		$actual                             = _flatten_blocks( $blocks );
@@ -313,7 +355,7 @@ class Tests_Block_Template_Utils extends WP_UnitTestCase {
 	 * @ticket 54448
 	 * @requires extension zip
 	 */
-	function test_wp_generate_block_templates_export_file() {
+	public function test_wp_generate_block_templates_export_file() {
 		$filename = wp_generate_block_templates_export_file();
 		$this->assertFileExists( $filename, 'zip file is created at the specified path' );
 		$this->assertTrue( filesize( $filename ) > 0, 'zip file is larger than 0 bytes' );
diff --git a/tests/block-template.php b/tests/block-template.php
index b53aa496b0..5439ac3793 100644
--- a/tests/block-template.php
+++ b/tests/block-template.php
@@ -28,7 +28,7 @@ class Tests_Block_Template extends WP_UnitTestCase {
 		parent::tear_down();
 	}
 
-	function test_page_home_block_template_takes_precedence_over_less_specific_block_templates() {
+	public function test_page_home_block_template_takes_precedence_over_less_specific_block_templates() {
 		global $_wp_current_template_content;
 		$type                   = 'page';
 		$templates              = array(
@@ -41,7 +41,7 @@ class Tests_Block_Template extends WP_UnitTestCase {
 		$this->assertStringEqualsFile( get_stylesheet_directory() . '/templates/page-home.html', $_wp_current_template_content );
 	}
 
-	function test_page_block_template_takes_precedence() {
+	public function test_page_block_template_takes_precedence() {
 		global $_wp_current_template_content;
 		$type                   = 'page';
 		$templates              = array(
@@ -54,7 +54,7 @@ class Tests_Block_Template extends WP_UnitTestCase {
 		$this->assertStringEqualsFile( get_stylesheet_directory() . '/templates/page.html', $_wp_current_template_content );
 	}
 
-	function test_block_template_takes_precedence_over_equally_specific_php_template() {
+	public function test_block_template_takes_precedence_over_equally_specific_php_template() {
 		global $_wp_current_template_content;
 		$type                   = 'index';
 		$templates              = array(
@@ -71,7 +71,7 @@ class Tests_Block_Template extends WP_UnitTestCase {
 	 *
 	 * Covers https://github.com/WordPress/gutenberg/pull/29026.
 	 */
-	function test_more_specific_php_template_takes_precedence_over_less_specific_block_template() {
+	public function test_more_specific_php_template_takes_precedence_over_less_specific_block_template() {
 		$page_id_template       = 'page-1.php';
 		$page_id_template_path  = get_stylesheet_directory() . '/' . $page_id_template;
 		$type                   = 'page';
@@ -93,7 +93,7 @@ class Tests_Block_Template extends WP_UnitTestCase {
 	 * Covers https://core.trac.wordpress.org/ticket/54515.
 	 *
 	 */
-	function test_child_theme_php_template_takes_precedence_over_equally_specific_parent_theme_block_template() {
+	public function test_child_theme_php_template_takes_precedence_over_equally_specific_parent_theme_block_template() {
 		switch_theme( 'block-theme-child' );
 
 		$page_slug_template      = 'page-home.php';
@@ -108,7 +108,7 @@ class Tests_Block_Template extends WP_UnitTestCase {
 		$this->assertSame( $page_slug_template_path, $resolved_template_path );
 	}
 
-	function test_child_theme_block_template_takes_precedence_over_equally_specific_parent_theme_php_template() {
+	public function test_child_theme_block_template_takes_precedence_over_equally_specific_parent_theme_php_template() {
 		global $_wp_current_template_content;
 
 		switch_theme( 'block-theme-child' );
diff --git a/tests/block-templates/base.php b/tests/block-templates/base.php
new file mode 100644
index 0000000000..f6a5a9f4df
--- /dev/null
+++ b/tests/block-templates/base.php
@@ -0,0 +1,86 @@
+<?php
+
+/**
+ * @group block-templates
+ * @covers ::get_template_hierarchy
+ */
+abstract class WP_Block_Templates_UnitTestCase extends WP_UnitTestCase {
+	const TEST_THEME = 'block-theme';
+
+	protected static $template_post;
+	protected static $template_part_post;
+
+	public static function wpSetUpBeforeClass( WP_UnitTest_Factory $factory ) {
+		/*
+		 * Set up a template post corresponding to a different theme.
+		 * Do this to ensure resolution and slug creation works as expected,
+		 * even with another post of that same name present for another theme.
+		 */
+		self::$template_post = $factory->post->create_and_get(
+			array(
+				'post_type'    => 'wp_template',
+				'post_name'    => 'my_template',
+				'post_title'   => 'My Template',
+				'post_content' => 'Content',
+				'post_excerpt' => 'Description of my template',
+				'tax_input'    => array(
+					'wp_theme' => array(
+						'this-theme-should-not-resolve',
+					),
+				),
+			)
+		);
+
+		wp_set_post_terms( self::$template_post->ID, 'this-theme-should-not-resolve', 'wp_theme' );
+
+		// Set up template post.
+		self::$template_post = $factory->post->create_and_get(
+			array(
+				'post_type'    => 'wp_template',
+				'post_name'    => 'my_template',
+				'post_title'   => 'My Template',
+				'post_content' => 'Content',
+				'post_excerpt' => 'Description of my template',
+				'tax_input'    => array(
+					'wp_theme' => array(
+						self::TEST_THEME,
+					),
+				),
+			)
+		);
+
+		wp_set_post_terms( self::$template_post->ID, self::TEST_THEME, 'wp_theme' );
+
+		// Set up template part post.
+		self::$template_part_post = $factory->post->create_and_get(
+			array(
+				'post_type'    => 'wp_template_part',
+				'post_name'    => 'my_template_part',
+				'post_title'   => 'My Template Part',
+				'post_content' => 'Content',
+				'post_excerpt' => 'Description of my template part',
+				'tax_input'    => array(
+					'wp_theme'              => array(
+						self::TEST_THEME,
+					),
+					'wp_template_part_area' => array(
+						WP_TEMPLATE_PART_AREA_HEADER,
+					),
+				),
+			)
+		);
+
+		wp_set_post_terms( self::$template_part_post->ID, WP_TEMPLATE_PART_AREA_HEADER, 'wp_template_part_area' );
+		wp_set_post_terms( self::$template_part_post->ID, self::TEST_THEME, 'wp_theme' );
+	}
+
+	public static function wpTearDownAfterClass() {
+		wp_delete_post( self::$template_post->ID );
+		wp_delete_post( self::$template_part_post->ID );
+	}
+
+	public function set_up() {
+		parent::set_up();
+		switch_theme( self::TEST_THEME );
+	}
+}
diff --git a/tests/block-templates/getTemplateHierarchy.php b/tests/block-templates/getTemplateHierarchy.php
new file mode 100644
index 0000000000..e550b22778
--- /dev/null
+++ b/tests/block-templates/getTemplateHierarchy.php
@@ -0,0 +1,124 @@
+<?php
+
+require_once __DIR__ . '/base.php';
+
+/**
+ * @group block-templates
+ * @covers ::get_template_hierarchy
+ */
+class Tests_Block_Templates_GetTemplate_Hierarchy extends WP_Block_Templates_UnitTestCase {
+
+	/**
+	 * @dataProvider data_get_template_hierarchy
+	 *
+	 * @ticket 56467
+	 *
+	 * @param array $args     Test arguments.
+	 * @param array $expected Expected results.
+	 */
+	public function test_get_template_hierarchy( array $args, array $expected ) {
+		$this->assertSame( $expected, get_template_hierarchy( ...$args ) );
+	}
+
+	/**
+	 * Data provider.
+	 *
+	 * @return array
+	 */
+	public function data_get_template_hierarchy() {
+		return array(
+			'front-page'                               => array(
+				'args'     => array( 'front-page' ),
+				'expected' => array( 'front-page', 'home', 'index' ),
+			),
+			'custom template'                          => array(
+				'args'     => array( 'whatever-slug', true ),
+				'expected' => array( 'page', 'singular', 'index' ),
+			),
+			'page'                                     => array(
+				'args'     => array( 'page' ),
+				'expected' => array( 'page', 'singular', 'index' ),
+			),
+			'tag'                                      => array(
+				'args'     => array( 'tag' ),
+				'expected' => array( 'tag', 'archive', 'index' ),
+			),
+			'author'                                   => array(
+				'args'     => array( 'author' ),
+				'expected' => array( 'author', 'archive', 'index' ),
+			),
+			'date'                                     => array(
+				'args'     => array( 'date' ),
+				'expected' => array( 'date', 'archive', 'index' ),
+			),
+			'taxonomy'                                 => array(
+				'args'     => array( 'taxonomy' ),
+				'expected' => array( 'taxonomy', 'archive', 'index' ),
+			),
+			'attachment'                               => array(
+				'args'     => array( 'attachment' ),
+				'expected' => array( 'attachment', 'single', 'singular', 'index' ),
+			),
+			'singular'                                 => array(
+				'args'     => array( 'singular' ),
+				'expected' => array( 'singular', 'index' ),
+			),
+			'single'                                   => array(
+				'args'     => array( 'single' ),
+				'expected' => array( 'single', 'singular', 'index' ),
+			),
+			'archive'                                  => array(
+				'args'     => array( 'archive' ),
+				'expected' => array( 'archive', 'index' ),
+			),
+			'index'                                    => array(
+				'args'     => array( 'index' ),
+				'expected' => array( 'index' ),
+			),
+			'specific taxonomies'                      => array(
+				'args'     => array( 'taxonomy-books', false, 'taxonomy-books' ),
+				'expected' => array( 'taxonomy-books', 'taxonomy', 'archive', 'index' ),
+			),
+			'single word categories'                   => array(
+				'args'     => array( 'category-fruits', false, 'category' ),
+				'expected' => array( 'category-fruits', 'category', 'archive', 'index' ),
+			),
+			'multi word categories'                    => array(
+				'args'     => array( 'category-fruits-yellow', false, 'category' ),
+				'expected' => array( 'category-fruits-yellow', 'category', 'archive', 'index' ),
+			),
+			'single word taxonomy and term'            => array(
+				'args'     => array( 'taxonomy-books-action', false, 'taxonomy-books' ),
+				'expected' => array( 'taxonomy-books-action', 'taxonomy-books', 'taxonomy', 'archive', 'index' ),
+			),
+			'single word taxonomy and multi word term' => array(
+				'args'     => array( 'taxonomy-books-action-adventure', false, 'taxonomy-books' ),
+				'expected' => array( 'taxonomy-books-action-adventure', 'taxonomy-books', 'taxonomy', 'archive', 'index' ),
+			),
+			'multi word taxonomy and term'             => array(
+				'args'     => array( 'taxonomy-greek-books-action-adventure', false, 'taxonomy-greek-books' ),
+				'expected' => array( 'taxonomy-greek-books-action-adventure', 'taxonomy-greek-books', 'taxonomy', 'archive', 'index' ),
+			),
+			'single word post type'                    => array(
+				'args'     => array( 'single-book', false, 'single-book' ),
+				'expected' => array( 'single-book', 'single', 'singular', 'index' ),
+			),
+			'multi word post type'                     => array(
+				'args'     => array( 'single-art-project', false, 'single-art-project' ),
+				'expected' => array( 'single-art-project', 'single', 'singular', 'index' ),
+			),
+			'single post with multi word post type'    => array(
+				'args'     => array( 'single-art-project-imagine', false, 'single-art-project' ),
+				'expected' => array( 'single-art-project-imagine', 'single-art-project', 'single', 'singular', 'index' ),
+			),
+			'single page'                              => array(
+				'args'     => array( 'page-hi', false, 'page' ),
+				'expected' => array( 'page-hi', 'page', 'singular', 'index' ),
+			),
+			'authors'                                  => array(
+				'args'     => array( 'author-rigas', false, 'author' ),
+				'expected' => array( 'author-rigas', 'author', 'archive', 'index' ),
+			),
+		);
+	}
+}
diff --git a/tests/blocks/editor.php b/tests/blocks/editor.php
index 53b8d96956..e3a4fdccfc 100644
--- a/tests/blocks/editor.php
+++ b/tests/blocks/editor.php
@@ -31,7 +31,7 @@ class Tests_Blocks_Editor extends WP_UnitTestCase {
 		$post = self::factory()->post->create_and_get( $args );
 
 		global $wp_rest_server;
-		$wp_rest_server = new Spy_REST_Server;
+		$wp_rest_server = new Spy_REST_Server();
 		do_action( 'rest_api_init', $wp_rest_server );
 	}
 
@@ -301,6 +301,31 @@ class Tests_Blocks_Editor extends WP_UnitTestCase {
 		$this->assertTrue( $settings['__unstableGalleryWithImageBlocks'] );
 	}
 
+	/**
+	 * @ticket 56815
+	 */
+	public function test_get_default_block_editor_settings_max_upload_file_size() {
+		// Force the return value of wp_max_upload_size() to be 500.
+		add_filter(
+			'upload_size_limit',
+			function() {
+				return 500;
+			}
+		);
+
+		// Expect 0 when user is not allowed to upload (as wp_max_upload_size() should not be called).
+		$settings = get_default_block_editor_settings();
+		$this->assertSame( 0, $settings['maxUploadFileSize'] );
+
+		// Set up an administrator, as they can upload files.
+		$administrator = self::factory()->user->create( array( 'role' => 'administrator' ) );
+		wp_set_current_user( $administrator );
+
+		// Expect the above 500 as the user is now allowed to upload.
+		$settings = get_default_block_editor_settings();
+		$this->assertSame( 500, $settings['maxUploadFileSize'] );
+	}
+
 	/**
 	 * @ticket 53397
 	 */
diff --git a/tests/blocks/register.php b/tests/blocks/register.php
index 6cec0d8158..ca906086a3 100644
--- a/tests/blocks/register.php
+++ b/tests/blocks/register.php
@@ -365,7 +365,7 @@ class Tests_Blocks_Register extends WP_UnitTestCase {
 		$result   = register_block_style_handle( $metadata, 'style' );
 
 		$this->assertSame( 'unit-tests-test-block-style', $result );
-		$this->assertSame( 'replace', wp_styles()->get_data( 'unit-tests-test-block-style', 'rtl' ) );
+		$this->assertFalse( wp_styles()->get_data( 'unit-tests-test-block-style', 'rtl' ) );
 
 		// @ticket 50328
 		$this->assertSame(
@@ -374,6 +374,21 @@ class Tests_Blocks_Register extends WP_UnitTestCase {
 		);
 	}
 
+	/**
+	 * @ticket 56664
+	 */
+	public function test_register_nonexistent_stylesheet() {
+		$metadata = array(
+			'file'  => DIR_TESTDATA . '/blocks/notice/block.json',
+			'name'  => 'unit-tests/test-block-nonexistent-stylesheet',
+			'style' => 'file:./nonexistent.css',
+		);
+		register_block_style_handle( $metadata, 'style' );
+
+		global $wp_styles;
+		$this->assertFalse( $wp_styles->registered['unit-tests-test-block-nonexistent-stylesheet-style']->src );
+	}
+
 	/**
 	 * @ticket 55513
 	 */
@@ -389,7 +404,7 @@ class Tests_Blocks_Register extends WP_UnitTestCase {
 
 		$expected_style_handle = 'block-theme-example-block-editor-style';
 		$this->assertSame( $expected_style_handle, $result );
-		$this->assertSame( 'replace', wp_styles()->get_data( $expected_style_handle, 'rtl' ) );
+		$this->assertFalse( wp_styles()->get_data( $expected_style_handle, 'rtl' ) );
 	}
 
 	/**
@@ -537,6 +552,134 @@ class Tests_Blocks_Register extends WP_UnitTestCase {
 		$this->assertSame( 'tests/notice', $result->name );
 	}
 
+	/**
+	 * Tests that an array value for 'editor_script' is correctly set and retrieved.
+	 *
+	 * As 'editor_script' is now a deprecated property, this should also set
+	 * the value for the 'editor_script_handles' property.
+	 *
+	 * @ticket 56707
+	 *
+	 * @covers ::register_block_type
+	 * @covers WP_Block_Type::__set
+	 * @covers WP_Block_Type::__get
+	 *
+	 * @dataProvider data_register_block_type_accepts_editor_script_array
+	 *
+	 * @param array $editor_script The editor script array to register.
+	 * @param array $expected      The expected registered editor script.
+	 */
+	public function test_register_block_type_accepts_editor_script_array( $editor_script, $expected ) {
+		$settings = array( 'editor_script' => $editor_script );
+		register_block_type( 'core/test-static', $settings );
+
+		$registry   = WP_Block_Type_Registry::get_instance();
+		$block_type = $registry->get_registered( 'core/test-static' );
+		$this->assertObjectHasAttribute( 'editor_script_handles', $block_type );
+		$actual_script         = $block_type->editor_script;
+		$actual_script_handles = $block_type->editor_script_handles;
+
+		$this->assertSame(
+			$expected,
+			$actual_script,
+			'editor_script was not set to the correct value.'
+		);
+
+		$this->assertSame(
+			(array) $expected,
+			$actual_script_handles,
+			'editor_script_handles was not set to the correct value.'
+		);
+	}
+
+	/**
+	 * Data provider for test_register_block_type_accepts_editor_script_array().
+	 *
+	 * @return array
+	 */
+	public function data_register_block_type_accepts_editor_script_array() {
+		return array(
+			'an empty array'      => array(
+				'editor_script' => array(),
+				'expected'      => null,
+			),
+			'a single item array' => array(
+				'editor_script' => array( 'hello' ),
+				'expected'      => 'hello',
+			),
+			'a multi-item array'  => array(
+				'editor_script' => array( 'hello', 'world' ),
+				'expected'      => array( 'hello', 'world' ),
+			),
+		);
+	}
+
+	/**
+	 * Tests that an array value for 'editor_script' containing invalid values
+	 * correctly triggers _doing_it_wrong(), filters the value, and sets the
+	 * property to the result.
+	 *
+	 * As 'editor_script' is now a deprecated property, this should also set
+	 * the value for the 'editor_script_handles' property.
+	 *
+	 * @ticket 56707
+	 *
+	 * @covers ::register_block_type
+	 * @covers WP_Block_Type::__set
+	 * @covers WP_Block_Type::__get
+	 *
+	 * @dataProvider data_register_block_type_throws_doing_it_wrong
+	 *
+	 * @expectedIncorrectUsage WP_Block_Type::__set
+	 *
+	 * @param array $editor_script The editor script array to register.
+	 * @param array $expected      The expected registered editor script.
+	 */
+	public function test_register_block_type_throws_doing_it_wrong( $editor_script, $expected ) {
+		$settings = array( 'editor_script' => $editor_script );
+		register_block_type( 'core/test-static', $settings );
+
+		$registry   = WP_Block_Type_Registry::get_instance();
+		$block_type = $registry->get_registered( 'core/test-static' );
+		$this->assertObjectHasAttribute( 'editor_script_handles', $block_type );
+		$actual_script         = $block_type->editor_script;
+		$actual_script_handles = $block_type->editor_script_handles;
+
+		$this->assertSame(
+			$expected,
+			$actual_script,
+			'editor_script was not set to the correct value.'
+		);
+
+		$this->assertSame(
+			(array) $expected,
+			$actual_script_handles,
+			'editor_script_handles was not set to the correct value.'
+		);
+	}
+
+	/**
+	 * Data provider for test_register_block_type_throws_doing_it_wrong().
+	 *
+	 * @return array
+	 */
+	public function data_register_block_type_throws_doing_it_wrong() {
+		return array(
+			'a non-string array'     => array(
+				'editor_script' => array( null, false, true, -1, 0, 1, -1.0, 0.0, 1.0, INF, NAN, new stdClass() ),
+				'expected'      => null,
+			),
+			'a partial string array' => array(
+				'editor_script' => array( null, false, 'script.js', true, 0, 'actions.js', 1, INF ),
+				'expected'      => array( 'script.js', 'actions.js' ),
+			),
+			'a partial string array that results in one item with non-zero index' => array(
+				'editor_script' => array( null, false, 'script.js' ),
+				'expected'      => 'script.js',
+			),
+		);
+	}
+
 	/**
 	 * @ticket 52301
 	 */
diff --git a/tests/blocks/renderCommentTemplate.php b/tests/blocks/renderCommentTemplate.php
index 848b2caf38..5bfcd76487 100644
--- a/tests/blocks/renderCommentTemplate.php
+++ b/tests/blocks/renderCommentTemplate.php
@@ -87,7 +87,7 @@ class Tests_Blocks_RenderReusableCommentTemplate extends WP_UnitTestCase {
 	 * @ticket 55505
 	 * @covers ::build_comment_query_vars_from_block
 	 */
-	function test_build_comment_query_vars_from_block_with_context() {
+	public function test_build_comment_query_vars_from_block_with_context() {
 		$parsed_blocks = parse_blocks(
 			'<!-- wp:comment-template --><!-- wp:comment-author-name /--><!-- wp:comment-content /--><!-- /wp:comment-template -->'
 		);
@@ -118,7 +118,7 @@ class Tests_Blocks_RenderReusableCommentTemplate extends WP_UnitTestCase {
 	 * @ticket 55567
 	 * @covers ::build_comment_query_vars_from_block
 	 */
-	function test_build_comment_query_vars_from_block_with_context_no_pagination() {
+	public function test_build_comment_query_vars_from_block_with_context_no_pagination() {
 		update_option( 'page_comments', false );
 		$parsed_blocks = parse_blocks(
 			'<!-- wp:comment-template --><!-- wp:comment-author-name /--><!-- wp:comment-content /--><!-- /wp:comment-template -->'
@@ -148,7 +148,7 @@ class Tests_Blocks_RenderReusableCommentTemplate extends WP_UnitTestCase {
 	 * @ticket 55505
 	 * @covers ::build_comment_query_vars_from_block
 	 */
-	function test_build_comment_query_vars_from_block_no_context() {
+	public function test_build_comment_query_vars_from_block_no_context() {
 		$parsed_blocks = parse_blocks(
 			'<!-- wp:comment-template --><!-- wp:comment-author-name /--><!-- wp:comment-content /--><!-- /wp:comment-template -->'
 		);
@@ -178,7 +178,7 @@ class Tests_Blocks_RenderReusableCommentTemplate extends WP_UnitTestCase {
 	 * @ticket 55658
 	 * @covers ::build_comment_query_vars_from_block
 	 */
-	function test_build_comment_query_vars_from_block_pagination_with_no_comments() {
+	public function test_build_comment_query_vars_from_block_pagination_with_no_comments() {
 		$comments_per_page     = get_option( 'comments_per_page' );
 		$default_comments_page = get_option( 'default_comments_page' );
 
@@ -230,7 +230,7 @@ class Tests_Blocks_RenderReusableCommentTemplate extends WP_UnitTestCase {
 	 * @ticket 55505
 	 * @covers ::build_comment_query_vars_from_block
 	 */
-	function test_build_comment_query_vars_from_block_sets_cpage_var() {
+	public function test_build_comment_query_vars_from_block_sets_cpage_var() {
 
 		// This could be any number, we set a fixed one instead of a random for better performance.
 		$comment_query_max_num_pages = 5;
@@ -267,7 +267,7 @@ class Tests_Blocks_RenderReusableCommentTemplate extends WP_UnitTestCase {
 	 *
 	 * @ticket 55567
 	 */
-	function test_rendering_comment_template() {
+	public function test_rendering_comment_template() {
 		$parsed_blocks = parse_blocks(
 			'<!-- wp:comment-template --><!-- wp:comment-author-name /--><!-- wp:comment-content /--><!-- /wp:comment-template -->'
 		);
@@ -295,7 +295,7 @@ class Tests_Blocks_RenderReusableCommentTemplate extends WP_UnitTestCase {
 	 *
 	 * @ticket 55567
 	 */
-	function test_rendering_comment_template_nested() {
+	public function test_rendering_comment_template_nested() {
 		$first_level_ids = self::factory()->comment->create_post_comments(
 			self::$custom_post->ID,
 			2,
@@ -396,7 +396,7 @@ END
 	 *
 	 * @ticket 55643
 	 */
-	function test_render_block_core_comment_content_converts_to_html() {
+	public function test_render_block_core_comment_content_converts_to_html() {
 		$comment_id  = self::$comment_ids[0];
 		$new_content = "Paragraph One\n\nP2L1\nP2L2\n\nhttps://example.com/";
 		self::factory()->comment->update_object(
@@ -430,7 +430,7 @@ END
 	 * @ticket 55634
 	 * @covers ::build_comment_query_vars_from_block
 	 */
-	function test_build_comment_query_vars_from_block_with_comment_preview() {
+	public function test_build_comment_query_vars_from_block_with_comment_preview() {
 		$parsed_blocks = parse_blocks(
 			'<!-- wp:comment-template --><!-- wp:comment-author-name /--><!-- wp:comment-content /--><!-- /wp:comment-template -->'
 		);
@@ -471,7 +471,7 @@ END
 	 *
 	 * @ticket 55643
 	 */
-	function test_rendering_comment_template_unmoderated_preview() {
+	public function test_rendering_comment_template_unmoderated_preview() {
 		$parsed_blocks = parse_blocks(
 			'<!-- wp:comment-template --><!-- wp:comment-author-name /--><!-- wp:comment-content /--><!-- /wp:comment-template -->'
 		);
diff --git a/tests/blocks/supportedStyles.php b/tests/blocks/supportedStyles.php
index 0722e995d6..e4e6c37e9e 100644
--- a/tests/blocks/supportedStyles.php
+++ b/tests/blocks/supportedStyles.php
@@ -379,7 +379,7 @@ class Tests_Blocks_SupportedStyles extends WP_UnitTestCase {
 		);
 
 		$expected_classes = 'foo-bar-class wp-block-example';
-		$expected_styles  = 'test: style; font-size: 10px;';
+		$expected_styles  = 'test: style; font-size:10px;';
 
 		$this->assert_content_and_styles_and_classes_match( $block, $expected_classes, $expected_styles );
 	}
@@ -436,7 +436,7 @@ class Tests_Blocks_SupportedStyles extends WP_UnitTestCase {
 		);
 
 		$expected_classes = 'foo-bar-class wp-block-example';
-		$expected_styles  = 'test: style; line-height: 10;';
+		$expected_styles  = 'test: style; line-height:10;';
 
 		$this->assert_content_and_styles_and_classes_match( $block, $expected_classes, $expected_styles );
 	}
@@ -563,7 +563,7 @@ class Tests_Blocks_SupportedStyles extends WP_UnitTestCase {
 		);
 
 		$expected_classes = 'foo-bar-class wp-block-example has-text-color has-background alignwide';
-		$expected_styles  = 'test: style; color:#000; background-color:#fff; font-size: 10px; line-height: 20;';
+		$expected_styles  = 'test: style; color:#000; background-color:#fff; font-size:10px; line-height:20;';
 
 		$this->assert_content_and_styles_and_classes_match( $block, $expected_classes, $expected_styles );
 	}
@@ -606,7 +606,7 @@ class Tests_Blocks_SupportedStyles extends WP_UnitTestCase {
 		);
 
 		$expected_classes = 'foo-bar-class wp-block-example';
-		$expected_styles  = 'test: style; font-size: 10px;';
+		$expected_styles  = 'test: style; font-size:10px;';
 
 		$this->assert_content_and_styles_and_classes_match( $block, $expected_classes, $expected_styles );
 	}
diff --git a/tests/blocks/wpBlock.php b/tests/blocks/wpBlock.php
index c67a30df9d..00f5a97b83 100644
--- a/tests/blocks/wpBlock.php
+++ b/tests/blocks/wpBlock.php
@@ -604,13 +604,18 @@ class Tests_Blocks_wpBlock extends WP_UnitTestCase {
 			),
 		);
 		$block         = new WP_Block( $parsed_block, $context, $this->registry );
-		function filterQuery( $query, $block, $page ) {
-			$query['post_type'] = 'book';
-			return $query;
-		}
-		add_filter( 'query_loop_block_query_vars', 'filterQuery', 10, 3 );
+
+		add_filter(
+			'query_loop_block_query_vars',
+			static function( $query, $block, $page ) {
+				$query['post_type'] = 'book';
+				return $query;
+			},
+			10,
+			3
+		);
+
 		$query = build_query_vars_from_query_block( $block, 1 );
-		remove_filter( 'query_loop_block_query_vars', 'filterQuery' );
 		$this->assertSame(
 			$query,
 			array(
diff --git a/tests/blocks/wpBlockType.php b/tests/blocks/wpBlockType.php
index 28eb8f1edf..8ba94be4f5 100644
--- a/tests/blocks/wpBlockType.php
+++ b/tests/blocks/wpBlockType.php
@@ -240,7 +240,7 @@ class Tests_Blocks_wpBlockType extends WP_UnitTestCase {
 
 		$prepared_attributes = $block_type->prepare_attributes_for_render( $attributes );
 
-		$this->assertEquals(
+		$this->assertSameSetsWithIndex(
 			array(
 				'correct'            => 'include',
 				/* wrongType */
diff --git a/tests/cache.php b/tests/cache.php
index f65096c597..faf64de5a0 100644
--- a/tests/cache.php
+++ b/tests/cache.php
@@ -230,7 +230,7 @@ class Tests_Cache extends WP_UnitTestCase {
 	// Make sure objects are cloned going to and from the cache.
 	public function test_object_refs() {
 		$key           = __FUNCTION__ . '_1';
-		$object_a      = new stdClass;
+		$object_a      = new stdClass();
 		$object_a->foo = 'alpha';
 		$this->cache->set( $key, $object_a );
 		$object_a->foo = 'bravo';
@@ -240,7 +240,7 @@ class Tests_Cache extends WP_UnitTestCase {
 		$this->assertSame( 'bravo', $object_a->foo );
 
 		$key           = __FUNCTION__ . '_2';
-		$object_a      = new stdClass;
+		$object_a      = new stdClass();
 		$object_a->foo = 'alpha';
 		$this->cache->add( $key, $object_a );
 		$object_a->foo = 'bravo';
diff --git a/tests/canonical.php b/tests/canonical.php
index 63e5c4078b..6d16402112 100644
--- a/tests/canonical.php
+++ b/tests/canonical.php
@@ -375,4 +375,31 @@ class Tests_Canonical extends WP_Canonical_UnitTestCase {
 
 		delete_option( 'page_on_front' );
 	}
+
+	/**
+	 * Ensure NOT EXISTS queries do not trigger not-countable or undefined array key errors.
+	 *
+	 * @ticket 55955
+	 */
+	public function test_feed_canonical_with_not_exists_query() {
+		// Set a NOT EXISTS tax_query on the global query.
+		$global_query        = $GLOBALS['wp_query'];
+		$GLOBALS['wp_query'] = new WP_Query(
+			array(
+				'post_type' => 'post',
+				'tax_query' => array(
+					array(
+						'taxonomy' => 'post_format',
+						'operator' => 'NOT EXISTS',
+					),
+				),
+			)
+		);
+
+		$url = redirect_canonical( get_term_feed_link( self::$terms['/category/parent/'] ), false );
+		// Restore original global.
+		$GLOBALS['wp_query'] = $global_query;
+
+		$this->assertNull( $url );
+	}
 }
diff --git a/tests/category.php b/tests/category.php
deleted file mode 100644
index 1eb4f3d419..0000000000
--- a/tests/category.php
+++ /dev/null
@@ -1,257 +0,0 @@
-<?php
-/**
- * Validate Category API
- *
- * Notes:
- * cat_is_ancestor_of is validated under test\term\term_is_ancestor_of
- *
- * @group category.php
- */
-class Tests_Category extends WP_UnitTestCase {
-
-	public function tear_down() {
-		_unregister_taxonomy( 'test_tax_cat' );
-		parent::tear_down();
-	}
-
-	/**
-	 * Validate get_all_category_ids
-	 *
-	 * @expectedDeprecated get_all_category_ids
-	 *
-	 * @covers ::get_all_category_ids
-	 */
-	public function test_get_all_category_ids() {
-		// Ccreate categories.
-		self::factory()->category->create_many( 2 );
-
-		// Create new taxonomy to ensure not included.
-		register_taxonomy( 'test_tax_cat', 'post' );
-		wp_insert_term( 'test1', 'test_tax_cat' );
-
-		// Validate length is 1 + created due to uncategorized.
-		$cat_ids = get_all_category_ids();
-		$this->assertCount( 3, $cat_ids );
-	}
-
-	/**
-	 * Validate get_category_by_slug function
-	 *
-	 * @covers ::get_category_by_slug
-	 */
-	public function test_get_category_by_slug() {
-
-		// Create test categories.
-		$testcat  = self::factory()->category->create_and_get(
-			array(
-				'slug' => 'testcat',
-				'name' => 'Test Category 1',
-			)
-		);
-		$testcat2 = self::factory()->category->create_and_get(
-			array(
-				'slug' => 'testcat2',
-				'name' => 'Test Category 2',
-			)
-		);
-
-		// Validate category is returned by slug.
-		$ret_testcat = get_category_by_slug( 'testcat' );
-		$this->assertSame( $testcat->term_id, $ret_testcat->term_id );
-		$ret_testcat = get_category_by_slug( 'TeStCaT' );
-		$this->assertSame( $testcat->term_id, $ret_testcat->term_id );
-
-		// Validate unknown category returns false.
-		$this->assertFalse( get_category_by_slug( 'testcat3' ) );
-
-	}
-
-	/**
-	 * Validate _make_cat_compat function
-	 *
-	 * @covers ::_make_cat_compat
-	 */
-	public function test__make_cat_compat() {
-
-		// Create test categories and array representations.
-		$testcat_array            = array(
-			'slug'        => 'testmcc',
-			'name'        => 'Test MCC',
-			'description' => 'Category Test',
-		);
-		$testcat                  = self::factory()->category->create_and_get( $testcat_array );
-		$testcat_array['term_id'] = $testcat->term_id;
-
-		$testcat2_array            = array(
-			'slug'        => 'testmcc',
-			'name'        => 'Test MCC',
-			'description' => 'Category Test',
-			'parent'      => $testcat->term_id,
-		);
-		$testcat2                  = self::factory()->category->create_and_get( $testcat2_array );
-		$testcat2_array['term_id'] = $testcat2->term_id;
-
-		// Unset properties to enable validation of object.
-		unset( $testcat->cat_ID );
-		unset( $testcat->category_count );
-		unset( $testcat->category_description );
-		unset( $testcat->cat_name );
-		unset( $testcat->category_nicename );
-		unset( $testcat->category_parent );
-
-		unset( $testcat2->cat_ID );
-		unset( $testcat2->category_count );
-		unset( $testcat2->category_description );
-		unset( $testcat2->cat_name );
-		unset( $testcat2->category_nicename );
-		unset( $testcat2->category_parent );
-
-		// Make compatible.
-		_make_cat_compat( $testcat );
-		_make_cat_compat( $testcat2 );
-		_make_cat_compat( $testcat_array );
-		_make_cat_compat( $testcat2_array );
-
-		// Validate compatibility object.
-		$this->assertSame( $testcat->cat_ID, $testcat->term_id );
-		$this->assertSame( $testcat->category_count, $testcat->count );
-		$this->assertSame( $testcat->category_description, $testcat->description );
-		$this->assertSame( $testcat->cat_name, $testcat->name );
-		$this->assertSame( $testcat->category_nicename, $testcat->slug );
-		$this->assertSame( $testcat->category_parent, $testcat->parent );
-
-		// Validate compatibility object with parent.
-		$this->assertSame( $testcat->cat_ID, $testcat->term_id );
-		$this->assertSame( $testcat->category_count, $testcat->count );
-		$this->assertSame( $testcat->category_description, $testcat->description );
-		$this->assertSame( $testcat->cat_name, $testcat->name );
-		$this->assertSame( $testcat->category_nicename, $testcat->slug );
-		$this->assertSame( $testcat->category_parent, $testcat->parent );
-
-		// Validate compatibility array.
-		$this->assertSame( $testcat_array['cat_ID'], $testcat_array['term_id'] );
-		$this->assertSame( $testcat_array['category_count'], $testcat_array['count'] );
-		$this->assertSame( $testcat_array['category_description'], $testcat_array['description'] );
-		$this->assertSame( $testcat_array['cat_name'], $testcat_array['name'] );
-		$this->assertSame( $testcat_array['category_nicename'], $testcat_array['slug'] );
-		$this->assertSame( $testcat_array['category_parent'], $testcat_array['parent'] );
-
-		// Validate compatibility array with parent.
-		$this->assertSame( $testcat_array['cat_ID'], $testcat_array['term_id'] );
-		$this->assertSame( $testcat_array['category_count'], $testcat_array['count'] );
-		$this->assertSame( $testcat_array['category_description'], $testcat_array['description'] );
-		$this->assertSame( $testcat_array['cat_name'], $testcat_array['name'] );
-		$this->assertSame( $testcat_array['category_nicename'], $testcat_array['slug'] );
-		$this->assertSame( $testcat_array['category_parent'], $testcat_array['parent'] );
-	}
-
-	/**
-	 * Validate get_cat_name function
-	 *
-	 * @covers ::get_cat_name
-	 */
-	public function test_get_cat_name() {
-
-		// Create test category.
-		$testcat = self::factory()->category->create_and_get(
-			array(
-				'slug' => 'testcat',
-				'name' => 'Test Category 1',
-			)
-		);
-
-		// Validate.
-		$this->assertSame( $testcat->name, get_cat_name( $testcat->term_id ) );
-		$this->assertSame( '', get_cat_name( -1 ) );
-		$this->assertSame( '', get_cat_name( $testcat->term_id + 100 ) );
-
-	}
-
-	/**
-	 * Validate get_cat_name function
-	 *
-	 * @covers ::get_cat_ID
-	 */
-	public function test_get_cat_ID() {
-
-		// Create test category.
-		$testcat = self::factory()->category->create_and_get(
-			array(
-				'slug' => 'testcat',
-				'name' => 'Test Category 1',
-			)
-		);
-
-		// Validate.
-		$this->assertSame( $testcat->term_id, get_cat_ID( $testcat->name ) );
-		$this->assertSame( 0, get_cat_ID( 'NO CAT' ) );
-		$this->assertSame( 0, get_cat_ID( 12 ) );
-
-	}
-
-	/**
-	 * Validate get_category_by_path function
-	 *
-	 * @covers ::get_category_by_path
-	 */
-	public function test_get_category_by_path() {
-
-		// Create test categories.
-		$root_id           = self::factory()->category->create(
-			array(
-				'slug' => 'root',
-			)
-		);
-		$root_cat_id       = self::factory()->category->create(
-			array(
-				'slug'   => 'cat',
-				'parent' => $root_id,
-			)
-		);
-		$root_cat_cat_id   = self::factory()->category->create(
-			array(
-				'slug'   => 'cat', // Note this is modified on create.
-				'parent' => $root_cat_id,
-			)
-		);
-		$root_path_id      = self::factory()->category->create(
-			array(
-				'slug'   => 'path',
-				'parent' => $root_id,
-			)
-		);
-		$root_path_cat_id  = self::factory()->category->create(
-			array(
-				'slug'   => 'cat', // Note this is modified on create.
-				'parent' => $root_path_id,
-			)
-		);
-		$root_level_id     = self::factory()->category->create(
-			array(
-				'slug'   => 'level-1',
-				'parent' => $root_id,
-			)
-		);
-		$root_level_cat_id = self::factory()->category->create(
-			array(
-				'slug'   => 'cat', // Note this is modified on create.
-				'parent' => $root_level_id,
-			)
-		);
-
-		// Validate full match.
-		$ret_cat = get_category_by_path( '/root/level-1', true );
-		$this->assertSame( $root_level_id, $ret_cat->term_id );
-		$this->assertNull( get_category_by_path( 'level-1', true ) );
-		$this->assertNull( get_category_by_path( 'nocat/nocat/', true ) );
-
-		// Validate partial match.
-		$ret_cat = get_category_by_path( 'level-1', false );
-		$this->assertSame( $root_level_id, $ret_cat->term_id );
-		$ret_cat = get_category_by_path( 'root/cat/level-1', false );
-		$this->assertSame( $root_level_id, $ret_cat->term_id );
-		$ret_cat = get_category_by_path( 'root$2Fcat%20%2Flevel-1', false );
-		$this->assertSame( $root_level_id, $ret_cat->term_id );
-		$this->assertNull( get_category_by_path( 'nocat/nocat/', false ) );
-	}
-}
diff --git a/tests/category/getAllCategoryIds.php b/tests/category/getAllCategoryIds.php
new file mode 100644
index 0000000000..21d2fed5ec
--- /dev/null
+++ b/tests/category/getAllCategoryIds.php
@@ -0,0 +1,30 @@
+<?php
+/**
+ * @group taxonomy
+ * @group category.php
+ *
+ * @covers ::get_all_category_ids
+ */
+class Tests_Category_GetAllCategoryIds extends WP_UnitTestCase {
+
+	/**
+	 * Validate get_all_category_ids
+	 *
+	 * @expectedDeprecated get_all_category_ids
+	 */
+	public function test_get_all_category_ids() {
+		// Ccreate categories.
+		self::factory()->category->create_many( 2 );
+
+		// Create new taxonomy to ensure not included.
+		register_taxonomy( 'test_tax_cat', 'post' );
+
+		wp_insert_term( 'test1', 'test_tax_cat' );
+		$cat_ids = get_all_category_ids();
+
+		_unregister_taxonomy( 'test_tax_cat' );
+
+		// Validate length is 1 + created due to uncategorized.
+		$this->assertCount( 3, $cat_ids );
+	}
+}
diff --git a/tests/category/getCatId.php b/tests/category/getCatId.php
new file mode 100644
index 0000000000..b5118d8233
--- /dev/null
+++ b/tests/category/getCatId.php
@@ -0,0 +1,29 @@
+<?php
+/**
+ * @group taxonomy
+ * @group category.php
+ *
+ * @covers ::get_cat_ID
+ */
+class Tests_Category_GetCatId extends WP_UnitTestCase {
+
+	/**
+	 * Validate get_cat_ID function
+	 */
+	public function test_get_cat_ID() {
+
+		// Create test category.
+		$testcat = self::factory()->category->create_and_get(
+			array(
+				'slug' => 'testcat',
+				'name' => 'Test Category 1',
+			)
+		);
+
+		// Validate.
+		$this->assertSame( $testcat->term_id, get_cat_ID( $testcat->name ) );
+		$this->assertSame( 0, get_cat_ID( 'NO CAT' ) );
+		$this->assertSame( 0, get_cat_ID( 12 ) );
+
+	}
+}
diff --git a/tests/category/getCatName.php b/tests/category/getCatName.php
new file mode 100644
index 0000000000..bc333a2b46
--- /dev/null
+++ b/tests/category/getCatName.php
@@ -0,0 +1,29 @@
+<?php
+/**
+ * @group taxonomy
+ * @group category.php
+ *
+ * @covers ::get_cat_name
+ */
+class Tests_Category_GetCatName extends WP_UnitTestCase {
+
+	/**
+	 * Validate get_cat_name function
+	 */
+	public function test_get_cat_name() {
+
+		// Create test category.
+		$testcat = self::factory()->category->create_and_get(
+			array(
+				'slug' => 'testcat',
+				'name' => 'Test Category 1',
+			)
+		);
+
+		// Validate.
+		$this->assertSame( $testcat->name, get_cat_name( $testcat->term_id ) );
+		$this->assertSame( '', get_cat_name( -1 ) );
+		$this->assertSame( '', get_cat_name( $testcat->term_id + 100 ) );
+
+	}
+}
diff --git a/tests/category/getCategoryByPath.php b/tests/category/getCategoryByPath.php
new file mode 100644
index 0000000000..e4d34f2458
--- /dev/null
+++ b/tests/category/getCategoryByPath.php
@@ -0,0 +1,73 @@
+<?php
+/**
+ * @group taxonomy
+ * @group category.php
+ *
+ * @covers ::get_category_by_path
+ */
+class Tests_Category_GetCategoryByPath extends WP_UnitTestCase {
+
+	/**
+	 * Validate get_category_by_path function
+	 */
+	public function test_get_category_by_path() {
+
+		// Create test categories.
+		$root_id           = self::factory()->category->create(
+			array(
+				'slug' => 'root',
+			)
+		);
+		$root_cat_id       = self::factory()->category->create(
+			array(
+				'slug'   => 'cat',
+				'parent' => $root_id,
+			)
+		);
+		$root_cat_cat_id   = self::factory()->category->create(
+			array(
+				'slug'   => 'cat', // Note this is modified on create.
+				'parent' => $root_cat_id,
+			)
+		);
+		$root_path_id      = self::factory()->category->create(
+			array(
+				'slug'   => 'path',
+				'parent' => $root_id,
+			)
+		);
+		$root_path_cat_id  = self::factory()->category->create(
+			array(
+				'slug'   => 'cat', // Note this is modified on create.
+				'parent' => $root_path_id,
+			)
+		);
+		$root_level_id     = self::factory()->category->create(
+			array(
+				'slug'   => 'level-1',
+				'parent' => $root_id,
+			)
+		);
+		$root_level_cat_id = self::factory()->category->create(
+			array(
+				'slug'   => 'cat', // Note this is modified on create.
+				'parent' => $root_level_id,
+			)
+		);
+
+		// Validate full match.
+		$ret_cat = get_category_by_path( '/root/level-1', true );
+		$this->assertSame( $root_level_id, $ret_cat->term_id );
+		$this->assertNull( get_category_by_path( 'level-1', true ) );
+		$this->assertNull( get_category_by_path( 'nocat/nocat/', true ) );
+
+		// Validate partial match.
+		$ret_cat = get_category_by_path( 'level-1', false );
+		$this->assertSame( $root_level_id, $ret_cat->term_id );
+		$ret_cat = get_category_by_path( 'root/cat/level-1', false );
+		$this->assertSame( $root_level_id, $ret_cat->term_id );
+		$ret_cat = get_category_by_path( 'root$2Fcat%20%2Flevel-1', false );
+		$this->assertSame( $root_level_id, $ret_cat->term_id );
+		$this->assertNull( get_category_by_path( 'nocat/nocat/', false ) );
+	}
+}
diff --git a/tests/category/getCategoryBySlug.php b/tests/category/getCategoryBySlug.php
new file mode 100644
index 0000000000..f7c0a3b886
--- /dev/null
+++ b/tests/category/getCategoryBySlug.php
@@ -0,0 +1,39 @@
+<?php
+/**
+ * @group taxonomy
+ * @group category.php
+ *
+ * @covers ::get_category_by_slug
+ */
+class Tests_Category_GetCategoryBySlug extends WP_UnitTestCase {
+
+	/**
+	 * Validate get_category_by_slug function
+	 */
+	public function test_get_category_by_slug() {
+
+		// Create test categories.
+		$testcat  = self::factory()->category->create_and_get(
+			array(
+				'slug' => 'testcat',
+				'name' => 'Test Category 1',
+			)
+		);
+		$testcat2 = self::factory()->category->create_and_get(
+			array(
+				'slug' => 'testcat2',
+				'name' => 'Test Category 2',
+			)
+		);
+
+		// Validate category is returned by slug.
+		$ret_testcat = get_category_by_slug( 'testcat' );
+		$this->assertSame( $testcat->term_id, $ret_testcat->term_id );
+		$ret_testcat = get_category_by_slug( 'TeStCaT' );
+		$this->assertSame( $testcat->term_id, $ret_testcat->term_id );
+
+		// Validate unknown category returns false.
+		$this->assertFalse( get_category_by_slug( 'testcat3' ) );
+
+	}
+}
diff --git a/tests/category/makeCatCompat.php b/tests/category/makeCatCompat.php
new file mode 100644
index 0000000000..17999228c5
--- /dev/null
+++ b/tests/category/makeCatCompat.php
@@ -0,0 +1,86 @@
+<?php
+/**
+ * @group taxonomy
+ * @group category.php
+ *
+ * @covers ::_make_cat_compat
+ */
+class Tests_Category_MakeCatCompat extends WP_UnitTestCase {
+
+	/**
+	 * Validate _make_cat_compat function
+	 */
+	public function test__make_cat_compat() {
+
+		// Create test categories and array representations.
+		$testcat_array            = array(
+			'slug'        => 'testmcc',
+			'name'        => 'Test MCC',
+			'description' => 'Category Test',
+		);
+		$testcat                  = self::factory()->category->create_and_get( $testcat_array );
+		$testcat_array['term_id'] = $testcat->term_id;
+
+		$testcat2_array            = array(
+			'slug'        => 'testmcc',
+			'name'        => 'Test MCC',
+			'description' => 'Category Test',
+			'parent'      => $testcat->term_id,
+		);
+		$testcat2                  = self::factory()->category->create_and_get( $testcat2_array );
+		$testcat2_array['term_id'] = $testcat2->term_id;
+
+		// Unset properties to enable validation of object.
+		unset( $testcat->cat_ID );
+		unset( $testcat->category_count );
+		unset( $testcat->category_description );
+		unset( $testcat->cat_name );
+		unset( $testcat->category_nicename );
+		unset( $testcat->category_parent );
+
+		unset( $testcat2->cat_ID );
+		unset( $testcat2->category_count );
+		unset( $testcat2->category_description );
+		unset( $testcat2->cat_name );
+		unset( $testcat2->category_nicename );
+		unset( $testcat2->category_parent );
+
+		// Make compatible.
+		_make_cat_compat( $testcat );
+		_make_cat_compat( $testcat2 );
+		_make_cat_compat( $testcat_array );
+		_make_cat_compat( $testcat2_array );
+
+		// Validate compatibility object.
+		$this->assertSame( $testcat->cat_ID, $testcat->term_id );
+		$this->assertSame( $testcat->category_count, $testcat->count );
+		$this->assertSame( $testcat->category_description, $testcat->description );
+		$this->assertSame( $testcat->cat_name, $testcat->name );
+		$this->assertSame( $testcat->category_nicename, $testcat->slug );
+		$this->assertSame( $testcat->category_parent, $testcat->parent );
+
+		// Validate compatibility object with parent.
+		$this->assertSame( $testcat->cat_ID, $testcat->term_id );
+		$this->assertSame( $testcat->category_count, $testcat->count );
+		$this->assertSame( $testcat->category_description, $testcat->description );
+		$this->assertSame( $testcat->cat_name, $testcat->name );
+		$this->assertSame( $testcat->category_nicename, $testcat->slug );
+		$this->assertSame( $testcat->category_parent, $testcat->parent );
+
+		// Validate compatibility array.
+		$this->assertSame( $testcat_array['cat_ID'], $testcat_array['term_id'] );
+		$this->assertSame( $testcat_array['category_count'], $testcat_array['count'] );
+		$this->assertSame( $testcat_array['category_description'], $testcat_array['description'] );
+		$this->assertSame( $testcat_array['cat_name'], $testcat_array['name'] );
+		$this->assertSame( $testcat_array['category_nicename'], $testcat_array['slug'] );
+		$this->assertSame( $testcat_array['category_parent'], $testcat_array['parent'] );
+
+		// Validate compatibility array with parent.
+		$this->assertSame( $testcat_array['cat_ID'], $testcat_array['term_id'] );
+		$this->assertSame( $testcat_array['category_count'], $testcat_array['count'] );
+		$this->assertSame( $testcat_array['category_description'], $testcat_array['description'] );
+		$this->assertSame( $testcat_array['cat_name'], $testcat_array['name'] );
+		$this->assertSame( $testcat_array['category_nicename'], $testcat_array['slug'] );
+		$this->assertSame( $testcat_array['category_parent'], $testcat_array['parent'] );
+	}
+}
diff --git a/tests/comment.php b/tests/comment.php
index 9683110030..3914a94081 100644
--- a/tests/comment.php
+++ b/tests/comment.php
@@ -8,6 +8,8 @@ class Tests_Comment extends WP_UnitTestCase {
 	protected static $post_id;
 	protected static $notify_message = '';
 
+	protected $preprocess_comment_data = array();
+
 	public function set_up() {
 		parent::set_up();
 		reset_phpmailer_instance();
@@ -79,6 +81,90 @@ class Tests_Comment extends WP_UnitTestCase {
 		$this->assertEquals( $post2->ID, $comment->comment_post_ID );
 	}
 
+	public function test_update_comment_from_privileged_user_by_privileged_user() {
+		$admin_id_1 = self::factory()->user->create( array( 'role' => 'administrator' ) );
+		wp_set_current_user( $admin_id_1 );
+
+		$comment_id = wp_new_comment(
+			array(
+				'comment_post_ID'      => self::$post_id,
+				'comment_author'       => 'Author',
+				'comment_author_url'   => 'http://example.localhost/',
+				'comment_author_email' => 'test@test.com',
+				'user_id'              => $admin_id_1,
+				'comment_content'      => 'This is a comment',
+			)
+		);
+
+		wp_set_current_user( 0 );
+
+		$admin_id_2 = self::factory()->user->create(
+			array(
+				'role'       => 'administrator',
+				'user_login' => 'test_wp_admin_get',
+				'user_pass'  => 'password',
+				'user_email' => 'testadmin@test.com',
+			)
+		);
+
+		wp_set_current_user( $admin_id_2 );
+
+		wp_update_comment(
+			array(
+				'comment_ID'      => $comment_id,
+				'comment_content' => 'new comment <img onerror=demo src=x>',
+			)
+		);
+
+		$comment          = get_comment( $comment_id );
+		$expected_content = is_multisite()
+			? 'new comment '
+			: 'new comment <img onerror=demo src=x>';
+
+		$this->assertSame( $expected_content, $comment->comment_content );
+
+		wp_set_current_user( 0 );
+	}
+
+	public function test_update_comment_from_unprivileged_user_by_privileged_user() {
+		wp_set_current_user( self::$user_id );
+
+		$comment_id = wp_new_comment(
+			array(
+				'comment_post_ID'      => self::$post_id,
+				'comment_author'       => 'Author',
+				'comment_author_url'   => 'http://example.localhost/',
+				'comment_author_email' => 'test@test.com',
+				'user_id'              => self::$user_id,
+				'comment_content'      => '<a href="http://example.localhost/something.html">click</a>',
+			)
+		);
+
+		wp_set_current_user( 0 );
+
+		$admin_id = self::factory()->user->create(
+			array(
+				'role'       => 'administrator',
+				'user_login' => 'test_wp_admin_get',
+				'user_pass'  => 'password',
+				'user_email' => 'testadmin@test.com',
+			)
+		);
+
+		wp_set_current_user( $admin_id );
+
+		wp_update_comment(
+			array(
+				'comment_ID'      => $comment_id,
+				'comment_content' => '<a href="http://example.localhost/something.html" disallowed=attribute>click</a>',
+			)
+		);
+
+		$comment = get_comment( $comment_id );
+		$this->assertEquals( '<a href="http://example.localhost/something.html" rel="nofollow ugc">click</a>', $comment->comment_content, 'Comment: ' . $comment->comment_content );
+		wp_set_current_user( 0 );
+	}
+
 	/**
 	 * @ticket 30627
 	 *
@@ -437,7 +523,7 @@ class Tests_Comment extends WP_UnitTestCase {
 	/**
 	 * @covers ::wp_new_comment
 	 */
-	public function test_comment_field_lengths() {
+	public function test_wp_new_comment_respects_comment_field_lengths() {
 		$data = array(
 			'comment_post_ID'      => self::$post_id,
 			'comment_author'       => 'Comment Author',
@@ -453,7 +539,56 @@ class Tests_Comment extends WP_UnitTestCase {
 
 		$comment = get_comment( $id );
 
-		$this->assertSame( strlen( $comment->comment_content ), 65535 );
+		$this->assertSame( 65535, strlen( $comment->comment_content ) );
+	}
+
+	/**
+	 * @ticket 56244
+	 *
+	 * @covers ::wp_new_comment
+	 */
+	public function test_wp_new_comment_sends_all_expected_parameters_to_preprocess_comment_filter() {
+		$user = get_userdata( self::$user_id );
+		wp_set_current_user( $user->ID );
+
+		$data = array(
+			'comment_post_ID'      => self::$post_id,
+			'comment_author'       => $user->display_name,
+			'comment_author_email' => $user->user_email,
+			'comment_author_url'   => $user->user_url,
+			'comment_content'      => 'Comment',
+			'comment_type'         => '',
+			'comment_parent'       => 0,
+			'user_id'              => $user->ID,
+		);
+
+		add_filter( 'preprocess_comment', array( $this, 'filter_preprocess_comment' ) );
+
+		$comment = wp_new_comment( $data );
+
+		$this->assertNotWPError( $comment );
+		$this->assertSameSetsWithIndex(
+			array(
+				'comment_post_ID'      => self::$post_id,
+				'comment_author'       => $user->display_name,
+				'comment_author_email' => $user->user_email,
+				'comment_author_url'   => $user->user_url,
+				'comment_content'      => $data['comment_content'],
+				'comment_type'         => '',
+				'comment_parent'       => 0,
+				'user_ID'              => $user->ID,
+				'user_id'              => $user->ID,
+				'comment_author_IP'    => '127.0.0.1',
+				'comment_agent'        => '',
+			),
+			$this->preprocess_comment_data
+		);
+
+	}
+
+	public function filter_preprocess_comment( $commentdata ) {
+		$this->preprocess_comment_data = $commentdata;
+		return $commentdata;
 	}
 
 	/**
diff --git a/tests/comment/checkComment.php b/tests/comment/checkComment.php
index 5efcf9acce..c23e1d4dc2 100644
--- a/tests/comment/checkComment.php
+++ b/tests/comment/checkComment.php
@@ -70,7 +70,7 @@ class Tests_Comment_CheckComment extends WP_UnitTestCase {
 		$this->assertTrue( $results );
 	}
 
-	public function test_should_return_false_when_content_matches_moderation_key() {
+	public function test_should_return_false_when_content_matches_moderation_keys() {
 		update_option( 'comment_previously_approved', 0 );
 
 		$author       = 'WendytheBuilder';
@@ -86,6 +86,25 @@ class Tests_Comment_CheckComment extends WP_UnitTestCase {
 		$this->assertFalse( $results );
 	}
 
+	/**
+	 * @ticket 57207
+	 */
+	public function test_should_return_false_when_content_with_non_latin_words_matches_moderation_keys() {
+		update_option( 'comment_previously_approved', 0 );
+
+		$author       = 'Setup';
+		$author_email = 'setup@example.com';
+		$author_url   = 'http://example.com';
+		$comment      = 'Установка';
+		$author_ip    = '192.168.0.1';
+		$user_agent   = '';
+		$comment_type = '';
+
+		update_option( 'moderation_keys', "установка\nfoo" );
+		$results = check_comment( $author, $author_email, $author_url, $comment, $author_ip, $user_agent, $comment_type );
+		$this->assertFalse( $results );
+	}
+
 	public function test_should_return_true_when_content_does_not_match_moderation_keys() {
 		update_option( 'comment_previously_approved', 0 );
 
diff --git a/tests/comment/commentForm.php b/tests/comment/commentForm.php
index e9e6d99e73..05a9269ffb 100644
--- a/tests/comment/commentForm.php
+++ b/tests/comment/commentForm.php
@@ -153,4 +153,44 @@ class Tests_Comment_CommentForm extends WP_UnitTestCase {
 		$expected = '<a rel="nofollow" id="cancel-comment-reply-link" href="#respond" style="display:none;">Cancel reply</a>';
 		$this->assertStringNotContainsString( $expected, $form );
 	}
+
+	/**
+	 * @ticket 56243
+	 */
+	public function test_comment_form_should_not_display_for_global_post_when_called_with_invalid_id() {
+		// Go to permalink to ensure global post ID is set.
+		$this->go_to( get_permalink( self::$post_id ) );
+
+		$impossibly_high_post_id = PHP_INT_MAX;
+
+		$form = get_echo( 'comment_form', array( array(), $impossibly_high_post_id ) );
+		$this->assertEmpty( $form );
+	}
+
+	/**
+	 * @ticket 56243
+	 */
+	public function test_comment_form_should_display_for_global_post_with_falsey_post_id() {
+		$post_id = self::$post_id;
+		$this->go_to( get_permalink( $post_id ) );
+
+		$form = get_echo( 'comment_form', array( array(), false ) );
+		$this->assertNotEmpty( $form );
+
+		$post_hidden_field = "<input type='hidden' name='comment_post_ID' value='{$post_id}' id='comment_post_ID' />";
+		$this->assertStringContainsString( $post_hidden_field, $form );
+	}
+
+	/**
+	 * @ticket 56243
+	 */
+	public function test_comment_form_should_display_for_specified_post_when_passed_a_valid_post_id() {
+		$post_id = self::$post_id;
+
+		$form = get_echo( 'comment_form', array( array(), $post_id ) );
+		$this->assertNotEmpty( $form );
+
+		$post_hidden_field = "<input type='hidden' name='comment_post_ID' value='{$post_id}' id='comment_post_ID' />";
+		$this->assertStringContainsString( $post_hidden_field, $form );
+	}
 }
diff --git a/tests/comment/getCommentAuthorUrl.php b/tests/comment/getCommentAuthorUrl.php
index c796b4f072..bc008b19fc 100644
--- a/tests/comment/getCommentAuthorUrl.php
+++ b/tests/comment/getCommentAuthorUrl.php
@@ -3,7 +3,7 @@
 /**
  * @group comment
  *
- *@covers ::get_comment_author_url
+ * @covers ::get_comment_author_url
  */
 class Tests_Comment_GetCommentAuthorUrl extends WP_UnitTestCase {
 	public function get_comment_author_url_filter( $url, $id, $comment ) {
diff --git a/tests/comment/getCommentCount.php b/tests/comment/getCommentCount.php
index 1f26459dfa..6b47b940a7 100644
--- a/tests/comment/getCommentCount.php
+++ b/tests/comment/getCommentCount.php
@@ -3,11 +3,9 @@
 /**
  * @group comment
  *
- * Class Tests_Get_Comment_Count
- *
  * @covers ::get_comment_count
  */
-class Tests_Get_Comment_Count extends WP_UnitTestCase {
+class Tests_Comment_GetCommentCount extends WP_UnitTestCase {
 
 	public function test_get_comment_count() {
 		$count = get_comment_count();
diff --git a/tests/comment/getCommentExcerpt.php b/tests/comment/getCommentExcerpt.php
index 009fa747cb..0a6455054a 100644
--- a/tests/comment/getCommentExcerpt.php
+++ b/tests/comment/getCommentExcerpt.php
@@ -3,11 +3,9 @@
 /**
  * @group comment
  *
- * Class Tests_Get_Comment_Excerpt
- *
  * @covers ::get_comment_excerpt
  */
-class Tests_Get_Comment_Excerpt extends WP_UnitTestCase {
+class Tests_Comment_GetCommentExcerpt extends WP_UnitTestCase {
 	protected static $bacon_comment = 'Bacon ipsum dolor amet porchetta capicola sirloin prosciutto brisket shankle jerky. Ham hock filet mignon boudin ground round, prosciutto alcatra spare ribs meatball turducken pork beef ribs ham beef. Bacon pastrami short loin, venison tri-tip ham short ribs doner swine. Tenderloin pig tongue pork jowl doner. Pork loin rump t-bone, beef strip steak flank drumstick tri-tip short loin capicola jowl. Cow filet mignon hamburger doner rump. Short loin jowl drumstick, tongue tail beef ribs pancetta flank brisket landjaeger chuck venison frankfurter turkey.
 
 Brisket shank rump, tongue beef ribs swine fatback turducken capicola meatball picanha chicken cupim meatloaf turkey. Bacon biltong shoulder tail frankfurter boudin cupim turkey drumstick. Porchetta pig shoulder, jerky flank pork tail meatball hamburger. Doner ham hock ribeye tail jerky swine. Leberkas ribeye pancetta, tenderloin capicola doner turducken chicken venison ground round boudin pork chop. Tail pork loin pig spare ribs, biltong ribeye brisket pork chop cupim. Short loin leberkas spare ribs jowl landjaeger tongue kevin flank bacon prosciutto.
diff --git a/tests/comment/getCommentsPagesCount.php b/tests/comment/getCommentsPagesCount.php
index 00a5244f3a..a3c815f8c4 100644
--- a/tests/comment/getCommentsPagesCount.php
+++ b/tests/comment/getCommentsPagesCount.php
@@ -174,9 +174,9 @@ class Tests_Comment_GetCommentsPagesCount extends WP_UnitTestCase {
 
 		$wp_query->max_num_comment_pages = 7;
 
-		$this->assertEquals( 7, get_comment_pages_count() );
-		$this->assertEquals( 7, get_comment_pages_count( null, null, null ) );
-		$this->assertEquals( 0, get_comment_pages_count( array(), null, null ) );
+		$this->assertSame( 7, get_comment_pages_count() );
+		$this->assertSame( 7, get_comment_pages_count( null, null, null ) );
+		$this->assertSame( 0, get_comment_pages_count( array(), null, null ) );
 
 		$wp_query->max_num_comment_pages = $org_max_num_comment_pages;
 	}
diff --git a/tests/comment/lastCommentModified.php b/tests/comment/getLastCommentModified.php
similarity index 98%
rename from tests/comment/lastCommentModified.php
rename to tests/comment/getLastCommentModified.php
index 3de37b0980..03229ba350 100644
--- a/tests/comment/lastCommentModified.php
+++ b/tests/comment/getLastCommentModified.php
@@ -6,7 +6,7 @@
  *
  * @covers ::get_lastcommentmodified
  */
-class Tests_Comment_Last_Modified extends WP_UnitTestCase {
+class Tests_Comment_GetLastCommentModified extends WP_UnitTestCase {
 	public function test_no_comments() {
 		$this->assertFalse( get_lastcommentmodified() );
 	}
diff --git a/tests/comment/metaCache.php b/tests/comment/metaCache.php
index cfbf2b32fc..bd96e8b3e1 100644
--- a/tests/comment/metaCache.php
+++ b/tests/comment/metaCache.php
@@ -2,7 +2,7 @@
 /**
  * @group comment
  */
-class Tests_Comment_Meta_Cache extends WP_UnitTestCase {
+class Tests_Comment_MetaCache extends WP_UnitTestCase {
 	protected $i       = 0;
 	protected $queries = 0;
 
diff --git a/tests/comment/query.php b/tests/comment/query.php
index 94b13192d5..5a7ab9441d 100644
--- a/tests/comment/query.php
+++ b/tests/comment/query.php
@@ -2080,11 +2080,11 @@ class Tests_Comment_Query extends WP_UnitTestCase {
 		$this->assertSameSets( array( $c3 ), $comment_ids );
 	}
 
-		/**
-		 * @ticket 29885
-		 *
-		 * @covers ::get_comments
-		 */
+	/**
+	 * @ticket 29885
+	 *
+	 * @covers ::get_comments
+	 */
 	public function test_fields_author__in() {
 		$p1 = self::factory()->post->create();
 		$p2 = self::factory()->post->create();
@@ -2130,11 +2130,11 @@ class Tests_Comment_Query extends WP_UnitTestCase {
 		$this->assertSameSets( array( $c1, $c3 ), $comment_ids );
 	}
 
-		/**
-		 * @ticket 29885
-		 *
-		 * @covers ::get_comments
-		 */
+	/**
+	 * @ticket 29885
+	 *
+	 * @covers ::get_comments
+	 */
 	public function test_fields_author__not_in() {
 		$p1 = self::factory()->post->create();
 		$p2 = self::factory()->post->create();
@@ -3328,7 +3328,6 @@ class Tests_Comment_Query extends WP_UnitTestCase {
 	}
 
 	/**
-	 *
 	 * @covers WP_Comment_Query::query
 	 */
 	public function test_post_name_single_value() {
@@ -4021,7 +4020,7 @@ class Tests_Comment_Query extends WP_UnitTestCase {
 			)
 		);
 
-		$this->assertEquals( 3, $q->found_comments );
+		$this->assertSame( 3, $q->found_comments );
 		$this->assertEquals( 2, $q->max_num_pages );
 	}
 
diff --git a/tests/comment/wpBatchUpdateCommentType.php b/tests/comment/wpBatchUpdateCommentType.php
index 85a89e4cfc..d3aa7a4fda 100644
--- a/tests/comment/wpBatchUpdateCommentType.php
+++ b/tests/comment/wpBatchUpdateCommentType.php
@@ -5,7 +5,7 @@
  *
  * @covers ::_wp_batch_update_comment_type
  */
-class Tests_Batch_Update_Comment_Type extends WP_UnitTestCase {
+class Tests_Comment_wpBatchUpdateCommentType extends WP_UnitTestCase {
 
 	/**
 	 * @ticket 49236
diff --git a/tests/comment/wpBlacklistCheck.php b/tests/comment/wpCheckCommentDisallowedList.php
similarity index 83%
rename from tests/comment/wpBlacklistCheck.php
rename to tests/comment/wpCheckCommentDisallowedList.php
index 86a449825d..28c6e2a25e 100644
--- a/tests/comment/wpBlacklistCheck.php
+++ b/tests/comment/wpCheckCommentDisallowedList.php
@@ -2,8 +2,10 @@
 
 /**
  * @group comment
+ *
+ * @covers ::wp_check_comment_disallowed_list
  */
-class Tests_WP_Blocklist_Check extends WP_UnitTestCase {
+class Tests_Comment_wpCheckCommentDisallowedList extends WP_UnitTestCase {
 
 	public function test_should_return_true_when_content_matches_disallowed_keys() {
 		$author       = 'Sting';
@@ -38,6 +40,24 @@ class Tests_WP_Blocklist_Check extends WP_UnitTestCase {
 		$this->assertTrue( $result );
 	}
 
+	/**
+	 * @ticket 57207
+	 */
+	public function test_should_return_true_when_content_with_non_latin_words_matches_disallowed_keys() {
+		$author       = 'Setup';
+		$author_email = 'setup@example.com';
+		$author_url   = 'http://example.com';
+		$comment      = 'Установка';
+		$author_ip    = '192.168.0.1';
+		$user_agent   = '';
+
+		update_option( 'disallowed_keys', "установка\nfoo" );
+
+		$result = wp_check_comment_disallowed_list( $author, $author_email, $author_url, $comment, $author_ip, $user_agent );
+
+		$this->assertTrue( $result );
+	}
+
 	public function test_should_return_true_when_author_matches_disallowed_keys() {
 		$author       = 'Sideshow Mel';
 		$author_email = 'mel@example.com';
diff --git a/tests/comment/wpComment.php b/tests/comment/wpComment.php
index d5a7119deb..7aa0de87a8 100644
--- a/tests/comment/wpComment.php
+++ b/tests/comment/wpComment.php
@@ -5,7 +5,7 @@
  *
  * @covers WP_Comment::get_instance
  */
-class Tests_Term_WpComment extends WP_UnitTestCase {
+class Tests_Comment_WpComment extends WP_UnitTestCase {
 	protected static $comment_id;
 
 	public static function wpSetUpBeforeClass( WP_UnitTest_Factory $factory ) {
diff --git a/tests/comment/wpCountComments.php b/tests/comment/wpCountComments.php
index ef3e337261..da490977f2 100644
--- a/tests/comment/wpCountComments.php
+++ b/tests/comment/wpCountComments.php
@@ -3,11 +3,9 @@
 /**
  * @group comment
  *
- * Class Tests_WP_Count_Comments
- *
  * @covers ::wp_count_comments
  */
-class Tests_WP_Count_Comments extends WP_UnitTestCase {
+class Tests_Comment_wpCountComments extends WP_UnitTestCase {
 
 	public function test_wp_count_comments() {
 		$count = wp_count_comments();
diff --git a/tests/comment-submission.php b/tests/comment/wpHandleCommentSubmission.php
similarity index 83%
rename from tests/comment-submission.php
rename to tests/comment/wpHandleCommentSubmission.php
index 14275494db..e4ec77af7a 100644
--- a/tests/comment-submission.php
+++ b/tests/comment/wpHandleCommentSubmission.php
@@ -2,8 +2,10 @@
 
 /**
  * @group comment
+ *
+ * @covers ::wp_handle_comment_submission
  */
-class Tests_Comment_Submission extends WP_UnitTestCase {
+class Tests_Comment_wpHandleCommentSubmission extends WP_UnitTestCase {
 
 	protected static $post;
 	protected static $author_id;
@@ -39,9 +41,6 @@ class Tests_Comment_Submission extends WP_UnitTestCase {
 		require_once ABSPATH . WPINC . '/class-phpass.php';
 	}
 
-	/**
-	 * @covers ::wp_handle_comment_submission
-	 */
 	public function test_submitting_comment_to_invalid_post_returns_error() {
 		$error = 'comment_id_not_found';
 
@@ -58,9 +57,6 @@ class Tests_Comment_Submission extends WP_UnitTestCase {
 
 	}
 
-	/**
-	 * @covers ::wp_handle_comment_submission
-	 */
 	public function test_submitting_comment_to_post_with_closed_comments_returns_error() {
 
 		$error = 'comment_closed';
@@ -84,9 +80,6 @@ class Tests_Comment_Submission extends WP_UnitTestCase {
 
 	}
 
-	/**
-	 * @covers ::wp_handle_comment_submission
-	 */
 	public function test_submitting_comment_to_trashed_post_returns_error() {
 
 		$error = 'comment_on_trash';
@@ -108,9 +101,6 @@ class Tests_Comment_Submission extends WP_UnitTestCase {
 
 	}
 
-	/**
-	 * @covers ::wp_handle_comment_submission
-	 */
 	public function test_submitting_comment_to_draft_post_returns_error() {
 		$error = 'comment_on_draft';
 
@@ -136,8 +126,6 @@ class Tests_Comment_Submission extends WP_UnitTestCase {
 
 	/**
 	 * @ticket 39650
-	 *
-	 * @covers ::wp_handle_comment_submission
 	 */
 	public function test_submitting_comment_to_draft_post_returns_error_message_for_user_with_correct_caps() {
 		$error = 'comment_on_draft';
@@ -164,9 +152,6 @@ class Tests_Comment_Submission extends WP_UnitTestCase {
 		$this->assertNotEmpty( $comment->get_error_message() );
 	}
 
-	/**
-	 * @covers ::wp_handle_comment_submission
-	 */
 	public function test_submitting_comment_to_scheduled_post_returns_error() {
 
 		// Same error as commenting on a draft.
@@ -193,9 +178,6 @@ class Tests_Comment_Submission extends WP_UnitTestCase {
 
 	}
 
-	/**
-	 * @covers ::wp_handle_comment_submission
-	 */
 	public function test_submitting_comment_to_password_required_post_returns_error() {
 
 		$error = 'comment_on_password_protected';
@@ -219,20 +201,7 @@ class Tests_Comment_Submission extends WP_UnitTestCase {
 
 	}
 
-	/**
-	 * @covers ::wp_handle_comment_submission
-	 */
 	public function test_submitting_comment_to_password_protected_post_succeeds() {
-		if ( PHP_VERSION_ID >= 80100 ) {
-			/*
-			 * For the time being, ignoring PHP 8.1 "null to non-nullable" deprecations coming in
-			 * via hooked in filter functions until a more structural solution to the
-			 * "missing input validation" conundrum has been architected and implemented.
-			 */
-			$this->expectDeprecation();
-			$this->expectDeprecationMessageMatches( '`Passing null to parameter \#[0-9]+ \(\$[^\)]+\) of type [^ ]+ is deprecated`' );
-		}
-
 		$password = 'password';
 		$hasher   = new PasswordHash( 8, true );
 
@@ -259,9 +228,6 @@ class Tests_Comment_Submission extends WP_UnitTestCase {
 
 	}
 
-	/**
-	 * @covers ::wp_handle_comment_submission
-	 */
 	public function test_submitting_valid_comment_as_logged_in_user_succeeds() {
 
 		$user = self::factory()->user->create_and_get(
@@ -289,9 +255,6 @@ class Tests_Comment_Submission extends WP_UnitTestCase {
 
 	}
 
-	/**
-	 * @covers ::wp_handle_comment_submission
-	 */
 	public function test_submitting_valid_comment_anonymously_succeeds() {
 
 		$data    = array(
@@ -318,20 +281,8 @@ class Tests_Comment_Submission extends WP_UnitTestCase {
 	 * wp_handle_comment_submission() expects un-slashed data.
 	 *
 	 * @group slashes
-	 *
-	 * @covers ::wp_handle_comment_submission
 	 */
-	public function test_submitting_comment_handles_slashes_correctly_handles_slashes() {
-		if ( PHP_VERSION_ID >= 80100 ) {
-			/*
-			 * For the time being, ignoring PHP 8.1 "null to non-nullable" deprecations coming in
-			 * via hooked in filter functions until a more structural solution to the
-			 * "missing input validation" conundrum has been architected and implemented.
-			 */
-			$this->expectDeprecation();
-			$this->expectDeprecationMessageMatches( '`Passing null to parameter \#[0-9]+ \(\$[^\)]+\) of type [^ ]+ is deprecated`' );
-		}
-
+	public function test_submitting_comment_handles_slashes_correctly() {
 		$data    = array(
 			'comment_post_ID' => self::$post->ID,
 			'comment'         => 'Comment with 1 slash: \\',
@@ -349,9 +300,6 @@ class Tests_Comment_Submission extends WP_UnitTestCase {
 
 	}
 
-	/**
-	 * @covers ::wp_handle_comment_submission
-	 */
 	public function test_submitting_comment_anonymously_to_private_post_returns_error() {
 
 		$error = 'comment_id_not_found';
@@ -373,9 +321,6 @@ class Tests_Comment_Submission extends WP_UnitTestCase {
 
 	}
 
-	/**
-	 * @covers ::wp_handle_comment_submission
-	 */
 	public function test_submitting_comment_as_logged_in_user_to_inaccessible_private_post_returns_error() {
 
 		$error = 'comment_id_not_found';
@@ -406,9 +351,6 @@ class Tests_Comment_Submission extends WP_UnitTestCase {
 
 	}
 
-	/**
-	 * @covers ::wp_handle_comment_submission
-	 */
 	public function test_submitting_comment_to_private_post_with_closed_comments_returns_correct_error() {
 
 		$error = 'comment_id_not_found';
@@ -440,9 +382,6 @@ class Tests_Comment_Submission extends WP_UnitTestCase {
 
 	}
 
-	/**
-	 * @covers ::wp_handle_comment_submission
-	 */
 	public function test_submitting_comment_to_own_private_post_succeeds() {
 
 		wp_set_current_user( self::$author_id );
@@ -466,9 +405,6 @@ class Tests_Comment_Submission extends WP_UnitTestCase {
 
 	}
 
-	/**
-	 * @covers ::wp_handle_comment_submission
-	 */
 	public function test_submitting_comment_to_accessible_private_post_succeeds() {
 
 		wp_set_current_user( self::$editor_id );
@@ -492,20 +428,7 @@ class Tests_Comment_Submission extends WP_UnitTestCase {
 
 	}
 
-	/**
-	 * @covers ::wp_handle_comment_submission
-	 */
 	public function test_anonymous_user_cannot_comment_unfiltered_html() {
-		if ( PHP_VERSION_ID >= 80100 ) {
-			/*
-			 * For the time being, ignoring PHP 8.1 "null to non-nullable" deprecations coming in
-			 * via hooked in filter functions until a more structural solution to the
-			 * "missing input validation" conundrum has been architected and implemented.
-			 */
-			$this->expectDeprecation();
-			$this->expectDeprecationMessageMatches( '`Passing null to parameter \#[0-9]+ \(\$[^\)]+\) of type [^ ]+ is deprecated`' );
-		}
-
 		$data    = array(
 			'comment_post_ID' => self::$post->ID,
 			'comment'         => 'Comment <script>alert(document.cookie);</script>',
@@ -520,9 +443,6 @@ class Tests_Comment_Submission extends WP_UnitTestCase {
 
 	}
 
-	/**
-	 * @covers ::wp_handle_comment_submission
-	 */
 	public function test_unprivileged_user_cannot_comment_unfiltered_html() {
 
 		wp_set_current_user( self::$author_id );
@@ -541,9 +461,6 @@ class Tests_Comment_Submission extends WP_UnitTestCase {
 
 	}
 
-	/**
-	 * @covers ::wp_handle_comment_submission
-	 */
 	public function test_unprivileged_user_cannot_comment_unfiltered_html_even_with_valid_nonce() {
 
 		wp_set_current_user( self::$author_id );
@@ -568,9 +485,6 @@ class Tests_Comment_Submission extends WP_UnitTestCase {
 
 	}
 
-	/**
-	 * @covers ::wp_handle_comment_submission
-	 */
 	public function test_privileged_user_can_comment_unfiltered_html_with_valid_nonce() {
 
 		$this->assertFalse( defined( 'DISALLOW_UNFILTERED_HTML' ) );
@@ -603,9 +517,6 @@ class Tests_Comment_Submission extends WP_UnitTestCase {
 
 	}
 
-	/**
-	 * @covers ::wp_handle_comment_submission
-	 */
 	public function test_privileged_user_cannot_comment_unfiltered_html_without_valid_nonce() {
 
 		if ( is_multisite() ) {
@@ -630,9 +541,6 @@ class Tests_Comment_Submission extends WP_UnitTestCase {
 
 	}
 
-	/**
-	 * @covers ::wp_handle_comment_submission
-	 */
 	public function test_submitting_comment_as_anonymous_user_when_registration_required_returns_error() {
 
 		$error = 'not_logged_in';
@@ -652,9 +560,6 @@ class Tests_Comment_Submission extends WP_UnitTestCase {
 
 	}
 
-	/**
-	 * @covers ::wp_handle_comment_submission
-	 */
 	public function test_submitting_comment_with_no_name_when_name_email_required_returns_error() {
 
 		$error = 'require_name_email';
@@ -676,9 +581,6 @@ class Tests_Comment_Submission extends WP_UnitTestCase {
 
 	}
 
-	/**
-	 * @covers ::wp_handle_comment_submission
-	 */
 	public function test_submitting_comment_with_no_email_when_name_email_required_returns_error() {
 
 		$error = 'require_name_email';
@@ -700,9 +602,6 @@ class Tests_Comment_Submission extends WP_UnitTestCase {
 
 	}
 
-	/**
-	 * @covers ::wp_handle_comment_submission
-	 */
 	public function test_submitting_comment_with_invalid_email_when_name_email_required_returns_error() {
 
 		$error = 'require_valid_email';
@@ -725,9 +624,6 @@ class Tests_Comment_Submission extends WP_UnitTestCase {
 
 	}
 
-	/**
-	 * @covers ::wp_handle_comment_submission
-	 */
 	public function test_submitting_comment_with_no_comment_content_returns_error() {
 
 		$error = 'require_valid_comment';
@@ -747,8 +643,6 @@ class Tests_Comment_Submission extends WP_UnitTestCase {
 
 	/**
 	 * @ticket 10377
-	 *
-	 * @covers ::wp_handle_comment_submission
 	 */
 	public function test_submitting_comment_with_content_too_long_returns_error() {
 		$error = 'comment_content_column_length';
@@ -767,8 +661,6 @@ class Tests_Comment_Submission extends WP_UnitTestCase {
 
 	/**
 	 * @ticket 10377
-	 *
-	 * @covers ::wp_handle_comment_submission
 	 */
 	public function test_submitting_comment_with_author_too_long_returns_error() {
 		$error = 'comment_author_column_length';
@@ -787,8 +679,6 @@ class Tests_Comment_Submission extends WP_UnitTestCase {
 
 	/**
 	 * @ticket 10377
-	 *
-	 * @covers ::wp_handle_comment_submission
 	 */
 	public function test_submitting_comment_with_email_too_long_returns_error() {
 		$error = 'comment_author_email_column_length';
@@ -807,8 +697,6 @@ class Tests_Comment_Submission extends WP_UnitTestCase {
 
 	/**
 	 * @ticket 10377
-	 *
-	 * @covers ::wp_handle_comment_submission
 	 */
 	public function test_submitting_comment_with_url_too_long_returns_error() {
 		$error = 'comment_author_url_column_length';
@@ -828,20 +716,8 @@ class Tests_Comment_Submission extends WP_UnitTestCase {
 
 	/**
 	 * @ticket 49236
-	 *
-	 * @covers ::wp_handle_comment_submission
 	 */
 	public function test_submitting_comment_with_empty_type_results_in_correct_type() {
-		if ( PHP_VERSION_ID >= 80100 ) {
-			/*
-			 * For the time being, ignoring PHP 8.1 "null to non-nullable" deprecations coming in
-			 * via hooked in filter functions until a more structural solution to the
-			 * "missing input validation" conundrum has been architected and implemented.
-			 */
-			$this->expectDeprecation();
-			$this->expectDeprecationMessageMatches( '`Passing null to parameter \#[0-9]+ \(\$[^\)]+\) of type [^ ]+ is deprecated`' );
-		}
-
 		$data    = array(
 			'comment_post_ID' => self::$post->ID,
 			'comment'         => 'Comment',
@@ -881,11 +757,8 @@ class Tests_Comment_Submission extends WP_UnitTestCase {
 
 	/**
 	 * @ticket 34997
-	 *
-	 * @covers ::wp_handle_comment_submission
 	 */
 	public function test_comment_submission_sends_all_expected_parameters_to_preprocess_comment_filter() {
-
 		$user = get_userdata( self::$author_id );
 		wp_set_current_user( $user->ID );
 
@@ -898,8 +771,6 @@ class Tests_Comment_Submission extends WP_UnitTestCase {
 
 		$comment = wp_handle_comment_submission( $data );
 
-		remove_filter( 'preprocess_comment', array( $this, 'filter_preprocess_comment' ) );
-
 		$this->assertNotWPError( $comment );
 		$this->assertSameSetsWithIndex(
 			array(
@@ -920,6 +791,32 @@ class Tests_Comment_Submission extends WP_UnitTestCase {
 
 	}
 
+	/**
+	 * @ticket 56712
+	 */
+	public function test_submitting_comment_without_optional_parameters_sets_them_to_empty_strings() {
+		$data = array(
+			'comment_post_ID' => self::$post->ID,
+		);
+
+		add_filter( 'pre_option_require_name_email', '__return_zero' );
+		add_filter( 'allow_empty_comment', '__return_true' );
+
+		add_filter( 'preprocess_comment', array( $this, 'filter_preprocess_comment' ) );
+
+		$comment = wp_handle_comment_submission( $data );
+
+		$this->assertNotWPError( $comment );
+		$this->assertInstanceOf( 'WP_Comment', $comment );
+
+		$commentdata = $this->preprocess_comment_data;
+
+		$this->assertSame( '', $commentdata['comment_author'], 'Comment author should default to an empty string.' );
+		$this->assertSame( '', $commentdata['comment_author_email'], 'Comment author email should default to an empty string.' );
+		$this->assertSame( '', $commentdata['comment_author_url'], 'Comment author URL should default to an empty string.' );
+		$this->assertSame( '', $commentdata['comment_content'], 'Comment content should default to an empty string.' );
+	}
+
 	public function filter_preprocess_comment( $commentdata ) {
 		$this->preprocess_comment_data = $commentdata;
 		return $commentdata;
@@ -927,20 +824,8 @@ class Tests_Comment_Submission extends WP_UnitTestCase {
 
 	/**
 	 * @ticket 36901
-	 *
-	 * @covers ::wp_handle_comment_submission
 	 */
 	public function test_submitting_duplicate_comments() {
-		if ( PHP_VERSION_ID >= 80100 ) {
-			/*
-			 * For the time being, ignoring PHP 8.1 "null to non-nullable" deprecations coming in
-			 * via hooked in filter functions until a more structural solution to the
-			 * "missing input validation" conundrum has been architected and implemented.
-			 */
-			$this->expectDeprecation();
-			$this->expectDeprecationMessageMatches( '`Passing null to parameter \#[0-9]+ \(\$[^\)]+\) of type [^ ]+ is deprecated`' );
-		}
-
 		$data           = array(
 			'comment_post_ID' => self::$post->ID,
 			'comment'         => 'Did I say that?',
@@ -955,20 +840,8 @@ class Tests_Comment_Submission extends WP_UnitTestCase {
 
 	/**
 	 * @ticket 36901
-	 *
-	 * @covers ::wp_handle_comment_submission
 	 */
 	public function test_comments_flood() {
-		if ( PHP_VERSION_ID >= 80100 ) {
-			/*
-			 * For the time being, ignoring PHP 8.1 "null to non-nullable" deprecations coming in
-			 * via hooked in filter functions until a more structural solution to the
-			 * "missing input validation" conundrum has been architected and implemented.
-			 */
-			$this->expectDeprecation();
-			$this->expectDeprecationMessageMatches( '`Passing null to parameter \#[0-9]+ \(\$[^\)]+\) of type [^ ]+ is deprecated`' );
-		}
-
 		$data          = array(
 			'comment_post_ID' => self::$post->ID,
 			'comment'         => 'Did I say that?',
@@ -986,8 +859,6 @@ class Tests_Comment_Submission extends WP_UnitTestCase {
 
 	/**
 	 * @ticket 36901
-	 *
-	 * @covers ::wp_handle_comment_submission
 	 */
 	public function test_comments_flood_user_is_admin() {
 		$user = self::factory()->user->create_and_get(
diff --git a/tests/comment/wpUpdateCommentCountNow.php b/tests/comment/wpUpdateCommentCountNow.php
index 58b6b0d03b..42af1b0b5c 100644
--- a/tests/comment/wpUpdateCommentCountNow.php
+++ b/tests/comment/wpUpdateCommentCountNow.php
@@ -5,10 +5,7 @@
  *
  * @covers ::wp_update_comment_count_now
  */
-class Tests_Update_Comment_Count_Now extends WP_UnitTestCase {
-	public function _return_100() {
-		return 100;
-	}
+class Tests_Comment_wpUpdateCommentCountNow extends WP_UnitTestCase {
 
 	public function test_invalid_post_bails_early() {
 		$this->assertFalse( wp_update_comment_count_now( 100 ) );
@@ -50,4 +47,8 @@ class Tests_Update_Comment_Count_Now extends WP_UnitTestCase {
 
 		remove_filter( 'pre_wp_update_comment_count_now', array( $this, '_return_100' ) );
 	}
+
+	public function _return_100() {
+		return 100;
+	}
 }
diff --git a/tests/compat/mbStrlen.php b/tests/compat/mbStrlen.php
index e34b44534b..472d5a3bac 100644
--- a/tests/compat/mbStrlen.php
+++ b/tests/compat/mbStrlen.php
@@ -19,24 +19,24 @@ class Tests_Compat_mbStrlen extends WP_UnitTestCase {
 	/**
 	 * @dataProvider utf8_string_lengths
 	 */
-	public function test_mb_strlen( $string, $expected_character_length ) {
-		$this->assertSame( $expected_character_length, _mb_strlen( $string, 'UTF-8' ) );
+	public function test_mb_strlen( $input_string, $expected_character_length ) {
+		$this->assertSame( $expected_character_length, _mb_strlen( $input_string, 'UTF-8' ) );
 	}
 
 	/**
 	 * @dataProvider utf8_string_lengths
 	 */
-	public function test_mb_strlen_via_regex( $string, $expected_character_length ) {
+	public function test_mb_strlen_via_regex( $input_string, $expected_character_length ) {
 		_wp_can_use_pcre_u( false );
-		$this->assertSame( $expected_character_length, _mb_strlen( $string, 'UTF-8' ) );
+		$this->assertSame( $expected_character_length, _mb_strlen( $input_string, 'UTF-8' ) );
 		_wp_can_use_pcre_u( 'reset' );
 	}
 
 	/**
 	 * @dataProvider utf8_string_lengths
 	 */
-	public function test_8bit_mb_strlen( $string, $expected_character_length, $expected_byte_length ) {
-		$this->assertSame( $expected_byte_length, _mb_strlen( $string, '8bit' ) );
+	public function test_8bit_mb_strlen( $input_string, $expected_character_length, $expected_byte_length ) {
+		$this->assertSame( $expected_byte_length, _mb_strlen( $input_string, '8bit' ) );
 	}
 
 	/**
@@ -47,42 +47,42 @@ class Tests_Compat_mbStrlen extends WP_UnitTestCase {
 	public function utf8_string_lengths() {
 		return array(
 			array(
-				'string'                    => 'баба',
+				'input_string'              => 'баба',
 				'expected_character_length' => 4,
 				'expected_byte_length'      => 8,
 			),
 			array(
-				'string'                    => 'баб',
+				'input_string'              => 'баб',
 				'expected_character_length' => 3,
 				'expected_byte_length'      => 6,
 			),
 			array(
-				'string'                    => 'I am your б',
+				'input_string'              => 'I am your б',
 				'expected_character_length' => 11,
 				'expected_byte_length'      => 12,
 			),
 			array(
-				'string'                    => '1111111111',
+				'input_string'              => '1111111111',
 				'expected_character_length' => 10,
 				'expected_byte_length'      => 10,
 			),
 			array(
-				'string'                    => '²²²²²²²²²²',
+				'input_string'              => '²²²²²²²²²²',
 				'expected_character_length' => 10,
 				'expected_byte_length'      => 20,
 			),
 			array(
-				'string'                    => '３３３３３３３３３３',
+				'input_string'              => '３３３３３３３３３３',
 				'expected_character_length' => 10,
 				'expected_byte_length'      => 30,
 			),
 			array(
-				'string'                    => '𝟜𝟜𝟜𝟜𝟜𝟜𝟜𝟜𝟜𝟜',
+				'input_string'              => '𝟜𝟜𝟜𝟜𝟜𝟜𝟜𝟜𝟜𝟜',
 				'expected_character_length' => 10,
 				'expected_byte_length'      => 40,
 			),
 			array(
-				'string'                    => '1²３𝟜1²３𝟜1²３𝟜',
+				'input_string'              => '1²３𝟜1²３𝟜1²３𝟜',
 				'expected_character_length' => 12,
 				'expected_byte_length'      => 30,
 			),
diff --git a/tests/compat/mbSubstr.php b/tests/compat/mbSubstr.php
index f03f5f0f19..12325bee73 100644
--- a/tests/compat/mbSubstr.php
+++ b/tests/compat/mbSubstr.php
@@ -19,24 +19,24 @@ class Tests_Compat_mbSubstr extends WP_UnitTestCase {
 	/**
 	 * @dataProvider utf8_substrings
 	 */
-	public function test_mb_substr( $string, $start, $length, $expected_character_substring ) {
-		$this->assertSame( $expected_character_substring, _mb_substr( $string, $start, $length, 'UTF-8' ) );
+	public function test_mb_substr( $input_string, $start, $length, $expected_character_substring ) {
+		$this->assertSame( $expected_character_substring, _mb_substr( $input_string, $start, $length, 'UTF-8' ) );
 	}
 
 	/**
 	 * @dataProvider utf8_substrings
 	 */
-	public function test_mb_substr_via_regex( $string, $start, $length, $expected_character_substring ) {
+	public function test_mb_substr_via_regex( $input_string, $start, $length, $expected_character_substring ) {
 		_wp_can_use_pcre_u( false );
-		$this->assertSame( $expected_character_substring, _mb_substr( $string, $start, $length, 'UTF-8' ) );
+		$this->assertSame( $expected_character_substring, _mb_substr( $input_string, $start, $length, 'UTF-8' ) );
 		_wp_can_use_pcre_u( 'reset' );
 	}
 
 	/**
 	 * @dataProvider utf8_substrings
 	 */
-	public function test_8bit_mb_substr( $string, $start, $length, $expected_character_substring, $expected_byte_substring ) {
-		$this->assertSame( $expected_byte_substring, _mb_substr( $string, $start, $length, '8bit' ) );
+	public function test_8bit_mb_substr( $input_string, $start, $length, $expected_character_substring, $expected_byte_substring ) {
+		$this->assertSame( $expected_byte_substring, _mb_substr( $input_string, $start, $length, '8bit' ) );
 	}
 
 	/**
@@ -47,49 +47,49 @@ class Tests_Compat_mbSubstr extends WP_UnitTestCase {
 	public function utf8_substrings() {
 		return array(
 			array(
-				'string'                       => 'баба',
+				'input_string'                 => 'баба',
 				'start'                        => 0,
 				'length'                       => 3,
 				'expected_character_substring' => 'баб',
 				'expected_byte_substring'      => "б\xD0",
 			),
 			array(
-				'string'                       => 'баба',
+				'input_string'                 => 'баба',
 				'start'                        => 0,
 				'length'                       => -1,
 				'expected_character_substring' => 'баб',
 				'expected_byte_substring'      => "баб\xD0",
 			),
 			array(
-				'string'                       => 'баба',
+				'input_string'                 => 'баба',
 				'start'                        => 1,
 				'length'                       => null,
 				'expected_character_substring' => 'аба',
 				'expected_byte_substring'      => "\xB1аба",
 			),
 			array(
-				'string'                       => 'баба',
+				'input_string'                 => 'баба',
 				'start'                        => -3,
 				'length'                       => null,
 				'expected_character_substring' => 'аба',
 				'expected_byte_substring'      => "\xB1а",
 			),
 			array(
-				'string'                       => 'баба',
+				'input_string'                 => 'баба',
 				'start'                        => -3,
 				'length'                       => 2,
 				'expected_character_substring' => 'аб',
 				'expected_byte_substring'      => "\xB1\xD0",
 			),
 			array(
-				'string'                       => 'баба',
+				'input_string'                 => 'баба',
 				'start'                        => -1,
 				'length'                       => 2,
 				'expected_character_substring' => 'а',
 				'expected_byte_substring'      => "\xB0",
 			),
 			array(
-				'string'                       => 'I am your баба',
+				'input_string'                 => 'I am your баба',
 				'start'                        => 0,
 				'length'                       => 11,
 				'expected_character_substring' => 'I am your б',
diff --git a/tests/cron.php b/tests/cron.php
index ebb709fec9..e5ecee093b 100644
--- a/tests/cron.php
+++ b/tests/cron.php
@@ -456,7 +456,7 @@ class Tests_Cron extends WP_UnitTestCase {
 	/**
 	 * Filter the scheduling of events to use the preflight array.
 	 */
-	public function filter_pre_schedule_event_filter( $null, $event ) {
+	public function filter_pre_schedule_event_filter( $result, $event ) {
 		$key = md5( serialize( $event->args ) );
 
 		$this->preflight_cron_array[ $event->timestamp ][ $event->hook ][ $key ] = array(
@@ -465,6 +465,7 @@ class Tests_Cron extends WP_UnitTestCase {
 			'args'     => $event->args,
 		);
 		uksort( $this->preflight_cron_array, 'strnatcasecmp' );
+
 		return true;
 	}
 
diff --git a/tests/customize/custom-css-setting.php b/tests/customize/custom-css-setting.php
index f651b509a8..015b6308af 100644
--- a/tests/customize/custom-css-setting.php
+++ b/tests/customize/custom-css-setting.php
@@ -25,7 +25,7 @@ class Test_WP_Customize_Custom_CSS_Setting extends WP_UnitTestCase {
 	/**
 	 * Set up the test case.
 	 *
-	 * @see WP_UnitTestCase::setup()
+	 * @see WP_UnitTestCase_Base::set_up()
 	 */
 	public function set_up() {
 		parent::set_up();
diff --git a/tests/customize/manager.php b/tests/customize/manager.php
index df6679ebc7..9498211a1f 100644
--- a/tests/customize/manager.php
+++ b/tests/customize/manager.php
@@ -34,18 +34,11 @@ class Tests_WP_Customize_Manager extends WP_UnitTestCase {
 	protected static $subscriber_user_id;
 
 	/**
-	 * Path to test file 1.
+	 * Whether any attachments have been created in the current test run.
 	 *
-	 * @var string
+	 * @var bool
 	 */
-	private $test_file;
-
-	/**
-	 * Path to test file 2.
-	 *
-	 * @var string
-	 */
-	private $test_file2;
+	private $attachments_created = false;
 
 	/**
 	 * Set up before class.
@@ -64,19 +57,17 @@ class Tests_WP_Customize_Manager extends WP_UnitTestCase {
 		parent::set_up();
 		require_once ABSPATH . WPINC . '/class-wp-customize-manager.php';
 		$this->manager = $this->instantiate();
-
-		$orig_file       = DIR_TESTDATA . '/images/canola.jpg';
-		$this->test_file = get_temp_dir() . 'canola.jpg';
-		copy( $orig_file, $this->test_file );
-		$orig_file2       = DIR_TESTDATA . '/images/waffles.jpg';
-		$this->test_file2 = get_temp_dir() . 'waffles.jpg';
-		copy( $orig_file2, $this->test_file2 );
 	}
 
 	/**
 	 * Tear down test.
 	 */
 	public function tear_down() {
+		if ( true === $this->attachments_created ) {
+			$this->remove_added_uploads();
+			$this->attachments_created = false;
+		}
+
 		$this->manager = null;
 		unset( $GLOBALS['wp_customize'] );
 		$_REQUEST = array();
@@ -556,8 +547,13 @@ class Tests_WP_Customize_Manager extends WP_UnitTestCase {
 		add_theme_support( 'custom-header' );
 		add_theme_support( 'custom-background' );
 
-		$existing_canola_attachment_id     = self::factory()->attachment->create_object(
-			$this->test_file,
+		// For existing attachment, copy into uploads.
+		$canola_image_file    = DIR_TESTDATA . '/images/canola.jpg';
+		$canola_image_upload  = wp_upload_bits( wp_basename( $canola_image_file ), null, file_get_contents( $canola_image_file ) );
+		$existing_canola_file = $canola_image_upload['file'];
+
+		$existing_canola_attachment_id = self::factory()->attachment->create_object(
+			$existing_canola_file,
 			0,
 			array(
 				'post_mime_type' => 'image/jpeg',
@@ -565,6 +561,9 @@ class Tests_WP_Customize_Manager extends WP_UnitTestCase {
 				'post_name'      => 'canola',
 			)
 		);
+
+		$this->attachments_created = true;
+
 		$existing_published_home_page_id   = self::factory()->post->create(
 			array(
 				'post_name'   => 'home',
@@ -631,13 +630,13 @@ class Tests_WP_Customize_Manager extends WP_UnitTestCase {
 					'post_title'   => 'Waffles',
 					'post_content' => 'Waffles Attachment Description',
 					'post_excerpt' => 'Waffles Attachment Caption',
-					'file'         => $this->test_file2,
+					'file'         => DIR_TESTDATA . '/images/waffles.jpg',
 				),
 				'canola'  => array(
 					'post_title'   => 'Canola',
 					'post_content' => 'Canola Attachment Description',
 					'post_excerpt' => 'Canola Attachment Caption',
-					'file'         => $this->test_file,
+					'file'         => $existing_canola_file,
 				),
 			),
 			'options'     => array(
@@ -2533,10 +2532,10 @@ class Tests_WP_Customize_Manager extends WP_UnitTestCase {
 		$this->assertSame( $default_value, $this->manager->post_value( $setting, $default_value ) );
 		$this->assertSame( $default_value, $setting->post_value( $default_value ) );
 
-		$post_value = '42';
-		$this->manager->set_post_value( 'numeric', $post_value );
-		$this->assertEquals( $post_value, $this->manager->post_value( $setting, $default_value ) );
-		$this->assertEquals( $post_value, $setting->post_value( $default_value ) );
+		$post_value = 42;
+		$this->manager->set_post_value( 'numeric', (string) $post_value );
+		$this->assertSame( $post_value, $this->manager->post_value( $setting, $default_value ) );
+		$this->assertSame( $post_value, $setting->post_value( $default_value ) );
 	}
 
 	/**
@@ -3352,33 +3351,33 @@ class Tests_WP_Customize_Manager extends WP_UnitTestCase {
 	}
 
 	/**
-	 * Return 'Test_Dynamic_Customize_Setting' in 'customize_dynamic_setting_class.
+	 * Returns 'Test_Dynamic_Customize_Setting' in 'customize_dynamic_setting_class'.
 	 *
-	 * @param string $class Setting class.
-	 * @param array  $args  Setting args.
-	 * @param string $id    Setting ID.
-	 * @return string       Setting class.
+	 * @param string $setting_class Setting class.
+	 * @param array  $setting_args  Setting args.
+	 * @param string $setting_id    Setting ID.
+	 * @return string Setting class.
 	 */
-	public function return_dynamic_customize_setting_class( $class, $id, $args ) {
-		unset( $args );
-		if ( 0 === strpos( $id, 'dynamic' ) ) {
-			$class = 'Test_Dynamic_Customize_Setting';
+	public function return_dynamic_customize_setting_class( $setting_class, $setting_id, $setting_args ) {
+		unset( $setting_args );
+		if ( 0 === strpos( $setting_id, 'dynamic' ) ) {
+			$setting_class = 'Test_Dynamic_Customize_Setting';
 		}
-		return $class;
+		return $setting_class;
 	}
 
 	/**
-	 * Return 'Test_Dynamic_Customize_Setting' in 'customize_dynamic_setting_class.
+	 * Returns 'foo' in 'customize_dynamic_setting_args'.
 	 *
-	 * @param array  $args Setting args.
-	 * @param string $id   Setting ID.
-	 * @return string      Setting args.
+	 * @param array  $setting_args Setting args.
+	 * @param string $setting_id   Setting ID.
+	 * @return array Setting args.
 	 */
-	public function return_dynamic_customize_setting_args( $args, $id ) {
-		if ( 0 === strpos( $id, 'dynamic' ) ) {
-			$args['custom'] = 'foo';
+	public function return_dynamic_customize_setting_args( $setting_args, $setting_id ) {
+		if ( 0 === strpos( $setting_id, 'dynamic' ) ) {
+			$setting_args['custom'] = 'foo';
 		}
-		return $args;
+		return $setting_args;
 	}
 
 	/**
diff --git a/tests/customize/nav-menu-item-setting.php b/tests/customize/nav-menu-item-setting.php
index 212f871747..256e5f577c 100644
--- a/tests/customize/nav-menu-item-setting.php
+++ b/tests/customize/nav-menu-item-setting.php
@@ -16,7 +16,7 @@ class Test_WP_Customize_Nav_Menu_Item_Setting extends WP_UnitTestCase {
 	/**
 	 * Set up a test case.
 	 *
-	 * @see WP_UnitTestCase::setup()
+	 * @see WP_UnitTestCase_Base::set_up()
 	 */
 	public function set_up() {
 		parent::set_up();
diff --git a/tests/customize/nav-menu-setting.php b/tests/customize/nav-menu-setting.php
index 4a727618eb..6d50c96ee0 100644
--- a/tests/customize/nav-menu-setting.php
+++ b/tests/customize/nav-menu-setting.php
@@ -17,7 +17,7 @@ class Test_WP_Customize_Nav_Menu_Setting extends WP_UnitTestCase {
 	/**
 	 * Set up a test case.
 	 *
-	 * @see WP_UnitTestCase::setup()
+	 * @see WP_UnitTestCase_Base::set_up()
 	 */
 	public function set_up() {
 		parent::set_up();
diff --git a/tests/customize/nav-menus.php b/tests/customize/nav-menus.php
index 5785558103..6cc8f3d08c 100644
--- a/tests/customize/nav-menus.php
+++ b/tests/customize/nav-menus.php
@@ -17,7 +17,7 @@ class Test_WP_Customize_Nav_Menus extends WP_UnitTestCase {
 	/**
 	 * Set up a test case.
 	 *
-	 * @see WP_UnitTestCase::setup()
+	 * @see WP_UnitTestCase_Base::set_up()
 	 */
 	public function set_up() {
 		parent::set_up();
@@ -57,18 +57,18 @@ class Test_WP_Customize_Nav_Menus extends WP_UnitTestCase {
 	/**
 	 * Filter to add custom menu items.
 	 *
-	 * @param array  $items  The menu items.
-	 * @param string $type   The object type (e.g. taxonomy).
-	 * @param string $object The object name (e.g. category).
+	 * @param array  $items       The menu items.
+	 * @param string $object_type The object type (e.g. taxonomy).
+	 * @param string $object_name The object name (e.g. category).
 	 * @return array Menu items.
 	 */
-	public function filter_items( $items, $type, $object ) {
+	public function filter_items( $items, $object_type, $object_name ) {
 		$items[] = array(
 			'id'         => 'custom-1',
 			'title'      => 'Cool beans',
-			'type'       => $type,
+			'type'       => $object_type,
 			'type_label' => 'Custom Label',
-			'object'     => $object,
+			'object'     => $object_name,
 			'url'        => home_url( '/cool-beans/' ),
 			'classes'    => 'custom-menu-item cool-beans',
 		);
diff --git a/tests/customize/selective-refresh-ajax.php b/tests/customize/selective-refresh-ajax.php
index 541ca23b27..040697d419 100644
--- a/tests/customize/selective-refresh-ajax.php
+++ b/tests/customize/selective-refresh-ajax.php
@@ -188,8 +188,6 @@ class Test_WP_Customize_Selective_Refresh_Ajax extends WP_UnitTestCase {
 			)
 		);
 
-		$count_customize_render_partials_before = has_action( 'customize_render_partials_before' );
-		$count_customize_render_partials_after  = has_action( 'customize_render_partials_after' );
 		ob_start();
 		try {
 			$this->expected_partial_ids = array( 'foo' );
@@ -200,8 +198,8 @@ class Test_WP_Customize_Selective_Refresh_Ajax extends WP_UnitTestCase {
 		} catch ( WPDieException $e ) {
 			$this->assertSame( '', $e->getMessage() );
 		}
-		$this->assertEquals( $count_customize_render_partials_before + 1, has_action( 'customize_render_partials_before' ) );
-		$this->assertEquals( $count_customize_render_partials_after + 1, has_action( 'customize_render_partials_after' ) );
+		$this->assertTrue( has_action( 'customize_render_partials_before' ) );
+		$this->assertTrue( has_action( 'customize_render_partials_after' ) );
 		$output = json_decode( ob_get_clean(), true );
 		$this->assertSame( array( false ), $output['data']['contents']['foo'] );
 	}
@@ -326,8 +324,6 @@ class Test_WP_Customize_Selective_Refresh_Ajax extends WP_UnitTestCase {
 			)
 		);
 
-		$count_customize_render_partials_before = has_action( 'customize_render_partials_before' );
-		$count_customize_render_partials_after  = has_action( 'customize_render_partials_after' );
 		ob_start();
 		try {
 			$this->expected_partial_ids = array( 'test_blogname' );
@@ -338,8 +334,8 @@ class Test_WP_Customize_Selective_Refresh_Ajax extends WP_UnitTestCase {
 		} catch ( WPDieException $e ) {
 			$this->assertSame( '', $e->getMessage() );
 		}
-		$this->assertEquals( $count_customize_render_partials_before + 1, has_action( 'customize_render_partials_before' ) );
-		$this->assertEquals( $count_customize_render_partials_after + 1, has_action( 'customize_render_partials_after' ) );
+		$this->assertTrue( has_action( 'customize_render_partials_before' ) );
+		$this->assertTrue( has_action( 'customize_render_partials_after' ) );
 		$output = json_decode( ob_get_clean(), true );
 		$this->assertSame( array( get_bloginfo( 'name', 'display' ) ), $output['data']['contents']['test_blogname'] );
 		$this->assertArrayHasKey( 'setting_validities', $output['data'] );
@@ -435,8 +431,6 @@ class Test_WP_Customize_Selective_Refresh_Ajax extends WP_UnitTestCase {
 			)
 		);
 
-		$count_customize_render_partials_before = has_action( 'customize_render_partials_before' );
-		$count_customize_render_partials_after  = has_action( 'customize_render_partials_after' );
 		ob_start();
 		try {
 			$this->expected_partial_ids = array( 'test_dynamic_blogname' );
@@ -447,8 +441,8 @@ class Test_WP_Customize_Selective_Refresh_Ajax extends WP_UnitTestCase {
 		} catch ( WPDieException $e ) {
 			$this->assertSame( '', $e->getMessage() );
 		}
-		$this->assertEquals( $count_customize_render_partials_before + 1, has_action( 'customize_render_partials_before' ) );
-		$this->assertEquals( $count_customize_render_partials_after + 1, has_action( 'customize_render_partials_after' ) );
+		$this->assertTrue( has_action( 'customize_render_partials_before' ) );
+		$this->assertTrue( has_action( 'customize_render_partials_after' ) );
 		$output = json_decode( ob_get_clean(), true );
 		$this->assertSame( array( get_bloginfo( 'name', 'display' ) ), $output['data']['contents']['test_dynamic_blogname'] );
 	}
@@ -487,8 +481,6 @@ class Test_WP_Customize_Selective_Refresh_Ajax extends WP_UnitTestCase {
 			)
 		);
 
-		$count_customize_render_partials_before = has_action( 'customize_render_partials_before' );
-		$count_customize_render_partials_after  = has_action( 'customize_render_partials_after' );
 		ob_start();
 		try {
 			$this->expected_partial_ids = array( 'test_blogname', 'test_blogdescription' );
@@ -499,8 +491,8 @@ class Test_WP_Customize_Selective_Refresh_Ajax extends WP_UnitTestCase {
 		} catch ( WPDieException $e ) {
 			$this->assertSame( '', $e->getMessage() );
 		}
-		$this->assertEquals( $count_customize_render_partials_before + 1, has_action( 'customize_render_partials_before' ) );
-		$this->assertEquals( $count_customize_render_partials_after + 1, has_action( 'customize_render_partials_after' ) );
+		$this->assertTrue( has_action( 'customize_render_partials_before' ) );
+		$this->assertTrue( has_action( 'customize_render_partials_after' ) );
 		$output = json_decode( ob_get_clean(), true );
 		$this->assertSame( array( get_bloginfo( 'name', 'display' ) ), $output['data']['contents']['test_blogname'] );
 		$this->assertSame( array_fill( 0, 2, get_bloginfo( 'description', 'display' ) ), $output['data']['contents']['test_blogdescription'] );
diff --git a/tests/customize/setting.php b/tests/customize/setting.php
index 7645ec4c6a..ef7ea0d93a 100644
--- a/tests/customize/setting.php
+++ b/tests/customize/setting.php
@@ -316,13 +316,13 @@ class Tests_WP_Customize_Setting extends WP_UnitTestCase {
 	 */
 	protected $custom_type_data_previewed;
 
-	private function custom_type_getter( $name, $default = null ) {
+	private function custom_type_getter( $name, $default_value = null ) {
 		if ( did_action( "customize_preview_{$name}" ) && array_key_exists( $name, $this->custom_type_data_previewed ) ) {
 			$value = $this->custom_type_data_previewed[ $name ];
 		} elseif ( array_key_exists( $name, $this->custom_type_data_saved ) ) {
 			$value = $this->custom_type_data_saved[ $name ];
 		} else {
-			$value = $default;
+			$value = $default_value;
 		}
 		return $value;
 	}
@@ -334,17 +334,17 @@ class Tests_WP_Customize_Setting extends WP_UnitTestCase {
 	/**
 	 * Filter for `customize_value_{$id_base}`.
 	 *
-	 * @param mixed $default
+	 * @param mixed $default_value
 	 * @param WP_Customize_Setting $setting
 	 *
 	 * @return mixed|null
 	 */
-	public function custom_type_value_filter( $default, $setting = null ) {
+	public function custom_type_value_filter( $default_value, $setting = null ) {
 		$name = preg_replace( '/^customize_value_/', '', current_filter() );
 		$this->assertInstanceOf( 'WP_Customize_Setting', $setting );
 		$id_data = $setting->id_data();
 		$this->assertSame( $name, $id_data['base'] );
-		return $this->custom_type_getter( $name, $default );
+		return $this->custom_type_getter( $name, $default_value );
 	}
 
 	/**
diff --git a/tests/customize/widgets.php b/tests/customize/widgets.php
index 446bcf5a68..654008a7a9 100644
--- a/tests/customize/widgets.php
+++ b/tests/customize/widgets.php
@@ -556,7 +556,7 @@ class Tests_WP_Customize_Widgets extends WP_UnitTestCase {
 	 */
 	private function get_test_widget_control_args() {
 		global $wp_registered_widgets;
-		require_once ABSPATH . '/wp-admin/includes/widgets.php';
+		require_once ABSPATH . 'wp-admin/includes/widgets.php';
 		$widget_id = 'search-2';
 		$widget    = $wp_registered_widgets[ $widget_id ];
 		$args      = array(
diff --git a/tests/date/currentTime.php b/tests/date/currentTime.php
index 72d50abfba..66c2fdf3c5 100644
--- a/tests/date/currentTime.php
+++ b/tests/date/currentTime.php
@@ -92,7 +92,7 @@ class Tests_Date_CurrentTime extends WP_UnitTestCase {
 	 * @ticket 40653
 	 */
 	public function test_should_return_wp_timestamp() {
-		update_option( 'timezone_string', 'Europe/Kiev' );
+		update_option( 'timezone_string', 'Europe/Helsinki' );
 
 		$timestamp = time();
 		$datetime  = new DateTime( '@' . $timestamp );
@@ -117,7 +117,7 @@ class Tests_Date_CurrentTime extends WP_UnitTestCase {
 	 * @ticket 40653
 	 */
 	public function test_should_return_correct_local_time() {
-		update_option( 'timezone_string', 'Europe/Kiev' );
+		update_option( 'timezone_string', 'Europe/Helsinki' );
 
 		$timestamp      = time();
 		$datetime_local = new DateTime( '@' . $timestamp );
@@ -128,4 +128,33 @@ class Tests_Date_CurrentTime extends WP_UnitTestCase {
 		$this->assertEqualsWithDelta( strtotime( $datetime_local->format( DATE_W3C ) ), strtotime( current_time( DATE_W3C ) ), 2, 'The dates should be equal' );
 		$this->assertEqualsWithDelta( strtotime( $datetime_utc->format( DATE_W3C ) ), strtotime( current_time( DATE_W3C, true ) ), 2, 'The dates should be equal' );
 	}
+
+	/**
+	 * Ensures that deprecated timezone strings are handled correctly.
+	 *
+	 * @ticket 56468
+	 */
+	public function test_should_work_with_deprecated_timezone() {
+		$format          = 'Y-m-d H:i';
+		$timezone_string = 'America/Buenos_Aires'; // This timezone was deprecated pre-PHP 5.6.
+		update_option( 'timezone_string', $timezone_string );
+		$datetime = new DateTime( 'now', new DateTimeZone( $timezone_string ) );
+
+		// phpcs:ignore WordPress.DateTime.RestrictedFunctions.timezone_change_date_default_timezone_set
+		date_default_timezone_set( $timezone_string );
+
+		$current_time_custom_timezone_gmt = current_time( $format, true );
+		$current_time_custom_timezone     = current_time( $format );
+
+		// phpcs:ignore WordPress.DateTime.RestrictedFunctions.timezone_change_date_default_timezone_set
+		date_default_timezone_set( 'UTC' );
+
+		$current_time_gmt = current_time( $format, true );
+		$current_time     = current_time( $format );
+
+		$this->assertSame( gmdate( $format ), $current_time_custom_timezone_gmt, 'The dates should be equal [1]' );
+		$this->assertSame( $datetime->format( $format ), $current_time_custom_timezone, 'The dates should be equal [2]' );
+		$this->assertSame( gmdate( $format ), $current_time_gmt, 'The dates should be equal [3]' );
+		$this->assertSame( $datetime->format( $format ), $current_time, 'The dates should be equal [4]' );
+	}
 }
diff --git a/tests/date/dateI18n.php b/tests/date/dateI18n.php
index 5bd340b91d..dfc98dd369 100644
--- a/tests/date/dateI18n.php
+++ b/tests/date/dateI18n.php
@@ -22,7 +22,7 @@ class Tests_Date_DateI18n extends WP_UnitTestCase {
 	 * @ticket 28636
 	 */
 	public function test_should_return_current_time_on_invalid_timestamp() {
-		$timezone = 'Europe/Kiev';
+		$timezone = 'Europe/Helsinki';
 		update_option( 'timezone_string', $timezone );
 
 		$datetime     = new DateTime( 'now', new DateTimeZone( $timezone ) );
@@ -35,7 +35,7 @@ class Tests_Date_DateI18n extends WP_UnitTestCase {
 	 * @ticket 28636
 	 */
 	public function test_should_handle_zero_timestamp() {
-		$timezone = 'Europe/Kiev';
+		$timezone = 'Europe/Helsinki';
 		update_option( 'timezone_string', $timezone );
 
 		$datetime = DateTimeImmutable::createFromFormat(
@@ -108,6 +108,23 @@ class Tests_Date_DateI18n extends WP_UnitTestCase {
 		$this->assertSame( '2012-12-01 00:00:00 CST -06:00 America/Regina', date_i18n( 'Y-m-d H:i:s T P e', strtotime( '2012-12-01 00:00:00' ) ) );
 	}
 
+	/**
+	 * Ensures that deprecated timezone strings are handled correctly.
+	 *
+	 * @ticket 56468
+	 */
+	public function test_adjusts_format_based_on_deprecated_timezone_string() {
+		update_option( 'timezone_string', 'America/Buenos_Aires' ); // This timezone was deprecated pre-PHP 5.6.
+
+		$expected = '2022-08-01 00:00:00 -03 -03:00 America/Buenos_Aires';
+		if ( PHP_VERSION_ID < 70000 ) {
+			// PHP 5.6.
+			$expected = '2022-08-01 00:00:00 ART -03:00 America/Buenos_Aires';
+		}
+
+		$this->assertSame( $expected, date_i18n( 'Y-m-d H:i:s T P e', strtotime( '2022-08-01 00:00:00' ) ) );
+	}
+
 	/**
 	 * @ticket 34835
 	 */
@@ -154,7 +171,7 @@ class Tests_Date_DateI18n extends WP_UnitTestCase {
 	 * @ticket 25768
 	 */
 	public function test_should_return_wp_timestamp() {
-		update_option( 'timezone_string', 'Europe/Kiev' );
+		update_option( 'timezone_string', 'Europe/Helsinki' );
 
 		$datetime     = new DateTimeImmutable( 'now', wp_timezone() );
 		$timestamp    = $datetime->getTimestamp();
@@ -204,10 +221,10 @@ class Tests_Date_DateI18n extends WP_UnitTestCase {
 
 	public function dst_times() {
 		return array(
-			'Before DST start' => array( '2019-03-31 02:59:00', 'Europe/Kiev' ),
-			'After DST start'  => array( '2019-03-31 04:01:00', 'Europe/Kiev' ),
-			'Before DST end'   => array( '2019-10-27 02:59:00', 'Europe/Kiev' ),
-			'After DST end'    => array( '2019-10-27 04:01:00', 'Europe/Kiev' ),
+			'Before DST start' => array( '2019-03-31 02:59:00', 'Europe/Helsinki' ),
+			'After DST start'  => array( '2019-03-31 04:01:00', 'Europe/Helsinki' ),
+			'Before DST end'   => array( '2019-10-27 02:59:00', 'Europe/Helsinki' ),
+			'After DST end'    => array( '2019-10-27 04:01:00', 'Europe/Helsinki' ),
 		);
 	}
 }
diff --git a/tests/date/getFeedBuildDate.php b/tests/date/getFeedBuildDate.php
index 5f0416ce53..39cfd988d1 100644
--- a/tests/date/getFeedBuildDate.php
+++ b/tests/date/getFeedBuildDate.php
@@ -47,7 +47,7 @@ class Tests_Date_GetFeedBuildDate extends WP_UnitTestCase {
 	public function test_should_fall_back_to_last_post_modified() {
 		global $wp_query;
 
-		update_option( 'timezone_string', 'Europe/Kiev' );
+		update_option( 'timezone_string', 'Europe/Helsinki' );
 		$datetime     = new DateTimeImmutable( 'now', wp_timezone() );
 		$datetime_utc = $datetime->setTimezone( new DateTimeZone( 'UTC' ) );
 
diff --git a/tests/date/getPostTime.php b/tests/date/getPostTime.php
index 21b9c8675b..441e886210 100644
--- a/tests/date/getPostTime.php
+++ b/tests/date/getPostTime.php
@@ -61,7 +61,7 @@ class Tests_Date_GetPostTime extends WP_UnitTestCase {
 	 * @ticket 25002
 	 */
 	public function test_should_return_wp_timestamp() {
-		$timezone = 'Europe/Kiev';
+		$timezone = 'Europe/Helsinki';
 		update_option( 'timezone_string', $timezone );
 
 		$datetime     = new DateTimeImmutable( 'now', new DateTimeZone( $timezone ) );
@@ -90,7 +90,7 @@ class Tests_Date_GetPostTime extends WP_UnitTestCase {
 	 * @ticket 25002
 	 */
 	public function test_should_return_time() {
-		$timezone = 'Europe/Kiev';
+		$timezone = 'Europe/Helsinki';
 		update_option( 'timezone_string', $timezone );
 
 		$datetime    = new DateTimeImmutable( 'now', new DateTimeZone( $timezone ) );
@@ -131,7 +131,7 @@ class Tests_Date_GetPostTime extends WP_UnitTestCase {
 			)
 		);
 
-		update_option( 'timezone_string', 'Europe/Kiev' );
+		update_option( 'timezone_string', 'Europe/Helsinki' );
 
 		$this->assertSame( $rfc3339, get_post_time( DATE_RFC3339, true, $post_id ) );
 		$this->assertSame( $rfc3339, get_post_modified_time( DATE_RFC3339, true, $post_id ) );
diff --git a/tests/date/mysql2date.php b/tests/date/mysql2date.php
index b53a57cfac..2ae4939c56 100644
--- a/tests/date/mysql2date.php
+++ b/tests/date/mysql2date.php
@@ -36,7 +36,7 @@ class Tests_Date_mysql2date extends WP_UnitTestCase {
 	 * @ticket 28992
 	 */
 	public function test_mysql2date_should_format_time() {
-		$timezone = 'Europe/Kiev';
+		$timezone = 'Europe/Helsinki';
 		update_option( 'timezone_string', $timezone );
 		$datetime = new DateTime( 'now', new DateTimeZone( $timezone ) );
 		$rfc3339  = $datetime->format( DATE_RFC3339 );
@@ -50,7 +50,7 @@ class Tests_Date_mysql2date extends WP_UnitTestCase {
 	 * @ticket 28992
 	 */
 	public function test_mysql2date_should_format_time_with_changed_time_zone() {
-		$timezone = 'Europe/Kiev';
+		$timezone = 'Europe/Helsinki';
 		// phpcs:ignore WordPress.DateTime.RestrictedFunctions.timezone_change_date_default_timezone_set
 		date_default_timezone_set( $timezone );
 		update_option( 'timezone_string', $timezone );
@@ -62,11 +62,27 @@ class Tests_Date_mysql2date extends WP_UnitTestCase {
 		$this->assertSame( $rfc3339, mysql2date( DATE_RFC3339, $mysql, false ) );
 	}
 
+	/**
+	 * Ensures that deprecated timezone strings are handled correctly.
+	 *
+	 * @ticket 56468
+	 */
+	public function test_mysql2date_should_format_time_with_deprecated_time_zone() {
+		$timezone = 'America/Buenos_Aires'; // This timezone was deprecated pre-PHP 5.6.
+		update_option( 'timezone_string', $timezone );
+		$datetime = new DateTime( 'now', new DateTimeZone( $timezone ) );
+		$rfc3339  = $datetime->format( DATE_RFC3339 );
+		$mysql    = $datetime->format( 'Y-m-d H:i:s' );
+
+		$this->assertSame( $rfc3339, mysql2date( DATE_RFC3339, $mysql ) );
+		$this->assertSame( $rfc3339, mysql2date( DATE_RFC3339, $mysql, false ) );
+	}
+
 	/**
 	 * @ticket 28992
 	 */
 	public function test_mysql2date_should_return_wp_timestamp() {
-		$timezone = 'Europe/Kiev';
+		$timezone = 'Europe/Helsinki';
 		update_option( 'timezone_string', $timezone );
 		$datetime     = new DateTime( 'now', new DateTimeZone( $timezone ) );
 		$wp_timestamp = $datetime->getTimestamp() + $datetime->getOffset();
@@ -80,7 +96,7 @@ class Tests_Date_mysql2date extends WP_UnitTestCase {
 	 * @ticket 28992
 	 */
 	public function test_mysql2date_should_return_unix_timestamp_for_gmt_time() {
-		$timezone = 'Europe/Kiev';
+		$timezone = 'Europe/Helsinki';
 		update_option( 'timezone_string', $timezone );
 		$datetime  = new DateTime( 'now', new DateTimeZone( 'UTC' ) );
 		$timestamp = $datetime->getTimestamp();
diff --git a/tests/date/query.php b/tests/date/query.php
index 7e3cd73392..613d74957b 100644
--- a/tests/date/query.php
+++ b/tests/date/query.php
@@ -571,7 +571,7 @@ class Tests_Date_Query extends WP_UnitTestCase {
 	 * @param bool         $default_to_max Flag to default missing values to max.
 	 */
 	public function test_build_mysql_datetime_with_custom_timezone( $datetime, $expected, $default_to_max = false ) {
-		update_option( 'timezone_string', 'Europe/Kiev' );
+		update_option( 'timezone_string', 'Europe/Helsinki' );
 
 		$q = new WP_Date_Query( array() );
 
@@ -593,7 +593,7 @@ class Tests_Date_Query extends WP_UnitTestCase {
 	 * @ticket 41782
 	 */
 	public function test_build_mysql_datetime_with_relative_date() {
-		update_option( 'timezone_string', 'Europe/Kiev' );
+		update_option( 'timezone_string', 'Europe/Helsinki' );
 
 		$q = new WP_Date_Query( array() );
 
@@ -1145,4 +1145,142 @@ class Tests_Date_Query extends WP_UnitTestCase {
 		// MySQL ignores the invalid clause.
 		$this->assertSame( array( $p1, $p2 ), $q->posts );
 	}
+
+	/**
+	 * @covers WP_Date_Query::get_sql
+	 */
+	public function test_relation_in_query_and() {
+		$date_query = array(
+			'relation' => 'AND',
+			array(
+				'before'    => array(
+					'year'  => 2021,
+					'month' => 9,
+					'day'   => 20,
+				),
+				'after'     => array(
+					'year'  => 2019,
+					'month' => 2,
+					'day'   => 25,
+				),
+				'inclusive' => true,
+			),
+			array(
+				'before'    => array(
+					'year'  => 2016,
+					'month' => 9,
+					'day'   => 11,
+				),
+				'after'     => array(
+					'year'  => 2014,
+					'month' => 5,
+					'day'   => 12,
+				),
+				'inclusive' => false,
+			),
+		);
+
+		$q = new WP_Date_Query( $date_query );
+
+		$sql = $q->get_sql();
+
+		$parts = mb_split( '\)\s+AND\s+\(', $sql );
+		$this->assertIsArray( $parts, 'SQL query cannot be split into multiple parts using operator AND.' );
+		$this->assertEquals( 2, count( $parts ), 'SQL query does not contain correct number of AND operators.' );
+
+		$this->assertStringNotContainsString( 'OR', $sql, 'SQL query contains conditions joined by operator OR.' );
+	}
+
+	/**
+	 * @covers WP_Date_Query::get_sql
+	 */
+	public function test_relation_in_query_or() {
+		$date_query = array(
+			'relation' => 'OR',
+			array(
+				'before'    => array(
+					'year'  => 2021,
+					'month' => 9,
+					'day'   => 20,
+				),
+				'after'     => array(
+					'year'  => 2019,
+					'month' => 2,
+					'day'   => 25,
+				),
+				'inclusive' => true,
+			),
+			array(
+				'before'    => array(
+					'year'  => 2016,
+					'month' => 9,
+					'day'   => 11,
+				),
+				'after'     => array(
+					'year'  => 2014,
+					'month' => 5,
+					'day'   => 12,
+				),
+				'inclusive' => false,
+			),
+		);
+
+		$q = new WP_Date_Query( $date_query );
+
+		$sql = $q->get_sql();
+
+		$this->assertStringContainsString( 'OR', $sql, 'SQL query does not contain conditions joined by operator OR.' );
+
+		$parts = mb_split( '\)\s+OR\s+\(', $sql );
+		$this->assertIsArray( $parts, 'SQL query cannot be split into multiple parts using operator OR.' );
+		$this->assertEquals( 2, count( $parts ), 'SQL query does not contain correct number of OR operators.' );
+
+		// Checking number of occurrences of AND while skipping the one at the beginning.
+		$this->assertSame( 2, substr_count( substr( $sql, 5 ), 'AND' ), 'SQL query does not contain expected number conditions joined by operator AND.' );
+	}
+
+	/**
+	 * @covers WP_Date_Query::get_sql
+	 */
+	public function test_relation_in_query_unsupported() {
+		$date_query = array(
+			'relation' => 'UNSUPPORTED',
+			array(
+				'before'    => array(
+					'year'  => 2021,
+					'month' => 9,
+					'day'   => 20,
+				),
+				'after'     => array(
+					'year'  => 2019,
+					'month' => 2,
+					'day'   => 25,
+				),
+				'inclusive' => true,
+			),
+			array(
+				'before'    => array(
+					'year'  => 2016,
+					'month' => 9,
+					'day'   => 11,
+				),
+				'after'     => array(
+					'year'  => 2014,
+					'month' => 5,
+					'day'   => 12,
+				),
+				'inclusive' => false,
+			),
+		);
+
+		$q = new WP_Date_Query( $date_query );
+
+		$sql = $q->get_sql();
+
+		$parts = mb_split( '\)\s+AND\s+\(', $sql );
+		$this->assertIsArray( $parts, 'SQL query cannot be split into multiple parts using operator AND.' );
+		$this->assertEquals( 2, count( $parts ), 'SQL query does not contain correct number of AND operators.' );
+
+		$this->assertStringNotContainsString( 'OR', $sql, 'SQL query contains conditions joined by operator OR.' );
+	}
 }
diff --git a/tests/date/theDate.php b/tests/date/theDate.php
index b5fcb793df..2337ab61ec 100644
--- a/tests/date/theDate.php
+++ b/tests/date/theDate.php
@@ -80,7 +80,7 @@ class Tests_Date_TheDate extends WP_UnitTestCase {
 	}
 
 	public function count_hook( $input ) {
-		$this->hooks_called[ current_filter() ] ++;
+		$this->hooks_called[ current_filter() ]++;
 
 		return $input;
 	}
diff --git a/tests/date/wpTimezone.php b/tests/date/wpTimezone.php
index 3b60462163..3e8b6fef5f 100644
--- a/tests/date/wpTimezone.php
+++ b/tests/date/wpTimezone.php
@@ -42,13 +42,29 @@ class Tests_Date_wpTimezone extends WP_UnitTestCase {
 	 * @ticket 24730
 	 */
 	public function test_should_return_timezone_string() {
-		update_option( 'timezone_string', 'Europe/Kiev' );
+		update_option( 'timezone_string', 'Europe/Helsinki' );
 
-		$this->assertSame( 'Europe/Kiev', wp_timezone_string() );
+		$this->assertSame( 'Europe/Helsinki', wp_timezone_string() );
 
 		$timezone = wp_timezone();
 
-		$this->assertSame( 'Europe/Kiev', $timezone->getName() );
+		$this->assertSame( 'Europe/Helsinki', $timezone->getName() );
+	}
+
+	/**
+	 * Ensures that deprecated timezone strings are handled correctly.
+	 *
+	 * @ticket 56468
+	 */
+	public function test_should_return_deprecated_timezone_string() {
+		$tz_string = 'America/Buenos_Aires'; // This timezone was deprecated pre-PHP 5.6.
+		update_option( 'timezone_string', $tz_string );
+
+		$this->assertSame( $tz_string, wp_timezone_string() );
+
+		$timezone = wp_timezone();
+
+		$this->assertSame( $tz_string, $timezone->getName() );
 	}
 
 	/**
diff --git a/tests/date/xmlrpc.php b/tests/date/xmlrpc.php
index 26285aa403..63daeb41da 100644
--- a/tests/date/xmlrpc.php
+++ b/tests/date/xmlrpc.php
@@ -24,17 +24,7 @@ class Tests_Date_XMLRPC extends WP_XMLRPC_UnitTestCase {
 	 * @covers wp_xmlrpc_server::mw_newPost
 	 */
 	public function test_date_new_post() {
-		if ( PHP_VERSION_ID >= 80100 ) {
-			/*
-			 * For the time being, ignoring PHP 8.1 "null to non-nullable" deprecations coming in
-			 * via hooked in filter functions until a more structural solution to the
-			 * "missing input validation" conundrum has been architected and implemented.
-			 */
-			$this->expectDeprecation();
-			$this->expectDeprecationMessageMatches( '`Passing null to parameter \#[0-9]+ \(\$[^\)]+\) of type [^ ]+ is deprecated`' );
-		}
-
-		$timezone = 'Europe/Kiev';
+		$timezone = 'Europe/Helsinki';
 		update_option( 'timezone_string', $timezone );
 
 		$datetime    = new DateTimeImmutable( 'now', new DateTimeZone( $timezone ) );
@@ -154,7 +144,7 @@ class Tests_Date_XMLRPC extends WP_XMLRPC_UnitTestCase {
 	 * @covers wp_xmlrpc_server::mw_editPost
 	 */
 	public function test_date_edit_post() {
-		$timezone = 'Europe/Kiev';
+		$timezone = 'Europe/Helsinki';
 		update_option( 'timezone_string', $timezone );
 
 		$datetime    = new DateTimeImmutable( 'now', new DateTimeZone( $timezone ) );
@@ -223,7 +213,7 @@ class Tests_Date_XMLRPC extends WP_XMLRPC_UnitTestCase {
 	 * @covers wp_xmlrpc_server::wp_editComment
 	 */
 	public function test_date_edit_comment() {
-		$timezone = 'Europe/Kiev';
+		$timezone = 'Europe/Helsinki';
 		update_option( 'timezone_string', $timezone );
 
 		$datetime    = new DateTimeImmutable( 'now', new DateTimeZone( $timezone ) );
diff --git a/tests/db.php b/tests/db.php
index b39e31eeb8..4e4b1b8c02 100644
--- a/tests/db.php
+++ b/tests/db.php
@@ -494,11 +494,9 @@ class Tests_DB extends WP_UnitTestCase {
 		$this->assertTrue( $wpdb->has_cap( 'collation' ) );
 		$this->assertTrue( $wpdb->has_cap( 'group_concat' ) );
 		$this->assertTrue( $wpdb->has_cap( 'subqueries' ) );
-		$this->assertTrue( $wpdb->has_cap( 'identifier_placeholders' ) );
 		$this->assertTrue( $wpdb->has_cap( 'COLLATION' ) );
 		$this->assertTrue( $wpdb->has_cap( 'GROUP_CONCAT' ) );
 		$this->assertTrue( $wpdb->has_cap( 'SUBQUERIES' ) );
-		$this->assertTrue( $wpdb->has_cap( 'IDENTIFIER_PLACEHOLDERS' ) );
 		$this->assertSame(
 			version_compare( $wpdb->db_version(), '5.0.7', '>=' ),
 			$wpdb->has_cap( 'set_charset' )
@@ -1717,135 +1715,26 @@ class Tests_DB extends WP_UnitTestCase {
 				false,
 				"'{$placeholder_escape}'{$placeholder_escape}s 'hello'",
 			),
+			/*
+			 * @ticket 56933.
+			 * When preparing a '%%%s%%', test that the inserted value
+			 * is not wrapped in single quotes between the 2 hex values.
+			 */
 			array(
-				"'%-'#5s' '%'#-+-5s'",
-				array( 'hello', 'foo' ),
-				false,
-				"'hello' 'foo##'",
-			),
-			array(
-				'SELECT * FROM %i WHERE %i = %d;',
-				array( 'my_table', 'my_field', 321 ),
-				false,
-				'SELECT * FROM `my_table` WHERE `my_field` = 321;',
-			),
-			array(
-				'WHERE %i = %d;',
-				array( 'evil_`_field', 321 ),
-				false,
-				'WHERE `evil_``_field` = 321;', // To quote the identifier itself, then you need to double the character, e.g. `a``b`.
-			),
-			array(
-				'WHERE %i = %d;',
-				array( 'evil_````````_field', 321 ),
-				false,
-				'WHERE `evil_````````````````_field` = 321;',
-			),
-			array(
-				'WHERE %i = %d;',
-				array( '``evil_field``', 321 ),
-				false,
-				'WHERE `````evil_field````` = 321;',
-			),
-			array(
-				'WHERE %i = %d;',
-				array( 'evil\'field', 321 ),
-				false,
-				'WHERE `evil\'field` = 321;',
-			),
-			array(
-				'WHERE %i = %d;',
-				array( 'evil_\``_field', 321 ),
-				false,
-				'WHERE `evil_\````_field` = 321;',
-			),
-			array(
-				'WHERE %i = %d;',
-				array( 'evil_%s_field', 321 ),
-				false,
-				"WHERE `evil_{$placeholder_escape}s_field` = 321;",
-			),
-			array(
-				'WHERE %i = %d;',
-				array( 'value`', 321 ),
-				false,
-				'WHERE `value``` = 321;',
-			),
-			array(
-				'WHERE `%i = %d;',
-				array( ' AND evil_value', 321 ),
-				false,
-				'WHERE `` AND evil_value` = 321;', // Won't run (SQL parse error: "Unclosed quote").
-			),
-			array(
-				'WHERE %i` = %d;',
-				array( 'evil_value -- ', 321 ),
-				false,
-				'WHERE `evil_value -- `` = 321;', // Won't run (SQL parse error: "Unclosed quote").
-			),
-			array(
-				'WHERE `%i`` = %d;',
-				array( ' AND true -- ', 321 ),
-				false,
-				'WHERE `` AND true -- ``` = 321;', // Won't run (Unknown column '').
-			),
-			array(
-				'WHERE ``%i` = %d;',
-				array( ' AND true -- ', 321 ),
-				false,
-				'WHERE ``` AND true -- `` = 321;', // Won't run (SQL parse error: "Unclosed quote").
-			),
-			array(
-				'WHERE %2$i = %1$d;',
-				array( '1', 'two' ),
-				false,
-				'WHERE `two` = 1;',
-			),
-			array(
-				'WHERE \'%i\' = 1 AND "%i" = 2 AND `%i` = 3 AND ``%i`` = 4 AND %15i = 5',
-				array( 'my_field1', 'my_field2', 'my_field3', 'my_field4', 'my_field5' ),
+				'%%%s%%',
+				'hello',
 				false,
-				'WHERE \'`my_field1`\' = 1 AND "`my_field2`" = 2 AND ``my_field3`` = 3 AND ```my_field4``` = 4 AND `      my_field5` = 5', // Does not remove any existing quotes, always adds it's own (safer).
-			),
-			array(
-				'WHERE id = %d AND %i LIKE %2$s LIMIT 1',
-				array( 123, 'field -- ', false ),
-				true, // Incorrect usage.
-				null, // Should be rejected, otherwise the `%1$s` could use Identifier escaping, e.g. 'WHERE `field -- ` LIKE field --  LIMIT 1' (thanks @vortfu).
+				"{$placeholder_escape}hello{$placeholder_escape}",
 			),
 			array(
-				'WHERE %i LIKE %s LIMIT 1',
-				array( "field' -- ", "field' -- " ),
+				"'%-'#5s' '%'#-+-5s'",
+				array( 'hello', 'foo' ),
 				false,
-				"WHERE `field' -- ` LIKE 'field\' -- ' LIMIT 1", // In contrast to the above, Identifier vs String escaping is used.
+				"'hello' 'foo##'",
 			),
 		);
 	}
 
-	public function test_allow_unsafe_unquoted_parameters() {
-		global $wpdb;
-
-		$sql    = 'WHERE (%i = %s) OR (%10i = %10s) OR (%5$i = %6$s)';
-		$values = array( 'field_a', 'string_a', 'field_b', 'string_b', 'field_c', 'string_c' );
-
-		$default = $wpdb->allow_unsafe_unquoted_parameters;
-
-		$wpdb->allow_unsafe_unquoted_parameters = true;
-
-		// phpcs:ignore WordPress.DB.PreparedSQL.NotPrepared
-		$part = $wpdb->prepare( $sql, $values );
-		$this->assertSame( 'WHERE (`field_a` = \'string_a\') OR (`   field_b` =   string_b) OR (`field_c` = string_c)', $part ); // Unsafe, unquoted parameters.
-
-		$wpdb->allow_unsafe_unquoted_parameters = false;
-
-		// phpcs:ignore WordPress.DB.PreparedSQL.NotPrepared
-		$part = $wpdb->prepare( $sql, $values );
-		$this->assertSame( 'WHERE (`field_a` = \'string_a\') OR (`   field_b` = \'  string_b\') OR (`field_c` = \'string_c\')', $part );
-
-		$wpdb->allow_unsafe_unquoted_parameters = $default;
-
-	}
-
 	/**
 	 * @dataProvider data_escape_and_prepare
 	 */
diff --git a/tests/db/charset.php b/tests/db/charset.php
index 6fc2162526..627526bff2 100644
--- a/tests/db/charset.php
+++ b/tests/db/charset.php
@@ -47,7 +47,7 @@ class Tests_DB_Charset extends WP_UnitTestCase {
 		self::$db_server_info = self::$_wpdb->db_server_info();
 
 		// Account for MariaDB version being prefixed with '5.5.5-' on older PHP versions.
-		if ( str_contains( self::$db_server_info, 'MariaDB' ) && '5.5.5' === self::$db_version
+		if ( '5.5.5' === self::$db_version && str_contains( self::$db_server_info, 'MariaDB' )
 			&& PHP_VERSION_ID < 80016 // PHP 8.0.15 or older.
 		) {
 			// Strip the '5.5.5-' prefix and set the version to the correct value.
@@ -1189,4 +1189,20 @@ class Tests_DB_Charset extends WP_UnitTestCase {
 
 		self::$_wpdb->set_charset( self::$_wpdb->dbh );
 	}
+
+	/**
+	 * @ticket 54841
+	 */
+	public function test_mariadb_supports_utf8mb4_520() {
+		global $wpdb;
+
+		// utf8mb4_520 is available in MariaDB since version 10.2.
+		if ( ! str_contains( self::$db_server_info, 'MariaDB' )
+			|| version_compare( self::$db_version, '10.2', '<' )
+		) {
+			$this->markTestSkipped( 'This test requires MariaDB 10.2 or later.' );
+		}
+
+		$this->assertTrue( $wpdb->has_cap( 'utf8mb4_520' ) );
+	}
 }
diff --git a/tests/dbdelta.php b/tests/db/dbDelta.php
similarity index 99%
rename from tests/dbdelta.php
rename to tests/db/dbDelta.php
index c9e20d966b..03426fa721 100644
--- a/tests/dbdelta.php
+++ b/tests/db/dbDelta.php
@@ -5,8 +5,10 @@
  *
  * @group upgrade
  * @group dbdelta
+ *
+ * @covers ::dbDelta
  */
-class Tests_dbDelta extends WP_UnitTestCase {
+class Tests_DB_dbDelta extends WP_UnitTestCase {
 
 	/**
 	 * The maximum size of an index with utf8mb4 collation and charset with a standard
@@ -97,7 +99,7 @@ class Tests_dbDelta extends WP_UnitTestCase {
 
 		parent::tear_down();
 
-		// This has to be called after the parent `tearDown()` method.
+		// This has to be called after the parent `tear_down()` method.
 		$wpdb->query( "DROP TABLE IF EXISTS {$wpdb->prefix}dbdelta_test" );
 	}
 
diff --git a/tests/db/realEscape.php b/tests/db/realEscape.php
index 19d3333e85..fc9a9c87aa 100644
--- a/tests/db/realEscape.php
+++ b/tests/db/realEscape.php
@@ -3,7 +3,8 @@
 /**
  * Test WPDB _real_escape() method.
  *
- * @group  wpdb
+ * @group wpdb
+ *
  * @covers wpdb::_real_escape
  */
 class Tests_DB_RealEscape extends WP_UnitTestCase {
diff --git a/tests/dependencies.php b/tests/dependencies.php
index 0087a0c143..e5a7a33a7c 100644
--- a/tests/dependencies.php
+++ b/tests/dependencies.php
@@ -5,7 +5,7 @@
  */
 class Tests_Dependencies extends WP_UnitTestCase {
 	public function test_add() {
-		$dep = new WP_Dependencies;
+		$dep = new WP_Dependencies();
 
 		$this->assertTrue( $dep->add( 'one', '' ) );
 		$this->assertTrue( $dep->add( 'two', '' ) );
@@ -18,7 +18,7 @@ class Tests_Dependencies extends WP_UnitTestCase {
 	}
 
 	public function test_remove() {
-		$dep = new WP_Dependencies;
+		$dep = new WP_Dependencies();
 
 		$this->assertTrue( $dep->add( 'one', '' ) );
 		$this->assertTrue( $dep->add( 'two', '' ) );
@@ -31,7 +31,7 @@ class Tests_Dependencies extends WP_UnitTestCase {
 	}
 
 	public function test_enqueue() {
-		$dep = new WP_Dependencies;
+		$dep = new WP_Dependencies();
 
 		$this->assertTrue( $dep->add( 'one', '' ) );
 		$this->assertTrue( $dep->add( 'two', '' ) );
@@ -47,7 +47,7 @@ class Tests_Dependencies extends WP_UnitTestCase {
 	}
 
 	public function test_dequeue() {
-		$dep = new WP_Dependencies;
+		$dep = new WP_Dependencies();
 
 		$this->assertTrue( $dep->add( 'one', '' ) );
 		$this->assertTrue( $dep->add( 'two', '' ) );
@@ -67,7 +67,7 @@ class Tests_Dependencies extends WP_UnitTestCase {
 	}
 
 	public function test_enqueue_args() {
-		$dep = new WP_Dependencies;
+		$dep = new WP_Dependencies();
 
 		$this->assertTrue( $dep->add( 'one', '' ) );
 		$this->assertTrue( $dep->add( 'two', '' ) );
@@ -85,7 +85,7 @@ class Tests_Dependencies extends WP_UnitTestCase {
 	}
 
 	public function test_dequeue_args() {
-		$dep = new WP_Dependencies;
+		$dep = new WP_Dependencies();
 
 		$this->assertTrue( $dep->add( 'one', '' ) );
 		$this->assertTrue( $dep->add( 'two', '' ) );
@@ -112,7 +112,7 @@ class Tests_Dependencies extends WP_UnitTestCase {
 	 * @ticket 21741
 	 */
 	public function test_query_and_registered_enqueued() {
-		$dep = new WP_Dependencies;
+		$dep = new WP_Dependencies();
 
 		$this->assertTrue( $dep->add( 'one', '' ) );
 		$this->assertInstanceOf( '_WP_Dependency', $dep->query( 'one' ) );
@@ -137,8 +137,8 @@ class Tests_Dependencies extends WP_UnitTestCase {
 
 	}
 
-	function test_enqueue_before_register() {
-		$dep = new WP_Dependencies;
+	public function test_enqueue_before_register() {
+		$dep = new WP_Dependencies();
 
 		$this->assertArrayNotHasKey( 'one', $dep->registered );
 
diff --git a/tests/dependencies/jquery.php b/tests/dependencies/jquery.php
index 62243fe581..aa44b0047a 100644
--- a/tests/dependencies/jquery.php
+++ b/tests/dependencies/jquery.php
@@ -10,7 +10,7 @@ class Tests_Dependencies_jQuery extends WP_UnitTestCase {
 	 * @covers WP_Scripts::query
 	 */
 	public function test_location_of_jquery() {
-		$scripts = new WP_Scripts;
+		$scripts = new WP_Scripts();
 		wp_default_scripts( $scripts );
 
 		if ( SCRIPT_DEBUG ) {
@@ -106,7 +106,7 @@ class Tests_Dependencies_jQuery extends WP_UnitTestCase {
 	 * @covers WP_Scripts::do_items
 	 */
 	public function test_jquery_in_footer() {
-		$scripts = new WP_Scripts;
+		$scripts = new WP_Scripts();
 		$scripts->add( 'jquery', false, array( 'jquery-core', 'jquery-migrate' ) );
 		$scripts->add( 'jquery-core', '/jquery.js', array() );
 		$scripts->add( 'jquery-migrate', '/jquery-migrate.js', array() );
diff --git a/tests/dependencies/scripts.php b/tests/dependencies/scripts.php
index 9a85ee34f0..10e447728a 100644
--- a/tests/dependencies/scripts.php
+++ b/tests/dependencies/scripts.php
@@ -276,7 +276,7 @@ JS;
 	 * @covers WP_Dependencies::do_items
 	 */
 	public function test_group_mismatch_in_deps() {
-		$scripts = new WP_Scripts;
+		$scripts = new WP_Scripts();
 		$scripts->add( 'one', 'one', array(), 'v1', 1 );
 		$scripts->add( 'two', 'two', array( 'one' ) );
 		$scripts->add( 'three', 'three', array( 'two' ), 'v1', 1 );
@@ -295,7 +295,7 @@ JS;
 		$this->assertContains( 'two', $scripts->done );
 		$this->assertContains( 'three', $scripts->done );
 
-		$scripts = new WP_Scripts;
+		$scripts = new WP_Scripts();
 		$scripts->add( 'one', 'one', array(), 'v1', 1 );
 		$scripts->add( 'two', 'two', array( 'one' ), 'v1', 1 );
 		$scripts->add( 'three', 'three', array( 'one' ) );
@@ -721,26 +721,16 @@ JS;
 		$wp_scripts->base_url  = '';
 		$wp_scripts->do_concat = true;
 
-		if ( PHP_VERSION_ID >= 80100 ) {
-			/*
-			 * For the time being, ignoring PHP 8.1 "null to non-nullable" deprecations coming in
-			 * via hooked in filter functions until a more structural solution to the
-			 * "missing input validation" conundrum has been architected and implemented.
-			 */
-			$this->expectDeprecation();
-			$this->expectDeprecationMessageMatches( '`Passing null to parameter \#[0-9]+ \(\$[^\)]+\) of type [^ ]+ is deprecated`' );
-		}
-
 		$ver       = get_bloginfo( 'version' );
 		$suffix    = wp_scripts_get_suffix();
-		$expected  = "<script type='text/javascript' src='/wp-admin/load-scripts.php?c=0&amp;load%5Bchunk_0%5D=jquery-core,jquery-migrate,regenerator-runtime,wp-polyfill,wp-dom-ready,wp-hooks&amp;ver={$ver}'></script>\n";
+		$expected  = "<script type='text/javascript' src='/wp-admin/load-scripts.php?c=0&amp;load%5Bchunk_0%5D=jquery-core,jquery-migrate,wp-polyfill-inert,regenerator-runtime,wp-polyfill,wp-dom-ready,wp-hooks&amp;ver={$ver}'></script>\n";
 		$expected .= "<script type='text/javascript' id='test-example-js-before'>\nconsole.log(\"before\");\n</script>\n";
 		$expected .= "<script type='text/javascript' src='http://example.com' id='test-example-js'></script>\n";
-		$expected .= "<script type='text/javascript' src='/wp-includes/js/dist/i18n{$suffix}.js' id='wp-i18n-js'></script>\n";
+		$expected .= "<script type='text/javascript' src='/wp-includes/js/dist/i18n.min.js' id='wp-i18n-js'></script>\n";
 		$expected .= "<script type='text/javascript' id='wp-i18n-js-after'>\n";
 		$expected .= "wp.i18n.setLocaleData( { 'text direction\u0004ltr': [ 'ltr' ] } );\n";
 		$expected .= "</script>\n";
-		$expected .= "<script type='text/javascript' src='/wp-includes/js/dist/a11y{$suffix}.js' id='wp-a11y-js'></script>\n";
+		$expected .= "<script type='text/javascript' src='/wp-includes/js/dist/a11y.min.js' id='wp-a11y-js'></script>\n";
 		$expected .= "<script type='text/javascript' src='http://example2.com' id='test-example2-js'></script>\n";
 		$expected .= "<script type='text/javascript' id='test-example2-js-after'>\nconsole.log(\"after\");\n</script>\n";
 
@@ -783,16 +773,6 @@ JS;
 		$wp_scripts->base_url  = '';
 		$wp_scripts->do_concat = true;
 
-		if ( PHP_VERSION_ID >= 80100 ) {
-			/*
-			 * For the time being, ignoring PHP 8.1 "null to non-nullable" deprecations coming in
-			 * via hooked in filter functions until a more structural solution to the
-			 * "missing input validation" conundrum has been architected and implemented.
-			 */
-			$this->expectDeprecation();
-			$this->expectDeprecationMessageMatches( '`Passing null to parameter \#[0-9]+ \(\$[^\)]+\) of type [^ ]+ is deprecated`' );
-		}
-
 		$expected_tail  = "<script type='text/javascript' src='/customize-dependency.js' id='customize-dependency-js'></script>\n";
 		$expected_tail .= "<script type='text/javascript' id='customize-dependency-js-after'>\n";
 		$expected_tail .= "tryCustomizeDependency()\n";
diff --git a/tests/dependencies/styles.php b/tests/dependencies/styles.php
index 8e7721d1e9..34a9847f2f 100644
--- a/tests/dependencies/styles.php
+++ b/tests/dependencies/styles.php
@@ -63,10 +63,10 @@ class Tests_Dependencies_Styles extends WP_UnitTestCase {
 		wp_enqueue_style( 'no-deps-null-version-print-media', 'example.com', array(), null, 'print' );
 
 		$ver       = get_bloginfo( 'version' );
-		$expected  = "<link rel='stylesheet' id='no-deps-no-version-css'  href='http://example.com?ver=$ver' type='text/css' media='all' />\n";
-		$expected .= "<link rel='stylesheet' id='no-deps-version-css'  href='http://example.com?ver=1.2' type='text/css' media='all' />\n";
-		$expected .= "<link rel='stylesheet' id='no-deps-null-version-css'  href='http://example.com' type='text/css' media='all' />\n";
-		$expected .= "<link rel='stylesheet' id='no-deps-null-version-print-media-css'  href='http://example.com' type='text/css' media='print' />\n";
+		$expected  = "<link rel='stylesheet' id='no-deps-no-version-css' href='http://example.com?ver=$ver' type='text/css' media='all' />\n";
+		$expected .= "<link rel='stylesheet' id='no-deps-version-css' href='http://example.com?ver=1.2' type='text/css' media='all' />\n";
+		$expected .= "<link rel='stylesheet' id='no-deps-null-version-css' href='http://example.com' type='text/css' media='all' />\n";
+		$expected .= "<link rel='stylesheet' id='no-deps-null-version-print-media-css' href='http://example.com' type='text/css' media='print' />\n";
 
 		$this->assertSame( $expected, get_echo( 'wp_print_styles' ) );
 
@@ -86,7 +86,7 @@ class Tests_Dependencies_Styles extends WP_UnitTestCase {
 		wp_enqueue_style( 'no-deps-no-version', 'example.com' );
 
 		$ver      = get_bloginfo( 'version' );
-		$expected = "<link rel='stylesheet' id='no-deps-no-version-css'  href='http://example.com?ver=$ver' media='all' />\n";
+		$expected = "<link rel='stylesheet' id='no-deps-no-version-css' href='http://example.com?ver=$ver' media='all' />\n";
 
 		$this->assertSame( $expected, get_echo( 'wp_print_styles' ) );
 	}
@@ -107,24 +107,24 @@ class Tests_Dependencies_Styles extends WP_UnitTestCase {
 
 		// Try with an HTTP reference.
 		wp_enqueue_style( 'reset-css-http', 'http://yui.yahooapis.com/2.8.1/build/reset/reset-min.css' );
-		$expected .= "<link rel='stylesheet' id='reset-css-http-css'  href='http://yui.yahooapis.com/2.8.1/build/reset/reset-min.css?ver=$ver' type='text/css' media='all' />\n";
+		$expected .= "<link rel='stylesheet' id='reset-css-http-css' href='http://yui.yahooapis.com/2.8.1/build/reset/reset-min.css?ver=$ver' type='text/css' media='all' />\n";
 
 		// Try with an HTTPS reference.
 		wp_enqueue_style( 'reset-css-https', 'http://yui.yahooapis.com/2.8.1/build/reset/reset-min.css' );
-		$expected .= "<link rel='stylesheet' id='reset-css-https-css'  href='http://yui.yahooapis.com/2.8.1/build/reset/reset-min.css?ver=$ver' type='text/css' media='all' />\n";
+		$expected .= "<link rel='stylesheet' id='reset-css-https-css' href='http://yui.yahooapis.com/2.8.1/build/reset/reset-min.css?ver=$ver' type='text/css' media='all' />\n";
 
 		// Try with an automatic protocol reference (//).
 		wp_enqueue_style( 'reset-css-doubleslash', '//yui.yahooapis.com/2.8.1/build/reset/reset-min.css' );
-		$expected .= "<link rel='stylesheet' id='reset-css-doubleslash-css'  href='//yui.yahooapis.com/2.8.1/build/reset/reset-min.css?ver=$ver' type='text/css' media='all' />\n";
+		$expected .= "<link rel='stylesheet' id='reset-css-doubleslash-css' href='//yui.yahooapis.com/2.8.1/build/reset/reset-min.css?ver=$ver' type='text/css' media='all' />\n";
 
 		// Try with a local resource and an automatic protocol reference (//).
 		$url = '//my_plugin/style.css';
 		wp_enqueue_style( 'plugin-style', $url );
-		$expected .= "<link rel='stylesheet' id='plugin-style-css'  href='$url?ver=$ver' type='text/css' media='all' />\n";
+		$expected .= "<link rel='stylesheet' id='plugin-style-css' href='$url?ver=$ver' type='text/css' media='all' />\n";
 
 		// Try with a bad protocol.
 		wp_enqueue_style( 'reset-css-ftp', 'ftp://yui.yahooapis.com/2.8.1/build/reset/reset-min.css' );
-		$expected .= "<link rel='stylesheet' id='reset-css-ftp-css'  href='{$wp_styles->base_url}ftp://yui.yahooapis.com/2.8.1/build/reset/reset-min.css?ver=$ver' type='text/css' media='all' />\n";
+		$expected .= "<link rel='stylesheet' id='reset-css-ftp-css' href='{$wp_styles->base_url}ftp://yui.yahooapis.com/2.8.1/build/reset/reset-min.css?ver=$ver' type='text/css' media='all' />\n";
 
 		// Go!
 		$this->assertSame( $expected, get_echo( 'wp_print_styles' ) );
@@ -147,7 +147,7 @@ class Tests_Dependencies_Styles extends WP_UnitTestCase {
 		$style .= "\tbackground: red;\n";
 		$style .= '}';
 
-		$expected  = "<link rel='stylesheet' id='handle-css'  href='http://example.com?ver=1' type='text/css' media='all' />\n";
+		$expected  = "<link rel='stylesheet' id='handle-css' href='http://example.com?ver=1' type='text/css' media='all' />\n";
 		$expected .= "<style id='handle-inline-css' type='text/css'>\n";
 		$expected .= "$style\n";
 		$expected .= "</style>\n";
@@ -176,7 +176,7 @@ class Tests_Dependencies_Styles extends WP_UnitTestCase {
 		$style .= "\tbackground: red;\n";
 		$style .= '}';
 
-		$expected  = "<link rel='stylesheet' id='handle-css'  href='http://example.com?ver=1' type='text/css' media='all' />\n";
+		$expected  = "<link rel='stylesheet' id='handle-css' href='http://example.com?ver=1' type='text/css' media='all' />\n";
 		$expected .= "<style id='handle-inline-css' type='text/css'>\n";
 		$expected .= "$style\n";
 		$expected .= "</style>\n";
@@ -258,7 +258,7 @@ class Tests_Dependencies_Styles extends WP_UnitTestCase {
 		$style2 .= "\tbackground: blue;\n";
 		$style2 .= '}';
 
-		$expected  = "<link rel='stylesheet' id='handle-css'  href='http://example.com?ver=1' type='text/css' media='all' />\n";
+		$expected  = "<link rel='stylesheet' id='handle-css' href='http://example.com?ver=1' type='text/css' media='all' />\n";
 		$expected .= "<style id='handle-inline-css' type='text/css'>\n";
 		$expected .= "$style1\n";
 		$expected .= "$style2\n";
@@ -287,7 +287,7 @@ class Tests_Dependencies_Styles extends WP_UnitTestCase {
 		$style .= "}\n";
 		$style .= '</style>';
 
-		$expected  = "<link rel='stylesheet' id='handle-css'  href='http://example.com?ver=1' type='text/css' media='all' />\n";
+		$expected  = "<link rel='stylesheet' id='handle-css' href='http://example.com?ver=1' type='text/css' media='all' />\n";
 		$expected .= "$style\n";
 
 		wp_enqueue_style( 'handle', 'http://example.com', array(), 1 );
@@ -305,7 +305,7 @@ class Tests_Dependencies_Styles extends WP_UnitTestCase {
 	 */
 	public function test_unnecessary_style_tags() {
 
-		$expected = "<link rel='stylesheet' id='handle-css'  href='http://example.com?ver=1' type='text/css' media='all' />\n";
+		$expected = "<link rel='stylesheet' id='handle-css' href='http://example.com?ver=1' type='text/css' media='all' />\n";
 
 		wp_enqueue_style( 'handle', 'http://example.com', array(), 1 );
 
@@ -320,7 +320,7 @@ class Tests_Dependencies_Styles extends WP_UnitTestCase {
 	public function test_conditional_inline_styles_are_also_conditional() {
 		$expected = <<<CSS
 <!--[if IE]>
-<link rel='stylesheet' id='handle-css'  href='http://example.com?ver=1' type='text/css' media='all' />
+<link rel='stylesheet' id='handle-css' href='http://example.com?ver=1' type='text/css' media='all' />
 <style id='handle-inline-css' type='text/css'>
 a { color: blue; }
 </style>
@@ -350,8 +350,8 @@ CSS;
 	public function test_wp_add_inline_style_for_handle_without_source() {
 		$style = 'a { color: blue; }';
 
-		$expected  = "<link rel='stylesheet' id='handle-one-css'  href='http://example.com?ver=1' type='text/css' media='all' />\n";
-		$expected .= "<link rel='stylesheet' id='handle-two-css'  href='http://example.com?ver=1' type='text/css' media='all' />\n";
+		$expected  = "<link rel='stylesheet' id='handle-one-css' href='http://example.com?ver=1' type='text/css' media='all' />\n";
+		$expected .= "<link rel='stylesheet' id='handle-two-css' href='http://example.com?ver=1' type='text/css' media='all' />\n";
 		$expected .= "<style id='handle-three-inline-css' type='text/css'>\n";
 		$expected .= "$style\n";
 		$expected .= "</style>\n";
diff --git a/tests/editor/disableBlockEditorForNavigationPostType.php b/tests/editor/disableBlockEditorForNavigationPostType.php
new file mode 100644
index 0000000000..22e791dfd3
--- /dev/null
+++ b/tests/editor/disableBlockEditorForNavigationPostType.php
@@ -0,0 +1,105 @@
+<?php
+
+/**
+ * @group editor
+ *
+ * @covers ::_disable_block_editor_for_navigation_post_type
+ */
+class Tests_Editor_DisableBlockEditorForNavigationPostType extends WP_UnitTestCase {
+	const NAVIGATION_POST_TYPE = 'wp_navigation';
+
+	/**
+	 * @dataProvider data_should_return_false_when_wp_navigation
+	 * @ticket       56266
+	 *
+	 * @param bool $supports Whether the CPT supports block editor or not.
+	 */
+	public function test_should_return_false_when_wp_navigation( $supports ) {
+		$this->assertFalse( _disable_block_editor_for_navigation_post_type( $supports, static::NAVIGATION_POST_TYPE ) );
+	}
+
+	/**
+	 * Data provider.
+	 *
+	 * @return array
+	 */
+	public function data_should_return_false_when_wp_navigation() {
+		return array(
+			'support value: true'  => array( true ),
+			'support value: false' => array( false ),
+		);
+	}
+
+	/**
+	 * @dataProvider data_should_return_given_value_for_non_wp_navigation_post_types
+	 * @ticket       56266
+	 *
+	 * @param bool   $supports  Whether the CPT supports block editor or not.
+	 * @param string $post_type The post type
+	 */
+	public function test_should_return_given_value_for_non_wp_navigation_post_types( $supports, $post_type ) {
+		$this->assertSame( $supports, _disable_block_editor_for_navigation_post_type( $supports, $post_type ) );
+	}
+
+	/**
+	 * Data provider.
+	 *
+	 * @return array
+	 */
+	public function data_should_return_given_value_for_non_wp_navigation_post_types() {
+		return array(
+			'post'                => array(
+				'post_type' => 'post',
+				'supports'  => true,
+			),
+			'page'                => array(
+				'post_type' => 'page',
+				'supports'  => true,
+			),
+			'attachments'         => array(
+				'post_type' => 'attachments',
+				'supports'  => false,
+			),
+			'revision'            => array(
+				'post_type' => 'revision',
+				'supports'  => false,
+			),
+			'custom_css'          => array(
+				'post_type' => 'custom_css',
+				'supports'  => false,
+			),
+			'customize_changeset' => array(
+				'post_type' => 'customize_changeset',
+				'supports'  => false,
+			),
+			'nav_menu_item'       => array(
+				'post_type' => 'nav_menu_item',
+				'supports'  => true,
+			),
+			'oembed_cache'        => array(
+				'post_type' => 'oembed_cache',
+				'supports'  => true,
+			),
+			'user_request'        => array(
+				'post_type' => 'user_request',
+				'supports'  => true,
+			),
+			'wp_block'            => array(
+				'post_type' => 'wp_block',
+				'supports'  => true,
+			),
+			'wp_template'         => array(
+				'post_type' => 'wp_template',
+				'supports'  => true,
+			),
+			'wp_template_part'    => array(
+				'post_type' => 'wp_template_part',
+				'supports'  => true,
+			),
+			'wp_global_styles'    => array(
+				'post_type' => 'wp_global_styles',
+				'supports'  => true,
+			),
+		);
+	}
+}
diff --git a/tests/editor/disableContentEditorForNavigationPostType.php b/tests/editor/disableContentEditorForNavigationPostType.php
new file mode 100644
index 0000000000..6f4de7ddea
--- /dev/null
+++ b/tests/editor/disableContentEditorForNavigationPostType.php
@@ -0,0 +1,113 @@
+<?php
+/**
+ * @group editor
+ *
+ * @covers ::_disable_content_editor_for_navigation_post_type
+ */
+class Tests_Editor_DisableContentEditorForNavigationPostType extends WP_UnitTestCase {
+	const NAVIGATION_POST_TYPE = 'wp_navigation';
+
+	public function tear_down() {
+		add_post_type_support( static::NAVIGATION_POST_TYPE, 'editor' );
+		parent::tear_down();
+	}
+
+	/**
+	 * @ticket 56266
+	 */
+	public function test_should_disable() {
+		$post = $this->create_post( static::NAVIGATION_POST_TYPE );
+
+		$this->assertTrue( post_type_supports( static::NAVIGATION_POST_TYPE, 'editor' ) );
+
+		_disable_content_editor_for_navigation_post_type( $post );
+
+		$this->assertFalse( post_type_supports( static::NAVIGATION_POST_TYPE, 'editor' ) );
+	}
+
+	/**
+	 * @dataProvider data_should_not_disable
+	 * @ticket       56266
+	 *
+	 * @param string $post_type Post type to test.
+	 */
+	public function test_should_not_disable( $post_type ) {
+		$post = $this->create_post( $post_type );
+
+		_disable_content_editor_for_navigation_post_type( $post );
+
+		$this->assertTrue( post_type_supports( $post_type, 'editor' ) );
+	}
+
+	/**
+	 * Data provider.
+	 *
+	 * @return array
+	 */
+	public function data_should_not_disable() {
+		return array(
+			'post'             => array( 'post' ),
+			'page'             => array( 'page' ),
+			'nav_menu_item'    => array( 'nav_menu_item' ),
+			'oembed_cache'     => array( 'oembed_cache' ),
+			'user_request'     => array( 'user_request' ),
+			'wp_block'         => array( 'wp_block' ),
+			'wp_template'      => array( 'wp_template' ),
+			'wp_template_part' => array( 'wp_template_part' ),
+			'wp_global_styles' => array( 'wp_global_styles' ),
+		);
+	}
+
+	/**
+	 * @dataProvider data_should_not_change_post_type_support
+	 * @ticket       56266
+	 *
+	 * @param string $post_type Post type to test.
+	 */
+	public function test_should_not_change_post_type_support( $post_type ) {
+		$post = $this->create_post( $post_type );
+
+		// Capture the original support.
+		$before = post_type_supports( $post_type, 'editor' );
+
+		_disable_content_editor_for_navigation_post_type( $post );
+
+		// Ensure it did not change.
+		$this->assertSame( $before, post_type_supports( $post_type, 'editor' ) );
+	}
+
+	/**
+	 * Data provider.
+	 *
+	 * @return array
+	 */
+	public function data_should_not_change_post_type_support() {
+		return array(
+			'post'                => array( 'post' ),
+			'page'                => array( 'page' ),
+			'attachments'         => array( 'attachments' ),
+			'revision'            => array( 'revision' ),
+			'custom_css'          => array( 'custom_css' ),
+			'customize_changeset' => array( 'customize_changeset' ),
+			'nav_menu_item'       => array( 'nav_menu_item' ),
+			'oembed_cache'        => array( 'oembed_cache' ),
+			'user_request'        => array( 'user_request' ),
+			'wp_block'            => array( 'wp_block' ),
+			'wp_template'         => array( 'wp_template' ),
+			'wp_template_part'    => array( 'wp_template_part' ),
+			'wp_global_styles'    => array( 'wp_global_styles' ),
+		);
+	}
+
+	/**
+	 * Creates a post.
+	 *
+	 * @param string $post_type Post type to create.
+	 * @return int
+	 */
+	private function create_post( $post_type ) {
+		return $this->factory()->post->create(
+			array( 'post_type' => $post_type )
+		);
+	}
+}
diff --git a/tests/editor/enableContentEditorForNavigationPostType.php b/tests/editor/enableContentEditorForNavigationPostType.php
new file mode 100644
index 0000000000..bfa3c757ee
--- /dev/null
+++ b/tests/editor/enableContentEditorForNavigationPostType.php
@@ -0,0 +1,130 @@
+<?php
+
+/**
+ * @group editor
+ *
+ * @covers ::_enable_content_editor_for_navigation_post_type
+ */
+class Tests_Editor_EnableContentEditorForNavigationPostType extends WP_UnitTestCase {
+	const NAVIGATION_POST_TYPE = 'wp_navigation';
+
+	public function tear_down() {
+		add_post_type_support( static::NAVIGATION_POST_TYPE, 'editor' );
+		parent::tear_down();
+	}
+
+	/**
+	 * @ticket 56266
+	 */
+	public function test_should_be_enabled_by_default() {
+		$this->assertTrue( post_type_supports( static::NAVIGATION_POST_TYPE, 'editor' ) );
+	}
+
+	/**
+	 * @ticket 56266
+	 */
+	public function test_should_enable() {
+		$post = $this->create_post( static::NAVIGATION_POST_TYPE );
+
+		_enable_content_editor_for_navigation_post_type( $post );
+
+		$this->assertTrue( post_type_supports( static::NAVIGATION_POST_TYPE, 'editor' ) );
+	}
+
+	/**
+	 * @ticket 56266
+	 */
+	public function test_should_reenable_when_disabled() {
+		$post = $this->create_post( static::NAVIGATION_POST_TYPE );
+
+		// Set up the test by removing the 'editor' post type support.
+		remove_post_type_support( static::NAVIGATION_POST_TYPE, 'editor' );
+		$this->assertFalse( post_type_supports( static::NAVIGATION_POST_TYPE, 'editor' ) );
+
+		_enable_content_editor_for_navigation_post_type( $post );
+
+		$this->assertTrue( post_type_supports( static::NAVIGATION_POST_TYPE, 'editor' ) );
+	}
+
+	/**
+	 * @dataProvider data_should_not_enable
+	 * @ticket       56266
+	 *
+	 * @param string $post_type Post type to test.
+	 */
+	public function test_should_not_enable( $post_type ) {
+		$post = $this->create_post( $post_type );
+
+		_enable_content_editor_for_navigation_post_type( $post );
+
+		$this->assertFalse( post_type_supports( $post_type, 'editor' ) );
+	}
+
+	/**
+	 * Data provider.
+	 *
+	 * @return array
+	 */
+	public function data_should_not_enable() {
+		return array(
+			'invalid post type'   => array( 'book' ),
+			'attachments'         => array( 'attachments' ),
+			'revision'            => array( 'revision' ),
+			'custom_css'          => array( 'custom_css' ),
+			'customize_changeset' => array( 'customize_changeset' ),
+		);
+	}
+
+	/**
+	 * @dataProvider data_should_not_change_post_type_support
+	 * @ticket       56266
+	 *
+	 * @param string $post_type Post type to test.
+	 */
+	public function test_should_not_change_post_type_support( $post_type ) {
+		$post = $this->create_post( $post_type );
+
+		// Capture the original support.
+		$before = post_type_supports( $post_type, 'editor' );
+
+		_enable_content_editor_for_navigation_post_type( $post );
+
+		// Ensure it did not change.
+		$this->assertSame( $before, post_type_supports( $post_type, 'editor' ) );
+	}
+
+	/**
+	 * Data provider.
+	 *
+	 * @return array
+	 */
+	public function data_should_not_change_post_type_support() {
+		return array(
+			'post'                => array( 'post' ),
+			'page'                => array( 'page' ),
+			'attachments'         => array( 'attachments' ),
+			'revision'            => array( 'revision' ),
+			'custom_css'          => array( 'custom_css' ),
+			'customize_changeset' => array( 'customize_changeset' ),
+			'nav_menu_item'       => array( 'nav_menu_item' ),
+			'oembed_cache'        => array( 'oembed_cache' ),
+			'user_request'        => array( 'user_request' ),
+			'wp_block'            => array( 'wp_block' ),
+			'wp_template'         => array( 'wp_template' ),
+			'wp_template_part'    => array( 'wp_template_part' ),
+			'wp_global_styles'    => array( 'wp_global_styles' ),
+		);
+	}
+
+	/**
+	 * Creates a post.
+	 *
+	 * @param string $post_type Post type to create.
+	 * @return int
+	 */
+	private function create_post( $post_type ) {
+		return $this->factory()->post->create(
+			array( 'post_type' => $post_type )
+		);
+	}
+}
diff --git a/tests/feed/wpSimplePieFile.php b/tests/feed/wpSimplePieFile.php
index f9748e3a7b..7af366b3cc 100644
--- a/tests/feed/wpSimplePieFile.php
+++ b/tests/feed/wpSimplePieFile.php
@@ -19,8 +19,8 @@ class Tests_Feed_wpSimplePieFile extends WP_UnitTestCase {
 	public static function set_up_before_class() {
 		parent::set_up_before_class();
 
-		require_once ABSPATH . '/wp-includes/class-simplepie.php';
-		require_once ABSPATH . '/wp-includes/class-wp-simplepie-file.php';
+		require_once ABSPATH . 'wp-includes/class-simplepie.php';
+		require_once ABSPATH . 'wp-includes/class-wp-simplepie-file.php';
 	}
 
 	/**
@@ -85,7 +85,7 @@ class Tests_Feed_wpSimplePieFile extends WP_UnitTestCase {
 		);
 
 		return array(
-			'headers'  => new Requests_Utility_CaseInsensitiveDictionary( $single_value_headers ),
+			'headers'  => new WpOrg\Requests\Utility\CaseInsensitiveDictionary( $single_value_headers ),
 			'body'     => file_get_contents( DIR_TESTDATA . '/feed/wordpress-org-news.xml' ),
 			'response' => array(
 				'code'    => 200,
@@ -114,7 +114,7 @@ class Tests_Feed_wpSimplePieFile extends WP_UnitTestCase {
 			),
 		);
 
-		$response['headers'] = new Requests_Utility_CaseInsensitiveDictionary( $multiple_value_headers );
+		$response['headers'] = new WpOrg\Requests\Utility\CaseInsensitiveDictionary( $multiple_value_headers );
 
 		return $response;
 	}
diff --git a/tests/file.php b/tests/file.php
index 8e315e33aa..79da981a22 100644
--- a/tests/file.php
+++ b/tests/file.php
@@ -188,8 +188,8 @@ class Tests_File extends WP_UnitTestCase {
 	/**
 	 * @dataProvider data_wp_tempnam_filenames
 	 */
-	public function test_wp_tempnam( $case ) {
-		$file = wp_tempnam( $case );
+	public function test_wp_tempnam( $filename ) {
+		$file = wp_tempnam( $filename );
 		unlink( $file );
 
 		$this->assertNotEmpty( basename( basename( $file, '.tmp' ), '.zip' ) );
diff --git a/tests/formatting/balanceTags.php b/tests/formatting/balanceTags.php
index 27740878f7..e035275741 100644
--- a/tests/formatting/balanceTags.php
+++ b/tests/formatting/balanceTags.php
@@ -80,7 +80,7 @@ class Tests_Formatting_BalanceTags extends WP_UnitTestCase {
 	/**
 	 * These are valid custom elements but we don't support them yet.
 	 *
-	 * @see https://w3c.github.io/webcomponents/spec/custom/#valid-custom-element-name
+	 * @see https://html.spec.whatwg.org/multipage/custom-elements.html#valid-custom-element-name
 	 */
 	public function unsupported_valid_tag_names() {
 		return array(
diff --git a/tests/formatting/date.php b/tests/formatting/date.php
index c08a94710c..684cf86d97 100644
--- a/tests/formatting/date.php
+++ b/tests/formatting/date.php
@@ -233,13 +233,18 @@ class Tests_Formatting_Date extends WP_UnitTestCase {
 	public function timezone_provider() {
 		return array(
 			array(
-				'timezone_string' => 'Europe/Kiev',
+				'timezone_string' => 'Europe/Helsinki',
 				'gmt_offset'      => 3,
 			),
 			array(
 				'timezone_string' => '',
 				'gmt_offset'      => 3,
 			),
+			// @ticket 56468.
+			'deprecated timezone string and no GMT offset set' => array(
+				'timezone_string' => 'America/Buenos_Aires',
+				'gmt_offset'      => 0,
+			),
 		);
 	}
 }
diff --git a/tests/formatting/escUrl.php b/tests/formatting/escUrl.php
index 9c830cb570..dd37c9ec8d 100644
--- a/tests/formatting/escUrl.php
+++ b/tests/formatting/escUrl.php
@@ -2,13 +2,13 @@
 
 /**
  * @group formatting
+ *
+ * @covers ::esc_url
  */
 class Tests_Formatting_EscUrl extends WP_UnitTestCase {
 
 	/**
 	 * @ticket 23605
-	 *
-	 * @covers ::esc_url
 	 */
 	public function test_spaces() {
 		$this->assertSame( 'http://example.com/Mr%20WordPress', esc_url( 'http://example.com/Mr WordPress' ) );
@@ -21,9 +21,6 @@ class Tests_Formatting_EscUrl extends WP_UnitTestCase {
 		$this->assertSame( 'http://example.com/?foo=one%20two%20three&#038;bar=four', esc_url( 'http://example.com/?foo=one%20two%20three&bar=four' ) );
 	}
 
-	/**
-	 * @covers ::esc_url
-	 */
 	public function test_bad_characters() {
 		$this->assertSame( 'http://example.com/watchthelinefeedgo', esc_url( 'http://example.com/watchthelinefeed%0Ago' ) );
 		$this->assertSame( 'http://example.com/watchthelinefeedgo', esc_url( 'http://example.com/watchthelinefeed%0ago' ) );
@@ -38,9 +35,6 @@ class Tests_Formatting_EscUrl extends WP_UnitTestCase {
 		$this->assertSame( 'http://example.com/', esc_url( 'http://example.com/%0%0%0ADa' ) );
 	}
 
-	/**
-	 * @covers ::esc_url
-	 */
 	public function test_relative() {
 		$this->assertSame( '/example.php', esc_url( '/example.php' ) );
 		$this->assertSame( 'example.php', esc_url( 'example.php' ) );
@@ -49,7 +43,6 @@ class Tests_Formatting_EscUrl extends WP_UnitTestCase {
 	}
 
 	/**
-	 * @covers ::esc_url
 	 * @covers ::sanitize_url
 	 */
 	public function test_all_url_parts() {
@@ -72,9 +65,6 @@ class Tests_Formatting_EscUrl extends WP_UnitTestCase {
 		$this->assertSame( 'https://user:pass@host.example.com:1234/path;p=1?query=2&#038;r%5B%5D=3#fragment', esc_url( $url ) );
 	}
 
-	/**
-	 * @covers ::esc_url
-	 */
 	public function test_bare() {
 		$this->assertSame( 'http://example.com?foo', esc_url( 'example.com?foo' ) );
 		$this->assertSame( 'http://example.com', esc_url( 'example.com' ) );
@@ -84,7 +74,6 @@ class Tests_Formatting_EscUrl extends WP_UnitTestCase {
 	}
 
 	/**
-	 * @covers ::esc_url
 	 * @covers ::sanitize_url
 	 */
 	public function test_encoding() {
@@ -101,7 +90,6 @@ class Tests_Formatting_EscUrl extends WP_UnitTestCase {
 	}
 
 	/**
-	 * @covers ::esc_url
 	 * @covers ::wp_allowed_protocols
 	 */
 	public function test_protocol() {
@@ -168,34 +156,23 @@ class Tests_Formatting_EscUrl extends WP_UnitTestCase {
 
 	/**
 	 * @ticket 23187
-	 *
-	 * @covers ::esc_url
 	 */
 	public function test_protocol_case() {
 		$this->assertSame( 'http://example.com', esc_url( 'HTTP://example.com' ) );
 		$this->assertSame( 'http://example.com', esc_url( 'Http://example.com' ) );
 	}
 
-	/**
-	 * @covers ::esc_url
-	 */
 	public function test_display_extras() {
 		$this->assertSame( 'http://example.com/&#039;quoted&#039;', esc_url( 'http://example.com/\'quoted\'' ) );
 		$this->assertSame( 'http://example.com/\'quoted\'', esc_url( 'http://example.com/\'quoted\'', null, 'notdisplay' ) );
 	}
 
-	/**
-	 * @covers ::esc_url
-	 */
 	public function test_non_ascii() {
 		$this->assertSame( 'http://example.org/баба', esc_url( 'http://example.org/баба' ) );
 		$this->assertSame( 'http://баба.org/баба', esc_url( 'http://баба.org/баба' ) );
 		$this->assertSame( 'http://müller.com/', esc_url( 'http://müller.com/' ) );
 	}
 
-	/**
-	 * @covers ::esc_url
-	 */
 	public function test_feed() {
 		$this->assertSame( '', esc_url( 'feed:javascript:alert(1)' ) );
 		$this->assertSame( '', esc_url( 'feed:javascript:feed:alert(1)' ) );
@@ -206,8 +183,6 @@ class Tests_Formatting_EscUrl extends WP_UnitTestCase {
 
 	/**
 	 * @ticket 16859
-	 *
-	 * @covers ::esc_url
 	 */
 	public function test_square_brackets() {
 		$this->assertSame( '/example.php?one%5B%5D=two', esc_url( '/example.php?one[]=two' ) );
@@ -233,8 +208,6 @@ class Tests_Formatting_EscUrl extends WP_UnitTestCase {
 
 	/**
 	 * @ticket 21974
-	 *
-	 * @covers ::esc_url
 	 */
 	public function test_protocol_relative_with_colon() {
 		$this->assertSame( '//example.com/foo?foo=abc:def', esc_url( '//example.com/foo?foo=abc:def' ) );
@@ -242,8 +215,6 @@ class Tests_Formatting_EscUrl extends WP_UnitTestCase {
 
 	/**
 	 * @ticket 31632
-	 *
-	 * @covers ::esc_url
 	 */
 	public function test_mailto_with_newline() {
 		$body       = <<<EOT
@@ -259,8 +230,6 @@ EOT;
 
 	/**
 	 * @ticket 31632
-	 *
-	 * @covers ::esc_url
 	 */
 	public function test_mailto_in_http_url_with_newline() {
 		$body       = <<<EOT
@@ -276,8 +245,6 @@ EOT;
 
 	/**
 	 * @ticket 23605
-	 *
-	 * @covers ::esc_url
 	 */
 	public function test_mailto_with_spaces() {
 		$body = 'Hi there, I thought you might want to sign up for this newsletter';
@@ -298,8 +265,6 @@ EOT;
 
 	/**
 	 * @ticket 34202
-	 *
-	 * @covers ::esc_url
 	 */
 	public function test_ipv6_hosts() {
 		$this->assertSame( '//[::127.0.0.1]', esc_url( '//[::127.0.0.1]' ) );
diff --git a/tests/formatting/excerptRemoveBlocks.php b/tests/formatting/excerptRemoveBlocks.php
index 20d08ee8bf..1f07596903 100644
--- a/tests/formatting/excerptRemoveBlocks.php
+++ b/tests/formatting/excerptRemoveBlocks.php
@@ -3,6 +3,8 @@
 /**
  * @group formatting
  * @ticket 46133
+ *
+ * @covers ::excerpt_remove_blocks
  */
 class Tests_Formatting_ExcerptRemoveBlocks extends WP_UnitTestCase {
 
@@ -90,8 +92,6 @@ class Tests_Formatting_ExcerptRemoveBlocks extends WP_UnitTestCase {
 	 * Tests excerpt_remove_blocks().
 	 *
 	 * @ticket 46133
-	 *
-	 * @covers ::excerpt_remove_blocks
 	 */
 	public function test_excerpt_remove_blocks() {
 		// Simple dynamic block..
diff --git a/tests/formatting/getBloginfo.php b/tests/formatting/getBloginfo.php
index 2b08f9edc2..0b6ab77358 100644
--- a/tests/formatting/getBloginfo.php
+++ b/tests/formatting/getBloginfo.php
@@ -37,6 +37,7 @@ class Tests_Formatting_GetBloginfo extends WP_UnitTestCase {
 
 	/**
 	 * @ticket 27942
+	 *
 	 * @covers ::sanitize_option
 	 */
 	public function test_bloginfo_sanitize_option() {
diff --git a/tests/formatting/mapDeep.php b/tests/formatting/mapDeep.php
index c309805c27..0b60ae99bf 100644
--- a/tests/formatting/mapDeep.php
+++ b/tests/formatting/mapDeep.php
@@ -49,7 +49,7 @@ class Tests_Formatting_MapDeep extends WP_UnitTestCase {
 	}
 
 	public function test_map_deep_should_map_each_object_element_of_an_array() {
-		$this->assertEquals(
+		$this->assertEqualSets(
 			array(
 				'var0' => 'ababa',
 				'var1' => (object) array(
diff --git a/tests/formatting/sanitizeKey.php b/tests/formatting/sanitizeKey.php
index 0fb5d905df..e39dd328db 100644
--- a/tests/formatting/sanitizeKey.php
+++ b/tests/formatting/sanitizeKey.php
@@ -2,6 +2,7 @@
 
 /**
  * @group formatting
+ *
  * @covers ::sanitize_key
  */
 class Tests_Formatting_SanitizeKey extends WP_UnitTestCase {
diff --git a/tests/formatting/sanitizePost.php b/tests/formatting/sanitizePost.php
index 642265ba95..60ef8927aa 100644
--- a/tests/formatting/sanitizePost.php
+++ b/tests/formatting/sanitizePost.php
@@ -3,6 +3,7 @@
  * @group formatting
  * @group post
  *
+ * @covers ::sanitize_post
  * @covers WP_Post::__construct
  */
 class Tests_Formatting_SanitizePost extends WP_UnitTestCase {
diff --git a/tests/formatting/sanitizeTextField.php b/tests/formatting/sanitizeTextField.php
index 15e903ac95..ffee225354 100644
--- a/tests/formatting/sanitizeTextField.php
+++ b/tests/formatting/sanitizeTextField.php
@@ -105,7 +105,7 @@ class Tests_Formatting_SanitizeTextField extends WP_UnitTestCase {
 				'',
 			),
 			array(
-				new WP_Query,
+				new WP_Query(),
 				'',
 			),
 			array(
@@ -131,7 +131,7 @@ class Tests_Formatting_SanitizeTextField extends WP_UnitTestCase {
 	 * @ticket 32257
 	 * @dataProvider data_sanitize_text_field
 	 */
-	public function test_sanitize_text_field( $string, $expected ) {
+	public function test_sanitize_text_field( $str, $expected ) {
 		if ( is_array( $expected ) ) {
 			$expected_oneline   = $expected['oneline'];
 			$expected_multiline = $expected['multiline'];
@@ -139,8 +139,8 @@ class Tests_Formatting_SanitizeTextField extends WP_UnitTestCase {
 			$expected_oneline   = $expected;
 			$expected_multiline = $expected;
 		}
-		$this->assertSame( $expected_oneline, sanitize_text_field( $string ) );
-		$this->assertSameIgnoreEOL( $expected_multiline, sanitize_textarea_field( $string ) );
+		$this->assertSame( $expected_oneline, sanitize_text_field( $str ) );
+		$this->assertSameIgnoreEOL( $expected_multiline, sanitize_textarea_field( $str ) );
 
 	}
 }
diff --git a/tests/formatting/sanitizeTitleWithDashes.php b/tests/formatting/sanitizeTitleWithDashes.php
index 0fc199013a..5c7a81cb29 100644
--- a/tests/formatting/sanitizeTitleWithDashes.php
+++ b/tests/formatting/sanitizeTitleWithDashes.php
@@ -151,6 +151,7 @@ class Tests_Formatting_SanitizeTitleWithDashes extends WP_UnitTestCase {
 
 	/**
 	 * @ticket 47912
+	 * @ticket 55117
 	 * @dataProvider data_removes_non_visible_characters_without_width
 	 *
 	 * @param string $title     The title to be sanitized.
@@ -179,6 +180,7 @@ class Tests_Formatting_SanitizeTitleWithDashes extends WP_UnitTestCase {
 			'only %e2%80%ad'     => array( '%e2%80%ad' ),
 			'only %e2%80%ae'     => array( '%e2%80%ae' ),
 			'only %ef%bb%bf'     => array( '%ef%bb%bf' ),
+			'only %ef%bf%bc'     => array( '%ef%bf%bc' ),
 
 			// Non-visible characters within the title.
 			'in middle of title' => array(
@@ -202,6 +204,7 @@ class Tests_Formatting_SanitizeTitleWithDashes extends WP_UnitTestCase {
 
 	/**
 	 * @ticket 47912
+	 * @ticket 55117
 	 * @dataProvider data_non_visible_characters_without_width_when_not_save
 	 *
 	 * @param string $title     The title to be sanitized.
@@ -230,6 +233,7 @@ class Tests_Formatting_SanitizeTitleWithDashes extends WP_UnitTestCase {
 			'only %e2%80%ad'     => array( '%e2%80%ad', '%e2%80%ad' ),
 			'only %e2%80%ae'     => array( '%e2%80%ae', '%e2%80%ae' ),
 			'only %ef%bb%bf'     => array( '%ef%bb%bf', '%ef%bb%bf' ),
+			'only %ef%bf%bc'     => array( '%ef%bf%bc', '%ef%bf%bc' ),
 
 			// Non-visible characters within the title.
 			'in middle of title' => array(
diff --git a/tests/formatting/sanitizeTrackbackUrls.php b/tests/formatting/sanitizeTrackbackUrls.php
index 9e9c096a76..f5a5404e93 100644
--- a/tests/formatting/sanitizeTrackbackUrls.php
+++ b/tests/formatting/sanitizeTrackbackUrls.php
@@ -8,13 +8,16 @@
 class Tests_Formatting_SanitizeTrackbackUrls extends WP_UnitTestCase {
 	/**
 	 * @ticket 21624
-	 * @dataProvider breaks
+	 * @dataProvider separators
 	 */
-	public function test_sanitize_trackback_urls_with_multiple_urls( $break ) {
-		$this->assertSame( "http://example.com\nhttp://example.org", sanitize_trackback_urls( "http://example.com{$break}http://example.org" ) );
+	public function test_sanitize_trackback_urls_with_multiple_urls( $separator ) {
+		$this->assertSame(
+			"http://example.com\nhttp://example.org",
+			sanitize_trackback_urls( "http://example.com{$separator}http://example.org" )
+		);
 	}
 
-	public function breaks() {
+	public function separators() {
 		return array(
 			array( "\r\n\t " ),
 			array( "\r" ),
diff --git a/tests/formatting/stripslashesDeep.php b/tests/formatting/stripslashesDeep.php
index 76f9e8b019..ea2c913954 100644
--- a/tests/formatting/stripslashesDeep.php
+++ b/tests/formatting/stripslashesDeep.php
@@ -26,7 +26,7 @@ class Tests_Formatting_StripslashesDeep extends WP_UnitTestCase {
 		$this->assertSame( $arr, stripslashes_deep( $arr ) ); // Keyed array.
 		$this->assertSame( array_values( $arr ), stripslashes_deep( array_values( $arr ) ) ); // Non-keyed.
 
-		$obj = new stdClass;
+		$obj = new stdClass();
 		foreach ( $arr as $k => $v ) {
 			$obj->$k = $v;
 		}
@@ -41,9 +41,9 @@ class Tests_Formatting_StripslashesDeep extends WP_UnitTestCase {
 		$this->assertSame( array( 'a' => $new ), stripslashes_deep( array( 'a' => $old ) ) ); // Keyed array.
 		$this->assertSame( array( $new ), stripslashes_deep( array( $old ) ) ); // Non-keyed.
 
-		$obj_old    = new stdClass;
+		$obj_old    = new stdClass();
 		$obj_old->a = $old;
-		$obj_new    = new stdClass;
+		$obj_new    = new stdClass();
 		$obj_new->a = $new;
 		$this->assertEquals( $obj_new, stripslashes_deep( $obj_old ) );
 	}
diff --git a/tests/formatting/wpBasename.php b/tests/formatting/wpBasename.php
index 57a00d872f..613c23b617 100644
--- a/tests/formatting/wpBasename.php
+++ b/tests/formatting/wpBasename.php
@@ -2,7 +2,7 @@
 
 /**
  * @group formatting
-
+ *
  * @covers ::wp_basename
  */
 class Tests_Formatting_wpBasename extends WP_UnitTestCase {
diff --git a/tests/formatting/wpHtmlSplit.php b/tests/formatting/wpHtmlSplit.php
index a174c43d00..750ad3821c 100644
--- a/tests/formatting/wpHtmlSplit.php
+++ b/tests/formatting/wpHtmlSplit.php
@@ -2,6 +2,8 @@
 
 /**
  * @group formatting
+ *
+ * @covers ::wp_html_split
  */
 class Tests_Formatting_wpHtmlSplit extends WP_UnitTestCase {
 
@@ -9,8 +11,6 @@ class Tests_Formatting_wpHtmlSplit extends WP_UnitTestCase {
 	 * Basic functionality goes here.
 	 *
 	 * @dataProvider data_basic_features
-	 *
-	 * @covers ::wp_html_split
 	 */
 	public function test_basic_features( $input, $output ) {
 		return $this->assertSame( $output, wp_html_split( $input ) );
diff --git a/tests/formatting/wpParseStr.php b/tests/formatting/wpParseStr.php
index b8c3d063d2..7a44d5fe96 100644
--- a/tests/formatting/wpParseStr.php
+++ b/tests/formatting/wpParseStr.php
@@ -2,6 +2,7 @@
 
 /**
  * @group formatting
+ *
  * @covers ::wp_parse_str
  */
 class Tests_Formatting_wpParseStr extends WP_UnitTestCase {
diff --git a/tests/formatting/wpSlash.php b/tests/formatting/wpSlash.php
index 39a7c32a01..a1ac591c7a 100644
--- a/tests/formatting/wpSlash.php
+++ b/tests/formatting/wpSlash.php
@@ -84,7 +84,7 @@ class Tests_Formatting_wpSlash extends WP_UnitTestCase {
 		$this->assertSame( $arr, wp_slash( $arr ) ); // Keyed array.
 		$this->assertSame( array_values( $arr ), wp_slash( array_values( $arr ) ) ); // Non-keyed.
 
-		$obj = new stdClass;
+		$obj = new stdClass();
 		foreach ( $arr as $k => $v ) {
 			$obj->$k = $v;
 		}
diff --git a/tests/formatting/wpTexturize.php b/tests/formatting/wpTexturize.php
index 0650c78181..ee7ce5f779 100644
--- a/tests/formatting/wpTexturize.php
+++ b/tests/formatting/wpTexturize.php
@@ -2,20 +2,16 @@
 
 /**
  * @group formatting
+ *
+ * @covers ::wptexturize
  */
 class Tests_Formatting_wpTexturize extends WP_UnitTestCase {
 
-	/**
-	 * @covers ::wptexturize
-	 */
 	public function test_dashes() {
 		$this->assertSame( 'Hey &#8212; boo?', wptexturize( 'Hey -- boo?' ) );
 		$this->assertSame( '<a href="http://xx--xx">Hey &#8212; boo?</a>', wptexturize( '<a href="http://xx--xx">Hey -- boo?</a>' ) );
 	}
 
-	/**
-	 * @covers ::wptexturize
-	 */
 	public function test_disable() {
 		$this->assertSame( '<pre>---&</pre>', wptexturize( '<pre>---&</pre>' ) );
 		$this->assertSame( '<pre><code></code>--&</pre>', wptexturize( '<pre><code></code>--&</pre>' ) );
@@ -41,8 +37,6 @@ class Tests_Formatting_wpTexturize extends WP_UnitTestCase {
 
 	/**
 	 * @ticket 1418
-	 *
-	 * @covers ::wptexturize
 	 */
 	public function test_bracketed_quotes_1418() {
 		$this->assertSame( '(&#8220;test&#8221;)', wptexturize( '("test")' ) );
@@ -52,8 +46,6 @@ class Tests_Formatting_wpTexturize extends WP_UnitTestCase {
 
 	/**
 	 * @ticket 3810
-	 *
-	 * @covers ::wptexturize
 	 */
 	public function test_bracketed_quotes_3810() {
 		$this->assertSame( 'A dog (&#8220;Hubertus&#8221;) was sent out.', wptexturize( 'A dog ("Hubertus") was sent out.' ) );
@@ -61,8 +53,6 @@ class Tests_Formatting_wpTexturize extends WP_UnitTestCase {
 
 	/**
 	 * @ticket 4539
-	 *
-	 * @covers ::wptexturize
 	 */
 	public function test_basic_quotes() {
 		$this->assertSame( 'test&#8217;s', wptexturize( 'test\'s' ) );
@@ -86,8 +76,6 @@ class Tests_Formatting_wpTexturize extends WP_UnitTestCase {
 	/**
 	 * @ticket 4539
 	 * @ticket 15241
-	 *
-	 * @covers ::wptexturize
 	 */
 	public function test_full_sentences_with_unmatched_single_quotes() {
 		$this->assertSame(
@@ -98,8 +86,6 @@ class Tests_Formatting_wpTexturize extends WP_UnitTestCase {
 
 	/**
 	 * @ticket 4539
-	 *
-	 * @covers ::wptexturize
 	 */
 	public function test_quotes() {
 		$this->assertSame( '&#8220;Quoted String&#8221;', wptexturize( '"Quoted String"' ) );
@@ -119,8 +105,6 @@ class Tests_Formatting_wpTexturize extends WP_UnitTestCase {
 
 	/**
 	 * @ticket 4539
-	 *
-	 * @covers ::wptexturize
 	 */
 	public function test_quotes_before_s() {
 		$this->assertSame( 'test&#8217;s', wptexturize( "test's" ) );
@@ -132,8 +116,6 @@ class Tests_Formatting_wpTexturize extends WP_UnitTestCase {
 
 	/**
 	 * @ticket 4539
-	 *
-	 * @covers ::wptexturize
 	 */
 	public function test_quotes_before_numbers() {
 		$this->assertSame( 'Class of &#8217;99', wptexturize( "Class of '99" ) );
@@ -162,9 +144,6 @@ class Tests_Formatting_wpTexturize extends WP_UnitTestCase {
 		$this->assertSame( '}&#8221;Class of &#8217;99&#8243;{', wptexturize( "}\"Class of '99\"{" ) );
 	}
 
-	/**
-	 * @covers ::wptexturize
-	 */
 	public function test_quotes_after_numbers() {
 		$this->assertSame( 'Class of &#8217;99', wptexturize( "Class of '99" ) );
 	}
@@ -172,8 +151,6 @@ class Tests_Formatting_wpTexturize extends WP_UnitTestCase {
 	/**
 	 * @ticket 4539
 	 * @ticket 15241
-	 *
-	 * @covers ::wptexturize
 	 */
 	public function test_other_html() {
 		$this->assertSame( '&#8216;<strong>', wptexturize( "'<strong>" ) );
@@ -181,16 +158,10 @@ class Tests_Formatting_wpTexturize extends WP_UnitTestCase {
 		// $this->assertSame( '&#8220;<strong>Quoted Text</strong>&#8221;,', wptexturize( '"<strong>Quoted Text</strong>",' ) );
 	}
 
-	/**
-	 * @covers ::wptexturize
-	 */
 	public function test_x() {
 		$this->assertSame( '14&#215;24', wptexturize( '14x24' ) );
 	}
 
-	/**
-	 * @covers ::wptexturize
-	 */
 	public function test_minutes_seconds() {
 		$this->assertSame( '9&#8242;', wptexturize( '9\'' ) );
 		$this->assertSame( '9&#8243;', wptexturize( '9"' ) );
@@ -204,8 +175,6 @@ class Tests_Formatting_wpTexturize extends WP_UnitTestCase {
 
 	/**
 	 * @ticket 8775
-	 *
-	 * @covers ::wptexturize
 	 */
 	public function test_wptexturize_quotes_around_numbers() {
 		$this->assertSame( '&#8220;12345&#8221;', wptexturize( '"12345"' ) );
@@ -216,8 +185,6 @@ class Tests_Formatting_wpTexturize extends WP_UnitTestCase {
 
 	/**
 	 * @ticket 8912
-	 *
-	 * @covers ::wptexturize
 	 */
 	public function test_wptexturize_html_comments() {
 		$this->assertSame( '<!--[if !IE]>--><!--<![endif]-->', wptexturize( '<!--[if !IE]>--><!--<![endif]-->' ) );
@@ -228,8 +195,6 @@ class Tests_Formatting_wpTexturize extends WP_UnitTestCase {
 	/**
 	 * @ticket 4539
 	 * @ticket 15241
-	 *
-	 * @covers ::wptexturize
 	 */
 	public function test_entity_quote_cuddling() {
 		$this->assertSame( '&nbsp;&#8220;Testing&#8221;', wptexturize( '&nbsp;"Testing"' ) );
@@ -238,8 +203,6 @@ class Tests_Formatting_wpTexturize extends WP_UnitTestCase {
 
 	/**
 	 * @ticket 22823
-	 *
-	 * @covers ::wptexturize
 	 */
 	public function test_apostrophes_before_primes() {
 		$this->assertSame( 'WordPress 3.5&#8217;s release date', wptexturize( "WordPress 3.5's release date" ) );
@@ -247,8 +210,6 @@ class Tests_Formatting_wpTexturize extends WP_UnitTestCase {
 
 	/**
 	 * @ticket 23185
-	 *
-	 * @covers ::wptexturize
 	 */
 	public function test_spaces_around_hyphens() {
 		$nbsp = "\xC2\xA0";
@@ -272,8 +233,6 @@ class Tests_Formatting_wpTexturize extends WP_UnitTestCase {
 
 	/**
 	 * @ticket 31030
-	 *
-	 * @covers ::wptexturize
 	 */
 	public function test_hyphens_at_start_and_end() {
 		$this->assertSame( '&#8211; ', wptexturize( '- ' ) );
@@ -291,8 +250,6 @@ class Tests_Formatting_wpTexturize extends WP_UnitTestCase {
 	 * These should never happen, even if the desired output changes some day.
 	 *
 	 * @ticket 22692
-	 *
-	 * @covers ::wptexturize
 	 */
 	public function test_spaces_around_quotes_never() {
 		$nbsp = "\xC2\xA0";
@@ -310,8 +267,6 @@ class Tests_Formatting_wpTexturize extends WP_UnitTestCase {
 	 *
 	 * @ticket 22692
 	 * @dataProvider data_spaces_around_quotes
-	 *
-	 * @covers ::wptexturize
 	 */
 	public function test_spaces_around_quotes( $input, $output ) {
 		$this->assertSame( $output, wptexturize( $input ) );
@@ -368,8 +323,6 @@ class Tests_Formatting_wpTexturize extends WP_UnitTestCase {
 	 *
 	 * @ticket 22692
 	 * @dataProvider data_apos_before_digits
-	 *
-	 * @covers ::wptexturize
 	 */
 	public function test_apos_before_digits( $input, $output ) {
 		$this->assertSame( $output, wptexturize( $input ) );
@@ -411,8 +364,6 @@ class Tests_Formatting_wpTexturize extends WP_UnitTestCase {
 	 *
 	 * @ticket 22692
 	 * @dataProvider data_opening_single_quote
-	 *
-	 * @covers ::wptexturize
 	 */
 	public function test_opening_single_quote( $input, $output ) {
 		$this->assertSame( $output, wptexturize( $input ) );
@@ -542,8 +493,6 @@ class Tests_Formatting_wpTexturize extends WP_UnitTestCase {
 	 *
 	 * @ticket 22692
 	 * @dataProvider data_double_prime
-	 *
-	 * @covers ::wptexturize
 	 */
 	public function test_double_prime( $input, $output ) {
 		$this->assertSame( $output, wptexturize( $input ) );
@@ -577,8 +526,6 @@ class Tests_Formatting_wpTexturize extends WP_UnitTestCase {
 	 *
 	 * @ticket 22692
 	 * @dataProvider data_single_prime
-	 *
-	 * @covers ::wptexturize
 	 */
 	public function test_single_prime( $input, $output ) {
 		$this->assertSame( $output, wptexturize( $input ) );
@@ -612,8 +559,6 @@ class Tests_Formatting_wpTexturize extends WP_UnitTestCase {
 	 *
 	 * @ticket 22692
 	 * @dataProvider data_contractions
-	 *
-	 * @covers ::wptexturize
 	 */
 	public function test_contractions( $input, $output ) {
 		$this->assertSame( $output, wptexturize( $input ) );
@@ -655,8 +600,6 @@ class Tests_Formatting_wpTexturize extends WP_UnitTestCase {
 	 *
 	 * @ticket 22692
 	 * @dataProvider data_opening_quote
-	 *
-	 * @covers ::wptexturize
 	 */
 	public function test_opening_quote( $input, $output ) {
 		$this->assertSame( $output, wptexturize( $input ) );
@@ -734,8 +677,6 @@ class Tests_Formatting_wpTexturize extends WP_UnitTestCase {
 	 *
 	 * @ticket 22692
 	 * @dataProvider data_closing_quote
-	 *
-	 * @covers ::wptexturize
 	 */
 	public function test_closing_quote( $input, $output ) {
 		$this->assertSame( $output, wptexturize( $input ) );
@@ -825,8 +766,6 @@ class Tests_Formatting_wpTexturize extends WP_UnitTestCase {
 	 *
 	 * @ticket 22692
 	 * @dataProvider data_closing_single_quote
-	 *
-	 * @covers ::wptexturize
 	 */
 	public function test_closing_single_quote( $input, $output ) {
 		$this->assertSame( $output, wptexturize( $input ) );
@@ -917,8 +856,6 @@ class Tests_Formatting_wpTexturize extends WP_UnitTestCase {
 	 * @ticket 22692
 	 * @ticket 30445
 	 * @dataProvider data_multiplication
-	 *
-	 * @covers ::wptexturize
 	 */
 	public function test_multiplication( $input, $output ) {
 		$this->assertSame( $output, wptexturize( $input ) );
@@ -969,8 +906,6 @@ class Tests_Formatting_wpTexturize extends WP_UnitTestCase {
 	 *
 	 * @ticket 22692
 	 * @dataProvider data_ampersand
-	 *
-	 * @covers ::wptexturize
 	 */
 	public function test_ampersand( $input, $output ) {
 		$this->assertSame( $output, wptexturize( $input ) );
@@ -1036,8 +971,6 @@ class Tests_Formatting_wpTexturize extends WP_UnitTestCase {
 	 *
 	 * @ticket 22692
 	 * @dataProvider data_cockney
-	 *
-	 * @covers ::wptexturize
 	 */
 	public function test_cockney( $input, $output ) {
 		$this->assertSame( $output, wptexturize( $input ) );
@@ -1099,8 +1032,6 @@ class Tests_Formatting_wpTexturize extends WP_UnitTestCase {
 	 *
 	 * @ticket 22692
 	 * @dataProvider data_smart_dashes
-	 *
-	 * @covers ::wptexturize
 	 */
 	public function test_smart_dashes( $input, $output ) {
 		$this->assertSame( $output, wptexturize( $input ) );
@@ -1154,8 +1085,6 @@ class Tests_Formatting_wpTexturize extends WP_UnitTestCase {
 	 *
 	 * @ticket 22692
 	 * @dataProvider data_misc_static_replacements
-	 *
-	 * @covers ::wptexturize
 	 */
 	public function test_misc_static_replacements( $input, $output ) {
 		$this->assertSame( $output, wptexturize( $input ) );
@@ -1211,8 +1140,6 @@ class Tests_Formatting_wpTexturize extends WP_UnitTestCase {
 	 *
 	 * @ticket 8775
 	 * @dataProvider data_quoted_numbers
-	 *
-	 * @covers ::wptexturize
 	 */
 	public function test_quoted_numbers( $input, $output ) {
 		$this->assertSame( $output, wptexturize( $input ) );
@@ -1264,8 +1191,6 @@ class Tests_Formatting_wpTexturize extends WP_UnitTestCase {
 	 *
 	 * @ticket 20342
 	 * @dataProvider data_quotes_and_dashes
-	 *
-	 * @covers ::wptexturize
 	 */
 	public function test_quotes_and_dashes( $input, $output ) {
 		$this->assertSame( $output, wptexturize( $input ) );
@@ -1329,8 +1254,6 @@ class Tests_Formatting_wpTexturize extends WP_UnitTestCase {
 	 *
 	 * @ticket 12690
 	 * @dataProvider data_tag_avoidance
-	 *
-	 * @covers ::wptexturize
 	 */
 	public function test_tag_avoidance( $input, $output ) {
 		$this->assertSame( $output, wptexturize( $input ) );
@@ -1554,8 +1477,6 @@ class Tests_Formatting_wpTexturize extends WP_UnitTestCase {
 	 *
 	 * @ticket 26850
 	 * @dataProvider data_year_abbr
-	 *
-	 * @covers ::wptexturize
 	 */
 	public function test_year_abbr( $input, $output ) {
 		$this->assertSame( $output, wptexturize( $input ) );
@@ -1645,8 +1566,6 @@ class Tests_Formatting_wpTexturize extends WP_UnitTestCase {
 	 *
 	 * @ticket 27426
 	 * @dataProvider data_translate
-	 *
-	 * @covers ::wptexturize
 	 */
 	public function test_translate( $input, $output ) {
 		add_filter( 'gettext_with_context', array( $this, 'filter_translate' ), 10, 4 );
@@ -1874,8 +1793,6 @@ class Tests_Formatting_wpTexturize extends WP_UnitTestCase {
 	 *
 	 * @ticket 28483
 	 * @dataProvider data_element_stack
-	 *
-	 * @covers ::wptexturize
 	 */
 	public function test_element_stack( $input, $output ) {
 		$this->assertSame( $output, wptexturize( $input ) );
@@ -1927,8 +1844,6 @@ class Tests_Formatting_wpTexturize extends WP_UnitTestCase {
 	 *
 	 * @ticket 29557
 	 * @dataProvider data_unregistered_shortcodes
-	 *
-	 * @covers ::wptexturize
 	 */
 	public function test_unregistered_shortcodes( $input, $output ) {
 		add_filter( 'no_texturize_shortcodes', array( $this, 'filter_shortcodes' ), 10, 1 );
@@ -2014,8 +1929,6 @@ class Tests_Formatting_wpTexturize extends WP_UnitTestCase {
 	 *
 	 * @ticket 29256
 	 * @dataProvider data_primes_vs_quotes
-	 *
-	 * @covers ::wptexturize
 	 */
 	public function test_primes_vs_quotes( $input, $output ) {
 		$this->assertSame( $output, wptexturize( $input ) );
@@ -2078,8 +1991,6 @@ String with a number followed by a single quote &#8216;Expendables 3&#8217; vest
 	 *
 	 * @ticket 29256
 	 * @dataProvider data_primes_quotes_translation
-	 *
-	 * @covers ::wptexturize
 	 */
 	public function test_primes_quotes_translation( $input, $output ) {
 		add_filter( 'gettext_with_context', array( $this, 'filter_translate2' ), 10, 4 );
@@ -2196,8 +2107,6 @@ String with a number followed by a single quote !q1!Expendables 3!q1! vestibulum
 	 * Ensure that a trailing less-than symbol doesn't cause a PHP warning.
 	 *
 	 * @ticket 35864
-	 *
-	 * @covers ::wptexturize
 	 */
 	public function test_trailing_less_than() {
 		$this->assertSame( 'F&#8211;oo<', wptexturize( 'F--oo<', true ) );
diff --git a/tests/functions.php b/tests/functions.php
index a7679be7f0..71cd6b67d1 100644
--- a/tests/functions.php
+++ b/tests/functions.php
@@ -5,7 +5,7 @@
  */
 class Tests_Functions extends WP_UnitTestCase {
 	public function test_wp_parse_args_object() {
-		$x        = new MockClass;
+		$x        = new MockClass();
 		$x->_baba = 5;
 		$x->yZ    = 'baba'; // phpcs:ignore WordPress.NamingConventions.ValidVariableName.UsedPropertyNotSnakeCase
 		$x->a     = array( 5, 111, 'x' );
@@ -17,7 +17,7 @@ class Tests_Functions extends WP_UnitTestCase {
 			),
 			wp_parse_args( $x )
 		);
-		$y = new MockClass;
+		$y = new MockClass();
 		$this->assertSame( array(), wp_parse_args( $y ) );
 	}
 
@@ -41,7 +41,7 @@ class Tests_Functions extends WP_UnitTestCase {
 	}
 
 	public function test_wp_parse_args_defaults() {
-		$x        = new MockClass;
+		$x        = new MockClass();
 		$x->_baba = 5;
 		$x->yZ    = 'baba'; // phpcs:ignore WordPress.NamingConventions.ValidVariableName.UsedPropertyNotSnakeCase
 		$x->a     = array( 5, 111, 'x' );
@@ -105,13 +105,6 @@ class Tests_Functions extends WP_UnitTestCase {
 			'C:\\',
 			'C:\\WINDOWS',
 			'\\\\sambashare\\foo',
-			'c:/',
-			'c://',
-			'//',
-			'c:/FOO',
-			'//FOO',
-			'C:/WWW/Sites/demo/htdocs/wordpress/wp-content/uploads/2016/03/example.jpg',
-			'//ComputerName/ShareName/SubfolderName/example.txt',
 		);
 		foreach ( $absolute_paths as $path ) {
 			$this->assertTrue( path_is_absolute( $path ), "path_is_absolute('$path') should return true" );
@@ -126,14 +119,10 @@ class Tests_Functions extends WP_UnitTestCase {
 			'../foo',
 			'../',
 			'../foo.bar',
-			'foo.bar',
 			'foo/bar',
 			'foo',
 			'FOO',
 			'..\\WINDOWS',
-			'..//WINDOWS',
-			'c:',
-			'C:',
 		);
 		foreach ( $relative_paths as $path ) {
 			$this->assertFalse( path_is_absolute( $path ), "path_is_absolute('$path') should return false" );
@@ -1124,7 +1113,7 @@ class Tests_Functions extends WP_UnitTestCase {
 	 * @ticket 28786
 	 */
 	public function test_wp_json_encode_object() {
-		$object    = new stdClass;
+		$object    = new stdClass();
 		$object->a = 'b';
 		$this->assertSame( wp_json_encode( $object ), '{"a":"b"}' );
 	}
@@ -1415,6 +1404,16 @@ class Tests_Functions extends WP_UnitTestCase {
 	 * @requires extension fileinfo
 	 */
 	public function test_wp_check_filetype_and_ext_with_filtered_woff() {
+		if ( PHP_VERSION_ID >= 80100 ) {
+			/*
+			 * For the time being, this test is marked skipped on PHP 8.1+ as a recent change introduced
+			 * an inconsistency with how the mime-type for WOFF files are handled compared to older versions.
+			 *
+			 * See https://core.trac.wordpress.org/ticket/56817 for more details.
+			 */
+			$this->markTestSkipped( 'This test currently fails on PHP 8.1+ and requires further investigation.' );
+		}
+
 		$file     = DIR_TESTDATA . '/uploads/dashicons.woff';
 		$filename = 'dashicons.woff';
 
@@ -2056,9 +2055,9 @@ class Tests_Functions extends WP_UnitTestCase {
 	 * @ticket 53668
 	 */
 	public function test_wp_get_default_extension_for_mime_type() {
-		$this->assertEquals( 'jpg', wp_get_default_extension_for_mime_type( 'image/jpeg' ), 'jpg not returned as default extension for "image/jpeg"' );
+		$this->assertSame( 'jpg', wp_get_default_extension_for_mime_type( 'image/jpeg' ), 'jpg not returned as default extension for "image/jpeg"' );
 		$this->assertNotEquals( 'jpeg', wp_get_default_extension_for_mime_type( 'image/jpeg' ), 'jpeg should not be returned as default extension for "image/jpeg"' );
-		$this->assertEquals( 'png', wp_get_default_extension_for_mime_type( 'image/png' ), 'png not returned as default extension for "image/png"' );
+		$this->assertSame( 'png', wp_get_default_extension_for_mime_type( 'image/png' ), 'png not returned as default extension for "image/png"' );
 		$this->assertFalse( wp_get_default_extension_for_mime_type( 'wibble/wobble' ), 'false not returned for unrecognized mime type' );
 		$this->assertFalse( wp_get_default_extension_for_mime_type( '' ), 'false not returned when empty string as mime type supplied' );
 		$this->assertFalse( wp_get_default_extension_for_mime_type( '   ' ), 'false not returned when empty string as mime type supplied' );
@@ -2066,46 +2065,11 @@ class Tests_Functions extends WP_UnitTestCase {
 		$this->assertFalse( wp_get_default_extension_for_mime_type( null ), 'false not returned when null as mime type supplied' );
 	}
 
-	/**
-	 * @ticket 49412
-	 * @covers ::wp_filesize
-	 */
-	function test_wp_filesize_with_nonexistent_file() {
-		$file = 'nonexistent/file.jpg';
-		$this->assertEquals( 0, wp_filesize( $file ) );
-	}
-
-	/**
-	 * @ticket 49412
-	 * @covers ::wp_filesize
-	 */
-	function test_wp_filesize() {
-		$file = DIR_TESTDATA . '/images/test-image-upside-down.jpg';
-
-		$this->assertEquals( filesize( $file ), wp_filesize( $file ) );
-
-		$filter = function() {
-			return 999;
-		};
-
-		add_filter( 'wp_filesize', $filter );
-
-		$this->assertEquals( 999, wp_filesize( $file ) );
-
-		$pre_filter = function() {
-			return 111;
-		};
-
-		add_filter( 'pre_wp_filesize', $pre_filter );
-
-		$this->assertEquals( 111, wp_filesize( $file ) );
-	}
-
 	/**
 	 * @ticket 55505
 	 * @covers ::wp_recursive_ksort
 	 */
-	function test_wp_recursive_ksort() {
+	public function test_wp_recursive_ksort() {
 		// Create an array to test.
 		$theme_json = array(
 			'version'  => 1,
@@ -2184,7 +2148,7 @@ class Tests_Functions extends WP_UnitTestCase {
 			),
 			'version'  => 1,
 		);
-		$this->assertEquals( $theme_json, $expected_theme_json );
+		$this->assertSameSetsWithIndex( $theme_json, $expected_theme_json );
 	}
 
 }
diff --git a/tests/functions/cleanDirsizeCache.php b/tests/functions/cleanDirsizeCache.php
index e8a247de24..c10dc8b97b 100644
--- a/tests/functions/cleanDirsizeCache.php
+++ b/tests/functions/cleanDirsizeCache.php
@@ -105,7 +105,7 @@ class Tests_Functions_CleanDirsizeCache extends WP_UnitTestCase {
 	}
 
 	/**
-	 * Tests the behaviour of the function when the transient doesn't exist.
+	 * Tests the behavior of the function when the transient doesn't exist.
 	 *
 	 * @ticket 52241
 	 * @ticket 53635
@@ -121,7 +121,7 @@ class Tests_Functions_CleanDirsizeCache extends WP_UnitTestCase {
 	}
 
 	/**
-	 * Tests the behaviour of the function when the transient does exist, but is not an array.
+	 * Tests the behavior of the function when the transient does exist, but is not an array.
 	 *
 	 * In particular, this tests that no PHP TypeErrors are being thrown.
 	 *
diff --git a/tests/functions/deprecated.php b/tests/functions/deprecated.php
deleted file mode 100644
index b1d4a9f6e7..0000000000
--- a/tests/functions/deprecated.php
+++ /dev/null
@@ -1,185 +0,0 @@
-<?php
-
-/**
- * Test cases for deprecated functions, arguments, and files
- *
- * @package WordPress
- * @subpackage Unit Tests
- *
- * @since 3.5.0
- *
- * @group functions.php
- * @group deprecated
- */
-class Tests_Functions_Deprecated extends WP_UnitTestCase {
-
-	/**
-	 * List of functions that have been passed through _deprecated_function().
-	 *
-	 * @var string[]
-	 */
-	protected $_deprecated_functions = array();
-
-	/**
-	 * List of arguments that have been passed through _deprecated_argument().
-	 *
-	 * @var string[]
-	 */
-	protected $_deprecated_arguments = array();
-
-	/**
-	 * List of files that have been passed through _deprecated_file().
-	 *
-	 * @var string[]
-	 */
-	protected $_deprecated_files = array();
-
-	/**
-	 * Sets up the test fixture.
-	 */
-	public function set_up() {
-		parent::set_up();
-		$this->_deprecated_functions = array();
-		$this->_deprecated_arguments = array();
-		$this->_deprecated_files     = array();
-		add_action( 'deprecated_function_run', array( $this, 'deprecated_function' ), 10, 3 );
-		add_action( 'deprecated_function_trigger_error', '__return_false' );
-		add_action( 'deprecated_argument_run', array( $this, 'deprecated_argument' ), 10, 3 );
-		add_action( 'deprecated_argument_trigger_error', '__return_false' );
-		add_action( 'deprecated_file_included', array( $this, 'deprecated_file' ), 10, 4 );
-		add_action( 'deprecated_file_trigger_error', '__return_false' );
-	}
-
-	/**
-	 * Tears down the test fixture.
-	 */
-	public function tear_down() {
-		remove_action( 'deprecated_function_run', array( $this, 'deprecated_function' ), 10, 3 );
-		remove_action( 'deprecated_function_trigger_error', '__return_false' );
-		remove_action( 'deprecated_argument_run', array( $this, 'deprecated_argument' ), 10, 3 );
-		remove_action( 'deprecated_argument_trigger_error', '__return_false' );
-		remove_action( 'deprecated_file_included', array( $this, 'deprecated_argument' ), 10, 4 );
-		remove_action( 'deprecated_file_trigger_error', '__return_false' );
-		parent::tear_down();
-	}
-
-	/**
-	 * Catches functions that have passed through _deprecated_function().
-	 *
-	 * @param string $function
-	 * @param string $replacement
-	 * @param float $version
-	 */
-	public function deprecated_function( $function, $replacement, $version ) {
-		$this->_deprecated_functions[] = array(
-			'function'    => $function,
-			'replacement' => $replacement,
-			'version'     => $version,
-		);
-	}
-
-	/**
-	 * Catches arguments that have passed through _deprecated_argument().
-	 *
-	 * @param string $argument
-	 * @param string $message
-	 * @param float $version
-	 */
-	public function deprecated_argument( $argument, $message, $version ) {
-		$this->_deprecated_arguments[] = array(
-			'argument' => $argument,
-			'message'  => $message,
-			'version'  => $version,
-		);
-	}
-
-	/**
-	 * Catches arguments that have passed through _deprecated_argument().
-	 *
-	 * @param string $argument
-	 * @param string $message
-	 * @param float $version
-	 */
-	public function deprecated_file( $file, $version, $replacement, $message ) {
-		$this->_deprecated_files[] = array(
-			'file'        => $file,
-			'version'     => $version,
-			'replacement' => $replacement,
-			'message'     => $message,
-		);
-	}
-
-	/**
-	 * Checks if something was deprecated.
-	 *
-	 * @param string $type argument|function|file
-	 * @param string $name
-	 * @return array|false
-	 */
-	protected function was_deprecated( $type, $name ) {
-		switch ( $type ) {
-			case 'argument':
-				$search = $this->_deprecated_arguments;
-				$key    = 'argument';
-				break;
-			case 'function':
-				$search = $this->_deprecated_functions;
-				$key    = 'function';
-				break;
-			default:
-				$search = $this->_deprecated_files;
-				$key    = 'file';
-		}
-		foreach ( $search as $v ) {
-			if ( $name === $v[ $key ] ) {
-				return $v;
-			}
-		}
-		return false;
-	}
-
-	/**
-	 * Tests that wp_save_image_file() has a deprecated argument when passed a GD resource.
-	 *
-	 * @ticket 6821
-	 * @expectedDeprecated wp_save_image_file
-	 * @requires function imagejpeg
-	 *
-	 * @covers ::wp_save_image_file
-	 */
-	public function test_wp_save_image_file_deprecated_with_gd_resource() {
-		// Call wp_save_image_file().
-		require_once ABSPATH . 'wp-admin/includes/image-edit.php';
-		$file = wp_tempnam();
-		$img  = imagecreatefromjpeg( DIR_TESTDATA . '/images/canola.jpg' );
-		wp_save_image_file( $file, $img, 'image/jpeg', 1 );
-		imagedestroy( $img );
-		unlink( $file );
-
-		// Check if the arg was deprecated.
-		$check = $this->was_deprecated( 'argument', 'wp_save_image_file' );
-		$this->assertNotEmpty( $check );
-	}
-
-	/**
-	 * Tests that wp_save_image_file() doesn't have a deprecated argument when passed a WP_Image_Editor.
-	 *
-	 * @ticket 6821
-	 * @requires function imagejpeg
-	 *
-	 * @covers ::wp_save_image_file
-	 */
-	public function test_wp_save_image_file_not_deprecated_with_wp_image_editor() {
-		// Call wp_save_image_file().
-		require_once ABSPATH . 'wp-admin/includes/image-edit.php';
-		$file = wp_tempnam();
-		$img  = wp_get_image_editor( DIR_TESTDATA . '/images/canola.jpg' );
-		wp_save_image_file( $file, $img, 'image/jpeg', 1 );
-		unset( $img );
-		unlink( $file );
-
-		// Check if the arg was deprecated.
-		$check = $this->was_deprecated( 'argument', 'wp_save_image_file' );
-		$this->assertFalse( $check );
-	}
-}
diff --git a/tests/functions/doEnclose.php b/tests/functions/doEnclose.php
index 6c06f35182..5fe48b3554 100644
--- a/tests/functions/doEnclose.php
+++ b/tests/functions/doEnclose.php
@@ -254,12 +254,12 @@ class Tests_Functions_DoEnclose extends WP_UnitTestCase {
 	 *
 	 * @since 5.3.0
 	 *
-	 * @param bool   $false     False.
-	 * @param array  $arguments Request arguments.
-	 * @param string $url       Request URL.
-	 * @return array            Header.
+	 * @param false|array|WP_Error $response    A preemptive return value of an HTTP request. Default false.
+	 * @param array                $parsed_args HTTP request arguments.
+	 * @param string               $url         The request URL.
+	 * @return array Response data.
 	 */
-	public function mock_http_request( $false, $arguments, $url ) {
+	public function mock_http_request( $response, $parsed_args, $url ) {
 
 		// Video and audio headers.
 		$fake_headers = array(
diff --git a/tests/functions/maybeSerialize.php b/tests/functions/maybeSerialize.php
index 104c1b1134..e8986d9818 100644
--- a/tests/functions/maybeSerialize.php
+++ b/tests/functions/maybeSerialize.php
@@ -213,9 +213,9 @@ class Tests_Functions_MaybeSerialize extends WP_UnitTestCase {
 	public function test_deserialize_request_utility_filtered_iterator_objects( $value ) {
 		$serialized = maybe_serialize( $value );
 
-		if ( get_class( $value ) === 'Requests_Utility_FilteredIterator' ) {
+		if ( get_class( $value ) === 'WpOrg\Requests\Utility\FilteredIterator' ) {
 			$new_value = unserialize( $serialized );
-			$property  = ( new ReflectionClass( 'Requests_Utility_FilteredIterator' ) )->getProperty( 'callback' );
+			$property  = ( new ReflectionClass( 'WpOrg\Requests\Utility\FilteredIterator' ) )->getProperty( 'callback' );
 			$property->setAccessible( true );
 			$callback_value = $property->getValue( $new_value );
 
@@ -233,10 +233,10 @@ class Tests_Functions_MaybeSerialize extends WP_UnitTestCase {
 	public function data_serialize_deserialize_objects() {
 		return array(
 			'filtered iterator using md5'  => array(
-				new Requests_Utility_FilteredIterator( array( 1 ), 'md5' ),
+				new WpOrg\Requests\Utility\FilteredIterator( array( 1 ), 'md5' ),
 			),
 			'filtered iterator using sha1' => array(
-				new Requests_Utility_FilteredIterator( array( 1, 2 ), 'sha1' ),
+				new WpOrg\Requests\Utility\FilteredIterator( array( 1, 2 ), 'sha1' ),
 			),
 			'array iterator'               => array(
 				new ArrayIterator( array( 1, 2, 3 ) ),
diff --git a/tests/functions/sizeFormat.php b/tests/functions/sizeFormat.php
index 1337bb39c8..72c383ff95 100644
--- a/tests/functions/sizeFormat.php
+++ b/tests/functions/sizeFormat.php
@@ -14,58 +14,58 @@ class Tests_Functions_SizeFormat extends WP_UnitTestCase {
 
 	public function _data_size_format() {
 		return array(
-			// Invalid values
+			// Invalid values.
 			array( array(), 0, false ),
 			array( 'baba', 0, false ),
 			array( '', 0, false ),
 			array( '-1', 0, false ),
 			array( -1, 0, false ),
-			// Bytes
+			// Bytes.
 			array( 0, 0, '0 B' ),
 			array( 1, 0, '1 B' ),
 			array( 1023, 0, '1,023 B' ),
-			// Kilobytes
+			// Kilobytes.
 			array( KB_IN_BYTES, 0, '1 KB' ),
 			array( KB_IN_BYTES, 2, '1.00 KB' ),
 			array( 2.5 * KB_IN_BYTES, 0, '3 KB' ),
 			array( 2.5 * KB_IN_BYTES, 2, '2.50 KB' ),
 			array( 10 * KB_IN_BYTES, 0, '10 KB' ),
-			// Megabytes
+			// Megabytes.
 			array( (string) 1024 * KB_IN_BYTES, 2, '1.00 MB' ),
 			array( MB_IN_BYTES, 0, '1 MB' ),
 			array( 2.5 * MB_IN_BYTES, 0, '3 MB' ),
 			array( 2.5 * MB_IN_BYTES, 2, '2.50 MB' ),
-			// Gigabytes
+			// Gigabytes.
 			array( (string) 1024 * MB_IN_BYTES, 2, '1.00 GB' ),
 			array( GB_IN_BYTES, 0, '1 GB' ),
 			array( 2.5 * GB_IN_BYTES, 0, '3 GB' ),
 			array( 2.5 * GB_IN_BYTES, 2, '2.50 GB' ),
-			// Terabytes
+			// Terabytes.
 			array( (string) 1024 * GB_IN_BYTES, 2, '1.00 TB' ),
 			array( TB_IN_BYTES, 0, '1 TB' ),
 			array( 2.5 * TB_IN_BYTES, 0, '3 TB' ),
 			array( 2.5 * TB_IN_BYTES, 2, '2.50 TB' ),
-			// Petabytes
+			// Petabytes.
 			array( (string) 1024 * TB_IN_BYTES, 2, '1.00 PB' ),
 			array( PB_IN_BYTES, 0, '1 PB' ),
 			array( 2.5 * PB_IN_BYTES, 0, '3 PB' ),
 			array( 2.5 * PB_IN_BYTES, 2, '2.50 PB' ),
-			// Exabytes
+			// Exabytes.
 			array( (string) 1024 * PB_IN_BYTES, 2, '1.00 EB' ),
 			array( EB_IN_BYTES, 0, '1 EB' ),
 			array( 2.5 * EB_IN_BYTES, 0, '3 EB' ),
 			array( 2.5 * EB_IN_BYTES, 2, '2.50 EB' ),
-			// Zettabytes
+			// Zettabytes.
 			array( (string) 1024 * EB_IN_BYTES, 2, '1.00 ZB' ),
 			array( ZB_IN_BYTES, 0, '1 ZB' ),
 			array( 2.5 * ZB_IN_BYTES, 0, '3 ZB' ),
 			array( 2.5 * ZB_IN_BYTES, 2, '2.50 ZB' ),
-			// Yottabytes
+			// Yottabytes.
 			array( (string) 1024 * ZB_IN_BYTES, 2, '1.00 YB' ),
 			array( YB_IN_BYTES, 0, '1 YB' ),
 			array( 2.5 * YB_IN_BYTES, 0, '3 YB' ),
 			array( 2.5 * YB_IN_BYTES, 2, '2.50 YB' ),
-			// Edge values
+			// Edge values.
 			array( TB_IN_BYTES + ( TB_IN_BYTES / 2 ) + MB_IN_BYTES, 1, '1.5 TB' ),
 			array( TB_IN_BYTES - MB_IN_BYTES - KB_IN_BYTES, 3, '1,023.999 GB' ),
 		);
diff --git a/tests/functions/wpCheckAlternateFileNames.php b/tests/functions/wpCheckAlternateFileNames.php
new file mode 100644
index 0000000000..c21ae3374d
--- /dev/null
+++ b/tests/functions/wpCheckAlternateFileNames.php
@@ -0,0 +1,68 @@
+<?php
+
+/**
+ * @group functions.php
+ * @covers ::_wp_check_alternate_file_names
+ */
+class Tests_Functions_WpCheckAlternateFileNames extends WP_UnitTestCase {
+
+	/**
+	 * @dataProvider data_wp_check_alternate_file_names
+	 *
+	 * @ticket 55199
+	 *
+	 * @param array  $filenames Array of filenames to check.
+	 * @param string $dir       The directory to check.
+	 * @param array  $files     An array of existing files in the directory.
+	 * @param bool   $expected  Expected result.
+	 */
+	public function test_wp_check_alternate_file_names( $filenames, $dir, $files, $expected ) {
+		$this->assertSame( $expected, _wp_check_alternate_file_names( $filenames, $dir, $files ) );
+	}
+
+	/**
+	 * Data provider.
+	 *
+	 * @return array[]
+	 */
+	public function data_wp_check_alternate_file_names() {
+		return array(
+			'an existing file'                         => array(
+				'filenames' => array( 'canola.jpg' ),
+				'dir'       => DIR_TESTDATA . '/images/',
+				'files'     => array(),
+				'expected'  => true,
+			),
+			'multiple existing files'                  => array(
+				'filenames' => array( 'canola.jpg', 'codeispoetry.png' ),
+				'dir'       => DIR_TESTDATA . '/images/',
+				'files'     => array(),
+				'expected'  => true,
+			),
+			'a non-existent file and an existing file' => array(
+				'filenames' => array( 'an-image.jpg', 'codeispoetry.png' ),
+				'dir'       => DIR_TESTDATA . '/images/',
+				'files'     => array(),
+				'expected'  => true,
+			),
+			'a non-existent file and an existing image sub-size file' => array(
+				'filenames' => array( 'one-blue-pixel.png' ),
+				'dir'       => DIR_TESTDATA . '/images/',
+				'files'     => array( 'one-blue-pixel-100x100.png' ),
+				'expected'  => true,
+			),
+			'a non-existent file and no other existing files' => array(
+				'filenames' => array( 'filename.php' ),
+				'dir'       => DIR_TESTDATA . '/images/',
+				'files'     => array(),
+				'expected'  => false,
+			),
+			'multiple non-existent files and no existing image sub-size files' => array(
+				'filenames' => array( 'canola.jpg', 'codeispoetry.png' ),
+				'dir'       => DIR_TESTDATA . '/functions/',
+				'files'     => array( 'an-image-100x100.jpg', 'another-image-100x100.png' ),
+				'expected'  => false,
+			),
+		);
+	}
+}
diff --git a/tests/functions/wpFilesize.php b/tests/functions/wpFilesize.php
new file mode 100644
index 0000000000..f0e510ddc5
--- /dev/null
+++ b/tests/functions/wpFilesize.php
@@ -0,0 +1,53 @@
+<?php
+
+/**
+ * Tests for the wp_filesize() function.
+ *
+ * @group functions.php
+ * @covers ::wp_filesize
+ */
+class Tests_Functions_wpFilesize extends WP_UnitTestCase {
+
+	/**
+	 * @ticket 49412
+	 */
+	public function test_wp_filesize() {
+		$file = DIR_TESTDATA . '/images/test-image-upside-down.jpg';
+
+		$this->assertSame( filesize( $file ), wp_filesize( $file ) );
+	}
+
+	/**
+	 * @ticket 49412
+	 */
+	public function test_wp_filesize_filters() {
+		$file = DIR_TESTDATA . '/images/test-image-upside-down.jpg';
+
+		add_filter(
+			'wp_filesize',
+			static function() {
+				return 999;
+			}
+		);
+
+		$this->assertSame( 999, wp_filesize( $file ) );
+
+		add_filter(
+			'pre_wp_filesize',
+			static function() {
+				return 111;
+			}
+		);
+
+		$this->assertSame( 111, wp_filesize( $file ) );
+	}
+
+	/**
+	 * @ticket 49412
+	 */
+	public function test_wp_filesize_with_nonexistent_file() {
+		$file = 'nonexistent/file.jpg';
+
+		$this->assertSame( 0, wp_filesize( $file ) );
+	}
+}
diff --git a/tests/functions/wpListFilter.php b/tests/functions/wpListFilter.php
index 45ea4f9601..7b7f54d2d9 100644
--- a/tests/functions/wpListFilter.php
+++ b/tests/functions/wpListFilter.php
@@ -11,14 +11,14 @@ class Tests_Functions_wpListFilter extends WP_UnitTestCase {
 	/**
 	 * @dataProvider data_test_wp_list_filter
 	 *
-	 * @param array  $list     An array of objects to filter.
-	 * @param array  $args     An array of key => value arguments to match
-	 *                         against each object.
-	 * @param string $operator The logical operation to perform.
-	 * @param array  $expected Expected result.
+	 * @param array  $input_list An array of objects to filter.
+	 * @param array  $args       An array of key => value arguments to match
+	 *                           against each object.
+	 * @param string $operator   The logical operation to perform.
+	 * @param array  $expected   Expected result.
 	 */
-	public function test_wp_list_filter( $list, $args, $operator, $expected ) {
-		$this->assertEqualSetsWithIndex( $expected, wp_list_filter( $list, $args, $operator ) );
+	public function test_wp_list_filter( $input_list, $args, $operator, $expected ) {
+		$this->assertEqualSetsWithIndex( $expected, wp_list_filter( $input_list, $args, $operator ) );
 	}
 
 	public function data_test_wp_list_filter() {
diff --git a/tests/functions/wpListPluck.php b/tests/functions/wpListPluck.php
index 10c78ed9bd..63b66670c9 100644
--- a/tests/functions/wpListPluck.php
+++ b/tests/functions/wpListPluck.php
@@ -195,13 +195,13 @@ class Tests_Functions_wpListPluck extends WP_UnitTestCase {
 	/**
 	 * @dataProvider data_test_wp_list_pluck
 	 *
-	 * @param array      $list      List of objects or arrays.
-	 * @param int|string $field     Field from the object to place instead of the entire object
-	 * @param int|string $index_key Field from the object to use as keys for the new array.
-	 * @param array      $expected  Expected result.
+	 * @param array      $input_list List of objects or arrays.
+	 * @param int|string $field      Field from the object to place instead of the entire object
+	 * @param int|string $index_key  Field from the object to use as keys for the new array.
+	 * @param array      $expected   Expected result.
 	 */
-	public function test_wp_list_pluck( $list, $field, $index_key, $expected ) {
-		$this->assertSameSetsWithIndex( $expected, wp_list_pluck( $list, $field, $index_key ) );
+	public function test_wp_list_pluck( $input_list, $field, $index_key, $expected ) {
+		$this->assertSameSetsWithIndex( $expected, wp_list_pluck( $input_list, $field, $index_key ) );
 	}
 
 	public function data_test_wp_list_pluck() {
diff --git a/tests/functions/wpListSort.php b/tests/functions/wpListSort.php
index 7159af4937..a77354d70e 100644
--- a/tests/functions/wpListSort.php
+++ b/tests/functions/wpListSort.php
@@ -12,11 +12,11 @@ class Tests_Functions_wpListSort extends WP_UnitTestCase {
 	 * @dataProvider data_test_wp_list_sort
 	 *
 	 * @param string|array $orderby Either the field name to order by or an array
-	 *                              of multiple orderby fields as $orderby => $order.
+	 *                              of multiple orderby fields as `$orderby => $order`.
 	 * @param string       $order   Either 'ASC' or 'DESC'.
 	 */
-	public function test_wp_list_sort( $list, $orderby, $order, $expected ) {
-		$this->assertSame( $expected, wp_list_sort( $list, $orderby, $order ) );
+	public function test_wp_list_sort( $input_list, $orderby, $order, $expected ) {
+		$this->assertSame( $expected, wp_list_sort( $input_list, $orderby, $order ) );
 	}
 
 	public function data_test_wp_list_sort() {
@@ -337,11 +337,11 @@ class Tests_Functions_wpListSort extends WP_UnitTestCase {
 	 * @dataProvider data_test_wp_list_sort_preserve_keys
 	 *
 	 * @param string|array $orderby Either the field name to order by or an array
-	 *                              of multiple orderby fields as $orderby => $order.
+	 *                              of multiple orderby fields as `$orderby => $order`.
 	 * @param string       $order   Either 'ASC' or 'DESC'.
 	 */
-	public function test_wp_list_sort_preserve_keys( $list, $orderby, $order, $expected ) {
-		$this->assertSame( $expected, wp_list_sort( $list, $orderby, $order, true ) );
+	public function test_wp_list_sort_preserve_keys( $input_list, $orderby, $order, $expected ) {
+		$this->assertSame( $expected, wp_list_sort( $input_list, $orderby, $order, true ) );
 	}
 
 	public function data_test_wp_list_sort_preserve_keys() {
diff --git a/tests/functions/wpListUtil.php b/tests/functions/wpListUtil.php
index 45cad6627a..f455c94936 100644
--- a/tests/functions/wpListUtil.php
+++ b/tests/functions/wpListUtil.php
@@ -52,4 +52,1097 @@ class Tests_Functions_wpListUtil extends WP_UnitTestCase {
 		$this->assertEqualSets( $expected, $actual );
 		$this->assertEqualSets( $expected, $util->get_output() );
 	}
+
+	/**
+	 * @ticket 55300
+	 *
+	 * @dataProvider data_wp_list_util_pluck
+	 *
+	 * @covers WP_List_Util::pluck
+	 * @covers ::wp_list_pluck
+	 *
+	 * @param array  $target_array The array to create the list from.
+	 * @param string $target_key   The key to pluck.
+	 * @param array  $expected     The expected array.
+	 * @param string $index_key    Optional. Field from the element to use as keys for the new array.
+	 *                             Default null.
+	 */
+	public function test_wp_list_util_pluck( $target_array, $target_key, $expected, $index_key = null ) {
+		$util   = new WP_List_Util( $target_array );
+		$actual = $util->pluck( $target_key, $index_key );
+
+		$this->assertEqualSetsWithIndex(
+			$expected,
+			$actual,
+			'The plucked value did not match the expected value.'
+		);
+
+		$this->assertEqualSetsWithIndex(
+			$expected,
+			$util->get_output(),
+			'::get_output() did not return the expected value.'
+		);
+	}
+
+	/**
+	 * Data provider for test_wp_list_util_pluck_simple().
+	 *
+	 * @return array[]
+	 */
+	public function data_wp_list_util_pluck() {
+		return array(
+			'simple'        => array(
+				'target_array' => array(
+					0 => array( 'foo' => 'bar' ),
+				),
+				'target_key'   => 'foo',
+				'expected'     => array( 'bar' ),
+			),
+			'simple_object' => array(
+				'target_array' => array(
+					0 => (object) array( 'foo' => 'bar' ),
+				),
+				'target_key'   => 'foo',
+				'expected'     => array( 'bar' ),
+			),
+		);
+	}
+
+	/**
+	 * @ticket 55300
+	 *
+	 * @covers WP_List_Util::sort
+	 * @covers ::wp_list_sort
+	 */
+	public function test_wp_list_util_sort_simple() {
+		$expected     = array(
+			1 => 'one',
+			2 => 'two',
+			3 => 'three',
+			4 => 'four',
+		);
+		$target_array = array(
+			4 => 'four',
+			2 => 'two',
+			3 => 'three',
+			1 => 'one',
+		);
+
+		$util   = new WP_List_Util( $target_array );
+		$actual = $util->sort();
+
+		$this->assertEqualSets(
+			$expected,
+			$actual,
+			'The sorted value did not match the expected value.'
+		);
+
+		$this->assertEqualSets(
+			$expected,
+			$util->get_output(),
+			'::get_output() did not return the expected value.'
+		);
+	}
+
+	/**
+	 * @ticket 55300
+	 *
+	 * @dataProvider data_wp_list_util_sort_string_arrays
+	 * @dataProvider data_wp_list_util_sort_int_arrays
+	 * @dataProvider data_wp_list_util_sort_arrays_of_arrays
+	 * @dataProvider data_wp_list_util_sort_object_arrays
+	 *
+	 * @covers WP_List_Util::sort
+	 * @covers ::wp_list_sort
+	 *
+	 * @param array  $expected      The expected array.
+	 * @param array  $target_array  The array to create a list from.
+	 * @param array  $orderby       Optional. Either the field name to order by or an array
+	 *                              of multiple orderby fields as `$orderby => $order`.
+	 *                              Default empty array.
+	 * @param string $order         Optional. Either 'ASC' or 'DESC'. Only used if `$orderby`
+	 *                              is a string. Default 'ASC'.
+	 * @param bool   $preserve_keys Optional. Whether to preserve keys. Default false.
+	 */
+	public function test_wp_list_util_sort( $expected, $target_array, $orderby = array(), $order = 'ASC', $preserve_keys = false ) {
+		$util   = new WP_List_Util( $target_array );
+		$actual = $util->sort( $orderby, $order, $preserve_keys );
+
+		$this->assertEqualSetsWithIndex(
+			$expected,
+			$actual,
+			'The sorted value did not match the expected value.'
+		);
+
+		$this->assertEqualSetsWithIndex(
+			$expected,
+			$util->get_output(),
+			'::get_output() did not return the expected value.'
+		);
+	}
+
+	/**
+	 * Data provider that provides string arrays to test_wp_list_util_sort().
+	 *
+	 * @return array[]
+	 */
+	public function data_wp_list_util_sort_string_arrays() {
+		return array(
+			'string[], no keys, no ordering'     => array(
+				'expected'     => array( 'four', 'two', 'three', 'one' ),
+				'target_array' => array( 'four', 'two', 'three', 'one' ),
+			),
+			'string[], int keys, no ordering'    => array(
+				'expected'     => array(
+					4 => 'four',
+					2 => 'two',
+					3 => 'three',
+					1 => 'one',
+				),
+				'target_array' => array(
+					4 => 'four',
+					2 => 'two',
+					3 => 'three',
+					1 => 'one',
+				),
+			),
+			'string[], int keys, $orderby a non-existent field, $order = DESC and $preserve_keys = true' => array(
+				'expected'      => array(
+					4 => 'four',
+					2 => 'two',
+					3 => 'three',
+					1 => 'one',
+				),
+				'target_array'  => array(
+					4 => 'four',
+					2 => 'two',
+					3 => 'three',
+					1 => 'one',
+				),
+				'orderby'       => 'id',
+				'order'         => 'DESC',
+				'preserve_keys' => true,
+			),
+			'string[], string keys, no ordering' => array(
+				'expected'     => array(
+					'four'  => 'four',
+					'two'   => 'two',
+					'three' => 'three',
+					'one'   => 'one',
+				),
+				'target_array' => array(
+					'four'  => 'four',
+					'two'   => 'two',
+					'three' => 'three',
+					'one'   => 'one',
+				),
+			),
+			'string[], string keys, $orderby a non-existent field, $order = DESC and $preserve_keys = true' => array(
+				'expected'      => array(
+					'four'  => 'four',
+					'two'   => 'two',
+					'three' => 'three',
+					'one'   => 'one',
+				),
+				'target_array'  => array(
+					'four'  => 'four',
+					'two'   => 'two',
+					'three' => 'three',
+					'one'   => 'one',
+				),
+				'orderby'       => 'id',
+				'order'         => 'DESC',
+				'preserve_keys' => true,
+			),
+		);
+	}
+
+	/**
+	 * Data provider that provides int arrays for test_wp_list_util_sort().
+	 *
+	 * @return array[]
+	 */
+	public function data_wp_list_util_sort_int_arrays() {
+		return array(
+			'int[], no keys, no ordering'     => array(
+				'expected'     => array( 4, 2, 3, 1 ),
+				'target_array' => array( 4, 2, 3, 1 ),
+			),
+			'int[], int keys, no ordering'    => array(
+				'expected'     => array(
+					4 => 4,
+					2 => 2,
+					3 => 3,
+					1 => 1,
+				),
+				'target_array' => array(
+					4 => 4,
+					2 => 2,
+					3 => 3,
+					1 => 1,
+				),
+			),
+			'int[], int keys, $orderby a non-existent field, $order = DESC and $preserve_keys = true' => array(
+				'expected'      => array(
+					4 => 4,
+					2 => 2,
+					3 => 3,
+					1 => 1,
+				),
+				'target_array'  => array(
+					4 => 4,
+					2 => 2,
+					3 => 3,
+					1 => 1,
+				),
+				'orderby'       => 'id',
+				'order'         => 'DESC',
+				'preserve_keys' => true,
+			),
+			'int[], string keys, no ordering' => array(
+				'expected'     => array(
+					'four'  => 4,
+					'two'   => 2,
+					'three' => 3,
+					'one'   => 1,
+				),
+				'target_array' => array(
+					'four'  => 4,
+					'two'   => 2,
+					'three' => 3,
+					'one'   => 1,
+				),
+			),
+			'int[], string keys, $orderby a non-existent field, $order = DESC and $preserve_keys = true' => array(
+				'expected'      => array(
+					'four'  => 4,
+					'two'   => 2,
+					'three' => 3,
+					'one'   => 1,
+				),
+				'target_array'  => array(
+					'four'  => 4,
+					'two'   => 2,
+					'three' => 3,
+					'one'   => 1,
+				),
+				'orderby'       => 'id',
+				'order'         => 'DESC',
+				'preserve_keys' => true,
+			),
+		);
+	}
+
+	/**
+	 * Data provider that provides arrays of arrays for test_wp_list_util_sort().
+	 *
+	 * @return array[]
+	 */
+	public function data_wp_list_util_sort_arrays_of_arrays() {
+		return array(
+			'array[], no keys, no ordering'     => array(
+				'expected'     => array(
+					array( 'four' ),
+					array( 'two' ),
+					array( 'three' ),
+					array( 'one' ),
+				),
+				'target_array' => array(
+					array( 'four' ),
+					array( 'two' ),
+					array( 'three' ),
+					array( 'one' ),
+				),
+			),
+			'array[], int keys, no ordering'    => array(
+				'expected'     => array(
+					4 => array( 'four' ),
+					2 => array( 'two' ),
+					3 => array( 'three' ),
+					1 => array( 'one' ),
+				),
+				'target_array' => array(
+					4 => array( 'four' ),
+					2 => array( 'two' ),
+					3 => array( 'three' ),
+					1 => array( 'one' ),
+				),
+			),
+			'array[], int keys, $orderby a non-existent field, $order = DESC and $preserve_keys = true' => array(
+				'expected'      => array(
+					4 => array( 'value' => 'four' ),
+					2 => array( 'value' => 'two' ),
+					3 => array( 'value' => 'three' ),
+					1 => array( 'value' => 'one' ),
+				),
+				'target_array'  => array(
+					4 => array( 'value' => 'four' ),
+					2 => array( 'value' => 'two' ),
+					3 => array( 'value' => 'three' ),
+					1 => array( 'value' => 'one' ),
+				),
+				'orderby'       => 'id',
+				'order'         => 'DESC',
+				'preserve_keys' => true,
+			),
+			'array[], int keys, $orderby an existing field, $order = ASC and $preserve_keys = false' => array(
+				'expected'      => array(
+					array(
+						'id'    => 1,
+						'value' => 'one',
+					),
+					array(
+						'id'    => 2,
+						'value' => 'two',
+					),
+					array(
+						'id'    => 3,
+						'value' => 'three',
+					),
+					array(
+						'id'    => 4,
+						'value' => 'four',
+					),
+				),
+				'target_array'  => array(
+					4 => array(
+						'id'    => 4,
+						'value' => 'four',
+					),
+					2 => array(
+						'id'    => 2,
+						'value' => 'two',
+					),
+					3 => array(
+						'id'    => 3,
+						'value' => 'three',
+					),
+					1 => array(
+						'id'    => 1,
+						'value' => 'one',
+					),
+				),
+				'orderby'       => 'id',
+				'order'         => 'ASC',
+				'preserve_keys' => false,
+			),
+			'array[], int keys, $orderby an existing field, $order = DESC and $preserve_keys = true' => array(
+				'expected'      => array(
+					3 => array(
+						'id'    => 4,
+						'value' => 'four',
+					),
+					2 => array(
+						'id'    => 3,
+						'value' => 'three',
+					),
+					1 => array(
+						'id'    => 2,
+						'value' => 'two',
+					),
+					0 => array(
+						'id'    => 1,
+						'value' => 'one',
+					),
+				),
+				'target_array'  => array(
+					array(
+						'id'    => 1,
+						'value' => 'one',
+					),
+					array(
+						'id'    => 2,
+						'value' => 'two',
+					),
+					array(
+						'id'    => 3,
+						'value' => 'three',
+					),
+					array(
+						'id'    => 4,
+						'value' => 'four',
+					),
+				),
+				'orderby'       => 'id',
+				'order'         => 'DESC',
+				'preserve_keys' => true,
+			),
+			'array[], string keys, no ordering' => array(
+				'expected'     => array(
+					'four'  => array( 'value' => 'four' ),
+					'two'   => array( 'value' => 'two' ),
+					'three' => array( 'value' => 'three' ),
+					'one'   => array( 'value' => 'one' ),
+				),
+				'target_array' => array(
+					'four'  => array( 'value' => 'four' ),
+					'two'   => array( 'value' => 'two' ),
+					'three' => array( 'value' => 'three' ),
+					'one'   => array( 'value' => 'one' ),
+				),
+			),
+			'array[], string keys, $orderby a non-existent field, $order = DESC and $preserve_keys = true' => array(
+				'expected'      => array(
+					'four'  => array( 'value' => 'four' ),
+					'two'   => array( 'value' => 'two' ),
+					'three' => array( 'value' => 'three' ),
+					'one'   => array( 'value' => 'one' ),
+				),
+				'target_array'  => array(
+					'four'  => array( 'value' => 'four' ),
+					'two'   => array( 'value' => 'two' ),
+					'three' => array( 'value' => 'three' ),
+					'one'   => array( 'value' => 'one' ),
+				),
+				'orderby'       => 'id',
+				'order'         => 'DESC',
+				'preserve_keys' => true,
+			),
+			'array[], string keys, $orderby an existing field, $order = ASC and $preserve_keys = false' => array(
+				'expected'      => array(
+					array(
+						'id'    => 1,
+						'value' => 'one',
+					),
+					array(
+						'id'    => 2,
+						'value' => 'two',
+					),
+					array(
+						'id'    => 3,
+						'value' => 'three',
+					),
+					array(
+						'id'    => 4,
+						'value' => 'four',
+					),
+				),
+				'target_array'  => array(
+					'four'  => array(
+						'id'    => 4,
+						'value' => 'four',
+					),
+					'two'   => array(
+						'id'    => 2,
+						'value' => 'two',
+					),
+					'three' => array(
+						'id'    => 3,
+						'value' => 'three',
+					),
+					'one'   => array(
+						'id'    => 1,
+						'value' => 'one',
+					),
+				),
+				'orderby'       => 'id',
+				'order'         => 'ASC',
+				'preserve_keys' => false,
+			),
+			'array[], string keys, $orderby an existing field, $order = DESC and $preserve_keys = true' => array(
+				'expected'      => array(
+					'four'  => array(
+						'id'    => 4,
+						'value' => 'four',
+					),
+					'three' => array(
+						'id'    => 3,
+						'value' => 'three',
+					),
+					'two'   => array(
+						'id'    => 2,
+						'value' => 'two',
+					),
+					'one'   => array(
+						'id'    => 1,
+						'value' => 'one',
+					),
+				),
+				'target_array'  => array(
+					'one'   => array(
+						'id'    => 1,
+						'value' => 'one',
+					),
+					'two'   => array(
+						'id'    => 2,
+						'value' => 'two',
+					),
+					'three' => array(
+						'id'    => 3,
+						'value' => 'three',
+					),
+					'four'  => array(
+						'id'    => 4,
+						'value' => 'four',
+					),
+				),
+				'orderby'       => 'id',
+				'order'         => 'DESC',
+				'preserve_keys' => true,
+			),
+			'array[], string keys, $orderby an existing field, $order = asc (lowercase) and $preserve_keys = false' => array(
+				'expected'      => array(
+					array(
+						'id'    => 1,
+						'value' => 'one',
+					),
+					array(
+						'id'    => 2,
+						'value' => 'two',
+					),
+					array(
+						'id'    => 3,
+						'value' => 'three',
+					),
+					array(
+						'id'    => 4,
+						'value' => 'four',
+					),
+				),
+				'target_array'  => array(
+					'four'  => array(
+						'id'    => 4,
+						'value' => 'four',
+					),
+					'two'   => array(
+						'id'    => 2,
+						'value' => 'two',
+					),
+					'three' => array(
+						'id'    => 3,
+						'value' => 'three',
+					),
+					'one'   => array(
+						'id'    => 1,
+						'value' => 'one',
+					),
+				),
+				'orderby'       => 'id',
+				'order'         => 'asc',
+				'preserve_keys' => false,
+			),
+			'array[], string keys, $orderby an existing field, no order and $preserve_keys = false' => array(
+				'expected'      => array(
+					'four'  => array(
+						'id'    => 4,
+						'value' => 'four',
+					),
+					'three' => array(
+						'id'    => 3,
+						'value' => 'three',
+					),
+					'two'   => array(
+						'id'    => 2,
+						'value' => 'two',
+					),
+					'one'   => array(
+						'id'    => 1,
+						'value' => 'one',
+					),
+				),
+				'target_array'  => array(
+					'one'   => array(
+						'id'    => 1,
+						'value' => 'one',
+					),
+					'two'   => array(
+						'id'    => 2,
+						'value' => 'two',
+					),
+					'three' => array(
+						'id'    => 3,
+						'value' => 'three',
+					),
+					'four'  => array(
+						'id'    => 4,
+						'value' => 'four',
+					),
+				),
+				'orderby'       => array( 'id' ),
+				'order'         => null,
+				'preserve_keys' => true,
+			),
+			'array[], string keys, $orderby two existing fields, differing orders and $preserve_keys = false' => array(
+				'expected'      => array(
+					array(
+						'id'    => 1,
+						'value' => 'one',
+					),
+					array(
+						'id'    => 2,
+						'value' => 'two',
+					),
+					array(
+						'id'    => 3,
+						'value' => 'three',
+					),
+					array(
+						'id'    => 4,
+						'value' => 'four',
+					),
+				),
+				'target_array'  => array(
+					'four'  => array(
+						'id'    => 4,
+						'value' => 'four',
+					),
+					'two'   => array(
+						'id'    => 2,
+						'value' => 'two',
+					),
+					'three' => array(
+						'id'    => 3,
+						'value' => 'three',
+					),
+					'one'   => array(
+						'id'    => 1,
+						'value' => 'one',
+					),
+				),
+				'orderby'       => array(
+					'id'    => 'asc',
+					'value' => 'DESC',
+				),
+				'order'         => null,
+				'preserve_keys' => false,
+			),
+		);
+	}
+
+	/**
+	 * Data provider that provides object arrays for test_wp_list_util_sort().
+	 *
+	 * @return array[]
+	 */
+	public function data_wp_list_util_sort_object_arrays() {
+		return array(
+			'object[], no keys, no ordering'     => array(
+				'expected'     => array(
+					(object) array( 'four' ),
+					(object) array( 'two' ),
+					(object) array( 'three' ),
+					(object) array( 'one' ),
+				),
+				'target_array' => array(
+					(object) array( 'four' ),
+					(object) array( 'two' ),
+					(object) array( 'three' ),
+					(object) array( 'one' ),
+				),
+			),
+			'object[], int keys, no ordering'    => array(
+				'expected'     => array(
+					4 => (object) array( 'four' ),
+					2 => (object) array( 'two' ),
+					3 => (object) array( 'three' ),
+					1 => (object) array( 'one' ),
+				),
+				'target_array' => array(
+					4 => (object) array( 'four' ),
+					2 => (object) array( 'two' ),
+					3 => (object) array( 'three' ),
+					1 => (object) array( 'one' ),
+				),
+			),
+			'object[], int keys, $orderby an existing field, $order = ASC and $preserve_keys = false' => array(
+				'expected'      => array(
+					(object) array(
+						'id'    => 1,
+						'value' => 'one',
+					),
+					(object) array(
+						'id'    => 2,
+						'value' => 'two',
+					),
+					(object) array(
+						'id'    => 3,
+						'value' => 'three',
+					),
+					(object) array(
+						'id'    => 4,
+						'value' => 'four',
+					),
+				),
+				'target_array'  => array(
+					4 => (object) array(
+						'id'    => 4,
+						'value' => 'four',
+					),
+					2 => (object) array(
+						'id'    => 2,
+						'value' => 'two',
+					),
+					3 => (object) array(
+						'id'    => 3,
+						'value' => 'three',
+					),
+					1 => (object) array(
+						'id'    => 1,
+						'value' => 'one',
+					),
+				),
+				'orderby'       => 'id',
+				'order'         => 'ASC',
+				'preserve_keys' => false,
+			),
+			'object[], int keys, $orderby an existing field, $order = DESC and $preserve_keys = true' => array(
+				'expected'      => array(
+					3 => (object) array(
+						'id'    => 4,
+						'value' => 'four',
+					),
+					2 => (object) array(
+						'id'    => 3,
+						'value' => 'three',
+					),
+					1 => (object) array(
+						'id'    => 2,
+						'value' => 'two',
+					),
+					0 => (object) array(
+						'id'    => 1,
+						'value' => 'one',
+					),
+				),
+				'target_array'  => array(
+					(object) array(
+						'id'    => 1,
+						'value' => 'one',
+					),
+					(object) array(
+						'id'    => 2,
+						'value' => 'two',
+					),
+					(object) array(
+						'id'    => 3,
+						'value' => 'three',
+					),
+					(object) array(
+						'id'    => 4,
+						'value' => 'four',
+					),
+				),
+				'orderby'       => 'id',
+				'order'         => 'DESC',
+				'preserve_keys' => true,
+			),
+			'object[], string keys, no ordering' => array(
+				'expected'     => array(
+					'four'  => (object) array( 'value' => 'four' ),
+					'two'   => (object) array( 'value' => 'two' ),
+					'three' => (object) array( 'value' => 'three' ),
+					'one'   => (object) array( 'value' => 'one' ),
+				),
+				'target_array' => array(
+					'four'  => (object) array( 'value' => 'four' ),
+					'two'   => (object) array( 'value' => 'two' ),
+					'three' => (object) array( 'value' => 'three' ),
+					'one'   => (object) array( 'value' => 'one' ),
+				),
+			),
+			'object[], string keys, $orderby a non-existent field, $order = DESC and $preserve_keys = true' => array(
+				'expected'      => array(
+					'four'  => (object) array( 'value' => 'four' ),
+					'two'   => (object) array( 'value' => 'two' ),
+					'three' => (object) array( 'value' => 'three' ),
+					'one'   => (object) array( 'value' => 'one' ),
+				),
+				'target_array'  => array(
+					'four'  => (object) array( 'value' => 'four' ),
+					'two'   => (object) array( 'value' => 'two' ),
+					'three' => (object) array( 'value' => 'three' ),
+					'one'   => (object) array( 'value' => 'one' ),
+				),
+				'orderby'       => 'id',
+				'order'         => 'DESC',
+				'preserve_keys' => true,
+			),
+			'object[], string keys, $orderby an existing field, $order = ASC and $preserve_keys = false' => array(
+				'expected'      => array(
+					(object) array(
+						'id'    => 1,
+						'value' => 'one',
+					),
+					(object) array(
+						'id'    => 2,
+						'value' => 'two',
+					),
+					(object) array(
+						'id'    => 3,
+						'value' => 'three',
+					),
+					(object) array(
+						'id'    => 4,
+						'value' => 'four',
+					),
+				),
+				'target_array'  => array(
+					'four'  => (object) array(
+						'id'    => 4,
+						'value' => 'four',
+					),
+					'two'   => (object) array(
+						'id'    => 2,
+						'value' => 'two',
+					),
+					'three' => (object) array(
+						'id'    => 3,
+						'value' => 'three',
+					),
+					'one'   => (object) array(
+						'id'    => 1,
+						'value' => 'one',
+					),
+				),
+				'orderby'       => 'id',
+				'order'         => 'ASC',
+				'preserve_keys' => false,
+			),
+			'object[], string keys, $orderby an existing field, $order = DESC and $preserve_keys = true' => array(
+				'expected'      => array(
+					'four'  => (object) array(
+						'id'    => 4,
+						'value' => 'four',
+					),
+					'three' => (object) array(
+						'id'    => 3,
+						'value' => 'three',
+					),
+					'two'   => (object) array(
+						'id'    => 2,
+						'value' => 'two',
+					),
+					'one'   => (object) array(
+						'id'    => 1,
+						'value' => 'one',
+					),
+				),
+				'target_array'  => array(
+					'one'   => (object) array(
+						'id'    => 1,
+						'value' => 'one',
+					),
+					'two'   => (object) array(
+						'id'    => 2,
+						'value' => 'two',
+					),
+					'three' => (object) array(
+						'id'    => 3,
+						'value' => 'three',
+					),
+					'four'  => (object) array(
+						'id'    => 4,
+						'value' => 'four',
+					),
+				),
+				'orderby'       => 'id',
+				'order'         => 'DESC',
+				'preserve_keys' => true,
+			),
+		);
+	}
+
+	/**
+	 * Tests non-existent '$orderby' fields.
+	 *
+	 * In PHP < 7.0.0, the sorting behavior is different, which Core does not
+	 * currently handle. Until this is fixed, or the minimum PHP version is
+	 * raised to PHP 7.0.0+, these tests will be skipped on PHP < 7.0.0.
+	 *
+	 * @ticket 55300
+	 *
+	 * @dataProvider data_wp_list_util_sort_php_7_or_greater
+	 *
+	 * @covers WP_List_Util::sort
+	 * @covers ::wp_list_sort
+	 *
+	 * @param array  $expected      The expected array.
+	 * @param array  $target_array  The array to create a list from.
+	 * @param array  $orderby       Optional. Either the field name to order by or an array
+	 *                              of multiple orderby fields as `$orderby => $order`.
+	 *                              Default empty array.
+	 * @param string $order         Optional. Either 'ASC' or 'DESC'. Only used if `$orderby`
+	 *                              is a string. Default 'ASC'.
+	 * @param bool   $preserve_keys Optional. Whether to preserve keys. Default false.
+	 */
+	public function test_wp_list_util_sort_php_7_or_greater( $expected, $target_array, $orderby = array(), $order = 'ASC', $preserve_keys = false ) {
+		if ( version_compare( PHP_VERSION, '7.0.0', '<' ) ) {
+			$this->markTestSkipped( 'This test can only run on PHP 7.0 or greater due to an unstable sort order.' );
+		}
+
+		$util   = new WP_List_Util( $target_array );
+		$actual = $util->sort( $orderby, $order, $preserve_keys );
+
+		$this->assertEqualSetsWithIndex(
+			$expected,
+			$actual,
+			'The sorted value did not match the expected value.'
+		);
+		$this->assertEqualSetsWithIndex(
+			$expected,
+			$util->get_output(),
+			'::get_output() did not return the expected value.'
+		);
+	}
+
+	/**
+	 * Data provider for test_wp_list_util_sort_php_7_or_greater().
+	 *
+	 * @return array[]
+	 */
+	public function data_wp_list_util_sort_php_7_or_greater() {
+		return array(
+			'int[], int keys, $orderby a non-existent field, $order = ASC and $preserve_keys = false' => array(
+				'expected'      => array( 4, 2, 3, 1 ),
+				'target_array'  => array(
+					4 => 4,
+					2 => 2,
+					3 => 3,
+					1 => 1,
+				),
+				'orderby'       => 'id',
+				'order'         => 'ASC',
+				'preserve_keys' => false,
+			),
+			'int[], string keys, $orderby a non-existent field, $order = ASC and $preserve_keys = false' => array(
+				'expected'      => array( 4, 2, 3, 1 ),
+				'target_array'  => array(
+					'four'  => 4,
+					'two'   => 2,
+					'three' => 3,
+					'one'   => 1,
+				),
+				'orderby'       => 'id',
+				'order'         => 'ASC',
+				'preserve_keys' => false,
+			),
+			'string[], int keys, $orderby a non-existent field, $order = ASC and $preserve_keys = false' => array(
+				'expected'      => array( 'four', 'two', 'three', 'one' ),
+				'target_array'  => array(
+					4 => 'four',
+					2 => 'two',
+					3 => 'three',
+					1 => 'one',
+				),
+				'orderby'       => 'id',
+				'order'         => 'ASC',
+				'preserve_keys' => false,
+			),
+			'string[], string keys, $orderby a non-existent field, $order = ASC and $preserve_keys = false' => array(
+				'expected'      => array( 'four', 'two', 'three', 'one' ),
+				'target_array'  => array(
+					'four'  => 'four',
+					'two'   => 'two',
+					'three' => 'three',
+					'one'   => 'one',
+				),
+				'orderby'       => 'id',
+				'order'         => 'ASC',
+				'preserve_keys' => false,
+			),
+			'array[], int keys, $orderby a non-existent field, $order = ASC and $preserve_keys = false' => array(
+				'expected'      => array(
+					array( 'value' => 'four' ),
+					array( 'value' => 'two' ),
+					array( 'value' => 'three' ),
+					array( 'value' => 'one' ),
+				),
+				'target_array'  => array(
+					4 => array( 'value' => 'four' ),
+					2 => array( 'value' => 'two' ),
+					3 => array( 'value' => 'three' ),
+					1 => array( 'value' => 'one' ),
+				),
+				'orderby'       => 'id',
+				'order'         => 'ASC',
+				'preserve_keys' => false,
+			),
+			'array[], string keys, $orderby a non-existent field, $order = ASC and $preserve_keys = false' => array(
+				'expected'      => array(
+					array( 'value' => 'four' ),
+					array( 'value' => 'two' ),
+					array( 'value' => 'three' ),
+					array( 'value' => 'one' ),
+				),
+				'target_array'  => array(
+					'four'  => array( 'value' => 'four' ),
+					'two'   => array( 'value' => 'two' ),
+					'three' => array( 'value' => 'three' ),
+					'one'   => array( 'value' => 'one' ),
+				),
+				'orderby'       => 'id',
+				'order'         => 'ASC',
+				'preserve_keys' => false,
+			),
+			'object[], int keys, $orderby a non-existent field, $order = ASC and $preserve_keys = false' => array(
+				'expected'      => array(
+					(object) array( 'value' => 'four' ),
+					(object) array( 'value' => 'two' ),
+					(object) array( 'value' => 'three' ),
+					(object) array( 'value' => 'one' ),
+				),
+				'target_array'  => array(
+					4 => (object) array( 'value' => 'four' ),
+					2 => (object) array( 'value' => 'two' ),
+					3 => (object) array( 'value' => 'three' ),
+					1 => (object) array( 'value' => 'one' ),
+				),
+				'orderby'       => 'id',
+				'order'         => 'ASC',
+				'preserve_keys' => false,
+			),
+			'object[], int keys, $orderby a non-existent field, $order = DESC and $preserve_keys = true' => array(
+				'expected'      => array(
+					4 => (object) array( 'value' => 'four' ),
+					2 => (object) array( 'value' => 'two' ),
+					3 => (object) array( 'value' => 'three' ),
+					1 => (object) array( 'value' => 'one' ),
+				),
+				'target_array'  => array(
+					4 => (object) array( 'value' => 'four' ),
+					2 => (object) array( 'value' => 'two' ),
+					3 => (object) array( 'value' => 'three' ),
+					1 => (object) array( 'value' => 'one' ),
+				),
+				'orderby'       => 'id',
+				'order'         => 'DESC',
+				'preserve_keys' => true,
+			),
+			'object[], string keys, $orderby a non-existent field, $order = ASC and $preserve_keys = false' => array(
+				'expected'      => array(
+					(object) array( 'value' => 'four' ),
+					(object) array( 'value' => 'two' ),
+					(object) array( 'value' => 'three' ),
+					(object) array( 'value' => 'one' ),
+				),
+				'target_array'  => array(
+					'four'  => (object) array( 'value' => 'four' ),
+					'two'   => (object) array( 'value' => 'two' ),
+					'three' => (object) array( 'value' => 'three' ),
+					'one'   => (object) array( 'value' => 'one' ),
+				),
+				'orderby'       => 'id',
+				'order'         => 'ASC',
+				'preserve_keys' => false,
+			),
+			'object[], string keys, $orderby a non-existent field, $order = DESC and $preserve_keys = true' => array(
+				'expected'      => array(
+					'four'  => (object) array( 'value' => 'four' ),
+					'two'   => (object) array( 'value' => 'two' ),
+					'three' => (object) array( 'value' => 'three' ),
+					'one'   => (object) array( 'value' => 'one' ),
+				),
+				'target_array'  => array(
+					'four'  => (object) array( 'value' => 'four' ),
+					'two'   => (object) array( 'value' => 'two' ),
+					'three' => (object) array( 'value' => 'three' ),
+					'one'   => (object) array( 'value' => 'one' ),
+				),
+				'orderby'       => 'id',
+				'order'         => 'DESC',
+				'preserve_keys' => true,
+			),
+		);
+	}
+
 }
diff --git a/tests/functions/wpNonceField.php b/tests/functions/wpNonceField.php
new file mode 100644
index 0000000000..78116f01e5
--- /dev/null
+++ b/tests/functions/wpNonceField.php
@@ -0,0 +1,90 @@
+<?php
+
+/**
+ * Tests for the wp_nonce_field() function.
+ *
+ * @since 6.1.0
+ *
+ * @group functions.php
+ * @covers ::wp_nonce_field
+ */
+class Tests_Functions_wpNonceField extends WP_UnitTestCase {
+
+	/**
+	 * @ticket 55578
+	 */
+	public function test_wp_nonce_field() {
+		wp_nonce_field();
+		$this->expectOutputRegex(
+			'#^<input type="hidden" id="_wpnonce" name="_wpnonce" value=".{10}" />' .
+			'<input type="hidden" name="_wp_http_referer" value="" />$#'
+		);
+	}
+
+	/**
+	 * @ticket 55578
+	 *
+	 * @dataProvider data_wp_nonce_field
+	 *
+	 * @param int|string $action          Action name.
+	 * @param string     $name            Nonce name.
+	 * @param bool       $referer         Whether to set the referer field for validation.
+	 * @param string     $expected_regexp The expected regular expression.
+	 */
+	public function test_wp_nonce_field_return( $action, $name, $referer, $expected_regexp ) {
+		if ( -1 !== $action ) {
+			$nonce_value     = wp_create_nonce( $action );
+			$expected_regexp = str_replace( '%%NONCE_VALUE%%', $nonce_value, $expected_regexp );
+		}
+
+		$this->assertMatchesRegularExpression( $expected_regexp, wp_nonce_field( $action, $name, $referer, false ) );
+	}
+
+	/**
+	 * Data provider.
+	 *
+	 * @return array
+	 */
+	public function data_wp_nonce_field() {
+		return array(
+			'default'     => array(
+				'action'          => -1,
+				'name'            => '_wpnonce',
+				'referer'         => true,
+				'expected_regexp' =>
+					'#^<input type="hidden" id="_wpnonce" name="_wpnonce" value=".{10}" />' .
+					'<input type="hidden" name="_wp_http_referer" value="" />$#',
+			),
+			'action_name' => array(
+				'action'          => 'action_name',
+				'name'            => '_wpnonce',
+				'referer'         => true,
+				'expected_regexp' =>
+					'#^<input type="hidden" id="_wpnonce" name="_wpnonce" value="%%NONCE_VALUE%%" />' .
+					'<input type="hidden" name="_wp_http_referer" value="" />$#',
+			),
+			'nonce_name'  => array(
+				'action'          => -1,
+				'name'            => 'nonce_name',
+				'referer'         => true,
+				'expected_regexp' =>
+					'#^<input type="hidden" id="nonce_name" name="nonce_name" value=".{10}" />' .
+					'<input type="hidden" name="_wp_http_referer" value="" />$#',
+			),
+			'no_referer'  => array(
+				'action'          => -1,
+				'name'            => '_wpnonce',
+				'referer'         => false,
+				'expected_regexp' =>
+					'#^<input type="hidden" id="_wpnonce" name="_wpnonce" value=".{10}" />$#',
+			),
+			'& in name'   => array(
+				'action'          => -1,
+				'name'            => 'a&b',
+				'referer'         => false,
+				'expected_regexp' =>
+					'#^<input type="hidden" id="a\&amp;b" name="a\&amp;b" value=".{10}" />$#',
+			),
+		);
+	}
+}
diff --git a/tests/functions/wpNonceUrl.php b/tests/functions/wpNonceUrl.php
new file mode 100644
index 0000000000..f98b3a3fe8
--- /dev/null
+++ b/tests/functions/wpNonceUrl.php
@@ -0,0 +1,145 @@
+<?php
+
+/**
+ * @group functions.php
+ *
+ * @covers ::wp_nonce_url
+ */
+class Tests_Functions_WpNonceUrl extends WP_UnitTestCase {
+	/**
+	 * Tests that wp_nonce_url() appends the nonce name and value to the URL.
+	 *
+	 * @ticket 54870
+	 *
+	 * @dataProvider data_should_append_nonce_name_and_value
+	 *
+	 * @param string     $actionurl URL to add nonce action.
+	 * @param int|string $action    Optional. Nonce action name. Default -1.
+	 * @param string     $name      Optional. Nonce name. Default '_wpnonce'.
+	 */
+	public function test_should_append_nonce_name_and_value( $actionurl, $action = -1, $name = '_wpnonce' ) {
+		$actual        = wp_nonce_url( $actionurl, $action, $name );
+		$url_with_name = "$actionurl?$name=";
+		$nonce         = str_replace( $url_with_name, '', $actual );
+
+		$this->assertStringContainsString(
+			$url_with_name,
+			$actual,
+			'The URL did not contain the action URL and the nonce name'
+		);
+
+		$this->assertNotFalse(
+			wp_verify_nonce( $nonce, $action ),
+			'The nonce is invalid'
+		);
+	}
+
+	/**
+	 * Data provider for test_should_append_nonce_name_and_value().
+	 *
+	 * @return array
+	 */
+	public function data_should_append_nonce_name_and_value() {
+		return array(
+			'http:// and default action/name'             => array(
+				'actionurl' => 'http://example.org/',
+			),
+			'http:// and a custom nonce action'           => array(
+				'actionurl' => 'http://example.org/',
+				'action'    => 'my_action',
+			),
+			'http:// and a custom nonce name'             => array(
+				'actionurl' => 'http://example.org/',
+				'action'    => -1,
+				'name'      => 'my_nonce',
+			),
+			'http:// and a custom nonce action and name'  => array(
+				'actionurl' => 'http://example.org/',
+				'action'    => 'my_action',
+				'name'      => 'my_nonce',
+			),
+			'https:// and default action/name'            => array(
+				'actionurl' => 'https://example.org/',
+			),
+			'https:// and a custom nonce action'          => array(
+				'actionurl' => 'https://example.org/',
+				'action'    => 'my_action',
+			),
+			'https:// and a custom nonce name'            => array(
+				'actionurl' => 'https://example.org/',
+				'action'    => -1,
+				'name'      => 'my_nonce',
+			),
+			'https:// and a custom nonce action and name' => array(
+				'actionurl' => 'https://example.org/',
+				'action'    => 'my_action',
+				'name'      => 'my_nonce',
+			),
+			'/ and default nonce action/name'             => array(
+				'actionurl' => '/',
+			),
+			'/ and a custom nonce action'                 => array(
+				'actionurl' => '/',
+				'action'    => 'my_action',
+			),
+			'/ and a custom nonce name'                   => array(
+				'actionurl' => '/',
+				'action'    => -1,
+				'name'      => 'my_nonce',
+			),
+			'/ and a custom nonce action and name'        => array(
+				'actionurl' => '/',
+				'action'    => 'my_action',
+				'name'      => 'my_nonce',
+			),
+		);
+	}
+
+	/**
+	 * Tests that wp_nonce_url() handles existing query args.
+	 *
+	 * @ticket 54870
+	 *
+	 * @dataProvider data_should_handle_existing_query_args
+	 *
+	 * @param string $actionurl URL to add nonce action.
+	 * @param string $expected  The expected result.
+	 */
+	public function test_should_handle_existing_query_args( $actionurl, $expected ) {
+		$actual = wp_nonce_url( $actionurl );
+
+		$this->assertStringStartsWith(
+			$expected,
+			$actual,
+			'The nonced URL did not start with the expected value.'
+		);
+
+		$this->assertSame(
+			strlen( $expected ) + 10,
+			strlen( $actual ),
+			'The nonced URL was not the expected length.'
+		);
+	}
+
+	/**
+	 * Data provider for test_should_handle_existing_query_args().
+	 *
+	 * @return array
+	 */
+	public function data_should_handle_existing_query_args() {
+		return array(
+			'one query arg'            => array(
+				'actionurl' => 'http://example.org/?hello=world',
+				'expected'  => 'http://example.org/?hello=world&amp;_wpnonce=',
+			),
+			'two query args'           => array(
+				'actionurl' => 'http://example.org/?hello=world&howdy=admin',
+				'expected'  => 'http://example.org/?hello=world&amp;howdy=admin&amp;_wpnonce=',
+			),
+			'two query args and &amp;' => array(
+				'actionurl' => 'http://example.org/?hello=world&amp;howdy=admin',
+				'expected'  => 'http://example.org/?hello=world&amp;howdy=admin&amp;_wpnonce=',
+			),
+		);
+	}
+}
diff --git a/tests/functions/wpRefererField.php b/tests/functions/wpRefererField.php
new file mode 100644
index 0000000000..ca72d078f0
--- /dev/null
+++ b/tests/functions/wpRefererField.php
@@ -0,0 +1,77 @@
+<?php
+
+/**
+ * Tests for the wp_referer_field() function.
+ *
+ * @since 6.1.0
+ *
+ * @group functions.php
+ * @covers ::wp_referer_field
+ */
+class Tests_Functions_wpRefererField extends WP_UnitTestCase {
+
+	/**
+	 * @ticket 55578
+	 */
+	public function test_wp_referer_field() {
+		$_SERVER['REQUEST_URI'] = '/test/';
+
+		wp_referer_field();
+		$this->expectOutputString( '<input type="hidden" name="_wp_http_referer" value="/test/" />' );
+	}
+
+	/**
+	 * @ticket 55578
+	 */
+	public function test_wp_referer_field_return() {
+		$_SERVER['REQUEST_URI'] = '/test/';
+
+		$this->assertSame( '<input type="hidden" name="_wp_http_referer" value="/test/" />', wp_referer_field( false ) );
+	}
+
+	/**
+	 * Tests that the echo argument is respected.
+	 *
+	 * @ticket 54106
+	 *
+	 * @dataProvider data_wp_referer_field_should_respect_echo_arg
+	 *
+	 * @param mixed $echo Whether to echo or return the referer field.
+	 */
+	public function test_wp_referer_field_should_respect_echo_arg( $echo ) {
+		$actual = $echo ? get_echo( 'wp_referer_field' ) : wp_referer_field( false );
+
+		$this->assertSame( '<input type="hidden" name="_wp_http_referer" value="" />', $actual );
+	}
+
+	/**
+	 * Data provider for test_wp_referer_field_should_respect_echo_arg().
+	 *
+	 * @return array
+	 */
+	public function data_wp_referer_field_should_respect_echo_arg() {
+		return array(
+			'true'         => array( true ),
+			'(int) 1'      => array( 1 ),
+			'(string) "1"' => array( '1' ),
+			'false'        => array( false ),
+			'null'         => array( null ),
+			'(int) 0'      => array( 0 ),
+			'(string) "0"' => array( '0' ),
+		);
+	}
+
+	/**
+	 * @ticket 54106
+	 */
+	public function test_wp_referer_field_with_referer() {
+		$old_request_uri        = $_SERVER['REQUEST_URI'];
+		$_SERVER['REQUEST_URI'] = 'edit.php?_wp_http_referer=edit.php';
+
+		$actual = wp_referer_field( false );
+
+		$_SERVER['REQUEST_URI'] = $old_request_uri;
+
+		$this->assertSame( '<input type="hidden" name="_wp_http_referer" value="edit.php" />', $actual );
+	}
+}
diff --git a/tests/hooks/addFilter.php b/tests/hooks/addFilter.php
index afa526b484..df4db364c5 100644
--- a/tests/hooks/addFilter.php
+++ b/tests/hooks/addFilter.php
@@ -1,6 +1,5 @@
 <?php
 
-
 /**
  * Test the add_filter method of WP_Hook
  *
@@ -189,33 +188,33 @@ class Tests_Hooks_AddFilter extends WP_UnitTestCase {
 		$this->assertSame( '1-134-234', $value );
 	}
 
-	public function _filter_remove_and_add1( $string ) {
-		return $string . '1';
+	public function _filter_remove_and_add1( $value ) {
+		return $value . '1';
 	}
 
-	public function _filter_remove_and_add2( $string ) {
+	public function _filter_remove_and_add2( $value ) {
 		$this->hook->remove_filter( 'remove_and_add', array( $this, '_filter_remove_and_add2' ), 11 );
 		$this->hook->add_filter( 'remove_and_add', array( $this, '_filter_remove_and_add2' ), 11, 1 );
 
-		return $string . '2';
+		return $value . '2';
 	}
 
-	public function _filter_remove_and_recurse_and_add2( $string ) {
+	public function _filter_remove_and_recurse_and_add2( $value ) {
 		$this->hook->remove_filter( 'remove_and_add', array( $this, '_filter_remove_and_recurse_and_add2' ), 11 );
 
-		$string .= '-' . $this->hook->apply_filters( '', array() ) . '-';
+		$value .= '-' . $this->hook->apply_filters( '', array() ) . '-';
 
 		$this->hook->add_filter( 'remove_and_add', array( $this, '_filter_remove_and_recurse_and_add2' ), 11, 1 );
 
-		return $string . '2';
+		return $value . '2';
 	}
 
-	public function _filter_remove_and_add3( $string ) {
-		return $string . '3';
+	public function _filter_remove_and_add3( $value ) {
+		return $value . '3';
 	}
 
-	public function _filter_remove_and_add4( $string ) {
-		return $string . '4';
+	public function _filter_remove_and_add4( $value ) {
+		return $value . '4';
 	}
 
 	public function test_remove_and_add_action() {
diff --git a/tests/http/base.php b/tests/http/base.php
index ee42056bb3..ad104afe52 100644
--- a/tests/http/base.php
+++ b/tests/http/base.php
@@ -435,31 +435,6 @@ abstract class WP_HTTP_UnitTestCase extends WP_UnitTestCase {
 		$this->assertNotWPError( $res );
 	}
 
-	/**
-	 * Test HTTP Redirects with multiple Location headers specified.
-	 *
-	 * @ticket 16890
-	 *
-	 * @covers ::wp_remote_head
-	 * @covers ::wp_remote_retrieve_header
-	 * @covers ::wp_remote_get
-	 * @covers ::wp_remote_retrieve_body
-	 */
-	public function test_multiple_location_headers() {
-		$url = 'http://api.wordpress.org/core/tests/1.0/redirection.php?multiple-location-headers=1';
-		$res = wp_remote_head( $url, array( 'timeout' => 30 ) );
-
-		$this->skipTestOnTimeout( $res );
-		$this->assertIsArray( wp_remote_retrieve_header( $res, 'location' ) );
-		$this->assertCount( 2, wp_remote_retrieve_header( $res, 'location' ) );
-
-		$res = wp_remote_get( $url, array( 'timeout' => 30 ) );
-
-		$this->skipTestOnTimeout( $res );
-		$this->assertSame( 'PASS', wp_remote_retrieve_body( $res ) );
-
-	}
-
 	/**
 	 * Test HTTP Cookie handling.
 	 *
diff --git a/tests/http/functions.php b/tests/http/functions.php
index 49854e0053..5aa92fdf50 100644
--- a/tests/http/functions.php
+++ b/tests/http/functions.php
@@ -216,9 +216,9 @@ class Tests_HTTP_Functions extends WP_UnitTestCase {
 	 */
 	public function test_get_cookie_host_only() {
 		// Emulate WP_Http::request() internals.
-		$requests_response = new Requests_Response();
+		$requests_response = new WpOrg\Requests\Response();
 
-		$requests_response->cookies['test'] = Requests_Cookie::parse( 'test=foo; domain=.wordpress.org' );
+		$requests_response->cookies['test'] = WpOrg\Requests\Cookie::parse( 'test=foo; domain=.wordpress.org' );
 
 		$requests_response->cookies['test']->flags['host-only'] = false; // https://github.com/WordPress/Requests/issues/306
 
@@ -231,7 +231,7 @@ class Tests_HTTP_Functions extends WP_UnitTestCase {
 		$this->assertSame( $cookie->domain, 'wordpress.org' );
 		$this->assertFalse( $cookie->host_only, 'host-only flag not set' );
 
-		// Regurgitate (Requests_Cookie -> WP_Http_Cookie -> Requests_Cookie).
+		// Regurgitate (WpOrg\Requests\Cookie -> WP_Http_Cookie -> WpOrg\Requests\Cookie).
 		$cookies = WP_Http::normalize_cookies( wp_remote_retrieve_cookies( $response ) );
 		$this->assertFalse( $cookies['test']->flags['host-only'], 'host-only flag data lost' );
 	}
diff --git a/tests/http/http.php b/tests/http/http.php
index 23a28f4d75..ea27d7b0d7 100644
--- a/tests/http/http.php
+++ b/tests/http/http.php
@@ -309,13 +309,13 @@ class Tests_HTTP_HTTP extends WP_UnitTestCase {
 			)
 		);
 
-		$this->assertInstanceOf( 'Requests_Cookie_Jar', $cookie_jar );
+		$this->assertInstanceOf( 'WpOrg\Requests\Cookie\Jar', $cookie_jar );
 
 		foreach ( array_keys( $cookies ) as $cookie ) {
 			if ( 'foo' === $cookie ) {
 				$this->assertArrayNotHasKey( $cookie, $cookie_jar );
 			} else {
-				$this->assertInstanceOf( 'Requests_Cookie', $cookie_jar[ $cookie ] );
+				$this->assertInstanceOf( 'WpOrg\Requests\Cookie', $cookie_jar[ $cookie ] );
 			}
 		}
 	}
@@ -567,4 +567,89 @@ class Tests_HTTP_HTTP extends WP_UnitTestCase {
 	public function callback_remove_safe_ports( $ports ) {
 		return array();
 	}
+
+	/**
+	 * Test HTTP Redirects with multiple Location headers specified.
+	 *
+	 * Ensure the WP_HTTP::handle_redirects() method handles multiple Location headers
+	 * and the HTTP request it makes uses the last Location header.
+	 *
+	 * @ticket 16890
+	 * @ticket 57306
+	 *
+	 * @covers WP_HTTP::handle_redirects
+	 */
+	public function test_multiple_location_headers() {
+		$pre_http_request_filter_has_run = false;
+		// Filter the response made by WP_HTTP::handle_redirects().
+		add_filter(
+			'pre_http_request',
+			function( $response, $parsed_args, $url ) use ( &$pre_http_request_filter_has_run ) {
+				$pre_http_request_filter_has_run = true;
+
+				// Assert the redirect URL is correct.
+				$this->assertSame(
+					$url,
+					'http://example.com/?multiple-location-headers=1&redirected=two'
+				);
+
+				if ( 'http://example.com/?multiple-location-headers=1&redirected=two' === $url ) {
+					$body = 'PASS';
+				} else {
+					$body = 'FAIL';
+				}
+
+				return array(
+					'headers'  => array(),
+					'body'     => $body,
+					'response' => array(
+						'code'    => 200,
+						'message' => 'OK',
+					),
+					'cookies'  => array(),
+					'filename' => null,
+				);
+			},
+			10,
+			3
+		);
+
+		$headers = array(
+			'server'       => 'nginx',
+			'date'         => 'Sun, 11 Dec 2022 23:11:22 GMT',
+			'content-type' => 'text/html; charset=utf-8',
+			'location'     => array(
+				'http://example.com/?multiple-location-headers=1&redirected=one',
+				'http://example.com/?multiple-location-headers=1&redirected=two',
+			),
+		);
+
+		// Test the tests: ensure multiple locations are passed to WP_HTTP::handle_redirects().
+		$this->assertIsArray( $headers['location'], 'Location header is expected to be an array.' );
+		$this->assertCount( 2, $headers['location'], 'Location header is expected to contain two values.' );
+
+		$args = array(
+			'timeout'      => 30,
+			'_redirection' => 3,
+			'redirection'  => 2,
+			'method'       => 'GET',
+		);
+
+		$redirect_response = WP_HTTP::handle_redirects(
+			'http://example.com/?multiple-location-headers=1',
+			$args,
+			array(
+				'headers'  => $headers,
+				'body'     => '',
+				'cookies'  => array(),
+				'filename' => null,
+				'response' => array(
+					'code'    => 302,
+					'message' => 'Found',
+				),
+			)
+		);
+		$this->assertSame( 'PASS', wp_remote_retrieve_body( $redirect_response ), 'Redirect response body is expected to be PASS.' );
+		$this->assertTrue( $pre_http_request_filter_has_run, 'The pre_http_request filter is expected to run.' );
+	}
 }
diff --git a/tests/http/includeOldRequestsClass.php b/tests/http/includeOldRequestsClass.php
new file mode 100644
index 0000000000..ec06c72271
--- /dev/null
+++ b/tests/http/includeOldRequestsClass.php
@@ -0,0 +1,22 @@
+<?php
+
+/**
+ * Tests that the old Requests class is included
+ * for plugins or themes that still use it.
+ *
+ * @group http
+ */
+class Tests_HTTP_IncludeOldRequestsClass extends WP_UnitTestCase {
+
+	/**
+	 * @ticket 57341
+	 *
+	 * @coversNothing
+	 */
+	public function test_should_include_old_requests_class() {
+		$this->expectDeprecation();
+		$this->expectDeprecationMessage( 'The PSR-0 `Requests_...` class names in the Request library are deprecated.' );
+
+		new Requests();
+	}
+}
diff --git a/tests/http/wpGetHttpHeaders.php b/tests/http/wpGetHttpHeaders.php
index b462d7d8da..aa5be431d8 100644
--- a/tests/http/wpGetHttpHeaders.php
+++ b/tests/http/wpGetHttpHeaders.php
@@ -44,16 +44,16 @@ class Tests_HTTP_wpGetHttpHeaders extends WP_UnitTestCase {
 	/**
 	 * Mock the HTTP request response
 	 *
-	 * @param bool   $false     False.
-	 * @param array  $arguments Request arguments.
-	 * @param string $url       Request URL.
-	 * @return array|bool
+	 * @param false|array|WP_Error $response    A preemptive return value of an HTTP request. Default false.
+	 * @param array                $parsed_args HTTP request arguments.
+	 * @param string               $url         The request URL.
+	 * @return false|array|WP_Error Response data.
 	 */
-	public function mock_http_request( $false, $arguments, $url ) {
+	public function mock_http_request( $response, $parsed_args, $url ) {
 		if ( 'http://example.com' === $url ) {
 			return array( 'headers' => true );
 		}
 
-		return false;
+		return $response;
 	}
 }
diff --git a/tests/https-detection.php b/tests/https-detection.php
index 1ae5af1309..a30ceb146e 100644
--- a/tests/https-detection.php
+++ b/tests/https-detection.php
@@ -264,37 +264,37 @@ class Tests_HTTPS_Detection extends WP_UnitTestCase {
 		$this->assertNull( wp_is_local_html_output( $html ) );
 	}
 
-	public function record_request_url( $preempt, $parsed_args, $url ) {
+	public function record_request_url( $response, $parsed_args, $url ) {
 		$this->last_request_url = $url;
-		return $preempt;
+		return $response;
 	}
 
-	public function mock_success_with_sslverify( $preempt, $parsed_args ) {
+	public function mock_success_with_sslverify( $response, $parsed_args ) {
 		if ( ! empty( $parsed_args['sslverify'] ) ) {
 			return $this->mock_success();
 		}
-		return $preempt;
+		return $response;
 	}
 
-	public function mock_error_with_sslverify( $preempt, $parsed_args ) {
+	public function mock_error_with_sslverify( $response, $parsed_args ) {
 		if ( ! empty( $parsed_args['sslverify'] ) ) {
 			return $this->mock_error();
 		}
-		return $preempt;
+		return $response;
 	}
 
-	public function mock_success_without_sslverify( $preempt, $parsed_args ) {
+	public function mock_success_without_sslverify( $response, $parsed_args ) {
 		if ( empty( $parsed_args['sslverify'] ) ) {
 			return $this->mock_success();
 		}
-		return $preempt;
+		return $response;
 	}
 
-	public function mock_error_without_sslverify( $preempt, $parsed_args ) {
+	public function mock_error_without_sslverify( $response, $parsed_args ) {
 		if ( empty( $parsed_args['sslverify'] ) ) {
 			return $this->mock_error();
 		}
-		return $preempt;
+		return $response;
 	}
 
 	public function mock_not_found() {
diff --git a/tests/image/editor.php b/tests/image/editor.php
index d478dd6bf1..be4591451d 100644
--- a/tests/image/editor.php
+++ b/tests/image/editor.php
@@ -18,20 +18,11 @@ class Tests_Image_Editor extends WP_Image_UnitTestCase {
 		require_once ABSPATH . WPINC . '/class-wp-image-editor.php';
 
 		require_once DIR_TESTDATA . '/../includes/mock-image-editor.php';
-		add_filter( 'image_editor_output_format', '__return_empty_array' );
 
 		// This needs to come after the mock image editor class is loaded.
 		parent::set_up();
 	}
 
-	/**
-	 * Tear down the class.
-	 */
-	public function tear_down() {
-		remove_filter( 'image_editor_output_format', '__return_empty_array' );
-		parent::tear_down();
-	}
-
 	/**
 	 * Test wp_get_image_editor() where load returns true
 	 *
@@ -114,9 +105,6 @@ class Tests_Image_Editor extends WP_Image_UnitTestCase {
 
 		// Ensure wp_editor_set_quality filter applies if it exists before editor instantiation.
 		$this->assertSame( 100, $editor->get_quality() );
-
-		// Clean up.
-		remove_filter( 'wp_editor_set_quality', $func_100_percent );
 	}
 
 	/**
@@ -128,18 +116,25 @@ class Tests_Image_Editor extends WP_Image_UnitTestCase {
 		$editor = wp_get_image_editor( DIR_TESTDATA . '/images/test-image.png' );
 		$editor->set_mime_type( 'image/png' ); // Ensure mime-specific filters act properly.
 
+		// Quality setting for the source image. For PNG the fallback default of 82 is used.
+		$this->assertSame( 82, $editor->get_quality(), 'Default quality setting is 82.' );
+
 		// Set conversions for uploaded images.
 		add_filter( 'image_editor_output_format', array( $this, 'image_editor_output_formats' ) );
 
 		// Quality setting for the source image. For PNG the fallback default of 82 is used.
 		$this->assertSame( 82, $editor->get_quality(), 'Default quality setting is 82.' );
 
-		// Quality should change to the output format's value.
-		// A PNG image will be converted to WEBP whose quialty should be 86.
+		// When saving, quality should change to the output format's value.
+		// A PNG image will be converted to WebP whose quality should be 86.
 		$editor->save();
-		$this->assertSame( 86, $editor->get_quality(), 'Output image format is WEBP. Quality setting for it should be 86.' );
+		$this->assertSame( 86, $editor->get_quality(), 'Output image format is WebP. Quality setting for it should be 86.' );
 
-		// Removing PNG to WEBP conversion on save. Quality setting should reset to the default.
+		// Saving again should not change the quality.
+		$editor->save();
+		$this->assertSame( 86, $editor->get_quality(), 'Output image format is WebP. Quality setting for it should be 86.' );
+
+		// Removing PNG to WebP conversion on save. Quality setting should reset to the default.
 		remove_filter( 'image_editor_output_format', array( $this, 'image_editor_output_formats' ) );
 		$editor->save();
 		$this->assertSame( 82, $editor->get_quality(), 'After removing image conversion quality setting should reset to the default of 82.' );
@@ -158,9 +153,9 @@ class Tests_Image_Editor extends WP_Image_UnitTestCase {
 		$this->assertSame( 56, $editor->get_quality(), 'Filtered default quality for JPEG is 56.' );
 
 		// Quality should change to the output format's value as filtered above.
-		// A JPEG image will be converted to WEBP whose quialty should be 42.
+		// A JPEG image will be converted to WebP whose quialty should be 42.
 		$editor->save();
-		$this->assertSame( 42, $editor->get_quality(), 'Image conversion from JPEG to WEBP. Filtered WEBP quality shoild be 42.' );
+		$this->assertSame( 42, $editor->get_quality(), 'Image conversion from JPEG to WEBP. Filtered WEBP quality should be 42.' );
 
 		// After removing the conversion the quality setting should reset to the filtered value for the original image type, JPEG.
 		remove_filter( 'image_editor_output_format', array( $this, 'image_editor_output_formats' ) );
@@ -170,8 +165,6 @@ class Tests_Image_Editor extends WP_Image_UnitTestCase {
 			$editor->get_quality(),
 			'After removing image conversion the quality setting should reset to the filtered value for JPEG, 56.'
 		);
-
-		remove_filter( 'wp_editor_set_quality', array( $this, 'image_editor_change_quality' ) );
 	}
 
 	/**
@@ -235,10 +228,10 @@ class Tests_Image_Editor extends WP_Image_UnitTestCase {
 		$this->assertSame( trailingslashit( realpath( get_temp_dir() ) ), trailingslashit( realpath( dirname( $editor->generate_filename( null, get_temp_dir() ) ) ) ) );
 
 		// Test with a suffix only.
-		$this->assertSame( 'canola-100x50-jpg.png', wp_basename( $editor->generate_filename( null, null, 'png' ) ) );
+		$this->assertSame( 'canola-100x50.png', wp_basename( $editor->generate_filename( null, null, 'png' ) ) );
 
 		// Combo!
-		$this->assertSame( trailingslashit( realpath( get_temp_dir() ) ) . 'canola-new-jpg.png', $editor->generate_filename( 'new', realpath( get_temp_dir() ), 'png' ) );
+		$this->assertSame( trailingslashit( realpath( get_temp_dir() ) ) . 'canola-new.png', $editor->generate_filename( 'new', realpath( get_temp_dir() ), 'png' ) );
 
 		// Test with a stream destination.
 		$this->assertSame( 'file://testing/path/canola-100x50.jpg', $editor->generate_filename( null, 'file://testing/path' ) );
diff --git a/tests/image/editorGd.php b/tests/image/editorGd.php
index 88dfb80299..640561238a 100644
--- a/tests/image/editorGd.php
+++ b/tests/image/editorGd.php
@@ -17,8 +17,6 @@ class Tests_Image_Editor_GD extends WP_Image_UnitTestCase {
 		require_once ABSPATH . WPINC . '/class-wp-image-editor.php';
 		require_once ABSPATH . WPINC . '/class-wp-image-editor-gd.php';
 
-		add_filter( 'image_editor_output_format', '__return_empty_array' );
-
 		// This needs to come after the mock image editor class is loaded.
 		parent::set_up();
 	}
@@ -32,8 +30,6 @@ class Tests_Image_Editor_GD extends WP_Image_UnitTestCase {
 
 		$this->remove_added_uploads();
 
-		remove_filter( 'image_editor_output_format', '__return_empty_array' );
-
 		parent::tear_down();
 	}
 
@@ -56,7 +52,7 @@ class Tests_Image_Editor_GD extends WP_Image_UnitTestCase {
 	}
 
 	/**
-	 * Test resizing an image, not using crop
+	 * Tests resizing an image, not using crop.
 	 *
 	 * @requires function imagejpeg
 	 */
@@ -78,7 +74,7 @@ class Tests_Image_Editor_GD extends WP_Image_UnitTestCase {
 	}
 
 	/**
-	 * Test multi_resize with single image resize and no crop
+	 * Tests multi_resize() with single image resize and no crop.
 	 *
 	 * @requires function imagejpeg
 	 */
@@ -120,7 +116,7 @@ class Tests_Image_Editor_GD extends WP_Image_UnitTestCase {
 	}
 
 	/**
-	 * Ensure multi_resize doesn't create an image when
+	 * Tests that multi_resize() does not create an image when
 	 * both height and weight are missing, null, or 0.
 	 *
 	 * @ticket 26823
@@ -189,7 +185,7 @@ class Tests_Image_Editor_GD extends WP_Image_UnitTestCase {
 	}
 
 	/**
-	 * Test multi_resize with multiple sizes
+	 * Tests multi_resize() with multiple sizes.
 	 *
 	 * @ticket 26823
 	 * @requires function imagejpeg
@@ -202,7 +198,7 @@ class Tests_Image_Editor_GD extends WP_Image_UnitTestCase {
 
 		$sizes_array = array(
 
-			/**
+			/*
 			 * #0 - 10x10 resize, no cropping.
 			 * By aspect, should be 10x6 output.
 			 */
@@ -212,7 +208,7 @@ class Tests_Image_Editor_GD extends WP_Image_UnitTestCase {
 				'crop'   => false,
 			),
 
-			/**
+			/*
 			 * #1 - 75x50 resize, with cropping.
 			 * Output dimensions should be 75x50
 			 */
@@ -222,7 +218,7 @@ class Tests_Image_Editor_GD extends WP_Image_UnitTestCase {
 				'crop'   => true,
 			),
 
-			/**
+			/*
 			 * #2 - 20 pixel max height, no cropping.
 			 * By aspect, should be 30x20 output.
 			 */
@@ -232,7 +228,7 @@ class Tests_Image_Editor_GD extends WP_Image_UnitTestCase {
 				'crop'   => false,
 			),
 
-			/**
+			/*
 			 * #3 - 45 pixel max height, with cropping.
 			 * By aspect, should be 45x400 output.
 			 */
@@ -242,7 +238,7 @@ class Tests_Image_Editor_GD extends WP_Image_UnitTestCase {
 				'crop'   => true,
 			),
 
-			/**
+			/*
 			 * #4 - 50 pixel max width, no cropping.
 			 * By aspect, should be 50x33 output.
 			 */
@@ -250,7 +246,7 @@ class Tests_Image_Editor_GD extends WP_Image_UnitTestCase {
 				'width' => 50,
 			),
 
-			/**
+			/*
 			 * #5 - 55 pixel max width, no cropping, null height
 			 * By aspect, should be 55x36 output.
 			 */
@@ -259,7 +255,7 @@ class Tests_Image_Editor_GD extends WP_Image_UnitTestCase {
 				'height' => null,
 			),
 
-			/**
+			/*
 			 * #6 - 55 pixel max height, no cropping, no width specified.
 			 * By aspect, should be 82x55 output.
 			 */
@@ -267,7 +263,7 @@ class Tests_Image_Editor_GD extends WP_Image_UnitTestCase {
 				'height' => 55,
 			),
 
-			/**
+			/*
 			 * #7 - 60 pixel max height, no cropping, null width.
 			 * By aspect, should be 90x60 output.
 			 */
@@ -276,7 +272,7 @@ class Tests_Image_Editor_GD extends WP_Image_UnitTestCase {
 				'height' => 60,
 			),
 
-			/**
+			/*
 			 * #8 - 70 pixel max height, no cropping, negative width.
 			 * By aspect, should be 105x70 output.
 			 */
@@ -285,7 +281,7 @@ class Tests_Image_Editor_GD extends WP_Image_UnitTestCase {
 				'height' => 70,
 			),
 
-			/**
+			/*
 			 * #9 - 200 pixel max width, no cropping, negative height.
 			 * By aspect, should be 200x133 output.
 			 */
@@ -406,7 +402,7 @@ class Tests_Image_Editor_GD extends WP_Image_UnitTestCase {
 	}
 
 	/**
-	 * Test resizing an image with cropping
+	 * Tests resizing an image with cropping.
 	 */
 	public function test_resize_and_crop() {
 		$file = DIR_TESTDATA . '/images/waffles.jpg';
@@ -426,7 +422,7 @@ class Tests_Image_Editor_GD extends WP_Image_UnitTestCase {
 	}
 
 	/**
-	 * Test cropping an image.
+	 * Tests cropping an image.
 	 *
 	 * @ticket 51937
 	 *
@@ -483,7 +479,7 @@ class Tests_Image_Editor_GD extends WP_Image_UnitTestCase {
 	}
 
 	/**
-	 * Test should return WP_Error when dimensions are not integer or are <= 0.
+	 * Tests that crop() returns WP_Error when dimensions are not integer or are <= 0.
 	 *
 	 * @ticket 51937
 	 *
@@ -549,7 +545,7 @@ class Tests_Image_Editor_GD extends WP_Image_UnitTestCase {
 	}
 
 	/**
-	 * Test rotating an image 180 deg
+	 * Tests rotating an image 180 deg.
 	 */
 	public function test_rotate() {
 		$file = DIR_TESTDATA . '/images/gradient-square.jpg';
@@ -568,7 +564,7 @@ class Tests_Image_Editor_GD extends WP_Image_UnitTestCase {
 	}
 
 	/**
-	 * Test flipping an image
+	 * Tests flipping an image.
 	 */
 	public function test_flip() {
 		$file = DIR_TESTDATA . '/images/gradient-square.jpg';
@@ -587,26 +583,23 @@ class Tests_Image_Editor_GD extends WP_Image_UnitTestCase {
 	}
 
 	/**
-	 * Test the image created with WP_Image_Editor_GD preserves alpha when resizing
+	 * Tests that an image created with WP_Image_Editor_GD preserves alpha with no resizing.
 	 *
 	 * @ticket 23039
 	 */
-	public function test_image_preserves_alpha_on_resize() {
+	public function test_image_preserves_alpha() {
 		if ( ! ( imagetypes() & IMG_PNG ) ) {
 			$this->fail( 'This test requires PHP to be compiled with PNG support.' );
 		}
 
 		$file = DIR_TESTDATA . '/images/transparent.png';
 
-		$editor = wp_get_image_editor( $file );
-
-		$this->assertNotWPError( $editor );
+		$gd_image_editor = new WP_Image_Editor_GD( $file );
+		$gd_image_editor->load();
 
-		$editor->load();
-		$editor->resize( 5, 5 );
 		$save_to_file = tempnam( get_temp_dir(), '' ) . '.png';
 
-		$editor->save( $save_to_file );
+		$gd_image_editor->save( $save_to_file );
 
 		$this->assertImageAlphaAtPointGD( $save_to_file, array( 0, 0 ), 127 );
 
@@ -614,26 +607,24 @@ class Tests_Image_Editor_GD extends WP_Image_UnitTestCase {
 	}
 
 	/**
-	 * Test the image created with WP_Image_Editor_GD preserves alpha with no resizing etc
+	 * Tests that an image created with WP_Image_Editor_GD preserves alpha when resizing.
 	 *
 	 * @ticket 23039
 	 */
-	public function test_image_preserves_alpha() {
+	public function test_image_preserves_alpha_on_resize() {
 		if ( ! ( imagetypes() & IMG_PNG ) ) {
 			$this->fail( 'This test requires PHP to be compiled with PNG support.' );
 		}
 
 		$file = DIR_TESTDATA . '/images/transparent.png';
 
-		$editor = wp_get_image_editor( $file );
-
-		$this->assertNotWPError( $editor );
-
-		$editor->load();
+		$gd_image_editor = new WP_Image_Editor_GD( $file );
+		$gd_image_editor->load();
 
+		$gd_image_editor->resize( 5, 5 );
 		$save_to_file = tempnam( get_temp_dir(), '' ) . '.png';
 
-		$editor->save( $save_to_file );
+		$gd_image_editor->save( $save_to_file );
 
 		$this->assertImageAlphaAtPointGD( $save_to_file, array( 0, 0 ), 127 );
 
@@ -654,27 +645,29 @@ class Tests_Image_Editor_GD extends WP_Image_UnitTestCase {
 		$rgb      = imagecolorat( $image, 0, 0 );
 		$expected = imagecolorsforindex( $image, $rgb );
 
-		$editor = new WP_Image_Editor_GD( $file );
-				$editor->load();
-				$editor->rotate( 180 );
-				$save_to_file = tempnam( get_temp_dir(), '' ) . '.png';
+		$gd_image_editor = new WP_Image_Editor_GD( $file );
+		$gd_image_editor->load();
+
+		$gd_image_editor->rotate( 180 );
+		$save_to_file = tempnam( get_temp_dir(), '' ) . '.png';
 
-				$editor->save( $save_to_file );
+		$gd_image_editor->save( $save_to_file );
 
-				$this->assertImageAlphaAtPointGD( $save_to_file, array( 0, 0 ), $expected['alpha'] );
-				unlink( $save_to_file );
+		$this->assertImageAlphaAtPointGD( $save_to_file, array( 0, 0 ), $expected['alpha'] );
 
+		unlink( $save_to_file );
 	}
 
 	/**
-	 * Test WP_Image_Editor_GD handles extension-less images
+	 * Tests that WP_Image_Editor_GD handles extensionless images.
 	 *
 	 * @ticket 39195
 	 */
 	public function test_image_non_existent_extension() {
-		$image_editor = new WP_Image_Editor_GD( DIR_TESTDATA . '/images/test-image-no-extension' );
-		$result       = $image_editor->load();
+		$gd_image_editor = new WP_Image_Editor_GD( DIR_TESTDATA . '/images/test-image-no-extension' );
+
+		$loaded = $gd_image_editor->load();
 
-		$this->assertTrue( $result );
+		$this->assertTrue( $loaded );
 	}
 }
diff --git a/tests/image/editorImagick.php b/tests/image/editorImagick.php
index a6698ec22c..a8db8a3210 100644
--- a/tests/image/editorImagick.php
+++ b/tests/image/editorImagick.php
@@ -18,8 +18,6 @@ class Tests_Image_Editor_Imagick extends WP_Image_UnitTestCase {
 		require_once ABSPATH . WPINC . '/class-wp-image-editor-imagick.php';
 		require_once DIR_TESTROOT . '/includes/class-wp-test-stream.php';
 
-		add_filter( 'image_editor_output_format', '__return_empty_array' );
-
 		// This needs to come after the mock image editor class is loaded.
 		parent::set_up();
 	}
@@ -33,13 +31,11 @@ class Tests_Image_Editor_Imagick extends WP_Image_UnitTestCase {
 
 		$this->remove_added_uploads();
 
-		remove_filter( 'image_editor_output_format', '__return_empty_array' );
-
 		parent::tear_down();
 	}
 
 	/**
-	 * Check support for ImageMagick compatible mime types.
+	 * Tests support for ImageMagick compatible mime types.
 	 */
 	public function test_supports_mime_type() {
 		$imagick_image_editor = new WP_Image_Editor_Imagick( null );
@@ -50,7 +46,7 @@ class Tests_Image_Editor_Imagick extends WP_Image_UnitTestCase {
 	}
 
 	/**
-	 * Test resizing an image, not using crop
+	 * Tests resizing an image, not using crop.
 	 */
 	public function test_resize() {
 		$file = DIR_TESTDATA . '/images/waffles.jpg';
@@ -70,7 +66,7 @@ class Tests_Image_Editor_Imagick extends WP_Image_UnitTestCase {
 	}
 
 	/**
-	 * Test multi_resize with single image resize and no crop
+	 * Tests multi_resize() with single image resize and no crop.
 	 */
 	public function test_single_multi_resize() {
 		$file = DIR_TESTDATA . '/images/waffles.jpg';
@@ -110,7 +106,7 @@ class Tests_Image_Editor_Imagick extends WP_Image_UnitTestCase {
 	}
 
 	/**
-	 * Ensure multi_resize doesn't create an image when
+	 * Tests that multi_resize() does not create an image when
 	 * both height and weight are missing, null, or 0.
 	 *
 	 * @ticket 26823
@@ -179,7 +175,7 @@ class Tests_Image_Editor_Imagick extends WP_Image_UnitTestCase {
 	}
 
 	/**
-	 * Test multi_resize with multiple sizes
+	 * Tests multi_resize() with multiple sizes.
 	 *
 	 * @ticket 26823
 	 */
@@ -191,7 +187,7 @@ class Tests_Image_Editor_Imagick extends WP_Image_UnitTestCase {
 
 		$sizes_array = array(
 
-			/**
+			/*
 			 * #0 - 10x10 resize, no cropping.
 			 * By aspect, should be 10x6 output.
 			 */
@@ -201,7 +197,7 @@ class Tests_Image_Editor_Imagick extends WP_Image_UnitTestCase {
 				'crop'   => false,
 			),
 
-			/**
+			/*
 			 * #1 - 75x50 resize, with cropping.
 			 * Output dimensions should be 75x50
 			 */
@@ -211,7 +207,7 @@ class Tests_Image_Editor_Imagick extends WP_Image_UnitTestCase {
 				'crop'   => true,
 			),
 
-			/**
+			/*
 			 * #2 - 20 pixel max height, no cropping.
 			 * By aspect, should be 30x20 output.
 			 */
@@ -221,7 +217,7 @@ class Tests_Image_Editor_Imagick extends WP_Image_UnitTestCase {
 				'crop'   => false,
 			),
 
-			/**
+			/*
 			 * #3 - 45 pixel max height, with cropping.
 			 * By aspect, should be 45x400 output.
 			 */
@@ -231,7 +227,7 @@ class Tests_Image_Editor_Imagick extends WP_Image_UnitTestCase {
 				'crop'   => true,
 			),
 
-			/**
+			/*
 			 * #4 - 50 pixel max width, no cropping.
 			 * By aspect, should be 50x33 output.
 			 */
@@ -239,7 +235,7 @@ class Tests_Image_Editor_Imagick extends WP_Image_UnitTestCase {
 				'width' => 50,
 			),
 
-			/**
+			/*
 			 * #5 - 55 pixel max width, no cropping, null height
 			 * By aspect, should be 55x36 output.
 			 */
@@ -248,7 +244,7 @@ class Tests_Image_Editor_Imagick extends WP_Image_UnitTestCase {
 				'height' => null,
 			),
 
-			/**
+			/*
 			 * #6 - 55 pixel max height, no cropping, no width specified.
 			 * By aspect, should be 82x55 output.
 			 */
@@ -256,7 +252,7 @@ class Tests_Image_Editor_Imagick extends WP_Image_UnitTestCase {
 				'height' => 55,
 			),
 
-			/**
+			/*
 			 * #7 - 60 pixel max height, no cropping, null width.
 			 * By aspect, should be 90x60 output.
 			 */
@@ -265,7 +261,7 @@ class Tests_Image_Editor_Imagick extends WP_Image_UnitTestCase {
 				'height' => 60,
 			),
 
-			/**
+			/*
 			 * #8 - 70 pixel max height, no cropping, negative width.
 			 * By aspect, should be 105x70 output.
 			 */
@@ -274,7 +270,7 @@ class Tests_Image_Editor_Imagick extends WP_Image_UnitTestCase {
 				'height' => 70,
 			),
 
-			/**
+			/*
 			 * #9 - 200 pixel max width, no cropping, negative height.
 			 * By aspect, should be 200x133 output.
 			 */
@@ -395,7 +391,7 @@ class Tests_Image_Editor_Imagick extends WP_Image_UnitTestCase {
 	}
 
 	/**
-	 * Test resizing an image with cropping
+	 * Tests resizing an image with cropping.
 	 */
 	public function test_resize_and_crop() {
 		$file = DIR_TESTDATA . '/images/waffles.jpg';
@@ -415,7 +411,7 @@ class Tests_Image_Editor_Imagick extends WP_Image_UnitTestCase {
 	}
 
 	/**
-	 * Test cropping an image
+	 * Tests cropping an image.
 	 */
 	public function test_crop() {
 		$file = DIR_TESTDATA . '/images/gradient-square.jpg';
@@ -435,7 +431,7 @@ class Tests_Image_Editor_Imagick extends WP_Image_UnitTestCase {
 	}
 
 	/**
-	 * Test rotating an image 180 deg
+	 * Tests rotating an image 180 deg.
 	 */
 	public function test_rotate() {
 		$file = DIR_TESTDATA . '/images/one-blue-pixel-100x100.png';
@@ -454,7 +450,7 @@ class Tests_Image_Editor_Imagick extends WP_Image_UnitTestCase {
 	}
 
 	/**
-	 * Test flipping an image
+	 * Tests flipping an image.
 	 */
 	public function test_flip() {
 		$file = DIR_TESTDATA . '/images/one-blue-pixel-100x100.png';
@@ -473,19 +469,19 @@ class Tests_Image_Editor_Imagick extends WP_Image_UnitTestCase {
 	}
 
 	/**
-	 * Test the image created with WP_Image_Editor_Imagick preserves alpha when resizing
+	 * Tests that an image created with WP_Image_Editor_Imagick preserves alpha with no resizing.
 	 *
 	 * @ticket 24871
 	 */
-	public function test_image_preserves_alpha_on_resize() {
+	public function test_image_preserves_alpha() {
 		$file = DIR_TESTDATA . '/images/transparent.png';
 
-		$editor = new WP_Image_Editor_Imagick( $file );
-		$editor->load();
-		$editor->resize( 5, 5 );
+		$imagick_image_editor = new WP_Image_Editor_Imagick( $file );
+		$imagick_image_editor->load();
+
 		$save_to_file = tempnam( get_temp_dir(), '' ) . '.png';
 
-		$editor->save( $save_to_file );
+		$imagick_image_editor->save( $save_to_file );
 
 		$im       = new Imagick( $save_to_file );
 		$pixel    = $im->getImagePixelColor( 0, 0 );
@@ -497,19 +493,20 @@ class Tests_Image_Editor_Imagick extends WP_Image_UnitTestCase {
 	}
 
 	/**
-	 * Test the image created with WP_Image_Editor_Imagick preserves alpha with no resizing etc
+	 * Tests that an image created with WP_Image_Editor_Imagick preserves alpha when resizing.
 	 *
 	 * @ticket 24871
 	 */
-	public function test_image_preserves_alpha() {
+	public function test_image_preserves_alpha_on_resize() {
 		$file = DIR_TESTDATA . '/images/transparent.png';
 
-		$editor = new WP_Image_Editor_Imagick( $file );
-		$editor->load();
+		$imagick_image_editor = new WP_Image_Editor_Imagick( $file );
+		$imagick_image_editor->load();
 
+		$imagick_image_editor->resize( 5, 5 );
 		$save_to_file = tempnam( get_temp_dir(), '' ) . '.png';
 
-		$editor->save( $save_to_file );
+		$imagick_image_editor->save( $save_to_file );
 
 		$im       = new Imagick( $save_to_file );
 		$pixel    = $im->getImagePixelColor( 0, 0 );
@@ -529,33 +526,37 @@ class Tests_Image_Editor_Imagick extends WP_Image_UnitTestCase {
 		$pre_rotate_editor = new Imagick( $file );
 		$pre_rotate_pixel  = $pre_rotate_editor->getImagePixelColor( 0, 0 );
 		$pre_rotate_alpha  = $pre_rotate_pixel->getColorValue( imagick::COLOR_ALPHA );
-		$save_to_file      = tempnam( get_temp_dir(), '' ) . '.png';
+
+		$save_to_file = tempnam( get_temp_dir(), '' ) . '.png';
 		$pre_rotate_editor->writeImage( $save_to_file );
 		$pre_rotate_editor->destroy();
 
-		$image_editor = new WP_Image_Editor_Imagick( $save_to_file );
-		$image_editor->load();
-		$image_editor->rotate( 180 );
-		$image_editor->save( $save_to_file );
+		$imagick_image_editor = new WP_Image_Editor_Imagick( $save_to_file );
+		$imagick_image_editor->load();
+
+		$imagick_image_editor->rotate( 180 );
+		$imagick_image_editor->save( $save_to_file );
 
 		$this->assertImageAlphaAtPointImagick( $save_to_file, array( 0, 0 ), $pre_rotate_alpha );
+
 		unlink( $save_to_file );
 	}
 
 	/**
-	 * Test WP_Image_Editor_Imagick handles extension-less images
+	 * Tests that WP_Image_Editor_Imagick handles extensionless images.
 	 *
 	 * @ticket 39195
 	 */
 	public function test_image_non_existent_extension() {
-		$image_editor = new WP_Image_Editor_Imagick( DIR_TESTDATA . '/images/test-image-no-extension' );
-		$result       = $image_editor->load();
+		$imagick_image_editor = new WP_Image_Editor_Imagick( DIR_TESTDATA . '/images/test-image-no-extension' );
+
+		$loaded = $imagick_image_editor->load();
 
-		$this->assertTrue( $result );
+		$this->assertTrue( $loaded );
 	}
 
 	/**
-	 * Test resetting Exif orientation data on rotate
+	 * Tests resetting Exif orientation data on rotate.
 	 *
 	 * @ticket 37140
 	 * @requires function exif_read_data
@@ -568,24 +569,26 @@ class Tests_Image_Editor_Imagick extends WP_Image_UnitTestCase {
 		$this->assertSame( 3, (int) $data['orientation'], 'Orientation value read from does not match image file Exif data: ' . $file );
 
 		$temp_file = wp_tempnam( $file );
-		$image     = wp_get_image_editor( $file );
+
+		$imagick_image_editor = new WP_Image_Editor_Imagick( $file );
+		$imagick_image_editor->load();
 
 		// Test a value that would not lead back to 1, as WP is resetting the value to 1 manually.
-		$image->rotate( 90 );
-		$ret = $image->save( $temp_file, 'image/jpeg' );
+		$imagick_image_editor->rotate( 90 );
+		$saved = $imagick_image_editor->save( $temp_file, 'image/jpeg' );
 
-		$data = wp_read_image_metadata( $ret['path'] );
-
-		// Make sure the image is no longer in The Upside Down Exif orientation.
-		$this->assertSame( 1, (int) $data['orientation'], 'Orientation Exif data was not updated after rotating image: ' . $file );
+		$data = wp_read_image_metadata( $saved['path'] );
 
 		// Remove both the generated file ending in .tmp and tmp.jpg due to wp_tempnam().
 		unlink( $temp_file );
-		unlink( $ret['path'] );
+		unlink( $saved['path'] );
+
+		// Make sure the image is no longer in The Upside Down Exif orientation.
+		$this->assertSame( 1, (int) $data['orientation'], 'Orientation Exif data was not updated after rotating image: ' . $file );
 	}
 
 	/**
-	 * Test that images can be loaded and written over streams
+	 * Tests that images can be loaded and written over streams.
 	 */
 	public function test_streams() {
 		stream_wrapper_register( 'wptest', 'WP_Test_Stream' );
@@ -598,20 +601,20 @@ class Tests_Image_Editor_Imagick extends WP_Image_UnitTestCase {
 		$file                 = 'wptest://Tests_Image_Editor_Imagick/read.jpg';
 		$imagick_image_editor = new WP_Image_Editor_Imagick( $file );
 
-		$ret = $imagick_image_editor->load();
-		$this->assertNotWPError( $ret );
+		$loaded = $imagick_image_editor->load();
+		$this->assertNotWPError( $loaded );
 
 		$temp_file = 'wptest://Tests_Image_Editor_Imagick/write.jpg';
 
-		$ret = $imagick_image_editor->save( $temp_file );
-		$this->assertNotWPError( $ret );
-
-		$this->assertSame( $temp_file, $ret['path'] );
+		$saved = $imagick_image_editor->save( $temp_file );
 
-		if ( $temp_file !== $ret['path'] ) {
-			unlink( $ret['path'] );
+		if ( $temp_file !== $saved['path'] ) {
+			unlink( $saved['path'] );
 		}
 		unlink( $temp_file );
+
+		$this->assertNotWPError( $saved );
+		$this->assertSame( $temp_file, $saved['path'] );
 	}
 
 	/**
@@ -620,20 +623,22 @@ class Tests_Image_Editor_Imagick extends WP_Image_UnitTestCase {
 	public function test_directory_creation() {
 		$file      = realpath( DIR_TESTDATA ) . '/images/a2-small.jpg';
 		$directory = realpath( DIR_TESTDATA ) . '/images/nonexistent-directory';
-		$editor    = new WP_Image_Editor_Imagick( $file );
+
+		$imagick_image_editor = new WP_Image_Editor_Imagick( $file );
 
 		$this->assertFileDoesNotExist( $directory );
 
-		$loaded = $editor->load();
+		$loaded = $imagick_image_editor->load();
 		$this->assertNotWPError( $loaded );
 
-		$resized = $editor->resize( 100, 100, true );
+		$resized = $imagick_image_editor->resize( 100, 100, true );
 		$this->assertNotWPError( $resized );
 
-		$saved = $editor->save( $directory . '/a2-small-cropped.jpg' );
-		$this->assertNotWPError( $saved );
+		$saved = $imagick_image_editor->save( $directory . '/a2-small-cropped.jpg' );
 
 		unlink( $directory . '/a2-small-cropped.jpg' );
 		rmdir( $directory );
+
+		$this->assertNotWPError( $saved );
 	}
 }
diff --git a/tests/image/functions.php b/tests/image/functions.php
index 98b2608c87..82988c5f6b 100644
--- a/tests/image/functions.php
+++ b/tests/image/functions.php
@@ -25,16 +25,6 @@ class Tests_Image_Functions extends WP_UnitTestCase {
 		foreach ( glob( $folder ) as $file ) {
 			unlink( $file );
 		}
-
-		add_filter( 'image_editor_output_format', '__return_empty_array' );
-	}
-
-	/**
-	 * Tear down the class.
-	 */
-	public function tear_down() {
-		remove_filter( 'image_editor_output_format', '__return_empty_array' );
-		parent::tear_down();
 	}
 
 	/**
@@ -293,8 +283,8 @@ class Tests_Image_Functions extends WP_UnitTestCase {
 		$ret  = wp_save_image_file( $file, $img, $mime_type, 1 );
 
 		// Make assertions.
-		$this->assertNotEmpty( $ret, 'Image failed to save - "empty" response returned.' );
 		$this->assertNotWPError( $ret, 'Image failed to save - WP_Error returned.' );
+		$this->assertIsArray( $ret, 'Image failed to save - non-array response returned.' );
 		$this->assertSame( $mime_type, $this->get_mime_type( $ret['path'] ), 'Mime type of the saved image does not match.' );
 
 		// Clean up.
@@ -337,6 +327,29 @@ class Tests_Image_Functions extends WP_UnitTestCase {
 		return $data;
 	}
 
+	/**
+	 * Tests that wp_save_image_file() throws a deprecated argument notice when passed a GD resource.
+	 *
+	 * @ticket 6821
+	 * @expectedDeprecated wp_save_image_file
+	 * @requires function imagejpeg
+	 *
+	 * @covers ::wp_save_image_file
+	 */
+	public function test_wp_save_image_file_deprecated_argument_with_gd_resource() {
+		require_once ABSPATH . 'wp-admin/includes/image-edit.php';
+
+		// Call wp_save_image_file().
+		$file = wp_tempnam();
+		$img  = imagecreatefromjpeg( DIR_TESTDATA . '/images/canola.jpg' );
+		$ret  = wp_save_image_file( $file, $img, 'image/jpeg', 1 );
+
+		imagedestroy( $img );
+		unlink( $file );
+
+		$this->assertTrue( $ret, 'Image failed to save.' );
+	}
+
 	/**
 	 * Tests that a passed mime type overrides the extension in the filename when saving an image.
 	 *
@@ -361,8 +374,8 @@ class Tests_Image_Functions extends WP_UnitTestCase {
 		$ret       = $img->save( $file, $mime_type );
 
 		// Make assertions.
-		$this->assertNotEmpty( $ret, 'Image failed to save - "empty" response returned.' );
 		$this->assertNotWPError( $ret, 'Image failed to save - WP_Error returned.' );
+		$this->assertIsArray( $ret, 'Image failed to save - non-array response returned.' );
 		$this->assertSame( $mime_type, $this->get_mime_type( $ret['path'] ), 'Mime type of the saved image did not override file name.' );
 
 		// Clean up.
@@ -407,8 +420,8 @@ class Tests_Image_Functions extends WP_UnitTestCase {
 		$ret  = $img->save( trailingslashit( $temp ) . $file );
 
 		// Make assertions.
-		$this->assertNotEmpty( $ret, 'Image failed to save - "empty" response returned.' );
 		$this->assertNotWPError( $ret, 'Image failed to save - WP Error returned.' );
+		$this->assertIsArray( $ret, 'Image failed to save - non-array response returned.' );
 		$this->assertSame( $mime_type, $this->get_mime_type( $ret['path'] ), 'Mime type of the saved image was not inferred correctly.' );
 
 		// Clean up.
@@ -666,7 +679,8 @@ class Tests_Image_Functions extends WP_UnitTestCase {
 			)
 		);
 
-		$this->assertNotEmpty( $attachment_id );
+		$this->assertNotWPError( $attachment_id, 'Could not create attachment - WP_Error returned.' );
+		$this->assertIsInt( $attachment_id, 'Could not create attachment - non-integer response returned.' );
 
 		$temp_dir = get_temp_dir();
 
@@ -743,7 +757,8 @@ class Tests_Image_Functions extends WP_UnitTestCase {
 			)
 		);
 
-		$this->assertNotEmpty( $attachment_id );
+		$this->assertNotWPError( $attachment_id, 'Could not create attachment - WP_Error returned.' );
+		$this->assertIsInt( $attachment_id, 'Could not create attachment - non-integer response returned.' );
 
 		$temp_dir = get_temp_dir();
 
@@ -816,7 +831,8 @@ class Tests_Image_Functions extends WP_UnitTestCase {
 			)
 		);
 
-		$this->assertNotEmpty( $attachment_id );
+		$this->assertNotWPError( $attachment_id, 'Could not create attachment - WP_Error returned.' );
+		$this->assertIsInt( $attachment_id, 'Could not create attachment - non-integer response returned.' );
 
 		add_image_size( 'test-size', 100, 100 );
 		add_filter( 'fallback_intermediate_image_sizes', array( $this, 'filter_fallback_intermediate_image_sizes' ), 10, 2 );
diff --git a/tests/image/intermediateSize.php b/tests/image/intermediateSize.php
index deb72c11e0..830359427a 100644
--- a/tests/image/intermediateSize.php
+++ b/tests/image/intermediateSize.php
@@ -5,15 +5,6 @@
  * @group upload
  */
 class Tests_Image_Intermediate_Size extends WP_UnitTestCase {
-	/**
-	 * Set up the test fixture.
-	 */
-	public function set_up() {
-		add_filter( 'image_editor_output_format', '__return_empty_array' );
-
-		parent::set_up();
-	}
-
 	public function tear_down() {
 		$this->remove_added_uploads();
 
@@ -21,9 +12,6 @@ class Tests_Image_Intermediate_Size extends WP_UnitTestCase {
 		remove_image_size( 'false-height' );
 		remove_image_size( 'false-width' );
 		remove_image_size( 'off-by-one' );
-
-		remove_filter( 'image_editor_output_format', '__return_empty_array' );
-
 		parent::tear_down();
 	}
 
diff --git a/tests/image/resize.php b/tests/image/resize.php
index 8c448c842c..5b302ce295 100644
--- a/tests/image/resize.php
+++ b/tests/image/resize.php
@@ -14,15 +14,6 @@ abstract class WP_Tests_Image_Resize_UnitTestCase extends WP_Image_UnitTestCase
 		parent::set_up();
 
 		add_filter( 'wp_image_editors', array( $this, 'wp_image_editors' ) );
-		add_filter( 'image_editor_output_format', '__return_empty_array' );
-	}
-
-	/**
-	 * Tear down the class.
-	 */
-	public function tear_down() {
-		remove_filter( 'image_editor_output_format', '__return_empty_array' );
-		parent::tear_down();
 	}
 
 	public function wp_image_editors() {
diff --git a/tests/import/import.php b/tests/import/import.php
index 0f4412fe11..2162824e96 100644
--- a/tests/import/import.php
+++ b/tests/import/import.php
@@ -62,8 +62,8 @@ class Tests_Import_Import extends WP_Import_UnitTestCase {
 		$this->assertSame( 'author@example.org', $author->user_email );
 
 		// Check that terms were imported correctly.
-		$this->assertEquals( 30, wp_count_terms( array( 'taxonomy' => 'category' ) ) );
-		$this->assertEquals( 3, wp_count_terms( array( 'taxonomy' => 'post_tag' ) ) );
+		$this->assertSame( '30', wp_count_terms( array( 'taxonomy' => 'category' ) ) );
+		$this->assertSame( '3', wp_count_terms( array( 'taxonomy' => 'post_tag' ) ) );
 		$foo = get_term_by( 'slug', 'foo', 'category' );
 		$this->assertSame( 0, $foo->parent );
 		$bar     = get_term_by( 'slug', 'bar', 'category' );
@@ -72,11 +72,11 @@ class Tests_Import_Import extends WP_Import_UnitTestCase {
 
 		// Check that posts/pages were imported correctly.
 		$post_count = wp_count_posts( 'post' );
-		$this->assertEquals( 5, $post_count->publish );
-		$this->assertEquals( 1, $post_count->private );
+		$this->assertSame( '5', $post_count->publish );
+		$this->assertSame( '1', $post_count->private );
 		$page_count = wp_count_posts( 'page' );
-		$this->assertEquals( 4, $page_count->publish );
-		$this->assertEquals( 1, $page_count->draft );
+		$this->assertSame( '4', $page_count->publish );
+		$this->assertSame( '1', $page_count->draft );
 		$comment_count = wp_count_comments();
 		$this->assertSame( 1, $comment_count->total_comments );
 
@@ -230,8 +230,8 @@ class Tests_Import_Import extends WP_Import_UnitTestCase {
 		$this->assertSame( 'author', $author->user_login );
 		$this->assertSame( 'author@example.org', $author->user_email );
 
-		$this->assertEquals( 30, wp_count_terms( array( 'taxonomy' => 'category' ) ) );
-		$this->assertEquals( 3, wp_count_terms( array( 'taxonomy' => 'post_tag' ) ) );
+		$this->assertSame( '30', wp_count_terms( array( 'taxonomy' => 'category' ) ) );
+		$this->assertSame( '3', wp_count_terms( array( 'taxonomy' => 'post_tag' ) ) );
 		$foo = get_term_by( 'slug', 'foo', 'category' );
 		$this->assertSame( 0, $foo->parent );
 		$bar     = get_term_by( 'slug', 'bar', 'category' );
@@ -239,11 +239,11 @@ class Tests_Import_Import extends WP_Import_UnitTestCase {
 		$this->assertSame( $bar->term_id, $foo_bar->parent );
 
 		$post_count = wp_count_posts( 'post' );
-		$this->assertEquals( 5, $post_count->publish );
-		$this->assertEquals( 1, $post_count->private );
+		$this->assertSame( '5', $post_count->publish );
+		$this->assertSame( '1', $post_count->private );
 		$page_count = wp_count_posts( 'page' );
-		$this->assertEquals( 4, $page_count->publish );
-		$this->assertEquals( 1, $page_count->draft );
+		$this->assertSame( '4', $page_count->publish );
+		$this->assertSame( '1', $page_count->draft );
 		$comment_count = wp_count_comments();
 		$this->assertSame( 1, $comment_count->total_comments );
 	}
diff --git a/tests/import/parser.php b/tests/import/parser.php
index 76dc3c1972..f302cefa29 100644
--- a/tests/import/parser.php
+++ b/tests/import/parser.php
@@ -33,7 +33,7 @@ class Tests_Import_Parser extends WP_Import_UnitTestCase {
 
 		// Regex based parser cannot detect malformed XML.
 		foreach ( array( 'WXR_Parser_SimpleXML', 'WXR_Parser_XML' ) as $p ) {
-			$parser = new $p;
+			$parser = new $p();
 			$result = $parser->parse( $file );
 			$this->assertWPError( $result );
 			$this->assertSame( 'There was an error when reading this WXR file', $result->get_error_message() );
@@ -51,7 +51,7 @@ class Tests_Import_Parser extends WP_Import_UnitTestCase {
 
 		foreach ( array( 'WXR_Parser_SimpleXML', 'WXR_Parser_XML', 'WXR_Parser_Regex' ) as $p ) {
 			foreach ( array( $f1, $f2 ) as $file ) {
-				$parser = new $p;
+				$parser = new $p();
 				$result = $parser->parse( $file );
 				$this->assertWPError( $result );
 				$this->assertSame( 'This does not appear to be a WXR file, missing/invalid WXR version number', $result->get_error_message() );
@@ -69,12 +69,12 @@ class Tests_Import_Parser extends WP_Import_UnitTestCase {
 
 		foreach ( array( 'WXR_Parser_SimpleXML', 'WXR_Parser_XML', 'WXR_Parser_Regex' ) as $p ) {
 			$message = $p . ' failed';
-			$parser  = new $p;
+			$parser  = new $p();
 			$result  = $parser->parse( $file );
 
 			$this->assertIsArray( $result, $message );
 			$this->assertSame( 'http://localhost/', $result['base_url'], $message );
-			$this->assertEquals(
+			$this->assertEqualSetsWithIndex(
 				array(
 					'author_id'           => 2,
 					'author_login'        => 'john',
@@ -86,7 +86,7 @@ class Tests_Import_Parser extends WP_Import_UnitTestCase {
 				$result['authors']['john'],
 				$message
 			);
-			$this->assertEquals(
+			$this->assertEqualSetsWithIndex(
 				array(
 					'term_id'              => 3,
 					'category_nicename'    => 'alpha',
@@ -97,7 +97,7 @@ class Tests_Import_Parser extends WP_Import_UnitTestCase {
 				$result['categories'][0],
 				$message
 			);
-			$this->assertEquals(
+			$this->assertEqualSetsWithIndex(
 				array(
 					'term_id'         => 22,
 					'tag_slug'        => 'clippable',
@@ -107,7 +107,7 @@ class Tests_Import_Parser extends WP_Import_UnitTestCase {
 				$result['tags'][0],
 				$message
 			);
-			$this->assertEquals(
+			$this->assertEqualSetsWithIndex(
 				array(
 					'term_id'          => 40,
 					'term_taxonomy'    => 'post_tax',
@@ -123,7 +123,7 @@ class Tests_Import_Parser extends WP_Import_UnitTestCase {
 			$this->assertCount( 2, $result['posts'], $message );
 			$this->assertCount( 19, $result['posts'][0], $message );
 			$this->assertCount( 18, $result['posts'][1], $message );
-			$this->assertEquals(
+			$this->assertEqualSetsWithIndex(
 				array(
 					array(
 						'name'   => 'alpha',
@@ -167,7 +167,7 @@ class Tests_Import_Parser extends WP_Import_UnitTestCase {
 
 		foreach ( array( 'WXR_Parser_SimpleXML', 'WXR_Parser_XML', 'WXR_Parser_Regex' ) as $p ) {
 			$message = $p . ' failed';
-			$parser  = new $p;
+			$parser  = new $p();
 			$result  = $parser->parse( $file );
 
 			$this->assertIsArray( $result, $message );
@@ -265,7 +265,7 @@ class Tests_Import_Parser extends WP_Import_UnitTestCase {
 
 		foreach ( array( 'WXR_Parser_SimpleXML', 'WXR_Parser_XML', 'WXR_Parser_Regex' ) as $p ) {
 			$message = 'Parser ' . $p;
-			$parser  = new $p;
+			$parser  = new $p();
 			$result  = $parser->parse( $file );
 
 			$post = $result['posts'][0];
@@ -298,7 +298,7 @@ class Tests_Import_Parser extends WP_Import_UnitTestCase {
 	public function test_unescaped_cdata_closing_sequence() {
 		$file = DIR_TESTDATA . '/export/crazy-cdata.xml';
 
-		$parser = new WXR_Parser_Regex;
+		$parser = new WXR_Parser_Regex();
 		$result = $parser->parse( $file );
 
 		$post = $result['posts'][0];
diff --git a/tests/import/postmeta.php b/tests/import/postmeta.php
index bbe10deca9..a7eb6bc9d3 100644
--- a/tests/import/postmeta.php
+++ b/tests/import/postmeta.php
@@ -76,7 +76,7 @@ class Tests_Import_Postmeta extends WP_Import_UnitTestCase {
 		$classy->tag = 'wscript';
 		$expected[]  = $classy;
 
-		$this->assertEquals( $expected, get_post_meta( 150, 'test', true ) );
+		$this->assertEqualSets( $expected, get_post_meta( 150, 'test', true ) );
 	}
 
 	/**
diff --git a/tests/kses.php b/tests/kses.php
index 7ec4a660ed..b31f477661 100644
--- a/tests/kses.php
+++ b/tests/kses.php
@@ -11,21 +11,21 @@ class Tests_Kses extends WP_UnitTestCase {
 	 * @dataProvider data_wp_filter_post_kses_address
 	 * @ticket 20210
 	 *
-	 * @param string $string        Test string for kses.
-	 * @param string $expect_string Expected result after passing through kses.
+	 * @param string $content  Test string for kses.
+	 * @param string $expected Expected result after passing through kses.
 	 */
-	public function test_wp_filter_post_kses_address( $string, $expect_string ) {
+	public function test_wp_filter_post_kses_address( $content, $expected ) {
 		global $allowedposttags;
 
-		$this->assertSame( $expect_string, wp_kses( $string, $allowedposttags ) );
+		$this->assertSame( $expected, wp_kses( $content, $allowedposttags ) );
 	}
 
 	/**
 	 * Data provider for test_wp_filter_post_kses_address.
 	 *
 	 * @return array[] Arguments {
-	 *     @type string $string        Test string for kses.
-	 *     @type string $expect_string Expected result after passing through kses.
+	 *     @type string $content  Test string for kses.
+	 *     @type string $expected Expected result after passing through kses.
 	 * }
 	 */
 	public function data_wp_filter_post_kses_address() {
@@ -45,10 +45,10 @@ class Tests_Kses extends WP_UnitTestCase {
 
 		foreach ( $attributes as $name => $values ) {
 			foreach ( (array) $values as $value ) {
-				$string        = "<address $name='$value'>1 WordPress Avenue, The Internet.</address>";
-				$expect_string = "<address $name='" . str_replace( '; ', ';', trim( $value, ';' ) ) . "'>1 WordPress Avenue, The Internet.</address>";
+				$content  = "<address $name='$value'>1 WordPress Avenue, The Internet.</address>";
+				$expected = "<address $name='" . str_replace( '; ', ';', trim( $value, ';' ) ) . "'>1 WordPress Avenue, The Internet.</address>";
 
-				$data[] = array( $string, $expect_string );
+				$data[] = array( $content, $expected );
 			}
 		}
 
@@ -59,21 +59,21 @@ class Tests_Kses extends WP_UnitTestCase {
 	 * @dataProvider data_wp_filter_post_kses_a
 	 * @ticket 20210
 	 *
-	 * @param string $string        Test string for kses.
-	 * @param string $expect_string Expected result after passing through kses.
+	 * @param string $content  Test string for kses.
+	 * @param string $expected Expected result after passing through kses.
 	 */
-	public function test_wp_filter_post_kses_a( $string, $expect_string ) {
+	public function test_wp_filter_post_kses_a( $content, $expected ) {
 		global $allowedposttags;
 
-		$this->assertSame( $expect_string, wp_kses( $string, $allowedposttags ) );
+		$this->assertSame( $expected, wp_kses( $content, $allowedposttags ) );
 	}
 
 	/**
 	 * Data provider for test_wp_filter_post_kses_a.
 	 *
 	 * @return array[] Arguments {
-	 *     @type string $string        Test string for kses.
-	 *     @type string $expect_string Expected result after passing through kses.
+	 *     @type string $content  Test string for kses.
+	 *     @type string $expected Expected result after passing through kses.
 	 * }
 	 */
 	public function data_wp_filter_post_kses_a() {
@@ -100,9 +100,9 @@ class Tests_Kses extends WP_UnitTestCase {
 				$attr          = $name;
 				$expected_attr = $name;
 			}
-			$string        = "<a $attr>I link this</a>";
-			$expect_string = "<a $expected_attr>I link this</a>";
-			$data[]        = array( $string, $expect_string );
+			$content  = "<a $attr>I link this</a>";
+			$expected = "<a $expected_attr>I link this</a>";
+			$data[]   = array( $content, $expected );
 		}
 
 		return $data;
@@ -120,8 +120,7 @@ class Tests_Kses extends WP_UnitTestCase {
 	 * @param string $expected Expected output following KSES parsing.
 	 */
 	public function test_wp_kses_video( $source, $context, $expected ) {
-		$actual = wp_kses( $source, $context );
-		$this->assertSame( $expected, $actual );
+		$this->assertSame( $expected, wp_kses( $source, $context ) );
 	}
 
 	/**
@@ -166,21 +165,21 @@ class Tests_Kses extends WP_UnitTestCase {
 	 * @dataProvider data_wp_filter_post_kses_abbr
 	 * @ticket 20210
 	 *
-	 * @param string $string        Test string for kses.
-	 * @param string $expect_string Expected result after passing through kses.
+	 * @param string $content  Test string for kses.
+	 * @param string $expected Expected result after passing through kses.
 	 */
-	public function test_wp_filter_post_kses_abbr( $string, $expect_string ) {
+	public function test_wp_filter_post_kses_abbr( $content, $expected ) {
 		global $allowedposttags;
 
-		$this->assertSame( $expect_string, wp_kses( $string, $allowedposttags ) );
+		$this->assertSame( $expected, wp_kses( $content, $allowedposttags ) );
 	}
 
 	/**
 	 * Data provider for data_wp_filter_post_kses_abbr.
 	 *
 	 * @return array[] Arguments {
-	 *     @type string $string        Test string for kses.
-	 *     @type string $expect_string Expected result after passing through kses.
+	 *     @type string $content  Test string for kses.
+	 *     @type string $expected Expected result after passing through kses.
 	 * }
 	 */
 	public function data_wp_filter_post_kses_abbr() {
@@ -194,9 +193,9 @@ class Tests_Kses extends WP_UnitTestCase {
 		$data = array();
 
 		foreach ( $attributes as $name => $value ) {
-			$string        = "<abbr $name='$value'>WP</abbr>";
-			$expect_string = "<abbr $name='" . trim( $value, ';' ) . "'>WP</abbr>";
-			$data[]        = array( $string, $expect_string );
+			$content  = "<abbr $name='$value'>WP</abbr>";
+			$expected = "<abbr $name='" . trim( $value, ';' ) . "'>WP</abbr>";
+			$data[]   = array( $content, $expected );
 		}
 
 		return $data;
@@ -535,17 +534,18 @@ EOF;
 	}
 
 	public function test_hyphenated_tag() {
-		$string                 = '<hyphenated-tag attribute="value" otherattribute="value2">Alot of hyphens.</hyphenated-tag>';
-		$custom_tags            = array(
+		$content     = '<hyphenated-tag attribute="value" otherattribute="value2">Alot of hyphens.</hyphenated-tag>';
+		$custom_tags = array(
 			'hyphenated-tag' => array(
 				'attribute' => true,
 			),
 		);
-		$expect_stripped_string = 'Alot of hyphens.';
 
-		$expect_valid_string = '<hyphenated-tag attribute="value">Alot of hyphens.</hyphenated-tag>';
-		$this->assertSame( $expect_stripped_string, wp_kses_post( $string ) );
-		$this->assertSame( $expect_valid_string, wp_kses( $string, $custom_tags ) );
+		$expect_stripped_content = 'Alot of hyphens.';
+		$expect_valid_content    = '<hyphenated-tag attribute="value">Alot of hyphens.</hyphenated-tag>';
+
+		$this->assertSame( $expect_stripped_content, wp_kses_post( $content ) );
+		$this->assertSame( $expect_valid_content, wp_kses( $content, $custom_tags ) );
 	}
 
 	/**
@@ -569,10 +569,10 @@ EOF;
 	 * @ticket 28506
 	 * @dataProvider data_ctrl_removal
 	 */
-	public function test_ctrl_removal( $input, $output ) {
+	public function test_ctrl_removal( $content, $expected ) {
 		global $allowedposttags;
 
-		return $this->assertSame( $output, wp_kses( $input, $allowedposttags ) );
+		return $this->assertSame( $expected, wp_kses( $content, $allowedposttags ) );
 	}
 
 	public function data_ctrl_removal() {
@@ -606,10 +606,10 @@ EOF;
 	 * @ticket 28699
 	 * @dataProvider data_slash_zero_removal
 	 */
-	public function test_slash_zero_removal( $input, $output ) {
+	public function test_slash_zero_removal( $content, $expected ) {
 		global $allowedposttags;
 
-		return $this->assertSame( $output, wp_kses( $input, $allowedposttags ) );
+		return $this->assertSame( $expected, wp_kses( $content, $allowedposttags ) );
 	}
 
 	public function data_slash_zero_removal() {
@@ -862,9 +862,9 @@ EOF;
 	public function test_bdo_tag_allowed() {
 		global $allowedposttags;
 
-		$input = '<p>This is <bdo dir="rtl">a BDO tag</bdo>. Weird, <bdo dir="ltr">right?</bdo></p>';
+		$content = '<p>This is <bdo dir="rtl">a BDO tag</bdo>. Weird, <bdo dir="ltr">right?</bdo></p>';
 
-		$this->assertSame( $input, wp_kses( $input, $allowedposttags ) );
+		$this->assertSame( $content, wp_kses( $content, $allowedposttags ) );
 	}
 
 	/**
@@ -873,9 +873,9 @@ EOF;
 	public function test_ruby_tag_allowed() {
 		global $allowedposttags;
 
-		$input = '<ruby>✶<rp>: </rp><rt>Star</rt><rp>, </rp><rt lang="fr">Étoile</rt><rp>.</rp></ruby>';
+		$content = '<ruby>✶<rp>: </rp><rt>Star</rt><rp>, </rp><rt lang="fr">Étoile</rt><rp>.</rp></ruby>';
 
-		$this->assertSame( $input, wp_kses( $input, $allowedposttags ) );
+		$this->assertSame( $content, wp_kses( $content, $allowedposttags ) );
 	}
 
 	/**
@@ -884,9 +884,9 @@ EOF;
 	public function test_ol_reversed_attribute_allowed() {
 		global $allowedposttags;
 
-		$input = '<ol reversed="reversed"><li>Item 1</li><li>Item 2</li><li>Item 3</li></ol>';
+		$content = '<ol reversed="reversed"><li>Item 1</li><li>Item 2</li><li>Item 3</li></ol>';
 
-		$this->assertSame( $input, wp_kses( $input, $allowedposttags ) );
+		$this->assertSame( $content, wp_kses( $content, $allowedposttags ) );
 	}
 
 	/**
@@ -1107,6 +1107,16 @@ EOF;
 				'css'      => 'background: conic-gradient(at 0% 30%, red 10%, yellow 30%, #1e90ff 50%)',
 				'expected' => 'background: conic-gradient(at 0% 30%, red 10%, yellow 30%, #1e90ff 50%)',
 			),
+			// `object-position` introduced in 5.7.1.
+			array(
+				'css'      => 'object-position: right top',
+				'expected' => 'object-position: right top',
+			),
+			// `object-fit` introduced in 6.1.
+			array(
+				'css'      => 'object-fit: cover',
+				'expected' => 'object-fit: cover',
+			),
 			// Expressions are not allowed.
 			array(
 				'css'      => 'height: expression( body.scrollTop + 50 + "px" )',
@@ -1244,8 +1254,12 @@ EOF;
 			),
 			// Margin and padding logical properties introduced in 6.1.
 			array(
-				'css'      => 'margin-block-start: 1px;margin-block-end: 2px;margin-inline-start: 3px;margin-inline-end: 4px;padding-block-start: 1px;padding-block-end: 2px;padding-inline-start: 3px;padding-inline-end: 4px',
-				'expected' => 'margin-block-start: 1px;margin-block-end: 2px;margin-inline-start: 3px;margin-inline-end: 4px;padding-block-start: 1px;padding-block-end: 2px;padding-inline-start: 3px;padding-inline-end: 4px',
+				'css'      => 'margin-block-start: 1px;margin-block-end: 2px;margin-inline-start: 3px;margin-inline-end: 4px;',
+				'expected' => 'margin-block-start: 1px;margin-block-end: 2px;margin-inline-start: 3px;margin-inline-end: 4px',
+			),
+			array(
+				'css'      => 'padding-block-start: 1px;padding-block-end: 2px;padding-inline-start: 3px;padding-inline-end: 4px;',
+				'expected' => 'padding-block-start: 1px;padding-block-end: 2px;padding-inline-start: 3px;padding-inline-end: 4px',
 			),
 			// Assigning values to CSS variables introduced in 6.1.
 			array(
@@ -1292,10 +1306,10 @@ EOF;
 			),
 		);
 
-		$string   = '<div datamelformed-prefix="gone" data="gone" data-="gone" onclick="alert(1)">Malformed attributes</div>';
+		$content  = '<div datamelformed-prefix="gone" data="gone" data-="gone" onclick="alert(1)">Malformed attributes</div>';
 		$expected = '<div>Malformed attributes</div>';
 
-		$actual = wp_kses( $string, $allowed_html );
+		$actual = wp_kses( $content, $allowed_html );
 
 		$this->assertSame( $expected, $actual );
 	}
@@ -1312,10 +1326,10 @@ EOF;
 			),
 		);
 
-		$string   = '<div data-wp-id="pens-and-pencils">Well formed attribute</div>';
+		$content  = '<div data-wp-id="pens-and-pencils">Well formed attribute</div>';
 		$expected = '<div data-wp-id="pens-and-pencils">Well formed attribute</div>';
 
-		$actual = wp_kses( $string, $allowed_html );
+		$actual = wp_kses( $content, $allowed_html );
 
 		$this->assertSame( $expected, $actual );
 	}
@@ -1633,14 +1647,14 @@ EOF;
 	 * @param string $html     A string of HTML to test.
 	 * @param string $expected The expected result from KSES.
 	 */
-	function test_wp_kses_object_tag_allowed( $html, $expected ) {
+	public function test_wp_kses_object_tag_allowed( $html, $expected ) {
 		$this->assertSame( $expected, wp_kses_post( $html ) );
 	}
 
 	/**
 	 * Data provider for test_wp_kses_object_tag_allowed().
 	 */
-	function data_wp_kses_object_tag_allowed() {
+	public function data_wp_kses_object_tag_allowed() {
 		return array(
 			'valid value for type'                    => array(
 				'<object type="application/pdf" data="https://example.org/foo.pdf" />',
@@ -1743,7 +1757,7 @@ EOF;
 	 * @param string $html     A string of HTML to test.
 	 * @param string $expected The expected result from KSES.
 	 */
-	function test_wp_kses_object_data_url_with_port_number_allowed( $html, $expected ) {
+	public function test_wp_kses_object_data_url_with_port_number_allowed( $html, $expected ) {
 		add_filter( 'upload_dir', array( $this, 'wp_kses_upload_dir_filter' ), 10, 2 );
 		$this->assertSame( $expected, wp_kses_post( $html ) );
 	}
@@ -1751,7 +1765,7 @@ EOF;
 	/**
 	 * Data provider for test_wp_kses_object_data_url_with_port_number_allowed().
 	 */
-	function data_wp_kses_object_data_url_with_port_number_allowed() {
+	public function data_wp_kses_object_data_url_with_port_number_allowed() {
 		return array(
 			'url with port number'                   => array(
 				'<object type="application/pdf" data="https://example.org:8888/cat/foo.pdf" />',
@@ -1790,7 +1804,7 @@ EOF;
 	 *
 	 * @ticket 54261
 	 */
-	function test_wp_kses_object_added_in_html_filter() {
+	public function test_wp_kses_object_added_in_html_filter() {
 		$html = <<<HTML
 <object type="application/pdf" data="https://wordpress.org/foo.pdf" />
 <object type="application/x-shockwave-flash" data="https://wordpress.org/foo.swf">
@@ -1807,7 +1821,7 @@ HTML;
 		$this->assertSame( $html, $filtered_html );
 	}
 
-	function filter_wp_kses_object_added_in_html_filter( $tags, $context ) {
+	public function filter_wp_kses_object_added_in_html_filter( $tags, $context ) {
 		if ( 'post' === $context ) {
 			$tags['object'] = array(
 				'type' => true,
@@ -1830,18 +1844,18 @@ HTML;
 	 *
 	 * @dataProvider data_wp_kses_allowed_values_list
 	 *
-	 * @param string $html         A string of HTML to test.
+	 * @param string $content      A string of HTML to test.
 	 * @param string $expected     The expected result from KSES.
 	 * @param array  $allowed_html The allowed HTML to pass to KSES.
 	 */
-	function test_wp_kses_allowed_values_list( $html, $expected, $allowed_html ) {
-		$this->assertSame( $expected, wp_kses( $html, $allowed_html ) );
+	public function test_wp_kses_allowed_values_list( $content, $expected, $allowed_html ) {
+		$this->assertSame( $expected, wp_kses( $content, $allowed_html ) );
 	}
 
 	/**
 	 * Data provider for test_wp_kses_allowed_values_list().
 	 */
-	function data_wp_kses_allowed_values_list() {
+	public function data_wp_kses_allowed_values_list() {
 		$data = array(
 			'valid dir attribute value'             => array(
 				'<p dir="ltr">foo</p>',
@@ -1888,18 +1902,18 @@ HTML;
 	 *
 	 * @dataProvider data_wp_kses_required_attribute
 	 *
-	 * @param string $html         A string of HTML to test.
+	 * @param string $content      A string of HTML to test.
 	 * @param string $expected     The expected result from KSES.
 	 * @param array  $allowed_html The allowed HTML to pass to KSES.
 	 */
-	function test_wp_kses_required_attribute( $html, $expected, $allowed_html ) {
-		$this->assertSame( $expected, wp_kses( $html, $allowed_html ) );
+	public function test_wp_kses_required_attribute( $content, $expected, $allowed_html ) {
+		$this->assertSame( $expected, wp_kses( $content, $allowed_html ) );
 	}
 
 	/**
 	 * Data provider for test_wp_kses_required_attribute().
 	 */
-	function data_wp_kses_required_attribute() {
+	public function data_wp_kses_required_attribute() {
 		$data = array(
 			'valid dir attribute value'             => array(
 				'<p dir="ltr">foo</p>', // Test HTML.
diff --git a/tests/kses/wpFilterGlobalStylesPost.php b/tests/kses/wpFilterGlobalStylesPost.php
new file mode 100644
index 0000000000..49cf0078aa
--- /dev/null
+++ b/tests/kses/wpFilterGlobalStylesPost.php
@@ -0,0 +1,83 @@
+<?php
+
+/**
+ * @group kses
+ *
+ * @covers ::wp_filter_global_styles_post
+ */
+class Tests_Kses_WpFilterGlobalStylesPost extends WP_UnitTestCase {
+
+	/**
+	 * Theme data.
+	 *
+	 * @var array
+	 */
+	private $user_theme_data = array(
+		'isGlobalStylesUserThemeJSON' => 1,
+		'version'                     => 1,
+		'styles'                      => array(
+			'blocks' => array(
+				'core/button' => array(
+					'border' => array(
+						'radius' => '0',
+					),
+				),
+			),
+		),
+	);
+
+	/**
+	 * @dataProvider data_should_not_remove_safe_global_style_rules
+	 * @ticket       56266
+	 *
+	 * @param string $rule A rule to test.
+	 */
+	public function test_should_not_remove_safe_global_style_rules( $rule ) {
+		$theme_data               = wp_parse_args( $this->user_theme_data, array( $rule => 'someValue' ) );
+		$filtered_user_theme_json = $this->filter_global_styles( $theme_data );
+		$safe_rules               = array_keys( $theme_data );
+		foreach ( $safe_rules as $safe_rule ) {
+			$this->assertArrayHasKey( $safe_rule, $filtered_user_theme_json, sprintf( 'wp_filter_global_styles_post() must not remove the "%s" rule as it\'s considered safe.', $safe_rule ) );
+		}
+	}
+
+	/**
+	 * Data provider.
+	 *
+	 * @return array
+	 */
+	public function data_should_not_remove_safe_global_style_rules() {
+		$result = array();
+		foreach ( WP_Theme_JSON::VALID_TOP_LEVEL_KEYS as $safe_rule ) {
+			$result[ $safe_rule ] = array( $safe_rule );
+		}
+
+		// Settings always get removed.
+		unset( $result['settings'] );
+
+		return $result;
+	}
+
+	/**
+	 * @ticket 56266
+	 */
+	public function test_should_remove_unsafe_global_style_rules() {
+		$filtered_user_theme_json = $this->filter_global_styles( $this->user_theme_data );
+		$this->assertArrayNotHasKey( 'nonSchemaRule', $filtered_user_theme_json, 'Filtered json data must not contain unsafe global style rules.' );
+	}
+
+	/**
+	 * This is a helper method.
+	 * It filters JSON theme data and returns it as an array.
+	 *
+	 * @param array $theme_data Theme data to filter.
+	 *
+	 * @return array Filtered theme data.
+	 */
+	private function filter_global_styles( $theme_data ) {
+		$user_theme_json          = wp_slash( wp_json_encode( $theme_data ) );
+		$filtered_user_theme_json = wp_filter_global_styles_post( $user_theme_json );
+
+		return json_decode( wp_unslash( $filtered_user_theme_json ), true );
+	}
+}
diff --git a/tests/l10n.php b/tests/l10n.php
index 3d23dd7f20..1c69fb4c23 100644
--- a/tests/l10n.php
+++ b/tests/l10n.php
@@ -435,6 +435,19 @@ class Tests_L10n extends WP_UnitTestCase {
 
 		switch_to_locale( 'en_US' );
 
+		/*
+		 * The recent drafts list is only displayed on the Dashboard screen for users
+		 * with the 'edit_posts' capability.
+		 *
+		 * This means the current user needs to be set to Editor as a prerequisite
+		 * for the call to the wp_dashboard_recent_drafts() function.
+		 *
+		 * This allows the subsequent call to get_edit_post_link() to work as expected
+		 * and return a string instead of null, which would otherwise cause a PHP 8.1
+		 * "passing null to non-nullable" deprecation notice.
+		 */
+		wp_set_current_user( self::factory()->user->create( array( 'role' => 'editor' ) ) );
+
 		$args = array(
 			'post_content' => $this->long_text,
 			'post_excerpt' => '',
@@ -461,6 +474,19 @@ class Tests_L10n extends WP_UnitTestCase {
 
 		switch_to_locale( 'ja_JP' );
 
+		/*
+		 * The recent drafts list is only displayed on the Dashboard screen for users
+		 * with the 'edit_posts' capability.
+		 *
+		 * This means the current user needs to be set to Editor as a prerequisite
+		 * for the call to the wp_dashboard_recent_drafts() function.
+		 *
+		 * This allows the subsequent call to get_edit_post_link() to work as expected
+		 * and return a string instead of null, which would otherwise cause a PHP 8.1
+		 * "passing null to non-nullable" deprecation notice.
+		 */
+		wp_set_current_user( self::factory()->user->create( array( 'role' => 'editor' ) ) );
+
 		$args = array(
 			'post_content' => $this->long_text,
 			'post_excerpt' => '',
@@ -487,6 +513,19 @@ class Tests_L10n extends WP_UnitTestCase {
 
 		switch_to_locale( 'ja_JP' );
 
+		/*
+		 * The recent drafts list is only displayed on the Dashboard screen for users
+		 * with the 'edit_posts' capability.
+		 *
+		 * This means the current user needs to be set to Editor as a prerequisite
+		 * for the call to the wp_dashboard_recent_drafts() function.
+		 *
+		 * This allows the subsequent call to get_edit_post_link() to work as expected
+		 * and return a string instead of null, which would otherwise cause a PHP 8.1
+		 * "passing null to non-nullable" deprecation notice.
+		 */
+		wp_set_current_user( self::factory()->user->create( array( 'role' => 'editor' ) ) );
+
 		$args = array(
 			'post_content' => str_repeat( 'あ', 200 ),
 			'post_excerpt' => '',
diff --git a/tests/l10n/loadScriptTextdomain.php b/tests/l10n/loadScriptTextdomain.php
index bc612d7471..fab8aa8b5a 100644
--- a/tests/l10n/loadScriptTextdomain.php
+++ b/tests/l10n/loadScriptTextdomain.php
@@ -131,4 +131,23 @@ class Tests_L10n_LoadScriptTextdomain extends WP_UnitTestCase {
 
 		return $relative;
 	}
+
+	/**
+	 * Tests that PHP 8.1 "passing null to non-nullable" deprecation notice
+	 * is not thrown when passing the default `$path` to untrailingslashit() in the function.
+	 *
+	 * The notice that we should not see:
+	 * `Deprecated: rtrim(): Passing null to parameter #1 ($string) of type string is deprecated`.
+	 *
+	 * @ticket 55967
+	 */
+	public function test_does_not_throw_deprecation_notice_for_rtrim_with_default_parameters() {
+		$handle = 'test-example-root';
+		$src    = '/wp-includes/js/script.js';
+
+		wp_enqueue_script( $handle, $src );
+
+		$expected = file_get_contents( DIR_TESTDATA . '/languages/en_US-813e104eb47e13dd4cc5af844c618754.json' );
+		$this->assertSame( $expected, load_script_textdomain( $handle ) );
+	}
 }
diff --git a/tests/l10n/loadTextdomain.php b/tests/l10n/loadTextdomain.php
index 882cb9535f..26e567d663 100644
--- a/tests/l10n/loadTextdomain.php
+++ b/tests/l10n/loadTextdomain.php
@@ -28,7 +28,7 @@ class Tests_L10n_LoadTextdomain extends WP_UnitTestCase {
 		/** @var WP_Textdomain_Registry $wp_textdomain_registry */
 		global $wp_textdomain_registry;
 
-		$wp_textdomain_registry->reset();
+		$wp_textdomain_registry = new WP_Textdomain_Registry();
 	}
 
 	public function tear_down() {
@@ -36,7 +36,7 @@ class Tests_L10n_LoadTextdomain extends WP_UnitTestCase {
 		/** @var WP_Textdomain_Registry $wp_textdomain_registry */
 		global $wp_textdomain_registry;
 
-		$wp_textdomain_registry->reset();
+		$wp_textdomain_registry = new WP_Textdomain_Registry();
 
 		parent::tear_down();
 	}
diff --git a/tests/l10n/loadTextdomainJustInTime.php b/tests/l10n/loadTextdomainJustInTime.php
index 2d3c480a5e..4f29c0c586 100644
--- a/tests/l10n/loadTextdomainJustInTime.php
+++ b/tests/l10n/loadTextdomainJustInTime.php
@@ -8,7 +8,6 @@ class Tests_L10n_LoadTextdomainJustInTime extends WP_UnitTestCase {
 	protected $orig_theme_dir;
 	protected $theme_root;
 	protected static $user_id;
-	private $locale_count;
 
 	public static function wpSetUpBeforeClass( WP_UnitTest_Factory $factory ) {
 		self::$user_id = $factory->user->create(
@@ -24,7 +23,6 @@ class Tests_L10n_LoadTextdomainJustInTime extends WP_UnitTestCase {
 
 		$this->theme_root     = DIR_TESTDATA . '/themedir1';
 		$this->orig_theme_dir = $GLOBALS['wp_theme_directories'];
-		$this->locale_count   = 0;
 
 		// /themes is necessary as theme.php functions assume /themes is the root if there is only one root.
 		$GLOBALS['wp_theme_directories'] = array( WP_CONTENT_DIR . '/themes', $this->theme_root );
@@ -37,7 +35,7 @@ class Tests_L10n_LoadTextdomainJustInTime extends WP_UnitTestCase {
 		/** @var WP_Textdomain_Registry $wp_textdomain_registry */
 		global $wp_textdomain_registry;
 
-		$wp_textdomain_registry->reset();
+		$wp_textdomain_registry = new WP_Textdomain_Registry();
 	}
 
 	public function tear_down() {
@@ -48,7 +46,7 @@ class Tests_L10n_LoadTextdomainJustInTime extends WP_UnitTestCase {
 		/** @var WP_Textdomain_Registry $wp_textdomain_registry */
 		global $wp_textdomain_registry;
 
-		$wp_textdomain_registry->reset();
+		$wp_textdomain_registry = new WP_Textdomain_Registry();
 
 		parent::tear_down();
 	}
@@ -262,7 +260,8 @@ class Tests_L10n_LoadTextdomainJustInTime extends WP_UnitTestCase {
 	public function test_get_locale_is_called_only_once_per_textdomain() {
 		$textdomain = 'foo-bar-baz';
 
-		add_filter( 'locale', array( $this, '_filter_locale_count' ) );
+		$filter = new MockAction();
+		add_filter( 'locale', array( $filter, 'filter' ) );
 
 		__( 'Foo', $textdomain );
 		__( 'Bar', $textdomain );
@@ -270,15 +269,31 @@ class Tests_L10n_LoadTextdomainJustInTime extends WP_UnitTestCase {
 		__( 'Foo Bar', $textdomain );
 		__( 'Foo Bar Baz', $textdomain );
 
-		remove_filter( 'locale', array( $this, '_filter_locale_count' ) );
-
 		$this->assertFalse( is_textdomain_loaded( $textdomain ) );
-		$this->assertSame( 1, $this->locale_count );
+		$this->assertSame( 1, $filter->get_call_count() );
 	}
 
-	public function _filter_locale_count( $locale ) {
-		++$this->locale_count;
+	/**
+	 * @ticket 37997
+	 * @ticket 39210
+	 *
+	 * @covers ::_load_textdomain_just_in_time
+	 */
+	public function test_get_locale_is_called_only_once_per_textdomain_with_custom_lang_dir() {
+		load_plugin_textdomain( 'custom-internationalized-plugin', false, dirname( plugin_basename( __FILE__ ) ) . '/languages' );
+
+		$textdomain = 'custom-internationalized-plugin';
 
-		return $locale;
+		$filter = new MockAction();
+		add_filter( 'locale', array( $filter, 'filter' ) );
+
+		__( 'Foo', $textdomain );
+		__( 'Bar', $textdomain );
+		__( 'Baz', $textdomain );
+		__( 'Foo Bar', $textdomain );
+		__( 'Foo Bar Baz', $textdomain );
+
+		$this->assertFalse( is_textdomain_loaded( $textdomain ) );
+		$this->assertSame( 1, $filter->get_call_count() );
 	}
 }
diff --git a/tests/l10n/wpLocaleSwitcher.php b/tests/l10n/wpLocaleSwitcher.php
index c1791d8c10..b160f24833 100644
--- a/tests/l10n/wpLocaleSwitcher.php
+++ b/tests/l10n/wpLocaleSwitcher.php
@@ -24,19 +24,25 @@ class Tests_L10n_wpLocaleSwitcher extends WP_UnitTestCase {
 
 		unset( $GLOBALS['l10n'], $GLOBALS['l10n_unloaded'] );
 
-		/** @var WP_Textdomain_Registry $wp_textdomain_registry */
-		global $wp_textdomain_registry;
+		global $wp_textdomain_registry, $wp_locale_switcher;
+
+		$wp_textdomain_registry = new WP_Textdomain_Registry();
 
-		$wp_textdomain_registry->reset();
+		remove_filter( 'locale', array( $wp_locale_switcher, 'filter_locale' ) );
+		$wp_locale_switcher = new WP_Locale_Switcher();
+		$wp_locale_switcher->init();
 	}
 
 	public function tear_down() {
 		unset( $GLOBALS['l10n'], $GLOBALS['l10n_unloaded'] );
 
-		/** @var WP_Textdomain_Registry $wp_textdomain_registry */
-		global $wp_textdomain_registry;
+		global $wp_textdomain_registry, $wp_locale_switcher;
 
-		$wp_textdomain_registry->reset();
+		$wp_textdomain_registry = new WP_Textdomain_Registry();
+
+		remove_filter( 'locale', array( $wp_locale_switcher, 'filter_locale' ) );
+		$wp_locale_switcher = new WP_Locale_Switcher();
+		$wp_locale_switcher->init();
 
 		parent::tear_down();
 	}
@@ -336,8 +342,8 @@ class Tests_L10n_wpLocaleSwitcher extends WP_UnitTestCase {
 		wp_set_current_user( $user_id );
 		set_current_screen( 'dashboard' );
 
-		$locale_switcher = clone $wp_locale_switcher;
-
+		// Reset $wp_locale_switcher so it thinks es_ES is the original locale.
+		remove_filter( 'locale', array( $wp_locale_switcher, 'filter_locale' ) );
 		$wp_locale_switcher = new WP_Locale_Switcher();
 		$wp_locale_switcher->init();
 
@@ -357,8 +363,6 @@ class Tests_L10n_wpLocaleSwitcher extends WP_UnitTestCase {
 
 		$language_header_after_restore = $l10n['default']->headers['Language']; // de_DE
 
-		$wp_locale_switcher = $locale_switcher;
-
 		$this->assertFalse( $locale_switched_user_locale );
 		$this->assertTrue( $locale_switched_site_locale );
 		$this->assertSame( $site_locale, $site_locale_after_switch );
@@ -388,8 +392,8 @@ class Tests_L10n_wpLocaleSwitcher extends WP_UnitTestCase {
 		wp_set_current_user( $user_id );
 		set_current_screen( 'dashboard' );
 
-		$locale_switcher = clone $wp_locale_switcher;
-
+		// Reset $wp_locale_switcher so it thinks es_ES is the original locale.
+		remove_filter( 'locale', array( $wp_locale_switcher, 'filter_locale' ) );
 		$wp_locale_switcher = new WP_Locale_Switcher();
 		$wp_locale_switcher->init();
 
@@ -409,8 +413,6 @@ class Tests_L10n_wpLocaleSwitcher extends WP_UnitTestCase {
 
 		$language_header_after_restore = $l10n['default']->headers['Language']; // de_DE
 
-		$wp_locale_switcher = $locale_switcher;
-
 		remove_filter( 'locale', array( $this, 'filter_locale' ) );
 
 		$this->assertFalse( $locale_switched_user_locale );
@@ -426,8 +428,6 @@ class Tests_L10n_wpLocaleSwitcher extends WP_UnitTestCase {
 	 * @covers ::load_default_textdomain
 	 */
 	public function test_multiple_switches_to_site_locale_and_user_locale() {
-		global $wp_locale_switcher;
-
 		$site_locale = get_locale();
 
 		$user_id = self::factory()->user->create(
@@ -440,11 +440,6 @@ class Tests_L10n_wpLocaleSwitcher extends WP_UnitTestCase {
 		wp_set_current_user( $user_id );
 		set_current_screen( 'dashboard' );
 
-		$locale_switcher = clone $wp_locale_switcher;
-
-		$wp_locale_switcher = new WP_Locale_Switcher();
-		$wp_locale_switcher->init();
-
 		$user_locale = get_user_locale();
 
 		load_default_textdomain( $user_locale );
@@ -458,8 +453,6 @@ class Tests_L10n_wpLocaleSwitcher extends WP_UnitTestCase {
 
 		restore_current_locale();
 
-		$wp_locale_switcher = $locale_switcher;
-
 		$this->assertSame( 'en_US', get_locale() );
 		$this->assertSame( 'This is a dummy plugin', $actual );
 	}
@@ -469,20 +462,16 @@ class Tests_L10n_wpLocaleSwitcher extends WP_UnitTestCase {
 	 */
 	public function test_switch_reloads_plugin_translations_outside_wp_lang_dir() {
 		/** @var WP_Textdomain_Registry $wp_textdomain_registry */
-		global $wp_locale_switcher, $wp_textdomain_registry;
-
-		$locale_switcher = clone $wp_locale_switcher;
-
-		$wp_locale_switcher = new WP_Locale_Switcher();
-		$wp_locale_switcher->init();
+		global $wp_textdomain_registry;
 
 		require_once DIR_TESTDATA . '/plugins/custom-internationalized-plugin/custom-internationalized-plugin.php';
 
-		$registry_value = $wp_textdomain_registry->get( 'custom-internationalized-plugin', determine_locale() );
-
 		$actual = custom_i18n_plugin_test();
 
 		switch_to_locale( 'es_ES' );
+
+		$registry_value = $wp_textdomain_registry->get( 'custom-internationalized-plugin', determine_locale() );
+
 		switch_to_locale( 'de_DE' );
 
 		$actual_de_de = custom_i18n_plugin_test();
@@ -493,8 +482,6 @@ class Tests_L10n_wpLocaleSwitcher extends WP_UnitTestCase {
 
 		restore_current_locale();
 
-		$wp_locale_switcher = $locale_switcher;
-
 		$this->assertSame( 'This is a dummy plugin', $actual );
 		$this->assertSame( WP_PLUGIN_DIR . '/custom-internationalized-plugin/languages/', $registry_value );
 		$this->assertSame( 'Das ist ein Dummy Plugin', $actual_de_de );
@@ -502,26 +489,62 @@ class Tests_L10n_wpLocaleSwitcher extends WP_UnitTestCase {
 	}
 
 	/**
-	 * @ticket 39210
+	 * @ticket 57116
 	 */
-	public function test_switch_reloads_theme_translations_outside_wp_lang_dir() {
+	public function test_switch_reloads_plugin_translations() {
 		/** @var WP_Textdomain_Registry $wp_textdomain_registry */
-		global $wp_locale_switcher, $wp_textdomain_registry;
+		global $wp_textdomain_registry;
 
-		$locale_switcher = clone $wp_locale_switcher;
+		$has_translations_1 = $wp_textdomain_registry->has( 'internationalized-plugin' );
 
-		$wp_locale_switcher = new WP_Locale_Switcher();
-		$wp_locale_switcher->init();
+		require_once DIR_TESTDATA . '/plugins/internationalized-plugin.php';
+
+		$actual = i18n_plugin_test();
+
+		switch_to_locale( 'es_ES' );
+
+		$lang_path_es_es = $wp_textdomain_registry->get( 'internationalized-plugin', determine_locale() );
+
+		switch_to_locale( 'de_DE' );
+
+		$actual_de_de = i18n_plugin_test();
+
+		$has_translations_3 = $wp_textdomain_registry->has( 'internationalized-plugin' );
+
+		restore_previous_locale();
+
+		$actual_es_es = i18n_plugin_test();
+
+		restore_current_locale();
+
+		$lang_path_en_us = $wp_textdomain_registry->get( 'internationalized-plugin', determine_locale() );
+
+		$this->assertSame( 'This is a dummy plugin', $actual );
+		$this->assertSame( 'Das ist ein Dummy Plugin', $actual_de_de );
+		$this->assertSame( 'Este es un plugin dummy', $actual_es_es );
+		$this->assertTrue( $has_translations_1 );
+		$this->assertTrue( $has_translations_3 );
+		$this->assertSame( WP_LANG_DIR . '/plugins/', $lang_path_es_es );
+		$this->assertFalse( $lang_path_en_us );
+	}
+
+	/**
+	 * @ticket 39210
+	 */
+	public function test_switch_reloads_theme_translations_outside_wp_lang_dir() {
+		/** @var WP_Textdomain_Registry $wp_textdomain_registry */
+		global $wp_textdomain_registry;
 
 		switch_theme( 'custom-internationalized-theme' );
 
 		require_once get_stylesheet_directory() . '/functions.php';
 
-		$registry_value = $wp_textdomain_registry->get( 'custom-internationalized-theme', determine_locale() );
-
 		$actual = custom_i18n_theme_test();
 
 		switch_to_locale( 'es_ES' );
+
+		$registry_value = $wp_textdomain_registry->get( 'custom-internationalized-theme', determine_locale() );
+
 		switch_to_locale( 'de_DE' );
 
 		$actual_de_de = custom_i18n_theme_test();
@@ -532,14 +555,34 @@ class Tests_L10n_wpLocaleSwitcher extends WP_UnitTestCase {
 
 		restore_current_locale();
 
-		$wp_locale_switcher = $locale_switcher;
-
 		$this->assertSame( get_template_directory() . '/languages/', $registry_value );
 		$this->assertSame( 'This is a dummy theme', $actual );
 		$this->assertSame( 'Das ist ein Dummy Theme', $actual_de_de );
 		$this->assertSame( 'Este es un tema dummy', $actual_es_es );
 	}
 
+	/**
+	 * @ticket 57116
+	 */
+	public function test_switch_to_locale_should_work() {
+		global $wp_textdomain_registry;
+		require_once DIR_TESTDATA . '/plugins/internationalized-plugin.php';
+
+		$has_translations = $wp_textdomain_registry->has( 'internationalized-plugin' );
+		$path             = $wp_textdomain_registry->get( 'internationalized-plugin', 'es_ES' );
+
+		$actual = i18n_plugin_test();
+
+		switch_to_locale( 'es_ES' );
+
+		$actual_es_es = i18n_plugin_test();
+
+		$this->assertTrue( $has_translations );
+		$this->assertNotEmpty( $path );
+		$this->assertSame( 'This is a dummy plugin', $actual );
+		$this->assertSame( 'Este es un plugin dummy', $actual_es_es );
+	}
+
 	public function filter_locale() {
 		return 'es_ES';
 	}
diff --git a/tests/l10n/wpTextdomainRegistry.php b/tests/l10n/wpTextdomainRegistry.php
new file mode 100644
index 0000000000..fc53dd9c56
--- /dev/null
+++ b/tests/l10n/wpTextdomainRegistry.php
@@ -0,0 +1,128 @@
+<?php
+
+/**
+ * @group l10n
+ * @group i18n
+ *
+ * @coversDefaultClass WP_Textdomain_Registry
+ */
+class Tests_L10n_wpTextdomainRegistry extends WP_UnitTestCase {
+	/**
+	 * @var WP_Textdomain_Registry
+	 */
+	protected $instance;
+
+	public function set_up() {
+		parent::set_up();
+
+		$this->instance = new WP_Textdomain_Registry();
+	}
+
+	/**
+	 * @covers ::has
+	 * @covers ::get
+	 * @covers ::set_custom_path
+	 */
+	public function test_set_custom_path() {
+		$reflection          = new ReflectionClass( $this->instance );
+		$reflection_property = $reflection->getProperty( 'cached_mo_files' );
+		$reflection_property->setAccessible( true );
+
+		$this->assertEmpty(
+			$reflection_property->getValue( $this->instance ),
+			'Cache not empty by default'
+		);
+
+		$this->instance->set_custom_path( 'foo', WP_LANG_DIR . '/bar' );
+
+		$this->assertTrue(
+			$this->instance->has( 'foo' ),
+			'Incorrect availability status for textdomain with custom path'
+		);
+		$this->assertFalse(
+			$this->instance->get( 'foo', 'en_US' ),
+			'Should not return custom path for textdomain and en_US locale'
+		);
+		$this->assertSame(
+			WP_LANG_DIR . '/bar/',
+			$this->instance->get( 'foo', 'de_DE' ),
+			'Custom path for textdomain not returned'
+		);
+		$this->assertArrayHasKey(
+			WP_LANG_DIR . '/bar',
+			$reflection_property->getValue( $this->instance ),
+			'Custom path missing from cache'
+		);
+	}
+
+	/**
+	 * @covers ::get
+	 * @dataProvider data_domains_locales
+	 */
+	public function test_get( $domain, $locale, $expected ) {
+		$reflection          = new ReflectionClass( $this->instance );
+		$reflection_property = $reflection->getProperty( 'cached_mo_files' );
+		$reflection_property->setAccessible( true );
+
+		$actual = $this->instance->get( $domain, $locale );
+		$this->assertSame(
+			$expected,
+			$actual,
+			'Expected languages directory path not matching actual one'
+		);
+
+		$this->assertArrayHasKey(
+			WP_LANG_DIR . '/plugins',
+			$reflection_property->getValue( $this->instance ),
+			'Default plugins path missing from cache'
+		);
+	}
+
+	/**
+	 * @covers ::set
+	 * @covers ::get
+	 */
+	public function test_set_populates_cache() {
+		$this->instance->set( 'foo-plugin', 'de_DE', '/foo/bar' );
+
+		$this->assertSame(
+			'/foo/bar/',
+			$this->instance->get( 'foo-plugin', 'de_DE' )
+		);
+	}
+
+	public function data_domains_locales() {
+		return array(
+			'Non-existent plugin'            => array(
+				'unknown-plugin',
+				'en_US',
+				false,
+			),
+			'Non-existent plugin with de_DE' => array(
+				'unknown-plugin',
+				'de_DE',
+				false,
+			),
+			'Available de_DE translations'   => array(
+				'internationalized-plugin',
+				'de_DE',
+				WP_LANG_DIR . '/plugins/',
+			),
+			'Available es_ES translations'   => array(
+				'internationalized-plugin',
+				'es_ES',
+				WP_LANG_DIR . '/plugins/',
+			),
+			'Unavailable fr_FR translations' => array(
+				'internationalized-plugin',
+				'fr_FR',
+				false,
+			),
+			'Unavailable en_US translations' => array(
+				'internationalized-plugin',
+				'en_US',
+				false,
+			),
+		);
+	}
+}
diff --git a/tests/link/getAdjacentPost.php b/tests/link/getAdjacentPost.php
index 505d52a1dc..d365aa49dd 100644
--- a/tests/link/getAdjacentPost.php
+++ b/tests/link/getAdjacentPost.php
@@ -350,4 +350,82 @@ class Tests_Link_GetAdjacentPost extends WP_UnitTestCase {
 		$excluded_terms[] = $this->exclude_term;
 		return $excluded_terms;
 	}
+
+	/**
+	 * @ticket 41131
+	 */
+	public function test_get_adjacent_post_cache() {
+		// Need some sample posts to test adjacency.
+		$post_one = self::factory()->post->create_and_get(
+			array(
+				'post_title' => 'First',
+				'post_date'  => '2012-01-01 12:00:00',
+			)
+		);
+
+		$post_two = self::factory()->post->create_and_get(
+			array(
+				'post_title' => 'Second',
+				'post_date'  => '2012-02-01 12:00:00',
+			)
+		);
+
+		$post_three = self::factory()->post->create_and_get(
+			array(
+				'post_title' => 'Third',
+				'post_date'  => '2012-03-01 12:00:00',
+			)
+		);
+
+		$post_four = self::factory()->post->create_and_get(
+			array(
+				'post_title' => 'Fourth',
+				'post_date'  => '2012-04-01 12:00:00',
+			)
+		);
+
+		// Assign some terms.
+		wp_set_object_terms( $post_one->ID, 'WordPress', 'category', false );
+		wp_set_object_terms( $post_three->ID, 'WordPress', 'category', false );
+
+		wp_set_object_terms( $post_two->ID, 'plugins', 'post_tag', false );
+		wp_set_object_terms( $post_four->ID, 'plugins', 'post_tag', false );
+
+		// Test normal post adjacency.
+		$this->go_to( get_permalink( $post_two->ID ) );
+
+		// Test getting the right result.
+		$first_run = get_adjacent_post( false, '', true );
+		$this->assertEquals( $post_one, $first_run, 'Did not get first post when on second post' );
+		$this->assertNotEquals( $post_two, $first_run, 'Got second post when on second post' );
+
+		// Query count to test caching.
+		$num_queries = get_num_queries();
+		$second_run  = get_adjacent_post( false, '', true );
+		$this->assertNotEquals( $post_two, $second_run, 'Got second post when on second post on second run' );
+		$this->assertEquals( $post_one, $second_run, 'Did not get first post when on second post on second run' );
+		$this->assertSame( $num_queries, get_num_queries() );
+
+		// Test creating new post busts cache.
+		$post_five   = self::factory()->post->create_and_get(
+			array(
+				'post_title' => 'Five',
+				'post_date'  => '2012-04-01 12:00:00',
+			)
+		);
+		$num_queries = get_num_queries();
+
+		$this->assertEquals( $post_one, get_adjacent_post( false, '', true ), 'Did not get first post after new post is added' );
+		$this->assertSame( get_num_queries() - $num_queries, 1, 'Number of queries run was not one after new post is added' );
+
+		$this->assertEquals( $post_four, get_adjacent_post( true, '', false ), 'Did not get forth post after new post is added' );
+		$num_queries = get_num_queries();
+		$this->assertEquals( $post_four, get_adjacent_post( true, '', false ), 'Did not get forth post after new post is added' );
+		$this->assertSame( $num_queries, get_num_queries() );
+		wp_set_object_terms( $post_four->ID, 'themes', 'post_tag', false );
+
+		$num_queries = get_num_queries();
+		$this->assertEquals( $post_four, get_adjacent_post( true, '', false ), 'Result of function call is wrong after after adding new term' );
+		$this->assertSame( get_num_queries() - $num_queries, 2, 'Number of queries run was not two after adding new term' );
+	}
 }
diff --git a/tests/load/isLogin.php b/tests/load/isLogin.php
new file mode 100644
index 0000000000..84d9a26d9a
--- /dev/null
+++ b/tests/load/isLogin.php
@@ -0,0 +1,21 @@
+<?php
+
+/**
+ * Tests for is_login().
+ *
+ * @group load.php
+ * @covers ::is_login
+ */
+class Tests_Load_IsLogin extends WP_UnitTestCase {
+
+	/**
+	 * @ticket 19898
+	 */
+	public function test_is_login() {
+		$this->assertFalse( is_login() );
+
+		$_SERVER['SCRIPT_NAME'] = '/wp-login.php';
+
+		$this->assertTrue( is_login() );
+	}
+}
diff --git a/tests/load/isLoginScreen.php b/tests/load/isLoginScreen.php
deleted file mode 100644
index d0cd1df9a6..0000000000
--- a/tests/load/isLoginScreen.php
+++ /dev/null
@@ -1,21 +0,0 @@
-<?php
-
-/**
- * Tests for is_login_screen().
- *
- * @group load.php
- * @covers ::is_login_screen
- */
-class Tests_Load_IsLoginScreen extends WP_UnitTestCase {
-
-	/**
-	 * @ticket 19898
-	 */
-	public function test_is_login_screen() {
-		$this->assertFalse( is_login_screen() );
-
-		$_SERVER['SCRIPT_NAME'] = '/wp-login.php';
-
-		$this->assertTrue( is_login_screen() );
-	}
-}
diff --git a/tests/locale.php b/tests/locale.php
index 2e7daa87e1..a3a100547e 100644
--- a/tests/locale.php
+++ b/tests/locale.php
@@ -15,6 +15,39 @@ class Tests_Locale extends WP_UnitTestCase {
 		$this->locale = new WP_Locale();
 	}
 
+	/**
+	 * @ticket 57427
+	 *
+	 * @dataProvider data_property_initializes_to_array
+	 *
+	 * @param string $name Property name to test.
+	 */
+	public function test_property_initializes_to_array( $name ) {
+		$this->assertIsArray( $this->locale->$name, "WP_Locale::{$name} property should be an array" );
+
+		// Test a custom implementation when `init()` is not invoked in the constructor.
+		$wp_locale = new Custom_WP_Locale();
+		$this->assertIsArray( $wp_locale->$name, "Custom_WP_Locale::{$name} property should be an array" );
+	}
+
+	/**
+	 * Data provider.
+	 *
+	 * @return array
+	 */
+	public function data_property_initializes_to_array() {
+		return array(
+			'weekday'         => array( 'weekday' ),
+			'weekday_initial' => array( 'weekday_initial' ),
+			'weekday_abbrev'  => array( 'weekday_abbrev' ),
+			'month'           => array( 'month' ),
+			'month_genitive'  => array( 'month_genitive' ),
+			'month_abbrev'    => array( 'month_abbrev' ),
+			'meridiem'        => array( 'meridiem' ),
+			'number_format'   => array( 'number_format' ),
+		);
+	}
+
 	/**
 	 * @covers WP_Locale::get_weekday
 	 */
@@ -141,3 +174,11 @@ class Tests_Locale extends WP_UnitTestCase {
 		$this->assertFalse( $this->locale->is_rtl() );
 	}
 }
+
+class Custom_WP_Locale extends WP_Locale {
+	public function __construct() {
+		// Do not initialize to test property initialization.
+		// $this->init();
+		$this->register_globals();
+	}
+}
diff --git a/tests/media.php b/tests/media.php
index 6afb92a343..5165e32b85 100644
--- a/tests/media.php
+++ b/tests/media.php
@@ -33,8 +33,7 @@ CAP;
 		self::$_sizes                          = wp_get_additional_image_sizes();
 		$GLOBALS['_wp_additional_image_sizes'] = array();
 
-		$filename = DIR_TESTDATA . '/images/' . self::$large_filename;
-		add_filter( 'image_editor_output_format', '__return_empty_array' );
+		$filename       = DIR_TESTDATA . '/images/' . self::$large_filename;
 		self::$large_id = $factory->attachment->create_upload_object( $filename );
 
 		$post_statuses = array( 'publish', 'future', 'draft', 'auto-draft', 'trash' );
@@ -69,7 +68,6 @@ CAP;
 
 	public static function wpTearDownAfterClass() {
 		$GLOBALS['_wp_additional_image_sizes'] = self::$_sizes;
-		remove_filter( 'image_editor_output_format', '__return_empty_array' );
 	}
 
 	public static function tear_down_after_class() {
@@ -363,7 +361,7 @@ https://w.org</a>',
 	 * @dataProvider data_autoembed
 	 */
 	public function test_autoembed( $content, $result = null ) {
-		$wp_embed = new Test_Autoembed;
+		$wp_embed = new Test_Autoembed();
 
 		$this->assertSame( $wp_embed->autoembed( $content ), $result ? $result : $content );
 	}
@@ -503,7 +501,7 @@ https://w.org</a>',
 		);
 
 		$images = get_attached_media( 'image', $post_id );
-		$this->assertEquals( $images, array( $attachment_id => get_post( $attachment_id ) ) );
+		$this->assertEqualSets( $images, array( $attachment_id => get_post( $attachment_id ) ) );
 	}
 
 	/**
@@ -3164,6 +3162,28 @@ EOF;
 		$this->assertStringNotContainsString( ' loading=', $img );
 	}
 
+	/**
+	 * Test that decoding="async" is not applied to img tags with single quotes.
+	 *
+	 * @ticket 56969
+	 */
+	public function test_wp_img_tag_add_decoding_attr_with_single_quotes() {
+		$img = "<img src='example.png' alt='' width='300' height='225' />";
+		$img = wp_img_tag_add_decoding_attr( $img, 'test' );
+		$this->assertStringNotContainsString( ' decoding="async"', $img );
+	}
+
+	/**
+	 * Test that decoding="async" is not applied to img tags inside JSON.
+	 *
+	 * @ticket 56969
+	 */
+	public function test_decoding_async_not_applied_to_json() {
+		$content = '{"image": "<img src=\"example.png\" alt=\"\" width=\"300\" height=\"225\" />"}';
+		$content = wp_filter_content_tags( $content );
+		$this->assertStringNotContainsString( ' decoding="async"', $content );
+	}
+
 	/**
 	 * @ticket 50756
 	 */
@@ -3457,7 +3477,7 @@ EOF;
 	 *
 	 * @param string $context
 	 */
-	function test_wp_get_loading_attr_default( $context ) {
+	public function test_wp_get_loading_attr_default( $context ) {
 		global $wp_query, $wp_the_query;
 
 		// Return 'lazy' by default.
@@ -3495,7 +3515,7 @@ EOF;
 		}
 	}
 
-	function data_wp_get_loading_attr_default() {
+	public function data_wp_get_loading_attr_default() {
 		return array(
 			array( 'the_content' ),
 			array( 'the_post_thumbnail' ),
@@ -3505,7 +3525,7 @@ EOF;
 	/**
 	 * @ticket 53675
 	 */
-	function test_wp_omit_loading_attr_threshold_filter() {
+	public function test_wp_omit_loading_attr_threshold_filter() {
 		global $wp_query, $wp_the_query;
 
 		$wp_query     = new WP_Query( array( 'post__in' => array( self::$post_ids['publish'] ) ) );
@@ -3537,7 +3557,7 @@ EOF;
 	/**
 	 * @ticket 53675
 	 */
-	function test_wp_filter_content_tags_with_wp_get_loading_attr_default() {
+	public function test_wp_filter_content_tags_with_wp_get_loading_attr_default() {
 		global $wp_query, $wp_the_query;
 
 		$img1         = get_image_tag( self::$large_id, '', '', '', 'large' );
@@ -3625,129 +3645,95 @@ EOF;
 	}
 
 	/**
-	 * Test the wp_default_image_output_mapping function.
+	 * Test that generated files with the `image_editor_output_format` applied use the correct
+	 * quality level based on their mime type.
 	 *
-	 * @ticket 55443
+	 * @ticket 56442
 	 */
-	public function test_wp_default_image_output_mapping() {
-		$mapping = wp_default_image_output_mapping( array(), 'test.jpg', 'image/jpeg', '' );
-		$this->assertSame( array( 'image/jpeg' => 'image/webp' ), $mapping );
-	}
+	public function test_quality_with_image_conversion_file_sizes() {
+		add_filter( 'image_editor_output_format', array( $this, 'image_editor_output_jpeg' ) );
+		$temp_dir = get_temp_dir();
+		$file     = $temp_dir . '/33772.jpg';
+		copy( DIR_TESTDATA . '/images/33772.jpg', $file );
 
-	/**
-	 * Test that wp_default_image_output_mapping doesn't overwrite existing mappings.
-	 *
-	 * @ticket 55443
-	 */
-	public function test_wp_default_image_output_mapping_existing() {
-		$mapping = array( 'mime/png' => 'mime/webp' );
-		$mapping = wp_default_image_output_mapping( $mapping, 'test.jpg', 'image/jpeg', '' );
-		$this->assertSame(
+		// Set JPEG output quality very low and WebP quality very high, this should force all generated WebP images to
+		// be larger than the the matching generated JPEGs.
+		add_filter( 'wp_editor_set_quality', array( $this, 'image_editor_change_quality_low_jpeg' ), 10, 2 );
+
+		$editor = wp_get_image_editor( $file );
+
+		// Verify that the selected editor supports WebP output.
+		if ( ! $editor->supports_mime_type( 'image/webp' ) ) {
+			$this->markTestSkipped( 'WebP is not supported by the selected image editor.' );
+		}
+
+		$attachment_id = self::factory()->attachment->create_object(
 			array(
-				'mime/png'   => 'mime/webp',
-				'image/jpeg' => 'image/webp',
-			),
-			$mapping
+				'post_mime_type' => 'image/jpeg',
+				'file'           => $file,
+			)
 		);
-	}
 
-	/**
-	 * Test that the image editor default output for JPEGs is WebP.
-	 *
-	 * @ticket 55443
-	 */
-	public function test_wp_image_editor_default_output_maps_to_webp() {
-		remove_filter( 'image_editor_output_format', '__return_empty_array' );
+		add_filter( 'big_image_size_threshold', array( $this, 'add_big_image_size_threshold' ) );
 
-		$editor = wp_get_image_editor( DIR_TESTDATA . '/images/canola.jpg' );
-		$this->assertNotWPError( $editor );
+		// Generate all sizes as JPEGs.
+		$jpeg_sizes = wp_generate_attachment_metadata( $attachment_id, $file );
+		remove_filter( 'image_editor_output_format', array( $this, 'image_editor_output_jpeg' ) );
 
-		$resized = $editor->resize( 100, 100, false );
-		$this->assertNotWPError( $resized );
+		// Generate all sizes as WebP.
+		add_filter( 'image_editor_output_format', array( $this, 'image_editor_output_webp' ) );
+		$webp_sizes = wp_generate_attachment_metadata( $attachment_id, $file );
+		remove_filter( 'image_editor_output_format', array( $this, 'image_editor_output_webp' ) );
 
-		$saved = $editor->save();
-		$this->assertNotWPError( $saved );
+		// The main (scaled) image: the JPEG should be smaller than the WebP.
+		$this->assertLessThan( $webp_sizes['filesize'], $jpeg_sizes['filesize'], 'The JPEG should be smaller than the WebP.' );
 
-		if ( $editor->supports_mime_type( 'image/webp' ) ) {
-			$this->assertSame( 'image/webp', $saved['mime-type'] );
-			$this->assertSame( 'canola-100x75-jpg.webp', $saved['file'] );
-		} else {
-			$this->assertSame( 'image/jpeg', $saved['mime-type'] );
-			$this->assertSame( 'canola-100x75.jpg', $saved['file'] );
+		// Sub-sizes: for each size, the JPEGs should be smaller than the WebP.
+		$sizes_to_compare = array_intersect_key( $jpeg_sizes['sizes'], $webp_sizes['sizes'] );
+		foreach ( $sizes_to_compare as $size => $size_data ) {
+			$this->assertLessThan( $webp_sizes['sizes'][ $size ]['filesize'], $jpeg_sizes['sizes'][ $size ]['filesize'] );
 		}
 	}
 
 	/**
-	 * @ticket 56526
-	 * @dataProvider data_wp_default_image_output_mapping_size_filter
+	 * Add threshold to create a `-scaled` output image for testing.
 	 */
-	public function test_wp_default_image_output_mapping_size_filter( $size_name, $filter_callback, $expects_webp ) {
-		remove_all_filters( 'wp_image_sizes_with_additional_mime_type_support' );
-		if ( $filter_callback ) {
-			add_filter( 'wp_image_sizes_with_additional_mime_type_support', $filter_callback );
-		}
+	public function add_big_image_size_threshold() {
+		return 1000;
+	}
+
+	/**
+	 * Output JPEG files.
+	 */
+	public function image_editor_output_jpeg() {
+		return array( 'image/jpeg' => 'image/jpeg' );
+	}
+
+	/**
+	 * Output WebP files.
+	 */
+	public function image_editor_output_webp() {
+		return array( 'image/jpeg' => 'image/webp' );
+	}
 
-		$mapping = wp_default_image_output_mapping( array(), 'test.jpg', 'image/jpeg', $size_name );
-		if ( $expects_webp ) {
-			$this->assertSame( array( 'image/jpeg' => 'image/webp' ), $mapping );
+	/**
+	 * Changes the quality using very low quality for JPEGs and very high quality
+	 * for WebPs, used to verify the filter is applying correctly.
+	 *
+	 * @param int    $quality   Default quality.
+	 * @param string $mime_type Image mime-type.
+	 * @return int The changed quality.
+	 */
+	public function image_editor_change_quality_low_jpeg( $quality, $mime_type ) {
+		if ( 'image/jpeg' === $mime_type ) {
+			return 1;
+		} elseif ( 'image/webp' === $mime_type ) {
+			return 100;
 		} else {
-			$this->assertSame( array(), $mapping );
+			return 30;
 		}
 	}
 
-	public function data_wp_default_image_output_mapping_size_filter() {
-		return array(
-			'default size thumbnail'    => array(
-				'thumbnail',
-				null,
-				true,
-			),
-			'default size medium'       => array(
-				'medium',
-				null,
-				true,
-			),
-			'default size medium_large' => array(
-				'medium_large',
-				null,
-				true,
-			),
-			'default size large'        => array(
-				'large',
-				null,
-				true,
-			),
-			'default size unset'        => array(
-				'medium',
-				function( $enabled_sizes ) {
-					unset( $enabled_sizes['medium'] );
-					return $enabled_sizes;
-				},
-				false,
-			),
-			'default size set to false' => array(
-				'medium',
-				function( $enabled_sizes ) {
-					$enabled_sizes['medium'] = false;
-					return $enabled_sizes;
-				},
-				false,
-			),
-			'custom size'               => array(
-				'custom',
-				null,
-				false,
-			),
-			'custom size opted in'      => array(
-				'custom',
-				function( $enabled_sizes ) {
-					$enabled_sizes['custom'] = true;
-					return $enabled_sizes;
-				},
-				true,
-			),
-		);
-	}
 }
 
 /**
diff --git a/tests/media/wpGenerateAttachmentMetadata.php b/tests/media/wpGenerateAttachmentMetadata.php
new file mode 100644
index 0000000000..82fe7dabd6
--- /dev/null
+++ b/tests/media/wpGenerateAttachmentMetadata.php
@@ -0,0 +1,89 @@
+<?php
+
+/**
+ * Tests for the `wp_generate_attachment_metadata()` function.
+ *
+ * @group media
+ * @covers ::wp_generate_attachment_metadata
+ */
+class Tests_Media_wpGenerateAttachmentMetadata extends WP_UnitTestCase {
+
+	public function tear_down() {
+		$this->remove_added_uploads();
+
+		parent::tear_down();
+	}
+
+	/**
+	 * Tests that filesize meta is generated for JPEGs.
+	 *
+	 * @ticket 49412
+	 *
+	 * @covers ::wp_create_image_subsizes
+	 */
+	public function test_wp_generate_attachment_metadata_includes_filesize_in_jpg_meta() {
+		$attachment = $this->factory->attachment->create_upload_object( DIR_TESTDATA . '/images/canola.jpg' );
+
+		$metadata = wp_get_attachment_metadata( $attachment );
+
+		$this->assertSame( wp_filesize( get_attached_file( $attachment ) ), $metadata['filesize'] );
+
+		foreach ( $metadata['sizes'] as $intermediate_size ) {
+			$this->assertArrayHasKey( 'filesize', $intermediate_size );
+			$this->assertNotEmpty( $intermediate_size['filesize'] );
+			$this->assertIsNumeric( $intermediate_size['filesize'] );
+		}
+	}
+
+	/**
+	 * Checks that filesize meta is generated for PNGs.
+	 *
+	 * @ticket 49412
+	 *
+	 * @covers ::wp_create_image_subsizes
+	 */
+	public function test_wp_generate_attachment_metadata_includes_filesize_in_png_meta() {
+		$attachment = $this->factory->attachment->create_upload_object( DIR_TESTDATA . '/images/test-image.png' );
+
+		$metadata = wp_get_attachment_metadata( $attachment );
+
+		$this->assertSame( wp_filesize( get_attached_file( $attachment ) ), $metadata['filesize'] );
+	}
+
+	/**
+	 * Checks that filesize meta is generated for PDFs.
+	 *
+	 * @ticket 49412
+	 */
+	public function test_wp_generate_attachment_metadata_includes_filesize_in_pdf_meta() {
+		$attachment = $this->factory->attachment->create_upload_object( DIR_TESTDATA . '/images/wordpress-gsoc-flyer.pdf' );
+
+		$metadata = wp_get_attachment_metadata( $attachment );
+
+		$this->assertSame( wp_filesize( get_attached_file( $attachment ) ), $metadata['filesize'] );
+	}
+
+	/**
+	 * Checks that filesize meta is generated for PSDs.
+	 *
+	 * @ticket 49412
+	 */
+	public function test_wp_generate_attachment_metadata_includes_filesize_in_psd_meta() {
+		if ( is_multisite() ) {
+			// PSD mime type is not allowed by default on multisite.
+			add_filter(
+				'upload_mimes',
+				static function( $mimes ) {
+					$mimes['psd'] = 'application/octet-stream';
+					return $mimes;
+				}
+			);
+		}
+
+		$attachment = $this->factory->attachment->create_upload_object( DIR_TESTDATA . '/images/test-image.psd' );
+
+		$metadata = wp_get_attachment_metadata( $attachment );
+
+		$this->assertSame( wp_filesize( get_attached_file( $attachment ) ), $metadata['filesize'] );
+	}
+}
diff --git a/tests/media/wpImageTagAddDecodingAttr.php b/tests/media/wpImageTagAddDecodingAttr.php
index 76fa203b7e..3ffe1bc6b4 100644
--- a/tests/media/wpImageTagAddDecodingAttr.php
+++ b/tests/media/wpImageTagAddDecodingAttr.php
@@ -1,7 +1,7 @@
 <?php
 
 /**
- * Tests the `wp_img_tag_add_decoding_attr()` function.
+ * Tests for the `wp_img_tag_add_decoding_attr()` function.
  *
  * @group media
  * @covers ::wp_img_tag_add_decoding_attr
diff --git a/tests/menu/wp-nav-menu.php b/tests/menu/wp-nav-menu.php
new file mode 100644
index 0000000000..08f105be9a
--- /dev/null
+++ b/tests/menu/wp-nav-menu.php
@@ -0,0 +1,200 @@
+<?php
+
+/**
+ * @group menu
+ *
+ * @covers ::wp_nav_menu
+ */
+class Tests_Menu_wpNavMenu extends WP_UnitTestCase {
+
+	private static $menu_id        = 0;
+	private static $lvl0_menu_item = 0;
+	private static $lvl1_menu_item = 0;
+	private static $lvl2_menu_item = 0;
+	private static $lvl3_menu_item = 0;
+
+	public static function set_up_before_class() {
+		parent::set_up_before_class();
+
+		// Create nav menu.
+		self::$menu_id = wp_create_nav_menu( 'test' );
+
+		// Create lvl0 menu item.
+		self::$lvl0_menu_item = wp_update_nav_menu_item(
+			self::$menu_id,
+			0,
+			array(
+				'menu-item-title'  => 'Root menu item',
+				'menu-item-url'    => '#',
+				'menu-item-status' => 'publish',
+			)
+		);
+
+		// Create lvl1 menu item.
+		self::$lvl1_menu_item = wp_update_nav_menu_item(
+			self::$menu_id,
+			0,
+			array(
+				'menu-item-title'     => 'Lvl1 menu item',
+				'menu-item-url'       => '#',
+				'menu-item-parent-id' => self::$lvl0_menu_item,
+				'menu-item-status'    => 'publish',
+			)
+		);
+
+		// Create lvl2 menu item.
+		self::$lvl2_menu_item = wp_update_nav_menu_item(
+			self::$menu_id,
+			0,
+			array(
+				'menu-item-title'     => 'Lvl2 menu item',
+				'menu-item-url'       => '#',
+				'menu-item-parent-id' => self::$lvl1_menu_item,
+				'menu-item-status'    => 'publish',
+			)
+		);
+
+		// Create lvl3 menu item.
+		self::$lvl3_menu_item = wp_update_nav_menu_item(
+			self::$menu_id,
+			0,
+			array(
+				'menu-item-title'     => 'Lvl3 menu item',
+				'menu-item-url'       => '#',
+				'menu-item-parent-id' => self::$lvl2_menu_item,
+				'menu-item-status'    => 'publish',
+			)
+		);
+
+		/*
+		 * This filter is used to prevent reusing a menu item ID more that once.
+		 * It caused the tests to fail after the first one since the IDs are missing
+		 * from the HTML generated by `wp_nav_menu()`.
+		 *
+		 * To allow the tests to pass, we remove the filter before running them
+		 * and add it back after they ran ({@see Tests_Menu_wpNavMenu::tear_down_after_class()}).
+		 */
+		remove_filter( 'nav_menu_item_id', '_nav_menu_item_id_use_once' );
+	}
+
+	public static function tear_down_after_class() {
+		wp_delete_nav_menu( self::$menu_id );
+
+		/*
+		 * This filter was removed to let the tests pass and needs to be added back
+		 * ({@see Tests_Menu_wpNavMenu::set_up_before_class}).
+		 */
+		add_filter( 'nav_menu_item_id', '_nav_menu_item_id_use_once', 10, 2 );
+
+		parent::tear_down_after_class();
+	}
+
+	/**
+	 * Tests that all menu items containing children have the CSS class `menu-item-has-children`
+	 * when displaying the menu without specifying a custom depth.
+	 *
+	 * @ticket 28620
+	 * @ticket 56946
+	 */
+	public function test_wp_nav_menu_should_have_has_children_class_without_custom_depth() {
+
+		// Render the menu with all its hierarchy.
+		$menu_html = wp_nav_menu(
+			array(
+				'menu' => self::$menu_id,
+				'echo' => false,
+			)
+		);
+
+		$this->assertStringContainsString(
+			sprintf(
+				'<li id="menu-item-%1$d" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-has-children menu-item-%1$d">',
+				self::$lvl0_menu_item
+			),
+			$menu_html,
+			'Level 0 should be present in the HTML output and have the `menu-item-has-children` class.'
+		);
+
+		$this->assertStringContainsString(
+			sprintf(
+				'<li id="menu-item-%1$d" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-has-children menu-item-%1$d">',
+				self::$lvl1_menu_item
+			),
+			$menu_html,
+			'Level 1 should be present in the HTML output and have the `menu-item-has-children` class.'
+		);
+
+		$this->assertStringContainsString(
+			sprintf(
+				'<li id="menu-item-%1$d" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-has-children menu-item-%1$d">',
+				self::$lvl2_menu_item
+			),
+			$menu_html,
+			'Level 2 should be present in the HTML output and have the `menu-item-has-children` class.'
+		);
+
+		$this->assertStringContainsString(
+			sprintf(
+				'<li id="menu-item-%1$d" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-%1$d">',
+				self::$lvl3_menu_item
+			),
+			$menu_html,
+			'Level 3 should be present in the HTML output and not have the `menu-item-has-children` class since it has no children.'
+		);
+	}
+
+	/**
+	 * Tests that when displaying a menu with a custom depth, the last menu item doesn't have the CSS class
+	 * `menu-item-has-children` even if it's the case when displaying the full menu.
+	 *
+	 * @ticket 28620
+	 * @ticket 56946
+	 */
+	public function test_wp_nav_menu_should_not_have_has_children_class_with_custom_depth() {
+
+		// Render the menu limited to 1 level of hierarchy (Lvl0 + Lvl1).
+		$menu_html = wp_nav_menu(
+			array(
+				'menu'  => self::$menu_id,
+				'depth' => 3,
+				'echo'  => false,
+			)
+		);
+
+		$this->assertStringContainsString(
+			sprintf(
+				'<li id="menu-item-%1$d" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-has-children menu-item-%1$d">',
+				self::$lvl0_menu_item
+			),
+			$menu_html,
+			'Level 0 should be present in the HTML output and have the `menu-item-has-children` class.'
+		);
+
+		$this->assertStringContainsString(
+			sprintf(
+				'<li id="menu-item-%1$d" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-has-children menu-item-%1$d">',
+				self::$lvl1_menu_item
+			),
+			$menu_html,
+			'Level 1 should be present in the HTML output and have the `menu-item-has-children` class.'
+		);
+
+		$this->assertStringContainsString(
+			sprintf(
+				'<li id="menu-item-%1$d" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-%1$d">',
+				self::$lvl2_menu_item
+			),
+			$menu_html,
+			'Level 2 should be present in the HTML output and not have the `menu-item-has-children` class since it is the last item to be rendered.'
+		);
+
+		$this->assertStringNotContainsString(
+			sprintf(
+				'<li id="menu-item-%d"',
+				self::$lvl3_menu_item
+			),
+			$menu_html,
+			'Level 3 should not be present in the HTML output.'
+		);
+	}
+}
diff --git a/tests/menu/wpExpandNavMenuPostData.php b/tests/menu/wpExpandNavMenuPostData.php
index 7d5c21fde8..b7e6b17c23 100644
--- a/tests/menu/wpExpandNavMenuPostData.php
+++ b/tests/menu/wpExpandNavMenuPostData.php
@@ -13,7 +13,7 @@ class Tests_Menu_WpExpandNavMenuPostData extends WP_UnitTestCase {
 		}
 
 		$data                   = array();
-		$data[0]                = new StdClass;
+		$data[0]                = new StdClass();
 		$data[0]->name          = 'yesorno';
 		$data[0]->value         = 'yes';
 		$_POST['nav-menu-data'] = addslashes( json_encode( $data ) );
@@ -36,7 +36,7 @@ class Tests_Menu_WpExpandNavMenuPostData extends WP_UnitTestCase {
 		}
 
 		$data                   = array();
-		$data[0]                = new StdClass;
+		$data[0]                = new StdClass();
 		$data[0]->name          = 'would[1][do][the][trick]';
 		$data[0]->value         = 'yes';
 		$_POST['nav-menu-data'] = addslashes( json_encode( $data ) );
@@ -66,13 +66,13 @@ class Tests_Menu_WpExpandNavMenuPostData extends WP_UnitTestCase {
 		}
 
 		$data                   = array();
-		$data[0]                = new StdClass;
+		$data[0]                = new StdClass();
 		$data[0]->name          = 'would[1][do][the][trick]';
 		$data[0]->value         = 'yes';
-		$data[1]                = new StdClass;
+		$data[1]                = new StdClass();
 		$data[1]->name          = 'would[2][do][the][trick]';
 		$data[1]->value         = 'yes';
-		$data[2]                = new StdClass;
+		$data[2]                = new StdClass();
 		$data[2]->name          = 'would[2][do][the][job]';
 		$data[2]->value         = 'yes';
 		$_POST['nav-menu-data'] = addslashes( json_encode( $data ) );
diff --git a/tests/menu/wpNavMenuRemoveMenuItemHasChildrenClass.php b/tests/menu/wpNavMenuRemoveMenuItemHasChildrenClass.php
new file mode 100644
index 0000000000..535eba068e
--- /dev/null
+++ b/tests/menu/wpNavMenuRemoveMenuItemHasChildrenClass.php
@@ -0,0 +1,100 @@
+<?php
+
+/**
+ * @group menu
+ */
+class Tests_Menu_WpNavMenuRemoveMenuItemHasChildrenClass extends WP_UnitTestCase {
+
+	/**
+	 * Ensure calling filter in legacy ways does not throw an error.
+	 *
+	 * @ticket 56926
+	 */
+	public function test_legacy_filter_should_not_throw_an_error() {
+		$classes = array( 'menu-item-has-children', 'menu-item', 'menu-item-123' );
+
+		$menu_item = (object) array(
+			'classes' => $classes,
+		);
+
+		$args = (object) array(
+			'depth' => 2,
+		);
+
+		$depth = 2;
+
+		$class_names = implode( ' ', apply_filters( 'nav_menu_css_class', array_filter( $classes ), $menu_item ) );
+		$this->assertStringContainsString( 'menu-item-has-children', $class_names, 'Class name should be retained when filter is called with two arguments.' );
+		$class_names = implode( ' ', apply_filters( 'nav_menu_css_class', array_filter( $classes ), $menu_item, $args ) );
+		$this->assertStringContainsString( 'menu-item-has-children', $class_names, 'Class name should be retained when filter is called with three arguments.' );
+		$class_names = implode( ' ', apply_filters( 'nav_menu_css_class', array_filter( $classes ), $menu_item, $args, $depth ) );
+		$this->assertStringNotContainsString( 'menu-item-has-children', $class_names, 'Class name should not be retained when filter is called with four arguments.' );
+	}
+
+	/**
+	 * Ensure menu-item-has-children class is removed or retained as expected.
+	 *
+	 * @dataProvider data_menu_item_has_children_class_should_be_removed_or_retained_as_expected
+	 * @ticket 56926
+	 */
+	public function test_menu_item_has_children_class_should_be_removed_or_retained_as_expected( $args, $depth, $should_be_retained ) {
+		$classes = array( 'menu-item-has-children', 'menu-item', 'menu-item-123' );
+
+		$menu_item = (object) array(
+			'classes' => $classes,
+		);
+
+		$class_names = wp_nav_menu_remove_menu_item_has_children_class( $classes, $menu_item, $args, $depth );
+		if ( $should_be_retained ) {
+			$this->assertContains( 'menu-item-has-children', $class_names, 'Class name should be retained.' );
+			return;
+		}
+
+		$this->assertNotContains( 'menu-item-has-children', $class_names, 'Class name should not be retained.' );
+	}
+
+	/**
+	 * Data provider.
+	 *
+	 * @return array
+	 */
+	public function data_menu_item_has_children_class_should_be_removed_or_retained_as_expected() {
+		return array(
+			'Depth not set'                          => array(
+				'args'               => (object) array( 'depth' => 1 ),
+				'depth'              => false,
+				'should_be_retained' => true,
+			),
+			'Neither depth nor args set'             => array(
+				'args'               => false,
+				'depth'              => false,
+				'should_be_retained' => true,
+			),
+			'Max depth is set to minus 1'            => array(
+				'args'               => (object) array( 'depth' => -1 ),
+				'depth'              => 1,
+				'should_be_retained' => false,
+			),
+			'Max depth is set to zero'               => array(
+				'args'               => (object) array( 'depth' => 0 ),
+				'depth'              => 1,
+				'should_be_retained' => true,
+			),
+			'Item depth exceeds max depth'           => array(
+				'args'               => (object) array( 'depth' => 2 ),
+				'depth'              => 3,
+				'should_be_retained' => false,
+			),
+			'Item depth is lower than max depth'     => array(
+				'args'               => (object) array( 'depth' => 5 ),
+				'depth'              => 3,
+				'should_be_retained' => true,
+			),
+			'Item depth is one lower than max depth' => array(
+				'args'               => (object) array( 'depth' => 2 ),
+				'depth'              => 1,
+				'should_be_retained' => false, // Depth is zero-based, max depth is not.
+			),
+		);
+	}
+}
diff --git a/tests/meta.php b/tests/meta.php
index d49f106821..83dcefd1ba 100644
--- a/tests/meta.php
+++ b/tests/meta.php
@@ -401,7 +401,7 @@ class Tests_Meta extends WP_UnitTestCase {
 	 * @ticket 15030
 	 */
 	public function test_get_metadata_with_empty_key_object_value() {
-		$data      = new stdClass;
+		$data      = new stdClass();
 		$data->foo = 'bar';
 		$value     = serialize( $data );
 		add_metadata( 'user', $this->author->ID, 'foo', $data );
diff --git a/tests/meta/isProtectedMeta.php b/tests/meta/isProtectedMeta.php
index c204d381f5..46f20e72fa 100644
--- a/tests/meta/isProtectedMeta.php
+++ b/tests/meta/isProtectedMeta.php
@@ -17,10 +17,10 @@ class Tests_Meta_isProtectedMeta extends WP_UnitTestCase {
 		$protected_keys = array(
 			array( '_wp_attachment' ),
 		);
-		for ( $i = 0, $max = 31; $i < $max; $i ++ ) {
+		for ( $i = 0, $max = 31; $i < $max; $i++ ) {
 			$protected_keys[] = array( chr( $i ) . '_wp_attachment' );
 		}
-		for ( $i = 127, $max = 159; $i <= $max; $i ++ ) {
+		for ( $i = 127, $max = 159; $i <= $max; $i++ ) {
 			$protected_keys[] = array( chr( $i ) . '_wp_attachment' );
 		}
 		$protected_keys[] = array( chr( 95 ) . '_wp_attachment' );
@@ -42,10 +42,10 @@ class Tests_Meta_isProtectedMeta extends WP_UnitTestCase {
 			array( 'ąŌ_not_so_protected_meta' ),
 		);
 
-		for ( $i = 32, $max = 94; $i <= $max; $i ++ ) {
+		for ( $i = 32, $max = 94; $i <= $max; $i++ ) {
 			$unprotected_keys[] = array( chr( $i ) . '_wp_attachment' );
 		}
-		for ( $i = 96, $max = 126; $i <= $max; $i ++ ) {
+		for ( $i = 96, $max = 126; $i <= $max; $i++ ) {
 			$unprotected_keys[] = array( chr( $i ) . '_wp_attachment' );
 		}
 
diff --git a/tests/meta/updateMetadata.php b/tests/meta/updateMetadata.php
index 5e376425b6..7f5aff32cd 100644
--- a/tests/meta/updateMetadata.php
+++ b/tests/meta/updateMetadata.php
@@ -27,4 +27,83 @@ class Tests_Meta_UpdateMetadata extends WP_UnitTestCase {
 		$found = get_metadata( 'post', 123, 'foo\foo', true );
 		$this->assertSame( 'baz', $found );
 	}
+
+	/**
+	 * @ticket 54316
+	 *
+	 * @group user
+	 *
+	 * @covers ::clean_user_cache
+	 *
+	 * @global wpdb $wpdb WordPress database abstraction object.
+	 */
+	public function test_clear_user_metadata_caches() {
+		global $wpdb;
+
+		$user_id = self::factory()->user->create();
+
+		update_metadata( 'user', $user_id, 'key', 'value1' );
+
+		$found = get_metadata( 'user', $user_id, 'key', true );
+		$this->assertSame( 'value1', $found );
+
+		// Simulate updating the DB from outside of WordPress.
+		$wpdb->update(
+			$wpdb->usermeta,
+			array(
+				'meta_value' => 'value2',
+			),
+			array(
+				'user_id'  => $user_id,
+				'meta_key' => 'key',
+			)
+		);
+
+		// Clear the user caches.
+		clean_user_cache( $user_id );
+
+		// Verify metadata cache was cleared.
+		$found = get_metadata( 'user', $user_id, 'key', true );
+		$this->assertSame( 'value2', $found );
+	}
+
+	/**
+	 * @ticket 54316
+	 *
+	 * @group user
+	 *
+	 * @covers ::clean_user_cache
+	 *
+	 * @global wpdb $wpdb WordPress database abstraction object.
+	 */
+	public function test_clear_post_metadata_caches() {
+		global $wpdb;
+
+		$post_id = self::factory()->post->create();
+
+		update_metadata( 'post', $post_id, 'key', 'value1' );
+
+		$found = get_metadata( 'post', $post_id, 'key', true );
+		$this->assertSame( 'value1', $found );
+
+		// Simulate updating the DB from outside of WordPress.
+		$wpdb->update(
+			$wpdb->postmeta,
+			array(
+				'meta_value' => 'value2',
+			),
+			array(
+				'post_id'  => $post_id,
+				'meta_key' => 'key',
+			)
+		);
+
+		// Clear the post caches.
+		clean_post_cache( $post_id );
+
+		// Verify metadata cache was cleared.
+		$found = get_metadata( 'post', $post_id, 'key', true );
+		$this->assertSame( 'value2', $found );
+	}
+
 }
diff --git a/tests/multisite/getMainSiteId.php b/tests/multisite/getMainSiteId.php
index 3a6e9c4d8c..f68c5409e7 100644
--- a/tests/multisite/getMainSiteId.php
+++ b/tests/multisite/getMainSiteId.php
@@ -88,6 +88,17 @@ if ( is_multisite() ) :
 			$this->assertSame( $main_site_id, $result );
 		}
 
+		/**
+		 * @ticket 55802
+		 */
+		public function test_get_main_site_id_with_different_network_cache_id() {
+			$this->assertSame( self::$site_ids['wordpress.org/'], get_main_site_id( self::$network_ids['wordpress.org/'] ), 'Main blog id needs to match blog id of wordpress.org/' );
+			$this->assertSame( self::$site_ids['wordpress.org/'], (int) get_network_option( self::$network_ids['wordpress.org/'], 'main_site' ), 'Network option needs to match blog id of wordpress.org/' );
+
+			$this->assertSame( 0, get_main_site_id( self::$network_ids['wp.org/'] ), 'Main blog id should not be found' );
+			$this->assertSame( 0, (int) get_network_option( self::$network_ids['wp.org/'], 'main_site' ), 'Network option should not be found' );
+		}
+
 		/**
 		 * @ticket 29684
 		 */
diff --git a/tests/multisite/msFilesRewriting.php b/tests/multisite/msFilesRewriting.php
index 38818b5028..7d469769ba 100644
--- a/tests/multisite/msFilesRewriting.php
+++ b/tests/multisite/msFilesRewriting.php
@@ -72,6 +72,8 @@ if ( is_multisite() ) :
 			// The file on the main site should still exist. The file on the deleted site should not.
 			$this->assertFileExists( $file1['file'] );
 			$this->assertFileDoesNotExist( $file2['file'] );
+
+			unlink( $file1['file'] );
 		}
 	}
 
diff --git a/tests/multisite/network.php b/tests/multisite/network.php
index db5cfb25ca..630f76ebaf 100644
--- a/tests/multisite/network.php
+++ b/tests/multisite/network.php
@@ -191,7 +191,7 @@ if ( is_multisite() ) :
 			}
 			wp_update_network_counts();
 
-			$this->assertEquals( $site_count_start + 1, $actual );
+			$this->assertSame( $site_count_start + 1, $actual );
 		}
 
 		/**
@@ -205,8 +205,6 @@ if ( is_multisite() ) :
 			$this->assertEquals( count( self::$different_site_ids ), $site_count );
 		}
 
-
-
 		public function test_active_network_plugins() {
 			$path = 'hello.php';
 
@@ -397,6 +395,54 @@ if ( is_multisite() ) :
 			$this->assertGreaterThan( 0, $user_count );
 		}
 
+		/**
+		 * Test the default behavior of upload_size_limit_filter.
+		 * If any default option is changed, the function returns the min value between the
+		 * parameter passed and the `fileupload_maxk` site option (1500Kb by default)
+		 *
+		 * @ticket 55926
+		 */
+		public function test_upload_size_limit_filter() {
+			$return = upload_size_limit_filter( 1499 * KB_IN_BYTES );
+			$this->assertSame( 1499 * KB_IN_BYTES, $return );
+			$return = upload_size_limit_filter( 1501 * KB_IN_BYTES );
+			$this->assertSame( 1500 * KB_IN_BYTES, $return );
+		}
+
+		/**
+		 * Test if upload_size_limit_filter behaves as expected when the `fileupload_maxk` is 0 or an empty string.
+		 *
+		 * @ticket 55926
+		 * @dataProvider data_upload_size_limit_filter_empty_fileupload_maxk
+		 */
+		public function test_upload_size_limit_filter_empty_fileupload_maxk( $callable_set_fileupload_maxk ) {
+			add_filter( 'site_option_fileupload_maxk', $callable_set_fileupload_maxk );
+			$return = upload_size_limit_filter( 1500 );
+			$this->assertSame( 0, $return );
+		}
+
+		/**
+		 * @ticket 55926
+		 */
+		public function data_upload_size_limit_filter_empty_fileupload_maxk() {
+			return array(
+				array( '__return_zero' ),
+				array( '__return_empty_string' ),
+			);
+		}
+
+		/**
+		 * When upload_space_check is enabled, the space allowed is also considered by `upload_size_limit_filter`.
+		 *
+		 * @ticket 55926
+		 */
+		public function test_upload_size_limit_filter_when_upload_space_check_enabled() {
+			add_filter( 'get_space_allowed', '__return_zero' );
+			add_filter( 'site_option_upload_space_check_disabled', '__return_false' );
+			$return = upload_size_limit_filter( 100 );
+			$this->assertSame( 0, $return );
+		}
+
 		/**
 		 * @ticket 40489
 		 * @dataProvider data_wp_is_large_network
diff --git a/tests/multisite/site.php b/tests/multisite/site.php
index 58057feef2..0d1667fbae 100644
--- a/tests/multisite/site.php
+++ b/tests/multisite/site.php
@@ -398,6 +398,8 @@ if ( is_multisite() ) :
 			// The file on the main site should still exist. The file on the deleted site should not.
 			$this->assertFileExists( $file1['file'] );
 			$this->assertFileDoesNotExist( $file2['file'] );
+
+			unlink( $file1['file'] );
 		}
 
 		public function test_wpmu_update_blogs_date() {
@@ -412,14 +414,6 @@ if ( is_multisite() ) :
 			$this->assertEqualsWithDelta( $current_time, strtotime( $blog->last_updated ), 2, 'The dates should be equal' );
 		}
 
-		/**
-		 * Provide a counter to determine that hooks are firing when intended.
-		 */
-		public function action_counter_cb() {
-			global $test_action_counter;
-			$test_action_counter++;
-		}
-
 		/**
 		 * Test cached data for a site that does not exist and then again after it exists.
 		 *
@@ -448,274 +442,6 @@ if ( is_multisite() ) :
 			$this->assertEquals( $blog, wp_cache_get( $blog_id, 'blog-details' ) );
 		}
 
-		/**
-		 * Updating a field returns the sme value that was passed.
-		 */
-		public function test_update_blog_status() {
-			$result = update_blog_status( 1, 'spam', 0 );
-			$this->assertSame( 0, $result );
-		}
-
-		/**
-		 * Updating an invalid field returns the same value that was passed.
-		 */
-		public function test_update_blog_status_invalid_status() {
-			$result = update_blog_status( 1, 'doesnotexist', 'invalid' );
-			$this->assertSame( 'invalid', $result );
-		}
-
-		public function test_update_blog_status_make_ham_blog_action() {
-			global $test_action_counter;
-			$test_action_counter = 0;
-
-			$blog_id = self::factory()->blog->create();
-			update_blog_details( $blog_id, array( 'spam' => 1 ) );
-
-			add_action( 'make_ham_blog', array( $this, 'action_counter_cb' ), 10 );
-			update_blog_status( $blog_id, 'spam', 0 );
-			$blog = get_site( $blog_id );
-
-			$this->assertSame( '0', $blog->spam );
-			$this->assertSame( 1, $test_action_counter );
-
-			// The action should not fire if the status of 'spam' stays the same.
-			update_blog_status( $blog_id, 'spam', 0 );
-			$blog = get_site( $blog_id );
-
-			$this->assertSame( '0', $blog->spam );
-			$this->assertSame( 1, $test_action_counter );
-
-			remove_action( 'make_ham_blog', array( $this, 'action_counter_cb' ), 10 );
-		}
-
-		public function test_content_from_spam_blog_is_not_available() {
-			$spam_blog_id = self::factory()->blog->create();
-			switch_to_blog( $spam_blog_id );
-			$post_data      = array(
-				'post_title'   => 'Hello World!',
-				'post_content' => 'Hello world content',
-			);
-			$post_id        = self::factory()->post->create( $post_data );
-			$post           = get_post( $post_id );
-			$spam_permalink = site_url() . '/?p=' . $post->ID;
-			$spam_embed_url = get_post_embed_url( $post_id );
-
-			restore_current_blog();
-			$this->assertNotEmpty( $spam_permalink );
-			$this->assertSame( $post_data['post_title'], $post->post_title );
-
-			update_blog_status( $spam_blog_id, 'spam', 1 );
-
-			$post_id = self::factory()->post->create(
-				array(
-					'post_content' => "\n $spam_permalink \n",
-				)
-			);
-			$post    = get_post( $post_id );
-			$content = apply_filters( 'the_content', $post->post_content );
-
-			$this->assertStringNotContainsString( $post_data['post_title'], $content );
-			$this->assertStringNotContainsString( "src=\"{$spam_embed_url}#?", $content );
-		}
-
-		public function test_update_blog_status_make_spam_blog_action() {
-			global $test_action_counter;
-			$test_action_counter = 0;
-
-			$blog_id = self::factory()->blog->create();
-
-			add_action( 'make_spam_blog', array( $this, 'action_counter_cb' ), 10 );
-			update_blog_status( $blog_id, 'spam', 1 );
-			$blog = get_site( $blog_id );
-
-			$this->assertSame( '1', $blog->spam );
-			$this->assertSame( 1, $test_action_counter );
-
-			// The action should not fire if the status of 'spam' stays the same.
-			update_blog_status( $blog_id, 'spam', 1 );
-			$blog = get_site( $blog_id );
-
-			$this->assertSame( '1', $blog->spam );
-			$this->assertSame( 1, $test_action_counter );
-
-			remove_action( 'make_spam_blog', array( $this, 'action_counter_cb' ), 10 );
-		}
-
-		public function test_update_blog_status_archive_blog_action() {
-			global $test_action_counter;
-			$test_action_counter = 0;
-
-			$blog_id = self::factory()->blog->create();
-
-			add_action( 'archive_blog', array( $this, 'action_counter_cb' ), 10 );
-			update_blog_status( $blog_id, 'archived', 1 );
-			$blog = get_site( $blog_id );
-
-			$this->assertSame( '1', $blog->archived );
-			$this->assertSame( 1, $test_action_counter );
-
-			// The action should not fire if the status of 'archived' stays the same.
-			update_blog_status( $blog_id, 'archived', 1 );
-			$blog = get_site( $blog_id );
-
-			$this->assertSame( '1', $blog->archived );
-			$this->assertSame( 1, $test_action_counter );
-
-			remove_action( 'archive_blog', array( $this, 'action_counter_cb' ), 10 );
-		}
-
-		public function test_update_blog_status_unarchive_blog_action() {
-			global $test_action_counter;
-			$test_action_counter = 0;
-
-			$blog_id = self::factory()->blog->create();
-			update_blog_details( $blog_id, array( 'archived' => 1 ) );
-
-			add_action( 'unarchive_blog', array( $this, 'action_counter_cb' ), 10 );
-			update_blog_status( $blog_id, 'archived', 0 );
-			$blog = get_site( $blog_id );
-
-			$this->assertSame( '0', $blog->archived );
-			$this->assertSame( 1, $test_action_counter );
-
-			// The action should not fire if the status of 'archived' stays the same.
-			update_blog_status( $blog_id, 'archived', 0 );
-			$blog = get_site( $blog_id );
-			$this->assertSame( '0', $blog->archived );
-			$this->assertSame( 1, $test_action_counter );
-
-			remove_action( 'unarchive_blog', array( $this, 'action_counter_cb' ), 10 );
-		}
-
-		public function test_update_blog_status_make_delete_blog_action() {
-			global $test_action_counter;
-			$test_action_counter = 0;
-
-			$blog_id = self::factory()->blog->create();
-
-			add_action( 'make_delete_blog', array( $this, 'action_counter_cb' ), 10 );
-			update_blog_status( $blog_id, 'deleted', 1 );
-			$blog = get_site( $blog_id );
-
-			$this->assertSame( '1', $blog->deleted );
-			$this->assertSame( 1, $test_action_counter );
-
-			// The action should not fire if the status of 'deleted' stays the same.
-			update_blog_status( $blog_id, 'deleted', 1 );
-			$blog = get_site( $blog_id );
-
-			$this->assertSame( '1', $blog->deleted );
-			$this->assertSame( 1, $test_action_counter );
-
-			remove_action( 'make_delete_blog', array( $this, 'action_counter_cb' ), 10 );
-		}
-
-		public function test_update_blog_status_make_undelete_blog_action() {
-			global $test_action_counter;
-			$test_action_counter = 0;
-
-			$blog_id = self::factory()->blog->create();
-			update_blog_details( $blog_id, array( 'deleted' => 1 ) );
-
-			add_action( 'make_undelete_blog', array( $this, 'action_counter_cb' ), 10 );
-			update_blog_status( $blog_id, 'deleted', 0 );
-			$blog = get_site( $blog_id );
-
-			$this->assertSame( '0', $blog->deleted );
-			$this->assertSame( 1, $test_action_counter );
-
-			// The action should not fire if the status of 'deleted' stays the same.
-			update_blog_status( $blog_id, 'deleted', 0 );
-			$blog = get_site( $blog_id );
-
-			$this->assertSame( '0', $blog->deleted );
-			$this->assertSame( 1, $test_action_counter );
-
-			remove_action( 'make_undelete_blog', array( $this, 'action_counter_cb' ), 10 );
-		}
-
-		public function test_update_blog_status_mature_blog_action() {
-			global $test_action_counter;
-			$test_action_counter = 0;
-
-			$blog_id = self::factory()->blog->create();
-
-			add_action( 'mature_blog', array( $this, 'action_counter_cb' ), 10 );
-			update_blog_status( $blog_id, 'mature', 1 );
-			$blog = get_site( $blog_id );
-
-			$this->assertSame( '1', $blog->mature );
-			$this->assertSame( 1, $test_action_counter );
-
-			// The action should not fire if the status of 'mature' stays the same.
-			update_blog_status( $blog_id, 'mature', 1 );
-			$blog = get_site( $blog_id );
-
-			$this->assertSame( '1', $blog->mature );
-			$this->assertSame( 1, $test_action_counter );
-
-			remove_action( 'mature_blog', array( $this, 'action_counter_cb' ), 10 );
-		}
-
-		public function test_update_blog_status_unmature_blog_action() {
-			global $test_action_counter;
-			$test_action_counter = 0;
-
-			$blog_id = self::factory()->blog->create();
-			update_blog_details( $blog_id, array( 'mature' => 1 ) );
-
-			add_action( 'unmature_blog', array( $this, 'action_counter_cb' ), 10 );
-			update_blog_status( $blog_id, 'mature', 0 );
-
-			$blog = get_site( $blog_id );
-			$this->assertSame( '0', $blog->mature );
-			$this->assertSame( 1, $test_action_counter );
-
-			// The action should not fire if the status of 'mature' stays the same.
-			update_blog_status( $blog_id, 'mature', 0 );
-			$blog = get_site( $blog_id );
-
-			$this->assertSame( '0', $blog->mature );
-			$this->assertSame( 1, $test_action_counter );
-
-			remove_action( 'unmature_blog', array( $this, 'action_counter_cb' ), 10 );
-		}
-
-		public function test_update_blog_status_update_blog_public_action() {
-			global $test_action_counter;
-			$test_action_counter = 0;
-
-			$blog_id = self::factory()->blog->create();
-
-			add_action( 'update_blog_public', array( $this, 'action_counter_cb' ), 10 );
-			update_blog_status( $blog_id, 'public', 0 );
-
-			$blog = get_site( $blog_id );
-			$this->assertSame( '0', $blog->public );
-			$this->assertSame( 1, $test_action_counter );
-
-			// The action should not fire if the status of 'mature' stays the same.
-			update_blog_status( $blog_id, 'public', 0 );
-			$blog = get_site( $blog_id );
-
-			$this->assertSame( '0', $blog->public );
-			$this->assertSame( 1, $test_action_counter );
-
-			remove_action( 'update_blog_public', array( $this, 'action_counter_cb' ), 10 );
-		}
-
-		/**
-		 * @ticket 27952
-		 */
-		public function test_posts_count() {
-			self::factory()->post->create();
-			$post2 = self::factory()->post->create();
-			$this->assertSame( 2, get_site()->post_count );
-
-			wp_delete_post( $post2 );
-			$this->assertSame( 1, get_site()->post_count );
-		}
-
 		/**
 		 * @ticket 26410
 		 */
@@ -963,10 +689,10 @@ if ( is_multisite() ) :
 		}
 
 		/**
-		 * Tests returning the appropriate response for a invalid id given.
+		 * Tests returning an empty string for a non-existing ID.
 		 */
 		public function test_get_blogaddress_by_id_with_invalid_id() {
-			$blogaddress = get_blogaddress_by_id( 42 );
+			$blogaddress = get_blogaddress_by_id( PHP_INT_MAX );
 			$this->assertSame( '', $blogaddress );
 		}
 
@@ -1555,9 +1281,9 @@ if ( is_multisite() ) :
 			$result = wp_update_site( $site_id, array( 'public' => 1 ) );
 			$site3  = get_site( $site_id );
 
-			$this->assertEquals( 1, $site1->public );
-			$this->assertEquals( 0, $site2->public );
-			$this->assertEquals( 1, $site3->public );
+			$this->assertSame( '1', $site1->public );
+			$this->assertSame( '0', $site2->public );
+			$this->assertSame( '1', $site3->public );
 		}
 
 		/**
@@ -2399,8 +2125,10 @@ if ( is_multisite() ) :
 
 			$blog_id = wpmu_create_blog( 'testsite1.example.org', '/test', 'test', 1, array( 'public' => 1 ), 2 );
 
-			// Should not hit blog_details cache initialised in $this->populate_options_callback tirggered during
-			// populate_options callback's call of get_blog_details.
+			/*
+			 * Should not hit blog_details cache initialized in $this->populate_options_callback triggered during
+			 * populate_options callback's call of get_blog_details.
+			 */
 			$this->assertSame( 'http://testsite1.example.org/test', get_blog_details( $blog_id )->siteurl );
 			$this->assertSame( 'http://testsite1.example.org/test', get_site( $blog_id )->siteurl );
 
@@ -2433,7 +2161,7 @@ if ( is_multisite() ) :
 
 			wpmu_create_blog( 'testsite1.example.org', '/new-blog/', 'New Blog', get_current_user_id(), $meta, 1 );
 
-			$this->assertEquals( $expected_meta, $this->wp_initialize_site_meta );
+			$this->assertSameSetsWithIndex( $expected_meta, $this->wp_initialize_site_meta );
 
 			$this->wp_initialize_site_meta = array();
 		}
@@ -2534,8 +2262,8 @@ if ( is_multisite() ) :
 					),
 					array(
 						'public' => 0,
-						'WPLANG' => 'en_US',
 						'foo'    => 'bar',
+						'WPLANG' => 'en_US',
 					),
 				),
 			);
diff --git a/tests/multisite/updateBlogDetails.php b/tests/multisite/updateBlogDetails.php
index 80595ed99b..d3249a1261 100644
--- a/tests/multisite/updateBlogDetails.php
+++ b/tests/multisite/updateBlogDetails.php
@@ -7,6 +7,7 @@ if ( is_multisite() ) :
 	 * @group multisite
 	 */
 	class Tests_Multisite_UpdateBlogDetails extends WP_UnitTestCase {
+
 		/**
 		 * If `update_blog_details()` is called with any kind of empty arguments, it
 		 * should return false.
@@ -56,8 +57,7 @@ if ( is_multisite() ) :
 		 * @dataProvider data_flag_hooks
 		 */
 		public function test_update_blog_details_flag_action( $flag, $flag_value, $hook ) {
-			global $test_action_counter;
-			$test_action_counter = 0;
+			$test_action_counter = new MockAction();
 
 			$blog_id = self::factory()->blog->create();
 
@@ -66,7 +66,7 @@ if ( is_multisite() ) :
 				update_blog_details( $blog_id, array( $flag => '1' ) );
 			}
 
-			add_action( $hook, array( $this, 'action_counter_cb' ), 10 );
+			add_action( $hook, array( $test_action_counter, 'action' ) );
 
 			update_blog_details( $blog_id, array( $flag => $flag_value ) );
 			$blog = get_site( $blog_id );
@@ -74,15 +74,13 @@ if ( is_multisite() ) :
 			$this->assertSame( $flag_value, $blog->{$flag} );
 
 			// The hook attached to this flag should have fired once during update_blog_details().
-			$this->assertSame( 1, $test_action_counter );
+			$this->assertSame( 1, $test_action_counter->get_call_count() );
 
 			// Update the site to the exact same flag value for this flag.
 			update_blog_details( $blog_id, array( $flag => $flag_value ) );
 
 			// The hook attached to this flag should not have fired again.
-			$this->assertSame( 1, $test_action_counter );
-
-			remove_action( $hook, array( $this, 'action_counter_cb' ), 10 );
+			$this->assertSame( 1, $test_action_counter->get_call_count() );
 		}
 
 		public function data_flag_hooks() {
@@ -98,14 +96,6 @@ if ( is_multisite() ) :
 			);
 		}
 
-		/**
-		 * Provide a counter to determine that hooks are firing when intended.
-		 */
-		public function action_counter_cb() {
-			global $test_action_counter;
-			$test_action_counter++;
-		}
-
 		/**
 		 * When the path for a site is updated with update_blog_details(), the final path
 		 * should have a leading and trailing slash.
diff --git a/tests/multisite/updateBlogStatus.php b/tests/multisite/updateBlogStatus.php
new file mode 100644
index 0000000000..707b8fa66a
--- /dev/null
+++ b/tests/multisite/updateBlogStatus.php
@@ -0,0 +1,241 @@
+<?php
+
+if ( is_multisite() ) :
+
+	/**
+	 * @group ms-site
+	 * @group multisite
+	 */
+	class Tests_Multisite_UpdateBlogStatus extends WP_UnitTestCase {
+
+		/**
+		 * Updating a field returns the sme value that was passed.
+		 */
+		public function test_update_blog_status() {
+			$result = update_blog_status( 1, 'spam', 0 );
+			$this->assertSame( 0, $result );
+		}
+
+		/**
+		 * Updating an invalid field returns the same value that was passed.
+		 */
+		public function test_update_blog_status_invalid_status() {
+			$result = update_blog_status( 1, 'doesnotexist', 'invalid' );
+			$this->assertSame( 'invalid', $result );
+		}
+
+		public function test_update_blog_status_make_ham_blog_action() {
+			$test_action_counter = new MockAction();
+
+			$blog_id = self::factory()->blog->create();
+			update_blog_details( $blog_id, array( 'spam' => 1 ) );
+
+			add_action( 'make_ham_blog', array( $test_action_counter, 'action' ) );
+			update_blog_status( $blog_id, 'spam', 0 );
+			$blog = get_site( $blog_id );
+
+			$this->assertSame( '0', $blog->spam );
+			$this->assertSame( 1, $test_action_counter->get_call_count() );
+
+			// The action should not fire if the status of 'spam' stays the same.
+			update_blog_status( $blog_id, 'spam', 0 );
+			$blog = get_site( $blog_id );
+
+			$this->assertSame( '0', $blog->spam );
+			$this->assertSame( 1, $test_action_counter->get_call_count() );
+		}
+
+		public function test_content_from_spam_blog_is_not_available() {
+			$spam_blog_id = self::factory()->blog->create();
+			switch_to_blog( $spam_blog_id );
+			$post_data      = array(
+				'post_title'   => 'Hello World!',
+				'post_content' => 'Hello world content',
+			);
+			$post_id        = self::factory()->post->create( $post_data );
+			$post           = get_post( $post_id );
+			$spam_permalink = site_url() . '/?p=' . $post->ID;
+			$spam_embed_url = get_post_embed_url( $post_id );
+
+			restore_current_blog();
+			$this->assertNotEmpty( $spam_permalink );
+			$this->assertSame( $post_data['post_title'], $post->post_title );
+
+			update_blog_status( $spam_blog_id, 'spam', 1 );
+
+			$post_id = self::factory()->post->create(
+				array(
+					'post_content' => "\n $spam_permalink \n",
+				)
+			);
+			$post    = get_post( $post_id );
+			$content = apply_filters( 'the_content', $post->post_content );
+
+			$this->assertStringNotContainsString( $post_data['post_title'], $content );
+			$this->assertStringNotContainsString( "src=\"{$spam_embed_url}#?", $content );
+		}
+
+		public function test_update_blog_status_make_spam_blog_action() {
+			$test_action_counter = new MockAction();
+
+			$blog_id = self::factory()->blog->create();
+
+			add_action( 'make_spam_blog', array( $test_action_counter, 'action' ) );
+			update_blog_status( $blog_id, 'spam', 1 );
+			$blog = get_site( $blog_id );
+
+			$this->assertSame( '1', $blog->spam );
+			$this->assertSame( 1, $test_action_counter->get_call_count() );
+
+			// The action should not fire if the status of 'spam' stays the same.
+			update_blog_status( $blog_id, 'spam', 1 );
+			$blog = get_site( $blog_id );
+
+			$this->assertSame( '1', $blog->spam );
+			$this->assertSame( 1, $test_action_counter->get_call_count() );
+		}
+
+		public function test_update_blog_status_archive_blog_action() {
+			$test_action_counter = new MockAction();
+
+			$blog_id = self::factory()->blog->create();
+
+			add_action( 'archive_blog', array( $test_action_counter, 'action' ) );
+			update_blog_status( $blog_id, 'archived', 1 );
+			$blog = get_site( $blog_id );
+
+			$this->assertSame( '1', $blog->archived );
+			$this->assertSame( 1, $test_action_counter->get_call_count() );
+
+			// The action should not fire if the status of 'archived' stays the same.
+			update_blog_status( $blog_id, 'archived', 1 );
+			$blog = get_site( $blog_id );
+
+			$this->assertSame( '1', $blog->archived );
+			$this->assertSame( 1, $test_action_counter->get_call_count() );
+		}
+
+		public function test_update_blog_status_unarchive_blog_action() {
+			$test_action_counter = new MockAction();
+
+			$blog_id = self::factory()->blog->create();
+			update_blog_details( $blog_id, array( 'archived' => 1 ) );
+
+			add_action( 'unarchive_blog', array( $test_action_counter, 'action' ) );
+			update_blog_status( $blog_id, 'archived', 0 );
+			$blog = get_site( $blog_id );
+
+			$this->assertSame( '0', $blog->archived );
+			$this->assertSame( 1, $test_action_counter->get_call_count() );
+
+			// The action should not fire if the status of 'archived' stays the same.
+			update_blog_status( $blog_id, 'archived', 0 );
+			$blog = get_site( $blog_id );
+			$this->assertSame( '0', $blog->archived );
+			$this->assertSame( 1, $test_action_counter->get_call_count() );
+		}
+
+		public function test_update_blog_status_make_delete_blog_action() {
+			$test_action_counter = new MockAction();
+
+			$blog_id = self::factory()->blog->create();
+
+			add_action( 'make_delete_blog', array( $test_action_counter, 'action' ) );
+			update_blog_status( $blog_id, 'deleted', 1 );
+			$blog = get_site( $blog_id );
+
+			$this->assertSame( '1', $blog->deleted );
+			$this->assertSame( 1, $test_action_counter->get_call_count() );
+
+			// The action should not fire if the status of 'deleted' stays the same.
+			update_blog_status( $blog_id, 'deleted', 1 );
+			$blog = get_site( $blog_id );
+
+			$this->assertSame( '1', $blog->deleted );
+			$this->assertSame( 1, $test_action_counter->get_call_count() );
+		}
+
+		public function test_update_blog_status_make_undelete_blog_action() {
+			$test_action_counter = new MockAction();
+
+			$blog_id = self::factory()->blog->create();
+			update_blog_details( $blog_id, array( 'deleted' => 1 ) );
+
+			add_action( 'make_undelete_blog', array( $test_action_counter, 'action' ) );
+			update_blog_status( $blog_id, 'deleted', 0 );
+			$blog = get_site( $blog_id );
+
+			$this->assertSame( '0', $blog->deleted );
+			$this->assertSame( 1, $test_action_counter->get_call_count() );
+
+			// The action should not fire if the status of 'deleted' stays the same.
+			update_blog_status( $blog_id, 'deleted', 0 );
+			$blog = get_site( $blog_id );
+
+			$this->assertSame( '0', $blog->deleted );
+			$this->assertSame( 1, $test_action_counter->get_call_count() );
+		}
+
+		public function test_update_blog_status_mature_blog_action() {
+			$test_action_counter = new MockAction();
+
+			$blog_id = self::factory()->blog->create();
+
+			add_action( 'mature_blog', array( $test_action_counter, 'action' ) );
+			update_blog_status( $blog_id, 'mature', 1 );
+			$blog = get_site( $blog_id );
+
+			$this->assertSame( '1', $blog->mature );
+			$this->assertSame( 1, $test_action_counter->get_call_count() );
+
+			// The action should not fire if the status of 'mature' stays the same.
+			update_blog_status( $blog_id, 'mature', 1 );
+			$blog = get_site( $blog_id );
+
+			$this->assertSame( '1', $blog->mature );
+			$this->assertSame( 1, $test_action_counter->get_call_count() );
+		}
+
+		public function test_update_blog_status_unmature_blog_action() {
+			$test_action_counter = new MockAction();
+
+			$blog_id = self::factory()->blog->create();
+			update_blog_details( $blog_id, array( 'mature' => 1 ) );
+
+			add_action( 'unmature_blog', array( $test_action_counter, 'action' ) );
+			update_blog_status( $blog_id, 'mature', 0 );
+
+			$blog = get_site( $blog_id );
+			$this->assertSame( '0', $blog->mature );
+			$this->assertSame( 1, $test_action_counter->get_call_count() );
+
+			// The action should not fire if the status of 'mature' stays the same.
+			update_blog_status( $blog_id, 'mature', 0 );
+			$blog = get_site( $blog_id );
+
+			$this->assertSame( '0', $blog->mature );
+			$this->assertSame( 1, $test_action_counter->get_call_count() );
+		}
+
+		public function test_update_blog_status_update_blog_public_action() {
+			$test_action_counter = new MockAction();
+
+			$blog_id = self::factory()->blog->create();
+
+			add_action( 'update_blog_public', array( $test_action_counter, 'action' ) );
+			update_blog_status( $blog_id, 'public', 0 );
+
+			$blog = get_site( $blog_id );
+			$this->assertSame( '0', $blog->public );
+			$this->assertSame( 1, $test_action_counter->get_call_count() );
+
+			// The action should not fire if the status of 'mature' stays the same.
+			update_blog_status( $blog_id, 'public', 0 );
+			$blog = get_site( $blog_id );
+
+			$this->assertSame( '0', $blog->public );
+			$this->assertSame( 1, $test_action_counter->get_call_count() );
+		}
+	}
+
+endif;
diff --git a/tests/multisite/updatePostsCount.php b/tests/multisite/updatePostsCount.php
index 2806aaedd5..270ac60c49 100644
--- a/tests/multisite/updatePostsCount.php
+++ b/tests/multisite/updatePostsCount.php
@@ -2,54 +2,57 @@
 
 if ( is_multisite() ) :
 	/**
-	 * Test update_posts_count() get called via filters of WP_Site in multisite.
+	 * Test that update_posts_count() gets called via default filters on multisite.
 	 *
 	 * @group ms-site
 	 * @group multisite
 	 *
-	 * @covers ::_update_posts_count_on_delete
+	 * @covers ::update_posts_count
 	 */
-	class Tests_update_posts_count_on_delete extends WP_UnitTestCase {
+	class Tests_Multisite_UpdatePostsCount extends WP_UnitTestCase {
 
 		/**
-		 * Test that the posts count is updated correctly when a posts are added and deleted.
+		 * Tests that posts count is updated correctly when posts are added or deleted.
+		 *
+		 * @ticket 27952
 		 * @ticket 53443
+		 *
+		 * @covers ::_update_posts_count_on_transition_post_status
+		 * @covers ::_update_posts_count_on_delete
 		 */
-		public function test_update_posts_count_on_delete() {
-
+		public function test_update_posts_count() {
 			$blog_id = self::factory()->blog->create();
 			switch_to_blog( $blog_id );
 
-			$current_post_count = (int) get_option( 'post_count' );
-
-			$post_id = self::factory()->post->create(
-				array(
-					'post_type'   => 'post',
-					'post_author' => '1',
-					'post_date'   => '2012-10-23 19:34:42',
-					'post_status' => 'publish',
-				)
-			);
-
-			/**
-			 * Check that add_action( 'deleted_post', '_update_posts_count_on_delete' ) is called when a post is created.
-			 * Check that _update_posts_count_on_transition_post_status() is called on that filter which then calls
-			 * update_posts_count to update the count.
-			 */
-			$this->assertEquals( $current_post_count + 1, (int) get_option( 'post_count' ), 'post added' );
+			$original_post_count = (int) get_site()->post_count;
+
+			$post_id = self::factory()->post->create();
+
+			$post_count_after_creating = get_site()->post_count;
 
 			wp_delete_post( $post_id );
 
-			/**
-			 * Check that add_action( 'transition_post_status', '_update_posts_count_on_transition_post_status', 10, 3 )
-			 * is called when a post is deleted.
-			 * Check that _update_posts_count_on_delete() is called on that filter which then calls update_posts_count
-			 * to update the count.
-			 */
-			$this->assertEquals( $current_post_count, (int) get_option( 'post_count' ), 'post deleted' );
+			$post_count_after_deleting = get_site()->post_count;
 
 			restore_current_blog();
 
+			/*
+			 * Check that posts count is updated when a post is created:
+			 * add_action( 'transition_post_status', '_update_posts_count_on_transition_post_status', 10, 3 );
+			 *
+			 * Check that _update_posts_count_on_transition_post_status() is called on that filter,
+			 * which then calls update_posts_count() to update the count.
+			 */
+			$this->assertSame( $original_post_count + 1, $post_count_after_creating, 'Post count should be incremented by 1.' );
+
+			/*
+			 * Check that posts count is updated when a post is deleted:
+			 * add_action( 'deleted_post', '_update_posts_count_on_delete' );
+			 *
+			 * Check that _update_posts_count_on_delete() is called on that filter,
+			 * which then calls update_posts_count() to update the count.
+			 */
+			$this->assertSame( $original_post_count, $post_count_after_deleting, 'Post count should match the original count.' );
 		}
 	}
 
diff --git a/tests/multisite.php b/tests/multisite/wpCountSites.php
similarity index 67%
rename from tests/multisite.php
rename to tests/multisite/wpCountSites.php
index 0445d58fb9..6755cc1208 100644
--- a/tests/multisite.php
+++ b/tests/multisite/wpCountSites.php
@@ -3,24 +3,10 @@
 if ( is_multisite() ) :
 
 	/**
-	 * A set of unit tests for WordPress Multisite
-	 *
+	 * @group ms-site
 	 * @group multisite
 	 */
-	class Tests_Multisite extends WP_UnitTestCase {
-
-		public function test_wpmu_log_new_registrations() {
-			global $wpdb;
-
-			$user = new WP_User( 1 );
-			$ip   = preg_replace( '/[^0-9., ]/', '', $_SERVER['REMOTE_ADDR'] );
-
-			wpmu_log_new_registrations( 1, 1 );
-
-			// Currently there is no wrapper function for the registration_log.
-			$reg_blog = $wpdb->get_col( $wpdb->prepare( "SELECT email FROM {$wpdb->registration_log} WHERE {$wpdb->registration_log}.blog_id = 1 AND IP LIKE %s", $ip ) );
-			$this->assertSame( $user->user_email, $reg_blog[ count( $reg_blog ) - 1 ] );
-		}
+	class Tests_Multisite_wpCountSites extends WP_UnitTestCase {
 
 		/**
 		 * @ticket 37392
diff --git a/tests/multisite/wpmuLogNewRegistrations.php b/tests/multisite/wpmuLogNewRegistrations.php
new file mode 100644
index 0000000000..069aab14f5
--- /dev/null
+++ b/tests/multisite/wpmuLogNewRegistrations.php
@@ -0,0 +1,24 @@
+<?php
+
+if ( is_multisite() ) :
+
+	/**
+	 * @group multisite
+	 */
+	class Tests_Multisite_wpmuLogNewRegistrations extends WP_UnitTestCase {
+
+		public function test_wpmu_log_new_registrations() {
+			global $wpdb;
+
+			$user = new WP_User( 1 );
+			$ip   = preg_replace( '/[^0-9., ]/', '', $_SERVER['REMOTE_ADDR'] );
+
+			wpmu_log_new_registrations( 1, 1 );
+
+			// Currently there is no wrapper function for the registration_log.
+			$reg_blog = $wpdb->get_col( $wpdb->prepare( "SELECT email FROM {$wpdb->registration_log} WHERE {$wpdb->registration_log}.blog_id = 1 AND IP LIKE %s", $ip ) );
+			$this->assertSame( $user->user_email, $reg_blog[ count( $reg_blog ) - 1 ] );
+		}
+	}
+
+endif;
diff --git a/tests/oembed/controller.php b/tests/oembed/controller.php
index a5b8d6a483..238b1faf1f 100644
--- a/tests/oembed/controller.php
+++ b/tests/oembed/controller.php
@@ -49,7 +49,7 @@ class Test_oEmbed_Controller extends WP_UnitTestCase {
 
 		/** @var WP_REST_Server $wp_rest_server */
 		global $wp_rest_server;
-		$wp_rest_server = new Spy_REST_Server;
+		$wp_rest_server = new Spy_REST_Server();
 		do_action( 'rest_api_init', $wp_rest_server );
 
 		add_filter( 'pre_http_request', array( $this, 'mock_embed_request' ), 10, 3 );
@@ -84,13 +84,13 @@ class Test_oEmbed_Controller extends WP_UnitTestCase {
 	/**
 	 * Intercept oEmbed requests and mock responses.
 	 *
-	 * @param mixed  $preempt Whether to preempt an HTTP request's return value. Default false.
-	 * @param mixed  $r       HTTP request arguments.
-	 * @param string $url     The request URL.
+	 * @param false|array|WP_Error $response    A preemptive return value of an HTTP request. Default false.
+	 * @param array                $parsed_args HTTP request arguments.
+	 * @param string               $url         The request URL.
 	 * @return array Response data.
 	 */
-	public function mock_embed_request( $preempt, $r, $url ) {
-		unset( $preempt, $r );
+	public function mock_embed_request( $response, $parsed_args, $url ) {
+		unset( $response, $parsed_args );
 
 		$parsed_url = wp_parse_url( $url );
 		$query      = isset( $parsed_url['query'] ) ? $parsed_url['query'] : '';
diff --git a/tests/option/multisite.php b/tests/option/multisite.php
index 05ee5f9555..98c28fbf50 100644
--- a/tests/option/multisite.php
+++ b/tests/option/multisite.php
@@ -152,6 +152,28 @@ if ( is_multisite() ) :
 			// $this->assertFalse( get_option( $key2 ) );                        // Check get_option().
 		}
 
+		/**
+		 * @group multisite
+		 *
+		 * @covers ::get_site_option
+		 */
+		public function test_site_notoptions() {
+			$network_id     = get_current_network_id();
+			$notoptions_key = "{$network_id}:notoptions";
+
+			$_notoptions = wp_cache_get( 'notoptions', 'site-options' );
+			$this->assertEmpty( $_notoptions );
+			$_notoptions1 = wp_cache_get( $notoptions_key, 'site-options' );
+			$this->assertEmpty( $_notoptions1 );
+
+			get_site_option( 'burrito' );
+
+			$notoptions = wp_cache_get( 'notoptions', 'site-options' );
+			$this->assertEmpty( $notoptions );
+			$notoptions1 = wp_cache_get( $notoptions_key, 'site-options' );
+			$this->assertNotEmpty( $notoptions1 );
+		}
+
 		/**
 		 * @covers ::users_can_register_signup_filter
 		 * @covers ::get_site_option
diff --git a/tests/option/networkOption.php b/tests/option/networkOption.php
index 2231ecf0fa..bfce484a8d 100644
--- a/tests/option/networkOption.php
+++ b/tests/option/networkOption.php
@@ -137,124 +137,58 @@ class Tests_Option_NetworkOption extends WP_UnitTestCase {
 	}
 
 	/**
-	 * @ticket 37181
-	 *
+	 * @ticket 43506
 	 * @group ms-required
 	 *
 	 * @covers ::get_network_option
 	 * @covers ::wp_cache_get
 	 * @covers ::wp_cache_delete
 	 */
-	public function test_meta_api_use_values_in_network_option() {
-		$network_id = self::factory()->network->create();
-		$option     = __FUNCTION__;
-		$value      = __FUNCTION__;
+	public function test_get_network_option_sets_notoptions_if_option_found() {
+		$network_id     = get_current_network_id();
+		$notoptions_key = "$network_id:notoptions";
 
-		add_metadata( 'site', $network_id, $option, $value, true );
-		$this->assertEqualSets( get_metadata( 'site', $network_id, $option ), array( get_network_option( $network_id, $option, true ) ) );
-	}
+		$original_cache = wp_cache_get( $notoptions_key, 'site-options' );
+		if ( false !== $original_cache ) {
+			wp_cache_delete( $notoptions_key, 'site-options' );
+		}
 
-	/**
-	 * @ticket 37181
-	 *
-	 * @group ms-required
-	 */
-	function test_funky_network_meta() {
-		$network_id      = self::factory()->network->create();
-		$option          = __FUNCTION__;
-		$classy          = new StdClass();
-		$classy->ID      = 1;
-		$classy->stringy = 'I love slashes\\\\';
-		$funky_meta[]    = $classy;
-
-		$classy          = new StdClass();
-		$classy->ID      = 2;
-		$classy->stringy = 'I love slashes\\\\ more';
-		$funky_meta[]    = $classy;
-
-		// Add a network meta item.
-		$this->assertIsInt( add_metadata( 'site', $network_id, $option, $funky_meta, true ) );
-
-		// Check they exists.
-		$this->assertEquals( $funky_meta, get_network_option( $network_id, $option ) );
-	}
+		// Retrieve any existing option.
+		get_network_option( $network_id, 'site_name' );
 
-	/**
-	 * @ticket 37181
-	 *
-	 * @group ms-required
-	 */
-	public function test_meta_api_multiple_values_in_network_option() {
-		$network_id = self::factory()->network->create();
-		$option     = __FUNCTION__;
-		add_metadata( 'site', $network_id, $option, 'monday', true );
-		add_metadata( 'site', $network_id, $option, 'tuesday', true );
-		add_metadata( 'site', $network_id, $option, 'wednesday', true );
-		$this->assertEquals( 'monday', get_network_option( $network_id, $option, true ) );
+		$cache = wp_cache_get( $notoptions_key, 'site-options' );
+		if ( false !== $original_cache ) {
+			wp_cache_set( $notoptions_key, $original_cache, 'site-options' );
+		}
+
+		$this->assertSame( array(), $cache );
 	}
 
 	/**
-	 * @ticket 37181
-	 *
+	 * @ticket 43506
 	 * @group ms-required
 	 *
 	 * @covers ::get_network_option
 	 * @covers ::wp_cache_get
 	 */
-	public function test_network_option_count_queries_on_non_existing() {
-		$network_id = self::factory()->network->create();
-		$option     = __FUNCTION__;
-		add_network_option( $network_id, $option, 'monday' );
-		get_network_option( $network_id, $option );
-		$num_queries_pre_get = get_num_queries();
-		get_network_option( $network_id, 'do_not_exist' );
-		$num_queries_after_get = get_num_queries();
-
-		$this->assertSame( $num_queries_pre_get, $num_queries_after_get );
-	}
+	public function test_get_network_option_sets_notoptions_if_option_not_found() {
+		$network_id     = get_current_network_id();
+		$notoptions_key = "$network_id:notoptions";
 
-	/**
-	 * @ticket 37181
-	 *
-	 * @group ms-required
-	 */
-	public function test_register_meta_network_option_single_false() {
-		$network_id = self::factory()->network->create();
-		$option     = __FUNCTION__;
-		$value      = __FUNCTION__;
-		register_meta(
-			'site',
-			$option,
-			array(
-				'type'    => 'string',
-				'default' => $value,
-				'single'  => false,
-			)
-		);
+		$original_cache = wp_cache_get( $notoptions_key, 'site-options' );
+		if ( false !== $original_cache ) {
+			wp_cache_delete( $notoptions_key, 'site-options' );
+		}
 
-		$this->assertSame( $value, get_network_option( $network_id, $option ) );
-	}
+		// Retrieve any non-existing option.
+		get_network_option( $network_id, 'this_does_not_exist' );
 
-	/**
-	 * @ticket 37181
-	 *
-	 * @group ms-required
-	 */
-	public function test_register_meta_network_option_single_true() {
-		$network_id = self::factory()->network->create();
-		$option     = __FUNCTION__;
-		$value      = __FUNCTION__;
-		register_meta(
-			'site',
-			$option,
-			array(
-				'type'    => 'string',
-				'default' => $value,
-				'single'  => true,
-			)
-		);
+		$cache = wp_cache_get( $notoptions_key, 'site-options' );
+		if ( false !== $original_cache ) {
+			wp_cache_set( $notoptions_key, $original_cache, 'site-options' );
+		}
 
-		$this->assertSame( $value, get_network_option( $network_id, $option ) );
+		$this->assertSame( array( 'this_does_not_exist' => true ), $cache );
 	}
 
 	/**
@@ -262,13 +196,9 @@ class Tests_Option_NetworkOption extends WP_UnitTestCase {
 	 *
 	 * @ticket 44956
 	 *
-	 * @group ms-required
-	 *
 	 * @covers ::update_network_option
 	 */
 	public function test_update_network_option_array_with_object() {
-		$network_id     = self::factory()->network->create();
-		$option         = __FUNCTION__;
 		$array_w_object = array(
 			'url'       => 'http://src.wordpress-develop.dev/wp-content/uploads/2016/10/cropped-Blurry-Lights.jpg',
 			'meta_data' => (object) array(
@@ -278,140 +208,24 @@ class Tests_Option_NetworkOption extends WP_UnitTestCase {
 			),
 		);
 
-		add_metadata( 'site', $network_id, $option, $array_w_object, true );
-		$this->assertEquals( $array_w_object, get_network_option( $network_id, $option ) );
-	}
-
-	/**
-	 * @ticket 37181
-	 *
-	 * @group ms-required
-	 *
-	 * @covers ::add_network_option
-	 *
-	 * @dataProvider data_types_options
-	 */
-	public function test_type_add_network_option( $name, $value, $expected ) {
-		$result = add_network_option( null, $name, $value );
-		$this->assertTrue( $result, 'Network option was not added' );
-
-		$test_value = get_network_option( null, $name );
-		$this->assertSame( $expected, $test_value, 'Values do not match' );
-	}
-
-	/**
-	 * @ticket 37181
-	 *
-	 * @covers ::add_network_option
-	 *
-	 * @dataProvider data_slashed_options
-	 */
-	public function test_slash_add_network_option( $name, $value ) {
-		$result = add_network_option( null, $name, $value );
-		$this->assertTrue( $result, 'Network option was not added' );
-		$this->assertSame( $value, get_network_option( null, $name ), 'Values do not match' );
-	}
+		$array_w_object_2 = array(
+			'url'       => 'http://src.wordpress-develop.dev/wp-content/uploads/2016/10/cropped-Blurry-Lights.jpg',
+			'meta_data' => (object) array(
+				'attachment_id' => 292,
+				'height'        => 708,
+				'width'         => 1260,
+			),
+		);
 
-	/**
-	 * @ticket 37181
-	 *
-	 * @covers ::update_network_option
-	 *
-	 * @dataProvider data_slashed_options
-	 */
-	public function test_slash_update_network_option( $name, $value ) {
-		$result = update_network_option( null, $name, $value );
-		$this->assertTrue( $result, 'Network option was not updated' );
-		$this->assertSame( $value, get_network_option( null, $name ), 'Values do not match' );
-	}
+		// Add the option, it did not exist before this.
+		add_network_option( null, 'array_w_object', $array_w_object );
 
-	/**
-	 * @ticket 37181
-	 *
-	 * @covers ::delete_network_option()
-	 *
-	 * @dataProvider data_slashed_options
-	 */
-	public function test_slash_delete_network_option( $name, $value ) {
-		$result = add_network_option( null, $name, $value );
-		$this->assertTrue( $result, 'Network option was not added' );
-		$this->assertSame( $value, get_network_option( null, $name ) );
-		$result = delete_network_option( null, $name );
-		$this->assertTrue( $result, 'Network option was not deleted' );
-		$this->assertFalse( get_network_option( null, $name ), 'Network option was not deleted' );
-	}
+		$num_queries_pre_update = get_num_queries();
 
-	public function data_slashed_options() {
-		return array(
-			'slashed option name'                   => array(
-				'option' => 'String with 1 slash \\',
-				'value'  => 'foo',
-			),
-			'slashed in middle option name'         => array(
-				'option' => 'String\\thing',
-				'value'  => 'foo',
-			),
-			'slashed option value'                  => array(
-				'option' => 'bar',
-				'value'  => 'String with 1 slash \\',
-			),
-			'slashed option name and value'         => array(
-				'option' => 'String with 1 slash \\',
-				'value'  => 'String with 1 slash \\',
-			),
-			'slashed 4 times option name and value' => array(
-				'option' => 'String with 4 slashes \\\\\\\\',
-				'value'  => 'String with 4 slashes \\\\\\\\',
-			),
-			'slashed 7 times option name and value' => array(
-				'option' => 'String with 7 slashes \\\\\\\\\\\\\\',
-				'value'  => 'String with 7 slashes \\\\\\\\\\\\\\',
-			),
-		);
-	}
+		// Update the option using the same array with an object for the value.
+		$this->assertFalse( update_network_option( null, 'array_w_object', $array_w_object_2 ) );
 
-	public function data_types_options() {
-		return array(
-			'array'       => array(
-				'option'   => 'array',
-				'value'    => array(),
-				'expected' => array(),
-			),
-			'array_keys'  => array(
-				'option'   => 'array',
-				'value'    => array( 'key' => 'value' ),
-				'expected' => array( 'key' => 'value' ),
-			),
-			'int'         => array(
-				'option'   => 'int',
-				'value'    => 33,
-				'expected' => '33',
-			),
-			'string'      => array(
-				'option'   => 'string',
-				'value'    => 'foo',
-				'expected' => 'foo',
-			),
-			'string_bool' => array(
-				'option'   => 'string',
-				'value'    => 'true',
-				'expected' => 'true',
-			),
-			'float'       => array(
-				'option'   => 'float',
-				'value'    => 33.5555,
-				'expected' => '33.5555',
-			),
-			'bool'        => array(
-				'option'   => 'bool',
-				'value'    => true,
-				'expected' => '1',
-			),
-			'null'        => array(
-				'option'   => 'null',
-				'value'    => null,
-				'expected' => null,
-			),
-		);
+		// Check that no new database queries were performed.
+		$this->assertSame( $num_queries_pre_update, get_num_queries() );
 	}
 }
diff --git a/tests/option/sanitizeOption.php b/tests/option/sanitizeOption.php
index bc0dd0843b..dec3cf7ced 100644
--- a/tests/option/sanitizeOption.php
+++ b/tests/option/sanitizeOption.php
@@ -69,6 +69,12 @@ class Tests_Option_SanitizeOption extends WP_UnitTestCase {
 			array( 'timezone_string', 0, 0 ),
 			array( 'timezone_string', 'Europe/London', 'Europe/London' ),
 			array( 'timezone_string', get_option( 'timezone_string' ), 'invalid' ),
+			// @ticket 56468
+			'deprecated timezone string is accepted as valid' => array(
+				'option_name' => 'timezone_string',
+				'sanitized'   => 'America/Buenos_Aires',
+				'original'    => 'America/Buenos_Aires',
+			),
 			array( 'permalink_structure', '', '' ),
 			array( 'permalink_structure', '/%year%/%20%postname%', '/%year%/ %postname%' ),
 			array( 'default_role', 'subscriber', 'subscriber' ),
diff --git a/tests/option/siteTransient.php b/tests/option/siteTransient.php
index 774fc4a20a..4c9c9a15b7 100644
--- a/tests/option/siteTransient.php
+++ b/tests/option/siteTransient.php
@@ -9,7 +9,7 @@ class Tests_Option_SiteTransient extends WP_UnitTestCase {
 		parent::set_up();
 
 		if ( wp_using_ext_object_cache() ) {
-			$this->markTestSkipped( 'Not testable with an external object cache.' );
+			$this->markTestSkipped( 'This test requires that an external object cache is not in use.' );
 		}
 	}
 
diff --git a/tests/option/themeMods.php b/tests/option/themeMods.php
index 48512dc100..b062554a2c 100644
--- a/tests/option/themeMods.php
+++ b/tests/option/themeMods.php
@@ -69,8 +69,8 @@ class Tests_Option_ThemeMods extends WP_UnitTestCase {
 	 *
 	 * @covers ::get_theme_mod
 	 */
-	public function test_theme_mod_default_value_with_percent_symbols( $default, $expected ) {
-		$this->assertSame( $expected, get_theme_mod( 'test_name', $default ) );
+	public function test_theme_mod_default_value_with_percent_symbols( $default_value, $expected ) {
+		$this->assertSame( $expected, get_theme_mod( 'test_name', $default_value ) );
 	}
 
 	public function data_theme_mod_default_value_with_percent_symbols() {
diff --git a/tests/option/transient.php b/tests/option/transient.php
index cf10eaed1b..6c6ba4e2da 100644
--- a/tests/option/transient.php
+++ b/tests/option/transient.php
@@ -9,7 +9,7 @@ class Tests_Option_Transient extends WP_UnitTestCase {
 		parent::set_up();
 
 		if ( wp_using_ext_object_cache() ) {
-			$this->markTestSkipped( 'Not testable with an external object cache.' );
+			$this->markTestSkipped( 'This test requires that an external object cache is not in use.' );
 		}
 	}
 
diff --git a/tests/pluggable/getUserBy.php b/tests/pluggable/getUserBy.php
deleted file mode 100644
index 96ae8a1b5f..0000000000
--- a/tests/pluggable/getUserBy.php
+++ /dev/null
@@ -1,24 +0,0 @@
-<?php
-
-/**
- * @group pluggable
- * @covers ::get_user_by
- */
-class Tests_Pluggable_GetUserBy extends WP_UnitTestCase {
-
-	/**
-	 * @ticket 28020
-	 */
-	public function test_get_user_by_should_return_same_instance_as_wp_get_current_user() {
-		// Create a test user.
-		$new_user = self::factory()->user->create( array( 'role' => 'subscriber' ) );
-
-		// Set the test user as the current user.
-		$current_user = wp_set_current_user( $new_user );
-
-		// Get the test user using get_user_by().
-		$from_get_user_by = get_user_by( 'id', $new_user );
-
-		$this->assertSame( $current_user, $from_get_user_by );
-	}
-}
diff --git a/tests/pluggable.php b/tests/pluggable/signatures.php
similarity index 94%
rename from tests/pluggable.php
rename to tests/pluggable/signatures.php
index 8cd8831f22..46523b1d1b 100644
--- a/tests/pluggable.php
+++ b/tests/pluggable/signatures.php
@@ -2,8 +2,10 @@
 
 /**
  * @group pluggable
+ *
+ * @coversNothing
  */
-class Tests_Pluggable extends WP_UnitTestCase {
+class Tests_Pluggable_Signatures extends WP_UnitTestCase {
 
 	/**
 	 * Tests that the signatures of all functions in pluggable.php match their expected signature.
@@ -74,7 +76,7 @@ class Tests_Pluggable extends WP_UnitTestCase {
 	 */
 	public function get_defined_pluggable_functions() {
 
-		require_once ABSPATH . '/wp-admin/includes/upgrade.php';
+		require_once ABSPATH . 'wp-admin/includes/upgrade.php';
 
 		$test_functions = array(
 			'install_network',
@@ -82,7 +84,6 @@ class Tests_Pluggable extends WP_UnitTestCase {
 			'wp_install_defaults',
 			'wp_new_blog_notification',
 			'wp_upgrade',
-			'install_global_terms',
 		);
 		$test_files     = array(
 			'wp-includes/pluggable.php',
@@ -102,7 +103,7 @@ class Tests_Pluggable extends WP_UnitTestCase {
 		}
 
 		foreach ( $test_files as $file ) {
-			preg_match_all( '#^\t?function (\w+)#m', file_get_contents( ABSPATH . '/' . $file ), $functions );
+			preg_match_all( '#^\t?function (\w+)#m', file_get_contents( ABSPATH . $file ), $functions );
 
 			foreach ( $functions[1] as $function ) {
 				$data[] = array(
@@ -172,7 +173,7 @@ class Tests_Pluggable extends WP_UnitTestCase {
 			'check_ajax_referer'              => array(
 				'action'    => -1,
 				'query_arg' => false,
-				'die'       => true,
+				'stop'      => true,
 			),
 			'wp_redirect'                     => array(
 				'location',
@@ -188,7 +189,7 @@ class Tests_Pluggable extends WP_UnitTestCase {
 			),
 			'wp_validate_redirect'            => array(
 				'location',
-				'default' => '',
+				'fallback_url' => '',
 			),
 			'wp_notify_postauthor'            => array(
 				'comment_id',
@@ -201,7 +202,7 @@ class Tests_Pluggable extends WP_UnitTestCase {
 				'deprecated' => null,
 				'notify'     => '',
 			),
-			'wp_nonce_tick'                   => array(),
+			'wp_nonce_tick'                   => array( 'action' => -1 ),
 			'wp_verify_nonce'                 => array(
 				'nonce',
 				'action' => -1,
@@ -230,10 +231,10 @@ class Tests_Pluggable extends WP_UnitTestCase {
 			'wp_set_password'                 => array( 'password', 'user_id' ),
 			'get_avatar'                      => array(
 				'id_or_email',
-				'size'    => 96,
-				'default' => '',
-				'alt'     => '',
-				'args'    => null,
+				'size'          => 96,
+				'default_value' => '',
+				'alt'           => '',
+				'args'          => null,
 			),
 			'wp_text_diff'                    => array(
 				'left_string',
@@ -257,7 +258,6 @@ class Tests_Pluggable extends WP_UnitTestCase {
 			'wp_install_defaults'             => array( 'user_id' ),
 			'wp_new_blog_notification'        => array( 'blog_title', 'blog_url', 'user_id', 'password' ),
 			'wp_upgrade'                      => array(),
-			'install_global_terms'            => array(),
 		);
 
 		// Pluggable function signatures are not tested when an external object cache is in use. See #31491.
@@ -328,7 +328,7 @@ class Tests_Pluggable extends WP_UnitTestCase {
 					'wp_cache_flush'                     => array(),
 					'wp_cache_flush_runtime'             => array(),
 					'wp_cache_flush_group'               => array( 'group' ),
-					'wp_cache_supports_group_flush'      => array(),
+					'wp_cache_supports'                  => array( 'feature' ),
 					'wp_cache_close'                     => array(),
 					'wp_cache_add_global_groups'         => array( 'groups' ),
 					'wp_cache_add_non_persistent_groups' => array( 'groups' ),
diff --git a/tests/mail.php b/tests/pluggable/wpMail.php
similarity index 88%
rename from tests/mail.php
rename to tests/pluggable/wpMail.php
index c130658e3f..cc6b3df1a1 100644
--- a/tests/mail.php
+++ b/tests/pluggable/wpMail.php
@@ -2,8 +2,10 @@
 /**
  * @group pluggable
  * @group mail
+ *
+ * @covers ::wp_mail
  */
-class Tests_Mail extends WP_UnitTestCase {
+class Tests_Pluggable_wpMail extends WP_UnitTestCase {
 	public function set_up() {
 		parent::set_up();
 		reset_phpmailer_instance();
@@ -171,7 +173,7 @@ class Tests_Mail extends WP_UnitTestCase {
 		$this->assertTrue( wp_mail( 'valid@address.com', 'subject', 'body' ) );
 
 		// Non-fatal errors.
-		$this->assertTrue( wp_mail( 'valid@address.com', 'subject', 'body', "Cc: invalid-address\nBcc: @invalid.address", ABSPATH . '/non-existent-file.html' ) );
+		$this->assertTrue( wp_mail( 'valid@address.com', 'subject', 'body', "Cc: invalid-address\nBcc: @invalid.address", ABSPATH . 'non-existent-file.html' ) );
 
 		// Fatal errors.
 		$this->assertFalse( wp_mail( 'invalid.address', 'subject', 'body', '', array() ) );
@@ -452,6 +454,62 @@ class Tests_Mail extends WP_UnitTestCase {
 		$this->assertSame( $expected_error_data, $call_args[0]->get_error_data() );
 	}
 
+	/**
+	 * Test that attachment file names are derived from array values when their
+	 * associative array keys are numeric.
+	 *
+	 * @ticket 28407
+	 */
+	public function test_wp_mail_sends_attachments_with_original_name() {
+		wp_mail(
+			'user@example.org',
+			'Subject',
+			'Hello World',
+			'',
+			array(
+				DIR_TESTDATA . '/images/canola.jpg',
+				DIR_TESTDATA . '/images/waffles.jpg',
+			)
+		);
+
+		/** @var PHPMailer $mailer */
+		$mailer = tests_retrieve_phpmailer_instance();
+
+		$attachments = $mailer->getAttachments();
+
+		$this->assertTrue( $mailer->attachmentExists(), 'There are no attachments.' );
+		$this->assertSame( $attachments[0][1], $attachments[0][2], 'The first attachment name did not match.' );
+		$this->assertSame( $attachments[1][1], $attachments[1][2], 'The second attachment name did not match.' );
+	}
+
+	/**
+	 * Test that attachment file names are derived from array keys when they
+	 * are non-empty strings.
+	 *
+	 * @ticket 28407
+	 */
+	public function test_wp_mail_sends_attachments_with_custom_name() {
+		wp_mail(
+			'user@example.org',
+			'Subject',
+			'Hello World',
+			'',
+			array(
+				'alonac.jpg'  => DIR_TESTDATA . '/images/canola.jpg',
+				'selffaw.jpg' => DIR_TESTDATA . '/images/waffles.jpg',
+			)
+		);
+
+		/** @var PHPMailer $mailer */
+		$mailer = tests_retrieve_phpmailer_instance();
+
+		$attachments = $mailer->getAttachments();
+
+		$this->assertTrue( $mailer->attachmentExists(), 'There are no attachments.' );
+		$this->assertSame( 'alonac.jpg', $attachments[0][2], 'The first attachment name did not match.' );
+		$this->assertSame( 'selffaw.jpg', $attachments[1][2], 'The second attachment name did not match.' );
+	}
+
 	/**
 	 * @ticket 50720
 	 */
@@ -475,4 +533,22 @@ class Tests_Mail extends WP_UnitTestCase {
 		$this->assertTrue( $result1 );
 		$this->assertFalse( $result2 );
 	}
+
+	/**
+	 * Tests that AltBody is reset between each wp_mail call.
+	 */
+	public function test_wp_mail_resets_properties() {
+		$wp_mail_set_text_message = function ( $phpmailer ) {
+			$phpmailer->AltBody = 'user1';
+		};
+
+		add_action( 'phpmailer_init', $wp_mail_set_text_message );
+		wp_mail( 'user1@example.localhost', 'Test 1', '<p>demo</p>', 'Content-Type: text/html' );
+		remove_action( 'phpmailer_init', $wp_mail_set_text_message );
+
+		wp_mail( 'user2@example.localhost', 'Test 2', 'test2' );
+
+		$phpmailer = $GLOBALS['phpmailer'];
+		$this->assertNotSame( 'user1', $phpmailer->AltBody );
+	}
 }
diff --git a/tests/pluggable/wpRand.php b/tests/pluggable/wpRand.php
index e7ef3b2725..9fcfa8bde1 100644
--- a/tests/pluggable/wpRand.php
+++ b/tests/pluggable/wpRand.php
@@ -2,6 +2,7 @@
 
 /**
  * @group pluggable
+ *
  * @covers ::wp_rand
  */
 class Tests_Pluggable_wpRand extends WP_UnitTestCase {
diff --git a/tests/pomo/mo.php b/tests/pomo/mo.php
index 2269e3d826..e4ce6c4b16 100644
--- a/tests/pomo/mo.php
+++ b/tests/pomo/mo.php
@@ -145,7 +145,7 @@ class Tests_POMO_MO extends WP_UnitTestCase {
 
 	public function test_export_should_not_include_empty_translations() {
 		$entries = array();
-		$mo      = new MO;
+		$mo      = new MO();
 		$mo->add_entry(
 			array(
 				'singular'     => 'baba',
diff --git a/tests/pomo/noopTranslations.php b/tests/pomo/noopTranslations.php
index 3fcfed6b57..44f46c1880 100644
--- a/tests/pomo/noopTranslations.php
+++ b/tests/pomo/noopTranslations.php
@@ -28,7 +28,7 @@ class Tests_POMO_NOOPTranslations extends WP_UnitTestCase {
 
 	public function set_up() {
 		parent::set_up();
-		$this->noop         = new NOOP_Translations;
+		$this->noop         = new NOOP_Translations();
 		$this->entry        = new Translation_Entry( array( 'singular' => 'baba' ) );
 		$this->plural_entry = new Translation_Entry(
 			array(
diff --git a/tests/pomo/po.php b/tests/pomo/po.php
index d7652f27e6..8c58099b69 100644
--- a/tests/pomo/po.php
+++ b/tests/pomo/po.php
@@ -48,7 +48,7 @@ http://wordpress.org/
 	public static function set_up_before_class() {
 		parent::set_up_before_class();
 
-		require_once ABSPATH . '/wp-includes/pomo/po.php';
+		require_once ABSPATH . 'wp-includes/pomo/po.php';
 	}
 
 	public function test_prepend_each_line() {
diff --git a/tests/pomo/translations.php b/tests/pomo/translations.php
index d37c9e8304..0d2a3383b0 100644
--- a/tests/pomo/translations.php
+++ b/tests/pomo/translations.php
@@ -121,10 +121,37 @@ class Tests_POMO_Translations extends WP_UnitTestCase {
 		$domain        = new Translations();
 		$domain->add_entry( $entry_digit_1 );
 		$domain->add_entry( $entry_digit_2 );
-		$dummy_translation = new Translations;
+		$dummy_translation = new Translations();
 		$this->assertSame( '1', $domain->translate( '1' ) );
 		$domain->merge_with( $dummy_translation );
 		$this->assertSame( '1', $domain->translate( '1' ) );
 	}
 
+	/**
+	 * @ticket 55941
+	 */
+	public function test_translate_falsy_key() {
+		$entry_empty = new Translation_Entry(
+			array(
+				'singular'     => '',
+				'translations' => array(
+					'',
+				),
+			)
+		);
+		$entry_zero  = new Translation_Entry(
+			array(
+				'singular'     => '0',
+				'translations' => array(
+					'0',
+				),
+			)
+		);
+		$po          = new Translations();
+		$po->add_entry( $entry_empty );
+		$po->add_entry( $entry_zero );
+
+		$this->assertSame( '', $po->translate( '' ) );
+		$this->assertSame( '0', $po->translate( '0' ) );
+	}
 }
diff --git a/tests/post.php b/tests/post.php
index 6f07ca8593..484b890af4 100644
--- a/tests/post.php
+++ b/tests/post.php
@@ -158,7 +158,7 @@ class Tests_Post extends WP_UnitTestCase {
 
 		_unregister_post_type( $post_type );
 		$count = wp_count_posts( $post_type, 'readable' );
-		$this->assertEquals( new stdClass, $count );
+		$this->assertEquals( new stdClass(), $count );
 	}
 
 	public function test_wp_count_posts_filtered() {
@@ -285,7 +285,7 @@ class Tests_Post extends WP_UnitTestCase {
 			$this->markTestSkipped( 'This test is only useful with the utf8 character set.' );
 		}
 
-		require_once ABSPATH . '/wp-admin/includes/post.php';
+		require_once ABSPATH . 'wp-admin/includes/post.php';
 
 		$post_id = self::factory()->post->create();
 
@@ -601,7 +601,7 @@ class Tests_Post extends WP_UnitTestCase {
 			'1 int'     => array( 1 ),
 			'null'      => array( null ),
 			'true'      => array( true ),
-			'an object' => array( new stdClass ),
+			'an object' => array( new stdClass() ),
 		);
 	}
 
diff --git a/tests/post/attachments.php b/tests/post/attachments.php
index 1bbc0c6f79..2922c185d2 100644
--- a/tests/post/attachments.php
+++ b/tests/post/attachments.php
@@ -6,19 +6,10 @@
  * @group upload
  */
 class Tests_Post_Attachments extends WP_UnitTestCase {
-	/**
-	 * Set up the test fixture.
-	 */
-	public function set_up() {
-		add_filter( 'image_editor_output_format', '__return_empty_array' );
-
-		parent::set_up();
-	}
 
 	public function tear_down() {
 		// Remove all uploads.
 		$this->remove_added_uploads();
-		remove_filter( 'image_editor_output_format', '__return_empty_array' );
 		parent::tear_down();
 	}
 
diff --git a/tests/post/getAttachedFile.php b/tests/post/getAttachedFile.php
deleted file mode 100644
index 09501b6c18..0000000000
--- a/tests/post/getAttachedFile.php
+++ /dev/null
@@ -1,67 +0,0 @@
-<?php
-
-/**
- * @group post
- * @covers ::get_attached_file
- */
-class Tests_Post_GetAttachedFile extends WP_UnitTestCase {
-	/**
-	 * Post
-	 *
-	 * @var WP_Post
-	 */
-	protected static $post;
-
-	/**
-	 * Create shared fixtures.
-	 */
-	public static function set_up_before_class() {
-		self::$post = self::factory()->post->create_and_get(
-			array(
-				'post_title' => 'example-page',
-				'post_type'  => 'post',
-			)
-		);
-	}
-
-	/**
-	 * @ticket 36308
-	 *
-	 * @dataProvider data_get_attached_file_with_windows_paths
-	 *
-	 * @param string $file     The file path to attach to the post.
-	 * @param string $expected The expected attached file path.
-	 * @param string $message  The message when an assertion fails.
-	 */
-	public function test_get_attached_file_with_windows_paths( $file, $expected, $message ) {
-		$attachment = self::factory()->attachment->create_and_get(
-			array(
-				'post_parent' => self::$post->ID,
-				'file'        => $file,
-			)
-		);
-
-		$this->assertSame( $expected, get_attached_file( $attachment->ID ), $message );
-	}
-
-	/**
-	 * Data provider with Windows paths.
-	 *
-	 * @return array
-	 */
-	public function data_get_attached_file_with_windows_paths() {
-		return array(
-			'a local path'         => array(
-				'file'     => 'C:/WWW/Sites/demo/htdocs/wordpress/wp-content/uploads/2016/03/example.jpg',
-				'expected' => 'C:/WWW/Sites/demo/htdocs/wordpress/wp-content/uploads/2016/03/example.jpg',
-				'message'  => 'Windows local filesystem paths should be equal',
-			),
-			'a network share path' => array(
-				'file'     => '//ComputerName/ShareName/SubfolderName/example.txt',
-				'expected' => '//ComputerName/ShareName/SubfolderName/example.txt',
-				'message'  => 'Network share paths should be equal',
-			),
-		);
-	}
-
-}
diff --git a/tests/post/getPages.php b/tests/post/getPages.php
index 5797e81005..804f4b431b 100644
--- a/tests/post/getPages.php
+++ b/tests/post/getPages.php
@@ -424,7 +424,7 @@ class Tests_Post_GetPages extends WP_UnitTestCase {
 			)
 		);
 		// Confirm the defaults.
-		$this->assertEquals( $pages, $pages_default_args );
+		$this->assertEqualSets( $pages, $pages_default_args );
 
 		/*
 		 * Here's the tree we are testing:
@@ -468,7 +468,7 @@ class Tests_Post_GetPages extends WP_UnitTestCase {
 			)
 		);
 
-		$this->assertEquals( $pages, $default_args );
+		$this->assertEqualSets( $pages, $default_args );
 
 		/*
 		 * Page tree:
diff --git a/tests/post/meta.php b/tests/post/meta.php
index ad391e741f..0efca37f6b 100644
--- a/tests/post/meta.php
+++ b/tests/post/meta.php
@@ -169,7 +169,7 @@ class Tests_Post_Meta extends WP_UnitTestCase {
 		$mid = add_post_meta( self::$post_id, 'get_post_meta_by_key', 'get_post_meta_by_key_value', true );
 		$this->assertIsInt( $mid );
 
-		$mobj             = new stdClass;
+		$mobj             = new stdClass();
 		$mobj->meta_id    = $mid;
 		$mobj->post_id    = self::$post_id;
 		$mobj->meta_key   = 'get_post_meta_by_key';
@@ -248,7 +248,7 @@ class Tests_Post_Meta extends WP_UnitTestCase {
 		$this->assertIsInt( add_post_meta( self::$post_id, 'test_funky_post_meta', $funky_meta, true ) );
 
 		// Check it exists.
-		$this->assertEquals( $funky_meta, get_post_meta( self::$post_id, 'test_funky_post_meta', true ) );
+		$this->assertEqualSets( $funky_meta, get_post_meta( self::$post_id, 'test_funky_post_meta', true ) );
 
 	}
 
diff --git a/tests/post/nav-menu.php b/tests/post/nav-menu.php
index d20c9a5a86..dc7cc74e2d 100644
--- a/tests/post/nav-menu.php
+++ b/tests/post/nav-menu.php
@@ -265,6 +265,90 @@ class Tests_Post_Nav_Menu extends WP_UnitTestCase {
 		$this->assertSameSets( array( $term_id ), $last[1], '_prime_term_caches() was not executed.' );
 	}
 
+
+	/**
+	 * @ticket 55620
+	 * @covers ::update_menu_item_cache
+	 */
+	public function test_wp_get_nav_menu_items_cache_primes_posts() {
+		$post_ids     = self::factory()->post->create_many( 3 );
+		$menu_nav_ids = array();
+		foreach ( $post_ids as $post_id ) {
+			$menu_nav_ids[] = wp_update_nav_menu_item(
+				$this->menu_id,
+				0,
+				array(
+					'menu-item-type'      => 'post_type',
+					'menu-item-object'    => 'post',
+					'menu-item-object-id' => $post_id,
+					'menu-item-status'    => 'publish',
+				)
+			);
+		}
+
+		// Delete post and post meta caches.
+		wp_cache_delete_multiple( $menu_nav_ids, 'posts' );
+		wp_cache_delete_multiple( $menu_nav_ids, 'post_meta' );
+		wp_cache_delete_multiple( $post_ids, 'posts' );
+		wp_cache_delete_multiple( $post_ids, 'post_meta' );
+
+		$action = new MockAction();
+		add_filter( 'update_post_metadata_cache', array( $action, 'filter' ), 10, 2 );
+
+		$start_num_queries = get_num_queries();
+		wp_get_nav_menu_items( $this->menu_id );
+		$queries_made = get_num_queries() - $start_num_queries;
+		$this->assertSame( 6, $queries_made, 'Only does 6 database queries when running wp_get_nav_menu_items.' );
+
+		$args = $action->get_args();
+		$this->assertSameSets( $menu_nav_ids, $args[0][1], '_prime_post_caches() was not executed.' );
+		$this->assertSameSets( $post_ids, $args[1][1], '_prime_post_caches() was not executed.' );
+	}
+
+	/**
+	 * @ticket 55620
+	 * @covers ::update_menu_item_cache
+	 */
+	public function test_wp_get_nav_menu_items_cache_primes_terms() {
+		register_taxonomy( 'wptests_tax', 'post', array( 'hierarchical' => true ) );
+		$term_ids     = self::factory()->term->create_many( 3, array( 'taxonomy' => 'wptests_tax' ) );
+		$menu_nav_ids = array();
+		foreach ( $term_ids as $term_id ) {
+			$menu_nav_ids[] = wp_update_nav_menu_item(
+				$this->menu_id,
+				0,
+				array(
+					'menu-item-type'      => 'taxonomy',
+					'menu-item-object'    => 'wptests_tax',
+					'menu-item-object-id' => $term_id,
+					'menu-item-status'    => 'publish',
+				)
+			);
+		}
+		// Delete post and post meta caches.
+		wp_cache_delete_multiple( $menu_nav_ids, 'posts' );
+		wp_cache_delete_multiple( $menu_nav_ids, 'post_meta' );
+		// Delete term caches.
+		wp_cache_delete_multiple( $term_ids, 'terms' );
+		$action_terms = new MockAction();
+		add_filter( 'update_term_metadata_cache', array( $action_terms, 'filter' ), 10, 2 );
+
+		$action_posts = new MockAction();
+		add_filter( 'update_post_metadata_cache', array( $action_posts, 'filter' ), 10, 2 );
+
+		$start_num_queries = get_num_queries();
+		wp_get_nav_menu_items( $this->menu_id );
+		$queries_made = get_num_queries() - $start_num_queries;
+		$this->assertSame( 6, $queries_made, 'Only does 6 database queries when running wp_get_nav_menu_items.' );
+
+		$args = $action_terms->get_args();
+		$last = end( $args );
+		$this->assertSameSets( $term_ids, $last[1], '_prime_term_caches() was not executed.' );
+
+		$args = $action_posts->get_args();
+		$this->assertSameSets( $menu_nav_ids, $args[0][1], '_prime_post_caches() was not executed.' );
+	}
+
 	/**
 	 * @ticket 13910
 	 */
diff --git a/tests/post/primePostCaches.php b/tests/post/primePostCaches.php
new file mode 100644
index 0000000000..ab99a2d322
--- /dev/null
+++ b/tests/post/primePostCaches.php
@@ -0,0 +1,229 @@
+<?php
+/**
+ * Test `_prime_post_caches()`.
+ *
+ * @package WordPress
+ */
+
+/**
+ * Test class for `_prime_post_caches()`.
+ *
+ * @group post
+ * @group cache
+ *
+ * @covers ::_prime_post_caches
+ */
+class Tests_Post_PrimePostCaches extends WP_UnitTestCase {
+
+	/**
+	 * Post IDs.
+	 *
+	 * @var int[]
+	 */
+	public static $posts;
+
+	/**
+	 * Set up test resources before the class.
+	 *
+	 * @param WP_UnitTest_Factory $factory The unit test factory.
+	 */
+	public static function wpSetupBeforeClass( WP_UnitTest_Factory $factory ) {
+		self::$posts = $factory->post->create_many( 3 );
+
+		$category = $factory->term->create(
+			array(
+				'taxonomy' => 'category',
+				'slug'     => 'foo',
+				'name'     => 'Foo',
+			)
+		);
+
+		wp_set_post_terms( self::$posts[0], $category, 'category' );
+		add_post_meta( self::$posts[0], 'meta', 'foo' );
+		add_post_meta( self::$posts[1], 'meta', 'bar' );
+	}
+
+	/**
+	 * @ticket 57163
+	 */
+	public function test_prime_post_caches() {
+		$post_id = self::$posts[0];
+
+		$this->assertSame( array( $post_id ), _get_non_cached_ids( array( $post_id ), 'posts' ), 'Post is already cached.' );
+
+		// Test posts cache.
+		$before_num_queries = get_num_queries();
+		_prime_post_caches( array( $post_id ) );
+		$num_queries = get_num_queries() - $before_num_queries;
+
+		/*
+		 * Four expected queries:
+		 * 1: Posts data,
+		 * 2: Post meta data,
+		 * 3: Taxonomy data,
+		 * 4: Term data.
+		 */
+		$this->assertSame( 4, $num_queries, 'Unexpected number of queries.' );
+
+		$this->assertSame( array(), _get_non_cached_ids( array( $post_id ), 'posts' ), 'Post is not cached.' );
+
+		// Test post meta cache.
+		$before_num_queries = get_num_queries();
+		$meta               = get_post_meta( $post_id, 'meta', true );
+		$num_queries        = get_num_queries() - $before_num_queries;
+
+		$this->assertSame( 'foo', $meta, 'Meta has unexpected value.' );
+		$this->assertSame( 0, $num_queries, 'Unexpected number of queries.' );
+
+		// Test term cache.
+		$before_num_queries = get_num_queries();
+		$categories         = get_the_category( $post_id );
+		$num_queries        = get_num_queries() - $before_num_queries;
+
+		$this->assertNotEmpty( $categories, 'Categories does return an empty result set.' );
+		$this->assertSame( 0, $num_queries, 'Unexpected number of queries.' );
+	}
+
+	/**
+	 * @ticket 57163
+	 */
+	public function test_prime_post_caches_with_multiple_posts() {
+		$this->assertSame( self::$posts, _get_non_cached_ids( self::$posts, 'posts' ), 'Posts are already cached.' );
+
+		$before_num_queries = get_num_queries();
+		_prime_post_caches( self::$posts );
+		$num_queries = get_num_queries() - $before_num_queries;
+
+		/*
+		 * Four expected queries:
+		 * 1: Posts data,
+		 * 2: Post meta data,
+		 * 3: Taxonomy data,
+		 * 4: Term data.
+		 */
+		$this->assertSame( 4, $num_queries, 'Unexpected number of queries.' );
+
+		$this->assertSame( array(), _get_non_cached_ids( self::$posts, 'posts' ), 'Posts are not cached.' );
+	}
+
+	/**
+	 * @ticket 57163
+	 */
+	public function test_prime_post_caches_only_posts_cache() {
+		$this->assertSame( self::$posts, _get_non_cached_ids( self::$posts, 'posts' ), 'Posts are already cached.' );
+
+		$before_num_queries = get_num_queries();
+		_prime_post_caches( self::$posts, false, false );
+		$num_queries = get_num_queries() - $before_num_queries;
+
+		/*
+		 * One expected query:
+		 * 1: Posts data.
+		 */
+		$this->assertSame( 1, $num_queries, 'Unexpected number of queries.' );
+
+		$this->assertSame( array(), _get_non_cached_ids( self::$posts, 'posts' ), 'Posts are not cached.' );
+	}
+
+	/**
+	 * @ticket 57163
+	 */
+	public function test_prime_post_caches_only_posts_and_term_cache() {
+		$this->assertSame( self::$posts, _get_non_cached_ids( self::$posts, 'posts' ), 'Posts are already cached.' );
+
+		$before_num_queries = get_num_queries();
+		_prime_post_caches( self::$posts, true, false );
+		$num_queries = get_num_queries() - $before_num_queries;
+
+		/*
+		 * Three expected queries:
+		 * 1: Posts data.
+		 * 2: Taxonomy data,
+		 * 3: Term data.
+		 */
+		$this->assertSame( 3, $num_queries, 'Unexpected number of queries.' );
+
+		$this->assertSame( array(), _get_non_cached_ids( self::$posts, 'posts' ), 'Posts are not cached.' );
+
+		// Test term cache.
+		$before_num_queries = get_num_queries();
+		$categories         = get_the_category( self::$posts[0] );
+		$num_queries        = get_num_queries() - $before_num_queries;
+
+		$this->assertNotEmpty( $categories, 'Categories does return an empty result set.' );
+		$this->assertSame( 0, $num_queries, 'Unexpected number of queries.' );
+	}
+
+	/**
+	 * @ticket 57163
+	 */
+	public function test_prime_post_caches_only_posts_and_meta_cache() {
+		$this->assertSame( self::$posts, _get_non_cached_ids( self::$posts, 'posts' ), 'Posts are already cached.' );
+
+		$before_num_queries = get_num_queries();
+		_prime_post_caches( self::$posts, false, true );
+		$num_queries = get_num_queries() - $before_num_queries;
+
+		/*
+		 * Two expected queries:
+		 * 1: Posts data.
+		 * 2: Post meta data.
+		 */
+		$this->assertSame( 2, $num_queries, 'Unexpected number of queries warming cache.' );
+
+		$this->assertSame( array(), _get_non_cached_ids( self::$posts, 'posts' ), 'Posts are not cached.' );
+
+		// Test post meta cache.
+		$before_num_queries = get_num_queries();
+		$meta_1             = get_post_meta( self::$posts[0], 'meta', true );
+		$meta_2             = get_post_meta( self::$posts[1], 'meta', true );
+		$num_queries        = get_num_queries() - $before_num_queries;
+
+		$this->assertSame( 'foo', $meta_1, 'Meta 1 has unexpected value.' );
+		$this->assertSame( 'bar', $meta_2, 'Meta 2 has unexpected value.' );
+		$this->assertSame( 0, $num_queries, 'Unexpected number of queries getting post meta.' );
+	}
+
+	/**
+	 * @ticket 57163
+	 */
+	public function test_prime_post_caches_accounts_for_posts_without_primed_meta_terms() {
+		$post_id = self::$posts[0];
+
+		$this->assertSame( array( $post_id ), _get_non_cached_ids( array( $post_id ), 'posts' ), 'Post is already cached.' );
+
+		// Warm only the posts cache.
+		$post = get_post( $post_id );
+		$this->assertNotEmpty( $post, 'Post does not exist.' );
+		$this->assertEmpty( _get_non_cached_ids( array( $post_id ), 'posts' ), 'Post is not cached.' );
+
+		$before_num_queries = get_num_queries();
+		_prime_post_caches( array( $post_id ) );
+		$num_queries = get_num_queries() - $before_num_queries;
+
+		/*
+		 * Three expected queries:
+		 * 1: Post meta data,
+		 * 2: Taxonomy data,
+		 * 3: Term data.
+		 */
+		$this->assertSame( 3, $num_queries, 'Unexpected number of queries.' );
+	}
+
+	/**
+	 * @ticket 57163
+	 */
+	public function test_prime_post_caches_does_not_prime_caches_twice() {
+		$this->assertSame( self::$posts, _get_non_cached_ids( self::$posts, 'posts' ), 'Posts are already cached.' );
+
+		_prime_post_caches( self::$posts );
+
+		$this->assertSame( array(), _get_non_cached_ids( self::$posts, 'posts' ), 'Posts are not cached.' );
+
+		$before_num_queries = get_num_queries();
+		_prime_post_caches( self::$posts );
+		$num_queries = get_num_queries() - $before_num_queries;
+
+		$this->assertSame( 0, $num_queries, 'Unexpected number of queries.' );
+	}
+}
diff --git a/tests/post/thumbnails.php b/tests/post/thumbnails.php
index d170e1bfa5..73199e4b4e 100644
--- a/tests/post/thumbnails.php
+++ b/tests/post/thumbnails.php
@@ -408,6 +408,41 @@ class Tests_Post_Thumbnail_Template extends WP_UnitTestCase {
 		$this->assertSame( $expected, $result );
 	}
 
+	/**
+	 * @ticket 57490
+	 */
+	public function test_get_the_post_thumbnail_includes_loading_lazy() {
+		set_post_thumbnail( self::$post, self::$attachment_id );
+
+		$html = get_the_post_thumbnail( self::$post );
+		$this->assertStringContainsString( ' loading="lazy"', $html );
+	}
+
+	/**
+	 * @ticket 57490
+	 */
+	public function test_get_the_post_thumbnail_respects_passed_loading_attr() {
+		set_post_thumbnail( self::$post, self::$attachment_id );
+
+		$html = get_the_post_thumbnail( self::$post, 'post-thumbnail', array( 'loading' => 'eager' ) );
+		$this->assertStringContainsString( ' loading="eager"', $html, 'loading=eager was not present in img tag because attributes array with loading=eager was overwritten.' );
+
+		$html = get_the_post_thumbnail( self::$post, 'post-thumbnail', 'loading=eager' );
+		$this->assertStringContainsString( ' loading="eager"', $html, 'loading=eager was not present in img tag because attributes string with loading=eager was overwritten.' );
+	}
+
+	/**
+	 * @ticket 57490
+	 */
+	public function test_get_the_post_thumbnail_respects_wp_lazy_loading_enabled_filter() {
+		set_post_thumbnail( self::$post, self::$attachment_id );
+
+		add_filter( 'wp_lazy_loading_enabled', '__return_false' );
+
+		$html = get_the_post_thumbnail( self::$post );
+		$this->assertStringNotContainsString( ' loading="lazy"', $html );
+	}
+
 	public function data_post_thumbnail_size_filter_complex() {
 		return array(
 			array( 0, 'medium' ),
diff --git a/tests/post/types.php b/tests/post/types.php
index 5ea10cbb2c..df1543fa0c 100644
--- a/tests/post/types.php
+++ b/tests/post/types.php
@@ -256,7 +256,7 @@ class Tests_Post_Types extends WP_UnitTestCase {
 		$this->assertNotNull( get_post_type_object( 'foo' ) );
 		$this->assertNull( get_post_type_object( array() ) );
 		$this->assertNull( get_post_type_object( array( 'foo' ) ) );
-		$this->assertNull( get_post_type_object( new stdClass ) );
+		$this->assertNull( get_post_type_object( new stdClass() ) );
 
 		_unregister_post_type( 'foo' );
 
diff --git a/tests/post/wpCountAttachments.php b/tests/post/wpCountAttachments.php
new file mode 100644
index 0000000000..af895d3a7b
--- /dev/null
+++ b/tests/post/wpCountAttachments.php
@@ -0,0 +1,33 @@
+<?php
+
+/**
+ * @group post
+ * @group media
+ * @group upload
+ *
+ * @covers ::wp_count_attachments
+ */
+class Tests_Post_wpCountAttachments extends WP_UnitTestCase {
+
+	/**
+	 * Tests that the result is cached.
+	 *
+	 * @ticket 55227
+	 */
+	public function test_wp_count_attachments_should_cache_the_result() {
+		$mime_type = 'image/jpeg';
+		$cache_key = 'attachments:image_jpeg';
+
+		self::factory()->post->create_many(
+			3,
+			array(
+				'post_type'      => 'attachment',
+				'post_mime_type' => $mime_type,
+			)
+		);
+		$expected = wp_count_attachments( $mime_type );
+		$actual   = wp_cache_get( $cache_key, 'counts' );
+
+		$this->assertEquals( $expected, $actual );
+	}
+}
diff --git a/tests/post/wpInsertPost.php b/tests/post/wpInsertPost.php
index 4ec43bbfec..167d29dd39 100644
--- a/tests/post/wpInsertPost.php
+++ b/tests/post/wpInsertPost.php
@@ -879,7 +879,7 @@ class Tests_Post_wpInsertPost extends WP_UnitTestCase {
 	/**
 	 * @ticket 19954
 	 */
-	function test_updating_a_post_should_not_trash_categories() {
+	public function test_updating_a_post_should_not_trash_categories() {
 		// Create a category and attach it to a new post.
 		$term_id = self::factory()->term->create(
 			array(
@@ -900,7 +900,7 @@ class Tests_Post_wpInsertPost extends WP_UnitTestCase {
 		// Validate that the term got assigned.
 		$assigned_terms = wp_get_object_terms( array( $post_id ), array( 'category' ), array() );
 		$this->assertCount( 1, $assigned_terms );
-		$this->assertEquals( $term_id, $assigned_terms[0]->term_id );
+		$this->assertSame( $term_id, $assigned_terms[0]->term_id );
 
 		// Update the post with no changes.
 		$post = get_post( $post_id );
@@ -909,7 +909,7 @@ class Tests_Post_wpInsertPost extends WP_UnitTestCase {
 		// Validate the term is still assigned.
 		$assigned_terms = wp_get_object_terms( array( $post_id ), array( 'category' ), array() );
 		$this->assertCount( 1, $assigned_terms );
-		$this->assertEquals( $term_id, $assigned_terms[0]->term_id );
+		$this->assertSame( $term_id, $assigned_terms[0]->term_id );
 
 		// Remove the term from the post.
 		$post->post_category = array();
@@ -1192,7 +1192,7 @@ class Tests_Post_wpInsertPost extends WP_UnitTestCase {
 				'post_status' => 'draft',
 			)
 		);
-		$this->assertSame( 0, $post_id );
+		$this->assertWPError( $post_id );
 
 		$post_id = self::factory()->post->create(
 			array(
@@ -1201,7 +1201,7 @@ class Tests_Post_wpInsertPost extends WP_UnitTestCase {
 				'post_status'   => 'draft',
 			)
 		);
-		$this->assertSame( 0, $post_id );
+		$this->assertWPError( $post_id );
 
 		// Empty post_date_gmt without floating status
 		$post_id = self::factory()->post->create(
@@ -1210,7 +1210,7 @@ class Tests_Post_wpInsertPost extends WP_UnitTestCase {
 				'post_status' => 'publish',
 			)
 		);
-		$this->assertSame( 0, $post_id );
+		$this->assertWPError( $post_id );
 
 		$post_id = self::factory()->post->create(
 			array(
@@ -1219,7 +1219,7 @@ class Tests_Post_wpInsertPost extends WP_UnitTestCase {
 				'post_status'   => 'publish',
 			)
 		);
-		$this->assertSame( 0, $post_id );
+		$this->assertWPError( $post_id );
 
 		// Valid post_date_gmt
 		$post_id = self::factory()->post->create(
@@ -1228,7 +1228,7 @@ class Tests_Post_wpInsertPost extends WP_UnitTestCase {
 				'post_date_gmt' => $post_date_gmt,
 			)
 		);
-		$this->assertSame( 0, $post_id );
+		$this->assertWPError( $post_id );
 
 		// Invalid post_date_gmt
 		$post_id = self::factory()->post->create(
@@ -1237,7 +1237,7 @@ class Tests_Post_wpInsertPost extends WP_UnitTestCase {
 				'post_date_gmt' => $invalid_date,
 			)
 		);
-		$this->assertSame( 0, $post_id );
+		$this->assertWPError( $post_id );
 	}
 
 	/**
diff --git a/tests/query.php b/tests/query.php
index fef3e19748..9c4ca439a5 100644
--- a/tests/query.php
+++ b/tests/query.php
@@ -33,7 +33,7 @@ class Tests_Query extends WP_UnitTestCase {
 	 * @ticket 16471
 	 */
 	public function test_default_query_var() {
-		$query = new WP_Query;
+		$query = new WP_Query();
 		$this->assertSame( '', $query->get( 'nonexistent' ) );
 		$this->assertFalse( $query->get( 'nonexistent', false ) );
 		$this->assertTrue( $query->get( 'nonexistent', true ) );
@@ -769,4 +769,132 @@ class Tests_Query extends WP_UnitTestCase {
 		$this->assertArrayHasKey( 'join', $posts_clauses_request );
 		$this->assertSame( '/* posts_join_request */', $posts_clauses_request['join'] );
 	}
+
+	/**
+	 * Tests that is_post_type_archive() returns false for an undefined post type.
+	 *
+	 * @ticket 56287
+	 *
+	 * @covers ::is_post_type_archive
+	 */
+	public function test_is_post_type_archive_should_return_false_for_an_undefined_post_type() {
+		global $wp_query;
+
+		$post_type = '56287-post-type';
+
+		// Force the request to be a post type archive.
+		$wp_query->is_post_type_archive = true;
+		$wp_query->set( 'post_type', $post_type );
+
+		$this->assertFalse( is_post_type_archive( $post_type ) );
+	}
+
+	/**
+	 * @ticket 29660
+	 */
+	public function test_query_singular_404_does_not_throw_warning() {
+		$q = new WP_Query(
+			array(
+				'pagename' => 'non-existent-page',
+			)
+		);
+
+		$this->assertSame( 0, $q->post_count );
+		$this->assertFalse( $q->is_single() );
+
+		$this->assertTrue( $q->is_singular() );
+		$this->assertFalse( $q->is_singular( 'page' ) );
+
+		$this->assertTrue( $q->is_page() );
+		$this->assertFalse( $q->is_page( 'non-existent-page' ) );
+	}
+
+	/**
+	 * @ticket 29660
+	 */
+	public function test_query_single_404_does_not_throw_warning() {
+		$q = new WP_Query(
+			array(
+				'name' => 'non-existent-post',
+			)
+		);
+
+		$this->assertSame( 0, $q->post_count );
+		$this->assertFalse( $q->is_page() );
+
+		$this->assertTrue( $q->is_singular() );
+		$this->assertFalse( $q->is_singular( 'post' ) );
+
+		$this->assertTrue( $q->is_single() );
+		$this->assertFalse( $q->is_single( 'non-existent-post' ) );
+	}
+
+	/**
+	 * @ticket 29660
+	 */
+	public function test_query_attachment_404_does_not_throw_warning() {
+		$q = new WP_Query(
+			array(
+				'attachment' => 'non-existent-attachment',
+			)
+		);
+
+		$this->assertSame( 0, $q->post_count );
+
+		$this->assertTrue( $q->is_singular() );
+		$this->assertFalse( $q->is_singular( 'attachment' ) );
+
+		$this->assertTrue( $q->is_attachment() );
+		$this->assertFalse( $q->is_attachment( 'non-existent-attachment' ) );
+	}
+
+	/**
+	 * @ticket 29660
+	 */
+	public function test_query_author_404_does_not_throw_warning() {
+		$q = new WP_Query(
+			array(
+				'author_name' => 'non-existent-author',
+			)
+		);
+
+		$this->assertSame( 0, $q->post_count );
+
+		$this->assertTrue( $q->is_author() );
+		$this->assertFalse( $q->is_author( 'non-existent-author' ) );
+	}
+
+	/**
+	 * @ticket 29660
+	 */
+	public function test_query_category_404_does_not_throw_warning() {
+		$q = new WP_Query(
+			array(
+				'category_name' => 'non-existent-category',
+			)
+		);
+
+		$this->assertSame( 0, $q->post_count );
+
+		$this->assertTrue( $q->is_category() );
+		$this->assertFalse( $q->is_tax() );
+		$this->assertFalse( $q->is_category( 'non-existent-category' ) );
+	}
+
+	/**
+	 * @ticket 29660
+	 */
+	public function test_query_tag_404_does_not_throw_warning() {
+		$q = new WP_Query(
+			array(
+				'tag' => 'non-existent-tag',
+			)
+		);
+
+		$this->assertSame( 0, $q->post_count );
+
+		$this->assertTrue( $q->is_tag() );
+		$this->assertFalse( $q->is_tax() );
+		$this->assertFalse( $q->is_tag( 'non-existent-tag' ) );
+	}
 }
diff --git a/tests/query/cacheResults.php b/tests/query/cacheResults.php
index d93b5ae9f1..4ac68ceb4e 100644
--- a/tests/query/cacheResults.php
+++ b/tests/query/cacheResults.php
@@ -33,6 +33,22 @@ class Test_Query_CacheResults extends WP_UnitTestCase {
 	 */
 	public static $author_id;
 
+	/**
+	 * For testing test_generate_cache_key() includes a test containing the
+	 * placeholder within the generated SQL query.
+	 *
+	 * @var bool
+	 */
+	public static $sql_placeholder_cache_key_tested = false;
+
+	/**
+	 * For testing test_generate_cache_key() includes a test containing the
+	 * placeholder within the generated WP_Query variables.
+	 *
+	 * @var bool
+	 */
+	public static $wp_query_placeholder_cache_key_tested = false;
+
 	public static function wpSetUpBeforeClass( WP_UnitTest_Factory $factory ) {
 		// Make some post objects.
 		self::$posts = $factory->post->create_many( 5 );
@@ -57,6 +73,104 @@ class Test_Query_CacheResults extends WP_UnitTestCase {
 		);
 	}
 
+	/**
+	 * Ensure cache keys are generated without WPDB placeholders.
+	 *
+	 * @ticket 56802
+	 *
+	 * @covers WP_Query::generate_cache_key
+	 *
+	 * @dataProvider data_query_cache
+	 */
+	public function test_generate_cache_key( $args ) {
+		global $wpdb;
+		$query1 = new WP_Query();
+		$query1->query( $args );
+
+		$query_vars             = $query1->query_vars;
+		$request                = $query1->request;
+		$request_no_placeholder = $wpdb->remove_placeholder_escape( $request );
+
+		$this->assertStringNotContainsString( $wpdb->placeholder_escape(), $request_no_placeholder, 'Placeholder escape should be removed from the modified request.' );
+
+		if ( str_contains( $request, $wpdb->placeholder_escape() ) ) {
+			self::$sql_placeholder_cache_key_tested = true;
+		}
+
+		if ( str_contains( serialize( $query_vars ), $wpdb->placeholder_escape() ) ) {
+			self::$wp_query_placeholder_cache_key_tested = true;
+		}
+
+		$reflection = new ReflectionMethod( $query1, 'generate_cache_key' );
+		$reflection->setAccessible( true );
+
+		$cache_key_1 = $reflection->invoke( $query1, $query_vars, $request );
+		$cache_key_2 = $reflection->invoke( $query1, $query_vars, $request_no_placeholder );
+
+		$this->assertSame( $cache_key_1, $cache_key_2, 'Cache key differs when using wpdb placeholder.' );
+	}
+
+	/**
+	 * Ensure cache keys tests include WPDB placeholder in SQL Query.
+	 *
+	 * @ticket 56802
+	 *
+	 * @covers WP_Query::generate_cache_key
+	 *
+	 * @depends test_generate_cache_key
+	 */
+	public function test_sql_placeholder_cache_key_tested() {
+		$this->assertTrue( self::$sql_placeholder_cache_key_tested, 'Cache key containing WPDB placeholder in SQL query was not tested.' );
+	}
+
+	/**
+	 * Ensure cache keys tests include WPDB placeholder in WP_Query arguments.
+	 *
+	 * This test mainly covers the search query which generates the `search_orderby_title`
+	 * query_var in WP_Query.
+	 *
+	 * @ticket 56802
+	 *
+	 * @covers WP_Query::generate_cache_key
+	 *
+	 * @depends test_generate_cache_key
+	 */
+	public function test_wp_query_placeholder_cache_key_tested() {
+		$this->assertTrue( self::$wp_query_placeholder_cache_key_tested, 'Cache key containing WPDB placeholder in WP_Query arguments was not tested.' );
+	}
+
+	/**
+	 * Ensure cache keys are generated without WPDB placeholders.
+	 *
+	 * @ticket 56802
+	 *
+	 * @covers WP_Query::generate_cache_key
+	 */
+	public function test_generate_cache_key_placeholder() {
+		global $wpdb;
+		$query1 = new WP_Query();
+		$query1->query( array() );
+
+		$query_vars                                  = $query1->query_vars;
+		$request                                     = $query1->request;
+		$query_vars['test']['nest']                  = '%';
+		$query_vars['test2']['nest']['nest']['nest'] = '%';
+		$this->assertStringNotContainsString( $wpdb->placeholder_escape(), serialize( $query_vars ), 'Query vars should not contain the wpdb placeholder.' );
+
+		$reflection = new ReflectionMethod( $query1, 'generate_cache_key' );
+		$reflection->setAccessible( true );
+
+		$cache_key_1 = $reflection->invoke( $query1, $query_vars, $request );
+
+		$query_vars['test']['nest']                  = $wpdb->placeholder_escape();
+		$query_vars['test2']['nest']['nest']['nest'] = $wpdb->placeholder_escape();
+		$this->assertStringContainsString( $wpdb->placeholder_escape(), serialize( $query_vars ), 'Query vars should not contain the wpdb placeholder.' );
+
+		$cache_key_2 = $reflection->invoke( $query1, $query_vars, $request );
+
+		$this->assertSame( $cache_key_1, $cache_key_2, 'Cache key differs when using wpdb placeholder.' );
+	}
+
 	/**
 	 * @dataProvider data_query_cache
 	 * @ticket 22176
@@ -191,6 +305,64 @@ class Test_Query_CacheResults extends WP_UnitTestCase {
 					),
 				),
 			),
+			'cache meta query search'                     => array(
+				'args' => array(
+					'cache_results' => true,
+					'meta_query'    => array(
+						array(
+							'key'     => 'color',
+							'value'   => '00',
+							'compare' => 'LIKE',
+						),
+					),
+				),
+			),
+			'cache nested meta query search'              => array(
+				'args' => array(
+					'cache_results' => true,
+					'meta_query'    => array(
+						'relation' => 'AND',
+						array(
+							'key'     => 'color',
+							'value'   => '00',
+							'compare' => 'LIKE',
+						),
+						array(
+							'relation' => 'OR',
+							array(
+								'key'     => 'color',
+								'value'   => '00',
+								'compare' => 'LIKE',
+							),
+							array(
+								'relation' => 'AND',
+								array(
+									'key'     => 'wp_test_suite',
+									'value'   => '56802',
+									'compare' => 'LIKE',
+								),
+								array(
+									'key'     => 'wp_test_suite_too',
+									'value'   => '56802',
+									'compare' => 'LIKE',
+								),
+							),
+						),
+					),
+				),
+			),
+			'cache meta query not search'                 => array(
+				'args' => array(
+					'cache_results' => true,
+					'meta_query'    => array(
+						array(
+							'key'     => 'color',
+							'value'   => 'ff',
+							'compare' => 'NOT LIKE',
+						),
+					),
+				),
+			),
 			'cache comment_count'                         => array(
 				'args' => array(
 					'cache_results' => true,
@@ -209,6 +381,18 @@ class Test_Query_CacheResults extends WP_UnitTestCase {
 					),
 				),
 			),
+			'cache search query'                          => array(
+				'args' => array(
+					'cache_results' => true,
+					's'             => 'title',
+				),
+			),
+			'cache search query multiple terms'           => array(
+				'args' => array(
+					'cache_results' => true,
+					's'             => 'Post title',
+				),
+			),
 		);
 	}
 
@@ -984,4 +1168,174 @@ class Test_Query_CacheResults extends WP_UnitTestCase {
 		$this->assertContains( $post_id, $post_ids_q2, 'Second query does not include the post ID.' );
 		$this->assertNotSame( $num_queries, get_num_queries(), 'Removing term does not invalidate previous cache.' );
 	}
+
+	/**
+	 * @ticket 22176
+	 * @dataProvider data_query_cache_with_empty_result_set
+	 */
+	public function test_query_cache_with_empty_result_set( $fields_q1, $fields_q2 ) {
+		_delete_all_posts();
+
+		$args_q1 = array(
+			'fields' => $fields_q1,
+		);
+
+		$query_1  = new WP_Query();
+		$posts_q1 = $query_1->query( $args_q1 );
+		$this->assertEmpty( $posts_q1, 'First query does not return an empty result set.' );
+
+		$args_q2 = array(
+			'fields' => $fields_q2,
+		);
+
+		$num_queries = get_num_queries();
+		$query_2     = new WP_Query();
+		$posts_q2    = $query_2->query( $args_q2 );
+		$this->assertEmpty( $posts_q2, 'Second query does not return an empty result set.' );
+		$this->assertSame( $num_queries, get_num_queries(), 'Second query is not cached.' );
+	}
+
+	public function data_query_cache_with_empty_result_set() {
+		return array(
+			array( '', '' ),
+			array( '', 'ids' ),
+			array( '', 'id=>parent' ),
+
+			array( 'ids', '' ),
+			array( 'ids', 'ids' ),
+			array( 'ids', 'id=>parent' ),
+
+			array( 'id=>parent', '' ),
+			array( 'id=>parent', 'ids' ),
+			array( 'id=>parent', 'id=>parent' ),
+		);
+	}
+
+	/**
+	 * Ensure starting the loop warms the author cache.
+	 *
+	 * @since 6.1.1
+	 * @ticket 56948
+	 *
+	 * @covers WP_Query::the_post
+	 *
+	 * @dataProvider data_author_cache_warmed_by_the_loop
+	 *
+	 * @param string $fields Query fields.
+	 */
+	public function test_author_cache_warmed_by_the_loop( $fields ) {
+		// Update post author for the parent post.
+		self::factory()->post->update_object( self::$pages[0], array( 'post_author' => self::$author_id ) );
+
+		self::factory()->post->create(
+			array(
+				'post_author' => self::$author_id,
+				'post_parent' => self::$pages[0],
+				'post_type'   => 'page',
+			)
+		);
+
+		$query_1 = new WP_Query(
+			array(
+				'post_type'              => 'page',
+				'fields'                 => $fields,
+				'author'                 => self::$author_id,
+				'update_post_meta_cache' => false,
+				'update_post_term_cache' => false,
+			)
+		);
+
+		// Start the loop.
+		$start_loop_queries = get_num_queries();
+		$query_1->the_post();
+		$num_loop_queries = get_num_queries() - $start_loop_queries;
+		/*
+		 * Two expected queries:
+		 * 1: User meta data,
+		 * 2: User data.
+		 */
+		$this->assertSame( 2, $num_loop_queries, 'Unexpected number of queries while initializing the loop.' );
+
+		$start_author_queries = get_num_queries();
+		get_user_by( 'ID', self::$author_id );
+		$num_author_queries = get_num_queries() - $start_author_queries;
+		$this->assertSame( 0, $num_author_queries, 'Author cache is not warmed by the loop.' );
+	}
+
+	/**
+	 * Data provider for test_author_cache_warmed_by_the_loop
+	 *
+	 * @return array[]
+	 */
+	public function data_author_cache_warmed_by_the_loop() {
+		return array(
+			'fields: empty' => array( '' ),
+			'fields: all'   => array( 'all' ),
+			'fields: ids'   => array( 'ids' ),
+			/*
+			 * `id=>parent` is untested pending the resolution of an existing bug.
+			 * See https://core.trac.wordpress.org/ticket/56992
+			 */
+		);
+	}
+
+	/**
+	 * Ensure lazy loading term meta queries all term meta in a single query.
+	 *
+	 * @since 6.1.2
+	 * @ticket 57163
+	 * @ticket 22176
+	 */
+	public function test_get_post_meta_lazy_loads_all_term_meta_data() {
+		$query = new WP_Query();
+
+		$t2 = $this->factory()->term->create(
+			array(
+				'taxonomy' => 'category',
+				'slug'     => 'bar',
+				'name'     => 'Bar',
+			)
+		);
+
+		wp_set_post_terms( self::$posts[0], $t2, 'category', true );
+		// Clean data added to cache by factory and setting terms.
+		clean_term_cache( array( self::$t1, $t2 ), 'category' );
+		clean_post_cache( self::$posts[0] );
+
+		$num_queries_start = get_num_queries();
+		$query_posts       = $query->query(
+			array(
+				'lazy_load_term_meta' => true,
+				'no_found_rows'       => true,
+			)
+		);
+		$num_queries       = get_num_queries() - $num_queries_start;
+
+		/*
+		 * Four expected queries:
+		 * 1: Post IDs
+		 * 2: Post data
+		 * 3: Post meta data.
+		 * 4: Post term data.
+		 */
+		$this->assertSame( 4, $num_queries, 'Unexpected number of queries while querying posts.' );
+		$this->assertNotEmpty( $query_posts, 'Query posts is empty.' );
+
+		$num_queries_start = get_num_queries();
+		get_term_meta( self::$t1 );
+		$num_queries = get_num_queries() - $num_queries_start;
+
+		/*
+		 * One expected query:
+		 * 1: Term meta data.
+		 */
+		$this->assertSame( 1, $num_queries, 'Unexpected number of queries during first query of term meta.' );
+
+		$num_queries_start = get_num_queries();
+		get_term_meta( $t2 );
+		$num_queries = get_num_queries() - $num_queries_start;
+
+		// No additional queries expected.
+		$this->assertSame( 0, $num_queries, 'Unexpected number of queries during second query of term meta.' );
+	}
 }
diff --git a/tests/query/date.php b/tests/query/date.php
index d54f8af77c..978368674a 100644
--- a/tests/query/date.php
+++ b/tests/query/date.php
@@ -298,7 +298,7 @@ class Tests_Query_Date extends WP_UnitTestCase {
 			)
 		);
 
-		$this->assertEquals( $expected, $posts );
+		$this->assertEqualSets( $expected, $posts );
 	}
 
 	public function test_simple_monthnum_expecting_results() {
diff --git a/tests/query/fieldsClause.php b/tests/query/fieldsClause.php
new file mode 100644
index 0000000000..28c040d79c
--- /dev/null
+++ b/tests/query/fieldsClause.php
@@ -0,0 +1,234 @@
+<?php
+/**
+ * @group query
+ *
+ * @covers WP_Query::get_posts
+ */
+class Tests_Query_FieldsClause extends WP_UnitTestCase {
+
+	/**
+	 * Post IDs.
+	 *
+	 * @var int[]
+	 */
+	private static $post_ids = array();
+
+	/**
+	 * Page IDs.
+	 *
+	 * @var int[]
+	 */
+	private static $page_ids = array();
+
+	public static function wpSetUpBeforeClass( WP_UnitTest_Factory $factory ) {
+		// Register CPT for use with shared fixtures.
+		register_post_type( 'wptests_pt' );
+
+		self::$post_ids = $factory->post->create_many( 5, array( 'post_type' => 'wptests_pt' ) );
+	}
+
+	public function set_up() {
+		parent::set_up();
+		/*
+		 * Re-register the CPT for use within each test.
+		 *
+		 * Custom post types are deregistered by the default tear_down method
+		 * so need to be re-registered for each test as WP_Query calls
+		 * get_post_types().
+		 */
+		register_post_type( 'wptests_pt' );
+	}
+
+	/**
+	 * Tests limiting the WP_Query fields to the ID and parent sub-set.
+	 *
+	 * @ticket 57012
+	 */
+	public function test_should_limit_fields_to_id_and_parent_subset() {
+		$query_args = array(
+			'post_type' => 'wptests_pt',
+			'fields'    => 'id=>parent',
+		);
+
+		$q = new WP_Query( $query_args );
+
+		$expected = array();
+		foreach ( self::$post_ids as $post_id ) {
+			$expected[] = (object) array(
+				'ID'          => $post_id,
+				'post_parent' => 0,
+			);
+		}
+
+		$this->assertEqualSets( $expected, $q->posts, 'Posts property for first query is not of expected form.' );
+		$this->assertSame( 5, $q->found_posts, 'Number of found posts is not five.' );
+		$this->assertEquals( 1, $q->max_num_pages, 'Number of found pages is not one.' );
+
+		// Test the second query's results match.
+		$q2 = new WP_Query( $query_args );
+		$this->assertEqualSets( $expected, $q2->posts, 'Posts property for second query is not in the expected form.' );
+	}
+
+	/**
+	 * Tests limiting the WP_Query fields to the IDs only.
+	 *
+	 * @ticket 57012
+	 */
+	public function test_should_limit_fields_to_ids() {
+		$query_args = array(
+			'post_type' => 'wptests_pt',
+			'fields'    => 'ids',
+		);
+
+		$q = new WP_Query( $query_args );
+
+		$expected = self::$post_ids;
+
+		$this->assertEqualSets( $expected, $q->posts, 'Posts property for first query is not of expected form.' );
+		$this->assertSame( 5, $q->found_posts, 'Number of found posts is not five.' );
+		$this->assertEquals( 1, $q->max_num_pages, 'Number of found pages is not one.' );
+
+		// Test the second query's results match.
+		$q2 = new WP_Query( $query_args );
+		$this->assertEqualSets( $expected, $q2->posts, 'Posts property for second query is not in the expected form.' );
+	}
+
+	/**
+	 * Tests querying all fields via WP_Query.
+	 *
+	 * @ticket 57012
+	 */
+	public function test_should_query_all_fields() {
+		$query_args = array(
+			'post_type' => 'wptests_pt',
+			'fields'    => 'all',
+		);
+
+		$q = new WP_Query( $query_args );
+
+		$expected = array_map( 'get_post', self::$post_ids );
+
+		$this->assertEqualSets( $expected, $q->posts, 'Posts property for first query is not of expected form.' );
+		$this->assertSame( 5, $q->found_posts, 'Number of found posts is not five.' );
+		$this->assertEquals( 1, $q->max_num_pages, 'Number of found pages is not one.' );
+
+		// Test the second query's results match.
+		$q2 = new WP_Query( $query_args );
+		$this->assertEqualSets( $expected, $q2->posts, 'Posts property for second query is not in the expected form.' );
+	}
+
+	/**
+	 * Tests adding fields to WP_Query via filters when requesting the ID and parent sub-set.
+	 *
+	 * @ticket 57012
+	 */
+	public function test_should_include_filtered_values_in_addition_to_id_and_parent_subset() {
+		add_filter( 'posts_fields', array( $this, 'filter_posts_fields' ) );
+		add_filter( 'posts_clauses', array( $this, 'filter_posts_clauses' ) );
+
+		$query_args = array(
+			'post_type' => 'wptests_pt',
+			'fields'    => 'id=>parent',
+		);
+
+		$q = new WP_Query( $query_args );
+
+		$expected = array();
+		foreach ( self::$post_ids as $post_id ) {
+			$expected[] = (object) array(
+				'ID'                => $post_id,
+				'post_parent'       => 0,
+				'test_post_fields'  => '1',
+				'test_post_clauses' => '2',
+			);
+		}
+
+		$this->assertEqualSets( $expected, $q->posts, 'Posts property for first query is not of expected form.' );
+		$this->assertSame( 5, $q->found_posts, 'Number of found posts is not five.' );
+		$this->assertEquals( 1, $q->max_num_pages, 'Number of found pages is not one.' );
+
+		// Test the second query's results match.
+		$q2 = new WP_Query( $query_args );
+		$this->assertEqualSets( $expected, $q2->posts, 'Posts property for second query is not in the expected form.' );
+	}
+
+	/**
+	 * Tests adding fields to WP_Query via filters when requesting the ID field.
+	 *
+	 * @ticket 57012
+	 */
+	public function test_should_include_filtered_values_in_addition_to_id() {
+		add_filter( 'posts_fields', array( $this, 'filter_posts_fields' ) );
+		add_filter( 'posts_clauses', array( $this, 'filter_posts_clauses' ) );
+
+		$query_args = array(
+			'post_type' => 'wptests_pt',
+			'fields'    => 'ids',
+		);
+
+		$q = new WP_Query( $query_args );
+
+		// `fields => ids` does not include the additional fields.
+		$expected = self::$post_ids;
+
+		$this->assertEqualSets( $expected, $q->posts, 'Posts property for first query is not of expected form.' );
+		$this->assertSame( 5, $q->found_posts, 'Number of found posts is not five.' );
+		$this->assertEquals( 1, $q->max_num_pages, 'Number of found pages is not one.' );
+
+		// Test the second query's results match.
+		$q2 = new WP_Query( $query_args );
+		$this->assertEqualSets( $expected, $q2->posts, 'Posts property for second query is not in the expected form.' );
+	}
+
+	/**
+	 * Tests adding fields to WP_Query via filters when requesting all fields.
+	 *
+	 * @ticket 57012
+	 */
+	public function test_should_include_filtered_values() {
+		add_filter( 'posts_fields', array( $this, 'filter_posts_fields' ) );
+		add_filter( 'posts_clauses', array( $this, 'filter_posts_clauses' ) );
+
+		$query_args = array(
+			'post_type' => 'wptests_pt',
+			'fields'    => 'all',
+		);
+
+		$q = new WP_Query( $query_args );
+
+		$expected = array_map( 'get_post', self::$post_ids );
+		foreach ( $expected as $post ) {
+			$post->test_post_fields  = '1';
+			$post->test_post_clauses = '2';
+		}
+
+		$this->assertEqualSets( $expected, $q->posts, 'Posts property for first query is not of expected form.' );
+		$this->assertSame( 5, $q->found_posts, 'Number of found posts is not five.' );
+		$this->assertEquals( 1, $q->max_num_pages, 'Number of found pages is not one.' );
+
+		// Test the second query's results match.
+		$q2 = new WP_Query( $query_args );
+		$this->assertEqualSets( $expected, $q2->posts, 'Posts property for second query is not in the expected form.' );
+	}
+
+	/**
+	 * Filters the posts fields.
+	 *
+	 * @param string $fields The fields to SELECT.
+	 * @return string The filtered fields.
+	 */
+	public function filter_posts_fields( $fields ) {
+		return "$fields, 1 as test_post_fields";
+	}
+
+	/**
+	 * Filters the posts clauses.
+	 *
+	 * @param array $clauses The WP_Query database clauses.
+	 * @return array The filtered database clauses.
+	 */
+	public function filter_posts_clauses( $clauses ) {
+		$clauses['fields'] .= ', 2 as test_post_clauses';
+		return $clauses;
+	}
+}
diff --git a/tests/query/generatePostdata.php b/tests/query/generatePostdata.php
index c223e4b598..5d39dfb5d4 100644
--- a/tests/query/generatePostdata.php
+++ b/tests/query/generatePostdata.php
@@ -19,7 +19,7 @@ class Tests_Query_GeneratePostdata extends WP_UnitTestCase {
 	 * @ticket 42814
 	 */
 	public function test_setup_by_fake_post() {
-		$fake     = new stdClass;
+		$fake     = new stdClass();
 		$fake->ID = 98765;
 		$data     = generate_postdata( $fake->ID );
 
diff --git a/tests/query/postStatus.php b/tests/query/postStatus.php
index 1ab8aa849d..238551b524 100644
--- a/tests/query/postStatus.php
+++ b/tests/query/postStatus.php
@@ -87,7 +87,7 @@ class Tests_Query_PostStatus extends WP_UnitTestCase {
 	 * Register custom post types and statuses used in multiple tests.
 	 *
 	 * CPTs and CPSs are reset between each test run so need to be registered
-	 * in both the wpSetUpBeforeClass() and setUp() methods.
+	 * in both the wpSetUpBeforeClass() and set_up() methods.
 	 */
 	public static function register_custom_post_objects() {
 		register_post_type(
diff --git a/tests/query/search.php b/tests/query/search.php
index 954bd5f748..33b342655a 100644
--- a/tests/query/search.php
+++ b/tests/query/search.php
@@ -454,7 +454,7 @@ class Tests_Query_Search extends WP_UnitTestCase {
 		);
 
 		add_post_meta( $attachment, '_wp_attached_file', 'some-image1.png', true );
-		add_filter( 'posts_clauses', '_filter_query_attachment_filenames' );
+		add_filter( 'wp_allow_query_attachment_by_filename', '__return_true' );
 
 		// Pass post_type a string value.
 		$q = new WP_Query(
@@ -484,7 +484,7 @@ class Tests_Query_Search extends WP_UnitTestCase {
 		);
 
 		add_post_meta( $attachment, '_wp_attached_file', 'some-image2.png', true );
-		add_filter( 'posts_clauses', '_filter_query_attachment_filenames' );
+		add_filter( 'wp_allow_query_attachment_by_filename', '__return_true' );
 
 		// Pass post_type an array value.
 		$q = new WP_Query(
@@ -543,7 +543,7 @@ class Tests_Query_Search extends WP_UnitTestCase {
 
 		add_post_meta( $attachment, '_wp_attached_file', 'some-image4.png', true );
 		add_post_meta( $attachment, '_test_meta_key', 'value', true );
-		add_filter( 'posts_clauses', '_filter_query_attachment_filenames' );
+		add_filter( 'wp_allow_query_attachment_by_filename', '__return_true' );
 
 		// Pass post_type a string value.
 		$q = new WP_Query(
@@ -583,7 +583,7 @@ class Tests_Query_Search extends WP_UnitTestCase {
 		wp_set_post_terms( $attachment, 'test', 'post_tag' );
 
 		add_post_meta( $attachment, '_wp_attached_file', 'some-image5.png', true );
-		add_filter( 'posts_clauses', '_filter_query_attachment_filenames' );
+		add_filter( 'wp_allow_query_attachment_by_filename', '__return_true' );
 
 		// Pass post_type a string value.
 		$q = new WP_Query(
@@ -608,25 +608,37 @@ class Tests_Query_Search extends WP_UnitTestCase {
 	/**
 	 * @ticket 22744
 	 */
-	public function test_filter_query_attachment_filenames_unhooks_itself() {
-		add_filter( 'posts_clauses', '_filter_query_attachment_filenames' );
+	public function test_wp_query_removes_filter_wp_allow_query_attachment_by_filename() {
+		$attachment = self::factory()->post->create(
+			array(
+				'post_type'    => 'attachment',
+				'post_status'  => 'publish',
+				'post_title'   => 'bar foo',
+				'post_content' => 'foo bar',
+				'post_excerpt' => 'This post has foo',
+			)
+		);
 
-		apply_filters(
-			'posts_clauses',
+		add_post_meta( $attachment, '_wp_attached_file', 'some-image1.png', true );
+		add_filter( 'wp_allow_query_attachment_by_filename', '__return_true' );
+
+		$q = new WP_Query(
 			array(
-				'where'    => '',
-				'groupby'  => '',
-				'join'     => '',
-				'orderby'  => '',
-				'distinct' => '',
-				'fields'   => '',
-				'limit'    => '',
+				's'           => 'image1',
+				'fields'      => 'ids',
+				'post_type'   => 'attachment',
+				'post_status' => 'inherit',
 			)
 		);
 
-		$result = has_filter( 'posts_clauses', '_filter_query_attachment_filenames' );
+		$this->assertSame( array( $attachment ), $q->posts );
 
-		$this->assertFalse( $result );
+		/*
+		 * WP_Query should have removed the wp_allow_query_attachment_by_filename filter
+		 * and thus not match the attachment created above.
+		 */
+		$q->get_posts();
+		$this->assertEmpty( $q->posts );
 	}
 
 	public function filter_posts_search( $sql ) {
diff --git a/tests/query/setupPostdata.php b/tests/query/setupPostdata.php
index cabfba7c5b..985ae06f7a 100644
--- a/tests/query/setupPostdata.php
+++ b/tests/query/setupPostdata.php
@@ -33,7 +33,7 @@ class Tests_Query_SetupPostdata extends WP_UnitTestCase {
 	 * @ticket 30970
 	 */
 	public function test_setup_by_fake_post() {
-		$fake     = new stdClass;
+		$fake     = new stdClass();
 		$fake->ID = 98765;
 		setup_postdata( $fake->ID );
 
diff --git a/tests/query/vars.php b/tests/query/vars.php
index 7f336908a2..4b4b96561b 100644
--- a/tests/query/vars.php
+++ b/tests/query/vars.php
@@ -14,7 +14,7 @@ class Tests_Query_Vars extends WP_UnitTestCase {
 	public function testPublicQueryVarsAreAsExpected() {
 		global $wp;
 
-		// Re-initialise any dynamically-added public query vars:
+		// Re-initialize any dynamically-added public query vars:
 		do_action( 'init' );
 
 		$this->assertSame(
diff --git a/tests/external-http/basic.php b/tests/readme.php
similarity index 91%
rename from tests/external-http/basic.php
rename to tests/readme.php
index 7ecc8713cc..f0068d821e 100644
--- a/tests/external-http/basic.php
+++ b/tests/readme.php
@@ -1,13 +1,14 @@
 <?php
 /**
+ * Validate recommended versions for dependencies referenced in `readme.html`,
+ * based on external site support pages.
+ *
  * @group external-http
  */
-class Tests_External_HTTP_Basic extends WP_UnitTestCase {
+class Tests_Readme extends WP_UnitTestCase {
 
 	/**
-	 * @covers ::wp_remote_get
-	 * @covers ::wp_remote_retrieve_response_code
-	 * @covers ::wp_remote_retrieve_body
+	 * @coversNothing
 	 */
 	public function test_readme_php_version() {
 		$this->markTestSkipped(
@@ -29,9 +30,7 @@ class Tests_External_HTTP_Basic extends WP_UnitTestCase {
 	}
 
 	/**
-	 * @covers ::wp_remote_get
-	 * @covers ::wp_remote_retrieve_response_code
-	 * @covers ::wp_remote_retrieve_body
+	 * @coversNothing
 	 */
 	public function test_readme_mysql_version() {
 		// This test is designed to only run on trunk.
@@ -62,9 +61,7 @@ class Tests_External_HTTP_Basic extends WP_UnitTestCase {
 	}
 
 	/**
-	 * @covers ::wp_remote_get
-	 * @covers ::wp_remote_retrieve_response_code
-	 * @covers ::wp_remote_retrieve_body
+	 * @coversNothing
 	 */
 	public function test_readme_mariadb_version() {
 		// This test is designed to only run on trunk.
diff --git a/tests/rest-api.php b/tests/rest-api.php
index fa25502959..854e9b8338 100644
--- a/tests/rest-api.php
+++ b/tests/rest-api.php
@@ -2518,4 +2518,23 @@ class Tests_REST_API extends WP_UnitTestCase {
 			array( 'description', '_links' )
 		);
 	}
+
+	/**
+	 * @ticket 51986
+	 */
+	public function test_route_args_is_array_of_arrays() {
+		$this->setExpectedIncorrectUsage( 'register_rest_route' );
+
+		$registered = register_rest_route(
+			'my-ns/v1',
+			'/my-route',
+			array(
+				'callback'            => '__return_true',
+				'permission_callback' => '__return_true',
+				'args'                => array( 'pattern' ),
+			)
+		);
+
+		$this->assertTrue( $registered );
+	}
 }
diff --git a/tests/rest-api/rest-application-passwords-controller.php b/tests/rest-api/rest-application-passwords-controller.php
index d4418f62cd..1162c1f733 100644
--- a/tests/rest-api/rest-application-passwords-controller.php
+++ b/tests/rest-api/rest-application-passwords-controller.php
@@ -992,7 +992,7 @@ class WP_Test_REST_Application_Passwords_Controller extends WP_Test_REST_Control
 
 		$actual = wp_is_application_passwords_supported();
 
-		// Revert to default behaviour so that other tests are not affected.
+		// Revert to default behavior so that other tests are not affected.
 		putenv( 'WP_ENVIRONMENT_TYPE' );
 
 		$this->assertTrue( $actual );
@@ -1024,7 +1024,7 @@ class WP_Test_REST_Application_Passwords_Controller extends WP_Test_REST_Control
 		$actual = wp_is_application_passwords_available();
 
 		if ( 'default' === $expected ) {
-			// Revert to default behaviour so that other tests are not affected.
+			// Revert to default behavior so that other tests are not affected.
 			putenv( 'WP_ENVIRONMENT_TYPE' );
 		}
 
diff --git a/tests/rest-api/rest-attachments-controller.php b/tests/rest-api/rest-attachments-controller.php
index 05f6aab921..0a37e44a95 100644
--- a/tests/rest-api/rest-attachments-controller.php
+++ b/tests/rest-api/rest-attachments-controller.php
@@ -22,12 +22,12 @@ class WP_Test_REST_Attachments_Controller extends WP_Test_REST_Post_Type_Control
 	/**
 	 * @var string The path to a test file.
 	 */
-	private $test_file;
+	private static $test_file;
 
 	/**
 	 * @var string The path to a second test file.
 	 */
-	private $test_file2;
+	private static $test_file2;
 
 	/**
 	 * @var array The recorded posts query clauses.
@@ -68,6 +68,13 @@ class WP_Test_REST_Attachments_Controller extends WP_Test_REST_Post_Type_Control
 	}
 
 	public static function wpTearDownAfterClass() {
+		if ( file_exists( self::$test_file ) ) {
+			unlink( self::$test_file );
+		}
+		if ( file_exists( self::$test_file2 ) ) {
+			unlink( self::$test_file2 );
+		}
+
 		self::delete_user( self::$editor_id );
 		self::delete_user( self::$author_id );
 		self::delete_user( self::$contributor_id );
@@ -85,15 +92,19 @@ class WP_Test_REST_Attachments_Controller extends WP_Test_REST_Post_Type_Control
 		$role->add_cap( 'level_0' );
 
 		$orig_file       = DIR_TESTDATA . '/images/canola.jpg';
-		$this->test_file = get_temp_dir() . 'canola.jpg';
-		copy( $orig_file, $this->test_file );
+		self::$test_file = get_temp_dir() . 'canola.jpg';
+		if ( ! file_exists( self::$test_file ) ) {
+			copy( $orig_file, self::$test_file );
+		}
+
 		$orig_file2       = DIR_TESTDATA . '/images/codeispoetry.png';
-		$this->test_file2 = get_temp_dir() . 'codeispoetry.png';
-		copy( $orig_file2, $this->test_file2 );
+		self::$test_file2 = get_temp_dir() . 'codeispoetry.png';
+		if ( ! file_exists( self::$test_file2 ) ) {
+			copy( $orig_file2, self::$test_file2 );
+		}
 
 		add_filter( 'rest_pre_dispatch', array( $this, 'wpSetUpBeforeRequest' ), 10, 3 );
 		add_filter( 'posts_clauses', array( $this, 'save_posts_clauses' ), 10, 2 );
-		add_filter( 'image_editor_output_format', '__return_empty_array' );
 	}
 
 	public function wpSetUpBeforeRequest( $result ) {
@@ -107,13 +118,6 @@ class WP_Test_REST_Attachments_Controller extends WP_Test_REST_Post_Type_Control
 	}
 
 	public function tear_down() {
-		if ( file_exists( $this->test_file ) ) {
-			unlink( $this->test_file );
-		}
-		if ( file_exists( $this->test_file2 ) ) {
-			unlink( $this->test_file2 );
-		}
-
 		$this->remove_added_uploads();
 
 		if ( class_exists( WP_Image_Editor_Mock::class ) ) {
@@ -122,8 +126,6 @@ class WP_Test_REST_Attachments_Controller extends WP_Test_REST_Post_Type_Control
 			WP_Image_Editor_Mock::$size_return = null;
 		}
 
-		remove_filter( 'image_editor_output_format', '__return_empty_array' );
-
 		parent::tear_down();
 	}
 
@@ -186,7 +188,7 @@ class WP_Test_REST_Attachments_Controller extends WP_Test_REST_Post_Type_Control
 		$this->assertSame( array( 'view', 'embed', 'edit' ), $data['endpoints'][0]['args']['context']['enum'] );
 		// Single.
 		$attachment_id = self::factory()->attachment->create_object(
-			$this->test_file,
+			self::$test_file,
 			0,
 			array(
 				'post_mime_type' => 'image/jpeg',
@@ -247,7 +249,7 @@ class WP_Test_REST_Attachments_Controller extends WP_Test_REST_Post_Type_Control
 
 	public function test_registered_get_item_params() {
 		$id1      = self::factory()->attachment->create_object(
-			$this->test_file,
+			self::$test_file,
 			0,
 			array(
 				'post_mime_type' => 'image/jpeg',
@@ -267,7 +269,7 @@ class WP_Test_REST_Attachments_Controller extends WP_Test_REST_Post_Type_Control
 	 */
 	public function test_allow_header_sent_on_options_request() {
 		$id1      = self::factory()->attachment->create_object(
-			$this->test_file,
+			self::$test_file,
 			0,
 			array(
 				'post_mime_type' => 'image/jpeg',
@@ -295,7 +297,7 @@ class WP_Test_REST_Attachments_Controller extends WP_Test_REST_Post_Type_Control
 	public function test_get_items() {
 		wp_set_current_user( 0 );
 		$id1            = self::factory()->attachment->create_object(
-			$this->test_file,
+			self::$test_file,
 			0,
 			array(
 				'post_mime_type' => 'image/jpeg',
@@ -304,7 +306,7 @@ class WP_Test_REST_Attachments_Controller extends WP_Test_REST_Post_Type_Control
 		);
 		$draft_post     = self::factory()->post->create( array( 'post_status' => 'draft' ) );
 		$id2            = self::factory()->attachment->create_object(
-			$this->test_file,
+			self::$test_file,
 			$draft_post,
 			array(
 				'post_mime_type' => 'image/jpeg',
@@ -313,7 +315,7 @@ class WP_Test_REST_Attachments_Controller extends WP_Test_REST_Post_Type_Control
 		);
 		$published_post = self::factory()->post->create( array( 'post_status' => 'publish' ) );
 		$id3            = self::factory()->attachment->create_object(
-			$this->test_file,
+			self::$test_file,
 			$published_post,
 			array(
 				'post_mime_type' => 'image/jpeg',
@@ -335,7 +337,7 @@ class WP_Test_REST_Attachments_Controller extends WP_Test_REST_Post_Type_Control
 	public function test_get_items_logged_in_editor() {
 		wp_set_current_user( self::$editor_id );
 		$id1            = self::factory()->attachment->create_object(
-			$this->test_file,
+			self::$test_file,
 			0,
 			array(
 				'post_mime_type' => 'image/jpeg',
@@ -344,7 +346,7 @@ class WP_Test_REST_Attachments_Controller extends WP_Test_REST_Post_Type_Control
 		);
 		$draft_post     = self::factory()->post->create( array( 'post_status' => 'draft' ) );
 		$id2            = self::factory()->attachment->create_object(
-			$this->test_file,
+			self::$test_file,
 			$draft_post,
 			array(
 				'post_mime_type' => 'image/jpeg',
@@ -353,7 +355,7 @@ class WP_Test_REST_Attachments_Controller extends WP_Test_REST_Post_Type_Control
 		);
 		$published_post = self::factory()->post->create( array( 'post_status' => 'publish' ) );
 		$id3            = self::factory()->attachment->create_object(
-			$this->test_file,
+			self::$test_file,
 			$published_post,
 			array(
 				'post_mime_type' => 'image/jpeg',
@@ -373,7 +375,7 @@ class WP_Test_REST_Attachments_Controller extends WP_Test_REST_Post_Type_Control
 
 	public function test_get_items_media_type() {
 		$id1      = self::factory()->attachment->create_object(
-			$this->test_file,
+			self::$test_file,
 			0,
 			array(
 				'post_mime_type' => 'image/jpeg',
@@ -396,7 +398,7 @@ class WP_Test_REST_Attachments_Controller extends WP_Test_REST_Post_Type_Control
 
 	public function test_get_items_mime_type() {
 		$id1      = self::factory()->attachment->create_object(
-			$this->test_file,
+			self::$test_file,
 			0,
 			array(
 				'post_mime_type' => 'image/jpeg',
@@ -420,7 +422,7 @@ class WP_Test_REST_Attachments_Controller extends WP_Test_REST_Post_Type_Control
 	public function test_get_items_parent() {
 		$post_id        = self::factory()->post->create( array( 'post_title' => 'Test Post' ) );
 		$attachment_id  = self::factory()->attachment->create_object(
-			$this->test_file,
+			self::$test_file,
 			$post_id,
 			array(
 				'post_mime_type' => 'image/jpeg',
@@ -428,7 +430,7 @@ class WP_Test_REST_Attachments_Controller extends WP_Test_REST_Post_Type_Control
 			)
 		);
 		$attachment_id2 = self::factory()->attachment->create_object(
-			$this->test_file,
+			self::$test_file,
 			0,
 			array(
 				'post_mime_type' => 'image/jpeg',
@@ -464,7 +466,7 @@ class WP_Test_REST_Attachments_Controller extends WP_Test_REST_Post_Type_Control
 	public function test_get_items_invalid_status_param_is_error_response() {
 		wp_set_current_user( self::$editor_id );
 		self::factory()->attachment->create_object(
-			$this->test_file,
+			self::$test_file,
 			0,
 			array(
 				'post_mime_type' => 'image/jpeg',
@@ -482,7 +484,7 @@ class WP_Test_REST_Attachments_Controller extends WP_Test_REST_Post_Type_Control
 		// Logged out users can't make the request.
 		wp_set_current_user( 0 );
 		$attachment_id1 = self::factory()->attachment->create_object(
-			$this->test_file,
+			self::$test_file,
 			0,
 			array(
 				'post_mime_type' => 'image/jpeg',
@@ -506,7 +508,7 @@ class WP_Test_REST_Attachments_Controller extends WP_Test_REST_Post_Type_Control
 		// Logged out users can't make the request.
 		wp_set_current_user( 0 );
 		$attachment_id1 = self::factory()->attachment->create_object(
-			$this->test_file,
+			self::$test_file,
 			0,
 			array(
 				'post_mime_type' => 'image/jpeg',
@@ -515,7 +517,7 @@ class WP_Test_REST_Attachments_Controller extends WP_Test_REST_Post_Type_Control
 			)
 		);
 		$attachment_id2 = self::factory()->attachment->create_object(
-			$this->test_file,
+			self::$test_file,
 			0,
 			array(
 				'post_mime_type' => 'image/jpeg',
@@ -551,7 +553,7 @@ class WP_Test_REST_Attachments_Controller extends WP_Test_REST_Post_Type_Control
 
 	public function test_get_items_valid_date() {
 		$id1     = self::factory()->attachment->create_object(
-			$this->test_file,
+			self::$test_file,
 			0,
 			array(
 				'post_date'      => '2016-01-15T00:00:00Z',
@@ -560,7 +562,7 @@ class WP_Test_REST_Attachments_Controller extends WP_Test_REST_Post_Type_Control
 			)
 		);
 		$id2     = self::factory()->attachment->create_object(
-			$this->test_file,
+			self::$test_file,
 			0,
 			array(
 				'post_date'      => '2016-01-16T00:00:00Z',
@@ -569,7 +571,7 @@ class WP_Test_REST_Attachments_Controller extends WP_Test_REST_Post_Type_Control
 			)
 		);
 		$id3     = self::factory()->attachment->create_object(
-			$this->test_file,
+			self::$test_file,
 			0,
 			array(
 				'post_date'      => '2016-01-17T00:00:00Z',
@@ -602,7 +604,7 @@ class WP_Test_REST_Attachments_Controller extends WP_Test_REST_Post_Type_Control
 	 */
 	public function test_get_items_valid_modified_date() {
 		$id1 = self::factory()->attachment->create_object(
-			$this->test_file,
+			self::$test_file,
 			0,
 			array(
 				'post_date'      => '2016-01-01 00:00:00',
@@ -611,7 +613,7 @@ class WP_Test_REST_Attachments_Controller extends WP_Test_REST_Post_Type_Control
 			)
 		);
 		$id2 = self::factory()->attachment->create_object(
-			$this->test_file,
+			self::$test_file,
 			0,
 			array(
 				'post_date'      => '2016-01-02 00:00:00',
@@ -620,7 +622,7 @@ class WP_Test_REST_Attachments_Controller extends WP_Test_REST_Post_Type_Control
 			)
 		);
 		$id3 = self::factory()->attachment->create_object(
-			$this->test_file,
+			self::$test_file,
 			0,
 			array(
 				'post_date'      => '2016-01-03 00:00:00',
@@ -662,7 +664,7 @@ class WP_Test_REST_Attachments_Controller extends WP_Test_REST_Post_Type_Control
 	 */
 	public function test_get_items_with_empty_page_runs_count_query_after() {
 		self::factory()->attachment->create_object(
-			$this->test_file,
+			self::$test_file,
 			0,
 			array(
 				'post_date'      => '2022-06-12T00:00:00Z',
@@ -684,7 +686,7 @@ class WP_Test_REST_Attachments_Controller extends WP_Test_REST_Post_Type_Control
 
 	public function test_get_item() {
 		$attachment_id = self::factory()->attachment->create_object(
-			$this->test_file,
+			self::$test_file,
 			0,
 			array(
 				'post_mime_type' => 'image/jpeg',
@@ -704,17 +706,17 @@ class WP_Test_REST_Attachments_Controller extends WP_Test_REST_Post_Type_Control
 	 */
 	public function test_get_item_sizes() {
 		$attachment_id = self::factory()->attachment->create_object(
-			$this->test_file,
+			self::$test_file,
 			0,
 			array(
 				'post_mime_type' => 'image/jpeg',
 				'post_excerpt'   => 'A sample caption',
 			),
-			$this->test_file
+			self::$test_file
 		);
 
 		add_image_size( 'rest-api-test', 119, 119, true );
-		wp_update_attachment_metadata( $attachment_id, wp_generate_attachment_metadata( $attachment_id, $this->test_file ) );
+		wp_update_attachment_metadata( $attachment_id, wp_generate_attachment_metadata( $attachment_id, self::$test_file ) );
 
 		$request            = new WP_REST_Request( 'GET', '/wp/v2/media/' . $attachment_id );
 		$response           = rest_get_server()->dispatch( $request );
@@ -735,17 +737,17 @@ class WP_Test_REST_Attachments_Controller extends WP_Test_REST_Post_Type_Control
 	 */
 	public function test_get_item_sizes_with_no_url() {
 		$attachment_id = self::factory()->attachment->create_object(
-			$this->test_file,
+			self::$test_file,
 			0,
 			array(
 				'post_mime_type' => 'image/jpeg',
 				'post_excerpt'   => 'A sample caption',
 			),
-			$this->test_file
+			self::$test_file
 		);
 
 		add_image_size( 'rest-api-test', 119, 119, true );
-		wp_update_attachment_metadata( $attachment_id, wp_generate_attachment_metadata( $attachment_id, $this->test_file ) );
+		wp_update_attachment_metadata( $attachment_id, wp_generate_attachment_metadata( $attachment_id, self::$test_file ) );
 
 		add_filter( 'wp_get_attachment_image_src', '__return_false' );
 
@@ -763,7 +765,7 @@ class WP_Test_REST_Attachments_Controller extends WP_Test_REST_Post_Type_Control
 		wp_set_current_user( 0 );
 		$draft_post = self::factory()->post->create( array( 'post_status' => 'draft' ) );
 		$id1        = self::factory()->attachment->create_object(
-			$this->test_file,
+			self::$test_file,
 			$draft_post,
 			array(
 				'post_mime_type' => 'image/jpeg',
@@ -777,7 +779,7 @@ class WP_Test_REST_Attachments_Controller extends WP_Test_REST_Post_Type_Control
 
 	public function test_get_item_inherit_status_with_invalid_parent() {
 		$attachment_id = self::factory()->attachment->create_object(
-			$this->test_file,
+			self::$test_file,
 			REST_TESTS_IMPOSSIBLY_HIGH_NUMBER,
 			array(
 				'post_mime_type' => 'image/jpeg',
@@ -794,7 +796,7 @@ class WP_Test_REST_Attachments_Controller extends WP_Test_REST_Post_Type_Control
 
 	public function test_get_item_auto_status_with_invalid_parent_not_authenticated_returns_error() {
 		$attachment_id = self::factory()->attachment->create_object(
-			$this->test_file,
+			self::$test_file,
 			REST_TESTS_IMPOSSIBLY_HIGH_NUMBER,
 			array(
 				'post_mime_type' => 'image/jpeg',
@@ -822,7 +824,7 @@ class WP_Test_REST_Attachments_Controller extends WP_Test_REST_Post_Type_Control
 		$request->set_param( 'description', 'Without a description, my attachment is descriptionless.' );
 		$request->set_param( 'alt_text', 'Alt text is stored outside post schema.' );
 
-		$request->set_body( file_get_contents( $this->test_file ) );
+		$request->set_body( file_get_contents( self::$test_file ) );
 		$response = rest_get_server()->dispatch( $request );
 		$data     = $response->get_data();
 
@@ -846,14 +848,14 @@ class WP_Test_REST_Attachments_Controller extends WP_Test_REST_Post_Type_Control
 		$request->set_file_params(
 			array(
 				'file' => array(
-					'file'     => file_get_contents( $this->test_file2 ),
+					'file'     => file_get_contents( self::$test_file2 ),
 					'name'     => 'codeispoetry.png',
-					'size'     => filesize( $this->test_file2 ),
-					'tmp_name' => $this->test_file2,
+					'size'     => filesize( self::$test_file2 ),
+					'tmp_name' => self::$test_file2,
 				),
 			)
 		);
-		$request->set_header( 'Content-MD5', md5_file( $this->test_file2 ) );
+		$request->set_header( 'Content-MD5', md5_file( self::$test_file2 ) );
 		$response = rest_get_server()->dispatch( $request );
 		$this->assertSame( 201, $response->get_status() );
 		$data = $response->get_data();
@@ -869,14 +871,14 @@ class WP_Test_REST_Attachments_Controller extends WP_Test_REST_Post_Type_Control
 		$request->set_file_params(
 			array(
 				'file' => array(
-					'file'     => file_get_contents( $this->test_file ),
+					'file'     => file_get_contents( self::$test_file ),
 					'name'     => 'canola.jpg',
-					'size'     => filesize( $this->test_file ),
-					'tmp_name' => $this->test_file,
+					'size'     => filesize( self::$test_file ),
+					'tmp_name' => self::$test_file,
 				),
 			)
 		);
-		$request->set_header( 'Content-MD5', md5_file( $this->test_file ) );
+		$request->set_header( 'Content-MD5', md5_file( self::$test_file ) );
 		$response = rest_get_server()->dispatch( $request );
 		$this->assertSame( 201, $response->get_status() );
 	}
@@ -890,14 +892,14 @@ class WP_Test_REST_Attachments_Controller extends WP_Test_REST_Post_Type_Control
 		$request->set_file_params(
 			array(
 				'file' => array(
-					'file'     => file_get_contents( $this->test_file ),
+					'file'     => file_get_contents( self::$test_file ),
 					'name'     => 'canola.jpg',
-					'size'     => filesize( $this->test_file ),
-					'tmp_name' => $this->test_file,
+					'size'     => filesize( self::$test_file ),
+					'tmp_name' => self::$test_file,
 				),
 			)
 		);
-		$request->set_header( 'Content-MD5', md5_file( $this->test_file ) );
+		$request->set_header( 'Content-MD5', md5_file( self::$test_file ) );
 		$response = rest_get_server()->dispatch( $request );
 		$this->assertSame( 201, $response->get_status() );
 	}
@@ -912,7 +914,7 @@ class WP_Test_REST_Attachments_Controller extends WP_Test_REST_Post_Type_Control
 	public function test_create_item_missing_content_type() {
 		wp_set_current_user( self::$author_id );
 		$request = new WP_REST_Request( 'POST', '/wp/v2/media' );
-		$request->set_body( file_get_contents( $this->test_file ) );
+		$request->set_body( file_get_contents( self::$test_file ) );
 		$response = rest_get_server()->dispatch( $request );
 		$this->assertErrorResponse( 'rest_upload_no_content_type', $response, 400 );
 	}
@@ -921,7 +923,7 @@ class WP_Test_REST_Attachments_Controller extends WP_Test_REST_Post_Type_Control
 		wp_set_current_user( self::$author_id );
 		$request = new WP_REST_Request( 'POST', '/wp/v2/media' );
 		$request->set_header( 'Content-Type', 'image/jpeg' );
-		$request->set_body( file_get_contents( $this->test_file ) );
+		$request->set_body( file_get_contents( self::$test_file ) );
 		$response = rest_get_server()->dispatch( $request );
 		$this->assertErrorResponse( 'rest_upload_no_content_disposition', $response, 400 );
 	}
@@ -932,7 +934,7 @@ class WP_Test_REST_Attachments_Controller extends WP_Test_REST_Post_Type_Control
 		$request->set_header( 'Content-Type', 'image/jpeg' );
 		$request->set_header( 'Content-Disposition', 'attachment; filename=canola.jpg' );
 		$request->set_header( 'Content-MD5', 'abc123' );
-		$request->set_body( file_get_contents( $this->test_file ) );
+		$request->set_body( file_get_contents( self::$test_file ) );
 		$response = rest_get_server()->dispatch( $request );
 		$this->assertErrorResponse( 'rest_upload_hash_mismatch', $response, 412 );
 	}
@@ -943,10 +945,10 @@ class WP_Test_REST_Attachments_Controller extends WP_Test_REST_Post_Type_Control
 		$request->set_file_params(
 			array(
 				'file' => array(
-					'file'     => file_get_contents( $this->test_file ),
+					'file'     => file_get_contents( self::$test_file ),
 					'name'     => 'canola.jpg',
-					'size'     => filesize( $this->test_file ),
-					'tmp_name' => $this->test_file,
+					'size'     => filesize( self::$test_file ),
+					'tmp_name' => self::$test_file,
 				),
 			)
 		);
@@ -992,7 +994,7 @@ class WP_Test_REST_Attachments_Controller extends WP_Test_REST_Post_Type_Control
 		$request = new WP_REST_Request( 'POST', '/wp/v2/media' );
 		$request->set_header( 'Content-Type', 'image/jpeg' );
 		$request->set_header( 'Content-Disposition', 'attachment; filename=canola.jpg' );
-		$request->set_body( file_get_contents( $this->test_file ) );
+		$request->set_body( file_get_contents( self::$test_file ) );
 		$request->set_param( 'post', $attachment_id );
 		$response = rest_get_server()->dispatch( $request );
 		$this->assertErrorResponse( 'rest_invalid_param', $response, 400 );
@@ -1007,7 +1009,7 @@ class WP_Test_REST_Attachments_Controller extends WP_Test_REST_Post_Type_Control
 		$request->set_header( 'Content-Type', 'image/jpeg' );
 		$request->set_header( 'Content-Disposition', 'attachment; filename=canola.jpg' );
 
-		$request->set_body( file_get_contents( $this->test_file ) );
+		$request->set_body( file_get_contents( self::$test_file ) );
 		$request->set_param( 'alt_text', 'test alt text' );
 		$response   = rest_get_server()->dispatch( $request );
 		$attachment = $response->get_data();
@@ -1022,7 +1024,7 @@ class WP_Test_REST_Attachments_Controller extends WP_Test_REST_Post_Type_Control
 		$request = new WP_REST_Request( 'POST', '/wp/v2/media' );
 		$request->set_header( 'Content-Type', 'image/jpeg' );
 		$request->set_header( 'Content-Disposition', 'attachment; filename=canola.jpg' );
-		$request->set_body( file_get_contents( $this->test_file ) );
+		$request->set_body( file_get_contents( self::$test_file ) );
 		$request->set_param( 'alt_text', '<script>alert(document.cookie)</script>' );
 		$response   = rest_get_server()->dispatch( $request );
 		$attachment = $response->get_data();
@@ -1038,7 +1040,7 @@ class WP_Test_REST_Attachments_Controller extends WP_Test_REST_Post_Type_Control
 		$request = new WP_REST_Request( 'POST', '/wp/v2/media' );
 		$request->set_header( 'Content-Type', 'image/jpeg' );
 		$request->set_header( 'Content-Disposition', 'attachment; filename=canola.jpg' );
-		$request->set_body( file_get_contents( $this->test_file ) );
+		$request->set_body( file_get_contents( self::$test_file ) );
 		$response   = rest_get_server()->dispatch( $request );
 		$attachment = $response->get_data();
 		$this->assertStringNotContainsString( ABSPATH, get_post_meta( $attachment['id'], '_wp_attached_file', true ) );
@@ -1047,7 +1049,7 @@ class WP_Test_REST_Attachments_Controller extends WP_Test_REST_Post_Type_Control
 	public function test_update_item() {
 		wp_set_current_user( self::$editor_id );
 		$attachment_id = self::factory()->attachment->create_object(
-			$this->test_file,
+			self::$test_file,
 			0,
 			array(
 				'post_mime_type' => 'image/jpeg',
@@ -1077,7 +1079,7 @@ class WP_Test_REST_Attachments_Controller extends WP_Test_REST_Post_Type_Control
 		wp_set_current_user( self::$editor_id );
 		$original_parent = self::factory()->post->create( array() );
 		$attachment_id   = self::factory()->attachment->create_object(
-			$this->test_file,
+			self::$test_file,
 			$original_parent,
 			array(
 				'post_mime_type' => 'image/jpeg',
@@ -1101,7 +1103,7 @@ class WP_Test_REST_Attachments_Controller extends WP_Test_REST_Post_Type_Control
 	public function test_update_item_invalid_permissions() {
 		wp_set_current_user( self::$author_id );
 		$attachment_id = self::factory()->attachment->create_object(
-			$this->test_file,
+			self::$test_file,
 			0,
 			array(
 				'post_mime_type' => 'image/jpeg',
@@ -1125,7 +1127,7 @@ class WP_Test_REST_Attachments_Controller extends WP_Test_REST_Post_Type_Control
 		);
 		wp_set_current_user( self::$editor_id );
 		$attachment_id = self::factory()->attachment->create_object(
-			$this->test_file,
+			self::$test_file,
 			0,
 			array(
 				'post_mime_type' => 'image/jpeg',
@@ -1146,7 +1148,7 @@ class WP_Test_REST_Attachments_Controller extends WP_Test_REST_Post_Type_Control
 		wp_set_current_user( self::$editor_id );
 		$parent_id     = self::factory()->post->create( array() );
 		$attachment_id = self::factory()->attachment->create_object(
-			$this->test_file,
+			self::$test_file,
 			$parent_id,
 			array(
 				'post_mime_type' => 'image/jpeg',
@@ -1169,7 +1171,7 @@ class WP_Test_REST_Attachments_Controller extends WP_Test_REST_Post_Type_Control
 	public function test_update_item_with_new_inherit_status() {
 		wp_set_current_user( self::$editor_id );
 		$attachment_id = self::factory()->attachment->create_object(
-			$this->test_file,
+			self::$test_file,
 			0,
 			array(
 				'post_mime_type' => 'image/jpeg',
@@ -1191,7 +1193,7 @@ class WP_Test_REST_Attachments_Controller extends WP_Test_REST_Post_Type_Control
 		$request = new WP_REST_Request( 'POST', '/wp/v2/media' );
 		$request->set_header( 'Content-Type', 'image/jpeg' );
 		$request->set_header( 'Content-Disposition', 'attachment; filename=canola.jpg' );
-		$request->set_body( file_get_contents( $this->test_file ) );
+		$request->set_body( file_get_contents( self::$test_file ) );
 
 		foreach ( $input as $name => $value ) {
 			$request->set_param( $name, $value );
@@ -1449,7 +1451,7 @@ class WP_Test_REST_Attachments_Controller extends WP_Test_REST_Post_Type_Control
 	public function test_delete_item() {
 		wp_set_current_user( self::$editor_id );
 		$attachment_id    = self::factory()->attachment->create_object(
-			$this->test_file,
+			self::$test_file,
 			0,
 			array(
 				'post_mime_type' => 'image/jpeg',
@@ -1465,7 +1467,7 @@ class WP_Test_REST_Attachments_Controller extends WP_Test_REST_Post_Type_Control
 	public function test_delete_item_no_trash() {
 		wp_set_current_user( self::$editor_id );
 		$attachment_id = self::factory()->attachment->create_object(
-			$this->test_file,
+			self::$test_file,
 			0,
 			array(
 				'post_mime_type' => 'image/jpeg',
@@ -1490,7 +1492,7 @@ class WP_Test_REST_Attachments_Controller extends WP_Test_REST_Post_Type_Control
 	public function test_delete_item_invalid_delete_permissions() {
 		wp_set_current_user( self::$author_id );
 		$attachment_id = self::factory()->attachment->create_object(
-			$this->test_file,
+			self::$test_file,
 			0,
 			array(
 				'post_mime_type' => 'image/jpeg',
@@ -1505,7 +1507,7 @@ class WP_Test_REST_Attachments_Controller extends WP_Test_REST_Post_Type_Control
 
 	public function test_prepare_item() {
 		$attachment_id = self::factory()->attachment->create_object(
-			$this->test_file,
+			self::$test_file,
 			0,
 			array(
 				'post_mime_type' => 'image/jpeg',
@@ -1524,7 +1526,7 @@ class WP_Test_REST_Attachments_Controller extends WP_Test_REST_Post_Type_Control
 
 	public function test_prepare_item_limit_fields() {
 		$attachment_id = self::factory()->attachment->create_object(
-			$this->test_file,
+			self::$test_file,
 			0,
 			array(
 				'post_mime_type' => 'image/jpeg',
@@ -1615,7 +1617,7 @@ class WP_Test_REST_Attachments_Controller extends WP_Test_REST_Post_Type_Control
 		$this->assertSame( $schema, $data['schema']['properties']['my_custom_int'] );
 
 		$attachment_id = self::factory()->attachment->create_object(
-			$this->test_file,
+			self::$test_file,
 			0,
 			array(
 				'post_mime_type' => 'image/jpeg',
@@ -1652,7 +1654,7 @@ class WP_Test_REST_Attachments_Controller extends WP_Test_REST_Post_Type_Control
 
 		wp_set_current_user( self::$editor_id );
 		$attachment_id = self::factory()->attachment->create_object(
-			$this->test_file,
+			self::$test_file,
 			0,
 			array(
 				'post_mime_type' => 'image/jpeg',
@@ -1676,23 +1678,33 @@ class WP_Test_REST_Attachments_Controller extends WP_Test_REST_Post_Type_Control
 		$wp_rest_additional_fields = array();
 	}
 
+	public function additional_field_get_callback( $response_data, $field_name ) {
+		return 123;
+	}
+
+	public function additional_field_update_callback( $value, $attachment ) {
+		if ( 'returnError' === $value ) {
+			return new WP_Error( 'rest_invalid_param', 'Testing an error.', array( 'status' => 400 ) );
+		}
+	}
+
 	public function test_search_item_by_filename() {
 		$id1 = self::factory()->attachment->create_object(
-			$this->test_file,
+			self::$test_file,
 			0,
 			array(
 				'post_mime_type' => 'image/jpeg',
 			)
 		);
 		$id2 = self::factory()->attachment->create_object(
-			$this->test_file2,
+			self::$test_file2,
 			0,
 			array(
 				'post_mime_type' => 'image/png',
 			)
 		);
 
-		$filename = wp_basename( $this->test_file2 );
+		$filename = wp_basename( self::$test_file2 );
 
 		$request = new WP_REST_Request( 'GET', '/wp/v2/media' );
 		$request->set_param( 'search', $filename );
@@ -1704,16 +1716,6 @@ class WP_Test_REST_Attachments_Controller extends WP_Test_REST_Post_Type_Control
 		$this->assertSame( 'image/png', $data[0]['mime_type'] );
 	}
 
-	public function additional_field_get_callback( $object, $request ) {
-		return 123;
-	}
-
-	public function additional_field_update_callback( $value, $attachment ) {
-		if ( 'returnError' === $value ) {
-			return new WP_Error( 'rest_invalid_param', 'Testing an error.', array( 'status' => 400 ) );
-		}
-	}
-
 	public function test_links_exist() {
 
 		wp_set_current_user( self::$editor_id );
@@ -1804,16 +1806,16 @@ class WP_Test_REST_Attachments_Controller extends WP_Test_REST_Post_Type_Control
 			array(
 				'file' => array(
 					'error'    => '0',
-					'file'     => file_get_contents( $this->test_file ),
+					'file'     => file_get_contents( self::$test_file ),
 					'name'     => 'canola.jpg',
-					'size'     => filesize( $this->test_file ),
-					'tmp_name' => $this->test_file,
+					'size'     => filesize( self::$test_file ),
+					'tmp_name' => self::$test_file,
 				),
 			)
 		);
 		$request->set_param( 'title', 'My title is very cool' );
 		$request->set_param( 'caption', 'This is a better caption.' );
-		$request->set_header( 'Content-MD5', md5_file( $this->test_file ) );
+		$request->set_header( 'Content-MD5', md5_file( self::$test_file ) );
 
 		$response = rest_get_server()->dispatch( $request );
 		$this->assertErrorResponse( 'rest_upload_file_too_big', $response, 400 );
@@ -1832,7 +1834,7 @@ class WP_Test_REST_Attachments_Controller extends WP_Test_REST_Post_Type_Control
 		$request = new WP_REST_Request( 'POST', '/wp/v2/media' );
 		$request->set_header( 'Content-Type', 'image/jpeg' );
 		$request->set_header( 'Content-Disposition', 'attachment; filename=canola.jpg' );
-		$request->set_body( file_get_contents( $this->test_file ) );
+		$request->set_body( file_get_contents( self::$test_file ) );
 		$request->set_param( 'title', 'My title is very cool' );
 		$request->set_param( 'caption', 'This is a better caption.' );
 
@@ -1855,16 +1857,16 @@ class WP_Test_REST_Attachments_Controller extends WP_Test_REST_Post_Type_Control
 			array(
 				'file' => array(
 					'error'    => '0',
-					'file'     => file_get_contents( $this->test_file ),
+					'file'     => file_get_contents( self::$test_file ),
 					'name'     => 'canola.jpg',
-					'size'     => filesize( $this->test_file ),
-					'tmp_name' => $this->test_file,
+					'size'     => filesize( self::$test_file ),
+					'tmp_name' => self::$test_file,
 				),
 			)
 		);
 		$request->set_param( 'title', 'My title is very cool' );
 		$request->set_param( 'caption', 'This is a better caption.' );
-		$request->set_header( 'Content-MD5', md5_file( $this->test_file ) );
+		$request->set_header( 'Content-MD5', md5_file( self::$test_file ) );
 
 		$response = rest_get_server()->dispatch( $request );
 		$this->assertErrorResponse( 'rest_upload_limited_space', $response, 400 );
@@ -1883,7 +1885,7 @@ class WP_Test_REST_Attachments_Controller extends WP_Test_REST_Post_Type_Control
 		$request = new WP_REST_Request( 'POST', '/wp/v2/media' );
 		$request->set_header( 'Content-Type', 'image/jpeg' );
 		$request->set_header( 'Content-Disposition', 'attachment; filename=canola.jpg' );
-		$request->set_body( file_get_contents( $this->test_file ) );
+		$request->set_body( file_get_contents( self::$test_file ) );
 		$request->set_param( 'title', 'My title is very cool' );
 		$request->set_param( 'caption', 'This is a better caption.' );
 
@@ -1913,7 +1915,7 @@ class WP_Test_REST_Attachments_Controller extends WP_Test_REST_Post_Type_Control
 		$request->set_param( 'description', 'Without a description, my attachment is descriptionless.' );
 		$request->set_param( 'alt_text', 'Alt text is stored outside post schema.' );
 
-		$request->set_body( file_get_contents( $this->test_file ) );
+		$request->set_body( file_get_contents( self::$test_file ) );
 		$response = rest_get_server()->dispatch( $request );
 		$data     = $response->get_data();
 		$this->assertSame( 201, $response->get_status() );
@@ -1936,7 +1938,7 @@ class WP_Test_REST_Attachments_Controller extends WP_Test_REST_Post_Type_Control
 
 		wp_set_current_user( self::$editor_id );
 		$attachment_id = self::factory()->attachment->create_object(
-			$this->test_file,
+			self::$test_file,
 			0,
 			array(
 				'post_mime_type' => 'image/jpeg',
@@ -1974,7 +1976,7 @@ class WP_Test_REST_Attachments_Controller extends WP_Test_REST_Post_Type_Control
 		$request->set_header( 'Content-Disposition', 'attachment; filename=cannoli.jpg' );
 		$request->set_param( 'meta', array( 'best_cannoli' => 'Chocolate-dipped, no filling' ) );
 
-		$request->set_body( file_get_contents( $this->test_file ) );
+		$request->set_body( file_get_contents( self::$test_file ) );
 		$response = rest_get_server()->dispatch( $request );
 		$data     = $response->get_data();
 
@@ -1995,7 +1997,7 @@ class WP_Test_REST_Attachments_Controller extends WP_Test_REST_Post_Type_Control
 	 * @requires function imagejpeg
 	 */
 	public function test_edit_image_returns_error_if_logged_out() {
-		$attachment = self::factory()->attachment->create_upload_object( $this->test_file );
+		$attachment = self::factory()->attachment->create_upload_object( self::$test_file );
 
 		$request = new WP_REST_Request( 'POST', "/wp/v2/media/{$attachment}/edit" );
 		$request->set_body_params( array( 'src' => wp_get_attachment_image_url( $attachment, 'full' ) ) );
@@ -2012,7 +2014,7 @@ class WP_Test_REST_Attachments_Controller extends WP_Test_REST_Post_Type_Control
 		$user->add_cap( 'upload_files', false );
 
 		wp_set_current_user( $user->ID );
-		$attachment = self::factory()->attachment->create_upload_object( $this->test_file );
+		$attachment = self::factory()->attachment->create_upload_object( self::$test_file );
 
 		$request = new WP_REST_Request( 'POST', "/wp/v2/media/{$attachment}/edit" );
 		$request->set_body_params( array( 'src' => wp_get_attachment_image_url( $attachment, 'full' ) ) );
@@ -2026,7 +2028,7 @@ class WP_Test_REST_Attachments_Controller extends WP_Test_REST_Post_Type_Control
 	 */
 	public function test_edit_image_returns_error_if_cannot_edit() {
 		wp_set_current_user( self::$uploader_id );
-		$attachment = self::factory()->attachment->create_upload_object( $this->test_file );
+		$attachment = self::factory()->attachment->create_upload_object( self::$test_file );
 
 		$request = new WP_REST_Request( 'POST', "/wp/v2/media/{$attachment}/edit" );
 		$request->set_body_params( array( 'src' => wp_get_attachment_image_url( $attachment, 'full' ) ) );
@@ -2053,7 +2055,7 @@ class WP_Test_REST_Attachments_Controller extends WP_Test_REST_Post_Type_Control
 	 */
 	public function test_edit_image_returns_error_if_unsupported_mime_type() {
 		wp_set_current_user( self::$superadmin_id );
-		$attachment = self::factory()->attachment->create_upload_object( $this->test_file );
+		$attachment = self::factory()->attachment->create_upload_object( self::$test_file );
 		wp_update_post(
 			array(
 				'ID'             => $attachment,
@@ -2073,7 +2075,7 @@ class WP_Test_REST_Attachments_Controller extends WP_Test_REST_Post_Type_Control
 	 */
 	public function test_edit_image_returns_error_if_no_edits() {
 		wp_set_current_user( self::$superadmin_id );
-		$attachment = self::factory()->attachment->create_upload_object( $this->test_file );
+		$attachment = self::factory()->attachment->create_upload_object( self::$test_file );
 
 		$request = new WP_REST_Request( 'POST', "/wp/v2/media/{$attachment}/edit" );
 		$request->set_body_params( array( 'src' => wp_get_attachment_image_url( $attachment, 'full' ) ) );
@@ -2087,7 +2089,7 @@ class WP_Test_REST_Attachments_Controller extends WP_Test_REST_Post_Type_Control
 	 */
 	public function test_edit_image_rotate() {
 		wp_set_current_user( self::$superadmin_id );
-		$attachment = self::factory()->attachment->create_upload_object( $this->test_file );
+		$attachment = self::factory()->attachment->create_upload_object( self::$test_file );
 
 		$this->setup_mock_editor();
 		WP_Image_Editor_Mock::$edit_return['rotate'] = new WP_Error();
@@ -2112,7 +2114,7 @@ class WP_Test_REST_Attachments_Controller extends WP_Test_REST_Post_Type_Control
 	 */
 	public function test_edit_image_crop() {
 		wp_set_current_user( self::$superadmin_id );
-		$attachment = self::factory()->attachment->create_upload_object( $this->test_file );
+		$attachment = self::factory()->attachment->create_upload_object( self::$test_file );
 
 		$this->setup_mock_editor();
 		WP_Image_Editor_Mock::$size_return = array(
@@ -2149,7 +2151,7 @@ class WP_Test_REST_Attachments_Controller extends WP_Test_REST_Post_Type_Control
 	 */
 	public function test_edit_image() {
 		wp_set_current_user( self::$superadmin_id );
-		$attachment = self::factory()->attachment->create_upload_object( $this->test_file );
+		$attachment = self::factory()->attachment->create_upload_object( self::$test_file );
 
 		$params = array(
 			'rotation' => 60,
@@ -2176,7 +2178,7 @@ class WP_Test_REST_Attachments_Controller extends WP_Test_REST_Post_Type_Control
 	 */
 	public function test_batch_edit_image() {
 		wp_set_current_user( self::$superadmin_id );
-		$attachment = self::factory()->attachment->create_upload_object( $this->test_file );
+		$attachment = self::factory()->attachment->create_upload_object( self::$test_file );
 
 		$params = array(
 			'modifiers' => array(
@@ -2219,8 +2221,8 @@ class WP_Test_REST_Attachments_Controller extends WP_Test_REST_Post_Type_Control
 	 */
 	public function test_edit_image_returns_error_if_mismatched_src() {
 		wp_set_current_user( self::$superadmin_id );
-		$attachment_id_image1 = self::factory()->attachment->create_upload_object( $this->test_file );
-		$attachment_id_image2 = self::factory()->attachment->create_upload_object( $this->test_file2 );
+		$attachment_id_image1 = self::factory()->attachment->create_upload_object( self::$test_file );
+		$attachment_id_image2 = self::factory()->attachment->create_upload_object( self::$test_file2 );
 		$attachment_id_file   = self::factory()->attachment->create();
 
 		// URL to the first uploaded image.
diff --git a/tests/rest-api/rest-autosaves-controller.php b/tests/rest-api/rest-autosaves-controller.php
index 2a7eacb8b9..088f02b67d 100644
--- a/tests/rest-api/rest-autosaves-controller.php
+++ b/tests/rest-api/rest-autosaves-controller.php
@@ -514,12 +514,12 @@ class WP_Test_REST_Autosaves_Controller extends WP_Test_REST_Post_Type_Controlle
 		$wp_rest_additional_fields = array();
 	}
 
-	public function additional_field_get_callback( $object ) {
-		return get_post_meta( $object['id'], 'my_custom_int', true );
+	public function additional_field_get_callback( $response_data, $field_name ) {
+		return get_post_meta( $response_data['id'], $field_name, true );
 	}
 
-	public function additional_field_update_callback( $value, $post ) {
-		update_post_meta( $post->ID, 'my_custom_int', $value );
+	public function additional_field_update_callback( $value, $post, $field_name ) {
+		update_post_meta( $post->ID, $field_name, $value );
 	}
 
 	protected function check_get_autosave_response( $response, $autosave ) {
diff --git a/tests/rest-api/rest-block-directory-controller.php b/tests/rest-api/rest-block-directory-controller.php
index af014d93fd..fd679dbb7b 100644
--- a/tests/rest-api/rest-block-directory-controller.php
+++ b/tests/rest-api/rest-block-directory-controller.php
@@ -274,13 +274,13 @@ class WP_REST_Block_Directory_Controller_Test extends WP_Test_REST_Controller_Te
 	private function prevent_requests_to_host( $blocked_host = 'api.wordpress.org' ) {
 		add_filter(
 			'pre_http_request',
-			static function ( $return, $args, $url ) use ( $blocked_host ) {
+			static function ( $response, $parsed_args, $url ) use ( $blocked_host ) {
 				if ( @parse_url( $url, PHP_URL_HOST ) === $blocked_host ) {
 					return new WP_Error( 'plugins_api_failed', "An expected error occurred connecting to $blocked_host because of a unit test", "cURL error 7: Failed to connect to $blocked_host port 80: Connection refused" );
 
 				}
 
-				return $return;
+				return $response;
 			},
 			10,
 			3
diff --git a/tests/rest-api/rest-block-renderer-controller.php b/tests/rest-api/rest-block-renderer-controller.php
index 9f2401e893..71d02d4832 100644
--- a/tests/rest-api/rest-block-renderer-controller.php
+++ b/tests/rest-api/rest-block-renderer-controller.php
@@ -421,7 +421,7 @@ class REST_Block_Renderer_Controller_Test extends WP_Test_REST_Controller_Testca
 		$data = $response->get_data();
 
 		$this->assertSame( $expected_attributes, json_decode( $data['rendered'], true ) );
-		$this->assertEquals(
+		$this->assertEqualSetsWithIndex(
 			json_decode( $block_type->render( $attributes ), true ),
 			json_decode( $data['rendered'], true )
 		);
diff --git a/tests/rest-api/rest-block-type-controller.php b/tests/rest-api/rest-block-type-controller.php
index ed3ee62fe8..b7342a0a43 100644
--- a/tests/rest-api/rest-block-type-controller.php
+++ b/tests/rest-api/rest-block-type-controller.php
@@ -338,6 +338,148 @@ class REST_Block_Type_Controller_Test extends WP_Test_REST_Controller_Testcase {
 		$this->assertNull( $data['style'] );
 	}
 
+	/**
+	 * @ticket 56733
+	 */
+	public function test_get_item_deprecated() {
+		$block_type = 'fake/deprecated';
+		$settings   = array(
+			'editor_script' => 'hello_world',
+			'script'        => 'gutenberg',
+			'view_script'   => 'foo_bar',
+			'editor_style'  => 'guten_tag',
+			'style'         => 'out_of_style',
+		);
+		register_block_type( $block_type, $settings );
+		wp_set_current_user( self::$admin_id );
+		$request  = new WP_REST_Request( 'GET', '/wp/v2/block-types/' . $block_type );
+		$response = rest_get_server()->dispatch( $request );
+		$data     = $response->get_data();
+		$this->assertSameSets(
+			array( 'hello_world' ),
+			$data['editor_script_handles'],
+			"Endpoint doesn't return correct array for editor_script_handles."
+		);
+		$this->assertSameSets(
+			array( 'gutenberg' ),
+			$data['script_handles'],
+			"Endpoint doesn't return correct array for script_handles."
+		);
+		$this->assertSameSets(
+			array( 'foo_bar' ),
+			$data['view_script_handles'],
+			"Endpoint doesn't return correct array for view_script_handles."
+		);
+		$this->assertSameSets(
+			array( 'guten_tag' ),
+			$data['editor_style_handles'],
+			"Endpoint doesn't return correct array for editor_style_handles."
+		);
+		$this->assertSameSets(
+			array( 'out_of_style' ),
+			$data['style_handles'],
+			"Endpoint doesn't return correct array for style_handles."
+		);
+		// Deprecated properties.
+		$this->assertSame(
+			'hello_world',
+			$data['editor_script'],
+			"Endpoint doesn't return correct string for editor_script."
+		);
+		$this->assertSame(
+			'gutenberg',
+			$data['script'],
+			"Endpoint doesn't return correct string for script."
+		);
+		$this->assertSame(
+			'foo_bar',
+			$data['view_script'],
+			"Endpoint doesn't return correct string for view_script."
+		);
+		$this->assertSame(
+			'guten_tag',
+			$data['editor_style'],
+			"Endpoint doesn't return correct string for editor_style."
+		);
+		$this->assertSame(
+			'out_of_style',
+			$data['style'],
+			"Endpoint doesn't return correct string for style."
+		);
+	}
+
+	/**
+	 * @ticket 56733
+	 */
+	public function test_get_item_deprecated_with_arrays() {
+		$block_type = 'fake/deprecated-with-arrays';
+		$settings   = array(
+			'editor_script' => array( 'hello', 'world' ),
+			'script'        => array( 'gutenberg' ),
+			'view_script'   => array( 'foo', 'bar' ),
+			'editor_style'  => array( 'guten', 'tag' ),
+			'style'         => array( 'out', 'of', 'style' ),
+		);
+		register_block_type( $block_type, $settings );
+		wp_set_current_user( self::$admin_id );
+		$request  = new WP_REST_Request( 'GET', '/wp/v2/block-types/' . $block_type );
+		$response = rest_get_server()->dispatch( $request );
+		$data     = $response->get_data();
+		$this->assertSameSets(
+			$settings['editor_script'],
+			$data['editor_script_handles'],
+			"Endpoint doesn't return correct array for editor_script_handles."
+		);
+		$this->assertSameSets(
+			$settings['script'],
+			$data['script_handles'],
+			"Endpoint doesn't return correct array for script_handles."
+		);
+		$this->assertSameSets(
+			$settings['view_script'],
+			$data['view_script_handles'],
+			"Endpoint doesn't return correct array for view_script_handles."
+		);
+		$this->assertSameSets(
+			$settings['editor_style'],
+			$data['editor_style_handles'],
+			"Endpoint doesn't return correct array for editor_style_handles."
+		);
+		$this->assertSameSets(
+			$settings['style'],
+			$data['style_handles'],
+			"Endpoint doesn't return correct array for style_handles."
+		);
+		// Deprecated properties.
+		// Since the schema only allows strings or null (but no arrays), we return the first array item.
+		// Deprecated properties.
+		$this->assertSame(
+			'hello',
+			$data['editor_script'],
+			"Endpoint doesn't return first array element for editor_script."
+		);
+		$this->assertSame(
+			'gutenberg',
+			$data['script'],
+			"Endpoint doesn't return first array element for script."
+		);
+		$this->assertSame(
+			'foo',
+			$data['view_script'],
+			"Endpoint doesn't return first array element for view_script."
+		);
+		$this->assertSame(
+			'guten',
+			$data['editor_style'],
+			"Endpoint doesn't return first array element for editor_style."
+		);
+		$this->assertSame(
+			'out',
+			$data['style'],
+			"Endpoint doesn't return first array element for style."
+		);
+	}
+
 	public function test_get_variation() {
 		$block_type = 'fake/variations';
 		$settings   = array(
@@ -482,15 +624,15 @@ class REST_Block_Type_Controller_Test extends WP_Test_REST_Controller_Testcase {
 	 * @ticket 47620
 	 */
 	public function test_prepare_item() {
-		$registry = new WP_Block_Type_Registry;
+		$registry = new WP_Block_Type_Registry();
 		$settings = array(
 			'icon'            => 'text',
 			'render_callback' => '__return_null',
 		);
 		$registry->register( 'fake/line', $settings );
 		$block_type = $registry->get_registered( 'fake/line' );
-		$endpoint   = new WP_REST_Block_Types_Controller;
-		$request    = new WP_REST_Request;
+		$endpoint   = new WP_REST_Block_Types_Controller();
+		$request    = new WP_REST_Request();
 		$request->set_param( 'context', 'edit' );
 		$response = $endpoint->prepare_item_for_response( $block_type, $request );
 		$this->check_block_type_object( $block_type, $response->get_data(), $response->get_links() );
@@ -500,15 +642,15 @@ class REST_Block_Type_Controller_Test extends WP_Test_REST_Controller_Testcase {
 	 * @ticket 47620
 	 */
 	public function test_prepare_item_limit_fields() {
-		$registry = new WP_Block_Type_Registry;
+		$registry = new WP_Block_Type_Registry();
 		$settings = array(
 			'icon'            => 'text',
 			'render_callback' => '__return_null',
 		);
 		$registry->register( 'fake/line', $settings );
 		$block_type = $registry->get_registered( 'fake/line' );
-		$request    = new WP_REST_Request;
-		$endpoint   = new WP_REST_Block_Types_Controller;
+		$request    = new WP_REST_Request();
+		$endpoint   = new WP_REST_Block_Types_Controller();
 		$request->set_param( 'context', 'edit' );
 		$request->set_param( '_fields', 'name' );
 		$response = $endpoint->prepare_item_for_response( $block_type, $request );
diff --git a/tests/rest-api/rest-categories-controller.php b/tests/rest-api/rest-categories-controller.php
index 805472487f..6e594afe31 100644
--- a/tests/rest-api/rest-categories-controller.php
+++ b/tests/rest-api/rest-categories-controller.php
@@ -1093,7 +1093,7 @@ class WP_Test_REST_Categories_Controller extends WP_Test_REST_Controller_Testcas
 	}
 
 	public function test_prepare_item_limit_fields() {
-		$request  = new WP_REST_Request;
+		$request  = new WP_REST_Request();
 		$endpoint = new WP_REST_Terms_Controller( 'category' );
 		$request->set_param( '_fields', 'id,name' );
 		$term     = get_term( 1, 'category' );
@@ -1180,7 +1180,7 @@ class WP_Test_REST_Categories_Controller extends WP_Test_REST_Controller_Testcas
 		$wp_rest_additional_fields = array();
 	}
 
-	public function additional_field_get_callback( $object, $request ) {
+	public function additional_field_get_callback( $response_data, $field_name ) {
 		return 123;
 	}
 
diff --git a/tests/rest-api/rest-comments-controller.php b/tests/rest-api/rest-comments-controller.php
index eb66ee5d41..2726ce68c9 100644
--- a/tests/rest-api/rest-comments-controller.php
+++ b/tests/rest-api/rest-comments-controller.php
@@ -152,7 +152,7 @@ class WP_Test_REST_Comments_Controller extends WP_Test_REST_Controller_Testcase
 
 	public function set_up() {
 		parent::set_up();
-		$this->endpoint = new WP_REST_Comments_Controller;
+		$this->endpoint = new WP_REST_Comments_Controller();
 		if ( is_multisite() ) {
 			update_site_option( 'site_admins', array( 'superadmin' ) );
 		}
@@ -953,7 +953,7 @@ class WP_Test_REST_Comments_Controller extends WP_Test_REST_Controller_Testcase
 	public function test_prepare_item_limit_fields() {
 		wp_set_current_user( self::$admin_id );
 
-		$endpoint = new WP_REST_Comments_Controller;
+		$endpoint = new WP_REST_Comments_Controller();
 		$request  = new WP_REST_Request( 'GET', sprintf( '/wp/v2/comments/%d', self::$approved_id ) );
 		$request->set_param( 'context', 'edit' );
 		$request->set_param( '_fields', 'id,status' );
@@ -2972,6 +2972,7 @@ class WP_Test_REST_Comments_Controller extends WP_Test_REST_Controller_Testcase
 					'content'           => '<div>div</div> <strong>strong</strong> <script>oh noes</script>',
 					'author_name'       => '<div>div</div> <strong>strong</strong> <script>oh noes</script>',
 					'author_user_agent' => '<div>div</div> <strong>strong</strong> <script>oh noes</script>',
+					'author'            => self::$editor_id,
 				),
 				array(
 					'content'           => array(
@@ -2980,6 +2981,7 @@ class WP_Test_REST_Comments_Controller extends WP_Test_REST_Controller_Testcase
 					),
 					'author_name'       => 'div strong',
 					'author_user_agent' => 'div strong',
+					'author'            => self::$editor_id,
 				)
 			);
 		} else {
@@ -2989,6 +2991,7 @@ class WP_Test_REST_Comments_Controller extends WP_Test_REST_Controller_Testcase
 					'content'           => '<div>div</div> <strong>strong</strong> <script>oh noes</script>',
 					'author_name'       => '<div>div</div> <strong>strong</strong> <script>oh noes</script>',
 					'author_user_agent' => '<div>div</div> <strong>strong</strong> <script>oh noes</script>',
+					'author'            => self::$editor_id,
 				),
 				array(
 					'content'           => array(
@@ -2997,6 +3000,7 @@ class WP_Test_REST_Comments_Controller extends WP_Test_REST_Controller_Testcase
 					),
 					'author_name'       => 'div strong',
 					'author_user_agent' => 'div strong',
+					'author'            => self::$editor_id,
 				)
 			);
 		}
@@ -3011,6 +3015,7 @@ class WP_Test_REST_Comments_Controller extends WP_Test_REST_Controller_Testcase
 				'content'           => '\\\&\\\ &amp; &invalid; < &lt; &amp;lt;',
 				'author_name'       => '\\\&\\\ &amp; &invalid; < &lt; &amp;lt;',
 				'author_user_agent' => '\\\&\\\ &amp; &invalid; < &lt; &amp;lt;',
+				'author'            => self::$superadmin_id,
 			),
 			array(
 				'content'           => array(
@@ -3019,6 +3024,7 @@ class WP_Test_REST_Comments_Controller extends WP_Test_REST_Controller_Testcase
 				),
 				'author_name'       => '\\\&amp;\\\ &amp; &amp;invalid; &lt; &lt; &amp;lt;',
 				'author_user_agent' => '\\\&\\\ &amp; &invalid; &lt; &lt; &amp;lt;',
+				'author'            => self::$superadmin_id,
 			)
 		);
 	}
@@ -3032,6 +3038,7 @@ class WP_Test_REST_Comments_Controller extends WP_Test_REST_Controller_Testcase
 				'content'           => '<div>div</div> <strong>strong</strong> <script>oh noes</script>',
 				'author_name'       => '<div>div</div> <strong>strong</strong> <script>oh noes</script>',
 				'author_user_agent' => '<div>div</div> <strong>strong</strong> <script>oh noes</script>',
+				'author'            => self::$superadmin_id,
 			),
 			array(
 				'content'           => array(
@@ -3040,6 +3047,7 @@ class WP_Test_REST_Comments_Controller extends WP_Test_REST_Controller_Testcase
 				),
 				'author_name'       => 'div strong',
 				'author_user_agent' => 'div strong',
+				'author'            => self::$superadmin_id,
 			)
 		);
 	}
@@ -3290,15 +3298,15 @@ class WP_Test_REST_Comments_Controller extends WP_Test_REST_Controller_Testcase
 		$wp_rest_additional_fields = array();
 	}
 
-	public function additional_field_get_callback( $object ) {
-		return get_comment_meta( $object['id'], 'my_custom_int', true );
+	public function additional_field_get_callback( $response_data, $field_name ) {
+		return get_comment_meta( $response_data['id'], $field_name, true );
 	}
 
-	public function additional_field_update_callback( $value, $comment ) {
+	public function additional_field_update_callback( $value, $comment, $field_name ) {
 		if ( 'returnError' === $value ) {
 			return new WP_Error( 'rest_invalid_param', 'Testing an error.', array( 'status' => 400 ) );
 		}
-		update_comment_meta( $comment->comment_ID, 'my_custom_int', $value );
+		update_comment_meta( $comment->comment_ID, $field_name, $value );
 	}
 
 	protected function check_comment_data( $data, $context, $links ) {
diff --git a/tests/rest-api/rest-global-styles-controller.php b/tests/rest-api/rest-global-styles-controller.php
index 0c27723a1c..b7a5617a11 100644
--- a/tests/rest-api/rest-global-styles-controller.php
+++ b/tests/rest-api/rest-global-styles-controller.php
@@ -371,7 +371,7 @@ class WP_REST_Global_Styles_Controller_Test extends WP_Test_REST_Controller_Test
 		$data     = $response->get_data();
 		$links    = $response->get_links();
 
-		$this->assertEquals(
+		$this->assertEqualSets(
 			array(
 				'id'       => self::$global_styles_id,
 				'title'    => array(
@@ -409,7 +409,7 @@ class WP_REST_Global_Styles_Controller_Test extends WP_Test_REST_Controller_Test
 		);
 		$response = rest_get_server()->dispatch( $request );
 		$data     = $response->get_data();
-		$this->assertEquals( 'My new global styles title', $data['title']['raw'] );
+		$this->assertSame( 'My new global styles title', $data['title']['raw'] );
 	}
 
 
diff --git a/tests/rest-api/rest-pattern-directory-controller.php b/tests/rest-api/rest-pattern-directory-controller.php
index 22a9e08ad1..a59c8fd5e0 100644
--- a/tests/rest-api/rest-pattern-directory-controller.php
+++ b/tests/rest-api/rest-pattern-directory-controller.php
@@ -522,10 +522,10 @@ class WP_REST_Pattern_Directory_Controller_Test extends WP_Test_REST_Controller_
 	private static function mock_successful_response( $action, $expects_results ) {
 		add_filter(
 			'pre_http_request',
-			static function ( $preempt, $args, $url ) use ( $action, $expects_results ) {
+			static function ( $response, $parsed_args, $url ) use ( $action, $expects_results ) {
 
 				if ( 'api.wordpress.org' !== wp_parse_url( $url, PHP_URL_HOST ) ) {
-					return $preempt;
+					return $response;
 				}
 
 				$response = array(
@@ -556,7 +556,7 @@ class WP_REST_Pattern_Directory_Controller_Test extends WP_Test_REST_Controller_
 	private static function prevent_requests_to_host( $blocked_host = 'api.wordpress.org' ) {
 		add_filter(
 			'pre_http_request',
-			static function ( $return, $args, $url ) use ( $blocked_host ) {
+			static function ( $response, $parsed_args, $url ) use ( $blocked_host ) {
 
 				if ( wp_parse_url( $url, PHP_URL_HOST ) === $blocked_host ) {
 					return new WP_Error(
@@ -567,7 +567,7 @@ class WP_REST_Pattern_Directory_Controller_Test extends WP_Test_REST_Controller_
 
 				}
 
-				return $return;
+				return $response;
 			},
 			10,
 			3
diff --git a/tests/rest-api/rest-plugins-controller.php b/tests/rest-api/rest-plugins-controller.php
index 3cea054301..d9fcdd2609 100644
--- a/tests/rest-api/rest-plugins-controller.php
+++ b/tests/rest-api/rest-plugins-controller.php
@@ -84,12 +84,23 @@ class WP_REST_Plugins_Controller_Test extends WP_Test_REST_Controller_Testcase {
 
 	public function tear_down() {
 		if ( file_exists( WP_PLUGIN_DIR . '/test-plugin/test-plugin.php' ) ) {
+			// Remove plugin files.
 			$this->rmdir( WP_PLUGIN_DIR . '/test-plugin' );
+			// Delete empty directory.
+			rmdir( WP_PLUGIN_DIR . '/test-plugin' );
 		}
+
 		if ( file_exists( DIR_TESTDATA . '/link-manager.zip' ) ) {
 			unlink( DIR_TESTDATA . '/link-manager.zip' );
 		}
 
+		if ( file_exists( WP_PLUGIN_DIR . '/link-manager/link-manager.php' ) ) {
+			// Remove plugin files.
+			$this->rmdir( WP_PLUGIN_DIR . '/link-manager' );
+			// Delete empty directory.
+			rmdir( WP_PLUGIN_DIR . '/link-manager' );
+		}
+
 		parent::tear_down();
 	}
 
@@ -369,10 +380,6 @@ class WP_REST_Plugins_Controller_Test extends WP_Test_REST_Controller_Testcase {
 	 * @ticket 50321
 	 */
 	public function test_create_item() {
-		if ( isset( get_plugins()['link-manager/link-manager.php'] ) ) {
-			delete_plugins( array( 'link-manager/link-manager.php' ) );
-		}
-
 		wp_set_current_user( self::$super_admin );
 		$this->setup_plugin_download();
 
@@ -389,10 +396,6 @@ class WP_REST_Plugins_Controller_Test extends WP_Test_REST_Controller_Testcase {
 	 * @ticket 50321
 	 */
 	public function test_create_item_and_activate() {
-		if ( isset( get_plugins()['link-manager/link-manager.php'] ) ) {
-			delete_plugins( array( 'link-manager/link-manager.php' ) );
-		}
-
 		wp_set_current_user( self::$super_admin );
 		$this->setup_plugin_download();
 
@@ -415,10 +418,6 @@ class WP_REST_Plugins_Controller_Test extends WP_Test_REST_Controller_Testcase {
 	 * @ticket 50321
 	 */
 	public function test_create_item_and_activate_errors_if_no_permission_to_activate_plugin() {
-		if ( isset( get_plugins()['link-manager/link-manager.php'] ) ) {
-			delete_plugins( array( 'link-manager/link-manager.php' ) );
-		}
-
 		wp_set_current_user( self::$super_admin );
 		$this->setup_plugin_download();
 		$this->disable_activate_permission( 'link-manager/link-manager.php' );
@@ -441,10 +440,6 @@ class WP_REST_Plugins_Controller_Test extends WP_Test_REST_Controller_Testcase {
 	 * @ticket 50321
 	 */
 	public function test_create_item_and_network_activate_rejected_if_not_multisite() {
-		if ( isset( get_plugins()['link-manager/link-manager.php'] ) ) {
-			delete_plugins( array( 'link-manager/link-manager.php' ) );
-		}
-
 		wp_set_current_user( self::$super_admin );
 		$this->setup_plugin_download();
 
@@ -465,10 +460,6 @@ class WP_REST_Plugins_Controller_Test extends WP_Test_REST_Controller_Testcase {
 	 * @ticket 50321
 	 */
 	public function test_create_item_and_network_activate() {
-		if ( isset( get_plugins()['link-manager/link-manager.php'] ) ) {
-			delete_plugins( array( 'link-manager/link-manager.php' ) );
-		}
-
 		wp_set_current_user( self::$super_admin );
 		$this->setup_plugin_download();
 
@@ -1148,13 +1139,13 @@ PHP;
 	private function prevent_requests_to_host( $blocked_host = 'api.wordpress.org' ) {
 		add_filter(
 			'pre_http_request',
-			static function ( $return, $args, $url ) use ( $blocked_host ) {
+			static function ( $response, $parsed_args, $url ) use ( $blocked_host ) {
 				if ( @parse_url( $url, PHP_URL_HOST ) === $blocked_host ) {
 					return new WP_Error( 'plugins_api_failed', "An expected error occurred connecting to $blocked_host because of a unit test", "cURL error 7: Failed to connect to $blocked_host port 80: Connection refused" );
 
 				}
 
-				return $return;
+				return $response;
 			},
 			10,
 			3
diff --git a/tests/rest-api/rest-post-meta-fields.php b/tests/rest-api/rest-post-meta-fields.php
index ebce49a7f3..7101a38c7c 100644
--- a/tests/rest-api/rest-post-meta-fields.php
+++ b/tests/rest-api/rest-post-meta-fields.php
@@ -247,7 +247,7 @@ class WP_Test_REST_Post_Meta_Fields extends WP_Test_REST_TestCase {
 
 		/** @var WP_REST_Server $wp_rest_server */
 		global $wp_rest_server;
-		$wp_rest_server = new Spy_REST_Server;
+		$wp_rest_server = new Spy_REST_Server();
 		do_action( 'rest_api_init', $wp_rest_server );
 	}
 
@@ -380,7 +380,7 @@ class WP_Test_REST_Post_Meta_Fields extends WP_Test_REST_TestCase {
 
 		/** @var WP_REST_Server $wp_rest_server */
 		global $wp_rest_server;
-		$wp_rest_server = new Spy_REST_Server;
+		$wp_rest_server = new Spy_REST_Server();
 		do_action( 'rest_api_init', $wp_rest_server );
 
 		add_post_meta( self::$post_id, 'test_string', 42 );
@@ -2797,7 +2797,7 @@ class WP_Test_REST_Post_Meta_Fields extends WP_Test_REST_TestCase {
 		$response = rest_get_server()->dispatch( $request );
 
 		$this->assertSame( 200, $response->get_status() );
-		$this->assertEquals( array( 0 ), $response->get_data()['meta']['multi_boolean'] );
+		$this->assertSameSetsWithIndex( array( false ), $response->get_data()['meta']['multi_boolean'] );
 
 		$this->assertFalse( get_metadata_by_mid( 'post', $mid1 ) );
 		$this->assertNotFalse( get_metadata_by_mid( 'post', $mid2 ) );
diff --git a/tests/rest-api/rest-post-statuses-controller.php b/tests/rest-api/rest-post-statuses-controller.php
index 901e8bb357..303a94bb6e 100644
--- a/tests/rest-api/rest-post-statuses-controller.php
+++ b/tests/rest-api/rest-post-statuses-controller.php
@@ -125,8 +125,8 @@ class WP_Test_REST_Post_Statuses_Controller extends WP_Test_REST_Controller_Test
 
 	public function test_prepare_item() {
 		$obj      = get_post_status_object( 'publish' );
-		$endpoint = new WP_REST_Post_Statuses_Controller;
-		$request  = new WP_REST_Request;
+		$endpoint = new WP_REST_Post_Statuses_Controller();
+		$request  = new WP_REST_Request();
 		$request->set_param( 'context', 'edit' );
 		$data = $endpoint->prepare_item_for_response( $obj, $request );
 		$this->check_post_status_obj( $obj, $data->get_data(), $data->get_links() );
@@ -134,8 +134,8 @@ class WP_Test_REST_Post_Statuses_Controller extends WP_Test_REST_Controller_Test
 
 	public function test_prepare_item_limit_fields() {
 		$obj      = get_post_status_object( 'publish' );
-		$request  = new WP_REST_Request;
-		$endpoint = new WP_REST_Post_Statuses_Controller;
+		$request  = new WP_REST_Request();
+		$endpoint = new WP_REST_Post_Statuses_Controller();
 		$request->set_param( 'context', 'edit' );
 		$request->set_param( '_fields', 'id,name' );
 		$response = $endpoint->prepare_item_for_response( $obj, $request );
@@ -200,7 +200,7 @@ class WP_Test_REST_Post_Statuses_Controller extends WP_Test_REST_Controller_Test
 		$wp_rest_additional_fields = array();
 	}
 
-	public function additional_field_get_callback( $object ) {
+	public function additional_field_get_callback( $response_data ) {
 		return 123;
 	}
 
diff --git a/tests/rest-api/rest-post-types-controller.php b/tests/rest-api/rest-post-types-controller.php
index 0ab2a7b937..18ee7224c1 100644
--- a/tests/rest-api/rest-post-types-controller.php
+++ b/tests/rest-api/rest-post-types-controller.php
@@ -133,8 +133,8 @@ class WP_Test_REST_Post_Types_Controller extends WP_Test_REST_Controller_Testcas
 
 	public function test_prepare_item() {
 		$obj      = get_post_type_object( 'post' );
-		$endpoint = new WP_REST_Post_Types_Controller;
-		$request  = new WP_REST_Request;
+		$endpoint = new WP_REST_Post_Types_Controller();
+		$request  = new WP_REST_Request();
 		$request->set_param( 'context', 'edit' );
 		$response = $endpoint->prepare_item_for_response( $obj, $request );
 		$this->check_post_type_obj( 'edit', $obj, $response->get_data(), $response->get_links() );
@@ -142,8 +142,8 @@ class WP_Test_REST_Post_Types_Controller extends WP_Test_REST_Controller_Testcas
 
 	public function test_prepare_item_limit_fields() {
 		$obj      = get_post_type_object( 'post' );
-		$request  = new WP_REST_Request;
-		$endpoint = new WP_REST_Post_Types_Controller;
+		$request  = new WP_REST_Request();
+		$endpoint = new WP_REST_Post_Types_Controller();
 		$request->set_param( 'context', 'edit' );
 		$request->set_param( '_fields', 'id,name' );
 		$response = $endpoint->prepare_item_for_response( $obj, $request );
@@ -156,24 +156,32 @@ class WP_Test_REST_Post_Types_Controller extends WP_Test_REST_Controller_Testcas
 		);
 	}
 
+	/**
+	 * @ticket 56467
+	 *
+	 * @covers WP_REST_Post_Types_Controller::get_item_schema
+	 */
 	public function test_get_item_schema() {
 		$request    = new WP_REST_Request( 'OPTIONS', '/wp/v2/types' );
 		$response   = rest_get_server()->dispatch( $request );
 		$data       = $response->get_data();
 		$properties = $data['schema']['properties'];
-		$this->assertCount( 12, $properties );
-		$this->assertArrayHasKey( 'capabilities', $properties );
-		$this->assertArrayHasKey( 'description', $properties );
-		$this->assertArrayHasKey( 'hierarchical', $properties );
-		$this->assertArrayHasKey( 'viewable', $properties );
-		$this->assertArrayHasKey( 'labels', $properties );
-		$this->assertArrayHasKey( 'name', $properties );
-		$this->assertArrayHasKey( 'slug', $properties );
-		$this->assertArrayHasKey( 'supports', $properties );
-		$this->assertArrayHasKey( 'taxonomies', $properties );
-		$this->assertArrayHasKey( 'rest_base', $properties );
-		$this->assertArrayHasKey( 'rest_namespace', $properties );
-		$this->assertArrayHasKey( 'visibility', $properties );
+
+		$this->assertCount( 14, $properties, 'Schema should have 14 properties' );
+		$this->assertArrayHasKey( 'capabilities', $properties, '`capabilities` should be included in the schema' );
+		$this->assertArrayHasKey( 'description', $properties, '`description` should be included in the schema' );
+		$this->assertArrayHasKey( 'hierarchical', $properties, '`hierarchical` should be included in the schema' );
+		$this->assertArrayHasKey( 'viewable', $properties, '`viewable` should be included in the schema' );
+		$this->assertArrayHasKey( 'labels', $properties, '`labels` should be included in the schema' );
+		$this->assertArrayHasKey( 'name', $properties, '`name` should be included in the schema' );
+		$this->assertArrayHasKey( 'slug', $properties, '`slug` should be included in the schema' );
+		$this->assertArrayHasKey( 'supports', $properties, '`supports` should be included in the schema' );
+		$this->assertArrayHasKey( 'has_archive', $properties, '`has_archive` should be included in the schema' );
+		$this->assertArrayHasKey( 'taxonomies', $properties, '`taxonomies` should be included in the schema' );
+		$this->assertArrayHasKey( 'rest_base', $properties, '`rest_base` should be included in the schema' );
+		$this->assertArrayHasKey( 'rest_namespace', $properties, '`rest_namespace` should be included in the schema' );
+		$this->assertArrayHasKey( 'visibility', $properties, '`visibility` should be included in the schema' );
+		$this->assertArrayHasKey( 'icon', $properties, '`icon` should be included in the schema' );
 	}
 
 	public function test_get_additional_field_registration() {
@@ -212,7 +220,7 @@ class WP_Test_REST_Post_Types_Controller extends WP_Test_REST_Controller_Testcas
 		$wp_rest_additional_fields = array();
 	}
 
-	public function additional_field_get_callback( $object ) {
+	public function additional_field_get_callback( $response_data ) {
 		return 123;
 	}
 
@@ -223,6 +231,7 @@ class WP_Test_REST_Post_Types_Controller extends WP_Test_REST_Controller_Testcas
 		$this->assertSame( $post_type_obj->hierarchical, $data['hierarchical'] );
 		$this->assertSame( $post_type_obj->rest_base, $data['rest_base'] );
 		$this->assertSame( $post_type_obj->rest_namespace, $data['rest_namespace'] );
+		$this->assertSame( $post_type_obj->has_archive, $data['has_archive'] );
 
 		$links = test_rest_expand_compact_links( $links );
 		$this->assertSame( rest_url( 'wp/v2/types' ), $links['collection'][0]['href'] );
diff --git a/tests/rest-api/rest-posts-controller.php b/tests/rest-api/rest-posts-controller.php
index 5fa7e3cf98..2a378c84c0 100644
--- a/tests/rest-api/rest-posts-controller.php
+++ b/tests/rest-api/rest-posts-controller.php
@@ -1529,6 +1529,7 @@ class WP_Test_REST_Posts_Controller extends WP_Test_REST_Post_Type_Controller_Te
 
 	/**
 	 * @ticket 55592
+	 *
 	 * @covers WP_REST_Posts_Controller::get_items
 	 * @covers ::update_post_thumbnail_cache
 	 */
@@ -1566,6 +1567,7 @@ class WP_Test_REST_Posts_Controller extends WP_Test_REST_Post_Type_Controller_Te
 
 	/**
 	 * @ticket 55593
+	 *
 	 * @covers WP_REST_Posts_Controller::get_items
 	 * @covers ::update_post_parent_caches
 	 */
@@ -1954,8 +1956,14 @@ class WP_Test_REST_Posts_Controller extends WP_Test_REST_Post_Type_Controller_Te
 		$this->assertErrorResponse( 'rest_forbidden', $response, 401 );
 	}
 
+	/**
+	 * Tests that authenticated users are only allowed to read password protected content
+	 * if they have the 'edit_post' meta capability for the post.
+	 */
 	public function test_get_post_draft_edit_context() {
 		$post_content = 'Hello World!';
+
+		// Create a password protected post as an Editor.
 		self::factory()->post->create(
 			array(
 				'post_title'    => 'Hola',
@@ -1965,6 +1973,8 @@ class WP_Test_REST_Posts_Controller extends WP_Test_REST_Post_Type_Controller_Te
 				'post_author'   => self::$editor_id,
 			)
 		);
+
+		// Create a draft with the Latest Posts block as a Contributor.
 		$draft_id = self::factory()->post->create(
 			array(
 				'post_status'  => 'draft',
@@ -1972,11 +1982,18 @@ class WP_Test_REST_Posts_Controller extends WP_Test_REST_Post_Type_Controller_Te
 				'post_content' => '<!-- wp:latest-posts {"displayPostContent":true} /--> <!-- wp:latest-posts {"displayPostContent":true,"displayPostContentRadio":"full_post"} /-->',
 			)
 		);
+
+		// Set the current user to Contributor and request the draft for editing.
 		wp_set_current_user( self::$contributor_id );
 		$request = new WP_REST_Request( 'GET', sprintf( '/wp/v2/posts/%d', $draft_id ) );
 		$request->set_param( 'context', 'edit' );
 		$response = rest_get_server()->dispatch( $request );
 		$data     = $response->get_data();
+
+		/*
+		 * Verify that the content of a password protected post created by an Editor
+		 * is not viewable by a Contributor.
+		 */
 		$this->assertStringNotContainsString( $post_content, $data['content']['rendered'] );
 	}
 
@@ -4569,15 +4586,15 @@ class WP_Test_REST_Posts_Controller extends WP_Test_REST_Post_Type_Controller_Te
 		$wp_rest_additional_fields = array();
 	}
 
-	public function additional_field_get_callback( $object ) {
-		return get_post_meta( $object['id'], 'my_custom_int', true );
+	public function additional_field_get_callback( $response_data, $field_name ) {
+		return get_post_meta( $response_data['id'], $field_name, true );
 	}
 
-	public function additional_field_update_callback( $value, $post ) {
+	public function additional_field_update_callback( $value, $post, $field_name ) {
 		if ( 'returnError' === $value ) {
 			return new WP_Error( 'rest_invalid_param', 'Testing an error.', array( 'status' => 400 ) );
 		}
-		update_post_meta( $post->ID, 'my_custom_int', $value );
+		update_post_meta( $post->ID, $field_name, $value );
 	}
 
 	public function test_publish_action_ldo_registered() {
diff --git a/tests/rest-api/rest-revisions-controller.php b/tests/rest-api/rest-revisions-controller.php
index c84624ca80..4af746fe65 100644
--- a/tests/rest-api/rest-revisions-controller.php
+++ b/tests/rest-api/rest-revisions-controller.php
@@ -402,12 +402,12 @@ class WP_Test_REST_Revisions_Controller extends WP_Test_REST_Controller_Testcase
 		$wp_rest_additional_fields = array();
 	}
 
-	public function additional_field_get_callback( $object ) {
-		return get_post_meta( $object['id'], 'my_custom_int', true );
+	public function additional_field_get_callback( $response_data, $field_name ) {
+		return get_post_meta( $response_data['id'], $field_name, true );
 	}
 
-	public function additional_field_update_callback( $value, $post ) {
-		update_post_meta( $post->ID, 'my_custom_int', $value );
+	public function additional_field_update_callback( $value, $post, $field_name ) {
+		update_post_meta( $post->ID, $field_name, $value );
 	}
 
 	protected function check_get_revision_response( $response, $revision ) {
diff --git a/tests/rest-api/rest-schema-setup.php b/tests/rest-api/rest-schema-setup.php
index a1e4330c0c..9347f33256 100644
--- a/tests/rest-api/rest-schema-setup.php
+++ b/tests/rest-api/rest-schema-setup.php
@@ -20,7 +20,7 @@ class WP_Test_REST_Schema_Initialization extends WP_Test_REST_TestCase {
 
 		/** @var WP_REST_Server $wp_rest_server */
 		global $wp_rest_server;
-		$wp_rest_server = new Spy_REST_Server;
+		$wp_rest_server = new Spy_REST_Server();
 		do_action( 'rest_api_init', $wp_rest_server );
 
 		add_filter( 'pre_http_request', array( $this, 'mock_embed_request' ), 10, 3 );
@@ -34,8 +34,8 @@ class WP_Test_REST_Schema_Initialization extends WP_Test_REST_TestCase {
 		parent::tear_down();
 	}
 
-	public function mock_embed_request( $preempt, $r, $url ) {
-		unset( $preempt, $r );
+	public function mock_embed_request( $response, $parsed_args, $url ) {
+		unset( $response, $parsed_args );
 
 		// Mock request to YouTube Embed.
 		if ( false !== strpos( $url, self::YOUTUBE_VIDEO_ID ) ) {
@@ -150,12 +150,14 @@ class WP_Test_REST_Schema_Initialization extends WP_Test_REST_TestCase {
 			'/wp/v2/template-parts/(?P<parent>[\d]+)/autosaves/(?P<id>[\d]+)',
 			'/wp/v2/template-parts/(?P<parent>[\d]+)/revisions',
 			'/wp/v2/template-parts/(?P<parent>[\d]+)/revisions/(?P<id>[\d]+)',
+			'/wp/v2/template-parts/lookup',
 			'/wp/v2/templates',
 			'/wp/v2/templates/(?P<id>[\d]+)/autosaves',
 			'/wp/v2/templates/(?P<id>([^\/:<>\*\?"\|]+(?:\/[^\/:<>\*\?"\|]+)?)[\/\w-]+)',
 			'/wp/v2/templates/(?P<parent>[\d]+)/autosaves/(?P<id>[\d]+)',
 			'/wp/v2/templates/(?P<parent>[\d]+)/revisions',
 			'/wp/v2/templates/(?P<parent>[\d]+)/revisions/(?P<id>[\d]+)',
+			'/wp/v2/templates/lookup',
 			'/wp/v2/themes',
 			'/wp/v2/themes/(?P<stylesheet>[^\/:<>\*\?"\|]+(?:\/[^\/:<>\*\?"\|]+)?)',
 			'/wp/v2/plugins',
diff --git a/tests/rest-api/rest-server.php b/tests/rest-api/rest-server.php
index aa927c8b1c..8788a72445 100644
--- a/tests/rest-api/rest-server.php
+++ b/tests/rest-api/rest-server.php
@@ -12,11 +12,27 @@
 class Tests_REST_Server extends WP_Test_REST_TestCase {
 	protected static $icon_id;
 
+	/**
+	 * Called before setting up all tests.
+	 */
+	public static function set_up_before_class() {
+		parent::set_up_before_class();
+
+		// Require files that need to load once.
+		require_once DIR_TESTROOT . '/includes/mock-invokable.php';
+	}
+
 	public static function wpSetUpBeforeClass( WP_UnitTest_Factory $factory ) {
 		$filename      = DIR_TESTDATA . '/images/test-image-large.jpg';
 		self::$icon_id = $factory->attachment->create_upload_object( $filename );
 	}
 
+	public static function tear_down_after_class() {
+		wp_delete_attachment( self::$icon_id, true );
+
+		parent::tear_down_after_class();
+	}
+
 	public function set_up() {
 		parent::set_up();
 
@@ -35,16 +51,6 @@ class Tests_REST_Server extends WP_Test_REST_TestCase {
 		parent::tear_down();
 	}
 
-	/**
-	 * Called before setting up all tests.
-	 */
-	public static function set_up_before_class() {
-		parent::set_up_before_class();
-
-		// Require files that need to load once.
-		require_once DIR_TESTROOT . '/includes/mock-invokable.php';
-	}
-
 	public function test_envelope() {
 		$data    = array(
 			'amount of arbitrary data' => 'alot',
@@ -587,8 +593,8 @@ class Tests_REST_Server extends WP_Test_REST_TestCase {
 
 	public function test_json_error_with_status() {
 		$stub = $this->getMockBuilder( 'Spy_REST_Server' )
-					->setMethods( array( 'set_status' ) )
-					->getMock();
+			->setMethods( array( 'set_status' ) )
+			->getMock();
 
 		$stub->expects( $this->once() )
 			->method( 'set_status' )
diff --git a/tests/rest-api/rest-sidebars-controller.php b/tests/rest-api/rest-sidebars-controller.php
index e15a7f910a..e2745f519f 100644
--- a/tests/rest-api/rest-sidebars-controller.php
+++ b/tests/rest-api/rest-sidebars-controller.php
@@ -949,7 +949,7 @@ class WP_Test_REST_Sidebars_Controller extends WP_Test_REST_Controller_Testcase
 			if ( isset( $item['_links'] ) ) {
 				unset( $data[ $count ]['_links'] );
 			}
-			$count ++;
+			$count++;
 		}
 
 		return $data;
diff --git a/tests/rest-api/rest-site-health-controller.php b/tests/rest-api/rest-site-health-controller.php
index ddc932709d..899308d745 100644
--- a/tests/rest-api/rest-site-health-controller.php
+++ b/tests/rest-api/rest-site-health-controller.php
@@ -116,12 +116,12 @@ class WP_Test_REST_Site_Health_Controller extends WP_Test_REST_TestCase {
 		$this->assertCount( 1, $route );
 
 		$route = current( $route );
-		$this->assertEquals(
+		$this->assertSame(
 			array( WP_REST_Server::READABLE => true ),
 			$route['methods']
 		);
 
-		$this->assertEquals(
+		$this->assertSame(
 			'test_page_cache',
 			$route['callback'][1]
 		);
diff --git a/tests/rest-api/rest-tags-controller.php b/tests/rest-api/rest-tags-controller.php
index a4b566f7b2..da8f6c5878 100644
--- a/tests/rest-api/rest-tags-controller.php
+++ b/tests/rest-api/rest-tags-controller.php
@@ -1211,7 +1211,7 @@ class WP_Test_REST_Tags_Controller extends WP_Test_REST_Controller_Testcase {
 	}
 
 	public function test_prepare_item_limit_fields() {
-		$request  = new WP_REST_Request;
+		$request  = new WP_REST_Request();
 		$endpoint = new WP_REST_Terms_Controller( 'post_tag' );
 		$request->set_param( '_fields', 'id,name' );
 		$term     = get_term_by( 'id', self::factory()->tag->create(), 'post_tag' );
@@ -1324,6 +1324,16 @@ class WP_Test_REST_Tags_Controller extends WP_Test_REST_Controller_Testcase {
 		$wp_rest_additional_fields = array();
 	}
 
+	public function additional_field_get_callback( $response_data, $field_name ) {
+		return 123;
+	}
+
+	public function additional_field_update_callback( $value, $tag ) {
+		if ( 'returnError' === $value ) {
+			return new WP_Error( 'rest_invalid_param', 'Testing an error.', array( 'status' => 400 ) );
+		}
+	}
+
 	/**
 	 * @ticket 38504
 	 */
@@ -1396,16 +1406,6 @@ class WP_Test_REST_Tags_Controller extends WP_Test_REST_Controller_Testcase {
 		$this->assertArrayNotHasKey( $view_field, $data );
 	}
 
-	public function additional_field_get_callback( $object, $request ) {
-		return 123;
-	}
-
-	public function additional_field_update_callback( $value, $tag ) {
-		if ( 'returnError' === $value ) {
-			return new WP_Error( 'rest_invalid_param', 'Testing an error.', array( 'status' => 400 ) );
-		}
-	}
-
 	protected function check_get_taxonomy_terms_response( $response ) {
 		$this->assertSame( 200, $response->get_status() );
 		$data = $response->get_data();
diff --git a/tests/rest-api/rest-taxonomies-controller.php b/tests/rest-api/rest-taxonomies-controller.php
index 78593e6bd8..e2901c6307 100644
--- a/tests/rest-api/rest-taxonomies-controller.php
+++ b/tests/rest-api/rest-taxonomies-controller.php
@@ -174,8 +174,8 @@ class WP_Test_REST_Taxonomies_Controller extends WP_Test_REST_Controller_Testcas
 
 	public function test_prepare_item() {
 		$tax      = get_taxonomy( 'category' );
-		$endpoint = new WP_REST_Taxonomies_Controller;
-		$request  = new WP_REST_Request;
+		$endpoint = new WP_REST_Taxonomies_Controller();
+		$request  = new WP_REST_Request();
 		$request->set_param( 'context', 'edit' );
 		$response = $endpoint->prepare_item_for_response( $tax, $request );
 		$this->check_taxonomy_object( 'edit', $tax, $response->get_data(), $response->get_links() );
@@ -183,8 +183,8 @@ class WP_Test_REST_Taxonomies_Controller extends WP_Test_REST_Controller_Testcas
 
 	public function test_prepare_item_limit_fields() {
 		$tax      = get_taxonomy( 'category' );
-		$request  = new WP_REST_Request;
-		$endpoint = new WP_REST_Taxonomies_Controller;
+		$request  = new WP_REST_Request();
+		$endpoint = new WP_REST_Taxonomies_Controller();
 		$request->set_param( 'context', 'edit' );
 		$request->set_param( '_fields', 'id,name' );
 		$response = $endpoint->prepare_item_for_response( $tax, $request );
diff --git a/tests/rest-api/rest-term-meta-fields.php b/tests/rest-api/rest-term-meta-fields.php
index 5a61623387..21d4ca86cd 100644
--- a/tests/rest-api/rest-term-meta-fields.php
+++ b/tests/rest-api/rest-term-meta-fields.php
@@ -194,7 +194,7 @@ class WP_Test_REST_Term_Meta_Fields extends WP_Test_REST_TestCase {
 
 		/** @var WP_REST_Server $wp_rest_server */
 		global $wp_rest_server;
-		$wp_rest_server = new Spy_REST_Server;
+		$wp_rest_server = new Spy_REST_Server();
 		do_action( 'rest_api_init', $wp_rest_server );
 	}
 
@@ -327,7 +327,7 @@ class WP_Test_REST_Term_Meta_Fields extends WP_Test_REST_TestCase {
 
 		/** @var WP_REST_Server $wp_rest_server */
 		global $wp_rest_server;
-		$wp_rest_server = new Spy_REST_Server;
+		$wp_rest_server = new Spy_REST_Server();
 		do_action( 'rest_api_init', $wp_rest_server );
 
 		add_term_meta( self::$category_id, 'test_string', 42 );
diff --git a/tests/rest-api/rest-themes-controller.php b/tests/rest-api/rest-themes-controller.php
index 0492f191fe..eb2b379c66 100644
--- a/tests/rest-api/rest-themes-controller.php
+++ b/tests/rest-api/rest-themes-controller.php
@@ -628,7 +628,7 @@ class WP_Test_REST_Themes_Controller extends WP_Test_REST_Controller_Testcase {
 		$result   = $response->get_data();
 		$this->assertArrayHasKey( 'theme_supports', $result[0] );
 		$this->assertArrayHasKey( 'editor-font-sizes', $result[0]['theme_supports'] );
-		$this->assertEquals( array( $tiny ), $result[0]['theme_supports']['editor-font-sizes'] );
+		$this->assertEqualSetsWithIndex( array( $tiny ), $result[0]['theme_supports']['editor-font-sizes'] );
 	}
 
 	/**
diff --git a/tests/rest-api/rest-users-controller.php b/tests/rest-api/rest-users-controller.php
index 849b0e5464..1187120343 100644
--- a/tests/rest-api/rest-users-controller.php
+++ b/tests/rest-api/rest-users-controller.php
@@ -974,7 +974,7 @@ class WP_Test_REST_Users_Controller extends WP_Test_REST_Controller_Testcase {
 	public function test_prepare_item() {
 		wp_set_current_user( self::$user );
 
-		$request = new WP_REST_Request;
+		$request = new WP_REST_Request();
 		$request->set_param( 'context', 'edit' );
 		$user = get_user_by( 'id', get_current_user_id() );
 		$data = $this->endpoint->prepare_item_for_response( $user, $request );
@@ -984,7 +984,7 @@ class WP_Test_REST_Users_Controller extends WP_Test_REST_Controller_Testcase {
 	public function test_prepare_item_limit_fields() {
 		wp_set_current_user( self::$user );
 
-		$request = new WP_REST_Request;
+		$request = new WP_REST_Request();
 		$request->set_param( 'context', 'edit' );
 		$request->set_param( '_fields', 'id,name' );
 		$user     = get_user_by( 'id', get_current_user_id() );
@@ -2825,6 +2825,17 @@ class WP_Test_REST_Users_Controller extends WP_Test_REST_Controller_Testcase {
 		$wp_rest_additional_fields = array();
 	}
 
+	public function additional_field_get_callback( $response_data, $field_name ) {
+		return get_user_meta( $response_data['id'], $field_name, true );
+	}
+
+	public function additional_field_update_callback( $value, $user, $field_name ) {
+		if ( 'returnError' === $value ) {
+			return new WP_Error( 'rest_invalid_param', 'Testing an error.', array( 'status' => 400 ) );
+		}
+		update_user_meta( $user->ID, $field_name, $value );
+	}
+
 	/**
 	 * @ticket 39701
 	 * @group ms-required
@@ -3072,17 +3083,6 @@ class WP_Test_REST_Users_Controller extends WP_Test_REST_Controller_Testcase {
 		);
 	}
 
-	public function additional_field_get_callback( $object ) {
-		return get_user_meta( $object['id'], 'my_custom_int', true );
-	}
-
-	public function additional_field_update_callback( $value, $user ) {
-		if ( 'returnError' === $value ) {
-			return new WP_Error( 'rest_invalid_param', 'Testing an error.', array( 'status' => 400 ) );
-		}
-		update_user_meta( $user->ID, 'my_custom_int', $value );
-	}
-
 	protected function check_user_data( $user, $data, $context, $links ) {
 		$this->assertSame( $user->ID, $data['id'] );
 		$this->assertSame( $user->display_name, $data['name'] );
diff --git a/tests/rest-api/rest-widget-types-controller.php b/tests/rest-api/rest-widget-types-controller.php
index 5c6f22bfee..5074205fb7 100644
--- a/tests/rest-api/rest-widget-types-controller.php
+++ b/tests/rest-api/rest-widget-types-controller.php
@@ -118,7 +118,7 @@ class WP_Test_REST_Widget_Types_Controller extends WP_Test_REST_Controller_Testc
 		$response = rest_get_server()->dispatch( $request );
 		$data     = $response->get_data();
 		$this->assertGreaterThan( 1, count( $data ) );
-		$endpoint = new WP_REST_Widget_Types_Controller;
+		$endpoint = new WP_REST_Widget_Types_Controller();
 		foreach ( $data as $item ) {
 			$widget_type = $endpoint->get_widget( $item['name'] );
 			$this->check_widget_type_object( $widget_type, $item, $item['_links'] );
@@ -180,7 +180,7 @@ class WP_Test_REST_Widget_Types_Controller extends WP_Test_REST_Controller_Testc
 		wp_set_current_user( self::$admin_id );
 		$request     = new WP_REST_Request( 'GET', '/wp/v2/widget-types/' . $widget_name );
 		$response    = rest_get_server()->dispatch( $request );
-		$endpoint    = new WP_REST_Widget_Types_Controller;
+		$endpoint    = new WP_REST_Widget_Types_Controller();
 		$widget_type = $endpoint->get_widget( $widget_name );
 		$this->check_widget_type_object( $widget_type, $response->get_data(), $response->get_links() );
 	}
@@ -198,7 +198,7 @@ class WP_Test_REST_Widget_Types_Controller extends WP_Test_REST_Controller_Testc
 		wp_set_current_user( self::$admin_id );
 		$request     = new WP_REST_Request( 'GET', '/wp/v2/widget-types/' . $widget_id );
 		$response    = rest_get_server()->dispatch( $request );
-		$endpoint    = new WP_REST_Widget_Types_Controller;
+		$endpoint    = new WP_REST_Widget_Types_Controller();
 		$widget_type = $endpoint->get_widget( $widget_id );
 		$this->check_widget_type_object( $widget_type, $response->get_data(), $response->get_links() );
 	}
@@ -298,9 +298,9 @@ class WP_Test_REST_Widget_Types_Controller extends WP_Test_REST_Controller_Testc
 	 * @ticket 41683
 	 */
 	public function test_prepare_item() {
-		$endpoint    = new WP_REST_Widget_Types_Controller;
+		$endpoint    = new WP_REST_Widget_Types_Controller();
 		$widget_type = $endpoint->get_widget( 'calendar' );
-		$request     = new WP_REST_Request;
+		$request     = new WP_REST_Request();
 		$request->set_param( 'context', 'edit' );
 		$response = $endpoint->prepare_item_for_response( $widget_type, $request );
 		$this->check_widget_type_object( $widget_type, $response->get_data(), $response->get_links() );
@@ -366,7 +366,7 @@ class WP_Test_REST_Widget_Types_Controller extends WP_Test_REST_Controller_Testc
 			array(
 				'encoded' => base64_encode( serialize( array() ) ),
 				'hash'    => wp_hash( serialize( array() ) ),
-				'raw'     => new stdClass,
+				'raw'     => new stdClass(),
 			),
 			$data['instance']
 		);
@@ -402,7 +402,7 @@ class WP_Test_REST_Widget_Types_Controller extends WP_Test_REST_Controller_Testc
 			array(
 				'encoded' => base64_encode( serialize( array() ) ),
 				'hash'    => wp_hash( serialize( array() ) ),
-				'raw'     => new stdClass,
+				'raw'     => new stdClass(),
 			),
 			$data['instance']
 		);
diff --git a/tests/rest-api/rest-widgets-controller.php b/tests/rest-api/rest-widgets-controller.php
index 28ac8bc6e3..be9fdbdcf5 100644
--- a/tests/rest-api/rest-widgets-controller.php
+++ b/tests/rest-api/rest-widgets-controller.php
@@ -417,7 +417,7 @@ class WP_Test_REST_Widgets_Controller extends WP_Test_REST_Controller_Testcase {
 		);
 
 		return array(
-			'headers'  => new Requests_Utility_CaseInsensitiveDictionary( $single_value_headers ),
+			'headers'  => new WpOrg\Requests\Utility\CaseInsensitiveDictionary( $single_value_headers ),
 			'body'     => file_get_contents( DIR_TESTDATA . '/feed/wordpress-org-news.xml' ),
 			'response' => array(
 				'code'    => 200,
@@ -1555,7 +1555,7 @@ class WP_Test_REST_Widgets_Controller extends WP_Test_REST_Controller_Testcase {
 			if ( is_array( $item ) && isset( $item['_links'] ) ) {
 				unset( $data[ $count ]['_links'] );
 			}
-			$count ++;
+			$count++;
 		}
 
 		return $data;
diff --git a/tests/rest-api/wpRestBlockPatternCategoriesController.php b/tests/rest-api/wpRestBlockPatternCategoriesController.php
index bd9dd9a0dd..256eabdb82 100644
--- a/tests/rest-api/wpRestBlockPatternCategoriesController.php
+++ b/tests/rest-api/wpRestBlockPatternCategoriesController.php
@@ -74,8 +74,20 @@ class Tests_REST_WpRestBlockPatternCategoriesController extends WP_Test_REST_Con
 		self::$registry_instance_property->setValue( $test_registry );
 
 		// Register some categories in the test registry.
-		$test_registry->register( 'test', array( 'label' => 'Test' ) );
-		$test_registry->register( 'query', array( 'label' => 'Query' ) );
+		$test_registry->register(
+			'test',
+			array(
+				'label'       => 'Test',
+				'description' => 'Test description',
+			)
+		);
+		$test_registry->register(
+			'query',
+			array(
+				'label'       => 'Query',
+				'description' => 'Query',
+			)
+		);
 	}
 
 	public static function wpTearDownAfterClass() {
@@ -103,10 +115,10 @@ class Tests_REST_WpRestBlockPatternCategoriesController extends WP_Test_REST_Con
 		wp_set_current_user( self::$admin_id );
 
 		$expected_names  = array( 'test', 'query' );
-		$expected_fields = array( 'name', 'label' );
+		$expected_fields = array( 'name', 'label', 'description' );
 
 		$request            = new WP_REST_Request( 'GET', static::REQUEST_ROUTE );
-		$request['_fields'] = 'name,label';
+		$request['_fields'] = 'name,label,description';
 		$response           = rest_get_server()->dispatch( $request );
 		$data               = $response->get_data();
 
diff --git a/tests/rest-api/wpRestMenuItemsController.php b/tests/rest-api/wpRestMenuItemsController.php
index 9ef5b87d99..5eecd99d43 100644
--- a/tests/rest-api/wpRestMenuItemsController.php
+++ b/tests/rest-api/wpRestMenuItemsController.php
@@ -375,7 +375,7 @@ class Tests_REST_WpRestMenuItemsController extends WP_Test_REST_Post_Type_Contro
 		$new_menu_id = wp_create_nav_menu( rand_str() );
 		$expected    = array();
 		$actual      = array();
-		for ( $i = 1; $i < 5; $i ++ ) {
+		for ( $i = 1; $i < 5; $i++ ) {
 			$request = new WP_REST_Request( 'POST', '/wp/v2/menu-items' );
 			$request->add_header( 'content-type', 'application/x-www-form-urlencoded' );
 			$params = $this->set_menu_item_data(
@@ -921,7 +921,7 @@ class Tests_REST_WpRestMenuItemsController extends WP_Test_REST_Post_Type_Contro
 			foreach ( $taxonomies as $taxonomy ) {
 				$this->assertSame( $taxonomy->name, $links['https://api.w.org/term'][ $num ]['attributes']['taxonomy'] );
 				$this->assertSame( add_query_arg( 'post', $data['id'], rest_url( 'wp/v2/' . $taxonomy->rest_base ) ), $links['https://api.w.org/term'][ $num ]['href'] );
-				$num ++;
+				$num++;
 			}
 
 			if ( 'post_type' === $data['type'] ) {
diff --git a/tests/rest-api/wpRestTemplatesController.php b/tests/rest-api/wpRestTemplatesController.php
index c53701f9b6..fa790b66d1 100644
--- a/tests/rest-api/wpRestTemplatesController.php
+++ b/tests/rest-api/wpRestTemplatesController.php
@@ -56,6 +56,7 @@ class Tests_REST_WpRestTemplatesController extends WP_Test_REST_Controller_Testc
 	/**
 	 * @covers WP_REST_Templates_Controller::register_routes
 	 * @ticket 54596
+	 * @ticket 56467
 	 */
 	public function test_register_routes() {
 		$routes = rest_get_server()->get_routes();
@@ -69,6 +70,11 @@ class Tests_REST_WpRestTemplatesController extends WP_Test_REST_Controller_Testc
 			$routes,
 			'Single template based on the given ID route does not exist'
 		);
+		$this->assertArrayHasKey(
+			'/wp/v2/templates/lookup',
+			$routes,
+			'Get template fallback content route does not exist'
+		);
 	}
 
 	/**
@@ -337,7 +343,7 @@ class Tests_REST_WpRestTemplatesController extends WP_Test_REST_Controller_Testc
 	 */
 	public function test_sanitize_template_id( $input_id, $sanitized_id ) {
 		$endpoint = new WP_REST_Templates_Controller( 'wp_template' );
-		$this->assertEquals(
+		$this->assertSame(
 			$sanitized_id,
 			$endpoint->_sanitize_template_id( $input_id )
 		);
@@ -678,4 +684,109 @@ class Tests_REST_WpRestTemplatesController extends WP_Test_REST_Controller_Testc
 		return null;
 	}
 
+	/**
+	 * @dataProvider data_create_item_with_is_wp_suggestion
+	 * @ticket 56467
+	 * @covers WP_REST_Templates_Controller::create_item
+	 *
+	 * @param array $body_params Data set to test.
+	 * @param array $expected    Expected results.
+	 */
+	public function test_create_item_with_is_wp_suggestion( array $body_params, array $expected ) {
+		// Set up the user.
+		$body_params['author'] = self::$admin_id;
+		$expected['author']    = self::$admin_id;
+		wp_set_current_user( self::$admin_id );
+
+		$request = new WP_REST_Request( 'POST', '/wp/v2/templates' );
+		$request->set_body_params( $body_params );
+		$response = rest_get_server()->dispatch( $request );
+		$data     = $response->get_data();
+		unset( $data['_links'] );
+		unset( $data['wp_id'] );
+
+		$this->assertSame( $expected, $data );
+	}
+
+	/**
+	 * Data provider.
+	 *
+	 * @return array
+	 */
+	public function data_create_item_with_is_wp_suggestion() {
+		$expected = array(
+			'id'             => 'default//page-rigas',
+			'theme'          => 'default',
+			'content'        => array(
+				'raw' => 'Content',
+			),
+			'slug'           => 'page-rigas',
+			'source'         => 'custom',
+			'origin'         => null,
+			'type'           => 'wp_template',
+			'description'    => 'Just a description',
+			'title'          => array(
+				'raw'      => 'My Template',
+				'rendered' => 'My Template',
+			),
+			'status'         => 'publish',
+			'has_theme_file' => false,
+			'is_custom'      => false,
+			'author'         => null,
+		);
+
+		return array(
+			'is_wp_suggestion: true'  => array(
+				'body_params' => array(
+					'slug'             => 'page-rigas',
+					'description'      => 'Just a description',
+					'title'            => 'My Template',
+					'content'          => 'Content',
+					'is_wp_suggestion' => true,
+					'author'           => null,
+				),
+				'expected'    => $expected,
+			),
+			'is_wp_suggestion: false' => array(
+				'body_params' => array(
+					'slug'             => 'page-hi',
+					'description'      => 'Just a description',
+					'title'            => 'My Template',
+					'content'          => 'Content',
+					'is_wp_suggestion' => false,
+					'author'           => null,
+				),
+				'expected'    => array_merge(
+					$expected,
+					array(
+						'id'        => 'default//page-hi',
+						'slug'      => 'page-hi',
+						'is_custom' => true,
+					)
+				),
+			),
+		);
+	}
+
+	/**
+	 * @ticket 56467
+	 * @covers WP_REST_Templates_Controller::get_template_fallback
+	 */
+	public function test_get_template_fallback() {
+		wp_set_current_user( self::$admin_id );
+		switch_theme( 'block-theme' );
+		$request = new WP_REST_Request( 'GET', '/wp/v2/templates/lookup' );
+		// Should fallback to `index.html`.
+		$request->set_param( 'slug', 'tag-status' );
+		$request->set_param( 'is_custom', false );
+		$request->set_param( 'template_prefix', 'tag' );
+		$response = rest_get_server()->dispatch( $request );
+		$this->assertSame( 'index', $response->get_data()['slug'], 'Should fallback to `index.html`.' );
+		// Should fallback to `page.html`.
+		$request->set_param( 'slug', 'page-hello' );
+		$request->set_param( 'is_custom', false );
+		$request->set_param( 'template_prefix', 'page' );
+		$response = rest_get_server()->dispatch( $request );
+		$this->assertSame( 'page', $response->get_data()['slug'], 'Should fallback to `page.html`.' );
+	}
 }
diff --git a/tests/rest-api/wpRestUrlDetailsController.php b/tests/rest-api/wpRestUrlDetailsController.php
index 6e2dc1f1f6..41d0438a57 100644
--- a/tests/rest-api/wpRestUrlDetailsController.php
+++ b/tests/rest-api/wpRestUrlDetailsController.php
@@ -1096,20 +1096,20 @@ class Tests_REST_WpRestUrlDetailsController extends WP_Test_REST_Controller_Test
 	 *
 	 * @return array faux/mocked response.
 	 */
-	public function mock_success_request_to_remote_url( $response, $args ) {
-		return $this->mock_request_to_remote_url( 'success', $args );
+	public function mock_success_request_to_remote_url( $response, $parsed_args ) {
+		return $this->mock_request_to_remote_url( 'success', $parsed_args );
 	}
 
-	public function mock_failed_request_to_remote_url( $response, $args ) {
-		return $this->mock_request_to_remote_url( 'failure', $args );
+	public function mock_failed_request_to_remote_url( $response, $parsed_args ) {
+		return $this->mock_request_to_remote_url( 'failure', $parsed_args );
 	}
 
-	public function mock_request_to_remote_url_with_empty_body_response( $response, $args ) {
-		return $this->mock_request_to_remote_url( 'empty_body', $args );
+	public function mock_request_to_remote_url_with_empty_body_response( $response, $parsed_args ) {
+		return $this->mock_request_to_remote_url( 'empty_body', $parsed_args );
 	}
 
-	private function mock_request_to_remote_url( $result_type, $args ) {
-		$this->request_args = $args;
+	private function mock_request_to_remote_url( $result_type, $parsed_args ) {
+		$this->request_args = $parsed_args;
 
 		$types = array(
 			'success',
diff --git a/tests/rewrite.php b/tests/rewrite.php
index bee61dc66c..2bb7254abf 100644
--- a/tests/rewrite.php
+++ b/tests/rewrite.php
@@ -255,8 +255,17 @@ class Tests_Rewrite extends WP_UnitTestCase {
 		$this->assertSame( $grandchild_id_2, url_to_postid( get_permalink( $grandchild_id_2 ) ) );
 	}
 
-	public function test_url_to_postid_home_has_path() {
+	/**
+	 * @covers ::url_to_postid
+	 */
+	public function test_url_to_postid_url_has_only_path() {
+		$this->assertSame( 0, url_to_postid( '/example/' ) );
+	}
 
+	/**
+	 * @covers ::url_to_postid
+	 */
+	public function test_url_to_postid_home_has_only_path() {
 		update_option( 'home', home_url( '/example/' ) );
 
 		$id = self::factory()->post->create(
diff --git a/tests/style-engine/wpStyleEngineCssRule.php b/tests/style-engine/wpStyleEngineCssRule.php
index 959f4092a9..debb09d8d1 100644
--- a/tests/style-engine/wpStyleEngineCssRule.php
+++ b/tests/style-engine/wpStyleEngineCssRule.php
@@ -156,6 +156,6 @@ class Tests_Style_Engine_wpStyleEngineCSSRule extends WP_UnitTestCase {
 	font-family: Detective Sans;
 }';
 
-		$this->assertSame( $expected, $css_rule->get_css( true ) );
+		$this->assertSameIgnoreEOL( $expected, $css_rule->get_css( true ) );
 	}
 }
diff --git a/tests/style-engine/wpStyleEngineCssRulesStore.php b/tests/style-engine/wpStyleEngineCssRulesStore.php
index 559c0b3492..4fe6c4c6e2 100644
--- a/tests/style-engine/wpStyleEngineCssRulesStore.php
+++ b/tests/style-engine/wpStyleEngineCssRulesStore.php
@@ -88,7 +88,7 @@ class Tests_Style_Engine_wpStyleEngineCSSRulesStore extends WP_UnitTestCase {
 		$burrito_store    = WP_Style_Engine_CSS_Rules_Store::get_store( 'burrito' );
 		$quesadilla_store = WP_Style_Engine_CSS_Rules_Store::get_store( 'quesadilla' );
 
-		$this->assertEquals(
+		$this->assertSame(
 			array(
 				'burrito'    => $burrito_store,
 				'quesadilla' => $quesadilla_store,
@@ -108,7 +108,7 @@ class Tests_Style_Engine_wpStyleEngineCSSRulesStore extends WP_UnitTestCase {
 		$dolmades_store = WP_Style_Engine_CSS_Rules_Store::get_store( 'dolmades' );
 		$tzatziki_store = WP_Style_Engine_CSS_Rules_Store::get_store( 'tzatziki' );
 
-		$this->assertEquals(
+		$this->assertSame(
 			array(
 				'dolmades' => $dolmades_store,
 				'tzatziki' => $tzatziki_store,
@@ -119,7 +119,7 @@ class Tests_Style_Engine_wpStyleEngineCSSRulesStore extends WP_UnitTestCase {
 
 		WP_Style_Engine_CSS_Rules_Store::remove_all_stores();
 
-		$this->assertEquals(
+		$this->assertSame(
 			array(),
 			WP_Style_Engine_CSS_Rules_Store::get_stores(),
 			'Return value of get_stores() is not an empty array after remove_all_stores() called.'
diff --git a/tests/style-engine/wpStyleEngineProcessor.php b/tests/style-engine/wpStyleEngineProcessor.php
index 05acdc6db5..46201dab14 100644
--- a/tests/style-engine/wpStyleEngineProcessor.php
+++ b/tests/style-engine/wpStyleEngineProcessor.php
@@ -92,7 +92,7 @@ class Tests_Style_Engine_wpStyleEngineProcessor extends WP_UnitTestCase {
 	background-color: orange;
 }
 ';
-		$this->assertSame(
+		$this->assertSameIgnoreEOL(
 			$expected,
 			$a_wonderful_processor->get_css( array( 'prettify' => true ) )
 		);
diff --git a/tests/template.php b/tests/template.php
index c807dc469b..c79082dff3 100644
--- a/tests/template.php
+++ b/tests/template.php
@@ -456,6 +456,178 @@ class Tests_Template extends WP_UnitTestCase {
 		);
 	}
 
+	/**
+	 * @ticket 17851
+	 * @covers ::add_settings_section
+	 */
+	public function test_add_settings_section() {
+		add_settings_section( 'test-section', 'Section title', '__return_false', 'test-page' );
+
+		global $wp_settings_sections;
+		$this->assertIsArray( $wp_settings_sections, 'List of sections is not initialized.' );
+		$this->assertArrayHasKey( 'test-page', $wp_settings_sections, 'List of sections for the test page has not been added to sections list.' );
+		$this->assertIsArray( $wp_settings_sections['test-page'], 'List of sections for the test page is not initialized.' );
+		$this->assertArrayHasKey( 'test-section', $wp_settings_sections['test-page'], 'Test section has not been added to the list of sections for the test page.' );
+
+		$this->assertEqualSetsWithIndex(
+			array(
+				'id'             => 'test-section',
+				'title'          => 'Section title',
+				'callback'       => '__return_false',
+				'before_section' => '',
+				'after_section'  => '',
+				'section_class'  => '',
+			),
+			$wp_settings_sections['test-page']['test-section'],
+			'Test section data does not match the expected dataset.'
+		);
+	}
+
+	/**
+	 * @ticket 17851
+	 *
+	 * @param array  $extra_args                   Extra arguments to pass to function `add_settings_section()`.
+	 * @param array  $expected_section_data        Expected set of section data.
+	 * @param string $expected_before_section_html Expected HTML markup to be rendered before the settings section.
+	 * @param string $expected_after_section_html  Expected HTML markup to be rendered after the settings section.
+	 *
+	 * @covers ::add_settings_section
+	 * @covers ::do_settings_sections
+	 *
+	 * @dataProvider data_extra_args_for_add_settings_section
+	 */
+	public function test_add_settings_section_with_extra_args( $extra_args, $expected_section_data, $expected_before_section_html, $expected_after_section_html ) {
+		add_settings_section( 'test-section', 'Section title', '__return_false', 'test-page', $extra_args );
+		add_settings_field( 'test-field', 'Field title', '__return_false', 'test-page', 'test-section' );
+
+		global $wp_settings_sections;
+		$this->assertIsArray( $wp_settings_sections, 'List of sections is not initialized.' );
+		$this->assertArrayHasKey( 'test-page', $wp_settings_sections, 'List of sections for the test page has not been added to sections list.' );
+		$this->assertIsArray( $wp_settings_sections['test-page'], 'List of sections for the test page is not initialized.' );
+		$this->assertArrayHasKey( 'test-section', $wp_settings_sections['test-page'], 'Test section has not been added to the list of sections for the test page.' );
+
+		$this->assertEqualSetsWithIndex(
+			$expected_section_data,
+			$wp_settings_sections['test-page']['test-section'],
+			'Test section data does not match the expected dataset.'
+		);
+
+		ob_start();
+		do_settings_sections( 'test-page' );
+		$output = ob_get_clean();
+
+		$this->assertStringContainsString( $expected_before_section_html, $output, 'Test page output does not contain the custom markup to be placed before the section.' );
+		$this->assertStringContainsString( $expected_after_section_html, $output, 'Test page output does not contain the custom markup to be placed after the section.' );
+	}
+
+	/**
+	 * Data provider for `test_add_settings_section_with_extra_args()`.
+	 *
+	 * @return array
+	 */
+	public function data_extra_args_for_add_settings_section() {
+		return array(
+			'class placeholder section_class present' => array(
+				array(
+					'before_section' => '<div class="%s">',
+					'after_section'  => '</div><!-- end of the test section -->',
+					'section_class'  => 'test-section-wrap',
+				),
+				array(
+					'id'             => 'test-section',
+					'title'          => 'Section title',
+					'callback'       => '__return_false',
+					'before_section' => '<div class="%s">',
+					'after_section'  => '</div><!-- end of the test section -->',
+					'section_class'  => 'test-section-wrap',
+				),
+				'<div class="test-section-wrap">',
+				'</div><!-- end of the test section -->',
+			),
+			'missing class placeholder section_class' => array(
+				array(
+					'before_section' => '<div class="testing-section-wrapper">',
+					'after_section'  => '</div><!-- end of the test section -->',
+					'section_class'  => 'test-section-wrap',
+				),
+				array(
+					'id'             => 'test-section',
+					'title'          => 'Section title',
+					'callback'       => '__return_false',
+					'before_section' => '<div class="testing-section-wrapper">',
+					'after_section'  => '</div><!-- end of the test section -->',
+					'section_class'  => 'test-section-wrap',
+				),
+				'<div class="testing-section-wrapper">',
+				'</div><!-- end of the test section -->',
+			),
+			'empty section_class'                     => array(
+				array(
+					'before_section' => '<div class="test-section-container">',
+					'after_section'  => '</div><!-- end of the test section -->',
+					'section_class'  => '',
+				),
+				array(
+					'id'             => 'test-section',
+					'title'          => 'Section title',
+					'callback'       => '__return_false',
+					'before_section' => '<div class="test-section-container">',
+					'after_section'  => '</div><!-- end of the test section -->',
+					'section_class'  => '',
+				),
+				'<div class="test-section-container">',
+				'</div><!-- end of the test section -->',
+			),
+			'section_class missing'                   => array(
+				array(
+					'before_section' => '<div class="wp-whitelabel-section">',
+					'after_section'  => '</div><!-- end of the test section -->',
+				),
+				array(
+					'id'             => 'test-section',
+					'title'          => 'Section title',
+					'callback'       => '__return_false',
+					'before_section' => '<div class="wp-whitelabel-section">',
+					'after_section'  => '</div><!-- end of the test section -->',
+					'section_class'  => '',
+				),
+				'<div class="wp-whitelabel-section">',
+				'</div><!-- end of the test section -->',
+			),
+			'disallowed tag in before_section'        => array(
+				array(
+					'before_section' => '<div class="video-settings-section"><iframe src="https://www.wordpress.org/" />',
+					'after_section'  => '</div><!-- end of the test section -->',
+				),
+				array(
+					'id'             => 'test-section',
+					'title'          => 'Section title',
+					'callback'       => '__return_false',
+					'before_section' => '<div class="video-settings-section"><iframe src="https://www.wordpress.org/" />',
+					'after_section'  => '</div><!-- end of the test section -->',
+					'section_class'  => '',
+				),
+				'<div class="video-settings-section">',
+				'</div><!-- end of the test section -->',
+			),
+			'disallowed tag in after_section'         => array(
+				array(
+					'before_section' => '<div class="video-settings-section">',
+					'after_section'  => '</div><iframe src="https://www.wordpress.org/" />',
+				),
+				array(
+					'id'             => 'test-section',
+					'title'          => 'Section title',
+					'callback'       => '__return_false',
+					'before_section' => '<div class="video-settings-section">',
+					'after_section'  => '</div><iframe src="https://www.wordpress.org/" />',
+					'section_class'  => '',
+				),
+				'<div class="video-settings-section">',
+				'</div>',
+			),
+		);
+	}
 
 	public function assertTemplateHierarchy( $url, array $expected, $message = '' ) {
 		$this->go_to( $url );
diff --git a/tests/term.php b/tests/term.php
index 3e9c0a25f5..09235e25b9 100644
--- a/tests/term.php
+++ b/tests/term.php
@@ -75,7 +75,7 @@ class Tests_Term extends WP_UnitTestCase {
 			)
 		);
 		// There are 5 posts, all Uncategorized.
-		$this->assertEquals( 1, $count );
+		$this->assertSame( '1', $count );
 	}
 
 	/**
@@ -86,14 +86,14 @@ class Tests_Term extends WP_UnitTestCase {
 
 		// Counts all terms (1 default category, 5 tags).
 		$count = wp_count_terms();
-		$this->assertEquals( 6, $count );
+		$this->assertSame( '6', $count );
 
 		// Counts only tags (5), with both current and legacy signature.
 		// Legacy usage should not trigger deprecated notice.
 		$count        = wp_count_terms( array( 'taxonomy' => 'post_tag' ) );
 		$legacy_count = wp_count_terms( 'post_tag' );
-		$this->assertEquals( 5, $count );
-		$this->assertEquals( $count, $legacy_count );
+		$this->assertSame( '5', $count );
+		$this->assertSame( $count, $legacy_count );
 	}
 
 	/**
@@ -159,7 +159,7 @@ class Tests_Term extends WP_UnitTestCase {
 		$this->assertIsNumeric( $t );
 		$this->assertNotWPError( $t );
 		$this->assertGreaterThan( 0, $t );
-		$this->assertEquals( $initial_count + 1, wp_count_terms( array( 'taxonomy' => 'category' ) ) );
+		$this->assertSame( (string) ( $initial_count + 1 ), wp_count_terms( array( 'taxonomy' => 'category' ) ) );
 
 		// Make sure the term exists.
 		$this->assertGreaterThan( 0, term_exists( $term ) );
@@ -169,7 +169,7 @@ class Tests_Term extends WP_UnitTestCase {
 		$this->assertTrue( wp_delete_category( $t ) );
 		$this->assertNull( term_exists( $term ) );
 		$this->assertNull( term_exists( $t ) );
-		$this->assertEquals( $initial_count, wp_count_terms( array( 'taxonomy' => 'category' ) ) );
+		$this->assertSame( $initial_count, wp_count_terms( array( 'taxonomy' => 'category' ) ) );
 	}
 
 	/**
diff --git a/tests/term/getTerms.php b/tests/term/getTerms.php
index 9b4bc16640..5c0d67f72e 100644
--- a/tests/term/getTerms.php
+++ b/tests/term/getTerms.php
@@ -255,7 +255,7 @@ class Tests_Term_getTerms extends WP_UnitTestCase {
 				'fields'     => 'id=>parent',
 			)
 		);
-		$this->assertEquals(
+		$this->assertSameSetsWithIndex(
 			array(
 				$term_id1 => 0,
 				$term_id2 => $term_id1,
@@ -288,7 +288,7 @@ class Tests_Term_getTerms extends WP_UnitTestCase {
 				'fields'     => 'id=>name',
 			)
 		);
-		$this->assertEquals(
+		$this->assertSameSetsWithIndex(
 			array(
 				$term_id1 => 'WOO!',
 				$term_id2 => 'HOO!',
@@ -303,7 +303,7 @@ class Tests_Term_getTerms extends WP_UnitTestCase {
 				'fields'     => 'id=>slug',
 			)
 		);
-		$this->assertEquals(
+		$this->assertSameSetsWithIndex(
 			array(
 				$term_id1 => 'woo',
 				$term_id2 => 'hoo',
diff --git a/tests/term/query.php b/tests/term/query.php
index ca0e21b09c..b15b4787fc 100644
--- a/tests/term/query.php
+++ b/tests/term/query.php
@@ -867,4 +867,124 @@ class Tests_Term_Query extends WP_UnitTestCase {
 
 		$this->assertContains( $t1, $q->terms );
 	}
+
+	/**
+	 * Ensure cache keys are generated without WPDB placeholders.
+	 *
+	 * @ticket 57298
+	 *
+	 * @covers       WP_Term_Query::generate_cache_key
+	 * @dataProvider data_query_cache
+	 */
+	public function test_generate_cache_key_placeholder( $args ) {
+		global $wpdb;
+		$query1 = new WP_Term_Query();
+		$query1->query( $args );
+
+		$query_vars = $query1->query_vars;
+		$request    = $query1->request;
+
+		$reflection = new ReflectionMethod( $query1, 'generate_cache_key' );
+		$reflection->setAccessible( true );
+
+		$cache_key_1 = $reflection->invoke( $query1, $query_vars, $request );
+
+		$request_without_placeholder = $wpdb->remove_placeholder_escape( $request );
+
+		$cache_key_2 = $reflection->invoke( $query1, $query_vars, $request_without_placeholder );
+
+		$this->assertSame( $cache_key_1, $cache_key_2, 'Cache key differs when using wpdb placeholder.' );
+	}
+
+	/**
+	 * Data provider.
+	 *
+	 * @return array[] Test parameters.
+	 */
+	public function data_query_cache() {
+		return array(
+			'empty query'                => array(
+				'args' => array(),
+			),
+			'search query'               => array(
+				'args' => array(
+					'search' => 'title',
+				),
+			),
+			'search name query'          => array(
+				'args' => array(
+					'name__like' => 'title',
+				),
+			),
+			'search description query'   => array(
+				'args' => array(
+					'description__like' => 'title',
+				),
+			),
+			'meta query'                 => array(
+				'args' => array(
+					'meta_query' => array(
+						array(
+							'key' => 'color',
+						),
+					),
+				),
+			),
+			'meta query search'          => array(
+				'args' => array(
+					'meta_query' => array(
+						array(
+							'key'     => 'color',
+							'value'   => '00',
+							'compare' => 'LIKE',
+						),
+					),
+				),
+			),
+			'nested meta query search'   => array(
+				'args' => array(
+					'meta_query' => array(
+						'relation' => 'AND',
+						array(
+							'key'     => 'color',
+							'value'   => '00',
+							'compare' => 'LIKE',
+						),
+						array(
+							'relation' => 'OR',
+							array(
+								'key'     => 'color',
+								'value'   => '00',
+								'compare' => 'LIKE',
+							),
+							array(
+								'relation' => 'AND',
+								array(
+									'key'     => 'wp_test_suite',
+									'value'   => '56802',
+									'compare' => 'LIKE',
+								),
+								array(
+									'key'     => 'wp_test_suite_too',
+									'value'   => '56802',
+									'compare' => 'LIKE',
+								),
+							),
+						),
+					),
+				),
+			),
+			'meta query not like search' => array(
+				'args' => array(
+					'meta_query' => array(
+						array(
+							'key'     => 'color',
+							'value'   => 'ff',
+							'compare' => 'NOT LIKE',
+						),
+					),
+				),
+			),
+		);
+	}
 }
diff --git a/tests/term/taxQuery.php b/tests/term/taxQuery.php
index 78f88a58bb..40f1d29612 100644
--- a/tests/term/taxQuery.php
+++ b/tests/term/taxQuery.php
@@ -59,7 +59,7 @@ class Tests_Term_Tax_Query extends WP_UnitTestCase {
 			'operator'         => 'IN',
 		);
 
-		$this->assertEquals( $expected, $tq->queries[0] );
+		$this->assertSameSetsWithIndex( $expected, $tq->queries[0] );
 	}
 
 	public function test_construct_fill_missing_query_params_merge_with_passed_values() {
@@ -82,7 +82,7 @@ class Tests_Term_Tax_Query extends WP_UnitTestCase {
 			'foo'              => 'bar',
 		);
 
-		$this->assertEquals( $expected, $tq->queries[0] );
+		$this->assertSameSetsWithIndex( $expected, $tq->queries[0] );
 	}
 
 	public function test_construct_cast_terms_to_array() {
@@ -262,7 +262,7 @@ class Tests_Term_Tax_Query extends WP_UnitTestCase {
 		);
 		$tq->transform_query( $tq->queries[0], 'term_taxonomy_id' );
 
-		$this->assertEquals( $tt_ids, $tq->queries[0]['terms'] );
+		$this->assertEqualSets( $tt_ids, $tq->queries[0]['terms'] );
 		$this->assertSame( 'term_taxonomy_id', $tq->queries[0]['field'] );
 	}
 
@@ -335,6 +335,7 @@ class Tests_Term_Tax_Query extends WP_UnitTestCase {
 
 	/**
 	 * @ticket 18105
+	 * @covers WP_Tax_Query::get_sql
 	 */
 	public function test_get_sql_relation_and_operator_in() {
 		register_taxonomy( 'wptests_tax', 'post' );
@@ -381,11 +382,17 @@ class Tests_Term_Tax_Query extends WP_UnitTestCase {
 
 		$this->assertSame( 3, substr_count( $sql['join'], 'JOIN' ) );
 
+		// Checking number of occurrences of AND while skipping the one at the beginning.
+		$this->assertSame( 2, substr_count( substr( $sql['where'], 5 ), 'AND' ), 'SQL query does not contain expected number conditions joined by operator AND.' );
+
+		$this->assertStringNotContainsString( 'OR', $sql['where'], 'SQL query contains conditions joined by operator OR.' );
+
 		_unregister_taxonomy( 'wptests_tax' );
 	}
 
 	/**
 	 * @ticket 18105
+	 * @covers WP_Tax_Query::get_sql
 	 */
 	public function test_get_sql_nested_relation_or_operator_in() {
 		register_taxonomy( 'wptests_tax', 'post' );
@@ -434,6 +441,8 @@ class Tests_Term_Tax_Query extends WP_UnitTestCase {
 		$sql = $tq->get_sql( $wpdb->posts, 'ID' );
 
 		$this->assertSame( 2, substr_count( $sql['join'], 'JOIN' ) );
+		$this->assertSame( 2, substr_count( $sql['where'], 'OR' ), 'SQL query does not contain expected number conditions joined by operator OR.' );
+		$this->assertStringNotContainsString( 'AND', substr( $sql['where'], 5 ), 'SQL query contains conditions joined by operator AND.' );
 
 		_unregister_taxonomy( 'wptests_tax' );
 	}
@@ -495,4 +504,60 @@ class Tests_Term_Tax_Query extends WP_UnitTestCase {
 
 		_unregister_taxonomy( 'wptests_tax' );
 	}
+
+	/**
+	 * @ticket 18105
+	 * @covers WP_Tax_Query::get_sql
+	 */
+	public function test_get_sql_relation_unsupported() {
+		register_taxonomy( 'wptests_tax', 'post' );
+
+		$t1 = self::factory()->term->create(
+			array(
+				'taxonomy' => 'wptests_tax',
+			)
+		);
+		$t2 = self::factory()->term->create(
+			array(
+				'taxonomy' => 'wptests_tax',
+			)
+		);
+		$t3 = self::factory()->term->create(
+			array(
+				'taxonomy' => 'wptests_tax',
+			)
+		);
+
+		$tq = new WP_Tax_Query(
+			array(
+				'relation' => 'UNSUPPORTED',
+				array(
+					'taxonomy' => 'wptests_tax',
+					'field'    => 'term_id',
+					'terms'    => $t1,
+				),
+				array(
+					'taxonomy' => 'wptests_tax',
+					'field'    => 'term_id',
+					'terms'    => $t2,
+				),
+				array(
+					'taxonomy' => 'wptests_tax',
+					'field'    => 'term_id',
+					'terms'    => $t3,
+				),
+			)
+		);
+
+		global $wpdb;
+		$sql = $tq->get_sql( $wpdb->posts, 'ID' );
+
+		// Checking number of occurrences of AND while skipping the one at the beginning.
+		$this->assertSame( 2, substr_count( substr( $sql['where'], 5 ), 'AND' ), 'SQL query does not contain expected number conditions joined by operator AND.' );
+
+		$this->assertStringNotContainsString( 'UNSUPPORTED', $sql['where'], 'SQL query contains unsupported relation operator.' );
+		$this->assertStringNotContainsString( 'OR', $sql['where'], 'SQL query contains conditions joined by operator OR.' );
+
+		_unregister_taxonomy( 'wptests_tax' );
+	}
 }
diff --git a/tests/theme.php b/tests/theme.php
index 10871c8a2b..378ed16093 100644
--- a/tests/theme.php
+++ b/tests/theme.php
@@ -21,6 +21,7 @@ class Tests_Theme extends WP_UnitTestCase {
 		'twentytwenty',
 		'twentytwentyone',
 		'twentytwentytwo',
+		'twentytwentythree',
 	);
 
 	/**
@@ -355,7 +356,7 @@ class Tests_Theme extends WP_UnitTestCase {
 		$this->assertNotFalse( $theme->errors() );
 		$this->assertFalse( $theme->exists() );
 
-		// These return the bogus name - perhaps not ideal behaviour?
+		// These return the bogus name - perhaps not ideal behavior?
 		$this->assertSame( $template, get_template() );
 		$this->assertSame( $style, get_stylesheet() );
 	}
diff --git a/tests/theme/base.php b/tests/theme/base.php
new file mode 100644
index 0000000000..182efa5df8
--- /dev/null
+++ b/tests/theme/base.php
@@ -0,0 +1,66 @@
+<?php
+
+abstract class WP_Theme_UnitTestCase extends WP_UnitTestCase {
+
+	/**
+	 * Theme root directory.
+	 *
+	 * @var string
+	 */
+	private $theme_root;
+
+	/**
+	 * Original theme directory.
+	 *
+	 * @var string
+	 */
+	private $orig_theme_dir;
+
+	public function set_up() {
+		parent::set_up();
+
+		$this->orig_theme_dir = $GLOBALS['wp_theme_directories'];
+		$this->theme_root     = realpath( DIR_TESTDATA . '/themedir1' );
+
+		// /themes is necessary as theme.php functions assume /themes is the root if there is only one root.
+		$GLOBALS['wp_theme_directories'] = array( WP_CONTENT_DIR . '/themes', $this->theme_root );
+
+		// Set up the new root.
+		add_filter( 'theme_root', array( $this, 'filter_set_theme_root' ) );
+		add_filter( 'stylesheet_root', array( $this, 'filter_set_theme_root' ) );
+		add_filter( 'template_root', array( $this, 'filter_set_theme_root' ) );
+
+		// Clear caches.
+		wp_clean_themes_cache();
+		unset( $GLOBALS['wp_themes'] );
+	}
+
+	public function tear_down() {
+		$GLOBALS['wp_theme_directories'] = $this->orig_theme_dir;
+
+		// Clear up the filters to modify the theme root.
+		remove_filter( 'theme_root', array( $this, 'filter_set_theme_root' ) );
+		remove_filter( 'stylesheet_root', array( $this, 'filter_set_theme_root' ) );
+		remove_filter( 'template_root', array( $this, 'filter_set_theme_root' ) );
+
+		wp_clean_themes_cache();
+		unset( $GLOBALS['wp_themes'] );
+
+		parent::tear_down();
+	}
+
+	/**
+	 * Cleans up global scope.
+	 *
+	 * @global WP_Styles $wp_styles
+	 */
+	public function clean_up_global_scope() {
+		global $wp_styles;
+		parent::clean_up_global_scope();
+		$wp_styles = null;
+	}
+
+	public function filter_set_theme_root() {
+		return $this->theme_root;
+	}
+}
diff --git a/tests/theme/themeDir.php b/tests/theme/themeDir.php
index 8de4f4189d..270895c442 100644
--- a/tests/theme/themeDir.php
+++ b/tests/theme/themeDir.php
@@ -163,6 +163,7 @@ class Tests_Theme_ThemeDir extends WP_UnitTestCase {
 		$theme_names = array_keys( $themes );
 		$expected    = array(
 			'WordPress Default',
+			'Default Child Theme with no theme.json',
 			'Sandbox',
 			'Stylesheet Only',
 			'My Theme',
@@ -177,6 +178,8 @@ class Tests_Theme_ThemeDir extends WP_UnitTestCase {
 			'REST Theme',
 			'Block Theme',
 			'Block Theme Child Theme',
+			'Block Theme Child with no theme.json',
+			'Block Theme Child Theme With Fluid Typography',
 			'Block Theme [0.4.0]',
 			'Block Theme [1.0.0] in subdirectory',
 			'Block Theme Deprecated Path',
diff --git a/tests/theme/wpAddGlobalStylesForBlocks.php b/tests/theme/wpAddGlobalStylesForBlocks.php
new file mode 100644
index 0000000000..6d55f24ec9
--- /dev/null
+++ b/tests/theme/wpAddGlobalStylesForBlocks.php
@@ -0,0 +1,160 @@
+<?php
+
+require_once __DIR__ . '/base.php';
+
+/**
+ * Tests wp_add_global_styles_for_blocks().
+ *
+ * @group themes
+ *
+ * @covers ::wp_add_global_styles_for_blocks
+ */
+class Tests_Theme_WpAddGlobalStylesForBlocks extends WP_Theme_UnitTestCase {
+
+	/**
+	 * Test blocks to unregister at cleanup.
+	 *
+	 * @var array
+	 */
+	private $test_blocks = array();
+
+	public function tear_down() {
+		// Unregister test blocks.
+		if ( ! empty( $this->test_blocks ) ) {
+			foreach ( $this->test_blocks as $test_block ) {
+				unregister_block_type( $test_block );
+			}
+			$this->test_blocks = array();
+		}
+
+		parent::tear_down();
+	}
+
+	/**
+	 * @ticket 56915
+	 */
+	public function test_third_party_blocks_inline_styles_not_register_to_global_styles() {
+		switch_theme( 'block-theme' );
+
+		wp_register_style( 'global-styles', false, array(), true, true );
+		wp_add_global_styles_for_blocks();
+
+		$this->assertNotContains(
+			'.wp-block-my-third-party-block{background-color: hotpink;}',
+			$this->get_global_styles()
+		);
+	}
+
+	/**
+	 * @ticket 56915
+	 */
+	public function test_third_party_blocks_inline_styles_get_registered_to_global_styles() {
+		$this->set_up_third_party_block();
+
+		wp_register_style( 'global-styles', false, array(), true, true );
+
+		$this->assertNotContains(
+			'.wp-block-my-third-party-block{background-color: hotpink;}',
+			$this->get_global_styles(),
+			'Third party block inline style should not be registered before running wp_add_global_styles_for_blocks()'
+		);
+
+		wp_add_global_styles_for_blocks();
+
+		$this->assertContains(
+			'.wp-block-my-third-party-block{background-color: hotpink;}',
+			$this->get_global_styles(),
+			'Third party block inline style should be registered after running wp_add_global_styles_for_blocks()'
+		);
+	}
+
+	/**
+	 * @ticket 56915
+	 */
+	public function test_third_party_blocks_inline_styles_get_registered_to_global_styles_when_per_block() {
+		$this->set_up_third_party_block();
+		add_filter( 'should_load_separate_core_block_assets', '__return_true' );
+
+		wp_register_style( 'global-styles', false, array(), true, true );
+
+		$this->assertNotContains(
+			'.wp-block-my-third-party-block{background-color: hotpink;}',
+			$this->get_global_styles(),
+			'Third party block inline style should not be registered before running wp_add_global_styles_for_blocks()'
+		);
+
+		wp_add_global_styles_for_blocks();
+
+		$this->assertContains(
+			'.wp-block-my-third-party-block{background-color: hotpink;}',
+			$this->get_global_styles(),
+			'Third party block inline style should be registered after running wp_add_global_styles_for_blocks()'
+		);
+	}
+
+	/**
+	 * @ticket 56915
+	 */
+	public function test_third_party_blocks_inline_styles_get_rendered_when_per_block() {
+		$this->set_up_third_party_block();
+		add_filter( 'should_load_separate_core_block_assets', '__return_true' );
+
+		wp_register_style( 'global-styles', false, array(), true, true );
+		wp_enqueue_style( 'global-styles' );
+		wp_add_global_styles_for_blocks();
+
+		$actual = get_echo( 'wp_print_styles' );
+
+		$this->assertStringContainsString(
+			'.wp-block-my-third-party-block{background-color: hotpink;}',
+			$actual,
+			'Third party block inline style should render'
+		);
+		$this->assertStringNotContainsString(
+			'.wp-block-post-featured-image',
+			$actual,
+			'Core block should not render'
+		);
+	}
+
+	/**
+	 * @ticket 56915
+	 */
+	public function test_blocks_inline_styles_get_rendered() {
+		wp_register_style( 'global-styles', false, array(), true, true );
+		wp_enqueue_style( 'global-styles' );
+		wp_add_global_styles_for_blocks();
+
+		$actual = get_echo( 'wp_print_styles' );
+
+		$this->assertStringContainsString(
+			'.wp-block-my-third-party-block{background-color: hotpink;}',
+			$actual,
+			'Third party block inline style should render'
+		);
+		$this->assertStringContainsString(
+			'.wp-block-post-featured-image',
+			$actual,
+			'Core block should render'
+		);
+	}
+
+	private function set_up_third_party_block() {
+		switch_theme( 'block-theme' );
+
+		$name     = 'my/third-party-block';
+		$settings = array(
+			'icon'            => 'text',
+			'category'        => 'common',
+			'render_callback' => 'foo',
+		);
+		register_block_type( $name, $settings );
+
+		$this->test_blocks[] = $name;
+	}
+
+	private function get_global_styles() {
+		$actual = wp_styles()->get_data( 'global-styles', 'after' );
+		return is_array( $actual ) ? $actual : array();
+	}
+}
diff --git a/tests/theme/wpThemeHasThemeJson.php b/tests/theme/wpThemeHasThemeJson.php
new file mode 100644
index 0000000000..636886c03b
--- /dev/null
+++ b/tests/theme/wpThemeHasThemeJson.php
@@ -0,0 +1,72 @@
+<?php
+
+require_once __DIR__ . '/base.php';
+
+/**
+ * Tests wp_theme_has_theme_json().
+ *
+ * @group theme_json
+ *
+ * @covers ::wp_theme_has_theme_json
+ */
+class Tests_Theme_WpThemeHasThemeJson extends WP_Theme_UnitTestCase {
+
+	/**
+	 * @ticket 56975
+	 *
+	 * @dataProvider data_theme_has_theme_json_reports_correctly
+	 *
+	 * @param string $theme    The slug of the theme to switch to.
+	 * @param bool   $expected The expected result.
+	 */
+	public function test_theme_has_theme_json_reports_correctly( $theme, $expected ) {
+		switch_theme( $theme );
+		$this->assertSame( $expected, wp_theme_has_theme_json() );
+	}
+
+	/**
+	 * Data provider.
+	 *
+	 * @return array[]
+	 */
+	public function data_theme_has_theme_json_reports_correctly() {
+		return array(
+			'a theme with theme.json'       => array(
+				'theme'    => 'block-theme',
+				'expected' => true,
+			),
+			'a theme without theme.json'    => array(
+				'theme'    => 'default',
+				'expected' => false,
+			),
+			'a child theme with theme.json' => array(
+				'theme'    => 'block-theme-child',
+				'expected' => true,
+			),
+			'a child theme without theme.json and parent theme with theme.json' => array(
+				'theme'    => 'block-theme-child-no-theme-json',
+				'expected' => true,
+			),
+			'a child theme without theme.json and parent theme without theme.json' => array(
+				'theme'    => 'default-child-no-theme-json',
+				'expected' => false,
+			),
+		);
+	}
+
+	/**
+	 * @ticket 52991
+	 */
+	public function test_switching_themes_recalculates_support() {
+		// The "default" theme doesn't have theme.json support.
+		switch_theme( 'default' );
+		$default = wp_theme_has_theme_json();
+
+		// Switch to a theme that does have support.
+		switch_theme( 'block-theme' );
+		$block_theme = wp_theme_has_theme_json();
+
+		$this->assertFalse( $default, 'The "default" theme should not report theme.json support.' );
+		$this->assertTrue( $block_theme, 'The block theme should report theme.json support.' );
+	}
+}
diff --git a/tests/theme/wpThemeJson.php b/tests/theme/wpThemeJson.php
index f1e3e1ae8b..9495104357 100644
--- a/tests/theme/wpThemeJson.php
+++ b/tests/theme/wpThemeJson.php
@@ -9,8 +9,9 @@
  * @since 5.8.0
  *
  * @group themes
+ *
+ * @covers WP_Theme_JSON
  */
-
 class Tests_Theme_wpThemeJson extends WP_UnitTestCase {
 
 	/**
@@ -200,7 +201,7 @@ class Tests_Theme_wpThemeJson extends WP_UnitTestCase {
 		$this->assertEqualSetsWithIndex( $expected_no_origin, $actual_no_origin );
 	}
 
-	function test_get_settings_appearance_true_opts_in() {
+	public function test_get_settings_appearance_true_opts_in() {
 		$theme_json = new WP_Theme_JSON(
 			array(
 				'version'  => WP_Theme_JSON::LATEST_SCHEMA,
@@ -279,7 +280,7 @@ class Tests_Theme_wpThemeJson extends WP_UnitTestCase {
 		$this->assertEqualSetsWithIndex( $expected, $actual );
 	}
 
-	function test_get_settings_appearance_false_does_not_opt_in() {
+	public function test_get_settings_appearance_false_does_not_opt_in() {
 		$theme_json = new WP_Theme_JSON(
 			array(
 				'version'  => WP_Theme_JSON::LATEST_SCHEMA,
@@ -366,7 +367,7 @@ class Tests_Theme_wpThemeJson extends WP_UnitTestCase {
 			)
 		);
 
-		$styles = 'body { margin: 0; }.wp-site-blocks > .alignleft { float: left; margin-right: 2em; }.wp-site-blocks > .alignright { float: right; margin-left: 2em; }.wp-site-blocks > .aligncenter { justify-content: center; margin-left: auto; margin-right: auto; }.wp-block-group{border-radius: 10px;margin: 1em;padding: 24px;}.wp-block-image{border-top-left-radius: 10px;border-bottom-right-radius: 1em;margin-bottom: 30px;padding-top: 15px;}';
+		$styles = 'body { margin: 0; }.wp-site-blocks > .alignleft { float: left; margin-right: 2em; }.wp-site-blocks > .alignright { float: right; margin-left: 2em; }.wp-site-blocks > .aligncenter { justify-content: center; margin-left: auto; margin-right: auto; }.wp-block-group{border-radius: 10px;margin: 1em;padding: 24px;}.wp-block-image{margin-bottom: 30px;padding-top: 15px;}.wp-block-image img, .wp-block-image .wp-block-image__crop-area{border-top-left-radius: 10px;border-bottom-right-radius: 1em;}';
 		$this->assertSame( $styles, $theme_json->get_stylesheet() );
 		$this->assertSame( $styles, $theme_json->get_stylesheet( array( 'styles' ) ) );
 	}
@@ -431,6 +432,7 @@ class Tests_Theme_wpThemeJson extends WP_UnitTestCase {
 	/**
 	 * @ticket 53175
 	 * @ticket 54336
+	 * @ticket 56611
 	 */
 	public function test_get_stylesheet() {
 		$theme_json = new WP_Theme_JSON(
@@ -438,13 +440,27 @@ class Tests_Theme_wpThemeJson extends WP_UnitTestCase {
 				'version'  => WP_Theme_JSON::LATEST_SCHEMA,
 				'settings' => array(
 					'color'      => array(
-						'text'    => 'value',
-						'palette' => array(
+						'text'      => 'value',
+						'palette'   => array(
 							array(
 								'slug'  => 'grey',
 								'color' => 'grey',
 							),
 						),
+						'gradients' => array(
+							array(
+								'gradient' => 'linear-gradient(135deg,rgba(0,0,0) 0%,rgb(0,0,0) 100%)',
+								'name'     => 'Custom gradient',
+								'slug'     => 'custom-gradient',
+							),
+						),
+						'duotone'   => array(
+							array(
+								'colors' => array( '#333333', '#aaaaaa' ),
+								'name'   => 'Custom Duotone',
+								'slug'   => 'custom-duotone',
+							),
+						),
 					),
 					'typography' => array(
 						'fontFamilies' => array(
@@ -478,15 +494,21 @@ class Tests_Theme_wpThemeJson extends WP_UnitTestCase {
 					),
 					'misc'     => 'value',
 					'elements' => array(
-						'link' => array(
+						'link'   => array(
 							'color' => array(
 								'text'       => '#111',
 								'background' => '#333',
 							),
 						),
+						'button' => array(
+							'shadow' => '10px 10px 5px 0px rgba(0,0,0,0.66)',
+						),
 					),
 					'blocks'   => array(
 						'core/group'     => array(
+							'color'    => array(
+								'gradient' => 'var:preset|gradient|custom-gradient',
+							),
 							'border'   => array(
 								'radius' => '10px',
 							),
@@ -542,6 +564,9 @@ class Tests_Theme_wpThemeJson extends WP_UnitTestCase {
 									'bottom' => '30px',
 								),
 							),
+							'filter'  => array(
+								'duotone' => 'var:preset|duotone|custom-duotone',
+							),
 						),
 					),
 					'spacing'  => array(
@@ -552,9 +577,9 @@ class Tests_Theme_wpThemeJson extends WP_UnitTestCase {
 			)
 		);
 
-		$variables = 'body{--wp--preset--color--grey: grey;--wp--preset--font-family--small: 14px;--wp--preset--font-family--big: 41px;}.wp-block-group{--wp--custom--base-font: 16;--wp--custom--line-height--small: 1.2;--wp--custom--line-height--medium: 1.4;--wp--custom--line-height--large: 1.8;}';
-		$styles    = 'body { margin: 0; }.wp-site-blocks > .alignleft { float: left; margin-right: 2em; }.wp-site-blocks > .alignright { float: right; margin-left: 2em; }.wp-site-blocks > .aligncenter { justify-content: center; margin-left: auto; margin-right: auto; }body{color: var(--wp--preset--color--grey);}a:where(:not(.wp-element-button)){background-color: #333;color: #111;}.wp-block-group{border-radius: 10px;padding: 24px;}.wp-block-group a:where(:not(.wp-element-button)){color: #111;}h1,h2,h3,h4,h5,h6{color: #123456;}h1 a:where(:not(.wp-element-button)),h2 a:where(:not(.wp-element-button)),h3 a:where(:not(.wp-element-button)),h4 a:where(:not(.wp-element-button)),h5 a:where(:not(.wp-element-button)),h6 a:where(:not(.wp-element-button)){background-color: #333;color: #111;font-size: 60px;}.wp-block-post-date{color: #123456;}.wp-block-post-date a:where(:not(.wp-element-button)){background-color: #777;color: #555;}.wp-block-image{border-top-left-radius: 10px;border-bottom-right-radius: 1em;margin-bottom: 30px;}';
-		$presets   = '.has-grey-color{color: var(--wp--preset--color--grey) !important;}.has-grey-background-color{background-color: var(--wp--preset--color--grey) !important;}.has-grey-border-color{border-color: var(--wp--preset--color--grey) !important;}.has-small-font-family{font-family: var(--wp--preset--font-family--small) !important;}.has-big-font-family{font-family: var(--wp--preset--font-family--big) !important;}';
+		$variables = "body{--wp--preset--color--grey: grey;--wp--preset--gradient--custom-gradient: linear-gradient(135deg,rgba(0,0,0) 0%,rgb(0,0,0) 100%);--wp--preset--duotone--custom-duotone: url('#wp-duotone-custom-duotone');--wp--preset--font-family--small: 14px;--wp--preset--font-family--big: 41px;}.wp-block-group{--wp--custom--base-font: 16;--wp--custom--line-height--small: 1.2;--wp--custom--line-height--medium: 1.4;--wp--custom--line-height--large: 1.8;}";
+		$styles    = 'body { margin: 0; }.wp-site-blocks > .alignleft { float: left; margin-right: 2em; }.wp-site-blocks > .alignright { float: right; margin-left: 2em; }.wp-site-blocks > .aligncenter { justify-content: center; margin-left: auto; margin-right: auto; }body{color: var(--wp--preset--color--grey);}a:where(:not(.wp-element-button)){background-color: #333;color: #111;}.wp-element-button, .wp-block-button__link{box-shadow: 10px 10px 5px 0px rgba(0,0,0,0.66);}.wp-block-group{background: var(--wp--preset--gradient--custom-gradient);border-radius: 10px;padding: 24px;}.wp-block-group a:where(:not(.wp-element-button)){color: #111;}h1,h2,h3,h4,h5,h6{color: #123456;}h1 a:where(:not(.wp-element-button)),h2 a:where(:not(.wp-element-button)),h3 a:where(:not(.wp-element-button)),h4 a:where(:not(.wp-element-button)),h5 a:where(:not(.wp-element-button)),h6 a:where(:not(.wp-element-button)){background-color: #333;color: #111;font-size: 60px;}.wp-block-post-date{color: #123456;}.wp-block-post-date a:where(:not(.wp-element-button)){background-color: #777;color: #555;}.wp-block-image{margin-bottom: 30px;}.wp-block-image img, .wp-block-image .components-placeholder{filter: var(--wp--preset--duotone--custom-duotone);}.wp-block-image img, .wp-block-image .wp-block-image__crop-area{border-top-left-radius: 10px;border-bottom-right-radius: 1em;}';
+		$presets   = '.has-grey-color{color: var(--wp--preset--color--grey) !important;}.has-grey-background-color{background-color: var(--wp--preset--color--grey) !important;}.has-grey-border-color{border-color: var(--wp--preset--color--grey) !important;}.has-custom-gradient-gradient-background{background: var(--wp--preset--gradient--custom-gradient) !important;}.has-small-font-family{font-family: var(--wp--preset--font-family--small) !important;}.has-big-font-family{font-family: var(--wp--preset--font-family--big) !important;}';
 		$all       = $variables . $styles . $presets;
 		$this->assertSame( $all, $theme_json->get_stylesheet() );
 		$this->assertSame( $styles, $theme_json->get_stylesheet( array( 'styles' ) ) );
@@ -2710,7 +2735,7 @@ class Tests_Theme_wpThemeJson extends WP_UnitTestCase {
 	/**
 	 * @ticket 55505
 	 */
-	function test_export_data() {
+	public function test_export_data() {
 		$theme = new WP_Theme_JSON(
 			array(
 				'version'  => 2,
@@ -2788,7 +2813,7 @@ class Tests_Theme_wpThemeJson extends WP_UnitTestCase {
 	/**
 	 * @ticket 55505
 	 */
-	function test_export_data_deals_with_empty_user_data() {
+	public function test_export_data_deals_with_empty_user_data() {
 		$theme = new WP_Theme_JSON(
 			array(
 				'version'  => 2,
@@ -2838,7 +2863,7 @@ class Tests_Theme_wpThemeJson extends WP_UnitTestCase {
 	/**
 	 * @ticket 55505
 	 */
-	function test_export_data_deals_with_empty_theme_data() {
+	public function test_export_data_deals_with_empty_theme_data() {
 		$user = new WP_Theme_JSON(
 			array(
 				'version'  => 2,
@@ -2889,7 +2914,7 @@ class Tests_Theme_wpThemeJson extends WP_UnitTestCase {
 	/**
 	 * @ticket 55505
 	 */
-	function test_export_data_deals_with_empty_data() {
+	public function test_export_data_deals_with_empty_data() {
 		$theme_v2    = new WP_Theme_JSON(
 			array(
 				'version' => 2,
@@ -2914,7 +2939,7 @@ class Tests_Theme_wpThemeJson extends WP_UnitTestCase {
 	/**
 	 * @ticket 55505
 	 */
-	function test_export_data_sets_appearance_tools() {
+	public function test_export_data_sets_appearance_tools() {
 		$theme = new WP_Theme_JSON(
 			array(
 				'version'  => 2,
@@ -2945,6 +2970,41 @@ class Tests_Theme_wpThemeJson extends WP_UnitTestCase {
 		$this->assertEqualSetsWithIndex( $expected, $actual );
 	}
 
+	/**
+	 * @ticket 56611
+	 */
+	public function test_export_data_sets_use_root_padding_aware_alignments() {
+		$theme = new WP_Theme_JSON(
+			array(
+				'version'  => 2,
+				'settings' => array(
+					'useRootPaddingAwareAlignments' => true,
+					'blocks'                        => array(
+						'core/paragraph' => array(
+							'useRootPaddingAwareAlignments' => true,
+						),
+					),
+				),
+			)
+		);
+
+		$actual   = $theme->get_data();
+		$expected = array(
+			'version'  => 2,
+			'settings' => array(
+				'useRootPaddingAwareAlignments' => true,
+				'blocks'                        => array(
+					'core/paragraph' => array(
+						'useRootPaddingAwareAlignments' => true,
+					),
+				),
+			),
+		);
+
+		$this->assertEqualSetsWithIndex( $expected, $actual );
+	}
+
+
 	/**
 	 * @ticket 56467
 	 */
@@ -2966,7 +3026,7 @@ class Tests_Theme_wpThemeJson extends WP_UnitTestCase {
 	}
 
 	/**
-	 * Testing that dynamic properties in theme.json return the value they refrence,
+	 * Testing that dynamic properties in theme.json return the value they reference,
 	 * e.g. array( 'ref' => 'styles.color.background' ) => "#ffffff".
 	 *
 	 * @ticket 56467
@@ -2996,6 +3056,54 @@ class Tests_Theme_wpThemeJson extends WP_UnitTestCase {
 		$this->assertSame( $expected, $theme_json->get_stylesheet() );
 	}
 
+	/**
+	 * Tests that get_property_value() static method returns an empty string
+	 * if the path is invalid or the value is null.
+	 *
+	 * Also, tests that PHP 8.1 "passing null to non-nullable" deprecation notice
+	 * is not thrown when passing the value to strncmp() in the method.
+	 *
+	 * The notice that we should not see:
+	 * `Deprecated: strncmp(): Passing null to parameter #1 ($string1) of type string is deprecated`.
+	 *
+	 * @dataProvider data_get_property_value_should_return_string_for_invalid_paths_or_null_values
+	 *
+	 * @ticket 56620
+	 *
+	 * @covers WP_Theme_JSON::get_property_value
+	 *
+	 * @param array $styles An array with style definitions.
+	 * @param array $path   Path to the desired properties.
+	 *
+	 */
+	public function test_get_property_value_should_return_string_for_invalid_paths_or_null_values( $styles, $path ) {
+		$reflection_class = new ReflectionClass( WP_Theme_JSON::class );
+
+		$get_property_value_method = $reflection_class->getMethod( 'get_property_value' );
+		$get_property_value_method->setAccessible( true );
+		$result = $get_property_value_method->invoke( null, $styles, $path );
+
+		$this->assertSame( '', $result );
+	}
+
+	/**
+	 * Data provider for test_get_property_value_should_return_string_for_invalid_paths_or_null_values().
+	 *
+	 * @return array
+	 */
+	public function data_get_property_value_should_return_string_for_invalid_paths_or_null_values() {
+		return array(
+			'empty string' => array(
+				'styles' => array(),
+				'path'   => array( 'non_existent_path' ),
+			),
+			'null'         => array(
+				'styles' => array( 'some_null_value' => null ),
+				'path'   => array( 'some_null_value' ),
+			),
+		);
+	}
+
 	/**
 	 * Testing that dynamic properties in theme.json that refer to other dynamic properties in a loop
 	 * should be left untouched.
@@ -3084,7 +3192,6 @@ class Tests_Theme_wpThemeJson extends WP_UnitTestCase {
 		$this->assertSame( $expected, $theme_json->get_stylesheet() );
 	}
 
-
 	/**
 	 * @dataProvider data_get_layout_definitions
 	 *
@@ -3305,7 +3412,7 @@ class Tests_Theme_wpThemeJson extends WP_UnitTestCase {
 			'default'
 		);
 
-		$this->assertEquals(
+		$this->assertSame(
 			'body { margin: 0; }.wp-site-blocks > .alignleft { float: left; margin-right: 2em; }.wp-site-blocks > .alignright { float: right; margin-left: 2em; }.wp-site-blocks > .aligncenter { justify-content: center; margin-left: auto; margin-right: auto; }.wp-site-blocks > * { margin-block-start: 0; margin-block-end: 0; }.wp-site-blocks > * + * { margin-block-start: 1rem; }body { --wp--style--block-gap: 1rem; }body .is-layout-flow > *{margin-block-start: 0;margin-block-end: 0;}body .is-layout-flow > * + *{margin-block-start: 1rem;margin-block-end: 0;}body .is-layout-flex{gap: 1rem;}body .is-layout-flow > .alignleft{float: left;margin-inline-start: 0;margin-inline-end: 2em;}body .is-layout-flow > .alignright{float: right;margin-inline-start: 2em;margin-inline-end: 0;}body .is-layout-flow > .aligncenter{margin-left: auto !important;margin-right: auto !important;}body .is-layout-flex{display: flex;}body .is-layout-flex{flex-wrap: wrap;align-items: center;}.wp-block-post-content{color: gray;}.wp-block-social-links.is-layout-flow > *{margin-block-start: 0;margin-block-end: 0;}.wp-block-social-links.is-layout-flow > * + *{margin-block-start: 0;margin-block-end: 0;}.wp-block-social-links.is-layout-flex{gap: 0;}.wp-block-buttons.is-layout-flow > *{margin-block-start: 0;margin-block-end: 0;}.wp-block-buttons.is-layout-flow > * + *{margin-block-start: 0;margin-block-end: 0;}.wp-block-buttons.is-layout-flex{gap: 0;}',
 			$theme_json->get_stylesheet()
 		);
@@ -3399,7 +3506,7 @@ class Tests_Theme_wpThemeJson extends WP_UnitTestCase {
 	/**
 	 * @ticket 56467
 	 */
-	function test_get_styles_for_block_with_padding_aware_alignments() {
+	public function test_get_styles_for_block_with_padding_aware_alignments() {
 		$theme_json = new WP_Theme_JSON(
 			array(
 				'version'  => 2,
@@ -3420,9 +3527,7 @@ class Tests_Theme_wpThemeJson extends WP_UnitTestCase {
 		);
 
 		$metadata = array(
-			'path'     => array(
-				'0' => 'styles',
-			),
+			'path'     => array( 'styles' ),
 			'selector' => 'body',
 		);
 
@@ -3435,7 +3540,7 @@ class Tests_Theme_wpThemeJson extends WP_UnitTestCase {
 	/**
 	 * @ticket 56467
 	 */
-	function test_get_styles_for_block_without_padding_aware_alignments() {
+	public function test_get_styles_for_block_without_padding_aware_alignments() {
 		$theme_json = new WP_Theme_JSON(
 			array(
 				'version' => 2,
@@ -3453,9 +3558,7 @@ class Tests_Theme_wpThemeJson extends WP_UnitTestCase {
 		);
 
 		$metadata = array(
-			'path'     => array(
-				'0' => 'styles',
-			),
+			'path'     => array( 'styles' ),
 			'selector' => 'body',
 		);
 
@@ -3468,7 +3571,7 @@ class Tests_Theme_wpThemeJson extends WP_UnitTestCase {
 	/**
 	 * @ticket 56467
 	 */
-	function test_get_styles_for_block_with_content_width() {
+	public function test_get_styles_for_block_with_content_width() {
 		$theme_json = new WP_Theme_JSON(
 			array(
 				'version'  => 2,
@@ -3482,9 +3585,7 @@ class Tests_Theme_wpThemeJson extends WP_UnitTestCase {
 		);
 
 		$metadata = array(
-			'path'     => array(
-				'0' => 'settings',
-			),
+			'path'     => array( 'settings' ),
 			'selector' => 'body',
 		);
 
@@ -3493,4 +3594,538 @@ class Tests_Theme_wpThemeJson extends WP_UnitTestCase {
 		$style_rules = $theme_json->get_styles_for_block( $metadata );
 		$this->assertSame( $expected, $root_rules . $style_rules );
 	}
+
+	/**
+	 * @ticket 56611
+	 */
+	public function test_get_styles_with_appearance_tools() {
+		$theme_json = new WP_Theme_JSON(
+			array(
+				'version'  => 2,
+				'settings' => array(
+					'appearanceTools' => true,
+				),
+			)
+		);
+
+		$metadata = array(
+			'path'     => array( 'settings' ),
+			'selector' => 'body',
+		);
+
+		$expected   = 'body { margin: 0; }.wp-site-blocks > .alignleft { float: left; margin-right: 2em; }.wp-site-blocks > .alignright { float: right; margin-left: 2em; }.wp-site-blocks > .aligncenter { justify-content: center; margin-left: auto; margin-right: auto; }.wp-site-blocks > * { margin-block-start: 0; margin-block-end: 0; }.wp-site-blocks > * + * { margin-block-start: ; }body { --wp--style--block-gap: ; }';
+		$root_rules = $theme_json->get_root_layout_rules( WP_Theme_JSON::ROOT_BLOCK_SELECTOR, $metadata );
+		$this->assertSame( $expected, $root_rules );
+	}
+
+	/**
+	 * Tests generating the spacing presets array based on the spacing scale provided.
+	 *
+	 * @ticket 56467
+	 *
+	 * @dataProvider data_generate_spacing_scale_fixtures
+	 *
+	 * @param array $spacing_scale   Example spacing scale definitions from the data provider.
+	 * @param array $expected_output Expected output from data provider.
+	 */
+	public function test_should_set_spacing_sizes( $spacing_scale, $expected_output ) {
+		$theme_json = new WP_Theme_JSON(
+			array(
+				'version'  => 2,
+				'settings' => array(
+					'spacing' => array(
+						'spacingScale' => $spacing_scale,
+					),
+				),
+			)
+		);
+
+		$theme_json->set_spacing_sizes();
+		$this->assertSame( $expected_output, _wp_array_get( $theme_json->get_raw_data(), array( 'settings', 'spacing', 'spacingSizes', 'default' ) ) );
+	}
+
+	/**
+	 * Data provider for spacing scale tests.
+	 *
+	 * @ticket 56467
+	 *
+	 * @return array
+	 */
+	public function data_generate_spacing_scale_fixtures() {
+		return array(
+			'only one value when single step in spacing scale' => array(
+				'spacing_scale'   => array(
+					'operator'   => '+',
+					'increment'  => 1.5,
+					'steps'      => 1,
+					'mediumStep' => 4,
+					'unit'       => 'rem',
+				),
+				'expected_output' => array(
+					array(
+						'name' => '1',
+						'slug' => '50',
+						'size' => '4rem',
+					),
+				),
+			),
+			'one step above medium when two steps in spacing scale' => array(
+				'spacing_scale'   => array(
+					'operator'   => '+',
+					'increment'  => 1.5,
+					'steps'      => 2,
+					'mediumStep' => 4,
+					'unit'       => 'rem',
+				),
+				'expected_output' => array(
+					array(
+						'name' => '1',
+						'slug' => '50',
+						'size' => '4rem',
+					),
+					array(
+						'name' => '2',
+						'slug' => '60',
+						'size' => '5.5rem',
+					),
+				),
+			),
+			'one step above medium and one below when three steps in spacing scale' => array(
+				'spacing_scale'   => array(
+					'operator'   => '+',
+					'increment'  => 1.5,
+					'steps'      => 3,
+					'mediumStep' => 4,
+					'unit'       => 'rem',
+				),
+				'expected_output' => array(
+					array(
+						'name' => '1',
+						'slug' => '40',
+						'size' => '2.5rem',
+					),
+					array(
+						'name' => '2',
+						'slug' => '50',
+						'size' => '4rem',
+					),
+					array(
+						'name' => '3',
+						'slug' => '60',
+						'size' => '5.5rem',
+					),
+				),
+			),
+			'extra step added above medium when an even number of steps > 2 specified' => array(
+				'spacing_scale'   => array(
+					'operator'   => '+',
+					'increment'  => 1.5,
+					'steps'      => 4,
+					'mediumStep' => 4,
+					'unit'       => 'rem',
+				),
+				'expected_output' => array(
+					array(
+						'name' => '1',
+						'slug' => '40',
+						'size' => '2.5rem',
+					),
+					array(
+						'name' => '2',
+						'slug' => '50',
+						'size' => '4rem',
+					),
+					array(
+						'name' => '3',
+						'slug' => '60',
+						'size' => '5.5rem',
+					),
+					array(
+						'name' => '4',
+						'slug' => '70',
+						'size' => '7rem',
+					),
+				),
+			),
+			'extra steps above medium if bottom end will go below zero' => array(
+				'spacing_scale'   => array(
+					'operator'   => '+',
+					'increment'  => 2.5,
+					'steps'      => 5,
+					'mediumStep' => 5,
+					'unit'       => 'rem',
+				),
+				'expected_output' => array(
+					array(
+						'name' => '1',
+						'slug' => '40',
+						'size' => '2.5rem',
+					),
+					array(
+						'name' => '2',
+						'slug' => '50',
+						'size' => '5rem',
+					),
+					array(
+						'name' => '3',
+						'slug' => '60',
+						'size' => '7.5rem',
+					),
+					array(
+						'name' => '4',
+						'slug' => '70',
+						'size' => '10rem',
+					),
+					array(
+						'name' => '5',
+						'slug' => '80',
+						'size' => '12.5rem',
+					),
+				),
+			),
+			'multiplier correctly calculated above and below medium' => array(
+				'spacing_scale'   => array(
+					'operator'   => '*',
+					'increment'  => 1.5,
+					'steps'      => 5,
+					'mediumStep' => 1.5,
+					'unit'       => 'rem',
+				),
+				'expected_output' => array(
+					array(
+						'name' => '1',
+						'slug' => '30',
+						'size' => '0.67rem',
+					),
+					array(
+						'name' => '2',
+						'slug' => '40',
+						'size' => '1rem',
+					),
+					array(
+						'name' => '3',
+						'slug' => '50',
+						'size' => '1.5rem',
+					),
+					array(
+						'name' => '4',
+						'slug' => '60',
+						'size' => '2.25rem',
+					),
+					array(
+						'name' => '5',
+						'slug' => '70',
+						'size' => '3.38rem',
+					),
+				),
+			),
+			'increment < 1 combined showing * operator acting as divisor above and below medium' => array(
+				'spacing_scale'   => array(
+					'operator'   => '*',
+					'increment'  => 0.25,
+					'steps'      => 5,
+					'mediumStep' => 1.5,
+					'unit'       => 'rem',
+				),
+				'expected_output' => array(
+					array(
+						'name' => '1',
+						'slug' => '30',
+						'size' => '0.09rem',
+					),
+					array(
+						'name' => '2',
+						'slug' => '40',
+						'size' => '0.38rem',
+					),
+					array(
+						'name' => '3',
+						'slug' => '50',
+						'size' => '1.5rem',
+					),
+					array(
+						'name' => '4',
+						'slug' => '60',
+						'size' => '6rem',
+					),
+					array(
+						'name' => '5',
+						'slug' => '70',
+						'size' => '24rem',
+					),
+				),
+			),
+			't-shirt sizing used if more than 7 steps in scale' => array(
+				'spacing_scale'   => array(
+					'operator'   => '*',
+					'increment'  => 1.5,
+					'steps'      => 8,
+					'mediumStep' => 1.5,
+					'unit'       => 'rem',
+				),
+				'expected_output' => array(
+					array(
+						'name' => '2X-Small',
+						'slug' => '20',
+						'size' => '0.44rem',
+					),
+					array(
+						'name' => 'X-Small',
+						'slug' => '30',
+						'size' => '0.67rem',
+					),
+					array(
+						'name' => 'Small',
+						'slug' => '40',
+						'size' => '1rem',
+					),
+					array(
+						'name' => 'Medium',
+						'slug' => '50',
+						'size' => '1.5rem',
+					),
+					array(
+						'name' => 'Large',
+						'slug' => '60',
+						'size' => '2.25rem',
+					),
+					array(
+						'name' => 'X-Large',
+						'slug' => '70',
+						'size' => '3.38rem',
+					),
+					array(
+						'name' => '2X-Large',
+						'slug' => '80',
+						'size' => '5.06rem',
+					),
+					array(
+						'name' => '3X-Large',
+						'slug' => '90',
+						'size' => '7.59rem',
+					),
+				),
+			),
+		);
+	}
+
+	/**
+	 * Tests generating the spacing presets array based on the spacing scale provided.
+	 *
+	 * @ticket 56467
+	 *
+	 * @dataProvider data_set_spacing_sizes_when_invalid
+	 *
+	 * @param array $spacing_scale   Example spacing scale definitions from the data provider.
+	 * @param array $expected_output Expected output from data provider.
+	 */
+	public function test_set_spacing_sizes_should_detect_invalid_spacing_scale( $spacing_scale, $expected_output ) {
+		$this->expectNotice();
+		$this->expectNoticeMessage( 'Some of the theme.json settings.spacing.spacingScale values are invalid' );
+
+		$theme_json = new WP_Theme_JSON(
+			array(
+				'version'  => 2,
+				'settings' => array(
+					'spacing' => array(
+						'spacingScale' => $spacing_scale,
+					),
+				),
+			)
+		);
+
+		$theme_json->set_spacing_sizes();
+		$this->assertSame( $expected_output, _wp_array_get( $theme_json->get_raw_data(), array( 'settings', 'spacing', 'spacingSizes', 'default' ) ) );
+	}
+
+	/**
+	 * Data provider for spacing scale tests.
+	 *
+	 * @ticket 56467
+	 *
+	 * @return array
+	 */
+	public function data_set_spacing_sizes_when_invalid() {
+		return array(
+			'missing operator value'  => array(
+				'spacing_scale'   => array(
+					'operator'   => '',
+					'increment'  => 1.5,
+					'steps'      => 1,
+					'mediumStep' => 4,
+					'unit'       => 'rem',
+				),
+				'expected_output' => null,
+			),
+			'non numeric increment'   => array(
+				'spacing_scale'   => array(
+					'operator'   => '+',
+					'increment'  => 'add two to previous value',
+					'steps'      => 1,
+					'mediumStep' => 4,
+					'unit'       => 'rem',
+				),
+				'expected_output' => null,
+			),
+			'non numeric steps'       => array(
+				'spacing_scale'   => array(
+					'operator'   => '+',
+					'increment'  => 1.5,
+					'steps'      => 'spiral staircase preferred',
+					'mediumStep' => 4,
+					'unit'       => 'rem',
+				),
+				'expected_output' => null,
+			),
+			'non numeric medium step' => array(
+				'spacing_scale'   => array(
+					'operator'   => '+',
+					'increment'  => 1.5,
+					'steps'      => 5,
+					'mediumStep' => 'That which is just right',
+					'unit'       => 'rem',
+				),
+				'expected_output' => null,
+			),
+			'missing unit value'      => array(
+				'spacing_scale'   => array(
+					'operator'   => '+',
+					'increment'  => 1.5,
+					'steps'      => 5,
+					'mediumStep' => 4,
+				),
+				'expected_output' => null,
+			),
+		);
+	}
+
+	/**
+	 * Tests the core separator block outbut based on various provided settings.
+	 *
+	 * @ticket 56903
+	 *
+	 * @dataProvider data_update_separator_declarations
+	 *
+	 * @param array $separator_block_settings Example separator block settings from the data provider.
+	 * @param array $expected_output          Expected output from data provider.
+	 */
+	public function test_update_separator_declarations( $separator_block_settings, $expected_output ) {
+		// If only background is defined, test that includes border-color to the style so it is applied on the front end.
+		$theme_json = new WP_Theme_JSON(
+			array(
+				'version' => WP_Theme_JSON::LATEST_SCHEMA,
+				'styles'  => array(
+					'blocks' => array(
+						'core/separator' => $separator_block_settings,
+					),
+				),
+			),
+			'default'
+		);
+
+		$stylesheet = $theme_json->get_stylesheet( array( 'styles' ) );
+
+		$this->assertSame( $expected_output, $stylesheet );
+	}
+
+	/**
+	 * Data provider for separator declaration tests.
+	 *
+	 * @return array
+	 */
+	public function data_update_separator_declarations() {
+		return array(
+			// If only background is defined, test that includes border-color to the style so it is applied on the front end.
+			'only background'                      => array(
+				array(
+					'color' => array(
+						'background' => 'blue',
+					),
+				),
+				'expected_output' => 'body { margin: 0; }.wp-site-blocks > .alignleft { float: left; margin-right: 2em; }.wp-site-blocks > .alignright { float: right; margin-left: 2em; }.wp-site-blocks > .aligncenter { justify-content: center; margin-left: auto; margin-right: auto; }.wp-block-separator{background-color: blue;color: blue;}',
+			),
+			// If background and text are defined, do not include border-color, as text color is enough.
+			'background and text, no border-color' => array(
+				array(
+					'color' => array(
+						'background' => 'blue',
+						'text'       => 'red',
+					),
+				),
+				'expected_output' => 'body { margin: 0; }.wp-site-blocks > .alignleft { float: left; margin-right: 2em; }.wp-site-blocks > .alignright { float: right; margin-left: 2em; }.wp-site-blocks > .aligncenter { justify-content: center; margin-left: auto; margin-right: auto; }.wp-block-separator{background-color: blue;color: red;}',
+			),
+			// If only text is defined, do not include border-color, as by itself is enough.
+			'only text'                            => array(
+				array(
+					'color' => array(
+						'text' => 'red',
+					),
+				),
+				'expected_output' => 'body { margin: 0; }.wp-site-blocks > .alignleft { float: left; margin-right: 2em; }.wp-site-blocks > .alignright { float: right; margin-left: 2em; }.wp-site-blocks > .aligncenter { justify-content: center; margin-left: auto; margin-right: auto; }.wp-block-separator{color: red;}',
+			),
+			// If background, text, and border-color are defined, include everything, CSS specifity will decide which to apply.
+			'background, text, and border-color'   => array(
+				array(
+					'color'  => array(
+						'background' => 'blue',
+						'text'       => 'red',
+					),
+					'border' => array(
+						'color' => 'pink',
+					),
+				),
+				'expected_output' => 'body { margin: 0; }.wp-site-blocks > .alignleft { float: left; margin-right: 2em; }.wp-site-blocks > .alignright { float: right; margin-left: 2em; }.wp-site-blocks > .aligncenter { justify-content: center; margin-left: auto; margin-right: auto; }.wp-block-separator{background-color: blue;border-color: pink;color: red;}',
+			),
+			// If background and border color are defined, include everything, CSS specifity will decide which to apply.
+			'background, text, and border-color'   => array(
+				array(
+					'color'  => array(
+						'background' => 'blue',
+					),
+					'border' => array(
+						'color' => 'pink',
+					),
+				),
+				'expected_output' => 'body { margin: 0; }.wp-site-blocks > .alignleft { float: left; margin-right: 2em; }.wp-site-blocks > .alignright { float: right; margin-left: 2em; }.wp-site-blocks > .aligncenter { justify-content: center; margin-left: auto; margin-right: auto; }.wp-block-separator{background-color: blue;border-color: pink;}',
+			),
+		);
+	}
+
+	/**
+	 * @ticket 57354
+	 */
+	public function test_get_stylesheet_returns_outline_styles() {
+		$theme_json = new WP_Theme_JSON(
+			array(
+				'version' => WP_Theme_JSON::LATEST_SCHEMA,
+				'styles'  => array(
+					'elements' => array(
+						'button' => array(
+							'outline' => array(
+								'offset' => '3px',
+								'width'  => '3px',
+								'style'  => 'dashed',
+								'color'  => 'red',
+							),
+							':hover'  => array(
+								'outline' => array(
+									'offset' => '3px',
+									'width'  => '3px',
+									'style'  => 'solid',
+									'color'  => 'blue',
+								),
+							),
+						),
+					),
+				),
+			)
+		);
+
+		$base_styles = 'body { margin: 0; }.wp-site-blocks > .alignleft { float: left; margin-right: 2em; }.wp-site-blocks > .alignright { float: right; margin-left: 2em; }.wp-site-blocks > .aligncenter { justify-content: center; margin-left: auto; margin-right: auto; }';
+
+		$element_styles = '.wp-element-button, .wp-block-button__link{outline-color: red;outline-offset: 3px;outline-style: dashed;outline-width: 3px;}.wp-element-button:hover, .wp-block-button__link:hover{outline-color: blue;outline-offset: 3px;outline-style: solid;outline-width: 3px;}';
+
+		$expected = $base_styles . $element_styles;
+		$this->assertSame( $expected, $theme_json->get_stylesheet() );
+	}
 }
diff --git a/tests/theme/wpThemeJsonResolver.php b/tests/theme/wpThemeJsonResolver.php
index aa9c339e58..7db984e941 100644
--- a/tests/theme/wpThemeJsonResolver.php
+++ b/tests/theme/wpThemeJsonResolver.php
@@ -12,6 +12,13 @@
  */
 class Tests_Theme_wpThemeJsonResolver extends WP_UnitTestCase {
 
+	/**
+	 * Administrator ID.
+	 *
+	 * @var int
+	 */
+	protected static $administrator_id;
+
 	/**
 	 * Theme root directory.
 	 *
@@ -27,11 +34,57 @@ class Tests_Theme_wpThemeJsonResolver extends WP_UnitTestCase {
 	private $orig_theme_dir;
 
 	/**
-	 * Queries.
+	 * WP_Theme_JSON_Resolver::$blocks_cache property.
+	 *
+	 * @var ReflectionProperty
+	 */
+	private static $property_blocks_cache;
+
+	/**
+	 * Original value of the WP_Theme_JSON_Resolver::$blocks_cache property.
 	 *
 	 * @var array
 	 */
-	private $queries = array();
+	private static $property_blocks_cache_orig_value;
+
+	/**
+	 * WP_Theme_JSON_Resolver::$core property.
+	 *
+	 * @var ReflectionProperty
+	 */
+	private static $property_core;
+
+	/**
+	 * Original value of the WP_Theme_JSON_Resolver::$core property.
+	 *
+	 * @var WP_Theme_JSON
+	 */
+	private static $property_core_orig_value;
+
+	public static function set_up_before_class() {
+		parent::set_up_before_class();
+
+		self::$administrator_id = self::factory()->user->create(
+			array(
+				'role'       => 'administrator',
+				'user_email' => 'administrator@example.com',
+			)
+		);
+
+		static::$property_blocks_cache = new ReflectionProperty( WP_Theme_JSON_Resolver::class, 'blocks_cache' );
+		static::$property_blocks_cache->setAccessible( true );
+		static::$property_blocks_cache_orig_value = static::$property_blocks_cache->getValue();
+
+		static::$property_core = new ReflectionProperty( WP_Theme_JSON_Resolver::class, 'core' );
+		static::$property_core->setAccessible( true );
+		static::$property_core_orig_value = static::$property_core->getValue();
+	}
+
+	public static function tear_down_after_class() {
+		static::$property_blocks_cache->setValue( WP_Theme_JSON_Resolver::class, static::$property_blocks_cache_orig_value );
+		static::$property_core->setValue( WP_Theme_JSON_Resolver::class, static::$property_core_orig_value );
+		parent::tear_down_after_class();
+	}
 
 	public function set_up() {
 		parent::set_up();
@@ -45,7 +98,7 @@ class Tests_Theme_wpThemeJsonResolver extends WP_UnitTestCase {
 		add_filter( 'theme_root', array( $this, 'filter_set_theme_root' ) );
 		add_filter( 'stylesheet_root', array( $this, 'filter_set_theme_root' ) );
 		add_filter( 'template_root', array( $this, 'filter_set_theme_root' ) );
-		$this->queries = array();
+
 		// Clear caches.
 		wp_clean_themes_cache();
 		unset( $GLOBALS['wp_themes'] );
@@ -55,6 +108,9 @@ class Tests_Theme_wpThemeJsonResolver extends WP_UnitTestCase {
 		$GLOBALS['wp_theme_directories'] = $this->orig_theme_dir;
 		wp_clean_themes_cache();
 		unset( $GLOBALS['wp_themes'] );
+
+		// Reset data between tests.
+		wp_clean_theme_json_cache();
 		parent::tear_down();
 	}
 
@@ -66,16 +122,10 @@ class Tests_Theme_wpThemeJsonResolver extends WP_UnitTestCase {
 		return 'pl_PL';
 	}
 
-	function filter_db_query( $query ) {
-		if ( preg_match( '#post_type = \'wp_global_styles\'#', $query ) ) {
-			$this->queries[] = $query;
-		}
-		return $query;
-	}
-
 	/**
 	 * @ticket 52991
 	 * @ticket 54336
+	 * @ticket 56611
 	 */
 	public function test_translations_are_applied() {
 		add_filter( 'locale', array( $this, 'filter_set_locale_to_polish' ) );
@@ -118,6 +168,15 @@ class Tests_Theme_wpThemeJsonResolver extends WP_UnitTestCase {
 							),
 						),
 					),
+					'duotone'        => array(
+						'theme' => array(
+							array(
+								'colors' => array( '#333333', '#aaaaaa' ),
+								'slug'   => 'custom-duotone',
+								'name'   => 'Custom Duotone',
+							),
+						),
+					),
 				),
 				'typography' => array(
 					'customFontSize' => false,
@@ -133,8 +192,9 @@ class Tests_Theme_wpThemeJsonResolver extends WP_UnitTestCase {
 					),
 				),
 				'spacing'    => array(
-					'units'   => array( 'rem' ),
-					'padding' => true,
+					'units'    => array( 'rem' ),
+					'padding'  => true,
+					'blockGap' => true,
 				),
 				'blocks'     => array(
 					'core/paragraph' => array(
@@ -179,26 +239,205 @@ class Tests_Theme_wpThemeJsonResolver extends WP_UnitTestCase {
 		);
 	}
 
+	private function get_registered_block_names( $hard_reset = false ) {
+		static $expected_block_names;
+
+		if ( ! $hard_reset && ! empty( $expected_block_names ) ) {
+			return $expected_block_names;
+		}
+
+		$expected_block_names = array();
+		$resolver             = WP_Block_Type_Registry::get_instance();
+		$blocks               = $resolver->get_all_registered();
+		foreach ( array_keys( $blocks ) as $block_name ) {
+			$expected_block_names[ $block_name ] = true;
+		}
+
+		return $expected_block_names;
+	}
+
 	/**
-	 * @ticket 52991
+	 * Tests when WP_Theme_JSON_Resolver::$blocks_cache is empty or does not match
+	 * the all registered blocks.
+	 *
+	 * Though this is a non-public method, it is vital to other functionality.
+	 * Therefore, tests are provided to validate it functions as expected.
+	 *
+	 * @dataProvider data_has_same_registered_blocks_when_all_blocks_not_cached
+	 * @ticket 56467
+	 *
+	 * @param string $origin The origin to test.
 	 */
-	public function test_switching_themes_recalculates_data() {
-		// The "default" theme doesn't have theme.json support.
-		switch_theme( 'default' );
-		$default = WP_Theme_JSON_Resolver::theme_has_support();
+	public function test_has_same_registered_blocks_when_all_blocks_not_cached( $origin, array $cache = array() ) {
+		$has_same_registered_blocks = new ReflectionMethod( WP_Theme_JSON_Resolver::class, 'has_same_registered_blocks' );
+		$has_same_registered_blocks->setAccessible( true );
+		$expected_cache = $this->get_registered_block_names();
+
+		// Set up the blocks cache for the origin.
+		$blocks_cache            = static::$property_blocks_cache->getValue();
+		$blocks_cache[ $origin ] = $cache;
+		static::$property_blocks_cache->setValue( null, $blocks_cache );
+
+		$this->assertFalse( $has_same_registered_blocks->invoke( null, $origin ), 'WP_Theme_JSON_Resolver::has_same_registered_blocks() should return false when same blocks are not cached' );
+		$blocks_cache = static::$property_blocks_cache->getValue();
+		$this->assertSameSets( $expected_cache, $blocks_cache[ $origin ], 'WP_Theme_JSON_Resolver::$blocks_cache should contain all expected block names for the given origin' );
+	}
 
-		// Switch to a theme that does have support.
-		switch_theme( 'block-theme' );
-		$has_theme_json_support = WP_Theme_JSON_Resolver::theme_has_support();
+	/**
+	 * Data provider.
+	 *
+	 * @return array
+	 */
+	public function data_has_same_registered_blocks_when_all_blocks_not_cached() {
+		return array(
+			'origin: core; cache: empty'       => array(
+				'origin' => 'core',
+			),
+			'origin: blocks; cache: empty'     => array(
+				'origin' => 'blocks',
+			),
+			'origin: theme; cache: empty'      => array(
+				'origin' => 'theme',
+			),
+			'origin: user; cache: empty'       => array(
+				'origin' => 'user',
+			),
+			'origin: core; cache: not empty'   => array(
+				'origin' => 'core',
+				'cache'  => array(
+					'core/block' => true,
+				),
+			),
+			'origin: blocks; cache: not empty' => array(
+				'origin' => 'blocks',
+				'cache'  => array(
+					'core/block'    => true,
+					'core/comments' => true,
+				),
+			),
+			'origin: theme; cache: not empty'  => array(
+				'origin' => 'theme',
+				'cache'  => array(
+					'core/cover' => true,
+				),
+			),
+			'origin: user; cache: not empty'   => array(
+				'origin' => 'user',
+				'cache'  => array(
+					'core/gallery' => true,
+				),
+			),
+		);
+	}
 
-		$this->assertFalse( $default );
-		$this->assertTrue( $has_theme_json_support );
+	/**
+	 * Tests when WP_Theme_JSON_Resolver::$blocks_cache is empty or does not match
+	 * the all registered blocks.
+	 *
+	 * Though this is a non-public method, it is vital to other functionality.
+	 * Therefore, tests are provided to validate it functions as expected.
+	 *
+	 * @dataProvider data_has_same_registered_blocks_when_all_blocks_are_cached
+	 * @ticket 56467
+	 *
+	 * @param string $origin The origin to test.
+	 */
+	public function test_has_same_registered_blocks_when_all_blocks_are_cached( $origin ) {
+		$has_same_registered_blocks = new ReflectionMethod( WP_Theme_JSON_Resolver::class, 'has_same_registered_blocks' );
+		$has_same_registered_blocks->setAccessible( true );
+		$expected_cache = $this->get_registered_block_names();
+
+		// Set up the cache with all registered blocks.
+		$blocks_cache            = static::$property_blocks_cache->getValue();
+		$blocks_cache[ $origin ] = $this->get_registered_block_names();
+		static::$property_blocks_cache->setValue( null, $blocks_cache );
+
+		$this->assertTrue( $has_same_registered_blocks->invoke( null, $origin ), 'WP_Theme_JSON_Resolver::has_same_registered_blocks() should return true when using the cache' );
+		$this->assertSameSets( $expected_cache, $blocks_cache[ $origin ], 'WP_Theme_JSON_Resolver::$blocks_cache should contain all expected block names for the given origin' );
+	}
+
+	/**
+	 * Data provider.
+	 *
+	 * @return array
+	 */
+	public function data_has_same_registered_blocks_when_all_blocks_are_cached() {
+		return array(
+			'core'   => array( 'core' ),
+			'blocks' => array( 'blocks' ),
+			'theme'  => array( 'theme' ),
+			'user'   => array( 'user' ),
+		);
+	}
+
+	/**
+	 * @dataProvider data_get_core_data
+	 * @covers WP_Theme_JSON_Resolver::get_core_data
+	 * @ticket 56467
+	 */
+	public function test_get_core_data( $should_fire_filter, $core_is_cached, $blocks_are_cached ) {
+		wp_clean_theme_json_cache();
+
+		// If should cache core, then fire the method to cache it before running the tests.
+		if ( $core_is_cached ) {
+			WP_Theme_JSON_Resolver::get_core_data();
+		}
+
+		// If should cache registered blocks, then set them up before running the tests.
+		if ( $blocks_are_cached ) {
+			$blocks_cache         = static::$property_blocks_cache->getValue();
+			$blocks_cache['core'] = $this->get_registered_block_names();
+			static::$property_blocks_cache->setValue( null, $blocks_cache );
+		}
+
+		$expected_filter_count = did_filter( 'wp_theme_json_data_default' );
+		$actual                = WP_Theme_JSON_Resolver::get_core_data();
+		if ( $should_fire_filter ) {
+			$expected_filter_count++;
+		}
+
+		$this->assertSame( $expected_filter_count, did_filter( 'wp_theme_json_data_default' ), 'The filter "wp_theme_json_data_default" should fire the given number of times' );
+		$this->assertInstanceOf( WP_Theme_JSON::class, $actual, 'WP_Theme_JSON_Resolver::get_core_data() should return instance of WP_Theme_JSON' );
+		$this->assertSame( static::$property_core->getValue(), $actual, 'WP_Theme_JSON_Resolver::$core property should be the same object as returned from WP_Theme_JSON_Resolver::get_core_data()' );
+	}
+
+	/**
+	 * Data provider.
+	 *
+	 * @return array
+	 */
+	public function data_get_core_data() {
+		return array(
+			'When both caches are empty'     => array(
+				'should_fire_filter' => true,
+				'core_is_cached'     => false,
+				'blocks_are_cached'  => false,
+			),
+			'When the blocks_cache is not empty and matches' => array(
+				'should_fire_filter' => true,
+				'core_is_cached'     => false,
+				'blocks_are_cached'  => true,
+			),
+			'When blocks_cache is empty but core cache is not' => array(
+				'should_fire_filter' => true,
+				'core_is_cached'     => true,
+				'blocks_are_cached'  => false,
+			),
+			'When both caches are not empty' => array(
+				'should_fire_filter' => true,
+				'core_is_cached'     => true,
+				'blocks_are_cached'  => false,
+			),
+		);
 	}
 
 	/**
 	 * @ticket 54336
+	 * @ticket 56467
+	 *
+	 * @covers ::add_theme_support
 	 */
-	function test_add_theme_supports_are_loaded_for_themes_without_theme_json() {
+	public function test_add_theme_supports_are_loaded_for_themes_without_theme_json() {
 		switch_theme( 'default' );
 		$color_palette = array(
 			array(
@@ -219,15 +458,18 @@ class Tests_Theme_wpThemeJsonResolver extends WP_UnitTestCase {
 		);
 		add_theme_support( 'editor-color-palette', $color_palette );
 		add_theme_support( 'custom-line-height' );
+		add_theme_support( 'appearance-tools' );
 
 		$settings = WP_Theme_JSON_Resolver::get_theme_data()->get_settings();
 
 		remove_theme_support( 'custom-line-height' );
 		remove_theme_support( 'editor-color-palette' );
+		remove_theme_support( 'appearance-tools' );
 
-		$this->assertFalse( WP_Theme_JSON_Resolver::theme_has_support() );
+		$this->assertFalse( wp_theme_has_theme_json() );
 		$this->assertTrue( $settings['typography']['lineHeight'] );
 		$this->assertSame( $color_palette, $settings['color']['palette']['theme'] );
+		$this->assertTrue( $settings['border']['color'], 'Support for appearance-tools was not added.' );
 	}
 
 	/**
@@ -244,8 +486,9 @@ class Tests_Theme_wpThemeJsonResolver extends WP_UnitTestCase {
 
 	/**
 	 * @ticket 54336
+	 * @ticket 56611
 	 */
-	function test_merges_child_theme_json_into_parent_theme_json() {
+	public function test_merges_child_theme_json_into_parent_theme_json() {
 		switch_theme( 'block-theme-child' );
 
 		$actual_settings   = WP_Theme_JSON_Resolver::get_theme_data()->get_settings();
@@ -253,6 +496,15 @@ class Tests_Theme_wpThemeJsonResolver extends WP_UnitTestCase {
 			'color'      => array(
 				'custom'         => false,
 				'customGradient' => false,
+				'duotone'        => array(
+					'theme' => array(
+						array(
+							'colors' => array( '#333333', '#aaaaaa' ),
+							'name'   => 'Custom Duotone',
+							'slug'   => 'custom-duotone',
+						),
+					),
+				),
 				'gradients'      => array(
 					'theme' => array(
 						array(
@@ -297,8 +549,9 @@ class Tests_Theme_wpThemeJsonResolver extends WP_UnitTestCase {
 				),
 			),
 			'spacing'    => array(
-				'units'   => array( 'rem' ),
-				'padding' => true,
+				'blockGap' => true,
+				'units'    => array( 'rem' ),
+				'padding'  => true,
 			),
 			'blocks'     => array(
 				'core/paragraph'  => array(
@@ -356,40 +609,92 @@ class Tests_Theme_wpThemeJsonResolver extends WP_UnitTestCase {
 	/**
 	 * @covers WP_Theme_JSON_Resolver::get_user_data_from_wp_global_styles
 	 */
-	function test_get_user_data_from_wp_global_styles_does_not_use_uncached_queries() {
+	public function test_get_user_data_from_wp_global_styles_does_not_use_uncached_queries() {
+		// Switch to a theme that does have support.
+		switch_theme( 'block-theme' );
+		wp_set_current_user( self::$administrator_id );
 		$theme = wp_get_theme();
 		WP_Theme_JSON_Resolver::get_user_data_from_wp_global_styles( $theme );
-		add_filter( 'query', array( $this, 'filter_db_query' ) );
-		$query_count = count( $this->queries );
+		$global_styles_query_count = 0;
+		add_filter(
+			'query',
+			function( $query ) use ( &$global_styles_query_count ) {
+				if ( preg_match( '#post_type = \'wp_global_styles\'#', $query ) ) {
+					$global_styles_query_count++;
+				}
+				return $query;
+			}
+		);
 		for ( $i = 0; $i < 3; $i++ ) {
 			WP_Theme_JSON_Resolver::get_user_data_from_wp_global_styles( $theme );
-			WP_Theme_JSON_Resolver::clean_cached_data();
+			wp_clean_theme_json_cache();
 		}
-		$query_count = count( $this->queries ) - $query_count;
-		$this->assertEquals( 0, $query_count, 'Unexpected SQL queries detected for the wp_global_style post type' );
+		$this->assertSame( 0, $global_styles_query_count, 'Unexpected SQL queries detected for the wp_global_style post type prior to creation.' );
 
 		$user_cpt = WP_Theme_JSON_Resolver::get_user_data_from_wp_global_styles( $theme );
-		$this->assertEmpty( $user_cpt );
+		$this->assertEmpty( $user_cpt, 'User CPT is expected to be empty.' );
 
 		$user_cpt = WP_Theme_JSON_Resolver::get_user_data_from_wp_global_styles( $theme, true );
-		$this->assertNotEmpty( $user_cpt );
+		$this->assertNotEmpty( $user_cpt, 'User CPT is expected not to be empty.' );
 
-		$query_count = count( $this->queries );
-		for ( $i = 0; $i < 3; $i ++ ) {
+		$global_styles_query_count = 0;
+		for ( $i = 0; $i < 3; $i++ ) {
 			$new_user_cpt = WP_Theme_JSON_Resolver::get_user_data_from_wp_global_styles( $theme );
-			WP_Theme_JSON_Resolver::clean_cached_data();
-			$this->assertSameSets( $user_cpt, $new_user_cpt );
+			wp_clean_theme_json_cache();
+			$this->assertSameSets( $user_cpt, $new_user_cpt, "User CPTs do not match on run {$i}." );
+		}
+		$this->assertSame( 1, $global_styles_query_count, 'Unexpected SQL queries detected for the wp_global_style post type after creation.' );
+	}
+
+	/**
+	 * @covers WP_Theme_JSON_Resolver::get_user_data_from_wp_global_styles
+	 */
+	public function test_get_user_data_from_wp_global_styles_does_not_use_uncached_queries_for_logged_out_users() {
+		// Switch to a theme that does have support.
+		switch_theme( 'block-theme' );
+		$theme = wp_get_theme();
+		WP_Theme_JSON_Resolver::get_user_data_from_wp_global_styles( $theme );
+		$query_count = get_num_queries();
+		for ( $i = 0; $i < 3; $i++ ) {
+			WP_Theme_JSON_Resolver::get_user_data_from_wp_global_styles( $theme );
+			wp_clean_theme_json_cache();
 		}
-		$query_count = count( $this->queries ) - $query_count;
-		$this->assertEquals( 0, $query_count, 'Unexpected SQL queries detected for the wp_global_style post type' );
-		remove_filter( 'query', array( $this, 'filter_db_query' ) );
+		$query_count = get_num_queries() - $query_count;
+		$this->assertSame( 0, $query_count, 'Unexpected SQL queries detected for the wp_global_style post type prior to creation.' );
+
+		$user_cpt = WP_Theme_JSON_Resolver::get_user_data_from_wp_global_styles( $theme );
+		$this->assertEmpty( $user_cpt, 'User CPT is expected to be empty.' );
+	}
+
+	/**
+	 * @ticket 56945
+	 * @covers WP_Theme_JSON_Resolver::get_user_data_from_wp_global_styles
+	 */
+	public function test_get_user_data_from_wp_global_styles_does_not_run_for_theme_without_support() {
+		// The 'default' theme does not support theme.json.
+		switch_theme( 'default' );
+		wp_set_current_user( self::$administrator_id );
+		$theme = wp_get_theme();
+
+		$start_queries = get_num_queries();
+
+		// When theme.json is not supported, the method should not run a query and always return an empty result.
+		$user_cpt = WP_Theme_JSON_Resolver::get_user_data_from_wp_global_styles( $theme );
+		$this->assertEmpty( $user_cpt, 'User CPT is expected to be empty.' );
+		$this->assertSame( 0, get_num_queries() - $start_queries, 'Unexpected SQL query detected for theme without theme.json support.' );
+
+		$user_cpt = WP_Theme_JSON_Resolver::get_user_data_from_wp_global_styles( $theme, true );
+		$this->assertEmpty( $user_cpt, 'User CPT is expected to be empty.' );
+		$this->assertSame( 0, get_num_queries() - $start_queries, 'Unexpected SQL query detected for theme without theme.json support.' );
 	}
 
 	/**
 	 * @ticket 55392
 	 * @covers WP_Theme_JSON_Resolver::get_user_data_from_wp_global_styles
 	 */
-	function test_get_user_data_from_wp_global_styles_does_exist() {
+	public function test_get_user_data_from_wp_global_styles_does_exist() {
+		// Switch to a theme that does have support.
+		switch_theme( 'block-theme' );
 		$theme = wp_get_theme();
 		$post1 = WP_Theme_JSON_Resolver::get_user_data_from_wp_global_styles( $theme, true );
 		$this->assertIsArray( $post1 );
@@ -404,7 +709,9 @@ class Tests_Theme_wpThemeJsonResolver extends WP_UnitTestCase {
 	 * @ticket 55392
 	 * @covers WP_Theme_JSON_Resolver::get_user_data_from_wp_global_styles
 	 */
-	function test_get_user_data_from_wp_global_styles_create_post() {
+	public function test_get_user_data_from_wp_global_styles_create_post() {
+		// Switch to a theme that does have support.
+		switch_theme( 'block-theme' );
 		$theme = wp_get_theme( 'testing' );
 		$post1 = WP_Theme_JSON_Resolver::get_user_data_from_wp_global_styles( $theme );
 		$this->assertIsArray( $post1 );
@@ -421,7 +728,9 @@ class Tests_Theme_wpThemeJsonResolver extends WP_UnitTestCase {
 	 * @ticket 55392
 	 * @covers WP_Theme_JSON_Resolver::get_user_data_from_wp_global_styles
 	 */
-	function test_get_user_data_from_wp_global_styles_filter_state() {
+	public function test_get_user_data_from_wp_global_styles_filter_state() {
+		// Switch to a theme that does have support.
+		switch_theme( 'block-theme' );
 		$theme = wp_get_theme( 'foo' );
 		$post1 = WP_Theme_JSON_Resolver::get_user_data_from_wp_global_styles( $theme, true, array( 'publish' ) );
 		$this->assertIsArray( $post1 );
@@ -430,4 +739,52 @@ class Tests_Theme_wpThemeJsonResolver extends WP_UnitTestCase {
 		$this->assertIsArray( $post2 );
 		$this->assertSameSets( array(), $post2 );
 	}
+
+	/**
+	 * @ticket 56835
+	 * @covers WP_Theme_JSON_Resolver::get_theme_data
+	 */
+	public function test_get_theme_data_theme_supports_overrides_theme_json() {
+		// Test that get_theme_data() returns a WP_Theme_JSON object.
+		$theme_json_resolver = new WP_Theme_JSON_Resolver();
+		$theme_data          = $theme_json_resolver->get_theme_data();
+		$this->assertInstanceOf( 'WP_Theme_JSON', $theme_data, 'Theme data should be an instance of WP_Theme_JSON.' );
+
+		// Test that wp_theme_json_data_theme filter has been called.
+		$this->assertGreaterThan( 0, did_filter( 'wp_theme_json_data_default' ), 'The filter "wp_theme_json_data_default" should fire.' );
+
+		// Test that data from theme.json is backfilled from existing theme supports.
+		$previous_settings    = $theme_data->get_settings();
+		$previous_line_height = $previous_settings['typography']['lineHeight'];
+		$this->assertFalse( $previous_line_height, 'lineHeight setting from theme.json should be false.' );
+		add_theme_support( 'custom-line-height' );
+		$current_settings = $theme_json_resolver->get_theme_data()->get_settings();
+		$line_height      = $current_settings['typography']['lineHeight'];
+		$this->assertTrue( $line_height, 'lineHeight setting after add_theme_support() should be true.' );
+	}
+
+	/**
+	 * @ticket 56945
+	 * @covers WP_Theme_JSON_Resolver::get_theme_data
+	 */
+	public function test_get_theme_data_does_not_parse_theme_json_if_not_present() {
+		// The 'default' theme does not support theme.json.
+		switch_theme( 'default' );
+
+		$theme_json_resolver = new WP_Theme_JSON_Resolver();
+
+		// Force-unset $i18n_schema property to "unload" translation schema.
+		$property = new ReflectionProperty( $theme_json_resolver, 'i18n_schema' );
+		$property->setAccessible( true );
+		$property->setValue( null );
+
+		// A completely empty theme.json data set still has the 'version' key when parsed.
+		$empty_theme_json = array( 'version' => WP_Theme_JSON::LATEST_SCHEMA );
+
+		// Call using 'with_supports' set to false, so that the method only considers theme.json.
+		$theme_data = $theme_json_resolver->get_theme_data( array(), array( 'with_supports' => false ) );
+		$this->assertInstanceOf( 'WP_Theme_JSON', $theme_data, 'Theme data should be an instance of WP_Theme_JSON.' );
+		$this->assertSame( $empty_theme_json, $theme_data->get_raw_data(), 'Theme data should be empty without theme support.' );
+		$this->assertNull( $property->getValue(), 'Theme i18n schema should not have been loaded without theme support.' );
+	}
 }
diff --git a/tests/theme/wpThemeJsonSchema.php b/tests/theme/wpThemeJsonSchema.php
index 25cfcf7c97..e93ef0673a 100644
--- a/tests/theme/wpThemeJsonSchema.php
+++ b/tests/theme/wpThemeJsonSchema.php
@@ -19,7 +19,7 @@ class Tests_Theme_wpThemeJsonSchema extends WP_UnitTestCase {
 	/**
 	 * @ticket 54336
 	 */
-	function test_migrate_v1_to_v2() {
+	public function test_migrate_v1_to_v2() {
 		$theme_json_v1 = array(
 			'version'  => 1,
 			'settings' => array(
diff --git a/tests/user.php b/tests/user.php
index 4efb134c05..7157a00cfa 100644
--- a/tests/user.php
+++ b/tests/user.php
@@ -560,21 +560,21 @@ class Tests_User extends WP_UnitTestCase {
 
 		wp_set_current_user( self::$author_id );
 		$counts = count_many_users_posts( array( self::$author_id, $user_id_b ), 'post', false );
-		$this->assertEquals( 1, $counts[ self::$author_id ] );
-		$this->assertEquals( 1, $counts[ $user_id_b ] );
+		$this->assertSame( '1', $counts[ self::$author_id ] );
+		$this->assertSame( '1', $counts[ $user_id_b ] );
 
 		$counts = count_many_users_posts( array( self::$author_id, $user_id_b ), 'post', true );
-		$this->assertEquals( 1, $counts[ self::$author_id ] );
-		$this->assertEquals( 1, $counts[ $user_id_b ] );
+		$this->assertSame( '1', $counts[ self::$author_id ] );
+		$this->assertSame( '1', $counts[ $user_id_b ] );
 
 		wp_set_current_user( $user_id_b );
 		$counts = count_many_users_posts( array( self::$author_id, $user_id_b ), 'post', false );
-		$this->assertEquals( 1, $counts[ self::$author_id ] );
-		$this->assertEquals( 2, $counts[ $user_id_b ] );
+		$this->assertSame( '1', $counts[ self::$author_id ] );
+		$this->assertSame( '2', $counts[ $user_id_b ] );
 
 		$counts = count_many_users_posts( array( self::$author_id, $user_id_b ), 'post', true );
-		$this->assertEquals( 1, $counts[ self::$author_id ] );
-		$this->assertEquals( 1, $counts[ $user_id_b ] );
+		$this->assertSame( '1', $counts[ self::$author_id ] );
+		$this->assertSame( '1', $counts[ $user_id_b ] );
 	}
 
 	/**
diff --git a/tests/user/capabilities.php b/tests/user/capabilities.php
index 3e49adc39d..4583e0155b 100644
--- a/tests/user/capabilities.php
+++ b/tests/user/capabilities.php
@@ -998,461 +998,6 @@ class Tests_User_Capabilities extends WP_UnitTestCase {
 		$this->assertFalse( $wp_roles->is_role( $role_name ) );
 	}
 
-	/**
-	 * @dataProvider data_update_role_unhappy_paths
-	 *
-	 * @ticket 54572
-	 *
-	 * @covers WP_Roles::update_role
-	 * @covers ::update_role
-	 *
-	 * @param mixed $role         The role to update.
-	 * @param mixed $display_name The display name for the role.
-	 * @param mixed $capabilities The capabilities for the role.
-	 */
-	public function test_update_role_unhappy_paths( $role, $display_name, $capabilities ) {
-		global $wp_roles;
-
-		// Create role if it does not exist.
-		$role_name     = 'janitor';
-		$expected_caps = array(
-			'edit_posts' => true,
-			'edit_pages' => true,
-			'level_0'    => true,
-			'level_1'    => true,
-			'level_2'    => true,
-		);
-		add_role( $role_name, 'Janitor', $expected_caps );
-		$this->flush_roles();
-
-		$this->assertTrue(
-			$wp_roles->is_role( $role_name ),
-			"The $role_name role was not created"
-		);
-
-		$this->assertNotInstanceOf(
-			'WP_Role',
-			update_role( $role, $display_name, $capabilities ),
-			"The $role_name role was updated"
-		);
-
-		// Clean up.
-		remove_role( $role_name );
-		$this->flush_roles();
-		$this->assertFalse(
-			$wp_roles->is_role( $role_name ),
-			"The $role_name role was not removed"
-		);
-	}
-
-	/**
-	 * Data provider.
-	 *
-	 * @return array
-	 */
-	public function data_update_role_unhappy_paths() {
-		return array(
-			'true as the role'                       => array(
-				'role'         => true,
-				'display_name' => 'Janitor',
-				'capabilities' => array(
-					'level_1' => true,
-				),
-			),
-			'false as the role'                      => array(
-				'role'         => false,
-				'display_name' => 'Janitor',
-				'capabilities' => array(
-					'level_1' => true,
-				),
-			),
-			'null as the role'                       => array(
-				'role'         => null,
-				'display_name' => 'Janitor',
-				'capabilities' => array(
-					'level_1' => true,
-				),
-			),
-			'(int) 1 as the role'                    => array(
-				'role'         => 1,
-				'display_name' => 'Janitor',
-				'capabilities' => array(
-					'level_1' => true,
-				),
-			),
-			'(float) 1.0 as the role'                => array(
-				'role'         => 1.0,
-				'display_name' => 'Janitor',
-				'capabilities' => array(
-					'level_1' => true,
-				),
-			),
-			'(int) 0 as the role'                    => array(
-				'role'         => 0,
-				'display_name' => 'Janitor',
-				'capabilities' => array(
-					'level_1' => true,
-				),
-			),
-			'(float) 0.0 as the role'                => array(
-				'role'         => 0.0,
-				'display_name' => 'Janitor',
-				'capabilities' => array(
-					'level_1' => true,
-				),
-			),
-			'an empty string as the role'            => array(
-				'role'         => '',
-				'display_name' => 'Janitor',
-				'capabilities' => array(
-					'level_1' => true,
-				),
-			),
-			'a string with only a space as the role' => array(
-				'role'         => ' ',
-				'display_name' => 'Janitor',
-				'capabilities' => array(
-					'level_1' => true,
-				),
-			),
-			'an empty array as the role'             => array(
-				'role'         => array(),
-				'display_name' => 'Janitor',
-				'capabilities' => array(
-					'level_1' => true,
-				),
-			),
-			'a non-empty array as the role'          => array(
-				'role'         => array( 'janitor' ),
-				'display_name' => 'Janitor',
-				'capabilities' => array(
-					'level_1' => true,
-				),
-			),
-			'an object as the role'                  => array(
-				'role'         => (object) array( 'janitor' ),
-				'display_name' => 'Janitor',
-				'capabilities' => array(
-					'level_1' => true,
-				),
-			),
-			'true as the display name'               => array(
-				'role'         => 'janitor',
-				'display_name' => true,
-				'capabilities' => array(
-					'level_1' => true,
-				),
-			),
-			'false as the display name'              => array(
-				'role'         => 'janitor',
-				'display_name' => false,
-				'capabilities' => array(
-					'level_1' => true,
-				),
-			),
-			'(int) 1 as the display name'            => array(
-				'role'         => 'janitor',
-				'display_name' => 1,
-				'capabilities' => array(
-					'level_1' => true,
-				),
-			),
-			'(float) 1.0 as the display name'        => array(
-				'role'         => 'janitor',
-				'display_name' => 1.0,
-				'capabilities' => array(
-					'level_1' => true,
-				),
-			),
-			'(int) 0 as the display name'            => array(
-				'role'         => 'janitor',
-				'display_name' => 0,
-				'capabilities' => array(
-					'level_1' => true,
-				),
-			),
-			'(float) 0.0 as the display name'        => array(
-				'role'         => 'janitor',
-				'display_name' => 0.0,
-				'capabilities' => array(
-					'level_1' => true,
-				),
-			),
-			'an empty string as the display name'    => array(
-				'role'         => 'janitor',
-				'display_name' => '',
-				'capabilities' => array(
-					'level_1' => true,
-				),
-			),
-			'a string with only a space as the display name' => array(
-				'role'         => 'janitor',
-				'display_name' => ' ',
-				'capabilities' => array(
-					'level_1' => true,
-				),
-			),
-			'an empty array as the display name'     => array(
-				'role'         => 'janitor',
-				'display_name' => array(),
-				'capabilities' => array(
-					'level_1' => true,
-				),
-			),
-			'a non-empty array as the display name'  => array(
-				'role'         => 'janitor',
-				'display_name' => array( 'Janitor' ),
-				'capabilities' => array(
-					'level_1' => true,
-				),
-			),
-			'an object as the display name'          => array(
-				'role'         => 'janitor',
-				'display_name' => (object) array( 'Janitor' ),
-				'capabilities' => array(
-					'level_1' => true,
-				),
-			),
-			'true as the capabilities'               => array(
-				'role'         => 'janitor',
-				'display_name' => 'Janitor',
-				'capabilities' => true,
-			),
-			'false as the capabilities'              => array(
-				'role'         => (object) array( 'janitor' ),
-				'display_name' => 'Janitor',
-				'capabilities' => false,
-			),
-			'(int) 1 as the capabilities'            => array(
-				'role'         => 'janitor',
-				'display_name' => 'Janitor',
-				'capabilities' => 1,
-			),
-			'(float) 1.0 as the capabilities'        => array(
-				'role'         => 'janitor',
-				'display_name' => 'Janitor',
-				'capabilities' => 1.0,
-			),
-			'(int) 0 as the capabilities'            => array(
-				'role'         => 'janitor',
-				'display_name' => 'Janitor',
-				'capabilities' => 0,
-			),
-			'(float) 0.0 as the capabilities'        => array(
-				'role'         => 'janitor',
-				'display_name' => 'Janitor',
-				'capabilities' => 0.0,
-			),
-			'an empty string as the capabilities'    => array(
-				'role'         => 'janitor',
-				'display_name' => 'Janitor',
-				'capabilities' => '',
-			),
-			'a string with only a space as the capabilities' => array(
-				'role'         => 'janitor',
-				'display_name' => 'Janitor',
-				'capabilities' => ' ',
-			),
-			'an object as the capabilities'          => array(
-				'role'         => 'janitor',
-				'display_name' => 'Janitor',
-				'capabilities' => (object) array( 'level_1' => true ),
-			),
-		);
-	}
-
-	/**
-	 * @ticket 54572
-	 *
-	 * @covers WP_Roles::update_role
-	 * @covers ::update_role
-	 */
-	public function test_update_role_should_create_a_role_if_it_does_not_exist() {
-		global $wp_roles;
-
-		// Create role if it does not exist.
-		$role_name     = 'janitor';
-		$expected_caps = array(
-			'edit_posts' => true,
-			'edit_pages' => true,
-			'level_0'    => true,
-			'level_1'    => true,
-			'level_2'    => true,
-		);
-		update_role( $role_name, 'Janitor', $expected_caps );
-		$this->flush_roles();
-		$this->assertTrue( $wp_roles->is_role( $role_name ) );
-	}
-
-	/**
-	 * @ticket 54572
-	 *
-	 * @covers WP_Roles::update_role
-	 * @covers ::update_role
-	 */
-	public function test_update_role_should_change_the_display_name_of_a_role() {
-		global $wp_roles;
-		$role_name = 'janitor';
-
-		add_role( $role_name, 'Janitor', array( 'level_1' => true ) );
-		$this->flush_roles();
-
-		$expected_display_name = 'Janitor Executive';
-		update_role( $role_name, $expected_display_name );
-		$this->flush_roles();
-
-		$this->assertSame(
-			$expected_display_name,
-			$wp_roles->roles[ $role_name ]['name'],
-			'The expected display name was not correct'
-		);
-		$this->assertSame(
-			array( 'level_1' => true ),
-			$wp_roles->roles[ $role_name ]['capabilities'],
-			'The expected capabilities were not correct'
-		);
-
-		// Clean up.
-		remove_role( $role_name );
-		$this->flush_roles();
-		$this->assertFalse(
-			$wp_roles->is_role( $role_name ),
-			"The $role_name role was not removed"
-		);
-	}
-
-	/**
-	 * @dataProvider data_update_role_should_change_the_capabilities_of_a_role
-	 *
-	 * @ticket 54572
-	 *
-	 * @covers WP_Roles::update_role
-	 * @covers ::update_role
-	 *
-	 * @param array $capabilities An array of capabilities.
-	 */
-	public function test_update_role_should_change_the_capabilities_of_a_role( $capabilities ) {
-		global $wp_roles;
-		$role_name = 'janitor';
-
-		add_role( $role_name, 'Janitor', array( 'level_1' => true ) );
-		$this->flush_roles();
-
-		update_role( $role_name, null, $capabilities );
-		$this->flush_roles();
-
-		$this->assertSame(
-			'Janitor',
-			$wp_roles->roles[ $role_name ]['name'],
-			'The display name was changed'
-		);
-		$this->assertSame(
-			$capabilities,
-			$wp_roles->roles[ $role_name ]['capabilities'],
-			'The expected capabilities were not correct'
-		);
-
-		// Clean up.
-		remove_role( $role_name );
-		$this->flush_roles();
-		$this->assertFalse(
-			$wp_roles->is_role( $role_name ),
-			"The $role_name role was not removed"
-		);
-	}
-
-	/**
-	 * Data provider.
-	 *
-	 * @return array
-	 */
-	public function data_update_role_should_change_the_capabilities_of_a_role() {
-		return array(
-			'an empty array'           => array( 'capabilities' => array() ),
-			'an array of capabilities' => array( 'capabilities' => array( 'level_2' => true ) ),
-		);
-	}
-
-	/**
-	 * @ticket 54572
-	 *
-	 * @covers WP_Roles::update_role
-	 * @covers ::update_role
-	 */
-	public function test_update_role_should_change_display_name_and_capabilities_of_role() {
-		global $wp_roles;
-		$role_name = 'janitor';
-
-		add_role( $role_name, 'Janitor', array( 'level_1' => true ) );
-		$this->flush_roles();
-
-		$expected_display_name = 'Janitor Manager';
-		$new_expected_caps     = array(
-			'level_3' => true,
-			'level_4' => true,
-		);
-		update_role( $role_name, $expected_display_name, $new_expected_caps );
-		$this->flush_roles();
-
-		$this->assertSame(
-			$expected_display_name,
-			$wp_roles->roles[ $role_name ]['name'],
-			'The expected display name was not correct'
-		);
-
-		$this->assertSame(
-			$new_expected_caps,
-			$wp_roles->roles[ $role_name ]['capabilities'],
-			'The expected capabilities were not correct'
-		);
-
-		// Clean up.
-		remove_role( $role_name );
-		$this->flush_roles();
-		$this->assertFalse(
-			$wp_roles->is_role( $role_name ),
-			"The $role_name role was not removed"
-		);
-	}
-
-	/**
-	 * @ticket 54572
-	 *
-	 * @covers WP_Roles::update_role
-	 * @covers ::update_role
-	 */
-	public function test_update_role_should_change_capabilities_of_a_user() {
-		global $wp_roles;
-		$role_name = 'janitor';
-
-		add_role( $role_name, 'Janitor', array( 'level_1' => true ) );
-		$this->flush_roles();
-
-		// Assign a user to the role.
-		$id = self::factory()->user->create( array( 'role' => $role_name ) );
-
-		// Update empty capabilities.
-		update_role( $role_name, null, array( 'level_2' => true ) );
-		$this->flush_roles();
-
-		$this->assertTrue(
-			user_can( $id, 'level_2' ),
-			'The user does not have level_2 capabilities'
-		);
-		$this->assertFalse(
-			user_can( $id, 'level_1' ),
-			'The user has level_1 capabilities'
-		);
-
-		// Clean up.
-		remove_role( $role_name );
-		$this->flush_roles();
-		$this->assertFalse(
-			$wp_roles->is_role( $role_name ),
-			"The $role_name role was not removed"
-		);
-	}
-
 	/**
 	 * Change the capabilites associated with a role and make sure the change
 	 * is reflected in has_cap().
@@ -2162,7 +1707,7 @@ class Tests_User_Capabilities extends WP_UnitTestCase {
 	}
 
 	public function nullify_current_user() {
-		// Prevents fatal errors in ::tearDown()'s and other uses of restore_current_blog().
+		// Prevents fatal errors in ::tear_down()'s and other uses of restore_current_blog().
 		$function_stack = wp_debug_backtrace_summary( null, 0, false );
 		if ( in_array( 'restore_current_blog', $function_stack, true ) ) {
 			return;
diff --git a/tests/user/countUserPosts.php b/tests/user/countUserPosts.php
index a4244e2814..dbc94f418e 100644
--- a/tests/user/countUserPosts.php
+++ b/tests/user/countUserPosts.php
@@ -59,34 +59,34 @@ class Tests_User_CountUserPosts extends WP_UnitTestCase {
 	}
 
 	public function test_count_user_posts_post_type_should_default_to_post() {
-		$this->assertEquals( 4, count_user_posts( self::$user_id ) );
+		$this->assertSame( '4', count_user_posts( self::$user_id ) );
 	}
 
 	/**
 	 * @ticket 21364
 	 */
 	public function test_count_user_posts_post_type_post() {
-		$this->assertEquals( 4, count_user_posts( self::$user_id, 'post' ) );
+		$this->assertSame( '4', count_user_posts( self::$user_id, 'post' ) );
 	}
 
 	/**
 	 * @ticket 21364
 	 */
 	public function test_count_user_posts_post_type_cpt() {
-		$this->assertEquals( 3, count_user_posts( self::$user_id, 'wptests_pt' ) );
+		$this->assertSame( '3', count_user_posts( self::$user_id, 'wptests_pt' ) );
 	}
 
 	/**
 	 * @ticket 32243
 	 */
 	public function test_count_user_posts_with_multiple_post_types() {
-		$this->assertEquals( 7, count_user_posts( self::$user_id, array( 'wptests_pt', 'post' ) ) );
+		$this->assertSame( '7', count_user_posts( self::$user_id, array( 'wptests_pt', 'post' ) ) );
 	}
 
 	/**
 	 * @ticket 32243
 	 */
 	public function test_count_user_posts_should_ignore_non_existent_post_types() {
-		$this->assertEquals( 4, count_user_posts( self::$user_id, array( 'foo', 'post' ) ) );
+		$this->assertSame( '4', count_user_posts( self::$user_id, array( 'foo', 'post' ) ) );
 	}
 }
diff --git a/tests/user/countUsers.php b/tests/user/countUsers.php
index 224ddcc8d0..b09cd85784 100644
--- a/tests/user/countUsers.php
+++ b/tests/user/countUsers.php
@@ -53,7 +53,7 @@ class Tests_User_CountUsers extends WP_UnitTestCase {
 		$count = count_users( $strategy );
 
 		$this->assertSame( 8, $count['total_users'] );
-		$this->assertEquals(
+		$this->assertSameSetsWithIndex(
 			array(
 				'administrator' => 2,
 				'editor'        => 1,
@@ -133,7 +133,7 @@ class Tests_User_CountUsers extends WP_UnitTestCase {
 		$count = count_users( $strategy );
 
 		$this->assertSame( 8, $count['total_users'] );
-		$this->assertEquals(
+		$this->assertSameSetsWithIndex(
 			array(
 				'administrator' => 2,
 				'editor'        => 1,
@@ -151,7 +151,7 @@ class Tests_User_CountUsers extends WP_UnitTestCase {
 		restore_current_blog();
 
 		$this->assertSame( 2, $count['total_users'] );
-		$this->assertEquals(
+		$this->assertSameSetsWithIndex(
 			array(
 				'administrator' => 1,
 				'editor'        => 1,
@@ -166,7 +166,7 @@ class Tests_User_CountUsers extends WP_UnitTestCase {
 		restore_current_blog();
 
 		$this->assertSame( 2, $count['total_users'] );
-		$this->assertEquals(
+		$this->assertSameSetsWithIndex(
 			array(
 				'administrator' => 1,
 				'contributor'   => 1,
@@ -239,7 +239,7 @@ class Tests_User_CountUsers extends WP_UnitTestCase {
 		$count = count_users( $strategy );
 
 		$this->assertSame( 3, $count['total_users'] );
-		$this->assertEquals(
+		$this->assertSameSetsWithIndex(
 			array(
 				'administrator' => 2,
 				'editor'        => 1,
diff --git a/tests/user/getUserCount.php b/tests/user/getUserCount.php
index f6a94d5624..4aee753288 100644
--- a/tests/user/getUserCount.php
+++ b/tests/user/getUserCount.php
@@ -11,7 +11,6 @@ class Tests_User_GetUserCount extends WP_UnitTestCase {
 	 * @group ms-required
 	 */
 	public function test_wp_update_network_counts_on_different_network() {
-		$this->skipWithoutMultisite();
 		$different_network_id = self::factory()->network->create(
 			array(
 				'domain' => 'wordpress.org',
@@ -34,7 +33,6 @@ class Tests_User_GetUserCount extends WP_UnitTestCase {
 	 * @group ms-required
 	 */
 	public function test_get_user_count_on_different_network() {
-		$this->skipWithoutMultisite();
 		$different_network_id = self::factory()->network->create(
 			array(
 				'domain' => 'wordpress.org',
@@ -60,7 +58,6 @@ class Tests_User_GetUserCount extends WP_UnitTestCase {
 	 * @group ms-required
 	 */
 	public function test_enable_live_network_user_counts_filter() {
-		$this->skipWithoutMultisite();
 		// False for large networks by default.
 		add_filter( 'enable_live_network_counts', '__return_false' );
 
@@ -102,11 +99,10 @@ class Tests_User_GetUserCount extends WP_UnitTestCase {
 	}
 
 	/**
-	 * @group ms-excluded
 	 * @ticket 38741
+	 * @group ms-excluded
 	 */
 	public function test_get_user_count_update_on_delete() {
-		$this->skipWithMultisite();
 		wp_update_user_counts();
 		$current_network_user_count = get_user_count();
 
@@ -124,11 +120,10 @@ class Tests_User_GetUserCount extends WP_UnitTestCase {
 	}
 
 	/**
-	 * @group ms-required
 	 * @ticket 38741
+	 * @group ms-required
 	 */
 	public function test_get_user_count_update_on_delete_multisite() {
-		$this->skipWithoutMultisite();
 		wp_update_user_counts();
 		$current_network_user_count = get_user_count();
 
@@ -146,12 +141,11 @@ class Tests_User_GetUserCount extends WP_UnitTestCase {
 	}
 
 	/**
+	 * @ticket 38741
 	 * @group multisite
 	 * @group ms-required
-	 * @ticket 38741
 	 */
 	public function test_get_user_count() {
-		$this->skipWithoutMultisite();
 		// Refresh the cache.
 		wp_update_network_counts();
 		$start_count = get_user_count();
diff --git a/tests/user/query.php b/tests/user/query.php
index 3626156c01..722a3fbeaf 100644
--- a/tests/user/query.php
+++ b/tests/user/query.php
@@ -52,7 +52,7 @@ class Tests_User_Query extends WP_UnitTestCase {
 	public function test_get_and_set() {
 		$users = new WP_User_Query();
 
-		$this->assertEquals( '', $users->get( 'fields' ) );
+		$this->assertNull( $users->get( 'fields' ) );
 		if ( isset( $users->query_vars['fields'] ) ) {
 			$this->assertSame( '', $users->query_vars['fields'] );
 		}
@@ -582,7 +582,7 @@ class Tests_User_Query extends WP_UnitTestCase {
 		// All values get reset.
 		$query->prepare_query( array( 'fields' => 'all' ) );
 		$this->assertEmpty( $query->query_limit );
-		$this->assertEquals( '', $query->query_limit );
+		$this->assertNull( $query->query_limit );
 		$_query_vars = $query->query_vars;
 
 		$query->prepare_query();
@@ -1685,7 +1685,7 @@ class Tests_User_Query extends WP_UnitTestCase {
 		$ids = $q->get_results();
 
 		// Must include user that has the same string in display_name.
-		$this->assertEquals( array( $new_user1 ), $ids );
+		$this->assertSameSetsWithIndex( array( (string) $new_user1 ), $ids );
 	}
 
 	/**
@@ -2011,7 +2011,7 @@ class Tests_User_Query extends WP_UnitTestCase {
 	 *
 	 * @return array
 	 */
-	function data_returning_field_subset_as_string() {
+	public function data_returning_field_subset_as_string() {
 		$data = array(
 			'id'            => array(
 				'fields'   => 'id',
@@ -2093,7 +2093,7 @@ class Tests_User_Query extends WP_UnitTestCase {
 	 *
 	 * @return array
 	 */
-	function data_returning_field_subset_as_array() {
+	public function data_returning_field_subset_as_array() {
 		$data = array(
 			'id'                 => array(
 				'fields'   => array( 'id' ),
diff --git a/tests/user/retrievePassword.php b/tests/user/retrievePassword.php
index 5a0e1d638e..96a14c408f 100644
--- a/tests/user/retrievePassword.php
+++ b/tests/user/retrievePassword.php
@@ -47,8 +47,7 @@ class Tests_User_RetrievePassword extends WP_UnitTestCase {
 	 * @ticket 54690
 	 */
 	public function test_retrieve_password_reset_notification_email() {
-		$message = 'Sending password reset notification email failed.';
-		$this->assertNotWPError( retrieve_password( $this->user->user_login ), $message );
+		$this->assertNotWPError( retrieve_password( $this->user->user_login ), 'Sending password reset notification email failed.' );
 	}
 
 	/**
@@ -64,7 +63,21 @@ class Tests_User_RetrievePassword extends WP_UnitTestCase {
 			}
 		);
 
-		$message = 'Sending password reset notification email succeeded.';
-		$this->assertWPError( retrieve_password( $this->user->user_login ), $message );
+		$this->assertWPError( retrieve_password( $this->user->user_login ), 'Sending password reset notification email succeeded.' );
+	}
+
+	/**
+	 * @ticket 53634
+	 */
+	public function test_retrieve_password_should_fetch_user_by_login_if_not_found_by_email() {
+		self::factory()->user->create(
+			array(
+				'user_login' => 'foo@example.com',
+				'user_email' => 'bar@example.com',
+			)
+		);
+
+		$this->assertTrue( retrieve_password( 'foo@example.com' ), 'Fetching user by login failed.' );
+		$this->assertTrue( retrieve_password( 'bar@example.com' ), 'Fetching user by email failed.' );
 	}
 }
diff --git a/tests/user/wpRegisterPersistedPreferencesMeta.php b/tests/user/wpRegisterPersistedPreferencesMeta.php
index 5c136070d5..c3c4bd7a09 100644
--- a/tests/user/wpRegisterPersistedPreferencesMeta.php
+++ b/tests/user/wpRegisterPersistedPreferencesMeta.php
@@ -36,11 +36,11 @@ class Tests_User_WpRegisterPersistedPreferencesMeta extends WP_UnitTestCase {
 				'sanitize_callback' => null,
 				'auth_callback'     => '__return_true',
 				'show_in_rest'      => array(
-					'name'    => 'persisted_preferences',
-					'type'    => 'object',
-					'context' => array( 'edit' ),
-					'schema'  => array(
+					'name'   => 'persisted_preferences',
+					'type'   => 'object',
+					'schema' => array(
 						'type'                 => 'object',
+						'context'              => array( 'edit' ),
 						'properties'           => array(
 							'_modified' => array(
 								'description' => __( 'The date and time the preferences were updated.' ),
diff --git a/tests/webfonts/wpThemeJsonWebfontsHandler.php b/tests/webfonts/wpThemeJsonWebfontsHandler.php
index 5c609923d7..ae7deacc01 100644
--- a/tests/webfonts/wpThemeJsonWebfontsHandler.php
+++ b/tests/webfonts/wpThemeJsonWebfontsHandler.php
@@ -129,7 +129,7 @@ EOF;
 	private function setup_theme_and_test( $theme_name ) {
 		switch_theme( $theme_name );
 		do_action( 'after_setup_theme' );
-		WP_Theme_JSON_Resolver::clean_cached_data();
+		wp_clean_theme_json_cache();
 		do_action( 'wp_loaded' );
 		do_action( 'wp_enqueue_scripts' );
 	}
diff --git a/tests/widgets.php b/tests/widgets.php
index 527798f7a4..8f64669c29 100644
--- a/tests/widgets.php
+++ b/tests/widgets.php
@@ -593,7 +593,7 @@ class Tests_Widgets extends WP_UnitTestCase {
 	/**
 	 * @ticket 52728
 	 */
-	function test_widget_display_callback_handles_arrayobject() {
+	public function test_widget_display_callback_handles_arrayobject() {
 		$widget = new WP_Widget_Text();
 
 		register_widget( $widget );
@@ -813,7 +813,7 @@ class Tests_Widgets extends WP_UnitTestCase {
 		);
 
 		wp_widgets_init();
-		require_once ABSPATH . '/wp-admin/includes/widgets.php';
+		require_once ABSPATH . 'wp-admin/includes/widgets.php';
 		$widget_id    = 'search-2';
 		$widget       = $wp_registered_widgets[ $widget_id ];
 		$params       = array(
@@ -1274,10 +1274,10 @@ class Tests_Widgets extends WP_UnitTestCase {
 		$new_next_theme_sidebars = wp_map_sidebars_widgets( $prev_theme_sidebars );
 
 		$expected_sidebars = array(
-			'primary'             => 1,
 			'wp_inactive_widgets' => array(),
+			'primary'             => 1,
 		);
-		$this->assertEquals( $expected_sidebars, $new_next_theme_sidebars );
+		$this->assertSameSetsWithIndex( $expected_sidebars, $new_next_theme_sidebars );
 	}
 
 	/**
@@ -1295,7 +1295,7 @@ class Tests_Widgets extends WP_UnitTestCase {
 
 		$new_next_theme_sidebars = wp_map_sidebars_widgets( $prev_theme_sidebars );
 
-		$this->assertEquals( $prev_theme_sidebars, $new_next_theme_sidebars );
+		$this->assertSameSetsWithIndex( $prev_theme_sidebars, $new_next_theme_sidebars );
 	}
 
 	/**
@@ -1318,7 +1318,7 @@ class Tests_Widgets extends WP_UnitTestCase {
 			'secondary'           => array(),
 			'wp_inactive_widgets' => array(),
 		);
-		$this->assertEquals( $expected_sidebars, $new_next_theme_sidebars );
+		$this->assertSameSetsWithIndex( $expected_sidebars, $new_next_theme_sidebars );
 	}
 
 	/**
@@ -1362,6 +1362,6 @@ class Tests_Widgets extends WP_UnitTestCase {
 			'primary'             => array(),
 			'wp_inactive_widgets' => array(),
 		);
-		$this->assertEquals( $expected_sidebars, $new_next_theme_sidebars );
+		$this->assertSameSetsWithIndex( $expected_sidebars, $new_next_theme_sidebars );
 	}
 }
diff --git a/tests/widgets/wpWidgetMedia.php b/tests/widgets/wpWidgetMedia.php
index a61026bec9..b52b5fd413 100644
--- a/tests/widgets/wpWidgetMedia.php
+++ b/tests/widgets/wpWidgetMedia.php
@@ -343,7 +343,7 @@ class Tests_Widgets_wpWidgetMedia extends WP_UnitTestCase {
 		$this->widget_instance_filter_args = array();
 		$widget->widget( $args, $instance );
 		$this->assertCount( 3, $this->widget_instance_filter_args );
-		$this->assertEquals( $instance, $this->widget_instance_filter_args[0] );
+		$this->assertSameSetsWithIndex( $instance, $this->widget_instance_filter_args[0] );
 		$this->assertSame( $args, $this->widget_instance_filter_args[1] );
 		$this->assertSame( $widget, $this->widget_instance_filter_args[2] );
 		$output = ob_get_clean();
diff --git a/tests/widgets/wpWidgetRss.php b/tests/widgets/wpWidgetRss.php
index 495869f475..424969c126 100644
--- a/tests/widgets/wpWidgetRss.php
+++ b/tests/widgets/wpWidgetRss.php
@@ -106,7 +106,7 @@ class Tests_Widgets_wpWidgetRss extends WP_UnitTestCase {
 		);
 
 		return array(
-			'headers'  => new Requests_Utility_CaseInsensitiveDictionary( $single_value_headers ),
+			'headers'  => new WpOrg\Requests\Utility\CaseInsensitiveDictionary( $single_value_headers ),
 			'body'     => file_get_contents( DIR_TESTDATA . '/feed/wordpress-org-news.xml' ),
 			'response' => array(
 				'code'    => 200,
diff --git a/tests/wp.php b/tests/wp/addQueryVar.php
similarity index 61%
rename from tests/wp.php
rename to tests/wp/addQueryVar.php
index 4fbb182a50..421c76a665 100644
--- a/tests/wp.php
+++ b/tests/wp/addQueryVar.php
@@ -2,8 +2,11 @@
 
 /**
  * @group wp
+ *
+ * @covers WP::add_query_var
  */
-class Tests_WP extends WP_UnitTestCase {
+class Tests_WP_AddQueryVar extends WP_UnitTestCase {
+
 	/**
 	 * @var WP
 	 */
@@ -25,14 +28,4 @@ class Tests_WP extends WP_UnitTestCase {
 		$this->assertContains( 'test', $this->wp->public_query_vars );
 		$this->assertContains( 'test2', $this->wp->public_query_vars );
 	}
-
-	public function test_remove_query_var() {
-		$public_qv_count = count( $this->wp->public_query_vars );
-
-		$this->wp->add_query_var( 'test' );
-		$this->assertContains( 'test', $this->wp->public_query_vars );
-		$this->wp->remove_query_var( 'test' );
-
-		$this->assertCount( $public_qv_count, $this->wp->public_query_vars );
-	}
 }
diff --git a/tests/wp/parseRequest.php b/tests/wp/parseRequest.php
index edf65cb660..a34a873e89 100644
--- a/tests/wp/parseRequest.php
+++ b/tests/wp/parseRequest.php
@@ -2,9 +2,11 @@
 
 /**
  * @group wp
+ *
  * @covers WP::parse_request
  */
 class Tests_WP_ParseRequest extends WP_UnitTestCase {
+
 	/**
 	 * @var WP
 	 */
diff --git a/tests/wp/removeQueryVar.php b/tests/wp/removeQueryVar.php
new file mode 100644
index 0000000000..56d82c1774
--- /dev/null
+++ b/tests/wp/removeQueryVar.php
@@ -0,0 +1,29 @@
+<?php
+
+/**
+ * @group wp
+ *
+ * @covers WP::remove_query_var
+ */
+class Tests_WP_RemoveQueryVar extends WP_UnitTestCase {
+
+	/**
+	 * @var WP
+	 */
+	protected $wp;
+
+	public function set_up() {
+		parent::set_up();
+		$this->wp = new WP();
+	}
+
+	public function test_remove_query_var() {
+		$public_qv_count = count( $this->wp->public_query_vars );
+
+		$this->wp->add_query_var( 'test' );
+		$this->assertContains( 'test', $this->wp->public_query_vars );
+		$this->wp->remove_query_var( 'test' );
+
+		$this->assertCount( $public_qv_count, $this->wp->public_query_vars );
+	}
+}
diff --git a/tests/wp/sendHeaders.php b/tests/wp/sendHeaders.php
new file mode 100644
index 0000000000..b5fc56bf20
--- /dev/null
+++ b/tests/wp/sendHeaders.php
@@ -0,0 +1,38 @@
+<?php
+
+/**
+ * @group wp
+ *
+ * @covers WP::send_headers
+ */
+class Tests_WP_SendHeaders extends WP_UnitTestCase {
+
+	/**
+	 * @ticket 56068
+	 */
+	public function test_send_headers_runs_after_posts_have_been_queried() {
+		add_action(
+			'send_headers',
+			function ( $wp ) {
+				$this->assertQueryTrue( 'is_front_page', 'is_home' );
+			}
+		);
+
+		$this->go_to( home_url() );
+	}
+
+	/**
+	 * @ticket 56840
+	 */
+	public function test_send_headers_sets_x_pingback_for_single_posts_that_allow_pings() {
+		add_action(
+			'wp_headers',
+			function ( $headers ) {
+				$this->assertArrayHasKey( 'X-Pingback', $headers );
+			}
+		);
+
+		$post_id = self::factory()->post->create();
+		$this->go_to( get_permalink( $post_id ) );
+	}
+}
diff --git a/tests/xmlrpc/message.php b/tests/xmlrpc/message.php
new file mode 100644
index 0000000000..ac68552902
--- /dev/null
+++ b/tests/xmlrpc/message.php
@@ -0,0 +1,34 @@
+<?php
+/**
+ * Unit tests covering IXR_Message functionality.
+ *
+ * @package    WordPress
+ * @subpackage IXR
+ */
+
+/**
+ * Test wp-includes/IXR/class-IXR-message.php
+ *
+ * @group xmlrpc
+ */
+class Tests_XMLRPC_Message extends WP_UnitTestCase {
+
+	/**
+	 * Tests that `IXR_Message::tag_open()` does not create a dynamic `currentTag` property,
+	 * and uses the declared `_currentTag` property instead.
+	 *
+	 * The notice that we should not see:
+	 * `Deprecated: Creation of dynamic property IXR_Message::$currentTag is deprecated`.
+	 *
+	 * @ticket 56033
+	 *
+	 * @covers IXR_Message::tag_open
+	 */
+	public function test_tag_open_does_not_create_dynamic_property() {
+		$message = new IXR_Message( '<methodResponse><params><param><value>1</value></param></params></methodResponse>' );
+		$this->assertTrue( $message->parse() );
+		$this->assertSame( 'methodResponse', $message->messageType ); // phpcs:ignore WordPress.NamingConventions.ValidVariableName.UsedPropertyNotSnakeCase
+		$this->assertSame( array( '1' ), $message->params );
+	}
+
+}
diff --git a/tests/xmlrpc/wp/newPost.php b/tests/xmlrpc/wp/newPost.php
index a702e7373a..c9b160cf19 100644
--- a/tests/xmlrpc/wp/newPost.php
+++ b/tests/xmlrpc/wp/newPost.php
@@ -238,7 +238,7 @@ class Tests_XMLRPC_wp_newPost extends WP_XMLRPC_UnitTestCase {
 		);
 		$result = $this->myxmlrpcserver->wp_newPost( array( 1, 'editor', 'editor', $post ) );
 		$this->assertNotIXRError( $result );
-		$this->assertEquals( '', get_post_format( $result ) );
+		$this->assertFalse( get_post_format( $result ) );
 	}
 
 	public function test_invalid_taxonomy() {
diff --git a/wp-mail-real-test.php b/wp-mail-real-test.php
index 467442249f..243efde046 100644
--- a/wp-mail-real-test.php
+++ b/wp-mail-real-test.php
@@ -59,7 +59,7 @@ assert( true === is_blog_installed() );
 define( 'PHPUnit_MAIN_METHOD', false );
 $original_wpdb = $GLOBALS['wpdb'];
 
-// Hide warnings during testing, since that's the normal WP behaviour.
+// Hide warnings during testing, since that's the normal WP behavior.
 if ( ! WP_DEBUG ) {
 	error_reporting( E_ALL ^ E_NOTICE );
 }
