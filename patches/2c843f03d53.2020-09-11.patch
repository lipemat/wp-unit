diff --git a/data/WPHTTP-testcase-redirection-script.php b/data/WPHTTP-testcase-redirection-script.php
index 02cb946fe1..a73e8c6e09 100644
--- a/data/WPHTTP-testcase-redirection-script.php
+++ b/data/WPHTTP-testcase-redirection-script.php
@@ -1,6 +1,6 @@
 <?php
 
-// Thanks WordPress..
+// Thanks WordPress...
 function is_ssl() {
 	if ( isset($_SERVER['HTTPS']) ) {
 		if ( 'on' == strtolower($_SERVER['HTTPS']) )
@@ -73,7 +73,7 @@ if ( isset( $_GET['location-with-200'] ) ) {
 		echo 'PASS';
 		exit;
 	}
-	// Redirection was followed
+	// Redirection was followed.
 	echo 'FAIL';
 	exit;
 }
diff --git a/data/formatting/whole-posts.php b/data/formatting/whole-posts.php
index ed87f033d9..3a4f13c648 100644
--- a/data/formatting/whole-posts.php
+++ b/data/formatting/whole-posts.php
@@ -52,10 +52,10 @@ array('[Lorem ipsum dolor sit amet, quo id ignota repudiare, ius iracundia ratio
  Cu bonorum graecis ius. Duo id ancillae probatus. Tota latine pri an. Cum ei iudico semper. Eum in blandit voluptaria.
 
  Illud debet vitae ex vis numquam.'),
- 
+
 /* DIVIDER */
 
-// based on https://core.trac.wordpress.org/attachment/ticket/29557/ChatTranscript.txt
+// Based on https://core.trac.wordpress.org/attachment/ticket/29557/ChatTranscript.txt
 
 array('hello!-- world. [caption arg1="Aenean consectetur ipsum ante, vel egestas enim tincidunt quis. Pellentesque vitae congue neque, vel mattis ante. In vitae tempus nunc. Etiam adipiscing enim sed condimentum ultrices. Aenean consectetur ipsum ante, vel egestas enim tincidunt qu. In vitae tempus nunc. In vitaentbnbsdgsdsdgsdhsdhdsdhdsh Aenean consectetur ipsum ante, vel egestas enim tincidunt quis. Pellentesque vitae congue neque, vel mattis ante. In vitae tempus nunc. Etiam adipiscing enim sed condimentum ultrices. Aenean consectetur ipsum ante, vel egestas enim tincidunt qu. In vitae tempus nunc. In vitaentbnbsdgsdsdgsdhsdhdsdhdsh" /] hello world.
 
@@ -445,7 +445,7 @@ BLAH!</p>
 <p class="triangle-right left">A very significant, if unsurprising update.
 ìblown awayî</p>
 <img class="alignleft" src="http://www.example.com/postimages/2013/aarone.jpeg" alt="" width="50" height="50" />
-<p class="triangle-right lefttwo">Blown away by the trash can.</p>
+<p class="triangle-right lefttwo">Blown away by the Trash can.</p>
 <img class="alignleft" src="http://www.example.com/postimages/2013/bobm.jpeg" alt="" width="50" height="50" />
 <p class="triangle-right left">That is one powerful fan.</p>
 <img class="alignright" src="http://www.example.com/postimages/2013/philipmetroid.jpg" alt="" width="50" height="50" />
@@ -470,11 +470,11 @@ Yup, spinning rust taps out at about 120 MB/sec.</p>
 <p class="triangle-right right">We\'ll even sell you this case that matches to put your drives into!</p>
 <img class="alignleft" src="http://www.example.com/postimages/2013/bobm.jpeg" alt="" width="50" height="50" />
 <p class="triangle-right left">For a single drive.
-Who is going to be the first to mod a real trash can with a RAID array to Thunderbolt?</p>
+Who is going to be the first to mod a real Trash can with a RAID array to Thunderbolt?</p>
 <img class="alignright" src="http://www.example.com/postimages/2013/philipmetroid.jpg" alt="" width="50" height="50" />
 <p class="triangle-right right">I can\'t wait to see the enclosures people make to go with this device.</p>
 <img class="alignleft" src="http://www.example.com/postimages/2013/aarone.jpeg" alt="" width="50" height="50" />
-<p class="triangle-right lefttwo">Row of trash cans daisy chained together.</p>
+<p class="triangle-right lefttwo">Row of Trash cans daisy chained together.</p>
 <img class="alignright" src="http://www.example.com/postimages/2013/philipmetroid.jpg" alt="" width="50" height="50" />
 <p class="triangle-right right">Packed and built for expansion.</p>
 <img class="alignleft" src="http://www.example.com/postimages/2013/aarone.jpeg" alt="" width="50" height="50" />
@@ -507,7 +507,7 @@ This is going to get expensive fast.</p>
 <p class="triangle-right left">Not terrible. However, now I need to price out the TOP OF THE LINE model and find out if it can cost more than my house.
 Should be able to do it.</p>
 <img class="alignright" src="http://www.example.com/postimages/2013/philipmetroid.jpg" alt="" width="50" height="50" />
-<p class="triangle-right right">SO RECYCLABLE that you can throw it into the trash... or use it as a trash can.</p>
+<p class="triangle-right right">SO RECYCLABLE that you can throw it into the Trash... or use it as a Trash can.</p>
 <img class="alignleft" src="http://www.example.com/postimages/2013/aarone.jpeg" alt="" width="50" height="50" />
 <p class="triangle-right lefttwo">30k</p>
 <img class="alignright" src="http://www.example.com/postimages/2013/philipmetroid.jpg" alt="" width="50" height="50" />
diff --git a/data/images/one-blue-pixel-1-100x100.png b/data/images/one-blue-pixel-1-100x100.png
new file mode 100644
index 0000000000..1aff0e0ca0
Binary files /dev/null and b/data/images/one-blue-pixel-1-100x100.png differ
diff --git a/data/images/test-image-large.jpg b/data/images/test-image-large.jpg
new file mode 100644
index 0000000000..1d0a16298b
Binary files /dev/null and b/data/images/test-image-large.jpg differ
diff --git a/data/images/test-image-large.png b/data/images/test-image-large.png
deleted file mode 100644
index 828c4a6bc3..0000000000
Binary files a/data/images/test-image-large.png and /dev/null differ
diff --git a/data/languages/es_ES.mo b/data/languages/es_ES.mo
index bd56b36d4c..2f949bcf6a 100644
Binary files a/data/languages/es_ES.mo and b/data/languages/es_ES.mo differ
diff --git a/data/languages/es_ES.po b/data/languages/es_ES.po
index 511874825e..fc6b062bdf 100644
--- a/data/languages/es_ES.po
+++ b/data/languages/es_ES.po
@@ -2,12 +2,12 @@
 # This file is distributed under the same license as the Development (5.2.x) package.
 msgid ""
 msgstr ""
-"PO-Revision-Date: 2019-03-28 19:43+0300\n"
+"PO-Revision-Date: 2020-07-23 21:12+0300\n"
 "MIME-Version: 1.0\n"
 "Content-Type: text/plain; charset=UTF-8\n"
 "Content-Transfer-Encoding: 8bit\n"
 "Plural-Forms: nplurals=2; plural=n != 1;\n"
-"X-Generator: Poedit 2.2.1\n"
+"X-Generator: Poedit 2.3\n"
 "Project-Id-Version: Development (5.2.x)\n"
 "Language: es_ES\n"
 "POT-Creation-Date: \n"
@@ -43,7 +43,7 @@ msgstr "(Actualmente fijado en: %s)"
 #. translators: Privacy data request subject. 1: Site name, 2: Name of the action
 #: wp-includes/user.php:3445
 msgid "[%1$s] Confirm Action: %2$s"
-msgstr "[%1$s] Confirma la acci√≥n: %2$s"
+msgstr "[%1$s] Confirmar la acci√≥n: %2$s"
 
 #. translators: %s: Site name.
 #: wp-includes/user.php:3175
diff --git a/data/plugins/link-manager.zip b/data/plugins/link-manager.zip
new file mode 100644
index 0000000000..788eae3626
Binary files /dev/null and b/data/plugins/link-manager.zip differ
diff --git a/data/themedir1/camelCase/index.php b/data/themedir1/camelCase/index.php
index 93de08260b..e7d4fa5590 100644
--- a/data/themedir1/camelCase/index.php
+++ b/data/themedir1/camelCase/index.php
@@ -1,5 +1,5 @@
 <?php
 
-// dummy theme
+// Dummy theme.
 
-echo dirname(__FILE__).'/'.basename(__FILE__);
+echo __DIR__ . '/' . basename(__FILE__);
diff --git a/data/themedir1/default/comments.php b/data/themedir1/default/comments.php
index b1803eb489..e8f111be04 100644
--- a/data/themedir1/default/comments.php
+++ b/data/themedir1/default/comments.php
@@ -1,4 +1,4 @@
 <?php
 
-// Minimal comment template
+// Minimal comment template.
 wp_list_comments();
diff --git a/data/themedir1/default/footer.php b/data/themedir1/default/footer.php
new file mode 100644
index 0000000000..e36f7f7118
--- /dev/null
+++ b/data/themedir1/default/footer.php
@@ -0,0 +1 @@
+Footer
diff --git a/data/themedir1/default/functions.php b/data/themedir1/default/functions.php
index 28fe2820d4..aeb37af985 100644
--- a/data/themedir1/default/functions.php
+++ b/data/themedir1/default/functions.php
@@ -1,6 +1,6 @@
 <?php
 
-// Minimum functions.php to pass unit tests
+// Minimum functions.php to pass unit tests.
 
 function default_widgets_init() {
 	register_sidebar( array( 'id' => 'sidebar-1' ) );
diff --git a/data/themedir1/default/header.php b/data/themedir1/default/header.php
new file mode 100644
index 0000000000..74fcd1a347
--- /dev/null
+++ b/data/themedir1/default/header.php
@@ -0,0 +1 @@
+Header
diff --git a/data/themedir1/default/sidebar.php b/data/themedir1/default/sidebar.php
new file mode 100644
index 0000000000..96438493b6
--- /dev/null
+++ b/data/themedir1/default/sidebar.php
@@ -0,0 +1 @@
+Sidebar
diff --git a/data/themedir1/default/template-part.php b/data/themedir1/default/template-part.php
index 05c759fcbb..b58d8e007e 100644
--- a/data/themedir1/default/template-part.php
+++ b/data/themedir1/default/template-part.php
@@ -1 +1,3 @@
 Template Part
+
+<?php echo json_encode( $args ); ?>
diff --git a/data/themedir1/page-templates/index.php b/data/themedir1/page-templates/index.php
index e0c765371d..5a20588a6b 100644
--- a/data/themedir1/page-templates/index.php
+++ b/data/themedir1/page-templates/index.php
@@ -1,3 +1,3 @@
 <?php
-// Intentionally left blank
+// Intentionally left blank.
 ?>
\ No newline at end of file
diff --git a/data/themedir1/rest-api/style.css b/data/themedir1/rest-api/style.css
new file mode 100644
index 0000000000..27fe7b53a0
--- /dev/null
+++ b/data/themedir1/rest-api/style.css
@@ -0,0 +1,15 @@
+/*
+Theme Name: REST Theme
+Theme URI: http://wordpress.org/?search=1&term=2
+Description: The 9' foot tall theme.
+Version: 1.6
+Author: Michael Heilemann
+Author URI: http://binarybonsai.com/?search=1&term=2
+Tags: holiday, custom-menu
+Template: default
+Requires at least: 5.3
+Requires PHP: 5.6
+Text Domain: rest-api
+*/
+
+
diff --git a/data/themedir1/sandbox/functions.php b/data/themedir1/sandbox/functions.php
index 1c8413d3a1..f538fe4230 100644
--- a/data/themedir1/sandbox/functions.php
+++ b/data/themedir1/sandbox/functions.php
@@ -1,7 +1,7 @@
 <?php
 
-// dummy theme
+// Dummy theme.
 
-echo dirname(__FILE__).'/'.basename(__FILE__);
+echo __DIR__ . '/' . basename(__FILE__);
 
 ?>
diff --git a/data/themedir1/sandbox/index.php b/data/themedir1/sandbox/index.php
index 1c8413d3a1..f538fe4230 100644
--- a/data/themedir1/sandbox/index.php
+++ b/data/themedir1/sandbox/index.php
@@ -1,7 +1,7 @@
 <?php
 
-// dummy theme
+// Dummy theme.
 
-echo dirname(__FILE__).'/'.basename(__FILE__);
+echo __DIR__ . '/' . basename(__FILE__);
 
 ?>
diff --git a/data/themedir1/theme1-dupe/functions.php b/data/themedir1/theme1-dupe/functions.php
index 1c8413d3a1..f538fe4230 100644
--- a/data/themedir1/theme1-dupe/functions.php
+++ b/data/themedir1/theme1-dupe/functions.php
@@ -1,7 +1,7 @@
 <?php
 
-// dummy theme
+// Dummy theme.
 
-echo dirname(__FILE__).'/'.basename(__FILE__);
+echo __DIR__ . '/' . basename(__FILE__);
 
 ?>
diff --git a/data/themedir1/theme1-dupe/index.php b/data/themedir1/theme1-dupe/index.php
index 1c8413d3a1..f538fe4230 100644
--- a/data/themedir1/theme1-dupe/index.php
+++ b/data/themedir1/theme1-dupe/index.php
@@ -1,7 +1,7 @@
 <?php
 
-// dummy theme
+// Dummy theme.
 
-echo dirname(__FILE__).'/'.basename(__FILE__);
+echo __DIR__ . '/' . basename(__FILE__);
 
 ?>
diff --git a/data/themedir1/theme1/functions.php b/data/themedir1/theme1/functions.php
index 1c8413d3a1..f538fe4230 100644
--- a/data/themedir1/theme1/functions.php
+++ b/data/themedir1/theme1/functions.php
@@ -1,7 +1,7 @@
 <?php
 
-// dummy theme
+// Dummy theme.
 
-echo dirname(__FILE__).'/'.basename(__FILE__);
+echo __DIR__ . '/' . basename(__FILE__);
 
 ?>
diff --git a/data/themedir1/theme1/index.php b/data/themedir1/theme1/index.php
index 1c8413d3a1..f538fe4230 100644
--- a/data/themedir1/theme1/index.php
+++ b/data/themedir1/theme1/index.php
@@ -1,7 +1,7 @@
 <?php
 
-// dummy theme
+// Dummy theme.
 
-echo dirname(__FILE__).'/'.basename(__FILE__);
+echo __DIR__ . '/' . basename(__FILE__);
 
 ?>
diff --git a/includes/abstract-testcase.php b/includes/abstract-testcase.php
index 749803dffc..94c7aaf634 100644
--- a/includes/abstract-testcase.php
+++ b/includes/abstract-testcase.php
@@ -1,7 +1,7 @@
 <?php
 
-require_once dirname( __FILE__ ) . '/factory.php';
-require_once dirname( __FILE__ ) . '/trac.php';
+require_once __DIR__ . '/factory.php';
+require_once __DIR__ . '/trac.php';
 
 /**
  * Defines a basic fixture to run multiple tests.
@@ -12,7 +12,7 @@ require_once dirname( __FILE__ ) . '/trac.php';
  *
  * All WordPress unit tests should inherit from this class.
  */
-abstract class WP_UnitTestCase_Base extends PHPUnit_Framework_TestCase {
+abstract class WP_UnitTestCase_Base extends PHPUnit\Framework\TestCase {
 
 	protected static $forced_tickets   = array();
 	protected $expected_deprecated     = array();
@@ -161,6 +161,9 @@ abstract class WP_UnitTestCase_Base extends PHPUnit_Framework_TestCase {
 			$GLOBALS[ $global ] = null;
 		}
 
+		// Reset $wp_sitemap global so that sitemap-related dynamic $wp->public_query_vars are added when the next test runs.
+		$GLOBALS['wp_sitemaps'] = null;
+
 		$this->unregister_all_meta_keys();
 		remove_theme_support( 'html5' );
 		remove_filter( 'query', array( $this, '_create_temporary_tables' ) );
@@ -180,22 +183,21 @@ abstract class WP_UnitTestCase_Base extends PHPUnit_Framework_TestCase {
 	}
 
 	/**
-	 * Allow tests to be skipped on some automated runs
+	 * Allow tests to be skipped on some automated runs.
 	 *
 	 * For test runs on Travis for something other than trunk/master
 	 * we want to skip tests that only need to run for master.
 	 */
 	public function skipOnAutomatedBranches() {
-		// gentenv can be disabled
-		if ( ! function_exists( 'getenv' ) ) {
-			return false;
-		}
-
 		// https://docs.travis-ci.com/user/environment-variables/#Default-Environment-Variables
 		$travis_branch       = getenv( 'TRAVIS_BRANCH' );
 		$travis_pull_request = getenv( 'TRAVIS_PULL_REQUEST' );
 
-		if ( false !== $travis_pull_request && 'master' !== $travis_branch ) {
+		if ( ! $travis_branch || ! $travis_pull_request ) {
+			return;
+		}
+
+		if ( 'master' !== $travis_branch || 'false' !== $travis_pull_request ) {
 			$this->markTestSkipped( 'For automated test runs, this test is only run on trunk/master' );
 		}
 	}
@@ -222,6 +224,29 @@ abstract class WP_UnitTestCase_Base extends PHPUnit_Framework_TestCase {
 		}
 	}
 
+	/**
+	 * Allow tests to be skipped if the HTTP request times out.
+	 *
+	 * @param array|WP_Error $response HTTP response.
+	 */
+	public function skipTestOnTimeout( $response ) {
+		if ( ! is_wp_error( $response ) ) {
+			return;
+		}
+		if ( 'connect() timed out!' === $response->get_error_message() ) {
+			$this->markTestSkipped( 'HTTP timeout' );
+		}
+
+		if ( false !== strpos( $response->get_error_message(), 'timed out after' ) ) {
+			$this->markTestSkipped( 'HTTP timeout' );
+		}
+
+		if ( 0 === strpos( $response->get_error_message(), 'stream_socket_client(): unable to connect to tcp://s.w.org:80' ) ) {
+			$this->markTestSkipped( 'HTTP timeout' );
+		}
+
+	}
+
 	/**
 	 * Unregister existing post types and register defaults.
 	 *
@@ -477,7 +502,7 @@ abstract class WP_UnitTestCase_Base extends PHPUnit_Framework_TestCase {
 			$errors[] = "Unexpected incorrect usage notice for $unexpected";
 		}
 
-		// Perform an assertion, but only if there are expected or unexpected deprecated calls or wrongdoings
+		// Perform an assertion, but only if there are expected or unexpected deprecated calls or wrongdoings.
 		if ( ! empty( $this->expected_deprecated ) ||
 			! empty( $this->expected_doing_it_wrong ) ||
 			! empty( $this->caught_deprecated ) ||
@@ -587,7 +612,6 @@ abstract class WP_UnitTestCase_Base extends PHPUnit_Framework_TestCase {
 		$this->assertNotInstanceOf( 'WP_Error', $actual, $message );
 	}
 
-
 	/**
 	 * Asserts that the given value is an instance of IXR_Error.
 	 *
@@ -635,16 +659,43 @@ abstract class WP_UnitTestCase_Base extends PHPUnit_Framework_TestCase {
 		$this->assertEquals( preg_replace( '/\s*/', '', $expected ), preg_replace( '/\s*/', '', $actual ) );
 	}
 
+	/**
+	 * Asserts that two values have the same type and value, with EOL differences discarded.
+	 *
+	 * @since 5.6.0
+	 *
+	 * @param string $expected The expected value.
+	 * @param string $actual   The actual value.
+	 */
+	public function assertSameIgnoreEOL( $expected, $actual ) {
+		$this->assertSame( str_replace( "\r\n", "\n", $expected ), str_replace( "\r\n", "\n", $actual ) );
+	}
+
 	/**
 	 * Asserts that two values are equal, with EOL differences discarded.
 	 *
 	 * @since 5.4.0
+	 * @since 5.6.0 Turned into an alias for `::assertSameIgnoreEOL()`.
 	 *
 	 * @param string $expected The expected value.
 	 * @param string $actual   The actual value.
 	 */
 	public function assertEqualsIgnoreEOL( $expected, $actual ) {
-		$this->assertEquals( str_replace( "\r\n", "\n", $expected ), str_replace( "\r\n", "\n", $actual ) );
+		$this->assertSameIgnoreEOL( $expected, $actual );
+	}
+
+	/**
+	 * Asserts that the contents of two un-keyed, single arrays are the same, without accounting for the order of elements.
+	 *
+	 * @since 5.6.0
+	 *
+	 * @param array $expected Expected array.
+	 * @param array $actual   Array to check.
+	 */
+	public function assertSameSets( $expected, $actual ) {
+		sort( $expected );
+		sort( $actual );
+		$this->assertSame( $expected, $actual );
 	}
 
 	/**
@@ -661,6 +712,20 @@ abstract class WP_UnitTestCase_Base extends PHPUnit_Framework_TestCase {
 		$this->assertEquals( $expected, $actual );
 	}
 
+	/**
+	 * Asserts that the contents of two keyed, single arrays are the same, without accounting for the order of elements.
+	 *
+	 * @since 5.6.0
+	 *
+	 * @param array $expected Expected array.
+	 * @param array $actual   Array to check.
+	 */
+	public function assertSameSetsWithIndex( $expected, $actual ) {
+		ksort( $expected );
+		ksort( $actual );
+		$this->assertSame( $expected, $actual );
+	}
+
 	/**
 	 * Asserts that the contents of two keyed, single arrays are equal, without accounting for the order of elements.
 	 *
@@ -706,9 +771,11 @@ abstract class WP_UnitTestCase_Base extends PHPUnit_Framework_TestCase {
 	 * @param string $url The URL for the request.
 	 */
 	public function go_to( $url ) {
-		// note: the WP and WP_Query classes like to silently fetch parameters
-		// from all over the place (globals, GET, etc), which makes it tricky
-		// to run them more than once without very carefully clearing everything
+		/*
+		 * Note: the WP and WP_Query classes like to silently fetch parameters
+		 * from all over the place (globals, GET, etc), which makes it tricky
+		 * to run them more than once without very carefully clearing everything.
+		 */
 		$_GET  = array();
 		$_POST = array();
 		foreach ( array( 'query_string', 'id', 'postdata', 'authordata', 'day', 'currentmonth', 'page', 'pages', 'multipage', 'more', 'numpages', 'pagenow', 'current_screen' ) as $v ) {
@@ -721,7 +788,7 @@ abstract class WP_UnitTestCase_Base extends PHPUnit_Framework_TestCase {
 			$req = isset( $parts['path'] ) ? $parts['path'] : '';
 			if ( isset( $parts['query'] ) ) {
 				$req .= '?' . $parts['query'];
-				// parse the url query vars into $_GET
+				// Parse the URL query vars into $_GET.
 				parse_str( $parts['query'], $_GET );
 			}
 		} else {
@@ -756,8 +823,8 @@ abstract class WP_UnitTestCase_Base extends PHPUnit_Framework_TestCase {
 	 *
 	 * This is a custom extension of the PHPUnit requirements handling.
 	 *
-	 * Contains legacy code for skipping tests that are associated with an open Trac ticket. Core tests no longer
-	 * support this behaviour.
+	 * Contains legacy code for skipping tests that are associated with an open Trac ticket.
+	 * Core tests no longer support this behaviour.
 	 *
 	 * @since 3.5.0
 	 */
@@ -784,7 +851,8 @@ abstract class WP_UnitTestCase_Base extends PHPUnit_Framework_TestCase {
 			}
 		}
 
-		// Core tests no longer check against open Trac tickets, but others using WP_UnitTestCase may do so.
+		// Core tests no longer check against open Trac tickets,
+		// but others using WP_UnitTestCase may do so.
 		if ( defined( 'WP_RUN_CORE_TESTS' ) && WP_RUN_CORE_TESTS ) {
 			return;
 		}
@@ -889,16 +957,20 @@ abstract class WP_UnitTestCase_Base extends PHPUnit_Framework_TestCase {
 	public function temp_filename() {
 		$tmp_dir = '';
 		$dirs    = array( 'TMP', 'TMPDIR', 'TEMP' );
+
 		foreach ( $dirs as $dir ) {
 			if ( isset( $_ENV[ $dir ] ) && ! empty( $_ENV[ $dir ] ) ) {
 				$tmp_dir = $dir;
 				break;
 			}
 		}
+
 		if ( empty( $tmp_dir ) ) {
-			$tmp_dir = '/tmp';
+			$tmp_dir = get_temp_dir();
 		}
+
 		$tmp_dir = realpath( $tmp_dir );
+
 		return tempnam( $tmp_dir, 'wpunit' );
 	}
 
@@ -941,6 +1013,7 @@ abstract class WP_UnitTestCase_Base extends PHPUnit_Framework_TestCase {
 			'is_posts_page',
 			'is_preview',
 			'is_robots',
+			'is_favicon',
 			'is_search',
 			'is_single',
 			'is_singular',
diff --git a/includes/bootstrap.php b/includes/bootstrap.php
index 97003ae7ff..5c03c46d58 100644
--- a/includes/bootstrap.php
+++ b/includes/bootstrap.php
@@ -7,13 +7,13 @@
  * Compatibility with PHPUnit 6+
  */
 if ( class_exists( 'PHPUnit\Runner\Version' ) ) {
-	require_once dirname( __FILE__ ) . '/phpunit6/compat.php';
+	require_once __DIR__ . '/phpunit6/compat.php';
 }
 
 if ( defined( 'WP_TESTS_CONFIG_FILE_PATH' ) ) {
 	$config_file_path = WP_TESTS_CONFIG_FILE_PATH;
 } else {
-	$config_file_path = dirname( dirname( __FILE__ ) );
+	$config_file_path = dirname( __DIR__ );
 	if ( ! file_exists( $config_file_path . '/wp-tests-config.php' ) ) {
 		// Support the config file from the root of the develop repository.
 		if ( basename( $config_file_path ) === 'phpunit' && basename( dirname( $config_file_path ) ) === 'tests' ) {
@@ -30,32 +30,51 @@ if ( defined( 'WP_TESTS_CONFIG_FILE_PATH' ) ) {
 global $wpdb, $current_site, $current_blog, $wp_rewrite, $shortcode_tags, $wp, $phpmailer, $wp_theme_directories;
 
 if ( ! is_readable( $config_file_path ) ) {
-	echo "ERROR: wp-tests-config.php is missing! Please use wp-tests-config-sample.php to create a config file.\n";
+	echo "Error: wp-tests-config.php is missing! Please use wp-tests-config-sample.php to create a config file.\n";
 	exit( 1 );
 }
 
 require_once $config_file_path;
-require_once dirname( __FILE__ ) . '/functions.php';
+require_once __DIR__ . '/functions.php';
 
-if ( version_compare( tests_get_phpunit_version(), '8.0', '>=' ) ) {
+$phpunit_version = tests_get_phpunit_version();
+
+if ( version_compare( $phpunit_version, '5.4', '<' ) || version_compare( $phpunit_version, '8.0', '>=' ) ) {
 	printf(
-		"ERROR: Looks like you're using PHPUnit %s. WordPress is currently only compatible with PHPUnit up to 7.x.\n",
-		tests_get_phpunit_version()
+		"Error: Looks like you're using PHPUnit %s. WordPress requires at least PHPUnit 5.4 and is currently only compatible with PHPUnit up to 7.x.\n",
+		$phpunit_version
 	);
 	echo "Please use the latest PHPUnit version from the 7.x branch.\n";
 	exit( 1 );
 }
 
 if ( defined( 'WP_RUN_CORE_TESTS' ) && WP_RUN_CORE_TESTS && ! is_dir( ABSPATH ) ) {
-	echo "ERROR: The /build/ directory is missing! Please run `npm run build` prior to running PHPUnit.\n";
+	echo "Error: The /build/ directory is missing! Please run `npm run build` prior to running PHPUnit.\n";
 	exit( 1 );
 }
 
+$required_constants = array(
+	'WP_TESTS_DOMAIN',
+	'WP_TESTS_EMAIL',
+	'WP_TESTS_TITLE',
+	'WP_PHP_BINARY',
+);
+
+foreach ( $required_constants as $constant ) {
+	if ( ! defined( $constant ) ) {
+		printf(
+			"Error: The required %s constant is not defined. Check out `wp-tests-config-sample.php` for an example.\n",
+			$constant
+		);
+		exit( 1 );
+	}
+}
+
 tests_reset__SERVER();
 
 define( 'WP_TESTS_TABLE_PREFIX', $table_prefix );
-define( 'DIR_TESTDATA', dirname( __FILE__ ) . '/../data' );
-define( 'DIR_TESTROOT', realpath( dirname( dirname( __FILE__ ) ) ) );
+define( 'DIR_TESTDATA', __DIR__ . '/../data' );
+define( 'DIR_TESTROOT', realpath( dirname( __DIR__ ) ) );
 
 define( 'WP_LANG_DIR', DIR_TESTDATA . '/languages' );
 
@@ -83,8 +102,8 @@ $multisite = ( '1' === getenv( 'WP_MULTISITE' ) );
 $multisite = $multisite || ( defined( 'WP_TESTS_MULTISITE' ) && WP_TESTS_MULTISITE );
 $multisite = $multisite || ( defined( 'MULTISITE' ) && MULTISITE );
 
-// Override the PHPMailer
-require_once( dirname( __FILE__ ) . '/mock-mailer.php' );
+// Override the PHPMailer.
+require_once __DIR__ . '/mock-mailer.php';
 $phpmailer = new MockPHPMailer( true );
 
 if ( ! defined( 'WP_DEFAULT_THEME' ) ) {
@@ -97,7 +116,10 @@ if ( file_exists( DIR_TESTDATA . '/themedir1' ) ) {
 }
 
 if ( '1' !== getenv( 'WP_TESTS_SKIP_INSTALL' ) ) {
-	system( WP_PHP_BINARY . ' ' . escapeshellarg( dirname( __FILE__ ) . '/install.php' ) . ' ' . escapeshellarg( $config_file_path ) . ' ' . $multisite, $retval );
+	$core_tests = ( defined( 'WP_RUN_CORE_TESTS' ) && WP_RUN_CORE_TESTS ) ? 'run_core_tests' : 'no_core_tests';
+	$ms_tests   = $multisite ? 'run_ms_tests' : 'no_ms_tests';
+
+	system( WP_PHP_BINARY . ' ' . escapeshellarg( __DIR__ . '/install.php' ) . ' ' . escapeshellarg( $config_file_path ) . ' ' . $ms_tests . ' ' . $core_tests, $retval );
 	if ( 0 !== $retval ) {
 		exit( $retval );
 	}
@@ -114,13 +136,13 @@ if ( $multisite ) {
 unset( $multisite );
 
 $GLOBALS['_wp_die_disabled'] = false;
-// Allow tests to override wp_die
+// Allow tests to override wp_die().
 tests_add_filter( 'wp_die_handler', '_wp_die_handler_filter' );
-// Use the Spy REST Server instead of default
+// Use the Spy REST Server instead of default.
 tests_add_filter( 'wp_rest_server_class', '_wp_rest_server_class_filter' );
 
 // Preset WordPress options defined in bootstrap file.
-// Used to activate themes, plugins, as well as  other settings.
+// Used to activate themes, plugins, as well as other settings.
 if ( isset( $GLOBALS['wp_tests_options'] ) ) {
 	function wp_tests_options( $value ) {
 		$key = substr( current_filter(), strlen( 'pre_option_' ) );
@@ -132,29 +154,34 @@ if ( isset( $GLOBALS['wp_tests_options'] ) ) {
 	}
 }
 
-// Load WordPress
+// Load WordPress.
 require_once ABSPATH . '/wp-settings.php';
 
-// Delete any default posts & related data
+// Delete any default posts & related data.
 _delete_all_posts();
 
 if ( version_compare( tests_get_phpunit_version(), '7.0', '>=' ) ) {
-	require dirname( __FILE__ ) . '/phpunit7/testcase.php';
+	require __DIR__ . '/phpunit7/testcase.php';
 } else {
-	require dirname( __FILE__ ) . '/testcase.php';
+	require __DIR__ . '/testcase.php';
 }
 
-require dirname( __FILE__ ) . '/testcase-rest-api.php';
-require dirname( __FILE__ ) . '/testcase-rest-controller.php';
-require dirname( __FILE__ ) . '/testcase-rest-post-type-controller.php';
-require dirname( __FILE__ ) . '/testcase-xmlrpc.php';
-require dirname( __FILE__ ) . '/testcase-ajax.php';
-require dirname( __FILE__ ) . '/testcase-canonical.php';
-require dirname( __FILE__ ) . '/exceptions.php';
-require dirname( __FILE__ ) . '/utils.php';
-require dirname( __FILE__ ) . '/spy-rest-server.php';
-require dirname( __FILE__ ) . '/class-wp-rest-test-search-handler.php';
-require dirname( __FILE__ ) . '/class-wp-fake-block-type.php';
+require __DIR__ . '/testcase-rest-api.php';
+require __DIR__ . '/testcase-rest-controller.php';
+require __DIR__ . '/testcase-rest-post-type-controller.php';
+require __DIR__ . '/testcase-xmlrpc.php';
+require __DIR__ . '/testcase-ajax.php';
+require __DIR__ . '/testcase-canonical.php';
+require __DIR__ . '/testcase-xml.php';
+require __DIR__ . '/exceptions.php';
+require __DIR__ . '/utils.php';
+require __DIR__ . '/spy-rest-server.php';
+require __DIR__ . '/class-wp-rest-test-search-handler.php';
+require __DIR__ . '/class-wp-rest-test-configurable-controller.php';
+require __DIR__ . '/class-wp-fake-block-type.php';
+require __DIR__ . '/class-wp-sitemaps-test-provider.php';
+require __DIR__ . '/class-wp-sitemaps-empty-test-provider.php';
+require __DIR__ . '/class-wp-sitemaps-large-test-provider.php';
 
 /**
  * A class to handle additional command line arguments passed to the script.
diff --git a/includes/class-wp-rest-test-configurable-controller.php b/includes/class-wp-rest-test-configurable-controller.php
new file mode 100644
index 0000000000..f67bbeb5ae
--- /dev/null
+++ b/includes/class-wp-rest-test-configurable-controller.php
@@ -0,0 +1,60 @@
+<?php
+/**
+ * Unit tests covering WP_REST_Controller functionality using a flexible schema.
+ *
+ * @package WordPress
+ * @subpackage REST API
+ * @since 5.4.0
+ */
+
+/**
+ * WP_REST_Test_Configurable_Controller class.
+ *
+ * @group restapi
+ *
+ * @since 5.4.0
+ */
+class WP_REST_Test_Configurable_Controller extends WP_REST_Controller {
+
+	/**
+	 * Test schema.
+	 *
+	 * @since 5.4.0
+	 *
+	 * @var array $test_schema
+	 */
+	protected $test_schema;
+
+	/**
+	 * Class constructor.
+	 *
+	 * @since 5.4.0
+	 *
+	 * @param array $test_schema Schema for use in testing.
+	 */
+	public function __construct( $test_schema ) {
+		$this->test_schema = $test_schema;
+	}
+
+	/**
+	 * Provides the test schema.
+	 *
+	 * @since 5.4.0
+	 *
+	 * @return array Test schema.
+	 */
+	public function get_test_schema() {
+		return $this->test_schema;
+	}
+
+	/**
+	 * Get the item's schema, conforming to JSON Schema.
+	 *
+	 * @since 5.4.0
+	 *
+	 * @return array
+	 */
+	public function get_item_schema() {
+		return $this->add_additional_fields_schema( $this->get_test_schema() );
+	}
+}
diff --git a/includes/class-wp-sitemaps-empty-test-provider.php b/includes/class-wp-sitemaps-empty-test-provider.php
new file mode 100644
index 0000000000..c772c3941c
--- /dev/null
+++ b/includes/class-wp-sitemaps-empty-test-provider.php
@@ -0,0 +1,38 @@
+<?php
+
+/**
+ * Class WP_Sitemaps_Empty_Test_Provider.
+ *
+ * Provides test data for additional registered providers.
+ */
+class WP_Sitemaps_Empty_Test_Provider extends WP_Sitemaps_Provider {
+	/**
+	 * WP_Sitemaps_Empty_Test_Provider constructor.
+	 *
+	 * @param string $object_type Optional. Object type name to use. Default 'test'.
+	 */
+	public function __construct( $object_type = 'test' ) {
+		$this->object_type = $object_type;
+	}
+
+	/**
+	 * Gets a URL list for a sitemap.
+	 *
+	 * @param int    $page_num       Page of results.
+	 * @param string $object_subtype Optional. Object subtype name. Default empty.
+	 * @return array List of URLs for a sitemap.
+	 */
+	public function get_url_list( $page_num, $object_subtype = '' ) {
+		return array();
+	}
+
+	/**
+	 * Query for determining the number of pages.
+	 *
+	 * @param string $object_subtype Optional. Object subtype. Default empty.
+	 * @return int Total number of pages.
+	 */
+	public function get_max_num_pages( $object_subtype = '' ) {
+		return 0;
+	}
+}
diff --git a/includes/class-wp-sitemaps-large-test-provider.php b/includes/class-wp-sitemaps-large-test-provider.php
new file mode 100644
index 0000000000..67563c654d
--- /dev/null
+++ b/includes/class-wp-sitemaps-large-test-provider.php
@@ -0,0 +1,59 @@
+<?php
+
+/**
+ * Class WP_Sitemaps_Large_Test_Provider.
+ *
+ * Provides test data for additional registered providers.
+ */
+class WP_Sitemaps_Large_Test_Provider extends WP_Sitemaps_Provider {
+	/**
+	 * Number of entries in the sitemap the provider produces.
+	 *
+	 * @var integer
+	 */
+	public $num_entries = 1;
+
+	/**
+	 * WP_Sitemaps_Large_Test_Provider constructor.
+	 *
+	 * @param int $num_entries Optional. Number of entries in in the sitemap.
+	 */
+	public function __construct( $num_entries = 50001 ) {
+		$this->name        = 'tests';
+		$this->object_type = 'test';
+
+		$this->num_entries = $num_entries;
+	}
+
+	/**
+	 * Gets a URL list for a sitemap.
+	 *
+	 * @param int    $page_num       Page of results.
+	 * @param string $object_subtype Optional. Object subtype name. Default empty.
+	 * @return array List of URLs for a sitemap.
+	 */
+	public function get_url_list( $page_num, $object_subtype = '' ) {
+		return array_fill( 0, $this->num_entries, array( 'loc' => home_url( '/' ) ) );
+	}
+
+	/**
+	 * Lists sitemap pages exposed by this provider.
+	 *
+	 * The returned data is used to populate the sitemap entries of the index.
+	 *
+	 * @return array[] Array of sitemap entries.
+	 */
+	public function get_sitemap_entries() {
+		return array_fill( 0, $this->num_entries, array( 'loc' => home_url( '/' ) ) );
+	}
+
+	/**
+	 * Query for determining the number of pages.
+	 *
+	 * @param string $object_subtype Optional. Object subtype. Default empty.
+	 * @return int Total number of pages.
+	 */
+	public function get_max_num_pages( $object_subtype = '' ) {
+		return $this->num_entries;
+	}
+}
diff --git a/includes/class-wp-sitemaps-test-provider.php b/includes/class-wp-sitemaps-test-provider.php
new file mode 100644
index 0000000000..389bb6c7bf
--- /dev/null
+++ b/includes/class-wp-sitemaps-test-provider.php
@@ -0,0 +1,52 @@
+<?php
+
+/**
+ * Class WP_Sitemaps_Test_Provider.
+ *
+ * Provides test data for additional registered providers.
+ */
+class WP_Sitemaps_Test_Provider extends WP_Sitemaps_Provider {
+	/**
+	 * WP_Sitemaps_Posts constructor.
+	 *
+	 * @param string $object_type Optional. Object type name to use. Default 'test'.
+	 */
+	public function __construct( $object_type = 'test' ) {
+		$this->object_type = $object_type;
+	}
+
+	/**
+	 * Return the public post types, which excludes nav_items and similar types.
+	 * Attachments are also excluded. This includes custom post types with public = true
+	 *
+	 * @return array Map of object subtype objects (WP_Post_Type) keyed by their name.
+	 */
+	public function get_object_subtypes() {
+		return array(
+			'type-1' => (object) array( 'name' => 'type-1' ),
+			'type-2' => (object) array( 'name' => 'type-2' ),
+			'type-3' => (object) array( 'name' => 'type-3' ),
+		);
+	}
+
+	/**
+	 * Gets a URL list for a sitemap.
+	 *
+	 * @param int    $page_num       Page of results.
+	 * @param string $object_subtype Optional. Object subtype name. Default empty.
+	 * @return array List of URLs for a sitemap.
+	 */
+	public function get_url_list( $page_num, $object_subtype = '' ) {
+		return array();
+	}
+
+	/**
+	 * Query for determining the number of pages.
+	 *
+	 * @param string $object_subtype Optional. Object subtype. Default empty.
+	 * @return int Total number of pages.
+	 */
+	public function get_max_num_pages( $object_subtype = '' ) {
+		return 4;
+	}
+}
diff --git a/includes/exceptions.php b/includes/exceptions.php
index 50976fb0b3..138c12e18c 100644
--- a/includes/exceptions.php
+++ b/includes/exceptions.php
@@ -5,13 +5,14 @@ class WP_Tests_Exception extends PHPUnit_Framework_Exception {
 }
 
 /**
- * General exception for wp_die()
+ * General exception for wp_die().
  */
 class WPDieException extends Exception {}
 
 /**
- * Exception for cases of wp_die(), for ajax tests.
- * This means there was an error (no output, and a call to wp_die)
+ * Exception for cases of wp_die(), for Ajax tests.
+ *
+ * This means there was an error (no output, and a call to wp_die).
  *
  * @package    WordPress
  * @subpackage Unit Tests
@@ -20,11 +21,11 @@ class WPDieException extends Exception {}
 class WPAjaxDieStopException extends WPDieException {}
 
 /**
- * Exception for cases of wp_die(), for ajax tests.
- * This means execution of the ajax function should be halted, but the unit
- * test can continue.  The function finished normally and there was not an
- * error (output happened, but wp_die was called to end execution)  This is
- * used with WP_Ajax_Response::send
+ * Exception for cases of wp_die(), for Ajax tests.
+ *
+ * This means the execution of the Ajax function should be halted, but the unit test
+ * can continue. The function finished normally and there was no error (output happened,
+ * but wp_die was called to end execution). This is used with WP_Ajax_Response::send().
  *
  * @package    WordPress
  * @subpackage Unit Tests
diff --git a/includes/factory.php b/includes/factory.php
index 91d7da750e..8f3b5229e0 100644
--- a/includes/factory.php
+++ b/includes/factory.php
@@ -1,14 +1,14 @@
 <?php
 
-require_once( dirname( __FILE__ ) . '/factory/class-wp-unittest-factory-for-thing.php' );
-require_once( dirname( __FILE__ ) . '/factory/class-wp-unittest-factory-for-post.php' );
-require_once( dirname( __FILE__ ) . '/factory/class-wp-unittest-factory-for-bookmark.php' );
-require_once( dirname( __FILE__ ) . '/factory/class-wp-unittest-factory-for-attachment.php' );
-require_once( dirname( __FILE__ ) . '/factory/class-wp-unittest-factory-for-user.php' );
-require_once( dirname( __FILE__ ) . '/factory/class-wp-unittest-factory-for-comment.php' );
-require_once( dirname( __FILE__ ) . '/factory/class-wp-unittest-factory-for-blog.php' );
-require_once( dirname( __FILE__ ) . '/factory/class-wp-unittest-factory-for-network.php' );
-require_once( dirname( __FILE__ ) . '/factory/class-wp-unittest-factory-for-term.php' );
-require_once( dirname( __FILE__ ) . '/factory/class-wp-unittest-generator-sequence.php' );
-require_once( dirname( __FILE__ ) . '/factory/class-wp-unittest-factory-callback-after-create.php' );
-require_once( dirname( __FILE__ ) . '/factory/class-wp-unittest-factory.php' );
+require_once __DIR__ . '/factory/class-wp-unittest-factory-for-thing.php';
+require_once __DIR__ . '/factory/class-wp-unittest-factory-for-post.php';
+require_once __DIR__ . '/factory/class-wp-unittest-factory-for-bookmark.php';
+require_once __DIR__ . '/factory/class-wp-unittest-factory-for-attachment.php';
+require_once __DIR__ . '/factory/class-wp-unittest-factory-for-user.php';
+require_once __DIR__ . '/factory/class-wp-unittest-factory-for-comment.php';
+require_once __DIR__ . '/factory/class-wp-unittest-factory-for-blog.php';
+require_once __DIR__ . '/factory/class-wp-unittest-factory-for-network.php';
+require_once __DIR__ . '/factory/class-wp-unittest-factory-for-term.php';
+require_once __DIR__ . '/factory/class-wp-unittest-generator-sequence.php';
+require_once __DIR__ . '/factory/class-wp-unittest-factory-callback-after-create.php';
+require_once __DIR__ . '/factory/class-wp-unittest-factory.php';
diff --git a/includes/factory/class-wp-unittest-factory-callback-after-create.php b/includes/factory/class-wp-unittest-factory-callback-after-create.php
index 8becb3239f..5f544e5569 100644
--- a/includes/factory/class-wp-unittest-factory-callback-after-create.php
+++ b/includes/factory/class-wp-unittest-factory-callback-after-create.php
@@ -17,7 +17,7 @@ class WP_UnitTest_Factory_Callback_After_Create {
 	}
 
 	/**
-	 * Calls the set callback on given object.
+	 * Calls the set callback on a given object.
 	 *
 	 * @param mixed $object The object to apply the callback on.
 	 *
diff --git a/includes/factory/class-wp-unittest-factory-for-attachment.php b/includes/factory/class-wp-unittest-factory-for-attachment.php
index 98f1be8fde..ffa5756859 100644
--- a/includes/factory/class-wp-unittest-factory-for-attachment.php
+++ b/includes/factory/class-wp-unittest-factory-for-attachment.php
@@ -14,7 +14,7 @@ class WP_UnitTest_Factory_For_Attachment extends WP_UnitTest_Factory_For_Post {
 	 * @param int   $legacy_parent Deprecated.
 	 * @param array $legacy_args   Deprecated.
 	 *
-	 * @return  int|WP_Error The attachment ID on success. The value 0 or WP_Error on failure.
+	 * @return int|WP_Error The attachment ID on success. The value 0 or WP_Error on failure.
 	 */
 	public function create_object( $args, $legacy_parent = 0, $legacy_args = array() ) {
 		// Backward compatibility for legacy argument format.
@@ -40,7 +40,7 @@ class WP_UnitTest_Factory_For_Attachment extends WP_UnitTest_Factory_For_Post {
 	 * Saves an attachment.
 	 *
 	 * @param string $file   The file name to create attachment object for.
-	 * @param int    $parent The post id to attach the file to.
+	 * @param int    $parent ID of the post to attach the file to.
 	 *
 	 * @return int|WP_Error The attachment ID on success. The value 0 or WP_Error on failure.
 	 */
@@ -67,7 +67,7 @@ class WP_UnitTest_Factory_For_Attachment extends WP_UnitTest_Factory_For_Post {
 			'guid'           => $upload['url'],
 		);
 
-		// Save the data
+		// Save the data.
 		$id = wp_insert_attachment( $attachment, $upload['file'], $parent );
 		wp_update_attachment_metadata( $id, wp_generate_attachment_metadata( $id, $upload['file'] ) );
 
diff --git a/includes/factory/class-wp-unittest-factory-for-blog.php b/includes/factory/class-wp-unittest-factory-for-blog.php
index 68d24d30bb..aba7f0d378 100644
--- a/includes/factory/class-wp-unittest-factory-for-blog.php
+++ b/includes/factory/class-wp-unittest-factory-for-blog.php
@@ -16,27 +16,50 @@ class WP_UnitTest_Factory_For_Blog extends WP_UnitTest_Factory_For_Thing {
 		global $current_site, $base;
 		parent::__construct( $factory );
 		$this->default_generation_definitions = array(
-			'domain'  => $current_site->domain,
-			'path'    => new WP_UnitTest_Generator_Sequence( $base . 'testpath%s' ),
-			'title'   => new WP_UnitTest_Generator_Sequence( 'Site %s' ),
-			'site_id' => $current_site->id,
+			'domain'     => $current_site->domain,
+			'path'       => new WP_UnitTest_Generator_Sequence( $base . 'testpath%s' ),
+			'title'      => new WP_UnitTest_Generator_Sequence( 'Site %s' ),
+			'network_id' => $current_site->id,
 		);
 	}
 
 	/**
-	 * Creates a blog object.
+	 * Creates a site object.
 	 *
 	 * @param array $args Arguments for the site object.
 	 *
-	 * @return int|WP_Error Returns WP_Error object on failure, the site ID on success.
+	 * @return int|WP_Error The site ID on success, WP_Error object on failure.
 	 */
 	public function create_object( $args ) {
 		global $wpdb;
-		$meta    = isset( $args['meta'] ) ? $args['meta'] : array( 'public' => 1 );
-		$user_id = isset( $args['user_id'] ) ? $args['user_id'] : get_current_user_id();
-		// temp tables will trigger db errors when we attempt to reference them as new temp tables
+
+		// Map some arguments for backward compatibility with `wpmu_create_blog()` previously used here.
+		if ( isset( $args['site_id'] ) ) {
+			$args['network_id'] = $args['site_id'];
+			unset( $args['site_id'] );
+		}
+
+		if ( isset( $args['meta'] ) ) {
+			// The `$allowed_data_fields` matches the one used in `wpmu_create_blog()`.
+			$allowed_data_fields = array( 'public', 'archived', 'mature', 'spam', 'deleted', 'lang_id' );
+
+			foreach ( $args['meta'] as $key => $value ) {
+				// Promote allowed keys to top-level arguments, add others to the options array.
+				if ( in_array( $key, $allowed_data_fields, true ) ) {
+					$args[ $key ] = $value;
+				} else {
+					$args['options'][ $key ] = $value;
+				}
+			}
+
+			unset( $args['meta'] );
+		}
+
+		// Temporary tables will trigger DB errors when we attempt to reference them as new temporary tables.
 		$suppress = $wpdb->suppress_errors();
-		$blog     = wpmu_create_blog( $args['domain'], $args['path'], $args['title'], $user_id, $meta, $args['site_id'] );
+
+		$blog = wp_insert_site( $args );
+
 		$wpdb->suppress_errors( $suppress );
 
 		// Tell WP we're done installing.
@@ -46,9 +69,9 @@ class WP_UnitTest_Factory_For_Blog extends WP_UnitTest_Factory_For_Thing {
 	}
 
 	/**
-	 * Updates a blog object. Not implemented.
+	 * Updates a site object. Not implemented.
 	 *
-	 * @param int   $blog_id The blog id to update.
+	 * @param int   $blog_id ID of the site to update.
 	 * @param array $fields  The fields to update.
 	 *
 	 * @return void
@@ -56,11 +79,11 @@ class WP_UnitTest_Factory_For_Blog extends WP_UnitTest_Factory_For_Thing {
 	public function update_object( $blog_id, $fields ) {}
 
 	/**
-	 * Retrieves a site by given blog id.
+	 * Retrieves a site by a given ID.
 	 *
-	 * @param int $blog_id The blog id to retrieve.
+	 * @param int $blog_id ID of the site to retrieve.
 	 *
-	 * @return null|WP_Site The site object or null if not found.
+	 * @return WP_Site|null The site object on success, null on failure.
 	 */
 	public function get_object_by_id( $blog_id ) {
 		return get_site( $blog_id );
diff --git a/includes/factory/class-wp-unittest-factory-for-comment.php b/includes/factory/class-wp-unittest-factory-for-comment.php
index dcec0439aa..17f37437ce 100644
--- a/includes/factory/class-wp-unittest-factory-for-comment.php
+++ b/includes/factory/class-wp-unittest-factory-for-comment.php
@@ -27,7 +27,7 @@ class WP_UnitTest_Factory_For_Comment extends WP_UnitTest_Factory_For_Thing {
 	 *
 	 * @param array $args The comment details.
 	 *
-	 * @return false|int The comment's ID on success, false on failure.
+	 * @return int|false The comment's ID on success, false on failure.
 	 */
 	public function create_object( $args ) {
 		return wp_insert_comment( $this->addslashes_deep( $args ) );
@@ -36,10 +36,10 @@ class WP_UnitTest_Factory_For_Comment extends WP_UnitTest_Factory_For_Thing {
 	/**
 	 * Updates a comment.
 	 *
-	 * @param int   $comment_id The comment id.
+	 * @param int   $comment_id The comment ID.
 	 * @param array $fields     The comment details.
 	 *
-	 * @return int When updated 1, not update 0.
+	 * @return int The value 1 if the comment was updated, 0 if not updated.
 	 */
 	public function update_object( $comment_id, $fields ) {
 		$fields['comment_ID'] = $comment_id;
@@ -47,14 +47,14 @@ class WP_UnitTest_Factory_For_Comment extends WP_UnitTest_Factory_For_Thing {
 	}
 
 	/**
-	 * Creates multiple comments on given post.
+	 * Creates multiple comments on a given post.
 	 *
-	 * @param int   $post_id                The post id to create comments for.
+	 * @param int   $post_id                ID of the post to create comments for.
 	 * @param int   $count                  Total amount of comments to create.
 	 * @param array $args                   The comment details.
 	 * @param null  $generation_definitions Default values.
 	 *
-	 * @return int[] Array with the comment ids.
+	 * @return int[] Array with the comment IDs.
 	 */
 	public function create_post_comments( $post_id, $count = 1, $args = array(), $generation_definitions = null ) {
 		$args['comment_post_ID'] = $post_id;
@@ -62,11 +62,11 @@ class WP_UnitTest_Factory_For_Comment extends WP_UnitTest_Factory_For_Thing {
 	}
 
 	/**
-	 * Returns a comment.
+	 * Retrieves a comment by a given ID.
 	 *
-	 * @param int $comment_id The comment id.
+	 * @param int $comment_id ID of the comment to retrieve.
 	 *
-	 * @return null|WP_Comment WP_Comment when found, null when not found.
+	 * @return WP_Comment|null WP_Comment object on success, null on failure.
 	 */
 	public function get_object_by_id( $comment_id ) {
 		return get_comment( $comment_id );
diff --git a/includes/factory/class-wp-unittest-factory-for-network.php b/includes/factory/class-wp-unittest-factory-for-network.php
index 419957e0f9..b6d3ece393 100644
--- a/includes/factory/class-wp-unittest-factory-for-network.php
+++ b/includes/factory/class-wp-unittest-factory-for-network.php
@@ -33,7 +33,7 @@ class WP_UnitTest_Factory_For_Network extends WP_UnitTest_Factory_For_Thing {
 		}
 
 		populate_network( $args['network_id'], $args['domain'], $email, $args['title'], $args['path'], $args['subdomain_install'] );
-		return $args['network_id'];
+		return (int) $args['network_id'];
 	}
 
 	public function update_object( $network_id, $fields ) {}
diff --git a/includes/factory/class-wp-unittest-factory-for-post.php b/includes/factory/class-wp-unittest-factory-for-post.php
index af71802d5f..2ea054bc41 100644
--- a/includes/factory/class-wp-unittest-factory-for-post.php
+++ b/includes/factory/class-wp-unittest-factory-for-post.php
@@ -37,10 +37,10 @@ class WP_UnitTest_Factory_For_Post extends WP_UnitTest_Factory_For_Thing {
 	/**
 	 * Updates an existing post object.
 	 *
-	 * @param int   $post_id The post id to update.
+	 * @param int   $post_id ID of the post to update.
 	 * @param array $fields  Post data.
 	 *
-	 * @return int|WP_Error The value 0 or WP_Error on failure. The post ID on success.
+	 * @return int|WP_Error The post ID on success. The value 0 or WP_Error on failure.
 	 */
 	public function update_object( $post_id, $fields ) {
 		$fields['ID'] = $post_id;
@@ -48,11 +48,11 @@ class WP_UnitTest_Factory_For_Post extends WP_UnitTest_Factory_For_Thing {
 	}
 
 	/**
-	 * Retrieves a object by an id.
+	 * Retrieves a post by a given ID.
 	 *
-	 * @param int   $post_id The post id to update.
+	 * @param int $post_id ID of the post to retrieve.
 	 *
-	 * @return null|WP_Post WP_Post on success or null on failure.
+	 * @return WP_Post|null WP_Post object on success, null on failure.
 	 */
 	public function get_object_by_id( $post_id ) {
 		return get_post( $post_id );
diff --git a/includes/factory/class-wp-unittest-factory-for-term.php b/includes/factory/class-wp-unittest-factory-for-term.php
index 06340c852b..bc81c8d0a2 100644
--- a/includes/factory/class-wp-unittest-factory-for-term.php
+++ b/includes/factory/class-wp-unittest-factory-for-term.php
@@ -7,6 +7,7 @@
  * as a way to indicate expected return values from the given factory methods.
  *
  * @method int create( $args = array(), $generation_definitions = null )
+ * @method WP_Term create_and_get( $args = array(), $generation_definitions = null )
  * @method int[] create_many( $count, $args = array(), $generation_definitions = null )
  */
 class WP_UnitTest_Factory_For_Term extends WP_UnitTest_Factory_For_Thing {
@@ -46,7 +47,7 @@ class WP_UnitTest_Factory_For_Term extends WP_UnitTest_Factory_For_Thing {
 	 * @param int|object   $term   The term to update.
 	 * @param array|string $fields The context in which to relate the term to the object.
 	 *
-	 * @return int The term id.
+	 * @return int The term ID.
 	 */
 	public function update_object( $term, $fields ) {
 		$fields = array_merge( array( 'taxonomy' => $this->taxonomy ), $fields );
@@ -58,9 +59,9 @@ class WP_UnitTest_Factory_For_Term extends WP_UnitTest_Factory_For_Thing {
 	}
 
 	/**
-	 * Attach terms on the given post.
+	 * Attach terms to the given post.
 	 *
-	 * @param int          $post_id  The Post ID.
+	 * @param int          $post_id  The post ID.
 	 * @param string|array $terms    An array of terms to set for the post, or a string of terms
 	 *                               separated by commas. Hierarchical taxonomies must always pass IDs rather
 	 *                               than names so that children with the same names but different parents
@@ -76,12 +77,12 @@ class WP_UnitTest_Factory_For_Term extends WP_UnitTest_Factory_For_Thing {
 	}
 
 	/**
-	 * Create a term and returns it as a object.
+	 * Create a term and returns it as an object.
 	 *
 	 * @param array $args                   Array or string of arguments for inserting a term.
 	 * @param null  $generation_definitions The default values.
 	 *
-	 * @return null|WP_Error|WP_Term WP_Term on success. WP_error if taxonomy does not exist. Null for miscellaneous failure.
+	 * @return WP_Term|WP_Error|null WP_Term on success. WP_error if taxonomy does not exist. Null for miscellaneous failure.
 	 */
 	public function create_and_get( $args = array(), $generation_definitions = null ) {
 		$term_id = $this->create( $args, $generation_definitions );
@@ -95,11 +96,11 @@ class WP_UnitTest_Factory_For_Term extends WP_UnitTest_Factory_For_Thing {
 	}
 
 	/**
-	 * Retrieves the term by given term id.
+	 * Retrieves the term by a given ID.
 	 *
-	 * @param int $term_id The term id to retrieve.
+	 * @param int $term_id ID of the term to retrieve.
 	 *
-	 * @return null|WP_Error|WP_Term WP_Term on success. WP_error if taxonomy does not exist. Null for miscellaneous failure.
+	 * @return WP_Term|WP_Error|null WP_Term on success. WP_error if taxonomy does not exist. Null for miscellaneous failure.
 	 */
 	public function get_object_by_id( $term_id ) {
 		return get_term( $term_id, $this->taxonomy );
diff --git a/includes/factory/class-wp-unittest-factory-for-thing.php b/includes/factory/class-wp-unittest-factory-for-thing.php
index 2ae24a1f95..d996213f45 100644
--- a/includes/factory/class-wp-unittest-factory-for-thing.php
+++ b/includes/factory/class-wp-unittest-factory-for-thing.php
@@ -33,7 +33,7 @@ abstract class WP_UnitTest_Factory_For_Thing {
 	/**
 	 * Updates an existing object.
 	 *
-	 * @param int   $object The object id.
+	 * @param int   $object The object ID.
 	 * @param array $fields The values to update.
 	 *
 	 * @return mixed The result. Can be anything.
@@ -90,7 +90,7 @@ abstract class WP_UnitTest_Factory_For_Thing {
 	/**
 	 * Retrieves an object by ID.
 	 *
-	 * @param int $object_id The object id.
+	 * @param int $object_id The object ID.
 	 *
 	 * @return mixed The object. Can be anything.
 	 */
@@ -114,7 +114,7 @@ abstract class WP_UnitTest_Factory_For_Thing {
 	}
 
 	/**
-	 * Combines the given argument with the generation_definitions (defaults) and applies
+	 * Combines the given arguments with the generation_definitions (defaults) and applies
 	 * possibly set callbacks on it.
 	 *
 	 * @param array       $args                   Optional. The arguments to combine with defaults. Default is empty array.
@@ -130,8 +130,9 @@ abstract class WP_UnitTest_Factory_For_Thing {
 		}
 
 		// Use the same incrementor for all fields belonging to this object.
-		$gen  = new WP_UnitTest_Generator_Sequence();
-		$incr = $gen->get_incr();
+		$gen = new WP_UnitTest_Generator_Sequence();
+		// Add leading zeros to make sure MySQL sorting works as expected.
+		$incr = zeroise( $gen->get_incr(), 7 );
 
 		foreach ( array_keys( $generation_definitions ) as $field_name ) {
 			if ( ! isset( $args[ $field_name ] ) ) {
diff --git a/includes/factory/class-wp-unittest-factory-for-user.php b/includes/factory/class-wp-unittest-factory-for-user.php
index 3a22ba08d7..966eed8021 100644
--- a/includes/factory/class-wp-unittest-factory-for-user.php
+++ b/includes/factory/class-wp-unittest-factory-for-user.php
@@ -26,7 +26,7 @@ class WP_UnitTest_Factory_For_User extends WP_UnitTest_Factory_For_Thing {
 	 *
 	 * @param array $args The user data to insert.
 	 *
-	 * @return int|WP_Error
+	 * @return int|WP_Error The user ID on success, WP_Error object on failure.
 	 */
 	public function create_object( $args ) {
 		return wp_insert_user( $args );
@@ -35,10 +35,10 @@ class WP_UnitTest_Factory_For_User extends WP_UnitTest_Factory_For_Thing {
 	/**
 	 * Updates the user data.
 	 *
-	 * @param int   $user_id The user id to update.
+	 * @param int   $user_id ID of the user to update.
 	 * @param array $fields  The user data to update.
 	 *
-	 * @return int|WP_Error User id on success. WP_Error on failure.
+	 * @return int|WP_Error The user ID on success, WP_Error object on failure.
 	 */
 	public function update_object( $user_id, $fields ) {
 		$fields['ID'] = $user_id;
@@ -46,11 +46,11 @@ class WP_UnitTest_Factory_For_User extends WP_UnitTest_Factory_For_Thing {
 	}
 
 	/**
-	 * Retrieves the user for given user id.
+	 * Retrieves the user for a given ID.
 	 *
-	 * @param int $user_id The user id to get.
+	 * @param int $user_id ID of the user ID to retrieve.
 	 *
-	 * @return WP_User The user.
+	 * @return WP_User The user object.
 	 */
 	public function get_object_by_id( $user_id ) {
 		return new WP_User( $user_id );
diff --git a/includes/functions.php b/includes/functions.php
index f4491b7a77..f0f9db10c3 100644
--- a/includes/functions.php
+++ b/includes/functions.php
@@ -10,8 +10,7 @@ function tests_get_phpunit_version() {
 	if ( class_exists( 'PHPUnit_Runner_Version' ) ) {
 		$version = PHPUnit_Runner_Version::id();
 	} elseif ( class_exists( 'PHPUnit\Runner\Version' ) ) {
-		// Must be parsable by PHP 5.2.x.
-		$version = call_user_func( 'PHPUnit\Runner\Version::id' );
+		$version = PHPUnit\Runner\Version::id();
 	} else {
 		$version = 0;
 	}
@@ -38,11 +37,17 @@ function tests_reset__SERVER() { // phpcs:ignore WordPress.NamingConventions.Val
 /**
  * Adds hooks before loading WP.
  *
- * @param string       $tag             The name for the filter to add.
- * @param object|array $function_to_add The function/callback to execute on call.
- * @param int          $priority        The priority.
- * @param int          $accepted_args   The amount of accepted arguments.
- * @return bool Always true.
+ * @see add_filter()
+ *
+ * @param string   $tag             The name of the filter to hook the $function_to_add callback to.
+ * @param callable $function_to_add The callback to be run when the filter is applied.
+ * @param int      $priority        Optional. Used to specify the order in which the functions
+ *                                  associated with a particular action are executed.
+ *                                  Lower numbers correspond with earlier execution,
+ *                                  and functions with the same priority are executed
+ *                                  in the order in which they were added to the action. Default 10.
+ * @param int      $accepted_args   Optional. The number of arguments the function accepts. Default 1.
+ * @return true
  */
 function tests_add_filter( $tag, $function_to_add, $priority = 10, $accepted_args = 1 ) {
 	global $wp_filter;
@@ -50,7 +55,8 @@ function tests_add_filter( $tag, $function_to_add, $priority = 10, $accepted_arg
 	if ( function_exists( 'add_filter' ) ) {
 		add_filter( $tag, $function_to_add, $priority, $accepted_args );
 	} else {
-		$idx                                    = _test_filter_build_unique_id( $tag, $function_to_add, $priority );
+		$idx = _test_filter_build_unique_id( $tag, $function_to_add, $priority );
+
 		$wp_filter[ $tag ][ $priority ][ $idx ] = array(
 			'function'      => $function_to_add,
 			'accepted_args' => $accepted_args,
@@ -62,10 +68,13 @@ function tests_add_filter( $tag, $function_to_add, $priority = 10, $accepted_arg
 /**
  * Generates a unique function ID based on the given arguments.
  *
- * @param string       $tag      Unused. The name of the filter to build ID for.
- * @param object|array $function The function to generate ID for.
- * @param int          $priority Unused. The priority.
- * @return string Unique function ID.
+ * @see _wp_filter_build_unique_id()
+ *
+ * @param string   $tag      Unused. The name of the filter to build ID for.
+ * @param callable $function The function to generate ID for.
+ * @param int      $priority Unused. The order in which the functions
+ *                           associated with a particular action are executed.
+ * @return string Unique function ID for usage as array key.
  */
 function _test_filter_build_unique_id( $tag, $function, $priority ) {
 	if ( is_string( $function ) ) {
@@ -80,10 +89,11 @@ function _test_filter_build_unique_id( $tag, $function, $priority ) {
 	}
 
 	if ( is_object( $function[0] ) ) {
+		// Object class calling.
 		return spl_object_hash( $function[0] ) . $function[1];
 	} elseif ( is_string( $function[0] ) ) {
-		// Static Calling.
-		return $function[0] . $function[1];
+		// Static calling.
+		return $function[0] . '::' . $function[1];
 	}
 }
 
@@ -150,7 +160,7 @@ function _wp_die_handler( $message, $title = '', $args = array() ) {
 	if ( ! $GLOBALS['_wp_die_disabled'] ) {
 		_wp_die_handler_txt( $message, $title, $args );
 	} else {
-		//Ignore at our peril
+		// Ignore at our peril.
 	}
 }
 
@@ -195,8 +205,12 @@ function _wp_die_handler_filter_exit() {
  */
 function _wp_die_handler_txt( $message, $title, $args ) {
 	echo "\nwp_die called\n";
-	echo "Message : $message\n";
-	echo "Title : $title\n";
+	echo "Message: $message\n";
+
+	if ( ! empty( $title ) ) {
+		echo "Title: $title\n";
+	}
+
 	if ( ! empty( $args ) ) {
 		echo "Args: \n";
 		foreach ( $args as $k => $v ) {
@@ -214,8 +228,12 @@ function _wp_die_handler_txt( $message, $title, $args ) {
  */
 function _wp_die_handler_exit( $message, $title, $args ) {
 	echo "\nwp_die called\n";
-	echo "Message : $message\n";
-	echo "Title : $title\n";
+	echo "Message: $message\n";
+
+	if ( ! empty( $title ) ) {
+		echo "Title: $title\n";
+	}
+
 	if ( ! empty( $args ) ) {
 		echo "Args: \n";
 		foreach ( $args as $k => $v ) {
@@ -274,7 +292,7 @@ function _wp_rest_server_class_filter() {
 }
 
 // Skip `setcookie` calls in auth_cookie functions due to warning:
-// Cannot modify header information - headers already sent by ...
+// Cannot modify header information - headers already sent by...
 tests_add_filter( 'send_auth_cookies', '__return_false' );
 
 /**
@@ -294,6 +312,8 @@ function _unhook_block_registration() {
 	remove_action( 'init', 'register_block_core_search' );
 	remove_action( 'init', 'register_block_core_shortcode' );
 	remove_action( 'init', 'register_block_core_social_link' );
+	remove_action( 'init', 'register_block_core_social_link' );
 	remove_action( 'init', 'register_block_core_tag_cloud' );
+	remove_action( 'init', 'register_core_block_types_from_metadata' );
 }
 tests_add_filter( 'init', '_unhook_block_registration', 1000 );
diff --git a/includes/install.php b/includes/install.php
index d07079e501..8ce307818d 100644
--- a/includes/install.php
+++ b/includes/install.php
@@ -7,11 +7,15 @@
 error_reporting( E_ALL & ~E_DEPRECATED & ~E_STRICT );
 
 $config_file_path = $argv[1];
-$multisite        = ! empty( $argv[2] );
+$multisite        = in_array( 'run_ms_tests', $argv, true );
+
+if ( ! defined( 'WP_RUN_CORE_TESTS' ) && in_array( 'run_core_tests', $argv, true ) ) {
+	define( 'WP_RUN_CORE_TESTS', true );
+}
 
 define( 'WP_INSTALLING', true );
 require_once $config_file_path;
-require_once dirname( __FILE__ ) . '/functions.php';
+require_once __DIR__ . '/functions.php';
 
 // Set the theme to our special empty theme, to avoid interference from the current Twenty* theme.
 if ( ! defined( 'WP_DEFAULT_THEME' ) ) {
@@ -31,12 +35,12 @@ require_once ABSPATH . '/wp-settings.php';
 require_once ABSPATH . '/wp-admin/includes/upgrade.php';
 require_once ABSPATH . '/wp-includes/wp-db.php';
 
-// Override the PHPMailer
+// Override the PHPMailer.
 global $phpmailer;
-require_once( dirname( __FILE__ ) . '/mock-mailer.php' );
+require_once __DIR__ . '/mock-mailer.php';
 $phpmailer = new MockPHPMailer();
 
-register_theme_directory( dirname( __FILE__ ) . '/../data/themedir1' );
+register_theme_directory( __DIR__ . '/../data/themedir1' );
 
 /*
  * default_storage_engine and storage_engine are the same option, but storage_engine
@@ -88,6 +92,11 @@ if ( $multisite ) {
 	$subdomain_install = false;
 
 	install_network();
-	populate_network( 1, WP_TESTS_DOMAIN, WP_TESTS_EMAIL, $title, '/', $subdomain_install );
+	$error = populate_network( 1, WP_TESTS_DOMAIN, WP_TESTS_EMAIL, $title, '/', $subdomain_install );
+
+	if ( is_wp_error( $error ) ) {
+		wp_die( $error );
+	}
+
 	$wp_rewrite->set_permalink_structure( '' );
 }
diff --git a/includes/listener-loader.php b/includes/listener-loader.php
index 3e3731f98b..1f86fefc06 100644
--- a/includes/listener-loader.php
+++ b/includes/listener-loader.php
@@ -1,7 +1,7 @@
 <?php
 
 if ( version_compare( tests_get_phpunit_version(), '7.0', '>=' ) ) {
-	require dirname( __FILE__ ) . '/phpunit7/speed-trap-listener.php';
+	require __DIR__ . '/phpunit7/speed-trap-listener.php';
 } else {
-	require dirname( __FILE__ ) . '/speed-trap-listener.php';
+	require __DIR__ . '/speed-trap-listener.php';
 }
diff --git a/includes/mock-fs.php b/includes/mock-fs.php
index 8794c07257..6ff3b522b1 100644
--- a/includes/mock-fs.php
+++ b/includes/mock-fs.php
@@ -5,8 +5,8 @@ class WP_Filesystem_MockFS extends WP_Filesystem_Base {
 	// Holds a array of objects which contain an array of objects, etc.
 	private $fs = null;
 
-	// Holds a array of /path/to/file.php and /path/to/dir/ map to an object in $fs above
-	// a fast more efficient way of determining if a path exists, and access to that node
+	// Holds a array of /path/to/file.php and /path/to/dir/ map to an object in $fs above.
+	// A fast, more efficient way of determining if a path exists, and access to that node.
 	private $fs_map = array();
 
 	public $verbose = false; // Enable to debug WP_Filesystem_Base::find_folder() / etc.
@@ -26,14 +26,15 @@ class WP_Filesystem_MockFS extends WP_Filesystem_Base {
 		}
 		$folder = $this->find_folder( $path );
 
-		// Perhaps the FTP folder is rooted at the WordPress installation, Check for wp-includes folder in root, Could have some false positives, but rare.
+		// Perhaps the FTP folder is rooted at the WordPress installation.
+		// Check for wp-includes folder in root, could have some false positives, but rare.
 		if ( ! $folder && $this->is_dir( '/wp-includes' ) ) {
 			$folder = '/';
 		}
 		return $folder;
 	}
 
-	// Mock FS specific functions:
+	// Mock FS-specific functions:
 
 	/**
 	 * Sets initial filesystem environment and/or clears the current environment.
@@ -44,7 +45,7 @@ class WP_Filesystem_MockFS extends WP_Filesystem_Base {
 		$this->fs_map = array(
 			'/' => $this->fs,
 		);
-		$this->cache  = array(); // Used by find_folder() and friends
+		$this->cache  = array(); // Used by find_folder() and friends.
 		$this->cwd    = isset( $this->fs_map[ $home_dir ] ) ? $this->fs_map[ $home_dir ] : '/';
 		$this->setfs( $paths );
 	}
@@ -60,15 +61,15 @@ class WP_Filesystem_MockFS extends WP_Filesystem_Base {
 		$paths = array_filter( array_map( 'trim', $paths ) );
 
 		foreach ( $paths as $path ) {
-			// Allow for comments
+			// Allow for comments.
 			if ( '#' === $path[0] ) {
 				continue;
 			}
 
-			// Directories
+			// Directories.
 			if ( '/' === $path[ strlen( $path ) - 1 ] ) {
 				$this->mkdir( $path );
-			} else { // Files (with dummy content for now)
+			} else { // Files (with dummy content for now).
 				$this->put_contents( $path, 'This is a test file' );
 			}
 		}
@@ -209,8 +210,8 @@ class WP_Filesystem_MockFS extends WP_Filesystem_Base {
 }
 
 class MockFS_Node {
-	public $name; // The "name" of the entry, does not include a slash (exception, root)
-	public $type; // The type of the entry 'f' for file, 'd' for Directory
+	public $name; // The "name" of the entry, does not include a slash (exception, root).
+	public $type; // The type of the entry 'f' for file, 'd' for directory.
 	public $path; // The full path to the entry.
 
 	function __construct( $path ) {
@@ -229,12 +230,12 @@ class MockFS_Node {
 
 class MockFS_Directory_Node extends MockFS_Node {
 	public $type     = 'd';
-	public $children = array(); // The child nodes of this directory
+	public $children = array(); // The child nodes of this directory.
 }
 
 class MockFS_File_Node extends MockFS_Node {
 	public $type     = 'f';
-	public $contents = ''; // The contents of the file
+	public $contents = ''; // The contents of the file.
 
 	function __construct( $path, $contents = '' ) {
 		parent::__construct( $path );
diff --git a/includes/mock-image-editor.php b/includes/mock-image-editor.php
index 5f457ded96..4cd252b1c3 100644
--- a/includes/mock-image-editor.php
+++ b/includes/mock-image-editor.php
@@ -7,6 +7,9 @@ if ( class_exists( 'WP_Image_Editor' ) ) :
 		public static $load_return = true;
 		public static $test_return = true;
 		public static $save_return = array();
+		public static $spy         = array();
+		public static $edit_return = array();
+		public static $size_return = null;
 
 		// Allow testing of jpeg_quality filter.
 		public function set_mime_type( $mime_type = null ) {
@@ -23,19 +26,34 @@ if ( class_exists( 'WP_Image_Editor' ) ) :
 			return true;
 		}
 		public function resize( $max_w, $max_h, $crop = false ) {
-
+			self::$spy[ __FUNCTION__ ][] = func_get_args();
+			if ( isset( self::$edit_return[ __FUNCTION__ ] ) ) {
+				return self::$edit_return[ __FUNCTION__ ];
+			}
 		}
 		public function multi_resize( $sizes ) {
-
+			self::$spy[ __FUNCTION__ ][] = func_get_args();
+			if ( isset( self::$edit_return[ __FUNCTION__ ] ) ) {
+				return self::$edit_return[ __FUNCTION__ ];
+			}
 		}
 		public function crop( $src_x, $src_y, $src_w, $src_h, $dst_w = null, $dst_h = null, $src_abs = false ) {
-
+			self::$spy[ __FUNCTION__ ][] = func_get_args();
+			if ( isset( self::$edit_return[ __FUNCTION__ ] ) ) {
+				return self::$edit_return[ __FUNCTION__ ];
+			}
 		}
 		public function rotate( $angle ) {
-
+			self::$spy[ __FUNCTION__ ][] = func_get_args();
+			if ( isset( self::$edit_return[ __FUNCTION__ ] ) ) {
+				return self::$edit_return[ __FUNCTION__ ];
+			}
 		}
 		public function flip( $horz, $vert ) {
-
+			self::$spy[ __FUNCTION__ ][] = func_get_args();
+			if ( isset( self::$edit_return[ __FUNCTION__ ] ) ) {
+				return self::$edit_return[ __FUNCTION__ ];
+			}
 		}
 		public function save( $destfilename = null, $mime_type = null ) {
 			return self::$save_return;
@@ -43,6 +61,14 @@ if ( class_exists( 'WP_Image_Editor' ) ) :
 		public function stream( $mime_type = null ) {
 
 		}
+
+		public function get_size() {
+			if ( self::$size_return ) {
+				return self::$size_return;
+			}
+
+			return parent::get_size();
+		}
 	}
 
 endif;
diff --git a/includes/mock-mailer.php b/includes/mock-mailer.php
index ece2aa3640..e5e3d98fa2 100644
--- a/includes/mock-mailer.php
+++ b/includes/mock-mailer.php
@@ -1,7 +1,8 @@
 <?php
-require_once( ABSPATH . '/wp-includes/class-phpmailer.php' );
+require_once ABSPATH . 'wp-includes/PHPMailer/PHPMailer.php';
+require_once ABSPATH . 'wp-includes/PHPMailer/Exception.php';
 
-class MockPHPMailer extends PHPMailer {
+class MockPHPMailer extends PHPMailer\PHPMailer\PHPMailer {
 	var $mock_sent = array();
 
 	function preSend() {
@@ -95,7 +96,12 @@ function tests_retrieve_phpmailer_instance() {
 function reset_phpmailer_instance() {
 	$mailer = tests_retrieve_phpmailer_instance();
 	if ( $mailer ) {
-		$GLOBALS['phpmailer'] = new MockPHPMailer( true );
+		$mailer             = new MockPHPMailer( true );
+		$mailer::$validator = static function ( $email ) {
+			return (bool) is_email( $email );
+		};
+
+		$GLOBALS['phpmailer'] = $mailer;
 		return true;
 	}
 
diff --git a/includes/normalize-xml.xsl b/includes/normalize-xml.xsl
new file mode 100644
index 0000000000..135556c61b
--- /dev/null
+++ b/includes/normalize-xml.xsl
@@ -0,0 +1,76 @@
+<?xml version='1.0' encoding='UTF-8' ?>
+<!--
+	Normalize an XML document to make it easier to compare whether 2 documents will
+	be seen as "equal" to an XML processor.
+
+	The normalization is similiar, in spirit, to {@link https://www.w3.org/TR/xml-c14n11/ Canonical XML},
+	but without some aspects of C14N that make the kinds of assertions we need difficult.
+
+	For example, the following XML documents will be interpreted the same by an XML processor,
+	even though a string comparison of them would show differences:
+
+	<root xmlns='urn:example'>
+		<ns0:child xmlns:ns0='urn:another-example'>this is a test</ns0:child>
+	</root>
+
+	<ns0:root xmlns:ns0='urn:example'>
+		<child xmlns='urn:another-example'>this is a test</child>
+	</ns0:root>
+  -->
+<xsl:transform
+		xmlns:xsl='http://www.w3.org/1999/XSL/Transform'
+		version='1.0'
+	>
+
+	<!--
+		Output UTF-8 XML, no indendation and all CDATA sections replaced with their character content. 
+	  -->
+	<xsl:output
+		method='xml'
+		indent='no'
+		cdata-section-elements=''
+		encoding='UTF-8' />
+
+	<!--
+		Strip insignificant white space.
+	  -->
+	<xsl:strip-space elements='*' />
+
+	<!--
+		Noramlize elements by not relying on the prefix used in the input document
+		and ordering attributes first by namespace-uri and then by local-name.
+	  -->
+	<xsl:template match='*' priority='10'>
+		<xsl:element name='{local-name()}' namespace='{namespace-uri()}'>
+			<xsl:apply-templates select='@*'>
+				<xsl:sort select='namespace-uri()' />
+				<xsl:sort select='local-name()' />
+			</xsl:apply-templates>
+
+			<xsl:apply-templates select='node()' />
+		</xsl:element>
+	</xsl:template>
+
+	<!--
+		Noramlize attributes by not relying on the prefix used in the input document.
+	  -->
+	<xsl:template match='@*'>
+		<xsl:attribute name='{local-name()}' namespace='{namespace-uri()}'>
+			<xsl:value-of select='.' />
+		</xsl:attribute>
+	</xsl:template>
+
+	<!--
+		Strip comments. 
+	  -->
+	<xsl:template match='comment()' priority='10' />
+
+	<!--
+		Pass all other nodes through unchanged.  
+	  -->
+	<xsl:template match='node()'>
+		<xsl:copy>
+			<xsl:apply-templates select='node()' />
+		</xsl:copy>
+	</xsl:template>
+</xsl:transform>
diff --git a/includes/object-cache.php b/includes/object-cache.php
index c97ccb8d64..c747a7a824 100644
--- a/includes/object-cache.php
+++ b/includes/object-cache.php
@@ -5,13 +5,13 @@
  * If the specified key already exists, the value is not stored and the function
  * returns false.
  *
- * @link http://www.php.net/manual/en/memcached.add.php
+ * @link https://www.php.net/manual/en/memcached.add.php
  *
- * @param string    $key        The key under which to store the value.
- * @param mixed     $value      The value to store.
- * @param string    $group      The group value appended to the $key.
- * @param int       $expiration The expiration time, defaults to 0.
- * @return bool                 Returns TRUE on success or FALSE on failure.
+ * @param string $key        The key under which to store the value.
+ * @param mixed  $value      The value to store.
+ * @param string $group      The group value appended to the $key.
+ * @param int    $expiration The expiration time, defaults to 0.
+ * @return bool True on success, false on failure.
  */
 function wp_cache_add( $key, $value, $group = '', $expiration = 0 ) {
 	global $wp_object_cache;
@@ -26,14 +26,14 @@ function wp_cache_add( $key, $value, $group = '', $expiration = 0 ) {
  * _cache object as part of the runtime cache. It will add it to an array for the
  * specified server_key.
  *
- * @link http://www.php.net/manual/en/memcached.addbykey.php
+ * @link https://www.php.net/manual/en/memcached.addbykey.php
  *
- * @param string    $server_key     The key identifying the server to store the value on.
- * @param string    $key            The key under which to store the value.
- * @param mixed     $value          The value to store.
- * @param string    $group          The group value appended to the $key.
- * @param int       $expiration     The expiration time, defaults to 0.
- * @return bool                     Returns TRUE on success or FALSE on failure.
+ * @param string $server_key The key identifying the server to store the value on.
+ * @param string $key        The key under which to store the value.
+ * @param mixed  $value      The value to store.
+ * @param string $group      The group value appended to the $key.
+ * @param int    $expiration The expiration time, defaults to 0.
+ * @return bool True on success, false on failure.
  */
 function wp_cache_add_by_key( $server_key, $key, $value, $group = '', $expiration = 0 ) {
 	global $wp_object_cache;
@@ -41,14 +41,15 @@ function wp_cache_add_by_key( $server_key, $key, $value, $group = '', $expiratio
 }
 
 /**
- * Add a single server to the list of Memcached servers.
+ * Adds a single server to the list of Memcached servers.
  *
- * @link http://www.php.net/manual/en/memcached.addserver.php
+ * @link https://www.php.net/manual/en/memcached.addserver.php
  *
- * @param string        $host   The hostname of the memcache server.
- * @param int           $port   The port on which memcache is running.
- * @param int           $weight The weight of the server relative to the total weight of all the servers in the pool.
- * @return bool                 Returns TRUE on success or FALSE on failure.
+ * @param string $host   The hostname of the memcache server.
+ * @param int    $port   The port on which memcache is running.
+ * @param int    $weight The weight of the server relative to the total weight
+ *                       of all the servers in the pool.
+ * @return bool True on success, false on failure.
  */
 function wp_cache_add_server( $host, $port, $weight = 0 ) {
 	global $wp_object_cache;
@@ -61,10 +62,10 @@ function wp_cache_add_server( $host, $port, $weight = 0 ) {
  * Each individual server in the array must include a domain and port, with an optional
  * weight value: $servers = array( array( '127.0.0.1', 11211, 0 ) );
  *
- * @link http://www.php.net/manual/en/memcached.addservers.php
+ * @link https://www.php.net/manual/en/memcached.addservers.php
  *
- * @param array     $servers    Array of server to register.
- * @return bool                 True on success; false on failure.
+ * @param array $servers Array of server to register.
+ * @return bool True on success, false on failure.
  */
 function wp_cache_add_servers( $servers ) {
 	global $wp_object_cache;
@@ -72,21 +73,21 @@ function wp_cache_add_servers( $servers ) {
 }
 
 /**
- * Append data to an existing item.
+ * Appends data to an existing item.
  *
- * This method should throw an error if it is used with compressed data. This
- * is an expected behavior. Memcached casts the value to be appended to the initial value to the
- * type of the initial value. Be careful as this leads to unexpected behavior at times. Due to
- * how memcached treats types, the behavior has been mimicked in the internal cache to produce
- * similar results and improve consistency. It is recommend that appends only occur with data of
+ * This method should throw an error if it is used with compressed data.
+ * This is an expected behavior. Memcached casts the value to be appended to the initial value
+ * to the type of the initial value. Be careful as this leads to unexpected behavior at times.
+ * Due to how memcached treats types, the behavior has been mimicked in the internal cache to produce
+ * similar results and improve consistency. It is recommended that appends only occur with data of
  * the same type.
  *
- * @link http://www.php.net/manual/en/memcached.append.php
+ * @link https://www.php.net/manual/en/memcached.append.php
  *
- * @param string    $key    The key under which to store the value.
- * @param mixed     $value  Must be string as appending mixed values is not well-defined
- * @param string    $group  The group value appended to the $key.
- * @return bool             Returns TRUE on success or FALSE on failure.
+ * @param string $key   The key under which to store the value.
+ * @param mixed  $value Must be string as appending mixed values is not well-defined.
+ * @param string $group The group value appended to the $key.
+ * @return bool True on success, false on failure.
  */
 function wp_cache_append( $key, $value, $group = '' ) {
 	global $wp_object_cache;
@@ -94,22 +95,22 @@ function wp_cache_append( $key, $value, $group = '' ) {
 }
 
 /**
- * Append data to an existing item by server key.
+ * Appends data to an existing item by server key.
  *
- * This method should throw an error if it is used with compressed data. This
- * is an expected behavior. Memcached casts the value to be appended to the initial value to the
- * type of the initial value. Be careful as this leads to unexpected behavior at times. Due to
- * how memcached treats types, the behavior has been mimicked in the internal cache to produce
- * similar results and improve consistency. It is recommend that appends only occur with data of
+ * This method should throw an error if it is used with compressed data.
+ * This is an expected behavior. Memcached casts the value to be appended to the initial value
+ * to the type of the initial value. Be careful as this leads to unexpected behavior at times.
+ * Due to how memcached treats types, the behavior has been mimicked in the internal cache to produce
+ * similar results and improve consistency. It is recommended that appends only occur with data of
  * the same type.
  *
- * @link http://www.php.net/manual/en/memcached.appendbykey.php
+ * @link https://www.php.net/manual/en/memcached.appendbykey.php
  *
- * @param string    $server_key     The key identifying the server to store the value on.
- * @param string    $key            The key under which to store the value.
- * @param mixed     $value          Must be string as appending mixed values is not well-defined
- * @param string    $group          The group value appended to the $key.
- * @return bool                     Returns TRUE on success or FALSE on failure.
+ * @param string $server_key The key identifying the server to store the value on.
+ * @param string $key        The key under which to store the value.
+ * @param mixed  $value      Must be string as appending mixed values is not well-defined.
+ * @param string $group      The group value appended to the $key.
+ * @return bool True on success, false on failure.
  */
 function wp_cache_append_by_key( $server_key, $key, $value, $group = '' ) {
 	global $wp_object_cache;
@@ -119,17 +120,17 @@ function wp_cache_append_by_key( $server_key, $key, $value, $group = '' ) {
 /**
  * Performs a "check and set" to store data.
  *
- * The set will be successful only if the no other request has updated the value since it was fetched by
- * this request.
+ * The set will be successful only if the no other request has updated the value
+ * since it was fetched by this request.
  *
- * @link http://www.php.net/manual/en/memcached.cas.php
+ * @link https://www.php.net/manual/en/memcached.cas.php
  *
- * @param float     $cas_token  Unique value associated with the existing item. Generated by memcached.
- * @param string    $key        The key under which to store the value.
- * @param mixed     $value      The value to store.
- * @param string    $group      The group value appended to the $key.
- * @param int       $expiration The expiration time, defaults to 0.
- * @return bool                 Returns TRUE on success or FALSE on failure.
+ * @param float  $cas_token  Unique value associated with the existing item. Generated by memcached.
+ * @param string $key        The key under which to store the value.
+ * @param mixed  $value      The value to store.
+ * @param string $group      The group value appended to the $key.
+ * @param int    $expiration The expiration time, defaults to 0.
+ * @return bool True on success, false on failure.
  */
 function wp_cache_cas( $cas_token, $key, $value, $group = '', $expiration = 0 ) {
 	global $wp_object_cache;
@@ -139,18 +140,18 @@ function wp_cache_cas( $cas_token, $key, $value, $group = '', $expiration = 0 )
 /**
  * Performs a "check and set" to store data with a server key.
  *
- * The set will be successful only if the no other request has updated the value since it was fetched by
- * this request.
+ * The set will be successful only if the no other request has updated the value
+ * since it was fetched by this request.
  *
- * @link http://www.php.net/manual/en/memcached.casbykey.php
+ * @link https://www.php.net/manual/en/memcached.casbykey.php
  *
- * @param string    $server_key The key identifying the server to store the value on.
- * @param float     $cas_token  Unique value associated with the existing item. Generated by memcached.
- * @param string    $key        The key under which to store the value.
- * @param mixed     $value      The value to store.
- * @param string    $group      The group value appended to the $key.
- * @param int       $expiration The expiration time, defaults to 0.
- * @return bool                 Returns TRUE on success or FALSE on failure.
+ * @param string $server_key The key identifying the server to store the value on.
+ * @param float  $cas_token  Unique value associated with the existing item. Generated by memcached.
+ * @param string $key        The key under which to store the value.
+ * @param mixed  $value      The value to store.
+ * @param string $group      The group value appended to the $key.
+ * @param int    $expiration The expiration time, defaults to 0.
+ * @return bool True on success, false on failure.
  */
 function wp_cache_cas_by_key( $cas_token, $server_key, $key, $value, $group = '', $expiration = 0 ) {
 	global $wp_object_cache;
@@ -160,28 +161,28 @@ function wp_cache_cas_by_key( $cas_token, $server_key, $key, $value, $group = ''
 /**
  * Closes the cache.
  *
- * This function has ceased to do anything since WordPress 2.5. The
- * functionality was removed along with the rest of the persistent cache. This
- * does not mean that plugins can't implement this function when they need to
- * make sure that the cache is cleaned up after WordPress no longer needs it.
+ * This function has ceased to do anything since WordPress 2.5.
+ * The functionality was removed along with the rest of the persistent cache.
+ * This does not mean that plugins can't implement this function when they need
+ * to make sure that the cache is cleaned up after WordPress no longer needs it.
  *
  * @since 2.0.0
  *
- * @return  bool    Always returns True
+ * @return bool Always returns true.
  */
 function wp_cache_close() {
 	return true;
 }
 
 /**
- * Decrement a numeric item's value.
+ * Decrements a numeric item's value.
  *
- * @link http://www.php.net/manual/en/memcached.decrement.php
+ * @link https://www.php.net/manual/en/memcached.decrement.php
  *
- * @param string    $key    The key under which to store the value.
- * @param int       $offset The amount by which to decrement the item's value.
- * @param string    $group  The group value appended to the $key.
- * @return int|bool         Returns item's new value on success or FALSE on failure.
+ * @param string $key    The key under which to store the value.
+ * @param int    $offset The amount by which to decrement the item's value.
+ * @param string $group  The group value appended to the $key.
+ * @return int|bool Item's new value on success, false on failure.
  */
 function wp_cache_decrement( $key, $offset = 1, $group = '' ) {
 	global $wp_object_cache;
@@ -189,36 +190,36 @@ function wp_cache_decrement( $key, $offset = 1, $group = '' ) {
 }
 
 /**
- * Decrement a numeric item's value.
+ * Decrements a numeric item's value.
  *
- * Same as wp_cache_decrement. Original WordPress caching backends use wp_cache_decr. I
- * want both spellings to work.
+ * This is the same as wp_cache_decrement(), but kept for backward compatibility.
+ * The original WordPress caching backends use wp_cache_decr().
  *
- * @link http://www.php.net/manual/en/memcached.decrement.php
+ * @link https://www.php.net/manual/en/memcached.decrement.php
  *
- * @param string    $key    The key under which to store the value.
- * @param int       $offset The amount by which to decrement the item's value.
- * @param string    $group  The group value appended to the $key.
- * @return int|bool         Returns item's new value on success or FALSE on failure.
+ * @param string $key    The key under which to store the value.
+ * @param int    $offset The amount by which to decrement the item's value.
+ * @param string $group  The group value appended to the $key.
+ * @return int|bool Item's new value on success, false on failure.
  */
 function wp_cache_decr( $key, $offset = 1, $group = '' ) {
 	return wp_cache_decrement( $key, $offset, $group );
 }
 
 /**
- * Remove the item from the cache.
+ * Removes the item from the cache.
  *
- * Remove an item from memcached with identified by $key after $time seconds. The
- * $time parameter allows an object to be queued for deletion without immediately
- * deleting. Between the time that it is queued and the time it's deleted, add,
- * replace, and get will fail, but set will succeed.
+ * Removes an item from memcached with identified by $key after $time seconds.
+ * The $time parameter allows an object to be queued for deletion without
+ * immediately deleting. Between the time that it is queued and the time it's deleted,
+ * add, replace, and get will fail, but set will succeed.
  *
- * @link http://www.php.net/manual/en/memcached.delete.php
+ * @link https://www.php.net/manual/en/memcached.delete.php
  *
- * @param string    $key    The key under which to store the value.
- * @param string    $group  The group value appended to the $key.
- * @param int       $time   The amount of time the server will wait to delete the item in seconds.
- * @return bool             Returns TRUE on success or FALSE on failure.
+ * @param string $key   The key under which to store the value.
+ * @param string $group The group value appended to the $key.
+ * @param int    $time  The amount of time the server will wait to delete the item in seconds.
+ * @return bool True on success, false on failure.
  */
 function wp_cache_delete( $key, $group = '', $time = 0 ) {
 	global $wp_object_cache;
@@ -226,20 +227,20 @@ function wp_cache_delete( $key, $group = '', $time = 0 ) {
 }
 
 /**
- * Remove the item from the cache by server key.
+ * Removes the item from the cache by server key.
  *
- * Remove an item from memcached with identified by $key after $time seconds. The
- * $time parameter allows an object to be queued for deletion without immediately
- * deleting. Between the time that it is queued and the time it's deleted, add,
- * replace, and get will fail, but set will succeed.
+ * Removes an item from memcached with identified by $key after $time seconds.
+ * The $time parameter allows an object to be queued for deletion without
+ * immediately deleting. Between the time that it is queued and the time it's deleted,
+ * add, replace, and get will fail, but set will succeed.
  *
- * @link http://www.php.net/manual/en/memcached.deletebykey.php
+ * @link https://www.php.net/manual/en/memcached.deletebykey.php
  *
- * @param string        $server_key The key identifying the server to store the value on.
- * @param string        $key        The key under which to store the value.
- * @param string        $group      The group value appended to the $key.
- * @param int           $time       The amount of time the server will wait to delete the item in seconds.
- * @return bool                     Returns TRUE on success or FALSE on failure.
+ * @param string $server_key The key identifying the server to store the value on.
+ * @param string $key        The key under which to store the value.
+ * @param string $group      The group value appended to the $key.
+ * @param int    $time       The amount of time the server will wait to delete the item in seconds.
+ * @return bool True on success, false on failure.
  */
 function wp_cache_delete_by_key( $server_key, $key, $group = '', $time = 0 ) {
 	global $wp_object_cache;
@@ -247,11 +248,11 @@ function wp_cache_delete_by_key( $server_key, $key, $group = '', $time = 0 ) {
 }
 
 /**
- * Fetch the next result.
+ * Fetches the next result.
  *
- * @link http://www.php.net/manual/en/memcached.fetch.php
+ * @link https://www.php.net/manual/en/memcached.fetch.php
  *
- * @return  array|bool   Returns the next result or FALSE otherwise.
+ * @return array|false The next result on success, false on failure.
  */
 function wp_cache_fetch() {
 	global $wp_object_cache;
@@ -259,11 +260,11 @@ function wp_cache_fetch() {
 }
 
 /**
- * Fetch all remaining results from the last request.
+ * Fetches all remaining results from the last request.
  *
- * @link http://www.php.net/manual/en/memcached.fetchall.php
+ * @link https://www.php.net/manual/en/memcached.fetchall.php
  *
- * @return  array|bool  Returns the results or FALSE on failure.
+ * @return array|false The results on success, false on failure.
  */
 function wp_cache_fetch_all() {
 	global $wp_object_cache;
@@ -271,12 +272,12 @@ function wp_cache_fetch_all() {
 }
 
 /**
- * Invalidate all items in the cache.
+ * Invalidates all items in the cache.
  *
- * @link http://www.php.net/manual/en/memcached.flush.php
+ * @link https://www.php.net/manual/en/memcached.flush.php
  *
- * @param int       $delay  Number of seconds to wait before invalidating the items.
- * @return bool             Returns TRUE on success or FALSE on failure.
+ * @param int $delay Number of seconds to wait before invalidating the items.
+ * @return bool True on success, false on failure.
  */
 function wp_cache_flush( $delay = 0 ) {
 	global $wp_object_cache;
@@ -284,24 +285,25 @@ function wp_cache_flush( $delay = 0 ) {
 }
 
 /**
- * Retrieve object from cache.
+ * Retrieves object from cache.
  *
- * Gets an object from cache based on $key and $group. In order to fully support the $cache_cb and $cas_token
- * parameters, the runtime cache is ignored by this function if either of those values are set. If either of
- * those values are set, the request is made directly to the memcached server for proper handling of the
- * callback and/or token.
+ * Gets an object from cache based on $key and $group. In order to fully support
+ * the $cache_cb and $cas_token parameters, the runtime cache is ignored by this function
+ * if either of those values are set. In that case, the request is made directly
+ * to the memcached server for proper handling of the callback and/or token.
  *
- * Note that the $deprecated and $found args are only here for compatibility with the native wp_cache_get function.
+ * Note that the $deprecated and $found args are only here for compatibility
+ * with the native wp_cache_get() function.
  *
- * @link http://www.php.net/manual/en/memcached.get.php
+ * @link https://www.php.net/manual/en/memcached.get.php
  *
- * @param string        $key        The key under which to store the value.
- * @param string        $group      The group value appended to the $key.
- * @param bool          $force      Whether or not to force a cache invalidation.
- * @param null|bool     $found      Variable passed by reference to determine if the value was found or not.
- * @param null|string   $cache_cb   Read-through caching callback.
- * @param null|float    $cas_token  The variable to store the CAS token in.
- * @return bool|mixed               Cached object value.
+ * @param string      $key       The key under which to store the value.
+ * @param string      $group     The group value appended to the $key.
+ * @param bool        $force     Whether or not to force a cache invalidation.
+ * @param null|bool   $found     Variable passed by reference to determine if the value was found or not.
+ * @param null|string $cache_cb  Read-through caching callback.
+ * @param null|float  $cas_token The variable to store the CAS token in.
+ * @return bool|mixed Cached object value.
  */
 function wp_cache_get( $key, $group = '', $force = false, &$found = null, $cache_cb = null, &$cas_token = null ) {
 	global $wp_object_cache;
@@ -314,23 +316,23 @@ function wp_cache_get( $key, $group = '', $force = false, &$found = null, $cache
 }
 
 /**
- * Retrieve object from cache from specified server.
- *
- * Gets an object from cache based on $key, $group and $server_key. In order to fully support the $cache_cb and $cas_token
- * parameters, the runtime cache is ignored by this function if either of those values are set. If either of
- * those values are set, the request is made directly to the memcached server for proper handling of the
- * callback and/or token.
- *
- * @link http://www.php.net/manual/en/memcached.getbykey.php
- *
- * @param string        $server_key The key identifying the server to store the value on.
- * @param string        $key        The key under which to store the value.
- * @param string        $group      The group value appended to the $key.
- * @param bool          $force      Whether or not to force a cache invalidation.
- * @param null|bool     $found      Variable passed by reference to determine if the value was found or not.
- * @param null|string   $cache_cb   Read-through caching callback.
- * @param null|float    $cas_token  The variable to store the CAS token in.
- * @return bool|mixed               Cached object value.
+ * Retrieves object from cache from specified server.
+ *
+ * Gets an object from cache based on $key, $group, and $server_key. In order to fully support
+ * the $cache_cb and $cas_token parameters, the runtime cache is ignored by this function
+ * if either of those values are set. In that case, the request is made directly
+ * to the memcached server for proper handling of the callback and/or token.
+ *
+ * @link https://www.php.net/manual/en/memcached.getbykey.php
+ *
+ * @param string      $server_key The key identifying the server to store the value on.
+ * @param string      $key        The key under which to store the value.
+ * @param string      $group      The group value appended to the $key.
+ * @param bool        $force      Whether or not to force a cache invalidation.
+ * @param null|bool   $found      Variable passed by reference to determine if the value was found or not.
+ * @param null|string $cache_cb   Read-through caching callback.
+ * @param null|float  $cas_token  The variable to store the CAS token in.
+ * @return bool|mixed Cached object value.
  */
 function wp_cache_get_by_key( $server_key, $key, $group = '', $force = false, &$found = null, $cache_cb = null, &$cas_token = null ) {
 	global $wp_object_cache;
@@ -343,15 +345,16 @@ function wp_cache_get_by_key( $server_key, $key, $group = '', $force = false, &$
 }
 
 /**
- * Request multiple keys without blocking.
+ * Requests multiple keys without blocking.
  *
- * @link http://www.php.net/manual/en/memcached.getdelayed.php
+ * @link https://www.php.net/manual/en/memcached.getdelayed.php
  *
- * @param string|array  $keys       Array or string of key(s) to request.
- * @param string|array  $groups     Array or string of group(s) for the key(s). See buildKeys for more on how these are handled.
- * @param bool          $with_cas   Whether to request CAS token values also.
- * @param null          $value_cb   The result callback or NULL.
- * @return bool                     Returns TRUE on success or FALSE on failure.
+ * @param string|array $keys     Array or string of key(s) to request.
+ * @param string|array $groups   Array or string of group(s) for the key(s).
+ *                               See buildKeys for more on how these are handled.
+ * @param bool         $with_cas Whether to request CAS token values also.
+ * @param null         $value_cb The result callback or null.
+ * @return bool True on success, false on failure.
  */
 function wp_cache_get_delayed( $keys, $groups = '', $with_cas = false, $value_cb = null ) {
 	global $wp_object_cache;
@@ -359,16 +362,17 @@ function wp_cache_get_delayed( $keys, $groups = '', $with_cas = false, $value_cb
 }
 
 /**
- * Request multiple keys without blocking from a specified server.
+ * Requests multiple keys without blocking from a specified server.
  *
- * @link http://www.php.net/manual/en/memcached.getdelayed.php
+ * @link https://www.php.net/manual/en/memcached.getdelayed.php
  *
- * @param string        $server_key The key identifying the server to store the value on.
- * @param string|array  $keys       Array or string of key(s) to request.
- * @param string|array  $groups     Array or string of group(s) for the key(s). See buildKeys for more on how these are handled.
- * @param bool          $with_cas   Whether to request CAS token values also.
- * @param null          $value_cb   The result callback or NULL.
- * @return bool                     Returns TRUE on success or FALSE on failure.
+ * @param string       $server_key The key identifying the server to store the value on.
+ * @param string|array $keys       Array or string of key(s) to request.
+ * @param string|array $groups     Array or string of group(s) for the key(s).
+ *                                 See buildKeys for more on how these are handled.
+ * @param bool         $with_cas   Whether to request CAS token values also.
+ * @param null         $value_cb   The result callback or null.
+ * @return bool True on success, false on failure.
  */
 function wp_cache_get_delayed_by_key( $server_key, $keys, $groups = '', $with_cas = false, $value_cb = null ) {
 	global $wp_object_cache;
@@ -380,13 +384,14 @@ function wp_cache_get_delayed_by_key( $server_key, $keys, $groups = '', $with_ca
  *
  * See the buildKeys method definition to understand the $keys/$groups parameters.
  *
- * @link http://www.php.net/manual/en/memcached.getmulti.php
+ * @link https://www.php.net/manual/en/memcached.getmulti.php
  *
- * @param array         $keys       Array of keys to retrieve.
- * @param string|array  $groups     If string, used for all keys. If arrays, corresponds with the $keys array.
- * @param null|array    $cas_tokens The variable to store the CAS tokens for the found items.
- * @param int           $flags      The flags for the get operation.
- * @return bool|array               Returns the array of found items or FALSE on failure.
+ * @param array        $keys       Array of keys to retrieve.
+ * @param string|array $groups     If string, used for all keys.
+ *                                 If arrays, corresponds with the $keys array.
+ * @param null|array   $cas_tokens The variable to store the CAS tokens for the found items.
+ * @param int          $flags      The flags for the get operation.
+ * @return bool|array The array of found items on success, false on failure.
  */
 function wp_cache_get_multi( $keys, $groups = '', &$cas_tokens = null, $flags = null ) {
 	global $wp_object_cache;
@@ -403,14 +408,15 @@ function wp_cache_get_multi( $keys, $groups = '', &$cas_tokens = null, $flags =
  *
  * See the buildKeys method definition to understand the $keys/$groups parameters.
  *
- * @link http://www.php.net/manual/en/memcached.getmultibykey.php
+ * @link https://www.php.net/manual/en/memcached.getmultibykey.php
  *
- * @param string        $server_key The key identifying the server to store the value on.
- * @param array         $keys       Array of keys to retrieve.
- * @param string|array  $groups     If string, used for all keys. If arrays, corresponds with the $keys array.
- * @param null|array    $cas_tokens The variable to store the CAS tokens for the found items.
- * @param int           $flags      The flags for the get operation.
- * @return bool|array               Returns the array of found items or FALSE on failure.
+ * @param string       $server_key The key identifying the server to store the value on.
+ * @param array        $keys       Array of keys to retrieve.
+ * @param string|array $groups     If string, used for all keys.
+ *                                 If arrays, corresponds with the $keys array.
+ * @param null|array   $cas_tokens The variable to store the CAS tokens for the found items.
+ * @param int          $flags      The flags for the get operation.
+ * @return bool|array The array of found items on success, false on failure.
  */
 function wp_cache_get_multi_by_key( $server_key, $keys, $groups = '', &$cas_tokens = null, $flags = null ) {
 	global $wp_object_cache;
@@ -423,12 +429,12 @@ function wp_cache_get_multi_by_key( $server_key, $keys, $groups = '', &$cas_toke
 }
 
 /**
- * Retrieve a Memcached option value.
+ * Retrieves a Memcached option value.
  *
- * @link http://www.php.net/manual/en/memcached.getoption.php
+ * @link https://www.php.net/manual/en/memcached.getoption.php
  *
- * @param int   $option One of the Memcached::OPT_* constants.
- * @return mixed        Returns the value of the requested option, or FALSE on error.
+ * @param int $option One of the Memcached::OPT_* constants.
+ * @return mixed The value of the requested option on success, false on failure.
  */
 function wp_cache_get_option( $option ) {
 	global $wp_object_cache;
@@ -436,11 +442,11 @@ function wp_cache_get_option( $option ) {
 }
 
 /**
- * Return the result code of the last option.
+ * Returns the result code of the last option.
  *
- * @link http://www.php.net/manual/en/memcached.getresultcode.php
+ * @link https://www.php.net/manual/en/memcached.getresultcode.php
  *
- * @return int  Result code of the last Memcached operation.
+ * @return int Result code of the last Memcached operation.
  */
 function wp_cache_get_result_code() {
 	global $wp_object_cache;
@@ -450,9 +456,9 @@ function wp_cache_get_result_code() {
 /**
  * Return the message describing the result of the last operation.
  *
- * @link http://www.php.net/manual/en/memcached.getresultmessage.php
+ * @link https://www.php.net/manual/en/memcached.getresultmessage.php
  *
- * @return string   Message describing the result of the last Memcached operation.
+ * @return string Message describing the result of the last Memcached operation.
  */
 function wp_cache_get_result_message() {
 	global $wp_object_cache;
@@ -460,12 +466,12 @@ function wp_cache_get_result_message() {
 }
 
 /**
- * Get server information by key.
+ * Gets server information by key.
  *
- * @link http://www.php.net/manual/en/memcached.getserverbykey.php
+ * @link https://www.php.net/manual/en/memcached.getserverbykey.php
  *
- * @param string    $server_key The key identifying the server to store the value on.
- * @return array                Array with host, post, and weight on success, FALSE on failure.
+ * @param string $server_key The key identifying the server to store the value on.
+ * @return array Array with host, post, and weight on success, fales on failure.
  */
 function wp_cache_get_server_by_key( $server_key ) {
 	global $wp_object_cache;
@@ -473,11 +479,11 @@ function wp_cache_get_server_by_key( $server_key ) {
 }
 
 /**
- * Get the list of servers in the pool.
+ * Gets the list of servers in the pool.
  *
- * @link http://www.php.net/manual/en/memcached.getserverlist.php
+ * @link https://www.php.net/manual/en/memcached.getserverlist.php
  *
- * @return array    The list of all servers in the server pool.
+ * @return array The list of all servers in the server pool.
  */
 function wp_cache_get_server_list() {
 	global $wp_object_cache;
@@ -485,11 +491,11 @@ function wp_cache_get_server_list() {
 }
 
 /**
- * Get server pool statistics.
+ * Gets server pool statistics.
  *
- * @link http://www.php.net/manual/en/memcached.getstats.php
+ * @link https://www.php.net/manual/en/memcached.getstats.php
  *
- * @return array    Array of server statistics, one entry per server.
+ * @return array Array of server statistics, one entry per server.
  */
 function wp_cache_get_stats() {
 	global $wp_object_cache;
@@ -497,11 +503,11 @@ function wp_cache_get_stats() {
 }
 
 /**
- * Get server pool memcached version information.
+ * Gets server pool memcached version information.
  *
- * @link http://www.php.net/manual/en/memcached.getversion.php
+ * @link https://www.php.net/manual/en/memcached.getversion.php
  *
- * @return array    Array of server versions, one entry per server.
+ * @return array Array of server versions, one entry per server.
  */
 function wp_cache_get_version() {
 	global $wp_object_cache;
@@ -509,14 +515,14 @@ function wp_cache_get_version() {
 }
 
 /**
- * Increment a numeric item's value.
+ * Increments a numeric item's value.
  *
- * @link http://www.php.net/manual/en/memcached.increment.php
+ * @link https://www.php.net/manual/en/memcached.increment.php
  *
- * @param string    $key    The key under which to store the value.
- * @param int       $offset The amount by which to increment the item's value.
- * @param string    $group  The group value appended to the $key.
- * @return int|bool         Returns item's new value on success or FALSE on failure.
+ * @param string $key    The key under which to store the value.
+ * @param int    $offset The amount by which to increment the item's value.
+ * @param string $group  The group value appended to the $key.
+ * @return int|bool Item's new value on success, false on failure.
  */
 function wp_cache_increment( $key, $offset = 1, $group = '' ) {
 	global $wp_object_cache;
@@ -524,39 +530,39 @@ function wp_cache_increment( $key, $offset = 1, $group = '' ) {
 }
 
 /**
- * Increment a numeric item's value.
+ * Increments a numeric item's value.
  *
- * This is the same as wp_cache_increment, but kept for back compatibility. The original
- * WordPress caching backends use wp_cache_incr. I want both to work.
+ * This is the same as wp_cache_increment(), but kept for backward compatibility.
+ * The original WordPress caching backends use wp_cache_incr().
  *
- * @link http://www.php.net/manual/en/memcached.increment.php
+ * @link https://www.php.net/manual/en/memcached.increment.php
  *
- * @param string    $key    The key under which to store the value.
- * @param int       $offset The amount by which to increment the item's value.
- * @param string    $group  The group value appended to the $key.
- * @return int|bool         Returns item's new value on success or FALSE on failure.
+ * @param string $key    The key under which to store the value.
+ * @param int    $offset The amount by which to increment the item's value.
+ * @param string $group  The group value appended to the $key.
+ * @return int|bool Item's new value on success, false on failure.
  */
 function wp_cache_incr( $key, $offset = 1, $group = '' ) {
 	return wp_cache_increment( $key, $offset, $group );
 }
 
 /**
- * Prepend data to an existing item.
+ * Prepends data to an existing item.
  *
  * This method should throw an error if it is used with compressed data. This is an expected behavior.
- * Memcached casts the value to be prepended to the initial value to the type of the initial value. Be
- * careful as this leads to unexpected behavior at times. For instance, prepending (float) 45.23 to
- * (int) 23 will result in 45, because the value is first combined (45.2323) then cast to "integer"
+ * Memcached casts the value to be prepended to the initial value to the type of the initial value.
+ * Be careful as this leads to unexpected behavior at times. For instance, prepending (float) 45.23
+ * to (int) 23 will result in 45, because the value is first combined (45.2323) then cast to "integer"
  * (the original value), which will be (int) 45. Due to how memcached treats types, the behavior has been
- * mimicked in the internal cache to produce similar results and improve consistency. It is recommend
+ * mimicked in the internal cache to produce similar results and improve consistency. It is recommended
  * that prepends only occur with data of the same type.
  *
- * @link http://www.php.net/manual/en/memcached.prepend.php
+ * @link https://www.php.net/manual/en/memcached.prepend.php
  *
- * @param string    $key    The key under which to store the value.
- * @param string    $value  Must be string as prepending mixed values is not well-defined.
- * @param string    $group  The group value prepended to the $key.
- * @return bool             Returns TRUE on success or FALSE on failure.
+ * @param string $key   The key under which to store the value.
+ * @param string $value Must be string as prepending mixed values is not well-defined.
+ * @param string $group The group value prepended to the $key.
+ * @return bool True on success, false on failure.
  */
 function wp_cache_prepend( $key, $value, $group = '' ) {
 	global $wp_object_cache;
@@ -564,23 +570,23 @@ function wp_cache_prepend( $key, $value, $group = '' ) {
 }
 
 /**
- * Append data to an existing item by server key.
+ * Appends data to an existing item by server key.
  *
  * This method should throw an error if it is used with compressed data. This is an expected behavior.
- * Memcached casts the value to be prepended to the initial value to the type of the initial value. Be
- * careful as this leads to unexpected behavior at times. For instance, prepending (float) 45.23 to
- * (int) 23 will result in 45, because the value is first combined (45.2323) then cast to "integer"
+ * Memcached casts the value to be prepended to the initial value to the type of the initial value.
+ * Be careful as this leads to unexpected behavior at times. For instance, prepending (float) 45.23
+ * to (int) 23 will result in 45, because the value is first combined (45.2323) then cast to "integer"
  * (the original value), which will be (int) 45. Due to how memcached treats types, the behavior has been
- * mimicked in the internal cache to produce similar results and improve consistency. It is recommend
+ * mimicked in the internal cache to produce similar results and improve consistency. It is recommended
  * that prepends only occur with data of the same type.
  *
- * @link http://www.php.net/manual/en/memcached.prependbykey.php
+ * @link https://www.php.net/manual/en/memcached.prependbykey.php
  *
- * @param string    $server_key     The key identifying the server to store the value on.
- * @param string    $key            The key under which to store the value.
- * @param string    $value          Must be string as prepending mixed values is not well-defined.
- * @param string    $group          The group value prepended to the $key.
- * @return bool                     Returns TRUE on success or FALSE on failure.
+ * @param string $server_key The key identifying the server to store the value on.
+ * @param string $key        The key under which to store the value.
+ * @param string $value      Must be string as prepending mixed values is not well-defined.
+ * @param string $group      The group value prepended to the $key.
+ * @return bool True on success, false on failure.
  */
 function wp_cache_prepend_by_key( $server_key, $key, $value, $group = '' ) {
 	global $wp_object_cache;
@@ -590,16 +596,16 @@ function wp_cache_prepend_by_key( $server_key, $key, $value, $group = '' ) {
 /**
  * Replaces a value in cache.
  *
- * This method is similar to "add"; however, is does not successfully set a value if
- * the object's key is not already set in cache.
+ * This method is similar to "add"; however, is does not successfully set a value
+ * if the object's key is not already set in cache.
  *
- * @link http://www.php.net/manual/en/memcached.replace.php
+ * @link https://www.php.net/manual/en/memcached.replace.php
  *
- * @param string    $key        The key under which to store the value.
- * @param mixed     $value      The value to store.
- * @param string    $group      The group value appended to the $key.
- * @param int       $expiration The expiration time, defaults to 0.
- * @return bool                 Returns TRUE on success or FALSE on failure.
+ * @param string $key        The key under which to store the value.
+ * @param mixed  $value      The value to store.
+ * @param string $group      The group value appended to the $key.
+ * @param int    $expiration The expiration time, defaults to 0.
+ * @return bool True on success, false on failure.
  */
 function wp_cache_replace( $key, $value, $group = '', $expiration = 0 ) {
 	global $wp_object_cache;
@@ -609,17 +615,17 @@ function wp_cache_replace( $key, $value, $group = '', $expiration = 0 ) {
 /**
  * Replaces a value in cache on a specific server.
  *
- * This method is similar to "addByKey"; however, is does not successfully set a value if
- * the object's key is not already set in cache.
+ * This method is similar to "addByKey"; however, is does not successfully set a value
+ * if the object's key is not already set in cache.
  *
- * @link http://www.php.net/manual/en/memcached.addbykey.php
+ * @link https://www.php.net/manual/en/memcached.addbykey.php
  *
- * @param string    $server_key     The key identifying the server to store the value on.
- * @param string    $key            The key under which to store the value.
- * @param mixed     $value          The value to store.
- * @param string    $group          The group value appended to the $key.
- * @param int       $expiration     The expiration time, defaults to 0.
- * @return bool                     Returns TRUE on success or FALSE on failure.
+ * @param string $server_key The key identifying the server to store the value on.
+ * @param string $key        The key under which to store the value.
+ * @param mixed  $value      The value to store.
+ * @param string $group      The group value appended to the $key.
+ * @param int    $expiration The expiration time, defaults to 0.
+ * @return bool True on success, false on failure.
  */
 function wp_cache_replace_by_key( $server_key, $key, $value, $group = '', $expiration = 0 ) {
 	global $wp_object_cache;
@@ -631,13 +637,13 @@ function wp_cache_replace_by_key( $server_key, $key, $value, $group = '', $expir
  *
  * The value is set whether or not this key already exists in memcached.
  *
- * @link http://www.php.net/manual/en/memcached.set.php
+ * @link https://www.php.net/manual/en/memcached.set.php
  *
- * @param string    $key        The key under which to store the value.
- * @param mixed     $value      The value to store.
- * @param string    $group      The group value appended to the $key.
- * @param int       $expiration The expiration time, defaults to 0.
- * @return bool                 Returns TRUE on success or FALSE on failure.
+ * @param string $key        The key under which to store the value.
+ * @param mixed  $value      The value to store.
+ * @param string $group      The group value appended to the $key.
+ * @param int    $expiration The expiration time, defaults to 0.
+ * @return bool True on success, false on failure.
  */
 function wp_cache_set( $key, $value, $group = '', $expiration = 0 ) {
 	global $wp_object_cache;
@@ -649,14 +655,14 @@ function wp_cache_set( $key, $value, $group = '', $expiration = 0 ) {
  *
  * The value is set whether or not this key already exists in memcached.
  *
- * @link http://www.php.net/manual/en/memcached.set.php
+ * @link https://www.php.net/manual/en/memcached.set.php
  *
- * @param string    $server_key     The key identifying the server to store the value on.
- * @param string    $key            The key under which to store the value.
- * @param mixed     $value          The value to store.
- * @param string    $group          The group value appended to the $key.
- * @param int       $expiration     The expiration time, defaults to 0.
- * @return bool                     Returns TRUE on success or FALSE on failure.
+ * @param string $server_key The key identifying the server to store the value on.
+ * @param string $key        The key under which to store the value.
+ * @param mixed  $value      The value to store.
+ * @param string $group      The group value appended to the $key.
+ * @param int    $expiration The expiration time, defaults to 0.
+ * @return bool True on success, false on failure.
  */
 function wp_cache_set_by_key( $server_key, $key, $value, $group = '', $expiration = 0 ) {
 	global $wp_object_cache;
@@ -664,7 +670,7 @@ function wp_cache_set_by_key( $server_key, $key, $value, $group = '', $expiratio
 }
 
 /**
- * Set multiple values to cache at once.
+ * Sets multiple values to cache at once.
  *
  * By sending an array of $items to this function, all values are saved at once to
  * memcached, reducing the need for multiple requests to memcached. The $items array
@@ -672,10 +678,10 @@ function wp_cache_set_by_key( $server_key, $key, $value, $group = '', $expiratio
  * are merged with the $groups array/string value via buildKeys to determine the
  * final key for the object.
  *
- * @param array         $items      An array of key/value pairs to store on the server.
- * @param string|array  $groups     Group(s) to merge with key(s) in $items.
- * @param int           $expiration The expiration time, defaults to 0.
- * @return bool                     Returns TRUE on success or FALSE on failure.
+ * @param array        $items      An array of key/value pairs to store on the server.
+ * @param string|array $groups     Group(s) to merge with key(s) in $items.
+ * @param int          $expiration The expiration time, defaults to 0.
+ * @return bool True on success, false on failure.
  */
 function wp_cache_set_multi( $items, $groups = '', $expiration = 0 ) {
 	global $wp_object_cache;
@@ -683,7 +689,7 @@ function wp_cache_set_multi( $items, $groups = '', $expiration = 0 ) {
 }
 
 /**
- * Set multiple values to cache at once on specified server.
+ * Sets multiple values to cache at once on specified server.
  *
  * By sending an array of $items to this function, all values are saved at once to
  * memcached, reducing the need for multiple requests to memcached. The $items array
@@ -691,11 +697,11 @@ function wp_cache_set_multi( $items, $groups = '', $expiration = 0 ) {
  * are merged with the $groups array/string value via buildKeys to determine the
  * final key for the object.
  *
- * @param string        $server_key The key identifying the server to store the value on.
- * @param array         $items      An array of key/value pairs to store on the server.
- * @param string|array  $groups     Group(s) to merge with key(s) in $items.
- * @param int           $expiration The expiration time, defaults to 0.
- * @return bool                     Returns TRUE on success or FALSE on failure.
+ * @param string       $server_key The key identifying the server to store the value on.
+ * @param array        $items      An array of key/value pairs to store on the server.
+ * @param string|array $groups     Group(s) to merge with key(s) in $items.
+ * @param int          $expiration The expiration time, defaults to 0.
+ * @return bool True on success, false on failure.
  */
 function wp_cache_set_multi_by_key( $server_key, $items, $groups = 'default', $expiration = 0 ) {
 	global $wp_object_cache;
@@ -703,13 +709,13 @@ function wp_cache_set_multi_by_key( $server_key, $items, $groups = 'default', $e
 }
 
 /**
- * Set a Memcached option.
+ * Sets a Memcached option.
  *
- * @link http://www.php.net/manual/en/memcached.setoption.php
+ * @link https://www.php.net/manual/en/memcached.setoption.php
  *
- * @param int       $option Option name.
- * @param mixed     $value  Option value.
- * @return bool             Returns TRUE on success or FALSE on failure.
+ * @param int   $option Option name.
+ * @param mixed $value  Option value.
+ * @return bool True on success, false on failure.
  */
 function wp_cache_set_option( $option, $value ) {
 	global $wp_object_cache;
@@ -717,9 +723,9 @@ function wp_cache_set_option( $option, $value ) {
 }
 
 /**
- * Switch blog prefix, which changes the cache that is accessed.
+ * Switches blog prefix, which changes the cache that is accessed.
  *
- * @param  int     $blog_id    Blog to switch to.
+ * @param int $blog_id Blog to switch to.
  * @return void
  */
 function wp_cache_switch_to_blog( $blog_id ) {
@@ -731,8 +737,8 @@ function wp_cache_switch_to_blog( $blog_id ) {
 /**
  * Sets up Object Cache Global and assigns it.
  *
- * @global  WP_Object_Cache     $wp_object_cache    WordPress Object Cache
- * @return  void
+ * @global WP_Object_Cache $wp_object_cache WordPress Object Cache
+ * @return void
  */
 function wp_cache_init() {
 	global $wp_object_cache;
@@ -742,8 +748,8 @@ function wp_cache_init() {
 /**
  * Adds a group or set of groups to the list of non-persistent groups.
  *
- * @param   string|array    $groups     A group or an array of groups to add.
- * @return  void
+ * @param string|array $groups A group or an array of groups to add.
+ * @return void
  */
 function wp_cache_add_global_groups( $groups ) {
 	global $wp_object_cache;
@@ -753,8 +759,8 @@ function wp_cache_add_global_groups( $groups ) {
 /**
  * Adds a group or set of groups to the list of non-Memcached groups.
  *
- * @param   string|array    $groups     A group or an array of groups to add.
- * @return  void
+ * @param string|array $groups A group or an array of groups to add.
+ * @return void
  */
 function wp_cache_add_non_persistent_groups( $groups ) {
 	global $wp_object_cache;
@@ -814,14 +820,15 @@ class WP_Object_Cache {
 	public $blog_prefix = '';
 
 	/**
-	 * Instantiate the Memcached class.
+	 * Instantiates the Memcached class.
 	 *
 	 * Instantiates the Memcached class and returns adds the servers specified
 	 * in the $memcached_servers global array.
 	 *
-	 * @link    http://www.php.net/manual/en/memcached.construct.php
+	 * @link https://www.php.net/manual/en/memcached.construct.php
 	 *
-	 * @param   null    $persistent_id      To create an instance that persists between requests, use persistent_id to specify a unique ID for the instance.
+	 * @param null $persistent_id To create an instance that persists between requests,
+	 *                            use persistent_id to specify a unique ID for the instance.
 	 */
 	public function __construct( $persistent_id = null ) {
 		global $memcached_servers, $blog_id, $table_prefix;
@@ -841,20 +848,20 @@ class WP_Object_Cache {
 		$this->addServers( $this->servers );
 
 		/**
-		 * This approach is borrowed from Sivel and Boren. Use the salt for easy cache invalidation and for
-		 * multi single WP installations on the same server.
+		 * This approach is borrowed from Sivel and Boren. Use the salt for easy cache invalidation
+		 * and for multi single WP installations on the same server.
 		 */
 		if ( ! defined( 'WP_CACHE_KEY_SALT' ) ) {
 			define( 'WP_CACHE_KEY_SALT', '' );
 		}
 
-		// Assign global and blog prefixes for use with keys
+		// Assign global and blog prefixes for use with keys.
 		if ( function_exists( 'is_multisite' ) ) {
 			$this->global_prefix = ( is_multisite() || defined( 'CUSTOM_USER_TABLE' ) && defined( 'CUSTOM_USER_META_TABLE' ) ) ? '' : $table_prefix;
 			$this->blog_prefix   = ( is_multisite() ? $blog_id : $table_prefix ) . ':';
 		}
 
-		// Setup cacheable values for handling expiration times
+		// Setup cacheable values for handling expiration times.
 		$this->thirty_days = 60 * 60 * 24 * 30;
 		$this->now         = time();
 	}
@@ -865,15 +872,15 @@ class WP_Object_Cache {
 	 * If the specified key already exists, the value is not stored and the function
 	 * returns false.
 	 *
-	 * @link    http://www.php.net/manual/en/memcached.add.php
+	 * @link https://www.php.net/manual/en/memcached.add.php
 	 *
-	 * @param   string      $key            The key under which to store the value.
-	 * @param   mixed       $value          The value to store.
-	 * @param   string      $group          The group value appended to the $key.
-	 * @param   int         $expiration     The expiration time, defaults to 0.
-	 * @param   string      $server_key     The key identifying the server to store the value on.
-	 * @param   bool        $by_key         True to store in internal cache by key; false to not store by key
-	 * @return  bool                        Returns TRUE on success or FALSE on failure.
+	 * @param string $key        The key under which to store the value.
+	 * @param mixed  $value      The value to store.
+	 * @param string $group      The group value appended to the $key.
+	 * @param int    $expiration The expiration time, defaults to 0.
+	 * @param string $server_key The key identifying the server to store the value on.
+	 * @param bool   $by_key     True to store in internal cache by key; false to not store by key.
+	 * @return bool True on success, false on failure.
 	 */
 	public function add( $key, $value, $group = 'default', $expiration = 0, $server_key = '', $by_key = false ) {
 		/*
@@ -889,10 +896,10 @@ class WP_Object_Cache {
 		$derived_key = $this->buildKey( $key, $group );
 		$expiration  = $this->sanitize_expiration( $expiration );
 
-		// If group is a non-Memcached group, save to runtime cache, not Memcached
+		// If group is a non-Memcached group, save to runtime cache, not Memcached.
 		if ( in_array( $group, $this->no_mc_groups, true ) ) {
 
-			// Add does not set the value if the key exists; mimic that here
+			// Add does not set the value if the key exists; mimic that here.
 			if ( isset( $this->cache[ $derived_key ] ) ) {
 				return false;
 			}
@@ -902,14 +909,14 @@ class WP_Object_Cache {
 			return true;
 		}
 
-		// Save to Memcached
+		// Save to Memcached.
 		if ( $by_key ) {
 			$result = $this->m->addByKey( $server_key, $derived_key, $value, $expiration );
 		} else {
 			$result = $this->m->add( $derived_key, $value, $expiration );
 		}
 
-		// Store in runtime cache if add was successful
+		// Store in runtime cache if add was successful.
 		if ( Memcached::RES_SUCCESS === $this->getResultCode() ) {
 			$this->add_to_internal_cache( $derived_key, $value );
 		}
@@ -925,28 +932,29 @@ class WP_Object_Cache {
 	 * _cache object as part of the runtime cache. It will add it to an array for the
 	 * specified server_key.
 	 *
-	 * @link    http://www.php.net/manual/en/memcached.addbykey.php
+	 * @link https://www.php.net/manual/en/memcached.addbykey.php
 	 *
-	 * @param   string      $server_key     The key identifying the server to store the value on.
-	 * @param   string      $key            The key under which to store the value.
-	 * @param   mixed       $value          The value to store.
-	 * @param   string      $group          The group value appended to the $key.
-	 * @param   int         $expiration     The expiration time, defaults to 0.
-	 * @return  bool                        Returns TRUE on success or FALSE on failure.
+	 * @param string $server_key The key identifying the server to store the value on.
+	 * @param string $key        The key under which to store the value.
+	 * @param mixed  $value      The value to store.
+	 * @param string $group      The group value appended to the $key.
+	 * @param int    $expiration The expiration time, defaults to 0.
+	 * @return bool True on success, false on failure.
 	 */
 	public function addByKey( $server_key, $key, $value, $group = 'default', $expiration = 0 ) {
 		return $this->add( $key, $value, $group, $expiration, $server_key, true );
 	}
 
 	/**
-	 * Add a single server to the list of Memcached servers.
+	 * Adds a single server to the list of Memcached servers.
 	 *
-	 * @link http://www.php.net/manual/en/memcached.addserver.php
+	 * @link https://www.php.net/manual/en/memcached.addserver.php
 	 *
-	 * @param   string      $host           The hostname of the memcache server.
-	 * @param   int         $port           The port on which memcache is running.
-	 * @param   int         $weight         The weight of the server relative to the total weight of all the servers in the pool.
-	 * @return  bool                        Returns TRUE on success or FALSE on failure.
+	 * @param string $host   The hostname of the memcache server.
+	 * @param int    $port   The port on which memcache is running.
+	 * @param int    $weight The weight of the server relative to the total weight
+	 *                       of all the servers in the pool.
+	 * @return bool True on success, false on failure.
 	 */
 	public function addServer( $host, $port, $weight = 0 ) {
 		$host   = is_string( $host ) ? $host : '127.0.0.1';
@@ -962,10 +970,10 @@ class WP_Object_Cache {
 	 * Each individual server in the array must include a domain and port, with an optional
 	 * weight value: $servers = array( array( '127.0.0.1', 11211, 0 ) );
 	 *
-	 * @link    http://www.php.net/manual/en/memcached.addservers.php
+	 * @link https://www.php.net/manual/en/memcached.addservers.php
 	 *
-	 * @param   array       $servers        Array of server to register.
-	 * @return  bool                        True on success; false on failure.
+	 * @param array $servers Array of server to register.
+	 * @return bool True on success, false on failure.
 	 */
 	public function addServers( $servers ) {
 		if ( ! is_object( $this->m ) ) {
@@ -976,23 +984,23 @@ class WP_Object_Cache {
 	}
 
 	/**
-	 * Append data to an existing item.
+	 * Appends data to an existing item.
 	 *
-	 * This method should throw an error if it is used with compressed data. This
-	 * is an expected behavior. Memcached casts the value to be appended to the initial value to the
-	 * type of the initial value. Be careful as this leads to unexpected behavior at times. Due to
-	 * how memcached treats types, the behavior has been mimicked in the internal cache to produce
-	 * similar results and improve consistency. It is recommend that appends only occur with data of
+	 * This method should throw an error if it is used with compressed data.
+	 * This is an expected behavior. Memcached casts the value to be appended to the initial value
+	 * to the type of the initial value. Be careful as this leads to unexpected behavior at times.
+	 * Due to how memcached treats types, the behavior has been mimicked in the internal cache to produce
+	 * similar results and improve consistency. It is recommended that appends only occur with data of
 	 * the same type.
 	 *
-	 * @link    http://www.php.net/manual/en/memcached.append.php
+	 * @link https://www.php.net/manual/en/memcached.append.php
 	 *
-	 * @param   string      $key            The key under which to store the value.
-	 * @param   mixed       $value          Must be string as appending mixed values is not well-defined.
-	 * @param   string      $group          The group value appended to the $key.
-	 * @param   string      $server_key     The key identifying the server to store the value on.
-	 * @param   bool        $by_key         True to store in internal cache by key; false to not store by key
-	 * @return  bool                        Returns TRUE on success or FALSE on failure.
+	 * @param string $key        The key under which to store the value.
+	 * @param mixed  $value      Must be string as appending mixed values is not well-defined.
+	 * @param string $group      The group value appended to the $key.
+	 * @param string $server_key The key identifying the server to store the value on.
+	 * @param bool   $by_key     True to store in internal cache by key; false to not store by key.
+	 * @return bool True on success, false on failure.
 	 */
 	public function append( $key, $value, $group = 'default', $server_key = '', $by_key = false ) {
 		if ( ! is_string( $value ) && ! is_int( $value ) && ! is_float( $value ) ) {
@@ -1001,7 +1009,7 @@ class WP_Object_Cache {
 
 		$derived_key = $this->buildKey( $key, $group );
 
-		// If group is a non-Memcached group, append to runtime cache value, not Memcached
+		// If group is a non-Memcached group, append to runtime cache value, not Memcached.
 		if ( in_array( $group, $this->no_mc_groups, true ) ) {
 			if ( ! isset( $this->cache[ $derived_key ] ) ) {
 				return false;
@@ -1012,14 +1020,14 @@ class WP_Object_Cache {
 			return true;
 		}
 
-		// Append to Memcached value
+		// Append to Memcached value.
 		if ( $by_key ) {
 			$result = $this->m->appendByKey( $server_key, $derived_key, $value );
 		} else {
 			$result = $this->m->append( $derived_key, $value );
 		}
 
-		// Store in runtime cache if add was successful
+		// Store in runtime cache if add was successful.
 		if ( Memcached::RES_SUCCESS === $this->getResultCode() ) {
 			$combined = $this->combine_values( $this->cache[ $derived_key ], $value, 'app' );
 			$this->add_to_internal_cache( $derived_key, $combined );
@@ -1029,22 +1037,22 @@ class WP_Object_Cache {
 	}
 
 	/**
-	 * Append data to an existing item by server key.
+	 * Appends data to an existing item by server key.
 	 *
-	 * This method should throw an error if it is used with compressed data. This
-	 * is an expected behavior. Memcached casts the value to be appended to the initial value to the
-	 * type of the initial value. Be careful as this leads to unexpected behavior at times. Due to
-	 * how memcached treats types, the behavior has been mimicked in the internal cache to produce
-	 * similar results and improve consistency. It is recommend that appends only occur with data of
+	 * This method should throw an error if it is used with compressed data.
+	 * This is an expected behavior. Memcached casts the value to be appended to the initial value
+	 * to the type of the initial value. Be careful as this leads to unexpected behavior at times.
+	 * Due to how memcached treats types, the behavior has been mimicked in the internal cache to produce
+	 * similar results and improve consistency. It is recommended that appends only occur with data of
 	 * the same type.
 	 *
-	 * @link    http://www.php.net/manual/en/memcached.appendbykey.php
+	 * @link https://www.php.net/manual/en/memcached.appendbykey.php
 	 *
-	 * @param   string      $server_key     The key identifying the server to store the value on.
-	 * @param   string      $key            The key under which to store the value.
-	 * @param   mixed       $value          Must be string as appending mixed values is not well-defined
-	 * @param   string      $group          The group value appended to the $key.
-	 * @return  bool                        Returns TRUE on success or FALSE on failure.
+	 * @param string $server_key The key identifying the server to store the value on.
+	 * @param string $key        The key under which to store the value.
+	 * @param mixed  $value      Must be string as appending mixed values is not well-defined.
+	 * @param string $group      The group value appended to the $key.
+	 * @return bool True on success, false on failure.
 	 */
 	public function appendByKey( $server_key, $key, $value, $group = 'default' ) {
 		return $this->append( $key, $value, $group, $server_key, true );
@@ -1053,19 +1061,19 @@ class WP_Object_Cache {
 	/**
 	 * Performs a "check and set" to store data.
 	 *
-	 * The set will be successful only if the no other request has updated the value since it was fetched since
-	 * this request.
+	 * The set will be successful only if the no other request has updated the value
+	 * since it was fetched by this request.
 	 *
-	 * @link    http://www.php.net/manual/en/memcached.cas.php
+	 * @link https://www.php.net/manual/en/memcached.cas.php
 	 *
-	 * @param   float       $cas_token      Unique value associated with the existing item. Generated by memcached.
-	 * @param   string      $key            The key under which to store the value.
-	 * @param   mixed       $value          The value to store.
-	 * @param   string      $group          The group value appended to the $key.
-	 * @param   int         $expiration     The expiration time, defaults to 0.
-	 * @param   string      $server_key     The key identifying the server to store the value on.
-	 * @param   bool        $by_key         True to store in internal cache by key; false to not store by key
-	 * @return  bool                        Returns TRUE on success or FALSE on failure.
+	 * @param float  $cas_token  Unique value associated with the existing item. Generated by memcached.
+	 * @param string $key        The key under which to store the value.
+	 * @param mixed  $value      The value to store.
+	 * @param string $group      The group value appended to the $key.
+	 * @param int    $expiration The expiration time, defaults to 0.
+	 * @param string $server_key The key identifying the server to store the value on.
+	 * @param bool   $by_key     True to store in internal cache by key; false to not store by key.
+	 * @return bool True on success, false on failure.
 	 */
 	public function cas( $cas_token, $key, $value, $group = 'default', $expiration = 0, $server_key = '', $by_key = false ) {
 		$derived_key = $this->buildKey( $key, $group );
@@ -1081,14 +1089,14 @@ class WP_Object_Cache {
 			return true;
 		}
 
-		// Save to Memcached
+		// Save to Memcached.
 		if ( $by_key ) {
 			$result = $this->m->casByKey( $cas_token, $server_key, $derived_key, $value, $expiration );
 		} else {
 			$result = $this->m->cas( $cas_token, $derived_key, $value, $expiration );
 		}
 
-		// Store in runtime cache if cas was successful
+		// Store in runtime cache if cas was successful.
 		if ( Memcached::RES_SUCCESS === $this->getResultCode() ) {
 			$this->add_to_internal_cache( $derived_key, $value );
 		}
@@ -1099,50 +1107,50 @@ class WP_Object_Cache {
 	/**
 	 * Performs a "check and set" to store data with a server key.
 	 *
-	 * The set will be successful only if the no other request has updated the value since it was fetched by
-	 * this request.
+	 * The set will be successful only if the no other request has updated the value
+	 * since it was fetched by this request.
 	 *
-	 * @link    http://www.php.net/manual/en/memcached.casbykey.php
+	 * @link https://www.php.net/manual/en/memcached.casbykey.php
 	 *
-	 * @param   string      $server_key     The key identifying the server to store the value on.
-	 * @param   float       $cas_token      Unique value associated with the existing item. Generated by memcached.
-	 * @param   string      $key            The key under which to store the value.
-	 * @param   mixed       $value          The value to store.
-	 * @param   string      $group          The group value appended to the $key.
-	 * @param   int         $expiration     The expiration time, defaults to 0.
-	 * @return  bool                        Returns TRUE on success or FALSE on failure.
+	 * @param string $server_key The key identifying the server to store the value on.
+	 * @param float  $cas_token  Unique value associated with the existing item. Generated by memcached.
+	 * @param string $key        The key under which to store the value.
+	 * @param mixed  $value      The value to store.
+	 * @param string $group      The group value appended to the $key.
+	 * @param int    $expiration The expiration time, defaults to 0.
+	 * @return bool True on success, false on failure.
 	 */
 	public function casByKey( $cas_token, $server_key, $key, $value, $group = 'default', $expiration = 0 ) {
 		return $this->cas( $cas_token, $key, $value, $group, $expiration, $server_key, true );
 	}
 
 	/**
-	 * Decrement a numeric item's value.
+	 * Decrements a numeric item's value.
 	 *
-	 * @link http://www.php.net/manual/en/memcached.decrement.php
+	 * @link https://www.php.net/manual/en/memcached.decrement.php
 	 *
-	 * @param string    $key    The key under which to store the value.
-	 * @param int       $offset The amount by which to decrement the item's value.
-	 * @param string    $group  The group value appended to the $key.
-	 * @return int|bool         Returns item's new value on success or FALSE on failure.
+	 * @param string $key    The key under which to store the value.
+	 * @param int    $offset The amount by which to decrement the item's value.
+	 * @param string $group  The group value appended to the $key.
+	 * @return int|bool Item's new value on success, false on failure.
 	 */
 	public function decrement( $key, $offset = 1, $group = 'default' ) {
 		$derived_key = $this->buildKey( $key, $group );
 
-		// Decrement values in no_mc_groups
+		// Decrement values in no_mc_groups.
 		if ( in_array( $group, $this->no_mc_groups, true ) ) {
 
-			// Only decrement if the key already exists and value is 0 or greater (mimics memcached behavior)
+			// Only decrement if the key already exists and value is 0 or greater (mimics memcached behavior).
 			if ( isset( $this->cache[ $derived_key ] ) && $this->cache[ $derived_key ] >= 0 ) {
 
-				// If numeric, subtract; otherwise, consider it 0 and do nothing
+				// If numeric, subtract; otherwise, consider it 0 and do nothing.
 				if ( is_numeric( $this->cache[ $derived_key ] ) ) {
 					$this->cache[ $derived_key ] -= (int) $offset;
 				} else {
 					$this->cache[ $derived_key ] = 0;
 				}
 
-				// Returned value cannot be less than 0
+				// Returned value cannot be less than 0.
 				if ( $this->cache[ $derived_key ] < 0 ) {
 					$this->cache[ $derived_key ] = 0;
 				}
@@ -1163,41 +1171,42 @@ class WP_Object_Cache {
 	}
 
 	/**
-	 * Decrement a numeric item's value.
+	 * Decrements a numeric item's value.
 	 *
-	 * Alias for $this->decrement. Other caching backends use this abbreviated form of the function. It *may* cause
-	 * breakage somewhere, so it is nice to have. This function will also allow the core unit tests to pass.
+	 * Alias for $this->decrement(). Other caching backends use this abbreviated form
+	 * of the function. It *may* cause breakage somewhere, so it is nice to have.
+	 * This function will also allow the core unit tests to pass.
 	 *
-	 * @param string    $key    The key under which to store the value.
-	 * @param int       $offset The amount by which to decrement the item's value.
-	 * @param string    $group  The group value appended to the $key.
-	 * @return int|bool         Returns item's new value on success or FALSE on failure.
+	 * @param string $key    The key under which to store the value.
+	 * @param int    $offset The amount by which to decrement the item's value.
+	 * @param string $group  The group value appended to the $key.
+	 * @return int|bool Item's new value on success, false on failure.
 	 */
 	public function decr( $key, $offset = 1, $group = 'default' ) {
 		return $this->decrement( $key, $offset, $group );
 	}
 
 	/**
-	 * Remove the item from the cache.
+	 * Removes the item from the cache.
 	 *
-	 * Remove an item from memcached with identified by $key after $time seconds. The
-	 * $time parameter allows an object to be queued for deletion without immediately
-	 * deleting. Between the time that it is queued and the time it's deleted, add,
-	 * replace, and get will fail, but set will succeed.
+	 * Removes an item from memcached with identified by $key after $time seconds.
+	 * The $time parameter allows an object to be queued for deletion without
+	 * immediately deleting. Between the time that it is queued and the time it's deleted,
+	 * add, replace, and get will fail, but set will succeed.
 	 *
-	 * @link http://www.php.net/manual/en/memcached.delete.php
+	 * @link https://www.php.net/manual/en/memcached.delete.php
 	 *
-	 * @param   string      $key        The key under which to store the value.
-	 * @param   string      $group      The group value appended to the $key.
-	 * @param   int         $time       The amount of time the server will wait to delete the item in seconds.
-	 * @param   string      $server_key The key identifying the server to store the value on.
-	 * @param   bool        $by_key     True to store in internal cache by key; false to not store by key
-	 * @return  bool                    Returns TRUE on success or FALSE on failure.
+	 * @param string $key        The key under which to store the value.
+	 * @param string $group      The group value appended to the $key.
+	 * @param int    $time       The amount of time the server will wait to delete the item in seconds.
+	 * @param string $server_key The key identifying the server to store the value on.
+	 * @param bool   $by_key     True to store in internal cache by key; false to not store by key.
+	 * @return bool True on success, false on failure.
 	 */
 	public function delete( $key, $group = 'default', $time = 0, $server_key = '', $by_key = false ) {
 		$derived_key = $this->buildKey( $key, $group );
 
-		// Remove from no_mc_groups array
+		// Remove from no_mc_groups array.
 		if ( in_array( $group, $this->no_mc_groups, true ) ) {
 			if ( isset( $this->cache[ $derived_key ] ) ) {
 				unset( $this->cache[ $derived_key ] );
@@ -1220,59 +1229,59 @@ class WP_Object_Cache {
 	}
 
 	/**
-	 * Remove the item from the cache by server key.
+	 * Removes the item from the cache by server key.
 	 *
-	 * Remove an item from memcached with identified by $key after $time seconds. The
-	 * $time parameter allows an object to be queued for deletion without immediately
-	 * deleting. Between the time that it is queued and the time it's deleted, add,
-	 * replace, and get will fail, but set will succeed.
+	 * Removes an item from memcached with identified by $key after $time seconds.
+	 * The $time parameter allows an object to be queued for deletion without
+	 * immediately deleting. Between the time that it is queued and the time it's deleted,
+	 * add, replace, and get will fail, but set will succeed.
 	 *
-	 * @link http://www.php.net/manual/en/memcached.deletebykey.php
+	 * @link https://www.php.net/manual/en/memcached.deletebykey.php
 	 *
-	 * @param   string      $server_key The key identifying the server to store the value on.
-	 * @param   string      $key        The key under which to store the value.
-	 * @param   string      $group      The group value appended to the $key.
-	 * @param   int         $time       The amount of time the server will wait to delete the item in seconds.
-	 * @return  bool                    Returns TRUE on success or FALSE on failure.
+	 * @param string $server_key The key identifying the server to store the value on.
+	 * @param string $key        The key under which to store the value.
+	 * @param string $group      The group value appended to the $key.
+	 * @param int    $time       The amount of time the server will wait to delete the item in seconds.
+	 * @return bool True on success, false on failure.
 	 */
 	public function deleteByKey( $server_key, $key, $group = 'default', $time = 0 ) {
 		return $this->delete( $key, $group, $time, $server_key, true );
 	}
 
 	/**
-	 * Fetch the next result.
+	 * Fetches the next result.
 	 *
-	 * @link http://www.php.net/manual/en/memcached.fetch.php
+	 * @link https://www.php.net/manual/en/memcached.fetch.php
 	 *
-	 * @return array|bool   Returns the next result or FALSE on failure.
+	 * @return array|false The next result on success, false on failure.
 	 */
 	public function fetch() {
 		return $this->m->fetch();
 	}
 
 	/**
-	 * Fetch all remaining results from the last request.
+	 * Fetches all remaining results from the last request.
 	 *
-	 * @link http://www.php.net/manual/en/memcached.fetchall.php
+	 * @link https://www.php.net/manual/en/memcached.fetchall.php
 	 *
-	 * @return  array|bool          Returns the results or FALSE on failure.
+	 * @return array|false The results on success, false on failure.
 	 */
 	public function fetchAll() {
 		return $this->m->fetchAll();
 	}
 
 	/**
-	 * Invalidate all items in the cache.
+	 * Invalidates all items in the cache.
 	 *
-	 * @link http://www.php.net/manual/en/memcached.flush.php
+	 * @link https://www.php.net/manual/en/memcached.flush.php
 	 *
-	 * @param   int     $delay      Number of seconds to wait before invalidating the items.
-	 * @return  bool                Returns TRUE on success or FALSE on failure.
+	 * @param int $delay Number of seconds to wait before invalidating the items.
+	 * @return bool True on success, false on failure.
 	 */
 	public function flush( $delay = 0 ) {
 		$result = $this->m->flush( $delay );
 
-		// Only reset the runtime cache if memcached was properly flushed
+		// Only reset the runtime cache if memcached was properly flushed.
 		if ( Memcached::RES_SUCCESS === $this->getResultCode() ) {
 			$this->cache = array();
 		}
@@ -1281,36 +1290,37 @@ class WP_Object_Cache {
 	}
 
 	/**
-	 * Retrieve object from cache.
-	 *
-	 * Gets an object from cache based on $key and $group. In order to fully support the $cache_cb and $cas_token
-	 * parameters, the runtime cache is ignored by this function if either of those values are set. If either of
-	 * those values are set, the request is made directly to the memcached server for proper handling of the
-	 * callback and/or token. Note that the $cas_token variable cannot be directly passed to the function. The
-	 * variable need to be first defined with a non null value.
-	 *
-	 * If using the $cache_cb argument, the new value will always have an expiration of time of 0 (forever). This
-	 * is a limitation of the Memcached PECL extension.
-	 *
-	 * @link http://www.php.net/manual/en/memcached.get.php
-	 *
-	 * @param   string          $key        The key under which to store the value.
-	 * @param   string          $group      The group value appended to the $key.
-	 * @param   bool            $force      Whether or not to force a cache invalidation.
-	 * @param   null|bool       $found      Variable passed by reference to determine if the value was found or not.
-	 * @param   string          $server_key The key identifying the server to store the value on.
-	 * @param   bool            $by_key     True to store in internal cache by key; false to not store by key
-	 * @param   null|callable   $cache_cb   Read-through caching callback.
-	 * @param   null|float      $cas_token  The variable to store the CAS token in.
-	 * @return  bool|mixed                  Cached object value.
+	 * Retrieves object from cache.
+	 *
+	 * Gets an object from cache based on $key and $group. In order to fully support
+	 * the $cache_cb and $cas_token parameters, the runtime cache is ignored by this function
+	 * if either of those values are set. In that case, the request is made directly
+	 * to the memcached server for proper handling of the callback and/or token.
+	 * Note that the $cas_token variable cannot be directly passed to the function.
+	 * The variable needs to be first defined with a non-null value.
+	 *
+	 * If using the $cache_cb argument, the new value will always have an expiration
+	 * of time of 0 (forever). This is a limitation of the Memcached PECL extension.
+	 *
+	 * @link https://www.php.net/manual/en/memcached.get.php
+	 *
+	 * @param string        $key        The key under which to store the value.
+	 * @param string        $group      The group value appended to the $key.
+	 * @param bool          $force      Whether or not to force a cache invalidation.
+	 * @param null|bool     $found      Variable passed by reference to determine if the value was found or not.
+	 * @param string        $server_key The key identifying the server to store the value on.
+	 * @param bool          $by_key     True to store in internal cache by key; false to not store by key.
+	 * @param null|callable $cache_cb   Read-through caching callback.
+	 * @param null|float    $cas_token  The variable to store the CAS token in.
+	 * @return bool|mixed Cached object value.
 	 */
 	public function get( $key, $group = 'default', $force = false, &$found = null, $server_key = '', $by_key = false, $cache_cb = null, &$cas_token = null ) {
 		$derived_key = $this->buildKey( $key, $group );
 
-		// Assume object is not found
+		// Assume object is not found.
 		$found = false;
 
-		// If either $cache_db, or $cas_token is set, must hit Memcached and bypass runtime cache
+		// If either $cache_db, or $cas_token is set, must hit Memcached and bypass runtime cache.
 		if ( func_num_args() > 6 && ! in_array( $group, $this->no_mc_groups, true ) ) {
 			if ( $by_key ) {
 				$value = $this->m->getByKey( $server_key, $derived_key, $cache_cb, $cas_token );
@@ -1341,27 +1351,28 @@ class WP_Object_Cache {
 	}
 
 	/**
-	 * Retrieve object from cache from specified server.
-	 *
-	 * Gets an object from cache based on $key, $group and $server_key. In order to fully support the $cache_cb and $cas_token
-	 * parameters, the runtime cache is ignored by this function if either of those values are set. If either of
-	 * those values are set, the request is made directly to the memcached server for proper handling of the
-	 * callback and/or token. Note that the $cas_token variable cannot be directly passed to the function. The
-	 * variable need to be first defined with a non null value.
-	 *
-	 * If using the $cache_cb argument, the new value will always have an expiration of time of 0 (forever). This
-	 * is a limitation of the Memcached PECL extension.
-	 *
-	 * @link http://www.php.net/manual/en/memcached.getbykey.php
-	 *
-	 * @param   string          $server_key The key identifying the server to store the value on.
-	 * @param   string          $key        The key under which to store the value.
-	 * @param   string          $group      The group value appended to the $key.
-	 * @param   bool            $force      Whether or not to force a cache invalidation.
-	 * @param   null|bool       $found      Variable passed by reference to determine if the value was found or not.
-	 * @param   null|string     $cache_cb   Read-through caching callback.
-	 * @param   null|float      $cas_token  The variable to store the CAS token in.
-	 * @return  bool|mixed                  Cached object value.
+	 * Retrieves object from cache from specified server.
+	 *
+	 * Gets an object from cache based on $key and $group, and $server_key. In order to fully support
+	 * the $cache_cb and $cas_token parameters, the runtime cache is ignored by this function
+	 * if either of those values are set. In that case, the request is made directly
+	 * to the memcached server for proper handling of the callback and/or token.
+	 * Note that the $cas_token variable cannot be directly passed to the function.
+	 * The variable needs to be first defined with a non-null value.
+	 *
+	 * If using the $cache_cb argument, the new value will always have an expiration
+	 * of time of 0 (forever). This is a limitation of the Memcached PECL extension.
+	 *
+	 * @link https://www.php.net/manual/en/memcached.getbykey.php
+	 *
+	 * @param string      $server_key The key identifying the server to store the value on.
+	 * @param string      $key        The key under which to store the value.
+	 * @param string      $group      The group value appended to the $key.
+	 * @param bool        $force      Whether or not to force a cache invalidation.
+	 * @param null|bool   $found      Variable passed by reference to determine if the value was found or not.
+	 * @param null|string $cache_cb   Read-through caching callback.
+	 * @param null|float  $cas_token  The variable to store the CAS token in.
+	 * @return bool|mixed Cached object value.
 	 */
 	public function getByKey( $server_key, $key, $group = 'default', $force = false, &$found = null, $cache_cb = null, &$cas_token = null ) {
 		/**
@@ -1376,15 +1387,16 @@ class WP_Object_Cache {
 	}
 
 	/**
-	 * Request multiple keys without blocking.
+	 * Requests multiple keys without blocking.
 	 *
-	 * @link http://www.php.net/manual/en/memcached.getdelayed.php
+	 * @link https://www.php.net/manual/en/memcached.getdelayed.php
 	 *
-	 * @param   string|array    $keys       Array or string of key(s) to request.
-	 * @param   string|array    $groups     Array or string of group(s) for the key(s). See buildKeys for more on how these are handled.
-	 * @param   bool            $with_cas   Whether to request CAS token values also.
-	 * @param   null            $value_cb   The result callback or NULL.
-	 * @return  bool                        Returns TRUE on success or FALSE on failure.
+	 * @param string|array $keys     Array or string of key(s) to request.
+	 * @param string|array $groups   Array or string of group(s) for the key(s).
+	 *                               See buildKeys for more on how these are handled.
+	 * @param bool         $with_cas Whether to request CAS token values also.
+	 * @param null         $value_cb The result callback or null.
+	 * @return bool True on success, false on failure.
 	 */
 	public function getDelayed( $keys, $groups = 'default', $with_cas = false, $value_cb = null ) {
 		$derived_keys = $this->buildKeys( $keys, $groups );
@@ -1392,16 +1404,17 @@ class WP_Object_Cache {
 	}
 
 	/**
-	 * Request multiple keys without blocking from a specified server.
+	 * Requests multiple keys without blocking from a specified server.
 	 *
-	 * @link http://www.php.net/manual/en/memcached.getdelayed.php
+	 * @link https://www.php.net/manual/en/memcached.getdelayed.php
 	 *
-	 * @param   string          $server_key The key identifying the server to store the value on.
-	 * @param   string|array    $keys       Array or string of key(s) to request.
-	 * @param   string|array    $groups     Array or string of group(s) for the key(s). See buildKeys for more on how these are handled.
-	 * @param   bool            $with_cas   Whether to request CAS token values also.
-	 * @param   null            $value_cb   The result callback or NULL.
-	 * @return  bool                        Returns TRUE on success or FALSE on failure.
+	 * @param string       $server_key The key identifying the server to store the value on.
+	 * @param string|array $keys       Array or string of key(s) to request.
+	 * @param string|array $groups     Array or string of group(s) for the key(s).
+	 *                                 See buildKeys for more on how these are handled.
+	 * @param bool         $with_cas   Whether to request CAS token values also.
+	 * @param null         $value_cb   The result callback or null.
+	 * @return bool True on success, false on failure.
 	 */
 	public function getDelayedByKey( $server_key, $keys, $groups = 'default', $with_cas = false, $value_cb = null ) {
 		$derived_keys = $this->buildKeys( $keys, $groups );
@@ -1413,22 +1426,23 @@ class WP_Object_Cache {
 	 *
 	 * See the buildKeys method definition to understand the $keys/$groups parameters.
 	 *
-	 * @link http://www.php.net/manual/en/memcached.getmulti.php
+	 * @link https://www.php.net/manual/en/memcached.getmulti.php
 	 *
-	 * @param   array           $keys       Array of keys to retrieve.
-	 * @param   string|array    $groups     If string, used for all keys. If arrays, corresponds with the $keys array.
-	 * @param   string          $server_key The key identifying the server to store the value on.
-	 * @param   null|array      $cas_tokens The variable to store the CAS tokens for the found items.
-	 * @param   int             $flags      The flags for the get operation.
-	 * @return  bool|array                  Returns the array of found items or FALSE on failure.
+	 * @param array        $keys       Array of keys to retrieve.
+	 * @param string|array $groups     If string, used for all keys.
+	 *                                 If arrays, corresponds with the $keys array.
+	 * @param string       $server_key The key identifying the server to store the value on.
+	 * @param null|array   $cas_tokens The variable to store the CAS tokens for the found items.
+	 * @param int          $flags      The flags for the get operation.
+	 * @return bool|array The array of found items on success, false on failure.
 	 */
 	public function getMulti( $keys, $groups = 'default', $server_key = '', &$cas_tokens = null, $flags = null ) {
 		$derived_keys = $this->buildKeys( $keys, $groups );
 
 		/**
-		 * If either $cas_tokens, or $flags is set, must hit Memcached and bypass runtime cache. Note that
-		 * this will purposely ignore no_mc_groups values as they cannot handle CAS tokens or the special
-		 * flags; however, if the groups of groups contains a no_mc_group, this is bypassed.
+		 * If either $cas_tokens, or $flags is set, must hit Memcached and bypass runtime cache.
+		 * Note that this will purposely ignore no_mc_groups values as they cannot handle CAS tokens
+		 * or the special flags; however, if the groups of groups contains a no_mc_group, this is bypassed.
 		 */
 		if ( func_num_args() > 3 && ! $this->contains_no_mc_group( $groups ) ) {
 			if ( ! empty( $server_key ) ) {
@@ -1440,7 +1454,7 @@ class WP_Object_Cache {
 			$values      = array();
 			$need_to_get = array();
 
-			// Pull out values from runtime cache, or mark for retrieval
+			// Pull out values from runtime cache, or mark for retrieval.
 			foreach ( $derived_keys as $key ) {
 				if ( isset( $this->cache[ $key ] ) ) {
 					$values[ $key ] = $this->cache[ $key ];
@@ -1449,7 +1463,7 @@ class WP_Object_Cache {
 				}
 			}
 
-			// Get those keys not found in the runtime cache
+			// Get those keys not found in the runtime cache.
 			if ( ! empty( $need_to_get ) ) {
 				if ( ! empty( $server_key ) ) {
 					$result = $this->m->getMultiByKey( $server_key, array_keys( $need_to_get ) );
@@ -1458,12 +1472,12 @@ class WP_Object_Cache {
 				}
 			}
 
-			// Merge with values found in runtime cache
+			// Merge with values found in runtime cache.
 			if ( isset( $result ) && Memcached::RES_SUCCESS === $this->getResultCode() ) {
 				$values = array_merge( $values, $result );
 			}
 
-			// If order should be preserved, reorder now
+			// If order should be preserved, reorder now.
 			if ( ! empty( $need_to_get ) && Memcached::GET_PRESERVE_ORDER === $flags ) {
 				$ordered_values = array();
 
@@ -1478,7 +1492,7 @@ class WP_Object_Cache {
 			}
 		}
 
-		// Add the values to the runtime cache
+		// Add the values to the runtime cache.
 		$this->cache = array_merge( $this->cache, $values );
 
 		return $values;
@@ -1489,14 +1503,15 @@ class WP_Object_Cache {
 	 *
 	 * See the buildKeys method definition to understand the $keys/$groups parameters.
 	 *
-	 * @link http://www.php.net/manual/en/memcached.getmultibykey.php
+	 * @link https://www.php.net/manual/en/memcached.getmultibykey.php
 	 *
-	 * @param   string          $server_key The key identifying the server to store the value on.
-	 * @param   array           $keys       Array of keys to retrieve.
-	 * @param   string|array    $groups     If string, used for all keys. If arrays, corresponds with the $keys array.
-	 * @param   null|array      $cas_tokens The variable to store the CAS tokens for the found items.
-	 * @param   int             $flags      The flags for the get operation.
-	 * @return  bool|array                  Returns the array of found items or FALSE on failure.
+	 * @param string       $server_key The key identifying the server to store the value on.
+	 * @param array        $keys       Array of keys to retrieve.
+	 * @param string|array $groups     If string, used for all keys.
+	 *                                 If arrays, corresponds with the $keys array.
+	 * @param null|array   $cas_tokens The variable to store the CAS tokens for the found items.
+	 * @param int          $flags      The flags for the get operation.
+	 * @return bool|array The array of found items on success, false on failure.
 	 */
 	public function getMultiByKey( $server_key, $keys, $groups = 'default', &$cas_tokens = null, $flags = null ) {
 		/**
@@ -1511,23 +1526,23 @@ class WP_Object_Cache {
 	}
 
 	/**
-	 * Retrieve a Memcached option value.
+	 * Retrieves a Memcached option value.
 	 *
-	 * @link http://www.php.net/manual/en/memcached.getoption.php
+	 * @link https://www.php.net/manual/en/memcached.getoption.php
 	 *
-	 * @param   int         $option     One of the Memcached::OPT_* constants.
-	 * @return  mixed                   Returns the value of the requested option, or FALSE on error.
+	 * @param int $option One of the Memcached::OPT_* constants.
+	 * @return mixed The value of the requested option on success, false on failure.
 	 */
 	public function getOption( $option ) {
 		return $this->m->getOption( $option );
 	}
 
 	/**
-	 * Return the result code of the last option.
+	 * Returns the result code of the last option.
 	 *
-	 * @link http://www.php.net/manual/en/memcached.getresultcode.php
+	 * @link https://www.php.net/manual/en/memcached.getresultcode.php
 	 *
-	 * @return  int     Result code of the last Memcached operation.
+	 * @return int Result code of the last Memcached operation.
 	 */
 	public function getResultCode() {
 		return $this->m->getResultCode();
@@ -1536,86 +1551,86 @@ class WP_Object_Cache {
 	/**
 	 * Return the message describing the result of the last operation.
 	 *
-	 * @link    http://www.php.net/manual/en/memcached.getresultmessage.php
+	 * @link https://www.php.net/manual/en/memcached.getresultmessage.php
 	 *
-	 * @return  string      Message describing the result of the last Memcached operation.
+	 * @return string Message describing the result of the last Memcached operation.
 	 */
 	public function getResultMessage() {
 		return $this->m->getResultMessage();
 	}
 
 	/**
-	 * Get server information by key.
+	 * Gets server information by key.
 	 *
-	 * @link    http://www.php.net/manual/en/memcached.getserverbykey.php
+	 * @link https://www.php.net/manual/en/memcached.getserverbykey.php
 	 *
-	 * @param   string      $server_key     The key identifying the server to store the value on.
-	 * @return  array                       Array with host, post, and weight on success, FALSE on failure.
+	 * @param string $server_key The key identifying the server to store the value on.
+	 * @return array Array with host, post, and weight on success, false on failure.
 	 */
 	public function getServerByKey( $server_key ) {
 		return $this->m->getServerByKey( $server_key );
 	}
 
 	/**
-	 * Get the list of servers in the pool.
+	 * Gets the list of servers in the pool.
 	 *
-	 * @link    http://www.php.net/manual/en/memcached.getserverlist.php
+	 * @link https://www.php.net/manual/en/memcached.getserverlist.php
 	 *
-	 * @return  array       The list of all servers in the server pool.
+	 * @return array The list of all servers in the server pool.
 	 */
 	public function getServerList() {
 		return $this->m->getServerList();
 	}
 
 	/**
-	 * Get server pool statistics.
+	 * Gets server pool statistics.
 	 *
-	 * @link    http://www.php.net/manual/en/memcached.getstats.php
+	 * @link https://www.php.net/manual/en/memcached.getstats.php
 	 *
-	 * @return  array       Array of server statistics, one entry per server.
+	 * @return array Array of server statistics, one entry per server.
 	 */
 	public function getStats() {
 		return $this->m->getStats();
 	}
 
 	/**
-	 * Get server pool memcached version information.
+	 * Gets server pool memcached version information.
 	 *
-	 * @link    http://www.php.net/manual/en/memcached.getversion.php
+	 * @link https://www.php.net/manual/en/memcached.getversion.php
 	 *
-	 * @return  array       Array of server versions, one entry per server.
+	 * @return array Array of server versions, one entry per server.
 	 */
 	public function getVersion() {
 		return $this->m->getVersion();
 	}
 
 	/**
-	 * Increment a numeric item's value.
+	 * Increments a numeric item's value.
 	 *
-	 * @link http://www.php.net/manual/en/memcached.increment.php
+	 * @link https://www.php.net/manual/en/memcached.increment.php
 	 *
-	 * @param   string      $key        The key under which to store the value.
-	 * @param   int         $offset     The amount by which to increment the item's value.
-	 * @param   string      $group      The group value appended to the $key.
-	 * @return  int|bool                Returns item's new value on success or FALSE on failure.
+	 * @param string $key    The key under which to store the value.
+	 * @param int    $offset The amount by which to increment the item's value.
+	 * @param string $group  The group value appended to the $key.
+	 * @return int|bool Item's new value on success, false on failure.
 	 */
 	public function increment( $key, $offset = 1, $group = 'default' ) {
 		$derived_key = $this->buildKey( $key, $group );
 
-		// Increment values in no_mc_groups
+		// Increment values in no_mc_groups.
 		if ( in_array( $group, $this->no_mc_groups, true ) ) {
 
-			// Only increment if the key already exists and the number is currently 0 or greater (mimics memcached behavior)
+			// Only increment if the key already exists and the number is currently 0 or greater (mimics memcached behavior).
 			if ( isset( $this->cache[ $derived_key ] ) && $this->cache[ $derived_key ] >= 0 ) {
 
-				// If numeric, add; otherwise, consider it 0 and do nothing
+				// If numeric, add; otherwise, consider it 0 and do nothing.
 				if ( is_numeric( $this->cache[ $derived_key ] ) ) {
 					$this->cache[ $derived_key ] += (int) $offset;
 				} else {
 					$this->cache[ $derived_key ] = 0;
 				}
 
-				// Returned value cannot be less than 0
+				// Returned value cannot be less than 0.
 				if ( $this->cache[ $derived_key ] < 0 ) {
 					$this->cache[ $derived_key ] = 0;
 				}
@@ -1636,40 +1651,41 @@ class WP_Object_Cache {
 	}
 
 	/**
-	 * Synonymous with $this->incr.
+	 * Alias for $this->incr().
 	 *
-	 * Certain plugins expect an "incr" method on the $wp_object_cache object (e.g., Batcache). Since the original
-	 * version of this library matched names to the memcached methods, the "incr" method was missing. Adding this
-	 * method restores compatibility with plugins expecting an "incr" method.
+	 * Certain plugins expect an "incr" method on the $wp_object_cache object (e.g., Batcache).
+	 * Since the original version of this library matched names to the memcached methods,
+	 * the "incr" method was missing. Adding this method restores compatibility with plugins
+	 * expecting an "incr" method.
 	 *
-	 * @param   string      $key        The key under which to store the value.
-	 * @param   int         $offset     The amount by which to increment the item's value.
-	 * @param   string      $group      The group value appended to the $key.
-	 * @return  int|bool                Returns item's new value on success or FALSE on failure.
+	 * @param string $key    The key under which to store the value.
+	 * @param int    $offset The amount by which to increment the item's value.
+	 * @param string $group  The group value appended to the $key.
+	 * @return int|bool Item's new value on success, false on failure.
 	 */
 	public function incr( $key, $offset = 1, $group = 'default' ) {
 		return $this->increment( $key, $offset, $group );
 	}
 
 	/**
-	 * Prepend data to an existing item.
+	 * Prepends data to an existing item.
 	 *
 	 * This method should throw an error if it is used with compressed data. This is an expected behavior.
-	 * Memcached casts the value to be prepended to the initial value to the type of the initial value. Be
-	 * careful as this leads to unexpected behavior at times. For instance, prepending (float) 45.23 to
-	 * (int) 23 will result in 45, because the value is first combined (45.2323) then cast to "integer"
+	 * Memcached casts the value to be prepended to the initial value to the type of the initial value.
+	 * Be careful as this leads to unexpected behavior at times. For instance, prepending (float) 45.23
+	 * to (int) 23 will result in 45, because the value is first combined (45.2323) then cast to "integer"
 	 * (the original value), which will be (int) 45. Due to how memcached treats types, the behavior has been
-	 * mimicked in the internal cache to produce similar results and improve consistency. It is recommend
+	 * mimicked in the internal cache to produce similar results and improve consistency. It is recommended
 	 * that prepends only occur with data of the same type.
 	 *
-	 * @link    http://www.php.net/manual/en/memcached.prepend.php
+	 * @link https://www.php.net/manual/en/memcached.prepend.php
 	 *
-	 * @param   string    $key          The key under which to store the value.
-	 * @param   string    $value        Must be string as prepending mixed values is not well-defined.
-	 * @param   string    $group        The group value prepended to the $key.
-	 * @param   string    $server_key   The key identifying the server to store the value on.
-	 * @param   bool      $by_key       True to store in internal cache by key; false to not store by key
-	 * @return  bool                    Returns TRUE on success or FALSE on failure.
+	 * @param string $key        The key under which to store the value.
+	 * @param string $value      Must be string as prepending mixed values is not well-defined.
+	 * @param string $group      The group value prepended to the $key.
+	 * @param string $server_key The key identifying the server to store the value on.
+	 * @param bool   $by_key     True to store in internal cache by key; false to not store by key.
+	 * @return bool True on success, false on failure.
 	 */
 	public function prepend( $key, $value, $group = 'default', $server_key = '', $by_key = false ) {
 		if ( ! is_string( $value ) && ! is_int( $value ) && ! is_float( $value ) ) {
@@ -1678,7 +1694,7 @@ class WP_Object_Cache {
 
 		$derived_key = $this->buildKey( $key, $group );
 
-		// If group is a non-Memcached group, prepend to runtime cache value, not Memcached
+		// If group is a non-Memcached group, prepend to runtime cache value, not Memcached.
 		if ( in_array( $group, $this->no_mc_groups, true ) ) {
 			if ( ! isset( $this->cache[ $derived_key ] ) ) {
 				return false;
@@ -1689,14 +1705,14 @@ class WP_Object_Cache {
 			return true;
 		}
 
-		// Append to Memcached value
+		// Append to Memcached value.
 		if ( $by_key ) {
 			$result = $this->m->prependByKey( $server_key, $derived_key, $value );
 		} else {
 			$result = $this->m->prepend( $derived_key, $value );
 		}
 
-		// Store in runtime cache if add was successful
+		// Store in runtime cache if add was successful.
 		if ( Memcached::RES_SUCCESS === $this->getResultCode() ) {
 			$combined = $this->combine_values( $this->cache[ $derived_key ], $value, 'pre' );
 			$this->add_to_internal_cache( $derived_key, $combined );
@@ -1706,23 +1722,23 @@ class WP_Object_Cache {
 	}
 
 	/**
-	 * Append data to an existing item by server key.
+	 * Appends data to an existing item by server key.
 	 *
 	 * This method should throw an error if it is used with compressed data. This is an expected behavior.
-	 * Memcached casts the value to be prepended to the initial value to the type of the initial value. Be
-	 * careful as this leads to unexpected behavior at times. For instance, prepending (float) 45.23 to
-	 * (int) 23 will result in 45, because the value is first combined (45.2323) then cast to "integer"
+	 * Memcached casts the value to be prepended to the initial value to the type of the initial value.
+	 * Be careful as this leads to unexpected behavior at times. For instance, prepending (float) 45.23
+	 * to (int) 23 will result in 45, because the value is first combined (45.2323) then cast to "integer"
 	 * (the original value), which will be (int) 45. Due to how memcached treats types, the behavior has been
-	 * mimicked in the internal cache to produce similar results and improve consistency. It is recommend
+	 * mimicked in the internal cache to produce similar results and improve consistency. It is recommended
 	 * that prepends only occur with data of the same type.
 	 *
-	 * @link    http://www.php.net/manual/en/memcached.prependbykey.php
+	 * @link https://www.php.net/manual/en/memcached.prependbykey.php
 	 *
-	 * @param   string    $server_key   The key identifying the server to store the value on.
-	 * @param   string    $key          The key under which to store the value.
-	 * @param   string    $value        Must be string as prepending mixed values is not well-defined.
-	 * @param   string    $group        The group value prepended to the $key.
-	 * @return  bool                    Returns TRUE on success or FALSE on failure.
+	 * @param string $server_key The key identifying the server to store the value on.
+	 * @param string $key        The key under which to store the value.
+	 * @param string $value      Must be string as prepending mixed values is not well-defined.
+	 * @param string $group      The group value prepended to the $key.
+	 * @return bool True on success, false on failure.
 	 */
 	public function prependByKey( $server_key, $key, $value, $group = 'default' ) {
 		return $this->prepend( $key, $value, $group, $server_key, true );
@@ -1731,27 +1747,27 @@ class WP_Object_Cache {
 	/**
 	 * Replaces a value in cache.
 	 *
-	 * This method is similar to "add"; however, is does not successfully set a value if
-	 * the object's key is not already set in cache.
+	 * This method is similar to "add"; however, is does not successfully set a value
+	 * if the object's key is not already set in cache.
 	 *
-	 * @link    http://www.php.net/manual/en/memcached.replace.php
+	 * @link https://www.php.net/manual/en/memcached.replace.php
 	 *
-	 * @param   string      $server_key     The key identifying the server to store the value on.
-	 * @param   string      $key            The key under which to store the value.
-	 * @param   mixed       $value          The value to store.
-	 * @param   string      $group          The group value appended to the $key.
-	 * @param   bool        $by_key         True to store in internal cache by key; false to not store by key
-	 * @param   int         $expiration     The expiration time, defaults to 0.
-	 * @return  bool                        Returns TRUE on success or FALSE on failure.
+	 * @param string $server_key The key identifying the server to store the value on.
+	 * @param string $key        The key under which to store the value.
+	 * @param mixed  $value      The value to store.
+	 * @param string $group      The group value appended to the $key.
+	 * @param bool   $by_key     True to store in internal cache by key; false to not store by key.
+	 * @param int    $expiration The expiration time, defaults to 0.
+	 * @return bool True on success, false on failure.
 	 */
 	public function replace( $key, $value, $group = 'default', $expiration = 0, $server_key = '', $by_key = false ) {
 		$derived_key = $this->buildKey( $key, $group );
 		$expiration  = $this->sanitize_expiration( $expiration );
 
-		// If group is a non-Memcached group, save to runtime cache, not Memcached
+		// If group is a non-Memcached group, save to runtime cache, not Memcached.
 		if ( in_array( $group, $this->no_mc_groups, true ) ) {
 
-			// Replace won't save unless the key already exists; mimic this behavior here
+			// Replace won't save unless the key already exists; mimic this behavior here.
 			if ( ! isset( $this->cache[ $derived_key ] ) ) {
 				return false;
 			}
@@ -1760,14 +1776,14 @@ class WP_Object_Cache {
 			return true;
 		}
 
-		// Save to Memcached
+		// Save to Memcached.
 		if ( $by_key ) {
 			$result = $this->m->replaceByKey( $server_key, $derived_key, $value, $expiration );
 		} else {
 			$result = $this->m->replace( $derived_key, $value, $expiration );
 		}
 
-		// Store in runtime cache if add was successful
+		// Store in runtime cache if add was successful.
 		if ( Memcached::RES_SUCCESS === $this->getResultCode() ) {
 			$this->add_to_internal_cache( $derived_key, $value );
 		}
@@ -1778,17 +1794,17 @@ class WP_Object_Cache {
 	/**
 	 * Replaces a value in cache on a specific server.
 	 *
-	 * This method is similar to "addByKey"; however, is does not successfully set a value if
-	 * the object's key is not already set in cache.
+	 * This method is similar to "addByKey"; however, is does not successfully set a value
+	 * if the object's key is not already set in cache.
 	 *
-	 * @link    http://www.php.net/manual/en/memcached.addbykey.php
+	 * @link https://www.php.net/manual/en/memcached.addbykey.php
 	 *
-	 * @param   string      $server_key     The key identifying the server to store the value on.
-	 * @param   string      $key            The key under which to store the value.
-	 * @param   mixed       $value          The value to store.
-	 * @param   string      $group          The group value appended to the $key.
-	 * @param   int         $expiration     The expiration time, defaults to 0.
-	 * @return  bool                        Returns TRUE on success or FALSE on failure.
+	 * @param string $server_key The key identifying the server to store the value on.
+	 * @param string $key        The key under which to store the value.
+	 * @param mixed  $value      The value to store.
+	 * @param string $group      The group value appended to the $key.
+	 * @param int    $expiration The expiration time, defaults to 0.
+	 * @return bool True on success, false on failure.
 	 */
 	public function replaceByKey( $server_key, $key, $value, $group = 'default', $expiration = 0 ) {
 		return $this->replace( $key, $value, $group, $expiration, $server_key, true );
@@ -1799,34 +1815,34 @@ class WP_Object_Cache {
 	 *
 	 * The value is set whether or not this key already exists in memcached.
 	 *
-	 * @link http://www.php.net/manual/en/memcached.set.php
+	 * @link https://www.php.net/manual/en/memcached.set.php
 	 *
-	 * @param   string      $key        The key under which to store the value.
-	 * @param   mixed       $value      The value to store.
-	 * @param   string      $group      The group value appended to the $key.
-	 * @param   int         $expiration The expiration time, defaults to 0.
-	 * @param   string      $server_key The key identifying the server to store the value on.
-	 * @param   bool        $by_key     True to store in internal cache by key; false to not store by key
-	 * @return  bool                    Returns TRUE on success or FALSE on failure.
+	 * @param string $key        The key under which to store the value.
+	 * @param mixed  $value      The value to store.
+	 * @param string $group      The group value appended to the $key.
+	 * @param int    $expiration The expiration time, defaults to 0.
+	 * @param string $server_key The key identifying the server to store the value on.
+	 * @param bool   $by_key     True to store in internal cache by key; false to not store by key.
+	 * @return bool True on success, false on failure.
 	 */
 	public function set( $key, $value, $group = 'default', $expiration = 0, $server_key = '', $by_key = false ) {
 		$derived_key = $this->buildKey( $key, $group );
 		$expiration  = $this->sanitize_expiration( $expiration );
 
-		// If group is a non-Memcached group, save to runtime cache, not Memcached
+		// If group is a non-Memcached group, save to runtime cache, not Memcached.
 		if ( in_array( $group, $this->no_mc_groups, true ) ) {
 			$this->add_to_internal_cache( $derived_key, $value );
 			return true;
 		}
 
-		// Save to Memcached
+		// Save to Memcached.
 		if ( $by_key ) {
 			$result = $this->m->setByKey( $server_key, $derived_key, $value, $expiration );
 		} else {
 			$result = $this->m->set( $derived_key, $value, $expiration );
 		}
 
-		// Store in runtime cache if add was successful
+		// Store in runtime cache if add was successful.
 		if ( Memcached::RES_SUCCESS === $this->getResultCode() ) {
 			$this->add_to_internal_cache( $derived_key, $value );
 		}
@@ -1839,21 +1855,21 @@ class WP_Object_Cache {
 	 *
 	 * The value is set whether or not this key already exists in memcached.
 	 *
-	 * @link    http://www.php.net/manual/en/memcached.setbykey.php
+	 * @link https://www.php.net/manual/en/memcached.setbykey.php
 	 *
-	 * @param   string      $server_key     The key identifying the server to store the value on.
-	 * @param   string      $key            The key under which to store the value.
-	 * @param   mixed       $value          The value to store.
-	 * @param   string      $group          The group value appended to the $key.
-	 * @param   int         $expiration     The expiration time, defaults to 0.
-	 * @return  bool                        Returns TRUE on success or FALSE on failure.
+	 * @param string $server_key The key identifying the server to store the value on.
+	 * @param string $key        The key under which to store the value.
+	 * @param mixed  $value      The value to store.
+	 * @param string $group      The group value appended to the $key.
+	 * @param int    $expiration The expiration time, defaults to 0.
+	 * @return bool True on success, false on failure.
 	 */
 	public function setByKey( $server_key, $key, $value, $group = 'default', $expiration = 0 ) {
 		return $this->set( $key, $value, $group, $expiration, $server_key, true );
 	}
 
 	/**
-	 * Set multiple values to cache at once.
+	 * Sets multiple values to cache at once.
 	 *
 	 * By sending an array of $items to this function, all values are saved at once to
 	 * memcached, reducing the need for multiple requests to memcached. The $items array
@@ -1861,42 +1877,42 @@ class WP_Object_Cache {
 	 * are merged with the $groups array/string value via buildKeys to determine the
 	 * final key for the object.
 	 *
-	 * @link    http://www.php.net/manual/en/memcached.setmulti.php
+	 * @link https://www.php.net/manual/en/memcached.setmulti.php
 	 *
-	 * @param   array           $items          An array of key/value pairs to store on the server.
-	 * @param   string|array    $groups         Group(s) to merge with key(s) in $items.
-	 * @param   int             $expiration     The expiration time, defaults to 0.
-	 * @param   string          $server_key     The key identifying the server to store the value on.
-	 * @param   bool            $by_key         True to store in internal cache by key; false to not store by key
-	 * @return  bool                            Returns TRUE on success or FALSE on failure.
+	 * @param array        $items      An array of key/value pairs to store on the server.
+	 * @param string|array $groups     Group(s) to merge with key(s) in $items.
+	 * @param int          $expiration The expiration time, defaults to 0.
+	 * @param string       $server_key The key identifying the server to store the value on.
+	 * @param bool         $by_key     True to store in internal cache by key; false to not store by key.
+	 * @return bool True on success, false on failure.
 	 */
 	public function setMulti( $items, $groups = 'default', $expiration = 0, $server_key = '', $by_key = false ) {
-		// Build final keys and replace $items keys with the new keys
+		// Build final keys and replace $items keys with the new keys.
 		$derived_keys  = $this->buildKeys( array_keys( $items ), $groups );
 		$expiration    = $this->sanitize_expiration( $expiration );
 		$derived_items = array_combine( $derived_keys, $items );
 
-		// Do not add to memcached if in no_mc_groups
+		// Do not add to memcached if in no_mc_groups.
 		foreach ( $derived_items as $derived_key => $value ) {
 
-			// Get the individual item's group
+			// Get the individual item's group.
 			$key_pieces = explode( ':', $derived_key );
 
-			// If group is a non-Memcached group, save to runtime cache, not Memcached
+			// If group is a non-Memcached group, save to runtime cache, not Memcached.
 			if ( in_array( $key_pieces[1], $this->no_mc_groups, true ) ) {
 				$this->add_to_internal_cache( $derived_key, $value );
 				unset( $derived_items[ $derived_key ] );
 			}
 		}
 
-		// Save to memcached
+		// Save to memcached.
 		if ( $by_key ) {
 			$result = $this->m->setMultiByKey( $server_key, $derived_items, $expiration );
 		} else {
 			$result = $this->m->setMulti( $derived_items, $expiration );
 		}
 
-		// Store in runtime cache if add was successful
+		// Store in runtime cache if add was successful.
 		if ( Memcached::RES_SUCCESS === $this->getResultCode() ) {
 			$this->cache = array_merge( $this->cache, $derived_items );
 		}
@@ -1905,7 +1921,7 @@ class WP_Object_Cache {
 	}
 
 	/**
-	 * Set multiple values to cache at once on specified server.
+	 * Sets multiple values to cache at once on specified server.
 	 *
 	 * By sending an array of $items to this function, all values are saved at once to
 	 * memcached, reducing the need for multiple requests to memcached. The $items array
@@ -1913,26 +1929,26 @@ class WP_Object_Cache {
 	 * are merged with the $groups array/string value via buildKeys to determine the
 	 * final key for the object.
 	 *
-	 * @link    http://www.php.net/manual/en/memcached.setmultibykey.php
+	 * @link https://www.php.net/manual/en/memcached.setmultibykey.php
 	 *
-	 * @param   string          $server_key     The key identifying the server to store the value on.
-	 * @param   array           $items          An array of key/value pairs to store on the server.
-	 * @param   string|array    $groups         Group(s) to merge with key(s) in $items.
-	 * @param   int             $expiration     The expiration time, defaults to 0.
-	 * @return  bool                            Returns TRUE on success or FALSE on failure.
+	 * @param string       $server_key  The key identifying the server to store the value on.
+	 * @param array        $items       An array of key/value pairs to store on the server.
+	 * @param string|array $groups      Group(s) to merge with key(s) in $items.
+	 * @param int          $expiration  The expiration time, defaults to 0.
+	 * @return bool True on success, false on failure.
 	 */
 	public function setMultiByKey( $server_key, $items, $groups = 'default', $expiration = 0 ) {
 		return $this->setMulti( $items, $groups, $expiration, $server_key, true );
 	}
 
 	/**
-	 * Set a Memcached option.
+	 * Sets a Memcached option.
 	 *
-	 * @link    http://www.php.net/manual/en/memcached.setoption.php
+	 * @link https://www.php.net/manual/en/memcached.setoption.php
 	 *
-	 * @param   int         $option     Option name.
-	 * @param   mixed       $value      Option value.
-	 * @return  bool                Returns TRUE on success or FALSE on failure.
+	 * @param int   $option Option name.
+	 * @param mixed $value  Option value.
+	 * @return bool True on success, false on failure.
 	 */
 	public function setOption( $option, $value ) {
 		return $this->m->setOption( $option, $value );
@@ -1941,12 +1957,14 @@ class WP_Object_Cache {
 	/**
 	 * Builds a key for the cached object using the blog_id, key, and group values.
 	 *
-	 * @author  Ryan Boren   This function is inspired by the original WP Memcached Object cache.
-	 * @link    http://wordpress.org/extend/plugins/memcached/
+	 * This function is inspired by the original WP Memcached Object cache.
+	 *
+	 * @author Ryan Boren
+	 * @link http://wordpress.org/extend/plugins/memcached/
 	 *
-	 * @param   string      $key        The key under which to store the value.
-	 * @param   string      $group      The group value appended to the $key.
-	 * @return  string
+	 * @param string $key   The key under which to store the value.
+	 * @param string $group The group value appended to the $key.
+	 * @return string
 	 */
 	public function buildKey( $key, $group = 'default' ) {
 		if ( empty( $group ) ) {
@@ -1974,14 +1992,14 @@ class WP_Object_Cache {
 	 * than $keys, the method will return an empty array. This method is primarily a helper method for methods
 	 * that call memcached with an array of keys.
 	 *
-	 * @param   string|array    $keys       Key(s) to merge with group(s).
-	 * @param   string|array    $groups     Group(s) to merge with key(s).
-	 * @return  array                       Array that combines keys and groups into a single set of memcached keys.
+	 * @param string|array $keys   Key(s) to merge with group(s).
+	 * @param string|array $groups Group(s) to merge with key(s).
+	 * @return array Array that combines keys and groups into a single set of memcached keys.
 	 */
 	public function buildKeys( $keys, $groups = 'default' ) {
 		$derived_keys = array();
 
-		// If strings sent, convert to arrays for proper handling
+		// If strings sent, convert to arrays for proper handling.
 		if ( ! is_array( $groups ) ) {
 			$groups = (array) $groups;
 		}
@@ -1990,13 +2008,14 @@ class WP_Object_Cache {
 			$keys = (array) $keys;
 		}
 
-		// If we have equal numbers of keys and groups, merge $keys[n] and $group[n]
+		// If we have equal numbers of keys and groups, merge $keys[n] and $group[n].
 		if ( count( $keys ) === count( $groups ) ) {
 			for ( $i = 0; $i < count( $keys ); $i++ ) {
 				$derived_keys[] = $this->buildKey( $keys[ $i ], $groups[ $i ] );
 			}
 
-			// If more keys are received than groups, merge $keys[n] and $group[n] until no more group are left; remaining groups are 'default'
+			// If more keys are received than groups, merge $keys[n] and $group[n]
+			// until no more groups are left; remaining groups are 'default'.
 		} elseif ( count( $keys ) > count( $groups ) ) {
 			for ( $i = 0; $i < count( $keys ); $i++ ) {
 				if ( isset( $groups[ $i ] ) ) {
@@ -2013,14 +2032,14 @@ class WP_Object_Cache {
 	}
 
 	/**
-	 * Ensure that a proper expiration time is set.
+	 * Ensures that a proper expiration time is set.
 	 *
-	 * Memcached treats any value over 30 days as a timestamp. If a developer sets the expiration for greater than 30
-	 * days or less than the current timestamp, the timestamp is in the past and the value isn't cached. This function
-	 * detects values in that range and corrects them.
+	 * Memcached treats any value over 30 days as a timestamp. If a developer sets the expiration
+	 * for greater than 30 days or less than the current timestamp, the timestamp is in the past
+	 * and the value isn't cached. This function detects values in that range and corrects them.
 	 *
-	 * @param  string|int    $expiration    The dirty expiration time.
-	 * @return string|int                   The sanitized expiration time.
+	 * @param string|int $expiration The dirty expiration time.
+	 * @return string|int The sanitized expiration time.
 	 */
 	public function sanitize_expiration( $expiration ) {
 		if ( $expiration > $this->thirty_days && $expiration <= $this->now ) {
@@ -2037,22 +2056,22 @@ class WP_Object_Cache {
 	 * by memcached. In both cases, whichever value is the original value in the combined value
 	 * will dictate the type of the combined value.
 	 *
-	 * @param   mixed       $original   Original value that dictates the combined type.
-	 * @param   mixed       $pended     Value to combine with original value.
-	 * @param   string      $direction  Either 'pre' or 'app'.
-	 * @return  mixed                   Combined value casted to the type of the first value.
+	 * @param mixed  $original  Original value that dictates the combined type.
+	 * @param mixed  $pended    Value to combine with original value.
+	 * @param string $direction Either 'pre' or 'app'.
+	 * @return mixed Combined value casted to the type of the first value.
 	 */
 	public function combine_values( $original, $pended, $direction ) {
 		$type = gettype( $original );
 
-		// Combine the values based on direction of the "pend"
+		// Combine the values based on direction of the "pend".
 		if ( 'pre' === $direction ) {
 			$combined = $pended . $original;
 		} else {
 			$combined = $original . $pended;
 		}
 
-		// Cast type of combined value
+		// Cast type of combined value.
 		settype( $combined, $type );
 
 		return $combined;
@@ -2061,8 +2080,8 @@ class WP_Object_Cache {
 	/**
 	 * Simple wrapper for saving object to the internal cache.
 	 *
-	 * @param   string      $derived_key    Key to save value under.
-	 * @param   mixed       $value          Object value.
+	 * @param string $derived_key Key to save value under.
+	 * @param mixed  $value       Object value.
 	 */
 	public function add_to_internal_cache( $derived_key, $value ) {
 		if ( is_object( $value ) ) {
@@ -2075,8 +2094,8 @@ class WP_Object_Cache {
 	/**
 	 * Determines if a no_mc_group exists in a group of groups.
 	 *
-	 * @param   mixed   $groups     The groups to search.
-	 * @return  bool                True if a no_mc_group is present; false if a no_mc_group is not present.
+	 * @param mixed $groups The groups to search.
+	 * @return bool True if a no_mc_group is present; false if a no_mc_group is not present.
 	 */
 	public function contains_no_mc_group( $groups ) {
 		if ( is_scalar( $groups ) ) {
@@ -2097,13 +2116,15 @@ class WP_Object_Cache {
 	}
 
 	/**
-	 * Add global groups.
+	 * Adds global groups.
 	 *
-	 * @author  Ryan Boren   This function comes straight from the original WP Memcached Object cache
-	 * @link    http://wordpress.org/extend/plugins/memcached/
+	 * This function comes straight from the original WP Memcached Object cache.
 	 *
-	 * @param   array       $groups     Array of groups.
-	 * @return  void
+	 * @author Ryan Boren
+	 * @link http://wordpress.org/extend/plugins/memcached/
+	 *
+	 * @param array $groups Array of groups.
+	 * @return void
 	 */
 	public function add_global_groups( $groups ) {
 		if ( ! is_array( $groups ) ) {
@@ -2115,13 +2136,15 @@ class WP_Object_Cache {
 	}
 
 	/**
-	 * Add non-persistent groups.
+	 * Adds non-persistent groups.
 	 *
-	 * @author  Ryan Boren   This function comes straight from the original WP Memcached Object cache
-	 * @link    http://wordpress.org/extend/plugins/memcached/
+	 * This function comes straight from the original WP Memcached Object cache.
 	 *
-	 * @param   array       $groups     Array of groups.
-	 * @return  void
+	 * @author Ryan Boren
+	 * @link http://wordpress.org/extend/plugins/memcached/
+	 *
+	 * @param array $groups Array of groups.
+	 * @return void
 	 */
 	public function add_non_persistent_groups( $groups ) {
 		if ( ! is_array( $groups ) ) {
@@ -2133,11 +2156,11 @@ class WP_Object_Cache {
 	}
 
 	/**
-	 * Get a value specifically from the internal, run-time cache, not memcached.
+	 * Gets a value specifically from the internal, run-time cache, not memcached.
 	 *
-	 * @param   int|string  $key        Key value.
-	 * @param   int|string  $group      Group that the value belongs to.
-	 * @return  bool|mixed              Value on success; false on failure.
+	 * @param int|string $key   Key value.
+	 * @param int|string $group Group that the value belongs to.
+	 * @return bool|mixed Value on success, false on failure.
 	 */
 	public function get_from_runtime_cache( $key, $group ) {
 		$derived_key = $this->buildKey( $key, $group );
@@ -2150,9 +2173,9 @@ class WP_Object_Cache {
 	}
 
 	/**
-	 * Switch blog prefix, which changes the cache that is accessed.
+	 * Switches blog prefix, which changes the cache that is accessed.
 	 *
-	 * @param  int     $blog_id    Blog to switch to.
+	 * @param int $blog_id Blog to switch to.
 	 * @return void
 	 */
 	public function switch_to_blog( $blog_id ) {
diff --git a/includes/phpunit6/compat.php b/includes/phpunit6/compat.php
index dcc99e9a76..61aa6048e9 100644
--- a/includes/phpunit6/compat.php
+++ b/includes/phpunit6/compat.php
@@ -11,6 +11,7 @@ if ( class_exists( 'PHPUnit\Runner\Version' ) && version_compare( PHPUnit\Runner
 	class_alias( 'PHPUnit\Framework\Test', 'PHPUnit_Framework_Test' );
 	class_alias( 'PHPUnit\Framework\Warning', 'PHPUnit_Framework_Warning' );
 	class_alias( 'PHPUnit\Framework\AssertionFailedError', 'PHPUnit_Framework_AssertionFailedError' );
+	class_alias( 'PHPUnit\Framework\Constraint\IsEqual', 'PHPUnit_Framework_Constraint_IsEqual' );
 	class_alias( 'PHPUnit\Framework\TestSuite', 'PHPUnit_Framework_TestSuite' );
 	class_alias( 'PHPUnit\Framework\TestListener', 'PHPUnit_Framework_TestListener' );
 	class_alias( 'PHPUnit\Util\GlobalState', 'PHPUnit_Util_GlobalState' );
diff --git a/includes/phpunit7/speed-trap-listener.php b/includes/phpunit7/speed-trap-listener.php
index c27fbc21cd..a0d95ea20c 100644
--- a/includes/phpunit7/speed-trap-listener.php
+++ b/includes/phpunit7/speed-trap-listener.php
@@ -52,7 +52,7 @@ class SpeedTrapListener implements PHPUnit_Framework_TestListener {
 	 *
 	 * @param PHPUnit_Framework_Test $test
 	 * @param Exception              $e
-	 * @param float                   $time
+	 * @param float                  $time
 	 */
 	public function addError( PHPUnit\Framework\Test $test, Throwable $t, float $time ): void {
 	}
@@ -73,7 +73,7 @@ class SpeedTrapListener implements PHPUnit_Framework_TestListener {
 	 *
 	 * @param PHPUnit_Framework_Test                 $test
 	 * @param PHPUnit_Framework_AssertionFailedError $e
-	 * @param float                                   $time
+	 * @param float                                  $time
 	 */
 	public function addFailure( PHPUnit\Framework\Test $test, PHPUnit\Framework\AssertionFailedError $e, float $time ): void {
 	}
@@ -83,7 +83,7 @@ class SpeedTrapListener implements PHPUnit_Framework_TestListener {
 	 *
 	 * @param PHPUnit_Framework_Test $test
 	 * @param Exception              $e
-	 * @param float                   $time
+	 * @param float                  $time
 	 */
 	public function addIncompleteTest( PHPUnit\Framework\Test $test, Throwable $t, float $time ): void {
 	}
@@ -93,7 +93,7 @@ class SpeedTrapListener implements PHPUnit_Framework_TestListener {
 	 *
 	 * @param PHPUnit_Framework_Test $test
 	 * @param Exception              $e
-	 * @param float                   $time
+	 * @param float                  $time
 	 * @since  Method available since Release 4.0.0
 	 */
 	public function addRiskyTest( PHPUnit\Framework\Test $test, Throwable $t, float $time ): void {
@@ -104,7 +104,7 @@ class SpeedTrapListener implements PHPUnit_Framework_TestListener {
 	 *
 	 * @param PHPUnit_Framework_Test $test
 	 * @param Exception              $e
-	 * @param float                   $time
+	 * @param float                  $time
 	 */
 	public function addSkippedTest( PHPUnit\Framework\Test $test, Throwable $t, float $time ): void {
 	}
@@ -121,7 +121,7 @@ class SpeedTrapListener implements PHPUnit_Framework_TestListener {
 	 * A test ended.
 	 *
 	 * @param PHPUnit_Framework_Test $test
-	 * @param float                   $time
+	 * @param float                  $time
 	 */
 	public function endTest( PHPUnit\Framework\Test $test, float $time ): void {
 		if ( ! $test instanceof PHPUnit_Framework_TestCase ) {
@@ -154,7 +154,7 @@ class SpeedTrapListener implements PHPUnit_Framework_TestListener {
 		$this->suites--;
 
 		if ( 0 === $this->suites && $this->hasSlowTests() ) {
-			arsort( $this->slow ); // Sort longest running tests to the top
+			arsort( $this->slow ); // Sort longest running tests to the top.
 
 			$this->renderHeader();
 			$this->renderBody();
@@ -165,7 +165,7 @@ class SpeedTrapListener implements PHPUnit_Framework_TestListener {
 	/**
 	 * Whether the given test execution time is considered slow.
 	 *
-	 * @param int $time          Test execution time in milliseconds
+	 * @param int $time           Test execution time in milliseconds
 	 * @param int $slow_threshold Test execution time at which a test should be considered slow (milliseconds)
 	 * @return bool
 	 */
@@ -177,7 +177,7 @@ class SpeedTrapListener implements PHPUnit_Framework_TestListener {
 	 * Stores a test as slow.
 	 *
 	 * @param PHPUnit_Framework_TestCase $test
-	 * @param int                         $time Test execution time in milliseconds
+	 * @param int                        $time Test execution time in milliseconds
 	 */
 	protected function addSlowTest( PHPUnit_Framework_TestCase $test, $time ) {
 		$label = $this->makeLabel( $test );
diff --git a/includes/phpunit7/testcase.php b/includes/phpunit7/testcase.php
index 9edc885e6a..9a8ddc12de 100644
--- a/includes/phpunit7/testcase.php
+++ b/includes/phpunit7/testcase.php
@@ -1,6 +1,6 @@
 <?php
 
-require_once dirname( dirname( __FILE__ ) ) . '/abstract-testcase.php';
+require_once dirname( __DIR__ ) . '/abstract-testcase.php';
 
 /**
  * Defines a basic fixture to run multiple tests.
@@ -14,19 +14,27 @@ require_once dirname( dirname( __FILE__ ) ) . '/abstract-testcase.php';
 class WP_UnitTestCase extends WP_UnitTestCase_Base {
 
 	/**
-	 * Asserts that a condition is not false.
+	 * Asserts that two variables are equal (with delta).
 	 *
-	 * This method has been backported from a more recent PHPUnit version, as tests running on PHP 5.2 use
-	 * PHPUnit 3.6.x.
+	 * This method has been backported from a more recent PHPUnit version,
+	 * as tests running on PHP 5.6 use PHPUnit 5.7.x.
 	 *
-	 * @since 4.7.4
+	 * @since 5.6.0
 	 *
-	 * @param bool   $condition Condition to check.
-	 * @param string $message   Optional. Message to display when the assertion fails.
+	 * @param mixed  $expected First value to compare.
+	 * @param mixed  $actual   Second value to compare.
+	 * @param float  $delta    Allowed numerical distance between two values to consider them equal.
+	 * @param string $message  Optional. Message to display when the assertion fails.
 	 *
-	 * @throws PHPUnit_Framework_AssertionFailedError
+	 * @throws ExpectationFailedException
+	 * @throws \SebastianBergmann\RecursionContext\InvalidArgumentException
 	 */
-	public static function assertNotFalse( $condition, string $message = '' ): void {
-		self::assertThat( $condition, self::logicalNot( self::isFalse() ), $message );
+	public static function assertEqualsWithDelta( $expected, $actual, float $delta, string $message = '' ): void {
+		$constraint = new PHPUnit\Framework\Constraint\IsEqual(
+			$expected,
+			$delta
+		);
+
+		static::assertThat( $actual, $constraint, $message );
 	}
 }
diff --git a/includes/plural-form-function.php b/includes/plural-form-function.php
index 576ece6b03..714381339d 100644
--- a/includes/plural-form-function.php
+++ b/includes/plural-form-function.php
@@ -7,11 +7,14 @@
  * @param string $expression
  */
 function tests_make_plural_form_function( $nplurals, $expression ) {
-	$expression = str_replace( 'n', '$n', $expression );
-	$func_body  = "
-		\$index = (int)($expression);
-		return (\$index < $nplurals)? \$index : $nplurals - 1;";
+	$closure = function ( $n ) use ( $nplurals, $expression ) {
+		$expression = str_replace( 'n', $n, $expression );
 
-	// phpcs:ignore WordPress.PHP.RestrictedPHPFunctions.create_function_create_function
-	return create_function( '$n', $func_body );
+		// phpcs:ignore Squiz.PHP.Eval -- This is test code, not production.
+		$index = (int) eval( 'return ' . $expression . ';' );
+
+		return ( $index < $nplurals ) ? $index : $nplurals - 1;
+	};
+
+	return $closure;
 }
diff --git a/includes/speed-trap-listener.php b/includes/speed-trap-listener.php
index 0de9d9ae86..08689ee02c 100644
--- a/includes/speed-trap-listener.php
+++ b/includes/speed-trap-listener.php
@@ -52,7 +52,7 @@ class SpeedTrapListener implements PHPUnit_Framework_TestListener {
 	 *
 	 * @param PHPUnit_Framework_Test $test
 	 * @param Exception              $e
-	 * @param float                   $time
+	 * @param float                  $time
 	 */
 	public function addError( PHPUnit_Framework_Test $test, Exception $e, $time ) {
 	}
@@ -73,7 +73,7 @@ class SpeedTrapListener implements PHPUnit_Framework_TestListener {
 	 *
 	 * @param PHPUnit_Framework_Test                 $test
 	 * @param PHPUnit_Framework_AssertionFailedError $e
-	 * @param float                                   $time
+	 * @param float                                  $time
 	 */
 	public function addFailure( PHPUnit_Framework_Test $test, PHPUnit_Framework_AssertionFailedError $e, $time ) {
 	}
@@ -83,7 +83,7 @@ class SpeedTrapListener implements PHPUnit_Framework_TestListener {
 	 *
 	 * @param PHPUnit_Framework_Test $test
 	 * @param Exception              $e
-	 * @param float                   $time
+	 * @param float                  $time
 	 */
 	public function addIncompleteTest( PHPUnit_Framework_Test $test, Exception $e, $time ) {
 	}
@@ -93,7 +93,7 @@ class SpeedTrapListener implements PHPUnit_Framework_TestListener {
 	 *
 	 * @param PHPUnit_Framework_Test $test
 	 * @param Exception              $e
-	 * @param float                   $time
+	 * @param float                  $time
 	 * @since  Method available since Release 4.0.0
 	 */
 	public function addRiskyTest( PHPUnit_Framework_Test $test, Exception $e, $time ) {
@@ -104,7 +104,7 @@ class SpeedTrapListener implements PHPUnit_Framework_TestListener {
 	 *
 	 * @param PHPUnit_Framework_Test $test
 	 * @param Exception              $e
-	 * @param float                   $time
+	 * @param float                  $time
 	 */
 	public function addSkippedTest( PHPUnit_Framework_Test $test, Exception $e, $time ) {
 	}
@@ -121,7 +121,7 @@ class SpeedTrapListener implements PHPUnit_Framework_TestListener {
 	 * A test ended.
 	 *
 	 * @param PHPUnit_Framework_Test $test
-	 * @param float                   $time
+	 * @param float                  $time
 	 */
 	public function endTest( PHPUnit_Framework_Test $test, $time ) {
 		if ( ! $test instanceof PHPUnit_Framework_TestCase ) {
@@ -154,7 +154,7 @@ class SpeedTrapListener implements PHPUnit_Framework_TestListener {
 		$this->suites--;
 
 		if ( 0 === $this->suites && $this->hasSlowTests() ) {
-			arsort( $this->slow ); // Sort longest running tests to the top
+			arsort( $this->slow ); // Sort longest running tests to the top.
 
 			$this->renderHeader();
 			$this->renderBody();
@@ -165,7 +165,7 @@ class SpeedTrapListener implements PHPUnit_Framework_TestListener {
 	/**
 	 * Whether the given test execution time is considered slow.
 	 *
-	 * @param int $time          Test execution time in milliseconds
+	 * @param int $time           Test execution time in milliseconds
 	 * @param int $slow_threshold Test execution time at which a test should be considered slow (milliseconds)
 	 * @return bool
 	 */
@@ -177,7 +177,7 @@ class SpeedTrapListener implements PHPUnit_Framework_TestListener {
 	 * Stores a test as slow.
 	 *
 	 * @param PHPUnit_Framework_TestCase $test
-	 * @param int                         $time Test execution time in milliseconds
+	 * @param int                        $time Test execution time in milliseconds
 	 */
 	protected function addSlowTest( PHPUnit_Framework_TestCase $test, $time ) {
 		$label = $this->makeLabel( $test );
diff --git a/includes/spy-rest-server.php b/includes/spy-rest-server.php
index 24c12c5fcb..596117347c 100644
--- a/includes/spy-rest-server.php
+++ b/includes/spy-rest-server.php
@@ -8,7 +8,7 @@ class Spy_REST_Server extends WP_REST_Server {
 	public $override_by_default = false;
 
 	/**
-	 * Get the raw $endpoints data from the server
+	 * Gets the raw $endpoints data from the server.
 	 *
 	 * @return array
 	 */
@@ -17,28 +17,39 @@ class Spy_REST_Server extends WP_REST_Server {
 	}
 
 	/**
-	 * Allow calling protected methods from tests
+	 * Allow calling protected methods from tests.
 	 *
-	 * @param string $method Method to call
-	 * @param array $args Arguments to pass to the method
+	 * @param string $method Method to call.
+	 * @param array  $args   Arguments to pass to the method.
 	 * @return mixed
 	 */
 	public function __call( $method, $args ) {
 		return call_user_func_array( array( $this, $method ), $args );
 	}
 
+	/**
+	 * Adds a header to the list of sent headers.
+	 *
+	 * @param string $header Header name.
+	 * @param string $value  Header value.
+	 */
 	public function send_header( $header, $value ) {
 		$this->sent_headers[ $header ] = $value;
 	}
 
+	/**
+	 * Removes a header from the list of sent headers.
+	 *
+	 * @param string $header Header name.
+	 */
 	public function remove_header( $header ) {
 		unset( $this->sent_headers[ $header ] );
 	}
 
 	/**
-	 * Override the dispatch method so we can get a handle on the request object.
+	 * Overrides the dispatch method so we can get a handle on the request object.
 	 *
-	 * @param  WP_REST_Request $request
+	 * @param  WP_REST_Request $request Request to attempt dispatching.
 	 * @return WP_REST_Response Response returned by the callback.
 	 */
 	public function dispatch( $request ) {
@@ -47,19 +58,26 @@ class Spy_REST_Server extends WP_REST_Server {
 	}
 
 	/**
-	 * Override the register_route method so we can re-register routes internally if needed.
+	 * Overrides the register_route method so we can re-register routes internally if needed.
 	 *
 	 * @param string $namespace  Namespace.
 	 * @param string $route      The REST route.
 	 * @param array  $route_args Route arguments.
 	 * @param bool   $override   Optional. Whether the route should be overridden if it already exists.
-	 *                           Default false. Also set $GLOBALS['wp_rest_server']->override_by_default = true
+	 *                           Default false. Also set `$GLOBALS['wp_rest_server']->override_by_default = true`
 	 *                           to set overrides when you don't have access to the caller context.
 	 */
 	public function register_route( $namespace, $route, $route_args, $override = false ) {
 		parent::register_route( $namespace, $route, $route_args, $override || $this->override_by_default );
 	}
 
+	/**
+	 * Serves the request and returns the result.
+	 *
+	 * @param string $path Optional. The request route. If not set, `$_SERVER['PATH_INFO']` will be used.
+	 *                     Default null.
+	 * @return null|false Null if not served and a HEAD request, false otherwise.
+	 */
 	public function serve_request( $path = null ) {
 
 		ob_start();
diff --git a/includes/testcase-ajax.php b/includes/testcase-ajax.php
index 736d362f76..5be85dc160 100644
--- a/includes/testcase-ajax.php
+++ b/includes/testcase-ajax.php
@@ -1,12 +1,4 @@
 <?php
-/**
- * Ajax test cases
- *
- * @package    WordPress
- * @subpackage UnitTests
- * @since      3.4.0
- */
-
 /**
  * Ajax test case class
  *
@@ -17,14 +9,14 @@
 abstract class WP_Ajax_UnitTestCase extends WP_UnitTestCase {
 
 	/**
-	 * Last AJAX response.  This is set via echo -or- wp_die.
+	 * Last Ajax response. This is set via echo -or- wp_die.
 	 *
 	 * @var string
 	 */
 	protected $_last_response = '';
 
 	/**
-	 * List of ajax actions called via GET
+	 * List of Ajax actions called via GET.
 	 *
 	 * @var array
 	 */
@@ -40,14 +32,14 @@ abstract class WP_Ajax_UnitTestCase extends WP_UnitTestCase {
 	);
 
 	/**
-	 * Saved error reporting level
+	 * Saved error reporting level.
 	 *
 	 * @var int
 	 */
 	protected $_error_level = 0;
 
 	/**
-	 * List of ajax actions called via POST
+	 * List of Ajax actions called via POST.
 	 *
 	 * @var array
 	 */
@@ -128,7 +120,7 @@ abstract class WP_Ajax_UnitTestCase extends WP_UnitTestCase {
 		remove_action( 'admin_init', '_maybe_update_plugins' );
 		remove_action( 'admin_init', '_maybe_update_themes' );
 
-		// Register the core actions
+		// Register the core actions.
 		foreach ( array_merge( self::$_core_actions_get, self::$_core_actions_post ) as $action ) {
 			if ( function_exists( 'wp_ajax_' . str_replace( '-', '_', $action ) ) ) {
 				add_action( 'wp_ajax_' . $action, 'wp_ajax_' . str_replace( '-', '_', $action ), 1 );
@@ -139,8 +131,9 @@ abstract class WP_Ajax_UnitTestCase extends WP_UnitTestCase {
 	}
 
 	/**
-	 * Set up the test fixture.
-	 * Override wp_die(), pretend to be ajax, and suppress E_WARNINGs
+	 * Sets up the test fixture.
+	 *
+	 * Overrides wp_die(), pretends to be Ajax, and suppresses E_WARNINGs.
 	 */
 	public function setUp() {
 		parent::setUp();
@@ -150,20 +143,21 @@ abstract class WP_Ajax_UnitTestCase extends WP_UnitTestCase {
 
 		set_current_screen( 'ajax' );
 
-		// Clear logout cookies
+		// Clear logout cookies.
 		add_action( 'clear_auth_cookie', array( $this, 'logout' ) );
 
-		// Suppress warnings from "Cannot modify header information - headers already sent by"
+		// Suppress warnings from "Cannot modify header information - headers already sent by".
 		$this->_error_level = error_reporting();
 		error_reporting( $this->_error_level & ~E_WARNING );
 
-		// Make some posts
+		// Make some posts.
 		self::factory()->post->create_many( 5 );
 	}
 
 	/**
-	 * Tear down the test fixture.
-	 * Reset $_POST, remove the wp_die() override, restore error reporting
+	 * Tears down the test fixture.
+	 *
+	 * Resets $_POST, removes the wp_die() override, restores error reporting.
 	 */
 	public function tearDown() {
 		parent::tearDown();
@@ -178,7 +172,7 @@ abstract class WP_Ajax_UnitTestCase extends WP_UnitTestCase {
 	}
 
 	/**
-	 * Clear login cookies, unset the current user
+	 * Clears login cookies, unsets the current user.
 	 */
 	public function logout() {
 		unset( $GLOBALS['current_user'] );
@@ -189,7 +183,7 @@ abstract class WP_Ajax_UnitTestCase extends WP_UnitTestCase {
 	}
 
 	/**
-	 * Return our callback handler
+	 * Returns our callback handler
 	 *
 	 * @return callback
 	 */
@@ -198,8 +192,10 @@ abstract class WP_Ajax_UnitTestCase extends WP_UnitTestCase {
 	}
 
 	/**
-	 * Handler for wp_die()
+	 * Handler for wp_die().
+	 *
 	 * Save the output for analysis, stop execution by throwing an exception.
+	 *
 	 * Error conditions (no output, just die) will throw <code>WPAjaxDieStopException( $message )</code>
 	 * You can test for this with:
 	 * <code>
@@ -211,7 +207,11 @@ abstract class WP_Ajax_UnitTestCase extends WP_UnitTestCase {
 	 * $this->setExpectedException( 'WPAjaxDieContinueException', 'something contained in $message' );
 	 * </code>
 	 *
-	 * @param string $message
+	 * @param string $message The message to set.
+	 *
+	 * @throws WPAjaxDieStopException     Thrown to stop further execution.
+	 * @throws WPAjaxDieContinueException Thrown to stop execution of the Ajax function,
+	 *                                    but continue the unit test.
 	 */
 	public function dieHandler( $message ) {
 		$this->_last_response .= ob_get_clean();
@@ -228,10 +228,11 @@ abstract class WP_Ajax_UnitTestCase extends WP_UnitTestCase {
 	}
 
 	/**
-	 * Switch between user roles
-	 * E.g. administrator, editor, author, contributor, subscriber
+	 * Switches between user roles.
+	 *
+	 * E.g. administrator, editor, author, contributor, subscriber.
 	 *
-	 * @param string $role
+	 * @param string $role The role to set.
 	 */
 	protected function _setRole( $role ) {
 		$post    = $_POST;
@@ -241,28 +242,29 @@ abstract class WP_Ajax_UnitTestCase extends WP_UnitTestCase {
 	}
 
 	/**
-	 * Mimic the ajax handling of admin-ajax.php
-	 * Capture the output via output buffering, and if there is any, store
-	 * it in $this->_last_response.
+	 * Mimics the Ajax handling of admin-ajax.php.
+	 *
+	 * Captures the output via output buffering, and if there is any,
+	 * stores it in $this->_last_response.
 	 *
-	 * @param string $action
+	 * @param string $action The action to handle.
 	 */
 	protected function _handleAjax( $action ) {
 
-		// Start output buffering
+		// Start output buffering.
 		ini_set( 'implicit_flush', false );
 		ob_start();
 
-		// Build the request
+		// Build the request.
 		$_POST['action'] = $action;
 		$_GET['action']  = $action;
 		$_REQUEST        = array_merge( $_POST, $_GET );
 
-		// Call the hooks
+		// Call the hooks.
 		do_action( 'admin_init' );
 		do_action( 'wp_ajax_' . $_REQUEST['action'], null );
 
-		// Save the output
+		// Save the output.
 		$buffer = ob_get_clean();
 		if ( ! empty( $buffer ) ) {
 			$this->_last_response = $buffer;
diff --git a/includes/testcase-canonical.php b/includes/testcase-canonical.php
index 9e0cb54c73..655c0b0612 100644
--- a/includes/testcase-canonical.php
+++ b/includes/testcase-canonical.php
@@ -61,40 +61,57 @@ class WP_Canonical_UnitTestCase extends WP_UnitTestCase {
 				'post_date'  => '2008-06-02 00:00:00',
 			)
 		);
-		$post_id          = $factory->post->create(
+
+		$gallery_post_id = $factory->post->create(
 			array(
 				'post_title' => 'post-format-test-gallery',
 				'post_date'  => '2008-06-10 00:00:00',
 			)
 		);
-		self::$post_ids[] = $post_id;
-		$factory->post->create(
+
+		self::$post_ids[] = $gallery_post_id;
+
+		self::$post_ids[] = $factory->post->create(
 			array(
 				'import_id'   => 611,
 				'post_type'   => 'attachment',
 				'post_title'  => 'canola2',
-				'post_parent' => $post_id,
+				'post_parent' => $gallery_post_id,
+			)
+		);
+
+		self::$post_ids[] = $factory->post->create(
+			array(
+				'post_title' => 'images-test',
+				'post_date'  => '2008-09-03 00:00:00',
 			)
 		);
-		self::$post_ids[] = $post_id;
 
 		self::$post_ids[] = $factory->post->create(
 			array(
-				'post_title'   => 'images-test',
+				'post_title'   => 'multipage-post-test',
 				'post_date'    => '2008-09-03 00:00:00',
 				'post_content' => 'Page 1 <!--nextpage--> Page 2 <!--nextpage--> Page 3',
 			)
 		);
 
-		$post_id           = $factory->post->create(
+		self::$post_ids[] = $factory->post->create(
+			array(
+				'post_title' => 'non-paged-post-test',
+				'post_date'  => '2008-09-03 00:00:00',
+			)
+		);
+
+		$comment_post_id = $factory->post->create(
 			array(
 				'import_id'  => 149,
 				'post_title' => 'comment-test',
 				'post_date'  => '2008-03-03 00:00:00',
 			)
 		);
-		self::$post_ids[]  = $post_id;
-		self::$comment_ids = $factory->comment->create_post_comments( $post_id, 15 );
+
+		self::$post_ids[]  = $comment_post_id;
+		self::$comment_ids = $factory->comment->create_post_comments( $comment_post_id, 15 );
 
 		self::$post_ids[] = $factory->post->create( array( 'post_date' => '2008-09-05 00:00:00' ) );
 
@@ -108,86 +125,103 @@ class WP_Canonical_UnitTestCase extends WP_UnitTestCase {
 				'post_title' => 'sample-page',
 			)
 		);
+
 		self::$post_ids[] = $factory->post->create(
 			array(
 				'post_type'  => 'page',
 				'post_title' => 'about',
 			)
 		);
-		$post_id          = $factory->post->create(
+
+		$parent_page_id = $factory->post->create(
 			array(
 				'post_type'  => 'page',
 				'post_title' => 'parent-page',
 			)
 		);
-		self::$post_ids[] = $post_id;
+
+		self::$post_ids[] = $parent_page_id;
+
 		self::$post_ids[] = $factory->post->create(
 			array(
 				'import_id'   => 144,
 				'post_type'   => 'page',
 				'post_title'  => 'child-page-1',
-				'post_parent' => $post_id,
+				'post_parent' => $parent_page_id,
 			)
 		);
 
-		$parent_id        = $factory->post->create(
+		$parent_page_id = $factory->post->create(
 			array(
 				'post_name' => 'parent',
 				'post_type' => 'page',
 			)
 		);
-		self::$post_ids[] = $parent_id;
-		$child_id_1       = $factory->post->create(
+
+		self::$post_ids[] = $parent_page_id;
+
+		$child_id_1 = $factory->post->create(
 			array(
 				'post_name'   => 'child1',
 				'post_type'   => 'page',
-				'post_parent' => $parent_id,
+				'post_parent' => $parent_page_id,
 			)
 		);
+
 		self::$post_ids[] = $child_id_1;
-		$child_id_2       = $factory->post->create(
+
+		$child_id_2 = $factory->post->create(
 			array(
 				'post_name'   => 'child2',
 				'post_type'   => 'page',
-				'post_parent' => $parent_id,
+				'post_parent' => $parent_page_id,
 			)
 		);
+
 		self::$post_ids[] = $child_id_2;
-		$grandchild_id_1  = $factory->post->create(
+
+		$grandchild_id_1 = $factory->post->create(
 			array(
 				'post_name'   => 'grandchild',
 				'post_type'   => 'page',
 				'post_parent' => $child_id_1,
 			)
 		);
+
 		self::$post_ids[] = $grandchild_id_1;
-		$grandchild_id_2  = $factory->post->create(
+
+		$grandchild_id_2 = $factory->post->create(
 			array(
 				'post_name'   => 'grandchild',
 				'post_type'   => 'page',
 				'post_parent' => $child_id_2,
 			)
 		);
+
 		self::$post_ids[] = $grandchild_id_2;
 
-		$cat1                             = $factory->term->create(
+		$cat1 = $factory->term->create(
 			array(
 				'taxonomy' => 'category',
 				'name'     => 'parent',
 			)
 		);
+
 		self::$terms['/category/parent/'] = $cat1;
-		self::$term_ids[ $cat1 ]          = 'category';
 
-		$cat2                                     = $factory->term->create(
+		self::$term_ids[ $cat1 ] = 'category';
+
+		$cat2 = $factory->term->create(
 			array(
 				'taxonomy' => 'category',
 				'name'     => 'child-1',
 				'parent'   => self::$terms['/category/parent/'],
 			)
 		);
+
 		self::$terms['/category/parent/child-1/'] = $cat2;
-		self::$term_ids[ $cat2 ]                  = 'category';
+
+		self::$term_ids[ $cat2 ] = 'category';
 
 		$cat3 = $factory->term->create(
 			array(
@@ -196,26 +230,35 @@ class WP_Canonical_UnitTestCase extends WP_UnitTestCase {
 				'parent'   => self::$terms['/category/parent/child-1/'],
 			)
 		);
+
 		self::$terms['/category/parent/child-1/child-2/'] = $cat3;
-		self::$term_ids[ $cat3 ]                          = 'category';
 
-		$cat4                    = $factory->term->create(
+		self::$term_ids[ $cat3 ] = 'category';
+
+		$cat4 = $factory->term->create(
 			array(
 				'taxonomy' => 'category',
 				'name'     => 'cat-a',
 			)
 		);
+
 		self::$term_ids[ $cat4 ] = 'category';
 
-		$cat5                    = $factory->term->create(
+		$cat5 = $factory->term->create(
 			array(
 				'taxonomy' => 'category',
 				'name'     => 'cat-b',
 			)
 		);
+
 		self::$term_ids[ $cat5 ] = 'category';
 
-		$tag1                    = $factory->term->create( array( 'name' => 'post-formats' ) );
+		$tag1 = $factory->term->create(
+			array(
+				'name' => 'post-formats',
+			)
+		);
+
 		self::$term_ids[ $tag1 ] = 'post_tag';
 	}
 
@@ -263,27 +306,28 @@ class WP_Canonical_UnitTestCase extends WP_UnitTestCase {
 		$can_url        = $this->get_canonical( $test_url );
 		$parsed_can_url = parse_url( $can_url );
 
-		// Just test the Path and Query if present
+		// Just test the path and query if present.
 		if ( isset( $expected['url'] ) ) {
 			$this->assertEquals( $expected['url'], $parsed_can_url['path'] . ( ! empty( $parsed_can_url['query'] ) ? '?' . $parsed_can_url['query'] : '' ), $ticket_ref );
 		}
 
-		// If the test data doesn't include expected query vars, then we're done here
+		// If the test data doesn't include expected query vars, then we're done here.
 		if ( ! isset( $expected['qv'] ) ) {
 			return;
 		}
 
-		// "make" that the request and check the query is correct
+		// "make" that the request and check the query is correct.
 		$this->go_to( $can_url );
 
-		// Are all query vars accounted for, And correct?
+		// Are all query vars accounted for, and correct?
 		global $wp;
 
 		$query_vars = array_diff( $wp->query_vars, $wp->extra_query_vars );
 		if ( ! empty( $parsed_can_url['query'] ) ) {
 			parse_str( $parsed_can_url['query'], $_qv );
 
-			// $_qv should not contain any elements which are set in $query_vars already (ie. $_GET vars should not be present in the Rewrite)
+			// $_qv should not contain any elements which are set in $query_vars already
+			// (i.e. $_GET vars should not be present in the Rewrite).
 			$this->assertEquals( array(), array_intersect( $query_vars, $_qv ), 'Query vars are duplicated from the Rewrite into $_GET; ' . $ticket_ref );
 
 			$query_vars = array_merge( $query_vars, $_qv );
@@ -305,7 +349,7 @@ class WP_Canonical_UnitTestCase extends WP_UnitTestCase {
 
 		$can_url = redirect_canonical( $test_url, false );
 		if ( ! $can_url ) {
-			return $test_url; // No redirect will take place for this request
+			return $test_url; // No redirect will take place for this request.
 		}
 
 		return $can_url;
diff --git a/includes/testcase-rest-post-type-controller.php b/includes/testcase-rest-post-type-controller.php
index b25aed0fd2..36368308ed 100644
--- a/includes/testcase-rest-post-type-controller.php
+++ b/includes/testcase-rest-post-type-controller.php
@@ -5,7 +5,7 @@ abstract class WP_Test_REST_Post_Type_Controller_Testcase extends WP_Test_REST_C
 	protected function check_post_data( $post, $data, $context, $links ) {
 		$post_type_obj = get_post_type_object( $post->post_type );
 
-		// Standard fields
+		// Standard fields.
 		$this->assertEquals( $post->ID, $data['id'] );
 		$this->assertEquals( $post->post_name, $data['slug'] );
 		$this->assertEquals( get_permalink( $post->ID ), $data['link'] );
@@ -25,14 +25,14 @@ abstract class WP_Test_REST_Post_Type_Controller_Testcase extends WP_Test_REST_C
 		}
 		$this->assertEquals( mysql_to_rfc3339( $post->post_modified ), $data['modified'] );
 
-		// author
+		// Author.
 		if ( post_type_supports( $post->post_type, 'author' ) ) {
 			$this->assertEquals( $post->post_author, $data['author'] );
 		} else {
 			$this->assertEmpty( $data['author'] );
 		}
 
-		// post_parent
+		// Post parent.
 		if ( $post_type_obj->hierarchical ) {
 			$this->assertArrayHasKey( 'parent', $data );
 			if ( $post->post_parent ) {
@@ -49,14 +49,14 @@ abstract class WP_Test_REST_Post_Type_Controller_Testcase extends WP_Test_REST_C
 			$this->assertFalse( isset( $data['parent'] ) );
 		}
 
-		// page attributes
+		// Page attributes.
 		if ( $post_type_obj->hierarchical && post_type_supports( $post->post_type, 'page-attributes' ) ) {
 			$this->assertEquals( $post->menu_order, $data['menu_order'] );
 		} else {
 			$this->assertFalse( isset( $data['menu_order'] ) );
 		}
 
-		// Comments
+		// Comments.
 		if ( post_type_supports( $post->post_type, 'comments' ) ) {
 			$this->assertEquals( $post->comment_status, $data['comment_status'] );
 			$this->assertEquals( $post->ping_status, $data['ping_status'] );
@@ -110,7 +110,7 @@ abstract class WP_Test_REST_Post_Type_Controller_Testcase extends WP_Test_REST_C
 		}
 
 		if ( post_type_supports( $post->post_type, 'editor' ) ) {
-			// TODO: apply content filter for more accurate testing.
+			// TODO: Apply content filter for more accurate testing.
 			if ( ! $post->post_password ) {
 				$this->assertEquals( wpautop( $post->post_content ), $data['content']['rendered'] );
 			}
@@ -126,10 +126,10 @@ abstract class WP_Test_REST_Post_Type_Controller_Testcase extends WP_Test_REST_C
 
 		if ( post_type_supports( $post->post_type, 'excerpt' ) ) {
 			if ( empty( $post->post_password ) ) {
-				// TODO: apply excerpt filter for more accurate testing.
+				// TODO: Apply excerpt filter for more accurate testing.
 				$this->assertEquals( wpautop( $post->post_excerpt ), $data['excerpt']['rendered'] );
 			} else {
-				// TODO: better testing for excerpts for password protected posts.
+				// TODO: Better testing for excerpts for password protected posts.
 			}
 			if ( 'edit' === $context ) {
 				$this->assertEquals( $post->post_excerpt, $data['excerpt']['raw'] );
@@ -156,7 +156,7 @@ abstract class WP_Test_REST_Post_Type_Controller_Testcase extends WP_Test_REST_C
 			$this->assertEquals( $terms, $data[ $taxonomy->rest_base ] );
 		}
 
-		// test links
+		// Test links.
 		if ( $links ) {
 
 			$links     = test_rest_expand_compact_links( $links );
@@ -211,8 +211,8 @@ abstract class WP_Test_REST_Post_Type_Controller_Testcase extends WP_Test_REST_C
 		$all_data = $response->get_data();
 		foreach ( $all_data as $data ) {
 			$post = get_post( $data['id'] );
-			// as the links for the post are "response_links" format in the data array we have to pull them
-			// out and parse them.
+			// As the links for the post are "response_links" format in the data array,
+			// we have to pull them out and parse them.
 			$links = $data['_links'];
 			foreach ( $links as &$links_array ) {
 				foreach ( $links_array as &$link ) {
diff --git a/includes/testcase-xml.php b/includes/testcase-xml.php
new file mode 100644
index 0000000000..c7b78b2e06
--- /dev/null
+++ b/includes/testcase-xml.php
@@ -0,0 +1,92 @@
+<?php
+
+abstract class WP_Test_XML_TestCase extends WP_UnitTestCase {
+	/**
+	 * Load XML from a string.
+	 *
+	 * @param string $xml
+	 * @param int    $options Bitwise OR of the {@link https://www.php.net/manual/en/libxml.constants.php libxml option constants}.
+	 *                        Default is 0.
+	 * @return DOMDocument The DOMDocument object loaded from the XML.
+	 */
+	public function loadXML( $xml, $options = 0 ) {
+		// Suppress PHP warnings generated by DOMDocument::loadXML(), which would cause
+		// PHPUnit to incorrectly report an error instead of a just a failure.
+		$internal = libxml_use_internal_errors( true );
+		libxml_clear_errors();
+
+		$xml_dom = new DOMDocument();
+		$xml_dom->loadXML( $xml, $options );
+		$libxml_last_error = libxml_get_last_error();
+
+		$this->assertFalse(
+			isset( $libxml_last_error->message ),
+			isset( $libxml_last_error->message ) ? sprintf( 'Non-well-formed XML: %s.', $libxml_last_error->message ) : ''
+		);
+
+		// Restore default error handler.
+		libxml_use_internal_errors( $internal );
+		libxml_clear_errors();
+
+		return $xml_dom;
+	}
+
+	/**
+	 * Normalize an XML document to make comparing two documents easier.
+	 *
+	 * @param string $xml
+	 * @param int    $options Bitwise OR of the {@link https://www.php.net/manual/en/libxml.constants.php libxml option constants}.
+	 *                        Default is 0.
+	 * @return string The normalized form of `$xml`.
+	 */
+	public function normalizeXML( $xml, $options = 0 ) {
+		if ( ! class_exists( 'XSLTProcessor' ) ) {
+			$this->markTestSkipped( 'This test requires the XSL extension.' );
+		}
+
+		static $xslt_proc;
+
+		if ( ! $xslt_proc ) {
+			$xslt_proc = new XSLTProcessor();
+			$xslt_proc->importStyleSheet( simplexml_load_file( __DIR__ . '/normalize-xml.xsl' ) );
+		}
+
+		return $xslt_proc->transformToXML( $this->loadXML( $xml, $options ) );
+	}
+
+	/**
+	 * Reports an error identified by `$message` if the namespace normalized form of the XML document in `$actualXml`
+	 * is equal to the namespace normalized form of the XML document in `$expectedXml`.
+	 *
+	 * This is similar to {@link https://phpunit.de/manual/6.5/en/appendixes.assertions.html#appendixes.assertions.assertXmlStringEqualsXmlString assertXmlStringEqualsXmlString()}
+	 * except that differences in namespace prefixes are normalized away, such that given
+	 * `$actualXml = "<root xmlns='urn:wordpress.org'><child/></root>";` and
+	 * `$expectedXml = "<ns0:root xmlns:ns0='urn:wordpress.org'><ns0:child></ns0:root>";`
+	 * then `$this->assertXMLEquals( $expectedXml, $actualXml )` will succeed.
+	 *
+	 * @param string $expectedXml
+	 * @param string $actualXml
+	 * @param string $message   Optional. Message to display when the assertion fails.
+	 */
+	public function assertXMLEquals( $expectedXml, $actualXml, $message = '' ) { // phpcs:ignore WordPress.NamingConventions.ValidVariableName.VariableNotSnakeCase
+		$this->assertEquals( $this->normalizeXML( $expectedXml ), $this->normalizeXML( $actualXml ), $message ); //phpcs:ignore WordPress.NamingConventions.ValidVariableName.VariableNotSnakeCase
+	}
+
+	/**
+	 * Reports an error identified by `$message` if the namespace normalized form of the XML document in `$actualXml`
+	 * is not equal to the namespace normalized form of the XML document in `$expectedXml`.
+	 *
+	 * This is similar to {@link https://phpunit.de/manual/6.5/en/appendixes.assertions.html#appendixes.assertions.assertXmlStringEqualsXmlString assertXmlStringNotEqualsXmlString()}
+	 * except that differences in namespace prefixes are normalized away, such that given
+	 * `$actualXml = "<root xmlns='urn:wordpress.org'><child></root>";` and
+	 * `$expectedXml = "<ns0:root xmlns:ns0='urn:wordpress.org'><ns0:child/></ns0:root>";`
+	 * then `$this->assertXMLNotEquals( $expectedXml, $actualXml )` will fail.
+	 *
+	 * @param string $expectedXml
+	 * @param string $actualXml
+	 * @param string $message   Optional. Message to display when the assertion fails.
+	 */
+	public function assertXMLNotEquals( $expectedXml, $actualXml, $message = '' ) { //phpcs:ignore WordPress.NamingConventions.ValidVariableName.VariableNotSnakeCase
+		$this->assertNotEquals( $this->normalizeXML( $expectedXml ), $this->normalizeXML( $actualXml ), $message ); //phpcs:ignore WordPress.NamingConventions.ValidVariableName.VariableNotSnakeCase
+	}
+}
diff --git a/includes/testcase-xmlrpc.php b/includes/testcase-xmlrpc.php
index 5fe312bc13..f529dfa93a 100644
--- a/includes/testcase-xmlrpc.php
+++ b/includes/testcase-xmlrpc.php
@@ -1,7 +1,7 @@
 <?php
-include_once( ABSPATH . 'wp-admin/includes/admin.php' );
-include_once( ABSPATH . WPINC . '/class-IXR.php' );
-include_once( ABSPATH . WPINC . '/class-wp-xmlrpc-server.php' );
+require_once ABSPATH . 'wp-admin/includes/admin.php';
+require_once ABSPATH . WPINC . '/class-IXR.php';
+require_once ABSPATH . WPINC . '/class-wp-xmlrpc-server.php';
 
 class WP_XMLRPC_UnitTestCase extends WP_UnitTestCase {
 	protected $myxmlrpcserver;
diff --git a/includes/testcase.php b/includes/testcase.php
index 964af64ca3..6d90d6c0c5 100644
--- a/includes/testcase.php
+++ b/includes/testcase.php
@@ -1,6 +1,6 @@
 <?php
 
-require_once dirname( __FILE__ ) . '/abstract-testcase.php';
+require_once __DIR__ . '/abstract-testcase.php';
 
 /**
  * Defines a basic fixture to run multiple tests.
@@ -14,19 +14,27 @@ require_once dirname( __FILE__ ) . '/abstract-testcase.php';
 class WP_UnitTestCase extends WP_UnitTestCase_Base {
 
 	/**
-	 * Asserts that a condition is not false.
+	 * Asserts that two variables are equal (with delta).
 	 *
-	 * This method has been backported from a more recent PHPUnit version, as tests running on PHP 5.2 use
-	 * PHPUnit 3.6.x.
+	 * This method has been backported from a more recent PHPUnit version,
+	 * as tests running on PHP 5.6 use PHPUnit 5.7.x.
 	 *
-	 * @since 4.7.4
+	 * @since 5.6.0
 	 *
-	 * @param bool   $condition Condition to check.
-	 * @param string $message   Optional. Message to display when the assertion fails.
+	 * @param mixed  $expected First value to compare.
+	 * @param mixed  $actual   Second value to compare.
+	 * @param float  $delta    Allowed numerical distance between two values to consider them equal.
+	 * @param string $message  Optional. Message to display when the assertion fails.
 	 *
-	 * @throws PHPUnit_Framework_AssertionFailedError
+	 * @throws ExpectationFailedException
+	 * @throws \SebastianBergmann\RecursionContext\InvalidArgumentException
 	 */
-	public static function assertNotFalse( $condition, $message = '' ) {
-		self::assertThat( $condition, self::logicalNot( self::isFalse() ), $message );
+	public static function assertEqualsWithDelta( $expected, $actual, $delta, $message = '' ) {
+		$constraint = new PHPUnit_Framework_Constraint_IsEqual(
+			$expected,
+			$delta
+		);
+
+		static::assertThat( $actual, $constraint, $message );
 	}
 }
diff --git a/includes/trac.php b/includes/trac.php
index dd3783e7be..84617fa661 100644
--- a/includes/trac.php
+++ b/includes/trac.php
@@ -33,7 +33,7 @@ class TracTickets {
 					return true; // Assume the ticket is closed, which means it gets run.
 				}
 			} else {
-				$tickets = substr( $tickets, 2 ); // remove 'id' column header
+				$tickets = substr( $tickets, 2 ); // Remove 'id' column header.
 				$tickets = trim( $tickets );
 				file_put_contents( $file, $tickets );
 			}
@@ -47,14 +47,14 @@ class TracTickets {
 	// phpcs:ignore WordPress.NamingConventions.ValidFunctionName.MethodNameInvalid
 	public static function usingLocalCache() {
 		echo PHP_EOL . "\x1b[0m\x1b[30;43m\x1b[2K";
-		echo 'INFO: Trac was inaccessible, so a local ticket status cache was used.' . PHP_EOL;
+		echo 'Info: Trac was inaccessible, so a local ticket status cache was used.' . PHP_EOL;
 		echo "\x1b[0m\x1b[2K";
 	}
 
 	// phpcs:ignore WordPress.NamingConventions.ValidFunctionName.MethodNameInvalid
 	public static function forcingKnownBugs() {
 		echo PHP_EOL . "\x1b[0m\x1b[37;41m\x1b[2K";
-		echo "ERROR: Trac was inaccessible, so known bugs weren't able to be skipped." . PHP_EOL;
+		echo "Error: Trac was inaccessible, so known bugs weren't able to be skipped." . PHP_EOL;
 		echo "\x1b[0m\x1b[2K";
 	}
 }
diff --git a/includes/utils.php b/includes/utils.php
index 6d45117368..285c2d23c3 100644
--- a/includes/utils.php
+++ b/includes/utils.php
@@ -1,6 +1,6 @@
 <?php
 
-// misc help functions and utilities
+// Misc help functions and utilities.
 
 function rand_str( $len = 32 ) {
 	return substr( md5( uniqid( rand() ) ), 0, $len );
@@ -18,7 +18,7 @@ function rand_long_str( $length ) {
 	return $string;
 }
 
-// strip leading and trailing whitespace from each line in the string
+// Strip leading and trailing whitespace from each line in the string.
 function strip_ws( $txt ) {
 	$lines  = explode( "\n", $txt );
 	$result = array();
@@ -31,10 +31,12 @@ function strip_ws( $txt ) {
 	return trim( join( "\n", $result ) );
 }
 
-// helper class for testing code that involves actions and filters
-// typical use:
-// $ma = new MockAction();
-// add_action('foo', array(&$ma, 'action'));
+/*
+ * Helper class for testing code that involves actions and filters.
+ * Typical use:
+ * $ma = new MockAction();
+ * add_action( 'foo', array( &$ma, 'action' ) );
+ */
 class MockAction {
 	var $events;
 	var $debug;
@@ -129,7 +131,7 @@ class MockAction {
 	}
 
 	function filterall( $tag, ...$args ) {
-		// this one doesn't return the result, so it's safe to use with the new 'all' filter
+		// This one doesn't return the result, so it's safe to use with the new 'all' filter.
 		if ( $this->debug ) {
 			dmp( __FUNCTION__, $this->current_filter() );
 		}
@@ -141,12 +143,12 @@ class MockAction {
 		);
 	}
 
-	// return a list of all the actions, tags and args
+	// Return a list of all the actions, tags and args.
 	function get_events() {
 		return $this->events;
 	}
 
-	// return a count of the number of times the action was called since the last reset
+	// Return a count of the number of times the action was called since the last reset.
 	function get_call_count( $tag = '' ) {
 		if ( $tag ) {
 			$count = 0;
@@ -160,7 +162,7 @@ class MockAction {
 		return count( $this->events );
 	}
 
-	// return an array of the tags that triggered calls to this action
+	// Return an array of the tags that triggered calls to this action.
 	function get_tags() {
 		$out = array();
 		foreach ( $this->events as $e ) {
@@ -169,7 +171,7 @@ class MockAction {
 		return $out;
 	}
 
-	// return an array of args passed in calls to this action
+	// Return an array of args passed in calls to this action.
 	function get_args() {
 		$out = array();
 		foreach ( $this->events as $e ) {
@@ -179,8 +181,8 @@ class MockAction {
 	}
 }
 
-// convert valid xml to an array tree structure
-// kinda lame but it works with a default php 4 installation
+// Convert valid XML to an array tree structure.
+// Kinda lame, but it works with a default PHP 4 installation.
 class TestXMLParser {
 	var $xml;
 	var $data = array();
@@ -312,7 +314,7 @@ function get_echo( $callable, $args = array() ) {
 	return ob_get_clean();
 }
 
-// recursively generate some quick assertEquals tests based on an array
+// Recursively generate some quick assertEquals() tests based on an array.
 function gen_tests_array( $name, $array ) {
 	$out = array();
 	foreach ( $array as $k => $v ) {
@@ -367,7 +369,7 @@ function print_backtrace() {
 	echo "\n";
 }
 
-// mask out any input fields matching the given name
+// Mask out any input fields matching the given name.
 function mask_input_value( $in, $name = '_wpnonce' ) {
 	return preg_replace( '@<input([^>]*) name="' . preg_quote( $name ) . '"([^>]*) value="[^>]*" />@', '<input$1 name="' . preg_quote( $name ) . '"$2 value="***" />', $in );
 }
@@ -395,7 +397,7 @@ function _unregister_post_status( $status ) {
 }
 
 function _cleanup_query_vars() {
-	// clean out globals to stop them polluting wp and wp_query
+	// Clean out globals to stop them polluting wp and wp_query.
 	foreach ( $GLOBALS['wp']->public_query_vars as $v ) {
 		unset( $GLOBALS[ $v ] );
 	}
diff --git a/includes/wp-profiler.php b/includes/wp-profiler.php
index 60628d2917..2cc27a8e57 100644
--- a/includes/wp-profiler.php
+++ b/includes/wp-profiler.php
@@ -1,21 +1,20 @@
 <?php
 
 /*
-A simple manually-instrumented profiler for WordPress.
-
-This records basic execution time, and a summary of the actions and SQL queries run within each block.
-
-start() and stop() must be called in pairs, for example:
-
-function something_to_profile() {
-	wppf_start(__FUNCTION__);
-	do_stuff();
-	wppf_stop();
-}
-
-Multiple profile blocks are permitted, and they may be nested.
-
-*/
+ * A simple manually-instrumented profiler for WordPress.
+ *
+ * This records basic execution time, and a summary of the actions and SQL queries run within each block.
+ *
+ * start() and stop() must be called in pairs, for example:
+ *
+ * function something_to_profile() {
+ * 	wppf_start(__FUNCTION__);
+ * 	do_stuff();
+ * 	wppf_stop();
+ * }
+ *
+ * Multiple profile blocks are permitted, and they may be nested.
+ */
 
 class WPProfiler {
 	public $stack;
@@ -33,11 +32,11 @@ class WPProfiler {
 		$time = $this->microtime();
 
 		if ( ! $this->stack ) {
-			// log all actions and filters
+			// Log all actions and filters.
 			add_filter( 'all', array( $this, 'log_filter' ) );
 		}
 
-		// reset the wpdb queries log, storing it on the profile stack if necessary
+		// Reset the wpdb queries log, storing it on the profile stack if necessary.
 		global $wpdb;
 		if ( $this->stack ) {
 			$this->stack[ count( $this->stack ) - 1 ]['queries'] = $wpdb->queries;
@@ -151,7 +150,7 @@ class WPProfiler {
 	}
 
 	public function _query_count( $queries ) {
-		// this requires the savequeries patch at https://core.trac.wordpress.org/ticket/5218
+		// This requires the SAVEQUERIES patch at https://core.trac.wordpress.org/ticket/5218
 		$out = array();
 		foreach ( $queries as $q ) {
 			if ( empty( $q[2] ) ) {
diff --git a/multisite.xml b/multisite.xml
index 73934a7a90..840bd0188d 100644
--- a/multisite.xml
+++ b/multisite.xml
@@ -9,19 +9,19 @@
 		<const name="WP_RUN_CORE_TESTS" value="1" />
 	</php>
 	<testsuites>
-		<!-- Default test suite to run all tests -->
+		<!-- Default test suite to run all tests. -->
 		<testsuite name="default">
 			<directory suffix=".php">tests</directory>
-			<!-- Path relative to the checkout root, for PHPUnit 3.6.x -->
+			<!-- Path relative to the checkout root, for PHPUnit 3.6.x. -->
 			<exclude>tests/phpunit/tests/rest-api/rest-autosaves-controller.php</exclude>
-			<!-- Same path relative to the configuration file, for PHPUnit 4.0.0+ -->
+			<!-- Same path relative to the configuration file, for PHPUnit 4.0.0+. -->
 			<exclude>tests/rest-api/rest-autosaves-controller.php</exclude>
 		</testsuite>
-		<!-- Sets the DOING_AUTOSAVE constant, so needs to be run last -->
+		<!-- Sets the DOING_AUTOSAVE constant, so needs to be run last. -->
 		<testsuite name="restapi-autosave">
-			<!-- Path relative to the checkout root, for PHPUnit 3.6.x -->
+			<!-- Path relative to the checkout root, for PHPUnit 3.6.x. -->
 			<file>tests/phpunit/tests/rest-api/rest-autosaves-controller.php</file>
-			<!-- Same path relative to the configuration file, for PHPUnit 4.0.0+ -->
+			<!-- Same path relative to the configuration file, for PHPUnit 4.0.0+. -->
 			<file>tests/rest-api/rest-autosaves-controller.php</file>
 		</testsuite>
 	</testsuites>
diff --git a/tests/actions.php b/tests/actions.php
index e83b6bfc15..ee92d104e8 100644
--- a/tests/actions.php
+++ b/tests/actions.php
@@ -14,14 +14,14 @@ class Tests_Actions extends WP_UnitTestCase {
 		add_action( $tag, array( &$a, 'action' ) );
 		do_action( $tag );
 
-		// only one event occurred for the hook, with empty args
-		$this->assertEquals( 1, $a->get_call_count() );
-		// only our hook was called
-		$this->assertEquals( array( $tag ), $a->get_tags() );
+		// Only one event occurred for the hook, with empty args.
+		$this->assertSame( 1, $a->get_call_count() );
+		// Only our hook was called.
+		$this->assertSame( array( $tag ), $a->get_tags() );
 
 		$argsvar = $a->get_args();
 		$args    = array_pop( $argsvar );
-		$this->assertEquals( array( '' ), $args );
+		$this->assertSame( array( '' ), $args );
 	}
 
 	function test_remove_action() {
@@ -31,15 +31,15 @@ class Tests_Actions extends WP_UnitTestCase {
 		add_action( $tag, array( &$a, 'action' ) );
 		do_action( $tag );
 
-		// make sure our hook was called correctly
-		$this->assertEquals( 1, $a->get_call_count() );
-		$this->assertEquals( array( $tag ), $a->get_tags() );
+		// Make sure our hook was called correctly.
+		$this->assertSame( 1, $a->get_call_count() );
+		$this->assertSame( array( $tag ), $a->get_tags() );
 
-		// now remove the action, do it again, and make sure it's not called this time
+		// Now remove the action, do it again, and make sure it's not called this time.
 		remove_action( $tag, array( &$a, 'action' ) );
 		do_action( $tag );
-		$this->assertEquals( 1, $a->get_call_count() );
-		$this->assertEquals( array( $tag ), $a->get_tags() );
+		$this->assertSame( 1, $a->get_call_count() );
+		$this->assertSame( array( $tag ), $a->get_tags() );
 
 	}
 
@@ -50,28 +50,28 @@ class Tests_Actions extends WP_UnitTestCase {
 		$this->assertFalse( has_action( $tag, $func ) );
 		$this->assertFalse( has_action( $tag ) );
 		add_action( $tag, $func );
-		$this->assertEquals( 10, has_action( $tag, $func ) );
+		$this->assertSame( 10, has_action( $tag, $func ) );
 		$this->assertTrue( has_action( $tag ) );
 		remove_action( $tag, $func );
 		$this->assertFalse( has_action( $tag, $func ) );
 		$this->assertFalse( has_action( $tag ) );
 	}
 
-	// one tag with multiple actions
+	// One tag with multiple actions.
 	function test_multiple_actions() {
 		$a1  = new MockAction();
 		$a2  = new MockAction();
 		$tag = __FUNCTION__;
 
-		// add both actions to the hook
+		// Add both actions to the hook.
 		add_action( $tag, array( &$a1, 'action' ) );
 		add_action( $tag, array( &$a2, 'action' ) );
 
 		do_action( $tag );
 
-		// both actions called once each
-		$this->assertEquals( 1, $a1->get_call_count() );
-		$this->assertEquals( 1, $a2->get_call_count() );
+		// Both actions called once each.
+		$this->assertSame( 1, $a1->get_call_count() );
+		$this->assertSame( 1, $a2->get_call_count() );
 	}
 
 	function test_action_args_1() {
@@ -80,13 +80,13 @@ class Tests_Actions extends WP_UnitTestCase {
 		$val = __FUNCTION__ . '_val';
 
 		add_action( $tag, array( &$a, 'action' ) );
-		// call the action with a single argument
+		// Call the action with a single argument.
 		do_action( $tag, $val );
 
 		$call_count = $a->get_call_count();
-		$this->assertEquals( 1, $call_count );
+		$this->assertSame( 1, $call_count );
 		$argsvar = $a->get_args();
-		$this->assertEquals( array( $val ), array_pop( $argsvar ) );
+		$this->assertSame( array( $val ), array_pop( $argsvar ) );
 	}
 
 	function test_action_args_2() {
@@ -96,22 +96,22 @@ class Tests_Actions extends WP_UnitTestCase {
 		$val1 = __FUNCTION__ . '_val1';
 		$val2 = __FUNCTION__ . '_val2';
 
-		// a1 accepts two arguments, a2 doesn't
+		// $a1 accepts two arguments, $a2 doesn't.
 		add_action( $tag, array( &$a1, 'action' ), 10, 2 );
 		add_action( $tag, array( &$a2, 'action' ) );
-		// call the action with two arguments
+		// Call the action with two arguments.
 		do_action( $tag, $val1, $val2 );
 
 		$call_count = $a1->get_call_count();
-		// a1 should be called with both args
-		$this->assertEquals( 1, $call_count );
+		// $a1 should be called with both args.
+		$this->assertSame( 1, $call_count );
 		$argsvar1 = $a1->get_args();
-		$this->assertEquals( array( $val1, $val2 ), array_pop( $argsvar1 ) );
+		$this->assertSame( array( $val1, $val2 ), array_pop( $argsvar1 ) );
 
-		// a2 should be called with one only
-		$this->assertEquals( 1, $a2->get_call_count() );
+		// $a2 should be called with one only.
+		$this->assertSame( 1, $a2->get_call_count() );
 		$argsvar2 = $a2->get_args();
-		$this->assertEquals( array( $val1 ), array_pop( $argsvar2 ) );
+		$this->assertSame( array( $val1 ), array_pop( $argsvar2 ) );
 	}
 
 	/**
@@ -129,28 +129,28 @@ class Tests_Actions extends WP_UnitTestCase {
 		$val1 = __FUNCTION__ . '_val1';
 		$val2 = __FUNCTION__ . '_val2';
 
-		// a1 accepts two arguments, a2 doesn't, a3 accepts two arguments
+		// $a1 accepts two arguments, $a2 doesn't, $a3 accepts two arguments.
 		add_action( $tag, array( &$a1, 'action' ), 10, 2 );
 		add_action( $tag, array( &$a2, 'action' ) );
 		add_action( $tag, array( &$a3, 'action' ), 10, 2 );
-		// call the action with two arguments
+		// Call the action with two arguments.
 		do_action( $tag, $val1, $val2 );
 
 		$call_count = $a1->get_call_count();
-		// a1 should be called with both args
-		$this->assertEquals( 1, $call_count );
+		// $a1 should be called with both args.
+		$this->assertSame( 1, $call_count );
 		$argsvar1 = $a1->get_args();
-		$this->assertEquals( array( $val1, $val2 ), array_pop( $argsvar1 ) );
+		$this->assertSame( array( $val1, $val2 ), array_pop( $argsvar1 ) );
 
-		// a2 should be called with one only
-		$this->assertEquals( 1, $a2->get_call_count() );
+		// $a2 should be called with one only.
+		$this->assertSame( 1, $a2->get_call_count() );
 		$argsvar2 = $a2->get_args();
-		$this->assertEquals( array( $val1 ), array_pop( $argsvar2 ) );
+		$this->assertSame( array( $val1 ), array_pop( $argsvar2 ) );
 
-		// a3 should be called with both args
-		$this->assertEquals( 1, $a3->get_call_count() );
+		// $a3 should be called with both args.
+		$this->assertSame( 1, $a3->get_call_count() );
 		$argsvar3 = $a3->get_args();
-		$this->assertEquals( array( $val1, $val2 ), array_pop( $argsvar3 ) );
+		$this->assertSame( array( $val1, $val2 ), array_pop( $argsvar3 ) );
 	}
 
 	/**
@@ -161,10 +161,10 @@ class Tests_Actions extends WP_UnitTestCase {
 	function test_action_args_with_php4_syntax() {
 		$a   = new MockAction();
 		$tag = __FUNCTION__;
-		$val = new stdClass;
+		$val = new stdClass();
 
 		add_action( $tag, array( &$a, 'action' ) );
-		// —all the action with PHP 4 notation for passing object by reference.
+		// Call the action with PHP 4 notation for passing object by reference.
 		do_action( $tag, array( &$val ) );
 
 		$call_count = $a->get_call_count();
@@ -180,17 +180,17 @@ class Tests_Actions extends WP_UnitTestCase {
 		add_action( $tag, array( &$a, 'action2' ), 9 );
 		do_action( $tag );
 
-		// two events, one per action
-		$this->assertEquals( 2, $a->get_call_count() );
+		// Two events, one per action.
+		$this->assertSame( 2, $a->get_call_count() );
 
 		$expected = array(
-			// action2 is called first because it has priority 9
+			// 'action2' is called first because it has priority 9.
 			array(
 				'action' => 'action2',
 				'tag'    => $tag,
 				'args'   => array( '' ),
 			),
-			// action 1 is called second
+			// 'action' is called second.
 			array(
 				'action' => 'action',
 				'tag'    => $tag,
@@ -198,27 +198,27 @@ class Tests_Actions extends WP_UnitTestCase {
 			),
 		);
 
-		$this->assertEquals( $expected, $a->get_events() );
+		$this->assertSame( $expected, $a->get_events() );
 	}
 
 	function test_did_action() {
 		$tag1 = 'action1';
 		$tag2 = 'action2';
 
-		// do action tag1 but not tag2
+		// Do action $tag1 but not $tag2.
 		do_action( $tag1 );
-		$this->assertEquals( 1, did_action( $tag1 ) );
-		$this->assertEquals( 0, did_action( $tag2 ) );
+		$this->assertSame( 1, did_action( $tag1 ) );
+		$this->assertSame( 0, did_action( $tag2 ) );
 
-		// do action tag2 a random number of times
+		// Do action $tag2 a random number of times.
 		$count = rand( 0, 10 );
 		for ( $i = 0; $i < $count; $i++ ) {
 			do_action( $tag2 );
 		}
 
-		// tag1's count hasn't changed, tag2 should be correct
-		$this->assertEquals( 1, did_action( $tag1 ) );
-		$this->assertEquals( $count, did_action( $tag2 ) );
+		// $tag1's count hasn't changed, $tag2 should be correct.
+		$this->assertSame( 1, did_action( $tag1 ) );
+		$this->assertSame( $count, did_action( $tag2 ) );
 
 	}
 
@@ -227,19 +227,19 @@ class Tests_Actions extends WP_UnitTestCase {
 		$tag1 = __FUNCTION__ . '_1';
 		$tag2 = __FUNCTION__ . '_2';
 
-		// add an 'all' action
+		// Add an 'all' action.
 		add_action( 'all', array( &$a, 'action' ) );
-		$this->assertEquals( 10, has_filter( 'all', array( &$a, 'action' ) ) );
-		// do some actions
+		$this->assertSame( 10, has_filter( 'all', array( &$a, 'action' ) ) );
+		// Do some actions.
 		do_action( $tag1 );
 		do_action( $tag2 );
 		do_action( $tag1 );
 		do_action( $tag1 );
 
-		// our action should have been called once for each tag
-		$this->assertEquals( 4, $a->get_call_count() );
-		// only our hook was called
-		$this->assertEquals( array( $tag1, $tag2, $tag1, $tag1 ), $a->get_tags() );
+		// Our action should have been called once for each tag.
+		$this->assertSame( 4, $a->get_call_count() );
+		// Only our hook was called.
+		$this->assertSame( array( $tag1, $tag2, $tag1, $tag1 ), $a->get_tags() );
 
 		remove_action( 'all', array( &$a, 'action' ) );
 		$this->assertFalse( has_filter( 'all', array( &$a, 'action' ) ) );
@@ -251,19 +251,19 @@ class Tests_Actions extends WP_UnitTestCase {
 		$tag = __FUNCTION__;
 
 		add_action( 'all', array( &$a, 'action' ) );
-		$this->assertEquals( 10, has_filter( 'all', array( &$a, 'action' ) ) );
+		$this->assertSame( 10, has_filter( 'all', array( &$a, 'action' ) ) );
 		do_action( $tag );
 
-		// make sure our hook was called correctly
-		$this->assertEquals( 1, $a->get_call_count() );
-		$this->assertEquals( array( $tag ), $a->get_tags() );
+		// Make sure our hook was called correctly.
+		$this->assertSame( 1, $a->get_call_count() );
+		$this->assertSame( array( $tag ), $a->get_tags() );
 
-		// now remove the action, do it again, and make sure it's not called this time
+		// Now remove the action, do it again, and make sure it's not called this time.
 		remove_action( 'all', array( &$a, 'action' ) );
 		$this->assertFalse( has_filter( 'all', array( &$a, 'action' ) ) );
 		do_action( $tag );
-		$this->assertEquals( 1, $a->get_call_count() );
-		$this->assertEquals( array( $tag ), $a->get_tags() );
+		$this->assertSame( 1, $a->get_call_count() );
+		$this->assertSame( array( $tag ), $a->get_tags() );
 	}
 
 	function test_action_ref_array() {
@@ -277,7 +277,7 @@ class Tests_Actions extends WP_UnitTestCase {
 
 		$args = $a->get_args();
 		$this->assertSame( $args[0][0], $obj );
-		// just in case we don't trust assertSame
+		// Just in case we don't trust assertSame().
 		$obj->foo = true;
 		$this->assertFalse( empty( $args[0][0]->foo ) );
 	}
@@ -312,7 +312,7 @@ class Tests_Actions extends WP_UnitTestCase {
 	function test_action_self_removal() {
 		add_action( 'test_action_self_removal', array( $this, 'action_self_removal' ) );
 		do_action( 'test_action_self_removal' );
-		$this->assertEquals( 1, did_action( 'test_action_self_removal' ) );
+		$this->assertSame( 1, did_action( 'test_action_self_removal' ) );
 	}
 
 	function action_self_removal() {
@@ -332,8 +332,8 @@ class Tests_Actions extends WP_UnitTestCase {
 		add_action( $tag, array( $this, 'action_that_causes_recursion' ), 12, 1 );
 		do_action( $tag, $tag );
 
-		$this->assertEquals( 2, $a->get_call_count(), 'recursive actions should call all callbacks with earlier priority' );
-		$this->assertEquals( 2, $b->get_call_count(), 'recursive actions should call callbacks with later priority' );
+		$this->assertSame( 2, $a->get_call_count(), 'recursive actions should call all callbacks with earlier priority' );
+		$this->assertSame( 2, $b->get_call_count(), 'recursive actions should call callbacks with later priority' );
 	}
 
 	function action_that_causes_recursion( $tag ) {
@@ -364,11 +364,11 @@ class Tests_Actions extends WP_UnitTestCase {
 		do_action( $tag, $tag, array( $a, $b, $c, $d, $e ) );
 		do_action( $tag, $tag, array( $a, $b, $c, $d, $e ) );
 
-		$this->assertEquals( 2, $a->get_call_count(), 'callbacks should run unless otherwise instructed' );
-		$this->assertEquals( 1, $b->get_call_count(), 'callback removed by same priority callback should still get called' );
-		$this->assertEquals( 1, $c->get_call_count(), 'callback added by same priority callback should not get called' );
-		$this->assertEquals( 2, $d->get_call_count(), 'callback added by earlier priority callback should get called' );
-		$this->assertEquals( 1, $e->get_call_count(), 'callback added by later priority callback should not get called' );
+		$this->assertSame( 2, $a->get_call_count(), 'callbacks should run unless otherwise instructed' );
+		$this->assertSame( 1, $b->get_call_count(), 'callback removed by same priority callback should still get called' );
+		$this->assertSame( 1, $c->get_call_count(), 'callback added by same priority callback should not get called' );
+		$this->assertSame( 2, $d->get_call_count(), 'callback added by earlier priority callback should get called' );
+		$this->assertSame( 1, $e->get_call_count(), 'callback added by later priority callback should not get called' );
 	}
 
 	function action_that_manipulates_a_running_hook( $tag, $mocks ) {
@@ -435,7 +435,7 @@ class Tests_Actions extends WP_UnitTestCase {
 				'accepted_args' => 1,
 			),
 		);
-		$this->assertEquals( 11, has_action( $tag, '__return_null' ) );
+		$this->assertSame( 11, has_action( $tag, '__return_null' ) );
 	}
 
 	/**
@@ -448,7 +448,7 @@ class Tests_Actions extends WP_UnitTestCase {
 		$wp_current_filter[] = 'first';
 		$wp_current_filter[] = 'second'; // Let's say a second action was invoked.
 
-		$this->assertEquals( 'second', current_action() );
+		$this->assertSame( 'second', current_action() );
 	}
 
 	/**
@@ -456,16 +456,16 @@ class Tests_Actions extends WP_UnitTestCase {
 	 */
 	function test_doing_filter() {
 		global $wp_current_filter;
-		$wp_current_filter = array(); // Set to an empty array first
+		$wp_current_filter = array(); // Set to an empty array first.
 
-		$this->assertFalse( doing_filter() ); // No filter is passed in, and no filter is being processed
-		$this->assertFalse( doing_filter( 'testing' ) ); // Filter is passed in but not being processed
+		$this->assertFalse( doing_filter() );            // No filter is passed in, and no filter is being processed.
+		$this->assertFalse( doing_filter( 'testing' ) ); // Filter is passed in but not being processed.
 
 		$wp_current_filter[] = 'testing';
 
-		$this->assertTrue( doing_filter() ); // No action is passed in, and a filter is being processed
-		$this->assertTrue( doing_filter( 'testing' ) ); // Filter is passed in and is being processed
-		$this->assertFalse( doing_filter( 'something_else' ) ); // Filter is passed in but not being processed
+		$this->assertTrue( doing_filter() );                    // No action is passed in, and a filter is being processed.
+		$this->assertTrue( doing_filter( 'testing' ) );         // Filter is passed in and is being processed.
+		$this->assertFalse( doing_filter( 'something_else' ) ); // Filter is passed in but not being processed.
 
 		$wp_current_filter = array();
 	}
@@ -475,16 +475,16 @@ class Tests_Actions extends WP_UnitTestCase {
 	 */
 	function test_doing_action() {
 		global $wp_current_filter;
-		$wp_current_filter = array(); // Set to an empty array first
+		$wp_current_filter = array(); // Set to an empty array first.
 
-		$this->assertFalse( doing_action() ); // No action is passed in, and no filter is being processed
-		$this->assertFalse( doing_action( 'testing' ) ); // Action is passed in but not being processed
+		$this->assertFalse( doing_action() );            // No action is passed in, and no filter is being processed.
+		$this->assertFalse( doing_action( 'testing' ) ); // Action is passed in but not being processed.
 
 		$wp_current_filter[] = 'testing';
 
-		$this->assertTrue( doing_action() ); // No action is passed in, and a filter is being processed
-		$this->assertTrue( doing_action( 'testing' ) ); // Action is passed in and is being processed
-		$this->assertFalse( doing_action( 'something_else' ) ); // Action is passed in but not being processed
+		$this->assertTrue( doing_action() );                    // No action is passed in, and a filter is being processed.
+		$this->assertTrue( doing_action( 'testing' ) );         // Action is passed in and is being processed.
+		$this->assertFalse( doing_action( 'something_else' ) ); // Action is passed in but not being processed.
 
 		$wp_current_filter = array();
 	}
@@ -493,20 +493,20 @@ class Tests_Actions extends WP_UnitTestCase {
 	 * @ticket 14994
 	 */
 	function test_doing_filter_real() {
-		$this->assertFalse( doing_filter() ); // No filter is passed in, and no filter is being processed
-		$this->assertFalse( doing_filter( 'testing' ) ); // Filter is passed in but not being processed
+		$this->assertFalse( doing_filter() );            // No filter is passed in, and no filter is being processed.
+		$this->assertFalse( doing_filter( 'testing' ) ); // Filter is passed in but not being processed.
 
 		add_filter( 'testing', array( $this, 'apply_testing_filter' ) );
 		$this->assertTrue( has_action( 'testing' ) );
-		$this->assertEquals( 10, has_action( 'testing', array( $this, 'apply_testing_filter' ) ) );
+		$this->assertSame( 10, has_action( 'testing', array( $this, 'apply_testing_filter' ) ) );
 
 		apply_filters( 'testing', '' );
 
 		// Make sure it ran.
 		$this->assertTrue( $this->apply_testing_filter );
 
-		$this->assertFalse( doing_filter() ); // No longer doing any filters
-		$this->assertFalse( doing_filter( 'testing' ) ); // No longer doing this filter
+		$this->assertFalse( doing_filter() );            // No longer doing any filters.
+		$this->assertFalse( doing_filter( 'testing' ) ); // No longer doing this filter.
 	}
 
 	function apply_testing_filter() {
@@ -519,7 +519,7 @@ class Tests_Actions extends WP_UnitTestCase {
 
 		add_filter( 'testing_nested', array( $this, 'apply_testing_nested_filter' ) );
 		$this->assertTrue( has_action( 'testing_nested' ) );
-		$this->assertEquals( 10, has_action( 'testing_nested', array( $this, 'apply_testing_nested_filter' ) ) );
+		$this->assertSame( 10, has_action( 'testing_nested', array( $this, 'apply_testing_nested_filter' ) ) );
 
 		apply_filters( 'testing_nested', '' );
 
@@ -546,7 +546,7 @@ class Tests_Actions extends WP_UnitTestCase {
 		$p = new WP_Post( (object) array( 'post_title' => 'Foo' ) );
 
 		add_action( 'tests_do_action_deprecated', array( __CLASS__, 'deprecated_action_callback' ) );
-		do_action_deprecated( 'tests_do_action_deprecated', array( $p ), '4.6' );
+		do_action_deprecated( 'tests_do_action_deprecated', array( $p ), '4.6.0' );
 		remove_action( 'tests_do_action_deprecated', array( __CLASS__, 'deprecated_action_callback' ) );
 
 		$this->assertSame( 'Bar', $p->post_title );
@@ -565,7 +565,7 @@ class Tests_Actions extends WP_UnitTestCase {
 		$p2 = new WP_Post( (object) array( 'post_title' => 'Foo2' ) );
 
 		add_action( 'tests_do_action_deprecated', array( __CLASS__, 'deprecated_action_callback_multiple_params' ), 10, 2 );
-		do_action_deprecated( 'tests_do_action_deprecated', array( $p1, $p2 ), '4.6' );
+		do_action_deprecated( 'tests_do_action_deprecated', array( $p1, $p2 ), '4.6.0' );
 		remove_action( 'tests_do_action_deprecated', array( __CLASS__, 'deprecated_action_callback_multiple_params' ), 10, 2 );
 
 		$this->assertSame( 'Bar1', $p1->post_title );
diff --git a/tests/actions/callbacks.php b/tests/actions/callbacks.php
index 41db3dac3a..fc58c33906 100644
--- a/tests/actions/callbacks.php
+++ b/tests/actions/callbacks.php
@@ -15,8 +15,8 @@ class Tests_Actions_Callbacks extends WP_UnitTestCase {
 
 		add_action( $tag, array( 'Class', 'method' ) );
 
-		$this->assertEquals( 10, has_action( $tag, array( 'Class', 'method' ) ) );
+		$this->assertSame( 10, has_action( $tag, array( 'Class', 'method' ) ) );
 
-		$this->assertEquals( 10, has_action( $tag, 'Class::method' ) );
+		$this->assertSame( 10, has_action( $tag, 'Class::method' ) );
 	}
 }
diff --git a/tests/admin/includesCommunityEvents.php b/tests/admin/includesCommunityEvents.php
index 995c5a1288..5bae0d8b5d 100644
--- a/tests/admin/includesCommunityEvents.php
+++ b/tests/admin/includesCommunityEvents.php
@@ -34,7 +34,7 @@ class Test_WP_Community_Events extends WP_UnitTestCase {
 	public function setUp() {
 		parent::setUp();
 
-		require_once( ABSPATH . 'wp-admin/includes/class-wp-community-events.php' );
+		require_once ABSPATH . 'wp-admin/includes/class-wp-community-events.php';
 
 		$this->instance = new WP_Community_Events( 1, $this->get_user_location() );
 	}
@@ -152,7 +152,7 @@ class Test_WP_Community_Events extends WP_UnitTestCase {
 	}
 
 	/**
-	 * Test: With a valid response, get_events() should return an associated array containing a location array and
+	 * Test: With a valid response, get_events() should return an associative array containing a location array and
 	 * an events array with individual events that have formatted time and date.
 	 *
 	 * @since 4.8.0
@@ -163,9 +163,9 @@ class Test_WP_Community_Events extends WP_UnitTestCase {
 		$response = $this->instance->get_events();
 
 		$this->assertNotWPError( $response );
-		$this->assertEqualSetsWithIndex( $this->get_user_location(), $response['location'] );
-		$this->assertEquals( gmdate( 'l, M j, Y', strtotime( 'next Sunday 1pm' ) ), $response['events'][0]['formatted_date'] );
-		$this->assertEquals( '1:00 pm', $response['events'][0]['formatted_time'] );
+		$this->assertSameSetsWithIndex( $this->get_user_location(), $response['location'] );
+		$this->assertSame( gmdate( 'l, M j, Y', strtotime( 'next Sunday 1pm' ) ), $response['events'][0]['formatted_date'] );
+		$this->assertSame( '1:00 pm', $response['events'][0]['formatted_time'] );
 
 		remove_filter( 'pre_http_request', array( $this, '_http_request_valid_response' ) );
 	}
@@ -184,9 +184,9 @@ class Test_WP_Community_Events extends WP_UnitTestCase {
 		$cached_events = $this->instance->get_cached_events();
 
 		$this->assertNotWPError( $cached_events );
-		$this->assertEqualSetsWithIndex( $this->get_user_location(), $cached_events['location'] );
-		$this->assertEquals( gmdate( 'l, M j, Y', strtotime( 'next Sunday 1pm' ) ), $cached_events['events'][0]['formatted_date'] );
-		$this->assertEquals( '1:00 pm', $cached_events['events'][0]['formatted_time'] );
+		$this->assertSameSetsWithIndex( $this->get_user_location(), $cached_events['location'] );
+		$this->assertSame( gmdate( 'l, M j, Y', strtotime( 'next Sunday 1pm' ) ), $cached_events['events'][0]['formatted_date'] );
+		$this->assertSame( '1:00 pm', $cached_events['events'][0]['formatted_time'] );
 
 		remove_filter( 'pre_http_request', array( $this, '_http_request_valid_response' ) );
 	}
@@ -273,9 +273,9 @@ class Test_WP_Community_Events extends WP_UnitTestCase {
 		 * so that it remains in the list. The other events should remain unchanged.
 		 */
 		$this->assertCount( 3, $response_body['events'] );
-		$this->assertEquals( $response_body['events'][0]['title'], 'Flexbox + CSS Grid: Magic for Responsive Layouts' );
-		$this->assertEquals( $response_body['events'][1]['title'], 'Part 3- Site Maintenance - Tools to Make It Easy' );
-		$this->assertEquals( $response_body['events'][2]['title'], 'WordCamp San Diego' );
+		$this->assertSame( $response_body['events'][0]['title'], 'Flexbox + CSS Grid: Magic for Responsive Layouts' );
+		$this->assertSame( $response_body['events'][1]['title'], 'Part 3- Site Maintenance - Tools to Make It Easy' );
+		$this->assertSame( $response_body['events'][2]['title'], 'WordCamp San Diego' );
 
 		remove_filter( 'pre_http_request', array( $this, '_http_request_valid_response_unpinned_wordcamp' ) );
 	}
@@ -375,9 +375,9 @@ class Test_WP_Community_Events extends WP_UnitTestCase {
 		 * WordCamp LA should not be stuck to the list, because San Diego already appears naturally.
 		 */
 		$this->assertCount( 3, $response_body['events'] );
-		$this->assertEquals( $response_body['events'][0]['title'], 'WordCamp San Diego' );
-		$this->assertEquals( $response_body['events'][1]['title'], 'Part 3- Site Maintenance - Tools to Make It Easy' );
-		$this->assertEquals( $response_body['events'][2]['title'], 'WordPress Q&A' );
+		$this->assertSame( $response_body['events'][0]['title'], 'WordCamp San Diego' );
+		$this->assertSame( $response_body['events'][1]['title'], 'Part 3- Site Maintenance - Tools to Make It Easy' );
+		$this->assertSame( $response_body['events'][2]['title'], 'WordPress Q&A' );
 
 		remove_filter( 'pre_http_request', array( $this, '_http_request_valid_response_multiple_wordcamps' ) );
 	}
@@ -488,7 +488,7 @@ class Test_WP_Community_Events extends WP_UnitTestCase {
 		$_SERVER['HTTP_CLIENT_IP'] = $raw_ip;
 		$actual_result             = WP_Community_Events::get_unsafe_client_ip();
 
-		$this->assertEquals( $expected_result, $actual_result );
+		$this->assertSame( $expected_result, $actual_result );
 	}
 
 	/**
diff --git a/tests/admin/includesFile.php b/tests/admin/includesFile.php
index 70c8fab1ab..a3af5da2d1 100644
--- a/tests/admin/includesFile.php
+++ b/tests/admin/includesFile.php
@@ -13,19 +13,19 @@ class Tests_Admin_includesFile extends WP_UnitTestCase {
 		$home    = get_option( 'home' );
 		$siteurl = get_option( 'siteurl' );
 		$sfn     = $_SERVER['SCRIPT_FILENAME'];
-		$this->assertEquals( str_replace( '\\', '/', ABSPATH ), get_home_path() );
+		$this->assertSame( str_replace( '\\', '/', ABSPATH ), get_home_path() );
 
 		update_option( 'home', 'http://localhost' );
 		update_option( 'siteurl', 'http://localhost/wp' );
 
 		$_SERVER['SCRIPT_FILENAME'] = 'D:\root\vhosts\site\httpdocs\wp\wp-admin\options-permalink.php';
-		$this->assertEquals( 'D:/root/vhosts/site/httpdocs/', get_home_path() );
+		$this->assertSame( 'D:/root/vhosts/site/httpdocs/', get_home_path() );
 
 		$_SERVER['SCRIPT_FILENAME'] = '/Users/foo/public_html/trunk/wp/wp-admin/options-permalink.php';
-		$this->assertEquals( '/Users/foo/public_html/trunk/', get_home_path() );
+		$this->assertSame( '/Users/foo/public_html/trunk/', get_home_path() );
 
 		$_SERVER['SCRIPT_FILENAME'] = 'S:/home/wordpress/trunk/wp/wp-admin/options-permalink.php';
-		$this->assertEquals( 'S:/home/wordpress/trunk/', get_home_path() );
+		$this->assertSame( 'S:/home/wordpress/trunk/', get_home_path() );
 
 		update_option( 'home', $home );
 		update_option( 'siteurl', $siteurl );
@@ -40,7 +40,7 @@ class Tests_Admin_includesFile extends WP_UnitTestCase {
 
 		$error = download_url( 'test_download_url_non_200' );
 		$this->assertWPError( $error );
-		$this->assertEquals(
+		$this->assertSame(
 			array(
 				'code' => 418,
 				'body' => 'This is an unexpected error message from your favorite server.',
@@ -52,7 +52,7 @@ class Tests_Admin_includesFile extends WP_UnitTestCase {
 
 		$error = download_url( 'test_download_url_non_200' );
 		$this->assertWPError( $error );
-		$this->assertEquals(
+		$this->assertSame(
 			array(
 				'code' => 418,
 				'body' => 'This ',
diff --git a/tests/admin/includesListTable.php b/tests/admin/includesListTable.php
index ff18d4a724..a6b77af5b8 100644
--- a/tests/admin/includesListTable.php
+++ b/tests/admin/includesListTable.php
@@ -20,9 +20,9 @@ class Tests_Admin_includesListTable extends WP_UnitTestCase {
 	}
 
 	public static function wpSetUpBeforeClass( $factory ) {
-		// note that our top/children/grandchildren arrays are 1-indexed
+		// Note that our top/children/grandchildren arrays are 1-indexed.
 
-		// create top level pages
+		// Create top-level pages.
 		$num_posts = 5;
 		foreach ( range( 1, $num_posts ) as $i ) {
 			$p = $factory->post->create_and_get(
@@ -36,7 +36,7 @@ class Tests_Admin_includesListTable extends WP_UnitTestCase {
 			self::$post_ids[] = $p->ID;
 		}
 
-		// create child pages
+		// Create child pages.
 		$num_children = 3;
 		foreach ( self::$top as $top => $top_page ) {
 			foreach ( range( 1, $num_children ) as $i ) {
@@ -53,7 +53,7 @@ class Tests_Admin_includesListTable extends WP_UnitTestCase {
 			}
 		}
 
-		// create grand-child pages for the third and fourth top-level pages
+		// Create grand-child pages for the third and fourth top-level pages.
 		$num_grandchildren = 3;
 		foreach ( range( 3, 4 ) as $top ) {
 			foreach ( self::$children[ $top ] as $child => $child_page ) {
@@ -144,7 +144,7 @@ class Tests_Admin_includesListTable extends WP_UnitTestCase {
 	 * @ticket 15459
 	 */
 	function test_grandchildren_hierarchical_pages_first_page() {
-		// page 6 is the first page with grandchildren
+		// Page 6 is the first page with grandchildren.
 		$this->_test_list_hierarchical_page(
 			array(
 				'paged'          => 6,
@@ -163,7 +163,7 @@ class Tests_Admin_includesListTable extends WP_UnitTestCase {
 	 * @ticket 15459
 	 */
 	function test_grandchildren_hierarchical_pages_second_page() {
-		// page 7 is the second page with grandchildren
+		// Page 7 is the second page with grandchildren.
 		$this->_test_list_hierarchical_page(
 			array(
 				'paged'          => 7,
@@ -281,6 +281,64 @@ class Tests_Admin_includesListTable extends WP_UnitTestCase {
 		$this->assertNotContains( 'id="delete_all"', $output );
 	}
 
+	/**
+	 * @ticket 40188
+	 */
+	public function test_filter_button_should_not_be_shown_if_there_are_no_comments() {
+		$table = _get_list_table( 'WP_Comments_List_Table', array( 'screen' => 'edit-comments' ) );
+
+		ob_start();
+		$table->extra_tablenav( 'top' );
+		$output = ob_get_clean();
+
+		$this->assertNotContains( 'id="post-query-submit"', $output );
+	}
+
+	/**
+	 * @ticket 40188
+	 */
+	public function test_filter_button_should_be_shown_if_there_are_comments() {
+		$post_id    = self::factory()->post->create();
+		$comment_id = self::factory()->comment->create(
+			array(
+				'comment_post_ID'  => $post_id,
+				'comment_approved' => '1',
+			)
+		);
+
+		$table = _get_list_table( 'WP_Comments_List_Table', array( 'screen' => 'edit-comments' ) );
+		$table->prepare_items();
+
+		ob_start();
+		$table->extra_tablenav( 'top' );
+		$output = ob_get_clean();
+
+		$this->assertContains( 'id="post-query-submit"', $output );
+	}
+
+	/**
+	 * @ticket 40188
+	 */
+	public function test_filter_comment_type_dropdown_should_be_shown_if_there_are_comments() {
+		$post_id    = self::factory()->post->create();
+		$comment_id = self::factory()->comment->create(
+			array(
+				'comment_post_ID'  => $post_id,
+				'comment_approved' => '1',
+			)
+		);
+
+		$table = _get_list_table( 'WP_Comments_List_Table', array( 'screen' => 'edit-comments' ) );
+		$table->prepare_items();
+
+		ob_start();
+		$table->extra_tablenav( 'top' );
+		$output = ob_get_clean();
+
+		$this->assertContains( 'id="filter-by-comment-type"', $output );
+		$this->assertContains( "<option value='comment'>", $output );
+	}
+
 	/**
 	 * @ticket 38341
 	 */
@@ -293,4 +351,77 @@ class Tests_Admin_includesListTable extends WP_UnitTestCase {
 
 		$this->assertNotContains( 'id="delete_all"', $output );
 	}
+
+	/**
+	 * @ticket 45089
+	 */
+	public function test_sortable_columns() {
+		require_once ABSPATH . 'wp-admin/includes/class-wp-comments-list-table.php';
+
+		$override_sortable_columns = array(
+			'author'   => array( 'comment_author', true ),
+			'response' => 'comment_post_ID',
+			'date'     => array( 'comment_date', 'dEsC' ), // The ordering support should be case-insensitive.
+		);
+
+		// Stub the get_sortable_columns() method.
+		$object = $this->getMockBuilder( 'WP_Comments_List_Table' )
+			->setConstructorArgs( array( array( 'screen' => 'edit-comments' ) ) )
+			->setMethods( array( 'get_sortable_columns' ) )
+			->getMock();
+
+		// Change the null return value of the stubbed get_sortable_columns() method.
+		$object->method( 'get_sortable_columns' )
+			->willReturn( $override_sortable_columns );
+
+		$output = get_echo( array( $object, 'print_column_headers' ) );
+
+		$this->assertContains( '?orderby=comment_author&#038;order=desc', $output, 'Mismatch of the default link ordering for comment author column. Should be desc.' );
+		$this->assertContains( 'column-author sortable asc', $output, 'Mismatch of CSS classes for the comment author column.' );
+
+		$this->assertContains( '?orderby=comment_post_ID&#038;order=asc', $output, 'Mismatch of the default link ordering for comment response column. Should be asc.' );
+		$this->assertContains( 'column-response sortable desc', $output, 'Mismatch of CSS classes for the comment post ID column.' );
+
+		$this->assertContains( '?orderby=comment_date&#038;order=desc', $output, 'Mismatch of the default link ordering for comment date column. Should be asc.' );
+		$this->assertContains( 'column-date sortable asc', $output, 'Mismatch of CSS classes for the comment date column.' );
+	}
+
+	/**
+	 * @ticket 45089
+	 */
+	public function test_sortable_columns_with_current_ordering() {
+		require_once ABSPATH . 'wp-admin/includes/class-wp-comments-list-table.php';
+
+		$override_sortable_columns = array(
+			'author'   => array( 'comment_author', false ),
+			'response' => 'comment_post_ID',
+			'date'     => array( 'comment_date', 'asc' ), // We will override this with current ordering.
+		);
+
+		// Current ordering.
+		$_GET['orderby'] = 'comment_date';
+		$_GET['order']   = 'desc';
+
+		// Stub the get_sortable_columns() method.
+		$object = $this->getMockBuilder( 'WP_Comments_List_Table' )
+			->setConstructorArgs( array( array( 'screen' => 'edit-comments' ) ) )
+			->setMethods( array( 'get_sortable_columns' ) )
+			->getMock();
+
+		// Change the null return value of the stubbed get_sortable_columns() method.
+		$object->method( 'get_sortable_columns' )
+			->willReturn( $override_sortable_columns );
+
+		$output = get_echo( array( $object, 'print_column_headers' ) );
+
+		$this->assertContains( '?orderby=comment_author&#038;order=asc', $output, 'Mismatch of the default link ordering for comment author column. Should be asc.' );
+		$this->assertContains( 'column-author sortable desc', $output, 'Mismatch of CSS classes for the comment author column.' );
+
+		$this->assertContains( '?orderby=comment_post_ID&#038;order=asc', $output, 'Mismatch of the default link ordering for comment response column. Should be asc.' );
+		$this->assertContains( 'column-response sortable desc', $output, 'Mismatch of CSS classes for the comment post ID column.' );
+
+		$this->assertContains( '?orderby=comment_date&#038;order=asc', $output, 'Mismatch of the current link ordering for comment date column. Should be asc.' );
+		$this->assertContains( 'column-date sorted desc', $output, 'Mismatch of CSS classes for the comment date column.' );
+	}
+
 }
diff --git a/tests/admin/includesMisc.php b/tests/admin/includesMisc.php
index 6007ef364c..93951af4e5 100644
--- a/tests/admin/includesMisc.php
+++ b/tests/admin/includesMisc.php
@@ -7,20 +7,20 @@ class Tests_Admin_includesMisc extends WP_UnitTestCase {
 	function test_shorten_url() {
 		$tests = array(
 			'wordpress\.org/about/philosophy'
-				=> 'wordpress\.org/about/philosophy', // no longer strips slashes
+				=> 'wordpress\.org/about/philosophy',     // No longer strips slashes.
 			'wordpress.org/about/philosophy'
 				=> 'wordpress.org/about/philosophy',
 			'http://wordpress.org/about/philosophy/'
-				=> 'wordpress.org/about/philosophy', // remove http, trailing slash
+				=> 'wordpress.org/about/philosophy',      // Remove http, trailing slash.
 			'http://www.wordpress.org/about/philosophy/'
-				=> 'wordpress.org/about/philosophy', // remove http, www
+				=> 'wordpress.org/about/philosophy',      // Remove http, www.
 			'http://wordpress.org/about/philosophy/#box'
-				=> 'wordpress.org/about/philosophy/#box', // don't shorten 35 characters
+				=> 'wordpress.org/about/philosophy/#box',      // Don't shorten 35 characters.
 			'http://wordpress.org/about/philosophy/#decisions'
-				=> 'wordpress.org/about/philosophy/#&hellip;', // shorten to 32 if > 35 after cleaning
+				=> 'wordpress.org/about/philosophy/#&hellip;', // Shorten to 32 if > 35 after cleaning.
 		);
 		foreach ( $tests as $k => $v ) {
-			$this->assertEquals( $v, url_shorten( $k ) );
+			$this->assertSame( $v, url_shorten( $k ) );
 		}
 	}
 }
diff --git a/tests/admin/includesPlugin.php b/tests/admin/includesPlugin.php
index 233c6ea19f..310173b27a 100644
--- a/tests/admin/includesPlugin.php
+++ b/tests/admin/includesPlugin.php
@@ -23,7 +23,7 @@ class Tests_Admin_includesPlugin extends WP_UnitTestCase {
 
 		foreach ( $default_headers as $name => $value ) {
 			$this->assertTrue( isset( $data[ $name ] ) );
-			$this->assertEquals( $value, $data[ $name ] );
+			$this->assertSame( $value, $data[ $name ] );
 		}
 	}
 
@@ -32,7 +32,7 @@ class Tests_Admin_includesPlugin extends WP_UnitTestCase {
 		wp_set_current_user( self::factory()->user->create( array( 'role' => 'administrator' ) ) );
 		update_option( 'siteurl', 'http://example.com' );
 
-		// add some pages
+		// Add some pages.
 		add_options_page( 'Test Settings', 'Test Settings', 'manage_options', 'testsettings', 'mt_settings_page' );
 		add_management_page( 'Test Tools', 'Test Tools', 'manage_options', 'testtools', 'mt_tools_page' );
 		add_menu_page( 'Test Toplevel', 'Test Toplevel', 'manage_options', 'mt-top-level-handle', 'mt_toplevel_page' );
@@ -51,7 +51,7 @@ class Tests_Admin_includesPlugin extends WP_UnitTestCase {
 		$expected['testpages']           = 'http://example.com/wp-admin/edit.php?post_type=page&#038;page=testpages';
 
 		foreach ( $expected as $name => $value ) {
-			$this->assertEquals( $value, menu_page_url( $name, false ) );
+			$this->assertSame( $value, menu_page_url( $name, false ) );
 		}
 
 		wp_set_current_user( $current_user );
@@ -98,6 +98,7 @@ class Tests_Admin_includesPlugin extends WP_UnitTestCase {
 	 * Tests the priority parameter for menu helper functions.
 	 *
 	 * @ticket 39776
+	 * @group ms-excluded
 	 *
 	 * @covers ::add_management_page
 	 * @covers ::add_options_page
@@ -120,11 +121,6 @@ class Tests_Admin_includesPlugin extends WP_UnitTestCase {
 		global $submenu;
 		global $menu;
 
-		// Skip for multisite.
-		if ( is_multisite() ) {
-			return;
-		}
-
 		// Reset menus.
 		$submenu = array();
 		$menu    = array();
@@ -259,6 +255,67 @@ class Tests_Admin_includesPlugin extends WP_UnitTestCase {
 		);
 	}
 
+	/**
+	 * Test that when a submenu has the same slug as a parent item, that it's just appended and ignores the priority.
+	 *
+	 * @ticket 48599
+	 */
+	function test_priority_when_parent_slug_child_slug_are_the_same() {
+		global $submenu, $menu;
+
+		// Reset menus.
+		$submenu      = array();
+		$menu         = array();
+		$current_user = get_current_user_id();
+		$admin_user   = self::factory()->user->create( array( 'role' => 'administrator' ) );
+		wp_set_current_user( $admin_user );
+		set_current_screen( 'dashboard' );
+
+		// Setup a menu with some items.
+		add_menu_page( 'Main Menu', 'Main Menu', 'manage_options', 'main_slug', 'main_page_callback' );
+		add_submenu_page( 'main_slug', 'SubMenu 1', 'SubMenu 1', 'manage_options', 'main_slug', 'submenu_callback_1', 1 );
+		add_submenu_page( 'main_slug', 'SubMenu 2', 'SubMenu 2', 'manage_options', 'submenu_page2', 'submenu_callback_2', 2 );
+		add_submenu_page( 'main_slug', 'SubMenu 3', 'SubMenu 3', 'manage_options', 'submenu_page3', 'submenu_callback_3', 3 );
+
+		// Clean up the temporary user.
+		wp_set_current_user( $current_user );
+		wp_delete_user( $admin_user );
+
+		// Verify the menu was inserted at the expected position.
+		$this->assertSame( 'main_slug', $submenu['main_slug'][0][2] );
+		$this->assertSame( 'submenu_page2', $submenu['main_slug'][1][2] );
+		$this->assertSame( 'submenu_page3', $submenu['main_slug'][2][2] );
+	}
+
+	/**
+	 * Passing a string as priority will fail.
+	 *
+	 * @ticket 48599
+	 */
+	function test_passing_string_as_priority_fires_doing_it_wrong() {
+		$this->setExpectedIncorrectUsage( 'add_submenu_page' );
+		global $submenu, $menu;
+
+		// Reset menus.
+		$submenu      = array();
+		$menu         = array();
+		$current_user = get_current_user_id();
+		$admin_user   = self::factory()->user->create( array( 'role' => 'administrator' ) );
+		wp_set_current_user( $admin_user );
+		set_current_screen( 'dashboard' );
+
+		// Setup a menu with some items.
+		add_menu_page( 'Main Menu', 'Main Menu', 'manage_options', 'main_slug', 'main_page_callback' );
+		add_submenu_page( 'main_slug', 'SubMenu 1', 'SubMenu 1', 'manage_options', 'submenu_page_1', 'submenu_callback_1', '2' );
+
+		// Clean up the temporary user.
+		wp_set_current_user( $current_user );
+		wp_delete_user( $admin_user );
+
+		// Verify the menu was inserted at the expected position.
+		$this->assertSame( 'submenu_page_1', $submenu['main_slug'][1][2] );
+	}
+
 	function test_is_plugin_active_true() {
 		activate_plugin( 'hello.php' );
 		$test = is_plugin_active( 'hello.php' );
@@ -292,7 +349,7 @@ class Tests_Admin_includesPlugin extends WP_UnitTestCase {
 	 */
 	public function test_get_plugin_files_single() {
 		$name = 'hello.php';
-		$this->assertEquals( array( $name ), get_plugin_files( $name ) );
+		$this->assertSame( array( $name ), get_plugin_files( $name ) );
 	}
 
 	/**
@@ -312,7 +369,7 @@ class Tests_Admin_includesPlugin extends WP_UnitTestCase {
 			'list_files_test_plugin/list_files_test_plugin.php',
 			'list_files_test_plugin/subdir/subfile.php',
 		);
-		$this->assertEquals( $expected, $plugin_files );
+		$this->assertSame( $expected, $plugin_files );
 
 		unlink( $sub_dir . '/subfile.php' );
 		unlink( $plugin[1] );
@@ -332,7 +389,7 @@ class Tests_Admin_includesPlugin extends WP_UnitTestCase {
 			mkdir( WPMU_PLUGIN_DIR );
 		}
 
-		$this->assertEquals( array(), get_mu_plugins() );
+		$this->assertSame( array(), get_mu_plugins() );
 
 		// Clean up.
 		if ( $exists ) {
@@ -353,7 +410,7 @@ class Tests_Admin_includesPlugin extends WP_UnitTestCase {
 			rmdir( WPMU_PLUGIN_DIR );
 		}
 
-		$this->assertEquals( array(), get_mu_plugins() );
+		$this->assertSame( array(), get_mu_plugins() );
 
 		// Clean up.
 		if ( $exists ) {
@@ -375,7 +432,7 @@ class Tests_Admin_includesPlugin extends WP_UnitTestCase {
 		}
 
 		$this->_create_plugin( '<?php\n//Silence is golden.', 'index.php', WPMU_PLUGIN_DIR );
-		$this->assertEquals( array(), get_mu_plugins() );
+		$this->assertSame( array(), get_mu_plugins() );
 
 		// Clean up.
 		unlink( WPMU_PLUGIN_DIR . '/index.php' );
@@ -400,7 +457,7 @@ class Tests_Admin_includesPlugin extends WP_UnitTestCase {
 
 		$this->_create_plugin( '<?php\n//Silence is not golden.', 'index.php', WPMU_PLUGIN_DIR );
 		$found = get_mu_plugins();
-		$this->assertEquals( array( 'index.php' ), array_keys( $found ) );
+		$this->assertSame( array( 'index.php' ), array_keys( $found ) );
 
 		// Clean up.
 		unlink( WPMU_PLUGIN_DIR . '/index.php' );
@@ -426,7 +483,7 @@ class Tests_Admin_includesPlugin extends WP_UnitTestCase {
 		$this->_create_plugin( '<?php\n//Test', 'foo.php', WPMU_PLUGIN_DIR );
 		$this->_create_plugin( '<?php\n//Test 2', 'bar.txt', WPMU_PLUGIN_DIR );
 		$found = get_mu_plugins();
-		$this->assertEquals( array( 'foo.php' ), array_keys( $found ) );
+		$this->assertSame( array( 'foo.php' ), array_keys( $found ) );
 
 		// Clean up.
 		unlink( WPMU_PLUGIN_DIR . '/foo.php' );
@@ -444,7 +501,7 @@ class Tests_Admin_includesPlugin extends WP_UnitTestCase {
 	public function test__sort_uname_callback() {
 		$this->assertLessThan( 0, _sort_uname_callback( array( 'Name' => 'a' ), array( 'Name' => 'b' ) ) );
 		$this->assertGreaterThan( 0, _sort_uname_callback( array( 'Name' => 'c' ), array( 'Name' => 'b' ) ) );
-		$this->assertEquals( 0, _sort_uname_callback( array( 'Name' => 'a' ), array( 'Name' => 'a' ) ) );
+		$this->assertSame( 0, _sort_uname_callback( array( 'Name' => 'a' ), array( 'Name' => 'a' ) ) );
 	}
 
 	/**
@@ -453,7 +510,7 @@ class Tests_Admin_includesPlugin extends WP_UnitTestCase {
 	public function test_get_dropins_empty() {
 		$this->_back_up_drop_ins();
 
-		$this->assertEquals( array(), get_dropins() );
+		$this->assertSame( array(), get_dropins() );
 
 		// Clean up.
 		$this->_restore_drop_ins();
@@ -469,7 +526,7 @@ class Tests_Admin_includesPlugin extends WP_UnitTestCase {
 		$p2 = $this->_create_plugin( "<?php\n//Test", 'not-a-dropin.php', WP_CONTENT_DIR );
 
 		$dropins = get_dropins();
-		$this->assertEquals( array( 'advanced-cache.php' ), array_keys( $dropins ) );
+		$this->assertSame( array( 'advanced-cache.php' ), array_keys( $dropins ) );
 
 		unlink( $p1[1] );
 		unlink( $p2[1] );
@@ -533,7 +590,7 @@ class Tests_Admin_includesPlugin extends WP_UnitTestCase {
 	 * @covers ::validate_active_plugins
 	 */
 	public function test_validate_active_plugins_empty() {
-		$this->assertEquals( array(), validate_active_plugins() );
+		$this->assertSame( array(), validate_active_plugins() );
 	}
 
 	/**
diff --git a/tests/admin/includesPost.php b/tests/admin/includesPost.php
index cad9742f8d..fcb74ced2d 100644
--- a/tests/admin/includesPost.php
+++ b/tests/admin/includesPost.php
@@ -29,7 +29,7 @@ class Tests_Admin_Includes_Post extends WP_UnitTestCase {
 	function test__wp_translate_postdata_cap_checks_contributor() {
 		wp_set_current_user( self::$contributor_id );
 
-		// Create New Draft Post
+		// Create new draft post.
 		$_post_data                = array();
 		$_post_data['post_author'] = self::$contributor_id;
 		$_post_data['post_type']   = 'post';
@@ -37,10 +37,10 @@ class Tests_Admin_Includes_Post extends WP_UnitTestCase {
 
 		$_results = _wp_translate_postdata( false, $_post_data );
 		$this->assertNotWPError( $_results );
-		$this->assertEquals( $_post_data['post_author'], $_results['post_author'] );
-		$this->assertEquals( 'draft', $_results['post_status'] );
+		$this->assertSame( $_post_data['post_author'], $_results['post_author'] );
+		$this->assertSame( 'draft', $_results['post_status'] );
 
-		// Submit Post for Approval
+		// Submit post for approval.
 		$_post_data                = array();
 		$_post_data['post_author'] = self::$contributor_id;
 		$_post_data['post_type']   = 'post';
@@ -48,10 +48,10 @@ class Tests_Admin_Includes_Post extends WP_UnitTestCase {
 
 		$_results = _wp_translate_postdata( false, $_post_data );
 		$this->assertNotWPError( $_results );
-		$this->assertEquals( $_post_data['post_author'], $_results['post_author'] );
-		$this->assertEquals( 'pending', $_results['post_status'] );
+		$this->assertSame( $_post_data['post_author'], $_results['post_author'] );
+		$this->assertSame( 'pending', $_results['post_status'] );
 
-		// Create New Draft Post for another user
+		// Create new draft post for another user.
 		$_post_data                = array();
 		$_post_data['post_author'] = self::$editor_id;
 		$_post_data['post_type']   = 'post';
@@ -59,10 +59,10 @@ class Tests_Admin_Includes_Post extends WP_UnitTestCase {
 
 		$_results = _wp_translate_postdata( false, $_post_data );
 		$this->assertInstanceOf( 'WP_Error', $_results );
-		$this->assertEquals( 'edit_others_posts', $_results->get_error_code() );
-		$this->assertEquals( 'Sorry, you are not allowed to create posts as this user.', $_results->get_error_message() );
+		$this->assertSame( 'edit_others_posts', $_results->get_error_code() );
+		$this->assertSame( 'Sorry, you are not allowed to create posts as this user.', $_results->get_error_message() );
 
-		// Edit Draft Post for another user
+		// Edit draft post for another user.
 		$_post_data                = array();
 		$_post_data['post_ID']     = self::factory()->post->create( array( 'post_author' => self::$editor_id ) );
 		$_post_data['post_author'] = self::$editor_id;
@@ -72,14 +72,14 @@ class Tests_Admin_Includes_Post extends WP_UnitTestCase {
 
 		$_results = _wp_translate_postdata( true, $_post_data );
 		$this->assertInstanceOf( 'WP_Error', $_results );
-		$this->assertEquals( 'edit_others_posts', $_results->get_error_code() );
-		$this->assertEquals( 'Sorry, you are not allowed to edit posts as this user.', $_results->get_error_message() );
+		$this->assertSame( 'edit_others_posts', $_results->get_error_code() );
+		$this->assertSame( 'Sorry, you are not allowed to edit posts as this user.', $_results->get_error_message() );
 	}
 
 	function test__wp_translate_postdata_cap_checks_editor() {
 		wp_set_current_user( self::$editor_id );
 
-		// Create New Draft Post
+		// Create new draft post.
 		$_post_data                = array();
 		$_post_data['post_author'] = self::$editor_id;
 		$_post_data['post_type']   = 'post';
@@ -87,10 +87,10 @@ class Tests_Admin_Includes_Post extends WP_UnitTestCase {
 
 		$_results = _wp_translate_postdata( false, $_post_data );
 		$this->assertNotWPError( $_results );
-		$this->assertEquals( $_post_data['post_author'], $_results['post_author'] );
-		$this->assertEquals( 'draft', $_results['post_status'] );
+		$this->assertSame( $_post_data['post_author'], $_results['post_author'] );
+		$this->assertSame( 'draft', $_results['post_status'] );
 
-		// Publish Post
+		// Publish post.
 		$_post_data                = array();
 		$_post_data['post_author'] = self::$editor_id;
 		$_post_data['post_type']   = 'post';
@@ -98,10 +98,10 @@ class Tests_Admin_Includes_Post extends WP_UnitTestCase {
 
 		$_results = _wp_translate_postdata( false, $_post_data );
 		$this->assertNotWPError( $_results );
-		$this->assertEquals( $_post_data['post_author'], $_results['post_author'] );
-		$this->assertEquals( 'publish', $_results['post_status'] );
+		$this->assertSame( $_post_data['post_author'], $_results['post_author'] );
+		$this->assertSame( 'publish', $_results['post_status'] );
 
-		// Create New Draft Post for another user
+		// Create new draft post for another user.
 		$_post_data                = array();
 		$_post_data['post_author'] = self::$contributor_id;
 		$_post_data['post_type']   = 'post';
@@ -109,10 +109,10 @@ class Tests_Admin_Includes_Post extends WP_UnitTestCase {
 
 		$_results = _wp_translate_postdata( false, $_post_data );
 		$this->assertNotWPError( $_results );
-		$this->assertEquals( $_post_data['post_author'], $_results['post_author'] );
-		$this->assertEquals( 'draft', $_results['post_status'] );
+		$this->assertSame( $_post_data['post_author'], $_results['post_author'] );
+		$this->assertSame( 'draft', $_results['post_status'] );
 
-		// Edit Draft Post for another user
+		// Edit draft post for another user.
 		$_post_data                = array();
 		$_post_data['post_ID']     = self::factory()->post->create( array( 'post_author' => self::$contributor_id ) );
 		$_post_data['post_author'] = self::$contributor_id;
@@ -122,8 +122,8 @@ class Tests_Admin_Includes_Post extends WP_UnitTestCase {
 
 		$_results = _wp_translate_postdata( true, $_post_data );
 		$this->assertNotWPError( $_results );
-		$this->assertEquals( $_post_data['post_author'], $_results['post_author'] );
-		$this->assertEquals( 'draft', $_results['post_status'] );
+		$this->assertSame( $_post_data['post_author'], $_results['post_author'] );
+		$this->assertSame( 'draft', $_results['post_status'] );
 	}
 
 	/**
@@ -134,7 +134,7 @@ class Tests_Admin_Includes_Post extends WP_UnitTestCase {
 	function test_edit_post_auto_draft() {
 		wp_set_current_user( self::$editor_id );
 		$post = self::factory()->post->create_and_get( array( 'post_status' => 'auto-draft' ) );
-		$this->assertEquals( 'auto-draft', $post->post_status );
+		$this->assertSame( 'auto-draft', $post->post_status );
 		$post_data = array(
 			'post_title' => 'Post title',
 			'content'    => 'Post content',
@@ -142,7 +142,7 @@ class Tests_Admin_Includes_Post extends WP_UnitTestCase {
 			'post_ID'    => $post->ID,
 		);
 		edit_post( $post_data );
-		$this->assertEquals( 'draft', get_post( $post->ID )->post_status );
+		$this->assertSame( 'draft', get_post( $post->ID )->post_status );
 	}
 
 	/**
@@ -252,10 +252,10 @@ class Tests_Admin_Includes_Post extends WP_UnitTestCase {
 		$post = get_post( $post2 );
 
 		// Check that the first post's values don't stomp the second post.
-		$this->assertEquals( 'draft', $post->post_status );
+		$this->assertSame( 'draft', $post->post_status );
 		$this->assertEquals( self::$author_ids[1], $post->post_author );
-		$this->assertEquals( 'closed', $post->comment_status );
-		$this->assertEquals( 'closed', $post->ping_status );
+		$this->assertSame( 'closed', $post->comment_status );
+		$this->assertSame( 'closed', $post->ping_status );
 	}
 
 	/**
@@ -314,7 +314,7 @@ class Tests_Admin_Includes_Post extends WP_UnitTestCase {
 
 	public function check_post_format( $post_id ) {
 		if ( self::$post_id === $post_id ) {
-			$this->assertEquals( 'aside', get_post_format( $post_id ) );
+			$this->assertSame( 'aside', get_post_format( $post_id ) );
 		}
 	}
 
@@ -453,7 +453,7 @@ class Tests_Admin_Includes_Post extends WP_UnitTestCase {
 
 		wp_set_current_user( self::$admin_id );
 
-		// Published posts should use published permalink
+		// Published posts should use published permalink.
 		$p = self::factory()->post->create(
 			array(
 				'post_status' => 'publish',
@@ -467,7 +467,7 @@ class Tests_Admin_Includes_Post extends WP_UnitTestCase {
 		$this->assertContains( 'href="' . get_option( 'home' ) . '/' . $post->post_name . '/"', $found, $message );
 		$this->assertContains( '>new_slug-ÿµŸàÿ±ÿ©<', $found, $message );
 
-		// Scheduled posts should use published permalink
+		// Scheduled posts should use published permalink.
 		$future_date = gmdate( 'Y-m-d H:i:s', time() + 100 );
 		$p           = self::factory()->post->create(
 			array(
@@ -483,7 +483,7 @@ class Tests_Admin_Includes_Post extends WP_UnitTestCase {
 		$this->assertContains( 'href="' . get_option( 'home' ) . '/' . $post->post_name . '/"', $found, $message );
 		$this->assertContains( '>new_slug-ÿµŸàÿ±ÿ©<', $found, $message );
 
-		// Draft posts should use preview link
+		// Draft posts should use preview link.
 		$p = self::factory()->post->create(
 			array(
 				'post_status' => 'draft',
@@ -538,7 +538,7 @@ class Tests_Admin_Includes_Post extends WP_UnitTestCase {
 		);
 
 		$found = get_sample_permalink( $p );
-		$this->assertEquals( '2015-2', $found[1] );
+		$this->assertSame( '2015-2', $found[1] );
 	}
 
 	/**
@@ -554,7 +554,7 @@ class Tests_Admin_Includes_Post extends WP_UnitTestCase {
 		);
 
 		$found = get_sample_permalink( $p );
-		$this->assertEquals( '2015', $found[1] );
+		$this->assertSame( '2015', $found[1] );
 	}
 
 	/**
@@ -570,7 +570,7 @@ class Tests_Admin_Includes_Post extends WP_UnitTestCase {
 		);
 
 		$found = get_sample_permalink( $p );
-		$this->assertEquals( '11-2', $found[1] );
+		$this->assertSame( '11-2', $found[1] );
 	}
 
 	/**
@@ -586,7 +586,7 @@ class Tests_Admin_Includes_Post extends WP_UnitTestCase {
 		);
 
 		$found = get_sample_permalink( $p );
-		$this->assertEquals( '13', $found[1] );
+		$this->assertSame( '13', $found[1] );
 	}
 
 	/**
@@ -602,7 +602,7 @@ class Tests_Admin_Includes_Post extends WP_UnitTestCase {
 		);
 
 		$found = get_sample_permalink( $p );
-		$this->assertEquals( '30-2', $found[1] );
+		$this->assertSame( '30-2', $found[1] );
 	}
 
 	/**
@@ -624,7 +624,7 @@ class Tests_Admin_Includes_Post extends WP_UnitTestCase {
 		);
 
 		$found = get_sample_permalink( $p );
-		$this->assertEquals( '30-3', $found[1] );
+		$this->assertSame( '30-3', $found[1] );
 	}
 
 	/**
@@ -640,7 +640,7 @@ class Tests_Admin_Includes_Post extends WP_UnitTestCase {
 		);
 
 		$found = get_sample_permalink( $p );
-		$this->assertEquals( '32', $found[1] );
+		$this->assertSame( '32', $found[1] );
 	}
 
 	/**
@@ -656,7 +656,7 @@ class Tests_Admin_Includes_Post extends WP_UnitTestCase {
 		);
 
 		$found = get_sample_permalink( $p );
-		$this->assertEquals( '30', $found[1] );
+		$this->assertSame( '30', $found[1] );
 	}
 
 	/**
@@ -826,6 +826,7 @@ class Tests_Admin_Includes_Post extends WP_UnitTestCase {
 		$name     = 'core/test';
 		$settings = array(
 			'icon'            => 'text',
+			'category'        => 'common',
 			'render_callback' => 'foo',
 		);
 
@@ -836,7 +837,18 @@ class Tests_Admin_Includes_Post extends WP_UnitTestCase {
 		unregister_block_type( $name );
 
 		$this->assertArrayHasKey( $name, $blocks );
-		$this->assertSame( array( 'icon' => 'text' ), $blocks[ $name ] );
+		$this->assertSame(
+			array(
+				'title'       => '',
+				'description' => '',
+				'icon'        => 'text',
+				'category'    => 'common',
+				'keywords'    => array(),
+				'usesContext' => array(),
+				'styles'      => array(),
+			),
+			$blocks[ $name ]
+		);
 	}
 
 	/**
@@ -853,7 +865,7 @@ class Tests_Admin_Includes_Post extends WP_UnitTestCase {
 		wp_set_current_user( self::$admin_id );
 
 		$this->assertNotFalse( add_meta( $p ) );
-		$this->assertEquals( '', get_post_meta( $p, 'testkey', true ) );
+		$this->assertSame( '', get_post_meta( $p, 'testkey', true ) );
 	}
 
 	/**
diff --git a/tests/admin/includesSchema.php b/tests/admin/includesSchema.php
index b873576dbf..d770128bf3 100644
--- a/tests/admin/includesSchema.php
+++ b/tests/admin/includesSchema.php
@@ -23,7 +23,7 @@ class Tests_Admin_Includes_Schema extends WP_UnitTestCase {
 		$blogmeta = self::$blogmeta;
 		$sitemeta = self::$sitemeta;
 
-		require_once( ABSPATH . 'wp-admin/includes/schema.php' );
+		require_once ABSPATH . 'wp-admin/includes/schema.php';
 
 		$charset_collate  = $wpdb->get_charset_collate();
 		$max_index_length = 191;
@@ -110,7 +110,7 @@ class Tests_Admin_Includes_Schema extends WP_UnitTestCase {
 
 		$wpdb->options = $orig_options;
 
-		$this->assertEquals( $expected, $results );
+		$this->assertSame( $expected, $results );
 	}
 
 	public function data_populate_options() {
@@ -119,8 +119,8 @@ class Tests_Admin_Includes_Schema extends WP_UnitTestCase {
 				array(),
 				array(
 					// Random options to check.
-					'posts_per_rss'    => 10,
-					'rss_use_excerpt'  => 0,
+					'posts_per_rss'    => '10',
+					'rss_use_excerpt'  => '0',
 					'mailserver_url'   => 'mail.example.com',
 					'mailserver_login' => 'login@example.com',
 					'mailserver_pass'  => 'password',
@@ -128,13 +128,13 @@ class Tests_Admin_Includes_Schema extends WP_UnitTestCase {
 			),
 			array(
 				array(
-					'posts_per_rss'   => 7,
-					'rss_use_excerpt' => 1,
+					'posts_per_rss'   => '7',
+					'rss_use_excerpt' => '1',
 				),
 				array(
 					// Random options to check.
-					'posts_per_rss'    => 7,
-					'rss_use_excerpt'  => 1,
+					'posts_per_rss'    => '7',
+					'rss_use_excerpt'  => '1',
 					'mailserver_url'   => 'mail.example.com',
 					'mailserver_login' => 'login@example.com',
 					'mailserver_pass'  => 'password',
@@ -147,8 +147,8 @@ class Tests_Admin_Includes_Schema extends WP_UnitTestCase {
 				array(
 					// Random options to check.
 					'custom_option'    => '1',
-					'posts_per_rss'    => 10,
-					'rss_use_excerpt'  => 0,
+					'posts_per_rss'    => '10',
+					'rss_use_excerpt'  => '0',
 					'mailserver_url'   => 'mail.example.com',
 					'mailserver_login' => 'login@example.com',
 					'mailserver_pass'  => 'password',
@@ -159,7 +159,7 @@ class Tests_Admin_Includes_Schema extends WP_UnitTestCase {
 					'use_quicktags' => '1',
 				),
 				array(
-					// This option is on a blacklist and should never exist.
+					// This option is disallowed and should never exist.
 					'use_quicktags' => false,
 				),
 			),
@@ -200,7 +200,7 @@ class Tests_Admin_Includes_Schema extends WP_UnitTestCase {
 
 		$wpdb->blogmeta = $orig_blogmeta;
 
-		$this->assertEquals( $expected, $results );
+		$this->assertSame( $expected, $results );
 	}
 
 	public function data_populate_site_meta() {
@@ -248,7 +248,7 @@ class Tests_Admin_Includes_Schema extends WP_UnitTestCase {
 
 		$wpdb->sitemeta = $orig_sitemeta;
 
-		$this->assertEquals( $expected, $results );
+		$this->assertSame( $expected, $results );
 	}
 
 	public function data_populate_network_meta() {
@@ -258,8 +258,8 @@ class Tests_Admin_Includes_Schema extends WP_UnitTestCase {
 				array(
 					// Random meta to check.
 					'registration'      => 'none',
-					'blog_upload_space' => 100,
-					'fileupload_maxk'   => 1500,
+					'blog_upload_space' => '100',
+					'fileupload_maxk'   => '1500',
 				),
 			),
 			array(
@@ -271,8 +271,8 @@ class Tests_Admin_Includes_Schema extends WP_UnitTestCase {
 					// Random meta to check.
 					'site_name'         => 'My Great Network',
 					'registration'      => 'none',
-					'blog_upload_space' => 100,
-					'fileupload_maxk'   => 1500,
+					'blog_upload_space' => '100',
+					'fileupload_maxk'   => '1500',
 					'WPLANG'            => 'fr_FR',
 				),
 			),
@@ -284,8 +284,8 @@ class Tests_Admin_Includes_Schema extends WP_UnitTestCase {
 					// Random meta to check.
 					'custom_meta'       => '1',
 					'registration'      => 'none',
-					'blog_upload_space' => 100,
-					'fileupload_maxk'   => 1500,
+					'blog_upload_space' => '100',
+					'fileupload_maxk'   => '1500',
 				),
 			),
 		);
diff --git a/tests/admin/includesScreen.php b/tests/admin/includesScreen.php
index b972944bb6..c482ae3711 100644
--- a/tests/admin/includesScreen.php
+++ b/tests/admin/includesScreen.php
@@ -203,18 +203,18 @@ class Tests_Admin_includesScreen extends WP_UnitTestCase {
 			$GLOBALS['hook_suffix'] = $hook['path'];
 			set_current_screen();
 
-			$this->assertEquals( $screen->id, $current_screen->id, $hook_name );
-			$this->assertEquals( $screen->base, $current_screen->base, $hook_name );
+			$this->assertSame( $screen->id, $current_screen->id, $hook_name );
+			$this->assertSame( $screen->base, $current_screen->base, $hook_name );
 			if ( isset( $screen->action ) ) {
-				$this->assertEquals( $screen->action, $current_screen->action, $hook_name );
+				$this->assertSame( $screen->action, $current_screen->action, $hook_name );
 			}
 			if ( isset( $screen->post_type ) ) {
-				$this->assertEquals( $screen->post_type, $current_screen->post_type, $hook_name );
+				$this->assertSame( $screen->post_type, $current_screen->post_type, $hook_name );
 			} else {
 				$this->assertEmpty( $current_screen->post_type, $hook_name );
 			}
 			if ( isset( $screen->taxonomy ) ) {
-				$this->assertEquals( $screen->taxonomy, $current_screen->taxonomy, $hook_name );
+				$this->assertSame( $screen->taxonomy, $current_screen->taxonomy, $hook_name );
 			}
 
 			$this->assertTrue( $current_screen->in_admin() );
@@ -237,48 +237,48 @@ class Tests_Admin_includesScreen extends WP_UnitTestCase {
 
 	function test_post_type_as_hookname() {
 		$screen = convert_to_screen( 'page' );
-		$this->assertEquals( $screen->post_type, 'page' );
-		$this->assertEquals( $screen->base, 'post' );
-		$this->assertEquals( $screen->id, 'page' );
+		$this->assertSame( $screen->post_type, 'page' );
+		$this->assertSame( $screen->base, 'post' );
+		$this->assertSame( $screen->id, 'page' );
 		$this->assertTrue( $screen->is_block_editor );
 	}
 
 	function test_post_type_with_special_suffix_as_hookname() {
 		register_post_type( 'value-add' );
-		$screen = convert_to_screen( 'value-add' ); // the -add part is key.
-		$this->assertEquals( $screen->post_type, 'value-add' );
-		$this->assertEquals( $screen->base, 'post' );
-		$this->assertEquals( $screen->id, 'value-add' );
+		$screen = convert_to_screen( 'value-add' ); // The '-add' part is key.
+		$this->assertSame( $screen->post_type, 'value-add' );
+		$this->assertSame( $screen->base, 'post' );
+		$this->assertSame( $screen->id, 'value-add' );
 		$this->assertFalse( $screen->is_block_editor ); // Post types do not support `show_in_rest` by default.
 
-		$screen = convert_to_screen( 'edit-value-add' ); // the -add part is key.
-		$this->assertEquals( $screen->post_type, 'value-add' );
-		$this->assertEquals( $screen->base, 'edit' );
-		$this->assertEquals( $screen->id, 'edit-value-add' );
+		$screen = convert_to_screen( 'edit-value-add' ); // The '-add' part is key.
+		$this->assertSame( $screen->post_type, 'value-add' );
+		$this->assertSame( $screen->base, 'edit' );
+		$this->assertSame( $screen->id, 'edit-value-add' );
 		$this->assertFalse( $screen->is_block_editor ); // Post types do not support `show_in_rest` by default.
 	}
 
 	function test_taxonomy_with_special_suffix_as_hookname() {
 		register_taxonomy( 'old-or-new', 'post' );
-		$screen = convert_to_screen( 'edit-old-or-new' ); // the -new part is key.
-		$this->assertEquals( $screen->taxonomy, 'old-or-new' );
-		$this->assertEquals( $screen->base, 'edit-tags' );
-		$this->assertEquals( $screen->id, 'edit-old-or-new' );
+		$screen = convert_to_screen( 'edit-old-or-new' ); // The '-new' part is key.
+		$this->assertSame( $screen->taxonomy, 'old-or-new' );
+		$this->assertSame( $screen->base, 'edit-tags' );
+		$this->assertSame( $screen->id, 'edit-old-or-new' );
 		$this->assertFalse( $screen->is_block_editor );
 	}
 
 	function test_post_type_with_edit_prefix() {
 		register_post_type( 'edit-some-thing' );
 		$screen = convert_to_screen( 'edit-some-thing' );
-		$this->assertEquals( $screen->post_type, 'edit-some-thing' );
-		$this->assertEquals( $screen->base, 'post' );
-		$this->assertEquals( $screen->id, 'edit-some-thing' );
+		$this->assertSame( $screen->post_type, 'edit-some-thing' );
+		$this->assertSame( $screen->base, 'post' );
+		$this->assertSame( $screen->id, 'edit-some-thing' );
 		$this->assertFalse( $screen->is_block_editor ); // Post types do not support `show_in_rest` by default.
 
 		$screen = convert_to_screen( 'edit-edit-some-thing' );
-		$this->assertEquals( $screen->post_type, 'edit-some-thing' );
-		$this->assertEquals( $screen->base, 'edit' );
-		$this->assertEquals( $screen->id, 'edit-edit-some-thing' );
+		$this->assertSame( $screen->post_type, 'edit-some-thing' );
+		$this->assertSame( $screen->base, 'edit' );
+		$this->assertSame( $screen->id, 'edit-edit-some-thing' );
 		$this->assertFalse( $screen->is_block_editor ); // Post types do not support `show_in_rest` by default.
 	}
 
@@ -288,36 +288,36 @@ class Tests_Admin_includesScreen extends WP_UnitTestCase {
 
 		// Sorry, core wins here.
 		$screen = convert_to_screen( 'edit-comments' );
-		$this->assertEquals( $screen->base, 'edit-comments' );
+		$this->assertSame( $screen->base, 'edit-comments' );
 
 		// The post type wins here. convert_to_screen( $post_type ) is only relevant for meta boxes anyway.
 		$screen = convert_to_screen( 'comments' );
-		$this->assertEquals( $screen->base, 'post' );
+		$this->assertSame( $screen->base, 'post' );
 
 		// Core wins.
 		$screen = convert_to_screen( 'edit-tags' );
-		$this->assertEquals( $screen->base, 'edit-tags' );
+		$this->assertSame( $screen->base, 'edit-tags' );
 
 		$screen = convert_to_screen( 'tags' );
-		$this->assertEquals( $screen->base, 'post' );
+		$this->assertSame( $screen->base, 'post' );
 	}
 
 	function test_help_tabs() {
 		$tab      = __FUNCTION__;
 		$tab_args = array(
-			'id'       => $tab,
 			'title'    => 'Help!',
+			'id'       => $tab,
 			'content'  => 'Some content',
 			'callback' => false,
 		);
 
 		$screen = get_current_screen();
 		$screen->add_help_tab( $tab_args );
-		$this->assertEquals(
+		$this->assertSame(
 			$screen->get_help_tab( $tab ),
 			array(
-				'id'       => $tab,
 				'title'    => 'Help!',
+				'id'       => $tab,
 				'content'  => 'Some content',
 				'callback' => false,
 				'priority' => 10,
@@ -331,7 +331,7 @@ class Tests_Admin_includesScreen extends WP_UnitTestCase {
 		$this->assertNull( $screen->get_help_tab( $tab ) );
 
 		$screen->remove_help_tabs();
-		$this->assertEquals( $screen->get_help_tabs(), array() );
+		$this->assertSame( $screen->get_help_tabs(), array() );
 	}
 
 	/**
@@ -369,29 +369,29 @@ class Tests_Admin_includesScreen extends WP_UnitTestCase {
 			'id'       => $tab_4,
 			'content'  => 'some content',
 			'callback' => false,
-			// Don't include a priority
+			// Don't include a priority.
 		);
 
 		$screen = get_current_screen();
 
-		// add help tabs.
+		// Add help tabs.
 
 		$screen->add_help_tab( $tab_1_args );
-		$this->assertequals( $screen->get_help_tab( $tab_1 ), $tab_1_args );
+		$this->assertSame( $screen->get_help_tab( $tab_1 ), $tab_1_args );
 
 		$screen->add_help_tab( $tab_2_args );
-		$this->assertEquals( $screen->get_help_tab( $tab_2 ), $tab_2_args );
+		$this->assertSame( $screen->get_help_tab( $tab_2 ), $tab_2_args );
 
 		$screen->add_help_tab( $tab_3_args );
-		$this->assertEquals( $screen->get_help_tab( $tab_3 ), $tab_3_args );
+		$this->assertSame( $screen->get_help_tab( $tab_3 ), $tab_3_args );
 
 		$screen->add_help_tab( $tab_4_args );
-		// Priority is added with the default for future calls
+		// Priority is added with the default for future calls.
 		$tab_4_args['priority'] = 10;
-		$this->assertEquals( $screen->get_help_tab( $tab_4 ), $tab_4_args );
+		$this->assertSame( $screen->get_help_tab( $tab_4 ), $tab_4_args );
 
 		$tabs = $screen->get_help_tabs();
-		$this->assertEquals( 4, count( $tabs ) );
+		$this->assertSame( 4, count( $tabs ) );
 		$this->assertArrayHasKey( $tab_1, $tabs );
 		$this->assertArrayHasKey( $tab_2, $tabs );
 		$this->assertArrayHasKey( $tab_3, $tabs );
@@ -426,7 +426,7 @@ class Tests_Admin_includesScreen extends WP_UnitTestCase {
 		$this->assertSame( 0, count( $screen->get_help_tabs() ) );
 
 		$screen->remove_help_tabs();
-		$this->assertEquals( array(), $screen->get_help_tabs() );
+		$this->assertSame( array(), $screen->get_help_tabs() );
 	}
 
 	/**
@@ -443,7 +443,7 @@ class Tests_Admin_includesScreen extends WP_UnitTestCase {
 		$screen = get_current_screen();
 
 		$screen->add_option( $option, $option_args );
-		$this->assertEquals( $screen->get_option( $option ), $option_args );
+		$this->assertSame( $screen->get_option( $option ), $option_args );
 
 		$options = $screen->get_options();
 		$this->assertArrayHasKey( $option, $options );
@@ -452,7 +452,7 @@ class Tests_Admin_includesScreen extends WP_UnitTestCase {
 		$this->assertNull( $screen->get_option( $option ) );
 
 		$screen->remove_options();
-		$this->assertEquals( $screen->get_options(), array() );
+		$this->assertSame( $screen->get_options(), array() );
 	}
 
 	function test_in_admin() {
diff --git a/tests/admin/includesTemplate.php b/tests/admin/includesTemplate.php
index 7e1745125f..80a74eb4ef 100644
--- a/tests/admin/includesTemplate.php
+++ b/tests/admin/includesTemplate.php
@@ -3,47 +3,44 @@
  * @group admin
  */
 class Tests_Admin_includesTemplate extends WP_UnitTestCase {
-	function test_equal() {
-		$this->assertEquals( ' selected=\'selected\'', selected( 'foo', 'foo', false ) );
-		$this->assertEquals( ' checked=\'checked\'', checked( 'foo', 'foo', false ) );
 
-		$this->assertEquals( ' selected=\'selected\'', selected( '1', 1, false ) );
-		$this->assertEquals( ' checked=\'checked\'', checked( '1', 1, false ) );
-
-		$this->assertEquals( ' selected=\'selected\'', selected( '1', true, false ) );
-		$this->assertEquals( ' checked=\'checked\'', checked( '1', true, false ) );
-
-		$this->assertEquals( ' selected=\'selected\'', selected( 1, 1, false ) );
-		$this->assertEquals( ' checked=\'checked\'', checked( 1, 1, false ) );
-
-		$this->assertEquals( ' selected=\'selected\'', selected( 1, true, false ) );
-		$this->assertEquals( ' checked=\'checked\'', checked( 1, true, false ) );
-
-		$this->assertEquals( ' selected=\'selected\'', selected( true, true, false ) );
-		$this->assertEquals( ' checked=\'checked\'', checked( true, true, false ) );
-
-		$this->assertEquals( ' selected=\'selected\'', selected( '0', 0, false ) );
-		$this->assertEquals( ' checked=\'checked\'', checked( '0', 0, false ) );
-
-		$this->assertEquals( ' selected=\'selected\'', selected( 0, 0, false ) );
-		$this->assertEquals( ' checked=\'checked\'', checked( 0, 0, false ) );
-
-		$this->assertEquals( ' selected=\'selected\'', selected( '', false, false ) );
-		$this->assertEquals( ' checked=\'checked\'', checked( '', false, false ) );
+	/**
+	 * @ticket 51147
+	 * @dataProvider data_wp_terms_checklist_with_selected_cats
+	 */
+	public function test_wp_terms_checklist_with_selected_cats( $term_id ) {
+		$output = wp_terms_checklist(
+			0,
+			array(
+				'selected_cats' => array( $term_id ),
+				'echo'          => false,
+			)
+		);
 
-		$this->assertEquals( ' selected=\'selected\'', selected( false, false, false ) );
-		$this->assertEquals( ' checked=\'checked\'', checked( false, false, false ) );
+		$this->assertContains( "checked='checked'", $output );
 	}
 
-	function test_notequal() {
-		$this->assertEquals( '', selected( '0', '', false ) );
-		$this->assertEquals( '', checked( '0', '', false ) );
+	/**
+	 * @ticket 51147
+	 * @dataProvider data_wp_terms_checklist_with_selected_cats
+	 */
+	public function test_wp_terms_checklist_with_popular_cats( $term_id ) {
+		$output = wp_terms_checklist(
+			0,
+			array(
+				'popular_cats' => array( $term_id ),
+				'echo'         => false,
+			)
+		);
 
-		$this->assertEquals( '', selected( 0, '', false ) );
-		$this->assertEquals( '', checked( 0, '', false ) );
+		$this->assertContains( 'class="popular-category"', $output );
+	}
 
-		$this->assertEquals( '', selected( 0, false, false ) );
-		$this->assertEquals( '', checked( 0, false, false ) );
+	public function data_wp_terms_checklist_with_selected_cats() {
+		return array(
+			array( '1' ),
+			array( 1 ),
+		);
 	}
 
 	public function test_add_meta_box() {
@@ -57,7 +54,7 @@ class Tests_Admin_includesTemplate extends WP_UnitTestCase {
 	public function test_remove_meta_box() {
 		global $wp_meta_boxes;
 
-		// Add a meta boxes to remove.
+		// Add a meta box to remove.
 		add_meta_box( 'testbox1', 'Test Metabox', '__return_false', $current_screen = 'post' );
 
 		// Confirm it's there.
@@ -66,7 +63,7 @@ class Tests_Admin_includesTemplate extends WP_UnitTestCase {
 		// Remove the meta box.
 		remove_meta_box( 'testbox1', $current_screen, 'advanced' );
 
-		// Check that it was removed properly (The meta box should be set to false once that it has been removed)
+		// Check that it was removed properly (the meta box should be set to false once that it has been removed).
 		$this->assertFalse( $wp_meta_boxes[ $current_screen ]['advanced']['default']['testbox1'] );
 	}
 
@@ -76,7 +73,7 @@ class Tests_Admin_includesTemplate extends WP_UnitTestCase {
 	public function test_add_meta_box_on_multiple_screens() {
 		global $wp_meta_boxes;
 
-		// Add a meta box to three different post types
+		// Add a meta box to three different post types.
 		add_meta_box( 'testbox1', 'Test Metabox', '__return_false', array( 'post', 'comment', 'attachment' ) );
 
 		$this->assertArrayHasKey( 'testbox1', $wp_meta_boxes['post']['advanced']['default'] );
@@ -96,7 +93,7 @@ class Tests_Admin_includesTemplate extends WP_UnitTestCase {
 		// Remove meta box from posts.
 		remove_meta_box( 'testbox1', 'post', 'advanced' );
 
-		// Check that we have removed the meta boxes only from posts
+		// Check that we have removed the meta boxes only from posts.
 		$this->assertFalse( $wp_meta_boxes['post']['advanced']['default']['testbox1'] );
 		$this->assertArrayHasKey( 'testbox1', $wp_meta_boxes['comment']['advanced']['default'] );
 		$this->assertArrayHasKey( 'testbox1', $wp_meta_boxes['attachment']['advanced']['default'] );
@@ -108,11 +105,30 @@ class Tests_Admin_includesTemplate extends WP_UnitTestCase {
 		$this->assertFalse( $wp_meta_boxes['attachment']['advanced']['default']['testbox1'] );
 	}
 
+	/**
+	 * @ticket 50019
+	 */
+	public function test_add_meta_box_with_previously_removed_box_and_sorted_priority() {
+		global $wp_meta_boxes;
+
+		// Add a meta box to remove.
+		add_meta_box( 'testbox1', 'Test Metabox', '__return_false', $current_screen = 'post' );
+
+		// Remove the meta box.
+		remove_meta_box( 'testbox1', $current_screen, 'advanced' );
+
+		// Attempt to re-add the meta box with the 'sorted' priority.
+		add_meta_box( 'testbox1', null, null, $current_screen, 'advanced', 'sorted' );
+
+		// Check that the meta box was not re-added.
+		$this->assertFalse( $wp_meta_boxes[ $current_screen ]['advanced']['default']['testbox1'] );
+	}
+
 	/**
 	 * Test calling get_settings_errors() with variations on where it gets errors from.
 	 *
 	 * @ticket 42498
-	 * @covers ::get_settings_errors()
+	 * @covers ::get_settings_errors
 	 * @global array $wp_settings_errors
 	 */
 	public function test_get_settings_errors_sources() {
@@ -145,14 +161,14 @@ class Tests_Admin_includesTemplate extends WP_UnitTestCase {
 		set_transient( 'settings_errors', array( $blogname_error ) );
 		$wp_settings_errors = null;
 		add_settings_error( $blogdescription_error['setting'], $blogdescription_error['code'], $blogdescription_error['message'], $blogdescription_error['type'] );
-		$this->assertEqualSets( array( $blogname_error, $blogdescription_error ), get_settings_errors() );
+		$this->assertSameSets( array( $blogname_error, $blogdescription_error ), get_settings_errors() );
 
 		$wp_settings_errors = null;
 	}
 
 	/**
 	 * @ticket 44941
-	 * @covers ::settings_errors()
+	 * @covers ::settings_errors
 	 * @global array $wp_settings_errors
 	 * @dataProvider settings_errors_css_classes_provider
 	 */
diff --git a/tests/admin/includesTheme.php b/tests/admin/includesTheme.php
index e1cf806ab0..ca842df921 100644
--- a/tests/admin/includesTheme.php
+++ b/tests/admin/includesTheme.php
@@ -15,7 +15,7 @@ class Tests_Admin_includesTheme extends WP_UnitTestCase {
 		add_filter( 'stylesheet_root', array( $this, '_theme_root' ) );
 		add_filter( 'template_root', array( $this, '_theme_root' ) );
 
-		// clear caches
+		// Clear caches.
 		wp_clean_themes_cache();
 		unset( $GLOBALS['wp_themes'] );
 	}
@@ -31,7 +31,7 @@ class Tests_Admin_includesTheme extends WP_UnitTestCase {
 		parent::tearDown();
 	}
 
-	// replace the normal theme root dir with our premade test dir
+	// Replace the normal theme root directory with our premade test directory.
 	function _theme_root( $dir ) {
 		return $this->theme_root;
 	}
@@ -48,7 +48,7 @@ class Tests_Admin_includesTheme extends WP_UnitTestCase {
 
 		switch_theme( $theme['Template'], $theme['Stylesheet'] );
 
-		$this->assertEqualSetsWithIndex(
+		$this->assertSameSetsWithIndex(
 			array(
 				'Top Level'                           => 'template-top-level.php',
 				'Sub Dir'                             => 'subdir/template-sub-dir.php',
@@ -62,7 +62,7 @@ class Tests_Admin_includesTheme extends WP_UnitTestCase {
 
 		switch_theme( $theme['Template'], $theme['Stylesheet'] );
 
-		$this->assertEqualSetsWithIndex(
+		$this->assertSameSetsWithIndex(
 			array(
 				'Top Level'                           => 'template-top-level.php',
 				'Sub Dir'                             => 'subdir/template-sub-dir.php',
@@ -81,21 +81,21 @@ class Tests_Admin_includesTheme extends WP_UnitTestCase {
 
 		switch_theme( $theme['Template'], $theme['Stylesheet'] );
 
-		$this->assertEqualSetsWithIndex(
+		$this->assertSameSetsWithIndex(
 			array(
 				'Top Level' => 'template-top-level-post-types.php',
 				'Sub Dir'   => 'subdir/template-sub-dir-post-types.php',
 			),
 			get_page_templates( null, 'foo' )
 		);
-		$this->assertEqualSetsWithIndex(
+		$this->assertSameSetsWithIndex(
 			array(
 				'Top Level' => 'template-top-level-post-types.php',
 				'Sub Dir'   => 'subdir/template-sub-dir-post-types.php',
 			),
 			get_page_templates( null, 'post' )
 		);
-		$this->assertEquals( array(), get_page_templates( null, 'bar' ) );
+		$this->assertSame( array(), get_page_templates( null, 'bar' ) );
 	}
 
 	/**
@@ -107,7 +107,7 @@ class Tests_Admin_includesTheme extends WP_UnitTestCase {
 
 		switch_theme( $theme['Template'], $theme['Stylesheet'] );
 
-		$this->assertEqualSetsWithIndex(
+		$this->assertSameSetsWithIndex(
 			array(
 				'No Trailing Period'            => '38766/no-trailing-period-post-types.php',
 				'Trailing Period.'              => '38766/trailing-period-post-types.php',
@@ -118,7 +118,7 @@ class Tests_Admin_includesTheme extends WP_UnitTestCase {
 			),
 			get_page_templates( null, 'period' )
 		);
-		$this->assertEqualSetsWithIndex(
+		$this->assertSameSetsWithIndex(
 			array(
 				'No Trailing Period'            => '38766/no-trailing-period-post-types.php',
 				'Trailing Period.'              => '38766/trailing-period-post-types.php',
@@ -139,7 +139,7 @@ class Tests_Admin_includesTheme extends WP_UnitTestCase {
 
 		switch_theme( $theme['Template'], $theme['Stylesheet'] );
 
-		$this->assertEqualSetsWithIndex(
+		$this->assertSameSetsWithIndex(
 			array(
 				'Top Level'                  => 'template-top-level-post-types.php',
 				'Sub Dir'                    => 'subdir/template-sub-dir-post-types.php',
@@ -149,7 +149,7 @@ class Tests_Admin_includesTheme extends WP_UnitTestCase {
 			get_page_templates( null, 'foo' )
 		);
 
-		$this->assertEqualSetsWithIndex(
+		$this->assertSameSetsWithIndex(
 			array(
 				'Top Level' => 'template-top-level-post-types.php',
 				'Sub Dir'   => 'subdir/template-sub-dir-post-types.php',
@@ -157,7 +157,7 @@ class Tests_Admin_includesTheme extends WP_UnitTestCase {
 			get_page_templates( null, 'post' )
 		);
 
-		$this->assertEqualSetsWithIndex(
+		$this->assertSameSetsWithIndex(
 			array(
 				'Top Level'                           => 'template-top-level.php',
 				'Sub Dir'                             => 'subdir/template-sub-dir.php',
@@ -166,7 +166,7 @@ class Tests_Admin_includesTheme extends WP_UnitTestCase {
 			get_page_templates()
 		);
 
-		$this->assertEquals( array(), get_page_templates( null, 'bar' ) );
+		$this->assertSame( array(), get_page_templates( null, 'bar' ) );
 	}
 
 	/**
@@ -180,7 +180,7 @@ class Tests_Admin_includesTheme extends WP_UnitTestCase {
 
 		$post_templates = $theme->get_post_templates();
 
-		$this->assertEqualSetsWithIndex(
+		$this->assertSameSetsWithIndex(
 			array(
 				'template-top-level-post-types.php'       => 'Top Level',
 				'subdir/template-sub-dir-post-types.php'  => 'Sub Dir',
@@ -190,7 +190,7 @@ class Tests_Admin_includesTheme extends WP_UnitTestCase {
 			$post_templates['foo']
 		);
 
-		$this->assertEqualSetsWithIndex(
+		$this->assertSameSetsWithIndex(
 			array(
 				'template-top-level-post-types.php'      => 'Top Level',
 				'subdir/template-sub-dir-post-types.php' => 'Sub Dir',
@@ -198,7 +198,7 @@ class Tests_Admin_includesTheme extends WP_UnitTestCase {
 			$post_templates['post']
 		);
 
-		$this->assertEqualSetsWithIndex(
+		$this->assertSameSetsWithIndex(
 			array(
 				'template-top-level.php'      => 'Top Level',
 				'subdir/template-sub-dir.php' => 'Sub Dir',
diff --git a/tests/admin/includesUpdateCore.php b/tests/admin/includesUpdateCore.php
index 2eda876c39..67d750a442 100644
--- a/tests/admin/includesUpdateCore.php
+++ b/tests/admin/includesUpdateCore.php
@@ -8,7 +8,7 @@ class Tests_Admin_IncludesUpdateCore extends WP_UnitTestCase {
 	public function data_old_files() {
 		global $_old_files;
 
-		require_once( ABSPATH . 'wp-admin/includes/update-core.php' );
+		require_once ABSPATH . 'wp-admin/includes/update-core.php';
 
 		$files = $_old_files;
 
diff --git a/tests/admin/wpPrivacyRequestsTable.php b/tests/admin/wpPrivacyRequestsTable.php
index debe163862..e4823f21db 100644
--- a/tests/admin/wpPrivacyRequestsTable.php
+++ b/tests/admin/wpPrivacyRequestsTable.php
@@ -21,7 +21,7 @@ class Tests_Admin_WpPrivacyRequestsTable extends WP_UnitTestCase {
 	 *
 	 * @since 5.1.0
 	 *
-	 * @return PHPUnit_Framework_MockObject_MockObject|WP_Privacy_Requests_Table $instance Mocked class instance.
+	 * @return PHPUnit_Framework_MockObject_MockObject|WP_Privacy_Requests_Table Mocked class instance.
 	 */
 	public function get_mocked_class_instance() {
 		$args = array(
@@ -61,7 +61,7 @@ class Tests_Admin_WpPrivacyRequestsTable extends WP_UnitTestCase {
 	 * @param string      $expected Expected in SQL query.
 
 	 * @dataProvider data_test_columns_should_be_sortable
-	 * @covers WP_Privacy_Requests_Table::prepare_items()
+	 * @covers WP_Privacy_Requests_Table::prepare_items
 	 * @ticket 43960
 	 */
 	public function test_columns_should_be_sortable( $order, $orderby, $search, $expected ) {
@@ -91,7 +91,7 @@ class Tests_Admin_WpPrivacyRequestsTable extends WP_UnitTestCase {
 	 * @since 5.1.0
 	 *
 	 * @param string $request The complete SQL query.
-	 * @return string $request The complete SQL query.
+	 * @return string The complete SQL query.
 	 */
 	public function filter_posts_request( $request ) {
 		$this->sql = $request;
diff --git a/tests/adminbar.php b/tests/adminbar.php
index a9a2ed4564..760a1dec4c 100644
--- a/tests/adminbar.php
+++ b/tests/adminbar.php
@@ -15,7 +15,7 @@ class Tests_AdminBar extends WP_UnitTestCase {
 	protected static $user_ids = array();
 
 	public static function setUpBeforeClass() {
-		require_once( ABSPATH . WPINC . '/class-wp-admin-bar.php' );
+		require_once ABSPATH . WPINC . '/class-wp-admin-bar.php';
 
 		parent::setUpBeforeClass();
 	}
@@ -43,7 +43,7 @@ class Tests_AdminBar extends WP_UnitTestCase {
 
 		$nodes = $admin_bar->get_nodes();
 		$this->assertFalse( $nodes['new-content']->parent );
-		$this->assertEquals( 'new-content', $nodes['add-new-content']->parent );
+		$this->assertSame( 'new-content', $nodes['add-new-content']->parent );
 
 		_unregister_post_type( 'content' );
 	}
@@ -64,7 +64,7 @@ class Tests_AdminBar extends WP_UnitTestCase {
 		);
 
 		$node1 = $admin_bar->get_node( 'test-node' );
-		$this->assertEquals( array( 'class' => 'test-class' ), $node1->meta );
+		$this->assertSame( array( 'class' => 'test-class' ), $node1->meta );
 
 		$admin_bar->add_node(
 			array(
@@ -74,7 +74,7 @@ class Tests_AdminBar extends WP_UnitTestCase {
 		);
 
 		$node2 = $admin_bar->get_node( 'test-node' );
-		$this->assertEquals(
+		$this->assertSame(
 			array(
 				'class'     => 'test-class',
 				'some-meta' => 'value',
@@ -99,10 +99,10 @@ class Tests_AdminBar extends WP_UnitTestCase {
 		$node_user_info    = $wp_admin_bar->get_node( 'user-info' );
 		$node_edit_profile = $wp_admin_bar->get_node( 'edit-profile' );
 
-		// Site menu points to the home page instead of the admin URL
-		$this->assertEquals( home_url( '/' ), $node_site_name->href );
+		// Site menu points to the home page instead of the admin URL.
+		$this->assertSame( home_url( '/' ), $node_site_name->href );
 
-		// No profile links as the user doesn't have any permissions on the site
+		// No profile links as the user doesn't have any permissions on the site.
 		$this->assertFalse( $node_my_account->href );
 		$this->assertFalse( $node_user_info->href );
 		$this->assertNull( $node_edit_profile );
@@ -124,15 +124,15 @@ class Tests_AdminBar extends WP_UnitTestCase {
 		$node_user_info    = $wp_admin_bar->get_node( 'user-info' );
 		$node_edit_profile = $wp_admin_bar->get_node( 'edit-profile' );
 
-		// Site menu points to the admin URL
-		$this->assertEquals( admin_url( '/' ), $node_site_name->href );
+		// Site menu points to the admin URL.
+		$this->assertSame( admin_url( '/' ), $node_site_name->href );
 
 		$profile_url = admin_url( 'profile.php' );
 
-		// Profile URLs point to profile.php
-		$this->assertEquals( $profile_url, $node_my_account->href );
-		$this->assertEquals( $profile_url, $node_user_info->href );
-		$this->assertEquals( $profile_url, $node_edit_profile->href );
+		// Profile URLs point to profile.php.
+		$this->assertSame( $profile_url, $node_my_account->href );
+		$this->assertSame( $profile_url, $node_user_info->href );
+		$this->assertSame( $profile_url, $node_edit_profile->href );
 	}
 
 	/**
@@ -164,22 +164,22 @@ class Tests_AdminBar extends WP_UnitTestCase {
 		$node_user_info    = $wp_admin_bar->get_node( 'user-info' );
 		$node_edit_profile = $wp_admin_bar->get_node( 'edit-profile' );
 
-		// get primary blog
+		// Get primary blog.
 		$primary = get_active_blog_for_user( self::$editor_id );
 		$this->assertInternalType( 'object', $primary );
 
-		// No Site menu as the user isn't a member of this blog
+		// No Site menu as the user isn't a member of this blog.
 		$this->assertNull( $node_site_name );
 
 		$primary_profile_url = get_admin_url( $primary->blog_id, 'profile.php' );
 
-		// Ensure the user's primary blog is not the same as the main site
+		// Ensure the user's primary blog is not the same as the main site.
 		$this->assertNotEquals( $primary_profile_url, admin_url( 'profile.php' ) );
 
-		// Profile URLs should go to the user's primary blog
-		$this->assertEquals( $primary_profile_url, $node_my_account->href );
-		$this->assertEquals( $primary_profile_url, $node_user_info->href );
-		$this->assertEquals( $primary_profile_url, $node_edit_profile->href );
+		// Profile URLs should go to the user's primary blog.
+		$this->assertSame( $primary_profile_url, $node_my_account->href );
+		$this->assertSame( $primary_profile_url, $node_user_info->href );
+		$this->assertSame( $primary_profile_url, $node_edit_profile->href );
 
 		restore_current_blog();
 	}
@@ -203,7 +203,7 @@ class Tests_AdminBar extends WP_UnitTestCase {
 		$this->assertFalse( is_user_member_of_blog( self::$no_role_id, $blog_id ) );
 		$this->assertTrue( is_user_member_of_blog( self::$no_role_id, get_current_blog_id() ) );
 
-		// Remove `$nobody` from the current blog, so they're not a member of any blog
+		// Remove `$nobody` from the current blog, so they're not a member of any blog.
 		$removed = remove_user_from_blog( self::$no_role_id, get_current_blog_id() );
 
 		$this->assertTrue( $removed );
@@ -220,21 +220,21 @@ class Tests_AdminBar extends WP_UnitTestCase {
 		$node_user_info    = $wp_admin_bar->get_node( 'user-info' );
 		$node_edit_profile = $wp_admin_bar->get_node( 'edit-profile' );
 
-		// get primary blog
+		// Get primary blog.
 		$primary = get_active_blog_for_user( self::$no_role_id );
 		$this->assertNull( $primary );
 
-		// No Site menu as the user isn't a member of this site
+		// No Site menu as the user isn't a member of this site.
 		$this->assertNull( $node_site_name );
 
 		$user_profile_url = user_admin_url( 'profile.php' );
 
 		$this->assertNotEquals( $user_profile_url, admin_url( 'profile.php' ) );
 
-		// Profile URLs should go to the user's primary blog
-		$this->assertEquals( $user_profile_url, $node_my_account->href );
-		$this->assertEquals( $user_profile_url, $node_user_info->href );
-		$this->assertEquals( $user_profile_url, $node_edit_profile->href );
+		// Profile URLs should go to the user's primary blog.
+		$this->assertSame( $user_profile_url, $node_my_account->href );
+		$this->assertSame( $user_profile_url, $node_user_info->href );
+		$this->assertSame( $user_profile_url, $node_edit_profile->href );
 
 		restore_current_blog();
 	}
@@ -335,7 +335,7 @@ class Tests_AdminBar extends WP_UnitTestCase {
 				'<div class="ab-item ab-empty-item" tabindex="2">',
 			),
 			array(
-				// Boolean, false
+				// Boolean, false.
 				array(
 					'id'   => 'test-node',
 					'meta' => array( 'tabindex' => false ),
@@ -463,7 +463,7 @@ class Tests_AdminBar extends WP_UnitTestCase {
 		$about_node   = $wp_admin_bar->get_node( 'about' );
 
 		$this->assertNotNull( $wp_logo_node );
-		$this->assertSame( false, $wp_logo_node->href );
+		$this->assertFalse( $wp_logo_node->href );
 		$this->assertArrayHasKey( 'tabindex', $wp_logo_node->meta );
 		$this->assertSame( 0, $wp_logo_node->meta['tabindex'] );
 		$this->assertNull( $about_node );
@@ -687,7 +687,7 @@ class Tests_AdminBar extends WP_UnitTestCase {
 		$parsed_url   = wp_parse_url( $node->href );
 		$query_params = array();
 		wp_parse_str( $parsed_url['query'], $query_params );
-		$this->assertEquals( $uuid, $query_params['changeset_uuid'] );
+		$this->assertSame( $uuid, $query_params['changeset_uuid'] );
 		$this->assertNotContains( 'changeset_uuid', $query_params['url'] );
 	}
 
diff --git a/tests/ajax/AddMeta.php b/tests/ajax/AddMeta.php
index 6ca4f3a0f2..12ec710a0d 100644
--- a/tests/ajax/AddMeta.php
+++ b/tests/ajax/AddMeta.php
@@ -1,9 +1,9 @@
 <?php
 
 /**
- * Admin ajax functions to be tested
+ * Admin Ajax functions to be tested.
  */
-require_once( ABSPATH . 'wp-admin/includes/ajax-actions.php' );
+require_once ABSPATH . 'wp-admin/includes/ajax-actions.php';
 
 /**
  * Testing Add Meta AJAX functionality.
@@ -34,7 +34,7 @@ class Tests_Ajax_AddMeta extends WP_Ajax_UnitTestCase {
 			unset( $e );
 		}
 
-		$this->assertEquals( '', get_post_meta( $p, 'testkey', true ) );
+		$this->assertSame( '', get_post_meta( $p, 'testkey', true ) );
 	}
 
 	/**
@@ -66,6 +66,6 @@ class Tests_Ajax_AddMeta extends WP_Ajax_UnitTestCase {
 			unset( $e );
 		}
 
-		$this->assertEquals( '', get_post_meta( $p, 'testkey', true ) );
+		$this->assertSame( '', get_post_meta( $p, 'testkey', true ) );
 	}
 }
diff --git a/tests/ajax/Attachments.php b/tests/ajax/Attachments.php
index 79e78e7fd8..0f3b19b203 100644
--- a/tests/ajax/Attachments.php
+++ b/tests/ajax/Attachments.php
@@ -1,11 +1,11 @@
 <?php
 /**
- * Admin ajax functions to be tested
+ * Admin Ajax functions to be tested.
  */
-require_once( ABSPATH . 'wp-admin/includes/ajax-actions.php' );
+require_once ABSPATH . 'wp-admin/includes/ajax-actions.php';
 
 /**
- * Testing ajax attachment handling.
+ * Testing Ajax attachment handling.
  *
  * @group ajax
  */
@@ -14,7 +14,7 @@ class Tests_Ajax_Attachments extends WP_Ajax_UnitTestCase {
 	 * @ticket 36578
 	 */
 	public function test_wp_ajax_send_attachment_to_editor_should_return_an_image() {
-		// Become an administrator
+		// Become an administrator.
 		$post    = $_POST;
 		$user_id = self::factory()->user->create(
 			array(
@@ -32,7 +32,7 @@ class Tests_Ajax_Attachments extends WP_Ajax_UnitTestCase {
 		$upload     = wp_upload_bits( wp_basename( $filename ), null, $contents );
 		$attachment = $this->_make_attachment( $upload );
 
-		// Set up a default request
+		// Set up a default request.
 		$_POST['nonce']      = wp_create_nonce( 'media-send-to-editor' );
 		$_POST['html']       = 'Bar Baz';
 		$_POST['post_id']    = 0;
@@ -44,7 +44,7 @@ class Tests_Ajax_Attachments extends WP_Ajax_UnitTestCase {
 			'url'        => 'http://example.com/',
 		);
 
-		// Make the request
+		// Make the request.
 		try {
 			$this->_handleAjax( 'send-attachment-to-editor' );
 		} catch ( WPAjaxDieContinueException $e ) {
@@ -56,16 +56,16 @@ class Tests_Ajax_Attachments extends WP_Ajax_UnitTestCase {
 
 		$expected = get_image_send_to_editor( $attachment, '', '', 'left', 'http://example.com/', false, 'large', 'Foo bar' );
 
-		// Ensure everything is correct
+		// Ensure everything is correct.
 		$this->assertTrue( $response['success'] );
-		$this->assertEquals( $expected, $response['data'] );
+		$this->assertSame( $expected, $response['data'] );
 	}
 
 	/**
 	 * @ticket 36578
 	 */
 	public function test_wp_ajax_send_attachment_to_editor_should_return_a_link() {
-		// Become an administrator
+		// Become an administrator.
 		$post    = $_POST;
 		$user_id = self::factory()->user->create(
 			array(
@@ -83,7 +83,7 @@ class Tests_Ajax_Attachments extends WP_Ajax_UnitTestCase {
 		$upload     = wp_upload_bits( wp_basename( $filename ), null, $contents );
 		$attachment = $this->_make_attachment( $upload );
 
-		// Set up a default request
+		// Set up a default request.
 		$_POST['nonce']      = wp_create_nonce( 'media-send-to-editor' );
 		$_POST['html']       = 'Bar Baz';
 		$_POST['post_id']    = 0;
@@ -93,7 +93,7 @@ class Tests_Ajax_Attachments extends WP_Ajax_UnitTestCase {
 			'url'        => get_attachment_link( $attachment ),
 		);
 
-		// Make the request
+		// Make the request.
 		try {
 			$this->_handleAjax( 'send-attachment-to-editor' );
 		} catch ( WPAjaxDieContinueException $e ) {
@@ -109,8 +109,8 @@ class Tests_Ajax_Attachments extends WP_Ajax_UnitTestCase {
 			$attachment
 		);
 
-		// Ensure everything is correct
+		// Ensure everything is correct.
 		$this->assertTrue( $response['success'] );
-		$this->assertEquals( $expected, $response['data'] );
+		$this->assertSame( $expected, $response['data'] );
 	}
 }
diff --git a/tests/ajax/Autosave.php b/tests/ajax/Autosave.php
index 14329c036d..9e53284516 100644
--- a/tests/ajax/Autosave.php
+++ b/tests/ajax/Autosave.php
@@ -1,12 +1,12 @@
 <?php
 
 /**
- * Admin ajax functions to be tested
+ * Admin Ajax functions to be tested.
  */
-require_once( ABSPATH . 'wp-admin/includes/ajax-actions.php' );
+require_once ABSPATH . 'wp-admin/includes/ajax-actions.php';
 
 /**
- * Testing ajax save draft functionality
+ * Testing Ajax save draft functionality.
  *
  * @package    WordPress
  * @subpackage UnitTests
@@ -39,24 +39,22 @@ class Tests_Ajax_Autosave extends WP_Ajax_UnitTestCase {
 	}
 
 	/**
-	 * Set up the test fixture
+	 * Sets up the test fixture.
 	 */
 	public function setUp() {
 		parent::setUp();
-		// Set a user so the $post has 'post_author'
+		// Set a user so the $post has 'post_author'.
 		wp_set_current_user( self::$admin_id );
 	}
 
 	/**
-	 * Test autosaving a post
-	 *
-	 * @return void
+	 * Tests autosaving a post.
 	 */
 	public function test_autosave_post() {
-		// The original post_author
+		// The original post_author.
 		wp_set_current_user( self::$admin_id );
 
-		// Set up the $_POST request
+		// Set up the $_POST request.
 		$md5   = md5( uniqid() );
 		$_POST = array(
 			'action' => 'heartbeat',
@@ -71,41 +69,39 @@ class Tests_Ajax_Autosave extends WP_Ajax_UnitTestCase {
 			),
 		);
 
-		// Make the request
+		// Make the request.
 		try {
 			$this->_handleAjax( 'heartbeat' );
 		} catch ( WPAjaxDieContinueException $e ) {
 			unset( $e );
 		}
 
-		// Get the response, it is in heartbeat's response
+		// Get the response, it is in heartbeat's response.
 		$response = json_decode( $this->_last_response, true );
 
-		// Ensure everything is correct
+		// Ensure everything is correct.
 		$this->assertNotEmpty( $response['wp_autosave'] );
 		$this->assertTrue( $response['wp_autosave']['success'] );
 
-		// Check that the edit happened
+		// Check that the edit happened.
 		$post = get_post( self::$post_id );
 		$this->assertGreaterThanOrEqual( 0, strpos( self::$post->post_content, $md5 ) );
 	}
 
 	/**
-	 * Test autosaving a locked post
-	 *
-	 * @return void
+	 * Tests autosaving a locked post.
 	 */
 	public function test_autosave_locked_post() {
-		// Lock the post to another user
+		// Lock the post to another user.
 		wp_set_current_user( self::$editor_id );
 		wp_set_post_lock( self::$post_id );
 
 		wp_set_current_user( self::$admin_id );
 
-		// Ensure post is locked
+		// Ensure post is locked.
 		$this->assertEquals( self::$editor_id, wp_check_post_lock( self::$post_id ) );
 
-		// Set up the $_POST request
+		// Set up the $_POST request.
 		$md5   = md5( uniqid() );
 		$_POST = array(
 			'action' => 'heartbeat',
@@ -120,7 +116,7 @@ class Tests_Ajax_Autosave extends WP_Ajax_UnitTestCase {
 			),
 		);
 
-		// Make the request
+		// Make the request.
 		try {
 			$this->_handleAjax( 'heartbeat' );
 		} catch ( WPAjaxDieContinueException $e ) {
@@ -129,30 +125,28 @@ class Tests_Ajax_Autosave extends WP_Ajax_UnitTestCase {
 
 		$response = json_decode( $this->_last_response, true );
 
-		// Ensure everything is correct
+		// Ensure everything is correct.
 		$this->assertNotEmpty( $response['wp_autosave'] );
 		$this->assertTrue( $response['wp_autosave']['success'] );
 
-		// Check that the original post was NOT edited
+		// Check that the original post was NOT edited.
 		$post = get_post( self::$post_id );
 		$this->assertFalse( strpos( $post->post_content, $md5 ) );
 
-		// Check if the autosave post was created
+		// Check if the autosave post was created.
 		$autosave = wp_get_post_autosave( self::$post_id, get_current_user_id() );
 		$this->assertNotEmpty( $autosave );
 		$this->assertGreaterThanOrEqual( 0, strpos( $autosave->post_content, $md5 ) );
 	}
 
 	/**
-	 * Test with an invalid nonce
-	 *
-	 * @return void
+	 * Tests with an invalid nonce.
 	 */
 	public function test_with_invalid_nonce() {
 
 		wp_set_current_user( self::$admin_id );
 
-		// Set up the $_POST request
+		// Set up the $_POST request.
 		$_POST = array(
 			'action' => 'heartbeat',
 			'_nonce' => wp_create_nonce( 'heartbeat-nonce' ),
@@ -164,7 +158,7 @@ class Tests_Ajax_Autosave extends WP_Ajax_UnitTestCase {
 			),
 		);
 
-		// Make the request
+		// Make the request.
 		try {
 			$this->_handleAjax( 'heartbeat' );
 		} catch ( WPAjaxDieContinueException $e ) {
diff --git a/tests/ajax/Compression.php b/tests/ajax/Compression.php
index 6196db71f9..8e42a1e66d 100644
--- a/tests/ajax/Compression.php
+++ b/tests/ajax/Compression.php
@@ -1,12 +1,12 @@
 <?php
 
 /**
- * Admin ajax functions to be tested
+ * Admin Ajax functions to be tested.
  */
-require_once( ABSPATH . 'wp-admin/includes/ajax-actions.php' );
+require_once ABSPATH . 'wp-admin/includes/ajax-actions.php';
 
 /**
- * Testing ajax compression test functionality
+ * Testing Ajax compression test functionality.
  *
  * @package    WordPress
  * @subpackage UnitTests
@@ -21,10 +21,10 @@ class Tests_Ajax_CompressionTest extends WP_Ajax_UnitTestCase {
 	public function test_logged_out() {
 		$this->logout();
 
-		// Set up a default request
+		// Set up a default request.
 		$_GET['test'] = 1;
 
-		// Make the request
+		// Make the request.
 		$this->setExpectedException( 'WPAjaxDieStopException', '-1' );
 		$this->_handleAjax( 'wp-compression-test' );
 	}
@@ -34,20 +34,20 @@ class Tests_Ajax_CompressionTest extends WP_Ajax_UnitTestCase {
 	 */
 	public function test_text() {
 
-		// Become an administrator
+		// Become an administrator.
 		$this->_setRole( 'administrator' );
 
-		// Set up a default request
+		// Set up a default request.
 		$_GET['test'] = 1;
 
-		// Make the request
+		// Make the request.
 		try {
 			$this->_handleAjax( 'wp-compression-test' );
 		} catch ( WPAjaxDieContinueException $e ) {
 			unset( $e );
 		}
 
-		// Ensure we found the right match
+		// Ensure we found the right match.
 		$this->assertContains( 'wpCompressionTest', $this->_last_response );
 	}
 
@@ -60,21 +60,21 @@ class Tests_Ajax_CompressionTest extends WP_Ajax_UnitTestCase {
 			$this->fail( 'gzdeflate function not available' );
 		}
 
-		// Become an administrator
+		// Become an administrator.
 		$this->_setRole( 'administrator' );
 
-		// Set up a default request
+		// Set up a default request.
 		$_GET['test']                    = 2;
 		$_SERVER['HTTP_ACCEPT_ENCODING'] = 'deflate';
 
-		// Make the request
+		// Make the request.
 		try {
 			$this->_handleAjax( 'wp-compression-test' );
 		} catch ( WPAjaxDieContinueException $e ) {
 			unset( $e );
 		}
 
-		// Ensure we found the right match
+		// Ensure we found the right match.
 		$this->assertContains( 'wpCompressionTest', gzinflate( $this->_last_response ) );
 	}
 
@@ -87,21 +87,21 @@ class Tests_Ajax_CompressionTest extends WP_Ajax_UnitTestCase {
 			$this->fail( 'gzencode function not available' );
 		}
 
-		// Become an administrator
+		// Become an administrator.
 		$this->_setRole( 'administrator' );
 
-		// Set up a default request
+		// Set up a default request.
 		$_GET['test']                    = 2;
 		$_SERVER['HTTP_ACCEPT_ENCODING'] = 'gzip';
 
-		// Make the request
+		// Make the request.
 		try {
 			$this->_handleAjax( 'wp-compression-test' );
 		} catch ( WPAjaxDieContinueException $e ) {
 			unset( $e );
 		}
 
-		// Ensure we found the right match
+		// Ensure we found the right match.
 		$this->assertContains( 'wpCompressionTest', $this->_gzdecode( $this->_last_response ) );
 	}
 
@@ -110,14 +110,14 @@ class Tests_Ajax_CompressionTest extends WP_Ajax_UnitTestCase {
 	 */
 	public function test_unknown_encoding() {
 
-		// Become an administrator
+		// Become an administrator.
 		$this->_setRole( 'administrator' );
 
-		// Set up a default request
+		// Set up a default request.
 		$_GET['test']                    = 2;
 		$_SERVER['HTTP_ACCEPT_ENCODING'] = 'unknown';
 
-		// Make the request
+		// Make the request.
 		$this->setExpectedException( 'WPAjaxDieStopException', '-1' );
 		$this->_handleAjax( 'wp-compression-test' );
 	}
@@ -127,37 +127,37 @@ class Tests_Ajax_CompressionTest extends WP_Ajax_UnitTestCase {
 	 */
 	public function test_set_yes() {
 
-		// Become an administrator
+		// Become an administrator.
 		$this->_setRole( 'administrator' );
 
-		// Set up a default request
+		// Set up a default request.
 		$_GET['test'] = 'yes';
 
-		// Set the option to false
+		// Set the option to false.
 		update_site_option( 'can_compress_scripts', 0 );
 
-		// Make the request
+		// Make the request.
 		try {
 			$this->_handleAjax( 'wp-compression-test' );
 		} catch ( WPAjaxDieStopException $e ) {
 			unset( $e );
 		}
 
-		// Check the site option is not changed due to lack of nonce
-		$this->assertEquals( 0, get_site_option( 'can_compress_scripts' ) );
+		// Check the site option is not changed due to lack of nonce.
+		$this->assertSame( 0, get_site_option( 'can_compress_scripts' ) );
 
-		// Add a nonce
+		// Add a nonce.
 		$_GET['_ajax_nonce'] = wp_create_nonce( 'update_can_compress_scripts' );
 
-		// Retry the request
+		// Retry the request.
 		try {
 			$this->_handleAjax( 'wp-compression-test' );
 		} catch ( WPAjaxDieStopException $e ) {
 			unset( $e );
 		}
 
-		// Check the site option is changed
-		$this->assertEquals( 1, get_site_option( 'can_compress_scripts' ) );
+		// Check the site option is changed.
+		$this->assertSame( 1, get_site_option( 'can_compress_scripts' ) );
 	}
 
 	/**
@@ -165,37 +165,37 @@ class Tests_Ajax_CompressionTest extends WP_Ajax_UnitTestCase {
 	 */
 	public function test_set_no() {
 
-		// Become an administrator
+		// Become an administrator.
 		$this->_setRole( 'administrator' );
 
-		// Set up a default request
+		// Set up a default request.
 		$_GET['test'] = 'no';
 
-		// Set the option to true
+		// Set the option to true.
 		update_site_option( 'can_compress_scripts', 1 );
 
-		// Make the request
+		// Make the request.
 		try {
 			$this->_handleAjax( 'wp-compression-test' );
 		} catch ( WPAjaxDieStopException $e ) {
 			unset( $e );
 		}
 
-		// Check the site option is not changed due to lack of nonce
-		$this->assertEquals( 1, get_site_option( 'can_compress_scripts' ) );
+		// Check the site option is not changed due to lack of nonce.
+		$this->assertSame( 1, get_site_option( 'can_compress_scripts' ) );
 
-		// Add a nonce
+		// Add a nonce.
 		$_GET['_ajax_nonce'] = wp_create_nonce( 'update_can_compress_scripts' );
 
-		// Retry the request
+		// Retry the request.
 		try {
 			$this->_handleAjax( 'wp-compression-test' );
 		} catch ( WPAjaxDieStopException $e ) {
 			unset( $e );
 		}
 
-		// Check the site option is changed
-		$this->assertEquals( 0, get_site_option( 'can_compress_scripts' ) );
+		// Check the site option is changed.
+		$this->assertSame( 0, get_site_option( 'can_compress_scripts' ) );
 	}
 
 	/**
@@ -206,19 +206,19 @@ class Tests_Ajax_CompressionTest extends WP_Ajax_UnitTestCase {
 	 */
 	protected function _gzdecode( $encoded_data ) {
 
-		// Save the encoded data to a temp file
+		// Save the encoded data to a temp file.
 		$file = wp_tempnam( 'gzdecode' );
 		file_put_contents( $file, $encoded_data );
 
-		// Flush it to the output buffer and delete the temp file
+		// Flush it to the output buffer and delete the temp file.
 		ob_start();
 		readgzfile( $file );
 		unlink( $file );
 
-		// Save the data stop buffering
+		// Save the data stop buffering.
 		$data = ob_get_clean();
 
-		// Done
+		// Done.
 		return $data;
 	}
 }
diff --git a/tests/ajax/CustomizeManager.php b/tests/ajax/CustomizeManager.php
index 920ae3c9d5..6955097a30 100644
--- a/tests/ajax/CustomizeManager.php
+++ b/tests/ajax/CustomizeManager.php
@@ -1,6 +1,6 @@
 <?php
 /**
- * Testing ajax customize manager functionality
+ * Testing Ajax customize manager functionality.
  *
  * @package    WordPress
  * @subpackage UnitTests
@@ -103,7 +103,7 @@ class Tests_Ajax_CustomizeManager extends WP_Ajax_UnitTestCase {
 	 * Test WP_Customize_Manager::save().
 	 *
 	 * @ticket 30937
-	 * @covers WP_Customize_Manager::save()
+	 * @covers WP_Customize_Manager::save
 	 */
 	function test_save_failures() {
 		global $wp_customize;
@@ -115,7 +115,7 @@ class Tests_Ajax_CustomizeManager extends WP_Ajax_UnitTestCase {
 		wp_set_current_user( 0 );
 		$this->make_ajax_call( 'customize_save' );
 		$this->assertFalse( $this->_last_response_parsed['success'] );
-		$this->assertEquals( 'unauthenticated', $this->_last_response_parsed['data'] );
+		$this->assertSame( 'unauthenticated', $this->_last_response_parsed['data'] );
 
 		// Unauthorized.
 		wp_set_current_user( self::$subscriber_user_id );
@@ -141,7 +141,7 @@ class Tests_Ajax_CustomizeManager extends WP_Ajax_UnitTestCase {
 		$_REQUEST['nonce'] = $nonce;
 		$this->make_ajax_call( 'customize_save' );
 		$this->assertFalse( $this->_last_response_parsed['success'] );
-		$this->assertEquals( 'not_preview', $this->_last_response_parsed['data'] );
+		$this->assertSame( 'not_preview', $this->_last_response_parsed['data'] );
 
 		// Bad nonce.
 		$_POST['nonce']    = 'bad';
@@ -150,7 +150,7 @@ class Tests_Ajax_CustomizeManager extends WP_Ajax_UnitTestCase {
 		$wp_customize->setup_theme();
 		$this->make_ajax_call( 'customize_save' );
 		$this->assertFalse( $this->_last_response_parsed['success'] );
-		$this->assertEquals( 'invalid_nonce', $this->_last_response_parsed['data'] );
+		$this->assertSame( 'invalid_nonce', $this->_last_response_parsed['data'] );
 
 		// User cannot create.
 		$nonce                            = wp_create_nonce( 'save-customize_' . $wp_customize->get_stylesheet() );
@@ -161,7 +161,7 @@ class Tests_Ajax_CustomizeManager extends WP_Ajax_UnitTestCase {
 		$post_type_obj->cap->create_posts = 'create_customize_changesets';
 		$this->make_ajax_call( 'customize_save' );
 		$this->assertFalse( $this->_last_response_parsed['success'] );
-		$this->assertEquals( 'cannot_create_changeset_post', $this->_last_response_parsed['data'] );
+		$this->assertSame( 'cannot_create_changeset_post', $this->_last_response_parsed['data'] );
 		$this->overridden_caps[ $post_type_obj->cap->create_posts ] = true;
 		$this->make_ajax_call( 'customize_save' );
 		$this->assertTrue( $this->_last_response_parsed['success'] );
@@ -172,7 +172,7 @@ class Tests_Ajax_CustomizeManager extends WP_Ajax_UnitTestCase {
 		$wp_customize->save_changeset_post( array( 'status' => 'publish' ) );
 		$this->make_ajax_call( 'customize_save' );
 		$this->assertFalse( $this->_last_response_parsed['success'] );
-		$this->assertEquals( 'changeset_already_published', $this->_last_response_parsed['data']['code'] );
+		$this->assertSame( 'changeset_already_published', $this->_last_response_parsed['data']['code'] );
 		wp_update_post(
 			array(
 				'ID'          => $wp_customize->changeset_post_id(),
@@ -185,7 +185,7 @@ class Tests_Ajax_CustomizeManager extends WP_Ajax_UnitTestCase {
 		$post_type_obj->cap->edit_post = 'edit_customize_changesets';
 		$this->make_ajax_call( 'customize_save' );
 		$this->assertFalse( $this->_last_response_parsed['success'] );
-		$this->assertEquals( 'cannot_edit_changeset_post', $this->_last_response_parsed['data'] );
+		$this->assertSame( 'cannot_edit_changeset_post', $this->_last_response_parsed['data'] );
 		$this->overridden_caps[ $post_type_obj->cap->edit_post ] = true;
 		$this->make_ajax_call( 'customize_save' );
 		$this->assertTrue( $this->_last_response_parsed['success'] );
@@ -195,14 +195,14 @@ class Tests_Ajax_CustomizeManager extends WP_Ajax_UnitTestCase {
 		$_POST['customize_changeset_data'] = '[MALFORMED]';
 		$this->make_ajax_call( 'customize_save' );
 		$this->assertFalse( $this->_last_response_parsed['success'] );
-		$this->assertEquals( 'invalid_customize_changeset_data', $this->_last_response_parsed['data'] );
+		$this->assertSame( 'invalid_customize_changeset_data', $this->_last_response_parsed['data'] );
 
 		// Bad customize_changeset_status.
 		$_POST['customize_changeset_data']   = '{}';
 		$_POST['customize_changeset_status'] = 'unrecognized';
 		$this->make_ajax_call( 'customize_save' );
 		$this->assertFalse( $this->_last_response_parsed['success'] );
-		$this->assertEquals( 'bad_customize_changeset_status', $this->_last_response_parsed['data'] );
+		$this->assertSame( 'bad_customize_changeset_status', $this->_last_response_parsed['data'] );
 
 		// Disallowed publish posts if not allowed.
 		$post_type_obj                       = get_post_type_object( 'customize_changeset' );
@@ -210,11 +210,11 @@ class Tests_Ajax_CustomizeManager extends WP_Ajax_UnitTestCase {
 		$_POST['customize_changeset_status'] = 'publish';
 		$this->make_ajax_call( 'customize_save' );
 		$this->assertFalse( $this->_last_response_parsed['success'] );
-		$this->assertEquals( 'changeset_publish_unauthorized', $this->_last_response_parsed['data'] );
+		$this->assertSame( 'changeset_publish_unauthorized', $this->_last_response_parsed['data'] );
 		$_POST['customize_changeset_status'] = 'future';
 		$this->make_ajax_call( 'customize_save' );
 		$this->assertFalse( $this->_last_response_parsed['success'] );
-		$this->assertEquals( 'changeset_publish_unauthorized', $this->_last_response_parsed['data'] );
+		$this->assertSame( 'changeset_publish_unauthorized', $this->_last_response_parsed['data'] );
 		$post_type_obj->cap->publish_posts = 'customize'; // Restore.
 
 		// Validate date.
@@ -222,11 +222,11 @@ class Tests_Ajax_CustomizeManager extends WP_Ajax_UnitTestCase {
 		$_POST['customize_changeset_date']   = 'BAD DATE';
 		$this->make_ajax_call( 'customize_save' );
 		$this->assertFalse( $this->_last_response_parsed['success'] );
-		$this->assertEquals( 'bad_customize_changeset_date', $this->_last_response_parsed['data'] );
+		$this->assertSame( 'bad_customize_changeset_date', $this->_last_response_parsed['data'] );
 		$_POST['customize_changeset_date'] = '2010-01-01 00:00:00';
 		$this->make_ajax_call( 'customize_save' );
 		$this->assertFalse( $this->_last_response_parsed['success'] );
-		$this->assertEquals( 'not_future_date', $this->_last_response_parsed['data']['code'] );
+		$this->assertSame( 'not_future_date', $this->_last_response_parsed['data']['code'] );
 		$_POST['customize_changeset_date'] = ( gmdate( 'Y' ) + 1 ) . '-01-01 00:00:00';
 		$this->make_ajax_call( 'customize_save' );
 		$this->assertTrue( $this->_last_response_parsed['success'] );
@@ -234,7 +234,7 @@ class Tests_Ajax_CustomizeManager extends WP_Ajax_UnitTestCase {
 		$_POST['customize_changeset_date']   = '+10 minutes';
 		$this->make_ajax_call( 'customize_save' );
 		$this->assertTrue( $this->_last_response_parsed['success'] );
-		$this->assertEquals( 'future', get_post_status( $wp_customize->changeset_post_id() ) );
+		$this->assertSame( 'future', get_post_status( $wp_customize->changeset_post_id() ) );
 		wp_update_post(
 			array(
 				'ID'          => $wp_customize->changeset_post_id(),
@@ -270,7 +270,7 @@ class Tests_Ajax_CustomizeManager extends WP_Ajax_UnitTestCase {
 	 * Test WP_Customize_Manager::save().
 	 *
 	 * @ticket 30937
-	 * @covers WP_Customize_Manager::save()
+	 * @covers WP_Customize_Manager::save
 	 */
 	function test_save_success_publish_create() {
 		$wp_customize = $this->set_up_valid_state();
@@ -288,18 +288,18 @@ class Tests_Ajax_CustomizeManager extends WP_Ajax_UnitTestCase {
 		$this->assertTrue( $this->_last_response_parsed['success'] );
 		$this->assertInternalType( 'array', $this->_last_response_parsed['data'] );
 
-		$this->assertEquals( 'publish', $this->_last_response_parsed['data']['changeset_status'] );
+		$this->assertSame( 'publish', $this->_last_response_parsed['data']['changeset_status'] );
 		$this->assertArrayHasKey( 'next_changeset_uuid', $this->_last_response_parsed['data'] );
 		$this->assertTrue( wp_is_uuid( $this->_last_response_parsed['data']['next_changeset_uuid'], 4 ) );
-		$this->assertEquals( 'Success Changeset', get_post( $wp_customize->changeset_post_id() )->post_title );
-		$this->assertEquals( 'Successful Site Title', get_option( 'blogname' ) );
+		$this->assertSame( 'Success Changeset', get_post( $wp_customize->changeset_post_id() )->post_title );
+		$this->assertSame( 'Successful Site Title', get_option( 'blogname' ) );
 	}
 
 	/**
 	 * Test WP_Customize_Manager::save().
 	 *
 	 * @ticket 30937
-	 * @covers WP_Customize_Manager::save()
+	 * @covers WP_Customize_Manager::save
 	 */
 	function test_save_success_publish_edit() {
 		$uuid = wp_generate_uuid4();
@@ -327,18 +327,18 @@ class Tests_Ajax_CustomizeManager extends WP_Ajax_UnitTestCase {
 		$this->assertTrue( $this->_last_response_parsed['success'] );
 		$this->assertInternalType( 'array', $this->_last_response_parsed['data'] );
 
-		$this->assertEquals( 'publish', $this->_last_response_parsed['data']['changeset_status'] );
+		$this->assertSame( 'publish', $this->_last_response_parsed['data']['changeset_status'] );
 		$this->assertArrayHasKey( 'next_changeset_uuid', $this->_last_response_parsed['data'] );
 		$this->assertTrue( wp_is_uuid( $this->_last_response_parsed['data']['next_changeset_uuid'], 4 ) );
-		$this->assertEquals( 'New Site Title', get_option( 'blogname' ) );
-		$this->assertEquals( 'Published', get_post( $post_id )->post_title );
+		$this->assertSame( 'New Site Title', get_option( 'blogname' ) );
+		$this->assertSame( 'Published', get_post( $post_id )->post_title );
 	}
 
 	/**
 	 * Test WP_Customize_Manager::save().
 	 *
 	 * @ticket 38943
-	 * @covers WP_Customize_Manager::save()
+	 * @covers WP_Customize_Manager::save
 	 */
 	function test_success_save_post_date() {
 		$uuid         = wp_generate_uuid4();
@@ -368,7 +368,7 @@ class Tests_Ajax_CustomizeManager extends WP_Ajax_UnitTestCase {
 		$this->assertTrue( $this->_last_response_parsed['success'] );
 		$this->assertArrayHasKey( 'changeset_date', $this->_last_response_parsed['data'] );
 		$changeset_post_schedule = get_post( $post_id );
-		$this->assertEquals( $future_date, $changeset_post_schedule->post_date );
+		$this->assertSame( $future_date, $changeset_post_schedule->post_date );
 
 		// Success future changeset change to draft keeping existing date.
 		unset( $_POST['customize_changeset_date'] );
@@ -377,7 +377,7 @@ class Tests_Ajax_CustomizeManager extends WP_Ajax_UnitTestCase {
 		$this->assertTrue( $this->_last_response_parsed['success'] );
 		$this->assertArrayNotHasKey( 'changeset_date', $this->_last_response_parsed['data'] );
 		$changeset_post_draft = get_post( $post_id );
-		$this->assertEquals( $future_date, $changeset_post_draft->post_date );
+		$this->assertSame( $future_date, $changeset_post_draft->post_date );
 
 		// Success if date is not passed with schedule changeset and stored changeset have future date.
 		$_POST['customize_changeset_status'] = 'future';
@@ -385,7 +385,7 @@ class Tests_Ajax_CustomizeManager extends WP_Ajax_UnitTestCase {
 		$this->assertTrue( $this->_last_response_parsed['success'] );
 		$this->assertArrayHasKey( 'changeset_date', $this->_last_response_parsed['data'] );
 		$changeset_post_schedule = get_post( $post_id );
-		$this->assertEquals( $future_date, $changeset_post_schedule->post_date );
+		$this->assertSame( $future_date, $changeset_post_schedule->post_date );
 		// Success if draft with past date.
 		$now = current_time( 'mysql' );
 		wp_update_post(
@@ -402,7 +402,7 @@ class Tests_Ajax_CustomizeManager extends WP_Ajax_UnitTestCase {
 		unset( $_POST['customize_changeset_date'] );
 		$this->make_ajax_call( 'customize_save' );
 		$this->assertFalse( $this->_last_response_parsed['success'] );
-		$this->assertEquals( 'not_future_date', $this->_last_response_parsed['data']['code'] );
+		$this->assertSame( 'not_future_date', $this->_last_response_parsed['data']['code'] );
 
 		// Success publish changeset reset date to current.
 		wp_update_post(
@@ -423,11 +423,11 @@ class Tests_Ajax_CustomizeManager extends WP_Ajax_UnitTestCase {
 		$this->assertNotEquals( $future_date, $changeset_post_publish->post_date );
 
 		// Check response when trying to update an already-published post.
-		$this->assertEquals( 'trash', get_post_status( $post_id ) );
+		$this->assertSame( 'trash', get_post_status( $post_id ) );
 		$_POST['customize_changeset_status'] = 'publish';
 		$this->make_ajax_call( 'customize_save' );
 		$this->assertFalse( $this->_last_response_parsed['success'] );
-		$this->assertEquals( 'changeset_already_published', $this->_last_response_parsed['data']['code'] );
+		$this->assertSame( 'changeset_already_published', $this->_last_response_parsed['data']['code'] );
 		$this->assertArrayHasKey( 'next_changeset_uuid', $this->_last_response_parsed['data'] );
 		$this->assertTrue( wp_is_uuid( $this->_last_response_parsed['data']['next_changeset_uuid'], 4 ) );
 	}
@@ -436,7 +436,7 @@ class Tests_Ajax_CustomizeManager extends WP_Ajax_UnitTestCase {
 	 * Test WP_Customize_Manager::save().
 	 *
 	 * @ticket 39896
-	 * @covers WP_Customize_Manager::save()
+	 * @covers WP_Customize_Manager::save
 	 */
 	public function test_save_autosave() {
 		$uuid = wp_generate_uuid4();
@@ -470,7 +470,7 @@ class Tests_Ajax_CustomizeManager extends WP_Ajax_UnitTestCase {
 		$_POST['customize_changeset_autosave'] = 'on';
 		$this->make_ajax_call( 'customize_save' );
 		$this->assertTrue( $this->_last_response_parsed['success'] );
-		$this->assertEquals( 'draft', $this->_last_response_parsed['data']['changeset_status'] );
+		$this->assertSame( 'draft', $this->_last_response_parsed['data']['changeset_status'] );
 		$autosave_revision = wp_get_post_autosave( $post_id );
 		$this->assertInstanceOf( 'WP_Post', $autosave_revision );
 
@@ -482,7 +482,7 @@ class Tests_Ajax_CustomizeManager extends WP_Ajax_UnitTestCase {
 	 * Test request for trashing a changeset.
 	 *
 	 * @ticket 39896
-	 * @covers WP_Customize_Manager::handle_changeset_trash_request()
+	 * @covers WP_Customize_Manager::handle_changeset_trash_request
 	 */
 	public function test_handle_changeset_trash_request() {
 		$uuid         = wp_generate_uuid4();
@@ -490,7 +490,7 @@ class Tests_Ajax_CustomizeManager extends WP_Ajax_UnitTestCase {
 
 		$this->make_ajax_call( 'customize_trash' );
 		$this->assertFalse( $this->_last_response_parsed['success'] );
-		$this->assertEquals( 'invalid_nonce', $this->_last_response_parsed['data']['code'] );
+		$this->assertSame( 'invalid_nonce', $this->_last_response_parsed['data']['code'] );
 
 		$nonce             = wp_create_nonce( 'trash_customize_changeset' );
 		$_POST['nonce']    = $nonce;
@@ -498,7 +498,7 @@ class Tests_Ajax_CustomizeManager extends WP_Ajax_UnitTestCase {
 		$_REQUEST['nonce'] = $nonce;
 		$this->make_ajax_call( 'customize_trash' );
 		$this->assertFalse( $this->_last_response_parsed['success'] );
-		$this->assertEquals( 'non_existent_changeset', $this->_last_response_parsed['data']['code'] );
+		$this->assertSame( 'non_existent_changeset', $this->_last_response_parsed['data']['code'] );
 
 		$wp_customize->register_controls(); // And settings too.
 		$wp_customize->set_post_value( 'blogname', 'HELLO' );
@@ -511,9 +511,19 @@ class Tests_Ajax_CustomizeManager extends WP_Ajax_UnitTestCase {
 		add_filter( 'map_meta_cap', array( $this, 'return_do_not_allow' ) );
 		$this->make_ajax_call( 'customize_trash' );
 		$this->assertFalse( $this->_last_response_parsed['success'] );
-		$this->assertEquals( 'changeset_trash_unauthorized', $this->_last_response_parsed['data']['code'] );
+		$this->assertSame( 'changeset_trash_unauthorized', $this->_last_response_parsed['data']['code'] );
 		remove_filter( 'map_meta_cap', array( $this, 'return_do_not_allow' ) );
 
+		$lock_user_id  = static::factory()->user->create( array( 'role' => 'administrator' ) );
+		$previous_user = get_current_user_id();
+		wp_set_current_user( $lock_user_id );
+		$wp_customize->set_changeset_lock( $wp_customize->changeset_post_id() );
+		wp_set_current_user( $previous_user );
+		$this->make_ajax_call( 'customize_trash' );
+		$this->assertFalse( $this->_last_response_parsed['success'] );
+		$this->assertSame( 'changeset_locked', $this->_last_response_parsed['data']['code'] );
+		delete_post_meta( $wp_customize->changeset_post_id(), '_edit_lock' );
+
 		wp_update_post(
 			array(
 				'ID'          => $wp_customize->changeset_post_id(),
@@ -522,7 +532,7 @@ class Tests_Ajax_CustomizeManager extends WP_Ajax_UnitTestCase {
 		);
 		$this->make_ajax_call( 'customize_trash' );
 		$this->assertFalse( $this->_last_response_parsed['success'] );
-		$this->assertEquals( 'changeset_already_trashed', $this->_last_response_parsed['data']['code'] );
+		$this->assertSame( 'changeset_already_trashed', $this->_last_response_parsed['data']['code'] );
 
 		wp_update_post(
 			array(
@@ -535,16 +545,16 @@ class Tests_Ajax_CustomizeManager extends WP_Ajax_UnitTestCase {
 		add_filter( 'pre_trash_post', '__return_false' );
 		$this->make_ajax_call( 'customize_trash' );
 		$this->assertFalse( $this->_last_response_parsed['success'] );
-		$this->assertEquals( 'changeset_trash_failure', $this->_last_response_parsed['data']['code'] );
+		$this->assertSame( 'changeset_trash_failure', $this->_last_response_parsed['data']['code'] );
 		remove_filter( 'pre_trash_post', '__return_false' );
-		$this->assertEquals( $wp_trash_post_count, did_action( 'wp_trash_post' ) );
+		$this->assertSame( $wp_trash_post_count, did_action( 'wp_trash_post' ) );
 
 		$wp_trash_post_count = did_action( 'wp_trash_post' );
-		$this->assertEquals( 'draft', get_post_status( $wp_customize->changeset_post_id() ) );
+		$this->assertSame( 'draft', get_post_status( $wp_customize->changeset_post_id() ) );
 		$this->make_ajax_call( 'customize_trash' );
 		$this->assertTrue( $this->_last_response_parsed['success'] );
-		$this->assertEquals( 'trash', get_post_status( $wp_customize->changeset_post_id() ) );
-		$this->assertEquals( $wp_trash_post_count + 1, did_action( 'wp_trash_post' ) );
+		$this->assertSame( 'trash', get_post_status( $wp_customize->changeset_post_id() ) );
+		$this->assertSame( $wp_trash_post_count + 1, did_action( 'wp_trash_post' ) );
 	}
 
 	/**
@@ -560,8 +570,8 @@ class Tests_Ajax_CustomizeManager extends WP_Ajax_UnitTestCase {
 	 * Test request for dismissing autosave changesets.
 	 *
 	 * @ticket 39896
-	 * @covers WP_Customize_Manager::handle_dismiss_autosave_or_lock_request()
-	 * @covers WP_Customize_Manager::dismiss_user_auto_draft_changesets()
+	 * @covers WP_Customize_Manager::handle_dismiss_autosave_or_lock_request
+	 * @covers WP_Customize_Manager::dismiss_user_auto_draft_changesets
 	 */
 	public function test_handle_dismiss_autosave_or_lock_request() {
 		$uuid          = wp_generate_uuid4();
@@ -572,12 +582,12 @@ class Tests_Ajax_CustomizeManager extends WP_Ajax_UnitTestCase {
 		wp_set_current_user( 0 );
 		$this->make_ajax_call( 'customize_dismiss_autosave_or_lock' );
 		$this->assertFalse( $this->_last_response_parsed['success'] );
-		$this->assertEquals( 'unauthenticated', $this->_last_response_parsed['data'] );
+		$this->assertSame( 'unauthenticated', $this->_last_response_parsed['data'] );
 		wp_set_current_user( $valid_user_id );
 
 		$this->make_ajax_call( 'customize_dismiss_autosave_or_lock' );
 		$this->assertFalse( $this->_last_response_parsed['success'] );
-		$this->assertEquals( 'invalid_nonce', $this->_last_response_parsed['data'] );
+		$this->assertSame( 'invalid_nonce', $this->_last_response_parsed['data'] );
 
 		$nonce             = wp_create_nonce( 'customize_dismiss_autosave_or_lock' );
 		$_POST['nonce']    = $nonce;
@@ -589,14 +599,14 @@ class Tests_Ajax_CustomizeManager extends WP_Ajax_UnitTestCase {
 		$_REQUEST['dismiss_lock'] = true;
 		$this->make_ajax_call( 'customize_dismiss_autosave_or_lock' );
 		$this->assertFalse( $this->_last_response_parsed['success'] );
-		$this->assertEquals( 'no_changeset_to_dismiss_lock', $this->_last_response_parsed['data'] );
+		$this->assertSame( 'no_changeset_to_dismiss_lock', $this->_last_response_parsed['data'] );
 
 		$_POST['dismiss_autosave']    = true;
 		$_GET['dismiss_autosave']     = true;
 		$_REQUEST['dismiss_autosave'] = true;
 		$this->make_ajax_call( 'customize_dismiss_autosave_or_lock' );
 		$this->assertFalse( $this->_last_response_parsed['success'] );
-		$this->assertEquals( 'no_auto_draft_to_delete', $this->_last_response_parsed['data'] );
+		$this->assertSame( 'no_auto_draft_to_delete', $this->_last_response_parsed['data'] );
 
 		$other_user_id = $this->factory()->user->create();
 
@@ -630,20 +640,20 @@ class Tests_Ajax_CustomizeManager extends WP_Ajax_UnitTestCase {
 		}
 		$this->make_ajax_call( 'customize_dismiss_autosave_or_lock' );
 		$this->assertTrue( $this->_last_response_parsed['success'] );
-		$this->assertEquals( 'auto_draft_dismissed', $this->_last_response_parsed['data'] );
+		$this->assertSame( 'auto_draft_dismissed', $this->_last_response_parsed['data'] );
 		foreach ( $user_auto_draft_ids as $post_id ) {
-			$this->assertEquals( 'auto-draft', get_post_status( $post_id ) );
+			$this->assertSame( 'auto-draft', get_post_status( $post_id ) );
 			$this->assertTrue( (bool) get_post_meta( $post_id, '_customize_restore_dismissed', true ) );
 		}
 		foreach ( $other_user_auto_draft_ids as $post_id ) {
-			$this->assertEquals( 'auto-draft', get_post_status( $post_id ) );
+			$this->assertSame( 'auto-draft', get_post_status( $post_id ) );
 			$this->assertFalse( (bool) get_post_meta( $post_id, '_customize_restore_dismissed', true ) );
 		}
 
 		// Subsequent test results in none dismissed.
 		$this->make_ajax_call( 'customize_dismiss_autosave_or_lock' );
 		$this->assertFalse( $this->_last_response_parsed['success'] );
-		$this->assertEquals( 'no_auto_draft_to_delete', $this->_last_response_parsed['data'] );
+		$this->assertSame( 'no_auto_draft_to_delete', $this->_last_response_parsed['data'] );
 
 		// Save a changeset as a draft.
 		$r = $wp_customize->save_changeset_post(
@@ -662,7 +672,7 @@ class Tests_Ajax_CustomizeManager extends WP_Ajax_UnitTestCase {
 		$_REQUEST['dismiss_autosave'] = false;
 		$this->make_ajax_call( 'customize_dismiss_autosave_or_lock' );
 		$this->assertTrue( $this->_last_response_parsed['success'] );
-		$this->assertEquals( 'changeset_lock_dismissed', $this->_last_response_parsed['data'] );
+		$this->assertSame( 'changeset_lock_dismissed', $this->_last_response_parsed['data'] );
 
 		$_POST['dismiss_autosave']    = true;
 		$_GET['dismiss_autosave']     = true;
@@ -674,7 +684,7 @@ class Tests_Ajax_CustomizeManager extends WP_Ajax_UnitTestCase {
 		// Since no autosave yet, confirm no action.
 		$this->make_ajax_call( 'customize_dismiss_autosave_or_lock' );
 		$this->assertFalse( $this->_last_response_parsed['success'] );
-		$this->assertEquals( 'no_autosave_revision_to_delete', $this->_last_response_parsed['data'] );
+		$this->assertSame( 'no_autosave_revision_to_delete', $this->_last_response_parsed['data'] );
 
 		// Add the autosave revision.
 		$r = $wp_customize->save_changeset_post(
@@ -696,12 +706,12 @@ class Tests_Ajax_CustomizeManager extends WP_Ajax_UnitTestCase {
 		// Confirm autosave gets deleted.
 		$this->make_ajax_call( 'customize_dismiss_autosave_or_lock' );
 		$this->assertTrue( $this->_last_response_parsed['success'] );
-		$this->assertEquals( 'autosave_revision_deleted', $this->_last_response_parsed['data'] );
+		$this->assertSame( 'autosave_revision_deleted', $this->_last_response_parsed['data'] );
 		$this->assertFalse( wp_get_post_autosave( $wp_customize->changeset_post_id() ) );
 
 		// Since no autosave yet, confirm no action.
 		$this->make_ajax_call( 'customize_dismiss_autosave_or_lock' );
 		$this->assertFalse( $this->_last_response_parsed['success'] );
-		$this->assertEquals( 'no_autosave_revision_to_delete', $this->_last_response_parsed['data'] );
+		$this->assertSame( 'no_autosave_revision_to_delete', $this->_last_response_parsed['data'] );
 	}
 }
diff --git a/tests/ajax/CustomizeMenus.php b/tests/ajax/CustomizeMenus.php
index bb092cdad4..3baa07758d 100644
--- a/tests/ajax/CustomizeMenus.php
+++ b/tests/ajax/CustomizeMenus.php
@@ -1,6 +1,6 @@
 <?php
 /**
- * Testing ajax customize menus functionality
+ * Testing Ajax customize menus functionality.
  *
  * @package    WordPress
  * @subpackage UnitTests
@@ -86,8 +86,8 @@ class Tests_Ajax_CustomizeMenus extends WP_Ajax_UnitTestCase {
 	 *
 	 * @return array {
 	 *     @type array {
-	 * @string string $role             The role that will test caps for.
-	 * @array  array  $expected_results The expected results from the ajax call.
+	 *         @string string $role             The role that will test caps for.
+	 *         @array  array  $expected_results The expected results from the Ajax call.
 	 *     }
 	 * }
 	 */
@@ -157,7 +157,7 @@ class Tests_Ajax_CustomizeMenus extends WP_Ajax_UnitTestCase {
 	 * @return array {
 	 *     @type array {
 	 * @array array $post_args        The arguments that will merged with the $_POST array.
-	 * @array array $expected_results The expected results from the ajax call.
+	 * @array array $expected_results The expected results from the Ajax call.
 	 *     }
 	 * }
 	 */
@@ -477,7 +477,7 @@ class Tests_Ajax_CustomizeMenus extends WP_Ajax_UnitTestCase {
 	 * @return array {
 	 *     @type array {
 	 * @string string $role             The role that will test caps for.
-	 * @array  array  $expected_results The expected results from the ajax call.
+	 * @array  array  $expected_results The expected results from the Ajax call.
 	 *     }
 	 * }
 	 */
@@ -549,7 +549,7 @@ class Tests_Ajax_CustomizeMenus extends WP_Ajax_UnitTestCase {
 		$response = json_decode( $this->_last_response, true );
 
 		if ( isset( $post_args['search'] ) && 'test' === $post_args['search'] ) {
-			$this->assertsame( true, $response['success'] );
+			$this->assertTrue( $response['success'] );
 			$this->assertSame( 6, count( $response['data']['items'] ) );
 			$item_ids = wp_list_pluck( $response['data']['items'], 'id' );
 			$this->assertContains( 'post-' . $included_auto_draft_post->ID, $item_ids );
@@ -568,8 +568,8 @@ class Tests_Ajax_CustomizeMenus extends WP_Ajax_UnitTestCase {
 	 *
 	 * @return array {
 	 *     @type array {
-	 * @string string $post_args        The args that will be passed to ajax.
-	 * @array  array  $expected_results The expected results from the ajax call.
+	 * @string string $post_args        The args that will be passed to Ajax.
+	 * @array  array  $expected_results The expected results from the Ajax call.
 	 *     }
 	 * }
 	 */
@@ -608,7 +608,7 @@ class Tests_Ajax_CustomizeMenus extends WP_Ajax_UnitTestCase {
 	/**
 	 * Testing successful ajax_insert_auto_draft_post() call.
 	 *
-	 * @covers WP_Customize_Nav_Menus::ajax_insert_auto_draft_post()
+	 * @covers WP_Customize_Nav_Menus::ajax_insert_auto_draft_post
 	 */
 	function test_ajax_insert_auto_draft_post_success() {
 		$_POST                = wp_slash(
@@ -628,17 +628,17 @@ class Tests_Ajax_CustomizeMenus extends WP_Ajax_UnitTestCase {
 		$this->assertArrayHasKey( 'post_id', $response['data'] );
 		$this->assertArrayHasKey( 'url', $response['data'] );
 		$post = get_post( $response['data']['post_id'] );
-		$this->assertEquals( 'Hello World', $post->post_title );
-		$this->assertEquals( 'post', $post->post_type );
-		$this->assertEquals( '', $post->post_name );
-		$this->assertEquals( 'hello-world', get_post_meta( $post->ID, '_customize_draft_post_name', true ) );
-		$this->assertEquals( $this->wp_customize->changeset_uuid(), get_post_meta( $post->ID, '_customize_changeset_uuid', true ) );
+		$this->assertSame( 'Hello World', $post->post_title );
+		$this->assertSame( 'post', $post->post_type );
+		$this->assertSame( '', $post->post_name );
+		$this->assertSame( 'hello-world', get_post_meta( $post->ID, '_customize_draft_post_name', true ) );
+		$this->assertSame( $this->wp_customize->changeset_uuid(), get_post_meta( $post->ID, '_customize_changeset_uuid', true ) );
 	}
 
 	/**
 	 * Testing unsuccessful ajax_insert_auto_draft_post() call.
 	 *
-	 * @covers WP_Customize_Nav_Menus::ajax_insert_auto_draft_post()
+	 * @covers WP_Customize_Nav_Menus::ajax_insert_auto_draft_post
 	 */
 	function test_ajax_insert_auto_draft_failures() {
 		// No nonce.
@@ -647,7 +647,7 @@ class Tests_Ajax_CustomizeMenus extends WP_Ajax_UnitTestCase {
 		$this->make_ajax_call( 'customize-nav-menus-insert-auto-draft' );
 		$response = json_decode( $this->_last_response, true );
 		$this->assertFalse( $response['success'] );
-		$this->assertEquals( 'bad_nonce', $response['data'] );
+		$this->assertSame( 'bad_nonce', $response['data'] );
 
 		// Bad nonce.
 		$_POST                = wp_slash(
@@ -659,7 +659,7 @@ class Tests_Ajax_CustomizeMenus extends WP_Ajax_UnitTestCase {
 		$this->make_ajax_call( 'customize-nav-menus-insert-auto-draft' );
 		$response = json_decode( $this->_last_response, true );
 		$this->assertFalse( $response['success'] );
-		$this->assertEquals( 'bad_nonce', $response['data'] );
+		$this->assertSame( 'bad_nonce', $response['data'] );
 
 		// Bad nonce.
 		wp_set_current_user( $this->factory()->user->create( array( 'role' => 'subscriber' ) ) );
@@ -672,7 +672,7 @@ class Tests_Ajax_CustomizeMenus extends WP_Ajax_UnitTestCase {
 		$this->make_ajax_call( 'customize-nav-menus-insert-auto-draft' );
 		$response = json_decode( $this->_last_response, true );
 		$this->assertFalse( $response['success'] );
-		$this->assertEquals( 'customize_not_allowed', $response['data'] );
+		$this->assertSame( 'customize_not_allowed', $response['data'] );
 
 		// Missing params.
 		wp_set_current_user( $this->factory()->user->create( array( 'role' => 'administrator' ) ) );
@@ -685,7 +685,7 @@ class Tests_Ajax_CustomizeMenus extends WP_Ajax_UnitTestCase {
 		$this->make_ajax_call( 'customize-nav-menus-insert-auto-draft' );
 		$response = json_decode( $this->_last_response, true );
 		$this->assertFalse( $response['success'] );
-		$this->assertEquals( 'missing_params', $response['data'] );
+		$this->assertSame( 'missing_params', $response['data'] );
 
 		// insufficient_post_permissions.
 		register_post_type( 'privilege', array( 'capability_type' => 'privilege' ) );
@@ -701,7 +701,7 @@ class Tests_Ajax_CustomizeMenus extends WP_Ajax_UnitTestCase {
 		$this->make_ajax_call( 'customize-nav-menus-insert-auto-draft' );
 		$response = json_decode( $this->_last_response, true );
 		$this->assertFalse( $response['success'] );
-		$this->assertEquals( 'insufficient_post_permissions', $response['data'] );
+		$this->assertSame( 'insufficient_post_permissions', $response['data'] );
 
 		// insufficient_post_permissions.
 		$_POST                = wp_slash(
@@ -716,7 +716,7 @@ class Tests_Ajax_CustomizeMenus extends WP_Ajax_UnitTestCase {
 		$this->make_ajax_call( 'customize-nav-menus-insert-auto-draft' );
 		$response = json_decode( $this->_last_response, true );
 		$this->assertFalse( $response['success'] );
-		$this->assertEquals( 'missing_post_type_param', $response['data'] );
+		$this->assertSame( 'missing_post_type_param', $response['data'] );
 
 		// missing_post_title.
 		$_POST                = wp_slash(
@@ -732,7 +732,7 @@ class Tests_Ajax_CustomizeMenus extends WP_Ajax_UnitTestCase {
 		$this->make_ajax_call( 'customize-nav-menus-insert-auto-draft' );
 		$response = json_decode( $this->_last_response, true );
 		$this->assertFalse( $response['success'] );
-		$this->assertEquals( 'missing_post_title', $response['data'] );
+		$this->assertSame( 'missing_post_title', $response['data'] );
 
 		// illegal_params.
 		$_POST                = wp_slash(
@@ -750,6 +750,6 @@ class Tests_Ajax_CustomizeMenus extends WP_Ajax_UnitTestCase {
 		$this->make_ajax_call( 'customize-nav-menus-insert-auto-draft' );
 		$response = json_decode( $this->_last_response, true );
 		$this->assertFalse( $response['success'] );
-		$this->assertEquals( 'illegal_params', $response['data'] );
+		$this->assertSame( 'illegal_params', $response['data'] );
 	}
 }
diff --git a/tests/ajax/DeleteComment.php b/tests/ajax/DeleteComment.php
index 6664b662ab..cc2624872c 100644
--- a/tests/ajax/DeleteComment.php
+++ b/tests/ajax/DeleteComment.php
@@ -1,12 +1,12 @@
 <?php
 
 /**
- * Admin ajax functions to be tested
+ * Admin Ajax functions to be tested.
  */
-require_once( ABSPATH . 'wp-admin/includes/ajax-actions.php' );
+require_once ABSPATH . 'wp-admin/includes/ajax-actions.php';
 
 /**
- * Testing ajax comment functionality
+ * Testing Ajax comment functionality.
  *
  * @package    WordPress
  * @subpackage UnitTests
@@ -16,7 +16,7 @@ require_once( ABSPATH . 'wp-admin/includes/ajax-actions.php' );
 class Tests_Ajax_DeleteComment extends WP_Ajax_UnitTestCase {
 
 	/**
-	 * List of comments
+	 * List of comments.
 	 *
 	 * @var array
 	 */
@@ -37,7 +37,7 @@ class Tests_Ajax_DeleteComment extends WP_Ajax_UnitTestCase {
 	}
 
 	/**
-	 * Clear the POST actions in between requests
+	 * Clears the POST actions in between requests.
 	 */
 	protected function _clear_post_action() {
 		unset( $_POST['trash'] );
@@ -53,22 +53,22 @@ class Tests_Ajax_DeleteComment extends WP_Ajax_UnitTestCase {
 	 */
 
 	/**
-	 * Test as a privilged user (administrator)
-	 * Expects test to pass
+	 * Tests as a privileged user (administrator).
 	 *
-	 * @param mixed $comment Comment object
-	 * @param string action trash, untrash, etc.
-	 * @return void
+	 * Expects test to pass.
+	 *
+	 * @param WP_Comment $comment Comment object.
+	 * @param string     $action  Action: 'trash', 'untrash', etc.
 	 */
 	public function _test_as_admin( $comment, $action ) {
 
-		// Reset request
+		// Reset request.
 		$this->_clear_post_action();
 
-		// Become an administrator
+		// Become an administrator.
 		$this->_setRole( 'administrator' );
 
-		// Set up a default request
+		// Set up a default request.
 		$_POST['id']          = $comment->comment_ID;
 		$_POST['_ajax_nonce'] = wp_create_nonce( 'delete-comment_' . $comment->comment_ID );
 		$_POST[ $action ]     = 1;
@@ -77,57 +77,57 @@ class Tests_Ajax_DeleteComment extends WP_Ajax_UnitTestCase {
 		$_POST['_page']       = 1;
 		$_POST['_url']        = admin_url( 'edit-comments.php' );
 
-		// Make the request
+		// Make the request.
 		try {
 			$this->_handleAjax( 'delete-comment' );
 		} catch ( WPAjaxDieContinueException $e ) {
 			unset( $e );
 		}
 
-		// Get the response
+		// Get the response.
 		$xml = simplexml_load_string( $this->_last_response, 'SimpleXMLElement', LIBXML_NOCDATA );
 
-		// Ensure everything is correct
-		$this->assertEquals( $comment->comment_ID, (string) $xml->response[0]->comment['id'] );
-		$this->assertEquals( 'delete-comment_' . $comment->comment_ID, (string) $xml->response['action'] );
+		// Ensure everything is correct.
+		$this->assertSame( $comment->comment_ID, (string) $xml->response[0]->comment['id'] );
+		$this->assertSame( 'delete-comment_' . $comment->comment_ID, (string) $xml->response['action'] );
 		$this->assertGreaterThanOrEqual( time() - 10, (int) $xml->response[0]->comment[0]->supplemental[0]->time[0] );
 		$this->assertLessThanOrEqual( time(), (int) $xml->response[0]->comment[0]->supplemental[0]->time[0] );
 
-		// trash, spam, delete should make the total go down
+		// 'trash', 'spam', 'delete' should make the total go down.
 		if ( in_array( $action, array( 'trash', 'spam', 'delete' ), true ) ) {
 			$total = $_POST['_total'] - 1;
 
-			// unspam, untrash should make the total go up
+			// 'unspam', 'untrash' should make the total go up.
 		} elseif ( in_array( $action, array( 'untrash', 'unspam' ), true ) ) {
 			$total = $_POST['_total'] + 1;
 		}
 
-		// The total is calculated based on a page break -OR- a random number.  Let's look for both possible outcomes
+		// The total is calculated based on a page break -OR- a random number. Let's look for both possible outcomes.
 		$comment_count = wp_count_comments( 0 );
 		$recalc_total  = $comment_count->total_comments;
 
-		// Check for either possible total
+		// Check for either possible total.
 		$message = sprintf( 'returned value: %1$d $total: %2$d  $recalc_total: %3$d', (int) $xml->response[0]->comment[0]->supplemental[0]->total[0], $total, $recalc_total );
 		$this->assertTrue( in_array( (int) $xml->response[0]->comment[0]->supplemental[0]->total[0], array( $total, $recalc_total ), true ), $message );
 	}
 
 	/**
-	 * Test as a non-privileged user (subscriber)
-	 * Expects test to fail
+	 * Tests as a non-privileged user (subscriber).
+	 *
+	 * Expects test to fail.
 	 *
-	 * @param mixed $comment Comment object
-	 * @param string action trash, untrash, etc.
-	 * @return void
+	 * @param WP_Comment $comment Comment object.
+	 * @param string     $action  Action: 'trash', 'untrash', etc.
 	 */
 	public function _test_as_subscriber( $comment, $action ) {
 
-		// Reset request
+		// Reset request.
 		$this->_clear_post_action();
 
-		// Become a subscriber
+		// Become a subscriber.
 		$this->_setRole( 'subscriber' );
 
-		// Set up the $_POST request
+		// Set up the $_POST request.
 		$_POST['id']          = $comment->comment_ID;
 		$_POST['_ajax_nonce'] = wp_create_nonce( 'delete-comment_' . $comment->comment_ID );
 		$_POST[ $action ]     = 1;
@@ -136,29 +136,29 @@ class Tests_Ajax_DeleteComment extends WP_Ajax_UnitTestCase {
 		$_POST['_page']       = 1;
 		$_POST['_url']        = admin_url( 'edit-comments.php' );
 
-		// Make the request
+		// Make the request.
 		$this->setExpectedException( 'WPAjaxDieStopException', '-1' );
 		$this->_handleAjax( 'delete-comment' );
 	}
 
 
 	/**
-	 * Test with a bad nonce
-	 * Expects test to fail
+	 * Tests with a bad nonce.
+	 *
+	 * Expects test to fail.
 	 *
-	 * @param mixed $comment Comment object
-	 * @param string action trash, untrash, etc.
-	 * @return void
+	 * @param WP_Comment $comment Comment object.
+	 * @param string     $action  Action: 'trash', 'untrash', etc.
 	 */
 	public function _test_with_bad_nonce( $comment, $action ) {
 
-		// Reset request
+		// Reset request.
 		$this->_clear_post_action();
 
-		// Become a subscriber
+		// Become a subscriber.
 		$this->_setRole( 'administrator' );
 
-		// Set up the $_POST request
+		// Set up the $_POST request.
 		$_POST['id']          = $comment->comment_ID;
 		$_POST['_ajax_nonce'] = wp_create_nonce( uniqid() );
 		$_POST[ $action ]     = 1;
@@ -167,28 +167,28 @@ class Tests_Ajax_DeleteComment extends WP_Ajax_UnitTestCase {
 		$_POST['_page']       = 1;
 		$_POST['_url']        = admin_url( 'edit-comments.php' );
 
-		// Make the request
+		// Make the request.
 		$this->setExpectedException( 'WPAjaxDieStopException', '-1' );
 		$this->_handleAjax( 'delete-comment' );
 	}
 
 	/**
-	 * Test with a bad id
-	 * Expects test to fail
+	 * Tests with a bad ID.
 	 *
-	 * @param mixed $comment Comment object
-	 * @param string action trash, untrash, etc.
-	 * @return void
+	 * Expects test to fail.
+	 *
+	 * @param WP_Comment $comment Comment object.
+	 * @param string     $action  Action: 'trash', 'untrash', etc.
 	 */
 	public function _test_with_bad_id( $comment, $action ) {
 
-		// Reset request
+		// Reset request.
 		$this->_clear_post_action();
 
-		// Become a subscriber
+		// Become a subscriber.
 		$this->_setRole( 'administrator' );
 
-		// Set up the $_POST request
+		// Set up the $_POST request.
 		$_POST['id']          = 12346789;
 		$_POST['_ajax_nonce'] = wp_create_nonce( 'delete-comment_12346789' );
 		$_POST[ $action ]     = 1;
@@ -197,12 +197,12 @@ class Tests_Ajax_DeleteComment extends WP_Ajax_UnitTestCase {
 		$_POST['_page']       = 1;
 		$_POST['_url']        = admin_url( 'edit-comments.php' );
 
-		// Make the request, look for a timestamp in the exception
+		// Make the request, look for a timestamp in the exception.
 		try {
 			$this->_handleAjax( 'delete-comment' );
 			$this->fail( 'Expected exception: WPAjaxDieStopException' );
 		} catch ( WPAjaxDieStopException $e ) {
-			$this->assertEquals( 10, strlen( $e->getMessage() ) );
+			$this->assertSame( 10, strlen( $e->getMessage() ) );
 			$this->assertTrue( is_numeric( $e->getMessage() ) );
 		} catch ( Exception $e ) {
 			$this->fail( 'Unexpected exception type: ' . get_class( $e ) );
@@ -210,22 +210,22 @@ class Tests_Ajax_DeleteComment extends WP_Ajax_UnitTestCase {
 	}
 
 	/**
-	 * Test doubling the action (e.g. trash a trashed comment)
-	 * Expects test to fail
+	 * Tests doubling the action (e.g. trash a trashed comment).
+	 *
+	 * Expects test to fail.
 	 *
-	 * @param mixed $comment Comment object
-	 * @param string action trash, untrash, etc.
-	 * @return void
+	 * @param WP_Comment $comment Comment object.
+	 * @param string     $action  Action: 'trash', 'untrash', etc.
 	 */
 	public function _test_double_action( $comment, $action ) {
 
-		// Reset request
+		// Reset request.
 		$this->_clear_post_action();
 
-		// Become a subscriber
+		// Become a subscriber.
 		$this->_setRole( 'administrator' );
 
-		// Set up the $_POST request
+		// Set up the $_POST request.
 		$_POST['id']          = $comment->comment_ID;
 		$_POST['_ajax_nonce'] = wp_create_nonce( 'delete-comment_' . $comment->comment_ID );
 		$_POST[ $action ]     = 1;
@@ -234,7 +234,7 @@ class Tests_Ajax_DeleteComment extends WP_Ajax_UnitTestCase {
 		$_POST['_page']       = 1;
 		$_POST['_url']        = admin_url( 'edit-comments.php' );
 
-		// Make the request
+		// Make the request.
 		try {
 			$this->_handleAjax( 'delete-comment' );
 		} catch ( WPAjaxDieContinueException $e ) {
@@ -242,17 +242,17 @@ class Tests_Ajax_DeleteComment extends WP_Ajax_UnitTestCase {
 		}
 		$this->_last_response = '';
 
-		// Force delete the comment
+		// Force delete the comment.
 		if ( 'delete' === $action ) {
 			wp_delete_comment( $comment->comment_ID, true );
 		}
 
-		// Make the request again, look for a timestamp in the exception
+		// Make the request again, look for a timestamp in the exception.
 		try {
 			$this->_handleAjax( 'delete-comment' );
 			$this->fail( 'Expected exception: WPAjaxDieStopException' );
 		} catch ( WPAjaxDieStopException $e ) {
-			$this->assertEquals( 10, strlen( $e->getMessage() ) );
+			$this->assertSame( 10, strlen( $e->getMessage() ) );
 			$this->assertTrue( is_numeric( $e->getMessage() ) );
 		} catch ( Exception $e ) {
 			$this->fail( 'Unexpected exception type: ' . get_class( $e ) );
@@ -260,92 +260,82 @@ class Tests_Ajax_DeleteComment extends WP_Ajax_UnitTestCase {
 	}
 
 	/**
-	 * Delete a comment as an administrator (expects success)
-	 *
-	 * @return void
+	 * Deletes a comment as an administrator (expects success).
 	 */
 	public function test_ajax_comment_trash_actions_as_administrator() {
-		// Test trash/untrash
+		// Test trash/untrash.
 		$this->_test_as_admin( self::$comments[0], 'trash' );
 		$this->_test_as_admin( self::$comments[0], 'untrash' );
 
-		// Test spam/unspam
+		// Test spam/unspam.
 		$this->_test_as_admin( self::$comments[1], 'spam' );
 		$this->_test_as_admin( self::$comments[1], 'unspam' );
 
-		// Test delete
+		// Test delete.
 		$this->_test_as_admin( self::$comments[2], 'delete' );
 	}
 
 	/**
-	 * Delete a comment as a subscriber (expects permission denied)
-	 *
-	 * @return void
+	 * Deletes a comment as a subscriber (expects permission denied).
 	 */
 	public function test_ajax_comment_trash_actions_as_subscriber() {
-		// Test trash/untrash
+		// Test trash/untrash.
 		$this->_test_as_subscriber( self::$comments[0], 'trash' );
 		$this->_test_as_subscriber( self::$comments[0], 'untrash' );
 
-		// Test spam/unspam
+		// Test spam/unspam.
 		$this->_test_as_subscriber( self::$comments[1], 'spam' );
 		$this->_test_as_subscriber( self::$comments[1], 'unspam' );
 
-		// Test delete
+		// Test delete.
 		$this->_test_as_subscriber( self::$comments[2], 'delete' );
 	}
 
 	/**
-	 * Delete a comment with no id
-	 *
-	 * @return void
+	 * Deletes a comment with no ID.
 	 */
 	public function test_ajax_trash_comment_no_id() {
-		// Test trash/untrash
+		// Test trash/untrash.
 		$this->_test_as_admin( self::$comments[0], 'trash' );
 		$this->_test_as_admin( self::$comments[0], 'untrash' );
 
-		// Test spam/unspam
+		// Test spam/unspam.
 		$this->_test_as_admin( self::$comments[1], 'spam' );
 		$this->_test_as_admin( self::$comments[1], 'unspam' );
 
-		// Test delete
+		// Test delete.
 		$this->_test_as_admin( self::$comments[2], 'delete' );
 	}
 
 	/**
-	 * Delete a comment with a bad nonce
-	 *
-	 * @return void
+	 * Deletes a comment with a bad nonce.
 	 */
 	public function test_ajax_trash_comment_bad_nonce() {
-		// Test trash/untrash
+		// Test trash/untrash.
 		$this->_test_with_bad_nonce( self::$comments[0], 'trash' );
 		$this->_test_with_bad_nonce( self::$comments[0], 'untrash' );
 
-		// Test spam/unspam
+		// Test spam/unspam.
 		$this->_test_with_bad_nonce( self::$comments[1], 'spam' );
 		$this->_test_with_bad_nonce( self::$comments[1], 'unspam' );
 
-		// Test delete
+		// Test delete.
 		$this->_test_with_bad_nonce( self::$comments[2], 'delete' );
 	}
 
 	/**
-	 * Test trashing an already trashed comment, etc.
-	 *
-	 * @return void
+	 * Tests trashing an already trashed comment, etc.
 	 */
 	public function test_ajax_trash_double_action() {
-		// Test trash/untrash
+		// Test trash/untrash.
 		$this->_test_double_action( self::$comments[0], 'trash' );
 		$this->_test_double_action( self::$comments[0], 'untrash' );
 
-		// Test spam/unspam
+		// Test spam/unspam.
 		$this->_test_double_action( self::$comments[1], 'spam' );
 		$this->_test_double_action( self::$comments[1], 'unspam' );
 
-		// Test delete
+		// Test delete.
 		$this->_test_double_action( self::$comments[2], 'delete' );
 	}
 }
diff --git a/tests/ajax/DeletePlugin.php b/tests/ajax/DeletePlugin.php
index 7ba23729d8..871e859a8f 100644
--- a/tests/ajax/DeletePlugin.php
+++ b/tests/ajax/DeletePlugin.php
@@ -1,8 +1,8 @@
 <?php
 /**
- * Admin ajax functions to be tested
+ * Admin Ajax functions to be tested.
  */
-require_once( ABSPATH . 'wp-admin/includes/ajax-actions.php' );
+require_once ABSPATH . 'wp-admin/includes/ajax-actions.php';
 
 /**
  * Testing Ajax handler for deleting a plugin.
@@ -22,7 +22,7 @@ class Tests_Ajax_Delete_Plugin extends WP_Ajax_UnitTestCase {
 		$_POST['_ajax_nonce'] = wp_create_nonce( 'updates' );
 		$_POST['slug']        = 'foo';
 
-		// Make the request
+		// Make the request.
 		try {
 			$this->_handleAjax( 'delete-plugin' );
 		} catch ( WPAjaxDieContinueException $e ) {
@@ -41,14 +41,14 @@ class Tests_Ajax_Delete_Plugin extends WP_Ajax_UnitTestCase {
 			),
 		);
 
-		$this->assertEqualSets( $expected, $response );
+		$this->assertSameSets( $expected, $response );
 	}
 
 	public function test_missing_slug() {
 		$_POST['_ajax_nonce'] = wp_create_nonce( 'updates' );
 		$_POST['plugin']      = 'foo/bar.php';
 
-		// Make the request
+		// Make the request.
 		try {
 			$this->_handleAjax( 'delete-plugin' );
 		} catch ( WPAjaxDieContinueException $e ) {
@@ -67,7 +67,7 @@ class Tests_Ajax_Delete_Plugin extends WP_Ajax_UnitTestCase {
 			),
 		);
 
-		$this->assertEqualSets( $expected, $response );
+		$this->assertSameSets( $expected, $response );
 	}
 
 	public function test_missing_capability() {
@@ -75,7 +75,7 @@ class Tests_Ajax_Delete_Plugin extends WP_Ajax_UnitTestCase {
 		$_POST['plugin']      = 'foo/bar.php';
 		$_POST['slug']        = 'foo';
 
-		// Make the request
+		// Make the request.
 		try {
 			$this->_handleAjax( 'delete-plugin' );
 		} catch ( WPAjaxDieContinueException $e ) {
@@ -94,7 +94,7 @@ class Tests_Ajax_Delete_Plugin extends WP_Ajax_UnitTestCase {
 			),
 		);
 
-		$this->assertEqualSets( $expected, $response );
+		$this->assertSameSets( $expected, $response );
 	}
 
 	public function test_invalid_file() {
@@ -104,7 +104,7 @@ class Tests_Ajax_Delete_Plugin extends WP_Ajax_UnitTestCase {
 		$_POST['plugin']      = '../foo/bar.php';
 		$_POST['slug']        = 'foo';
 
-		// Make the request
+		// Make the request.
 		try {
 			$this->_handleAjax( 'delete-plugin' );
 		} catch ( WPAjaxDieContinueException $e ) {
@@ -123,7 +123,7 @@ class Tests_Ajax_Delete_Plugin extends WP_Ajax_UnitTestCase {
 			),
 		);
 
-		$this->assertEqualSets( $expected, $response );
+		$this->assertSameSets( $expected, $response );
 	}
 
 	public function test_delete_plugin() {
@@ -133,7 +133,7 @@ class Tests_Ajax_Delete_Plugin extends WP_Ajax_UnitTestCase {
 		$_POST['plugin']      = 'foo.php';
 		$_POST['slug']        = 'foo';
 
-		// Make the request
+		// Make the request.
 		try {
 			$this->_handleAjax( 'delete-plugin' );
 		} catch ( WPAjaxDieContinueException $e ) {
@@ -153,6 +153,6 @@ class Tests_Ajax_Delete_Plugin extends WP_Ajax_UnitTestCase {
 			),
 		);
 
-		$this->assertEqualSets( $expected, $response );
+		$this->assertSameSets( $expected, $response );
 	}
 }
diff --git a/tests/ajax/DimComment.php b/tests/ajax/DimComment.php
index a18e3d0e59..51fb2bb9a6 100644
--- a/tests/ajax/DimComment.php
+++ b/tests/ajax/DimComment.php
@@ -1,12 +1,12 @@
 <?php
 
 /**
- * Admin ajax functions to be tested
+ * Admin Ajax functions to be tested.
  */
-require_once( ABSPATH . 'wp-admin/includes/ajax-actions.php' );
+require_once ABSPATH . 'wp-admin/includes/ajax-actions.php';
 
 /**
- * Testing ajax comment functionality
+ * Testing Ajax comment functionality
  *
  * @package    WordPress
  * @subpackage UnitTests
@@ -16,14 +16,14 @@ require_once( ABSPATH . 'wp-admin/includes/ajax-actions.php' );
 class Tests_Ajax_DimComment extends WP_Ajax_UnitTestCase {
 
 	/**
-	 * List of comments
+	 * List of comments.
 	 *
 	 * @var array
 	 */
 	protected $_comments = array();
 
 	/**
-	 * Set up the test fixture
+	 * Sets up the test fixture.
 	 */
 	public function setUp() {
 		parent::setUp();
@@ -33,7 +33,7 @@ class Tests_Ajax_DimComment extends WP_Ajax_UnitTestCase {
 	}
 
 	/**
-	 * Clear the POST actions in between requests
+	 * Clears the POST actions in between requests.
 	 */
 	protected function _clear_post_action() {
 		unset( $_POST['id'] );
@@ -46,21 +46,21 @@ class Tests_Ajax_DimComment extends WP_Ajax_UnitTestCase {
 	 */
 
 	/**
-	 * Test as a privilged user (administrator)
-	 * Expects test to pass
+	 * Tests as a privileged user (administrator).
 	 *
-	 * @param mixed $comment Comment object
-	 * @return void
+	 * Expects test to pass.
+	 *
+	 * @param WP_Comment $comment Comment object.
 	 */
 	public function _test_as_admin( $comment ) {
 
-		// Reset request
+		// Reset request.
 		$this->_clear_post_action();
 
-		// Become an administrator
+		// Become an administrator.
 		$this->_setRole( 'administrator' );
 
-		// Set up a default request
+		// Set up a default request.
 		$_POST['id']          = $comment->comment_ID;
 		$_POST['_ajax_nonce'] = wp_create_nonce( 'approve-comment_' . $comment->comment_ID );
 		$_POST['_total']      = count( $this->_comments );
@@ -68,60 +68,60 @@ class Tests_Ajax_DimComment extends WP_Ajax_UnitTestCase {
 		$_POST['_page']       = 1;
 		$_POST['_url']        = admin_url( 'edit-comments.php' );
 
-		// Save the comment status
+		// Save the comment status.
 		$prev_status = wp_get_comment_status( $comment->comment_ID );
 
-		// Make the request
+		// Make the request.
 		try {
 			$this->_handleAjax( 'dim-comment' );
 		} catch ( WPAjaxDieContinueException $e ) {
 			unset( $e );
 		}
 
-		// Get the response
+		// Get the response.
 		$xml = simplexml_load_string( $this->_last_response, 'SimpleXMLElement', LIBXML_NOCDATA );
 
-		// Ensure everything is correct
-		$this->assertEquals( $comment->comment_ID, (string) $xml->response[0]->comment['id'] );
-		$this->assertEquals( 'dim-comment_' . $comment->comment_ID, (string) $xml->response['action'] );
+		// Ensure everything is correct.
+		$this->assertSame( $comment->comment_ID, (string) $xml->response[0]->comment['id'] );
+		$this->assertSame( 'dim-comment_' . $comment->comment_ID, (string) $xml->response['action'] );
 		$this->assertGreaterThanOrEqual( time() - 10, (int) $xml->response[0]->comment[0]->supplemental[0]->time[0] );
 		$this->assertLessThanOrEqual( time(), (int) $xml->response[0]->comment[0]->supplemental[0]->time[0] );
 
-		// Check the status
+		// Check the status.
 		$current = wp_get_comment_status( $comment->comment_ID );
 		if ( in_array( $prev_status, array( 'unapproved', 'spam' ), true ) ) {
-			$this->assertEquals( 'approved', $current );
+			$this->assertSame( 'approved', $current );
 		} else {
-			$this->assertEquals( 'unapproved', $current );
+			$this->assertSame( 'unapproved', $current );
 		}
 
-		// The total is calculated based on a page break -OR- a random number.  Let's look for both possible outcomes
+		// The total is calculated based on a page break -OR- a random number. Let's look for both possible outcomes.
 		$comment_count = wp_count_comments( 0 );
 		$recalc_total  = $comment_count->total_comments;
 
-		// Delta is not specified, it will always be 1 lower than the request
+		// Delta is not specified, it will always be 1 lower than the request.
 		$total = $_POST['_total'] - 1;
 
-		// Check for either possible total
+		// Check for either possible total.
 		$this->assertTrue( in_array( (int) $xml->response[0]->comment[0]->supplemental[0]->total[0], array( $total, $recalc_total ), true ) );
 	}
 
 	/**
-	 * Test as a non-privileged user (subscriber)
-	 * Expects test to fail
+	 * Tests as a non-privileged user (subscriber).
+	 *
+	 * Expects test to fail.
 	 *
-	 * @param mixed $comment Comment object
-	 * @return void
+	 * @param WP_Comment $comment Comment object.
 	 */
 	public function _test_as_subscriber( $comment ) {
 
-		// Reset request
+		// Reset request.
 		$this->_clear_post_action();
 
-		// Become a subscriber
+		// Become a subscriber.
 		$this->_setRole( 'subscriber' );
 
-		// Set up the $_POST request
+		// Set up the $_POST request.
 		$_POST['id']          = $comment->comment_ID;
 		$_POST['_ajax_nonce'] = wp_create_nonce( 'approve-comment_' . $comment->comment_ID );
 		$_POST['_total']      = count( $this->_comments );
@@ -129,27 +129,27 @@ class Tests_Ajax_DimComment extends WP_Ajax_UnitTestCase {
 		$_POST['_page']       = 1;
 		$_POST['_url']        = admin_url( 'edit-comments.php' );
 
-		// Make the request
+		// Make the request.
 		$this->setExpectedException( 'WPAjaxDieStopException', '-1' );
 		$this->_handleAjax( 'dim-comment' );
 	}
 
 	/**
-	 * Test with a bad nonce
-	 * Expects test to fail
+	 * Tests with a bad nonce.
 	 *
-	 * @param mixed $comment Comment object
-	 * @return void
+	 * Expects test to fail.
+	 *
+	 * @param WP_Comment $comment Comment object.
 	 */
 	public function _test_with_bad_nonce( $comment ) {
 
-		// Reset request
+		// Reset request.
 		$this->_clear_post_action();
 
-		// Become a subscriber
+		// Become a subscriber.
 		$this->_setRole( 'administrator' );
 
-		// Set up the $_POST request
+		// Set up the $_POST request.
 		$_POST['id']          = $comment->comment_ID;
 		$_POST['_ajax_nonce'] = wp_create_nonce( uniqid() );
 		$_POST['_total']      = count( $this->_comments );
@@ -157,26 +157,25 @@ class Tests_Ajax_DimComment extends WP_Ajax_UnitTestCase {
 		$_POST['_page']       = 1;
 		$_POST['_url']        = admin_url( 'edit-comments.php' );
 
-		// Make the request
+		// Make the request.
 		$this->setExpectedException( 'WPAjaxDieStopException', '-1' );
 		$this->_handleAjax( 'dim-comment' );
 	}
 
 	/**
-	 * Test with a bad id
-	 * Expects test to fail
+	 * Tests with a bad ID.
 	 *
-	 * @return void
+	 * Expects test to fail.
 	 */
 	public function test_with_bad_id() {
 
-		// Reset request
+		// Reset request.
 		$this->_clear_post_action();
 
-		// Become a subscriber
+		// Become a subscriber.
 		$this->_setRole( 'administrator' );
 
-		// Set up the $_POST request
+		// Set up the $_POST request.
 		$_POST['id']          = 12346789;
 		$_POST['_ajax_nonce'] = wp_create_nonce( 'dim-comment_12346789' );
 		$_POST['_total']      = count( $this->_comments );
@@ -184,18 +183,18 @@ class Tests_Ajax_DimComment extends WP_Ajax_UnitTestCase {
 		$_POST['_page']       = 1;
 		$_POST['_url']        = admin_url( 'edit-comments.php' );
 
-		// Make the request, look for a timestamp in the exception
+		// Make the request, look for a timestamp in the exception.
 		try {
 			$this->_handleAjax( 'dim-comment' );
 			$this->fail( 'Expected exception: WPAjaxDieContinueException' );
 		} catch ( WPAjaxDieContinueException $e ) {
 
-			// Get the response
+			// Get the response.
 			$xml = simplexml_load_string( $this->_last_response, 'SimpleXMLElement', LIBXML_NOCDATA );
 
-			// Ensure everything is correct
-			$this->assertEquals( '0', (string) $xml->response[0]->comment['id'] );
-			$this->assertEquals( 'dim-comment_0', (string) $xml->response['action'] );
+			// Ensure everything is correct.
+			$this->assertSame( '0', (string) $xml->response[0]->comment['id'] );
+			$this->assertSame( 'dim-comment_0', (string) $xml->response['action'] );
 			$this->assertContains( 'Comment ' . $_POST['id'] . ' does not exist', $this->_last_response );
 
 		} catch ( Exception $e ) {
@@ -204,9 +203,7 @@ class Tests_Ajax_DimComment extends WP_Ajax_UnitTestCase {
 	}
 
 	/**
-	 * Dim a comment as an administrator (expects success)
-	 *
-	 * @return void
+	 * Dims a comment as an administrator (expects success).
 	 */
 	public function test_ajax_comment_dim_actions_as_administrator() {
 		$comment = array_pop( $this->_comments );
@@ -215,9 +212,7 @@ class Tests_Ajax_DimComment extends WP_Ajax_UnitTestCase {
 	}
 
 	/**
-	 * Dim a comment as a subscriber (expects permission denied)
-	 *
-	 * @return void
+	 * Dims a comment as a subscriber (expects permission denied).
 	 */
 	public function test_ajax_comment_dim_actions_as_subscriber() {
 		$comment = array_pop( $this->_comments );
@@ -225,9 +220,7 @@ class Tests_Ajax_DimComment extends WP_Ajax_UnitTestCase {
 	}
 
 	/**
-	 * Dim a comment with no id
-	 *
-	 * @return void
+	 * Dims a comment with no ID.
 	 */
 	public function test_ajax_dim_comment_no_id() {
 		$comment = array_pop( $this->_comments );
@@ -235,9 +228,7 @@ class Tests_Ajax_DimComment extends WP_Ajax_UnitTestCase {
 	}
 
 	/**
-	 * Dim a comment with a bad nonce
-	 *
-	 * @return void
+	 * Dims a comment with a bad nonce.
 	 */
 	public function test_ajax_dim_comment_bad_nonce() {
 		$comment = array_pop( $this->_comments );
diff --git a/tests/ajax/EditComment.php b/tests/ajax/EditComment.php
index 7fb58eff57..66ecdae8b4 100644
--- a/tests/ajax/EditComment.php
+++ b/tests/ajax/EditComment.php
@@ -1,12 +1,12 @@
 <?php
 
 /**
- * Admin ajax functions to be tested
+ * Admin Ajax functions to be tested.
  */
-require_once( ABSPATH . 'wp-admin/includes/ajax-actions.php' );
+require_once ABSPATH . 'wp-admin/includes/ajax-actions.php';
 
 /**
- * Testing ajax comment functionality
+ * Testing Ajax comment functionality.
  *
  * @package    WordPress
  * @subpackage UnitTests
@@ -16,14 +16,14 @@ require_once( ABSPATH . 'wp-admin/includes/ajax-actions.php' );
 class Tests_Ajax_EditComment extends WP_Ajax_UnitTestCase {
 
 	/**
-	 * A post with at least one comment
+	 * A post with at least one comment.
 	 *
 	 * @var mixed
 	 */
 	protected $_comment_post = null;
 
 	/**
-	 * Set up the test fixture
+	 * Sets up the test fixture.
 	 */
 	public function setUp() {
 		parent::setUp();
@@ -33,17 +33,16 @@ class Tests_Ajax_EditComment extends WP_Ajax_UnitTestCase {
 	}
 
 	/**
-	 * Get comments as a privilged user (administrator)
-	 * Expects test to pass
+	 * Gets comments as a privileged user (administrator).
 	 *
-	 * @return void
+	 * Expects test to pass.
 	 */
 	public function test_as_admin() {
 
-		// Become an administrator
+		// Become an administrator.
 		$this->_setRole( 'administrator' );
 
-		// Get a comment
+		// Get a comment.
 		$comments = get_comments(
 			array(
 				'post_id' => $this->_comment_post->ID,
@@ -51,30 +50,30 @@ class Tests_Ajax_EditComment extends WP_Ajax_UnitTestCase {
 		);
 		$comment  = array_pop( $comments );
 
-		// Set up a default request
+		// Set up a default request.
 		$_POST['_ajax_nonce-replyto-comment'] = wp_create_nonce( 'replyto-comment' );
 		$_POST['comment_ID']                  = $comment->comment_ID;
 		$_POST['content']                     = 'Lorem ipsum dolor sit amet, consectetur adipiscing elit.';
 
-		// Make the request
+		// Make the request.
 		try {
 			$this->_handleAjax( 'edit-comment' );
 		} catch ( WPAjaxDieContinueException $e ) {
 			unset( $e );
 		}
 
-		// Get the response
+		// Get the response.
 		$xml = simplexml_load_string( $this->_last_response, 'SimpleXMLElement', LIBXML_NOCDATA );
 
-		// Check the meta data
-		$this->assertEquals( -1, (string) $xml->response[0]->edit_comment['position'] );
-		$this->assertEquals( $comment->comment_ID, (string) $xml->response[0]->edit_comment['id'] );
-		$this->assertEquals( 'edit-comment_' . $comment->comment_ID, (string) $xml->response['action'] );
+		// Check the meta data.
+		$this->assertSame( '-1', (string) $xml->response[0]->edit_comment['position'] );
+		$this->assertSame( $comment->comment_ID, (string) $xml->response[0]->edit_comment['id'] );
+		$this->assertSame( 'edit-comment_' . $comment->comment_ID, (string) $xml->response['action'] );
 
-		// Check the payload
+		// Check the payload.
 		$this->assertNotEmpty( (string) $xml->response[0]->edit_comment[0]->response_data );
 
-		// And supplemental is empty
+		// And supplemental is empty.
 		$this->assertEmpty( (string) $xml->response[0]->edit_comment[0]->supplemental );
 	}
 
@@ -84,10 +83,10 @@ class Tests_Ajax_EditComment extends WP_Ajax_UnitTestCase {
 	function test_editor_can_edit_orphan_comments() {
 		global $wpdb;
 
-		// Become an editor
+		// Become an editor.
 		$this->_setRole( 'editor' );
 
-		// Get a comment
+		// Get a comment.
 		$comments = get_comments(
 			array(
 				'post_id' => $this->_comment_post->ID,
@@ -95,49 +94,48 @@ class Tests_Ajax_EditComment extends WP_Ajax_UnitTestCase {
 		);
 		$comment  = array_pop( $comments );
 
-		// Manually update the comment_post_ID, because wp_update_comment() will prevent it.
+		// Manually update the comment_post_ID, because wp_update_comment() will prevent it..
 		$wpdb->update( $wpdb->comments, array( 'comment_post_ID' => 0 ), array( 'comment_ID' => $comment->comment_ID ) );
 		clean_comment_cache( $comment->comment_ID );
 
-		// Set up a default request
+		// Set up a default request.
 		$_POST['_ajax_nonce-replyto-comment'] = wp_create_nonce( 'replyto-comment' );
 		$_POST['comment_ID']                  = $comment->comment_ID;
 		$_POST['content']                     = 'Lorem ipsum dolor sit amet, consectetur adipiscing elit.';
 
-		// Make the request
+		// Make the request.
 		try {
 			$this->_handleAjax( 'edit-comment' );
 		} catch ( WPAjaxDieContinueException $e ) {
 			unset( $e );
 		}
 
-		// Get the response
+		// Get the response.
 		$xml = simplexml_load_string( $this->_last_response, 'SimpleXMLElement', LIBXML_NOCDATA );
 
-		// Check the meta data
-		$this->assertEquals( -1, (string) $xml->response[0]->edit_comment['position'] );
-		$this->assertEquals( $comment->comment_ID, (string) $xml->response[0]->edit_comment['id'] );
-		$this->assertEquals( 'edit-comment_' . $comment->comment_ID, (string) $xml->response['action'] );
+		// Check the meta data.
+		$this->assertSame( '-1', (string) $xml->response[0]->edit_comment['position'] );
+		$this->assertSame( $comment->comment_ID, (string) $xml->response[0]->edit_comment['id'] );
+		$this->assertSame( 'edit-comment_' . $comment->comment_ID, (string) $xml->response['action'] );
 
-		// Check the payload
+		// Check the payload.
 		$this->assertNotEmpty( (string) $xml->response[0]->edit_comment[0]->response_data );
 
-		// And supplemental is empty
+		// And supplemental is empty.
 		$this->assertEmpty( (string) $xml->response[0]->edit_comment[0]->supplemental );
 	}
 
 	/**
-	 * Get comments as a non-privileged user (subscriber)
-	 * Expects test to fail
+	 * Gets comments as a non-privileged user (subscriber).
 	 *
-	 * @return void
+	 * Expects test to fail.
 	 */
 	public function test_as_subscriber() {
 
-		// Become an administrator
+		// Become a subscriber.
 		$this->_setRole( 'subscriber' );
 
-		// Get a comment
+		// Get a comment.
 		$comments = get_comments(
 			array(
 				'post_id' => $this->_comment_post->ID,
@@ -145,28 +143,27 @@ class Tests_Ajax_EditComment extends WP_Ajax_UnitTestCase {
 		);
 		$comment  = array_pop( $comments );
 
-		// Set up a default request
+		// Set up a default request.
 		$_POST['_ajax_nonce-replyto-comment'] = wp_create_nonce( 'replyto-comment' );
 		$_POST['comment_ID']                  = $comment->comment_ID;
 		$_POST['content']                     = 'Lorem ipsum dolor sit amet, consectetur adipiscing elit.';
 
-		// Make the request
+		// Make the request.
 		$this->setExpectedException( 'WPAjaxDieStopException', '-1' );
 		$this->_handleAjax( 'edit-comment' );
 	}
 
 	/**
-	 * Get comments with a bad nonce
-	 * Expects test to fail
+	 * Gets comments with a bad nonce.
 	 *
-	 * @return void
+	 * Expects test to fail.
 	 */
 	public function test_bad_nonce() {
 
-		// Become an administrator
+		// Become an administrator.
 		$this->_setRole( 'administrator' );
 
-		// Get a comment
+		// Get a comment.
 		$comments = get_comments(
 			array(
 				'post_id' => $this->_comment_post->ID,
@@ -174,34 +171,68 @@ class Tests_Ajax_EditComment extends WP_Ajax_UnitTestCase {
 		);
 		$comment  = array_pop( $comments );
 
-		// Set up a default request
+		// Set up a default request.
 		$_POST['_ajax_nonce-replyto-comment'] = wp_create_nonce( uniqid() );
 		$_POST['comment_ID']                  = $comment->comment_ID;
 		$_POST['content']                     = 'Lorem ipsum dolor sit amet, consectetur adipiscing elit.';
 
-		// Make the request
+		// Make the request.
 		$this->setExpectedException( 'WPAjaxDieStopException', '-1' );
 		$this->_handleAjax( 'get-comments' );
 	}
 
 	/**
-	 * Get comments for an invalid post
-	 * This should return valid XML
+	 * Gets comments for an invalid post.
 	 *
-	 * @return void
+	 * This should return valid XML.
 	 */
 	public function test_invalid_comment() {
 
-		// Become an administrator
+		// Become an administrator.
 		$this->_setRole( 'administrator' );
 
-		// Set up a default request
+		// Set up a default request.
 		$_POST['_ajax_nonce-replyto-comment'] = wp_create_nonce( 'replyto-comment' );
 		$_POST['comment_ID']                  = 123456789;
 		$_POST['content']                     = 'Lorem ipsum dolor sit amet, consectetur adipiscing elit.';
 
-		// Make the request
+		// Make the request.
 		$this->setExpectedException( 'WPAjaxDieStopException', '-1' );
 		$this->_handleAjax( 'edit-comment' );
 	}
+
+	/**
+	 * @ticket 39732
+	 */
+	public function test_wp_update_comment_data_is_wp_error() {
+		// Become an administrator.
+		$this->_setRole( 'administrator' );
+
+		// Get a comment.
+		$comments = get_comments(
+			array(
+				'post_id' => $this->_comment_post->ID,
+			)
+		);
+		$comment  = array_pop( $comments );
+
+		// Set up a default request.
+		$_POST['_ajax_nonce-replyto-comment'] = wp_create_nonce( 'replyto-comment' );
+		$_POST['comment_ID']                  = $comment->comment_ID;
+		$_POST['content']                     = 'Lorem ipsum dolor sit amet, consectetur adipiscing elit.';
+
+		// Simulate filter check error.
+		add_filter( 'wp_update_comment_data', array( $this, '_wp_update_comment_data_filter' ), 10, 3 );
+
+		// Make the request.
+		$this->setExpectedException( 'WPAjaxDieStopException', 'wp_update_comment_data filter fails for this comment.' );
+		$this->_handleAjax( 'edit-comment' );
+	}
+
+	/**
+	 * Blocks comments from being updated by returning WP_Error.
+	 */
+	public function _wp_update_comment_data_filter( $data, $comment, $commentarr ) {
+		return new WP_Error( 'comment_wrong', 'wp_update_comment_data filter fails for this comment.', 500 );
+	}
 }
diff --git a/tests/ajax/GetComments.php b/tests/ajax/GetComments.php
index 834500e3ff..b1812ca892 100644
--- a/tests/ajax/GetComments.php
+++ b/tests/ajax/GetComments.php
@@ -1,12 +1,12 @@
 <?php
 
 /**
- * Admin ajax functions to be tested
+ * Admin Ajax functions to be tested.
  */
-require_once( ABSPATH . 'wp-admin/includes/ajax-actions.php' );
+require_once ABSPATH . 'wp-admin/includes/ajax-actions.php';
 
 /**
- * Testing ajax comment functionality
+ * Testing Ajax comment functionality.
  *
  * @package    WordPress
  * @subpackage UnitTests
@@ -16,14 +16,14 @@ require_once( ABSPATH . 'wp-admin/includes/ajax-actions.php' );
 class Tests_Ajax_GetComments extends WP_Ajax_UnitTestCase {
 
 	/**
-	 * A post with at least one comment
+	 * A post with at least one comment.
 	 *
 	 * @var mixed
 	 */
 	protected static $comment_post = null;
 
 	/**
-	 * A post with no comments
+	 * A post with no comments.
 	 *
 	 * @var mixed
 	 */
@@ -38,123 +38,116 @@ class Tests_Ajax_GetComments extends WP_Ajax_UnitTestCase {
 	}
 
 	/**
-	 * Get comments as a privilged user (administrator)
-	 * Expects test to pass
+	 * Gets comments as a privileged user (administrator).
 	 *
-	 * @return void
+	 * Expects test to pass.
 	 */
 	public function test_as_admin() {
 
-		// Become an administrator
+		// Become an administrator.
 		$this->_setRole( 'administrator' );
 
-		// Set up a default request
+		// Set up a default request.
 		$_POST['_ajax_nonce'] = wp_create_nonce( 'get-comments' );
 		$_POST['action']      = 'get-comments';
 		$_POST['p']           = self::$comment_post->ID;
 
-		// Make the request
+		// Make the request.
 		try {
 			$this->_handleAjax( 'get-comments' );
 		} catch ( WPAjaxDieContinueException $e ) {
 			unset( $e );
 		}
 
-		// Get the response
+		// Get the response.
 		$xml = simplexml_load_string( $this->_last_response, 'SimpleXMLElement', LIBXML_NOCDATA );
 
-		// Check the meta data
-		$this->assertEquals( 1, (string) $xml->response[0]->comments['position'] );
-		$this->assertEquals( 0, (string) $xml->response[0]->comments['id'] );
-		$this->assertEquals( 'get-comments_0', (string) $xml->response['action'] );
+		// Check the meta data.
+		$this->assertSame( '1', (string) $xml->response[0]->comments['position'] );
+		$this->assertSame( '0', (string) $xml->response[0]->comments['id'] );
+		$this->assertSame( 'get-comments_0', (string) $xml->response['action'] );
 
-		// Check the payload
+		// Check the payload.
 		$this->assertNotEmpty( (string) $xml->response[0]->comments[0]->response_data );
 
-		// And supplemental is empty
+		// And supplemental is empty.
 		$this->assertEmpty( (string) $xml->response[0]->comments[0]->supplemental );
 	}
 
 	/**
-	 * Get comments as a non-privileged user (subscriber)
-	 * Expects test to fail
+	 * Gets comments as a non-privileged user (subscriber).
 	 *
-	 * @return void
+	 * Expects test to fail.
 	 */
 	public function test_as_subscriber() {
 
-		// Become a subscriber
+		// Become a subscriber.
 		$this->_setRole( 'subscriber' );
 
-		// Set up a default request
+		// Set up a default request.
 		$_POST['_ajax_nonce'] = wp_create_nonce( 'get-comments' );
 		$_POST['action']      = 'get-comments';
 		$_POST['p']           = self::$comment_post->ID;
 
-		// Make the request
+		// Make the request.
 		$this->setExpectedException( 'WPAjaxDieStopException', '-1' );
 		$this->_handleAjax( 'get-comments' );
 	}
 
 	/**
-	 * Get comments with a bad nonce
-	 * Expects test to fail
+	 * Gets comments with a bad nonce.
 	 *
-	 * @return void
+	 * Expects test to fail.
 	 */
 	public function test_bad_nonce() {
 
-		// Become an administrator
+		// Become an administrator.
 		$this->_setRole( 'administrator' );
 
-		// Set up a default request
+		// Set up a default request.
 		$_POST['_ajax_nonce'] = wp_create_nonce( uniqid() );
 		$_POST['action']      = 'get-comments';
 		$_POST['p']           = self::$comment_post->ID;
 
-		// Make the request
+		// Make the request.
 		$this->setExpectedException( 'WPAjaxDieStopException', '-1' );
 		$this->_handleAjax( 'get-comments' );
 	}
 
 	/**
-	 * Get comments for an invalid post
-	 * Bad post IDs are set to 0, this should return valid XML
+	 * Gets comments for an invalid post.
 	 *
-	 * @return void
+	 * Bad post IDs are set to 0, this should return valid XML.
 	 */
 	public function test_invalid_post() {
 
-		// Become an administrator
+		// Become an administrator.
 		$this->_setRole( 'administrator' );
 
-		// Set up a default request
+		// Set up a default request.
 		$_POST['_ajax_nonce'] = wp_create_nonce( 'get-comments' );
 		$_POST['action']      = 'get-comments';
 		$_POST['p']           = 'b0rk';
 
-		// Make the request
+		// Make the request.
 		$this->setExpectedException( 'WPAjaxDieStopException', '-1' );
 		$this->_handleAjax( 'get-comments' );
 	}
 
 	/**
-	 * Get comments for an invalid post
-	 * Bad post IDs are set to 0, this should return valid XML
-	 *
-	 * @return void
+	 * Gets comments for a post with no comments.
 	 */
 	public function test_post_with_no_comments() {
 
-		// Become an administrator
+		// Become an administrator.
 		$this->_setRole( 'administrator' );
 
-		// Set up a default request
+		// Set up a default request.
 		$_POST['_ajax_nonce'] = wp_create_nonce( 'get-comments' );
 		$_POST['action']      = 'get-comments';
 		$_POST['p']           = self::$no_comment_post->ID;
 
-		// Make the request
+		// Make the request.
 		$this->setExpectedException( 'WPAjaxDieStopException', '1' );
 		$this->_handleAjax( 'get-comments' );
 	}
diff --git a/tests/ajax/ManageThemes.php b/tests/ajax/ManageThemes.php
index b913d39ba4..024dd1b6e8 100644
--- a/tests/ajax/ManageThemes.php
+++ b/tests/ajax/ManageThemes.php
@@ -1,8 +1,8 @@
 <?php
 /**
- * Admin ajax functions to be tested
+ * Admin Ajax functions to be tested.
  */
-require_once( ABSPATH . 'wp-admin/includes/ajax-actions.php' );
+require_once ABSPATH . 'wp-admin/includes/ajax-actions.php';
 
 /**
  * Testing Ajax handler for instlaling, updating, and deleting themes.
@@ -70,7 +70,7 @@ class Tests_Ajax_Manage_Themes extends WP_Ajax_UnitTestCase {
 			),
 		);
 
-		$this->assertEqualSets( $expected, $response );
+		$this->assertSameSets( $expected, $response );
 	}
 
 	public function test_missing_capability() {
@@ -92,13 +92,13 @@ class Tests_Ajax_Manage_Themes extends WP_Ajax_UnitTestCase {
 			'data'    => array(
 				'update'       => 'theme',
 				'slug'         => 'foo',
-				'errorMessage' => 'Sorry, you are not allowed to update themes for this site.',
 				'oldVersion'   => '',
 				'newVersion'   => '',
+				'errorMessage' => 'Sorry, you are not allowed to update themes for this site.',
 			),
 		);
 
-		$this->assertEqualSets( $expected, $response );
+		$this->assertSameSets( $expected, $response );
 	}
 
 	public function test_update_theme() {
@@ -128,14 +128,14 @@ class Tests_Ajax_Manage_Themes extends WP_Ajax_UnitTestCase {
 			'data'    => array(
 				'update'       => 'theme',
 				'slug'         => 'twentyten',
-				'errorMessage' => 'The theme is at the latest version.',
 				'oldVersion'   => $theme->get( 'Version' ),
 				'newVersion'   => '',
 				'debug'        => array( 'The theme is at the latest version.' ),
+				'errorMessage' => 'The theme is at the latest version.',
 			),
 		);
 
-		$this->assertEqualSets( $expected, $response );
+		$this->assertSameSets( $expected, $response );
 	}
 
 	function test_uppercase_theme_slug() {
@@ -161,11 +161,11 @@ class Tests_Ajax_Manage_Themes extends WP_Ajax_UnitTestCase {
 				'slug'         => 'camelCase',
 				'oldVersion'   => '1.0',
 				'newVersion'   => '',
-				'errorMessage' => 'The theme is at the latest version.',
 				'debug'        => array( 'The theme is at the latest version.' ),
+				'errorMessage' => 'The theme is at the latest version.',
 			),
 		);
 
-		$this->assertEqualSets( $expected, $response );
+		$this->assertSameSets( $expected, $response );
 	}
 }
diff --git a/tests/ajax/MediaEdit.php b/tests/ajax/MediaEdit.php
index b36f342158..61c262b013 100644
--- a/tests/ajax/MediaEdit.php
+++ b/tests/ajax/MediaEdit.php
@@ -1,11 +1,11 @@
 <?php
 /**
- * Admin ajax functions to be tested
+ * Admin Ajax functions to be tested.
  */
-require_once( ABSPATH . 'wp-admin/includes/ajax-actions.php' );
+require_once ABSPATH . 'wp-admin/includes/ajax-actions.php';
 
 /**
- * Testing ajax media editing
+ * Testing Ajax media editing.
  *
  * @package    WordPress
  * @subpackage UnitTests
@@ -18,7 +18,7 @@ class Tests_Ajax_MediaEdit extends WP_Ajax_UnitTestCase {
 	 * Tear down the test fixture.
 	 */
 	public function tearDown() {
-		// Cleanup
+		// Cleanup.
 		$this->remove_added_uploads();
 		parent::tearDown();
 	}
@@ -27,7 +27,7 @@ class Tests_Ajax_MediaEdit extends WP_Ajax_UnitTestCase {
 	 * @ticket 22985
 	 */
 	public function testCropImageThumbnail() {
-		include_once( ABSPATH . 'wp-admin/includes/image-edit.php' );
+		require_once ABSPATH . 'wp-admin/includes/image-edit.php';
 
 		$filename = DIR_TESTDATA . '/images/canola.jpg';
 		$contents = file_get_contents( $filename );
@@ -58,7 +58,7 @@ class Tests_Ajax_MediaEdit extends WP_Ajax_UnitTestCase {
 	public function testImageEditOverwriteConstant() {
 		define( 'IMAGE_EDIT_OVERWRITE', true );
 
-		include_once( ABSPATH . 'wp-admin/includes/image-edit.php' );
+		require_once ABSPATH . 'wp-admin/includes/image-edit.php';
 
 		$filename = DIR_TESTDATA . '/images/canola.jpg';
 		$contents = file_get_contents( $filename );
diff --git a/tests/ajax/PrivacyErasePersonalData.php b/tests/ajax/PrivacyErasePersonalData.php
index 6bab7ca855..3eb54a6df4 100644
--- a/tests/ajax/PrivacyErasePersonalData.php
+++ b/tests/ajax/PrivacyErasePersonalData.php
@@ -140,7 +140,7 @@ class Tests_Ajax_PrivacyErasePersonalData extends WP_Ajax_UnitTestCase {
 		add_filter( 'wp_privacy_personal_data_erasers', array( $this, 'register_custom_personal_data_eraser' ) );
 
 		$this->_setRole( 'administrator' );
-		// erase_others_personal_data meta cap in Multisite installation is only granted to those with `manage_network` capability.
+		// `erase_others_personal_data` meta cap in Multisite installation is only granted to those with `manage_network` capability.
 		if ( is_multisite() ) {
 			grant_super_admin( get_current_user_id() );
 		}
@@ -177,7 +177,7 @@ class Tests_Ajax_PrivacyErasePersonalData extends WP_Ajax_UnitTestCase {
 	 *
 	 * @param array $erasers List of data erasers.
 	 *
-	 * @return array $erasersList of data erasers.
+	 * @return array Array of data erasers.
 	 */
 	public function filter_eraser_callback_value( $erasers ) {
 		$erasers[ self::$eraser_key ]['callback'] = $this->new_callback_value;
@@ -204,7 +204,7 @@ class Tests_Ajax_PrivacyErasePersonalData extends WP_Ajax_UnitTestCase {
 	 *
 	 * @param array $erasers Erasers.
 	 *
-	 * @return array $erasers Erasers.
+	 * @return array Erasers.
 	 */
 	public function filter_unset_eraser_index( $erasers ) {
 		if ( false === $this->key_to_unset ) {
@@ -236,7 +236,7 @@ class Tests_Ajax_PrivacyErasePersonalData extends WP_Ajax_UnitTestCase {
 	 * @param string $email_address The requester's email address.
 	 * @param int    $page          Page number.
 	 *
-	 * @return array $return Export data.
+	 * @return array Export data.
 	 */
 	public function filter_unset_response_index( $email_address, $page = 1 ) {
 		$response = $this->callback_personal_data_eraser( $email_address, $page );
@@ -312,15 +312,11 @@ class Tests_Ajax_PrivacyErasePersonalData extends WP_Ajax_UnitTestCase {
 	/**
 	 * Test requests do not succeed on multisite when the current user is not a network admin.
 	 *
-	 * @group multisite
-	 *
 	 * @ticket 43438
+	 * @group multisite
+	 * @group ms-required
 	 */
 	public function test_error_when_current_user_missing_required_capabilities_multisite() {
-		if ( ! is_multisite() ) {
-			$this->markTestSkipped( 'This test only runs on multisite.' );
-		}
-
 		revoke_super_admin( get_current_user_id() );
 
 		$this->_make_ajax_call();
@@ -649,7 +645,7 @@ class Tests_Ajax_PrivacyErasePersonalData extends WP_Ajax_UnitTestCase {
 	 * @param string $email_address The requester's email address.
 	 * @param int    $page          Page number.
 	 *
-	 * @return array $return Export data.
+	 * @return array Export data.
 	 */
 	public function filter_response_messages_invalid( $email_address, $page = 1 ) {
 		$response             = $this->callback_personal_data_eraser( $email_address, $page );
@@ -770,7 +766,7 @@ class Tests_Ajax_PrivacyErasePersonalData extends WP_Ajax_UnitTestCase {
 	 *
 	 * @param array $erasers An array of personal data erasers.
 	 *
-	 * @return array $erasers An array of personal data erasers.
+	 * @return array An array of personal data erasers.
 	 */
 	public function register_custom_personal_data_eraser( $erasers ) {
 		$erasers[ self::$eraser_key ] = array(
@@ -788,7 +784,7 @@ class Tests_Ajax_PrivacyErasePersonalData extends WP_Ajax_UnitTestCase {
 	 * @param  string $email_address The comment author email address.
 	 * @param  int    $page          Page number.
 	 *
-	 * @return array  $return Erase data.
+	 * @return array Erase data.
 	 */
 	public function callback_personal_data_eraser( $email_address, $page = 1 ) {
 		if ( 1 === $page ) {
@@ -809,7 +805,7 @@ class Tests_Ajax_PrivacyErasePersonalData extends WP_Ajax_UnitTestCase {
 	}
 
 	/**
-	 * Helper function for ajax handler.
+	 * Helper function for Ajax handler.
 	 *
 	 * @since 5.2.0
 	 *
diff --git a/tests/ajax/PrivacyExportPersonalData.php b/tests/ajax/PrivacyExportPersonalData.php
index 0140654c0a..6e5c9b8a5b 100644
--- a/tests/ajax/PrivacyExportPersonalData.php
+++ b/tests/ajax/PrivacyExportPersonalData.php
@@ -154,7 +154,7 @@ class Tests_Ajax_PrivacyExportPersonalData extends WP_Ajax_UnitTestCase {
 		add_filter( 'wp_privacy_personal_data_exporters', array( $this, 'filter_register_custom_personal_data_exporter' ) );
 
 		$this->_setRole( 'administrator' );
-		// export_others_personal_data meta cap in Multisite installation is only granted to those with `manage_network` capability.
+		// `export_others_personal_data` meta cap in Multisite installation is only granted to those with `manage_network` capability.
 		if ( is_multisite() ) {
 			grant_super_admin( get_current_user_id() );
 		}
@@ -188,7 +188,7 @@ class Tests_Ajax_PrivacyExportPersonalData extends WP_Ajax_UnitTestCase {
 	 * @since 5.2.0
 	 *
 	 * @param array $exporters List of data exporters.
-	 * @return array $exporters List of data exporters.
+	 * @return array List of data exporters.
 	 */
 	public function filter_exporter_callback_value( $exporters ) {
 		$exporters[ self::$exporter_key ]['callback'] = $this->new_callback_value;
@@ -211,7 +211,7 @@ class Tests_Ajax_PrivacyExportPersonalData extends WP_Ajax_UnitTestCase {
 	 *
 	 * @param array $exporters List of data exporters.
 	 *
-	 * @return array $exporters List of data exporters.
+	 * @return array List of data exporters.
 	 */
 	public function filter_unset_exporter_key( $exporters ) {
 		if ( false === $this->key_to_unset ) {
@@ -273,15 +273,11 @@ class Tests_Ajax_PrivacyExportPersonalData extends WP_Ajax_UnitTestCase {
 	/**
 	 * Test requests do not succeed on multisite when the current user is not a network admin.
 	 *
-	 * @group multisite
-	 *
 	 * @ticket 43438
+	 * @group multisite
+	 * @group ms-required
 	 */
 	public function test_error_when_current_user_missing_required_capability_multisite() {
-		if ( ! is_multisite() ) {
-			$this->markTestSkipped( 'This test only runs on multisite.' );
-		}
-
 		revoke_super_admin( get_current_user_id() );
 
 		$this->_make_ajax_call();
@@ -589,7 +585,7 @@ class Tests_Ajax_PrivacyExportPersonalData extends WP_Ajax_UnitTestCase {
 	 * @param string $email_address The requester's email address.
 	 * @param int    $page          Page number.
 	 *
-	 * @return array $return Export data.
+	 * @return array Export data.
 	 */
 	public function callback_missing_data_response( $email_address, $page = 1 ) {
 		$response = $this->callback_custom_personal_data_exporter( $email_address, $page );
@@ -625,7 +621,7 @@ class Tests_Ajax_PrivacyExportPersonalData extends WP_Ajax_UnitTestCase {
 	 * @param  string $email_address The requester's email address.
 	 * @param  int    $page          Page number.
 	 *
-	 * @return array $return Export data.
+	 * @return array Export data.
 	 */
 	public function callback_missing_data_array_response( $email_address, $page = 1 ) {
 		$response         = $this->callback_custom_personal_data_exporter( $email_address, $page );
@@ -660,7 +656,7 @@ class Tests_Ajax_PrivacyExportPersonalData extends WP_Ajax_UnitTestCase {
 	 * @param string $email_address The requester's email address.
 	 * @param int    $page          Page number.
 	 *
-	 * @return array $return Export data.
+	 * @return array Export data.
 	 */
 	public function callback_missing_done_response( $email_address, $page = 1 ) {
 		$response = $this->callback_custom_personal_data_exporter( $email_address, $page );
@@ -739,7 +735,7 @@ class Tests_Ajax_PrivacyExportPersonalData extends WP_Ajax_UnitTestCase {
 	 * @param bool   $send_as_email   Whether the final results of the export should be emailed to the user.
 	 * @param string $exporter_key    The key (slug) of the exporter that provided this data.
 	 *
-	 * @return array $response The personal data for the given exporter and page.
+	 * @return array The personal data for the given exporter and page.
 	 */
 	public function filter_exporter_data_response( $response, $exporter_index, $email_address, $page, $request_id, $send_as_email, $exporter_key ) {
 		$group_label                  = sprintf(
@@ -767,7 +763,7 @@ class Tests_Ajax_PrivacyExportPersonalData extends WP_Ajax_UnitTestCase {
 	 *
 	 * @param array $exporters An array of personal data exporters.
 	 *
-	 * @return array $exporters An array of personal data exporters.
+	 * @return array An array of personal data exporters.
 	 */
 	public function filter_register_custom_personal_data_exporter( $exporters ) {
 		$exporters[ self::$exporter_key ] = array(
@@ -785,7 +781,7 @@ class Tests_Ajax_PrivacyExportPersonalData extends WP_Ajax_UnitTestCase {
 	 * @param string $email_address The requester's email address.
 	 * @param int    $page          Page number.
 	 *
-	 * @return array $response Export data response.
+	 * @return array Export data response.
 	 */
 	public function callback_custom_personal_data_exporter( $email_address, $page = 1 ) {
 		$data_to_export = array();
@@ -811,7 +807,7 @@ class Tests_Ajax_PrivacyExportPersonalData extends WP_Ajax_UnitTestCase {
 	}
 
 	/**
-	 * Helper function for ajax handler.
+	 * Helper function for Ajax handler.
 	 *
 	 * @since 5.2.0
 	 *
diff --git a/tests/ajax/QuickEdit.php b/tests/ajax/QuickEdit.php
index 5f891ef9b7..2369930cfb 100644
--- a/tests/ajax/QuickEdit.php
+++ b/tests/ajax/QuickEdit.php
@@ -1,9 +1,9 @@
 <?php
 
 /**
- * Admin ajax functions to be tested
+ * Admin Ajax functions to be tested.
  */
-require_once( ABSPATH . 'wp-admin/includes/ajax-actions.php' );
+require_once ABSPATH . 'wp-admin/includes/ajax-actions.php';
 
 /**
  * Testing Quick Edit AJAX functionality.
@@ -75,12 +75,12 @@ class Tests_Ajax_QuickEdit extends WP_Ajax_UnitTestCase {
 			unset( $e );
 		}
 
-		// wptests_tax_1 terms should have been refused.
+		// 'wptests_tax_1' terms should have been refused.
 		$post_terms_1 = wp_get_object_terms( $post->ID, 'wptests_tax_1' );
 		$this->assertEmpty( $post_terms_1 );
 
-		// wptests_tax_2 terms should have been added successfully.
+		// 'wptests_tax_2' terms should have been added successfully.
 		$post_terms_2 = wp_get_object_terms( $post->ID, 'wptests_tax_2' );
-		$this->assertEqualSets( array( $t2 ), wp_list_pluck( $post_terms_2, 'term_id' ) );
+		$this->assertSameSets( array( $t2 ), wp_list_pluck( $post_terms_2, 'term_id' ) );
 	}
 }
diff --git a/tests/ajax/ReplytoComment.php b/tests/ajax/ReplytoComment.php
index 6a6318ab9d..2b160c4597 100644
--- a/tests/ajax/ReplytoComment.php
+++ b/tests/ajax/ReplytoComment.php
@@ -1,12 +1,12 @@
 <?php
 
 /**
- * Admin ajax functions to be tested
+ * Admin Ajax functions to be tested.
  */
-require_once( ABSPATH . 'wp-admin/includes/ajax-actions.php' );
+require_once ABSPATH . 'wp-admin/includes/ajax-actions.php';
 
 /**
- * Testing ajax comment functionality
+ * Testing Ajax comment functionality.
  *
  * @package    WordPress
  * @subpackage UnitTests
@@ -16,14 +16,14 @@ require_once( ABSPATH . 'wp-admin/includes/ajax-actions.php' );
 class Tests_Ajax_ReplytoComment extends WP_Ajax_UnitTestCase {
 
 	/**
-	 * A post with at least one comment
+	 * A post with at least one comment.
 	 *
 	 * @var mixed
 	 */
 	protected static $comment_post = null;
 
 	/**
-	 * Draft post
+	 * Draft post.
 	 *
 	 * @var mixed
 	 */
@@ -43,17 +43,16 @@ class Tests_Ajax_ReplytoComment extends WP_Ajax_UnitTestCase {
 	}
 
 	/**
-	 * Reply as a privilged user (administrator)
-	 * Expects test to pass
+	 * Tests reply as a privileged user (administrator).
 	 *
-	 * @return void
+	 * Expects test to pass.
 	 */
 	public function test_as_admin() {
 
-		// Become an administrator
+		// Become an administrator.
 		$this->_setRole( 'administrator' );
 
-		// Get a comment
+		// Get a comment.
 		$comments = get_comments(
 			array(
 				'post_id' => self::$comment_post->ID,
@@ -61,46 +60,45 @@ class Tests_Ajax_ReplytoComment extends WP_Ajax_UnitTestCase {
 		);
 		$comment  = array_pop( $comments );
 
-		// Set up a default request
+		// Set up a default request.
 		$_POST['_ajax_nonce-replyto-comment'] = wp_create_nonce( 'replyto-comment' );
 		$_POST['comment_ID']                  = $comment->comment_ID;
 		$_POST['content']                     = 'Lorem ipsum dolor sit amet, consectetur adipiscing elit.';
 		$_POST['comment_post_ID']             = self::$comment_post->ID;
 
-		// Make the request
+		// Make the request.
 		try {
 			$this->_handleAjax( 'replyto-comment' );
 		} catch ( WPAjaxDieContinueException $e ) {
 			unset( $e );
 		}
 
-		// Get the response
+		// Get the response.
 		$xml = simplexml_load_string( $this->_last_response, 'SimpleXMLElement', LIBXML_NOCDATA );
 
-		// Check the meta data
-		$this->assertEquals( -1, (string) $xml->response[0]->comment['position'] );
+		// Check the meta data.
+		$this->assertSame( '-1', (string) $xml->response[0]->comment['position'] );
 		$this->assertGreaterThan( 0, (int) $xml->response[0]->comment['id'] );
 		$this->assertNotEmpty( (string) $xml->response['action'] );
 
-		// Check the payload
+		// Check the payload.
 		$this->assertNotEmpty( (string) $xml->response[0]->comment[0]->response_data );
 
-		// And supplemental is empty
+		// And supplemental is empty.
 		$this->assertEmpty( (string) $xml->response[0]->comment[0]->supplemental );
 	}
 
 	/**
-	 * Reply as a non-privileged user (subscriber)
-	 * Expects test to fail
+	 * Tests reply as a non-privileged user (subscriber).
 	 *
-	 * @return void
+	 * Expects test to fail.
 	 */
 	public function test_as_subscriber() {
 
-		// Become an administrator
+		// Become an administrator.
 		$this->_setRole( 'subscriber' );
 
-		// Get a comment
+		// Get a comment.
 		$comments = get_comments(
 			array(
 				'post_id' => self::$comment_post->ID,
@@ -108,29 +106,28 @@ class Tests_Ajax_ReplytoComment extends WP_Ajax_UnitTestCase {
 		);
 		$comment  = array_pop( $comments );
 
-		// Set up a default request
+		// Set up a default request.
 		$_POST['_ajax_nonce-replyto-comment'] = wp_create_nonce( 'replyto-comment' );
 		$_POST['comment_ID']                  = $comment->comment_ID;
 		$_POST['content']                     = 'Lorem ipsum dolor sit amet, consectetur adipiscing elit.';
 		$_POST['comment_post_ID']             = self::$comment_post->ID;
 
-		// Make the request
+		// Make the request.
 		$this->setExpectedException( 'WPAjaxDieStopException', '-1' );
 		$this->_handleAjax( 'replyto-comment' );
 	}
 
 	/**
-	 * Reply using a bad nonce
-	 * Expects test to fail
+	 * Tests reply using a bad nonce.
 	 *
-	 * @return void
+	 * Expects test to fail.
 	 */
 	public function test_bad_nonce() {
 
-		// Become an administrator
+		// Become an administrator.
 		$this->_setRole( 'administrator' );
 
-		// Get a comment
+		// Get a comment.
 		$comments = get_comments(
 			array(
 				'post_id' => self::$comment_post->ID,
@@ -138,81 +135,79 @@ class Tests_Ajax_ReplytoComment extends WP_Ajax_UnitTestCase {
 		);
 		$comment  = array_pop( $comments );
 
-		// Set up a default request
+		// Set up a default request.
 		$_POST['_ajax_nonce-replyto-comment'] = wp_create_nonce( uniqid() );
 		$_POST['comment_ID']                  = $comment->comment_ID;
 		$_POST['content']                     = 'Lorem ipsum dolor sit amet, consectetur adipiscing elit.';
 		$_POST['comment_post_ID']             = self::$comment_post->ID;
 
-		// Make the request
+		// Make the request.
 		$this->setExpectedException( 'WPAjaxDieStopException', '-1' );
 		$this->_handleAjax( 'replyto-comment' );
 	}
 
 	/**
-	 * Reply to an invalid post
-	 * Expects test to fail
+	 * Tests reply to an invalid post.
 	 *
-	 * @return void
+	 * Expects test to fail.
 	 */
 	public function test_invalid_post() {
 
-		// Become an administrator
+		// Become an administrator.
 		$this->_setRole( 'administrator' );
 
-		// Set up a default request
+		// Set up a default request.
 		$_POST['_ajax_nonce-replyto-comment'] = wp_create_nonce( 'replyto-comment' );
 		$_POST['content']                     = 'Lorem ipsum dolor sit amet, consectetur adipiscing elit.';
 		$_POST['comment_post_ID']             = 123456789;
 
-		// Make the request
+		// Make the request.
 		$this->setExpectedException( 'WPAjaxDieStopException', '-1' );
 		$this->_handleAjax( 'replyto-comment' );
 	}
 
 	/**
-	 * Reply to a draft post
-	 * Expects test to fail
+	 * Tests reply to a draft post.
 	 *
-	 * @return void
+	 * Expects test to fail.
 	 */
 	public function test_with_draft_post() {
 
-		// Become an administrator
+		// Become an administrator.
 		$this->_setRole( 'administrator' );
 
-		// Set up a default request
+		// Set up a default request.
 		$_POST['_ajax_nonce-replyto-comment'] = wp_create_nonce( 'replyto-comment' );
 		$_POST['content']                     = 'Lorem ipsum dolor sit amet, consectetur adipiscing elit.';
 		$_POST['comment_post_ID']             = self::$draft_post->ID;
 
-		// Make the request
-		$this->setExpectedException( 'WPAjaxDieStopException', 'ERROR: you are replying to a comment on a draft post.' );
+		// Make the request.
+		$this->setExpectedException( 'WPAjaxDieStopException', 'Error: You can&#8217;t reply to a comment on a draft post.' );
 		$this->_handleAjax( 'replyto-comment' );
 	}
 
 	/**
-	 * Reply to a post with a simulated database failure
-	 * Expects test to fail
+	 * Tests reply to a post with a simulated database failure.
+	 *
+	 * Expects test to fail.
 	 *
 	 * @global $wpdb
-	 * @return void
 	 */
 	public function test_blocked_comment() {
 		global $wpdb;
 
-		// Become an administrator
+		// Become an administrator.
 		$this->_setRole( 'administrator' );
 
-		// Set up a default request
+		// Set up a default request.
 		$_POST['_ajax_nonce-replyto-comment'] = wp_create_nonce( 'replyto-comment' );
 		$_POST['content']                     = 'Lorem ipsum dolor sit amet, consectetur adipiscing elit.';
 		$_POST['comment_post_ID']             = self::$comment_post->ID;
 
-		// Block comments from being saved, simulate a DB error
+		// Block comments from being saved, simulate a DB error.
 		add_filter( 'query', array( $this, '_block_comments' ) );
 
-		// Make the request
+		// Make the request.
 		try {
 			$wpdb->suppress_errors( true );
 			$this->_handleAjax( 'replyto-comment' );
@@ -225,7 +220,7 @@ class Tests_Ajax_ReplytoComment extends WP_Ajax_UnitTestCase {
 	}
 
 	/**
-	 * Block comments from being saved
+	 * Blocks comments from being saved.
 	 *
 	 * @param string $sql
 	 * @return string
@@ -239,31 +234,30 @@ class Tests_Ajax_ReplytoComment extends WP_Ajax_UnitTestCase {
 	}
 
 	/**
-	 * Raises WP_Error after Posted a new pre comment
+	 * Tests blocking a comment from being saved on 'pre_comment_approved'.
 	 *
 	 * @ticket 39730
-	 * @return void
 	 */
 	public function test_pre_comments_approved() {
 
-		// Become an administrator
+		// Become an administrator.
 		$this->_setRole( 'administrator' );
 
-		// Set up a default request
+		// Set up a default request.
 		$_POST['_ajax_nonce-replyto-comment'] = wp_create_nonce( 'replyto-comment' );
 		$_POST['content']                     = 'Lorem ipsum dolor sit amet, consectetur adipiscing elit.';
 		$_POST['comment_post_ID']             = self::$comment_post->ID;
 
-		// Simulate filter check error
+		// Simulate filter check error.
 		add_filter( 'pre_comment_approved', array( $this, '_pre_comment_approved_filter' ), 10, 2 );
 
-		// Make the request
+		// Make the request.
 		$this->setExpectedException( 'WPAjaxDieStopException', 'pre_comment_approved filter fails for new comment' );
 		$this->_handleAjax( 'replyto-comment' );
 	}
 
 	/**
-	 *  Block comments from being saved 'pre_comment_approved', by returning WP_Error
+	 * Blocks comments from being saved on 'pre_comment_approved', by returning WP_Error.
 	 */
 	function _pre_comment_approved_filter( $approved, $commentdata ) {
 		return new WP_Error( 'comment_wrong', 'pre_comment_approved filter fails for new comment', 403 );
diff --git a/tests/ajax/Response.php b/tests/ajax/Response.php
index 83def22b8f..c8e4e3b129 100644
--- a/tests/ajax/Response.php
+++ b/tests/ajax/Response.php
@@ -1,6 +1,6 @@
 <?php
 /**
- * Testing ajax response class
+ * Testing Ajax response class
  *
  * @package    WordPress
  * @subpackage UnitTests
@@ -26,7 +26,7 @@ class Tests_Ajax_Response extends WP_UnitTestCase {
 		add_filter( 'wp_die_ajax_handler', array( $this, 'getDieHandler' ), 1, 1 );
 		add_filter( 'wp_doing_ajax', '__return_true' );
 
-		// Suppress warnings from "Cannot modify header information - headers already sent by"
+		// Suppress warnings from "Cannot modify header information - headers already sent by".
 		$this->_error_level = error_reporting();
 		error_reporting( $this->_error_level & ~E_WARNING );
 	}
@@ -77,12 +77,12 @@ class Tests_Ajax_Response extends WP_UnitTestCase {
 			$this->markTestSkipped( 'xdebug is required for this test' );
 		}
 
-		// Generate an ajax response
+		// Generate an Ajax response.
 		ob_start();
 		$ajax_response = new WP_Ajax_Response();
 		$ajax_response->send();
 
-		// Check the header
+		// Check the header.
 		$headers = xdebug_get_headers();
 		ob_end_clean();
 
@@ -96,12 +96,12 @@ class Tests_Ajax_Response extends WP_UnitTestCase {
 	 */
 	public function test_response_charset_in_xml() {
 
-		// Generate an ajax response
+		// Generate an Ajax response.
 		ob_start();
 		$ajax_response = new WP_Ajax_Response();
 		$ajax_response->send();
 
-		// Check the XML tag
+		// Check the XML tag.
 		$contents = ob_get_clean();
 		$this->assertRegExp( '/<\?xml\s+version=\'1.0\'\s+encoding=\'' . preg_quote( get_option( 'blog_charset' ) ) . '\'\s+standalone=\'yes\'\?>/', $contents );
 	}
diff --git a/tests/ajax/TagSearch.php b/tests/ajax/TagSearch.php
index 3a4f50296c..80a327ee93 100644
--- a/tests/ajax/TagSearch.php
+++ b/tests/ajax/TagSearch.php
@@ -1,12 +1,12 @@
 <?php
 
 /**
- * Admin ajax functions to be tested
+ * Admin Ajax functions to be tested.
  */
-require_once( ABSPATH . 'wp-admin/includes/ajax-actions.php' );
+require_once ABSPATH . 'wp-admin/includes/ajax-actions.php';
 
 /**
- * Testing ajax tag search functionality
+ * Testing Ajax tag search functionality.
  *
  * @package    WordPress
  * @subpackage UnitTests
@@ -42,22 +42,22 @@ class Tests_Ajax_TagSearch extends WP_Ajax_UnitTestCase {
 	 */
 	public function test_post_tag() {
 
-		// Become an administrator
+		// Become an administrator.
 		$this->_setRole( 'administrator' );
 
-		// Set up a default request
+		// Set up a default request.
 		$_GET['tax'] = 'post_tag';
 		$_GET['q']   = 'chat';
 
-		// Make the request
+		// Make the request.
 		try {
 			$this->_handleAjax( 'ajax-tag-search' );
 		} catch ( WPAjaxDieContinueException $e ) {
 			unset( $e );
 		}
 
-		// Ensure we found the right match
-		$this->assertEquals( $this->_last_response, 'chattels' );
+		// Ensure we found the right match.
+		$this->assertSame( $this->_last_response, 'chattels' );
 	}
 
 	/**
@@ -65,15 +65,15 @@ class Tests_Ajax_TagSearch extends WP_Ajax_UnitTestCase {
 	 */
 	public function test_no_results() {
 
-		// Become an administrator
+		// Become an administrator.
 		$this->_setRole( 'administrator' );
 
-		// Set up a default request
+		// Set up a default request.
 		$_GET['tax'] = 'post_tag';
 		$_GET['q']   = md5( uniqid() );
 
-		// Make the request
-		// No output, so we get a stop exception
+		// Make the request.
+		// No output, so we get a stop exception.
 		$this->setExpectedException( 'WPAjaxDieStopException', '' );
 		$this->_handleAjax( 'ajax-tag-search' );
 	}
@@ -83,22 +83,22 @@ class Tests_Ajax_TagSearch extends WP_Ajax_UnitTestCase {
 	 */
 	public function test_with_comma() {
 
-		// Become an administrator
+		// Become an administrator.
 		$this->_setRole( 'administrator' );
 
-		// Set up a default request
+		// Set up a default request.
 		$_GET['tax'] = 'post_tag';
-		$_GET['q']   = 'some,nonsense, terms,chat'; // Only the last term in the list is searched
+		$_GET['q']   = 'some,nonsense, terms,chat'; // Only the last term in the list is searched.
 
-		// Make the request
+		// Make the request.
 		try {
 			$this->_handleAjax( 'ajax-tag-search' );
 		} catch ( WPAjaxDieContinueException $e ) {
 			unset( $e );
 		}
 
-		// Ensure we found the right match
-		$this->assertEquals( $this->_last_response, 'chattels' );
+		// Ensure we found the right match.
+		$this->assertSame( $this->_last_response, 'chattels' );
 	}
 
 	/**
@@ -106,14 +106,14 @@ class Tests_Ajax_TagSearch extends WP_Ajax_UnitTestCase {
 	 */
 	public function test_logged_out() {
 
-		// Log out
+		// Log out.
 		wp_logout();
 
-		// Set up a default request
+		// Set up a default request.
 		$_GET['tax'] = 'post_tag';
 		$_GET['q']   = 'chat';
 
-		// Make the request
+		// Make the request.
 		$this->setExpectedException( 'WPAjaxDieStopException', '-1' );
 		$this->_handleAjax( 'ajax-tag-search' );
 	}
@@ -123,14 +123,14 @@ class Tests_Ajax_TagSearch extends WP_Ajax_UnitTestCase {
 	 */
 	public function test_invalid_tax() {
 
-		// Become an administrator
+		// Become an administrator.
 		$this->_setRole( 'administrator' );
 
-		// Set up a default request
+		// Set up a default request.
 		$_GET['tax'] = 'invalid-taxonomy';
 		$_GET['q']   = 'chat';
 
-		// Make the request
+		// Make the request.
 		$this->setExpectedException( 'WPAjaxDieStopException', '0' );
 		$this->_handleAjax( 'ajax-tag-search' );
 	}
@@ -140,14 +140,14 @@ class Tests_Ajax_TagSearch extends WP_Ajax_UnitTestCase {
 	 */
 	public function test_unprivileged_user() {
 
-		// Become an administrator
+		// Become a subscriber.
 		$this->_setRole( 'subscriber' );
 
-		// Set up a default request
+		// Set up a default request.
 		$_GET['tax'] = 'post_tag';
 		$_GET['q']   = 'chat';
 
-		// Make the request
+		// Make the request.
 		$this->setExpectedException( 'WPAjaxDieStopException', '-1' );
 		$this->_handleAjax( 'ajax-tag-search' );
 	}
diff --git a/tests/ajax/UpdatePlugin.php b/tests/ajax/UpdatePlugin.php
index ab76ee7cdd..81649da032 100644
--- a/tests/ajax/UpdatePlugin.php
+++ b/tests/ajax/UpdatePlugin.php
@@ -1,8 +1,8 @@
 <?php
 /**
- * Admin ajax functions to be tested
+ * Admin Ajax functions to be tested.
  */
-require_once( ABSPATH . 'wp-admin/includes/ajax-actions.php' );
+require_once ABSPATH . 'wp-admin/includes/ajax-actions.php';
 
 /**
  * Testing Ajax handler for updating a plugin.
@@ -22,7 +22,7 @@ class Tests_Ajax_Update_Plugin extends WP_Ajax_UnitTestCase {
 		$_POST['_ajax_nonce'] = wp_create_nonce( 'updates' );
 		$_POST['slug']        = 'foo';
 
-		// Make the request
+		// Make the request.
 		try {
 			$this->_handleAjax( 'update-plugin' );
 		} catch ( WPAjaxDieContinueException $e ) {
@@ -41,14 +41,14 @@ class Tests_Ajax_Update_Plugin extends WP_Ajax_UnitTestCase {
 			),
 		);
 
-		$this->assertEqualSets( $expected, $response );
+		$this->assertSameSets( $expected, $response );
 	}
 
 	public function test_missing_slug() {
 		$_POST['_ajax_nonce'] = wp_create_nonce( 'updates' );
 		$_POST['plugin']      = 'foo/bar.php';
 
-		// Make the request
+		// Make the request.
 		try {
 			$this->_handleAjax( 'update-plugin' );
 		} catch ( WPAjaxDieContinueException $e ) {
@@ -67,7 +67,7 @@ class Tests_Ajax_Update_Plugin extends WP_Ajax_UnitTestCase {
 			),
 		);
 
-		$this->assertEqualSets( $expected, $response );
+		$this->assertSameSets( $expected, $response );
 	}
 
 	public function test_missing_capability() {
@@ -75,7 +75,7 @@ class Tests_Ajax_Update_Plugin extends WP_Ajax_UnitTestCase {
 		$_POST['plugin']      = 'foo/bar.php';
 		$_POST['slug']        = 'foo';
 
-		// Make the request
+		// Make the request.
 		try {
 			$this->_handleAjax( 'update-plugin' );
 		} catch ( WPAjaxDieContinueException $e ) {
@@ -90,13 +90,13 @@ class Tests_Ajax_Update_Plugin extends WP_Ajax_UnitTestCase {
 			'data'    => array(
 				'update'       => 'plugin',
 				'slug'         => 'foo',
-				'errorMessage' => 'Sorry, you are not allowed to update plugins for this site.',
 				'oldVersion'   => '',
 				'newVersion'   => '',
+				'errorMessage' => 'Sorry, you are not allowed to update plugins for this site.',
 			),
 		);
 
-		$this->assertEqualSets( $expected, $response );
+		$this->assertSameSets( $expected, $response );
 	}
 
 	public function test_invalid_file() {
@@ -106,7 +106,7 @@ class Tests_Ajax_Update_Plugin extends WP_Ajax_UnitTestCase {
 		$_POST['plugin']      = '../foo/bar.php';
 		$_POST['slug']        = 'foo';
 
-		// Make the request
+		// Make the request.
 		try {
 			$this->_handleAjax( 'update-plugin' );
 		} catch ( WPAjaxDieContinueException $e ) {
@@ -121,13 +121,13 @@ class Tests_Ajax_Update_Plugin extends WP_Ajax_UnitTestCase {
 			'data'    => array(
 				'update'       => 'plugin',
 				'slug'         => 'foo',
-				'errorMessage' => 'Sorry, you are not allowed to update plugins for this site.',
 				'oldVersion'   => '',
 				'newVersion'   => '',
+				'errorMessage' => 'Sorry, you are not allowed to update plugins for this site.',
 			),
 		);
 
-		$this->assertEqualSets( $expected, $response );
+		$this->assertSameSets( $expected, $response );
 	}
 
 	public function test_update_plugin() {
@@ -137,9 +137,9 @@ class Tests_Ajax_Update_Plugin extends WP_Ajax_UnitTestCase {
 		$_POST['plugin']      = 'hello.php';
 		$_POST['slug']        = 'hello-dolly';
 
-		// Make the request
+		// Make the request.
 		try {
-			// Prevent wp_update_plugins() from running
+			// Prevent wp_update_plugins() from running.
 			wp_installing( true );
 			$this->_handleAjax( 'update-plugin' );
 			wp_installing( false );
@@ -155,15 +155,15 @@ class Tests_Ajax_Update_Plugin extends WP_Ajax_UnitTestCase {
 			'data'    => array(
 				'update'       => 'plugin',
 				'slug'         => 'hello-dolly',
-				'plugin'       => 'hello.php',
-				'pluginName'   => 'Hello Dolly',
-				'errorMessage' => 'Plugin update failed.',
 				'oldVersion'   => 'Version 1.7.2',
 				'newVersion'   => '',
+				'plugin'       => 'hello.php',
+				'pluginName'   => 'Hello Dolly',
 				'debug'        => array( 'The plugin is at the latest version.' ),
+				'errorMessage' => 'The plugin is at the latest version.',
 			),
 		);
 
-		$this->assertEqualSets( $expected, $response );
+		$this->assertSameSets( $expected, $response );
 	}
 }
diff --git a/tests/attachment/slashes.php b/tests/attachment/slashes.php
index 057a38ef4a..082efb110e 100644
--- a/tests/attachment/slashes.php
+++ b/tests/attachment/slashes.php
@@ -11,8 +11,8 @@ class Tests_Attachment_Slashes extends WP_UnitTestCase {
 		$this->author_id = self::factory()->user->create( array( 'role' => 'editor' ) );
 		wp_set_current_user( $this->author_id );
 
-		// it is important to test with both even and odd numbered slashes as
-		// kses does a strip-then-add slashes in some of its function calls
+		// It is important to test with both even and odd numbered slashes,
+		// as KSES does a strip-then-add slashes in some of its function calls.
 		$this->slash_1 = 'String with 1 slash \\';
 		$this->slash_2 = 'String with 2 slashes \\\\';
 		$this->slash_3 = 'String with 3 slashes \\\\\\';
@@ -23,7 +23,7 @@ class Tests_Attachment_Slashes extends WP_UnitTestCase {
 	}
 
 	/**
-	 * Tests the model function that expects slashed data
+	 * Tests the model function that expects slashed data.
 	 */
 	function test_wp_insert_attachment() {
 		$id   = wp_insert_attachment(
@@ -37,9 +37,9 @@ class Tests_Attachment_Slashes extends WP_UnitTestCase {
 		);
 		$post = get_post( $id );
 
-		$this->assertEquals( wp_unslash( $this->slash_1 ), $post->post_title );
-		$this->assertEquals( wp_unslash( $this->slash_3 ), $post->post_content_filtered );
-		$this->assertEquals( wp_unslash( $this->slash_5 ), $post->post_excerpt );
+		$this->assertSame( wp_unslash( $this->slash_1 ), $post->post_title );
+		$this->assertSame( wp_unslash( $this->slash_3 ), $post->post_content_filtered );
+		$this->assertSame( wp_unslash( $this->slash_5 ), $post->post_excerpt );
 
 		$id   = wp_insert_attachment(
 			array(
@@ -52,9 +52,9 @@ class Tests_Attachment_Slashes extends WP_UnitTestCase {
 		);
 		$post = get_post( $id );
 
-		$this->assertEquals( wp_unslash( $this->slash_2 ), $post->post_title );
-		$this->assertEquals( wp_unslash( $this->slash_4 ), $post->post_content_filtered );
-		$this->assertEquals( wp_unslash( $this->slash_6 ), $post->post_excerpt );
+		$this->assertSame( wp_unslash( $this->slash_2 ), $post->post_title );
+		$this->assertSame( wp_unslash( $this->slash_4 ), $post->post_content_filtered );
+		$this->assertSame( wp_unslash( $this->slash_6 ), $post->post_excerpt );
 	}
 
 }
diff --git a/tests/auth.php b/tests/auth.php
index a2a190f36c..f91da68073 100644
--- a/tests/auth.php
+++ b/tests/auth.php
@@ -11,7 +11,7 @@ class Tests_Auth extends WP_UnitTestCase {
 	protected static $wp_hasher;
 
 	/**
-	 * action hook
+	 * Action hook.
 	 */
 	protected $nonce_failure_hook = 'wp_verify_nonce_failed';
 
@@ -37,7 +37,7 @@ class Tests_Auth extends WP_UnitTestCase {
 
 	function test_auth_cookie_valid() {
 		$cookie = wp_generate_auth_cookie( self::$user_id, time() + 3600, 'auth' );
-		$this->assertEquals( self::$user_id, wp_validate_auth_cookie( $cookie, 'auth' ) );
+		$this->assertSame( self::$user_id, wp_validate_auth_cookie( $cookie, 'auth' ) );
 	}
 
 	function test_auth_cookie_invalid() {
@@ -45,25 +45,25 @@ class Tests_Auth extends WP_UnitTestCase {
 		// as an ajax test may have defined DOING_AJAX, failing the test.
 
 		$cookie = wp_generate_auth_cookie( self::$user_id, time() - 7200, 'auth' );
-		$this->assertEquals( false, wp_validate_auth_cookie( $cookie, 'auth' ), 'expired cookie' );
+		$this->assertFalse( wp_validate_auth_cookie( $cookie, 'auth' ), 'expired cookie' );
 
 		$cookie = wp_generate_auth_cookie( self::$user_id, time() + 3600, 'auth' );
-		$this->assertEquals( false, wp_validate_auth_cookie( $cookie, 'logged_in' ), 'wrong auth scheme' );
+		$this->assertFalse( wp_validate_auth_cookie( $cookie, 'logged_in' ), 'wrong auth scheme' );
 
 		$cookie          = wp_generate_auth_cookie( self::$user_id, time() + 3600, 'auth' );
 		list($a, $b, $c) = explode( '|', $cookie );
 		$cookie          = $a . '|' . ( $b + 1 ) . '|' . $c;
-		$this->assertEquals( false, wp_validate_auth_cookie( self::$user_id, 'auth' ), 'altered cookie' );
+		$this->assertFalse( wp_validate_auth_cookie( self::$user_id, 'auth' ), 'altered cookie' );
 	}
 
 	function test_auth_cookie_scheme() {
-		// arbitrary scheme name
+		// Arbitrary scheme name.
 		$cookie = wp_generate_auth_cookie( self::$user_id, time() + 3600, 'foo' );
-		$this->assertEquals( self::$user_id, wp_validate_auth_cookie( $cookie, 'foo' ) );
+		$this->assertSame( self::$user_id, wp_validate_auth_cookie( $cookie, 'foo' ) );
 
-		// wrong scheme name - should fail
+		// Wrong scheme name - should fail.
 		$cookie = wp_generate_auth_cookie( self::$user_id, time() + 3600, 'foo' );
-		$this->assertEquals( false, wp_validate_auth_cookie( $cookie, 'bar' ) );
+		$this->assertFalse( wp_validate_auth_cookie( $cookie, 'bar' ) );
 	}
 
 	/**
@@ -82,7 +82,7 @@ class Tests_Auth extends WP_UnitTestCase {
 			$authed_user = wp_authenticate( $this->user->user_login, $password_to_test );
 
 			$this->assertInstanceOf( 'WP_User', $authed_user );
-			$this->assertEquals( $this->user->ID, $authed_user->ID );
+			$this->assertSame( $this->user->ID, $authed_user->ID );
 		}
 	}
 
@@ -136,7 +136,7 @@ class Tests_Auth extends WP_UnitTestCase {
 
 		wp_verify_nonce( $nonce, 'nonce_test_action' );
 
-		$this->assertEquals( ( $count + 1 ), did_action( $this->nonce_failure_hook ) );
+		$this->assertSame( ( $count + 1 ), did_action( $this->nonce_failure_hook ) );
 	}
 
 	/**
@@ -148,7 +148,7 @@ class Tests_Auth extends WP_UnitTestCase {
 
 		wp_verify_nonce( $nonce, 'nonce_test_action' );
 
-		$this->assertEquals( $count, did_action( $this->nonce_failure_hook ) );
+		$this->assertSame( $count, did_action( $this->nonce_failure_hook ) );
 	}
 
 	/**
@@ -157,7 +157,7 @@ class Tests_Auth extends WP_UnitTestCase {
 	public function test_check_admin_referer_with_no_action_triggers_doing_it_wrong() {
 		$this->setExpectedIncorrectUsage( 'check_admin_referer' );
 
-		// A valid nonce needs to be set so the check doesn't die()
+		// A valid nonce needs to be set so the check doesn't die().
 		$_REQUEST['_wpnonce'] = wp_create_nonce( -1 );
 		$result               = check_admin_referer();
 		$this->assertSame( 1, $result );
@@ -166,7 +166,7 @@ class Tests_Auth extends WP_UnitTestCase {
 	}
 
 	public function test_check_admin_referer_with_default_action_as_string_not_doing_it_wrong() {
-		// A valid nonce needs to be set so the check doesn't die()
+		// A valid nonce needs to be set so the check doesn't die().
 		$_REQUEST['_wpnonce'] = wp_create_nonce( '-1' );
 		$result               = check_admin_referer( '-1' );
 		$this->assertSame( 1, $result );
@@ -180,7 +180,7 @@ class Tests_Auth extends WP_UnitTestCase {
 	public function test_check_ajax_referer_with_no_action_triggers_doing_it_wrong() {
 		$this->setExpectedIncorrectUsage( 'check_ajax_referer' );
 
-		// A valid nonce needs to be set so the check doesn't die()
+		// A valid nonce needs to be set so the check doesn't die().
 		$_REQUEST['_wpnonce'] = wp_create_nonce( -1 );
 		$result               = check_ajax_referer();
 		$this->assertSame( 1, $result );
@@ -192,26 +192,26 @@ class Tests_Auth extends WP_UnitTestCase {
 		$limit = str_repeat( 'a', 4096 );
 
 		wp_set_password( $limit, self::$user_id );
-		// phpass hashed password
+		// phpass hashed password.
 		$this->assertStringStartsWith( '$P$', $this->user->data->user_pass );
 
 		$user = wp_authenticate( $this->user->user_login, 'aaaaaaaa' );
-		// Wrong Password
+		// Wrong password.
 		$this->assertInstanceOf( 'WP_Error', $user );
 
 		$user = wp_authenticate( $this->user->user_login, $limit );
 		$this->assertInstanceOf( 'WP_User', $user );
-		$this->assertEquals( self::$user_id, $user->ID );
+		$this->assertSame( self::$user_id, $user->ID );
 
-		// one char too many
+		// One char too many.
 		$user = wp_authenticate( $this->user->user_login, $limit . 'a' );
-		// Wrong Password
+		// Wrong password.
 		$this->assertInstanceOf( 'WP_Error', $user );
 
 		wp_set_password( $limit . 'a', self::$user_id );
 		$user = get_user_by( 'id', self::$user_id );
 		// Password broken by setting it to be too long.
-		$this->assertEquals( '*', $user->data->user_pass );
+		$this->assertSame( '*', $user->data->user_pass );
 
 		$user = wp_authenticate( $this->user->user_login, '*' );
 		$this->assertInstanceOf( 'WP_Error', $user );
@@ -223,11 +223,11 @@ class Tests_Auth extends WP_UnitTestCase {
 		$this->assertInstanceOf( 'WP_Error', $user );
 
 		$user = wp_authenticate( $this->user->user_login, 'aaaaaaaa' );
-		// Wrong Password
+		// Wrong password.
 		$this->assertInstanceOf( 'WP_Error', $user );
 
 		$user = wp_authenticate( $this->user->user_login, $limit );
-		// Wrong Password
+		// Wrong password.
 		$this->assertInstanceOf( 'WP_Error', $user );
 
 		$user = wp_authenticate( $this->user->user_login, $limit . 'a' );
@@ -242,7 +242,7 @@ class Tests_Auth extends WP_UnitTestCase {
 		$user = get_userdata( $this->user->ID );
 		$key  = get_password_reset_key( $user );
 
-		// A correctly saved key should be accepted
+		// A correctly saved key should be accepted.
 		$check = check_password_reset_key( $key, $this->user->user_login );
 		$this->assertNotWPError( $check );
 		$this->assertInstanceOf( 'WP_User', $check );
@@ -267,21 +267,21 @@ class Tests_Auth extends WP_UnitTestCase {
 		);
 		clean_user_cache( $this->user );
 
-		// A valid key should be accepted
+		// A valid key should be accepted.
 		$check = check_password_reset_key( $key, $this->user->user_login );
 		$this->assertNotWPError( $check );
 		$this->assertInstanceOf( 'WP_User', $check );
 		$this->assertSame( $this->user->ID, $check->ID );
 
-		// An invalid key should be rejected
+		// An invalid key should be rejected.
 		$check = check_password_reset_key( 'key', $this->user->user_login );
 		$this->assertInstanceOf( 'WP_Error', $check );
 
-		// An empty key should be rejected
+		// An empty key should be rejected.
 		$check = check_password_reset_key( '', $this->user->user_login );
 		$this->assertInstanceOf( 'WP_Error', $check );
 
-		// A truncated key should be rejected
+		// A truncated key should be rejected.
 		$partial = substr( $key, 0, 10 );
 		$check   = check_password_reset_key( $partial, $this->user->user_login );
 		$this->assertInstanceOf( 'WP_Error', $check );
@@ -305,7 +305,7 @@ class Tests_Auth extends WP_UnitTestCase {
 		);
 		clean_user_cache( $this->user );
 
-		// An expired but otherwise valid key should be rejected
+		// An expired but otherwise valid key should be rejected.
 		$check = check_password_reset_key( $key, $this->user->user_login );
 		$this->assertInstanceOf( 'WP_Error', $check );
 	}
@@ -314,11 +314,11 @@ class Tests_Auth extends WP_UnitTestCase {
 	 * @ticket 32429
 	 */
 	function test_empty_user_activation_key_fails_key_check() {
-		// An empty user_activation_key should not allow any key to be accepted
+		// An empty user_activation_key should not allow any key to be accepted.
 		$check = check_password_reset_key( 'key', $this->user->user_login );
 		$this->assertInstanceOf( 'WP_Error', $check );
 
-		// An empty user_activation_key should not allow an empty key to be accepted
+		// An empty user_activation_key should not allow an empty key to be accepted.
 		$check = check_password_reset_key( '', $this->user->user_login );
 		$this->assertInstanceOf( 'WP_Error', $check );
 	}
@@ -343,11 +343,11 @@ class Tests_Auth extends WP_UnitTestCase {
 		);
 		clean_user_cache( $this->user );
 
-		// A legacy user_activation_key should not be accepted
+		// A legacy user_activation_key should not be accepted.
 		$check = check_password_reset_key( $key, $this->user->user_login );
 		$this->assertInstanceOf( 'WP_Error', $check );
 
-		// An empty key with a legacy user_activation_key should be rejected
+		// An empty key with a legacy user_activation_key should be rejected.
 		$check = check_password_reset_key( '', $this->user->user_login );
 		$this->assertInstanceOf( 'WP_Error', $check );
 	}
@@ -373,11 +373,11 @@ class Tests_Auth extends WP_UnitTestCase {
 		);
 		clean_user_cache( $this->user );
 
-		// A plaintext user_activation_key should not allow an otherwise valid key to be accepted
+		// A plaintext user_activation_key should not allow an otherwise valid key to be accepted.
 		$check = check_password_reset_key( $key, $this->user->user_login );
 		$this->assertInstanceOf( 'WP_Error', $check );
 
-		// A plaintext user_activation_key should not allow an empty key to be accepted
+		// A plaintext user_activation_key should not allow an empty key to be accepted.
 		$check = check_password_reset_key( '', $this->user->user_login );
 		$this->assertInstanceOf( 'WP_Error', $check );
 	}
@@ -387,7 +387,7 @@ class Tests_Auth extends WP_UnitTestCase {
 	 *
 	 * @ticket 9568
 	 */
-	function test_log_in_using_email() {
+	public function test_log_in_using_email() {
 		$user_args = array(
 			'user_login' => 'johndoe',
 			'user_email' => 'mail@example.com',
@@ -398,4 +398,20 @@ class Tests_Auth extends WP_UnitTestCase {
 		$this->assertInstanceOf( 'WP_User', wp_authenticate( $user_args['user_email'], $user_args['user_pass'] ) );
 		$this->assertInstanceOf( 'WP_User', wp_authenticate( $user_args['user_login'], $user_args['user_pass'] ) );
 	}
+
+	/**
+	 * @ticket 38744
+	 */
+	public function test_wp_signon_using_email_with_an_apostrophe() {
+		$user_args = array(
+			'user_email' => "mail\'@example.com",
+			'user_pass'  => 'password',
+		);
+		$this->factory()->user->create( $user_args );
+
+		$_POST['log'] = $user_args['user_email'];
+		$_POST['pwd'] = $user_args['user_pass'];
+		$this->assertInstanceOf( 'WP_User', wp_signon() );
+	}
+
 }
diff --git a/tests/avatar.php b/tests/avatar.php
index 898c30f296..4867bdbf9c 100644
--- a/tests/avatar.php
+++ b/tests/avatar.php
@@ -11,7 +11,7 @@ class Tests_Avatar extends WP_UnitTestCase {
 	 */
 	public function test_get_avatar_url_gravatar_url() {
 		$url = get_avatar_url( 1 );
-		$this->assertEquals( preg_match( '|^http?://[0-9]+.gravatar.com/avatar/[0-9a-f]{32}\?|', $url ), 1 );
+		$this->assertSame( preg_match( '|^http?://[0-9]+.gravatar.com/avatar/[0-9a-f]{32}\?|', $url ), 1 );
 	}
 
 	/**
@@ -19,11 +19,11 @@ class Tests_Avatar extends WP_UnitTestCase {
 	 */
 	public function test_get_avatar_url_size() {
 		$url = get_avatar_url( 1 );
-		$this->assertEquals( preg_match( '|\?.*s=96|', $url ), 1 );
+		$this->assertSame( preg_match( '|\?.*s=96|', $url ), 1 );
 
 		$args = array( 'size' => 100 );
 		$url  = get_avatar_url( 1, $args );
-		$this->assertEquals( preg_match( '|\?.*s=100|', $url ), 1 );
+		$this->assertSame( preg_match( '|\?.*s=100|', $url ), 1 );
 	}
 
 	/**
@@ -31,16 +31,16 @@ class Tests_Avatar extends WP_UnitTestCase {
 	 */
 	public function test_get_avatar_url_default() {
 		$url = get_avatar_url( 1 );
-		$this->assertEquals( preg_match( '|\?.*d=mm|', $url ), 1 );
+		$this->assertSame( preg_match( '|\?.*d=mm|', $url ), 1 );
 
 		$args = array( 'default' => 'wavatar' );
 		$url  = get_avatar_url( 1, $args );
-		$this->assertEquals( preg_match( '|\?.*d=wavatar|', $url ), 1 );
+		$this->assertSame( preg_match( '|\?.*d=wavatar|', $url ), 1 );
 
-		$this->assertEquals( preg_match( '|\?.*f=y|', $url ), 0 );
+		$this->assertSame( preg_match( '|\?.*f=y|', $url ), 0 );
 		$args = array( 'force_default' => true );
 		$url  = get_avatar_url( 1, $args );
-		$this->assertEquals( preg_match( '|\?.*f=y|', $url ), 1 );
+		$this->assertSame( preg_match( '|\?.*f=y|', $url ), 1 );
 	}
 
 	/**
@@ -48,11 +48,11 @@ class Tests_Avatar extends WP_UnitTestCase {
 	 */
 	public function test_get_avatar_url_rating() {
 		$url = get_avatar_url( 1 );
-		$this->assertEquals( preg_match( '|\?.*r=g|', $url ), 1 );
+		$this->assertSame( preg_match( '|\?.*r=g|', $url ), 1 );
 
 		$args = array( 'rating' => 'M' );
 		$url  = get_avatar_url( 1, $args );
-		$this->assertEquals( preg_match( '|\?.*r=m|', $url ), 1 );
+		$this->assertSame( preg_match( '|\?.*r=m|', $url ), 1 );
 	}
 
 	/**
@@ -60,15 +60,15 @@ class Tests_Avatar extends WP_UnitTestCase {
 	 */
 	public function test_get_avatar_url_scheme() {
 		$url = get_avatar_url( 1 );
-		$this->assertEquals( preg_match( '|^http://|', $url ), 1 );
+		$this->assertSame( preg_match( '|^http://|', $url ), 1 );
 
 		$args = array( 'scheme' => 'https' );
 		$url  = get_avatar_url( 1, $args );
-		$this->assertEquals( preg_match( '|^https://|', $url ), 1 );
+		$this->assertSame( preg_match( '|^https://|', $url ), 1 );
 
 		$args = array( 'scheme' => 'lolcat' );
 		$url  = get_avatar_url( 1, $args );
-		$this->assertEquals( preg_match( '|^lolcat://|', $url ), 0 );
+		$this->assertSame( preg_match( '|^lolcat://|', $url ), 0 );
 	}
 
 	/**
@@ -78,19 +78,19 @@ class Tests_Avatar extends WP_UnitTestCase {
 		$url = get_avatar_url( 1 );
 
 		$url2 = get_avatar_url( WP_TESTS_EMAIL );
-		$this->assertEquals( $url, $url2 );
+		$this->assertSame( $url, $url2 );
 
 		$url2 = get_avatar_url( md5( WP_TESTS_EMAIL ) . '@md5.gravatar.com' );
-		$this->assertEquals( $url, $url2 );
+		$this->assertSame( $url, $url2 );
 
 		$user = get_user_by( 'id', 1 );
 		$url2 = get_avatar_url( $user );
-		$this->assertEquals( $url, $url2 );
+		$this->assertSame( $url, $url2 );
 
 		$post_id = self::factory()->post->create( array( 'post_author' => 1 ) );
 		$post    = get_post( $post_id );
 		$url2    = get_avatar_url( $post );
-		$this->assertEquals( $url, $url2 );
+		$this->assertSame( $url, $url2 );
 
 		$comment_id = self::factory()->comment->create(
 			array(
@@ -100,7 +100,7 @@ class Tests_Avatar extends WP_UnitTestCase {
 		);
 		$comment    = get_comment( $comment_id );
 		$url2       = get_avatar_url( $comment );
-		$this->assertEquals( $url, $url2 );
+		$this->assertSame( $url, $url2 );
 	}
 
 	protected $fake_url;
@@ -114,7 +114,7 @@ class Tests_Avatar extends WP_UnitTestCase {
 		$url = get_avatar_url( 1 );
 		remove_filter( 'pre_get_avatar_data', array( $this, 'pre_get_avatar_url_filter' ), 10 );
 
-		$this->assertEquals( $url, $this->fake_url );
+		$this->assertSame( $url, $this->fake_url );
 	}
 	public function pre_get_avatar_url_filter( $args ) {
 		$args['url'] = $this->fake_url;
@@ -131,7 +131,7 @@ class Tests_Avatar extends WP_UnitTestCase {
 		$url = get_avatar_url( 1 );
 		remove_filter( 'get_avatar_url', array( $this, 'get_avatar_url_filter' ), 10 );
 
-		$this->assertEquals( $url, $this->fake_url );
+		$this->assertSame( $url, $this->fake_url );
 	}
 	public function get_avatar_url_filter( $url ) {
 		return $this->fake_url;
@@ -160,7 +160,7 @@ class Tests_Avatar extends WP_UnitTestCase {
 		$url2 = get_avatar_url( $comment );
 		remove_filter( 'get_avatar_comment_types', array( $this, 'get_avatar_comment_types_filter' ), 10 );
 
-		$this->assertEquals( $url, $url2 );
+		$this->assertSame( $url, $url2 );
 	}
 	public function get_avatar_comment_types_filter( $comment_types ) {
 		$comment_types[] = 'pingback';
@@ -169,30 +169,30 @@ class Tests_Avatar extends WP_UnitTestCase {
 
 	public function test_get_avatar() {
 		$img = get_avatar( 1 );
-		$this->assertEquals( preg_match( "|^<img alt='[^']*' src='[^']*' srcset='[^']*' class='[^']*' height='[^']*' width='[^']*' />$|", $img ), 1 );
+		$this->assertSame( preg_match( "|^<img alt='[^']*' src='[^']*' srcset='[^']*' class='[^']*' height='[^']*' width='[^']*' loading='lazy'/>$|", $img ), 1 );
 	}
 
 	public function test_get_avatar_size() {
 		$size = '100';
 		$img  = get_avatar( 1, $size );
-		$this->assertEquals( preg_match( "|^<img .*height='$size'.*width='$size'|", $img ), 1 );
+		$this->assertSame( preg_match( "|^<img .*height='$size'.*width='$size'|", $img ), 1 );
 	}
 
 	public function test_get_avatar_alt() {
 		$alt = 'Mr Hyde';
 		$img = get_avatar( 1, 96, '', $alt );
-		$this->assertEquals( preg_match( "|^<img alt='$alt'|", $img ), 1 );
+		$this->assertSame( preg_match( "|^<img alt='$alt'|", $img ), 1 );
 	}
 
 	public function test_get_avatar_class() {
 		$class = 'first';
 		$img   = get_avatar( 1, 96, '', '', array( 'class' => $class ) );
-		$this->assertEquals( preg_match( "|^<img .*class='[^']*{$class}[^']*'|", $img ), 1 );
+		$this->assertSame( preg_match( "|^<img .*class='[^']*{$class}[^']*'|", $img ), 1 );
 	}
 
 	public function test_get_avatar_default_class() {
 		$img = get_avatar( 1, 96, '', '', array( 'force_default' => true ) );
-		$this->assertEquals( preg_match( "|^<img .*class='[^']*avatar-default[^']*'|", $img ), 1 );
+		$this->assertSame( preg_match( "|^<img .*class='[^']*avatar-default[^']*'|", $img ), 1 );
 	}
 
 	public function test_get_avatar_force_display() {
@@ -218,7 +218,7 @@ class Tests_Avatar extends WP_UnitTestCase {
 		$img = get_avatar( 1 );
 		remove_filter( 'pre_get_avatar', array( $this, 'pre_get_avatar_filter' ), 10 );
 
-		$this->assertEquals( $img, $this->fake_img );
+		$this->assertSame( $img, $this->fake_img );
 	}
 	public function pre_get_avatar_filter( $img ) {
 		return $this->fake_img;
@@ -234,7 +234,7 @@ class Tests_Avatar extends WP_UnitTestCase {
 		$img = get_avatar( 1 );
 		remove_filter( 'get_avatar', array( $this, 'get_avatar_filter' ), 10 );
 
-		$this->assertEquals( $img, $this->fake_url );
+		$this->assertSame( $img, $this->fake_url );
 	}
 	public function get_avatar_filter( $img ) {
 		return $this->fake_url;
diff --git a/tests/basic.php b/tests/basic.php
index 396f108df9..6941c91e44 100644
--- a/tests/basic.php
+++ b/tests/basic.php
@@ -8,24 +8,35 @@
 class Tests_Basic extends WP_UnitTestCase {
 
 	function test_license() {
-		// This test is designed to only run on trunk/master
+		// This test is designed to only run on trunk/master.
 		$this->skipOnAutomatedBranches();
 
 		$license = file_get_contents( ABSPATH . 'license.txt' );
 		preg_match( '#Copyright 2011-(\d+) by the contributors#', $license, $matches );
 		$this_year = gmdate( 'Y' );
-		$this->assertEquals( $this_year, trim( $matches[1] ), "license.txt's year needs to be updated to $this_year." );
+		$this->assertSame( $this_year, trim( $matches[1] ), "license.txt's year needs to be updated to $this_year." );
+	}
+
+	function test_security_md() {
+		// This test is designed to only run on trunk/master.
+		$this->skipOnAutomatedBranches();
+
+		$security = file_get_contents( dirname( ABSPATH ) . '/SECURITY.md' );
+		preg_match( '#\d.\d.x#', $security, $matches );
+		$current_version = substr( $GLOBALS['wp_version'], 0, 3 );
+		$latest_stable   = sprintf( '%s.x', (float) $current_version - 0.1 );
+		$this->assertSame( $latest_stable, trim( $matches[0] ), "SECURITY.md's version needs to be updated to $latest_stable." );
 	}
 
 	function test_package_json() {
 		$package_json    = file_get_contents( dirname( ABSPATH ) . '/package.json' );
 		$package_json    = json_decode( $package_json, true );
 		list( $version ) = explode( '-', $GLOBALS['wp_version'] );
-		// package.json uses x.y.z, so fill cleaned $wp_version for .0 releases
+		// package.json uses x.y.z, so fill cleaned $wp_version for .0 releases.
 		if ( 1 === substr_count( $version, '.' ) ) {
 			$version .= '.0';
 		}
-		$this->assertEquals( $version, $package_json['version'], "package.json's version needs to be updated to $version." );
+		$this->assertSame( $version, $package_json['version'], "package.json's version needs to be updated to $version." );
 		return $package_json;
 	}
 
@@ -39,12 +50,12 @@ class Tests_Basic extends WP_UnitTestCase {
 		$this->assertRegExp( '~^=?\d+\.\d+\.\d+$~', $node, "package.json's node version cannot be a range." );
 	}
 
-	// test some helper utility functions
+	// Test some helper utility functions.
 
 	function test_strip_ws() {
-		$this->assertEquals( '', strip_ws( '' ) );
-		$this->assertEquals( 'foo', strip_ws( 'foo' ) );
-		$this->assertEquals( '', strip_ws( "\r\n\t  \n\r\t" ) );
+		$this->assertSame( '', strip_ws( '' ) );
+		$this->assertSame( 'foo', strip_ws( 'foo' ) );
+		$this->assertSame( '', strip_ws( "\r\n\t  \n\r\t" ) );
 
 		$in  = "asdf\n";
 		$in .= "asdf asdf\n";
@@ -64,7 +75,7 @@ class Tests_Basic extends WP_UnitTestCase {
 		$expected .= "foo bar\n";
 		$expected .= 'foo';
 
-		$this->assertEquals( $expected, strip_ws( $in ) );
+		$this->assertSame( $expected, strip_ws( $in ) );
 
 	}
 
@@ -75,13 +86,13 @@ class Tests_Basic extends WP_UnitTestCase {
 <p>If a new user is created by WordPress, the password will be set, by default, to "changeme". Quite suggestive, eh? ;)</p>
         <ol id="authors"><form action="?import=wordpress&amp;step=2&amp;id=" method="post"><input type="hidden" name="_wpnonce" value="855ae98911" /><input type="hidden" name="_wp_http_referer" value="wp-test.php" /><li>Current author: <strong>Alex Shiels</strong><br />Create user  <input type="text" value="Alex Shiels" name="user[]" maxlength="30"> <br /> or map to existing<select name="userselect[0]">
 EOF;
-		// _wpnonce value should be replaced with 'xxx'
+		// _wpnonce value should be replaced with 'xxx'.
 		$expected = <<<EOF
 <h2>Assign Authors</h2>
 <p>To make it easier for you to edit and save the imported posts and drafts, you may want to change the name of the author of the posts. For example, you may want to import all the entries as <code>admin</code>s entries.</p>
 <p>If a new user is created by WordPress, the password will be set, by default, to "changeme". Quite suggestive, eh? ;)</p>
         <ol id="authors"><form action="?import=wordpress&amp;step=2&amp;id=" method="post"><input type="hidden" name="_wpnonce" value="***" /><input type="hidden" name="_wp_http_referer" value="wp-test.php" /><li>Current author: <strong>Alex Shiels</strong><br />Create user  <input type="text" value="Alex Shiels" name="user[]" maxlength="30"> <br /> or map to existing<select name="userselect[0]">
 EOF;
-		$this->assertEquals( $expected, mask_input_value( $in ) );
+		$this->assertSame( $expected, mask_input_value( $in ) );
 	}
 }
diff --git a/tests/blocks/block-context.php b/tests/blocks/block-context.php
new file mode 100644
index 0000000000..b3eff8565a
--- /dev/null
+++ b/tests/blocks/block-context.php
@@ -0,0 +1,215 @@
+<?php
+/**
+ * WP_Block_Context Tests
+ *
+ * @package WordPress
+ * @subpackage Blocks
+ * @since 5.5.0
+ */
+
+/**
+ * Tests for WP_Block_Context
+ *
+ * @since 5.5.0
+ *
+ * @group blocks
+ */
+class WP_Block_Context_Test extends WP_UnitTestCase {
+
+	/**
+	 * Registered block names.
+	 *
+	 * @var string[]
+	 */
+	private $registered_block_names = array();
+
+	/**
+	 * Sets up each test method.
+	 */
+	public function setUp() {
+		global $post;
+
+		parent::setUp();
+
+		$args = array(
+			'post_content' => 'example',
+			'post_excerpt' => '',
+		);
+
+		$post = $this->factory()->post->create_and_get( $args );
+		setup_postdata( $post );
+	}
+
+	/**
+	 * Tear down each test method.
+	 */
+	public function tearDown() {
+		parent::tearDown();
+
+		while ( ! empty( $this->registered_block_names ) ) {
+			$block_name = array_pop( $this->registered_block_names );
+			unregister_block_type( $block_name );
+		}
+	}
+
+	/**
+	 * Registers a block type.
+	 *
+	 * @param string|WP_Block_Type $name Block type name including namespace, or alternatively a
+	 *                                   complete WP_Block_Type instance. In case a WP_Block_Type
+	 *                                   is provided, the $args parameter will be ignored.
+	 * @param array                $args {
+	 *     Optional. Array of block type arguments. Any arguments may be defined, however the
+	 *     ones described below are supported by default. Default empty array.
+	 *
+	 *     @type callable $render_callback Callback used to render blocks of this block type.
+	 * }
+	 */
+	protected function register_block_type( $name, $args ) {
+		register_block_type( $name, $args );
+
+		$this->registered_block_names[] = $name;
+	}
+
+	/**
+	 * Tests that a block which provides context makes that context available to
+	 * its inner blocks.
+	 *
+	 * @ticket 49927
+	 */
+	function test_provides_block_context() {
+		$provided_context = array();
+
+		$this->register_block_type(
+			'gutenberg/test-context-provider',
+			array(
+				'attributes'       => array(
+					'contextWithAssigned'   => array(
+						'type' => 'number',
+					),
+					'contextWithDefault'    => array(
+						'type'    => 'number',
+						'default' => 0,
+					),
+					'contextWithoutDefault' => array(
+						'type' => 'number',
+					),
+					'contextNotRequested'   => array(
+						'type' => 'number',
+					),
+				),
+				'provides_context' => array(
+					'gutenberg/contextWithAssigned'   => 'contextWithAssigned',
+					'gutenberg/contextWithDefault'    => 'contextWithDefault',
+					'gutenberg/contextWithoutDefault' => 'contextWithoutDefault',
+					'gutenberg/contextNotRequested'   => 'contextNotRequested',
+				),
+			)
+		);
+
+		$this->register_block_type(
+			'gutenberg/test-context-consumer',
+			array(
+				'uses_context'    => array(
+					'gutenberg/contextWithDefault',
+					'gutenberg/contextWithAssigned',
+					'gutenberg/contextWithoutDefault',
+				),
+				'render_callback' => function( $attributes, $content, $block ) use ( &$provided_context ) {
+					$provided_context[] = $block->context;
+
+					return '';
+				},
+			)
+		);
+
+		$parsed_blocks = parse_blocks(
+			'<!-- wp:gutenberg/test-context-provider {"contextWithAssigned":10} -->' .
+			'<!-- wp:gutenberg/test-context-consumer /-->' .
+			'<!-- /wp:gutenberg/test-context-provider -->'
+		);
+
+		render_block( $parsed_blocks[0] );
+
+		$this->assertSame(
+			array(
+				'gutenberg/contextWithDefault'  => 0,
+				'gutenberg/contextWithAssigned' => 10,
+			),
+			$provided_context[0]
+		);
+	}
+
+	/**
+	 * Tests that a block can receive default-provided context through
+	 * render_block.
+	 *
+	 * @ticket 49927
+	 */
+	function test_provides_default_context() {
+		global $post;
+
+		$provided_context = array();
+
+		$this->register_block_type(
+			'gutenberg/test-context-consumer',
+			array(
+				'uses_context'    => array( 'postId', 'postType' ),
+				'render_callback' => function( $attributes, $content, $block ) use ( &$provided_context ) {
+					$provided_context[] = $block->context;
+
+					return '';
+				},
+			)
+		);
+
+		$parsed_blocks = parse_blocks( '<!-- wp:gutenberg/test-context-consumer /-->' );
+
+		render_block( $parsed_blocks[0] );
+
+		$this->assertSame(
+			array(
+				'postId'   => $post->ID,
+				'postType' => $post->post_type,
+			),
+			$provided_context[0]
+		);
+	}
+
+	/**
+	 * Tests that default block context can be filtered.
+	 *
+	 * @ticket 49927
+	 */
+	function test_default_context_is_filterable() {
+		$provided_context = array();
+
+		$this->register_block_type(
+			'gutenberg/test-context-consumer',
+			array(
+				'uses_context'    => array( 'example' ),
+				'render_callback' => function( $attributes, $content, $block ) use ( &$provided_context ) {
+					$provided_context[] = $block->context;
+
+					return '';
+				},
+			)
+		);
+
+		$filter_block_context = function( $context ) {
+			$context['example'] = 'ok';
+			return $context;
+		};
+
+		$parsed_blocks = parse_blocks( '<!-- wp:gutenberg/test-context-consumer /-->' );
+
+		add_filter( 'render_block_context', $filter_block_context );
+
+		render_block( $parsed_blocks[0] );
+
+		remove_filter( 'render_block_context', $filter_block_context );
+
+		$this->assertSame( array( 'example' => 'ok' ), $provided_context[0] );
+	}
+
+}
diff --git a/tests/blocks/block-list.php b/tests/blocks/block-list.php
new file mode 100644
index 0000000000..7757faafc5
--- /dev/null
+++ b/tests/blocks/block-list.php
@@ -0,0 +1,112 @@
+<?php
+/**
+ * WP_Block_List tests.
+ *
+ * @package WordPress
+ * @subpackage Blocks
+ * @since 5.5.0
+ */
+
+/**
+ * Tests for WP_Block_List
+ *
+ * @since 5.5.0
+ *
+ * @group blocks
+ */
+class WP_Block_List_Test extends WP_UnitTestCase {
+
+	/**
+	 * Fake block type registry.
+	 *
+	 * @var WP_Block_Type_Registry
+	 */
+	private $registry = null;
+
+	/**
+	 * Set up each test method.
+	 */
+	public function setUp() {
+		parent::setUp();
+
+		$this->registry = new WP_Block_Type_Registry();
+		$this->registry->register( 'core/example', array() );
+	}
+
+	/**
+	 * Tear down each test method.
+	 */
+	public function tearDown() {
+		parent::tearDown();
+
+		$this->registry = null;
+	}
+
+	/**
+	 * @ticket 49927
+	 */
+	function test_array_access() {
+		$parsed_blocks = parse_blocks( '<!-- wp:example /-->' );
+		$context       = array();
+		$blocks        = new WP_Block_List( $parsed_blocks, $context, $this->registry );
+
+		// Test "offsetExists".
+		$this->assertTrue( isset( $blocks[0] ) );
+
+		// Test "offsetGet".
+		$this->assertSame( 'core/example', $blocks[0]->name );
+
+		// Test "offsetSet".
+		$parsed_blocks[0]['blockName'] = 'core/updated';
+		$blocks[0]                     = new WP_Block( $parsed_blocks[0], $context, $this->registry );
+		$this->assertSame( 'core/updated', $blocks[0]->name );
+
+		// Test "offsetUnset".
+		unset( $blocks[0] );
+		$this->assertFalse( isset( $blocks[0] ) );
+	}
+
+	/**
+	 * @ticket 49927
+	 */
+	function test_iterable() {
+		$parsed_blocks = parse_blocks( '<!-- wp:example --><!-- wp:example /--><!-- /wp:example -->' );
+		$context       = array();
+		$blocks        = new WP_Block_List( $parsed_blocks, $context, $this->registry );
+		$assertions    = 0;
+
+		foreach ( $blocks as $block ) {
+			$this->assertSame( 'core/example', $block->name );
+			$assertions++;
+			foreach ( $block->inner_blocks as $inner_block ) {
+				$this->assertSame( 'core/example', $inner_block->name );
+				$assertions++;
+			}
+		}
+
+		$blocks->rewind();
+		while ( $blocks->valid() ) {
+			$key   = $blocks->key();
+			$block = $blocks->current();
+			$this->assertSame( 0, $key );
+			$assertions++;
+			$this->assertSame( 'core/example', $block->name );
+			$assertions++;
+			$blocks->next();
+		}
+
+		$this->assertSame( 4, $assertions );
+	}
+
+	/**
+	 * @ticket 49927
+	 */
+	function test_countable() {
+		$parsed_blocks = parse_blocks( '<!-- wp:example /-->' );
+		$context       = array();
+		$blocks        = new WP_Block_List( $parsed_blocks, $context, $this->registry );
+
+		$this->assertSame( 1, count( $blocks ) );
+	}
+
+}
diff --git a/tests/blocks/block-parser.php b/tests/blocks/block-parser.php
index fba13b0c71..8bdd0ddb57 100644
--- a/tests/blocks/block-parser.php
+++ b/tests/blocks/block-parser.php
@@ -69,7 +69,7 @@ class WP_Test_Block_Parser extends WP_UnitTestCase {
 		$parser = new WP_Block_Parser();
 		$result = json_decode( json_encode( $parser->parse( $html ) ), true );
 
-		$this->assertEquals(
+		$this->assertSame(
 			$expected_parsed,
 			$result,
 			"File '$parsed_json_filename' does not match expected value"
diff --git a/tests/blocks/block-type-registry.php b/tests/blocks/block-type-registry.php
index 05830d788e..78c2a5e699 100644
--- a/tests/blocks/block-type-registry.php
+++ b/tests/blocks/block-type-registry.php
@@ -106,9 +106,9 @@ class WP_Test_Block_Type_Registry extends WP_UnitTestCase {
 		);
 
 		$block_type = $this->registry->register( $name, $settings );
-		$this->assertEquals( $name, $block_type->name );
-		$this->assertEquals( $settings['icon'], $block_type->icon );
-		$this->assertEquals( $block_type, $this->registry->get_registered( $name ) );
+		$this->assertSame( $name, $block_type->name );
+		$this->assertSame( $settings['icon'], $block_type->icon );
+		$this->assertSame( $block_type, $this->registry->get_registered( $name ) );
 	}
 
 	/**
@@ -167,8 +167,8 @@ class WP_Test_Block_Type_Registry extends WP_UnitTestCase {
 
 		$this->registry->register( $name, $settings );
 		$block_type = $this->registry->unregister( $name );
-		$this->assertEquals( $name, $block_type->name );
-		$this->assertEquals( $settings['icon'], $block_type->icon );
+		$this->assertSame( $name, $block_type->name );
+		$this->assertSame( $settings['icon'], $block_type->icon );
 		$this->assertFalse( $this->registry->is_registered( $name ) );
 	}
 
@@ -186,6 +186,6 @@ class WP_Test_Block_Type_Registry extends WP_UnitTestCase {
 		}
 
 		$registered = $this->registry->get_all_registered();
-		$this->assertEqualSets( $names, array_keys( $registered ) );
+		$this->assertSameSets( $names, array_keys( $registered ) );
 	}
 }
diff --git a/tests/blocks/block-type.php b/tests/blocks/block-type.php
index 63e0809a13..e93aed05a2 100644
--- a/tests/blocks/block-type.php
+++ b/tests/blocks/block-type.php
@@ -100,7 +100,7 @@ class WP_Test_Block_Type extends WP_UnitTestCase {
 			)
 		);
 		$output     = $block_type->render( $attributes );
-		$this->assertEquals( $attributes, json_decode( $output, true ) );
+		$this->assertSame( $attributes, json_decode( $output, true ) );
 	}
 
 	/**
@@ -123,7 +123,7 @@ class WP_Test_Block_Type extends WP_UnitTestCase {
 			)
 		);
 		$output     = $block_type->render( $attributes, $content );
-		$this->assertEquals( $expected, json_decode( $output, true ) );
+		$this->assertSame( $expected, json_decode( $output, true ) );
 	}
 
 	/**
@@ -133,7 +133,7 @@ class WP_Test_Block_Type extends WP_UnitTestCase {
 		$block_type = new WP_Block_Type( 'core/fake', array() );
 		$output     = $block_type->render();
 
-		$this->assertEquals( '', $output );
+		$this->assertSame( '', $output );
 	}
 
 	/**
@@ -223,7 +223,7 @@ class WP_Test_Block_Type extends WP_UnitTestCase {
 
 		$prepared_attributes = $block_type->prepare_attributes_for_render( $attributes );
 
-		$this->assertEquals( $attributes, $prepared_attributes );
+		$this->assertSame( $attributes, $prepared_attributes );
 	}
 
 	/**
@@ -304,6 +304,24 @@ class WP_Test_Block_Type extends WP_UnitTestCase {
 		$this->assertFalse( has_block( 'core/fake' ) );
 	}
 
+	public function test_post_has_block_serialized_name() {
+		$content = '<!-- wp:serialized /--><!-- wp:core/normalized /--><!-- wp:plugin/third-party /-->';
+
+		$this->assertTrue( has_block( 'core/serialized', $content ) );
+
+		/*
+		 * Technically, `has_block` should receive a "full" (normalized, parsed)
+		 * block name. But this test conforms to expected pre-5.3.1 behavior.
+		 */
+		$this->assertTrue( has_block( 'serialized', $content ) );
+		$this->assertTrue( has_block( 'core/normalized', $content ) );
+		$this->assertTrue( has_block( 'normalized', $content ) );
+		$this->assertFalse( has_block( 'plugin/normalized', $content ) );
+		$this->assertFalse( has_block( 'plugin/serialized', $content ) );
+		$this->assertFalse( has_block( 'third-party', $content ) );
+		$this->assertFalse( has_block( 'core/third-party', $content ) );
+	}
+
 	/**
 	 * Renders a test block without content.
 	 *
@@ -331,6 +349,34 @@ class WP_Test_Block_Type extends WP_UnitTestCase {
 		return json_encode( $attributes );
 	}
 
+	/**
+	 * @ticket 48529
+	 */
+	public function test_register_block() {
+		$block_type = new WP_Block_Type(
+			'core/fake',
+			array(
+				'title'       => 'Test title',
+				'category'    => 'Test category',
+				'parent'      => array( 'core/third-party' ),
+				'icon'        => 'icon.png',
+				'description' => 'test description',
+				'keywords'    => array( 'test keyword' ),
+				'textdomain'  => 'test_domain',
+				'supports'    => array( 'alignment' => true ),
+			)
+		);
+
+		$this->assertSame( 'Test title', $block_type->title );
+		$this->assertSame( 'Test category', $block_type->category );
+		$this->assertSameSets( array( 'core/third-party' ), $block_type->parent );
+		$this->assertSame( 'icon.png', $block_type->icon );
+		$this->assertSame( 'test description', $block_type->description );
+		$this->assertSameSets( array( 'test keyword' ), $block_type->keywords );
+		$this->assertSame( 'test_domain', $block_type->textdomain );
+		$this->assertSameSets( array( 'alignment' => true ), $block_type->supports );
+	}
+
 	/**
 	 * Testing the block version.
 	 *
diff --git a/tests/blocks/block.php b/tests/blocks/block.php
new file mode 100644
index 0000000000..afb422ca0d
--- /dev/null
+++ b/tests/blocks/block.php
@@ -0,0 +1,397 @@
+<?php
+/**
+ * WP_Block Tests
+ *
+ * @package WordPress
+ * @subpackage Blocks
+ * @since 5.5.0
+ */
+
+/**
+ * Tests for WP_Block
+ *
+ * @since 5.5.0
+ *
+ * @group blocks
+ */
+class WP_Block_Test extends WP_UnitTestCase {
+
+	/**
+	 * Fake block type registry.
+	 *
+	 * @var WP_Block_Type_Registry
+	 */
+	private $registry = null;
+
+	/**
+	 * Set up each test method.
+	 */
+	public function setUp() {
+		parent::setUp();
+
+		$this->registry = new WP_Block_Type_Registry();
+	}
+
+	/**
+	 * Tear down each test method.
+	 */
+	public function tearDown() {
+		parent::tearDown();
+
+		$this->registry = null;
+	}
+
+	function filter_render_block( $content, $parsed_block ) {
+		return 'Original: "' . $content . '", from block "' . $parsed_block['blockName'] . '"';
+	}
+
+	/**
+	 * @ticket 49927
+	 */
+	function test_constructor_assigns_properties_from_parsed_block() {
+		$this->registry->register( 'core/example', array() );
+
+		$parsed_blocks = parse_blocks( '<!-- wp:example {"ok":true} -->a<!-- wp:example /-->b<!-- /wp:example -->' );
+		$parsed_block  = $parsed_blocks[0];
+		$context       = array();
+		$block         = new WP_Block( $parsed_block, $context, $this->registry );
+
+		$this->assertSame( $parsed_block, $block->parsed_block );
+		$this->assertSame( $parsed_block['blockName'], $block->name );
+		$this->assertSame( $parsed_block['attrs'], $block->attributes );
+		$this->assertSame( $parsed_block['innerContent'], $block->inner_content );
+		$this->assertSame( $parsed_block['innerHTML'], $block->inner_html );
+	}
+
+	/**
+	 * @ticket 49927
+	 */
+	function test_constructor_assigns_block_type_from_registry() {
+		$block_type_settings = array(
+			'attributes' => array(
+				'defaulted' => array(
+					'type'    => 'number',
+					'default' => 10,
+				),
+			),
+		);
+		$this->registry->register( 'core/example', $block_type_settings );
+
+		$parsed_block = array( 'blockName' => 'core/example' );
+		$context      = array();
+		$block        = new WP_Block( $parsed_block, $context, $this->registry );
+
+		$this->assertInstanceOf( WP_Block_Type::class, $block->block_type );
+		$this->assertSame(
+			$block_type_settings['attributes'],
+			$block->block_type->attributes
+		);
+	}
+
+	/**
+	 * @ticket 49927
+	 */
+	function test_lazily_assigns_attributes_with_defaults() {
+		$this->registry->register(
+			'core/example',
+			array(
+				'attributes' => array(
+					'defaulted' => array(
+						'type'    => 'number',
+						'default' => 10,
+					),
+				),
+			)
+		);
+
+		$parsed_block = array(
+			'blockName' => 'core/example',
+			'attrs'     => array(
+				'explicit' => 20,
+			),
+		);
+		$context      = array();
+		$block        = new WP_Block( $parsed_block, $context, $this->registry );
+
+		$this->assertSame(
+			array(
+				'explicit'  => 20,
+				'defaulted' => 10,
+			),
+			$block->attributes
+		);
+	}
+
+	/**
+	 * @ticket 49927
+	 */
+	function test_lazily_assigns_attributes_with_only_defaults() {
+		$this->registry->register(
+			'core/example',
+			array(
+				'attributes' => array(
+					'defaulted' => array(
+						'type'    => 'number',
+						'default' => 10,
+					),
+				),
+			)
+		);
+
+		$parsed_block = array(
+			'blockName' => 'core/example',
+			'attrs'     => array(),
+		);
+		$context      = array();
+		$block        = new WP_Block( $parsed_block, $context, $this->registry );
+
+		$this->assertSame( array( 'defaulted' => 10 ), $block->attributes );
+		// Intentionally call a second time, to ensure property was assigned.
+		$this->assertSame( array( 'defaulted' => 10 ), $block->attributes );
+	}
+
+	/**
+	 * @ticket 49927
+	 */
+	function test_constructor_assigns_context_from_block_type() {
+		$this->registry->register(
+			'core/example',
+			array(
+				'uses_context' => array( 'requested' ),
+			)
+		);
+
+		$parsed_block = array( 'blockName' => 'core/example' );
+		$context      = array(
+			'requested'   => 'included',
+			'unrequested' => 'not included',
+		);
+		$block        = new WP_Block( $parsed_block, $context, $this->registry );
+
+		$this->assertSame( array( 'requested' => 'included' ), $block->context );
+	}
+
+	/**
+	 * @ticket 49927
+	 */
+	function test_constructor_maps_inner_blocks() {
+		$this->registry->register( 'core/example', array() );
+
+		$parsed_blocks = parse_blocks( '<!-- wp:example {"ok":true} -->a<!-- wp:example /-->b<!-- /wp:example -->' );
+		$parsed_block  = $parsed_blocks[0];
+		$context       = array();
+		$block         = new WP_Block( $parsed_block, $context, $this->registry );
+
+		$this->assertCount( 1, $block->inner_blocks );
+		$this->assertInstanceOf( WP_Block::class, $block->inner_blocks[0] );
+		$this->assertSame( 'core/example', $block->inner_blocks[0]->name );
+	}
+
+	/**
+	 * @ticket 49927
+	 */
+	function test_constructor_prepares_context_for_inner_blocks() {
+		$this->registry->register(
+			'core/outer',
+			array(
+				'attributes'       => array(
+					'recordId' => array(
+						'type' => 'number',
+					),
+				),
+				'provides_context' => array(
+					'core/recordId' => 'recordId',
+				),
+			)
+		);
+		$this->registry->register(
+			'core/inner',
+			array(
+				'uses_context' => array( 'core/recordId' ),
+			)
+		);
+
+		$parsed_blocks = parse_blocks( '<!-- wp:outer {"recordId":10} --><!-- wp:inner /--><!-- /wp:outer -->' );
+		$parsed_block  = $parsed_blocks[0];
+		$context       = array( 'unrequested' => 'not included' );
+		$block         = new WP_Block( $parsed_block, $context, $this->registry );
+
+		$this->assertCount( 0, $block->context );
+		$this->assertSame(
+			array( 'core/recordId' => 10 ),
+			$block->inner_blocks[0]->context
+		);
+	}
+
+	/**
+	 * @ticket 49927
+	 */
+	function test_constructor_assigns_merged_context() {
+		$this->registry->register(
+			'core/example',
+			array(
+				'attributes'       => array(
+					'value' => array(
+						'type' => array( 'string', 'null' ),
+					),
+				),
+				'provides_context' => array(
+					'core/value' => 'value',
+				),
+				'uses_context'     => array( 'core/value' ),
+			)
+		);
+
+		$parsed_blocks = parse_blocks(
+			'<!-- wp:example {"value":"merged"} -->' .
+			'<!-- wp:example {"value":null} -->' .
+			'<!-- wp:example /-->' .
+			'<!-- /wp:example -->' .
+			'<!-- /wp:example -->'
+		);
+		$parsed_block  = $parsed_blocks[0];
+		$context       = array( 'core/value' => 'original' );
+		$block         = new WP_Block( $parsed_block, $context, $this->registry );
+
+		$this->assertSame(
+			array( 'core/value' => 'original' ),
+			$block->context
+		);
+		$this->assertSame(
+			array( 'core/value' => 'merged' ),
+			$block->inner_blocks[0]->context
+		);
+		$this->assertSame(
+			array( 'core/value' => null ),
+			$block->inner_blocks[0]->inner_blocks[0]->context
+		);
+	}
+
+	/**
+	 * @ticket 49927
+	 */
+	function test_render_static_block_type_returns_own_content() {
+		$this->registry->register( 'core/static', array() );
+		$this->registry->register(
+			'core/dynamic',
+			array(
+				'render_callback' => function() {
+					return 'b';
+				},
+			)
+		);
+
+		$parsed_blocks = parse_blocks( '<!-- wp:static -->a<!-- wp:dynamic /-->c<!-- /wp:static -->' );
+		$parsed_block  = $parsed_blocks[0];
+		$context       = array();
+		$block         = new WP_Block( $parsed_block, $context, $this->registry );
+
+		$this->assertSame( 'abc', $block->render() );
+	}
+
+	/**
+	 * @ticket 49927
+	 */
+	function test_render_passes_block_for_render_callback() {
+		$this->registry->register(
+			'core/greeting',
+			array(
+				'render_callback' => function( $attributes, $content, $block ) {
+					return sprintf( 'Hello from %s', $block->name );
+				},
+			)
+		);
+
+		$parsed_blocks = parse_blocks( '<!-- wp:greeting /-->' );
+		$parsed_block  = $parsed_blocks[0];
+		$context       = array();
+		$block         = new WP_Block( $parsed_block, $context, $this->registry );
+
+		$this->assertSame( 'Hello from core/greeting', $block->render() );
+	}
+
+	/**
+	 * @ticket 49927
+	 */
+	function test_render_applies_render_block_filter() {
+		$this->registry->register( 'core/example', array() );
+
+		add_filter( 'render_block', array( $this, 'filter_render_block' ), 10, 2 );
+
+		$parsed_blocks = parse_blocks( '<!-- wp:example -->Static<!-- wp:example -->Inner<!-- /wp:example --><!-- /wp:example -->' );
+		$parsed_block  = $parsed_blocks[0];
+		$context       = array();
+		$block         = new WP_Block( $parsed_block, $context, $this->registry );
+
+		$rendered_content = $block->render();
+
+		remove_filter( 'render_block', array( $this, 'filter_render_block' ) );
+
+		$this->assertSame( 'Original: "StaticOriginal: "Inner", from block "core/example"", from block "core/example"', $rendered_content );
+
+	}
+
+	/**
+	 * @ticket 49927
+	 */
+	function test_passes_attributes_to_render_callback() {
+		$this->registry->register(
+			'core/greeting',
+			array(
+				'attributes'      => array(
+					'toWhom'      => array(
+						'type' => 'string',
+					),
+					'punctuation' => array(
+						'type'    => 'string',
+						'default' => '!',
+					),
+				),
+				'render_callback' => function( $block_attributes ) {
+					return sprintf(
+						'Hello %s%s',
+						$block_attributes['toWhom'],
+						$block_attributes['punctuation']
+					);
+				},
+			)
+		);
+
+		$parsed_blocks = parse_blocks( '<!-- wp:greeting {"toWhom":"world"} /-->' );
+		$parsed_block  = $parsed_blocks[0];
+		$context       = array();
+		$block         = new WP_Block( $parsed_block, $context, $this->registry );
+
+		$this->assertSame( 'Hello world!', $block->render() );
+	}
+
+	/**
+	 * @ticket 49927
+	 */
+	function test_passes_content_to_render_callback() {
+		$this->registry->register(
+			'core/outer',
+			array(
+				'render_callback' => function( $block_attributes, $content ) {
+					return $content;
+				},
+			)
+		);
+		$this->registry->register(
+			'core/inner',
+			array(
+				'render_callback' => function() {
+					return 'b';
+				},
+			)
+		);
+
+		$parsed_blocks = parse_blocks( '<!-- wp:outer -->a<!-- wp:inner /-->c<!-- /wp:outer -->' );
+		$parsed_block  = $parsed_blocks[0];
+		$context       = array();
+		$block         = new WP_Block( $parsed_block, $context, $this->registry );
+
+		$this->assertSame( 'abc', $block->render() );
+	}
+
+}
diff --git a/tests/blocks/fixtures/block.asset.php b/tests/blocks/fixtures/block.asset.php
new file mode 100644
index 0000000000..792bbb6c84
--- /dev/null
+++ b/tests/blocks/fixtures/block.asset.php
@@ -0,0 +1,6 @@
+<?php
+
+return array(
+	'dependencies' => array(),
+	'version'      => 'test',
+);
diff --git a/tests/blocks/fixtures/block.css b/tests/blocks/fixtures/block.css
new file mode 100644
index 0000000000..5bbe1134f7
--- /dev/null
+++ b/tests/blocks/fixtures/block.css
@@ -0,0 +1 @@
+/* Test CSS file */
diff --git a/tests/blocks/fixtures/block.js b/tests/blocks/fixtures/block.js
new file mode 100644
index 0000000000..0bdf0f5ad9
--- /dev/null
+++ b/tests/blocks/fixtures/block.js
@@ -0,0 +1 @@
+/* Test JavaScript file. */
diff --git a/tests/blocks/fixtures/block.json b/tests/blocks/fixtures/block.json
new file mode 100644
index 0000000000..be4205ce76
--- /dev/null
+++ b/tests/blocks/fixtures/block.json
@@ -0,0 +1,52 @@
+{
+	"name": "my-plugin/notice",
+	"title": "Notice",
+	"category": "common",
+	"parent": [
+		"core/group"
+	],
+	"providesContext": {
+		"my-plugin/message": "message"
+	},
+	"usesContext": [
+		"groupId"
+	],
+	"icon": "star",
+	"description": "Shows warning, error or success notices‚Ä¶",
+	"keywords": [
+		"alert",
+		"message"
+	],
+	"textDomain": "my-plugin",
+	"attributes": {
+		"message": {
+			"type": "string",
+			"source": "html",
+			"selector": ".message"
+		}
+	},
+	"supports": {
+		"align": true,
+		"lightBlockWrapper": true
+	},
+	"styles": [
+		{
+			"name": "default",
+			"label": "Default",
+			"isDefault": true
+		},
+		{
+			"name": "other",
+			"label": "Other"
+		}
+	],
+	"example": {
+		"attributes": {
+			"message": "This is a notice!"
+		}
+	},
+	"editorScript": "my-plugin-notice-editor-script",
+	"script": "my-plugin-notice-script",
+	"editorStyle": "my-plugin-notice-editor-style",
+	"style": "my-plugin-notice-style"
+}
diff --git a/tests/blocks/register.php b/tests/blocks/register.php
index 8271c9babd..6a872c0455 100644
--- a/tests/blocks/register.php
+++ b/tests/blocks/register.php
@@ -102,6 +102,248 @@ class WP_Test_Block_Register extends WP_UnitTestCase {
 		$this->assertFalse( $registry->is_registered( $name ) );
 	}
 
+	/**
+	 * @ticket 50263
+	 */
+	function test_does_not_remove_block_asset_path_prefix() {
+		$result = remove_block_asset_path_prefix( 'script-handle' );
+
+		$this->assertSame( 'script-handle', $result );
+	}
+
+	/**
+	 * @ticket 50263
+	 */
+	function test_removes_block_asset_path_prefix() {
+		$result = remove_block_asset_path_prefix( 'file:./block.js' );
+
+		$this->assertSame( './block.js', $result );
+	}
+
+	/**
+	 * @ticket 50263
+	 */
+	function test_generate_block_asset_handle() {
+		$block_name = 'unit-tests/my-block';
+
+		$this->assertSame(
+			'unit-tests-my-block-editor-script',
+			generate_block_asset_handle( $block_name, 'editorScript' )
+		);
+		$this->assertSame(
+			'unit-tests-my-block-script',
+			generate_block_asset_handle( $block_name, 'script' )
+		);
+		$this->assertSame(
+			'unit-tests-my-block-editor-style',
+			generate_block_asset_handle( $block_name, 'editorStyle' )
+		);
+		$this->assertSame(
+			'unit-tests-my-block-style',
+			generate_block_asset_handle( $block_name, 'style' )
+		);
+	}
+
+	/**
+	 * @ticket 50263
+	 */
+	function test_field_not_found_register_block_script_handle() {
+		$result = register_block_script_handle( array(), 'script' );
+
+		$this->assertFalse( $result );
+	}
+
+	/**
+	 * @ticket 50263
+	 */
+	function test_empty_value_register_block_script_handle() {
+		$metadata = array( 'script' => '' );
+		$result   = register_block_script_handle( $metadata, 'script' );
+
+		$this->assertFalse( $result );
+	}
+
+	/**
+	 * @expectedIncorrectUsage register_block_script_handle
+	 * @ticket 50263
+	 */
+	function test_missing_asset_file_register_block_script_handle() {
+		$metadata = array(
+			'file'   => __FILE__,
+			'name'   => 'unit-tests/test-block',
+			'script' => 'file:./fixtures/missing-asset.js',
+		);
+		$result   = register_block_script_handle( $metadata, 'script' );
+
+		$this->assertFalse( $result );
+	}
+
+	/**
+	 * @ticket 50263
+	 */
+	function test_handle_passed_register_block_script_handle() {
+		$metadata = array(
+			'editorScript' => 'test-script-handle',
+		);
+		$result   = register_block_script_handle( $metadata, 'editorScript' );
+
+		$this->assertSame( 'test-script-handle', $result );
+	}
+
+	/**
+	 * @ticket 50263
+	 */
+	function test_success_register_block_script_handle() {
+		$metadata = array(
+			'file'   => __FILE__,
+			'name'   => 'unit-tests/test-block',
+			'script' => 'file:./fixtures/block.js',
+		);
+		$result   = register_block_script_handle( $metadata, 'script' );
+
+		$this->assertSame( 'unit-tests-test-block-script', $result );
+	}
+
+	/**
+	 * @ticket 50263
+	 */
+	function test_field_not_found_register_block_style_handle() {
+		$result = register_block_style_handle( array(), 'style' );
+
+		$this->assertFalse( $result );
+	}
+
+	/**
+	 * @ticket 50263
+	 */
+	function test_empty_value_found_register_block_style_handle() {
+		$metadata = array( 'style' => '' );
+		$result   = register_block_style_handle( $metadata, 'style' );
+
+		$this->assertFalse( $result );
+	}
+
+	/**
+	 * @ticket 50263
+	 */
+	function test_handle_passed_register_block_style_handle() {
+		$metadata = array(
+			'style' => 'test-style-handle',
+		);
+		$result   = register_block_style_handle( $metadata, 'style' );
+
+		$this->assertSame( 'test-style-handle', $result );
+	}
+
+	/**
+	 * @ticket 50263
+	 */
+	function test_success_register_block_style_handle() {
+		$metadata = array(
+			'file'  => __FILE__,
+			'name'  => 'unit-tests/test-block',
+			'style' => 'file:./fixtures/block.css',
+		);
+		$result   = register_block_style_handle( $metadata, 'style' );
+
+		$this->assertSame( 'unit-tests-test-block-style', $result );
+	}
+
+	/**
+	 * Tests that the function returns false when the `block.json` is not found
+	 * in the WordPress core.
+	 *
+	 * @ticket 50263
+	 */
+	function test_metadata_not_found_in_wordpress_core() {
+		$result = register_block_type_from_metadata( 'unknown' );
+
+		$this->assertFalse( $result );
+	}
+
+	/**
+	 * Tests that the function returns false when the `block.json` is not found
+	 * in the current directory.
+	 *
+	 * @ticket 50263
+	 */
+	function test_metadata_not_found_in_the_current_directory() {
+		$result = register_block_type_from_metadata( __DIR__ );
+
+		$this->assertFalse( $result );
+	}
+
+	/**
+	 * Tests that the function returns the registered block when the `block.json`
+	 * is found in the fixtures directory.
+	 *
+	 * @ticket 50263
+	 */
+	function test_block_registers_with_metadata_fixture() {
+		$result = register_block_type_from_metadata(
+			__DIR__ . '/fixtures'
+		);
+
+		$this->assertInstanceOf( 'WP_Block_Type', $result );
+		$this->assertSame( 'my-plugin/notice', $result->name );
+		$this->assertSame( 'Notice', $result->title );
+		$this->assertSame( 'common', $result->category );
+		$this->assertSameSets( array( 'core/group' ), $result->parent );
+		$this->assertSame( 'star', $result->icon );
+		$this->assertSame( 'Shows warning, error or success notices‚Ä¶', $result->description );
+		$this->assertSameSets( array( 'alert', 'message' ), $result->keywords );
+		$this->assertSame(
+			array(
+				'message' => array(
+					'type'     => 'string',
+					'source'   => 'html',
+					'selector' => '.message',
+				),
+			),
+			$result->attributes
+		);
+		$this->assertSame(
+			array(
+				'my-plugin/message' => 'message',
+			),
+			$result->provides_context
+		);
+		$this->assertSameSets( array( 'groupId' ), $result->uses_context );
+		$this->assertSame(
+			array(
+				'align'             => true,
+				'lightBlockWrapper' => true,
+			),
+			$result->supports
+		);
+		$this->assertSame(
+			array(
+				array(
+					'name'      => 'default',
+					'label'     => 'Default',
+					'isDefault' => true,
+				),
+				array(
+					'name'  => 'other',
+					'label' => 'Other',
+				),
+			),
+			$result->styles
+		);
+		$this->assertSame(
+			array(
+				'attributes' => array(
+					'message' => 'This is a notice!',
+				),
+			),
+			$result->example
+		);
+		$this->assertSame( 'my-plugin-notice-editor-script', $result->editor_script );
+		$this->assertSame( 'my-plugin-notice-script', $result->script );
+		$this->assertSame( 'my-plugin-notice-editor-style', $result->editor_style );
+		$this->assertSame( 'my-plugin-notice-style', $result->style );
+	}
+
 	/**
 	 * @ticket 45109
 	 */
@@ -138,4 +380,22 @@ class WP_Test_Block_Register extends WP_UnitTestCase {
 		$content = file_get_contents( DIR_TESTDATA . '/blocks/do-blocks-expected.html' );
 		$this->assertFalse( has_blocks( $content ) );
 	}
+
+	/**
+	 * @ticket 49615
+	 */
+	public function test_filter_block_registration() {
+		$filter_registration = function( $args, $name ) {
+			$args['attributes'] = array( $name => array( 'type' => 'boolean' ) );
+			return $args;
+		};
+
+		add_filter( 'register_block_type_args', $filter_registration, 10, 2 );
+		register_block_type( 'core/test-filtered', array() );
+		remove_filter( 'register_block_type_args', $filter_registration );
+
+		$registry   = WP_Block_Type_Registry::get_instance();
+		$block_type = $registry->get_registered( 'core/test-filtered' );
+		$this->assertSame( 'boolean', $block_type->attributes['core/test-filtered']['type'] );
+	}
 }
diff --git a/tests/blocks/render.php b/tests/blocks/render.php
index ab16b498d8..04a3b27027 100644
--- a/tests/blocks/render.php
+++ b/tests/blocks/render.php
@@ -60,7 +60,7 @@ class WP_Test_Block_Render extends WP_UnitTestCase {
 
 		$actual_html = do_blocks( $original_html );
 
-		$this->assertEqualsIgnoreEOL( $expected_html, $actual_html );
+		$this->assertSameIgnoreEOL( $expected_html, $actual_html );
 	}
 
 	/**
@@ -80,7 +80,7 @@ class WP_Test_Block_Render extends WP_UnitTestCase {
 
 		remove_shortcode( 'someshortcode' );
 
-		$this->assertEquals( trim( $classic_filtered_content ), trim( $block_filtered_content ) );
+		$this->assertSame( trim( $classic_filtered_content ), trim( $block_filtered_content ) );
 	}
 
 	function handle_shortcode( $atts, $content ) {
@@ -121,7 +121,7 @@ class WP_Test_Block_Render extends WP_UnitTestCase {
 			$content = '<!-- wp:core/test -->' . $content . '<!-- /wp:core/test -->';
 		}
 
-		$this->assertEquals( 'deep inside', do_blocks( $content ) );
+		$this->assertSame( 'deep inside', do_blocks( $content ) );
 	}
 
 	public function test_can_nest_at_least_so_deep_with_dynamic_blocks() {
@@ -142,7 +142,7 @@ class WP_Test_Block_Render extends WP_UnitTestCase {
 			)
 		);
 
-		$this->assertEquals( $minimum_depth, (int) do_blocks( $content ) );
+		$this->assertSame( $minimum_depth, (int) do_blocks( $content ) );
 	}
 
 	public function render_dynamic_incrementer( $attrs, $content ) {
@@ -160,7 +160,7 @@ class WP_Test_Block_Render extends WP_UnitTestCase {
 
 		$filtered_content = trim( apply_filters( 'the_content', $test_content ) );
 
-		$this->assertEquals( $expected_content, $filtered_content );
+		$this->assertSame( $expected_content, $filtered_content );
 
 		// Check that wpautop() is still defined in the same place.
 		$this->assertSame( $current_priority, has_action( 'the_content', 'wpautop' ) );
@@ -174,7 +174,7 @@ class WP_Test_Block_Render extends WP_UnitTestCase {
 
 		$filtered_content = trim( apply_filters( 'the_content', $test_content ) );
 
-		$this->assertEquals( $expected_content, $filtered_content );
+		$this->assertSame( $expected_content, $filtered_content );
 
 		$this->assertSame( $current_priority, has_action( 'the_content', 'wpautop' ) );
 		$this->assertFalse( has_action( 'the_content', '_restore_wpautop_hook' ) );
@@ -222,7 +222,7 @@ class WP_Test_Block_Render extends WP_UnitTestCase {
 		$html          = do_blocks( self::strip_r( file_get_contents( $html_path ) ) );
 		$expected_html = self::strip_r( file_get_contents( $server_html_path ) );
 
-		$this->assertEquals(
+		$this->assertSame(
 			$expected_html,
 			$html,
 			"File '$html_path' does not match expected value"
@@ -252,7 +252,7 @@ class WP_Test_Block_Render extends WP_UnitTestCase {
 			'after';
 
 		$updated_post_content = do_blocks( $post_content );
-		$this->assertEquals(
+		$this->assertSame(
 			$updated_post_content,
 			'before' .
 			'1:b1' .
@@ -286,7 +286,25 @@ class WP_Test_Block_Render extends WP_UnitTestCase {
 		$global_post = $post;
 		do_blocks( '<!-- wp:core/test /-->' );
 
-		$this->assertEquals( $global_post, $post );
+		$this->assertSame( $global_post, $post );
+	}
+
+	public function test_render_latest_comments_on_password_protected_post() {
+		$post_id      = self::factory()->post->create(
+			array(
+				'post_password' => 'password',
+			)
+		);
+		$comment_text = wp_generate_password( 10, false );
+		self::factory()->comment->create(
+			array(
+				'comment_post_ID' => $post_id,
+				'comment_content' => $comment_text,
+			)
+		);
+		$comments = do_blocks( '<!-- wp:latest-comments {"commentsToShow":1,"displayExcerpt":true} /-->' );
+
+		$this->assertNotContains( $comment_text, $comments );
 	}
 
 	/**
@@ -324,7 +342,7 @@ class WP_Test_Block_Render extends WP_UnitTestCase {
 
 		$data = unserialize( base64_decode( $output ) );
 
-		$this->assertEquals( 'inner', $data[1] );
+		$this->assertSame( 'inner', $data[1] );
 	}
 
 	public function test_dynamic_block_gets_rendered_inner_blocks() {
@@ -352,7 +370,7 @@ class WP_Test_Block_Render extends WP_UnitTestCase {
 
 		$data = unserialize( base64_decode( $output ) );
 
-		$this->assertEquals( 'before10after', $data[1] );
+		$this->assertSame( 'before10after', $data[1] );
 	}
 
 	public function test_dynamic_block_gets_rendered_inner_dynamic_blocks() {
@@ -372,7 +390,7 @@ class WP_Test_Block_Render extends WP_UnitTestCase {
 
 		$inner = $this->render_serialize_dynamic_block( array(), 'deep inner' );
 
-		$this->assertEquals( $data[1], 'before' . $inner . 'after' );
+		$this->assertSame( $data[1], 'before' . $inner . 'after' );
 	}
 
 	/**
diff --git a/tests/blocks/serialization.php b/tests/blocks/serialization.php
new file mode 100644
index 0000000000..1e4f2fcacb
--- /dev/null
+++ b/tests/blocks/serialization.php
@@ -0,0 +1,60 @@
+<?php
+/**
+ * Block serialization tests.
+ *
+ * @package WordPress
+ * @subpackage Blocks
+ * @since 5.3.3
+ */
+
+/**
+ * Tests for block serialization functions
+ *
+ * @since 5.3.3
+ *
+ * @group blocks
+ */
+class WP_Test_Block_Serialization extends WP_UnitTestCase {
+
+	/**
+	 * @dataProvider data_serialize_identity_from_parsed
+	 */
+	function test_serialize_identity_from_parsed( $original ) {
+		$blocks = parse_blocks( $original );
+
+		$actual   = serialize_blocks( $blocks );
+		$expected = $original;
+
+		$this->assertSame( $expected, $actual );
+	}
+
+	function data_serialize_identity_from_parsed() {
+		return array(
+			// Void block.
+			array( '<!-- wp:void /-->' ),
+
+			// Freeform content ($block_name = null).
+			array( 'Example.' ),
+
+			// Block with content.
+			array( '<!-- wp:content -->Example.<!-- /wp:content -->' ),
+
+			// Block with attributes.
+			array( '<!-- wp:attributes {"key":"value"} /-->' ),
+
+			// Block with inner blocks.
+			array( "<!-- wp:outer --><!-- wp:inner {\"key\":\"value\"} -->Example.<!-- /wp:inner -->\n\nExample.\n\n<!-- wp:void /--><!-- /wp:outer -->" ),
+
+			// Block with attribute values that may conflict with HTML comment.
+			array( '<!-- wp:attributes {"key":"\\u002d\\u002d\\u003c\\u003e\\u0026\\u0022"} /-->' ),
+		);
+	}
+
+	function test_serialized_block_name() {
+		$this->assertNull( strip_core_block_namespace( null ) );
+		$this->assertSame( 'example', strip_core_block_namespace( 'example' ) );
+		$this->assertSame( 'example', strip_core_block_namespace( 'core/example' ) );
+		$this->assertSame( 'plugin/example', strip_core_block_namespace( 'plugin/example' ) );
+	}
+
+}
diff --git a/tests/bookmark/getBookmarks.php b/tests/bookmark/getBookmarks.php
index 3382ab893d..9200ed9d09 100644
--- a/tests/bookmark/getBookmarks.php
+++ b/tests/bookmark/getBookmarks.php
@@ -23,7 +23,7 @@ class Tests_Bookmark_GetBookmarks extends WP_UnitTestCase {
 			)
 		);
 
-		$this->assertEqualSets( $found1, $found2 );
+		$this->assertSameSets( $found1, $found2 );
 		$this->assertSame( $num_queries, $wpdb->num_queries );
 	}
 
@@ -80,7 +80,7 @@ class Tests_Bookmark_GetBookmarks extends WP_UnitTestCase {
 			)
 		);
 
-		// equal sets != same order
+		// Equal sets != same order.
 		$this->assertEqualSets( $found1, $found2 );
 		$this->assertTrue( $num_queries < $wpdb->num_queries );
 	}
@@ -99,7 +99,7 @@ class Tests_Bookmark_GetBookmarks extends WP_UnitTestCase {
 			$found_ids[] = $bookmark->link_id;
 		}
 
-		// equal sets != same order.
+		// Equal sets != same order.
 		$this->assertEqualSets( $bookmarks, $found_ids );
 	}
 
@@ -117,7 +117,7 @@ class Tests_Bookmark_GetBookmarks extends WP_UnitTestCase {
 			$found_ids[] = $bookmark->link_id;
 		}
 
-		// equal sets != same order.
+		// Equal sets != same order.
 		$this->assertEqualSets( $bookmarks, $found_ids );
 	}
 
@@ -145,7 +145,7 @@ class Tests_Bookmark_GetBookmarks extends WP_UnitTestCase {
 			$found_ids[] = $bookmark->link_id;
 		}
 
-		// equal sets != same order.
+		// Equal sets != same order.
 		$this->assertEqualSets( $bookmarks, $found_ids );
 	}
 }
diff --git a/tests/cache.php b/tests/cache.php
index e310329009..16206208da 100644
--- a/tests/cache.php
+++ b/tests/cache.php
@@ -8,8 +8,8 @@ class Tests_Cache extends WP_UnitTestCase {
 
 	function setUp() {
 		parent::setUp();
-		// create two cache objects with a shared cache dir
-		// this simulates a typical cache situation, two separate requests interacting
+		// Create two cache objects with a shared cache directory.
+		// This simulates a typical cache situation, two separate requests interacting.
 		$this->cache =& $this->init_cache();
 	}
 
@@ -27,7 +27,7 @@ class Tests_Cache extends WP_UnitTestCase {
 	}
 
 	function test_miss() {
-		$this->assertEquals( null, $this->cache->get( 'test_miss' ) );
+		$this->assertFalse( $this->cache->get( 'test_miss' ) );
 	}
 
 	function test_add_get() {
@@ -35,25 +35,40 @@ class Tests_Cache extends WP_UnitTestCase {
 		$val = 'val';
 
 		$this->cache->add( $key, $val );
-		$this->assertEquals( $val, $this->cache->get( $key ) );
+		$this->assertSame( $val, $this->cache->get( $key ) );
 	}
 
 	function test_add_get_0() {
 		$key = __FUNCTION__;
 		$val = 0;
 
-		// you can store zero in the cache
-		$this->cache->add( $key, $val );
-		$this->assertEquals( $val, $this->cache->get( $key ) );
+		// You can store zero in the cache.
+		$this->assertTrue( $this->cache->add( $key, $val ) );
+		$this->assertSame( $val, $this->cache->get( $key ) );
 	}
 
+	/**
+	 * @ticket 20004
+	 */
 	function test_add_get_null() {
 		$key = __FUNCTION__;
 		$val = null;
 
+		// You can store `null` in the cache.
+		$this->assertTrue( $this->cache->add( $key, $val ) );
+		$this->assertSame( $val, $this->cache->get( $key ) );
+	}
+
+	/**
+	 * @ticket 20004
+	 */
+	function test_add_get_false() {
+		$key = __FUNCTION__;
+		$val = false;
+
+		// You can store `false` in the cache.
 		$this->assertTrue( $this->cache->add( $key, $val ) );
-		// null is converted to empty string
-		$this->assertEquals( '', $this->cache->get( $key ) );
+		$this->assertSame( $val, $this->cache->get( $key ) );
 	}
 
 	function test_add() {
@@ -61,12 +76,12 @@ class Tests_Cache extends WP_UnitTestCase {
 		$val1 = 'val1';
 		$val2 = 'val2';
 
-		// add $key to the cache
+		// Add $key to the cache.
 		$this->assertTrue( $this->cache->add( $key, $val1 ) );
-		$this->assertEquals( $val1, $this->cache->get( $key ) );
-		// $key is in the cache, so reject new calls to add()
+		$this->assertSame( $val1, $this->cache->get( $key ) );
+		// $key is in the cache, so reject new calls to add().
 		$this->assertFalse( $this->cache->add( $key, $val2 ) );
-		$this->assertEquals( $val1, $this->cache->get( $key ) );
+		$this->assertSame( $val1, $this->cache->get( $key ) );
 	}
 
 	function test_replace() {
@@ -74,13 +89,13 @@ class Tests_Cache extends WP_UnitTestCase {
 		$val  = 'val1';
 		$val2 = 'val2';
 
-		// memcached rejects replace() if the key does not exist
+		// memcached rejects replace() if the key does not exist.
 		$this->assertFalse( $this->cache->replace( $key, $val ) );
 		$this->assertFalse( $this->cache->get( $key ) );
 		$this->assertTrue( $this->cache->add( $key, $val ) );
-		$this->assertEquals( $val, $this->cache->get( $key ) );
+		$this->assertSame( $val, $this->cache->get( $key ) );
 		$this->assertTrue( $this->cache->replace( $key, $val2 ) );
-		$this->assertEquals( $val2, $this->cache->get( $key ) );
+		$this->assertSame( $val2, $this->cache->get( $key ) );
 	}
 
 	function test_set() {
@@ -88,12 +103,12 @@ class Tests_Cache extends WP_UnitTestCase {
 		$val1 = 'val1';
 		$val2 = 'val2';
 
-		// memcached accepts set() if the key does not exist
+		// memcached accepts set() if the key does not exist.
 		$this->assertTrue( $this->cache->set( $key, $val1 ) );
-		$this->assertEquals( $val1, $this->cache->get( $key ) );
-		// Second set() with same key should be allowed
+		$this->assertSame( $val1, $this->cache->get( $key ) );
+		// Second set() with same key should be allowed.
 		$this->assertTrue( $this->cache->set( $key, $val2 ) );
-		$this->assertEquals( $val2, $this->cache->get( $key ) );
+		$this->assertSame( $val2, $this->cache->get( $key ) );
 	}
 
 	function test_flush() {
@@ -107,14 +122,14 @@ class Tests_Cache extends WP_UnitTestCase {
 		$val = 'val';
 
 		$this->cache->add( $key, $val );
-		// item is visible to both cache objects
-		$this->assertEquals( $val, $this->cache->get( $key ) );
+		// Item is visible to both cache objects.
+		$this->assertSame( $val, $this->cache->get( $key ) );
 		$this->cache->flush();
 		// If there is no value get returns false.
 		$this->assertFalse( $this->cache->get( $key ) );
 	}
 
-	// Make sure objects are cloned going to and from the cache
+	// Make sure objects are cloned going to and from the cache.
 	function test_object_refs() {
 		$key           = __FUNCTION__ . '_1';
 		$object_a      = new stdClass;
@@ -122,9 +137,9 @@ class Tests_Cache extends WP_UnitTestCase {
 		$this->cache->set( $key, $object_a );
 		$object_a->foo = 'bravo';
 		$object_b      = $this->cache->get( $key );
-		$this->assertEquals( 'alpha', $object_b->foo );
+		$this->assertSame( 'alpha', $object_b->foo );
 		$object_b->foo = 'charlie';
-		$this->assertEquals( 'bravo', $object_a->foo );
+		$this->assertSame( 'bravo', $object_a->foo );
 
 		$key           = __FUNCTION__ . '_2';
 		$object_a      = new stdClass;
@@ -132,9 +147,9 @@ class Tests_Cache extends WP_UnitTestCase {
 		$this->cache->add( $key, $object_a );
 		$object_a->foo = 'bravo';
 		$object_b      = $this->cache->get( $key );
-		$this->assertEquals( 'alpha', $object_b->foo );
+		$this->assertSame( 'alpha', $object_b->foo );
 		$object_b->foo = 'charlie';
-		$this->assertEquals( 'bravo', $object_a->foo );
+		$this->assertSame( 'bravo', $object_a->foo );
 	}
 
 	function test_incr() {
@@ -144,10 +159,10 @@ class Tests_Cache extends WP_UnitTestCase {
 
 		$this->cache->set( $key, 0 );
 		$this->cache->incr( $key );
-		$this->assertEquals( 1, $this->cache->get( $key ) );
+		$this->assertSame( 1, $this->cache->get( $key ) );
 
 		$this->cache->incr( $key, 2 );
-		$this->assertEquals( 3, $this->cache->get( $key ) );
+		$this->assertSame( 3, $this->cache->get( $key ) );
 	}
 
 	function test_wp_cache_incr() {
@@ -157,10 +172,10 @@ class Tests_Cache extends WP_UnitTestCase {
 
 		wp_cache_set( $key, 0 );
 		wp_cache_incr( $key );
-		$this->assertEquals( 1, wp_cache_get( $key ) );
+		$this->assertSame( 1, wp_cache_get( $key ) );
 
 		wp_cache_incr( $key, 2 );
-		$this->assertEquals( 3, wp_cache_get( $key ) );
+		$this->assertSame( 3, wp_cache_get( $key ) );
 	}
 
 	function test_decr() {
@@ -170,14 +185,14 @@ class Tests_Cache extends WP_UnitTestCase {
 
 		$this->cache->set( $key, 0 );
 		$this->cache->decr( $key );
-		$this->assertEquals( 0, $this->cache->get( $key ) );
+		$this->assertSame( 0, $this->cache->get( $key ) );
 
 		$this->cache->set( $key, 3 );
 		$this->cache->decr( $key );
-		$this->assertEquals( 2, $this->cache->get( $key ) );
+		$this->assertSame( 2, $this->cache->get( $key ) );
 
 		$this->cache->decr( $key, 2 );
-		$this->assertEquals( 0, $this->cache->get( $key ) );
+		$this->assertSame( 0, $this->cache->get( $key ) );
 	}
 
 	/**
@@ -190,25 +205,25 @@ class Tests_Cache extends WP_UnitTestCase {
 
 		wp_cache_set( $key, 0 );
 		wp_cache_decr( $key );
-		$this->assertEquals( 0, wp_cache_get( $key ) );
+		$this->assertSame( 0, wp_cache_get( $key ) );
 
 		wp_cache_set( $key, 3 );
 		wp_cache_decr( $key );
-		$this->assertEquals( 2, wp_cache_get( $key ) );
+		$this->assertSame( 2, wp_cache_get( $key ) );
 
 		wp_cache_decr( $key, 2 );
-		$this->assertEquals( 0, wp_cache_get( $key ) );
+		$this->assertSame( 0, wp_cache_get( $key ) );
 	}
 
 	function test_delete() {
 		$key = __FUNCTION__;
 		$val = 'val';
 
-		// Verify set
+		// Verify set.
 		$this->assertTrue( $this->cache->set( $key, $val ) );
-		$this->assertEquals( $val, $this->cache->get( $key ) );
+		$this->assertSame( $val, $this->cache->get( $key ) );
 
-		// Verify successful delete
+		// Verify successful delete.
 		$this->assertTrue( $this->cache->delete( $key ) );
 		$this->assertFalse( $this->cache->get( $key ) );
 
@@ -219,16 +234,16 @@ class Tests_Cache extends WP_UnitTestCase {
 		$key = __FUNCTION__;
 		$val = 'val';
 
-		// Verify set
+		// Verify set.
 		$this->assertTrue( wp_cache_set( $key, $val ) );
-		$this->assertEquals( $val, wp_cache_get( $key ) );
+		$this->assertSame( $val, wp_cache_get( $key ) );
 
-		// Verify successful delete
+		// Verify successful delete.
 		$this->assertTrue( wp_cache_delete( $key ) );
 		$this->assertFalse( wp_cache_get( $key ) );
 
 		// wp_cache_delete() does not have a $force method.
-		// Delete returns (bool) true when key is not set and $force is true
+		// Delete returns (bool) true when key is not set and $force is true.
 		// $this->assertTrue( wp_cache_delete( $key, 'default', true ) );
 
 		$this->assertFalse( wp_cache_delete( $key, 'default' ) );
@@ -246,38 +261,38 @@ class Tests_Cache extends WP_UnitTestCase {
 		if ( ! is_multisite() ) {
 			// Single site ingnores switch_to_blog().
 			$this->assertTrue( $this->cache->set( $key, $val ) );
-			$this->assertEquals( $val, $this->cache->get( $key ) );
+			$this->assertSame( $val, $this->cache->get( $key ) );
 			$this->cache->switch_to_blog( 999 );
-			$this->assertEquals( $val, $this->cache->get( $key ) );
+			$this->assertSame( $val, $this->cache->get( $key ) );
 			$this->assertTrue( $this->cache->set( $key, $val2 ) );
-			$this->assertEquals( $val2, $this->cache->get( $key ) );
+			$this->assertSame( $val2, $this->cache->get( $key ) );
 			$this->cache->switch_to_blog( get_current_blog_id() );
-			$this->assertEquals( $val2, $this->cache->get( $key ) );
+			$this->assertSame( $val2, $this->cache->get( $key ) );
 		} else {
-			// Multisite should have separate per-blog caches
+			// Multisite should have separate per-blog caches.
 			$this->assertTrue( $this->cache->set( $key, $val ) );
-			$this->assertEquals( $val, $this->cache->get( $key ) );
+			$this->assertSame( $val, $this->cache->get( $key ) );
 			$this->cache->switch_to_blog( 999 );
 			$this->assertFalse( $this->cache->get( $key ) );
 			$this->assertTrue( $this->cache->set( $key, $val2 ) );
-			$this->assertEquals( $val2, $this->cache->get( $key ) );
+			$this->assertSame( $val2, $this->cache->get( $key ) );
 			$this->cache->switch_to_blog( get_current_blog_id() );
-			$this->assertEquals( $val, $this->cache->get( $key ) );
+			$this->assertSame( $val, $this->cache->get( $key ) );
 			$this->cache->switch_to_blog( 999 );
-			$this->assertEquals( $val2, $this->cache->get( $key ) );
+			$this->assertSame( $val2, $this->cache->get( $key ) );
 			$this->cache->switch_to_blog( get_current_blog_id() );
-			$this->assertEquals( $val, $this->cache->get( $key ) );
+			$this->assertSame( $val, $this->cache->get( $key ) );
 		}
 
-		// Global group
+		// Global group.
 		$this->assertTrue( $this->cache->set( $key, $val, 'global-cache-test' ) );
-		$this->assertEquals( $val, $this->cache->get( $key, 'global-cache-test' ) );
+		$this->assertSame( $val, $this->cache->get( $key, 'global-cache-test' ) );
 		$this->cache->switch_to_blog( 999 );
-		$this->assertEquals( $val, $this->cache->get( $key, 'global-cache-test' ) );
+		$this->assertSame( $val, $this->cache->get( $key, 'global-cache-test' ) );
 		$this->assertTrue( $this->cache->set( $key, $val2, 'global-cache-test' ) );
-		$this->assertEquals( $val2, $this->cache->get( $key, 'global-cache-test' ) );
+		$this->assertSame( $val2, $this->cache->get( $key, 'global-cache-test' ) );
 		$this->cache->switch_to_blog( get_current_blog_id() );
-		$this->assertEquals( $val2, $this->cache->get( $key, 'global-cache-test' ) );
+		$this->assertSame( $val2, $this->cache->get( $key, 'global-cache-test' ) );
 	}
 
 	function test_wp_cache_init() {
@@ -287,7 +302,7 @@ class Tests_Cache extends WP_UnitTestCase {
 		global $wp_object_cache;
 
 		if ( wp_using_ext_object_cache() ) {
-			// External caches will contain property values that contain non-matching resource IDs
+			// External caches will contain property values that contain non-matching resource IDs.
 			$this->assertInstanceOf( 'WP_Object_Cache', $wp_object_cache );
 		} else {
 			$this->assertEquals( $wp_object_cache, $new_blank_cache_object );
@@ -301,18 +316,37 @@ class Tests_Cache extends WP_UnitTestCase {
 
 		$fake_key = 'my-fake-key';
 
-		// Save the first value to cache and verify
+		// Save the first value to cache and verify.
 		wp_cache_set( $key, $val1 );
-		$this->assertEquals( $val1, wp_cache_get( $key ) );
+		$this->assertSame( $val1, wp_cache_get( $key ) );
 
-		// Replace the value and verify
+		// Replace the value and verify.
 		wp_cache_replace( $key, $val2 );
-		$this->assertEquals( $val2, wp_cache_get( $key ) );
+		$this->assertSame( $val2, wp_cache_get( $key ) );
 
-		// Non-existant key should fail
+		// Non-existant key should fail.
 		$this->assertFalse( wp_cache_replace( $fake_key, $val1 ) );
 
-		// Make sure $fake_key is not stored
+		// Make sure $fake_key is not stored.
 		$this->assertFalse( wp_cache_get( $fake_key ) );
 	}
+
+	/**
+	 * @ticket 20875
+	 */
+	public function test_get_multiple() {
+		wp_cache_set( 'foo1', 'bar', 'group1' );
+		wp_cache_set( 'foo2', 'bar', 'group1' );
+		wp_cache_set( 'foo1', 'bar', 'group2' );
+
+		$found = wp_cache_get_multiple( array( 'foo1', 'foo2', 'foo3' ), 'group1' );
+
+		$expected = array(
+			'foo1' => 'bar',
+			'foo2' => 'bar',
+			'foo3' => false,
+		);
+
+		$this->assertSame( $expected, $found );
+	}
 }
diff --git a/tests/canonical.php b/tests/canonical.php
index 53d666e59c..895e5bb44e 100644
--- a/tests/canonical.php
+++ b/tests/canonical.php
@@ -33,9 +33,10 @@ class Tests_Canonical extends WP_Canonical_UnitTestCase {
 	}
 
 	function data_canonical() {
-		/* Data format:
+		/*
+		 * Data format:
 		 * [0]: Test URL.
-		 * [1]: expected results: Any of the following can be used
+		 * [1]: Expected results: Any of the following can be used.
 		 *      array( 'url': expected redirection location, 'qv': expected query vars to be set via the rewrite AND $_GET );
 		 *      array( expected query vars to be set, same as 'qv' above )
 		 *      (string) expected redirect location
@@ -43,13 +44,13 @@ class Tests_Canonical extends WP_Canonical_UnitTestCase {
 		 * [3]: (optional) Array of class/function names expected to throw `_doing_it_wrong()` notices.
 		 */
 
-		// Please Note: A few test cases are commented out below, Look at the test case following it, in most cases it's simply showing 2 options for the "proper" redirect.
+		// Please Note: A few test cases are commented out below, look at the test case following it.
+		// In most cases it's simply showing 2 options for the "proper" redirect.
 		return array(
-			// Categories
-
+			// Categories.
 			array( '?cat=%d', array( 'url' => '/category/parent/' ), 15256 ),
 			array( '?cat=%d', array( 'url' => '/category/parent/child-1/' ), 15256 ),
-			array( '?cat=%d', array( 'url' => '/category/parent/child-1/child-2/' ) ), // no children
+			array( '?cat=%d', array( 'url' => '/category/parent/child-1/child-2/' ) ), // No children.
 			array(
 				'/category/uncategorized/',
 				array(
@@ -89,7 +90,7 @@ class Tests_Canonical extends WP_Canonical_UnitTestCase {
 				17174,
 			),
 
-			// Categories & Intersections with other vars
+			// Categories & intersections with other vars.
 			array(
 				'/category/uncategorized/?tag=post-formats',
 				array(
@@ -108,10 +109,10 @@ class Tests_Canonical extends WP_Canonical_UnitTestCase {
 				),
 			),
 
-			// Taxonomies with extra Query Vars
-			array( '/category/cat-a/page/1/?test=one%20two', '/category/cat-a/?test=one%20two', 18086 ), // Extra query vars should stay encoded
+			// Taxonomies with extra query vars.
+			array( '/category/cat-a/page/1/?test=one%20two', '/category/cat-a/?test=one%20two', 18086 ), // Extra query vars should stay encoded.
 
-			// Categories with Dates
+			// Categories with dates.
 			array(
 				'/2008/04/?cat=1',
 				array(
@@ -124,35 +125,47 @@ class Tests_Canonical extends WP_Canonical_UnitTestCase {
 				),
 				17661,
 			),
-			//          array( '/2008/?category_name=cat-a', array( 'url' => '/2008/?category_name=cat-a', 'qv' => array('category_name' => 'cat-a', 'year' => '2008' ) ) ),
+			/*
+			array(
+				'/2008/?category_name=cat-a',
+					array(
+						'url' => '/2008/?category_name=cat-a',
+						'qv'  => array(
+							'category_name' => 'cat-a',
+							'year'          => '2008'
+						)
+					)
+			),
+			*/
 
-							// Pages
-							array( '/child-page-1/', '/parent-page/child-page-1/' ),
+			// Pages.
+			array( '/child-page-1/', '/parent-page/child-page-1/' ),
 			array( '/?page_id=144', '/parent-page/child-page-1/' ),
 			array( '/abo', '/about/' ),
 			array( '/parent/child1/grandchild/', '/parent/child1/grandchild/' ),
 			array( '/parent/child2/grandchild/', '/parent/child2/grandchild/' ),
 
-			// Posts
+			// Posts.
 			array( '?p=587', '/2008/06/02/post-format-test-audio/' ),
 			array( '/?name=images-test', '/2008/09/03/images-test/' ),
-			// Incomplete slug should resolve and remove the ?name= parameter
+			// Incomplete slug should resolve and remove the ?name= parameter.
 			array( '/?name=images-te', '/2008/09/03/images-test/', 20374 ),
-			// Page slug should resolve to post slug and remove the ?pagename= parameter
+			// Page slug should resolve to post slug and remove the ?pagename= parameter.
 			array( '/?pagename=images-test', '/2008/09/03/images-test/', 20374 ),
 
 			array( '/2008/06/02/post-format-test-au/', '/2008/06/02/post-format-test-audio/' ),
 			array( '/2008/06/post-format-test-au/', '/2008/06/02/post-format-test-audio/' ),
 			array( '/2008/post-format-test-au/', '/2008/06/02/post-format-test-audio/' ),
-			array( '/2010/post-format-test-au/', '/2008/06/02/post-format-test-audio/' ), // A Year the post is not in
+			array( '/2010/post-format-test-au/', '/2008/06/02/post-format-test-audio/' ), // A year the post is not in.
 			array( '/post-format-test-au/', '/2008/06/02/post-format-test-audio/' ),
 
+			// Pagination.
 			array(
-				'/2008/09/03/images-test/3/',
+				'/2008/09/03/multipage-post-test/3/',
 				array(
-					'url' => '/2008/09/03/images-test/3/',
+					'url' => '/2008/09/03/multipage-post-test/3/',
 					'qv'  => array(
-						'name'     => 'images-test',
+						'name'     => 'multipage-post-test',
 						'year'     => '2008',
 						'monthnum' => '09',
 						'day'      => '03',
@@ -160,22 +173,25 @@ class Tests_Canonical extends WP_Canonical_UnitTestCase {
 					),
 				),
 			),
-			array( '/2008/09/03/images-test/?page=3', '/2008/09/03/images-test/3/' ),
-			array( '/2008/09/03/images-te?page=3', '/2008/09/03/images-test/3/' ),
+			array( '/2008/09/03/multipage-post-test/?page=3', '/2008/09/03/multipage-post-test/3/' ),
+			array( '/2008/09/03/multipage-post-te?page=3', '/2008/09/03/multipage-post-test/3/' ),
 
-			// Comments
+			array( '/2008/09/03/non-paged-post-test/3/', '/2008/09/03/non-paged-post-test/' ),
+			array( '/2008/09/03/non-paged-post-test/?page=3', '/2008/09/03/non-paged-post-test/' ),
+
+			// Comments.
 			array( '/2008/03/03/comment-test/?cpage=2', '/2008/03/03/comment-test/comment-page-2/' ),
 
-			// Attachments
+			// Attachments.
 			array( '/?attachment_id=611', '/2008/06/10/post-format-test-gallery/canola2/' ),
 			array( '/2008/06/10/post-format-test-gallery/?attachment_id=611', '/2008/06/10/post-format-test-gallery/canola2/' ),
 
-			// Dates
+			// Dates.
 			array( '/?m=2008', '/2008/' ),
 			array( '/?m=200809', '/2008/09/' ),
 			array( '/?m=20080905', '/2008/09/05/' ),
 
-			array( '/2008/?day=05', '/2008/?day=05' ), // no redirect
+			array( '/2008/?day=05', '/2008/?day=05' ), // No redirect.
 			array( '/2008/09/?day=05', '/2008/09/05/' ),
 			array( '/2008/?monthnum=9', '/2008/09/' ),
 
@@ -184,34 +200,79 @@ class Tests_Canonical extends WP_Canonical_UnitTestCase {
 			array( '/2012/13/', '/2012/' ),
 			array( '/2012/11/51/', '/2012/11/', 0, array( 'WP_Date_Query' ) ),
 
-			// Authors
+			// Authors.
 			array( '/?author=%d', '/author/canonical-author/' ),
-			//          array( '/?author=%d&year=2008', '/2008/?author=3'),
-			//          array( '/author/canonical-author/?year=2008', '/2008/?author=3'), //Either or, see previous testcase.
+			// array( '/?author=%d&year=2008', '/2008/?author=3'),
+			// array( '/author/canonical-author/?year=2008', '/2008/?author=3'), // Either or, see previous testcase.
 
-				// Feeds
-				array( '/?feed=atom', '/feed/atom/' ),
+			// Feeds.
+			array( '/?feed=atom', '/feed/atom/' ),
 			array( '/?feed=rss2', '/feed/' ),
 			array( '/?feed=comments-rss2', '/comments/feed/' ),
 			array( '/?feed=comments-atom', '/comments/feed/atom/' ),
 
-			// Feeds (per-post)
+			// Feeds (per-post).
 			array( '/2008/03/03/comment-test/?feed=comments-atom', '/2008/03/03/comment-test/feed/atom/' ),
 			array( '/?p=149&feed=comments-atom', '/2008/03/03/comment-test/feed/atom/' ),
 
-			// Index
+			// Index.
 			array( '/?paged=1', '/' ),
 			array( '/page/1/', '/' ),
 			array( '/page1/', '/' ),
 			array( '/?paged=2', '/page/2/' ),
 			array( '/page2/', '/page/2/' ),
 
-			// Misc
+			// Misc.
 			array( '/2008%20', '/2008' ),
 			array( '//2008////', '/2008/' ),
 
-			// Todo: Endpoints (feeds, trackbacks, etc), More fuzzed mixed query variables, comment paging, Home page (Static)
+			// @todo Endpoints (feeds, trackbacks, etc). More fuzzed mixed query variables, comment paging, Home page (static).
+		);
+	}
+
+	/**
+	 * @ticket 16557
+	 */
+	public function test_do_redirect_guess_404_permalink() {
+		// Test disable do_redirect_guess_404_permalink().
+		add_filter( 'do_redirect_guess_404_permalink', '__return_false' );
+		$this->go_to( '/child-page-1' );
+		$this->assertFalse( redirect_guess_404_permalink() );
+	}
+
+	/**
+	 * @ticket 16557
+	 */
+	public function test_pre_redirect_guess_404_permalink() {
+		// Test short-circuit filter.
+		add_filter(
+			'pre_redirect_guess_404_permalink',
+			function() {
+				return 'wp';
+			}
+		);
+		$this->go_to( '/child-page-1' );
+		$this->assertSame( 'wp', redirect_guess_404_permalink() );
+	}
+
+	/**
+	 * @ticket 16557
+	 */
+	public function test_strict_redirect_guess_404_permalink() {
+		$post = self::factory()->post->create(
+			array(
+				'post_title' => 'strict-redirect-guess-404-permalink',
+			)
 		);
+
+		$this->go_to( 'strict-redirect' );
+
+		// Test default 'non-strict' redirect guess.
+		$this->assertSame( get_permalink( $post ), redirect_guess_404_permalink() );
+
+		// Test 'strict' redirect guess.
+		add_filter( 'strict_redirect_guess_404_permalink', '__return_true' );
+		$this->assertFalse( redirect_guess_404_permalink() );
 	}
 
 	/**
diff --git a/tests/canonical/category.php b/tests/canonical/category.php
index 51c2f40409..bbf2b3414d 100644
--- a/tests/canonical/category.php
+++ b/tests/canonical/category.php
@@ -30,9 +30,10 @@ class Tests_Canonical_Category extends WP_Canonical_UnitTestCase {
 	}
 
 	public function data_canonical_category() {
-		/* Data format:
+		/*
+		 * Data format:
 		 * [0]: Test URL.
-		 * [1]: expected results: Any of the following can be used
+		 * [1]: Expected results: Any of the following can be used.
 		 *      array( 'url': expected redirection location, 'qv': expected query vars to be set via the rewrite AND $_GET );
 		 *      array( expected query vars to be set, same as 'qv' above )
 		 *      (string) expected redirect location
diff --git a/tests/canonical/customRules.php b/tests/canonical/customRules.php
index 63fb7cd97d..9a6dc553b1 100644
--- a/tests/canonical/customRules.php
+++ b/tests/canonical/customRules.php
@@ -11,7 +11,7 @@ class Tests_Canonical_CustomRules extends WP_Canonical_UnitTestCase {
 		parent::setUp();
 		global $wp_rewrite;
 		// Add a custom Rewrite rule to test category redirections.
-		$wp_rewrite->add_rule( 'ccr/(.+?)/sort/(asc|desc)', 'index.php?category_name=$matches[1]&order=$matches[2]', 'top' ); // ccr = Custom_Cat_Rule
+		$wp_rewrite->add_rule( 'ccr/(.+?)/sort/(asc|desc)', 'index.php?category_name=$matches[1]&order=$matches[2]', 'top' ); // ccr = Custom_Cat_Rule.
 		$wp_rewrite->flush_rules();
 	}
 
@@ -23,16 +23,17 @@ class Tests_Canonical_CustomRules extends WP_Canonical_UnitTestCase {
 	}
 
 	function data() {
-		/* Format:
-		 * [0]: $test_url,
-		 * [1]: expected results: Any of the following can be used
+		/*
+		 * Data format:
+		 * [0]: Test URL.
+		 * [1]: Expected results: Any of the following can be used.
 		 *      array( 'url': expected redirection location, 'qv': expected query vars to be set via the rewrite AND $_GET );
 		 *      array( expected query vars to be set, same as 'qv' above )
 		 *      (string) expected redirect location
 		 * [3]: (optional) The ticket the test refers to, Can be skipped if unknown.
 		 */
 		return array(
-			// Custom Rewrite rules leading to Categories
+			// Custom Rewrite rules leading to Categories.
 			array(
 				'/ccr/uncategorized/sort/asc/',
 				array(
diff --git a/tests/canonical/https.php b/tests/canonical/https.php
index c6b59bdb34..1a903dd74d 100644
--- a/tests/canonical/https.php
+++ b/tests/canonical/https.php
@@ -24,37 +24,31 @@ class Tests_Canonical_HTTPS extends WP_Canonical_UnitTestCase {
 	 * @ticket 27954
 	 */
 	public function test_http_request_with_http_home() {
-
 		$redirect = redirect_canonical( $this->http, false );
 
-		$this->assertEquals( $redirect, false );
-
+		$this->assertNull( $redirect );
 	}
 
 	/**
 	 * @ticket 27954
 	 */
 	public function test_https_request_with_http_home() {
-
 		$redirect = redirect_canonical( $this->https, false );
 
-		$this->assertEquals( $redirect, false );
-
+		$this->assertNull( $redirect );
 	}
 
 	/**
 	 * @ticket 27954
 	 */
 	public function test_https_request_with_https_home() {
-
 		add_filter( 'home_url', array( $this, 'set_https' ) );
 
 		$redirect = redirect_canonical( $this->https, false );
 
-		$this->assertEquals( $redirect, false );
+		$this->assertNull( $redirect );
 
 		remove_filter( 'home_url', array( $this, 'set_https' ) );
-
 	}
 
 }
diff --git a/tests/canonical/noRewrite.php b/tests/canonical/noRewrite.php
index 0c2a027cfc..0bdbea2725 100644
--- a/tests/canonical/noRewrite.php
+++ b/tests/canonical/noRewrite.php
@@ -1,6 +1,6 @@
 <?php
 
-require_once dirname( dirname( __FILE__ ) ) . '/canonical.php';
+require_once dirname( __DIR__ ) . '/canonical.php';
 
 /**
  * @group canonical
@@ -9,7 +9,7 @@ require_once dirname( dirname( __FILE__ ) ) . '/canonical.php';
  */
 class Tests_Canonical_NoRewrite extends WP_Canonical_UnitTestCase {
 
-	// These test cases are run against the test handler in WP_Canonical
+	// These test cases are run against the test handler in WP_Canonical.
 
 	public function setUp() {
 		global $wp_rewrite;
@@ -29,248 +29,251 @@ class Tests_Canonical_NoRewrite extends WP_Canonical_UnitTestCase {
 	}
 
 	function data() {
-		/* Format:
-		 * [0]: $test_url,
-		 * [1]: expected results: Any of the following can be used
+		/*
+		 * Test URL.
+		 * [0]: Test URL.
+		 * [1]: Expected results: Any of the following can be used.
 		 *      array( 'url': expected redirection location, 'qv': expected query vars to be set via the rewrite AND $_GET );
-		 *      array( expected query vars to be set, same as 'qv' above )
-		 *      (string) expected redirect location
-		 * [3]: (optional) The ticket the test refers to, Can be skipped if unknown.
+		 *      array( expected query vars to be set, same as 'qv' above );
+		 *      (string) expected redirect location.
+		 * [3]: (optional) The ticket the test refers to. Can be skipped if unknown.
 		 */
 		return array(
 			array( '/?p=123', '/?p=123' ),
 
-			// This post_type arg should be stripped, because p=1 exists, and does not have post_type= in its query string
+			// This post_type arg should be stripped, because p=1 exists, and does not have post_type= in its query string.
 			array( '/?post_type=fake-cpt&p=1', '/?p=1' ),
 
-			// Strip an existing but incorrect post_type arg
+			// Strip an existing but incorrect post_type arg.
 			array( '/?post_type=page&page_id=1', '/?p=1' ),
 
 			// Trailing spaces and punctuation in query string args.
-			array(
+			array( // Space.
 				'/?p=358 ',
 				array(
 					'url' => '/?p=358',
 					'qv'  => array( 'p' => '358' ),
 				),
 				20383,
-			), // space
-			array(
+			),
+			array( // Encoded space.
 				'/?p=358%20',
 				array(
 					'url' => '/?p=358',
 					'qv'  => array( 'p' => '358' ),
 				),
 				20383,
-			), // encoded space
-			array(
+			),
+			array( // Exclamation mark.
 				'/?p=358!',
 				array(
 					'url' => '/?p=358',
 					'qv'  => array( 'p' => '358' ),
 				),
 				20383,
-			), // exclamation mark
-			array(
+			),
+			array( // Encoded exclamation mark.
 				'/?p=358%21',
 				array(
 					'url' => '/?p=358',
 					'qv'  => array( 'p' => '358' ),
 				),
 				20383,
-			), // encoded exclamation mark
-			array(
+			),
+			array( // Double quote.
 				'/?p=358"',
 				array(
 					'url' => '/?p=358',
 					'qv'  => array( 'p' => '358' ),
 				),
 				20383,
-			), // double quote
-			array(
+			),
+			array( // Encoded double quote.
 				'/?p=358%22',
 				array(
 					'url' => '/?p=358',
 					'qv'  => array( 'p' => '358' ),
 				),
 				20383,
-			), // encoded double quote
-			array(
+			),
+			array( // Single quote.
 				'/?p=358\'',
 				array(
 					'url' => '/?p=358',
 					'qv'  => array( 'p' => '358' ),
 				),
 				20383,
-			), // single quote
-			array(
+			),
+			array( // Encoded single quote.
 				'/?p=358%27',
 				array(
 					'url' => '/?p=358',
 					'qv'  => array( 'p' => '358' ),
 				),
 				20383,
-			), // encoded single quote
-			array(
+			),
+			array( // Opening bracket.
 				'/?p=358(',
 				array(
 					'url' => '/?p=358',
 					'qv'  => array( 'p' => '358' ),
 				),
 				20383,
-			), // opening bracket
-			array(
+			),
+			array( // Encoded opening bracket.
 				'/?p=358%28',
 				array(
 					'url' => '/?p=358',
 					'qv'  => array( 'p' => '358' ),
 				),
 				20383,
-			), // encoded opening bracket
-			array(
+			),
+			array( // Closing bracket.
 				'/?p=358)',
 				array(
 					'url' => '/?p=358',
 					'qv'  => array( 'p' => '358' ),
 				),
 				20383,
-			), // closing bracket
-			array(
+			),
+			array( // Encoded closing bracket.
 				'/?p=358%29',
 				array(
 					'url' => '/?p=358',
 					'qv'  => array( 'p' => '358' ),
 				),
 				20383,
-			), // encoded closing bracket
-			array(
+			),
+			array( // Comma.
 				'/?p=358,',
 				array(
 					'url' => '/?p=358',
 					'qv'  => array( 'p' => '358' ),
 				),
 				20383,
-			), // comma
-			array(
+			),
+			array( // Encoded comma.
 				'/?p=358%2C',
 				array(
 					'url' => '/?p=358',
 					'qv'  => array( 'p' => '358' ),
 				),
 				20383,
-			), // encoded comma
-			array(
+			),
+			array( // Period.
 				'/?p=358.',
 				array(
 					'url' => '/?p=358',
 					'qv'  => array( 'p' => '358' ),
 				),
 				20383,
-			), // period
-			array(
+			),
+			array( // Encoded period.
 				'/?p=358%2E',
 				array(
 					'url' => '/?p=358',
 					'qv'  => array( 'p' => '358' ),
 				),
 				20383,
-			), // encoded period
-			array(
+			),
+			array( // Semicolon.
 				'/?p=358;',
 				array(
 					'url' => '/?p=358',
 					'qv'  => array( 'p' => '358' ),
 				),
 				20383,
-			), // semicolon
-			array(
+			),
+			array( // Encoded semicolon.
 				'/?p=358%3B',
 				array(
 					'url' => '/?p=358',
 					'qv'  => array( 'p' => '358' ),
 				),
 				20383,
-			), // encoded semicolon
-			array(
+			),
+			array( // Opening curly bracket.
 				'/?p=358{',
 				array(
 					'url' => '/?p=358',
 					'qv'  => array( 'p' => '358' ),
 				),
 				20383,
-			), // opening curly bracket
-			array(
+			),
+			array( // Encoded opening curly bracket.
 				'/?p=358%7B',
 				array(
 					'url' => '/?p=358',
 					'qv'  => array( 'p' => '358' ),
 				),
 				20383,
-			), // encoded opening curly bracket
-			array(
+			),
+			array( // Closing curly bracket.
 				'/?p=358}',
 				array(
 					'url' => '/?p=358',
 					'qv'  => array( 'p' => '358' ),
 				),
 				20383,
-			), // closing curly bracket
-			array(
+			),
+			array( // Encoded closing curly bracket.
 				'/?p=358%7D',
 				array(
 					'url' => '/?p=358',
 					'qv'  => array( 'p' => '358' ),
 				),
 				20383,
-			), // encoded closing curly bracket
-			array(
+			),
+			array( // Encoded opening curly quote.
 				'/?p=358%E2%80%9C',
 				array(
 					'url' => '/?p=358',
 					'qv'  => array( 'p' => '358' ),
 				),
 				20383,
-			), // encoded opening curly quote
-			array(
+			),
+			array( // Encoded closing curly quote.
 				'/?p=358%E2%80%9D',
 				array(
 					'url' => '/?p=358',
 					'qv'  => array( 'p' => '358' ),
 				),
 				20383,
-			), // encoded closing curly quote
+			),
 
 			// Trailing spaces and punctuation in permalinks.
-			array( '/page/2/ ', '/page/2/', 20383 ), // space
-			array( '/page/2/%20', '/page/2/', 20383 ), // encoded space
-			array( '/page/2/!', '/page/2/', 20383 ), // exclamation mark
-			array( '/page/2/%21', '/page/2/', 20383 ), // encoded exclamation mark
-			array( '/page/2/"', '/page/2/', 20383 ), // double quote
-			array( '/page/2/%22', '/page/2/', 20383 ), // encoded double quote
-			array( '/page/2/\'', '/page/2/', 20383 ), // single quote
-			array( '/page/2/%27', '/page/2/', 20383 ), // encoded single quote
-			array( '/page/2/(', '/page/2/', 20383 ), // opening bracket
-			array( '/page/2/%28', '/page/2/', 20383 ), // encoded opening bracket
-			array( '/page/2/)', '/page/2/', 20383 ), // closing bracket
-			array( '/page/2/%29', '/page/2/', 20383 ), // encoded closing bracket
-			array( '/page/2/,', '/page/2/', 20383 ), // comma
-			array( '/page/2/%2C', '/page/2/', 20383 ), // encoded comma
-			array( '/page/2/.', '/page/2/', 20383 ), // period
-			array( '/page/2/%2E', '/page/2/', 20383 ), // encoded period
-			array( '/page/2/;', '/page/2/', 20383 ), // semicolon
-			array( '/page/2/%3B', '/page/2/', 20383 ), // encoded semicolon
-			array( '/page/2/{', '/page/2/', 20383 ), // opening curly bracket
-			array( '/page/2/%7B', '/page/2/', 20383 ), // encoded opening curly bracket
-			array( '/page/2/}', '/page/2/', 20383 ), // closing curly bracket
-			array( '/page/2/%7D', '/page/2/', 20383 ), // encoded closing curly bracket
-			array( '/page/2/%E2%80%9C', '/page/2/', 20383 ), // encoded opening curly quote
-			array( '/page/2/%E2%80%9D', '/page/2/', 20383 ), // encoded closing curly quote
+			array( '/page/2/ ', '/page/2/', 20383 ),   // Space.
+			array( '/page/2/%20', '/page/2/', 20383 ), // Encoded space.
+			array( '/page/2/!', '/page/2/', 20383 ),   // Exclamation mark.
+			array( '/page/2/%21', '/page/2/', 20383 ), // Encoded exclamation mark.
+			array( '/page/2/"', '/page/2/', 20383 ),   // Double quote.
+			array( '/page/2/%22', '/page/2/', 20383 ), // Encoded double quote.
+			array( '/page/2/\'', '/page/2/', 20383 ),  // Single quote.
+			array( '/page/2/%27', '/page/2/', 20383 ), // Encoded single quote.
+			array( '/page/2/(', '/page/2/', 20383 ),   // Opening bracket.
+			array( '/page/2/%28', '/page/2/', 20383 ), // Encoded opening bracket.
+			array( '/page/2/)', '/page/2/', 20383 ),   // Closing bracket.
+			array( '/page/2/%29', '/page/2/', 20383 ), // Encoded closing bracket.
+			array( '/page/2/,', '/page/2/', 20383 ),   // Comma.
+			array( '/page/2/%2C', '/page/2/', 20383 ), // Encoded comma.
+			array( '/page/2/.', '/page/2/', 20383 ),   // Period.
+			array( '/page/2/%2E', '/page/2/', 20383 ), // Encoded period.
+			array( '/page/2/;', '/page/2/', 20383 ),   // Semicolon.
+			array( '/page/2/%3B', '/page/2/', 20383 ), // Encoded semicolon.
+			array( '/page/2/{', '/page/2/', 20383 ),   // Opening curly bracket.
+			array( '/page/2/%7B', '/page/2/', 20383 ), // Encoded opening curly bracket.
+			array( '/page/2/}', '/page/2/', 20383 ),   // Closing curly bracket.
+			array( '/page/2/%7D', '/page/2/', 20383 ), // Encoded closing curly bracket.
+			array( '/page/2/%E2%80%9C', '/page/2/', 20383 ), // Encoded opening curly quote.
+			array( '/page/2/%E2%80%9D', '/page/2/', 20383 ), // Encoded closing curly quote.
 
-			array( '/?page_id=1', '/?p=1' ), // redirect page_id to p (should cover page_id|p|attachment_id to one another
+			array( '/?page_id=1', '/?p=1' ), // Redirect page_id to p (should cover page_id|p|attachment_id to one another).
 			array( '/?page_id=1&post_type=revision', '/?p=1' ),
 
 			array( '/?feed=rss2&p=1', '/?feed=rss2&p=1', 21841 ),
 			array( '/?feed=rss&p=1', '/?feed=rss2&p=1', 24623 ),
+
+			array( '/?comp=East+(North)', '/?comp=East+(North)', 49347 ),
 		);
 	}
 }
diff --git a/tests/canonical/pageOnFront.php b/tests/canonical/pageOnFront.php
index 915d997a41..659cbcdaa9 100644
--- a/tests/canonical/pageOnFront.php
+++ b/tests/canonical/pageOnFront.php
@@ -40,25 +40,31 @@ class Tests_Canonical_PageOnFront extends WP_Canonical_UnitTestCase {
 	}
 
 	function data() {
-		/* Format:
-		 * [0]: $test_url,
-		 * [1]: expected results: Any of the following can be used
+		/*
+		 * Data format:
+		 * [0]: Test URL.
+		 * [1]: Expected results: Any of the following can be used.
 		 *      array( 'url': expected redirection location, 'qv': expected query vars to be set via the rewrite AND $_GET );
 		 *      array( expected query vars to be set, same as 'qv' above )
 		 *      (string) expected redirect location
 		 * [3]: (optional) The ticket the test refers to, Can be skipped if unknown.
 		 */
 		return array(
-			// Check against an odd redirect
+			// Check against an odd redirect.
 			array( '/page/2/', '/page/2/' ),
 			array( '/?page=2', '/page/2/' ),
 			array( '/page/1/', '/' ),
 			array( '/?page=1', '/' ),
 
-			// The page designated as the front page should redirect to the front of the site
+			// The page designated as the front page should redirect to the front of the site.
 			array( '/front-page/', '/' ),
+			// The front page supports the <!--nextpage--> pagination.
 			array( '/front-page/2/', '/page/2/' ),
 			array( '/front-page/?page=2', '/page/2/' ),
+			// The posts page does not support the <!--nextpage--> pagination.
+			array( '/blog-page/2/', '/blog-page/' ),
+			array( '/blog-page/?page=2', '/blog-page/' ),
+			// The posts page supports regular pagination.
 			array( '/blog-page/?paged=2', '/blog-page/page/2/' ),
 		);
 	}
diff --git a/tests/canonical/paged.php b/tests/canonical/paged.php
index 6a85aff677..27aef3622a 100644
--- a/tests/canonical/paged.php
+++ b/tests/canonical/paged.php
@@ -6,7 +6,7 @@
  */
 class Tests_Canonical_Paged extends WP_Canonical_UnitTestCase {
 
-	function test_nextpage() {
+	function test_redirect_canonical_with_nextpage_pagination() {
 		$para = 'This is a paragraph.
 			This is a paragraph.
 			This is a paragraph.';
@@ -19,9 +19,12 @@ class Tests_Canonical_Paged extends WP_Canonical_UnitTestCase {
 			)
 		);
 
-		$link  = parse_url( get_permalink( $post_id ), PHP_URL_PATH );
-		$paged = $link . '4/';
+		$link = parse_url( get_permalink( $post_id ), PHP_URL_PATH );
 
-		$this->assertCanonical( $paged, $link );
+		// Existing page should be displayed as is.
+		$this->assertCanonical( $link . '3/', $link . '3/' );
+		// Non-existing page should redirect to the permalink.
+		$this->assertCanonical( $link . '4/', $link );
 	}
+
 }
diff --git a/tests/canonical/robots.php b/tests/canonical/robots.php
new file mode 100644
index 0000000000..c7851a062e
--- /dev/null
+++ b/tests/canonical/robots.php
@@ -0,0 +1,16 @@
+<?php
+
+/**
+ * @group canonical
+ * @group rewrite
+ * @group query
+ */
+class Tests_Canonical_Robots extends WP_Canonical_UnitTestCase {
+
+	public function test_remove_trailing_slashes_for_robots_requests() {
+		$this->set_permalink_structure( '/%postname%/' );
+		$this->assertCanonical( '/robots.txt', '/robots.txt' );
+		$this->assertCanonical( '/robots.txt/', '/robots.txt' );
+	}
+
+}
diff --git a/tests/canonical/sitemaps.php b/tests/canonical/sitemaps.php
new file mode 100644
index 0000000000..d46028068d
--- /dev/null
+++ b/tests/canonical/sitemaps.php
@@ -0,0 +1,114 @@
+<?php
+
+/**
+ * @group canonical
+ * @group rewrite
+ * @group query
+ * @group sitemaps
+ */
+class Tests_Canonical_Sitemaps extends WP_Canonical_UnitTestCase {
+
+	public function setUp() {
+		parent::setUp();
+		$wp_sitemaps = new WP_Sitemaps();
+		$wp_sitemaps->init();
+	}
+
+	public function test_remove_trailing_slashes_for_sitemap_index_requests() {
+		$this->set_permalink_structure( '/%postname%/' );
+		$this->assertCanonical( '/wp-sitemap.xml', '/wp-sitemap.xml' );
+		$this->assertCanonical( '/wp-sitemap.xml/', '/wp-sitemap.xml' );
+	}
+
+	public function test_remove_trailing_slashes_for_sitemap_index_stylesheet_requests() {
+		$this->set_permalink_structure( '/%postname%/' );
+		$this->assertCanonical( '/wp-sitemap-index.xsl', '/wp-sitemap-index.xsl' );
+		$this->assertCanonical( '/wp-sitemap-index.xsl/', '/wp-sitemap-index.xsl' );
+	}
+
+	public function test_remove_trailing_slashes_for_sitemap_requests() {
+		$this->set_permalink_structure( '/%postname%/' );
+		$this->assertCanonical( '/wp-sitemap-posts-post-1.xml', '/wp-sitemap-posts-post-1.xml' );
+		$this->assertCanonical( '/wp-sitemap-posts-post-1.xml/', '/wp-sitemap-posts-post-1.xml' );
+		$this->assertCanonical( '/wp-sitemap-users-1.xml', '/wp-sitemap-users-1.xml' );
+		$this->assertCanonical( '/wp-sitemap-users-1.xml/', '/wp-sitemap-users-1.xml' );
+	}
+
+	public function test_remove_trailing_slashes_for_sitemap_stylesheet_requests() {
+		$this->set_permalink_structure( '/%postname%/' );
+		$this->assertCanonical( '/wp-sitemap.xsl', '/wp-sitemap.xsl' );
+		$this->assertCanonical( '/wp-sitemap.xsl/', '/wp-sitemap.xsl' );
+	}
+
+	/**
+	 * Ensure sitemaps redirects work as expected with pretty permalinks.
+	 *
+	 * @dataProvider data_sitemaps_canonical_pretty_redirects
+	 * @ticket 50910
+	 */
+	public function test_sitemaps_canonical_pretty_redirects( $test_url, $expected ) {
+		$this->set_permalink_structure( '/%postname%/' );
+		$this->assertCanonical( $test_url, $expected, 50910 );
+	}
+
+	/**
+	 * Data provider for test_sitemaps_canonical_pretty_redirects.
+	 *
+	 * @return array[] {
+	 *     Data to test with.
+	 *
+	 *     @type string $0 The test URL.
+	 *     @type string $1 The expected canonical URL.
+	 * }
+	 */
+	public function data_sitemaps_canonical_pretty_redirects() {
+		return array(
+			// Ugly/incorrect versions redirect correctly.
+			array( '/?sitemap=index', '/wp-sitemap.xml' ),
+			array( '/wp-sitemap.xml/', '/wp-sitemap.xml' ),
+			array( '/?sitemap=posts&sitemap-subtype=post', '/wp-sitemap-posts-post-1.xml' ),
+			array( '/?sitemap=posts&sitemap-subtype=post&paged=2', '/wp-sitemap-posts-post-2.xml' ),
+			array( '/?sitemap=taxonomies&sitemap-subtype=category', '/wp-sitemap-taxonomies-category-1.xml' ),
+			array( '/?sitemap=taxonomies&sitemap-subtype=category&paged=2', '/wp-sitemap-taxonomies-category-2.xml' ),
+
+			// Pretty versions don't redirect incorrectly.
+			array( '/wp-sitemap.xml', '/wp-sitemap.xml' ),
+			array( '/wp-sitemap-posts-post-1.xml', '/wp-sitemap-posts-post-1.xml' ),
+			array( '/wp-sitemap-posts-post-2.xml', '/wp-sitemap-posts-post-2.xml' ),
+			array( '/wp-sitemap-taxonomies-category-1.xml', '/wp-sitemap-taxonomies-category-1.xml' ),
+			array( '/wp-sitemap-taxonomies-category-2.xml', '/wp-sitemap-taxonomies-category-2.xml' ),
+		);
+	}
+
+	/**
+	 * Ensure sitemaps redirects work as expected with ugly permalinks.
+	 *
+	 * @dataProvider data_sitemaps_canonical_ugly_redirects
+	 * @ticket 50910
+	 */
+	public function test_sitemaps_canonical_ugly_redirects( $test_url, $expected ) {
+		$this->set_permalink_structure( '' );
+		$this->assertCanonical( $test_url, $expected, 50910 );
+	}
+
+	/**
+	 * Data provider for test_sitemaps_canonical_ugly_redirects.
+	 *
+	 * @return array[] {
+	 *     Data to test with.
+	 *
+	 *     @type string $0 The test URL.
+	 *     @type string $1 The expected canonical URL.
+	 * }
+	 */
+	public function data_sitemaps_canonical_ugly_redirects() {
+		return array(
+			// Ugly permalinks remain ugly.
+			array( '/?sitemap=index', '/?sitemap=index' ),
+			array( '/?sitemap=posts&sitemap-subtype=post', '/?sitemap=posts&sitemap-subtype=post' ),
+			array( '/?sitemap=posts&sitemap-subtype=post&paged=2', '/?sitemap=posts&sitemap-subtype=post&paged=2' ),
+			array( '/?sitemap=taxonomies&sitemap-subtype=category', '/?sitemap=taxonomies&sitemap-subtype=category' ),
+			array( '/?sitemap=taxonomies&sitemap-subtype=category&paged=2', '/?sitemap=taxonomies&sitemap-subtype=category&paged=2' ),
+		);
+	}
+}
diff --git a/tests/category.php b/tests/category.php
index a4a03f3259..824bb68c73 100644
--- a/tests/category.php
+++ b/tests/category.php
@@ -20,16 +20,16 @@ class Tests_Category extends WP_UnitTestCase {
 	 * @expectedDeprecated get_all_category_ids
 	 */
 	function test_get_all_category_ids() {
-		// create categories
+		// Ccreate categories.
 		self::factory()->category->create_many( 2 );
 
-		// create new taxonomy to ensure not included
+		// Create new taxonomy to ensure not included.
 		register_taxonomy( 'test_tax_cat', 'post' );
 		wp_insert_term( 'test1', 'test_tax_cat' );
 
-		// Validate length is 1 + created due to uncategorized
+		// Validate length is 1 + created due to uncategorized.
 		$cat_ids = get_all_category_ids();
-		$this->assertEquals( 3, count( $cat_ids ) );
+		$this->assertSame( 3, count( $cat_ids ) );
 	}
 
 	/**
@@ -37,7 +37,7 @@ class Tests_Category extends WP_UnitTestCase {
 	 */
 	function test_get_category_by_slug() {
 
-		// create Test Categories
+		// Create test categories.
 		$testcat  = self::factory()->category->create_and_get(
 			array(
 				'slug' => 'testcat',
@@ -51,13 +51,13 @@ class Tests_Category extends WP_UnitTestCase {
 			)
 		);
 
-		// validate category is returned by slug
+		// Validate category is returned by slug.
 		$ret_testcat = get_category_by_slug( 'testcat' );
-		$this->assertEquals( $testcat->term_id, $ret_testcat->term_id );
+		$this->assertSame( $testcat->term_id, $ret_testcat->term_id );
 		$ret_testcat = get_category_by_slug( 'TeStCaT' );
-		$this->assertEquals( $testcat->term_id, $ret_testcat->term_id );
+		$this->assertSame( $testcat->term_id, $ret_testcat->term_id );
 
-		// validate unknown category returns false
+		// Validate unknown category returns false.
 		$this->assertFalse( get_category_by_slug( 'testcat3' ) );
 
 	}
@@ -67,7 +67,7 @@ class Tests_Category extends WP_UnitTestCase {
 	 */
 	function test__make_cat_compat() {
 
-		// create Test Categories and Array Representations
+		// Create test categories and array representations.
 		$testcat_array            = array(
 			'slug'        => 'testmcc',
 			'name'        => 'Test MCC',
@@ -85,7 +85,7 @@ class Tests_Category extends WP_UnitTestCase {
 		$testcat2                  = self::factory()->category->create_and_get( $testcat2_array );
 		$testcat2_array['term_id'] = $testcat2->term_id;
 
-		// unset properties to enable validation of object
+		// Unset properties to enable validation of object.
 		unset( $testcat->cat_ID );
 		unset( $testcat->category_count );
 		unset( $testcat->category_description );
@@ -100,43 +100,43 @@ class Tests_Category extends WP_UnitTestCase {
 		unset( $testcat2->category_nicename );
 		unset( $testcat2->category_parent );
 
-		// make Compatible
+		// Make compatible.
 		_make_cat_compat( $testcat );
 		_make_cat_compat( $testcat2 );
 		_make_cat_compat( $testcat_array );
 		_make_cat_compat( $testcat2_array );
 
-		// Validate Compatibility Object
-		$this->assertEquals( $testcat->cat_ID, $testcat->term_id );
-		$this->assertEquals( $testcat->category_count, $testcat->count );
-		$this->assertEquals( $testcat->category_description, $testcat->description );
-		$this->assertEquals( $testcat->cat_name, $testcat->name );
-		$this->assertEquals( $testcat->category_nicename, $testcat->slug );
-		$this->assertEquals( $testcat->category_parent, $testcat->parent );
-
-		// Validate Compatibility Object with Parent
-		$this->assertEquals( $testcat->cat_ID, $testcat->term_id );
-		$this->assertEquals( $testcat->category_count, $testcat->count );
-		$this->assertEquals( $testcat->category_description, $testcat->description );
-		$this->assertEquals( $testcat->cat_name, $testcat->name );
-		$this->assertEquals( $testcat->category_nicename, $testcat->slug );
-		$this->assertEquals( $testcat->category_parent, $testcat->parent );
-
-		// Validate Compatibility Array
-		$this->assertEquals( $testcat_array['cat_ID'], $testcat_array['term_id'] );
-		$this->assertEquals( $testcat_array['category_count'], $testcat_array['count'] );
-		$this->assertEquals( $testcat_array['category_description'], $testcat_array['description'] );
-		$this->assertEquals( $testcat_array['cat_name'], $testcat_array['name'] );
-		$this->assertEquals( $testcat_array['category_nicename'], $testcat_array['slug'] );
-		$this->assertEquals( $testcat_array['category_parent'], $testcat_array['parent'] );
-
-		// Validate Compatibility Array with Parent
-		$this->assertEquals( $testcat_array['cat_ID'], $testcat_array['term_id'] );
-		$this->assertEquals( $testcat_array['category_count'], $testcat_array['count'] );
-		$this->assertEquals( $testcat_array['category_description'], $testcat_array['description'] );
-		$this->assertEquals( $testcat_array['cat_name'], $testcat_array['name'] );
-		$this->assertEquals( $testcat_array['category_nicename'], $testcat_array['slug'] );
-		$this->assertEquals( $testcat_array['category_parent'], $testcat_array['parent'] );
+		// Validate compatibility object.
+		$this->assertSame( $testcat->cat_ID, $testcat->term_id );
+		$this->assertSame( $testcat->category_count, $testcat->count );
+		$this->assertSame( $testcat->category_description, $testcat->description );
+		$this->assertSame( $testcat->cat_name, $testcat->name );
+		$this->assertSame( $testcat->category_nicename, $testcat->slug );
+		$this->assertSame( $testcat->category_parent, $testcat->parent );
+
+		// Validate compatibility object with parent.
+		$this->assertSame( $testcat->cat_ID, $testcat->term_id );
+		$this->assertSame( $testcat->category_count, $testcat->count );
+		$this->assertSame( $testcat->category_description, $testcat->description );
+		$this->assertSame( $testcat->cat_name, $testcat->name );
+		$this->assertSame( $testcat->category_nicename, $testcat->slug );
+		$this->assertSame( $testcat->category_parent, $testcat->parent );
+
+		// Validate compatibility array.
+		$this->assertSame( $testcat_array['cat_ID'], $testcat_array['term_id'] );
+		$this->assertSame( $testcat_array['category_count'], $testcat_array['count'] );
+		$this->assertSame( $testcat_array['category_description'], $testcat_array['description'] );
+		$this->assertSame( $testcat_array['cat_name'], $testcat_array['name'] );
+		$this->assertSame( $testcat_array['category_nicename'], $testcat_array['slug'] );
+		$this->assertSame( $testcat_array['category_parent'], $testcat_array['parent'] );
+
+		// Validate compatibility array with parent.
+		$this->assertSame( $testcat_array['cat_ID'], $testcat_array['term_id'] );
+		$this->assertSame( $testcat_array['category_count'], $testcat_array['count'] );
+		$this->assertSame( $testcat_array['category_description'], $testcat_array['description'] );
+		$this->assertSame( $testcat_array['cat_name'], $testcat_array['name'] );
+		$this->assertSame( $testcat_array['category_nicename'], $testcat_array['slug'] );
+		$this->assertSame( $testcat_array['category_parent'], $testcat_array['parent'] );
 	}
 
 	/**
@@ -144,7 +144,7 @@ class Tests_Category extends WP_UnitTestCase {
 	 */
 	function test_get_cat_name() {
 
-		// create Test Category
+		// Create test category.
 		$testcat = self::factory()->category->create_and_get(
 			array(
 				'slug' => 'testcat',
@@ -152,10 +152,10 @@ class Tests_Category extends WP_UnitTestCase {
 			)
 		);
 
-		// Validate
-		$this->assertEquals( $testcat->name, get_cat_name( $testcat->term_id ) );
-		$this->assertEquals( '', get_cat_name( -1 ) );
-		$this->assertEquals( '', get_cat_name( $testcat->term_id + 100 ) );
+		// Validate.
+		$this->assertSame( $testcat->name, get_cat_name( $testcat->term_id ) );
+		$this->assertSame( '', get_cat_name( -1 ) );
+		$this->assertSame( '', get_cat_name( $testcat->term_id + 100 ) );
 
 	}
 
@@ -164,7 +164,7 @@ class Tests_Category extends WP_UnitTestCase {
 	 */
 	function test_get_cat_ID() {
 
-		// create Test Category
+		// Create test category.
 		$testcat = self::factory()->category->create_and_get(
 			array(
 				'slug' => 'testcat',
@@ -172,10 +172,10 @@ class Tests_Category extends WP_UnitTestCase {
 			)
 		);
 
-		// Validate
-		$this->assertEquals( $testcat->term_id, get_cat_ID( $testcat->name ) );
-		$this->assertEquals( 0, get_cat_ID( 'NO CAT' ) );
-		$this->assertEquals( 0, get_cat_ID( 12 ) );
+		// Validate.
+		$this->assertSame( $testcat->term_id, get_cat_ID( $testcat->name ) );
+		$this->assertSame( 0, get_cat_ID( 'NO CAT' ) );
+		$this->assertSame( 0, get_cat_ID( 12 ) );
 
 	}
 
@@ -184,7 +184,7 @@ class Tests_Category extends WP_UnitTestCase {
 	 */
 	function test_get_category_by_path() {
 
-		// create Test Categories
+		// Create test categories.
 		$root_id           = self::factory()->category->create(
 			array(
 				'slug' => 'root',
@@ -198,7 +198,7 @@ class Tests_Category extends WP_UnitTestCase {
 		);
 		$root_cat_cat_id   = self::factory()->category->create(
 			array(
-				'slug'   => 'cat', //note this is modified on create
+				'slug'   => 'cat', // Note this is modified on create.
 				'parent' => $root_cat_id,
 			)
 		);
@@ -210,7 +210,7 @@ class Tests_Category extends WP_UnitTestCase {
 		);
 		$root_path_cat_id  = self::factory()->category->create(
 			array(
-				'slug'   => 'cat', //note this is modified on create
+				'slug'   => 'cat', // Note this is modified on create.
 				'parent' => $root_path_id,
 			)
 		);
@@ -222,24 +222,24 @@ class Tests_Category extends WP_UnitTestCase {
 		);
 		$root_level_cat_id = self::factory()->category->create(
 			array(
-				'slug'   => 'cat', //note this is modified on create
+				'slug'   => 'cat', // Note this is modified on create.
 				'parent' => $root_level_id,
 			)
 		);
 
-		// Validate Full Match
+		// Validate full match.
 		$ret_cat = get_category_by_path( '/root/level-1', true );
-		$this->assertEquals( $root_level_id, $ret_cat->term_id );
+		$this->assertSame( $root_level_id, $ret_cat->term_id );
 		$this->assertNull( get_category_by_path( 'level-1', true ) );
 		$this->assertNull( get_category_by_path( 'nocat/nocat/', true ) );
 
-		// Validate Partial Match
+		// Validate partial match.
 		$ret_cat = get_category_by_path( 'level-1', false );
-		$this->assertEquals( $root_level_id, $ret_cat->term_id );
+		$this->assertSame( $root_level_id, $ret_cat->term_id );
 		$ret_cat = get_category_by_path( 'root/cat/level-1', false );
-		$this->assertEquals( $root_level_id, $ret_cat->term_id );
+		$this->assertSame( $root_level_id, $ret_cat->term_id );
 		$ret_cat = get_category_by_path( 'root$2Fcat%20%2Flevel-1', false );
-		$this->assertEquals( $root_level_id, $ret_cat->term_id );
+		$this->assertSame( $root_level_id, $ret_cat->term_id );
 		$this->assertNull( get_category_by_path( 'nocat/nocat/', false ) );
 	}
 }
diff --git a/tests/comment-submission.php b/tests/comment-submission.php
index 2ad7f49bf5..88d5a1eae9 100644
--- a/tests/comment-submission.php
+++ b/tests/comment-submission.php
@@ -5,8 +5,35 @@
  */
 class Tests_Comment_Submission extends WP_UnitTestCase {
 
+	protected static $post;
+	protected static $author_id;
+	protected static $editor_id;
+
 	protected $preprocess_comment_data = array();
 
+	public static function wpSetUpBeforeClass( $factory ) {
+		self::$post = $factory->post->create_and_get();
+
+		self::$author_id = $factory->user->create(
+			array(
+				'role' => 'author',
+			)
+		);
+
+		self::$editor_id = $factory->user->create(
+			array(
+				'role' => 'editor',
+			)
+		);
+	}
+
+	public static function wpTearDownAfterClass() {
+		wp_delete_post( self::$post->ID, true );
+
+		self::delete_user( self::$author_id );
+		self::delete_user( self::$editor_id );
+	}
+
 	function setUp() {
 		parent::setUp();
 		require_once ABSPATH . WPINC . '/class-phpass.php';
@@ -34,11 +61,12 @@ class Tests_Comment_Submission extends WP_UnitTestCase {
 
 		$this->assertSame( 0, did_action( $error ) );
 
-		$post    = self::factory()->post->create_and_get(
+		$post = self::factory()->post->create_and_get(
 			array(
 				'comment_status' => 'closed',
 			)
 		);
+
 		$data    = array(
 			'comment_post_ID' => $post->ID,
 		);
@@ -56,13 +84,15 @@ class Tests_Comment_Submission extends WP_UnitTestCase {
 
 		$this->assertSame( 0, did_action( $error ) );
 
-		$post = self::factory()->post->create_and_get();
-		wp_trash_post( $post->ID );
+		wp_trash_post( self::$post->ID );
+
 		$data    = array(
-			'comment_post_ID' => $post->ID,
+			'comment_post_ID' => self::$post->ID,
 		);
 		$comment = wp_handle_comment_submission( $data );
 
+		wp_untrash_post( self::$post->ID );
+
 		$this->assertSame( 1, did_action( $error ) );
 		$this->assertWPError( $comment );
 		$this->assertSame( $error, $comment->get_error_code() );
@@ -74,11 +104,12 @@ class Tests_Comment_Submission extends WP_UnitTestCase {
 
 		$this->assertSame( 0, did_action( $error ) );
 
-		$post    = self::factory()->post->create_and_get(
+		$post = self::factory()->post->create_and_get(
 			array(
 				'post_status' => 'draft',
 			)
 		);
+
 		$data    = array(
 			'comment_post_ID' => $post->ID,
 		);
@@ -97,22 +128,17 @@ class Tests_Comment_Submission extends WP_UnitTestCase {
 	public function test_submitting_comment_to_draft_post_returns_error_message_for_user_with_correct_caps() {
 		$error = 'comment_on_draft';
 
-		$user = self::factory()->user->create_and_get(
-			array(
-				'role' => 'author',
-			)
-		);
-
-		wp_set_current_user( $user->ID );
+		wp_set_current_user( self::$author_id );
 
 		$this->assertSame( 0, did_action( $error ) );
 
-		$post    = self::factory()->post->create_and_get(
+		$post = self::factory()->post->create_and_get(
 			array(
 				'post_status' => 'draft',
-				'post_author' => $user->ID,
+				'post_author' => self::$author_id,
 			)
 		);
+
 		$data    = array(
 			'comment_post_ID' => $post->ID,
 		);
@@ -126,7 +152,7 @@ class Tests_Comment_Submission extends WP_UnitTestCase {
 
 	public function test_submitting_comment_to_scheduled_post_returns_error() {
 
-		// Same error as commenting on a draft
+		// Same error as commenting on a draft.
 		$error = 'comment_on_draft';
 
 		$this->assertSame( 0, did_action( $error ) );
@@ -156,11 +182,12 @@ class Tests_Comment_Submission extends WP_UnitTestCase {
 
 		$this->assertSame( 0, did_action( $error ) );
 
-		$post    = self::factory()->post->create_and_get(
+		$post = self::factory()->post->create_and_get(
 			array(
 				'post_password' => 'password',
 			)
 		);
+
 		$data    = array(
 			'comment_post_ID' => $post->ID,
 		);
@@ -179,11 +206,12 @@ class Tests_Comment_Submission extends WP_UnitTestCase {
 
 		$_COOKIE[ 'wp-postpass_' . COOKIEHASH ] = $hasher->HashPassword( $password );
 
-		$post    = self::factory()->post->create_and_get(
+		$post = self::factory()->post->create_and_get(
 			array(
 				'post_password' => $password,
 			)
 		);
+
 		$data    = array(
 			'comment_post_ID' => $post->ID,
 			'comment'         => 'Comment',
@@ -209,9 +237,8 @@ class Tests_Comment_Submission extends WP_UnitTestCase {
 
 		wp_set_current_user( $user->ID );
 
-		$post    = self::factory()->post->create_and_get();
 		$data    = array(
-			'comment_post_ID' => $post->ID,
+			'comment_post_ID' => self::$post->ID,
 			'comment'         => 'Comment',
 		);
 		$comment = wp_handle_comment_submission( $data );
@@ -229,9 +256,8 @@ class Tests_Comment_Submission extends WP_UnitTestCase {
 
 	public function test_submitting_valid_comment_anonymously_succeeds() {
 
-		$post    = self::factory()->post->create_and_get();
 		$data    = array(
-			'comment_post_ID' => $post->ID,
+			'comment_post_ID' => self::$post->ID,
 			'comment'         => 'Comment',
 			'author'          => 'Comment Author',
 			'email'           => 'comment@example.org',
@@ -257,9 +283,8 @@ class Tests_Comment_Submission extends WP_UnitTestCase {
 	 */
 	public function test_submitting_comment_handles_slashes_correctly_handles_slashes() {
 
-		$post    = self::factory()->post->create_and_get();
 		$data    = array(
-			'comment_post_ID' => $post->ID,
+			'comment_post_ID' => self::$post->ID,
 			'comment'         => 'Comment with 1 slash: \\',
 			'author'          => 'Comment Author with 1 slash: \\',
 			'email'           => 'comment@example.org',
@@ -279,11 +304,12 @@ class Tests_Comment_Submission extends WP_UnitTestCase {
 
 		$error = 'comment_id_not_found';
 
-		$post    = self::factory()->post->create_and_get(
+		$post = self::factory()->post->create_and_get(
 			array(
 				'post_status' => 'private',
 			)
 		);
+
 		$data    = array(
 			'comment_post_ID' => $post->ID,
 		);
@@ -299,12 +325,7 @@ class Tests_Comment_Submission extends WP_UnitTestCase {
 
 		$error = 'comment_id_not_found';
 
-		$author = self::factory()->user->create_and_get(
-			array(
-				'role' => 'author',
-			)
-		);
-		$user   = self::factory()->user->create_and_get(
+		$user = self::factory()->user->create_and_get(
 			array(
 				'role' => 'author',
 			)
@@ -312,12 +333,13 @@ class Tests_Comment_Submission extends WP_UnitTestCase {
 
 		wp_set_current_user( $user->ID );
 
-		$post    = self::factory()->post->create_and_get(
+		$post = self::factory()->post->create_and_get(
 			array(
 				'post_status' => 'private',
-				'post_author' => $author->ID,
+				'post_author' => self::$author_id,
 			)
 		);
+
 		$data    = array(
 			'comment_post_ID' => $post->ID,
 		);
@@ -333,12 +355,7 @@ class Tests_Comment_Submission extends WP_UnitTestCase {
 
 		$error = 'comment_id_not_found';
 
-		$author = self::factory()->user->create_and_get(
-			array(
-				'role' => 'author',
-			)
-		);
-		$user   = self::factory()->user->create_and_get(
+		$user = self::factory()->user->create_and_get(
 			array(
 				'role' => 'author',
 			)
@@ -346,13 +363,14 @@ class Tests_Comment_Submission extends WP_UnitTestCase {
 
 		wp_set_current_user( $user->ID );
 
-		$post    = self::factory()->post->create_and_get(
+		$post = self::factory()->post->create_and_get(
 			array(
 				'post_status'    => 'private',
-				'post_author'    => $author->ID,
+				'post_author'    => self::$author_id,
 				'comment_status' => 'closed',
 			)
 		);
+
 		$data    = array(
 			'comment_post_ID' => $post->ID,
 		);
@@ -366,16 +384,15 @@ class Tests_Comment_Submission extends WP_UnitTestCase {
 
 	public function test_submitting_comment_to_own_private_post_succeeds() {
 
-		$user = self::factory()->user->create_and_get();
-
-		wp_set_current_user( $user->ID );
+		wp_set_current_user( self::$author_id );
 
-		$post    = self::factory()->post->create_and_get(
+		$post = self::factory()->post->create_and_get(
 			array(
 				'post_status' => 'private',
-				'post_author' => $user->ID,
+				'post_author' => self::$author_id,
 			)
 		);
+
 		$data    = array(
 			'comment_post_ID' => $post->ID,
 			'comment'         => 'Comment',
@@ -390,25 +407,15 @@ class Tests_Comment_Submission extends WP_UnitTestCase {
 
 	public function test_submitting_comment_to_accessible_private_post_succeeds() {
 
-		$author = self::factory()->user->create_and_get(
-			array(
-				'role' => 'author',
-			)
-		);
-		$user   = self::factory()->user->create_and_get(
-			array(
-				'role' => 'editor',
-			)
-		);
-
-		wp_set_current_user( $user->ID );
+		wp_set_current_user( self::$editor_id );
 
-		$post    = self::factory()->post->create_and_get(
+		$post = self::factory()->post->create_and_get(
 			array(
 				'post_status' => 'private',
-				'post_author' => $author->ID,
+				'post_author' => self::$author_id,
 			)
 		);
+
 		$data    = array(
 			'comment_post_ID' => $post->ID,
 			'comment'         => 'Comment',
@@ -423,9 +430,8 @@ class Tests_Comment_Submission extends WP_UnitTestCase {
 
 	public function test_anonymous_user_cannot_comment_unfiltered_html() {
 
-		$post    = self::factory()->post->create_and_get();
 		$data    = array(
-			'comment_post_ID' => $post->ID,
+			'comment_post_ID' => self::$post->ID,
 			'comment'         => 'Comment <script>alert(document.cookie);</script>',
 			'author'          => 'Comment Author',
 			'email'           => 'comment@example.org',
@@ -440,18 +446,12 @@ class Tests_Comment_Submission extends WP_UnitTestCase {
 
 	public function test_unprivileged_user_cannot_comment_unfiltered_html() {
 
-		$user = self::factory()->user->create_and_get(
-			array(
-				'role' => 'author',
-			)
-		);
-		wp_set_current_user( $user->ID );
+		wp_set_current_user( self::$author_id );
 
 		$this->assertFalse( current_user_can( 'unfiltered_html' ) );
 
-		$post    = self::factory()->post->create_and_get();
 		$data    = array(
-			'comment_post_ID' => $post->ID,
+			'comment_post_ID' => self::$post->ID,
 			'comment'         => 'Comment <script>alert(document.cookie);</script>',
 		);
 		$comment = wp_handle_comment_submission( $data );
@@ -464,23 +464,17 @@ class Tests_Comment_Submission extends WP_UnitTestCase {
 
 	public function test_unprivileged_user_cannot_comment_unfiltered_html_even_with_valid_nonce() {
 
-		$user = self::factory()->user->create_and_get(
-			array(
-				'role' => 'author',
-			)
-		);
-		wp_set_current_user( $user->ID );
+		wp_set_current_user( self::$author_id );
 
 		$this->assertFalse( current_user_can( 'unfiltered_html' ) );
 
-		$post   = self::factory()->post->create_and_get();
-		$action = 'unfiltered-html-comment_' . $post->ID;
+		$action = 'unfiltered-html-comment_' . self::$post->ID;
 		$nonce  = wp_create_nonce( $action );
 
 		$this->assertNotEmpty( wp_verify_nonce( $nonce, $action ) );
 
 		$data    = array(
-			'comment_post_ID'             => $post->ID,
+			'comment_post_ID'             => self::$post->ID,
 			'comment'                     => 'Comment <script>alert(document.cookie);</script>',
 			'_wp_unfiltered_html_comment' => $nonce,
 		);
@@ -496,30 +490,23 @@ class Tests_Comment_Submission extends WP_UnitTestCase {
 
 		$this->assertFalse( defined( 'DISALLOW_UNFILTERED_HTML' ) );
 
-		$user = self::factory()->user->create_and_get(
-			array(
-				'role' => 'editor',
-			)
-		);
-
 		if ( is_multisite() ) {
-			// In multisite, only Super Admins can post unfiltered HTML
-			$this->assertFalse( user_can( $user->ID, 'unfiltered_html' ) );
-			grant_super_admin( $user->ID );
+			// In multisite, only Super Admins can post unfiltered HTML.
+			$this->assertFalse( user_can( self::$editor_id, 'unfiltered_html' ) );
+			grant_super_admin( self::$editor_id );
 		}
 
-		wp_set_current_user( $user->ID );
+		wp_set_current_user( self::$editor_id );
 
 		$this->assertTrue( current_user_can( 'unfiltered_html' ) );
 
-		$post   = self::factory()->post->create_and_get();
-		$action = 'unfiltered-html-comment_' . $post->ID;
+		$action = 'unfiltered-html-comment_' . self::$post->ID;
 		$nonce  = wp_create_nonce( $action );
 
 		$this->assertNotEmpty( wp_verify_nonce( $nonce, $action ) );
 
 		$data    = array(
-			'comment_post_ID'             => $post->ID,
+			'comment_post_ID'             => self::$post->ID,
 			'comment'                     => 'Comment <script>alert(document.cookie);</script>',
 			'_wp_unfiltered_html_comment' => $nonce,
 		);
@@ -533,25 +520,18 @@ class Tests_Comment_Submission extends WP_UnitTestCase {
 
 	public function test_privileged_user_cannot_comment_unfiltered_html_without_valid_nonce() {
 
-		$user = self::factory()->user->create_and_get(
-			array(
-				'role' => 'editor',
-			)
-		);
-
 		if ( is_multisite() ) {
-			// In multisite, only Super Admins can post unfiltered HTML
-			$this->assertFalse( user_can( $user->ID, 'unfiltered_html' ) );
-			grant_super_admin( $user->ID );
+			// In multisite, only Super Admins can post unfiltered HTML.
+			$this->assertFalse( user_can( self::$editor_id, 'unfiltered_html' ) );
+			grant_super_admin( self::$editor_id );
 		}
 
-		wp_set_current_user( $user->ID );
+		wp_set_current_user( self::$editor_id );
 
 		$this->assertTrue( current_user_can( 'unfiltered_html' ) );
 
-		$post    = self::factory()->post->create_and_get();
 		$data    = array(
-			'comment_post_ID' => $post->ID,
+			'comment_post_ID' => self::$post->ID,
 			'comment'         => 'Comment <script>alert(document.cookie);</script>',
 		);
 		$comment = wp_handle_comment_submission( $data );
@@ -569,9 +549,8 @@ class Tests_Comment_Submission extends WP_UnitTestCase {
 		$_comment_registration = get_option( 'comment_registration' );
 		update_option( 'comment_registration', '1' );
 
-		$post    = self::factory()->post->create_and_get();
 		$data    = array(
-			'comment_post_ID' => $post->ID,
+			'comment_post_ID' => self::$post->ID,
 		);
 		$comment = wp_handle_comment_submission( $data );
 
@@ -589,9 +568,8 @@ class Tests_Comment_Submission extends WP_UnitTestCase {
 		$_require_name_email = get_option( 'require_name_email' );
 		update_option( 'require_name_email', '1' );
 
-		$post    = self::factory()->post->create_and_get();
 		$data    = array(
-			'comment_post_ID' => $post->ID,
+			'comment_post_ID' => self::$post->ID,
 			'comment'         => 'Comment',
 			'email'           => 'comment@example.org',
 		);
@@ -611,9 +589,8 @@ class Tests_Comment_Submission extends WP_UnitTestCase {
 		$_require_name_email = get_option( 'require_name_email' );
 		update_option( 'require_name_email', '1' );
 
-		$post    = self::factory()->post->create_and_get();
 		$data    = array(
-			'comment_post_ID' => $post->ID,
+			'comment_post_ID' => self::$post->ID,
 			'comment'         => 'Comment',
 			'author'          => 'Comment Author',
 		);
@@ -633,9 +610,8 @@ class Tests_Comment_Submission extends WP_UnitTestCase {
 		$_require_name_email = get_option( 'require_name_email' );
 		update_option( 'require_name_email', '1' );
 
-		$post    = self::factory()->post->create_and_get();
 		$data    = array(
-			'comment_post_ID' => $post->ID,
+			'comment_post_ID' => self::$post->ID,
 			'comment'         => 'Comment',
 			'author'          => 'Comment Author',
 			'email'           => 'not_an_email',
@@ -653,9 +629,8 @@ class Tests_Comment_Submission extends WP_UnitTestCase {
 
 		$error = 'require_valid_comment';
 
-		$post    = self::factory()->post->create_and_get();
 		$data    = array(
-			'comment_post_ID' => $post->ID,
+			'comment_post_ID' => self::$post->ID,
 			'comment'         => '',
 			'author'          => 'Comment Author',
 			'email'           => 'comment@example.org',
@@ -673,10 +648,8 @@ class Tests_Comment_Submission extends WP_UnitTestCase {
 	public function test_submitting_comment_with_content_too_long_returns_error() {
 		$error = 'comment_content_column_length';
 
-		$post = self::factory()->post->create_and_get();
-
 		$data    = array(
-			'comment_post_ID' => $post->ID,
+			'comment_post_ID' => self::$post->ID,
 			'comment'         => rand_long_str( 65536 ),
 			'author'          => 'Comment Author',
 			'email'           => 'comment@example.org',
@@ -693,10 +666,8 @@ class Tests_Comment_Submission extends WP_UnitTestCase {
 	public function test_submitting_comment_with_author_too_long_returns_error() {
 		$error = 'comment_author_column_length';
 
-		$post = self::factory()->post->create_and_get();
-
 		$data    = array(
-			'comment_post_ID' => $post->ID,
+			'comment_post_ID' => self::$post->ID,
 			'comment'         => 'Comment',
 			'author'          => rand_long_str( 255 ),
 			'email'           => 'comment@example.org',
@@ -713,10 +684,8 @@ class Tests_Comment_Submission extends WP_UnitTestCase {
 	public function test_submitting_comment_with_email_too_long_returns_error() {
 		$error = 'comment_author_email_column_length';
 
-		$post = self::factory()->post->create_and_get();
-
 		$data    = array(
-			'comment_post_ID' => $post->ID,
+			'comment_post_ID' => self::$post->ID,
 			'comment'         => 'Comment',
 			'author'          => 'Comment Author',
 			'email'           => rand_long_str( 90 ) . '@example.com',
@@ -733,9 +702,8 @@ class Tests_Comment_Submission extends WP_UnitTestCase {
 	public function test_submitting_comment_with_url_too_long_returns_error() {
 		$error = 'comment_author_url_column_length';
 
-		$post    = self::factory()->post->create_and_get();
 		$data    = array(
-			'comment_post_ID' => $post->ID,
+			'comment_post_ID' => self::$post->ID,
 			'comment'         => 'Comment',
 			'author'          => 'Comment Author',
 			'email'           => 'comment@example.org',
@@ -747,21 +715,55 @@ class Tests_Comment_Submission extends WP_UnitTestCase {
 		$this->assertSame( $error, $comment->get_error_code() );
 	}
 
+	/**
+	 * @ticket 49236
+	 */
+	public function test_submitting_comment_with_empty_type_results_in_correct_type() {
+		$data    = array(
+			'comment_post_ID' => self::$post->ID,
+			'comment'         => 'Comment',
+			'author'          => 'Comment Author',
+			'email'           => 'comment@example.org',
+			'comment_type'    => '',
+		);
+		$comment = wp_handle_comment_submission( $data );
+
+		$this->assertNotWPError( $comment );
+		$this->assertInstanceOf( 'WP_Comment', $comment );
+
+		$this->assertSame( 'comment', $comment->comment_type );
+	}
+
+	/**
+	 * @ticket 49236
+	 */
+	public function test_inserting_comment_with_empty_type_results_in_correct_type() {
+		$data       = array(
+			'comment_post_ID' => self::$post->ID,
+			'comment'         => 'Comment',
+			'author'          => 'Comment Author',
+			'email'           => 'comment@example.org',
+			'comment_type'    => '',
+		);
+		$comment_id = wp_insert_comment( $data );
+		$comment    = get_comment( $comment_id );
+
+		$this->assertNotWPError( $comment );
+		$this->assertInstanceOf( 'WP_Comment', $comment );
+
+		$this->assertSame( 'comment', $comment->comment_type );
+	}
+
 	/**
 	 * @ticket 34997
 	 */
 	public function test_comment_submission_sends_all_expected_parameters_to_preprocess_comment_filter() {
 
-		$user = self::factory()->user->create_and_get(
-			array(
-				'role' => 'author',
-			)
-		);
+		$user = get_userdata( self::$author_id );
 		wp_set_current_user( $user->ID );
 
-		$post = self::factory()->post->create_and_get();
 		$data = array(
-			'comment_post_ID' => $post->ID,
+			'comment_post_ID' => self::$post->ID,
 			'comment'         => 'Comment',
 		);
 
@@ -772,17 +774,19 @@ class Tests_Comment_Submission extends WP_UnitTestCase {
 		remove_filter( 'preprocess_comment', array( $this, 'filter_preprocess_comment' ) );
 
 		$this->assertNotWPError( $comment );
-		$this->assertEquals(
+		$this->assertSame(
 			array(
-				'comment_post_ID'      => $post->ID,
+				'comment_post_ID'      => self::$post->ID,
 				'comment_author'       => $user->display_name,
 				'comment_author_email' => $user->user_email,
 				'comment_author_url'   => $user->user_url,
 				'comment_content'      => $data['comment'],
-				'comment_type'         => '',
-				'comment_parent'       => '0',
+				'comment_type'         => 'comment',
+				'comment_parent'       => 0,
 				'user_ID'              => $user->ID,
 				'user_id'              => $user->ID,
+				'comment_author_IP'    => '127.0.0.1',
+				'comment_agent'        => '',
 			),
 			$this->preprocess_comment_data
 		);
@@ -798,13 +802,8 @@ class Tests_Comment_Submission extends WP_UnitTestCase {
 	 * @ticket 36901
 	 */
 	public function test_submitting_duplicate_comments() {
-		$post           = self::factory()->post->create_and_get(
-			array(
-				'post_status' => 'publish',
-			)
-		);
 		$data           = array(
-			'comment_post_ID' => $post->ID,
+			'comment_post_ID' => self::$post->ID,
 			'comment'         => 'Did I say that?',
 			'author'          => 'Repeat myself',
 			'email'           => 'mail@example.com',
@@ -819,13 +818,8 @@ class Tests_Comment_Submission extends WP_UnitTestCase {
 	 * @ticket 36901
 	 */
 	public function test_comments_flood() {
-		$post          = self::factory()->post->create_and_get(
-			array(
-				'post_status' => 'publish',
-			)
-		);
 		$data          = array(
-			'comment_post_ID' => $post->ID,
+			'comment_post_ID' => self::$post->ID,
 			'comment'         => 'Did I say that?',
 			'author'          => 'Repeat myself',
 			'email'           => 'mail@example.com',
@@ -850,13 +844,8 @@ class Tests_Comment_Submission extends WP_UnitTestCase {
 		);
 		wp_set_current_user( $user->ID );
 
-		$post          = self::factory()->post->create_and_get(
-			array(
-				'post_status' => 'publish',
-			)
-		);
 		$data          = array(
-			'comment_post_ID' => $post->ID,
+			'comment_post_ID' => self::$post->ID,
 			'comment'         => 'Did I say that?',
 			'author'          => 'Repeat myself',
 			'email'           => 'mail@example.com',
@@ -867,6 +856,6 @@ class Tests_Comment_Submission extends WP_UnitTestCase {
 		$second_comment  = wp_handle_comment_submission( $data );
 
 		$this->assertNotWPError( $second_comment );
-		$this->assertEquals( $post->ID, $second_comment->comment_post_ID );
+		$this->assertEquals( self::$post->ID, $second_comment->comment_post_ID );
 	}
 }
diff --git a/tests/comment.php b/tests/comment.php
index 720a805062..267aa29fec 100644
--- a/tests/comment.php
+++ b/tests/comment.php
@@ -6,6 +6,7 @@
 class Tests_Comment extends WP_UnitTestCase {
 	protected static $user_id;
 	protected static $post_id;
+	protected static $notify_message = '';
 
 	public function setUp() {
 		parent::setUp();
@@ -29,42 +30,48 @@ class Tests_Comment extends WP_UnitTestCase {
 		);
 	}
 
-	function test_wp_update_comment() {
-		$post     = self::factory()->post->create_and_get(
+	public function test_wp_update_comment() {
+		$post  = self::factory()->post->create_and_get(
 			array(
 				'post_title' => 'some-post',
 				'post_type'  => 'post',
 			)
 		);
-		$post2    = self::factory()->post->create_and_get(
+		$post2 = self::factory()->post->create_and_get(
 			array(
 				'post_title' => 'some-post-2',
 				'post_type'  => 'post',
 			)
 		);
+
 		$comments = self::factory()->comment->create_post_comments( $post->ID, 5 );
-		$result   = wp_update_comment(
+
+		$result = wp_update_comment(
 			array(
 				'comment_ID'     => $comments[0],
 				'comment_parent' => $comments[1],
 			)
 		);
-		$this->assertEquals( 1, $result );
+		$this->assertSame( 1, $result );
+
 		$comment = get_comment( $comments[0] );
 		$this->assertEquals( $comments[1], $comment->comment_parent );
+
 		$result = wp_update_comment(
 			array(
 				'comment_ID'     => $comments[0],
 				'comment_parent' => $comments[1],
 			)
 		);
-		$this->assertEquals( 0, $result );
-		$result  = wp_update_comment(
+		$this->assertSame( 0, $result );
+
+		$result = wp_update_comment(
 			array(
 				'comment_ID'      => $comments[0],
 				'comment_post_ID' => $post2->ID,
 			)
 		);
+
 		$comment = get_comment( $comments[0] );
 		$this->assertEquals( $post2->ID, $comment->comment_post_ID );
 	}
@@ -72,7 +79,7 @@ class Tests_Comment extends WP_UnitTestCase {
 	/**
 	 * @ticket 30627
 	 */
-	function test_wp_update_comment_updates_comment_type() {
+	public function test_wp_update_comment_updates_comment_type() {
 		$comment_id = self::factory()->comment->create( array( 'comment_post_ID' => self::$post_id ) );
 
 		wp_update_comment(
@@ -83,14 +90,15 @@ class Tests_Comment extends WP_UnitTestCase {
 		);
 
 		$comment = get_comment( $comment_id );
-		$this->assertEquals( 'pingback', $comment->comment_type );
+		$this->assertSame( 'pingback', $comment->comment_type );
 	}
 
 	/**
 	 * @ticket 36784
 	 */
-	function test_wp_update_comment_updates_comment_meta() {
+	public function test_wp_update_comment_updates_comment_meta() {
 		$comment_id = self::factory()->comment->create( array( 'comment_post_ID' => self::$post_id ) );
+
 		wp_update_comment(
 			array(
 				'comment_ID'   => $comment_id,
@@ -100,13 +108,14 @@ class Tests_Comment extends WP_UnitTestCase {
 				),
 			)
 		);
-		$this->assertEquals( 'fire', get_comment_meta( $comment_id, 'sauce', true ) );
+
+		$this->assertSame( 'fire', get_comment_meta( $comment_id, 'sauce', true ) );
 	}
 
 	/**
 	 * @ticket 30307
 	 */
-	function test_wp_update_comment_updates_user_id() {
+	public function test_wp_update_comment_updates_user_id() {
 		$comment_id = self::factory()->comment->create( array( 'comment_post_ID' => self::$post_id ) );
 
 		wp_update_comment(
@@ -123,7 +132,7 @@ class Tests_Comment extends WP_UnitTestCase {
 	/**
 	 * @ticket 34954
 	 */
-	function test_wp_update_comment_with_no_post_id() {
+	public function test_wp_update_comment_with_no_post_id() {
 		$comment_id = self::factory()->comment->create( array( 'comment_post_ID' => 0 ) );
 
 		$updated_comment_text = 'I should be able to update a comment with a Post ID of zero';
@@ -138,7 +147,58 @@ class Tests_Comment extends WP_UnitTestCase {
 		$this->assertSame( 1, $update );
 
 		$comment = get_comment( $comment_id );
-		$this->assertEquals( $updated_comment_text, $comment->comment_content );
+		$this->assertSame( $updated_comment_text, $comment->comment_content );
+	}
+
+	/**
+	 * @ticket 39732
+	 */
+	public function test_wp_update_comment_returns_false_for_invalid_comment_or_post_id() {
+		$comment_id = self::factory()->comment->create( array( 'comment_post_ID' => self::$post_id ) );
+
+		$update = wp_update_comment(
+			array(
+				'comment_ID'      => -1,
+				'comment_post_ID' => self::$post_id,
+			)
+		);
+		$this->assertFalse( $update );
+
+		$update = wp_update_comment(
+			array(
+				'comment_ID'      => $comment_id,
+				'comment_post_ID' => -1,
+			)
+		);
+		$this->assertFalse( $update );
+	}
+
+	/**
+	 * @ticket 39732
+	 */
+	public function test_wp_update_comment_is_wp_error() {
+		$comment_id = self::factory()->comment->create( array( 'comment_post_ID' => self::$post_id ) );
+
+		add_filter( 'wp_update_comment_data', array( $this, '_wp_update_comment_data_filter' ), 10, 3 );
+
+		$result = wp_update_comment(
+			array(
+				'comment_ID'   => $comment_id,
+				'comment_type' => 'pingback',
+			),
+			true
+		);
+
+		remove_filter( 'wp_update_comment_data', array( $this, '_wp_update_comment_data_filter' ), 10, 3 );
+
+		$this->assertWPError( $result );
+	}
+
+	/**
+	 * Blocks comments from being updated by returning WP_Error.
+	 */
+	public function _wp_update_comment_data_filter( $data, $comment, $commentarr ) {
+		return new WP_Error( 'comment_wrong', 'wp_update_comment_data filter fails for this comment.', 500 );
 	}
 
 	public function test_get_approved_comments() {
@@ -191,7 +251,7 @@ class Tests_Comment extends WP_UnitTestCase {
 
 		$found = get_approved_comments( self::$post_id );
 
-		// all comments types will be returned
+		// All comment types will be returned.
 		$this->assertEquals( array( $ca1, $ca2, $c2, $c3, $c4, $c5 ), wp_list_pluck( $found, 'comment_ID' ) );
 	}
 
@@ -230,8 +290,8 @@ class Tests_Comment extends WP_UnitTestCase {
 
 		$comment = get_comment( $id );
 
-		$this->assertEquals( $data['comment_date'], $comment->comment_date );
-		$this->assertEquals( $data['comment_date_gmt'], $comment->comment_date_gmt );
+		$this->assertSame( $data['comment_date'], $comment->comment_date );
+		$this->assertSame( $data['comment_date_gmt'], $comment->comment_date_gmt );
 	}
 
 	/**
@@ -252,7 +312,7 @@ class Tests_Comment extends WP_UnitTestCase {
 
 		$comment = get_comment( $id );
 
-		$this->assertEquals( $data['comment_author_IP'], $comment->comment_author_IP );
+		$this->assertSame( $data['comment_author_IP'], $comment->comment_author_IP );
 	}
 
 	/**
@@ -273,7 +333,7 @@ class Tests_Comment extends WP_UnitTestCase {
 
 		$comment = get_comment( $id );
 
-		$this->assertEquals( $data['comment_author_IP'], $comment->comment_author_IP );
+		$this->assertSame( $data['comment_author_IP'], $comment->comment_author_IP );
 	}
 
 	/**
@@ -295,7 +355,7 @@ class Tests_Comment extends WP_UnitTestCase {
 
 		$comment = get_comment( $id );
 
-		$this->assertEquals( $data['comment_agent'], $comment->comment_agent );
+		$this->assertSame( $data['comment_agent'], $comment->comment_agent );
 	}
 
 	/**
@@ -317,7 +377,7 @@ class Tests_Comment extends WP_UnitTestCase {
 
 		$comment = get_comment( $id );
 
-		$this->assertEquals( 'Mozilla/5.0 (iPhone; CPU iPhone OS 7_0 like Mac OS X; en-us) AppleWebKit/537.51.1 (KHTML, like Gecko) Version/7.0 Mobile/11A465 Safari/9537.53 Opera/9.80 (X11; Linux i686; Ubuntu/14.10) Presto/2.12.388 Version/12.16 Mozilla/5.0 (Macintosh; U; PPC Mac OS ', $comment->comment_agent );
+		$this->assertSame( 'Mozilla/5.0 (iPhone; CPU iPhone OS 7_0 like Mac OS X; en-us) AppleWebKit/537.51.1 (KHTML, like Gecko) Version/7.0 Mobile/11A465 Safari/9537.53 Opera/9.80 (X11; Linux i686; Ubuntu/14.10) Presto/2.12.388 Version/12.16 Mozilla/5.0 (Macintosh; U; PPC Mac OS ', $comment->comment_agent );
 	}
 
 	/**
@@ -339,7 +399,7 @@ class Tests_Comment extends WP_UnitTestCase {
 
 		$comment = get_comment( $id );
 
-		$this->assertEquals( $data['comment_agent'], $comment->comment_agent );
+		$this->assertSame( $data['comment_agent'], $comment->comment_agent );
 	}
 
 
@@ -359,7 +419,7 @@ class Tests_Comment extends WP_UnitTestCase {
 
 		$comment = get_comment( $id );
 
-		$this->assertEquals( strlen( $comment->comment_content ), 65535 );
+		$this->assertSame( strlen( $comment->comment_content ), 65535 );
 	}
 
 	/**
@@ -434,6 +494,66 @@ class Tests_Comment extends WP_UnitTestCase {
 		$this->assertFalse( $sent );
 	}
 
+	/**
+	 * @ticket 43805
+	 */
+	public function test_wp_new_comment_notify_postauthor_content_should_include_link_to_parent() {
+		$c1 = self::factory()->comment->create(
+			array(
+				'comment_post_ID' => self::$post_id,
+			)
+		);
+
+		$c2 = self::factory()->comment->create(
+			array(
+				'comment_post_ID' => self::$post_id,
+				'comment_parent'  => $c1,
+			)
+		);
+
+		add_filter( 'comment_notification_text', array( $this, 'save_comment_notification_text' ) );
+		wp_new_comment_notify_postauthor( $c2 );
+		remove_filter( 'comment_notification_text', array( $this, 'save_comment_notification_text' ) );
+
+		$this->assertContains( admin_url( "comment.php?action=editcomment&c={$c1}" ), self::$notify_message );
+	}
+
+	/**
+	 * @ticket 43805
+	 */
+	public function test_wp_new_comment_notify_moderator_content_should_include_link_to_parent() {
+		$c1 = self::factory()->comment->create(
+			array(
+				'comment_post_ID' => self::$post_id,
+			)
+		);
+
+		$c2 = self::factory()->comment->create(
+			array(
+				'comment_post_ID'  => self::$post_id,
+				'comment_parent'   => $c1,
+				'comment_approved' => '0',
+			)
+		);
+
+		add_filter( 'comment_moderation_text', array( $this, 'save_comment_notification_text' ) );
+		wp_new_comment_notify_moderator( $c2 );
+		remove_filter( 'comment_moderation_text', array( $this, 'save_comment_notification_text' ) );
+
+		$this->assertContains( admin_url( "comment.php?action=editcomment&c={$c1}" ), self::$notify_message );
+	}
+
+	/**
+	 * Callback for the `comment_notification_text` & `comment_moderation_text` filters.
+	 *
+	 * @param string $notify_message The comment notification or moderation email text.
+	 * @return string
+	 */
+	public function save_comment_notification_text( $notify_message = '' ) {
+		self::$notify_message = $notify_message;
+		return $notify_message;
+	}
+
 	/**
 	 * @ticket 12431
 	 */
@@ -448,7 +568,7 @@ class Tests_Comment extends WP_UnitTestCase {
 			)
 		);
 
-		$this->assertEquals( 'fire', get_comment_meta( $c, 'sauce', true ) );
+		$this->assertSame( 'fire', get_comment_meta( $c, 'sauce', true ) );
 	}
 
 	/**
diff --git a/tests/comment/checkComment.php b/tests/comment/checkComment.php
index 44d3e524b9..fc4cfa9e83 100644
--- a/tests/comment/checkComment.php
+++ b/tests/comment/checkComment.php
@@ -4,7 +4,7 @@
  * @group comment
  */
 class Tests_Comment_CheckComment extends WP_UnitTestCase {
-	public function test_should_return_true_when_comment_whitelist_is_disabled() {
+	public function test_should_return_true_when_comment_previously_approved_is_disabled() {
 		$author       = 'BobtheBuilder';
 		$author_email = 'bob@example.com';
 		$author_url   = 'http://example.com';
@@ -13,12 +13,12 @@ class Tests_Comment_CheckComment extends WP_UnitTestCase {
 		$user_agent   = '';
 		$comment_type = '';
 
-		update_option( 'comment_whitelist', 0 );
+		update_option( 'comment_previously_approved', 0 );
 		$results = check_comment( $author, $author_email, $author_url, $comment, $author_ip, $user_agent, $comment_type );
 		$this->assertTrue( $results );
 	}
 
-	public function test_should_return_false_when_comment_whitelist_is_enabled_and_author_does_not_have_approved_comment() {
+	public function test_should_return_false_when_comment_previously_approved_is_enabled_and_author_does_not_have_approved_comment() {
 		$author       = 'BobtheBuilder';
 		$author_email = 'bob@example.com';
 		$author_url   = 'http://example.com';
@@ -27,13 +27,13 @@ class Tests_Comment_CheckComment extends WP_UnitTestCase {
 		$user_agent   = '';
 		$comment_type = '';
 
-		update_option( 'comment_whitelist', 1 );
+		update_option( 'comment_previously_approved', 1 );
 		$results = check_comment( $author, $author_email, $author_url, $comment, $author_ip, $user_agent, $comment_type );
 		$this->assertFalse( $results );
 
 	}
 
-	public function test_should_return_true_when_comment_whitelist_is_enabled_and_author_has_approved_comment() {
+	public function test_should_return_true_when_comment_previously_approved_is_enabled_and_author_has_approved_comment() {
 		$post_id         = self::factory()->post->create();
 		$prev_args       = array(
 			'comment_post_ID'      => $post_id,
@@ -44,7 +44,7 @@ class Tests_Comment_CheckComment extends WP_UnitTestCase {
 		);
 		$prev_comment_id = self::factory()->comment->create( $prev_args );
 
-		update_option( 'comment_whitelist', 1 );
+		update_option( 'comment_previously_approved', 1 );
 
 		$author       = 'BobtheBuilder';
 		$author_email = 'bob@example.com';
@@ -69,7 +69,7 @@ class Tests_Comment_CheckComment extends WP_UnitTestCase {
 	}
 
 	public function test_should_return_false_when_content_matches_moderation_key() {
-		update_option( 'comment_whitelist', 0 );
+		update_option( 'comment_previously_approved', 0 );
 
 		$author       = 'WendytheBuilder';
 		$author_email = 'wendy@example.com';
@@ -85,7 +85,7 @@ class Tests_Comment_CheckComment extends WP_UnitTestCase {
 	}
 
 	public function test_should_return_true_when_content_does_not_match_moderation_keys() {
-		update_option( 'comment_whitelist', 0 );
+		update_option( 'comment_previously_approved', 0 );
 
 		$author       = 'WendytheBuilder';
 		$author_email = 'wendy@example.com';
@@ -101,7 +101,7 @@ class Tests_Comment_CheckComment extends WP_UnitTestCase {
 	}
 
 	public function test_should_return_false_when_link_count_exceeds_comment_max_length_setting() {
-		update_option( 'comment_whitelist', 0 );
+		update_option( 'comment_previously_approved', 0 );
 
 		$author       = 'BobtheBuilder';
 		$author_email = 'bob@example.com';
@@ -117,7 +117,7 @@ class Tests_Comment_CheckComment extends WP_UnitTestCase {
 	}
 
 	public function test_should_return_true_when_link_count_does_not_exceed_comment_max_length_setting() {
-		update_option( 'comment_whitelist', 0 );
+		update_option( 'comment_previously_approved', 0 );
 
 		$author       = 'BobtheBuilder';
 		$author_email = 'bob@example.com';
@@ -135,7 +135,7 @@ class Tests_Comment_CheckComment extends WP_UnitTestCase {
 	/**
 	 * @ticket 28603
 	 */
-	public function test_should_return_true_when_comment_whitelist_is_enabled_and_user_has_previously_approved_comments_with_different_email() {
+	public function test_should_return_true_when_comment_previously_approved_is_enabled_and_user_has_previously_approved_comments_with_different_email() {
 		$subscriber_id = $this->factory()->user->create(
 			array(
 				'role'  => 'subscriber',
@@ -158,7 +158,7 @@ class Tests_Comment_CheckComment extends WP_UnitTestCase {
 
 		wp_update_user( $subscriber_user );
 
-		update_option( 'comment_whitelist', 1 );
+		update_option( 'comment_previously_approved', 1 );
 
 		$results = check_comment( 'foo', 'newsub@example.com', 'http://example.com', 'This is a comment.', '66.155.40.249', 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10.10; rv:35.0) Gecko/20100101 Firefox/35.0', 'comment', 4 );
 		$this->assertTrue( $results );
@@ -167,7 +167,7 @@ class Tests_Comment_CheckComment extends WP_UnitTestCase {
 	/**
 	 * @ticket 28603
 	 */
-	public function test_should_return_false_when_comment_whitelist_is_enabled_and_user_does_not_have_a_previously_approved_comment_with_any_email() {
+	public function test_should_return_false_when_comment_previously_approved_is_enabled_and_user_does_not_have_a_previously_approved_comment_with_any_email() {
 		$subscriber_id = $this->factory()->user->create(
 			array(
 				'role'  => 'subscriber',
@@ -180,7 +180,7 @@ class Tests_Comment_CheckComment extends WP_UnitTestCase {
 
 		wp_update_user( $subscriber_user );
 
-		update_option( 'comment_whitelist', 1 );
+		update_option( 'comment_previously_approved', 1 );
 
 		$results = check_comment( 'bar', 'zag@example.com', 'http://example.com', 'This is my first comment.', '66.155.40.249', 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10.10; rv:35.0) Gecko/20100101 Firefox/35.0', 'comment', 4 );
 		$this->assertFalse( $results );
diff --git a/tests/comment/dateQuery.php b/tests/comment/dateQuery.php
index 517842a5f4..ce295daeff 100644
--- a/tests/comment/dateQuery.php
+++ b/tests/comment/dateQuery.php
@@ -20,19 +20,19 @@ class Tests_Comment_DateQuery extends WP_UnitTestCase {
 	public function setUp() {
 		parent::setUp();
 
-		// Just some dummy posts to use as parents for comments
+		// Just some dummy posts to use as parents for comments.
 		for ( $i = 1; $i <= 2; $i++ ) {
 			$this->posts[ $i ] = self::factory()->post->create();
 		}
 
 		// Be careful modifying this. Tests are coded to expect this exact sample data.
-		// Format is 'datetime' => 'post number (not ID)'
+		// Format is 'datetime' => 'post number (not ID)'.
 		$comment_dates = array(
 			'2007-01-22 03:49:21' => 1,
 			'2007-05-16 17:32:22' => 1,
 			'2007-09-24 07:17:23' => 1,
 			'2008-03-29 09:04:25' => 1,
-			'2008-07-15 11:32:26' => 2, // This one should never be in the results
+			'2008-07-15 11:32:26' => 2, // This one should never be in the results.
 			'2008-12-10 13:06:27' => 1,
 			'2009-06-11 21:30:28' => 1,
 			'2009-12-18 10:42:29' => 1,
@@ -53,7 +53,7 @@ class Tests_Comment_DateQuery extends WP_UnitTestCase {
 			$args,
 			array(
 				'post_id' => $this->posts[1],
-				'orderby' => 'comment_ID',  // Same order they were created
+				'orderby' => 'comment_ID',  // Same order they were created.
 				'order'   => 'ASC',
 			)
 		);
@@ -77,6 +77,6 @@ class Tests_Comment_DateQuery extends WP_UnitTestCase {
 			'2008-12-10 13:06:27',
 		);
 
-		$this->assertEquals( $expected_dates, wp_list_pluck( $comments, 'comment_date' ) );
+		$this->assertSame( $expected_dates, wp_list_pluck( $comments, 'comment_date' ) );
 	}
 }
diff --git a/tests/comment/getCommentAuthorEmailLink.php b/tests/comment/getCommentAuthorEmailLink.php
index cf00539bb4..07d01f00e2 100644
--- a/tests/comment/getCommentAuthorEmailLink.php
+++ b/tests/comment/getCommentAuthorEmailLink.php
@@ -33,7 +33,7 @@ class Tests_Comment_GetCommentAuthorEmailLink extends WP_UnitTestCase {
 	public function test_global_comment_with_default_parameters() {
 		$expected = '<a href="mailto:foo@example.org">foo@example.org</a>';
 
-		$this->assertEquals( $expected, get_comment_author_email_link() );
+		$this->assertSame( $expected, get_comment_author_email_link() );
 	}
 
 	/**
@@ -53,7 +53,7 @@ class Tests_Comment_GetCommentAuthorEmailLink extends WP_UnitTestCase {
 
 		$expected = sprintf( '%1$s<a href="mailto:%2$s">%3$s</a>%4$s', $before, $email, $linktext, $after );
 
-		$this->assertEquals( $expected, get_comment_author_email_link( $linktext, $before, $after, $comment ) );
+		$this->assertSame( $expected, get_comment_author_email_link( $linktext, $before, $after, $comment ) );
 	}
 
 	public function test_all_parameters_with_global_comment() {
@@ -63,25 +63,25 @@ class Tests_Comment_GetCommentAuthorEmailLink extends WP_UnitTestCase {
 
 		$expected = sprintf( '%1$s<a href="mailto:foo@example.org">%2$s</a>%3$s', $before, $linktext, $after );
 
-		$this->assertEquals( $expected, get_comment_author_email_link( $linktext, $before, $after ) );
+		$this->assertSame( $expected, get_comment_author_email_link( $linktext, $before, $after ) );
 	}
 
 	public function test_linktext() {
 		$expected = sprintf( '<a href="mailto:foo@example.org">%1$s</a>', $linktext = 'linktext' );
 
-		$this->assertEquals( $expected, get_comment_author_email_link( $linktext ) );
+		$this->assertSame( $expected, get_comment_author_email_link( $linktext ) );
 	}
 
 	public function test_before() {
 		$expected = sprintf( '%1$s<a href="mailto:foo@example.org">foo@example.org</a>', $before = 'before' );
 
-		$this->assertEquals( $expected, get_comment_author_email_link( '', $before ) );
+		$this->assertSame( $expected, get_comment_author_email_link( '', $before ) );
 	}
 
 	public function test_after() {
 		$expected = sprintf( '<a href="mailto:foo@example.org">foo@example.org</a>%1$s', $after = 'after' );
 
-		$this->assertEquals( $expected, get_comment_author_email_link( '', '', $after ) );
+		$this->assertSame( $expected, get_comment_author_email_link( '', '', $after ) );
 	}
 
 	/**
@@ -96,6 +96,6 @@ class Tests_Comment_GetCommentAuthorEmailLink extends WP_UnitTestCase {
 
 		$expected = sprintf( '<a href="mailto:%1$s">%2$s</a>', $email, $email );
 
-		$this->assertEquals( $expected, get_comment_author_email_link( '', '', '', $comment ) );
+		$this->assertSame( $expected, get_comment_author_email_link( '', '', '', $comment ) );
 	}
 }
diff --git a/tests/comment/getCommentAuthorUrlLink.php b/tests/comment/getCommentAuthorUrlLink.php
index c123e932c2..4a7457c2fe 100644
--- a/tests/comment/getCommentAuthorUrlLink.php
+++ b/tests/comment/getCommentAuthorUrlLink.php
@@ -27,7 +27,7 @@ class Tests_Comment_GetCommentAuthorUrlLink extends WP_UnitTestCase {
 	public function test_no_comment() {
 		$url_link = get_comment_author_url_link();
 
-		$this->assertEquals( "<a href='' rel='external'></a>", $url_link );
+		$this->assertSame( "<a href='' rel='external'></a>", $url_link );
 	}
 
 	public function test_global_comment() {
@@ -36,7 +36,7 @@ class Tests_Comment_GetCommentAuthorUrlLink extends WP_UnitTestCase {
 
 		$url_link = get_comment_author_url_link();
 		$link     = $this->parseCommentAuthorUrl( $comment );
-		$this->assertEquals( $link, $url_link );
+		$this->assertSame( $link, $url_link );
 	}
 
 	public function test_comment_arg() {
@@ -44,7 +44,7 @@ class Tests_Comment_GetCommentAuthorUrlLink extends WP_UnitTestCase {
 
 		$url_link = get_comment_author_url_link( '', '', '', $comment );
 		$link     = $this->parseCommentAuthorUrl( $comment );
-		$this->assertEquals( $link, $url_link );
+		$this->assertSame( $link, $url_link );
 	}
 
 	public function test_linktext() {
@@ -52,7 +52,7 @@ class Tests_Comment_GetCommentAuthorUrlLink extends WP_UnitTestCase {
 
 		$url_link = get_comment_author_url_link( 'Burrito', '', '', $comment );
 		$link     = $this->parseCommentAuthorUrl( $comment, 'Burrito' );
-		$this->assertEquals( $link, $url_link );
+		$this->assertSame( $link, $url_link );
 	}
 
 	public function test_before() {
@@ -60,7 +60,7 @@ class Tests_Comment_GetCommentAuthorUrlLink extends WP_UnitTestCase {
 
 		$url_link = get_comment_author_url_link( 'Burrito', 'I would love a ', '', $comment );
 		$link     = 'I would love a ' . $this->parseCommentAuthorUrl( $comment, 'Burrito' );
-		$this->assertEquals( $link, $url_link );
+		$this->assertSame( $link, $url_link );
 	}
 
 	public function test_after() {
@@ -68,7 +68,7 @@ class Tests_Comment_GetCommentAuthorUrlLink extends WP_UnitTestCase {
 
 		$url_link = get_comment_author_url_link( 'Burrito', '', ' is my favorite word.', $comment );
 		$link     = $this->parseCommentAuthorUrl( $comment, 'Burrito' ) . ' is my favorite word.';
-		$this->assertEquals( $link, $url_link );
+		$this->assertSame( $link, $url_link );
 	}
 
 	public function test_before_after() {
@@ -76,6 +76,6 @@ class Tests_Comment_GetCommentAuthorUrlLink extends WP_UnitTestCase {
 
 		$url_link = get_comment_author_url_link( 'Burrito', 'I would love a ', ' right now.', $comment );
 		$link     = 'I would love a ' . $this->parseCommentAuthorUrl( $comment, 'Burrito' ) . ' right now.';
-		$this->assertEquals( $link, $url_link );
+		$this->assertSame( $link, $url_link );
 	}
 }
diff --git a/tests/comment/getCommentCount.php b/tests/comment/getCommentCount.php
index 78b57f2761..7b3ede5f35 100644
--- a/tests/comment/getCommentCount.php
+++ b/tests/comment/getCommentCount.php
@@ -5,12 +5,12 @@ class Tests_Get_Comment_Count extends WP_UnitTestCase {
 	public function test_get_comment_count() {
 		$count = get_comment_count();
 
-		$this->assertEquals( 0, $count['approved'] );
-		$this->assertEquals( 0, $count['awaiting_moderation'] );
-		$this->assertEquals( 0, $count['spam'] );
-		$this->assertEquals( 0, $count['trash'] );
-		$this->assertEquals( 0, $count['post-trashed'] );
-		$this->assertEquals( 0, $count['total_comments'] );
+		$this->assertSame( 0, $count['approved'] );
+		$this->assertSame( 0, $count['awaiting_moderation'] );
+		$this->assertSame( 0, $count['spam'] );
+		$this->assertSame( 0, $count['trash'] );
+		$this->assertSame( 0, $count['post-trashed'] );
+		$this->assertSame( 0, $count['total_comments'] );
 	}
 
 	public function test_get_comment_count_approved() {
@@ -22,12 +22,12 @@ class Tests_Get_Comment_Count extends WP_UnitTestCase {
 
 		$count = get_comment_count();
 
-		$this->assertEquals( 1, $count['approved'] );
-		$this->assertEquals( 0, $count['awaiting_moderation'] );
-		$this->assertEquals( 0, $count['spam'] );
-		$this->assertEquals( 0, $count['trash'] );
-		$this->assertEquals( 0, $count['post-trashed'] );
-		$this->assertEquals( 1, $count['total_comments'] );
+		$this->assertSame( 1, $count['approved'] );
+		$this->assertSame( 0, $count['awaiting_moderation'] );
+		$this->assertSame( 0, $count['spam'] );
+		$this->assertSame( 0, $count['trash'] );
+		$this->assertSame( 0, $count['post-trashed'] );
+		$this->assertSame( 1, $count['total_comments'] );
 	}
 
 	public function test_get_comment_count_awaiting() {
@@ -39,12 +39,12 @@ class Tests_Get_Comment_Count extends WP_UnitTestCase {
 
 		$count = get_comment_count();
 
-		$this->assertEquals( 0, $count['approved'] );
-		$this->assertEquals( 1, $count['awaiting_moderation'] );
-		$this->assertEquals( 0, $count['spam'] );
-		$this->assertEquals( 0, $count['trash'] );
-		$this->assertEquals( 0, $count['post-trashed'] );
-		$this->assertEquals( 1, $count['total_comments'] );
+		$this->assertSame( 0, $count['approved'] );
+		$this->assertSame( 1, $count['awaiting_moderation'] );
+		$this->assertSame( 0, $count['spam'] );
+		$this->assertSame( 0, $count['trash'] );
+		$this->assertSame( 0, $count['post-trashed'] );
+		$this->assertSame( 1, $count['total_comments'] );
 	}
 
 	public function test_get_comment_count_spam() {
@@ -56,12 +56,12 @@ class Tests_Get_Comment_Count extends WP_UnitTestCase {
 
 		$count = get_comment_count();
 
-		$this->assertEquals( 0, $count['approved'] );
-		$this->assertEquals( 0, $count['awaiting_moderation'] );
-		$this->assertEquals( 1, $count['spam'] );
-		$this->assertEquals( 0, $count['trash'] );
-		$this->assertEquals( 0, $count['post-trashed'] );
-		$this->assertEquals( 1, $count['total_comments'] );
+		$this->assertSame( 0, $count['approved'] );
+		$this->assertSame( 0, $count['awaiting_moderation'] );
+		$this->assertSame( 1, $count['spam'] );
+		$this->assertSame( 0, $count['trash'] );
+		$this->assertSame( 0, $count['post-trashed'] );
+		$this->assertSame( 1, $count['total_comments'] );
 	}
 
 	public function test_get_comment_count_trash() {
@@ -73,12 +73,12 @@ class Tests_Get_Comment_Count extends WP_UnitTestCase {
 
 		$count = get_comment_count();
 
-		$this->assertEquals( 0, $count['approved'] );
-		$this->assertEquals( 0, $count['awaiting_moderation'] );
-		$this->assertEquals( 0, $count['spam'] );
-		$this->assertEquals( 1, $count['trash'] );
-		$this->assertEquals( 0, $count['post-trashed'] );
-		$this->assertEquals( 0, $count['total_comments'] );
+		$this->assertSame( 0, $count['approved'] );
+		$this->assertSame( 0, $count['awaiting_moderation'] );
+		$this->assertSame( 0, $count['spam'] );
+		$this->assertSame( 1, $count['trash'] );
+		$this->assertSame( 0, $count['post-trashed'] );
+		$this->assertSame( 0, $count['total_comments'] );
 	}
 
 	public function test_get_comment_count_post_trashed() {
@@ -90,11 +90,11 @@ class Tests_Get_Comment_Count extends WP_UnitTestCase {
 
 		$count = get_comment_count();
 
-		$this->assertEquals( 0, $count['approved'] );
-		$this->assertEquals( 0, $count['awaiting_moderation'] );
-		$this->assertEquals( 0, $count['spam'] );
-		$this->assertEquals( 0, $count['trash'] );
-		$this->assertEquals( 1, $count['post-trashed'] );
-		$this->assertEquals( 0, $count['total_comments'] );
+		$this->assertSame( 0, $count['approved'] );
+		$this->assertSame( 0, $count['awaiting_moderation'] );
+		$this->assertSame( 0, $count['spam'] );
+		$this->assertSame( 0, $count['trash'] );
+		$this->assertSame( 1, $count['post-trashed'] );
+		$this->assertSame( 0, $count['total_comments'] );
 	}
 }
diff --git a/tests/comment/getCommentExcerpt.php b/tests/comment/getCommentExcerpt.php
index d4b8a4c01c..c79109cbe4 100644
--- a/tests/comment/getCommentExcerpt.php
+++ b/tests/comment/getCommentExcerpt.php
@@ -22,7 +22,7 @@ Shankle pork chop prosciutto ribeye ham hock pastrami. T-bone shank brisket baco
 
 		$excerpt = get_comment_excerpt( $comment_id );
 
-		$this->assertEquals( 20, count( explode( ' ', $excerpt ) ) );
+		$this->assertSame( 20, count( explode( ' ', $excerpt ) ) );
 	}
 
 	public function test_get_comment_excerpt_filtered() {
@@ -36,7 +36,7 @@ Shankle pork chop prosciutto ribeye ham hock pastrami. T-bone shank brisket baco
 
 		$excerpt = get_comment_excerpt( $comment_id );
 
-		$this->assertEquals( 10, count( explode( ' ', $excerpt ) ) );
+		$this->assertSame( 10, count( explode( ' ', $excerpt ) ) );
 	}
 
 	public function _filter_comment_excerpt_length() {
diff --git a/tests/comment/getCommentsPagesCount.php b/tests/comment/getCommentsPagesCount.php
index 58a69a5202..adf755a329 100644
--- a/tests/comment/getCommentsPagesCount.php
+++ b/tests/comment/getCommentsPagesCount.php
@@ -38,7 +38,7 @@ class Tests_Comment_GetCommentsPagesCount extends WP_UnitTestCase {
 	 * Validate get_comments_pages_count for empty comments
 	 */
 	function test_empty() {
-		//setup post and comments
+		// Setup post and comments.
 		$post_id = self::factory()->post->create(
 			array(
 				'post_title' => 'comment--post',
@@ -52,20 +52,20 @@ class Tests_Comment_GetCommentsPagesCount extends WP_UnitTestCase {
 
 		$comments = get_comments( array( 'post_id' => $post_id ) );
 
-		$this->assertEquals( 0, get_comment_pages_count( $comments, 10, false ) );
-		$this->assertEquals( 0, get_comment_pages_count( $comments, 1, false ) );
-		$this->assertEquals( 0, get_comment_pages_count( $comments, 0, false ) );
-		$this->assertEquals( 0, get_comment_pages_count( $comments, 10, true ) );
-		$this->assertEquals( 0, get_comment_pages_count( $comments, 5 ) );
-		$this->assertEquals( 0, get_comment_pages_count( $comments ) );
-		$this->assertequals( 0, get_comment_pages_count( null, 1 ) );
+		$this->assertSame( 0, get_comment_pages_count( $comments, 10, false ) );
+		$this->assertSame( 0, get_comment_pages_count( $comments, 1, false ) );
+		$this->assertSame( 0, get_comment_pages_count( $comments, 0, false ) );
+		$this->assertSame( 0, get_comment_pages_count( $comments, 10, true ) );
+		$this->assertSame( 0, get_comment_pages_count( $comments, 5 ) );
+		$this->assertSame( 0, get_comment_pages_count( $comments ) );
+		$this->assertSame( 0, get_comment_pages_count( null, 1 ) );
 	}
 
 	/**
 	 * Validate get_comments_pages_count for treaded comments
 	 */
 	function test_threaded_comments() {
-		//setup post and comments
+		// Setup post and comments.
 		$post     = self::factory()->post->create_and_get(
 			array(
 				'post_title' => 'comment--post',
@@ -86,7 +86,7 @@ class Tests_Comment_GetCommentsPagesCount extends WP_UnitTestCase {
 	 */
 	function test_option_thread_comments() {
 
-		//setup post and comments
+		// Setup post and comments.
 		$post     = self::factory()->post->create_and_get(
 			array(
 				'post_title' => 'comment--post',
diff --git a/tests/comment/getPageOfComment.php b/tests/comment/getPageOfComment.php
index e6527ffb94..e446162001 100644
--- a/tests/comment/getPageOfComment.php
+++ b/tests/comment/getPageOfComment.php
@@ -9,30 +9,30 @@ class Tests_Comment_GetPageOfComment extends WP_UnitTestCase {
 	public function test_last_comment() {
 		$p = self::factory()->post->create();
 
-		// page 4
+		// Page 4.
 		$comment_last = self::factory()->comment->create_post_comments( $p, 1, array( 'comment_date' => '2013-09-24 00:00:00' ) );
 		self::factory()->comment->create_post_comments( $p, 1, array( 'comment_date' => '2013-09-23 00:00:00' ) );
 
-		// page 3
+		// Page 3.
 		self::factory()->comment->create_post_comments( $p, 1, array( 'comment_date' => '2013-09-22 00:00:00' ) );
 		self::factory()->comment->create_post_comments( $p, 1, array( 'comment_date' => '2013-09-21 00:00:00' ) );
 		self::factory()->comment->create_post_comments( $p, 1, array( 'comment_date' => '2013-09-20 00:00:00' ) );
 
-		// page 2
+		// Page 2.
 		self::factory()->comment->create_post_comments( $p, 1, array( 'comment_date' => '2013-09-19 00:00:00' ) );
 		self::factory()->comment->create_post_comments( $p, 1, array( 'comment_date' => '2013-09-18 00:00:00' ) );
 		self::factory()->comment->create_post_comments( $p, 1, array( 'comment_date' => '2013-09-17 00:00:00' ) );
 
-		// page 1
+		// Page 1.
 		self::factory()->comment->create_post_comments( $p, 1, array( 'comment_date' => '2013-09-16 00:00:00' ) );
 		self::factory()->comment->create_post_comments( $p, 1, array( 'comment_date' => '2013-09-15 00:00:00' ) );
 		$comment_first = self::factory()->comment->create_post_comments( $p, 1, array( 'comment_date' => '2013-09-14 00:00:00' ) );
 
-		$this->assertEquals( 4, get_page_of_comment( $comment_last[0], array( 'per_page' => 3 ) ) );
-		$this->assertEquals( 2, get_page_of_comment( $comment_last[0], array( 'per_page' => 10 ) ) );
+		$this->assertSame( 4, get_page_of_comment( $comment_last[0], array( 'per_page' => 3 ) ) );
+		$this->assertSame( 2, get_page_of_comment( $comment_last[0], array( 'per_page' => 10 ) ) );
 
-		$this->assertEquals( 1, get_page_of_comment( $comment_first[0], array( 'per_page' => 3 ) ) );
-		$this->assertEquals( 1, get_page_of_comment( $comment_first[0], array( 'per_page' => 10 ) ) );
+		$this->assertSame( 1, get_page_of_comment( $comment_first[0], array( 'per_page' => 3 ) ) );
+		$this->assertSame( 1, get_page_of_comment( $comment_first[0], array( 'per_page' => 10 ) ) );
 	}
 
 	public function test_type_pings() {
@@ -63,7 +63,7 @@ class Tests_Comment_GetPageOfComment extends WP_UnitTestCase {
 			$now            -= 10 * $i;
 		}
 
-		$this->assertEquals(
+		$this->assertSame(
 			2,
 			get_page_of_comment(
 				$trackbacks[0],
@@ -73,7 +73,7 @@ class Tests_Comment_GetPageOfComment extends WP_UnitTestCase {
 				)
 			)
 		);
-		$this->assertEquals(
+		$this->assertSame(
 			3,
 			get_page_of_comment(
 				$pingbacks[0],
@@ -83,7 +83,7 @@ class Tests_Comment_GetPageOfComment extends WP_UnitTestCase {
 				)
 			)
 		);
-		$this->assertEquals(
+		$this->assertSame(
 			5,
 			get_page_of_comment(
 				$trackbacks[0],
@@ -148,7 +148,7 @@ class Tests_Comment_GetPageOfComment extends WP_UnitTestCase {
 				'type'     => 'trackback',
 			)
 		);
-		$this->assertEquals( 2, $page_trackbacks );
+		$this->assertSame( 2, $page_trackbacks );
 
 		$num_queries   = $wpdb->num_queries;
 		$page_comments = get_page_of_comment(
@@ -158,7 +158,7 @@ class Tests_Comment_GetPageOfComment extends WP_UnitTestCase {
 				'type'     => 'comment',
 			)
 		);
-		$this->assertEquals( 1, $page_comments );
+		$this->assertSame( 1, $page_comments );
 
 		$this->assertNotEquals( $num_queries, $wpdb->num_queries );
 	}
@@ -243,11 +243,11 @@ class Tests_Comment_GetPageOfComment extends WP_UnitTestCase {
 			)
 		);
 
-		$this->assertEquals( 1, get_page_of_comment( $c1, array( 'per_page' => 2 ) ) );
+		$this->assertSame( 1, get_page_of_comment( $c1, array( 'per_page' => 2 ) ) );
 
 		wp_set_comment_status( $c3, '1' );
 
-		$this->assertEquals( 2, get_page_of_comment( $c1, array( 'per_page' => 2 ) ) );
+		$this->assertSame( 2, get_page_of_comment( $c1, array( 'per_page' => 2 ) ) );
 	}
 
 	/**
@@ -275,10 +275,10 @@ class Tests_Comment_GetPageOfComment extends WP_UnitTestCase {
 		}
 
 		$found_0 = get_page_of_comment( $comments_0[0], array( 'per_page' => 2 ) );
-		$this->assertEquals( 3, $found_0 );
+		$this->assertSame( 3, $found_0 );
 
 		$found_1 = get_page_of_comment( $comments_1[1], array( 'per_page' => 2 ) );
-		$this->assertEquals( 2, $found_1 );
+		$this->assertSame( 2, $found_1 );
 	}
 
 	/**
@@ -357,7 +357,7 @@ class Tests_Comment_GetPageOfComment extends WP_UnitTestCase {
 		update_option( 'page_comments', 1 );
 		update_option( 'comments_per_page', 2 );
 
-		$this->assertEquals( 2, get_page_of_comment( $c1 ) );
+		$this->assertSame( 2, get_page_of_comment( $c1 ) );
 	}
 
 	/**
@@ -397,7 +397,7 @@ class Tests_Comment_GetPageOfComment extends WP_UnitTestCase {
 		update_option( 'page_comments', 1 );
 		update_option( 'comments_per_page', 1 );
 
-		$this->assertEquals( 2, get_page_of_comment( $c3 ) );
+		$this->assertSame( 2, get_page_of_comment( $c3 ) );
 	}
 
 	/**
@@ -437,6 +437,113 @@ class Tests_Comment_GetPageOfComment extends WP_UnitTestCase {
 		update_option( 'page_comments', 1 );
 		update_option( 'comments_per_page', 1 );
 
-		$this->assertEquals( 2, get_page_of_comment( $c3 ) );
+		$this->assertSame( 2, get_page_of_comment( $c3 ) );
+	}
+
+	/**
+	 * @ticket 8973
+	 */
+	public function test_page_number_when_unapproved_comments_are_included_for_current_commenter() {
+		$post         = self::factory()->post->create();
+		$comment_args = array(
+			'comment_post_ID'      => $post,
+			'comment_approved'     => 0,
+			'comment_author_email' => 'foo@bar.test',
+			'comment_author'       => 'Foo',
+			'comment_author_url'   => 'https://bar.test',
+		);
+
+		for ( $i = 1; $i < 4; $i++ ) {
+			self::factory()->comment->create(
+				array_merge(
+					$comment_args,
+					array(
+						'comment_date_gmt' => gmdate( 'Y-m-d H:i:s', time() - ( $i * 1000 ) ),
+					)
+				)
+			);
+		}
+
+		$new_unapproved = self::factory()->comment->create(
+			$comment_args
+		);
+
+		add_filter( 'wp_get_current_commenter', array( $this, 'get_current_commenter' ) );
+
+		$page     = get_page_of_comment( $new_unapproved, array( 'per_page' => 3 ) );
+		$comments = get_comments(
+			array(
+				'number'             => 3,
+				'paged'              => $page,
+				'post_id'            => $post,
+				'status'             => 'approve',
+				'include_unapproved' => array( 'foo@bar.test' ),
+				'orderby'            => 'comment_date_gmt',
+				'order'              => 'ASC',
+			)
+		);
+
+		remove_filter( 'wp_get_current_commenter', array( $this, 'get_current_commenter' ) );
+
+		$this->assertContains( $new_unapproved, wp_list_pluck( $comments, 'comment_ID' ) );
+	}
+
+	/**
+	 * @ticket 8973
+	 */
+	public function test_page_number_when_unapproved_comments_are_included_for_current_user() {
+		$current_user = get_current_user_id();
+		$post         = self::factory()->post->create();
+		$user         = self::factory()->user->create_and_get();
+		$comment_args = array(
+			'comment_post_ID'      => $post,
+			'comment_approved'     => 0,
+			'comment_author_email' => $user->user_email,
+			'comment_author'       => $user->display_name,
+			'comment_author_url'   => $user->user_url,
+			'user_id'              => $user->ID,
+		);
+
+		for ( $i = 1; $i < 4; $i++ ) {
+			self::factory()->comment->create(
+				array_merge(
+					$comment_args,
+					array(
+						'comment_date_gmt' => gmdate( 'Y-m-d H:i:s', time() - ( $i * 1000 ) ),
+					)
+				)
+			);
+		}
+
+		$new_unapproved = self::factory()->comment->create(
+			$comment_args
+		);
+
+		wp_set_current_user( $user->ID );
+
+		$page     = get_page_of_comment( $new_unapproved, array( 'per_page' => 3 ) );
+		$comments = get_comments(
+			array(
+				'number'             => 3,
+				'paged'              => $page,
+				'post_id'            => $post,
+				'status'             => 'approve',
+				'include_unapproved' => array( $user->ID ),
+				'orderby'            => 'comment_date_gmt',
+				'order'              => 'ASC',
+			)
+		);
+
+		$this->assertContains( $new_unapproved, wp_list_pluck( $comments, 'comment_ID' ) );
+
+		wp_set_current_user( $current_user );
+	}
+
+	public function get_current_commenter() {
+		return array(
+			'comment_author_email' => 'foo@bar.test',
+			'comment_author'       => 'Foo',
+			'comment_author_url'   => 'https://bar.test',
+		);
 	}
 }
diff --git a/tests/comment/isAvatarCommentType.php b/tests/comment/isAvatarCommentType.php
index 9e0111cc04..fe7e7482d3 100644
--- a/tests/comment/isAvatarCommentType.php
+++ b/tests/comment/isAvatarCommentType.php
@@ -11,7 +11,7 @@
  * Tests_Comment_IsAvatarCommentType class.
  *
  * @group comment
- * @covers is_avatar_comment_type
+ * @covers ::is_avatar_comment_type
  *
  * @since 5.1.0
  */
@@ -71,7 +71,7 @@ class Tests_Comment_IsAvatarCommentType extends WP_UnitTestCase {
 	 * @since 5.1.0
 	 *
 	 * @param  array $types An array of content types.
-	 * @return array $types An array of content types.
+	 * @return array An array of content types.
 	 */
 	public function _filter_avatar_comment_types( $types ) {
 		$types[] = 'review';
diff --git a/tests/comment/query.php b/tests/comment/query.php
index 372fa475c4..a8b856d5d8 100644
--- a/tests/comment/query.php
+++ b/tests/comment/query.php
@@ -1,6 +1,6 @@
 <?php
 
-// Test the output of Comment Querying functions
+// Test the output of Comment Querying functions.
 
 /**
  * @group comment
@@ -60,7 +60,7 @@ class Tests_Comment_Query extends WP_UnitTestCase {
 			)
 		);
 
-		$this->assertEqualSets( array( $c1, $c2, $c3, $c4, $c5 ), $found );
+		$this->assertSameSets( array( $c1, $c2, $c3, $c4, $c5 ), $found );
 	}
 
 	public function test_query_post_id_0() {
@@ -79,7 +79,7 @@ class Tests_Comment_Query extends WP_UnitTestCase {
 			)
 		);
 
-		$this->assertEqualSets( array( $c1 ), $found );
+		$this->assertSameSets( array( $c1 ), $found );
 	}
 
 	/**
@@ -129,7 +129,7 @@ class Tests_Comment_Query extends WP_UnitTestCase {
 			)
 		);
 
-		$this->assertEqualSets( array( $c1, $c2, $c3, $c4, $c5 ), $found );
+		$this->assertSameSets( array( $c1, $c2, $c3, $c4, $c5 ), $found );
 	}
 
 	/**
@@ -179,7 +179,7 @@ class Tests_Comment_Query extends WP_UnitTestCase {
 			)
 		);
 
-		$this->assertEqualSets( array( $c1 ), $found );
+		$this->assertSameSets( array( $c1 ), $found );
 	}
 
 	public function test_query_type_pingback() {
@@ -219,7 +219,7 @@ class Tests_Comment_Query extends WP_UnitTestCase {
 			)
 		);
 
-		$this->assertEqualSets( array( $c2, $c3 ), $found );
+		$this->assertSameSets( array( $c2, $c3 ), $found );
 
 	}
 
@@ -260,7 +260,7 @@ class Tests_Comment_Query extends WP_UnitTestCase {
 			)
 		);
 
-		$this->assertEqualSets( array( $c2, $c3 ), $found );
+		$this->assertSameSets( array( $c2, $c3 ), $found );
 
 	}
 
@@ -311,7 +311,7 @@ class Tests_Comment_Query extends WP_UnitTestCase {
 			)
 		);
 
-		$this->assertEqualSets( array( $c2, $c3 ), $found );
+		$this->assertSameSets( array( $c2, $c3 ), $found );
 	}
 
 	/**
@@ -370,7 +370,7 @@ class Tests_Comment_Query extends WP_UnitTestCase {
 			)
 		);
 
-		$this->assertEqualSets( array( $c1, $c4, $c6 ), $found );
+		$this->assertSameSets( array( $c1, $c4, $c6 ), $found );
 	}
 
 	/**
@@ -427,7 +427,7 @@ class Tests_Comment_Query extends WP_UnitTestCase {
 			)
 		);
 
-		$this->assertEqualSets( array( $c1, $c2, $c3, $c4, $c6 ), $found );
+		$this->assertSameSets( array( $c1, $c2, $c3, $c4, $c6 ), $found );
 	}
 
 	/**
@@ -485,7 +485,7 @@ class Tests_Comment_Query extends WP_UnitTestCase {
 			)
 		);
 
-		$this->assertEqualSets( array( $c1 ), $found );
+		$this->assertSameSets( array( $c1 ), $found );
 	}
 
 	/**
@@ -543,7 +543,7 @@ class Tests_Comment_Query extends WP_UnitTestCase {
 			)
 		);
 
-		$this->assertEqualSets( array( $c2, $c3 ), $found );
+		$this->assertSameSets( array( $c2, $c3 ), $found );
 	}
 
 	/**
@@ -600,7 +600,7 @@ class Tests_Comment_Query extends WP_UnitTestCase {
 			)
 		);
 
-		$this->assertEqualSets( array( $c1, $c2, $c3, $c4, $c6 ), $found );
+		$this->assertSameSets( array( $c1, $c2, $c3, $c4, $c6 ), $found );
 	}
 
 	/**
@@ -650,7 +650,7 @@ class Tests_Comment_Query extends WP_UnitTestCase {
 			)
 		);
 
-		$this->assertEqualSets( array( $c1, $c2, $c3 ), $found );
+		$this->assertSameSets( array( $c1, $c2, $c3 ), $found );
 	}
 
 	/**
@@ -686,7 +686,7 @@ class Tests_Comment_Query extends WP_UnitTestCase {
 			)
 		);
 
-		$this->assertEqualSets( array( $c1, $c2, $c3 ), $found );
+		$this->assertSameSets( array( $c1, $c2, $c3 ), $found );
 	}
 
 	/**
@@ -722,7 +722,7 @@ class Tests_Comment_Query extends WP_UnitTestCase {
 			)
 		);
 
-		$this->assertEquals( array( $c2 ), $found );
+		$this->assertSame( array( $c2 ), $found );
 	}
 
 	/**
@@ -758,7 +758,7 @@ class Tests_Comment_Query extends WP_UnitTestCase {
 			)
 		);
 
-		$this->assertEquals( array( $c2 ), $found );
+		$this->assertSame( array( $c2 ), $found );
 	}
 
 	/**
@@ -794,7 +794,7 @@ class Tests_Comment_Query extends WP_UnitTestCase {
 			)
 		);
 
-		$this->assertEqualSets( array( $c2, $c3 ), $found );
+		$this->assertSameSets( array( $c2, $c3 ), $found );
 	}
 
 	/**
@@ -838,7 +838,7 @@ class Tests_Comment_Query extends WP_UnitTestCase {
 			)
 		);
 
-		$this->assertEqualSets( array( $c3, $c2 ), $found );
+		$this->assertSameSets( array( $c3, $c2 ), $found );
 	}
 
 	/**
@@ -874,7 +874,7 @@ class Tests_Comment_Query extends WP_UnitTestCase {
 			)
 		);
 
-		$this->assertEquals( array( $c2 ), $found );
+		$this->assertSame( array( $c2 ), $found );
 	}
 
 	/**
@@ -910,7 +910,7 @@ class Tests_Comment_Query extends WP_UnitTestCase {
 			)
 		);
 
-		$this->assertEquals( array( $c2 ), $found );
+		$this->assertSame( array( $c2 ), $found );
 	}
 
 	/**
@@ -954,7 +954,7 @@ class Tests_Comment_Query extends WP_UnitTestCase {
 			)
 		);
 
-		$this->assertEqualSets( array( $c3, $c2 ), $found );
+		$this->assertSameSets( array( $c3, $c2 ), $found );
 	}
 
 	/**
@@ -988,7 +988,7 @@ class Tests_Comment_Query extends WP_UnitTestCase {
 			)
 		);
 
-		$this->assertEqualSets( array( $c1, $c2 ), $found );
+		$this->assertSameSets( array( $c1, $c2 ), $found );
 	}
 
 	/**
@@ -1016,7 +1016,7 @@ class Tests_Comment_Query extends WP_UnitTestCase {
 			)
 		);
 
-		$this->assertEquals( array( $c2 ), $found );
+		$this->assertSame( array( $c2 ), $found );
 	}
 
 	/**
@@ -1044,7 +1044,7 @@ class Tests_Comment_Query extends WP_UnitTestCase {
 			)
 		);
 
-		$this->assertEquals( array( $c1 ), $found );
+		$this->assertSame( array( $c1 ), $found );
 	}
 
 	public function test_status_custom() {
@@ -1075,7 +1075,7 @@ class Tests_Comment_Query extends WP_UnitTestCase {
 			)
 		);
 
-		$this->assertEquals( array( $c2 ), $found );
+		$this->assertSame( array( $c2 ), $found );
 	}
 
 	public function test_status_all() {
@@ -1106,7 +1106,7 @@ class Tests_Comment_Query extends WP_UnitTestCase {
 			)
 		);
 
-		$this->assertEqualSets( array( $c1, $c3 ), $found );
+		$this->assertSameSets( array( $c1, $c3 ), $found );
 	}
 
 	public function test_status_default_to_all() {
@@ -1136,7 +1136,7 @@ class Tests_Comment_Query extends WP_UnitTestCase {
 			)
 		);
 
-		$this->assertEqualSets( array( $c1, $c3 ), $found );
+		$this->assertSameSets( array( $c1, $c3 ), $found );
 	}
 
 	/**
@@ -1170,7 +1170,7 @@ class Tests_Comment_Query extends WP_UnitTestCase {
 			)
 		);
 
-		$this->assertEqualSets( array( $c1, $c2, $c3 ), $found );
+		$this->assertSameSets( array( $c1, $c2, $c3 ), $found );
 	}
 
 	/**
@@ -1204,7 +1204,7 @@ class Tests_Comment_Query extends WP_UnitTestCase {
 			)
 		);
 
-		$this->assertEqualSets( array( $c1, $c2 ), $found );
+		$this->assertSameSets( array( $c1, $c2 ), $found );
 	}
 
 	/**
@@ -1238,7 +1238,7 @@ class Tests_Comment_Query extends WP_UnitTestCase {
 			)
 		);
 
-		$this->assertEqualSets( array( $c1, $c2 ), $found );
+		$this->assertSameSets( array( $c1, $c2 ), $found );
 	}
 
 	/**
@@ -1293,24 +1293,27 @@ class Tests_Comment_Query extends WP_UnitTestCase {
 
 		$post_id = self::factory()->post->create();
 		self::factory()->comment->create_post_comments( $post_id, $limit );
+
 		$comments = get_comments( array( 'post_id' => $post_id ) );
-		$this->assertEquals( $limit, count( $comments ) );
+		$this->assertSame( $limit, count( $comments ) );
 		foreach ( $comments as $comment ) {
 			$this->assertEquals( $post_id, $comment->comment_post_ID );
 		}
 
 		$post_id2 = self::factory()->post->create();
 		self::factory()->comment->create_post_comments( $post_id2, $limit );
+
 		$comments = get_comments( array( 'post_id' => $post_id2 ) );
-		$this->assertEquals( $limit, count( $comments ) );
+		$this->assertSame( $limit, count( $comments ) );
 		foreach ( $comments as $comment ) {
 			$this->assertEquals( $post_id2, $comment->comment_post_ID );
 		}
 
 		$post_id3 = self::factory()->post->create();
 		self::factory()->comment->create_post_comments( $post_id3, $limit, array( 'comment_approved' => '0' ) );
+
 		$comments = get_comments( array( 'post_id' => $post_id3 ) );
-		$this->assertEquals( $limit, count( $comments ) );
+		$this->assertSame( $limit, count( $comments ) );
 		foreach ( $comments as $comment ) {
 			$this->assertEquals( $post_id3, $comment->comment_post_ID );
 		}
@@ -1321,7 +1324,7 @@ class Tests_Comment_Query extends WP_UnitTestCase {
 				'status'  => 'hold',
 			)
 		);
-		$this->assertEquals( $limit, count( $comments ) );
+		$this->assertSame( $limit, count( $comments ) );
 		foreach ( $comments as $comment ) {
 			$this->assertEquals( $post_id3, $comment->comment_post_ID );
 		}
@@ -1332,11 +1335,11 @@ class Tests_Comment_Query extends WP_UnitTestCase {
 				'status'  => 'approve',
 			)
 		);
-		$this->assertEquals( 0, count( $comments ) );
+		$this->assertSame( 0, count( $comments ) );
 
 		self::factory()->comment->create_post_comments( $post_id3, $limit, array( 'comment_approved' => '1' ) );
 		$comments = get_comments( array( 'post_id' => $post_id3 ) );
-		$this->assertEquals( $limit * 2, count( $comments ) );
+		$this->assertSame( $limit * 2, count( $comments ) );
 		foreach ( $comments as $comment ) {
 			$this->assertEquals( $post_id3, $comment->comment_post_ID );
 		}
@@ -1363,7 +1366,7 @@ class Tests_Comment_Query extends WP_UnitTestCase {
 				'orderby'  => array( 'key' ),
 			)
 		);
-		$this->assertEquals( 2, count( $comments ) );
+		$this->assertSame( 2, count( $comments ) );
 		$this->assertEquals( $comment_id2, $comments[0]->comment_ID );
 		$this->assertEquals( $comment_id, $comments[1]->comment_ID );
 
@@ -1373,7 +1376,7 @@ class Tests_Comment_Query extends WP_UnitTestCase {
 				'orderby'  => array( 'meta_value' ),
 			)
 		);
-		$this->assertEquals( 2, count( $comments ) );
+		$this->assertSame( 2, count( $comments ) );
 		$this->assertEquals( $comment_id2, $comments[0]->comment_ID );
 		$this->assertEquals( $comment_id, $comments[1]->comment_ID );
 
@@ -1384,7 +1387,7 @@ class Tests_Comment_Query extends WP_UnitTestCase {
 				'order'    => 'ASC',
 			)
 		);
-		$this->assertEquals( 2, count( $comments ) );
+		$this->assertSame( 2, count( $comments ) );
 		$this->assertEquals( $comment_id, $comments[0]->comment_ID );
 		$this->assertEquals( $comment_id2, $comments[1]->comment_ID );
 
@@ -1395,7 +1398,7 @@ class Tests_Comment_Query extends WP_UnitTestCase {
 				'order'    => 'ASC',
 			)
 		);
-		$this->assertEquals( 2, count( $comments ) );
+		$this->assertSame( 2, count( $comments ) );
 		$this->assertEquals( $comment_id, $comments[0]->comment_ID );
 		$this->assertEquals( $comment_id2, $comments[1]->comment_ID );
 
@@ -1415,15 +1418,15 @@ class Tests_Comment_Query extends WP_UnitTestCase {
 		);
 		$this->assertEquals( array( $comment_id3, $comment_id ), wp_list_pluck( $comments, 'comment_ID' ) );
 
-		// value1 is present on two different keys for $comment_id yet we should get only one instance
-		// of that comment in the results
+		// 'value1' is present on two different keys for $comment_id,
+		// yet we should get only one instance of that comment in the results.
 		$comments = get_comments(
 			array(
 				'meta_value' => 'value1',
 				'orderby'    => array( 'key' ),
 			)
 		);
-		$this->assertEquals( 1, count( $comments ) );
+		$this->assertSame( 1, count( $comments ) );
 
 		$comments = get_comments(
 			array(
@@ -1431,7 +1434,7 @@ class Tests_Comment_Query extends WP_UnitTestCase {
 				'orderby'    => array( 'meta_value' ),
 			)
 		);
-		$this->assertEquals( 1, count( $comments ) );
+		$this->assertSame( 1, count( $comments ) );
 	}
 
 	/**
@@ -1458,7 +1461,7 @@ class Tests_Comment_Query extends WP_UnitTestCase {
 			)
 		);
 
-		$this->assertEquals( array( $comments[1], $comments[2], $comments[0] ), $found );
+		$this->assertSame( array( $comments[1], $comments[2], $comments[0] ), $found );
 	}
 
 	/**
@@ -1502,7 +1505,7 @@ class Tests_Comment_Query extends WP_UnitTestCase {
 			)
 		);
 
-		$this->assertEquals( array( $c3, $c1, $c2 ), $found );
+		$this->assertSame( array( $c3, $c1, $c2 ), $found );
 	}
 
 	/**
@@ -1539,7 +1542,7 @@ class Tests_Comment_Query extends WP_UnitTestCase {
 			)
 		);
 
-		$this->assertEquals( array( $comments[2], $comments[0], $comments[1] ), $found );
+		$this->assertSame( array( $comments[2], $comments[0], $comments[1] ), $found );
 	}
 
 	/**
@@ -1565,7 +1568,7 @@ class Tests_Comment_Query extends WP_UnitTestCase {
 			)
 		);
 
-		$this->assertEquals( array( $comments[2] ), $q->get_comments() );
+		$this->assertSame( array( $comments[2] ), $q->get_comments() );
 	}
 
 	/**
@@ -1591,7 +1594,7 @@ class Tests_Comment_Query extends WP_UnitTestCase {
 			)
 		);
 
-		$this->assertEquals( array( $comments[0] ), $q->get_comments() );
+		$this->assertSame( array( $comments[0] ), $q->get_comments() );
 	}
 
 	/**
@@ -1684,7 +1687,7 @@ class Tests_Comment_Query extends WP_UnitTestCase {
 			)
 		);
 
-		$this->assertEqualSets( array( $c1, $c2 ), $comments );
+		$this->assertSameSets( array( $c1, $c2 ), $comments );
 	}
 
 	/**
@@ -1720,7 +1723,7 @@ class Tests_Comment_Query extends WP_UnitTestCase {
 
 		$comment_ids = get_comments( array( 'fields' => 'ids' ) );
 		$this->assertCount( 3, $comment_ids );
-		$this->assertEqualSets( array( $comment_1, $comment_2, $comment_3 ), $comment_ids );
+		$this->assertSameSets( array( $comment_1, $comment_2, $comment_3 ), $comment_ids );
 	}
 
 	/**
@@ -1756,7 +1759,7 @@ class Tests_Comment_Query extends WP_UnitTestCase {
 			)
 		);
 
-		$this->assertEqualSets( array( $comment_1, $comment_3 ), $comment_ids );
+		$this->assertSameSets( array( $comment_1, $comment_3 ), $comment_ids );
 	}
 
 	/**
@@ -1792,7 +1795,7 @@ class Tests_Comment_Query extends WP_UnitTestCase {
 			)
 		);
 
-		$this->assertEqualSets( array( $comment_1 ), $comment_ids );
+		$this->assertSameSets( array( $comment_1 ), $comment_ids );
 	}
 
 	/**
@@ -1832,7 +1835,7 @@ class Tests_Comment_Query extends WP_UnitTestCase {
 			)
 		);
 
-		$this->assertEqualSets( array( $c1, $c2 ), $comment_ids );
+		$this->assertSameSets( array( $c1, $c2 ), $comment_ids );
 	}
 
 	/**
@@ -1872,7 +1875,7 @@ class Tests_Comment_Query extends WP_UnitTestCase {
 			)
 		);
 
-		$this->assertEqualSets( array( $c3 ), $comment_ids );
+		$this->assertSameSets( array( $c3 ), $comment_ids );
 	}
 
 	/**
@@ -1915,7 +1918,7 @@ class Tests_Comment_Query extends WP_UnitTestCase {
 			)
 		);
 
-		$this->assertEqualSets( array( $c1, $c2 ), $comment_ids );
+		$this->assertSameSets( array( $c1, $c2 ), $comment_ids );
 	}
 
 	/**
@@ -1958,7 +1961,7 @@ class Tests_Comment_Query extends WP_UnitTestCase {
 			)
 		);
 
-		$this->assertEqualSets( array( $c3 ), $comment_ids );
+		$this->assertSameSets( array( $c3 ), $comment_ids );
 	}
 
 		/**
@@ -2006,7 +2009,7 @@ class Tests_Comment_Query extends WP_UnitTestCase {
 			)
 		);
 
-		$this->assertEqualSets( array( $c1, $c3 ), $comment_ids );
+		$this->assertSameSets( array( $c1, $c3 ), $comment_ids );
 	}
 
 		/**
@@ -2054,7 +2057,7 @@ class Tests_Comment_Query extends WP_UnitTestCase {
 			)
 		);
 
-		$this->assertEqualSets( array( $c3, $c4 ), $comment_ids );
+		$this->assertSameSets( array( $c3, $c4 ), $comment_ids );
 	}
 
 	/**
@@ -2085,7 +2088,7 @@ class Tests_Comment_Query extends WP_UnitTestCase {
 		$comments_approved_1 = get_comments( array( 'status' => 'all' ) );
 
 		$comment_ids = get_comments( array( 'fields' => 'ids' ) );
-		$this->assertEqualSets( array( $comment_1, $comment_2, $comment_3 ), $comment_ids );
+		$this->assertSameSets( array( $comment_1, $comment_2, $comment_3 ), $comment_ids );
 	}
 
 	/**
@@ -2129,7 +2132,7 @@ class Tests_Comment_Query extends WP_UnitTestCase {
 			)
 		);
 
-		$this->assertEqualSets( array( $c1, $c2, $c3 ), $found );
+		$this->assertSameSets( array( $c1, $c2, $c3 ), $found );
 	}
 
 	/**
@@ -2180,7 +2183,7 @@ class Tests_Comment_Query extends WP_UnitTestCase {
 			)
 		);
 
-		$this->assertEqualSets( array( $c1, $c2, $c3, $c5 ), $found );
+		$this->assertSameSets( array( $c1, $c2, $c3, $c5 ), $found );
 	}
 
 	/**
@@ -2231,7 +2234,7 @@ class Tests_Comment_Query extends WP_UnitTestCase {
 			)
 		);
 
-		$this->assertEqualSets( array( $c1, $c2, $c3, $c5 ), $found );
+		$this->assertSameSets( array( $c1, $c2, $c3, $c5 ), $found );
 	}
 
 	/**
@@ -2281,7 +2284,7 @@ class Tests_Comment_Query extends WP_UnitTestCase {
 			)
 		);
 
-		$this->assertEqualSets( array( $c1, $c2, $c3 ), $found );
+		$this->assertSameSets( array( $c1, $c2, $c3 ), $found );
 	}
 
 	/**
@@ -2340,7 +2343,7 @@ class Tests_Comment_Query extends WP_UnitTestCase {
 			)
 		);
 
-		$this->assertEqualSets( array( $c1, $c2, $c3, $c5 ), $found );
+		$this->assertSameSets( array( $c1, $c2, $c3, $c5 ), $found );
 	}
 
 	/**
@@ -2399,7 +2402,7 @@ class Tests_Comment_Query extends WP_UnitTestCase {
 			)
 		);
 
-		$this->assertEqualSets( array( $c1, $c2, $c3, $c5 ), $found );
+		$this->assertSameSets( array( $c1, $c2, $c3, $c5 ), $found );
 	}
 
 	public function test_search() {
@@ -2472,7 +2475,7 @@ class Tests_Comment_Query extends WP_UnitTestCase {
 			)
 		);
 
-		$this->assertEqualSets( array( $c1, $c2, $c3, $c4, $c5 ), $found );
+		$this->assertSameSets( array( $c1, $c2, $c3, $c4, $c5 ), $found );
 	}
 
 	/**
@@ -2896,7 +2899,7 @@ class Tests_Comment_Query extends WP_UnitTestCase {
 			)
 		);
 
-		$this->assertEquals( 2, $found );
+		$this->assertSame( 2, $found );
 	}
 
 	/**
@@ -2937,7 +2940,7 @@ class Tests_Comment_Query extends WP_UnitTestCase {
 			)
 		);
 
-		$this->assertEquals( 2, $found );
+		$this->assertSame( 2, $found );
 	}
 
 	/**
@@ -3052,7 +3055,7 @@ class Tests_Comment_Query extends WP_UnitTestCase {
 			)
 		);
 
-		$this->assertEqualSets( $c2, $found );
+		$this->assertSameSets( $c2, $found );
 
 		_unregister_post_type( 'post-type-1' );
 		_unregister_post_type( 'post-type-2' );
@@ -3079,7 +3082,7 @@ class Tests_Comment_Query extends WP_UnitTestCase {
 			)
 		);
 
-		$this->assertEqualSets( $c2, $found );
+		$this->assertSameSets( $c2, $found );
 
 		_unregister_post_type( 'post-type-1' );
 		_unregister_post_type( 'post-type-2' );
@@ -3109,7 +3112,7 @@ class Tests_Comment_Query extends WP_UnitTestCase {
 			)
 		);
 
-		$this->assertEqualSets( array_merge( $c1, $c3 ), $found );
+		$this->assertSameSets( array_merge( $c1, $c3 ), $found );
 	}
 
 	public function test_post_name_single_value() {
@@ -3127,7 +3130,7 @@ class Tests_Comment_Query extends WP_UnitTestCase {
 			)
 		);
 
-		$this->assertEqualSets( $c2, $found );
+		$this->assertSameSets( $c2, $found );
 	}
 
 	/**
@@ -3148,7 +3151,7 @@ class Tests_Comment_Query extends WP_UnitTestCase {
 			)
 		);
 
-		$this->assertEqualSets( $c2, $found );
+		$this->assertSameSets( $c2, $found );
 	}
 
 	/**
@@ -3171,7 +3174,7 @@ class Tests_Comment_Query extends WP_UnitTestCase {
 			)
 		);
 
-		$this->assertEqualSets( array_merge( $c1, $c3 ), $found );
+		$this->assertSameSets( array_merge( $c1, $c3 ), $found );
 	}
 
 	public function test_post_status_single_value() {
@@ -3189,7 +3192,7 @@ class Tests_Comment_Query extends WP_UnitTestCase {
 			)
 		);
 
-		$this->assertEqualSets( $c2, $found );
+		$this->assertSameSets( $c2, $found );
 	}
 
 	/**
@@ -3210,7 +3213,7 @@ class Tests_Comment_Query extends WP_UnitTestCase {
 			)
 		);
 
-		$this->assertEqualSets( $c2, $found );
+		$this->assertSameSets( $c2, $found );
 	}
 
 	/**
@@ -3233,7 +3236,7 @@ class Tests_Comment_Query extends WP_UnitTestCase {
 			)
 		);
 
-		$this->assertEqualSets( array_merge( $c1, $c3 ), $found );
+		$this->assertSameSets( array_merge( $c1, $c3 ), $found );
 	}
 
 	/**
@@ -3256,7 +3259,7 @@ class Tests_Comment_Query extends WP_UnitTestCase {
 				'post_type' => array( 'any', 'post-type-1' ),
 			)
 		);
-		$this->assertEqualSets( array_merge( $c1, $c2 ), $found );
+		$this->assertSameSets( array_merge( $c1, $c2 ), $found );
 	}
 
 	/**
@@ -3279,7 +3282,7 @@ class Tests_Comment_Query extends WP_UnitTestCase {
 				'post_type' => array( 'any' ),
 			)
 		);
-		$this->assertEqualSets( array_merge( $c1, $c2 ), $found );
+		$this->assertSameSets( array_merge( $c1, $c2 ), $found );
 	}
 
 	/**
@@ -3299,7 +3302,7 @@ class Tests_Comment_Query extends WP_UnitTestCase {
 				'post_status' => array( 'any', 'draft' ),
 			)
 		);
-		$this->assertEqualSets( array_merge( $c1, $c2 ), $found );
+		$this->assertSameSets( array_merge( $c1, $c2 ), $found );
 	}
 
 	/**
@@ -3319,7 +3322,7 @@ class Tests_Comment_Query extends WP_UnitTestCase {
 				'post_status' => array( 'any' ),
 			)
 		);
-		$this->assertEqualSets( array_merge( $c1, $c2 ), $found );
+		$this->assertSameSets( array_merge( $c1, $c2 ), $found );
 	}
 
 	/**
@@ -3443,7 +3446,7 @@ class Tests_Comment_Query extends WP_UnitTestCase {
 
 		remove_action( 'pre_get_comments', array( $this, 'modify_meta_query' ) );
 
-		$this->assertEqualSets( array( $comments[1] ), $q->comments );
+		$this->assertSameSets( array( $comments[1] ), $q->comments );
 	}
 
 	public function modify_meta_query( $q ) {
@@ -3481,7 +3484,7 @@ class Tests_Comment_Query extends WP_UnitTestCase {
 
 		remove_action( 'pre_get_comments', array( $this, 'modify_meta_params' ) );
 
-		$this->assertEqualSets( array( $comments[1] ), $q->comments );
+		$this->assertSameSets( array( $comments[1] ), $q->comments );
 	}
 
 	public function modify_meta_params( $q ) {
@@ -3515,7 +3518,7 @@ class Tests_Comment_Query extends WP_UnitTestCase {
 			)
 		);
 
-		$this->assertEqualSets( array( $c2 ), $ids->comments );
+		$this->assertSameSets( array( $c2 ), $ids->comments );
 	}
 
 	/**
@@ -3557,7 +3560,7 @@ class Tests_Comment_Query extends WP_UnitTestCase {
 			)
 		);
 
-		$this->assertEqualSets( array( $c3, $c4 ), $ids->comments );
+		$this->assertSameSets( array( $c3, $c4 ), $ids->comments );
 	}
 
 	/**
@@ -3587,7 +3590,7 @@ class Tests_Comment_Query extends WP_UnitTestCase {
 			)
 		);
 
-		$this->assertEqualSets( array( $c1 ), $ids->comments );
+		$this->assertSameSets( array( $c1 ), $ids->comments );
 	}
 
 	/**
@@ -3630,7 +3633,7 @@ class Tests_Comment_Query extends WP_UnitTestCase {
 			)
 		);
 
-		$this->assertEqualSets( array( $c1, $c2 ), $ids->comments );
+		$this->assertSameSets( array( $c1, $c2 ), $ids->comments );
 	}
 
 	/**
@@ -3672,7 +3675,7 @@ class Tests_Comment_Query extends WP_UnitTestCase {
 			)
 		);
 
-		$this->assertEquals( array( $c2, $c3 ), $ids->comments );
+		$this->assertSame( array( $c2, $c3 ), $ids->comments );
 
 	}
 
@@ -3689,8 +3692,8 @@ class Tests_Comment_Query extends WP_UnitTestCase {
 			)
 		);
 
-		$this->assertEquals( 0, $q->found_comments );
-		$this->assertEquals( 0, $q->max_num_pages );
+		$this->assertSame( 0, $q->found_comments );
+		$this->assertSame( 0, $q->max_num_pages );
 	}
 
 	/**
@@ -3707,8 +3710,8 @@ class Tests_Comment_Query extends WP_UnitTestCase {
 			)
 		);
 
-		$this->assertEquals( 0, $q->found_comments );
-		$this->assertEquals( 0, $q->max_num_pages );
+		$this->assertSame( 0, $q->found_comments );
+		$this->assertSame( 0, $q->max_num_pages );
 	}
 
 	/**
@@ -3725,7 +3728,7 @@ class Tests_Comment_Query extends WP_UnitTestCase {
 			)
 		);
 
-		$this->assertEquals( 3, $q->found_comments );
+		$this->assertSame( 3, $q->found_comments );
 		$this->assertEquals( 2, $q->max_num_pages );
 	}
 
@@ -3795,7 +3798,7 @@ class Tests_Comment_Query extends WP_UnitTestCase {
 			)
 		);
 
-		$this->assertEquals( array( $top_level_comments[0], $top_level_comments[1] ), $q->comments );
+		$this->assertSame( array( $top_level_comments[0], $top_level_comments[1] ), $q->comments );
 	}
 
 	/**
@@ -4158,7 +4161,7 @@ class Tests_Comment_Query extends WP_UnitTestCase {
 		);
 		$q2_ids      = wp_list_pluck( $q2->comments, 'comment_ID' );
 
-		$this->assertEqualSets( $q1_ids, $q2_ids );
+		$this->assertSameSets( $q1_ids, $q2_ids );
 		$this->assertSame( $num_queries, $wpdb->num_queries );
 	}
 
@@ -4220,7 +4223,7 @@ class Tests_Comment_Query extends WP_UnitTestCase {
 			)
 		);
 		$q2_ids = wp_list_pluck( $q2->comments, 'comment_ID' );
-		$this->assertEqualSets( $q1_ids, $q2_ids );
+		$this->assertSameSets( $q1_ids, $q2_ids );
 	}
 
 	/**
@@ -4284,11 +4287,11 @@ class Tests_Comment_Query extends WP_UnitTestCase {
 
 		$found_1    = $found[ $c1 ];
 		$children_1 = $found_1->get_children();
-		$this->assertEqualSets( array( $c2 ), array_keys( $children_1 ) );
+		$this->assertSameSets( array( $c2 ), array_keys( $children_1 ) );
 
 		$found_3    = $found[ $c3 ];
 		$children_3 = $found_3->get_children();
-		$this->assertEqualSets( array( $c4, $c5 ), array_keys( $children_3 ) );
+		$this->assertSameSets( array( $c4, $c5 ), array_keys( $children_3 ) );
 	}
 
 	/**
@@ -4438,7 +4441,7 @@ class Tests_Comment_Query extends WP_UnitTestCase {
 		);
 
 		$this->assertSame( $num_queries, $wpdb->num_queries );
-		$this->assertEqualSets( array( $c ), $q->comments );
+		$this->assertSameSets( array( $c ), $q->comments );
 	}
 
 	public function test_updated_comment_should_invalidate_query_cache() {
@@ -4478,7 +4481,7 @@ class Tests_Comment_Query extends WP_UnitTestCase {
 
 		$num_queries++;
 		$this->assertSame( $num_queries, $wpdb->num_queries );
-		$this->assertEqualSets( array( $c ), $q->comments );
+		$this->assertSameSets( array( $c ), $q->comments );
 	}
 
 	public function test_deleted_comment_should_invalidate_query_cache() {
@@ -4511,7 +4514,7 @@ class Tests_Comment_Query extends WP_UnitTestCase {
 
 		$num_queries++;
 		$this->assertSame( $num_queries, $wpdb->num_queries );
-		$this->assertEqualSets( array(), $q->comments );
+		$this->assertSameSets( array(), $q->comments );
 	}
 
 	public function test_trashed_comment_should_invalidate_query_cache() {
@@ -4544,7 +4547,7 @@ class Tests_Comment_Query extends WP_UnitTestCase {
 
 		$num_queries++;
 		$this->assertSame( $num_queries, $wpdb->num_queries );
-		$this->assertEqualSets( array(), $q->comments );
+		$this->assertSameSets( array(), $q->comments );
 	}
 
 	public function test_untrashed_comment_should_invalidate_query_cache() {
@@ -4579,7 +4582,7 @@ class Tests_Comment_Query extends WP_UnitTestCase {
 
 		$num_queries++;
 		$this->assertSame( $num_queries, $wpdb->num_queries );
-		$this->assertEqualSets( array( $c ), $q->comments );
+		$this->assertSameSets( array( $c ), $q->comments );
 	}
 
 	public function test_spammed_comment_should_invalidate_query_cache() {
@@ -4612,7 +4615,7 @@ class Tests_Comment_Query extends WP_UnitTestCase {
 
 		$num_queries++;
 		$this->assertSame( $num_queries, $wpdb->num_queries );
-		$this->assertEqualSets( array(), $q->comments );
+		$this->assertSameSets( array(), $q->comments );
 	}
 
 	public function test_unspammed_comment_should_invalidate_query_cache() {
@@ -4647,7 +4650,7 @@ class Tests_Comment_Query extends WP_UnitTestCase {
 
 		$num_queries++;
 		$this->assertSame( $num_queries, $wpdb->num_queries );
-		$this->assertEqualSets( array( $c ), $q->comments );
+		$this->assertSameSets( array( $c ), $q->comments );
 	}
 
 	/**
@@ -4676,7 +4679,7 @@ class Tests_Comment_Query extends WP_UnitTestCase {
 				'count'  => true,
 			)
 		);
-		$this->assertEquals( $number_of_queries + 1, $wpdb->num_queries );
+		$this->assertSame( $number_of_queries + 1, $wpdb->num_queries );
 	}
 
 	/**
@@ -4705,7 +4708,7 @@ class Tests_Comment_Query extends WP_UnitTestCase {
 				'count'  => true,
 			)
 		);
-		$this->assertEquals( $number_of_queries, $wpdb->num_queries );
+		$this->assertSame( $number_of_queries, $wpdb->num_queries );
 	}
 
 	/**
@@ -4733,7 +4736,7 @@ class Tests_Comment_Query extends WP_UnitTestCase {
 			)
 		);
 
-		$this->assertEquals( $number_of_queries, $wpdb->num_queries );
+		$this->assertSame( $number_of_queries, $wpdb->num_queries );
 	}
 
 	/**
@@ -4763,7 +4766,7 @@ class Tests_Comment_Query extends WP_UnitTestCase {
 			)
 		);
 
-		$this->assertEqualSets( $c1, $cached );
+		$this->assertSameSets( $c1, $cached );
 
 		foreach ( $c2 as $cid ) {
 			add_comment_meta( $cid, 'sauce', 'fire' );
@@ -4782,7 +4785,7 @@ class Tests_Comment_Query extends WP_UnitTestCase {
 			)
 		);
 
-		$this->assertEqualSets( array_merge( $c1, $c2 ), $found );
+		$this->assertSameSets( array_merge( $c1, $c2 ), $found );
 	}
 
 	/**
@@ -4812,7 +4815,7 @@ class Tests_Comment_Query extends WP_UnitTestCase {
 			)
 		);
 
-		$this->assertEqualSets( array_merge( $c1, $c2 ), $cached );
+		$this->assertSameSets( array_merge( $c1, $c2 ), $cached );
 
 		foreach ( $c2 as $cid ) {
 			update_comment_meta( $cid, 'sauce', 'foo' );
@@ -4831,7 +4834,7 @@ class Tests_Comment_Query extends WP_UnitTestCase {
 			)
 		);
 
-		$this->assertEqualSets( $c1, $found );
+		$this->assertSameSets( $c1, $found );
 	}
 
 	/**
@@ -4861,7 +4864,7 @@ class Tests_Comment_Query extends WP_UnitTestCase {
 			)
 		);
 
-		$this->assertEqualSets( array_merge( $c1, $c2 ), $cached );
+		$this->assertSameSets( array_merge( $c1, $c2 ), $cached );
 
 		foreach ( $c2 as $cid ) {
 			delete_comment_meta( $cid, 'sauce' );
@@ -4880,7 +4883,7 @@ class Tests_Comment_Query extends WP_UnitTestCase {
 			)
 		);
 
-		$this->assertEqualSets( $c1, $found );
+		$this->assertSameSets( $c1, $found );
 	}
 
 	/**
@@ -4905,7 +4908,7 @@ class Tests_Comment_Query extends WP_UnitTestCase {
 		$this->assertSame( array( 555 ), $results );
 
 		// Make sure manually setting total_users doesn't get overwritten.
-		$this->assertEquals( 1, $q->found_comments );
+		$this->assertSame( 1, $q->found_comments );
 	}
 
 	public static function filter_comments_pre_query( $comments, $query ) {
diff --git a/tests/comment/slashes.php b/tests/comment/slashes.php
index 666d90e416..8fab42b997 100644
--- a/tests/comment/slashes.php
+++ b/tests/comment/slashes.php
@@ -8,12 +8,12 @@
 class Tests_Comment_Slashes extends WP_UnitTestCase {
 	function setUp() {
 		parent::setUp();
-		// we need an admin user to bypass comment flood protection
+		// We need an admin user to bypass comment flood protection.
 		$this->author_id = self::factory()->user->create( array( 'role' => 'administrator' ) );
 		wp_set_current_user( $this->author_id );
 
-		// it is important to test with both even and odd numbered slashes as
-		// kses does a strip-then-add slashes in some of its function calls
+		// It is important to test with both even and odd numbered slashes,
+		// as KSES does a strip-then-add slashes in some of its function calls.
 		$this->slash_1 = 'String with 1 slash \\';
 		$this->slash_2 = 'String with 2 slashes \\\\';
 		$this->slash_3 = 'String with 3 slashes \\\\\\';
@@ -24,13 +24,13 @@ class Tests_Comment_Slashes extends WP_UnitTestCase {
 	}
 
 	/**
-	 * Tests the extended model function that expects slashed data
+	 * Tests the extended model function that expects slashed data.
 	 */
 	function test_wp_new_comment() {
 		$post_id = self::factory()->post->create();
 
-		// not testing comment_author_email or comment_author_url
-		// as slashes are not permitted in that data
+		// Not testing comment_author_email or comment_author_url
+		// as slashes are not permitted in that data.
 		$data = array(
 			'comment_post_ID'      => $post_id,
 			'comment_author'       => $this->slash_1,
@@ -43,8 +43,8 @@ class Tests_Comment_Slashes extends WP_UnitTestCase {
 
 		$comment = get_comment( $id );
 
-		$this->assertEquals( wp_unslash( $this->slash_1 ), $comment->comment_author );
-		$this->assertEquals( wp_unslash( $this->slash_7 ), $comment->comment_content );
+		$this->assertSame( wp_unslash( $this->slash_1 ), $comment->comment_author );
+		$this->assertSame( wp_unslash( $this->slash_7 ), $comment->comment_content );
 
 		$data = array(
 			'comment_post_ID'      => $post_id,
@@ -58,12 +58,12 @@ class Tests_Comment_Slashes extends WP_UnitTestCase {
 
 		$comment = get_comment( $id );
 
-		$this->assertEquals( wp_unslash( $this->slash_2 ), $comment->comment_author );
-		$this->assertEquals( wp_unslash( $this->slash_4 ), $comment->comment_content );
+		$this->assertSame( wp_unslash( $this->slash_2 ), $comment->comment_author );
+		$this->assertSame( wp_unslash( $this->slash_4 ), $comment->comment_content );
 	}
 
 	/**
-	 * Tests the controller function that expects slashed data
+	 * Tests the controller function that expects slashed data.
 	 */
 	function test_edit_comment() {
 		$post_id    = self::factory()->post->create();
@@ -73,8 +73,8 @@ class Tests_Comment_Slashes extends WP_UnitTestCase {
 			)
 		);
 
-		// not testing comment_author_email or comment_author_url
-		// as slashes are not permitted in that data
+		// Not testing comment_author_email or comment_author_url
+		// as slashes are not permitted in that data.
 		$_POST                            = array();
 		$_POST['comment_ID']              = $comment_id;
 		$_POST['comment_status']          = '';
@@ -82,13 +82,14 @@ class Tests_Comment_Slashes extends WP_UnitTestCase {
 		$_POST['newcomment_author_url']   = '';
 		$_POST['newcomment_author_email'] = '';
 		$_POST['content']                 = $this->slash_7;
-		$_POST                            = add_magic_quotes( $_POST );
+
+		$_POST = add_magic_quotes( $_POST ); // The edit_comment() function will strip slashes.
 
 		edit_comment();
 		$comment = get_comment( $comment_id );
 
-		$this->assertEquals( $this->slash_1, $comment->comment_author );
-		$this->assertEquals( $this->slash_7, $comment->comment_content );
+		$this->assertSame( $this->slash_1, $comment->comment_author );
+		$this->assertSame( $this->slash_7, $comment->comment_content );
 
 		$_POST                            = array();
 		$_POST['comment_ID']              = $comment_id;
@@ -97,17 +98,18 @@ class Tests_Comment_Slashes extends WP_UnitTestCase {
 		$_POST['newcomment_author_url']   = '';
 		$_POST['newcomment_author_email'] = '';
 		$_POST['content']                 = $this->slash_4;
-		$_POST                            = add_magic_quotes( $_POST );
+
+		$_POST = add_magic_quotes( $_POST ); // The edit_comment() function will strip slashes.
 
 		edit_comment();
 		$comment = get_comment( $comment_id );
 
-		$this->assertEquals( $this->slash_2, $comment->comment_author );
-		$this->assertEquals( $this->slash_4, $comment->comment_content );
+		$this->assertSame( $this->slash_2, $comment->comment_author );
+		$this->assertSame( $this->slash_4, $comment->comment_content );
 	}
 
 	/**
-	 * Tests the model function that expects slashed data
+	 * Tests the model function that expects slashed data.
 	 */
 	function test_wp_insert_comment() {
 		$post_id = self::factory()->post->create();
@@ -121,8 +123,8 @@ class Tests_Comment_Slashes extends WP_UnitTestCase {
 		);
 		$comment    = get_comment( $comment_id );
 
-		$this->assertEquals( wp_unslash( $this->slash_1 ), $comment->comment_author );
-		$this->assertEquals( wp_unslash( $this->slash_7 ), $comment->comment_content );
+		$this->assertSame( wp_unslash( $this->slash_1 ), $comment->comment_author );
+		$this->assertSame( wp_unslash( $this->slash_7 ), $comment->comment_content );
 
 		$comment_id = wp_insert_comment(
 			array(
@@ -133,12 +135,12 @@ class Tests_Comment_Slashes extends WP_UnitTestCase {
 		);
 		$comment    = get_comment( $comment_id );
 
-		$this->assertEquals( wp_unslash( $this->slash_2 ), $comment->comment_author );
-		$this->assertEquals( wp_unslash( $this->slash_4 ), $comment->comment_content );
+		$this->assertSame( wp_unslash( $this->slash_2 ), $comment->comment_author );
+		$this->assertSame( wp_unslash( $this->slash_4 ), $comment->comment_content );
 	}
 
 	/**
-	 * Tests the model function that expects slashed data
+	 * Tests the model function that expects slashed data.
 	 */
 	function test_wp_update_comment() {
 		$post_id    = self::factory()->post->create();
@@ -157,8 +159,8 @@ class Tests_Comment_Slashes extends WP_UnitTestCase {
 		);
 		$comment = get_comment( $comment_id );
 
-		$this->assertEquals( wp_unslash( $this->slash_1 ), $comment->comment_author );
-		$this->assertEquals( wp_unslash( $this->slash_7 ), $comment->comment_content );
+		$this->assertSame( wp_unslash( $this->slash_1 ), $comment->comment_author );
+		$this->assertSame( wp_unslash( $this->slash_7 ), $comment->comment_content );
 
 		wp_update_comment(
 			array(
@@ -169,8 +171,8 @@ class Tests_Comment_Slashes extends WP_UnitTestCase {
 		);
 		$comment = get_comment( $comment_id );
 
-		$this->assertEquals( wp_unslash( $this->slash_2 ), $comment->comment_author );
-		$this->assertEquals( wp_unslash( $this->slash_4 ), $comment->comment_content );
+		$this->assertSame( wp_unslash( $this->slash_2 ), $comment->comment_author );
+		$this->assertSame( wp_unslash( $this->slash_4 ), $comment->comment_content );
 	}
 
 }
diff --git a/tests/comment/template.php b/tests/comment/template.php
index cabfb36da0..68f98b5c8b 100644
--- a/tests/comment/template.php
+++ b/tests/comment/template.php
@@ -7,14 +7,14 @@ class Tests_Comment_Template extends WP_UnitTestCase {
 	function test_get_comments_number() {
 		$post_id = self::factory()->post->create();
 
-		$this->assertEquals( 0, get_comments_number( 0 ) );
-		$this->assertEquals( 0, get_comments_number( $post_id ) );
-		$this->assertEquals( 0, get_comments_number( get_post( $post_id ) ) );
+		$this->assertSame( 0, get_comments_number( 0 ) );
+		$this->assertSame( '0', get_comments_number( $post_id ) );
+		$this->assertSame( '0', get_comments_number( get_post( $post_id ) ) );
 
 		self::factory()->comment->create_post_comments( $post_id, 12 );
 
-		$this->assertEquals( 12, get_comments_number( $post_id ) );
-		$this->assertEquals( 12, get_comments_number( get_post( $post_id ) ) );
+		$this->assertSame( '12', get_comments_number( $post_id ) );
+		$this->assertSame( '12', get_comments_number( get_post( $post_id ) ) );
 	}
 
 	function test_get_comments_number_without_arg() {
@@ -22,12 +22,31 @@ class Tests_Comment_Template extends WP_UnitTestCase {
 		$permalink = get_permalink( $post_id );
 		$this->go_to( $permalink );
 
-		$this->assertEquals( 0, get_comments_number() );
+		$this->assertSame( '0', get_comments_number() );
 
 		self::factory()->comment->create_post_comments( $post_id, 12 );
 		$this->go_to( $permalink );
 
-		$this->assertEquals( 12, get_comments_number() );
+		$this->assertSame( '12', get_comments_number() );
+	}
+
+	/**
+	 * @ticket 48772
+	 */
+	function test_get_comments_number_text_with_post_id() {
+		$post_id = $this->factory->post->create();
+		$this->factory->comment->create_post_comments( $post_id, 6 );
+
+		$comments_number_text = get_comments_number_text( false, false, false, $post_id );
+
+		$this->assertSame( sprintf( _n( '%s Comment', '%s Comments', 6 ), '6' ), $comments_number_text );
+
+		ob_start();
+		comments_number( false, false, false, $post_id );
+		$comments_number_text = ob_get_clean();
+
+		$this->assertSame( sprintf( _n( '%s Comment', '%s Comments', 6 ), '6' ), $comments_number_text );
+
 	}
 
 	/**
@@ -38,17 +57,17 @@ class Tests_Comment_Template extends WP_UnitTestCase {
 		$permalink = get_permalink( $post_id );
 		$this->go_to( $permalink );
 
-		$this->assertEquals( __( 'No Comments' ), get_comments_number_text() );
+		$this->assertSame( __( 'No Comments' ), get_comments_number_text() );
 
 		$this->factory->comment->create_post_comments( $post_id, 1 );
 		$this->go_to( $permalink );
 
-		$this->assertEquals( __( '1 Comment' ), get_comments_number_text() );
+		$this->assertSame( __( '1 Comment' ), get_comments_number_text() );
 
 		$this->factory->comment->create_post_comments( $post_id, 1 );
 		$this->go_to( $permalink );
 
-		$this->assertEquals( sprintf( _n( '%s Comment', '%s Comments', 2 ), '2' ), get_comments_number_text() );
+		$this->assertSame( sprintf( _n( '%s Comment', '%s Comments', 2 ), '2' ), get_comments_number_text() );
 
 	}
 
@@ -65,7 +84,7 @@ class Tests_Comment_Template extends WP_UnitTestCase {
 
 		add_filter( 'gettext_with_context', array( $this, '_enable_comment_number_declension' ), 10, 4 );
 
-		$this->assertEquals( $output, get_comments_number_text( false, false, $input ) );
+		$this->assertSame( $output, get_comments_number_text( false, false, $input ) );
 
 		remove_filter( 'gettext_with_context', array( $this, '_enable_comment_number_declension' ), 10, 4 );
 	}
@@ -109,7 +128,7 @@ class Tests_Comment_Template extends WP_UnitTestCase {
 			array(
 				2,
 				'2 Comments<span class="screen-reader-text"> on Hello % world!</span>',
-				'2 Comments<span class="screen-reader-text"> on Hello 2 world!</span>', // See #WP37103
+				'2 Comments<span class="screen-reader-text"> on Hello 2 world!</span>', // See #WP37103.
 			),
 			array(
 				2,
diff --git a/tests/comment/walker.php b/tests/comment/walker.php
index eadd9861e9..27fea21b18 100644
--- a/tests/comment/walker.php
+++ b/tests/comment/walker.php
@@ -56,10 +56,10 @@ class Comment_Callback_Test {
 	public function comment( $comment, $args, $depth ) {
 		if ( 1 === $depth ) {
 			$this->test_walker->assertTrue( $this->walker->has_children );
-			$this->test_walker->assertTrue( $args['has_children'] ); // Back compat
+			$this->test_walker->assertTrue( $args['has_children'] );  // Back compat.
 		} elseif ( 2 === $depth ) {
 			$this->test_walker->assertFalse( $this->walker->has_children );
-			$this->test_walker->assertFalse( $args['has_children'] ); // Back compat
+			$this->test_walker->assertFalse( $args['has_children'] ); // Back compat.
 		}
 	}
 }
diff --git a/tests/comment/wpAllowComment.php b/tests/comment/wpAllowComment.php
index a1404b624c..5c5cb4e088 100644
--- a/tests/comment/wpAllowComment.php
+++ b/tests/comment/wpAllowComment.php
@@ -22,14 +22,14 @@ class Tests_Comment_WpAllowComment extends WP_UnitTestCase {
 			)
 		);
 
-		update_option( 'comment_whitelist', 0 );
+		update_option( 'comment_previously_approved', 0 );
 	}
 
 	function tearDown() {
 		wp_delete_post( self::$post_id, true );
 		wp_delete_comment( self::$comment_id, true );
 
-		update_option( 'comment_whitelist', 1 );
+		update_option( 'comment_previously_approved', 1 );
 	}
 
 	public function test_allow_comment_if_comment_author_emails_differ() {
diff --git a/tests/comment/wpBatchUpdateCommentType.php b/tests/comment/wpBatchUpdateCommentType.php
new file mode 100644
index 0000000000..c900e0aaf4
--- /dev/null
+++ b/tests/comment/wpBatchUpdateCommentType.php
@@ -0,0 +1,49 @@
+<?php
+
+/**
+ * @group comment
+ * @covers ::_wp_batch_update_comment_type
+ */
+class Tests_Batch_Update_Comment_Type extends WP_UnitTestCase {
+
+	/**
+	 * @ticket 49236
+	 */
+	public function test__wp_batch_update_comment_type() {
+		global $wpdb;
+
+		$comment_ids     = self::factory()->comment->create_many( 3 );
+		$comment_id_list = implode( ',', $comment_ids );
+
+		$wpdb->query(
+			"UPDATE {$wpdb->comments}
+			SET comment_type = ''
+			WHERE comment_type = 'comment'
+			AND comment_ID in ({$comment_id_list})" // phpcs:ignore WordPress.DB.PreparedSQL.InterpolatedNotPrepared
+		);
+
+		clean_comment_cache( $comment_ids );
+
+		foreach ( $comment_ids as $comment_id ) {
+			$comment = get_comment( $comment_id );
+			$this->assertEmpty( $comment->comment_type );
+		}
+
+		add_filter( 'wp_update_comment_type_batch_size', array( $this, 'filter_comment_type_batch_size' ) );
+		add_filter( 'schedule_event', '__return_null' );
+
+		_wp_batch_update_comment_type();
+
+		remove_filter( 'wp_update_comment_type_batch_size', array( $this, 'filter_comment_type_batch_size' ) );
+		remove_filter( 'schedule_event', '__return_null' );
+
+		foreach ( $comment_ids as $comment_id ) {
+			$updated_comment = get_comment( $comment_id );
+			$this->assertSame( 'comment', $updated_comment->comment_type );
+		}
+	}
+
+	public function filter_comment_type_batch_size() {
+		return 3;
+	}
+}
diff --git a/tests/comment/wpBlacklistCheck.php b/tests/comment/wpBlacklistCheck.php
index 6b708d651f..86a449825d 100644
--- a/tests/comment/wpBlacklistCheck.php
+++ b/tests/comment/wpBlacklistCheck.php
@@ -3,9 +3,9 @@
 /**
  * @group comment
  */
-class Tests_WP_Blacklist_Check extends WP_UnitTestCase {
+class Tests_WP_Blocklist_Check extends WP_UnitTestCase {
 
-	public function test_should_return_true_when_content_matches_blacklist_keys() {
+	public function test_should_return_true_when_content_matches_disallowed_keys() {
 		$author       = 'Sting';
 		$author_email = 'sting@example.com';
 		$author_url   = 'http://example.com';
@@ -13,9 +13,9 @@ class Tests_WP_Blacklist_Check extends WP_UnitTestCase {
 		$author_ip    = '192.168.0.1';
 		$user_agent   = '';
 
-		update_option( 'blacklist_keys', "well\nfoo" );
+		update_option( 'disallowed_keys', "well\nfoo" );
 
-		$result = wp_blacklist_check( $author, $author_email, $author_url, $comment, $author_ip, $user_agent );
+		$result = wp_check_comment_disallowed_list( $author, $author_email, $author_url, $comment, $author_ip, $user_agent );
 
 		$this->assertTrue( $result );
 	}
@@ -23,7 +23,7 @@ class Tests_WP_Blacklist_Check extends WP_UnitTestCase {
 	/**
 	 * @ticket 37208
 	 */
-	public function test_should_return_true_when_content_with_html_matches_blacklist_keys() {
+	public function test_should_return_true_when_content_with_html_matches_disallowed_keys() {
 		$author       = 'Sting';
 		$author_email = 'sting@example.com';
 		$author_url   = 'http://example.com';
@@ -31,14 +31,14 @@ class Tests_WP_Blacklist_Check extends WP_UnitTestCase {
 		$author_ip    = '192.168.0.1';
 		$user_agent   = '';
 
-		update_option( 'blacklist_keys', "halfway\nfoo" );
+		update_option( 'disallowed_keys', "halfway\nfoo" );
 
-		$result = wp_blacklist_check( $author, $author_email, $author_url, $comment, $author_ip, $user_agent );
+		$result = wp_check_comment_disallowed_list( $author, $author_email, $author_url, $comment, $author_ip, $user_agent );
 
 		$this->assertTrue( $result );
 	}
 
-	public function test_should_return_true_when_author_matches_blacklist_keys() {
+	public function test_should_return_true_when_author_matches_disallowed_keys() {
 		$author       = 'Sideshow Mel';
 		$author_email = 'mel@example.com';
 		$author_url   = 'http://example.com';
@@ -46,14 +46,14 @@ class Tests_WP_Blacklist_Check extends WP_UnitTestCase {
 		$author_ip    = '192.168.0.1';
 		$user_agent   = '';
 
-		update_option( 'blacklist_keys', "sideshow\nfoo" );
+		update_option( 'disallowed_keys', "sideshow\nfoo" );
 
-		$result = wp_blacklist_check( $author, $author_email, $author_url, $comment, $author_ip, $user_agent );
+		$result = wp_check_comment_disallowed_list( $author, $author_email, $author_url, $comment, $author_ip, $user_agent );
 
 		$this->assertTrue( $result );
 	}
 
-	public function test_should_return_true_when_url_matches_blacklist_keys() {
+	public function test_should_return_true_when_url_matches_disallowed_keys() {
 		$author       = 'Rainier Wolfcastle';
 		$author_email = 'rainier@wolfcastle.com';
 		$author_url   = 'http://example.com';
@@ -61,9 +61,9 @@ class Tests_WP_Blacklist_Check extends WP_UnitTestCase {
 		$author_ip    = '192.168.0.1';
 		$user_agent   = '';
 
-		update_option( 'blacklist_keys', "example\nfoo" );
+		update_option( 'disallowed_keys', "example\nfoo" );
 
-		$result = wp_blacklist_check( $author, $author_email, $author_url, $comment, $author_ip, $user_agent );
+		$result = wp_check_comment_disallowed_list( $author, $author_email, $author_url, $comment, $author_ip, $user_agent );
 
 		$this->assertTrue( $result );
 	}
@@ -71,7 +71,7 @@ class Tests_WP_Blacklist_Check extends WP_UnitTestCase {
 	/**
 	 * @ticket 37208
 	 */
-	public function test_should_return_true_when_link_matches_blacklist_keys() {
+	public function test_should_return_true_when_link_matches_disallowed_keys() {
 		$author       = 'Rainier Wolfcastle';
 		$author_email = 'rainier@wolfcastle.com';
 		$author_url   = 'http://example.com';
@@ -79,9 +79,9 @@ class Tests_WP_Blacklist_Check extends WP_UnitTestCase {
 		$author_ip    = '192.168.0.1';
 		$user_agent   = '';
 
-		update_option( 'blacklist_keys', '/spam/' );
+		update_option( 'disallowed_keys', '/spam/' );
 
-		$result = wp_blacklist_check( $author, $author_email, $author_url, $comment, $author_ip, $user_agent );
+		$result = wp_check_comment_disallowed_list( $author, $author_email, $author_url, $comment, $author_ip, $user_agent );
 
 		$this->assertTrue( $result );
 	}
@@ -94,9 +94,9 @@ class Tests_WP_Blacklist_Check extends WP_UnitTestCase {
 		$author_ip    = '192.168.0.1';
 		$user_agent   = '';
 
-		update_option( 'blacklist_keys', "sideshow\nfoobar" );
+		update_option( 'disallowed_keys', "sideshow\nfoobar" );
 
-		$result = wp_blacklist_check( $author, $author_email, $author_url, $comment, $author_ip, $user_agent );
+		$result = wp_check_comment_disallowed_list( $author, $author_email, $author_url, $comment, $author_ip, $user_agent );
 
 		$this->assertFalse( $result );
 	}
diff --git a/tests/comment/wpCountComments.php b/tests/comment/wpCountComments.php
index f0e8f458be..5586889ba2 100644
--- a/tests/comment/wpCountComments.php
+++ b/tests/comment/wpCountComments.php
@@ -5,13 +5,13 @@ class Tests_WP_Count_Comments extends WP_UnitTestCase {
 	public function test_wp_count_comments() {
 		$count = wp_count_comments();
 
-		$this->assertEquals( 0, $count->approved );
-		$this->assertEquals( 0, $count->moderated );
-		$this->assertEquals( 0, $count->spam );
-		$this->assertEquals( 0, $count->trash );
-		$this->assertEquals( 0, $count->{'post-trashed'} );
-		$this->assertEquals( 0, $count->total_comments );
-		$this->assertEquals( 0, $count->all );
+		$this->assertSame( 0, $count->approved );
+		$this->assertSame( 0, $count->moderated );
+		$this->assertSame( 0, $count->spam );
+		$this->assertSame( 0, $count->trash );
+		$this->assertSame( 0, $count->{'post-trashed'} );
+		$this->assertSame( 0, $count->total_comments );
+		$this->assertSame( 0, $count->all );
 	}
 
 	public function test_wp_count_comments_approved() {
@@ -23,13 +23,13 @@ class Tests_WP_Count_Comments extends WP_UnitTestCase {
 
 		$count = wp_count_comments();
 
-		$this->assertEquals( 1, $count->approved );
-		$this->assertEquals( 0, $count->moderated );
-		$this->assertEquals( 0, $count->spam );
-		$this->assertEquals( 0, $count->trash );
-		$this->assertEquals( 0, $count->{'post-trashed'} );
-		$this->assertEquals( 1, $count->total_comments );
-		$this->assertEquals( 1, $count->all );
+		$this->assertSame( 1, $count->approved );
+		$this->assertSame( 0, $count->moderated );
+		$this->assertSame( 0, $count->spam );
+		$this->assertSame( 0, $count->trash );
+		$this->assertSame( 0, $count->{'post-trashed'} );
+		$this->assertSame( 1, $count->total_comments );
+		$this->assertSame( 1, $count->all );
 	}
 
 	public function test_wp_count_comments_awaiting() {
@@ -41,13 +41,13 @@ class Tests_WP_Count_Comments extends WP_UnitTestCase {
 
 		$count = wp_count_comments();
 
-		$this->assertEquals( 0, $count->approved );
-		$this->assertEquals( 1, $count->moderated );
-		$this->assertEquals( 0, $count->spam );
-		$this->assertEquals( 0, $count->trash );
-		$this->assertEquals( 0, $count->{'post-trashed'} );
-		$this->assertEquals( 1, $count->total_comments );
-		$this->assertEquals( 1, $count->all );
+		$this->assertSame( 0, $count->approved );
+		$this->assertSame( 1, $count->moderated );
+		$this->assertSame( 0, $count->spam );
+		$this->assertSame( 0, $count->trash );
+		$this->assertSame( 0, $count->{'post-trashed'} );
+		$this->assertSame( 1, $count->total_comments );
+		$this->assertSame( 1, $count->all );
 	}
 
 	public function test_wp_count_comments_spam() {
@@ -59,13 +59,13 @@ class Tests_WP_Count_Comments extends WP_UnitTestCase {
 
 		$count = wp_count_comments();
 
-		$this->assertEquals( 0, $count->approved );
-		$this->assertEquals( 0, $count->moderated );
-		$this->assertEquals( 1, $count->spam );
-		$this->assertEquals( 0, $count->trash );
-		$this->assertEquals( 0, $count->{'post-trashed'} );
-		$this->assertEquals( 1, $count->total_comments );
-		$this->assertEquals( 0, $count->all );
+		$this->assertSame( 0, $count->approved );
+		$this->assertSame( 0, $count->moderated );
+		$this->assertSame( 1, $count->spam );
+		$this->assertSame( 0, $count->trash );
+		$this->assertSame( 0, $count->{'post-trashed'} );
+		$this->assertSame( 1, $count->total_comments );
+		$this->assertSame( 0, $count->all );
 	}
 
 	public function test_wp_count_comments_trash() {
@@ -77,13 +77,13 @@ class Tests_WP_Count_Comments extends WP_UnitTestCase {
 
 		$count = wp_count_comments();
 
-		$this->assertEquals( 0, $count->approved );
-		$this->assertEquals( 0, $count->moderated );
-		$this->assertEquals( 0, $count->spam );
-		$this->assertEquals( 1, $count->trash );
-		$this->assertEquals( 0, $count->{'post-trashed'} );
-		$this->assertEquals( 0, $count->total_comments );
-		$this->assertEquals( 0, $count->all );
+		$this->assertSame( 0, $count->approved );
+		$this->assertSame( 0, $count->moderated );
+		$this->assertSame( 0, $count->spam );
+		$this->assertSame( 1, $count->trash );
+		$this->assertSame( 0, $count->{'post-trashed'} );
+		$this->assertSame( 0, $count->total_comments );
+		$this->assertSame( 0, $count->all );
 	}
 
 	public function test_wp_count_comments_post_trashed() {
@@ -95,13 +95,13 @@ class Tests_WP_Count_Comments extends WP_UnitTestCase {
 
 		$count = wp_count_comments();
 
-		$this->assertEquals( 0, $count->approved );
-		$this->assertEquals( 0, $count->moderated );
-		$this->assertEquals( 0, $count->spam );
-		$this->assertEquals( 0, $count->trash );
-		$this->assertEquals( 1, $count->{'post-trashed'} );
-		$this->assertEquals( 0, $count->total_comments );
-		$this->assertEquals( 0, $count->all );
+		$this->assertSame( 0, $count->approved );
+		$this->assertSame( 0, $count->moderated );
+		$this->assertSame( 0, $count->spam );
+		$this->assertSame( 0, $count->trash );
+		$this->assertSame( 1, $count->{'post-trashed'} );
+		$this->assertSame( 0, $count->total_comments );
+		$this->assertSame( 0, $count->all );
 	}
 
 	public function test_wp_count_comments_cache() {
@@ -119,88 +119,88 @@ class Tests_WP_Count_Comments extends WP_UnitTestCase {
 
 		$count1 = wp_count_comments( $post_id );
 
-		$this->assertEquals( 1, $count1->approved );
-		$this->assertEquals( 0, $count1->moderated );
-		$this->assertEquals( 0, $count1->spam );
-		$this->assertEquals( 0, $count1->trash );
-		$this->assertEquals( 0, $count1->{'post-trashed'} );
-		$this->assertEquals( 1, $count1->total_comments );
-		$this->assertEquals( 1, $count1->all );
+		$this->assertSame( 1, $count1->approved );
+		$this->assertSame( 0, $count1->moderated );
+		$this->assertSame( 0, $count1->spam );
+		$this->assertSame( 0, $count1->trash );
+		$this->assertSame( 0, $count1->{'post-trashed'} );
+		$this->assertSame( 1, $count1->total_comments );
+		$this->assertSame( 1, $count1->all );
 
 		$all_count1 = wp_count_comments();
 
-		$this->assertEquals( 1, $all_count1->approved );
-		$this->assertEquals( 0, $all_count1->moderated );
-		$this->assertEquals( 0, $all_count1->spam );
-		$this->assertEquals( 0, $all_count1->trash );
-		$this->assertEquals( 0, $all_count1->{'post-trashed'} );
-		$this->assertEquals( 1, $all_count1->total_comments );
-		$this->assertEquals( 1, $all_count1->all );
+		$this->assertSame( 1, $all_count1->approved );
+		$this->assertSame( 0, $all_count1->moderated );
+		$this->assertSame( 0, $all_count1->spam );
+		$this->assertSame( 0, $all_count1->trash );
+		$this->assertSame( 0, $all_count1->{'post-trashed'} );
+		$this->assertSame( 1, $all_count1->total_comments );
+		$this->assertSame( 1, $all_count1->all );
 
 		wp_spam_comment( $comment_id );
 
 		$count2 = wp_count_comments( $post_id );
 
-		$this->assertEquals( 0, $count2->approved );
-		$this->assertEquals( 0, $count2->moderated );
-		$this->assertEquals( 1, $count2->spam );
-		$this->assertEquals( 0, $count2->trash );
-		$this->assertEquals( 0, $count2->{'post-trashed'} );
-		$this->assertEquals( 1, $count2->total_comments );
-		$this->assertEquals( 0, $count2->all );
+		$this->assertSame( 0, $count2->approved );
+		$this->assertSame( 0, $count2->moderated );
+		$this->assertSame( 1, $count2->spam );
+		$this->assertSame( 0, $count2->trash );
+		$this->assertSame( 0, $count2->{'post-trashed'} );
+		$this->assertSame( 1, $count2->total_comments );
+		$this->assertSame( 0, $count2->all );
 
 		$all_count2 = wp_count_comments();
 
-		$this->assertEquals( 0, $all_count2->approved );
-		$this->assertEquals( 0, $all_count2->moderated );
-		$this->assertEquals( 1, $all_count2->spam );
-		$this->assertEquals( 0, $all_count2->trash );
-		$this->assertEquals( 0, $all_count2->{'post-trashed'} );
-		$this->assertEquals( 1, $all_count2->total_comments );
-		$this->assertEquals( 0, $all_count2->all );
+		$this->assertSame( 0, $all_count2->approved );
+		$this->assertSame( 0, $all_count2->moderated );
+		$this->assertSame( 1, $all_count2->spam );
+		$this->assertSame( 0, $all_count2->trash );
+		$this->assertSame( 0, $all_count2->{'post-trashed'} );
+		$this->assertSame( 1, $all_count2->total_comments );
+		$this->assertSame( 0, $all_count2->all );
 
 		wp_trash_comment( $comment_id );
 
 		$count3 = wp_count_comments( $post_id );
 
-		$this->assertEquals( 0, $count3->approved );
-		$this->assertEquals( 0, $count3->moderated );
-		$this->assertEquals( 0, $count3->spam );
-		$this->assertEquals( 1, $count3->trash );
-		$this->assertEquals( 0, $count3->{'post-trashed'} );
-		$this->assertEquals( 0, $count3->total_comments );
-		$this->assertEquals( 0, $count3->all );
+		$this->assertSame( 0, $count3->approved );
+		$this->assertSame( 0, $count3->moderated );
+		$this->assertSame( 0, $count3->spam );
+		$this->assertSame( 1, $count3->trash );
+		$this->assertSame( 0, $count3->{'post-trashed'} );
+		$this->assertSame( 0, $count3->total_comments );
+		$this->assertSame( 0, $count3->all );
 
 		$all_count3 = wp_count_comments();
 
-		$this->assertEquals( 0, $all_count3->approved );
-		$this->assertEquals( 0, $all_count3->moderated );
-		$this->assertEquals( 0, $all_count3->spam );
-		$this->assertEquals( 1, $all_count3->trash );
-		$this->assertEquals( 0, $all_count3->{'post-trashed'} );
-		$this->assertEquals( 0, $all_count3->total_comments );
-		$this->assertEquals( 0, $all_count3->all );
+		$this->assertSame( 0, $all_count3->approved );
+		$this->assertSame( 0, $all_count3->moderated );
+		$this->assertSame( 0, $all_count3->spam );
+		$this->assertSame( 1, $all_count3->trash );
+		$this->assertSame( 0, $all_count3->{'post-trashed'} );
+		$this->assertSame( 0, $all_count3->total_comments );
+		$this->assertSame( 0, $all_count3->all );
 
 		wp_untrash_comment( $comment_id );
 
 		$count4 = wp_count_comments( $post_id );
 
-		$this->assertEquals( 0, $count4->approved );
-		$this->assertEquals( 0, $count4->moderated );
-		$this->assertEquals( 1, $count4->spam );
-		$this->assertEquals( 0, $count4->trash );
-		$this->assertEquals( 0, $count4->{'post-trashed'} );
-		$this->assertEquals( 1, $count4->total_comments );
-		$this->assertEquals( 0, $count4->all );
+		$this->assertSame( 0, $count4->approved );
+		$this->assertSame( 0, $count4->moderated );
+		$this->assertSame( 1, $count4->spam );
+		$this->assertSame( 0, $count4->trash );
+		$this->assertSame( 0, $count4->{'post-trashed'} );
+		$this->assertSame( 1, $count4->total_comments );
+		$this->assertSame( 0, $count4->all );
 
 		$all_count4 = wp_count_comments();
 
-		$this->assertEquals( 0, $all_count4->approved );
-		$this->assertEquals( 0, $all_count4->moderated );
-		$this->assertEquals( 1, $all_count4->spam );
-		$this->assertEquals( 0, $all_count4->trash );
-		$this->assertEquals( 0, $all_count4->{'post-trashed'} );
-		$this->assertEquals( 1, $all_count4->total_comments );
-		$this->assertEquals( 0, $all_count4->all );
+		$this->assertSame( 0, $all_count4->approved );
+		$this->assertSame( 0, $all_count4->moderated );
+		$this->assertSame( 1, $all_count4->spam );
+		$this->assertSame( 0, $all_count4->trash );
+		$this->assertSame( 0, $all_count4->{'post-trashed'} );
+		$this->assertSame( 1, $all_count4->total_comments );
+		$this->assertSame( 0, $all_count4->all );
 	}
 }
diff --git a/tests/comment/wpListComments.php b/tests/comment/wpListComments.php
index 9fb94467d0..238c6b796e 100644
--- a/tests/comment/wpListComments.php
+++ b/tests/comment/wpListComments.php
@@ -27,7 +27,7 @@ class Tests_Comment_WpListComments extends WP_UnitTestCase {
 
 		$this->go_to( get_permalink( $p ) );
 
-		// comments_template() populates $wp_query->comments
+		// comments_template() populates $wp_query->comments.
 		get_echo( 'comments_template' );
 
 		$found = wp_list_comments(
@@ -65,7 +65,7 @@ class Tests_Comment_WpListComments extends WP_UnitTestCase {
 
 		$this->go_to( get_permalink( $p ) );
 
-		// comments_template() populates $wp_query->comments
+		// comments_template() populates $wp_query->comments.
 		get_echo( 'comments_template' );
 
 		$found = wp_list_comments(
@@ -103,7 +103,7 @@ class Tests_Comment_WpListComments extends WP_UnitTestCase {
 
 		$this->go_to( get_permalink( $p ) );
 
-		// comments_template() populates $wp_query->comments
+		// comments_template() populates $wp_query->comments.
 		get_echo( 'comments_template' );
 
 		$found1 = wp_list_comments(
@@ -195,7 +195,7 @@ class Tests_Comment_WpListComments extends WP_UnitTestCase {
 
 		$this->go_to( get_permalink( $p ) );
 
-		// comments_template() populates $wp_query->comments
+		// comments_template() populates $wp_query->comments.
 		get_echo( 'comments_template' );
 
 		$found = wp_list_comments(
@@ -243,7 +243,7 @@ class Tests_Comment_WpListComments extends WP_UnitTestCase {
 
 		$this->go_to( get_permalink( $p ) );
 
-		// comments_template() populates $wp_query->comments
+		// comments_template() populates $wp_query->comments.
 		get_echo( 'comments_template' );
 
 		$found = wp_list_comments(
diff --git a/tests/compat.php b/tests/compat.php
index a8b14ee42c..25d174f3ca 100644
--- a/tests/compat.php
+++ b/tests/compat.php
@@ -7,7 +7,7 @@
 class Tests_Compat extends WP_UnitTestCase {
 	function utf8_string_lengths() {
 		return array(
-			//                     string, character_length, byte_length
+			// String, character_length, byte_length.
 			array( '–±–∞–±–∞', 4, 8 ),
 			array( '–±–∞–±', 3, 6 ),
 			array( 'I am your –±', 11, 12 ),
@@ -21,7 +21,7 @@ class Tests_Compat extends WP_UnitTestCase {
 
 	function utf8_substrings() {
 		return array(
-			//               string, start, length, character_substring,   byte_substring
+			// String, start, length, character_substring, byte_substring.
 			array( '–±–∞–±–∞', 0, 3, '–±–∞–±', "–±\xD0" ),
 			array( '–±–∞–±–∞', 0, -1, '–±–∞–±', "–±–∞–±\xD0" ),
 			array( '–±–∞–±–∞', 1, null, '–∞–±–∞', "\xB1–∞–±–∞" ),
@@ -36,7 +36,7 @@ class Tests_Compat extends WP_UnitTestCase {
 	 * @dataProvider utf8_string_lengths
 	 */
 	function test_mb_strlen( $string, $expected_character_length ) {
-		$this->assertEquals( $expected_character_length, _mb_strlen( $string, 'UTF-8' ) );
+		$this->assertSame( $expected_character_length, _mb_strlen( $string, 'UTF-8' ) );
 	}
 
 	/**
@@ -44,7 +44,7 @@ class Tests_Compat extends WP_UnitTestCase {
 	 */
 	function test_mb_strlen_via_regex( $string, $expected_character_length ) {
 		_wp_can_use_pcre_u( false );
-		$this->assertEquals( $expected_character_length, _mb_strlen( $string, 'UTF-8' ) );
+		$this->assertSame( $expected_character_length, _mb_strlen( $string, 'UTF-8' ) );
 		_wp_can_use_pcre_u( 'reset' );
 	}
 
@@ -52,14 +52,14 @@ class Tests_Compat extends WP_UnitTestCase {
 	 * @dataProvider utf8_string_lengths
 	 */
 	function test_8bit_mb_strlen( $string, $expected_character_length, $expected_byte_length ) {
-		$this->assertEquals( $expected_byte_length, _mb_strlen( $string, '8bit' ) );
+		$this->assertSame( $expected_byte_length, _mb_strlen( $string, '8bit' ) );
 	}
 
 	/**
 	 * @dataProvider utf8_substrings
 	 */
 	function test_mb_substr( $string, $start, $length, $expected_character_substring ) {
-		$this->assertEquals( $expected_character_substring, _mb_substr( $string, $start, $length, 'UTF-8' ) );
+		$this->assertSame( $expected_character_substring, _mb_substr( $string, $start, $length, 'UTF-8' ) );
 	}
 
 	/**
@@ -67,7 +67,7 @@ class Tests_Compat extends WP_UnitTestCase {
 	 */
 	function test_mb_substr_via_regex( $string, $start, $length, $expected_character_substring ) {
 		_wp_can_use_pcre_u( false );
-		$this->assertEquals( $expected_character_substring, _mb_substr( $string, $start, $length, 'UTF-8' ) );
+		$this->assertSame( $expected_character_substring, _mb_substr( $string, $start, $length, 'UTF-8' ) );
 		_wp_can_use_pcre_u( 'reset' );
 	}
 
@@ -75,7 +75,7 @@ class Tests_Compat extends WP_UnitTestCase {
 	 * @dataProvider utf8_substrings
 	 */
 	function test_8bit_mb_substr( $string, $start, $length, $expected_character_substring, $expected_byte_substring ) {
-		$this->assertEquals( $expected_byte_substring, _mb_substr( $string, $start, $length, '8bit' ) );
+		$this->assertSame( $expected_byte_substring, _mb_substr( $string, $start, $length, '8bit' ) );
 	}
 
 	function test_mb_substr_phpcore() {
@@ -83,12 +83,12 @@ class Tests_Compat extends WP_UnitTestCase {
 		$string_ascii = 'ABCDEF';
 		$string_mb    = base64_decode( '5pel5pys6Kqe44OG44Kt44K544OI44Gn44GZ44CCMDEyMzTvvJXvvJbvvJfvvJjvvJnjgII=' );
 
-		$this->assertEquals( 'DEF', _mb_substr( $string_ascii, 3 ) );
-		$this->assertEquals( 'DEF', _mb_substr( $string_ascii, 3, 5, 'ISO-8859-1' ) );
+		$this->assertSame( 'DEF', _mb_substr( $string_ascii, 3 ) );
+		$this->assertSame( 'DEF', _mb_substr( $string_ascii, 3, 5, 'ISO-8859-1' ) );
 
-		// specific latin-1 as that is the default the core php test opporates under
-		$this->assertEquals( 'peacrOiqng==', base64_encode( _mb_substr( $string_mb, 2, 7, 'latin-1' ) ) );
-		$this->assertEquals( '6Kqe44OG44Kt44K544OI44Gn44GZ', base64_encode( _mb_substr( $string_mb, 2, 7, 'utf-8' ) ) );
+		// Specific latin-1 as that is the default the core PHP test operates under.
+		$this->assertSame( 'peacrOiqng==', base64_encode( _mb_substr( $string_mb, 2, 7, 'latin-1' ) ) );
+		$this->assertSame( '6Kqe44OG44Kt44K544OI44Gn44GZ', base64_encode( _mb_substr( $string_mb, 2, 7, 'utf-8' ) ) );
 
 		/* https://github.com/php/php-src/blob/php-5.6.8/ext/mbstring/tests/mb_substr_variation1.phpt */
 		$start     = 0;
@@ -103,28 +103,28 @@ EOT;
 			1,
 			12345,
 			-2345,
-			// float data
+			// Float data.
 			10.5,
 			-10.5,
 			12.3456789000e10,
 			12.3456789000E-10,
 			.5,
-			// null data
+			// Null data.
 			null,
 			null,
-			// boolean data
+			// Boolean data.
 			true,
 			false,
 			true,
 			false,
-			// empty data
+			// Empty data.
 			'',
 			'',
-			// string data
+			// String data.
 			'string',
 			'string',
 			$heredoc,
-			// object data
+			// Object data.
 			new ClassA(),
 			// phpcs:ignore WordPress.PHP.NoSilencedErrors.Discouraged -- intentionally undefined data
 			@$undefined_var,
@@ -158,36 +158,36 @@ EOT;
 		);
 		$iterator = 0;
 		foreach ( $inputs as $input ) {
-			$this->assertEquals( $outputs[ $iterator ], _mb_substr( $input, $start, $length ) );
+			$this->assertSame( $outputs[ $iterator ], _mb_substr( $input, $start, $length ) );
 			$iterator++;
 		}
 
 	}
 
 	function test_hash_hmac_simple() {
-		$this->assertEquals( '140d1cb79fa12e2a31f32d35ad0a2723', _hash_hmac( 'md5', 'simple', 'key' ) );
-		$this->assertEquals( '993003b95758e0ac2eba451a4c5877eb1bb7b92a', _hash_hmac( 'sha1', 'simple', 'key' ) );
+		$this->assertSame( '140d1cb79fa12e2a31f32d35ad0a2723', _hash_hmac( 'md5', 'simple', 'key' ) );
+		$this->assertSame( '993003b95758e0ac2eba451a4c5877eb1bb7b92a', _hash_hmac( 'sha1', 'simple', 'key' ) );
 	}
 
 	function test_hash_hmac_padding() {
-		$this->assertEquals( '3c1399103807cf12ec38228614416a8c', _hash_hmac( 'md5', 'simple', '65 character key 65 character key 65 character key 65 character k' ) );
-		$this->assertEquals( '4428826d20003e309d6c2a6515891370daf184ea', _hash_hmac( 'sha1', 'simple', '65 character key 65 character key 65 character key 65 character k' ) );
+		$this->assertSame( '3c1399103807cf12ec38228614416a8c', _hash_hmac( 'md5', 'simple', '65 character key 65 character key 65 character key 65 character k' ) );
+		$this->assertSame( '4428826d20003e309d6c2a6515891370daf184ea', _hash_hmac( 'sha1', 'simple', '65 character key 65 character key 65 character key 65 character k' ) );
 	}
 
 	function test_hash_hmac_output() {
-		$this->assertEquals( array( 1 => '140d1cb79fa12e2a31f32d35ad0a2723' ), unpack( 'H32', _hash_hmac( 'md5', 'simple', 'key', true ) ) );
-		$this->assertEquals( array( 1 => '993003b95758e0ac2eba451a4c5877eb1bb7b92a' ), unpack( 'H40', _hash_hmac( 'sha1', 'simple', 'key', true ) ) );
+		$this->assertSame( array( 1 => '140d1cb79fa12e2a31f32d35ad0a2723' ), unpack( 'H32', _hash_hmac( 'md5', 'simple', 'key', true ) ) );
+		$this->assertSame( array( 1 => '993003b95758e0ac2eba451a4c5877eb1bb7b92a' ), unpack( 'H40', _hash_hmac( 'sha1', 'simple', 'key', true ) ) );
 	}
 
 	/**
 	 * @expectedException PHPUnit_Framework_Error_Deprecated
 	 */
 	function test_json_encode_decode() {
-		require_once( ABSPATH . WPINC . '/class-json.php' );
+		require_once ABSPATH . WPINC . '/class-json.php';
 		$json = new Services_JSON();
 		// Super basic test to verify Services_JSON is intact and working.
-		$this->assertEquals( '["foo"]', $json->encodeUnsafe( array( 'foo' ) ) );
-		$this->assertEquals( array( 'foo' ), $json->decode( '["foo"]' ) );
+		$this->assertSame( '["foo"]', $json->encodeUnsafe( array( 'foo' ) ) );
+		$this->assertSame( array( 'foo' ), $json->decode( '["foo"]' ) );
 	}
 
 	/**
diff --git a/tests/cron.php b/tests/cron.php
index 3503b1c0d7..e7f6f30f3c 100644
--- a/tests/cron.php
+++ b/tests/cron.php
@@ -18,72 +18,72 @@ class Tests_Cron extends WP_UnitTestCase {
 
 	function setUp() {
 		parent::setUp();
-		// make sure the schedule is clear
+		// Make sure the schedule is clear.
 		_set_cron_array( array() );
 		$this->preflight_cron_array = array();
 		$this->plus_thirty_minutes  = strtotime( '+30 minutes' );
 	}
 
 	function tearDown() {
-		// make sure the schedule is clear
+		// Make sure the schedule is clear.
 		_set_cron_array( array() );
 		parent::tearDown();
 	}
 
 	function test_wp_get_schedule_empty() {
-		// nothing scheduled
+		// Nothing scheduled.
 		$hook = __FUNCTION__;
 		$this->assertFalse( wp_get_schedule( $hook ) );
 	}
 
 	function test_schedule_event_single() {
-		// schedule an event and make sure it's returned by wp_next_scheduled
+		// Schedule an event and make sure it's returned by wp_next_scheduled().
 		$hook      = __FUNCTION__;
 		$timestamp = strtotime( '+1 hour' );
 
 		$scheduled = wp_schedule_single_event( $timestamp, $hook );
 		$this->assertTrue( $scheduled );
-		$this->assertEquals( $timestamp, wp_next_scheduled( $hook ) );
+		$this->assertSame( $timestamp, wp_next_scheduled( $hook ) );
 
-		// it's a non recurring event
-		$this->assertEquals( '', wp_get_schedule( $hook ) );
+		// It's a non-recurring event.
+		$this->assertFalse( wp_get_schedule( $hook ) );
 
 	}
 
 	function test_schedule_event_single_args() {
-		// schedule an event with arguments and make sure it's returned by wp_next_scheduled
+		// Schedule an event with arguments and make sure it's returned by wp_next_scheduled().
 		$hook      = 'event';
 		$timestamp = strtotime( '+1 hour' );
 		$args      = array( 'foo' );
 
 		$scheduled = wp_schedule_single_event( $timestamp, $hook, $args );
 		$this->assertTrue( $scheduled );
-		// this returns the timestamp only if we provide matching args
-		$this->assertEquals( $timestamp, wp_next_scheduled( $hook, $args ) );
-		// these don't match so return nothing
-		$this->assertEquals( false, wp_next_scheduled( $hook ) );
-		$this->assertEquals( false, wp_next_scheduled( $hook, array( 'bar' ) ) );
-
-		// it's a non recurring event
-		$this->assertEquals( '', wp_get_schedule( $hook, $args ) );
+		// This returns the timestamp only if we provide matching args.
+		$this->assertSame( $timestamp, wp_next_scheduled( $hook, $args ) );
+		// These don't match so return nothing.
+		$this->assertFalse( wp_next_scheduled( $hook ) );
+		$this->assertFalse( wp_next_scheduled( $hook, array( 'bar' ) ) );
+
+		// It's a non-recurring event.
+		$this->assertFalse( wp_get_schedule( $hook, $args ) );
 	}
 
 	function test_schedule_event() {
-		// schedule an event and make sure it's returned by wp_next_scheduled
+		// Schedule an event and make sure it's returned by wp_next_scheduled().
 		$hook      = __FUNCTION__;
 		$recur     = 'hourly';
 		$timestamp = strtotime( '+1 hour' );
 
 		$scheduled = wp_schedule_event( $timestamp, $recur, $hook );
 		$this->assertTrue( $scheduled );
-		// it's scheduled for the right time
-		$this->assertEquals( $timestamp, wp_next_scheduled( $hook ) );
-		// it's a recurring event
-		$this->assertEquals( $recur, wp_get_schedule( $hook ) );
+		// It's scheduled for the right time.
+		$this->assertSame( $timestamp, wp_next_scheduled( $hook ) );
+		// It's a recurring event.
+		$this->assertSame( $recur, wp_get_schedule( $hook ) );
 	}
 
 	function test_schedule_event_args() {
-		// schedule an event and make sure it's returned by wp_next_scheduled
+		// Schedule an event and make sure it's returned by wp_next_scheduled().
 		$hook      = 'event';
 		$timestamp = strtotime( '+1 hour' );
 		$recur     = 'hourly';
@@ -91,53 +91,53 @@ class Tests_Cron extends WP_UnitTestCase {
 
 		$scheduled = wp_schedule_event( $timestamp, 'hourly', $hook, $args );
 		$this->assertTrue( $scheduled );
-		// this returns the timestamp only if we provide matching args
-		$this->assertEquals( $timestamp, wp_next_scheduled( $hook, $args ) );
-		// these don't match so return nothing
-		$this->assertEquals( false, wp_next_scheduled( $hook ) );
-		$this->assertEquals( false, wp_next_scheduled( $hook, array( 'bar' ) ) );
+		// This returns the timestamp only if we provide matching args.
+		$this->assertSame( $timestamp, wp_next_scheduled( $hook, $args ) );
+		// These don't match so return nothing.
+		$this->assertFalse( wp_next_scheduled( $hook ) );
+		$this->assertFalse( wp_next_scheduled( $hook, array( 'bar' ) ) );
 
-		$this->assertEquals( $recur, wp_get_schedule( $hook, $args ) );
+		$this->assertSame( $recur, wp_get_schedule( $hook, $args ) );
 
 	}
 
 	function test_unschedule_event() {
-		// schedule an event and make sure it's returned by wp_next_scheduled
+		// Schedule an event and make sure it's returned by wp_next_scheduled().
 		$hook      = __FUNCTION__;
 		$timestamp = strtotime( '+1 hour' );
 
 		wp_schedule_single_event( $timestamp, $hook );
-		$this->assertEquals( $timestamp, wp_next_scheduled( $hook ) );
+		$this->assertSame( $timestamp, wp_next_scheduled( $hook ) );
 
-		// now unschedule it and make sure it's gone
+		// Now unschedule it and make sure it's gone.
 		$unscheduled = wp_unschedule_event( $timestamp, $hook );
 		$this->assertTrue( $unscheduled );
-		$this->assertEquals( false, wp_next_scheduled( $hook ) );
+		$this->assertFalse( wp_next_scheduled( $hook ) );
 	}
 
 	function test_clear_schedule() {
 		$hook = __FUNCTION__;
 		$args = array( 'arg1' );
 
-		// schedule several events with and without arguments
+		// Schedule several events with and without arguments.
 		wp_schedule_single_event( strtotime( '+1 hour' ), $hook );
 		wp_schedule_single_event( strtotime( '+2 hour' ), $hook );
 		wp_schedule_single_event( strtotime( '+3 hour' ), $hook, $args );
 		wp_schedule_single_event( strtotime( '+4 hour' ), $hook, $args );
 
-		// make sure they're returned by wp_next_scheduled()
+		// Make sure they're returned by wp_next_scheduled().
 		$this->assertTrue( wp_next_scheduled( $hook ) > 0 );
 		$this->assertTrue( wp_next_scheduled( $hook, $args ) > 0 );
 
-		// clear the schedule for the no args events and make sure it's gone
+		// Clear the schedule for the no args events and make sure it's gone.
 		$hook_unscheduled = wp_clear_scheduled_hook( $hook );
 		$this->assertSame( 2, $hook_unscheduled );
 		$this->assertFalse( wp_next_scheduled( $hook ) );
-		// the args events should still be there
+		// The args events should still be there.
 		$this->assertTrue( wp_next_scheduled( $hook, $args ) > 0 );
 
-		// clear the schedule for the args events and make sure they're gone too
-		// note: wp_clear_scheduled_hook() expects args passed directly, rather than as an array
+		// Clear the schedule for the args events and make sure they're gone too.
+		// Note: wp_clear_scheduled_hook() expects args passed directly, rather than as an array.
 		wp_clear_scheduled_hook( $hook, $args );
 		$this->assertFalse( wp_next_scheduled( $hook, $args ) );
 	}
@@ -149,7 +149,7 @@ class Tests_Cron extends WP_UnitTestCase {
 		wp_schedule_single_event( strtotime( '+1 hour' ), $hook, $args );
 		wp_schedule_single_event( strtotime( '+2 hour' ), $hook, $args );
 
-		// clear the schedule for no args events and ensure no events are cleared.
+		// Clear the schedule for no args events and ensure no events are cleared.
 		$hook_unscheduled = wp_clear_scheduled_hook( $hook );
 		$this->assertSame( 0, $hook_unscheduled );
 	}
@@ -158,24 +158,24 @@ class Tests_Cron extends WP_UnitTestCase {
 		$hook = __FUNCTION__;
 		$args = array( 'arg1', 'arg2' );
 
-		// schedule several events with and without arguments
+		// Schedule several events with and without arguments.
 		wp_schedule_single_event( strtotime( '+1 hour' ), $hook );
 		wp_schedule_single_event( strtotime( '+2 hour' ), $hook );
 		wp_schedule_single_event( strtotime( '+3 hour' ), $hook, $args );
 		wp_schedule_single_event( strtotime( '+4 hour' ), $hook, $args );
 
-		// make sure they're returned by wp_next_scheduled()
+		// Make sure they're returned by wp_next_scheduled().
 		$this->assertTrue( wp_next_scheduled( $hook ) > 0 );
 		$this->assertTrue( wp_next_scheduled( $hook, $args ) > 0 );
 
-		// clear the schedule for the no args events and make sure it's gone
+		// Clear the schedule for the no args events and make sure it's gone.
 		wp_clear_scheduled_hook( $hook );
 		$this->assertFalse( wp_next_scheduled( $hook ) );
-		// the args events should still be there
+		// The args events should still be there.
 		$this->assertTrue( wp_next_scheduled( $hook, $args ) > 0 );
 
-		// clear the schedule for the args events and make sure they're gone too
-		// note: wp_clear_scheduled_hook() used to expect args passed directly, rather than as an array pre WP 3.0
+		// Clear the schedule for the args events and make sure they're gone too.
+		// Note: wp_clear_scheduled_hook() used to expect args passed directly, rather than as an array pre WP 3.0.
 		wp_clear_scheduled_hook( $hook, $args );
 		$this->assertFalse( wp_next_scheduled( $hook, $args ) );
 	}
@@ -189,7 +189,7 @@ class Tests_Cron extends WP_UnitTestCase {
 		$multi_hook = __FUNCTION__ . '_multi';
 		$multi_args = array( 'arg2', 'arg3' );
 
-		// schedule several events with and without arguments
+		// Schedule several events with and without arguments.
 		wp_schedule_single_event( strtotime( '+1 hour' ), $hook );
 		wp_schedule_single_event( strtotime( '+2 hour' ), $hook );
 		wp_schedule_single_event( strtotime( '+3 hour' ), $hook, $args );
@@ -197,23 +197,23 @@ class Tests_Cron extends WP_UnitTestCase {
 		wp_schedule_single_event( strtotime( '+5 hour' ), $multi_hook, $multi_args );
 		wp_schedule_single_event( strtotime( '+6 hour' ), $multi_hook, $multi_args );
 
-		// make sure they're returned by wp_next_scheduled()
+		// Make sure they're returned by wp_next_scheduled().
 		$this->assertTrue( wp_next_scheduled( $hook ) > 0 );
 		$this->assertTrue( wp_next_scheduled( $hook, $args ) > 0 );
 
-		// clear the schedule for the no args events and make sure it's gone
+		// Clear the schedule for the no args events and make sure it's gone.
 		wp_clear_scheduled_hook( $hook );
 		$this->assertFalse( wp_next_scheduled( $hook ) );
-		// the args events should still be there
+		// The args events should still be there.
 		$this->assertTrue( wp_next_scheduled( $hook, $args ) > 0 );
 
-		// clear the schedule for the args events and make sure they're gone too
+		// Clear the schedule for the args events and make sure they're gone too.
 		// wp_clear_scheduled_hook() should take args as an array like the other functions.
 		wp_clear_scheduled_hook( $hook, $args );
 		$this->assertFalse( wp_next_scheduled( $hook, $args ) );
 
-		// clear the schedule for the args events and make sure they're gone too
-		// wp_clear_scheduled_hook() should take args as an array like the other functions and does from WP 3.0
+		// Clear the schedule for the args events and make sure they're gone too.
+		// wp_clear_scheduled_hook() should take args as an array like the other functions and does from WP 3.0.
 		wp_clear_scheduled_hook( $multi_hook, $multi_args );
 		$this->assertFalse( wp_next_scheduled( $multi_hook, $multi_args ) );
 	}
@@ -225,17 +225,17 @@ class Tests_Cron extends WP_UnitTestCase {
 		$hook = __FUNCTION__;
 		$args = array( rand_str() );
 
-		// schedule several events with and without arguments.
+		// Schedule several events with and without arguments.
 		wp_schedule_single_event( strtotime( '+1 hour' ), $hook );
 		wp_schedule_single_event( strtotime( '+2 hour' ), $hook );
 		wp_schedule_single_event( strtotime( '+3 hour' ), $hook, $args );
 		wp_schedule_single_event( strtotime( '+4 hour' ), $hook, $args );
 
-		// make sure they're returned by wp_next_scheduled().
+		// Make sure they're returned by wp_next_scheduled().
 		$this->assertTrue( wp_next_scheduled( $hook ) > 0 );
 		$this->assertTrue( wp_next_scheduled( $hook, $args ) > 0 );
 
-		// clear the schedule and make sure it's gone.
+		// Clear the schedule and make sure it's gone.
 		$unschedule_hook = wp_unschedule_hook( $hook );
 		$this->assertSame( 4, $unschedule_hook );
 		$this->assertFalse( wp_next_scheduled( $hook ) );
@@ -263,60 +263,60 @@ class Tests_Cron extends WP_UnitTestCase {
 	 * @ticket 6966
 	 */
 	function test_duplicate_event() {
-		// duplicate events close together should be skipped
+		// Duplicate events close together should be skipped.
 		$hook = __FUNCTION__;
 		$args = array( 'arg1' );
 		$ts1  = strtotime( '+5 minutes' );
 		$ts2  = strtotime( '+3 minutes' );
 
-		// first one works
+		// First one works.
 		$this->assertTrue( wp_schedule_single_event( $ts1, $hook, $args ) );
-		// second one is ignored
+		// Second one is ignored.
 		$this->assertFalse( wp_schedule_single_event( $ts2, $hook, $args ) );
 
-		// the next event should be at +5 minutes, not +3
-		$this->assertEquals( $ts1, wp_next_scheduled( $hook, $args ) );
+		// The next event should be at +5 minutes, not +3.
+		$this->assertSame( $ts1, wp_next_scheduled( $hook, $args ) );
 	}
 
 	/**
 	 * @ticket 6966
 	 */
 	function test_not_duplicate_event() {
-		// duplicate events far apart should work normally
+		// Duplicate events far apart should work normally.
 		$hook = __FUNCTION__;
 		$args = array( 'arg1' );
 		$ts1  = strtotime( '+30 minutes' );
 		$ts2  = strtotime( '+3 minutes' );
 
-		// first one works
+		// First one works.
 		$this->assertTrue( wp_schedule_single_event( $ts1, $hook, $args ) );
-		// second works too
+		// Second works too.
 		$this->assertTrue( wp_schedule_single_event( $ts2, $hook, $args ) );
 
-		// the next event should be at +3 minutes, even though that one was scheduled second
-		$this->assertEquals( $ts2, wp_next_scheduled( $hook, $args ) );
+		// The next event should be at +3 minutes, even though that one was scheduled second.
+		$this->assertSame( $ts2, wp_next_scheduled( $hook, $args ) );
 		wp_unschedule_event( $ts2, $hook, $args );
-		// following event at +30 minutes should be there too
-		$this->assertEquals( $ts1, wp_next_scheduled( $hook, $args ) );
+		// Following event at +30 minutes should be there too.
+		$this->assertSame( $ts1, wp_next_scheduled( $hook, $args ) );
 	}
 
 	function test_not_duplicate_event_reversed() {
-		// duplicate events far apart should work normally regardless of order
+		// Duplicate events far apart should work normally regardless of order.
 		$hook = __FUNCTION__;
 		$args = array( 'arg1' );
 		$ts1  = strtotime( '+3 minutes' );
 		$ts2  = strtotime( '+30 minutes' );
 
-		// first one works
+		// First one works.
 		$this->assertTrue( wp_schedule_single_event( $ts1, $hook, $args ) );
-		// second works too
+		// Second works too.
 		$this->assertTrue( wp_schedule_single_event( $ts2, $hook, $args ) );
 
-		// the next event should be at +3 minutes
-		$this->assertEquals( $ts1, wp_next_scheduled( $hook, $args ) );
+		// The next event should be at +3 minutes.
+		$this->assertSame( $ts1, wp_next_scheduled( $hook, $args ) );
 		wp_unschedule_event( $ts1, $hook, $args );
-		// following event should be there too
-		$this->assertEquals( $ts2, wp_next_scheduled( $hook, $args ) );
+		// Following event should be there too.
+		$this->assertSame( $ts2, wp_next_scheduled( $hook, $args ) );
 	}
 
 	/**
@@ -381,7 +381,7 @@ class Tests_Cron extends WP_UnitTestCase {
 		$hook = __FUNCTION__;
 		$ts1  = strtotime( '+30 minutes' );
 
-		// Add an event
+		// Add an event.
 		$this->assertTrue( wp_schedule_event( $ts1, 'hourly', $hook ) );
 		$expected = _get_cron_array();
 
@@ -405,7 +405,7 @@ class Tests_Cron extends WP_UnitTestCase {
 		$hook = __FUNCTION__;
 		$ts1  = strtotime( '+30 minutes' );
 
-		// Add an event
+		// Add an event.
 		$this->assertTrue( wp_schedule_event( $ts1, 'hourly', $hook ) );
 		$expected = _get_cron_array();
 
@@ -429,7 +429,7 @@ class Tests_Cron extends WP_UnitTestCase {
 		$hook = __FUNCTION__;
 		$ts1  = strtotime( '+30 minutes' );
 
-		// Add an event
+		// Add an event.
 		$this->assertTrue( wp_schedule_event( $ts1, 'hourly', $hook ) );
 		$expected = _get_cron_array();
 
@@ -470,7 +470,7 @@ class Tests_Cron extends WP_UnitTestCase {
 		);
 
 		$this->assertEquals( $expected, $actual );
-		$this->assertEquals( $expected->timestamp, $actual2 );
+		$this->assertSame( $expected->timestamp, $actual2 );
 	}
 
 	function filter_pre_scheduled_event_hooks() {
@@ -583,16 +583,16 @@ class Tests_Cron extends WP_UnitTestCase {
 		$ts   = strtotime( '+3 minutes' );
 
 		// No scheduled events.
-		// - With timestamp
+		// - With timestamp.
 		$this->assertFalse( wp_get_scheduled_event( $hook, $args, $ts ) );
 		// - Get next, none scheduled.
 		$this->assertFalse( wp_get_scheduled_event( $hook, $args ) );
 
 		// Schedule an event.
 		wp_schedule_event( $ts, $hook, $args );
-		// - unregistered timestamp
+		// - Unregistered timestamp.
 		$this->assertFalse( wp_get_scheduled_event( $hook, $args, strtotime( '+30 minutes' ) ) );
-		// - invalid timestamp.
+		// - Invalid timestamp.
 		$this->assertFalse( wp_get_scheduled_event( $hook, $args, 'Words Fail!' ) );
 
 	}
diff --git a/tests/customize/control.php b/tests/customize/control.php
index 4247d9a2ab..950ef810a2 100644
--- a/tests/customize/control.php
+++ b/tests/customize/control.php
@@ -27,7 +27,7 @@ class Test_WP_Customize_Control extends WP_UnitTestCase {
 	function setUp() {
 		parent::setUp();
 		wp_set_current_user( $this->factory()->user->create( array( 'role' => 'administrator' ) ) );
-		require_once( ABSPATH . WPINC . '/class-wp-customize-manager.php' );
+		require_once ABSPATH . WPINC . '/class-wp-customize-manager.php';
 		$GLOBALS['wp_customize'] = new WP_Customize_Manager();
 		$this->wp_customize      = $GLOBALS['wp_customize'];
 	}
diff --git a/tests/customize/custom-css-setting.php b/tests/customize/custom-css-setting.php
index c8ade41de8..9c246c63ea 100644
--- a/tests/customize/custom-css-setting.php
+++ b/tests/customize/custom-css-setting.php
@@ -75,13 +75,13 @@ class Test_WP_Customize_Custom_CSS_Setting extends WP_UnitTestCase {
 	 *
 	 * Also checks for the post type and the Setting Type.
 	 *
-	 * @covers WP_Customize_Custom_CSS_Setting::__construct()
+	 * @covers WP_Customize_Custom_CSS_Setting::__construct
 	 */
 	function test_construct() {
 		$this->assertTrue( post_type_exists( 'custom_css' ) );
-		$this->assertEquals( 'custom_css', $this->setting->type );
-		$this->assertEquals( get_stylesheet(), $this->setting->stylesheet );
-		$this->assertEquals( 'edit_css', $this->setting->capability );
+		$this->assertSame( 'custom_css', $this->setting->type );
+		$this->assertSame( get_stylesheet(), $this->setting->stylesheet );
+		$this->assertSame( 'edit_css', $this->setting->capability );
 
 		$exception = null;
 		try {
@@ -106,14 +106,14 @@ class Test_WP_Customize_Custom_CSS_Setting extends WP_UnitTestCase {
 	 * Test crud methods on WP_Customize_Custom_CSS_Setting.
 	 *
 	 * @covers ::wp_get_custom_css
-	 * @covers WP_Customize_Custom_CSS_Setting::value()
-	 * @covers WP_Customize_Custom_CSS_Setting::preview()
-	 * @covers WP_Customize_Custom_CSS_Setting::update()
+	 * @covers WP_Customize_Custom_CSS_Setting::value
+	 * @covers WP_Customize_Custom_CSS_Setting::preview
+	 * @covers WP_Customize_Custom_CSS_Setting::update
 	 */
 	function test_crud() {
 
 		$this->setting->default = '/* Hello World */';
-		$this->assertEquals( $this->setting->default, $this->setting->value() );
+		$this->assertSame( $this->setting->default, $this->setting->value() );
 
 		$this->assertNull( wp_get_custom_css_post() );
 		$this->assertNull( wp_get_custom_css_post( $this->setting->stylesheet ) );
@@ -143,29 +143,29 @@ class Test_WP_Customize_Custom_CSS_Setting extends WP_UnitTestCase {
 
 		remove_theme_mod( 'custom_css_post_id' );
 
-		$this->assertEquals( $post_id, wp_get_custom_css_post()->ID );
-		$this->assertEquals( $post_id, wp_get_custom_css_post( $this->setting->stylesheet )->ID );
-		$this->assertEquals( $twentyten_post_id, wp_get_custom_css_post( 'twentyten' )->ID );
+		$this->assertSame( $post_id, wp_get_custom_css_post()->ID );
+		$this->assertSame( $post_id, wp_get_custom_css_post( $this->setting->stylesheet )->ID );
+		$this->assertSame( $twentyten_post_id, wp_get_custom_css_post( 'twentyten' )->ID );
 
-		$this->assertEquals( $original_css, wp_get_custom_css( $this->setting->stylesheet ) );
-		$this->assertEquals( $original_css, $this->setting->value() );
-		$this->assertEquals( $twentyten_css, wp_get_custom_css( 'twentyten' ) );
-		$this->assertEquals( $twentyten_css, $twentyten_setting->value() );
+		$this->assertSame( $original_css, wp_get_custom_css( $this->setting->stylesheet ) );
+		$this->assertSame( $original_css, $this->setting->value() );
+		$this->assertSame( $twentyten_css, wp_get_custom_css( 'twentyten' ) );
+		$this->assertSame( $twentyten_css, $twentyten_setting->value() );
 
 		$updated_css = 'body { color: blue; }';
 		$this->wp_customize->set_post_value( $this->setting->id, $updated_css );
 		$saved = $this->setting->save();
 
 		$this->assertNotFalse( $saved );
-		$this->assertEquals( $updated_css, $this->setting->value() );
-		$this->assertEquals( $updated_css, wp_get_custom_css( $this->setting->stylesheet ) );
-		$this->assertEquals( $updated_css, get_post( $post_id )->post_content );
+		$this->assertSame( $updated_css, $this->setting->value() );
+		$this->assertSame( $updated_css, wp_get_custom_css( $this->setting->stylesheet ) );
+		$this->assertSame( $updated_css, get_post( $post_id )->post_content );
 
 		$previewed_css = 'body { color: red; }';
 		$this->wp_customize->set_post_value( $this->setting->id, $previewed_css );
 		$this->setting->preview();
-		$this->assertEquals( $previewed_css, $this->setting->value() );
-		$this->assertEquals( $previewed_css, wp_get_custom_css( $this->setting->stylesheet ) );
+		$this->assertSame( $previewed_css, $this->setting->value() );
+		$this->assertSame( $previewed_css, wp_get_custom_css( $this->setting->stylesheet ) );
 
 		// Make sure that wp_update_custom_css_post() works as expected for updates.
 		$r = wp_update_custom_css_post(
@@ -176,13 +176,13 @@ class Test_WP_Customize_Custom_CSS_Setting extends WP_UnitTestCase {
 			)
 		);
 		$this->assertInstanceOf( 'WP_Post', $r );
-		$this->assertEquals( $post_id, $r->ID );
-		$this->assertEquals( 'body { color:red; }', get_post( $r )->post_content );
-		$this->assertEquals( "body\n\tcolor:red;", get_post( $r )->post_content_filtered );
+		$this->assertSame( $post_id, $r->ID );
+		$this->assertSame( 'body { color:red; }', get_post( $r )->post_content );
+		$this->assertSame( "body\n\tcolor:red;", get_post( $r )->post_content_filtered );
 		$r = wp_update_custom_css_post( 'body { content: "\o/"; }' );
-		$this->assertEquals( $this->wp_customize->get_stylesheet(), get_post( $r )->post_name );
-		$this->assertEquals( 'body { content: "\o/"; }', get_post( $r )->post_content );
-		$this->assertEquals( '', get_post( $r )->post_content_filtered );
+		$this->assertSame( $this->wp_customize->get_stylesheet(), get_post( $r )->post_name );
+		$this->assertSame( 'body { content: "\o/"; }', get_post( $r )->post_content );
+		$this->assertSame( '', get_post( $r )->post_content_filtered );
 
 		// Make sure that wp_update_custom_css_post() works as expected for insertion.
 		$r = wp_update_custom_css_post(
@@ -192,18 +192,18 @@ class Test_WP_Customize_Custom_CSS_Setting extends WP_UnitTestCase {
 			)
 		);
 		$this->assertInstanceOf( 'WP_Post', $r );
-		$this->assertEquals( 'other', get_post( $r )->post_name );
-		$this->assertEquals( 'body { background:black; }', get_post( $r )->post_content );
-		$this->assertEquals( 'publish', get_post( $r )->post_status );
+		$this->assertSame( 'other', get_post( $r )->post_name );
+		$this->assertSame( 'body { background:black; }', get_post( $r )->post_content );
+		$this->assertSame( 'publish', get_post( $r )->post_status );
 
 		// Test deletion.
 		wp_delete_post( $post_id );
 		$this->assertNull( wp_get_custom_css_post() );
 		$this->assertNull( wp_get_custom_css_post( get_stylesheet() ) );
-		$this->assertEquals( $previewed_css, wp_get_custom_css( get_stylesheet() ), 'Previewed value remains in spite of deleted post.' );
+		$this->assertSame( $previewed_css, wp_get_custom_css( get_stylesheet() ), 'Previewed value remains in spite of deleted post.' );
 		wp_delete_post( $twentyten_post_id );
 		$this->assertNull( wp_get_custom_css_post( 'twentyten' ) );
-		$this->assertEquals( '', wp_get_custom_css( 'twentyten' ) );
+		$this->assertSame( '', wp_get_custom_css( 'twentyten' ) );
 	}
 
 	/**
@@ -266,12 +266,12 @@ class Test_WP_Customize_Custom_CSS_Setting extends WP_UnitTestCase {
 	/**
 	 * Test crud methods on WP_Customize_Custom_CSS_Setting.
 	 *
-	 * @covers WP_Customize_Custom_CSS_Setting::value()
+	 * @covers WP_Customize_Custom_CSS_Setting::value
 	 */
 	function test_value_filter() {
 		add_filter( 'customize_value_custom_css', array( $this, 'filter_value' ), 10, 2 );
 		$this->setting->default = '/*default*/';
-		$this->assertEquals( '/*default*//*filtered*/', $this->setting->value() );
+		$this->assertSame( '/*default*//*filtered*/', $this->setting->value() );
 
 		$this->factory()->post->create(
 			array(
@@ -283,11 +283,11 @@ class Test_WP_Customize_Custom_CSS_Setting extends WP_UnitTestCase {
 			)
 		);
 		remove_theme_mod( 'custom_css_post_id' );
-		$this->assertEquals( '/*custom*//*filtered*/', $this->setting->value() );
+		$this->assertSame( '/*custom*//*filtered*/', $this->setting->value() );
 
 		$this->wp_customize->set_post_value( $this->setting->id, '/*overridden*/' );
 		$this->setting->preview();
-		$this->assertEquals( '/*overridden*/', $this->setting->value(), 'Expected value to not be filtered since post value is present.' );
+		$this->assertSame( '/*overridden*/', $this->setting->value(), 'Expected value to not be filtered since post value is present.' );
 	}
 
 	/**
@@ -306,7 +306,7 @@ class Test_WP_Customize_Custom_CSS_Setting extends WP_UnitTestCase {
 	/**
 	 * Test update filter on WP_Customize_Custom_CSS_Setting.
 	 *
-	 * @covers WP_Customize_Custom_CSS_Setting::update()
+	 * @covers WP_Customize_Custom_CSS_Setting::update
 	 */
 	function test_update_filter() {
 		$original_css = 'body { color:red; }';
@@ -330,7 +330,7 @@ class Test_WP_Customize_Custom_CSS_Setting extends WP_UnitTestCase {
 		$this->setting->save();
 
 		$post = get_post( $post_id );
-		$this->assertEquals( $original_title, $post->post_title );
+		$this->assertSame( $original_title, $post->post_title );
 		$this->assertContains( $overridden_css, $post->post_content );
 		$this->assertContains( '/* filtered post_content */', $post->post_content );
 		$this->assertContains( '/* filtered post_content_filtered */', $post->post_content_filtered );
@@ -345,12 +345,12 @@ class Test_WP_Customize_Custom_CSS_Setting extends WP_UnitTestCase {
 	 */
 	function filter_update_custom_css_data( $data, $args ) {
 		$this->assertInternalType( 'array', $data );
-		$this->assertEqualSets( array( 'css', 'preprocessed' ), array_keys( $data ) );
-		$this->assertEquals( '', $data['preprocessed'] );
+		$this->assertSameSets( array( 'css', 'preprocessed' ), array_keys( $data ) );
+		$this->assertSame( '', $data['preprocessed'] );
 		$this->assertInternalType( 'array', $args );
-		$this->assertEqualSets( array( 'css', 'preprocessed', 'stylesheet' ), array_keys( $args ) );
-		$this->assertEquals( $args['css'], $data['css'] );
-		$this->assertEquals( $args['preprocessed'], $data['preprocessed'] );
+		$this->assertSameSets( array( 'css', 'preprocessed', 'stylesheet' ), array_keys( $args ) );
+		$this->assertSame( $args['css'], $data['css'] );
+		$this->assertSame( $args['preprocessed'], $data['preprocessed'] );
 
 		$data['css']         .= '/* filtered post_content */';
 		$data['preprocessed'] = '/* filtered post_content_filtered */';
@@ -364,7 +364,7 @@ class Test_WP_Customize_Custom_CSS_Setting extends WP_UnitTestCase {
 	 * Note that the $validity \WP_Error object must be reset each time
 	 * as it picks up the Errors and passes them to the next assertion.
 	 *
-	 * @covers WP_Customize_Custom_CSS_Setting::validate()
+	 * @covers WP_Customize_Custom_CSS_Setting::validate
 	 */
 	function test_validate() {
 
diff --git a/tests/customize/manager.php b/tests/customize/manager.php
index bca6decdc4..89ef378436 100644
--- a/tests/customize/manager.php
+++ b/tests/customize/manager.php
@@ -55,15 +55,15 @@ class Tests_WP_Customize_Manager extends WP_UnitTestCase {
 	 */
 	function setUp() {
 		parent::setUp();
-		require_once( ABSPATH . WPINC . '/class-wp-customize-manager.php' );
+		require_once ABSPATH . WPINC . '/class-wp-customize-manager.php';
 		$this->manager   = $this->instantiate();
 		$this->undefined = new stdClass();
 
 		$orig_file       = DIR_TESTDATA . '/images/canola.jpg';
-		$this->test_file = '/tmp/canola.jpg';
+		$this->test_file = get_temp_dir() . 'canola.jpg';
 		copy( $orig_file, $this->test_file );
 		$orig_file2       = DIR_TESTDATA . '/images/waffles.jpg';
-		$this->test_file2 = '/tmp/waffles.jpg';
+		$this->test_file2 = get_temp_dir() . 'waffles.jpg';
 		copy( $orig_file2, $this->test_file2 );
 	}
 
@@ -106,7 +106,7 @@ class Tests_WP_Customize_Manager extends WP_UnitTestCase {
 	/**
 	 * Test WP_Customize_Manager::__construct().
 	 *
-	 * @covers WP_Customize_Manager::__construct()
+	 * @covers WP_Customize_Manager::__construct
 	 */
 	function test_constructor() {
 		$uuid              = wp_generate_uuid4();
@@ -119,9 +119,9 @@ class Tests_WP_Customize_Manager extends WP_UnitTestCase {
 				'messenger_channel' => $messenger_channel,
 			)
 		);
-		$this->assertEquals( $uuid, $wp_customize->changeset_uuid() );
-		$this->assertEquals( $theme, $wp_customize->get_stylesheet() );
-		$this->assertEquals( $messenger_channel, $wp_customize->get_messenger_channel() );
+		$this->assertSame( $uuid, $wp_customize->changeset_uuid() );
+		$this->assertSame( $theme, $wp_customize->get_stylesheet() );
+		$this->assertSame( $messenger_channel, $wp_customize->get_messenger_channel() );
 		$this->assertFalse( $wp_customize->autosaved() );
 		$this->assertTrue( $wp_customize->branching() );
 
@@ -137,13 +137,13 @@ class Tests_WP_Customize_Manager extends WP_UnitTestCase {
 		$_REQUEST['theme']                       = $theme;
 		$_REQUEST['customize_messenger_channel'] = $messenger_channel;
 		$wp_customize                            = new WP_Customize_Manager( array( 'changeset_uuid' => $uuid ) );
-		$this->assertEquals( $theme, $wp_customize->get_stylesheet() );
-		$this->assertEquals( $messenger_channel, $wp_customize->get_messenger_channel() );
+		$this->assertSame( $theme, $wp_customize->get_stylesheet() );
+		$this->assertSame( $messenger_channel, $wp_customize->get_messenger_channel() );
 
 		$theme                       = 'twentyfourteen';
 		$_REQUEST['customize_theme'] = $theme;
 		$wp_customize                = new WP_Customize_Manager();
-		$this->assertEquals( $theme, $wp_customize->get_stylesheet() );
+		$this->assertSame( $theme, $wp_customize->get_stylesheet() );
 		$this->assertTrue( wp_is_uuid( $wp_customize->changeset_uuid(), 4 ) );
 	}
 
@@ -151,8 +151,8 @@ class Tests_WP_Customize_Manager extends WP_UnitTestCase {
 	 * Test constructor when deferring UUID.
 	 *
 	 * @ticket 39896
-	 * @covers WP_Customize_Manager::establish_loaded_changeset()
-	 * @covers WP_Customize_Manager::__construct()
+	 * @covers WP_Customize_Manager::establish_loaded_changeset
+	 * @covers WP_Customize_Manager::__construct
 	 */
 	public function test_constructor_deferred_changeset_uuid() {
 		wp_set_current_user( self::$admin_user_id );
@@ -198,13 +198,13 @@ class Tests_WP_Customize_Manager extends WP_UnitTestCase {
 				'branching'      => false, // To cause drafted changeset to be autoloaded.
 			)
 		);
-		$this->assertEquals( $uuid2, $wp_customize->changeset_uuid() );
-		$this->assertEquals( $post_id, $wp_customize->changeset_post_id() );
+		$this->assertSame( $uuid2, $wp_customize->changeset_uuid() );
+		$this->assertSame( $post_id, $wp_customize->changeset_post_id() );
 
 		$wp_customize = new WP_Customize_Manager(
 			array(
 				'changeset_uuid' => false, // Cause UUID to be deferred.
-				'branching'      => true, // To cause no drafted changeset to be autoloaded.
+				'branching'      => true,  // To cause no drafted changeset to be autoloaded.
 			)
 		);
 		$this->assertNotContains( $wp_customize->changeset_uuid(), array( $uuid1, $uuid2 ) );
@@ -225,7 +225,7 @@ class Tests_WP_Customize_Manager extends WP_UnitTestCase {
 	/**
 	 * Test WP_Customize_Manager::setup_theme() for admin screen.
 	 *
-	 * @covers WP_Customize_Manager::setup_theme()
+	 * @covers WP_Customize_Manager::setup_theme
 	 */
 	function test_setup_theme_in_customize_admin() {
 		global $pagenow, $wp_customize;
@@ -264,7 +264,7 @@ class Tests_WP_Customize_Manager extends WP_UnitTestCase {
 		// Make sure that starter content import gets queued on a fresh site.
 		update_option( 'fresh_site', '1' );
 		$wp_customize->setup_theme();
-		$this->assertEquals( 100, has_action( 'after_setup_theme', array( $wp_customize, 'import_theme_starter_content' ) ) );
+		$this->assertSame( 100, has_action( 'after_setup_theme', array( $wp_customize, 'import_theme_starter_content' ) ) );
 	}
 
 	/**
@@ -279,7 +279,7 @@ class Tests_WP_Customize_Manager extends WP_UnitTestCase {
 		// Make sure fresh site flag is cleared when publishing a changeset.
 		update_option( 'fresh_site', '1' );
 		do_action( 'customize_save_after', $wp_customize );
-		$this->assertEquals( '0', get_option( 'fresh_site' ) );
+		$this->assertSame( '0', get_option( 'fresh_site' ) );
 
 		// Simulate a new, uncached request.
 		wp_cache_delete( 'alloptions', 'options' );
@@ -294,7 +294,7 @@ class Tests_WP_Customize_Manager extends WP_UnitTestCase {
 	/**
 	 * Test WP_Customize_Manager::setup_theme() for frontend.
 	 *
-	 * @covers WP_Customize_Manager::setup_theme()
+	 * @covers WP_Customize_Manager::setup_theme
 	 */
 	function test_setup_theme_in_frontend() {
 		global $wp_customize, $pagenow, $show_admin_bar;
@@ -329,21 +329,21 @@ class Tests_WP_Customize_Manager extends WP_UnitTestCase {
 	 * Test WP_Customize_Manager::settings_previewed().
 	 *
 	 * @ticket 39221
-	 * @covers WP_Customize_Manager::settings_previewed()
+	 * @covers WP_Customize_Manager::settings_previewed
 	 */
 	function test_settings_previewed() {
 		$wp_customize = new WP_Customize_Manager( array( 'settings_previewed' => false ) );
-		$this->assertSame( false, $wp_customize->settings_previewed() );
+		$this->assertFalse( $wp_customize->settings_previewed() );
 
 		$wp_customize = new WP_Customize_Manager();
-		$this->assertSame( true, $wp_customize->settings_previewed() );
+		$this->assertTrue( $wp_customize->settings_previewed() );
 	}
 
 	/**
 	 * Test WP_Customize_Manager::autosaved().
 	 *
 	 * @ticket 39896
-	 * @covers WP_Customize_Manager::autosaved()
+	 * @covers WP_Customize_Manager::autosaved
 	 */
 	public function test_autosaved() {
 		$wp_customize = new WP_Customize_Manager();
@@ -360,7 +360,7 @@ class Tests_WP_Customize_Manager extends WP_UnitTestCase {
 	 * Test WP_Customize_Manager::branching().
 	 *
 	 * @ticket 39896
-	 * @covers WP_Customize_Manager::branching()
+	 * @covers WP_Customize_Manager::branching
 	 */
 	public function test_branching() {
 		$wp_customize = new WP_Customize_Manager();
@@ -382,12 +382,12 @@ class Tests_WP_Customize_Manager extends WP_UnitTestCase {
 	 * Test WP_Customize_Manager::changeset_uuid().
 	 *
 	 * @ticket 30937
-	 * @covers WP_Customize_Manager::changeset_uuid()
+	 * @covers WP_Customize_Manager::changeset_uuid
 	 */
 	function test_changeset_uuid() {
 		$uuid         = wp_generate_uuid4();
 		$wp_customize = new WP_Customize_Manager( array( 'changeset_uuid' => $uuid ) );
-		$this->assertEquals( $uuid, $wp_customize->changeset_uuid() );
+		$this->assertSame( $uuid, $wp_customize->changeset_uuid() );
 	}
 
 	/**
@@ -396,7 +396,7 @@ class Tests_WP_Customize_Manager extends WP_UnitTestCase {
 	 * Ensure that post values are previewed even without being in preview.
 	 *
 	 * @ticket 30937
-	 * @covers WP_Customize_Manager::wp_loaded()
+	 * @covers WP_Customize_Manager::wp_loaded
 	 */
 	function test_wp_loaded() {
 		wp_set_current_user( self::$admin_user_id );
@@ -406,15 +406,15 @@ class Tests_WP_Customize_Manager extends WP_UnitTestCase {
 		$this->assertNotEquals( $title, get_option( 'blogname' ) );
 		$wp_customize->wp_loaded();
 		$this->assertFalse( $wp_customize->is_preview() );
-		$this->assertEquals( $title, $wp_customize->get_setting( 'blogname' )->value() );
-		$this->assertEquals( $title, get_option( 'blogname' ) );
+		$this->assertSame( $title, $wp_customize->get_setting( 'blogname' )->value() );
+		$this->assertSame( $title, get_option( 'blogname' ) );
 	}
 
 	/**
 	 * Test WP_Customize_Manager::find_changeset_post_id().
 	 *
 	 * @ticket 30937
-	 * @covers WP_Customize_Manager::find_changeset_post_id()
+	 * @covers WP_Customize_Manager::find_changeset_post_id
 	 */
 	function test_find_changeset_post_id() {
 		$uuid    = wp_generate_uuid4();
@@ -429,7 +429,7 @@ class Tests_WP_Customize_Manager extends WP_UnitTestCase {
 
 		$wp_customize = new WP_Customize_Manager();
 		$this->assertNull( $wp_customize->find_changeset_post_id( wp_generate_uuid4() ) );
-		$this->assertEquals( $post_id, $wp_customize->find_changeset_post_id( $uuid ) );
+		$this->assertSame( $post_id, $wp_customize->find_changeset_post_id( $uuid ) );
 
 		// Verify that the found post ID was cached under the given UUID, not the manager's UUID.
 		$this->assertNotEquals( $post_id, $wp_customize->find_changeset_post_id( $wp_customize->changeset_uuid() ) );
@@ -439,7 +439,7 @@ class Tests_WP_Customize_Manager extends WP_UnitTestCase {
 	 * Test WP_Customize_Manager::changeset_post_id().
 	 *
 	 * @ticket 30937
-	 * @covers WP_Customize_Manager::changeset_post_id()
+	 * @covers WP_Customize_Manager::changeset_post_id
 	 */
 	function test_changeset_post_id() {
 		$uuid         = wp_generate_uuid4();
@@ -456,20 +456,20 @@ class Tests_WP_Customize_Manager extends WP_UnitTestCase {
 				'post_content' => '{}',
 			)
 		);
-		$this->assertEquals( $post_id, $wp_customize->changeset_post_id() );
+		$this->assertSame( $post_id, $wp_customize->changeset_post_id() );
 	}
 
 	/**
 	 * Test WP_Customize_Manager::changeset_data().
 	 *
 	 * @ticket 30937
-	 * @covers WP_Customize_Manager::changeset_data()
+	 * @covers WP_Customize_Manager::changeset_data
 	 */
 	function test_changeset_data() {
 		wp_set_current_user( self::$admin_user_id );
 		$uuid         = wp_generate_uuid4();
 		$wp_customize = new WP_Customize_Manager( array( 'changeset_uuid' => $uuid ) );
-		$this->assertEquals( array(), $wp_customize->changeset_data() );
+		$this->assertSame( array(), $wp_customize->changeset_data() );
 
 		$uuid = wp_generate_uuid4();
 		$data = array(
@@ -485,7 +485,7 @@ class Tests_WP_Customize_Manager extends WP_UnitTestCase {
 			)
 		);
 		$wp_customize = new WP_Customize_Manager( array( 'changeset_uuid' => $uuid ) );
-		$this->assertEquals( $data, $wp_customize->changeset_data() );
+		$this->assertSame( $data, $wp_customize->changeset_data() );
 
 		// Autosave.
 		$wp_customize->set_post_value( 'blogname', 'Hola Mundo' );
@@ -506,7 +506,7 @@ class Tests_WP_Customize_Manager extends WP_UnitTestCase {
 		);
 		$wp_customize->register_controls(); // That is, settings.
 		$this->assertFalse( $wp_customize->autosaved() );
-		$this->assertEquals( $data, $wp_customize->changeset_data() );
+		$this->assertSame( $data, $wp_customize->changeset_data() );
 
 		// No change to data if not requesting autosave.
 		$wp_customize = new WP_Customize_Manager(
@@ -517,7 +517,7 @@ class Tests_WP_Customize_Manager extends WP_UnitTestCase {
 		);
 		$this->assertTrue( $wp_customize->autosaved() );
 		$this->assertNotEquals( $data, $wp_customize->changeset_data() );
-		$this->assertEquals(
+		$this->assertSame(
 			array_merge(
 				wp_list_pluck( $data, 'value' ),
 				array( 'blogname' => 'Hola Mundo' )
@@ -533,14 +533,14 @@ class Tests_WP_Customize_Manager extends WP_UnitTestCase {
 				'autosaved'      => true,
 			)
 		);
-		$this->assertEquals( $data, $wp_customize->changeset_data() );
+		$this->assertSame( $data, $wp_customize->changeset_data() );
 	}
 
 	/**
 	 * Test WP_Customize_Manager::import_theme_starter_content().
 	 *
-	 * @covers WP_Customize_Manager::import_theme_starter_content()
-	 * @covers WP_Customize_Manager::_save_starter_content_changeset()
+	 * @covers WP_Customize_Manager::import_theme_starter_content
+	 * @covers WP_Customize_Manager::_save_starter_content_changeset
 	 */
 	function test_import_theme_starter_content() {
 		wp_set_current_user( self::$admin_user_id );
@@ -674,7 +674,7 @@ class Tests_WP_Customize_Manager extends WP_UnitTestCase {
 			'page_on_front',
 			'page_for_posts',
 		);
-		$this->assertEqualSets( $expected_setting_ids, array_keys( $changeset_values ) );
+		$this->assertSameSets( $expected_setting_ids, array_keys( $changeset_values ) );
 
 		foreach ( array( 'widget_text[2]', 'widget_meta[3]' ) as $setting_id ) {
 			$this->assertInternalType( 'array', $changeset_values[ $setting_id ] );
@@ -683,7 +683,7 @@ class Tests_WP_Customize_Manager extends WP_UnitTestCase {
 			$this->assertArrayHasKey( 'title', $instance_data );
 		}
 
-		$this->assertEquals( array( 'text-2', 'meta-3' ), $changeset_values['sidebars_widgets[sidebar-1]'] );
+		$this->assertSame( array( 'text-2', 'meta-3' ), $changeset_values['sidebars_widgets[sidebar-1]'] );
 
 		$posts_by_name = array();
 		$this->assertCount( 7, $changeset_values['nav_menus_created_posts'] );
@@ -693,11 +693,11 @@ class Tests_WP_Customize_Manager extends WP_UnitTestCase {
 		foreach ( $changeset_values['nav_menus_created_posts'] as $post_id ) {
 			$post = get_post( $post_id );
 			if ( $post->ID === $existing_published_home_page_id ) {
-				$this->assertEquals( 'publish', $post->post_status );
+				$this->assertSame( 'publish', $post->post_status );
 			} elseif ( $post->ID === $existing_canola_attachment_id ) {
-				$this->assertEquals( 'inherit', $post->post_status );
+				$this->assertSame( 'inherit', $post->post_status );
 			} else {
-				$this->assertEquals( 'auto-draft', $post->post_status );
+				$this->assertSame( 'auto-draft', $post->post_status );
 				$this->assertEmpty( $post->post_name );
 			}
 			$post_name = $post->post_name;
@@ -706,30 +706,30 @@ class Tests_WP_Customize_Manager extends WP_UnitTestCase {
 			}
 			$posts_by_name[ $post_name ] = $post->ID;
 		}
-		$this->assertEquals( array( 'waffles', 'canola', 'home', 'about', 'blog', 'custom', 'unknown-cpt' ), array_keys( $posts_by_name ) );
-		$this->assertEquals( 'Custom', get_post( $posts_by_name['custom'] )->post_title );
-		$this->assertEquals( 'sample-page-template.php', get_page_template_slug( $posts_by_name['about'] ) );
-		$this->assertEquals( '', get_page_template_slug( $posts_by_name['blog'] ) );
-		$this->assertEquals( $posts_by_name['waffles'], get_post_thumbnail_id( $posts_by_name['custom'] ) );
-		$this->assertEquals( '', get_post_thumbnail_id( $posts_by_name['blog'] ) );
+		$this->assertSame( array( 'waffles', 'canola', 'home', 'about', 'blog', 'custom', 'unknown-cpt' ), array_keys( $posts_by_name ) );
+		$this->assertSame( 'Custom', get_post( $posts_by_name['custom'] )->post_title );
+		$this->assertSame( 'sample-page-template.php', get_page_template_slug( $posts_by_name['about'] ) );
+		$this->assertSame( '', get_page_template_slug( $posts_by_name['blog'] ) );
+		$this->assertSame( $posts_by_name['waffles'], get_post_thumbnail_id( $posts_by_name['custom'] ) );
+		$this->assertSame( 0, get_post_thumbnail_id( $posts_by_name['blog'] ) );
 		$attachment_metadata = wp_get_attachment_metadata( $posts_by_name['waffles'] );
-		$this->assertEquals( 'Waffles', get_post( $posts_by_name['waffles'] )->post_title );
-		$this->assertEquals( 'waffles', get_post_meta( $posts_by_name['waffles'], '_customize_draft_post_name', true ) );
+		$this->assertSame( 'Waffles', get_post( $posts_by_name['waffles'] )->post_title );
+		$this->assertSame( 'waffles', get_post_meta( $posts_by_name['waffles'], '_customize_draft_post_name', true ) );
 		$this->assertArrayHasKey( 'file', $attachment_metadata );
 		$this->assertContains( 'waffles', $attachment_metadata['file'] );
 
-		$this->assertEquals( 'page', $changeset_values['show_on_front'] );
-		$this->assertEquals( $posts_by_name['home'], $changeset_values['page_on_front'] );
-		$this->assertEquals( $posts_by_name['blog'], $changeset_values['page_for_posts'] );
+		$this->assertSame( 'page', $changeset_values['show_on_front'] );
+		$this->assertSame( $posts_by_name['home'], $changeset_values['page_on_front'] );
+		$this->assertSame( $posts_by_name['blog'], $changeset_values['page_for_posts'] );
 
-		$this->assertEquals( -1, $changeset_values['nav_menu_locations[top]'] );
-		$this->assertEquals( 0, $changeset_values['nav_menu_item[-1]']['object_id'] );
-		$this->assertEquals( 'custom', $changeset_values['nav_menu_item[-1]']['type'] );
-		$this->assertEquals( home_url( '/' ), $changeset_values['nav_menu_item[-1]']['url'] );
+		$this->assertSame( -1, $changeset_values['nav_menu_locations[top]'] );
+		$this->assertSame( 0, $changeset_values['nav_menu_item[-1]']['object_id'] );
+		$this->assertSame( 'custom', $changeset_values['nav_menu_item[-1]']['type'] );
+		$this->assertSame( home_url( '/' ), $changeset_values['nav_menu_item[-1]']['url'] );
 
 		$this->assertEmpty( $wp_customize->changeset_data() );
 		$this->assertNull( $wp_customize->changeset_post_id() );
-		$this->assertEquals( 1000, has_action( 'customize_register', array( $wp_customize, '_save_starter_content_changeset' ) ) );
+		$this->assertSame( 1000, has_action( 'customize_register', array( $wp_customize, '_save_starter_content_changeset' ) ) );
 		do_action( 'customize_register', $wp_customize ); // This will trigger the changeset save.
 		$this->assertInternalType( 'int', $wp_customize->changeset_post_id() );
 		$this->assertNotEmpty( $wp_customize->changeset_data() );
@@ -742,7 +742,7 @@ class Tests_WP_Customize_Manager extends WP_UnitTestCase {
 		$wp_customize->import_theme_starter_content();
 		$changeset_data = $wp_customize->changeset_data();
 		// Auto-drafts should not get re-created and amended with each import.
-		$this->assertEqualSets( array_values( $posts_by_name ), $changeset_data['nav_menus_created_posts']['value'] );
+		$this->assertSameSets( array_values( $posts_by_name ), $changeset_data['nav_menus_created_posts']['value'] );
 
 		// Test that saving non-starter content on top of the changeset clears the starter_content flag.
 		$wp_customize->save_changeset_post(
@@ -771,7 +771,7 @@ class Tests_WP_Customize_Manager extends WP_UnitTestCase {
 			)
 		);
 		$changeset_data = $wp_customize->changeset_data();
-		$this->assertEquals( $previous_blogname, $changeset_data['blogname']['value'] );
+		$this->assertSame( $previous_blogname, $changeset_data['blogname']['value'] );
 		$this->assertArrayNotHasKey( 'starter_content', $changeset_data['blogname'] );
 		$this->assertNotEquals( $previous_blogdescription, $changeset_data['blogdescription']['value'] );
 		$this->assertArrayHasKey( 'starter_content', $changeset_data['blogdescription'] );
@@ -783,14 +783,14 @@ class Tests_WP_Customize_Manager extends WP_UnitTestCase {
 		$this->assertEmpty( get_theme_mod( 'custom_logo' ) );
 		$this->assertEmpty( get_theme_mod( 'header_image' ) );
 		$this->assertEmpty( get_theme_mod( 'background_image' ) );
-		$this->assertEquals( 'auto-draft', get_post( $posts_by_name['about'] )->post_status );
-		$this->assertEquals( 'auto-draft', get_post( $posts_by_name['waffles'] )->post_status );
+		$this->assertSame( 'auto-draft', get_post( $posts_by_name['about'] )->post_status );
+		$this->assertSame( 'auto-draft', get_post( $posts_by_name['waffles'] )->post_status );
 		$this->assertNotEquals( $changeset_data['blogname']['value'], get_option( 'blogname' ) );
 		$r = $wp_customize->save_changeset_post( array( 'status' => 'publish' ) );
 		$this->assertInternalType( 'array', $r );
-		$this->assertEquals( 'publish', get_post( $posts_by_name['about'] )->post_status );
-		$this->assertEquals( 'inherit', get_post( $posts_by_name['waffles'] )->post_status );
-		$this->assertEquals( $changeset_data['blogname']['value'], get_option( 'blogname' ) );
+		$this->assertSame( 'publish', get_post( $posts_by_name['about'] )->post_status );
+		$this->assertSame( 'inherit', get_post( $posts_by_name['waffles'] )->post_status );
+		$this->assertSame( $changeset_data['blogname']['value'], get_option( 'blogname' ) );
 		$this->assertNotEmpty( get_theme_mod( 'custom_logo' ) );
 		$this->assertNotEmpty( get_theme_mod( 'header_image' ) );
 		$this->assertNotEmpty( get_theme_mod( 'background_image' ) );
@@ -800,7 +800,7 @@ class Tests_WP_Customize_Manager extends WP_UnitTestCase {
 		$this->assertContains( 'canola', get_custom_logo() );
 		$this->assertContains( 'waffles', get_header_image() );
 		$this->assertContains( 'waffles', get_background_image() );
-		$this->assertEquals( 'waffles', get_post( $posts_by_name['waffles'] )->post_name );
+		$this->assertSame( 'waffles', get_post( $posts_by_name['waffles'] )->post_name );
 		$this->assertEmpty( get_post_meta( $posts_by_name['waffles'], '_customize_draft_post_name', true ) );
 	}
 
@@ -808,7 +808,7 @@ class Tests_WP_Customize_Manager extends WP_UnitTestCase {
 	 * Test WP_Customize_Manager::import_theme_starter_content() with nested arrays.
 	 *
 	 * @ticket 45484
-	 * @covers WP_Customize_Manager::import_theme_starter_content()
+	 * @covers WP_Customize_Manager::import_theme_starter_content
 	 */
 	function test_import_theme_starter_content_with_nested_arrays() {
 		wp_set_current_user( self::$admin_user_id );
@@ -870,7 +870,7 @@ class Tests_WP_Customize_Manager extends WP_UnitTestCase {
 			'nested_array_option',
 			'nested_array_theme_mod',
 		);
-		$this->assertEqualSets( $expected_setting_ids, array_keys( $changeset_values ) );
+		$this->assertSameSets( $expected_setting_ids, array_keys( $changeset_values ) );
 
 		$this->assertSame( $existing_published_home_page_id, $changeset_values['array_option']['home_page_id'] );
 		$this->assertSame( $existing_published_home_page_id, $changeset_values['nested_array_option'][2]['home_page_id'] );
@@ -882,7 +882,7 @@ class Tests_WP_Customize_Manager extends WP_UnitTestCase {
 	 * Test WP_Customize_Manager::customize_preview_init().
 	 *
 	 * @ticket 30937
-	 * @covers WP_Customize_Manager::customize_preview_init()
+	 * @covers WP_Customize_Manager::customize_preview_init
 	 */
 	function test_customize_preview_init() {
 
@@ -891,15 +891,15 @@ class Tests_WP_Customize_Manager extends WP_UnitTestCase {
 		$did_action_customize_preview_init = did_action( 'customize_preview_init' );
 		$wp_customize                      = new WP_Customize_Manager();
 		$wp_customize->customize_preview_init();
-		$this->assertEquals( $did_action_customize_preview_init + 1, did_action( 'customize_preview_init' ) );
+		$this->assertSame( $did_action_customize_preview_init + 1, did_action( 'customize_preview_init' ) );
 
-		$this->assertEquals( 10, has_action( 'wp_head', 'wp_no_robots' ) );
-		$this->assertEquals( 10, has_action( 'wp_head', array( $wp_customize, 'remove_frameless_preview_messenger_channel' ) ) );
-		$this->assertEquals( 10, has_filter( 'wp_headers', array( $wp_customize, 'filter_iframe_security_headers' ) ) );
-		$this->assertEquals( 10, has_filter( 'wp_redirect', array( $wp_customize, 'add_state_query_params' ) ) );
+		$this->assertSame( 10, has_action( 'wp_head', 'wp_no_robots' ) );
+		$this->assertSame( 10, has_action( 'wp_head', array( $wp_customize, 'remove_frameless_preview_messenger_channel' ) ) );
+		$this->assertSame( 10, has_filter( 'wp_headers', array( $wp_customize, 'filter_iframe_security_headers' ) ) );
+		$this->assertSame( 10, has_filter( 'wp_redirect', array( $wp_customize, 'add_state_query_params' ) ) );
 		$this->assertTrue( wp_script_is( 'customize-preview', 'enqueued' ) );
-		$this->assertEquals( 10, has_action( 'wp_head', array( $wp_customize, 'customize_preview_loading_style' ) ) );
-		$this->assertEquals( 20, has_action( 'wp_footer', array( $wp_customize, 'customize_preview_settings' ) ) );
+		$this->assertSame( 10, has_action( 'wp_head', array( $wp_customize, 'customize_preview_loading_style' ) ) );
+		$this->assertSame( 20, has_action( 'wp_footer', array( $wp_customize, 'customize_preview_settings' ) ) );
 
 		// Test unauthorized user outside preview (no messenger_channel).
 		wp_set_current_user( self::$subscriber_user_id );
@@ -927,22 +927,22 @@ class Tests_WP_Customize_Manager extends WP_UnitTestCase {
 	 *
 	 * @ticket 30937
 	 * @ticket 40020
-	 * @covers WP_Customize_Manager::filter_iframe_security_headers()
+	 * @covers WP_Customize_Manager::filter_iframe_security_headers
 	 */
 	function test_filter_iframe_security_headers() {
 		$wp_customize = new WP_Customize_Manager();
 		$headers      = $wp_customize->filter_iframe_security_headers( array() );
 		$this->assertArrayHasKey( 'X-Frame-Options', $headers );
 		$this->assertArrayHasKey( 'Content-Security-Policy', $headers );
-		$this->assertEquals( 'SAMEORIGIN', $headers['X-Frame-Options'] );
-		$this->assertEquals( "frame-ancestors 'self'", $headers['Content-Security-Policy'] );
+		$this->assertSame( 'SAMEORIGIN', $headers['X-Frame-Options'] );
+		$this->assertSame( "frame-ancestors 'self'", $headers['Content-Security-Policy'] );
 	}
 
 	/**
 	 * Test WP_Customize_Manager::add_state_query_params().
 	 *
 	 * @ticket 30937
-	 * @covers WP_Customize_Manager::add_state_query_params()
+	 * @covers WP_Customize_Manager::add_state_query_params
 	 */
 	function test_add_state_query_params() {
 		$preview_theme = $this->get_inactive_core_theme();
@@ -961,8 +961,8 @@ class Tests_WP_Customize_Manager extends WP_UnitTestCase {
 		$this->assertArrayHasKey( 'customize_messenger_channel', $query_params );
 		$this->assertArrayHasKey( 'customize_changeset_uuid', $query_params );
 		$this->assertArrayNotHasKey( 'customize_theme', $query_params );
-		$this->assertEquals( $uuid, $query_params['customize_changeset_uuid'] );
-		$this->assertEquals( $messenger_channel, $query_params['customize_messenger_channel'] );
+		$this->assertSame( $uuid, $query_params['customize_changeset_uuid'] );
+		$this->assertSame( $messenger_channel, $query_params['customize_messenger_channel'] );
 
 		$uuid         = wp_generate_uuid4();
 		$wp_customize = new WP_Customize_Manager(
@@ -978,8 +978,8 @@ class Tests_WP_Customize_Manager extends WP_UnitTestCase {
 		$this->assertArrayNotHasKey( 'customize_messenger_channel', $query_params );
 		$this->assertArrayHasKey( 'customize_changeset_uuid', $query_params );
 		$this->assertArrayHasKey( 'customize_theme', $query_params );
-		$this->assertEquals( $uuid, $query_params['customize_changeset_uuid'] );
-		$this->assertEquals( $preview_theme, $query_params['customize_theme'] );
+		$this->assertSame( $uuid, $query_params['customize_changeset_uuid'] );
+		$this->assertSame( $preview_theme, $query_params['customize_theme'] );
 
 		$uuid         = wp_generate_uuid4();
 		$wp_customize = new WP_Customize_Manager(
@@ -1001,7 +1001,7 @@ class Tests_WP_Customize_Manager extends WP_UnitTestCase {
 	 * Test WP_Customize_Manager::save_changeset_post().
 	 *
 	 * @ticket 30937
-	 * @covers WP_Customize_Manager::save_changeset_post()
+	 * @covers WP_Customize_Manager::save_changeset_post
 	 */
 	function test_save_changeset_post_without_theme_activation() {
 		global $wp_customize;
@@ -1043,23 +1043,23 @@ class Tests_WP_Customize_Manager extends WP_UnitTestCase {
 		);
 		$this->assertInternalType( 'array', $r );
 
-		$this->assertEquals( $did_action['customize_save_validation_before'] + 1, did_action( 'customize_save_validation_before' ) );
+		$this->assertSame( $did_action['customize_save_validation_before'] + 1, did_action( 'customize_save_validation_before' ) );
 
 		$post_id = $manager->find_changeset_post_id( $uuid );
 		$this->assertNotNull( $post_id );
 		$saved_data = json_decode( get_post( $post_id )->post_content, true );
-		$this->assertEquals( $manager->unsanitized_post_values(), wp_list_pluck( $saved_data, 'value' ) );
-		$this->assertEquals( $pre_saved_data['blogname']['value'], $saved_data['blogname']['value'] );
-		$this->assertEquals( $pre_saved_data['blogdescription']['custom'], $saved_data['blogdescription']['custom'] );
+		$this->assertSame( $manager->unsanitized_post_values(), wp_list_pluck( $saved_data, 'value' ) );
+		$this->assertSame( $pre_saved_data['blogname']['value'], $saved_data['blogname']['value'] );
+		$this->assertSame( $pre_saved_data['blogdescription']['custom'], $saved_data['blogdescription']['custom'] );
 		foreach ( $saved_data as $setting_id => $setting_params ) {
 			$this->assertArrayHasKey( 'type', $setting_params );
-			$this->assertEquals( 'option', $setting_params['type'] );
+			$this->assertSame( 'option', $setting_params['type'] );
 			$this->assertArrayHasKey( 'user_id', $setting_params );
-			$this->assertEquals( self::$admin_user_id, $setting_params['user_id'] );
+			$this->assertSame( self::$admin_user_id, $setting_params['user_id'] );
 		}
-		$this->assertEquals( 'Auto Draft', get_post( $post_id )->post_title );
-		$this->assertEquals( 'auto-draft', get_post( $post_id )->post_status );
-		$this->assertEquals( $date, get_post( $post_id )->post_date_gmt );
+		$this->assertSame( 'Auto Draft', get_post( $post_id )->post_title );
+		$this->assertSame( 'auto-draft', get_post( $post_id )->post_status );
+		$this->assertSame( $date, get_post( $post_id )->post_date_gmt );
 		$this->assertNotEquals( 'Changeset Title', get_option( 'blogname' ) );
 		$this->assertArrayHasKey( 'setting_validities', $r );
 
@@ -1097,7 +1097,7 @@ class Tests_WP_Customize_Manager extends WP_UnitTestCase {
 			)
 		);
 		$this->assertInstanceOf( 'WP_Error', $r );
-		$this->assertEquals( 'transaction_fail', $r->get_error_code() );
+		$this->assertSame( 'transaction_fail', $r->get_error_code() );
 		$this->assertInternalType( 'array', $r->get_error_data() );
 		$this->assertArrayHasKey( 'setting_validities', $r->get_error_data() );
 		$error_data = $r->get_error_data();
@@ -1105,16 +1105,16 @@ class Tests_WP_Customize_Manager extends WP_UnitTestCase {
 		$this->assertTrue( $error_data['setting_validities']['blogname'] );
 		$this->assertArrayHasKey( 'foo_unauthorized', $error_data['setting_validities'] );
 		$this->assertInstanceOf( 'WP_Error', $error_data['setting_validities']['foo_unauthorized'] );
-		$this->assertEquals( 'unauthorized', $error_data['setting_validities']['foo_unauthorized']->get_error_code() );
+		$this->assertSame( 'unauthorized', $error_data['setting_validities']['foo_unauthorized']->get_error_code() );
 		$this->assertArrayHasKey( 'bar_unknown', $error_data['setting_validities'] );
 		$this->assertInstanceOf( 'WP_Error', $error_data['setting_validities']['bar_unknown'] );
-		$this->assertEquals( 'unrecognized', $error_data['setting_validities']['bar_unknown']->get_error_code() );
+		$this->assertSame( 'unrecognized', $error_data['setting_validities']['bar_unknown']->get_error_code() );
 		$this->assertArrayHasKey( 'baz_illegal', $error_data['setting_validities'] );
 		$this->assertInstanceOf( 'WP_Error', $error_data['setting_validities']['baz_illegal'] );
-		$this->assertEquals( 'illegal', $error_data['setting_validities']['baz_illegal']->get_error_code() );
+		$this->assertSame( 'illegal', $error_data['setting_validities']['baz_illegal']->get_error_code() );
 
 		// Since transactional, ensure no changes have been made.
-		$this->assertEquals( $previous_saved_data, json_decode( get_post( $post_id )->post_content, true ) );
+		$this->assertSame( $previous_saved_data, json_decode( get_post( $post_id )->post_content, true ) );
 
 		// Attempt a non-transactional/incremental update.
 		$manager      = new WP_Customize_Manager(
@@ -1143,7 +1143,7 @@ class Tests_WP_Customize_Manager extends WP_UnitTestCase {
 		$this->assertInstanceOf( 'WP_Error', $r['setting_validities']['bar_unknown'] );
 		$saved_data = json_decode( get_post( $post_id )->post_content, true );
 		$this->assertNotEquals( $previous_saved_data, $saved_data );
-		$this->assertEquals( 'Non-Transactional \o/ <script>unsanitized</script>', $saved_data['blogname']['value'] );
+		$this->assertSame( 'Non-Transactional \o/ <script>unsanitized</script>', $saved_data['blogname']['value'] );
 
 		// Ensure the filter applies.
 		$customize_changeset_save_data_call_count = $this->customize_changeset_save_data_call_count;
@@ -1158,7 +1158,7 @@ class Tests_WP_Customize_Manager extends WP_UnitTestCase {
 				),
 			)
 		);
-		$this->assertEquals( $customize_changeset_save_data_call_count + 1, $this->customize_changeset_save_data_call_count );
+		$this->assertSame( $customize_changeset_save_data_call_count + 1, $this->customize_changeset_save_data_call_count );
 
 		// Publish the changeset: actions will be doubled since also trashed.
 		$expected_actions = array(
@@ -1205,17 +1205,17 @@ class Tests_WP_Customize_Manager extends WP_UnitTestCase {
 			)
 		);
 		$this->assertInternalType( 'array', $r );
-		$this->assertEquals( 'Do it live \o/', get_option( 'blogname' ) );
-		$this->assertEquals( 'trash', get_post_status( $post_id ) ); // Auto-trashed.
-		$this->assertEquals( $original_capabilities, wp_list_pluck( $manager->settings(), 'capability' ) );
+		$this->assertSame( 'Do it live \o/', get_option( 'blogname' ) );
+		$this->assertSame( 'trash', get_post_status( $post_id ) ); // Auto-trashed.
+		$this->assertSame( $original_capabilities, wp_list_pluck( $manager->settings(), 'capability' ) );
 		$this->assertContains( '<script>', get_post( $post_id )->post_content );
-		$this->assertEquals( $manager->changeset_uuid(), get_post( $post_id )->post_name, 'Expected that the "__trashed" suffix to not be added.' );
+		$this->assertSame( $manager->changeset_uuid(), get_post( $post_id )->post_name, 'Expected that the "__trashed" suffix to not be added.' );
 		wp_set_current_user( self::$admin_user_id );
-		$this->assertEquals( 'publish', get_post_meta( $post_id, '_wp_trash_meta_status', true ) );
+		$this->assertSame( 'publish', get_post_meta( $post_id, '_wp_trash_meta_status', true ) );
 		$this->assertTrue( is_numeric( get_post_meta( $post_id, '_wp_trash_meta_time', true ) ) );
 
 		foreach ( array_keys( $expected_actions ) as $action_name ) {
-			$this->assertEquals( $expected_actions[ $action_name ] + $action_counts[ $action_name ], did_action( $action_name ), "Action: $action_name" );
+			$this->assertSame( $expected_actions[ $action_name ] + $action_counts[ $action_name ], did_action( $action_name ), "Action: $action_name" );
 		}
 
 		// Test revisions.
@@ -1240,6 +1240,171 @@ class Tests_WP_Customize_Manager extends WP_UnitTestCase {
 		$this->assertCount( 3, wp_get_post_revisions( $manager->changeset_post_id() ) );
 	}
 
+	/**
+	 * Test saving changeset post without Kses or other content_save_pre filters mutating content.
+	 *
+	 * @covers WP_Customize_Manager::save_changeset_post
+	 */
+	public function test_save_changeset_post_without_kses_corrupting_json() {
+		global $wp_customize;
+		$lesser_admin_user_id = self::factory()->user->create( array( 'role' => 'administrator' ) );
+
+		$uuid         = wp_generate_uuid4();
+		$wp_customize = new WP_Customize_Manager(
+			array(
+				'changeset_uuid' => $uuid,
+			)
+		);
+
+		add_filter( 'map_meta_cap', array( $this, 'filter_map_meta_cap_to_disallow_unfiltered_html' ), 10, 2 );
+		kses_init();
+		add_filter( 'content_save_pre', 'capital_P_dangit' );
+		add_post_type_support( 'customize_changeset', 'revisions' );
+
+		$options = array(
+			'custom_html_1' => '<script>document.write(" Wordpress 1")</script>',
+			'custom_html_2' => '<script>document.write(" Wordpress 2")</script>',
+			'custom_html_3' => '<script>document.write(" Wordpress 3")</script>',
+		);
+
+		// Populate setting as user who can bypass content_save_pre filter.
+		wp_set_current_user( self::$admin_user_id );
+		$wp_customize = $this->get_manager_for_testing_json_corruption_protection( $uuid );
+		$wp_customize->set_post_value( 'custom_html_1', $options['custom_html_1'] );
+		$wp_customize->save_changeset_post(
+			array(
+				'status' => 'draft',
+			)
+		);
+
+		// Populate setting as user who cannot bypass content_save_pre filter.
+		wp_set_current_user( $lesser_admin_user_id );
+		$wp_customize = $this->get_manager_for_testing_json_corruption_protection( $uuid );
+		$wp_customize->set_post_value( 'custom_html_2', $options['custom_html_2'] );
+		$wp_customize->save_changeset_post(
+			array(
+				'autosave' => true,
+			)
+		);
+
+		/*
+		 * Ensure that the unsanitized value (the "POST data") is preserved in the autosave revision.
+		 * The value is sent through the sanitize function when it is read from the changeset.
+		 */
+		$autosave_revision = wp_get_post_autosave( $wp_customize->changeset_post_id(), get_current_user_id() );
+		$saved_data        = json_decode( $autosave_revision->post_content, true );
+		$this->assertSame( $options['custom_html_1'], $saved_data['custom_html_1']['value'] );
+		$this->assertSame( $options['custom_html_2'], $saved_data['custom_html_2']['value'] );
+
+		// Update post to discard autosave.
+		$wp_customize->save_changeset_post(
+			array(
+				'status' => 'draft',
+			)
+		);
+
+		/*
+		 * Ensure that the unsanitized value (the "POST data") is preserved in the post content.
+		 * The value is sent through the sanitize function when it is read from the changeset.
+		 */
+		$wp_customize = $this->get_manager_for_testing_json_corruption_protection( $uuid );
+		$saved_data   = json_decode( get_post( $wp_customize->changeset_post_id() )->post_content, true );
+		$this->assertSame( $options['custom_html_1'], $saved_data['custom_html_1']['value'] );
+		$this->assertSame( $options['custom_html_2'], $saved_data['custom_html_2']['value'] );
+
+		/*
+		 * Ensure that the unsanitized value (the "POST data") is preserved in the revisions' content.
+		 * The value is sent through the sanitize function when it is read from the changeset.
+		 */
+		$revisions  = wp_get_post_revisions( $wp_customize->changeset_post_id() );
+		$revision   = array_shift( $revisions );
+		$saved_data = json_decode( $revision->post_content, true );
+		$this->assertSame( $options['custom_html_1'], $saved_data['custom_html_1']['value'] );
+		$this->assertSame( $options['custom_html_2'], $saved_data['custom_html_2']['value'] );
+
+		/*
+		 * Now when publishing the changeset, the unsanitized values will be read from the changeset
+		 * and sanitized according to the capabilities of the users who originally updated each
+		 * setting in the changeset to begin with.
+		 */
+		wp_set_current_user( $lesser_admin_user_id );
+		$wp_customize = $this->get_manager_for_testing_json_corruption_protection( $uuid );
+		$wp_customize->set_post_value( 'custom_html_3', $options['custom_html_3'] );
+		$wp_customize->save_changeset_post(
+			array(
+				'status' => 'publish',
+			)
+		);
+
+		// User saved as one who can bypass content_save_pre filter.
+		$this->assertContains( '<script>', get_option( 'custom_html_1' ) );
+		$this->assertContains( 'Wordpress', get_option( 'custom_html_1' ) ); // phpcs:ignore WordPress.WP.CapitalPDangit.Misspelled
+
+		// User saved as one who cannot bypass content_save_pre filter.
+		$this->assertNotContains( '<script>', get_option( 'custom_html_2' ) );
+		$this->assertContains( 'WordPress', get_option( 'custom_html_2' ) );
+
+		// User saved as one who also cannot bypass content_save_pre filter.
+		$this->assertNotContains( '<script>', get_option( 'custom_html_3' ) );
+		$this->assertContains( 'WordPress', get_option( 'custom_html_3' ) );
+	}
+
+	/**
+	 * Get a manager for testing JSON corruption protection.
+	 *
+	 * @param string $uuid UUID.
+	 * @return WP_Customize_Manager Manager.
+	 */
+	private function get_manager_for_testing_json_corruption_protection( $uuid ) {
+		global $wp_customize;
+		$wp_customize = new WP_Customize_Manager(
+			array(
+				'changeset_uuid' => $uuid,
+			)
+		);
+		for ( $i = 0; $i < 5; $i++ ) {
+			$wp_customize->add_setting(
+				sprintf( 'custom_html_%d', $i ),
+				array(
+					'type'              => 'option',
+					'sanitize_callback' => array( $this, 'apply_content_save_pre_filters_if_not_main_admin_user' ),
+				)
+			);
+		}
+		return $wp_customize;
+	}
+
+	/**
+	 * Sanitize content with Kses if the current user is not the main admin.
+	 *
+	 * @since 5.4.1
+	 *
+	 * @param string $content Content to sanitize.
+	 * @return string Sanitized content.
+	 */
+	public function apply_content_save_pre_filters_if_not_main_admin_user( $content ) {
+		if ( get_current_user_id() !== self::$admin_user_id ) {
+			$content = apply_filters( 'content_save_pre', $content );
+		}
+		return $content;
+	}
+
+	/**
+	 * Filter map_meta_cap to disallow unfiltered_html.
+	 *
+	 * @since 5.4.1
+	 *
+	 * @param array  $caps User's capabilities.
+	 * @param string $cap  Requested cap.
+	 * @return array Caps.
+	 */
+	public function filter_map_meta_cap_to_disallow_unfiltered_html( $caps, $cap ) {
+		if ( 'unfiltered_html' === $cap ) {
+			$caps = array( 'do_not_allow' );
+		}
+		return $caps;
+	}
+
 	/**
 	 * Call count for customize_changeset_save_data filter.
 	 *
@@ -1252,7 +1417,7 @@ class Tests_WP_Customize_Manager extends WP_UnitTestCase {
 	 *
 	 * @param array $data    Data.
 	 * @param array $context Context.
-	 * @returns array Data.
+	 * @return array Data.
 	 */
 	function filter_customize_changeset_save_data( $data, $context ) {
 		$this->customize_changeset_save_data_call_count += 1;
@@ -1281,8 +1446,8 @@ class Tests_WP_Customize_Manager extends WP_UnitTestCase {
 	 * Test WP_Customize_Manager::save_changeset_post().
 	 *
 	 * @ticket 30937
-	 * @covers WP_Customize_Manager::save_changeset_post()
-	 * @covers WP_Customize_Manager::update_stashed_theme_mod_settings()
+	 * @covers WP_Customize_Manager::save_changeset_post
+	 * @covers WP_Customize_Manager::update_stashed_theme_mod_settings
 	 */
 	function test_save_changeset_post_with_theme_activation() {
 		global $wp_customize;
@@ -1311,16 +1476,16 @@ class Tests_WP_Customize_Manager extends WP_UnitTestCase {
 		$post_values = $manager->unsanitized_post_values();
 		$manager->save_changeset_post( array( 'status' => 'publish' ) ); // Activate.
 
-		$this->assertEquals( '#123456', $post_values['background_color'] );
-		$this->assertEquals( $preview_theme, get_stylesheet() );
-		$this->assertEquals( 'Hello Preview Theme', get_option( 'blogname' ) );
+		$this->assertSame( '#123456', $post_values['background_color'] );
+		$this->assertSame( $preview_theme, get_stylesheet() );
+		$this->assertSame( 'Hello Preview Theme', get_option( 'blogname' ) );
 	}
 
 	/**
 	 * Test saving changesets with varying users and capabilities.
 	 *
 	 * @ticket 38705
-	 * @covers WP_Customize_Manager::save_changeset_post()
+	 * @covers WP_Customize_Manager::save_changeset_post
 	 */
 	function test_save_changeset_post_with_varying_users() {
 		global $wp_customize;
@@ -1348,15 +1513,15 @@ class Tests_WP_Customize_Manager extends WP_UnitTestCase {
 			)
 		);
 		$this->assertInternalType( 'array', $r );
-		$this->assertEquals(
+		$this->assertSame(
 			array_fill_keys( array( 'blogname', 'scratchpad', 'background_color' ), true ),
 			$r['setting_validities']
 		);
 		$post_id = $wp_customize->find_changeset_post_id( $uuid );
 		$data    = json_decode( get_post( $post_id )->post_content, true );
-		$this->assertEquals( self::$admin_user_id, $data['blogname']['user_id'] );
-		$this->assertEquals( self::$admin_user_id, $data['scratchpad']['user_id'] );
-		$this->assertEquals( self::$admin_user_id, $data[ $this->manager->get_stylesheet() . '::background_color' ]['user_id'] );
+		$this->assertSame( self::$admin_user_id, $data['blogname']['user_id'] );
+		$this->assertSame( self::$admin_user_id, $data['scratchpad']['user_id'] );
+		$this->assertSame( self::$admin_user_id, $data[ $this->manager->get_stylesheet() . '::background_color' ]['user_id'] );
 
 		// Attempt to save just one setting under a different user.
 		wp_set_current_user( $other_admin_user_id );
@@ -1375,17 +1540,17 @@ class Tests_WP_Customize_Manager extends WP_UnitTestCase {
 			)
 		);
 		$this->assertInternalType( 'array', $r );
-		$this->assertEquals(
+		$this->assertSame(
 			array_fill_keys( array( 'blogname', 'background_color' ), true ),
 			$r['setting_validities']
 		);
 		$data = json_decode( get_post( $post_id )->post_content, true );
-		$this->assertEquals( 'Admin 2 Title', $data['blogname']['value'] );
-		$this->assertEquals( $other_admin_user_id, $data['blogname']['user_id'] );
-		$this->assertEquals( 'Admin 1 Scratch', $data['scratchpad']['value'] );
-		$this->assertEquals( self::$admin_user_id, $data['scratchpad']['user_id'] );
-		$this->assertEquals( '#FFFFFF', $data[ $this->manager->get_stylesheet() . '::background_color' ]['value'] );
-		$this->assertEquals( $other_admin_user_id, $data[ $this->manager->get_stylesheet() . '::background_color' ]['user_id'] );
+		$this->assertSame( 'Admin 2 Title', $data['blogname']['value'] );
+		$this->assertSame( $other_admin_user_id, $data['blogname']['user_id'] );
+		$this->assertSame( 'Admin 1 Scratch', $data['scratchpad']['value'] );
+		$this->assertSame( self::$admin_user_id, $data['scratchpad']['user_id'] );
+		$this->assertSame( '#FFFFFF', $data[ $this->manager->get_stylesheet() . '::background_color' ]['value'] );
+		$this->assertSame( $other_admin_user_id, $data[ $this->manager->get_stylesheet() . '::background_color' ]['user_id'] );
 
 		// Attempt to save now as under-privileged user.
 		$wp_customize = $this->create_test_manager( $uuid );
@@ -1404,14 +1569,14 @@ class Tests_WP_Customize_Manager extends WP_UnitTestCase {
 			)
 		);
 		$this->assertInternalType( 'array', $r );
-		$this->assertEquals(
-			array_fill_keys( array( 'scratchpad', 'blogname' ), true ),
+		$this->assertSame(
+			array_fill_keys( array( 'blogname', 'scratchpad' ), true ),
 			$r['setting_validities']
 		);
 		$data = json_decode( get_post( $post_id )->post_content, true );
-		$this->assertEquals( $other_admin_user_id, $data['blogname']['user_id'], 'Expected setting to be untouched.' );
-		$this->assertEquals( self::$subscriber_user_id, $data['scratchpad']['user_id'] );
-		$this->assertEquals( $other_admin_user_id, $data[ $this->manager->get_stylesheet() . '::background_color' ]['user_id'] );
+		$this->assertSame( $other_admin_user_id, $data['blogname']['user_id'], 'Expected setting to be untouched.' );
+		$this->assertSame( self::$subscriber_user_id, $data['scratchpad']['user_id'] );
+		$this->assertSame( $other_admin_user_id, $data[ $this->manager->get_stylesheet() . '::background_color' ]['user_id'] );
 
 		// Manually update the changeset so that the user_id context is not included.
 		$data                             = json_decode( get_post( $post_id )->post_content, true );
@@ -1444,14 +1609,14 @@ class Tests_WP_Customize_Manager extends WP_UnitTestCase {
 		);
 		foreach ( array_keys( $data ) as $setting_id ) {
 			$setting_id = preg_replace( '/^.+::/', '', $setting_id );
-			$this->assertEquals( $save_counts[ $setting_id ] + 1, did_action( sprintf( 'customize_save_%s', $setting_id ) ), $setting_id );
+			$this->assertSame( $save_counts[ $setting_id ] + 1, did_action( sprintf( 'customize_save_%s', $setting_id ) ), $setting_id );
 		}
-		$this->assertEqualSets( array( 'blogname', 'blogdescription', 'background_color', 'scratchpad' ), array_keys( $this->filtered_setting_current_user_ids ) );
-		$this->assertEquals( $other_admin_user_id, $this->filtered_setting_current_user_ids['blogname'] );
-		$this->assertEquals( 0, $this->filtered_setting_current_user_ids['blogdescription'] );
-		$this->assertEquals( self::$subscriber_user_id, $this->filtered_setting_current_user_ids['scratchpad'] );
-		$this->assertEquals( $other_admin_user_id, $this->filtered_setting_current_user_ids['background_color'] );
-		$this->assertEquals( 'Subscriber Scratch', get_option( 'scratchpad' ) );
+		$this->assertSameSets( array( 'blogname', 'blogdescription', 'background_color', 'scratchpad' ), array_keys( $this->filtered_setting_current_user_ids ) );
+		$this->assertSame( $other_admin_user_id, $this->filtered_setting_current_user_ids['blogname'] );
+		$this->assertSame( 0, $this->filtered_setting_current_user_ids['blogdescription'] );
+		$this->assertSame( self::$subscriber_user_id, $this->filtered_setting_current_user_ids['scratchpad'] );
+		$this->assertSame( $other_admin_user_id, $this->filtered_setting_current_user_ids['background_color'] );
+		$this->assertSame( 'Subscriber Scratch', get_option( 'scratchpad' ) );
 	}
 
 	/**
@@ -1495,7 +1660,7 @@ class Tests_WP_Customize_Manager extends WP_UnitTestCase {
 	 *
 	 * @ticket 31089
 	 * @see wp_delete_auto_drafts()
-	 * @covers WP_Customize_Manager::save_changeset_post()
+	 * @covers WP_Customize_Manager::save_changeset_post
 	 */
 	function test_save_changeset_post_dumping_auto_draft_date() {
 		global $wp_customize;
@@ -1535,7 +1700,7 @@ class Tests_WP_Customize_Manager extends WP_UnitTestCase {
 	 * Test writing changesets when user supplies unchanged values.
 	 *
 	 * @ticket 38865
-	 * @covers WP_Customize_Manager::save_changeset_post()
+	 * @covers WP_Customize_Manager::save_changeset_post
 	 */
 	function test_save_changeset_post_with_unchanged_values() {
 		global $wp_customize;
@@ -1581,10 +1746,10 @@ class Tests_WP_Customize_Manager extends WP_UnitTestCase {
 			)
 		);
 		$this->assertInstanceOf( 'WP_Error', $r['setting_validities']['unknownsetting'] );
-		$this->assertEquals( 'unrecognized', $r['setting_validities']['unknownsetting']->get_error_code() );
+		$this->assertSame( 'unrecognized', $r['setting_validities']['unknownsetting']->get_error_code() );
 		$this->assertInstanceOf( 'WP_Error', $r['setting_validities']['blogterminated'] );
-		$this->assertEquals( 'unauthorized', $r['setting_validities']['blogterminated']->get_error_code() );
-		$this->assertEquals( $data, get_post( $wp_customize->changeset_post_id() )->post_content );
+		$this->assertSame( 'unauthorized', $r['setting_validities']['blogterminated']->get_error_code() );
+		$this->assertSame( $data, get_post( $wp_customize->changeset_post_id() )->post_content );
 
 		// Test submitting data with changed and unchanged settings, creating a new instance so that the post_values are cleared.
 		wp_set_current_user( $other_admin_user_id );
@@ -1611,22 +1776,22 @@ class Tests_WP_Customize_Manager extends WP_UnitTestCase {
 		);
 
 		// Note that blogfounded is not included among setting_validities because no value was supplied and it is not unrecognized/unauthorized.
-		$this->assertEquals( array_fill_keys( array( 'blogname', 'blogdescription', 'scratchpad' ), true ), $r['setting_validities'], 'Expected blogname even though unchanged.' );
+		$this->assertSame( array_fill_keys( array( 'blogname', 'blogdescription', 'scratchpad' ), true ), $r['setting_validities'], 'Expected blogname even though unchanged.' );
 
 		$data = json_decode( get_post( $wp_customize->changeset_post_id() )->post_content, true );
 
-		$this->assertEquals( self::$admin_user_id, $data['blogname']['user_id'], 'Expected unchanged user_id since value was unchanged.' );
-		$this->assertEquals( $other_admin_user_id, $data['blogdescription']['user_id'] );
-		$this->assertEquals( $other_admin_user_id, $data['blogfounded']['user_id'] );
-		$this->assertEquals( $other_admin_user_id, $data['scratchpad']['user_id'] );
+		$this->assertSame( self::$admin_user_id, $data['blogname']['user_id'], 'Expected unchanged user_id since value was unchanged.' );
+		$this->assertSame( $other_admin_user_id, $data['blogdescription']['user_id'] );
+		$this->assertSame( $other_admin_user_id, $data['blogfounded']['user_id'] );
+		$this->assertSame( $other_admin_user_id, $data['scratchpad']['user_id'] );
 	}
 
 	/**
 	 * Test writing changesets when user supplies unchanged values.
 	 *
 	 * @ticket 39896
-	 * @covers WP_Customize_Manager::save_changeset_post()
-	 * @covers WP_Customize_Manager::grant_edit_post_capability_for_changeset()
+	 * @covers WP_Customize_Manager::save_changeset_post
+	 * @covers WP_Customize_Manager::grant_edit_post_capability_for_changeset
 	 */
 	public function test_save_changeset_post_with_autosave() {
 		wp_set_current_user( self::$admin_user_id );
@@ -1690,7 +1855,7 @@ class Tests_WP_Customize_Manager extends WP_UnitTestCase {
 			)
 		);
 		$this->assertInstanceOf( 'WP_Error', $r );
-		$this->assertEquals( 'illegal_autosave_with_date_gmt', $r->get_error_code() );
+		$this->assertSame( 'illegal_autosave_with_date_gmt', $r->get_error_code() );
 
 		// Fail: illegal_autosave_with_status.
 		$r = $wp_customize->save_changeset_post(
@@ -1699,7 +1864,7 @@ class Tests_WP_Customize_Manager extends WP_UnitTestCase {
 				'status'   => 'pending',
 			)
 		);
-		$this->assertEquals( 'illegal_autosave_with_status', $r->get_error_code() );
+		$this->assertSame( 'illegal_autosave_with_status', $r->get_error_code() );
 
 		// Fail: illegal_autosave_with_non_current_user.
 		$r = $wp_customize->save_changeset_post(
@@ -1708,7 +1873,7 @@ class Tests_WP_Customize_Manager extends WP_UnitTestCase {
 				'user_id'  => $this->factory()->user->create( array( 'role' => 'administrator' ) ),
 			)
 		);
-		$this->assertEquals( 'illegal_autosave_with_non_current_user', $r->get_error_code() );
+		$this->assertSame( 'illegal_autosave_with_non_current_user', $r->get_error_code() );
 
 		// Try autosave.
 		$this->assertFalse( wp_get_post_autosave( $changeset_post_id, get_current_user_id() ) );
@@ -1735,7 +1900,7 @@ class Tests_WP_Customize_Manager extends WP_UnitTestCase {
 	 * Test passing `null` for a setting ID to remove it from the changeset.
 	 *
 	 * @ticket 41621
-	 * @covers WP_Customize_Manager::save_changeset_post()
+	 * @covers WP_Customize_Manager::save_changeset_post
 	 */
 	function test_remove_setting_from_changeset_post() {
 		$uuid = wp_generate_uuid4();
@@ -1771,7 +1936,7 @@ class Tests_WP_Customize_Manager extends WP_UnitTestCase {
 	 * Test writing changesets and publishing with users who can unfiltered_html and those who cannot.
 	 *
 	 * @ticket 38705
-	 * @covers WP_Customize_Manager::save_changeset_post()
+	 * @covers WP_Customize_Manager::save_changeset_post
 	 */
 	function test_save_changeset_post_with_varying_unfiltered_html_cap() {
 		global $wp_customize;
@@ -1795,7 +1960,7 @@ class Tests_WP_Customize_Manager extends WP_UnitTestCase {
 		$wp_customize = new WP_Customize_Manager( array( 'changeset_uuid' => $wp_customize->changeset_uuid() ) );
 		do_action( 'customize_register', $wp_customize );
 		$wp_customize->save_changeset_post( array( 'status' => 'publish' ) );
-		$this->assertEquals( 'Unfiltered<script>evil</script>', get_option( 'scratchpad' ) );
+		$this->assertSame( 'Unfiltered<script>evil</script>', get_option( 'scratchpad' ) );
 
 		// Attempt scratchpad with user who doesn't have unfiltered_html.
 		update_option( 'scratchpad', '' );
@@ -1811,7 +1976,7 @@ class Tests_WP_Customize_Manager extends WP_UnitTestCase {
 		$wp_customize = new WP_Customize_Manager( array( 'changeset_uuid' => $wp_customize->changeset_uuid() ) );
 		do_action( 'customize_register', $wp_customize );
 		$wp_customize->save_changeset_post( array( 'status' => 'publish' ) );
-		$this->assertEquals( 'Unfilteredevil', get_option( 'scratchpad' ) );
+		$this->assertSame( 'Unfilteredevil', get_option( 'scratchpad' ) );
 
 		// Attempt publishing scratchpad as anonymous user when changeset was set by privileged user.
 		update_option( 'scratchpad', '' );
@@ -1828,9 +1993,9 @@ class Tests_WP_Customize_Manager extends WP_UnitTestCase {
 		wp_set_current_user( 0 );
 		$wp_customize = null;
 		unset( $GLOBALS['wp_actions']['customize_register'] );
-		$this->assertEquals( 'Unfilteredevil', apply_filters( 'content_save_pre', 'Unfiltered<script>evil</script>' ) );
+		$this->assertSame( 'Unfilteredevil', apply_filters( 'content_save_pre', 'Unfiltered<script>evil</script>' ) );
 		wp_publish_post( $changeset_post_id ); // @todo If wp_update_post() is used here, then kses will corrupt the post_content.
-		$this->assertEquals( 'Unfiltered<script>evil</script>', get_option( 'scratchpad' ) );
+		$this->assertSame( 'Unfiltered<script>evil</script>', get_option( 'scratchpad' ) );
 	}
 
 	/**
@@ -1841,7 +2006,7 @@ class Tests_WP_Customize_Manager extends WP_UnitTestCase {
 	 * publishing
 	 *
 	 * @ticket 39221
-	 * @covers ::_wp_customize_publish_changeset()
+	 * @covers ::_wp_customize_publish_changeset
 	 * @see WP_Customize_Widgets::schedule_customize_register()
 	 * @see WP_Customize_Widgets::customize_register()
 	 */
@@ -1882,7 +2047,7 @@ class Tests_WP_Customize_Manager extends WP_UnitTestCase {
 
 		// Ensure that the value has actually been written to the DB.
 		$updated_sidebars_widgets = get_option( 'sidebars_widgets' );
-		$this->assertEquals( $new_sidebar_1, $updated_sidebars_widgets['sidebar-1'] );
+		$this->assertSame( $new_sidebar_1, $updated_sidebars_widgets['sidebar-1'] );
 	}
 
 	/**
@@ -1934,7 +2099,7 @@ class Tests_WP_Customize_Manager extends WP_UnitTestCase {
 
 		$r = $manager->save_changeset_post( $args );
 		$this->assertInstanceOf( 'WP_Error', $r );
-		$this->assertEquals( 'json_parse_error', $r->get_error_code() );
+		$this->assertSame( 'json_parse_error', $r->get_error_code() );
 
 		wp_update_post(
 			array(
@@ -1944,7 +2109,7 @@ class Tests_WP_Customize_Manager extends WP_UnitTestCase {
 		);
 		$r = $manager->save_changeset_post( $args );
 		$this->assertInstanceOf( 'WP_Error', $r );
-		$this->assertEquals( 'expected_array', $r->get_error_code() );
+		$this->assertSame( 'expected_array', $r->get_error_code() );
 	}
 
 	/**
@@ -2027,7 +2192,7 @@ class Tests_WP_Customize_Manager extends WP_UnitTestCase {
 	 * Test WP_Customize_Manager::is_cross_domain().
 	 *
 	 * @ticket 30937
-	 * @covers WP_Customize_Manager::is_cross_domain()
+	 * @covers WP_Customize_Manager::is_cross_domain
 	 */
 	function test_is_cross_domain() {
 		$wp_customize = new WP_Customize_Manager();
@@ -2045,18 +2210,18 @@ class Tests_WP_Customize_Manager extends WP_UnitTestCase {
 	 * Test WP_Customize_Manager::get_allowed_urls().
 	 *
 	 * @ticket 30937
-	 * @covers WP_Customize_Manager::get_allowed_urls()
+	 * @covers WP_Customize_Manager::get_allowed_urls
 	 */
 	function test_get_allowed_urls() {
 		$wp_customize = new WP_Customize_Manager();
 		$this->assertFalse( is_ssl() );
 		$this->assertFalse( $wp_customize->is_cross_domain() );
 		$allowed = $wp_customize->get_allowed_urls();
-		$this->assertEquals( $allowed, array( home_url( '/', 'http' ) ) );
+		$this->assertSame( $allowed, array( home_url( '/', 'http' ) ) );
 
 		add_filter( 'customize_allowed_urls', array( $this, 'filter_customize_allowed_urls' ) );
 		$allowed = $wp_customize->get_allowed_urls();
-		$this->assertEqualSets( $allowed, array( 'http://headless.example.com/', home_url( '/', 'http' ) ) );
+		$this->assertSameSets( $allowed, array( 'http://headless.example.com/', home_url( '/', 'http' ) ) );
 	}
 
 	/**
@@ -2111,12 +2276,12 @@ class Tests_WP_Customize_Manager extends WP_UnitTestCase {
 		);
 		$_POST['customized'] = wp_slash( wp_json_encode( $customized ) );
 		$post_values         = $manager->unsanitized_post_values();
-		$this->assertEquals( $customized, $post_values );
+		$this->assertSame( $customized, $post_values );
 		$this->assertEmpty( $manager->unsanitized_post_values( array( 'exclude_post_data' => true ) ) );
 
 		$manager->set_post_value( 'foo', 'BAR' );
 		$post_values = $manager->unsanitized_post_values();
-		$this->assertEquals( 'BAR', $post_values['foo'] );
+		$this->assertSame( 'BAR', $post_values['foo'] );
 		$this->assertEmpty( $manager->unsanitized_post_values( array( 'exclude_post_data' => true ) ) );
 
 		// If user is unprivileged, the post data is ignored.
@@ -2128,7 +2293,7 @@ class Tests_WP_Customize_Manager extends WP_UnitTestCase {
 	 * Test WP_Customize_Manager::unsanitized_post_values().
 	 *
 	 * @ticket 30937
-	 * @covers WP_Customize_Manager::unsanitized_post_values()
+	 * @covers WP_Customize_Manager::unsanitized_post_values
 	 */
 	function test_unsanitized_post_values_with_changeset_and_stashed_theme_mods() {
 		wp_set_current_user( self::$admin_user_id );
@@ -2180,14 +2345,14 @@ class Tests_WP_Customize_Manager extends WP_UnitTestCase {
 
 		$this->assertArrayNotHasKey( 'background_color', $manager->unsanitized_post_values() );
 
-		$this->assertEquals(
+		$this->assertSame(
 			array(
 				'blogname'        => 'Changeset Title',
 				'blogdescription' => 'Post Input Tagline',
 			),
 			$manager->unsanitized_post_values()
 		);
-		$this->assertEquals(
+		$this->assertSame(
 			array(
 				'blogdescription' => 'Post Input Tagline',
 			),
@@ -2195,7 +2360,7 @@ class Tests_WP_Customize_Manager extends WP_UnitTestCase {
 		);
 
 		$manager->set_post_value( 'blogdescription', 'Post Override Tagline' );
-		$this->assertEquals(
+		$this->assertSame(
 			array(
 				'blogname'        => 'Changeset Title',
 				'blogdescription' => 'Post Override Tagline',
@@ -2203,7 +2368,7 @@ class Tests_WP_Customize_Manager extends WP_UnitTestCase {
 			$manager->unsanitized_post_values()
 		);
 
-		$this->assertEquals(
+		$this->assertSame(
 			array(
 				'blogname'        => 'Changeset Title',
 				'blogdescription' => 'Changeset Tagline',
@@ -2236,7 +2401,7 @@ class Tests_WP_Customize_Manager extends WP_UnitTestCase {
 		);
 		$this->assertNotEmpty( $values );
 		$this->assertArrayHasKey( 'background_color', $values );
-		$this->assertEquals( '#000000', $values['background_color'] );
+		$this->assertSame( '#000000', $values['background_color'] );
 
 		$values = $manager->unsanitized_post_values(
 			array(
@@ -2265,12 +2430,12 @@ class Tests_WP_Customize_Manager extends WP_UnitTestCase {
 
 		$manager->add_setting( 'foo', array( 'default' => 'foo_default' ) );
 		$foo_setting = $manager->get_setting( 'foo' );
-		$this->assertEquals( 'foo_default', $manager->get_setting( 'foo' )->value(), 'Expected non-previewed setting to return default when value() method called.' );
-		$this->assertEquals( $posted_settings['foo'], $manager->post_value( $foo_setting, 'post_value_foo_default' ), 'Expected post_value($foo_setting) to return value supplied in $_POST[customized][foo]' );
+		$this->assertSame( 'foo_default', $manager->get_setting( 'foo' )->value(), 'Expected non-previewed setting to return default when value() method called.' );
+		$this->assertSame( $posted_settings['foo'], $manager->post_value( $foo_setting, 'post_value_foo_default' ), 'Expected post_value($foo_setting) to return value supplied in $_POST[customized][foo]' );
 
 		$manager->add_setting( 'bar', array( 'default' => 'bar_default' ) );
 		$bar_setting = $manager->get_setting( 'bar' );
-		$this->assertEquals( 'post_value_bar_default', $manager->post_value( $bar_setting, 'post_value_bar_default' ), 'Expected post_value($bar_setting, $default) to return $default since no value supplied in $_POST[customized][bar]' );
+		$this->assertSame( 'post_value_bar_default', $manager->post_value( $bar_setting, 'post_value_bar_default' ), 'Expected post_value($bar_setting, $default) to return $default since no value supplied in $_POST[customized][bar]' );
 	}
 
 	/**
@@ -2288,26 +2453,26 @@ class Tests_WP_Customize_Manager extends WP_UnitTestCase {
 				'sanitize_callback' => array( $this, 'filter_customize_sanitize_foo' ),
 			)
 		);
-		$this->assertEquals( $default_value, $this->manager->post_value( $setting, $default_value ) );
-		$this->assertEquals( $default_value, $setting->post_value( $default_value ) );
+		$this->assertSame( $default_value, $this->manager->post_value( $setting, $default_value ) );
+		$this->assertSame( $default_value, $setting->post_value( $default_value ) );
 
 		$post_value = 'bar';
 		$this->manager->set_post_value( 'foo', $post_value );
-		$this->assertEquals( strtoupper( $post_value ), $this->manager->post_value( $setting, $default_value ) );
-		$this->assertEquals( strtoupper( $post_value ), $setting->post_value( $default_value ) );
+		$this->assertSame( strtoupper( $post_value ), $this->manager->post_value( $setting, $default_value ) );
+		$this->assertSame( strtoupper( $post_value ), $setting->post_value( $default_value ) );
 
 		$this->manager->set_post_value( 'foo', 'return_wp_error_in_sanitize' );
-		$this->assertEquals( $default_value, $this->manager->post_value( $setting, $default_value ) );
-		$this->assertEquals( $default_value, $setting->post_value( $default_value ) );
+		$this->assertSame( $default_value, $this->manager->post_value( $setting, $default_value ) );
+		$this->assertSame( $default_value, $setting->post_value( $default_value ) );
 
 		$this->manager->set_post_value( 'foo', 'return_null_in_sanitize' );
-		$this->assertEquals( $default_value, $this->manager->post_value( $setting, $default_value ) );
-		$this->assertEquals( $default_value, $setting->post_value( $default_value ) );
+		$this->assertSame( $default_value, $this->manager->post_value( $setting, $default_value ) );
+		$this->assertSame( $default_value, $setting->post_value( $default_value ) );
 
 		$post_value = '<script>evil</script>';
 		$this->manager->set_post_value( 'foo', $post_value );
-		$this->assertEquals( $default_value, $this->manager->post_value( $setting, $default_value ) );
-		$this->assertEquals( $default_value, $setting->post_value( $default_value ) );
+		$this->assertSame( $default_value, $this->manager->post_value( $setting, $default_value ) );
+		$this->assertSame( $default_value, $setting->post_value( $default_value ) );
 	}
 
 	/**
@@ -2357,8 +2522,8 @@ class Tests_WP_Customize_Manager extends WP_UnitTestCase {
 				'sanitize_callback' => array( $this, 'filter_customize_sanitize_numeric' ),
 			)
 		);
-		$this->assertEquals( $default_value, $this->manager->post_value( $setting, $default_value ) );
-		$this->assertEquals( $default_value, $setting->post_value( $default_value ) );
+		$this->assertSame( $default_value, $this->manager->post_value( $setting, $default_value ) );
+		$this->assertSame( $default_value, $setting->post_value( $default_value ) );
 
 		$post_value = '42';
 		$this->manager->set_post_value( 'numeric', $post_value );
@@ -2409,7 +2574,7 @@ class Tests_WP_Customize_Manager extends WP_UnitTestCase {
 		$this->manager->set_post_value( 'foo', $post_value );
 		$validities = $this->manager->validate_setting_values( $this->manager->unsanitized_post_values() );
 		$this->assertCount( 1, $validities );
-		$this->assertEquals( array( 'foo' => true ), $validities );
+		$this->assertSame( array( 'foo' => true ), $validities );
 
 		$this->manager->set_post_value( 'foo', 'return_wp_error_in_sanitize' );
 		$invalid_settings = $this->manager->validate_setting_values( $this->manager->unsanitized_post_values() );
@@ -2417,8 +2582,8 @@ class Tests_WP_Customize_Manager extends WP_UnitTestCase {
 		$this->assertArrayHasKey( $setting->id, $invalid_settings );
 		$this->assertInstanceOf( 'WP_Error', $invalid_settings[ $setting->id ] );
 		$error = $invalid_settings[ $setting->id ];
-		$this->assertEquals( 'invalid_value_in_sanitize', $error->get_error_code() );
-		$this->assertEquals( array( 'source' => 'filter_customize_sanitize_foo' ), $error->get_error_data() );
+		$this->assertSame( 'invalid_value_in_sanitize', $error->get_error_code() );
+		$this->assertSame( array( 'source' => 'filter_customize_sanitize_foo' ), $error->get_error_data() );
 
 		$this->manager->set_post_value( 'foo', 'return_null_in_sanitize' );
 		$invalid_settings = $this->manager->validate_setting_values( $this->manager->unsanitized_post_values() );
@@ -2434,15 +2599,15 @@ class Tests_WP_Customize_Manager extends WP_UnitTestCase {
 		$this->assertArrayHasKey( $setting->id, $invalid_settings );
 		$this->assertInstanceOf( 'WP_Error', $invalid_settings[ $setting->id ] );
 		$error = $invalid_settings[ $setting->id ];
-		$this->assertEquals( 'invalid_value_in_validate', $error->get_error_code() );
-		$this->assertEquals( array( 'source' => 'filter_customize_validate_foo' ), $error->get_error_data() );
+		$this->assertSame( 'invalid_value_in_validate', $error->get_error_code() );
+		$this->assertSame( array( 'source' => 'filter_customize_validate_foo' ), $error->get_error_data() );
 	}
 
 	/**
 	 * Test WP_Customize_Manager::validate_setting_values().
 	 *
 	 * @ticket 37638
-	 * @covers WP_Customize_Manager::validate_setting_values()
+	 * @covers WP_Customize_Manager::validate_setting_values
 	 */
 	function test_late_validate_setting_values() {
 		$setting = new Test_Setting_Without_Applying_Validate_Filter( $this->manager, 'required' );
@@ -2461,14 +2626,14 @@ class Tests_WP_Customize_Manager extends WP_UnitTestCase {
 		$setting_validities = $this->manager->validate_setting_values( array( $setting->id => 'bad' ) );
 		$validity           = $setting_validities[ $setting->id ];
 		$this->assertInstanceOf( 'WP_Error', $validity );
-		$this->assertEquals( 'minlength', $validity->get_error_code() );
+		$this->assertSame( 'minlength', $validity->get_error_code() );
 	}
 
 	/**
 	 * Test WP_Customize_Manager::validate_setting_values().
 	 *
 	 * @ticket 30937
-	 * @covers WP_Customize_Manager::validate_setting_values()
+	 * @covers WP_Customize_Manager::validate_setting_values
 	 */
 	function test_validate_setting_values_args() {
 		wp_set_current_user( self::$admin_user_id );
@@ -2485,7 +2650,7 @@ class Tests_WP_Customize_Manager extends WP_UnitTestCase {
 		$this->assertArrayHasKey( 'unknown', $validities );
 		$error = $validities['unknown'];
 		$this->assertInstanceOf( 'WP_Error', $error );
-		$this->assertEquals( 'unrecognized', $error->get_error_code() );
+		$this->assertSame( 'unrecognized', $error->get_error_code() );
 
 		$this->manager->get_setting( 'blogname' )->capability = 'do_not_allow';
 		$validities = $this->manager->validate_setting_values( array( 'blogname' => 'X' ), array( 'validate_capability' => false ) );
@@ -2495,7 +2660,7 @@ class Tests_WP_Customize_Manager extends WP_UnitTestCase {
 		$this->assertArrayHasKey( 'blogname', $validities );
 		$error = $validities['blogname'];
 		$this->assertInstanceOf( 'WP_Error', $error );
-		$this->assertEquals( 'unauthorized', $error->get_error_code() );
+		$this->assertSame( 'unauthorized', $error->get_error_code() );
 	}
 
 	/**
@@ -2534,7 +2699,7 @@ class Tests_WP_Customize_Manager extends WP_UnitTestCase {
 		$this->manager->set_post_value( 'numeric', $post_value );
 		$validities = $this->manager->validate_setting_values( $this->manager->unsanitized_post_values() );
 		$this->assertCount( 1, $validities );
-		$this->assertEquals( array( 'numeric' => true ), $validities );
+		$this->assertSame( array( 'numeric' => true ), $validities );
 	}
 
 	/**
@@ -2553,12 +2718,12 @@ class Tests_WP_Customize_Manager extends WP_UnitTestCase {
 		foreach ( $error->errors as $code => $messages ) {
 			$this->assertArrayHasKey( $code, $validity );
 			$this->assertInternalType( 'array', $validity[ $code ] );
-			$this->assertEquals( join( ' ', $messages ), $validity[ $code ]['message'] );
+			$this->assertSame( join( ' ', $messages ), $validity[ $code ]['message'] );
 			$this->assertArrayHasKey( 'data', $validity[ $code ] );
-			$this->assertEquals( $validity[ $code ]['data'], $error->get_error_data( $code ) );
+			$this->assertSame( $validity[ $code ]['data'], $error->get_error_data( $code ) );
 		}
 		$this->assertArrayHasKey( 'number', $validity['bad_number']['data'] );
-		$this->assertEquals( 123, $validity['bad_number']['data']['number'] );
+		$this->assertSame( 123, $validity['bad_number']['data']['number'] );
 	}
 
 	/**
@@ -2581,16 +2746,16 @@ class Tests_WP_Customize_Manager extends WP_UnitTestCase {
 		add_action( 'customize_post_value_set_foo', array( $this, 'capture_customize_post_value_set_actions' ), 10, 2 );
 		$this->manager->set_post_value( $setting->id, '123abc' );
 		$this->assertCount( 2, $this->captured_customize_post_value_set_actions );
-		$this->assertEquals( 'customize_post_value_set_foo', $this->captured_customize_post_value_set_actions[0]['action'] );
-		$this->assertEquals( 'customize_post_value_set', $this->captured_customize_post_value_set_actions[1]['action'] );
-		$this->assertEquals( array( '123abc', $this->manager ), $this->captured_customize_post_value_set_actions[0]['args'] );
-		$this->assertEquals( array( $setting->id, '123abc', $this->manager ), $this->captured_customize_post_value_set_actions[1]['args'] );
+		$this->assertSame( 'customize_post_value_set_foo', $this->captured_customize_post_value_set_actions[0]['action'] );
+		$this->assertSame( 'customize_post_value_set', $this->captured_customize_post_value_set_actions[1]['action'] );
+		$this->assertSame( array( '123abc', $this->manager ), $this->captured_customize_post_value_set_actions[0]['args'] );
+		$this->assertSame( array( $setting->id, '123abc', $this->manager ), $this->captured_customize_post_value_set_actions[1]['args'] );
 
 		$unsanitized = $this->manager->unsanitized_post_values();
 		$this->assertArrayHasKey( $setting->id, $unsanitized );
 
-		$this->assertEquals( '123abc', $unsanitized[ $setting->id ] );
-		$this->assertEquals( 123, $setting->post_value() );
+		$this->assertSame( '123abc', $unsanitized[ $setting->id ] );
+		$this->assertSame( 123, $setting->post_value() );
 	}
 
 	/**
@@ -2641,15 +2806,15 @@ class Tests_WP_Customize_Manager extends WP_UnitTestCase {
 		$this->action_customize_register_for_dynamic_settings();
 		$manager->add_dynamic_settings( $setting_ids );
 		$this->assertNotEmpty( $manager->get_setting( 'bar' ), 'Expected bar setting to be created since filters were added.' );
-		$this->assertEquals( 'foo_default', $manager->get_setting( 'foo' )->default, 'Expected static foo setting to not get overridden by dynamic setting.' );
-		$this->assertEquals( 'dynamic_bar_default', $manager->get_setting( 'bar' )->default, 'Expected dynamic setting bar to have default providd by filter.' );
+		$this->assertSame( 'foo_default', $manager->get_setting( 'foo' )->default, 'Expected static foo setting to not get overridden by dynamic setting.' );
+		$this->assertSame( 'dynamic_bar_default', $manager->get_setting( 'bar' )->default, 'Expected dynamic setting bar to have default providd by filter.' );
 	}
 
 	/**
 	 * Test WP_Customize_Manager::has_published_pages().
 	 *
 	 * @ticket 38013
-	 * @covers WP_Customize_Manager::has_published_pages()
+	 * @covers WP_Customize_Manager::has_published_pages
 	 */
 	function test_has_published_pages() {
 		foreach ( get_pages() as $page ) {
@@ -2678,7 +2843,7 @@ class Tests_WP_Customize_Manager extends WP_UnitTestCase {
 	 * Ensure that page stubs created via nav menus will cause has_published_pages to return true.
 	 *
 	 * @ticket 38013
-	 * @covers WP_Customize_Manager::has_published_pages()
+	 * @covers WP_Customize_Manager::has_published_pages
 	 */
 	function test_has_published_pages_when_nav_menus_created_posts() {
 		foreach ( get_pages() as $page ) {
@@ -2760,7 +2925,7 @@ class Tests_WP_Customize_Manager extends WP_UnitTestCase {
 	 * @return string
 	 */
 	function filter_customize_dynamic_setting_class_for_test_dynamic_settings( $setting_class, $setting_id, $setting_args ) {
-		$this->assertEquals( 'WP_Customize_Setting', $setting_class );
+		$this->assertSame( 'WP_Customize_Setting', $setting_class );
 		$this->assertInternalType( 'string', $setting_id );
 		$this->assertInternalType( 'array', $setting_args );
 		return $setting_class;
@@ -2783,12 +2948,12 @@ class Tests_WP_Customize_Manager extends WP_UnitTestCase {
 	 * @see WP_Customize_Manager::set_preview_url()
 	 */
 	function test_preview_url() {
-		$this->assertEquals( home_url( '/' ), $this->manager->get_preview_url() );
+		$this->assertSame( home_url( '/' ), $this->manager->get_preview_url() );
 		$preview_url = home_url( '/foo/bar/baz/' );
 		$this->manager->set_preview_url( $preview_url );
-		$this->assertEquals( $preview_url, $this->manager->get_preview_url() );
+		$this->assertSame( $preview_url, $this->manager->get_preview_url() );
 		$this->manager->set_preview_url( 'http://illegalsite.example.com/food/' );
-		$this->assertEquals( home_url( '/' ), $this->manager->get_preview_url() );
+		$this->assertSame( home_url( '/' ), $this->manager->get_preview_url() );
 	}
 
 	/**
@@ -2799,34 +2964,42 @@ class Tests_WP_Customize_Manager extends WP_UnitTestCase {
 	 */
 	function test_return_url() {
 		wp_set_current_user( self::factory()->user->create( array( 'role' => 'author' ) ) );
-		$this->assertEquals( home_url( '/' ), $this->manager->get_return_url() );
+		$this->assertSame( home_url( '/' ), $this->manager->get_return_url() );
 
 		wp_set_current_user( self::$admin_user_id );
 		$this->assertTrue( current_user_can( 'edit_theme_options' ) );
-		$this->assertEquals( home_url( '/' ), $this->manager->get_return_url() );
+		$this->assertSame( home_url( '/' ), $this->manager->get_return_url() );
 
 		$preview_url = home_url( '/foo/' );
 		$this->manager->set_preview_url( $preview_url );
-		$this->assertEquals( $preview_url, $this->manager->get_return_url() );
+		$this->assertSame( $preview_url, $this->manager->get_return_url() );
 
 		$_SERVER['HTTP_REFERER'] = wp_slash( admin_url( 'customize.php' ) );
-		$this->assertEquals( $preview_url, $this->manager->get_return_url() );
+		$this->assertSame( $preview_url, $this->manager->get_return_url() );
 
 		// See #35355.
 		$_SERVER['HTTP_REFERER'] = wp_slash( admin_url( 'wp-login.php' ) );
-		$this->assertEquals( $preview_url, $this->manager->get_return_url() );
+		$this->assertSame( $preview_url, $this->manager->get_return_url() );
 
 		$url                     = home_url( '/referred/' );
 		$_SERVER['HTTP_REFERER'] = wp_slash( $url );
-		$this->assertEquals( $url, $this->manager->get_return_url() );
+		$this->assertSame( $url, $this->manager->get_return_url() );
 
 		$url                     = 'http://badreferer.example.com/';
 		$_SERVER['HTTP_REFERER'] = wp_slash( $url );
 		$this->assertNotEquals( $url, $this->manager->get_return_url() );
-		$this->assertEquals( $preview_url, $this->manager->get_return_url() );
+		$this->assertSame( $preview_url, $this->manager->get_return_url() );
 
 		$this->manager->set_return_url( admin_url( 'edit.php?trashed=1' ) );
-		$this->assertEquals( admin_url( 'edit.php' ), $this->manager->get_return_url() );
+		$this->assertSame( admin_url( 'edit.php' ), $this->manager->get_return_url() );
+	}
+
+	/**
+	 * @ticket 46686
+	 */
+	function test_return_url_with_deactivated_theme() {
+		$this->manager->set_return_url( admin_url( 'themes.php?page=mytheme_documentation' ) );
+		$this->assertSame( admin_url( 'themes.php' ), $this->manager->get_return_url() );
 	}
 
 	/**
@@ -2843,15 +3016,15 @@ class Tests_WP_Customize_Manager extends WP_UnitTestCase {
 
 		$autofocus = array( 'control' => 'blogname' );
 		$this->manager->set_autofocus( $autofocus );
-		$this->assertEquals( $autofocus, $this->manager->get_autofocus() );
+		$this->assertSame( $autofocus, $this->manager->get_autofocus() );
 
 		$autofocus = array( 'section' => 'colors' );
 		$this->manager->set_autofocus( $autofocus );
-		$this->assertEquals( $autofocus, $this->manager->get_autofocus() );
+		$this->assertSame( $autofocus, $this->manager->get_autofocus() );
 
 		$autofocus = array( 'panel' => 'widgets' );
 		$this->manager->set_autofocus( $autofocus );
-		$this->assertEquals( $autofocus, $this->manager->get_autofocus() );
+		$this->assertSame( $autofocus, $this->manager->get_autofocus() );
 
 		$autofocus = array( 'control' => array( 'blogname', 'blogdescription' ) );
 		$this->manager->set_autofocus( $autofocus );
@@ -2872,7 +3045,7 @@ class Tests_WP_Customize_Manager extends WP_UnitTestCase {
 		add_filter( 'customize_refresh_nonces', array( $this, 'filter_customize_refresh_nonces' ), 10, 2 );
 		$nonces = $this->manager->get_nonces();
 		$this->assertArrayHasKey( 'foo', $nonces );
-		$this->assertEquals( wp_create_nonce( 'foo' ), $nonces['foo'] );
+		$this->assertSame( wp_create_nonce( 'foo' ), $nonces['foo'] );
 	}
 
 	/**
@@ -2916,12 +3089,12 @@ class Tests_WP_Customize_Manager extends WP_UnitTestCase {
 		$data = json_decode( $json, true );
 		$this->assertNotEmpty( $data );
 
-		$this->assertEqualSets( array( 'theme', 'url', 'browser', 'panels', 'sections', 'nonce', 'autofocus', 'documentTitleTmpl', 'previewableDevices', 'changeset', 'timeouts', 'dateFormat', 'timeFormat', 'initialClientTimestamp', 'initialServerDate', 'initialServerTimestamp', 'l10n' ), array_keys( $data ) );
-		$this->assertEquals( $autofocus, $data['autofocus'] );
+		$this->assertSameSets( array( 'theme', 'url', 'browser', 'panels', 'sections', 'nonce', 'autofocus', 'documentTitleTmpl', 'previewableDevices', 'changeset', 'timeouts', 'dateFormat', 'timeFormat', 'initialClientTimestamp', 'initialServerDate', 'initialServerTimestamp', 'l10n' ), array_keys( $data ) );
+		$this->assertSame( $autofocus, $data['autofocus'] );
 		$this->assertArrayHasKey( 'save', $data['nonce'] );
 		$this->assertArrayHasKey( 'preview', $data['nonce'] );
 
-		$this->assertEqualSets(
+		$this->assertSameSets(
 			array(
 				'branching',
 				'autosaved',
@@ -2942,7 +3115,7 @@ class Tests_WP_Customize_Manager extends WP_UnitTestCase {
 	 * Test remove_frameless_preview_messenger_channel.
 	 *
 	 * @ticket 38867
-	 * @covers WP_Customize_Manager::remove_frameless_preview_messenger_channel()
+	 * @covers WP_Customize_Manager::remove_frameless_preview_messenger_channel
 	 */
 	function test_remove_frameless_preview_messenger_channel() {
 		wp_set_current_user( self::$admin_user_id );
@@ -2975,7 +3148,7 @@ class Tests_WP_Customize_Manager extends WP_UnitTestCase {
 		$this->manager->customize_preview_settings();
 		$content = ob_get_clean();
 
-		$this->assertEquals( 1, preg_match( '/var _wpCustomizeSettings = ({.+});/', $content, $matches ) );
+		$this->assertSame( 1, preg_match( '/var _wpCustomizeSettings = ({.+});/', $content, $matches ) );
 		$settings = json_decode( $matches[1], true );
 
 		$this->assertArrayHasKey( 'theme', $settings );
@@ -3092,7 +3265,7 @@ class Tests_WP_Customize_Manager extends WP_UnitTestCase {
 		$manager->prepare_controls();
 
 		$sorted_control_ids = wp_list_pluck( $manager->get_section( $section_id )->controls, 'id' );
-		$this->assertEquals( $added_control_ids, $sorted_control_ids );
+		$this->assertSame( $added_control_ids, $sorted_control_ids );
 	}
 
 	/**
@@ -3112,7 +3285,7 @@ class Tests_WP_Customize_Manager extends WP_UnitTestCase {
 		);
 
 		$this->assertInstanceOf( 'WP_Customize_Section', $result_section );
-		$this->assertEquals( $section_id, $result_section->id );
+		$this->assertSame( $section_id, $result_section->id );
 
 		$section        = new WP_Customize_Section(
 			$manager,
@@ -3125,8 +3298,8 @@ class Tests_WP_Customize_Manager extends WP_UnitTestCase {
 		$result_section = $manager->add_section( $section );
 
 		$this->assertInstanceOf( 'WP_Customize_Section', $result_section );
-		$this->assertEquals( $section_id, $result_section->id );
-		$this->assertEquals( $section, $result_section );
+		$this->assertSame( $section_id, $result_section->id );
+		$this->assertSame( $section, $result_section );
 	}
 
 	/**
@@ -3140,14 +3313,14 @@ class Tests_WP_Customize_Manager extends WP_UnitTestCase {
 		$result_setting = $manager->add_setting( $setting_id );
 
 		$this->assertInstanceOf( 'WP_Customize_Setting', $result_setting );
-		$this->assertEquals( $setting_id, $result_setting->id );
+		$this->assertSame( $setting_id, $result_setting->id );
 
 		$setting        = new WP_Customize_Setting( $manager, $setting_id );
 		$result_setting = $manager->add_setting( $setting );
 
 		$this->assertInstanceOf( 'WP_Customize_Setting', $result_setting );
-		$this->assertEquals( $setting, $result_setting );
-		$this->assertEquals( $setting_id, $result_setting->id );
+		$this->assertSame( $setting, $result_setting );
+		$this->assertSame( $setting_id, $result_setting->id );
 	}
 
 	/**
@@ -3158,16 +3331,16 @@ class Tests_WP_Customize_Manager extends WP_UnitTestCase {
 
 		$setting_id = 'dynamic';
 		$setting    = $manager->add_setting( $setting_id );
-		$this->assertEquals( 'WP_Customize_Setting', get_class( $setting ) );
+		$this->assertSame( 'WP_Customize_Setting', get_class( $setting ) );
 		$this->assertObjectNotHasAttribute( 'custom', $setting );
 		$manager->remove_setting( $setting_id );
 
 		add_filter( 'customize_dynamic_setting_class', array( $this, 'return_dynamic_customize_setting_class' ), 10, 3 );
 		add_filter( 'customize_dynamic_setting_args', array( $this, 'return_dynamic_customize_setting_args' ), 10, 2 );
 		$setting = $manager->add_setting( $setting_id );
-		$this->assertEquals( 'Test_Dynamic_Customize_Setting', get_class( $setting ) );
+		$this->assertSame( 'Test_Dynamic_Customize_Setting', get_class( $setting ) );
 		$this->assertObjectHasAttribute( 'custom', $setting );
-		$this->assertEquals( 'foo', $setting->custom );
+		$this->assertSame( 'foo', $setting->custom );
 	}
 
 	/**
@@ -3217,7 +3390,7 @@ class Tests_WP_Customize_Manager extends WP_UnitTestCase {
 		);
 
 		$this->assertInstanceOf( 'WP_Customize_Panel', $result_panel );
-		$this->assertEquals( $panel_id, $result_panel->id );
+		$this->assertSame( $panel_id, $result_panel->id );
 
 		$panel        = new WP_Customize_Panel(
 			$manager,
@@ -3229,8 +3402,8 @@ class Tests_WP_Customize_Manager extends WP_UnitTestCase {
 		$result_panel = $manager->add_panel( $panel );
 
 		$this->assertInstanceOf( 'WP_Customize_Panel', $result_panel );
-		$this->assertEquals( $panel, $result_panel );
-		$this->assertEquals( $panel_id, $result_panel->id );
+		$this->assertSame( $panel, $result_panel );
+		$this->assertSame( $panel_id, $result_panel->id );
 	}
 
 	/**
@@ -3260,7 +3433,7 @@ class Tests_WP_Customize_Manager extends WP_UnitTestCase {
 			)
 		);
 		$this->assertInstanceOf( 'WP_Customize_Control', $result_control );
-		$this->assertEquals( $control_id, $result_control->id );
+		$this->assertSame( $control_id, $result_control->id );
 
 		$control        = new WP_Customize_Control(
 			$manager,
@@ -3274,8 +3447,8 @@ class Tests_WP_Customize_Manager extends WP_UnitTestCase {
 		$result_control = $manager->add_control( $control );
 
 		$this->assertInstanceOf( 'WP_Customize_Control', $result_control );
-		$this->assertEquals( $control, $result_control );
-		$this->assertEquals( $control_id, $result_control->id );
+		$this->assertSame( $control, $result_control );
+		$this->assertSame( $control_id, $result_control->id );
 	}
 
 
@@ -3371,7 +3544,7 @@ class Tests_WP_Customize_Manager extends WP_UnitTestCase {
 		$this->manager->prepare_controls();
 
 		$result = $this->manager->controls();
-		$this->assertEquals( $controls_sorted, array_keys( $result ) );
+		$this->assertSame( $controls_sorted, array_keys( $result ) );
 	}
 
 	/**
@@ -3400,7 +3573,7 @@ class Tests_WP_Customize_Manager extends WP_UnitTestCase {
 		$this->manager->prepare_controls();
 
 		$result = $this->manager->sections();
-		$this->assertEquals( $sections_sorted, array_keys( $result ) );
+		$this->assertSame( $sections_sorted, array_keys( $result ) );
 	}
 
 	/**
@@ -3429,7 +3602,7 @@ class Tests_WP_Customize_Manager extends WP_UnitTestCase {
 		$this->manager->prepare_controls();
 
 		$result = $this->manager->panels();
-		$this->assertEquals( $panels_sorted, array_keys( $result ) );
+		$this->assertSame( $panels_sorted, array_keys( $result ) );
 	}
 
 	/**
@@ -3443,17 +3616,17 @@ class Tests_WP_Customize_Manager extends WP_UnitTestCase {
 		$video_url = 'https://www.youtube.com/watch?v=KiS8rZBeIO0';
 
 		$whitespaces = array(
-			' ',  // space
-			"\t", // horizontal tab
-			"\n", // line feed
-			"\r", // carriage return,
-			"\f", // form feed,
-			"\v", // vertical tab
+			' ',  // Space.
+			"\t", // Horizontal tab.
+			"\n", // Line feed.
+			"\r", // Carriage return.
+			"\f", // Form feed.
+			"\v", // Vertical tab.
 		);
 
 		foreach ( $whitespaces as $whitespace ) {
 			$sanitized = $setting->sanitize( $whitespace . $video_url . $whitespace );
-			$this->assertEquals( $video_url, $sanitized );
+			$this->assertSame( $video_url, $sanitized );
 		}
 	}
 }
diff --git a/tests/customize/nav-menu-item-setting.php b/tests/customize/nav-menu-item-setting.php
index c80ce613b4..e5c005a49e 100644
--- a/tests/customize/nav-menu-item-setting.php
+++ b/tests/customize/nav-menu-item-setting.php
@@ -68,8 +68,8 @@ class Test_WP_Customize_Nav_Menu_Item_Setting extends WP_UnitTestCase {
 		do_action( 'customize_register', $this->wp_customize );
 
 		$setting = new WP_Customize_Nav_Menu_Item_Setting( $this->wp_customize, 'nav_menu_item[123]' );
-		$this->assertEquals( 'nav_menu_item', $setting->type );
-		$this->assertEquals( 123, $setting->post_id );
+		$this->assertSame( 'nav_menu_item', $setting->type );
+		$this->assertSame( 123, $setting->post_id );
 		$this->assertNull( $setting->previous_post_id );
 		$this->assertNull( $setting->update_status );
 		$this->assertNull( $setting->update_error );
@@ -93,7 +93,7 @@ class Test_WP_Customize_Nav_Menu_Item_Setting extends WP_UnitTestCase {
 			'nav_menu_term_id' => 0,
 			'_invalid'         => false,
 		);
-		$this->assertEquals( $default, $setting->default );
+		$this->assertSame( $default, $setting->default );
 
 		$exception = null;
 		try {
@@ -136,9 +136,9 @@ class Test_WP_Customize_Nav_Menu_Item_Setting extends WP_UnitTestCase {
 			'menu_item_parent' => 123,
 		);
 		$setting = new WP_Customize_Nav_Menu_Item_Setting( $this->wp_customize, 'nav_menu_item[-5]', compact( 'default' ) );
-		$this->assertEquals( -5, $setting->post_id );
+		$this->assertSame( -5, $setting->post_id );
 		$this->assertNull( $setting->previous_post_id );
-		$this->assertEquals( $default, $setting->default );
+		$this->assertSame( $default, $setting->default );
 	}
 
 	/**
@@ -167,17 +167,17 @@ class Test_WP_Customize_Nav_Menu_Item_Setting extends WP_UnitTestCase {
 
 		$post      = get_post( $item_id );
 		$menu_item = wp_setup_nav_menu_item( $post );
-		$this->assertEquals( $item_title, $menu_item->title );
+		$this->assertSame( $item_title, $menu_item->title );
 
 		$setting_id = "nav_menu_item[$item_id]";
 		$setting    = new WP_Customize_Nav_Menu_Item_Setting( $this->wp_customize, $setting_id );
 
 		$value = $setting->value();
-		$this->assertEquals( $menu_item->title, $value['title'] );
-		$this->assertEquals( $menu_item->type, $value['type'] );
+		$this->assertSame( $menu_item->title, $value['title'] );
+		$this->assertSame( $menu_item->type, $value['type'] );
 		$this->assertEquals( $menu_item->object_id, $value['object_id'] );
-		$this->assertEquals( $menu_id, $value['nav_menu_term_id'] );
-		$this->assertEquals( 'Hello World', $value['original_title'] );
+		$this->assertSame( $menu_id, $value['nav_menu_term_id'] );
+		$this->assertSame( 'Hello World', $value['original_title'] );
 
 		$other_menu_id = wp_create_nav_menu( 'Menu2' );
 		wp_update_nav_menu_item(
@@ -188,8 +188,8 @@ class Test_WP_Customize_Nav_Menu_Item_Setting extends WP_UnitTestCase {
 			)
 		);
 		$value = $setting->value();
-		$this->assertEquals( 'Hola', $value['title'] );
-		$this->assertEquals( $other_menu_id, $value['nav_menu_term_id'] );
+		$this->assertSame( 'Hola', $value['title'] );
+		$this->assertSame( $other_menu_id, $value['nav_menu_term_id'] );
 	}
 
 	/**
@@ -220,8 +220,8 @@ class Test_WP_Customize_Nav_Menu_Item_Setting extends WP_UnitTestCase {
 		$setting    = new WP_Customize_Nav_Menu_Item_Setting( $this->wp_customize, $setting_id );
 
 		$value = $setting->value();
-		$this->assertEquals( '', $value['title'] );
-		$this->assertEquals( $original_title, $value['original_title'] );
+		$this->assertSame( '', $value['title'] );
+		$this->assertSame( $original_title, $value['original_title'] );
 	}
 
 	/**
@@ -250,17 +250,17 @@ class Test_WP_Customize_Nav_Menu_Item_Setting extends WP_UnitTestCase {
 
 		$post      = get_post( $item_id );
 		$menu_item = wp_setup_nav_menu_item( $post );
-		$this->assertEquals( $item_title, $menu_item->title );
+		$this->assertSame( $item_title, $menu_item->title );
 
 		$setting_id = "nav_menu_item[$item_id]";
 		$setting    = new WP_Customize_Nav_Menu_Item_Setting( $this->wp_customize, $setting_id );
 
 		$value = $setting->value();
-		$this->assertEquals( $menu_item->title, $value['title'] );
-		$this->assertEquals( $menu_item->type, $value['type'] );
+		$this->assertSame( $menu_item->title, $value['title'] );
+		$this->assertSame( $menu_item->type, $value['type'] );
 		$this->assertEquals( $menu_item->object_id, $value['object_id'] );
-		$this->assertEquals( $menu_id, $value['nav_menu_term_id'] );
-		$this->assertEquals( 'Salutations', $value['original_title'] );
+		$this->assertSame( $menu_id, $value['nav_menu_term_id'] );
+		$this->assertSame( 'Salutations', $value['original_title'] );
 	}
 
 	/**
@@ -291,8 +291,8 @@ class Test_WP_Customize_Nav_Menu_Item_Setting extends WP_UnitTestCase {
 		$setting    = new WP_Customize_Nav_Menu_Item_Setting( $this->wp_customize, $setting_id );
 
 		$value = $setting->value();
-		$this->assertEquals( $menu_item->type_label, 'Custom Label' );
-		$this->assertEquals( $menu_item->type_label, $value['type_label'] );
+		$this->assertSame( $menu_item->type_label, 'Custom Label' );
+		$this->assertSame( $menu_item->type_label, $value['type_label'] );
 	}
 
 	/**
@@ -316,7 +316,7 @@ class Test_WP_Customize_Nav_Menu_Item_Setting extends WP_UnitTestCase {
 		$this->wp_customize->set_post_value( $menu->id, $post_value );
 		$menu->preview();
 		$value = $menu->value();
-		$this->assertEquals( $post_value, $value );
+		$this->assertSame( $post_value, $value );
 
 		$post_id = self::factory()->post->create( array( 'post_title' => 'Hello World' ) );
 		$item_id = wp_update_nav_menu_item(
@@ -337,7 +337,7 @@ class Test_WP_Customize_Nav_Menu_Item_Setting extends WP_UnitTestCase {
 		$setting_id = "nav_menu_item[$item_id]";
 		$setting    = new WP_Customize_Nav_Menu_Item_Setting( $this->wp_customize, $setting_id );
 		$value      = $setting->value();
-		$this->assertEquals( 0, $value['nav_menu_term_id'] );
+		$this->assertSame( 0, $value['nav_menu_term_id'] );
 	}
 
 	/**
@@ -391,7 +391,7 @@ class Test_WP_Customize_Nav_Menu_Item_Setting extends WP_UnitTestCase {
 		$post_value['post_status'] = $post_value['status'];
 		unset( $post_value['status'] );
 		foreach ( $post_value as $key => $value ) {
-			$this->assertEquals( $value, $updated_item->$key, "Key $key mismatch" );
+			$this->assertSame( $value, $updated_item->$key, "Key $key mismatch" );
 		}
 	}
 
@@ -444,13 +444,13 @@ class Test_WP_Customize_Nav_Menu_Item_Setting extends WP_UnitTestCase {
 		$this->assertNotEquals( count( $current_items ), count( $preview_items ) );
 
 		$last_item = array_pop( $preview_items );
-		$this->assertEquals( $new_item_id, $last_item->db_id );
+		$this->assertSame( $new_item_id, $last_item->db_id );
 		$post_value['post_status'] = $post_value['status'];
 		unset( $post_value['status'] );
 		$post_value['menu_order'] = $post_value['position'];
 		unset( $post_value['position'] );
 		foreach ( $post_value as $key => $value ) {
-			$this->assertEquals( $value, $last_item->$key, "Mismatch for $key property." );
+			$this->assertSame( $value, $last_item->$key, "Mismatch for $key property." );
 		}
 	}
 
@@ -532,7 +532,7 @@ class Test_WP_Customize_Nav_Menu_Item_Setting extends WP_UnitTestCase {
 		foreach ( $valid_urls as $valid_url ) {
 			$url_setting = $setting->sanitize( array( 'url' => $valid_url ) );
 			$this->assertInternalType( 'array', $url_setting );
-			$this->assertEquals( $valid_url, $url_setting['url'] );
+			$this->assertSame( $valid_url, $url_setting['url'] );
 		}
 
 		$invalid_urls = array(
@@ -543,7 +543,7 @@ class Test_WP_Customize_Nav_Menu_Item_Setting extends WP_UnitTestCase {
 		foreach ( $invalid_urls as $invalid_url ) {
 			$url_setting = $setting->sanitize( array( 'url' => $invalid_url ) );
 			$this->assertInstanceOf( 'WP_Error', $url_setting );
-			$this->assertEquals( 'invalid_url', $url_setting->get_error_code() );
+			$this->assertSame( 'invalid_url', $url_setting->get_error_code() );
 		}
 
 		$unsanitized = array(
@@ -584,10 +584,10 @@ class Test_WP_Customize_Nav_Menu_Item_Setting extends WP_UnitTestCase {
 		);
 
 		$sanitized = $setting->sanitize( $unsanitized );
-		$this->assertEqualSets( array_keys( $unsanitized ), array_keys( $sanitized ) );
+		$this->assertSameSets( array_keys( $unsanitized ), array_keys( $sanitized ) );
 
 		foreach ( $expected_sanitized as $key => $value ) {
-			$this->assertEquals( $value, $sanitized[ $key ], "Expected $key to be sanitized." );
+			$this->assertSame( $value, $sanitized[ $key ], "Expected $key to be sanitized." );
 		}
 
 		$nav_menu_item_id = wp_update_nav_menu_item(
@@ -616,18 +616,18 @@ class Test_WP_Customize_Nav_Menu_Item_Setting extends WP_UnitTestCase {
 		$nav_menu_item = wp_setup_nav_menu_item( clone $post );
 
 		$this->assertEquals( $expected_sanitized['object_id'], $nav_menu_item->object_id );
-		$this->assertEquals( $expected_sanitized['object'], $nav_menu_item->object );
+		$this->assertSame( $expected_sanitized['object'], $nav_menu_item->object );
 		$this->assertEquals( $expected_sanitized['menu_item_parent'], $nav_menu_item->menu_item_parent );
-		$this->assertEquals( $expected_sanitized['position'], $post->menu_order );
-		$this->assertEquals( $expected_sanitized['type'], $nav_menu_item->type );
-		$this->assertEquals( $expected_sanitized['title'], $post->post_title );
-		$this->assertEquals( $expected_sanitized['url'], $nav_menu_item->url );
-		$this->assertEquals( $expected_sanitized['description'], $post->post_content );
-		$this->assertEquals( $expected_sanitized['attr_title'], $post->post_excerpt );
-		$this->assertEquals( $expected_sanitized['target'], $nav_menu_item->target );
-		$this->assertEquals( $expected_sanitized['classes'], implode( ' ', $nav_menu_item->classes ) );
-		$this->assertEquals( $expected_sanitized['xfn'], $nav_menu_item->xfn );
-		$this->assertEquals( $expected_sanitized['status'], $post->post_status );
+		$this->assertSame( $expected_sanitized['position'], $post->menu_order );
+		$this->assertSame( $expected_sanitized['type'], $nav_menu_item->type );
+		$this->assertSame( $expected_sanitized['title'], $post->post_title );
+		$this->assertSame( $expected_sanitized['url'], $nav_menu_item->url );
+		$this->assertSame( $expected_sanitized['description'], $post->post_content );
+		$this->assertSame( $expected_sanitized['attr_title'], $post->post_excerpt );
+		$this->assertSame( $expected_sanitized['target'], $nav_menu_item->target );
+		$this->assertSame( $expected_sanitized['classes'], implode( ' ', $nav_menu_item->classes ) );
+		$this->assertSame( $expected_sanitized['xfn'], $nav_menu_item->xfn );
+		$this->assertSame( $expected_sanitized['status'], $post->post_status );
 	}
 
 	/**
@@ -693,10 +693,10 @@ class Test_WP_Customize_Nav_Menu_Item_Setting extends WP_UnitTestCase {
 		$this->assertArrayHasKey( 'error', $update_result );
 		$this->assertArrayHasKey( 'status', $update_result );
 
-		$this->assertEquals( $item_id, $update_result['post_id'] );
+		$this->assertSame( $item_id, $update_result['post_id'] );
 		$this->assertNull( $update_result['previous_post_id'] );
 		$this->assertNull( $update_result['error'] );
-		$this->assertEquals( 'updated', $update_result['status'] );
+		$this->assertSame( 'updated', $update_result['status'] );
 	}
 
 	/**
@@ -748,7 +748,7 @@ class Test_WP_Customize_Nav_Menu_Item_Setting extends WP_UnitTestCase {
 		$this->assertNotEquals( count( $current_items ), count( $preview_items ) );
 
 		$last_item = array_pop( $preview_items );
-		$this->assertEquals( $setting->post_id, $last_item->db_id );
+		$this->assertSame( $setting->post_id, $last_item->db_id );
 		$post_value['post_status'] = $post_value['status'];
 		unset( $post_value['status'] );
 		$post_value['menu_order'] = $post_value['position'];
@@ -766,10 +766,10 @@ class Test_WP_Customize_Nav_Menu_Item_Setting extends WP_UnitTestCase {
 		$this->assertArrayHasKey( 'error', $update_result );
 		$this->assertArrayHasKey( 'status', $update_result );
 
-		$this->assertEquals( $setting->post_id, $update_result['post_id'] );
-		$this->assertEquals( $new_item_id, $update_result['previous_post_id'] );
+		$this->assertSame( $setting->post_id, $update_result['post_id'] );
+		$this->assertSame( $new_item_id, $update_result['previous_post_id'] );
 		$this->assertNull( $update_result['error'] );
-		$this->assertEquals( 'inserted', $update_result['status'] );
+		$this->assertSame( 'inserted', $update_result['status'] );
 	}
 
 	/**
@@ -820,10 +820,10 @@ class Test_WP_Customize_Nav_Menu_Item_Setting extends WP_UnitTestCase {
 		$this->assertArrayHasKey( 'error', $update_result );
 		$this->assertArrayHasKey( 'status', $update_result );
 
-		$this->assertEquals( $delete_item_id, $update_result['post_id'] );
+		$this->assertSame( $delete_item_id, $update_result['post_id'] );
 		$this->assertNull( $update_result['previous_post_id'] );
 		$this->assertNull( $update_result['error'] );
-		$this->assertEquals( 'deleted', $update_result['status'] );
+		$this->assertSame( 'deleted', $update_result['status'] );
 	}
 
 	/**
@@ -918,33 +918,33 @@ class Test_WP_Customize_Nav_Menu_Item_Setting extends WP_UnitTestCase {
 		$item_value = $setting->value();
 		$this->assertArrayHasKey( 'type_label', $item_value );
 		$nav_menu_item = $setting->value_as_wp_post_nav_menu_item();
-		$this->assertEquals( 'Custom Link', $nav_menu_item->type_label );
-		$this->assertEquals( $item_value['type_label'], $nav_menu_item->type_label );
+		$this->assertSame( 'Custom Link', $nav_menu_item->type_label );
+		$this->assertSame( $item_value['type_label'], $nav_menu_item->type_label );
 		add_filter( 'wp_setup_nav_menu_item', array( $this, 'filter_type_label' ) );
 		$nav_menu_item = $setting->value_as_wp_post_nav_menu_item();
-		$this->assertEquals( 'Custom Label', $nav_menu_item->type_label );
+		$this->assertSame( 'Custom Label', $nav_menu_item->type_label );
 
 		$this->assertObjectNotHasAttribute( 'nav_menu_term_id', $nav_menu_item );
 		$this->assertObjectNotHasAttribute( 'status', $nav_menu_item );
-		$this->assertEquals( 'publish', $nav_menu_item->post_status );
-		$this->assertEquals( 'nav_menu_item', $nav_menu_item->post_type );
+		$this->assertSame( 'publish', $nav_menu_item->post_status );
+		$this->assertSame( 'nav_menu_item', $nav_menu_item->post_type );
 		$this->assertObjectNotHasAttribute( 'position', $nav_menu_item );
-		$this->assertEquals( $post_value['position'], $nav_menu_item->menu_order );
-		$this->assertEquals( $post_value['title'], $nav_menu_item->post_title );
-		$this->assertEquals( 123, $nav_menu_item->ID );
-		$this->assertEquals( 123, $nav_menu_item->db_id );
-		$this->assertEquals( wp_get_current_user()->ID, $nav_menu_item->post_author );
+		$this->assertSame( $post_value['position'], $nav_menu_item->menu_order );
+		$this->assertSame( $post_value['title'], $nav_menu_item->post_title );
+		$this->assertSame( 123, $nav_menu_item->ID );
+		$this->assertSame( 123, $nav_menu_item->db_id );
+		$this->assertSame( wp_get_current_user()->ID, $nav_menu_item->post_author );
 		$this->assertObjectHasAttribute( 'type_label', $nav_menu_item );
 		$expected = apply_filters( 'nav_menu_attr_title', wp_unslash( apply_filters( 'excerpt_save_pre', wp_slash( $post_value['attr_title'] ) ) ) );
-		$this->assertEquals( $expected, $nav_menu_item->attr_title );
-		$this->assertEquals( 'Attempted \o/ o&#8217;o markup', $nav_menu_item->description );
+		$this->assertSame( $expected, $nav_menu_item->attr_title );
+		$this->assertSame( 'Attempted \o/ o&#8217;o markup', $nav_menu_item->description );
 	}
 
 	/**
 	 * Test WP_Customize_Nav_Menu_Item_Setting::value_as_wp_post_nav_menu_item() to set url for posts, terms, and post type archives.
 	 *
 	 * @ticket 38945
-	 * @covers WP_Customize_Nav_Menu_Item_Setting::value_as_wp_post_nav_menu_item()
+	 * @covers WP_Customize_Nav_Menu_Item_Setting::value_as_wp_post_nav_menu_item
 	 */
 	function test_value_as_wp_post_nav_menu_item_term_urls() {
 		$term_id = self::factory()->term->create( array( 'taxonomy' => 'category' ) );
@@ -973,7 +973,7 @@ class Test_WP_Customize_Nav_Menu_Item_Setting extends WP_UnitTestCase {
 		);
 		$setting->preview();
 		$nav_menu_item = $setting->value_as_wp_post_nav_menu_item();
-		$this->assertEquals( get_term_link( $term_id ), $nav_menu_item->url );
+		$this->assertSame( get_term_link( $term_id ), $nav_menu_item->url );
 
 		// Post.
 		$setting = new WP_Customize_Nav_Menu_Item_Setting(
@@ -992,7 +992,7 @@ class Test_WP_Customize_Nav_Menu_Item_Setting extends WP_UnitTestCase {
 		);
 		$setting->preview();
 		$nav_menu_item = $setting->value_as_wp_post_nav_menu_item();
-		$this->assertEquals( get_permalink( $post_id ), $nav_menu_item->url );
+		$this->assertSame( get_permalink( $post_id ), $nav_menu_item->url );
 
 		// Post type archive.
 		$setting = new WP_Customize_Nav_Menu_Item_Setting(
@@ -1010,14 +1010,14 @@ class Test_WP_Customize_Nav_Menu_Item_Setting extends WP_UnitTestCase {
 		);
 		$setting->preview();
 		$nav_menu_item = $setting->value_as_wp_post_nav_menu_item();
-		$this->assertEquals( get_post_type_archive_link( 'press_release' ), $nav_menu_item->url );
+		$this->assertSame( get_post_type_archive_link( 'press_release' ), $nav_menu_item->url );
 	}
 
 	/**
 	 * Test WP_Customize_Nav_Menu_Item_Setting::value_as_wp_post_nav_menu_item() for obtaining original title.
 	 *
 	 * @ticket 38945
-	 * @covers WP_Customize_Nav_Menu_Item_Setting::get_original_title()
+	 * @covers WP_Customize_Nav_Menu_Item_Setting::get_original_title
 	 */
 	function test_get_original_title() {
 		$menu_id = wp_create_nav_menu( 'Menu' );
@@ -1064,15 +1064,15 @@ class Test_WP_Customize_Nav_Menu_Item_Setting extends WP_UnitTestCase {
 			'nav_menu_item[' . $nav_menu_item_id . ']'
 		);
 		$item_value       = $setting->value();
-		$this->assertEquals( $original_post_title, $item_value['original_title'] );
-		$this->assertEquals( '', $item_value['title'] );
+		$this->assertSame( $original_post_title, $item_value['original_title'] );
+		$this->assertSame( '', $item_value['title'] );
 		$item = $setting->value_as_wp_post_nav_menu_item();
 		$this->assertObjectHasAttribute( 'type_label', $item );
-		$this->assertEquals( $original_post_title, $item->original_title );
-		$this->assertEquals( $original_post_title, $item->title );
+		$this->assertSame( $original_post_title, $item->original_title );
+		$this->assertSame( $original_post_title, $item->title );
 		$this->assertArrayHasKey( 'type_label', $item_value );
-		$this->assertEquals( get_post_type_object( 'press_release' )->labels->singular_name, $item_value['type_label'] );
-		$this->assertEquals( $item->type_label, $item_value['type_label'] );
+		$this->assertSame( get_post_type_object( 'press_release' )->labels->singular_name, $item_value['type_label'] );
+		$this->assertSame( $item->type_label, $item_value['type_label'] );
 
 		// Post: staged nav menu item.
 		$setting = new WP_Customize_Nav_Menu_Item_Setting(
@@ -1091,15 +1091,15 @@ class Test_WP_Customize_Nav_Menu_Item_Setting extends WP_UnitTestCase {
 		);
 		$setting->preview();
 		$item_value = $setting->value();
-		$this->assertEquals( $original_post_title, $item_value['original_title'] );
-		$this->assertEquals( '', $item_value['title'] );
+		$this->assertSame( $original_post_title, $item_value['original_title'] );
+		$this->assertSame( '', $item_value['title'] );
 		$item = $setting->value_as_wp_post_nav_menu_item();
 		$this->assertObjectHasAttribute( 'type_label', $item );
-		$this->assertEquals( $original_post_title, $item->original_title );
-		$this->assertEquals( $original_post_title, $item->title );
+		$this->assertSame( $original_post_title, $item->original_title );
+		$this->assertSame( $original_post_title, $item->title );
 		$this->assertArrayHasKey( 'type_label', $item_value );
-		$this->assertEquals( get_post_type_object( 'press_release' )->labels->singular_name, $item_value['type_label'] );
-		$this->assertEquals( $item->type_label, $item_value['type_label'] );
+		$this->assertSame( get_post_type_object( 'press_release' )->labels->singular_name, $item_value['type_label'] );
+		$this->assertSame( $item->type_label, $item_value['type_label'] );
 
 		// Term: existing nav menu item.
 		$nav_menu_item_id = wp_update_nav_menu_item(
@@ -1118,15 +1118,15 @@ class Test_WP_Customize_Nav_Menu_Item_Setting extends WP_UnitTestCase {
 			'nav_menu_item[' . $nav_menu_item_id . ']'
 		);
 		$item_value       = $setting->value();
-		$this->assertEquals( $original_term_title, $item_value['original_title'] );
-		$this->assertEquals( '', $item_value['title'] );
+		$this->assertSame( $original_term_title, $item_value['original_title'] );
+		$this->assertSame( '', $item_value['title'] );
 		$item = $setting->value_as_wp_post_nav_menu_item();
 		$this->assertObjectHasAttribute( 'type_label', $item );
-		$this->assertEquals( $original_term_title, $item->original_title );
-		$this->assertEquals( $original_term_title, $item->title );
+		$this->assertSame( $original_term_title, $item->original_title );
+		$this->assertSame( $original_term_title, $item->title );
 		$this->assertArrayHasKey( 'type_label', $item_value );
-		$this->assertEquals( get_taxonomy( 'category' )->labels->singular_name, $item_value['type_label'] );
-		$this->assertEquals( $item->type_label, $item_value['type_label'] );
+		$this->assertSame( get_taxonomy( 'category' )->labels->singular_name, $item_value['type_label'] );
+		$this->assertSame( $item->type_label, $item_value['type_label'] );
 
 		// Term: staged nav menu item.
 		$setting = new WP_Customize_Nav_Menu_Item_Setting(
@@ -1145,15 +1145,15 @@ class Test_WP_Customize_Nav_Menu_Item_Setting extends WP_UnitTestCase {
 		);
 		$setting->preview();
 		$item_value = $setting->value();
-		$this->assertEquals( $original_term_title, $item_value['original_title'] );
-		$this->assertEquals( '', $item_value['title'] );
+		$this->assertSame( $original_term_title, $item_value['original_title'] );
+		$this->assertSame( '', $item_value['title'] );
 		$item = $setting->value_as_wp_post_nav_menu_item();
 		$this->assertObjectHasAttribute( 'type_label', $item );
-		$this->assertEquals( $original_term_title, $item->original_title );
-		$this->assertEquals( $original_term_title, $item->title );
+		$this->assertSame( $original_term_title, $item->original_title );
+		$this->assertSame( $original_term_title, $item->title );
 		$this->assertArrayHasKey( 'type_label', $item_value );
-		$this->assertEquals( get_taxonomy( 'category' )->labels->singular_name, $item_value['type_label'] );
-		$this->assertEquals( $item->type_label, $item_value['type_label'] );
+		$this->assertSame( get_taxonomy( 'category' )->labels->singular_name, $item_value['type_label'] );
+		$this->assertSame( $item->type_label, $item_value['type_label'] );
 
 		// Post Type Archive: existing nav menu item.
 		$nav_menu_item_id = wp_update_nav_menu_item(
@@ -1171,15 +1171,15 @@ class Test_WP_Customize_Nav_Menu_Item_Setting extends WP_UnitTestCase {
 			'nav_menu_item[' . $nav_menu_item_id . ']'
 		);
 		$item_value       = $setting->value();
-		$this->assertEquals( get_post_type_object( 'press_release' )->labels->archives, $item_value['original_title'] );
-		$this->assertEquals( '', $item_value['title'] );
+		$this->assertSame( get_post_type_object( 'press_release' )->labels->archives, $item_value['original_title'] );
+		$this->assertSame( '', $item_value['title'] );
 		$item = $setting->value_as_wp_post_nav_menu_item();
 		$this->assertObjectHasAttribute( 'type_label', $item );
-		$this->assertEquals( get_post_type_object( 'press_release' )->labels->archives, $item->original_title );
-		$this->assertEquals( get_post_type_object( 'press_release' )->labels->archives, $item->title );
+		$this->assertSame( get_post_type_object( 'press_release' )->labels->archives, $item->original_title );
+		$this->assertSame( get_post_type_object( 'press_release' )->labels->archives, $item->title );
 		$this->assertArrayHasKey( 'type_label', $item_value );
-		$this->assertEquals( __( 'Post Type Archive' ), $item_value['type_label'] );
-		$this->assertEquals( $item->type_label, $item_value['type_label'] );
+		$this->assertSame( __( 'Post Type Archive' ), $item_value['type_label'] );
+		$this->assertSame( $item->type_label, $item_value['type_label'] );
 
 		// Post Type Archive: staged nav menu item.
 		$setting = new WP_Customize_Nav_Menu_Item_Setting(
@@ -1197,15 +1197,15 @@ class Test_WP_Customize_Nav_Menu_Item_Setting extends WP_UnitTestCase {
 		);
 		$setting->preview();
 		$item_value = $setting->value();
-		$this->assertEquals( get_post_type_object( 'press_release' )->labels->archives, $item_value['original_title'] );
-		$this->assertEquals( '', $item_value['title'] );
+		$this->assertSame( get_post_type_object( 'press_release' )->labels->archives, $item_value['original_title'] );
+		$this->assertSame( '', $item_value['title'] );
 		$item = $setting->value_as_wp_post_nav_menu_item();
 		$this->assertObjectHasAttribute( 'type_label', $item );
-		$this->assertEquals( get_post_type_object( 'press_release' )->labels->archives, $item->original_title );
-		$this->assertEquals( get_post_type_object( 'press_release' )->labels->archives, $item->title );
+		$this->assertSame( get_post_type_object( 'press_release' )->labels->archives, $item->original_title );
+		$this->assertSame( get_post_type_object( 'press_release' )->labels->archives, $item->title );
 		$this->assertArrayHasKey( 'type_label', $item_value );
-		$this->assertEquals( __( 'Post Type Archive' ), $item_value['type_label'] );
-		$this->assertEquals( $item->type_label, $item_value['type_label'] );
+		$this->assertSame( __( 'Post Type Archive' ), $item_value['type_label'] );
+		$this->assertSame( $item->type_label, $item_value['type_label'] );
 	}
 
 	/**
@@ -1238,6 +1238,6 @@ class Test_WP_Customize_Nav_Menu_Item_Setting extends WP_UnitTestCase {
 		$setting->preview();
 
 		$nav_menu_item = $setting->value_as_wp_post_nav_menu_item();
-		$this->assertEquals( $original_title, $nav_menu_item->title );
+		$this->assertSame( $original_title, $nav_menu_item->title );
 	}
 }
diff --git a/tests/customize/nav-menu-setting.php b/tests/customize/nav-menu-setting.php
index ffa8a1bc8d..6746b8b1f4 100644
--- a/tests/customize/nav-menu-setting.php
+++ b/tests/customize/nav-menu-setting.php
@@ -64,9 +64,9 @@ class Test_WP_Customize_Nav_Menu_Setting extends WP_UnitTestCase {
 		do_action( 'customize_register', $this->wp_customize );
 
 		$setting = new WP_Customize_Nav_Menu_Setting( $this->wp_customize, 'nav_menu[123]' );
-		$this->assertEquals( 'nav_menu', $setting->type );
-		$this->assertEquals( 'postMessage', $setting->transport );
-		$this->assertEquals( 123, $setting->term_id );
+		$this->assertSame( 'nav_menu', $setting->type );
+		$this->assertSame( 'postMessage', $setting->transport );
+		$this->assertSame( 123, $setting->term_id );
 		$this->assertNull( $setting->previous_term_id );
 		$this->assertNull( $setting->update_status );
 		$this->assertNull( $setting->update_error );
@@ -74,9 +74,9 @@ class Test_WP_Customize_Nav_Menu_Setting extends WP_UnitTestCase {
 		foreach ( array( 'name', 'description', 'parent' ) as $key ) {
 			$this->assertArrayHasKey( $key, $setting->default );
 		}
-		$this->assertEquals( '', $setting->default['name'] );
-		$this->assertEquals( '', $setting->default['description'] );
-		$this->assertEquals( 0, $setting->default['parent'] );
+		$this->assertSame( '', $setting->default['name'] );
+		$this->assertSame( '', $setting->default['description'] );
+		$this->assertSame( 0, $setting->default['parent'] );
 
 		$exception = null;
 		try {
@@ -119,8 +119,8 @@ class Test_WP_Customize_Nav_Menu_Setting extends WP_UnitTestCase {
 			'parent'      => 123,
 		);
 		$setting = new WP_Customize_Nav_Menu_Setting( $this->wp_customize, 'nav_menu[-5]', compact( 'default' ) );
-		$this->assertEquals( -5, $setting->term_id );
-		$this->assertEquals( $default, $setting->default );
+		$this->assertSame( -5, $setting->term_id );
+		$this->assertSame( $default, $setting->default );
 	}
 
 	/**
@@ -153,14 +153,14 @@ class Test_WP_Customize_Nav_Menu_Setting extends WP_UnitTestCase {
 		foreach ( array( 'name', 'description', 'parent' ) as $key ) {
 			$this->assertArrayHasKey( $key, $value );
 		}
-		$this->assertEquals( $menu_name, $value['name'] );
-		$this->assertEquals( $description, $value['description'] );
-		$this->assertEquals( $parent_menu_id, $value['parent'] );
+		$this->assertSame( $menu_name, $value['name'] );
+		$this->assertSame( $description, $value['description'] );
+		$this->assertSame( $parent_menu_id, $value['parent'] );
 
 		$new_menu_name = 'Foo';
 		wp_update_nav_menu_object( $menu_id, wp_slash( array( 'menu-name' => $new_menu_name ) ) );
 		$updated_value = $setting->value();
-		$this->assertEquals( $new_menu_name, $updated_value['name'] );
+		$this->assertSame( $new_menu_name, $updated_value['name'] );
 	}
 
 	/**
@@ -196,28 +196,28 @@ class Test_WP_Customize_Nav_Menu_Setting extends WP_UnitTestCase {
 		$this->wp_customize->set_post_value( $setting_id, $post_value );
 
 		$value = $setting->value();
-		$this->assertEquals( 'Name 1 \\o/', $value['name'] );
-		$this->assertEquals( 'Description 1 \\o/', $value['description'] );
-		$this->assertEquals( 0, $value['parent'] );
+		$this->assertSame( 'Name 1 \\o/', $value['name'] );
+		$this->assertSame( 'Description 1 \\o/', $value['description'] );
+		$this->assertSame( 0, $value['parent'] );
 
 		$term = (array) wp_get_nav_menu_object( $menu_id );
 
-		$this->assertEqualSets(
+		$this->assertSameSets(
 			wp_array_slice_assoc( $value, array( 'name', 'description', 'parent' ) ),
 			wp_array_slice_assoc( $term, array( 'name', 'description', 'parent' ) )
 		);
 
 		$setting->preview();
 		$value = $setting->value();
-		$this->assertEquals( 'Name 2 \\o/', $value['name'] );
-		$this->assertEquals( 'Description 2 \\o/', $value['description'] );
-		$this->assertEquals( 1, $value['parent'] );
+		$this->assertSame( 'Name 2 \\o/', $value['name'] );
+		$this->assertSame( 'Description 2 \\o/', $value['description'] );
+		$this->assertSame( 1, $value['parent'] );
 		$term = (array) wp_get_nav_menu_object( $menu_id );
-		$this->assertEqualSets( $value, wp_array_slice_assoc( $term, array_keys( $value ) ) );
+		$this->assertSameSets( $value, wp_array_slice_assoc( $term, array_keys( $value ) ) );
 
 		$menu_object = wp_get_nav_menu_object( $menu_id );
 		$this->assertEquals( (object) $term, $menu_object );
-		$this->assertEquals( $post_value['name'], $menu_object->name );
+		$this->assertSame( $post_value['name'], $menu_object->name );
 
 		$nav_menu_options = get_option( 'nav_menu_options', array( 'auto_add' => array() ) );
 		$this->assertContains( $menu_id, $nav_menu_options['auto_add'] );
@@ -227,7 +227,7 @@ class Test_WP_Customize_Nav_Menu_Setting extends WP_UnitTestCase {
 		$i         = array_search( $menu_id, $menus_ids, true );
 		$this->assertInternalType( 'int', $i, 'Update-previewed menu does not appear in wp_get_nav_menus()' );
 		$filtered_menu = $menus[ $i ];
-		$this->assertEquals( 'Name 2 \\o/', $filtered_menu->name );
+		$this->assertSame( 'Name 2 \\o/', $filtered_menu->name );
 	}
 
 	/**
@@ -251,18 +251,18 @@ class Test_WP_Customize_Nav_Menu_Setting extends WP_UnitTestCase {
 		$this->wp_customize->set_post_value( $setting->id, $post_value );
 		$setting->preview();
 		$value = $setting->value();
-		$this->assertEquals( $post_value, $value );
+		$this->assertSame( $post_value, $value );
 
 		$term = (array) wp_get_nav_menu_object( $menu_id );
 		$this->assertNotEmpty( $term );
 		$this->assertNotWPError( $term );
-		$this->assertEqualSets( $post_value, wp_array_slice_assoc( $term, array_keys( $value ) ) );
-		$this->assertEquals( $menu_id, $term['term_id'] );
-		$this->assertEquals( $menu_id, $term['term_taxonomy_id'] );
+		$this->assertSameSets( $post_value, wp_array_slice_assoc( $term, array_keys( $value ) ) );
+		$this->assertSame( $menu_id, $term['term_id'] );
+		$this->assertSame( $menu_id, $term['term_taxonomy_id'] );
 
 		$menu_object = wp_get_nav_menu_object( $menu_id );
 		$this->assertEquals( (object) $term, $menu_object );
-		$this->assertEquals( $post_value['name'], $menu_object->name );
+		$this->assertSame( $post_value['name'], $menu_object->name );
 
 		$nav_menu_options = $this->get_nav_menu_items_option();
 		$this->assertNotContains( $menu_id, $nav_menu_options['auto_add'] );
@@ -272,7 +272,7 @@ class Test_WP_Customize_Nav_Menu_Setting extends WP_UnitTestCase {
 		$i         = array_search( $menu_id, $menus_ids, true );
 		$this->assertInternalType( 'int', $i, 'Insert-previewed menu was not injected into wp_get_nav_menus()' );
 		$filtered_menu = $menus[ $i ];
-		$this->assertEquals( 'New Menu Name 1 \\o/', $filtered_menu->name );
+		$this->assertSame( 'New Menu Name 1 \\o/', $filtered_menu->name );
 	}
 
 	/**
@@ -334,15 +334,15 @@ class Test_WP_Customize_Nav_Menu_Setting extends WP_UnitTestCase {
 			'extra'       => 'ignored',
 		);
 		$sanitized = $setting->sanitize( $value );
-		$this->assertEquals( 'Hello \\o/ &lt;b&gt;world&lt;/b&gt;', $sanitized['name'] );
-		$this->assertEquals( 'New line \\o/', $sanitized['description'] );
-		$this->assertEquals( 0, $sanitized['parent'] );
-		$this->assertEquals( true, $sanitized['auto_add'] );
-		$this->assertEqualSets( array( 'name', 'description', 'parent', 'auto_add' ), array_keys( $sanitized ) );
+		$this->assertSame( 'Hello \\o/ &lt;b&gt;world&lt;/b&gt;', $sanitized['name'] );
+		$this->assertSame( 'New line \\o/', $sanitized['description'] );
+		$this->assertSame( 0, $sanitized['parent'] );
+		$this->assertTrue( $sanitized['auto_add'] );
+		$this->assertSameSets( array( 'name', 'description', 'parent', 'auto_add' ), array_keys( $sanitized ) );
 
 		$value['name'] = '    '; // Blank spaces.
 		$sanitized     = $setting->sanitize( $value );
-		$this->assertEquals( '(unnamed)', $sanitized['name'] );
+		$this->assertSame( '(unnamed)', $sanitized['name'] );
 	}
 
 	/**
@@ -383,13 +383,13 @@ class Test_WP_Customize_Nav_Menu_Setting extends WP_UnitTestCase {
 
 		$menu_object = wp_get_nav_menu_object( $menu_id );
 		foreach ( array( 'name', 'description', 'parent' ) as $key ) {
-			$this->assertEquals( $new_value[ $key ], $menu_object->$key );
+			$this->assertSame( $new_value[ $key ], $menu_object->$key );
 		}
-		$this->assertEqualSets(
+		$this->assertSameSets(
 			wp_array_slice_assoc( $new_value, array( 'name', 'description', 'parent' ) ),
 			wp_array_slice_assoc( (array) $menu_object, array( 'name', 'description', 'parent' ) )
 		);
-		$this->assertEquals( $new_value, $setting->value() );
+		$this->assertSame( $new_value, $setting->value() );
 
 		$save_response = apply_filters( 'customize_save_response', array() );
 		$this->assertArrayHasKey( 'nav_menu_updates', $save_response );
@@ -399,12 +399,12 @@ class Test_WP_Customize_Nav_Menu_Setting extends WP_UnitTestCase {
 		$this->assertArrayHasKey( 'error', $update_result );
 		$this->assertArrayHasKey( 'status', $update_result );
 		$this->assertArrayHasKey( 'saved_value', $update_result );
-		$this->assertEquals( $new_value, $update_result['saved_value'] );
+		$this->assertSame( $new_value, $update_result['saved_value'] );
 
-		$this->assertEquals( $menu_id, $update_result['term_id'] );
+		$this->assertSame( $menu_id, $update_result['term_id'] );
 		$this->assertNull( $update_result['previous_term_id'] );
 		$this->assertNull( $update_result['error'] );
-		$this->assertEquals( 'updated', $update_result['status'] );
+		$this->assertSame( 'updated', $update_result['status'] );
 
 		$nav_menu_options = $this->get_nav_menu_items_option();
 		$this->assertNotContains( $menu_id, $nav_menu_options['auto_add'] );
@@ -433,7 +433,7 @@ class Test_WP_Customize_Nav_Menu_Setting extends WP_UnitTestCase {
 		$this->assertNull( $setting->previous_term_id );
 		$this->assertLessThan( 0, $setting->term_id );
 		$setting->save();
-		$this->assertEquals( $menu_id, $setting->previous_term_id );
+		$this->assertSame( $menu_id, $setting->previous_term_id );
 		$this->assertGreaterThan( 0, $setting->term_id );
 
 		$nav_menu_options = $this->get_nav_menu_items_option();
@@ -441,7 +441,7 @@ class Test_WP_Customize_Nav_Menu_Setting extends WP_UnitTestCase {
 
 		$menu = wp_get_nav_menu_object( $setting->term_id );
 		unset( $post_value['auto_add'] );
-		$this->assertEqualSets( $post_value, wp_array_slice_assoc( (array) $menu, array_keys( $post_value ) ) );
+		$this->assertSameSets( $post_value, wp_array_slice_assoc( (array) $menu, array_keys( $post_value ) ) );
 
 		$save_response = apply_filters( 'customize_save_response', array() );
 		$this->assertArrayHasKey( 'nav_menu_updates', $save_response );
@@ -451,12 +451,12 @@ class Test_WP_Customize_Nav_Menu_Setting extends WP_UnitTestCase {
 		$this->assertArrayHasKey( 'error', $update_result );
 		$this->assertArrayHasKey( 'status', $update_result );
 		$this->assertArrayHasKey( 'saved_value', $update_result );
-		$this->assertEquals( $setting->value(), $update_result['saved_value'] );
+		$this->assertSame( $setting->value(), $update_result['saved_value'] );
 
-		$this->assertEquals( $menu->term_id, $update_result['term_id'] );
-		$this->assertEquals( $menu_id, $update_result['previous_term_id'] );
+		$this->assertSame( $menu->term_id, $update_result['term_id'] );
+		$this->assertSame( $menu_id, $update_result['previous_term_id'] );
 		$this->assertNull( $update_result['error'] );
-		$this->assertEquals( 'inserted', $update_result['status'] );
+		$this->assertSame( 'inserted', $update_result['status'] );
 	}
 
 	/**
@@ -478,10 +478,10 @@ class Test_WP_Customize_Nav_Menu_Setting extends WP_UnitTestCase {
 
 		$expected_resolved_menu_name = "$menu_name (2)";
 		$new_menu                    = wp_get_nav_menu_object( $setting->term_id );
-		$this->assertEquals( $expected_resolved_menu_name, $new_menu->name );
+		$this->assertSame( $expected_resolved_menu_name, $new_menu->name );
 
 		$save_response = apply_filters( 'customize_save_response', array() );
-		$this->assertEquals( $expected_resolved_menu_name, $save_response['nav_menu_updates'][0]['saved_value']['name'] );
+		$this->assertSame( $expected_resolved_menu_name, $save_response['nav_menu_updates'][0]['saved_value']['name'] );
 	}
 
 	/**
@@ -501,7 +501,7 @@ class Test_WP_Customize_Nav_Menu_Setting extends WP_UnitTestCase {
 		update_option( 'nav_menu_options', $nav_menu_options );
 
 		$menu = wp_get_nav_menu_object( $menu_id );
-		$this->assertEquals( $menu_name, $menu->name );
+		$this->assertSame( $menu_name, $menu->name );
 
 		$this->wp_customize->set_post_value( $setting_id, false );
 		$setting->save();
@@ -518,10 +518,10 @@ class Test_WP_Customize_Nav_Menu_Setting extends WP_UnitTestCase {
 		$this->assertArrayHasKey( 'saved_value', $update_result );
 		$this->assertNull( $update_result['saved_value'] );
 
-		$this->assertEquals( $menu_id, $update_result['term_id'] );
+		$this->assertSame( $menu_id, $update_result['term_id'] );
 		$this->assertNull( $update_result['previous_term_id'] );
 		$this->assertNull( $update_result['error'] );
-		$this->assertEquals( 'deleted', $update_result['status'] );
+		$this->assertSame( 'deleted', $update_result['status'] );
 
 		$nav_menu_options = $this->get_nav_menu_items_option();
 		$this->assertNotContains( $menu_id, $nav_menu_options['auto_add'] );
diff --git a/tests/customize/nav-menus.php b/tests/customize/nav-menus.php
index 1de6047097..282988c081 100644
--- a/tests/customize/nav-menus.php
+++ b/tests/customize/nav-menus.php
@@ -46,9 +46,9 @@ class Test_WP_Customize_Nav_Menus extends WP_UnitTestCase {
 	function filter_item_types( $items ) {
 		$items[] = array(
 			'title'      => 'Custom',
+			'type_label' => 'Custom Type',
 			'type'       => 'custom_type',
 			'object'     => 'custom_object',
-			'type_label' => 'Custom Type',
 		);
 
 		return $items;
@@ -86,20 +86,20 @@ class Test_WP_Customize_Nav_Menus extends WP_UnitTestCase {
 		$menus = new WP_Customize_Nav_Menus( $this->wp_customize );
 		$this->assertInstanceOf( 'WP_Customize_Manager', $menus->manager );
 
-		$this->assertEquals( 10, add_filter( 'customize_refresh_nonces', array( $menus, 'filter_nonces' ) ) );
-		$this->assertEquals( 10, add_action( 'wp_ajax_load-available-menu-items-customizer', array( $menus, 'ajax_load_available_items' ) ) );
-		$this->assertEquals( 10, add_action( 'wp_ajax_search-available-menu-items-customizer', array( $menus, 'ajax_search_available_items' ) ) );
-		$this->assertEquals( 10, add_action( 'wp_ajax_customize-nav-menus-insert-auto-draft', array( $menus, 'ajax_insert_auto_draft_post' ) ) );
-		$this->assertEquals( 10, add_action( 'customize_controls_enqueue_scripts', array( $menus, 'enqueue_scripts' ) ) );
-		$this->assertEquals( 11, add_action( 'customize_register', array( $menus, 'customize_register' ) ) );
-		$this->assertEquals( 10, add_filter( 'customize_dynamic_setting_args', array( $menus, 'filter_dynamic_setting_args' ) ) );
-		$this->assertEquals( 10, add_filter( 'customize_dynamic_setting_class', array( $menus, 'filter_dynamic_setting_class' ) ) );
-		$this->assertEquals( 10, add_action( 'customize_controls_print_footer_scripts', array( $menus, 'print_templates' ) ) );
-		$this->assertEquals( 10, add_action( 'customize_controls_print_footer_scripts', array( $menus, 'available_items_template' ) ) );
-		$this->assertEquals( 10, add_action( 'customize_preview_init', array( $menus, 'customize_preview_init' ) ) );
-		$this->assertEquals( 10, add_action( 'customize_preview_init', array( $menus, 'make_auto_draft_status_previewable' ) ) );
-		$this->assertEquals( 10, add_action( 'customize_save_nav_menus_created_posts', array( $menus, 'save_nav_menus_created_posts' ) ) );
-		$this->assertEquals( 10, add_filter( 'customize_dynamic_partial_args', array( $menus, 'customize_dynamic_partial_args' ) ) );
+		$this->assertTrue( add_filter( 'customize_refresh_nonces', array( $menus, 'filter_nonces' ) ) );
+		$this->assertTrue( add_action( 'wp_ajax_load-available-menu-items-customizer', array( $menus, 'ajax_load_available_items' ) ) );
+		$this->assertTrue( add_action( 'wp_ajax_search-available-menu-items-customizer', array( $menus, 'ajax_search_available_items' ) ) );
+		$this->assertTrue( add_action( 'wp_ajax_customize-nav-menus-insert-auto-draft', array( $menus, 'ajax_insert_auto_draft_post' ) ) );
+		$this->assertTrue( add_action( 'customize_controls_enqueue_scripts', array( $menus, 'enqueue_scripts' ) ) );
+		$this->assertTrue( add_action( 'customize_register', array( $menus, 'customize_register' ) ) );
+		$this->assertTrue( add_filter( 'customize_dynamic_setting_args', array( $menus, 'filter_dynamic_setting_args' ) ) );
+		$this->assertTrue( add_filter( 'customize_dynamic_setting_class', array( $menus, 'filter_dynamic_setting_class' ) ) );
+		$this->assertTrue( add_action( 'customize_controls_print_footer_scripts', array( $menus, 'print_templates' ) ) );
+		$this->assertTrue( add_action( 'customize_controls_print_footer_scripts', array( $menus, 'available_items_template' ) ) );
+		$this->assertTrue( add_action( 'customize_preview_init', array( $menus, 'customize_preview_init' ) ) );
+		$this->assertTrue( add_action( 'customize_preview_init', array( $menus, 'make_auto_draft_status_previewable' ) ) );
+		$this->assertTrue( add_action( 'customize_save_nav_menus_created_posts', array( $menus, 'save_nav_menus_created_posts' ) ) );
+		$this->assertTrue( add_filter( 'customize_dynamic_partial_args', array( $menus, 'customize_dynamic_partial_args' ) ) );
 	}
 
 	/**
@@ -113,12 +113,12 @@ class Test_WP_Customize_Nav_Menus extends WP_UnitTestCase {
 		// Invalid post type $obj_name.
 		$items = $menus->load_available_items_query( 'post_type', 'invalid' );
 		$this->assertInstanceOf( 'WP_Error', $items );
-		$this->assertEquals( 'nav_menus_invalid_post_type', $items->get_error_code() );
+		$this->assertSame( 'nav_menus_invalid_post_type', $items->get_error_code() );
 
 		// Invalid taxonomy $obj_name.
 		$items = $menus->load_available_items_query( 'taxonomy', 'invalid' );
 		$this->assertInstanceOf( 'WP_Error', $items );
-		$this->assertEquals( 'invalid_taxonomy', $items->get_error_code() );
+		$this->assertSame( 'invalid_taxonomy', $items->get_error_code() );
 	}
 
 	/**
@@ -317,7 +317,7 @@ class Test_WP_Customize_Nav_Menus extends WP_UnitTestCase {
 				's'       => 'This Does NOT Exist',
 			)
 		);
-		$this->assertEquals( $expected, $results );
+		$this->assertSame( $expected, $results );
 
 		// Test posts.
 		foreach ( $post_ids as $post_id ) {
@@ -339,7 +339,7 @@ class Test_WP_Customize_Nav_Menus extends WP_UnitTestCase {
 					's'       => $s,
 				)
 			);
-			$this->assertEquals( $expected, $results[0] );
+			$this->assertSame( $expected, $results[0] );
 		}
 
 		// Test terms.
@@ -361,7 +361,7 @@ class Test_WP_Customize_Nav_Menus extends WP_UnitTestCase {
 					's'       => $s,
 				)
 			);
-			$this->assertEquals( $expected, $results[0] );
+			$this->assertSame( $expected, $results[0] );
 		}
 
 		// Test filtered results.
@@ -371,7 +371,7 @@ class Test_WP_Customize_Nav_Menus extends WP_UnitTestCase {
 				's'       => 'cat',
 			)
 		);
-		$this->assertEquals( 1, count( $results ) );
+		$this->assertCount( 2, $results ); // Category terms Cats Drool and Uncategorized.
 		$count = $this->filter_count_customize_nav_menu_searched_items;
 		add_filter( 'customize_nav_menu_searched_items', array( $this, 'filter_search' ), 10, 2 );
 		$results = $menus->search_available_items_query(
@@ -380,9 +380,9 @@ class Test_WP_Customize_Nav_Menus extends WP_UnitTestCase {
 				's'       => 'cat',
 			)
 		);
-		$this->assertEquals( $count + 1, $this->filter_count_customize_nav_menu_searched_items );
+		$this->assertSame( $count + 1, $this->filter_count_customize_nav_menu_searched_items );
 		$this->assertInternalType( 'array', $results );
-		$this->assertEquals( 2, count( $results ) );
+		$this->assertCount( 3, $results );
 		remove_filter( 'customize_nav_menu_searched_items', array( $this, 'filter_search' ), 10 );
 
 		// Test home.
@@ -394,8 +394,55 @@ class Test_WP_Customize_Nav_Menus extends WP_UnitTestCase {
 			)
 		);
 		$this->assertCount( 1, $results );
-		$this->assertEquals( 'home', $results[0]['id'] );
-		$this->assertEquals( 'custom', $results[0]['type'] );
+		$this->assertSame( 'home', $results[0]['id'] );
+		$this->assertSame( 'custom', $results[0]['type'] );
+	}
+
+	/*
+	 * Tests that the search_available_items_query method should return term items
+	 * not assigned to any posts.
+	 *
+	 * @ticket 45298
+	 */
+	public function test_search_available_items_query_should_return_unassigned_term_items() {
+		$menus = new WP_Customize_Nav_Menus( $this->wp_customize );
+
+		register_taxonomy(
+			'wptests_tax',
+			'post',
+			array(
+				'labels' => array(
+					'name' => 'Tests Taxonomy',
+				),
+			)
+		);
+
+		$term_id = $this->factory->term->create(
+			array(
+				'taxonomy' => 'wptests_tax',
+				'name'     => 'foobar',
+			)
+		);
+
+		// Expected menu item array.
+		$expected = array(
+			'title'      => 'foobar',
+			'id'         => "term-{$term_id}",
+			'type'       => 'taxonomy',
+			'type_label' => 'Tests Taxonomy',
+			'object'     => 'wptests_tax',
+			'object_id'  => intval( $term_id ),
+			'url'        => get_term_link( intval( $term_id ), '' ),
+		);
+
+		$results = $menus->search_available_items_query(
+			array(
+				'pagenum' => 1,
+				's'       => 'foo',
+			)
+		);
+
+		$this->assertSameSets( $expected, $results[0] );
 	}
 
 	/**
@@ -465,11 +512,11 @@ class Test_WP_Customize_Nav_Menus extends WP_UnitTestCase {
 
 		$expected = array( 'type' => 'nav_menu_item' );
 		$results  = $menus->filter_dynamic_setting_args( $this->wp_customize, 'nav_menu_item[123]' );
-		$this->assertEquals( $expected['type'], $results['type'] );
+		$this->assertSame( $expected['type'], $results['type'] );
 
 		$expected = array( 'type' => 'nav_menu' );
 		$results  = $menus->filter_dynamic_setting_args( $this->wp_customize, 'nav_menu[123]' );
-		$this->assertEquals( $expected['type'], $results['type'] );
+		$this->assertSame( $expected['type'], $results['type'] );
 	}
 
 	/**
@@ -483,11 +530,11 @@ class Test_WP_Customize_Nav_Menus extends WP_UnitTestCase {
 
 		$expected = 'WP_Customize_Nav_Menu_Item_Setting';
 		$results  = $menus->filter_dynamic_setting_class( 'WP_Customize_Setting', 'nav_menu_item[123]', array( 'type' => 'nav_menu_item' ) );
-		$this->assertEquals( $expected, $results );
+		$this->assertSame( $expected, $results );
 
 		$expected = 'WP_Customize_Nav_Menu_Setting';
 		$results  = $menus->filter_dynamic_setting_class( 'WP_Customize_Setting', 'nav_menu[123]', array( 'type' => 'nav_menu' ) );
-		$this->assertEquals( $expected, $results );
+		$this->assertSame( $expected, $results );
 	}
 
 	/**
@@ -512,14 +559,14 @@ class Test_WP_Customize_Nav_Menus extends WP_UnitTestCase {
 		);
 		do_action( 'customize_register', $this->wp_customize );
 		$this->assertInstanceOf( 'WP_Customize_Nav_Menu_Item_Setting', $this->wp_customize->get_setting( "nav_menu_item[$item_id]" ) );
-		$this->assertEquals( 'Primary', $this->wp_customize->get_section( "nav_menu[$menu_id]" )->title );
-		$this->assertEquals( 'Hello World', $this->wp_customize->get_control( "nav_menu_item[$item_id]" )->label );
+		$this->assertSame( 'Primary', $this->wp_customize->get_section( "nav_menu[$menu_id]" )->title );
+		$this->assertSame( 'Hello World', $this->wp_customize->get_control( "nav_menu_item[$item_id]" )->label );
 
 		$nav_menus_created_posts_setting = $this->wp_customize->get_setting( 'nav_menus_created_posts' );
 		$this->assertInstanceOf( 'WP_Customize_Filter_Setting', $nav_menus_created_posts_setting );
-		$this->assertEquals( 'postMessage', $nav_menus_created_posts_setting->transport );
-		$this->assertEquals( array(), $nav_menus_created_posts_setting->default );
-		$this->assertEquals( array( $this->wp_customize->nav_menus, 'sanitize_nav_menus_created_posts' ), $nav_menus_created_posts_setting->sanitize_callback );
+		$this->assertSame( 'postMessage', $nav_menus_created_posts_setting->transport );
+		$this->assertSame( array(), $nav_menus_created_posts_setting->default );
+		$this->assertSame( array( $this->wp_customize->nav_menus, 'sanitize_nav_menus_created_posts' ), $nav_menus_created_posts_setting->sanitize_callback );
 	}
 
 	/**
@@ -531,14 +578,14 @@ class Test_WP_Customize_Nav_Menus extends WP_UnitTestCase {
 
 		$menus = new WP_Customize_Nav_Menus( $this->wp_customize );
 
-		$this->assertEquals( 2, $menus->intval_base10( 2 ) );
-		$this->assertEquals( 4, $menus->intval_base10( 4.1 ) );
-		$this->assertEquals( 4, $menus->intval_base10( '4' ) );
-		$this->assertEquals( 4, $menus->intval_base10( '04' ) );
-		$this->assertEquals( 42, $menus->intval_base10( +42 ) );
-		$this->assertEquals( -42, $menus->intval_base10( -42 ) );
-		$this->assertEquals( 26, $menus->intval_base10( 0x1A ) );
-		$this->assertEquals( 0, $menus->intval_base10( array() ) );
+		$this->assertSame( 2, $menus->intval_base10( 2 ) );
+		$this->assertSame( 4, $menus->intval_base10( 4.1 ) );
+		$this->assertSame( 4, $menus->intval_base10( '4' ) );
+		$this->assertSame( 4, $menus->intval_base10( '04' ) );
+		$this->assertSame( 42, $menus->intval_base10( +42 ) );
+		$this->assertSame( -42, $menus->intval_base10( -42 ) );
+		$this->assertSame( 26, $menus->intval_base10( 0x1A ) );
+		$this->assertSame( 0, $menus->intval_base10( array() ) );
 	}
 
 	/**
@@ -553,60 +600,60 @@ class Test_WP_Customize_Nav_Menus extends WP_UnitTestCase {
 		$expected = array(
 			array(
 				'title'      => 'Posts',
+				'type_label' => __( 'Post' ),
 				'type'       => 'post_type',
 				'object'     => 'post',
-				'type_label' => __( 'Post' ),
 			),
 			array(
 				'title'      => 'Pages',
+				'type_label' => __( 'Page' ),
 				'type'       => 'post_type',
 				'object'     => 'page',
-				'type_label' => __( 'Page' ),
 			),
 			array(
 				'title'      => 'Categories',
+				'type_label' => __( 'Category' ),
 				'type'       => 'taxonomy',
 				'object'     => 'category',
-				'type_label' => __( 'Category' ),
 			),
 			array(
 				'title'      => 'Tags',
+				'type_label' => __( 'Tag' ),
 				'type'       => 'taxonomy',
 				'object'     => 'post_tag',
-				'type_label' => __( 'Tag' ),
 			),
 		);
 
 		if ( current_theme_supports( 'post-formats' ) ) {
 			$expected[] = array(
 				'title'      => 'Format',
+				'type_label' => __( 'Format' ),
 				'type'       => 'taxonomy',
 				'object'     => 'post_format',
-				'type_label' => __( 'Format' ),
 			);
 		}
 
-		$this->assertEquals( $expected, $menus->available_item_types() );
+		$this->assertSame( $expected, $menus->available_item_types() );
 
 		register_taxonomy( 'wptests_tax', array( 'post' ), array( 'labels' => array( 'name' => 'Foo' ) ) );
 		$expected[] = array(
 			'title'      => 'Foo',
+			'type_label' => 'Foo',
 			'type'       => 'taxonomy',
 			'object'     => 'wptests_tax',
-			'type_label' => 'Foo',
 		);
 
-		$this->assertEquals( $expected, $menus->available_item_types() );
+		$this->assertSame( $expected, $menus->available_item_types() );
 
 		$expected[] = array(
 			'title'      => 'Custom',
+			'type_label' => 'Custom Type',
 			'type'       => 'custom_type',
 			'object'     => 'custom_object',
-			'type_label' => 'Custom Type',
 		);
 
 		add_filter( 'customize_nav_menu_available_item_types', array( $this, 'filter_item_types' ) );
-		$this->assertEquals( $expected, $menus->available_item_types() );
+		$this->assertSame( $expected, $menus->available_item_types() );
 		remove_filter( 'customize_nav_menu_available_item_types', array( $this, 'filter_item_types' ) );
 
 	}
@@ -614,14 +661,14 @@ class Test_WP_Customize_Nav_Menus extends WP_UnitTestCase {
 	/**
 	 * Test insert_auto_draft_post method.
 	 *
-	 * @covers WP_Customize_Nav_Menus::insert_auto_draft_post()
+	 * @covers WP_Customize_Nav_Menus::insert_auto_draft_post
 	 */
 	public function test_insert_auto_draft_post() {
 		$menus = new WP_Customize_Nav_Menus( $this->wp_customize );
 
 		$r = $menus->insert_auto_draft_post( array() );
 		$this->assertInstanceOf( 'WP_Error', $r );
-		$this->assertEquals( 'unknown_post_type', $r->get_error_code() );
+		$this->assertSame( 'unknown_post_type', $r->get_error_code() );
 
 		// Non-existent post types allowed as of #39610.
 		$r = $menus->insert_auto_draft_post(
@@ -631,11 +678,11 @@ class Test_WP_Customize_Nav_Menus extends WP_UnitTestCase {
 			)
 		);
 		$this->assertInstanceOf( 'WP_Post', $r );
-		$this->assertEquals( $this->wp_customize->changeset_uuid(), get_post_meta( $r->ID, '_customize_changeset_uuid', true ) );
+		$this->assertSame( $this->wp_customize->changeset_uuid(), get_post_meta( $r->ID, '_customize_changeset_uuid', true ) );
 
 		$r = $menus->insert_auto_draft_post( array( 'post_type' => 'post' ) );
 		$this->assertInstanceOf( 'WP_Error', $r );
-		$this->assertEquals( 'empty_title', $r->get_error_code() );
+		$this->assertSame( 'empty_title', $r->get_error_code() );
 
 		$r = $menus->insert_auto_draft_post(
 			array(
@@ -645,7 +692,7 @@ class Test_WP_Customize_Nav_Menus extends WP_UnitTestCase {
 			)
 		);
 		$this->assertInstanceOf( 'WP_Error', $r );
-		$this->assertEquals( 'status_forbidden', $r->get_error_code() );
+		$this->assertSame( 'status_forbidden', $r->get_error_code() );
 
 		$r = $menus->insert_auto_draft_post(
 			array(
@@ -654,11 +701,11 @@ class Test_WP_Customize_Nav_Menus extends WP_UnitTestCase {
 			)
 		);
 		$this->assertInstanceOf( 'WP_Post', $r );
-		$this->assertEquals( 'Hello World', $r->post_title );
-		$this->assertEquals( '', $r->post_name );
-		$this->assertEquals( 'hello-world', get_post_meta( $r->ID, '_customize_draft_post_name', true ) );
-		$this->assertEquals( $this->wp_customize->changeset_uuid(), get_post_meta( $r->ID, '_customize_changeset_uuid', true ) );
-		$this->assertEquals( 'post', $r->post_type );
+		$this->assertSame( 'Hello World', $r->post_title );
+		$this->assertSame( '', $r->post_name );
+		$this->assertSame( 'hello-world', get_post_meta( $r->ID, '_customize_draft_post_name', true ) );
+		$this->assertSame( $this->wp_customize->changeset_uuid(), get_post_meta( $r->ID, '_customize_changeset_uuid', true ) );
+		$this->assertSame( 'post', $r->post_type );
 
 		$r = $menus->insert_auto_draft_post(
 			array(
@@ -669,12 +716,12 @@ class Test_WP_Customize_Nav_Menus extends WP_UnitTestCase {
 			)
 		);
 		$this->assertInstanceOf( 'WP_Post', $r );
-		$this->assertEquals( 'Hello World', $r->post_title );
-		$this->assertEquals( 'post', $r->post_type );
-		$this->assertEquals( '', $r->post_name );
-		$this->assertEquals( 'greetings-world', get_post_meta( $r->ID, '_customize_draft_post_name', true ) );
-		$this->assertEquals( $this->wp_customize->changeset_uuid(), get_post_meta( $r->ID, '_customize_changeset_uuid', true ) );
-		$this->assertEquals( 'Hi World', $r->post_content );
+		$this->assertSame( 'Hello World', $r->post_title );
+		$this->assertSame( 'post', $r->post_type );
+		$this->assertSame( '', $r->post_name );
+		$this->assertSame( 'greetings-world', get_post_meta( $r->ID, '_customize_draft_post_name', true ) );
+		$this->assertSame( $this->wp_customize->changeset_uuid(), get_post_meta( $r->ID, '_customize_changeset_uuid', true ) );
+		$this->assertSame( 'Hi World', $r->post_content );
 	}
 
 	/**
@@ -758,14 +805,14 @@ class Test_WP_Customize_Nav_Menus extends WP_UnitTestCase {
 
 		$args = apply_filters( 'customize_dynamic_partial_args', false, 'nav_menu_instance[68b329da9893e34099c7d8ad5cb9c940]' );
 		$this->assertInternalType( 'array', $args );
-		$this->assertEquals( 'nav_menu_instance', $args['type'] );
-		$this->assertEquals( array( $this->wp_customize->nav_menus, 'render_nav_menu_partial' ), $args['render_callback'] );
+		$this->assertSame( 'nav_menu_instance', $args['type'] );
+		$this->assertSame( array( $this->wp_customize->nav_menus, 'render_nav_menu_partial' ), $args['render_callback'] );
 		$this->assertTrue( $args['container_inclusive'] );
 
 		$args = apply_filters( 'customize_dynamic_partial_args', array( 'fallback_refresh' => false ), 'nav_menu_instance[4099c7d8ad5cb9c94068b329da9893e3]' );
 		$this->assertInternalType( 'array', $args );
-		$this->assertEquals( 'nav_menu_instance', $args['type'] );
-		$this->assertEquals( array( $this->wp_customize->nav_menus, 'render_nav_menu_partial' ), $args['render_callback'] );
+		$this->assertSame( 'nav_menu_instance', $args['type'] );
+		$this->assertSame( array( $this->wp_customize->nav_menus, 'render_nav_menu_partial' ), $args['render_callback'] );
 		$this->assertTrue( $args['container_inclusive'] );
 		$this->assertFalse( $args['fallback_refresh'] );
 	}
@@ -780,15 +827,15 @@ class Test_WP_Customize_Nav_Menus extends WP_UnitTestCase {
 		$menus = new WP_Customize_Nav_Menus( $this->wp_customize );
 
 		$menus->customize_preview_init();
-		$this->assertEquals( 10, has_action( 'wp_enqueue_scripts', array( $menus, 'customize_preview_enqueue_deps' ) ) );
-		$this->assertEquals( 1000, has_filter( 'wp_nav_menu_args', array( $menus, 'filter_wp_nav_menu_args' ) ) );
-		$this->assertEquals( 10, has_filter( 'wp_nav_menu', array( $menus, 'filter_wp_nav_menu' ) ) );
+		$this->assertSame( 10, has_action( 'wp_enqueue_scripts', array( $menus, 'customize_preview_enqueue_deps' ) ) );
+		$this->assertSame( 1000, has_filter( 'wp_nav_menu_args', array( $menus, 'filter_wp_nav_menu_args' ) ) );
+		$this->assertSame( 10, has_filter( 'wp_nav_menu', array( $menus, 'filter_wp_nav_menu' ) ) );
 	}
 
 	/**
 	 * Test make_auto_draft_status_previewable.
 	 *
-	 * @covers WP_Customize_Nav_Menus::make_auto_draft_status_previewable()
+	 * @covers WP_Customize_Nav_Menus::make_auto_draft_status_previewable
 	 */
 	function test_make_auto_draft_status_previewable() {
 		global $wp_post_statuses;
@@ -800,7 +847,7 @@ class Test_WP_Customize_Nav_Menus extends WP_UnitTestCase {
 	/**
 	 * Test sanitize_nav_menus_created_posts.
 	 *
-	 * @covers WP_Customize_Nav_Menus::sanitize_nav_menus_created_posts()
+	 * @covers WP_Customize_Nav_Menus::sanitize_nav_menus_created_posts
 	 */
 	function test_sanitize_nav_menus_created_posts() {
 		$menus                 = new WP_Customize_Nav_Menus( $this->wp_customize );
@@ -860,21 +907,21 @@ class Test_WP_Customize_Nav_Menus extends WP_UnitTestCase {
 
 		wp_set_current_user( $contributor_user_id );
 		$sanitized = $menus->sanitize_nav_menus_created_posts( $value );
-		$this->assertEquals( array(), $sanitized );
+		$this->assertSame( array(), $sanitized );
 
 		wp_set_current_user( $author_user_id );
 		$sanitized = $menus->sanitize_nav_menus_created_posts( $value );
-		$this->assertEquals( array( $author_post_id ), $sanitized );
+		$this->assertSame( array( $author_post_id ), $sanitized );
 
 		wp_set_current_user( $administrator_user_id );
 		$sanitized = $menus->sanitize_nav_menus_created_posts( $value );
-		$this->assertEquals( array( $contributor_post_id, $author_post_id, $administrator_post_id, $draft_post_id ), $sanitized );
+		$this->assertSame( array( $contributor_post_id, $author_post_id, $administrator_post_id, $draft_post_id ), $sanitized );
 	}
 
 	/**
 	 * Test save_nav_menus_created_posts.
 	 *
-	 * @covers WP_Customize_Nav_Menus::save_nav_menus_created_posts()
+	 * @covers WP_Customize_Nav_Menus::save_nav_menus_created_posts
 	 */
 	function test_save_nav_menus_created_posts() {
 		$menus = new WP_Customize_Nav_Menus( $this->wp_customize );
@@ -949,13 +996,13 @@ class Test_WP_Customize_Nav_Menus extends WP_UnitTestCase {
 		$this->wp_customize->set_post_value( $setting_id, array_merge( $post_ids, array( $pre_published_post_id ) ) );
 		$setting = $this->wp_customize->get_setting( $setting_id );
 		$this->assertInstanceOf( 'WP_Customize_Filter_Setting', $setting );
-		$this->assertEquals( array( $menus, 'sanitize_nav_menus_created_posts' ), $setting->sanitize_callback );
-		$this->assertEquals( $drafted_post_ids, $setting->post_value() );
+		$this->assertSame( array( $menus, 'sanitize_nav_menus_created_posts' ), $setting->sanitize_callback );
+		$this->assertSame( $drafted_post_ids, $setting->post_value() );
 		$this->assertArrayNotHasKey( $private_post_id, $post_ids );
 		$this->assertArrayNotHasKey( $trashed_post_id, $post_ids );
 
-		$this->assertEquals( 'auto-draft', get_post_status( $drafted_post_ids[0] ) );
-		$this->assertEquals( 'draft', get_post_status( $drafted_post_ids[1] ) );
+		$this->assertSame( 'auto-draft', get_post_status( $drafted_post_ids[0] ) );
+		$this->assertSame( 'draft', get_post_status( $drafted_post_ids[1] ) );
 		foreach ( $drafted_post_ids as $post_id ) {
 			$this->assertEmpty( get_post( $post_id )->post_name );
 			$this->assertNotEmpty( get_post_meta( $post_id, '_customize_draft_post_name', true ) );
@@ -963,20 +1010,20 @@ class Test_WP_Customize_Nav_Menus extends WP_UnitTestCase {
 
 		$save_action_count = did_action( 'customize_save_nav_menus_created_posts' );
 		$setting->save();
-		$this->assertEquals( $save_action_count + 1, did_action( 'customize_save_nav_menus_created_posts' ) );
+		$this->assertSame( $save_action_count + 1, did_action( 'customize_save_nav_menus_created_posts' ) );
 		foreach ( $drafted_post_ids as $post_id ) {
-			$this->assertEquals( 'publish', get_post_status( $post_id ) );
+			$this->assertSame( 'publish', get_post_status( $post_id ) );
 			$this->assertRegExp( '/^auto-draft-\d+$/', get_post( $post_id )->post_name );
 			$this->assertEmpty( get_post_meta( $post_id, '_customize_draft_post_name', true ) );
 		}
 
-		$this->assertEquals( 'private', get_post_status( $private_post_id ) );
-		$this->assertEquals( 'trash', get_post_status( $trashed_post_id ) );
+		$this->assertSame( 'private', get_post_status( $private_post_id ) );
+		$this->assertSame( 'trash', get_post_status( $trashed_post_id ) );
 
 		// Ensure that unique slugs were assigned.
 		$posts      = array_map( 'get_post', $drafted_post_ids );
 		$post_names = wp_list_pluck( $posts, 'post_name' );
-		$this->assertEqualSets( $post_names, array_unique( $post_names ) );
+		$this->assertSameSets( $post_names, array_unique( $post_names ) );
 	}
 
 	/**
@@ -1011,7 +1058,7 @@ class Test_WP_Customize_Nav_Menus extends WP_UnitTestCase {
 		);
 		$this->assertFalse( $results['can_partial_refresh'] );
 		$this->assertArrayHasKey( 'customize_preview_nav_menus_args', $results );
-		$this->assertEquals( 'wp_page_menu', $results['fallback_cb'] );
+		$this->assertSame( 'wp_page_menu', $results['fallback_cb'] );
 
 		$nav_menu_term = get_term( wp_create_nav_menu( 'Bar' ) );
 		$results       = $menus->filter_wp_nav_menu_args(
@@ -1025,7 +1072,7 @@ class Test_WP_Customize_Nav_Menus extends WP_UnitTestCase {
 		);
 		$this->assertTrue( $results['can_partial_refresh'] );
 		$this->assertArrayHasKey( 'customize_preview_nav_menus_args', $results );
-		$this->assertEquals( $nav_menu_term->term_id, $results['customize_preview_nav_menus_args']['menu'] );
+		$this->assertSame( $nav_menu_term->term_id, $results['customize_preview_nav_menus_args']['menu'] );
 
 		$results = $menus->filter_wp_nav_menu_args(
 			array(
@@ -1067,8 +1114,8 @@ class Test_WP_Customize_Nav_Menus extends WP_UnitTestCase {
 	/**
 	 * Test the filter_wp_nav_menu method.
 	 *
-	 * @covers WP_Customize_Nav_Menus::filter_wp_nav_menu()
-	 * @covers WP_Customize_Nav_Menus::filter_wp_nav_menu_args()
+	 * @covers WP_Customize_Nav_Menus::filter_wp_nav_menu
+	 * @covers WP_Customize_Nav_Menus::filter_wp_nav_menu_args
 	 */
 	function test_filter_wp_nav_menu() {
 		do_action( 'customize_register', $this->wp_customize );
@@ -1097,7 +1144,7 @@ class Test_WP_Customize_Nav_Menus extends WP_UnitTestCase {
 		$this->assertContains( ' data-customize-partial-type="nav_menu_instance"', $result );
 		$this->assertTrue( (bool) preg_match( '/data-customize-partial-placement-context="(.+?)"/', $result, $matches ) );
 		$context = json_decode( html_entity_decode( $matches[1] ), true );
-		$this->assertEquals( $original_args, wp_array_slice_assoc( $context, array_keys( $original_args ) ) ); // Because assertArraySubset is not available in PHP 5.2.
+		$this->assertSame( $original_args, wp_array_slice_assoc( $context, array_keys( $original_args ) ) ); // Because assertArraySubset is not available in PHP 5.2.
 		$this->assertTrue( $context['can_partial_refresh'] );
 	}
 
@@ -1163,7 +1210,7 @@ class Test_WP_Customize_Nav_Menus extends WP_UnitTestCase {
 		$partials   = $this->wp_customize->selective_refresh->add_dynamic_partials( array( $partial_id ) );
 		$this->assertNotEmpty( $partials );
 		$partial = array_shift( $partials );
-		$this->assertEquals( $partial_id, $partial->id );
+		$this->assertSame( $partial_id, $partial->id );
 
 		$missing_args_hmac_args = array_merge(
 			$nav_menu_args['customize_preview_nav_menus_args'],
diff --git a/tests/customize/panel.php b/tests/customize/panel.php
index f93a4f6d71..063df5ee09 100644
--- a/tests/customize/panel.php
+++ b/tests/customize/panel.php
@@ -14,7 +14,7 @@ class Tests_WP_Customize_Panel extends WP_UnitTestCase {
 
 	function setUp() {
 		parent::setUp();
-		require_once( ABSPATH . WPINC . '/class-wp-customize-manager.php' );
+		require_once ABSPATH . WPINC . '/class-wp-customize-manager.php';
 		$GLOBALS['wp_customize'] = new WP_Customize_Manager();
 		$this->manager           = $GLOBALS['wp_customize'];
 		$this->undefined         = new stdClass();
@@ -32,16 +32,16 @@ class Tests_WP_Customize_Panel extends WP_UnitTestCase {
 	function test_construct_default_args() {
 		$panel = new WP_Customize_Panel( $this->manager, 'foo' );
 		$this->assertInternalType( 'int', $panel->instance_number );
-		$this->assertEquals( $this->manager, $panel->manager );
-		$this->assertEquals( 'foo', $panel->id );
-		$this->assertEquals( 160, $panel->priority );
-		$this->assertEquals( 'edit_theme_options', $panel->capability );
-		$this->assertEquals( '', $panel->theme_supports );
-		$this->assertEquals( '', $panel->title );
-		$this->assertEquals( '', $panel->description );
+		$this->assertSame( $this->manager, $panel->manager );
+		$this->assertSame( 'foo', $panel->id );
+		$this->assertSame( 160, $panel->priority );
+		$this->assertSame( 'edit_theme_options', $panel->capability );
+		$this->assertSame( '', $panel->theme_supports );
+		$this->assertSame( '', $panel->title );
+		$this->assertSame( '', $panel->description );
 		$this->assertEmpty( $panel->sections );
-		$this->assertEquals( 'default', $panel->type );
-		$this->assertEquals( array( $panel, 'active_callback' ), $panel->active_callback );
+		$this->assertSame( 'default', $panel->type );
+		$this->assertSame( array( $panel, 'active_callback' ), $panel->active_callback );
 	}
 
 	/**
@@ -60,7 +60,7 @@ class Tests_WP_Customize_Panel extends WP_UnitTestCase {
 
 		$panel = new WP_Customize_Panel( $this->manager, 'foo', $args );
 		foreach ( $args as $key => $value ) {
-			$this->assertEquals( $value, $panel->$key );
+			$this->assertSame( $value, $panel->$key );
 		}
 	}
 
@@ -69,7 +69,7 @@ class Tests_WP_Customize_Panel extends WP_UnitTestCase {
 	 */
 	function test_construct_custom_type() {
 		$panel = new Custom_Panel_Test( $this->manager, 'foo' );
-		$this->assertEquals( 'titleless', $panel->type );
+		$this->assertSame( 'titleless', $panel->type );
 	}
 
 	/**
@@ -119,9 +119,9 @@ class Tests_WP_Customize_Panel extends WP_UnitTestCase {
 		);
 		$panel = new WP_Customize_Panel( $this->manager, 'foo', $args );
 		$data  = $panel->json();
-		$this->assertEquals( 'foo', $data['id'] );
+		$this->assertSame( 'foo', $data['id'] );
 		foreach ( array( 'title', 'description', 'priority', 'type' ) as $key ) {
-			$this->assertEquals( $args[ $key ], $data[ $key ] );
+			$this->assertSame( $args[ $key ], $data[ $key ] );
 		}
 		$this->assertEmpty( $data['content'] );
 		$this->assertTrue( $data['active'] );
@@ -167,8 +167,8 @@ class Tests_WP_Customize_Panel extends WP_UnitTestCase {
 		$content = ob_get_clean();
 		$this->assertTrue( $panel->check_capabilities() );
 		$this->assertEmpty( $content );
-		$this->assertEquals( $customize_render_panel_count + 1, did_action( 'customize_render_panel' ), 'Unexpected did_action count for customize_render_panel' );
-		$this->assertEquals( 1, did_action( "customize_render_panel_{$panel->id}" ), "Unexpected did_action count for customize_render_panel_{$panel->id}" );
+		$this->assertSame( $customize_render_panel_count + 1, did_action( 'customize_render_panel' ), 'Unexpected did_action count for customize_render_panel' );
+		$this->assertSame( 1, did_action( "customize_render_panel_{$panel->id}" ), "Unexpected did_action count for customize_render_panel_{$panel->id}" );
 	}
 
 	/**
diff --git a/tests/customize/partial.php b/tests/customize/partial.php
index ebb778003a..e73ac56f0b 100644
--- a/tests/customize/partial.php
+++ b/tests/customize/partial.php
@@ -31,7 +31,7 @@ class Test_WP_Customize_Partial extends WP_UnitTestCase {
 	 */
 	function setUp() {
 		parent::setUp();
-		require_once( ABSPATH . WPINC . '/class-wp-customize-manager.php' );
+		require_once ABSPATH . WPINC . '/class-wp-customize-manager.php';
 		$GLOBALS['wp_customize'] = new WP_Customize_Manager();
 		$this->wp_customize      = $GLOBALS['wp_customize'];
 		if ( isset( $this->wp_customize->selective_refresh ) ) {
@@ -47,15 +47,15 @@ class Test_WP_Customize_Partial extends WP_UnitTestCase {
 	function test_construct_default_args() {
 		$partial_id = 'blogname';
 		$partial    = new WP_Customize_Partial( $this->selective_refresh, $partial_id );
-		$this->assertEquals( $partial_id, $partial->id );
-		$this->assertEquals( $this->selective_refresh, $partial->component );
-		$this->assertEquals( 'default', $partial->type );
+		$this->assertSame( $partial_id, $partial->id );
+		$this->assertSame( $this->selective_refresh, $partial->component );
+		$this->assertSame( 'default', $partial->type );
 		$this->assertEmpty( $partial->selector );
-		$this->assertEquals( array( $partial_id ), $partial->settings );
-		$this->assertEquals( $partial_id, $partial->primary_setting );
-		$this->assertEquals( array( $partial, 'render_callback' ), $partial->render_callback );
-		$this->assertEquals( false, $partial->container_inclusive );
-		$this->assertEquals( true, $partial->fallback_refresh );
+		$this->assertSame( array( $partial_id ), $partial->settings );
+		$this->assertSame( $partial_id, $partial->primary_setting );
+		$this->assertSame( array( $partial, 'render_callback' ), $partial->render_callback );
+		$this->assertFalse( $partial->container_inclusive );
+		$this->assertTrue( $partial->fallback_refresh );
 	}
 
 	/**
@@ -102,15 +102,15 @@ class Test_WP_Customize_Partial extends WP_UnitTestCase {
 			'fallback_refresh'    => false,
 		);
 		$partial    = new WP_Customize_Partial( $this->selective_refresh, $partial_id, $args );
-		$this->assertEquals( $partial_id, $partial->id );
-		$this->assertEquals( $this->selective_refresh, $partial->component );
-		$this->assertEquals( $args['type'], $partial->type );
-		$this->assertEquals( $args['selector'], $partial->selector );
-		$this->assertEqualSets( $args['settings'], $partial->settings );
-		$this->assertEquals( $args['primary_setting'], $partial->primary_setting );
-		$this->assertEquals( $args['render_callback'], $partial->render_callback );
-		$this->assertEquals( false, $partial->container_inclusive );
-		$this->assertEquals( false, $partial->fallback_refresh );
+		$this->assertSame( $partial_id, $partial->id );
+		$this->assertSame( $this->selective_refresh, $partial->component );
+		$this->assertSame( $args['type'], $partial->type );
+		$this->assertSame( $args['selector'], $partial->selector );
+		$this->assertSameSets( $args['settings'], $partial->settings );
+		$this->assertSame( $args['primary_setting'], $partial->primary_setting );
+		$this->assertSame( $args['render_callback'], $partial->render_callback );
+		$this->assertFalse( $partial->container_inclusive );
+		$this->assertFalse( $partial->fallback_refresh );
 		$this->assertContains( 'Lorem Ipsum', $partial->render() );
 
 		$partial = new WP_Customize_Partial(
@@ -120,8 +120,8 @@ class Test_WP_Customize_Partial extends WP_UnitTestCase {
 				'settings' => 'blogdescription',
 			)
 		);
-		$this->assertEquals( array( 'blogdescription' ), $partial->settings );
-		$this->assertEquals( 'blogdescription', $partial->primary_setting );
+		$this->assertSame( array( 'blogdescription' ), $partial->settings );
+		$this->assertSame( 'blogdescription', $partial->primary_setting );
 	}
 
 	/**
@@ -132,13 +132,13 @@ class Test_WP_Customize_Partial extends WP_UnitTestCase {
 	function test_id_data() {
 		$partial = new WP_Customize_Partial( $this->selective_refresh, 'foo' );
 		$id_data = $partial->id_data();
-		$this->assertEquals( 'foo', $id_data['base'] );
-		$this->assertEquals( array(), $id_data['keys'] );
+		$this->assertSame( 'foo', $id_data['base'] );
+		$this->assertSame( array(), $id_data['keys'] );
 
 		$partial = new WP_Customize_Partial( $this->selective_refresh, 'bar[baz][quux]' );
 		$id_data = $partial->id_data();
-		$this->assertEquals( 'bar', $id_data['base'] );
-		$this->assertEquals( array( 'baz', 'quux' ), $id_data['keys'] );
+		$this->assertSame( 'bar', $id_data['base'] );
+		$this->assertSame( array( 'baz', 'quux' ), $id_data['keys'] );
 	}
 
 	/**
@@ -180,7 +180,7 @@ class Test_WP_Customize_Partial extends WP_UnitTestCase {
 	 * @return string|false Content.
 	 */
 	function filter_customize_partial_render_with_id( $rendered, $partial, $container_context ) {
-		$this->assertEquals( sprintf( 'customize_partial_render_%s', $partial->id ), current_filter() );
+		$this->assertSame( sprintf( 'customize_partial_render_%s', $partial->id ), current_filter() );
 		$this->assertTrue( false === $rendered || is_string( $rendered ) );
 		$this->assertInstanceOf( 'WP_Customize_Partial', $partial );
 		$this->assertInternalType( 'array', $container_context );
@@ -249,9 +249,9 @@ class Test_WP_Customize_Partial extends WP_UnitTestCase {
 		add_filter( 'customize_partial_render', array( $this, 'filter_customize_partial_render' ), 10, 3 );
 		add_filter( "customize_partial_render_{$partial->id}", array( $this, 'filter_customize_partial_render_with_id' ), 10, 3 );
 		$rendered = $partial->render();
-		$this->assertEquals( 'foo', $rendered );
-		$this->assertEquals( $count_filter_customize_partial_render + 1, $this->count_filter_customize_partial_render );
-		$this->assertEquals( $count_filter_customize_partial_render_with_id + 1, $this->count_filter_customize_partial_render_with_id );
+		$this->assertSame( 'foo', $rendered );
+		$this->assertSame( $count_filter_customize_partial_render + 1, $this->count_filter_customize_partial_render );
+		$this->assertSame( $count_filter_customize_partial_render_with_id + 1, $this->count_filter_customize_partial_render_with_id );
 	}
 
 	/**
@@ -272,9 +272,9 @@ class Test_WP_Customize_Partial extends WP_UnitTestCase {
 		add_filter( 'customize_partial_render', array( $this, 'filter_customize_partial_render' ), 10, 3 );
 		add_filter( "customize_partial_render_{$partial->id}", array( $this, 'filter_customize_partial_render_with_id' ), 10, 3 );
 		$rendered = $partial->render();
-		$this->assertEquals( 'bar', $rendered );
-		$this->assertEquals( $count_filter_customize_partial_render + 1, $this->count_filter_customize_partial_render );
-		$this->assertEquals( $count_filter_customize_partial_render_with_id + 1, $this->count_filter_customize_partial_render_with_id );
+		$this->assertSame( 'bar', $rendered );
+		$this->assertSame( $count_filter_customize_partial_render + 1, $this->count_filter_customize_partial_render );
+		$this->assertSame( $count_filter_customize_partial_render_with_id + 1, $this->count_filter_customize_partial_render_with_id );
 	}
 
 	/**
diff --git a/tests/customize/section.php b/tests/customize/section.php
index f2b06dfda3..92d818fd7e 100644
--- a/tests/customize/section.php
+++ b/tests/customize/section.php
@@ -21,7 +21,7 @@ class Tests_WP_Customize_Section extends WP_UnitTestCase {
 
 	function setUp() {
 		parent::setUp();
-		require_once( ABSPATH . WPINC . '/class-wp-customize-manager.php' );
+		require_once ABSPATH . WPINC . '/class-wp-customize-manager.php';
 		$GLOBALS['wp_customize'] = new WP_Customize_Manager();
 		$this->manager           = $GLOBALS['wp_customize'];
 		$this->undefined         = new stdClass();
@@ -39,16 +39,16 @@ class Tests_WP_Customize_Section extends WP_UnitTestCase {
 	function test_construct_default_args() {
 		$section = new WP_Customize_Section( $this->manager, 'foo' );
 		$this->assertInternalType( 'int', $section->instance_number );
-		$this->assertEquals( $this->manager, $section->manager );
-		$this->assertEquals( 'foo', $section->id );
-		$this->assertEquals( 160, $section->priority );
-		$this->assertEquals( 'edit_theme_options', $section->capability );
-		$this->assertEquals( '', $section->theme_supports );
-		$this->assertEquals( '', $section->title );
-		$this->assertEquals( '', $section->description );
+		$this->assertSame( $this->manager, $section->manager );
+		$this->assertSame( 'foo', $section->id );
+		$this->assertSame( 160, $section->priority );
+		$this->assertSame( 'edit_theme_options', $section->capability );
+		$this->assertSame( '', $section->theme_supports );
+		$this->assertSame( '', $section->title );
+		$this->assertSame( '', $section->description );
 		$this->assertEmpty( $section->panel );
-		$this->assertEquals( 'default', $section->type );
-		$this->assertEquals( array( $section, 'active_callback' ), $section->active_callback );
+		$this->assertSame( 'default', $section->type );
+		$this->assertSame( array( $section, 'active_callback' ), $section->active_callback );
 	}
 
 	/**
@@ -70,7 +70,7 @@ class Tests_WP_Customize_Section extends WP_UnitTestCase {
 
 		$section = new WP_Customize_Section( $this->manager, 'foo', $args );
 		foreach ( $args as $key => $value ) {
-			$this->assertEquals( $value, $section->$key );
+			$this->assertSame( $value, $section->$key );
 		}
 	}
 
@@ -79,7 +79,7 @@ class Tests_WP_Customize_Section extends WP_UnitTestCase {
 	 */
 	function test_construct_custom_type() {
 		$section = new Custom_Section_Test( $this->manager, 'foo' );
-		$this->assertEquals( 'titleless', $section->type );
+		$this->assertSame( 'titleless', $section->type );
 	}
 
 	/**
@@ -133,9 +133,9 @@ class Tests_WP_Customize_Section extends WP_UnitTestCase {
 
 		$section = new WP_Customize_Section( $this->manager, 'foo', $args );
 		$data    = $section->json();
-		$this->assertEquals( 'foo', $data['id'] );
+		$this->assertSame( 'foo', $data['id'] );
 		foreach ( array( 'title', 'description', 'priority', 'panel', 'type' ) as $key ) {
-			$this->assertEquals( $args[ $key ], $data[ $key ] );
+			$this->assertSame( $args[ $key ], $data[ $key ] );
 		}
 		$this->assertEmpty( $data['content'] );
 		$this->assertTrue( $data['active'] );
@@ -180,8 +180,8 @@ class Tests_WP_Customize_Section extends WP_UnitTestCase {
 		$content = ob_get_clean();
 		$this->assertTrue( $section->check_capabilities() );
 		$this->assertEmpty( $content );
-		$this->assertEquals( $customize_render_section_count + 1, did_action( 'customize_render_section' ), 'Unexpected did_action count for customize_render_section' );
-		$this->assertEquals( 1, did_action( "customize_render_section_{$section->id}" ), "Unexpected did_action count for customize_render_section_{$section->id}" );
+		$this->assertSame( $customize_render_section_count + 1, did_action( 'customize_render_section' ), 'Unexpected did_action count for customize_render_section' );
+		$this->assertSame( 1, did_action( "customize_render_section_{$section->id}" ), "Unexpected did_action count for customize_render_section_{$section->id}" );
 	}
 
 	/**
diff --git a/tests/customize/selective-refresh-ajax.php b/tests/customize/selective-refresh-ajax.php
index 4de97dfd87..2f6e4a0f3b 100644
--- a/tests/customize/selective-refresh-ajax.php
+++ b/tests/customize/selective-refresh-ajax.php
@@ -41,7 +41,7 @@ class Test_WP_Customize_Selective_Refresh_Ajax extends WP_UnitTestCase {
 		add_filter( 'wp_doing_ajax', '__return_true' );
 		add_filter( 'wp_die_ajax_handler', array( $this, 'get_wp_die_handler' ), 1, 1 );
 
-		require_once( ABSPATH . WPINC . '/class-wp-customize-manager.php' );
+		require_once ABSPATH . WPINC . '/class-wp-customize-manager.php';
 		$GLOBALS['wp_customize'] = new WP_Customize_Manager();
 		$this->wp_customize      = $GLOBALS['wp_customize'];
 		if ( isset( $this->wp_customize->selective_refresh ) ) {
@@ -79,7 +79,7 @@ class Test_WP_Customize_Selective_Refresh_Ajax extends WP_UnitTestCase {
 		}
 		$output = json_decode( ob_get_clean(), true );
 		$this->assertFalse( $output['success'] );
-		$this->assertEquals( 'expected_customize_preview', $output['data'] );
+		$this->assertSame( 'expected_customize_preview', $output['data'] );
 
 		// Check expected_customize_preview.
 		wp_set_current_user( self::factory()->user->create( array( 'role' => 'administrator' ) ) );
@@ -92,7 +92,7 @@ class Test_WP_Customize_Selective_Refresh_Ajax extends WP_UnitTestCase {
 		}
 		$output = json_decode( ob_get_clean(), true );
 		$this->assertFalse( $output['success'] );
-		$this->assertEquals( 'expected_customize_preview', $output['data'] );
+		$this->assertSame( 'expected_customize_preview', $output['data'] );
 
 		// Check missing_partials.
 		$this->do_customize_boot_actions();
@@ -104,7 +104,7 @@ class Test_WP_Customize_Selective_Refresh_Ajax extends WP_UnitTestCase {
 		}
 		$output = json_decode( ob_get_clean(), true );
 		$this->assertFalse( $output['success'] );
-		$this->assertEquals( 'missing_partials', $output['data'] );
+		$this->assertSame( 'missing_partials', $output['data'] );
 
 		// Check missing_partials.
 		$_POST['partials'] = 'bad';
@@ -113,11 +113,11 @@ class Test_WP_Customize_Selective_Refresh_Ajax extends WP_UnitTestCase {
 		try {
 			$this->selective_refresh->handle_render_partials_request();
 		} catch ( WPDieException $e ) {
-			$this->assertEquals( '', $e->getMessage() );
+			$this->assertSame( '', $e->getMessage() );
 		}
 		$output = json_decode( ob_get_clean(), true );
 		$this->assertFalse( $output['success'] );
-		$this->assertEquals( 'malformed_partials', $output['data'] );
+		$this->assertSame( 'malformed_partials', $output['data'] );
 	}
 
 	/**
@@ -156,7 +156,7 @@ class Test_WP_Customize_Selective_Refresh_Ajax extends WP_UnitTestCase {
 			add_action( 'customize_render_partials_after', array( $this, 'handle_action_customize_render_partials_after' ), 10, 2 );
 			$this->selective_refresh->handle_render_partials_request();
 		} catch ( WPDieException $e ) {
-			$this->assertEquals( '', $e->getMessage() );
+			$this->assertSame( '', $e->getMessage() );
 		}
 		$output = json_decode( ob_get_clean(), true );
 		$this->assertTrue( $output['success'] );
@@ -164,7 +164,7 @@ class Test_WP_Customize_Selective_Refresh_Ajax extends WP_UnitTestCase {
 		$this->assertArrayHasKey( 'contents', $output['data'] );
 		$this->assertArrayHasKey( 'errors', $output['data'] );
 		$this->assertArrayHasKey( 'foo', $output['data']['contents'] );
-		$this->assertEquals( null, $output['data']['contents']['foo'] );
+		$this->assertNull( $output['data']['contents']['foo'] );
 	}
 
 	/**
@@ -198,12 +198,12 @@ class Test_WP_Customize_Selective_Refresh_Ajax extends WP_UnitTestCase {
 			add_action( 'customize_render_partials_after', array( $this, 'handle_action_customize_render_partials_after' ), 10, 2 );
 			$this->selective_refresh->handle_render_partials_request();
 		} catch ( WPDieException $e ) {
-			$this->assertEquals( '', $e->getMessage() );
+			$this->assertSame( '', $e->getMessage() );
 		}
 		$this->assertEquals( $count_customize_render_partials_before + 1, has_action( 'customize_render_partials_before' ) );
 		$this->assertEquals( $count_customize_render_partials_after + 1, has_action( 'customize_render_partials_after' ) );
 		$output = json_decode( ob_get_clean(), true );
-		$this->assertEquals( array( false ), $output['data']['contents']['foo'] );
+		$this->assertSame( array( false ), $output['data']['contents']['foo'] );
 	}
 
 	/**
@@ -236,7 +236,7 @@ class Test_WP_Customize_Selective_Refresh_Ajax extends WP_UnitTestCase {
 		try {
 			$this->selective_refresh->handle_render_partials_request();
 		} catch ( WPDieException $e ) {
-			$this->assertEquals( '', $e->getMessage() );
+			$this->assertSame( '', $e->getMessage() );
 		}
 		$output = json_decode( ob_get_clean(), true );
 		$this->assertNull( $output['data']['contents']['secret_message'] );
@@ -266,7 +266,7 @@ class Test_WP_Customize_Selective_Refresh_Ajax extends WP_UnitTestCase {
 		try {
 			$this->selective_refresh->handle_render_partials_request();
 		} catch ( WPDieException $e ) {
-			$this->assertEquals( '', $e->getMessage() );
+			$this->assertSame( '', $e->getMessage() );
 		}
 		$output = json_decode( ob_get_clean(), true );
 		$this->assertNull( $output['data']['contents']['bar'] );
@@ -336,12 +336,12 @@ class Test_WP_Customize_Selective_Refresh_Ajax extends WP_UnitTestCase {
 			add_action( 'customize_render_partials_after', array( $this, 'handle_action_customize_render_partials_after' ), 10, 2 );
 			$this->selective_refresh->handle_render_partials_request();
 		} catch ( WPDieException $e ) {
-			$this->assertEquals( '', $e->getMessage() );
+			$this->assertSame( '', $e->getMessage() );
 		}
 		$this->assertEquals( $count_customize_render_partials_before + 1, has_action( 'customize_render_partials_before' ) );
 		$this->assertEquals( $count_customize_render_partials_after + 1, has_action( 'customize_render_partials_after' ) );
 		$output = json_decode( ob_get_clean(), true );
-		$this->assertEquals( array( get_bloginfo( 'name', 'display' ) ), $output['data']['contents']['test_blogname'] );
+		$this->assertSame( array( get_bloginfo( 'name', 'display' ) ), $output['data']['contents']['test_blogname'] );
 		$this->assertArrayHasKey( 'setting_validities', $output['data'] );
 	}
 
@@ -377,7 +377,7 @@ class Test_WP_Customize_Selective_Refresh_Ajax extends WP_UnitTestCase {
 		$this->assertInternalType( 'array', $response );
 		$this->assertInstanceOf( 'WP_Customize_Selective_Refresh', $component );
 		if ( isset( $this->expected_partial_ids ) ) {
-			$this->assertEqualSets( $this->expected_partial_ids, array_keys( $partial_placements ) );
+			$this->assertSameSets( $this->expected_partial_ids, array_keys( $partial_placements ) );
 		}
 		return $response;
 	}
@@ -398,7 +398,7 @@ class Test_WP_Customize_Selective_Refresh_Ajax extends WP_UnitTestCase {
 	function handle_action_customize_render_partials_after( $component, $partial_placements ) {
 		$this->assertInstanceOf( 'WP_Customize_Selective_Refresh', $component );
 		if ( isset( $this->expected_partial_ids ) ) {
-			$this->assertEqualSets( $this->expected_partial_ids, array_keys( $partial_placements ) );
+			$this->assertSameSets( $this->expected_partial_ids, array_keys( $partial_placements ) );
 		}
 	}
 
@@ -411,7 +411,7 @@ class Test_WP_Customize_Selective_Refresh_Ajax extends WP_UnitTestCase {
 	function handle_action_customize_render_partials_before( $component, $partial_placements ) {
 		$this->assertInstanceOf( 'WP_Customize_Selective_Refresh', $component );
 		if ( isset( $this->expected_partial_ids ) ) {
-			$this->assertEqualSets( $this->expected_partial_ids, array_keys( $partial_placements ) );
+			$this->assertSameSets( $this->expected_partial_ids, array_keys( $partial_placements ) );
 		}
 	}
 
@@ -445,12 +445,12 @@ class Test_WP_Customize_Selective_Refresh_Ajax extends WP_UnitTestCase {
 			add_action( 'customize_render_partials_after', array( $this, 'handle_action_customize_render_partials_after' ), 10, 2 );
 			$this->selective_refresh->handle_render_partials_request();
 		} catch ( WPDieException $e ) {
-			$this->assertEquals( '', $e->getMessage() );
+			$this->assertSame( '', $e->getMessage() );
 		}
 		$this->assertEquals( $count_customize_render_partials_before + 1, has_action( 'customize_render_partials_before' ) );
 		$this->assertEquals( $count_customize_render_partials_after + 1, has_action( 'customize_render_partials_after' ) );
 		$output = json_decode( ob_get_clean(), true );
-		$this->assertEquals( array( get_bloginfo( 'name', 'display' ) ), $output['data']['contents']['test_dynamic_blogname'] );
+		$this->assertSame( array( get_bloginfo( 'name', 'display' ) ), $output['data']['contents']['test_dynamic_blogname'] );
 	}
 
 	/**
@@ -497,13 +497,13 @@ class Test_WP_Customize_Selective_Refresh_Ajax extends WP_UnitTestCase {
 			add_action( 'customize_render_partials_after', array( $this, 'handle_action_customize_render_partials_after' ), 10, 2 );
 			$this->selective_refresh->handle_render_partials_request();
 		} catch ( WPDieException $e ) {
-			$this->assertEquals( '', $e->getMessage() );
+			$this->assertSame( '', $e->getMessage() );
 		}
 		$this->assertEquals( $count_customize_render_partials_before + 1, has_action( 'customize_render_partials_before' ) );
 		$this->assertEquals( $count_customize_render_partials_after + 1, has_action( 'customize_render_partials_after' ) );
 		$output = json_decode( ob_get_clean(), true );
-		$this->assertEquals( array( get_bloginfo( 'name', 'display' ) ), $output['data']['contents']['test_blogname'] );
-		$this->assertEquals( array_fill( 0, 2, get_bloginfo( 'description', 'display' ) ), $output['data']['contents']['test_blogdescription'] );
+		$this->assertSame( array( get_bloginfo( 'name', 'display' ) ), $output['data']['contents']['test_blogname'] );
+		$this->assertSame( array_fill( 0, 2, get_bloginfo( 'description', 'display' ) ), $output['data']['contents']['test_blogdescription'] );
 	}
 
 	/**
diff --git a/tests/customize/selective-refresh.php b/tests/customize/selective-refresh.php
index 3edeee4170..cd0ce2ebc6 100644
--- a/tests/customize/selective-refresh.php
+++ b/tests/customize/selective-refresh.php
@@ -31,7 +31,7 @@ class Test_WP_Customize_Selective_Refresh extends WP_UnitTestCase {
 	 */
 	function setUp() {
 		parent::setUp();
-		require_once( ABSPATH . WPINC . '/class-wp-customize-manager.php' );
+		require_once ABSPATH . WPINC . '/class-wp-customize-manager.php';
 		$GLOBALS['wp_customize'] = new WP_Customize_Manager();
 		$this->wp_customize      = $GLOBALS['wp_customize'];
 		if ( isset( $this->wp_customize->selective_refresh ) ) {
@@ -45,7 +45,7 @@ class Test_WP_Customize_Selective_Refresh extends WP_UnitTestCase {
 	 * @see WP_Customize_Selective_Refresh::__construct()
 	 */
 	function test_construct() {
-		$this->assertEquals( $this->selective_refresh, $this->wp_customize->selective_refresh );
+		$this->assertSame( $this->selective_refresh, $this->wp_customize->selective_refresh );
 	}
 
 	/**
@@ -83,9 +83,9 @@ class Test_WP_Customize_Selective_Refresh extends WP_UnitTestCase {
 	 */
 	function test_crud_partial() {
 		$partial = $this->selective_refresh->add_partial( 'foo' );
-		$this->assertEquals( $this->selective_refresh, $partial->component );
+		$this->assertSame( $this->selective_refresh, $partial->component );
 		$this->assertInstanceOf( 'WP_Customize_Partial', $partial );
-		$this->assertEquals( $partial, $this->selective_refresh->get_partial( $partial->id ) );
+		$this->assertSame( $partial, $this->selective_refresh->get_partial( $partial->id ) );
 		$this->assertArrayHasKey( $partial->id, $this->selective_refresh->partials() );
 
 		$this->selective_refresh->remove_partial( $partial->id );
@@ -93,16 +93,16 @@ class Test_WP_Customize_Selective_Refresh extends WP_UnitTestCase {
 		$this->assertArrayNotHasKey( $partial->id, $this->selective_refresh->partials() );
 
 		$partial = new WP_Customize_Partial( $this->selective_refresh, 'bar' );
-		$this->assertEquals( $partial, $this->selective_refresh->add_partial( $partial ) );
-		$this->assertEquals( $partial, $this->selective_refresh->get_partial( 'bar' ) );
-		$this->assertEqualSets( array( 'bar' ), array_keys( $this->selective_refresh->partials() ) );
+		$this->assertSame( $partial, $this->selective_refresh->add_partial( $partial ) );
+		$this->assertSame( $partial, $this->selective_refresh->get_partial( 'bar' ) );
+		$this->assertSameSets( array( 'bar' ), array_keys( $this->selective_refresh->partials() ) );
 
 		add_filter( 'customize_dynamic_partial_args', array( $this, 'filter_customize_dynamic_partial_args' ), 10, 2 );
 		add_filter( 'customize_dynamic_partial_class', array( $this, 'filter_customize_dynamic_partial_class' ), 10, 3 );
 
 		$partial = $this->selective_refresh->add_partial( 'recognized-class' );
 		$this->assertInstanceOf( 'Tested_Custom_Partial', $partial );
-		$this->assertEquals( '.recognized', $partial->selector );
+		$this->assertSame( '.recognized', $partial->selector );
 	}
 
 	/**
@@ -112,8 +112,8 @@ class Test_WP_Customize_Selective_Refresh extends WP_UnitTestCase {
 	 */
 	function test_init_preview() {
 		$this->selective_refresh->init_preview();
-		$this->assertEquals( 10, has_action( 'template_redirect', array( $this->selective_refresh, 'handle_render_partials_request' ) ) );
-		$this->assertEquals( 10, has_action( 'wp_enqueue_scripts', array( $this->selective_refresh, 'enqueue_preview_scripts' ) ) );
+		$this->assertSame( 10, has_action( 'template_redirect', array( $this->selective_refresh, 'handle_render_partials_request' ) ) );
+		$this->assertSame( 10, has_action( 'wp_enqueue_scripts', array( $this->selective_refresh, 'enqueue_preview_scripts' ) ) );
 	}
 
 	/**
@@ -126,7 +126,7 @@ class Test_WP_Customize_Selective_Refresh extends WP_UnitTestCase {
 		$this->assertNotContains( 'customize-selective-refresh', $scripts->queue );
 		$this->selective_refresh->enqueue_preview_scripts();
 		$this->assertContains( 'customize-selective-refresh', $scripts->queue );
-		$this->assertEquals( 1000, has_action( 'wp_footer', array( $this->selective_refresh, 'export_preview_data' ) ) );
+		$this->assertSame( 1000, has_action( 'wp_footer', array( $this->selective_refresh, 'export_preview_data' ) ) );
 	}
 
 	/**
@@ -168,7 +168,7 @@ class Test_WP_Customize_Selective_Refresh extends WP_UnitTestCase {
 		$this->assertInternalType( 'array', $exported_data['partials'] );
 		$this->assertArrayHasKey( 'blogname', $exported_data['partials'] );
 		$this->assertArrayNotHasKey( 'top_secret_message', $exported_data['partials'] );
-		$this->assertEquals( '#site-title', $exported_data['partials']['blogname']['selector'] );
+		$this->assertSame( '#site-title', $exported_data['partials']['blogname']['selector'] );
 		$this->assertArrayHasKey( 'renderQueryVar', $exported_data );
 		$this->assertArrayHasKey( 'l10n', $exported_data );
 	}
@@ -190,11 +190,11 @@ class Test_WP_Customize_Selective_Refresh extends WP_UnitTestCase {
 		add_filter( 'customize_dynamic_partial_class', array( $this, 'filter_customize_dynamic_partial_class' ), 10, 3 );
 
 		$partials = $this->selective_refresh->add_dynamic_partials( $partial_ids );
-		$this->assertEqualSets( array( 'recognized', 'recognized-class' ), wp_list_pluck( $partials, 'id' ) );
+		$this->assertSameSets( array( 'recognized', 'recognized-class' ), wp_list_pluck( $partials, 'id' ) );
 
 		$this->assertInstanceOf( 'Tested_Custom_Partial', $this->selective_refresh->get_partial( 'recognized-class' ) );
 		$this->assertNotInstanceOf( 'Tested_Custom_Partial', $this->selective_refresh->get_partial( 'recognized' ) );
-		$this->assertEquals( '.recognized', $this->selective_refresh->get_partial( 'recognized' )->selector );
+		$this->assertSame( '.recognized', $this->selective_refresh->get_partial( 'recognized' )->selector );
 	}
 
 	/**
@@ -204,7 +204,7 @@ class Test_WP_Customize_Selective_Refresh extends WP_UnitTestCase {
 	 *
 	 * @param false|array $partial_args The arguments to the WP_Customize_Partial constructor.
 	 * @param string      $partial_id   ID for dynamic partial.
-	 * @return false|array $args Dynamic partial args.
+	 * @return false|array Dynamic partial args.
 	 */
 	function filter_customize_dynamic_partial_args( $partial_args, $partial_id ) {
 		$this->assertTrue( false === $partial_args || is_array( $partial_args ) );
diff --git a/tests/customize/setting.php b/tests/customize/setting.php
index bbead2f9a9..c382c343f1 100644
--- a/tests/customize/setting.php
+++ b/tests/customize/setting.php
@@ -19,7 +19,7 @@ class Tests_WP_Customize_Setting extends WP_UnitTestCase {
 
 	function setUp() {
 		parent::setUp();
-		require_once( ABSPATH . WPINC . '/class-wp-customize-manager.php' );
+		require_once ABSPATH . WPINC . '/class-wp-customize-manager.php';
 		$GLOBALS['wp_customize'] = new WP_Customize_Manager();
 		$this->manager           = $GLOBALS['wp_customize'];
 		$this->undefined         = new stdClass();
@@ -33,19 +33,19 @@ class Tests_WP_Customize_Setting extends WP_UnitTestCase {
 
 	function test_constructor_without_args() {
 		$setting = new WP_Customize_Setting( $this->manager, 'foo' );
-		$this->assertEquals( $this->manager, $setting->manager );
-		$this->assertEquals( 'foo', $setting->id );
-		$this->assertEquals( 'theme_mod', $setting->type );
-		$this->assertEquals( 'edit_theme_options', $setting->capability );
-		$this->assertEquals( '', $setting->theme_supports );
-		$this->assertEquals( '', $setting->default );
-		$this->assertEquals( 'refresh', $setting->transport );
-		$this->assertEquals( '', $setting->sanitize_callback );
-		$this->assertEquals( '', $setting->sanitize_js_callback );
+		$this->assertSame( $this->manager, $setting->manager );
+		$this->assertSame( 'foo', $setting->id );
+		$this->assertSame( 'theme_mod', $setting->type );
+		$this->assertSame( 'edit_theme_options', $setting->capability );
+		$this->assertSame( '', $setting->theme_supports );
+		$this->assertSame( '', $setting->default );
+		$this->assertSame( 'refresh', $setting->transport );
+		$this->assertSame( '', $setting->sanitize_callback );
+		$this->assertSame( '', $setting->sanitize_js_callback );
 		$this->assertFalse( has_filter( "customize_validate_{$setting->id}" ) );
 		$this->assertFalse( has_filter( "customize_sanitize_{$setting->id}" ) );
 		$this->assertFalse( has_filter( "customize_sanitize_js_{$setting->id}" ) );
-		$this->assertEquals( false, $setting->dirty );
+		$this->assertFalse( $setting->dirty );
 	}
 
 	/**
@@ -100,13 +100,13 @@ class Tests_WP_Customize_Setting extends WP_UnitTestCase {
 			'sanitize_js_callback' => array( $this, 'sanitize_js_callback_for_tests' ),
 		);
 		$setting = new WP_Customize_Setting( $this->manager, 'bar', $args );
-		$this->assertEquals( 'bar', $setting->id );
+		$this->assertSame( 'bar', $setting->id );
 		foreach ( $args as $key => $value ) {
-			$this->assertEquals( $value, $setting->$key );
+			$this->assertSame( $value, $setting->$key );
 		}
-		$this->assertEquals( 10, has_filter( "customize_validate_{$setting->id}", $args['validate_callback'] ) );
-		$this->assertEquals( 10, has_filter( "customize_sanitize_{$setting->id}", $args['sanitize_callback'] ) );
-		$this->assertEquals( 10, has_filter( "customize_sanitize_js_{$setting->id}", $args['sanitize_js_callback'] ) );
+		$this->assertSame( 10, has_filter( "customize_validate_{$setting->id}", $args['validate_callback'] ) );
+		$this->assertSame( 10, has_filter( "customize_sanitize_{$setting->id}", $args['sanitize_callback'] ) );
+		$this->assertSame( 10, has_filter( "customize_sanitize_js_{$setting->id}", $args['sanitize_js_callback'] ) );
 	}
 
 	public $post_data_overrides = array(
@@ -146,11 +146,11 @@ class Tests_WP_Customize_Setting extends WP_UnitTestCase {
 			$name    = "unset_{$type}_without_post_value";
 			$default = "default_value_{$name}";
 			$setting = new WP_Customize_Setting( $this->manager, $name, compact( 'type', 'default' ) );
-			$this->assertEquals( $this->undefined, call_user_func( $type_options['getter'], $name, $this->undefined ) );
-			$this->assertEquals( $default, $setting->value() );
+			$this->assertSame( $this->undefined, call_user_func( $type_options['getter'], $name, $this->undefined ) );
+			$this->assertSame( $default, $setting->value() );
 			$this->assertTrue( $setting->preview(), 'Preview should not no-op since setting has no existing value.' );
-			$this->assertEquals( $default, call_user_func( $type_options['getter'], $name, $this->undefined ), sprintf( 'Expected %s(%s) to return setting default: %s.', $type_options['getter'], $name, $default ) );
-			$this->assertEquals( $default, $setting->value() );
+			$this->assertSame( $default, call_user_func( $type_options['getter'], $name, $this->undefined ), sprintf( 'Expected %s(%s) to return setting default: %s.', $type_options['getter'], $name, $default ) );
+			$this->assertSame( $default, $setting->value() );
 
 			// Non-multidimensional: See what effect the preview has on an extant setting (default value should not be seen).
 			$name          = "set_{$type}_without_post_value";
@@ -158,40 +158,40 @@ class Tests_WP_Customize_Setting extends WP_UnitTestCase {
 			$initial_value = "initial_value_{$name}";
 			call_user_func( $type_options['setter'], $name, $initial_value );
 			$setting = new WP_Customize_Setting( $this->manager, $name, compact( 'type', 'default' ) );
-			$this->assertEquals( $initial_value, call_user_func( $type_options['getter'], $name ) );
-			$this->assertEquals( $initial_value, $setting->value() );
+			$this->assertSame( $initial_value, call_user_func( $type_options['getter'], $name ) );
+			$this->assertSame( $initial_value, $setting->value() );
 			$this->assertFalse( $setting->preview(), 'Preview should no-op since setting value was extant and no post value was present.' );
-			$this->assertEquals( 0, did_action( "customize_preview_{$setting->id}" ) ); // Only applicable for custom types (not options or theme_mods).
-			$this->assertEquals( 0, did_action( "customize_preview_{$setting->type}" ) ); // Only applicable for custom types (not options or theme_mods).
-			$this->assertEquals( $initial_value, call_user_func( $type_options['getter'], $name ) );
-			$this->assertEquals( $initial_value, $setting->value() );
+			$this->assertSame( 0, did_action( "customize_preview_{$setting->id}" ) ); // Only applicable for custom types (not options or theme_mods).
+			$this->assertSame( 0, did_action( "customize_preview_{$setting->type}" ) ); // Only applicable for custom types (not options or theme_mods).
+			$this->assertSame( $initial_value, call_user_func( $type_options['getter'], $name ) );
+			$this->assertSame( $initial_value, $setting->value() );
 
 			// Non-multidimensional: Try updating a value that had a no-op preview.
 			$overridden_value = "overridden_value_$name";
 			call_user_func( $type_options['setter'], $name, $overridden_value );
 			$message = 'Initial value should be overridden because initial preview() was no-op due to setting having existing value and/or post value was absent.';
-			$this->assertEquals( $overridden_value, call_user_func( $type_options['getter'], $name ), $message );
-			$this->assertEquals( $overridden_value, $setting->value(), $message );
+			$this->assertSame( $overridden_value, call_user_func( $type_options['getter'], $name ), $message );
+			$this->assertSame( $overridden_value, $setting->value(), $message );
 			$this->assertNotEquals( $initial_value, $setting->value(), $message );
 
 			// Non-multidimensional: Ensure that setting a post value *after* preview() is called results in the post value being seen (deferred preview).
 			$post_value = "post_value_for_{$setting->id}_set_after_preview_called";
-			$this->assertEquals( 0, did_action( "customize_post_value_set_{$setting->id}" ) );
+			$this->assertSame( 0, did_action( "customize_post_value_set_{$setting->id}" ) );
 			$this->manager->set_post_value( $setting->id, $post_value );
-			$this->assertEquals( 1, did_action( "customize_post_value_set_{$setting->id}" ) );
+			$this->assertSame( 1, did_action( "customize_post_value_set_{$setting->id}" ) );
 			$this->assertNotEquals( $overridden_value, $setting->value() );
-			$this->assertEquals( $post_value, call_user_func( $type_options['getter'], $name ) );
-			$this->assertEquals( $post_value, $setting->value() );
+			$this->assertSame( $post_value, call_user_func( $type_options['getter'], $name ) );
+			$this->assertSame( $post_value, $setting->value() );
 
 			// Non-multidimensional: Test unset setting being overridden by a post value.
 			$name    = "unset_{$type}_overridden";
 			$default = "default_value_{$name}";
 			$setting = new WP_Customize_Setting( $this->manager, $name, compact( 'type', 'default' ) );
-			$this->assertEquals( $this->undefined, call_user_func( $type_options['getter'], $name, $this->undefined ) );
-			$this->assertEquals( $default, $setting->value() );
+			$this->assertSame( $this->undefined, call_user_func( $type_options['getter'], $name, $this->undefined ) );
+			$this->assertSame( $default, $setting->value() );
 			$this->assertTrue( $setting->preview(), 'Preview applies because setting has post_data_overrides.' ); // Activate post_data.
-			$this->assertEquals( $this->post_data_overrides[ $name ], call_user_func( $type_options['getter'], $name, $this->undefined ) );
-			$this->assertEquals( $this->post_data_overrides[ $name ], $setting->value() );
+			$this->assertSame( $this->post_data_overrides[ $name ], call_user_func( $type_options['getter'], $name, $this->undefined ) );
+			$this->assertSame( $this->post_data_overrides[ $name ], $setting->value() );
 
 			// Non-multidimensional: Test set setting being overridden by a post value.
 			$name          = "set_{$type}_overridden";
@@ -199,13 +199,13 @@ class Tests_WP_Customize_Setting extends WP_UnitTestCase {
 			$initial_value = "initial_value_{$name}";
 			call_user_func( $type_options['setter'], $name, $initial_value );
 			$setting = new WP_Customize_Setting( $this->manager, $name, compact( 'type', 'default' ) );
-			$this->assertEquals( $initial_value, call_user_func( $type_options['getter'], $name, $this->undefined ) );
-			$this->assertEquals( $initial_value, $setting->value() );
+			$this->assertSame( $initial_value, call_user_func( $type_options['getter'], $name, $this->undefined ) );
+			$this->assertSame( $initial_value, $setting->value() );
 			$this->assertTrue( $setting->preview(), 'Preview applies because setting has post_data_overrides.' ); // Activate post_data.
-			$this->assertEquals( 0, did_action( "customize_preview_{$setting->id}" ) ); // Only applicable for custom types (not options or theme_mods).
-			$this->assertEquals( 0, did_action( "customize_preview_{$setting->type}" ) ); // Only applicable for custom types (not options or theme_mods).
-			$this->assertEquals( $this->post_data_overrides[ $name ], call_user_func( $type_options['getter'], $name, $this->undefined ) );
-			$this->assertEquals( $this->post_data_overrides[ $name ], $setting->value() );
+			$this->assertSame( 0, did_action( "customize_preview_{$setting->id}" ) ); // Only applicable for custom types (not options or theme_mods).
+			$this->assertSame( 0, did_action( "customize_preview_{$setting->type}" ) ); // Only applicable for custom types (not options or theme_mods).
+			$this->assertSame( $this->post_data_overrides[ $name ], call_user_func( $type_options['getter'], $name, $this->undefined ) );
+			$this->assertSame( $this->post_data_overrides[ $name ], $setting->value() );
 		}
 	}
 
@@ -225,12 +225,12 @@ class Tests_WP_Customize_Setting extends WP_UnitTestCase {
 			$name      = $base_name . '[foo]';
 			$default   = "default_value_{$name}";
 			$setting   = new WP_Customize_Setting( $this->manager, $name, compact( 'type', 'default' ) );
-			$this->assertEquals( $this->undefined, call_user_func( $type_options['getter'], $base_name, $this->undefined ) );
-			$this->assertEquals( $default, $setting->value() );
+			$this->assertSame( $this->undefined, call_user_func( $type_options['getter'], $base_name, $this->undefined ) );
+			$this->assertSame( $default, $setting->value() );
 			$this->assertTrue( $setting->preview(), "Preview for $setting->id should apply because setting is not in DB." );
 			$base_value = call_user_func( $type_options['getter'], $base_name, $this->undefined );
 			$this->assertArrayHasKey( 'foo', $base_value );
-			$this->assertEquals( $default, $base_value['foo'] );
+			$this->assertSame( $default, $base_value['foo'] );
 
 			// Multidimensional: See what effect the preview has on an extant setting (default value should not be seen) without post value.
 			$base_name          = "set_{$type}_multi";
@@ -244,35 +244,35 @@ class Tests_WP_Customize_Setting extends WP_UnitTestCase {
 			call_user_func( $type_options['setter'], $base_name, $base_initial_value );
 			$setting    = new WP_Customize_Setting( $this->manager, $name, compact( 'type', 'default' ) );
 			$base_value = call_user_func( $type_options['getter'], $base_name, array() );
-			$this->assertEquals( $initial_value, $base_value['foo'] );
-			$this->assertEquals( $initial_value, $setting->value() );
+			$this->assertSame( $initial_value, $base_value['foo'] );
+			$this->assertSame( $initial_value, $setting->value() );
 			$this->assertFalse( $setting->preview(), "Preview for $setting->id should no-op because setting is in DB and post value is absent." );
-			$this->assertEquals( 0, did_action( "customize_preview_{$setting->id}" ) ); // Only applicable for custom types (not options or theme_mods).
-			$this->assertEquals( 0, did_action( "customize_preview_{$setting->type}" ) ); // Only applicable for custom types (not options or theme_mods).
+			$this->assertSame( 0, did_action( "customize_preview_{$setting->id}" ) ); // Only applicable for custom types (not options or theme_mods).
+			$this->assertSame( 0, did_action( "customize_preview_{$setting->type}" ) ); // Only applicable for custom types (not options or theme_mods).
 			$base_value = call_user_func( $type_options['getter'], $base_name, array() );
-			$this->assertEquals( $initial_value, $base_value['foo'] );
-			$this->assertEquals( $initial_value, $setting->value() );
+			$this->assertSame( $initial_value, $base_value['foo'] );
+			$this->assertSame( $initial_value, $setting->value() );
 
 			// Multidimensional: Ensure that setting a post value *after* preview() is called results in the post value being seen (deferred preview).
 			$override_value = "post_value_for_{$setting->id}_set_after_preview_called";
 			$this->manager->set_post_value( $setting->id, $override_value );
 			$base_value = call_user_func( $type_options['getter'], $base_name, array() );
-			$this->assertEquals( $override_value, $base_value['foo'] );
-			$this->assertEquals( $override_value, $setting->value() );
+			$this->assertSame( $override_value, $base_value['foo'] );
+			$this->assertSame( $override_value, $setting->value() );
 
 			// Multidimensional: Test unset setting being overridden by a post value.
 			$base_name = "unset_{$type}_multi_overridden";
 			$name      = $base_name . '[foo]';
 			$default   = "default_value_{$name}";
 			$setting   = new WP_Customize_Setting( $this->manager, $name, compact( 'type', 'default' ) );
-			$this->assertEquals( $this->undefined, call_user_func( $type_options['getter'], $base_name, $this->undefined ) );
-			$this->assertEquals( $default, $setting->value() );
+			$this->assertSame( $this->undefined, call_user_func( $type_options['getter'], $base_name, $this->undefined ) );
+			$this->assertSame( $default, $setting->value() );
 			$this->assertTrue( $setting->preview(), "Preview for $setting->id should apply because a post value is present." );
-			$this->assertEquals( 0, did_action( "customize_preview_{$setting->id}" ) ); // Only applicable for custom types (not options or theme_mods).
-			$this->assertEquals( 0, did_action( "customize_preview_{$setting->type}" ) ); // Only applicable for custom types (not options or theme_mods).
+			$this->assertSame( 0, did_action( "customize_preview_{$setting->id}" ) ); // Only applicable for custom types (not options or theme_mods).
+			$this->assertSame( 0, did_action( "customize_preview_{$setting->type}" ) ); // Only applicable for custom types (not options or theme_mods).
 			$base_value = call_user_func( $type_options['getter'], $base_name, $this->undefined );
 			$this->assertArrayHasKey( 'foo', $base_value );
-			$this->assertEquals( $this->post_data_overrides[ $name ], $base_value['foo'] );
+			$this->assertSame( $this->post_data_overrides[ $name ], $base_value['foo'] );
 
 			// Multidimensional: Test set setting being overridden by a post value.
 			$base_name          = "set_{$type}_multi_overridden";
@@ -288,21 +288,21 @@ class Tests_WP_Customize_Setting extends WP_UnitTestCase {
 			$base_value = call_user_func( $type_options['getter'], $base_name, $this->undefined );
 			$this->assertArrayHasKey( 'foo', $base_value );
 			$this->assertArrayHasKey( 'bar', $base_value );
-			$this->assertEquals( $base_initial_value['foo'], $base_value['foo'] );
+			$this->assertSame( $base_initial_value['foo'], $base_value['foo'] );
 
 			$getter = call_user_func( $type_options['getter'], $base_name, $this->undefined );
-			$this->assertEquals( $base_initial_value['bar'], $getter['bar'] );
-			$this->assertEquals( $initial_value, $setting->value() );
+			$this->assertSame( $base_initial_value['bar'], $getter['bar'] );
+			$this->assertSame( $initial_value, $setting->value() );
 			$this->assertTrue( $setting->preview(), "Preview for $setting->id should apply because post value is present." );
-			$this->assertEquals( 0, did_action( "customize_preview_{$setting->id}" ) ); // Only applicable for custom types (not options or theme_mods).
-			$this->assertEquals( 0, did_action( "customize_preview_{$setting->type}" ) ); // Only applicable for custom types (not options or theme_mods).
+			$this->assertSame( 0, did_action( "customize_preview_{$setting->id}" ) ); // Only applicable for custom types (not options or theme_mods).
+			$this->assertSame( 0, did_action( "customize_preview_{$setting->type}" ) ); // Only applicable for custom types (not options or theme_mods).
 			$base_value = call_user_func( $type_options['getter'], $base_name, $this->undefined );
 			$this->assertArrayHasKey( 'foo', $base_value );
-			$this->assertEquals( $this->post_data_overrides[ $name ], $base_value['foo'] );
+			$this->assertSame( $this->post_data_overrides[ $name ], $base_value['foo'] );
 			$this->assertArrayHasKey( 'bar', call_user_func( $type_options['getter'], $base_name, $this->undefined ) );
 
 			$getter = call_user_func( $type_options['getter'], $base_name, $this->undefined );
-			$this->assertEquals( $base_initial_value['bar'], $getter['bar'] );
+			$this->assertSame( $base_initial_value['bar'], $getter['bar'] );
 		}
 	}
 
@@ -343,7 +343,7 @@ class Tests_WP_Customize_Setting extends WP_UnitTestCase {
 		$name = preg_replace( '/^customize_value_/', '', current_filter() );
 		$this->assertInstanceOf( 'WP_Customize_Setting', $setting );
 		$id_data = $setting->id_data();
-		$this->assertEquals( $name, $id_data['base'] );
+		$this->assertSame( $name, $id_data['base'] );
 		return $this->custom_type_getter( $name, $default );
 	}
 
@@ -381,13 +381,13 @@ class Tests_WP_Customize_Setting extends WP_UnitTestCase {
 		$setting = new WP_Customize_Setting( $this->manager, $name, compact( 'type', 'default' ) );
 		// Note: #29316 will allow us to have one filter for all settings of a given type, which is what we need.
 		add_filter( "customize_value_{$name}", array( $this, 'custom_type_value_filter' ), 10, 2 );
-		$this->assertEquals( $this->undefined, $this->custom_type_getter( $name, $this->undefined ) );
-		$this->assertEquals( $default, $setting->value() );
+		$this->assertSame( $this->undefined, $this->custom_type_getter( $name, $this->undefined ) );
+		$this->assertSame( $default, $setting->value() );
 		$this->assertTrue( $setting->preview() );
-		$this->assertEquals( 1, did_action( "customize_preview_{$setting->id}" ) );
-		$this->assertEquals( 1, did_action( "customize_preview_{$setting->type}" ) );
-		$this->assertEquals( $this->undefined, $this->custom_type_getter( $name, $this->undefined ) ); // Note: for a non-custom type this is $default
-		$this->assertEquals( $default, $setting->value() ); // Should be same as above.
+		$this->assertSame( 1, did_action( "customize_preview_{$setting->id}" ) );
+		$this->assertSame( 1, did_action( "customize_preview_{$setting->type}" ) );
+		$this->assertSame( $this->undefined, $this->custom_type_getter( $name, $this->undefined ) ); // Note: for a non-custom type this is $default.
+		$this->assertSame( $default, $setting->value() ); // Should be same as above.
 
 		// Custom type existing and no post value override.
 		$name          = "set_{$type}_without_post_value";
@@ -397,19 +397,19 @@ class Tests_WP_Customize_Setting extends WP_UnitTestCase {
 		$setting = new WP_Customize_Setting( $this->manager, $name, compact( 'type', 'default' ) );
 		// Note: #29316 will allow us to have one filter for all settings of a given type, which is what we need.
 		add_filter( "customize_value_{$name}", array( $this, 'custom_type_value_filter' ), 10, 2 );
-		$this->assertEquals( $initial_value, $this->custom_type_getter( $name, $this->undefined ) );
-		$this->assertEquals( $initial_value, $setting->value() );
+		$this->assertSame( $initial_value, $this->custom_type_getter( $name, $this->undefined ) );
+		$this->assertSame( $initial_value, $setting->value() );
 		$this->assertFalse( $setting->preview(), "Preview for $setting->id should not apply because existing type without an override." );
-		$this->assertEquals( 0, did_action( "customize_preview_{$setting->id}" ), 'Zero preview actions because initial value is set with no incoming post value, so there is no preview to apply.' );
-		$this->assertEquals( 1, did_action( "customize_preview_{$setting->type}" ) );
-		$this->assertEquals( $initial_value, $this->custom_type_getter( $name, $this->undefined ) ); // Should be same as above.
-		$this->assertEquals( $initial_value, $setting->value() ); // Should be same as above.
+		$this->assertSame( 0, did_action( "customize_preview_{$setting->id}" ), 'Zero preview actions because initial value is set with no incoming post value, so there is no preview to apply.' );
+		$this->assertSame( 1, did_action( "customize_preview_{$setting->type}" ) );
+		$this->assertSame( $initial_value, $this->custom_type_getter( $name, $this->undefined ) ); // Should be same as above.
+		$this->assertSame( $initial_value, $setting->value() ); // Should be same as above.
 
 		// Custom type deferred preview (setting post value after preview ran).
 		$override_value = "custom_type_value_{$name}_override_deferred_preview";
 		$this->manager->set_post_value( $setting->id, $override_value );
-		$this->assertEquals( $override_value, $this->custom_type_getter( $name, $this->undefined ) ); // Should be same as above.
-		$this->assertEquals( $override_value, $setting->value() ); // Should be same as above.
+		$this->assertSame( $override_value, $this->custom_type_getter( $name, $this->undefined ) ); // Should be same as above.
+		$this->assertSame( $override_value, $setting->value() ); // Should be same as above.
 
 		// Custom type not existing and with a post value override.
 		$name    = "unset_{$type}_with_post_value";
@@ -417,13 +417,13 @@ class Tests_WP_Customize_Setting extends WP_UnitTestCase {
 		$setting = new WP_Customize_Setting( $this->manager, $name, compact( 'type', 'default' ) );
 		// Note: #29316 will allow us to have one filter for all settings of a given type, which is what we need.
 		add_filter( "customize_value_{$name}", array( $this, 'custom_type_value_filter' ), 10, 2 );
-		$this->assertEquals( $this->undefined, $this->custom_type_getter( $name, $this->undefined ) );
-		$this->assertEquals( $default, $setting->value() );
+		$this->assertSame( $this->undefined, $this->custom_type_getter( $name, $this->undefined ) );
+		$this->assertSame( $default, $setting->value() );
 		$this->assertTrue( $setting->preview() );
-		$this->assertEquals( 1, did_action( "customize_preview_{$setting->id}" ), 'One preview action now because initial value was not set and/or there is no incoming post value, so there is is a preview to apply.' );
-		$this->assertEquals( 3, did_action( "customize_preview_{$setting->type}" ) );
-		$this->assertEquals( $post_data_overrides[ $name ], $this->custom_type_getter( $name, $this->undefined ) );
-		$this->assertEquals( $post_data_overrides[ $name ], $setting->value() );
+		$this->assertSame( 1, did_action( "customize_preview_{$setting->id}" ), 'One preview action now because initial value was not set and/or there is no incoming post value, so there is is a preview to apply.' );
+		$this->assertSame( 3, did_action( "customize_preview_{$setting->type}" ) );
+		$this->assertSame( $post_data_overrides[ $name ], $this->custom_type_getter( $name, $this->undefined ) );
+		$this->assertSame( $post_data_overrides[ $name ], $setting->value() );
 
 		// Custom type not existing and with a post value override.
 		$name          = "set_{$type}_with_post_value";
@@ -433,13 +433,13 @@ class Tests_WP_Customize_Setting extends WP_UnitTestCase {
 		$setting = new WP_Customize_Setting( $this->manager, $name, compact( 'type', 'default' ) );
 		// Note: #29316 will allow us to have one filter for all settings of a given type, which is what we need.
 		add_filter( "customize_value_{$name}", array( $this, 'custom_type_value_filter' ), 10, 2 );
-		$this->assertEquals( $initial_value, $this->custom_type_getter( $name, $this->undefined ) );
-		$this->assertEquals( $initial_value, $setting->value() );
+		$this->assertSame( $initial_value, $this->custom_type_getter( $name, $this->undefined ) );
+		$this->assertSame( $initial_value, $setting->value() );
 		$this->assertTrue( $setting->preview() );
-		$this->assertEquals( 1, did_action( "customize_preview_{$setting->id}" ) );
-		$this->assertEquals( 4, did_action( "customize_preview_{$setting->type}" ) );
-		$this->assertEquals( $post_data_overrides[ $name ], $this->custom_type_getter( $name, $this->undefined ) );
-		$this->assertEquals( $post_data_overrides[ $name ], $setting->value() );
+		$this->assertSame( 1, did_action( "customize_preview_{$setting->id}" ) );
+		$this->assertSame( 4, did_action( "customize_preview_{$setting->type}" ) );
+		$this->assertSame( $post_data_overrides[ $name ], $this->custom_type_getter( $name, $this->undefined ) );
+		$this->assertSame( $post_data_overrides[ $name ], $setting->value() );
 
 		// Custom type that does not handle supplying the post value from the customize_value_{$id_base} filter.
 		$setting_id = 'custom_without_previewing_value_filter';
@@ -478,11 +478,11 @@ class Tests_WP_Customize_Setting extends WP_UnitTestCase {
 		$name    = 'unset_option_without_post_value';
 		$default = "default_value_{$name}";
 		$setting = new WP_Customize_Setting( $this->manager, $name, compact( 'type', 'default' ) );
-		$this->assertEquals( $this->undefined, get_option( $name, $this->undefined ) );
-		$this->assertEquals( $default, $setting->value() );
+		$this->assertSame( $this->undefined, get_option( $name, $this->undefined ) );
+		$this->assertSame( $default, $setting->value() );
 		$this->assertTrue( $setting->preview() );
-		$this->assertEquals( $default, get_option( $name, $this->undefined ), sprintf( 'Expected get_option(%s) to return setting default: %s.', $name, $default ) );
-		$this->assertEquals( $default, $setting->value() );
+		$this->assertSame( $default, get_option( $name, $this->undefined ), sprintf( 'Expected get_option(%s) to return setting default: %s.', $name, $default ) );
+		$this->assertSame( $default, $setting->value() );
 	}
 
 	/**
@@ -527,7 +527,7 @@ class Tests_WP_Customize_Setting extends WP_UnitTestCase {
 	 * @param WP_Customize_Setting $setting
 	 */
 	function handle_customize_update_custom_foo_action( $value, $setting = null ) {
-		$this->assertEquals( 'hello world \\o/', $value );
+		$this->assertSame( 'hello world \\o/', $value );
 		$this->assertInstanceOf( 'WP_Customize_Setting', $setting );
 	}
 
@@ -539,8 +539,8 @@ class Tests_WP_Customize_Setting extends WP_UnitTestCase {
 	 */
 	function handle_customize_save_custom_foo_action( $setting ) {
 		$this->assertInstanceOf( 'WP_Customize_Setting', $setting );
-		$this->assertEquals( 'custom', $setting->type );
-		$this->assertEquals( 'foo', $setting->id );
+		$this->assertSame( 'custom', $setting->type );
+		$this->assertSame( 'foo', $setting->id );
 	}
 
 	/**
@@ -561,8 +561,8 @@ class Tests_WP_Customize_Setting extends WP_UnitTestCase {
 		$this->assertTrue( $setting->preview() );
 		$this->assertTrue( $setting->is_current_blog_previewed() );
 
-		$this->assertEquals( $post_value, $setting->value() );
-		$this->assertEquals( $post_value, get_option( $name ) );
+		$this->assertSame( $post_value, $setting->value() );
+		$this->assertSame( $post_value, get_option( $name ) );
 	}
 
 	/**
@@ -610,8 +610,8 @@ class Tests_WP_Customize_Setting extends WP_UnitTestCase {
 		$this->manager->set_post_value( $setting->id, $value );
 		$setting->save();
 		$autoload = $wpdb->get_var( $wpdb->prepare( "SELECT autoload FROM $wpdb->options WHERE option_name = %s", $setting->id ) );
-		$this->assertEquals( 'yes', $autoload );
-		$this->assertEquals( $value, get_option( $name ) );
+		$this->assertSame( 'yes', $autoload );
+		$this->assertSame( $value, get_option( $name ) );
 
 		$name    = 'autoloaded2';
 		$setting = new WP_Customize_Setting(
@@ -626,8 +626,8 @@ class Tests_WP_Customize_Setting extends WP_UnitTestCase {
 		$this->manager->set_post_value( $setting->id, $value );
 		$setting->save();
 		$autoload = $wpdb->get_var( $wpdb->prepare( "SELECT autoload FROM $wpdb->options WHERE option_name = %s", $setting->id ) );
-		$this->assertEquals( 'yes', $autoload );
-		$this->assertEquals( $value, get_option( $name ) );
+		$this->assertSame( 'yes', $autoload );
+		$this->assertSame( $value, get_option( $name ) );
 
 		$name    = 'not-autoloaded1';
 		$setting = new WP_Customize_Setting(
@@ -642,8 +642,8 @@ class Tests_WP_Customize_Setting extends WP_UnitTestCase {
 		$this->manager->set_post_value( $setting->id, $value );
 		$setting->save();
 		$autoload = $wpdb->get_var( $wpdb->prepare( "SELECT autoload FROM $wpdb->options WHERE option_name = %s", $setting->id ) );
-		$this->assertEquals( 'no', $autoload );
-		$this->assertEquals( $value, get_option( $name ) );
+		$this->assertSame( 'no', $autoload );
+		$this->assertSame( $value, get_option( $name ) );
 
 		$id_base  = 'multi-not-autoloaded';
 		$setting1 = new WP_Customize_Setting(
@@ -665,7 +665,7 @@ class Tests_WP_Customize_Setting extends WP_UnitTestCase {
 		$this->manager->set_post_value( $setting2->id, 'value2' );
 		$setting1->save();
 		$autoload = $wpdb->get_var( $wpdb->prepare( "SELECT autoload FROM $wpdb->options WHERE option_name = %s", $id_base ) );
-		$this->assertEquals( 'no', $autoload, 'Even though setting1 did not indicate autoload (thus normally true), since another multidimensional option setting of the base did say autoload=false, it should be autoload=no' );
+		$this->assertSame( 'no', $autoload, 'Even though setting1 did not indicate autoload (thus normally true), since another multidimensional option setting of the base did say autoload=false, it should be autoload=no' );
 	}
 
 	/**
@@ -685,18 +685,18 @@ class Tests_WP_Customize_Setting extends WP_UnitTestCase {
 		);
 		$setting = new WP_Customize_Setting( $this->manager, 'name', $args );
 
-		$this->assertEquals( $default, $setting->value() );
-		$this->assertEquals( base64_encode( $default ), $setting->js_value() );
+		$this->assertSame( $default, $setting->value() );
+		$this->assertSame( base64_encode( $default ), $setting->js_value() );
 
 		$exported = $setting->json();
 		$this->assertArrayHasKey( 'type', $exported );
 		$this->assertArrayHasKey( 'value', $exported );
 		$this->assertArrayHasKey( 'transport', $exported );
 		$this->assertArrayHasKey( 'dirty', $exported );
-		$this->assertEquals( $setting->js_value(), $exported['value'] );
-		$this->assertEquals( $args['type'], $setting->type );
-		$this->assertEquals( $args['transport'], $setting->transport );
-		$this->assertEquals( $args['dirty'], $setting->dirty );
+		$this->assertSame( $setting->js_value(), $exported['value'] );
+		$this->assertSame( $args['type'], $setting->type );
+		$this->assertSame( $args['transport'], $setting->transport );
+		$this->assertSame( $args['dirty'], $setting->dirty );
 	}
 
 	/**
@@ -715,7 +715,7 @@ class Tests_WP_Customize_Setting extends WP_UnitTestCase {
 		);
 		$validity = $setting->validate( 'BAD!' );
 		$this->assertInstanceOf( 'WP_Error', $validity );
-		$this->assertEquals( 'invalid_key', $validity->get_error_code() );
+		$this->assertSame( 'invalid_key', $validity->get_error_code() );
 	}
 
 	/**
@@ -756,13 +756,13 @@ class Tests_WP_Customize_Setting extends WP_UnitTestCase {
 		$setting_id = 'nav_menu_locations[primary]';
 
 		$setting = new WP_Customize_Setting( $this->manager, $setting_id );
-		$this->assertEquals( $initial_value, $setting->value() );
+		$this->assertSame( $initial_value, $setting->value() );
 
 		$override_value = -123456;
 		$this->manager->set_post_value( $setting_id, $override_value );
 		$setting->preview();
 
-		$this->assertEquals( $override_value, $setting->value() );
+		$this->assertSame( $override_value, $setting->value() );
 	}
 }
 
diff --git a/tests/customize/widgets.php b/tests/customize/widgets.php
index 006cf6f7a2..5abaa0f45b 100644
--- a/tests/customize/widgets.php
+++ b/tests/customize/widgets.php
@@ -22,7 +22,7 @@ class Tests_WP_Customize_Widgets extends WP_UnitTestCase {
 
 	function setUp() {
 		parent::setUp();
-		require_once( ABSPATH . WPINC . '/class-wp-customize-manager.php' );
+		require_once ABSPATH . WPINC . '/class-wp-customize-manager.php';
 
 		add_theme_support( 'customize-selective-refresh-widgets' );
 		$user_id = self::factory()->user->create( array( 'role' => 'administrator' ) );
@@ -30,15 +30,15 @@ class Tests_WP_Customize_Widgets extends WP_UnitTestCase {
 		$GLOBALS['wp_customize'] = new WP_Customize_Manager();
 		$this->manager           = $GLOBALS['wp_customize'];
 
-		unset( $GLOBALS['_wp_sidebars_widgets'] ); // clear out cache set by wp_get_sidebars_widgets()
+		unset( $GLOBALS['_wp_sidebars_widgets'] ); // Clear out cache set by wp_get_sidebars_widgets().
 		$sidebars_widgets = wp_get_sidebars_widgets();
-		$this->assertEqualSets( array( 'wp_inactive_widgets', 'sidebar-1', 'sidebar-2' ), array_keys( wp_get_sidebars_widgets() ) );
+		$this->assertSameSets( array( 'wp_inactive_widgets', 'sidebar-1', 'sidebar-2' ), array_keys( wp_get_sidebars_widgets() ) );
 		$this->assertContains( 'search-2', $sidebars_widgets['sidebar-1'] );
 		$this->assertContains( 'categories-2', $sidebars_widgets['sidebar-2'] );
 		$this->assertArrayHasKey( 2, get_option( 'widget_search' ) );
 		$widget_categories = get_option( 'widget_categories' );
 		$this->assertArrayHasKey( 2, $widget_categories );
-		$this->assertEquals( '', $widget_categories[2]['title'] );
+		$this->assertSame( '', $widget_categories[2]['title'] );
 
 		$this->backup_registered_sidebars = $GLOBALS['wp_registered_sidebars'];
 
@@ -90,7 +90,7 @@ class Tests_WP_Customize_Widgets extends WP_UnitTestCase {
 	 */
 	function test_construct() {
 		$this->assertInstanceOf( 'WP_Customize_Widgets', $this->manager->widgets );
-		$this->assertEquals( $this->manager, $this->manager->widgets->manager );
+		$this->assertSame( $this->manager, $this->manager->widgets->manager );
 	}
 
 	/**
@@ -105,7 +105,7 @@ class Tests_WP_Customize_Widgets extends WP_UnitTestCase {
 		delete_option( 'sidebars_widgets' );
 		register_sidebar( array( 'id' => $sidebar_id ) );
 		$this->manager->widgets->customize_register();
-		$this->assertEquals( array_fill_keys( array( 'wp_inactive_widgets', $sidebar_id ), array() ), wp_get_sidebars_widgets() );
+		$this->assertSame( array_fill_keys( array( 'wp_inactive_widgets', $sidebar_id ), array() ), wp_get_sidebars_widgets() );
 	}
 
 	/**
@@ -121,7 +121,7 @@ class Tests_WP_Customize_Widgets extends WP_UnitTestCase {
 
 		$selective_refreshable_widgets = $this->manager->widgets->get_selective_refreshable_widgets();
 		$this->assertInternalType( 'array', $selective_refreshable_widgets );
-		$this->assertEquals( count( $wp_widget_factory->widgets ), count( $selective_refreshable_widgets ) );
+		$this->assertSame( count( $wp_widget_factory->widgets ), count( $selective_refreshable_widgets ) );
 		$this->assertArrayHasKey( 'text', $selective_refreshable_widgets );
 		$this->assertTrue( $selective_refreshable_widgets['text'] );
 		$this->assertArrayHasKey( 'search', $selective_refreshable_widgets );
@@ -206,18 +206,18 @@ class Tests_WP_Customize_Widgets extends WP_UnitTestCase {
 
 		$setting = $this->manager->get_setting( 'widget_categories[2]' );
 		$this->assertNotEmpty( $setting, 'Expected setting for pre-existing widget category-2, being customized.' );
-		$this->assertEquals( $expected_transport, $setting->transport );
+		$this->assertSame( $expected_transport, $setting->transport );
 
 		$setting = $this->manager->get_setting( 'widget_search[2]' );
 		$this->assertNotEmpty( $setting, 'Expected setting for pre-existing widget search-2, not being customized.' );
-		$this->assertEquals( $expected_transport, $setting->transport );
+		$this->assertSame( $expected_transport, $setting->transport );
 
 		$setting = $this->manager->get_setting( 'widget_search[3]' );
 		$this->assertNotEmpty( $setting, 'Expected dynamic setting for non-existing widget search-3, being customized.' );
-		$this->assertEquals( $expected_transport, $setting->transport );
+		$this->assertSame( $expected_transport, $setting->transport );
 
 		$widget_categories = get_option( 'widget_categories' );
-		$this->assertEquals( $raw_widget_customized['widget_categories[2]'], $widget_categories[2], 'Expected $wp_customize->get_setting(widget_categories[2])->preview() to have been called.' );
+		$this->assertSame( $raw_widget_customized['widget_categories[2]'], $widget_categories[2], 'Expected $wp_customize->get_setting(widget_categories[2])->preview() to have been called.' );
 	}
 
 	/**
@@ -267,9 +267,9 @@ class Tests_WP_Customize_Widgets extends WP_UnitTestCase {
 		);
 		$args         = $this->manager->widgets->get_setting_args( 'widget_foo[2]' );
 		foreach ( $default_args as $key => $default_value ) {
-			$this->assertEquals( $default_value, $args[ $key ] );
+			$this->assertSame( $default_value, $args[ $key ] );
 		}
-		$this->assertEquals( 'WIDGET_FOO[2]', $args['uppercase_id_set_by_filter'] );
+		$this->assertSame( 'WIDGET_FOO[2]', $args['uppercase_id_set_by_filter'] );
 
 		$default_args = array(
 			'type'                 => 'option',
@@ -281,12 +281,12 @@ class Tests_WP_Customize_Widgets extends WP_UnitTestCase {
 		);
 		$args         = $this->manager->widgets->get_setting_args( 'widget_search[2]' );
 		foreach ( $default_args as $key => $default_value ) {
-			$this->assertEquals( $default_value, $args[ $key ] );
+			$this->assertSame( $default_value, $args[ $key ] );
 		}
 
 		remove_theme_support( 'customize-selective-refresh-widgets' );
 		$args = $this->manager->widgets->get_setting_args( 'widget_search[2]' );
-		$this->assertEquals( 'refresh', $args['transport'] );
+		$this->assertSame( 'refresh', $args['transport'] );
 		add_theme_support( 'customize-selective-refresh-widgets' );
 
 		$override_args = array(
@@ -299,9 +299,9 @@ class Tests_WP_Customize_Widgets extends WP_UnitTestCase {
 		);
 		$args          = $this->manager->widgets->get_setting_args( 'widget_bar[3]', $override_args );
 		foreach ( $override_args as $key => $override_value ) {
-			$this->assertEquals( $override_value, $args[ $key ] );
+			$this->assertSame( $override_value, $args[ $key ] );
 		}
-		$this->assertEquals( 'WIDGET_BAR[3]', $args['uppercase_id_set_by_filter'] );
+		$this->assertSame( 'WIDGET_BAR[3]', $args['uppercase_id_set_by_filter'] );
 
 		$default_args = array(
 			'type'                 => 'option',
@@ -313,9 +313,9 @@ class Tests_WP_Customize_Widgets extends WP_UnitTestCase {
 		);
 		$args         = $this->manager->widgets->get_setting_args( 'sidebars_widgets[sidebar-1]' );
 		foreach ( $default_args as $key => $default_value ) {
-			$this->assertEquals( $default_value, $args[ $key ] );
+			$this->assertSame( $default_value, $args[ $key ] );
 		}
-		$this->assertEquals( 'SIDEBARS_WIDGETS[SIDEBAR-1]', $args['uppercase_id_set_by_filter'] );
+		$this->assertSame( 'SIDEBARS_WIDGETS[SIDEBAR-1]', $args['uppercase_id_set_by_filter'] );
 
 		$override_args = array(
 			'type'                 => 'theme_mod',
@@ -327,9 +327,9 @@ class Tests_WP_Customize_Widgets extends WP_UnitTestCase {
 		);
 		$args          = $this->manager->widgets->get_setting_args( 'sidebars_widgets[sidebar-2]', $override_args );
 		foreach ( $override_args as $key => $override_value ) {
-			$this->assertEquals( $override_value, $args[ $key ] );
+			$this->assertSame( $override_value, $args[ $key ] );
 		}
-		$this->assertEquals( 'SIDEBARS_WIDGETS[SIDEBAR-2]', $args['uppercase_id_set_by_filter'] );
+		$this->assertSame( 'SIDEBARS_WIDGETS[SIDEBAR-2]', $args['uppercase_id_set_by_filter'] );
 	}
 
 	function filter_widget_customizer_setting_args( $args, $id ) {
@@ -353,7 +353,7 @@ class Tests_WP_Customize_Widgets extends WP_UnitTestCase {
 		$sanitized_for_js = $this->manager->widgets->sanitize_widget_js_instance( $new_categories_instance );
 		$this->assertArrayHasKey( 'encoded_serialized_instance', $sanitized_for_js );
 		$this->assertTrue( is_serialized( base64_decode( $sanitized_for_js['encoded_serialized_instance'] ), true ) );
-		$this->assertEquals( $new_categories_instance['title'], $sanitized_for_js['title'] );
+		$this->assertSame( $new_categories_instance['title'], $sanitized_for_js['title'] );
 		$this->assertTrue( $sanitized_for_js['is_widget_customizer_js_value'] );
 		$this->assertArrayHasKey( 'instance_hash_key', $sanitized_for_js );
 
@@ -362,7 +362,7 @@ class Tests_WP_Customize_Widgets extends WP_UnitTestCase {
 		$this->assertNull( $this->manager->widgets->sanitize_widget_instance( $corrupted_sanitized_for_js ), 'Expected sanitize_widget_instance to reject corrupted data.' );
 
 		$unsanitized_from_js = $this->manager->widgets->sanitize_widget_instance( $sanitized_for_js );
-		$this->assertEquals( $unsanitized_from_js, $new_categories_instance );
+		$this->assertSame( $unsanitized_from_js, $new_categories_instance );
 	}
 
 	/**
@@ -425,14 +425,14 @@ class Tests_WP_Customize_Widgets extends WP_UnitTestCase {
 		$control = $this->manager->get_control( 'widget_search[2]' );
 		$params  = $control->json();
 
-		$this->assertEquals( 'widget_form', $params['type'] );
+		$this->assertSame( 'widget_form', $params['type'] );
 		$this->assertRegExp( '#^<li[^>]+>\s*</li>$#', $params['content'] );
 		$this->assertRegExp( '#^<div[^>]*class=\'widget\'[^>]*#s', $params['widget_control'] );
 		$this->assertContains( '<div class="widget-content"></div>', $params['widget_control'] );
 		$this->assertNotContains( '<input class="widefat"', $params['widget_control'] );
 		$this->assertContains( '<input class="widefat"', $params['widget_content'] );
-		$this->assertEquals( 'search-2', $params['widget_id'] );
-		$this->assertEquals( 'search', $params['widget_id_base'] );
+		$this->assertSame( 'search-2', $params['widget_id'] );
+		$this->assertSame( 'search', $params['widget_id_base'] );
 		$this->assertArrayHasKey( 'sidebar_id', $params );
 		$this->assertArrayHasKey( 'width', $params );
 		$this->assertArrayHasKey( 'height', $params );
@@ -496,7 +496,7 @@ class Tests_WP_Customize_Widgets extends WP_UnitTestCase {
 		$this->assertInternalType( 'array', $result );
 		$this->assertArrayHasKey( 'instance', $result );
 		$this->assertArrayHasKey( 'form', $result );
-		$this->assertEquals( $instance, $result['instance'] );
+		$this->assertSame( $instance, $result['instance'] );
 		$this->assertContains( sprintf( 'value="%s"', esc_attr( $instance['title'] ) ), $result['form'] );
 
 		$post_values = $this->manager->unsanitized_post_values();
@@ -507,7 +507,7 @@ class Tests_WP_Customize_Widgets extends WP_UnitTestCase {
 		$this->assertArrayHasKey( 'encoded_serialized_instance', $post_value );
 		$this->assertArrayHasKey( 'instance_hash_key', $post_value );
 		$this->assertArrayHasKey( 'is_widget_customizer_js_value', $post_value );
-		$this->assertEquals( $post_value, $this->manager->widgets->sanitize_widget_js_instance( $instance ) );
+		$this->assertSame( $post_value, $this->manager->widgets->sanitize_widget_js_instance( $instance ) );
 	}
 
 	/**
@@ -520,14 +520,14 @@ class Tests_WP_Customize_Widgets extends WP_UnitTestCase {
 
 		$args = apply_filters( 'customize_dynamic_partial_args', false, 'widget[search-2]' );
 		$this->assertInternalType( 'array', $args );
-		$this->assertEquals( 'widget', $args['type'] );
-		$this->assertEquals( array( $this->manager->widgets, 'render_widget_partial' ), $args['render_callback'] );
+		$this->assertSame( 'widget', $args['type'] );
+		$this->assertSame( array( $this->manager->widgets, 'render_widget_partial' ), $args['render_callback'] );
 		$this->assertTrue( $args['container_inclusive'] );
 
 		$args = apply_filters( 'customize_dynamic_partial_args', array( 'fallback_refresh' => false ), 'widget[search-2]' );
 		$this->assertInternalType( 'array', $args );
-		$this->assertEquals( 'widget', $args['type'] );
-		$this->assertEquals( array( $this->manager->widgets, 'render_widget_partial' ), $args['render_callback'] );
+		$this->assertSame( 'widget', $args['type'] );
+		$this->assertSame( array( $this->manager->widgets, 'render_widget_partial' ), $args['render_callback'] );
 		$this->assertTrue( $args['container_inclusive'] );
 		$this->assertFalse( $args['fallback_refresh'] );
 
@@ -544,10 +544,10 @@ class Tests_WP_Customize_Widgets extends WP_UnitTestCase {
 	function test_selective_refresh_init_with_theme_support() {
 		add_theme_support( 'customize-selective-refresh-widgets' );
 		$this->manager->widgets->selective_refresh_init();
-		$this->assertEquals( 10, has_action( 'dynamic_sidebar_before', array( $this->manager->widgets, 'start_dynamic_sidebar' ) ) );
-		$this->assertEquals( 10, has_action( 'dynamic_sidebar_after', array( $this->manager->widgets, 'end_dynamic_sidebar' ) ) );
-		$this->assertEquals( 10, has_filter( 'dynamic_sidebar_params', array( $this->manager->widgets, 'filter_dynamic_sidebar_params' ) ) );
-		$this->assertEquals( 10, has_filter( 'wp_kses_allowed_html', array( $this->manager->widgets, 'filter_wp_kses_allowed_data_attributes' ) ) );
+		$this->assertSame( 10, has_action( 'dynamic_sidebar_before', array( $this->manager->widgets, 'start_dynamic_sidebar' ) ) );
+		$this->assertSame( 10, has_action( 'dynamic_sidebar_after', array( $this->manager->widgets, 'end_dynamic_sidebar' ) ) );
+		$this->assertSame( 10, has_filter( 'dynamic_sidebar_params', array( $this->manager->widgets, 'filter_dynamic_sidebar_params' ) ) );
+		$this->assertSame( 10, has_filter( 'wp_kses_allowed_html', array( $this->manager->widgets, 'filter_wp_kses_allowed_data_attributes' ) ) );
 	}
 
 	/**
@@ -603,31 +603,31 @@ class Tests_WP_Customize_Widgets extends WP_UnitTestCase {
 			),
 			array(),
 		);
-		$this->assertEquals( $params, $this->manager->widgets->filter_dynamic_sidebar_params( $params ), 'Expected short-circuit if not called after dynamic_sidebar_before.' );
+		$this->assertSame( $params, $this->manager->widgets->filter_dynamic_sidebar_params( $params ), 'Expected short-circuit if not called after dynamic_sidebar_before.' );
 
 		ob_start();
 		do_action( 'dynamic_sidebar_before', 'foo' );
 		$output = ob_get_clean();
-		$this->assertEquals( '<!--dynamic_sidebar_before:foo:1-->', trim( $output ) );
+		$this->assertSame( '<!--dynamic_sidebar_before:foo:1-->', trim( $output ) );
 
 		$bad_params = $params;
 		unset( $bad_params[0]['id'] );
-		$this->assertEquals( $bad_params, $this->manager->widgets->filter_dynamic_sidebar_params( $bad_params ) );
+		$this->assertSame( $bad_params, $this->manager->widgets->filter_dynamic_sidebar_params( $bad_params ) );
 
 		$bad_params          = $params;
 		$bad_params[0]['id'] = 'non-existing';
-		$this->assertEquals( $bad_params, $this->manager->widgets->filter_dynamic_sidebar_params( $bad_params ) );
+		$this->assertSame( $bad_params, $this->manager->widgets->filter_dynamic_sidebar_params( $bad_params ) );
 
 		$bad_params                     = $params;
 		$bad_params[0]['before_widget'] = '   <oops>';
-		$this->assertEquals( $bad_params, $this->manager->widgets->filter_dynamic_sidebar_params( $bad_params ) );
+		$this->assertSame( $bad_params, $this->manager->widgets->filter_dynamic_sidebar_params( $bad_params ) );
 
 		$filtered_params = $this->manager->widgets->filter_dynamic_sidebar_params( $params );
 		$this->assertNotEquals( $params, $filtered_params );
 		ob_start();
 		do_action( 'dynamic_sidebar_after', 'foo' );
 		$output = ob_get_clean();
-		$this->assertEquals( '<!--dynamic_sidebar_after:foo:1-->', trim( $output ) );
+		$this->assertSame( '<!--dynamic_sidebar_after:foo:1-->', trim( $output ) );
 
 		$output = wp_kses_post( $filtered_params[0]['before_widget'] );
 		$this->assertContains( 'data-customize-partial-id="widget[search-2]"', $output );
@@ -648,15 +648,15 @@ class Tests_WP_Customize_Widgets extends WP_UnitTestCase {
 		$partials   = $this->manager->selective_refresh->add_dynamic_partials( array( $partial_id ) );
 		$this->assertNotEmpty( $partials );
 		$partial = array_shift( $partials );
-		$this->assertEquals( $partial_id, $partial->id );
+		$this->assertSame( $partial_id, $partial->id );
 
 		$this->assertFalse( $this->manager->widgets->render_widget_partial( $partial, array() ) );
 		$this->assertFalse( $this->manager->widgets->render_widget_partial( $partial, array( 'sidebar_id' => 'non-existing' ) ) );
 
 		$output = $this->manager->widgets->render_widget_partial( $partial, array( 'sidebar_id' => 'sidebar-1' ) );
 
-		$this->assertEquals( 1, substr_count( $output, 'data-customize-partial-id' ) );
-		$this->assertEquals( 1, substr_count( $output, 'data-customize-partial-type="widget"' ) );
+		$this->assertSame( 1, substr_count( $output, 'data-customize-partial-id' ) );
+		$this->assertSame( 1, substr_count( $output, 'data-customize-partial-type="widget"' ) );
 		$this->assertContains( ' id="search-2"', $output );
 	}
 
diff --git a/tests/date/currentTime.php b/tests/date/currentTime.php
index 836f2737ee..a0b03c3fd5 100644
--- a/tests/date/currentTime.php
+++ b/tests/date/currentTime.php
@@ -6,6 +6,49 @@
  */
 class Tests_Date_Current_Time extends WP_UnitTestCase {
 
+	/**
+	 * @ticket 34378
+	 */
+	public function test_current_time_with_date_format_string() {
+		update_option( 'gmt_offset', 6 );
+
+		$format       = 'F j, Y, g:i a';
+		$timestamp    = time();
+		$wp_timestamp = $timestamp + 6 * HOUR_IN_SECONDS;
+
+		$this->assertEqualsWithDelta( strtotime( gmdate( $format ) ), strtotime( current_time( $format, true ) ), 2, 'The dates should be equal' );
+		$this->assertEqualsWithDelta( strtotime( gmdate( $format, $wp_timestamp ) ), strtotime( current_time( $format ) ), 2, 'The dates should be equal' );
+	}
+
+	/**
+	 * @ticket 34378
+	 */
+	public function test_current_time_with_mysql_format() {
+		update_option( 'gmt_offset', 6 );
+
+		$format       = 'Y-m-d H:i:s';
+		$timestamp    = time();
+		$wp_timestamp = $timestamp + 6 * HOUR_IN_SECONDS;
+
+		$this->assertEqualsWithDelta( strtotime( gmdate( $format ) ), strtotime( current_time( 'mysql', true ) ), 2, 'The dates should be equal' );
+		$this->assertEqualsWithDelta( strtotime( gmdate( $format, $wp_timestamp ) ), strtotime( current_time( 'mysql' ) ), 2, 'The dates should be equal' );
+	}
+
+	/**
+	 * @ticket 34378
+	 */
+	public function test_current_time_with_timestamp() {
+		update_option( 'gmt_offset', 6 );
+
+		$timestamp    = time();
+		$wp_timestamp = $timestamp + 6 * HOUR_IN_SECONDS;
+
+		// phpcs:ignore WordPress.DateTime.CurrentTimeTimestamp.RequestedUTC
+		$this->assertEqualsWithDelta( $timestamp, current_time( 'timestamp', true ), 2, 'The dates should be equal' );
+		// phpcs:ignore WordPress.DateTime.CurrentTimeTimestamp.Requested
+		$this->assertEqualsWithDelta( $wp_timestamp, current_time( 'timestamp' ), 2, 'The dates should be equal' );
+	}
+
 	/**
 	 * @ticket 37440
 	 */
@@ -15,20 +58,22 @@ class Tests_Date_Current_Time extends WP_UnitTestCase {
 		update_option( 'timezone_string', $timezone_string );
 		$datetime = new DateTime( 'now', new DateTimeZone( $timezone_string ) );
 
+		// phpcs:ignore WordPress.DateTime.RestrictedFunctions.timezone_change_date_default_timezone_set
 		date_default_timezone_set( $timezone_string );
 
 		$current_time_custom_timezone_gmt = current_time( $format, true );
 		$current_time_custom_timezone     = current_time( $format );
 
+		// phpcs:ignore WordPress.DateTime.RestrictedFunctions.timezone_change_date_default_timezone_set
 		date_default_timezone_set( 'UTC' );
 
 		$current_time_gmt = current_time( $format, true );
 		$current_time     = current_time( $format );
 
-		$this->assertEquals( strtotime( gmdate( $format ) ), strtotime( $current_time_custom_timezone_gmt ), 'The dates should be equal', 2 );
-		$this->assertEquals( strtotime( $datetime->format( $format ) ), strtotime( $current_time_custom_timezone ), 'The dates should be equal', 2 );
-		$this->assertEquals( strtotime( gmdate( $format ) ), strtotime( $current_time_gmt ), 'The dates should be equal', 2 );
-		$this->assertEquals( strtotime( $datetime->format( $format ) ), strtotime( $current_time ), 'The dates should be equal', 2 );
+		$this->assertEqualsWithDelta( strtotime( gmdate( $format ) ), strtotime( $current_time_custom_timezone_gmt ), 2, 'The dates should be equal' );
+		$this->assertEqualsWithDelta( strtotime( $datetime->format( $format ) ), strtotime( $current_time_custom_timezone ), 2, 'The dates should be equal' );
+		$this->assertEqualsWithDelta( strtotime( gmdate( $format ) ), strtotime( $current_time_gmt ), 2, 'The dates should be equal' );
+		$this->assertEqualsWithDelta( strtotime( $datetime->format( $format ) ), strtotime( $current_time ), 2, 'The dates should be equal' );
 	}
 
 	/**
@@ -42,12 +87,17 @@ class Tests_Date_Current_Time extends WP_UnitTestCase {
 		$datetime->setTimezone( wp_timezone() );
 		$wp_timestamp = $timestamp + $datetime->getOffset();
 
-		$this->assertEquals( $timestamp, current_time( 'timestamp', true ), 'The dates should be equal', 2 );
-		$this->assertEquals( $timestamp, current_time( 'U', true ), 'The dates should be equal', 2 );
+		// phpcs:ignore WordPress.DateTime.CurrentTimeTimestamp.RequestedUTC
+		$this->assertEqualsWithDelta( $timestamp, current_time( 'timestamp', true ), 2, 'The dates should be equal' );
+		// phpcs:ignore WordPress.DateTime.CurrentTimeTimestamp.RequestedUTC
+		$this->assertEqualsWithDelta( $timestamp, current_time( 'U', true ), 2, 'The dates should be equal' );
 
-		$this->assertEquals( $wp_timestamp, current_time( 'timestamp' ), 'The dates should be equal', 2 );
-		$this->assertEquals( $wp_timestamp, current_time( 'U' ), 'The dates should be equal', 2 );
+		// phpcs:ignore WordPress.DateTime.CurrentTimeTimestamp.Requested
+		$this->assertEqualsWithDelta( $wp_timestamp, current_time( 'timestamp' ), 2, 'The dates should be equal' );
+		// phpcs:ignore WordPress.DateTime.CurrentTimeTimestamp.Requested
+		$this->assertEqualsWithDelta( $wp_timestamp, current_time( 'U' ), 2, 'The dates should be equal' );
 
+		// phpcs:ignore WordPress.DateTime.CurrentTimeTimestamp.Requested
 		$this->assertInternalType( 'int', current_time( 'timestamp' ) );
 	}
 
@@ -63,7 +113,7 @@ class Tests_Date_Current_Time extends WP_UnitTestCase {
 		$datetime_utc = new DateTime( '@' . $timestamp );
 		$datetime_utc->setTimezone( new DateTimeZone( 'UTC' ) );
 
-		$this->assertEquals( strtotime( $datetime_local->format( DATE_W3C ) ), strtotime( current_time( DATE_W3C ) ), 'The dates should be equal', 2 );
-		$this->assertEquals( strtotime( $datetime_utc->format( DATE_W3C ) ), strtotime( current_time( DATE_W3C, true ) ), 'The dates should be equal', 2 );
+		$this->assertEqualsWithDelta( strtotime( $datetime_local->format( DATE_W3C ) ), strtotime( current_time( DATE_W3C ) ), 2, 'The dates should be equal' );
+		$this->assertEqualsWithDelta( strtotime( $datetime_utc->format( DATE_W3C ) ), strtotime( current_time( DATE_W3C, true ) ), 2, 'The dates should be equal' );
 	}
 }
diff --git a/tests/date/dateI18n.php b/tests/date/dateI18n.php
index 84c43efc4c..5904a23051 100644
--- a/tests/date/dateI18n.php
+++ b/tests/date/dateI18n.php
@@ -16,7 +16,7 @@ class Tests_Date_I18n extends WP_UnitTestCase {
 		$datetime     = new DateTime( 'now', new DateTimeZone( $timezone ) );
 		$wp_timestamp = $datetime->getTimestamp() + $datetime->getOffset();
 
-		$this->assertEquals( $wp_timestamp, date_i18n( 'U', 'invalid' ), '', 5 );
+		$this->assertEqualsWithDelta( $wp_timestamp, date_i18n( 'U', 'invalid' ), 5, 'The dates should be equal' );
 	}
 
 	/**
@@ -33,38 +33,38 @@ class Tests_Date_I18n extends WP_UnitTestCase {
 		);
 		$rfc3339  = $datetime->format( DATE_RFC3339 );
 
-		$this->assertEquals( 0, date_i18n( 'U', 0 ) );
-		$this->assertEquals( $rfc3339, date_i18n( DATE_RFC3339, 0 ) );
+		$this->assertSame( 0, date_i18n( 'U', 0 ) );
+		$this->assertSame( $rfc3339, date_i18n( DATE_RFC3339, 0 ) );
 	}
 
 	public function test_should_format_date() {
-		$this->assertEquals( strtotime( gmdate( 'Y-m-d H:i:s' ) ), strtotime( date_i18n( 'Y-m-d H:i:s' ) ), 'The dates should be equal', 2 );
+		$this->assertEqualsWithDelta( strtotime( gmdate( 'Y-m-d H:i:s' ) ), strtotime( date_i18n( 'Y-m-d H:i:s' ) ), 2, 'The dates should be equal' );
 	}
 
 	public function test_should_use_custom_timestamp() {
-		$this->assertEquals( '2012-12-01 00:00:00', date_i18n( 'Y-m-d H:i:s', strtotime( '2012-12-01 00:00:00' ) ) );
+		$this->assertSame( '2012-12-01 00:00:00', date_i18n( 'Y-m-d H:i:s', strtotime( '2012-12-01 00:00:00' ) ) );
 	}
 
 	public function test_date_should_be_in_gmt() {
-		$this->assertEquals( strtotime( gmdate( DATE_RFC3339 ) ), strtotime( date_i18n( DATE_RFC3339, false, true ) ), 'The dates should be equal', 2 );
+		$this->assertEqualsWithDelta( strtotime( gmdate( DATE_RFC3339 ) ), strtotime( date_i18n( DATE_RFC3339, false, true ) ), 2, 'The dates should be equal' );
 	}
 
 	public function test_custom_timezone_setting() {
 		update_option( 'timezone_string', 'America/Regina' );
 
-		$this->assertEquals( strtotime( gmdate( 'Y-m-d H:i:s', time() + get_option( 'gmt_offset' ) * HOUR_IN_SECONDS ) ), strtotime( date_i18n( 'Y-m-d H:i:s' ) ), 'The dates should be equal', 2 );
+		$this->assertEqualsWithDelta( strtotime( gmdate( 'Y-m-d H:i:s', time() + get_option( 'gmt_offset' ) * HOUR_IN_SECONDS ) ), strtotime( date_i18n( 'Y-m-d H:i:s' ) ), 2, 'The dates should be equal' );
 	}
 
 	public function test_date_should_be_in_gmt_with_custom_timezone_setting() {
 		update_option( 'timezone_string', 'America/Regina' );
 
-		$this->assertEquals( strtotime( gmdate( DATE_RFC3339 ) ), strtotime( date_i18n( DATE_RFC3339, false, true ) ), 'The dates should be equal', 2 );
+		$this->assertEqualsWithDelta( strtotime( gmdate( DATE_RFC3339 ) ), strtotime( date_i18n( DATE_RFC3339, false, true ) ), 2, 'The dates should be equal' );
 	}
 
 	public function test_date_should_be_in_gmt_with_custom_timezone_setting_and_timestamp() {
 		update_option( 'timezone_string', 'America/Regina' );
 
-		$this->assertEquals( '2012-12-01 00:00:00', date_i18n( 'Y-m-d H:i:s', strtotime( '2012-12-01 00:00:00' ) ) );
+		$this->assertSame( '2012-12-01 00:00:00', date_i18n( 'Y-m-d H:i:s', strtotime( '2012-12-01 00:00:00' ) ) );
 	}
 
 	public function test_adjusts_format_based_on_locale() {
@@ -87,13 +87,13 @@ class Tests_Date_I18n extends WP_UnitTestCase {
 		// Restore original locale.
 		$GLOBALS['wp_locale'] = $original_locale;
 
-		$this->assertEquals( $expected, $actual );
+		$this->assertSame( $expected, $actual );
 	}
 
 	public function test_adjusts_format_based_on_timezone_string() {
 		update_option( 'timezone_string', 'America/Regina' );
 
-		$this->assertEquals( '2012-12-01 00:00:00 CST -06:00 America/Regina', date_i18n( 'Y-m-d H:i:s T P e', strtotime( '2012-12-01 00:00:00' ) ) );
+		$this->assertSame( '2012-12-01 00:00:00 CST -06:00 America/Regina', date_i18n( 'Y-m-d H:i:s T P e', strtotime( '2012-12-01 00:00:00' ) ) );
 	}
 
 	/**
@@ -110,7 +110,7 @@ class Tests_Date_I18n extends WP_UnitTestCase {
 		$datetime = new DateTime( 'now', $datetimezone );
 		$datetime = new DateTime( $datetime->format( 'P' ) );
 
-		$this->assertEquals( $datetime->format( $timezone_formats ), date_i18n( $timezone_formats ) );
+		$this->assertSame( $datetime->format( $timezone_formats ), date_i18n( $timezone_formats ) );
 	}
 
 	/**
@@ -121,8 +121,8 @@ class Tests_Date_I18n extends WP_UnitTestCase {
 	public function test_date_i18n_handles_shorthand_formats( $short, $full ) {
 		update_option( 'timezone_string', 'America/Regina' );
 
-		$this->assertEquals( strtotime( date_i18n( $full ) ), strtotime( date_i18n( $short ) ), 'The dates should be equal', 2 );
-		$this->assertEquals( $short, date_i18n( '\\' . $short ) );
+		$this->assertEqualsWithDelta( strtotime( date_i18n( $full ) ), strtotime( date_i18n( $short ) ), 2, 'The dates should be equal' );
+		$this->assertSame( $short, date_i18n( '\\' . $short ) );
 	}
 
 	public function data_formats() {
@@ -148,9 +148,9 @@ class Tests_Date_I18n extends WP_UnitTestCase {
 		$timestamp    = $datetime->getTimestamp();
 		$wp_timestamp = $timestamp + $datetime->getOffset();
 
-		$this->assertEquals( $wp_timestamp, date_i18n( 'U' ), 'The dates should be equal', 2 );
-		$this->assertEquals( $timestamp, date_i18n( 'U', false, true ), 'The dates should be equal', 2 );
-		$this->assertEquals( $wp_timestamp, date_i18n( 'U', $wp_timestamp ) );
+		$this->assertEqualsWithDelta( $wp_timestamp, date_i18n( 'U' ), 2, 'The dates should be equal' );
+		$this->assertEqualsWithDelta( $timestamp, date_i18n( 'U', false, true ), 2, 'The dates should be equal' );
+		$this->assertSame( $wp_timestamp, date_i18n( 'U', $wp_timestamp ) );
 	}
 
 	/**
@@ -159,7 +159,7 @@ class Tests_Date_I18n extends WP_UnitTestCase {
 	public function test_swatch_internet_time_with_wp_timestamp() {
 		update_option( 'timezone_string', 'America/Regina' );
 
-		$this->assertEquals( gmdate( 'B' ), date_i18n( 'B' ) );
+		$this->assertSame( gmdate( 'B' ), date_i18n( 'B' ) );
 	}
 
 	/**
@@ -168,7 +168,7 @@ class Tests_Date_I18n extends WP_UnitTestCase {
 	public function test_should_handle_escaped_formats() {
 		$format = 'D | \D | \\D | \\\D | \\\\D | \\\\\D | \\\\\\D';
 
-		$this->assertEquals( gmdate( $format ), date_i18n( $format ) );
+		$this->assertSame( gmdate( $format ), date_i18n( $format ) );
 	}
 
 	/**
@@ -187,7 +187,7 @@ class Tests_Date_I18n extends WP_UnitTestCase {
 		$wp_timestamp = strtotime( $time );
 		$format       = 'I ' . DATE_RFC3339;
 
-		$this->assertEquals( $datetime->format( $format ), date_i18n( $format, $wp_timestamp ) );
+		$this->assertSame( $datetime->format( $format ), date_i18n( $format, $wp_timestamp ) );
 	}
 
 	public function dst_times() {
diff --git a/tests/date/getCommentDate.php b/tests/date/getCommentDate.php
new file mode 100644
index 0000000000..95175c3e16
--- /dev/null
+++ b/tests/date/getCommentDate.php
@@ -0,0 +1,49 @@
+<?php
+
+/**
+ * @group date
+ * @group datetime
+ * @group comment
+ */
+class Tests_Date_Get_Comment_Date extends WP_UnitTestCase {
+
+	/**
+	 * @ticket 51184
+	 */
+	public function test_get_comment_date_returns_correct_time_with_comment_id() {
+		$c = self::factory()->comment->create( array( 'comment_date' => '2020-08-29 01:51:00' ) );
+
+		$this->assertSame( 'August 29, 2020', get_comment_date( 'F j, Y', $c ) );
+	}
+
+	/**
+	 * @ticket 51184
+	 */
+	public function test_get_comment_date_returns_correct_time_with_empty_format() {
+		$c = self::factory()->comment->create( array( 'comment_date' => '2020-08-29 01:51:00' ) );
+
+		$this->assertSame( 'August 29, 2020', get_comment_date( '', $c ) );
+		$this->assertSame( 'August 29, 2020', get_comment_date( false, $c ) );
+	}
+
+	/**
+	 * @ticket 51184
+	 */
+	public function test_get_comment_time_returns_correct_time() {
+		$c = self::factory()->comment->create( array( 'comment_date' => '2020-08-29 01:51:00' ) );
+
+		$GLOBALS['comment'] = get_comment( $c );
+		$this->assertSame( '1:51 am', get_comment_time( 'g:i a' ) );
+	}
+
+	/**
+	 * @ticket 51184
+	 */
+	public function test_get_comment_time_returns_correct_time_with_empty_format() {
+		$c = self::factory()->comment->create( array( 'comment_date' => '2020-08-29 01:51:00' ) );
+
+		$GLOBALS['comment'] = get_comment( $c );
+		$this->assertSame( '1:51 am', get_comment_time( '' ) );
+		$this->assertSame( '1:51 am', get_comment_time( false ) );
+	}
+}
diff --git a/tests/date/getFeedBuildDate.php b/tests/date/getFeedBuildDate.php
new file mode 100644
index 0000000000..6fcd2fdbd4
--- /dev/null
+++ b/tests/date/getFeedBuildDate.php
@@ -0,0 +1,84 @@
+<?php
+
+/**
+ * @group date
+ * @group datetime
+ * @group feed
+ */
+class Tests_Date_Get_Feed_Build_Date extends WP_UnitTestCase {
+
+	function tearDown() {
+		global $wp_query;
+
+		update_option( 'timezone_string', 'UTC' );
+
+		unset( $wp_query );
+
+		parent::tearDown();
+	}
+
+	/**
+	 * @ticket 48675
+	 */
+	public function test_should_return_correct_feed_build_date() {
+		global $wp_query;
+
+		$timezone = 'America/Chicago';
+		update_option( 'timezone_string', $timezone );
+
+		$post_id = self::factory()->post->create(
+			array(
+				'post_date'     => '2018-07-22 21:13:23',
+				'post_date_gmt' => '2018-07-23 03:13:23',
+			)
+		);
+
+		$wp_query = new WP_Query( array( 'p' => $post_id ) );
+
+		$this->assertSame( '2018-07-23T03:13:23+00:00', get_feed_build_date( DATE_RFC3339 ) );
+	}
+
+	/**
+	 * Test that get_feed_build_date() works with invalid post dates.
+	 *
+	 * @ticket 48957
+	 */
+	public function test_should_fall_back_to_last_post_modified() {
+		global $wp_query;
+
+		update_option( 'timezone_string', 'Europe/Kiev' );
+		$datetime     = new DateTimeImmutable( 'now', wp_timezone() );
+		$datetime_utc = $datetime->setTimezone( new DateTimeZone( 'UTC' ) );
+
+		$wp_query->posts = array();
+
+		$this->assertFalse( get_feed_build_date( DATE_RFC3339 ), 'False when unable to determine valid time' );
+
+		$this->factory->post->create(
+			array(
+				'post_date' => $datetime->format( 'Y-m-d H:i:s' ),
+			)
+		);
+
+		$this->assertEqualsWithDelta(
+			strtotime( $datetime_utc->format( DATE_RFC3339 ) ),
+			strtotime( get_feed_build_date( DATE_RFC3339 ) ),
+			2,
+			'Fall back to time of last post modified with no posts'
+		);
+
+		$post_id_broken = $this->factory->post->create();
+		$post_broken    = get_post( $post_id_broken );
+
+		$post_broken->post_modified_gmt = 0;
+
+		$wp_query->posts = array( $post_broken );
+
+		$this->assertEqualsWithDelta(
+			strtotime( $datetime_utc->format( DATE_RFC3339 ) ),
+			strtotime( get_feed_build_date( DATE_RFC3339 ) ),
+			2,
+			'Fall back to time of last post modified with broken post object'
+		);
+	}
+}
diff --git a/tests/date/getPermalink.php b/tests/date/getPermalink.php
new file mode 100644
index 0000000000..782a0507fe
--- /dev/null
+++ b/tests/date/getPermalink.php
@@ -0,0 +1,42 @@
+<?php
+
+/**
+ * @group date
+ * @group datetime
+ * @group post
+ */
+class Tests_Date_Get_Permalink extends WP_UnitTestCase {
+
+	function tearDown() {
+		delete_option( 'permalink_structure' );
+		update_option( 'timezone_string', 'UTC' );
+		// phpcs:ignore WordPress.DateTime.RestrictedFunctions.timezone_change_date_default_timezone_set
+		date_default_timezone_set( 'UTC' );
+
+		parent::tearDown();
+	}
+
+	/**
+	 * @ticket 48623
+	 */
+	public function test_should_return_correct_date_permalink_with_changed_time_zone() {
+		$timezone = 'America/Chicago';
+		update_option( 'timezone_string', $timezone );
+		update_option( 'permalink_structure', '/%year%/%monthnum%/%day%/%hour%/%minute%/%second%' );
+		// phpcs:ignore WordPress.DateTime.RestrictedFunctions.timezone_change_date_default_timezone_set
+		date_default_timezone_set( 'UTC' );
+
+		$post_id = self::factory()->post->create(
+			array(
+				'post_date'     => '2018-07-22 21:13:23',
+				'post_date_gmt' => '2018-07-23 03:13:23',
+			)
+		);
+
+		$this->assertSame( 'http://example.org/2018/07/22/21/13/23', get_permalink( $post_id ) );
+
+		// phpcs:ignore WordPress.DateTime.RestrictedFunctions.timezone_change_date_default_timezone_set
+		date_default_timezone_set( $timezone );
+		$this->assertSame( 'http://example.org/2018/07/22/21/13/23', get_permalink( $post_id ) );
+	}
+}
diff --git a/tests/date/getPostTime.php b/tests/date/getPostTime.php
new file mode 100644
index 0000000000..9a58476681
--- /dev/null
+++ b/tests/date/getPostTime.php
@@ -0,0 +1,127 @@
+<?php
+
+/**
+ * @group date
+ * @group datetime
+ * @group post
+ */
+class Tests_Date_Get_Post_Time extends WP_UnitTestCase {
+
+	/**
+	 * @ticket 28310
+	 */
+	public function test_get_post_time_returns_correct_time_with_post_id() {
+		$post_id = self::factory()->post->create( array( 'post_date' => '2014-03-01 16:35:00' ) );
+
+		$this->assertSame( '16:35:00', get_post_time( 'H:i:s', false, $post_id ) );
+	}
+
+	/**
+	 * @ticket 28310
+	 */
+	public function test_get_post_time_returns_false_with_null_or_non_existing_post() {
+		$this->assertFalse( get_post_time() );
+		$this->assertFalse( get_post_time( 'h:i:s' ) );
+		$this->assertFalse( get_post_time( '', false, 9 ) );
+		$this->assertFalse( get_post_time( 'h:i:s', false, 9 ) );
+	}
+
+	/**
+	 * @ticket 28310
+	 */
+	public function test_get_post_modified_time_returns_correct_time_with_post_id() {
+		$post_id = self::factory()->post->create( array( 'post_date' => '2014-03-01 16:35:00' ) );
+
+		$this->assertSame( '16:35:00', get_post_modified_time( 'H:i:s', false, $post_id ) );
+	}
+
+	/**
+	 * @ticket 28310
+	 */
+	public function test_get_post_modified_time_returns_false_with_null_or_non_existing_post() {
+		$this->assertFalse( get_post_modified_time() );
+		$this->assertFalse( get_post_modified_time( 'h:i:s' ) );
+		$this->assertFalse( get_post_modified_time( '', false, 9 ) );
+		$this->assertFalse( get_post_modified_time( 'h:i:s', false, 9 ) );
+	}
+
+	/**
+	 * @ticket 25002
+	 */
+	public function test_should_return_wp_timestamp() {
+		$timezone = 'Europe/Kiev';
+		update_option( 'timezone_string', $timezone );
+
+		$datetime     = new DateTimeImmutable( 'now', new DateTimeZone( $timezone ) );
+		$mysql        = $datetime->format( 'Y-m-d H:i:s' );
+		$timestamp    = $datetime->getTimestamp();
+		$wp_timestamp = $datetime->getTimestamp() + $datetime->getOffset();
+
+		$post_id = self::factory()->post->create(
+			array(
+				'post_date'     => $mysql,
+				'post_modified' => $mysql,
+			)
+		);
+
+		$this->assertSame( $wp_timestamp, get_post_time( 'U', false, $post_id ) );
+		$this->assertSame( $wp_timestamp, get_post_time( 'G', false, $post_id ) );
+		$this->assertSame( $timestamp, get_post_time( 'U', true, $post_id ) );
+		$this->assertSame( $timestamp, get_post_time( 'G', true, $post_id ) );
+		$this->assertSame( $wp_timestamp, get_post_modified_time( 'U', false, $post_id ) );
+		$this->assertSame( $wp_timestamp, get_post_modified_time( 'G', false, $post_id ) );
+		$this->assertSame( $timestamp, get_post_modified_time( 'U', true, $post_id ) );
+		$this->assertSame( $timestamp, get_post_modified_time( 'G', true, $post_id ) );
+	}
+
+	/**
+	 * @ticket 25002
+	 */
+	public function test_should_return_time() {
+		$timezone = 'Europe/Kiev';
+		update_option( 'timezone_string', $timezone );
+
+		$datetime    = new DateTimeImmutable( 'now', new DateTimeZone( $timezone ) );
+		$mysql       = $datetime->format( 'Y-m-d H:i:s' );
+		$rfc3339     = $datetime->format( DATE_RFC3339 );
+		$rfc3339_utc = $datetime->setTimezone( new DateTimeZone( 'UTC' ) )->format( DATE_RFC3339 );
+		$post_id     = self::factory()->post->create(
+			array(
+				'post_date'     => $mysql,
+				'post_modified' => $mysql,
+			)
+		);
+
+		$this->assertSame( $rfc3339, get_post_time( DATE_RFC3339, false, $post_id ) );
+		$this->assertSame( $rfc3339_utc, get_post_time( DATE_RFC3339, true, $post_id ) );
+		$this->assertSame( $rfc3339, get_post_time( DATE_RFC3339, false, $post_id, true ) );
+		$this->assertSame( $rfc3339_utc, get_post_time( DATE_RFC3339, true, $post_id, true ) );
+		$this->assertSame( $rfc3339, get_post_modified_time( DATE_RFC3339, false, $post_id ) );
+		$this->assertSame( $rfc3339_utc, get_post_modified_time( DATE_RFC3339, true, $post_id ) );
+		$this->assertSame( $rfc3339, get_post_modified_time( DATE_RFC3339, false, $post_id, true ) );
+		$this->assertSame( $rfc3339_utc, get_post_modified_time( DATE_RFC3339, true, $post_id, true ) );
+	}
+
+	/**
+	 * @ticket 48384
+	 */
+	public function test_should_keep_utc_time_on_timezone_change() {
+		$timezone = 'UTC';
+		update_option( 'timezone_string', $timezone );
+
+		$datetime = new DateTimeImmutable( 'now', new DateTimeZone( $timezone ) );
+		$mysql    = $datetime->format( 'Y-m-d H:i:s' );
+		$rfc3339  = $datetime->format( DATE_RFC3339 );
+		$post_id  = self::factory()->post->create(
+			array(
+				'post_date'     => $mysql,
+				'post_modified' => $mysql,
+			)
+		);
+
+		update_option( 'timezone_string', 'Europe/Kiev' );
+
+		$this->assertSame( $rfc3339, get_post_time( DATE_RFC3339, true, $post_id ) );
+		$this->assertSame( $rfc3339, get_post_modified_time( DATE_RFC3339, true, $post_id ) );
+	}
+}
diff --git a/tests/date/getTheDate.php b/tests/date/getTheDate.php
new file mode 100644
index 0000000000..1f1f8f223f
--- /dev/null
+++ b/tests/date/getTheDate.php
@@ -0,0 +1,67 @@
+<?php
+
+/**
+ * @group date
+ * @group datetime
+ * @group post
+ */
+class Tests_Date_Get_The_Date extends WP_UnitTestCase {
+
+	/**
+	 * @ticket 13771
+	 */
+	public function test_get_the_date_returns_correct_time_with_post_id() {
+		$post_id = self::factory()->post->create( array( 'post_date' => '2014-03-01 16:35:00' ) );
+
+		$this->assertSame( 'March 1, 2014', get_the_date( 'F j, Y', $post_id ) );
+	}
+
+	/**
+	 * @ticket 28310
+	 */
+	public function test_get_the_date_returns_false_with_null_or_non_existing_post() {
+		$this->assertFalse( get_the_date() );
+		$this->assertFalse( get_the_date( 'F j, Y h:i:s' ) );
+		$this->assertFalse( get_the_date( '', 9 ) );
+		$this->assertFalse( get_the_date( 'F j, Y h:i:s', 9 ) );
+	}
+
+	/**
+	 * @ticket 51184
+	 */
+	public function test_get_the_date_returns_correct_time_with_empty_format() {
+		$post_id = self::factory()->post->create( array( 'post_date' => '2020-08-29 01:51:00' ) );
+
+		$this->assertSame( 'August 29, 2020', get_the_date( '', $post_id ) );
+		$this->assertSame( 'August 29, 2020', get_the_date( false, $post_id ) );
+	}
+
+	/**
+	 * @ticket 28310
+	 */
+	public function test_get_the_time_returns_correct_time_with_post_id() {
+		$post_id = self::factory()->post->create( array( 'post_date' => '2014-03-01 16:35:00' ) );
+
+		$this->assertSame( '16:35:00', get_the_time( 'H:i:s', $post_id ) );
+	}
+
+	/**
+	 * @ticket 28310
+	 */
+	public function test_get_the_time_returns_false_with_null_or_non_existing_post() {
+		$this->assertFalse( get_the_time() );
+		$this->assertFalse( get_the_time( 'h:i:s' ) );
+		$this->assertFalse( get_the_time( '', 9 ) );
+		$this->assertFalse( get_the_time( 'h:i:s', 9 ) );
+	}
+
+	/**
+	 * @ticket 51184
+	 */
+	public function test_get_the_time_returns_correct_time_with_empty_format() {
+		$post_id = self::factory()->post->create( array( 'post_date' => '2020-08-29 01:51:00' ) );
+
+		$this->assertSame( '1:51 am', get_the_time( '', $post_id ) );
+		$this->assertSame( '1:51 am', get_the_time( false, $post_id ) );
+	}
+}
diff --git a/tests/date/getTheModifiedDate.php b/tests/date/getTheModifiedDate.php
new file mode 100644
index 0000000000..6ff1fb752e
--- /dev/null
+++ b/tests/date/getTheModifiedDate.php
@@ -0,0 +1,191 @@
+<?php
+
+/**
+ * @group date
+ * @group datetime
+ * @group post
+ */
+class Tests_Date_Get_The_Modified_Date extends WP_UnitTestCase {
+
+	/**
+	 * Test get_the_modified_time with post_id parameter.
+	 *
+	 * @ticket 37059
+	 *
+	 * @since 4.6.0
+	 */
+	public function test_get_the_modified_date_with_post_id() {
+		$details  = array(
+			'post_date'     => '2016-01-21 15:34:36',
+			'post_date_gmt' => '2016-01-21 15:34:36',
+		);
+		$post_id  = $this->factory->post->create( $details );
+		$format   = 'Y-m-d';
+		$expected = '2016-01-21';
+		$actual   = get_the_modified_date( $format, $post_id );
+		$this->assertSame( $expected, $actual );
+	}
+
+	/**
+	 * Test get_the_modified_date
+	 *
+	 * @ticket 37059
+	 *
+	 * @since 4.6.0
+	 */
+	public function test_get_the_modified_date_default() {
+		$details = array(
+			'post_date'     => '2016-01-21 15:34:36',
+			'post_date_gmt' => '2016-01-21 15:34:36',
+		);
+		$post_id = $this->factory->post->create( $details );
+		$post    = get_post( $post_id );
+
+		$GLOBALS['post'] = $post;
+
+		$expected = '2016-01-21';
+		$format   = 'Y-m-d';
+		$actual   = get_the_modified_date( $format );
+		$this->assertSame( $expected, $actual );
+	}
+
+	/**
+	 * Test get_the_modified_date failures are filtered
+	 *
+	 * @ticket 37059
+	 *
+	 * @since 4.6.0
+	 */
+	public function test_get_the_modified_date_failures_are_filtered() {
+		// Remove global post object.
+		$GLOBALS['post'] = null;
+
+		$expected = 'filtered modified date failure result';
+		add_filter( 'get_the_modified_date', array( $this, '_filter_get_the_modified_date_failure' ) );
+		$actual = get_the_modified_date();
+		$this->assertSame( $expected, $actual );
+		remove_filter( 'get_the_modified_date', array( $this, '_filter_get_the_modified_date_failure' ) );
+	}
+
+	public function _filter_get_the_modified_date_failure( $the_date ) {
+		$expected = false;
+		$actual   = $the_date;
+		$this->assertSame( $expected, $actual );
+
+		if ( false === $the_date ) {
+			return 'filtered modified date failure result';
+		}
+		return $the_date;
+	}
+
+	/**
+	 * @ticket 51184
+	 */
+	public function test_get_the_modified_date_returns_false_with_null_or_non_existing_post() {
+		$this->assertFalse( get_the_modified_date() );
+		$this->assertFalse( get_the_modified_date( 'F j, Y h:i:s' ) );
+		$this->assertFalse( get_the_modified_date( '', 9 ) );
+		$this->assertFalse( get_the_modified_date( 'F j, Y h:i:s', 9 ) );
+	}
+
+	/**
+	 * @ticket 51184
+	 */
+	public function test_get_the_modified_date_returns_correct_time_with_empty_format() {
+		$post_id = self::factory()->post->create( array( 'post_date' => '2020-08-31 23:14:00' ) );
+
+		$this->assertSame( 'August 31, 2020', get_the_modified_date( '', $post_id ) );
+		$this->assertSame( 'August 31, 2020', get_the_modified_date( false, $post_id ) );
+	}
+
+	/**
+	 * Test get_the_modified_time with post_id parameter.
+	 *
+	 * @ticket 37059
+	 *
+	 * @since 4.6.0
+	 */
+	public function test_get_the_modified_time_with_post_id() {
+		$details  = array(
+			'post_date'     => '2016-01-21 15:34:36',
+			'post_date_gmt' => '2016-01-21 15:34:36',
+		);
+		$post_id  = $this->factory->post->create( $details );
+		$format   = 'G';
+		$expected = 1453390476;
+		$actual   = get_the_modified_time( $format, $post_id );
+		$this->assertSame( $expected, $actual );
+	}
+
+	/**
+	 * Test get_the_modified_time
+	 *
+	 * @ticket 37059
+	 *
+	 * @since 4.6.0
+	 */
+	public function test_get_the_modified_time_default() {
+		$details = array(
+			'post_date'     => '2016-01-21 15:34:36',
+			'post_date_gmt' => '2016-01-21 15:34:36',
+		);
+		$post_id = $this->factory->post->create( $details );
+		$post    = get_post( $post_id );
+
+		$GLOBALS['post'] = $post;
+
+		$expected = 1453390476;
+		$format   = 'G';
+		$actual   = get_the_modified_time( $format );
+		$this->assertSame( $expected, $actual );
+	}
+
+	/**
+	 * Test get_the_modified_time failures are filtered
+	 *
+	 * @ticket 37059
+	 *
+	 * @since 4.6.0
+	 */
+	public function test_get_the_modified_time_failures_are_filtered() {
+		// Remove global post object.
+		$GLOBALS['post'] = null;
+
+		$expected = 'filtered modified time failure result';
+		add_filter( 'get_the_modified_time', array( $this, '_filter_get_the_modified_time_failure' ) );
+		$actual = get_the_modified_time();
+		$this->assertSame( $expected, $actual );
+		remove_filter( 'get_the_modified_time', array( $this, '_filter_get_the_modified_time_failure' ) );
+	}
+
+	public function _filter_get_the_modified_time_failure( $the_time ) {
+		$expected = false;
+		$actual   = $the_time;
+		$this->assertSame( $expected, $actual );
+
+		if ( false === $the_time ) {
+			return 'filtered modified time failure result';
+		}
+		return $the_time;
+	}
+
+	/**
+	 * @ticket 51184
+	 */
+	public function test_get_the_modified_time_returns_false_with_null_or_non_existing_post() {
+		$this->assertFalse( get_the_modified_time() );
+		$this->assertFalse( get_the_modified_time( 'h:i:s' ) );
+		$this->assertFalse( get_the_modified_time( '', 9 ) );
+		$this->assertFalse( get_the_modified_time( 'h:i:s', 9 ) );
+	}
+
+	/**
+	 * @ticket 51184
+	 */
+	public function test_get_the_modified_time_returns_correct_time_with_empty_format() {
+		$post_id = self::factory()->post->create( array( 'post_date' => '2020-08-31 23:14:00' ) );
+
+		$this->assertSame( '11:14 pm', get_the_modified_time( '', $post_id ) );
+		$this->assertSame( '11:14 pm', get_the_modified_time( false, $post_id ) );
+	}
+}
diff --git a/tests/functions/maybeDeclineDate.php b/tests/date/maybeDeclineDate.php
similarity index 61%
rename from tests/functions/maybeDeclineDate.php
rename to tests/date/maybeDeclineDate.php
index d888a2d53c..400662a5e2 100644
--- a/tests/functions/maybeDeclineDate.php
+++ b/tests/date/maybeDeclineDate.php
@@ -37,9 +37,12 @@ class Tests_Functions_MaybeDeclineDate extends WP_UnitTestCase {
 
 	/**
 	 * @ticket 36790
+	 * @ticket 37411
+	 * @ticket 48606
+	 * @ticket 48934
 	 * @dataProvider data_wp_maybe_decline_date
 	 */
-	public function test_wp_maybe_decline_date( $test_locale, $input, $output ) {
+	public function test_wp_maybe_decline_date( $test_locale, $format, $input, $output ) {
 		global $locale, $wp_locale;
 
 		add_filter( 'gettext_with_context', array( $this, 'filter__enable_months_names_declension' ), 10, 3 );
@@ -50,11 +53,11 @@ class Tests_Functions_MaybeDeclineDate extends WP_UnitTestCase {
 		$wp_locale->month          = $month_names['month'];
 		$wp_locale->month_genitive = $month_names['month_genitive'];
 
-		$declined_date = wp_maybe_decline_date( $input );
+		$declined_date = wp_maybe_decline_date( $input, $format );
 
 		remove_filter( 'gettext_with_context', array( $this, 'filter__enable_months_names_declension' ), 10 );
 
-		$this->assertEquals( $output, $declined_date );
+		$this->assertSame( $output, $declined_date );
 	}
 
 	public function filter__enable_months_names_declension( $translation, $text, $context ) {
@@ -67,15 +70,21 @@ class Tests_Functions_MaybeDeclineDate extends WP_UnitTestCase {
 
 	public function data_wp_maybe_decline_date() {
 		return array(
-			array( 'ru_RU', '21 –ò—é–Ω—å', '21 –∏—é–Ω—è' ),
-			array( 'ru_RU', '1 –Ø–Ω–≤–∞—Ä—å 2016', '1 —è–Ω–≤–∞—Ä—è 2016' ),
-			array( 'ru_RU', '–Ø–Ω–≤–∞—Ä—å 1st 2016', '1 —è–Ω–≤–∞—Ä—è 2016' ),
-			array( 'ru_RU', '–Ø–Ω–≤–∞—Ä—å 1 2016', '1 —è–Ω–≤–∞—Ä—è 2016' ),
-			array( 'pl_PL', '1 Stycze≈Ñ', '1 stycznia' ),
-			array( 'hr', '1. Sijeƒçanj', '1. sijeƒçnja' ),
-			array( 'ca', '1 de abril', "1 d'abril" ),
-			array( 'cs_CZ', '1. ƒåerven', '1. ƒçervna' ),
-			array( 'cs_CZ', '1. ƒåervenec', '1. ƒçervence' ),
+			array( 'ru_RU', 'j F', '21 –ò—é–Ω—å', '21 –∏—é–Ω—è' ),
+			array( 'ru_RU', 'j F Y', '1 –Ø–Ω–≤–∞—Ä—å 2016', '1 —è–Ω–≤–∞—Ä—è 2016' ),
+			array( 'ru_RU', 'F jS Y', '–Ø–Ω–≤–∞—Ä—å 1st 2016', '1 —è–Ω–≤–∞—Ä—è 2016' ),
+			array( 'ru_RU', 'F j Y', '–Ø–Ω–≤–∞—Ä—å 1 2016', '1 —è–Ω–≤–∞—Ä—è 2016' ),
+			array( 'ru_RU', 'F j‚Äìj Y', '–Ø–Ω–≤–∞—Ä—å 1‚Äì2 2016', '1‚Äì2 —è–Ω–≤–∞—Ä—è 2016' ),
+			array( 'ru_RU', 'F j y', '–Ø–Ω–≤–∞—Ä—å 1 16', '1 —è–Ω–≤–∞—Ä—è 16' ),
+			array( 'ru_RU', 'F y', '–Ø–Ω–≤–∞—Ä—å 16', '–Ø–Ω–≤–∞—Ä—å 16' ),
+			array( 'ru_RU', 'l, d F Y H:i', '–°—É–±–±–æ—Ç–∞, 19 –Ø–Ω–≤–∞—Ä—å 2019 10:50', '–°—É–±–±–æ—Ç–∞, 19 —è–Ω–≤–∞—Ä—è 2019 10:50' ),
+			array( 'pl_PL', 'j F', '1 Stycze≈Ñ', '1 stycznia' ),
+			array( 'hr', 'j. F', '1. Sijeƒçanj', '1. sijeƒçnja' ),
+			array( 'ca', 'j F', '1 de abril', "1 d'abril" ),
+			array( 'cs_CZ', 'j. F', '1. ƒåerven', '1. ƒçervna' ),
+			array( 'cs_CZ', 'j. F', '1. ƒåervenec', '1. ƒçervence' ),
+			array( 'it_IT', 'l j F Y', 'Lunde√¨ 11 Novembre 2019', 'Lunde√¨ 11 Novembre 2019' ),
+			array( 'el', 'l, d F Y H:i', 'Œ£Œ¨Œ≤Œ≤Œ±œÑŒø, 19 ŒôŒ±ŒΩŒøœÖŒ¨œÅŒπŒøœÇ 2019 10:50', 'Œ£Œ¨Œ≤Œ≤Œ±œÑŒø, 19 ŒôŒ±ŒΩŒøœÖŒ±œÅŒØŒøœÖ 2019 10:50' ),
 		);
 	}
 
@@ -116,6 +125,20 @@ class Tests_Functions_MaybeDeclineDate extends WP_UnitTestCase {
 				);
 				break;
 
+			case 'it_IT':
+				$months = array(
+					'month'          => array( 'Gennaio', 'Febbraio', 'Marzo', 'Aprile', 'Maggio', 'Giugno', 'Luglio', 'Agosto', 'Settembre', 'Ottobre', 'Novembre', 'Dicembre' ),
+					'month_genitive' => array( 'Gennaio', 'Febbraio', 'Marzo', 'Aprile', 'Maggio', 'Giugno', 'Luglio', 'Agosto', 'Settembre', 'Ottobre', 'Novembre', 'Dicembre' ),
+				);
+				break;
+
+			case 'el':
+				$months = array(
+					'month'          => array( 'ŒôŒ±ŒΩŒøœÖŒ¨œÅŒπŒøœÇ', 'Œ¶ŒµŒ≤œÅŒøœÖŒ¨œÅŒπŒøœÇ', 'ŒúŒ¨œÅœÑŒπŒøœÇ', 'ŒëœÄœÅŒØŒªŒπŒøœÇ', 'ŒúŒ¨ŒπŒøœÇ', 'ŒôŒøœçŒΩŒπŒøœÇ', 'ŒôŒøœçŒªŒπŒøœÇ', 'ŒëœçŒ≥ŒøœÖœÉœÑŒøœÇ', 'Œ£ŒµœÄœÑŒ≠ŒºŒ≤œÅŒπŒøœÇ', 'ŒüŒ∫œÑœéŒ≤œÅŒπŒøœÇ', 'ŒùŒøŒ≠ŒºŒ≤œÅŒπŒøœÇ', 'ŒîŒµŒ∫Œ≠ŒºŒ≤œÅŒπŒøœÇ' ),
+					'month_genitive' => array( 'ŒôŒ±ŒΩŒøœÖŒ±œÅŒØŒøœÖ', 'Œ¶ŒµŒ≤œÅŒøœÖŒ±œÅŒØŒøœÖ', 'ŒúŒ±œÅœÑŒØŒøœÖ', 'ŒëœÄœÅŒπŒªŒØŒøœÖ', 'ŒúŒ±ŒêŒøœÖ', 'ŒôŒøœÖŒΩŒØŒøœÖ', 'ŒôŒøœÖŒªŒØŒøœÖ', 'ŒëœÖŒ≥ŒøœçœÉœÑŒøœÖ', 'Œ£ŒµœÄœÑŒµŒºŒ≤œÅŒØŒøœÖ', 'ŒüŒ∫œÑœâŒ≤œÅŒØŒøœÖ', 'ŒùŒøŒµŒºŒ≤œÅŒØŒøœÖ', 'ŒîŒµŒ∫ŒµŒºŒ≤œÅŒØŒøœÖ' ),
+				);
+				break;
+
 			default:
 				$months = array(
 					'month'          => array( 'January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December' ),
diff --git a/tests/date/mysql2date.php b/tests/date/mysql2date.php
index 3b73771827..81ae9f13d0 100644
--- a/tests/date/mysql2date.php
+++ b/tests/date/mysql2date.php
@@ -7,11 +7,27 @@
 class Tests_Date_mysql2date extends WP_UnitTestCase {
 
 	function tearDown() {
+		// phpcs:ignore WordPress.DateTime.RestrictedFunctions.timezone_change_date_default_timezone_set
 		date_default_timezone_set( 'UTC' );
 
 		parent::tearDown();
 	}
 
+	/**
+	 * @ticket 28310
+	 */
+	function test_mysql2date_returns_false_with_no_date() {
+		$this->assertFalse( mysql2date( 'F j, Y H:i:s', '' ) );
+	}
+
+	/**
+	 * @ticket 28310
+	 */
+	function test_mysql2date_returns_gmt_or_unix_timestamp() {
+		$this->assertSame( 441013392, mysql2date( 'G', '1983-12-23 07:43:12' ) );
+		$this->assertSame( 441013392, mysql2date( 'U', '1983-12-23 07:43:12' ) );
+	}
+
 	/**
 	 * @ticket 28992
 	 */
@@ -22,8 +38,8 @@ class Tests_Date_mysql2date extends WP_UnitTestCase {
 		$rfc3339  = $datetime->format( DATE_RFC3339 );
 		$mysql    = $datetime->format( 'Y-m-d H:i:s' );
 
-		$this->assertEquals( $rfc3339, mysql2date( DATE_RFC3339, $mysql ) );
-		$this->assertEquals( $rfc3339, mysql2date( DATE_RFC3339, $mysql, false ) );
+		$this->assertSame( $rfc3339, mysql2date( DATE_RFC3339, $mysql ) );
+		$this->assertSame( $rfc3339, mysql2date( DATE_RFC3339, $mysql, false ) );
 	}
 
 	/**
@@ -31,14 +47,15 @@ class Tests_Date_mysql2date extends WP_UnitTestCase {
 	 */
 	function test_mysql2date_should_format_time_with_changed_time_zone() {
 		$timezone = 'Europe/Kiev';
+		// phpcs:ignore WordPress.DateTime.RestrictedFunctions.timezone_change_date_default_timezone_set
 		date_default_timezone_set( $timezone );
 		update_option( 'timezone_string', $timezone );
 		$datetime = new DateTime( 'now', new DateTimeZone( $timezone ) );
 		$rfc3339  = $datetime->format( DATE_RFC3339 );
 		$mysql    = $datetime->format( 'Y-m-d H:i:s' );
 
-		$this->assertEquals( $rfc3339, mysql2date( DATE_RFC3339, $mysql ) );
-		$this->assertEquals( $rfc3339, mysql2date( DATE_RFC3339, $mysql, false ) );
+		$this->assertSame( $rfc3339, mysql2date( DATE_RFC3339, $mysql ) );
+		$this->assertSame( $rfc3339, mysql2date( DATE_RFC3339, $mysql, false ) );
 	}
 
 	/**
@@ -51,8 +68,8 @@ class Tests_Date_mysql2date extends WP_UnitTestCase {
 		$wp_timestamp = $datetime->getTimestamp() + $datetime->getOffset();
 		$mysql        = $datetime->format( 'Y-m-d H:i:s' );
 
-		$this->assertEquals( $wp_timestamp, mysql2date( 'U', $mysql, false ) );
-		$this->assertEquals( $wp_timestamp, mysql2date( 'G', $mysql, false ) );
+		$this->assertSame( $wp_timestamp, mysql2date( 'U', $mysql, false ) );
+		$this->assertSame( $wp_timestamp, mysql2date( 'G', $mysql, false ) );
 	}
 
 	/**
@@ -65,7 +82,7 @@ class Tests_Date_mysql2date extends WP_UnitTestCase {
 		$timestamp = $datetime->getTimestamp();
 		$mysql     = $datetime->format( 'Y-m-d H:i:s' );
 
-		$this->assertEquals( $timestamp, mysql2date( 'U', $mysql, false ) );
-		$this->assertEquals( $timestamp, mysql2date( 'G', $mysql, false ) );
+		$this->assertSame( $timestamp, mysql2date( 'U', $mysql, false ) );
+		$this->assertSame( $timestamp, mysql2date( 'G', $mysql, false ) );
 	}
 }
diff --git a/tests/date/postTime.php b/tests/date/postTime.php
deleted file mode 100644
index 1380c48160..0000000000
--- a/tests/date/postTime.php
+++ /dev/null
@@ -1,88 +0,0 @@
-<?php
-
-/**
- * @group date
- * @group datetime
- */
-class Tests_Date_Post_Time extends WP_UnitTestCase {
-
-	/**
-	 * @ticket 25002
-	 */
-	public function test_should_return_wp_timestamp() {
-		$timezone = 'Europe/Kiev';
-		update_option( 'timezone_string', $timezone );
-
-		$datetime     = new DateTimeImmutable( 'now', new DateTimeZone( $timezone ) );
-		$mysql        = $datetime->format( 'Y-m-d H:i:s' );
-		$timestamp    = $datetime->getTimestamp();
-		$wp_timestamp = $datetime->getTimestamp() + $datetime->getOffset();
-
-		$post_id = self::factory()->post->create(
-			array(
-				'post_date'     => $mysql,
-				'post_modified' => $mysql,
-			)
-		);
-
-		$this->assertEquals( $wp_timestamp, get_post_time( 'U', false, $post_id ) );
-		$this->assertEquals( $wp_timestamp, get_post_time( 'G', false, $post_id ) );
-		$this->assertEquals( $timestamp, get_post_time( 'U', true, $post_id ) );
-		$this->assertEquals( $timestamp, get_post_time( 'G', true, $post_id ) );
-		$this->assertEquals( $wp_timestamp, get_post_modified_time( 'U', false, $post_id ) );
-		$this->assertEquals( $wp_timestamp, get_post_modified_time( 'G', false, $post_id ) );
-		$this->assertEquals( $timestamp, get_post_modified_time( 'U', true, $post_id ) );
-		$this->assertEquals( $timestamp, get_post_modified_time( 'G', true, $post_id ) );
-	}
-
-	/**
-	 * @ticket 25002
-	 */
-	public function test_should_return_time() {
-		$timezone = 'Europe/Kiev';
-		update_option( 'timezone_string', $timezone );
-
-		$datetime    = new DateTimeImmutable( 'now', new DateTimeZone( $timezone ) );
-		$mysql       = $datetime->format( 'Y-m-d H:i:s' );
-		$rfc3339     = $datetime->format( DATE_RFC3339 );
-		$rfc3339_utc = $datetime->setTimezone( new DateTimeZone( 'UTC' ) )->format( DATE_RFC3339 );
-		$post_id     = self::factory()->post->create(
-			array(
-				'post_date'     => $mysql,
-				'post_modified' => $mysql,
-			)
-		);
-
-		$this->assertEquals( $rfc3339, get_post_time( DATE_RFC3339, false, $post_id ) );
-		$this->assertEquals( $rfc3339_utc, get_post_time( DATE_RFC3339, true, $post_id ) );
-		$this->assertEquals( $rfc3339, get_post_time( DATE_RFC3339, false, $post_id, true ) );
-		$this->assertEquals( $rfc3339_utc, get_post_time( DATE_RFC3339, true, $post_id, true ) );
-		$this->assertEquals( $rfc3339, get_post_modified_time( DATE_RFC3339, false, $post_id ) );
-		$this->assertEquals( $rfc3339_utc, get_post_modified_time( DATE_RFC3339, true, $post_id ) );
-		$this->assertEquals( $rfc3339, get_post_modified_time( DATE_RFC3339, false, $post_id, true ) );
-		$this->assertEquals( $rfc3339_utc, get_post_modified_time( DATE_RFC3339, true, $post_id, true ) );
-	}
-
-	/**
-	 * @ticket 48384
-	 */
-	public function test_should_keep_utc_time_on_timezone_change() {
-		$timezone = 'UTC';
-		update_option( 'timezone_string', $timezone );
-
-		$datetime = new DateTimeImmutable( 'now', new DateTimeZone( $timezone ) );
-		$mysql    = $datetime->format( 'Y-m-d H:i:s' );
-		$rfc3339  = $datetime->format( DATE_RFC3339 );
-		$post_id  = self::factory()->post->create(
-			array(
-				'post_date'     => $mysql,
-				'post_modified' => $mysql,
-			)
-		);
-
-		update_option( 'timezone_string', 'Europe/Kiev' );
-
-		$this->assertEquals( $rfc3339, get_post_time( DATE_RFC3339, true, $post_id ) );
-		$this->assertEquals( $rfc3339, get_post_modified_time( DATE_RFC3339, true, $post_id ) );
-	}
-}
diff --git a/tests/date/query.php b/tests/date/query.php
index acf4e5bf7d..0445fd819f 100644
--- a/tests/date/query.php
+++ b/tests/date/query.php
@@ -110,7 +110,7 @@ class Tests_WP_Date_Query extends WP_UnitTestCase {
 			'relation' => 'AND',
 		);
 
-		$this->assertEquals( $expected, $q->queries );
+		$this->assertSame( $expected, $q->queries );
 	}
 
 	public function test_get_compare_empty() {
@@ -321,19 +321,19 @@ class Tests_WP_Date_Query extends WP_UnitTestCase {
 	public function test_build_value_compare_in() {
 		$q = new WP_Date_Query( array() );
 
-		// Single integer
+		// Single integer.
 		$found = $q->build_value( 'IN', 4 );
 		$this->assertSame( '(4)', $found );
 
-		// Single non-integer
+		// Single non-integer.
 		$found = $q->build_value( 'IN', 'foo' );
 		$this->assertFalse( $found );
 
-		// Array of integers
+		// Array of integers.
 		$found = $q->build_value( 'IN', array( 1, 4, 7 ) );
 		$this->assertSame( '(1,4,7)', $found );
 
-		// Array containing non-integers
+		// Array containing non-integers.
 		$found = $q->build_value( 'IN', array( 1, 'foo', 7 ) );
 		$this->assertSame( '(1,7)', $found );
 	}
@@ -344,19 +344,19 @@ class Tests_WP_Date_Query extends WP_UnitTestCase {
 	public function test_build_value_compare_not_in() {
 		$q = new WP_Date_Query( array() );
 
-		// Single integer
+		// Single integer.
 		$found = $q->build_value( 'NOT IN', 4 );
 		$this->assertSame( '(4)', $found );
 
-		// Single non-integer
+		// Single non-integer.
 		$found = $q->build_value( 'NOT IN', 'foo' );
 		$this->assertFalse( $found );
 
-		// Array of integers
+		// Array of integers.
 		$found = $q->build_value( 'NOT IN', array( 1, 4, 7 ) );
 		$this->assertSame( '(1,4,7)', $found );
 
-		// Array containing non-integers
+		// Array containing non-integers.
 		$found = $q->build_value( 'NOT IN', array( 1, 'foo', 7 ) );
 		$this->assertSame( '(1,7)', $found );
 	}
@@ -503,7 +503,7 @@ class Tests_WP_Date_Query extends WP_UnitTestCase {
 	public function test_build_mysql_datetime_datetime_non_array() {
 		$q = new WP_Date_Query( array() );
 
-		// This might be a fragile test if it takes longer than 1 second to run
+		// This might be a fragile test if it takes longer than 1 second to run.
 		$found    = $q->build_mysql_datetime( 'foo' );
 		$expected = gmdate( 'Y-m-d H:i:s', false );
 		$this->assertSame( $expected, $found );
@@ -524,7 +524,7 @@ class Tests_WP_Date_Query extends WP_UnitTestCase {
 		$found = $q->build_mysql_datetime( $datetime, $default_to_max );
 
 		$message = "Expected {$expected}, got {$found}";
-		$this->assertEquals( strtotime( $expected ), strtotime( $found ), $message, 10 );
+		$this->assertEqualsWithDelta( strtotime( $expected ), strtotime( $found ), 10, $message );
 	}
 
 	public function mysql_datetime_input_provider() {
@@ -559,7 +559,7 @@ class Tests_WP_Date_Query extends WP_UnitTestCase {
 		$found = $q->build_mysql_datetime( $datetime, $default_to_max );
 
 		$message = "Expected {$expected}, got {$found}";
-		$this->assertEquals( strtotime( $expected ), strtotime( $found ), $message, 10 );
+		$this->assertEqualsWithDelta( strtotime( $expected ), strtotime( $found ), 10, $message );
 
 	}
 
@@ -583,7 +583,7 @@ class Tests_WP_Date_Query extends WP_UnitTestCase {
 		$found     = $q->build_mysql_datetime( '-1 day' );
 
 		$message = "Expected {$expected}, got {$found}";
-		$this->assertEquals( strtotime( $expected ), strtotime( $found ), $message, 10 );
+		$this->assertEqualsWithDelta( strtotime( $expected ), strtotime( $found ), 10, $message );
 	}
 
 	public function test_build_time_query_insufficient_time_values() {
@@ -607,15 +607,15 @@ class Tests_WP_Date_Query extends WP_UnitTestCase {
 	public function test_build_time_query_compare_in() {
 		$q = new WP_Date_Query( array() );
 
-		// Just hour
+		// Just hour.
 		$found = $q->build_time_query( 'post_date', 'IN', array( 1, 2 ) );
 		$this->assertSame( 'HOUR( post_date ) IN (1,2)', $found );
 
-		// Skip minute
+		// Skip minute.
 		$found = $q->build_time_query( 'post_date', 'IN', array( 1, 2 ), null, 6 );
 		$this->assertSame( 'HOUR( post_date ) IN (1,2) AND SECOND( post_date ) IN (6)', $found );
 
-		// All three
+		// All three.
 		$found = $q->build_time_query( 'post_date', 'IN', array( 1, 2 ), array( 3, 4, 5 ), 6 );
 		$this->assertSame( 'HOUR( post_date ) IN (1,2) AND MINUTE( post_date ) IN (3,4,5) AND SECOND( post_date ) IN (6)', $found );
 	}
@@ -623,15 +623,15 @@ class Tests_WP_Date_Query extends WP_UnitTestCase {
 	public function test_build_time_query_compare_not_in() {
 		$q = new WP_Date_Query( array() );
 
-		// Just hour
+		// Just hour.
 		$found = $q->build_time_query( 'post_date', 'NOT IN', array( 1, 2 ) );
 		$this->assertSame( 'HOUR( post_date ) NOT IN (1,2)', $found );
 
-		// Skip minute
+		// Skip minute.
 		$found = $q->build_time_query( 'post_date', 'NOT IN', array( 1, 2 ), null, 6 );
 		$this->assertSame( 'HOUR( post_date ) NOT IN (1,2) AND SECOND( post_date ) NOT IN (6)', $found );
 
-		// All three
+		// All three.
 		$found = $q->build_time_query( 'post_date', 'NOT IN', array( 1, 2 ), array( 3, 4, 5 ), 6 );
 		$this->assertSame( 'HOUR( post_date ) NOT IN (1,2) AND MINUTE( post_date ) NOT IN (3,4,5) AND SECOND( post_date ) NOT IN (6)', $found );
 	}
@@ -639,15 +639,15 @@ class Tests_WP_Date_Query extends WP_UnitTestCase {
 	public function test_build_time_query_compare_between() {
 		$q = new WP_Date_Query( array() );
 
-		// Just hour
+		// Just hour.
 		$found = $q->build_time_query( 'post_date', 'BETWEEN', array( 1, 2 ) );
 		$this->assertSame( 'HOUR( post_date ) BETWEEN 1 AND 2', $found );
 
-		// Skip minute
+		// Skip minute.
 		$found = $q->build_time_query( 'post_date', 'BETWEEN', array( 1, 2 ), null, array( 6, 7 ) );
 		$this->assertSame( 'HOUR( post_date ) BETWEEN 1 AND 2 AND SECOND( post_date ) BETWEEN 6 AND 7', $found );
 
-		// All three
+		// All three.
 		$found = $q->build_time_query( 'post_date', 'BETWEEN', array( 1, 2 ), array( 3, 4 ), array( 6, 7 ) );
 		$this->assertSame( 'HOUR( post_date ) BETWEEN 1 AND 2 AND MINUTE( post_date ) BETWEEN 3 AND 4 AND SECOND( post_date ) BETWEEN 6 AND 7', $found );
 	}
@@ -655,15 +655,15 @@ class Tests_WP_Date_Query extends WP_UnitTestCase {
 	public function test_build_time_query_compare_not_between() {
 		$q = new WP_Date_Query( array() );
 
-		// Just hour
+		// Just hour.
 		$found = $q->build_time_query( 'post_date', 'NOT BETWEEN', array( 1, 2 ) );
 		$this->assertSame( 'HOUR( post_date ) NOT BETWEEN 1 AND 2', $found );
 
-		// Skip minute
+		// Skip minute.
 		$found = $q->build_time_query( 'post_date', 'NOT BETWEEN', array( 1, 2 ), null, array( 6, 7 ) );
 		$this->assertSame( 'HOUR( post_date ) NOT BETWEEN 1 AND 2 AND SECOND( post_date ) NOT BETWEEN 6 AND 7', $found );
 
-		// All three
+		// All three.
 		$found = $q->build_time_query( 'post_date', 'NOT BETWEEN', array( 1, 2 ), array( 3, 4 ), array( 6, 7 ) );
 		$this->assertSame( 'HOUR( post_date ) NOT BETWEEN 1 AND 2 AND MINUTE( post_date ) NOT BETWEEN 3 AND 4 AND SECOND( post_date ) NOT BETWEEN 6 AND 7', $found );
 	}
@@ -703,7 +703,7 @@ class Tests_WP_Date_Query extends WP_UnitTestCase {
 		$found = $q->build_time_query( 'post_date', '=', 5, 15 );
 
 		// $compare value is floating point - use regex to account for
-		// varying precision on different PHP installations
+		// varying precision on different PHP installations.
 		$this->assertRegExp( "/DATE_FORMAT\( post_date, '%H\.%i' \) = 5\.150*/", $wpdb->remove_placeholder_escape( $found ) );
 	}
 
@@ -714,7 +714,7 @@ class Tests_WP_Date_Query extends WP_UnitTestCase {
 		$found = $q->build_time_query( 'post_date', '=', 5, 15, 35 );
 
 		// $compare value is floating point - use regex to account for
-		// varying precision on different PHP installations
+		// varying precision on different PHP installations.
 		$this->assertRegExp( "/DATE_FORMAT\( post_date, '%H\.%i%s' \) = 5\.15350*/", $wpdb->remove_placeholder_escape( $found ) );
 	}
 
@@ -725,7 +725,7 @@ class Tests_WP_Date_Query extends WP_UnitTestCase {
 		$found = $q->build_time_query( 'post_date', '=', null, 15, 35 );
 
 		// $compare value is floating point - use regex to account for
-		// varying precision on different PHP installations
+		// varying precision on different PHP installations.
 		$this->assertRegExp( "/DATE_FORMAT\( post_date, '0\.%i%s' \) = 0\.15350*/", $wpdb->remove_placeholder_escape( $found ) );
 	}
 
@@ -1078,7 +1078,7 @@ class Tests_WP_Date_Query extends WP_UnitTestCase {
 			)
 		);
 
-		$this->assertEquals( array( $p2 ), $q->posts );
+		$this->assertSame( array( $p2 ), $q->posts );
 	}
 
 	/**
@@ -1100,7 +1100,7 @@ class Tests_WP_Date_Query extends WP_UnitTestCase {
 			)
 		);
 
-		$this->assertEquals( array( $p2 ), $q->posts );
+		$this->assertSame( array( $p2 ), $q->posts );
 	}
 
 	/**
@@ -1124,7 +1124,7 @@ class Tests_WP_Date_Query extends WP_UnitTestCase {
 		);
 
 		// MySQL ignores the invalid clause.
-		$this->assertEquals( array( $p1, $p2 ), $q->posts );
+		$this->assertSame( array( $p1, $p2 ), $q->posts );
 	}
 
 	/** Helpers */
diff --git a/tests/date/theDate.php b/tests/date/theDate.php
index 2542240d6b..a6e67eaf41 100644
--- a/tests/date/theDate.php
+++ b/tests/date/theDate.php
@@ -3,6 +3,7 @@
 /**
  * @group date
  * @group datetime
+ * @group post
  */
 class Tests_Date_The_Date extends WP_UnitTestCase {
 
@@ -60,20 +61,20 @@ class Tests_Date_The_Date extends WP_UnitTestCase {
 
 		ob_end_clean();
 
-		$this->assertEquals( 1, $this->hooks_called['the_time'] );
-		$this->assertEquals( 2, $this->hooks_called['get_the_time'] );
+		$this->assertSame( 1, $this->hooks_called['the_time'] );
+		$this->assertSame( 2, $this->hooks_called['get_the_time'] );
 
-		$this->assertEquals( 1, $this->hooks_called['the_modified_time'] );
-		$this->assertEquals( 2, $this->hooks_called['get_the_modified_time'] );
+		$this->assertSame( 1, $this->hooks_called['the_modified_time'] );
+		$this->assertSame( 2, $this->hooks_called['get_the_modified_time'] );
 
-		$this->assertEquals( 1, $this->hooks_called['the_date'] );
-		$this->assertEquals( 2, $this->hooks_called['get_the_date'] );
+		$this->assertSame( 1, $this->hooks_called['the_date'] );
+		$this->assertSame( 2, $this->hooks_called['get_the_date'] );
 
-		$this->assertEquals( 1, $this->hooks_called['the_modified_date'] );
-		$this->assertEquals( 2, $this->hooks_called['get_the_modified_date'] );
+		$this->assertSame( 1, $this->hooks_called['the_modified_date'] );
+		$this->assertSame( 2, $this->hooks_called['get_the_modified_date'] );
 
-		$this->assertEquals( 5, $this->hooks_called['get_post_time'] );
-		$this->assertEquals( 5, $this->hooks_called['get_post_modified_time'] );
+		$this->assertSame( 5, $this->hooks_called['get_post_time'] );
+		$this->assertSame( 5, $this->hooks_called['get_post_modified_time'] );
 	}
 
 	public function count_hook( $input ) {
@@ -89,7 +90,7 @@ class Tests_Date_The_Date extends WP_UnitTestCase {
 		ob_start();
 		the_date();
 		$actual = ob_get_clean();
-		$this->assertEquals( '', $actual );
+		$this->assertSame( '', $actual );
 
 		$GLOBALS['post'] = self::factory()->post->create_and_get(
 			array(
@@ -101,25 +102,25 @@ class Tests_Date_The_Date extends WP_UnitTestCase {
 		$GLOBALS['currentday']  = '18.09.15';
 		$GLOBALS['previousday'] = '17.09.15';
 		the_date();
-		$this->assertEquals( 'September 16, 2015', ob_get_clean() );
+		$this->assertSame( 'September 16, 2015', ob_get_clean() );
 
 		ob_start();
 		$GLOBALS['currentday']  = '18.09.15';
 		$GLOBALS['previousday'] = '17.09.15';
 		the_date( 'Y' );
-		$this->assertEquals( '2015', ob_get_clean() );
+		$this->assertSame( '2015', ob_get_clean() );
 
 		ob_start();
 		$GLOBALS['currentday']  = '18.09.15';
 		$GLOBALS['previousday'] = '17.09.15';
 		the_date( 'Y', 'before ', ' after' );
-		$this->assertEquals( 'before 2015 after', ob_get_clean() );
+		$this->assertSame( 'before 2015 after', ob_get_clean() );
 
 		ob_start();
 		$GLOBALS['currentday']  = '18.09.15';
 		$GLOBALS['previousday'] = '17.09.15';
 		the_date( 'Y', 'before ', ' after', false );
-		$this->assertEquals( '', ob_get_clean() );
+		$this->assertSame( '', ob_get_clean() );
 	}
 
 	/**
@@ -129,7 +130,7 @@ class Tests_Date_The_Date extends WP_UnitTestCase {
 		ob_start();
 		the_weekday_date();
 		$actual = ob_get_clean();
-		$this->assertEquals( '', $actual );
+		$this->assertSame( '', $actual );
 
 		$GLOBALS['post'] = self::factory()->post->create_and_get(
 			array(
@@ -141,12 +142,12 @@ class Tests_Date_The_Date extends WP_UnitTestCase {
 		$GLOBALS['currentday']      = '18.09.15';
 		$GLOBALS['previousweekday'] = '17.09.15';
 		the_weekday_date();
-		$this->assertEquals( 'Wednesday', ob_get_clean() );
+		$this->assertSame( 'Wednesday', ob_get_clean() );
 
 		ob_start();
 		$GLOBALS['currentday']      = '18.09.15';
 		$GLOBALS['previousweekday'] = '17.09.15';
 		the_weekday_date( 'before ', ' after' );
-		$this->assertEquals( 'before Wednesday after', ob_get_clean() );
+		$this->assertSame( 'before Wednesday after', ob_get_clean() );
 	}
 }
diff --git a/tests/date/wpDate.php b/tests/date/wpDate.php
index 01145c82c4..2b3212f395 100644
--- a/tests/date/wpDate.php
+++ b/tests/date/wpDate.php
@@ -43,7 +43,7 @@ class Tests_Date_WP_Date extends WP_UnitTestCase {
 		$utc      = new DateTimeZone( 'UTC' );
 		$datetime = new DateTimeImmutable( '2019-10-17', $utc );
 
-		$this->assertEquals( '10Êúà', wp_date( 'F', $datetime->getTimestamp(), $utc ) );
+		$this->assertSame( '10Êúà', wp_date( 'F', $datetime->getTimestamp(), $utc ) );
 	}
 
 	/**
@@ -58,6 +58,6 @@ class Tests_Date_WP_Date extends WP_UnitTestCase {
 		$utc      = new DateTimeZone( 'UTC' );
 		$datetime = new DateTimeImmutable( '2019-10-17', $utc );
 
-		$this->assertEquals( $string, wp_date( 'F', $datetime->getTimestamp(), $utc ) );
+		$this->assertSame( $string, wp_date( 'F', $datetime->getTimestamp(), $utc ) );
 	}
 }
diff --git a/tests/date/wpTimezone.php b/tests/date/wpTimezone.php
index 359ab1244f..5306b77786 100644
--- a/tests/date/wpTimezone.php
+++ b/tests/date/wpTimezone.php
@@ -18,11 +18,11 @@ class Tests_Date_WP_Timezone extends WP_UnitTestCase {
 		delete_option( 'timezone_string' );
 		update_option( 'gmt_offset', $gmt_offset );
 
-		$this->assertEquals( $tz_name, wp_timezone_string() );
+		$this->assertSame( $tz_name, wp_timezone_string() );
 
 		$timezone = wp_timezone();
 
-		$this->assertEquals( $tz_name, $timezone->getName() );
+		$this->assertSame( $tz_name, $timezone->getName() );
 	}
 
 	/**
@@ -31,11 +31,11 @@ class Tests_Date_WP_Timezone extends WP_UnitTestCase {
 	public function test_should_return_timezone_string() {
 		update_option( 'timezone_string', 'Europe/Kiev' );
 
-		$this->assertEquals( 'Europe/Kiev', wp_timezone_string() );
+		$this->assertSame( 'Europe/Kiev', wp_timezone_string() );
 
 		$timezone = wp_timezone();
 
-		$this->assertEquals( 'Europe/Kiev', $timezone->getName() );
+		$this->assertSame( 'Europe/Kiev', $timezone->getName() );
 	}
 
 	/**
diff --git a/tests/date/xmlrpc.php b/tests/date/xmlrpc.php
new file mode 100644
index 0000000000..285cddd645
--- /dev/null
+++ b/tests/date/xmlrpc.php
@@ -0,0 +1,240 @@
+<?php
+
+/**
+ * @group date
+ * @group datetime
+ * @group xmlrpc
+ */
+class Tests_Date_XMLRPC extends WP_XMLRPC_UnitTestCase {
+
+	/**
+	 * @ticket 30429
+	 */
+	public function test_date_new_post() {
+		$timezone = 'Europe/Kiev';
+		update_option( 'timezone_string', $timezone );
+
+		$datetime    = new DateTimeImmutable( 'now', new DateTimeZone( $timezone ) );
+		$datetimeutc = $datetime->setTimezone( new DateTimeZone( 'UTC' ) );
+
+		$this->make_user_by_role( 'editor' );
+
+		$post = get_post(
+			$this->myxmlrpcserver->mw_newPost(
+				array(
+					1,
+					'editor',
+					'editor',
+					array(
+						'title'        => 'test',
+						'post_content' => 'test',
+						'dateCreated'  => new IXR_Date( $datetimeutc->format( 'Ymd\TH:i:s\Z' ) ),
+					),
+				)
+			)
+		);
+
+		$this->assertSame(
+			$datetime->format( 'Y-m-d H:i:s' ),
+			$post->post_date,
+			'UTC time with explicit time zone into mw_newPost'
+		);
+
+		$post = get_post(
+			$this->myxmlrpcserver->mw_newPost(
+				array(
+					1,
+					'editor',
+					'editor',
+					array(
+						'title'        => 'test',
+						'post_content' => 'test',
+						'dateCreated'  => new IXR_Date( $datetime->format( 'Ymd\TH:i:s' ) ),
+					),
+				)
+			)
+		);
+
+		$this->assertSame(
+			$datetime->format( 'Y-m-d H:i:s' ),
+			$post->post_date,
+			'Local time w/o time zone into mw_newPost'
+		);
+
+		$post = get_post(
+			$this->myxmlrpcserver->mw_newPost(
+				array(
+					1,
+					'editor',
+					'editor',
+					array(
+						'title'            => 'test',
+						'post_content'     => 'test',
+						'date_created_gmt' => new IXR_Date( $datetimeutc->format( 'Ymd\TH:i:s' ) ),
+					),
+				)
+			)
+		);
+
+		$this->assertSame(
+			$datetime->format( 'Y-m-d H:i:s' ),
+			$post->post_date,
+			'UTC time into mw_newPost'
+		);
+
+		$post = get_post(
+			$this->myxmlrpcserver->wp_newPost(
+				array(
+					1,
+					'editor',
+					'editor',
+					array(
+						'title'        => 'test',
+						'post_content' => 'test',
+						'post_date'    => $datetime->format( 'Ymd\TH:i:s' ),
+					),
+				)
+			)
+		);
+
+		$this->assertSame(
+			$datetime->format( 'Y-m-d H:i:s' ),
+			$post->post_date,
+			'Local time into wp_newPost'
+		);
+
+		$post = get_post(
+			$this->myxmlrpcserver->wp_newPost(
+				array(
+					1,
+					'editor',
+					'editor',
+					array(
+						'title'         => 'test',
+						'post_content'  => 'test',
+						'post_date_gmt' => $datetimeutc->format( 'Ymd\TH:i:s' ),
+					),
+				)
+			)
+		);
+
+		$this->assertSame(
+			$datetime->format( 'Y-m-d H:i:s' ),
+			$post->post_date,
+			'UTC time into wp_newPost'
+		);
+	}
+
+	/**
+	 * @ticket 30429
+	 */
+	public function test_date_edit_post() {
+		$timezone = 'Europe/Kiev';
+		update_option( 'timezone_string', $timezone );
+
+		$datetime    = new DateTimeImmutable( 'now', new DateTimeZone( $timezone ) );
+		$datetimeutc = $datetime->setTimezone( new DateTimeZone( 'UTC' ) );
+
+		$editor_id = $this->make_user_by_role( 'editor' );
+
+		$post_id = self::factory()->post->create(
+			array(
+				'post_author' => $editor_id,
+				'post_date'   => $datetime->modify( '-1 hour' )->format( 'Y-m-d H:i:s' ),
+			)
+		);
+
+		$result = $this->myxmlrpcserver->mw_editPost(
+			array(
+				$post_id,
+				'editor',
+				'editor',
+				array(
+					'dateCreated' => new IXR_Date( $datetime->format( 'Ymd\TH:i:s' ) ),
+				),
+			)
+		);
+
+		$fetched_post = get_post( $post_id );
+
+		$this->assertTrue( $result );
+		$this->assertSame(
+			$datetime->format( 'Y-m-d H:i:s' ),
+			$fetched_post->post_date,
+			'Local time into mw_editPost'
+		);
+
+		$post_id = self::factory()->post->create(
+			array(
+				'post_author' => $editor_id,
+				'post_date'   => $datetime->modify( '-1 hour' )->format( 'Y-m-d H:i:s' ),
+			)
+		);
+
+		$result = $this->myxmlrpcserver->mw_editPost(
+			array(
+				$post_id,
+				'editor',
+				'editor',
+				array(
+					'date_created_gmt' => new IXR_Date( $datetimeutc->format( 'Ymd\TH:i:s' ) ),
+				),
+			)
+		);
+
+		$fetched_post = get_post( $post_id );
+
+		$this->assertTrue( $result );
+		$this->assertSame(
+			$datetime->format( 'Y-m-d H:i:s' ),
+			$fetched_post->post_date,
+			'UTC time into mw_editPost'
+		);
+	}
+
+	/**
+	 * @ticket 30429
+	 */
+	function test_date_edit_comment() {
+		$timezone = 'Europe/Kiev';
+		update_option( 'timezone_string', $timezone );
+
+		$datetime    = new DateTimeImmutable( 'now', new DateTimeZone( $timezone ) );
+		$datetime    = $datetime->modify( '-1 hour' );
+		$datetimeutc = $datetime->setTimezone( new DateTimeZone( 'UTC' ) );
+
+		$this->make_user_by_role( 'administrator' );
+		$post_id = $this->factory->post->create();
+
+		$comment_data = array(
+			'comment_post_ID'      => $post_id,
+			'comment_author'       => 'Test commenter',
+			'comment_author_url'   => 'http://example.com/',
+			'comment_author_email' => 'example@example.com',
+			'comment_content'      => rand_str( 100 ),
+			'comment_approved'     => '1',
+		);
+		$comment_id   = wp_insert_comment( $comment_data );
+
+		$result = $this->myxmlrpcserver->wp_editComment(
+			array(
+				1,
+				'administrator',
+				'administrator',
+				$comment_id,
+				array(
+					'date_created_gmt' => new IXR_Date( $datetimeutc->format( 'Ymd\TH:i:s' ) ),
+				),
+			)
+		);
+
+		$fetched_comment = get_comment( $comment_id );
+
+		$this->assertTrue( $result );
+		$this->assertSame(
+			$datetime->format( 'Y-m-d H:i:s' ),
+			$fetched_comment->comment_date,
+			'UTC time into wp_editComment'
+		);
+	}
+}
diff --git a/tests/db.php b/tests/db.php
index 842246528d..a715ba822c 100644
--- a/tests/db.php
+++ b/tests/db.php
@@ -86,16 +86,16 @@ class Tests_DB extends WP_UnitTestCase {
 	public function test_locale_floats() {
 		global $wpdb;
 
-		// Save the current locale settings
+		// Save the current locale settings.
 		$current_locales = explode( ';', setlocale( LC_ALL, 0 ) );
 
-		// Switch to Russian
-		$flag = setlocale( LC_ALL, 'ru_RU.utf8', 'rus', 'fr_FR.utf8', 'fr_FR', 'de_DE.utf8', 'de_DE', 'es_ES.utf8', 'es_ES', 'ja_JP.utf8', 'ja_JP' );
+		// Switch to a locale using comma as a decimal point separator.
+		$flag = setlocale( LC_ALL, 'ru_RU.utf8', 'rus', 'fr_FR.utf8', 'fr_FR', 'de_DE.utf8', 'de_DE', 'es_ES.utf8', 'es_ES' );
 		if ( false === $flag ) {
-			$this->markTestSkipped( 'No European languages available for testing' );
+			$this->markTestSkipped( 'No European locales available for testing' );
 		}
 
-		// Try an update query
+		// Try an update query.
 		$wpdb->suppress_errors( true );
 		$wpdb->update(
 			'test_table',
@@ -106,14 +106,14 @@ class Tests_DB extends WP_UnitTestCase {
 		);
 		$wpdb->suppress_errors( false );
 
-		// Ensure the float isn't 0,700
+		// Ensure the float isn't 0,700.
 		$this->assertContains( '0.700', array_pop( $this->_queries ) );
 
-		// Try a prepare
+		// Try a prepare.
 		$sql = $wpdb->prepare( 'UPDATE test_table SET float_column = %f AND meta_id = %d', 0.7, 5 );
 		$this->assertContains( '0.700', $sql );
 
-		// Restore locale settings
+		// Restore locale settings.
 		foreach ( $current_locales as $locale_setting ) {
 			if ( false !== strpos( $locale_setting, '=' ) ) {
 				list( $category, $locale ) = explode( '=', $locale_setting );
@@ -133,11 +133,11 @@ class Tests_DB extends WP_UnitTestCase {
 		global $wpdb;
 
 		$inputs   = array(
-			'howdy%', //Single Percent
-			'howdy_', //Single Underscore
-			'howdy\\', //Single slash
-			'howdy\\howdy%howdy_', //The works
-			'howdy\'"[[]*#[^howdy]!+)(*&$#@!~|}{=--`/.,<>?', //Plain text
+			'howdy%',              // Single percent.
+			'howdy_',              // Single underscore.
+			'howdy\\',             // Single slash.
+			'howdy\\howdy%howdy_', // The works.
+			'howdy\'"[[]*#[^howdy]!+)(*&$#@!~|}{=--`/.,<>?', // Plain text.
 		);
 		$expected = array(
 			'howdy\\%',
@@ -148,7 +148,7 @@ class Tests_DB extends WP_UnitTestCase {
 		);
 
 		foreach ( $inputs as $key => $input ) {
-			$this->assertEquals( $expected[ $key ], $wpdb->esc_like( $input ) );
+			$this->assertSame( $expected[ $key ], $wpdb->esc_like( $input ) );
 		}
 	}
 
@@ -167,7 +167,7 @@ class Tests_DB extends WP_UnitTestCase {
 	 */
 	function test_like_query( $data, $like, $result ) {
 		global $wpdb;
-		return $this->assertEquals( $result, $wpdb->get_var( $wpdb->prepare( 'SELECT %s LIKE %s', $data, $wpdb->esc_like( $like ) ) ) );
+		return $this->assertSame( $result, $wpdb->get_var( $wpdb->prepare( 'SELECT %s LIKE %s', $data, $wpdb->esc_like( $like ) ) ) );
 	}
 
 	function data_like_query() {
@@ -194,7 +194,7 @@ class Tests_DB extends WP_UnitTestCase {
 			),
 			array(
 				'a\\%aa', // SELECT 'a\\%aa'
-				'a\\%aa', // LIKE 'a\\\\\\%aa' # The PHP literal would be "LIKE 'a\\\\\\\\\\\\%aa'".  This is why we need reliable escape functions!
+				'a\\%aa', // LIKE 'a\\\\\\%aa' # The PHP literal would be "LIKE 'a\\\\\\\\\\\\%aa'". This is why we need reliable escape functions!
 				'1',
 			),
 			array(
@@ -234,7 +234,7 @@ class Tests_DB extends WP_UnitTestCase {
 		$this->assertNotEmpty( $wpdb->dbh );
 		$dbh = $wpdb->dbh;
 		$this->assertNotEmpty( $dbh );
-		$this->assertTrue( isset( $wpdb->dbh ) ); // Test __isset()
+		$this->assertTrue( isset( $wpdb->dbh ) ); // Test __isset().
 		unset( $wpdb->dbh );
 		$this->assertTrue( empty( $wpdb->dbh ) );
 		$wpdb->dbh = $dbh;
@@ -253,7 +253,7 @@ class Tests_DB extends WP_UnitTestCase {
 		$wpdb->col_meta = $new_meta;
 
 		$this->assertNotEquals( $col_meta, $new_meta );
-		$this->assertEquals( $col_meta, $wpdb->col_meta );
+		$this->assertSame( $col_meta, $wpdb->col_meta );
 	}
 
 	/**
@@ -281,7 +281,7 @@ class Tests_DB extends WP_UnitTestCase {
 		$this->assertContains( $wpdb->placeholder_escape(), $sql );
 
 		$sql = $wpdb->remove_placeholder_escape( $sql );
-		$this->assertEquals( "UPDATE test_table SET string_column = '%f is a float, %d is an int 3, %s is a string', field = '4'", $sql );
+		$this->assertSame( "UPDATE test_table SET string_column = '%f is a float, %d is an int 3, %s is a string', field = '4'", $sql );
 	}
 
 
@@ -295,12 +295,12 @@ class Tests_DB extends WP_UnitTestCase {
 
 		$current_modes = $wpdb->get_var( 'SELECT @@SESSION.sql_mode;' );
 
-		$new_modes = array( 'IGNORE_SPACE', 'NO_AUTO_CREATE_USER' );
+		$new_modes = array( 'IGNORE_SPACE', 'NO_AUTO_VALUE_ON_ZERO' );
 
 		$wpdb->set_sql_mode( $new_modes );
 
 		$check_new_modes = $wpdb->get_var( 'SELECT @@SESSION.sql_mode;' );
-		$this->assertEqualSets( $new_modes, explode( ',', $check_new_modes ) );
+		$this->assertSameSets( $new_modes, explode( ',', $check_new_modes ) );
 
 		$wpdb->set_sql_mode( explode( ',', $current_modes ) );
 	}
@@ -315,7 +315,7 @@ class Tests_DB extends WP_UnitTestCase {
 
 		$current_modes = $wpdb->get_var( 'SELECT @@SESSION.sql_mode;' );
 
-		$new_modes = array( 'IGNORE_SPACE', 'NO_ZERO_DATE', 'NO_AUTO_CREATE_USER' );
+		$new_modes = array( 'IGNORE_SPACE', 'NO_ZERO_DATE', 'NO_AUTO_VALUE_ON_ZERO' );
 		$wpdb->set_sql_mode( $new_modes );
 		$check_new_modes = $wpdb->get_var( 'SELECT @@SESSION.sql_mode;' );
 		$this->assertNotContains( 'NO_ZERO_DATE', explode( ',', $check_new_modes ) );
@@ -333,7 +333,7 @@ class Tests_DB extends WP_UnitTestCase {
 
 		$current_modes = $wpdb->get_var( 'SELECT @@SESSION.sql_mode;' );
 
-		$new_modes = array( 'IGNORE_SPACE', 'ONLY_FULL_GROUP_BY', 'NO_AUTO_CREATE_USER' );
+		$new_modes = array( 'IGNORE_SPACE', 'ONLY_FULL_GROUP_BY', 'NO_AUTO_VALUE_ON_ZERO' );
 
 		add_filter( 'incompatible_sql_modes', array( $this, 'filter_allowed_incompatible_sql_mode' ), 1, 1 );
 		$wpdb->set_sql_mode( $new_modes );
@@ -367,14 +367,14 @@ class Tests_DB extends WP_UnitTestCase {
 		// This, obviously, is an incorrect prepare.
 		// phpcs:ignore WordPress.DB.PreparedSQL.InterpolatedNotPrepared
 		$prepared = $wpdb->prepare( "SELECT * FROM $wpdb->users WHERE id = $id", $id );
-		$this->assertEquals( "SELECT * FROM $wpdb->users WHERE id = 0", $prepared );
+		$this->assertSame( "SELECT * FROM $wpdb->users WHERE id = 0", $prepared );
 	}
 
 	function test_prepare_sprintf() {
 		global $wpdb;
 
 		$prepared = $wpdb->prepare( "SELECT * FROM $wpdb->users WHERE id = %d AND user_login = %s", 1, 'admin' );
-		$this->assertEquals( "SELECT * FROM $wpdb->users WHERE id = 1 AND user_login = 'admin'", $prepared );
+		$this->assertSame( "SELECT * FROM $wpdb->users WHERE id = 1 AND user_login = 'admin'", $prepared );
 	}
 
 	/**
@@ -385,18 +385,18 @@ class Tests_DB extends WP_UnitTestCase {
 
 		// phpcs:ignore WordPress.PHP.NoSilencedErrors.Discouraged
 		$prepared = @$wpdb->prepare( "SELECT * FROM $wpdb->users WHERE id = %d AND user_login = %s", 1, array( 'admin' ) );
-		$this->assertEquals( "SELECT * FROM $wpdb->users WHERE id = 1 AND user_login = ''", $prepared );
+		$this->assertSame( "SELECT * FROM $wpdb->users WHERE id = 1 AND user_login = ''", $prepared );
 
 		// phpcs:ignore WordPress.PHP.NoSilencedErrors.Discouraged
 		$prepared = @$wpdb->prepare( "SELECT * FROM $wpdb->users WHERE id = %d AND user_login = %s", array( 1 ), 'admin' );
-		$this->assertEquals( "SELECT * FROM $wpdb->users WHERE id = 0 AND user_login = 'admin'", $prepared );
+		$this->assertSame( "SELECT * FROM $wpdb->users WHERE id = 0 AND user_login = 'admin'", $prepared );
 	}
 
 	function test_prepare_vsprintf() {
 		global $wpdb;
 
 		$prepared = $wpdb->prepare( "SELECT * FROM $wpdb->users WHERE id = %d AND user_login = %s", array( 1, 'admin' ) );
-		$this->assertEquals( "SELECT * FROM $wpdb->users WHERE id = 1 AND user_login = 'admin'", $prepared );
+		$this->assertSame( "SELECT * FROM $wpdb->users WHERE id = 1 AND user_login = 'admin'", $prepared );
 	}
 
 	/**
@@ -407,11 +407,11 @@ class Tests_DB extends WP_UnitTestCase {
 
 		// phpcs:ignore WordPress.PHP.NoSilencedErrors.Discouraged
 		$prepared = @$wpdb->prepare( "SELECT * FROM $wpdb->users WHERE id = %d AND user_login = %s", array( 1, array( 'admin' ) ) );
-		$this->assertEquals( "SELECT * FROM $wpdb->users WHERE id = 1 AND user_login = ''", $prepared );
+		$this->assertSame( "SELECT * FROM $wpdb->users WHERE id = 1 AND user_login = ''", $prepared );
 
 		// phpcs:ignore WordPress.PHP.NoSilencedErrors.Discouraged
 		$prepared = @$wpdb->prepare( "SELECT * FROM $wpdb->users WHERE id = %d AND user_login = %s", array( array( 1 ), 'admin' ) );
-		$this->assertEquals( "SELECT * FROM $wpdb->users WHERE id = 0 AND user_login = 'admin'", $prepared );
+		$this->assertSame( "SELECT * FROM $wpdb->users WHERE id = 0 AND user_login = 'admin'", $prepared );
 	}
 
 	/**
@@ -432,9 +432,9 @@ class Tests_DB extends WP_UnitTestCase {
 
 		return array(
 			array(
-				"SELECT * FROM $wpdb->users WHERE id = %d AND user_login = %s",     // Query
-				array( 1, 'admin', 'extra-arg' ),                                   // ::prepare() args, to be passed via call_user_func_array
-				"SELECT * FROM $wpdb->users WHERE id = 1 AND user_login = 'admin'", // Expected output
+				"SELECT * FROM $wpdb->users WHERE id = %d AND user_login = %s",     // Query.
+				array( 1, 'admin', 'extra-arg' ),                                   // ::prepare() args, to be passed via call_user_func_array().
+				"SELECT * FROM $wpdb->users WHERE id = 1 AND user_login = 'admin'", // Expected output.
 			),
 			array(
 				"SELECT * FROM $wpdb->users WHERE id = %%%d AND user_login = %s",
@@ -490,7 +490,7 @@ class Tests_DB extends WP_UnitTestCase {
 		$str    = $wpdb->get_caller();
 		$calls  = explode( ', ', $str );
 		$called = join( '->', array( __CLASS__, __FUNCTION__ ) );
-		$this->assertEquals( $called, end( $calls ) );
+		$this->assertSame( $called, end( $calls ) );
 	}
 
 	function test_has_cap() {
@@ -501,11 +501,11 @@ class Tests_DB extends WP_UnitTestCase {
 		$this->assertTrue( $wpdb->has_cap( 'COLLATION' ) );
 		$this->assertTrue( $wpdb->has_cap( 'GROUP_CONCAT' ) );
 		$this->assertTrue( $wpdb->has_cap( 'SUBQUERIES' ) );
-		$this->assertEquals(
+		$this->assertSame(
 			version_compare( $wpdb->db_version(), '5.0.7', '>=' ),
 			$wpdb->has_cap( 'set_charset' )
 		);
-		$this->assertEquals(
+		$this->assertSame(
 			version_compare( $wpdb->db_version(), '5.0.7', '>=' ),
 			$wpdb->has_cap( 'SET_CHARSET' )
 		);
@@ -548,29 +548,29 @@ class Tests_DB extends WP_UnitTestCase {
 
 		$wpdb->get_results( "SELECT ID FROM $wpdb->users" );
 
-		$this->assertEquals( array( 'ID' ), $wpdb->get_col_info() );
-		$this->assertEquals( array( $wpdb->users ), $wpdb->get_col_info( 'table' ) );
-		$this->assertEquals( $wpdb->users, $wpdb->get_col_info( 'table', 0 ) );
+		$this->assertSame( array( 'ID' ), $wpdb->get_col_info() );
+		$this->assertSame( array( $wpdb->users ), $wpdb->get_col_info( 'table' ) );
+		$this->assertSame( $wpdb->users, $wpdb->get_col_info( 'table', 0 ) );
 	}
 
 	function test_query_and_delete() {
 		global $wpdb;
 		$rows = $wpdb->query( "INSERT INTO $wpdb->users (display_name) VALUES ('Walter Sobchak')" );
-		$this->assertEquals( 1, $rows );
+		$this->assertSame( 1, $rows );
 		$this->assertNotEmpty( $wpdb->insert_id );
 		$d_rows = $wpdb->delete( $wpdb->users, array( 'ID' => $wpdb->insert_id ) );
-		$this->assertEquals( 1, $d_rows );
+		$this->assertSame( 1, $d_rows );
 	}
 
 	function test_get_row() {
 		global $wpdb;
 		$rows = $wpdb->query( "INSERT INTO $wpdb->users (display_name) VALUES ('Walter Sobchak')" );
-		$this->assertEquals( 1, $rows );
+		$this->assertSame( 1, $rows );
 		$this->assertNotEmpty( $wpdb->insert_id );
 
 		$row = $wpdb->get_row( $wpdb->prepare( "SELECT * FROM $wpdb->users WHERE ID = %d", $wpdb->insert_id ) );
 		$this->assertInternalType( 'object', $row );
-		$this->assertEquals( 'Walter Sobchak', $row->display_name );
+		$this->assertSame( 'Walter Sobchak', $row->display_name );
 	}
 
 	/**
@@ -667,7 +667,7 @@ class Tests_DB extends WP_UnitTestCase {
 	function test_replace() {
 		global $wpdb;
 		$rows1 = $wpdb->insert( $wpdb->users, array( 'display_name' => 'Walter Sobchak' ) );
-		$this->assertEquals( 1, $rows1 );
+		$this->assertSame( 1, $rows1 );
 		$this->assertNotEmpty( $wpdb->insert_id );
 		$last = $wpdb->insert_id;
 
@@ -678,13 +678,13 @@ class Tests_DB extends WP_UnitTestCase {
 				'display_name' => 'Walter Replace Sobchak',
 			)
 		);
-		$this->assertEquals( 2, $rows2 );
+		$this->assertSame( 2, $rows2 );
 		$this->assertNotEmpty( $wpdb->insert_id );
 
-		$this->assertEquals( $last, $wpdb->insert_id );
+		$this->assertSame( $last, $wpdb->insert_id );
 
 		$row = $wpdb->get_row( $wpdb->prepare( "SELECT * FROM $wpdb->users WHERE ID = %d", $last ) );
-		$this->assertEquals( 'Walter Replace Sobchak', $row->display_name );
+		$this->assertSame( 'Walter Replace Sobchak', $row->display_name );
 	}
 
 	/**
@@ -699,13 +699,13 @@ class Tests_DB extends WP_UnitTestCase {
 
 		$expected1 = "UPDATE `{$wpdb->posts}` SET `post_name` = 'burrito' WHERE ";
 		$this->assertNotEmpty( $wpdb->last_error );
-		$this->assertEquals( $expected1, $wpdb->last_query );
+		$this->assertSame( $expected1, $wpdb->last_query );
 
 		$wpdb->update( $wpdb->posts, array( 'post_name' => 'burrito' ), array( 'post_status' => 'taco' ) );
 
 		$expected2 = "UPDATE `{$wpdb->posts}` SET `post_name` = 'burrito' WHERE `post_status` = 'taco'";
 		$this->assertEmpty( $wpdb->last_error );
-		$this->assertEquals( $expected2, $wpdb->last_query );
+		$this->assertSame( $expected2, $wpdb->last_query );
 		$wpdb->suppress_errors( $suppress );
 	}
 
@@ -748,6 +748,7 @@ class Tests_DB extends WP_UnitTestCase {
 
 	/**
 	 * @ticket 21212
+	 * @ticket 32763
 	 */
 	function data_get_table_from_query() {
 		$table       = 'a_test_table_name';
@@ -758,7 +759,7 @@ class Tests_DB extends WP_UnitTestCase {
 		);
 
 		$queries = array(
-			// Basic
+			// Basic.
 			"SELECT * FROM $table",
 			"SELECT * FROM `$table`",
 
@@ -795,7 +796,7 @@ class Tests_DB extends WP_UnitTestCase {
 			"DELETE a FROM $table a",
 			"DELETE `a` FROM $table a",
 
-			// Extended
+			// Extended.
 			"EXPLAIN SELECT * FROM $table",
 			"EXPLAIN EXTENDED SELECT * FROM $table",
 			"EXPLAIN EXTENDED SELECT * FROM `$table`",
@@ -874,7 +875,7 @@ class Tests_DB extends WP_UnitTestCase {
 	 * @ticket 21212
 	 */
 	function test_get_table_from_query( $query, $table ) {
-		$this->assertEquals( $table, self::$_wpdb->get_table_from_query( $query ) );
+		$this->assertSame( $table, self::$_wpdb->get_table_from_query( $query ) );
 	}
 
 	function data_get_table_from_query_false() {
@@ -897,13 +898,13 @@ class Tests_DB extends WP_UnitTestCase {
 	 */
 	function data_get_escaped_table_from_show_query() {
 		return array(
-			// Equality
+			// Equality.
 			array( "SHOW TABLE STATUS WHERE Name = 'test_name'", 'test_name' ),
 			array( 'SHOW TABLE STATUS WHERE NAME="test_name"', 'test_name' ),
 			array( 'SHOW TABLES WHERE Name = "test_name"', 'test_name' ),
 			array( "SHOW FULL TABLES WHERE Name='test_name'", 'test_name' ),
 
-			// LIKE
+			// LIKE.
 			array( "SHOW TABLE STATUS LIKE 'test\_prefix\_%'", 'test_prefix_' ),
 			array( 'SHOW TABLE STATUS LIKE "test\_prefix\_%"', 'test_prefix_' ),
 			array( "SHOW TABLES LIKE 'test\_prefix\_%'", 'test_prefix_' ),
@@ -916,7 +917,7 @@ class Tests_DB extends WP_UnitTestCase {
 	 * @ticket 38751
 	 */
 	function test_get_escaped_table_from_show_query( $query, $table ) {
-		$this->assertEquals( $table, self::$_wpdb->get_table_from_query( $query ) );
+		$this->assertSame( $table, self::$_wpdb->get_table_from_query( $query ) );
 	}
 
 	/**
@@ -946,7 +947,7 @@ class Tests_DB extends WP_UnitTestCase {
 				'post_content' => 'foo',
 				'post_parent'  => 0,
 			),
-			array( '%d', '%s' ), // These override core field_types
+			array( '%d', '%s' ), // These override core field_types.
 			array(
 				'post_content' => array(
 					'value'  => 'foo',
@@ -1001,7 +1002,7 @@ class Tests_DB extends WP_UnitTestCase {
 				'this_is_not_either'       => 's',
 				'nor_this'                 => 1,
 			),
-			array( '%d', '%s' ), // The first format is used for the third
+			array( '%d', '%s' ), // The first format is used for the third.
 			array(
 				'this_is_not_a_core_field' => array(
 					'value'  => 0,
@@ -1019,7 +1020,7 @@ class Tests_DB extends WP_UnitTestCase {
 		);
 
 		$vars = get_defined_vars();
-		// Push the variable name onto the end for assertSame $message
+		// Push the variable name onto the end for assertSame() $message.
 		foreach ( $vars as $var_name => $var ) {
 			$vars[ $var_name ][] = $var_name;
 		}
@@ -1083,7 +1084,7 @@ class Tests_DB extends WP_UnitTestCase {
 		$charset = self::$_wpdb->get_table_charset( 'some_table' );
 		remove_filter( 'pre_get_table_charset', array( $this, 'filter_pre_get_table_charset' ), 10 );
 
-		$this->assertEquals( $charset, 'fake_charset' );
+		$this->assertSame( $charset, 'fake_charset' );
 	}
 	function filter_pre_get_table_charset( $charset, $table ) {
 		return 'fake_charset';
@@ -1097,7 +1098,7 @@ class Tests_DB extends WP_UnitTestCase {
 		$charset = self::$_wpdb->get_col_charset( 'some_table', 'some_col' );
 		remove_filter( 'pre_get_col_charset', array( $this, 'filter_pre_get_col_charset' ), 10 );
 
-		$this->assertEquals( $charset, 'fake_col_charset' );
+		$this->assertSame( $charset, 'fake_col_charset' );
 	}
 	function filter_pre_get_col_charset( $charset, $table, $column ) {
 		return 'fake_col_charset';
@@ -1365,7 +1366,7 @@ class Tests_DB extends WP_UnitTestCase {
 
 		// phpcs:ignore WordPress.DB.PreparedSQL
 		$sql = $wpdb->prepare( $sql, ...$values );
-		$this->assertEquals( $expected, $sql );
+		$this->assertSame( $expected, $sql );
 	}
 
 	/**
@@ -1384,7 +1385,7 @@ class Tests_DB extends WP_UnitTestCase {
 
 		// phpcs:ignore WordPress.DB.PreparedSQL
 		$sql = $wpdb->prepare( $sql, $values );
-		$this->assertEquals( $expected, $sql );
+		$this->assertSame( $expected, $sql );
 	}
 
 	function data_prepare_with_placeholders() {
@@ -1392,10 +1393,10 @@ class Tests_DB extends WP_UnitTestCase {
 
 		return array(
 			array(
-				'%5s',   // SQL to prepare
-				'foo',   // Value to insert in the SQL
-				false,   // Whether to expect an incorrect usage error or not
-				'  foo', // Expected output
+				'%5s',   // SQL to prepare.
+				'foo',   // Value to insert in the SQL.
+				false,   // Whether to expect an incorrect usage error or not.
+				'  foo', // Expected output.
 			),
 			array(
 				'%1$d %%% % %%1$d%% %%%1$d%%',
@@ -1579,18 +1580,18 @@ class Tests_DB extends WP_UnitTestCase {
 		// phpcs:ignore WordPress.DB.PreparedSQL.NotPrepared
 		$actual = $wpdb->prepare( $sql, $values );
 
-		$this->assertEquals( $expected, $actual );
+		$this->assertSame( $expected, $actual );
 	}
 
 	function data_escape_and_prepare() {
 		global $wpdb;
 		return array(
 			array(
-				'%s',                                  // String to pass through esc_url()
-				' {ESCAPE} ',                          // Query to insert the output of esc_url() into, replacing "{ESCAPE}"
-				'foo',                                 // Data to send to prepare()
-				true,                                  // Whether to expect an incorrect usage error or not
-				" {$wpdb->placeholder_escape()}s ",    // Expected output
+				'%s',                                  // String to pass through esc_url().
+				' {ESCAPE} ',                          // Query to insert the output of esc_url() into, replacing "{ESCAPE}".
+				'foo',                                 // Data to send to prepare().
+				true,                                  // Whether to expect an incorrect usage error or not.
+				" {$wpdb->placeholder_escape()}s ",    // Expected output.
 			),
 			array(
 				'foo%sbar',
@@ -1667,7 +1668,7 @@ class Tests_DB extends WP_UnitTestCase {
 		$wpdb->query( "DROP TABLE {$wpdb->prefix}test_placeholder" );
 
 		$this->assertNotContains( '%s', $sql );
-		$this->assertEquals( $value, $actual );
+		$this->assertSame( $value, $actual );
 	}
 
 	function test_esc_sql_with_unsupported_placeholder_type() {
@@ -1677,7 +1678,7 @@ class Tests_DB extends WP_UnitTestCase {
 		// phpcs:ignore WordPress.DB.PreparedSQL.InterpolatedNotPrepared
 		$sql = $wpdb->prepare( " $sql %s ", 'foo' );
 
-		$this->assertEquals( "  'foo' {$wpdb->placeholder_escape()}1\$c  'foo' ", $sql );
+		$this->assertSame( "  'foo' {$wpdb->placeholder_escape()}1\$c  'foo' ", $sql );
 	}
 
 	/**
@@ -1704,12 +1705,12 @@ class Tests_DB extends WP_UnitTestCase {
 	public function parse_db_host_data_provider() {
 		return array(
 			array(
-				'',    // DB_HOST
-				false, // Expect parse_db_host to bail for this hostname
-				'',    // Parsed host
-				null,  // Parsed port
-				null,  // Parsed socket
-				false, // is_ipv6
+				'',    // DB_HOST.
+				false, // Expect parse_db_host to bail for this hostname.
+				'',    // Parsed host.
+				null,  // Parsed port.
+				null,  // Parsed socket.
+				false, // $is_ipv6.
 			),
 			array(
 				':3306',
diff --git a/tests/db/charset.php b/tests/db/charset.php
index dc7f7c3b8f..7a7fc82353 100644
--- a/tests/db/charset.php
+++ b/tests/db/charset.php
@@ -25,15 +25,11 @@ class Tests_DB_Charset extends WP_UnitTestCase {
 	public static function setUpBeforeClass() {
 		parent::setUpBeforeClass();
 
-		require_once( dirname( dirname( __FILE__ ) ) . '/db.php' );
+		require_once dirname( __DIR__ ) . '/db.php';
 
 		self::$_wpdb = new WpdbExposedMethodsForTesting();
 
-		if ( self::$_wpdb->use_mysqli ) {
-			self::$server_info = mysqli_get_server_info( self::$_wpdb->dbh );
-		} else {
-			self::$server_info = mysql_get_server_info( self::$_wpdb->dbh );
-		}
+		self::$server_info = self::$_wpdb->db_server_info();
 	}
 
 	/**
@@ -72,7 +68,7 @@ class Tests_DB_Charset extends WP_UnitTestCase {
 				),
 			),
 			'ascii'                                 => array(
-				// ascii gets special treatment, make sure it's covered
+				// ascii gets special treatment, make sure it's covered.
 				'charset'  => 'ascii',
 				'value'    => 'Hello World',
 				'expected' => 'Hello World',
@@ -82,7 +78,7 @@ class Tests_DB_Charset extends WP_UnitTestCase {
 				),
 			),
 			'ascii_char_length'                     => array(
-				// ascii gets special treatment, make sure it's covered
+				// ascii gets special treatment, make sure it's covered.
 				'charset'  => 'ascii',
 				'value'    => str_repeat( 'A', 11 ),
 				'expected' => str_repeat( 'A', 10 ),
@@ -92,7 +88,7 @@ class Tests_DB_Charset extends WP_UnitTestCase {
 				),
 			),
 			'ascii_byte_length'                     => array(
-				// ascii gets special treatment, make sure it's covered
+				// ascii gets special treatment, make sure it's covered.
 				'charset'  => 'ascii',
 				'value'    => str_repeat( 'A', 11 ),
 				'expected' => str_repeat( 'A', 10 ),
@@ -102,7 +98,7 @@ class Tests_DB_Charset extends WP_UnitTestCase {
 				),
 			),
 			'utf8'                                  => array(
-				// utf8 only allows <= 3-byte chars
+				// utf8 only allows <= 3-byte chars.
 				'charset'  => 'utf8',
 				'value'    => "H‚Ç¨llo\xf0\x9f\x98\x88World¬¢",
 				'expected' => 'H‚Ç¨lloWorld¬¢',
@@ -112,7 +108,7 @@ class Tests_DB_Charset extends WP_UnitTestCase {
 				),
 			),
 			'utf8_23char_length'                    => array(
-				// utf8 only allows <= 3-byte chars
+				// utf8 only allows <= 3-byte chars.
 				'charset'  => 'utf8',
 				'value'    => str_repeat( '¬≤Ôºì', 10 ),
 				'expected' => str_repeat( '¬≤Ôºì', 5 ),
@@ -122,7 +118,7 @@ class Tests_DB_Charset extends WP_UnitTestCase {
 				),
 			),
 			'utf8_23byte_length'                    => array(
-				// utf8 only allows <= 3-byte chars
+				// utf8 only allows <= 3-byte chars.
 				'charset'  => 'utf8',
 				'value'    => str_repeat( '¬≤Ôºì', 10 ),
 				'expected' => '¬≤Ôºì¬≤Ôºì',
@@ -132,7 +128,7 @@ class Tests_DB_Charset extends WP_UnitTestCase {
 				),
 			),
 			'utf8_3char_length'                     => array(
-				// utf8 only allows <= 3-byte chars
+				// utf8 only allows <= 3-byte chars.
 				'charset'  => 'utf8',
 				'value'    => str_repeat( 'Ôºì', 11 ),
 				'expected' => str_repeat( 'Ôºì', 10 ),
@@ -142,7 +138,7 @@ class Tests_DB_Charset extends WP_UnitTestCase {
 				),
 			),
 			'utf8_3byte_length'                     => array(
-				// utf8 only allows <= 3-byte chars
+				// utf8 only allows <= 3-byte chars.
 				'charset'  => 'utf8',
 				'value'    => str_repeat( 'Ôºì', 11 ),
 				'expected' => 'ÔºìÔºìÔºì',
@@ -152,7 +148,7 @@ class Tests_DB_Charset extends WP_UnitTestCase {
 				),
 			),
 			'utf8mb3'                               => array(
-				// utf8mb3 should behave the same an utf8
+				// utf8mb3 should behave the same an utf8.
 				'charset'  => 'utf8mb3',
 				'value'    => "H‚Ç¨llo\xf0\x9f\x98\x88World¬¢",
 				'expected' => 'H‚Ç¨lloWorld¬¢',
@@ -162,7 +158,7 @@ class Tests_DB_Charset extends WP_UnitTestCase {
 				),
 			),
 			'utf8mb3_23char_length'                 => array(
-				// utf8mb3 should behave the same an utf8
+				// utf8mb3 should behave the same an utf8.
 				'charset'  => 'utf8mb3',
 				'value'    => str_repeat( '¬≤Ôºì', 10 ),
 				'expected' => str_repeat( '¬≤Ôºì', 5 ),
@@ -172,7 +168,7 @@ class Tests_DB_Charset extends WP_UnitTestCase {
 				),
 			),
 			'utf8mb3_23byte_length'                 => array(
-				// utf8mb3 should behave the same an utf8
+				// utf8mb3 should behave the same an utf8.
 				'charset'  => 'utf8mb3',
 				'value'    => str_repeat( '¬≤Ôºì', 10 ),
 				'expected' => '¬≤Ôºì¬≤Ôºì',
@@ -182,7 +178,7 @@ class Tests_DB_Charset extends WP_UnitTestCase {
 				),
 			),
 			'utf8mb3_3char_length'                  => array(
-				// utf8mb3 should behave the same an utf8
+				// utf8mb3 should behave the same an utf8.
 				'charset'  => 'utf8mb3',
 				'value'    => str_repeat( 'Ôºì', 11 ),
 				'expected' => str_repeat( 'Ôºì', 10 ),
@@ -192,7 +188,7 @@ class Tests_DB_Charset extends WP_UnitTestCase {
 				),
 			),
 			'utf8mb3_3byte_length'                  => array(
-				// utf8mb3 should behave the same an utf8
+				// utf8mb3 should behave the same an utf8.
 				'charset'  => 'utf8mb3',
 				'value'    => str_repeat( 'Ôºì', 10 ),
 				'expected' => 'ÔºìÔºìÔºì',
@@ -202,7 +198,7 @@ class Tests_DB_Charset extends WP_UnitTestCase {
 				),
 			),
 			'utf8mb4'                               => array(
-				// utf8mb4 allows 4-byte characters, too
+				// utf8mb4 allows 4-byte characters, too.
 				'charset'  => 'utf8mb4',
 				'value'    => "H‚Ç¨llo\xf0\x9f\x98\x88World¬¢",
 				'expected' => "H‚Ç¨llo\xf0\x9f\x98\x88World¬¢",
@@ -212,7 +208,7 @@ class Tests_DB_Charset extends WP_UnitTestCase {
 				),
 			),
 			'utf8mb4_234char_length'                => array(
-				// utf8mb4 allows 4-byte characters, too
+				// utf8mb4 allows 4-byte characters, too.
 				'charset'  => 'utf8mb4',
 				'value'    => str_repeat( '¬≤Ôºìùüú', 10 ),
 				'expected' => '¬≤Ôºìùüú¬≤Ôºìùüú¬≤Ôºìùüú¬≤',
@@ -222,7 +218,7 @@ class Tests_DB_Charset extends WP_UnitTestCase {
 				),
 			),
 			'utf8mb4_234byte_length'                => array(
-				// utf8mb4 allows 4-byte characters, too
+				// utf8mb4 allows 4-byte characters, too.
 				'charset'  => 'utf8mb4',
 				'value'    => str_repeat( '¬≤Ôºìùüú', 10 ),
 				'expected' => '¬≤Ôºìùüú',
@@ -232,7 +228,7 @@ class Tests_DB_Charset extends WP_UnitTestCase {
 				),
 			),
 			'utf8mb4_4char_length'                  => array(
-				// utf8mb4 allows 4-byte characters, too
+				// utf8mb4 allows 4-byte characters, too.
 				'charset'  => 'utf8mb4',
 				'value'    => str_repeat( 'ùüú', 11 ),
 				'expected' => str_repeat( 'ùüú', 10 ),
@@ -242,7 +238,7 @@ class Tests_DB_Charset extends WP_UnitTestCase {
 				),
 			),
 			'utf8mb4_4byte_length'                  => array(
-				// utf8mb4 allows 4-byte characters, too
+				// utf8mb4 allows 4-byte characters, too.
 				'charset'  => 'utf8mb4',
 				'value'    => str_repeat( 'ùüú', 10 ),
 				'expected' => 'ùüúùüú',
@@ -326,8 +322,8 @@ class Tests_DB_Charset extends WP_UnitTestCase {
 				'expected' => 'WordPress',
 				'length'   => false,
 				// Don't set 'ascii' => true/false.
-				// That's a different codepath than it being unset even if
-				// three's only only ASCII in the value.
+				// That's a different codepath than it being unset
+				// even if there's only ASCII in the value.
 			),
 			'cp1251_char_length'                    => array(
 				'charset'  => 'cp1251',
@@ -405,7 +401,7 @@ class Tests_DB_Charset extends WP_UnitTestCase {
 				),
 			),
 			'false'                                 => array(
-				// false is a column with no character set (ie, a number column)
+				// False is a column with no character set (i.e. a number column).
 				'charset'  => false,
 				'value'    => 100,
 				'expected' => 100,
@@ -414,13 +410,13 @@ class Tests_DB_Charset extends WP_UnitTestCase {
 		);
 
 		if ( function_exists( 'mb_convert_encoding' ) ) {
-			// big5 is a non-Unicode multibyte charset
-			$utf8      = "a\xe5\x85\xb1b"; // UTF-8 Character 20849
+			// big5 is a non-Unicode multibyte charset.
+			$utf8      = "a\xe5\x85\xb1b"; // UTF-8 Character 20849.
 			$big5      = mb_convert_encoding( $utf8, 'BIG-5', 'UTF-8' );
 			$conv_utf8 = mb_convert_encoding( $big5, 'UTF-8', 'BIG-5' );
-			// Make sure PHP's multibyte conversions are working correctly
+			// Make sure PHP's multibyte conversions are working correctly.
 			$this->assertNotEquals( $utf8, $big5 );
-			$this->assertEquals( $utf8, $conv_utf8 );
+			$this->assertSame( $utf8, $conv_utf8 );
 
 			$fields['big5'] = array(
 				'charset'  => 'big5',
@@ -535,7 +531,7 @@ class Tests_DB_Charset extends WP_UnitTestCase {
 			$charset = $GLOBALS['wpdb']->get_col_charset( $GLOBALS['wpdb']->posts, 'post_content' );
 		}
 
-		// 'value' and 'format' are $data, 'charset' ends up as part of $expected
+		// 'value' and 'format' are $data, 'charset' ends up as part of $expected.
 
 		$no_string_fields = array(
 			'post_parent'   => array(
@@ -563,7 +559,7 @@ class Tests_DB_Charset extends WP_UnitTestCase {
 			),
 		);
 
-		// This is the same data used in process_field_charsets_for_nonexistent_table()
+		// This is the same data used in process_field_charsets_for_nonexistent_table().
 		$non_ascii_string_fields = array(
 			'post_content' => array(
 				'value'   => '¬°foo foo foo!',
@@ -647,11 +643,11 @@ class Tests_DB_Charset extends WP_UnitTestCase {
 			$this->markTestSkipped( 'This test requires a utf8 character set' );
 		}
 
-		// Invalid 3-byte and 4-byte sequences
+		// Invalid 3-byte and 4-byte sequences.
 		$value    = "H‚Ç¨llo\xe0\x80\x80World\xf0\xff\xff\xff¬¢";
 		$expected = 'H‚Ç¨lloWorld¬¢';
 		$actual   = $wpdb->strip_invalid_text_for_column( $wpdb->posts, 'post_content', $value );
-		$this->assertEquals( $expected, $actual );
+		$this->assertSame( $expected, $actual );
 	}
 
 	/**
@@ -758,10 +754,10 @@ class Tests_DB_Charset extends WP_UnitTestCase {
 		self::$_wpdb->query( $create );
 
 		$charset = self::$_wpdb->get_table_charset( $table );
-		$this->assertEquals( $charset, $expected_charset );
+		$this->assertSame( $charset, $expected_charset );
 
 		$charset = self::$_wpdb->get_table_charset( strtoupper( $table ) );
-		$this->assertEquals( $charset, $expected_charset );
+		$this->assertSame( $charset, $expected_charset );
 
 		self::$_wpdb->query( $drop );
 	}
@@ -798,8 +794,8 @@ class Tests_DB_Charset extends WP_UnitTestCase {
 		self::$_wpdb->query( $create );
 
 		foreach ( $expected_charset as $column => $charset ) {
-			$this->assertEquals( $charset, self::$_wpdb->get_col_charset( $table, $column ) );
-			$this->assertEquals( $charset, self::$_wpdb->get_col_charset( strtoupper( $table ), strtoupper( $column ) ) );
+			$this->assertSame( $charset, self::$_wpdb->get_col_charset( $table, $column ) );
+			$this->assertSame( $charset, self::$_wpdb->get_col_charset( strtoupper( $table ), strtoupper( $column ) ) );
 		}
 
 		self::$_wpdb->query( $drop );
@@ -823,7 +819,7 @@ class Tests_DB_Charset extends WP_UnitTestCase {
 
 		$columns = array_keys( $columns );
 		foreach ( $columns as $column => $charset ) {
-			$this->assertEquals( false, self::$_wpdb->get_col_charset( $table, $column ) );
+			$this->assertFalse( self::$_wpdb->get_col_charset( $table, $column ) );
 		}
 
 		self::$_wpdb->query( $drop );
@@ -849,7 +845,7 @@ class Tests_DB_Charset extends WP_UnitTestCase {
 
 		$columns = array_keys( $columns );
 		foreach ( $columns as $column => $charset ) {
-			$this->assertEquals( false, self::$_wpdb->get_col_charset( $table, $column ) );
+			$this->assertFalse( self::$_wpdb->get_col_charset( $table, $column ) );
 		}
 
 		self::$_wpdb->query( $drop );
@@ -864,13 +860,13 @@ class Tests_DB_Charset extends WP_UnitTestCase {
 		$table_name = 'strip_invalid_text_from_query_table';
 		$data       = array(
 			array(
-				// binary tables don't get stripped
-				'( a VARCHAR(50) CHARACTER SET utf8, b BINARY )', // create
-				"('foo\xf0\x9f\x98\x88bar', 'foo')",              // query
-				"('foo\xf0\x9f\x98\x88bar', 'foo')",               // expected result
+				// Binary tables don't get stripped.
+				'( a VARCHAR(50) CHARACTER SET utf8, b BINARY )', // Create.
+				"('foo\xf0\x9f\x98\x88bar', 'foo')",              // Query.
+				"('foo\xf0\x9f\x98\x88bar', 'foo')",              // Expected result.
 			),
 			array(
-				// utf8/utf8mb4 tables default to utf8
+				// utf8/utf8mb4 tables default to utf8.
 				'( a VARCHAR(50) CHARACTER SET utf8, b VARCHAR(50) CHARACTER SET utf8mb4 )',
 				"('foo\xf0\x9f\x98\x88bar', 'foo')",
 				"('foobar', 'foo')",
@@ -905,7 +901,7 @@ class Tests_DB_Charset extends WP_UnitTestCase {
 		self::$_wpdb->query( $create );
 
 		$return = self::$_wpdb->strip_invalid_text_from_query( $query );
-		$this->assertEquals( $expected, $return );
+		$this->assertSame( $expected, $return );
 
 		self::$_wpdb->query( $drop );
 	}
@@ -939,7 +935,7 @@ class Tests_DB_Charset extends WP_UnitTestCase {
 	 */
 	function test_dont_strip_text_from_schema_queries( $query ) {
 		$return = self::$_wpdb->strip_invalid_text_from_query( $query );
-		$this->assertEquals( $query, $return );
+		$this->assertSame( $query, $return );
 	}
 
 	/**
@@ -964,8 +960,8 @@ class Tests_DB_Charset extends WP_UnitTestCase {
 		$data       = array(
 			array(
 				// utf8_bin tables don't need extra sanity checking.
-				'( a VARCHAR(50) COLLATE utf8_bin )', // create
-				true,                                  // expected result
+				'( a VARCHAR(50) COLLATE utf8_bin )', // Create.
+				true,                                 // Expected result.
 			),
 			array(
 				// Neither do utf8_general_ci tables.
@@ -1021,7 +1017,7 @@ class Tests_DB_Charset extends WP_UnitTestCase {
 		self::$_wpdb->query( $create );
 
 		$return = self::$_wpdb->check_safe_collation( $query );
-		$this->assertEquals( $expected, $return );
+		$this->assertSame( $expected, $return );
 
 		foreach ( $always_true as $true_query ) {
 			$return = self::$_wpdb->check_safe_collation( $true_query );
@@ -1034,13 +1030,13 @@ class Tests_DB_Charset extends WP_UnitTestCase {
 	function test_strip_invalid_text_for_column_bails_if_ascii_input_too_long() {
 		global $wpdb;
 
-		// TEXT column
+		// TEXT column.
 		$stripped = $wpdb->strip_invalid_text_for_column( $wpdb->comments, 'comment_content', str_repeat( 'A', 65536 ) );
-		$this->assertEquals( 65535, strlen( $stripped ) );
+		$this->assertSame( 65535, strlen( $stripped ) );
 
-		// VARCHAR column
+		// VARCHAR column.
 		$stripped = $wpdb->strip_invalid_text_for_column( $wpdb->comments, 'comment_agent', str_repeat( 'A', 256 ) );
-		$this->assertEquals( 255, strlen( $stripped ) );
+		$this->assertSame( 255, strlen( $stripped ) );
 	}
 
 	/**
@@ -1057,7 +1053,7 @@ class Tests_DB_Charset extends WP_UnitTestCase {
 
 		self::$_wpdb->query( "DROP TABLE $tablename" );
 
-		$this->assertEquals( $safe_query, $stripped_query );
+		$this->assertSame( $safe_query, $stripped_query );
 	}
 
 	/**
@@ -1079,7 +1075,7 @@ class Tests_DB_Charset extends WP_UnitTestCase {
 
 		self::$_wpdb->charset = $charset;
 
-		$this->assertEquals( $safe_query, $stripped_query );
+		$this->assertSame( $safe_query, $stripped_query );
 	}
 
 	/**
@@ -1088,11 +1084,11 @@ class Tests_DB_Charset extends WP_UnitTestCase {
 	function test_set_charset_changes_the_connection_collation() {
 		self::$_wpdb->set_charset( self::$_wpdb->dbh, 'utf8', 'utf8_general_ci' );
 		$results = self::$_wpdb->get_results( "SHOW VARIABLES WHERE Variable_name='collation_connection'" );
-		$this->assertEquals( 'utf8_general_ci', $results[0]->Value );
+		$this->assertSame( 'utf8_general_ci', $results[0]->Value );
 
 		self::$_wpdb->set_charset( self::$_wpdb->dbh, 'utf8mb4', 'utf8mb4_unicode_ci' );
 		$results = self::$_wpdb->get_results( "SHOW VARIABLES WHERE Variable_name='collation_connection'" );
-		$this->assertEquals( 'utf8mb4_unicode_ci', $results[0]->Value );
+		$this->assertSame( 'utf8mb4_unicode_ci', $results[0]->Value );
 
 		self::$_wpdb->set_charset( self::$_wpdb->dbh );
 	}
diff --git a/tests/dbdelta.php b/tests/dbdelta.php
index 30d0867033..c54f9cc4dd 100644
--- a/tests/dbdelta.php
+++ b/tests/dbdelta.php
@@ -14,6 +14,21 @@ class Tests_dbDelta extends WP_UnitTestCase {
 	 */
 	protected $max_index_length = 191;
 
+	/**
+	 * Database engine used for creating tables.
+	 *
+	 * Prior to MySQL 5.7, InnoDB did not support FULLTEXT indexes, so MyISAM is used instead.
+	 */
+	protected $db_engine = '';
+
+	/**
+	 * Display width for BIGINT data type.
+	 *
+	 * Prior to MySQL 8.0.17, default width of 20 digits was used: BIGINT(20).
+	 * Since MySQL 8.0.17, display width for integer data types is no longer supported.
+	 */
+	protected $bigint_display_width = '';
+
 	/**
 	 * Make sure the upgrade code is loaded before the tests are run.
 	 */
@@ -21,7 +36,7 @@ class Tests_dbDelta extends WP_UnitTestCase {
 
 		parent::setUpBeforeClass();
 
-		require_once( ABSPATH . 'wp-admin/includes/upgrade.php' );
+		require_once ABSPATH . 'wp-admin/includes/upgrade.php';
 	}
 
 	/**
@@ -31,20 +46,33 @@ class Tests_dbDelta extends WP_UnitTestCase {
 
 		global $wpdb;
 
-		// Forcing MyISAM, because InnoDB only started supporting FULLTEXT indexes in MySQL 5.7.
+		$db_version = $wpdb->db_version();
+
+		if ( version_compare( $db_version, '5.7', '<' ) ) {
+			// Prior to MySQL 5.7, InnoDB did not support FULLTEXT indexes, so MyISAM is used instead.
+			$this->db_engine = 'ENGINE=MyISAM';
+		}
+
+		if ( version_compare( $db_version, '8.0.17', '<' ) ) {
+			// Prior to MySQL 8.0.17, default width of 20 digits was used: BIGINT(20).
+			$this->bigint_display_width = '(20)';
+		}
+
 		$wpdb->query(
 			$wpdb->prepare(
 				"
-				CREATE TABLE {$wpdb->prefix}dbdelta_test (
-					id bigint(20) NOT NULL AUTO_INCREMENT,
+				CREATE TABLE {$wpdb->prefix}dbdelta_test (" .
+					// phpcs:ignore WordPress.DB.PreparedSQL.InterpolatedNotPrepared
+					"id bigint{$this->bigint_display_width} NOT NULL AUTO_INCREMENT,
 					column_1 varchar(255) NOT NULL,
 					column_2 text,
 					column_3 blob,
 					PRIMARY KEY  (id),
 					KEY key_1 (column_1(%d)),
 					KEY compound_key (id,column_1(%d)),
-					FULLTEXT KEY fulltext_key (column_1)
-				) ENGINE=MyISAM
+					FULLTEXT KEY fulltext_key (column_1)" .
+					// phpcs:ignore WordPress.DB.PreparedSQL.InterpolatedNotPrepared
+				") {$this->db_engine}
 				",
 				$this->max_index_length,
 				$this->max_index_length
@@ -78,7 +106,7 @@ class Tests_dbDelta extends WP_UnitTestCase {
 
 		$updates = dbDelta(
 			"CREATE TABLE {$wpdb->prefix}dbdelta_create_test (
-				id bigint(20) NOT NULL AUTO_INCREMENT,
+				id bigint{$this->bigint_display_width} NOT NULL AUTO_INCREMENT,
 				column_1 varchar(255) NOT NULL,
 				PRIMARY KEY  (id)
 			);"
@@ -88,9 +116,9 @@ class Tests_dbDelta extends WP_UnitTestCase {
 			"{$wpdb->prefix}dbdelta_create_test" => "Created table {$wpdb->prefix}dbdelta_create_test",
 		);
 
-		$this->assertEquals( $expected, $updates );
+		$this->assertSame( $expected, $updates );
 
-		$this->assertEquals(
+		$this->assertSame(
 			"{$wpdb->prefix}dbdelta_create_test",
 			$wpdb->get_var(
 				$wpdb->prepare(
@@ -113,7 +141,7 @@ class Tests_dbDelta extends WP_UnitTestCase {
 		$updates = dbDelta(
 			"
 			CREATE TABLE {$wpdb->prefix}dbdelta_test (
-				id bigint(20) NOT NULL AUTO_INCREMENT,
+				id bigint{$this->bigint_display_width} NOT NULL AUTO_INCREMENT,
 				column_1 varchar(255) NOT NULL,
 				PRIMARY KEY  (id),
 				KEY key_1 (column_1($this->max_index_length)),
@@ -122,7 +150,7 @@ class Tests_dbDelta extends WP_UnitTestCase {
 			"
 		);
 
-		$this->assertEquals( array(), $updates );
+		$this->assertSame( array(), $updates );
 	}
 
 	/**
@@ -132,7 +160,7 @@ class Tests_dbDelta extends WP_UnitTestCase {
 
 		global $wpdb;
 
-		// id: bigint(20) => int(11)
+		// id: bigint => int(11)
 		$updates = dbDelta(
 			"
 			CREATE TABLE {$wpdb->prefix}dbdelta_test (
@@ -145,10 +173,10 @@ class Tests_dbDelta extends WP_UnitTestCase {
 			"
 		);
 
-		$this->assertEquals(
+		$this->assertSame(
 			array(
 				"{$wpdb->prefix}dbdelta_test.id"
-					=> "Changed type of {$wpdb->prefix}dbdelta_test.id from bigint(20) to int(11)",
+					=> "Changed type of {$wpdb->prefix}dbdelta_test.id from bigint{$this->bigint_display_width} to int(11)",
 			),
 			$updates
 		);
@@ -164,7 +192,7 @@ class Tests_dbDelta extends WP_UnitTestCase {
 		$updates = dbDelta(
 			"
 			CREATE TABLE {$wpdb->prefix}dbdelta_test (
-				id bigint(20) NOT NULL AUTO_INCREMENT,
+				id bigint{$this->bigint_display_width} NOT NULL AUTO_INCREMENT,
 				column_1 varchar(255) NOT NULL,
 				extra_col longtext,
 				PRIMARY KEY  (id),
@@ -174,7 +202,7 @@ class Tests_dbDelta extends WP_UnitTestCase {
 			"
 		);
 
-		$this->assertEquals(
+		$this->assertSame(
 			array(
 				"{$wpdb->prefix}dbdelta_test.extra_col"
 					=> "Added column {$wpdb->prefix}dbdelta_test.extra_col",
@@ -195,11 +223,11 @@ class Tests_dbDelta extends WP_UnitTestCase {
 
 		global $wpdb;
 
-		// No column column_1
+		// No column column_1.
 		$updates = dbDelta(
 			"
 			CREATE TABLE {$wpdb->prefix}dbdelta_test (
-				id bigint(20) NOT NULL AUTO_INCREMENT,
+				id bigint{$this->bigint_display_width} NOT NULL AUTO_INCREMENT,
 				PRIMARY KEY  (id),
 				KEY key_1 (column_1($this->max_index_length)),
 				KEY compound_key (id,column_1($this->max_index_length))
@@ -207,7 +235,7 @@ class Tests_dbDelta extends WP_UnitTestCase {
 			"
 		);
 
-		$this->assertEquals( array(), $updates );
+		$this->assertSame( array(), $updates );
 
 		$this->assertTableHasColumn( 'column_1', $wpdb->prefix . 'dbdelta_test' );
 	}
@@ -219,11 +247,11 @@ class Tests_dbDelta extends WP_UnitTestCase {
 
 		global $wpdb;
 
-		// Added column extra_col
+		// Added column extra_col.
 		$updates = dbDelta(
 			"
 			CREATE TABLE {$wpdb->prefix}dbdelta_test (
-				id bigint(20) NOT NULL AUTO_INCREMENT,
+				id bigint{$this->bigint_display_width} NOT NULL AUTO_INCREMENT,
 				column_1 varchar(255) NOT NULL,
 				extra_col longtext,
 				PRIMARY KEY  (id),
@@ -234,7 +262,7 @@ class Tests_dbDelta extends WP_UnitTestCase {
 			false // Don't execute.
 		);
 
-		$this->assertEquals(
+		$this->assertSame(
 			array(
 				"{$wpdb->prefix}dbdelta_test.extra_col"
 					=> "Added column {$wpdb->prefix}dbdelta_test.extra_col",
@@ -255,7 +283,7 @@ class Tests_dbDelta extends WP_UnitTestCase {
 			"INSERT INTO {$wpdb->prefix}dbdelta_test (column_1) VALUES ('wcphilly2015')"
 		);
 
-		$this->assertEquals(
+		$this->assertSame(
 			array(),
 			$insert
 		);
@@ -275,7 +303,7 @@ class Tests_dbDelta extends WP_UnitTestCase {
 		$updates = dbDelta(
 			"
 			CREATE TABLE {$wpdb->prefix}dbdelta_test (
-				id bigint(20) NOT NULL AUTO_INCREMENT,
+				id bigint{$this->bigint_display_width} NOT NULL AUTO_INCREMENT,
 				column_1 varchar(255) NOT NULL,
 				PRIMARY KEY  (id),
 				KEY key_1 (column_1($this->max_index_length)),
@@ -381,7 +409,7 @@ class Tests_dbDelta extends WP_UnitTestCase {
 			$this->markTestSkipped( 'This test requires utf8mb4 support in MySQL.' );
 		}
 
-		// This table needs to be actually created
+		// This table needs to be actually created.
 		remove_filter( 'query', array( $this, '_create_temporary_tables' ) );
 		remove_filter( 'query', array( $this, '_drop_temporary_tables' ) );
 
@@ -420,7 +448,7 @@ class Tests_dbDelta extends WP_UnitTestCase {
 		$result = dbDelta(
 			"
 			CREATE TABLE {$wpdb->prefix}dbdelta_test (
-				id bigint(20) NOT NULL AUTO_INCREMENT,
+				id bigint{$this->bigint_display_width} NOT NULL AUTO_INCREMENT,
 				column_1 varchar(255) NOT NULL,
 				column_2 tinytext,
 				column_3 blob,
@@ -428,7 +456,7 @@ class Tests_dbDelta extends WP_UnitTestCase {
 				KEY key_1 (column_1({$this->max_index_length})),
 				KEY compound_key (id,column_1($this->max_index_length)),
 				FULLTEXT KEY fulltext_key (column_1)
-			) ENGINE=MyISAM
+			) {$this->db_engine}
 			",
 			false
 		);
@@ -445,7 +473,7 @@ class Tests_dbDelta extends WP_UnitTestCase {
 		$result = dbDelta(
 			"
 			CREATE TABLE {$wpdb->prefix}dbdelta_test (
-				id bigint(20) NOT NULL AUTO_INCREMENT,
+				id bigint{$this->bigint_display_width} NOT NULL AUTO_INCREMENT,
 				column_1 varchar(255) NOT NULL,
 				column_2 text,
 				column_3 tinyblob,
@@ -453,7 +481,7 @@ class Tests_dbDelta extends WP_UnitTestCase {
 				KEY key_1 (column_1({$this->max_index_length})),
 				KEY compound_key (id,column_1($this->max_index_length)),
 				FULLTEXT KEY fulltext_key (column_1)
-			) ENGINE=MyISAM
+			) {$this->db_engine}
 			",
 			false
 		);
@@ -470,7 +498,7 @@ class Tests_dbDelta extends WP_UnitTestCase {
 		$result = dbDelta(
 			"
 			CREATE TABLE {$wpdb->prefix}dbdelta_test (
-				id bigint(20) NOT NULL AUTO_INCREMENT,
+				id bigint{$this->bigint_display_width} NOT NULL AUTO_INCREMENT,
 				column_1 varchar(255) NOT NULL,
 				column_2 bigtext,
 				column_3 blob,
@@ -478,7 +506,7 @@ class Tests_dbDelta extends WP_UnitTestCase {
 				KEY key_1 (column_1({$this->max_index_length})),
 				KEY compound_key (id,column_1($this->max_index_length)),
 				FULLTEXT KEY fulltext_key (column_1)
-			) ENGINE=MyISAM
+			) {$this->db_engine}
 			",
 			false
 		);
@@ -501,7 +529,7 @@ class Tests_dbDelta extends WP_UnitTestCase {
 		$result = dbDelta(
 			"
 			CREATE TABLE {$wpdb->prefix}dbdelta_test (
-				id bigint(20) NOT NULL AUTO_INCREMENT,
+				id bigint{$this->bigint_display_width} NOT NULL AUTO_INCREMENT,
 				column_1 varchar(255) NOT NULL,
 				column_2 text,
 				column_3 mediumblob,
@@ -509,7 +537,7 @@ class Tests_dbDelta extends WP_UnitTestCase {
 				KEY key_1 (column_1({$this->max_index_length})),
 				KEY compound_key (id,column_1($this->max_index_length)),
 				FULLTEXT KEY fulltext_key (column_1)
-			) ENGINE=MyISAM
+			) {$this->db_engine}
 			",
 			false
 		);
@@ -531,7 +559,7 @@ class Tests_dbDelta extends WP_UnitTestCase {
 
 		$schema = "
 			CREATE TABLE {$wpdb->prefix}dbdelta_test2 (
-				`id` bigint(20) NOT NULL AUTO_INCREMENT,
+				`id` bigint{$this->bigint_display_width} NOT NULL AUTO_INCREMENT,
 				`column_1` varchar(255) NOT NULL,
 				PRIMARY KEY  (id),
 				KEY compound_key (id,column_1($this->max_index_length))
@@ -554,18 +582,27 @@ class Tests_dbDelta extends WP_UnitTestCase {
 	function test_spatial_indices() {
 		global $wpdb;
 
-		if ( version_compare( $wpdb->db_version(), '5.4', '<' ) ) {
+		$db_version = $wpdb->db_version();
+
+		if ( version_compare( $db_version, '5.4', '<' ) ) {
 			$this->markTestSkipped( 'Spatial indices require MySQL 5.4 and above.' );
 		}
 
+		$geomcollection_name = 'geomcollection';
+
+		if ( version_compare( $db_version, '8.0.11', '<' ) ) {
+			// Prior to MySQL 8.0.11, GeometryCollection data type name was used.
+			$geomcollection_name = 'geometrycollection';
+		}
+
 		$schema =
 			"
 			CREATE TABLE {$wpdb->prefix}spatial_index_test (
-				non_spatial bigint(20) unsigned NOT NULL,
-				spatial_value geometrycollection NOT NULL,
+				non_spatial bigint{$this->bigint_display_width} unsigned NOT NULL,
+				spatial_value {$geomcollection_name} NOT NULL,
 				KEY non_spatial (non_spatial),
 				SPATIAL KEY spatial_key (spatial_value)
-			) ENGINE=MyISAM;
+			) {$this->db_engine};
 			";
 
 		// phpcs:ignore WordPress.DB.PreparedSQL.NotPrepared
@@ -578,13 +615,13 @@ class Tests_dbDelta extends WP_UnitTestCase {
 		$schema =
 			"
 			CREATE TABLE {$wpdb->prefix}spatial_index_test (
-				non_spatial bigint(20) unsigned NOT NULL,
-				spatial_value geometrycollection NOT NULL,
-				spatial_value2 geometrycollection NOT NULL,
+				non_spatial bigint{$this->bigint_display_width} unsigned NOT NULL,
+				spatial_value {$geomcollection_name} NOT NULL,
+				spatial_value2 {$geomcollection_name} NOT NULL,
 				KEY non_spatial (non_spatial),
 				SPATIAL KEY spatial_key (spatial_value)
 				SPATIAL KEY spatial_key2 (spatial_value2)
-			) ENGINE=MyISAM;
+			) {$this->db_engine};
 			";
 
 		$updates = dbDelta( $schema, false );
@@ -608,7 +645,7 @@ class Tests_dbDelta extends WP_UnitTestCase {
 
 		$schema = "
 			CREATE TABLE {$wpdb->prefix}dbdelta_test2 (
-				`id` bigint(20) NOT NULL AUTO_INCREMENT,
+				`id` bigint{$this->bigint_display_width} NOT NULL AUTO_INCREMENT,
 				`references` varchar(255) NOT NULL,
 				PRIMARY KEY  (`id`),
 				KEY `compound_key` (`id`,`references`($this->max_index_length))
@@ -638,7 +675,7 @@ class Tests_dbDelta extends WP_UnitTestCase {
 		$updates = dbDelta(
 			"
 			CREATE TABLE {$wpdb->prefix}dbdelta_test (
-				id bigint(20) NOT NULL AUTO_INCREMENT,
+				id bigint{$this->bigint_display_width} NOT NULL AUTO_INCREMENT,
 				column_1 varchar(255) NOT NULL,
 				column_2 text,
 				column_3 blob,
@@ -648,7 +685,7 @@ class Tests_dbDelta extends WP_UnitTestCase {
 				KEY compound_key (id , column_1($this->max_index_length)),
 				KEY compound_key2 (id,`references`($this->max_index_length)),
 				FULLTEXT KEY fulltext_key (column_1)
-			) ENGINE=MyISAM
+			) {$this->db_engine}
 			"
 		);
 
@@ -682,7 +719,7 @@ class Tests_dbDelta extends WP_UnitTestCase {
 
 		$schema = "
 			CREATE TABLE {$wpdb->prefix}dbdelta_test (
-				id bigint(20) NOT NULL AUTO_INCREMENT,
+				id bigint{$this->bigint_display_width} NOT NULL AUTO_INCREMENT,
 				column_1 varchar(255) NOT NULL,
 				column_2 text,
 				column_3 blob,
@@ -694,7 +731,7 @@ class Tests_dbDelta extends WP_UnitTestCase {
 				UNIQUE KEY key_3 (column_1($this->max_index_length)),
 				UNIQUE INDEX key_4 (column_1($this->max_index_length)),
 				FULLTEXT INDEX key_5 (column_1),
-			) ENGINE=MyISAM
+			) {$this->db_engine}
 		";
 
 		$creates = dbDelta( $schema );
@@ -721,7 +758,7 @@ class Tests_dbDelta extends WP_UnitTestCase {
 		$updates = dbDelta(
 			"
 			CREATE TABLE {$wpdb->prefix}dbdelta_test (
-				id bigint(20) NOT NULL AUTO_INCREMENT,
+				id bigint{$this->bigint_display_width} NOT NULL AUTO_INCREMENT,
 				column_1 varchar(255) NOT NULL,
 				column_2 text,
 				column_3 blob,
@@ -729,7 +766,7 @@ class Tests_dbDelta extends WP_UnitTestCase {
 				INDEX key_1 (column_1($this->max_index_length)),
 				INDEX compound_key (id,column_1($this->max_index_length)),
 				FULLTEXT INDEX fulltext_key (column_1)
-			) ENGINE=MyISAM
+			) {$this->db_engine}
 			"
 		);
 
@@ -744,7 +781,7 @@ class Tests_dbDelta extends WP_UnitTestCase {
 
 		$schema = "
 			CREATE TABLE {$wpdb->prefix}dbdelta_test (
-				id bigint(20) NOT NULL AUTO_INCREMENT,
+				id bigint{$this->bigint_display_width} NOT NULL AUTO_INCREMENT,
 				column_1 varchar(255) NOT NULL,
 				column_2 text,
 				column_3 blob,
@@ -754,7 +791,7 @@ class Tests_dbDelta extends WP_UnitTestCase {
 				FULLTEXT KEY fulltext_key (column_1),
 				KEY key_2 (column_1(10)),
 				KEY key_3 (column_2(100),column_1(10)),
-			) ENGINE=MyISAM
+			) {$this->db_engine}
 		";
 
 		$creates = dbDelta( $schema );
@@ -779,7 +816,7 @@ class Tests_dbDelta extends WP_UnitTestCase {
 		$updates = dbDelta(
 			"
 			CREATE TABLE {$wpdb->prefix}dbdelta_test (
-				id bigint(20) NOT NULL AUTO_INCREMENT,
+				id bigint{$this->bigint_display_width} NOT NULL AUTO_INCREMENT,
 				column_1 varchar(255) NOT NULL,
 				column_2 text,
 				column_3 blob,
@@ -787,7 +824,7 @@ class Tests_dbDelta extends WP_UnitTestCase {
 				KEY key_1 (column_1($this->max_index_length) DESC),
 				KEY compound_key (id,column_1($this->max_index_length) ASC),
 				FULLTEXT KEY fulltext_key (column_1)
-			) ENGINE=MyISAM
+			) {$this->db_engine}
 			"
 		);
 
@@ -803,7 +840,7 @@ class Tests_dbDelta extends WP_UnitTestCase {
 		$updates = dbDelta(
 			"
 			CREATE TABLE {$wpdb->prefix}dbdelta_test (
-				id bigint(20) NOT NULL AUTO_INCREMENT,
+				id bigint{$this->bigint_display_width} NOT NULL AUTO_INCREMENT,
 				column_1 varchar(255) NOT NULL,
 				column_2 text,
 				column_3 blob,
@@ -811,7 +848,7 @@ class Tests_dbDelta extends WP_UnitTestCase {
 				KEY key_1 (column_1($this->max_index_length)),
 				KEY compound_key (id,column_1($this->max_index_length)),
 				FULLTEXT KEY fulltext_key (column_1)
-			) ENGINE=MyISAM
+			) {$this->db_engine}
 			"
 		);
 
@@ -827,7 +864,7 @@ class Tests_dbDelta extends WP_UnitTestCase {
 		$updates = dbDelta(
 			"
 			CREATE TABLE {$wpdb->prefix}dbdelta_test (
-				id bigint(20) NOT NULL AUTO_INCREMENT,
+				id bigint{$this->bigint_display_width} NOT NULL AUTO_INCREMENT,
 				column_1 varchar(255) NOT NULL,
 				column_2 text,
 				column_3 blob,
@@ -835,7 +872,7 @@ class Tests_dbDelta extends WP_UnitTestCase {
 				KEY key_1        (         column_1($this->max_index_length)),
 				KEY compound_key (id,      column_1($this->max_index_length)),
 				FULLTEXT KEY fulltext_key (column_1)
-			) ENGINE=MyISAM
+			) {$this->db_engine}
 			"
 		);
 
@@ -851,7 +888,7 @@ class Tests_dbDelta extends WP_UnitTestCase {
 		$updates = dbDelta(
 			"
 			CREATE TABLE {$wpdb->prefix}dbdelta_test (
-				id bigint(20) NOT NULL AUTO_INCREMENT,
+				id bigint{$this->bigint_display_width} NOT NULL AUTO_INCREMENT,
 				column_1 varchar(255) NOT NULL,
 				column_2 text,
 				column_3 blob,
@@ -859,7 +896,7 @@ class Tests_dbDelta extends WP_UnitTestCase {
 				key key_1 (column_1($this->max_index_length)),
 				key compound_key (id,column_1($this->max_index_length)),
 				FULLTEXT KEY fulltext_key (column_1)
-			) ENGINE=MyISAM
+			) {$this->db_engine}
 			"
 		);
 
@@ -875,7 +912,7 @@ class Tests_dbDelta extends WP_UnitTestCase {
 		$updates = dbDelta(
 			"
 			CREATE TABLE {$wpdb->prefix}dbdelta_test (
-				id bigint(20) NOT NULL AUTO_INCREMENT,
+				id bigint{$this->bigint_display_width} NOT NULL AUTO_INCREMENT,
 				column_1 varchar(255) NOT NULL,
 				column_2 text,
 				column_3 blob,
@@ -883,7 +920,7 @@ class Tests_dbDelta extends WP_UnitTestCase {
 				KEY KEY_1 (column_1($this->max_index_length)),
 				KEY compOUND_key (id,column_1($this->max_index_length)),
 				FULLTEXT KEY FULLtext_kEY (column_1)
-			) ENGINE=MyISAM
+			) {$this->db_engine}
 			",
 			false
 		);
@@ -900,7 +937,7 @@ class Tests_dbDelta extends WP_UnitTestCase {
 		$updates = dbDelta(
 			"
 			CREATE TABLE {$wpdb->prefix}dbdelta_test (
-				id bigint(20) NOT NULL AUTO_INCREMENT,
+				id bigint{$this->bigint_display_width} NOT NULL AUTO_INCREMENT,
 				column_1 varchar(255) NOT NULL,
 				column_2 text,
 				column_3 blob,
@@ -908,7 +945,7 @@ class Tests_dbDelta extends WP_UnitTestCase {
 				KEY key_1 (column_1({$this->max_index_length})),
 				KEY compound_key (id,column_1($this->max_index_length)),
 				FULLTEXT KEY fulltext_key (column_1)
-			) ENGINE=MyISAM
+			) {$this->db_engine}
 			",
 			false
 		);
@@ -925,7 +962,7 @@ class Tests_dbDelta extends WP_UnitTestCase {
 		$updates = dbDelta(
 			"
 			CREATE TABLE {$wpdb->prefix}dbdelta_test (
-				id bigint(20) NOT NULL AUTO_INCREMENT,
+				id bigint{$this->bigint_display_width} NOT NULL AUTO_INCREMENT,
 				column_1 varchar(255) NOT NULL,
 				column_2 text,
 				column_3 blob,
@@ -934,7 +971,7 @@ class Tests_dbDelta extends WP_UnitTestCase {
 				KEY compound_key (id,column_1($this->max_index_length)),
 				KEY changing_key_length (column_1(20)),
 				FULLTEXT KEY fulltext_key (column_1)
-			) ENGINE=MyISAM
+			) {$this->db_engine}
 			"
 		);
 
@@ -948,7 +985,7 @@ class Tests_dbDelta extends WP_UnitTestCase {
 		$updates = dbDelta(
 			"
 			CREATE TABLE {$wpdb->prefix}dbdelta_test (
-				id bigint(20) NOT NULL AUTO_INCREMENT,
+				id bigint{$this->bigint_display_width} NOT NULL AUTO_INCREMENT,
 				column_1 varchar(255) NOT NULL,
 				column_2 text,
 				column_3 blob,
@@ -957,7 +994,7 @@ class Tests_dbDelta extends WP_UnitTestCase {
 				KEY compound_key (id,column_1($this->max_index_length)),
 				KEY changing_key_length (column_1(50)),
 				FULLTEXT KEY fulltext_key (column_1)
-			) ENGINE=MyISAM
+			) {$this->db_engine}
 			"
 		);
 
@@ -966,7 +1003,7 @@ class Tests_dbDelta extends WP_UnitTestCase {
 		$updates = dbDelta(
 			"
 			CREATE TABLE {$wpdb->prefix}dbdelta_test (
-				id bigint(20) NOT NULL AUTO_INCREMENT,
+				id bigint{$this->bigint_display_width} NOT NULL AUTO_INCREMENT,
 				column_1 varchar(255) NOT NULL,
 				column_2 text,
 				column_3 blob,
@@ -975,7 +1012,7 @@ class Tests_dbDelta extends WP_UnitTestCase {
 				KEY compound_key (id,column_1($this->max_index_length)),
 				KEY changing_key_length (column_1(1)),
 				FULLTEXT KEY fulltext_key (column_1)
-			) ENGINE=MyISAM
+			) {$this->db_engine}
 			"
 		);
 
@@ -984,7 +1021,7 @@ class Tests_dbDelta extends WP_UnitTestCase {
 		$updates = dbDelta(
 			"
 			CREATE TABLE {$wpdb->prefix}dbdelta_test (
-				id bigint(20) NOT NULL AUTO_INCREMENT,
+				id bigint{$this->bigint_display_width} NOT NULL AUTO_INCREMENT,
 				column_1 varchar(255) NOT NULL,
 				column_2 text,
 				column_3 blob,
@@ -993,7 +1030,7 @@ class Tests_dbDelta extends WP_UnitTestCase {
 				KEY compound_key (id,column_1),
 				KEY changing_key_length (column_1),
 				FULLTEXT KEY fulltext_key (column_1)
-			) ENGINE=MyISAM
+			) {$this->db_engine}
 			"
 		);
 
diff --git a/tests/dependencies.php b/tests/dependencies.php
index 9a2bd75ca5..5ec6f2b276 100644
--- a/tests/dependencies.php
+++ b/tests/dependencies.php
@@ -13,7 +13,7 @@ class Tests_Dependencies extends WP_UnitTestCase {
 		$this->assertInstanceOf( '_WP_Dependency', $dep->query( 'one' ) );
 		$this->assertInstanceOf( '_WP_Dependency', $dep->query( 'two' ) );
 
-		//Cannot reuse names
+		// Cannot reuse names.
 		$this->assertFalse( $dep->add( 'one', '' ) );
 	}
 
@@ -76,12 +76,12 @@ class Tests_Dependencies extends WP_UnitTestCase {
 		$dep->enqueue( 'one?arg' );
 		$this->assertTrue( $dep->query( 'one', 'queue' ) );
 		$this->assertFalse( $dep->query( 'two', 'queue' ) );
-		$this->assertEquals( 'arg', $dep->args['one'] );
+		$this->assertSame( 'arg', $dep->args['one'] );
 
 		$dep->enqueue( 'two?arg' );
 		$this->assertTrue( $dep->query( 'one', 'queue' ) );
 		$this->assertTrue( $dep->query( 'two', 'queue' ) );
-		$this->assertEquals( 'arg', $dep->args['two'] );
+		$this->assertSame( 'arg', $dep->args['two'] );
 	}
 
 	function test_dequeue_args() {
@@ -94,8 +94,8 @@ class Tests_Dependencies extends WP_UnitTestCase {
 		$dep->enqueue( 'two?arg' );
 		$this->assertTrue( $dep->query( 'one', 'queue' ) );
 		$this->assertTrue( $dep->query( 'two', 'queue' ) );
-		$this->assertEquals( 'arg', $dep->args['one'] );
-		$this->assertEquals( 'arg', $dep->args['two'] );
+		$this->assertSame( 'arg', $dep->args['one'] );
+		$this->assertSame( 'arg', $dep->args['two'] );
 
 		$dep->dequeue( 'one' );
 		$this->assertFalse( $dep->query( 'one', 'queue' ) );
diff --git a/tests/dependencies/jquery.php b/tests/dependencies/jquery.php
index 30ea876e2f..2ca47af409 100644
--- a/tests/dependencies/jquery.php
+++ b/tests/dependencies/jquery.php
@@ -21,20 +21,26 @@ class Tests_Dependencies_jQuery extends WP_UnitTestCase {
 
 		$object = $scripts->query( 'jquery', 'registered' );
 		$this->assertInstanceOf( '_WP_Dependency', $object );
-		$this->assertEqualSets( $object->deps, array_keys( $jquery_scripts ) );
+
+		// As of 5.5 jQuery 1.12.4 is loaded without Migrate 1.4.1.
+		// Disable, but keep the following test for 5.6 when jQuery would be updated to 3.5.1+ and
+		// the latest Migrate will be used.
+		/*
+		$this->assertSameSets( $object->deps, array_keys( $jquery_scripts ) );
 		foreach ( $object->deps as $dep ) {
 			$o = $scripts->query( $dep, 'registered' );
 			$this->assertInstanceOf( '_WP_Dependency', $object );
 			$this->assertTrue( isset( $jquery_scripts[ $dep ] ) );
-			$this->assertEquals( $jquery_scripts[ $dep ], $o->src );
+			$this->assertSame( $jquery_scripts[ $dep ], $o->src );
 		}
+		*/
 	}
 
 	function test_presence_of_jquery_no_conflict() {
 		$contents   = trim( file_get_contents( ABSPATH . WPINC . '/js/jquery/jquery.js' ) );
 		$noconflict = 'jQuery.noConflict();';
 		$end        = substr( $contents, - strlen( $noconflict ) );
-		$this->assertEquals( $noconflict, $end );
+		$this->assertSame( $noconflict, $end );
 	}
 
 	/**
@@ -113,7 +119,8 @@ class Tests_Dependencies_jQuery extends WP_UnitTestCase {
 			$scripts->add_data( $dep, 'group', 1 );
 		}
 
-		$this->expectOutputRegex( '/^(?:<script[^>]+><\/script>\\n){2}$/' );
+		// Match only one script tag for 5.5, revert to `{2}` for 5.6.
+		$this->expectOutputRegex( '/^(?:<script[^>]+><\/script>\\n){1}$/' );
 
 		$scripts->do_items( false, 0 );
 		$this->assertNotContains( 'jquery', $scripts->done );
@@ -122,7 +129,11 @@ class Tests_Dependencies_jQuery extends WP_UnitTestCase {
 
 		$scripts->do_items( false, 1 );
 		$this->assertContains( 'jquery', $scripts->done );
+
+		// Disable for 5.5 but keep for use in 5.6. See test_location_of_jquery() above.
+		/*
 		$this->assertContains( 'jquery-core', $scripts->done, 'jquery-core in footer' );
 		$this->assertContains( 'jquery-migrate', $scripts->done, 'jquery-migrate in footer' );
+		*/
 	}
 }
diff --git a/tests/dependencies/scripts.php b/tests/dependencies/scripts.php
index 2b3b4538d8..4960e8ef8e 100644
--- a/tests/dependencies/scripts.php
+++ b/tests/dependencies/scripts.php
@@ -17,7 +17,7 @@ class Tests_Dependencies_Scripts extends WP_UnitTestCase {
 		$GLOBALS['wp_scripts']->default_version = get_bloginfo( 'version' );
 
 		$this->wp_scripts_print_translations_output  = <<<JS
-<script type='text/javascript'>
+<script type='text/javascript' id='__HANDLE__-js-translations'>
 ( function( domain, translations ) {
 	var localeData = translations.locale_data[ domain ] || translations.locale_data.messages;
 	localeData[""].domain = domain;
@@ -46,15 +46,15 @@ JS;
 		wp_enqueue_script( 'empty-deps-null-version', 'example.com', array(), null );
 
 		$ver       = get_bloginfo( 'version' );
-		$expected  = "<script type='text/javascript' src='http://example.com?ver=$ver'></script>\n";
-		$expected .= "<script type='text/javascript' src='http://example.com?ver=$ver'></script>\n";
-		$expected .= "<script type='text/javascript' src='http://example.com?ver=1.2'></script>\n";
-		$expected .= "<script type='text/javascript' src='http://example.com'></script>\n";
+		$expected  = "<script type='text/javascript' src='http://example.com?ver=$ver' id='no-deps-no-version-js'></script>\n";
+		$expected .= "<script type='text/javascript' src='http://example.com?ver=$ver' id='empty-deps-no-version-js'></script>\n";
+		$expected .= "<script type='text/javascript' src='http://example.com?ver=1.2' id='empty-deps-version-js'></script>\n";
+		$expected .= "<script type='text/javascript' src='http://example.com' id='empty-deps-null-version-js'></script>\n";
 
-		$this->assertEquals( $expected, get_echo( 'wp_print_scripts' ) );
+		$this->assertSame( $expected, get_echo( 'wp_print_scripts' ) );
 
-		// No scripts left to print
-		$this->assertEquals( '', get_echo( 'wp_print_scripts' ) );
+		// No scripts left to print.
+		$this->assertSame( '', get_echo( 'wp_print_scripts' ) );
 	}
 
 	/**
@@ -69,9 +69,9 @@ JS;
 		wp_enqueue_script( 'empty-deps-no-version', 'example.com' );
 
 		$ver      = get_bloginfo( 'version' );
-		$expected = "<script src='http://example.com?ver=$ver'></script>\n";
+		$expected = "<script src='http://example.com?ver=$ver' id='empty-deps-no-version-js'></script>\n";
 
-		$this->assertEquals( $expected, get_echo( 'wp_print_scripts' ) );
+		$this->assertSame( $expected, get_echo( 'wp_print_scripts' ) );
 	}
 
 	/**
@@ -81,41 +81,41 @@ JS;
 	 * @ticket 16560
 	 */
 	public function test_protocols() {
-		// Init
+		// Init.
 		global $wp_scripts;
 		$base_url_backup      = $wp_scripts->base_url;
 		$wp_scripts->base_url = 'http://example.com/wordpress';
 		$expected             = '';
 		$ver                  = get_bloginfo( 'version' );
 
-		// Try with an HTTP reference
+		// Try with an HTTP reference.
 		wp_enqueue_script( 'jquery-http', 'http://ajax.googleapis.com/ajax/libs/jquery/1.7.2/jquery.min.js' );
-		$expected .= "<script type='text/javascript' src='http://ajax.googleapis.com/ajax/libs/jquery/1.7.2/jquery.min.js?ver=$ver'></script>\n";
+		$expected .= "<script type='text/javascript' src='http://ajax.googleapis.com/ajax/libs/jquery/1.7.2/jquery.min.js?ver=$ver' id='jquery-http-js'></script>\n";
 
-		// Try with an HTTPS reference
+		// Try with an HTTPS reference.
 		wp_enqueue_script( 'jquery-https', 'https://ajax.googleapis.com/ajax/libs/jquery/1.7.2/jquery.min.js' );
-		$expected .= "<script type='text/javascript' src='https://ajax.googleapis.com/ajax/libs/jquery/1.7.2/jquery.min.js?ver=$ver'></script>\n";
+		$expected .= "<script type='text/javascript' src='https://ajax.googleapis.com/ajax/libs/jquery/1.7.2/jquery.min.js?ver=$ver' id='jquery-https-js'></script>\n";
 
-		// Try with an automatic protocol reference (//)
+		// Try with an automatic protocol reference (//).
 		wp_enqueue_script( 'jquery-doubleslash', '//ajax.googleapis.com/ajax/libs/jquery/1.7.2/jquery.min.js' );
-		$expected .= "<script type='text/javascript' src='//ajax.googleapis.com/ajax/libs/jquery/1.7.2/jquery.min.js?ver=$ver'></script>\n";
+		$expected .= "<script type='text/javascript' src='//ajax.googleapis.com/ajax/libs/jquery/1.7.2/jquery.min.js?ver=$ver' id='jquery-doubleslash-js'></script>\n";
 
-		// Try with a local resource and an automatic protocol reference (//)
+		// Try with a local resource and an automatic protocol reference (//).
 		$url = '//my_plugin/script.js';
 		wp_enqueue_script( 'plugin-script', $url );
-		$expected .= "<script type='text/javascript' src='$url?ver=$ver'></script>\n";
+		$expected .= "<script type='text/javascript' src='$url?ver=$ver' id='plugin-script-js'></script>\n";
 
-		// Try with a bad protocol
+		// Try with a bad protocol.
 		wp_enqueue_script( 'jquery-ftp', 'ftp://ajax.googleapis.com/ajax/libs/jquery/1.7.2/jquery.min.js' );
-		$expected .= "<script type='text/javascript' src='{$wp_scripts->base_url}ftp://ajax.googleapis.com/ajax/libs/jquery/1.7.2/jquery.min.js?ver=$ver'></script>\n";
+		$expected .= "<script type='text/javascript' src='{$wp_scripts->base_url}ftp://ajax.googleapis.com/ajax/libs/jquery/1.7.2/jquery.min.js?ver=$ver' id='jquery-ftp-js'></script>\n";
 
 		// Go!
-		$this->assertEquals( $expected, get_echo( 'wp_print_scripts' ) );
+		$this->assertSame( $expected, get_echo( 'wp_print_scripts' ) );
 
-		// No scripts left to print
-		$this->assertEquals( '', get_echo( 'wp_print_scripts' ) );
+		// No scripts left to print.
+		$this->assertSame( '', get_echo( 'wp_print_scripts' ) );
 
-		// Cleanup
+		// Cleanup.
 		$wp_scripts->base_url = $base_url_backup;
 	}
 
@@ -138,7 +138,7 @@ JS;
 		$ver      = get_bloginfo( 'version' );
 		$expected = "<script type='text/javascript' src='/wp-admin/load-scripts.php?c=0&amp;load%5Bchunk_0%5D=one,two,three&amp;ver={$ver}'></script>\n";
 
-		$this->assertEquals( $expected, $print_scripts );
+		$this->assertSame( $expected, $print_scripts );
 	}
 
 	/**
@@ -147,17 +147,17 @@ JS;
 	 * @ticket 16024
 	 */
 	function test_wp_script_add_data_with_data_key() {
-		// Enqueue & add data
+		// Enqueue and add data.
 		wp_enqueue_script( 'test-only-data', 'example.com', array(), null );
 		wp_script_add_data( 'test-only-data', 'data', 'testing' );
-		$expected  = "<script type='text/javascript'>\n/* <![CDATA[ */\ntesting\n/* ]]> */\n</script>\n";
-		$expected .= "<script type='text/javascript' src='http://example.com'></script>\n";
+		$expected  = "<script type='text/javascript' id='test-only-data-js-extra'>\n/* <![CDATA[ */\ntesting\n/* ]]> */\n</script>\n";
+		$expected .= "<script type='text/javascript' src='http://example.com' id='test-only-data-js'></script>\n";
 
 		// Go!
-		$this->assertEquals( $expected, get_echo( 'wp_print_scripts' ) );
+		$this->assertSame( $expected, get_echo( 'wp_print_scripts' ) );
 
-		// No scripts left to print
-		$this->assertEquals( '', get_echo( 'wp_print_scripts' ) );
+		// No scripts left to print.
+		$this->assertSame( '', get_echo( 'wp_print_scripts' ) );
 	}
 
 	/**
@@ -166,16 +166,16 @@ JS;
 	 * @ticket 16024
 	 */
 	function test_wp_script_add_data_with_conditional_key() {
-		// Enqueue & add conditional comments
+		// Enqueue and add conditional comments.
 		wp_enqueue_script( 'test-only-conditional', 'example.com', array(), null );
 		wp_script_add_data( 'test-only-conditional', 'conditional', 'gt IE 7' );
-		$expected = "<!--[if gt IE 7]>\n<script type='text/javascript' src='http://example.com'></script>\n<![endif]-->\n";
+		$expected = "<!--[if gt IE 7]>\n<script type='text/javascript' src='http://example.com' id='test-only-conditional-js'></script>\n<![endif]-->\n";
 
 		// Go!
-		$this->assertEquals( $expected, get_echo( 'wp_print_scripts' ) );
+		$this->assertSame( $expected, get_echo( 'wp_print_scripts' ) );
 
-		// No scripts left to print
-		$this->assertEquals( '', get_echo( 'wp_print_scripts' ) );
+		// No scripts left to print.
+		$this->assertSame( '', get_echo( 'wp_print_scripts' ) );
 	}
 
 	/**
@@ -184,18 +184,18 @@ JS;
 	 * @ticket 16024
 	 */
 	function test_wp_script_add_data_with_data_and_conditional_keys() {
-		// Enqueue & add data plus conditional comments for both
+		// Enqueue and add data plus conditional comments for both.
 		wp_enqueue_script( 'test-conditional-with-data', 'example.com', array(), null );
 		wp_script_add_data( 'test-conditional-with-data', 'data', 'testing' );
 		wp_script_add_data( 'test-conditional-with-data', 'conditional', 'lt IE 9' );
-		$expected  = "<!--[if lt IE 9]>\n<script type='text/javascript'>\n/* <![CDATA[ */\ntesting\n/* ]]> */\n</script>\n<![endif]-->\n";
-		$expected .= "<!--[if lt IE 9]>\n<script type='text/javascript' src='http://example.com'></script>\n<![endif]-->\n";
+		$expected  = "<!--[if lt IE 9]>\n<script type='text/javascript' id='test-conditional-with-data-js-extra'>\n/* <![CDATA[ */\ntesting\n/* ]]> */\n</script>\n<![endif]-->\n";
+		$expected .= "<!--[if lt IE 9]>\n<script type='text/javascript' src='http://example.com' id='test-conditional-with-data-js'></script>\n<![endif]-->\n";
 
 		// Go!
-		$this->assertEquals( $expected, get_echo( 'wp_print_scripts' ) );
+		$this->assertSame( $expected, get_echo( 'wp_print_scripts' ) );
 
-		// No scripts left to print
-		$this->assertEquals( '', get_echo( 'wp_print_scripts' ) );
+		// No scripts left to print.
+		$this->assertSame( '', get_echo( 'wp_print_scripts' ) );
 	}
 
 	/**
@@ -204,16 +204,16 @@ JS;
 	 * @ticket 16024
 	 */
 	function test_wp_script_add_data_with_invalid_key() {
-		// Enqueue & add an invalid key
+		// Enqueue and add an invalid key.
 		wp_enqueue_script( 'test-invalid', 'example.com', array(), null );
 		wp_script_add_data( 'test-invalid', 'invalid', 'testing' );
-		$expected = "<script type='text/javascript' src='http://example.com'></script>\n";
+		$expected = "<script type='text/javascript' src='http://example.com' id='test-invalid-js'></script>\n";
 
 		// Go!
-		$this->assertEquals( $expected, get_echo( 'wp_print_scripts' ) );
+		$this->assertSame( $expected, get_echo( 'wp_print_scripts' ) );
 
-		// No scripts left to print
-		$this->assertEquals( '', get_echo( 'wp_print_scripts' ) );
+		// No scripts left to print.
+		$this->assertSame( '', get_echo( 'wp_print_scripts' ) );
 	}
 
 	/**
@@ -230,8 +230,8 @@ JS;
 	 * @ticket 35229
 	 */
 	function test_wp_register_script_with_handle_without_source() {
-		$expected  = "<script type='text/javascript' src='http://example.com?ver=1'></script>\n";
-		$expected .= "<script type='text/javascript' src='http://example.com?ver=2'></script>\n";
+		$expected  = "<script type='text/javascript' src='http://example.com?ver=1' id='handle-one-js'></script>\n";
+		$expected .= "<script type='text/javascript' src='http://example.com?ver=2' id='handle-two-js'></script>\n";
 
 		wp_register_script( 'handle-one', 'http://example.com', array(), 1 );
 		wp_register_script( 'handle-two', 'http://example.com', array(), 2 );
@@ -239,7 +239,7 @@ JS;
 
 		wp_enqueue_script( 'handle-three' );
 
-		$this->assertEquals( $expected, get_echo( 'wp_print_scripts' ) );
+		$this->assertSame( $expected, get_echo( 'wp_print_scripts' ) );
 	}
 
 	/**
@@ -310,55 +310,55 @@ JS;
 	 * @ticket 35873
 	 */
 	function test_wp_register_script_with_dependencies_in_head_and_footer() {
-		wp_register_script( 'parent', '/parent.js', array( 'child-head' ), null, true ); // in footer
-		wp_register_script( 'child-head', '/child-head.js', array( 'child-footer' ), null, false ); // in head
-		wp_register_script( 'child-footer', '/child-footer.js', array(), null, true ); // in footer
+		wp_register_script( 'parent', '/parent.js', array( 'child-head' ), null, true );            // In footer.
+		wp_register_script( 'child-head', '/child-head.js', array( 'child-footer' ), null, false ); // In head.
+		wp_register_script( 'child-footer', '/child-footer.js', array(), null, true );              // In footer.
 
 		wp_enqueue_script( 'parent' );
 
 		$header = get_echo( 'wp_print_head_scripts' );
 		$footer = get_echo( 'wp_print_footer_scripts' );
 
-		$expected_header  = "<script type='text/javascript' src='/child-footer.js'></script>\n";
-		$expected_header .= "<script type='text/javascript' src='/child-head.js'></script>\n";
-		$expected_footer  = "<script type='text/javascript' src='/parent.js'></script>\n";
+		$expected_header  = "<script type='text/javascript' src='/child-footer.js' id='child-footer-js'></script>\n";
+		$expected_header .= "<script type='text/javascript' src='/child-head.js' id='child-head-js'></script>\n";
+		$expected_footer  = "<script type='text/javascript' src='/parent.js' id='parent-js'></script>\n";
 
-		$this->assertEquals( $expected_header, $header );
-		$this->assertEquals( $expected_footer, $footer );
+		$this->assertSame( $expected_header, $header );
+		$this->assertSame( $expected_footer, $footer );
 	}
 
 	/**
 	 * @ticket 35956
 	 */
 	function test_wp_register_script_with_dependencies_in_head_and_footer_in_reversed_order() {
-		wp_register_script( 'child-head', '/child-head.js', array(), null, false ); // in head
-		wp_register_script( 'child-footer', '/child-footer.js', array(), null, true ); // in footer
-		wp_register_script( 'parent', '/parent.js', array( 'child-head', 'child-footer' ), null, true ); // in footer
+		wp_register_script( 'child-head', '/child-head.js', array(), null, false );                      // In head.
+		wp_register_script( 'child-footer', '/child-footer.js', array(), null, true );                   // In footer.
+		wp_register_script( 'parent', '/parent.js', array( 'child-head', 'child-footer' ), null, true ); // In footer.
 
 		wp_enqueue_script( 'parent' );
 
 		$header = get_echo( 'wp_print_head_scripts' );
 		$footer = get_echo( 'wp_print_footer_scripts' );
 
-		$expected_header  = "<script type='text/javascript' src='/child-head.js'></script>\n";
-		$expected_footer  = "<script type='text/javascript' src='/child-footer.js'></script>\n";
-		$expected_footer .= "<script type='text/javascript' src='/parent.js'></script>\n";
+		$expected_header  = "<script type='text/javascript' src='/child-head.js' id='child-head-js'></script>\n";
+		$expected_footer  = "<script type='text/javascript' src='/child-footer.js' id='child-footer-js'></script>\n";
+		$expected_footer .= "<script type='text/javascript' src='/parent.js' id='parent-js'></script>\n";
 
-		$this->assertEquals( $expected_header, $header );
-		$this->assertEquals( $expected_footer, $footer );
+		$this->assertSame( $expected_header, $header );
+		$this->assertSame( $expected_footer, $footer );
 	}
 
 	/**
 	 * @ticket 35956
 	 */
 	function test_wp_register_script_with_dependencies_in_head_and_footer_in_reversed_order_and_two_parent_scripts() {
-		wp_register_script( 'grandchild-head', '/grandchild-head.js', array(), null, false ); // in head
-		wp_register_script( 'child-head', '/child-head.js', array(), null, false ); // in head
-		wp_register_script( 'child-footer', '/child-footer.js', array( 'grandchild-head' ), null, true ); // in footer
-		wp_register_script( 'child2-head', '/child2-head.js', array(), null, false ); // in head
-		wp_register_script( 'child2-footer', '/child2-footer.js', array(), null, true ); // in footer
-		wp_register_script( 'parent-footer', '/parent-footer.js', array( 'child-head', 'child-footer', 'child2-head', 'child2-footer' ), null, true ); // in footer
-		wp_register_script( 'parent-header', '/parent-header.js', array( 'child-head' ), null, false ); // in head
+		wp_register_script( 'grandchild-head', '/grandchild-head.js', array(), null, false );             // In head.
+		wp_register_script( 'child-head', '/child-head.js', array(), null, false );                       // In head.
+		wp_register_script( 'child-footer', '/child-footer.js', array( 'grandchild-head' ), null, true ); // In footer.
+		wp_register_script( 'child2-head', '/child2-head.js', array(), null, false );                     // In head.
+		wp_register_script( 'child2-footer', '/child2-footer.js', array(), null, true );                  // In footer.
+		wp_register_script( 'parent-footer', '/parent-footer.js', array( 'child-head', 'child-footer', 'child2-head', 'child2-footer' ), null, true ); // In footer.
+		wp_register_script( 'parent-header', '/parent-header.js', array( 'child-head' ), null, false );   // In head.
 
 		wp_enqueue_script( 'parent-footer' );
 		wp_enqueue_script( 'parent-header' );
@@ -366,17 +366,17 @@ JS;
 		$header = get_echo( 'wp_print_head_scripts' );
 		$footer = get_echo( 'wp_print_footer_scripts' );
 
-		$expected_header  = "<script type='text/javascript' src='/child-head.js'></script>\n";
-		$expected_header .= "<script type='text/javascript' src='/grandchild-head.js'></script>\n";
-		$expected_header .= "<script type='text/javascript' src='/child2-head.js'></script>\n";
-		$expected_header .= "<script type='text/javascript' src='/parent-header.js'></script>\n";
+		$expected_header  = "<script type='text/javascript' src='/child-head.js' id='child-head-js'></script>\n";
+		$expected_header .= "<script type='text/javascript' src='/grandchild-head.js' id='grandchild-head-js'></script>\n";
+		$expected_header .= "<script type='text/javascript' src='/child2-head.js' id='child2-head-js'></script>\n";
+		$expected_header .= "<script type='text/javascript' src='/parent-header.js' id='parent-header-js'></script>\n";
 
-		$expected_footer  = "<script type='text/javascript' src='/child-footer.js'></script>\n";
-		$expected_footer .= "<script type='text/javascript' src='/child2-footer.js'></script>\n";
-		$expected_footer .= "<script type='text/javascript' src='/parent-footer.js'></script>\n";
+		$expected_footer  = "<script type='text/javascript' src='/child-footer.js' id='child-footer-js'></script>\n";
+		$expected_footer .= "<script type='text/javascript' src='/child2-footer.js' id='child2-footer-js'></script>\n";
+		$expected_footer .= "<script type='text/javascript' src='/parent-footer.js' id='parent-footer-js'></script>\n";
 
-		$this->assertEquals( $expected_header, $header );
-		$this->assertEquals( $expected_footer, $footer );
+		$this->assertSame( $expected_header, $header );
+		$this->assertSame( $expected_footer, $footer );
 	}
 
 	/**
@@ -393,7 +393,7 @@ JS;
 	 */
 	function test_wp_add_inline_script_unknown_handle() {
 		$this->assertFalse( wp_add_inline_script( 'test-invalid', 'console.log("before");', 'before' ) );
-		$this->assertEquals( '', get_echo( 'wp_print_scripts' ) );
+		$this->assertSame( '', get_echo( 'wp_print_scripts' ) );
 	}
 
 	/**
@@ -403,10 +403,10 @@ JS;
 		wp_enqueue_script( 'test-example', 'example.com', array(), null );
 		wp_add_inline_script( 'test-example', 'console.log("before");', 'before' );
 
-		$expected  = "<script type='text/javascript'>\nconsole.log(\"before\");\n</script>\n";
-		$expected .= "<script type='text/javascript' src='http://example.com'></script>\n";
+		$expected  = "<script type='text/javascript' id='test-example-js-before'>\nconsole.log(\"before\");\n</script>\n";
+		$expected .= "<script type='text/javascript' src='http://example.com' id='test-example-js'></script>\n";
 
-		$this->assertEquals( $expected, get_echo( 'wp_print_scripts' ) );
+		$this->assertSame( $expected, get_echo( 'wp_print_scripts' ) );
 	}
 
 	/**
@@ -416,10 +416,10 @@ JS;
 		wp_enqueue_script( 'test-example', 'example.com', array(), null );
 		wp_add_inline_script( 'test-example', 'console.log("after");' );
 
-		$expected  = "<script type='text/javascript' src='http://example.com'></script>\n";
-		$expected .= "<script type='text/javascript'>\nconsole.log(\"after\");\n</script>\n";
+		$expected  = "<script type='text/javascript' src='http://example.com' id='test-example-js'></script>\n";
+		$expected .= "<script type='text/javascript' id='test-example-js-after'>\nconsole.log(\"after\");\n</script>\n";
 
-		$this->assertEquals( $expected, get_echo( 'wp_print_scripts' ) );
+		$this->assertSame( $expected, get_echo( 'wp_print_scripts' ) );
 	}
 
 	/**
@@ -430,11 +430,11 @@ JS;
 		wp_add_inline_script( 'test-example', 'console.log("before");', 'before' );
 		wp_add_inline_script( 'test-example', 'console.log("after");' );
 
-		$expected  = "<script type='text/javascript'>\nconsole.log(\"before\");\n</script>\n";
-		$expected .= "<script type='text/javascript' src='http://example.com'></script>\n";
-		$expected .= "<script type='text/javascript'>\nconsole.log(\"after\");\n</script>\n";
+		$expected  = "<script type='text/javascript' id='test-example-js-before'>\nconsole.log(\"before\");\n</script>\n";
+		$expected .= "<script type='text/javascript' src='http://example.com' id='test-example-js'></script>\n";
+		$expected .= "<script type='text/javascript' id='test-example-js-after'>\nconsole.log(\"after\");\n</script>\n";
 
-		$this->assertEquals( $expected, get_echo( 'wp_print_scripts' ) );
+		$this->assertSame( $expected, get_echo( 'wp_print_scripts' ) );
 	}
 
 	/**
@@ -445,9 +445,9 @@ JS;
 		wp_enqueue_script( 'test-example' );
 		wp_add_inline_script( 'test-example', 'console.log("before");', 'before' );
 
-		$expected = "<script type='text/javascript'>\nconsole.log(\"before\");\n</script>\n";
+		$expected = "<script type='text/javascript' id='test-example-js-before'>\nconsole.log(\"before\");\n</script>\n";
 
-		$this->assertEquals( $expected, get_echo( 'wp_print_scripts' ) );
+		$this->assertSame( $expected, get_echo( 'wp_print_scripts' ) );
 	}
 
 	/**
@@ -458,9 +458,9 @@ JS;
 		wp_enqueue_script( 'test-example' );
 		wp_add_inline_script( 'test-example', 'console.log("after");' );
 
-		$expected = "<script type='text/javascript'>\nconsole.log(\"after\");\n</script>\n";
+		$expected = "<script type='text/javascript' id='test-example-js-after'>\nconsole.log(\"after\");\n</script>\n";
 
-		$this->assertEquals( $expected, get_echo( 'wp_print_scripts' ) );
+		$this->assertSame( $expected, get_echo( 'wp_print_scripts' ) );
 	}
 
 	/**
@@ -472,10 +472,10 @@ JS;
 		wp_add_inline_script( 'test-example', 'console.log("before");', 'before' );
 		wp_add_inline_script( 'test-example', 'console.log("after");' );
 
-		$expected  = "<script type='text/javascript'>\nconsole.log(\"before\");\n</script>\n";
-		$expected .= "<script type='text/javascript'>\nconsole.log(\"after\");\n</script>\n";
+		$expected  = "<script type='text/javascript' id='test-example-js-before'>\nconsole.log(\"before\");\n</script>\n";
+		$expected .= "<script type='text/javascript' id='test-example-js-after'>\nconsole.log(\"after\");\n</script>\n";
 
-		$this->assertEquals( $expected, get_echo( 'wp_print_scripts' ) );
+		$this->assertSame( $expected, get_echo( 'wp_print_scripts' ) );
 	}
 
 	/**
@@ -488,11 +488,11 @@ JS;
 		wp_add_inline_script( 'test-example', 'console.log("after");' );
 		wp_add_inline_script( 'test-example', 'console.log("after");' );
 
-		$expected  = "<script type='text/javascript'>\nconsole.log(\"before\");\nconsole.log(\"before\");\n</script>\n";
-		$expected .= "<script type='text/javascript' src='http://example.com'></script>\n";
-		$expected .= "<script type='text/javascript'>\nconsole.log(\"after\");\nconsole.log(\"after\");\n</script>\n";
+		$expected  = "<script type='text/javascript' id='test-example-js-before'>\nconsole.log(\"before\");\nconsole.log(\"before\");\n</script>\n";
+		$expected .= "<script type='text/javascript' src='http://example.com' id='test-example-js'></script>\n";
+		$expected .= "<script type='text/javascript' id='test-example-js-after'>\nconsole.log(\"after\");\nconsole.log(\"after\");\n</script>\n";
 
-		$this->assertEquals( $expected, get_echo( 'wp_print_scripts' ) );
+		$this->assertSame( $expected, get_echo( 'wp_print_scripts' ) );
 	}
 
 	/**
@@ -504,12 +504,12 @@ JS;
 		wp_add_inline_script( 'test-example', 'console.log("before");', 'before' );
 		wp_add_inline_script( 'test-example', 'console.log("after");' );
 
-		$expected  = "<script type='text/javascript'>\n/* <![CDATA[ */\nvar testExample = {\"foo\":\"bar\"};\n/* ]]> */\n</script>\n";
-		$expected .= "<script type='text/javascript'>\nconsole.log(\"before\");\n</script>\n";
-		$expected .= "<script type='text/javascript' src='http://example.com'></script>\n";
-		$expected .= "<script type='text/javascript'>\nconsole.log(\"after\");\n</script>\n";
+		$expected  = "<script type='text/javascript' id='test-example-js-extra'>\n/* <![CDATA[ */\nvar testExample = {\"foo\":\"bar\"};\n/* ]]> */\n</script>\n";
+		$expected .= "<script type='text/javascript' id='test-example-js-before'>\nconsole.log(\"before\");\n</script>\n";
+		$expected .= "<script type='text/javascript' src='http://example.com' id='test-example-js'></script>\n";
+		$expected .= "<script type='text/javascript' id='test-example-js-after'>\nconsole.log(\"after\");\n</script>\n";
 
-		$this->assertEquals( $expected, get_echo( 'wp_print_scripts' ) );
+		$this->assertSame( $expected, get_echo( 'wp_print_scripts' ) );
 	}
 
 	/**
@@ -529,13 +529,13 @@ JS;
 		wp_add_inline_script( 'two', 'console.log("before two");', 'before' );
 
 		$ver       = get_bloginfo( 'version' );
-		$expected  = "<script type='text/javascript'>\nconsole.log(\"before one\");\n</script>\n";
-		$expected .= "<script type='text/javascript' src='/directory/one.js?ver={$ver}'></script>\n";
-		$expected .= "<script type='text/javascript'>\nconsole.log(\"before two\");\n</script>\n";
-		$expected .= "<script type='text/javascript' src='/directory/two.js?ver={$ver}'></script>\n";
-		$expected .= "<script type='text/javascript' src='/directory/three.js?ver={$ver}'></script>\n";
+		$expected  = "<script type='text/javascript' id='one-js-before'>\nconsole.log(\"before one\");\n</script>\n";
+		$expected .= "<script type='text/javascript' src='/directory/one.js?ver={$ver}' id='one-js'></script>\n";
+		$expected .= "<script type='text/javascript' id='two-js-before'>\nconsole.log(\"before two\");\n</script>\n";
+		$expected .= "<script type='text/javascript' src='/directory/two.js?ver={$ver}' id='two-js'></script>\n";
+		$expected .= "<script type='text/javascript' src='/directory/three.js?ver={$ver}' id='three-js'></script>\n";
 
-		$this->assertEquals( $expected, get_echo( 'wp_print_scripts' ) );
+		$this->assertSame( $expected, get_echo( 'wp_print_scripts' ) );
 	}
 
 	/**
@@ -554,12 +554,12 @@ JS;
 		wp_add_inline_script( 'one', 'console.log("before one");', 'before' );
 
 		$ver       = get_bloginfo( 'version' );
-		$expected  = "<script type='text/javascript'>\nconsole.log(\"before one\");\n</script>\n";
-		$expected .= "<script type='text/javascript' src='/directory/one.js?ver={$ver}'></script>\n";
-		$expected .= "<script type='text/javascript' src='/directory/two.js?ver={$ver}'></script>\n";
-		$expected .= "<script type='text/javascript' src='/directory/three.js?ver={$ver}'></script>\n";
+		$expected  = "<script type='text/javascript' id='one-js-before'>\nconsole.log(\"before one\");\n</script>\n";
+		$expected .= "<script type='text/javascript' src='/directory/one.js?ver={$ver}' id='one-js'></script>\n";
+		$expected .= "<script type='text/javascript' src='/directory/two.js?ver={$ver}' id='two-js'></script>\n";
+		$expected .= "<script type='text/javascript' src='/directory/three.js?ver={$ver}' id='three-js'></script>\n";
 
-		$this->assertEquals( $expected, get_echo( 'wp_print_scripts' ) );
+		$this->assertSame( $expected, get_echo( 'wp_print_scripts' ) );
 	}
 
 	/**
@@ -581,13 +581,13 @@ JS;
 
 		$ver       = get_bloginfo( 'version' );
 		$expected  = "<script type='text/javascript' src='/wp-admin/load-scripts.php?c=0&amp;load%5Bchunk_0%5D=one&amp;ver={$ver}'></script>\n";
-		$expected .= "<script type='text/javascript' src='/directory/two.js?ver={$ver}'></script>\n";
-		$expected .= "<script type='text/javascript'>\nconsole.log(\"after two\");\n</script>\n";
-		$expected .= "<script type='text/javascript' src='/directory/three.js?ver={$ver}'></script>\n";
-		$expected .= "<script type='text/javascript'>\nconsole.log(\"after three\");\n</script>\n";
-		$expected .= "<script type='text/javascript' src='/directory/four.js?ver={$ver}'></script>\n";
+		$expected .= "<script type='text/javascript' src='/directory/two.js?ver={$ver}' id='two-js'></script>\n";
+		$expected .= "<script type='text/javascript' id='two-js-after'>\nconsole.log(\"after two\");\n</script>\n";
+		$expected .= "<script type='text/javascript' src='/directory/three.js?ver={$ver}' id='three-js'></script>\n";
+		$expected .= "<script type='text/javascript' id='three-js-after'>\nconsole.log(\"after three\");\n</script>\n";
+		$expected .= "<script type='text/javascript' src='/directory/four.js?ver={$ver}' id='four-js'></script>\n";
 
-		$this->assertEquals( $expected, get_echo( 'wp_print_scripts' ) );
+		$this->assertSame( $expected, get_echo( 'wp_print_scripts' ) );
 	}
 
 	/**
@@ -597,16 +597,16 @@ JS;
 		global $wp_scripts;
 
 		$wp_scripts->do_concat    = true;
-		$wp_scripts->default_dirs = array( '/wp-admin/js/', '/wp-includes/js/' ); // Default dirs as in wp-includes/script-loader.php
+		$wp_scripts->default_dirs = array( '/wp-admin/js/', '/wp-includes/js/' ); // Default dirs as in wp-includes/script-loader.php.
 
 		$expected_localized  = "<!--[if gte IE 9]>\n";
-		$expected_localized .= "<script type='text/javascript'>\n/* <![CDATA[ */\nvar testExample = {\"foo\":\"bar\"};\n/* ]]> */\n</script>\n";
+		$expected_localized .= "<script type='text/javascript' id='test-example-js-extra'>\n/* <![CDATA[ */\nvar testExample = {\"foo\":\"bar\"};\n/* ]]> */\n</script>\n";
 		$expected_localized .= "<![endif]-->\n";
 
 		$expected  = "<!--[if gte IE 9]>\n";
-		$expected .= "<script type='text/javascript'>\nconsole.log(\"before\");\n</script>\n";
-		$expected .= "<script type='text/javascript' src='http://example.com'></script>\n";
-		$expected .= "<script type='text/javascript'>\nconsole.log(\"after\");\n</script>\n";
+		$expected .= "<script type='text/javascript' id='test-example-js-before'>\nconsole.log(\"before\");\n</script>\n";
+		$expected .= "<script type='text/javascript' src='http://example.com' id='test-example-js'></script>\n";
+		$expected .= "<script type='text/javascript' id='test-example-js-after'>\nconsole.log(\"after\");\n</script>\n";
 		$expected .= "<![endif]-->\n";
 
 		wp_enqueue_script( 'test-example', 'example.com', array(), null );
@@ -615,8 +615,8 @@ JS;
 		wp_add_inline_script( 'test-example', 'console.log("after");' );
 		wp_script_add_data( 'test-example', 'conditional', 'gte IE 9' );
 
-		$this->assertEquals( $expected_localized, get_echo( 'wp_print_scripts' ) );
-		$this->assertEquals( $expected, $wp_scripts->print_html );
+		$this->assertSame( $expected_localized, get_echo( 'wp_print_scripts' ) );
+		$this->assertSame( $expected, $wp_scripts->print_html );
 		$this->assertTrue( $wp_scripts->do_concat );
 	}
 
@@ -632,9 +632,9 @@ JS;
 		$wp_scripts->do_concat = true;
 
 		$ver       = get_bloginfo( 'version' );
-		$expected  = "<script type='text/javascript' src='/wp-admin/load-scripts.php?c=0&amp;load%5Bchunk_0%5D=jquery-core,jquery-migrate&amp;ver={$ver}'></script>\n";
-		$expected .= "<script type='text/javascript' src='http://example.com'></script>\n";
-		$expected .= "<script type='text/javascript'>\nconsole.log(\"after\");\n</script>\n";
+		$expected  = "<script type='text/javascript' src='/wp-admin/load-scripts.php?c=0&amp;load%5Bchunk_0%5D=jquery-core&amp;ver={$ver}'></script>\n";
+		$expected .= "<script type='text/javascript' src='http://example.com' id='test-example-js'></script>\n";
+		$expected .= "<script type='text/javascript' id='test-example-js-after'>\nconsole.log(\"after\");\n</script>\n";
 
 		wp_enqueue_script( 'test-example', 'http://example.com', array( 'jquery' ), null );
 		wp_add_inline_script( 'test-example', 'console.log("after");' );
@@ -642,7 +642,7 @@ JS;
 		wp_print_scripts();
 		$print_scripts = get_echo( '_print_scripts' );
 
-		$this->assertEquals( $expected, $print_scripts );
+		$this->assertSame( $expected, $print_scripts );
 	}
 
 	/**
@@ -657,10 +657,10 @@ JS;
 		$wp_scripts->do_concat = true;
 
 		$ver       = get_bloginfo( 'version' );
-		$expected  = "<script type='text/javascript' src='/wp-admin/load-scripts.php?c=0&amp;load%5Bchunk_0%5D=jquery-core,jquery-migrate&amp;ver={$ver}'></script>\n";
+		$expected  = "<script type='text/javascript' src='/wp-admin/load-scripts.php?c=0&amp;load%5Bchunk_0%5D=jquery-core&amp;ver={$ver}'></script>\n";
 		$expected .= "<!--[if gte IE 9]>\n";
-		$expected .= "<script type='text/javascript' src='http://example.com'></script>\n";
-		$expected .= "<script type='text/javascript'>\nconsole.log(\"after\");\n</script>\n";
+		$expected .= "<script type='text/javascript' src='http://example.com' id='test-example-js'></script>\n";
+		$expected .= "<script type='text/javascript' id='test-example-js-after'>\nconsole.log(\"after\");\n</script>\n";
 		$expected .= "<![endif]-->\n";
 
 		wp_enqueue_script( 'test-example', 'http://example.com', array( 'jquery' ), null );
@@ -670,7 +670,7 @@ JS;
 		wp_print_scripts();
 		$print_scripts = get_echo( '_print_scripts' );
 
-		$this->assertEquals( $expected, $print_scripts );
+		$this->assertSame( $expected, $print_scripts );
 	}
 
 	/**
@@ -686,9 +686,9 @@ JS;
 		$wp_scripts->do_concat = true;
 
 		$ver       = get_bloginfo( 'version' );
-		$expected  = "<script type='text/javascript' src='/wp-admin/load-scripts.php?c=0&amp;load%5Bchunk_0%5D=jquery-core,jquery-migrate&amp;ver={$ver}'></script>\n";
-		$expected .= "<script type='text/javascript'>\nconsole.log(\"before\");\n</script>\n";
-		$expected .= "<script type='text/javascript' src='http://example.com'></script>\n";
+		$expected  = "<script type='text/javascript' src='/wp-admin/load-scripts.php?c=0&amp;load%5Bchunk_0%5D=jquery-core&amp;ver={$ver}'></script>\n";
+		$expected .= "<script type='text/javascript' id='test-example-js-before'>\nconsole.log(\"before\");\n</script>\n";
+		$expected .= "<script type='text/javascript' src='http://example.com' id='test-example-js'></script>\n";
 
 		wp_enqueue_script( 'test-example', 'http://example.com', array( 'jquery' ), null );
 		wp_add_inline_script( 'test-example', 'console.log("before");', 'before' );
@@ -696,7 +696,7 @@ JS;
 		wp_print_scripts();
 		$print_scripts = get_echo( '_print_scripts' );
 
-		$this->assertEquals( $expected, $print_scripts );
+		$this->assertSame( $expected, $print_scripts );
 	}
 
 	/**
@@ -712,17 +712,25 @@ JS;
 		$wp_scripts->do_concat = true;
 
 		$ver       = get_bloginfo( 'version' );
-		$expected  = "<script type='text/javascript' src='/wp-admin/load-scripts.php?c=0&amp;load%5Bchunk_0%5D=jquery-core,jquery-migrate&amp;ver={$ver}'></script>\n";
-		$expected .= "<script type='text/javascript'>\nconsole.log(\"before\");\n</script>\n";
-		$expected .= "<script type='text/javascript' src='http://example.com'></script>\n";
-		$expected .= "<script type='text/javascript' src='/wp-includes/js/dist/vendor/wp-polyfill.min.js'></script>\n";
-		$expected .= "<script type='text/javascript'>\n";
-		$expected .= "( 'fetch' in window ) || document.write( '<script src=\"http://example.org/wp-includes/js/dist/vendor/wp-polyfill-fetch.min.js\"></scr' + 'ipt>' );( document.contains ) || document.write( '<script src=\"http://example.org/wp-includes/js/dist/vendor/wp-polyfill-node-contains.min.js\"></scr' + 'ipt>' );( window.FormData && window.FormData.prototype.keys ) || document.write( '<script src=\"http://example.org/wp-includes/js/dist/vendor/wp-polyfill-formdata.min.js\"></scr' + 'ipt>' );( Element.prototype.matches && Element.prototype.closest ) || document.write( '<script src=\"http://example.org/wp-includes/js/dist/vendor/wp-polyfill-element-closest.min.js\"></scr' + 'ipt>' );\n";
+		$expected  = "<script type='text/javascript' src='/wp-admin/load-scripts.php?c=0&amp;load%5Bchunk_0%5D=jquery-core&amp;ver={$ver}'></script>\n";
+		$expected .= "<script type='text/javascript' id='test-example-js-before'>\nconsole.log(\"before\");\n</script>\n";
+		$expected .= "<script type='text/javascript' src='http://example.com' id='test-example-js'></script>\n";
+		$expected .= "<script type='text/javascript' src='/wp-includes/js/dist/vendor/wp-polyfill.min.js' id='wp-polyfill-js'></script>\n";
+		$expected .= "<script type='text/javascript' id='wp-polyfill-js-after'>\n";
+		$expected .= "( 'fetch' in window ) || document.write( '<script src=\"http://example.org/wp-includes/js/dist/vendor/wp-polyfill-fetch.min.js\"></scr' + 'ipt>' );( document.contains ) || document.write( '<script src=\"http://example.org/wp-includes/js/dist/vendor/wp-polyfill-node-contains.min.js\"></scr' + 'ipt>' );( window.DOMRect ) || document.write( '<script src=\"http://example.org/wp-includes/js/dist/vendor/wp-polyfill-dom-rect.min.js\"></scr' + 'ipt>' );( window.URL && window.URL.prototype && window.URLSearchParams ) || document.write( '<script src=\"http://example.org/wp-includes/js/dist/vendor/wp-polyfill-url.min.js\"></scr' + 'ipt>' );( window.FormData && window.FormData.prototype.keys ) || document.write( '<script src=\"http://example.org/wp-includes/js/dist/vendor/wp-polyfill-formdata.min.js\"></scr' + 'ipt>' );( Element.prototype.matches && Element.prototype.closest ) || document.write( '<script src=\"http://example.org/wp-includes/js/dist/vendor/wp-polyfill-element-closest.min.js\"></scr' + 'ipt>' );\n";
 		$expected .= "</script>\n";
-		$expected .= "<script type='text/javascript' src='/wp-includes/js/dist/dom-ready.min.js'></script>\n";
-		$expected .= "<script type='text/javascript' src='/wp-includes/js/dist/a11y.min.js'></script>\n";
-		$expected .= "<script type='text/javascript' src='http://example2.com'></script>\n";
-		$expected .= "<script type='text/javascript'>\nconsole.log(\"after\");\n</script>\n";
+		$expected .= "<script type='text/javascript' src='/wp-includes/js/dist/dom-ready.min.js' id='wp-dom-ready-js'></script>\n";
+		$expected .= "<script type='text/javascript' src='/wp-includes/js/dist/i18n.min.js' id='wp-i18n-js'></script>\n";
+		$expected .= "<script type='text/javascript' id='wp-a11y-js-translations'>\n";
+		$expected .= "( function( domain, translations ) {\n";
+		$expected .= "	var localeData = translations.locale_data[ domain ] || translations.locale_data.messages;\n";
+		$expected .= "	localeData[\"\"].domain = domain;\n";
+		$expected .= "	wp.i18n.setLocaleData( localeData, domain );\n";
+		$expected .= "} )( \"default\", { \"locale_data\": { \"messages\": { \"\": {} } } } );\n";
+		$expected .= "</script>\n";
+		$expected .= "<script type='text/javascript' src='/wp-includes/js/dist/a11y.min.js' id='wp-a11y-js'></script>\n";
+		$expected .= "<script type='text/javascript' src='http://example2.com' id='test-example2-js'></script>\n";
+		$expected .= "<script type='text/javascript' id='test-example2-js-after'>\nconsole.log(\"after\");\n</script>\n";
 
 		wp_enqueue_script( 'test-example', 'http://example.com', array( 'jquery' ), null );
 		wp_add_inline_script( 'test-example', 'console.log("before");', 'before' );
@@ -744,7 +752,7 @@ JS;
 			$print_scripts         // Printed scripts.
 		);
 
-		$this->assertEquals( $expected, $print_scripts );
+		$this->assertSameIgnoreEOL( $expected, $print_scripts );
 	}
 
 	/**
@@ -759,8 +767,8 @@ JS;
 		$wp_scripts->base_url  = '';
 		$wp_scripts->do_concat = true;
 
-		$expected_tail  = "<script type='text/javascript' src='/customize-dependency.js'></script>\n";
-		$expected_tail .= "<script type='text/javascript'>\n";
+		$expected_tail  = "<script type='text/javascript' src='/customize-dependency.js' id='customize-dependency-js'></script>\n";
+		$expected_tail .= "<script type='text/javascript' id='customize-dependency-js-after'>\n";
 		$expected_tail .= "tryCustomizeDependency()\n";
 		$expected_tail .= "</script>\n";
 
@@ -771,8 +779,8 @@ JS;
 		$print_scripts  = get_echo( 'wp_print_scripts' );
 		$print_scripts .= get_echo( '_print_scripts' );
 
-		$tail = substr( $print_scripts, strrpos( $print_scripts, "<script type='text/javascript' src='/customize-dependency.js'>" ) );
-		$this->assertEquals( $expected_tail, $tail );
+		$tail = substr( $print_scripts, strrpos( $print_scripts, "<script type='text/javascript' src='/customize-dependency.js' id='customize-dependency-js'>" ) );
+		$this->assertSame( $expected_tail, $tail );
 	}
 
 	/**
@@ -782,7 +790,7 @@ JS;
 		global $wp_scripts;
 
 		$wp_scripts->do_concat    = true;
-		$wp_scripts->default_dirs = array( '/wp-admin/js/', '/wp-includes/js/' ); // Default dirs as in wp-includes/script-loader.php
+		$wp_scripts->default_dirs = array( '/wp-admin/js/', '/wp-includes/js/' ); // Default dirs as in wp-includes/script-loader.php.
 
 		wp_enqueue_script( 'one', '/wp-includes/js/script.js' );
 		wp_enqueue_script( 'two', '/wp-includes/js/script2.js', array( 'one' ) );
@@ -791,13 +799,13 @@ JS;
 		wp_enqueue_script( 'four', '/wp-includes/js/script4.js' );
 
 		$ver       = get_bloginfo( 'version' );
-		$expected  = "<script type='text/javascript' src='/wp-includes/js/script.js?ver={$ver}'></script>\n";
-		$expected .= "<script type='text/javascript'>\nconsole.log(\"after one\");\n</script>\n";
-		$expected .= "<script type='text/javascript' src='/wp-includes/js/script2.js?ver={$ver}'></script>\n";
-		$expected .= "<script type='text/javascript' src='/wp-includes/js/script3.js?ver={$ver}'></script>\n";
-		$expected .= "<script type='text/javascript' src='/wp-includes/js/script4.js?ver={$ver}'></script>\n";
+		$expected  = "<script type='text/javascript' src='/wp-includes/js/script.js?ver={$ver}' id='one-js'></script>\n";
+		$expected .= "<script type='text/javascript' id='one-js-after'>\nconsole.log(\"after one\");\n</script>\n";
+		$expected .= "<script type='text/javascript' src='/wp-includes/js/script2.js?ver={$ver}' id='two-js'></script>\n";
+		$expected .= "<script type='text/javascript' src='/wp-includes/js/script3.js?ver={$ver}' id='three-js'></script>\n";
+		$expected .= "<script type='text/javascript' src='/wp-includes/js/script4.js?ver={$ver}' id='four-js'></script>\n";
 
-		$this->assertEquals( $expected, get_echo( 'wp_print_scripts' ) );
+		$this->assertSame( $expected, get_echo( 'wp_print_scripts' ) );
 	}
 
 	/**
@@ -807,7 +815,7 @@ JS;
 		global $wp_scripts;
 
 		$wp_scripts->do_concat    = true;
-		$wp_scripts->default_dirs = array( '/wp-admin/js/', '/wp-includes/js/' ); // Default dirs as in wp-includes/script-loader.php
+		$wp_scripts->default_dirs = array( '/wp-admin/js/', '/wp-includes/js/' ); // Default dirs as in wp-includes/script-loader.php.
 
 		wp_enqueue_script( 'one', '/wp-includes/js/script.js' );
 		wp_enqueue_script( 'two', '/wp-includes/js/script2.js', array( 'one' ) );
@@ -817,11 +825,11 @@ JS;
 
 		$ver       = get_bloginfo( 'version' );
 		$expected  = "<script type='text/javascript' src='/wp-admin/load-scripts.php?c=0&amp;load%5Bchunk_0%5D=one,two&amp;ver={$ver}'></script>\n";
-		$expected .= "<script type='text/javascript'>\nconsole.log(\"before three\");\n</script>\n";
-		$expected .= "<script type='text/javascript' src='/wp-includes/js/script3.js?ver={$ver}'></script>\n";
-		$expected .= "<script type='text/javascript' src='/wp-includes/js/script4.js?ver={$ver}'></script>\n";
+		$expected .= "<script type='text/javascript' id='three-js-before'>\nconsole.log(\"before three\");\n</script>\n";
+		$expected .= "<script type='text/javascript' src='/wp-includes/js/script3.js?ver={$ver}' id='three-js'></script>\n";
+		$expected .= "<script type='text/javascript' src='/wp-includes/js/script4.js?ver={$ver}' id='four-js'></script>\n";
 
-		$this->assertEquals( $expected, get_echo( 'wp_print_scripts' ) );
+		$this->assertSame( $expected, get_echo( 'wp_print_scripts' ) );
 	}
 
 	/**
@@ -832,21 +840,23 @@ JS;
 		wp_enqueue_script( 'test-example', '/wp-includes/js/script.js', array(), null );
 		wp_set_script_translations( 'test-example', 'default', DIR_TESTDATA . '/languages' );
 
-		$expected  = "<script type='text/javascript' src='/wp-includes/js/dist/wp-i18n.js'></script>\n";
+		$expected  = "<script type='text/javascript' src='/wp-includes/js/dist/wp-i18n.js' id='wp-i18n-js'></script>\n";
 		$expected .= str_replace(
 			array(
 				'__DOMAIN__',
+				'__HANDLE__',
 				'__JSON_TRANSLATIONS__',
 			),
 			array(
 				'default',
+				'test-example',
 				file_get_contents( DIR_TESTDATA . '/languages/en_US-813e104eb47e13dd4cc5af844c618754.json' ),
 			),
 			$this->wp_scripts_print_translations_output
 		);
-		$expected .= "<script type='text/javascript' src='/wp-includes/js/script.js'></script>\n";
+		$expected .= "<script type='text/javascript' src='/wp-includes/js/script.js' id='test-example-js'></script>\n";
 
-		$this->assertEqualsIgnoreEOL( $expected, get_echo( 'wp_print_scripts' ) );
+		$this->assertSameIgnoreEOL( $expected, get_echo( 'wp_print_scripts' ) );
 	}
 
 	/**
@@ -857,21 +867,23 @@ JS;
 		wp_enqueue_script( 'plugin-example', '/wp-content/plugins/my-plugin/js/script.js', array(), null );
 		wp_set_script_translations( 'plugin-example', 'internationalized-plugin', DIR_TESTDATA . '/languages/plugins' );
 
-		$expected  = "<script type='text/javascript' src='/wp-includes/js/dist/wp-i18n.js'></script>\n";
+		$expected  = "<script type='text/javascript' src='/wp-includes/js/dist/wp-i18n.js' id='wp-i18n-js'></script>\n";
 		$expected .= str_replace(
 			array(
 				'__DOMAIN__',
+				'__HANDLE__',
 				'__JSON_TRANSLATIONS__',
 			),
 			array(
 				'internationalized-plugin',
+				'plugin-example',
 				file_get_contents( DIR_TESTDATA . '/languages/plugins/internationalized-plugin-en_US-2f86cb96a0233e7cb3b6f03ad573be0b.json' ),
 			),
 			$this->wp_scripts_print_translations_output
 		);
-		$expected .= "<script type='text/javascript' src='/wp-content/plugins/my-plugin/js/script.js'></script>\n";
+		$expected .= "<script type='text/javascript' src='/wp-content/plugins/my-plugin/js/script.js' id='plugin-example-js'></script>\n";
 
-		$this->assertEqualsIgnoreEOL( $expected, get_echo( 'wp_print_scripts' ) );
+		$this->assertSameIgnoreEOL( $expected, get_echo( 'wp_print_scripts' ) );
 	}
 
 	/**
@@ -882,21 +894,23 @@ JS;
 		wp_enqueue_script( 'theme-example', '/wp-content/themes/my-theme/js/script.js', array(), null );
 		wp_set_script_translations( 'theme-example', 'internationalized-theme', DIR_TESTDATA . '/languages/themes' );
 
-		$expected  = "<script type='text/javascript' src='/wp-includes/js/dist/wp-i18n.js'></script>\n";
+		$expected  = "<script type='text/javascript' src='/wp-includes/js/dist/wp-i18n.js' id='wp-i18n-js'></script>\n";
 		$expected .= str_replace(
 			array(
 				'__DOMAIN__',
+				'__HANDLE__',
 				'__JSON_TRANSLATIONS__',
 			),
 			array(
 				'internationalized-theme',
+				'theme-example',
 				file_get_contents( DIR_TESTDATA . '/languages/themes/internationalized-theme-en_US-2f86cb96a0233e7cb3b6f03ad573be0b.json' ),
 			),
 			$this->wp_scripts_print_translations_output
 		);
-		$expected .= "<script type='text/javascript' src='/wp-content/themes/my-theme/js/script.js'></script>\n";
+		$expected .= "<script type='text/javascript' src='/wp-content/themes/my-theme/js/script.js' id='theme-example-js'></script>\n";
 
-		$this->assertEqualsIgnoreEOL( $expected, get_echo( 'wp_print_scripts' ) );
+		$this->assertSameIgnoreEOL( $expected, get_echo( 'wp_print_scripts' ) );
 	}
 
 	/**
@@ -907,21 +921,23 @@ JS;
 		wp_enqueue_script( 'script-handle', '/wp-admin/js/script.js', array(), null );
 		wp_set_script_translations( 'script-handle', 'admin', DIR_TESTDATA . '/languages/' );
 
-		$expected  = "<script type='text/javascript' src='/wp-includes/js/dist/wp-i18n.js'></script>\n";
+		$expected  = "<script type='text/javascript' src='/wp-includes/js/dist/wp-i18n.js' id='wp-i18n-js'></script>\n";
 		$expected .= str_replace(
 			array(
 				'__DOMAIN__',
+				'__HANDLE__',
 				'__JSON_TRANSLATIONS__',
 			),
 			array(
 				'admin',
+				'script-handle',
 				file_get_contents( DIR_TESTDATA . '/languages/admin-en_US-script-handle.json' ),
 			),
 			$this->wp_scripts_print_translations_output
 		);
-		$expected .= "<script type='text/javascript' src='/wp-admin/js/script.js'></script>\n";
+		$expected .= "<script type='text/javascript' src='/wp-admin/js/script.js' id='script-handle-js'></script>\n";
 
-		$this->assertEqualsIgnoreEOL( $expected, get_echo( 'wp_print_scripts' ) );
+		$this->assertSameIgnoreEOL( $expected, get_echo( 'wp_print_scripts' ) );
 	}
 
 	/**
@@ -947,21 +963,23 @@ JS;
 		wp_enqueue_script( 'test-example', '/wp-admin/js/script.js', array(), null );
 		wp_set_script_translations( 'test-example', 'admin', DIR_TESTDATA . '/languages/' );
 
-		$expected  = "<script type='text/javascript' src='/wp-includes/js/dist/wp-i18n.js'></script>\n";
+		$expected  = "<script type='text/javascript' src='/wp-includes/js/dist/wp-i18n.js' id='wp-i18n-js'></script>\n";
 		$expected .= str_replace(
 			array(
 				'__DOMAIN__',
+				'__HANDLE__',
 				'__JSON_TRANSLATIONS__',
 			),
 			array(
 				'admin',
+				'test-example',
 				'{ "locale_data": { "messages": { "": {} } } }',
 			),
 			$this->wp_scripts_print_translations_output
 		);
-		$expected .= "<script type='text/javascript' src='/wp-admin/js/script.js'></script>\n";
+		$expected .= "<script type='text/javascript' src='/wp-admin/js/script.js' id='test-example-js'></script>\n";
 
-		$this->assertEqualsIgnoreEOL( $expected, get_echo( 'wp_print_scripts' ) );
+		$this->assertSameIgnoreEOL( $expected, get_echo( 'wp_print_scripts' ) );
 	}
 
 	/**
@@ -974,21 +992,23 @@ JS;
 
 		wp_enqueue_script( 'test-example' );
 
-		$expected  = "<script type='text/javascript' src='/wp-includes/js/dist/wp-i18n.js'></script>\n";
+		$expected  = "<script type='text/javascript' src='/wp-includes/js/dist/wp-i18n.js' id='wp-i18n-js'></script>\n";
 		$expected .= str_replace(
 			array(
 				'__DOMAIN__',
+				'__HANDLE__',
 				'__JSON_TRANSLATIONS__',
 			),
 			array(
 				'default',
+				'test-example',
 				file_get_contents( DIR_TESTDATA . '/languages/en_US-813e104eb47e13dd4cc5af844c618754.json' ),
 			),
 			$this->wp_scripts_print_translations_output
 		);
-		$expected .= "<script type='text/javascript' src='/wp-includes/js/script.js'></script>\n";
+		$expected .= "<script type='text/javascript' src='/wp-includes/js/script.js' id='test-example-js'></script>\n";
 
-		$this->assertEqualsIgnoreEOL( $expected, get_echo( 'wp_print_scripts' ) );
+		$this->assertSameIgnoreEOL( $expected, get_echo( 'wp_print_scripts' ) );
 	}
 
 	/**
@@ -1001,37 +1021,39 @@ JS;
 
 		wp_enqueue_script( 'test-example', '/wp-includes/js/script2.js', array( 'test-dependency' ), null );
 
-		$expected  = "<script type='text/javascript' src='/wp-includes/js/dist/wp-i18n.js'></script>\n";
+		$expected  = "<script type='text/javascript' src='/wp-includes/js/dist/wp-i18n.js' id='wp-i18n-js'></script>\n";
 		$expected .= str_replace(
 			array(
 				'__DOMAIN__',
+				'__HANDLE__',
 				'__JSON_TRANSLATIONS__',
 			),
 			array(
 				'default',
+				'test-dependency',
 				file_get_contents( DIR_TESTDATA . '/languages/en_US-813e104eb47e13dd4cc5af844c618754.json' ),
 			),
 			$this->wp_scripts_print_translations_output
 		);
-		$expected .= "<script type='text/javascript' src='/wp-includes/js/script.js'></script>\n";
-		$expected .= "<script type='text/javascript' src='/wp-includes/js/script2.js'></script>\n";
+		$expected .= "<script type='text/javascript' src='/wp-includes/js/script.js' id='test-dependency-js'></script>\n";
+		$expected .= "<script type='text/javascript' src='/wp-includes/js/script2.js' id='test-example-js'></script>\n";
 
-		$this->assertEqualsIgnoreEOL( $expected, get_echo( 'wp_print_scripts' ) );
+		$this->assertSameIgnoreEOL( $expected, get_echo( 'wp_print_scripts' ) );
 	}
 
 	/**
 	 * Testing `wp_enqueue_code_editor` with file path.
 	 *
 	 * @ticket 41871
-	 * @covers ::wp_enqueue_code_editor()
+	 * @covers ::wp_enqueue_code_editor
 	 */
 	public function test_wp_enqueue_code_editor_when_php_file_will_be_passed() {
 		$real_file              = WP_PLUGIN_DIR . '/hello.php';
 		$wp_enqueue_code_editor = wp_enqueue_code_editor( array( 'file' => $real_file ) );
 		$this->assertNonEmptyMultidimensionalArray( $wp_enqueue_code_editor );
 
-		$this->assertEqualSets( array( 'codemirror', 'csslint', 'jshint', 'htmlhint' ), array_keys( $wp_enqueue_code_editor ) );
-		$this->assertEqualSets(
+		$this->assertSameSets( array( 'codemirror', 'csslint', 'jshint', 'htmlhint' ), array_keys( $wp_enqueue_code_editor ) );
+		$this->assertSameSets(
 			array(
 				'autoCloseBrackets',
 				'autoCloseTags',
@@ -1053,7 +1075,7 @@ JS;
 		);
 		$this->assertEmpty( $wp_enqueue_code_editor['codemirror']['gutters'] );
 
-		$this->assertEqualSets(
+		$this->assertSameSets(
 			array(
 				'errors',
 				'box-model',
@@ -1065,7 +1087,7 @@ JS;
 			array_keys( $wp_enqueue_code_editor['csslint'] )
 		);
 
-		$this->assertEqualSets(
+		$this->assertSameSets(
 			array(
 				'boss',
 				'curly',
@@ -1087,7 +1109,7 @@ JS;
 			array_keys( $wp_enqueue_code_editor['jshint'] )
 		);
 
-		$this->assertEqualSets(
+		$this->assertSameSets(
 			array(
 				'tagname-lowercase',
 				'attr-lowercase',
@@ -1110,15 +1132,15 @@ JS;
 	 * Testing `wp_enqueue_code_editor` with `compact`.
 	 *
 	 * @ticket 41871
-	 * @covers ::wp_enqueue_code_editor()
+	 * @covers ::wp_enqueue_code_editor
 	 */
 	public function test_wp_enqueue_code_editor_when_generated_array_by_compact_will_be_passed() {
 		$file                   = '';
 		$wp_enqueue_code_editor = wp_enqueue_code_editor( compact( 'file' ) );
 		$this->assertNonEmptyMultidimensionalArray( $wp_enqueue_code_editor );
 
-		$this->assertEqualSets( array( 'codemirror', 'csslint', 'jshint', 'htmlhint' ), array_keys( $wp_enqueue_code_editor ) );
-		$this->assertEqualSets(
+		$this->assertSameSets( array( 'codemirror', 'csslint', 'jshint', 'htmlhint' ), array_keys( $wp_enqueue_code_editor ) );
+		$this->assertSameSets(
 			array(
 				'continueComments',
 				'direction',
@@ -1136,7 +1158,7 @@ JS;
 		);
 		$this->assertEmpty( $wp_enqueue_code_editor['codemirror']['gutters'] );
 
-		$this->assertEqualSets(
+		$this->assertSameSets(
 			array(
 				'errors',
 				'box-model',
@@ -1148,7 +1170,7 @@ JS;
 			array_keys( $wp_enqueue_code_editor['csslint'] )
 		);
 
-		$this->assertEqualSets(
+		$this->assertSameSets(
 			array(
 				'boss',
 				'curly',
@@ -1170,7 +1192,7 @@ JS;
 			array_keys( $wp_enqueue_code_editor['jshint'] )
 		);
 
-		$this->assertEqualSets(
+		$this->assertSameSets(
 			array(
 				'tagname-lowercase',
 				'attr-lowercase',
@@ -1193,7 +1215,7 @@ JS;
 	 * Testing `wp_enqueue_code_editor` with `array_merge`.
 	 *
 	 * @ticket 41871
-	 * @covers ::wp_enqueue_code_editor()
+	 * @covers ::wp_enqueue_code_editor
 	 */
 	public function test_wp_enqueue_code_editor_when_generated_array_by_array_merge_will_be_passed() {
 		$wp_enqueue_code_editor = wp_enqueue_code_editor(
@@ -1211,8 +1233,8 @@ JS;
 
 		$this->assertNonEmptyMultidimensionalArray( $wp_enqueue_code_editor );
 
-		$this->assertEqualSets( array( 'codemirror', 'csslint', 'jshint', 'htmlhint' ), array_keys( $wp_enqueue_code_editor ) );
-		$this->assertEqualSets(
+		$this->assertSameSets( array( 'codemirror', 'csslint', 'jshint', 'htmlhint' ), array_keys( $wp_enqueue_code_editor ) );
+		$this->assertSameSets(
 			array(
 				'autoCloseBrackets',
 				'continueComments',
@@ -1233,7 +1255,7 @@ JS;
 			array_keys( $wp_enqueue_code_editor['codemirror'] )
 		);
 
-		$this->assertEqualSets(
+		$this->assertSameSets(
 			array(
 				'errors',
 				'box-model',
@@ -1245,7 +1267,7 @@ JS;
 			array_keys( $wp_enqueue_code_editor['csslint'] )
 		);
 
-		$this->assertEqualSets(
+		$this->assertSameSets(
 			array(
 				'boss',
 				'curly',
@@ -1267,7 +1289,7 @@ JS;
 			array_keys( $wp_enqueue_code_editor['jshint'] )
 		);
 
-		$this->assertEqualSets(
+		$this->assertSameSets(
 			array(
 				'tagname-lowercase',
 				'attr-lowercase',
@@ -1290,7 +1312,7 @@ JS;
 	 * Testing `wp_enqueue_code_editor` with `array`.
 	 *
 	 * @ticket 41871
-	 * @covers ::wp_enqueue_code_editor()
+	 * @covers ::wp_enqueue_code_editor
 	 */
 	public function test_wp_enqueue_code_editor_when_simple_array_will_be_passed() {
 		$wp_enqueue_code_editor = wp_enqueue_code_editor(
@@ -1305,8 +1327,8 @@ JS;
 
 		$this->assertNonEmptyMultidimensionalArray( $wp_enqueue_code_editor );
 
-		$this->assertEqualSets( array( 'codemirror', 'csslint', 'jshint', 'htmlhint' ), array_keys( $wp_enqueue_code_editor ) );
-		$this->assertEqualSets(
+		$this->assertSameSets( array( 'codemirror', 'csslint', 'jshint', 'htmlhint' ), array_keys( $wp_enqueue_code_editor ) );
+		$this->assertSameSets(
 			array(
 				'autoCloseBrackets',
 				'continueComments',
@@ -1327,7 +1349,7 @@ JS;
 			array_keys( $wp_enqueue_code_editor['codemirror'] )
 		);
 
-		$this->assertEqualSets(
+		$this->assertSameSets(
 			array(
 				'errors',
 				'box-model',
@@ -1339,7 +1361,7 @@ JS;
 			array_keys( $wp_enqueue_code_editor['csslint'] )
 		);
 
-		$this->assertEqualSets(
+		$this->assertSameSets(
 			array(
 				'boss',
 				'curly',
@@ -1361,7 +1383,7 @@ JS;
 			array_keys( $wp_enqueue_code_editor['jshint'] )
 		);
 
-		$this->assertEqualSets(
+		$this->assertSameSets(
 			array(
 				'tagname-lowercase',
 				'attr-lowercase',
diff --git a/tests/dependencies/styles.php b/tests/dependencies/styles.php
index 174a8e48b6..72931a2e5c 100644
--- a/tests/dependencies/styles.php
+++ b/tests/dependencies/styles.php
@@ -63,10 +63,10 @@ class Tests_Dependencies_Styles extends WP_UnitTestCase {
 		$expected .= "<link rel='stylesheet' id='no-deps-null-version-css'  href='http://example.com' type='text/css' media='all' />\n";
 		$expected .= "<link rel='stylesheet' id='no-deps-null-version-print-media-css'  href='http://example.com' type='text/css' media='print' />\n";
 
-		$this->assertEquals( $expected, get_echo( 'wp_print_styles' ) );
+		$this->assertSame( $expected, get_echo( 'wp_print_styles' ) );
 
-		// No styles left to print
-		$this->assertEquals( '', get_echo( 'wp_print_styles' ) );
+		// No styles left to print.
+		$this->assertSame( '', get_echo( 'wp_print_styles' ) );
 	}
 
 	/**
@@ -83,7 +83,7 @@ class Tests_Dependencies_Styles extends WP_UnitTestCase {
 		$ver      = get_bloginfo( 'version' );
 		$expected = "<link rel='stylesheet' id='no-deps-no-version-css'  href='http://example.com?ver=$ver' media='all' />\n";
 
-		$this->assertEquals( $expected, get_echo( 'wp_print_styles' ) );
+		$this->assertSame( $expected, get_echo( 'wp_print_styles' ) );
 	}
 
 	/**
@@ -93,41 +93,41 @@ class Tests_Dependencies_Styles extends WP_UnitTestCase {
 	 * @ticket 16560
 	 */
 	public function test_protocols() {
-		// Init
+		// Init.
 		global $wp_styles;
 		$base_url_backup     = $wp_styles->base_url;
 		$wp_styles->base_url = 'http://example.com/wordpress';
 		$expected            = '';
 		$ver                 = get_bloginfo( 'version' );
 
-		// Try with an HTTP reference
+		// Try with an HTTP reference.
 		wp_enqueue_style( 'reset-css-http', 'http://yui.yahooapis.com/2.8.1/build/reset/reset-min.css' );
 		$expected .= "<link rel='stylesheet' id='reset-css-http-css'  href='http://yui.yahooapis.com/2.8.1/build/reset/reset-min.css?ver=$ver' type='text/css' media='all' />\n";
 
-		// Try with an HTTPS reference
+		// Try with an HTTPS reference.
 		wp_enqueue_style( 'reset-css-https', 'http://yui.yahooapis.com/2.8.1/build/reset/reset-min.css' );
 		$expected .= "<link rel='stylesheet' id='reset-css-https-css'  href='http://yui.yahooapis.com/2.8.1/build/reset/reset-min.css?ver=$ver' type='text/css' media='all' />\n";
 
-		// Try with an automatic protocol reference (//)
+		// Try with an automatic protocol reference (//).
 		wp_enqueue_style( 'reset-css-doubleslash', '//yui.yahooapis.com/2.8.1/build/reset/reset-min.css' );
 		$expected .= "<link rel='stylesheet' id='reset-css-doubleslash-css'  href='//yui.yahooapis.com/2.8.1/build/reset/reset-min.css?ver=$ver' type='text/css' media='all' />\n";
 
-		// Try with a local resource and an automatic protocol reference (//)
+		// Try with a local resource and an automatic protocol reference (//).
 		$url = '//my_plugin/style.css';
 		wp_enqueue_style( 'plugin-style', $url );
 		$expected .= "<link rel='stylesheet' id='plugin-style-css'  href='$url?ver=$ver' type='text/css' media='all' />\n";
 
-		// Try with a bad protocol
+		// Try with a bad protocol.
 		wp_enqueue_style( 'reset-css-ftp', 'ftp://yui.yahooapis.com/2.8.1/build/reset/reset-min.css' );
 		$expected .= "<link rel='stylesheet' id='reset-css-ftp-css'  href='{$wp_styles->base_url}ftp://yui.yahooapis.com/2.8.1/build/reset/reset-min.css?ver=$ver' type='text/css' media='all' />\n";
 
 		// Go!
-		$this->assertEquals( $expected, get_echo( 'wp_print_styles' ) );
+		$this->assertSame( $expected, get_echo( 'wp_print_styles' ) );
 
-		// No styles left to print
-		$this->assertEquals( '', get_echo( 'wp_print_styles' ) );
+		// No styles left to print.
+		$this->assertSame( '', get_echo( 'wp_print_styles' ) );
 
-		// Cleanup
+		// Cleanup.
 		$wp_styles->base_url = $base_url_backup;
 	}
 
@@ -150,8 +150,8 @@ class Tests_Dependencies_Styles extends WP_UnitTestCase {
 		wp_enqueue_style( 'handle', 'http://example.com', array(), 1 );
 		wp_add_inline_style( 'handle', $style );
 
-		// No styles left to print
-		$this->assertEquals( $expected, get_echo( 'wp_print_styles' ) );
+		// No styles left to print.
+		$this->assertSame( $expected, get_echo( 'wp_print_styles' ) );
 	}
 
 	/**
@@ -165,7 +165,7 @@ class Tests_Dependencies_Styles extends WP_UnitTestCase {
 		global $wp_styles;
 
 		$wp_styles->do_concat    = true;
-		$wp_styles->default_dirs = array( '/wp-admin/', '/wp-includes/css/' ); // Default dirs as in wp-includes/script-loader.php
+		$wp_styles->default_dirs = array( '/wp-admin/', '/wp-includes/css/' ); // Default dirs as in wp-includes/script-loader.php.
 
 		$style  = ".thing {\n";
 		$style .= "\tbackground: red;\n";
@@ -180,7 +180,7 @@ class Tests_Dependencies_Styles extends WP_UnitTestCase {
 		wp_add_inline_style( 'handle', $style );
 
 		wp_print_styles();
-		$this->assertEquals( $expected, $wp_styles->print_html );
+		$this->assertSame( $expected, $wp_styles->print_html );
 
 	}
 
@@ -209,8 +209,8 @@ class Tests_Dependencies_Styles extends WP_UnitTestCase {
 		wp_add_inline_style( 'handle', $style1 );
 		wp_add_inline_style( 'handle', $style2 );
 
-		// No styles left to print
-		$this->assertEquals( $expected, get_echo( 'wp_print_styles' ) );
+		// No styles left to print.
+		$this->assertSame( $expected, get_echo( 'wp_print_styles' ) );
 
 	}
 
@@ -235,7 +235,7 @@ class Tests_Dependencies_Styles extends WP_UnitTestCase {
 
 		wp_add_inline_style( 'handle', $style );
 
-		$this->assertEquals( $expected, get_echo( 'wp_print_styles' ) );
+		$this->assertSame( $expected, get_echo( 'wp_print_styles' ) );
 
 	}
 
@@ -250,7 +250,7 @@ class Tests_Dependencies_Styles extends WP_UnitTestCase {
 
 		wp_enqueue_style( 'handle', 'http://example.com', array(), 1 );
 
-		$this->assertEquals( $expected, get_echo( 'wp_print_styles' ) );
+		$this->assertSame( $expected, get_echo( 'wp_print_styles' ) );
 
 	}
 
@@ -272,7 +272,7 @@ CSS;
 		wp_style_add_data( 'handle', 'conditional', 'IE' );
 		wp_add_inline_style( 'handle', 'a { color: blue; }' );
 
-		$this->assertEqualsIgnoreEOL( $expected, get_echo( 'wp_print_styles' ) );
+		$this->assertSameIgnoreEOL( $expected, get_echo( 'wp_print_styles' ) );
 	}
 
 	/**
@@ -304,7 +304,7 @@ CSS;
 		wp_enqueue_style( 'handle-three' );
 		wp_add_inline_style( 'handle-three', $style );
 
-		$this->assertEquals( $expected, get_echo( 'wp_print_styles' ) );
+		$this->assertSame( $expected, get_echo( 'wp_print_styles' ) );
 	}
 
 	/**
diff --git a/tests/editor/wpEditors.php b/tests/editor/wpEditors.php
index 495701384c..bb159c64c6 100644
--- a/tests/editor/wpEditors.php
+++ b/tests/editor/wpEditors.php
@@ -32,7 +32,7 @@ class Tests_WP_Editors extends WP_UnitTestCase {
 		$post   = self::factory()->post->create_and_get( array( 'post_status' => 'publish' ) );
 		$actual = _WP_Editors::wp_link_query( array( 's' => $post->post_title ) );
 
-		$this->assertEqualSets(
+		$this->assertSameSets(
 			array(
 				array(
 					'ID'        => $post->ID,
@@ -53,7 +53,7 @@ class Tests_WP_Editors extends WP_UnitTestCase {
 		$actual = _WP_Editors::wp_link_query( array( 's' => 'foobarbaz' ) );
 		remove_filter( 'wp_link_query', array( $this, 'wp_link_query_callback' ) );
 
-		$this->assertEqualSets(
+		$this->assertSameSets(
 			array(
 				array(
 					'ID'        => 123,
@@ -73,7 +73,7 @@ class Tests_WP_Editors extends WP_UnitTestCase {
 		$actual = _WP_Editors::wp_link_query( array( 's' => $post->post_title ) );
 		remove_filter( 'wp_link_query', array( $this, 'wp_link_query_callback' ) );
 
-		$this->assertEqualSets(
+		$this->assertSameSets(
 			array(
 				array(
 					'ID'        => $post->ID,
diff --git a/tests/error-protection/recovery-mode-cookie-service.php b/tests/error-protection/recovery-mode-cookie-service.php
index 78f9099758..90ca646114 100644
--- a/tests/error-protection/recovery-mode-cookie-service.php
+++ b/tests/error-protection/recovery-mode-cookie-service.php
@@ -14,15 +14,15 @@ class Tests_Recovery_Mode_Cookie_Service extends WP_UnitTestCase {
 
 		$error = $service->validate_cookie( 'gibbersih' );
 		$this->assertWPError( $error );
-		$this->assertEquals( 'invalid_format', $error->get_error_code() );
+		$this->assertSame( 'invalid_format', $error->get_error_code() );
 
 		$error = $service->validate_cookie( base64_encode( 'test|data|format' ) );
 		$this->assertWPError( $error );
-		$this->assertEquals( 'invalid_format', $error->get_error_code() );
+		$this->assertSame( 'invalid_format', $error->get_error_code() );
 
 		$error = $service->validate_cookie( base64_encode( 'test|data|format|to|long' ) );
 		$this->assertWPError( $error );
-		$this->assertEquals( 'invalid_format', $error->get_error_code() );
+		$this->assertSame( 'invalid_format', $error->get_error_code() );
 	}
 
 	/**
@@ -39,7 +39,7 @@ class Tests_Recovery_Mode_Cookie_Service extends WP_UnitTestCase {
 
 		$error = $service->validate_cookie( $cookie );
 		$this->assertWPError( $error );
-		$this->assertEquals( 'expired', $error->get_error_code() );
+		$this->assertSame( 'expired', $error->get_error_code() );
 	}
 
 	/**
@@ -55,7 +55,7 @@ class Tests_Recovery_Mode_Cookie_Service extends WP_UnitTestCase {
 
 		$error = $service->validate_cookie( $cookie );
 		$this->assertWPError( $error );
-		$this->assertEquals( 'signature_mismatch', $error->get_error_code() );
+		$this->assertSame( 'signature_mismatch', $error->get_error_code() );
 	}
 
 	/**
@@ -72,7 +72,7 @@ class Tests_Recovery_Mode_Cookie_Service extends WP_UnitTestCase {
 
 		$error = $service->validate_cookie( $cookie );
 		$this->assertWPError( $error );
-		$this->assertEquals( 'invalid_created_at', $error->get_error_code() );
+		$this->assertSame( 'invalid_created_at', $error->get_error_code() );
 	}
 
 	/**
diff --git a/tests/error-protection/recovery-mode-key-service.php b/tests/error-protection/recovery-mode-key-service.php
index 5364fbf2b3..d5c513c3d1 100644
--- a/tests/error-protection/recovery-mode-key-service.php
+++ b/tests/error-protection/recovery-mode-key-service.php
@@ -24,7 +24,7 @@ class Tests_Recovery_Mode_Key_Service extends WP_UnitTestCase {
 		$error   = $service->validate_recovery_mode_key( '', 'abcd', HOUR_IN_SECONDS );
 
 		$this->assertWPError( $error );
-		$this->assertEquals( 'token_not_found', $error->get_error_code() );
+		$this->assertSame( 'token_not_found', $error->get_error_code() );
 	}
 
 	/**
@@ -37,7 +37,7 @@ class Tests_Recovery_Mode_Key_Service extends WP_UnitTestCase {
 		$error   = $service->validate_recovery_mode_key( '', 'abcd', HOUR_IN_SECONDS );
 
 		$this->assertWPError( $error );
-		$this->assertEquals( 'token_not_found', $error->get_error_code() );
+		$this->assertSame( 'token_not_found', $error->get_error_code() );
 	}
 
 	/**
@@ -50,7 +50,7 @@ class Tests_Recovery_Mode_Key_Service extends WP_UnitTestCase {
 		$error   = $service->validate_recovery_mode_key( 'token', 'abcd', HOUR_IN_SECONDS );
 
 		$this->assertWPError( $error );
-		$this->assertEquals( 'invalid_recovery_key_format', $error->get_error_code() );
+		$this->assertSame( 'invalid_recovery_key_format', $error->get_error_code() );
 	}
 
 
@@ -66,7 +66,7 @@ class Tests_Recovery_Mode_Key_Service extends WP_UnitTestCase {
 		$error   = $service->validate_recovery_mode_key( $token, 'abcd', HOUR_IN_SECONDS );
 
 		$this->assertWPError( $error );
-		$this->assertEquals( 'invalid_recovery_key_format', $error->get_error_code() );
+		$this->assertSame( 'invalid_recovery_key_format', $error->get_error_code() );
 	}
 
 	/**
@@ -79,7 +79,7 @@ class Tests_Recovery_Mode_Key_Service extends WP_UnitTestCase {
 		$error = $service->validate_recovery_mode_key( $token, '', HOUR_IN_SECONDS );
 
 		$this->assertWPError( $error );
-		$this->assertEquals( 'hash_mismatch', $error->get_error_code() );
+		$this->assertSame( 'hash_mismatch', $error->get_error_code() );
 	}
 
 	/**
@@ -92,7 +92,7 @@ class Tests_Recovery_Mode_Key_Service extends WP_UnitTestCase {
 		$error = $service->validate_recovery_mode_key( $token, 'abcd', HOUR_IN_SECONDS );
 
 		$this->assertWPError( $error );
-		$this->assertEquals( 'hash_mismatch', $error->get_error_code() );
+		$this->assertSame( 'hash_mismatch', $error->get_error_code() );
 	}
 
 	/**
@@ -110,7 +110,7 @@ class Tests_Recovery_Mode_Key_Service extends WP_UnitTestCase {
 		$error = $service->validate_recovery_mode_key( $token, $key, HOUR_IN_SECONDS );
 
 		$this->assertWPError( $error );
-		$this->assertEquals( 'key_expired', $error->get_error_code() );
+		$this->assertSame( 'key_expired', $error->get_error_code() );
 	}
 
 	/**
@@ -133,11 +133,11 @@ class Tests_Recovery_Mode_Key_Service extends WP_UnitTestCase {
 
 		$this->assertTrue( $service->validate_recovery_mode_key( $token, $key, HOUR_IN_SECONDS ) );
 
-		// data should be remove by first call
+		// Data should be remove by first call.
 		$error = $service->validate_recovery_mode_key( $token, $key, HOUR_IN_SECONDS );
 
 		$this->assertWPError( $error );
-		$this->assertEquals( 'token_not_found', $error->get_error_code() );
+		$this->assertSame( 'token_not_found', $error->get_error_code() );
 	}
 
 	/**
@@ -146,7 +146,7 @@ class Tests_Recovery_Mode_Key_Service extends WP_UnitTestCase {
 	public function test_validate_recovery_mode_key_returns_error_if_token_used_more_than_once_more_than_key_stored() {
 		$service = new WP_Recovery_Mode_Key_Service();
 
-		// create an extra key
+		// Create an extra key.
 		$token = $service->generate_recovery_mode_token();
 		$service->generate_and_store_recovery_mode_key( $token );
 
@@ -155,11 +155,11 @@ class Tests_Recovery_Mode_Key_Service extends WP_UnitTestCase {
 
 		$this->assertTrue( $service->validate_recovery_mode_key( $token, $key, HOUR_IN_SECONDS ) );
 
-		// data should be remove by first call
+		// Data should be remove by first call.
 		$error = $service->validate_recovery_mode_key( $token, $key, HOUR_IN_SECONDS );
 
 		$this->assertWPError( $error );
-		$this->assertEquals( 'token_not_found', $error->get_error_code() );
+		$this->assertSame( 'token_not_found', $error->get_error_code() );
 	}
 
 	/**
diff --git a/tests/external-http/basic.php b/tests/external-http/basic.php
index 8596cbd472..56f8c24441 100644
--- a/tests/external-http/basic.php
+++ b/tests/external-http/basic.php
@@ -5,34 +5,64 @@
 class Tests_External_HTTP_Basic extends WP_UnitTestCase {
 
 	function test_readme() {
-		// This test is designed to only run on trunk/master
+		// This test is designed to only run on trunk/master.
 		$this->skipOnAutomatedBranches();
 
 		$readme = file_get_contents( ABSPATH . 'readme.html' );
 
 		preg_match( '#Recommendations.*PHP</a> version <strong>([0-9.]*)#s', $readme, $matches );
 
-		$response = wp_remote_get( 'https://secure.php.net/supported-versions.php' );
-		if ( 200 !== wp_remote_retrieve_response_code( $response ) ) {
-			$this->fail( 'Could not contact PHP.net to check versions.' );
+		$response = wp_remote_get( 'https://www.php.net/supported-versions.php' );
+
+		$this->skipTestOnTimeout( $response );
+
+		$response_code = wp_remote_retrieve_response_code( $response );
+		$response_body = wp_remote_retrieve_body( $response );
+
+		if ( 200 !== $response_code ) {
+			$error_message = sprintf(
+				'Could not contact PHP.net to check versions. Response code: %s. Response body: %s',
+				$response_code,
+				$response_body
+			);
+
+			if ( 503 === $response_code ) {
+				$this->markTestSkipped( $error_message );
+			}
+
+			$this->fail( $error_message );
 		}
-		$php = wp_remote_retrieve_body( $response );
 
-		preg_match_all( '#<tr class="stable">\s*<td>\s*<a [^>]*>\s*([0-9.]*)#s', $php, $phpmatches );
+		preg_match_all( '#<tr class="stable">\s*<td>\s*<a [^>]*>\s*([0-9.]*)#s', $response_body, $phpmatches );
 
 		$this->assertContains( $matches[1], $phpmatches[1], "readme.html's Recommended PHP version is too old. Remember to update the WordPress.org Requirements page, too." );
 
 		preg_match( '#Recommendations.*MySQL</a> version <strong>([0-9.]*)#s', $readme, $matches );
 
 		$response = wp_remote_get( "https://dev.mysql.com/doc/relnotes/mysql/{$matches[1]}/en/" );
-		if ( 200 !== wp_remote_retrieve_response_code( $response ) ) {
-			$this->fail( 'Could not contact dev.MySQL.com to check versions.' );
+
+		$this->skipTestOnTimeout( $response );
+
+		$response_code = wp_remote_retrieve_response_code( $response );
+		$response_body = wp_remote_retrieve_body( $response );
+
+		if ( 200 !== $response_code ) {
+			$error_message = sprintf(
+				'Could not contact dev.MySQL.com to check versions. Response code: %s. Response body: %s',
+				$response_code,
+				$response_body
+			);
+
+			if ( 503 === $response_code ) {
+				$this->markTestSkipped( $error_message );
+			}
+
+			$this->fail( $error_message );
 		}
-		$mysql = wp_remote_retrieve_body( $response );
 
-		preg_match( '#(\d{4}-\d{2}-\d{2}), General Availability#', $mysql, $mysqlmatches );
+		preg_match( '#(\d{4}-\d{2}-\d{2}), General Availability#', $response_body, $mysqlmatches );
 
-		// Per https://www.mysql.com/support/, Oracle actively supports MySQL releases for 5 years from GA release
+		// Per https://www.mysql.com/support/, Oracle actively supports MySQL releases for 5 years from GA release.
 		$mysql_eol = strtotime( $mysqlmatches[1] . ' +5 years' );
 
 		$this->assertLessThan( $mysql_eol, time(), "readme.html's Recommended MySQL version is too old. Remember to update the WordPress.org Requirements page, too." );
diff --git a/tests/feed/atom.php b/tests/feed/atom.php
index 627beda0e1..cc9a30af72 100644
--- a/tests/feed/atom.php
+++ b/tests/feed/atom.php
@@ -17,7 +17,7 @@ class Tests_Feeds_Atom extends WP_UnitTestCase {
 	 * Setup a new user and attribute some posts.
 	 */
 	public static function wpSetUpBeforeClass( $factory ) {
-		// Create a user
+		// Create a user.
 		self::$user_id = $factory->user->create(
 			array(
 				'role'         => 'author',
@@ -26,7 +26,7 @@ class Tests_Feeds_Atom extends WP_UnitTestCase {
 			)
 		);
 
-		// Create a taxonomy
+		// Create a taxonomy.
 		self::$category = self::factory()->category->create_and_get(
 			array(
 				'name' => 'Test Category',
@@ -36,7 +36,7 @@ class Tests_Feeds_Atom extends WP_UnitTestCase {
 
 		$count = get_option( 'posts_per_rss' ) + 1;
 
-		// Create a few posts
+		// Create a few posts.
 		self::$posts = $factory->post->create_many(
 			$count,
 			array(
@@ -46,7 +46,7 @@ class Tests_Feeds_Atom extends WP_UnitTestCase {
 			)
 		);
 
-		// Assign a category to those posts
+		// Assign a category to those posts.
 		foreach ( self::$posts as $post ) {
 			wp_set_object_terms( $post, self::$category->slug, 'category' );
 		}
@@ -72,7 +72,7 @@ class Tests_Feeds_Atom extends WP_UnitTestCase {
 		global $post;
 		try {
 			// phpcs:ignore WordPress.PHP.NoSilencedErrors.Discouraged
-			@require( ABSPATH . 'wp-includes/feed-atom.php' );
+			@require ABSPATH . 'wp-includes/feed-atom.php';
 			$out = ob_get_clean();
 		} catch ( Exception $e ) {
 			$out = ob_get_clean();
@@ -97,33 +97,33 @@ class Tests_Feeds_Atom extends WP_UnitTestCase {
 		$this->assertCount( 1, $atom );
 
 		// Verify attributes.
-		$this->assertEquals( 'http://www.w3.org/2005/Atom', $atom[0]['attributes']['xmlns'] );
-		$this->assertEquals( 'http://purl.org/syndication/thread/1.0', $atom[0]['attributes']['xmlns:thr'] );
-		$this->assertEquals( site_url( '/wp-atom.php' ), $atom[0]['attributes']['xml:base'] );
+		$this->assertSame( 'http://www.w3.org/2005/Atom', $atom[0]['attributes']['xmlns'] );
+		$this->assertSame( 'http://purl.org/syndication/thread/1.0', $atom[0]['attributes']['xmlns:thr'] );
+		$this->assertSame( site_url( '/wp-atom.php' ), $atom[0]['attributes']['xml:base'] );
 
 		// Verify the <feed> element is present and contains a <title> child element.
 		$title = xml_find( $xml, 'feed', 'title' );
-		$this->assertEquals( get_option( 'blogname' ), $title[0]['content'] );
+		$this->assertSame( get_option( 'blogname' ), $title[0]['content'] );
 
 		// Verify the <feed> element is present and contains a <updated> child element.
 		$updated = xml_find( $xml, 'feed', 'updated' );
-		$this->assertEquals( strtotime( get_lastpostmodified() ), strtotime( $updated[0]['content'] ) );
+		$this->assertSame( strtotime( get_lastpostmodified() ), strtotime( $updated[0]['content'] ) );
 
 		// Verify the <feed> element is present and contains a <subtitle> child element.
 		$subtitle = xml_find( $xml, 'feed', 'subtitle' );
-		$this->assertEquals( get_option( 'blogdescription' ), $subtitle[0]['content'] );
+		$this->assertSame( get_option( 'blogdescription' ), $subtitle[0]['content'] );
 
 		// Verify the <feed> element is present and contains two <link> child elements.
 		$link = xml_find( $xml, 'feed', 'link' );
 		$this->assertCount( 2, $link );
 
 		// Verify the <feed> element is present and contains a <link rel="alternate"> child element.
-		$this->assertEquals( 'alternate', $link[0]['attributes']['rel'] );
-		$this->assertEquals( home_url(), $link[0]['attributes']['href'] );
+		$this->assertSame( 'alternate', $link[0]['attributes']['rel'] );
+		$this->assertSame( home_url(), $link[0]['attributes']['href'] );
 
 		// Verify the <feed> element is present and contains a <link rel="href"> child element.
-		$this->assertEquals( 'self', $link[1]['attributes']['rel'] );
-		$this->assertEquals( home_url( '/?feed=atom' ), $link[1]['attributes']['href'] );
+		$this->assertSame( 'self', $link[1]['attributes']['rel'] );
+		$this->assertSame( home_url( '/?feed=atom' ), $link[1]['attributes']['href'] );
 	}
 
 	/**
@@ -140,47 +140,47 @@ class Tests_Feeds_Atom extends WP_UnitTestCase {
 		// Verify we are displaying the correct number of posts.
 		$this->assertCount( $this->post_count, $entries );
 
-		// We Really only need to test X number of entries unless the content is different
+		// We really only need to test X number of entries unless the content is different.
 		$entries = array_slice( $entries, 1 );
 
 		// Check each of the desired entries against the known post data.
 		foreach ( $entries as $key => $entry ) {
 
-			// Get post for comparison
+			// Get post for comparison.
 			$id = xml_find( $entries[ $key ]['child'], 'id' );
 			preg_match( '/\?p=(\d+)/', $id[0]['content'], $matches );
 			$post = get_post( $matches[1] );
 
-			// Author
+			// Author.
 			$author = xml_find( $entries[ $key ]['child'], 'author', 'name' );
 			$user   = new WP_User( $post->post_author );
-			$this->assertEquals( $user->display_name, $author[0]['content'] );
+			$this->assertSame( $user->display_name, $author[0]['content'] );
 
-			// Title
+			// Title.
 			$title = xml_find( $entries[ $key ]['child'], 'title' );
-			$this->assertEquals( $post->post_title, $title[0]['content'] );
+			$this->assertSame( $post->post_title, $title[0]['content'] );
 
-			// Link rel="alternate"
+			// Link rel="alternate".
 			$link_alts = xml_find( $entries[ $key ]['child'], 'link' );
 			foreach ( $link_alts as $link_alt ) {
 				if ( 'alternate' === $link_alt['attributes']['rel'] ) {
-					$this->assertEquals( get_permalink( $post ), $link_alt['attributes']['href'] );
+					$this->assertSame( get_permalink( $post ), $link_alt['attributes']['href'] );
 				}
 			}
 
-			// Id
+			// ID.
 			$guid = xml_find( $entries[ $key ]['child'], 'id' );
-			$this->assertEquals( $post->guid, $id[0]['content'] );
+			$this->assertSame( $post->guid, $id[0]['content'] );
 
-			// Updated
+			// Updated.
 			$updated = xml_find( $entries[ $key ]['child'], 'updated' );
-			$this->assertEquals( strtotime( $post->post_modified_gmt ), strtotime( $updated[0]['content'] ) );
+			$this->assertSame( strtotime( $post->post_modified_gmt ), strtotime( $updated[0]['content'] ) );
 
-			// Published
+			// Published.
 			$published = xml_find( $entries[ $key ]['child'], 'published' );
-			$this->assertEquals( strtotime( $post->post_date_gmt ), strtotime( $published[0]['content'] ) );
+			$this->assertSame( strtotime( $post->post_date_gmt ), strtotime( $published[0]['content'] ) );
 
-			// Category
+			// Category.
 			foreach ( get_the_category( $post->ID ) as $term ) {
 				$terms[] = $term->name;
 			}
@@ -190,17 +190,93 @@ class Tests_Feeds_Atom extends WP_UnitTestCase {
 			}
 			unset( $terms );
 
-			// Content
+			// Content.
 			if ( ! $this->excerpt_only ) {
 				$content = xml_find( $entries[ $key ]['child'], 'content' );
-				$this->assertEquals( trim( apply_filters( 'the_content', $post->post_content ) ), trim( $content[0]['content'] ) );
+				$this->assertSame( trim( apply_filters( 'the_content', $post->post_content ) ), trim( $content[0]['content'] ) );
 			}
 
-			// Link rel="replies"
+			// Link rel="replies".
 			$link_replies = xml_find( $entries[ $key ]['child'], 'link' );
 			foreach ( $link_replies as $link_reply ) {
 				if ( 'replies' === $link_reply['attributes']['rel'] && 'application/atom+xml' === $link_reply['attributes']['type'] ) {
-					$this->assertEquals( get_post_comments_feed_link( $post->ID, 'atom' ), $link_reply['attributes']['href'] );
+					$this->assertSame( get_post_comments_feed_link( $post->ID, 'atom' ), $link_reply['attributes']['href'] );
+				}
+			}
+		}
+	}
+
+	/**
+	 * @ticket 33591
+	 */
+	function test_atom_enclosure_with_extended_url_length_type_parsing() {
+		$enclosures = array(
+			array(
+				// URL, length, type.
+				'actual'   => "https://wordpress.dev/wp-content/uploads/2017/09/movie.mp4\n318465\nvideo/mp4",
+				'expected' => array(
+					'href'   => 'https://wordpress.dev/wp-content/uploads/2017/09/movie.mp4',
+					'length' => 318465,
+					'type'   => 'video/mp4',
+				),
+			),
+			array(
+				// URL, type, length.
+				'actual'   => "https://wordpress.dev/wp-content/uploads/2017/09/movie.mp4\nvideo/mp4\n318465",
+				'expected' => array(
+					'href'   => 'https://wordpress.dev/wp-content/uploads/2017/09/movie.mp4',
+					'length' => 318465,
+					'type'   => 'video/mp4',
+				),
+			),
+			array(
+				// URL, length.
+				'actual'   => "https://wordpress.dev/wp-content/uploads/2017/09/movie.mp4\n318465",
+				'expected' => array(
+					'href'   => 'https://wordpress.dev/wp-content/uploads/2017/09/movie.mp4',
+					'length' => 318465,
+					'type'   => '',
+				),
+			),
+			array(
+				// URL, type.
+				'actual'   => "https://wordpress.dev/wp-content/uploads/2017/01/audio.mp3\n\naudio/mpeg",
+				'expected' => array(
+					'href'   => 'https://wordpress.dev/wp-content/uploads/2017/01/audio.mp3',
+					'length' => 0,
+					'type'   => 'audio/mpeg',
+				),
+			),
+			array(
+				// URL.
+				'actual'   => 'https://wordpress.dev/wp-content/uploads/2016/01/test.mp4',
+				'expected' => array(
+					'href'   => 'https://wordpress.dev/wp-content/uploads/2016/01/test.mp4',
+					'length' => 0,
+					'type'   => '',
+				),
+			),
+		);
+
+		$post_id = end( self::$posts );
+		foreach ( $enclosures as $enclosure ) {
+			add_post_meta( $post_id, 'enclosure', $enclosure['actual'] );
+		}
+		$this->go_to( '/?feed=atom' );
+		$feed    = $this->do_atom();
+		$xml     = xml_to_array( $feed );
+		$entries = xml_find( $xml, 'feed', 'entry' );
+		$entries = array_slice( $entries, 0, 1 );
+
+		foreach ( $entries as $key => $entry ) {
+			$links = xml_find( $entries[ $key ]['child'], 'link' );
+			$i     = 0;
+			foreach ( (array) $links as $link ) {
+				if ( 'enclosure' === $link['attributes']['rel'] ) {
+					$this->assertSame( $enclosures[ $i ]['expected']['href'], $link['attributes']['href'] );
+					$this->assertEquals( $enclosures[ $i ]['expected']['length'], $link['attributes']['length'] );
+					$this->assertSame( $enclosures[ $i ]['expected']['type'], $link['attributes']['type'] );
+					$i++;
 				}
 			}
 		}
diff --git a/tests/feed/rss2.php b/tests/feed/rss2.php
index 32d950a1a5..8eda26e9d2 100644
--- a/tests/feed/rss2.php
+++ b/tests/feed/rss2.php
@@ -18,7 +18,7 @@ class Tests_Feeds_RSS2 extends WP_UnitTestCase {
 	 * Setup a new user and attribute some posts.
 	 */
 	public static function wpSetUpBeforeClass( $factory ) {
-		// Create a user
+		// Create a user.
 		self::$user_id = $factory->user->create(
 			array(
 				'role'         => 'author',
@@ -27,7 +27,7 @@ class Tests_Feeds_RSS2 extends WP_UnitTestCase {
 			)
 		);
 
-		// Create a taxonomy
+		// Create a taxonomy.
 		self::$category = $factory->category->create_and_get(
 			array(
 				'name' => 'Foo Category',
@@ -41,7 +41,7 @@ class Tests_Feeds_RSS2 extends WP_UnitTestCase {
 		$count = get_option( 'posts_per_rss' ) + 1;
 
 		self::$posts = array();
-		// Create a few posts
+		// Create a few posts.
 		for ( $i = 1; $i <= $count; $i++ ) {
 			self::$posts[] = $factory->post->create(
 				array(
@@ -54,7 +54,7 @@ class Tests_Feeds_RSS2 extends WP_UnitTestCase {
 			);
 		}
 
-		// Assign a category to those posts
+		// Assign a category to those posts.
 		foreach ( self::$posts as $post ) {
 			wp_set_object_terms( $post, self::$category->slug, 'category' );
 		}
@@ -68,7 +68,7 @@ class Tests_Feeds_RSS2 extends WP_UnitTestCase {
 
 		$this->post_count   = (int) get_option( 'posts_per_rss' );
 		$this->excerpt_only = get_option( 'rss_use_excerpt' );
-		// this seems to break something
+		// This seems to break something.
 		update_option( 'use_smilies', false );
 
 		$this->set_permalink_structure( '/%year%/%monthnum%/%day%/%postname%/' );
@@ -84,7 +84,7 @@ class Tests_Feeds_RSS2 extends WP_UnitTestCase {
 		global $post;
 		try {
 			// phpcs:ignore WordPress.PHP.NoSilencedErrors.Discouraged
-			@require( ABSPATH . 'wp-includes/feed-rss2.php' );
+			@require ABSPATH . 'wp-includes/feed-rss2.php';
 			$out = ob_get_clean();
 		} catch ( Exception $e ) {
 			$out = ob_get_clean();
@@ -106,15 +106,15 @@ class Tests_Feeds_RSS2 extends WP_UnitTestCase {
 		$rss = xml_find( $xml, 'rss' );
 
 		// There should only be one <rss> child element.
-		$this->assertEquals( 1, count( $rss ) );
+		$this->assertSame( 1, count( $rss ) );
 
-		$this->assertEquals( '2.0', $rss[0]['attributes']['version'] );
-		$this->assertEquals( 'http://purl.org/rss/1.0/modules/content/', $rss[0]['attributes']['xmlns:content'] );
-		$this->assertEquals( 'http://wellformedweb.org/CommentAPI/', $rss[0]['attributes']['xmlns:wfw'] );
-		$this->assertEquals( 'http://purl.org/dc/elements/1.1/', $rss[0]['attributes']['xmlns:dc'] );
+		$this->assertSame( '2.0', $rss[0]['attributes']['version'] );
+		$this->assertSame( 'http://purl.org/rss/1.0/modules/content/', $rss[0]['attributes']['xmlns:content'] );
+		$this->assertSame( 'http://wellformedweb.org/CommentAPI/', $rss[0]['attributes']['xmlns:wfw'] );
+		$this->assertSame( 'http://purl.org/dc/elements/1.1/', $rss[0]['attributes']['xmlns:dc'] );
 
-		// rss should have exactly one child element (channel)
-		$this->assertEquals( 1, count( $rss[0]['child'] ) );
+		// RSS should have exactly one child element (channel).
+		$this->assertSame( 1, count( $rss[0]['child'] ) );
 	}
 
 	/**
@@ -127,24 +127,24 @@ class Tests_Feeds_RSS2 extends WP_UnitTestCase {
 		$feed = $this->do_rss2();
 		$xml  = xml_to_array( $feed );
 
-		// get the rss -> channel element
+		// Get the rss -> channel element.
 		$channel = xml_find( $xml, 'rss', 'channel' );
 
-		// The channel should be free of attributes
+		// The channel should be free of attributes.
 		$this->assertTrue( empty( $channel[0]['attributes'] ) );
 
-		// Verify the channel is present and contains a title child element
+		// Verify the channel is present and contains a title child element.
 		$title = xml_find( $xml, 'rss', 'channel', 'title' );
-		$this->assertEquals( get_option( 'blogname' ), $title[0]['content'] );
+		$this->assertSame( get_option( 'blogname' ), $title[0]['content'] );
 
 		$desc = xml_find( $xml, 'rss', 'channel', 'description' );
-		$this->assertEquals( get_option( 'blogdescription' ), $desc[0]['content'] );
+		$this->assertSame( get_option( 'blogdescription' ), $desc[0]['content'] );
 
 		$link = xml_find( $xml, 'rss', 'channel', 'link' );
-		$this->assertEquals( get_option( 'siteurl' ), $link[0]['content'] );
+		$this->assertSame( get_option( 'siteurl' ), $link[0]['content'] );
 
 		$pubdate = xml_find( $xml, 'rss', 'channel', 'lastBuildDate' );
-		$this->assertEquals( strtotime( get_lastpostmodified() ), strtotime( $pubdate[0]['content'] ) );
+		$this->assertSame( strtotime( get_lastpostmodified() ), strtotime( $pubdate[0]['content'] ) );
 	}
 
 	/**
@@ -180,45 +180,45 @@ class Tests_Feeds_RSS2 extends WP_UnitTestCase {
 		$feed = $this->do_rss2();
 		$xml  = xml_to_array( $feed );
 
-		// Get all the <item> child elements of the <channel> element
+		// Get all the <item> child elements of the <channel> element.
 		$items = xml_find( $xml, 'rss', 'channel', 'item' );
 
 		// Verify we are displaying the correct number of posts.
 		$this->assertCount( $this->post_count, $items );
 
-		// We Really only need to test X number of items unless the content is different
+		// We really only need to test X number of items unless the content is different.
 		$items = array_slice( $items, 1 );
 
-		// Check each of the desired entries against the known post data
+		// Check each of the desired entries against the known post data.
 		foreach ( $items as $key => $item ) {
 
-			// Get post for comparison
+			// Get post for comparison.
 			$guid = xml_find( $items[ $key ]['child'], 'guid' );
 			preg_match( '/\?p=(\d+)/', $guid[0]['content'], $matches );
 			$post = get_post( $matches[1] );
 
-			// Title
+			// Title.
 			$title = xml_find( $items[ $key ]['child'], 'title' );
-			$this->assertEquals( $post->post_title, $title[0]['content'] );
+			$this->assertSame( $post->post_title, $title[0]['content'] );
 
-			// Link
+			// Link.
 			$link = xml_find( $items[ $key ]['child'], 'link' );
-			$this->assertEquals( get_permalink( $post ), $link[0]['content'] );
+			$this->assertSame( get_permalink( $post ), $link[0]['content'] );
 
-			// Comment link
+			// Comment link.
 			$comments_link = xml_find( $items[ $key ]['child'], 'comments' );
-			$this->assertEquals( get_permalink( $post ) . '#respond', $comments_link[0]['content'] );
+			$this->assertSame( get_permalink( $post ) . '#respond', $comments_link[0]['content'] );
 
-			// Pub date
+			// Pub date.
 			$pubdate = xml_find( $items[ $key ]['child'], 'pubDate' );
-			$this->assertEquals( strtotime( $post->post_date_gmt ), strtotime( $pubdate[0]['content'] ) );
+			$this->assertSame( strtotime( $post->post_date_gmt ), strtotime( $pubdate[0]['content'] ) );
 
-			// Author
+			// Author.
 			$creator = xml_find( $items[ $key ]['child'], 'dc:creator' );
 			$user    = new WP_User( $post->post_author );
-			$this->assertEquals( $user->display_name, $creator[0]['content'] );
+			$this->assertSame( $user->display_name, $creator[0]['content'] );
 
-			// Categories (perhaps multiple)
+			// Categories (perhaps multiple).
 			$categories = xml_find( $items[ $key ]['child'], 'category' );
 			$cats       = array();
 			foreach ( get_the_category( $post->ID ) as $term ) {
@@ -232,34 +232,34 @@ class Tests_Feeds_RSS2 extends WP_UnitTestCase {
 				}
 			}
 			$cats = array_filter( $cats );
-			// Should be the same number of categories
-			$this->assertEquals( count( $cats ), count( $categories ) );
+			// Should be the same number of categories.
+			$this->assertSame( count( $cats ), count( $categories ) );
 
-			// ..with the same names
+			// ..with the same names.
 			foreach ( $cats as $id => $cat ) {
-				$this->assertEquals( $cat, $categories[ $id ]['content'] );
+				$this->assertSame( $cat, $categories[ $id ]['content'] );
 			}
 
-			// GUID
+			// GUID.
 			$guid = xml_find( $items[ $key ]['child'], 'guid' );
-			$this->assertEquals( 'false', $guid[0]['attributes']['isPermaLink'] );
-			$this->assertEquals( $post->guid, $guid[0]['content'] );
+			$this->assertSame( 'false', $guid[0]['attributes']['isPermaLink'] );
+			$this->assertSame( $post->guid, $guid[0]['content'] );
 
-			// Description / Excerpt
+			// Description / Excerpt.
 			if ( ! empty( $post->post_excerpt ) ) {
 				$description = xml_find( $items[ $key ]['child'], 'description' );
-				$this->assertEquals( trim( $post->post_excerpt ), trim( $description[0]['content'] ) );
+				$this->assertSame( trim( $post->post_excerpt ), trim( $description[0]['content'] ) );
 			}
 
-			// Post content
+			// Post content.
 			if ( ! $this->excerpt_only ) {
 				$content = xml_find( $items[ $key ]['child'], 'content:encoded' );
-				$this->assertEquals( trim( apply_filters( 'the_content', $post->post_content ) ), trim( $content[0]['content'] ) );
+				$this->assertSame( trim( apply_filters( 'the_content', $post->post_content ) ), trim( $content[0]['content'] ) );
 			}
 
-			// Comment rss
+			// Comment RSS.
 			$comment_rss = xml_find( $items[ $key ]['child'], 'wfw:commentRss' );
-			$this->assertEquals( html_entity_decode( get_post_comments_feed_link( $post->ID ) ), $comment_rss[0]['content'] );
+			$this->assertSame( html_entity_decode( get_post_comments_feed_link( $post->ID ) ), $comment_rss[0]['content'] );
 		}
 	}
 
@@ -273,21 +273,21 @@ class Tests_Feeds_RSS2 extends WP_UnitTestCase {
 		$feed = $this->do_rss2();
 		$xml  = xml_to_array( $feed );
 
-		// get all the rss -> channel -> item elements
+		// Get all the rss -> channel -> item elements.
 		$items = xml_find( $xml, 'rss', 'channel', 'item' );
 
-		// check each of the items against the known post data
+		// Check each of the items against the known post data.
 		foreach ( $items as $key => $item ) {
-			// Get post for comparison
+			// Get post for comparison.
 			$guid = xml_find( $items[ $key ]['child'], 'guid' );
 			preg_match( '/\?p=(\d+)/', $guid[0]['content'], $matches );
 			$post = get_post( $matches[1] );
 
-			// comment link
+			// Comment link.
 			$comments_link = xml_find( $items[ $key ]['child'], 'comments' );
 			$this->assertEmpty( $comments_link );
 
-			// comment rss
+			// Comment RSS.
 			$comment_rss = xml_find( $items[ $key ]['child'], 'wfw:commentRss' );
 			$this->assertEmpty( $comment_rss );
 		}
@@ -320,7 +320,7 @@ class Tests_Feeds_RSS2 extends WP_UnitTestCase {
 		$rss = xml_find( $xml, 'rss' );
 
 		// There should only be one <rss> child element.
-		$this->assertEquals( 1, count( $rss ) );
+		$this->assertSame( 1, count( $rss ) );
 	}
 
 	/*
@@ -348,7 +348,7 @@ class Tests_Feeds_RSS2 extends WP_UnitTestCase {
 		$rss = xml_find( $xml, 'rss' );
 
 		// There should only be one <rss> child element.
-		$this->assertEquals( 1, count( $rss ) );
+		$this->assertSame( 1, count( $rss ) );
 	}
 
 	/*
@@ -358,7 +358,7 @@ class Tests_Feeds_RSS2 extends WP_UnitTestCase {
 	 * @ticket 30210
 	 */
 	function test_valid_main_comment_feed_endpoint() {
-		// Generate a bunch of comments
+		// Generate a bunch of comments.
 		foreach ( self::$posts as $post ) {
 			self::factory()->comment->create_post_comments( $post, 3 );
 		}
@@ -381,7 +381,7 @@ class Tests_Feeds_RSS2 extends WP_UnitTestCase {
 		$rss = xml_find( $xml, 'rss' );
 
 		// There should only be one <rss> child element.
-		$this->assertEquals( 1, count( $rss ) );
+		$this->assertSame( 1, count( $rss ) );
 	}
 
 	/*
@@ -409,7 +409,7 @@ class Tests_Feeds_RSS2 extends WP_UnitTestCase {
 		$rss = xml_find( $xml, 'rss' );
 
 		// There should only be one <rss> child element.
-		$this->assertEquals( 1, count( $rss ) );
+		$this->assertSame( 1, count( $rss ) );
 	}
 
 	/*
@@ -437,7 +437,7 @@ class Tests_Feeds_RSS2 extends WP_UnitTestCase {
 		$rss = xml_find( $xml, 'rss' );
 
 		// There should only be one <rss> child element.
-		$this->assertEquals( 1, count( $rss ) );
+		$this->assertSame( 1, count( $rss ) );
 	}
 
 	/*
@@ -447,7 +447,7 @@ class Tests_Feeds_RSS2 extends WP_UnitTestCase {
 	 * @ticket 30210
 	 */
 	function test_valid_search_feed_endpoint() {
-		// An example of an valid search feed endpoint
+		// An example of an valid search feed endpoint.
 		$this->go_to( '?s=Lorem&feed=rss' );
 
 		// Verify the query object is a feed.
@@ -465,7 +465,7 @@ class Tests_Feeds_RSS2 extends WP_UnitTestCase {
 		$rss = xml_find( $xml, 'rss' );
 
 		// There should only be one <rss> child element.
-		$this->assertEquals( 1, count( $rss ) );
+		$this->assertSame( 1, count( $rss ) );
 	}
 
 	/**
@@ -483,7 +483,7 @@ class Tests_Feeds_RSS2 extends WP_UnitTestCase {
 		// Get the <rss> child element of <xml>.
 		$rss             = xml_find( $xml, $element );
 		$last_build_date = $rss[0]['child'][0]['child'][4]['content'];
-		$this->assertEquals( strtotime( get_feed_build_date( 'r' ) ), strtotime( $last_build_date ) );
+		$this->assertSame( strtotime( get_feed_build_date( 'r' ) ), strtotime( $last_build_date ) );
 	}
 
 
diff --git a/tests/file.php b/tests/file.php
index 481b3362c9..730d72c5c1 100644
--- a/tests/file.php
+++ b/tests/file.php
@@ -8,9 +8,7 @@ class Tests_File extends WP_UnitTestCase {
 	function setUp() {
 		parent::setUp();
 
-		$file      = tempnam( '/tmp', 'foo' );
-		$this->dir = dirname( $file );
-		unlink( $file );
+		$this->dir = untrailingslashit( get_temp_dir() );
 
 		$this->badchars = '"\'[]*&?$';
 	}
@@ -41,7 +39,7 @@ class Tests_File extends WP_UnitTestCase {
 		);
 
 		foreach ( $actual as $header => $value ) {
-			$this->assertEquals( $expected[ $header ], $value, $header );
+			$this->assertSame( $expected[ $header ], $value, $header );
 		}
 	}
 
@@ -63,7 +61,7 @@ class Tests_File extends WP_UnitTestCase {
 		);
 
 		foreach ( $actual as $header => $value ) {
-			$this->assertEquals( $expected[ $header ], $value, $header );
+			$this->assertSame( $expected[ $header ], $value, $header );
 		}
 	}
 
@@ -71,12 +69,12 @@ class Tests_File extends WP_UnitTestCase {
 		$fullpath = $path . DIRECTORY_SEPARATOR . $filename;
 
 		$fp = fopen( $fullpath, 'x' );
-		// file already exists?
+		// File already exists?
 		if ( ! $fp ) {
 			return false;
 		}
 
-		// write some random contents
+		// Write some random contents.
 		$c = rand_str();
 		fwrite( $fp, $c );
 		fclose( $fp );
@@ -91,7 +89,7 @@ class Tests_File extends WP_UnitTestCase {
 	}
 
 	function test_unique_filename_is_valid() {
-		// make sure it produces a valid, writable, unique filename
+		// Make sure it produces a valid, writable, unique filename.
 		$filename = wp_unique_filename( $this->dir, __FUNCTION__ . '.txt' );
 
 		$this->assertTrue( $this->is_unique_writable_file( $this->dir, $filename ) );
@@ -100,7 +98,7 @@ class Tests_File extends WP_UnitTestCase {
 	}
 
 	function test_unique_filename_is_unique() {
-		// make sure it produces two unique filenames
+		// Make sure it produces two unique filenames.
 		$name = __FUNCTION__;
 
 		$filename1 = wp_unique_filename( $this->dir, $name . '.txt' );
@@ -108,7 +106,7 @@ class Tests_File extends WP_UnitTestCase {
 		$filename2 = wp_unique_filename( $this->dir, $name . '.txt' );
 		$this->assertTrue( $this->is_unique_writable_file( $this->dir, $filename2 ) );
 
-		// the two should be different
+		// The two should be different.
 		$this->assertNotEquals( $filename1, $filename2 );
 
 		unlink( $this->dir . DIRECTORY_SEPARATOR . $filename1 );
@@ -119,8 +117,8 @@ class Tests_File extends WP_UnitTestCase {
 		$name     = __FUNCTION__;
 		$filename = wp_unique_filename( $this->dir, $name . $this->badchars . '.txt' );
 
-		// make sure the bad characters were all stripped out
-		$this->assertEquals( $name . '.txt', $filename );
+		// Make sure the bad characters were all stripped out.
+		$this->assertSame( $name . '.txt', $filename );
 
 		$this->assertTrue( $this->is_unique_writable_file( $this->dir, $filename ) );
 
@@ -132,8 +130,8 @@ class Tests_File extends WP_UnitTestCase {
 		// "foo/foo.txt"
 		$filename = wp_unique_filename( $this->dir, $name . '/' . $name . '.txt' );
 
-		// the slash should be removed, i.e. "foofoo.txt"
-		$this->assertEquals( $name . $name . '.txt', $filename );
+		// The slash should be removed, i.e. "foofoo.txt".
+		$this->assertSame( $name . $name . '.txt', $filename );
 
 		$this->assertTrue( $this->is_unique_writable_file( $this->dir, $filename ) );
 
@@ -144,8 +142,8 @@ class Tests_File extends WP_UnitTestCase {
 		$name     = __FUNCTION__;
 		$filename = wp_unique_filename( $this->dir, $name . '.php.txt' );
 
-		// "foo.php.txt" becomes "foo.php_.txt"
-		$this->assertEquals( $name . '.php_.txt', $filename );
+		// "foo.php.txt" becomes "foo.php_.txt".
+		$this->assertSame( $name . '.php_.txt', $filename );
 
 		$this->assertTrue( $this->is_unique_writable_file( $this->dir, $filename ) );
 
@@ -156,7 +154,7 @@ class Tests_File extends WP_UnitTestCase {
 		$name     = __FUNCTION__;
 		$filename = wp_unique_filename( $this->dir, $name );
 
-		$this->assertEquals( $name, $filename );
+		$this->assertSame( $name, $filename );
 
 		$this->assertTrue( $this->is_unique_writable_file( $this->dir, $filename ) );
 
@@ -233,7 +231,7 @@ class Tests_File extends WP_UnitTestCase {
 		}
 
 		$this->assertWPError( $verify );
-		$this->assertEquals( 'signature_verification_failed', $verify->get_error_code() );
+		$this->assertSame( 'signature_verification_failed', $verify->get_error_code() );
 	}
 
 	function filter_trust_plus85Tq_key( $keys ) {
diff --git a/tests/filesystem/base.php b/tests/filesystem/base.php
index 356be3c9e0..f186cbb961 100644
--- a/tests/filesystem/base.php
+++ b/tests/filesystem/base.php
@@ -24,7 +24,7 @@ abstract class WP_Filesystem_UnitTestCase extends WP_UnitTestCase {
 		return 'MockFS';
 	}
 	function filter_abstraction_file( $file ) {
-		return dirname( dirname( dirname( __FILE__ ) ) ) . '/includes/mock-fs.php';
+		return dirname( dirname( __DIR__ ) ) . '/includes/mock-fs.php';
 	}
 
 	function test_is_MockFS_sane() {
@@ -33,12 +33,12 @@ abstract class WP_Filesystem_UnitTestCase extends WP_UnitTestCase {
 
 		$wp_filesystem->init( '/' );
 
-		// Test creation/exists checks
+		// Test creation/exists checks.
 		$this->assertFalse( $wp_filesystem->is_dir( '/test/' ) );
 		$wp_filesystem->mkdir( '/test' );
 		$this->assertTrue( $wp_filesystem->exists( '/test' ) );
 		$this->assertTrue( $wp_filesystem->is_dir( '/test/' ) );
 		$this->assertFalse( $wp_filesystem->is_file( '/test' ) );
-		//$this->assertFalse( true );
+		// $this->assertFalse( true );
 	}
 }
diff --git a/tests/filesystem/findFolder.php b/tests/filesystem/findFolder.php
index 9f754a7c55..3b517531ed 100644
--- a/tests/filesystem/findFolder.php
+++ b/tests/filesystem/findFolder.php
@@ -1,6 +1,6 @@
 <?php
 
-require_once dirname( __FILE__ ) . '/base.php';
+require_once __DIR__ . '/base.php';
 
 /**
  * @group filesystem
@@ -20,7 +20,7 @@ class WP_Filesystem_find_folder_UnitTestCases extends WP_Filesystem_UnitTestCase
 		);
 
 		$path = $fs->find_folder( '/var/www/wordpress/' );
-		$this->assertEquals( '/var/www/wordpress/', $path );
+		$this->assertSame( '/var/www/wordpress/', $path );
 
 		$path = $fs->find_folder( '/this/directory/doesnt/exist/' );
 		$this->assertFalse( $path );
@@ -44,10 +44,10 @@ class WP_Filesystem_find_folder_UnitTestCases extends WP_Filesystem_UnitTestCase
 		);
 
 		$path = $fs->find_folder( '/var/www/example.com/wordpress/' );
-		$this->assertEquals( '/www/example.com/wordpress/', $path );
+		$this->assertSame( '/www/example.com/wordpress/', $path );
 
 		$path = $fs->find_folder( '/var/www/wp.example.com/wordpress/wp-content/' );
-		$this->assertEquals( '/www/wp.example.com/wordpress/wp-content/', $path );
+		$this->assertSame( '/www/wp.example.com/wordpress/wp-content/', $path );
 
 	}
 
@@ -72,10 +72,10 @@ class WP_Filesystem_find_folder_UnitTestCases extends WP_Filesystem_UnitTestCase
 		);
 
 		$path = $fs->abspath( '/var/www/example.com/wp.example.com/wordpress/' );
-		$this->assertEquals( '/wp.example.com/wordpress/', $path );
+		$this->assertSame( '/wp.example.com/wordpress/', $path );
 
 		$path = $fs->abspath( '/var/www/example.com/' );
-		$this->assertEquals( '/', $path );
+		$this->assertSame( '/', $path );
 
 	}
 
@@ -103,15 +103,15 @@ class WP_Filesystem_find_folder_UnitTestCases extends WP_Filesystem_UnitTestCase
 
 		// www.example.com
 		$path = $fs->abspath( '/var/www/example.com/www/' );
-		$this->assertEquals( '/example.com/www/', $path );
+		$this->assertSame( '/example.com/www/', $path );
 
 		// sub.example.com
 		$path = $fs->abspath( '/var/www/example.com/sub/' );
-		$this->assertEquals( '/example.com/sub/', $path );
+		$this->assertSame( '/example.com/sub/', $path );
 
-		// sub.example.com - Plugins
+		// sub.example.com - Plugins.
 		$path = $fs->find_folder( '/var/www/example.com/sub/wp-content/plugins/' );
-		$this->assertEquals( '/example.com/sub/wp-content/plugins/', $path );
+		$this->assertSame( '/example.com/sub/wp-content/plugins/', $path );
 	}
 
 }
diff --git a/tests/filters.php b/tests/filters.php
index 03af7e56ce..d3c4d0aff9 100644
--- a/tests/filters.php
+++ b/tests/filters.php
@@ -13,16 +13,16 @@ class Tests_Filters extends WP_UnitTestCase {
 		$val = __FUNCTION__ . '_val';
 
 		add_filter( $tag, array( $a, 'filter' ) );
-		$this->assertEquals( $val, apply_filters( $tag, $val ) );
+		$this->assertSame( $val, apply_filters( $tag, $val ) );
 
-		// only one event occurred for the hook, with empty args
-		$this->assertEquals( 1, $a->get_call_count() );
-		// only our hook was called
-		$this->assertEquals( array( $tag ), $a->get_tags() );
+		// Only one event occurred for the hook, with empty args.
+		$this->assertSame( 1, $a->get_call_count() );
+		// Only our hook was called.
+		$this->assertSame( array( $tag ), $a->get_tags() );
 
 		$argsvar = $a->get_args();
 		$args    = array_pop( $argsvar );
-		$this->assertEquals( array( $val ), $args );
+		$this->assertSame( array( $val ), $args );
 	}
 
 	function test_remove_filter() {
@@ -31,17 +31,17 @@ class Tests_Filters extends WP_UnitTestCase {
 		$val = __FUNCTION__ . '_val';
 
 		add_filter( $tag, array( $a, 'filter' ) );
-		$this->assertEquals( $val, apply_filters( $tag, $val ) );
+		$this->assertSame( $val, apply_filters( $tag, $val ) );
 
-		// make sure our hook was called correctly
-		$this->assertEquals( 1, $a->get_call_count() );
-		$this->assertEquals( array( $tag ), $a->get_tags() );
+		// Make sure our hook was called correctly.
+		$this->assertSame( 1, $a->get_call_count() );
+		$this->assertSame( array( $tag ), $a->get_tags() );
 
-		// now remove the filter, do it again, and make sure it's not called this time
+		// Now remove the filter, do it again, and make sure it's not called this time.
 		remove_filter( $tag, array( $a, 'filter' ) );
-		$this->assertEquals( $val, apply_filters( $tag, $val ) );
-		$this->assertEquals( 1, $a->get_call_count() );
-		$this->assertEquals( array( $tag ), $a->get_tags() );
+		$this->assertSame( $val, apply_filters( $tag, $val ) );
+		$this->assertSame( 1, $a->get_call_count() );
+		$this->assertSame( array( $tag ), $a->get_tags() );
 
 	}
 
@@ -52,29 +52,29 @@ class Tests_Filters extends WP_UnitTestCase {
 			$this->assertFalse( has_filter( $tag, $func ) );
 			$this->assertFalse( has_filter( $tag ) );
 			add_filter( $tag, $func );
-			$this->assertEquals( 10, has_filter( $tag, $func ) );
+			$this->assertSame( 10, has_filter( $tag, $func ) );
 			$this->assertTrue( has_filter( $tag ) );
 			remove_filter( $tag, $func );
 			$this->assertFalse( has_filter( $tag, $func ) );
 			$this->assertFalse( has_filter( $tag ) );
 	}
 
-	// one tag with multiple filters
+	// One tag with multiple filters.
 	function test_multiple_filters() {
 		$a1  = new MockAction();
 		$a2  = new MockAction();
 		$tag = __FUNCTION__;
 		$val = __FUNCTION__ . '_val';
 
-		// add both filters to the hook
+		// Add both filters to the hook.
 		add_filter( $tag, array( $a1, 'filter' ) );
 		add_filter( $tag, array( $a2, 'filter' ) );
 
-		$this->assertEquals( $val, apply_filters( $tag, $val ) );
+		$this->assertSame( $val, apply_filters( $tag, $val ) );
 
-		// both filters called once each
-		$this->assertEquals( 1, $a1->get_call_count() );
-		$this->assertEquals( 1, $a2->get_call_count() );
+		// Both filters called once each.
+		$this->assertSame( 1, $a1->get_call_count() );
+		$this->assertSame( 1, $a2->get_call_count() );
 	}
 
 	function test_filter_args_1() {
@@ -84,12 +84,12 @@ class Tests_Filters extends WP_UnitTestCase {
 		$arg1 = __FUNCTION__ . '_arg1';
 
 		add_filter( $tag, array( $a, 'filter' ), 10, 2 );
-		// call the filter with a single argument
-		$this->assertEquals( $val, apply_filters( $tag, $val, $arg1 ) );
+		// Call the filter with a single argument.
+		$this->assertSame( $val, apply_filters( $tag, $val, $arg1 ) );
 
-		$this->assertEquals( 1, $a->get_call_count() );
+		$this->assertSame( 1, $a->get_call_count() );
 		$argsvar = $a->get_args();
-		$this->assertEquals( array( $val, $arg1 ), array_pop( $argsvar ) );
+		$this->assertSame( array( $val, $arg1 ), array_pop( $argsvar ) );
 	}
 
 	function test_filter_args_2() {
@@ -100,21 +100,21 @@ class Tests_Filters extends WP_UnitTestCase {
 		$arg1 = __FUNCTION__ . '_arg1';
 		$arg2 = __FUNCTION__ . '_arg2';
 
-		// a1 accepts two arguments, a2 doesn't
+		// $a1 accepts two arguments, $a2 doesn't.
 		add_filter( $tag, array( $a1, 'filter' ), 10, 3 );
 		add_filter( $tag, array( $a2, 'filter' ) );
-		// call the filter with two arguments
-		$this->assertEquals( $val, apply_filters( $tag, $val, $arg1, $arg2 ) );
+		// Call the filter with two arguments.
+		$this->assertSame( $val, apply_filters( $tag, $val, $arg1, $arg2 ) );
 
-		// a1 should be called with both args
-		$this->assertEquals( 1, $a1->get_call_count() );
+		// $a1 should be called with both args.
+		$this->assertSame( 1, $a1->get_call_count() );
 		$argsvar1 = $a1->get_args();
-		$this->assertEquals( array( $val, $arg1, $arg2 ), array_pop( $argsvar1 ) );
+		$this->assertSame( array( $val, $arg1, $arg2 ), array_pop( $argsvar1 ) );
 
-		// a2 should be called with one only
-		$this->assertEquals( 1, $a2->get_call_count() );
+		// $a2 should be called with one only.
+		$this->assertSame( 1, $a2->get_call_count() );
 		$argsvar2 = $a2->get_args();
-		$this->assertEquals( array( $val ), array_pop( $argsvar2 ) );
+		$this->assertSame( array( $val ), array_pop( $argsvar2 ) );
 	}
 
 	function test_filter_priority() {
@@ -122,22 +122,22 @@ class Tests_Filters extends WP_UnitTestCase {
 		$tag = __FUNCTION__;
 		$val = __FUNCTION__ . '_val';
 
-		// make two filters with different priorities
+		// Make two filters with different priorities.
 		add_filter( $tag, array( $a, 'filter' ), 10 );
 		add_filter( $tag, array( $a, 'filter2' ), 9 );
-		$this->assertEquals( $val, apply_filters( $tag, $val ) );
+		$this->assertSame( $val, apply_filters( $tag, $val ) );
 
-		// there should be two events, one per filter
-		$this->assertEquals( 2, $a->get_call_count() );
+		// There should be two events, one per filter.
+		$this->assertSame( 2, $a->get_call_count() );
 
 		$expected = array(
-			// filter2 is called first because it has priority 9
+			// 'filter2' is called first because it has priority 9.
 			array(
 				'filter' => 'filter2',
 				'tag'    => $tag,
 				'args'   => array( $val ),
 			),
-			// filter 1 is called second
+			// 'filter' is called second.
 			array(
 				'filter' => 'filter',
 				'tag'    => $tag,
@@ -145,7 +145,7 @@ class Tests_Filters extends WP_UnitTestCase {
 			),
 		);
 
-		$this->assertEquals( $expected, $a->get_events() );
+		$this->assertSame( $expected, $a->get_events() );
 	}
 
 	function test_all_filter() {
@@ -154,18 +154,18 @@ class Tests_Filters extends WP_UnitTestCase {
 		$tag2 = __FUNCTION__ . '_2';
 		$val  = __FUNCTION__ . '_val';
 
-		// add an 'all' filter
+		// Add an 'all' filter.
 		add_filter( 'all', array( $a, 'filterall' ) );
-		// do some filters
-		$this->assertEquals( $val, apply_filters( $tag1, $val ) );
-		$this->assertEquals( $val, apply_filters( $tag2, $val ) );
-		$this->assertEquals( $val, apply_filters( $tag1, $val ) );
-		$this->assertEquals( $val, apply_filters( $tag1, $val ) );
+		// Apply some filters.
+		$this->assertSame( $val, apply_filters( $tag1, $val ) );
+		$this->assertSame( $val, apply_filters( $tag2, $val ) );
+		$this->assertSame( $val, apply_filters( $tag1, $val ) );
+		$this->assertSame( $val, apply_filters( $tag1, $val ) );
 
-		// our filter should have been called once for each apply_filters call
-		$this->assertEquals( 4, $a->get_call_count() );
-		// the right hooks should have been called in order
-		$this->assertEquals( array( $tag1, $tag2, $tag1, $tag1 ), $a->get_tags() );
+		// Our filter should have been called once for each apply_filters call.
+		$this->assertSame( 4, $a->get_call_count() );
+		// The right hooks should have been called in order.
+		$this->assertSame( array( $tag1, $tag2, $tag1, $tag1 ), $a->get_tags() );
 
 		remove_filter( 'all', array( $a, 'filterall' ) );
 		$this->assertFalse( has_filter( 'all', array( $a, 'filterall' ) ) );
@@ -179,21 +179,21 @@ class Tests_Filters extends WP_UnitTestCase {
 
 		add_filter( 'all', array( $a, 'filterall' ) );
 		$this->assertTrue( has_filter( 'all' ) );
-		$this->assertEquals( 10, has_filter( 'all', array( $a, 'filterall' ) ) );
-		$this->assertEquals( $val, apply_filters( $tag, $val ) );
+		$this->assertSame( 10, has_filter( 'all', array( $a, 'filterall' ) ) );
+		$this->assertSame( $val, apply_filters( $tag, $val ) );
 
-		// make sure our hook was called correctly
-		$this->assertEquals( 1, $a->get_call_count() );
-		$this->assertEquals( array( $tag ), $a->get_tags() );
+		// Make sure our hook was called correctly.
+		$this->assertSame( 1, $a->get_call_count() );
+		$this->assertSame( array( $tag ), $a->get_tags() );
 
-		// now remove the filter, do it again, and make sure it's not called this time
+		// Now remove the filter, do it again, and make sure it's not called this time.
 		remove_filter( 'all', array( $a, 'filterall' ) );
 		$this->assertFalse( has_filter( 'all', array( $a, 'filterall' ) ) );
 		$this->assertFalse( has_filter( 'all' ) );
-		$this->assertEquals( $val, apply_filters( $tag, $val ) );
-		// call cound should remain at 1
-		$this->assertEquals( 1, $a->get_call_count() );
-		$this->assertEquals( array( $tag ), $a->get_tags() );
+		$this->assertSame( $val, apply_filters( $tag, $val ) );
+		// Call cound should remain at 1.
+		$this->assertSame( 1, $a->get_call_count() );
+		$this->assertSame( array( $tag ), $a->get_tags() );
 	}
 
 	/**
@@ -229,7 +229,7 @@ class Tests_Filters extends WP_UnitTestCase {
 
 		$args = $a->get_args();
 		$this->assertSame( $args[0][0], $obj );
-		// just in case we don't trust assertSame
+		// Just in case we don't trust assertSame().
 		$obj->foo = true;
 		$this->assertFalse( empty( $args[0][0]->foo ) );
 	}
@@ -248,17 +248,17 @@ class Tests_Filters extends WP_UnitTestCase {
 
 		$result = apply_filters_ref_array( $tag, array( 'string', &$obj ) );
 
-		$this->assertEquals( $result, 'string_append_append' );
+		$this->assertSame( $result, 'string_append_append' );
 
 		$args = $a->get_args();
 		$this->assertSame( $args[0][1], $obj );
-		// just in case we don't trust assertSame
+		// Just in case we don't trust assertSame().
 		$obj->foo = true;
 		$this->assertFalse( empty( $args[0][1]->foo ) );
 
 		$args = $b->get_args();
 		$this->assertSame( $args[0][1], $obj );
-		// just in case we don't trust assertSame
+		// Just in case we don't trust assertSame().
 		$obj->foo = true;
 		$this->assertFalse( empty( $args[0][1]->foo ) );
 
@@ -277,7 +277,7 @@ class Tests_Filters extends WP_UnitTestCase {
 		$tag = __FUNCTION__;
 		$val = __FUNCTION__ . '_val';
 
-		// No priority
+		// No priority.
 		add_filter( $tag, array( $a, 'filter' ), 11 );
 		add_filter( $tag, array( $a, 'filter' ), 12 );
 		$this->assertTrue( has_filter( $tag ) );
@@ -285,7 +285,7 @@ class Tests_Filters extends WP_UnitTestCase {
 		remove_all_filters( $tag );
 		$this->assertFalse( has_filter( $tag ) );
 
-		// Remove priorities one at a time
+		// Remove priorities one at a time.
 		add_filter( $tag, array( $a, 'filter' ), 11 );
 		add_filter( $tag, array( $a, 'filter' ), 12 );
 		$this->assertTrue( has_filter( $tag ) );
@@ -303,7 +303,7 @@ class Tests_Filters extends WP_UnitTestCase {
 		$p = 'Foo';
 
 		add_filter( 'tests_apply_filters_deprecated', array( __CLASS__, 'deprecated_filter_callback' ) );
-		$p = apply_filters_deprecated( 'tests_apply_filters_deprecated', array( $p ), '4.6' );
+		$p = apply_filters_deprecated( 'tests_apply_filters_deprecated', array( $p ), '4.6.0' );
 		remove_filter( 'tests_apply_filters_deprecated', array( __CLASS__, 'deprecated_filter_callback' ) );
 
 		$this->assertSame( 'Bar', $p );
@@ -323,7 +323,7 @@ class Tests_Filters extends WP_UnitTestCase {
 		$p2 = 'Foo2';
 
 		add_filter( 'tests_apply_filters_deprecated', array( __CLASS__, 'deprecated_filter_callback_multiple_params' ), 10, 2 );
-		$p1 = apply_filters_deprecated( 'tests_apply_filters_deprecated', array( $p1, $p2 ), '4.6' );
+		$p1 = apply_filters_deprecated( 'tests_apply_filters_deprecated', array( $p1, $p2 ), '4.6.0' );
 		remove_filter( 'tests_apply_filters_deprecated', array( __CLASS__, 'deprecated_filter_callback_multiple_params' ), 10, 2 );
 
 		$this->assertSame( 'Bar1', $p1 );
@@ -345,7 +345,7 @@ class Tests_Filters extends WP_UnitTestCase {
 	public function test_apply_filters_deprecated_without_filter() {
 		$val = 'Foobar';
 
-		$this->assertSame( $val, apply_filters_deprecated( 'tests_apply_filters_deprecated', array( $val ), '4.6' ) );
+		$this->assertSame( $val, apply_filters_deprecated( 'tests_apply_filters_deprecated', array( $val ), '4.6.0' ) );
 	}
 
 	private $current_priority;
@@ -373,7 +373,7 @@ class Tests_Filters extends WP_UnitTestCase {
 		do_action( 'test_current_priority' );
 		remove_action( 'test_current_priority', array( $this, '_other_priority_action' ), 99 );
 
-		$this->assertSame( false, $this->current_priority );
+		$this->assertFalse( $this->current_priority );
 	}
 
 	public function _other_priority_action() {
diff --git a/tests/formatting/Autop.php b/tests/formatting/Autop.php
index 087cbf25c6..25e09d4c88 100644
--- a/tests/formatting/Autop.php
+++ b/tests/formatting/Autop.php
@@ -4,7 +4,10 @@
  * @group formatting
  */
 class Tests_Formatting_Autop extends WP_UnitTestCase {
-	//From ticket https://core.trac.wordpress.org/ticket/11008
+
+	/**
+	 * @ticket 11008
+	 */
 	function test_first_post() {
 		$expected  = '<p>Welcome to WordPress!  This post contains important information.  After you read it, you can make it private to hide it from visitors but still have the information handy for future reference.</p>
 <p>First things first:</p>
@@ -16,7 +19,7 @@ When a new version is released, <a href="%2$s" title="If you are already logged
 Upgrading is a couple of clicks!</p>
 <p>Then you can start enjoying the WordPress experience:</p>
 <ul>
-<li>Edit your personal information at <a href="%3$s" title="Edit settings like your password, your display name and your contact information">Users &#8250; Your Profile</a></li>
+<li>Edit your personal information at <a href="%3$s" title="Edit settings like your password, your display name and your contact information">Users &#8250; Profile</a></li>
 <li>Start publishing at <a href="%4$s" title="Create a new post">Posts &#8250; Add New</a> and at <a href="%5$s" title="Create a new page">Pages &#8250; Add New</a></li>
 <li>Browse and install plugins at <a href="%6$s" title="Browse and install plugins at the official WordPress repository directly from your Dashboard">Plugins &#8250; Add New</a></li>
 <li>Browse and install themes at <a href="%7$s" title="Browse and install themes at the official WordPress repository directly from your Dashboard">Appearance &#8250; Add New Themes</a></li>
@@ -41,7 +44,7 @@ Upgrading is a couple of clicks!
 
 Then you can start enjoying the WordPress experience:
 <ul>
-<li>Edit your personal information at <a href="%3$s" title="Edit settings like your password, your display name and your contact information">Users &#8250; Your Profile</a></li>
+<li>Edit your personal information at <a href="%3$s" title="Edit settings like your password, your display name and your contact information">Users &#8250; Profile</a></li>
 <li>Start publishing at <a href="%4$s" title="Create a new post">Posts &#8250; Add New</a> and at <a href="%5$s" title="Create a new page">Pages &#8250; Add New</a></li>
 <li>Browse and install plugins at <a href="%6$s" title="Browse and install plugins at the official WordPress repository directly from your Dashboard">Plugins &#8250; Add New</a></li>
 <li>Browse and install themes at <a href="%7$s" title="Browse and install themes at the official WordPress repository directly from your Dashboard">Appearance &#8250; Add New Themes</a></li>
@@ -56,10 +59,10 @@ Thank you for selecting WordPress.  We wish you happy publishing!
 PS.  Not yet subscribed for update notifications?  <a href="%1$s" title="Subscribe to the WordPress mailing list for Release Notifications">Do it now!</a>
 ';
 
-		// On windows environments, the EOL-style is \r\n
+		// On Windows environments, the EOL-style is \r\n.
 		$expected = str_replace( "\r\n", "\n", $expected );
 
-		$this->assertEquals( $expected, wpautop( $test_data ) );
+		$this->assertSame( $expected, wpautop( $test_data ) );
 	}
 
 	/**
@@ -72,21 +75,21 @@ PS.  Not yet subscribed for update notifications?  <a href="%1$s" title="Subscri
 		$code = str_replace( "\r", '', $code );
 		$code = htmlentities( $code );
 
-		// Not wrapped in <p> tags
+		// Not wrapped in <p> tags.
 		$str = "<pre>$code</pre>";
-		$this->assertEquals( $str, trim( wpautop( $str ) ) );
+		$this->assertSame( $str, trim( wpautop( $str ) ) );
 
-		// Text before/after is wrapped in <p> tags
+		// Text before/after is wrapped in <p> tags.
 		$str = "Look at this code\n\n<pre>$code</pre>\n\nIsn't that cool?";
 
-		// Expected text after wpautop
+		// Expected text after wpautop().
 		$expected = '<p>Look at this code</p>' . "\n<pre>" . $code . "</pre>\n" . '<p>Isn\'t that cool?</p>';
-		$this->assertEquals( $expected, trim( wpautop( $str ) ) );
+		$this->assertSame( $expected, trim( wpautop( $str ) ) );
 
-		// Make sure HTML breaks are maintained if manually inserted
+		// Make sure HTML breaks are maintained if manually inserted.
 		$str      = "Look at this code\n\n<pre>Line1<br />Line2<br>Line3<br/>Line4\nActual Line 2\nActual Line 3</pre>\n\nCool, huh?";
 		$expected = "<p>Look at this code</p>\n<pre>Line1<br />Line2<br>Line3<br/>Line4\nActual Line 2\nActual Line 3</pre>\n<p>Cool, huh?</p>";
-		$this->assertEquals( $expected, trim( wpautop( $str ) ) );
+		$this->assertSame( $expected, trim( wpautop( $str ) ) );
 	}
 
 	/**
@@ -96,7 +99,7 @@ PS.  Not yet subscribed for update notifications?  <a href="%1$s" title="Subscri
 	 */
 	public function test_skip_input_elements() {
 		$str = 'Username: <input type="text" id="username" name="username" /><br />Password: <input type="password" id="password1" name="password1" />';
-		$this->assertEquals( "<p>$str</p>", trim( wpautop( $str ) ) );
+		$this->assertSame( "<p>$str</p>", trim( wpautop( $str ) ) );
 	}
 
 	/**
@@ -142,7 +145,7 @@ PS.  Not yet subscribed for update notifications?  <a href="%1$s" title="Subscri
 			</video>' .
 			"\n\nParagraph two.";
 
-		$expected = "<p>Paragraph one.</p>\n" . // line breaks only after <p>
+		$expected = "<p>Paragraph one.</p>\n" . // Line breaks only after <p>.
 			'<p><video class="wp-video-shortcode" id="video-0-1" width="640" height="360" preload="metadata" controls="controls">' .
 			'<source type="video/mp4" src="http://domain.tld/wp-content/uploads/2013/12/xyz.mp4" />' .
 			'<!-- WebM/VP8 for Firefox4, Opera, and Chrome -->' .
@@ -157,7 +160,7 @@ PS.  Not yet subscribed for update notifications?  <a href="%1$s" title="Subscri
 			"http://domain.tld/wp-content/uploads/2013/12/xyz.mp4</a></video></p>\n" .
 			'<p>Paragraph two.</p>';
 
-		// When running the content through wpautop() from wp_richedit_pre()
+		// When running the content through wpautop() from wp_richedit_pre().
 		$shortcode_content = "Paragraph one.\n\n" .
 			'[video width="720" height="480" mp4="http://domain.tld/wp-content/uploads/2013/12/xyz.mp4"]
 			<!-- WebM/VP8 for Firefox4, Opera, and Chrome -->
@@ -171,7 +174,7 @@ PS.  Not yet subscribed for update notifications?  <a href="%1$s" title="Subscri
 			[/video]' .
 			"\n\nParagraph two.";
 
-		$shortcode_expected = "<p>Paragraph one.</p>\n" . // line breaks only after <p>
+		$shortcode_expected = "<p>Paragraph one.</p>\n" . // Line breaks only after <p>.
 			'<p>[video width="720" height="480" mp4="http://domain.tld/wp-content/uploads/2013/12/xyz.mp4"]' .
 			'<!-- WebM/VP8 for Firefox4, Opera, and Chrome --><source type="video/webm" src="myvideo.webm" />' .
 			'<!-- Ogg/Vorbis for older Firefox and Opera versions --><source type="video/ogg" src="myvideo.ogv" />' .
@@ -180,9 +183,9 @@ PS.  Not yet subscribed for update notifications?  <a href="%1$s" title="Subscri
 			"[/video]</p>\n" .
 			'<p>Paragraph two.</p>';
 
-		$this->assertEquals( $expected, trim( wpautop( $content ) ) );
-		$this->assertEquals( $expected, trim( wpautop( $content2 ) ) );
-		$this->assertEquals( $shortcode_expected, trim( wpautop( $shortcode_content ) ) );
+		$this->assertSame( $expected, trim( wpautop( $content ) ) );
+		$this->assertSame( $expected, trim( wpautop( $content2 ) ) );
+		$this->assertSame( $shortcode_expected, trim( wpautop( $shortcode_content ) ) );
 	}
 
 	/**
@@ -206,7 +209,7 @@ Paragraph one.
 
 Paragraph two.';
 
-		$expected1 = "<p>Paragraph one.</p>\n" . // line breaks only after <p>
+		$expected1 = "<p>Paragraph one.</p>\n" . // Line breaks only after <p>.
 			'<p><object width="400" height="224" classid="clsid:d27cdb6e-ae6d-11cf-96b8-444553540000" codebase="http://download.macromedia.com/pub/shockwave/cabs/flash/swflash.cab#version=6,0,40,0">' .
 			'<param name="src" value="http://domain.tld/wp-content/uploads/2013/12/xyz.swf" />' .
 			'<param name="allowfullscreen" value="true" />' .
@@ -242,7 +245,7 @@ Paragraph one.
 
 Paragraph two.';
 
-		$expected2 = "<p>Paragraph one.</p>\n" . // line breaks only after block tags
+		$expected2 = "<p>Paragraph one.</p>\n" . // Line breaks only after block tags.
 			'<div class="video-player" id="x-video-0">' . "\n" .
 			'<object classid="clsid:D27CDB6E-AE6D-11cf-96B8-444553540000" width="640" height="360" id="video-0" standby="Standby text">' .
 			'<param name="movie" value="http://domain.tld/wp-content/uploads/2013/12/xyz.swf" />' .
@@ -260,8 +263,8 @@ Paragraph two.';
 			"</object></div>\n" .
 			'<p>Paragraph two.</p>';
 
-		$this->assertEquals( $expected1, trim( wpautop( $content1 ) ) );
-		$this->assertEquals( $expected2, trim( wpautop( $content2 ) ) );
+		$this->assertSame( $expected1, trim( wpautop( $content1 ) ) );
+		$this->assertSame( $expected2, trim( wpautop( $content2 ) ) );
 	}
 
 	/**
@@ -271,7 +274,7 @@ Paragraph two.';
 	 */
 	public function test_skip_select_option_elements() {
 		$str = 'Country: <select id="state" name="state"><option value="1">Alabama</option><option value="2">Alaska</option><option value="3">Arizona</option><option value="4">Arkansas</option><option value="5">California</option></select>';
-		$this->assertEquals( "<p>$str</p>", trim( wpautop( $str ) ) );
+		$this->assertSame( "<p>$str</p>", trim( wpautop( $str ) ) );
 	}
 
 	/**
@@ -335,13 +338,13 @@ Paragraph two.';
 		}
 
 		$expected = join( "\n", $content );
-		$input    = join( "\n\n", $content ); // WS difference
+		$input    = join( "\n\n", $content ); // Whitespace difference.
 
-		$this->assertEquals( $expected, trim( wpautop( $input ) ) );
+		$this->assertSame( $expected, trim( wpautop( $input ) ) );
 
-		$input = join( '', $content ); // WS difference
+		$input = join( '', $content ); // Whitespace difference.
 
-		$this->assertEquals( $expected, trim( wpautop( $input ) ) );
+		$this->assertSame( $expected, trim( wpautop( $input ) ) );
 
 		// Check whitespace addition.
 		$content = array();
@@ -353,7 +356,7 @@ Paragraph two.';
 		$expected = join( "\n", $content );
 		$input    = join( '', $content );
 
-		$this->assertEquals( $expected, trim( wpautop( $input ) ) );
+		$this->assertSame( $expected, trim( wpautop( $input ) ) );
 
 		// Check whitespace addition with attributes.
 		$content = array();
@@ -365,7 +368,7 @@ Paragraph two.';
 		$expected = join( "\n", $content );
 		$input    = join( '', $content );
 
-		$this->assertEquals( $expected, trim( wpautop( $input ) ) );
+		$this->assertSame( $expected, trim( wpautop( $input ) ) );
 	}
 
 	/**
@@ -377,7 +380,7 @@ Paragraph two.';
 		$content  = '<blockquote>foo</blockquote>';
 		$expected = '<blockquote><p>foo</p></blockquote>';
 
-		$this->assertEquals( $expected, trim( wpautop( $content ) ) );
+		$this->assertSame( $expected, trim( wpautop( $content ) ) );
 	}
 
 	/**
@@ -426,7 +429,7 @@ Paragraph two.';
 		$content  = join( "\n\n", $content );
 		$expected = join( "\n", $expected );
 
-		$this->assertEquals( $expected, trim( wpautop( $content ) ) );
+		$this->assertSame( $expected, trim( wpautop( $content ) ) );
 	}
 
 	/**
@@ -436,7 +439,7 @@ Paragraph two.';
 	 * @dataProvider data_element_sanity
 	 */
 	function test_element_sanity( $input, $output ) {
-		return $this->assertEquals( $output, wpautop( $input ) );
+		return $this->assertSame( $output, wpautop( $input ) );
 	}
 
 	function data_element_sanity() {
@@ -502,7 +505,7 @@ line 3<br />
 line 4<br />
 line 5</p>';
 
-		$this->assertEqualsIgnoreEOL( $expected, trim( wpautop( $content ) ) );
+		$this->assertSameIgnoreEOL( $expected, trim( wpautop( $content ) ) );
 	}
 
 	/**
@@ -521,7 +524,7 @@ line 2<br/>
 		$expected = '<p>line 1</p>
 <p>line 2</p>';
 
-		$this->assertEqualsIgnoreEOL( $expected, trim( wpautop( $content ) ) );
+		$this->assertSameIgnoreEOL( $expected, trim( wpautop( $content ) ) );
 	}
 
 
@@ -532,7 +535,7 @@ line 2<br/>
 		$content  = 'a<div>b</div>';
 		$expected = "<p>a</p>\n<div>b</div>";
 
-		$this->assertEquals( $expected, trim( wpautop( $content ) ) );
+		$this->assertSame( $expected, trim( wpautop( $content ) ) );
 	}
 
 	/**
@@ -555,8 +558,8 @@ line 2<br/>
 		$expected2 = '<figure>
 <img src="example.jpg" /><figcaption>Caption</figcaption></figure>';
 
-		$this->assertEquals( $expected1, trim( wpautop( $content1 ) ) );
-		$this->assertEqualsIgnoreEOL( $expected2, trim( wpautop( $content2 ) ) );
+		$this->assertSame( $expected1, trim( wpautop( $content1 ) ) );
+		$this->assertSameIgnoreEOL( $expected2, trim( wpautop( $content2 ) ) );
 	}
 
 	/**
@@ -566,7 +569,7 @@ line 2<br/>
 		$content  = 'paragraph1<hr>paragraph2';
 		$expected = "<p>paragraph1</p>\n<hr>\n<p>paragraph2</p>";
 
-		$this->assertEquals( $expected, trim( wpautop( $content ) ) );
+		$this->assertSame( $expected, trim( wpautop( $content ) ) );
 	}
 
 	/**
@@ -584,7 +587,7 @@ line 2<br/>
 
 		$expected = '<p>' . $content . '</p>';
 
-		$this->assertEqualsIgnoreEOL( $expected, trim( wpautop( $content ) ) );
+		$this->assertSameIgnoreEOL( $expected, trim( wpautop( $content ) ) );
 	}
 
 	/**
@@ -600,6 +603,6 @@ line 2<br/>
 
 		$expected = '<p>' . $content . '</p>';
 
-		$this->assertEqualsIgnoreEOL( $expected, trim( wpautop( $content ) ) );
+		$this->assertSameIgnoreEOL( $expected, trim( wpautop( $content ) ) );
 	}
 }
diff --git a/tests/formatting/BlogInfo.php b/tests/formatting/BlogInfo.php
index 8d513a3ccc..37ce3450fa 100644
--- a/tests/formatting/BlogInfo.php
+++ b/tests/formatting/BlogInfo.php
@@ -15,14 +15,14 @@ class Tests_Formatting_BlogInfo extends WP_UnitTestCase {
 		$old_locale = $locale;
 
 		$locale = $test_locale;
-		$this->assertEquals( $expected, get_bloginfo( 'language' ) );
+		$this->assertSame( $expected, get_bloginfo( 'language' ) );
 
 		$locale = $old_locale;
 	}
 
 	function locales() {
 		return array(
-			//     Locale          Language code
+			// Locale, language code.
 			array( 'en_US', 'en-US' ),
 			array( 'ar', 'ar' ),
 			array( 'de_DE', 'de-DE' ),
@@ -54,16 +54,16 @@ class Tests_Formatting_BlogInfo extends WP_UnitTestCase {
 			$sanitized_value = sanitize_option( 'blogname', $value );
 			update_option( 'blogname', $sanitized_value );
 
-			$this->assertEquals( $expected, $sanitized_value );
-			$this->assertEquals( $expected, get_bloginfo( 'name' ) );
-			$this->assertEquals( $expected, get_bloginfo( 'name', 'display' ) );
+			$this->assertSame( $expected, $sanitized_value );
+			$this->assertSame( $expected, get_bloginfo( 'name' ) );
+			$this->assertSame( $expected, get_bloginfo( 'name', 'display' ) );
 
 			$sanitized_value = sanitize_option( 'blogdescription', $value );
 			update_option( 'blogdescription', $sanitized_value );
 
-			$this->assertEquals( $expected, $sanitized_value );
-			$this->assertEquals( $expected, get_bloginfo( 'description' ) );
-			$this->assertEquals( $expected, get_bloginfo( 'description', 'display' ) );
+			$this->assertSame( $expected, $sanitized_value );
+			$this->assertSame( $expected, get_bloginfo( 'description' ) );
+			$this->assertSame( $expected, get_bloginfo( 'description', 'display' ) );
 		}
 
 		// Restore old values.
diff --git a/tests/formatting/CapitalPDangit.php b/tests/formatting/CapitalPDangit.php
index 06aec81b49..70656a66a3 100644
--- a/tests/formatting/CapitalPDangit.php
+++ b/tests/formatting/CapitalPDangit.php
@@ -7,14 +7,14 @@
 class Tests_Formatting_CapitalPDangit extends WP_UnitTestCase {
 	function test_esc_attr_quotes() {
 		global $wp_current_filter;
-		$this->assertEquals( 'Something about WordPress', capital_P_dangit( 'Something about Wordpress' ) );
-		$this->assertEquals( 'Something about (WordPress', capital_P_dangit( 'Something about (Wordpress' ) );
-		$this->assertEquals( 'Something about &#8216;WordPress', capital_P_dangit( 'Something about &#8216;Wordpress' ) );
-		$this->assertEquals( 'Something about &#8220;WordPress', capital_P_dangit( 'Something about &#8220;Wordpress' ) );
-		$this->assertEquals( 'Something about >WordPress', capital_P_dangit( 'Something about >Wordpress' ) );
-		$this->assertEquals( 'Wordpress', capital_P_dangit( 'Wordpress' ) );
+		$this->assertSame( 'Something about WordPress', capital_P_dangit( 'Something about Wordpress' ) );
+		$this->assertSame( 'Something about (WordPress', capital_P_dangit( 'Something about (Wordpress' ) );
+		$this->assertSame( 'Something about &#8216;WordPress', capital_P_dangit( 'Something about &#8216;Wordpress' ) );
+		$this->assertSame( 'Something about &#8220;WordPress', capital_P_dangit( 'Something about &#8220;Wordpress' ) );
+		$this->assertSame( 'Something about >WordPress', capital_P_dangit( 'Something about >Wordpress' ) );
+		$this->assertSame( 'Wordpress', capital_P_dangit( 'Wordpress' ) );
 
 		$wp_current_filter = array( 'the_title' );
-		$this->assertEquals( 'WordPress', capital_P_dangit( 'Wordpress' ) );
+		$this->assertSame( 'WordPress', capital_P_dangit( 'Wordpress' ) );
 	}
 }
diff --git a/tests/formatting/CleanPre.php b/tests/formatting/CleanPre.php
index c49ad469e9..e5b1d965a1 100644
--- a/tests/formatting/CleanPre.php
+++ b/tests/formatting/CleanPre.php
@@ -13,13 +13,13 @@ class Tests_Formatting_CleanPre extends WP_UnitTestCase {
 		$source = 'a b c\n<br />sldfj<br />';
 		$res    = 'a b c\nsldfj';
 
-		$this->assertEquals( $res, clean_pre( $source ) );
+		$this->assertSame( $res, clean_pre( $source ) );
 	}
 
 	function test_removes_self_closing_br_without_space() {
 		$source = 'a b c\n<br/>sldfj<br/>';
 		$res    = 'a b c\nsldfj';
-		$this->assertEquals( $res, clean_pre( $source ) );
+		$this->assertSame( $res, clean_pre( $source ) );
 	}
 
 	// I don't think this can ever happen in production;
@@ -29,12 +29,12 @@ class Tests_Formatting_CleanPre extends WP_UnitTestCase {
 	function test_removes_html_br() {
 		$source = 'a b c\n<br>sldfj<br>';
 		$res    = 'a b c\nsldfj';
-		$this->assertEquals( $res, clean_pre( $source ) );
+		$this->assertSame( $res, clean_pre( $source ) );
 	}
 
 	function test_removes_p() {
 		$source = "<p>isn't this exciting!</p><p>oh indeed!</p>";
 		$res    = "\nisn't this exciting!\noh indeed!";
-		$this->assertEquals( $res, clean_pre( $source ) );
+		$this->assertSame( $res, clean_pre( $source ) );
 	}
 }
diff --git a/tests/formatting/ConvertInvalidEntries.php b/tests/formatting/ConvertInvalidEntries.php
index 23192b8974..05e77fe6bf 100644
--- a/tests/formatting/ConvertInvalidEntries.php
+++ b/tests/formatting/ConvertInvalidEntries.php
@@ -7,7 +7,7 @@ class Tests_Formatting_ConvertInvalidEntities extends WP_UnitTestCase {
 	function test_replaces_windows1252_entities_with_unicode_ones() {
 		$input  = '&#130;&#131;&#132;&#133;&#134;&#135;&#136;&#137;&#138;&#139;&#140;&#145;&#146;&#147;&#148;&#149;&#150;&#151;&#152;&#153;&#154;&#155;&#156;&#159;';
 		$output = '&#8218;&#402;&#8222;&#8230;&#8224;&#8225;&#710;&#8240;&#352;&#8249;&#338;&#8216;&#8217;&#8220;&#8221;&#8226;&#8211;&#8212;&#732;&#8482;&#353;&#8250;&#339;&#376;';
-		$this->assertEquals( $output, convert_invalid_entities( $input ) );
+		$this->assertSame( $output, convert_invalid_entities( $input ) );
 	}
 
 	/**
@@ -16,10 +16,10 @@ class Tests_Formatting_ConvertInvalidEntities extends WP_UnitTestCase {
 	function test_replaces_latin_letter_z_with_caron() {
 		$input  = '&#142;&#158;';
 		$output = '&#381;&#382;';
-		$this->assertEquals( $output, convert_invalid_entities( $input ) );
+		$this->assertSame( $output, convert_invalid_entities( $input ) );
 	}
 
 	function test_escapes_lone_ampersands() {
-		$this->assertEquals( 'at&#038;t', convert_chars( 'at&t' ) );
+		$this->assertSame( 'at&#038;t', convert_chars( 'at&t' ) );
 	}
 }
diff --git a/tests/formatting/Emoji.php b/tests/formatting/Emoji.php
index 34d88fd987..211848d7c6 100644
--- a/tests/formatting/Emoji.php
+++ b/tests/formatting/Emoji.php
@@ -6,8 +6,8 @@
  */
 class Tests_Formatting_Emoji extends WP_UnitTestCase {
 
-	private $png_cdn = 'https://s.w.org/images/core/emoji/12.0.0-1/72x72/';
-	private $svn_cdn = 'https://s.w.org/images/core/emoji/12.0.0-1/svg/';
+	private $png_cdn = 'https://s.w.org/images/core/emoji/13.0.0/72x72/';
+	private $svn_cdn = 'https://s.w.org/images/core/emoji/13.0.0/svg/';
 
 	/**
 	 * @ticket 36525
@@ -82,22 +82,22 @@ class Tests_Formatting_Emoji extends WP_UnitTestCase {
 	public function data_wp_encode_emoji() {
 		return array(
 			array(
-				// Not emoji
+				// Not emoji.
 				'‚Äô',
 				'‚Äô',
 			),
 			array(
-				// Simple emoji
+				// Simple emoji.
 				'üôÇ',
 				'&#x1f642;',
 			),
 			array(
-				// Skin tone, gender, ZWJ, emoji selector
+				// Skin tone, gender, ZWJ, emoji selector.
 				'üëÆüèº‚Äç‚ôÄÔ∏è',
 				'&#x1f46e;&#x1f3fc;&#x200d;&#x2640;&#xfe0f;',
 			),
 			array(
-				// Unicode 10
+				// Unicode 10.
 				'üßö',
 				'&#x1f9da;',
 			),
@@ -115,22 +115,22 @@ class Tests_Formatting_Emoji extends WP_UnitTestCase {
 	public function data_wp_staticize_emoji() {
 		$data = array(
 			array(
-				// Not emoji
+				// Not emoji.
 				'‚Äô',
 				'‚Äô',
 			),
 			array(
-				// Simple emoji
+				// Simple emoji.
 				'üôÇ',
 				'<img src="' . $this->png_cdn . '1f642.png" alt="üôÇ" class="wp-smiley" style="height: 1em; max-height: 1em;" />',
 			),
 			array(
-				// Skin tone, gender, ZWJ, emoji selector
+				// Skin tone, gender, ZWJ, emoji selector.
 				'üëÆüèº‚Äç‚ôÄÔ∏è',
 				'<img src="' . $this->png_cdn . '1f46e-1f3fc-200d-2640-fe0f.png" alt="üëÆüèº‚Äç‚ôÄÔ∏è" class="wp-smiley" style="height: 1em; max-height: 1em;" />',
 			),
 			array(
-				// Unicode 10
+				// Unicode 10.
 				'üßö',
 				'<img src="' . $this->png_cdn . '1f9da.png" alt="üßö" class="wp-smiley" style="height: 1em; max-height: 1em;" />',
 			),
diff --git a/tests/formatting/EscAttr.php b/tests/formatting/EscAttr.php
index faba68169b..65e661ca87 100644
--- a/tests/formatting/EscAttr.php
+++ b/tests/formatting/EscAttr.php
@@ -6,27 +6,27 @@
 class Tests_Formatting_EscAttr extends WP_UnitTestCase {
 	function test_esc_attr_quotes() {
 		$attr = '"double quotes"';
-		$this->assertEquals( '&quot;double quotes&quot;', esc_attr( $attr ) );
+		$this->assertSame( '&quot;double quotes&quot;', esc_attr( $attr ) );
 
 		$attr = "'single quotes'";
-		$this->assertEquals( '&#039;single quotes&#039;', esc_attr( $attr ) );
+		$this->assertSame( '&#039;single quotes&#039;', esc_attr( $attr ) );
 
 		$attr = "'mixed' " . '"quotes"';
-		$this->assertEquals( '&#039;mixed&#039; &quot;quotes&quot;', esc_attr( $attr ) );
+		$this->assertSame( '&#039;mixed&#039; &quot;quotes&quot;', esc_attr( $attr ) );
 
 		// Handles double encoding?
 		$attr = '"double quotes"';
-		$this->assertEquals( '&quot;double quotes&quot;', esc_attr( esc_attr( $attr ) ) );
+		$this->assertSame( '&quot;double quotes&quot;', esc_attr( esc_attr( $attr ) ) );
 
 		$attr = "'single quotes'";
-		$this->assertEquals( '&#039;single quotes&#039;', esc_attr( esc_attr( $attr ) ) );
+		$this->assertSame( '&#039;single quotes&#039;', esc_attr( esc_attr( $attr ) ) );
 
 		$attr = "'mixed' " . '"quotes"';
-		$this->assertEquals( '&#039;mixed&#039; &quot;quotes&quot;', esc_attr( esc_attr( $attr ) ) );
+		$this->assertSame( '&#039;mixed&#039; &quot;quotes&quot;', esc_attr( esc_attr( $attr ) ) );
 	}
 
 	function test_esc_attr_amp() {
 		$out = esc_attr( 'foo & bar &baz; &nbsp;' );
-		$this->assertEquals( 'foo &amp; bar &amp;baz; &nbsp;', $out );
+		$this->assertSame( 'foo &amp; bar &amp;baz; &nbsp;', $out );
 	}
 }
diff --git a/tests/formatting/EscHtml.php b/tests/formatting/EscHtml.php
index 0ef1eedf5e..4db00dfb0a 100644
--- a/tests/formatting/EscHtml.php
+++ b/tests/formatting/EscHtml.php
@@ -5,36 +5,36 @@
  */
 class Tests_Formatting_EscHtml extends WP_UnitTestCase {
 	function test_esc_html_basics() {
-		// Simple string
+		// Simple string.
 		$html = 'The quick brown fox.';
-		$this->assertEquals( $html, esc_html( $html ) );
+		$this->assertSame( $html, esc_html( $html ) );
 
-		// URL with &
+		// URL with &.
 		$html    = 'http://localhost/trunk/wp-login.php?action=logout&_wpnonce=cd57d75985';
 		$escaped = 'http://localhost/trunk/wp-login.php?action=logout&amp;_wpnonce=cd57d75985';
-		$this->assertEquals( $escaped, esc_html( $html ) );
+		$this->assertSame( $escaped, esc_html( $html ) );
 
-		// SQL query
+		// SQL query.
 		$html    = "SELECT meta_key, meta_value FROM wp_trunk_sitemeta WHERE meta_key IN ('site_name', 'siteurl', 'active_sitewide_plugins', '_site_transient_timeout_theme_roots', '_site_transient_theme_roots', 'site_admins', 'can_compress_scripts', 'global_terms_enabled') AND site_id = 1";
 		$escaped = 'SELECT meta_key, meta_value FROM wp_trunk_sitemeta WHERE meta_key IN (&#039;site_name&#039;, &#039;siteurl&#039;, &#039;active_sitewide_plugins&#039;, &#039;_site_transient_timeout_theme_roots&#039;, &#039;_site_transient_theme_roots&#039;, &#039;site_admins&#039;, &#039;can_compress_scripts&#039;, &#039;global_terms_enabled&#039;) AND site_id = 1';
-		$this->assertEquals( $escaped, esc_html( $html ) );
+		$this->assertSame( $escaped, esc_html( $html ) );
 	}
 
 	function test_escapes_ampersands() {
 		$source = 'penn & teller & at&t';
 		$res    = 'penn &amp; teller &amp; at&amp;t';
-		$this->assertEquals( $res, esc_html( $source ) );
+		$this->assertSame( $res, esc_html( $source ) );
 	}
 
 	function test_escapes_greater_and_less_than() {
 		$source = 'this > that < that <randomhtml />';
 		$res    = 'this &gt; that &lt; that &lt;randomhtml /&gt;';
-		$this->assertEquals( $res, esc_html( $source ) );
+		$this->assertSame( $res, esc_html( $source ) );
 	}
 
 	function test_ignores_existing_entities() {
 		$source = '&#038; &#x00A3; &#x22; &amp;';
 		$res    = '&#038; &#xA3; &#x22; &amp;';
-		$this->assertEquals( $res, esc_html( $source ) );
+		$this->assertSame( $res, esc_html( $source ) );
 	}
 }
diff --git a/tests/formatting/EscTextarea.php b/tests/formatting/EscTextarea.php
index 5ca9608492..e57f48f99e 100644
--- a/tests/formatting/EscTextarea.php
+++ b/tests/formatting/EscTextarea.php
@@ -16,7 +16,7 @@ class Tests_Formatting_EscTextarea extends WP_UnitTestCase {
 	function test_esc_textarea_charset_iso_8859_1() {
 		add_filter( 'pre_option_blog_charset', array( $this, '_charset_iso_8859_1' ) );
 		$iso8859_1 = 'Fran' . chr( 135 ) . 'ais';
-		$this->assertEquals( $iso8859_1, esc_textarea( $iso8859_1 ) );
+		$this->assertSame( $iso8859_1, esc_textarea( $iso8859_1 ) );
 		remove_filter( 'pre_option_blog_charset', array( $this, '_charset_iso_8859_1' ) );
 	}
 
@@ -30,7 +30,7 @@ class Tests_Formatting_EscTextarea extends WP_UnitTestCase {
 	function test_esc_textarea_charset_utf_8() {
 		add_filter( 'pre_option_blog_charset', array( $this, '_charset_utf_8' ) );
 		$utf8 = 'Fran' . chr( 195 ) . chr( 167 ) . 'ais';
-		$this->assertEquals( $utf8, esc_textarea( $utf8 ) );
+		$this->assertSame( $utf8, esc_textarea( $utf8 ) );
 		remove_filter( 'pre_option_blog_charset', array( $this, '_charset_utf_8' ) );
 	}
 }
diff --git a/tests/formatting/EscUrl.php b/tests/formatting/EscUrl.php
index d183f6f9cb..13ecc4af66 100644
--- a/tests/formatting/EscUrl.php
+++ b/tests/formatting/EscUrl.php
@@ -9,41 +9,41 @@ class Tests_Formatting_EscUrl extends WP_UnitTestCase {
 	 * @ticket 23605
 	 */
 	function test_spaces() {
-		$this->assertEquals( 'http://example.com/Mr%20WordPress', esc_url( 'http://example.com/Mr WordPress' ) );
-		$this->assertEquals( 'http://example.com/Mr%20WordPress', esc_url( 'http://example.com/Mr%20WordPress' ) );
-		$this->assertEquals( 'http://example.com/Mr%20%20WordPress', esc_url( 'http://example.com/Mr%20%20WordPress' ) );
-		$this->assertEquals( 'http://example.com/Mr+WordPress', esc_url( 'http://example.com/Mr+WordPress' ) );
-		$this->assertEquals( 'http://example.com/Mr+WordPress', esc_url( ' http://example.com/Mr+WordPress' ) );
-
-		$this->assertEquals( 'http://example.com/?foo=one%20two%20three&#038;bar=four', esc_url( 'http://example.com/?foo=one two three&bar=four' ) );
-		$this->assertEquals( 'http://example.com/?foo=one%20two%20three&#038;bar=four', esc_url( 'http://example.com/?foo=one%20two%20three&bar=four' ) );
+		$this->assertSame( 'http://example.com/Mr%20WordPress', esc_url( 'http://example.com/Mr WordPress' ) );
+		$this->assertSame( 'http://example.com/Mr%20WordPress', esc_url( 'http://example.com/Mr%20WordPress' ) );
+		$this->assertSame( 'http://example.com/Mr%20%20WordPress', esc_url( 'http://example.com/Mr%20%20WordPress' ) );
+		$this->assertSame( 'http://example.com/Mr+WordPress', esc_url( 'http://example.com/Mr+WordPress' ) );
+		$this->assertSame( 'http://example.com/Mr+WordPress', esc_url( ' http://example.com/Mr+WordPress' ) );
+
+		$this->assertSame( 'http://example.com/?foo=one%20two%20three&#038;bar=four', esc_url( 'http://example.com/?foo=one two three&bar=four' ) );
+		$this->assertSame( 'http://example.com/?foo=one%20two%20three&#038;bar=four', esc_url( 'http://example.com/?foo=one%20two%20three&bar=four' ) );
 	}
 
 	function test_bad_characters() {
-		$this->assertEquals( 'http://example.com/watchthelinefeedgo', esc_url( 'http://example.com/watchthelinefeed%0Ago' ) );
-		$this->assertEquals( 'http://example.com/watchthelinefeedgo', esc_url( 'http://example.com/watchthelinefeed%0ago' ) );
-		$this->assertEquals( 'http://example.com/watchthecarriagereturngo', esc_url( 'http://example.com/watchthecarriagereturn%0Dgo' ) );
-		$this->assertEquals( 'http://example.com/watchthecarriagereturngo', esc_url( 'http://example.com/watchthecarriagereturn%0dgo' ) );
-		//Nesting Checks
-		$this->assertEquals( 'http://example.com/watchthecarriagereturngo', esc_url( 'http://example.com/watchthecarriagereturn%0%0ddgo' ) );
-		$this->assertEquals( 'http://example.com/watchthecarriagereturngo', esc_url( 'http://example.com/watchthecarriagereturn%0%0DDgo' ) );
-		$this->assertEquals( 'http://example.com/', esc_url( 'http://example.com/%0%0%0DAD' ) );
-		$this->assertEquals( 'http://example.com/', esc_url( 'http://example.com/%0%0%0ADA' ) );
-		$this->assertEquals( 'http://example.com/', esc_url( 'http://example.com/%0%0%0DAd' ) );
-		$this->assertEquals( 'http://example.com/', esc_url( 'http://example.com/%0%0%0ADa' ) );
+		$this->assertSame( 'http://example.com/watchthelinefeedgo', esc_url( 'http://example.com/watchthelinefeed%0Ago' ) );
+		$this->assertSame( 'http://example.com/watchthelinefeedgo', esc_url( 'http://example.com/watchthelinefeed%0ago' ) );
+		$this->assertSame( 'http://example.com/watchthecarriagereturngo', esc_url( 'http://example.com/watchthecarriagereturn%0Dgo' ) );
+		$this->assertSame( 'http://example.com/watchthecarriagereturngo', esc_url( 'http://example.com/watchthecarriagereturn%0dgo' ) );
+		// Nesting checks.
+		$this->assertSame( 'http://example.com/watchthecarriagereturngo', esc_url( 'http://example.com/watchthecarriagereturn%0%0ddgo' ) );
+		$this->assertSame( 'http://example.com/watchthecarriagereturngo', esc_url( 'http://example.com/watchthecarriagereturn%0%0DDgo' ) );
+		$this->assertSame( 'http://example.com/', esc_url( 'http://example.com/%0%0%0DAD' ) );
+		$this->assertSame( 'http://example.com/', esc_url( 'http://example.com/%0%0%0ADA' ) );
+		$this->assertSame( 'http://example.com/', esc_url( 'http://example.com/%0%0%0DAd' ) );
+		$this->assertSame( 'http://example.com/', esc_url( 'http://example.com/%0%0%0ADa' ) );
 	}
 
 	function test_relative() {
-		$this->assertEquals( '/example.php', esc_url( '/example.php' ) );
-		$this->assertEquals( 'example.php', esc_url( 'example.php' ) );
-		$this->assertEquals( '#fragment', esc_url( '#fragment' ) );
-		$this->assertEquals( '?foo=bar', esc_url( '?foo=bar' ) );
+		$this->assertSame( '/example.php', esc_url( '/example.php' ) );
+		$this->assertSame( 'example.php', esc_url( 'example.php' ) );
+		$this->assertSame( '#fragment', esc_url( '#fragment' ) );
+		$this->assertSame( '?foo=bar', esc_url( '?foo=bar' ) );
 	}
 
 	function test_all_url_parts() {
 		$url = 'https://user:pass@host.example.com:1234/path;p=1?query=2&r[]=3#fragment';
 
-		$this->assertEquals(
+		$this->assertSame(
 			array(
 				'scheme'   => 'https',
 				'host'     => 'host.example.com',
@@ -56,35 +56,35 @@ class Tests_Formatting_EscUrl extends WP_UnitTestCase {
 			),
 			parse_url( $url )
 		);
-		$this->assertEquals( 'https://user:pass@host.example.com:1234/path;p=1?query=2&r%5B%5D=3#fragment', esc_url_raw( $url ) );
-		$this->assertEquals( 'https://user:pass@host.example.com:1234/path;p=1?query=2&#038;r%5B%5D=3#fragment', esc_url( $url ) );
+		$this->assertSame( 'https://user:pass@host.example.com:1234/path;p=1?query=2&r%5B%5D=3#fragment', esc_url_raw( $url ) );
+		$this->assertSame( 'https://user:pass@host.example.com:1234/path;p=1?query=2&#038;r%5B%5D=3#fragment', esc_url( $url ) );
 	}
 
 	function test_bare() {
-		$this->assertEquals( 'http://example.com?foo', esc_url( 'example.com?foo' ) );
-		$this->assertEquals( 'http://example.com', esc_url( 'example.com' ) );
-		$this->assertEquals( 'http://localhost', esc_url( 'localhost' ) );
-		$this->assertEquals( 'http://example.com/foo', esc_url( 'example.com/foo' ) );
-		$this->assertEquals( 'http://–±–∞–±–∞.org/–±–∞–±–∞', esc_url( '–±–∞–±–∞.org/–±–∞–±–∞' ) );
+		$this->assertSame( 'http://example.com?foo', esc_url( 'example.com?foo' ) );
+		$this->assertSame( 'http://example.com', esc_url( 'example.com' ) );
+		$this->assertSame( 'http://localhost', esc_url( 'localhost' ) );
+		$this->assertSame( 'http://example.com/foo', esc_url( 'example.com/foo' ) );
+		$this->assertSame( 'http://–±–∞–±–∞.org/–±–∞–±–∞', esc_url( '–±–∞–±–∞.org/–±–∞–±–∞' ) );
 	}
 
 	function test_encoding() {
-		$this->assertEquals( 'http://example.com?foo=1&bar=2', esc_url_raw( 'http://example.com?foo=1&bar=2' ) );
-		$this->assertEquals( 'http://example.com?foo=1&amp;bar=2', esc_url_raw( 'http://example.com?foo=1&amp;bar=2' ) );
-		$this->assertEquals( 'http://example.com?foo=1&#038;bar=2', esc_url_raw( 'http://example.com?foo=1&#038;bar=2' ) );
+		$this->assertSame( 'http://example.com?foo=1&bar=2', esc_url_raw( 'http://example.com?foo=1&bar=2' ) );
+		$this->assertSame( 'http://example.com?foo=1&amp;bar=2', esc_url_raw( 'http://example.com?foo=1&amp;bar=2' ) );
+		$this->assertSame( 'http://example.com?foo=1&#038;bar=2', esc_url_raw( 'http://example.com?foo=1&#038;bar=2' ) );
 
-		$this->assertEquals( 'http://example.com?foo=1&#038;bar=2', esc_url( 'http://example.com?foo=1&bar=2' ) );
-		$this->assertEquals( 'http://example.com?foo=1&#038;bar=2', esc_url( 'http://example.com?foo=1&amp;bar=2' ) );
-		$this->assertEquals( 'http://example.com?foo=1&#038;bar=2', esc_url( 'http://example.com?foo=1&#038;bar=2' ) );
+		$this->assertSame( 'http://example.com?foo=1&#038;bar=2', esc_url( 'http://example.com?foo=1&bar=2' ) );
+		$this->assertSame( 'http://example.com?foo=1&#038;bar=2', esc_url( 'http://example.com?foo=1&amp;bar=2' ) );
+		$this->assertSame( 'http://example.com?foo=1&#038;bar=2', esc_url( 'http://example.com?foo=1&#038;bar=2' ) );
 
 		$param = urlencode( 'http://example.com/?one=1&two=2' );
-		$this->assertEquals( "http://example.com?url={$param}", esc_url( "http://example.com?url={$param}" ) );
+		$this->assertSame( "http://example.com?url={$param}", esc_url( "http://example.com?url={$param}" ) );
 	}
 
 	function test_protocol() {
-		$this->assertEquals( 'http://example.com', esc_url( 'http://example.com' ) );
-		$this->assertEquals( '', esc_url( 'nasty://example.com/' ) );
-		$this->assertEquals(
+		$this->assertSame( 'http://example.com', esc_url( 'http://example.com' ) );
+		$this->assertSame( '', esc_url( 'nasty://example.com/' ) );
+		$this->assertSame(
 			'',
 			esc_url(
 				'example.com',
@@ -93,7 +93,7 @@ class Tests_Formatting_EscUrl extends WP_UnitTestCase {
 				)
 			)
 		);
-		$this->assertEquals(
+		$this->assertSame(
 			'',
 			esc_url(
 				'http://example.com',
@@ -102,7 +102,7 @@ class Tests_Formatting_EscUrl extends WP_UnitTestCase {
 				)
 			)
 		);
-		$this->assertEquals(
+		$this->assertSame(
 			'https://example.com',
 			esc_url(
 				'https://example.com',
@@ -114,8 +114,8 @@ class Tests_Formatting_EscUrl extends WP_UnitTestCase {
 		);
 
 		foreach ( wp_allowed_protocols() as $scheme ) {
-			$this->assertEquals( "{$scheme}://example.com", esc_url( "{$scheme}://example.com" ), $scheme );
-			$this->assertEquals(
+			$this->assertSame( "{$scheme}://example.com", esc_url( "{$scheme}://example.com" ), $scheme );
+			$this->assertSame(
 				"{$scheme}://example.com",
 				esc_url(
 					"{$scheme}://example.com",
@@ -128,10 +128,10 @@ class Tests_Formatting_EscUrl extends WP_UnitTestCase {
 		}
 
 		$this->assertTrue( ! in_array( 'data', wp_allowed_protocols(), true ) );
-		$this->assertEquals( '', esc_url( 'data:text/plain;base64,SGVsbG8sIFdvcmxkIQ%3D%3D' ) );
+		$this->assertSame( '', esc_url( 'data:text/plain;base64,SGVsbG8sIFdvcmxkIQ%3D%3D' ) );
 
 		$this->assertTrue( ! in_array( 'foo', wp_allowed_protocols(), true ) );
-		$this->assertEquals(
+		$this->assertSame(
 			'foo://example.com',
 			esc_url(
 				'foo://example.com',
@@ -147,42 +147,42 @@ class Tests_Formatting_EscUrl extends WP_UnitTestCase {
 	 * @ticket 23187
 	 */
 	function test_protocol_case() {
-		$this->assertEquals( 'http://example.com', esc_url( 'HTTP://example.com' ) );
-		$this->assertEquals( 'http://example.com', esc_url( 'Http://example.com' ) );
+		$this->assertSame( 'http://example.com', esc_url( 'HTTP://example.com' ) );
+		$this->assertSame( 'http://example.com', esc_url( 'Http://example.com' ) );
 	}
 
 	function test_display_extras() {
-		$this->assertEquals( 'http://example.com/&#039;quoted&#039;', esc_url( 'http://example.com/\'quoted\'' ) );
-		$this->assertEquals( 'http://example.com/\'quoted\'', esc_url( 'http://example.com/\'quoted\'', null, 'notdisplay' ) );
+		$this->assertSame( 'http://example.com/&#039;quoted&#039;', esc_url( 'http://example.com/\'quoted\'' ) );
+		$this->assertSame( 'http://example.com/\'quoted\'', esc_url( 'http://example.com/\'quoted\'', null, 'notdisplay' ) );
 	}
 
 	function test_non_ascii() {
-		$this->assertEquals( 'http://example.org/–±–∞–±–∞', esc_url( 'http://example.org/–±–∞–±–∞' ) );
-		$this->assertEquals( 'http://–±–∞–±–∞.org/–±–∞–±–∞', esc_url( 'http://–±–∞–±–∞.org/–±–∞–±–∞' ) );
-		$this->assertEquals( 'http://m√ºller.com/', esc_url( 'http://m√ºller.com/' ) );
+		$this->assertSame( 'http://example.org/–±–∞–±–∞', esc_url( 'http://example.org/–±–∞–±–∞' ) );
+		$this->assertSame( 'http://–±–∞–±–∞.org/–±–∞–±–∞', esc_url( 'http://–±–∞–±–∞.org/–±–∞–±–∞' ) );
+		$this->assertSame( 'http://m√ºller.com/', esc_url( 'http://m√ºller.com/' ) );
 	}
 
 	function test_feed() {
-		$this->assertEquals( '', esc_url( 'feed:javascript:alert(1)' ) );
-		$this->assertEquals( '', esc_url( 'feed:javascript:feed:alert(1)' ) );
-		$this->assertEquals( '', esc_url( 'feed:feed:javascript:alert(1)' ) );
-		$this->assertEquals( 'feed:feed:alert(1)', esc_url( 'feed:feed:alert(1)' ) );
-		$this->assertEquals( 'feed:http://wordpress.org/feed/', esc_url( 'feed:http://wordpress.org/feed/' ) );
+		$this->assertSame( '', esc_url( 'feed:javascript:alert(1)' ) );
+		$this->assertSame( '', esc_url( 'feed:javascript:feed:alert(1)' ) );
+		$this->assertSame( '', esc_url( 'feed:feed:javascript:alert(1)' ) );
+		$this->assertSame( 'feed:feed:alert(1)', esc_url( 'feed:feed:alert(1)' ) );
+		$this->assertSame( 'feed:http://wordpress.org/feed/', esc_url( 'feed:http://wordpress.org/feed/' ) );
 	}
 
 	/**
 	 * @ticket 16859
 	 */
 	function test_square_brackets() {
-		$this->assertEquals( '/example.php?one%5B%5D=two', esc_url( '/example.php?one[]=two' ) );
-		$this->assertEquals( '?foo%5Bbar%5D=baz', esc_url( '?foo[bar]=baz' ) );
-		$this->assertEquals( '//example.com/?foo%5Bbar%5D=baz', esc_url( '//example.com/?foo[bar]=baz' ) );
-		$this->assertEquals( 'http://example.com/?foo%5Bbar%5D=baz', esc_url( 'example.com/?foo[bar]=baz' ) );
-		$this->assertEquals( 'http://localhost?foo%5Bbar%5D=baz', esc_url( 'localhost?foo[bar]=baz' ) );
-		$this->assertEquals( 'http://example.com/?foo%5Bbar%5D=baz', esc_url( 'http://example.com/?foo[bar]=baz' ) );
-		$this->assertEquals( 'http://example.com/?foo%5Bbar%5D=baz', esc_url( 'http://example.com/?foo%5Bbar%5D=baz' ) );
-		$this->assertEquals( 'http://example.com/?baz=bar&#038;foo%5Bbar%5D=baz', esc_url( 'http://example.com/?baz=bar&foo[bar]=baz' ) );
-		$this->assertEquals( 'http://example.com/?baz=bar&#038;foo%5Bbar%5D=baz', esc_url( 'http://example.com/?baz=bar&#038;foo%5Bbar%5D=baz' ) );
+		$this->assertSame( '/example.php?one%5B%5D=two', esc_url( '/example.php?one[]=two' ) );
+		$this->assertSame( '?foo%5Bbar%5D=baz', esc_url( '?foo[bar]=baz' ) );
+		$this->assertSame( '//example.com/?foo%5Bbar%5D=baz', esc_url( '//example.com/?foo[bar]=baz' ) );
+		$this->assertSame( 'http://example.com/?foo%5Bbar%5D=baz', esc_url( 'example.com/?foo[bar]=baz' ) );
+		$this->assertSame( 'http://localhost?foo%5Bbar%5D=baz', esc_url( 'localhost?foo[bar]=baz' ) );
+		$this->assertSame( 'http://example.com/?foo%5Bbar%5D=baz', esc_url( 'http://example.com/?foo[bar]=baz' ) );
+		$this->assertSame( 'http://example.com/?foo%5Bbar%5D=baz', esc_url( 'http://example.com/?foo%5Bbar%5D=baz' ) );
+		$this->assertSame( 'http://example.com/?baz=bar&#038;foo%5Bbar%5D=baz', esc_url( 'http://example.com/?baz=bar&foo[bar]=baz' ) );
+		$this->assertSame( 'http://example.com/?baz=bar&#038;foo%5Bbar%5D=baz', esc_url( 'http://example.com/?baz=bar&#038;foo%5Bbar%5D=baz' ) );
 	}
 
 	/**
@@ -190,14 +190,14 @@ class Tests_Formatting_EscUrl extends WP_UnitTestCase {
 	 */
 	function test_reserved_characters() {
 		$url = "http://example.com/:@-._~!$&'()*+,=;:@-._~!$&'()*+,=:@-._~!$&'()*+,==?/?:@-._~!$%27()*+,;=/?:@-._~!$%27()*+,;==#/?:@-._~!$&'()*+,;=";
-		$this->assertEquals( $url, esc_url_raw( $url ) );
+		$this->assertSame( $url, esc_url_raw( $url ) );
 	}
 
 	/**
 	 * @ticket 21974
 	 */
 	function test_protocol_relative_with_colon() {
-		$this->assertEquals( '//example.com/foo?foo=abc:def', esc_url( '//example.com/foo?foo=abc:def' ) );
+		$this->assertSame( '//example.com/foo?foo=abc:def', esc_url( '//example.com/foo?foo=abc:def' ) );
 	}
 
 	/**
@@ -212,7 +212,7 @@ EOT;
 		$body       = str_replace( "\r\n", "\n", $body );
 		$email_link = 'mailto:?body=' . rawurlencode( $body );
 		$email_link = esc_url( $email_link );
-		$this->assertEquals( 'mailto:?body=Hi%20there%2C%0A%0AI%20thought%20you%20might%20want%20to%20sign%20up%20for%20this%20newsletter', $email_link );
+		$this->assertSame( 'mailto:?body=Hi%20there%2C%0A%0AI%20thought%20you%20might%20want%20to%20sign%20up%20for%20this%20newsletter', $email_link );
 	}
 
 	/**
@@ -227,7 +227,7 @@ EOT;
 		$body       = str_replace( "\r\n", "\n", $body );
 		$email_link = 'http://example.com/mailto:?body=' . rawurlencode( $body );
 		$email_link = esc_url( $email_link );
-		$this->assertEquals( 'http://example.com/mailto:?body=Hi%20there%2CI%20thought%20you%20might%20want%20to%20sign%20up%20for%20this%20newsletter', $email_link );
+		$this->assertSame( 'http://example.com/mailto:?body=Hi%20there%2CI%20thought%20you%20might%20want%20to%20sign%20up%20for%20this%20newsletter', $email_link );
 	}
 
 	/**
@@ -238,7 +238,7 @@ EOT;
 
 		$email_link = 'mailto:?body=' . $body;
 		$email_link = esc_url( $email_link );
-		$this->assertEquals( 'mailto:?body=Hi%20there,%20I%20thought%20you%20might%20want%20to%20sign%20up%20for%20this%20newsletter', $email_link );
+		$this->assertSame( 'mailto:?body=Hi%20there,%20I%20thought%20you%20might%20want%20to%20sign%20up%20for%20this%20newsletter', $email_link );
 	}
 
 	/**
@@ -252,14 +252,14 @@ EOT;
 	 * @ticket 34202
 	 */
 	function test_ipv6_hosts() {
-		$this->assertEquals( '//[::127.0.0.1]', esc_url( '//[::127.0.0.1]' ) );
-		$this->assertEquals( 'http://[::FFFF::127.0.0.1]', esc_url( 'http://[::FFFF::127.0.0.1]' ) );
-		$this->assertEquals( 'http://[::127.0.0.1]', esc_url( 'http://[::127.0.0.1]' ) );
-		$this->assertEquals( 'http://[::DEAD:BEEF:DEAD:BEEF:DEAD:BEEF:DEAD:BEEF]', esc_url( 'http://[::DEAD:BEEF:DEAD:BEEF:DEAD:BEEF:DEAD:BEEF]' ) );
+		$this->assertSame( '//[::127.0.0.1]', esc_url( '//[::127.0.0.1]' ) );
+		$this->assertSame( 'http://[::FFFF::127.0.0.1]', esc_url( 'http://[::FFFF::127.0.0.1]' ) );
+		$this->assertSame( 'http://[::127.0.0.1]', esc_url( 'http://[::127.0.0.1]' ) );
+		$this->assertSame( 'http://[::DEAD:BEEF:DEAD:BEEF:DEAD:BEEF:DEAD:BEEF]', esc_url( 'http://[::DEAD:BEEF:DEAD:BEEF:DEAD:BEEF:DEAD:BEEF]' ) );
 
 		// IPv6 with square brackets in the query? Why not.
-		$this->assertEquals( '//[::FFFF::127.0.0.1]/?foo%5Bbar%5D=baz', esc_url( '//[::FFFF::127.0.0.1]/?foo[bar]=baz' ) );
-		$this->assertEquals( 'http://[::FFFF::127.0.0.1]/?foo%5Bbar%5D=baz', esc_url( 'http://[::FFFF::127.0.0.1]/?foo[bar]=baz' ) );
+		$this->assertSame( '//[::FFFF::127.0.0.1]/?foo%5Bbar%5D=baz', esc_url( '//[::FFFF::127.0.0.1]/?foo[bar]=baz' ) );
+		$this->assertSame( 'http://[::FFFF::127.0.0.1]/?foo%5Bbar%5D=baz', esc_url( 'http://[::FFFF::127.0.0.1]/?foo[bar]=baz' ) );
 	}
 
 }
diff --git a/tests/formatting/EscXml.php b/tests/formatting/EscXml.php
new file mode 100644
index 0000000000..fa6738dca0
--- /dev/null
+++ b/tests/formatting/EscXml.php
@@ -0,0 +1,135 @@
+<?php
+
+/**
+ * @group formatting
+ */
+class Tests_Formatting_EscXml extends WP_UnitTestCase {
+	/**
+	 * Test basic escaping
+	 *
+	 * @dataProvider _test_esc_xml_basics_dataprovider
+	 *
+	 * @param string $source   The source string to be escaped.
+	 * @param string $expected The expected escaped value of `$source`.
+	 */
+	public function test_esc_xml_basics( $source, $expected ) {
+		$actual = esc_xml( $source );
+		$this->assertSame( $expected, $actual );
+	}
+
+	/**
+	 * Data provider for `test_esc_xml_basics()`.
+	 *
+	 * @return array {
+	 *     @type string $source   The source string to be escaped.
+	 *     @type string $expected The expected escaped value of `$source`.
+	 * }
+	 */
+	public function _test_esc_xml_basics_dataprovider() {
+		return array(
+			// Simple string.
+			array(
+				'The quick brown fox.',
+				'The quick brown fox.',
+			),
+			// URL with &.
+			array(
+				'http://localhost/trunk/wp-login.php?action=logout&_wpnonce=cd57d75985',
+				'http://localhost/trunk/wp-login.php?action=logout&amp;_wpnonce=cd57d75985',
+			),
+			// SQL query w/ single quotes.
+			array(
+				"SELECT meta_key, meta_value FROM wp_trunk_sitemeta WHERE meta_key IN ('site_name', 'siteurl', 'active_sitewide_plugins', '_site_transient_timeout_theme_roots', '_site_transient_theme_roots', 'site_admins', 'can_compress_scripts', 'global_terms_enabled') AND site_id = 1",
+				'SELECT meta_key, meta_value FROM wp_trunk_sitemeta WHERE meta_key IN (&apos;site_name&apos;, &apos;siteurl&apos;, &apos;active_sitewide_plugins&apos;, &apos;_site_transient_timeout_theme_roots&apos;, &apos;_site_transient_theme_roots&apos;, &apos;site_admins&apos;, &apos;can_compress_scripts&apos;, &apos;global_terms_enabled&apos;) AND site_id = 1',
+			),
+		);
+	}
+
+	public function test_escapes_ampersands() {
+		$source   = 'penn & teller & at&t';
+		$expected = 'penn &amp; teller &amp; at&amp;t';
+		$actual   = esc_xml( $source );
+		$this->assertSame( $expected, $actual );
+	}
+
+	public function test_escapes_greater_and_less_than() {
+		$source   = 'this > that < that <randomhtml />';
+		$expected = 'this &gt; that &lt; that &lt;randomhtml /&gt;';
+		$actual   = esc_xml( $source );
+		$this->assertSame( $expected, $actual );
+	}
+
+	public function test_escapes_html_named_entities() {
+		$source   = 'this &amp; is a &hellip; followed by &rsaquo; and more and a &nonexistent; entity';
+		$expected = 'this &amp; is a ‚Ä¶ followed by ‚Ä∫ and more and a &amp;nonexistent; entity';
+		$actual   = esc_xml( $source );
+		$this->assertSame( $expected, $actual );
+	}
+
+	public function test_ignores_existing_entities() {
+		$source = '&#038; &#x00A3; &#x22; &amp;';
+		// note that _wp_specialchars() strips leading 0's from numeric character references.
+		$expected = '&#038; &#xA3; &#x22; &amp;';
+		$actual   = esc_xml( $source );
+		$this->assertSame( $expected, $actual );
+	}
+
+	/**
+	 * Test that CDATA Sections are not escaped.
+	 *
+	 * @dataProvider _test_ignores_cdata_sections_dataprovider
+	 *
+	 * @param string $source   The source string to be escaped.
+	 * @param string $expected The expected escaped value of `$source`.
+	 */
+	public function test_ignores_cdata_sections( $source, $expected ) {
+		$actual = esc_xml( $source );
+		$this->assertSame( $expected, $actual );
+	}
+
+	/**
+	 * Data provider for `test_ignores_cdata_sections()`.
+	 *
+	 * @return array {
+	 *     @type string $source   The source string to be escaped.
+	 *     @type string $expected The expected escaped value of `$source`.
+	 * }
+	 */
+	public function _test_ignores_cdata_sections_dataprovider() {
+		return array(
+			// basic CDATA Section containing chars that would otherwise be escaped if not in a CDATA Section
+			// not to mention the CDATA Section markup itself :-)
+			// $source contains embedded newlines to test that the regex that ignores CDATA Sections
+			// correctly handles that case.
+			array(
+				"This is\na<![CDATA[test of\nthe <emergency>]]>\nbroadcast system",
+				"This is\na<![CDATA[test of\nthe <emergency>]]>\nbroadcast system",
+			),
+			// string with chars that should be escaped as well as a CDATA Section that should be not be.
+			array(
+				'This is &hellip; a <![CDATA[test of the <emergency>]]> broadcast <system />',
+				'This is ‚Ä¶ a <![CDATA[test of the <emergency>]]> broadcast &lt;system /&gt;',
+			),
+			// Same as above, but with the CDATA Section at the start of the string.
+			array(
+				'<![CDATA[test of the <emergency>]]> This is &hellip; a broadcast <system />',
+				'<![CDATA[test of the <emergency>]]> This is ‚Ä¶ a broadcast &lt;system /&gt;',
+			),
+			// Same as above, but with the CDATA Section at the end of the string.
+			array(
+				'This is &hellip; a broadcast <system /><![CDATA[test of the <emergency>]]>',
+				'This is ‚Ä¶ a broadcast &lt;system /&gt;<![CDATA[test of the <emergency>]]>',
+			),
+			// Multiple CDATA Sections.
+			array(
+				'This is &hellip; a <![CDATA[test of the <emergency>]]> &broadcast; <![CDATA[<system />]]>',
+				'This is ‚Ä¶ a <![CDATA[test of the <emergency>]]> &amp;broadcast; <![CDATA[<system />]]>',
+			),
+			// Ensure that ']]>' that does not mark the end of a CDATA Section is escaped.
+			array(
+				'<![CDATA[<&]]>]]>',
+				'<![CDATA[<&]]>]]&gt;',
+			),
+		);
+	}
+}
diff --git a/tests/formatting/ExcerptRemoveBlocks.php b/tests/formatting/ExcerptRemoveBlocks.php
index 8a27f18e81..70efe18d55 100644
--- a/tests/formatting/ExcerptRemoveBlocks.php
+++ b/tests/formatting/ExcerptRemoveBlocks.php
@@ -99,7 +99,7 @@ class Tests_Formatting_ExcerptRemoveBlocks extends WP_UnitTestCase {
 		$this->assertEmpty( excerpt_remove_blocks( $content ) );
 
 		// Dynamic block with options, embedded in other content.
-		$this->assertEquals( $this->filtered_content, excerpt_remove_blocks( $this->content ) );
+		$this->assertSame( $this->filtered_content, excerpt_remove_blocks( $this->content ) );
 	}
 
 	/**
diff --git a/tests/formatting/GetUrlInContent.php b/tests/formatting/GetUrlInContent.php
index d8a3964f42..edb6c6f656 100644
--- a/tests/formatting/GetUrlInContent.php
+++ b/tests/formatting/GetUrlInContent.php
@@ -12,30 +12,30 @@ class Tests_Formatting_GetUrlInContent extends WP_UnitTestCase {
 	 */
 	public function get_input_output() {
 		return array(
-			array(
+			array( // Empty content.
 				'',
 				false,
-			), //empty content
-			array(
+			),
+			array( // No URLs.
 				'<div>NO URL CONTENT</div>',
 				false,
-			), //no URLs
-			array(
+			),
+			array( // Ignore none link elements.
 				'<div href="/relative.php">NO URL CONTENT</div>',
 				false,
-			), // ignore none link elements
-			array(
+			),
+			array( // Single link.
 				'ABC<div><a href="/relative.php">LINK</a> CONTENT</div>',
 				'/relative.php',
-			), // single link
-			array(
+			),
+			array( // Multiple links.
 				'ABC<div><a href="/relative.php">LINK</a> CONTENT <a href="/suppress.php">LINK</a></div>',
 				'/relative.php',
-			), // multiple links
-			array(
+			),
+			array( // Escape link.
 				'ABC<div><a href="http://example.com/Mr%20WordPress 2">LINK</a> CONTENT </div>',
 				'http://example.com/Mr%20WordPress%202',
-			), // escape link
+			),
 		);
 	}
 
@@ -45,6 +45,6 @@ class Tests_Formatting_GetUrlInContent extends WP_UnitTestCase {
 	 * @dataProvider get_input_output
 	 */
 	function test_get_url_in_content( $in_str, $exp_str ) {
-		$this->assertEquals( $exp_str, get_url_in_content( $in_str ) );
+		$this->assertSame( $exp_str, get_url_in_content( $in_str ) );
 	}
 }
diff --git a/tests/formatting/HtmlExcerpt.php b/tests/formatting/HtmlExcerpt.php
index 9aeea365e5..36315fc541 100644
--- a/tests/formatting/HtmlExcerpt.php
+++ b/tests/formatting/HtmlExcerpt.php
@@ -5,15 +5,15 @@
  */
 class Tests_Formatting_HtmlExcerpt extends WP_UnitTestCase {
 	function test_simple() {
-		$this->assertEquals( 'Baba', wp_html_excerpt( 'Baba told me not to come', 4 ) );
+		$this->assertSame( 'Baba', wp_html_excerpt( 'Baba told me not to come', 4 ) );
 	}
 	function test_html() {
-		$this->assertEquals( 'Baba', wp_html_excerpt( "<a href='http://baba.net/'>Baba</a> told me not to come", 4 ) );
+		$this->assertSame( 'Baba', wp_html_excerpt( "<a href='http://baba.net/'>Baba</a> told me not to come", 4 ) );
 	}
 	function test_entities() {
-		$this->assertEquals( 'Baba', wp_html_excerpt( 'Baba &amp; Dyado', 8 ) );
-		$this->assertEquals( 'Baba', wp_html_excerpt( 'Baba &#038; Dyado', 8 ) );
-		$this->assertEquals( 'Baba &amp; D', wp_html_excerpt( 'Baba &amp; Dyado', 12 ) );
-		$this->assertEquals( 'Baba &amp; Dyado', wp_html_excerpt( 'Baba &amp; Dyado', 100 ) );
+		$this->assertSame( 'Baba', wp_html_excerpt( 'Baba &amp; Dyado', 8 ) );
+		$this->assertSame( 'Baba', wp_html_excerpt( 'Baba &#038; Dyado', 8 ) );
+		$this->assertSame( 'Baba &amp; D', wp_html_excerpt( 'Baba &amp; Dyado', 12 ) );
+		$this->assertSame( 'Baba &amp; Dyado', wp_html_excerpt( 'Baba &amp; Dyado', 100 ) );
 	}
 }
diff --git a/tests/formatting/HumanTimeDiff.php b/tests/formatting/HumanTimeDiff.php
index 473f5325d3..e990d2e49b 100644
--- a/tests/formatting/HumanTimeDiff.php
+++ b/tests/formatting/HumanTimeDiff.php
@@ -13,7 +13,7 @@ class Tests_Formatting_HumanTimeDiff extends WP_UnitTestCase {
 	 */
 	function test_human_time_diff( $expected, $stopdate, $message ) {
 		$startdate = new DateTime( '2016-01-01 12:00:00' );
-		$this->assertEquals( $expected, human_time_diff( $startdate->format( 'U' ), $stopdate->format( 'U' ) ), $message );
+		$this->assertSame( $expected, human_time_diff( $startdate->format( 'U' ), $stopdate->format( 'U' ) ), $message );
 	}
 
 	// Data for test_human_time_diff.
diff --git a/tests/formatting/IsEmail.php b/tests/formatting/IsEmail.php
index 7d0c7773ee..6a11c9862a 100644
--- a/tests/formatting/IsEmail.php
+++ b/tests/formatting/IsEmail.php
@@ -13,7 +13,7 @@ class Tests_Formatting_IsEmail extends WP_UnitTestCase {
 			'a@b.co',
 		);
 		foreach ( $data as $datum ) {
-			$this->assertEquals( $datum, is_email( $datum ), $datum );
+			$this->assertSame( $datum, is_email( $datum ), $datum );
 		}
 	}
 
diff --git a/tests/formatting/JSEscape.php b/tests/formatting/JSEscape.php
index d4adcbe577..4dcb064819 100644
--- a/tests/formatting/JSEscape.php
+++ b/tests/formatting/JSEscape.php
@@ -6,41 +6,41 @@
 class Tests_Formatting_JSEscape extends WP_UnitTestCase {
 	function test_js_escape_simple() {
 		$out = esc_js( 'foo bar baz();' );
-		$this->assertEquals( 'foo bar baz();', $out );
+		$this->assertSame( 'foo bar baz();', $out );
 	}
 
 	function test_js_escape_quotes() {
 		$out = esc_js( 'foo "bar" \'baz\'' );
-		// does it make any sense to change " into &quot;?  Why not \"?
-		$this->assertEquals( "foo &quot;bar&quot; \'baz\'", $out );
+		// Does it make any sense to change " into &quot;?  Why not \"?
+		$this->assertSame( "foo &quot;bar&quot; \'baz\'", $out );
 	}
 
 	function test_js_escape_backslash() {
 		$bs  = '\\';
 		$out = esc_js( 'foo ' . $bs . 't bar ' . $bs . $bs . ' baz' );
 		// \t becomes t - bug?
-		$this->assertEquals( 'foo t bar ' . $bs . $bs . ' baz', $out );
+		$this->assertSame( 'foo t bar ' . $bs . $bs . ' baz', $out );
 	}
 
 	function test_js_escape_amp() {
 		$out = esc_js( 'foo & bar &baz; &nbsp;' );
-		$this->assertEquals( 'foo &amp; bar &amp;baz; &nbsp;', $out );
+		$this->assertSame( 'foo &amp; bar &amp;baz; &nbsp;', $out );
 	}
 
 	function test_js_escape_quote_entity() {
 		$out = esc_js( 'foo &#x27; bar &#39; baz &#x26;' );
-		$this->assertEquals( "foo \\' bar \\' baz &#x26;", $out );
+		$this->assertSame( "foo \\' bar \\' baz &#x26;", $out );
 	}
 
 	function test_js_no_carriage_return() {
 		$out = esc_js( "foo\rbar\nbaz\r" );
-		// \r is stripped
-		$this->assertequals( "foobar\\nbaz", $out );
+		// \r is stripped.
+		$this->assertSame( "foobar\\nbaz", $out );
 	}
 
 	function test_js_escape_rn() {
 		$out = esc_js( "foo\r\nbar\nbaz\r\n" );
-		// \r is stripped
-		$this->assertequals( "foo\\nbar\\nbaz\\n", $out );
+		// \r is stripped.
+		$this->assertSame( "foo\\nbar\\nbaz\\n", $out );
 	}
 }
diff --git a/tests/formatting/LikeEscape.php b/tests/formatting/LikeEscape.php
index ea7cf70f20..a565e2fe9b 100644
--- a/tests/formatting/LikeEscape.php
+++ b/tests/formatting/LikeEscape.php
@@ -11,10 +11,10 @@ class Tests_Formatting_LikeEscape extends WP_UnitTestCase {
 	function test_like_escape() {
 
 		$inputs   = array(
-			'howdy%', //Single Percent
-			'howdy_', //Single Underscore
-			'howdy\\', //Single slash
-			'howdy\\howdy%howdy_', //The works
+			'howdy%',              // Single percent.
+			'howdy_',              // Single underscore.
+			'howdy\\',             // Single slash.
+			'howdy\\howdy%howdy_', // The works.
 		);
 		$expected = array(
 			'howdy\\%',
@@ -24,7 +24,7 @@ class Tests_Formatting_LikeEscape extends WP_UnitTestCase {
 		);
 
 		foreach ( $inputs as $key => $input ) {
-			$this->assertEquals( $expected[ $key ], like_escape( $input ) );
+			$this->assertSame( $expected[ $key ], like_escape( $input ) );
 		}
 	}
 }
diff --git a/tests/formatting/LinksAddTarget.php b/tests/formatting/LinksAddTarget.php
index 1ffae4566f..f0ad0585ac 100644
--- a/tests/formatting/LinksAddTarget.php
+++ b/tests/formatting/LinksAddTarget.php
@@ -74,11 +74,11 @@ class Tests_Formatting_LinksAddTarget extends WP_UnitTestCase {
 	 */
 	function test_normalize_whitespace( $content, $target, $tags, $exp_str ) {
 		if ( true === is_null( $target ) ) {
-			$this->assertEquals( $exp_str, links_add_target( $content ) );
+			$this->assertSame( $exp_str, links_add_target( $content ) );
 		} elseif ( true === is_null( $tags ) ) {
-			$this->assertEquals( $exp_str, links_add_target( $content, $target ) );
+			$this->assertSame( $exp_str, links_add_target( $content, $target ) );
 		} else {
-			$this->assertEquals( $exp_str, links_add_target( $content, $target, $tags ) );
+			$this->assertSame( $exp_str, links_add_target( $content, $target, $tags ) );
 		}
 	}
 }
diff --git a/tests/formatting/MakeClickable.php b/tests/formatting/MakeClickable.php
index a990ad42ff..cc59179664 100644
--- a/tests/formatting/MakeClickable.php
+++ b/tests/formatting/MakeClickable.php
@@ -6,7 +6,7 @@
 class Tests_Formatting_MakeClickable extends WP_UnitTestCase {
 	function test_mailto_xss() {
 		$in = 'testzzz@"STYLE="behavior:url(\'#default#time2\')"onBegin="alert(\'refresh-XSS\')"';
-		$this->assertEquals( $in, make_clickable( $in ) );
+		$this->assertSame( $in, make_clickable( $in ) );
 	}
 
 	function test_valid_mailto() {
@@ -18,7 +18,7 @@ class Tests_Formatting_MakeClickable extends WP_UnitTestCase {
 			'foo@example-example.com',
 		);
 		foreach ( $valid_emails as $email ) {
-			$this->assertEquals( '<a href="mailto:' . $email . '">' . $email . '</a>', make_clickable( $email ) );
+			$this->assertSame( '<a href="mailto:' . $email . '">' . $email . '</a>', make_clickable( $email ) );
 		}
 	}
 
@@ -32,12 +32,14 @@ class Tests_Formatting_MakeClickable extends WP_UnitTestCase {
 			'foo@example',
 		);
 		foreach ( $invalid_emails as $email ) {
-			$this->assertEquals( $email, make_clickable( $email ) );
+			$this->assertSame( $email, make_clickable( $email ) );
 		}
 	}
 
-	// tests that make_clickable will not link trailing periods, commas and
-	// (semi-)colons in URLs with protocol (i.e. http://wordpress.org)
+	/**
+	 * Tests that make_clickable() will not link trailing periods, commas,
+	 * and (semi-)colons in URLs with protocol (i.e. http://wordpress.org).
+	 */
 	function test_strip_trailing_with_protocol() {
 		$urls_before   = array(
 			'http://wordpress.org/hello.html',
@@ -57,12 +59,14 @@ class Tests_Formatting_MakeClickable extends WP_UnitTestCase {
 		);
 
 		foreach ( $urls_before as $key => $url ) {
-			$this->assertEquals( $urls_expected[ $key ], make_clickable( $url ) );
+			$this->assertSame( $urls_expected[ $key ], make_clickable( $url ) );
 		}
 	}
 
-	// tests that make_clickable will not link trailing periods, commas and
-	// (semi-)colons in URLs with protocol (i.e. http://wordpress.org)
+	/**
+	 * Tests that make_clickable() will not link trailing periods, commas,
+	 * and (semi-)colons in URLs with protocol (i.e. http://wordpress.org).
+	 */
 	function test_strip_trailing_with_protocol_nothing_afterwards() {
 		$urls_before   = array(
 			'http://wordpress.org/hello.html',
@@ -84,12 +88,14 @@ class Tests_Formatting_MakeClickable extends WP_UnitTestCase {
 		);
 
 		foreach ( $urls_before as $key => $url ) {
-			$this->assertEquals( $urls_expected[ $key ], make_clickable( $url ) );
+			$this->assertSame( $urls_expected[ $key ], make_clickable( $url ) );
 		}
 	}
 
-	// tests that make_clickable will not link trailing periods, commas and
-	// (semi-)colons in URLs without protocol (i.e. www.wordpress.org)
+	/**
+	 * Tests that make_clickable() will not link trailing periods, commas,
+	 * and (semi-)colons in URLs without protocol (i.e. www.wordpress.org).
+	 */
 	function test_strip_trailing_without_protocol() {
 		$urls_before   = array(
 			'www.wordpress.org',
@@ -109,12 +115,14 @@ class Tests_Formatting_MakeClickable extends WP_UnitTestCase {
 		);
 
 		foreach ( $urls_before as $key => $url ) {
-			$this->assertEquals( $urls_expected[ $key ], make_clickable( $url ) );
+			$this->assertSame( $urls_expected[ $key ], make_clickable( $url ) );
 		}
 	}
 
-	// tests that make_clickable will not link trailing periods, commas and
-	// (semi-)colons in URLs without protocol (i.e. www.wordpress.org)
+	/**
+	 * Tests that make_clickable() will not link trailing periods, commas,
+	 * and (semi-)colons in URLs without protocol (i.e. www.wordpress.org).
+	 */
 	function test_strip_trailing_without_protocol_nothing_afterwards() {
 		$urls_before   = array(
 			'www.wordpress.org',
@@ -134,11 +142,13 @@ class Tests_Formatting_MakeClickable extends WP_UnitTestCase {
 		);
 
 		foreach ( $urls_before as $key => $url ) {
-			$this->assertEquals( $urls_expected[ $key ], make_clickable( $url ) );
+			$this->assertSame( $urls_expected[ $key ], make_clickable( $url ) );
 		}
 	}
 
-	// #4570
+	/**
+	 * @ticket 4570
+	 */
 	function test_iri() {
 		$urls_before   = array(
 			'http://www.Ë©πÂßÜÊñØ.com/',
@@ -151,11 +161,13 @@ class Tests_Formatting_MakeClickable extends WP_UnitTestCase {
 			'<a href="http://example.com/?a=–±–∞–±–∞&#038;b=–¥—è–¥–æ" rel="nofollow">http://example.com/?a=–±–∞–±–∞&#038;b=–¥—è–¥–æ</a>',
 		);
 		foreach ( $urls_before as $key => $url ) {
-			$this->assertEquals( $urls_expected[ $key ], make_clickable( $url ) );
+			$this->assertSame( $urls_expected[ $key ], make_clickable( $url ) );
 		}
 	}
 
-	// #10990
+	/**
+	 * @ticket 10990
+	 */
 	function test_brackets_in_urls() {
 		$urls_before   = array(
 			'http://en.wikipedia.org/wiki/PC_Tools_(Central_Point_Software)',
@@ -186,11 +198,15 @@ class Tests_Formatting_MakeClickable extends WP_UnitTestCase {
 			Richard Hamming wrote about people getting more done with their doors closed, but',
 		);
 		foreach ( $urls_before as $key => $url ) {
-			$this->assertEquals( $urls_expected[ $key ], make_clickable( $url ) );
+			$this->assertSame( $urls_expected[ $key ], make_clickable( $url ) );
 		}
 	}
 
-	// Based on a real comments which were incorrectly linked. #11211
+	/**
+	 * Based on real comments which were incorrectly linked.
+	 *
+	 * @ticket 11211
+	 */
 	function test_real_world_examples() {
 		$urls_before   = array(
 			'Example: WordPress, test (some text), I love example.com (http://example.org), it is brilliant',
@@ -205,11 +221,13 @@ class Tests_Formatting_MakeClickable extends WP_UnitTestCase {
 			'In his famous speech ‚ÄúYou and Your research‚Äù (here: <a href="http://www.cs.virginia.edu/~robins/YouAndYourResearch.html" rel="nofollow">http://www.cs.virginia.edu/~robins/YouAndYourResearch.html</a>) Richard Hamming wrote about people getting more done with their doors closed...',
 		);
 		foreach ( $urls_before as $key => $url ) {
-			$this->assertEquals( $urls_expected[ $key ], make_clickable( $url ) );
+			$this->assertSame( $urls_expected[ $key ], make_clickable( $url ) );
 		}
 	}
 
-	// #14993
+	/**
+	 * @ticket 14993
+	 */
 	function test_twitter_hash_bang() {
 		$urls_before   = array(
 			'http://twitter.com/#!/wordpress/status/25907440233',
@@ -222,7 +240,7 @@ class Tests_Formatting_MakeClickable extends WP_UnitTestCase {
 			'This is a really good tweet <a href="http://twitter.com/#!/wordpress/status/25907440233" rel="nofollow">http://twitter.com/#!/wordpress/status/25907440233</a>!',
 		);
 		foreach ( $urls_before as $key => $url ) {
-			$this->assertEquals( $urls_expected[ $key ], make_clickable( $url ) );
+			$this->assertSame( $urls_expected[ $key ], make_clickable( $url ) );
 		}
 	}
 
@@ -238,7 +256,7 @@ class Tests_Formatting_MakeClickable extends WP_UnitTestCase {
 			'mailto wrapped in angle brackets <foo@example.com>',
 		);
 		foreach ( $before as $key => $url ) {
-			$this->assertEquals( $expected[ $key ], make_clickable( $url ) );
+			$this->assertSame( $expected[ $key ], make_clickable( $url ) );
 		}
 	}
 
@@ -260,7 +278,7 @@ class Tests_Formatting_MakeClickable extends WP_UnitTestCase {
 			'Question mark then URL?<a href="http://example.com/" rel="nofollow">http://example.com/</a>',
 		);
 		foreach ( $before as $key => $url ) {
-			$this->assertEquals( $expected[ $key ], make_clickable( $url ) );
+			$this->assertSame( $expected[ $key ], make_clickable( $url ) );
 		}
 	}
 
@@ -284,7 +302,7 @@ class Tests_Formatting_MakeClickable extends WP_UnitTestCase {
 			'<a href="http://example.com/example.gif" title="Image from http://example.com">Look at this image!</a>',
 		);
 		foreach ( $urls_before as $key => $url ) {
-			$this->assertEquals( $urls_expected[ $key ], make_clickable( $url ) );
+			$this->assertSame( $urls_expected[ $key ], make_clickable( $url ) );
 		}
 	}
 
@@ -325,7 +343,7 @@ class Tests_Formatting_MakeClickable extends WP_UnitTestCase {
 		);
 
 		foreach ( $before as $key => $url ) {
-			$this->assertEquals( $expected[ $key ], make_clickable( $url ) );
+			$this->assertSame( $expected[ $key ], make_clickable( $url ) );
 		}
 	}
 
@@ -342,17 +360,17 @@ class Tests_Formatting_MakeClickable extends WP_UnitTestCase {
 			'<p><a href="http://example.com/" rel="nofollow">http://example.com/</a></p>',
 		);
 		foreach ( $urls_before as $key => $url ) {
-			$this->assertEquals( $urls_expected[ $key ], make_clickable( $url ) );
+			$this->assertSame( $urls_expected[ $key ], make_clickable( $url ) );
 		}
 	}
 
 	function test_no_links_within_links() {
 		$in = array(
 			'Some text with a link <a href="http://example.com">http://example.com</a>',
-			//'<a href="http://wordpress.org">This is already a link www.wordpress.org</a>', // fails in 3.3.1 too
+			// '<a href="http://wordpress.org">This is already a link www.wordpress.org</a>', // Fails in 3.3.1 too.
 		);
 		foreach ( $in as $text ) {
-			$this->assertEquals( $text, make_clickable( $text ) );
+			$this->assertSame( $text, make_clickable( $text ) );
 		}
 	}
 
@@ -362,7 +380,7 @@ class Tests_Formatting_MakeClickable extends WP_UnitTestCase {
 	function test_no_segfault() {
 		$in  = str_repeat( 'http://example.com/2011/03/18/post-title/', 256 );
 		$out = make_clickable( $in );
-		$this->assertEquals( $in, $out );
+		$this->assertSame( $in, $out );
 	}
 
 	/**
@@ -371,7 +389,7 @@ class Tests_Formatting_MakeClickable extends WP_UnitTestCase {
 	function test_line_break_in_existing_clickable_link() {
 		$html = "<a
 				  href='mailto:someone@example.com'>someone@example.com</a>";
-		$this->assertEquals( $html, make_clickable( $html ) );
+		$this->assertSame( $html, make_clickable( $html ) );
 	}
 
 	/**
@@ -379,7 +397,7 @@ class Tests_Formatting_MakeClickable extends WP_UnitTestCase {
 	 * @dataProvider data_script_and_style_tags
 	 */
 	public function test_dont_link_script_and_style_tags( $tag ) {
-		$this->assertEquals( $tag, make_clickable( $tag ) );
+		$this->assertSame( $tag, make_clickable( $tag ) );
 	}
 
 	public function data_script_and_style_tags() {
diff --git a/tests/formatting/MapDeep.php b/tests/formatting/MapDeep.php
index cacd62cf68..0a291c9769 100644
--- a/tests/formatting/MapDeep.php
+++ b/tests/formatting/MapDeep.php
@@ -7,11 +7,11 @@
 class Tests_Formatting_MapDeep extends WP_UnitTestCase {
 
 	public function test_map_deep_with_any_function_over_empty_array_should_return_empty_array() {
-		$this->assertEquals( array(), map_deep( array(), array( $this, 'append_baba' ) ) );
+		$this->assertSame( array(), map_deep( array(), array( $this, 'append_baba' ) ) );
 	}
 
 	public function test_map_deep_should_map_each_element_of_array_one_level_deep() {
-		$this->assertEquals(
+		$this->assertSame(
 			array(
 				'ababa',
 				'xbaba',
@@ -27,7 +27,7 @@ class Tests_Formatting_MapDeep extends WP_UnitTestCase {
 	}
 
 	public function test_map_deep_should_map_each_element_of_array_two_levels_deep() {
-		$this->assertEquals(
+		$this->assertSame(
 			array(
 				'ababa',
 				array(
@@ -67,11 +67,11 @@ class Tests_Formatting_MapDeep extends WP_UnitTestCase {
 	}
 
 	public function test_map_deep_should_apply_the_function_to_a_string() {
-		$this->assertEquals( 'xbaba', map_deep( 'x', array( $this, 'append_baba' ) ) );
+		$this->assertSame( 'xbaba', map_deep( 'x', array( $this, 'append_baba' ) ) );
 	}
 
 	public function test_map_deep_should_apply_the_function_to_an_integer() {
-		$this->assertEquals( '5baba', map_deep( 5, array( $this, 'append_baba' ) ) );
+		$this->assertSame( '5baba', map_deep( 5, array( $this, 'append_baba' ) ) );
 	}
 
 	public function test_map_deep_should_map_each_property_of_an_object() {
@@ -157,7 +157,7 @@ class Tests_Formatting_MapDeep extends WP_UnitTestCase {
 			'var0' => &$array_a['var0'],
 			'var1' => 'x',
 		);
-		$this->assertEquals(
+		$this->assertSame(
 			array(
 				'var0' => 'ababa',
 				'var1' => 'xbaba',
diff --git a/tests/formatting/NormalizeWhitespace.php b/tests/formatting/NormalizeWhitespace.php
index 9ed6b30ac2..9d963e0ef6 100644
--- a/tests/formatting/NormalizeWhitespace.php
+++ b/tests/formatting/NormalizeWhitespace.php
@@ -47,6 +47,6 @@ class Tests_Formatting_NormalizeWhitespace extends WP_UnitTestCase {
 	 * @dataProvider get_input_output
 	 */
 	function test_normalize_whitespace( $in_str, $exp_str ) {
-		$this->assertEquals( $exp_str, normalize_whitespace( $in_str ) );
+		$this->assertSame( $exp_str, normalize_whitespace( $in_str ) );
 	}
 }
diff --git a/tests/formatting/RemoveAccents.php b/tests/formatting/RemoveAccents.php
index 32ea89e5f1..e66b876e02 100644
--- a/tests/formatting/RemoveAccents.php
+++ b/tests/formatting/RemoveAccents.php
@@ -5,7 +5,7 @@
  */
 class Tests_Formatting_RemoveAccents extends WP_UnitTestCase {
 	public function test_remove_accents_simple() {
-		$this->assertEquals( 'abcdefghijkl', remove_accents( 'abcdefghijkl' ) );
+		$this->assertSame( 'abcdefghijkl', remove_accents( 'abcdefghijkl' ) );
 	}
 
 	/**
@@ -15,69 +15,69 @@ class Tests_Formatting_RemoveAccents extends WP_UnitTestCase {
 		$input  = '¬™¬∫√Ä√Å√Ç√É√Ñ√Ö√Ü√á√à√â√ä√ã√å√ç√é√è√ê√ë√í√ì√î√ï√ñ√ò√ô√ö√õ√ú√ù√û√ü√†√°√¢√£√§√•√¶√ß√®√©√™√´√¨√≠√Æ√Ø√∞√±√≤√≥√¥√µ√∂√∏√π√∫√ª√º√Ω√æ√ø';
 		$output = 'aoAAAAAAAECEEEEIIIIDNOOOOOOUUUUYTHsaaaaaaaeceeeeiiiidnoooooouuuuythy';
 
-		$this->assertEquals( $output, remove_accents( $input ), 'remove_accents replaces Latin-1 Supplement' );
+		$this->assertSame( $output, remove_accents( $input ), 'remove_accents replaces Latin-1 Supplement' );
 	}
 
 	public function test_remove_accents_latin_extended_a() {
 		$input  = 'ƒÄƒÅƒÇƒÉƒÑƒÖƒÜƒáƒàƒâƒäƒãƒåƒçƒéƒèƒêƒëƒíƒìƒîƒïƒñƒóƒòƒôƒöƒõƒúƒùƒûƒüƒ†ƒ°ƒ¢ƒ£ƒ§ƒ•ƒ¶ƒßƒ®ƒ©ƒ™ƒ´ƒ¨ƒ≠ƒÆƒØƒ∞ƒ±ƒ≤ƒ≥ƒ¥ƒµƒ∂ƒ∑ƒ∏ƒπƒ∫ƒªƒºƒΩƒæƒø≈Ä≈Å≈Ç≈É≈Ñ≈Ö≈Ü≈á≈à≈â≈ä≈ã≈å≈ç≈é≈è≈ê≈ë≈í≈ì≈î≈ï≈ñ≈ó≈ò≈ô≈ö≈õ≈ú≈ù≈û≈ü≈†≈°≈¢≈£≈§≈•≈¶≈ß≈®≈©≈™≈´≈¨≈≠≈Æ≈Ø≈∞≈±≈≤≈≥≈¥≈µ≈∂≈∑≈∏≈π≈∫≈ª≈º≈Ω≈æ≈ø';
 		$output = 'AaAaAaCcCcCcCcDdDdEeEeEeEeEeGgGgGgGgHhHhIiIiIiIiIiIJijJjKkkLlLlLlLlLlNnNnNnnNnOoOoOoOEoeRrRrRrSsSsSsSsTtTtTtUuUuUuUuUuUuWwYyYZzZzZzs';
 
-		$this->assertEquals( $output, remove_accents( $input ), 'remove_accents replaces Latin Extended A' );
+		$this->assertSame( $output, remove_accents( $input ), 'remove_accents replaces Latin Extended A' );
 	}
 
 	public function test_remove_accents_latin_extended_b() {
-		$this->assertEquals( 'SsTt', remove_accents( '»ò»ô»ö»õ' ), 'remove_accents replaces Latin Extended B' );
+		$this->assertSame( 'SsTt', remove_accents( '»ò»ô»ö»õ' ), 'remove_accents replaces Latin Extended B' );
 	}
 
 	public function test_remove_accents_euro_pound_signs() {
-		$this->assertEquals( 'E', remove_accents( '‚Ç¨' ), 'remove_accents replaces euro sign' );
-		$this->assertEquals( '', remove_accents( '¬£' ), 'remove_accents replaces pound sign' );
+		$this->assertSame( 'E', remove_accents( '‚Ç¨' ), 'remove_accents replaces euro sign' );
+		$this->assertSame( '', remove_accents( '¬£' ), 'remove_accents replaces pound sign' );
 	}
 
 	public function test_remove_accents_iso8859() {
-		// File is Latin1 encoded
+		// File is Latin1-encoded.
 		$file   = DIR_TESTDATA . '/formatting/remove_accents.01.input.txt';
 		$input  = file_get_contents( $file );
 		$input  = trim( $input );
 		$output = 'EfSZszYcYuAAAAAACEEEEIIIINOOOOOOUUUUYaaaaaaceeeeiiiinoooooouuuuyyOEoeAEDHTHssaedhth';
 
-		$this->assertEquals( $output, remove_accents( $input ), 'remove_accents from ISO-8859-1 text' );
+		$this->assertSame( $output, remove_accents( $input ), 'remove_accents from ISO-8859-1 text' );
 	}
 
 	/**
 	 * @ticket 17738
 	 */
 	public function test_remove_accents_vowels_diacritic() {
-		// Vowels with diacritic
-		// unmarked
-		$this->assertEquals( 'OoUu', remove_accents( '∆†∆°∆Ø∆∞' ) );
-		// grave accent
-		$this->assertEquals( 'AaAaEeOoOoUuYy', remove_accents( '·∫¶·∫ß·∫∞·∫±·ªÄ·ªÅ·ªí·ªì·ªú·ªù·ª™·ª´·ª≤·ª≥' ) );
-		// hook
-		$this->assertEquals( 'AaAaAaEeEeIiOoOoOoUuUuYy', remove_accents( '·∫¢·∫£·∫®·∫©·∫≤·∫≥·∫∫·∫ª·ªÇ·ªÉ·ªà·ªâ·ªé·ªè·ªî·ªï·ªû·ªü·ª¶·ªß·ª¨·ª≠·ª∂·ª∑' ) );
-		// tilde
-		$this->assertEquals( 'AaAaEeEeOoOoUuYy', remove_accents( '·∫™·∫´·∫¥·∫µ·∫º·∫Ω·ªÑ·ªÖ·ªñ·ªó·ª†·ª°·ªÆ·ªØ·ª∏·ªπ' ) );
-		// acute accent
-		$this->assertEquals( 'AaAaEeOoOoUu', remove_accents( '·∫§·∫•·∫Æ·∫Ø·∫æ·∫ø·ªê·ªë·ªö·ªõ·ª®·ª©' ) );
-		// dot below
-		$this->assertEquals( 'AaAaAaEeEeIiOoOoOoUuUuYy', remove_accents( '·∫†·∫°·∫¨·∫≠·∫∂·∫∑·∫∏·∫π·ªÜ·ªá·ªä·ªã·ªå·ªç·ªò·ªô·ª¢·ª£·ª§·ª•·ª∞·ª±·ª¥·ªµ' ) );
+		// Vowels with diacritic.
+		// Unmarked.
+		$this->assertSame( 'OoUu', remove_accents( '∆†∆°∆Ø∆∞' ) );
+		// Grave accent.
+		$this->assertSame( 'AaAaEeOoOoUuYy', remove_accents( '·∫¶·∫ß·∫∞·∫±·ªÄ·ªÅ·ªí·ªì·ªú·ªù·ª™·ª´·ª≤·ª≥' ) );
+		// Hook.
+		$this->assertSame( 'AaAaAaEeEeIiOoOoOoUuUuYy', remove_accents( '·∫¢·∫£·∫®·∫©·∫≤·∫≥·∫∫·∫ª·ªÇ·ªÉ·ªà·ªâ·ªé·ªè·ªî·ªï·ªû·ªü·ª¶·ªß·ª¨·ª≠·ª∂·ª∑' ) );
+		// Tilde.
+		$this->assertSame( 'AaAaEeEeOoOoUuYy', remove_accents( '·∫™·∫´·∫¥·∫µ·∫º·∫Ω·ªÑ·ªÖ·ªñ·ªó·ª†·ª°·ªÆ·ªØ·ª∏·ªπ' ) );
+		// Acute accent.
+		$this->assertSame( 'AaAaEeOoOoUu', remove_accents( '·∫§·∫•·∫Æ·∫Ø·∫æ·∫ø·ªê·ªë·ªö·ªõ·ª®·ª©' ) );
+		// Dot below.
+		$this->assertSame( 'AaAaAaEeEeIiOoOoOoUuUuYy', remove_accents( '·∫†·∫°·∫¨·∫≠·∫∂·∫∑·∫∏·∫π·ªÜ·ªá·ªä·ªã·ªå·ªç·ªò·ªô·ª¢·ª£·ª§·ª•·ª∞·ª±·ª¥·ªµ' ) );
 	}
 
 	/**
 	 * @ticket 20772
 	 */
 	public function test_remove_accents_hanyu_pinyin() {
-		// Vowels with diacritic (Chinese, Hanyu Pinyin)
-		// macron
-		$this->assertEquals( 'aeiouuAEIOUU', remove_accents( 'ƒÅƒìƒ´≈ç≈´«ñƒÄƒíƒ™≈å≈™«ï' ) );
-		// acute accent
-		$this->assertEquals( 'aeiouuAEIOUU', remove_accents( '√°√©√≠√≥√∫«ò√Å√â√ç√ì√ö«ó' ) );
-		// caron
-		$this->assertEquals( 'aeiouuAEIOUU', remove_accents( '«éƒõ«ê«í«î«ö«çƒö«è«ë«ì«ô' ) );
-		// grave accent
-		$this->assertEquals( 'aeiouuAEIOUU', remove_accents( '√†√®√¨√≤√π«ú√Ä√à√å√í√ô«õ' ) );
-		// unmarked
-		$this->assertEquals( 'aaeiouuAEIOUU', remove_accents( 'a…ëeiou√ºAEIOU√ú' ) );
+		// Vowels with diacritic (Chinese, Hanyu Pinyin).
+		// Macron.
+		$this->assertSame( 'aeiouuAEIOUU', remove_accents( 'ƒÅƒìƒ´≈ç≈´«ñƒÄƒíƒ™≈å≈™«ï' ) );
+		// Acute accent.
+		$this->assertSame( 'aeiouuAEIOUU', remove_accents( '√°√©√≠√≥√∫«ò√Å√â√ç√ì√ö«ó' ) );
+		// Caron.
+		$this->assertSame( 'aeiouuAEIOUU', remove_accents( '«éƒõ«ê«í«î«ö«çƒö«è«ë«ì«ô' ) );
+		// Grave accent.
+		$this->assertSame( 'aeiouuAEIOUU', remove_accents( '√†√®√¨√≤√π«ú√Ä√à√å√í√ô«õ' ) );
+		// Unmarked.
+		$this->assertSame( 'aaeiouuAEIOUU', remove_accents( 'a…ëeiou√ºAEIOU√ú' ) );
 	}
 
 	function _remove_accents_germanic_umlauts_cb() {
@@ -90,7 +90,7 @@ class Tests_Formatting_RemoveAccents extends WP_UnitTestCase {
 	public function test_remove_accents_germanic_umlauts() {
 		add_filter( 'locale', array( $this, '_remove_accents_germanic_umlauts_cb' ) );
 
-		$this->assertEquals( 'AeOeUeaeoeuess', remove_accents( '√Ñ√ñ√ú√§√∂√º√ü' ) );
+		$this->assertSame( 'AeOeUeaeoeuess', remove_accents( '√Ñ√ñ√ú√§√∂√º√ü' ) );
 
 		remove_filter( 'locale', array( $this, '_remove_accents_germanic_umlauts_cb' ) );
 	}
@@ -105,7 +105,7 @@ class Tests_Formatting_RemoveAccents extends WP_UnitTestCase {
 	public function test_remove_danish_accents() {
 		add_filter( 'locale', array( $this, '_set_locale_to_danish' ) );
 
-		$this->assertEquals( 'AeOeAaaeoeaa', remove_accents( '√Ü√ò√Ö√¶√∏√•' ) );
+		$this->assertSame( 'AeOeAaaeoeaa', remove_accents( '√Ü√ò√Ö√¶√∏√•' ) );
 
 		remove_filter( 'locale', array( $this, '_set_locale_to_danish' ) );
 	}
@@ -120,11 +120,11 @@ class Tests_Formatting_RemoveAccents extends WP_UnitTestCase {
 	public function test_remove_catalan_middot() {
 		add_filter( 'locale', array( $this, '_set_locale_to_catalan' ) );
 
-		$this->assertEquals( 'allallalla', remove_accents( 'al¬∑lalla≈Äla' ) );
+		$this->assertSame( 'allallalla', remove_accents( 'al¬∑lalla≈Äla' ) );
 
 		remove_filter( 'locale', array( $this, '_set_locale_to_catalan' ) );
 
-		$this->assertEquals( 'al¬∑lallalla', remove_accents( 'al¬∑lalla≈Äla' ) );
+		$this->assertSame( 'al¬∑lallalla', remove_accents( 'al¬∑lalla≈Äla' ) );
 	}
 
 	public function _set_locale_to_serbian() {
@@ -137,10 +137,10 @@ class Tests_Formatting_RemoveAccents extends WP_UnitTestCase {
 	public function test_transcribe_serbian_crossed_d() {
 		add_filter( 'locale', array( $this, '_set_locale_to_serbian' ) );
 
-		$this->assertEquals( 'DJdj', remove_accents( 'ƒêƒë' ) );
+		$this->assertSame( 'DJdj', remove_accents( 'ƒêƒë' ) );
 
 		remove_filter( 'locale', array( $this, '_set_locale_to_serbian' ) );
 
-		$this->assertEquals( 'Dd', remove_accents( 'ƒêƒë' ) );
+		$this->assertSame( 'Dd', remove_accents( 'ƒêƒë' ) );
 	}
 }
diff --git a/tests/formatting/SanitizeFileName.php b/tests/formatting/SanitizeFileName.php
index 1ae561a4ad..39057aad06 100644
--- a/tests/formatting/SanitizeFileName.php
+++ b/tests/formatting/SanitizeFileName.php
@@ -7,17 +7,26 @@ class Tests_Formatting_SanitizeFileName extends WP_UnitTestCase {
 	function test_munges_extensions() {
 		# r17990
 		$file_name = sanitize_file_name( 'test.phtml.txt' );
-		$this->assertEquals( 'test.phtml_.txt', $file_name );
+		$this->assertSame( 'test.phtml_.txt', $file_name );
 	}
 
 	function test_removes_special_chars() {
-		$special_chars = array( '?', '[', ']', '/', '\\', '=', '<', '>', ':', ';', ',', "'", '"', '&', '$', '#', '*', '(', ')', '|', '~', '`', '!', '{', '}', '%', '+', chr( 0 ) );
+		$special_chars = array( '?', '[', ']', '/', '\\', '=', '<', '>', ':', ';', ',', "'", '"', '&', '$', '#', '*', '(', ')', '|', '~', '`', '!', '{', '}', '%', '+', '‚Äô', '¬´', '¬ª', '‚Äù', '‚Äú', chr( 0 ) );
 		$string        = 'test';
 		foreach ( $special_chars as $char ) {
 			$string .= $char;
 		}
 		$string .= 'test';
-		$this->assertEquals( 'testtest', sanitize_file_name( $string ) );
+		$this->assertSame( 'testtest', sanitize_file_name( $string ) );
+	}
+
+	/**
+	 * @ticket 22363
+	 */
+	function test_removes_accents() {
+		$in  = '√†√°√¢√£√§√•√¶√ß√®√©√™√´√¨√≠√Æ√Ø√±√≤√≥√¥√µ√∂√∏√π√∫√ª√º√Ω√ø';
+		$out = 'aaaaaaaeceeeeiiiinoooooouuuuyy';
+		$this->assertSame( $out, sanitize_file_name( $in ) );
 	}
 
 	/**
@@ -25,7 +34,7 @@ class Tests_Formatting_SanitizeFileName extends WP_UnitTestCase {
 	 *
 	 * @ticket 16330
 	 */
-	function test_replace_spaces() {
+	function test_replaces_spaces() {
 		$urls = array(
 			'unencoded space.png'  => 'unencoded-space.png',
 			'encoded-space.jpg'    => 'encoded-space.jpg',
@@ -34,38 +43,54 @@ class Tests_Formatting_SanitizeFileName extends WP_UnitTestCase {
 		);
 
 		foreach ( $urls as $test => $expected ) {
-			$this->assertEquals( $expected, sanitize_file_name( $test ) );
+			$this->assertSame( $expected, sanitize_file_name( $test ) );
 		}
 	}
 
 	function test_replaces_any_number_of_hyphens_with_one_hyphen() {
-		$this->assertEquals( 'a-t-t', sanitize_file_name( 'a----t----t' ) );
+		$this->assertSame( 'a-t-t', sanitize_file_name( 'a----t----t' ) );
 	}
 
 	function test_trims_trailing_hyphens() {
-		$this->assertEquals( 'a-t-t', sanitize_file_name( 'a----t----t----' ) );
+		$this->assertSame( 'a-t-t', sanitize_file_name( 'a----t----t----' ) );
 	}
 
 	function test_replaces_any_amount_of_whitespace_with_one_hyphen() {
-		$this->assertEquals( 'a-t', sanitize_file_name( 'a          t' ) );
-		$this->assertEquals( 'a-t', sanitize_file_name( "a    \n\n\nt" ) );
+		$this->assertSame( 'a-t', sanitize_file_name( 'a          t' ) );
+		$this->assertSame( 'a-t', sanitize_file_name( "a    \n\n\nt" ) );
 	}
 
 	/**
 	 * @ticket 16226
 	 */
 	function test_replaces_percent_sign() {
-		$this->assertEquals( 'a22b.jpg', sanitize_file_name( 'a%22b.jpg' ) );
+		$this->assertSame( 'a22b.jpg', sanitize_file_name( 'a%22b.jpg' ) );
 	}
 
-	function test_replaces_unnammed_file_extensions() {
+	function test_replaces_unnamed_file_extensions() {
 		// Test filenames with both supported and unsupported extensions.
-		$this->assertEquals( 'unnamed-file.exe', sanitize_file_name( '_.exe' ) );
-		$this->assertEquals( 'unnamed-file.jpg', sanitize_file_name( '_.jpg' ) );
+		$this->assertSame( 'unnamed-file.exe', sanitize_file_name( '_.exe' ) );
+		$this->assertSame( 'unnamed-file.jpg', sanitize_file_name( '_.jpg' ) );
 	}
 
-	function test_replaces_unnammed_file_extensionless() {
+	function test_replaces_unnamed_file_extensionless() {
 		// Test a filenames that becomes extensionless.
-		$this->assertEquals( 'no-extension', sanitize_file_name( '_.no-extension' ) );
+		$this->assertSame( 'no-extension', sanitize_file_name( '_.no-extension' ) );
+	}
+
+	/**
+	 * @dataProvider data_wp_filenames
+	 */
+	function test_replaces_invalid_utf8_characters( $input, $expected ) {
+		$this->assertSame( $expected, sanitize_file_name( $input ) );
+	}
+
+	function data_wp_filenames() {
+		return array(
+			array( urldecode( '%B1myfile.png' ), 'myfile.png' ),
+			array( urldecode( '%B1myfile' ), 'myfile' ),
+			array( 'demo bar.png', 'demo-bar.png' ),
+			array( 'demo' . json_decode( '"\u00a0"' ) . 'bar.png', 'demo-bar.png' ),
+		);
 	}
 }
diff --git a/tests/formatting/SanitizeMimeType.php b/tests/formatting/SanitizeMimeType.php
index 5a8bd55a63..45c8ec611f 100644
--- a/tests/formatting/SanitizeMimeType.php
+++ b/tests/formatting/SanitizeMimeType.php
@@ -4,7 +4,10 @@
  * @group formatting
  */
 class Tests_Formatting_SanitizeMimeType extends WP_UnitTestCase {
-	// 17855
+
+	/**
+	 * @ticket 17855
+	 */
 	function test_sanitize_valid_mime_type() {
 		$inputs = array(
 			'application/atom+xml',
@@ -32,7 +35,7 @@ class Tests_Formatting_SanitizeMimeType extends WP_UnitTestCase {
 		);
 
 		foreach ( $inputs as $input ) {
-			$this->assertEquals( $input, sanitize_mime_type( $input ) );
+			$this->assertSame( $input, sanitize_mime_type( $input ) );
 		}
 	}
 }
diff --git a/tests/formatting/SanitizeOrderby.php b/tests/formatting/SanitizeOrderby.php
index 371d63b52e..95d2bed15e 100644
--- a/tests/formatting/SanitizeOrderby.php
+++ b/tests/formatting/SanitizeOrderby.php
@@ -10,7 +10,7 @@ class Tests_Formatting_SanitizeOrderby extends WP_UnitTestCase {
 	 * @dataProvider valid_orderbys
 	 */
 	function test_valid( $orderby ) {
-		$this->assertEquals( $orderby, sanitize_sql_orderby( $orderby ) );
+		$this->assertSame( $orderby, sanitize_sql_orderby( $orderby ) );
 	}
 	function valid_orderbys() {
 		return array(
diff --git a/tests/formatting/SanitizeTextField.php b/tests/formatting/SanitizeTextField.php
index 5e87ff1c89..00c19faa17 100644
--- a/tests/formatting/SanitizeTextField.php
+++ b/tests/formatting/SanitizeTextField.php
@@ -7,11 +7,11 @@ class Tests_Formatting_SanitizeTextField extends WP_UnitTestCase {
 	function data_sanitize_text_field() {
 		return array(
 			array(
-				'–æ–†–∞–Ω–≥—É—Ç–∞–Ω–≥', //Ensure UTF8 text is safe the –† is D0 A0 and A0 is the non-breaking space.
+				'–æ–†–∞–Ω–≥—É—Ç–∞–Ω–≥', // Ensure UTF-8 text is safe. The –† is D0 A0 and A0 is the non-breaking space.
 				'–æ–†–∞–Ω–≥—É—Ç–∞–Ω–≥',
 			),
 			array(
-				'–°–ê–ü–†', //Ensure UTF8 text is safe the –† is D0 A0 and A0 is the non-breaking space.
+				'–°–ê–ü–†',       // Ensure UTF-8 text is safe. the –† is D0 A0 and A0 is the non-breaking space.
 				'–°–ê–ü–†',
 			),
 			array(
@@ -82,8 +82,8 @@ class Tests_Formatting_SanitizeTextField extends WP_UnitTestCase {
 				),
 			),
 			array(
-				'%AB%BC%DE', //Just octets
-				'', //Emtpy as we strip all the octets out
+				'%AB%BC%DE', // Just octets.
+				'',          // Emtpy as we strip all the octets out.
 			),
 			array(
 				'Invalid octects remain %II',
@@ -136,8 +136,8 @@ class Tests_Formatting_SanitizeTextField extends WP_UnitTestCase {
 			$expected_oneline   = $expected;
 			$expected_multiline = $expected;
 		}
-		$this->assertEquals( $expected_oneline, sanitize_text_field( $string ) );
-		$this->assertEqualsIgnoreEOL( $expected_multiline, sanitize_textarea_field( $string ) );
+		$this->assertSame( $expected_oneline, sanitize_text_field( $string ) );
+		$this->assertSameIgnoreEOL( $expected_multiline, sanitize_textarea_field( $string ) );
 
 	}
 }
diff --git a/tests/formatting/SanitizeTitle.php b/tests/formatting/SanitizeTitle.php
index e536e14b40..a389d580ba 100644
--- a/tests/formatting/SanitizeTitle.php
+++ b/tests/formatting/SanitizeTitle.php
@@ -7,12 +7,12 @@ class Tests_Formatting_SanitizeTitle extends WP_UnitTestCase {
 	function test_strips_html() {
 		$input    = 'Captain <strong>Awesome</strong>';
 		$expected = 'captain-awesome';
-		$this->assertEquals( $expected, sanitize_title( $input ) );
+		$this->assertSame( $expected, sanitize_title( $input ) );
 	}
 
 	function test_titles_sanitized_to_nothing_are_replaced_with_optional_fallback() {
 		$input    = '<strong></strong>';
 		$fallback = 'Captain Awesome';
-		$this->assertEquals( $fallback, sanitize_title( $input, $fallback ) );
+		$this->assertSame( $fallback, sanitize_title( $input, $fallback ) );
 	}
 }
diff --git a/tests/formatting/SanitizeTitleWithDashes.php b/tests/formatting/SanitizeTitleWithDashes.php
index c3059614e3..e105afca15 100644
--- a/tests/formatting/SanitizeTitleWithDashes.php
+++ b/tests/formatting/SanitizeTitleWithDashes.php
@@ -7,137 +7,144 @@ class Tests_Formatting_SanitizeTitleWithDashes extends WP_UnitTestCase {
 	function test_strips_html() {
 		$input    = 'Captain <strong>Awesome</strong>';
 		$expected = 'captain-awesome';
-		$this->assertEquals( $expected, sanitize_title( $input ) );
+		$this->assertSame( $expected, sanitize_title( $input ) );
 	}
 
 	function test_strips_unencoded_percent_signs() {
-		$this->assertEquals( 'fran%c3%a7ois', sanitize_title_with_dashes( 'fran%c3%a7%ois' ) );
+		$this->assertSame( 'fran%c3%a7ois', sanitize_title_with_dashes( 'fran%c3%a7%ois' ) );
 	}
 
 	function test_makes_title_lowercase() {
-		$this->assertEquals( 'abc', sanitize_title_with_dashes( 'ABC' ) );
+		$this->assertSame( 'abc', sanitize_title_with_dashes( 'ABC' ) );
 	}
 
 	function test_replaces_any_amount_of_whitespace_with_one_hyphen() {
-		$this->assertEquals( 'a-t', sanitize_title_with_dashes( 'a          t' ) );
-		$this->assertEquals( 'a-t', sanitize_title_with_dashes( "a    \n\n\nt" ) );
+		$this->assertSame( 'a-t', sanitize_title_with_dashes( 'a          t' ) );
+		$this->assertSame( 'a-t', sanitize_title_with_dashes( "a    \n\n\nt" ) );
 	}
 
 	function test_replaces_any_number_of_hyphens_with_one_hyphen() {
-		$this->assertEquals( 'a-t-t', sanitize_title_with_dashes( 'a----t----t' ) );
+		$this->assertSame( 'a-t-t', sanitize_title_with_dashes( 'a----t----t' ) );
 	}
 
 	function test_trims_trailing_hyphens() {
-		$this->assertEquals( 'a-t-t', sanitize_title_with_dashes( 'a----t----t----' ) );
+		$this->assertSame( 'a-t-t', sanitize_title_with_dashes( 'a----t----t----' ) );
 	}
 
 	function test_handles_non_entity_ampersands() {
-		$this->assertEquals( 'penn-teller-bull', sanitize_title_with_dashes( 'penn & teller bull' ) );
+		$this->assertSame( 'penn-teller-bull', sanitize_title_with_dashes( 'penn & teller bull' ) );
 	}
 
 	public function test_strips_nbsp_ndash_and_amp() {
-		$this->assertEquals( 'no-entities-here', sanitize_title_with_dashes( 'No &nbsp; Entities &ndash; Here &amp;' ) );
+		$this->assertSame( 'no-entities-here', sanitize_title_with_dashes( 'No &nbsp; Entities &ndash; Here &amp;' ) );
 	}
 
 	public function test_strips_encoded_ampersand() {
-		$this->assertEquals( 'one-two', sanitize_title_with_dashes( 'One &amp; Two', '', 'save' ) );
+		$this->assertSame( 'one-two', sanitize_title_with_dashes( 'One &amp; Two', '', 'save' ) );
 	}
 
 	public function test_strips_url_encoded_ampersand() {
-		$this->assertEquals( 'one-two', sanitize_title_with_dashes( 'One &#123; Two;', '', 'save' ) );
+		$this->assertSame( 'one-two', sanitize_title_with_dashes( 'One &#123; Two;', '', 'save' ) );
 	}
 
 	public function test_strips_trademark_symbol() {
-		$this->assertEquals( 'one-two', sanitize_title_with_dashes( 'One Two‚Ñ¢;', '', 'save' ) );
+		$this->assertSame( 'one-two', sanitize_title_with_dashes( 'One Two‚Ñ¢;', '', 'save' ) );
 	}
 
 	public function test_strips_unencoded_ampersand_followed_by_encoded_ampersand() {
-		$this->assertEquals( 'one-two', sanitize_title_with_dashes( 'One &&amp; Two;', '', 'save' ) );
+		$this->assertSame( 'one-two', sanitize_title_with_dashes( 'One &&amp; Two;', '', 'save' ) );
 	}
 
 	public function test_strips_unencoded_ampersand_when_not_surrounded_by_spaces() {
-		$this->assertEquals( 'onetwo', sanitize_title_with_dashes( 'One&Two', '', 'save' ) );
+		$this->assertSame( 'onetwo', sanitize_title_with_dashes( 'One&Two', '', 'save' ) );
 	}
 
 	function test_replaces_nbsp() {
-		$this->assertEquals( 'dont-break-the-space', sanitize_title_with_dashes( "don't¬†break¬†the¬†space", '', 'save' ) );
+		$this->assertSame( 'dont-break-the-space', sanitize_title_with_dashes( "don't¬†break¬†the¬†space", '', 'save' ) );
 	}
 
 	/**
 	 * @ticket 31790
 	 */
 	function test_replaces_nbsp_entities() {
-		$this->assertEquals( 'dont-break-the-space', sanitize_title_with_dashes( "don't&nbsp;break&#160;the&nbsp;space", '', 'save' ) );
+		$this->assertSame( 'dont-break-the-space', sanitize_title_with_dashes( "don't&nbsp;break&#160;the&nbsp;space", '', 'save' ) );
 	}
 
 	function test_replaces_ndash_mdash() {
-		$this->assertEquals( 'do-the-dash', sanitize_title_with_dashes( 'Do ‚Äì the Dash', '', 'save' ) );
-		$this->assertEquals( 'do-the-dash', sanitize_title_with_dashes( 'Do the ‚Äî Dash', '', 'save' ) );
+		$this->assertSame( 'do-the-dash', sanitize_title_with_dashes( 'Do ‚Äì the Dash', '', 'save' ) );
+		$this->assertSame( 'do-the-dash', sanitize_title_with_dashes( 'Do the ‚Äî Dash', '', 'save' ) );
 	}
 
 	/**
 	 * @ticket 31790
 	 */
 	function test_replaces_ndash_mdash_entities() {
-		$this->assertEquals( 'do-the-dash', sanitize_title_with_dashes( 'Do &ndash; the &#8211; Dash', '', 'save' ) );
-		$this->assertEquals( 'do-the-dash', sanitize_title_with_dashes( 'Do &mdash; the &#8212; Dash', '', 'save' ) );
+		$this->assertSame( 'do-the-dash', sanitize_title_with_dashes( 'Do &ndash; the &#8211; Dash', '', 'save' ) );
+		$this->assertSame( 'do-the-dash', sanitize_title_with_dashes( 'Do &mdash; the &#8212; Dash', '', 'save' ) );
 	}
 
 	function test_replaces_iexcel_iquest() {
-		$this->assertEquals( 'just-a-slug', sanitize_title_with_dashes( 'Just ¬°a Slug', '', 'save' ) );
-		$this->assertEquals( 'just-a-slug', sanitize_title_with_dashes( 'Just a Slug¬ø', '', 'save' ) );
+		$this->assertSame( 'just-a-slug', sanitize_title_with_dashes( 'Just ¬°a Slug', '', 'save' ) );
+		$this->assertSame( 'just-a-slug', sanitize_title_with_dashes( 'Just a Slug¬ø', '', 'save' ) );
 	}
 
 	function test_replaces_angle_quotes() {
-		$this->assertEquals( 'just-a-slug', sanitize_title_with_dashes( '‚ÄπJust a Slug‚Ä∫', '', 'save' ) );
-		$this->assertEquals( 'just-a-slug', sanitize_title_with_dashes( '¬´Just a Slug¬ª', '', 'save' ) );
+		$this->assertSame( 'just-a-slug', sanitize_title_with_dashes( '‚ÄπJust a Slug‚Ä∫', '', 'save' ) );
+		$this->assertSame( 'just-a-slug', sanitize_title_with_dashes( '¬´Just a Slug¬ª', '', 'save' ) );
 	}
 
 	function test_replaces_curly_quotes() {
-		$this->assertEquals( 'hey-its-curly-joe', sanitize_title_with_dashes( 'Hey its ‚ÄúCurly Joe‚Äù', '', 'save' ) );
-		$this->assertEquals( 'hey-its-curly-joe', sanitize_title_with_dashes( 'Hey its ‚ÄòCurly Joe‚Äô', '', 'save' ) );
-		$this->assertEquals( 'hey-its-curly-joe', sanitize_title_with_dashes( 'Hey its ‚ÄûCurly Joe‚Äú', '', 'save' ) );
-		$this->assertEquals( 'hey-its-curly-joe', sanitize_title_with_dashes( 'Hey its ‚ÄöCurly Joe‚Äõ', '', 'save' ) );
-		$this->assertEquals( 'hey-its-curly-joe', sanitize_title_with_dashes( 'Hey its ‚ÄûCurly Joe‚Äü', '', 'save' ) );
+		$this->assertSame( 'hey-its-curly-joe', sanitize_title_with_dashes( 'Hey its ‚ÄúCurly Joe‚Äù', '', 'save' ) );
+		$this->assertSame( 'hey-its-curly-joe', sanitize_title_with_dashes( 'Hey its ‚ÄòCurly Joe‚Äô', '', 'save' ) );
+		$this->assertSame( 'hey-its-curly-joe', sanitize_title_with_dashes( 'Hey its ‚ÄûCurly Joe‚Äú', '', 'save' ) );
+		$this->assertSame( 'hey-its-curly-joe', sanitize_title_with_dashes( 'Hey its ‚ÄöCurly Joe‚Äõ', '', 'save' ) );
+		$this->assertSame( 'hey-its-curly-joe', sanitize_title_with_dashes( 'Hey its ‚ÄûCurly Joe‚Äü', '', 'save' ) );
+	}
+
+	/**
+	 * @ticket 49791
+	 */
+	function test_replaces_bullet() {
+		$this->assertSame( 'fancy-title-amazing', sanitize_title_with_dashes( 'Fancy Title ‚Ä¢ Amazing', '', 'save' ) );
 	}
 
 	function test_replaces_copy_reg_deg_trade() {
-		$this->assertEquals( 'just-a-slug', sanitize_title_with_dashes( 'Just ¬© a Slug', '', 'save' ) );
-		$this->assertEquals( 'just-a-slug', sanitize_title_with_dashes( '¬Æ Just a Slug', '', 'save' ) );
-		$this->assertEquals( 'just-a-slug', sanitize_title_with_dashes( 'Just a ¬∞ Slug', '', 'save' ) );
-		$this->assertEquals( 'just-a-slug', sanitize_title_with_dashes( 'Just ‚Ñ¢ a Slug', '', 'save' ) );
+		$this->assertSame( 'just-a-slug', sanitize_title_with_dashes( 'Just ¬© a Slug', '', 'save' ) );
+		$this->assertSame( 'just-a-slug', sanitize_title_with_dashes( '¬Æ Just a Slug', '', 'save' ) );
+		$this->assertSame( 'just-a-slug', sanitize_title_with_dashes( 'Just a ¬∞ Slug', '', 'save' ) );
+		$this->assertSame( 'just-a-slug', sanitize_title_with_dashes( 'Just ‚Ñ¢ a Slug', '', 'save' ) );
 	}
 
 	/**
 	 * @ticket 10792
 	 */
 	function test_replaces_forward_slash() {
-		$this->assertEquals( 'songs-by-lennon-mccartney', sanitize_title_with_dashes( 'songs by Lennon/McCartney', '', 'save' ) );
-		$this->assertEquals( 'songs-by-lennon-mccartney', sanitize_title_with_dashes( 'songs by Lennon//McCartney', '', 'save' ) );
-		$this->assertEquals( 'songs-by-lennon-mccartney', sanitize_title_with_dashes( 'songs by Lennon///McCartney', '', 'save' ) );
-		$this->assertEquals( 'songs-by-lennon-mccartney', sanitize_title_with_dashes( 'songs by Lennon/-McCartney', '', 'save' ) );
-		$this->assertEquals( 'songs-by-lennon-mccartney', sanitize_title_with_dashes( '//songs by Lennon/McCartney', '', 'save' ) );
+		$this->assertSame( 'songs-by-lennon-mccartney', sanitize_title_with_dashes( 'songs by Lennon/McCartney', '', 'save' ) );
+		$this->assertSame( 'songs-by-lennon-mccartney', sanitize_title_with_dashes( 'songs by Lennon//McCartney', '', 'save' ) );
+		$this->assertSame( 'songs-by-lennon-mccartney', sanitize_title_with_dashes( 'songs by Lennon///McCartney', '', 'save' ) );
+		$this->assertSame( 'songs-by-lennon-mccartney', sanitize_title_with_dashes( 'songs by Lennon/-McCartney', '', 'save' ) );
+		$this->assertSame( 'songs-by-lennon-mccartney', sanitize_title_with_dashes( '//songs by Lennon/McCartney', '', 'save' ) );
 	}
 
 	/**
 	 * @ticket 19820
 	 */
 	function test_replaces_multiply_sign() {
-		$this->assertEquals( '6x7-is-42', sanitize_title_with_dashes( '6√ó7 is 42', '', 'save' ) );
+		$this->assertSame( '6x7-is-42', sanitize_title_with_dashes( '6√ó7 is 42', '', 'save' ) );
 	}
 
 	/**
 	 * @ticket 20772
 	 */
 	function test_replaces_standalone_diacritic() {
-		$this->assertEquals( 'aaaa', sanitize_title_with_dashes( 'aÃÑaÃÅaÃåaÃÄ', '', 'save' ) );
+		$this->assertSame( 'aaaa', sanitize_title_with_dashes( 'aÃÑaÃÅaÃåaÃÄ', '', 'save' ) );
 	}
 
 	/**
 	 * @ticket 22395
 	 */
 	function test_replaces_acute_accents() {
-		$this->assertEquals( 'aaaa', sanitize_title_with_dashes( 'aÃÅaÕÅa¬¥aÀä', '', 'save' ) );
+		$this->assertSame( 'aaaa', sanitize_title_with_dashes( 'aÃÅaÕÅa¬¥aÀä', '', 'save' ) );
 	}
 
 }
diff --git a/tests/formatting/SanitizeTrackbackUrls.php b/tests/formatting/SanitizeTrackbackUrls.php
index b70f71bb43..d790cdcc16 100644
--- a/tests/formatting/SanitizeTrackbackUrls.php
+++ b/tests/formatting/SanitizeTrackbackUrls.php
@@ -9,7 +9,7 @@ class Tests_Formatting_SanitizeTrackbackUrls extends WP_UnitTestCase {
 	 * @dataProvider breaks
 	 */
 	function test_sanitize_trackback_urls_with_multiple_urls( $break ) {
-		$this->assertEquals( "http://example.com\nhttp://example.org", sanitize_trackback_urls( "http://example.com{$break}http://example.org" ) );
+		$this->assertSame( "http://example.com\nhttp://example.org", sanitize_trackback_urls( "http://example.com{$break}http://example.org" ) );
 	}
 
 	function breaks() {
diff --git a/tests/formatting/SanitizeUser.php b/tests/formatting/SanitizeUser.php
index b4e051c678..43533c6642 100644
--- a/tests/formatting/SanitizeUser.php
+++ b/tests/formatting/SanitizeUser.php
@@ -7,7 +7,7 @@ class Tests_Formatting_SanitizeUser extends WP_UnitTestCase {
 	function test_strips_html() {
 		$input    = 'Captain <strong>Awesome</strong>';
 		$expected = is_multisite() ? 'captain awesome' : 'Captain Awesome';
-		$this->assertEquals( $expected, sanitize_user( $input ) );
+		$this->assertSame( $expected, sanitize_user( $input ) );
 	}
 
 	public function test_strips_encoded_ampersand() {
@@ -18,7 +18,7 @@ class Tests_Formatting_SanitizeUser extends WP_UnitTestCase {
 			$expected = strtolower( $expected );
 		}
 
-		$this->assertEquals( $expected, sanitize_user( 'AT&amp;T' ) );
+		$this->assertSame( $expected, sanitize_user( 'AT&amp;T' ) );
 	}
 
 	public function test_strips_encoded_ampersand_when_followed_by_semicolon() {
@@ -29,14 +29,14 @@ class Tests_Formatting_SanitizeUser extends WP_UnitTestCase {
 			$expected = strtolower( $expected );
 		}
 
-		$this->assertEquals( $expected, sanitize_user( 'AT&amp;T Test;' ) );
+		$this->assertSame( $expected, sanitize_user( 'AT&amp;T Test;' ) );
 	}
 
 	function test_strips_percent_encoded_octets() {
 		$expected = is_multisite() ? 'franois' : 'Franois';
-		$this->assertEquals( $expected, sanitize_user( 'Fran%c3%a7ois' ) );
+		$this->assertSame( $expected, sanitize_user( 'Fran%c3%a7ois' ) );
 	}
 	function test_optional_strict_mode_reduces_to_safe_ascii_subset() {
-		$this->assertEquals( 'abc', sanitize_user( '()~ab~ÀÜcÀÜ!', true ) );
+		$this->assertSame( 'abc', sanitize_user( '()~ab~ÀÜcÀÜ!', true ) );
 	}
 }
diff --git a/tests/formatting/SeemsUtf8.php b/tests/formatting/SeemsUtf8.php
index 70742c3afa..5571ba3234 100644
--- a/tests/formatting/SeemsUtf8.php
+++ b/tests/formatting/SeemsUtf8.php
@@ -11,7 +11,7 @@ class Tests_Formatting_SeemsUtf8 extends WP_UnitTestCase {
 	 * @dataProvider utf8_strings
 	 */
 	function test_returns_true_for_utf8_strings( $utf8_string ) {
-		// from http://www.i18nguy.com/unicode-example.html
+		// From http://www.i18nguy.com/unicode-example.html
 		$this->assertTrue( seems_utf8( $utf8_string ) );
 	}
 
@@ -32,7 +32,7 @@ class Tests_Formatting_SeemsUtf8 extends WP_UnitTestCase {
 	}
 
 	function big5_strings() {
-		// Get data from formatting/big5.txt
+		// Get data from formatting/big5.txt.
 		$big5_strings = file( DIR_TESTDATA . '/formatting/big5.txt' );
 		foreach ( $big5_strings as &$string ) {
 			$string = (array) trim( $string );
diff --git a/tests/formatting/Slashit.php b/tests/formatting/Slashit.php
index 876d7fda22..9f25694405 100644
--- a/tests/formatting/Slashit.php
+++ b/tests/formatting/Slashit.php
@@ -5,50 +5,50 @@
  */
 class Tests_Formatting_Slashit extends WP_UnitTestCase {
 	function test_backslashes_middle_numbers() {
-		$this->assertEquals( "\\a-!9\\a943\\b\\c", backslashit( 'a-!9a943bc' ) );
+		$this->assertSame( "\\a-!9\\a943\\b\\c", backslashit( 'a-!9a943bc' ) );
 	}
 
 	function test_backslashes_alphas() {
-		$this->assertEquals( "\\a943\\b\\c", backslashit( 'a943bc' ) );
+		$this->assertSame( "\\a943\\b\\c", backslashit( 'a943bc' ) );
 	}
 
 	function test_double_backslashes_leading_numbers() {
-		$this->assertEquals( '\\\\95', backslashit( '95' ) );
+		$this->assertSame( '\\\\95', backslashit( '95' ) );
 	}
 
 	function test_removes_trailing_slashes() {
-		$this->assertEquals( 'a', untrailingslashit( 'a/' ) );
-		$this->assertEquals( 'a', untrailingslashit( 'a////' ) );
+		$this->assertSame( 'a', untrailingslashit( 'a/' ) );
+		$this->assertSame( 'a', untrailingslashit( 'a////' ) );
 	}
 
 	/**
 	 * @ticket 22267
 	 */
 	function test_removes_trailing_backslashes() {
-		$this->assertEquals( 'a', untrailingslashit( 'a\\' ) );
-		$this->assertEquals( 'a', untrailingslashit( 'a\\\\\\\\' ) );
+		$this->assertSame( 'a', untrailingslashit( 'a\\' ) );
+		$this->assertSame( 'a', untrailingslashit( 'a\\\\\\\\' ) );
 	}
 
 	/**
 	 * @ticket 22267
 	 */
 	function test_removes_trailing_mixed_slashes() {
-		$this->assertEquals( 'a', untrailingslashit( 'a/\\' ) );
-		$this->assertEquals( 'a', untrailingslashit( 'a\\/\\///\\\\//' ) );
+		$this->assertSame( 'a', untrailingslashit( 'a/\\' ) );
+		$this->assertSame( 'a', untrailingslashit( 'a\\/\\///\\\\//' ) );
 	}
 
 	function test_adds_trailing_slash() {
-		$this->assertEquals( 'a/', trailingslashit( 'a' ) );
+		$this->assertSame( 'a/', trailingslashit( 'a' ) );
 	}
 
 	function test_does_not_add_trailing_slash_if_one_exists() {
-		$this->assertEquals( 'a/', trailingslashit( 'a/' ) );
+		$this->assertSame( 'a/', trailingslashit( 'a/' ) );
 	}
 
 	/**
 	 * @ticket 22267
 	 */
 	function test_converts_trailing_backslash_to_slash_if_one_exists() {
-		$this->assertEquals( 'a/', trailingslashit( 'a\\' ) );
+		$this->assertSame( 'a/', trailingslashit( 'a\\' ) );
 	}
 }
diff --git a/tests/formatting/Smilies.php b/tests/formatting/Smilies.php
index 662de0b4f6..f5394d4268 100644
--- a/tests/formatting/Smilies.php
+++ b/tests/formatting/Smilies.php
@@ -49,17 +49,17 @@ class Tests_Formatting_Smilies extends WP_UnitTestCase {
 	 * when use_smilies = 1 and not when use_smilies = 0
 	 */
 	function test_convert_standard_smilies( $in_txt, $converted_txt ) {
-		// standard smilies, use_smilies: ON
+		// Standard smilies, use_smilies: ON.
 		update_option( 'use_smilies', 1 );
 
 		smilies_init();
 
-		$this->assertEquals( $converted_txt, convert_smilies( $in_txt ) );
+		$this->assertSame( $converted_txt, convert_smilies( $in_txt ) );
 
-		// standard smilies, use_smilies: OFF
+		// Standard smilies, use_smilies: OFF.
 		update_option( 'use_smilies', 0 );
 
-		$this->assertEquals( $in_txt, convert_smilies( $in_txt ) );
+		$this->assertSame( $in_txt, convert_smilies( $in_txt ) );
 	}
 
 	/**
@@ -94,14 +94,14 @@ class Tests_Formatting_Smilies extends WP_UnitTestCase {
 	function test_convert_custom_smilies( $in_txt, $converted_txt ) {
 		global $wpsmiliestrans;
 
-		// custom smilies, use_smilies: ON
+		// Custom smilies, use_smilies: ON.
 		update_option( 'use_smilies', 1 );
 
 		if ( ! isset( $wpsmiliestrans ) ) {
 			smilies_init();
 		}
 
-		$trans_orig = $wpsmiliestrans; // save original translations array
+		$trans_orig = $wpsmiliestrans; // Save original translations array.
 
 		$wpsmiliestrans = array(
 			':PP'      => 'icon_tongue.gif',
@@ -112,14 +112,14 @@ class Tests_Formatting_Smilies extends WP_UnitTestCase {
 
 		smilies_init();
 
-		$this->assertEquals( $converted_txt, convert_smilies( $in_txt ) );
+		$this->assertSame( $converted_txt, convert_smilies( $in_txt ) );
 
-		// standard smilies, use_smilies: OFF
+		// Standard smilies, use_smilies: OFF.
 		update_option( 'use_smilies', 0 );
 
-		$this->assertEquals( $in_txt, convert_smilies( $in_txt ) );
+		$this->assertSame( $in_txt, convert_smilies( $in_txt ) );
 
-		$wpsmiliestrans = $trans_orig; // reset original translations array
+		$wpsmiliestrans = $trans_orig; // Reset original translations array.
 	}
 
 
@@ -149,13 +149,13 @@ class Tests_Formatting_Smilies extends WP_UnitTestCase {
 		$in_str  = 'Do we ingore smilies ;-) in ' . $element . ' tags <' . $element . ' class="foo">My Content Here :?: </' . $element . '>';
 		$exp_str = "Do we ingore smilies \xf0\x9f\x98\x89 in $element tags <$element class=\"foo\">My Content Here :?: </$element>";
 
-		// standard smilies, use_smilies: ON
+		// Standard smilies, use_smilies: ON.
 		update_option( 'use_smilies', 1 );
 		smilies_init();
 
-		$this->assertEquals( $exp_str, convert_smilies( $in_str ) );
+		$this->assertSame( $exp_str, convert_smilies( $in_str ) );
 
-		// standard smilies, use_smilies: OFF
+		// Standard smilies, use_smilies: OFF.
 		update_option( 'use_smilies', 0 );
 	}
 
@@ -201,16 +201,16 @@ class Tests_Formatting_Smilies extends WP_UnitTestCase {
 	 * @dataProvider get_smilies_combinations
 	 */
 	public function test_smilies_combinations( $in_txt, $converted_txt ) {
-		// custom smilies, use_smilies: ON
+		// Custom smilies, use_smilies: ON.
 		update_option( 'use_smilies', 1 );
 		smilies_init();
 
-		$this->assertEquals( $converted_txt, convert_smilies( $in_txt ) );
+		$this->assertSame( $converted_txt, convert_smilies( $in_txt ) );
 
-		// custom smilies, use_smilies: OFF
+		// Custom smilies, use_smilies: OFF.
 		update_option( 'use_smilies', 0 );
 
-		$this->assertEquals( $in_txt, convert_smilies( $in_txt ) );
+		$this->assertSame( $in_txt, convert_smilies( $in_txt ) );
 	}
 
 	/**
@@ -245,14 +245,14 @@ class Tests_Formatting_Smilies extends WP_UnitTestCase {
 	public function test_single_smilies_in_wpsmiliestrans( $in_txt, $converted_txt ) {
 		global $wpsmiliestrans;
 
-		// standard smilies, use_smilies: ON
+		// Standard smilies, use_smilies: ON.
 		update_option( 'use_smilies', 1 );
 
 		if ( ! isset( $wpsmiliestrans ) ) {
 			smilies_init();
 		}
 
-		$orig_trans = $wpsmiliestrans; // save original tranlations array
+		$orig_trans = $wpsmiliestrans; // Save original tranlations array.
 
 		$wpsmiliestrans = array(
 			':)' => 'simple-smile.png',
@@ -260,14 +260,14 @@ class Tests_Formatting_Smilies extends WP_UnitTestCase {
 
 		smilies_init();
 
-		$this->assertEquals( $converted_txt, convert_smilies( $in_txt ) );
+		$this->assertSame( $converted_txt, convert_smilies( $in_txt ) );
 
-		// standard smilies, use_smilies: OFF
+		// Standard smilies, use_smilies: OFF.
 		update_option( 'use_smilies', 0 );
 
-		$this->assertEquals( $in_txt, convert_smilies( $in_txt ) );
+		$this->assertSame( $in_txt, convert_smilies( $in_txt ) );
 
-		$wpsmiliestrans = $orig_trans; // reset original translations array
+		$wpsmiliestrans = $orig_trans; // Reset original translations array.
 	}
 
 	public function get_spaces_around_smilies() {
@@ -300,14 +300,14 @@ class Tests_Formatting_Smilies extends WP_UnitTestCase {
 	 * @dataProvider get_spaces_around_smilies
 	 */
 	function test_spaces_around_smilies( $in_txt, $converted_txt ) {
-		// standard smilies, use_smilies: ON
+		// Standard smilies, use_smilies: ON.
 		update_option( 'use_smilies', 1 );
 
 		smilies_init();
 
-		$this->assertEquals( $converted_txt, convert_smilies( $in_txt ) );
+		$this->assertSame( $converted_txt, convert_smilies( $in_txt ) );
 
-		// standard smilies, use_smilies: OFF
+		// Standard smilies, use_smilies: OFF.
 		update_option( 'use_smilies', 0 );
 	}
 
@@ -323,7 +323,7 @@ class Tests_Formatting_Smilies extends WP_UnitTestCase {
 
 		$txt = ':oops: I did it again';
 
-		$this->assertEquals( $txt, convert_smilies( $txt ) );
+		$this->assertSame( $txt, convert_smilies( $txt ) );
 	}
 
 	/**
@@ -339,7 +339,7 @@ class Tests_Formatting_Smilies extends WP_UnitTestCase {
 		$txt          = 'You played with my <3';
 		$expected_txt = 'You played with my \xe2\x9d\xa4';
 
-		$this->assertEquals( $expected_txt, convert_smilies( $txt ) );
+		$this->assertSame( $expected_txt, convert_smilies( $txt ) );
 	}
 
 
diff --git a/tests/formatting/StripSlashesDeep.php b/tests/formatting/StripSlashesDeep.php
index 3e98d14b66..a401a99f79 100644
--- a/tests/formatting/StripSlashesDeep.php
+++ b/tests/formatting/StripSlashesDeep.php
@@ -2,6 +2,7 @@
 
 /**
  * @group formatting
+ * @group slashes
  */
 class Tests_Formatting_StripSlashesDeep extends WP_UnitTestCase {
 	/**
@@ -9,34 +10,34 @@ class Tests_Formatting_StripSlashesDeep extends WP_UnitTestCase {
 	 */
 	function test_preserves_original_datatype() {
 
-		$this->assertEquals( true, stripslashes_deep( true ) );
-		$this->assertEquals( false, stripslashes_deep( false ) );
-		$this->assertEquals( 4, stripslashes_deep( 4 ) );
-		$this->assertEquals( 'foo', stripslashes_deep( 'foo' ) );
+		$this->assertTrue( stripslashes_deep( true ) );
+		$this->assertFalse( stripslashes_deep( false ) );
+		$this->assertSame( 4, stripslashes_deep( 4 ) );
+		$this->assertSame( 'foo', stripslashes_deep( 'foo' ) );
 		$arr      = array(
 			'a' => true,
 			'b' => false,
 			'c' => 4,
 			'd' => 'foo',
 		);
-		$arr['e'] = $arr; // Add a sub-array
-		$this->assertEquals( $arr, stripslashes_deep( $arr ) ); // Keyed array
-		$this->assertEquals( array_values( $arr ), stripslashes_deep( array_values( $arr ) ) ); // Non-keyed
+		$arr['e'] = $arr; // Add a sub-array.
+		$this->assertSame( $arr, stripslashes_deep( $arr ) ); // Keyed array.
+		$this->assertSame( array_values( $arr ), stripslashes_deep( array_values( $arr ) ) ); // Non-keyed.
 
 		$obj = new stdClass;
 		foreach ( $arr as $k => $v ) {
 			$obj->$k = $v;
 		}
-		$this->assertEquals( $obj, stripslashes_deep( $obj ) );
+		$this->assertSame( $obj, stripslashes_deep( $obj ) );
 	}
 
 	function test_strips_slashes() {
 		$old = "I can\'t see, isn\'t that it?";
 		$new = "I can't see, isn't that it?";
-		$this->assertEquals( $new, stripslashes_deep( $old ) );
-		$this->assertEquals( $new, stripslashes_deep( "I can\\'t see, isn\\'t that it?" ) );
-		$this->assertEquals( array( 'a' => $new ), stripslashes_deep( array( 'a' => $old ) ) ); // Keyed array
-		$this->assertEquals( array( $new ), stripslashes_deep( array( $old ) ) ); // Non-keyed
+		$this->assertSame( $new, stripslashes_deep( $old ) );
+		$this->assertSame( $new, stripslashes_deep( "I can\\'t see, isn\\'t that it?" ) );
+		$this->assertSame( array( 'a' => $new ), stripslashes_deep( array( 'a' => $old ) ) ); // Keyed array.
+		$this->assertSame( array( $new ), stripslashes_deep( array( $old ) ) ); // Non-keyed.
 
 		$obj_old    = new stdClass;
 		$obj_old->a = $old;
@@ -47,7 +48,7 @@ class Tests_Formatting_StripSlashesDeep extends WP_UnitTestCase {
 
 	function test_permits_escaped_slash() {
 		$txt = "I can't see, isn\'t that it?";
-		$this->assertEquals( $txt, stripslashes_deep( "I can\'t see, isn\\\'t that it?" ) );
-		$this->assertEquals( $txt, stripslashes_deep( "I can\'t see, isn\\\\\'t that it?" ) );
+		$this->assertSame( $txt, stripslashes_deep( "I can\'t see, isn\\\'t that it?" ) );
+		$this->assertSame( $txt, stripslashes_deep( "I can\'t see, isn\\\\\'t that it?" ) );
 	}
 }
diff --git a/tests/formatting/URLShorten.php b/tests/formatting/URLShorten.php
index dc33dcef54..a1f1942809 100644
--- a/tests/formatting/URLShorten.php
+++ b/tests/formatting/URLShorten.php
@@ -6,17 +6,18 @@
 class Tests_Formatting_URLShorten extends WP_UnitTestCase {
 	function test_shorten_url() {
 		$tests = array(
-			'wordpress\.org/about/philosophy'            => 'wordpress\.org/about/philosophy', // no longer strips slashes
+			'wordpress\.org/about/philosophy'            => 'wordpress\.org/about/philosophy', // No longer strips slashes.
 			'wordpress.org/about/philosophy'             => 'wordpress.org/about/philosophy',
-			'http://wordpress.org/about/philosophy/'     => 'wordpress.org/about/philosophy', // remove http, trailing slash
-			'http://www.wordpress.org/about/philosophy/' => 'wordpress.org/about/philosophy', // remove http, www
-			'http://wordpress.org/about/philosophy/#box' => 'wordpress.org/about/philosophy/#box', // don't shorten 35 characters
-			'http://wordpress.org/about/philosophy/#decisions' => 'wordpress.org/about/philosophy/#&hellip;', // shorten to 32 if > 35 after cleaning
+			'http://wordpress.org/about/philosophy/'     => 'wordpress.org/about/philosophy',  // Remove http, trailing slash.
+			'http://www.wordpress.org/about/philosophy/' => 'wordpress.org/about/philosophy',  // Remove http, www.
+			'http://wordpress.org/about/philosophy/#box' => 'wordpress.org/about/philosophy/#box',            // Don't shorten 35 characters.
+			'http://wordpress.org/about/philosophy/#decisions' => 'wordpress.org/about/philosophy/#&hellip;', // Shorten to 32 if > 35 after cleaning.
 		);
 		foreach ( $tests as $k => $v ) {
-			$this->assertEquals( $v, url_shorten( $k ) );
+			$this->assertSame( $v, url_shorten( $k ) );
 		}
 
-		$this->assertEquals( 'wordpress.org/about/philosophy/#&hellip;', url_shorten( 'http://wordpress.org/about/philosophy/#decisions' ), 31 ); // shorten to 31 if > 34 after cleaning
+		// Shorten to 31 if > 34 after cleaning.
+		$this->assertSame( 'wordpress.org/about/philosophy/#&hellip;', url_shorten( 'http://wordpress.org/about/philosophy/#decisions' ), 31 );
 	}
 }
diff --git a/tests/formatting/UrlencodeDeep.php b/tests/formatting/UrlencodeDeep.php
index 1c36403a19..27c0c750bb 100644
--- a/tests/formatting/UrlencodeDeep.php
+++ b/tests/formatting/UrlencodeDeep.php
@@ -28,7 +28,7 @@ class Tests_Formatting_UrlencodeDeep extends WP_UnitTestCase {
 	 * @param string $expected
 	 */
 	public function test_urlencode_deep_should_encode_individual_value( $actual, $expected ) {
-		$this->assertEquals( $expected, urlencode_deep( $actual ) );
+		$this->assertSame( $expected, urlencode_deep( $actual ) );
 	}
 
 	/**
@@ -40,7 +40,7 @@ class Tests_Formatting_UrlencodeDeep extends WP_UnitTestCase {
 		$actual   = wp_list_pluck( $data, 0 );
 		$expected = wp_list_pluck( $data, 1 );
 
-		$this->assertEquals( $expected, urlencode_deep( $actual ) );
+		$this->assertSame( $expected, urlencode_deep( $actual ) );
 	}
 
 }
diff --git a/tests/formatting/Utf8UriEncode.php b/tests/formatting/Utf8UriEncode.php
index 4520342c4a..a3538e0397 100644
--- a/tests/formatting/Utf8UriEncode.php
+++ b/tests/formatting/Utf8UriEncode.php
@@ -6,13 +6,13 @@
 class Tests_Formatting_Utf8UriEncode extends WP_UnitTestCase {
 
 	/**
-	 * Non-ASCII UTF-8 characters should be percent encoded. Spaces etc.
+	 * Non-ASCII UTF-8 characters should be percent-encoded. Spaces etc.
 	 * are dealt with elsewhere.
 	 *
 	 * @dataProvider data
 	 */
 	function test_percent_encodes_non_reserved_characters( $utf8, $urlencoded ) {
-		$this->assertEquals( $urlencoded, utf8_uri_encode( $utf8 ) );
+		$this->assertSame( $urlencoded, utf8_uri_encode( $utf8 ) );
 	}
 
 	/**
diff --git a/tests/formatting/WPBasename.php b/tests/formatting/WPBasename.php
index 780d2c7473..a664e399c0 100644
--- a/tests/formatting/WPBasename.php
+++ b/tests/formatting/WPBasename.php
@@ -6,14 +6,14 @@
 class Tests_Formatting_WP_Basename extends WP_UnitTestCase {
 
 	function test_wp_basename_unix() {
-		$this->assertEquals(
+		$this->assertSame(
 			'file',
 			wp_basename( '/home/test/file' )
 		);
 	}
 
 	function test_wp_basename_unix_utf8_support() {
-		$this->assertEquals(
+		$this->assertSame(
 			'≈ælu≈•ouƒçk√Ω k≈Ø≈à.txt',
 			wp_basename( '/test/≈ælu≈•ouƒçk√Ω k≈Ø≈à.txt' )
 		);
@@ -23,7 +23,7 @@ class Tests_Formatting_WP_Basename extends WP_UnitTestCase {
 	 * @ticket 22138
 	 */
 	function test_wp_basename_windows() {
-		$this->assertEquals(
+		$this->assertSame(
 			'file.txt',
 			wp_basename( 'C:\Documents and Settings\User\file.txt' )
 		);
@@ -33,7 +33,7 @@ class Tests_Formatting_WP_Basename extends WP_UnitTestCase {
 	 * @ticket 22138
 	 */
 	function test_wp_basename_windows_utf8_support() {
-		$this->assertEquals(
+		$this->assertSame(
 			'—â–∏–ø—Ü—ã.txt',
 			wp_basename( 'C:\test\—â–∏–ø—Ü—ã.txt' )
 		);
diff --git a/tests/formatting/WPMakeLinkRelative.php b/tests/formatting/WPMakeLinkRelative.php
index 8aee571b91..da6099302b 100644
--- a/tests/formatting/WPMakeLinkRelative.php
+++ b/tests/formatting/WPMakeLinkRelative.php
@@ -8,13 +8,13 @@ class Tests_Formatting_WPMakeLinkRelative extends WP_UnitTestCase {
 	public function test_wp_make_link_relative_with_http_scheme() {
 		$link          = 'http://example.com/this-is-a-test-http-url/';
 		$relative_link = wp_make_link_relative( $link );
-		$this->assertEquals( '/this-is-a-test-http-url/', $relative_link );
+		$this->assertSame( '/this-is-a-test-http-url/', $relative_link );
 	}
 
 	public function test_wp_make_link_relative_with_https_scheme() {
 		$link          = 'https://example.com/this-is-a-test-https-url/';
 		$relative_link = wp_make_link_relative( $link );
-		$this->assertEquals( '/this-is-a-test-https-url/', $relative_link );
+		$this->assertSame( '/this-is-a-test-https-url/', $relative_link );
 	}
 
 	/**
@@ -23,7 +23,7 @@ class Tests_Formatting_WPMakeLinkRelative extends WP_UnitTestCase {
 	public function test_wp_make_link_relative_with_no_scheme() {
 		$link          = '//example.com/this-is-a-test-schemeless-url/';
 		$relative_link = wp_make_link_relative( $link );
-		$this->assertEquals( '/this-is-a-test-schemeless-url/', $relative_link );
+		$this->assertSame( '/this-is-a-test-schemeless-url/', $relative_link );
 	}
 
 	/**
@@ -32,7 +32,7 @@ class Tests_Formatting_WPMakeLinkRelative extends WP_UnitTestCase {
 	public function test_wp_make_link_relative_should_retain_URL_param_that_is_also_a_URL() {
 		$link          = 'https://example.com/this-is-a-test/?redirect=https://example.org/a-different-test-post/';
 		$relative_link = wp_make_link_relative( $link );
-		$this->assertEquals( '/this-is-a-test/?redirect=https://example.org/a-different-test-post/', $relative_link );
+		$this->assertSame( '/this-is-a-test/?redirect=https://example.org/a-different-test-post/', $relative_link );
 	}
 
 	/**
@@ -41,7 +41,7 @@ class Tests_Formatting_WPMakeLinkRelative extends WP_UnitTestCase {
 	function test_wp_make_link_relative_with_no_path() {
 		$link          = 'http://example.com';
 		$relative_link = wp_make_link_relative( $link );
-		$this->assertEquals( '', $relative_link );
+		$this->assertSame( '', $relative_link );
 	}
 
 }
diff --git a/tests/formatting/WPRelNoFollow.php b/tests/formatting/WPRelNoFollow.php
index 187bb5997b..10385cade7 100644
--- a/tests/formatting/WPRelNoFollow.php
+++ b/tests/formatting/WPRelNoFollow.php
@@ -11,7 +11,7 @@ class Tests_Rel_No_Follow extends WP_UnitTestCase {
 	public function test_add_no_follow() {
 		$content  = '<p>This is some cool <a href="/">Code</a></p>';
 		$expected = '<p>This is some cool <a href=\"/\" rel=\"nofollow\">Code</a></p>';
-		$this->assertEquals( $expected, wp_rel_nofollow( $content ) );
+		$this->assertSame( $expected, wp_rel_nofollow( $content ) );
 	}
 
 	/**
@@ -20,7 +20,7 @@ class Tests_Rel_No_Follow extends WP_UnitTestCase {
 	public function test_convert_no_follow() {
 		$content  = '<p>This is some cool <a href="/" rel="weird">Code</a></p>';
 		$expected = '<p>This is some cool <a href=\"/\" rel=\"weird nofollow\">Code</a></p>';
-		$this->assertEquals( $expected, wp_rel_nofollow( $content ) );
+		$this->assertSame( $expected, wp_rel_nofollow( $content ) );
 	}
 
 	/**
@@ -28,7 +28,7 @@ class Tests_Rel_No_Follow extends WP_UnitTestCase {
 	 * @dataProvider data_wp_rel_nofollow
 	 */
 	public function test_wp_rel_nofollow( $input, $output ) {
-		return $this->assertEquals( wp_slash( $output ), wp_rel_nofollow( $input ) );
+		return $this->assertSame( wp_slash( $output ), wp_rel_nofollow( $input ) );
 	}
 
 	public function data_wp_rel_nofollow() {
@@ -78,6 +78,6 @@ class Tests_Rel_No_Follow extends WP_UnitTestCase {
 	public function test_append_no_follow_with_valueless_attribute() {
 		$content  = '<p>This is some cool <a href="demo.com" download rel="hola">Code</a></p>';
 		$expected = '<p>This is some cool <a href=\"demo.com\" download rel=\"hola nofollow\">Code</a></p>';
-		$this->assertEquals( $expected, wp_rel_nofollow( $content ) );
+		$this->assertSame( $expected, wp_rel_nofollow( $content ) );
 	}
 }
diff --git a/tests/formatting/WPRelUgc.php b/tests/formatting/WPRelUgc.php
index 515eebb736..85470155a1 100644
--- a/tests/formatting/WPRelUgc.php
+++ b/tests/formatting/WPRelUgc.php
@@ -11,7 +11,7 @@ class Tests_Rel_Ugc extends WP_UnitTestCase {
 	public function test_add_ugc() {
 		$content  = '<p>This is some cool <a href="/">Code</a></p>';
 		$expected = '<p>This is some cool <a href=\"/\" rel=\"nofollow ugc\">Code</a></p>';
-		$this->assertEquals( $expected, wp_rel_ugc( $content ) );
+		$this->assertSame( $expected, wp_rel_ugc( $content ) );
 	}
 
 	/**
@@ -20,7 +20,7 @@ class Tests_Rel_Ugc extends WP_UnitTestCase {
 	public function test_convert_ugc() {
 		$content  = '<p>This is some cool <a href="/" rel="weird">Code</a></p>';
 		$expected = '<p>This is some cool <a href=\"/\" rel=\"weird nofollow ugc\">Code</a></p>';
-		$this->assertEquals( $expected, wp_rel_ugc( $content ) );
+		$this->assertSame( $expected, wp_rel_ugc( $content ) );
 	}
 
 	/**
@@ -28,7 +28,7 @@ class Tests_Rel_Ugc extends WP_UnitTestCase {
 	 * @dataProvider data_wp_rel_ugc
 	 */
 	public function test_wp_rel_ugc( $input, $output ) {
-		return $this->assertEquals( wp_slash( $output ), wp_rel_ugc( $input ) );
+		return $this->assertSame( wp_slash( $output ), wp_rel_ugc( $input ) );
 	}
 
 	public function data_wp_rel_ugc() {
@@ -78,6 +78,6 @@ class Tests_Rel_Ugc extends WP_UnitTestCase {
 	public function test_append_ugc_with_valueless_attribute() {
 		$content  = '<p>This is some cool <a href="demo.com" download rel="hola">Code</a></p>';
 		$expected = '<p>This is some cool <a href=\"demo.com\" download rel=\"hola nofollow ugc\">Code</a></p>';
-		$this->assertEquals( $expected, wp_rel_ugc( $content ) );
+		$this->assertSame( $expected, wp_rel_ugc( $content ) );
 	}
 }
diff --git a/tests/formatting/WPSlash.php b/tests/formatting/WPSlash.php
new file mode 100644
index 0000000000..4b0d206c06
--- /dev/null
+++ b/tests/formatting/WPSlash.php
@@ -0,0 +1,103 @@
+<?php
+
+/**
+ * @group formatting
+ */
+class Tests_Formatting_WPSlash extends WP_UnitTestCase {
+
+	/**
+	 * @ticket 42195
+	 *
+	 * @dataProvider data_wp_slash
+	 *
+	 * @param string $value
+	 * @param string $expected
+	 */
+	public function test_wp_slash( $value, $expected ) {
+		$this->assertSame( $expected, wp_slash( $value ) );
+	}
+
+	/**
+	 * Data provider for test_wp_slash().
+	 *
+	 * @return array {
+	 *     @type array {
+	 *         @type mixed  $value    The value passed to wp_slash().
+	 *         @type string $expected The expected output of wp_slash().
+	 *     }
+	 * }
+	 */
+	public function data_wp_slash() {
+		return array(
+			array( 123, 123 ),
+			array( 123.4, 123.4 ),
+			array( true, true ),
+			array( false, false ),
+			array(
+				array(
+					'hello',
+					null,
+					'"string"',
+					125.41,
+				),
+				array(
+					'hello',
+					null,
+					'\"string\"',
+					125.41,
+				),
+			),
+			array( "first level 'string'", "first level \'string\'" ),
+		);
+	}
+
+	/**
+	 * @ticket 24106
+	 */
+	function test_adds_slashes() {
+		$old = "I can't see, isn't that it?";
+		$new = "I can\'t see, isn\'t that it?";
+		$this->assertSame( $new, wp_slash( $old ) );
+		$this->assertSame( "I can\\\\\'t see, isn\\\\\'t that it?", wp_slash( $new ) );
+		$this->assertSame( array( 'a' => $new ), wp_slash( array( 'a' => $old ) ) ); // Keyed array.
+		$this->assertSame( array( $new ), wp_slash( array( $old ) ) ); // Non-keyed.
+	}
+
+	/**
+	 * @ticket 24106
+	 */
+	function test_preserves_original_datatype() {
+
+		$this->assertTrue( wp_slash( true ) );
+		$this->assertFalse( wp_slash( false ) );
+		$this->assertSame( 4, wp_slash( 4 ) );
+		$this->assertSame( 'foo', wp_slash( 'foo' ) );
+		$arr      = array(
+			'a' => true,
+			'b' => false,
+			'c' => 4,
+			'd' => 'foo',
+		);
+		$arr['e'] = $arr; // Add a sub-array.
+		$this->assertSame( $arr, wp_slash( $arr ) ); // Keyed array.
+		$this->assertSame( array_values( $arr ), wp_slash( array_values( $arr ) ) ); // Non-keyed.
+
+		$obj = new stdClass;
+		foreach ( $arr as $k => $v ) {
+			$obj->$k = $v;
+		}
+		$this->assertSame( $obj, wp_slash( $obj ) );
+	}
+
+	/**
+	 * @ticket 24106
+	 */
+	function test_add_even_more_slashes() {
+		$old = 'single\\slash double\\\\slash triple\\\\\\slash';
+		$new = 'single\\\\slash double\\\\\\\\slash triple\\\\\\\\\\\\slash';
+		$this->assertSame( $new, wp_slash( $old ) );
+		$this->assertSame( array( 'a' => $new ), wp_slash( array( 'a' => $old ) ) ); // Keyed array.
+		$this->assertSame( array( $new ), wp_slash( array( $old ) ) ); // Non-keyed.
+	}
+
+}
diff --git a/tests/formatting/WPSpecialchars.php b/tests/formatting/WPSpecialchars.php
index 97ce8e084c..7cc131da04 100644
--- a/tests/formatting/WPSpecialchars.php
+++ b/tests/formatting/WPSpecialchars.php
@@ -6,23 +6,23 @@
 class Tests_Formatting_WPSpecialchars extends WP_UnitTestCase {
 	function test_wp_specialchars_basics() {
 		$html = '&amp;&lt;hello world&gt;';
-		$this->assertEquals( $html, _wp_specialchars( $html ) );
+		$this->assertSame( $html, _wp_specialchars( $html ) );
 
 		$double = '&amp;amp;&amp;lt;hello world&amp;gt;';
-		$this->assertEquals( $double, _wp_specialchars( $html, ENT_NOQUOTES, false, true ) );
+		$this->assertSame( $double, _wp_specialchars( $html, ENT_NOQUOTES, false, true ) );
 	}
 
 	function test_allowed_entity_names() {
 		global $allowedentitynames;
 
-		// Allowed entities should be unchanged
+		// Allowed entities should be unchanged.
 		foreach ( $allowedentitynames as $ent ) {
 			if ( 'apos' === $ent ) {
 				// But for some reason, PHP doesn't allow &apos;
 				continue;
 			}
 			$ent = '&' . $ent . ';';
-			$this->assertEquals( $ent, _wp_specialchars( $ent ) );
+			$this->assertSame( $ent, _wp_specialchars( $ent ) );
 		}
 	}
 
@@ -32,16 +32,16 @@ class Tests_Formatting_WPSpecialchars extends WP_UnitTestCase {
 		foreach ( $ents as $ent ) {
 			$escaped = '&amp;' . $ent . ';';
 			$ent     = '&' . $ent . ';';
-			$this->assertEquals( $escaped, _wp_specialchars( $ent ) );
+			$this->assertSame( $escaped, _wp_specialchars( $ent ) );
 		}
 	}
 
 	function test_optionally_escapes_quotes() {
 		$source = "\"'hello!'\"";
-		$this->assertEquals( '"&#039;hello!&#039;"', _wp_specialchars( $source, 'single' ) );
-		$this->assertEquals( "&quot;'hello!'&quot;", _wp_specialchars( $source, 'double' ) );
-		$this->assertEquals( '&quot;&#039;hello!&#039;&quot;', _wp_specialchars( $source, true ) );
-		$this->assertEquals( $source, _wp_specialchars( $source ) );
+		$this->assertSame( '"&#039;hello!&#039;"', _wp_specialchars( $source, 'single' ) );
+		$this->assertSame( "&quot;'hello!'&quot;", _wp_specialchars( $source, 'double' ) );
+		$this->assertSame( '&quot;&#039;hello!&#039;&quot;', _wp_specialchars( $source, true ) );
+		$this->assertSame( $source, _wp_specialchars( $source ) );
 	}
 
 	/**
@@ -51,7 +51,7 @@ class Tests_Formatting_WPSpecialchars extends WP_UnitTestCase {
 	 * @dataProvider data_double_encoding
 	 */
 	function test_double_encoding( $input, $output ) {
-		return $this->assertEquals( $output, _wp_specialchars( $input, ENT_NOQUOTES, false, true ) );
+		return $this->assertSame( $output, _wp_specialchars( $input, ENT_NOQUOTES, false, true ) );
 	}
 
 	function data_double_encoding() {
@@ -78,7 +78,7 @@ class Tests_Formatting_WPSpecialchars extends WP_UnitTestCase {
 	 * @dataProvider data_no_double_encoding
 	 */
 	function test_no_double_encoding( $input, $output ) {
-		return $this->assertEquals( $output, _wp_specialchars( $input, ENT_NOQUOTES, false, false ) );
+		return $this->assertSame( $output, _wp_specialchars( $input, ENT_NOQUOTES, false, false ) );
 	}
 
 	function data_no_double_encoding() {
diff --git a/tests/formatting/WPStripAllTags.php b/tests/formatting/WPStripAllTags.php
index 21ff620fc6..8656af2695 100644
--- a/tests/formatting/WPStripAllTags.php
+++ b/tests/formatting/WPStripAllTags.php
@@ -9,25 +9,25 @@ class Tests_Formatting_WPStripAllTags extends WP_UnitTestCase {
 	function test_wp_strip_all_tags() {
 
 		$text = 'lorem<br />ipsum';
-		$this->assertEquals( 'loremipsum', wp_strip_all_tags( $text ) );
+		$this->assertSame( 'loremipsum', wp_strip_all_tags( $text ) );
 
 		$text = "lorem<br />\nipsum";
-		$this->assertEquals( "lorem\nipsum", wp_strip_all_tags( $text ) );
+		$this->assertSame( "lorem\nipsum", wp_strip_all_tags( $text ) );
 
-		// test removing breaks is working
+		// Test removing breaks is working.
 		$text = 'lorem<br />ipsum';
-		$this->assertEquals( 'loremipsum', wp_strip_all_tags( $text, true ) );
+		$this->assertSame( 'loremipsum', wp_strip_all_tags( $text, true ) );
 
-		// test script / style tag's contents is removed
+		// Test script / style tag's contents is removed.
 		$text = 'lorem<script>alert(document.cookie)</script>ipsum';
-		$this->assertEquals( 'loremipsum', wp_strip_all_tags( $text ) );
+		$this->assertSame( 'loremipsum', wp_strip_all_tags( $text ) );
 
 		$text = "lorem<style>* { display: 'none' }</style>ipsum";
-		$this->assertEquals( 'loremipsum', wp_strip_all_tags( $text ) );
+		$this->assertSame( 'loremipsum', wp_strip_all_tags( $text ) );
 
-		// test "marlformed" markup of contents
+		// Test "marlformed" markup of contents.
 		$text = "lorem<style>* { display: 'none' }<script>alert( document.cookie )</script></style>ipsum";
-		$this->assertEquals( 'loremipsum', wp_strip_all_tags( $text ) );
+		$this->assertSame( 'loremipsum', wp_strip_all_tags( $text ) );
 	}
 }
 
diff --git a/tests/formatting/WPTargetedLinkRel.php b/tests/formatting/WPTargetedLinkRel.php
index 8be254ac44..bc58dfe9cc 100644
--- a/tests/formatting/WPTargetedLinkRel.php
+++ b/tests/formatting/WPTargetedLinkRel.php
@@ -9,85 +9,79 @@ class Tests_Targeted_Link_Rel extends WP_UnitTestCase {
 	public function test_add_to_links_with_target_blank() {
 		$content  = '<p>Links: <a href="/" target="_blank">No rel</a></p>';
 		$expected = '<p>Links: <a href="/" target="_blank" rel="noopener noreferrer">No rel</a></p>';
-		$this->assertEquals( $expected, wp_targeted_link_rel( $content ) );
+		$this->assertSame( $expected, wp_targeted_link_rel( $content ) );
 	}
 
 	public function test_add_to_links_with_target_foo() {
 		$content  = '<p>Links: <a href="/" target="foo">No rel</a></p>';
 		$expected = '<p>Links: <a href="/" target="foo" rel="noopener noreferrer">No rel</a></p>';
-		$this->assertEquals( $expected, wp_targeted_link_rel( $content ) );
+		$this->assertSame( $expected, wp_targeted_link_rel( $content ) );
 	}
 
 	public function test_target_as_first_attribute() {
 		$content  = '<p>Links: <a target="_blank" href="#">No rel</a></p>';
 		$expected = '<p>Links: <a target="_blank" href="#" rel="noopener noreferrer">No rel</a></p>';
-		$this->assertEquals( $expected, wp_targeted_link_rel( $content ) );
+		$this->assertSame( $expected, wp_targeted_link_rel( $content ) );
 	}
 
 	public function test_add_to_existing_rel() {
 		$content  = '<p>Links: <a href="/" rel="existing values" target="_blank">Existing rel</a></p>';
 		$expected = '<p>Links: <a href="/" rel="existing values noopener noreferrer" target="_blank">Existing rel</a></p>';
-		$this->assertEquals( $expected, wp_targeted_link_rel( $content ) );
+		$this->assertSame( $expected, wp_targeted_link_rel( $content ) );
 	}
 
 	public function test_no_duplicate_values_added() {
 		$content  = '<p>Links: <a href="/" rel="existing noopener values" target="_blank">Existing rel</a></p>';
 		$expected = '<p>Links: <a href="/" rel="existing noopener values noreferrer" target="_blank">Existing rel</a></p>';
-		$this->assertEquals( $expected, wp_targeted_link_rel( $content ) );
+		$this->assertSame( $expected, wp_targeted_link_rel( $content ) );
 	}
 
 	public function test_rel_with_single_quote_delimiter() {
 		$content  = '<p>Links: <a href="/" rel=\'existing values\' target="_blank">Existing rel</a></p>';
-		$expected = '<p>Links: <a href="/" rel=\'existing values noopener noreferrer\' target="_blank">Existing rel</a></p>';
-		$this->assertEquals( $expected, wp_targeted_link_rel( $content ) );
+		$expected = '<p>Links: <a href="/" rel="existing values noopener noreferrer" target="_blank">Existing rel</a></p>';
+		$this->assertSame( $expected, wp_targeted_link_rel( $content ) );
 	}
 
 	public function test_rel_with_no_delimiter() {
 		$content  = '<p>Links: <a href="/" rel=existing target="_blank">Existing rel</a></p>';
 		$expected = '<p>Links: <a href="/" rel="existing noopener noreferrer" target="_blank">Existing rel</a></p>';
-		$this->assertEquals( $expected, wp_targeted_link_rel( $content ) );
+		$this->assertSame( $expected, wp_targeted_link_rel( $content ) );
 	}
 
 	public function test_rel_value_spaced_and_no_delimiter() {
 		$content  = '<p>Links: <a href="/" rel = existing target="_blank">Existing rel</a></p>';
 		$expected = '<p>Links: <a href="/" rel="existing noopener noreferrer" target="_blank">Existing rel</a></p>';
-		$this->assertEquals( $expected, wp_targeted_link_rel( $content ) );
-	}
-
-	public function test_rel_value_spaced_and_no_delimiter_and_values_to_escape() {
-		$content  = '<p>Links: <a href="/" rel = existing"value target="_blank">Existing rel</a></p>';
-		$expected = '<p>Links: <a href="/" rel="existing&quot;value noopener noreferrer" target="_blank">Existing rel</a></p>';
-		$this->assertEquals( $expected, wp_targeted_link_rel( $content ) );
+		$this->assertSame( $expected, wp_targeted_link_rel( $content ) );
 	}
 
 	public function test_escaped_quotes() {
 		$content  = '<p>Links: <a href=\"/\" rel=\"existing values\" target=\"_blank\">Existing rel</a></p>';
 		$expected = '<p>Links: <a href=\"/\" rel=\"existing values noopener noreferrer\" target=\"_blank\">Existing rel</a></p>';
-		$this->assertEquals( $expected, wp_targeted_link_rel( $content ) );
+		$this->assertSame( $expected, wp_targeted_link_rel( $content ) );
 	}
 
 	public function test_ignore_links_with_no_target() {
 		$content  = '<p>Links: <a href="/" target="_blank">Change me</a> <a href="/">Do not change me</a></p>';
 		$expected = '<p>Links: <a href="/" target="_blank" rel="noopener noreferrer">Change me</a> <a href="/">Do not change me</a></p>';
-		$this->assertEquals( $expected, wp_targeted_link_rel( $content ) );
+		$this->assertSame( $expected, wp_targeted_link_rel( $content ) );
 	}
 
 	/**
 	 * Ensure empty rel attributes are not added.
 	 *
-	 * @ticket 45352.
+	 * @ticket 45352
 	 */
 	public function test_ignore_if_wp_targeted_link_rel_nulled() {
 		add_filter( 'wp_targeted_link_rel', '__return_empty_string' );
 		$content  = '<p>Links: <a href="/" target="_blank">Do not change me</a></p>';
 		$expected = '<p>Links: <a href="/" target="_blank">Do not change me</a></p>';
-		$this->assertEquals( $expected, wp_targeted_link_rel( $content ) );
+		$this->assertSame( $expected, wp_targeted_link_rel( $content ) );
 	}
 
 	/**
 	 * Ensure default content filters are added.
 	 *
-	 * @ticket 45292.
+	 * @ticket 45292
 	 */
 	public function test_wp_targeted_link_rel_filters_run() {
 		$content  = '<p>Links: <a href="/" target="_blank">No rel</a></p>';
@@ -99,7 +93,7 @@ class Tests_Targeted_Link_Rel extends WP_UnitTestCase {
 			)
 		);
 
-		$this->assertEquals( $expected, $post->post_content );
+		$this->assertSame( $expected, $post->post_content );
 	}
 
 	/**
@@ -110,22 +104,18 @@ class Tests_Targeted_Link_Rel extends WP_UnitTestCase {
 	public function test_wp_targeted_link_rel_should_preserve_json() {
 		$content  = '<p>Links: <a href=\"\/\" target=\"_blank\">No rel<\/a><\/p>';
 		$expected = '<p>Links: <a href=\"\/\" target=\"_blank\" rel=\"noopener noreferrer\">No rel<\/a><\/p>';
-		$this->assertEquals( $expected, wp_targeted_link_rel( $content ) );
+		$this->assertSame( $expected, wp_targeted_link_rel( $content ) );
 	}
 
 	/**
-	 * Ensure correct quotes are used when relation attribute (rel) is missing.
+	 * Ensure the content of style and script tags are not processed
 	 *
 	 * @ticket 47244
 	 */
-	public function test_wp_targeted_link_rel_should_use_correct_quotes() {
-		$content  = '<p>Links: <a href=\'\/\' target=\'_blank\'>No rel<\/a><\/p>';
-		$expected = '<p>Links: <a href=\'\/\' target=\'_blank\' rel=\'noopener noreferrer\'>No rel<\/a><\/p>';
-		$this->assertEquals( $expected, wp_targeted_link_rel( $content ) );
-
-		$content  = '<p>Links: <a href=\'\/\' target=_blank>No rel<\/a><\/p>';
-		$expected = '<p>Links: <a href=\'\/\' target=_blank rel=\'noopener noreferrer\'>No rel<\/a><\/p>';
-		$this->assertEquals( $expected, wp_targeted_link_rel( $content ) );
+	public function test_wp_targeted_link_rel_skips_style_and_scripts() {
+		$content  = '<style><a href="/" target=a></style><p>Links: <script>console.log("<a href=\'/\' target=a>hi</a>");</script><script>alert(1);</script>here <a href="/" target=_blank>aq</a></p><script>console.log("<a href=\'last\' target=\'_blank\'")</script>';
+		$expected = '<style><a href="/" target=a></style><p>Links: <script>console.log("<a href=\'/\' target=a>hi</a>");</script><script>alert(1);</script>here <a href="/" target="_blank" rel="noopener noreferrer">aq</a></p><script>console.log("<a href=\'last\' target=\'_blank\'")</script>';
+		$this->assertSame( $expected, wp_targeted_link_rel( $content ) );
 	}
 
 	/**
@@ -136,7 +126,13 @@ class Tests_Targeted_Link_Rel extends WP_UnitTestCase {
 	public function test_ignore_entirely_serialized_content() {
 		$content  = 'a:1:{s:4:"html";s:52:"<p>Links: <a href="/" target="_blank">No Rel</a></p>";}';
 		$expected = 'a:1:{s:4:"html";s:52:"<p>Links: <a href="/" target="_blank">No Rel</a></p>";}';
-		$this->assertEquals( $expected, wp_targeted_link_rel( $content ) );
+		$this->assertSame( $expected, wp_targeted_link_rel( $content ) );
+	}
+
+	public function test_wp_targeted_link_rel_tab_separated_values_are_split() {
+		$content  = "<p>Links: <a href=\"/\" target=\"_blank\" rel=\"ugc\t\tnoopener\t\">No rel</a></p>";
+		$expected = '<p>Links: <a href="/" target="_blank" rel="ugc noopener noreferrer">No rel</a></p>';
+		$this->assertSame( $expected, wp_targeted_link_rel( $content ) );
 	}
 
 }
diff --git a/tests/formatting/WPTexturize.php b/tests/formatting/WPTexturize.php
index 24b0b26883..fda1fa9730 100644
--- a/tests/formatting/WPTexturize.php
+++ b/tests/formatting/WPTexturize.php
@@ -5,63 +5,69 @@
  */
 class Tests_Formatting_WPTexturize extends WP_UnitTestCase {
 	function test_dashes() {
-		$this->assertEquals( 'Hey &#8212; boo?', wptexturize( 'Hey -- boo?' ) );
-		$this->assertEquals( '<a href="http://xx--xx">Hey &#8212; boo?</a>', wptexturize( '<a href="http://xx--xx">Hey -- boo?</a>' ) );
+		$this->assertSame( 'Hey &#8212; boo?', wptexturize( 'Hey -- boo?' ) );
+		$this->assertSame( '<a href="http://xx--xx">Hey &#8212; boo?</a>', wptexturize( '<a href="http://xx--xx">Hey -- boo?</a>' ) );
 	}
 
 	function test_disable() {
-		$this->assertEquals( '<pre>---&</pre>', wptexturize( '<pre>---&</pre>' ) );
-		$this->assertEquals( '<pre><code></code>--&</pre>', wptexturize( '<pre><code></code>--&</pre>' ) );
+		$this->assertSame( '<pre>---&</pre>', wptexturize( '<pre>---&</pre>' ) );
+		$this->assertSame( '<pre><code></code>--&</pre>', wptexturize( '<pre><code></code>--&</pre>' ) );
 
-		$this->assertEquals( '<code>---&</code>', wptexturize( '<code>---&</code>' ) );
-		$this->assertEquals( '<kbd>---&</kbd>', wptexturize( '<kbd>---&</kbd>' ) );
-		$this->assertEquals( '<style>---&</style>', wptexturize( '<style>---&</style>' ) );
-		$this->assertEquals( '<script>---&</script>', wptexturize( '<script>---&</script>' ) );
-		$this->assertEquals( '<tt>---&</tt>', wptexturize( '<tt>---&</tt>' ) );
+		$this->assertSame( '<code>---&</code>', wptexturize( '<code>---&</code>' ) );
+		$this->assertSame( '<kbd>---&</kbd>', wptexturize( '<kbd>---&</kbd>' ) );
+		$this->assertSame( '<style>---&</style>', wptexturize( '<style>---&</style>' ) );
+		$this->assertSame( '<script>---&</script>', wptexturize( '<script>---&</script>' ) );
+		$this->assertSame( '<tt>---&</tt>', wptexturize( '<tt>---&</tt>' ) );
 
-		$this->assertEquals( '<code>href="baba"</code> &#8220;baba&#8221;', wptexturize( '<code>href="baba"</code> "baba"' ) );
+		$this->assertSame( '<code>href="baba"</code> &#8220;baba&#8221;', wptexturize( '<code>href="baba"</code> "baba"' ) );
 
 		$enabled_tags_inside_code = '<code>curl -s <a href="http://x/">baba</a> | grep sfive | cut -d "\"" -f 10 &gt; topmp3.txt</code>';
-		$this->assertEquals( $enabled_tags_inside_code, wptexturize( $enabled_tags_inside_code ) );
+		$this->assertSame( $enabled_tags_inside_code, wptexturize( $enabled_tags_inside_code ) );
 
 		$double_nest = '<pre>"baba"<code>"baba"<pre></pre></code>"baba"</pre>';
-		$this->assertEquals( $double_nest, wptexturize( $double_nest ) );
+		$this->assertSame( $double_nest, wptexturize( $double_nest ) );
 
 		$invalid_nest = '<pre></code>"baba"</pre>';
-		$this->assertEquals( $invalid_nest, wptexturize( $invalid_nest ) );
+		$this->assertSame( $invalid_nest, wptexturize( $invalid_nest ) );
 
 	}
 
-	//WP Ticket #1418
+	/**
+	 * @ticket 1418
+	 */
 	function test_bracketed_quotes_1418() {
-		$this->assertEquals( '(&#8220;test&#8221;)', wptexturize( '("test")' ) );
-		$this->assertEquals( '(&#8216;test&#8217;)', wptexturize( "('test')" ) );
-		$this->assertEquals( '(&#8217;twas)', wptexturize( "('twas)" ) );
+		$this->assertSame( '(&#8220;test&#8221;)', wptexturize( '("test")' ) );
+		$this->assertSame( '(&#8216;test&#8217;)', wptexturize( "('test')" ) );
+		$this->assertSame( '(&#8217;twas)', wptexturize( "('twas)" ) );
 	}
 
-	//WP Ticket #3810
+	/**
+	 * @ticket 3810
+	 */
 	function test_bracketed_quotes_3810() {
-		$this->assertEquals( 'A dog (&#8220;Hubertus&#8221;) was sent out.', wptexturize( 'A dog ("Hubertus") was sent out.' ) );
+		$this->assertSame( 'A dog (&#8220;Hubertus&#8221;) was sent out.', wptexturize( 'A dog ("Hubertus") was sent out.' ) );
 	}
 
-	//WP Ticket #4539
+	/**
+	 * @ticket 4539
+	 */
 	function test_basic_quotes() {
-		$this->assertEquals( 'test&#8217;s', wptexturize( 'test\'s' ) );
+		$this->assertSame( 'test&#8217;s', wptexturize( 'test\'s' ) );
 
-		$this->assertEquals( '&#8216;quoted&#8217;', wptexturize( '\'quoted\'' ) );
-		$this->assertEquals( '&#8220;quoted&#8221;', wptexturize( '"quoted"' ) );
+		$this->assertSame( '&#8216;quoted&#8217;', wptexturize( '\'quoted\'' ) );
+		$this->assertSame( '&#8220;quoted&#8221;', wptexturize( '"quoted"' ) );
 
-		$this->assertEquals( 'space before &#8216;quoted&#8217; space after', wptexturize( 'space before \'quoted\' space after' ) );
-		$this->assertEquals( 'space before &#8220;quoted&#8221; space after', wptexturize( 'space before "quoted" space after' ) );
+		$this->assertSame( 'space before &#8216;quoted&#8217; space after', wptexturize( 'space before \'quoted\' space after' ) );
+		$this->assertSame( 'space before &#8220;quoted&#8221; space after', wptexturize( 'space before "quoted" space after' ) );
 
-		$this->assertEquals( '(&#8216;quoted&#8217;)', wptexturize( '(\'quoted\')' ) );
-		$this->assertEquals( '{&#8220;quoted&#8221;}', wptexturize( '{"quoted"}' ) );
+		$this->assertSame( '(&#8216;quoted&#8217;)', wptexturize( '(\'quoted\')' ) );
+		$this->assertSame( '{&#8220;quoted&#8221;}', wptexturize( '{"quoted"}' ) );
 
-		$this->assertEquals( '&#8216;qu(ot)ed&#8217;', wptexturize( '\'qu(ot)ed\'' ) );
-		$this->assertEquals( '&#8220;qu{ot}ed&#8221;', wptexturize( '"qu{ot}ed"' ) );
+		$this->assertSame( '&#8216;qu(ot)ed&#8217;', wptexturize( '\'qu(ot)ed\'' ) );
+		$this->assertSame( '&#8220;qu{ot}ed&#8221;', wptexturize( '"qu{ot}ed"' ) );
 
-		$this->assertEquals( ' &#8216;test&#8217;s quoted&#8217; ', wptexturize( ' \'test\'s quoted\' ' ) );
-		$this->assertEquals( ' &#8220;test&#8217;s quoted&#8221; ', wptexturize( ' "test\'s quoted" ' ) );
+		$this->assertSame( ' &#8216;test&#8217;s quoted&#8217; ', wptexturize( ' \'test\'s quoted\' ' ) );
+		$this->assertSame( ' &#8220;test&#8217;s quoted&#8221; ', wptexturize( ' "test\'s quoted" ' ) );
 	}
 
 	/**
@@ -69,7 +75,7 @@ class Tests_Formatting_WPTexturize extends WP_UnitTestCase {
 	 * @ticket 15241
 	 */
 	function test_full_sentences_with_unmatched_single_quotes() {
-		$this->assertEquals(
+		$this->assertSame(
 			'That means every moment you&#8217;re working on something without it being in the public it&#8217;s actually dying.',
 			wptexturize( "That means every moment you're working on something without it being in the public it's actually dying." )
 		);
@@ -79,63 +85,64 @@ class Tests_Formatting_WPTexturize extends WP_UnitTestCase {
 	 * @ticket 4539
 	 */
 	function test_quotes() {
-		$this->assertEquals( '&#8220;Quoted String&#8221;', wptexturize( '"Quoted String"' ) );
-		//$this->assertEquals('Here is &#8220;<a href="http://example.com">a test with a link</a>&#8221;', wptexturize('Here is "<a href="http://example.com">a test with a link</a>"'));
-		//$this->assertEquals('Here is &#8220;<a href="http://example.com">a test with a link and a period</a>&#8221;.', wptexturize('Here is "<a href="http://example.com">a test with a link and a period</a>".'));
-		$this->assertEquals( 'Here is &#8220;<a href="http://example.com">a test with a link</a>&#8221; and a space.', wptexturize( 'Here is "<a href="http://example.com">a test with a link</a>" and a space.' ) );
-		$this->assertEquals( 'Here is &#8220;<a href="http://example.com">a test with a link</a> and some text quoted&#8221;', wptexturize( 'Here is "<a href="http://example.com">a test with a link</a> and some text quoted"' ) );
-		//$this->assertEquals('Here is &#8220;<a href="http://example.com">a test with a link</a>&#8221;, and a comma.', wptexturize('Here is "<a href="http://example.com">a test with a link</a>", and a comma.'));
-		//$this->assertEquals('Here is &#8220;<a href="http://example.com">a test with a link</a>&#8221;; and a semi-colon.', wptexturize('Here is "<a href="http://example.com">a test with a link</a>"; and a semi-colon.'));
-		//$this->assertEquals('Here is &#8220;<a href="http://example.com">a test with a link</a>&#8221;- and a dash.', wptexturize('Here is "<a href="http://example.com">a test with a link</a>"- and a dash.'));
-		//$this->assertEquals('Here is &#8220;<a href="http://example.com">a test with a link</a>&#8221;&#8230; and ellipses.', wptexturize('Here is "<a href="http://example.com">a test with a link</a>"... and ellipses.'));
-		//$this->assertEquals('Here is &#8220;a test <a href="http://example.com">with a link</a>&#8221;.', wptexturize('Here is "a test <a href="http://example.com">with a link</a>".'));
-		//$this->assertEquals('Here is &#8220;<a href="http://example.com">a test with a link</a>&#8221;and a work stuck to the end.', wptexturize('Here is "<a href="http://example.com">a test with a link</a>"and a work stuck to the end.'));
-		$this->assertEquals( 'A test with a finishing number, &#8220;like 23&#8221;.', wptexturize( 'A test with a finishing number, "like 23".' ) );
-		$this->assertEquals( 'A test with a number, &#8220;like 62&#8221;, is nice to have.', wptexturize( 'A test with a number, "like 62", is nice to have.' ) );
+		$this->assertSame( '&#8220;Quoted String&#8221;', wptexturize( '"Quoted String"' ) );
+		// $this->assertSame( 'Here is &#8220;<a href="http://example.com">a test with a link</a>&#8221;', wptexturize( 'Here is "<a href="http://example.com">a test with a link</a>"' ) );
+		// $this->assertSame( 'Here is &#8220;<a href="http://example.com">a test with a link and a period</a>&#8221;.', wptexturize( 'Here is "<a href="http://example.com">a test with a link and a period</a>".' ) );
+		$this->assertSame( 'Here is &#8220;<a href="http://example.com">a test with a link</a>&#8221; and a space.', wptexturize( 'Here is "<a href="http://example.com">a test with a link</a>" and a space.' ) );
+		$this->assertSame( 'Here is &#8220;<a href="http://example.com">a test with a link</a> and some text quoted&#8221;', wptexturize( 'Here is "<a href="http://example.com">a test with a link</a> and some text quoted"' ) );
+		// $this->assertSame( 'Here is &#8220;<a href="http://example.com">a test with a link</a>&#8221;, and a comma.', wptexturize( 'Here is "<a href="http://example.com">a test with a link</a>", and a comma.' ) );
+		// $this->assertSame( 'Here is &#8220;<a href="http://example.com">a test with a link</a>&#8221;; and a semi-colon.', wptexturize( 'Here is "<a href="http://example.com">a test with a link</a>"; and a semi-colon.' ) );
+		// $this->assertSame( 'Here is &#8220;<a href="http://example.com">a test with a link</a>&#8221;- and a dash.', wptexturize( 'Here is "<a href="http://example.com">a test with a link</a>"- and a dash.' ) );
+		// $this->assertSame( 'Here is &#8220;<a href="http://example.com">a test with a link</a>&#8221;&#8230; and ellipses.', wptexturize( 'Here is "<a href="http://example.com">a test with a link</a>"... and ellipses.' ) );
+		// $this->assertSame( 'Here is &#8220;a test <a href="http://example.com">with a link</a>&#8221;.', wptexturize( 'Here is "a test <a href="http://example.com">with a link</a>".' ) );
+		// $this->assertSame( 'Here is &#8220;<a href="http://example.com">a test with a link</a>&#8221;and a work stuck to the end.', wptexturize( 'Here is "<a href="http://example.com">a test with a link</a>"and a work stuck to the end.' ) );
+		$this->assertSame( 'A test with a finishing number, &#8220;like 23&#8221;.', wptexturize( 'A test with a finishing number, "like 23".' ) );
+		$this->assertSame( 'A test with a number, &#8220;like 62&#8221;, is nice to have.', wptexturize( 'A test with a number, "like 62", is nice to have.' ) );
 	}
 
 	/**
 	 * @ticket 4539
 	 */
 	function test_quotes_before_s() {
-		$this->assertEquals( 'test&#8217;s', wptexturize( "test's" ) );
-		$this->assertEquals( '&#8216;test&#8217;s', wptexturize( "'test's" ) );
-		$this->assertEquals( '&#8216;test&#8217;s&#8217;', wptexturize( "'test's'" ) );
-		$this->assertEquals( '&#8216;string&#8217;', wptexturize( "'string'" ) );
-		$this->assertEquals( '&#8216;string&#8217;s&#8217;', wptexturize( "'string's'" ) );
+		$this->assertSame( 'test&#8217;s', wptexturize( "test's" ) );
+		$this->assertSame( '&#8216;test&#8217;s', wptexturize( "'test's" ) );
+		$this->assertSame( '&#8216;test&#8217;s&#8217;', wptexturize( "'test's'" ) );
+		$this->assertSame( '&#8216;string&#8217;', wptexturize( "'string'" ) );
+		$this->assertSame( '&#8216;string&#8217;s&#8217;', wptexturize( "'string's'" ) );
 	}
 
 	/**
 	 * @ticket 4539
 	 */
 	function test_quotes_before_numbers() {
-		$this->assertEquals( 'Class of &#8217;99', wptexturize( "Class of '99" ) );
-		$this->assertEquals( 'Class of &#8217;99&#8217;s', wptexturize( "Class of '99's" ) );
-		$this->assertEquals( '&#8216;Class of &#8217;99&#8217;', wptexturize( "'Class of '99'" ) );
-		$this->assertEquals( '&#8216;Class of &#8217;99&#8217; ', wptexturize( "'Class of '99' " ) );
-		$this->assertEquals( '&#8216;Class of &#8217;99&#8217;.', wptexturize( "'Class of '99'." ) );
-		$this->assertEquals( '&#8216;Class of &#8217;99&#8217;, she said', wptexturize( "'Class of '99', she said" ) );
-		$this->assertEquals( '&#8216;Class of &#8217;99&#8217;:', wptexturize( "'Class of '99':" ) );
-		$this->assertEquals( '&#8216;Class of &#8217;99&#8217;;', wptexturize( "'Class of '99';" ) );
-		$this->assertEquals( '&#8216;Class of &#8217;99&#8217;!', wptexturize( "'Class of '99'!" ) );
-		$this->assertEquals( '&#8216;Class of &#8217;99&#8217;?', wptexturize( "'Class of '99'?" ) );
-		$this->assertEquals( '&#8216;Class of &#8217;99&#8217;s&#8217;', wptexturize( "'Class of '99's'" ) );
-		$this->assertEquals( '&#8216;Class of &#8217;99&#8217;s&#8217;', wptexturize( "'Class of '99&#8217;s'" ) );
-		$this->assertEquals( '&#8220;Class of 99&#8221;', wptexturize( '"Class of 99"' ) );
-		$this->assertEquals( '&#8220;Class of &#8217;99&#8221;', wptexturize( "\"Class of '99\"" ) );
-		$this->assertEquals( '{&#8220;Class of &#8217;99&#8221;}', wptexturize( "{\"Class of '99\"}" ) );
-		$this->assertEquals( ' &#8220;Class of &#8217;99&#8221; ', wptexturize( " \"Class of '99\" " ) );
-		$this->assertEquals( ' &#8220;Class of &#8217;99&#8221;.', wptexturize( " \"Class of '99\"." ) );
-		$this->assertEquals( ' &#8220;Class of &#8217;99&#8221;, she said', wptexturize( " \"Class of '99\", she said" ) );
-		$this->assertEquals( ' &#8220;Class of &#8217;99&#8221;:', wptexturize( " \"Class of '99\":" ) );
-		$this->assertEquals( ' &#8220;Class of &#8217;99&#8221;;', wptexturize( " \"Class of '99\";" ) );
-		$this->assertEquals( ' &#8220;Class of &#8217;99&#8221;!', wptexturize( " \"Class of '99\"!" ) );
-		$this->assertEquals( ' &#8220;Class of &#8217;99&#8221;?', wptexturize( " \"Class of '99\"?" ) );
-		$this->assertEquals( '}&#8221;Class of &#8217;99&#8243;{', wptexturize( "}\"Class of '99\"{" ) ); // Not a quotation, may be between two other quotations.
+		$this->assertSame( 'Class of &#8217;99', wptexturize( "Class of '99" ) );
+		$this->assertSame( 'Class of &#8217;99&#8217;s', wptexturize( "Class of '99's" ) );
+		$this->assertSame( '&#8216;Class of &#8217;99&#8217;', wptexturize( "'Class of '99'" ) );
+		$this->assertSame( '&#8216;Class of &#8217;99&#8217; ', wptexturize( "'Class of '99' " ) );
+		$this->assertSame( '&#8216;Class of &#8217;99&#8217;.', wptexturize( "'Class of '99'." ) );
+		$this->assertSame( '&#8216;Class of &#8217;99&#8217;, she said', wptexturize( "'Class of '99', she said" ) );
+		$this->assertSame( '&#8216;Class of &#8217;99&#8217;:', wptexturize( "'Class of '99':" ) );
+		$this->assertSame( '&#8216;Class of &#8217;99&#8217;;', wptexturize( "'Class of '99';" ) );
+		$this->assertSame( '&#8216;Class of &#8217;99&#8217;!', wptexturize( "'Class of '99'!" ) );
+		$this->assertSame( '&#8216;Class of &#8217;99&#8217;?', wptexturize( "'Class of '99'?" ) );
+		$this->assertSame( '&#8216;Class of &#8217;99&#8217;s&#8217;', wptexturize( "'Class of '99's'" ) );
+		$this->assertSame( '&#8216;Class of &#8217;99&#8217;s&#8217;', wptexturize( "'Class of '99&#8217;s'" ) );
+		$this->assertSame( '&#8220;Class of 99&#8221;', wptexturize( '"Class of 99"' ) );
+		$this->assertSame( '&#8220;Class of &#8217;99&#8221;', wptexturize( "\"Class of '99\"" ) );
+		$this->assertSame( '{&#8220;Class of &#8217;99&#8221;}', wptexturize( "{\"Class of '99\"}" ) );
+		$this->assertSame( ' &#8220;Class of &#8217;99&#8221; ', wptexturize( " \"Class of '99\" " ) );
+		$this->assertSame( ' &#8220;Class of &#8217;99&#8221;.', wptexturize( " \"Class of '99\"." ) );
+		$this->assertSame( ' &#8220;Class of &#8217;99&#8221;, she said', wptexturize( " \"Class of '99\", she said" ) );
+		$this->assertSame( ' &#8220;Class of &#8217;99&#8221;:', wptexturize( " \"Class of '99\":" ) );
+		$this->assertSame( ' &#8220;Class of &#8217;99&#8221;;', wptexturize( " \"Class of '99\";" ) );
+		$this->assertSame( ' &#8220;Class of &#8217;99&#8221;!', wptexturize( " \"Class of '99\"!" ) );
+		$this->assertSame( ' &#8220;Class of &#8217;99&#8221;?', wptexturize( " \"Class of '99\"?" ) );
+		// Not a quotation, may be between two other quotations.
+		$this->assertSame( '}&#8221;Class of &#8217;99&#8243;{', wptexturize( "}\"Class of '99\"{" ) );
 	}
 
 	function test_quotes_after_numbers() {
-		$this->assertEquals( 'Class of &#8217;99', wptexturize( "Class of '99" ) );
+		$this->assertSame( 'Class of &#8217;99', wptexturize( "Class of '99" ) );
 	}
 
 	/**
@@ -143,43 +150,43 @@ class Tests_Formatting_WPTexturize extends WP_UnitTestCase {
 	 * @ticket 15241
 	 */
 	function test_other_html() {
-		$this->assertEquals( '&#8216;<strong>', wptexturize( "'<strong>" ) );
-		//$this->assertEquals('&#8216;<strong>Quoted Text</strong>&#8217;,', wptexturize("'<strong>Quoted Text</strong>',"));
-		//$this->assertEquals('&#8220;<strong>Quoted Text</strong>&#8221;,', wptexturize('"<strong>Quoted Text</strong>",'));
+		$this->assertSame( '&#8216;<strong>', wptexturize( "'<strong>" ) );
+		// $this->assertSame( '&#8216;<strong>Quoted Text</strong>&#8217;,', wptexturize( "'<strong>Quoted Text</strong>'," ) );
+		// $this->assertSame( '&#8220;<strong>Quoted Text</strong>&#8221;,', wptexturize( '"<strong>Quoted Text</strong>",' ) );
 	}
 
 	function test_x() {
-		$this->assertEquals( '14&#215;24', wptexturize( '14x24' ) );
+		$this->assertSame( '14&#215;24', wptexturize( '14x24' ) );
 	}
 
 	function test_minutes_seconds() {
-		$this->assertEquals( '9&#8242;', wptexturize( '9\'' ) );
-		$this->assertEquals( '9&#8243;', wptexturize( '9"' ) );
+		$this->assertSame( '9&#8242;', wptexturize( '9\'' ) );
+		$this->assertSame( '9&#8243;', wptexturize( '9"' ) );
 
-		$this->assertEquals( 'a 9&#8242; b', wptexturize( 'a 9\' b' ) );
-		$this->assertEquals( 'a 9&#8243; b', wptexturize( 'a 9" b' ) );
+		$this->assertSame( 'a 9&#8242; b', wptexturize( 'a 9\' b' ) );
+		$this->assertSame( 'a 9&#8243; b', wptexturize( 'a 9" b' ) );
 
-		$this->assertEquals( '&#8220;a 9&#8242; b&#8221;', wptexturize( '"a 9\' b"' ) );
-		$this->assertEquals( '&#8216;a 9&#8243; b&#8217;', wptexturize( "'a 9\" b'" ) );
+		$this->assertSame( '&#8220;a 9&#8242; b&#8221;', wptexturize( '"a 9\' b"' ) );
+		$this->assertSame( '&#8216;a 9&#8243; b&#8217;', wptexturize( "'a 9\" b'" ) );
 	}
 
 	/**
 	 * @ticket 8775
 	 */
 	function test_wptexturize_quotes_around_numbers() {
-		$this->assertEquals( '&#8220;12345&#8221;', wptexturize( '"12345"' ) );
-		$this->assertEquals( '&#8216;12345&#8217;', wptexturize( '\'12345\'' ) );
-		$this->assertEquals( '&#8220;a 9&#8242; plus a &#8216;9&#8217;, maybe a 9&#8242; &#8216;9&#8217;&#8221;', wptexturize( '"a 9\' plus a \'9\', maybe a 9\' \'9\'"' ) );
-		$this->assertEquals( '<p>&#8217;99<br />&#8216;123&#8217;<br />&#8217;tis<br />&#8216;s&#8217;</p>', wptexturize( '<p>\'99<br />\'123\'<br />\'tis<br />\'s\'</p>' ) );
+		$this->assertSame( '&#8220;12345&#8221;', wptexturize( '"12345"' ) );
+		$this->assertSame( '&#8216;12345&#8217;', wptexturize( '\'12345\'' ) );
+		$this->assertSame( '&#8220;a 9&#8242; plus a &#8216;9&#8217;, maybe a 9&#8242; &#8216;9&#8217;&#8221;', wptexturize( '"a 9\' plus a \'9\', maybe a 9\' \'9\'"' ) );
+		$this->assertSame( '<p>&#8217;99<br />&#8216;123&#8217;<br />&#8217;tis<br />&#8216;s&#8217;</p>', wptexturize( '<p>\'99<br />\'123\'<br />\'tis<br />\'s\'</p>' ) );
 	}
 
 	/**
 	 * @ticket 8912
 	 */
 	function test_wptexturize_html_comments() {
-		$this->assertEquals( '<!--[if !IE]>--><!--<![endif]-->', wptexturize( '<!--[if !IE]>--><!--<![endif]-->' ) );
-		$this->assertEquals( '<!--[if !IE]>"a 9\' plus a \'9\', maybe a 9\' \'9\' "<![endif]-->', wptexturize( '<!--[if !IE]>"a 9\' plus a \'9\', maybe a 9\' \'9\' "<![endif]-->' ) );
-		$this->assertEquals( '<ul><li>Hello.</li><!--<li>Goodbye.</li>--></ul>', wptexturize( '<ul><li>Hello.</li><!--<li>Goodbye.</li>--></ul>' ) );
+		$this->assertSame( '<!--[if !IE]>--><!--<![endif]-->', wptexturize( '<!--[if !IE]>--><!--<![endif]-->' ) );
+		$this->assertSame( '<!--[if !IE]>"a 9\' plus a \'9\', maybe a 9\' \'9\' "<![endif]-->', wptexturize( '<!--[if !IE]>"a 9\' plus a \'9\', maybe a 9\' \'9\' "<![endif]-->' ) );
+		$this->assertSame( '<ul><li>Hello.</li><!--<li>Goodbye.</li>--></ul>', wptexturize( '<ul><li>Hello.</li><!--<li>Goodbye.</li>--></ul>' ) );
 	}
 
 	/**
@@ -187,15 +194,15 @@ class Tests_Formatting_WPTexturize extends WP_UnitTestCase {
 	 * @ticket 15241
 	 */
 	function test_entity_quote_cuddling() {
-		$this->assertEquals( '&nbsp;&#8220;Testing&#8221;', wptexturize( '&nbsp;"Testing"' ) );
-		//$this->assertEquals('&#38;&#8220;Testing&#8221;', wptexturize('&#38;"Testing"'));
+		$this->assertSame( '&nbsp;&#8220;Testing&#8221;', wptexturize( '&nbsp;"Testing"' ) );
+		// $this->assertSame( '&#38;&#8220;Testing&#8221;', wptexturize( '&#38;"Testing"' ) );
 	}
 
 	/**
 	 * @ticket 22823
 	 */
 	function test_apostrophes_before_primes() {
-		$this->assertEquals( 'WordPress 3.5&#8217;s release date', wptexturize( "WordPress 3.5's release date" ) );
+		$this->assertSame( 'WordPress 3.5&#8217;s release date', wptexturize( "WordPress 3.5's release date" ) );
 	}
 
 	/**
@@ -204,34 +211,34 @@ class Tests_Formatting_WPTexturize extends WP_UnitTestCase {
 	function test_spaces_around_hyphens() {
 		$nbsp = "\xC2\xA0";
 
-		$this->assertEquals( ' &#8211; ', wptexturize( ' - ' ) );
-		$this->assertEquals( '&nbsp;&#8211;&nbsp;', wptexturize( '&nbsp;-&nbsp;' ) );
-		$this->assertEquals( ' &#8211;&nbsp;', wptexturize( ' -&nbsp;' ) );
-		$this->assertEquals( '&nbsp;&#8211; ', wptexturize( '&nbsp;- ' ) );
-		$this->assertEquals( "$nbsp&#8211;$nbsp", wptexturize( "$nbsp-$nbsp" ) );
-		$this->assertEquals( " &#8211;$nbsp", wptexturize( " -$nbsp" ) );
-		$this->assertEquals( "$nbsp&#8211; ", wptexturize( "$nbsp- " ) );
+		$this->assertSame( ' &#8211; ', wptexturize( ' - ' ) );
+		$this->assertSame( '&nbsp;&#8211;&nbsp;', wptexturize( '&nbsp;-&nbsp;' ) );
+		$this->assertSame( ' &#8211;&nbsp;', wptexturize( ' -&nbsp;' ) );
+		$this->assertSame( '&nbsp;&#8211; ', wptexturize( '&nbsp;- ' ) );
+		$this->assertSame( "$nbsp&#8211;$nbsp", wptexturize( "$nbsp-$nbsp" ) );
+		$this->assertSame( " &#8211;$nbsp", wptexturize( " -$nbsp" ) );
+		$this->assertSame( "$nbsp&#8211; ", wptexturize( "$nbsp- " ) );
 
-		$this->assertEquals( ' &#8212; ', wptexturize( ' -- ' ) );
-		$this->assertEquals( '&nbsp;&#8212;&nbsp;', wptexturize( '&nbsp;--&nbsp;' ) );
-		$this->assertEquals( ' &#8212;&nbsp;', wptexturize( ' --&nbsp;' ) );
-		$this->assertEquals( '&nbsp;&#8212; ', wptexturize( '&nbsp;-- ' ) );
-		$this->assertEquals( "$nbsp&#8212;$nbsp", wptexturize( "$nbsp--$nbsp" ) );
-		$this->assertEquals( " &#8212;$nbsp", wptexturize( " --$nbsp" ) );
-		$this->assertEquals( "$nbsp&#8212; ", wptexturize( "$nbsp-- " ) );
+		$this->assertSame( ' &#8212; ', wptexturize( ' -- ' ) );
+		$this->assertSame( '&nbsp;&#8212;&nbsp;', wptexturize( '&nbsp;--&nbsp;' ) );
+		$this->assertSame( ' &#8212;&nbsp;', wptexturize( ' --&nbsp;' ) );
+		$this->assertSame( '&nbsp;&#8212; ', wptexturize( '&nbsp;-- ' ) );
+		$this->assertSame( "$nbsp&#8212;$nbsp", wptexturize( "$nbsp--$nbsp" ) );
+		$this->assertSame( " &#8212;$nbsp", wptexturize( " --$nbsp" ) );
+		$this->assertSame( "$nbsp&#8212; ", wptexturize( "$nbsp-- " ) );
 	}
 
 	/**
 	 * @ticket 31030
 	 */
 	function test_hyphens_at_start_and_end() {
-		$this->assertEquals( '&#8211; ', wptexturize( '- ' ) );
-		$this->assertEquals( '&#8211; &#8211;', wptexturize( '- -' ) );
-		$this->assertEquals( ' &#8211;', wptexturize( ' -' ) );
+		$this->assertSame( '&#8211; ', wptexturize( '- ' ) );
+		$this->assertSame( '&#8211; &#8211;', wptexturize( '- -' ) );
+		$this->assertSame( ' &#8211;', wptexturize( ' -' ) );
 
-		$this->assertEquals( '&#8212; ', wptexturize( '-- ' ) );
-		$this->assertEquals( '&#8212; &#8212;', wptexturize( '-- --' ) );
-		$this->assertEquals( ' &#8212;', wptexturize( ' --' ) );
+		$this->assertSame( '&#8212; ', wptexturize( '-- ' ) );
+		$this->assertSame( '&#8212; &#8212;', wptexturize( '-- --' ) );
+		$this->assertSame( ' &#8212;', wptexturize( ' --' ) );
 	}
 
 	/**
@@ -259,7 +266,7 @@ class Tests_Formatting_WPTexturize extends WP_UnitTestCase {
 	 * @dataProvider data_spaces_around_quotes
 	 */
 	function test_spaces_around_quotes( $input, $output ) {
-		return $this->assertEquals( $output, wptexturize( $input ) );
+		return $this->assertSame( $output, wptexturize( $input ) );
 	}
 
 	function data_spaces_around_quotes() {
@@ -315,7 +322,7 @@ class Tests_Formatting_WPTexturize extends WP_UnitTestCase {
 	 * @dataProvider data_apos_before_digits
 	 */
 	function test_apos_before_digits( $input, $output ) {
-		return $this->assertEquals( $output, wptexturize( $input ) );
+		return $this->assertSame( $output, wptexturize( $input ) );
 	}
 
 	function data_apos_before_digits() {
@@ -341,7 +348,7 @@ class Tests_Formatting_WPTexturize extends WP_UnitTestCase {
 				'word &#8217;99&#8217;s word',
 			),
 			array(
-				"according to our source, '33 students scored less than 50' on the test.", // Apostrophes and primes have priority over quotes
+				"according to our source, '33 students scored less than 50' on the test.", // Apostrophes and primes have priority over quotes.
 				'according to our source, &#8217;33 students scored less than 50&#8242; on the test.',
 			),
 		);
@@ -356,7 +363,7 @@ class Tests_Formatting_WPTexturize extends WP_UnitTestCase {
 	 * @dataProvider data_opening_single_quote
 	 */
 	function test_opening_single_quote( $input, $output ) {
-		return $this->assertEquals( $output, wptexturize( $input ) );
+		return $this->assertSame( $output, wptexturize( $input ) );
 	}
 
 	function data_opening_single_quote() {
@@ -374,7 +381,7 @@ class Tests_Formatting_WPTexturize extends WP_UnitTestCase {
 				'word [&#8216;word word',
 			),
 			array(
-				"word <'word word", // Invalid HTML
+				"word <'word word",    // Invalid HTML.
 				"word <'word word",
 			),
 			array(
@@ -387,7 +394,7 @@ class Tests_Formatting_WPTexturize extends WP_UnitTestCase {
 			),
 			array(
 				"word \"'word word",
-				'word &#8220;&#8216;word word', // Two opening quotes
+				'word &#8220;&#8216;word word', // Two opening quotes.
 			),
 			array(
 				"'word word",
@@ -415,7 +422,7 @@ class Tests_Formatting_WPTexturize extends WP_UnitTestCase {
 			),
 			array(
 				"word\"'word word",
-				'word&#8221;&#8216;word word', // Closing quote, then opening quote
+				'word&#8221;&#8216;word word', // Closing quote, then opening quote.
 			),
 			array(
 				"word ' word word",
@@ -443,7 +450,7 @@ class Tests_Formatting_WPTexturize extends WP_UnitTestCase {
 			),
 			array(
 				"word \"' word word",
-				'word &#8220;&#8216; word word', // Two opening quotes
+				'word &#8220;&#8216; word word', // Two opening quotes.
 			),
 			array(
 				"' word word",
@@ -471,7 +478,7 @@ class Tests_Formatting_WPTexturize extends WP_UnitTestCase {
 			),
 			array(
 				"word\"' word word",
-				'word&#8221;&#8216; word word', // Closing quote, then opening quote
+				'word&#8221;&#8216; word word', // Closing quote, then opening quote.
 			),
 		);
 	}
@@ -485,7 +492,7 @@ class Tests_Formatting_WPTexturize extends WP_UnitTestCase {
 	 * @dataProvider data_double_prime
 	 */
 	function test_double_prime( $input, $output ) {
-		return $this->assertEquals( $output, wptexturize( $input ) );
+		return $this->assertSame( $output, wptexturize( $input ) );
 	}
 
 	function data_double_prime() {
@@ -518,7 +525,7 @@ class Tests_Formatting_WPTexturize extends WP_UnitTestCase {
 	 * @dataProvider data_single_prime
 	 */
 	function test_single_prime( $input, $output ) {
-		return $this->assertEquals( $output, wptexturize( $input ) );
+		return $this->assertSame( $output, wptexturize( $input ) );
 	}
 
 	function data_single_prime() {
@@ -536,7 +543,7 @@ class Tests_Formatting_WPTexturize extends WP_UnitTestCase {
 				'word99&#8242; word',
 			),
 			array(
-				"word99'word", // Not a prime anymore.
+				"word99'word",  // Not a prime anymore.
 				'word99&#8217;word',
 			),
 		);
@@ -551,7 +558,7 @@ class Tests_Formatting_WPTexturize extends WP_UnitTestCase {
 	 * @dataProvider data_contractions
 	 */
 	function test_contractions( $input, $output ) {
-		return $this->assertEquals( $output, wptexturize( $input ) );
+		return $this->assertSame( $output, wptexturize( $input ) );
 	}
 
 	function data_contractions() {
@@ -592,7 +599,7 @@ class Tests_Formatting_WPTexturize extends WP_UnitTestCase {
 	 * @dataProvider data_opening_quote
 	 */
 	function test_opening_quote( $input, $output ) {
-		return $this->assertEquals( $output, wptexturize( $input ) );
+		return $this->assertSame( $output, wptexturize( $input ) );
 	}
 
 	function data_opening_quote() {
@@ -610,7 +617,7 @@ class Tests_Formatting_WPTexturize extends WP_UnitTestCase {
 				'word [&#8220;word word',
 			),
 			array(
-				'word <"word word', // Invalid HTML
+				'word <"word word', // Invalid HTML.
 				'word <"word word',
 			),
 			array(
@@ -669,7 +676,7 @@ class Tests_Formatting_WPTexturize extends WP_UnitTestCase {
 	 * @dataProvider data_closing_quote
 	 */
 	function test_closing_quote( $input, $output ) {
-		return $this->assertEquals( $output, wptexturize( $input ) );
+		return $this->assertSame( $output, wptexturize( $input ) );
 	}
 
 	function data_closing_quote() {
@@ -691,11 +698,11 @@ class Tests_Formatting_WPTexturize extends WP_UnitTestCase {
 				'word word&#8221;} word',
 			),
 			array(
-				'word word"> word', // Invalid HTML input?
+				'word word"> word',    // Invalid HTML input?
 				'word word&#8221;> word',
 			),
 			array(
-				'word word"&gt; word', // Valid HTML should work
+				'word word"&gt; word', // Valid HTML should work.
 				'word word&#8221;&gt; word',
 			),
 			array(
@@ -758,7 +765,7 @@ class Tests_Formatting_WPTexturize extends WP_UnitTestCase {
 	 * @dataProvider data_closing_single_quote
 	 */
 	function test_closing_single_quote( $input, $output ) {
-		return $this->assertEquals( $output, wptexturize( $input ) );
+		return $this->assertSame( $output, wptexturize( $input ) );
 	}
 
 	function data_closing_single_quote() {
@@ -844,10 +851,11 @@ class Tests_Formatting_WPTexturize extends WP_UnitTestCase {
 	 * Checks all baseline patterns. If anything ever changes in wptexturize(), these tests may fail.
 	 *
 	 * @ticket 22692
+	 * @ticket 30445
 	 * @dataProvider data_multiplication
 	 */
 	function test_multiplication( $input, $output ) {
-		return $this->assertEquals( $output, wptexturize( $input ) );
+		return $this->assertSame( $output, wptexturize( $input ) );
 	}
 
 	function data_multiplication() {
@@ -897,7 +905,7 @@ class Tests_Formatting_WPTexturize extends WP_UnitTestCase {
 	 * @dataProvider data_ampersand
 	 */
 	function test_ampersand( $input, $output ) {
-		return $this->assertEquals( $output, wptexturize( $input ) );
+		return $this->assertSame( $output, wptexturize( $input ) );
 	}
 
 	function data_ampersand() {
@@ -962,7 +970,7 @@ class Tests_Formatting_WPTexturize extends WP_UnitTestCase {
 	 * @dataProvider data_cockney
 	 */
 	function test_cockney( $input, $output ) {
-		return $this->assertEquals( $output, wptexturize( $input ) );
+		return $this->assertSame( $output, wptexturize( $input ) );
 	}
 
 	function data_cockney() {
@@ -1023,7 +1031,7 @@ class Tests_Formatting_WPTexturize extends WP_UnitTestCase {
 	 * @dataProvider data_smart_dashes
 	 */
 	function test_smart_dashes( $input, $output ) {
-		return $this->assertEquals( $output, wptexturize( $input ) );
+		return $this->assertSame( $output, wptexturize( $input ) );
 	}
 
 	function data_smart_dashes() {
@@ -1076,7 +1084,7 @@ class Tests_Formatting_WPTexturize extends WP_UnitTestCase {
 	 * @dataProvider data_misc_static_replacements
 	 */
 	function test_misc_static_replacements( $input, $output ) {
-		return $this->assertEquals( $output, wptexturize( $input ) );
+		return $this->assertSame( $output, wptexturize( $input ) );
 	}
 
 	function data_misc_static_replacements() {
@@ -1131,7 +1139,7 @@ class Tests_Formatting_WPTexturize extends WP_UnitTestCase {
 	 * @dataProvider data_quoted_numbers
 	 */
 	function test_quoted_numbers( $input, $output ) {
-		return $this->assertEquals( $output, wptexturize( $input ) );
+		return $this->assertSame( $output, wptexturize( $input ) );
 	}
 
 	function data_quoted_numbers() {
@@ -1182,7 +1190,7 @@ class Tests_Formatting_WPTexturize extends WP_UnitTestCase {
 	 * @dataProvider data_quotes_and_dashes
 	 */
 	function test_quotes_and_dashes( $input, $output ) {
-		return $this->assertEquals( $output, wptexturize( $input ) );
+		return $this->assertSame( $output, wptexturize( $input ) );
 	}
 
 	function data_quotes_and_dashes() {
@@ -1245,7 +1253,7 @@ class Tests_Formatting_WPTexturize extends WP_UnitTestCase {
 	 * @dataProvider data_tag_avoidance
 	 */
 	function test_tag_avoidance( $input, $output ) {
-		return $this->assertEquals( $output, wptexturize( $input ) );
+		return $this->assertSame( $output, wptexturize( $input ) );
 	}
 
 	function data_tag_avoidance() {
@@ -1291,15 +1299,15 @@ class Tests_Formatting_WPTexturize extends WP_UnitTestCase {
 				'[gallery ...]]',
 			),
 			array(
-				'[/gallery ...]', // This would actually be ignored by the shortcode system.  The decision to not texturize it is intentional, if not correct.
-				'[/gallery ...]',
+				'[/gallery ...]', // This would actually be ignored by the shortcode system.
+				'[/gallery ...]', // The decision to not texturize it is intentional, if not correct.
 			),
 			array(
-				'[[gallery]]...[[/gallery]]', // Shortcode parsing will ignore the inner ]...[ part and treat this as a single escaped shortcode.
+				'[[gallery]]...[[/gallery]]', // Shortcode parsing will ignore the inner ']...[' part and treat this as a single escaped shortcode.
 				'[[gallery]]&#8230;[[/gallery]]',
 			),
 			array(
-				'[[[gallery]]]...[[[/gallery]]]', // Again, shortcode parsing matches, but only the [[gallery] and [/gallery]] parts.
+				'[[[gallery]]]...[[[/gallery]]]', // Again, shortcode parsing matches, but only the '[[gallery]' and '[/gallery]]' parts.
 				'[[[gallery]]]&#8230;[[[/gallery]]]',
 			),
 			array(
@@ -1307,8 +1315,8 @@ class Tests_Formatting_WPTexturize extends WP_UnitTestCase {
 				'[gallery &#8230;',
 			),
 			array(
-				'[gallery <br ... /> ...]', // This tag is still valid. Shortcode 'attributes' are not considered in the initial parsing of shortcodes, and HTML is allowed.
-				'[gallery <br ... /> ...]',
+				'[gallery <br ... /> ...]', // This tag is still valid. Shortcode 'attributes' are not considered
+				'[gallery <br ... /> ...]', // in the initial parsing of shortcodes, and HTML is allowed.
 			),
 			array(
 				'<br [gallery ...] ... />',
@@ -1347,7 +1355,7 @@ class Tests_Formatting_WPTexturize extends WP_UnitTestCase {
 				'[/gallery ...]]',
 			),
 			array(
-				'[[gallery <br ... /> ...]]', // This gets parsed as an escaped shortcode with embedded HTML.  Brains may explode.
+				'[[gallery <br ... /> ...]]', // This gets parsed as an escaped shortcode with embedded HTML. Brains may explode.
 				'[[gallery <br ... /> ...]]',
 			),
 			array(
@@ -1443,7 +1451,7 @@ class Tests_Formatting_WPTexturize extends WP_UnitTestCase {
 				'[ but also catches the <b>styled &#8220;[quote]&#8221; here</b> ]',
 			),
 			array(
-				'[Let\'s get crazy<input>[caption code="<a href=\'?a[]=100\'>hello</a>"]</input>world]', // caption shortcode is invalid here because it contains [] chars.
+				'[Let\'s get crazy<input>[caption code="<a href=\'?a[]=100\'>hello</a>"]</input>world]', // [caption] shortcode is invalid here because it contains '[]' chars.
 				'[Let&#8217;s get crazy<input>[caption code=&#8221;<a href=\'?a[]=100\'>hello</a>&#8220;]</input>world]',
 			),
 			array(
@@ -1468,7 +1476,7 @@ class Tests_Formatting_WPTexturize extends WP_UnitTestCase {
 	 * @dataProvider data_year_abbr
 	 */
 	function test_year_abbr( $input, $output ) {
-		return $this->assertEquals( $output, wptexturize( $input ) );
+		return $this->assertSame( $output, wptexturize( $input ) );
 	}
 
 	function data_year_abbr() {
@@ -1490,7 +1498,7 @@ class Tests_Formatting_WPTexturize extends WP_UnitTestCase {
 				'word &#8217;99; word',
 			),
 			array(
-				"word '99' word", // For this pattern, prime doesn't make sense.  Should get apos and a closing quote.
+				"word '99' word", // For this pattern, prime doesn't make sense. Should get apos and a closing quote.
 				'word &#8217;99&#8217; word',
 			),
 			array(
@@ -1564,7 +1572,7 @@ class Tests_Formatting_WPTexturize extends WP_UnitTestCase {
 		remove_filter( 'gettext_with_context', array( $this, 'filter_translate' ), 10, 4 );
 		wptexturize( 'reset', true );
 
-		return $this->assertEquals( $output, $result );
+		return $this->assertSame( $output, $result );
 	}
 
 	function filter_translate( $translations, $text, $context, $domain ) {
@@ -1784,7 +1792,7 @@ class Tests_Formatting_WPTexturize extends WP_UnitTestCase {
 	 * @dataProvider data_element_stack
 	 */
 	function test_element_stack( $input, $output ) {
-		return $this->assertEquals( $output, wptexturize( $input ) );
+		return $this->assertSame( $output, wptexturize( $input ) );
 	}
 
 	function data_element_stack() {
@@ -1837,7 +1845,7 @@ class Tests_Formatting_WPTexturize extends WP_UnitTestCase {
 	function test_unregistered_shortcodes( $input, $output ) {
 		add_filter( 'no_texturize_shortcodes', array( $this, 'filter_shortcodes' ), 10, 1 );
 
-		$output = $this->assertEquals( $output, wptexturize( $input ) );
+		$output = $this->assertSame( $output, wptexturize( $input ) );
 
 		remove_filter( 'no_texturize_shortcodes', array( $this, 'filter_shortcodes' ), 10, 1 );
 		return $output;
@@ -1855,15 +1863,15 @@ class Tests_Formatting_WPTexturize extends WP_UnitTestCase {
 				'[a]a&#8211;b[audio]---[/audio]a&#8211;b[/a]',
 			),
 			array(
-				'[code ...]...[/code]', // code is not a registered shortcode.
+				'[code ...]...[/code]',   // '[code]' is not a registered shortcode.
 				'[code &#8230;]&#8230;[/code]',
 			),
 			array(
-				'[hello ...]...[/hello]', // hello is not a registered shortcode.
+				'[hello ...]...[/hello]', // '[hello]' is not a registered shortcode.
 				'[hello &#8230;]&#8230;[/hello]',
 			),
 			array(
-				'[...]...[/...]', // These are potentially usable shortcodes.
+				'[...]...[/...]',         // These are potentially usable shortcodes.
 				'[&#8230;]&#8230;[/&#8230;]',
 			),
 			array(
@@ -1875,13 +1883,13 @@ class Tests_Formatting_WPTexturize extends WP_UnitTestCase {
 				'[randomthing param=&#8221;test&#8221;]',
 			),
 			array(
-				'[[audio]...[/audio]...', // These are potentially usable shortcodes.  Unfortunately, the meaning of [[audio] is ambiguous unless we run the entire shortcode regexp.
-				'[[audio]&#8230;[/audio]&#8230;',
+				'[[audio]...[/audio]...',         // These are potentially usable shortcodes.
+				'[[audio]&#8230;[/audio]&#8230;', // Unfortunately, the meaning of [[audio] is ambiguous unless we run the entire shortcode regexp.
 			),
 			array(
-				'[audio]...[/audio]]...', // These are potentially usable shortcodes.  Unfortunately, the meaning of [/audio]] is ambiguous unless we run the entire shortcode regexp.
-				'[audio]...[/audio]]...', // This test would not pass in 3.9 because the extra brace was always ignored by texturize.
-			),
+				'[audio]...[/audio]]...', // These are potentially usable shortcodes.
+				'[audio]...[/audio]]...', // Unfortunately, the meaning of [/audio]] is ambiguous unless we run the entire shortcode regexp.
+			),                            // This test would not pass in 3.9 because the extra brace was always ignored by texturize.
 			array(
 				'<span>hello[/audio]---</span>',
 				'<span>hello[/audio]&#8212;</span>',
@@ -1920,7 +1928,7 @@ class Tests_Formatting_WPTexturize extends WP_UnitTestCase {
 	 * @dataProvider data_primes_vs_quotes
 	 */
 	function test_primes_vs_quotes( $input, $output ) {
-		return $this->assertEquals( $output, wptexturize( $input ) );
+		return $this->assertSame( $output, wptexturize( $input ) );
 	}
 
 	function data_primes_vs_quotes() {
@@ -1934,7 +1942,7 @@ class Tests_Formatting_WPTexturize extends WP_UnitTestCase {
 				'The best year &#8220;was that time in 2012&#8221; when everyone partied, he said.',
 			),
 			array(
-				"I need 4 x 20' = 80' of trim.", // Works only with a space before the = char.
+				"I need 4 x 20' = 80' of trim.", // Works only with a space before the '=' char.
 				'I need 4 x 20&#8242; = 80&#8242; of trim.',
 			),
 			array(
@@ -1989,7 +1997,7 @@ String with a number followed by a single quote &#8216;Expendables 3&#8217; vest
 		remove_filter( 'gettext_with_context', array( $this, 'filter_translate2' ), 10, 4 );
 		wptexturize( 'reset', true );
 
-		return $this->assertEquals( $output, $result );
+		return $this->assertSame( $output, $result );
 	}
 
 	function filter_translate2( $translations, $text, $context, $domain ) {
@@ -2030,7 +2038,7 @@ String with a number followed by a single quote &#8216;Expendables 3&#8217; vest
 				'The best year !q2!was that time in 2012!q2! when everyone partied, he said.',
 			),
 			array(
-				"I need 4 x 20' = 80' of trim.", // Works only with a space before the = char.
+				"I need 4 x 20' = 80' of trim.", // Works only with a space before the '=' char.
 				'I need 4 x 20!prime1! = 80!prime1! of trim.',
 			),
 			array(
@@ -2077,12 +2085,12 @@ String with a number followed by a single quote !q1!Expendables 3!q1! vestibulum
 	function test_pcre_performance( $input ) {
 		global $shortcode_tags;
 
-		// With Shortcodes Disabled
+		// With shortcodes disabled.
 		$regex  = _get_wptexturize_split_regex();
 		$result = benchmark_pcre_backtracking( $regex, $input, 'split' );
 		$this->assertLessThan( 200, $result );
 
-		// With Shortcodes Enabled
+		// With shortcodes enabled.
 		$shortcode_regex = _get_wptexturize_shortcode_regex( array_keys( $shortcode_tags ) );
 		$regex           = _get_wptexturize_split_regex( $shortcode_regex );
 		$result          = benchmark_pcre_backtracking( $regex, $input, 'split' );
@@ -2095,11 +2103,11 @@ String with a number followed by a single quote !q1!Expendables 3!q1! vestibulum
 	 * @ticket 35864
 	 */
 	function test_trailing_less_than() {
-		$this->assertEquals( 'F&#8211;oo<', wptexturize( 'F--oo<', true ) );
+		$this->assertSame( 'F&#8211;oo<', wptexturize( 'F--oo<', true ) );
 	}
 
 	function data_whole_posts() {
-		require_once( DIR_TESTDATA . '/formatting/whole-posts.php' );
+		require_once DIR_TESTDATA . '/formatting/whole-posts.php';
 		return data_whole_posts();
 	}
 }
diff --git a/tests/formatting/WPTrimWords.php b/tests/formatting/WPTrimWords.php
index 7b7438de46..10a4dd2dc9 100644
--- a/tests/formatting/WPTrimWords.php
+++ b/tests/formatting/WPTrimWords.php
@@ -16,39 +16,41 @@ class Tests_Formatting_WPTrimWords extends WP_UnitTestCase {
 
 	function test_trims_to_55_by_default() {
 		$trimmed = 'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Fusce varius lacinia vehicula. Etiam sapien risus, ultricies ac posuere eu, convallis sit amet augue. Pellentesque urna massa, lacinia vel iaculis eget, bibendum in mauris. Aenean eleifend pulvinar ligula, a convallis eros gravida non. Suspendisse potenti. Pellentesque et odio tortor. In vulputate pellentesque libero, sed dapibus velit&hellip;';
-		$this->assertEquals( $trimmed, wp_trim_words( $this->long_text ) );
+		$this->assertSame( $trimmed, wp_trim_words( $this->long_text ) );
 	}
 
 	function test_trims_to_10() {
 		$trimmed = 'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Fusce varius&hellip;';
-		$this->assertEquals( $trimmed, wp_trim_words( $this->long_text, 10 ) );
+		$this->assertSame( $trimmed, wp_trim_words( $this->long_text, 10 ) );
 	}
 
 	function test_trims_to_5_and_uses_custom_more() {
 		$trimmed = 'Lorem ipsum dolor sit amet,[...] Read on!';
-		$this->assertEquals( $trimmed, wp_trim_words( $this->long_text, 5, '[...] Read on!' ) );
+		$this->assertSame( $trimmed, wp_trim_words( $this->long_text, 5, '[...] Read on!' ) );
 	}
 
 	function test_strips_tags_before_trimming() {
 		$text    = 'This text contains a <a href="http://wordpress.org"> link </a> to WordPress.org!';
 		$trimmed = 'This text contains a link&hellip;';
-		$this->assertEquals( $trimmed, wp_trim_words( $text, 5 ) );
+		$this->assertSame( $trimmed, wp_trim_words( $text, 5 ) );
 	}
 
-	// #18726
+	/**
+	 * @ticket 18726
+	 */
 	function test_strips_script_and_style_content() {
 		$trimmed = 'This text contains. It should go.';
 
 		$text = 'This text contains<script>alert(" Javascript");</script>. It should go.';
-		$this->assertEquals( $trimmed, wp_trim_words( $text ) );
+		$this->assertSame( $trimmed, wp_trim_words( $text ) );
 
 		$text = 'This text contains<style>#css { width:expression(alert("css")) }</style>. It should go.';
-		$this->assertEquals( $trimmed, wp_trim_words( $text ) );
+		$this->assertSame( $trimmed, wp_trim_words( $text ) );
 	}
 
 	function test_doesnt_trim_short_text() {
 		$text = 'This is some short text.';
-		$this->assertEquals( $text, wp_trim_words( $text ) );
+		$this->assertSame( $text, wp_trim_words( $text ) );
 	}
 
 	/**
@@ -59,7 +61,7 @@ class Tests_Formatting_WPTrimWords extends WP_UnitTestCase {
 		$expected = substr( $this->long_text, 0, 20 ) . '&hellip;';
 		$actual   = wp_trim_words( $this->long_text, 20 );
 		restore_previous_locale();
-		$this->assertEquals( $expected, $actual );
+		$this->assertSame( $expected, $actual );
 	}
 
 	/**
@@ -71,16 +73,16 @@ class Tests_Formatting_WPTrimWords extends WP_UnitTestCase {
 		$expected = str_repeat( '„ÅÇ', 19 ) . '&hellip;';
 		$actual   = wp_trim_words( $text, 19 );
 		restore_previous_locale();
-		$this->assertEquals( $expected, $actual );
+		$this->assertSame( $expected, $actual );
 	}
 
 	/**
 	 * @ticket 47867
 	 */
 	function test_works_with_non_numeric_num_words() {
-		$this->assertEquals( '', wp_trim_words( $this->long_text, '', '' ) );
-		$this->assertEquals( '', wp_trim_words( $this->long_text, 'abc', '' ) );
-		$this->assertEquals( '', wp_trim_words( $this->long_text, null, '' ) );
-		$this->assertEquals( 'Lorem ipsum dolor', wp_trim_words( $this->long_text, '3', '' ) );
+		$this->assertSame( '', wp_trim_words( $this->long_text, '', '' ) );
+		$this->assertSame( '', wp_trim_words( $this->long_text, 'abc', '' ) );
+		$this->assertSame( '', wp_trim_words( $this->long_text, null, '' ) );
+		$this->assertSame( 'Lorem ipsum dolor', wp_trim_words( $this->long_text, '3', '' ) );
 	}
 }
diff --git a/tests/formatting/WpHtmlEditPre.php b/tests/formatting/WpHtmlEditPre.php
index dc39ddf050..fceabbe8db 100644
--- a/tests/formatting/WpHtmlEditPre.php
+++ b/tests/formatting/WpHtmlEditPre.php
@@ -17,7 +17,7 @@ class Tests_Formatting_WpHtmlEditPre extends WP_UnitTestCase {
 	function test_wp_htmledit_pre_charset_iso_8859_1() {
 		add_filter( 'pre_option_blog_charset', array( $this, '_charset_iso_8859_1' ) );
 		$iso8859_1 = 'Fran' . chr( 135 ) . 'ais';
-		$this->assertEquals( $iso8859_1, wp_htmledit_pre( $iso8859_1 ) );
+		$this->assertSame( $iso8859_1, wp_htmledit_pre( $iso8859_1 ) );
 		remove_filter( 'pre_option_blog_charset', array( $this, '_charset_iso_8859_1' ) );
 	}
 
@@ -31,7 +31,7 @@ class Tests_Formatting_WpHtmlEditPre extends WP_UnitTestCase {
 	function test_wp_htmledit_pre_charset_utf_8() {
 		add_filter( 'pre_option_blog_charset', array( $this, '_charset_utf_8' ) );
 		$utf8 = 'Fran' . chr( 195 ) . chr( 167 ) . 'ais';
-		$this->assertEquals( $utf8, wp_htmledit_pre( $utf8 ) );
+		$this->assertSame( $utf8, wp_htmledit_pre( $utf8 ) );
 		remove_filter( 'pre_option_blog_charset', array( $this, '_charset_utf_8' ) );
 	}
 }
diff --git a/tests/formatting/WpHtmlSplit.php b/tests/formatting/WpHtmlSplit.php
index 356dcb8e64..a9baa7cb8c 100644
--- a/tests/formatting/WpHtmlSplit.php
+++ b/tests/formatting/WpHtmlSplit.php
@@ -11,7 +11,7 @@ class Tests_Formatting_WpHtmlSplit extends WP_UnitTestCase {
 	 * @dataProvider data_basic_features
 	 */
 	function test_basic_features( $input, $output ) {
-		return $this->assertEquals( $output, wp_html_split( $input ) );
+		return $this->assertSame( $output, wp_html_split( $input ) );
 	}
 
 	function data_basic_features() {
@@ -47,7 +47,7 @@ class Tests_Formatting_WpHtmlSplit extends WP_UnitTestCase {
 	}
 
 	function data_whole_posts() {
-		require_once( DIR_TESTDATA . '/formatting/whole-posts.php' );
+		require_once DIR_TESTDATA . '/formatting/whole-posts.php';
 		return data_whole_posts();
 	}
 }
diff --git a/tests/formatting/WpReplaceInHtmlTags.php b/tests/formatting/WpReplaceInHtmlTags.php
index 7a6291047f..764a0cc178 100644
--- a/tests/formatting/WpReplaceInHtmlTags.php
+++ b/tests/formatting/WpReplaceInHtmlTags.php
@@ -10,7 +10,7 @@ class Tests_Formatting_WpReplaceInTags extends WP_UnitTestCase {
 	 * @dataProvider data_wp_replace_in_html_tags
 	 */
 	function test_wp_replace_in_html_tags( $input, $output ) {
-		return $this->assertEquals( $output, wp_replace_in_html_tags( $input, array( "\n" => ' ' ) ) );
+		return $this->assertSame( $output, wp_replace_in_html_tags( $input, array( "\n" => ' ' ) ) );
 	}
 
 	function data_wp_replace_in_html_tags() {
diff --git a/tests/formatting/WpRichEditPre.php b/tests/formatting/WpRichEditPre.php
index d5c2a072cb..79ed8b1bc6 100644
--- a/tests/formatting/WpRichEditPre.php
+++ b/tests/formatting/WpRichEditPre.php
@@ -17,7 +17,7 @@ class Tests_Formatting_WpRichEditPre extends WP_UnitTestCase {
 	function test_wp_richedit_pre_charset_iso_8859_1() {
 		add_filter( 'pre_option_blog_charset', array( $this, '_charset_iso_8859_1' ) );
 		$iso8859_1 = 'Fran' . chr( 135 ) . 'ais';
-		$this->assertEquals( '&lt;p&gt;' . $iso8859_1 . "&lt;/p&gt;\n", wp_richedit_pre( $iso8859_1 ) );
+		$this->assertSame( '&lt;p&gt;' . $iso8859_1 . "&lt;/p&gt;\n", wp_richedit_pre( $iso8859_1 ) );
 		remove_filter( 'pre_option_blog_charset', array( $this, '_charset_iso_8859_1' ) );
 	}
 
@@ -31,7 +31,7 @@ class Tests_Formatting_WpRichEditPre extends WP_UnitTestCase {
 	function test_wp_richedit_pre_charset_utf_8() {
 		add_filter( 'pre_option_blog_charset', array( $this, '_charset_utf_8' ) );
 		$utf8 = 'Fran' . chr( 195 ) . chr( 167 ) . 'ais';
-		$this->assertEquals( '&lt;p&gt;' . $utf8 . "&lt;/p&gt;\n", wp_richedit_pre( $utf8 ) );
+		$this->assertSame( '&lt;p&gt;' . $utf8 . "&lt;/p&gt;\n", wp_richedit_pre( $utf8 ) );
 		remove_filter( 'pre_option_blog_charset', array( $this, '_charset_utf_8' ) );
 	}
 }
diff --git a/tests/formatting/WpTrimExcerpt.php b/tests/formatting/WpTrimExcerpt.php
index b2c026a957..01353c8e22 100644
--- a/tests/formatting/WpTrimExcerpt.php
+++ b/tests/formatting/WpTrimExcerpt.php
@@ -66,4 +66,19 @@ class Tests_Formatting_WpTrimExcerpt extends WP_UnitTestCase {
 			}
 		}
 	}
+
+	/**
+	 * @ticket 51042
+	 */
+	public function test_should_generate_excerpt_for_empty_values() {
+		$post = self::factory()->post->create(
+			array(
+				'post_content' => 'Post content',
+			)
+		);
+
+		$this->assertSame( 'Post content', wp_trim_excerpt( '', $post ) );
+		$this->assertSame( 'Post content', wp_trim_excerpt( null, $post ) );
+		$this->assertSame( 'Post content', wp_trim_excerpt( false, $post ) );
+	}
 }
diff --git a/tests/formatting/Zeroise.php b/tests/formatting/Zeroise.php
index 212d006918..0f9fd8dad4 100644
--- a/tests/formatting/Zeroise.php
+++ b/tests/formatting/Zeroise.php
@@ -5,10 +5,10 @@
  */
 class Tests_Formatting_Zeroise extends WP_UnitTestCase {
 	function test_pads_with_leading_zeroes() {
-		$this->assertEquals( '00005', zeroise( 5, 5 ) );
+		$this->assertSame( '00005', zeroise( 5, 5 ) );
 	}
 
 	function test_does_nothing_if_input_is_already_longer() {
-		$this->assertEquals( '5000000', zeroise( 5000000, 2 ) );
+		$this->assertSame( '5000000', zeroise( 5000000, 2 ) );
 	}
 }
diff --git a/tests/formatting/balanceTags.php b/tests/formatting/balanceTags.php
index a660f45303..c39e30f29e 100644
--- a/tests/formatting/balanceTags.php
+++ b/tests/formatting/balanceTags.php
@@ -80,7 +80,7 @@ class Tests_Formatting_BalanceTags extends WP_UnitTestCase {
 			// Examples from the spec working document.
 			array( 'math-Œ±' ),
 			array( 'emotion-üòç' ),
-			// UNICODE ranges
+			// Unicode ranges.
 			// 0x00b7
 			array( 'b-¬∑' ),
 			// Latin characters with accents/modifiers.
@@ -154,7 +154,7 @@ class Tests_Formatting_BalanceTags extends WP_UnitTestCase {
 	function test_detects_traditional_tag_names( $tag ) {
 		$normalized = strtolower( $tag );
 
-		$this->assertEquals( "<$normalized>inside</$normalized>", balanceTags( "<$tag>inside", true ) );
+		$this->assertSame( "<$normalized>inside</$normalized>", balanceTags( "<$tag>inside", true ) );
 	}
 
 	/**
@@ -162,7 +162,7 @@ class Tests_Formatting_BalanceTags extends WP_UnitTestCase {
 	 * @dataProvider supported_custom_element_tag_names
 	 */
 	function test_detects_supported_custom_element_tag_names( $tag ) {
-		$this->assertEquals( "<$tag>inside</$tag>", balanceTags( "<$tag>inside", true ) );
+		$this->assertSame( "<$tag>inside</$tag>", balanceTags( "<$tag>inside", true ) );
 	}
 
 	/**
@@ -170,7 +170,7 @@ class Tests_Formatting_BalanceTags extends WP_UnitTestCase {
 	 * @dataProvider invalid_tag_names
 	 */
 	function test_ignores_invalid_tag_names( $input, $output ) {
-		$this->assertEquals( $output, balanceTags( $input, true ) );
+		$this->assertSame( $output, balanceTags( $input, true ) );
 	}
 
 	/**
@@ -178,7 +178,7 @@ class Tests_Formatting_BalanceTags extends WP_UnitTestCase {
 	 * @dataProvider unsupported_valid_tag_names
 	 */
 	function test_ignores_unsupported_custom_tag_names( $tag ) {
-		$this->assertEquals( "<$tag>inside", balanceTags( "<$tag>inside", true ) );
+		$this->assertSame( "<$tag>inside", balanceTags( "<$tag>inside", true ) );
 	}
 
 	/**
@@ -186,7 +186,7 @@ class Tests_Formatting_BalanceTags extends WP_UnitTestCase {
 	 * @dataProvider supported_invalid_tag_names
 	 */
 	function test_detects_supported_invalid_tag_names( $tag ) {
-		$this->assertEquals( "<$tag>inside</$tag>", balanceTags( "<$tag>inside", true ) );
+		$this->assertSame( "<$tag>inside</$tag>", balanceTags( "<$tag>inside", true ) );
 	}
 
 	/**
@@ -196,7 +196,7 @@ class Tests_Formatting_BalanceTags extends WP_UnitTestCase {
 	 * @dataProvider single_tags
 	 */
 	function test_selfcloses_unclosed_known_single_tags( $tag ) {
-		$this->assertEquals( "<$tag />", balanceTags( "<$tag>", true ) );
+		$this->assertSame( "<$tag />", balanceTags( "<$tag>", true ) );
 	}
 
 	/**
@@ -207,7 +207,7 @@ class Tests_Formatting_BalanceTags extends WP_UnitTestCase {
 	 * @dataProvider single_tags
 	 */
 	function test_selfcloses_known_single_tags_having_closing_tag( $tag ) {
-		$this->assertEquals( "<$tag />", balanceTags( "<$tag></$tag>", true ) );
+		$this->assertSame( "<$tag />", balanceTags( "<$tag></$tag>", true ) );
 	}
 
 	/**
@@ -232,7 +232,7 @@ class Tests_Formatting_BalanceTags extends WP_UnitTestCase {
 		);
 
 		foreach ( $inputs as $key => $input ) {
-			$this->assertEquals( $expected[ $key ], balanceTags( $inputs[ $key ], true ) );
+			$this->assertSame( $expected[ $key ], balanceTags( $inputs[ $key ], true ) );
 		}
 	}
 
@@ -247,7 +247,7 @@ class Tests_Formatting_BalanceTags extends WP_UnitTestCase {
 		);
 
 		foreach ( $inputs as $key => $input ) {
-			$this->assertEquals( $expected[ $key ], balanceTags( $inputs[ $key ], true ) );
+			$this->assertSame( $expected[ $key ], balanceTags( $inputs[ $key ], true ) );
 		}
 	}
 
@@ -260,7 +260,7 @@ class Tests_Formatting_BalanceTags extends WP_UnitTestCase {
 		);
 
 		foreach ( $inputs as $key => $input ) {
-			$this->assertEquals( $inputs[ $key ], balanceTags( $inputs[ $key ], true ) );
+			$this->assertSame( $inputs[ $key ], balanceTags( $inputs[ $key ], true ) );
 		}
 	}
 
@@ -280,7 +280,7 @@ class Tests_Formatting_BalanceTags extends WP_UnitTestCase {
 		);
 
 		foreach ( $inputs as $key => $input ) {
-			$this->assertEquals( $expected[ $key ], balanceTags( $inputs[ $key ], true ) );
+			$this->assertSame( $expected[ $key ], balanceTags( $inputs[ $key ], true ) );
 		}
 	}
 
@@ -294,7 +294,7 @@ class Tests_Formatting_BalanceTags extends WP_UnitTestCase {
 		);
 
 		foreach ( $inputs as $key => $input ) {
-			$this->assertEquals( $inputs[ $key ], balanceTags( $inputs[ $key ], true ) );
+			$this->assertSame( $inputs[ $key ], balanceTags( $inputs[ $key ], true ) );
 		}
 	}
 
@@ -303,7 +303,7 @@ class Tests_Formatting_BalanceTags extends WP_UnitTestCase {
 	 */
 	function test_allows_immediately_nested_object_tags() {
 		$object = '<object id="obj1"><param name="param1"/><object id="obj2"><param name="param2"/></object></object>';
-		$this->assertEquals( $object, balanceTags( $object, true ) );
+		$this->assertSame( $object, balanceTags( $object, true ) );
 	}
 
 	function test_balances_nested_non_nestable_tags() {
@@ -317,7 +317,7 @@ class Tests_Formatting_BalanceTags extends WP_UnitTestCase {
 		);
 
 		foreach ( $inputs as $key => $input ) {
-			$this->assertEquals( $expected[ $key ], balanceTags( $inputs[ $key ], true ) );
+			$this->assertSame( $expected[ $key ], balanceTags( $inputs[ $key ], true ) );
 		}
 	}
 
@@ -332,7 +332,7 @@ class Tests_Formatting_BalanceTags extends WP_UnitTestCase {
 		);
 
 		foreach ( $inputs as $key => $input ) {
-			$this->assertEquals( $expected[ $key ], balanceTags( $inputs[ $key ], true ) );
+			$this->assertSame( $expected[ $key ], balanceTags( $inputs[ $key ], true ) );
 		}
 	}
 
@@ -353,7 +353,7 @@ class Tests_Formatting_BalanceTags extends WP_UnitTestCase {
 		);
 
 		foreach ( $inputs as $key => $input ) {
-			$this->assertEquals( $expected[ $key ], balanceTags( $inputs[ $key ], true ) );
+			$this->assertSame( $expected[ $key ], balanceTags( $inputs[ $key ], true ) );
 		}
 	}
 
@@ -372,7 +372,7 @@ class Tests_Formatting_BalanceTags extends WP_UnitTestCase {
 		);
 
 		foreach ( $inputs as $key => $input ) {
-			$this->assertEquals( $expected[ $key ], balanceTags( $inputs[ $key ], true ) );
+			$this->assertSame( $expected[ $key ], balanceTags( $inputs[ $key ], true ) );
 		}
 	}
 
@@ -438,6 +438,6 @@ class Tests_Formatting_BalanceTags extends WP_UnitTestCase {
 	 * @param string $expected Expected.
 	 */
 	public function test_custom_elements( $source, $expected ) {
-		$this->assertEquals( $expected, balanceTags( $source, true ) );
+		$this->assertSame( $expected, balanceTags( $source, true ) );
 	}
 }
diff --git a/tests/formatting/date.php b/tests/formatting/date.php
index fce5494f87..9b540929e0 100644
--- a/tests/formatting/date.php
+++ b/tests/formatting/date.php
@@ -15,7 +15,7 @@ class Tests_Formatting_Date extends WP_UnitTestCase {
 		update_option( 'timezone_string', 'Europe/London' );
 		$local = '2012-01-01 12:34:56';
 		$gmt   = $local;
-		$this->assertEquals( $local, get_date_from_gmt( $gmt ) );
+		$this->assertSame( $local, get_date_from_gmt( $gmt ) );
 	}
 
 	/**
@@ -27,7 +27,7 @@ class Tests_Formatting_Date extends WP_UnitTestCase {
 		update_option( 'timezone_string', 'Europe/London' );
 		$gmt   = '2012-06-01 12:34:56';
 		$local = '2012-06-01 13:34:56';
-		$this->assertEquals( $local, get_date_from_gmt( $gmt ) );
+		$this->assertSame( $local, get_date_from_gmt( $gmt ) );
 	}
 
 	/**
@@ -37,7 +37,7 @@ class Tests_Formatting_Date extends WP_UnitTestCase {
 		update_option( 'timezone_string', 'Europe/London' );
 		$local = '2012-01-01 12:34:56';
 		$gmt   = $local;
-		$this->assertEquals( $gmt, get_gmt_from_date( $local ) );
+		$this->assertSame( $gmt, get_gmt_from_date( $local ) );
 	}
 
 	/**
@@ -47,7 +47,7 @@ class Tests_Formatting_Date extends WP_UnitTestCase {
 		update_option( 'timezone_string', 'Europe/London' );
 		$local = '2012-06-01 12:34:56';
 		$gmt   = '2012-06-01 11:34:56';
-		$this->assertEquals( $gmt, get_gmt_from_date( $local ) );
+		$this->assertSame( $gmt, get_gmt_from_date( $local ) );
 	}
 
 	/**
@@ -56,7 +56,7 @@ class Tests_Formatting_Date extends WP_UnitTestCase {
 	function test_get_date_and_time_from_gmt_no_timezone() {
 		$local = '2012-01-01 12:34:56';
 		$gmt   = $local;
-		$this->assertEquals( $gmt, get_date_from_gmt( $local ) );
+		$this->assertSame( $gmt, get_date_from_gmt( $local ) );
 	}
 
 	/**
@@ -65,7 +65,7 @@ class Tests_Formatting_Date extends WP_UnitTestCase {
 	function test_get_gmt_from_date_no_timezone() {
 		$gmt  = '2012-12-01 00:00:00';
 		$date = '2012-12-01';
-		$this->assertEquals( $gmt, get_gmt_from_date( $date ) );
+		$this->assertSame( $gmt, get_gmt_from_date( $date ) );
 	}
 
 	/**
@@ -75,7 +75,7 @@ class Tests_Formatting_Date extends WP_UnitTestCase {
 		update_option( 'timezone_string', 'Europe/London' );
 		$local = '2012-12-01';
 		$gmt   = '2012-12-01 00:00:00';
-		$this->assertEquals( $gmt, get_gmt_from_date( $local ) );
+		$this->assertSame( $gmt, get_gmt_from_date( $local ) );
 	}
 
 	/**
@@ -85,7 +85,7 @@ class Tests_Formatting_Date extends WP_UnitTestCase {
 		update_option( 'timezone_string', 'Europe/London' );
 		$local = 'now';
 		$gmt   = gmdate( 'Y-m-d H:i:s' );
-		$this->assertEquals( strtotime( $gmt ), strtotime( get_gmt_from_date( $local ) ), 'The dates should be equal', 2 );
+		$this->assertEqualsWithDelta( strtotime( $gmt ), strtotime( get_gmt_from_date( $local ) ), 2, 'The dates should be equal' );
 	}
 
 	/**
@@ -94,7 +94,7 @@ class Tests_Formatting_Date extends WP_UnitTestCase {
 	function test_get_gmt_from_date_string_date_no_timezone() {
 		$local = 'now';
 		$gmt   = gmdate( 'Y-m-d H:i:s' );
-		$this->assertEquals( strtotime( $gmt ), strtotime( get_gmt_from_date( $local ) ), 'The dates should be equal', 2 );
+		$this->assertEqualsWithDelta( strtotime( $gmt ), strtotime( get_gmt_from_date( $local ) ), 2, 'The dates should be equal' );
 	}
 
 	/**
@@ -110,7 +110,7 @@ class Tests_Formatting_Date extends WP_UnitTestCase {
 		$utc         = $local->setTimezone( new DateTimeZone( 'UTC' ) );
 		$mysql_local = $local->format( 'Y-m-d H:i:s' );
 
-		$this->assertEquals( $utc->format( DATE_RFC3339 ), get_gmt_from_date( $mysql_local, DATE_RFC3339 ) );
+		$this->assertSame( $utc->format( DATE_RFC3339 ), get_gmt_from_date( $mysql_local, DATE_RFC3339 ) );
 	}
 
 	/**
@@ -126,7 +126,7 @@ class Tests_Formatting_Date extends WP_UnitTestCase {
 		$utc       = $local->setTimezone( new DateTimeZone( 'UTC' ) );
 		$mysql_utc = $utc->format( 'Y-m-d H:i:s' );
 
-		$this->assertEquals( $local->format( DATE_RFC3339 ), get_date_from_gmt( $mysql_utc, DATE_RFC3339 ) );
+		$this->assertSame( $local->format( DATE_RFC3339 ), get_date_from_gmt( $mysql_utc, DATE_RFC3339 ) );
 	}
 
 	/**
@@ -144,45 +144,45 @@ class Tests_Formatting_Date extends WP_UnitTestCase {
 		$local = new DateTimeImmutable( 'now', wp_timezone() );
 		$utc   = $local->setTimezone( new DateTimeZone( 'UTC' ) );
 
-		$this->assertEquals(
+		$this->assertSame(
 			$local->format( 'Y-m-d H:i:s' ),
 			iso8601_to_datetime( $local->format( $format ) ),
 			'Local time from local time.'
 		);
-		$this->assertEquals(
+		$this->assertSame(
 			$utc->format( 'Y-m-d H:i:s' ),
 			iso8601_to_datetime( $local->format( $format ), 'gmt' ),
 			'UTC time from local time.'
 		);
 
-		$this->assertEquals(
+		$this->assertSame(
 			$local->format( 'Y-m-d H:i:s' ),
 			iso8601_to_datetime( $local->format( $format_no_tz ) ),
 			'Local time from local time w/o timezone.'
 		);
-		$this->assertEquals(
+		$this->assertSame(
 			$utc->format( 'Y-m-d H:i:s' ),
 			iso8601_to_datetime( $local->format( $format_no_tz ), 'gmt' ),
 			'UTC time from local time w/o timezone.'
 		);
 
-		$this->assertEquals(
+		$this->assertSame(
 			$local->format( 'Y-m-d H:i:s' ),
 			iso8601_to_datetime( $utc->format( $format ) ),
 			'Local time from UTC time.'
 		);
-		$this->assertEquals(
+		$this->assertSame(
 			$utc->format( 'Y-m-d H:i:s' ),
 			iso8601_to_datetime( $utc->format( $format ), 'gmt' ),
 			'UTC time from UTC time.'
 		);
 
-		$this->assertEquals(
+		$this->assertSame(
 			$local->format( 'Y-m-d H:i:s' ),
 			iso8601_to_datetime( $utc->format( $format_no_tz ) . 'Z' ),
 			'Local time from UTC w/ Z timezone.'
 		);
-		$this->assertEquals(
+		$this->assertSame(
 			$utc->format( 'Y-m-d H:i:s' ),
 			iso8601_to_datetime( $utc->format( $format_no_tz ) . 'Z', 'gmt' ),
 			'UTC time from UTC w/ Z timezone.'
diff --git a/tests/formatting/ent2ncr.php b/tests/formatting/ent2ncr.php
index 4368246a97..ba84e6d2e0 100644
--- a/tests/formatting/ent2ncr.php
+++ b/tests/formatting/ent2ncr.php
@@ -10,7 +10,7 @@ class Tests_Formatting_Ent2NCR extends WP_UnitTestCase {
 	function test_converts_named_entities_to_numeric_character_references( $entity, $ncr ) {
 		$entity = '&' . $entity . ';';
 		$ncr    = '&#' . $ncr . ';';
-		$this->assertEquals( $ncr, ent2ncr( $entity ), $entity );
+		$this->assertSame( $ncr, ent2ncr( $entity ), $entity );
 	}
 
 	/**
@@ -21,7 +21,7 @@ class Tests_Formatting_Ent2NCR extends WP_UnitTestCase {
 		$entities      = file( DIR_TESTDATA . '/formatting/entities.txt' );
 		$data_provided = array();
 		foreach ( $entities as $line ) {
-			// comment
+			// Comment.
 			$commentpos = strpos( $line, '###' );
 			if ( false !== $commentpos ) {
 				$line = trim( substr( $line, 0, $commentpos ) );
diff --git a/tests/formatting/isoDescrambler.php b/tests/formatting/isoDescrambler.php
index 32a717b948..c1133c4bcf 100644
--- a/tests/formatting/isoDescrambler.php
+++ b/tests/formatting/isoDescrambler.php
@@ -9,6 +9,6 @@ class Test_WP_ISO_Descrambler extends WP_UnitTestCase {
 	 * =?iso-8859-1?q?this=20is=20some=20text?=
 	*/
 	function test_decodes_iso_8859_1_rfc2047_q_encoding() {
-		$this->assertEquals( 'this is some text', wp_iso_descrambler( '=?iso-8859-1?q?this=20is=20some=20text?=' ) );
+		$this->assertSame( 'this is some text', wp_iso_descrambler( '=?iso-8859-1?q?this=20is=20some=20text?=' ) );
 	}
 }
diff --git a/tests/formatting/redirect.php b/tests/formatting/redirect.php
index df69d8470f..93aaee3d5f 100644
--- a/tests/formatting/redirect.php
+++ b/tests/formatting/redirect.php
@@ -20,35 +20,60 @@ class Tests_Formatting_Redirect extends WP_UnitTestCase {
 		return 'http://example.com/';
 	}
 
+	/**
+	 * @ticket 44317
+	 *
+	 * @dataProvider get_bad_status_codes
+	 * @expectedException WPDieException
+	 *
+	 * @param string $location The path or URL to redirect to.
+	 * @param int    $status   HTTP response status code to use.
+	 */
+	public function test_wp_redirect_bad_status_code( $location, $status ) {
+		wp_redirect( $location, $status );
+	}
+
+	public function get_bad_status_codes() {
+		return array(
+			// Tests for bad arguments.
+			array( '/wp-admin', 404 ),
+			array( '/wp-admin', 410 ),
+			array( '/wp-admin', 500 ),
+			// Tests for condition.
+			array( '/wp-admin', 299 ),
+			array( '/wp-admin', 400 ),
+		);
+	}
+
 	function test_wp_sanitize_redirect() {
-		$this->assertEquals( 'http://example.com/watchthelinefeedgo', wp_sanitize_redirect( 'http://example.com/watchthelinefeed%0Ago' ) );
-		$this->assertEquals( 'http://example.com/watchthelinefeedgo', wp_sanitize_redirect( 'http://example.com/watchthelinefeed%0ago' ) );
-		$this->assertEquals( 'http://example.com/watchthecarriagereturngo', wp_sanitize_redirect( 'http://example.com/watchthecarriagereturn%0Dgo' ) );
-		$this->assertEquals( 'http://example.com/watchthecarriagereturngo', wp_sanitize_redirect( 'http://example.com/watchthecarriagereturn%0dgo' ) );
-		$this->assertEquals( 'http://example.com/watchtheallowedcharacters-~+_.?#=&;,/:%!*stay', wp_sanitize_redirect( 'http://example.com/watchtheallowedcharacters-~+_.?#=&;,/:%!*stay' ) );
-		$this->assertEquals( 'http://example.com/watchtheutf8convert%F0%9D%8C%86', wp_sanitize_redirect( "http://example.com/watchtheutf8convert\xf0\x9d\x8c\x86" ) );
-		//Nesting checks
-		$this->assertEquals( 'http://example.com/watchthecarriagereturngo', wp_sanitize_redirect( 'http://example.com/watchthecarriagereturn%0%0ddgo' ) );
-		$this->assertEquals( 'http://example.com/watchthecarriagereturngo', wp_sanitize_redirect( 'http://example.com/watchthecarriagereturn%0%0DDgo' ) );
-		$this->assertEquals( 'http://example.com/whyisthisintheurl/?param[1]=foo', wp_sanitize_redirect( 'http://example.com/whyisthisintheurl/?param[1]=foo' ) );
-		$this->assertEquals( 'http://[2606:2800:220:6d:26bf:1447:aa7]/', wp_sanitize_redirect( 'http://[2606:2800:220:6d:26bf:1447:aa7]/' ) );
-		$this->assertEquals( 'http://example.com/search.php?search=(amistillhere)', wp_sanitize_redirect( 'http://example.com/search.php?search=(amistillhere)' ) );
-		$this->assertEquals( 'http://example.com/@username', wp_sanitize_redirect( 'http://example.com/@username' ) );
+		$this->assertSame( 'http://example.com/watchthelinefeedgo', wp_sanitize_redirect( 'http://example.com/watchthelinefeed%0Ago' ) );
+		$this->assertSame( 'http://example.com/watchthelinefeedgo', wp_sanitize_redirect( 'http://example.com/watchthelinefeed%0ago' ) );
+		$this->assertSame( 'http://example.com/watchthecarriagereturngo', wp_sanitize_redirect( 'http://example.com/watchthecarriagereturn%0Dgo' ) );
+		$this->assertSame( 'http://example.com/watchthecarriagereturngo', wp_sanitize_redirect( 'http://example.com/watchthecarriagereturn%0dgo' ) );
+		$this->assertSame( 'http://example.com/watchtheallowedcharacters-~+_.?#=&;,/:%!*stay', wp_sanitize_redirect( 'http://example.com/watchtheallowedcharacters-~+_.?#=&;,/:%!*stay' ) );
+		$this->assertSame( 'http://example.com/watchtheutf8convert%F0%9D%8C%86', wp_sanitize_redirect( "http://example.com/watchtheutf8convert\xf0\x9d\x8c\x86" ) );
+		// Nesting checks.
+		$this->assertSame( 'http://example.com/watchthecarriagereturngo', wp_sanitize_redirect( 'http://example.com/watchthecarriagereturn%0%0ddgo' ) );
+		$this->assertSame( 'http://example.com/watchthecarriagereturngo', wp_sanitize_redirect( 'http://example.com/watchthecarriagereturn%0%0DDgo' ) );
+		$this->assertSame( 'http://example.com/whyisthisintheurl/?param[1]=foo', wp_sanitize_redirect( 'http://example.com/whyisthisintheurl/?param[1]=foo' ) );
+		$this->assertSame( 'http://[2606:2800:220:6d:26bf:1447:aa7]/', wp_sanitize_redirect( 'http://[2606:2800:220:6d:26bf:1447:aa7]/' ) );
+		$this->assertSame( 'http://example.com/search.php?search=(amistillhere)', wp_sanitize_redirect( 'http://example.com/search.php?search=(amistillhere)' ) );
+		$this->assertSame( 'http://example.com/@username', wp_sanitize_redirect( 'http://example.com/@username' ) );
 	}
 
 	/**
 	 * @group 36998
 	 */
 	function test_wp_sanitize_redirect_should_encode_spaces() {
-		$this->assertEquals( 'http://example.com/test%20spaces', wp_sanitize_redirect( 'http://example.com/test%20spaces' ) );
-		$this->assertEquals( 'http://example.com/test%20spaces%20in%20url', wp_sanitize_redirect( 'http://example.com/test spaces in url' ) );
+		$this->assertSame( 'http://example.com/test%20spaces', wp_sanitize_redirect( 'http://example.com/test%20spaces' ) );
+		$this->assertSame( 'http://example.com/test%20spaces%20in%20url', wp_sanitize_redirect( 'http://example.com/test spaces in url' ) );
 	}
 
 	/**
 	 * @dataProvider valid_url_provider
 	 */
 	function test_wp_validate_redirect_valid_url( $url, $expected ) {
-		$this->assertEquals( $expected, wp_validate_redirect( $url ) );
+		$this->assertSame( $expected, wp_validate_redirect( $url ) );
 	}
 
 	/**
@@ -76,23 +101,23 @@ class Tests_Formatting_Redirect extends WP_UnitTestCase {
 
 	function invalid_url_provider() {
 		return array(
-			// parse_url() fails
+			// parse_url() fails.
 			array( '' ),
 			array( 'http://:' ),
 
-			// non-safelisted domain
+			// Non-safelisted domain.
 			array( 'http://non-safelisted.example/' ),
 
-			// non-safelisted domain (leading whitespace)
+			// Non-safelisted domain (leading whitespace).
 			array( " \t\n\r\0\x08\x0Bhttp://non-safelisted.example.com" ),
 			array( " \t\n\r\0\x08\x0B//non-safelisted.example.com" ),
 
-			// unsupported schemes
+			// Unsupported schemes.
 			array( 'data:text/plain;charset=utf-8,Hello%20World!' ),
 			array( 'file:///etc/passwd' ),
 			array( 'ftp://example.com/' ),
 
-			// malformed input
+			// Malformed input.
 			array( 'http:example.com' ),
 			array( 'http:80' ),
 			array( 'http://example.com:1234:5678/' ),
@@ -158,7 +183,7 @@ class Tests_Formatting_Redirect extends WP_UnitTestCase {
 		// Set the global to current URI.
 		$_SERVER['REQUEST_URI'] = $current_uri;
 
-		$this->assertEquals( $expected, wp_validate_redirect( $url, false ) );
+		$this->assertSame( $expected, wp_validate_redirect( $url, false ) );
 
 		// Delete or reset the global as required.
 		if ( $unset ) {
diff --git a/tests/functions.php b/tests/functions.php
index dd29c779e5..6099901aed 100644
--- a/tests/functions.php
+++ b/tests/functions.php
@@ -9,7 +9,7 @@ class Tests_Functions extends WP_UnitTestCase {
 		$x->_baba = 5;
 		$x->yZ    = 'baba'; // phpcs:ignore WordPress.NamingConventions.ValidVariableName.UsedPropertyNotSnakeCase
 		$x->a     = array( 5, 111, 'x' );
-		$this->assertEquals(
+		$this->assertSame(
 			array(
 				'_baba' => 5,
 				'yZ'    => 'baba',
@@ -18,19 +18,19 @@ class Tests_Functions extends WP_UnitTestCase {
 			wp_parse_args( $x )
 		);
 		$y = new MockClass;
-		$this->assertEquals( array(), wp_parse_args( $y ) );
+		$this->assertSame( array(), wp_parse_args( $y ) );
 	}
 
 	function test_wp_parse_args_array() {
-		// arrays
+		// Arrays.
 		$a = array();
-		$this->assertEquals( array(), wp_parse_args( $a ) );
+		$this->assertSame( array(), wp_parse_args( $a ) );
 		$b = array(
 			'_baba' => 5,
 			'yZ'    => 'baba',
 			'a'     => array( 5, 111, 'x' ),
 		);
-		$this->assertEquals(
+		$this->assertSame(
 			array(
 				'_baba' => 5,
 				'yZ'    => 'baba',
@@ -46,7 +46,7 @@ class Tests_Functions extends WP_UnitTestCase {
 		$x->yZ    = 'baba'; // phpcs:ignore WordPress.NamingConventions.ValidVariableName.UsedPropertyNotSnakeCase
 		$x->a     = array( 5, 111, 'x' );
 		$d        = array( 'pu' => 'bu' );
-		$this->assertEquals(
+		$this->assertSame(
 			array(
 				'pu'    => 'bu',
 				'_baba' => 5,
@@ -56,7 +56,7 @@ class Tests_Functions extends WP_UnitTestCase {
 			wp_parse_args( $x, $d )
 		);
 		$e = array( '_baba' => 6 );
-		$this->assertEquals(
+		$this->assertSame(
 			array(
 				'_baba' => 5,
 				'yZ'    => 'baba',
@@ -69,10 +69,10 @@ class Tests_Functions extends WP_UnitTestCase {
 	function test_wp_parse_args_other() {
 		$b = true;
 		wp_parse_str( $b, $s );
-		$this->assertEquals( $s, wp_parse_args( $b ) );
+		$this->assertSame( $s, wp_parse_args( $b ) );
 		$q = 'x=5&_baba=dudu&';
 		wp_parse_str( $q, $ss );
-		$this->assertEquals( $ss, wp_parse_args( $q ) );
+		$this->assertSame( $ss, wp_parse_args( $q ) );
 	}
 
 	/**
@@ -136,26 +136,27 @@ class Tests_Functions extends WP_UnitTestCase {
 	 * @dataProvider data_wp_normalize_path
 	 */
 	function test_wp_normalize_path( $path, $expected ) {
-		$this->assertEquals( $expected, wp_normalize_path( $path ) );
+		$this->assertSame( $expected, wp_normalize_path( $path ) );
 	}
+
 	function data_wp_normalize_path() {
 		return array(
-			// Windows paths
+			// Windows paths.
 			array( 'C:\\www\\path\\', 'C:/www/path/' ),
 			array( 'C:\\www\\\\path\\', 'C:/www/path/' ),
 			array( 'c:/www/path', 'C:/www/path' ),
-			array( 'c:\\www\\path\\', 'C:/www/path/' ), // uppercase drive letter
+			array( 'c:\\www\\path\\', 'C:/www/path/' ), // Uppercase drive letter.
 			array( 'c:\\\\www\\path\\', 'C:/www/path/' ),
 			array( '\\\\Domain\\DFSRoots\\share\\path\\', '//Domain/DFSRoots/share/path/' ),
 			array( '\\\\Server\\share\\path', '//Server/share/path' ),
 			array( '\\\\Server\\share', '//Server/share' ),
 
-			// Linux paths
+			// Linux paths.
 			array( '/www/path/', '/www/path/' ),
 			array( '/www/path/////', '/www/path/' ),
 			array( '/www/path', '/www/path' ),
 
-			// PHP Stream wrappers
+			// PHP stream wrappers.
 			array( 'php://input', 'php://input' ),
 			array( 'http://example.com//path.ext', 'http://example.com/path.ext' ),
 			array( 'file://c:\\www\\path\\', 'file://C:/www/path/' ),
@@ -166,81 +167,173 @@ class Tests_Functions extends WP_UnitTestCase {
 
 		$testdir = DIR_TESTDATA . '/images/';
 
-		// sanity check
-		$this->assertEquals( 'abcdefg.png', wp_unique_filename( $testdir, 'abcdefg.png' ), 'Sanitiy check failed' );
+		// Sanity check.
+		$this->assertSame( 'abcdefg.png', wp_unique_filename( $testdir, 'abcdefg.png' ), 'Sanitiy check failed' );
 
-		// check number is appended for file already exists
+		// Check number is appended for file already exists.
 		$this->assertFileExists( $testdir . 'test-image.png', 'Test image does not exist' );
-		$this->assertEquals( 'test-image-1.png', wp_unique_filename( $testdir, 'test-image.png' ), 'Number not appended correctly' );
+		$this->assertSame( 'test-image-1.png', wp_unique_filename( $testdir, 'test-image.png' ), 'Number not appended correctly' );
 		$this->assertFileNotExists( $testdir . 'test-image-1.png' );
 
-		// check special chars
-		$this->assertEquals( 'testt√©st-imag√©.png', wp_unique_filename( $testdir, 'testt√©st-imag√©.png' ), 'Filename with special chars failed' );
+		// Check special chars.
+		$this->assertSame( 'testtest-image.png', wp_unique_filename( $testdir, 'testt√©st-imag√©.png' ), 'Filename with special chars failed' );
+
+		// Check special chars with potential conflicting name.
+		$this->assertSame( 'test-image-1.png', wp_unique_filename( $testdir, 't√©st-imag√©.png' ), 'Filename with special chars failed' );
+
+		// Check with single quotes in name (somehow).
+		$this->assertSame( 'abcdefgh.png', wp_unique_filename( $testdir, "abcdefg'h.png" ), 'File with quote failed' );
+
+		// Check with double quotes in name (somehow).
+		$this->assertSame( 'abcdefgh.png', wp_unique_filename( $testdir, 'abcdefg"h.png' ), 'File with quote failed' );
+
+		// Test crazy name (useful for regression tests).
+		$this->assertSame( '12af34567890@..^_qwerty-fghjkl-zx.png', wp_unique_filename( $testdir, '12%af34567890#~!@#$..%^&*()|_+qwerty  fgh`jkl zx<>?:"{}[]="\'/?.png' ), 'Failed crazy file name' );
+
+		// Test slashes in names.
+		$this->assertSame( 'abcdefg.png', wp_unique_filename( $testdir, 'abcde\fg.png' ), 'Slash not removed' );
+		$this->assertSame( 'abcdefg.png', wp_unique_filename( $testdir, 'abcde\\fg.png' ), 'Double slashed not removed' );
+		$this->assertSame( 'abcdefg.png', wp_unique_filename( $testdir, 'abcde\\\fg.png' ), 'Tripple slashed not removed' );
+	}
+
+	/**
+	 * @ticket 42437
+	 */
+	function test_unique_filename_with_dimension_like_filename() {
+		$testdir = DIR_TESTDATA . '/images/';
+
+		add_filter( 'upload_dir', array( $this, 'upload_dir_patch_basedir' ) );
+
+		// Test collision with "dimension-like" original filename.
+		$this->assertSame( 'one-blue-pixel-100x100-1.png', wp_unique_filename( $testdir, 'one-blue-pixel-100x100.png' ) );
+		// Test collision with existing sub-size filename.
+		// Existing files: one-blue-pixel-100x100.png, one-blue-pixel-1-100x100.png.
+		$this->assertSame( 'one-blue-pixel-2.png', wp_unique_filename( $testdir, 'one-blue-pixel.png' ) );
+		// Same as above with upper case extension.
+		$this->assertSame( 'one-blue-pixel-2.png', wp_unique_filename( $testdir, 'one-blue-pixel.PNG' ) );
+
+		remove_filter( 'upload_dir', array( $this, 'upload_dir_patch_basedir' ) );
+	}
+
+	// Callback to patch "basedir" when used in `wp_unique_filename()`.
+	function upload_dir_patch_basedir( $upload_dir ) {
+		$upload_dir['basedir'] = DIR_TESTDATA . '/images/';
+		return $upload_dir;
+	}
 
-		// check special chars with potential conflicting name
-		$this->assertEquals( 't√©st-imag√©.png', wp_unique_filename( $testdir, 't√©st-imag√©.png' ), 'Filename with special chars failed' );
+	/**
+	 * @dataProvider data_is_not_serialized
+	 */
+	function test_maybe_serialize( $value ) {
+		if ( is_array( $value ) || is_object( $value ) ) {
+			$expected = serialize( $value );
+		} else {
+			$expected = $value;
+		}
 
-		// check with single quotes in name (somehow)
-		$this->assertEquals( 'abcdefgh.png', wp_unique_filename( $testdir, "abcdefg'h.png" ), 'File with quote failed' );
+		$this->assertSame( $expected, maybe_serialize( $value ) );
+	}
 
-		// check with single quotes in name (somehow)
-		$this->assertEquals( 'abcdefgh.png', wp_unique_filename( $testdir, 'abcdefg"h.png' ), 'File with quote failed' );
+	/**
+	 * @dataProvider data_is_serialized
+	 */
+	function test_maybe_serialize_with_double_serialization( $value ) {
+		$expected = serialize( $value );
 
-		// test crazy name (useful for regression tests)
-		$this->assertEquals( '12af34567890@..^_qwerty-fghjkl-zx.png', wp_unique_filename( $testdir, '12%af34567890#~!@#$..%^&*()|_+qwerty  fgh`jkl zx<>?:"{}[]="\'/?.png' ), 'Failed crazy file name' );
+		$this->assertSame( $expected, maybe_serialize( $value ) );
+	}
 
-		// test slashes in names
-		$this->assertEquals( 'abcdefg.png', wp_unique_filename( $testdir, 'abcde\fg.png' ), 'Slash not removed' );
-		$this->assertEquals( 'abcdefg.png', wp_unique_filename( $testdir, 'abcde\\fg.png' ), 'Double slashed not removed' );
-		$this->assertEquals( 'abcdefg.png', wp_unique_filename( $testdir, 'abcde\\\fg.png' ), 'Tripple slashed not removed' );
+	/**
+	 * @dataProvider data_is_serialized
+	 * @dataProvider data_is_not_serialized
+	 */
+	function test_maybe_unserialize( $value, $is_serialized ) {
+		if ( $is_serialized ) {
+			$expected = unserialize( trim( $value ) );
+		} else {
+			$expected = $value;
+		}
+
+		if ( is_object( $expected ) ) {
+			$this->assertEquals( $expected, maybe_unserialize( $value ) );
+		} else {
+			$this->assertSame( $expected, maybe_unserialize( $value ) );
+		}
 	}
 
-	function test_is_serialized() {
-		$cases = array(
-			serialize( null ),
-			serialize( true ),
-			serialize( false ),
-			serialize( -25 ),
-			serialize( 25 ),
-			serialize( 1.1 ),
-			serialize( 'this string will be serialized' ),
-			serialize( "a\nb" ),
-			serialize( array() ),
-			serialize( array( 1, 1, 2, 3, 5, 8, 13 ) ),
-			serialize(
+	/**
+	 * @dataProvider data_is_serialized
+	 * @dataProvider data_is_not_serialized
+	 */
+	function test_is_serialized( $value, $expected ) {
+		$this->assertSame( $expected, is_serialized( $value ) );
+	}
+
+	function data_is_serialized() {
+		return array(
+			array( serialize( null ), true ),
+			array( serialize( true ), true ),
+			array( serialize( false ), true ),
+			array( serialize( -25 ), true ),
+			array( serialize( 25 ), true ),
+			array( serialize( 1.1 ), true ),
+			array( serialize( 'this string will be serialized' ), true ),
+			array( serialize( "a\nb" ), true ),
+			array( serialize( array() ), true ),
+			array( serialize( array( 1, 1, 2, 3, 5, 8, 13 ) ), true ),
+			array(
+				serialize(
+					(object) array(
+						'test' => true,
+						'3',
+						4,
+					)
+				),
+				true,
+			),
+			array( '   s:25:"this string is serialized";   ', true ),
+		);
+	}
+
+	function data_is_not_serialized() {
+		return array(
+			array( null, false ),
+			array( true, false ),
+			array( false, false ),
+			array( -25, false ),
+			array( 25, false ),
+			array( 1.1, false ),
+			array( 'this string will be serialized', false ),
+			array( "a\nb", false ),
+			array( array(), false ),
+			array( array( 1, 1, 2, 3, 5, 8, 13 ), false ),
+			array(
 				(object) array(
 					'test' => true,
 					'3',
 					4,
-				)
+				),
+				false,
 			),
+			array( 'a string', false ),
+			array( 'garbage:a:0:garbage;', false ),
+			array( 's:4:test;', false ),
 		);
-		foreach ( $cases as $case ) {
-			$this->assertTrue( is_serialized( $case ), "Serialized data: $case" );
-		}
-
-		$not_serialized = array(
-			'a string',
-			'garbage:a:0:garbage;',
-			's:4:test;',
-		);
-		foreach ( $not_serialized as $case ) {
-			$this->assertFalse( is_serialized( $case ), "Test data: $case" );
-		}
 	}
 
 	/**
 	 * @ticket 46570
+	 * @dataProvider data_is_serialized_should_return_true_for_large_floats
 	 */
-	function test_is_serialized_should_return_true_for_large_floats() {
-		$cases = array(
-			serialize( 1.7976931348623157E+308 ),
-			serialize( array( 1.7976931348623157E+308, 1.23e50 ) ),
-		);
+	function test_is_serialized_should_return_true_for_large_floats( $value ) {
+		$this->assertTrue( is_serialized( $value ) );
+	}
 
-		foreach ( $cases as $case ) {
-			$this->assertTrue( is_serialized( $case ), "Serialized data: $case" );
-		}
+	function data_is_serialized_should_return_true_for_large_floats() {
+		return array(
+			array( serialize( 1.7976931348623157E+308 ) ),
+			array( serialize( array( 1.7976931348623157E+308, 1.23e50 ) ) ),
+		);
 	}
 
 	/**
@@ -250,7 +343,6 @@ class Tests_Functions extends WP_UnitTestCase {
 		$this->assertFalse( is_serialized( 'C:16:"Serialized_Class":6:{a:0:{}}' ) );
 	}
 
-
 	/**
 	 * @group add_query_arg
 	 */
@@ -276,9 +368,9 @@ class Tests_Functions extends WP_UnitTestCase {
 		foreach ( $urls as $url ) {
 			$_SERVER['REQUEST_URI'] = 'nothing';
 
-			$this->assertEquals( "$url?foo=1", add_query_arg( 'foo', '1', $url ) );
-			$this->assertEquals( "$url?foo=1", add_query_arg( array( 'foo' => '1' ), $url ) );
-			$this->assertEquals(
+			$this->assertSame( "$url?foo=1", add_query_arg( 'foo', '1', $url ) );
+			$this->assertSame( "$url?foo=1", add_query_arg( array( 'foo' => '1' ), $url ) );
+			$this->assertSame(
 				"$url?foo=2",
 				add_query_arg(
 					array(
@@ -288,7 +380,7 @@ class Tests_Functions extends WP_UnitTestCase {
 					$url
 				)
 			);
-			$this->assertEquals(
+			$this->assertSame(
 				"$url?foo=1&bar=2",
 				add_query_arg(
 					array(
@@ -301,9 +393,9 @@ class Tests_Functions extends WP_UnitTestCase {
 
 			$_SERVER['REQUEST_URI'] = $url;
 
-			$this->assertEquals( "$url?foo=1", add_query_arg( 'foo', '1' ) );
-			$this->assertEquals( "$url?foo=1", add_query_arg( array( 'foo' => '1' ) ) );
-			$this->assertEquals(
+			$this->assertSame( "$url?foo=1", add_query_arg( 'foo', '1' ) );
+			$this->assertSame( "$url?foo=1", add_query_arg( array( 'foo' => '1' ) ) );
+			$this->assertSame(
 				"$url?foo=2",
 				add_query_arg(
 					array(
@@ -312,7 +404,7 @@ class Tests_Functions extends WP_UnitTestCase {
 					)
 				)
 			);
-			$this->assertEquals(
+			$this->assertSame(
 				"$url?foo=1&bar=2",
 				add_query_arg(
 					array(
@@ -327,9 +419,9 @@ class Tests_Functions extends WP_UnitTestCase {
 			$_SERVER['REQUEST_URI'] = 'nothing';
 			$url                    = str_replace( '#frag', '', $frag_url );
 
-			$this->assertEquals( "$url?foo=1#frag", add_query_arg( 'foo', '1', $frag_url ) );
-			$this->assertEquals( "$url?foo=1#frag", add_query_arg( array( 'foo' => '1' ), $frag_url ) );
-			$this->assertEquals(
+			$this->assertSame( "$url?foo=1#frag", add_query_arg( 'foo', '1', $frag_url ) );
+			$this->assertSame( "$url?foo=1#frag", add_query_arg( array( 'foo' => '1' ), $frag_url ) );
+			$this->assertSame(
 				"$url?foo=2#frag",
 				add_query_arg(
 					array(
@@ -339,7 +431,7 @@ class Tests_Functions extends WP_UnitTestCase {
 					$frag_url
 				)
 			);
-			$this->assertEquals(
+			$this->assertSame(
 				"$url?foo=1&bar=2#frag",
 				add_query_arg(
 					array(
@@ -352,9 +444,9 @@ class Tests_Functions extends WP_UnitTestCase {
 
 			$_SERVER['REQUEST_URI'] = $frag_url;
 
-			$this->assertEquals( "$url?foo=1#frag", add_query_arg( 'foo', '1' ) );
-			$this->assertEquals( "$url?foo=1#frag", add_query_arg( array( 'foo' => '1' ) ) );
-			$this->assertEquals(
+			$this->assertSame( "$url?foo=1#frag", add_query_arg( 'foo', '1' ) );
+			$this->assertSame( "$url?foo=1#frag", add_query_arg( array( 'foo' => '1' ) ) );
+			$this->assertSame(
 				"$url?foo=2#frag",
 				add_query_arg(
 					array(
@@ -363,7 +455,7 @@ class Tests_Functions extends WP_UnitTestCase {
 					)
 				)
 			);
-			$this->assertEquals(
+			$this->assertSame(
 				"$url?foo=1&bar=2#frag",
 				add_query_arg(
 					array(
@@ -389,9 +481,9 @@ class Tests_Functions extends WP_UnitTestCase {
 		foreach ( $qs_urls as $url ) {
 			$_SERVER['REQUEST_URI'] = 'nothing';
 
-			$this->assertEquals( "$url&foo=1", add_query_arg( 'foo', '1', $url ) );
-			$this->assertEquals( "$url&foo=1", add_query_arg( array( 'foo' => '1' ), $url ) );
-			$this->assertEquals(
+			$this->assertSame( "$url&foo=1", add_query_arg( 'foo', '1', $url ) );
+			$this->assertSame( "$url&foo=1", add_query_arg( array( 'foo' => '1' ), $url ) );
+			$this->assertSame(
 				"$url&foo=2",
 				add_query_arg(
 					array(
@@ -401,7 +493,7 @@ class Tests_Functions extends WP_UnitTestCase {
 					$url
 				)
 			);
-			$this->assertEquals(
+			$this->assertSame(
 				"$url&foo=1&bar=2",
 				add_query_arg(
 					array(
@@ -414,9 +506,9 @@ class Tests_Functions extends WP_UnitTestCase {
 
 			$_SERVER['REQUEST_URI'] = $url;
 
-			$this->assertEquals( "$url&foo=1", add_query_arg( 'foo', '1' ) );
-			$this->assertEquals( "$url&foo=1", add_query_arg( array( 'foo' => '1' ) ) );
-			$this->assertEquals(
+			$this->assertSame( "$url&foo=1", add_query_arg( 'foo', '1' ) );
+			$this->assertSame( "$url&foo=1", add_query_arg( array( 'foo' => '1' ) ) );
+			$this->assertSame(
 				"$url&foo=2",
 				add_query_arg(
 					array(
@@ -425,7 +517,7 @@ class Tests_Functions extends WP_UnitTestCase {
 					)
 				)
 			);
-			$this->assertEquals(
+			$this->assertSame(
 				"$url&foo=1&bar=2",
 				add_query_arg(
 					array(
@@ -444,7 +536,7 @@ class Tests_Functions extends WP_UnitTestCase {
 	 */
 	function test_add_query_arg_numeric_keys() {
 		$url = add_query_arg( array( 'foo' => 'bar' ), '1=1' );
-		$this->assertEquals( '1=1&foo=bar', $url );
+		$this->assertSame( '1=1&foo=bar', $url );
 
 		$url = add_query_arg(
 			array(
@@ -453,10 +545,10 @@ class Tests_Functions extends WP_UnitTestCase {
 			),
 			'1=1'
 		);
-		$this->assertEquals( '1=2&foo=bar', $url );
+		$this->assertSame( '1=2&foo=bar', $url );
 
 		$url = add_query_arg( array( '1' => '2' ), 'foo=bar' );
-		$this->assertEquals( 'foo=bar&1=2', $url );
+		$this->assertSame( 'foo=bar&1=2', $url );
 	}
 
 	/**
@@ -498,7 +590,7 @@ class Tests_Functions extends WP_UnitTestCase {
 		$this->assertInternalType( 'array', $mimes );
 		$this->assertNotEmpty( $mimes );
 
-		// upload_mimes shouldn't affect wp_get_mime_types()
+		// 'upload_mimes' should not affect wp_get_mime_types().
 		add_filter( 'upload_mimes', '__return_empty_array' );
 		$mimes = wp_get_mime_types();
 		$this->assertInternalType( 'array', $mimes );
@@ -508,7 +600,7 @@ class Tests_Functions extends WP_UnitTestCase {
 		$mimes2 = wp_get_mime_types();
 		$this->assertInternalType( 'array', $mimes2 );
 		$this->assertNotEmpty( $mimes2 );
-		$this->assertEquals( $mimes2, $mimes );
+		$this->assertSame( $mimes2, $mimes );
 	}
 
 	/**
@@ -518,32 +610,32 @@ class Tests_Functions extends WP_UnitTestCase {
 		$orig_blog_charset = get_option( 'blog_charset' );
 
 		update_option( 'blog_charset', 'utf8' );
-		$this->assertEquals( 'UTF-8', get_option( 'blog_charset' ) );
+		$this->assertSame( 'UTF-8', get_option( 'blog_charset' ) );
 
 		update_option( 'blog_charset', 'utf-8' );
-		$this->assertEquals( 'UTF-8', get_option( 'blog_charset' ) );
+		$this->assertSame( 'UTF-8', get_option( 'blog_charset' ) );
 
 		update_option( 'blog_charset', 'UTF8' );
-		$this->assertEquals( 'UTF-8', get_option( 'blog_charset' ) );
+		$this->assertSame( 'UTF-8', get_option( 'blog_charset' ) );
 
 		update_option( 'blog_charset', 'UTF-8' );
-		$this->assertEquals( 'UTF-8', get_option( 'blog_charset' ) );
+		$this->assertSame( 'UTF-8', get_option( 'blog_charset' ) );
 
 		update_option( 'blog_charset', 'ISO-8859-1' );
-		$this->assertEquals( 'ISO-8859-1', get_option( 'blog_charset' ) );
+		$this->assertSame( 'ISO-8859-1', get_option( 'blog_charset' ) );
 
 		update_option( 'blog_charset', 'ISO8859-1' );
-		$this->assertEquals( 'ISO-8859-1', get_option( 'blog_charset' ) );
+		$this->assertSame( 'ISO-8859-1', get_option( 'blog_charset' ) );
 
 		update_option( 'blog_charset', 'iso8859-1' );
-		$this->assertEquals( 'ISO-8859-1', get_option( 'blog_charset' ) );
+		$this->assertSame( 'ISO-8859-1', get_option( 'blog_charset' ) );
 
 		update_option( 'blog_charset', 'iso-8859-1' );
-		$this->assertEquals( 'ISO-8859-1', get_option( 'blog_charset' ) );
+		$this->assertSame( 'ISO-8859-1', get_option( 'blog_charset' ) );
 
 		// Arbitrary strings are passed through.
 		update_option( 'blog_charset', 'foobarbaz' );
-		$this->assertEquals( 'foobarbaz', get_option( 'blog_charset' ) );
+		$this->assertSame( 'foobarbaz', get_option( 'blog_charset' ) );
 
 		update_option( 'blog_charset', $orig_blog_charset );
 	}
@@ -614,52 +706,52 @@ class Tests_Functions extends WP_UnitTestCase {
 		$_SERVER['HTTP_USER_AGENT'] = $user_agent;
 		$actual                     = _device_can_upload();
 		unset( $_SERVER['HTTP_USER_AGENT'] );
-		$this->assertEquals( $expected, $actual );
+		$this->assertSame( $expected, $actual );
 	}
 
 	function data_device_can_upload() {
 		return array(
-			// iPhone iOS 5.0.1, Safari 5.1
+			// iPhone iOS 5.0.1, Safari 5.1.
 			array(
 				'Mozilla/5.0 (iPhone; CPU iPhone OS 5_0_1 like Mac OS X) AppleWebKit/534.46 (KHTML, like Gecko) Mobile/9A406)',
 				false,
 			),
-			// iPad iOS 3.2, Safari 4.0.4
+			// iPad iOS 3.2, Safari 4.0.4.
 			array(
 				'Mozilla/5.0 (iPad; U; CPU OS 3_2 like Mac OS X; en-us) AppleWebKit/531.21.10 (KHTML, like Gecko) Version/4.0.4 Mobile/7B334b Safari/531.21.10',
 				false,
 			),
-			// iPod iOS 4.3.3, Safari 5.0.2
+			// iPod iOS 4.3.3, Safari 5.0.2.
 			array(
 				'Mozilla/5.0 (iPod; U; CPU iPhone OS 4_3_3 like Mac OS X; ja-jp) AppleWebKit/533.17.9 (KHTML, like Gecko) Version/5.0.2 Mobile/8J2 Safari/6533.18.5',
 				false,
 			),
-			// iPhone iOS 6.0.0, Safari 6.0
+			// iPhone iOS 6.0.0, Safari 6.0.
 			array(
 				'Mozilla/5.0 (iPhone; CPU iPhone OS 6_0 like Mac OS X) AppleWebKit/536.26 (KHTML, like Gecko) Version/6.0 Mobile/10A5376e Safari/8536.25',
 				true,
 			),
-			// iPad iOS 6.0.0, Safari 6.0
+			// iPad iOS 6.0.0, Safari 6.0.
 			array(
 				'Mozilla/5.0 (iPad; CPU OS 6_0 like Mac OS X) AppleWebKit/536.26 (KHTML, like Gecko) Version/6.0 Mobile/10A5376e Safari/8536.25',
 				true,
 			),
-			// Android 2.2, Android Webkit Browser
+			// Android 2.2, Android Webkit Browser.
 			array(
 				'Mozilla/5.0 (Android 2.2; Windows; U; Windows NT 6.1; en-US) AppleWebKit/533.19.4 (KHTML, like Gecko) Version/5.0.3 Safari/533.19.4',
 				true,
 			),
-			// BlackBerry 9900, BlackBerry browser
+			// BlackBerry 9900, BlackBerry browser.
 			array(
 				'Mozilla/5.0 (BlackBerry; U; BlackBerry 9900; en) AppleWebKit/534.11+ (KHTML, like Gecko) Version/7.1.0.346 Mobile Safari/534.11+',
 				true,
 			),
-			// Windows Phone 8.0, Internet Explorer 10.0;
+			// Windows Phone 8.0, Internet Explorer 10.0.
 			array(
 				'Mozilla/5.0 (compatible; MSIE 10.0; Windows Phone 8.0; Trident/6.0; IEMobile/10.0; ARM; Touch; NOKIA; Lumia 920)',
 				true,
 			),
-			// Ubuntu desktop, Firefox 41.0
+			// Ubuntu desktop, Firefox 41.0.
 			array(
 				'Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:41.0) Gecko/20100101 Firefox/41.0',
 				true,
@@ -689,10 +781,10 @@ class Tests_Functions extends WP_UnitTestCase {
 			'http://–±—ä–ª–≥–∞—Ä–∏—è.icom.museum',
 			'http://ÿ™ÿ¥ÿßÿØÿ±.icom.museum',
 			'http://‰∏≠ÂõΩ.icom.museum',
-			#'http://ÿßŸÑŸÇŸÖÿ±.icom.museum', // Comoros	http://ÿßŸÑŸÇŸÖÿ±.icom.museum
-			#'http://Œ∫œÖœÄœÅŒøœÇ.icom.museum', Cyprus 	http://Œ∫œÖœÄœÅŒøœÇ.icom.museum
+			// 'http://ÿßŸÑŸÇŸÖÿ±.icom.museum',         // Comoros http://ÿßŸÑŸÇŸÖÿ±.icom.museum
+			// 'http://Œ∫œÖœÄœÅŒøœÇ.icom.museum',        // Cyprus  http://Œ∫œÖœÄœÅŒøœÇ.icom.museum
 			'http://ƒçesk√°republika.icom.museum',
-			#'http://ŸÖÿµÿ±.icom.museum', // Egypt	http://ŸÖÿµÿ±.icom.museum
+			// 'http://ŸÖÿµÿ±.icom.museum',           // Egypt   http://ŸÖÿµÿ±.icom.museum
 			'http://ŒµŒªŒªŒ¨Œ¥Œ±.icom.museum',
 			'http://magyarorsz√°g.icom.museum',
 			'http://√≠sland.icom.museum',
@@ -708,12 +800,12 @@ class Tests_Functions extends WP_UnitTestCase {
 			'http://‡∫•‡∫≤‡∫ß.icom.museum',
 			'http://ŸÑÿ®ŸÜÿßŸÜ.icom.museum',
 			'http://–º–∞–∫–µ–¥–æ–Ω–∏—ò–∞.icom.museum',
-			#'http://ŸÖŸàÿ±Ÿäÿ™ÿßŸÜŸäÿß.icom.museum', // Mauritania	http://ŸÖŸàÿ±Ÿäÿ™ÿßŸÜŸäÿß.icom.museum
+			// 'http://ŸÖŸàÿ±Ÿäÿ™ÿßŸÜŸäÿß.icom.museum',     // Mauritania http://ŸÖŸàÿ±Ÿäÿ™ÿßŸÜŸäÿß.icom.museum
 			'http://m√©xico.icom.museum',
 			'http://–º–æ–Ω–≥–æ–ª—É–ª—Å.icom.museum',
-			#'http://ÿßŸÑŸÖÿ∫ÿ±ÿ®.icom.museum', // Morocco	http://ÿßŸÑŸÖÿ∫ÿ±ÿ®.icom.museum
+			// 'http://ÿßŸÑŸÖÿ∫ÿ±ÿ®.icom.museum',        // Morocco    http://ÿßŸÑŸÖÿ∫ÿ±ÿ®.icom.museum
 			'http://‡§®‡•á‡§™‡§æ‡§≤.icom.museum',
-			#'http://ÿπŸÖÿßŸÜ.icom.museum', // Oman	http://ÿπŸÖÿßŸÜ.icom.museum
+			// 'http://ÿπŸÖÿßŸÜ.icom.museum',          // Oman       http://ÿπŸÖÿßŸÜ.icom.museum
 			'http://ŸÇÿ∑ÿ±.icom.museum',
 			'http://rom√¢nia.icom.museum',
 			'http://—Ä–æ—Å—Å–∏—è.–∏–∫–æ–º.museum',
@@ -796,14 +888,14 @@ class Tests_Functions extends WP_UnitTestCase {
 		$this->assertNotEmpty( $urls );
 		$this->assertInternalType( 'array', $urls );
 		$this->assertCount( count( $original_urls ), $urls );
-		$this->assertEquals( $original_urls, $urls );
+		$this->assertSame( $original_urls, $urls );
 
 		$exploded = array_values( array_filter( array_map( 'trim', explode( "\n", $blob ) ) ) );
-		// wp_extract_urls calls html_entity_decode
+		// wp_extract_urls() calls html_entity_decode().
 		$decoded = array_map( 'html_entity_decode', $exploded );
 
-		$this->assertEquals( $decoded, $urls );
-		$this->assertEquals( $original_urls, $decoded );
+		$this->assertSame( $decoded, $urls );
+		$this->assertSame( $original_urls, $decoded );
 
 		$blob = 'Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor
 			incididunt ut labore http://woo.com/1,2,3,4,5,6/-1-2-3-4-/woo.html et dolore magna aliqua.
@@ -817,7 +909,7 @@ class Tests_Functions extends WP_UnitTestCase {
 		$this->assertNotEmpty( $urls );
 		$this->assertInternalType( 'array', $urls );
 		$this->assertCount( 8, $urls );
-		$this->assertEquals( array_slice( $original_urls, 0, 8 ), $urls );
+		$this->assertSame( array_slice( $original_urls, 0, 8 ), $urls );
 
 		$blob = 'Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor
 			incididunt ut labore <a href="http://woo.com/1,2,3,4,5,6/-1-2-3-4-/woo.html">343462^</a> et dolore magna aliqua.
@@ -831,21 +923,21 @@ class Tests_Functions extends WP_UnitTestCase {
 		$this->assertNotEmpty( $urls );
 		$this->assertInternalType( 'array', $urls );
 		$this->assertCount( 8, $urls );
-		$this->assertEquals( array_slice( $original_urls, 0, 8 ), $urls );
+		$this->assertSame( array_slice( $original_urls, 0, 8 ), $urls );
 	}
 
 	/**
 	 * @ticket 28786
 	 */
 	function test_wp_json_encode() {
-		$this->assertEquals( wp_json_encode( 'a' ), '"a"' );
+		$this->assertSame( wp_json_encode( 'a' ), '"a"' );
 	}
 
 	/**
 	 * @ticket 28786
 	 */
 	function test_wp_json_encode_utf8() {
-		$this->assertEquals( wp_json_encode( 'Ëøô' ), '"\u8fd9"' );
+		$this->assertSame( wp_json_encode( 'Ëøô' ), '"\u8fd9"' );
 	}
 
 	/**
@@ -866,9 +958,9 @@ class Tests_Functions extends WP_UnitTestCase {
 		$eucjp = mb_convert_encoding( 'a„ÅÇb', 'EUC-JP', 'UTF-8' );
 		$utf8  = mb_convert_encoding( $eucjp, 'UTF-8', 'EUC-JP' );
 
-		$this->assertEquals( 'a„ÅÇb', $utf8 );
+		$this->assertSame( 'a„ÅÇb', $utf8 );
 
-		$this->assertEquals( '"a\u3042b"', wp_json_encode( $eucjp ) );
+		$this->assertSame( '"a\u3042b"', wp_json_encode( $eucjp ) );
 
 		mb_detect_order( $old_charsets );
 	}
@@ -891,9 +983,9 @@ class Tests_Functions extends WP_UnitTestCase {
 		$eucjp = mb_convert_encoding( 'a„ÅÇb', 'EUC-JP', 'UTF-8' );
 		$utf8  = mb_convert_encoding( $eucjp, 'UTF-8', 'EUC-JP' );
 
-		$this->assertEquals( 'a„ÅÇb', $utf8 );
+		$this->assertSame( 'a„ÅÇb', $utf8 );
 
-		$this->assertEquals( '["c","a\u3042b"]', wp_json_encode( array( 'c', $eucjp ) ) );
+		$this->assertSame( '["c","a\u3042b"]', wp_json_encode( array( 'c', $eucjp ) ) );
 
 		mb_detect_order( $old_charsets );
 	}
@@ -902,7 +994,7 @@ class Tests_Functions extends WP_UnitTestCase {
 	 * @ticket 28786
 	 */
 	function test_wp_json_encode_array() {
-		$this->assertEquals( wp_json_encode( array( 'a' ) ), '["a"]' );
+		$this->assertSame( wp_json_encode( array( 'a' ) ), '["a"]' );
 	}
 
 	/**
@@ -911,7 +1003,7 @@ class Tests_Functions extends WP_UnitTestCase {
 	function test_wp_json_encode_object() {
 		$object    = new stdClass;
 		$object->a = 'b';
-		$this->assertEquals( wp_json_encode( $object ), '{"a":"b"}' );
+		$this->assertSame( wp_json_encode( $object ), '{"a":"b"}' );
 	}
 
 	/**
@@ -936,7 +1028,7 @@ class Tests_Functions extends WP_UnitTestCase {
 
 		$this->assertTrue( is_string( $date_return ), 'The date return must be a string' );
 		$this->assertNotEmpty( $date_return, 'The date return could not be an empty string' );
-		$this->assertEquals( $expected, $date_return, 'The date does not match' );
+		$this->assertSame( $expected, $date_return, 'The date does not match' );
 		$this->assertEquals( new DateTime( $expected ), new DateTime( $date_return ), 'The date is not the same after the call method' );
 	}
 
@@ -977,8 +1069,8 @@ class Tests_Functions extends WP_UnitTestCase {
 
 		foreach ( $extensions as $type => $extension_list ) {
 			foreach ( $extension_list as $extension ) {
-				$this->assertEquals( $type, wp_ext2type( $extension ) );
-				$this->assertEquals( $type, wp_ext2type( strtoupper( $extension ) ) );
+				$this->assertSame( $type, wp_ext2type( $extension ) );
+				$this->assertSame( $type, wp_ext2type( strtoupper( $extension ) ) );
 			}
 		}
 
@@ -1003,7 +1095,7 @@ class Tests_Functions extends WP_UnitTestCase {
 		$ini_limit_after  = ini_get( 'memory_limit' );
 
 		$this->assertSame( $ini_limit_before, $ini_limit_after );
-		$this->assertSame( false, $raised_limit );
+		$this->assertFalse( $raised_limit );
 		$this->assertEquals( WP_MAX_MEMORY_LIMIT, $ini_limit_after );
 	}
 
@@ -1022,7 +1114,7 @@ class Tests_Functions extends WP_UnitTestCase {
 		}
 
 		$unique_uuids = array_unique( $uuids );
-		$this->assertEquals( $uuids, $unique_uuids );
+		$this->assertSame( $uuids, $unique_uuids );
 	}
 
 	/**
@@ -1091,7 +1183,7 @@ class Tests_Functions extends WP_UnitTestCase {
 			$this->assertTrue( is_numeric( $id ) );
 			$ids[] = $id;
 		}
-		$this->assertEquals( $ids, array_unique( $ids ) );
+		$this->assertSame( $ids, array_unique( $ids ) );
 
 		// Test with prefix.
 		$ids = array();
@@ -1100,7 +1192,7 @@ class Tests_Functions extends WP_UnitTestCase {
 			$this->assertRegExp( '/^foo-\d+$/', $id );
 			$ids[] = $id;
 		}
-		$this->assertEquals( $ids, array_unique( $ids ) );
+		$this->assertSame( $ids, array_unique( $ids ) );
 	}
 
 	/**
@@ -1112,7 +1204,7 @@ class Tests_Functions extends WP_UnitTestCase {
 			$this->markTestSkipped( 'The exif PHP extension is not loaded.' );
 		}
 
-		$this->assertEquals( $expected, wp_get_image_mime( $file ) );
+		$this->assertSame( $expected, wp_get_image_mime( $file ) );
 	}
 
 	/**
@@ -1124,7 +1216,7 @@ class Tests_Functions extends WP_UnitTestCase {
 			$this->markTestSkipped( 'The fileinfo PHP extension is not loaded.' );
 		}
 
-		$this->assertEquals( $expected, wp_check_filetype_and_ext( $file, $filename ) );
+		$this->assertSame( $expected, wp_check_filetype_and_ext( $file, $filename ) );
 	}
 
 	/**
@@ -1146,7 +1238,7 @@ class Tests_Functions extends WP_UnitTestCase {
 		);
 
 		add_filter( 'upload_mimes', array( $this, '_filter_mime_types_svg' ) );
-		$this->assertEquals( $expected, wp_check_filetype_and_ext( $file, $filename ) );
+		$this->assertSame( $expected, wp_check_filetype_and_ext( $file, $filename ) );
 
 		// Cleanup.
 		remove_filter( 'upload_mimes', array( $this, '_test_add_mime_types_svg' ) );
@@ -1171,7 +1263,7 @@ class Tests_Functions extends WP_UnitTestCase {
 		);
 
 		add_filter( 'upload_mimes', array( $this, '_filter_mime_types_woff' ) );
-		$this->assertEquals( $expected, wp_check_filetype_and_ext( $file, $filename ) );
+		$this->assertSame( $expected, wp_check_filetype_and_ext( $file, $filename ) );
 
 		// Cleanup.
 		remove_filter( 'upload_mimes', array( $this, '_test_add_mime_types_woff' ) );
@@ -1637,17 +1729,17 @@ class Tests_Functions extends WP_UnitTestCase {
 			array( 1, false ),
 			array( '00', false ),
 			array( '30:-10', false ),
-			array( ':30:00', false ), // Missing HH.
+			array( ':30:00', false ),   // Missing HH.
 			array( 'MM:30:00', false ), // Invalid HH.
 			array( '30:MM:00', false ), // Invalid ii.
 			array( '30:30:MM', false ), // Invalid ss.
-			array( '30:MM', false ), // Invalid ss.
-			array( 'MM:00', false ), // Invalid ii.
-			array( 'MM:MM', false ), // Invalid ii and ss.
-			array( '10 :30', false ), // Containing a space.
-			array( '59:61', false ), // Out of bound.
-			array( '61:59', false ), // Out of bound.
-			array( '3:59:61', false ), // Out of bound.
+			array( '30:MM', false ),    // Invalid ss.
+			array( 'MM:00', false ),    // Invalid ii.
+			array( 'MM:MM', false ),    // Invalid ii and ss.
+			array( '10 :30', false ),   // Containing a space.
+			array( '59:61', false ),    // Out of bound.
+			array( '61:59', false ),    // Out of bound.
+			array( '3:59:61', false ),  // Out of bound.
 			array( '03:61:59', false ), // Out of bound.
 		);
 	}
diff --git a/tests/functions/addMagicQuotes.php b/tests/functions/addMagicQuotes.php
new file mode 100644
index 0000000000..81e1f010cb
--- /dev/null
+++ b/tests/functions/addMagicQuotes.php
@@ -0,0 +1,64 @@
+<?php
+
+/**
+ * @group formatting
+ * @group functions.php
+ */
+class Tests_Functions_AddMagicQuotes extends WP_UnitTestCase {
+
+	/**
+	 * @ticket 48605
+	 *
+	 * @dataProvider data_add_magic_quotes
+	 *
+	 * @param array $test_array Test value.
+	 * @param array $expected   Expected return value.
+	 */
+	function test_add_magic_quotes( $test_array, $expected ) {
+		$this->assertSame( $expected, add_magic_quotes( $test_array ) );
+	}
+
+	/**
+	 * Data provider for test_add_magic_quotes.
+	 *
+	 * @return array[] Test parameters {
+	 *     @type array $test_array Test value.
+	 *     @type array $expected   Expected return value.
+	 * }
+	 */
+	public function data_add_magic_quotes() {
+		return array(
+			array(
+				array(
+					'sample string',
+					52,
+					true,
+					false,
+					null,
+					"This is a 'string'",
+					array(
+						1,
+						false,
+						true,
+						'This is "another" string',
+					),
+				),
+				array(
+					'sample string',
+					52,
+					true,
+					false,
+					null,
+					"This is a \'string\'",
+					array(
+						1,
+						false,
+						true,
+						'This is \"another\" string',
+					),
+				),
+			),
+		);
+	}
+
+}
diff --git a/tests/functions/allowedProtocols.php b/tests/functions/allowedProtocols.php
index 992ccee86c..ad80a6c855 100644
--- a/tests/functions/allowedProtocols.php
+++ b/tests/functions/allowedProtocols.php
@@ -18,7 +18,7 @@ class Tests_Functions_AllowedProtocols extends WP_UnitTestCase {
 		foreach ( $this->data_example_urls() as $example ) {
 			$example_protocols[] = $example[0];
 		}
-		$this->assertEqualSets( $example_protocols, wp_allowed_protocols() );
+		$this->assertSameSets( $example_protocols, wp_allowed_protocols() );
 	}
 
 	/**
@@ -29,8 +29,8 @@ class Tests_Functions_AllowedProtocols extends WP_UnitTestCase {
 	 * @param string Example URL.
 	 */
 	function test_allowed_protocols( $protocol, $url ) {
-		$this->assertEquals( $url, esc_url( $url, $protocol ) );
-		$this->assertEquals( $url, esc_url( $url, wp_allowed_protocols() ) );
+		$this->assertSame( $url, esc_url( $url, $protocol ) );
+		$this->assertSame( $url, esc_url( $url, wp_allowed_protocols() ) );
 	}
 
 	/**
@@ -38,26 +38,26 @@ class Tests_Functions_AllowedProtocols extends WP_UnitTestCase {
 	 */
 	function data_example_urls() {
 		return array(
-			array( 'http', 'http://example.com' ), // RFC7230
-			array( 'https', 'https://example.com' ), // RFC7230
-			array( 'ftp', 'ftp://example.com' ), // RFC1738
+			array( 'http', 'http://example.com' ),                                 // RFC7230
+			array( 'https', 'https://example.com' ),                               // RFC7230
+			array( 'ftp', 'ftp://example.com' ),                                   // RFC1738
 			array( 'ftps', 'ftps://example.com' ),
-			array( 'mailto', 'mailto://someone@example.com' ), // RFC6068
-			array( 'news', 'news://news.server.example/example.group.this' ), // RFC5538
+			array( 'mailto', 'mailto://someone@example.com' ),                     // RFC6068
+			array( 'news', 'news://news.server.example/example.group.this' ),      // RFC5538
 			array( 'irc', 'irc://example.com/wordpress' ),
 			array( 'gopher', 'gopher://example.com/7a_gopher_selector%09foobar' ), // RFC4266
-			array( 'nntp', 'nntp://news.server.example/example.group.this' ), // RFC5538
+			array( 'nntp', 'nntp://news.server.example/example.group.this' ),      // RFC5538
 			array( 'feed', 'feed://example.com/rss.xml' ),
-			array( 'telnet', 'telnet://user:password@example.com:80/' ), // RFC4248
+			array( 'telnet', 'telnet://user:password@example.com:80/' ),           // RFC4248
 			array( 'mms', 'mms://example.com:80/path' ),
-			array( 'rtsp', 'rtsp://media.example.com:554/wordpress/audiotrack' ), // RFC2326
+			array( 'rtsp', 'rtsp://media.example.com:554/wordpress/audiotrack' ),  // RFC2326
 			array( 'svn', 'svn://core.svn.wordpress.org/' ),
-			array( 'tel', 'tel:+1-234-567-8910' ), // RFC3966
-			array( 'sms', 'sms:+1-234-567-8910' ), // RFC3966
-			array( 'fax', 'fax:+123.456.78910' ), // RFC2806/RFC3966
-			array( 'xmpp', 'xmpp://guest@example.com' ), // RFC5122
+			array( 'tel', 'tel:+1-234-567-8910' ),                                 // RFC3966
+			array( 'sms', 'sms:+1-234-567-8910' ),                                 // RFC3966
+			array( 'fax', 'fax:+123.456.78910' ),                                  // RFC2806/RFC3966
+			array( 'xmpp', 'xmpp://guest@example.com' ),                           // RFC5122
 			array( 'webcal', 'webcal://example.com/calendar.ics' ),
-			array( 'urn', 'urn:uuid:6e8bc430-9c3a-11d9-9669-0800200c9a66' ), // RFC2141
+			array( 'urn', 'urn:uuid:6e8bc430-9c3a-11d9-9669-0800200c9a66' ),       // RFC2141
 		);
 	}
 }
diff --git a/tests/functions/anonymization.php b/tests/functions/anonymization.php
index e52ff43628..786b4cd238 100644
--- a/tests/functions/anonymization.php
+++ b/tests/functions/anonymization.php
@@ -36,7 +36,7 @@ class Tests_Functions_Anonymization extends WP_UnitTestCase {
 
 		/* Todo test ipv6_fallback mode if keeping it.*/
 
-		$this->assertEquals( $expected_result, $actual_result );
+		$this->assertSame( $expected_result, $actual_result );
 	}
 
 	/**
@@ -226,7 +226,7 @@ class Tests_Functions_Anonymization extends WP_UnitTestCase {
 	 * Test date anonymization of `wp_privacy_anonymize_data()`.
 	 */
 	public function test_anonymize_date() {
-		$this->assertEquals( '0000-00-00 00:00:00', wp_privacy_anonymize_data( 'date', '2003-12-25 12:34:56' ) );
+		$this->assertSame( '0000-00-00 00:00:00', wp_privacy_anonymize_data( 'date', '2003-12-25 12:34:56' ) );
 	}
 
 	/**
@@ -234,7 +234,7 @@ class Tests_Functions_Anonymization extends WP_UnitTestCase {
 	 */
 	public function test_anonymize_text() {
 		$text = __( 'Four score and seven years ago' );
-		$this->assertEquals( '[deleted]', wp_privacy_anonymize_data( 'text', $text ) );
+		$this->assertSame( '[deleted]', wp_privacy_anonymize_data( 'text', $text ) );
 	}
 
 	/**
@@ -242,7 +242,7 @@ class Tests_Functions_Anonymization extends WP_UnitTestCase {
 	 */
 	public function test_anonymize_long_text() {
 		$text = __( 'Four score and seven years ago' );
-		$this->assertEquals( 'This content was deleted by the author.', wp_privacy_anonymize_data( 'longtext', $text ) );
+		$this->assertSame( 'This content was deleted by the author.', wp_privacy_anonymize_data( 'longtext', $text ) );
 	}
 
 	/**
@@ -266,7 +266,7 @@ class Tests_Functions_Anonymization extends WP_UnitTestCase {
 	 * @param string  $anonymous Anonymized data.
 	 * @param string  $type      Type of the data.
 	 * @param string  $data      Original data.
-	 * @return string $anonymous Anonymized data.
+	 * @return string Anonymized data.
 	 */
 	public function filter_wp_privacy_anonymize_data( $anonymous, $type, $data ) {
 		if ( 'url' === $type && 'example.com' === parse_url( $data, PHP_URL_HOST ) ) {
diff --git a/tests/functions/canonical-charset.php b/tests/functions/canonical-charset.php
deleted file mode 100644
index 107b6d94b9..0000000000
--- a/tests/functions/canonical-charset.php
+++ /dev/null
@@ -1,88 +0,0 @@
-<?php
-
-/*
- * Validate that's badly named charsets always return the correct format for UTF-8 and ISO-8859-1
- *
- *  @since 4.8.0
- */
-
-class Tests_Functions_canonical_charset extends WP_UnitTestCase {
-
-	public function test_utf_8_lower() {
-		$this->assertEquals( 'UTF-8', _canonical_charset( 'utf-8' ) );
-	}
-
-	public function test_utf_8_upper() {
-		$this->assertEquals( 'UTF-8', _canonical_charset( 'UTF-8' ) );
-	}
-
-	public function test_utf_8_mixxed() {
-		$this->assertEquals( 'UTF-8', _canonical_charset( 'Utf-8' ) );
-	}
-
-	public function test_utf_8() {
-		$this->assertEquals( 'UTF-8', _canonical_charset( 'UTF8' ) );
-	}
-
-	public function test_iso_lower() {
-		$this->assertEquals( 'ISO-8859-1', _canonical_charset( 'iso-8859-1' ) );
-	}
-
-	public function test_iso_upper() {
-		$this->assertEquals( 'ISO-8859-1', _canonical_charset( 'ISO-8859-1' ) );
-	}
-
-	public function test_iso_mixxed() {
-		$this->assertEquals( 'ISO-8859-1', _canonical_charset( 'Iso8859-1' ) );
-	}
-
-	public function test_iso() {
-		$this->assertEquals( 'ISO-8859-1', _canonical_charset( 'ISO8859-1' ) );
-	}
-
-	public function test_random() {
-		$this->assertEquals( 'random', _canonical_charset( 'random' ) );
-	}
-
-	public function test_empty() {
-		$this->assertEquals( '', _canonical_charset( '' ) );
-	}
-
-	/**
-	 * @ticket 23688
-	 */
-	function test_update_option_blog_charset() {
-		$orig_blog_charset = get_option( 'blog_charset' );
-
-		update_option( 'blog_charset', 'utf8' );
-		$this->assertEquals( 'UTF-8', get_option( 'blog_charset' ) );
-
-		update_option( 'blog_charset', 'utf-8' );
-		$this->assertEquals( 'UTF-8', get_option( 'blog_charset' ) );
-
-		update_option( 'blog_charset', 'UTF8' );
-		$this->assertEquals( 'UTF-8', get_option( 'blog_charset' ) );
-
-		update_option( 'blog_charset', 'UTF-8' );
-		$this->assertEquals( 'UTF-8', get_option( 'blog_charset' ) );
-
-		update_option( 'blog_charset', 'ISO-8859-1' );
-		$this->assertEquals( 'ISO-8859-1', get_option( 'blog_charset' ) );
-
-		update_option( 'blog_charset', 'ISO8859-1' );
-		$this->assertEquals( 'ISO-8859-1', get_option( 'blog_charset' ) );
-
-		update_option( 'blog_charset', 'iso8859-1' );
-		$this->assertEquals( 'ISO-8859-1', get_option( 'blog_charset' ) );
-
-		update_option( 'blog_charset', 'iso-8859-1' );
-		$this->assertEquals( 'ISO-8859-1', get_option( 'blog_charset' ) );
-
-		// Arbitrary strings are passed through.
-		update_option( 'blog_charset', 'foobarbaz' );
-		$this->assertEquals( 'foobarbaz', get_option( 'blog_charset' ) );
-
-		update_option( 'blog_charset', $orig_blog_charset );
-	}
-
-}
diff --git a/tests/functions/canonicalCharset.php b/tests/functions/canonicalCharset.php
new file mode 100644
index 0000000000..ac89b1ec08
--- /dev/null
+++ b/tests/functions/canonicalCharset.php
@@ -0,0 +1,88 @@
+<?php
+
+/*
+ * Validate that badly named charsets always return the correct format for UTF-8 and ISO-8859-1.
+ *
+ *  @since 4.8.0
+ */
+
+class Tests_Functions_CanonicalCharset extends WP_UnitTestCase {
+
+	public function test_utf_8_lower() {
+		$this->assertSame( 'UTF-8', _canonical_charset( 'utf-8' ) );
+	}
+
+	public function test_utf_8_upper() {
+		$this->assertSame( 'UTF-8', _canonical_charset( 'UTF-8' ) );
+	}
+
+	public function test_utf_8_mixxed() {
+		$this->assertSame( 'UTF-8', _canonical_charset( 'Utf-8' ) );
+	}
+
+	public function test_utf_8() {
+		$this->assertSame( 'UTF-8', _canonical_charset( 'UTF8' ) );
+	}
+
+	public function test_iso_lower() {
+		$this->assertSame( 'ISO-8859-1', _canonical_charset( 'iso-8859-1' ) );
+	}
+
+	public function test_iso_upper() {
+		$this->assertSame( 'ISO-8859-1', _canonical_charset( 'ISO-8859-1' ) );
+	}
+
+	public function test_iso_mixxed() {
+		$this->assertSame( 'ISO-8859-1', _canonical_charset( 'Iso8859-1' ) );
+	}
+
+	public function test_iso() {
+		$this->assertSame( 'ISO-8859-1', _canonical_charset( 'ISO8859-1' ) );
+	}
+
+	public function test_random() {
+		$this->assertSame( 'random', _canonical_charset( 'random' ) );
+	}
+
+	public function test_empty() {
+		$this->assertSame( '', _canonical_charset( '' ) );
+	}
+
+	/**
+	 * @ticket 23688
+	 */
+	function test_update_option_blog_charset() {
+		$orig_blog_charset = get_option( 'blog_charset' );
+
+		update_option( 'blog_charset', 'utf8' );
+		$this->assertSame( 'UTF-8', get_option( 'blog_charset' ) );
+
+		update_option( 'blog_charset', 'utf-8' );
+		$this->assertSame( 'UTF-8', get_option( 'blog_charset' ) );
+
+		update_option( 'blog_charset', 'UTF8' );
+		$this->assertSame( 'UTF-8', get_option( 'blog_charset' ) );
+
+		update_option( 'blog_charset', 'UTF-8' );
+		$this->assertSame( 'UTF-8', get_option( 'blog_charset' ) );
+
+		update_option( 'blog_charset', 'ISO-8859-1' );
+		$this->assertSame( 'ISO-8859-1', get_option( 'blog_charset' ) );
+
+		update_option( 'blog_charset', 'ISO8859-1' );
+		$this->assertSame( 'ISO-8859-1', get_option( 'blog_charset' ) );
+
+		update_option( 'blog_charset', 'iso8859-1' );
+		$this->assertSame( 'ISO-8859-1', get_option( 'blog_charset' ) );
+
+		update_option( 'blog_charset', 'iso-8859-1' );
+		$this->assertSame( 'ISO-8859-1', get_option( 'blog_charset' ) );
+
+		// Arbitrary strings are passed through.
+		update_option( 'blog_charset', 'foobarbaz' );
+		$this->assertSame( 'foobarbaz', get_option( 'blog_charset' ) );
+
+		update_option( 'blog_charset', $orig_blog_charset );
+	}
+
+}
diff --git a/tests/functions/cleanupHeaderComment.php b/tests/functions/cleanupHeaderComment.php
new file mode 100644
index 0000000000..d7557c8813
--- /dev/null
+++ b/tests/functions/cleanupHeaderComment.php
@@ -0,0 +1,121 @@
+<?php
+/*
+ * Test _cleanup_header_comment().
+ *
+ * @group functions.php
+ * @ticket 8497
+ * @ticket 38101
+ */
+class Tests_Functions_CleanupHeaderComment extends WP_UnitTestCase {
+	/**
+	 * Test cleanup header of header comment.
+	 *
+	 * @covers ::_cleanup_header_comment
+	 * @dataProvider data_cleanup_header_comment
+	 *
+	 * @param string $test_string
+	 * @param string $expected
+	 */
+	public function test_cleanup_header_comment( $test_string, $expected ) {
+		$this->assertSameIgnoreEOL( $expected, _cleanup_header_comment( $test_string ) );
+	}
+
+	/**
+	 * Data provider for test_cleanup_header_comment.
+	 *
+	 * @return array[] Test parameters {
+	 *     @type string $test_string Test string.
+	 *     @type string $expected    Expected return value.
+	 * }
+	 */
+	public function data_cleanup_header_comment() {
+		return array(
+			// Set 0: A string.
+			array(
+				'ffffffffffffff',
+				'ffffffffffffff',
+			),
+			// Set 1: Trim a string.
+			array(
+				'	ffffffffffffff ',
+				'ffffffffffffff',
+			),
+			// Set 2: Trim a full comment string.
+			array(
+				'<?php
+/*
+Plugin Name: Health Check
+Plugin URI: https://wordpress.org/plugins/health-check/
+Description: Checks the health of your WordPress install
+Version: 0.1.0
+Author: The Health Check Team
+Author URI: http://health-check-team.example.com
+Text Domain: health-check
+Domain Path: /languages
+*/
+',
+				'<?php
+/*
+Plugin Name: Health Check
+Plugin URI: https://wordpress.org/plugins/health-check/
+Description: Checks the health of your WordPress install
+Version: 0.1.0
+Author: The Health Check Team
+Author URI: http://health-check-team.example.com
+Text Domain: health-check
+Domain Path: /languages',
+			),
+			// Set 3: Trim HTML following comment.
+			array(
+				'<?php
+/*
+Plugin Name: Health Check
+Plugin URI: https://wordpress.org/plugins/health-check/
+Description: Checks the health of your WordPress install
+Version: 0.1.0
+Author: The Health Check Team
+Author URI: http://health-check-team.example.com
+Text Domain: health-check
+Domain Path: /languages
+*/ ?>
+dddlddfs
+',
+				'<?php
+/*
+Plugin Name: Health Check
+Plugin URI: https://wordpress.org/plugins/health-check/
+Description: Checks the health of your WordPress install
+Version: 0.1.0
+Author: The Health Check Team
+Author URI: http://health-check-team.example.com
+Text Domain: health-check
+Domain Path: /languages
+dddlddfs',
+			),
+			// Set 4: Trim a docblock style comment.
+			array(
+				'<?php
+/**
+ * Plugin Name: Health Check
+ * Plugin URI: https://wordpress.org/plugins/health-check/
+ * Description: Checks the health of your WordPress install
+ * Version: 0.1.0
+ * Author: The Health Check Team
+ * Author URI: http://health-check-team.example.com
+ * Text Domain: health-check
+ * Domain Path: /languages
+ */',
+				'<?php
+/**
+ * Plugin Name: Health Check
+ * Plugin URI: https://wordpress.org/plugins/health-check/
+ * Description: Checks the health of your WordPress install
+ * Version: 0.1.0
+ * Author: The Health Check Team
+ * Author URI: http://health-check-team.example.com
+ * Text Domain: health-check
+ * Domain Path: /languages',
+			),
+		);
+	}
+}
diff --git a/tests/functions/deprecated.php b/tests/functions/deprecated.php
index 3bd6116f48..758ab0228a 100644
--- a/tests/functions/deprecated.php
+++ b/tests/functions/deprecated.php
@@ -5,36 +5,34 @@
  *
  * @package    WordPress
  * @subpackage Unit Tests
- * @since      3.5
+ * @since      3.5.0
  * @group      deprecated
  */
-class Test_Functions_Deprecated extends WP_UnitTestCase {
+class Tests_Functions_Deprecated extends WP_UnitTestCase {
 
 	/**
-	 * List of functions that have been passed through _deprecated_function()
+	 * List of functions that have been passed through _deprecated_function().
 	 *
 	 * @var string[]
 	 */
 	protected $_deprecated_functions = array();
 
 	/**
-	 * List of arguments that have been passed through _deprecated_argument()
+	 * List of arguments that have been passed through _deprecated_argument().
 	 *
 	 * @var string[]
 	 */
 	protected $_deprecated_arguments = array();
 
 	/**
-	 * List of files that have been passed through _deprecated_file()
+	 * List of files that have been passed through _deprecated_file().
 	 *
 	 * @var string[]
 	 */
 	protected $_deprecated_files = array();
 
 	/**
-	 * Set up the test fixture
-	 *
-	 * @return void
+	 * Sets up the test fixture.
 	 */
 	public function setUp() {
 		parent::setUp();
@@ -50,9 +48,7 @@ class Test_Functions_Deprecated extends WP_UnitTestCase {
 	}
 
 	/**
-	 * Tear down the test fixture
-	 *
-	 * @return void
+	 * Tears down the test fixture.
 	 */
 	public function teardown() {
 		remove_action( 'deprecated_function_run', array( $this, 'deprecated_function' ), 10, 3 );
@@ -65,12 +61,11 @@ class Test_Functions_Deprecated extends WP_UnitTestCase {
 	}
 
 	/**
-	 * Catch functions that have passed through _deprecated_function
+	 * Catches functions that have passed through _deprecated_function().
 	 *
 	 * @param string $function
 	 * @param string $replacement
 	 * @param float $version
-	 * @return void
 	 */
 	public function deprecated_function( $function, $replacement, $version ) {
 		$this->_deprecated_functions[] = array(
@@ -81,12 +76,11 @@ class Test_Functions_Deprecated extends WP_UnitTestCase {
 	}
 
 	/**
-	 * Catch arguments that have passed through _deprecated_argument
+	 * Catches arguments that have passed through _deprecated_argument().
 	 *
 	 * @param string $argument
 	 * @param string $message
 	 * @param float $version
-	 * @return void
 	 */
 	public function deprecated_argument( $argument, $message, $version ) {
 		$this->_deprecated_arguments[] = array(
@@ -97,12 +91,11 @@ class Test_Functions_Deprecated extends WP_UnitTestCase {
 	}
 
 	/**
-	 * Catch arguments that have passed through _deprecated_argument
+	 * Catches arguments that have passed through _deprecated_argument().
 	 *
 	 * @param string $argument
 	 * @param string $message
 	 * @param float $version
-	 * @return void
 	 */
 	public function deprecated_file( $file, $version, $replacement, $message ) {
 		$this->_deprecated_files[] = array(
@@ -114,7 +107,7 @@ class Test_Functions_Deprecated extends WP_UnitTestCase {
 	}
 
 	/**
-	 * Check if something was deprecated
+	 * Checks if something was deprecated.
 	 *
 	 * @param string $type argument|function|file
 	 * @param string $name
@@ -143,7 +136,7 @@ class Test_Functions_Deprecated extends WP_UnitTestCase {
 	}
 
 	/**
-	 * Test that wp_save_image_file has a deprecated argument when passed a GD resource
+	 * Tests that wp_save_image_file() has a deprecated argument when passed a GD resource.
 	 *
 	 * @ticket 6821
 	 * @expectedDeprecated wp_save_image_file
@@ -153,21 +146,21 @@ class Test_Functions_Deprecated extends WP_UnitTestCase {
 			$this->fail( 'jpeg support unavailable' );
 		}
 
-		// Call wp_save_image_file
-		include_once( ABSPATH . 'wp-admin/includes/image-edit.php' );
+		// Call wp_save_image_file().
+		require_once ABSPATH . 'wp-admin/includes/image-edit.php';
 		$file = wp_tempnam();
 		$img  = imagecreatefromjpeg( DIR_TESTDATA . '/images/canola.jpg' );
 		wp_save_image_file( $file, $img, 'image/jpeg', 1 );
 		imagedestroy( $img );
 		unlink( $file );
 
-		// Check if the arg was deprecated
+		// Check if the arg was deprecated.
 		$check = $this->was_deprecated( 'argument', 'wp_save_image_file' );
 		$this->assertNotEmpty( $check );
 	}
 
 	/**
-	 * Test that wp_save_image_file doesn't have a deprecated argument when passed a WP_Image_Editor
+	 * Tests that wp_save_image_file() doesn't have a deprecated argument when passed a WP_Image_Editor.
 	 *
 	 * @ticket 6821
 	 */
@@ -176,15 +169,15 @@ class Test_Functions_Deprecated extends WP_UnitTestCase {
 			$this->fail( 'jpeg support unavailable' );
 		}
 
-		// Call wp_save_image_file
-		include_once( ABSPATH . 'wp-admin/includes/image-edit.php' );
+		// Call wp_save_image_file().
+		require_once ABSPATH . 'wp-admin/includes/image-edit.php';
 		$file = wp_tempnam();
 		$img  = wp_get_image_editor( DIR_TESTDATA . '/images/canola.jpg' );
 		wp_save_image_file( $file, $img, 'image/jpeg', 1 );
 		unset( $img );
 		unlink( $file );
 
-		// Check if the arg was deprecated
+		// Check if the arg was deprecated.
 		$check = $this->was_deprecated( 'argument', 'wp_save_image_file' );
 		$this->assertFalse( $check );
 	}
diff --git a/tests/functions/doEnclose.php b/tests/functions/doEnclose.php
index 7b2c62ed2c..720eb8c728 100644
--- a/tests/functions/doEnclose.php
+++ b/tests/functions/doEnclose.php
@@ -12,7 +12,7 @@
  *
  * @group functions.php
  * @group post
- * @covers do_enclose
+ * @covers ::do_enclose
  *
  * @since 5.3.0
  */
@@ -135,6 +135,10 @@ class Tests_Functions_DoEnclose extends WP_UnitTestCase {
 				'expected' => "https://example.com/wp-content/uploads/2018/06/audio.ogg\n321\naudio/ogg\n" .
 								"https://example.com/wp-content/uploads/2018/06/movie.mp4\n123\nvideo/mp4\n",
 			),
+			'no-path'               => array(
+				'content'  => 'https://example.com?test=1',
+				'expected' => '',
+			),
 		);
 	}
 
@@ -233,7 +237,7 @@ class Tests_Functions_DoEnclose extends WP_UnitTestCase {
 	 *
 	 * @param  array $post_links An array of enclosure links.
 	 * @param  int   $post_id    Post ID.
-	 * @return array $post_links An array of enclosure links.
+	 * @return array An array of enclosure links.
 	 */
 	public function filter_enclosure_links( $enclosure_links, $post_id ) {
 		// Replace the link host to contain the post ID, to test both filter input arguments.
diff --git a/tests/functions/getStatusHeaderDesc.php b/tests/functions/getStatusHeaderDesc.php
index 0b4ec37661..956eae880f 100644
--- a/tests/functions/getStatusHeaderDesc.php
+++ b/tests/functions/getStatusHeaderDesc.php
@@ -7,7 +7,7 @@
  *
  * @group functions.php
  */
-class Tests_Functions_get_status_header_desc extends WP_UnitTestCase {
+class Tests_Functions_GetStatusHeaderDesc extends WP_UnitTestCase {
 
 	/**
 	 * @dataProvider _status_strings
diff --git a/tests/functions/getWeekstartend.php b/tests/functions/getWeekstartend.php
index 978f49eee7..ee76275be6 100644
--- a/tests/functions/getWeekstartend.php
+++ b/tests/functions/getWeekstartend.php
@@ -11,7 +11,7 @@ class Tests_Functions_GetWeekstartend extends WP_UnitTestCase {
 			'end'   => 1455494399,
 		);
 
-		$this->assertEquals( $expected, get_weekstartend( '2016-02-12' ) );
+		$this->assertSame( $expected, get_weekstartend( '2016-02-12' ) );
 	}
 
 	public function test_start_of_week_sunday() {
@@ -20,7 +20,7 @@ class Tests_Functions_GetWeekstartend extends WP_UnitTestCase {
 			'end'   => 1455407999,
 		);
 
-		$this->assertEquals( $expected, get_weekstartend( '2016-02-12', 0 ) );
+		$this->assertSame( $expected, get_weekstartend( '2016-02-12', 0 ) );
 	}
 
 	public function test_start_of_week_should_fall_back_on_start_of_week_option() {
@@ -31,7 +31,7 @@ class Tests_Functions_GetWeekstartend extends WP_UnitTestCase {
 			'end'   => 1455580799,
 		);
 
-		$this->assertEquals( $expected, get_weekstartend( '2016-02-12' ) );
+		$this->assertSame( $expected, get_weekstartend( '2016-02-12' ) );
 	}
 
 	public function test_start_of_week_should_fall_back_on_sunday_when_option_is_missing() {
@@ -42,6 +42,6 @@ class Tests_Functions_GetWeekstartend extends WP_UnitTestCase {
 			'end'   => 1455407999,
 		);
 
-		$this->assertEquals( $expected, get_weekstartend( '2016-02-12' ) );
+		$this->assertSame( $expected, get_weekstartend( '2016-02-12' ) );
 	}
 }
diff --git a/tests/functions/isNewDay.php b/tests/functions/isNewDay.php
index 629a6d3de5..0bc459d52c 100644
--- a/tests/functions/isNewDay.php
+++ b/tests/functions/isNewDay.php
@@ -6,7 +6,7 @@
  *
  * @group functions.php
  */
-class Tests_Functions_is_new_date extends WP_UnitTestCase {
+class Tests_Functions_IsNewDate extends WP_UnitTestCase {
 
 	/**
 	 * @ticket 46627
diff --git a/tests/functions/isSerializedString.php b/tests/functions/isSerializedString.php
index 292765aab4..9a6bb4f7d7 100644
--- a/tests/functions/isSerializedString.php
+++ b/tests/functions/isSerializedString.php
@@ -6,7 +6,7 @@
  * @group functions.php
  * @ticket 42870
  */
-class Tests_Functions_Is_Serialized_String extends WP_UnitTestCase {
+class Tests_Functions_IsSerializedString extends WP_UnitTestCase {
 
 	/**
 	 * Data provider method for testing `is_serialized_string()`.
diff --git a/tests/functions/numberFormatI18n.php b/tests/functions/numberFormatI18n.php
index 8c514b319c..803b8ec02c 100644
--- a/tests/functions/numberFormatI18n.php
+++ b/tests/functions/numberFormatI18n.php
@@ -6,7 +6,7 @@
  * @group functions.php
  * @group i18n
  */
-class Tests_Functions_Number_Format_I18n extends WP_UnitTestCase {
+class Tests_Functions_NumberFormatI18n extends WP_UnitTestCase {
 	public function test_should_fall_back_to_number_format_when_wp_locale_is_not_set() {
 		$locale               = clone $GLOBALS['wp_locale'];
 		$GLOBALS['wp_locale'] = null;
@@ -16,8 +16,8 @@ class Tests_Functions_Number_Format_I18n extends WP_UnitTestCase {
 
 		$GLOBALS['wp_locale'] = $locale;
 
-		$this->assertEquals( '123,457', $actual_1 );
-		$this->assertEquals( '123,456.7890', $actual_2 );
+		$this->assertSame( '123,457', $actual_1 );
+		$this->assertSame( '123,456.7890', $actual_2 );
 	}
 
 	public function test_should_respect_number_format_of_locale() {
@@ -33,17 +33,17 @@ class Tests_Functions_Number_Format_I18n extends WP_UnitTestCase {
 		$GLOBALS['wp_locale']->number_format['decimal_point'] = $decimal_point;
 		$GLOBALS['wp_locale']->number_format['thousands_sep'] = $thousands_sep;
 
-		$this->assertEquals( '123^457', $actual_1 );
-		$this->assertEquals( '123^456@7890', $actual_2 );
+		$this->assertSame( '123^457', $actual_1 );
+		$this->assertSame( '123^456@7890', $actual_2 );
 	}
 
 	public function test_should_default_to_en_us_format() {
-		$this->assertEquals( '123,457', number_format_i18n( 123456.789, 0 ) );
-		$this->assertEquals( '123,456.7890', number_format_i18n( 123456.789, 4 ) );
+		$this->assertSame( '123,457', number_format_i18n( 123456.789, 0 ) );
+		$this->assertSame( '123,456.7890', number_format_i18n( 123456.789, 4 ) );
 	}
 
 	public function test_should_handle_negative_precision() {
-		$this->assertEquals( '123,457', number_format_i18n( 123456.789, 0 ) );
-		$this->assertEquals( '123,456.7890', number_format_i18n( 123456.789, -4 ) );
+		$this->assertSame( '123,457', number_format_i18n( 123456.789, 0 ) );
+		$this->assertSame( '123,456.7890', number_format_i18n( 123456.789, -4 ) );
 	}
 }
diff --git a/tests/functions/pluginBasename.php b/tests/functions/pluginBasename.php
index 42755f5f25..e664d8fbd6 100644
--- a/tests/functions/pluginBasename.php
+++ b/tests/functions/pluginBasename.php
@@ -6,7 +6,7 @@
  * @group functions.php
  * @group plugins
  */
-class Tests_Plugin_Basename extends WP_UnitTestCase {
+class Tests_Functions_PluginBasename extends WP_UnitTestCase {
 
 	/**
 	 * @var array
diff --git a/tests/functions/removeQueryArg.php b/tests/functions/removeQueryArg.php
index b55f903d98..3d53f881e0 100644
--- a/tests/functions/removeQueryArg.php
+++ b/tests/functions/removeQueryArg.php
@@ -11,7 +11,7 @@ class Tests_Functions_RemoveQueryArg extends WP_UnitTestCase {
 		$actual = remove_query_arg( $keys_to_remove, $url );
 
 		$this->assertNotEmpty( $actual );
-		$this->assertEquals( $expected, $actual );
+		$this->assertSame( $expected, $actual );
 	}
 
 	public function remove_query_arg_provider() {
diff --git a/tests/functions/sizeFormat.php b/tests/functions/sizeFormat.php
index 0cf26511f1..7d473f23b9 100644
--- a/tests/functions/sizeFormat.php
+++ b/tests/functions/sizeFormat.php
@@ -6,7 +6,7 @@
  * @group functions.php
  * @ticket 36635
  */
-class Tests_Functions_Size_Format extends WP_UnitTestCase {
+class Tests_Functions_SizeFormat extends WP_UnitTestCase {
 	public function _data_size_format() {
 		return array(
 			array( array(), 0, false ),
diff --git a/tests/functions/underscoreReturn.php b/tests/functions/underscoreReturn.php
index 8c1d2e0962..40222633f8 100644
--- a/tests/functions/underscoreReturn.php
+++ b/tests/functions/underscoreReturn.php
@@ -6,7 +6,7 @@
  *
  * @group functions.php
  */
-class Tests_Functions_Underscore_Return extends WP_UnitTestCase {
+class Tests_Functions_UnderscoreReturn extends WP_UnitTestCase {
 
 	public function test__return_true() {
 		$this->assertTrue( __return_true() );
diff --git a/tests/functions/wp.php b/tests/functions/wp.php
new file mode 100644
index 0000000000..80654a8526
--- /dev/null
+++ b/tests/functions/wp.php
@@ -0,0 +1,19 @@
+<?php
+
+/**
+ * @group functions.php
+ * @group query
+ */
+class Tests_Functions_WP extends WP_UnitTestCase {
+
+	public function test_wp_sets_global_vars() {
+		global $wp, $wp_query, $wp_the_query;
+
+		wp();
+
+		$this->assertInstanceOf( 'WP', $wp );
+		$this->assertInstanceOf( 'WP_Query', $wp_query );
+		$this->assertInstanceOf( 'WP_Query', $wp_the_query );
+	}
+
+}
diff --git a/tests/functions/wpArraySliceAssoc.php b/tests/functions/wpArraySliceAssoc.php
index 73df5cb87c..98afc785c9 100644
--- a/tests/functions/wpArraySliceAssoc.php
+++ b/tests/functions/wpArraySliceAssoc.php
@@ -5,10 +5,10 @@
  *
  * @since 5.3.0
  *
- * @covers wp_array_slice_assoc
+ * @covers ::wp_array_slice_assoc
  * @group functions.php
  */
-class Tests_Functions_WpArraySliceAssoc extends WP_UnitTestCase {
+class Tests_Functions_wpArraySliceAssoc extends WP_UnitTestCase {
 
 	/**
 	 * Test wp_array_slice_assoc().
diff --git a/tests/functions/wpAuthCheck.php b/tests/functions/wpAuthCheck.php
index 767b8a3101..a583d01606 100644
--- a/tests/functions/wpAuthCheck.php
+++ b/tests/functions/wpAuthCheck.php
@@ -1,11 +1,11 @@
 <?php
 
 /**
- * @group functions.php
- *
  * Tests for the behavior of `wp_auth_check()`
+ *
+ * @group functions.php
  */
-class Tests_Functions_WP_Auth_Check extends WP_UnitTestCase {
+class Tests_Functions_wpAuthCheck extends WP_UnitTestCase {
 
 	/**
 	 * Run with user not logged in.
@@ -27,7 +27,7 @@ class Tests_Functions_WP_Auth_Check extends WP_UnitTestCase {
 	 * @ticket 41860
 	 */
 	function test_wp_auth_check_user_logged_in() {
-		// log user in
+		// Log user in.
 		wp_set_current_user( 1 );
 
 		$expected = array(
@@ -44,7 +44,7 @@ class Tests_Functions_WP_Auth_Check extends WP_UnitTestCase {
 	 * @ticket 41860
 	 */
 	function test_wp_auth_check_user_logged_in_login_grace_period_set() {
-		// log user in
+		// Log user in.
 		wp_set_current_user( 1 );
 
 		$GLOBALS['login_grace_period'] = 1;
@@ -55,7 +55,7 @@ class Tests_Functions_WP_Auth_Check extends WP_UnitTestCase {
 		$actual    = wp_auth_check( array() );
 		$logged_in = is_user_logged_in();
 
-		// Leave the global state unchanged
+		// Leave the global state unchanged.
 		unset( $GLOBALS['login_grace_period'] );
 
 		$this->assertTrue( $logged_in );
diff --git a/tests/functions/getArchives.php b/tests/functions/wpGetArchives.php
similarity index 92%
rename from tests/functions/getArchives.php
rename to tests/functions/wpGetArchives.php
index c771eece09..35d011921d 100644
--- a/tests/functions/getArchives.php
+++ b/tests/functions/wpGetArchives.php
@@ -7,7 +7,7 @@ $defaults = array(
 	'echo' => 1, 'order' => 'DESC',
 );
 */
-class Tests_Get_Archives extends WP_UnitTestCase {
+class Tests_Functions_wpGetArchives extends WP_UnitTestCase {
 	protected static $post_ids;
 	protected $month_url;
 	protected $year_url;
@@ -31,12 +31,12 @@ class Tests_Get_Archives extends WP_UnitTestCase {
 
 	function test_wp_get_archives_default() {
 		$expected['default'] = "<li><a href='" . $this->month_url . "'>" . gmdate( 'F Y' ) . '</a></li>';
-		$this->assertEquals( $expected['default'], trim( wp_get_archives( array( 'echo' => false ) ) ) );
+		$this->assertSame( $expected['default'], trim( wp_get_archives( array( 'echo' => false ) ) ) );
 	}
 
 	function test_wp_get_archives_type() {
 		$expected['type'] = "<li><a href='" . $this->year_url . "'>" . gmdate( 'Y' ) . '</a></li>';
-		$this->assertEquals(
+		$this->assertSame(
 			$expected['type'],
 			trim(
 				wp_get_archives(
@@ -71,7 +71,7 @@ class Tests_Get_Archives extends WP_UnitTestCase {
 	<li><a href='$link4'>$title4</a></li>
 	<li><a href='$link5'>$title5</a></li>
 EOF;
-		$this->assertEqualsIgnoreEOL(
+		$this->assertSameIgnoreEOL(
 			$expected['limit'],
 			trim(
 				wp_get_archives(
@@ -87,7 +87,7 @@ EOF;
 
 	function test_wp_get_archives_format() {
 		$expected['format'] = "<option value='" . $this->month_url . "'> " . gmdate( 'F Y' ) . ' </option>';
-		$this->assertEquals(
+		$this->assertSame(
 			$expected['format'],
 			trim(
 				wp_get_archives(
@@ -102,7 +102,7 @@ EOF;
 
 	function test_wp_get_archives_before_and_after() {
 		$expected['before_and_after'] = "<div><a href='" . $this->month_url . "'>" . gmdate( 'F Y' ) . '</a></div>';
-		$this->assertEquals(
+		$this->assertSame(
 			$expected['before_and_after'],
 			trim(
 				wp_get_archives(
@@ -119,7 +119,7 @@ EOF;
 
 	function test_wp_get_archives_show_post_count() {
 		$expected['show_post_count'] = "<li><a href='" . $this->month_url . "'>" . gmdate( 'F Y' ) . '</a>&nbsp;(8)</li>';
-		$this->assertEquals(
+		$this->assertSame(
 			$expected['show_post_count'],
 			trim(
 				wp_get_archives(
@@ -153,7 +153,7 @@ EOF;
 <li><a href='{$oct_url}'>October 2012</a></li>
 	<li><a href='{$this->month_url}'>$date_full</a></li>
 EOF;
-		$this->assertEqualsIgnoreEOL(
+		$this->assertSameIgnoreEOL(
 			$expected['order_asc'],
 			trim(
 				wp_get_archives(
@@ -169,7 +169,7 @@ EOF;
 <li><a href='{$this->month_url}'>$date_full</a></li>
 	<li><a href='{$oct_url}'>October 2012</a></li>
 EOF;
-		$this->assertEqualsIgnoreEOL(
+		$this->assertSameIgnoreEOL(
 			$expected['order_desc'],
 			trim(
 				wp_get_archives(
@@ -204,6 +204,6 @@ EOF;
 				'post_type' => 'taco',
 			)
 		);
-		$this->assertEquals( $expected, trim( $archives ) );
+		$this->assertSame( $expected, trim( $archives ) );
 	}
 }
diff --git a/tests/functions/wpGetMimeTypes.php b/tests/functions/wpGetMimeTypes.php
index dec3ea73d6..8188ecd518 100644
--- a/tests/functions/wpGetMimeTypes.php
+++ b/tests/functions/wpGetMimeTypes.php
@@ -5,7 +5,7 @@
  *
  * @group functions.php
  */
-class Tests_wp_get_mime_types extends WP_UnitTestCase {
+class Tests_Functions_wpGetMimeTypes extends WP_UnitTestCase {
 
 	/**
 	 * @ticket 47701
diff --git a/tests/functions/listFilter.php b/tests/functions/wpListFilter.php
similarity index 89%
rename from tests/functions/listFilter.php
rename to tests/functions/wpListFilter.php
index 1e5c553357..e347308804 100644
--- a/tests/functions/listFilter.php
+++ b/tests/functions/wpListFilter.php
@@ -5,7 +5,7 @@
  *
  * @group functions.php
  */
-class Tests_Functions_ListFilter extends WP_UnitTestCase {
+class Tests_Functions_wpListFilter extends WP_UnitTestCase {
 	var $object_list = array();
 	var $array_list  = array();
 
@@ -49,7 +49,7 @@ class Tests_Functions_ListFilter extends WP_UnitTestCase {
 			),
 			'AND'
 		);
-		$this->assertEquals( 2, count( $list ) );
+		$this->assertSame( 2, count( $list ) );
 		$this->assertArrayHasKey( 'foo', $list );
 		$this->assertArrayHasKey( 'bar', $list );
 	}
@@ -63,7 +63,7 @@ class Tests_Functions_ListFilter extends WP_UnitTestCase {
 			),
 			'OR'
 		);
-		$this->assertEquals( 3, count( $list ) );
+		$this->assertSame( 3, count( $list ) );
 		$this->assertArrayHasKey( 'foo', $list );
 		$this->assertArrayHasKey( 'bar', $list );
 		$this->assertArrayHasKey( 'baz', $list );
@@ -78,7 +78,7 @@ class Tests_Functions_ListFilter extends WP_UnitTestCase {
 			),
 			'NOT'
 		);
-		$this->assertEquals( 1, count( $list ) );
+		$this->assertSame( 1, count( $list ) );
 		$this->assertArrayHasKey( 'baz', $list );
 	}
 
@@ -92,7 +92,7 @@ class Tests_Functions_ListFilter extends WP_UnitTestCase {
 			'AND',
 			'name'
 		);
-		$this->assertEquals(
+		$this->assertSame(
 			array(
 				'foo' => 'foo',
 				'bar' => 'bar',
@@ -111,7 +111,7 @@ class Tests_Functions_ListFilter extends WP_UnitTestCase {
 			'OR',
 			'name'
 		);
-		$this->assertEquals(
+		$this->assertSame(
 			array(
 				'foo' => 'foo',
 				'bar' => 'bar',
@@ -130,12 +130,12 @@ class Tests_Functions_ListFilter extends WP_UnitTestCase {
 			'NOT',
 			'name'
 		);
-		$this->assertEquals( array( 'baz' => 'baz' ), $list );
+		$this->assertSame( array( 'baz' => 'baz' ), $list );
 	}
 
 	function test_wp_list_pluck() {
 		$list = wp_list_pluck( $this->object_list, 'name' );
-		$this->assertEquals(
+		$this->assertSame(
 			array(
 				'foo' => 'foo',
 				'bar' => 'bar',
@@ -145,7 +145,7 @@ class Tests_Functions_ListFilter extends WP_UnitTestCase {
 		);
 
 		$list = wp_list_pluck( $this->array_list, 'name' );
-		$this->assertEquals(
+		$this->assertSame(
 			array(
 				'foo' => 'foo',
 				'bar' => 'bar',
@@ -160,7 +160,7 @@ class Tests_Functions_ListFilter extends WP_UnitTestCase {
 	 */
 	function test_wp_list_pluck_index_key() {
 		$list = wp_list_pluck( $this->array_list, 'name', 'id' );
-		$this->assertEquals(
+		$this->assertSame(
 			array(
 				'f' => 'foo',
 				'b' => 'bar',
@@ -175,7 +175,7 @@ class Tests_Functions_ListFilter extends WP_UnitTestCase {
 	 */
 	function test_wp_list_pluck_object_index_key() {
 		$list = wp_list_pluck( $this->object_list, 'name', 'id' );
-		$this->assertEquals(
+		$this->assertSame(
 			array(
 				'f' => 'foo',
 				'b' => 'bar',
@@ -190,7 +190,7 @@ class Tests_Functions_ListFilter extends WP_UnitTestCase {
 	 */
 	function test_wp_list_pluck_missing_index_key() {
 		$list = wp_list_pluck( $this->array_list, 'name', 'nonexistent' );
-		$this->assertEquals(
+		$this->assertSame(
 			array(
 				0 => 'foo',
 				1 => 'bar',
@@ -207,7 +207,7 @@ class Tests_Functions_ListFilter extends WP_UnitTestCase {
 		$array_list = $this->array_list;
 		unset( $array_list['bar']['id'] );
 		$list = wp_list_pluck( $array_list, 'name', 'id' );
-		$this->assertEquals(
+		$this->assertSame(
 			array(
 				'f' => 'foo',
 				0   => 'bar',
@@ -224,7 +224,7 @@ class Tests_Functions_ListFilter extends WP_UnitTestCase {
 		$mixed_list        = $this->array_list;
 		$mixed_list['bar'] = (object) $mixed_list['bar'];
 		$list              = wp_list_pluck( $mixed_list, 'name', 'id' );
-		$this->assertEquals(
+		$this->assertSame(
 			array(
 				'f' => 'foo',
 				'b' => 'bar',
@@ -247,7 +247,7 @@ class Tests_Functions_ListFilter extends WP_UnitTestCase {
 		$this->assertInstanceOf( 'stdClass', $ref_list[1] );
 
 		$list = wp_list_pluck( $ref_list, 'name' );
-		$this->assertEquals(
+		$this->assertSame(
 			array(
 				'foo',
 				'bar',
@@ -272,7 +272,7 @@ class Tests_Functions_ListFilter extends WP_UnitTestCase {
 		$this->assertInstanceOf( 'stdClass', $ref_list[1] );
 
 		$list = wp_list_pluck( $ref_list, 'name', 'id' );
-		$this->assertEquals(
+		$this->assertSame(
 			array(
 				'f' => 'foo',
 				'b' => 'bar',
@@ -286,13 +286,13 @@ class Tests_Functions_ListFilter extends WP_UnitTestCase {
 
 	function test_filter_object_list_nested_array_and() {
 		$list = wp_filter_object_list( $this->object_list, array( 'field4' => array( 'blue' ) ), 'AND' );
-		$this->assertEquals( 1, count( $list ) );
+		$this->assertSame( 1, count( $list ) );
 		$this->assertArrayHasKey( 'baz', $list );
 	}
 
 	function test_filter_object_list_nested_array_not() {
 		$list = wp_filter_object_list( $this->object_list, array( 'field4' => array( 'red' ) ), 'NOT' );
-		$this->assertEquals( 2, count( $list ) );
+		$this->assertSame( 2, count( $list ) );
 		$this->assertArrayHasKey( 'bar', $list );
 		$this->assertArrayHasKey( 'baz', $list );
 	}
@@ -306,26 +306,26 @@ class Tests_Functions_ListFilter extends WP_UnitTestCase {
 			),
 			'OR'
 		);
-		$this->assertEquals( 2, count( $list ) );
+		$this->assertSame( 2, count( $list ) );
 		$this->assertArrayHasKey( 'foo', $list );
 		$this->assertArrayHasKey( 'baz', $list );
 	}
 
 	function test_filter_object_list_nested_array_or_singular() {
 		$list = wp_filter_object_list( $this->object_list, array( 'field4' => array( 'blue' ) ), 'OR' );
-		$this->assertEquals( 1, count( $list ) );
+		$this->assertSame( 1, count( $list ) );
 		$this->assertArrayHasKey( 'baz', $list );
 	}
 
 
 	function test_filter_object_list_nested_array_and_field() {
 		$list = wp_filter_object_list( $this->object_list, array( 'field4' => array( 'blue' ) ), 'AND', 'name' );
-		$this->assertEquals( array( 'baz' => 'baz' ), $list );
+		$this->assertSame( array( 'baz' => 'baz' ), $list );
 	}
 
 	function test_filter_object_list_nested_array_not_field() {
 		$list = wp_filter_object_list( $this->object_list, array( 'field4' => array( 'green' ) ), 'NOT', 'name' );
-		$this->assertEquals(
+		$this->assertSame(
 			array(
 				'foo' => 'foo',
 				'baz' => 'baz',
@@ -344,7 +344,7 @@ class Tests_Functions_ListFilter extends WP_UnitTestCase {
 			'OR',
 			'name'
 		);
-		$this->assertEquals(
+		$this->assertSame(
 			array(
 				'foo' => 'foo',
 				'baz' => 'baz',
diff --git a/tests/functions/wpListUtil.php b/tests/functions/wpListUtil.php
index ef7ac45620..82265845b9 100644
--- a/tests/functions/wpListUtil.php
+++ b/tests/functions/wpListUtil.php
@@ -3,7 +3,8 @@
 /**
  * @group functions.php
  */
-class Tests_WP_List_Util extends WP_UnitTestCase {
+class Tests_Functions_wpListUtil extends WP_UnitTestCase {
+
 	public function data_test_wp_list_pluck() {
 		return array(
 			'arrays'                         => array(
@@ -72,9 +73,9 @@ class Tests_WP_List_Util extends WP_UnitTestCase {
 				'foo',
 				'key',
 				array(
+					'bar',
 					'bar'   => 'foo',
 					'value' => 'baz',
-					'bar',
 				),
 			),
 			'objects'                        => array(
@@ -143,9 +144,9 @@ class Tests_WP_List_Util extends WP_UnitTestCase {
 				'foo',
 				'key',
 				array(
+					'bar',
 					'bar'   => 'foo',
 					'value' => 'baz',
-					'bar',
 				),
 			),
 		);
@@ -160,7 +161,7 @@ class Tests_WP_List_Util extends WP_UnitTestCase {
 	 * @param array      $expected  Expected result.
 	 */
 	public function test_wp_list_pluck( $list, $field, $index_key, $expected ) {
-		$this->assertEqualSetsWithIndex( $expected, wp_list_pluck( $list, $field, $index_key ) );
+		$this->assertSameSetsWithIndex( $expected, wp_list_pluck( $list, $field, $index_key ) );
 	}
 
 	public function data_test_wp_list_filter() {
@@ -690,7 +691,7 @@ class Tests_WP_List_Util extends WP_UnitTestCase {
 	 * @param string       $order   Either 'ASC' or 'DESC'.
 	 */
 	public function test_wp_list_sort( $list, $orderby, $order, $expected ) {
-		$this->assertEquals( $expected, wp_list_sort( $list, $orderby, $order ) );
+		$this->assertSame( $expected, wp_list_sort( $list, $orderby, $order ) );
 	}
 
 	public function data_test_wp_list_sort_preserve_keys() {
@@ -1015,21 +1016,21 @@ class Tests_WP_List_Util extends WP_UnitTestCase {
 	 * @param string       $order   Either 'ASC' or 'DESC'.
 	 */
 	public function test_wp_list_sort_preserve_keys( $list, $orderby, $order, $expected ) {
-		$this->assertEquals( $expected, wp_list_sort( $list, $orderby, $order, true ) );
+		$this->assertSame( $expected, wp_list_sort( $list, $orderby, $order, true ) );
 	}
 
 	public function test_wp_list_util_get_input() {
 		$input = array( 'foo', 'bar' );
 		$util  = new WP_List_Util( $input );
 
-		$this->assertEqualSets( $input, $util->get_input() );
+		$this->assertSameSets( $input, $util->get_input() );
 	}
 
 	public function test_wp_list_util_get_output_immediately() {
 		$input = array( 'foo', 'bar' );
 		$util  = new WP_List_Util( $input );
 
-		$this->assertEqualSets( $input, $util->get_output() );
+		$this->assertSameSets( $input, $util->get_output() );
 	}
 
 	public function test_wp_list_util_get_output() {
diff --git a/tests/functions/wpRemoteFopen.php b/tests/functions/wpRemoteFopen.php
new file mode 100644
index 0000000000..ce3d8f37dd
--- /dev/null
+++ b/tests/functions/wpRemoteFopen.php
@@ -0,0 +1,34 @@
+<?php
+/**
+ * @group http
+ * @group external-http
+ * @group functions.php
+ */
+class Tests_Functions_wpRemoteFopen extends WP_UnitTestCase {
+
+	/**
+	 * @ticket 48845
+	 */
+	public function test_wp_remote_fopen_empty() {
+		$this->assertFalse( wp_remote_fopen( '' ) );
+	}
+
+	/**
+	 * @ticket 48845
+	 */
+	public function test_wp_remote_fopen_bad_url() {
+		$this->assertFalse( wp_remote_fopen( 'wp.com' ) );
+	}
+
+	/**
+	 * @ticket 48845
+	 */
+	public function test_wp_remote_fopen() {
+		// This URL gives a direct 200 response.
+		$url      = 'https://asdftestblog1.files.wordpress.com/2007/09/2007-06-30-dsc_4700-1.jpg';
+		$response = wp_remote_fopen( $url );
+
+		$this->assertInternalType( 'string', $response );
+		$this->assertSame( 40148, strlen( $response ) );
+	}
+}
diff --git a/tests/functions/WpValidateBoolean.php b/tests/functions/wpValidateBoolean.php
similarity index 95%
rename from tests/functions/WpValidateBoolean.php
rename to tests/functions/wpValidateBoolean.php
index 833b731425..848bccf236 100644
--- a/tests/functions/WpValidateBoolean.php
+++ b/tests/functions/wpValidateBoolean.php
@@ -6,7 +6,7 @@
  * @covers ::wp_validate_boolean
  * @group functions.php
  */
-class Tests_Functions_WpValidateBoolean extends WP_UnitTestCase {
+class Tests_Functions_wpValidateBoolean extends WP_UnitTestCase {
 	/**
 	 * Provides test scenarios for all possible scenarios in wp_validate_boolean().
 	 *
diff --git a/tests/general/archives.php b/tests/general/archives.php
index f32bb6bcbc..88cfbd8311 100644
--- a/tests/general/archives.php
+++ b/tests/general/archives.php
@@ -32,7 +32,7 @@ class Tests_General_Archives extends WP_UnitTestCase {
 		$this->assertInternalType( 'string', $result );
 		$time1 = wp_cache_get( 'last_changed', 'posts' );
 		$this->assertNotEmpty( $time1 );
-		$this->assertEquals( $num_queries + 1, $wpdb->num_queries );
+		$this->assertSame( $num_queries + 1, $wpdb->num_queries );
 
 		$num_queries = $wpdb->num_queries;
 
@@ -44,8 +44,8 @@ class Tests_General_Archives extends WP_UnitTestCase {
 			)
 		);
 		$this->assertInternalType( 'string', $result );
-		$this->assertEquals( $time1, wp_cache_get( 'last_changed', 'posts' ) );
-		$this->assertEquals( $num_queries, $wpdb->num_queries );
+		$this->assertSame( $time1, wp_cache_get( 'last_changed', 'posts' ) );
+		$this->assertSame( $num_queries, $wpdb->num_queries );
 
 		// Change args, resulting in a different query string. Cache is not primed, expect 1 query.
 		$result = wp_get_archives(
@@ -56,8 +56,8 @@ class Tests_General_Archives extends WP_UnitTestCase {
 			)
 		);
 		$this->assertInternalType( 'string', $result );
-		$this->assertEquals( $time1, wp_cache_get( 'last_changed', 'posts' ) );
-		$this->assertEquals( $num_queries + 1, $wpdb->num_queries );
+		$this->assertSame( $time1, wp_cache_get( 'last_changed', 'posts' ) );
+		$this->assertSame( $num_queries + 1, $wpdb->num_queries );
 
 		$num_queries = $wpdb->num_queries;
 
@@ -70,8 +70,8 @@ class Tests_General_Archives extends WP_UnitTestCase {
 			)
 		);
 		$this->assertInternalType( 'string', $result );
-		$this->assertEquals( $time1, wp_cache_get( 'last_changed', 'posts' ) );
-		$this->assertEquals( $num_queries, $wpdb->num_queries );
+		$this->assertSame( $time1, wp_cache_get( 'last_changed', 'posts' ) );
+		$this->assertSame( $num_queries, $wpdb->num_queries );
 
 		$num_queries = $wpdb->num_queries;
 
@@ -83,8 +83,8 @@ class Tests_General_Archives extends WP_UnitTestCase {
 			)
 		);
 		$this->assertInternalType( 'string', $result );
-		$this->assertEquals( $time1, wp_cache_get( 'last_changed', 'posts' ) );
-		$this->assertEquals( $num_queries + 1, $wpdb->num_queries );
+		$this->assertSame( $time1, wp_cache_get( 'last_changed', 'posts' ) );
+		$this->assertSame( $num_queries + 1, $wpdb->num_queries );
 
 		$num_queries = $wpdb->num_queries;
 
@@ -96,8 +96,8 @@ class Tests_General_Archives extends WP_UnitTestCase {
 			)
 		);
 		$this->assertInternalType( 'string', $result );
-		$this->assertEquals( $time1, wp_cache_get( 'last_changed', 'posts' ) );
-		$this->assertEquals( $num_queries, $wpdb->num_queries );
+		$this->assertSame( $time1, wp_cache_get( 'last_changed', 'posts' ) );
+		$this->assertSame( $num_queries, $wpdb->num_queries );
 
 		// Change type. Cache is not primed, expect 1 query.
 		$result = wp_get_archives(
@@ -107,8 +107,8 @@ class Tests_General_Archives extends WP_UnitTestCase {
 			)
 		);
 		$this->assertInternalType( 'string', $result );
-		$this->assertEquals( $time1, wp_cache_get( 'last_changed', 'posts' ) );
-		$this->assertEquals( $num_queries + 1, $wpdb->num_queries );
+		$this->assertSame( $time1, wp_cache_get( 'last_changed', 'posts' ) );
+		$this->assertSame( $num_queries + 1, $wpdb->num_queries );
 
 		$num_queries = $wpdb->num_queries;
 
@@ -120,8 +120,8 @@ class Tests_General_Archives extends WP_UnitTestCase {
 			)
 		);
 		$this->assertInternalType( 'string', $result );
-		$this->assertEquals( $time1, wp_cache_get( 'last_changed', 'posts' ) );
-		$this->assertEquals( $num_queries, $wpdb->num_queries );
+		$this->assertSame( $time1, wp_cache_get( 'last_changed', 'posts' ) );
+		$this->assertSame( $num_queries, $wpdb->num_queries );
 
 		// Change type. Cache is not primed, expect 1 query.
 		$result = wp_get_archives(
@@ -131,8 +131,8 @@ class Tests_General_Archives extends WP_UnitTestCase {
 			)
 		);
 		$this->assertInternalType( 'string', $result );
-		$this->assertEquals( $time1, wp_cache_get( 'last_changed', 'posts' ) );
-		$this->assertEquals( $num_queries + 1, $wpdb->num_queries );
+		$this->assertSame( $time1, wp_cache_get( 'last_changed', 'posts' ) );
+		$this->assertSame( $num_queries + 1, $wpdb->num_queries );
 
 		$num_queries = $wpdb->num_queries;
 
@@ -144,8 +144,8 @@ class Tests_General_Archives extends WP_UnitTestCase {
 			)
 		);
 		$this->assertInternalType( 'string', $result );
-		$this->assertEquals( $time1, wp_cache_get( 'last_changed', 'posts' ) );
-		$this->assertEquals( $num_queries, $wpdb->num_queries );
+		$this->assertSame( $time1, wp_cache_get( 'last_changed', 'posts' ) );
+		$this->assertSame( $num_queries, $wpdb->num_queries );
 
 		// Change type. Cache is not primed, expect 1 query.
 		$result = wp_get_archives(
@@ -155,8 +155,8 @@ class Tests_General_Archives extends WP_UnitTestCase {
 			)
 		);
 		$this->assertInternalType( 'string', $result );
-		$this->assertEquals( $time1, wp_cache_get( 'last_changed', 'posts' ) );
-		$this->assertEquals( $num_queries + 1, $wpdb->num_queries );
+		$this->assertSame( $time1, wp_cache_get( 'last_changed', 'posts' ) );
+		$this->assertSame( $num_queries + 1, $wpdb->num_queries );
 
 		$num_queries = $wpdb->num_queries;
 
@@ -168,7 +168,7 @@ class Tests_General_Archives extends WP_UnitTestCase {
 			)
 		);
 		$this->assertInternalType( 'string', $result );
-		$this->assertEquals( $time1, wp_cache_get( 'last_changed', 'posts' ) );
-		$this->assertEquals( $num_queries, $wpdb->num_queries );
+		$this->assertSame( $time1, wp_cache_get( 'last_changed', 'posts' ) );
+		$this->assertSame( $num_queries, $wpdb->num_queries );
 	}
 }
diff --git a/tests/general/document-title.php b/tests/general/document-title.php
index 826a14a7cd..a15f926ea9 100644
--- a/tests/general/document-title.php
+++ b/tests/general/document-title.php
@@ -80,7 +80,7 @@ class Tests_General_DocumentTitle extends WP_UnitTestCase {
 
 		add_filter( 'pre_get_document_title', array( $this, '_short_circuit_title' ) );
 
-		$this->assertEquals( 'A Wild Title', wp_get_document_title() );
+		$this->assertSame( 'A Wild Title', wp_get_document_title() );
 	}
 
 	function _short_circuit_title( $title ) {
@@ -101,12 +101,12 @@ class Tests_General_DocumentTitle extends WP_UnitTestCase {
 		add_filter( 'document_title_parts', array( $this, '_front_page_title_parts' ) );
 
 		$this->go_to( '/' );
-		$this->assertEquals( sprintf( '%s &#8211; Just another WordPress site', $this->blog_name ), wp_get_document_title() );
+		$this->assertSame( sprintf( '%s &#8211; Just another WordPress site', $this->blog_name ), wp_get_document_title() );
 
 		update_option( 'show_on_front', 'posts' );
 
 		$this->go_to( '/' );
-		$this->assertEquals( sprintf( '%s &#8211; Just another WordPress site', $this->blog_name ), wp_get_document_title() );
+		$this->assertSame( sprintf( '%s &#8211; Just another WordPress site', $this->blog_name ), wp_get_document_title() );
 	}
 
 	function _front_page_title_parts( $parts ) {
@@ -129,7 +129,7 @@ class Tests_General_DocumentTitle extends WP_UnitTestCase {
 
 		// Show page name on home page if it's not the front page.
 		$this->go_to( get_permalink( $blog_page_id ) );
-		$this->assertEquals( sprintf( 'blog-page &#8211; %s', $this->blog_name ), wp_get_document_title() );
+		$this->assertSame( sprintf( 'blog-page &#8211; %s', $this->blog_name ), wp_get_document_title() );
 	}
 
 	function test_paged_title() {
@@ -137,7 +137,7 @@ class Tests_General_DocumentTitle extends WP_UnitTestCase {
 
 		add_filter( 'document_title_parts', array( $this, '_paged_title_parts' ) );
 
-		$this->assertEquals( sprintf( '%s &#8211; Page 4 &#8211; Just another WordPress site', $this->blog_name ), wp_get_document_title() );
+		$this->assertSame( sprintf( '%s &#8211; Page 4 &#8211; Just another WordPress site', $this->blog_name ), wp_get_document_title() );
 	}
 
 	function _paged_title_parts( $parts ) {
@@ -154,7 +154,7 @@ class Tests_General_DocumentTitle extends WP_UnitTestCase {
 
 		add_filter( 'document_title_parts', array( $this, '_singular_title_parts' ) );
 
-		$this->assertEquals( sprintf( 'test_title &#8211; %s', $this->blog_name ), wp_get_document_title() );
+		$this->assertSame( sprintf( 'test_title &#8211; %s', $this->blog_name ), wp_get_document_title() );
 	}
 
 	function _singular_title_parts( $parts ) {
@@ -168,19 +168,19 @@ class Tests_General_DocumentTitle extends WP_UnitTestCase {
 	function test_category_title() {
 		$this->go_to( '?cat=' . self::$category_id );
 
-		$this->assertEquals( sprintf( 'test_category &#8211; %s', $this->blog_name ), wp_get_document_title() );
+		$this->assertSame( sprintf( 'test_category &#8211; %s', $this->blog_name ), wp_get_document_title() );
 	}
 
 	function test_search_title() {
 		$this->go_to( '?s=test_title' );
 
-		$this->assertEquals( sprintf( 'Search Results for &#8220;test_title&#8221; &#8211; %s', $this->blog_name ), wp_get_document_title() );
+		$this->assertSame( sprintf( 'Search Results for &#8220;test_title&#8221; &#8211; %s', $this->blog_name ), wp_get_document_title() );
 	}
 
 	function test_author_title() {
 		$this->go_to( '?author=' . self::$author_id );
 
-		$this->assertEquals( sprintf( 'test_author &#8211; %s', $this->blog_name ), wp_get_document_title() );
+		$this->assertSame( sprintf( 'test_author &#8211; %s', $this->blog_name ), wp_get_document_title() );
 	}
 
 	function test_post_type_archive_title() {
@@ -203,31 +203,31 @@ class Tests_General_DocumentTitle extends WP_UnitTestCase {
 
 		$this->go_to( '?post_type=cpt' );
 
-		$this->assertEquals( sprintf( 'test_cpt &#8211; %s', $this->blog_name ), wp_get_document_title() );
+		$this->assertSame( sprintf( 'test_cpt &#8211; %s', $this->blog_name ), wp_get_document_title() );
 	}
 
 	function test_year_title() {
 		$this->go_to( '?year=2015' );
 
-		$this->assertEquals( sprintf( '2015 &#8211; %s', $this->blog_name ), wp_get_document_title() );
+		$this->assertSame( sprintf( '2015 &#8211; %s', $this->blog_name ), wp_get_document_title() );
 	}
 
 	function test_month_title() {
 		$this->go_to( '?monthnum=09' );
 
-		$this->assertEquals( sprintf( 'September 2015 &#8211; %s', $this->blog_name ), wp_get_document_title() );
+		$this->assertSame( sprintf( 'September 2015 &#8211; %s', $this->blog_name ), wp_get_document_title() );
 	}
 
 	function test_day_title() {
 		$this->go_to( '?day=22' );
 
-		$this->assertEquals( sprintf( 'September 22, 2015 &#8211; %s', $this->blog_name ), wp_get_document_title() );
+		$this->assertSame( sprintf( 'September 22, 2015 &#8211; %s', $this->blog_name ), wp_get_document_title() );
 	}
 
 	function test_404_title() {
 		$this->go_to( '?m=404' );
 
-		$this->assertEquals( sprintf( 'Page not found &#8211; %s', $this->blog_name ), wp_get_document_title() );
+		$this->assertSame( sprintf( 'Page not found &#8211; %s', $this->blog_name ), wp_get_document_title() );
 	}
 
 	function test_paged_post_title() {
@@ -235,7 +235,7 @@ class Tests_General_DocumentTitle extends WP_UnitTestCase {
 
 		add_filter( 'title_tag_parts', array( $this, '_paged_post_title_parts' ) );
 
-		$this->assertEquals( sprintf( 'test_title &#8211; Page 4 &#8211; %s', $this->blog_name ), wp_get_document_title() );
+		$this->assertSame( sprintf( 'test_title &#8211; Page 4 &#8211; %s', $this->blog_name ), wp_get_document_title() );
 	}
 
 	function _paged_post_title_parts( $parts ) {
@@ -252,7 +252,7 @@ class Tests_General_DocumentTitle extends WP_UnitTestCase {
 
 		add_filter( 'document_title_parts', array( $this, '_rearrange_title_parts' ) );
 
-		$this->assertEquals( sprintf( '%s &#8211; test_title', $this->blog_name ), wp_get_document_title() );
+		$this->assertSame( sprintf( '%s &#8211; test_title', $this->blog_name ), wp_get_document_title() );
 	}
 
 	function _rearrange_title_parts( $parts ) {
@@ -269,7 +269,7 @@ class Tests_General_DocumentTitle extends WP_UnitTestCase {
 
 		add_filter( 'document_title_separator', array( $this, '_change_title_separator' ) );
 
-		$this->assertEquals( sprintf( 'test_title %%%% %s', $this->blog_name ), wp_get_document_title() );
+		$this->assertSame( sprintf( 'test_title %%%% %s', $this->blog_name ), wp_get_document_title() );
 	}
 
 	function _change_title_separator( $sep ) {
diff --git a/tests/general/paginateLinks.php b/tests/general/paginateLinks.php
index dc7195c5f9..be6ce5b2ea 100644
--- a/tests/general/paginateLinks.php
+++ b/tests/general/paginateLinks.php
@@ -25,7 +25,7 @@ class Tests_Paginate_Links extends WP_UnitTestCase {
 EXPECTED;
 
 		$links = paginate_links( array( 'total' => 50 ) );
-		$this->assertEqualsIgnoreEOL( $expected, $links );
+		$this->assertSameIgnoreEOL( $expected, $links );
 	}
 
 	function test_format() {
@@ -48,7 +48,7 @@ EXPECTED;
 				'format' => 'page/%#%/',
 			)
 		);
-		$this->assertEqualsIgnoreEOL( $expected, $links );
+		$this->assertSameIgnoreEOL( $expected, $links );
 	}
 
 	function test_prev_next_false() {
@@ -73,7 +73,7 @@ EXPECTED;
 				'current'   => 2,
 			)
 		);
-		$this->assertEqualsIgnoreEOL( $expected, $links );
+		$this->assertSameIgnoreEOL( $expected, $links );
 	}
 
 	function test_prev_next_true() {
@@ -100,7 +100,7 @@ EXPECTED;
 				'current'   => 2,
 			)
 		);
-		$this->assertEqualsIgnoreEOL( $expected, $links );
+		$this->assertSameIgnoreEOL( $expected, $links );
 	}
 
 	function increment_i18n_count() {
@@ -125,7 +125,7 @@ EXPECTED;
 		);
 		// The links should be:
 		// < Previous 1 ... 49 50 51 ... 100 Next >
-		$this->assertEquals( 5, $this->i18n_count );
+		$this->assertSame( 5, $this->i18n_count );
 		remove_filter( 'number_format_i18n', array( $this, 'increment_i18n_count' ) );
 	}
 
@@ -134,7 +134,7 @@ EXPECTED;
 	 */
 	function test_paginate_links_base_value() {
 
-		// Current page: 2
+		// Current page: 2.
 		$links = paginate_links(
 			array(
 				'current'  => 2,
@@ -159,7 +159,7 @@ EXPECTED;
 		$document                     = new DOMDocument();
 		$document->preserveWhiteSpace = false;
 
-		// The first two links should link to page 1
+		// The first two links should link to page 1.
 		foreach ( $expected_attributes as $link_idx => $attributes ) {
 
 			$document->loadHTML( $links[ $link_idx ] );
@@ -170,11 +170,11 @@ EXPECTED;
 			$href  = $tag->attributes->getNamedItem( 'href' )->value;
 			$class = $tag->attributes->getNamedItem( 'class' )->value;
 
-			$this->assertEquals( $attributes['href'], $href );
-			$this->assertEquals( $attributes['class'], $class );
+			$this->assertSame( $attributes['href'], $href );
+			$this->assertSame( $attributes['class'], $class );
 		}
 
-		// Current page: 1
+		// Current page: 1.
 		$links = paginate_links(
 			array(
 				'current'  => 1,
@@ -190,14 +190,14 @@ EXPECTED;
 		$this->assertNotNull( $tag );
 
 		$class = $tag->attributes->getNamedItem( 'class' )->value;
-		$this->assertEquals( 'page-numbers current', $class );
+		$this->assertSame( 'page-numbers current', $class );
 
 		$document->loadHTML( $links[1] );
 		$tag = $document->getElementsByTagName( 'a' )->item( 0 );
 		$this->assertNotNull( $tag );
 
 		$href = $tag->attributes->getNamedItem( 'href' )->value;
-		$this->assertEquals( get_pagenum_link( 2 ), $href );
+		$this->assertSame( get_pagenum_link( 2 ), $href );
 	}
 
 	function add_query_arg( $url ) {
@@ -244,7 +244,7 @@ EXPECTED;
 			$this->assertNotNull( $tag );
 
 			$href = $tag->attributes->getNamedItem( 'href' )->value;
-			$this->assertEquals( $expected_href, $href );
+			$this->assertSame( $expected_href, $href );
 		}
 	}
 
@@ -284,7 +284,7 @@ EXPECTED;
 			$this->assertNotNull( $tag );
 
 			$href = $tag->attributes->getNamedItem( 'href' )->value;
-			$this->assertEquals( $expected_href, $href );
+			$this->assertSame( $expected_href, $href );
 		}
 	}
 
@@ -340,7 +340,7 @@ EXPECTED;
 	 * @ticket 31939
 	 */
 	public function test_custom_base_query_arg_should_be_stripped_from_current_url_before_generating_pag_links() {
-		// Fake the current URL: example.com?foo
+		// Fake the current URL: example.com?foo.
 		$request_uri            = $_SERVER['REQUEST_URI'];
 		$_SERVER['REQUEST_URI'] = add_query_arg( 'foo', '', $request_uri );
 
diff --git a/tests/general/resourceHints.php b/tests/general/resourceHints.php
index 624256f54c..d3d10cbecb 100644
--- a/tests/general/resourceHints.php
+++ b/tests/general/resourceHints.php
@@ -50,7 +50,7 @@ class Tests_WP_Resource_Hints extends WP_UnitTestCase {
 
 		remove_filter( 'wp_resource_hints', array( $this, '_add_dns_prefetch_domains' ) );
 
-		$this->assertEquals( $expected, $actual );
+		$this->assertSame( $expected, $actual );
 	}
 
 	function _add_dns_prefetch_domains( $hints, $method ) {
@@ -82,7 +82,7 @@ class Tests_WP_Resource_Hints extends WP_UnitTestCase {
 
 		remove_filter( 'wp_resource_hints', array( $this, '_add_preconnect_domains' ) );
 
-		$this->assertEquals( $expected, $actual );
+		$this->assertSame( $expected, $actual );
 	}
 
 	function _add_preconnect_domains( $hints, $method ) {
@@ -109,7 +109,7 @@ class Tests_WP_Resource_Hints extends WP_UnitTestCase {
 
 		remove_filter( 'wp_resource_hints', array( $this, '_add_prerender_urls' ) );
 
-		$this->assertEquals( $expected, $actual );
+		$this->assertSame( $expected, $actual );
 	}
 
 	function _add_prerender_urls( $hints, $method ) {
@@ -133,7 +133,7 @@ class Tests_WP_Resource_Hints extends WP_UnitTestCase {
 
 		remove_filter( 'wp_resource_hints', array( $this, '_add_dns_prefetch_long_urls' ) );
 
-		$this->assertEquals( $expected, $actual );
+		$this->assertSame( $expected, $actual );
 	}
 
 	function _add_dns_prefetch_long_urls( $hints, $method ) {
@@ -159,7 +159,7 @@ class Tests_WP_Resource_Hints extends WP_UnitTestCase {
 
 		wp_dequeue_style( 'googlefonts' );
 
-		$this->assertEquals( $expected, $actual );
+		$this->assertSame( $expected, $actual );
 
 	}
 
@@ -178,7 +178,7 @@ class Tests_WP_Resource_Hints extends WP_UnitTestCase {
 
 		wp_dequeue_style( 'googlefonts' );
 
-		$this->assertEquals( $expected, $actual );
+		$this->assertSame( $expected, $actual );
 	}
 
 	function test_dns_prefetch_scripts_does_not_included_registered_only() {
@@ -191,7 +191,7 @@ class Tests_WP_Resource_Hints extends WP_UnitTestCase {
 
 		wp_deregister_script( 'jquery-elsewhere' );
 
-		$this->assertEquals( $expected, $actual );
+		$this->assertSame( $expected, $actual );
 		$this->assertNotContains( $unexpected, $actual );
 	}
 
@@ -205,7 +205,7 @@ class Tests_WP_Resource_Hints extends WP_UnitTestCase {
 		wp_deregister_script( 'test-script' );
 
 		$actual = get_echo( 'wp_resource_hints' );
-		$this->assertEquals( $expected, $actual );
+		$this->assertSame( $expected, $actual );
 	}
 
 	/**
@@ -218,13 +218,13 @@ class Tests_WP_Resource_Hints extends WP_UnitTestCase {
 		add_filter( 'wp_resource_hints', array( $this, '_add_malformed_url_errant_colon' ), 10, 2 );
 		$actual = get_echo( 'wp_resource_hints' );
 		remove_filter( 'wp_resource_hints', array( $this, '_add_malformed_url_errant_colon' ) );
-		$this->assertEquals( $expected, $actual );
+		$this->assertSame( $expected, $actual );
 
 		// Unsupported Scheme.
 		add_filter( 'wp_resource_hints', array( $this, '_add_malformed_url_unsupported_scheme' ), 10, 2 );
 		$actual = get_echo( 'wp_resource_hints' );
 		remove_filter( 'wp_resource_hints', array( $this, '_add_malformed_url_unsupported_scheme' ) );
-		$this->assertEquals( $expected, $actual );
+		$this->assertSame( $expected, $actual );
 	}
 
 	function _add_malformed_url_errant_colon( $hints, $method ) {
@@ -259,7 +259,7 @@ class Tests_WP_Resource_Hints extends WP_UnitTestCase {
 
 		remove_filter( 'wp_resource_hints', array( $this, '_add_url_with_attributes' ) );
 
-		$this->assertEquals( $expected, $actual );
+		$this->assertSame( $expected, $actual );
 	}
 
 	function _add_url_with_attributes( $hints, $method ) {
diff --git a/tests/general/template.php b/tests/general/template.php
index 648e22661a..096cf8bce8 100644
--- a/tests/general/template.php
+++ b/tests/general/template.php
@@ -6,7 +6,7 @@
  * @group site_icon
  */
 
-require_once( ABSPATH . 'wp-admin/includes/class-wp-site-icon.php' );
+require_once ABSPATH . 'wp-admin/includes/class-wp-site-icon.php';
 
 class Tests_General_Template extends WP_UnitTestCase {
 	protected $wp_site_icon;
@@ -38,7 +38,7 @@ class Tests_General_Template extends WP_UnitTestCase {
 		$this->assertEmpty( get_site_icon_url() );
 
 		$this->_set_site_icon();
-		$this->assertEquals( $this->site_icon_url, get_site_icon_url() );
+		$this->assertSame( $this->site_icon_url, get_site_icon_url() );
 
 		$this->_remove_site_icon();
 		$this->assertEmpty( get_site_icon_url() );
@@ -105,7 +105,7 @@ class Tests_General_Template extends WP_UnitTestCase {
 		$output = array(
 			sprintf( '<link rel="icon" href="%s" sizes="32x32" />', esc_url( get_site_icon_url( 32 ) ) ),
 			sprintf( '<link rel="icon" href="%s" sizes="192x192" />', esc_url( get_site_icon_url( 192 ) ) ),
-			sprintf( '<link rel="apple-touch-icon-precomposed" href="%s" />', esc_url( get_site_icon_url( 180 ) ) ),
+			sprintf( '<link rel="apple-touch-icon" href="%s" />', esc_url( get_site_icon_url( 180 ) ) ),
 			sprintf( '<meta name="msapplication-TileImage" content="%s" />', esc_url( get_site_icon_url( 270 ) ) ),
 			'',
 		);
@@ -126,7 +126,7 @@ class Tests_General_Template extends WP_UnitTestCase {
 		$output = array(
 			sprintf( '<link rel="icon" href="%s" sizes="32x32" />', esc_url( get_site_icon_url( 32 ) ) ),
 			sprintf( '<link rel="icon" href="%s" sizes="192x192" />', esc_url( get_site_icon_url( 192 ) ) ),
-			sprintf( '<link rel="apple-touch-icon-precomposed" href="%s" />', esc_url( get_site_icon_url( 180 ) ) ),
+			sprintf( '<link rel="apple-touch-icon" href="%s" />', esc_url( get_site_icon_url( 180 ) ) ),
 			sprintf( '<meta name="msapplication-TileImage" content="%s" />', esc_url( get_site_icon_url( 270 ) ) ),
 			sprintf( '<link rel="apple-touch-icon" sizes="150x150" href="%s" />', esc_url( get_site_icon_url( 150 ) ) ),
 			'',
@@ -175,7 +175,7 @@ class Tests_General_Template extends WP_UnitTestCase {
 		$output = array(
 			sprintf( '<link rel="icon" href="%s" sizes="32x32" />', esc_url( wp_get_attachment_image_url( $attachment_id, 32 ) ) ),
 			sprintf( '<link rel="icon" href="%s" sizes="192x192" />', esc_url( wp_get_attachment_image_url( $attachment_id, 192 ) ) ),
-			sprintf( '<link rel="apple-touch-icon-precomposed" href="%s" />', esc_url( wp_get_attachment_image_url( $attachment_id, 180 ) ) ),
+			sprintf( '<link rel="apple-touch-icon" href="%s" />', esc_url( wp_get_attachment_image_url( $attachment_id, 180 ) ) ),
 			sprintf( '<meta name="msapplication-TileImage" content="%s" />', esc_url( wp_get_attachment_image_url( $attachment_id, 270 ) ) ),
 			'',
 		);
@@ -234,7 +234,7 @@ class Tests_General_Template extends WP_UnitTestCase {
 		$upload              = wp_upload_bits( wp_basename( $filename ), null, $contents );
 		$this->site_icon_url = $upload['url'];
 
-		// Save the data
+		// Save the data.
 		$this->site_icon_id = $this->_make_attachment( $upload );
 		return $this->site_icon_id;
 	}
@@ -308,7 +308,8 @@ class Tests_General_Template extends WP_UnitTestCase {
 		$this->_set_custom_logo();
 
 		$custom_logo_attr = array(
-			'class' => 'custom-logo',
+			'class'   => 'custom-logo',
+			'loading' => false,
 		);
 
 		// If the logo alt attribute is empty, use the site title.
@@ -322,7 +323,7 @@ class Tests_General_Template extends WP_UnitTestCase {
 		restore_current_blog();
 
 		$expected_custom_logo = '<a href="' . $home_url . '" class="custom-logo-link" rel="home">' . $image . '</a>';
-		$this->assertEquals( $expected_custom_logo, get_custom_logo( $blog_id ) );
+		$this->assertSame( $expected_custom_logo, get_custom_logo( $blog_id ) );
 	}
 
 	/**
@@ -337,7 +338,8 @@ class Tests_General_Template extends WP_UnitTestCase {
 		$this->_set_custom_logo();
 
 		$custom_logo_attr = array(
-			'class' => 'custom-logo',
+			'class'   => 'custom-logo',
+			'loading' => false,
 		);
 
 		// If the logo alt attribute is empty, use the site title.
@@ -368,7 +370,8 @@ class Tests_General_Template extends WP_UnitTestCase {
 			'full',
 			false,
 			array(
-				'class' => 'custom-logo',
+				'class'   => 'custom-logo',
+				'loading' => false,
 			)
 		);
 
@@ -414,148 +417,6 @@ class Tests_General_Template extends WP_UnitTestCase {
 		return $this->custom_logo_id;
 	}
 
-	/**
-	 * Test get_the_modified_time
-	 *
-	 * @ticket 37059
-	 *
-	 * @since 4.6.0
-	 */
-	function test_get_the_modified_time_default() {
-		$details = array(
-			'post_date'     => '2016-01-21 15:34:36',
-			'post_date_gmt' => '2016-01-21 15:34:36',
-		);
-		$post_id = $this->factory->post->create( $details );
-		$post    = get_post( $post_id );
-
-		$GLOBALS['post'] = $post;
-
-		$expected = '1453390476';
-		$d        = 'G';
-		$actual   = get_the_modified_time( $d );
-		$this->assertEquals( $expected, $actual );
-	}
-
-	/**
-	 * Test get_the_modified_time failures are filtered
-	 *
-	 * @ticket 37059
-	 *
-	 * @since 4.6.0
-	 */
-	function test_get_the_modified_time_failures_are_filtered() {
-		// Remove global post objet
-		$GLOBALS['post'] = null;
-
-		$expected = 'filtered modified time failure result';
-		add_filter( 'get_the_modified_time', array( $this, '_filter_get_the_modified_time_failure' ) );
-		$actual = get_the_modified_time();
-		$this->assertEquals( $expected, $actual );
-		remove_filter( 'get_the_modified_time', array( $this, '_filter_get_the_modified_time_failure' ) );
-	}
-
-	function _filter_get_the_modified_time_failure( $the_time ) {
-		$expected = false;
-		$actual   = $the_time;
-		$this->assertEquals( $expected, $actual );
-
-		if ( false === $the_time ) {
-			return 'filtered modified time failure result';
-		}
-		return $the_time;
-	}
-
-	/**
-	 * Test get_the_modified_time with post_id parameter.
-	 *
-	 * @ticket 37059
-	 *
-	 * @since 4.6.0
-	 */
-	function test_get_the_modified_date_with_post_id() {
-		$details  = array(
-			'post_date'     => '2016-01-21 15:34:36',
-			'post_date_gmt' => '2016-01-21 15:34:36',
-		);
-		$post_id  = $this->factory->post->create( $details );
-		$d        = 'Y-m-d';
-		$expected = '2016-01-21';
-		$actual   = get_the_modified_date( $d, $post_id );
-		$this->assertEquals( $expected, $actual );
-	}
-
-	/**
-	 * Test get_the_modified_date
-	 *
-	 * @ticket 37059
-	 *
-	 * @since 4.6.0
-	 */
-	function test_get_the_modified_date_default() {
-		$details = array(
-			'post_date'     => '2016-01-21 15:34:36',
-			'post_date_gmt' => '2016-01-21 15:34:36',
-		);
-		$post_id = $this->factory->post->create( $details );
-		$post    = get_post( $post_id );
-
-		$GLOBALS['post'] = $post;
-
-		$expected = '2016-01-21';
-		$d        = 'Y-m-d';
-		$actual   = get_the_modified_date( $d );
-		$this->assertEquals( $expected, $actual );
-	}
-
-	/**
-	 * Test get_the_modified_date failures are filtered
-	 *
-	 * @ticket 37059
-	 *
-	 * @since 4.6.0
-	 */
-	function test_get_the_modified_date_failures_are_filtered() {
-		// Remove global post objet
-		$GLOBALS['post'] = null;
-
-		$expected = 'filtered modified date failure result';
-		add_filter( 'get_the_modified_date', array( $this, '_filter_get_the_modified_date_failure' ) );
-		$actual = get_the_modified_date();
-		$this->assertEquals( $expected, $actual );
-		remove_filter( 'get_the_modified_date', array( $this, '_filter_get_the_modified_date_failure' ) );
-	}
-
-	function _filter_get_the_modified_date_failure( $the_date ) {
-		$expected = false;
-		$actual   = $the_date;
-		$this->assertEquals( $expected, $actual );
-
-		if ( false === $the_date ) {
-			return 'filtered modified date failure result';
-		}
-		return $the_date;
-	}
-
-	/**
-	 * Test get_the_modified_time with post_id parameter.
-	 *
-	 * @ticket 37059
-	 *
-	 * @since 4.6.0
-	 */
-	function test_get_the_modified_time_with_post_id() {
-		$details  = array(
-			'post_date'     => '2016-01-21 15:34:36',
-			'post_date_gmt' => '2016-01-21 15:34:36',
-		);
-		$post_id  = $this->factory->post->create( $details );
-		$d        = 'G';
-		$expected = '1453390476';
-		$actual   = get_the_modified_time( $d, $post_id );
-		$this->assertEquals( $expected, $actual );
-	}
-
 	/**
 	 * @ticket 38253
 	 * @group ms-required
@@ -631,15 +492,101 @@ class Tests_General_Template extends WP_UnitTestCase {
 	/**
 	 * @ticket 40969
 	 */
-	function test_get_template_part_returns_nothing() {
-		ob_start();
+	function test_get_header_returns_nothing_on_success() {
+		$this->expectOutputRegex( '/Header/' );
+
+		// The `get_header()` function must not return anything
+		// due to themes in the wild that may echo its return value.
+		$this->assertNull( get_header() );
+	}
+
+	/**
+	 * @ticket 40969
+	 */
+	function test_get_footer_returns_nothing_on_success() {
+		$this->expectOutputRegex( '/Footer/' );
+
+		// The `get_footer()` function must not return anything
+		// due to themes in the wild that may echo its return value.
+		$this->assertNull( get_footer() );
+	}
+
+	/**
+	 * @ticket 40969
+	 */
+	function test_get_sidebar_returns_nothing_on_success() {
+		$this->expectOutputRegex( '/Sidebar/' );
+
+		// The `get_sidebar()` function must not return anything
+		// due to themes in the wild that may echo its return value.
+		$this->assertNull( get_sidebar() );
+	}
+
+	/**
+	 * @ticket 40969
+	 */
+	function test_get_template_part_returns_nothing_on_success() {
+		$this->expectOutputRegex( '/Template Part/' );
 
 		// The `get_template_part()` function must not return anything
 		// due to themes in the wild that echo its return value.
-		$part   = get_template_part( 'template', 'part' );
-		$output = ob_get_clean();
+		$this->assertNull( get_template_part( 'template', 'part' ) );
+	}
+
+	/**
+	 * @ticket 40969
+	 */
+	function test_get_template_part_returns_false_on_failure() {
+		$this->assertFalse( get_template_part( 'non-existing-template' ) );
+	}
+
+	/**
+	 * @ticket 21676
+	 */
+	function test_get_template_part_passes_arguments_to_template() {
+		$this->expectOutputRegex( '/{"foo":"baz"}/' );
+
+		get_template_part( 'template', 'part', array( 'foo' => 'baz' ) );
+	}
 
-		self::assertSame( 'Template Part', trim( $output ) );
-		self::assertSame( null, $part );
+	/**
+	 * @ticket 9862
+	 * @dataProvider data_selected_and_checked_with_equal_values
+	 */
+	function test_selected_and_checked_with_equal_values( $selected, $current ) {
+		$this->assertSame( " selected='selected'", selected( $selected, $current, false ) );
+		$this->assertSame( " checked='checked'", checked( $selected, $current, false ) );
+	}
+
+	function data_selected_and_checked_with_equal_values() {
+		return array(
+			array( 'foo', 'foo' ),
+			array( '1', 1 ),
+			array( '1', true ),
+			array( 1, 1 ),
+			array( 1, true ),
+			array( true, true ),
+			array( '0', 0 ),
+			array( 0, 0 ),
+			array( '', false ),
+			array( false, false ),
+		);
+	}
+
+	/**
+	 * @ticket 9862
+	 * @dataProvider data_selected_and_checked_with_non_equal_values
+	 */
+	function test_selected_and_checked_with_non_equal_values( $selected, $current ) {
+		$this->assertSame( '', selected( $selected, $current, false ) );
+		$this->assertSame( '', checked( $selected, $current, false ) );
+	}
+
+	function data_selected_and_checked_with_non_equal_values() {
+		return array(
+			array( '0', '' ),
+			array( 0, '' ),
+			array( 0, false ),
+		);
 	}
 }
diff --git a/tests/general/wpError.php b/tests/general/wpError.php
index 3fccc470c8..f7b234c0ce 100644
--- a/tests/general/wpError.php
+++ b/tests/general/wpError.php
@@ -60,7 +60,7 @@ class Tests_WP_Error extends WP_UnitTestCase {
 	public function test_WP_Error_with_code_and_empty_message_and_empty_data_should_add_error_but_not_associated_data() {
 		$wp_error = new WP_Error( 'code' );
 
-		$this->assertSame( null, $wp_error->get_error_data( 'code' ) );
+		$this->assertNull( $wp_error->get_error_data( 'code' ) );
 	}
 
 	public function test_WP_Error_with_code_and_empty_message_and_non_empty_data_should_add_error_with_empty_message_and_that_stored_data() {
@@ -100,23 +100,23 @@ class Tests_WP_Error extends WP_UnitTestCase {
 	}
 
 	/**
-	 * @covers ::get_error_codes()
+	 * @covers ::get_error_codes
 	 */
 	public function test_get_error_codes_with_no_errors_should_return_empty_array() {
 		$this->assertEmpty( $this->wp_error->get_error_codes() );
 	}
 
 	/**
-	 * @covers ::get_error_codes()
+	 * @covers ::get_error_codes
 	 */
 	public function test_get_error_codes_with_one_error_should_return_an_array_with_only_that_code() {
 		$this->wp_error->add( 'code', 'message' );
 
-		$this->assertEqualSets( array( 'code' ), $this->wp_error->get_error_codes() );
+		$this->assertSameSets( array( 'code' ), $this->wp_error->get_error_codes() );
 	}
 
 	/**
-	 * @covers ::get_error_codes()
+	 * @covers ::get_error_codes
 	 */
 	public function test_get_error_codes_with_multiple_errors_should_return_an_array_of_those_codes() {
 		$this->wp_error->add( 'code', 'message' );
@@ -124,18 +124,18 @@ class Tests_WP_Error extends WP_UnitTestCase {
 
 		$expected = array( 'code', 'code2' );
 
-		$this->assertEqualSets( $expected, $this->wp_error->get_error_codes() );
+		$this->assertSameSets( $expected, $this->wp_error->get_error_codes() );
 	}
 
 	/**
-	 * @covers ::get_error_code()
+	 * @covers ::get_error_code
 	 */
 	public function test_get_error_code_with_no_errors_should_return_an_empty_string() {
 		$this->assertSame( '', $this->wp_error->get_error_code() );
 	}
 
 	/**
-	 * @covers ::get_error_code()
+	 * @covers ::get_error_code
 	 */
 	public function test_get_error_code_with_one_error_should_return_that_error_code() {
 		$this->wp_error->add( 'code', 'message' );
@@ -144,7 +144,7 @@ class Tests_WP_Error extends WP_UnitTestCase {
 	}
 
 	/**
-	 * @covers ::get_error_code()
+	 * @covers ::get_error_code
 	 */
 	public function test_get_error_code_with_multiple_errors_should_return_only_the_first_error_code() {
 		$this->wp_error->add( 'code', 'message' );
@@ -154,66 +154,66 @@ class Tests_WP_Error extends WP_UnitTestCase {
 	}
 
 	/**
-	 * @covers ::get_error_messages()
+	 * @covers ::get_error_messages
 	 */
 	public function test_get_error_messages_with_empty_code_and_no_errors_should_return_an_empty_array() {
 		$this->assertEmpty( $this->wp_error->get_error_messages() );
 	}
 
 	/**
-	 * @covers ::get_error_messages()
+	 * @covers ::get_error_messages
 	 */
 	public function test_get_error_messages_with_empty_code_one_error_should_return_an_array_with_that_message() {
 		$this->wp_error->add( 'code', 'message' );
 
-		$this->assertEqualSets( array( 'message' ), $this->wp_error->get_error_messages() );
+		$this->assertSameSets( array( 'message' ), $this->wp_error->get_error_messages() );
 	}
 
 	/**
-	 * @covers ::get_error_messages()
+	 * @covers ::get_error_messages
 	 */
 	public function test_get_error_messages_with_empty_code_multiple_errors_should_return_an_array_of_messages() {
 		$this->wp_error->add( 'code', 'message' );
 		$this->wp_error->add( 'code2', 'message2' );
 
-		$this->assertEqualSets( array( 'message', 'message2' ), $this->wp_error->get_error_messages() );
+		$this->assertSameSets( array( 'message', 'message2' ), $this->wp_error->get_error_messages() );
 	}
 
 	/**
-	 * @covers ::get_error_messages()
+	 * @covers ::get_error_messages
 	 */
 	public function test_get_error_messages_with_an_invalid_code_should_return_an_empty_array() {
 		$this->assertEmpty( $this->wp_error->get_error_messages( 'code' ) );
 	}
 
 	/**
-	 * @covers ::get_error_messages()
+	 * @covers ::get_error_messages
 	 */
 	public function test_get_error_messages_with_one_error_should_return_an_array_with_that_message() {
 		$this->wp_error->add( 'code', 'message' );
 
-		$this->assertEqualSets( array( 'message' ), $this->wp_error->get_error_messages( 'code' ) );
+		$this->assertSameSets( array( 'message' ), $this->wp_error->get_error_messages( 'code' ) );
 	}
 
 	/**
-	 * @covers ::get_error_messages()
+	 * @covers ::get_error_messages
 	 */
 	public function test_get_error_messages_with_multiple_errors_same_code_should_return_an_array_with_all_messages() {
 		$this->wp_error->add( 'code', 'message' );
 		$this->wp_error->add( 'code', 'message2' );
 
-		$this->assertequalSets( array( 'message', 'message2' ), $this->wp_error->get_error_messages( 'code' ) );
+		$this->assertSameSets( array( 'message', 'message2' ), $this->wp_error->get_error_messages( 'code' ) );
 	}
 
 	/**
-	 * @covers ::get_error_message()
+	 * @covers ::get_error_message
 	 */
 	public function test_get_error_message_with_empty_code_and_no_errors_should_return_an_empty_string() {
 		$this->assertSame( '', $this->wp_error->get_error_message() );
 	}
 
 	/**
-	 * @covers ::get_error_message()
+	 * @covers ::get_error_message
 	 */
 	public function test_get_error_message_with_empty_code_and_one_error_should_return_that_message() {
 		$this->wp_error->add( 'code', 'message' );
@@ -222,7 +222,7 @@ class Tests_WP_Error extends WP_UnitTestCase {
 	}
 
 	/**
-	 * @covers ::get_error_message()
+	 * @covers ::get_error_message
 	 */
 	public function test_get_error_message_with_empty_code_and_multiple_errors_should_return_the_first_message() {
 		$this->wp_error->add( 'code', 'message' );
@@ -232,7 +232,7 @@ class Tests_WP_Error extends WP_UnitTestCase {
 	}
 
 	/**
-	 * @covers ::get_error_message()
+	 * @covers ::get_error_message
 	 */
 	public function test_get_error_message_with_empty_code_and_multiple_errors_multiple_codes_should_return_the_first_message() {
 		$this->wp_error->add( 'code', 'message' );
@@ -243,14 +243,14 @@ class Tests_WP_Error extends WP_UnitTestCase {
 	}
 
 	/**
-	 * @covers ::get_error_message()
+	 * @covers ::get_error_message
 	 */
 	public function test_get_error_message_with_invalid_code_and_no_errors_should_return_empty_string() {
 		$this->assertSame( '', $this->wp_error->get_error_message( 'invalid' ) );
 	}
 
 	/**
-	 * @covers ::get_error_message()
+	 * @covers ::get_error_message
 	 */
 	public function test_get_error_message_with_invalid_code_and_one_error_should_return_an_empty_string() {
 		$this->wp_error->add( 'code', 'message' );
@@ -259,7 +259,7 @@ class Tests_WP_Error extends WP_UnitTestCase {
 	}
 
 	/**
-	 * @covers ::get_error_message()
+	 * @covers ::get_error_message
 	 */
 	public function test_get_error_message_with_invalid_code_and_multiple_errors_should_return_an_empty_string() {
 		$this->wp_error->add( 'code', 'message' );
@@ -269,54 +269,54 @@ class Tests_WP_Error extends WP_UnitTestCase {
 	}
 
 	/**
-	 * @covers ::get_error_data()
+	 * @covers ::get_error_data
 	 */
 	public function test_get_error_data_with_empty_code_and_no_errors_should_evaluate_as_null() {
-		$this->assertSame( null, $this->wp_error->get_error_data() );
+		$this->assertNull( $this->wp_error->get_error_data() );
 	}
 
 	/**
-	 * @covers ::get_error_data()
+	 * @covers ::get_error_data
 	 */
 	public function test_get_error_data_with_empty_code_one_error_no_data_should_evaluate_as_null() {
 		$this->wp_error->add( 'code', 'message' );
 
-		$this->assertSame( null, $this->wp_error->get_error_data() );
+		$this->assertNull( $this->wp_error->get_error_data() );
 	}
 
 	/**
-	 * @covers ::get_error_data()
+	 * @covers ::get_error_data
 	 */
 	public function test_get_error_data_with_empty_code_multiple_errors_no_data_should_evaluate_as_null() {
 		$this->wp_error->add( 'code', 'message' );
 		$this->wp_error->add( 'code2', 'message2' );
 
-		$this->assertSame( null, $this->wp_error->get_error_data() );
+		$this->assertNull( $this->wp_error->get_error_data() );
 	}
 
 	/**
-	 * @covers ::get_error_data()
+	 * @covers ::get_error_data
 	 */
 	public function test_get_error_data_with_empty_code_and_one_error_with_data_should_return_that_data() {
 		$expected = array( 'data-key' => 'data-value' );
 		$this->wp_error->add( 'code', 'message', $expected );
 
-		$this->assertEqualSetsWithIndex( $expected, $this->wp_error->get_error_data() );
+		$this->assertSameSetsWithIndex( $expected, $this->wp_error->get_error_data() );
 	}
 
 	/**
-	 * @covers ::get_error_data()
+	 * @covers ::get_error_data
 	 */
 	public function test_get_error_data_with_empty_code_and_multiple_errors_different_codes_should_return_the_last_data_of_the_first_code() {
 		$expected = array( 'data-key' => 'data-value' );
 		$this->wp_error->add( 'code', 'message', $expected );
 		$this->wp_error->add( 'code2', 'message2', 'data2' );
 
-		$this->assertEqualSetsWithIndex( $expected, $this->wp_error->get_error_data() );
+		$this->assertSameSetsWithIndex( $expected, $this->wp_error->get_error_data() );
 	}
 
 	/**
-	 * @covers ::get_error_data()
+	 * @covers ::get_error_data
 	 */
 	public function test_get_error_data_with_empty_code_and_multiple_errors_same_code_should_return_the_last_data_of_the_first_code() {
 		$this->wp_error->add( 'code', 'message', 'data' );
@@ -327,33 +327,33 @@ class Tests_WP_Error extends WP_UnitTestCase {
 	}
 
 	/**
-	 * @covers ::get_error_data()
+	 * @covers ::get_error_data
 	 */
 	public function test_get_error_data_with_code_and_no_errors_should_evaluate_as_null() {
-		$this->assertSame( null, $this->wp_error->get_error_data( 'code' ) );
+		$this->assertNull( $this->wp_error->get_error_data( 'code' ) );
 	}
 
 	/**
-	 * @covers ::get_error_data()
+	 * @covers ::get_error_data
 	 */
 	public function test_get_error_data_with_code_and_one_error_with_no_data_should_evaluate_as_null() {
 		$this->wp_error->add( 'code', 'message' );
 
-		$this->assertSame( null, $this->wp_error->get_error_data( 'code' ) );
+		$this->assertNull( $this->wp_error->get_error_data( 'code' ) );
 	}
 
 	/**
-	 * @covers ::get_error_data()
+	 * @covers ::get_error_data
 	 */
 	public function test_get_error_data_with_code_and_one_error_with_data_should_return_that_data() {
 		$expected = array( 'data-key' => 'data-value' );
 		$this->wp_error->add( 'code', 'message', $expected );
 
-		$this->assertEqualSetsWithIndex( $expected, $this->wp_error->get_error_data( 'code' ) );
+		$this->assertSameSetsWithIndex( $expected, $this->wp_error->get_error_data( 'code' ) );
 	}
 
 	/**
-	 * @covers ::get_error_data()
+	 * @covers ::get_error_data
 	 */
 	public function test_get_error_data_with_code_and_multiple_errors_different_codes_should_return_the_last_stored_data_of_the_code() {
 		$expected = array( 'data3' );
@@ -361,11 +361,11 @@ class Tests_WP_Error extends WP_UnitTestCase {
 		$this->wp_error->add( 'code2', 'message2', 'data2' );
 		$this->wp_error->add( 'code', 'message3', $expected );
 
-		$this->assertEqualSetsWithIndex( $expected, $this->wp_error->get_error_data( 'code' ) );
+		$this->assertSameSetsWithIndex( $expected, $this->wp_error->get_error_data( 'code' ) );
 	}
 
 	/**
-	 * @covers ::get_error_data()
+	 * @covers ::get_error_data
 	 */
 	public function test_get_error_data_with_code_and_multiple_errors_same_code_should_return_the_last_stored_data() {
 		$this->wp_error->add( 'code', 'message', 'data' );
@@ -376,14 +376,14 @@ class Tests_WP_Error extends WP_UnitTestCase {
 	}
 
 	/**
-	 * @covers ::has_errors()
+	 * @covers ::has_errors
 	 */
 	public function test_has_errors_with_no_errors_returns_false() {
 		$this->assertFalse( $this->wp_error->has_errors() );
 	}
 
 	/**
-	 * @covers ::has_errors()
+	 * @covers ::has_errors
 	 */
 	public function test_has_errors_with_errors_returns_true() {
 		$this->wp_error->add( 'code', 'message', 'data' );
@@ -391,7 +391,7 @@ class Tests_WP_Error extends WP_UnitTestCase {
 	}
 
 	/**
-	 * @covers ::add()
+	 * @covers ::add
 	 */
 	public function test_add_with_empty_code_empty_message_empty_data_should_add_empty_key_to_errors_array() {
 		$this->wp_error->add( '', '', 'data' );
@@ -400,16 +400,16 @@ class Tests_WP_Error extends WP_UnitTestCase {
 	}
 
 	/**
-	 * @covers ::add()
+	 * @covers ::add
 	 */
 	public function test_add_with_empty_code_empty_message_empty_data_should_add_empty_message_to_errors_array_under_empty_key() {
 		$this->wp_error->add( '', '', 'data' );
 
-		$this->assertEqualSetsWithIndex( array( '' => array( '' ) ), $this->wp_error->errors );
+		$this->assertSameSetsWithIndex( array( '' => array( '' ) ), $this->wp_error->errors );
 	}
 
 	/**
-	 * @covers ::add()
+	 * @covers ::add
 	 */
 	public function test_add_with_empty_code_empty_message_empty_data_should_not_alter_data() {
 		$this->wp_error->add( '', '', '' );
@@ -418,16 +418,16 @@ class Tests_WP_Error extends WP_UnitTestCase {
 	}
 
 	/**
-	 * @covers ::add()
+	 * @covers ::add
 	 */
 	public function test_add_with_empty_code_empty_message_non_empty_data_should_store_data_under_an_empty_code_key() {
 		$this->wp_error->add( '', '', 'data' );
 
-		$this->assertEqualSetsWithIndex( array( '' => 'data' ), $this->wp_error->error_data );
+		$this->assertSameSetsWithIndex( array( '' => 'data' ), $this->wp_error->error_data );
 	}
 
 	/**
-	 * @covers ::add()
+	 * @covers ::add
 	 */
 	public function test_add_with_code_empty_message_empty_data_should_add_error_with_code() {
 		$this->wp_error->add( 'code', '' );
@@ -436,7 +436,7 @@ class Tests_WP_Error extends WP_UnitTestCase {
 	}
 
 	/**
-	 * @covers ::add()
+	 * @covers ::add
 	 */
 	public function test_add_with_code_empty_message_empty_data_should_add_error_with_empty_message() {
 		$this->wp_error->add( 'code', '' );
@@ -445,16 +445,16 @@ class Tests_WP_Error extends WP_UnitTestCase {
 	}
 
 	/**
-	 * @covers ::add()
+	 * @covers ::add
 	 */
 	public function test_add_with_code_empty_message_empty_data_should_not_add_error_data() {
 		$this->wp_error->add( 'code', '' );
 
-		$this->assertSame( null, $this->wp_error->get_error_data( 'code' ) );
+		$this->assertNull( $this->wp_error->get_error_data( 'code' ) );
 	}
 
 	/**
-	 * @covers ::add()
+	 * @covers ::add
 	 */
 	public function test_add_with_code_and_message_and_empty_data_should_should_add_error_with_that_message() {
 		$this->wp_error->add( 'code', 'message' );
@@ -463,16 +463,16 @@ class Tests_WP_Error extends WP_UnitTestCase {
 	}
 
 	/**
-	 * @covers ::add()
+	 * @covers ::add
 	 */
 	public function test_add_with_code_and_message_and_empty_data_should_not_alter_stored_data() {
 		$this->wp_error->add( 'code', 'message' );
 
-		$this->assertSame( null, $this->wp_error->get_error_data( 'code' ) );
+		$this->assertNull( $this->wp_error->get_error_data( 'code' ) );
 	}
 
 	/**
-	 * @covers ::add()
+	 * @covers ::add
 	 */
 	public function test_add_with_code_and_empty_message_and_data_should_add_error_with_that_code() {
 		$this->wp_error->add( 'code', '', 'data' );
@@ -481,7 +481,7 @@ class Tests_WP_Error extends WP_UnitTestCase {
 	}
 
 	/**
-	 * @covers ::add()
+	 * @covers ::add
 	 */
 	public function test_add_with_code_and_empty_message_and_data_should_store_that_data() {
 		$this->wp_error->add( 'code', '', 'data' );
@@ -490,7 +490,7 @@ class Tests_WP_Error extends WP_UnitTestCase {
 	}
 
 	/**
-	 * @covers ::add()
+	 * @covers ::add
 	 */
 	public function test_add_with_code_and_message_and_data_should_add_an_error_with_that_code() {
 		$this->wp_error->add( 'code', 'message', 'data' );
@@ -499,7 +499,7 @@ class Tests_WP_Error extends WP_UnitTestCase {
 	}
 
 	/**
-	 * @covers ::add()
+	 * @covers ::add
 	 */
 	public function test_add_with_code_and_message_and_data_should_add_an_error_with_that_message() {
 		$this->wp_error->add( 'code', 'message', 'data' );
@@ -508,7 +508,7 @@ class Tests_WP_Error extends WP_UnitTestCase {
 	}
 
 	/**
-	 * @covers ::add()
+	 * @covers ::add
 	 */
 	public function test_add_with_code_and_message_and_data_should_store_that_data() {
 		$this->wp_error->add( 'code', 'message', 'data' );
@@ -517,7 +517,7 @@ class Tests_WP_Error extends WP_UnitTestCase {
 	}
 
 	/**
-	 * @covers ::add()
+	 * @covers ::add
 	 */
 	public function test_add_multiple_times_with_the_same_code_should_add_additional_messages_for_that_code() {
 		$this->wp_error->add( 'code', 'message' );
@@ -525,11 +525,11 @@ class Tests_WP_Error extends WP_UnitTestCase {
 
 		$expected = array( 'message', 'message2' );
 
-		$this->assertEqualSets( $expected, $this->wp_error->get_error_messages( 'code' ) );
+		$this->assertSameSets( $expected, $this->wp_error->get_error_messages( 'code' ) );
 	}
 
 	/**
-	 * @covers ::add()
+	 * @covers ::add
 	 */
 	public function test_add_multiple_times_with_the_same_code_and_different_data_should_store_only_the_last_added_data() {
 		$this->wp_error->add( 'code', 'message', 'data-bar' );
@@ -539,7 +539,7 @@ class Tests_WP_Error extends WP_UnitTestCase {
 	}
 
 	/**
-	 * @covers ::add_data()
+	 * @covers ::add_data
 	 */
 	public function test_add_data_with_empty_data_empty_code_should_create_orphaned_data_with_no_error() {
 		$this->wp_error->add_data( '' );
@@ -548,16 +548,16 @@ class Tests_WP_Error extends WP_UnitTestCase {
 	}
 
 	/**
-	 * @covers ::add_data()
+	 * @covers ::add_data
 	 */
 	public function test_add_data_with_empty_data_empty_code_no_errors_should_create_data_under_an_empty_code_key() {
 		$this->wp_error->add_data( '' );
 
-		$this->assertEqualSets( array( '' => '' ), $this->wp_error->error_data );
+		$this->assertSameSets( array( '' => '' ), $this->wp_error->error_data );
 	}
 
 	/**
-	 * @covers ::add_data()
+	 * @covers ::add_data
 	 */
 	public function test_add_data_with_data_empty_code_and_one_error_should_store_the_data_under_that_code() {
 		$this->wp_error->add( 'code', 'message' );
@@ -567,7 +567,7 @@ class Tests_WP_Error extends WP_UnitTestCase {
 	}
 
 	/**
-	 * @covers ::add_data()
+	 * @covers ::add_data
 	 */
 	public function test_add_data_with_data_empty_code_and_multiple_errors_with_different_codes_should_store_it_under_the_first_code() {
 		$this->wp_error->add( 'code', 'message' );
@@ -579,7 +579,7 @@ class Tests_WP_Error extends WP_UnitTestCase {
 	}
 
 	/**
-	 * @covers ::add_data()
+	 * @covers ::add_data
 	 */
 	public function test_add_data_with_data_empty_code_and_multiple_errors_with_same_code_should_store_it_under_the_first_code() {
 		$this->wp_error->add( 'code', 'message' );
@@ -592,7 +592,7 @@ class Tests_WP_Error extends WP_UnitTestCase {
 	}
 
 	/**
-	 * @covers ::add_data()
+	 * @covers ::add_data
 	 */
 	public function test_add_data_with_data_and_code_and_no_errors_should_create_orphaned_data_with_no_error() {
 		$this->wp_error->add_data( 'data', 'code' );
@@ -601,38 +601,38 @@ class Tests_WP_Error extends WP_UnitTestCase {
 	}
 
 	/**
-	 * @covers ::add_data()
+	 * @covers ::add_data
 	 */
 	public function test_add_data_with_data_and_code_no_errors_should_create_data_under_that_code_key() {
 		$this->wp_error->add_data( 'data', 'code' );
 
-		$this->assertEqualSets( array( 'code' => 'data' ), $this->wp_error->error_data );
+		$this->assertSameSets( array( 'code' => 'data' ), $this->wp_error->error_data );
 	}
 
 	/**
-	 * @covers ::add_data()
+	 * @covers ::add_data
 	 */
 	public function test_add_data_with_data_and_code_one_error_different_code_should_create_orphaned_data_with_no_error() {
 		$this->wp_error->add( 'code', 'message' );
 
 		$this->wp_error->add_data( 'data', 'code2' );
 
-		$this->assertEqualSetsWithIndex( array( 'code' => array( 'message' ) ), $this->wp_error->errors );
+		$this->assertSameSetsWithIndex( array( 'code' => array( 'message' ) ), $this->wp_error->errors );
 	}
 
 	/**
-	 * @covers ::add_data()
+	 * @covers ::add_data
 	 */
 	public function test_add_data_with_data_and_code_one_error_different_code_should_create_data_under_that_code_key() {
 		$this->wp_error->add( 'code', 'message' );
 
 		$this->wp_error->add_data( 'data', 'code2' );
 
-		$this->assertEqualSetsWithIndex( array( 'code2' => 'data' ), $this->wp_error->error_data );
+		$this->assertSameSetsWithIndex( array( 'code2' => 'data' ), $this->wp_error->error_data );
 	}
 
 	/**
-	 * @covers ::add_data()
+	 * @covers ::add_data
 	 */
 	public function test_add_data_with_data_and_code_should_add_data() {
 		$this->wp_error->add( 'code', 'message' );
@@ -643,7 +643,7 @@ class Tests_WP_Error extends WP_UnitTestCase {
 	}
 
 	/**
-	 * @covers ::remove()
+	 * @covers ::remove
 	 */
 	public function test_remove_with_no_errors_should_affect_nothing() {
 		$before = $this->wp_error->errors;
@@ -652,11 +652,11 @@ class Tests_WP_Error extends WP_UnitTestCase {
 
 		$after = $this->wp_error->errors;
 
-		$this->assertEqualSetsWithIndex( $before, $after );
+		$this->assertSameSetsWithIndex( $before, $after );
 	}
 
 	/**
-	 * @covers ::remove()
+	 * @covers ::remove
 	 */
 	public function test_remove_empty_code_no_errors_should_affect_nothing() {
 		$before = $this->wp_error->errors;
@@ -665,11 +665,11 @@ class Tests_WP_Error extends WP_UnitTestCase {
 
 		$after = $this->wp_error->errors;
 
-		$this->assertEqualSetsWithIndex( $before, $after );
+		$this->assertSameSetsWithIndex( $before, $after );
 	}
 
 	/**
-	 * @covers ::remove()
+	 * @covers ::remove
 	 */
 	public function test_remove_empty_code_and_one_error_with_empty_string_code_should_remove_error() {
 		$before = $this->wp_error->errors;
@@ -680,11 +680,11 @@ class Tests_WP_Error extends WP_UnitTestCase {
 
 		$after = $this->wp_error->errors;
 
-		$this->assertEqualSetsWithIndex( $before, $after );
+		$this->assertSameSetsWithIndex( $before, $after );
 	}
 
 	/**
-	 * @covers ::remove()
+	 * @covers ::remove
 	 */
 	public function test_remove_empty_code_and_one_error_with_empty_string_code_should_remove_error_data() {
 		$this->wp_error->add( '', 'message', 'data' );
@@ -697,7 +697,7 @@ class Tests_WP_Error extends WP_UnitTestCase {
 	}
 
 	/**
-	 * @covers ::remove()
+	 * @covers ::remove
 	 */
 	public function test_remove_should_remove_the_error_with_the_given_code() {
 		$this->wp_error->add( 'code', 'message' );
@@ -708,7 +708,7 @@ class Tests_WP_Error extends WP_UnitTestCase {
 	}
 
 	/**
-	 * @covers ::remove()
+	 * @covers ::remove
 	 */
 	public function test_remove_should_remove_the_error_data_associated_with_the_given_code() {
 		$this->wp_error->add( 'code', 'message', 'data' );
diff --git a/tests/hooks/addFilter.php b/tests/hooks/addFilter.php
index 5e9c0e75e3..2c134ef333 100644
--- a/tests/hooks/addFilter.php
+++ b/tests/hooks/addFilter.php
@@ -20,8 +20,8 @@ class Tests_WP_Hook_Add_Filter extends WP_UnitTestCase {
 		$hook->add_filter( $tag, $callback, $priority, $accepted_args );
 
 		$function_index = _wp_filter_build_unique_id( $tag, $callback, $priority );
-		$this->assertEquals( $callback, $hook->callbacks[ $priority ][ $function_index ]['function'] );
-		$this->assertEquals( $accepted_args, $hook->callbacks[ $priority ][ $function_index ]['accepted_args'] );
+		$this->assertSame( $callback, $hook->callbacks[ $priority ][ $function_index ]['function'] );
+		$this->assertSame( $accepted_args, $hook->callbacks[ $priority ][ $function_index ]['accepted_args'] );
 	}
 
 	public function test_add_filter_with_object() {
@@ -35,8 +35,8 @@ class Tests_WP_Hook_Add_Filter extends WP_UnitTestCase {
 		$hook->add_filter( $tag, $callback, $priority, $accepted_args );
 
 		$function_index = _wp_filter_build_unique_id( $tag, $callback, $priority );
-		$this->assertEquals( $callback, $hook->callbacks[ $priority ][ $function_index ]['function'] );
-		$this->assertEquals( $accepted_args, $hook->callbacks[ $priority ][ $function_index ]['accepted_args'] );
+		$this->assertSame( $callback, $hook->callbacks[ $priority ][ $function_index ]['function'] );
+		$this->assertSame( $accepted_args, $hook->callbacks[ $priority ][ $function_index ]['accepted_args'] );
 	}
 
 	public function test_add_filter_with_static_method() {
@@ -49,8 +49,8 @@ class Tests_WP_Hook_Add_Filter extends WP_UnitTestCase {
 		$hook->add_filter( $tag, $callback, $priority, $accepted_args );
 
 		$function_index = _wp_filter_build_unique_id( $tag, $callback, $priority );
-		$this->assertEquals( $callback, $hook->callbacks[ $priority ][ $function_index ]['function'] );
-		$this->assertEquals( $accepted_args, $hook->callbacks[ $priority ][ $function_index ]['accepted_args'] );
+		$this->assertSame( $callback, $hook->callbacks[ $priority ][ $function_index ]['function'] );
+		$this->assertSame( $accepted_args, $hook->callbacks[ $priority ][ $function_index ]['accepted_args'] );
 	}
 
 	public function test_add_two_filters_with_same_priority() {
@@ -124,7 +124,7 @@ class Tests_WP_Hook_Add_Filter extends WP_UnitTestCase {
 		$hook->add_filter( $tag, array( $b, 'action' ), 5, 1 );
 		$hook->add_filter( $tag, array( $c, 'action' ), 8, 1 );
 
-		$this->assertEquals( array( 5, 8, 10 ), array_keys( $hook->callbacks ) );
+		$this->assertSame( array( 5, 8, 10 ), array_keys( $hook->callbacks ) );
 	}
 
 	public function test_remove_and_add() {
diff --git a/tests/hooks/applyFilters.php b/tests/hooks/applyFilters.php
index 1879cbf70b..a50f21bf38 100644
--- a/tests/hooks/applyFilters.php
+++ b/tests/hooks/applyFilters.php
@@ -20,8 +20,8 @@ class Tests_WP_Hook_Apply_Filters extends WP_UnitTestCase {
 
 		$returned = $hook->apply_filters( $arg, array( $arg ) );
 
-		$this->assertEquals( $returned, $arg );
-		$this->assertEquals( 1, $a->get_call_count() );
+		$this->assertSame( $returned, $arg );
+		$this->assertSame( 1, $a->get_call_count() );
 	}
 
 	public function test_apply_filters_with_multiple_calls() {
@@ -38,8 +38,8 @@ class Tests_WP_Hook_Apply_Filters extends WP_UnitTestCase {
 		$returned_one = $hook->apply_filters( $arg, array( $arg ) );
 		$returned_two = $hook->apply_filters( $returned_one, array( $returned_one ) );
 
-		$this->assertEquals( $returned_two, $arg );
-		$this->assertEquals( 2, $a->get_call_count() );
+		$this->assertSame( $returned_two, $arg );
+		$this->assertSame( 2, $a->get_call_count() );
 	}
 
 }
diff --git a/tests/hooks/doAction.php b/tests/hooks/doAction.php
index 34f90eae3a..542edf14ac 100644
--- a/tests/hooks/doAction.php
+++ b/tests/hooks/doAction.php
@@ -27,7 +27,7 @@ class Tests_WP_Hook_Do_Action extends WP_UnitTestCase {
 		$hook->add_filter( $tag, $callback, $priority, $accepted_args );
 		$hook->do_action( array( $arg ) );
 
-		$this->assertEquals( 1, $a->get_call_count() );
+		$this->assertSame( 1, $a->get_call_count() );
 	}
 
 	public function test_do_action_with_multiple_calls() {
@@ -43,7 +43,7 @@ class Tests_WP_Hook_Do_Action extends WP_UnitTestCase {
 		$hook->do_action( array( $arg ) );
 		$hook->do_action( array( $arg ) );
 
-		$this->assertEquals( 2, $a->get_call_count() );
+		$this->assertSame( 2, $a->get_call_count() );
 	}
 
 	public function test_do_action_with_multiple_callbacks_on_same_priority() {
@@ -61,8 +61,8 @@ class Tests_WP_Hook_Do_Action extends WP_UnitTestCase {
 		$hook->add_filter( $tag, $callback_two, $priority, $accepted_args );
 		$hook->do_action( array( $arg ) );
 
-		$this->assertEquals( 1, $a->get_call_count() );
-		$this->assertEquals( 1, $a->get_call_count() );
+		$this->assertSame( 1, $a->get_call_count() );
+		$this->assertSame( 1, $a->get_call_count() );
 	}
 
 	public function test_do_action_with_multiple_callbacks_on_different_priorities() {
@@ -80,8 +80,8 @@ class Tests_WP_Hook_Do_Action extends WP_UnitTestCase {
 		$hook->add_filter( $tag, $callback_two, $priority + 1, $accepted_args );
 		$hook->do_action( array( $arg ) );
 
-		$this->assertEquals( 1, $a->get_call_count() );
-		$this->assertEquals( 1, $a->get_call_count() );
+		$this->assertSame( 1, $a->get_call_count() );
+		$this->assertSame( 1, $a->get_call_count() );
 	}
 
 	public function test_do_action_with_no_accepted_args() {
diff --git a/tests/hooks/doAllHook.php b/tests/hooks/doAllHook.php
index abaf92525b..d848b5ab16 100644
--- a/tests/hooks/doAllHook.php
+++ b/tests/hooks/doAllHook.php
@@ -21,6 +21,6 @@ class Tests_WP_Hook_Do_All_Hook extends WP_UnitTestCase {
 		$hook->do_all_hook( $args );
 		$hook->do_all_hook( $args );
 
-		$this->assertEquals( 2, $a->get_call_count() );
+		$this->assertSame( 2, $a->get_call_count() );
 	}
 }
diff --git a/tests/hooks/hasFilter.php b/tests/hooks/hasFilter.php
index 61b79861c3..bf63ee6e06 100644
--- a/tests/hooks/hasFilter.php
+++ b/tests/hooks/hasFilter.php
@@ -16,7 +16,7 @@ class Tests_WP_Hook_Has_Filter extends WP_UnitTestCase {
 
 		$hook->add_filter( $tag, $callback, $priority, $accepted_args );
 
-		$this->assertEquals( $priority, $hook->has_filter( $tag, $callback ) );
+		$this->assertSame( $priority, $hook->has_filter( $tag, $callback ) );
 	}
 
 	public function test_has_filter_with_object() {
@@ -29,7 +29,7 @@ class Tests_WP_Hook_Has_Filter extends WP_UnitTestCase {
 
 		$hook->add_filter( $tag, $callback, $priority, $accepted_args );
 
-		$this->assertEquals( $priority, $hook->has_filter( $tag, $callback ) );
+		$this->assertSame( $priority, $hook->has_filter( $tag, $callback ) );
 	}
 
 	public function test_has_filter_with_static_method() {
@@ -41,7 +41,7 @@ class Tests_WP_Hook_Has_Filter extends WP_UnitTestCase {
 
 		$hook->add_filter( $tag, $callback, $priority, $accepted_args );
 
-		$this->assertEquals( $priority, $hook->has_filter( $tag, $callback ) );
+		$this->assertSame( $priority, $hook->has_filter( $tag, $callback ) );
 	}
 
 	public function test_has_filter_without_callback() {
diff --git a/tests/hooks/iterator.php b/tests/hooks/iterator.php
index 5592880b0c..a569fd4952 100644
--- a/tests/hooks/iterator.php
+++ b/tests/hooks/iterator.php
@@ -26,7 +26,7 @@ class Tests_WP_Hook_Iterator extends WP_UnitTestCase {
 				$functions[] = $the_['function'];
 			}
 		}
-		$this->assertEqualSets( array( $priority, $priority + 1 ), $priorities );
-		$this->assertEqualSets( array( $callback_one, $callback_two ), $functions );
+		$this->assertSameSets( array( $priority, $priority + 1 ), $priorities );
+		$this->assertSameSets( array( $callback_one, $callback_two ), $functions );
 	}
 }
diff --git a/tests/hooks/preinitHooks.php b/tests/hooks/preinitHooks.php
index 8211a16b3b..7eb5efe5cc 100644
--- a/tests/hooks/preinitHooks.php
+++ b/tests/hooks/preinitHooks.php
@@ -33,7 +33,7 @@ class Tests_WP_Hook_Preinit_Hooks extends WP_UnitTestCase {
 
 		$hooks = WP_Hook::build_preinitialized_hooks( $filters );
 
-		$this->assertEquals( $priority1, $hooks[ $tag1 ]->has_filter( $tag1, '__return_false' ) );
-		$this->assertEquals( $priority2, $hooks[ $tag2 ]->has_filter( $tag2, '__return_null' ) );
+		$this->assertSame( $priority1, $hooks[ $tag1 ]->has_filter( $tag1, '__return_false' ) );
+		$this->assertSame( $priority2, $hooks[ $tag2 ]->has_filter( $tag2, '__return_null' ) );
 	}
 }
diff --git a/tests/hooks/removeAllFilters.php b/tests/hooks/removeAllFilters.php
index 9a0f013d0f..1437c57248 100644
--- a/tests/hooks/removeAllFilters.php
+++ b/tests/hooks/removeAllFilters.php
@@ -36,6 +36,6 @@ class Tests_WP_Hook_Remove_All_Filters extends WP_UnitTestCase {
 
 		$this->assertFalse( $hook->has_filter( $tag, $callback_one ) );
 		$this->assertTrue( $hook->has_filters() );
-		$this->assertEquals( $priority + 1, $hook->has_filter( $tag, $callback_two ) );
+		$this->assertSame( $priority + 1, $hook->has_filter( $tag, $callback_two ) );
 	}
 }
diff --git a/tests/http/base.php b/tests/http/base.php
index 6cc6cc7d67..fdc78ffe3c 100644
--- a/tests/http/base.php
+++ b/tests/http/base.php
@@ -17,27 +17,6 @@ abstract class WP_HTTP_UnitTestCase extends WP_UnitTestCase {
 
 	protected $http_request_args;
 
-	/**
-	 * Mark test as skipped if the HTTP request times out.
-	 */
-	function skipTestOnTimeout( $response ) {
-		if ( ! is_wp_error( $response ) ) {
-			return;
-		}
-		if ( 'connect() timed out!' === $response->get_error_message() ) {
-			$this->markTestSkipped( 'HTTP timeout' );
-		}
-
-		if ( false !== strpos( $response->get_error_message(), 'timed out after' ) ) {
-			$this->markTestSkipped( 'HTTP timeout' );
-		}
-
-		if ( 0 === strpos( $response->get_error_message(), 'stream_socket_client(): unable to connect to tcp://s.w.org:80' ) ) {
-			$this->markTestSkipped( 'HTTP timeout' );
-		}
-
-	}
-
 	function setUp() {
 		parent::setUp();
 
@@ -53,9 +32,9 @@ abstract class WP_HTTP_UnitTestCase extends WP_UnitTestCase {
 
 		// Disable all transports aside from this one.
 		foreach ( array( 'curl', 'streams', 'fsockopen' ) as $t ) {
-			remove_filter( "use_{$t}_transport", '__return_false' ); // Just strip them all
+			remove_filter( "use_{$t}_transport", '__return_false' );  // Just strip them all...
 			if ( $t !== $this->transport ) {
-				add_filter( "use_{$t}_transport", '__return_false' ); // and add it back if need be..
+				add_filter( "use_{$t}_transport", '__return_false' ); // ...and add it back if need be.
 			}
 		}
 	}
@@ -73,70 +52,70 @@ abstract class WP_HTTP_UnitTestCase extends WP_UnitTestCase {
 	}
 
 	function test_redirect_on_301() {
-		// 5 : 5 & 301
+		// 5 : 5 & 301.
 		$res = wp_remote_request( $this->redirection_script . '?code=301&rt=' . 5, array( 'redirection' => 5 ) );
 
 		$this->skipTestOnTimeout( $res );
 		$this->assertNotWPError( $res );
-		$this->assertEquals( 200, (int) $res['response']['code'] );
+		$this->assertSame( 200, (int) $res['response']['code'] );
 	}
 
 	function test_redirect_on_302() {
-		// 5 : 5 & 302
+		// 5 : 5 & 302.
 		$res = wp_remote_request( $this->redirection_script . '?code=302&rt=' . 5, array( 'redirection' => 5 ) );
 
 		$this->skipTestOnTimeout( $res );
 		$this->assertNotWPError( $res );
-		$this->assertEquals( 200, (int) $res['response']['code'] );
+		$this->assertSame( 200, (int) $res['response']['code'] );
 	}
 
 	/**
 	 * @ticket 16855
 	 */
 	function test_redirect_on_301_no_redirect() {
-		// 5 > 0 & 301
+		// 5 > 0 & 301.
 		$res = wp_remote_request( $this->redirection_script . '?code=301&rt=' . 5, array( 'redirection' => 0 ) );
 
 		$this->skipTestOnTimeout( $res );
 		$this->assertNotWPError( $res );
-		$this->assertEquals( 301, (int) $res['response']['code'] );
+		$this->assertSame( 301, (int) $res['response']['code'] );
 	}
 
 	/**
 	 * @ticket 16855
 	 */
 	function test_redirect_on_302_no_redirect() {
-		// 5 > 0 & 302
+		// 5 > 0 & 302.
 		$res = wp_remote_request( $this->redirection_script . '?code=302&rt=' . 5, array( 'redirection' => 0 ) );
 
 		$this->skipTestOnTimeout( $res );
 		$this->assertNotWPError( $res );
-		$this->assertEquals( 302, (int) $res['response']['code'] );
+		$this->assertSame( 302, (int) $res['response']['code'] );
 	}
 
 	function test_redirections_equal() {
-		// 5 - 5
+		// 5 - 5.
 		$res = wp_remote_request( $this->redirection_script . '?rt=' . 5, array( 'redirection' => 5 ) );
 
 		$this->skipTestOnTimeout( $res );
 		$this->assertNotWPError( $res );
-		$this->assertEquals( 200, (int) $res['response']['code'] );
+		$this->assertSame( 200, (int) $res['response']['code'] );
 	}
 
 	function test_no_head_redirections() {
-		// No redirections on HEAD request:
+		// No redirections on HEAD request.
 		$res = wp_remote_request( $this->redirection_script . '?code=302&rt=' . 1, array( 'method' => 'HEAD' ) );
 
 		$this->skipTestOnTimeout( $res );
 		$this->assertNotWPError( $res );
-		$this->assertEquals( 302, (int) $res['response']['code'] );
+		$this->assertSame( 302, (int) $res['response']['code'] );
 	}
 
 	/**
 	 * @ticket 16855
 	 */
 	function test_redirect_on_head() {
-		// Redirections on HEAD request when Requested
+		// Redirections on HEAD request when Requested.
 		$res = wp_remote_request(
 			$this->redirection_script . '?rt=' . 5,
 			array(
@@ -147,11 +126,11 @@ abstract class WP_HTTP_UnitTestCase extends WP_UnitTestCase {
 
 		$this->skipTestOnTimeout( $res );
 		$this->assertNotWPError( $res );
-		$this->assertEquals( 200, (int) $res['response']['code'] );
+		$this->assertSame( 200, (int) $res['response']['code'] );
 	}
 
 	function test_redirections_greater() {
-		// 10 > 5
+		// 10 > 5.
 		$res = wp_remote_request( $this->redirection_script . '?rt=' . 10, array( 'redirection' => 5 ) );
 
 		$this->skipTestOnTimeout( $res );
@@ -159,7 +138,7 @@ abstract class WP_HTTP_UnitTestCase extends WP_UnitTestCase {
 	}
 
 	function test_redirections_greater_edgecase() {
-		// 6 > 5 (close edgecase)
+		// 6 > 5 (close edge case).
 		$res = wp_remote_request( $this->redirection_script . '?rt=' . 6, array( 'redirection' => 5 ) );
 
 		$this->skipTestOnTimeout( $res );
@@ -167,7 +146,7 @@ abstract class WP_HTTP_UnitTestCase extends WP_UnitTestCase {
 	}
 
 	function test_redirections_less_edgecase() {
-		// 4 < 5 (close edgecase)
+		// 4 < 5 (close edge case).
 		$res = wp_remote_request( $this->redirection_script . '?rt=' . 4, array( 'redirection' => 5 ) );
 
 		$this->skipTestOnTimeout( $res );
@@ -178,37 +157,37 @@ abstract class WP_HTTP_UnitTestCase extends WP_UnitTestCase {
 	 * @ticket 16855
 	 */
 	function test_redirections_zero_redirections_specified() {
-		// 0 redirections asked for, Should return the document?
+		// 0 redirections asked for, should return the document?
 		$res = wp_remote_request( $this->redirection_script . '?code=302&rt=' . 5, array( 'redirection' => 0 ) );
 
 		$this->skipTestOnTimeout( $res );
 		$this->assertNotWPError( $res );
-		$this->assertEquals( 302, (int) $res['response']['code'] );
+		$this->assertSame( 302, (int) $res['response']['code'] );
 	}
 
 	/**
-	 * Do not redirect on non 3xx status codes
+	 * Do not redirect on non 3xx status codes.
 	 *
 	 * @ticket 16889
 	 */
 	function test_location_header_on_201() {
-		// Prints PASS on initial load, FAIL if the client follows the specified redirection
+		// Prints PASS on initial load, FAIL if the client follows the specified redirection.
 		$res = wp_remote_request( $this->redirection_script . '?201-location=true' );
 
 		$this->skipTestOnTimeout( $res );
 		$this->assertNotWPError( $res );
-		$this->assertEquals( 'PASS', $res['body'] );
+		$this->assertSame( 'PASS', $res['body'] );
 	}
 
 	/**
-	 * Test handling of PUT requests on redirects
+	 * Test handling of PUT requests on redirects.
 	 *
 	 * @ticket 16889
 	 */
 	function test_no_redirection_on_PUT() {
 		$url = 'http://api.wordpress.org/core/tests/1.0/redirection.php?201-location=1';
 
-		// Test 301 - POST to POST
+		// Test 301 - POST to POST.
 		$res = wp_remote_request(
 			$url,
 			array(
@@ -218,7 +197,7 @@ abstract class WP_HTTP_UnitTestCase extends WP_UnitTestCase {
 		);
 
 		$this->skipTestOnTimeout( $res );
-		$this->assertEquals( 'PASS', wp_remote_retrieve_body( $res ) );
+		$this->assertSame( 'PASS', wp_remote_retrieve_body( $res ) );
 		$this->assertTrue( ! empty( $res['headers']['location'] ) );
 	}
 
@@ -226,7 +205,7 @@ abstract class WP_HTTP_UnitTestCase extends WP_UnitTestCase {
 	 * @ticket 11888
 	 */
 	function test_send_headers() {
-		// Test that the headers sent are received by the server
+		// Test that the headers sent are received by the server.
 		$headers = array(
 			'test1' => 'test',
 			'test2' => 0,
@@ -251,7 +230,7 @@ abstract class WP_HTTP_UnitTestCase extends WP_UnitTestCase {
 		$this->assertTrue( isset( $headers['test2'] ) && '0' === $headers['test2'] );
 		// cURL/HTTP Extension Note: Will never pass, cURL does not pass headers with an empty value.
 		// Should it be that empty headers with empty values are NOT sent?
-		//$this->assertTrue( isset($headers['test3']) && '' === $headers['test3'] );
+		// $this->assertTrue( isset( $headers['test3'] ) && '' === $headers['test3'] );
 	}
 
 	function test_file_stream() {
@@ -263,7 +242,7 @@ abstract class WP_HTTP_UnitTestCase extends WP_UnitTestCase {
 				'stream'  => true,
 				'timeout' => 30,
 			)
-		); //Auto generate the filename.
+		); // Auto generate the filename.
 
 		// Cleanup before we assert, as it'll return early.
 		if ( ! is_wp_error( $res ) ) {
@@ -273,10 +252,10 @@ abstract class WP_HTTP_UnitTestCase extends WP_UnitTestCase {
 
 		$this->skipTestOnTimeout( $res );
 		$this->assertNotWPError( $res );
-		$this->assertEquals( '', $res['body'] ); // The body should be empty.
-		$this->assertEquals( $size, $res['headers']['content-length'] ); // Check the headers are returned (and the size is the same..)
-		$this->assertEquals( $size, $filesize ); // Check that the file is written to disk correctly without any extra characters
-		$this->assertStringStartsWith( get_temp_dir(), $res['filename'] ); // Check it's saving within the temp dir
+		$this->assertSame( '', $res['body'] ); // The body should be empty.
+		$this->assertEquals( $size, $res['headers']['content-length'] );   // Check the headers are returned (and the size is the same).
+		$this->assertSame( $size, $filesize ); // Check that the file is written to disk correctly without any extra characters.
+		$this->assertStringStartsWith( get_temp_dir(), $res['filename'] ); // Check it's saving within the temp directory.
 	}
 
 	/**
@@ -292,7 +271,7 @@ abstract class WP_HTTP_UnitTestCase extends WP_UnitTestCase {
 				'timeout'             => 30,
 				'limit_response_size' => $size,
 			)
-		); //Auto generate the filename.
+		); // Auto generate the filename.
 
 		// Cleanup before we assert, as it'll return early.
 		if ( ! is_wp_error( $res ) ) {
@@ -302,12 +281,12 @@ abstract class WP_HTTP_UnitTestCase extends WP_UnitTestCase {
 
 		$this->skipTestOnTimeout( $res );
 		$this->assertNotWPError( $res );
-		$this->assertEquals( $size, $filesize ); // Check that the file is written to disk correctly without any extra characters
+		$this->assertSame( $size, $filesize ); // Check that the file is written to disk correctly without any extra characters.
 
 	}
 
 	/**
-	 * Tests Limiting the response size when returning strings
+	 * Tests limiting the response size when returning strings.
 	 *
 	 * @ticket 31172
 	 */
@@ -325,11 +304,11 @@ abstract class WP_HTTP_UnitTestCase extends WP_UnitTestCase {
 
 		$this->skipTestOnTimeout( $res );
 		$this->assertNotWPError( $res );
-		$this->assertEquals( $size, strlen( $res['body'] ) );
+		$this->assertSame( $size, strlen( $res['body'] ) );
 	}
 
 	/**
-	 * Test POST redirection methods
+	 * Test POST redirection methods.
 	 *
 	 * @dataProvider data_post_redirect_to_method_300
 	 *
@@ -341,27 +320,27 @@ abstract class WP_HTTP_UnitTestCase extends WP_UnitTestCase {
 		$res = wp_remote_post( add_query_arg( 'response_code', $response_code, $url ), array( 'timeout' => 30 ) );
 
 		$this->skipTestOnTimeout( $res );
-		$this->assertEquals( $method, wp_remote_retrieve_body( $res ) );
+		$this->assertSame( $method, wp_remote_retrieve_body( $res ) );
 	}
 
 	public function data_post_redirect_to_method_300() {
 		return array(
-			// Test 300 - POST to POST
+			// Test 300 - POST to POST.
 			array(
 				300,
 				'POST',
 			),
-			// Test 301 - POST to POST
+			// Test 301 - POST to POST.
 			array(
 				301,
 				'POST',
 			),
-			// Test 302 - POST to GET
+			// Test 302 - POST to GET.
 			array(
 				302,
 				'GET',
 			),
-			// Test 303 - POST to GET
+			// Test 303 - POST to GET.
 			array(
 				303,
 				'GET',
@@ -370,7 +349,7 @@ abstract class WP_HTTP_UnitTestCase extends WP_UnitTestCase {
 	}
 
 	/**
-	 * Test HTTP Requests using an IP url, with a HOST header specified
+	 * Test HTTP Requests using an IP URL, with a HOST header specified.
 	 *
 	 * @ticket 24182
 	 */
@@ -388,12 +367,12 @@ abstract class WP_HTTP_UnitTestCase extends WP_UnitTestCase {
 		$res = wp_remote_get( $url, $args );
 
 		$this->skipTestOnTimeout( $res );
-		$this->assertEquals( 'PASS', wp_remote_retrieve_body( $res ) );
+		$this->assertSame( 'PASS', wp_remote_retrieve_body( $res ) );
 
 	}
 
 	/**
-	 * Test HTTP requests where SSL verification is disabled but the CA bundle is still populated
+	 * Test HTTP requests where SSL verification is disabled but the CA bundle is still populated.
 	 *
 	 * @ticket 33978
 	 */
@@ -415,7 +394,7 @@ abstract class WP_HTTP_UnitTestCase extends WP_UnitTestCase {
 	}
 
 	/**
-	 * Test HTTP Redirects with multiple Location headers specified
+	 * Test HTTP Redirects with multiple Location headers specified.
 	 *
 	 * @ticket 16890
 	 */
@@ -430,12 +409,12 @@ abstract class WP_HTTP_UnitTestCase extends WP_UnitTestCase {
 		$res = wp_remote_get( $url, array( 'timeout' => 30 ) );
 
 		$this->skipTestOnTimeout( $res );
-		$this->assertEquals( 'PASS', wp_remote_retrieve_body( $res ) );
+		$this->assertSame( 'PASS', wp_remote_retrieve_body( $res ) );
 
 	}
 
 	/**
-	 * Test HTTP Cookie handling
+	 * Test HTTP Cookie handling.
 	 *
 	 * @ticket 21182
 	 */
@@ -445,11 +424,11 @@ abstract class WP_HTTP_UnitTestCase extends WP_UnitTestCase {
 		$res = wp_remote_get( $url );
 
 		$this->skipTestOnTimeout( $res );
-		$this->assertEquals( 'PASS', wp_remote_retrieve_body( $res ) );
+		$this->assertSame( 'PASS', wp_remote_retrieve_body( $res ) );
 	}
 
 	/**
-	 * Test if HTTPS support works
+	 * Test if HTTPS support works.
 	 *
 	 * @group ssl
 	 * @ticket 25007
diff --git a/tests/http/curl.php b/tests/http/curl.php
index f64cace2b7..271e6dd698 100644
--- a/tests/http/curl.php
+++ b/tests/http/curl.php
@@ -1,6 +1,6 @@
 <?php
 
-require_once dirname( __FILE__ ) . '/base.php';
+require_once __DIR__ . '/base.php';
 
 /**
  * @group http
diff --git a/tests/http/functions.php b/tests/http/functions.php
index 3b15c6856e..d28936fde6 100644
--- a/tests/http/functions.php
+++ b/tests/http/functions.php
@@ -6,27 +6,6 @@
  */
 class Tests_HTTP_Functions extends WP_UnitTestCase {
 
-	/**
-	 * Mark test as skipped if the HTTP request times out.
-	 */
-	function skipTestOnTimeout( $response ) {
-		if ( ! is_wp_error( $response ) ) {
-			return;
-		}
-		if ( 'connect() timed out!' === $response->get_error_message() ) {
-			$this->markTestSkipped( 'HTTP timeout' );
-		}
-
-		if ( false !== strpos( $response->get_error_message(), 'timed out after' ) ) {
-			$this->markTestSkipped( 'HTTP timeout' );
-		}
-
-		if ( 0 === strpos( $response->get_error_message(), 'stream_socket_client(): unable to connect to tcp://s.w.org:80' ) ) {
-			$this->markTestSkipped( 'HTTP timeout' );
-		}
-
-	}
-
 	public function setUp() {
 		if ( ! extension_loaded( 'openssl' ) ) {
 			$this->markTestSkipped( 'Tests_HTTP_Functions requires openssl.' );
@@ -36,7 +15,7 @@ class Tests_HTTP_Functions extends WP_UnitTestCase {
 	}
 
 	function test_head_request() {
-		// this url give a direct 200 response
+		// This URL gives a direct 200 response.
 		$url      = 'https://asdftestblog1.files.wordpress.com/2007/09/2007-06-30-dsc_4700-1.jpg';
 		$response = wp_remote_head( $url );
 
@@ -46,18 +25,18 @@ class Tests_HTTP_Functions extends WP_UnitTestCase {
 
 		$this->assertInternalType( 'array', $response );
 
-		$this->assertEquals( 'image/jpeg', $headers['content-type'] );
-		$this->assertEquals( '40148', $headers['content-length'] );
-		$this->assertEquals( '200', wp_remote_retrieve_response_code( $response ) );
+		$this->assertSame( 'image/jpeg', $headers['content-type'] );
+		$this->assertSame( '40148', $headers['content-length'] );
+		$this->assertSame( 200, wp_remote_retrieve_response_code( $response ) );
 	}
 
 	function test_head_redirect() {
-		// this url will 301 redirect
+		// This URL will 301 redirect.
 		$url      = 'https://asdftestblog1.wordpress.com/files/2007/09/2007-06-30-dsc_4700-1.jpg';
 		$response = wp_remote_head( $url );
 
 		$this->skipTestOnTimeout( $response );
-		$this->assertEquals( '301', wp_remote_retrieve_response_code( $response ) );
+		$this->assertSame( 301, wp_remote_retrieve_response_code( $response ) );
 	}
 
 	function test_head_404() {
@@ -65,7 +44,7 @@ class Tests_HTTP_Functions extends WP_UnitTestCase {
 		$response = wp_remote_head( $url );
 
 		$this->skipTestOnTimeout( $response );
-		$this->assertEquals( '404', wp_remote_retrieve_response_code( $response ) );
+		$this->assertSame( 404, wp_remote_retrieve_response_code( $response ) );
 	}
 
 	function test_get_request() {
@@ -79,14 +58,14 @@ class Tests_HTTP_Functions extends WP_UnitTestCase {
 
 		$this->assertInternalType( 'array', $response );
 
-		// should return the same headers as a head request
-		$this->assertEquals( 'image/jpeg', $headers['content-type'] );
-		$this->assertEquals( '40148', $headers['content-length'] );
-		$this->assertEquals( '200', wp_remote_retrieve_response_code( $response ) );
+		// Should return the same headers as a HEAD request.
+		$this->assertSame( 'image/jpeg', $headers['content-type'] );
+		$this->assertSame( '40148', $headers['content-length'] );
+		$this->assertSame( 200, wp_remote_retrieve_response_code( $response ) );
 	}
 
 	function test_get_redirect() {
-		// this will redirect to asdftestblog1.files.wordpress.com
+		// This will redirect to asdftestblog1.files.wordpress.com.
 		$url = 'https://asdftestblog1.wordpress.com/files/2007/09/2007-06-30-dsc_4700-1.jpg';
 
 		$response = wp_remote_get( $url );
@@ -95,17 +74,17 @@ class Tests_HTTP_Functions extends WP_UnitTestCase {
 
 		$headers = wp_remote_retrieve_headers( $response );
 
-		// should return the same headers as a head request
-		$this->assertEquals( 'image/jpeg', $headers['content-type'] );
-		$this->assertEquals( '40148', $headers['content-length'] );
-		$this->assertEquals( '200', wp_remote_retrieve_response_code( $response ) );
+		// Should return the same headers as a HEAD request.
+		$this->assertSame( 'image/jpeg', $headers['content-type'] );
+		$this->assertSame( '40148', $headers['content-length'] );
+		$this->assertSame( 200, wp_remote_retrieve_response_code( $response ) );
 	}
 
 	function test_get_redirect_limit_exceeded() {
-		// this will redirect to asdftestblog1.files.wordpress.com
+		// This will redirect to asdftestblog1.files.wordpress.com.
 		$url = 'https://asdftestblog1.wordpress.com/files/2007/09/2007-06-30-dsc_4700-1.jpg';
 
-		// pretend we've already redirected 5 times
+		// Pretend we've already redirected 5 times.
 		$response = wp_remote_get( $url, array( 'redirection' => -1 ) );
 
 		$this->skipTestOnTimeout( $response );
@@ -204,7 +183,7 @@ class Tests_HTTP_Functions extends WP_UnitTestCase {
 	 * @ticket 43231
 	 */
 	function test_get_cookie_host_only() {
-		// emulate WP_Http::request() internals
+		// Emulate WP_Http::request() internals.
 		$requests_response = new Requests_Response();
 
 		$requests_response->cookies['test'] = Requests_Cookie::parse( 'test=foo; domain=.wordpress.org' );
@@ -215,12 +194,12 @@ class Tests_HTTP_Functions extends WP_UnitTestCase {
 
 		$response = $http_response->to_array();
 
-		// check the host_only flag in the resulting WP_Http_Cookie
+		// Check the host_only flag in the resulting WP_Http_Cookie.
 		$cookie = wp_remote_retrieve_cookie( $response, 'test' );
-		$this->assertEquals( $cookie->domain, 'wordpress.org' );
+		$this->assertSame( $cookie->domain, 'wordpress.org' );
 		$this->assertFalse( $cookie->host_only, 'host-only flag not set' );
 
-		// regurgitate (Requests_Cookie -> WP_Http_Cookie -> Requests_Cookie)
+		// Regurgitate (Requests_Cookie -> WP_Http_Cookie -> Requests_Cookie).
 		$cookies = WP_Http::normalize_cookies( wp_remote_retrieve_cookies( $response ) );
 		$this->assertFalse( $cookies['test']->flags['host-only'], 'host-only flag data lost' );
 	}
diff --git a/tests/http/http.php b/tests/http/http.php
index 49d3d87a87..4986f1719b 100644
--- a/tests/http/http.php
+++ b/tests/http/http.php
@@ -13,33 +13,36 @@ class Tests_HTTP_HTTP extends WP_UnitTestCase {
 	 */
 	function test_make_absolute_url( $relative_url, $absolute_url, $expected ) {
 		$actual = WP_Http::make_absolute_url( $relative_url, $absolute_url );
-		$this->assertEquals( $expected, $actual );
+		$this->assertSame( $expected, $actual );
 	}
 
 	function make_absolute_url_testcases() {
-		// 0: The Location header, 1: The current url, 3: The expected url
+		// 0: The Location header, 1: The current URL, 3: The expected URL.
 		return array(
-			array( 'http://site.com/', 'http://example.com/', 'http://site.com/' ), // Absolute URL provided
-			array( '/location', '', '/location' ), // No current url provided
+			// Absolute URL provided.
+			array( 'http://site.com/', 'http://example.com/', 'http://site.com/' ),
+			// No current URL provided.
+			array( '/location', '', '/location' ),
 
-			array( '', 'http://example.com', 'http://example.com/' ), // No location provided
+			// No location provided.
+			array( '', 'http://example.com', 'http://example.com/' ),
 
-			// Location provided relative to site root
+			// Location provided relative to site root.
 			array( '/root-relative-link.ext', 'http://example.com/', 'http://example.com/root-relative-link.ext' ),
 			array( '/root-relative-link.ext?with=query', 'http://example.com/index.ext?query', 'http://example.com/root-relative-link.ext?with=query' ),
 
-			// Location provided relative to current file/directory
+			// Location provided relative to current file/directory.
 			array( 'relative-file.ext', 'http://example.com/', 'http://example.com/relative-file.ext' ),
 			array( 'relative-file.ext', 'http://example.com/filename', 'http://example.com/relative-file.ext' ),
 			array( 'relative-file.ext', 'http://example.com/directory/', 'http://example.com/directory/relative-file.ext' ),
 
-			// Location provided relative to current file/directory but in a parent directory
+			// Location provided relative to current file/directory but in a parent directory.
 			array( '../file-in-parent.ext', 'http://example.com', 'http://example.com/file-in-parent.ext' ),
 			array( '../file-in-parent.ext', 'http://example.com/filename', 'http://example.com/file-in-parent.ext' ),
 			array( '../file-in-parent.ext', 'http://example.com/directory/', 'http://example.com/file-in-parent.ext' ),
 			array( '../file-in-parent.ext', 'http://example.com/directory/filename', 'http://example.com/file-in-parent.ext' ),
 
-			// Location provided in muliple levels higher, including impossible to reach (../ below DOCROOT)
+			// Location provided in muliple levels higher, including impossible to reach (../ below DOCROOT).
 			array( '../../file-in-grand-parent.ext', 'http://example.com', 'http://example.com/file-in-grand-parent.ext' ),
 			array( '../../file-in-grand-parent.ext', 'http://example.com/filename', 'http://example.com/file-in-grand-parent.ext' ),
 			array( '../../file-in-grand-parent.ext', 'http://example.com/directory/', 'http://example.com/file-in-grand-parent.ext' ),
@@ -52,14 +55,14 @@ class Tests_HTTP_HTTP extends WP_UnitTestCase {
 			array( '?query=string', 'http://example.com/file.ext?existing=query-string', 'http://example.com/file.ext?query=string' ),
 			array( 'otherfile.ext?query=string', 'http://example.com/file.ext?existing=query-string', 'http://example.com/otherfile.ext?query=string' ),
 
-			// A file with a leading dot
+			// A file with a leading dot.
 			array( '.ext', 'http://example.com/', 'http://example.com/.ext' ),
 
-			// URls within URLs
+			// URLs within URLs.
 			array( '/expected', 'http://example.com/sub/http://site.com/sub/', 'http://example.com/expected' ),
 			array( '/expected/http://site.com/sub/', 'http://example.com/', 'http://example.com/expected/http://site.com/sub/' ),
 
-			// Schemeless URL's (Not valid in HTTP Headers, but may be used elsewhere)
+			// Schemeless URL's (not valid in HTTP Headers, but may be used elsewhere).
 			array( '//example.com/sub/', 'https://example.net', 'https://example.com/sub/' ),
 		);
 	}
@@ -69,11 +72,11 @@ class Tests_HTTP_HTTP extends WP_UnitTestCase {
 	 */
 	function test_wp_parse_url( $url, $expected ) {
 		$actual = wp_parse_url( $url );
-		$this->assertEquals( $expected, $actual );
+		$this->assertSame( $expected, $actual );
 	}
 
 	function parse_url_testcases() {
-		// 0: The URL, 1: The expected resulting structure
+		// 0: The URL, 1: The expected resulting structure.
 		return array(
 			array(
 				self::FULL_TEST_URL,
@@ -97,7 +100,7 @@ class Tests_HTTP_HTTP extends WP_UnitTestCase {
 				),
 			),
 
-			// < PHP 5.4.7: Schemeless URL
+			// < PHP 5.4.7: Schemeless URL.
 			array(
 				'//example.com/path/',
 				array(
@@ -141,7 +144,7 @@ class Tests_HTTP_HTTP extends WP_UnitTestCase {
 				),
 			),
 
-			// PHP's parse_url() calls this an invalid url, we handle it as a path
+			// PHP's parse_url() calls this an invalid url, we handle it as a path.
 			array( '/://example.com/', array( 'path' => '/://example.com/' ) ),
 
 			// Schemeless URL containing colons cause parse errors in PHP 7+.
@@ -180,7 +183,7 @@ class Tests_HTTP_HTTP extends WP_UnitTestCase {
 	 */
 	function test_wp_parse_url_with_default_component() {
 		$actual = wp_parse_url( self::FULL_TEST_URL, -1 );
-		$this->assertEquals(
+		$this->assertSame(
 			array(
 				'scheme'   => 'http',
 				'host'     => 'host.name',
@@ -243,10 +246,10 @@ class Tests_HTTP_HTTP extends WP_UnitTestCase {
 			array( '//fonts.googleapis.com/css?family=Open+Sans:400&subset=latin', PHP_URL_PORT, null ),
 			array( '//fonts.googleapis.com/css?family=Open+Sans:400&subset=latin', PHP_URL_PATH, '/css' ),
 			array( '//fonts.googleapis.com/css?family=Open+Sans:400&subset=latin', PHP_URL_QUERY, 'family=Open+Sans:400&subset=latin' ),
-			array( '//fonts.googleapis.com/css?family=Open+Sans:400', PHP_URL_HOST, 'fonts.googleapis.com' ), // 25
+			array( '//fonts.googleapis.com/css?family=Open+Sans:400', PHP_URL_HOST, 'fonts.googleapis.com' ),  // 25
 			array( '//fonts.googleapis.com/css?family=Open+Sans:400', PHP_URL_PORT, null ),
-			array( '//fonts.googleapis.com/css?family=Open+Sans:400', PHP_URL_PATH, '/css' ), //27
-			array( '//fonts.googleapis.com/css?family=Open+Sans:400', PHP_URL_QUERY, 'family=Open+Sans:400' ), //28
+			array( '//fonts.googleapis.com/css?family=Open+Sans:400', PHP_URL_PATH, '/css' ),                  // 27
+			array( '//fonts.googleapis.com/css?family=Open+Sans:400', PHP_URL_QUERY, 'family=Open+Sans:400' ), // 28
 
 			// Empty string or non-string passed in.
 			array( '', PHP_URL_PATH, '' ),
@@ -268,7 +271,7 @@ class Tests_HTTP_HTTP extends WP_UnitTestCase {
 		// This primes the `$wp_header_to_desc` global:
 		get_status_header_desc( 200 );
 
-		$this->assertEquals( array_keys( $wp_header_to_desc ), array_values( $constants ) );
+		$this->assertSame( array_keys( $wp_header_to_desc ), array_values( $constants ) );
 
 	}
 
@@ -339,7 +342,7 @@ class Tests_HTTP_HTTP extends WP_UnitTestCase {
 			),
 			array( 'http://example.com/', PHP_URL_HOST, 'example.com' ),
 			array( 'http://example.com/', PHP_URL_USER, null ),
-			array( 'http:///example.com', -1, false ), // Malformed.
+			array( 'http:///example.com', -1, false ),          // Malformed.
 			array( 'http:///example.com', PHP_URL_HOST, null ), // Malformed.
 		);
 	}
diff --git a/tests/http/remoteRetrieveHeaders.php b/tests/http/remoteRetrieveHeaders.php
index 4551df7c54..1d4e42f2e9 100644
--- a/tests/http/remoteRetrieveHeaders.php
+++ b/tests/http/remoteRetrieveHeaders.php
@@ -13,7 +13,7 @@ class Tests_HTTP_RemoteRetrieveHeaders extends WP_UnitTestCase {
 		$response = array( 'headers' => $headers );
 
 		$result = wp_remote_retrieve_headers( $response );
-		$this->assertEquals( $headers, $result );
+		$this->assertSame( $headers, $result );
 	}
 
 	/**
@@ -23,7 +23,7 @@ class Tests_HTTP_RemoteRetrieveHeaders extends WP_UnitTestCase {
 		$response = new WP_Error( 'Some error' );
 
 		$result = wp_remote_retrieve_headers( $response );
-		$this->assertEquals( array(), $result );
+		$this->assertSame( array(), $result );
 	}
 
 	/**
@@ -33,6 +33,6 @@ class Tests_HTTP_RemoteRetrieveHeaders extends WP_UnitTestCase {
 		$response = array( 'no_headers' => 'set' );
 
 		$result = wp_remote_retrieve_headers( $response );
-		$this->assertEquals( array(), $result );
+		$this->assertSame( array(), $result );
 	}
 }
diff --git a/tests/http/streams.php b/tests/http/streams.php
index 2c6922f901..61fcc11925 100644
--- a/tests/http/streams.php
+++ b/tests/http/streams.php
@@ -1,6 +1,6 @@
 <?php
 
-require_once dirname( __FILE__ ) . '/base.php';
+require_once __DIR__ . '/base.php';
 
 /**
  * @group http
diff --git a/tests/image/base.php b/tests/image/base.php
index 3c32052b63..8392c548a0 100644
--- a/tests/image/base.php
+++ b/tests/image/base.php
@@ -48,7 +48,7 @@ abstract class WP_Image_UnitTestCase extends WP_UnitTestCase {
 
 		$colors = imagecolorsforindex( $im, $rgb );
 
-		$this->assertEquals( $alpha, $colors['alpha'] );
+		$this->assertSame( $alpha, $colors['alpha'] );
 	}
 
 	/**
@@ -62,7 +62,7 @@ abstract class WP_Image_UnitTestCase extends WP_UnitTestCase {
 		$im    = new Imagick( $image_path );
 		$pixel = $im->getImagePixelColor( $point[0], $point[1] );
 		$color = $pixel->getColorValue( imagick::COLOR_ALPHA );
-		$this->assertEquals( $expected, $color );
+		$this->assertSame( $expected, $color );
 	}
 
 	/**
@@ -85,7 +85,7 @@ abstract class WP_Image_UnitTestCase extends WP_UnitTestCase {
 			$detected_height = $image_size[1];
 		}
 
-		$this->assertEquals( $width, $detected_width );
-		$this->assertEquals( $height, $detected_height );
+		$this->assertSame( $width, $detected_width );
+		$this->assertSame( $height, $detected_height );
 	}
 }
diff --git a/tests/image/dimensions.php b/tests/image/dimensions.php
index 87b494ba87..bbab2d3b39 100644
--- a/tests/image/dimensions.php
+++ b/tests/image/dimensions.php
@@ -7,148 +7,148 @@
  */
 class Tests_Image_Dimensions extends WP_UnitTestCase {
 	function test_400x400_no_crop() {
-		// landscape: resize 640x480 to fit 400x400: 400x300
+		// Landscape: resize 640x480 to fit 400x400: 400x300.
 		$out = image_resize_dimensions( 640, 480, 400, 400, false );
-		// dst_x, dst_y, src_x, src_y, dst_w, dst_h, src_w, src_h
-		$this->assertEquals( array( 0, 0, 0, 0, 400, 300, 640, 480 ), $out );
+		// dst_x, dst_y, src_x, src_y, dst_w, dst_h, src_w, src_h.
+		$this->assertSame( array( 0, 0, 0, 0, 400, 300, 640, 480 ), $out );
 
-		// portrait: resize 480x640 to fit 400x400: 300x400
+		// Portrait: resize 480x640 to fit 400x400: 300x400.
 		$out = image_resize_dimensions( 480, 640, 400, 400, false );
-		// dst_x, dst_y, src_x, src_y, dst_w, dst_h, src_w, src_h
-		$this->assertEquals( array( 0, 0, 0, 0, 300, 400, 480, 640 ), $out );
+		// dst_x, dst_y, src_x, src_y, dst_w, dst_h, src_w, src_h.
+		$this->assertSame( array( 0, 0, 0, 0, 300, 400, 480, 640 ), $out );
 	}
 
 	function test_400x0_no_crop() {
-		// landscape: resize 640x480 to fit 400w: 400x300
+		// Landscape: resize 640x480 to fit 400w: 400x300.
 		$out = image_resize_dimensions( 640, 480, 400, 0, false );
-		// dst_x, dst_y, src_x, src_y, dst_w, dst_h, src_w, src_h
-		$this->assertEquals( array( 0, 0, 0, 0, 400, 300, 640, 480 ), $out );
+		// dst_x, dst_y, src_x, src_y, dst_w, dst_h, src_w, src_h.
+		$this->assertSame( array( 0, 0, 0, 0, 400, 300, 640, 480 ), $out );
 
-		// portrait: resize 480x640 to fit 400w: 400x533
+		// Portrait: resize 480x640 to fit 400w: 400x533.
 		$out = image_resize_dimensions( 480, 640, 400, 0, false );
-		// dst_x, dst_y, src_x, src_y, dst_w, dst_h, src_w, src_h
-		$this->assertEquals( array( 0, 0, 0, 0, 400, 533, 480, 640 ), $out );
+		// dst_x, dst_y, src_x, src_y, dst_w, dst_h, src_w, src_h.
+		$this->assertSame( array( 0, 0, 0, 0, 400, 533, 480, 640 ), $out );
 	}
 
 	function test_0x400_no_crop() {
-		// landscape: resize 640x480 to fit 400h: 533x400
+		// Landscape: resize 640x480 to fit 400h: 533x400.
 		$out = image_resize_dimensions( 640, 480, 0, 400, false );
-		// dst_x, dst_y, src_x, src_y, dst_w, dst_h, src_w, src_h
-		$this->assertEquals( array( 0, 0, 0, 0, 533, 400, 640, 480 ), $out );
+		// dst_x, dst_y, src_x, src_y, dst_w, dst_h, src_w, src_h.
+		$this->assertSame( array( 0, 0, 0, 0, 533, 400, 640, 480 ), $out );
 
-		// portrait: resize 480x640 to fit 400h: 300x400
+		// Portrait: resize 480x640 to fit 400h: 300x400.
 		$out = image_resize_dimensions( 480, 640, 0, 400, false );
-		// dst_x, dst_y, src_x, src_y, dst_w, dst_h, src_w, src_h
-		$this->assertEquals( array( 0, 0, 0, 0, 300, 400, 480, 640 ), $out );
+		// dst_x, dst_y, src_x, src_y, dst_w, dst_h, src_w, src_h.
+		$this->assertSame( array( 0, 0, 0, 0, 300, 400, 480, 640 ), $out );
 	}
 
 	function test_800x800_no_crop() {
-		// landscape: resize 640x480 to fit 800x800
+		// Landscape: resize 640x480 to fit 800x800.
 		$out = image_resize_dimensions( 640, 480, 800, 800, false );
-		// dst_x, dst_y, src_x, src_y, dst_w, dst_h, src_w, src_h
-		$this->assertEquals( false, $out );
+		// dst_x, dst_y, src_x, src_y, dst_w, dst_h, src_w, src_h.
+		$this->assertFalse( $out );
 
-		// portrait: resize 480x640 to fit 800x800
+		// Portrait: resize 480x640 to fit 800x800.
 		$out = image_resize_dimensions( 480, 640, 800, 800, false );
-		// dst_x, dst_y, src_x, src_y, dst_w, dst_h, src_w, src_h
-		$this->assertEquals( false, $out );
+		// dst_x, dst_y, src_x, src_y, dst_w, dst_h, src_w, src_h.
+		$this->assertFalse( $out );
 	}
 
 	function test_800x0_no_crop() {
-		// landscape: resize 640x480 to fit 800w
+		// Landscape: resize 640x480 to fit 800w.
 		$out = image_resize_dimensions( 640, 480, 800, 0, false );
-		// dst_x, dst_y, src_x, src_y, dst_w, dst_h, src_w, src_h
-		$this->assertEquals( false, $out );
+		// dst_x, dst_y, src_x, src_y, dst_w, dst_h, src_w, src_h.
+		$this->assertFalse( $out );
 
-		// portrait: resize 480x640 to fit 800w
+		// Portrait: resize 480x640 to fit 800w.
 		$out = image_resize_dimensions( 480, 640, 800, 0, false );
-		// dst_x, dst_y, src_x, src_y, dst_w, dst_h, src_w, src_h
-		$this->assertEquals( false, $out );
+		// dst_x, dst_y, src_x, src_y, dst_w, dst_h, src_w, src_h.
+		$this->assertFalse( $out );
 	}
 
 	function test_0x800_no_crop() {
-		// landscape: resize 640x480 to fit 800h
+		// Landscape: resize 640x480 to fit 800h.
 		$out = image_resize_dimensions( 640, 480, 0, 800, false );
-		// dst_x, dst_y, src_x, src_y, dst_w, dst_h, src_w, src_h
-		$this->assertEquals( false, $out );
+		// dst_x, dst_y, src_x, src_y, dst_w, dst_h, src_w, src_h.
+		$this->assertFalse( $out );
 
-		// portrait: resize 480x640 to fit 800h
+		// Portrait: resize 480x640 to fit 800h.
 		$out = image_resize_dimensions( 480, 640, 0, 800, false );
-		// dst_x, dst_y, src_x, src_y, dst_w, dst_h, src_w, src_h
-		$this->assertEquals( false, $out );
+		// dst_x, dst_y, src_x, src_y, dst_w, dst_h, src_w, src_h.
+		$this->assertFalse( $out );
 	}
 
-	// cropped versions
+	// Cropped versions.
 
 	function test_400x400_crop() {
-		// landscape: crop 640x480 to fit 400x400: 400x400 taken from a 480x480 crop at (80. 0)
+		// Landscape: crop 640x480 to fit 400x400: 400x400 taken from a 480x480 crop at (80. 0).
 		$out = image_resize_dimensions( 640, 480, 400, 400, true );
-		// dst_x, dst_y, src_x, src_y, dst_w, dst_h, src_w, src_h
-		$this->assertEquals( array( 0, 0, 80, 0, 400, 400, 480, 480 ), $out );
+		// dst_x, dst_y, src_x, src_y, dst_w, dst_h, src_w, src_h.
+		$this->assertSame( array( 0, 0, 80, 0, 400, 400, 480, 480 ), $out );
 
-		// portrait: resize 480x640 to fit 400x400: 400x400 taken from a 480x480 crop at (0. 80)
+		// Portrait: resize 480x640 to fit 400x400: 400x400 taken from a 480x480 crop at (0. 80).
 		$out = image_resize_dimensions( 480, 640, 400, 400, true );
-		// dst_x, dst_y, src_x, src_y, dst_w, dst_h, src_w, src_h
-		$this->assertEquals( array( 0, 0, 0, 80, 400, 400, 480, 480 ), $out );
+		// dst_x, dst_y, src_x, src_y, dst_w, dst_h, src_w, src_h.
+		$this->assertSame( array( 0, 0, 0, 80, 400, 400, 480, 480 ), $out );
 	}
 
 	function test_400x0_crop() {
-		// landscape: resize 640x480 to fit 400w: 400x300
+		// Landscape: resize 640x480 to fit 400w: 400x300.
 		$out = image_resize_dimensions( 640, 480, 400, 0, true );
-		// dst_x, dst_y, src_x, src_y, dst_w, dst_h, src_w, src_h
-		$this->assertEquals( array( 0, 0, 0, 0, 400, 300, 640, 480 ), $out );
+		// dst_x, dst_y, src_x, src_y, dst_w, dst_h, src_w, src_h.
+		$this->assertSame( array( 0, 0, 0, 0, 400, 300, 640, 480 ), $out );
 
-		// portrait: resize 480x640 to fit 400w: 400x533
+		// Portrait: resize 480x640 to fit 400w: 400x533.
 		$out = image_resize_dimensions( 480, 640, 400, 0, true );
-		// dst_x, dst_y, src_x, src_y, dst_w, dst_h, src_w, src_h
-		$this->assertEquals( array( 0, 0, 0, 0, 400, 533, 480, 640 ), $out );
+		// dst_x, dst_y, src_x, src_y, dst_w, dst_h, src_w, src_h.
+		$this->assertSame( array( 0, 0, 0, 0, 400, 533, 480, 640 ), $out );
 	}
 
 	function test_0x400_crop() {
-		// landscape: resize 640x480 to fit 400h: 533x400
+		// Landscape: resize 640x480 to fit 400h: 533x400.
 		$out = image_resize_dimensions( 640, 480, 0, 400, true );
-		// dst_x, dst_y, src_x, src_y, dst_w, dst_h, src_w, src_h
-		$this->assertEquals( array( 0, 0, 0, 0, 533, 400, 640, 480 ), $out );
+		// dst_x, dst_y, src_x, src_y, dst_w, dst_h, src_w, src_h.
+		$this->assertSame( array( 0, 0, 0, 0, 533, 400, 640, 480 ), $out );
 
-		// portrait: resize 480x640 to fit 400h: 300x400
+		// Portrait: resize 480x640 to fit 400h: 300x400.
 		$out = image_resize_dimensions( 480, 640, 0, 400, true );
-		// dst_x, dst_y, src_x, src_y, dst_w, dst_h, src_w, src_h
-		$this->assertEquals( array( 0, 0, 0, 0, 300, 400, 480, 640 ), $out );
+		// dst_x, dst_y, src_x, src_y, dst_w, dst_h, src_w, src_h.
+		$this->assertSame( array( 0, 0, 0, 0, 300, 400, 480, 640 ), $out );
 	}
 
 	function test_400x500_crop() {
-		// landscape: crop 640x480 to fit 400x500: 400x400 taken from a 480x480 crop at (80. 0)
+		// Landscape: crop 640x480 to fit 400x500: 400x400 taken from a 480x480 crop at (80. 0).
 		$out = image_resize_dimensions( 640, 480, 400, 500, true );
-		// dst_x, dst_y, src_x, src_y, dst_w, dst_h, src_w, src_h
-		$this->assertEquals( array( 0, 0, 120, 0, 400, 480, 400, 480 ), $out );
+		// dst_x, dst_y, src_x, src_y, dst_w, dst_h, src_w, src_h.
+		$this->assertSame( array( 0, 0, 120, 0, 400, 480, 400, 480 ), $out );
 
-		// portrait: resize 480x640 to fit 400x400: 400x400 taken from a 480x480 crop at (0. 80)
+		// Portrait: resize 480x640 to fit 400x400: 400x400 taken from a 480x480 crop at (0. 80).
 		$out = image_resize_dimensions( 480, 640, 400, 500, true );
-		// dst_x, dst_y, src_x, src_y, dst_w, dst_h, src_w, src_h
-		$this->assertEquals( array( 0, 0, 0, 20, 400, 500, 480, 600 ), $out );
+		// dst_x, dst_y, src_x, src_y, dst_w, dst_h, src_w, src_h.
+		$this->assertSame( array( 0, 0, 0, 20, 400, 500, 480, 600 ), $out );
 	}
 
 	function test_640x480() {
-		// crop 640x480 to fit 640x480 (no change)
+		// Crop 640x480 to fit 640x480 (no change).
 		$out = image_resize_dimensions( 640, 480, 640, 480, true );
 		$this->assertFalse( $out );
 
-		// resize 640x480 to fit 640x480 (no change)
+		// Resize 640x480 to fit 640x480 (no change).
 		$out = image_resize_dimensions( 640, 480, 640, 480, false );
 		$this->assertFalse( $out );
 
 		// Test with the filter override.
 		add_filter( 'wp_image_resize_identical_dimensions', '__return_true' );
 
-		// crop 640x480 to fit 640x480 (no change)
+		// Crop 640x480 to fit 640x480 (no change).
 		$out = image_resize_dimensions( 640, 480, 640, 480, true );
-		// dst_x, dst_y, src_x, src_y, dst_w, dst_h, src_w, src_h
-		$this->assertEquals( array( 0, 0, 0, 0, 640, 480, 640, 480 ), $out );
+		// dst_x, dst_y, src_x, src_y, dst_w, dst_h, src_w, src_h.
+		$this->assertSame( array( 0, 0, 0, 0, 640, 480, 640, 480 ), $out );
 
-		// resize 640x480 to fit 640x480 (no change)
+		// Resize 640x480 to fit 640x480 (no change).
 		$out = image_resize_dimensions( 640, 480, 640, 480, false );
-		// dst_x, dst_y, src_x, src_y, dst_w, dst_h, src_w, src_h
-		$this->assertEquals( array( 0, 0, 0, 0, 640, 480, 640, 480 ), $out );
+		// dst_x, dst_y, src_x, src_y, dst_w, dst_h, src_w, src_h.
+		$this->assertSame( array( 0, 0, 0, 0, 640, 480, 640, 480 ), $out );
 
 		remove_filter( 'wp_image_resize_identical_dimensions', '__return_true' );
 	}
@@ -157,29 +157,29 @@ class Tests_Image_Dimensions extends WP_UnitTestCase {
 	 * @ticket 19393
 	 */
 	function test_crop_anchors() {
-		// landscape: crop 640x480 to fit 400x500: 400x400 taken from a 480x480 crop
-		// src_x = 0 (left), src_y = 0 (top)
+		// Landscape: crop 640x480 to fit 400x500: 400x400 taken from a 480x480 crop.
+		// src_x = 0 (left), src_y = 0 (top).
 		$out = image_resize_dimensions( 640, 480, 400, 500, array( 'left', 'top' ) );
-		// dst_x, dst_y, src_x, src_y, dst_w, dst_h, src_w, src_h
-		$this->assertEquals( array( 0, 0, 0, 0, 400, 480, 400, 480 ), $out );
+		// dst_x, dst_y, src_x, src_y, dst_w, dst_h, src_w, src_h.
+		$this->assertSame( array( 0, 0, 0, 0, 400, 480, 400, 480 ), $out );
 
-		// portrait: resize 480x640 to fit 400x400: 400x400 taken from a 480x480 crop
-		// src_x = 0 (left), src_y = 0 (top)
+		// Portrait: resize 480x640 to fit 400x400: 400x400 taken from a 480x480 crop.
+		// src_x = 0 (left), src_y = 0 (top).
 		$out = image_resize_dimensions( 480, 640, 400, 500, array( 'left', 'top' ) );
-		// dst_x, dst_y, src_x, src_y, dst_w, dst_h, src_w, src_h
-		$this->assertEquals( array( 0, 0, 0, 0, 400, 500, 480, 600 ), $out );
+		// dst_x, dst_y, src_x, src_y, dst_w, dst_h, src_w, src_h.
+		$this->assertSame( array( 0, 0, 0, 0, 400, 500, 480, 600 ), $out );
 
-		// landscape: crop 640x480 to fit 400x500: 400x400 taken from a 480x480 crop
-		// src_x = 240 (left), src_y = 0 (due to landscape crop)
+		// Landscape: crop 640x480 to fit 400x500: 400x400 taken from a 480x480 crop.
+		// src_x = 240 (left), src_y = 0 (due to landscape crop).
 		$out = image_resize_dimensions( 640, 480, 400, 500, array( 'right', 'bottom' ) );
-		// dst_x, dst_y, src_x, src_y, dst_w, dst_h, src_w, src_h
-		$this->assertEquals( array( 0, 0, 240, 0, 400, 480, 400, 480 ), $out );
+		// dst_x, dst_y, src_x, src_y, dst_w, dst_h, src_w, src_h.
+		$this->assertSame( array( 0, 0, 240, 0, 400, 480, 400, 480 ), $out );
 
-		// portrait: resize 480x640 to fit 400x400: 400x400 taken from a 480x480 crop
-		// src_x = 0 (due to portrait crop), src_y = 40 (bottom)
+		// Portrait: resize 480x640 to fit 400x400: 400x400 taken from a 480x480 crop.
+		// src_x = 0 (due to portrait crop), src_y = 40 (bottom).
 		$out = image_resize_dimensions( 480, 640, 400, 500, array( 'right', 'bottom' ) );
-		// dst_x, dst_y, src_x, src_y, dst_w, dst_h, src_w, src_h
-		$this->assertEquals( array( 0, 0, 0, 40, 400, 500, 480, 600 ), $out );
+		// dst_x, dst_y, src_x, src_y, dst_w, dst_h, src_w, src_h.
+		$this->assertSame( array( 0, 0, 0, 40, 400, 500, 480, 600 ), $out );
 	}
 
 }
diff --git a/tests/image/editor.php b/tests/image/editor.php
index 35242ad3e0..34e2b29fd4 100644
--- a/tests/image/editor.php
+++ b/tests/image/editor.php
@@ -1,6 +1,6 @@
 <?php
 
-require_once dirname( __FILE__ ) . '/base.php';
+require_once __DIR__ . '/base.php';
 
 /**
  * Test the WP_Image_Editor base class
@@ -15,9 +15,9 @@ class Tests_Image_Editor extends WP_Image_UnitTestCase {
 	 * Setup test fixture
 	 */
 	public function setUp() {
-		require_once( ABSPATH . WPINC . '/class-wp-image-editor.php' );
+		require_once ABSPATH . WPINC . '/class-wp-image-editor.php';
 
-		include_once( DIR_TESTDATA . '/../includes/mock-image-editor.php' );
+		require_once DIR_TESTDATA . '/../includes/mock-image-editor.php';
 
 		parent::setUp();
 	}
@@ -69,43 +69,43 @@ class Tests_Image_Editor extends WP_Image_UnitTestCase {
 	 */
 	public function test_set_quality() {
 
-		// Get an editor
+		// Get an editor.
 		$editor = wp_get_image_editor( DIR_TESTDATA . '/images/canola.jpg' );
 		$editor->set_mime_type( 'image/jpeg' ); // Ensure mime-specific filters act properly.
 
-		// Check default value
-		$this->assertEquals( 82, $editor->get_quality() );
+		// Check default value.
+		$this->assertSame( 82, $editor->get_quality() );
 
 		// Ensure the quality filters do not have precedence if created after editor instantiation.
 		$func_100_percent = array( $this, 'return_integer_100' );
 		add_filter( 'wp_editor_set_quality', $func_100_percent );
-		$this->assertEquals( 82, $editor->get_quality() );
+		$this->assertSame( 82, $editor->get_quality() );
 
 		$func_95_percent = array( $this, 'return_integer_95' );
 		add_filter( 'jpeg_quality', $func_95_percent );
-		$this->assertEquals( 82, $editor->get_quality() );
+		$this->assertSame( 82, $editor->get_quality() );
 
-		// Ensure set_quality() works and overrides the filters
+		// Ensure set_quality() works and overrides the filters.
 		$this->assertTrue( $editor->set_quality( 75 ) );
-		$this->assertEquals( 75, $editor->get_quality() );
+		$this->assertSame( 75, $editor->get_quality() );
 
-		// Get a new editor to clear default quality state
+		// Get a new editor to clear default quality state.
 		unset( $editor );
 		$editor = wp_get_image_editor( DIR_TESTDATA . '/images/canola.jpg' );
 		$editor->set_mime_type( 'image/jpeg' ); // Ensure mime-specific filters act properly.
 
 		// Ensure jpeg_quality filter applies if it exists before editor instantiation.
-		$this->assertEquals( 95, $editor->get_quality() );
+		$this->assertSame( 95, $editor->get_quality() );
 
-		// Get a new editor to clear jpeg_quality state
+		// Get a new editor to clear jpeg_quality state.
 		remove_filter( 'jpeg_quality', $func_95_percent );
 		unset( $editor );
 		$editor = wp_get_image_editor( DIR_TESTDATA . '/images/canola.jpg' );
 
 		// Ensure wp_editor_set_quality filter applies if it exists before editor instantiation.
-		$this->assertEquals( 100, $editor->get_quality() );
+		$this->assertSame( 100, $editor->get_quality() );
 
-		// Clean up
+		// Clean up.
 		remove_filter( 'wp_editor_set_quality', $func_100_percent );
 	}
 
@@ -116,7 +116,7 @@ class Tests_Image_Editor extends WP_Image_UnitTestCase {
 	 */
 	public function test_generate_filename() {
 
-		// Get an editor
+		// Get an editor.
 		$editor = wp_get_image_editor( DIR_TESTDATA . '/images/canola.jpg' );
 
 		$property = new ReflectionProperty( $editor, 'size' );
@@ -129,20 +129,20 @@ class Tests_Image_Editor extends WP_Image_UnitTestCase {
 			)
 		);
 
-		// Test with no parameters
-		$this->assertEquals( 'canola-100x50.jpg', wp_basename( $editor->generate_filename() ) );
+		// Test with no parameters.
+		$this->assertSame( 'canola-100x50.jpg', wp_basename( $editor->generate_filename() ) );
 
-		// Test with a suffix only
-		$this->assertEquals( 'canola-new.jpg', wp_basename( $editor->generate_filename( 'new' ) ) );
+		// Test with a suffix only.
+		$this->assertSame( 'canola-new.jpg', wp_basename( $editor->generate_filename( 'new' ) ) );
 
-		// Test with a destination dir only
-		$this->assertEquals( trailingslashit( realpath( get_temp_dir() ) ), trailingslashit( realpath( dirname( $editor->generate_filename( null, get_temp_dir() ) ) ) ) );
+		// Test with a destination dir only.
+		$this->assertSame( trailingslashit( realpath( get_temp_dir() ) ), trailingslashit( realpath( dirname( $editor->generate_filename( null, get_temp_dir() ) ) ) ) );
 
-		// Test with a suffix only
-		$this->assertEquals( 'canola-100x50.png', wp_basename( $editor->generate_filename( null, null, 'png' ) ) );
+		// Test with a suffix only.
+		$this->assertSame( 'canola-100x50.png', wp_basename( $editor->generate_filename( null, null, 'png' ) ) );
 
 		// Combo!
-		$this->assertEquals( trailingslashit( realpath( get_temp_dir() ) ) . 'canola-new.png', $editor->generate_filename( 'new', realpath( get_temp_dir() ), 'png' ) );
+		$this->assertSame( trailingslashit( realpath( get_temp_dir() ) ) . 'canola-new.png', $editor->generate_filename( 'new', realpath( get_temp_dir() ), 'png' ) );
 	}
 
 	/**
@@ -154,10 +154,10 @@ class Tests_Image_Editor extends WP_Image_UnitTestCase {
 
 		$editor = wp_get_image_editor( DIR_TESTDATA . '/images/canola.jpg' );
 
-		// Size should be false by default
+		// Size should be false by default.
 		$this->assertNull( $editor->get_size() );
 
-		// Set a size
+		// Set a size.
 		$size     = array(
 			'height' => 50,
 			'width'  => 100,
@@ -166,7 +166,7 @@ class Tests_Image_Editor extends WP_Image_UnitTestCase {
 		$property->setAccessible( true );
 		$property->setValue( $editor, $size );
 
-		$this->assertEquals( $size, $editor->get_size() );
+		$this->assertSame( $size, $editor->get_size() );
 	}
 
 	/**
@@ -177,10 +177,10 @@ class Tests_Image_Editor extends WP_Image_UnitTestCase {
 	public function test_get_suffix() {
 		$editor = wp_get_image_editor( DIR_TESTDATA . '/images/canola.jpg' );
 
-		// Size should be false by default
+		// Size should be false by default.
 		$this->assertFalse( $editor->get_suffix() );
 
-		// Set a size
+		// Set a size.
 		$size     = array(
 			'height' => 50,
 			'width'  => 100,
@@ -189,6 +189,6 @@ class Tests_Image_Editor extends WP_Image_UnitTestCase {
 		$property->setAccessible( true );
 		$property->setValue( $editor, $size );
 
-		$this->assertEquals( '100x50', $editor->get_suffix() );
+		$this->assertSame( '100x50', $editor->get_suffix() );
 	}
 }
diff --git a/tests/image/editorGd.php b/tests/image/editorGd.php
index fdd0e9c96a..480d66f0ac 100644
--- a/tests/image/editorGd.php
+++ b/tests/image/editorGd.php
@@ -7,15 +7,15 @@
  * @group media
  * @group wp-image-editor-gd
  */
-require_once( dirname( __FILE__ ) . '/base.php' );
+require_once __DIR__ . '/base.php';
 
 class Tests_Image_Editor_GD extends WP_Image_UnitTestCase {
 
 	public $editor_engine = 'WP_Image_Editor_GD';
 
 	public function setUp() {
-		require_once( ABSPATH . WPINC . '/class-wp-image-editor.php' );
-		require_once( ABSPATH . WPINC . '/class-wp-image-editor-gd.php' );
+		require_once ABSPATH . WPINC . '/class-wp-image-editor.php';
+		require_once ABSPATH . WPINC . '/class-wp-image-editor-gd.php';
 
 		parent::setUp();
 	}
@@ -34,20 +34,20 @@ class Tests_Image_Editor_GD extends WP_Image_UnitTestCase {
 
 	public function test_supports_mime_type_jpeg() {
 		$gd_image_editor = new WP_Image_Editor_GD( null );
-		$expected        = imagetypes() & IMG_JPG;
-		$this->assertEquals( $expected, $gd_image_editor->supports_mime_type( 'image/jpeg' ) );
+		$expected        = (bool) ( imagetypes() & IMG_JPG );
+		$this->assertSame( $expected, $gd_image_editor->supports_mime_type( 'image/jpeg' ) );
 	}
 
 	public function test_supports_mime_type_png() {
 		$gd_image_editor = new WP_Image_Editor_GD( null );
-		$expected        = imagetypes() & IMG_PNG;
-		$this->assertEquals( $expected, $gd_image_editor->supports_mime_type( 'image/png' ) );
+		$expected        = (bool) ( imagetypes() & IMG_PNG );
+		$this->assertSame( $expected, $gd_image_editor->supports_mime_type( 'image/png' ) );
 	}
 
 	public function test_supports_mime_type_gif() {
 		$gd_image_editor = new WP_Image_Editor_GD( null );
-		$expected        = imagetypes() & IMG_GIF;
-		$this->assertEquals( $expected, $gd_image_editor->supports_mime_type( 'image/gif' ) );
+		$expected        = (bool) ( imagetypes() & IMG_GIF );
+		$this->assertSame( $expected, $gd_image_editor->supports_mime_type( 'image/gif' ) );
 	}
 
 	/**
@@ -61,7 +61,7 @@ class Tests_Image_Editor_GD extends WP_Image_UnitTestCase {
 
 		$gd_image_editor->resize( 100, 50 );
 
-		$this->assertEquals(
+		$this->assertSame(
 			array(
 				'width'  => 75,
 				'height' => 50,
@@ -98,9 +98,9 @@ class Tests_Image_Editor_GD extends WP_Image_UnitTestCase {
 			),
 		);
 
-		$this->assertEquals( $expected_array, $resized );
+		$this->assertSame( $expected_array, $resized );
 
-		// Now, verify real dimensions are as expected
+		// Now, verify real dimensions are as expected.
 		$image_path = DIR_TESTDATA . '/images/' . $resized[0]['file'];
 		$this->assertImageDimensions(
 			$image_path,
@@ -370,12 +370,12 @@ class Tests_Image_Editor_GD extends WP_Image_UnitTestCase {
 		);
 
 		$this->assertNotNull( $resized );
-		$this->assertEquals( $expected_array, $resized );
+		$this->assertSame( $expected_array, $resized );
 
 		foreach ( $resized as $key => $image_data ) {
 			$image_path = DIR_TESTDATA . '/images/' . $image_data['file'];
 
-			// Now, verify real dimensions are as expected
+			// Now, verify real dimensions are as expected.
 			$this->assertImageDimensions(
 				$image_path,
 				$expected_array[ $key ]['width'],
@@ -395,7 +395,7 @@ class Tests_Image_Editor_GD extends WP_Image_UnitTestCase {
 
 		$gd_image_editor->resize( 100, 50, true );
 
-		$this->assertEquals(
+		$this->assertSame(
 			array(
 				'width'  => 100,
 				'height' => 50,
@@ -415,7 +415,7 @@ class Tests_Image_Editor_GD extends WP_Image_UnitTestCase {
 
 		$gd_image_editor->crop( 0, 0, 50, 50 );
 
-		$this->assertEquals(
+		$this->assertSame(
 			array(
 				'width'  => 50,
 				'height' => 50,
@@ -440,7 +440,7 @@ class Tests_Image_Editor_GD extends WP_Image_UnitTestCase {
 
 		$gd_image_editor->rotate( 180 );
 
-		$this->assertEquals( $color_top_left, imagecolorat( $property->getValue( $gd_image_editor ), 99, 99 ) );
+		$this->assertSame( $color_top_left, imagecolorat( $property->getValue( $gd_image_editor ), 99, 99 ) );
 	}
 
 	/**
@@ -459,7 +459,7 @@ class Tests_Image_Editor_GD extends WP_Image_UnitTestCase {
 
 		$gd_image_editor->flip( true, false );
 
-		$this->assertEquals( $color_top_left, imagecolorat( $property->getValue( $gd_image_editor ), 0, 99 ) );
+		$this->assertSame( $color_top_left, imagecolorat( $property->getValue( $gd_image_editor ), 0, 99 ) );
 	}
 
 	/**
diff --git a/tests/image/editorImagick.php b/tests/image/editorImagick.php
index ac531ff942..a358c654af 100644
--- a/tests/image/editorImagick.php
+++ b/tests/image/editorImagick.php
@@ -7,15 +7,15 @@
  * @group media
  * @group wp-image-editor-imagick
  */
-require_once( dirname( __FILE__ ) . '/base.php' );
+require_once __DIR__ . '/base.php';
 
 class Tests_Image_Editor_Imagick extends WP_Image_UnitTestCase {
 
 	public $editor_engine = 'WP_Image_Editor_Imagick';
 
 	public function setUp() {
-		require_once( ABSPATH . WPINC . '/class-wp-image-editor.php' );
-		require_once( ABSPATH . WPINC . '/class-wp-image-editor-imagick.php' );
+		require_once ABSPATH . WPINC . '/class-wp-image-editor.php';
+		require_once ABSPATH . WPINC . '/class-wp-image-editor-imagick.php';
 
 		parent::setUp();
 	}
@@ -54,7 +54,7 @@ class Tests_Image_Editor_Imagick extends WP_Image_UnitTestCase {
 
 		$imagick_image_editor->resize( 100, 50 );
 
-		$this->assertEquals(
+		$this->assertSame(
 			array(
 				'width'  => 75,
 				'height' => 50,
@@ -91,9 +91,9 @@ class Tests_Image_Editor_Imagick extends WP_Image_UnitTestCase {
 			),
 		);
 
-		$this->assertEquals( $expected_array, $resized );
+		$this->assertSame( $expected_array, $resized );
 
-		// Now, verify real dimensions are as expected
+		// Now, verify real dimensions are as expected.
 		$image_path = DIR_TESTDATA . '/images/' . $resized[0]['file'];
 		$this->assertImageDimensions(
 			$image_path,
@@ -363,12 +363,12 @@ class Tests_Image_Editor_Imagick extends WP_Image_UnitTestCase {
 		);
 
 		$this->assertNotNull( $resized );
-		$this->assertEquals( $expected_array, $resized );
+		$this->assertSame( $expected_array, $resized );
 
 		foreach ( $resized as $key => $image_data ) {
 			$image_path = DIR_TESTDATA . '/images/' . $image_data['file'];
 
-			// Now, verify real dimensions are as expected
+			// Now, verify real dimensions are as expected.
 			$this->assertImageDimensions(
 				$image_path,
 				$expected_array[ $key ]['width'],
@@ -388,7 +388,7 @@ class Tests_Image_Editor_Imagick extends WP_Image_UnitTestCase {
 
 		$imagick_image_editor->resize( 100, 50, true );
 
-		$this->assertEquals(
+		$this->assertSame(
 			array(
 				'width'  => 100,
 				'height' => 50,
@@ -408,7 +408,7 @@ class Tests_Image_Editor_Imagick extends WP_Image_UnitTestCase {
 
 		$imagick_image_editor->crop( 0, 0, 50, 50 );
 
-		$this->assertEquals(
+		$this->assertSame(
 			array(
 				'width'  => 50,
 				'height' => 50,
@@ -433,7 +433,7 @@ class Tests_Image_Editor_Imagick extends WP_Image_UnitTestCase {
 
 		$imagick_image_editor->rotate( 180 );
 
-		$this->assertEquals( $color_top_left, $property->getValue( $imagick_image_editor )->getImagePixelColor( 99, 99 )->getColor() );
+		$this->assertSame( $color_top_left, $property->getValue( $imagick_image_editor )->getImagePixelColor( 99, 99 )->getColor() );
 	}
 
 	/**
@@ -452,7 +452,7 @@ class Tests_Image_Editor_Imagick extends WP_Image_UnitTestCase {
 
 		$imagick_image_editor->flip( true, false );
 
-		$this->assertEquals( $color_top_left, $property->getValue( $imagick_image_editor )->getImagePixelColor( 0, 99 )->getColor() );
+		$this->assertSame( $color_top_left, $property->getValue( $imagick_image_editor )->getImagePixelColor( 0, 99 )->getColor() );
 	}
 
 	/**
@@ -558,7 +558,7 @@ class Tests_Image_Editor_Imagick extends WP_Image_UnitTestCase {
 		$data = wp_read_image_metadata( $file );
 
 		// The orientation value 3 is equivalent to rotated upside down (180 degrees).
-		$this->assertEquals( 3, intval( $data['orientation'] ), 'Orientation value read from does not match image file Exif data: ' . $file );
+		$this->assertSame( 3, intval( $data['orientation'] ), 'Orientation value read from does not match image file Exif data: ' . $file );
 
 		$temp_file = wp_tempnam( $file );
 		$image     = wp_get_image_editor( $file );
@@ -570,7 +570,7 @@ class Tests_Image_Editor_Imagick extends WP_Image_UnitTestCase {
 		$data = wp_read_image_metadata( $ret['path'] );
 
 		// Make sure the image is no longer in The Upside Down Exif orientation.
-		$this->assertEquals( 1, intval( $data['orientation'] ), 'Orientation Exif data was not updated after rotating image: ' . $file );
+		$this->assertSame( 1, intval( $data['orientation'] ), 'Orientation Exif data was not updated after rotating image: ' . $file );
 
 		// Remove both the generated file ending in .tmp and tmp.jpg due to wp_tempnam().
 		unlink( $temp_file );
diff --git a/tests/image/functions.php b/tests/image/functions.php
index 8fa47c65a5..9c81ed6d93 100644
--- a/tests/image/functions.php
+++ b/tests/image/functions.php
@@ -13,14 +13,14 @@ class Tests_Image_Functions extends WP_UnitTestCase {
 	public function setUp() {
 		parent::setUp();
 
-		require_once( ABSPATH . WPINC . '/class-wp-image-editor.php' );
-		require_once( ABSPATH . WPINC . '/class-wp-image-editor-gd.php' );
-		require_once( ABSPATH . WPINC . '/class-wp-image-editor-imagick.php' );
+		require_once ABSPATH . WPINC . '/class-wp-image-editor.php';
+		require_once ABSPATH . WPINC . '/class-wp-image-editor-gd.php';
+		require_once ABSPATH . WPINC . '/class-wp-image-editor-imagick.php';
 
-		include_once( DIR_TESTDATA . '/../includes/mock-image-editor.php' );
+		require_once DIR_TESTDATA . '/../includes/mock-image-editor.php';
 
 		// Ensure no legacy / failed tests detritus.
-		$folder = '/tmp/wordpress-gsoc-flyer*.{jpg,pdf}';
+		$folder = get_temp_dir() . 'wordpress-gsoc-flyer*.{jpg,pdf}';
 
 		foreach ( glob( $folder, GLOB_BRACE ) as $file ) {
 			unlink( $file );
@@ -46,7 +46,7 @@ class Tests_Image_Functions extends WP_UnitTestCase {
 	}
 
 	function test_is_image_positive() {
-		// these are all image files recognized by php
+		// These are all image files recognized by PHP.
 		$files = array(
 			'test-image-cmyk.jpg',
 			'test-image.bmp',
@@ -72,7 +72,7 @@ class Tests_Image_Functions extends WP_UnitTestCase {
 	}
 
 	function test_is_image_negative() {
-		// these are actually image files but aren't recognized or usable by php
+		// These are actually image files but aren't recognized or usable by PHP.
 		$files = array(
 			'test-image.pct',
 			'test-image.tga',
@@ -85,7 +85,7 @@ class Tests_Image_Functions extends WP_UnitTestCase {
 	}
 
 	function test_is_displayable_image_positive() {
-		// these are all usable in typical web browsers
+		// These are all usable in typical web browsers.
 		$files = array(
 			'test-image.gif',
 			'test-image.png',
@@ -103,11 +103,11 @@ class Tests_Image_Functions extends WP_UnitTestCase {
 	}
 
 	function test_is_displayable_image_negative() {
-		// these are image files but aren't suitable for web pages because of compatibility or size issues
+		// These are image files but aren't suitable for web pages because of compatibility or size issues.
 		$files = array(
-			// 'test-image-cmyk.jpg', Allowed in r9727
-			// 'test-image.bmp', Allowed in r28589
-			// 'test-image-grayscale.jpg', Allowed in r9727
+			// 'test-image-cmyk.jpg',      Allowed in r9727.
+			// 'test-image.bmp',           Allowed in r28589.
+			// 'test-image-grayscale.jpg', Allowed in r9727.
 			'test-image.pct',
 			'test-image.tga',
 			'test-image.sgi',
@@ -123,6 +123,28 @@ class Tests_Image_Functions extends WP_UnitTestCase {
 		}
 	}
 
+
+	/**
+	 * @ticket 50833
+	 */
+	function test_is_gd_image_invalid_types() {
+		$this->assertFalse( is_gd_image( new stdClass() ) );
+		$this->assertFalse( is_gd_image( array() ) );
+		$this->assertFalse( is_gd_image( null ) );
+
+		$handle = fopen( __FILE__, 'r' );
+		$this->assertFalse( is_gd_image( $handle ) );
+		fclose( $handle );
+	}
+
+	/**
+	 * @ticket 50833
+	 * @requires extension gd
+	 */
+	function test_is_gd_image_valid_types() {
+		$this->assertTrue( is_gd_image( imagecreate( 5, 5 ) ) );
+	}
+
 	/**
 	 * Test save image file and mime_types
 	 *
@@ -133,20 +155,20 @@ class Tests_Image_Functions extends WP_UnitTestCase {
 			$this->markTestSkipped( 'The fileinfo PHP extension is not loaded.' );
 		}
 
-		include_once( ABSPATH . 'wp-admin/includes/image-edit.php' );
+		require_once ABSPATH . 'wp-admin/includes/image-edit.php';
 
-		// Mime types
+		// Mime types.
 		$mime_types = array(
 			'image/jpeg',
 			'image/gif',
 			'image/png',
 		);
 
-		// Test each image editor engine
+		// Test each image editor engine.
 		$classes = array( 'WP_Image_Editor_GD', 'WP_Image_Editor_Imagick' );
 		foreach ( $classes as $class ) {
 
-			// If the image editor isn't available, skip it
+			// If the image editor isn't available, skip it.
 			if ( ! call_user_func( array( $class, 'test' ) ) ) {
 				continue;
 			}
@@ -154,7 +176,7 @@ class Tests_Image_Functions extends WP_UnitTestCase {
 			$img    = new $class( DIR_TESTDATA . '/images/canola.jpg' );
 			$loaded = $img->load();
 
-			// Save a file as each mime type, assert it works
+			// Save a file as each mime type, assert it works.
 			foreach ( $mime_types as $mime_type ) {
 				if ( ! $img->supports_mime_type( $mime_type ) ) {
 					continue;
@@ -164,14 +186,14 @@ class Tests_Image_Functions extends WP_UnitTestCase {
 				$ret  = wp_save_image_file( $file, $img, $mime_type, 1 );
 				$this->assertNotEmpty( $ret );
 				$this->assertNotWPError( $ret );
-				$this->assertEquals( $mime_type, $this->get_mime_type( $ret['path'] ) );
+				$this->assertSame( $mime_type, $this->get_mime_type( $ret['path'] ) );
 
-				// Clean up
+				// Clean up.
 				unlink( $file );
 				unlink( $ret['path'] );
 			}
 
-			// Clean up
+			// Clean up.
 			unset( $img );
 		}
 	}
@@ -186,11 +208,11 @@ class Tests_Image_Functions extends WP_UnitTestCase {
 			$this->markTestSkipped( 'The fileinfo PHP extension is not loaded.' );
 		}
 
-		// Test each image editor engine
+		// Test each image editor engine.
 		$classes = array( 'WP_Image_Editor_GD', 'WP_Image_Editor_Imagick' );
 		foreach ( $classes as $class ) {
 
-			// If the image editor isn't available, skip it
+			// If the image editor isn't available, skip it.
 			if ( ! call_user_func( array( $class, 'test' ) ) ) {
 				continue;
 			}
@@ -198,17 +220,17 @@ class Tests_Image_Functions extends WP_UnitTestCase {
 			$img    = new $class( DIR_TESTDATA . '/images/canola.jpg' );
 			$loaded = $img->load();
 
-			// Save the file
+			// Save the file.
 			$mime_type = 'image/gif';
 			$file      = wp_tempnam( 'tmp.jpg' );
 			$ret       = $img->save( $file, $mime_type );
 
-			// Make assertions
+			// Make assertions.
 			$this->assertNotEmpty( $ret );
 			$this->assertNotWPError( $ret );
-			$this->assertEquals( $mime_type, $this->get_mime_type( $ret['path'] ) );
+			$this->assertSame( $mime_type, $this->get_mime_type( $ret['path'] ) );
 
-			// Clean up
+			// Clean up.
 			unlink( $file );
 			unlink( $ret['path'] );
 			unset( $img );
@@ -225,21 +247,21 @@ class Tests_Image_Functions extends WP_UnitTestCase {
 			$this->markTestSkipped( 'The fileinfo PHP extension is not loaded.' );
 		}
 
-		// Mime types
+		// Mime types.
 		$mime_types = array(
 			'jpg'  => 'image/jpeg',
 			'jpeg' => 'image/jpeg',
 			'jpe'  => 'image/jpeg',
 			'gif'  => 'image/gif',
 			'png'  => 'image/png',
-			'unk'  => 'image/jpeg', // Default, unknown
+			'unk'  => 'image/jpeg', // Default, unknown.
 		);
 
-		// Test each image editor engine
+		// Test each image editor engine.
 		$classes = array( 'WP_Image_Editor_GD', 'WP_Image_Editor_Imagick' );
 		foreach ( $classes as $class ) {
 
-			// If the image editor isn't available, skip it
+			// If the image editor isn't available, skip it.
 			if ( ! call_user_func( array( $class, 'test' ) ) ) {
 				continue;
 			}
@@ -247,7 +269,7 @@ class Tests_Image_Functions extends WP_UnitTestCase {
 			$img    = new $class( DIR_TESTDATA . '/images/canola.jpg' );
 			$loaded = $img->load();
 
-			// Save the image as each file extension, check the mime type
+			// Save the image as each file extension, check the mime type.
 			$img = wp_get_image_editor( DIR_TESTDATA . '/images/canola.jpg' );
 			$this->assertNotWPError( $img );
 
@@ -261,11 +283,11 @@ class Tests_Image_Functions extends WP_UnitTestCase {
 				$ret  = $img->save( trailingslashit( $temp ) . $file );
 				$this->assertNotEmpty( $ret );
 				$this->assertNotWPError( $ret );
-				$this->assertEquals( $mime_type, $this->get_mime_type( $ret['path'] ) );
+				$this->assertSame( $mime_type, $this->get_mime_type( $ret['path'] ) );
 				unlink( $ret['path'] );
 			}
 
-			// Clean up
+			// Clean up.
 			unset( $img );
 		}
 	}
@@ -278,7 +300,7 @@ class Tests_Image_Functions extends WP_UnitTestCase {
 	 */
 	public function test_load_directory() {
 
-		// First, test with deprecated wp_load_image function
+		// First, test with deprecated wp_load_image function.
 		$editor1 = wp_load_image( DIR_TESTDATA );
 		$this->assertNotInternalType( 'resource', $editor1 );
 
@@ -288,7 +310,7 @@ class Tests_Image_Functions extends WP_UnitTestCase {
 		// Then, test with editors.
 		$classes = array( 'WP_Image_Editor_GD', 'WP_Image_Editor_Imagick' );
 		foreach ( $classes as $class ) {
-			// If the image editor isn't available, skip it
+			// If the image editor isn't available, skip it.
 			if ( ! call_user_func( array( $class, 'test' ) ) ) {
 				continue;
 			}
@@ -297,7 +319,7 @@ class Tests_Image_Functions extends WP_UnitTestCase {
 			$loaded = $editor->load();
 
 			$this->assertInstanceOf( 'WP_Error', $loaded );
-			$this->assertEquals( 'error_loading_image', $loaded->get_error_code() );
+			$this->assertSame( 'error_loading_image', $loaded->get_error_code() );
 		}
 	}
 
@@ -319,8 +341,8 @@ class Tests_Image_Functions extends WP_UnitTestCase {
 		$this->assertFileExists( $file );
 		$image = wp_get_image_editor( $file );
 		$size  = $image->get_size();
-		$this->assertEquals( 100, $size['height'] );
-		$this->assertEquals( 100, $size['width'] );
+		$this->assertSame( 100, $size['height'] );
+		$this->assertSame( 100, $size['width'] );
 
 		unlink( $file );
 	}
@@ -345,12 +367,17 @@ class Tests_Image_Functions extends WP_UnitTestCase {
 			false,
 			DIR_TESTDATA . '/images/' . __FUNCTION__ . '.jpg'
 		);
+
+		if ( is_wp_error( $file ) && $file->get_error_code() === 'invalid_image' ) {
+			$this->markTestSkipped( 'Tests_Image_Functions::test_wp_crop_image_url() cannot access remote image.' );
+		}
+
 		$this->assertNotWPError( $file );
 		$this->assertFileExists( $file );
 		$image = wp_get_image_editor( $file );
 		$size  = $image->get_size();
-		$this->assertEquals( 100, $size['height'] );
-		$this->assertEquals( 100, $size['width'] );
+		$this->assertSame( 100, $size['height'] );
+		$this->assertSame( 100, $size['width'] );
 
 		unlink( $file );
 	}
@@ -420,9 +447,14 @@ class Tests_Image_Functions extends WP_UnitTestCase {
 		}
 
 		$orig_file = DIR_TESTDATA . '/images/wordpress-gsoc-flyer.pdf';
-		$test_file = '/tmp/wordpress-gsoc-flyer.pdf';
+		$test_file = get_temp_dir() . 'wordpress-gsoc-flyer.pdf';
 		copy( $orig_file, $test_file );
 
+		$editor = wp_get_image_editor( $test_file );
+		if ( is_wp_error( $editor ) ) {
+			$this->markTestSkipped( $editor->get_error_message() );
+		}
+
 		$attachment_id = $this->factory->attachment->create_object(
 			$test_file,
 			0,
@@ -466,8 +498,9 @@ class Tests_Image_Functions extends WP_UnitTestCase {
 		$this->assertSame( $expected, $metadata );
 
 		unlink( $test_file );
+		$temp_dir = get_temp_dir();
 		foreach ( $metadata['sizes'] as $size ) {
-			unlink( '/tmp/' . $size['file'] );
+			unlink( $temp_dir . $size['file'] );
 		}
 	}
 
@@ -488,6 +521,11 @@ class Tests_Image_Functions extends WP_UnitTestCase {
 		$test_file = get_temp_dir() . 'wordpress-gsoc-flyer.pdf';
 		copy( $orig_file, $test_file );
 
+		$editor = wp_get_image_editor( $test_file );
+		if ( is_wp_error( $editor ) ) {
+			$this->markTestSkipped( $editor->get_error_message() );
+		}
+
 		$attachment_id = $this->factory->attachment->create_object(
 			$test_file,
 			0,
@@ -545,9 +583,14 @@ class Tests_Image_Functions extends WP_UnitTestCase {
 		}
 
 		$orig_file = DIR_TESTDATA . '/images/wordpress-gsoc-flyer.pdf';
-		$test_file = '/tmp/wordpress-gsoc-flyer.pdf';
+		$test_file = get_temp_dir() . 'wordpress-gsoc-flyer.pdf';
 		copy( $orig_file, $test_file );
 
+		$editor = wp_get_image_editor( $test_file );
+		if ( is_wp_error( $editor ) ) {
+			$this->markTestSkipped( $editor->get_error_message() );
+		}
+
 		$attachment_id = $this->factory->attachment->create_object(
 			$test_file,
 			0,
@@ -576,8 +619,9 @@ class Tests_Image_Functions extends WP_UnitTestCase {
 		remove_filter( 'fallback_intermediate_image_sizes', array( $this, 'filter_fallback_intermediate_image_sizes' ), 10 );
 
 		unlink( $test_file );
+		$temp_dir = get_temp_dir();
 		foreach ( $metadata['sizes'] as $size ) {
-			unlink( '/tmp/' . $size['file'] );
+			unlink( $temp_dir . $size['file'] );
 		}
 	}
 
@@ -598,16 +642,23 @@ class Tests_Image_Functions extends WP_UnitTestCase {
 			$this->markTestSkipped( 'Rendering PDFs is not supported on this system.' );
 		}
 
+		$temp_dir = get_temp_dir();
+
 		// Dummy JPEGs.
-		$jpg1_path = '/tmp/test.jpg'; // Straight.
+		$jpg1_path = $temp_dir . 'test.jpg'; // Straight.
 		file_put_contents( $jpg1_path, 'asdf' );
-		$jpg2_path = '/tmp/test-pdf.jpg'; // With PDF marker.
+		$jpg2_path = $temp_dir . 'test-pdf.jpg'; // With PDF marker.
 		file_put_contents( $jpg2_path, 'fdsa' );
 
 		// PDF with same name as JPEG.
-		$pdf_path = '/tmp/test.pdf';
+		$pdf_path = $temp_dir . 'test.pdf';
 		copy( DIR_TESTDATA . '/images/wordpress-gsoc-flyer.pdf', $pdf_path );
 
+		$editor = wp_get_image_editor( $pdf_path );
+		if ( is_wp_error( $editor ) ) {
+			$this->markTestSkipped( $editor->get_error_message() );
+		}
+
 		$attachment_id = $this->factory->attachment->create_object(
 			$pdf_path,
 			0,
@@ -617,7 +668,7 @@ class Tests_Image_Functions extends WP_UnitTestCase {
 		);
 
 		$metadata     = wp_generate_attachment_metadata( $attachment_id, $pdf_path );
-		$preview_path = '/tmp/' . $metadata['sizes']['full']['file'];
+		$preview_path = $temp_dir . $metadata['sizes']['full']['file'];
 
 		// PDF preview didn't overwrite PDF.
 		$this->assertNotEquals( $pdf_path, $preview_path );
@@ -633,7 +684,7 @@ class Tests_Image_Functions extends WP_UnitTestCase {
 		unlink( $jpg2_path );
 		unlink( $pdf_path );
 		foreach ( $metadata['sizes'] as $size ) {
-			unlink( '/tmp/' . $size['file'] );
+			unlink( $temp_dir . $size['file'] );
 		}
 	}
 }
diff --git a/tests/image/header.php b/tests/image/header.php
index b166d0e2bb..d378dddb2d 100644
--- a/tests/image/header.php
+++ b/tests/image/header.php
@@ -1,5 +1,5 @@
 <?php
-require_once( ABSPATH . 'wp-admin/includes/class-custom-image-header.php' );
+require_once ABSPATH . 'wp-admin/includes/class-custom-image-header.php';
 
 /**
  * @group image
@@ -28,8 +28,8 @@ class Tests_Image_Header extends WP_UnitTestCase {
 				'height' => 1200,
 			)
 		);
-		$this->assertEquals( 1200, $dimensions['dst_width'] );
-		$this->assertEquals( 230, $dimensions['dst_height'] );
+		$this->assertSame( 1200, $dimensions['dst_width'] );
+		$this->assertSame( 230, $dimensions['dst_height'] );
 
 	}
 
@@ -48,8 +48,8 @@ class Tests_Image_Header extends WP_UnitTestCase {
 				'height' => 1200,
 			)
 		);
-		$this->assertEquals( 1200, $dimensions['dst_width'] );
-		$this->assertEquals( 230, $dimensions['dst_height'] );
+		$this->assertSame( 1200, $dimensions['dst_width'] );
+		$this->assertSame( 230, $dimensions['dst_height'] );
 
 	}
 
@@ -68,8 +68,8 @@ class Tests_Image_Header extends WP_UnitTestCase {
 				'height' => 1200,
 			)
 		);
-		$this->assertEquals( 1200, $dimensions['dst_width'] );
-		$this->assertEquals( 900, $dimensions['dst_height'] );
+		$this->assertSame( 1200, $dimensions['dst_width'] );
+		$this->assertSame( 900, $dimensions['dst_height'] );
 
 	}
 
@@ -88,8 +88,8 @@ class Tests_Image_Header extends WP_UnitTestCase {
 				'height' => 1200,
 			)
 		);
-		$this->assertEquals( 1500, $dimensions['dst_width'] ); // max width
-		$this->assertEquals( 230, $dimensions['dst_height'] );
+		$this->assertSame( 1500, $dimensions['dst_width'] ); // Max width.
+		$this->assertSame( 230, $dimensions['dst_height'] );
 
 	}
 
@@ -108,8 +108,8 @@ class Tests_Image_Header extends WP_UnitTestCase {
 				'height' => 1200,
 			)
 		);
-		$this->assertEquals( 1600, $dimensions['dst_width'] );
-		$this->assertEquals( 1200, $dimensions['dst_height'] );
+		$this->assertSame( 1600, $dimensions['dst_width'] );
+		$this->assertSame( 1200, $dimensions['dst_height'] );
 
 	}
 
@@ -126,10 +126,10 @@ class Tests_Image_Header extends WP_UnitTestCase {
 		$cropped = 'foo-cropped.png';
 
 		$object = $this->custom_image_header->create_attachment_object( $cropped, $id );
-		$this->assertEquals( 'foo-cropped.png', $object['post_title'] );
-		$this->assertEquals( 'http://localhost/' . $cropped, $object['guid'] );
-		$this->assertEquals( 'custom-header', $object['context'] );
-		$this->assertEquals( 'image/jpeg', $object['post_mime_type'] );
+		$this->assertSame( 'foo-cropped.png', $object['post_title'] );
+		$this->assertSame( 'http://localhost/' . $cropped, $object['guid'] );
+		$this->assertSame( 'custom-header', $object['context'] );
+		$this->assertSame( 'image/jpeg', $object['post_mime_type'] );
 	}
 
 	function test_insert_cropped_attachment() {
diff --git a/tests/image/intermediateSize.php b/tests/image/intermediateSize.php
index ec0b818a9e..c2ac785058 100644
--- a/tests/image/intermediateSize.php
+++ b/tests/image/intermediateSize.php
@@ -56,9 +56,9 @@ class Tests_Image_Intermediate_Size extends WP_UnitTestCase {
 		$image = image_make_intermediate_size( DIR_TESTDATA . '/images/a2-small.jpg', 100, 75, true );
 
 		$this->assertInternalType( 'array', $image );
-		$this->assertEquals( 100, $image['width'] );
-		$this->assertEquals( 75, $image['height'] );
-		$this->assertEquals( 'image/jpeg', $image['mime-type'] );
+		$this->assertSame( 100, $image['width'] );
+		$this->assertSame( 75, $image['height'] );
+		$this->assertSame( 'image/jpeg', $image['mime-type'] );
 
 		$this->assertFalse( isset( $image['path'] ) );
 
@@ -74,14 +74,14 @@ class Tests_Image_Intermediate_Size extends WP_UnitTestCase {
 		$file = DIR_TESTDATA . '/images/waffles.jpg';
 		$id   = $this->_make_attachment( $file, 0 );
 
-		// look for a size by name
+		// Look for a size by name.
 		$image = image_get_intermediate_size( $id, 'test-size' );
 
-		// cleanup
+		// Cleanup.
 		remove_image_size( 'test-size' );
 
-		// test for the expected string because the array will by definition
-		// return with the correct height and width attributes
+		// Test for the expected string because the array will by definition
+		// return with the correct height and width attributes.
 		$this->assertTrue( strpos( $image['file'], '330x220' ) > 0 );
 	}
 
@@ -89,7 +89,7 @@ class Tests_Image_Intermediate_Size extends WP_UnitTestCase {
 	 * @ticket 17626
 	 */
 	function test_get_intermediate_sizes_by_array_exact() {
-		// Only one dimention match shouldn't return false positive (see: 17626)
+		// Only one dimention match shouldn't return false positive (see: #17626).
 		add_image_size( 'test-size', 330, 220, true );
 		add_image_size( 'false-height', 330, 400, true );
 		add_image_size( 'false-width', 600, 220, true );
@@ -97,12 +97,12 @@ class Tests_Image_Intermediate_Size extends WP_UnitTestCase {
 		$file = DIR_TESTDATA . '/images/waffles.jpg';
 		$id   = $this->_make_attachment( $file, 0 );
 
-		// look for a size by array that exists
-		// note: staying larger than 300px to miss default medium crop
+		// Look for a size by array that exists.
+		// Note: Staying larger than 300px to miss default medium crop.
 		$image = image_get_intermediate_size( $id, array( 330, 220 ) );
 
-		// test for the expected string because the array will by definition
-		// return with the correct height and width attributes
+		// Test for the expected string because the array will by definition
+		// return with the correct height and width attributes.
 		$this->assertTrue( strpos( $image['file'], '330x220' ) > 0 );
 	}
 
@@ -110,8 +110,8 @@ class Tests_Image_Intermediate_Size extends WP_UnitTestCase {
 	 * @ticket 17626
 	 */
 	function test_get_intermediate_sizes_by_array_nearest() {
-		// If an exact size is not found, it should be returned
-		// If not, find nearest size that is larger (see: 17626)
+		// If an exact size is not found, it should be returned.
+		// If not, find nearest size that is larger (see: #17626).
 		add_image_size( 'test-size', 450, 300, true );
 		add_image_size( 'false-height', 330, 100, true );
 		add_image_size( 'false-width', 150, 220, true );
@@ -119,12 +119,12 @@ class Tests_Image_Intermediate_Size extends WP_UnitTestCase {
 		$file = DIR_TESTDATA . '/images/waffles.jpg';
 		$id   = $this->_make_attachment( $file, 0 );
 
-		// look for a size by array that doesn't exist
-		// note: staying larger than 300px to miss default medium crop
+		// Look for a size by array that doesn't exist.
+		// Note: Staying larger than 300px to miss default medium crop.
 		$image = image_get_intermediate_size( $id, array( 330, 220 ) );
 
-		// you have to test for the string because the image will by definition
-		// return with the correct height and width attributes
+		// Test for the expected string because the array will by definition
+		// return with the correct height and width attributes.
 		$this->assertTrue( strpos( $image['file'], '450x300' ) > 0 );
 	}
 
@@ -132,20 +132,20 @@ class Tests_Image_Intermediate_Size extends WP_UnitTestCase {
 	 * @ticket 17626
 	 */
 	function test_get_intermediate_sizes_by_array_nearest_false() {
-		// If an exact size is not found, it should be returned
-		// If not, find nearest size that is larger, otherwise return false (see: 17626)
+		// If an exact size is not found, it should be returned.
+		// If not, find nearest size that is larger, otherwise return false (see: #17626).
 		add_image_size( 'false-height', 330, 100, true );
 		add_image_size( 'false-width', 150, 220, true );
 
 		$file = DIR_TESTDATA . '/images/waffles.jpg';
 		$id   = $this->_make_attachment( $file, 0 );
 
-		// look for a size by array that doesn't exist
-		// note: staying larger than 300px to miss default medium crop
+		// Look for a size by array that doesn't exist.
+		// Note: Staying larger than 300px to miss default medium crop.
 		$image = image_get_intermediate_size( $id, array( 330, 220 ) );
 
-		// you have to test for the string because the image will by definition
-		// return with the correct height and width attributes
+		// Test for the expected string because the array will by definition
+		// return with the correct height and width attributes.
 		$this->assertFalse( $image );
 	}
 
@@ -153,10 +153,10 @@ class Tests_Image_Intermediate_Size extends WP_UnitTestCase {
 	 * @ticket 17626
 	 */
 	function test_get_intermediate_sizes_by_array_zero_height() {
-		// Generate random width
+		// Generate random width.
 		$random_w = rand( 300, 400 );
 
-		// Only one dimention match shouldn't return false positive (see: 17626)
+		// Only one dimention match shouldn't return false positive (see: #17626).
 		add_image_size( 'test-size', $random_w, 0, false );
 		add_image_size( 'false-height', $random_w, 100, true );
 
@@ -167,12 +167,12 @@ class Tests_Image_Intermediate_Size extends WP_UnitTestCase {
 		$image_w  = $random_w;
 		$image_h  = round( ( $image_w / $original['width'] ) * $original['height'] );
 
-		// look for a size by array that exists
-		// note: staying larger than 300px to miss default medium crop
+		// Look for a size by array that exists.
+		// Note: Staying larger than 300px to miss default medium crop.
 		$image = image_get_intermediate_size( $id, array( $random_w, 0 ) );
 
-		// test for the expected string because the array will by definition
-		// return with the correct height and width attributes
+		// Test for the expected string because the array will by definition
+		// return with the correct height and width attributes.
 		$this->assertTrue( strpos( $image['file'], $image_w . 'x' . $image_h ) > 0 );
 	}
 
@@ -184,7 +184,7 @@ class Tests_Image_Intermediate_Size extends WP_UnitTestCase {
 		// 202 is the smallest height that will trigger a miss for 'false-height'.
 		$height = 202;
 
-		// Only one dimention match shouldn't return false positive (see: 17626)
+		// Only one dimention match shouldn't return false positive (see: #17626).
 		add_image_size( 'test-size', 0, $height, false );
 		add_image_size( 'false-height', 300, $height, true );
 
@@ -195,12 +195,12 @@ class Tests_Image_Intermediate_Size extends WP_UnitTestCase {
 		$image_h  = $height;
 		$image_w  = round( ( $image_h / $original['height'] ) * $original['width'] );
 
-		// look for a size by array that exists
-		// note: staying larger than 300px to miss default medium crop
+		// Look for a size by array that exists.
+		// Note: Staying larger than 300px to miss default medium crop.
 		$image = image_get_intermediate_size( $id, array( 0, $height ) );
 
-		// test for the expected string because the array will by definition
-		// return with the correct height and width attributes
+		// Test for the expected string because the array will by definition
+		// return with the correct height and width attributes.
 		$this->assertTrue( strpos( $image['file'], $image_w . 'x' . $image_h ) > 0 );
 	}
 
@@ -221,8 +221,8 @@ class Tests_Image_Intermediate_Size extends WP_UnitTestCase {
 		$image_h  = $height;
 		$image_w  = round( ( $image_h / $original['height'] ) * $original['width'] );
 
-		// look for a size by array that exists
-		// note: staying larger than 300px to miss default medium crop
+		// Look for a size by array that exists.
+		// Note: Staying larger than 300px to miss default medium crop.
 		$image = image_get_intermediate_size( $id, array( 0, $height ) );
 
 		$this->assertTrue( strpos( $image['file'], $width . 'x' . $height ) > 0 );
@@ -238,7 +238,7 @@ class Tests_Image_Intermediate_Size extends WP_UnitTestCase {
 		$file = DIR_TESTDATA . '/images/waffles.jpg';
 		$id   = $this->_make_attachment( $file, 0 );
 
-		// Request a size by array that doesn't exist and is smaller than the 'thumbnail'
+		// Request a size by array that doesn't exist and is smaller than the 'thumbnail'.
 		$image = image_get_intermediate_size( $id, array( 50, 25 ) );
 
 		// We should get the 'test-size' file and not the thumbnail.
@@ -255,7 +255,7 @@ class Tests_Image_Intermediate_Size extends WP_UnitTestCase {
 		$original       = wp_get_attachment_metadata( $id );
 		$thumbnail_file = $original['sizes']['thumbnail']['file'];
 
-		// Request a size by array that doesn't exist and is smaller than the 'thumbnail'
+		// Request a size by array that doesn't exist and is smaller than the 'thumbnail'.
 		$image = image_get_intermediate_size( $id, array( 50, 25 ) );
 
 		// We should get the 'thumbnail' file as a fallback.
diff --git a/tests/image/meta.php b/tests/image/meta.php
index 0d791b99e8..13f1b5abbd 100644
--- a/tests/image/meta.php
+++ b/tests/image/meta.php
@@ -18,68 +18,68 @@ class Tests_Image_Meta extends WP_UnitTestCase {
 	}
 
 	function test_exif_d70() {
-		// exif from a Nikon D70
+		// Exif from a Nikon D70.
 		$out = wp_read_image_metadata( DIR_TESTDATA . '/images/2004-07-22-DSC_0008.jpg' );
 
 		$this->assertEquals( 6.3, $out['aperture'] );
-		$this->assertEquals( '', $out['credit'] );
-		$this->assertEquals( 'NIKON D70', $out['camera'] );
-		$this->assertEquals( '', $out['caption'] );
+		$this->assertSame( '', $out['credit'] );
+		$this->assertSame( 'NIKON D70', $out['camera'] );
+		$this->assertSame( '', $out['caption'] );
 		$this->assertEquals( strtotime( '2004-07-22 17:14:59' ), $out['created_timestamp'] );
-		$this->assertEquals( '', $out['copyright'] );
+		$this->assertSame( '', $out['copyright'] );
 		$this->assertEquals( 27, $out['focal_length'] );
 		$this->assertEquals( 400, $out['iso'] );
 		$this->assertEquals( 1 / 40, $out['shutter_speed'] );
-		$this->assertEquals( '', $out['title'] );
+		$this->assertSame( '', $out['title'] );
 	}
 
 	function test_exif_d70_mf() {
-		// exif from a Nikon D70 - manual focus lens, so some data is unavailable
+		// Exif from a Nikon D70 - manual focus lens, so some data is unavailable.
 		$out = wp_read_image_metadata( DIR_TESTDATA . '/images/2007-06-17DSC_4173.JPG' );
 
-		$this->assertEquals( 0, $out['aperture'] );
-		$this->assertEquals( '', $out['credit'] );
-		$this->assertEquals( 'NIKON D70', $out['camera'] );
-		$this->assertEquals( '', $out['caption'] );
+		$this->assertSame( '0', $out['aperture'] );
+		$this->assertSame( '', $out['credit'] );
+		$this->assertSame( 'NIKON D70', $out['camera'] );
+		$this->assertSame( '', $out['caption'] );
 		$this->assertEquals( strtotime( '2007-06-17 21:18:00' ), $out['created_timestamp'] );
-		$this->assertEquals( '', $out['copyright'] );
+		$this->assertSame( '', $out['copyright'] );
 		$this->assertEquals( 0, $out['focal_length'] );
-		$this->assertEquals( 0, $out['iso'] ); // interesting - a Nikon bug?
+		$this->assertEquals( 0, $out['iso'] ); // Interesting - a Nikon bug?
 		$this->assertEquals( 1 / 500, $out['shutter_speed'] );
-		$this->assertEquals( '', $out['title'] );
-		#$this->assertEquals(array('Flowers'), $out['keywords']);
+		$this->assertSame( '', $out['title'] );
+		// $this->assertSame( array( 'Flowers' ), $out['keywords'] );
 	}
 
 	function test_exif_d70_iptc() {
-		// exif from a Nikon D70 with IPTC data added later
+		// Exif from a Nikon D70 with IPTC data added later.
 		$out = wp_read_image_metadata( DIR_TESTDATA . '/images/2004-07-22-DSC_0007.jpg' );
 
 		$this->assertEquals( 6.3, $out['aperture'] );
-		$this->assertEquals( 'IPTC Creator', $out['credit'] );
-		$this->assertEquals( 'NIKON D70', $out['camera'] );
-		$this->assertEquals( 'IPTC Caption', $out['caption'] );
+		$this->assertSame( 'IPTC Creator', $out['credit'] );
+		$this->assertSame( 'NIKON D70', $out['camera'] );
+		$this->assertSame( 'IPTC Caption', $out['caption'] );
 		$this->assertEquals( strtotime( '2004-07-22 17:14:35' ), $out['created_timestamp'] );
-		$this->assertEquals( 'IPTC Copyright', $out['copyright'] );
+		$this->assertSame( 'IPTC Copyright', $out['copyright'] );
 		$this->assertEquals( 18, $out['focal_length'] );
 		$this->assertEquals( 200, $out['iso'] );
 		$this->assertEquals( 1 / 25, $out['shutter_speed'] );
-		$this->assertEquals( 'IPTC Headline', $out['title'] );
+		$this->assertSame( 'IPTC Headline', $out['title'] );
 	}
 
 	function test_exif_fuji() {
-		// exif from a Fuji FinePix S5600 (thanks Mark)
+		// Exif from a Fuji FinePix S5600 (thanks Mark).
 		$out = wp_read_image_metadata( DIR_TESTDATA . '/images/a2-small.jpg' );
 
 		$this->assertEquals( 4.5, $out['aperture'] );
-		$this->assertEquals( '', $out['credit'] );
-		$this->assertEquals( 'FinePix S5600', $out['camera'] );
-		$this->assertEquals( '', $out['caption'] );
+		$this->assertSame( '', $out['credit'] );
+		$this->assertSame( 'FinePix S5600', $out['camera'] );
+		$this->assertSame( '', $out['caption'] );
 		$this->assertEquals( strtotime( '2007-09-03 10:17:03' ), $out['created_timestamp'] );
-		$this->assertEquals( '', $out['copyright'] );
+		$this->assertSame( '', $out['copyright'] );
 		$this->assertEquals( 6.3, $out['focal_length'] );
 		$this->assertEquals( 64, $out['iso'] );
 		$this->assertEquals( 1 / 320, $out['shutter_speed'] );
-		$this->assertEquals( '', $out['title'] );
+		$this->assertSame( '', $out['title'] );
 
 	}
 
@@ -87,54 +87,50 @@ class Tests_Image_Meta extends WP_UnitTestCase {
 	 * @ticket 6571
 	 */
 	function test_exif_error() {
-
 		// https://core.trac.wordpress.org/ticket/6571
-		// this triggers a warning mesage when reading the exif block
+		// This triggers a warning mesage when reading the Exif block.
 		$out = wp_read_image_metadata( DIR_TESTDATA . '/images/waffles.jpg' );
 
 		$this->assertEquals( 0, $out['aperture'] );
-		$this->assertEquals( '', $out['credit'] );
-		$this->assertEquals( '', $out['camera'] );
-		$this->assertEquals( '', $out['caption'] );
+		$this->assertSame( '', $out['credit'] );
+		$this->assertSame( '', $out['camera'] );
+		$this->assertSame( '', $out['caption'] );
 		$this->assertEquals( 0, $out['created_timestamp'] );
-		$this->assertEquals( '', $out['copyright'] );
+		$this->assertSame( '', $out['copyright'] );
 		$this->assertEquals( 0, $out['focal_length'] );
 		$this->assertEquals( 0, $out['iso'] );
 		$this->assertEquals( 0, $out['shutter_speed'] );
-		$this->assertEquals( '', $out['title'] );
+		$this->assertSame( '', $out['title'] );
 	}
 
 	function test_exif_no_data() {
-		// no exif data in this image (from burningwell.org)
+		// No Exif data in this image (from burningwell.org).
 		$out = wp_read_image_metadata( DIR_TESTDATA . '/images/canola.jpg' );
 
 		$this->assertEquals( 0, $out['aperture'] );
-		$this->assertEquals( '', $out['credit'] );
-		$this->assertEquals( '', $out['camera'] );
-		$this->assertEquals( '', $out['caption'] );
+		$this->assertSame( '', $out['credit'] );
+		$this->assertSame( '', $out['camera'] );
+		$this->assertSame( '', $out['caption'] );
 		$this->assertEquals( 0, $out['created_timestamp'] );
-		$this->assertEquals( '', $out['copyright'] );
+		$this->assertSame( '', $out['copyright'] );
 		$this->assertEquals( 0, $out['focal_length'] );
 		$this->assertEquals( 0, $out['iso'] );
 		$this->assertEquals( 0, $out['shutter_speed'] );
-		$this->assertEquals( '', $out['title'] );
+		$this->assertSame( '', $out['title'] );
 	}
 
 	/**
 	 * @ticket 9417
 	 */
 	function test_utf8_iptc_tags() {
-
-		// trilingual UTF-8 text in the ITPC caption-abstract field
+		// Trilingual UTF-8 text in the ITPC caption-abstract field.
 		$out = wp_read_image_metadata( DIR_TESTDATA . '/images/test-image-iptc.jpg' );
 
-		$this->assertEquals( 'This is a comment. / –≠—Ç–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π. / ŒíŒªŒ≠œÄŒµœÑŒµ Œ≠ŒΩŒ± œÉœáœåŒªŒπŒø.', $out['caption'] );
+		$this->assertSame( 'This is a comment. / –≠—Ç–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π. / ŒíŒªŒ≠œÄŒµœÑŒµ Œ≠ŒΩŒ± œÉœáœåŒªŒπŒø.', $out['caption'] );
 	}
 
 	/**
-	 * wp_read_image_metadata() should false if the image file doesn't exist
-	 *
-	 * @return void
+	 * wp_read_image_metadata() should return false if the image file doesn't exist.
 	 */
 	public function test_missing_image_file() {
 		$out = wp_read_image_metadata( DIR_TESTDATA . '/images/404_image.png' );
@@ -148,18 +144,18 @@ class Tests_Image_Meta extends WP_UnitTestCase {
 	public function test_exif_keywords() {
 		$out = wp_read_image_metadata( DIR_TESTDATA . '/images/33772.jpg' );
 
-		$this->assertEquals( '8', $out['aperture'] );
-		$this->assertEquals( 'Photoshop Author', $out['credit'] );
-		$this->assertEquals( 'DMC-LX2', $out['camera'] );
-		$this->assertEquals( 'Photoshop Description', $out['caption'] );
+		$this->assertSame( '8', $out['aperture'] );
+		$this->assertSame( 'Photoshop Author', $out['credit'] );
+		$this->assertSame( 'DMC-LX2', $out['camera'] );
+		$this->assertSame( 'Photoshop Description', $out['caption'] );
 		$this->assertEquals( 1306315327, $out['created_timestamp'] );
-		$this->assertEquals( 'Photoshop Copyrright Notice', $out['copyright'] );
-		$this->assertEquals( '6.3', $out['focal_length'] );
-		$this->assertEquals( '100', $out['iso'] );
-		$this->assertEquals( '0.0025', $out['shutter_speed'] );
-		$this->assertEquals( 'Photoshop Document Ttitle', $out['title'] );
+		$this->assertSame( 'Photoshop Copyrright Notice', $out['copyright'] );
+		$this->assertSame( '6.3', $out['focal_length'] );
+		$this->assertSame( '100', $out['iso'] );
+		$this->assertSame( '0.0025', $out['shutter_speed'] );
+		$this->assertSame( 'Photoshop Document Ttitle', $out['title'] );
 		$this->assertEquals( 1, $out['orientation'] );
-		$this->assertEquals( array( 'beach', 'baywatch', 'LA', 'sunset' ), $out['keywords'] );
+		$this->assertSame( array( 'beach', 'baywatch', 'LA', 'sunset' ), $out['keywords'] );
 	}
 
 }
diff --git a/tests/image/resize.php b/tests/image/resize.php
index 2cbd5a2505..05f9806bf5 100644
--- a/tests/image/resize.php
+++ b/tests/image/resize.php
@@ -6,7 +6,7 @@
  * @group upload
  * @group resize
  */
-require_once( dirname( __FILE__ ) . '/base.php' );
+require_once __DIR__ . '/base.php';
 
 abstract class WP_Tests_Image_Resize_UnitTestCase extends WP_Image_UnitTestCase {
 
@@ -29,11 +29,11 @@ abstract class WP_Tests_Image_Resize_UnitTestCase extends WP_Image_UnitTestCase
 	function test_resize_jpg() {
 		$image = $this->resize_helper( DIR_TESTDATA . '/images/test-image.jpg', 25, 25 );
 
-		$this->assertEquals( 'test-image-25x25.jpg', wp_basename( $image ) );
+		$this->assertSame( 'test-image-25x25.jpg', wp_basename( $image ) );
 		list($w, $h, $type) = getimagesize( $image );
-		$this->assertEquals( 25, $w );
-		$this->assertEquals( 25, $h );
-		$this->assertEquals( IMAGETYPE_JPEG, $type );
+		$this->assertSame( 25, $w );
+		$this->assertSame( 25, $h );
+		$this->assertSame( IMAGETYPE_JPEG, $type );
 
 		unlink( $image );
 	}
@@ -41,15 +41,15 @@ abstract class WP_Tests_Image_Resize_UnitTestCase extends WP_Image_UnitTestCase
 	function test_resize_png() {
 		$image = $this->resize_helper( DIR_TESTDATA . '/images/test-image.png', 25, 25 );
 
-		if ( ! is_string( $image ) ) {  // WP_Error, stop GLib-GObject-CRITICAL assertion
+		if ( ! is_string( $image ) ) {  // WP_Error, stop GLib-GObject-CRITICAL assertion.
 			$this->fail( sprintf( 'No PNG support in the editor engine %s on this system', $this->editor_engine ) );
 		}
 
-		$this->assertEquals( 'test-image-25x25.png', wp_basename( $image ) );
+		$this->assertSame( 'test-image-25x25.png', wp_basename( $image ) );
 		list($w, $h, $type) = getimagesize( $image );
-		$this->assertEquals( 25, $w );
-		$this->assertEquals( 25, $h );
-		$this->assertEquals( IMAGETYPE_PNG, $type );
+		$this->assertSame( 25, $w );
+		$this->assertSame( 25, $h );
+		$this->assertSame( IMAGETYPE_PNG, $type );
 
 		unlink( $image );
 	}
@@ -57,35 +57,35 @@ abstract class WP_Tests_Image_Resize_UnitTestCase extends WP_Image_UnitTestCase
 	function test_resize_gif() {
 		$image = $this->resize_helper( DIR_TESTDATA . '/images/test-image.gif', 25, 25 );
 
-		if ( ! is_string( $image ) ) {  // WP_Error, stop GLib-GObject-CRITICAL assertion
+		if ( ! is_string( $image ) ) {  // WP_Error, stop GLib-GObject-CRITICAL assertion.
 			$this->fail( sprintf( 'No GIF support in the editor engine %s on this system', $this->editor_engine ) );
 		}
 
-		$this->assertEquals( 'test-image-25x25.gif', wp_basename( $image ) );
+		$this->assertSame( 'test-image-25x25.gif', wp_basename( $image ) );
 		list($w, $h, $type) = getimagesize( $image );
-		$this->assertEquals( 25, $w );
-		$this->assertEquals( 25, $h );
-		$this->assertEquals( IMAGETYPE_GIF, $type );
+		$this->assertSame( 25, $w );
+		$this->assertSame( 25, $h );
+		$this->assertSame( IMAGETYPE_GIF, $type );
 
 		unlink( $image );
 	}
 
 	function test_resize_larger() {
-		// image_resize() should refuse to make an image larger
+		// image_resize() should refuse to make an image larger.
 		$image = $this->resize_helper( DIR_TESTDATA . '/images/test-image.jpg', 100, 100 );
 
 		$this->assertInstanceOf( 'WP_Error', $image );
-		$this->assertEquals( 'error_getting_dimensions', $image->get_error_code() );
+		$this->assertSame( 'error_getting_dimensions', $image->get_error_code() );
 	}
 
 	function test_resize_thumb_128x96() {
 		$image = $this->resize_helper( DIR_TESTDATA . '/images/2007-06-17DSC_4173.JPG', 128, 96 );
 
-		$this->assertEquals( '2007-06-17DSC_4173-64x96.jpg', wp_basename( $image ) );
+		$this->assertSame( '2007-06-17DSC_4173-64x96.jpg', wp_basename( $image ) );
 		list($w, $h, $type) = getimagesize( $image );
-		$this->assertEquals( 64, $w );
-		$this->assertEquals( 96, $h );
-		$this->assertEquals( IMAGETYPE_JPEG, $type );
+		$this->assertSame( 64, $w );
+		$this->assertSame( 96, $h );
+		$this->assertSame( IMAGETYPE_JPEG, $type );
 
 		unlink( $image );
 	}
@@ -93,11 +93,11 @@ abstract class WP_Tests_Image_Resize_UnitTestCase extends WP_Image_UnitTestCase
 	function test_resize_thumb_128x0() {
 		$image = $this->resize_helper( DIR_TESTDATA . '/images/2007-06-17DSC_4173.JPG', 128, 0 );
 
-		$this->assertEquals( '2007-06-17DSC_4173-128x193.jpg', wp_basename( $image ) );
+		$this->assertSame( '2007-06-17DSC_4173-128x193.jpg', wp_basename( $image ) );
 		list($w, $h, $type) = getimagesize( $image );
-		$this->assertEquals( 128, $w );
-		$this->assertEquals( 193, $h );
-		$this->assertEquals( IMAGETYPE_JPEG, $type );
+		$this->assertSame( 128, $w );
+		$this->assertSame( 193, $h );
+		$this->assertSame( IMAGETYPE_JPEG, $type );
 
 		unlink( $image );
 	}
@@ -105,11 +105,11 @@ abstract class WP_Tests_Image_Resize_UnitTestCase extends WP_Image_UnitTestCase
 	function test_resize_thumb_0x96() {
 		$image = $this->resize_helper( DIR_TESTDATA . '/images/2007-06-17DSC_4173.JPG', 0, 96 );
 
-		$this->assertEquals( '2007-06-17DSC_4173-64x96.jpg', wp_basename( $image ) );
+		$this->assertSame( '2007-06-17DSC_4173-64x96.jpg', wp_basename( $image ) );
 		list($w, $h, $type) = getimagesize( $image );
-		$this->assertEquals( 64, $w );
-		$this->assertEquals( 96, $h );
-		$this->assertEquals( IMAGETYPE_JPEG, $type );
+		$this->assertSame( 64, $w );
+		$this->assertSame( 96, $h );
+		$this->assertSame( IMAGETYPE_JPEG, $type );
 
 		unlink( $image );
 	}
@@ -117,11 +117,11 @@ abstract class WP_Tests_Image_Resize_UnitTestCase extends WP_Image_UnitTestCase
 	function test_resize_thumb_150x150_crop() {
 		$image = $this->resize_helper( DIR_TESTDATA . '/images/2007-06-17DSC_4173.JPG', 150, 150, true );
 
-		$this->assertEquals( '2007-06-17DSC_4173-150x150.jpg', wp_basename( $image ) );
+		$this->assertSame( '2007-06-17DSC_4173-150x150.jpg', wp_basename( $image ) );
 		list($w, $h, $type) = getimagesize( $image );
-		$this->assertEquals( 150, $w );
-		$this->assertEquals( 150, $h );
-		$this->assertEquals( IMAGETYPE_JPEG, $type );
+		$this->assertSame( 150, $w );
+		$this->assertSame( 150, $h );
+		$this->assertSame( IMAGETYPE_JPEG, $type );
 
 		unlink( $image );
 	}
@@ -129,11 +129,11 @@ abstract class WP_Tests_Image_Resize_UnitTestCase extends WP_Image_UnitTestCase
 	function test_resize_thumb_150x100_crop() {
 		$image = $this->resize_helper( DIR_TESTDATA . '/images/2007-06-17DSC_4173.JPG', 150, 100, true );
 
-		$this->assertEquals( '2007-06-17DSC_4173-150x100.jpg', wp_basename( $image ) );
+		$this->assertSame( '2007-06-17DSC_4173-150x100.jpg', wp_basename( $image ) );
 		list($w, $h, $type) = getimagesize( $image );
-		$this->assertEquals( 150, $w );
-		$this->assertEquals( 100, $h );
-		$this->assertEquals( IMAGETYPE_JPEG, $type );
+		$this->assertSame( 150, $w );
+		$this->assertSame( 100, $h );
+		$this->assertSame( IMAGETYPE_JPEG, $type );
 
 		unlink( $image );
 	}
@@ -141,11 +141,11 @@ abstract class WP_Tests_Image_Resize_UnitTestCase extends WP_Image_UnitTestCase
 	function test_resize_thumb_50x150_crop() {
 		$image = $this->resize_helper( DIR_TESTDATA . '/images/2007-06-17DSC_4173.JPG', 50, 150, true );
 
-		$this->assertEquals( '2007-06-17DSC_4173-50x150.jpg', wp_basename( $image ) );
+		$this->assertSame( '2007-06-17DSC_4173-50x150.jpg', wp_basename( $image ) );
 		list($w, $h, $type) = getimagesize( $image );
-		$this->assertEquals( 50, $w );
-		$this->assertEquals( 150, $h );
-		$this->assertEquals( IMAGETYPE_JPEG, $type );
+		$this->assertSame( 50, $w );
+		$this->assertSame( 150, $h );
+		$this->assertSame( IMAGETYPE_JPEG, $type );
 
 		unlink( $image );
 	}
@@ -159,7 +159,7 @@ abstract class WP_Tests_Image_Resize_UnitTestCase extends WP_Image_UnitTestCase
 		$image = $this->resize_helper( DIR_TESTDATA . '/images/test-non-existent-image.jpg', 25, 25 );
 
 		$this->assertInstanceOf( 'WP_Error', $image );
-		$this->assertEquals( 'error_loading_image', $image->get_error_code() );
+		$this->assertSame( 'error_loading_image', $image->get_error_code() );
 	}
 
 	/**
diff --git a/tests/image/resizeGd.php b/tests/image/resizeGd.php
index 5d1c614c34..fc39c9f7f6 100644
--- a/tests/image/resizeGd.php
+++ b/tests/image/resizeGd.php
@@ -6,7 +6,7 @@
  * @group upload
  * @group resize
  */
-require_once( dirname( __FILE__ ) . '/resize.php' );
+require_once __DIR__ . '/resize.php';
 
 class Test_Image_Resize_GD extends WP_Tests_Image_Resize_UnitTestCase {
 
@@ -18,8 +18,8 @@ class Test_Image_Resize_GD extends WP_Tests_Image_Resize_UnitTestCase {
 	public $editor_engine = 'WP_Image_Editor_GD';
 
 	public function setUp() {
-		require_once( ABSPATH . WPINC . '/class-wp-image-editor.php' );
-		require_once( ABSPATH . WPINC . '/class-wp-image-editor-gd.php' );
+		require_once ABSPATH . WPINC . '/class-wp-image-editor.php';
+		require_once ABSPATH . WPINC . '/class-wp-image-editor-gd.php';
 
 		parent::setUp();
 	}
@@ -33,7 +33,7 @@ class Test_Image_Resize_GD extends WP_Tests_Image_Resize_UnitTestCase {
 
 		$image = $this->resize_helper( DIR_TESTDATA . '/export/crazy-cdata.xml', 25, 25 );
 		$this->assertInstanceOf( 'WP_Error', $image );
-		$this->assertEquals( 'invalid_image', $image->get_error_code() );
+		$this->assertSame( 'invalid_image', $image->get_error_code() );
 	}
 
 }
diff --git a/tests/image/resizeImagick.php b/tests/image/resizeImagick.php
index d611e38e14..ae402ee457 100644
--- a/tests/image/resizeImagick.php
+++ b/tests/image/resizeImagick.php
@@ -6,7 +6,7 @@
  * @group upload
  * @group resize
  */
-require_once( dirname( __FILE__ ) . '/resize.php' );
+require_once __DIR__ . '/resize.php';
 
 class Test_Image_Resize_Imagick extends WP_Tests_Image_Resize_UnitTestCase {
 
@@ -18,8 +18,8 @@ class Test_Image_Resize_Imagick extends WP_Tests_Image_Resize_UnitTestCase {
 	public $editor_engine = 'WP_Image_Editor_Imagick';
 
 	public function setUp() {
-		require_once( ABSPATH . WPINC . '/class-wp-image-editor.php' );
-		require_once( ABSPATH . WPINC . '/class-wp-image-editor-imagick.php' );
+		require_once ABSPATH . WPINC . '/class-wp-image-editor.php';
+		require_once ABSPATH . WPINC . '/class-wp-image-editor-imagick.php';
 
 		parent::setUp();
 	}
diff --git a/tests/image/siteIcon.php b/tests/image/siteIcon.php
index dad3ddba52..595a1a5f21 100644
--- a/tests/image/siteIcon.php
+++ b/tests/image/siteIcon.php
@@ -5,7 +5,7 @@
  * @group site_icon
  */
 
-require_once( ABSPATH . 'wp-admin/includes/class-wp-site-icon.php' );
+require_once ABSPATH . 'wp-admin/includes/class-wp-site-icon.php';
 
 class Tests_WP_Site_Icon extends WP_UnitTestCase {
 	protected $wp_site_icon;
@@ -36,7 +36,7 @@ class Tests_WP_Site_Icon extends WP_UnitTestCase {
 			$sizes[] = 'site_icon-' . $size;
 		}
 
-		$this->assertEquals( $sizes, $image_sizes );
+		$this->assertSame( $sizes, $image_sizes );
 	}
 
 	function test_intermediate_image_sizes_with_filter() {
@@ -52,11 +52,11 @@ class Tests_WP_Site_Icon extends WP_UnitTestCase {
 		$this->assertContains( 'site_icon-321', $image_sizes );
 
 		// All icon sizes should be part of the array, including sizes added through the filter.
-		$this->assertEquals( $sizes, $image_sizes );
+		$this->assertSame( $sizes, $image_sizes );
 
 		// Remove custom size.
 		unset( $this->wp_site_icon->site_icon_sizes[ array_search( 321, $this->wp_site_icon->site_icon_sizes, true ) ] );
-		// Remove the filter we added
+		// Remove the filter we added.
 		remove_filter( 'site_icon_image_sizes', array( $this, '_custom_test_sizes' ) );
 	}
 
@@ -72,7 +72,7 @@ class Tests_WP_Site_Icon extends WP_UnitTestCase {
 			);
 		}
 
-		$this->assertEquals( $sizes, $image_sizes );
+		$this->assertSame( $sizes, $image_sizes );
 	}
 
 	function test_additional_sizes_with_filter() {
@@ -92,7 +92,7 @@ class Tests_WP_Site_Icon extends WP_UnitTestCase {
 		$this->assertArrayHasKey( 'site_icon-321', $image_sizes );
 
 		// All icon sizes should be part of the array, including sizes added through the filter.
-		$this->assertEquals( $sizes, $image_sizes );
+		$this->assertSame( $sizes, $image_sizes );
 
 		// Remove custom size.
 		unset( $this->wp_site_icon->site_icon_sizes[ array_search( 321, $this->wp_site_icon->site_icon_sizes, true ) ] );
@@ -105,11 +105,11 @@ class Tests_WP_Site_Icon extends WP_UnitTestCase {
 
 		$object = $this->wp_site_icon->create_attachment_object( $cropped, $attachment_id );
 
-		$this->assertEquals( $object['post_title'], 'cropped-test-image.jpg' );
-		$this->assertEquals( $object['context'], 'site-icon' );
-		$this->assertEquals( $object['post_mime_type'], 'image/jpeg' );
-		$this->assertEquals( $object['post_content'], $cropped );
-		$this->assertEquals( $object['guid'], $cropped );
+		$this->assertSame( $object['post_title'], 'cropped-test-image.jpg' );
+		$this->assertSame( $object['context'], 'site-icon' );
+		$this->assertSame( $object['post_mime_type'], 'image/jpeg' );
+		$this->assertSame( $object['post_content'], $cropped );
+		$this->assertSame( $object['guid'], $cropped );
 	}
 
 	function test_insert_cropped_attachment() {
diff --git a/tests/image/size.php b/tests/image/size.php
index f7e4b992f5..0466cd066f 100644
--- a/tests/image/size.php
+++ b/tests/image/size.php
@@ -8,7 +8,7 @@
 class Tests_Image_Size extends WP_UnitTestCase {
 
 	function test_constrain_dims_zero() {
-		// no constraint - should have no effect
+		// No constraint - should have no effect.
 		$out = wp_constrain_dimensions( 640, 480, 0, 0 );
 		$this->assertSame( array( 640, 480 ), $out );
 
@@ -23,7 +23,7 @@ class Tests_Image_Size extends WP_UnitTestCase {
 	}
 
 	function test_constrain_dims_smaller() {
-		// image size is smaller than the constraint - no effect
+		// Image size is smaller than the constraint - no effect.
 		$out = wp_constrain_dimensions( 500, 600, 1024, 768 );
 		$this->assertSame( array( 500, 600 ), $out );
 
@@ -35,7 +35,7 @@ class Tests_Image_Size extends WP_UnitTestCase {
 	}
 
 	function test_constrain_dims_equal() {
-		// image size is equal to the constraint - no effect
+		// Image size is equal to the constraint - no effect.
 		$out = wp_constrain_dimensions( 1024, 768, 1024, 768 );
 		$this->assertSame( array( 1024, 768 ), $out );
 
@@ -47,7 +47,7 @@ class Tests_Image_Size extends WP_UnitTestCase {
 	}
 
 	function test_constrain_dims_larger() {
-		// image size is larger than the constraint - result should be constrained
+		// Image size is larger than the constraint - result should be constrained.
 		$out = wp_constrain_dimensions( 1024, 768, 500, 600 );
 		$this->assertSame( array( 500, 375 ), $out );
 
@@ -57,7 +57,7 @@ class Tests_Image_Size extends WP_UnitTestCase {
 		$out = wp_constrain_dimensions( 1024, 768, 500, 0 );
 		$this->assertSame( array( 500, 375 ), $out );
 
-		// also try a portrait oriented image
+		// Also try a portrait oriented image.
 		$out = wp_constrain_dimensions( 300, 800, 500, 600 );
 		$this->assertSame( array( 225, 600 ), $out );
 
@@ -69,14 +69,14 @@ class Tests_Image_Size extends WP_UnitTestCase {
 	}
 
 	function test_constrain_dims_boundary() {
-		// one dimension is larger than the constraint, one smaller - result should be constrained
+		// One dimension is larger than the constraint, one smaller - result should be constrained.
 		$out = wp_constrain_dimensions( 1024, 768, 500, 800 );
 		$this->assertSame( array( 500, 375 ), $out );
 
 		$out = wp_constrain_dimensions( 1024, 768, 2000, 700 );
 		$this->assertSame( array( 933, 700 ), $out );
 
-		// portrait
+		// Portrait.
 		$out = wp_constrain_dimensions( 768, 1024, 800, 500 );
 		$this->assertSame( array( 375, 500 ), $out );
 
@@ -99,7 +99,7 @@ class Tests_Image_Size extends WP_UnitTestCase {
 	 * @expectedDeprecated wp_shrink_dimensions
 	 */
 	function test_shrink_dimensions_smaller() {
-		// image size is smaller than the constraint - no effect
+		// Image size is smaller than the constraint - no effect.
 		$out = wp_shrink_dimensions( 500, 600, 1024, 768 );
 		$this->assertSame( array( 500, 600 ), $out );
 
@@ -111,7 +111,7 @@ class Tests_Image_Size extends WP_UnitTestCase {
 	 * @expectedDeprecated wp_shrink_dimensions
 	 */
 	function test_shrink_dimensions_equal() {
-		// image size is equal to the constraint - no effect
+		// Image size is equal to the constraint - no effect.
 		$out = wp_shrink_dimensions( 500, 600, 500, 600 );
 		$this->assertSame( array( 500, 600 ), $out );
 
@@ -123,7 +123,7 @@ class Tests_Image_Size extends WP_UnitTestCase {
 	 * @expectedDeprecated wp_shrink_dimensions
 	 */
 	function test_shrink_dimensions_larger() {
-		// image size is larger than the constraint - result should be constrained
+		// Image size is larger than the constraint - result should be constrained.
 		$out = wp_shrink_dimensions( 1024, 768, 500, 600 );
 		$this->assertSame( array( 500, 375 ), $out );
 
@@ -135,14 +135,14 @@ class Tests_Image_Size extends WP_UnitTestCase {
 	 * @expectedDeprecated wp_shrink_dimensions
 	 */
 	function test_shrink_dimensions_boundary() {
-		// one dimension is larger than the constraint, one smaller - result should be constrained
+		// One dimension is larger than the constraint, one smaller - result should be constrained.
 		$out = wp_shrink_dimensions( 1024, 768, 500, 800 );
 		$this->assertSame( array( 500, 375 ), $out );
 
 		$out = wp_shrink_dimensions( 1024, 768, 2000, 700 );
 		$this->assertSame( array( 933, 700 ), $out );
 
-		// portrait
+		// Portrait.
 		$out = wp_shrink_dimensions( 768, 1024, 800, 500 );
 		$this->assertSame( array( 375, 500 ), $out );
 
@@ -159,7 +159,7 @@ class Tests_Image_Size extends WP_UnitTestCase {
 	}
 
 	function test_constrain_size_for_editor_medium() {
-		// default max width is 500, no constraint on height
+		// Default max width is 500, no constraint on height.
 		global $content_width;
 
 		$_content_width = $content_width;
@@ -177,7 +177,7 @@ class Tests_Image_Size extends WP_UnitTestCase {
 		$out = image_constrain_size_for_editor( 64, 64, 'medium' );
 		$this->assertSame( array( 64, 64 ), $out );
 
-		// content_width should be ignored
+		// $content_width should be ignored.
 		$content_width = 350;
 		$out           = image_constrain_size_for_editor( 600, 400, 'medium' );
 		$this->assertSame( array( 500, 333 ), $out );
@@ -197,7 +197,7 @@ class Tests_Image_Size extends WP_UnitTestCase {
 		$out = image_constrain_size_for_editor( 64, 64, 'full' );
 		$this->assertSame( array( 64, 64 ), $out );
 
-		// content_width default is 500
+		// $content_width default is 500.
 		$content_width = 0;
 
 		$out = image_constrain_size_for_editor( 600, 400, 'full' );
diff --git a/tests/import/base.php b/tests/import/base.php
index 5897ce55fb..7d52aee69b 100644
--- a/tests/import/base.php
+++ b/tests/import/base.php
@@ -11,9 +11,9 @@ abstract class WP_Import_UnitTestCase extends WP_UnitTestCase {
 	 *
 	 * <code>
 	 * $users = array(
-	 *   'alice' => 1, // alice will be mapped to user ID 1
-	 *   'bob' => 'john', // bob will be transformed into john
-	 *   'eve' => false // eve will be imported as is
+	 *   'alice' => 1,      // alice will be mapped to user ID 1.
+	 *   'bob'   => 'john', // bob will be transformed into john.
+	 *   'eve'   => false   // eve will be imported as is.
 	 * );</code>
 	 *
 	 * @param string $filename Full path of the file to import
@@ -32,8 +32,8 @@ abstract class WP_Import_UnitTestCase extends WP_UnitTestCase {
 		$new     = array();
 		$i       = 0;
 
-		// each user is either mapped to a given ID, mapped to a new user
-		// with given login or imported using details in WXR file
+		// Each user is either mapped to a given ID, mapped to a new user
+		// with given login or imported using details in WXR file.
 		foreach ( $users as $user => $map ) {
 			$authors[ $i ] = $user;
 			if ( is_int( $map ) ) {
diff --git a/tests/import/import.php b/tests/import/import.php
index e005826a18..0dfb60b369 100644
--- a/tests/import/import.php
+++ b/tests/import/import.php
@@ -1,6 +1,6 @@
 <?php
 
-require_once dirname( __FILE__ ) . '/base.php';
+require_once __DIR__ . '/base.php';
 
 /**
  * @group import
@@ -26,7 +26,7 @@ class Tests_Import_Import extends WP_Import_UnitTestCase {
 		require_once DIR_TESTDATA . '/plugins/wordpress-importer/wordpress-importer.php';
 
 		global $wpdb;
-		// crude but effective: make sure there's no residual data in the main tables
+		// Crude but effective: make sure there's no residual data in the main tables.
 		foreach ( array( 'posts', 'postmeta', 'comments', 'terms', 'term_taxonomy', 'term_relationships', 'users', 'usermeta' ) as $table ) {
 			// phpcs:ignore WordPress.DB.PreparedSQL.InterpolatedNotPrepared
 			$wpdb->query( "DELETE FROM {$wpdb->$table}" );
@@ -49,31 +49,31 @@ class Tests_Import_Import extends WP_Import_UnitTestCase {
 		);
 		$this->_import_wp( DIR_TESTDATA . '/export/small-export.xml', $authors );
 
-		// ensure that authors were imported correctly
+		// Ensure that authors were imported correctly.
 		$user_count = count_users();
-		$this->assertEquals( 3, $user_count['total_users'] );
+		$this->assertSame( 3, $user_count['total_users'] );
 		$admin = get_user_by( 'login', 'admin' );
-		$this->assertEquals( 'admin', $admin->user_login );
-		$this->assertEquals( 'local@host.null', $admin->user_email );
+		$this->assertSame( 'admin', $admin->user_login );
+		$this->assertSame( 'local@host.null', $admin->user_email );
 		$editor = get_user_by( 'login', 'editor' );
-		$this->assertEquals( 'editor', $editor->user_login );
-		$this->assertEquals( 'editor@example.org', $editor->user_email );
-		$this->assertEquals( 'FirstName', $editor->user_firstname );
-		$this->assertEquals( 'LastName', $editor->user_lastname );
+		$this->assertSame( 'editor', $editor->user_login );
+		$this->assertSame( 'editor@example.org', $editor->user_email );
+		$this->assertSame( 'FirstName', $editor->user_firstname );
+		$this->assertSame( 'LastName', $editor->user_lastname );
 		$author = get_user_by( 'login', 'author' );
-		$this->assertEquals( 'author', $author->user_login );
-		$this->assertEquals( 'author@example.org', $author->user_email );
+		$this->assertSame( 'author', $author->user_login );
+		$this->assertSame( 'author@example.org', $author->user_email );
 
-		// check that terms were imported correctly
-		$this->assertEquals( 30, wp_count_terms( 'category' ) );
-		$this->assertEquals( 3, wp_count_terms( 'post_tag' ) );
+		// Check that terms were imported correctly.
+		$this->assertEquals( 30, wp_count_terms( array( 'taxonomy' => 'category' ) ) );
+		$this->assertEquals( 3, wp_count_terms( array( 'taxonomy' => 'post_tag' ) ) );
 		$foo = get_term_by( 'slug', 'foo', 'category' );
-		$this->assertEquals( 0, $foo->parent );
+		$this->assertSame( 0, $foo->parent );
 		$bar     = get_term_by( 'slug', 'bar', 'category' );
 		$foo_bar = get_term_by( 'slug', 'foo-bar', 'category' );
-		$this->assertEquals( $bar->term_id, $foo_bar->parent );
+		$this->assertSame( $bar->term_id, $foo_bar->parent );
 
-		// check that posts/pages were imported correctly
+		// Check that posts/pages were imported correctly.
 		$post_count = wp_count_posts( 'post' );
 		$this->assertEquals( 5, $post_count->publish );
 		$this->assertEquals( 1, $post_count->private );
@@ -81,7 +81,7 @@ class Tests_Import_Import extends WP_Import_UnitTestCase {
 		$this->assertEquals( 4, $page_count->publish );
 		$this->assertEquals( 1, $page_count->draft );
 		$comment_count = wp_count_comments();
-		$this->assertEquals( 1, $comment_count->total_comments );
+		$this->assertSame( 1, $comment_count->total_comments );
 
 		$posts = get_posts(
 			array(
@@ -91,120 +91,120 @@ class Tests_Import_Import extends WP_Import_UnitTestCase {
 				'orderby'     => 'ID',
 			)
 		);
-		$this->assertEquals( 11, count( $posts ) );
+		$this->assertSame( 11, count( $posts ) );
 
 		$post = $posts[0];
-		$this->assertEquals( 'Many Categories', $post->post_title );
-		$this->assertEquals( 'many-categories', $post->post_name );
+		$this->assertSame( 'Many Categories', $post->post_title );
+		$this->assertSame( 'many-categories', $post->post_name );
 		$this->assertEquals( $admin->ID, $post->post_author );
-		$this->assertEquals( 'post', $post->post_type );
-		$this->assertEquals( 'publish', $post->post_status );
-		$this->assertEquals( 0, $post->post_parent );
+		$this->assertSame( 'post', $post->post_type );
+		$this->assertSame( 'publish', $post->post_status );
+		$this->assertSame( 0, $post->post_parent );
 		$cats = wp_get_post_categories( $post->ID );
-		$this->assertEquals( 27, count( $cats ) );
+		$this->assertSame( 27, count( $cats ) );
 
 		$post = $posts[1];
-		$this->assertEquals( 'Non-standard post format', $post->post_title );
-		$this->assertEquals( 'non-standard-post-format', $post->post_name );
+		$this->assertSame( 'Non-standard post format', $post->post_title );
+		$this->assertSame( 'non-standard-post-format', $post->post_name );
 		$this->assertEquals( $admin->ID, $post->post_author );
-		$this->assertEquals( 'post', $post->post_type );
-		$this->assertEquals( 'publish', $post->post_status );
-		$this->assertEquals( 0, $post->post_parent );
+		$this->assertSame( 'post', $post->post_type );
+		$this->assertSame( 'publish', $post->post_status );
+		$this->assertSame( 0, $post->post_parent );
 		$cats = wp_get_post_categories( $post->ID );
-		$this->assertEquals( 1, count( $cats ) );
+		$this->assertSame( 1, count( $cats ) );
 		$this->assertTrue( has_post_format( 'aside', $post->ID ) );
 
 		$post = $posts[2];
-		$this->assertEquals( 'Top-level Foo', $post->post_title );
-		$this->assertEquals( 'top-level-foo', $post->post_name );
+		$this->assertSame( 'Top-level Foo', $post->post_title );
+		$this->assertSame( 'top-level-foo', $post->post_name );
 		$this->assertEquals( $admin->ID, $post->post_author );
-		$this->assertEquals( 'post', $post->post_type );
-		$this->assertEquals( 'publish', $post->post_status );
-		$this->assertEquals( 0, $post->post_parent );
+		$this->assertSame( 'post', $post->post_type );
+		$this->assertSame( 'publish', $post->post_status );
+		$this->assertSame( 0, $post->post_parent );
 		$cats = wp_get_post_categories( $post->ID, array( 'fields' => 'all' ) );
-		$this->assertEquals( 1, count( $cats ) );
-		$this->assertEquals( 'foo', $cats[0]->slug );
+		$this->assertSame( 1, count( $cats ) );
+		$this->assertSame( 'foo', $cats[0]->slug );
 
 		$post = $posts[3];
-		$this->assertEquals( 'Foo-child', $post->post_title );
-		$this->assertEquals( 'foo-child', $post->post_name );
+		$this->assertSame( 'Foo-child', $post->post_title );
+		$this->assertSame( 'foo-child', $post->post_name );
 		$this->assertEquals( $editor->ID, $post->post_author );
-		$this->assertEquals( 'post', $post->post_type );
-		$this->assertEquals( 'publish', $post->post_status );
-		$this->assertEquals( 0, $post->post_parent );
+		$this->assertSame( 'post', $post->post_type );
+		$this->assertSame( 'publish', $post->post_status );
+		$this->assertSame( 0, $post->post_parent );
 		$cats = wp_get_post_categories( $post->ID, array( 'fields' => 'all' ) );
-		$this->assertEquals( 1, count( $cats ) );
-		$this->assertEquals( 'foo-bar', $cats[0]->slug );
+		$this->assertSame( 1, count( $cats ) );
+		$this->assertSame( 'foo-bar', $cats[0]->slug );
 
 		$post = $posts[4];
-		$this->assertEquals( 'Private Post', $post->post_title );
-		$this->assertEquals( 'private-post', $post->post_name );
+		$this->assertSame( 'Private Post', $post->post_title );
+		$this->assertSame( 'private-post', $post->post_name );
 		$this->assertEquals( $admin->ID, $post->post_author );
-		$this->assertEquals( 'post', $post->post_type );
-		$this->assertEquals( 'private', $post->post_status );
-		$this->assertEquals( 0, $post->post_parent );
+		$this->assertSame( 'post', $post->post_type );
+		$this->assertSame( 'private', $post->post_status );
+		$this->assertSame( 0, $post->post_parent );
 		$cats = wp_get_post_categories( $post->ID );
-		$this->assertEquals( 1, count( $cats ) );
+		$this->assertSame( 1, count( $cats ) );
 		$tags = wp_get_post_tags( $post->ID );
-		$this->assertEquals( 3, count( $tags ) );
-		$this->assertEquals( 'tag1', $tags[0]->slug );
-		$this->assertEquals( 'tag2', $tags[1]->slug );
-		$this->assertEquals( 'tag3', $tags[2]->slug );
+		$this->assertSame( 3, count( $tags ) );
+		$this->assertSame( 'tag1', $tags[0]->slug );
+		$this->assertSame( 'tag2', $tags[1]->slug );
+		$this->assertSame( 'tag3', $tags[2]->slug );
 
 		$post = $posts[5];
-		$this->assertEquals( '1-col page', $post->post_title );
-		$this->assertEquals( '1-col-page', $post->post_name );
+		$this->assertSame( '1-col page', $post->post_title );
+		$this->assertSame( '1-col-page', $post->post_name );
 		$this->assertEquals( $admin->ID, $post->post_author );
-		$this->assertEquals( 'page', $post->post_type );
-		$this->assertEquals( 'publish', $post->post_status );
-		$this->assertEquals( 0, $post->post_parent );
-		$this->assertEquals( 'onecolumn-page.php', get_post_meta( $post->ID, '_wp_page_template', true ) );
+		$this->assertSame( 'page', $post->post_type );
+		$this->assertSame( 'publish', $post->post_status );
+		$this->assertSame( 0, $post->post_parent );
+		$this->assertSame( 'onecolumn-page.php', get_post_meta( $post->ID, '_wp_page_template', true ) );
 
 		$post = $posts[6];
-		$this->assertEquals( 'Draft Page', $post->post_title );
-		$this->assertEquals( '', $post->post_name );
+		$this->assertSame( 'Draft Page', $post->post_title );
+		$this->assertSame( '', $post->post_name );
 		$this->assertEquals( $admin->ID, $post->post_author );
-		$this->assertEquals( 'page', $post->post_type );
-		$this->assertEquals( 'draft', $post->post_status );
-		$this->assertEquals( 0, $post->post_parent );
-		$this->assertEquals( 'default', get_post_meta( $post->ID, '_wp_page_template', true ) );
+		$this->assertSame( 'page', $post->post_type );
+		$this->assertSame( 'draft', $post->post_status );
+		$this->assertSame( 0, $post->post_parent );
+		$this->assertSame( 'default', get_post_meta( $post->ID, '_wp_page_template', true ) );
 
 		$post = $posts[7];
-		$this->assertEquals( 'Parent Page', $post->post_title );
-		$this->assertEquals( 'parent-page', $post->post_name );
+		$this->assertSame( 'Parent Page', $post->post_title );
+		$this->assertSame( 'parent-page', $post->post_name );
 		$this->assertEquals( $admin->ID, $post->post_author );
-		$this->assertEquals( 'page', $post->post_type );
-		$this->assertEquals( 'publish', $post->post_status );
-		$this->assertEquals( 0, $post->post_parent );
-		$this->assertEquals( 'default', get_post_meta( $post->ID, '_wp_page_template', true ) );
+		$this->assertSame( 'page', $post->post_type );
+		$this->assertSame( 'publish', $post->post_status );
+		$this->assertSame( 0, $post->post_parent );
+		$this->assertSame( 'default', get_post_meta( $post->ID, '_wp_page_template', true ) );
 
 		$post = $posts[8];
-		$this->assertEquals( 'Child Page', $post->post_title );
-		$this->assertEquals( 'child-page', $post->post_name );
+		$this->assertSame( 'Child Page', $post->post_title );
+		$this->assertSame( 'child-page', $post->post_name );
 		$this->assertEquals( $admin->ID, $post->post_author );
-		$this->assertEquals( 'page', $post->post_type );
-		$this->assertEquals( 'publish', $post->post_status );
-		$this->assertEquals( $posts[7]->ID, $post->post_parent );
-		$this->assertEquals( 'default', get_post_meta( $post->ID, '_wp_page_template', true ) );
+		$this->assertSame( 'page', $post->post_type );
+		$this->assertSame( 'publish', $post->post_status );
+		$this->assertSame( $posts[7]->ID, $post->post_parent );
+		$this->assertSame( 'default', get_post_meta( $post->ID, '_wp_page_template', true ) );
 
 		$post = $posts[9];
-		$this->assertEquals( 'Sample Page', $post->post_title );
-		$this->assertEquals( 'sample-page', $post->post_name );
+		$this->assertSame( 'Sample Page', $post->post_title );
+		$this->assertSame( 'sample-page', $post->post_name );
 		$this->assertEquals( $admin->ID, $post->post_author );
-		$this->assertEquals( 'page', $post->post_type );
-		$this->assertEquals( 'publish', $post->post_status );
-		$this->assertEquals( 0, $post->post_parent );
-		$this->assertEquals( 'default', get_post_meta( $post->ID, '_wp_page_template', true ) );
+		$this->assertSame( 'page', $post->post_type );
+		$this->assertSame( 'publish', $post->post_status );
+		$this->assertSame( 0, $post->post_parent );
+		$this->assertSame( 'default', get_post_meta( $post->ID, '_wp_page_template', true ) );
 
 		$post = $posts[10];
-		$this->assertEquals( 'Hello world!', $post->post_title );
-		$this->assertEquals( 'hello-world', $post->post_name );
+		$this->assertSame( 'Hello world!', $post->post_title );
+		$this->assertSame( 'hello-world', $post->post_name );
 		$this->assertEquals( $author->ID, $post->post_author );
-		$this->assertEquals( 'post', $post->post_type );
-		$this->assertEquals( 'publish', $post->post_status );
-		$this->assertEquals( 0, $post->post_parent );
+		$this->assertSame( 'post', $post->post_type );
+		$this->assertSame( 'publish', $post->post_status );
+		$this->assertSame( 0, $post->post_parent );
 		$cats = wp_get_post_categories( $post->ID );
-		$this->assertEquals( 1, count( $cats ) );
+		$this->assertSame( 1, count( $cats ) );
 	}
 
 	function test_double_import() {
@@ -217,26 +217,26 @@ class Tests_Import_Import extends WP_Import_UnitTestCase {
 		$this->_import_wp( DIR_TESTDATA . '/export/small-export.xml', $authors );
 
 		$user_count = count_users();
-		$this->assertEquals( 3, $user_count['total_users'] );
+		$this->assertSame( 3, $user_count['total_users'] );
 		$admin = get_user_by( 'login', 'admin' );
-		$this->assertEquals( 'admin', $admin->user_login );
-		$this->assertEquals( 'local@host.null', $admin->user_email );
+		$this->assertSame( 'admin', $admin->user_login );
+		$this->assertSame( 'local@host.null', $admin->user_email );
 		$editor = get_user_by( 'login', 'editor' );
-		$this->assertEquals( 'editor', $editor->user_login );
-		$this->assertEquals( 'editor@example.org', $editor->user_email );
-		$this->assertEquals( 'FirstName', $editor->user_firstname );
-		$this->assertEquals( 'LastName', $editor->user_lastname );
+		$this->assertSame( 'editor', $editor->user_login );
+		$this->assertSame( 'editor@example.org', $editor->user_email );
+		$this->assertSame( 'FirstName', $editor->user_firstname );
+		$this->assertSame( 'LastName', $editor->user_lastname );
 		$author = get_user_by( 'login', 'author' );
-		$this->assertEquals( 'author', $author->user_login );
-		$this->assertEquals( 'author@example.org', $author->user_email );
+		$this->assertSame( 'author', $author->user_login );
+		$this->assertSame( 'author@example.org', $author->user_email );
 
-		$this->assertEquals( 30, wp_count_terms( 'category' ) );
-		$this->assertEquals( 3, wp_count_terms( 'post_tag' ) );
+		$this->assertEquals( 30, wp_count_terms( array( 'taxonomy' => 'category' ) ) );
+		$this->assertEquals( 3, wp_count_terms( array( 'taxonomy' => 'post_tag' ) ) );
 		$foo = get_term_by( 'slug', 'foo', 'category' );
-		$this->assertEquals( 0, $foo->parent );
+		$this->assertSame( 0, $foo->parent );
 		$bar     = get_term_by( 'slug', 'bar', 'category' );
 		$foo_bar = get_term_by( 'slug', 'foo-bar', 'category' );
-		$this->assertEquals( $bar->term_id, $foo_bar->parent );
+		$this->assertSame( $bar->term_id, $foo_bar->parent );
 
 		$post_count = wp_count_posts( 'post' );
 		$this->assertEquals( 5, $post_count->publish );
@@ -245,12 +245,12 @@ class Tests_Import_Import extends WP_Import_UnitTestCase {
 		$this->assertEquals( 4, $page_count->publish );
 		$this->assertEquals( 1, $page_count->draft );
 		$comment_count = wp_count_comments();
-		$this->assertEquals( 1, $comment_count->total_comments );
+		$this->assertSame( 1, $comment_count->total_comments );
 	}
 
 	function test_ordering_of_importers() {
 		global $wp_importers;
-		$_wp_importers = $wp_importers; // Preserve global state
+		$_wp_importers = $wp_importers; // Preserve global state.
 		$wp_importers  = array(
 			'xyz1' => array( 'xyz1' ),
 			'XYZ2' => array( 'XYZ2' ),
@@ -258,7 +258,7 @@ class Tests_Import_Import extends WP_Import_UnitTestCase {
 			'ABC1' => array( 'ABC1' ),
 			'def1' => array( 'def1' ),
 		);
-		$this->assertEquals(
+		$this->assertSame(
 			array(
 				'ABC1' => array( 'ABC1' ),
 				'abc2' => array( 'abc2' ),
@@ -268,7 +268,7 @@ class Tests_Import_Import extends WP_Import_UnitTestCase {
 			),
 			get_importers()
 		);
-		$wp_importers = $_wp_importers; // Restore global state
+		$wp_importers = $_wp_importers; // Restore global state.
 	}
 
 	/**
@@ -294,6 +294,4 @@ class Tests_Import_Import extends WP_Import_UnitTestCase {
 		);
 		$this->assertSame( 'Slashes aren\\\'t \"cool\"', $posts[0]->post_content );
 	}
-
-	// function test_menu_import
 }
diff --git a/tests/import/parser.php b/tests/import/parser.php
index 8b198f31e4..82214c110d 100644
--- a/tests/import/parser.php
+++ b/tests/import/parser.php
@@ -1,6 +1,6 @@
 <?php
 
-require_once dirname( __FILE__ ) . '/base.php';
+require_once __DIR__ . '/base.php';
 
 /**
  * @group import
@@ -27,12 +27,12 @@ class Tests_Import_Parser extends WP_Import_UnitTestCase {
 	function test_malformed_wxr() {
 		$file = DIR_TESTDATA . '/export/malformed.xml';
 
-		// regex based parser cannot detect malformed XML
+		// Regex based parser cannot detect malformed XML.
 		foreach ( array( 'WXR_Parser_SimpleXML', 'WXR_Parser_XML' ) as $p ) {
 			$parser = new $p;
 			$result = $parser->parse( $file );
 			$this->assertWPError( $result );
-			$this->assertEquals( 'There was an error when reading this WXR file', $result->get_error_message() );
+			$this->assertSame( 'There was an error when reading this WXR file', $result->get_error_message() );
 		}
 	}
 
@@ -45,7 +45,7 @@ class Tests_Import_Parser extends WP_Import_UnitTestCase {
 				$parser = new $p;
 				$result = $parser->parse( $file );
 				$this->assertWPError( $result );
-				$this->assertEquals( 'This does not appear to be a WXR file, missing/invalid WXR version number', $result->get_error_message() );
+				$this->assertSame( 'This does not appear to be a WXR file, missing/invalid WXR version number', $result->get_error_message() );
 			}
 		}
 	}
@@ -59,7 +59,7 @@ class Tests_Import_Parser extends WP_Import_UnitTestCase {
 			$result  = $parser->parse( $file );
 
 			$this->assertTrue( is_array( $result ), $message );
-			$this->assertEquals( 'http://localhost/', $result['base_url'], $message );
+			$this->assertSame( 'http://localhost/', $result['base_url'], $message );
 			$this->assertEquals(
 				array(
 					'author_id'           => 2,
@@ -106,9 +106,9 @@ class Tests_Import_Parser extends WP_Import_UnitTestCase {
 				$message
 			);
 
-			$this->assertEquals( 2, count( $result['posts'] ), $message );
-			$this->assertEquals( 19, count( $result['posts'][0] ), $message );
-			$this->assertEquals( 18, count( $result['posts'][1] ), $message );
+			$this->assertSame( 2, count( $result['posts'] ), $message );
+			$this->assertSame( 19, count( $result['posts'][0] ), $message );
+			$this->assertSame( 18, count( $result['posts'][1] ), $message );
 			$this->assertEquals(
 				array(
 					array(
@@ -130,7 +130,7 @@ class Tests_Import_Parser extends WP_Import_UnitTestCase {
 				$result['posts'][0]['terms'],
 				$message
 			);
-			$this->assertEquals(
+			$this->assertSame(
 				array(
 					array(
 						'key'   => '_wp_page_template',
@@ -152,17 +152,17 @@ class Tests_Import_Parser extends WP_Import_UnitTestCase {
 			$result  = $parser->parse( $file );
 
 			$this->assertTrue( is_array( $result ), $message );
-			$this->assertEquals( 'http://localhost/', $result['base_url'], $message );
-			$this->assertEquals( $result['categories'][0]['category_nicename'], 'alpha', $message );
-			$this->assertEquals( $result['categories'][0]['cat_name'], 'alpha', $message );
-			$this->assertEquals( $result['categories'][0]['category_parent'], '', $message );
-			$this->assertEquals( $result['categories'][0]['category_description'], 'The alpha category', $message );
-			$this->assertEquals( $result['tags'][0]['tag_slug'], 'chicken', $message );
-			$this->assertEquals( $result['tags'][0]['tag_name'], 'chicken', $message );
+			$this->assertSame( 'http://localhost/', $result['base_url'], $message );
+			$this->assertSame( $result['categories'][0]['category_nicename'], 'alpha', $message );
+			$this->assertSame( $result['categories'][0]['cat_name'], 'alpha', $message );
+			$this->assertSame( $result['categories'][0]['category_parent'], '', $message );
+			$this->assertSame( $result['categories'][0]['category_description'], 'The alpha category', $message );
+			$this->assertSame( $result['tags'][0]['tag_slug'], 'chicken', $message );
+			$this->assertSame( $result['tags'][0]['tag_name'], 'chicken', $message );
 
-			$this->assertEquals( 6, count( $result['posts'] ), $message );
-			$this->assertEquals( 19, count( $result['posts'][0] ), $message );
-			$this->assertEquals( 18, count( $result['posts'][1] ), $message );
+			$this->assertSame( 6, count( $result['posts'] ), $message );
+			$this->assertSame( 19, count( $result['posts'][0] ), $message );
+			$this->assertSame( 18, count( $result['posts'][1] ), $message );
 
 			$this->assertEquals(
 				array(
@@ -218,7 +218,7 @@ class Tests_Import_Parser extends WP_Import_UnitTestCase {
 				$message
 			);
 
-			$this->assertEquals(
+			$this->assertSame(
 				array(
 					array(
 						'key'   => '_wp_page_template',
@@ -246,7 +246,7 @@ class Tests_Import_Parser extends WP_Import_UnitTestCase {
 			$result  = $parser->parse( $file );
 
 			$post = $result['posts'][0];
-			$this->assertEquals( 'Content with nested <![CDATA[ tags ]]> :)', $post['post_content'], $message );
+			$this->assertSame( 'Content with nested <![CDATA[ tags ]]> :)', $post['post_content'], $message );
 			foreach ( $post['postmeta'] as $meta ) {
 				switch ( $meta['key'] ) {
 					case 'Plain string':
@@ -261,7 +261,7 @@ class Tests_Import_Parser extends WP_Import_UnitTestCase {
 					default:
 						$this->fail( 'Unknown postmeta (' . $meta['key'] . ') was parsed out by' . $p );
 				}
-				$this->assertEquals( $value, $meta['value'], $message );
+				$this->assertSame( $value, $meta['value'], $message );
 			}
 		}
 	}
@@ -277,7 +277,7 @@ class Tests_Import_Parser extends WP_Import_UnitTestCase {
 		$result = $parser->parse( $file );
 
 		$post = $result['posts'][0];
-		$this->assertEquals( 'Content with nested <![CDATA[ tags ]]> :)', $post['post_content'] );
+		$this->assertSame( 'Content with nested <![CDATA[ tags ]]> :)', $post['post_content'] );
 		foreach ( $post['postmeta'] as $meta ) {
 			switch ( $meta['key'] ) {
 				case 'Plain string':
@@ -292,9 +292,9 @@ class Tests_Import_Parser extends WP_Import_UnitTestCase {
 				default:
 					$this->fail( 'Unknown postmeta (' . $meta['key'] . ') was parsed out by' . $p );
 			}
-			$this->assertEquals( $value, $meta['value'] );
+			$this->assertSame( $value, $meta['value'] );
 		}
 	}
 
-	// tags in CDATA #11574
+	// Tags in CDATA #11574.
 }
diff --git a/tests/import/postmeta.php b/tests/import/postmeta.php
index dcae22d0bd..54a05743de 100644
--- a/tests/import/postmeta.php
+++ b/tests/import/postmeta.php
@@ -1,6 +1,6 @@
 <?php
 
-require_once dirname( __FILE__ ) . '/base.php';
+require_once __DIR__ . '/base.php';
 
 /**
  * @group import
@@ -28,7 +28,7 @@ class Tests_Import_Postmeta extends WP_Import_UnitTestCase {
 		$this->_import_wp( DIR_TESTDATA . '/export/test-serialized-postmeta-no-cdata.xml', array( 'johncoswell' => 'john' ) );
 		$expected['special_post_title'] = 'A special title';
 		$expected['is_calendar']        = '';
-		$this->assertEquals( $expected, get_post_meta( 122, 'post-options', true ) );
+		$this->assertSame( $expected, get_post_meta( 122, 'post-options', true ) );
 	}
 
 	function test_utw_postmeta() {
@@ -83,12 +83,12 @@ class Tests_Import_Postmeta extends WP_Import_UnitTestCase {
 	function test_serialized_postmeta_with_cdata() {
 		$this->_import_wp( DIR_TESTDATA . '/export/test-serialized-postmeta-with-cdata.xml', array( 'johncoswell' => 'johncoswell' ) );
 
-		//HTML in the CDATA should work with old WordPress version
-		$this->assertEquals( '<pre>some html</pre>', get_post_meta( 10, 'contains-html', true ) );
-		//Serialised will only work with 3.0 onwards.
+		// HTML in the CDATA should work with old WordPress version.
+		$this->assertSame( '<pre>some html</pre>', get_post_meta( 10, 'contains-html', true ) );
+		// Serialised will only work with 3.0 onwards.
 		$expected['special_post_title'] = 'A special title';
 		$expected['is_calendar']        = '';
-		$this->assertEquals( $expected, get_post_meta( 10, 'post-options', true ) );
+		$this->assertSame( $expected, get_post_meta( 10, 'post-options', true ) );
 	}
 
 	/**
@@ -96,7 +96,7 @@ class Tests_Import_Postmeta extends WP_Import_UnitTestCase {
 	 */
 	function test_serialized_postmeta_with_evil_stuff_in_cdata() {
 		$this->_import_wp( DIR_TESTDATA . '/export/test-serialized-postmeta-with-cdata.xml', array( 'johncoswell' => 'johncoswell' ) );
-		// evil content in the CDATA
-		$this->assertEquals( '<wp:meta_value>evil</wp:meta_value>', get_post_meta( 10, 'evil', true ) );
+		// Evil content in the CDATA.
+		$this->assertSame( '<wp:meta_value>evil</wp:meta_value>', get_post_meta( 10, 'evil', true ) );
 	}
 }
diff --git a/tests/includes/factory.php b/tests/includes/factory.php
index 63f87ce619..8fd351e772 100644
--- a/tests/includes/factory.php
+++ b/tests/includes/factory.php
@@ -19,14 +19,14 @@ class TestFactoryFor extends WP_UnitTestCase {
 	function test_get_object_by_id_gets_an_object_with_the_same_name() {
 		$id     = $this->category_factory->create( array( 'name' => 'Boo' ) );
 		$object = $this->category_factory->get_object_by_id( $id );
-		$this->assertEquals( 'Boo', $object->name );
+		$this->assertSame( 'Boo', $object->name );
 	}
 
 	function test_the_taxonomy_argument_overrules_the_factory_taxonomy() {
 		$term_factory = new WP_UnitTest_Factory_For_term( null, 'category' );
 		$id           = $term_factory->create( array( 'taxonomy' => 'post_tag' ) );
 		$term         = get_term( $id, 'post_tag' );
-		$this->assertEquals( $id, $term->term_id );
+		$this->assertSame( $id, $term->term_id );
 	}
 
 	/**
diff --git a/tests/includes/helpers.php b/tests/includes/helpers.php
index d96207606b..451ccaa64c 100644
--- a/tests/includes/helpers.php
+++ b/tests/includes/helpers.php
@@ -7,12 +7,12 @@ class Tests_TestHelpers extends WP_UnitTestCase {
 	/**
 	 * @ticket 30522
 	 */
-	function data_assertEqualSets() {
+	function data_assertSameSets() {
 		return array(
 			array(
-				array( 1, 2, 3 ), // test expected
-				array( 1, 2, 3 ), // test actual
-				false,             // exception expected
+				array( 1, 2, 3 ), // Test expected.
+				array( 1, 2, 3 ), // Test actual.
+				false,            // Exception expected.
 			),
 			array(
 				array( 1, 2, 3 ),
@@ -48,32 +48,32 @@ class Tests_TestHelpers extends WP_UnitTestCase {
 	}
 
 	/**
-	 * @dataProvider data_assertEqualSets
+	 * @dataProvider data_assertSameSets
 	 * @ticket 30522
 	 */
-	function test_assertEqualSets( $expected, $actual, $exception ) {
+	function test_assertSameSets( $expected, $actual, $exception ) {
 		if ( $exception ) {
 			try {
-				$this->assertEqualSets( $expected, $actual );
+				$this->assertSameSets( $expected, $actual );
 			} catch ( PHPUnit_Framework_ExpectationFailedException $ex ) {
 				return;
 			}
 
 			$this->fail();
 		} else {
-			$this->assertEqualSets( $expected, $actual );
+			$this->assertSameSets( $expected, $actual );
 		}
 	}
 
 	/**
 	 * @ticket 30522
 	 */
-	function data_assertEqualSetsWithIndex() {
+	function data_assertSameSetsWithIndex() {
 		return array(
 			array(
-				array( 1, 2, 3 ), // test expected
-				array( 1, 2, 3 ), // test actual
-				false,             // exception expected
+				array( 1, 2, 3 ), // Test expected.
+				array( 1, 2, 3 ), // Test actual.
+				false,            // Exception expected.
 			),
 			array(
 				array(
@@ -204,20 +204,20 @@ class Tests_TestHelpers extends WP_UnitTestCase {
 		);
 	}
 	/**
-	 * @dataProvider data_assertEqualSetsWithIndex
+	 * @dataProvider data_assertSameSetsWithIndex
 	 * @ticket 30522
 	 */
-	function test_assertEqualSetsWithIndex( $expected, $actual, $exception ) {
+	function test_assertSameSetsWithIndex( $expected, $actual, $exception ) {
 		if ( $exception ) {
 			try {
-				$this->assertEqualSetsWithIndex( $expected, $actual );
+				$this->assertSameSetsWithIndex( $expected, $actual );
 			} catch ( PHPUnit_Framework_ExpectationFailedException $ex ) {
 				return;
 			}
 
 			$this->fail();
 		} else {
-			$this->assertEqualSetsWithIndex( $expected, $actual );
+			$this->assertSameSetsWithIndex( $expected, $actual );
 		}
 	}
 
@@ -312,7 +312,7 @@ class Tests_TestHelpers extends WP_UnitTestCase {
 		$this->assertSame( $expected['title'], $title );
 
 		// Only check arguments that are explicitly asked for.
-		$this->assertEqualSets( $expected['args'], array_intersect_key( $args, $expected['args'] ) );
+		$this->assertSameSets( $expected['args'], array_intersect_key( $args, $expected['args'] ) );
 	}
 
 	public function data_die_process_input() {
diff --git a/tests/kses.php b/tests/kses.php
index 051897c07f..0a6527a56d 100644
--- a/tests/kses.php
+++ b/tests/kses.php
@@ -16,17 +16,21 @@ class Tests_Kses extends WP_UnitTestCase {
 		$attributes = array(
 			'class' => 'classname',
 			'id'    => 'id',
-			'style' => 'color: red;',
-			'style' => 'color: red',
-			'style' => 'color: red; text-align:center',
-			'style' => 'color: red; text-align:center;',
+			'style' => array(
+				'color: red;',
+				'color: red',
+				'color: red; text-align:center',
+				'color: red; text-align:center;',
+			),
 			'title' => 'title',
 		);
 
-		foreach ( $attributes as $name => $value ) {
-			$string        = "<address $name='$value'>1 WordPress Avenue, The Internet.</address>";
-			$expect_string = "<address $name='" . str_replace( '; ', ';', trim( $value, ';' ) ) . "'>1 WordPress Avenue, The Internet.</address>";
-			$this->assertEquals( $expect_string, wp_kses( $string, $allowedposttags ) );
+		foreach ( $attributes as $name => $values ) {
+			foreach ( (array) $values as $value ) {
+				$string        = "<address $name='$value'>1 WordPress Avenue, The Internet.</address>";
+				$expect_string = "<address $name='" . str_replace( '; ', ';', trim( $value, ';' ) ) . "'>1 WordPress Avenue, The Internet.</address>";
+				$this->assertSame( $expect_string, wp_kses( $string, $allowedposttags ) );
+			}
 		}
 	}
 
@@ -59,10 +63,64 @@ class Tests_Kses extends WP_UnitTestCase {
 			}
 			$string        = "<a $attr>I link this</a>";
 			$expect_string = "<a $expected_attr>I link this</a>";
-			$this->assertEquals( $expect_string, wp_kses( $string, $allowedposttags ) );
+			$this->assertSame( $expect_string, wp_kses( $string, $allowedposttags ) );
 		}
 	}
 
+	/**
+	 * Test video tag.
+	 *
+	 * @ticket 50167
+	 * @ticket 29826
+	 * @dataProvider data_wp_kses_video
+	 *
+	 * @param string $source   Source HTML.
+	 * @param string $context  Context to use for parsing source.
+	 * @param string $expected Expected output following KSES parsing.
+	 */
+	function test_wp_kses_video( $source, $context, $expected ) {
+		$actual = wp_kses( $source, $context );
+		$this->assertSame( $expected, $actual );
+	}
+
+	/**
+	 * Data provider for test_wp_kses_video
+	 *
+	 * @return array[] Array containing test data {
+	 *     @type string $source   Source HTML.
+	 *     @type string $context  Context to use for parsing source.
+	 *     @type string $expected Expected output following KSES parsing.
+	 * }
+	 */
+	function data_wp_kses_video() {
+		return array(
+			// Set 0: Valid post object params in post context.
+			array(
+				'<video src="movie.mov" autoplay controls height=9 loop muted poster="still.gif" playsinline preload width=16 />',
+				'post',
+				'<video src="movie.mov" autoplay controls height="9" loop muted poster="still.gif" playsinline preload width="16" />',
+			),
+			// Set 1: Valid post object params in data context.
+			array(
+				'<video src="movie.mov" autoplay controls height=9 loop muted poster="still.gif" playsinline preload width=16 />',
+				'data',
+				'',
+			),
+			// Set 2: Disallowed urls in post context.
+			array(
+				'<video src="bad://w.org/movie.mov" poster="bad://w.org/movie.jpg" />',
+				'post',
+				'<video src="//w.org/movie.mov" poster="//w.org/movie.jpg" />',
+			),
+			// Set 3: Disallowed attributes in post context.
+			array(
+				'<video onload="alert(1);" src="https://videos.files.wordpress.com/DZEMDKxc/video-0f9c363010.mp4" />',
+				'post',
+				'<video src="https://videos.files.wordpress.com/DZEMDKxc/video-0f9c363010.mp4" />',
+			),
+		);
+	}
+
 	/**
 	 * @ticket 20210
 	 */
@@ -79,7 +137,7 @@ class Tests_Kses extends WP_UnitTestCase {
 		foreach ( $attributes as $name => $value ) {
 			$string        = "<abbr $name='$value'>WP</abbr>";
 			$expect_string = "<abbr $name='" . trim( $value, ';' ) . "'>WP</abbr>";
-			$this->assertEquals( $expect_string, wp_kses( $string, $allowedposttags ) );
+			$this->assertSame( $expect_string, wp_kses( $string, $allowedposttags ) );
 		}
 	}
 
@@ -114,7 +172,7 @@ EOF;
 <a href="">CLICK ME</a>
 EOF;
 
-		$this->assertEquals( $expected, wp_kses( $content, $allowedposttags ) );
+		$this->assertSame( $expected, wp_kses( $content, $allowedposttags ) );
 	}
 
 	function test_wp_kses_bad_protocol() {
@@ -153,25 +211,25 @@ EOF;
 			if ( ! empty( $result ) && 'alert(1);' !== $result && 'alert(1)' !== $result ) {
 				switch ( $k ) {
 					case 6:
-						$this->assertEquals( 'javascript&amp;#0000058alert(1);', $result );
+						$this->assertSame( 'javascript&amp;#0000058alert(1);', $result );
 						break;
 					case 12:
-						$this->assertEquals( str_replace( '&', '&amp;', $x ), $result );
+						$this->assertSame( str_replace( '&', '&amp;', $x ), $result );
 						break;
 					case 22:
-						$this->assertEquals( 'javascript&amp;#0000058alert(1);', $result );
+						$this->assertSame( 'javascript&amp;#0000058alert(1);', $result );
 						break;
 					case 23:
-						$this->assertEquals( 'javascript&amp;#0000058alert(1)//?:', $result );
+						$this->assertSame( 'javascript&amp;#0000058alert(1)//?:', $result );
 						break;
 					case 24:
-						$this->assertEquals( 'feed:alert(1)', $result );
+						$this->assertSame( 'feed:alert(1)', $result );
 						break;
 					case 26:
-						$this->assertEquals( 'javascript&amp;#58alert(1)', $result );
+						$this->assertSame( 'javascript&amp;#58alert(1)', $result );
 						break;
 					case 27:
-						$this->assertEquals( 'javascript&amp;#x3ax=1;alert(1)', $result );
+						$this->assertSame( 'javascript&amp;#x3ax=1;alert(1)', $result );
 						break;
 					default:
 						$this->fail( "wp_kses_bad_protocol failed on $k, $x. Result: $result" );
@@ -179,6 +237,28 @@ EOF;
 			}
 		}
 
+		$bad_not_normalized = array(
+			'dummy&colon;alert(1)',
+			'javascript&colon;alert(1)',
+			'javascript&CoLon;alert(1)',
+			'javascript&COLON;alert(1);',
+			'javascript&#58;alert(1);',
+			'javascript&#0058;alert(1);',
+			'javascript&#0000058alert(1);',
+			'jav	ascript&COLON;alert(1);',
+			'javascript&#58;javascript&colon;alert(1);',
+			'javascript&#58;javascript&colon;alert(1);',
+			'javascript&#0000058javascript&colon;alert(1);',
+			'javascript&#58;javascript&#0000058alert(1);',
+			'javascript&#58alert(1)',
+		);
+		foreach ( $bad_not_normalized as $k => $x ) {
+			$result = wp_kses_bad_protocol( $x, wp_allowed_protocols() );
+			if ( ! empty( $result ) && 'alert(1);' !== $result && 'alert(1)' !== $result ) {
+				$this->fail( "wp_kses_bad_protocol failed on $k, $x. Result: $result" );
+			}
+		}
+
 		$safe = array(
 			'dummy:alert(1)',
 			'HTTP://example.org/',
@@ -224,106 +304,106 @@ EOF;
 
 			switch ( $attack->name ) {
 				case 'XSS Locator':
-					$this->assertEquals( '\';alert(String.fromCharCode(88,83,83))//\\\';alert(String.fromCharCode(88,83,83))//";alert(String.fromCharCode(88,83,83))//\\";alert(String.fromCharCode(88,83,83))//--&gt;"&gt;\'&gt;alert(String.fromCharCode(88,83,83))=&amp;{}', $result );
+					$this->assertSame( '\';alert(String.fromCharCode(88,83,83))//\\\';alert(String.fromCharCode(88,83,83))//";alert(String.fromCharCode(88,83,83))//\\";alert(String.fromCharCode(88,83,83))//--&gt;"&gt;\'&gt;alert(String.fromCharCode(88,83,83))=&amp;{}', $result );
 					break;
 				case 'XSS Quick Test':
-					$this->assertEquals( '\'\';!--"=&amp;{()}', $result );
+					$this->assertSame( '\'\';!--"=&amp;{()}', $result );
 					break;
 				case 'SCRIPT w/Alert()':
-					$this->assertEquals( "alert('XSS')", $result );
+					$this->assertSame( "alert('XSS')", $result );
 					break;
 				case 'SCRIPT w/Char Code':
-					$this->assertEquals( 'alert(String.fromCharCode(88,83,83))', $result );
+					$this->assertSame( 'alert(String.fromCharCode(88,83,83))', $result );
 					break;
 				case 'IMG STYLE w/expression':
-					$this->assertEquals( 'exp/*', $result );
+					$this->assertSame( 'exp/*', $result );
 					break;
 				case 'List-style-image':
-					$this->assertEquals( 'li {list-style-image: url("javascript:alert(\'XSS\')");}XSS', $result );
+					$this->assertSame( 'li {list-style-image: url("javascript:alert(\'XSS\')");}XSS', $result );
 					break;
 				case 'STYLE':
-					$this->assertEquals( "alert('XSS');", $result );
+					$this->assertSame( "alert('XSS');", $result );
 					break;
 				case 'STYLE w/background-image':
-					$this->assertEquals( '.XSS{background-image:url("javascript:alert(\'XSS\')");}<A></A>', $result );
+					$this->assertSame( '.XSS{background-image:url("javascript:alert(\'XSS\')");}<A></A>', $result );
 					break;
 				case 'STYLE w/background':
-					$this->assertEquals( 'BODY{background:url("javascript:alert(\'XSS\')")}', $result );
+					$this->assertSame( 'BODY{background:url("javascript:alert(\'XSS\')")}', $result );
 					break;
 				case 'Remote Stylesheet 2':
-					$this->assertEquals( "@import'http://ha.ckers.org/xss.css';", $result );
+					$this->assertSame( "@import'http://ha.ckers.org/xss.css';", $result );
 					break;
 				case 'Remote Stylesheet 3':
-					$this->assertEquals( '&lt;META HTTP-EQUIV=&quot;Link&quot; Content=&quot;; REL=stylesheet"&gt;', $result );
+					$this->assertSame( '&lt;META HTTP-EQUIV=&quot;Link&quot; Content=&quot;; REL=stylesheet"&gt;', $result );
 					break;
 				case 'Remote Stylesheet 4':
-					$this->assertEquals( 'BODY{-moz-binding:url("http://ha.ckers.org/xssmoz.xml#xss")}', $result );
+					$this->assertSame( 'BODY{-moz-binding:url("http://ha.ckers.org/xssmoz.xml#xss")}', $result );
 					break;
 				case 'XML data island w/CDATA':
-					$this->assertEquals( '&lt;![CDATA[]]&gt;', $result );
+					$this->assertSame( '&lt;![CDATA[]]&gt;', $result );
 					break;
 				case 'XML data island w/comment':
-					$this->assertEquals( "<I><B>&lt;IMG SRC=&quot;javas<!-- -->cript:alert('XSS')\"&gt;</B></I>", $result );
+					$this->assertSame( "<I><B>&lt;IMG SRC=&quot;javas<!-- -->cript:alert('XSS')\"&gt;</B></I>", $result );
 					break;
 				case 'XML HTML+TIME':
-					$this->assertEquals( '&lt;t:set attributeName=&quot;innerHTML&quot; to=&quot;XSSalert(\'XSS\')"&gt;', $result );
+					$this->assertSame( '&lt;t:set attributeName=&quot;innerHTML&quot; to=&quot;XSSalert(\'XSS\')"&gt;', $result );
 					break;
 				case 'Commented-out Block':
-					$this->assertEquals( "<!--[if gte IE 4]&gt;-->\nalert('XSS');", $result );
+					$this->assertSame( "<!--[if gte IE 4]&gt;-->\nalert('XSS');", $result );
 					break;
 				case 'Cookie Manipulation':
-					$this->assertEquals( '&lt;META HTTP-EQUIV=&quot;Set-Cookie&quot; Content=&quot;USERID=alert(\'XSS\')"&gt;', $result );
+					$this->assertSame( '&lt;META HTTP-EQUIV=&quot;Set-Cookie&quot; Content=&quot;USERID=alert(\'XSS\')"&gt;', $result );
 					break;
 				case 'SSI':
-					$this->assertEquals( '&lt;!--#exec cmd=&quot;/bin/echo &#039;<!--#exec cmd="/bin/echo \'=http://ha.ckers.org/xss.js&gt;\'"-->', $result );
+					$this->assertSame( '&lt;!--#exec cmd=&quot;/bin/echo &#039;<!--#exec cmd="/bin/echo \'=http://ha.ckers.org/xss.js&gt;\'"-->', $result );
 					break;
 				case 'PHP':
-					$this->assertEquals( '&lt;? echo(&#039;alert("XSS")\'); ?&gt;', $result );
+					$this->assertSame( '&lt;? echo(&#039;alert("XSS")\'); ?&gt;', $result );
 					break;
 				case 'UTF-7 Encoding':
-					$this->assertEquals( '+ADw-SCRIPT+AD4-alert(\'XSS\');+ADw-/SCRIPT+AD4-', $result );
+					$this->assertSame( '+ADw-SCRIPT+AD4-alert(\'XSS\');+ADw-/SCRIPT+AD4-', $result );
 					break;
 				case 'Escaping JavaScript escapes':
-					$this->assertEquals( '\";alert(\'XSS\');//', $result );
+					$this->assertSame( '\";alert(\'XSS\');//', $result );
 					break;
 				case 'STYLE w/broken up JavaScript':
-					$this->assertEquals( '@im\port\'\ja\vasc\ript:alert("XSS")\';', $result );
+					$this->assertSame( '@im\port\'\ja\vasc\ript:alert("XSS")\';', $result );
 					break;
 				case 'Null Chars 2':
-					$this->assertEquals( '&amp;alert("XSS")', $result );
+					$this->assertSame( '&amp;alert("XSS")', $result );
 					break;
 				case 'No Closing Script Tag':
-					$this->assertEquals( '&lt;SCRIPT SRC=http://ha.ckers.org/xss.js', $result );
+					$this->assertSame( '&lt;SCRIPT SRC=http://ha.ckers.org/xss.js', $result );
 					break;
 				case 'Half-Open HTML/JavaScript':
-					$this->assertEquals( '&lt;IMG SRC=&quot;javascript:alert(&#039;XSS&#039;)&quot;', $result );
+					$this->assertSame( '&lt;IMG SRC=&quot;javascript:alert(&#039;XSS&#039;)&quot;', $result );
 					break;
 				case 'Double open angle brackets':
-					$this->assertEquals( '&lt;IFRAME SRC=http://ha.ckers.org/scriptlet.html &lt;', $result );
+					$this->assertSame( '&lt;IFRAME SRC=http://ha.ckers.org/scriptlet.html &lt;', $result );
 					break;
 				case 'Extraneous Open Brackets':
-					$this->assertEquals( '&lt;alert("XSS");//&lt;', $result );
+					$this->assertSame( '&lt;alert("XSS");//&lt;', $result );
 					break;
 				case 'Malformed IMG Tags':
-					$this->assertEquals( 'alert("XSS")"&gt;', $result );
+					$this->assertSame( 'alert("XSS")"&gt;', $result );
 					break;
 				case 'No Quotes/Semicolons':
-					$this->assertEquals( "a=/XSS/\nalert(a.source)", $result );
+					$this->assertSame( "a=/XSS/\nalert(a.source)", $result );
 					break;
 				case 'Evade Regex Filter 1':
-					$this->assertEquals( '" SRC="http://ha.ckers.org/xss.js"&gt;', $result );
+					$this->assertSame( '" SRC="http://ha.ckers.org/xss.js"&gt;', $result );
 					break;
 				case 'Evade Regex Filter 4':
-					$this->assertEquals( '\'" SRC="http://ha.ckers.org/xss.js"&gt;', $result );
+					$this->assertSame( '\'" SRC="http://ha.ckers.org/xss.js"&gt;', $result );
 					break;
 				case 'Evade Regex Filter 5':
-					$this->assertEquals( '` SRC="http://ha.ckers.org/xss.js"&gt;', $result );
+					$this->assertSame( '` SRC="http://ha.ckers.org/xss.js"&gt;', $result );
 					break;
 				case 'Filter Evasion 1':
-					$this->assertEquals( 'document.write("&lt;SCRI&quot;);PT SRC="http://ha.ckers.org/xss.js"&gt;', $result );
+					$this->assertSame( 'document.write("&lt;SCRI&quot;);PT SRC="http://ha.ckers.org/xss.js"&gt;', $result );
 					break;
 				case 'Filter Evasion 2':
-					$this->assertEquals( '\'&gt;" SRC="http://ha.ckers.org/xss.js"&gt;', $result );
+					$this->assertSame( '\'&gt;" SRC="http://ha.ckers.org/xss.js"&gt;', $result );
 					break;
 				default:
 					$this->fail( 'KSES failed on ' . $attack->name . ': ' . $result );
@@ -345,7 +425,7 @@ EOF;
 	public function test_wp_kses_allowed_html() {
 		global $allowedposttags, $allowedtags, $allowedentitynames;
 
-		$this->assertEquals( $allowedposttags, wp_kses_allowed_html( 'post' ) );
+		$this->assertSame( $allowedposttags, wp_kses_allowed_html( 'post' ) );
 
 		$tags = wp_kses_allowed_html( 'post' );
 
@@ -356,9 +436,9 @@ EOF;
 			$this->assertTrue( $tag['title'] );
 		}
 
-		$this->assertEquals( $allowedtags, wp_kses_allowed_html( 'data' ) );
-		$this->assertEquals( $allowedtags, wp_kses_allowed_html( '' ) );
-		$this->assertEquals( $allowedtags, wp_kses_allowed_html() );
+		$this->assertSame( $allowedtags, wp_kses_allowed_html( 'data' ) );
+		$this->assertSame( $allowedtags, wp_kses_allowed_html( '' ) );
+		$this->assertSame( $allowedtags, wp_kses_allowed_html() );
 
 		$tags = wp_kses_allowed_html( 'user_description' );
 		$this->assertTrue( $tags['a']['rel'] );
@@ -366,7 +446,7 @@ EOF;
 		$tags = wp_kses_allowed_html();
 		$this->assertFalse( isset( $tags['a']['rel'] ) );
 
-		$this->assertEquals( array(), wp_kses_allowed_html( 'strip' ) );
+		$this->assertSame( array(), wp_kses_allowed_html( 'strip' ) );
 
 		$custom_tags = array(
 			'a' => array(
@@ -378,16 +458,16 @@ EOF;
 			),
 		);
 
-		$this->assertEquals( $custom_tags, wp_kses_allowed_html( $custom_tags ) );
+		$this->assertSame( $custom_tags, wp_kses_allowed_html( $custom_tags ) );
 
 		add_filter( 'wp_kses_allowed_html', array( $this, '_wp_kses_allowed_html_filter' ), 10, 2 );
 
-		$this->assertEquals( array( 'a' => array( 'href' => true ) ), wp_kses_allowed_html( 'post' ) );
-		$this->assertEquals( array( 'a' => array( 'href' => false ) ), wp_kses_allowed_html( 'data' ) );
+		$this->assertSame( array( 'a' => array( 'href' => true ) ), wp_kses_allowed_html( 'post' ) );
+		$this->assertSame( array( 'a' => array( 'href' => false ) ), wp_kses_allowed_html( 'data' ) );
 
 		remove_filter( 'wp_kses_allowed_html', array( $this, '_wp_kses_allowed_html_filter' ) );
-		$this->assertEquals( $allowedposttags, wp_kses_allowed_html( 'post' ) );
-		$this->assertEquals( $allowedtags, wp_kses_allowed_html( 'data' ) );
+		$this->assertSame( $allowedposttags, wp_kses_allowed_html( 'post' ) );
+		$this->assertSame( $allowedtags, wp_kses_allowed_html( 'data' ) );
 	}
 
 	function test_hyphenated_tag() {
@@ -400,23 +480,23 @@ EOF;
 		$expect_stripped_string = 'Alot of hyphens.';
 
 		$expect_valid_string = '<hyphenated-tag attribute="value">Alot of hyphens.</hyphenated-tag>';
-		$this->assertEquals( $expect_stripped_string, wp_kses_post( $string ) );
-		$this->assertEquals( $expect_valid_string, wp_kses( $string, $custom_tags ) );
+		$this->assertSame( $expect_stripped_string, wp_kses_post( $string ) );
+		$this->assertSame( $expect_valid_string, wp_kses( $string, $custom_tags ) );
 	}
 
 	/**
 	 * @ticket 26290
 	 */
 	public function test_wp_kses_normalize_entities() {
-		$this->assertEquals( '&spades;', wp_kses_normalize_entities( '&spades;' ) );
-
-		$this->assertEquals( '&sup1;', wp_kses_normalize_entities( '&sup1;' ) );
-		$this->assertEquals( '&sup2;', wp_kses_normalize_entities( '&sup2;' ) );
-		$this->assertEquals( '&sup3;', wp_kses_normalize_entities( '&sup3;' ) );
-		$this->assertEquals( '&frac14;', wp_kses_normalize_entities( '&frac14;' ) );
-		$this->assertEquals( '&frac12;', wp_kses_normalize_entities( '&frac12;' ) );
-		$this->assertEquals( '&frac34;', wp_kses_normalize_entities( '&frac34;' ) );
-		$this->assertEquals( '&there4;', wp_kses_normalize_entities( '&there4;' ) );
+		$this->assertSame( '&spades;', wp_kses_normalize_entities( '&spades;' ) );
+
+		$this->assertSame( '&sup1;', wp_kses_normalize_entities( '&sup1;' ) );
+		$this->assertSame( '&sup2;', wp_kses_normalize_entities( '&sup2;' ) );
+		$this->assertSame( '&sup3;', wp_kses_normalize_entities( '&sup3;' ) );
+		$this->assertSame( '&frac14;', wp_kses_normalize_entities( '&frac14;' ) );
+		$this->assertSame( '&frac12;', wp_kses_normalize_entities( '&frac12;' ) );
+		$this->assertSame( '&frac34;', wp_kses_normalize_entities( '&frac34;' ) );
+		$this->assertSame( '&there4;', wp_kses_normalize_entities( '&there4;' ) );
 	}
 
 	/**
@@ -428,7 +508,7 @@ EOF;
 	function test_ctrl_removal( $input, $output ) {
 		global $allowedposttags;
 
-		return $this->assertEquals( $output, wp_kses( $input, $allowedposttags ) );
+		return $this->assertSame( $output, wp_kses( $input, $allowedposttags ) );
 	}
 
 	function data_ctrl_removal() {
@@ -465,7 +545,7 @@ EOF;
 	function test_slash_zero_removal( $input, $output ) {
 		global $allowedposttags;
 
-		return $this->assertEquals( $output, wp_kses( $input, $allowedposttags ) );
+		return $this->assertSame( $output, wp_kses( $input, $allowedposttags ) );
 	}
 
 	function data_slash_zero_removal() {
@@ -515,7 +595,7 @@ EOF;
 	 * @dataProvider data_hair_parse
 	 */
 	function test_hair_parse( $input, $output ) {
-		return $this->assertEquals( $output, wp_kses_hair_parse( $input ) );
+		return $this->assertSame( $output, wp_kses_hair_parse( $input ) );
 	}
 
 	function data_hair_parse() {
@@ -552,6 +632,26 @@ EOF;
 				"array[1]='z'z'z'z",
 				false,
 			),
+			// Using a digit in attribute name should work.
+			array(
+				'href="https://example.com/[shortcode attr=\'value\']" data-op3-timer-seconds="0"',
+				array( 'href="https://example.com/[shortcode attr=\'value\']" ', 'data-op3-timer-seconds="0"' ),
+			),
+			// Using an underscore in attribute name should work.
+			array(
+				'href="https://example.com/[shortcode attr=\'value\']" data-op_timer-seconds="0"',
+				array( 'href="https://example.com/[shortcode attr=\'value\']" ', 'data-op_timer-seconds="0"' ),
+			),
+			// Using a period in attribute name should work.
+			array(
+				'href="https://example.com/[shortcode attr=\'value\']" data-op.timer-seconds="0"',
+				array( 'href="https://example.com/[shortcode attr=\'value\']" ', 'data-op.timer-seconds="0"' ),
+			),
+			// Using a digit at the beginning of attribute name should return false.
+			array(
+				'href="https://example.com/[shortcode attr=\'value\']" 3data-op-timer-seconds="0"',
+				false,
+			),
 		);
 	}
 
@@ -561,7 +661,7 @@ EOF;
 	 * @dataProvider data_attr_parse
 	 */
 	function test_attr_parse( $input, $output ) {
-		return $this->assertEquals( $output, wp_kses_attr_parse( $input ) );
+		return $this->assertSame( $output, wp_kses_attr_parse( $input ) );
 	}
 
 	function data_attr_parse() {
@@ -619,7 +719,7 @@ EOF;
 	 * @dataProvider data_one_attr
 	 */
 	function test_one_attr( $element, $input, $output ) {
-		return $this->assertEquals( $output, wp_kses_one_attr( $input, $element ) );
+		return $this->assertSame( $output, wp_kses_one_attr( $input, $element ) );
 	}
 
 	function data_one_attr() {
@@ -669,6 +769,11 @@ EOF;
 				'src="mypic.jpg"',
 				'src="mypic.jpg"',
 			),
+			array(
+				'img',
+				'loading="lazy"',
+				'loading="lazy"',
+			),
 			array(
 				'img',
 				'onerror=alert(1)',
@@ -695,7 +800,7 @@ EOF;
 
 		$input = '<p>This is <bdo dir="rtl">a BDO tag</bdo>. Weird, <bdo dir="ltr">right?</bdo></p>';
 
-		$this->assertEquals( $input, wp_kses( $input, $allowedposttags ) );
+		$this->assertSame( $input, wp_kses( $input, $allowedposttags ) );
 	}
 
 	/**
@@ -706,7 +811,7 @@ EOF;
 
 		$input = '<ol reversed="reversed"><li>Item 1</li><li>Item 2</li><li>Item 3</li></ol>';
 
-		$this->assertEquals( $input, wp_kses( $input, $allowedposttags ) );
+		$this->assertSame( $input, wp_kses( $input, $allowedposttags ) );
 	}
 
 	/**
@@ -716,7 +821,7 @@ EOF;
 		$element   = 'foo';
 		$attribute = 'title="foo" class="bar"';
 
-		$this->assertEquals( "<{$element}>", wp_kses_attr( $element, $attribute, array( 'foo' => array() ), array() ) );
+		$this->assertSame( "<{$element}>", wp_kses_attr( $element, $attribute, array( 'foo' => array() ), array() ) );
 	}
 
 	/**
@@ -726,7 +831,7 @@ EOF;
 		$element   = 'foo';
 		$attribute = 'title="foo" class="bar"';
 
-		$this->assertEquals( "<{$element}>", wp_kses_attr( $element, $attribute, array( 'foo' => true ), array() ) );
+		$this->assertSame( "<{$element}>", wp_kses_attr( $element, $attribute, array( 'foo' => true ), array() ) );
 	}
 
 	/**
@@ -736,7 +841,7 @@ EOF;
 		$element   = 'foo';
 		$attribute = 'title="foo" class="bar"';
 
-		$this->assertEquals( "<{$element} title=\"foo\">", wp_kses_attr( $element, $attribute, array( 'foo' => array( 'title' => true ) ), array() ) );
+		$this->assertSame( "<{$element} title=\"foo\">", wp_kses_attr( $element, $attribute, array( 'foo' => array( 'title' => true ) ), array() ) );
 	}
 
 	/**
@@ -746,13 +851,15 @@ EOF;
 		$element   = 'foo';
 		$attribute = 'title="foo" class="bar"';
 
-		$this->assertEquals( "<{$element}>", wp_kses_attr( $element, $attribute, array( 'foo' => false ), array() ) );
+		$this->assertSame( "<{$element}>", wp_kses_attr( $element, $attribute, array( 'foo' => false ), array() ) );
 	}
 
 	/**
 	 * Testing the safecss_filter_attr() function.
 	 *
+	 * @ticket 37248
 	 * @ticket 42729
+	 * @ticket 48376
 	 * @dataProvider data_test_safecss_filter_attr
 	 *
 	 * @param string $css      A string of CSS rules.
@@ -878,6 +985,66 @@ EOF;
 				'css'      => 'columns: 6rem auto;column-count: 4;column-fill: balance;column-gap: 9px;column-rule: thick inset blue;column-span: none;column-width: 120px',
 				'expected' => 'columns: 6rem auto;column-count: 4;column-fill: balance;column-gap: 9px;column-rule: thick inset blue;column-span: none;column-width: 120px',
 			),
+			// Gradients introduced in 5.3.
+			array(
+				'css'      => 'background: linear-gradient(135deg,rgba(6,147,227,1) 0%,rgb(155,81,224) 100%)',
+				'expected' => 'background: linear-gradient(135deg,rgba(6,147,227,1) 0%,rgb(155,81,224) 100%)',
+			),
+			array(
+				'css'      => 'background: linear-gradient(135deg,rgba(6,147,227,1) ) (0%,rgb(155,81,224) 100%)',
+				'expected' => '',
+			),
+			array(
+				'css'      => 'background-image: linear-gradient(red,yellow);',
+				'expected' => 'background-image: linear-gradient(red,yellow)',
+			),
+			array(
+				'css'      => 'color: linear-gradient(red,yellow);',
+				'expected' => '',
+			),
+			array(
+				'css'      => 'background-image: linear-gradient(red,yellow); background: prop( red,yellow); width: 100px;',
+				'expected' => 'background-image: linear-gradient(red,yellow);width: 100px',
+			),
+			array(
+				'css'      => 'background: unknown-gradient(135deg,rgba(6,147,227,1) 0%,rgb(155,81,224) 100%)',
+				'expected' => '',
+			),
+			array(
+				'css'      => 'background: repeating-linear-gradient(135deg,rgba(6,147,227,1) 0%,rgb(155,81,224) 100%)',
+				'expected' => 'background: repeating-linear-gradient(135deg,rgba(6,147,227,1) 0%,rgb(155,81,224) 100%)',
+			),
+			array(
+				'css'      => 'width: 100px; height: 100px; background: linear-gradient(135deg,rgba(0,208,132,1) 0%,rgba(6,147,227,1) 100%);',
+				'expected' => 'width: 100px;height: 100px;background: linear-gradient(135deg,rgba(0,208,132,1) 0%,rgba(6,147,227,1) 100%)',
+			),
+			array(
+				'css'      => 'background: radial-gradient(#ff0, red, yellow, green, rgba(6,147,227,1), rgb(155,81,224) 90%);',
+				'expected' => 'background: radial-gradient(#ff0, red, yellow, green, rgba(6,147,227,1), rgb(155,81,224) 90%)',
+			),
+			array(
+				'css'      => 'background: radial-gradient(#ff0, red, yellow, green, rgba(6,147,227,1), rgb(155,81,224) 90%);',
+				'expected' => 'background: radial-gradient(#ff0, red, yellow, green, rgba(6,147,227,1), rgb(155,81,224) 90%)',
+			),
+			array(
+				'css'      => 'background: conic-gradient(at 0% 30%, red 10%, yellow 30%, #1e90ff 50%)',
+				'expected' => 'background: conic-gradient(at 0% 30%, red 10%, yellow 30%, #1e90ff 50%)',
+			),
+			// Expressions are not allowed.
+			array(
+				'css'      => 'height: expression( body.scrollTop + 50 + "px" )',
+				'expected' => '',
+			),
+			// RGB color values are not allowed.
+			array(
+				'css'      => 'color: rgb( 100, 100, 100 )',
+				'expected' => '',
+			),
+			// RGBA color values are not allowed.
+			array(
+				'css'      => 'color: rgb( 100, 100, 100, .4 )',
+				'expected' => '',
+			),
 		);
 	}
 
@@ -890,7 +1057,7 @@ EOF;
 		$test     = '<div data-foo="foo" data-bar="bar" datainvalid="gone" data--invaild="gone"  data-also-invaild-="gone" data-two-hyphens="remains">Pens and pencils</div>';
 		$expected = '<div data-foo="foo" data-bar="bar" data-two-hyphens="remains">Pens and pencils</div>';
 
-		$this->assertEquals( $expected, wp_kses_post( $test ) );
+		$this->assertSame( $expected, wp_kses_post( $test ) );
 	}
 
 	/**
@@ -964,7 +1131,7 @@ EOF;
 	 */
 	function data_wildcard_attribute_prefixes() {
 		return array(
-			// Ends correctly
+			// Ends correctly.
 			array( 'data-*', true ),
 
 			// Does not end with trialing `-`.
@@ -1122,4 +1289,98 @@ EOF;
 			),
 		);
 	}
+
+	/**
+	 * Testing the safecss_filter_attr() function with the safecss_filter_attr_allow_css filter.
+	 *
+	 * @ticket 37134
+	 *
+	 * @dataProvider data_test_safecss_filter_attr_filtered
+	 *
+	 * @param string $css      A string of CSS rules.
+	 * @param string $expected Expected string of CSS rules.
+	 */
+	public function test_safecss_filter_attr_filtered( $css, $expected ) {
+		add_filter( 'safecss_filter_attr_allow_css', '__return_true' );
+		$this->assertSame( $expected, safecss_filter_attr( $css ) );
+		remove_filter( 'safecss_filter_attr_allow_css', '__return_true' );
+	}
+
+	/**
+	 * Data Provider for test_safecss_filter_attr_filtered().
+	 *
+	 * @return array {
+	 *     @type array {
+	 *         @string string $css      A string of CSS rules.
+	 *         @string string $expected Expected string of CSS rules.
+	 *     }
+	 * }
+	 */
+	public function data_test_safecss_filter_attr_filtered() {
+		return array(
+
+			// A single attribute name, with a single value.
+			array(
+				'css'      => 'margin-top: 2px',
+				'expected' => 'margin-top: 2px',
+			),
+			// Backslash \ can be allowed with the 'safecss_filter_attr_allow_css' filter.
+			array(
+				'css'      => 'margin-top: \2px',
+				'expected' => 'margin-top: \2px',
+			),
+			// Curly bracket } can be allowed with the 'safecss_filter_attr_allow_css' filter.
+			array(
+				'css'      => 'margin-bottom: 2px}',
+				'expected' => 'margin-bottom: 2px}',
+			),
+			// Parenthesis ) can be allowed with the 'safecss_filter_attr_allow_css' filter.
+			array(
+				'css'      => 'margin-bottom: 2px)',
+				'expected' => 'margin-bottom: 2px)',
+			),
+			// Ampersand & can be allowed with the 'safecss_filter_attr_allow_css' filter.
+			array(
+				'css'      => 'margin-bottom: 2px&',
+				'expected' => 'margin-bottom: 2px&',
+			),
+			// Expressions can be allowed with the 'safecss_filter_attr_allow_css' filter.
+			array(
+				'css'      => 'height: expression( body.scrollTop + 50 + "px" )',
+				'expected' => 'height: expression( body.scrollTop + 50 + "px" )',
+			),
+			// RGB color values can be allowed with the 'safecss_filter_attr_allow_css' filter.
+			array(
+				'css'      => 'color: rgb( 100, 100, 100 )',
+				'expected' => 'color: rgb( 100, 100, 100 )',
+			),
+			// RGBA color values can be allowed with the 'safecss_filter_attr_allow_css' filter.
+			array(
+				'css'      => 'color: rgb( 100, 100, 100, .4 )',
+				'expected' => 'color: rgb( 100, 100, 100, .4 )',
+			),
+		);
+	}
+
+	/**
+	 * Test filtering a standard img tag.
+	 *
+	 * @ticket 50731
+	 */
+	function test_wp_kses_img_tag_standard_attributes() {
+		$html = array(
+			'<img',
+			'loading="lazy"',
+			'src="https://example.com/img.jpg"',
+			'width="1000"',
+			'height="1000"',
+			'alt=""',
+			'class="wp-image-1000"',
+			'/>',
+		);
+
+		$html = implode( ' ', $html );
+
+		$this->assertSame( $html, wp_kses_post( $html ) );
+	}
 }
diff --git a/tests/l10n.php b/tests/l10n.php
index 7c8e492fc5..d62ca1f532 100644
--- a/tests/l10n.php
+++ b/tests/l10n.php
@@ -23,9 +23,9 @@ class Tests_L10n extends WP_UnitTestCase {
 		$nooped_plural = _n_noop( '%s post', '%s posts', $text_domain );
 
 		$this->assertNotEmpty( $nooped_plural['domain'] );
-		$this->assertEquals( '%s posts', translate_nooped_plural( $nooped_plural, 0, $text_domain ) );
-		$this->assertEquals( '%s post', translate_nooped_plural( $nooped_plural, 1, $text_domain ) );
-		$this->assertEquals( '%s posts', translate_nooped_plural( $nooped_plural, 2, $text_domain ) );
+		$this->assertSame( '%s posts', translate_nooped_plural( $nooped_plural, 0, $text_domain ) );
+		$this->assertSame( '%s post', translate_nooped_plural( $nooped_plural, 1, $text_domain ) );
+		$this->assertSame( '%s posts', translate_nooped_plural( $nooped_plural, 2, $text_domain ) );
 	}
 
 	/**
@@ -37,18 +37,18 @@ class Tests_L10n extends WP_UnitTestCase {
 
 		$this->assertNotEmpty( $nooped_plural['domain'] );
 		$this->assertNotEmpty( $nooped_plural['context'] );
-		$this->assertEquals( '%s posts', translate_nooped_plural( $nooped_plural, 0, $text_domain ) );
-		$this->assertEquals( '%s post', translate_nooped_plural( $nooped_plural, 1, $text_domain ) );
-		$this->assertEquals( '%s posts', translate_nooped_plural( $nooped_plural, 2, $text_domain ) );
+		$this->assertSame( '%s posts', translate_nooped_plural( $nooped_plural, 0, $text_domain ) );
+		$this->assertSame( '%s post', translate_nooped_plural( $nooped_plural, 1, $text_domain ) );
+		$this->assertSame( '%s posts', translate_nooped_plural( $nooped_plural, 2, $text_domain ) );
 	}
 
 	/**
 	 * @ticket 35073
 	 */
 	function test_before_last_bar() {
-		$this->assertEquals( 'no-bar-at-all', before_last_bar( 'no-bar-at-all' ) );
-		$this->assertEquals( 'before-last-bar', before_last_bar( 'before-last-bar|after-bar' ) );
-		$this->assertEquals( 'first-before-bar|second-before-bar', before_last_bar( 'first-before-bar|second-before-bar|after-last-bar' ) );
+		$this->assertSame( 'no-bar-at-all', before_last_bar( 'no-bar-at-all' ) );
+		$this->assertSame( 'before-last-bar', before_last_bar( 'before-last-bar|after-bar' ) );
+		$this->assertSame( 'first-before-bar|second-before-bar', before_last_bar( 'first-before-bar|second-before-bar|after-last-bar' ) );
 	}
 
 	/**
@@ -62,7 +62,7 @@ class Tests_L10n extends WP_UnitTestCase {
 		$this->assertEmpty( $array );
 
 		$array = get_available_languages( DIR_TESTDATA . '/languages/' );
-		$this->assertEquals( array( 'de_DE', 'en_GB', 'es_ES', 'ja_JP' ), $array );
+		$this->assertSame( array( 'de_DE', 'en_GB', 'es_ES', 'ja_JP' ), $array );
 	}
 
 	/**
@@ -72,19 +72,19 @@ class Tests_L10n extends WP_UnitTestCase {
 		$installed_translations = wp_get_installed_translations( 'core' );
 		$this->assertInternalType( 'array', $installed_translations );
 		$textdomains_expected = array( 'admin', 'admin-network', 'continents-cities', 'default' );
-		$this->assertEqualSets( $textdomains_expected, array_keys( $installed_translations ) );
+		$this->assertSameSets( $textdomains_expected, array_keys( $installed_translations ) );
 
 		$this->assertNotEmpty( $installed_translations['default']['en_GB'] );
 		$data_en_gb = $installed_translations['default']['en_GB'];
-		$this->assertEquals( '2016-10-26 00:01+0200', $data_en_gb['PO-Revision-Date'] );
-		$this->assertEquals( 'Development (4.4.x)', $data_en_gb['Project-Id-Version'] );
-		$this->assertEquals( 'Poedit 1.8.10', $data_en_gb['X-Generator'] );
+		$this->assertSame( '2016-10-26 00:01+0200', $data_en_gb['PO-Revision-Date'] );
+		$this->assertSame( 'Development (4.4.x)', $data_en_gb['Project-Id-Version'] );
+		$this->assertSame( 'Poedit 1.8.10', $data_en_gb['X-Generator'] );
 
 		$this->assertNotEmpty( $installed_translations['admin']['es_ES'] );
 		$data_es_es = $installed_translations['admin']['es_ES'];
-		$this->assertEquals( '2016-10-25 18:29+0200', $data_es_es['PO-Revision-Date'] );
-		$this->assertEquals( 'Administration', $data_es_es['Project-Id-Version'] );
-		$this->assertEquals( 'Poedit 1.8.10', $data_es_es['X-Generator'] );
+		$this->assertSame( '2016-10-25 18:29+0200', $data_es_es['PO-Revision-Date'] );
+		$this->assertSame( 'Administration', $data_es_es['Project-Id-Version'] );
+		$this->assertSame( 'Poedit 1.8.10', $data_es_es['X-Generator'] );
 	}
 
 	/**
diff --git a/tests/l10n/loadScriptTextdomain.php b/tests/l10n/loadScriptTextdomain.php
index 310cc72bea..9f4e1012ba 100644
--- a/tests/l10n/loadScriptTextdomain.php
+++ b/tests/l10n/loadScriptTextdomain.php
@@ -32,18 +32,18 @@ class Tests_L10n_loadScriptTextdomain extends WP_UnitTestCase {
 		$json_translations = file_get_contents( DIR_TESTDATA . '/languages/en_US-813e104eb47e13dd4cc5af844c618754.json' );
 
 		wp_enqueue_script( 'test-example-root', '/wp-includes/js/script.js', array(), null );
-		$this->assertEquals( $json_translations, load_script_textdomain( 'test-example-root', 'default', DIR_TESTDATA . '/languages' ) );
+		$this->assertSame( $json_translations, load_script_textdomain( 'test-example-root', 'default', DIR_TESTDATA . '/languages' ) );
 
 		// Assets on a CDN.
 		add_filter( 'load_script_textdomain_relative_path', array( $this, 'relative_path_from_cdn' ), 10, 2 );
 		wp_enqueue_script( 'test-example-cdn', 'https://my-cdn.com/wordpress/wp-includes/js/script.js', array(), null );
-		$this->assertEquals( $json_translations, load_script_textdomain( 'test-example-cdn', 'default', DIR_TESTDATA . '/languages' ) );
+		$this->assertSame( $json_translations, load_script_textdomain( 'test-example-cdn', 'default', DIR_TESTDATA . '/languages' ) );
 		remove_filter( 'load_script_textdomain_relative_path', array( $this, 'relative_path_from_cdn' ) );
 
 		// Test for WordPress installs in a subdirectory.
 		add_filter( 'site_url', array( $this, 'site_url_subdirectory' ) );
 		wp_enqueue_script( 'test-example-subdir', '/wp/wp-includes/js/script.js', array(), null );
-		$this->assertEquals( $json_translations, load_script_textdomain( 'test-example-subdir', 'default', DIR_TESTDATA . '/languages' ) );
+		$this->assertSame( $json_translations, load_script_textdomain( 'test-example-subdir', 'default', DIR_TESTDATA . '/languages' ) );
 		remove_filter( 'site_url', array( $this, 'site_url_subdirectory' ) );
 	}
 
@@ -55,7 +55,7 @@ class Tests_L10n_loadScriptTextdomain extends WP_UnitTestCase {
 
 		add_filter( 'plugins_url', array( $this, 'plugins_url_custom_domain' ) );
 		wp_enqueue_script( 'plugin-example-1', 'https://plugins.example.com/my-plugin/js/script.js', array(), null );
-		$this->assertEquals( $json_translations, load_script_textdomain( 'plugin-example-1', 'internationalized-plugin', DIR_TESTDATA . '/languages' ) );
+		$this->assertSame( $json_translations, load_script_textdomain( 'plugin-example-1', 'internationalized-plugin', DIR_TESTDATA . '/languages' ) );
 		remove_filter( 'plugins_url', array( $this, 'plugins_url_custom_domain' ) );
 	}
 
@@ -67,7 +67,7 @@ class Tests_L10n_loadScriptTextdomain extends WP_UnitTestCase {
 
 		add_filter( 'content_url', array( $this, 'content_url_custom_domain_with_no_path' ) );
 		wp_enqueue_script( 'plugin-example-2', 'https://content.example.com/plugins/my-plugin/js/script.js', array(), null );
-		$this->assertEquals( $json_translations, load_script_textdomain( 'plugin-example-2', 'internationalized-plugin', DIR_TESTDATA . '/languages' ) );
+		$this->assertSame( $json_translations, load_script_textdomain( 'plugin-example-2', 'internationalized-plugin', DIR_TESTDATA . '/languages' ) );
 		remove_filter( 'content_url', array( $this, 'content_url_custom_domain_with_no_path' ) );
 	}
 }
diff --git a/tests/l10n/loadTextdomainJustInTime.php b/tests/l10n/loadTextdomainJustInTime.php
index ea35bbfcfd..e0aa3df644 100644
--- a/tests/l10n/loadTextdomainJustInTime.php
+++ b/tests/l10n/loadTextdomainJustInTime.php
@@ -90,7 +90,7 @@ class Tests_L10n_loadTextdomainJustInTime extends WP_UnitTestCase {
 
 		switch_theme( 'internationalized-theme' );
 
-		include_once get_stylesheet_directory() . '/functions.php';
+		require_once get_stylesheet_directory() . '/functions.php';
 
 		$is_textdomain_loaded_before = is_textdomain_loaded( 'internationalized-theme' );
 		$expected_output             = i18n_theme_test();
diff --git a/tests/l10n/localeSwitcher.php b/tests/l10n/localeSwitcher.php
index 0621092165..ec86fcbca4 100644
--- a/tests/l10n/localeSwitcher.php
+++ b/tests/l10n/localeSwitcher.php
@@ -91,7 +91,7 @@ class Tests_Locale_Switcher extends WP_UnitTestCase {
 		// Cleanup.
 		restore_previous_locale();
 
-		$this->assertEqualSetsWithIndex( $expected, $wp_locale_de_de->number_format );
+		$this->assertSameSetsWithIndex( $expected, $wp_locale_de_de->number_format );
 	}
 
 	public function test_switch_to_locale_en_US() {
@@ -196,7 +196,7 @@ class Tests_Locale_Switcher extends WP_UnitTestCase {
 		switch_to_locale( 'de_DE' );
 		restore_previous_locale();
 
-		$this->assertEqualSetsWithIndex( $expected, $wp_locale->number_format );
+		$this->assertSameSetsWithIndex( $expected, $wp_locale->number_format );
 	}
 
 	public function test_restore_current_locale_without_switching() {
diff --git a/tests/link.php b/tests/link.php
index 33fe4fce67..62f55fbd7d 100644
--- a/tests/link.php
+++ b/tests/link.php
@@ -21,7 +21,7 @@ class Tests_Link extends WP_UnitTestCase {
 		$paged                  = get_pagenum_link( 2 );
 
 		remove_filter( 'home_url', array( $this, '_get_pagenum_link_cb' ) );
-		$this->assertEquals( $paged, home_url( '/WooHoo/page/2/' ) );
+		$this->assertSame( $paged, home_url( '/WooHoo/page/2/' ) );
 
 		$_SERVER['REQUEST_URI'] = $old_req_uri;
 	}
@@ -30,56 +30,56 @@ class Tests_Link extends WP_UnitTestCase {
 		$post_id  = self::factory()->post->create();
 		$post_id2 = self::factory()->post->create();
 
-		// Basic case
-		$this->assertEquals( get_permalink( $post_id ), wp_get_shortlink( $post_id, 'post' ) );
+		// Basic case.
+		$this->assertSame( get_permalink( $post_id ), wp_get_shortlink( $post_id, 'post' ) );
 
 		unset( $GLOBALS['post'] );
 
-		// Global post is not set
-		$this->assertEquals( '', wp_get_shortlink( 0, 'post' ) );
-		$this->assertEquals( '', wp_get_shortlink( 0 ) );
-		$this->assertEquals( '', wp_get_shortlink() );
+		// Global post is not set.
+		$this->assertSame( '', wp_get_shortlink( 0, 'post' ) );
+		$this->assertSame( '', wp_get_shortlink( 0 ) );
+		$this->assertSame( '', wp_get_shortlink() );
 
 		$GLOBALS['post'] = get_post( $post_id );
 
-		// Global post is set
-		$this->assertEquals( get_permalink( $post_id ), wp_get_shortlink( 0, 'post' ) );
-		$this->assertEquals( get_permalink( $post_id ), wp_get_shortlink( 0 ) );
-		$this->assertEquals( get_permalink( $post_id ), wp_get_shortlink() );
+		// Global post is set.
+		$this->assertSame( get_permalink( $post_id ), wp_get_shortlink( 0, 'post' ) );
+		$this->assertSame( get_permalink( $post_id ), wp_get_shortlink( 0 ) );
+		$this->assertSame( get_permalink( $post_id ), wp_get_shortlink() );
 
-		// Not the global post
-		$this->assertEquals( get_permalink( $post_id2 ), wp_get_shortlink( $post_id2, 'post' ) );
+		// Not the global post.
+		$this->assertSame( get_permalink( $post_id2 ), wp_get_shortlink( $post_id2, 'post' ) );
 
 		unset( $GLOBALS['post'] );
 
-		// Global post is not set, once again
-		$this->assertEquals( '', wp_get_shortlink( 0, 'post' ) );
-		$this->assertEquals( '', wp_get_shortlink( 0 ) );
-		$this->assertEquals( '', wp_get_shortlink() );
+		// Global post is not set, once again.
+		$this->assertSame( '', wp_get_shortlink( 0, 'post' ) );
+		$this->assertSame( '', wp_get_shortlink( 0 ) );
+		$this->assertSame( '', wp_get_shortlink() );
 
 		$this->set_permalink_structure( '/%year%/%monthnum%/%day%/%postname%/' );
 
 		// With a permalink structure set, get_permalink() will no longer match.
 		$this->assertNotEquals( get_permalink( $post_id ), wp_get_shortlink( $post_id, 'post' ) );
-		$this->assertEquals( home_url( '?p=' . $post_id ), wp_get_shortlink( $post_id, 'post' ) );
+		$this->assertSame( home_url( '?p=' . $post_id ), wp_get_shortlink( $post_id, 'post' ) );
 
-		// Global post and permalink structure are set
+		// Global post and permalink structure are set.
 		$GLOBALS['post'] = get_post( $post_id );
-		$this->assertEquals( home_url( '?p=' . $post_id ), wp_get_shortlink( 0, 'post' ) );
-		$this->assertEquals( home_url( '?p=' . $post_id ), wp_get_shortlink( 0 ) );
-		$this->assertEquals( home_url( '?p=' . $post_id ), wp_get_shortlink() );
+		$this->assertSame( home_url( '?p=' . $post_id ), wp_get_shortlink( 0, 'post' ) );
+		$this->assertSame( home_url( '?p=' . $post_id ), wp_get_shortlink( 0 ) );
+		$this->assertSame( home_url( '?p=' . $post_id ), wp_get_shortlink() );
 	}
 
 	function test_wp_get_shortlink_with_page() {
 		$post_id = self::factory()->post->create( array( 'post_type' => 'page' ) );
 
-		// Basic case
+		// Basic case.
 		// Don't test against get_permalink() since it uses ?page_id= for pages.
-		$this->assertEquals( home_url( '?p=' . $post_id ), wp_get_shortlink( $post_id, 'post' ) );
+		$this->assertSame( home_url( '?p=' . $post_id ), wp_get_shortlink( $post_id, 'post' ) );
 
 		$this->set_permalink_structure( '/%year%/%monthnum%/%day%/%postname%/' );
 
-		$this->assertEquals( home_url( '?p=' . $post_id ), wp_get_shortlink( $post_id, 'post' ) );
+		$this->assertSame( home_url( '?p=' . $post_id ), wp_get_shortlink( $post_id, 'post' ) );
 	}
 
 	/**
@@ -90,11 +90,11 @@ class Tests_Link extends WP_UnitTestCase {
 		update_option( 'show_on_front', 'page' );
 		update_option( 'page_on_front', $post_id );
 
-		$this->assertEquals( home_url( '/' ), wp_get_shortlink( $post_id, 'post' ) );
+		$this->assertSame( home_url( '/' ), wp_get_shortlink( $post_id, 'post' ) );
 
 		$this->set_permalink_structure( '/%year%/%monthnum%/%day%/%postname%/' );
 
-		$this->assertEquals( home_url( '/' ), wp_get_shortlink( $post_id, 'post' ) );
+		$this->assertSame( home_url( '/' ), wp_get_shortlink( $post_id, 'post' ) );
 	}
 
 	/**
@@ -114,7 +114,7 @@ class Tests_Link extends WP_UnitTestCase {
 
 		$non_pretty_permalink = add_query_arg( 'p', $p, trailingslashit( home_url() ) );
 
-		$this->assertEquals( $non_pretty_permalink, get_permalink( $p ) );
+		$this->assertSame( $non_pretty_permalink, get_permalink( $p ) );
 	}
 
 	/**
@@ -143,7 +143,7 @@ class Tests_Link extends WP_UnitTestCase {
 			trailingslashit( home_url() )
 		);
 
-		$this->assertEquals( $non_pretty_permalink, get_permalink( $p ) );
+		$this->assertSame( $non_pretty_permalink, get_permalink( $p ) );
 	}
 
 	/**
diff --git a/tests/link/getAdjacentPost.php b/tests/link/getAdjacentPost.php
index 649d1547f4..2954732ef2 100644
--- a/tests/link/getAdjacentPost.php
+++ b/tests/link/getAdjacentPost.php
@@ -10,7 +10,7 @@ class Tests_Link_GetAdjacentPost extends WP_UnitTestCase {
 	 * @ticket 17807
 	 */
 	public function test_get_adjacent_post() {
-		// Need some sample posts to test adjacency
+		// Need some sample posts to test adjacency.
 		$post_one = self::factory()->post->create_and_get(
 			array(
 				'post_title' => 'First',
@@ -39,14 +39,14 @@ class Tests_Link_GetAdjacentPost extends WP_UnitTestCase {
 			)
 		);
 
-		// Assign some terms
+		// Assign some terms.
 		wp_set_object_terms( $post_one->ID, 'WordPress', 'category', false );
 		wp_set_object_terms( $post_three->ID, 'WordPress', 'category', false );
 
 		wp_set_object_terms( $post_two->ID, 'plugins', 'post_tag', false );
 		wp_set_object_terms( $post_four->ID, 'plugins', 'post_tag', false );
 
-		// Test normal post adjacency
+		// Test normal post adjacency.
 		$this->go_to( get_permalink( $post_two->ID ) );
 
 		$this->assertEquals( $post_one, get_adjacent_post( false, '', true ) );
@@ -55,31 +55,31 @@ class Tests_Link_GetAdjacentPost extends WP_UnitTestCase {
 		$this->assertNotEquals( $post_two, get_adjacent_post( false, '', true ) );
 		$this->assertNotEquals( $post_two, get_adjacent_post( false, '', false ) );
 
-		// Test category adjacency
+		// Test category adjacency.
 		$this->go_to( get_permalink( $post_one->ID ) );
 
-		$this->assertEquals( '', get_adjacent_post( true, '', true, 'category' ) );
+		$this->assertSame( '', get_adjacent_post( true, '', true, 'category' ) );
 		$this->assertEquals( $post_three, get_adjacent_post( true, '', false, 'category' ) );
 
-		// Test tag adjacency
+		// Test tag adjacency.
 		$this->go_to( get_permalink( $post_two->ID ) );
 
-		$this->assertEquals( '', get_adjacent_post( true, '', true, 'post_tag' ) );
+		$this->assertSame( '', get_adjacent_post( true, '', true, 'post_tag' ) );
 		$this->assertEquals( $post_four, get_adjacent_post( true, '', false, 'post_tag' ) );
 
-		// Test normal boundary post
+		// Test normal boundary post.
 		$this->go_to( get_permalink( $post_two->ID ) );
 
 		$this->assertEquals( array( $post_one ), get_boundary_post( false, '', true ) );
 		$this->assertEquals( array( $post_four ), get_boundary_post( false, '', false ) );
 
-		// Test category boundary post
+		// Test category boundary post.
 		$this->go_to( get_permalink( $post_one->ID ) );
 
 		$this->assertEquals( array( $post_one ), get_boundary_post( true, '', true, 'category' ) );
 		$this->assertEquals( array( $post_three ), get_boundary_post( true, '', false, 'category' ) );
 
-		// Test tag boundary post
+		// Test tag boundary post.
 		$this->go_to( get_permalink( $post_two->ID ) );
 
 		$this->assertEquals( array( $post_two ), get_boundary_post( true, '', true, 'post_tag' ) );
@@ -144,7 +144,7 @@ class Tests_Link_GetAdjacentPost extends WP_UnitTestCase {
 			)
 		);
 
-		// First post
+		// First post.
 		$this->go_to( get_permalink( $one ) );
 		$this->assertEquals( $two, get_adjacent_post( false, array(), false ) );
 		$this->assertEquals( $three, get_adjacent_post( true, array(), false ) );
@@ -152,7 +152,7 @@ class Tests_Link_GetAdjacentPost extends WP_UnitTestCase {
 		$this->assertEquals( $four, get_adjacent_post( true, array( $exclude ), false ) );
 		$this->assertEmpty( get_adjacent_post( false, array(), true ) );
 
-		// Fourth post
+		// Fourth post.
 		$this->go_to( get_permalink( $four ) );
 		$this->assertEquals( $five, get_adjacent_post( false, array(), false ) );
 		$this->assertEquals( $five, get_adjacent_post( true, array(), false ) );
@@ -164,7 +164,7 @@ class Tests_Link_GetAdjacentPost extends WP_UnitTestCase {
 		$this->assertEquals( $two, get_adjacent_post( false, array( $exclude ), true ) );
 		$this->assertEmpty( get_adjacent_post( true, array( $exclude ), true ) );
 
-		// Last post
+		// Last post.
 		$this->go_to( get_permalink( $five ) );
 		$this->assertEquals( $four, get_adjacent_post( false, array(), true ) );
 		$this->assertEquals( $four, get_adjacent_post( true, array(), true ) );
@@ -204,7 +204,7 @@ class Tests_Link_GetAdjacentPost extends WP_UnitTestCase {
 		}
 
 		// Should skip $p2, which belongs to $t.
-		$this->assertEquals( $p3, $found->ID );
+		$this->assertSame( $p3, $found->ID );
 	}
 
 	/**
@@ -241,7 +241,7 @@ class Tests_Link_GetAdjacentPost extends WP_UnitTestCase {
 		}
 
 		// Should skip $p2, which belongs to $t.
-		$this->assertEquals( $p3, $found->ID );
+		$this->assertSame( $p3, $found->ID );
 	}
 
 	/**
diff --git a/tests/link/getAdjacentPostLink.php b/tests/link/getAdjacentPostLink.php
index acaec3973b..6f5d5168aa 100644
--- a/tests/link/getAdjacentPostLink.php
+++ b/tests/link/getAdjacentPostLink.php
@@ -48,7 +48,7 @@ class Tests_Link_GetAdjacentPostLink extends WP_UnitTestCase {
 			)
 		);
 
-		//set current post (has 2 on each end)
+		// Set current post (has 2 on each end).
 		global $GLOBALS;
 		$GLOBALS['post'] = get_post( $this->post_ids[2] );
 	}
diff --git a/tests/link/getDashboardUrl.php b/tests/link/getDashboardUrl.php
index 7189b598e3..be051b3027 100644
--- a/tests/link/getDashboardUrl.php
+++ b/tests/link/getDashboardUrl.php
@@ -22,7 +22,7 @@ class Tests_Link_GetDashboardUrl extends WP_UnitTestCase {
 	 * @ticket 39065
 	 */
 	public function test_get_dashboard_url_for_current_site_user() {
-		$this->assertEquals( admin_url(), get_dashboard_url( self::$user_id ) );
+		$this->assertSame( admin_url(), get_dashboard_url( self::$user_id ) );
 	}
 
 	/**
@@ -33,7 +33,7 @@ class Tests_Link_GetDashboardUrl extends WP_UnitTestCase {
 
 		$expected = is_multisite() ? user_admin_url() : admin_url();
 
-		$this->assertEquals( $expected, get_dashboard_url( self::$user_id ) );
+		$this->assertSame( $expected, get_dashboard_url( self::$user_id ) );
 	}
 
 	/**
@@ -50,7 +50,7 @@ class Tests_Link_GetDashboardUrl extends WP_UnitTestCase {
 
 		revoke_super_admin( self::$user_id );
 
-		$this->assertEquals( $expected, $result );
+		$this->assertSame( $expected, $result );
 	}
 
 	/**
@@ -68,8 +68,8 @@ class Tests_Link_GetDashboardUrl extends WP_UnitTestCase {
 		remove_user_from_blog( self::$user_id, $site_id );
 		add_user_to_blog( get_current_blog_id(), self::$user_id, 'administrator' );
 
-		wpmu_delete_blog( $site_id, true );
+		wp_delete_site( $site_id );
 
-		$this->assertEquals( $expected, $result );
+		$this->assertSame( $expected, $result );
 	}
 }
diff --git a/tests/link/getPostCommentsFeedLink.php b/tests/link/getPostCommentsFeedLink.php
index e96aa97af6..c905ff08cf 100644
--- a/tests/link/getPostCommentsFeedLink.php
+++ b/tests/link/getPostCommentsFeedLink.php
@@ -16,7 +16,7 @@ class Tests_Link_GetPostCommentsFeedLink extends WP_UnitTestCase {
 			home_url( '/' )
 		);
 
-		$this->assertEquals( $expected, $link );
+		$this->assertSame( $expected, $link );
 	}
 
 	public function test_post_pretty_link() {
@@ -27,7 +27,7 @@ class Tests_Link_GetPostCommentsFeedLink extends WP_UnitTestCase {
 		$link     = get_post_comments_feed_link( $post_id );
 		$expected = get_permalink( $post_id ) . 'feed/';
 
-		$this->assertEquals( $expected, $link );
+		$this->assertSame( $expected, $link );
 	}
 
 	public function test_attachment_link() {
@@ -50,7 +50,7 @@ class Tests_Link_GetPostCommentsFeedLink extends WP_UnitTestCase {
 			home_url( '/' )
 		);
 
-		$this->assertEquals( $expected, $link );
+		$this->assertSame( $expected, $link );
 	}
 
 	public function test_attachment_pretty_link() {
@@ -76,7 +76,7 @@ class Tests_Link_GetPostCommentsFeedLink extends WP_UnitTestCase {
 		$link     = get_post_comments_feed_link( $attachment_id );
 		$expected = get_permalink( $post_id ) . 'burrito/feed/';
 
-		$this->assertEquals( $expected, $link );
+		$this->assertSame( $expected, $link );
 	}
 
 	public function test_attachment_no_name_pretty_link() {
@@ -95,7 +95,7 @@ class Tests_Link_GetPostCommentsFeedLink extends WP_UnitTestCase {
 		$link     = get_post_comments_feed_link( $attachment_id );
 		$expected = get_permalink( $post_id ) . 'attachment/' . $attachment_id . '/feed/';
 
-		$this->assertEquals( $expected, $link );
+		$this->assertSame( $expected, $link );
 	}
 
 	public function test_unattached_link() {
@@ -117,7 +117,7 @@ class Tests_Link_GetPostCommentsFeedLink extends WP_UnitTestCase {
 			home_url( '/' )
 		);
 
-		$this->assertEquals( $expected, $link );
+		$this->assertSame( $expected, $link );
 	}
 
 	public function test_unattached_pretty_link() {
@@ -135,6 +135,6 @@ class Tests_Link_GetPostCommentsFeedLink extends WP_UnitTestCase {
 		$link     = get_post_comments_feed_link( $attachment_id );
 		$expected = add_query_arg( 'attachment_id', $attachment_id, home_url( '/feed/' ) );
 
-		$this->assertEquals( $expected, $link );
+		$this->assertSame( $expected, $link );
 	}
 }
diff --git a/tests/link/getPreviewPostLink.php b/tests/link/getPreviewPostLink.php
index 79ea850af2..a689cb31f3 100644
--- a/tests/link/getPreviewPostLink.php
+++ b/tests/link/getPreviewPostLink.php
@@ -8,7 +8,7 @@ class Tests_Link_GetPreviewPostLink extends WP_UnitTestCase {
 	public function test_get_preview_post_link() {
 		$post = self::factory()->post->create();
 
-		$this->assertEquals( add_query_arg( 'preview', 'true', get_permalink( $post ) ), get_preview_post_link( $post ) );
+		$this->assertSame( add_query_arg( 'preview', 'true', get_permalink( $post ) ), get_preview_post_link( $post ) );
 	}
 
 	public function test_get_preview_post_link_should_add_additional_query_vars() {
@@ -23,7 +23,7 @@ class Tests_Link_GetPreviewPostLink extends WP_UnitTestCase {
 			get_permalink( $post )
 		);
 
-		$this->assertEquals(
+		$this->assertSame(
 			$expected,
 			get_preview_post_link(
 				$post,
@@ -40,7 +40,7 @@ class Tests_Link_GetPreviewPostLink extends WP_UnitTestCase {
 
 		$expected = 'https://google.com/?foo=bar&bar=baz&preview=true';
 
-		$this->assertEquals(
+		$this->assertSame(
 			$expected,
 			get_preview_post_link(
 				$post,
@@ -64,7 +64,7 @@ class Tests_Link_GetPreviewPostLink extends WP_UnitTestCase {
 
 		$GLOBALS['post'] = $post;
 
-		$this->assertEquals( add_query_arg( 'preview', 'true', get_permalink( $post ) ), get_preview_post_link() );
+		$this->assertSame( add_query_arg( 'preview', 'true', get_permalink( $post ) ), get_preview_post_link() );
 	}
 
 	public function test_get_preview_post_link_should_return_empty_string_for_non_viewable_post_type() {
diff --git a/tests/link/getPreviousCommentsLink.php b/tests/link/getPreviousCommentsLink.php
index ff4c088dea..6872f90e89 100644
--- a/tests/link/getPreviousCommentsLink.php
+++ b/tests/link/getPreviousCommentsLink.php
@@ -28,10 +28,10 @@ class Tests_Link_GetPreviousCommentsLink extends WP_UnitTestCase {
 		$cpage = get_query_var( 'cpage' );
 		set_query_var( 'cpage', '' );
 
-		$link = get_previous_comments_link( 'Next', 5 );
+		$link = get_previous_comments_link( 'Next' );
 
 		// Technically, it returns null here.
-		$this->assertEquals( '', $link );
+		$this->assertNull( $link );
 
 		set_query_var( 'cpage', $cpage );
 	}
diff --git a/tests/link/getThePrivacyPolicyLink.php b/tests/link/getThePrivacyPolicyLink.php
index 3543868831..15f6e6ccbe 100644
--- a/tests/link/getThePrivacyPolicyLink.php
+++ b/tests/link/getThePrivacyPolicyLink.php
@@ -12,7 +12,7 @@
  *
  * @group link
  * @group privacy
- * @covers get_the_privacy_policy_link
+ * @covers ::get_the_privacy_policy_link
  *
  * @since 4.9.6
  */
diff --git a/tests/link/themeFile.php b/tests/link/themeFile.php
index 9497b71e14..3e00780a64 100644
--- a/tests/link/themeFile.php
+++ b/tests/link/themeFile.php
@@ -5,22 +5,40 @@
 class Test_Theme_File extends WP_UnitTestCase {
 
 	public static function wpSetUpBeforeClass( WP_UnitTest_Factory $factory ) {
-		if ( ! function_exists( 'symlink' ) ) {
-			self::markTestSkipped( 'symlink() is not available.' );
-		}
-		// phpcs:ignore WordPress.PHP.NoSilencedErrors.Discouraged
-		if ( ! @symlink( DIR_TESTDATA . '/theme-file-parent', WP_CONTENT_DIR . '/themes/theme-file-parent' ) ) {
-			self::markTestSkipped( 'Could not create parent symlink.' );
-		}
-		// phpcs:ignore WordPress.PHP.NoSilencedErrors.Discouraged
-		if ( ! @symlink( DIR_TESTDATA . '/theme-file-child', WP_CONTENT_DIR . '/themes/theme-file-child' ) ) {
-			self::markTestSkipped( 'Could not create child symlink.' );
+		$themes = array(
+			'theme-file-parent',
+			'theme-file-child',
+		);
+
+		// Copy themes from tests/phpunit/data to wp-content/themes.
+		foreach ( $themes as $theme ) {
+			$source_dir = DIR_TESTDATA . '/' . $theme;
+			$dest_dir   = WP_CONTENT_DIR . '/themes/' . $theme;
+
+			mkdir( $dest_dir );
+
+			foreach ( glob( $source_dir . '/*.*' ) as $theme_file ) {
+				copy( $theme_file, $dest_dir . '/' . basename( $theme_file ) );
+			}
 		}
 	}
 
 	public static function wpTearDownAfterClass() {
-		unlink( WP_CONTENT_DIR . '/themes/theme-file-parent' );
-		unlink( WP_CONTENT_DIR . '/themes/theme-file-child' );
+		$themes = array(
+			'theme-file-parent',
+			'theme-file-child',
+		);
+
+		// Remove previously copied themes from wp-content/themes.
+		foreach ( $themes as $theme ) {
+			$dest_dir = WP_CONTENT_DIR . '/themes/' . $theme;
+
+			foreach ( glob( $dest_dir . '/*.*' ) as $theme_file ) {
+				unlink( $theme_file );
+			}
+
+			rmdir( $dest_dir );
+		}
 	}
 
 	/**
diff --git a/tests/link/wpGetCanonicalURL.php b/tests/link/wpGetCanonicalURL.php
index 6b4df35cbd..c6f0722db6 100644
--- a/tests/link/wpGetCanonicalURL.php
+++ b/tests/link/wpGetCanonicalURL.php
@@ -11,7 +11,8 @@ class Tests_WpGetCanonicalURL extends WP_UnitTestCase {
 	public static function wpSetUpBeforeClass( $factory ) {
 		self::$post_id = $factory->post->create(
 			array(
-				'post_status' => 'publish',
+				'post_content' => 'Page 1 <!--nextpage--> Page 2 <!--nextpage--> Page 3',
+				'post_status'  => 'publish',
 			)
 		);
 	}
@@ -40,7 +41,7 @@ class Tests_WpGetCanonicalURL extends WP_UnitTestCase {
 	 * Test for a page that is not the queried object.
 	 */
 	public function test_non_current_page() {
-		$this->assertEquals( get_permalink( self::$post_id ), wp_get_canonical_url( self::$post_id ) );
+		$this->assertSame( get_permalink( self::$post_id ), wp_get_canonical_url( self::$post_id ) );
 	}
 
 	/**
@@ -64,7 +65,7 @@ class Tests_WpGetCanonicalURL extends WP_UnitTestCase {
 			get_permalink( self::$post_id )
 		);
 
-		$this->assertEquals( $expected, wp_get_canonical_url( self::$post_id ) );
+		$this->assertSame( $expected, wp_get_canonical_url( self::$post_id ) );
 	}
 
 	/**
@@ -86,7 +87,7 @@ class Tests_WpGetCanonicalURL extends WP_UnitTestCase {
 
 		$expected = trailingslashit( get_permalink( self::$post_id ) ) . user_trailingslashit( $page, 'single_paged' );
 
-		$this->assertEquals( $expected, wp_get_canonical_url( self::$post_id ) );
+		$this->assertSame( $expected, wp_get_canonical_url( self::$post_id ) );
 	}
 
 	/**
@@ -112,7 +113,7 @@ class Tests_WpGetCanonicalURL extends WP_UnitTestCase {
 			get_permalink( self::$post_id ) . '#comments'
 		);
 
-		$this->assertEquals( $expected, wp_get_canonical_url( self::$post_id ) );
+		$this->assertSame( $expected, wp_get_canonical_url( self::$post_id ) );
 	}
 
 	/**
@@ -136,7 +137,7 @@ class Tests_WpGetCanonicalURL extends WP_UnitTestCase {
 
 		$expected = user_trailingslashit( trailingslashit( get_permalink( self::$post_id ) ) . $wp_rewrite->comments_pagination_base . '-' . $cpage, 'commentpaged' ) . '#comments';
 
-		$this->assertEquals( $expected, wp_get_canonical_url( self::$post_id ) );
+		$this->assertSame( $expected, wp_get_canonical_url( self::$post_id ) );
 	}
 
 	/**
@@ -147,7 +148,7 @@ class Tests_WpGetCanonicalURL extends WP_UnitTestCase {
 		$canonical_url = wp_get_canonical_url( self::$post_id );
 		remove_filter( 'get_canonical_url', array( $this, 'canonical_url_filter' ) );
 
-		$this->assertEquals( $this->canonical_url_filter(), $canonical_url );
+		$this->assertSame( $this->canonical_url_filter(), $canonical_url );
 	}
 
 	/**
diff --git a/tests/locale.php b/tests/locale.php
index 9790ca14bf..a51df0a5b4 100644
--- a/tests/locale.php
+++ b/tests/locale.php
@@ -16,13 +16,13 @@ class Tests_Locale extends WP_UnitTestCase {
 	}
 
 	public function test_get_weekday() {
-		$this->assertEquals( __( 'Sunday' ), $this->locale->get_weekday( 0 ) );
-		$this->assertEquals( __( 'Monday' ), $this->locale->get_weekday( 1 ) );
-		$this->assertEquals( __( 'Tuesday' ), $this->locale->get_weekday( 2 ) );
-		$this->assertEquals( __( 'Wednesday' ), $this->locale->get_weekday( 3 ) );
-		$this->assertEquals( __( 'Thursday' ), $this->locale->get_weekday( 4 ) );
-		$this->assertEquals( __( 'Friday' ), $this->locale->get_weekday( 5 ) );
-		$this->assertEquals( __( 'Saturday' ), $this->locale->get_weekday( 6 ) );
+		$this->assertSame( __( 'Sunday' ), $this->locale->get_weekday( 0 ) );
+		$this->assertSame( __( 'Monday' ), $this->locale->get_weekday( 1 ) );
+		$this->assertSame( __( 'Tuesday' ), $this->locale->get_weekday( 2 ) );
+		$this->assertSame( __( 'Wednesday' ), $this->locale->get_weekday( 3 ) );
+		$this->assertSame( __( 'Thursday' ), $this->locale->get_weekday( 4 ) );
+		$this->assertSame( __( 'Friday' ), $this->locale->get_weekday( 5 ) );
+		$this->assertSame( __( 'Saturday' ), $this->locale->get_weekday( 6 ) );
 	}
 
 	/**
@@ -33,72 +33,72 @@ class Tests_Locale extends WP_UnitTestCase {
 	}
 
 	public function test_get_weekday_initial() {
-		$this->assertEquals( __( 'S' ), $this->locale->get_weekday_initial( __( 'Sunday' ) ) );
-		$this->assertEquals( __( 'M' ), $this->locale->get_weekday_initial( __( 'Monday' ) ) );
-		$this->assertEquals( __( 'T' ), $this->locale->get_weekday_initial( __( 'Tuesday' ) ) );
-		$this->assertEquals( __( 'W' ), $this->locale->get_weekday_initial( __( 'Wednesday' ) ) );
-		$this->assertEquals( __( 'T' ), $this->locale->get_weekday_initial( __( 'Thursday' ) ) );
-		$this->assertEquals( __( 'F' ), $this->locale->get_weekday_initial( __( 'Friday' ) ) );
-		$this->assertEquals( __( 'S' ), $this->locale->get_weekday_initial( __( 'Saturday' ) ) );
+		$this->assertSame( __( 'S' ), $this->locale->get_weekday_initial( __( 'Sunday' ) ) );
+		$this->assertSame( __( 'M' ), $this->locale->get_weekday_initial( __( 'Monday' ) ) );
+		$this->assertSame( __( 'T' ), $this->locale->get_weekday_initial( __( 'Tuesday' ) ) );
+		$this->assertSame( __( 'W' ), $this->locale->get_weekday_initial( __( 'Wednesday' ) ) );
+		$this->assertSame( __( 'T' ), $this->locale->get_weekday_initial( __( 'Thursday' ) ) );
+		$this->assertSame( __( 'F' ), $this->locale->get_weekday_initial( __( 'Friday' ) ) );
+		$this->assertSame( __( 'S' ), $this->locale->get_weekday_initial( __( 'Saturday' ) ) );
 	}
 
 	public function test_get_weekday_abbrev() {
-		$this->assertEquals( __( 'Sun' ), $this->locale->get_weekday_abbrev( __( 'Sunday' ) ) );
-		$this->assertEquals( __( 'Mon' ), $this->locale->get_weekday_abbrev( __( 'Monday' ) ) );
-		$this->assertEquals( __( 'Tue' ), $this->locale->get_weekday_abbrev( __( 'Tuesday' ) ) );
-		$this->assertEquals( __( 'Wed' ), $this->locale->get_weekday_abbrev( __( 'Wednesday' ) ) );
-		$this->assertEquals( __( 'Thu' ), $this->locale->get_weekday_abbrev( __( 'Thursday' ) ) );
-		$this->assertEquals( __( 'Fri' ), $this->locale->get_weekday_abbrev( __( 'Friday' ) ) );
-		$this->assertEquals( __( 'Sat' ), $this->locale->get_weekday_abbrev( __( 'Saturday' ) ) );
+		$this->assertSame( __( 'Sun' ), $this->locale->get_weekday_abbrev( __( 'Sunday' ) ) );
+		$this->assertSame( __( 'Mon' ), $this->locale->get_weekday_abbrev( __( 'Monday' ) ) );
+		$this->assertSame( __( 'Tue' ), $this->locale->get_weekday_abbrev( __( 'Tuesday' ) ) );
+		$this->assertSame( __( 'Wed' ), $this->locale->get_weekday_abbrev( __( 'Wednesday' ) ) );
+		$this->assertSame( __( 'Thu' ), $this->locale->get_weekday_abbrev( __( 'Thursday' ) ) );
+		$this->assertSame( __( 'Fri' ), $this->locale->get_weekday_abbrev( __( 'Friday' ) ) );
+		$this->assertSame( __( 'Sat' ), $this->locale->get_weekday_abbrev( __( 'Saturday' ) ) );
 	}
 
 	public function test_get_month() {
-		$this->assertEquals( __( 'January' ), $this->locale->get_month( 1 ) );
-		$this->assertEquals( __( 'February' ), $this->locale->get_month( 2 ) );
-		$this->assertEquals( __( 'March' ), $this->locale->get_month( 3 ) );
-		$this->assertEquals( __( 'April' ), $this->locale->get_month( 4 ) );
-		$this->assertEquals( __( 'May' ), $this->locale->get_month( 5 ) );
-		$this->assertEquals( __( 'June' ), $this->locale->get_month( 6 ) );
-		$this->assertEquals( __( 'July' ), $this->locale->get_month( 7 ) );
-		$this->assertEquals( __( 'August' ), $this->locale->get_month( 8 ) );
-		$this->assertEquals( __( 'September' ), $this->locale->get_month( 9 ) );
-		$this->assertEquals( __( 'October' ), $this->locale->get_month( 10 ) );
-		$this->assertEquals( __( 'November' ), $this->locale->get_month( 11 ) );
-		$this->assertEquals( __( 'December' ), $this->locale->get_month( 12 ) );
+		$this->assertSame( __( 'January' ), $this->locale->get_month( 1 ) );
+		$this->assertSame( __( 'February' ), $this->locale->get_month( 2 ) );
+		$this->assertSame( __( 'March' ), $this->locale->get_month( 3 ) );
+		$this->assertSame( __( 'April' ), $this->locale->get_month( 4 ) );
+		$this->assertSame( __( 'May' ), $this->locale->get_month( 5 ) );
+		$this->assertSame( __( 'June' ), $this->locale->get_month( 6 ) );
+		$this->assertSame( __( 'July' ), $this->locale->get_month( 7 ) );
+		$this->assertSame( __( 'August' ), $this->locale->get_month( 8 ) );
+		$this->assertSame( __( 'September' ), $this->locale->get_month( 9 ) );
+		$this->assertSame( __( 'October' ), $this->locale->get_month( 10 ) );
+		$this->assertSame( __( 'November' ), $this->locale->get_month( 11 ) );
+		$this->assertSame( __( 'December' ), $this->locale->get_month( 12 ) );
 	}
 
 	public function test_get_month_leading_zero() {
-		$this->assertEquals( __( 'January' ), $this->locale->get_month( '01' ) );
-		$this->assertEquals( __( 'February' ), $this->locale->get_month( '02' ) );
-		$this->assertEquals( __( 'March' ), $this->locale->get_month( '03' ) );
-		$this->assertEquals( __( 'April' ), $this->locale->get_month( '04' ) );
-		$this->assertEquals( __( 'May' ), $this->locale->get_month( '05' ) );
-		$this->assertEquals( __( 'June' ), $this->locale->get_month( '06' ) );
-		$this->assertEquals( __( 'July' ), $this->locale->get_month( '07' ) );
-		$this->assertEquals( __( 'August' ), $this->locale->get_month( '08' ) );
-		$this->assertEquals( __( 'September' ), $this->locale->get_month( '09' ) );
+		$this->assertSame( __( 'January' ), $this->locale->get_month( '01' ) );
+		$this->assertSame( __( 'February' ), $this->locale->get_month( '02' ) );
+		$this->assertSame( __( 'March' ), $this->locale->get_month( '03' ) );
+		$this->assertSame( __( 'April' ), $this->locale->get_month( '04' ) );
+		$this->assertSame( __( 'May' ), $this->locale->get_month( '05' ) );
+		$this->assertSame( __( 'June' ), $this->locale->get_month( '06' ) );
+		$this->assertSame( __( 'July' ), $this->locale->get_month( '07' ) );
+		$this->assertSame( __( 'August' ), $this->locale->get_month( '08' ) );
+		$this->assertSame( __( 'September' ), $this->locale->get_month( '09' ) );
 	}
 
 	public function test_get_month_abbrev() {
-		$this->assertEquals( __( 'Jan' ), $this->locale->get_month_abbrev( __( 'January' ) ) );
-		$this->assertEquals( __( 'Feb' ), $this->locale->get_month_abbrev( __( 'February' ) ) );
-		$this->assertEquals( __( 'Mar' ), $this->locale->get_month_abbrev( __( 'March' ) ) );
-		$this->assertEquals( __( 'Apr' ), $this->locale->get_month_abbrev( __( 'April' ) ) );
-		$this->assertEquals( __( 'May' ), $this->locale->get_month_abbrev( __( 'May' ) ) );
-		$this->assertEquals( __( 'Jun' ), $this->locale->get_month_abbrev( __( 'June' ) ) );
-		$this->assertEquals( __( 'Jul' ), $this->locale->get_month_abbrev( __( 'July' ) ) );
-		$this->assertEquals( __( 'Aug' ), $this->locale->get_month_abbrev( __( 'August' ) ) );
-		$this->assertEquals( __( 'Sep' ), $this->locale->get_month_abbrev( __( 'September' ) ) );
-		$this->assertEquals( __( 'Oct' ), $this->locale->get_month_abbrev( __( 'October' ) ) );
-		$this->assertEquals( __( 'Nov' ), $this->locale->get_month_abbrev( __( 'November' ) ) );
-		$this->assertEquals( __( 'Dec' ), $this->locale->get_month_abbrev( __( 'December' ) ) );
+		$this->assertSame( __( 'Jan' ), $this->locale->get_month_abbrev( __( 'January' ) ) );
+		$this->assertSame( __( 'Feb' ), $this->locale->get_month_abbrev( __( 'February' ) ) );
+		$this->assertSame( __( 'Mar' ), $this->locale->get_month_abbrev( __( 'March' ) ) );
+		$this->assertSame( __( 'Apr' ), $this->locale->get_month_abbrev( __( 'April' ) ) );
+		$this->assertSame( __( 'May' ), $this->locale->get_month_abbrev( __( 'May' ) ) );
+		$this->assertSame( __( 'Jun' ), $this->locale->get_month_abbrev( __( 'June' ) ) );
+		$this->assertSame( __( 'Jul' ), $this->locale->get_month_abbrev( __( 'July' ) ) );
+		$this->assertSame( __( 'Aug' ), $this->locale->get_month_abbrev( __( 'August' ) ) );
+		$this->assertSame( __( 'Sep' ), $this->locale->get_month_abbrev( __( 'September' ) ) );
+		$this->assertSame( __( 'Oct' ), $this->locale->get_month_abbrev( __( 'October' ) ) );
+		$this->assertSame( __( 'Nov' ), $this->locale->get_month_abbrev( __( 'November' ) ) );
+		$this->assertSame( __( 'Dec' ), $this->locale->get_month_abbrev( __( 'December' ) ) );
 	}
 
 	public function test_get_meridiem() {
-		$this->assertEquals( __( 'am' ), $this->locale->get_meridiem( 'am' ) );
-		$this->assertEquals( __( 'AM' ), $this->locale->get_meridiem( 'AM' ) );
-		$this->assertEquals( __( 'pm' ), $this->locale->get_meridiem( 'pm' ) );
-		$this->assertEquals( __( 'PM' ), $this->locale->get_meridiem( 'PM' ) );
+		$this->assertSame( __( 'am' ), $this->locale->get_meridiem( 'am' ) );
+		$this->assertSame( __( 'AM' ), $this->locale->get_meridiem( 'AM' ) );
+		$this->assertSame( __( 'pm' ), $this->locale->get_meridiem( 'pm' ) );
+		$this->assertSame( __( 'PM' ), $this->locale->get_meridiem( 'PM' ) );
 	}
 
 	public function test_is_rtl() {
diff --git a/tests/mail.php b/tests/mail.php
index 39c6036d2c..25d6fa3058 100644
--- a/tests/mail.php
+++ b/tests/mail.php
@@ -80,8 +80,8 @@ class Tests_Mail extends WP_UnitTestCase {
 		$mailer = tests_retrieve_phpmailer_instance();
 
 		// We need some better assertions here but these catch the failure for now.
-		$this->assertEquals( $body, $mailer->get_sent()->body );
-		$this->assertTrue( strpos( $mailer->get_sent()->header, 'boundary="----=_Part_4892_25692638.1192452070893"' ) > 0 );
+		$this->assertSameIgnoreEOL( $body, $mailer->get_sent()->body );
+		$this->assertTrue( strpos( iconv_mime_decode_headers( ( $mailer->get_sent()->header ) )['Content-Type'][0], 'boundary="----=_Part_4892_25692638.1192452070893"' ) > 0 );
 		$this->assertTrue( strpos( $mailer->get_sent()->header, 'charset=' ) > 0 );
 	}
 
@@ -101,18 +101,18 @@ class Tests_Mail extends WP_UnitTestCase {
 
 		wp_mail( $to, $subject, $message, $headers );
 
-		// WordPress 3.2 and later correctly split the address into the two parts and send them seperately to PHPMailer
+		// WordPress 3.2 and later correctly split the address into the two parts and send them separately to PHPMailer.
 		// Earlier versions of PHPMailer were not touchy about the formatting of these arguments.
 
-		//retrieve the mailer instance
+		// Retrieve the mailer instance.
 		$mailer = tests_retrieve_phpmailer_instance();
-		$this->assertEquals( 'address@tld.com', $mailer->get_recipient( 'to' )->address );
-		$this->assertEquals( 'Name', $mailer->get_recipient( 'to' )->name );
-		$this->assertEquals( 'cc@cc.com', $mailer->get_recipient( 'cc' )->address );
-		$this->assertEquals( 'The Carbon Guy', $mailer->get_recipient( 'cc' )->name );
-		$this->assertEquals( 'bcc@bcc.com', $mailer->get_recipient( 'bcc' )->address );
-		$this->assertEquals( 'The Blind Carbon Guy', $mailer->get_recipient( 'bcc' )->name );
-		$this->assertEquals( $message . "\n", $mailer->get_sent()->body );
+		$this->assertSame( 'address@tld.com', $mailer->get_recipient( 'to' )->address );
+		$this->assertSame( 'Name', $mailer->get_recipient( 'to' )->name );
+		$this->assertSame( 'cc@cc.com', $mailer->get_recipient( 'cc' )->address );
+		$this->assertSame( 'The Carbon Guy', $mailer->get_recipient( 'cc' )->name );
+		$this->assertSame( 'bcc@bcc.com', $mailer->get_recipient( 'bcc' )->address );
+		$this->assertSame( 'The Blind Carbon Guy', $mailer->get_recipient( 'bcc' )->name );
+		$this->assertSameIgnoreEOL( $message . "\n", $mailer->get_sent()->body );
 	}
 
 	/**
@@ -125,14 +125,14 @@ class Tests_Mail extends WP_UnitTestCase {
 
 		wp_mail( $to, $subject, $message );
 
-		// WordPress 3.2 and later correctly split the address into the two parts and send them seperately to PHPMailer
+		// WordPress 3.2 and later correctly split the address into the two parts and send them separately to PHPMailer.
 		// Earlier versions of PHPMailer were not touchy about the formatting of these arguments.
 		$mailer = tests_retrieve_phpmailer_instance();
-		$this->assertEquals( 'address@tld.com', $mailer->get_recipient( 'to' )->address );
-		$this->assertEquals( 'Name', $mailer->get_recipient( 'to' )->name );
-		$this->assertEquals( 'another_address@different-tld.com', $mailer->get_recipient( 'to', 0, 1 )->address );
-		$this->assertEquals( 'Another Name', $mailer->get_recipient( 'to', 0, 1 )->name );
-		$this->assertEquals( $message . "\n", $mailer->get_sent()->body );
+		$this->assertSame( 'address@tld.com', $mailer->get_recipient( 'to' )->address );
+		$this->assertSame( 'Name', $mailer->get_recipient( 'to' )->name );
+		$this->assertSame( 'another_address@different-tld.com', $mailer->get_recipient( 'to', 0, 1 )->address );
+		$this->assertSame( 'Another Name', $mailer->get_recipient( 'to', 0, 1 )->name );
+		$this->assertSameIgnoreEOL( $message . "\n", $mailer->get_sent()->body );
 	}
 
 	function test_wp_mail_multiple_to_addresses() {
@@ -143,9 +143,9 @@ class Tests_Mail extends WP_UnitTestCase {
 		wp_mail( $to, $subject, $message );
 
 		$mailer = tests_retrieve_phpmailer_instance();
-		$this->assertEquals( 'address@tld.com', $mailer->get_recipient( 'to' )->address );
-		$this->assertEquals( 'another_address@different-tld.com', $mailer->get_recipient( 'to', 0, 1 )->address );
-		$this->assertEquals( $message . "\n", $mailer->get_sent()->body );
+		$this->assertSame( 'address@tld.com', $mailer->get_recipient( 'to' )->address );
+		$this->assertSame( 'another_address@different-tld.com', $mailer->get_recipient( 'to', 0, 1 )->address );
+		$this->assertSameIgnoreEOL( $message . "\n", $mailer->get_sent()->body );
 	}
 
 	/**
@@ -159,21 +159,21 @@ class Tests_Mail extends WP_UnitTestCase {
 		wp_mail( $to, $subject, $message );
 
 		$mailer = tests_retrieve_phpmailer_instance();
-		$this->assertEquals( 'address@tld.com', $mailer->get_recipient( 'to' )->address );
-		$this->assertEquals( $message . "\n", $mailer->get_sent()->body );
+		$this->assertSame( 'address@tld.com', $mailer->get_recipient( 'to' )->address );
+		$this->assertSameIgnoreEOL( $message . "\n", $mailer->get_sent()->body );
 	}
 
 	/**
 	 * @ticket 23642
 	 */
 	function test_wp_mail_return_value() {
-		// No errors
+		// No errors.
 		$this->assertTrue( wp_mail( 'valid@address.com', 'subject', 'body' ) );
 
-		// Non-fatal errors
+		// Non-fatal errors.
 		$this->assertTrue( wp_mail( 'valid@address.com', 'subject', 'body', "Cc: invalid-address\nBcc: @invalid.address", ABSPATH . '/non-existant-file.html' ) );
 
-		// Fatal errors
+		// Fatal errors.
 		$this->assertFalse( wp_mail( 'invalid.address', 'subject', 'body', '', array() ) );
 	}
 
@@ -286,7 +286,7 @@ class Tests_Mail extends WP_UnitTestCase {
 		wp_mail( $to, $subject, $message, $headers );
 
 		$mailer = tests_retrieve_phpmailer_instance();
-		$this->assertEquals( 1, substr_count( $mailer->get_sent()->header, $expected ) );
+		$this->assertSame( 1, substr_count( $mailer->get_sent()->header, $expected ) );
 	}
 
 	function wp_mail_quoted_printable( $mailer ) {
@@ -354,7 +354,7 @@ class Tests_Mail extends WP_UnitTestCase {
 
 		foreach ( $headers as $header => $value ) {
 			$target_headers = preg_grep( "/^$header:/", $sent_headers );
-			$this->assertEquals( $expected[ $header ], array_pop( $target_headers ) );
+			$this->assertSame( $expected[ $header ], array_pop( $target_headers ) );
 		}
 	}
 
@@ -373,7 +373,7 @@ class Tests_Mail extends WP_UnitTestCase {
 
 		$mailer = tests_retrieve_phpmailer_instance();
 
-		$this->assertEquals( '', $mailer->Sender );
+		$this->assertSame( '', $mailer->Sender );
 	}
 
 	/**
@@ -389,7 +389,7 @@ class Tests_Mail extends WP_UnitTestCase {
 
 		wp_mail( $to, $subject, $message );
 
-		$this->assertEquals( 1, $ma->get_call_count() );
+		$this->assertSame( 1, $ma->get_call_count() );
 
 		$expected_error_data = array(
 			'to'                       => array( 'an_invalid_address' ),
@@ -400,11 +400,19 @@ class Tests_Mail extends WP_UnitTestCase {
 			'phpmailer_exception_code' => 2,
 		);
 
-		//Retrieve the arguments passed to the 'wp_mail_failed' hook callbacks
+		// Retrieve the arguments passed to the 'wp_mail_failed' hook callbacks.
 		$all_args  = $ma->get_args();
 		$call_args = array_pop( $all_args );
 
-		$this->assertEquals( 'wp_mail_failed', $call_args[0]->get_error_code() );
-		$this->assertEquals( $expected_error_data, $call_args[0]->get_error_data() );
+		$this->assertSame( 'wp_mail_failed', $call_args[0]->get_error_code() );
+		$this->assertSame( $expected_error_data, $call_args[0]->get_error_data() );
+	}
+
+	/**
+	 * @ticket 50720
+	 */
+	function test_phpmailer_validator() {
+		$phpmailer = $GLOBALS['phpmailer'];
+		$this->assertTrue( $phpmailer->validateAddress( 'foo@192.168.1.1' ), 'Assert PHPMailer accepts IP address email addresses' );
 	}
 }
diff --git a/tests/media.php b/tests/media.php
index 26d8468bc2..06b8cdb59a 100644
--- a/tests/media.php
+++ b/tests/media.php
@@ -7,12 +7,13 @@
 class Tests_Media extends WP_UnitTestCase {
 	protected static $large_id;
 	protected static $_sizes;
+	protected static $large_filename = 'test-image-large.jpg';
 
 	public static function wpSetUpBeforeClass( $factory ) {
 		self::$_sizes                          = wp_get_additional_image_sizes();
 		$GLOBALS['_wp_additional_image_sizes'] = array();
 
-		$filename       = DIR_TESTDATA . '/images/test-image-large.png';
+		$filename       = DIR_TESTDATA . '/images/' . self::$large_filename;
 		self::$large_id = $factory->attachment->create_upload_object( $filename );
 	}
 
@@ -47,8 +48,8 @@ CAP;
 
 	function test_img_caption_shortcode_added() {
 		global $shortcode_tags;
-		$this->assertEquals( 'img_caption_shortcode', $shortcode_tags['caption'] );
-		$this->assertEquals( 'img_caption_shortcode', $shortcode_tags['wp_caption'] );
+		$this->assertSame( 'img_caption_shortcode', $shortcode_tags['caption'] );
+		$this->assertSame( 'img_caption_shortcode', $shortcode_tags['wp_caption'] );
 	}
 
 	function test_img_caption_shortcode_with_empty_params() {
@@ -61,7 +62,7 @@ CAP;
 	 */
 	function test_img_caption_shortcode_with_empty_params_but_content() {
 		$result = img_caption_shortcode( array(), $this->caption );
-		$this->assertEquals( $this->caption, $result );
+		$this->assertSame( $this->caption, $result );
 	}
 
 	/**
@@ -71,7 +72,7 @@ CAP;
 		add_filter( 'img_caption_shortcode', array( $this, '_return_alt_caption' ) );
 
 		$result = img_caption_shortcode( array(), $this->caption );
-		$this->assertEquals( $this->alternate_caption, $result );
+		$this->assertSame( $this->alternate_caption, $result );
 	}
 
 	/**
@@ -91,7 +92,7 @@ CAP;
 			),
 			$this->caption
 		);
-		$this->assertEquals( $this->caption, $result );
+		$this->assertSame( $this->caption, $result );
 	}
 
 	/**
@@ -116,7 +117,7 @@ CAP;
 			),
 			$this->caption
 		);
-		$this->assertEquals( $this->caption, $result );
+		$this->assertSame( $this->caption, $result );
 	}
 
 	function test_img_caption_shortcode_with_old_format() {
@@ -127,14 +128,14 @@ CAP;
 			)
 		);
 
-		$this->assertEquals( 2, preg_match_all( '/wp-caption/', $result, $_r ) );
-		$this->assertEquals( 1, preg_match_all( '/alignnone/', $result, $_r ) );
-		$this->assertEquals( 1, preg_match_all( "/{$this->caption}/", $result, $_r ) );
+		$this->assertSame( 2, preg_match_all( '/wp-caption/', $result, $_r ) );
+		$this->assertSame( 1, preg_match_all( '/alignnone/', $result, $_r ) );
+		$this->assertSame( 1, preg_match_all( "/{$this->caption}/", $result, $_r ) );
 
 		if ( current_theme_supports( 'html5', 'caption' ) ) {
-			$this->assertEquals( 1, preg_match_all( '/width: 20/', $result, $_r ) );
+			$this->assertSame( 1, preg_match_all( '/width: 20/', $result, $_r ) );
 		} else {
-			$this->assertEquals( 1, preg_match_all( '/width: 30/', $result, $_r ) );
+			$this->assertSame( 1, preg_match_all( '/width: 30/', $result, $_r ) );
 		}
 	}
 
@@ -147,9 +148,9 @@ CAP;
 				'align'   => '&myAlignment',
 			)
 		);
-		$this->assertEquals( 1, preg_match_all( '/wp-caption &amp;myAlignment/', $result, $_r ) );
-		$this->assertEquals( 1, preg_match_all( '/id="myId"/', $result, $_r ) );
-		$this->assertEquals( 1, preg_match_all( "/{$this->caption}/", $result, $_r ) );
+		$this->assertSame( 1, preg_match_all( '/wp-caption &amp;myAlignment/', $result, $_r ) );
+		$this->assertSame( 1, preg_match_all( '/id="myId"/', $result, $_r ) );
+		$this->assertSame( 1, preg_match_all( "/{$this->caption}/", $result, $_r ) );
 	}
 
 	function test_img_caption_shortcode_with_old_format_and_class() {
@@ -160,7 +161,7 @@ CAP;
 				'caption' => $this->caption,
 			)
 		);
-		$this->assertEquals( 1, preg_match_all( '/wp-caption alignnone some-class another-class/', $result, $_r ) );
+		$this->assertSame( 1, preg_match_all( '/wp-caption alignnone some-class another-class/', $result, $_r ) );
 
 	}
 
@@ -173,7 +174,7 @@ CAP;
 		);
 		$our_preg = preg_quote( $this->html_content );
 
-		$this->assertEquals( 1, preg_match_all( "~{$our_preg}~", $result, $_r ) );
+		$this->assertSame( 1, preg_match_all( "~{$our_preg}~", $result, $_r ) );
 	}
 
 	function test_new_img_caption_shortcode_new_format() {
@@ -184,8 +185,8 @@ CAP;
 		$img_preg     = preg_quote( $this->img_content );
 		$content_preg = preg_quote( $this->html_content );
 
-		$this->assertEquals( 1, preg_match_all( "~{$img_preg}.*wp-caption-text~", $result, $_r ) );
-		$this->assertEquals( 1, preg_match_all( "~wp-caption-text.*{$content_preg}~", $result, $_r ) );
+		$this->assertSame( 1, preg_match_all( "~{$img_preg}.*wp-caption-text~", $result, $_r ) );
+		$this->assertSame( 1, preg_match_all( "~wp-caption-text.*{$content_preg}~", $result, $_r ) );
 	}
 
 	function test_new_img_caption_shortcode_new_format_and_linked_image() {
@@ -197,8 +198,8 @@ CAP;
 		$img_preg     = preg_quote( $linked_image );
 		$content_preg = preg_quote( $this->html_content );
 
-		$this->assertEquals( 1, preg_match_all( "~{$img_preg}.*wp-caption-text~", $result, $_r ) );
-		$this->assertEquals( 1, preg_match_all( "~wp-caption-text.*{$content_preg}~", $result, $_r ) );
+		$this->assertSame( 1, preg_match_all( "~{$img_preg}.*wp-caption-text~", $result, $_r ) );
+		$this->assertSame( 1, preg_match_all( "~wp-caption-text.*{$content_preg}~", $result, $_r ) );
 	}
 
 	function test_new_img_caption_shortcode_new_format_and_linked_image_with_newline() {
@@ -210,8 +211,8 @@ CAP;
 		$img_preg     = preg_quote( $linked_image );
 		$content_preg = preg_quote( $this->html_content );
 
-		$this->assertEquals( 1, preg_match_all( "~{$img_preg}.*wp-caption-text~", $result, $_r ) );
-		$this->assertEquals( 1, preg_match_all( "~wp-caption-text.*{$content_preg}~", $result, $_r ) );
+		$this->assertSame( 1, preg_match_all( "~{$img_preg}.*wp-caption-text~", $result, $_r ) );
+		$this->assertSame( 1, preg_match_all( "~wp-caption-text.*{$content_preg}~", $result, $_r ) );
 	}
 
 	/**
@@ -226,7 +227,7 @@ CAP;
 			$this->img_content . $this->html_content
 		);
 
-		$this->assertEquals( 1, preg_match_all( '/aria-describedby="caption-myId"/', $result, $_r ) );
+		$this->assertSame( 1, preg_match_all( '/aria-describedby="caption-myId"/', $result, $_r ) );
 	}
 
 	function test_add_remove_oembed_provider() {
@@ -244,7 +245,7 @@ CAP;
 		$content = '';
 
 		$result = $wp_embed->autoembed( $content );
-		$this->assertEquals( $content, $result );
+		$this->assertSame( $content, $result );
 	}
 
 	/**
@@ -266,13 +267,13 @@ http://some.other.link/</pre>
 EOF;
 
 		$result = $wp_embed->autoembed( $content );
-		$this->assertEquals( $content, $result );
+		$this->assertSame( $content, $result );
 	}
 
 	function data_autoembed() {
 		return array(
 
-			// Should embed
+			// Should embed.
 			array(
 				'https://w.org',
 				'[embed]',
@@ -308,7 +309,7 @@ test</p>',
 </p>',
 			),
 
-			// Should NOT embed
+			// Should NOT embed.
 			array(
 				'test https://w.org</p>',
 			),
@@ -332,11 +333,11 @@ https://w.org</a>',
 	function test_autoembed( $content, $result = null ) {
 		$wp_embed = new Test_Autoembed;
 
-		$this->assertEquals( $wp_embed->autoembed( $content ), $result ? $result : $content );
+		$this->assertSame( $wp_embed->autoembed( $content ), $result ? $result : $content );
 	}
 
 	function test_wp_prepare_attachment_for_js() {
-		// Attachment without media
+		// Attachment without media.
 		$id   = wp_insert_attachment(
 			array(
 				'post_status'           => 'publish',
@@ -349,31 +350,31 @@ https://w.org</a>',
 
 		$prepped = wp_prepare_attachment_for_js( $post );
 		$this->assertInternalType( 'array', $prepped );
-		$this->assertEquals( 0, $prepped['uploadedTo'] );
-		$this->assertEquals( '', $prepped['mime'] );
-		$this->assertEquals( '', $prepped['type'] );
-		$this->assertEquals( '', $prepped['subtype'] );
-		// #21963, there will be a guid always, so there will be a URL
+		$this->assertSame( 0, $prepped['uploadedTo'] );
+		$this->assertSame( '', $prepped['mime'] );
+		$this->assertSame( '', $prepped['type'] );
+		$this->assertSame( '', $prepped['subtype'] );
+		// #21963, there will be a GUID always, so there will be a URL.
 		$this->assertNotEquals( '', $prepped['url'] );
-		$this->assertEquals( site_url( 'wp-includes/images/media/default.png' ), $prepped['icon'] );
+		$this->assertSame( site_url( 'wp-includes/images/media/default.png' ), $prepped['icon'] );
 
-		// Fake a mime
+		// Fake a mime.
 		$post->post_mime_type = 'image/jpeg';
 		$prepped              = wp_prepare_attachment_for_js( $post );
-		$this->assertEquals( 'image/jpeg', $prepped['mime'] );
-		$this->assertEquals( 'image', $prepped['type'] );
-		$this->assertEquals( 'jpeg', $prepped['subtype'] );
+		$this->assertSame( 'image/jpeg', $prepped['mime'] );
+		$this->assertSame( 'image', $prepped['type'] );
+		$this->assertSame( 'jpeg', $prepped['subtype'] );
 
-		// Fake a mime without a slash. See #WP22532
+		// Fake a mime without a slash. See #WP22532.
 		$post->post_mime_type = 'image';
 		$prepped              = wp_prepare_attachment_for_js( $post );
-		$this->assertEquals( 'image', $prepped['mime'] );
-		$this->assertEquals( 'image', $prepped['type'] );
-		$this->assertEquals( '', $prepped['subtype'] );
+		$this->assertSame( 'image', $prepped['mime'] );
+		$this->assertSame( 'image', $prepped['type'] );
+		$this->assertSame( '', $prepped['subtype'] );
 
 		// Test that if author is not found, we return "(no author)" as `display_name`.
 		// The previously used test post contains no author, so we can reuse it.
-		$this->assertEquals( '(no author)', $prepped['authorName'] );
+		$this->assertSame( '(no author)', $prepped['authorName'] );
 
 		// Test that if author has HTML entities in display_name, they're decoded correctly.
 		$html_entity_author = self::factory()->user->create(
@@ -383,7 +384,7 @@ https://w.org</a>',
 		);
 		$post->post_author  = $html_entity_author;
 		$prepped            = wp_prepare_attachment_for_js( $post );
-		$this->assertEquals( 'You & Me', $prepped['authorName'] );
+		$this->assertSame( 'You & Me', $prepped['authorName'] );
 	}
 
 	/**
@@ -426,33 +427,33 @@ https://w.org</a>',
 		$gb = $mb * 1024;
 		$tb = $gb * 1024;
 
-		// test if boundaries are correct
-		$this->assertEquals( '1TB', wp_convert_bytes_to_hr( $tb ) );
-		$this->assertEquals( '1GB', wp_convert_bytes_to_hr( $gb ) );
-		$this->assertEquals( '1MB', wp_convert_bytes_to_hr( $mb ) );
-		$this->assertEquals( '1KB', wp_convert_bytes_to_hr( $kb ) );
+		// Test if boundaries are correct.
+		$this->assertSame( '1TB', wp_convert_bytes_to_hr( $tb ) );
+		$this->assertSame( '1GB', wp_convert_bytes_to_hr( $gb ) );
+		$this->assertSame( '1MB', wp_convert_bytes_to_hr( $mb ) );
+		$this->assertSame( '1KB', wp_convert_bytes_to_hr( $kb ) );
 
-		$this->assertEquals( '1 TB', size_format( $tb ) );
-		$this->assertEquals( '1 GB', size_format( $gb ) );
-		$this->assertEquals( '1 MB', size_format( $mb ) );
-		$this->assertEquals( '1 KB', size_format( $kb ) );
+		$this->assertSame( '1 TB', size_format( $tb ) );
+		$this->assertSame( '1 GB', size_format( $gb ) );
+		$this->assertSame( '1 MB', size_format( $mb ) );
+		$this->assertSame( '1 KB', size_format( $kb ) );
 
-		// now some values around
+		// Now some values around.
 		$hr = wp_convert_bytes_to_hr( $tb + $tb / 2 + $mb );
-		$this->assertEquals( 1.50000095367, (float) str_replace( ',', '.', $hr ), 'The values should be equal', 0.0001 );
+		$this->assertEqualsWithDelta( 1.50000095367, (float) str_replace( ',', '.', $hr ), 0.0001, 'The values should be equal' );
 
 		$hr = wp_convert_bytes_to_hr( $tb - $mb - $kb );
-		$this->assertEquals( 1023.99902248, (float) str_replace( ',', '.', $hr ), 'The values should be equal', 0.0001 );
+		$this->assertEqualsWithDelta( 1023.99902248, (float) str_replace( ',', '.', $hr ), 0.0001, 'The values should be equal' );
 
 		$hr = wp_convert_bytes_to_hr( $gb + $gb / 2 + $mb );
-		$this->assertEquals( 1.5009765625, (float) str_replace( ',', '.', $hr ), 'The values should be equal', 0.0001 );
+		$this->assertEqualsWithDelta( 1.5009765625, (float) str_replace( ',', '.', $hr ), 0.0001, 'The values should be equal' );
 
 		$hr = wp_convert_bytes_to_hr( $gb - $mb - $kb );
-		$this->assertEquals( 1022.99902344, (float) str_replace( ',', '.', $hr ), 'The values should be equal', 0.0001 );
+		$this->assertEqualsWithDelta( 1022.99902344, (float) str_replace( ',', '.', $hr ), 0.0001, 'The values should be equal' );
 
-		// edge
-		$this->assertEquals( '-1B', wp_convert_bytes_to_hr( -1 ) );
-		$this->assertEquals( '0B', wp_convert_bytes_to_hr( 0 ) );
+		// Edge.
+		$this->assertSame( '-1B', wp_convert_bytes_to_hr( -1 ) );
+		$this->assertSame( '0B', wp_convert_bytes_to_hr( 0 ) );
 	}
 
 	/**
@@ -521,7 +522,7 @@ https://w.org</a>',
 BLOB;
 		$post_id = self::factory()->post->create( array( 'post_content' => $blob ) );
 		$srcs    = get_post_galleries_images( $post_id );
-		$this->assertEquals( $srcs, array( $ids1_srcs, $ids2_srcs ) );
+		$this->assertSame( $srcs, array( $ids1_srcs, $ids2_srcs ) );
 	}
 
 	/**
@@ -612,11 +613,11 @@ BLOB;
 
 		$galleries = get_post_galleries( $post_id_two, false );
 
-		// Set the global $post context
+		// Set the global $post context.
 		$GLOBALS['post']               = get_post( $post_id_two );
 		$galleries_with_global_context = get_post_galleries( $post_id_two, false );
 
-		// Check that the global post state doesn't affect the results
+		// Check that the global post state doesn't affect the results.
 		$this->assertSame( $galleries, $galleries_with_global_context );
 
 		$this->assertNotEmpty( $galleries[0]['src'] );
@@ -671,7 +672,7 @@ BLOB;
 BLOB;
 		$post_id = self::factory()->post->create( array( 'post_content' => $blob ) );
 		$srcs    = get_post_gallery_images( $post_id );
-		$this->assertEquals( $srcs, $ids1_srcs );
+		$this->assertSame( $srcs, $ids1_srcs );
 	}
 
 	function test_get_media_embedded_in_content() {
@@ -720,22 +721,22 @@ CONTENT;
 		$contents = array_values( compact( $types ) );
 
 		$matches = get_media_embedded_in_content( $content, 'audio' );
-		$this->assertEquals( array( $audio ), $matches );
+		$this->assertSame( array( $audio ), $matches );
 
 		$matches = get_media_embedded_in_content( $content, 'video' );
-		$this->assertEquals( array( $video ), $matches );
+		$this->assertSame( array( $video ), $matches );
 
 		$matches = get_media_embedded_in_content( $content, 'object' );
-		$this->assertEquals( array( $object ), $matches );
+		$this->assertSame( array( $object ), $matches );
 
 		$matches = get_media_embedded_in_content( $content, 'embed' );
-		$this->assertEquals( array( $embed ), $matches );
+		$this->assertSame( array( $embed ), $matches );
 
 		$matches = get_media_embedded_in_content( $content, 'iframe' );
-		$this->assertEquals( array( $iframe ), $matches );
+		$this->assertSame( array( $iframe ), $matches );
 
 		$matches = get_media_embedded_in_content( $content, $types );
-		$this->assertEquals( $contents, $matches );
+		$this->assertSame( $contents, $matches );
 	}
 
 	function test_get_media_embedded_in_content_order() {
@@ -752,11 +753,11 @@ VIDEO;
 		$content = $audio . $video;
 
 		$matches1 = get_media_embedded_in_content( $content, array( 'audio', 'video' ) );
-		$this->assertEquals( array( $audio, $video ), $matches1 );
+		$this->assertSame( array( $audio, $video ), $matches1 );
 
 		$reversed = $video . $audio;
 		$matches2 = get_media_embedded_in_content( $reversed, array( 'audio', 'video' ) );
-		$this->assertEquals( array( $video, $audio ), $matches2 );
+		$this->assertSame( array( $video, $audio ), $matches2 );
 	}
 
 	/**
@@ -858,11 +859,11 @@ VIDEO;
 			'<a href="http://domain.tld/wp-content/uploads/2013/12/xyz.mp4">' .
 			"http://domain.tld/wp-content/uploads/2013/12/xyz.mp4</a></video></div>\n";
 
-		$this->assertEquals( $expected, $content );
+		$this->assertSame( $expected, $content );
 	}
 
 	/**
-	 * @ticket  35367
+	 * @ticket 35367
 	 * @depends test_video_shortcode_body
 	 */
 	function test_wp_video_shortcode_with_empty_params() {
@@ -870,7 +871,7 @@ VIDEO;
 	}
 
 	/**
-	 * @ticket  35367
+	 * @ticket 35367
 	 * @depends test_video_shortcode_body
 	 */
 	function test_wp_video_shortcode_with_bad_attr() {
@@ -885,7 +886,7 @@ VIDEO;
 	}
 
 	/**
-	 * @ticket  35367
+	 * @ticket 35367
 	 * @depends test_video_shortcode_body
 	 */
 	function test_wp_video_shortcode_attributes() {
@@ -1011,12 +1012,12 @@ VIDEO;
 
 		$sizes = wp_get_additional_image_sizes();
 
-		// Clean up
+		// Clean up.
 		remove_image_size( 'test-size' );
 
 		$this->assertArrayHasKey( 'test-size', $sizes );
-		$this->assertEquals( 200, $sizes['test-size']['width'] );
-		$this->assertEquals( 600, $sizes['test-size']['height'] );
+		$this->assertSame( 200, $sizes['test-size']['width'] );
+		$this->assertSame( 600, $sizes['test-size']['height'] );
 	}
 
 	/**
@@ -1036,7 +1037,7 @@ VIDEO;
 		add_image_size( 'test-size', 200, 600 );
 		$this->assertTrue( has_image_size( 'test-size' ) );
 
-		// Clean up
+		// Clean up.
 		remove_image_size( 'test-size' );
 	}
 
@@ -1055,10 +1056,13 @@ VIDEO;
 		);
 
 		$image_url = 'http://' . WP_TESTS_DOMAIN . '/wp-content/uploads/' . $image_path;
-		$this->assertEquals( $attachment_id, attachment_url_to_postid( $image_url ) );
+		$this->assertSame( $attachment_id, attachment_url_to_postid( $image_url ) );
 	}
 
-	function test_attachment_url_to_postid_schemes() {
+	/**
+	 * @ticket 33109
+	 */
+	function test_attachment_url_to_postid_with_different_scheme() {
 		$image_path    = '2014/11/' . $this->img_name;
 		$attachment_id = self::factory()->attachment->create_object(
 			$image_path,
@@ -1069,11 +1073,36 @@ VIDEO;
 			)
 		);
 
-		/**
-		 * @ticket 33109 Testing protocols not matching
-		 */
 		$image_url = 'https://' . WP_TESTS_DOMAIN . '/wp-content/uploads/' . $image_path;
-		$this->assertEquals( $attachment_id, attachment_url_to_postid( $image_url ) );
+		$this->assertSame( $attachment_id, attachment_url_to_postid( $image_url ) );
+	}
+
+	/**
+	 * @ticket 39768
+	 */
+	function test_attachment_url_to_postid_should_be_case_sensitive() {
+		$image_path_lower_case    = '2014/11/' . $this->img_name;
+		$attachment_id_lower_case = self::factory()->attachment->create_object(
+			$image_path_lower_case,
+			0,
+			array(
+				'post_mime_type' => 'image/jpeg',
+				'post_type'      => 'attachment',
+			)
+		);
+
+		$image_path_upper_case    = '2014/11/' . ucfirst( $this->img_name );
+		$attachment_id_upper_case = self::factory()->attachment->create_object(
+			$image_path_upper_case,
+			0,
+			array(
+				'post_mime_type' => 'image/jpeg',
+				'post_type'      => 'attachment',
+			)
+		);
+
+		$image_url = 'http://' . WP_TESTS_DOMAIN . '/wp-content/uploads/' . $image_path_upper_case;
+		$this->assertSame( $attachment_id_upper_case, attachment_url_to_postid( $image_url ) );
 	}
 
 	function test_attachment_url_to_postid_filtered() {
@@ -1089,7 +1118,7 @@ VIDEO;
 
 		add_filter( 'upload_dir', array( $this, '_upload_dir' ) );
 		$image_url = 'http://192.168.1.20.com/wp-content/uploads/' . $image_path;
-		$this->assertEquals( $attachment_id, attachment_url_to_postid( $image_url ) );
+		$this->assertSame( $attachment_id, attachment_url_to_postid( $image_url ) );
 		remove_filter( 'upload_dir', array( $this, '_upload_dir' ) );
 	}
 
@@ -1104,7 +1133,7 @@ VIDEO;
 	function test_attachment_url_to_postid_with_empty_url() {
 		$post_id = attachment_url_to_postid( '' );
 		$this->assertInternalType( 'int', $post_id );
-		$this->assertEquals( 0, $post_id );
+		$this->assertSame( 0, $post_id );
 	}
 
 	/**
@@ -1113,7 +1142,7 @@ VIDEO;
 	public function test_media_handle_upload_sets_post_excerpt() {
 		$iptc_file = DIR_TESTDATA . '/images/test-image-iptc.jpg';
 
-		// Make a copy of this file as it gets moved during the file upload
+		// Make a copy of this file as it gets moved during the file upload.
 		$tmp_name = wp_tempnam( $iptc_file );
 
 		copy( $iptc_file, $tmp_name );
@@ -1143,7 +1172,7 @@ VIDEO;
 		// Clean up.
 		wp_delete_attachment( $post_id );
 
-		$this->assertEquals( 'This is a comment. / –≠—Ç–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π. / ŒíŒªŒ≠œÄŒµœÑŒµ Œ≠ŒΩŒ± œÉœáœåŒªŒπŒø.', $post->post_excerpt );
+		$this->assertSame( 'This is a comment. / –≠—Ç–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π. / ŒíŒªŒ≠œÄŒµœÑŒµ Œ≠ŒΩŒ± œÉœáœåŒªŒπŒø.', $post->post_excerpt );
 	}
 
 	/**
@@ -1152,7 +1181,7 @@ VIDEO;
 	public function test_media_handle_upload_expected_titles() {
 		$test_file = DIR_TESTDATA . '/images/test-image.jpg';
 
-		// Make a copy of this file as it gets moved during the file upload
+		// Make a copy of this file as it gets moved during the file upload.
 		$tmp_name = wp_tempnam( $test_file );
 
 		copy( $test_file, $tmp_name );
@@ -1182,7 +1211,7 @@ VIDEO;
 		// Clean up.
 		wp_delete_attachment( $post_id );
 
-		$this->assertEquals( 'This is a test', $post->post_title );
+		$this->assertSame( 'This is a test', $post->post_title );
 	}
 
 	/**
@@ -1199,7 +1228,7 @@ _my_function('data');
 EOF;
 
 		$result = $wp_embed->autoembed( $content );
-		$this->assertEquals( $content, $result );
+		$this->assertSame( $content, $result );
 	}
 
 	/**
@@ -1215,7 +1244,7 @@ my_function();
 EOF;
 
 		$result = $wp_embed->autoembed( $content );
-		$this->assertEquals( $content, $result );
+		$this->assertSame( $content, $result );
 	}
 
 
@@ -1249,7 +1278,7 @@ Stop.</p>
 EOF;
 
 		$result = apply_filters( 'the_content', $content );
-		$this->assertEqualsIgnoreEOL( $expected, $result );
+		$this->assertSameIgnoreEOL( $expected, $result );
 	}
 
 	/**
@@ -1278,7 +1307,7 @@ EOF;
 EOF;
 
 		$result = $wp_embed->autoembed( $content );
-		$this->assertEquals( $expected, $result );
+		$this->assertSame( $expected, $result );
 
 		$content = <<<EOF
 <a href="https://www.example.com/?video=1">https://www.example.com/?video=1</a>
@@ -1292,7 +1321,7 @@ do not break this';
 EOF;
 
 		$result = $wp_embed->autoembed( $content );
-		$this->assertEquals( $content, $result );
+		$this->assertSame( $content, $result );
 
 		remove_filter( 'embed_maybe_make_link', array( $this, 'filter_wp_embed_shortcode_custom' ), 10 );
 	}
@@ -1304,9 +1333,14 @@ EOF;
 	 */
 	function test_wp_get_attachment_image_defaults() {
 		$image    = image_downsize( self::$large_id, 'thumbnail' );
-		$expected = sprintf( '<img width="%1$d" height="%2$d" src="%3$s" class="attachment-thumbnail size-thumbnail" alt="" />', $image[1], $image[2], $image[0] );
+		$expected = sprintf(
+			'<img width="%1$d" height="%2$d" src="%3$s" class="attachment-thumbnail size-thumbnail" alt="" loading="lazy" />',
+			$image[1],
+			$image[2],
+			$image[0]
+		);
 
-		$this->assertEquals( $expected, wp_get_attachment_image( self::$large_id ) );
+		$this->assertSame( $expected, wp_get_attachment_image( self::$large_id ) );
 	}
 
 	/**
@@ -1319,9 +1353,14 @@ EOF;
 		update_post_meta( self::$large_id, '_wp_attachment_image_alt', 'Some very clever alt text', true );
 
 		$image    = image_downsize( self::$large_id, 'thumbnail' );
-		$expected = sprintf( '<img width="%1$d" height="%2$d" src="%3$s" class="attachment-thumbnail size-thumbnail" alt="Some very clever alt text" />', $image[1], $image[2], $image[0] );
+		$expected = sprintf(
+			'<img width="%1$d" height="%2$d" src="%3$s" class="attachment-thumbnail size-thumbnail" alt="Some very clever alt text" loading="lazy" />',
+			$image[1],
+			$image[2],
+			$image[0]
+		);
 
-		$this->assertEquals( $expected, wp_get_attachment_image( self::$large_id ) );
+		$this->assertSame( $expected, wp_get_attachment_image( self::$large_id ) );
 
 		// Cleanup.
 		update_post_meta( self::$large_id, '_wp_attachment_image_alt', '', true );
@@ -1345,7 +1384,7 @@ EOF;
 
 		$image = wp_get_attachment_image_src( $attachment_id, 'thumbnail', false );
 
-		$this->assertEquals( $image[0], wp_get_attachment_image_url( $attachment_id ) );
+		$this->assertSame( $image[0], wp_get_attachment_image_url( $attachment_id ) );
 	}
 
 	/**
@@ -1369,7 +1408,7 @@ EOF;
 
 		$this->assertFalse( wp_get_attachment_caption( $post_id ) );
 
-		$this->assertEquals( $caption, wp_get_attachment_caption( $attachment_id ) );
+		$this->assertSame( $caption, wp_get_attachment_caption( $attachment_id ) );
 	}
 
 	/**
@@ -1387,7 +1426,7 @@ EOF;
 			)
 		);
 
-		$this->assertEquals( '', wp_get_attachment_caption( $attachment_id ) );
+		$this->assertSame( '', wp_get_attachment_caption( $attachment_id ) );
 	}
 
 	/**
@@ -1445,19 +1484,26 @@ EOF;
 		$expected = '';
 
 		foreach ( $image_meta['sizes'] as $name => $size ) {
-			// Whitelist the sizes that should be included so we pick up 'medium_large' in 4.4.
+			// Allow the sizes that should be included so we pick up 'medium_large' in 4.4.
 			if ( in_array( $name, $intermediates, true ) ) {
 				$expected .= $uploads_dir_url . $year_month . '/' . $size['file'] . ' ' . $size['width'] . 'w, ';
 			}
 		}
 
-		// Add the full size width at the end.
-		$expected .= $uploads_dir_url . $image_meta['file'] . ' ' . $image_meta['width'] . 'w';
+		$expected = trim( $expected, ' ,' );
 
 		foreach ( $intermediates as $int ) {
-			$image_url       = wp_get_attachment_image_url( self::$large_id, $int );
-			$size_array      = $this->_get_image_size_array_from_meta( $image_meta, $int );
-			$expected_srcset = $this->_src_first( $expected, $image_url, $size_array[0] );
+			$image_url  = wp_get_attachment_image_url( self::$large_id, $int );
+			$size_array = $this->_get_image_size_array_from_meta( $image_meta, $int );
+
+			if ( 'full' === $int ) {
+				// Add the full size image. Expected to be in the srcset when the full size image is used as src.
+				$_expected = $uploads_dir_url . $image_meta['file'] . ' ' . $image_meta['width'] . 'w, ' . $expected;
+			} else {
+				$_expected = $expected;
+			}
+
+			$expected_srcset = $this->_src_first( $_expected, $image_url, $size_array[0] );
 			$this->assertSame( $expected_srcset, wp_calculate_image_srcset( $size_array, $image_url, $image_meta ) );
 		}
 	}
@@ -1468,11 +1514,11 @@ EOF;
 	function test_wp_calculate_image_srcset_no_date_uploads() {
 		$_wp_additional_image_sizes = wp_get_additional_image_sizes();
 
-		// Disable date organized uploads
+		// Disable date organized uploads.
 		add_filter( 'upload_dir', '_upload_dir_no_subdir' );
 
 		// Make an image.
-		$filename = DIR_TESTDATA . '/images/test-image-large.png';
+		$filename = DIR_TESTDATA . '/images/' . self::$large_filename;
 		$id       = self::factory()->attachment->create_upload_object( $filename );
 
 		$image_meta      = wp_get_attachment_metadata( $id );
@@ -1490,23 +1536,30 @@ EOF;
 		$expected = '';
 
 		foreach ( $image_meta['sizes'] as $name => $size ) {
-			// Whitelist the sizes that should be included so we pick up 'medium_large' in 4.4.
+			// Allow the sizes that should be included so we pick up 'medium_large' in 4.4.
 			if ( in_array( $name, $intermediates, true ) ) {
 				$expected .= $uploads_dir_url . $size['file'] . ' ' . $size['width'] . 'w, ';
 			}
 		}
 
-		// Add the full size width at the end.
-		$expected .= $uploads_dir_url . $image_meta['file'] . ' ' . $image_meta['width'] . 'w';
+		$expected = trim( $expected, ' ,' );
 
 		foreach ( $intermediates as $int ) {
-			$size_array      = $this->_get_image_size_array_from_meta( $image_meta, $int );
-			$image_url       = wp_get_attachment_image_url( $id, $int );
-			$expected_srcset = $this->_src_first( $expected, $image_url, $size_array[0] );
+			$size_array = $this->_get_image_size_array_from_meta( $image_meta, $int );
+			$image_url  = wp_get_attachment_image_url( $id, $int );
+
+			if ( 'full' === $int ) {
+				// Add the full size image. Expected to be in the srcset when the full size image is used as src.
+				$_expected = $uploads_dir_url . $image_meta['file'] . ' ' . $image_meta['width'] . 'w, ' . $expected;
+			} else {
+				$_expected = $expected;
+			}
+
+			$expected_srcset = $this->_src_first( $_expected, $image_url, $size_array[0] );
 			$this->assertSame( $expected_srcset, wp_calculate_image_srcset( $size_array, $image_url, $image_meta ) );
 		}
 
-		// Remove the attachment
+		// Remove the attachment.
 		wp_delete_attachment( $id );
 		remove_filter( 'upload_dir', '_upload_dir_no_subdir' );
 	}
@@ -1524,16 +1577,16 @@ EOF;
 		// Copy hash generation method used in wp_save_image().
 		$hash = 'e' . time() . rand( 100, 999 );
 
-		$filename_base = wp_basename( $image_meta['file'], '.png' );
+		$filename_base = wp_basename( self::$large_filename, '.jpg' );
+		$filename_hash = "{$filename_base}-{$hash}";
 
-		// Add the hash to the image URL
-		$image_url = str_replace( $filename_base, $filename_base . '-' . $hash, $image_url );
+		// Add the hash to the image URL.
+		$image_url = str_replace( $filename_base, $filename_hash, $image_url );
 
 		// Replace file paths for full and medium sizes with hashed versions.
-		$image_meta['file']                          = str_replace( $filename_base, $filename_base . '-' . $hash, $image_meta['file'] );
-		$image_meta['sizes']['medium']['file']       = str_replace( $filename_base, $filename_base . '-' . $hash, $image_meta['sizes']['medium']['file'] );
-		$image_meta['sizes']['medium_large']['file'] = str_replace( $filename_base, $filename_base . '-' . $hash, $image_meta['sizes']['medium_large']['file'] );
-		$image_meta['sizes']['large']['file']        = str_replace( $filename_base, $filename_base . '-' . $hash, $image_meta['sizes']['large']['file'] );
+		$image_meta['sizes']['medium']['file']       = str_replace( $filename_base, $filename_hash, $image_meta['sizes']['medium']['file'] );
+		$image_meta['sizes']['medium_large']['file'] = str_replace( $filename_base, $filename_hash, $image_meta['sizes']['medium_large']['file'] );
+		$image_meta['sizes']['large']['file']        = str_replace( $filename_base, $filename_hash, $image_meta['sizes']['large']['file'] );
 
 		// Calculate a srcset array.
 		$sizes = explode( ', ', wp_calculate_image_srcset( $size_array, $image_url, $image_meta ) );
@@ -1567,22 +1620,30 @@ EOF;
 		$expected = '';
 
 		foreach ( $image_meta['sizes'] as $name => $size ) {
-			// Whitelist the sizes that should be included so we pick up 'medium_large' in 4.4.
+			// Allow the sizes that should be included so we pick up 'medium_large' in 4.4.
 			if ( in_array( $name, $intermediates, true ) ) {
 				$expected .= $uploads_dir_url . $year_month . '/' . $size['file'] . ' ' . $size['width'] . 'w, ';
 			}
 		}
 
-		// Add the full size width at the end.
-		$expected .= $uploads_dir_url . $image_meta['file'] . ' ' . $image_meta['width'] . 'w';
+		$expected       = trim( $expected, ' ,' );
+		$full_size_file = $image_meta['file'];
 
-		// Prepend an absolute path to simulate a pre-2.7 upload
+		// Prepend an absolute path to simulate a pre-2.7 upload.
 		$image_meta['file'] = 'H:\home\wordpress\trunk/wp-content/uploads/' . $image_meta['file'];
 
 		foreach ( $intermediates as $int ) {
-			$image_url       = wp_get_attachment_image_url( self::$large_id, $int );
-			$size_array      = $this->_get_image_size_array_from_meta( $image_meta, $int );
-			$expected_srcset = $this->_src_first( $expected, $image_url, $size_array[0] );
+			$image_url  = wp_get_attachment_image_url( self::$large_id, $int );
+			$size_array = $this->_get_image_size_array_from_meta( $image_meta, $int );
+
+			if ( 'full' === $int ) {
+				// Add the full size image. Expected to be in the srcset when the full size image is used as src.
+				$_expected = $uploads_dir_url . $full_size_file . ' ' . $image_meta['width'] . 'w, ' . $expected;
+			} else {
+				$_expected = $expected;
+			}
+
+			$expected_srcset = $this->_src_first( $_expected, $image_url, $size_array[0] );
 			$this->assertSame( $expected_srcset, wp_calculate_image_srcset( $size_array, $image_url, $image_meta ) );
 		}
 	}
@@ -1593,7 +1654,7 @@ EOF;
 	function test_wp_calculate_image_srcset_false() {
 		$sizes = wp_calculate_image_srcset( array( 400, 300 ), 'file.png', array() );
 
-		// For canola.jpg we should return
+		// For canola.jpg we should return.
 		$this->assertFalse( $sizes );
 	}
 
@@ -1653,7 +1714,11 @@ EOF;
 			),
 		);
 
-		$expected_srcset = 'http://' . WP_TESTS_DOMAIN . '/wp-content/uploads/2015/12/test-768x1055-218x300.png 218w, http://' . WP_TESTS_DOMAIN . '/wp-content/uploads/2015/12/test-768x1055-600x824.png 600w, http://' . WP_TESTS_DOMAIN . '/wp-content/uploads/2015/12/test-768x1055.png 768w';
+		$uploads_url = 'http://' . WP_TESTS_DOMAIN . '/wp-content/uploads/2015/12/';
+
+		$expected_srcset = $uploads_url . 'test-768x1055-218x300.png 218w, ' .
+			$uploads_url . 'test-768x1055-600x824.png 600w, ' .
+			$uploads_url . 'test-768x1055.png 768w';
 
 		$this->assertSame( $expected_srcset, wp_calculate_image_srcset( $size_array, $image_src, $image_meta ) );
 	}
@@ -1698,7 +1763,12 @@ EOF;
 			),
 		);
 
-		$expected_srcset = 'http://' . WP_TESTS_DOMAIN . '/wp-content/uploads/2015/12/test.png 2000w, http://' . WP_TESTS_DOMAIN . '/wp-content/uploads/2015/12/test-300x150.png 300w, http://' . WP_TESTS_DOMAIN . '/wp-content/uploads/2015/12/test-768x384.png 768w, http://' . WP_TESTS_DOMAIN . '/wp-content/uploads/2015/12/test-1024x512.png 1024w';
+		$uploads_url = 'http://' . WP_TESTS_DOMAIN . '/wp-content/uploads/2015/12/';
+
+		$expected_srcset = $uploads_url . 'test.png 2000w, ' .
+			$uploads_url . 'test-300x150.png 300w, ' .
+			$uploads_url . 'test-768x384.png 768w, ' .
+			$uploads_url . 'test-1024x512.png 1024w';
 
 		$this->assertSame( $expected_srcset, wp_calculate_image_srcset( $size_array, $image_src, $image_meta ) );
 	}
@@ -1748,7 +1818,7 @@ EOF;
 			1600 => 'http://' . WP_TESTS_DOMAIN . '/wp-content/uploads/2015/12/test.png 1600w',
 		);
 
-		// No sizes array
+		// No sizes array.
 		$image_meta1 = $image_meta;
 		unset( $image_meta1['sizes'] );
 		$this->assertFalse( wp_calculate_image_srcset( $size_array, $image_src, $image_meta1 ) );
@@ -1758,12 +1828,12 @@ EOF;
 		$image_meta2['sizes'] = '';
 		$this->assertFalse( wp_calculate_image_srcset( $size_array, $image_src, $image_meta2 ) );
 
-		// File name is incorrect
+		// File name is incorrect.
 		$image_meta3         = $image_meta;
 		$image_meta3['file'] = '/';
 		$this->assertFalse( wp_calculate_image_srcset( $size_array, $image_src, $image_meta3 ) );
 
-		// File name is incorrect
+		// File name is incorrect.
 		$image_meta4 = $image_meta;
 		unset( $image_meta4['file'] );
 		$this->assertFalse( wp_calculate_image_srcset( $size_array, $image_src, $image_meta4 ) );
@@ -1815,7 +1885,11 @@ EOF;
 			),
 		);
 
-		$expected_srcset = 'http://' . WP_TESTS_DOMAIN . '/wp-content/uploads/2015/12/test%20image-300x150.png 300w, http://' . WP_TESTS_DOMAIN . '/wp-content/uploads/2015/12/test%20image-768x384.png 768w, http://' . WP_TESTS_DOMAIN . '/wp-content/uploads/2015/12/test%20image-1024x512.png 1024w';
+		$uploads_url = 'http://' . WP_TESTS_DOMAIN . '/wp-content/uploads/2015/12/';
+
+		$expected_srcset = $uploads_url . 'test%20image-300x150.png 300w, ' .
+			$uploads_url . 'test%20image-768x384.png 768w, ' .
+			$uploads_url . 'test%20image-1024x512.png 1024w';
 
 		$this->assertSame( $expected_srcset, wp_calculate_image_srcset( array( 300, 150 ), $image_src, $image_meta ) );
 	}
@@ -1827,7 +1901,7 @@ EOF;
 		$_wp_additional_image_sizes = wp_get_additional_image_sizes();
 
 		$image_meta = wp_get_attachment_metadata( self::$large_id );
-		$size_array = array( 1600, 1200 ); // full size
+		$size_array = array( $image_meta['width'], $image_meta['height'] ); // Full size.
 
 		$srcset = wp_get_attachment_image_srcset( self::$large_id, $size_array, $image_meta );
 
@@ -1846,7 +1920,7 @@ EOF;
 		$expected = '';
 
 		foreach ( $image_meta['sizes'] as $name => $size ) {
-			// Whitelist the sizes that should be included so we pick up 'medium_large' in 4.4.
+			// Allow the sizes that should be included so we pick up 'medium_large' in 4.4.
 			if ( in_array( $name, $intermediates, true ) ) {
 				$expected .= $uploads_dir . $year_month . '/' . $size['file'] . ' ' . $size['width'] . 'w, ';
 			}
@@ -1936,7 +2010,7 @@ EOF;
 	/**
 	 * @ticket 33641
 	 */
-	function test_wp_make_content_images_responsive() {
+	function test_wp_filter_content_tags_srcset_sizes() {
 		$image_meta = wp_get_attachment_metadata( self::$large_id );
 		$size_array = $this->_get_image_size_array_from_meta( $image_meta, 'medium' );
 
@@ -1953,7 +2027,7 @@ EOF;
 		$img_xhtml            = str_replace( ' />', '/>', $img );
 		$img_html5            = str_replace( ' />', '>', $img );
 
-		// Manually add srcset and sizes to the markup from get_image_tag();
+		// Manually add srcset and sizes to the markup from get_image_tag().
 		$respimg                  = preg_replace( '|<img ([^>]+) />|', '<img $1 ' . $srcset . ' ' . $sizes . ' />', $img );
 		$respimg_no_size_in_class = preg_replace( '|<img ([^>]+) />|', '<img $1 ' . $srcset . ' ' . $sizes . ' />', $img_no_size_in_class );
 		$respimg_no_width_height  = preg_replace( '|<img ([^>]+) />|', '<img $1 ' . $srcset . ' ' . $sizes . ' />', $img_no_width_height );
@@ -1983,10 +2057,36 @@ EOF;
 			<p>Image, HTML 5.0 style. Should have srcset and sizes.</p>
 			%7$s';
 
-		$content_unfiltered = sprintf( $content, $img, $img_no_size_in_class, $img_no_width_height, $img_no_size_id, $img_with_sizes_attr, $img_xhtml, $img_html5 );
-		$content_filtered   = sprintf( $content, $respimg, $respimg_no_size_in_class, $respimg_no_width_height, $img_no_size_id, $respimg_with_sizes_attr, $respimg_xhtml, $respimg_html5 );
+		$content_unfiltered = sprintf(
+			$content,
+			$img,
+			$img_no_size_in_class,
+			$img_no_width_height,
+			$img_no_size_id,
+			$img_with_sizes_attr,
+			$img_xhtml,
+			$img_html5
+		);
+
+		$content_filtered = sprintf(
+			$content,
+			$respimg,
+			$respimg_no_size_in_class,
+			$respimg_no_width_height,
+			$img_no_size_id,
+			$respimg_with_sizes_attr,
+			$respimg_xhtml,
+			$respimg_html5
+		);
+
+		// Do not add width, height, and loading.
+		add_filter( 'wp_img_tag_add_width_and_height_attr', '__return_false' );
+		add_filter( 'wp_img_tag_add_loading_attr', '__return_false' );
 
-		$this->assertSame( $content_filtered, wp_make_content_images_responsive( $content_unfiltered ) );
+		$this->assertSame( $content_filtered, wp_filter_content_tags( $content_unfiltered ) );
+
+		remove_filter( 'wp_img_tag_add_width_and_height_attr', '__return_false' );
+		remove_filter( 'wp_img_tag_add_loading_attr', '__return_false' );
 	}
 
 	/**
@@ -2000,25 +2100,27 @@ EOF;
 	 * @ticket 34898
 	 * @ticket 33641
 	 */
-	function test_wp_make_content_images_responsive_wrong() {
-		$image = get_image_tag( self::$large_id, '', '', '', 'medium' );
+	function test_wp_filter_content_tags_srcset_sizes_wrong() {
+		$img = get_image_tag( self::$large_id, '', '', '', 'medium' );
+		$img = wp_img_tag_add_loading_attr( $img, 'test' );
 
-		// Replace the src URL
-		$image_wrong_src = preg_replace( '|src="[^"]+"|', 'src="http://' . WP_TESTS_DOMAIN . '/wp-content/uploads/foo.jpg"', $image );
+		// Replace the src URL.
+		$image_wrong_src = preg_replace( '|src="[^"]+"|', 'src="http://' . WP_TESTS_DOMAIN . '/wp-content/uploads/foo.jpg"', $img );
 
-		$this->assertSame( $image_wrong_src, wp_make_content_images_responsive( $image_wrong_src ) );
+		$this->assertSame( $image_wrong_src, wp_filter_content_tags( $image_wrong_src ) );
 	}
 
 	/**
 	 * @ticket 33641
 	 */
-	function test_wp_make_content_images_responsive_with_preexisting_srcset() {
+	function test_wp_filter_content_tags_srcset_sizes_with_preexisting_srcset() {
 		// Generate HTML and add a dummy srcset attribute.
-		$image_html = get_image_tag( self::$large_id, '', '', '', 'medium' );
-		$image_html = preg_replace( '|<img ([^>]+) />|', '<img $1 ' . 'srcset="image2x.jpg 2x" />', $image_html );
+		$img = get_image_tag( self::$large_id, '', '', '', 'medium' );
+		$img = wp_img_tag_add_loading_attr( $img, 'test' );
+		$img = preg_replace( '|<img ([^>]+) />|', '<img $1 ' . 'srcset="image2x.jpg 2x" />', $img );
 
 		// The content filter should return the image unchanged.
-		$this->assertSame( $image_html, wp_make_content_images_responsive( $image_html ) );
+		$this->assertSame( $img, wp_filter_content_tags( $img ) );
 	}
 
 	/**
@@ -2069,7 +2171,7 @@ EOF;
 	 * @ticket 35045
 	 * @ticket 33641
 	 */
-	function test_wp_make_content_images_responsive_schemes() {
+	function test_wp_filter_content_tags_schemes() {
 		$image_meta = wp_get_attachment_metadata( self::$large_id );
 		$size_array = $this->_get_image_size_array_from_meta( $image_meta, 'medium' );
 
@@ -2078,6 +2180,7 @@ EOF;
 
 		// Build HTML for the editor.
 		$img          = get_image_tag( self::$large_id, '', '', '', 'medium' );
+		$img          = wp_img_tag_add_loading_attr( $img, 'test' );
 		$img_https    = str_replace( 'http://', 'https://', $img );
 		$img_relative = str_replace( 'http://', '//', $img );
 
@@ -2096,9 +2199,21 @@ EOF;
 			<p>Image, protocol-relative. Should have srcset and sizes.</p>
 			%3$s';
 
-		$unfiltered = sprintf( $content, $img, $img_https, $img_relative );
-		$expected   = sprintf( $content, $respimg, $respimg_https, $respimg_relative );
-		$actual     = wp_make_content_images_responsive( $unfiltered );
+		$unfiltered = sprintf(
+			$content,
+			$img,
+			$img_https,
+			$img_relative
+		);
+
+		$expected = sprintf(
+			$content,
+			$respimg,
+			$respimg_https,
+			$respimg_relative
+		);
+
+		$actual = wp_filter_content_tags( $unfiltered );
 
 		$this->assertSame( $expected, $actual );
 	}
@@ -2138,8 +2253,13 @@ EOF;
 
 		$_SERVER['HTTPS'] = 'on';
 
-		$expected = 'https://' . WP_TESTS_DOMAIN . '/wp-content/uploads/test-1024x512.jpg 1024w, https://' . WP_TESTS_DOMAIN . '/wp-content/uploads/test-300x150.jpg 300w, https://' . WP_TESTS_DOMAIN . '/wp-content/uploads/test.jpg 1200w';
-		$actual   = wp_calculate_image_srcset( $size_array, $image_url, $image_meta );
+		$uploads_url = 'https://' . WP_TESTS_DOMAIN . '/wp-content/uploads/';
+
+		$expected = $uploads_url . 'test-1024x512.jpg 1024w, ' .
+			$uploads_url . 'test-300x150.jpg 300w, ' .
+			$uploads_url . 'test.jpg 1200w';
+
+		$actual = wp_calculate_image_srcset( $size_array, $image_url, $image_meta );
 
 		$this->assertSame( $expected, $actual );
 	}
@@ -2227,15 +2347,17 @@ EOF;
 
 		remove_all_filters( 'wp_calculate_image_sizes' );
 
-		$actual = wp_get_attachment_image( self::$large_id, 'testsize' );
-		$year   = gmdate( 'Y' );
-		$month  = gmdate( 'm' );
+		$basename    = wp_basename( self::$large_filename, '.jpg' );
+		$year_month  = gmdate( 'Y/m' );
+		$uploads_url = 'http://' . WP_TESTS_DOMAIN . '/wp-content/uploads/' . $year_month . '/';
+
+		$expected = '<img width="999" height="999" ' .
+			'src="' . $uploads_url . 'test-image-testsize-999x999.jpg" ' .
+			'class="attachment-testsize size-testsize" alt="" loading="lazy" ' .
+			'srcset="' . $uploads_url . 'test-image-testsize-999x999.jpg 999w, ' . $uploads_url . $basename . '-150x150.jpg 150w" ' .
+			'sizes="(max-width: 999px) 100vw, 999px" />';
 
-		$expected = '<img width="999" height="999" src="http://' . WP_TESTS_DOMAIN . '/wp-content/uploads/' . $year . '/' . $month . '/test-image-testsize-999x999.png"' .
-			' class="attachment-testsize size-testsize" alt=""' .
-			' srcset="http://' . WP_TESTS_DOMAIN . '/wp-content/uploads/' . $year . '/' . $month . '/test-image-testsize-999x999.png 999w,' .
-				' http://' . WP_TESTS_DOMAIN . '/wp-content/uploads/' . $year . '/' . $month . '/test-image-large-150x150.png 150w"' .
-				' sizes="(max-width: 999px) 100vw, 999px" />';
+		$actual = wp_get_attachment_image( self::$large_id, 'testsize' );
 
 		remove_filter( 'wp_get_attachment_metadata', array( $this, '_filter_36246' ) );
 
@@ -2244,10 +2366,10 @@ EOF;
 
 	function _filter_36246( $data, $attachment_id ) {
 		$data['sizes']['testsize'] = array(
-			'file'      => 'test-image-testsize-999x999.png',
+			'file'      => 'test-image-testsize-999x999.jpg',
 			'width'     => 999,
 			'height'    => 999,
-			'mime-type' => 'image/png',
+			'mime-type' => 'image/jpg',
 		);
 		return $data;
 	}
@@ -2265,7 +2387,7 @@ EOF;
 
 		$attachment_id = wp_insert_attachment( $data, '', 0, true );
 		$this->assertWPError( $attachment_id );
-		$this->assertEquals( 'invalid_date', $attachment_id->get_error_code() );
+		$this->assertSame( 'invalid_date', $attachment_id->get_error_code() );
 
 		$attachment_id = wp_insert_attachment( $data, '', 0 );
 		$this->assertSame( 0, $attachment_id );
@@ -2284,7 +2406,7 @@ EOF;
 			),
 		);
 
-		$this->assertEquals( 123, wp_get_media_creation_timestamp( $metadata ) );
+		$this->assertSame( 123, wp_get_media_creation_timestamp( $metadata ) );
 	}
 
 	/**
@@ -2302,7 +2424,7 @@ EOF;
 			),
 		);
 
-		$this->assertEquals( 1450978809, wp_get_media_creation_timestamp( $metadata ) );
+		$this->assertSame( 1450978809, wp_get_media_creation_timestamp( $metadata ) );
 	}
 
 	/**
@@ -2322,7 +2444,7 @@ EOF;
 			),
 		);
 
-		$this->assertEquals( 1450978805, wp_get_media_creation_timestamp( $metadata ) );
+		$this->assertSame( 1450978805, wp_get_media_creation_timestamp( $metadata ) );
 	}
 
 	/**
@@ -2340,7 +2462,7 @@ EOF;
 			),
 		);
 
-		$this->assertEquals( 1265680539, wp_get_media_creation_timestamp( $metadata ) );
+		$this->assertSame( 1265680539, wp_get_media_creation_timestamp( $metadata ) );
 	}
 
 	/**
@@ -2355,7 +2477,7 @@ EOF;
 		$video    = DIR_TESTDATA . '/uploads/small-video.mp4';
 		$metadata = wp_read_audio_metadata( $video );
 
-		$this->assertEquals( 1269120551, $metadata['created_timestamp'] );
+		$this->assertSame( 1269120551, $metadata['created_timestamp'] );
 	}
 
 	/**
@@ -2365,7 +2487,7 @@ EOF;
 		$video    = DIR_TESTDATA . '/uploads/small-video.mov';
 		$metadata = wp_read_video_metadata( $video );
 
-		$this->assertEquals( 1269120551, $metadata['created_timestamp'] );
+		$this->assertSame( 1269120551, $metadata['created_timestamp'] );
 	}
 
 	/**
@@ -2375,7 +2497,7 @@ EOF;
 		$video    = DIR_TESTDATA . '/uploads/small-video.mp4';
 		$metadata = wp_read_video_metadata( $video );
 
-		$this->assertEquals( 1269120551, $metadata['created_timestamp'] );
+		$this->assertSame( 1269120551, $metadata['created_timestamp'] );
 	}
 
 	/**
@@ -2385,7 +2507,7 @@ EOF;
 		$video    = DIR_TESTDATA . '/uploads/small-video.mkv';
 		$metadata = wp_read_video_metadata( $video );
 
-		$this->assertEquals( 1269120551, $metadata['created_timestamp'] );
+		$this->assertSame( 1269120551, $metadata['created_timestamp'] );
 	}
 
 	/**
@@ -2395,7 +2517,7 @@ EOF;
 		$video    = DIR_TESTDATA . '/uploads/small-video.webm';
 		$metadata = wp_read_video_metadata( $video );
 
-		$this->assertEquals( 1269120551, $metadata['created_timestamp'] );
+		$this->assertSame( 1269120551, $metadata['created_timestamp'] );
 	}
 
 	/**
@@ -2404,7 +2526,7 @@ EOF;
 	public function test_media_handle_upload_uses_post_parent_for_directory_date() {
 		$iptc_file = DIR_TESTDATA . '/images/test-image-iptc.jpg';
 
-		// Make a copy of this file as it gets moved during the file upload
+		// Make a copy of this file as it gets moved during the file upload.
 		$tmp_name = wp_tempnam( $iptc_file );
 
 		copy( $iptc_file, $tmp_name );
@@ -2450,7 +2572,7 @@ EOF;
 	public function test_media_handle_upload_ignores_page_parent_for_directory_date() {
 		$iptc_file = DIR_TESTDATA . '/images/test-image-iptc.jpg';
 
-		// Make a copy of this file as it gets moved during the file upload
+		// Make a copy of this file as it gets moved during the file upload.
 		$tmp_name = wp_tempnam( $iptc_file );
 
 		copy( $iptc_file, $tmp_name );
@@ -2495,6 +2617,370 @@ EOF;
 
 		$this->assertSame( $expected, $url );
 	}
+
+	/**
+	 * @ticket 50367
+	 */
+	function test_wp_filter_content_tags_width_height() {
+		$image_meta = wp_get_attachment_metadata( self::$large_id );
+		$size_array = $this->_get_image_size_array_from_meta( $image_meta, 'medium' );
+
+		$img                 = get_image_tag( self::$large_id, '', '', '', 'medium' );
+		$img_no_width_height = str_replace( ' width="' . $size_array[0] . '"', '', $img );
+		$img_no_width_height = str_replace( ' height="' . $size_array[1] . '"', '', $img_no_width_height );
+		$img_no_width        = str_replace( ' width="' . $size_array[0] . '"', '', $img );
+		$img_no_height       = str_replace( ' height="' . $size_array[1] . '"', '', $img );
+
+		$hwstring = image_hwstring( $size_array[0], $size_array[1] );
+
+		// Manually add width and height to the markup from get_image_tag().
+		$respimg_no_width_height = str_replace( '<img ', '<img ' . $hwstring, $img_no_width_height );
+
+		$content = '
+			<p>Image, with width and height. Should NOT be modified.</p>
+			%1$s
+
+			<p>Image, no width and height attributes. Should have width, height, srcset and sizes (from matching the file name).</p>
+			%2$s
+
+			<p>Image, no width but height attribute. Should NOT be modified.</p>
+			%3$s
+
+			<p>Image, no height but width attribute. Should NOT be modified.</p>
+			%4$s';
+
+		$content_unfiltered = sprintf( $content, $img, $img_no_width_height, $img_no_width, $img_no_height );
+		$content_filtered   = sprintf( $content, $img, $respimg_no_width_height, $img_no_width, $img_no_height );
+
+		// Do not add loading, srcset, and sizes.
+		add_filter( 'wp_img_tag_add_loading_attr', '__return_false' );
+		add_filter( 'wp_img_tag_add_srcset_and_sizes_attr', '__return_false' );
+
+		$this->assertSame( $content_filtered, wp_filter_content_tags( $content_unfiltered ) );
+
+		remove_filter( 'wp_img_tag_add_loading_attr', '__return_false' );
+		remove_filter( 'wp_img_tag_add_srcset_and_sizes_attr', '__return_false' );
+	}
+
+	/**
+	 * @ticket 44427
+	 * @ticket 50367
+	 */
+	function test_wp_filter_content_tags_loading_lazy() {
+		$image_meta = wp_get_attachment_metadata( self::$large_id );
+		$size_array = $this->_get_image_size_array_from_meta( $image_meta, 'medium' );
+
+		$img                 = get_image_tag( self::$large_id, '', '', '', 'medium' );
+		$img_xhtml           = str_replace( ' />', '/>', $img );
+		$img_html5           = str_replace( ' />', '>', $img );
+		$img_no_width_height = str_replace( ' width="' . $size_array[0] . '"', '', $img );
+		$img_no_width_height = str_replace( ' height="' . $size_array[1] . '"', '', $img_no_width_height );
+		$iframe              = '<iframe src="https://www.example.com"></iframe>';
+
+		$lazy_img       = wp_img_tag_add_loading_attr( $img, 'test' );
+		$lazy_img_xhtml = wp_img_tag_add_loading_attr( $img_xhtml, 'test' );
+		$lazy_img_html5 = wp_img_tag_add_loading_attr( $img_html5, 'test' );
+
+		// The following should not be modified because there already is a 'loading' attribute.
+		$img_eager = str_replace( ' />', ' loading="eager" />', $img );
+
+		$content = '
+			<p>Image, standard.</p>
+			%1$s
+			<p>Image, XHTML 1.0 style (no space before the closing slash).</p>
+			%2$s
+			<p>Image, HTML 5.0 style.</p>
+			%3$s
+			<p>Image, with pre-existing "loading" attribute. Should not be modified.</p>
+			%4$s
+			<p>Image, without dimension attributes. Should not be modified.</p>
+			%5$s
+			<p>Iframe, standard. Should not be modified.</p>
+			%6$s';
+
+		$content_unfiltered = sprintf( $content, $img, $img_xhtml, $img_html5, $img_eager, $img_no_width_height, $iframe );
+		$content_filtered   = sprintf( $content, $lazy_img, $lazy_img_xhtml, $lazy_img_html5, $img_eager, $img_no_width_height, $iframe );
+
+		// Do not add width, height, srcset, and sizes.
+		add_filter( 'wp_img_tag_add_width_and_height_attr', '__return_false' );
+		add_filter( 'wp_img_tag_add_srcset_and_sizes_attr', '__return_false' );
+
+		$this->assertSame( $content_filtered, wp_filter_content_tags( $content_unfiltered ) );
+
+		remove_filter( 'wp_img_tag_add_width_and_height_attr', '__return_false' );
+		remove_filter( 'wp_img_tag_add_srcset_and_sizes_attr', '__return_false' );
+	}
+
+	/**
+	 * @ticket 44427
+	 */
+	function test_wp_filter_content_tags_loading_lazy_opted_in() {
+		$img      = get_image_tag( self::$large_id, '', '', '', 'medium' );
+		$lazy_img = wp_img_tag_add_loading_attr( $img, 'test' );
+
+		$content = '
+			<p>Image, standard.</p>
+			%1$s';
+
+		$content_unfiltered = sprintf( $content, $img );
+		$content_filtered   = sprintf( $content, $lazy_img );
+
+		// Do not add srcset and sizes while testing.
+		add_filter( 'wp_img_tag_add_srcset_and_sizes_attr', '__return_false' );
+
+		// Enable globally for all tags.
+		add_filter( 'wp_lazy_loading_enabled', '__return_true' );
+
+		$this->assertSame( $content_filtered, wp_filter_content_tags( $content_unfiltered ) );
+		remove_filter( 'wp_lazy_loading_enabled', '__return_true' );
+		remove_filter( 'wp_img_tag_add_srcset_and_sizes_attr', '__return_false' );
+	}
+
+	/**
+	 * @ticket 44427
+	 */
+	function test_wp_filter_content_tags_loading_lazy_opted_out() {
+		$img = get_image_tag( self::$large_id, '', '', '', 'medium' );
+
+		$content = '
+			<p>Image, standard.</p>
+			%1$s';
+		$content = sprintf( $content, $img );
+
+		// Do not add srcset and sizes while testing.
+		add_filter( 'wp_img_tag_add_srcset_and_sizes_attr', '__return_false' );
+
+		// Disable globally for all tags.
+		add_filter( 'wp_lazy_loading_enabled', '__return_false' );
+
+		$this->assertSame( $content, wp_filter_content_tags( $content ) );
+		remove_filter( 'wp_lazy_loading_enabled', '__return_false' );
+		remove_filter( 'wp_img_tag_add_srcset_and_sizes_attr', '__return_false' );
+	}
+
+	/**
+	 * @ticket 44427
+	 * @ticket 50367
+	 */
+	function test_wp_img_tag_add_loading_attr() {
+		$img = '<img src="example.png" alt=" width="300" height="225" />';
+		$img = wp_img_tag_add_loading_attr( $img, 'test' );
+
+		$this->assertContains( ' loading="lazy"', $img );
+	}
+
+	/**
+	 * @ticket 44427
+	 * @ticket 50367
+	 */
+	function test_wp_img_tag_add_loading_attr_without_src() {
+		$img = '<img alt=" width="300" height="225" />';
+		$img = wp_img_tag_add_loading_attr( $img, 'test' );
+
+		$this->assertNotContains( ' loading=', $img );
+	}
+
+	/**
+	 * @ticket 44427
+	 * @ticket 50367
+	 */
+	function test_wp_img_tag_add_loading_attr_with_single_quotes() {
+		$img = "<img src='example.png' alt=' width='300' height='225' />";
+		$img = wp_img_tag_add_loading_attr( $img, 'test' );
+
+		$this->assertNotContains( ' loading=', $img );
+
+		// Test specifically that the attribute is not there with double-quotes,
+		// to avoid regressions.
+		$this->assertNotContains( ' loading="lazy"', $img );
+	}
+
+	/**
+	 * @ticket 44427
+	 * @ticket 50425
+	 */
+	function test_wp_img_tag_add_loading_attr_opt_out() {
+		$img = '<img src="example.png" alt=" width="300" height="225" />';
+		add_filter( 'wp_img_tag_add_loading_attr', '__return_false' );
+
+		$this->assertNotContains( ' loading=', $img );
+	}
+
+	/**
+	 * @ticket 44427
+	 * @ticket 50425
+	 */
+	function test_wp_get_attachment_image_loading() {
+		$img = wp_get_attachment_image( self::$large_id );
+
+		$this->assertContains( ' loading="lazy"', $img );
+	}
+
+	/**
+	 * @ticket 44427
+	 * @ticket 50425
+	 */
+	function test_wp_get_attachment_image_loading_opt_out() {
+		add_filter( 'wp_lazy_loading_enabled', '__return_false' );
+		$img = wp_get_attachment_image( self::$large_id );
+
+		// There should not be any loading attribute in this case.
+		$this->assertNotContains( ' loading=', $img );
+	}
+
+	/**
+	 * @ticket 44427
+	 * @ticket 50425
+	 */
+	function test_wp_get_attachment_image_loading_opt_out_individual() {
+		// The default is already tested above, the filter below ensures that
+		// lazy-loading is definitely enabled globally for images.
+		add_filter( 'wp_lazy_loading_enabled', '__return_true' );
+
+		$img = wp_get_attachment_image( self::$large_id, 'thumbnail', false, array( 'loading' => false ) );
+
+		// There should not be any loading attribute in this case.
+		$this->assertNotContains( ' loading=', $img );
+	}
+
+	/**
+	 * @ticket 44427
+	 * @ticket 50425
+	 * @dataProvider data_wp_lazy_loading_enabled_tag_name_defaults
+	 *
+	 * @param string $tag_name Tag name.
+	 * @param bool   $expected Expected return value.
+	 */
+	function test_wp_lazy_loading_enabled_tag_name_defaults( $tag_name, $expected ) {
+		if ( $expected ) {
+			$this->assertTrue( wp_lazy_loading_enabled( $tag_name, 'the_content' ) );
+		} else {
+			$this->assertFalse( wp_lazy_loading_enabled( $tag_name, 'the_content' ) );
+		}
+	}
+
+	function data_wp_lazy_loading_enabled_tag_name_defaults() {
+		return array(
+			'img => true'            => array( 'img', true ),
+			'iframe => false'        => array( 'iframe', false ),
+			'arbitrary tag => false' => array( 'blink', false ),
+		);
+	}
+
+	/**
+	 * @ticket 50425
+	 * @dataProvider data_wp_lazy_loading_enabled_context_defaults
+	 *
+	 * @param string $context  Function context.
+	 * @param bool   $expected Expected return value.
+	 */
+	function test_wp_lazy_loading_enabled_context_defaults( $context, $expected ) {
+		if ( $expected ) {
+			$this->assertTrue( wp_lazy_loading_enabled( 'img', $context ) );
+		} else {
+			$this->assertFalse( wp_lazy_loading_enabled( 'img', $context ) );
+		}
+	}
+
+	function data_wp_lazy_loading_enabled_context_defaults() {
+		return array(
+			'wp_get_attachment_image => true' => array( 'wp_get_attachment_image', true ),
+			'the_content => true'             => array( 'the_content', true ),
+			'the_excerpt => true'             => array( 'the_excerpt', true ),
+			'widget_text_content => true'     => array( 'widget_text_content', true ),
+			'get_avatar => true'              => array( 'get_avatar', true ),
+			'arbitrary context => true'       => array( 'something_completely_arbitrary', true ),
+		);
+	}
+
+	/**
+	 * @ticket 50543
+	 */
+	function test_wp_image_file_matches_image_meta() {
+		$image_meta       = wp_get_attachment_metadata( self::$large_id );
+		$image_src_full   = wp_get_attachment_image_url( self::$large_id, 'full' );
+		$image_src_medium = wp_get_attachment_image_url( self::$large_id, 'medium' );
+
+		$this->assertTrue( wp_image_file_matches_image_meta( $image_src_full, $image_meta ) );
+		$this->assertTrue( wp_image_file_matches_image_meta( $image_src_medium, $image_meta ) );
+	}
+
+	/**
+	 * @ticket 50543
+	 */
+	function test_wp_image_file_matches_image_meta_no_subsizes() {
+		$image_meta = wp_get_attachment_metadata( self::$large_id );
+		$image_src  = wp_get_attachment_image_url( self::$large_id, 'full' );
+
+		$image_meta['sizes'] = array();
+
+		$this->assertTrue( wp_image_file_matches_image_meta( $image_src, $image_meta ) );
+	}
+
+	/**
+	 * @ticket 50543
+	 */
+	function test_wp_image_file_matches_image_meta_invalid_meta() {
+		$image_meta = ''; // Attachment is not an image.
+		$image_src  = $this->img_url;
+
+		$this->assertFalse( wp_image_file_matches_image_meta( $image_src, $image_meta ) );
+	}
+
+	/**
+	 * @ticket 50543
+	 */
+	function test_wp_image_file_matches_image_meta_different_meta() {
+		$image_meta = wp_get_attachment_metadata( self::$large_id );
+		$image_src  = $this->img_url; // Different image.
+
+		$this->assertFalse( wp_image_file_matches_image_meta( $image_src, $image_meta ) );
+	}
+
+	/**
+	 * @ticket 50543
+	 */
+	function test_wp_image_file_matches_image_meta_original_image() {
+		$image_meta = wp_get_attachment_metadata( self::$large_id );
+		$image_src  = wp_get_original_image_url( self::$large_id );
+
+		$this->assertTrue( wp_image_file_matches_image_meta( $image_src, $image_meta ) );
+	}
+
+	/**
+	 * @ticket 22101
+	 */
+	function test_gallery_shortcode_when_is_feed_true() {
+
+		$this->go_to( '/?feed=rss2' );
+
+		// Default: Links to image attachment page URL.
+		$actual = gallery_shortcode(
+			array(
+				'ids' => self::$large_id,
+			)
+		);
+		$this->assertContains( '?attachment_id=', $actual );
+
+		// File: Links to image file URL.
+		$actual = gallery_shortcode(
+			array(
+				'ids'  => self::$large_id,
+				'link' => 'file',
+			)
+		);
+		$this->assertSame( 2, substr_count( $actual, '.jpg' ) );
+
+		// None: Does not link.
+		$actual = gallery_shortcode(
+			array(
+				'ids'  => self::$large_id,
+				'link' => 'none',
+			)
+		);
+		$this->assertNotContains( '<a ', $actual );
+	}
+
 }
 
 /**
diff --git a/tests/menu/nav-menu.php b/tests/menu/nav-menu.php
index af67f98379..58a597c858 100644
--- a/tests/menu/nav-menu.php
+++ b/tests/menu/nav-menu.php
@@ -31,7 +31,7 @@ class Tests_Nav_Menu_Theme_Change extends WP_UnitTestCase {
 	/**
 	 * Two themes with one location each should just map, switching to a theme not previously-active.
 	 *
-	 * @covers ::wp_map_nav_menu_locations()
+	 * @covers ::wp_map_nav_menu_locations
 	 */
 	function test_one_location_each() {
 		$this->register_nav_menu_locations( array( 'primary' ) );
@@ -44,13 +44,13 @@ class Tests_Nav_Menu_Theme_Change extends WP_UnitTestCase {
 		$expected_nav_menu_locations = array(
 			'primary' => 1,
 		);
-		$this->assertEquals( $expected_nav_menu_locations, $new_next_theme_nav_menu_locations );
+		$this->assertSame( $expected_nav_menu_locations, $new_next_theme_nav_menu_locations );
 	}
 
 	/**
 	 * Only registered locations should be mapped and returned.
 	 *
-	 * @covers ::wp_map_nav_menu_locations()
+	 * @covers ::wp_map_nav_menu_locations
 	 */
 	function test_filter_registered_locations() {
 		$this->register_nav_menu_locations( array( 'primary', 'secondary' ) );
@@ -66,13 +66,13 @@ class Tests_Nav_Menu_Theme_Change extends WP_UnitTestCase {
 			'primary'   => 1,
 			'secondary' => 2,
 		);
-		$this->assertEquals( $expected_nav_menu_locations, $new_next_theme_nav_menu_locations );
+		$this->assertSame( $expected_nav_menu_locations, $new_next_theme_nav_menu_locations );
 	}
 
 	/**
 	 * Locations with the same name should map, switching to a theme not previously-active.
 	 *
-	 * @covers ::wp_map_nav_menu_locations()
+	 * @covers ::wp_map_nav_menu_locations
 	 */
 	function test_locations_with_same_slug() {
 		$this->register_nav_menu_locations( array( 'primary', 'secondary' ) );
@@ -85,13 +85,13 @@ class Tests_Nav_Menu_Theme_Change extends WP_UnitTestCase {
 		$new_next_theme_nav_menu_locations = wp_map_nav_menu_locations( $old_next_theme_nav_menu_locations, $prev_theme_nav_menu_locations );
 
 		$expected_nav_menu_locations = $prev_theme_nav_menu_locations;
-		$this->assertEquals( $expected_nav_menu_locations, $new_next_theme_nav_menu_locations );
+		$this->assertSame( $expected_nav_menu_locations, $new_next_theme_nav_menu_locations );
 	}
 
 	/**
 	 * If the new theme was previously active, we should honor any changes to nav menu mapping done when the other theme was active.
 	 *
-	 * @covers ::wp_map_nav_menu_locations()
+	 * @covers ::wp_map_nav_menu_locations
 	 */
 	function test_new_theme_previously_active() {
 		$this->register_nav_menu_locations( array( 'primary' ) );
@@ -109,13 +109,13 @@ class Tests_Nav_Menu_Theme_Change extends WP_UnitTestCase {
 		$new_next_theme_nav_menu_locations = wp_map_nav_menu_locations( $old_next_theme_nav_menu_locations, $prev_theme_nav_menu_locations );
 
 		$expected_nav_menu_locations = wp_array_slice_assoc( $prev_theme_nav_menu_locations, array_keys( get_registered_nav_menus() ) );
-		$this->assertEquals( $expected_nav_menu_locations, $new_next_theme_nav_menu_locations );
+		$this->assertSame( $expected_nav_menu_locations, $new_next_theme_nav_menu_locations );
 	}
 
 	/**
 	 * Make educated guesses on theme locations.
 	 *
-	 * @covers ::wp_map_nav_menu_locations()
+	 * @covers ::wp_map_nav_menu_locations
 	 */
 	function test_location_guessing() {
 		$this->register_nav_menu_locations( array( 'primary', 'secondary' ) );
@@ -132,13 +132,13 @@ class Tests_Nav_Menu_Theme_Change extends WP_UnitTestCase {
 			'primary'   => 1,
 			'secondary' => 2,
 		);
-		$this->assertEquals( $expected_nav_menu_locations, $new_next_theme_nav_menu_locations );
+		$this->assertSame( $expected_nav_menu_locations, $new_next_theme_nav_menu_locations );
 	}
 
 	/**
 	 * Make sure two locations that fall in the same group don't get the same menu assigned.
 	 *
-	 * @covers ::wp_map_nav_menu_locations()
+	 * @covers ::wp_map_nav_menu_locations
 	 */
 	function test_location_guessing_one_menu_per_group() {
 		$this->register_nav_menu_locations( array( 'primary' ) );
@@ -153,13 +153,13 @@ class Tests_Nav_Menu_Theme_Change extends WP_UnitTestCase {
 		$expected_nav_menu_locations = array(
 			'main' => 1,
 		);
-		$this->assertEqualSets( $expected_nav_menu_locations, $new_next_theme_nav_menu_locations );
+		$this->assertSameSets( $expected_nav_menu_locations, $new_next_theme_nav_menu_locations );
 	}
 
 	/**
 	 * Make sure two locations that fall in the same group get menus assigned from the same group.
 	 *
-	 * @covers ::wp_map_nav_menu_locations()
+	 * @covers ::wp_map_nav_menu_locations
 	 */
 	function test_location_guessing_one_menu_per_location() {
 		$this->register_nav_menu_locations( array( 'primary', 'main' ) );
@@ -176,7 +176,7 @@ class Tests_Nav_Menu_Theme_Change extends WP_UnitTestCase {
 			'primary' => 1,
 			'main'    => 2,
 		);
-		$this->assertEquals( $expected_nav_menu_locations, $new_next_theme_nav_menu_locations );
+		$this->assertSame( $expected_nav_menu_locations, $new_next_theme_nav_menu_locations );
 	}
 
 	/**
@@ -184,7 +184,7 @@ class Tests_Nav_Menu_Theme_Change extends WP_UnitTestCase {
 	 *
 	 * @expectedIncorrectUsage register_nav_menus
 	 *
-	 * @covers ::wp_map_nav_menu_locations()
+	 * @covers ::wp_map_nav_menu_locations
 	 */
 	function test_numerical_locations() {
 		$this->register_nav_menu_locations( array( 'primary', 1 ) );
@@ -201,7 +201,7 @@ class Tests_Nav_Menu_Theme_Change extends WP_UnitTestCase {
 		$expected_nav_menu_locations = array(
 			'primary' => 1,
 		);
-		$this->assertEqualSets( $expected_nav_menu_locations, $new_next_theme_nav_menu_locations );
+		$this->assertSameSets( $expected_nav_menu_locations, $new_next_theme_nav_menu_locations );
 	}
 
 	/**
@@ -209,7 +209,7 @@ class Tests_Nav_Menu_Theme_Change extends WP_UnitTestCase {
 	 *
 	 * @expectedIncorrectUsage register_nav_menus
 	 *
-	 * @covers wp_map_nav_menu_locations()
+	 * @covers ::wp_map_nav_menu_locations
 	 */
 	public function test_numerical_old_locations() {
 		$this->register_nav_menu_locations( array( 'primary', 1 ) );
@@ -228,6 +228,6 @@ class Tests_Nav_Menu_Theme_Change extends WP_UnitTestCase {
 			0         => 3,
 		);
 
-		$this->assertEqualSets( $expected_nav_menu_locations, $new_next_theme_nav_menu_locations );
+		$this->assertSameSets( $expected_nav_menu_locations, $new_next_theme_nav_menu_locations );
 	}
 }
diff --git a/tests/menu/walker-nav-menu-edit.php b/tests/menu/walker-nav-menu-edit.php
index 62485f36f2..0a8936bb40 100644
--- a/tests/menu/walker-nav-menu-edit.php
+++ b/tests/menu/walker-nav-menu-edit.php
@@ -13,7 +13,7 @@ class Tests_Menu_Walker_Nav_Menu_Edit extends WP_UnitTestCase {
 		parent::setUp();
 
 		/** Walker_Nav_Menu_Edit class */
-		require_once( ABSPATH . 'wp-admin/includes/class-walker-nav-menu-edit.php' );
+		require_once ABSPATH . 'wp-admin/includes/class-walker-nav-menu-edit.php';
 
 		$this->walker = new Walker_Nav_Menu_Edit();
 
diff --git a/tests/menu/wpAjaxMenuQuickSearch.php b/tests/menu/wpAjaxMenuQuickSearch.php
index b5df3a188c..c78161d123 100644
--- a/tests/menu/wpAjaxMenuQuickSearch.php
+++ b/tests/menu/wpAjaxMenuQuickSearch.php
@@ -36,7 +36,7 @@ class Tests_Menu_WpAjaxMenuQuickSeach extends WP_UnitTestCase {
 	 * @ticket 27042
 	 */
 	public function test_search_returns_results_for_pages() {
-		include_once ABSPATH . 'wp-admin/includes/nav-menu.php';
+		require_once ABSPATH . 'wp-admin/includes/nav-menu.php';
 
 		self::factory()->post->create_many(
 			3,
@@ -120,4 +120,30 @@ class Tests_Menu_WpAjaxMenuQuickSeach extends WP_UnitTestCase {
 		$results = explode( "\n", trim( $output ) );
 		$this->assertCount( 1, $results );
 	}
+
+	/**
+	 * Test that search displays terms that are not assigned to any posts.
+	 *
+	 * @ticket 45298
+	 */
+	public function test_search_should_return_unassigned_term_items() {
+		register_taxonomy( 'wptests_tax', 'post' );
+
+		$this->factory->term->create(
+			array(
+				'taxonomy' => 'wptests_tax',
+				'name'     => 'foobar',
+			)
+		);
+
+		$request = array(
+			'type' => 'quick-search-taxonomy-wptests_tax',
+			'q'    => 'foobar',
+		);
+		$output  = get_echo( '_wp_ajax_menu_quick_search', array( $request ) );
+
+		$this->assertNotEmpty( $output );
+		$results = explode( "\n", trim( $output ) );
+		$this->assertCount( 1, $results );
+	}
 }
diff --git a/tests/menu/wpExpandNavMenuPostData.php b/tests/menu/wpExpandNavMenuPostData.php
index ade6d0e67f..7d5c21fde8 100644
--- a/tests/menu/wpExpandNavMenuPostData.php
+++ b/tests/menu/wpExpandNavMenuPostData.php
@@ -6,7 +6,7 @@
  */
 class Tests_Menu_WpExpandNavMenuPostData extends WP_UnitTestCase {
 	public function test_unnested_data_should_expand() {
-		include_once( ABSPATH . 'wp-admin/includes/nav-menu.php' );
+		require_once ABSPATH . 'wp-admin/includes/nav-menu.php';
 
 		if ( empty( $_POST ) ) {
 			$_POST = array();
@@ -25,11 +25,11 @@ class Tests_Menu_WpExpandNavMenuPostData extends WP_UnitTestCase {
 			'yesorno'       => 'yes',
 		);
 
-		$this->assertEquals( $expected, $_POST );
+		$this->assertSame( $expected, $_POST );
 	}
 
 	public function test_multidimensional_nested_array_should_expand() {
-		include_once( ABSPATH . 'wp-admin/includes/nav-menu.php' );
+		require_once ABSPATH . 'wp-admin/includes/nav-menu.php';
 
 		if ( empty( $_POST ) ) {
 			$_POST = array();
@@ -55,11 +55,11 @@ class Tests_Menu_WpExpandNavMenuPostData extends WP_UnitTestCase {
 				),
 			),
 		);
-		$this->assertEquals( $expected, $_POST );
+		$this->assertSame( $expected, $_POST );
 	}
 
 	public function test_multidimensional_nested_array_should_expand_and_merge() {
-		include_once( ABSPATH . 'wp-admin/includes/nav-menu.php' );
+		require_once ABSPATH . 'wp-admin/includes/nav-menu.php';
 
 		if ( empty( $_POST ) ) {
 			$_POST = array();
@@ -100,6 +100,6 @@ class Tests_Menu_WpExpandNavMenuPostData extends WP_UnitTestCase {
 			),
 		);
 
-		$this->assertEquals( $expected, $_POST );
+		$this->assertSame( $expected, $_POST );
 	}
 }
diff --git a/tests/meta.php b/tests/meta.php
index c2cc6663b9..a99674c973 100644
--- a/tests/meta.php
+++ b/tests/meta.php
@@ -19,54 +19,54 @@ class Tests_Meta extends WP_UnitTestCase {
 
 	function test_sanitize_meta() {
 		$meta = sanitize_meta( 'some_meta', 'unsanitized', 'post' );
-		$this->assertEquals( 'unsanitized', $meta );
+		$this->assertSame( 'unsanitized', $meta );
 
 		register_meta( 'post', 'some_meta', array( $this, '_meta_sanitize_cb' ) );
 		$meta = sanitize_meta( 'some_meta', 'unsanitized', 'post' );
-		$this->assertEquals( 'sanitized', $meta );
+		$this->assertSame( 'sanitized', $meta );
 	}
 
 	function test_delete_metadata_by_mid() {
-		// Let's try and delete a non-existing ID, non existing meta
+		// Let's try and delete a non-existing ID, non existing meta.
 		$this->assertFalse( delete_metadata_by_mid( 'user', 0 ) );
 		$this->assertFalse( delete_metadata_by_mid( 'non_existing_meta', $this->delete_meta_id ) );
 
-		// Now let's delete the real meta data
+		// Now let's delete the real meta data.
 		$this->assertTrue( delete_metadata_by_mid( 'user', $this->delete_meta_id ) );
 
-		// And make sure it's been deleted
+		// And make sure it's been deleted.
 		$this->assertFalse( get_metadata_by_mid( 'user', $this->delete_meta_id ) );
 
-		// Make sure the caches are cleared
+		// Make sure the caches are cleared.
 		$this->assertFalse( (bool) get_user_meta( $this->author->ID, 'delete_meta_key' ) );
 	}
 
 	function test_update_metadata_by_mid() {
-		// Setup
+		// Setup.
 		$meta = get_metadata_by_mid( 'user', $this->meta_id );
 
-		// Update the meta value
+		// Update the meta value.
 		$this->assertTrue( update_metadata_by_mid( 'user', $this->meta_id, 'meta_new_value' ) );
 		$meta = get_metadata_by_mid( 'user', $this->meta_id );
-		$this->assertEquals( 'meta_new_value', $meta->meta_value );
+		$this->assertSame( 'meta_new_value', $meta->meta_value );
 
-		// Update the meta value
+		// Update the meta value.
 		$this->assertTrue( update_metadata_by_mid( 'user', $this->meta_id, 'meta_new_value', 'meta_new_key' ) );
 		$meta = get_metadata_by_mid( 'user', $this->meta_id );
-		$this->assertEquals( 'meta_new_key', $meta->meta_key );
+		$this->assertSame( 'meta_new_key', $meta->meta_key );
 
-		// Update the key and value
+		// Update the key and value.
 		$this->assertTrue( update_metadata_by_mid( 'user', $this->meta_id, 'meta_value', 'meta_key' ) );
 		$meta = get_metadata_by_mid( 'user', $this->meta_id );
-		$this->assertEquals( 'meta_key', $meta->meta_key );
-		$this->assertEquals( 'meta_value', $meta->meta_value );
+		$this->assertSame( 'meta_key', $meta->meta_key );
+		$this->assertSame( 'meta_value', $meta->meta_value );
 
-		// Update the value that has to be serialized
+		// Update the value that has to be serialized.
 		$this->assertTrue( update_metadata_by_mid( 'user', $this->meta_id, array( 'first', 'second' ) ) );
 		$meta = get_metadata_by_mid( 'user', $this->meta_id );
-		$this->assertEquals( array( 'first', 'second' ), $meta->meta_value );
+		$this->assertSame( array( 'first', 'second' ), $meta->meta_value );
 
-		// Let's try some invalid meta data
+		// Let's try some invalid meta data.
 		$this->assertFalse( update_metadata_by_mid( 'user', 0, 'meta_value' ) );
 		$this->assertFalse( update_metadata_by_mid( 'user', $this->meta_id, 'meta_value', array( 'invalid', 'key' ) ) );
 
@@ -117,7 +117,7 @@ class Tests_Meta extends WP_UnitTestCase {
 	function test_metadata_exists_with_filter() {
 		// Let's see if it returns the correct value when adding a filter.
 		add_filter( 'get_user_metadata', '__return_zero' );
-		$this->assertFalse( metadata_exists( 'user', $this->author->ID, 'meta_key' ) ); // existing meta key
+		$this->assertFalse( metadata_exists( 'user', $this->author->ID, 'meta_key' ) ); // Existing meta key.
 		$this->assertFalse( metadata_exists( 'user', 1234567890, 'meta_key' ) );
 		remove_filter( 'get_user_metadata', '__return_zero' );
 	}
@@ -137,13 +137,13 @@ class Tests_Meta extends WP_UnitTestCase {
 			)
 		);
 
-		$this->assertEquals( 1, count( $u ) );
+		$this->assertSame( 1, count( $u ) );
 
-		// User found is not locally defined author (it's the admin)
+		// User found is not locally defined author (it's the admin).
 		$this->assertNotEquals( $this->author->user_login, $u[0]->user_login );
 
-		// Test EXISTS and NOT EXISTS together, no users should be found
-		$this->assertEquals(
+		// Test EXISTS and NOT EXISTS together, no users should be found.
+		$this->assertSame(
 			0,
 			count(
 				get_users(
@@ -163,7 +163,7 @@ class Tests_Meta extends WP_UnitTestCase {
 			)
 		);
 
-		$this->assertEquals(
+		$this->assertSame(
 			2,
 			count(
 				get_users(
@@ -181,7 +181,7 @@ class Tests_Meta extends WP_UnitTestCase {
 
 		delete_metadata( 'user', $this->author->ID, 'meta_key' );
 
-		$this->assertEquals(
+		$this->assertSame(
 			2,
 			count(
 				get_users(
@@ -208,24 +208,24 @@ class Tests_Meta extends WP_UnitTestCase {
 		$this->assertFalse( delete_metadata( 'user', $this->author->ID, $key ) );
 		$this->assertSame( '', get_metadata( 'user', $this->author->ID, $key, true ) );
 		$this->assertInternalType( 'int', add_metadata( 'user', $this->author->ID, $key, $value ) );
-		$this->assertEquals( $expected, get_metadata( 'user', $this->author->ID, $key, true ) );
+		$this->assertSame( $expected, get_metadata( 'user', $this->author->ID, $key, true ) );
 		$this->assertTrue( delete_metadata( 'user', $this->author->ID, $key ) );
 		$this->assertSame( '', get_metadata( 'user', $this->author->ID, $key, true ) );
 		$this->assertInternalType( 'int', update_metadata( 'user', $this->author->ID, $key, $value ) );
-		$this->assertEquals( $expected, get_metadata( 'user', $this->author->ID, $key, true ) );
+		$this->assertSame( $expected, get_metadata( 'user', $this->author->ID, $key, true ) );
 		$this->assertTrue( update_metadata( 'user', $this->author->ID, $key, 'blah' ) );
-		$this->assertEquals( 'blah', get_metadata( 'user', $this->author->ID, $key, true ) );
+		$this->assertSame( 'blah', get_metadata( 'user', $this->author->ID, $key, true ) );
 		$this->assertTrue( delete_metadata( 'user', $this->author->ID, $key ) );
 		$this->assertSame( '', get_metadata( 'user', $this->author->ID, $key, true ) );
 		$this->assertFalse( metadata_exists( 'user', $this->author->ID, $key ) );
 
-		// Test overslashing
+		// Test overslashing.
 		$this->assertInternalType( 'int', add_metadata( 'user', $this->author->ID, $key, $value2 ) );
-		$this->assertEquals( $expected2, get_metadata( 'user', $this->author->ID, $key, true ) );
+		$this->assertSame( $expected2, get_metadata( 'user', $this->author->ID, $key, true ) );
 		$this->assertTrue( delete_metadata( 'user', $this->author->ID, $key ) );
 		$this->assertSame( '', get_metadata( 'user', $this->author->ID, $key, true ) );
 		$this->assertInternalType( 'int', update_metadata( 'user', $this->author->ID, $key, $value2 ) );
-		$this->assertEquals( $expected2, get_metadata( 'user', $this->author->ID, $key, true ) );
+		$this->assertSame( $expected2, get_metadata( 'user', $this->author->ID, $key, true ) );
 	}
 
 	/**
@@ -252,10 +252,10 @@ class Tests_Meta extends WP_UnitTestCase {
 			)
 		);
 
-		$this->assertEquals( array( $post_id2, $post_id1 ), $posts->posts );
-		$this->assertEquals( 2, substr_count( $posts->request, 'CAST(' ) );
+		$this->assertSame( array( $post_id2, $post_id1 ), $posts->posts );
+		$this->assertSame( 2, substr_count( $posts->request, 'CAST(' ) );
 
-		// Make sure the newer meta_query syntax behaves in a consistent way
+		// Make sure the newer meta_query syntax behaves in a consistent way.
 		$posts = new WP_Query(
 			array(
 				'fields'     => 'ids',
@@ -273,8 +273,8 @@ class Tests_Meta extends WP_UnitTestCase {
 			)
 		);
 
-		$this->assertEquals( array( $post_id2, $post_id1 ), $posts->posts );
-		$this->assertEquals( 2, substr_count( $posts->request, 'CAST(' ) );
+		$this->assertSame( array( $post_id2, $post_id1 ), $posts->posts );
+		$this->assertSame( 2, substr_count( $posts->request, 'CAST(' ) );
 
 		// The legacy `meta_key` value should take precedence.
 		$posts = new WP_Query(
@@ -297,8 +297,8 @@ class Tests_Meta extends WP_UnitTestCase {
 			)
 		);
 
-		$this->assertEquals( array( $post_id2, $post_id1 ), $posts->posts );
-		$this->assertEquals( 2, substr_count( $posts->request, 'CAST(' ) );
+		$this->assertSame( array( $post_id2, $post_id1 ), $posts->posts );
+		$this->assertSame( 2, substr_count( $posts->request, 'CAST(' ) );
 	}
 
 	function test_meta_cache_order_asc() {
@@ -310,7 +310,7 @@ class Tests_Meta extends WP_UnitTestCase {
 
 		foreach ( range( 1, 10 ) as $i ) {
 			$meta = get_post_meta( $post_id, 'color' );
-			$this->assertEquals( $meta, $colors );
+			$this->assertSame( $meta, $colors );
 
 			if ( 0 === $i % 2 ) {
 				wp_cache_delete( $post_id, 'post_meta' );
@@ -372,9 +372,9 @@ class Tests_Meta extends WP_UnitTestCase {
 
 		// phpcs:ignore WordPress.PHP.StrictComparisons.LooseComparison -- intentional implicit casting check
 		$this->assertTrue( floor( $string_mid ) == $string_mid );
-		$this->assertNotEquals( false, get_metadata_by_mid( 'user', $string_mid ) );
-		$this->assertNotEquals( false, update_metadata_by_mid( 'user', $string_mid, 'meta_new_value_2' ) );
-		$this->assertNotEquals( false, delete_metadata_by_mid( 'user', $string_mid ) );
+		$this->assertNotFalse( get_metadata_by_mid( 'user', $string_mid ) );
+		$this->assertNotFalse( update_metadata_by_mid( 'user', $string_mid, 'meta_new_value_2' ) );
+		$this->assertNotFalse( delete_metadata_by_mid( 'user', $string_mid ) );
 	}
 
 	/**
@@ -399,7 +399,7 @@ class Tests_Meta extends WP_UnitTestCase {
 		add_metadata( 'user', $this->author->ID, 'foo', $data );
 		$found = get_metadata( 'user', $this->author->ID );
 
-		$this->assertEquals( array( $value ), $found['foo'] );
+		$this->assertSame( array( $value ), $found['foo'] );
 	}
 
 	/**
diff --git a/tests/meta/deleteMetadata.php b/tests/meta/deleteMetadata.php
index 024ac5b526..ce004291bd 100644
--- a/tests/meta/deleteMetadata.php
+++ b/tests/meta/deleteMetadata.php
@@ -10,11 +10,11 @@ class Tests_Meta_DeleteMetadata extends WP_UnitTestCase {
 			add_metadata( 'post', 12345, 'foo', $val );
 		}
 		$m = get_metadata( 'post', 12345, 'foo', false );
-		$this->assertEqualSets( $vals, $m );
+		$this->assertSameSets( $vals, $m );
 
 		delete_metadata( 'post', 12345, 'foo' );
 		$m = get_metadata( 'post', 12345, 'foo', false );
-		$this->assertEqualSets( array(), $m );
+		$this->assertSameSets( array(), $m );
 	}
 
 	public function test_with_meta_value() {
@@ -23,13 +23,13 @@ class Tests_Meta_DeleteMetadata extends WP_UnitTestCase {
 			add_metadata( 'post', 12345, 'foo', $val );
 		}
 		$m = get_metadata( 'post', 12345, 'foo', false );
-		$this->assertEqualSets( $vals, $m );
+		$this->assertSameSets( $vals, $m );
 
 		delete_metadata( 'post', 12345, 'foo', '1' );
 		$m        = get_metadata( 'post', 12345, 'foo', false );
 		$expected = array_diff( $vals, array( '1' ) );
 
-		$this->assertEqualSets( $expected, $m );
+		$this->assertSameSets( $expected, $m );
 	}
 
 	/**
@@ -41,13 +41,13 @@ class Tests_Meta_DeleteMetadata extends WP_UnitTestCase {
 			add_metadata( 'post', 12345, 'foo', $val );
 		}
 		$m = get_metadata( 'post', 12345, 'foo', false );
-		$this->assertEqualSets( $vals, $m );
+		$this->assertSameSets( $vals, $m );
 
 		delete_metadata( 'post', 12345, 'foo', '0' );
 		$m        = get_metadata( 'post', 12345, 'foo', false );
 		$expected = array_diff( $vals, array( '0' ) );
 
-		$this->assertEqualSets( $expected, $m );
+		$this->assertSameSets( $expected, $m );
 	}
 
 	/**
@@ -61,11 +61,11 @@ class Tests_Meta_DeleteMetadata extends WP_UnitTestCase {
 			add_metadata( 'post', 12345, 'foo', $val );
 		}
 		$m = get_metadata( 'post', 12345, 'foo', false );
-		$this->assertEqualSets( $vals, $m );
+		$this->assertSameSets( $vals, $m );
 
 		delete_metadata( 'post', 12345, 'foo', '' );
 		$m = get_metadata( 'post', 12345, 'foo', false );
-		$this->assertEqualSets( array(), $m );
+		$this->assertSameSets( array(), $m );
 	}
 
 	/**
@@ -77,11 +77,11 @@ class Tests_Meta_DeleteMetadata extends WP_UnitTestCase {
 			add_metadata( 'post', 12345, 'foo', $val );
 		}
 		$m = get_metadata( 'post', 12345, 'foo', false );
-		$this->assertEqualSets( $vals, $m );
+		$this->assertSameSets( $vals, $m );
 
 		delete_metadata( 'post', 12345, 'foo', null );
 		$m = get_metadata( 'post', 12345, 'foo', false );
-		$this->assertEqualSets( array(), $m );
+		$this->assertSameSets( array(), $m );
 	}
 
 	/**
@@ -93,11 +93,11 @@ class Tests_Meta_DeleteMetadata extends WP_UnitTestCase {
 			add_metadata( 'post', 12345, 'foo', $val );
 		}
 		$m = get_metadata( 'post', 12345, 'foo', false );
-		$this->assertEqualSets( $vals, $m );
+		$this->assertSameSets( $vals, $m );
 
 		delete_metadata( 'post', 12345, 'foo', false );
 		$m = get_metadata( 'post', 12345, 'foo', false );
-		$this->assertEqualSets( array(), $m );
+		$this->assertSameSets( array(), $m );
 	}
 
 	/**
@@ -156,7 +156,7 @@ class Tests_Meta_DeleteMetadata extends WP_UnitTestCase {
 	}
 
 	public function action_check_object_id_is_int( $meta_type, $object_id ) {
-		$this->assertEquals(
+		$this->assertSame(
 			'integer',
 			gettype( $object_id )
 		);
diff --git a/tests/meta/query.php b/tests/meta/query.php
index 4a22821ca9..bfc604379f 100644
--- a/tests/meta/query.php
+++ b/tests/meta/query.php
@@ -10,12 +10,12 @@ class Tests_Meta_Query extends WP_UnitTestCase {
 
 	public function test_empty_meta_query_param() {
 		$query = new WP_Meta_Query();
-		$this->assertSame( null, $query->relation );
+		$this->assertNull( $query->relation );
 	}
 
 	public function test_default_relation() {
 		$query = new WP_Meta_Query( array( array( 'key' => 'abc' ) ) );
-		$this->assertEquals( 'AND', $query->relation );
+		$this->assertSame( 'AND', $query->relation );
 	}
 
 	public function test_set_relation() {
@@ -27,7 +27,7 @@ class Tests_Meta_Query extends WP_UnitTestCase {
 			)
 		);
 
-		$this->assertEquals( 'AND', $query->relation );
+		$this->assertSame( 'AND', $query->relation );
 
 		$query = new WP_Meta_Query(
 			array(
@@ -36,7 +36,7 @@ class Tests_Meta_Query extends WP_UnitTestCase {
 			)
 		);
 
-		$this->assertEquals( 'OR', $query->relation );
+		$this->assertSame( 'OR', $query->relation );
 	}
 
 	/**
@@ -45,8 +45,8 @@ class Tests_Meta_Query extends WP_UnitTestCase {
 	public function test_invalid_query_clauses() {
 		$query = new WP_Meta_Query(
 			array(
-				'foo', // empty string
-				5, // int
+				'foo', // Empty string.
+				5,     // int
 				false, // bool
 				array(),
 			)
@@ -74,9 +74,9 @@ class Tests_Meta_Query extends WP_UnitTestCase {
 
 		$sql = $query->get_sql( 'post', $wpdb->posts, 'ID' );
 
-		$this->assertEquals( 1, substr_count( $sql['join'], 'INNER JOIN' ) );
+		$this->assertSame( 1, substr_count( $sql['join'], 'INNER JOIN' ) );
 
-		// also check mixing key and key => value
+		// Also check mixing key and key => value.
 
 		$query = new WP_Meta_Query(
 			array(
@@ -92,7 +92,7 @@ class Tests_Meta_Query extends WP_UnitTestCase {
 
 		$sql = $query->get_sql( 'post', $wpdb->posts, 'ID' );
 
-		$this->assertEquals( 1, substr_count( $sql['join'], 'INNER JOIN' ) );
+		$this->assertSame( 1, substr_count( $sql['join'], 'INNER JOIN' ) );
 	}
 
 	/**
@@ -120,17 +120,17 @@ class Tests_Meta_Query extends WP_UnitTestCase {
 			'compare' => 'bar',
 			'value'   => 'baz',
 		);
-		$this->assertEquals( $expected0, $query->queries[0] );
+		$this->assertSame( $expected0, $query->queries[0] );
 
 		$expected1 = array(
-			'relation' => 'OR',
 			array(
 				'key'     => 'foo1',
 				'compare' => 'baz1',
 				'value'   => 'bar1',
 			),
+			'relation' => 'OR',
 		);
-		$this->assertEquals( $expected1, $query->queries[1] );
+		$this->assertSame( $expected1, $query->queries[1] );
 	}
 
 	/**
@@ -174,27 +174,27 @@ class Tests_Meta_Query extends WP_UnitTestCase {
 
 		$query = new WP_Meta_Query();
 
-		// just meta_value
+		// Just meta_value.
 		$expected = array(
-			'relation' => 'OR',
 			array(
 				'key' => 'abc',
 			),
+			'relation' => 'OR',
 		);
 		$query->parse_query_vars(
 			array(
 				'meta_key' => 'abc',
 			)
 		);
-		$this->assertEquals( $expected, $query->queries );
+		$this->assertSame( $expected, $query->queries );
 
-		// meta_key & meta_value
+		// meta_key & meta_value.
 		$expected = array(
-			'relation' => 'OR',
 			array(
 				'key'   => 'abc',
 				'value' => 'def',
 			),
+			'relation' => 'OR',
 		);
 		$query->parse_query_vars(
 			array(
@@ -202,15 +202,15 @@ class Tests_Meta_Query extends WP_UnitTestCase {
 				'meta_value' => 'def',
 			)
 		);
-		$this->assertEquals( $expected, $query->queries );
+		$this->assertSame( $expected, $query->queries );
 
-		// meta_compare
+		// meta_compare.
 		$expected = array(
-			'relation' => 'OR',
 			array(
 				'key'     => 'abc',
 				'compare' => '=>',
 			),
+			'relation' => 'OR',
 		);
 		$query->parse_query_vars(
 			array(
@@ -218,7 +218,7 @@ class Tests_Meta_Query extends WP_UnitTestCase {
 				'meta_compare' => '=>',
 			)
 		);
-		$this->assertEquals( $expected, $query->queries );
+		$this->assertSame( $expected, $query->queries );
 	}
 
 	/**
@@ -226,42 +226,42 @@ class Tests_Meta_Query extends WP_UnitTestCase {
 	 */
 	public function test_get_cast_for_type() {
 		$query = new WP_Meta_Query();
-		$this->assertEquals( 'BINARY', $query->get_cast_for_type( 'BINARY' ) );
-		$this->assertEquals( 'CHAR', $query->get_cast_for_type( 'CHAR' ) );
-		$this->assertEquals( 'DATE', $query->get_cast_for_type( 'DATE' ) );
-		$this->assertEquals( 'DATETIME', $query->get_cast_for_type( 'DATETIME' ) );
-		$this->assertEquals( 'SIGNED', $query->get_cast_for_type( 'SIGNED' ) );
-		$this->assertEquals( 'UNSIGNED', $query->get_cast_for_type( 'UNSIGNED' ) );
-		$this->assertEquals( 'TIME', $query->get_cast_for_type( 'TIME' ) );
-		$this->assertEquals( 'SIGNED', $query->get_cast_for_type( 'NUMERIC' ) );
-		$this->assertEquals( 'NUMERIC(10)', $query->get_cast_for_type( 'NUMERIC(10)' ) );
-		$this->assertEquals( 'CHAR', $query->get_cast_for_type( 'NUMERIC( 10)' ) );
-		$this->assertEquals( 'CHAR', $query->get_cast_for_type( 'NUMERIC( 10 )' ) );
-		$this->assertEquals( 'NUMERIC(10, 5)', $query->get_cast_for_type( 'NUMERIC(10, 5)' ) );
-		$this->assertEquals( 'CHAR', $query->get_cast_for_type( 'NUMERIC(10,  5)' ) );
-		$this->assertEquals( 'NUMERIC(10,5)', $query->get_cast_for_type( 'NUMERIC(10,5)' ) );
-		$this->assertEquals( 'CHAR', $query->get_cast_for_type( 'NUMERIC( 10, 5 )' ) );
-		$this->assertEquals( 'CHAR', $query->get_cast_for_type( 'NUMERIC(10, 5 )' ) );
-		$this->assertEquals( 'DECIMAL', $query->get_cast_for_type( 'DECIMAL' ) );
-		$this->assertEquals( 'DECIMAL(10)', $query->get_cast_for_type( 'DECIMAL(10)' ) );
-		$this->assertEquals( 'CHAR', $query->get_cast_for_type( 'DECIMAL( 10 )' ) );
-		$this->assertEquals( 'CHAR', $query->get_cast_for_type( 'DECIMAL( 10)' ) );
-		$this->assertEquals( 'CHAR', $query->get_cast_for_type( 'DECIMAL(10 )' ) );
-		$this->assertEquals( 'DECIMAL(10, 5)', $query->get_cast_for_type( 'DECIMAL(10, 5)' ) );
-		$this->assertEquals( 'DECIMAL(10,5)', $query->get_cast_for_type( 'DECIMAL(10,5)' ) );
-		$this->assertEquals( 'CHAR', $query->get_cast_for_type( 'DECIMAL(10,  5)' ) );
-
-		$this->assertEquals( 'CHAR', $query->get_cast_for_type() );
-		$this->assertEquals( 'CHAR', $query->get_cast_for_type( 'ANYTHING ELSE' ) );
+		$this->assertSame( 'BINARY', $query->get_cast_for_type( 'BINARY' ) );
+		$this->assertSame( 'CHAR', $query->get_cast_for_type( 'CHAR' ) );
+		$this->assertSame( 'DATE', $query->get_cast_for_type( 'DATE' ) );
+		$this->assertSame( 'DATETIME', $query->get_cast_for_type( 'DATETIME' ) );
+		$this->assertSame( 'SIGNED', $query->get_cast_for_type( 'SIGNED' ) );
+		$this->assertSame( 'UNSIGNED', $query->get_cast_for_type( 'UNSIGNED' ) );
+		$this->assertSame( 'TIME', $query->get_cast_for_type( 'TIME' ) );
+		$this->assertSame( 'SIGNED', $query->get_cast_for_type( 'NUMERIC' ) );
+		$this->assertSame( 'NUMERIC(10)', $query->get_cast_for_type( 'NUMERIC(10)' ) );
+		$this->assertSame( 'CHAR', $query->get_cast_for_type( 'NUMERIC( 10)' ) );
+		$this->assertSame( 'CHAR', $query->get_cast_for_type( 'NUMERIC( 10 )' ) );
+		$this->assertSame( 'NUMERIC(10, 5)', $query->get_cast_for_type( 'NUMERIC(10, 5)' ) );
+		$this->assertSame( 'CHAR', $query->get_cast_for_type( 'NUMERIC(10,  5)' ) );
+		$this->assertSame( 'NUMERIC(10,5)', $query->get_cast_for_type( 'NUMERIC(10,5)' ) );
+		$this->assertSame( 'CHAR', $query->get_cast_for_type( 'NUMERIC( 10, 5 )' ) );
+		$this->assertSame( 'CHAR', $query->get_cast_for_type( 'NUMERIC(10, 5 )' ) );
+		$this->assertSame( 'DECIMAL', $query->get_cast_for_type( 'DECIMAL' ) );
+		$this->assertSame( 'DECIMAL(10)', $query->get_cast_for_type( 'DECIMAL(10)' ) );
+		$this->assertSame( 'CHAR', $query->get_cast_for_type( 'DECIMAL( 10 )' ) );
+		$this->assertSame( 'CHAR', $query->get_cast_for_type( 'DECIMAL( 10)' ) );
+		$this->assertSame( 'CHAR', $query->get_cast_for_type( 'DECIMAL(10 )' ) );
+		$this->assertSame( 'DECIMAL(10, 5)', $query->get_cast_for_type( 'DECIMAL(10, 5)' ) );
+		$this->assertSame( 'DECIMAL(10,5)', $query->get_cast_for_type( 'DECIMAL(10,5)' ) );
+		$this->assertSame( 'CHAR', $query->get_cast_for_type( 'DECIMAL(10,  5)' ) );
+
+		$this->assertSame( 'CHAR', $query->get_cast_for_type() );
+		$this->assertSame( 'CHAR', $query->get_cast_for_type( 'ANYTHING ELSE' ) );
 	}
 
 	public function test_sanitize_query_single_query() {
 		$expected = array(
-			'relation' => 'OR',
 			array(
 				'key'   => 'foo',
 				'value' => 'bar',
 			),
+			'relation' => 'OR',
 		);
 
 		$q     = new WP_Meta_Query();
@@ -274,12 +274,11 @@ class Tests_Meta_Query extends WP_UnitTestCase {
 			)
 		);
 
-		$this->assertEquals( $expected, $found );
+		$this->assertSame( $expected, $found );
 	}
 
 	public function test_sanitize_query_multiple_first_order_queries_relation_default() {
 		$expected = array(
-			'relation' => 'AND',
 			array(
 				'key'   => 'foo',
 				'value' => 'bar',
@@ -288,6 +287,7 @@ class Tests_Meta_Query extends WP_UnitTestCase {
 				'key'   => 'foo2',
 				'value' => 'bar2',
 			),
+			'relation' => 'AND',
 		);
 
 		$q     = new WP_Meta_Query();
@@ -304,12 +304,11 @@ class Tests_Meta_Query extends WP_UnitTestCase {
 			)
 		);
 
-		$this->assertEquals( $expected, $found );
+		$this->assertSame( $expected, $found );
 	}
 
 	public function test_sanitize_query_multiple_first_order_queries_relation_or() {
 		$expected = array(
-			'relation' => 'OR',
 			array(
 				'key'   => 'foo',
 				'value' => 'bar',
@@ -318,12 +317,12 @@ class Tests_Meta_Query extends WP_UnitTestCase {
 				'key'   => 'foo2',
 				'value' => 'bar2',
 			),
+			'relation' => 'OR',
 		);
 
 		$q     = new WP_Meta_Query();
 		$found = $q->sanitize_query(
 			array(
-				'relation' => 'OR',
 				array(
 					'key'   => 'foo',
 					'value' => 'bar',
@@ -332,15 +331,15 @@ class Tests_Meta_Query extends WP_UnitTestCase {
 					'key'   => 'foo2',
 					'value' => 'bar2',
 				),
+				'relation' => 'OR',
 			)
 		);
 
-		$this->assertEquals( $expected, $found );
+		$this->assertSame( $expected, $found );
 	}
 
 	public function test_sanitize_query_multiple_first_order_queries_relation_or_lowercase() {
 		$expected = array(
-			'relation' => 'OR',
 			array(
 				'key'   => 'foo',
 				'value' => 'bar',
@@ -349,12 +348,12 @@ class Tests_Meta_Query extends WP_UnitTestCase {
 				'key'   => 'foo2',
 				'value' => 'bar2',
 			),
+			'relation' => 'OR',
 		);
 
 		$q     = new WP_Meta_Query();
 		$found = $q->sanitize_query(
 			array(
-				'relation' => 'or',
 				array(
 					'key'   => 'foo',
 					'value' => 'bar',
@@ -363,15 +362,15 @@ class Tests_Meta_Query extends WP_UnitTestCase {
 					'key'   => 'foo2',
 					'value' => 'bar2',
 				),
+				'relation' => 'or',
 			)
 		);
 
-		$this->assertEquals( $expected, $found );
+		$this->assertSame( $expected, $found );
 	}
 
 	public function test_sanitize_query_multiple_first_order_queries_invalid_relation() {
 		$expected = array(
-			'relation' => 'AND',
 			array(
 				'key'   => 'foo',
 				'value' => 'bar',
@@ -380,12 +379,12 @@ class Tests_Meta_Query extends WP_UnitTestCase {
 				'key'   => 'foo2',
 				'value' => 'bar2',
 			),
+			'relation' => 'AND',
 		);
 
 		$q     = new WP_Meta_Query();
 		$found = $q->sanitize_query(
 			array(
-				'relation' => 'FOO',
 				array(
 					'key'   => 'foo',
 					'value' => 'bar',
@@ -394,17 +393,16 @@ class Tests_Meta_Query extends WP_UnitTestCase {
 					'key'   => 'foo2',
 					'value' => 'bar2',
 				),
+				'relation' => 'FOO',
 			)
 		);
 
-		$this->assertEquals( $expected, $found );
+		$this->assertSame( $expected, $found );
 	}
 
 	public function test_sanitize_query_single_query_which_is_a_nested_query() {
 		$expected = array(
-			'relation' => 'OR',
 			array(
-				'relation' => 'AND',
 				array(
 					'key'   => 'foo',
 					'value' => 'bar',
@@ -413,7 +411,9 @@ class Tests_Meta_Query extends WP_UnitTestCase {
 					'key'   => 'foo2',
 					'value' => 'bar2',
 				),
+				'relation' => 'AND',
 			),
+			'relation' => 'OR',
 		);
 
 		$q     = new WP_Meta_Query();
@@ -432,14 +432,12 @@ class Tests_Meta_Query extends WP_UnitTestCase {
 			)
 		);
 
-		$this->assertEquals( $expected, $found );
+		$this->assertSame( $expected, $found );
 	}
 
 	public function test_sanitize_query_multiple_nested_queries() {
 		$expected = array(
-			'relation' => 'OR',
 			array(
-				'relation' => 'AND',
 				array(
 					'key'   => 'foo',
 					'value' => 'bar',
@@ -448,9 +446,9 @@ class Tests_Meta_Query extends WP_UnitTestCase {
 					'key'   => 'foo2',
 					'value' => 'bar2',
 				),
+				'relation' => 'AND',
 			),
 			array(
-				'relation' => 'AND',
 				array(
 					'key'   => 'foo3',
 					'value' => 'bar3',
@@ -459,13 +457,14 @@ class Tests_Meta_Query extends WP_UnitTestCase {
 					'key'   => 'foo4',
 					'value' => 'bar4',
 				),
+				'relation' => 'AND',
 			),
+			'relation' => 'OR',
 		);
 
 		$q     = new WP_Meta_Query();
 		$found = $q->sanitize_query(
 			array(
-				'relation' => 'OR',
 				array(
 					array(
 						'key'   => 'foo',
@@ -486,10 +485,11 @@ class Tests_Meta_Query extends WP_UnitTestCase {
 						'value' => 'bar4',
 					),
 				),
+				'relation' => 'OR',
 			)
 		);
 
-		$this->assertEquals( $expected, $found );
+		$this->assertSame( $expected, $found );
 	}
 
 	/**
@@ -528,7 +528,7 @@ class Tests_Meta_Query extends WP_UnitTestCase {
 
 		$sql = $query->get_sql( 'post', $wpdb->posts, 'ID', $this );
 
-		$this->assertEquals( 3, substr_count( $sql['join'], 'JOIN' ) );
+		$this->assertSame( 3, substr_count( $sql['join'], 'JOIN' ) );
 	}
 
 	/**
@@ -548,7 +548,7 @@ class Tests_Meta_Query extends WP_UnitTestCase {
 		);
 		$sql   = $query->get_sql( 'post', $wpdb->posts, 'ID', $this );
 
-		$this->assertEquals( 1, substr_count( $sql['where'], "$wpdb->postmeta.meta_value = ''" ) );
+		$this->assertSame( 1, substr_count( $sql['where'], "$wpdb->postmeta.meta_value = ''" ) );
 	}
 
 	/**
@@ -560,68 +560,68 @@ class Tests_Meta_Query extends WP_UnitTestCase {
 
 		$query1 = new WP_Meta_Query(
 			array(
-				'relation' => 'OR',
-
-				// Empty 'compare'
+				// Empty 'compare'.
 				array(
 					'key' => 'foo',
 				),
 
-				// Non-empty 'compare'
+				// Non-empty 'compare'.
 				array(
 					'key'     => 'bar',
 					'compare' => '<',
 				),
 
-				// NOT EXISTS
+				// NOT EXISTS.
 				array(
 					'key'     => 'baz',
 					'compare' => 'NOT EXISTS',
 				),
 
-				// Has a value
+				// Has a value.
 				array(
 					'key'   => 'barry',
 					'value' => 'foo',
 				),
 
-				// Has no key
+				// Has no key.
 				array(
 					'value' => 'bar',
 				),
+
+				'relation' => 'OR',
 			)
 		);
 
 		$sql = $query1->get_sql( 'post', $wpdb->posts, 'ID', $this );
 
-		// 'foo' and 'bar' should be queried against the non-aliased table
+		// 'foo' and 'bar' should be queried against the non-aliased table.
 		$this->assertSame( 1, substr_count( $sql['where'], "$wpdb->postmeta.meta_key = 'foo'" ) );
 		$this->assertSame( 1, substr_count( $sql['where'], "$wpdb->postmeta.meta_key = 'bar'" ) );
 
-		// NOT EXISTS compare queries are not key-only so should not be non-aliased
+		// NOT EXISTS compare queries are not key-only so should not be non-aliased.
 		$this->assertSame( 0, substr_count( $sql['where'], "$wpdb->postmeta.meta_key = 'baz'" ) );
 
-		// 'AND' queries don't have key-only queries
+		// 'AND' queries don't have key-only queries.
 		$query2 = new WP_Meta_Query(
 			array(
-				'relation' => 'AND',
-
-				// Empty 'compare'
+				// Empty 'compare'.
 				array(
 					'key' => 'foo',
 				),
 
-				// Non-empty 'compare'
+				// Non-empty 'compare'.
 				array(
 					'key'     => 'bar',
 					'compare' => '<',
 				),
+
+				'relation' => 'AND',
 			)
 		);
 
 		$sql = $query2->get_sql( 'post', $wpdb->posts, 'ID', $this );
 
-		// Only 'foo' should be queried against the non-aliased table
+		// Only 'foo' should be queried against the non-aliased table.
 		$this->assertSame( 1, substr_count( $sql['where'], "$wpdb->postmeta.meta_key = 'foo'" ) );
 		$this->assertSame( 0, substr_count( $sql['where'], "$wpdb->postmeta.meta_key = 'bar'" ) );
 	}
@@ -758,7 +758,7 @@ class Tests_Meta_Query extends WP_UnitTestCase {
 			)
 		);
 
-		$this->assertEqualSets( array( $posts[0], $posts[2] ), $q->posts );
+		$this->assertSameSets( array( $posts[0], $posts[2] ), $q->posts );
 
 		$q = new WP_Query(
 			array(
@@ -770,7 +770,7 @@ class Tests_Meta_Query extends WP_UnitTestCase {
 			)
 		);
 
-		$this->assertEqualSets( array( $posts[0] ), $q->posts );
+		$this->assertSameSets( array( $posts[0] ), $q->posts );
 	}
 
 	/**
@@ -887,7 +887,6 @@ class Tests_Meta_Query extends WP_UnitTestCase {
 
 		$query = new WP_Meta_Query(
 			array(
-				'relation' => 'OR',
 				array(
 					'key'     => 'exclude',
 					'compare' => 'NOT EXISTS',
@@ -897,6 +896,7 @@ class Tests_Meta_Query extends WP_UnitTestCase {
 					'compare' => '!=',
 					'value'   => '1',
 				),
+				'relation' => 'OR',
 			)
 		);
 
@@ -910,7 +910,6 @@ class Tests_Meta_Query extends WP_UnitTestCase {
 
 		$query = new WP_Meta_Query(
 			array(
-				'relation' => 'OR',
 				array(
 					'key'     => 'exclude',
 					'compare' => '',
@@ -920,6 +919,7 @@ class Tests_Meta_Query extends WP_UnitTestCase {
 					'compare' => '!=',
 					'value'   => '1',
 				),
+				'relation' => 'OR',
 			)
 		);
 
@@ -936,7 +936,6 @@ class Tests_Meta_Query extends WP_UnitTestCase {
 	public function test_has_or_relation_should_return_false() {
 		$q = new WP_Meta_Query(
 			array(
-				'relation' => 'AND',
 				array(
 					'key'   => 'foo',
 					'value' => 'bar',
@@ -952,6 +951,7 @@ class Tests_Meta_Query extends WP_UnitTestCase {
 						'value' => 'bar',
 					),
 				),
+				'relation' => 'AND',
 			)
 		);
 
@@ -964,7 +964,6 @@ class Tests_Meta_Query extends WP_UnitTestCase {
 	public function test_has_or_relation_should_return_true_for_top_level_or() {
 		$q = new WP_Meta_Query(
 			array(
-				'relation' => 'OR',
 				array(
 					'key'   => 'foo',
 					'value' => 'bar',
@@ -980,6 +979,7 @@ class Tests_Meta_Query extends WP_UnitTestCase {
 						'value' => 'bar',
 					),
 				),
+				'relation' => 'OR',
 			)
 		);
 
@@ -992,7 +992,6 @@ class Tests_Meta_Query extends WP_UnitTestCase {
 	public function test_has_or_relation_should_return_true_for_nested_or() {
 		$q = new WP_Meta_Query(
 			array(
-				'relation' => 'AND',
 				array(
 					'key'   => 'foo',
 					'value' => 'bar',
@@ -1008,6 +1007,7 @@ class Tests_Meta_Query extends WP_UnitTestCase {
 						'value' => 'bar',
 					),
 				),
+				'relation' => 'AND',
 			)
 		);
 
diff --git a/tests/meta/registerMeta.php b/tests/meta/registerMeta.php
index 334a2320d0..22c282c437 100644
--- a/tests/meta/registerMeta.php
+++ b/tests/meta/registerMeta.php
@@ -45,7 +45,7 @@ class Tests_Meta_Register_Meta extends WP_UnitTestCase {
 		remove_filter( 'auth_post_meta_flight_number', array( $this, '_old_auth_meta_cb' ) );
 
 		// The filter should have been added with a priority of 10.
-		$this->assertEquals( 10, $has_filter );
+		$this->assertSame( 10, $has_filter );
 	}
 
 	public function test_register_meta_back_compat_with_sanitize_callback_and_no_auth_callback_has_old_style_sanitize_filter() {
@@ -53,7 +53,7 @@ class Tests_Meta_Register_Meta extends WP_UnitTestCase {
 		$has_filter = has_filter( 'sanitize_post_meta_flight_number', array( $this, '_old_sanitize_meta_cb' ) );
 		remove_filter( 'sanitize_post_meta_flight_number', array( $this, '_old_sanitize_meta_cb' ) );
 
-		$this->assertEquals( 10, $has_filter );
+		$this->assertSame( 10, $has_filter );
 	}
 
 	public function test_register_meta_back_compat_with_auth_and_sanitize_callback_has_old_style_filters() {
@@ -64,7 +64,7 @@ class Tests_Meta_Register_Meta extends WP_UnitTestCase {
 		remove_filter( 'auth_post_meta_flight_number', array( $this, '_old_auth_meta_cb' ) );
 		remove_filter( 'sanitize_post_meta_flight_number', array( $this, '_old_sanitize_meta_cb' ) );
 
-		$this->assertEquals(
+		$this->assertSame(
 			array(
 				'auth'     => 10,
 				'sanitize' => 10,
@@ -102,7 +102,7 @@ class Tests_Meta_Register_Meta extends WP_UnitTestCase {
 			),
 		);
 
-		$this->assertEquals( $expected, $actual );
+		$this->assertSame( $expected, $actual );
 	}
 
 	public function test_register_meta_with_term_object_type_populates_wp_meta_keys() {
@@ -126,7 +126,7 @@ class Tests_Meta_Register_Meta extends WP_UnitTestCase {
 			),
 		);
 
-		$this->assertEquals( $expected, $actual );
+		$this->assertSame( $expected, $actual );
 	}
 
 	public function test_register_meta_with_deprecated_sanitize_callback_does_not_populate_wp_meta_keys() {
@@ -137,7 +137,7 @@ class Tests_Meta_Register_Meta extends WP_UnitTestCase {
 		remove_filter( 'sanitize_post_meta_flight_number', array( $this, '_old_sanitize_meta_cb' ) );
 		remove_filter( 'auth_post_meta_flight_number', '__return_true' );
 
-		$this->assertEquals( array(), $actual );
+		$this->assertSame( array(), $actual );
 	}
 
 	public function test_register_meta_with_deprecated_sanitize_callback_param_returns_false() {
@@ -156,7 +156,7 @@ class Tests_Meta_Register_Meta extends WP_UnitTestCase {
 		remove_filter( 'sanitize_post_meta_flight_number', array( $this, '_old_sanitize_meta_cb' ) );
 		remove_filter( 'auth_post_meta_flight_number', '__return_true' );
 
-		$this->assertEquals( 'old_sanitized_key old sanitized', $meta );
+		$this->assertSame( 'old_sanitized_key old sanitized', $meta );
 	}
 
 	public function test_register_meta_with_current_sanitize_callback_populates_wp_meta_keys() {
@@ -179,7 +179,7 @@ class Tests_Meta_Register_Meta extends WP_UnitTestCase {
 				),
 			),
 		);
-		$this->assertEquals( $actual, $expected );
+		$this->assertSame( $actual, $expected );
 	}
 
 	public function test_register_meta_with_current_sanitize_callback_returns_true() {
@@ -195,7 +195,7 @@ class Tests_Meta_Register_Meta extends WP_UnitTestCase {
 
 		unregister_meta_key( 'post', 'new_sanitized_key' );
 
-		$this->assertEquals( 'new_sanitized_key new sanitized', $meta );
+		$this->assertSame( 'new_sanitized_key new sanitized', $meta );
 	}
 
 	public function test_register_meta_unregistered_meta_key_removes_sanitize_filter() {
@@ -221,7 +221,7 @@ class Tests_Meta_Register_Meta extends WP_UnitTestCase {
 		register_meta( 'post', 'registered_key', array() );
 		unregister_meta_key( 'post', 'registered_key' );
 
-		$this->assertEquals( array(), $wp_meta_keys );
+		$this->assertSame( array(), $wp_meta_keys );
 	}
 
 	public function test_unregister_meta_key_with_invalid_key_returns_false() {
@@ -260,7 +260,7 @@ class Tests_Meta_Register_Meta extends WP_UnitTestCase {
 
 		unregister_meta_key( 'post', 'registered_key1' );
 
-		$this->assertEquals( 'I\'m just a field, take a good look at me', $meta_keys['registered_key1']['description'] );
+		$this->assertSame( 'I\'m just a field, take a good look at me', $meta_keys['registered_key1']['description'] );
 	}
 
 	public function test_get_registered_meta_keys_invalid_arg() {
@@ -281,7 +281,7 @@ class Tests_Meta_Register_Meta extends WP_UnitTestCase {
 
 		unregister_meta_key( 'post', 'flight_number' );
 
-		$this->assertEquals( 'Oceanic 815', $meta['flight_number'][0] );
+		$this->assertSame( 'Oceanic 815', $meta['flight_number'][0] );
 	}
 
 	public function test_get_registered_metadata_by_key() {
@@ -292,7 +292,7 @@ class Tests_Meta_Register_Meta extends WP_UnitTestCase {
 
 		unregister_meta_key( 'post', 'flight_number' );
 
-		$this->assertEquals( 'Oceanic 815', $meta[0] );
+		$this->assertSame( 'Oceanic 815', $meta[0] );
 	}
 
 	public function test_get_registered_metadata_by_key_single() {
@@ -303,7 +303,7 @@ class Tests_Meta_Register_Meta extends WP_UnitTestCase {
 
 		unregister_meta_key( 'post', 'flight_number' );
 
-		$this->assertEquals( 'Oceanic 815', $meta );
+		$this->assertSame( 'Oceanic 815', $meta );
 	}
 
 	public function test_get_registered_metadata_by_invalid_key() {
@@ -352,7 +352,7 @@ class Tests_Meta_Register_Meta extends WP_UnitTestCase {
 		// Reset global so subsequent data tests do not get polluted.
 		$wp_meta_keys = array();
 
-		$this->assertEquals( $expected, $actual );
+		$this->assertSame( $expected, $actual );
 	}
 
 	/**
@@ -405,7 +405,7 @@ class Tests_Meta_Register_Meta extends WP_UnitTestCase {
 		// Reset global so subsequent data tests do not get polluted.
 		$wp_meta_keys = array();
 
-		$this->assertEquals( $expected, $actual );
+		$this->assertSame( $expected, $actual );
 	}
 
 	/**
@@ -504,6 +504,73 @@ class Tests_Meta_Register_Meta extends WP_UnitTestCase {
 		$this->assertSame( 'even', $subtype_for_4 );
 	}
 
+	/**
+	 * @ticket 43941
+	 * @dataProvider data_get_default_data
+	 */
+	public function test_get_default_value( $args, $single, $expected ) {
+
+		$object_type = 'post';
+		$meta_key    = 'registered_key1';
+		register_meta(
+			$object_type,
+			$meta_key,
+			$args
+		);
+
+		$object_property_name = $object_type . '_id';
+		$object_id            = self::$$object_property_name;
+		$default_value        = get_metadata_default( $object_type, $object_id, $meta_key, $single );
+		$this->assertSame( $default_value, $expected );
+
+		// Check for default value.
+		$value = get_metadata( $object_type, $object_id, $meta_key, $single );
+		$this->assertSame( $value, $expected );
+
+		// Set value to check default is not being returned by mistake.
+		$meta_value = 'dibble';
+		update_metadata( $object_type, $object_id, $meta_key, $meta_value );
+		$value = get_metadata( $object_type, $object_id, $meta_key, true );
+		$this->assertSame( $value, $meta_value );
+
+		// Delete meta, make sure the default is returned.
+		delete_metadata( $object_type, $object_id, $meta_key );
+		$value = get_metadata( $object_type, $object_id, $meta_key, $single );
+		$this->assertSame( $value, $expected );
+
+		// Set other meta key, to make sure other keys are not effects.
+		$meta_value = 'hibble';
+		$meta_key   = 'unregistered_key1';
+		$value      = get_metadata( $object_type, $object_id, $meta_key, true );
+		$this->assertSame( $value, '' );
+		update_metadata( $object_type, $object_id, $meta_key, $meta_value );
+		$value = get_metadata( $object_type, $object_id, $meta_key, true );
+		$this->assertSame( $value, $meta_value );
+
+	}
+
+	/**
+	 * @ticket 43941
+	 * @dataProvider data_get_invalid_default_data
+	 */
+	public function test_get_invalid_default_value( $args, $single, $expected ) {
+		$this->setExpectedIncorrectUsage( 'register_meta' );
+		$object_type = 'post';
+		$meta_key    = 'registered_key1';
+		$register    = register_meta(
+			$object_type,
+			$meta_key,
+			$args
+		);
+
+		$this->assertFalse( $register );
+
+		$object_property_name = $object_type . '_id';
+		$object_id            = self::$$object_property_name;
+		$default_value        = get_metadata_default( $object_type, $object_id, $meta_key, $single );
+		$this->assertSame( $default_value, $expected );
+	}
+
 	public function filter_get_object_subtype_for_customtype( $subtype, $object_id ) {
 		if ( 1 === ( $object_id % 2 ) ) {
 			return 'odd';
@@ -512,6 +579,501 @@ class Tests_Meta_Register_Meta extends WP_UnitTestCase {
 		return 'even';
 	}
 
+	public function data_get_default_data() {
+		return array(
+			'single string key with single ask '          => array(
+				array(
+					'single'  => true,
+					'default' => 'wibble',
+				),
+				true,
+				'wibble',
+			),
+			'single string key with multiple ask'         => array(
+				array(
+					'single'  => true,
+					'default' => 'wibble',
+				),
+				false,
+				array( 'wibble' ),
+			),
+			'multiple string key with single ask'         => array(
+				array(
+					'single'  => false,
+					'default' => 'wibble',
+				),
+				true,
+				'wibble',
+			),
+			'multiple string key with multiple ask'       => array(
+				array(
+					'single'  => false,
+					'default' => 'wibble',
+				),
+				false,
+				array( 'wibble' ),
+			),
+			'single array key with multiple ask'          => array(
+				array(
+					'single'       => true,
+					'type'         => 'array',
+					'show_in_rest' => array(
+						'schema' => array(
+							'type'  => 'array',
+							'items' => array(
+								'type' => 'string',
+							),
+						),
+					),
+					'default'      => array( 'wibble' ),
+				),
+				false,
+				array( array( 'wibble' ) ),
+			),
+			'single string key with single ask for sub type' => array(
+				array(
+					'single'         => true,
+					'object_subtype' => 'page',
+					'default'        => 'wibble',
+				),
+				true,
+				'wibble',
+			),
+			'single string key with multiple ask for sub type' => array(
+				array(
+					'single'         => true,
+					'object_subtype' => 'page',
+					'default'        => 'wibble',
+				),
+				false,
+				array( 'wibble' ),
+			),
+			'single array key with multiple ask for sub type' => array(
+				array(
+					'single'         => true,
+					'object_subtype' => 'page',
+					'show_in_rest'   => array(
+						'schema' => array(
+							'type'  => 'array',
+							'items' => array(
+								'type' => 'string',
+							),
+						),
+					),
+					'default'        => array( 'wibble' ),
+				),
+				false,
+				array( array( 'wibble' ) ),
+			),
+
+			// Types.
+			'single object key with single ask'           => array(
+				array(
+					'single'       => true,
+					'show_in_rest' => array(
+						'schema' => array(
+							'type'       => 'object',
+							'properties' => array(
+								'wibble' => array(
+									'type' => 'string',
+								),
+							),
+						),
+					),
+					'type'         => 'object',
+					'default'      => array( 'wibble' => 'dibble' ),
+				),
+				true,
+				array( 'wibble' => 'dibble' ),
+			),
+			'single object key with multiple ask'         => array(
+				array(
+					'single'       => true,
+					'show_in_rest' => array(
+						'schema' => array(
+							'type'       => 'object',
+							'properties' => array(
+								'wibble' => array(
+									'type' => 'string',
+								),
+							),
+						),
+					),
+					'type'         => 'object',
+					'default'      => array( 'wibble' => 'dibble' ),
+				),
+				false,
+				array( array( 'wibble' => 'dibble' ) ),
+			),
+			'multiple object key with single ask'         => array(
+				array(
+					'show_in_rest' => array(
+						'schema' => array(
+							'type'       => 'object',
+							'properties' => array(
+								'wibble' => array(
+									'type' => 'string',
+								),
+							),
+						),
+					),
+					'type'         => 'object',
+					'single'       => false,
+					'default'      => array( 'wibble' => 'dibble' ),
+				),
+				true,
+				array( 'wibble' => 'dibble' ),
+			),
+			'multiple object key with multiple ask'       => array(
+				array(
+					'show_in_rest' => array(
+						'schema' => array(
+							'type'       => 'object',
+							'properties' => array(
+								'wibble' => array(
+									'type' => 'string',
+								),
+							),
+						),
+					),
+					'type'         => 'object',
+					'single'       => false,
+					'default'      => array( 'wibble' => 'dibble' ),
+				),
+				false,
+				array( array( 'wibble' => 'dibble' ) ),
+			),
+			'single array key with multiple ask part two' => array(
+				array(
+					'show_in_rest' => array(
+						'schema' => array(
+							'type'  => 'array',
+							'items' => array(
+								'type' => 'string',
+							),
+						),
+					),
+					'single'       => true,
+					'type'         => 'array',
+					'default'      => array( 'dibble' ),
+				),
+				false,
+				array( array( 'dibble' ) ),
+			),
+			'multiple array with multiple ask'            => array(
+				array(
+					'show_in_rest' => array(
+						'schema' => array(
+							'type'  => 'array',
+							'items' => array(
+								'type' => 'string',
+							),
+						),
+					),
+					'single'       => false,
+					'type'         => 'array',
+					'default'      => array( 'dibble' ),
+				),
+				false,
+				array( array( 'dibble' ) ),
+			),
+			'single array with single ask'                => array(
+				array(
+					'show_in_rest' => array(
+						'schema' => array(
+							'type'  => 'array',
+							'items' => array(
+								'type' => 'string',
+							),
+						),
+					),
+					'single'       => true,
+					'type'         => 'array',
+					'default'      => array( 'dibble' ),
+				),
+				true,
+				array( 'dibble' ),
+			),
+
+			'multiple array with single ask'              => array(
+				array(
+					'show_in_rest' => array(
+						'schema' => array(
+							'type'  => 'array',
+							'items' => array(
+								'type' => 'string',
+							),
+						),
+					),
+					'single'       => false,
+					'type'         => 'array',
+					'default'      => array( 'dibble' ),
+				),
+				true,
+				array( 'dibble' ),
+			),
+
+			'single boolean with single ask'              => array(
+				array(
+					'single'  => true,
+					'type'    => 'boolean',
+					'default' => true,
+				),
+				true,
+				true,
+			),
+			'multiple boolean with single ask'            => array(
+				array(
+					'single'  => false,
+					'type'    => 'boolean',
+					'default' => true,
+				),
+				true,
+				true,
+			),
+			'single boolean with multiple ask'            => array(
+				array(
+					'single'  => true,
+					'type'    => 'boolean',
+					'default' => true,
+				),
+				false,
+				array( true ),
+			),
+			'multiple boolean with multiple ask'          => array(
+				array(
+					'single'  => false,
+					'type'    => 'boolean',
+					'default' => true,
+				),
+				false,
+				array( true ),
+			),
+
+			'single integer with single ask'              => array(
+				array(
+					'single'  => true,
+					'type'    => 'integer',
+					'default' => 123,
+				),
+				true,
+				123,
+			),
+			'multiple integer with single ask'            => array(
+				array(
+					'single'  => false,
+					'type'    => 'integer',
+					'default' => 123,
+				),
+				true,
+				123,
+			),
+			'single integer with multiple ask'            => array(
+				array(
+					'single'  => true,
+					'type'    => 'integer',
+					'default' => 123,
+				),
+				false,
+				array( 123 ),
+			),
+			'multiple integer with multiple ask'          => array(
+				array(
+					'single'  => false,
+					'type'    => 'integer',
+					'default' => 123,
+				),
+				false,
+				array( 123 ),
+			),
+			'single array of objects with multiple ask'   => array(
+				array(
+					'type'         => 'array',
+					'single'       => true,
+					'show_in_rest' => array(
+						'schema' => array(
+							'type'  => 'array',
+							'items' => array(
+								'type'       => 'object',
+								'properties' => array(
+									'name' => array(
+										'type' => 'string',
+									),
+								),
+							),
+						),
+					),
+					'default'      => array(
+						array(
+							'name' => 'Kirk',
+						),
+					),
+				),
+				false,
+				array(
+					array(
+						array(
+							'name' => 'Kirk',
+						),
+					),
+				),
+			),
+		);
+	}
+
+	public function data_get_invalid_default_data() {
+		return array(
+			array(
+				array(
+					'single'  => true,
+					'type'    => 'boolean',
+					'default' => 123,
+				),
+				true,
+				'',
+			),
+			array(
+				array(
+					'single'  => false,
+					'type'    => 'boolean',
+					'default' => 123,
+				),
+				true,
+				'',
+			),
+			array(
+				array(
+					'single'  => true,
+					'type'    => 'boolean',
+					'default' => 123,
+				),
+				false,
+				array(),
+			),
+			array(
+				array(
+					'single'  => false,
+					'type'    => 'boolean',
+					'default' => 123,
+				),
+				false,
+				array(),
+			),
+
+			array(
+				array(
+					'single'  => true,
+					'type'    => 'integer',
+					'default' => 'wibble',
+				),
+				true,
+				'',
+			),
+			array(
+				array(
+					'single'  => false,
+					'type'    => 'integer',
+					'default' => 'wibble',
+				),
+				true,
+				'',
+			),
+			array(
+				array(
+					'single'  => true,
+					'type'    => 'integer',
+					'default' => 'wibble',
+				),
+				false,
+				array(),
+			),
+			array(
+				array(
+					'single'  => false,
+					'type'    => 'integer',
+					'default' => 'wibble',
+				),
+				false,
+				array(),
+			),
+			array(
+				array(
+					'single'  => false,
+					'type'    => 'integer',
+					'default' => array( 123, 'wibble' ),
+				),
+				false,
+				array(),
+			),
+			array(
+				array(
+					'single'  => false,
+					'type'    => 'integer',
+					'default' => array( 123, array() ),
+				),
+				false,
+				array(),
+			),
+			array(
+				array(
+					'single'       => false,
+					'type'         => 'array',
+					'show_in_rest' => array(
+						'schema' => array(
+							'type'  => 'array',
+							'items' => array(
+								'type' => 'string',
+							),
+						),
+					),
+					'default'      => array( array( 123, 456 ), array( 'string' ) ),
+				),
+				false,
+				array(),
+			),
+			array(
+				array(
+					'single'       => true,
+					'type'         => 'array',
+					'show_in_rest' => array(
+						'schema' => array(
+							'type'  => 'array',
+							'items' => array(
+								'type' => 'string',
+							),
+						),
+					),
+					'default'      => array( array( 123, 456 ), array( 'string' ) ),
+				),
+				true,
+				'',
+			),
+			array(
+				array(
+					'show_in_rest' => array(
+						'schema' => array(
+							'type'       => 'object',
+							'properties' => array(
+								'my_prop'          => array(
+									'type' => 'string',
+								),
+								'my_required_prop' => array(
+									'type' => 'string',
+								),
+							),
+							'required'   => array( 'my_required_prop' ),
+						),
+					),
+					'type'         => 'object',
+					'single'       => true,
+					'default'      => array( 'my_prop' => 'hibble' ),
+				),
+				true,
+				'',
+			),
+		);
+	}
+
 	public function data_get_types_and_subtypes() {
 		return array(
 			array( 'post', 'page' ),
diff --git a/tests/meta/slashes.php b/tests/meta/slashes.php
index 52fcd1a400..469b04765e 100644
--- a/tests/meta/slashes.php
+++ b/tests/meta/slashes.php
@@ -31,7 +31,7 @@ class Tests_Meta_Slashes extends WP_UnitTestCase {
 	}
 
 	/**
-	 * Tests the controller function that expects slashed data
+	 * Tests the controller function that expects slashed data.
 	 */
 	function test_edit_post() {
 		$id = self::factory()->post->create();
@@ -40,7 +40,7 @@ class Tests_Meta_Slashes extends WP_UnitTestCase {
 			$meta_2 = wp_add_post_meta( $id, 'slash_test_2', 'foo' );
 			$meta_3 = wp_add_post_meta( $id, 'slash_test_3', 'foo' );
 		} else {
-			// expects slashed data
+			// Expects slashed data.
 			$meta_1 = add_post_meta( $id, 'slash_test_1', addslashes( 'foo' ) );
 			$meta_2 = add_post_meta( $id, 'slash_test_2', addslashes( 'foo' ) );
 			$meta_3 = add_post_meta( $id, 'slash_test_3', addslashes( 'foo' ) );
@@ -65,15 +65,16 @@ class Tests_Meta_Slashes extends WP_UnitTestCase {
 				'value' => $this->slash_4,
 			),
 		);
-		$_POST                  = add_magic_quotes( $_POST ); // the edit_post() function will strip slashes
+
+		$_POST = add_magic_quotes( $_POST ); // The edit_post() function will strip slashes.
 
 		edit_post();
 		$post = get_post( $id );
 
-		$this->assertEquals( $this->slash_6, get_post_meta( $id, 'slash_test_0', true ) );
-		$this->assertEquals( $this->slash_1, get_post_meta( $id, 'slash_test_1', true ) );
-		$this->assertEquals( $this->slash_3, get_post_meta( $id, 'slash_test_2', true ) );
-		$this->assertEquals( $this->slash_4, get_post_meta( $id, 'slash_test_3', true ) );
+		$this->assertSame( $this->slash_6, get_post_meta( $id, 'slash_test_0', true ) );
+		$this->assertSame( $this->slash_1, get_post_meta( $id, 'slash_test_1', true ) );
+		$this->assertSame( $this->slash_3, get_post_meta( $id, 'slash_test_2', true ) );
+		$this->assertSame( $this->slash_4, get_post_meta( $id, 'slash_test_3', true ) );
 
 		$_POST                  = array();
 		$_POST['post_ID']       = $id;
@@ -94,18 +95,19 @@ class Tests_Meta_Slashes extends WP_UnitTestCase {
 				'value' => $this->slash_5,
 			),
 		);
-		$_POST                  = add_magic_quotes( $_POST ); // the edit_post() function will strip slashes
+
+		$_POST = add_magic_quotes( $_POST ); // The edit_post() function will strip slashes.
 
 		edit_post();
 		$post = get_post( $id );
 
-		$this->assertEquals( $this->slash_2, get_post_meta( $id, 'slash_test_1', true ) );
-		$this->assertEquals( $this->slash_4, get_post_meta( $id, 'slash_test_2', true ) );
-		$this->assertEquals( $this->slash_5, get_post_meta( $id, 'slash_test_3', true ) );
+		$this->assertSame( $this->slash_2, get_post_meta( $id, 'slash_test_1', true ) );
+		$this->assertSame( $this->slash_4, get_post_meta( $id, 'slash_test_2', true ) );
+		$this->assertSame( $this->slash_5, get_post_meta( $id, 'slash_test_3', true ) );
 	}
 
 	/**
-	 * Tests the legacy model function that expects slashed data
+	 * Tests the legacy model function that expects slashed data.
 	 */
 	function test_add_post_meta() {
 		$id = self::factory()->post->create();
@@ -113,13 +115,13 @@ class Tests_Meta_Slashes extends WP_UnitTestCase {
 		add_post_meta( $id, 'slash_test_2', addslashes( $this->slash_3 ) );
 		add_post_meta( $id, 'slash_test_3', addslashes( $this->slash_4 ) );
 
-		$this->assertEquals( $this->slash_1, get_post_meta( $id, 'slash_test_1', true ) );
-		$this->assertEquals( $this->slash_3, get_post_meta( $id, 'slash_test_2', true ) );
-		$this->assertEquals( $this->slash_4, get_post_meta( $id, 'slash_test_3', true ) );
+		$this->assertSame( $this->slash_1, get_post_meta( $id, 'slash_test_1', true ) );
+		$this->assertSame( $this->slash_3, get_post_meta( $id, 'slash_test_2', true ) );
+		$this->assertSame( $this->slash_4, get_post_meta( $id, 'slash_test_3', true ) );
 	}
 
 	/**
-	 * Tests the legacy model function that expects slashed data
+	 * Tests the legacy model function that expects slashed data.
 	 */
 	function test_update_post_meta() {
 		$id = self::factory()->post->create();
@@ -127,13 +129,13 @@ class Tests_Meta_Slashes extends WP_UnitTestCase {
 		update_post_meta( $id, 'slash_test_2', addslashes( $this->slash_3 ) );
 		update_post_meta( $id, 'slash_test_3', addslashes( $this->slash_4 ) );
 
-		$this->assertEquals( $this->slash_1, get_post_meta( $id, 'slash_test_1', true ) );
-		$this->assertEquals( $this->slash_3, get_post_meta( $id, 'slash_test_2', true ) );
-		$this->assertEquals( $this->slash_4, get_post_meta( $id, 'slash_test_3', true ) );
+		$this->assertSame( $this->slash_1, get_post_meta( $id, 'slash_test_1', true ) );
+		$this->assertSame( $this->slash_3, get_post_meta( $id, 'slash_test_2', true ) );
+		$this->assertSame( $this->slash_4, get_post_meta( $id, 'slash_test_3', true ) );
 	}
 
 	/**
-	 * Tests the model function that expects slashed data
+	 * Tests the model function that expects slashed data.
 	 */
 	function test_add_comment_meta() {
 		$id = self::$comment_id;
@@ -142,21 +144,21 @@ class Tests_Meta_Slashes extends WP_UnitTestCase {
 		add_comment_meta( $id, 'slash_test_2', $this->slash_3 );
 		add_comment_meta( $id, 'slash_test_3', $this->slash_5 );
 
-		$this->assertEquals( wp_unslash( $this->slash_1 ), get_comment_meta( $id, 'slash_test_1', true ) );
-		$this->assertEquals( wp_unslash( $this->slash_3 ), get_comment_meta( $id, 'slash_test_2', true ) );
-		$this->assertEquals( wp_unslash( $this->slash_5 ), get_comment_meta( $id, 'slash_test_3', true ) );
+		$this->assertSame( wp_unslash( $this->slash_1 ), get_comment_meta( $id, 'slash_test_1', true ) );
+		$this->assertSame( wp_unslash( $this->slash_3 ), get_comment_meta( $id, 'slash_test_2', true ) );
+		$this->assertSame( wp_unslash( $this->slash_5 ), get_comment_meta( $id, 'slash_test_3', true ) );
 
 		add_comment_meta( $id, 'slash_test_4', $this->slash_2 );
 		add_comment_meta( $id, 'slash_test_5', $this->slash_4 );
 		add_comment_meta( $id, 'slash_test_6', $this->slash_6 );
 
-		$this->assertEquals( wp_unslash( $this->slash_2 ), get_comment_meta( $id, 'slash_test_4', true ) );
-		$this->assertEquals( wp_unslash( $this->slash_4 ), get_comment_meta( $id, 'slash_test_5', true ) );
-		$this->assertEquals( wp_unslash( $this->slash_6 ), get_comment_meta( $id, 'slash_test_6', true ) );
+		$this->assertSame( wp_unslash( $this->slash_2 ), get_comment_meta( $id, 'slash_test_4', true ) );
+		$this->assertSame( wp_unslash( $this->slash_4 ), get_comment_meta( $id, 'slash_test_5', true ) );
+		$this->assertSame( wp_unslash( $this->slash_6 ), get_comment_meta( $id, 'slash_test_6', true ) );
 	}
 
 	/**
-	 * Tests the model function that expects slashed data
+	 * Tests the model function that expects slashed data.
 	 */
 	function test_update_comment_meta() {
 		$id = self::$comment_id;
@@ -169,21 +171,21 @@ class Tests_Meta_Slashes extends WP_UnitTestCase {
 		update_comment_meta( $id, 'slash_test_2', $this->slash_3 );
 		update_comment_meta( $id, 'slash_test_3', $this->slash_5 );
 
-		$this->assertEquals( wp_unslash( $this->slash_1 ), get_comment_meta( $id, 'slash_test_1', true ) );
-		$this->assertEquals( wp_unslash( $this->slash_3 ), get_comment_meta( $id, 'slash_test_2', true ) );
-		$this->assertEquals( wp_unslash( $this->slash_5 ), get_comment_meta( $id, 'slash_test_3', true ) );
+		$this->assertSame( wp_unslash( $this->slash_1 ), get_comment_meta( $id, 'slash_test_1', true ) );
+		$this->assertSame( wp_unslash( $this->slash_3 ), get_comment_meta( $id, 'slash_test_2', true ) );
+		$this->assertSame( wp_unslash( $this->slash_5 ), get_comment_meta( $id, 'slash_test_3', true ) );
 
 		update_comment_meta( $id, 'slash_test_1', $this->slash_2 );
 		update_comment_meta( $id, 'slash_test_2', $this->slash_4 );
 		update_comment_meta( $id, 'slash_test_3', $this->slash_6 );
 
-		$this->assertEquals( wp_unslash( $this->slash_2 ), get_comment_meta( $id, 'slash_test_1', true ) );
-		$this->assertEquals( wp_unslash( $this->slash_4 ), get_comment_meta( $id, 'slash_test_2', true ) );
-		$this->assertEquals( wp_unslash( $this->slash_6 ), get_comment_meta( $id, 'slash_test_3', true ) );
+		$this->assertSame( wp_unslash( $this->slash_2 ), get_comment_meta( $id, 'slash_test_1', true ) );
+		$this->assertSame( wp_unslash( $this->slash_4 ), get_comment_meta( $id, 'slash_test_2', true ) );
+		$this->assertSame( wp_unslash( $this->slash_6 ), get_comment_meta( $id, 'slash_test_3', true ) );
 	}
 
 	/**
-	 * Tests the model function that expects slashed data
+	 * Tests the model function that expects slashed data.
 	 */
 	function test_add_user_meta() {
 		$id = self::factory()->user->create();
@@ -192,21 +194,21 @@ class Tests_Meta_Slashes extends WP_UnitTestCase {
 		add_user_meta( $id, 'slash_test_2', $this->slash_3 );
 		add_user_meta( $id, 'slash_test_3', $this->slash_5 );
 
-		$this->assertEquals( wp_unslash( $this->slash_1 ), get_user_meta( $id, 'slash_test_1', true ) );
-		$this->assertEquals( wp_unslash( $this->slash_3 ), get_user_meta( $id, 'slash_test_2', true ) );
-		$this->assertEquals( wp_unslash( $this->slash_5 ), get_user_meta( $id, 'slash_test_3', true ) );
+		$this->assertSame( wp_unslash( $this->slash_1 ), get_user_meta( $id, 'slash_test_1', true ) );
+		$this->assertSame( wp_unslash( $this->slash_3 ), get_user_meta( $id, 'slash_test_2', true ) );
+		$this->assertSame( wp_unslash( $this->slash_5 ), get_user_meta( $id, 'slash_test_3', true ) );
 
 		add_user_meta( $id, 'slash_test_4', $this->slash_2 );
 		add_user_meta( $id, 'slash_test_5', $this->slash_4 );
 		add_user_meta( $id, 'slash_test_6', $this->slash_6 );
 
-		$this->assertEquals( wp_unslash( $this->slash_2 ), get_user_meta( $id, 'slash_test_4', true ) );
-		$this->assertEquals( wp_unslash( $this->slash_4 ), get_user_meta( $id, 'slash_test_5', true ) );
-		$this->assertEquals( wp_unslash( $this->slash_6 ), get_user_meta( $id, 'slash_test_6', true ) );
+		$this->assertSame( wp_unslash( $this->slash_2 ), get_user_meta( $id, 'slash_test_4', true ) );
+		$this->assertSame( wp_unslash( $this->slash_4 ), get_user_meta( $id, 'slash_test_5', true ) );
+		$this->assertSame( wp_unslash( $this->slash_6 ), get_user_meta( $id, 'slash_test_6', true ) );
 	}
 
 	/**
-	 * Tests the model function that expects slashed data
+	 * Tests the model function that expects slashed data.
 	 */
 	function test_update_user_meta() {
 		$id = self::factory()->user->create();
@@ -219,16 +221,16 @@ class Tests_Meta_Slashes extends WP_UnitTestCase {
 		update_user_meta( $id, 'slash_test_2', $this->slash_3 );
 		update_user_meta( $id, 'slash_test_3', $this->slash_5 );
 
-		$this->assertEquals( wp_unslash( $this->slash_1 ), get_user_meta( $id, 'slash_test_1', true ) );
-		$this->assertEquals( wp_unslash( $this->slash_3 ), get_user_meta( $id, 'slash_test_2', true ) );
-		$this->assertEquals( wp_unslash( $this->slash_5 ), get_user_meta( $id, 'slash_test_3', true ) );
+		$this->assertSame( wp_unslash( $this->slash_1 ), get_user_meta( $id, 'slash_test_1', true ) );
+		$this->assertSame( wp_unslash( $this->slash_3 ), get_user_meta( $id, 'slash_test_2', true ) );
+		$this->assertSame( wp_unslash( $this->slash_5 ), get_user_meta( $id, 'slash_test_3', true ) );
 
 		update_user_meta( $id, 'slash_test_1', $this->slash_2 );
 		update_user_meta( $id, 'slash_test_2', $this->slash_4 );
 		update_user_meta( $id, 'slash_test_3', $this->slash_6 );
 
-		$this->assertEquals( wp_unslash( $this->slash_2 ), get_user_meta( $id, 'slash_test_1', true ) );
-		$this->assertEquals( wp_unslash( $this->slash_4 ), get_user_meta( $id, 'slash_test_2', true ) );
-		$this->assertEquals( wp_unslash( $this->slash_6 ), get_user_meta( $id, 'slash_test_3', true ) );
+		$this->assertSame( wp_unslash( $this->slash_2 ), get_user_meta( $id, 'slash_test_1', true ) );
+		$this->assertSame( wp_unslash( $this->slash_4 ), get_user_meta( $id, 'slash_test_2', true ) );
+		$this->assertSame( wp_unslash( $this->slash_6 ), get_user_meta( $id, 'slash_test_3', true ) );
 	}
 }
diff --git a/tests/multisite.php b/tests/multisite.php
index 009c0d4e52..e96f3d27ce 100644
--- a/tests/multisite.php
+++ b/tests/multisite.php
@@ -30,36 +30,50 @@ if ( is_multisite() ) :
 
 			wpmu_log_new_registrations( 1, 1 );
 
-			// currently there is no wrapper function for the registration_log
+			// Currently there is no wrapper function for the registration_log.
 			$reg_blog = $wpdb->get_col( $wpdb->prepare( "SELECT email FROM {$wpdb->registration_log} WHERE {$wpdb->registration_log}.blog_id = 1 AND IP LIKE %s", $ip ) );
-			$this->assertEquals( $user->user_email, $reg_blog[ count( $reg_blog ) - 1 ] );
+			$this->assertSame( $user->user_email, $reg_blog[ count( $reg_blog ) - 1 ] );
 		}
 
 		/**
 		 * @ticket 37392
 		 */
 		function test_wp_count_sites() {
-			// create a random number of sites with each status.
+			// Create a random number of sites with each status.
 			$site_ids = array(
 				'public'   => self::factory()->blog->create_many(
 					random_int( 0, 5 ),
-					array( 'meta' => array( 'public' => 1 ) )
+					array(
+						'public' => 1,
+					)
 				),
 				'archived' => self::factory()->blog->create_many(
 					random_int( 0, 5 ),
-					array( 'meta' => array( 'archived' => 1 ) )
+					array(
+						'public'   => 0,
+						'archived' => 1,
+					)
 				),
 				'mature'   => self::factory()->blog->create_many(
 					random_int( 0, 5 ),
-					array( 'meta' => array( 'mature' => 1 ) )
+					array(
+						'public' => 0,
+						'mature' => 1,
+					)
 				),
 				'spam'     => self::factory()->blog->create_many(
 					random_int( 0, 5 ),
-					array( 'meta' => array( 'spam' => 1 ) )
+					array(
+						'public' => 0,
+						'spam'   => 1,
+					)
 				),
 				'deleted'  => self::factory()->blog->create_many(
 					random_int( 0, 5 ),
-					array( 'meta' => array( 'deleted' => 1 ) )
+					array(
+						'public'  => 0,
+						'deleted' => 1,
+					)
 				),
 			);
 
@@ -70,11 +84,11 @@ if ( is_multisite() ) :
 				array( 'all' => array_sum( $counts_by_status ) ),
 				$counts_by_status
 			);
-			// add 1 to all & public for the main site.
+			// Add 1 to all & public for the main site.
 			$expected['all']    += 1;
 			$expected['public'] += 1;
 
-			$this->assertEquals( $expected, $counts );
+			$this->assertSame( $expected, $counts );
 		}
 	}
 
diff --git a/tests/multisite/bootstrap.php b/tests/multisite/bootstrap.php
index ae71746e63..eabf78297b 100644
--- a/tests/multisite/bootstrap.php
+++ b/tests/multisite/bootstrap.php
@@ -55,29 +55,29 @@ if ( is_multisite() ) :
 
 			self::$site_ids = array(
 				'wordpress.org/'          => array(
-					'domain'  => 'wordpress.org',
-					'path'    => '/',
-					'site_id' => self::$network_ids['wordpress.org/'],
+					'domain'     => 'wordpress.org',
+					'path'       => '/',
+					'network_id' => self::$network_ids['wordpress.org/'],
 				),
 				'wordpress.org/foo/'      => array(
-					'domain'  => 'wordpress.org',
-					'path'    => '/foo/',
-					'site_id' => self::$network_ids['wordpress.org/'],
+					'domain'     => 'wordpress.org',
+					'path'       => '/foo/',
+					'network_id' => self::$network_ids['wordpress.org/'],
 				),
 				'wordpress.org/foo/bar/'  => array(
-					'domain'  => 'wordpress.org',
-					'path'    => '/foo/bar/',
-					'site_id' => self::$network_ids['wordpress.org/'],
+					'domain'     => 'wordpress.org',
+					'path'       => '/foo/bar/',
+					'network_id' => self::$network_ids['wordpress.org/'],
 				),
 				'make.wordpress.org/'     => array(
-					'domain'  => 'make.wordpress.org',
-					'path'    => '/',
-					'site_id' => self::$network_ids['make.wordpress.org/'],
+					'domain'     => 'make.wordpress.org',
+					'path'       => '/',
+					'network_id' => self::$network_ids['make.wordpress.org/'],
 				),
 				'make.wordpress.org/foo/' => array(
-					'domain'  => 'make.wordpress.org',
-					'path'    => '/foo/',
-					'site_id' => self::$network_ids['make.wordpress.org/'],
+					'domain'     => 'make.wordpress.org',
+					'path'       => '/foo/',
+					'network_id' => self::$network_ids['make.wordpress.org/'],
 				),
 				'www.w.org/'              => array(
 					'domain' => 'www.w.org',
@@ -103,7 +103,7 @@ if ( is_multisite() ) :
 			global $wpdb;
 
 			foreach ( self::$site_ids as $id ) {
-				wpmu_delete_blog( $id, true );
+				wp_delete_site( $id );
 			}
 
 			foreach ( self::$network_ids as $id ) {
@@ -125,7 +125,7 @@ if ( is_multisite() ) :
 		 */
 		function test_get_network_by_path( $expected_key, $domain, $path, $message ) {
 			$network = get_network_by_path( $domain, $path );
-			$this->assertEquals( self::$network_ids[ $expected_key ], $network->id, $message );
+			$this->assertSame( self::$network_ids[ $expected_key ], $network->id, $message );
 		}
 
 		public function data_get_network_by_path() {
@@ -161,7 +161,7 @@ if ( is_multisite() ) :
 
 			remove_filter( 'network_by_path_segments_count', '__return_zero' );
 
-			$this->assertEquals( self::$network_ids[ $expected_key ], $network->id, $message );
+			$this->assertSame( self::$network_ids[ $expected_key ], $network->id, $message );
 		}
 
 		public function data_get_network_by_path_with_zero_path_segments() {
@@ -186,7 +186,7 @@ if ( is_multisite() ) :
 			$network = get_network_by_path( 'wordpress.org', '/one/b/' );
 			remove_filter( 'network_by_path_segments_count', array( $this, 'filter_network_path_segments' ) );
 
-			$this->assertEquals( self::$network_ids['wordpress.org/one/'], $network->id );
+			$this->assertSame( self::$network_ids['wordpress.org/one/'], $network->id );
 		}
 
 		public function filter_network_path_segments() {
diff --git a/tests/multisite/getBlogDetails.php b/tests/multisite/getBlogDetails.php
index 03d33900d8..d0c4b81dce 100644
--- a/tests/multisite/getBlogDetails.php
+++ b/tests/multisite/getBlogDetails.php
@@ -35,7 +35,7 @@ if ( is_multisite() ) :
 
 		public static function wpTearDownAfterClass() {
 			foreach ( self::$site_ids as $id ) {
-				wpmu_delete_blog( $id, true );
+				wp_delete_site( $id );
 			}
 
 			wp_update_network_site_counts();
@@ -125,7 +125,7 @@ if ( is_multisite() ) :
 			}
 
 			$site = get_blog_details( array( 'domain' => 'wordpress.org' ) );
-			$this->assertEquals( self::$site_ids['wordpress.org/'], $site->blog_id );
+			$this->assertSame( self::$site_ids['wordpress.org/'], $site->blog_id );
 		}
 
 		public function test_get_blog_details_with_only_domain_in_fields_subdirectory() {
@@ -142,6 +142,16 @@ if ( is_multisite() ) :
 			$this->assertFalse( $site );
 		}
 
+		/**
+		 * @ticket 50391
+		 */
+		public function test_get_blog_details_does_not_switch_to_current_blog() {
+			$count = did_action( 'switch_blog' );
+
+			get_blog_details();
+			$this->assertSame( $count, did_action( 'switch_blog' ) );
+		}
+
 		/**
 		 * @dataProvider data_get_all
 		 *
@@ -158,7 +168,7 @@ if ( is_multisite() ) :
 
 			$result = array_keys( get_object_vars( $site ) );
 
-			$this->assertEqualSets( $this->get_fields( $get_all ), $result );
+			$this->assertSameSets( $this->get_fields( $get_all ), $result );
 		}
 
 		/**
@@ -180,7 +190,7 @@ if ( is_multisite() ) :
 				$result[] = $key;
 			}
 
-			$this->assertEqualSets( $this->get_fields( $get_all ), $result );
+			$this->assertSameSets( $this->get_fields( $get_all ), $result );
 		}
 
 		public function data_get_all() {
diff --git a/tests/multisite/getIdFromBlogname.php b/tests/multisite/getIdFromBlogname.php
index 063518b720..3df68afe86 100644
--- a/tests/multisite/getIdFromBlogname.php
+++ b/tests/multisite/getIdFromBlogname.php
@@ -31,34 +31,34 @@ if ( is_multisite() ) :
 
 			self::$site_ids = array(
 				'wordpress.org/'         => array(
-					'domain'  => 'wordpress.org',
-					'path'    => '/',
-					'site_id' => self::$network_ids['wordpress.org/'],
+					'domain'     => 'wordpress.org',
+					'path'       => '/',
+					'network_id' => self::$network_ids['wordpress.org/'],
 				),
 				'foo.wordpress.org/'     => array(
-					'domain'  => 'foo.wordpress.org',
-					'path'    => '/',
-					'site_id' => self::$network_ids['wordpress.org/'],
+					'domain'     => 'foo.wordpress.org',
+					'path'       => '/',
+					'network_id' => self::$network_ids['wordpress.org/'],
 				),
 				'wordpress.org/foo/'     => array(
-					'domain'  => 'wordpress.org',
-					'path'    => '/foo/',
-					'site_id' => self::$network_ids['wordpress.org/'],
+					'domain'     => 'wordpress.org',
+					'path'       => '/foo/',
+					'network_id' => self::$network_ids['wordpress.org/'],
 				),
 				'www.wordpress.net/'     => array(
-					'domain'  => 'www.wordpress.net',
-					'path'    => '/',
-					'site_id' => self::$network_ids['www.wordpress.net/'],
+					'domain'     => 'www.wordpress.net',
+					'path'       => '/',
+					'network_id' => self::$network_ids['www.wordpress.net/'],
 				),
 				'foo.wordpress.net/'     => array(
-					'domain'  => 'foo.wordpress.net',
-					'path'    => '/',
-					'site_id' => self::$network_ids['www.wordpress.net/'],
+					'domain'     => 'foo.wordpress.net',
+					'path'       => '/',
+					'network_id' => self::$network_ids['www.wordpress.net/'],
 				),
 				'www.wordpress.net/foo/' => array(
-					'domain'  => 'www.wordpress.net',
-					'path'    => '/foo/',
-					'site_id' => self::$network_ids['www.wordpress.net/'],
+					'domain'     => 'www.wordpress.net',
+					'path'       => '/foo/',
+					'network_id' => self::$network_ids['www.wordpress.net/'],
 				),
 			);
 
@@ -72,7 +72,7 @@ if ( is_multisite() ) :
 			global $wpdb;
 
 			foreach ( self::$site_ids as $id ) {
-				wpmu_delete_blog( $id, true );
+				wp_delete_site( $id );
 			}
 
 			foreach ( self::$network_ids as $id ) {
@@ -101,7 +101,7 @@ if ( is_multisite() ) :
 			$result       = get_id_from_blogname( 'foo' );
 			$current_site = $original_network;
 
-			$this->assertEquals( $expected, $result );
+			$this->assertSame( $expected, $result );
 		}
 
 		/**
@@ -122,7 +122,7 @@ if ( is_multisite() ) :
 			$result       = get_id_from_blogname( 'foo' );
 			$current_site = $original_network;
 
-			$this->assertEquals( $expected, $result );
+			$this->assertSame( $expected, $result );
 		}
 
 		public function test_get_id_from_blogname_invalid_slug() {
@@ -134,7 +134,7 @@ if ( is_multisite() ) :
 			$result       = get_id_from_blogname( 'bar' );
 			$current_site = $original_network;
 
-			$this->assertEquals( null, $result );
+			$this->assertNull( $result );
 		}
 
 	}
diff --git a/tests/multisite/getMainSiteId.php b/tests/multisite/getMainSiteId.php
index 61435eb353..3d0148611f 100644
--- a/tests/multisite/getMainSiteId.php
+++ b/tests/multisite/getMainSiteId.php
@@ -35,14 +35,14 @@ if ( is_multisite() ) :
 					'path'   => '/',
 				),
 				'wordpress.org/'     => array(
-					'domain'  => 'wordpress.org',
-					'path'    => '/',
-					'site_id' => self::$network_ids['wordpress.org/'],
+					'domain'     => 'wordpress.org',
+					'path'       => '/',
+					'network_id' => self::$network_ids['wordpress.org/'],
 				),
 				'wordpress.org/foo/' => array(
-					'domain'  => 'wordpress.org',
-					'path'    => '/foo/',
-					'site_id' => self::$network_ids['wordpress.org/'],
+					'domain'     => 'wordpress.org',
+					'path'       => '/foo/',
+					'network_id' => self::$network_ids['wordpress.org/'],
 				),
 			);
 
@@ -54,7 +54,7 @@ if ( is_multisite() ) :
 
 		public static function wpTearDownAfterClass() {
 			foreach ( self::$site_ids as $id ) {
-				wpmu_delete_blog( $id, true );
+				wp_delete_site( $id );
 			}
 
 			global $wpdb;
diff --git a/tests/multisite/getSite.php b/tests/multisite/getSite.php
index 8f5759445a..1df45df9be 100644
--- a/tests/multisite/getSite.php
+++ b/tests/multisite/getSite.php
@@ -34,7 +34,7 @@ if ( is_multisite() ) :
 
 		public static function wpTearDownAfterClass() {
 			foreach ( self::$site_ids as $id ) {
-				wpmu_delete_blog( $id, true );
+				wp_delete_site( $id );
 			}
 
 			wp_update_network_site_counts();
@@ -45,7 +45,7 @@ if ( is_multisite() ) :
 			$site = get_site();
 			restore_current_blog();
 
-			$this->assertEquals( self::$site_ids['wordpress.org/foo/'], $site->id );
+			$this->assertSame( self::$site_ids['wordpress.org/foo/'], $site->id );
 		}
 
 	}
diff --git a/tests/multisite/getSpaceAllowed.php b/tests/multisite/getSpaceAllowed.php
index e876658ba0..b534d391be 100644
--- a/tests/multisite/getSpaceAllowed.php
+++ b/tests/multisite/getSpaceAllowed.php
@@ -48,7 +48,7 @@ if ( is_multisite() ) :
 			delete_option( 'blog_upload_space' );
 			delete_site_option( 'blog_upload_space' );
 
-			$this->assertEquals( 100, get_space_allowed() );
+			$this->assertSame( 100, get_space_allowed() );
 		}
 
 		/**
@@ -59,7 +59,7 @@ if ( is_multisite() ) :
 			delete_site_option( 'blog_upload_space' );
 			update_site_option( 'blog_upload_space', 200 );
 
-			$this->assertEquals( 200, get_space_allowed() );
+			$this->assertSame( 200, get_space_allowed() );
 		}
 
 		/**
@@ -73,7 +73,7 @@ if ( is_multisite() ) :
 			update_option( 'blog_upload_space', $site_option );
 			update_site_option( 'blog_upload_space', $network_option );
 
-			$this->assertEquals( $expected, get_space_allowed() );
+			$this->assertSame( $expected, get_space_allowed() );
 		}
 
 		public function data_blog_upload_space() {
@@ -108,7 +108,7 @@ if ( is_multisite() ) :
 			$space_allowed = get_space_allowed();
 			remove_filter( 'get_space_allowed', array( $this, '_filter_space_allowed' ) );
 
-			$this->assertEquals( 999, $space_allowed );
+			$this->assertSame( 999, $space_allowed );
 		}
 
 		public function _filter_space_allowed() {
diff --git a/tests/multisite/getSpaceUsed.php b/tests/multisite/getSpaceUsed.php
index 7d6d33304c..f3a4c93ecc 100644
--- a/tests/multisite/getSpaceUsed.php
+++ b/tests/multisite/getSpaceUsed.php
@@ -44,7 +44,7 @@ if ( is_multisite() ) :
 
 			delete_transient( 'dirsize_cache' );
 
-			$this->assertEquals( $size, get_space_used() );
+			$this->assertSame( $size, get_space_used() );
 			$upload_dir = wp_upload_dir();
 			$this->remove_added_uploads();
 			$this->delete_folders( $upload_dir['basedir'] );
@@ -79,7 +79,7 @@ if ( is_multisite() ) :
 
 			delete_transient( 'dirsize_cache' );
 
-			$this->assertEquals( $space_used, get_space_used() );
+			$this->assertSame( $space_used, get_space_used() );
 
 			// Switch back to the new site to remove the uploaded file.
 			switch_to_blog( $blog_id );
@@ -92,7 +92,7 @@ if ( is_multisite() ) :
 		function test_get_space_used_pre_get_spaced_used_filter() {
 			add_filter( 'pre_get_space_used', array( $this, '_filter_space_used' ) );
 
-			$this->assertEquals( 300, get_space_used() );
+			$this->assertSame( 300, get_space_used() );
 
 			remove_filter( 'pre_get_space_used', array( $this, '_filter_space_used' ) );
 		}
diff --git a/tests/multisite/ms-files-rewriting.php b/tests/multisite/ms-files-rewriting.php
index 1d39234397..c7a8e7b8e3 100644
--- a/tests/multisite/ms-files-rewriting.php
+++ b/tests/multisite/ms-files-rewriting.php
@@ -40,18 +40,18 @@ if ( is_multisite() ) :
 			$user_id  = self::factory()->user->create( array( 'role' => 'administrator' ) );
 			$blog_id2 = self::factory()->blog->create( array( 'user_id' => $user_id ) );
 			$info     = wp_upload_dir();
-			$this->assertEquals( 'http://' . $site->domain . '/wp-content/uploads/' . gmstrftime( '%Y/%m' ), $info['url'] );
-			$this->assertEquals( ABSPATH . 'wp-content/uploads/' . gmstrftime( '%Y/%m' ), $info['path'] );
-			$this->assertEquals( gmstrftime( '/%Y/%m' ), $info['subdir'] );
-			$this->assertEquals( '', $info['error'] );
+			$this->assertSame( 'http://' . $site->domain . '/wp-content/uploads/' . gmstrftime( '%Y/%m' ), $info['url'] );
+			$this->assertSame( ABSPATH . 'wp-content/uploads/' . gmstrftime( '%Y/%m' ), $info['path'] );
+			$this->assertSame( gmstrftime( '/%Y/%m' ), $info['subdir'] );
+			$this->assertFalse( $info['error'] );
 
 			switch_to_blog( $blog_id2 );
 			$info2 = wp_upload_dir();
 			$this->assertNotEquals( $info, $info2 );
-			$this->assertEquals( get_option( 'siteurl' ) . '/wp-content/blogs.dir/' . get_current_blog_id() . '/files/' . gmstrftime( '%Y/%m' ), $info2['url'] );
-			$this->assertEquals( ABSPATH . 'wp-content/blogs.dir/' . get_current_blog_id() . '/files/' . gmstrftime( '%Y/%m' ), $info2['path'] );
-			$this->assertEquals( gmstrftime( '/%Y/%m' ), $info2['subdir'] );
-			$this->assertEquals( '', $info2['error'] );
+			$this->assertSame( get_option( 'siteurl' ) . '/wp-content/blogs.dir/' . get_current_blog_id() . '/files/' . gmstrftime( '%Y/%m' ), $info2['url'] );
+			$this->assertSame( ABSPATH . 'wp-content/blogs.dir/' . get_current_blog_id() . '/files/' . gmstrftime( '%Y/%m' ), $info2['path'] );
+			$this->assertSame( gmstrftime( '/%Y/%m' ), $info2['subdir'] );
+			$this->assertFalse( $info2['error'] );
 			restore_current_blog();
 		}
 
diff --git a/tests/multisite/network.php b/tests/multisite/network.php
index f6d0984a1e..ff7a2ff4b5 100644
--- a/tests/multisite/network.php
+++ b/tests/multisite/network.php
@@ -38,19 +38,19 @@ if ( is_multisite() ) :
 
 			$sites = array(
 				array(
-					'domain'  => 'wordpress.org',
-					'path'    => '/',
-					'site_id' => self::$different_network_id,
+					'domain'     => 'wordpress.org',
+					'path'       => '/',
+					'network_id' => self::$different_network_id,
 				),
 				array(
-					'domain'  => 'wordpress.org',
-					'path'    => '/foo/',
-					'site_id' => self::$different_network_id,
+					'domain'     => 'wordpress.org',
+					'path'       => '/foo/',
+					'network_id' => self::$different_network_id,
 				),
 				array(
-					'domain'  => 'wordpress.org',
-					'path'    => '/bar/',
-					'site_id' => self::$different_network_id,
+					'domain'     => 'wordpress.org',
+					'path'       => '/bar/',
+					'network_id' => self::$different_network_id,
 				),
 			);
 
@@ -63,7 +63,7 @@ if ( is_multisite() ) :
 			global $wpdb;
 
 			foreach ( self::$different_site_ids as $id ) {
-				wpmu_delete_blog( $id, true );
+				wp_delete_site( $id );
 			}
 
 			$wpdb->query( $wpdb->prepare( "DELETE FROM {$wpdb->sitemeta} WHERE site_id = %d", self::$different_network_id ) );
@@ -76,7 +76,7 @@ if ( is_multisite() ) :
 		 * By default, only one network exists and has a network ID of 1.
 		 */
 		function test_get_main_network_id_default() {
-			$this->assertEquals( 1, get_main_network_id() );
+			$this->assertSame( 1, get_main_network_id() );
 		}
 
 		/**
@@ -86,7 +86,7 @@ if ( is_multisite() ) :
 		function test_get_main_network_id_two_networks() {
 			self::factory()->network->create();
 
-			$this->assertEquals( 1, get_main_network_id() );
+			$this->assertSame( 1, get_main_network_id() );
 		}
 
 		/**
@@ -100,7 +100,7 @@ if ( is_multisite() ) :
 
 			$current_site->id = (int) $id;
 
-			$this->assertEquals( 1, get_main_network_id() );
+			$this->assertSame( 1, get_main_network_id() );
 		}
 
 		/**
@@ -120,12 +120,12 @@ if ( is_multisite() ) :
 			$main_network_id = get_main_network_id();
 			$wpdb->query( $wpdb->prepare( "UPDATE {$wpdb->site} SET id=1 WHERE id=%d", $temp_id ) );
 
-			$this->assertEquals( self::$different_network_id, $main_network_id );
+			$this->assertSame( self::$different_network_id, $main_network_id );
 		}
 
 		function test_get_main_network_id_filtered() {
 			add_filter( 'get_main_network_id', array( $this, '_get_main_network_id' ) );
-			$this->assertEquals( 3, get_main_network_id() );
+			$this->assertSame( 3, get_main_network_id() );
 			remove_filter( 'get_main_network_id', array( $this, '_get_main_network_id' ) );
 		}
 
@@ -155,11 +155,11 @@ if ( is_multisite() ) :
 			$actual   = (int) get_blog_count(); // Count only updated when cron runs, so should be unchanged.
 
 			foreach ( $site_ids as $site_id ) {
-				wpmu_delete_blog( $site_id, true );
+				wp_delete_site( $site_id );
 			}
 			wp_update_network_counts();
 
-			$this->assertEquals( $site_count_start + 1, $actual );
+			$this->assertSame( $site_count_start + 1, $actual );
 		}
 
 		/**
@@ -175,7 +175,7 @@ if ( is_multisite() ) :
 			remove_filter( 'enable_live_network_counts', '__return_false' );
 
 			foreach ( $site_ids as $site_id ) {
-				wpmu_delete_blog( $site_id, true );
+				wp_delete_site( $site_id );
 			}
 			wp_update_network_counts();
 
@@ -195,7 +195,7 @@ if ( is_multisite() ) :
 			remove_filter( 'enable_live_network_counts', '__return_true' );
 
 			foreach ( $site_ids as $site_id ) {
-				wpmu_delete_blog( $site_id, true );
+				wp_delete_site( $site_id );
 			}
 			wp_update_network_counts();
 
@@ -246,7 +246,7 @@ if ( is_multisite() ) :
 			// No change, cache not refreshed.
 			$count = get_user_count();
 
-			$this->assertEquals( $start_count, $count );
+			$this->assertSame( $start_count, $count );
 
 			wp_update_network_counts();
 			$start_count = get_user_count();
@@ -268,26 +268,26 @@ if ( is_multisite() ) :
 			// Local activate, should be invisible for the network.
 			activate_plugin( $path ); // Enable the plugin for the current site.
 			$active_plugins = wp_get_active_network_plugins();
-			$this->assertEquals( array(), $active_plugins );
+			$this->assertSame( array(), $active_plugins );
 
 			add_action( 'deactivated_plugin', array( $this, '_helper_deactivate_hook' ) );
 
 			// Activate the plugin sitewide.
 			activate_plugin( $path, '', true ); // Enable the plugin for all sites in the network.
 			$active_plugins = wp_get_active_network_plugins();
-			$this->assertEquals( array( WP_PLUGIN_DIR . '/hello.php' ), $active_plugins );
+			$this->assertSame( array( WP_PLUGIN_DIR . '/hello.php' ), $active_plugins );
 
 			// Deactivate the plugin.
 			deactivate_plugins( $path );
 			$active_plugins = wp_get_active_network_plugins();
-			$this->assertEquals( array(), $active_plugins );
+			$this->assertSame( array(), $active_plugins );
 
-			$this->assertEquals( 1, $this->plugin_hook_count ); // Testing actions and silent mode.
+			$this->assertSame( 1, $this->plugin_hook_count ); // Testing actions and silent mode.
 
 			activate_plugin( $path, '', true ); // Enable the plugin for all sites in the network.
 			deactivate_plugins( $path, true );  // Silent mode.
 
-			$this->assertEquals( 1, $this->plugin_hook_count ); // Testing actions and silent mode.
+			$this->assertSame( 1, $this->plugin_hook_count ); // Testing actions and silent mode.
 		}
 
 		/**
@@ -302,13 +302,13 @@ if ( is_multisite() ) :
 			activate_plugin( $path, '', true ); // Enable the plugin for all sites in the network.
 			$active_plugins = wp_get_active_network_plugins();
 			$this->assertCount( 1, $active_plugins );
-			$this->assertEquals( 1, $mock->get_call_count() );
+			$this->assertSame( 1, $mock->get_call_count() );
 
 			// Should do nothing on the second try.
 			activate_plugin( $path, '', true ); // Enable the plugin for all sites in the network.
 			$active_plugins = wp_get_active_network_plugins();
 			$this->assertCount( 1, $active_plugins );
-			$this->assertEquals( 1, $mock->get_call_count() );
+			$this->assertSame( 1, $mock->get_call_count() );
 
 			remove_action( 'activate_' . $path, array( $mock, 'action' ) );
 		}
@@ -337,7 +337,7 @@ if ( is_multisite() ) :
 			self::factory()->user->create( array( 'role' => 'administrator' ) );
 
 			$count = get_user_count(); // No change, cache not refreshed.
-			$this->assertEquals( $start_count, $count );
+			$this->assertSame( $start_count, $count );
 
 			wp_update_network_counts(); // Magic happens here.
 
@@ -392,7 +392,7 @@ if ( is_multisite() ) :
 			wp_update_network_site_counts();
 
 			$result = get_blog_count();
-			$this->assertEquals( $expected, $result );
+			$this->assertSame( $expected, $result );
 		}
 
 		/**
@@ -404,7 +404,7 @@ if ( is_multisite() ) :
 			wp_update_network_site_counts( self::$different_network_id );
 
 			$result = get_blog_count( self::$different_network_id );
-			$this->assertEquals( 3, $result );
+			$this->assertSame( 3, $result );
 		}
 
 		/**
@@ -420,7 +420,7 @@ if ( is_multisite() ) :
 			wp_update_network_user_counts();
 
 			$result = get_user_count();
-			$this->assertEquals( $expected, $result );
+			$this->assertSame( $expected, $result );
 		}
 
 		/**
@@ -436,7 +436,7 @@ if ( is_multisite() ) :
 			wp_update_network_user_counts( self::$different_network_id );
 
 			$result = get_user_count( self::$different_network_id );
-			$this->assertEquals( $expected, $result );
+			$this->assertSame( $expected, $result );
 		}
 
 		/**
@@ -590,19 +590,13 @@ if ( is_multisite() ) :
 		public function test_wpmu_create_blog_updates_correct_network_site_count() {
 			$original_count = get_blog_count( self::$different_network_id );
 
-			$site_id = self::factory()->blog->create(
-				array(
-					'domain'  => 'example.org',
-					'path'    => '/',
-					'site_id' => self::$different_network_id,
-				)
-			);
+			$site_id = wpmu_create_blog( 'example.org', '/', '', 1, array(), self::$different_network_id );
 
 			$result = get_blog_count( self::$different_network_id );
 
 			wpmu_delete_blog( $site_id, true );
 
-			$this->assertEquals( $original_count + 1, $result );
+			$this->assertSame( $original_count + 1, $result );
 		}
 
 		/**
@@ -638,12 +632,12 @@ if ( is_multisite() ) :
 			$new_network = $this->factory()->network->create_and_get();
 
 			// Double-check we got the ID of the new network correct.
-			$this->assertEquals( $new_network_id, $new_network->id );
+			$this->assertSame( $new_network_id, $new_network->id );
 
 			// Verify that if we fetch the network now, it's no longer false.
 			$fetched_network = get_network( $new_network_id );
 			$this->assertInstanceOf( 'WP_Network', $fetched_network );
-			$this->assertEquals( $new_network_id, $fetched_network->id );
+			$this->assertSame( $new_network_id, $fetched_network->id );
 		}
 
 		/**
diff --git a/tests/multisite/networkQuery.php b/tests/multisite/networkQuery.php
index 0318998129..54248d81e2 100644
--- a/tests/multisite/networkQuery.php
+++ b/tests/multisite/networkQuery.php
@@ -70,7 +70,7 @@ if ( is_multisite() ) :
 				)
 			);
 
-			$this->assertEquals( 3, count( $found ) );
+			$this->assertSame( 3, count( $found ) );
 		}
 
 		public function test_wp_network_query_by_network__in_with_order() {
@@ -85,7 +85,7 @@ if ( is_multisite() ) :
 				)
 			);
 
-			$this->assertEquals( $expected, $found );
+			$this->assertSame( $expected, $found );
 
 			$found = $q->query(
 				array(
@@ -95,7 +95,7 @@ if ( is_multisite() ) :
 				)
 			);
 
-			$this->assertEquals( array_reverse( $expected ), $found );
+			$this->assertSame( array_reverse( $expected ), $found );
 		}
 
 		public function test_wp_network_query_by_network__in_with_single_id() {
@@ -109,7 +109,7 @@ if ( is_multisite() ) :
 				)
 			);
 
-			$this->assertEqualSets( $expected, $found );
+			$this->assertSameSets( $expected, $found );
 		}
 
 		public function test_wp_network_query_by_network__in_with_multiple_ids() {
@@ -123,7 +123,7 @@ if ( is_multisite() ) :
 				)
 			);
 
-			$this->assertEqualSets( $expected, $found );
+			$this->assertSameSets( $expected, $found );
 		}
 
 		public function test_wp_network_query_by_network__in_and_count_with_multiple_ids() {
@@ -138,7 +138,7 @@ if ( is_multisite() ) :
 				)
 			);
 
-			$this->assertEquals( 2, $found );
+			$this->assertSame( 2, $found );
 		}
 
 		public function test_wp_network_query_by_network__not_in_with_single_id() {
@@ -156,7 +156,7 @@ if ( is_multisite() ) :
 				)
 			);
 
-			$this->assertEqualSets( $expected, $found );
+			$this->assertSameSets( $expected, $found );
 		}
 
 		public function test_wp_network_query_by_network__not_in_with_multiple_ids() {
@@ -174,7 +174,7 @@ if ( is_multisite() ) :
 				)
 			);
 
-			$this->assertEqualSets( $expected, $found );
+			$this->assertSameSets( $expected, $found );
 		}
 
 		public function test_wp_network_query_by_domain() {
@@ -190,7 +190,7 @@ if ( is_multisite() ) :
 				self::$network_ids['www.w.org/foo/'],
 			);
 
-			$this->assertEqualSets( $expected, $found );
+			$this->assertSameSets( $expected, $found );
 		}
 
 		public function test_wp_network_query_by_domain__in_with_single_domain() {
@@ -206,7 +206,7 @@ if ( is_multisite() ) :
 				self::$network_ids['make.wordpress.org/'],
 			);
 
-			$this->assertEqualSets( $expected, $found );
+			$this->assertSameSets( $expected, $found );
 		}
 
 		public function test_wp_network_query_by_domain__in_with_multiple_domains() {
@@ -223,7 +223,7 @@ if ( is_multisite() ) :
 				self::$network_ids['make.wordpress.org/'],
 			);
 
-			$this->assertEqualSets( $expected, $found );
+			$this->assertSameSets( $expected, $found );
 		}
 
 		public function test_wp_network_query_by_domain__in_with_multiple_domains_and_number() {
@@ -240,7 +240,7 @@ if ( is_multisite() ) :
 				self::$network_ids['wordpress.org/'],
 			);
 
-			$this->assertEqualSets( $expected, $found );
+			$this->assertSameSets( $expected, $found );
 		}
 
 		public function test_wp_network_query_by_domain__in_with_multiple_domains_and_number_and_offset() {
@@ -258,7 +258,7 @@ if ( is_multisite() ) :
 				self::$network_ids['make.wordpress.org/'],
 			);
 
-			$this->assertEqualSets( $expected, $found );
+			$this->assertSameSets( $expected, $found );
 		}
 
 		public function test_wp_network_query_by_domain__not_in_with_single_domain() {
@@ -277,7 +277,7 @@ if ( is_multisite() ) :
 				self::$network_ids['www.wordpress.net/'],
 			);
 
-			$this->assertEqualSets( $expected, $found );
+			$this->assertSameSets( $expected, $found );
 		}
 
 		public function test_wp_network_query_by_domain__not_in_with_multiple_domains() {
@@ -295,7 +295,7 @@ if ( is_multisite() ) :
 				self::$network_ids['www.wordpress.net/'],
 			);
 
-			$this->assertEqualSets( $expected, $found );
+			$this->assertSameSets( $expected, $found );
 		}
 
 		public function test_wp_network_query_by_domain__not_in_with_multiple_domains_and_number() {
@@ -313,7 +313,7 @@ if ( is_multisite() ) :
 				self::$network_ids['make.wordpress.org/'],
 			);
 
-			$this->assertEqualSets( $expected, $found );
+			$this->assertSameSets( $expected, $found );
 		}
 
 		public function test_wp_network_query_by_domain__not_in_with_multiple_domains_and_number_and_offset() {
@@ -332,7 +332,7 @@ if ( is_multisite() ) :
 				self::$network_ids['www.wordpress.net/'],
 			);
 
-			$this->assertEqualSets( $expected, $found );
+			$this->assertSameSets( $expected, $found );
 		}
 
 		public function test_wp_network_query_by_path_with_expected_results() {
@@ -351,7 +351,7 @@ if ( is_multisite() ) :
 				self::$network_ids['www.wordpress.net/'],
 			);
 
-			$this->assertEqualSets( $expected, $found );
+			$this->assertSameSets( $expected, $found );
 		}
 
 		public function test_wp_network_query_by_path_and_number_and_offset_with_expected_results() {
@@ -370,7 +370,7 @@ if ( is_multisite() ) :
 				self::$network_ids['www.wordpress.net/'],
 			);
 
-			$this->assertEqualSets( $expected, $found );
+			$this->assertSameSets( $expected, $found );
 		}
 
 		public function test_wp_network_query_by_path_with_no_expected_results() {
@@ -398,7 +398,7 @@ if ( is_multisite() ) :
 				self::$network_ids['www.wordpress.net/'],
 			);
 
-			$this->assertEqualSets( $expected, $found );
+			$this->assertSameSets( $expected, $found );
 		}
 
 		public function test_wp_network_query_by_search_with_text_in_path() {
@@ -414,7 +414,7 @@ if ( is_multisite() ) :
 				self::$network_ids['www.w.org/foo/'],
 			);
 
-			$this->assertEqualSets( $expected, $found );
+			$this->assertSameSets( $expected, $found );
 		}
 
 		public function test_wp_network_query_by_path_order_by_domain_desc() {
@@ -435,7 +435,7 @@ if ( is_multisite() ) :
 				self::$network_ids['make.wordpress.org/'],
 			);
 
-			$this->assertEquals( $expected, $found );
+			$this->assertSame( $expected, $found );
 		}
 
 		/**
@@ -462,7 +462,7 @@ if ( is_multisite() ) :
 				)
 			);
 
-			$this->assertEquals( $number_of_queries, $wpdb->num_queries );
+			$this->assertSame( $number_of_queries, $wpdb->num_queries );
 		}
 
 		/**
@@ -491,7 +491,7 @@ if ( is_multisite() ) :
 					'count'  => true,
 				)
 			);
-			$this->assertEquals( $number_of_queries, $wpdb->num_queries );
+			$this->assertSame( $number_of_queries, $wpdb->num_queries );
 		}
 
 		/**
@@ -520,7 +520,7 @@ if ( is_multisite() ) :
 					'count'  => true,
 				)
 			);
-			$this->assertEquals( $number_of_queries + 1, $wpdb->num_queries );
+			$this->assertSame( $number_of_queries + 1, $wpdb->num_queries );
 		}
 
 		/**
@@ -546,7 +546,7 @@ if ( is_multisite() ) :
 			$this->assertSame( array( 555 ), $results );
 
 			// Make sure manually setting total_users doesn't get overwritten.
-			$this->assertEquals( 1, $q->found_networks );
+			$this->assertSame( 1, $q->found_networks );
 		}
 
 		public static function filter_networks_pre_query( $networks, $query ) {
diff --git a/tests/multisite/site.php b/tests/multisite/site.php
index f0aa28a06d..567ad835d1 100644
--- a/tests/multisite/site.php
+++ b/tests/multisite/site.php
@@ -44,14 +44,14 @@ if ( is_multisite() ) :
 
 			self::$site_ids = array(
 				'make.wordpress.org/'     => array(
-					'domain'  => 'make.wordpress.org',
-					'path'    => '/',
-					'site_id' => self::$network_ids['make.wordpress.org/'],
+					'domain'     => 'make.wordpress.org',
+					'path'       => '/',
+					'network_id' => self::$network_ids['make.wordpress.org/'],
 				),
 				'make.wordpress.org/foo/' => array(
-					'domain'  => 'make.wordpress.org',
-					'path'    => '/foo/',
-					'site_id' => self::$network_ids['make.wordpress.org/'],
+					'domain'     => 'make.wordpress.org',
+					'path'       => '/foo/',
+					'network_id' => self::$network_ids['make.wordpress.org/'],
 				),
 			);
 
@@ -63,9 +63,9 @@ if ( is_multisite() ) :
 			remove_action( 'wp_initialize_site', 'wp_initialize_site', 10 );
 			self::$uninitialized_site_id = wp_insert_site(
 				array(
-					'domain'  => 'uninitialized.org',
-					'path'    => '/',
-					'site_id' => self::$network_ids['make.wordpress.org/'],
+					'domain'     => 'uninitialized.org',
+					'path'       => '/',
+					'network_id' => self::$network_ids['make.wordpress.org/'],
 				)
 			);
 			add_action( 'wp_initialize_site', 'wp_initialize_site', 10, 2 );
@@ -79,7 +79,7 @@ if ( is_multisite() ) :
 			add_action( 'wp_uninitialize_site', 'wp_uninitialize_site', 10, 1 );
 
 			foreach ( self::$site_ids as $id ) {
-				wpmu_delete_blog( $id, true );
+				wp_delete_site( $id );
 			}
 
 			foreach ( self::$network_ids as $id ) {
@@ -91,44 +91,44 @@ if ( is_multisite() ) :
 		function test_switch_restore_blog() {
 			global $_wp_switched_stack, $wpdb;
 
-			$this->assertEquals( array(), $_wp_switched_stack );
+			$this->assertSame( array(), $_wp_switched_stack );
 			$this->assertFalse( ms_is_switched() );
 			$current_blog_id = get_current_blog_id();
 			$this->assertInternalType( 'integer', $current_blog_id );
 
 			wp_cache_set( 'switch-test', $current_blog_id, 'switch-test' );
-			$this->assertEquals( $current_blog_id, wp_cache_get( 'switch-test', 'switch-test' ) );
+			$this->assertSame( $current_blog_id, wp_cache_get( 'switch-test', 'switch-test' ) );
 
 			$blog_id = self::factory()->blog->create();
 
 			$cap_key = wp_get_current_user()->cap_key;
 			switch_to_blog( $blog_id );
 			$this->assertNotEquals( $cap_key, wp_get_current_user()->cap_key );
-			$this->assertEquals( array( $current_blog_id ), $_wp_switched_stack );
+			$this->assertSame( array( $current_blog_id ), $_wp_switched_stack );
 			$this->assertTrue( ms_is_switched() );
-			$this->assertEquals( $blog_id, $wpdb->blogid );
+			$this->assertSame( $blog_id, $wpdb->blogid );
 			$this->assertFalse( wp_cache_get( 'switch-test', 'switch-test' ) );
 			wp_cache_set( 'switch-test', $blog_id, 'switch-test' );
-			$this->assertEquals( $blog_id, wp_cache_get( 'switch-test', 'switch-test' ) );
+			$this->assertSame( $blog_id, wp_cache_get( 'switch-test', 'switch-test' ) );
 
 			switch_to_blog( $blog_id );
-			$this->assertEquals( array( $current_blog_id, $blog_id ), $_wp_switched_stack );
+			$this->assertSame( array( $current_blog_id, $blog_id ), $_wp_switched_stack );
 			$this->assertTrue( ms_is_switched() );
-			$this->assertEquals( $blog_id, $wpdb->blogid );
-			$this->assertEquals( $blog_id, wp_cache_get( 'switch-test', 'switch-test' ) );
+			$this->assertSame( $blog_id, $wpdb->blogid );
+			$this->assertSame( $blog_id, wp_cache_get( 'switch-test', 'switch-test' ) );
 
 			restore_current_blog();
-			$this->assertEquals( array( $current_blog_id ), $_wp_switched_stack );
+			$this->assertSame( array( $current_blog_id ), $_wp_switched_stack );
 			$this->assertTrue( ms_is_switched() );
-			$this->assertEquals( $blog_id, $wpdb->blogid );
-			$this->assertEquals( $blog_id, wp_cache_get( 'switch-test', 'switch-test' ) );
+			$this->assertSame( $blog_id, $wpdb->blogid );
+			$this->assertSame( $blog_id, wp_cache_get( 'switch-test', 'switch-test' ) );
 
 			restore_current_blog();
-			$this->assertEquals( $cap_key, wp_get_current_user()->cap_key );
-			$this->assertEquals( $current_blog_id, get_current_blog_id() );
-			$this->assertEquals( array(), $_wp_switched_stack );
+			$this->assertSame( $cap_key, wp_get_current_user()->cap_key );
+			$this->assertSame( $current_blog_id, get_current_blog_id() );
+			$this->assertSame( array(), $_wp_switched_stack );
 			$this->assertFalse( ms_is_switched() );
-			$this->assertEquals( $current_blog_id, wp_cache_get( 'switch-test', 'switch-test' ) );
+			$this->assertSame( $current_blog_id, wp_cache_get( 'switch-test', 'switch-test' ) );
 
 			$this->assertFalse( restore_current_blog() );
 		}
@@ -144,7 +144,7 @@ if ( is_multisite() ) :
 			$this->assertInternalType( 'int', $blog_id );
 			$prefix = $wpdb->get_blog_prefix( $blog_id );
 
-			// $get_all = false, only retrieve details from the blogs table
+			// $get_all = false, only retrieve details from the blogs table.
 			$details = get_blog_details( $blog_id, false );
 
 			// Combine domain and path for a site specific cache key.
@@ -152,14 +152,14 @@ if ( is_multisite() ) :
 
 			$this->assertEquals( $details, wp_cache_get( $blog_id . 'short', 'blog-details' ) );
 
-			// get_blogaddress_by_name()
-			$this->assertEquals( 'http://' . $details->domain . $details->path, get_blogaddress_by_name( trim( $details->path, '/' ) ) );
+			// get_blogaddress_by_name().
+			$this->assertSame( 'http://' . $details->domain . $details->path, get_blogaddress_by_name( trim( $details->path, '/' ) ) );
 
-			// These are empty until get_blog_details() is called with $get_all = true
-			$this->assertEquals( false, wp_cache_get( $blog_id, 'blog-details' ) );
-			$this->assertEquals( false, wp_cache_get( $key, 'blog-lookup' ) );
+			// These are empty until get_blog_details() is called with $get_all = true.
+			$this->assertFalse( wp_cache_get( $blog_id, 'blog-details' ) );
+			$this->assertFalse( wp_cache_get( $key, 'blog-lookup' ) );
 
-			// $get_all = true, populate the full blog-details cache and the blog slug lookup cache
+			// $get_all = true, populate the full blog-details cache and the blog slug lookup cache.
 			$details = get_blog_details( $blog_id, true );
 			$this->assertEquals( $details, wp_cache_get( $blog_id, 'blog-details' ) );
 			$this->assertEquals( $details, wp_cache_get( $key, 'blog-lookup' ) );
@@ -187,9 +187,9 @@ if ( is_multisite() ) :
 				}
 			}
 
-			// update the blog count cache to use get_blog_count()
+			// Update the blog count cache to use get_blog_count().
 			wp_update_network_counts();
-			$this->assertEquals( 2, (int) get_blog_count() );
+			$this->assertSame( 2, (int) get_blog_count() );
 		}
 
 		public function test_site_caches_should_invalidate_when_invalidation_is_not_suspended() {
@@ -215,7 +215,7 @@ if ( is_multisite() ) :
 			$new_details = get_site( $site_id );
 			wp_suspend_cache_invalidation( $suspend );
 
-			$this->assertEquals( $details->path, $new_details->path );
+			$this->assertSame( $details->path, $new_details->path );
 		}
 
 		/**
@@ -230,10 +230,10 @@ if ( is_multisite() ) :
 			// Delete the site without forcing a table drop.
 			wpmu_delete_blog( $blog_id, false );
 
-			$this->assertEquals( false, wp_cache_get( $blog_id, 'blog-details' ) );
-			$this->assertEquals( false, wp_cache_get( $blog_id . 'short', 'blog-details' ) );
-			$this->assertEquals( false, wp_cache_get( $key, 'blog-lookup' ) );
-			$this->assertEquals( false, wp_cache_get( $key, 'blog-id-cache' ) );
+			$this->assertFalse( wp_cache_get( $blog_id, 'blog-details' ) );
+			$this->assertFalse( wp_cache_get( $blog_id . 'short', 'blog-details' ) );
+			$this->assertFalse( wp_cache_get( $key, 'blog-lookup' ) );
+			$this->assertFalse( wp_cache_get( $key, 'blog-id-cache' ) );
 		}
 
 		/**
@@ -271,10 +271,10 @@ if ( is_multisite() ) :
 			// Delete the site and force a table drop.
 			wpmu_delete_blog( $blog_id, true );
 
-			$this->assertEquals( false, wp_cache_get( $blog_id, 'blog-details' ) );
-			$this->assertEquals( false, wp_cache_get( $blog_id . 'short', 'blog-details' ) );
-			$this->assertEquals( false, wp_cache_get( $key, 'blog-lookup' ) );
-			$this->assertEquals( false, wp_cache_get( $key, 'blog-id-cache' ) );
+			$this->assertFalse( wp_cache_get( $blog_id, 'blog-details' ) );
+			$this->assertFalse( wp_cache_get( $blog_id . 'short', 'blog-details' ) );
+			$this->assertFalse( wp_cache_get( $key, 'blog-lookup' ) );
+			$this->assertFalse( wp_cache_get( $key, 'blog-id-cache' ) );
 		}
 
 		/**
@@ -312,10 +312,10 @@ if ( is_multisite() ) :
 			// Delete the site and force a table drop.
 			wpmu_delete_blog( $blog_id, true );
 
-			$this->assertEquals( false, wp_cache_get( $blog_id, 'blog-details' ) );
-			$this->assertEquals( false, wp_cache_get( $blog_id . 'short', 'blog-details' ) );
-			$this->assertEquals( false, wp_cache_get( $key, 'blog-lookup' ) );
-			$this->assertEquals( false, wp_cache_get( $key, 'blog-id-cache' ) );
+			$this->assertFalse( wp_cache_get( $blog_id, 'blog-details' ) );
+			$this->assertFalse( wp_cache_get( $blog_id . 'short', 'blog-details' ) );
+			$this->assertFalse( wp_cache_get( $key, 'blog-lookup' ) );
+			$this->assertFalse( wp_cache_get( $key, 'blog-id-cache' ) );
 		}
 
 		/**
@@ -350,9 +350,9 @@ if ( is_multisite() ) :
 			// Delete the site without forcing a table drop.
 			wpmu_delete_blog( $blog_id, false );
 
-			// update the blog count cache to use get_blog_count()
+			// Update the blog count cache to use get_blog_count().
 			wp_update_network_counts();
-			$this->assertEquals( 1, get_blog_count() );
+			$this->assertSame( 1, get_blog_count() );
 		}
 
 		/**
@@ -364,9 +364,9 @@ if ( is_multisite() ) :
 			// Delete the site and force a table drop.
 			wpmu_delete_blog( $blog_id, true );
 
-			// update the blog count cache to use get_blog_count()
+			// Update the blog count cache to use get_blog_count().
 			wp_update_network_counts();
-			$this->assertEquals( 1, get_blog_count() );
+			$this->assertSame( 1, get_blog_count() );
 		}
 
 		/**
@@ -405,11 +405,11 @@ if ( is_multisite() ) :
 
 			wpmu_update_blogs_date();
 
-			// compare the update time with the current time, allow delta < 2
-			$blog            = get_site( get_current_blog_id() );
-			$current_time    = time();
-			$time_difference = $current_time - strtotime( $blog->last_updated );
-			$this->assertLessThan( 2, $time_difference );
+			$blog         = get_site( get_current_blog_id() );
+			$current_time = time();
+
+			// Compare the update time with the current time, allow delta < 2.
+			$this->assertEqualsWithDelta( $current_time, strtotime( $blog->last_updated ), 2, 'The dates should be equal' );
 		}
 
 		/**
@@ -434,7 +434,7 @@ if ( is_multisite() ) :
 			get_blog_details( $blog_id );
 
 			// When the cache is primed with an invalid site, the value is set to -1.
-			$this->assertEquals( -1, wp_cache_get( $blog_id, 'blog-details' ) );
+			$this->assertSame( -1, wp_cache_get( $blog_id, 'blog-details' ) );
 
 			// Create a site in the invalid site's place.
 			self::factory()->blog->create();
@@ -453,7 +453,7 @@ if ( is_multisite() ) :
 		 */
 		function test_update_blog_status() {
 			$result = update_blog_status( 1, 'spam', 0 );
-			$this->assertEquals( 0, $result );
+			$this->assertSame( 0, $result );
 		}
 
 		/**
@@ -461,7 +461,7 @@ if ( is_multisite() ) :
 		 */
 		function test_update_blog_status_invalid_status() {
 			$result = update_blog_status( 1, 'doesnotexist', 'invalid' );
-			$this->assertEquals( 'invalid', $result );
+			$this->assertSame( 'invalid', $result );
 		}
 
 		function test_update_blog_status_make_ham_blog_action() {
@@ -475,15 +475,15 @@ if ( is_multisite() ) :
 			update_blog_status( $blog_id, 'spam', 0 );
 			$blog = get_site( $blog_id );
 
-			$this->assertEquals( '0', $blog->spam );
-			$this->assertEquals( 1, $test_action_counter );
+			$this->assertSame( '0', $blog->spam );
+			$this->assertSame( 1, $test_action_counter );
 
 			// The action should not fire if the status of 'spam' stays the same.
 			update_blog_status( $blog_id, 'spam', 0 );
 			$blog = get_site( $blog_id );
 
-			$this->assertEquals( '0', $blog->spam );
-			$this->assertEquals( 1, $test_action_counter );
+			$this->assertSame( '0', $blog->spam );
+			$this->assertSame( 1, $test_action_counter );
 
 			remove_action( 'make_ham_blog', array( $this, '_action_counter_cb' ), 10 );
 		}
@@ -498,15 +498,15 @@ if ( is_multisite() ) :
 			update_blog_status( $blog_id, 'spam', 1 );
 			$blog = get_site( $blog_id );
 
-			$this->assertEquals( '1', $blog->spam );
-			$this->assertEquals( 1, $test_action_counter );
+			$this->assertSame( '1', $blog->spam );
+			$this->assertSame( 1, $test_action_counter );
 
 			// The action should not fire if the status of 'spam' stays the same.
 			update_blog_status( $blog_id, 'spam', 1 );
 			$blog = get_site( $blog_id );
 
-			$this->assertEquals( '1', $blog->spam );
-			$this->assertEquals( 1, $test_action_counter );
+			$this->assertSame( '1', $blog->spam );
+			$this->assertSame( 1, $test_action_counter );
 
 			remove_action( 'make_spam_blog', array( $this, '_action_counter_cb' ), 10 );
 		}
@@ -521,15 +521,15 @@ if ( is_multisite() ) :
 			update_blog_status( $blog_id, 'archived', 1 );
 			$blog = get_site( $blog_id );
 
-			$this->assertEquals( '1', $blog->archived );
-			$this->assertEquals( 1, $test_action_counter );
+			$this->assertSame( '1', $blog->archived );
+			$this->assertSame( 1, $test_action_counter );
 
 			// The action should not fire if the status of 'archived' stays the same.
 			update_blog_status( $blog_id, 'archived', 1 );
 			$blog = get_site( $blog_id );
 
-			$this->assertEquals( '1', $blog->archived );
-			$this->assertEquals( 1, $test_action_counter );
+			$this->assertSame( '1', $blog->archived );
+			$this->assertSame( 1, $test_action_counter );
 
 			remove_action( 'archive_blog', array( $this, '_action_counter_cb' ), 10 );
 		}
@@ -545,14 +545,14 @@ if ( is_multisite() ) :
 			update_blog_status( $blog_id, 'archived', 0 );
 			$blog = get_site( $blog_id );
 
-			$this->assertEquals( '0', $blog->archived );
-			$this->assertEquals( 1, $test_action_counter );
+			$this->assertSame( '0', $blog->archived );
+			$this->assertSame( 1, $test_action_counter );
 
 			// The action should not fire if the status of 'archived' stays the same.
 			update_blog_status( $blog_id, 'archived', 0 );
 			$blog = get_site( $blog_id );
-			$this->assertEquals( '0', $blog->archived );
-			$this->assertEquals( 1, $test_action_counter );
+			$this->assertSame( '0', $blog->archived );
+			$this->assertSame( 1, $test_action_counter );
 
 			remove_action( 'unarchive_blog', array( $this, '_action_counter_cb' ), 10 );
 		}
@@ -567,15 +567,15 @@ if ( is_multisite() ) :
 			update_blog_status( $blog_id, 'deleted', 1 );
 			$blog = get_site( $blog_id );
 
-			$this->assertEquals( '1', $blog->deleted );
-			$this->assertEquals( 1, $test_action_counter );
+			$this->assertSame( '1', $blog->deleted );
+			$this->assertSame( 1, $test_action_counter );
 
 			// The action should not fire if the status of 'deleted' stays the same.
 			update_blog_status( $blog_id, 'deleted', 1 );
 			$blog = get_site( $blog_id );
 
-			$this->assertEquals( '1', $blog->deleted );
-			$this->assertEquals( 1, $test_action_counter );
+			$this->assertSame( '1', $blog->deleted );
+			$this->assertSame( 1, $test_action_counter );
 
 			remove_action( 'make_delete_blog', array( $this, '_action_counter_cb' ), 10 );
 		}
@@ -591,15 +591,15 @@ if ( is_multisite() ) :
 			update_blog_status( $blog_id, 'deleted', 0 );
 			$blog = get_site( $blog_id );
 
-			$this->assertEquals( '0', $blog->deleted );
-			$this->assertEquals( 1, $test_action_counter );
+			$this->assertSame( '0', $blog->deleted );
+			$this->assertSame( 1, $test_action_counter );
 
 			// The action should not fire if the status of 'deleted' stays the same.
 			update_blog_status( $blog_id, 'deleted', 0 );
 			$blog = get_site( $blog_id );
 
-			$this->assertEquals( '0', $blog->deleted );
-			$this->assertEquals( 1, $test_action_counter );
+			$this->assertSame( '0', $blog->deleted );
+			$this->assertSame( 1, $test_action_counter );
 
 			remove_action( 'make_undelete_blog', array( $this, '_action_counter_cb' ), 10 );
 		}
@@ -614,15 +614,15 @@ if ( is_multisite() ) :
 			update_blog_status( $blog_id, 'mature', 1 );
 			$blog = get_site( $blog_id );
 
-			$this->assertEquals( '1', $blog->mature );
-			$this->assertEquals( 1, $test_action_counter );
+			$this->assertSame( '1', $blog->mature );
+			$this->assertSame( 1, $test_action_counter );
 
 			// The action should not fire if the status of 'mature' stays the same.
 			update_blog_status( $blog_id, 'mature', 1 );
 			$blog = get_site( $blog_id );
 
-			$this->assertEquals( '1', $blog->mature );
-			$this->assertEquals( 1, $test_action_counter );
+			$this->assertSame( '1', $blog->mature );
+			$this->assertSame( 1, $test_action_counter );
 
 			remove_action( 'mature_blog', array( $this, '_action_counter_cb' ), 10 );
 		}
@@ -638,15 +638,15 @@ if ( is_multisite() ) :
 			update_blog_status( $blog_id, 'mature', 0 );
 
 			$blog = get_site( $blog_id );
-			$this->assertEquals( '0', $blog->mature );
-			$this->assertEquals( 1, $test_action_counter );
+			$this->assertSame( '0', $blog->mature );
+			$this->assertSame( 1, $test_action_counter );
 
 			// The action should not fire if the status of 'mature' stays the same.
 			update_blog_status( $blog_id, 'mature', 0 );
 			$blog = get_site( $blog_id );
 
-			$this->assertEquals( '0', $blog->mature );
-			$this->assertEquals( 1, $test_action_counter );
+			$this->assertSame( '0', $blog->mature );
+			$this->assertSame( 1, $test_action_counter );
 
 			remove_action( 'unmature_blog', array( $this, '_action_counter_cb' ), 10 );
 		}
@@ -661,15 +661,15 @@ if ( is_multisite() ) :
 			update_blog_status( $blog_id, 'public', 0 );
 
 			$blog = get_site( $blog_id );
-			$this->assertEquals( '0', $blog->public );
-			$this->assertEquals( 1, $test_action_counter );
+			$this->assertSame( '0', $blog->public );
+			$this->assertSame( 1, $test_action_counter );
 
 			// The action should not fire if the status of 'mature' stays the same.
 			update_blog_status( $blog_id, 'public', 0 );
 			$blog = get_site( $blog_id );
 
-			$this->assertEquals( '0', $blog->public );
-			$this->assertEquals( 1, $test_action_counter );
+			$this->assertSame( '0', $blog->public );
+			$this->assertSame( 1, $test_action_counter );
 
 			remove_action( 'update_blog_public', array( $this, '_action_counter_cb' ), 10 );
 		}
@@ -680,10 +680,10 @@ if ( is_multisite() ) :
 		function test_posts_count() {
 			self::factory()->post->create();
 			$post2 = self::factory()->post->create();
-			$this->assertEquals( 2, get_site()->post_count );
+			$this->assertSame( 2, get_site()->post_count );
 
 			wp_delete_post( $post2 );
-			$this->assertEquals( 1, get_site()->post_count );
+			$this->assertSame( 1, get_site()->post_count );
 		}
 
 		/**
@@ -692,11 +692,11 @@ if ( is_multisite() ) :
 		function test_blog_details_cache_invalidation() {
 			update_option( 'blogname', 'foo' );
 			$details = get_site( get_current_blog_id() );
-			$this->assertEquals( 'foo', $details->blogname );
+			$this->assertSame( 'foo', $details->blogname );
 
 			update_option( 'blogname', 'bar' );
 			$details = get_site( get_current_blog_id() );
-			$this->assertEquals( 'bar', $details->blogname );
+			$this->assertSame( 'bar', $details->blogname );
 		}
 
 		/**
@@ -709,8 +709,8 @@ if ( is_multisite() ) :
 			$key     = md5( $details->domain . $details->path );
 
 			// Test the original response and cached response for the newly created site.
-			$this->assertEquals( $blog_id, get_blog_id_from_url( $details->domain, $details->path ) );
-			$this->assertEquals( $blog_id, wp_cache_get( $key, 'blog-id-cache' ) );
+			$this->assertSame( $blog_id, get_blog_id_from_url( $details->domain, $details->path ) );
+			$this->assertSame( $blog_id, wp_cache_get( $key, 'blog-id-cache' ) );
 		}
 
 		/**
@@ -725,7 +725,7 @@ if ( is_multisite() ) :
 			);
 			$details = get_site( $blog_id );
 
-			$this->assertEquals( $blog_id, get_blog_id_from_url( strtoupper( $details->domain ), strtoupper( $details->path ) ) );
+			$this->assertSame( $blog_id, get_blog_id_from_url( strtoupper( $details->domain ), strtoupper( $details->path ) ) );
 		}
 
 		/**
@@ -735,8 +735,8 @@ if ( is_multisite() ) :
 			$blog_id = self::factory()->blog->create( array( 'path' => '/xyz' ) );
 			$details = get_site( $blog_id );
 
-			$this->assertEquals( 0, get_blog_id_from_url( $details->domain, 'foo' ) );
-			$this->assertEquals( -1, wp_cache_get( md5( $details->domain . 'foo' ), 'blog-id-cache' ) );
+			$this->assertSame( 0, get_blog_id_from_url( $details->domain, 'foo' ) );
+			$this->assertSame( -1, wp_cache_get( md5( $details->domain . 'foo' ), 'blog-id-cache' ) );
 		}
 
 		/**
@@ -749,8 +749,8 @@ if ( is_multisite() ) :
 			$key     = md5( $details->domain . $details->path );
 			wpmu_delete_blog( $blog_id );
 
-			$this->assertEquals( $blog_id, get_blog_id_from_url( $details->domain, $details->path ) );
-			$this->assertEquals( $blog_id, wp_cache_get( $key, 'blog-id-cache' ) );
+			$this->assertSame( $blog_id, get_blog_id_from_url( $details->domain, $details->path ) );
+			$this->assertSame( $blog_id, wp_cache_get( $key, 'blog-id-cache' ) );
 		}
 
 		/**
@@ -763,9 +763,9 @@ if ( is_multisite() ) :
 			$key     = md5( $details->domain . $details->path );
 			wpmu_delete_blog( $blog_id, true );
 
-			$this->assertEquals( false, wp_cache_get( $key, 'blog-id-cache' ) );
-			$this->assertEquals( 0, get_blog_id_from_url( $details->domain, $details->path ) );
-			$this->assertEquals( -1, wp_cache_get( $key, 'blog-id-cache' ) );
+			$this->assertFalse( wp_cache_get( $key, 'blog-id-cache' ) );
+			$this->assertSame( 0, get_blog_id_from_url( $details->domain, $details->path ) );
+			$this->assertSame( -1, wp_cache_get( $key, 'blog-id-cache' ) );
 		}
 
 		/**
@@ -810,26 +810,26 @@ if ( is_multisite() ) :
 			$site = get_current_site();
 
 			$info = wp_upload_dir();
-			$this->assertEquals( 'http://' . $site->domain . '/wp-content/uploads/' . gmstrftime( '%Y/%m' ), $info['url'] );
-			$this->assertEquals( ABSPATH . 'wp-content/uploads/' . gmstrftime( '%Y/%m' ), $info['path'] );
-			$this->assertEquals( gmstrftime( '/%Y/%m' ), $info['subdir'] );
-			$this->assertEquals( '', $info['error'] );
+			$this->assertSame( 'http://' . $site->domain . '/wp-content/uploads/' . gmstrftime( '%Y/%m' ), $info['url'] );
+			$this->assertSame( ABSPATH . 'wp-content/uploads/' . gmstrftime( '%Y/%m' ), $info['path'] );
+			$this->assertSame( gmstrftime( '/%Y/%m' ), $info['subdir'] );
+			$this->assertFalse( $info['error'] );
 
 			$blog_id = self::factory()->blog->create();
 
 			switch_to_blog( $blog_id );
 			$info = wp_upload_dir();
-			$this->assertEquals( 'http://' . $site->domain . '/wp-content/uploads/sites/' . get_current_blog_id() . '/' . gmstrftime( '%Y/%m' ), $info['url'] );
-			$this->assertEquals( ABSPATH . 'wp-content/uploads/sites/' . get_current_blog_id() . '/' . gmstrftime( '%Y/%m' ), $info['path'] );
-			$this->assertEquals( gmstrftime( '/%Y/%m' ), $info['subdir'] );
-			$this->assertEquals( '', $info['error'] );
+			$this->assertSame( 'http://' . $site->domain . '/wp-content/uploads/sites/' . get_current_blog_id() . '/' . gmstrftime( '%Y/%m' ), $info['url'] );
+			$this->assertSame( ABSPATH . 'wp-content/uploads/sites/' . get_current_blog_id() . '/' . gmstrftime( '%Y/%m' ), $info['path'] );
+			$this->assertSame( gmstrftime( '/%Y/%m' ), $info['subdir'] );
+			$this->assertFalse( $info['error'] );
 			restore_current_blog();
 
 			$info = wp_upload_dir();
-			$this->assertEquals( 'http://' . $site->domain . '/wp-content/uploads/' . gmstrftime( '%Y/%m' ), $info['url'] );
-			$this->assertEquals( ABSPATH . 'wp-content/uploads/' . gmstrftime( '%Y/%m' ), $info['path'] );
-			$this->assertEquals( gmstrftime( '/%Y/%m' ), $info['subdir'] );
-			$this->assertEquals( '', $info['error'] );
+			$this->assertSame( 'http://' . $site->domain . '/wp-content/uploads/' . gmstrftime( '%Y/%m' ), $info['url'] );
+			$this->assertSame( ABSPATH . 'wp-content/uploads/' . gmstrftime( '%Y/%m' ), $info['path'] );
+			$this->assertSame( gmstrftime( '/%Y/%m' ), $info['subdir'] );
+			$this->assertFalse( $info['error'] );
 		}
 
 		/**
@@ -879,13 +879,13 @@ if ( is_multisite() ) :
 		function test_domain_exists_with_default_site_id() {
 			$details = get_site( 1 );
 
-			$this->assertEquals( 1, domain_exists( $details->domain, $details->path ) );
+			$this->assertSame( 1, domain_exists( $details->domain, $details->path ) );
 		}
 
 		function test_domain_exists_with_specified_site_id() {
 			$details = get_site( 1 );
 
-			$this->assertEquals( 1, domain_exists( $details->domain, $details->path, $details->site_id ) );
+			$this->assertSame( 1, domain_exists( $details->domain, $details->path, $details->site_id ) );
 		}
 
 		/**
@@ -895,18 +895,18 @@ if ( is_multisite() ) :
 		function test_domain_does_not_exist_with_invalid_site_id() {
 			$details = get_site( 1 );
 
-			$this->assertEquals( null, domain_exists( $details->domain, $details->path, 999 ) );
+			$this->assertNull( domain_exists( $details->domain, $details->path, 999 ) );
 		}
 
 		function test_invalid_domain_does_not_exist_with_default_site_id() {
-			$this->assertEquals( null, domain_exists( 'foo', 'bar' ) );
+			$this->assertNull( domain_exists( 'foo', 'bar' ) );
 		}
 
 		function test_domain_filtered_to_exist() {
 			add_filter( 'domain_exists', array( $this, '_domain_exists_cb' ), 10, 4 );
 			$exists = domain_exists( 'foo', 'bar' );
 			remove_filter( 'domain_exists', array( $this, '_domain_exists_cb' ), 10, 4 );
-			$this->assertEquals( 1234, $exists );
+			$this->assertSame( 1234, $exists );
 		}
 
 		/**
@@ -919,16 +919,16 @@ if ( is_multisite() ) :
 			$exists2 = domain_exists( 'foo', 'bar/' );
 			remove_filter( 'domain_exists', array( $this, '_domain_exists_cb' ), 10, 4 );
 
-			// Make sure the same result is returned with or without a trailing slash
-			$this->assertEquals( $exists1, $exists2 );
+			// Make sure the same result is returned with or without a trailing slash.
+			$this->assertSame( $exists1, $exists2 );
 		}
 
 		/**
-		 * Tests returning an address for a given valid id.
+		 * Tests returning an address for a given valid ID.
 		 */
 		function test_get_blogaddress_by_id_with_valid_id() {
 			$blogaddress = get_blogaddress_by_id( 1 );
-			$this->assertEquals( 'http://' . WP_TESTS_DOMAIN . '/', $blogaddress );
+			$this->assertSame( 'http://' . WP_TESTS_DOMAIN . '/', $blogaddress );
 		}
 
 		/**
@@ -936,7 +936,7 @@ if ( is_multisite() ) :
 		 */
 		function test_get_blogaddress_by_id_with_invalid_id() {
 			$blogaddress = get_blogaddress_by_id( 42 );
-			$this->assertEquals( '', $blogaddress );
+			$this->assertSame( '', $blogaddress );
 		}
 
 		/**
@@ -1180,7 +1180,7 @@ if ( is_multisite() ) :
 			$old_count = did_action( 'clean_site_cache' );
 
 			clean_blog_cache( $site );
-			$this->assertEquals( $old_count + 1, did_action( 'clean_site_cache' ) );
+			$this->assertSame( $old_count + 1, did_action( 'clean_site_cache' ) );
 		}
 
 		/**
@@ -1194,7 +1194,7 @@ if ( is_multisite() ) :
 			$suspend = wp_suspend_cache_invalidation();
 			clean_blog_cache( $site );
 			wp_suspend_cache_invalidation( $suspend );
-			$this->assertEquals( $old_count, did_action( 'clean_site_cache' ) );
+			$this->assertSame( $old_count, did_action( 'clean_site_cache' ) );
 		}
 
 		/**
@@ -1204,7 +1204,7 @@ if ( is_multisite() ) :
 			$old_count = did_action( 'clean_site_cache' );
 
 			clean_blog_cache( null );
-			$this->assertEquals( $old_count, did_action( 'clean_site_cache' ) );
+			$this->assertSame( $old_count, did_action( 'clean_site_cache' ) );
 		}
 
 		/**
@@ -1214,7 +1214,7 @@ if ( is_multisite() ) :
 			$old_count = did_action( 'clean_site_cache' );
 
 			clean_blog_cache( 'something' );
-			$this->assertEquals( $old_count, did_action( 'clean_site_cache' ) );
+			$this->assertSame( $old_count, did_action( 'clean_site_cache' ) );
 		}
 
 		/**
@@ -1287,8 +1287,6 @@ if ( is_multisite() ) :
 				array( '%blog_id%' . 'short', 'blog-details' ),
 				array( '%domain_path_key%', 'blog-lookup' ),
 				array( '%domain_path_key%', 'blog-id-cache' ),
-				array( 'current_blog_%domain%', 'site-options' ),
-				array( 'current_blog_%domain%%path%', 'site-options' ),
 			);
 		}
 
@@ -1388,6 +1386,32 @@ if ( is_multisite() ) :
 			);
 		}
 
+		/**
+		 * @ticket 50324
+		 */
+		public function test_wp_insert_site_with_clean_site_cache() {
+			remove_action( 'wp_initialize_site', 'wp_initialize_site', 10 );
+
+			add_action( 'clean_site_cache', array( $this, 'action_database_insert_on_clean_site_cache' ) );
+
+			$site_id = wp_insert_site(
+				array(
+					'domain'     => 'valid-domain.com',
+					'path'       => '/valid-path/',
+					'network_id' => 1,
+				)
+			);
+
+			remove_action( 'clean_site_cache', array( $this, 'action_database_insert_on_clean_site_cache' ) );
+
+			$this->assertInternalType( 'integer', $site_id );
+
+		}
+
+		public function action_database_insert_on_clean_site_cache() {
+			update_site_option( 'database_write_test.' . time(), true );
+		}
+
 		/**
 		 * @ticket 40364
 		 */
@@ -1419,7 +1443,7 @@ if ( is_multisite() ) :
 				} elseif ( 'last_updated' === $key ) {
 					$this->assertTrue( $old_site->last_updated <= $value );
 				} else {
-					$this->assertEquals( $old_site->$key, $value );
+					$this->assertSame( $old_site->$key, $value );
 				}
 			}
 		}
@@ -1516,7 +1540,7 @@ if ( is_multisite() ) :
 			$result = wp_delete_site( $site_id );
 
 			$this->assertInstanceOf( 'WP_Site', $result );
-			$this->assertEquals( $result->to_array(), $site->to_array() );
+			$this->assertSame( $result->to_array(), $site->to_array() );
 		}
 
 		/**
@@ -1550,7 +1574,7 @@ if ( is_multisite() ) :
 		public function test_wp_normalize_site_data( $data, $expected ) {
 			$result = wp_normalize_site_data( $data );
 
-			$this->assertEqualSetsWithIndex( $expected, $result );
+			$this->assertSameSetsWithIndex( $expected, $result );
 		}
 
 		public function data_wp_normalize_site_data() {
@@ -1633,7 +1657,7 @@ if ( is_multisite() ) :
 			if ( empty( $expected_errors ) ) {
 				$this->assertEmpty( $result->errors );
 			} else {
-				$this->assertEqualSets( $expected_errors, array_keys( $result->errors ) );
+				$this->assertSameSets( $expected_errors, array_keys( $result->errors ) );
 			}
 		}
 
@@ -1768,16 +1792,16 @@ if ( is_multisite() ) :
 			$this->assertInternalType( 'integer', $site_id );
 
 			$site = get_site( $site_id );
-			$this->assertSame( $first_date, $site->registered );
-			$this->assertSame( $first_date, $site->last_updated );
+			$this->assertEqualsWithDelta( strtotime( $first_date ), strtotime( $site->registered ), 2, 'The dates should be equal' );
+			$this->assertEqualsWithDelta( strtotime( $first_date ), strtotime( $site->last_updated ), 2, 'The dates should be equal' );
 
 			$second_date = current_time( 'mysql', true );
 			$site_id     = wp_update_site( $site_id, array() );
 			$this->assertInternalType( 'integer', $site_id );
 
 			$site = get_site( $site_id );
-			$this->assertSame( $first_date, $site->registered );
-			$this->assertSame( $second_date, $site->last_updated );
+			$this->assertEqualsWithDelta( strtotime( $first_date ), strtotime( $site->registered ), 2, 'The dates should be equal' );
+			$this->assertEqualsWithDelta( strtotime( $second_date ), strtotime( $site->last_updated ), 2, 'The dates should be equal' );
 		}
 
 		/**
@@ -1931,8 +1955,8 @@ if ( is_multisite() ) :
 			$update_result   = $this->get_listen_to_site_status_hooks_result();
 
 			// Check both insert and update results.
-			$this->assertEqualSetsWithIndex( $insert_expected, $insert_result );
-			$this->assertEqualSetsWithIndex( $update_expected, $update_result );
+			$this->assertSameSetsWithIndex( $insert_expected, $insert_result );
+			$this->assertSameSetsWithIndex( $update_expected, $update_result );
 		}
 
 		public function data_site_status_hook_triggers() {
@@ -2092,8 +2116,8 @@ if ( is_multisite() ) :
 
 			$this->assertTrue( $result );
 			$this->assertTrue( $initialized );
-			$this->assertEquals( $expected_options, $options );
-			$this->assertEquals( $expected_meta, $meta );
+			$this->assertSame( $expected_options, $options );
+			$this->assertSame( $expected_meta, $meta );
 		}
 
 		public function data_wp_initialize_site() {
@@ -2163,7 +2187,7 @@ if ( is_multisite() ) :
 			wp_uninitialize_site( self::$uninitialized_site_id );
 
 			$this->assertTrue( $result );
-			$this->assertEqualSets(
+			$this->assertSameSets(
 				array(
 					'administrator',
 					'editor',
@@ -2190,7 +2214,7 @@ if ( is_multisite() ) :
 
 			$this->assertTrue( $result );
 			$this->assertTrue( $user_is_admin );
-			$this->assertEquals( get_userdata( 1 )->user_email, $admin_email );
+			$this->assertSame( get_userdata( 1 )->user_email, $admin_email );
 		}
 
 		/**
@@ -2327,7 +2351,7 @@ if ( is_multisite() ) :
 			$passed_args                   = $this->wp_initialize_site_args;
 			$this->wp_initialize_site_args = null;
 
-			$this->assertEqualSetsWithIndex( $args, $passed_args );
+			$this->assertSameSetsWithIndex( $args, $passed_args );
 		}
 
 		public function filter_wp_initialize_site_args_catch_args( $args ) {
@@ -2346,8 +2370,8 @@ if ( is_multisite() ) :
 
 			// Should not hit blog_details cache initialised in $this->populate_options_callback tirggered during
 			// populate_options callback's call of get_blog_details.
-			$this->assertEquals( 'http://testsite1.example.org/test', get_blog_details( $blog_id )->siteurl );
-			$this->assertEquals( 'http://testsite1.example.org/test', get_site( $blog_id )->siteurl );
+			$this->assertSame( 'http://testsite1.example.org/test', get_blog_details( $blog_id )->siteurl );
+			$this->assertSame( 'http://testsite1.example.org/test', get_site( $blog_id )->siteurl );
 
 			remove_action( 'populate_options', array( $this, 'populate_options_callback' ) );
 		}
@@ -2356,11 +2380,11 @@ if ( is_multisite() ) :
 		 * Populate options callback to warm cache for blog-details / site-details cache group
 		 */
 		public function populate_options_callback() {
-			// Cache blog details
+			// Cache blog details.
 			$blog_id = get_current_blog_id();
 			get_blog_details( $blog_id );
 			get_site( $blog_id )->siteurl;
-			// Set siteurl
+			// Set siteurl.
 			update_option( 'siteurl', 'http://testsite1.example.org/test' );
 		}
 
@@ -2422,9 +2446,9 @@ if ( is_multisite() ) :
 		 */
 		protected function _get_next_site_id() {
 			global $wpdb;
-			//create an entry
+			// Create an entry.
 			static::factory()->blog->create();
-			//get the ID after it
+			// Get the ID after it.
 			return (int) $wpdb->get_var( 'SELECT blog_id FROM ' . $wpdb->blogs . ' ORDER BY blog_ID DESC LIMIT 1' ) + 1;
 		}
 
@@ -2437,14 +2461,14 @@ if ( is_multisite() ) :
 
 		public function data_wpmu_new_blog_action_backward_commpatible() {
 			return array(
-				'default values'  => array(
+				'default values' => array(
 					array(),
 					array(
-						'public' => 0, // `public` is one of the defaults metas in `wpmu_create_blog' function prior WordPress 5.1.0
-						'WPLANG' => 'en_US', // WPLANG is another default meta in `wpmu_create_blog` function prior WordPress 5.1.0.
+						'public' => 0, // `public` is one of the default metas in `wpmu_create_blog()' function prior to WordPress 5.1.0.
+						'WPLANG' => 'en_US', // WPLANG is another default meta in `wpmu_create_blog()` function prior to WordPress 5.1.0.
 					),
 				),
-				'public site'     => array(
+				'public site'    => array(
 					array(
 						'public' => 1,
 					),
@@ -2453,7 +2477,7 @@ if ( is_multisite() ) :
 						'WPLANG' => 'en_US',
 					),
 				),
-				'all whitelisted' => array(
+				'allowed_keys'   => array(
 					array(
 						'public'   => -1,
 						'archived' => 0,
@@ -2473,7 +2497,7 @@ if ( is_multisite() ) :
 						'lang_id'  => 11,
 					),
 				),
-				'extra meta key'  => array(
+				'extra meta key' => array(
 					array(
 						'foo' => 'bar',
 					),
diff --git a/tests/multisite/siteDetails.php b/tests/multisite/siteDetails.php
index 79160ee131..78b392c487 100644
--- a/tests/multisite/siteDetails.php
+++ b/tests/multisite/siteDetails.php
@@ -9,101 +9,101 @@ if ( is_multisite() ) :
 	 */
 	class Tests_Multisite_Site_Details extends WP_UnitTestCase {
 		/**
-		 * @dataProvider data_whitelisted_options
+		 * @dataProvider data_allowed_options
 		 *
 		 * @ticket 40063
 		 */
-		public function test_update_whitelisted_option_deletes_site_details_cache( $whitelisted_option, $temporary_value ) {
+		public function test_update_allowed_option_deletes_site_details_cache( $allowed_option, $temporary_value ) {
 			$site = get_site();
 
-			$original_value = $site->$whitelisted_option;
-			update_option( $whitelisted_option, $temporary_value );
+			$original_value = $site->$allowed_option;
+			update_option( $allowed_option, $temporary_value );
 
 			$cached_result = wp_cache_get( $site->id, 'site-details' );
 
 			/* Reset to original value. */
-			update_option( $whitelisted_option, $original_value );
+			update_option( $allowed_option, $original_value );
 
 			$this->assertFalse( $cached_result );
 		}
 
 		/**
-		 * @dataProvider data_whitelisted_options
+		 * @dataProvider data_allowed_options
 		 *
 		 * @ticket 40063
 		 */
-		public function test_update_whitelisted_option_deletes_blog_details_cache( $whitelisted_option, $temporary_value ) {
+		public function test_update_allowed_option_deletes_blog_details_cache( $allowed_option, $temporary_value ) {
 			$blog_details = get_blog_details();
 
-			$original_value = $blog_details->$whitelisted_option;
-			update_option( $whitelisted_option, $temporary_value );
+			$original_value = $blog_details->$allowed_option;
+			update_option( $allowed_option, $temporary_value );
 
 			$cached_result = wp_cache_get( $blog_details->id, 'blog-details' );
 
 			/* Reset to original value. */
-			update_option( $whitelisted_option, $original_value );
+			update_option( $allowed_option, $original_value );
 
 			$this->assertFalse( $cached_result );
 		}
 
 		/**
-		 * @dataProvider data_whitelisted_options
+		 * @dataProvider data_allowed_options
 		 *
 		 * @ticket 40063
 		 */
-		public function test_update_whitelisted_option_does_not_delete_site_cache( $whitelisted_option, $temporary_value ) {
+		public function test_update_allowed_option_does_not_delete_site_cache( $allowed_option, $temporary_value ) {
 			$site = get_site();
 
-			$original_value = $site->$whitelisted_option;
-			update_option( $whitelisted_option, $temporary_value );
+			$original_value = $site->$allowed_option;
+			update_option( $allowed_option, $temporary_value );
 
 			$cached_result = wp_cache_get( $site->id, 'sites' );
 
 			/* Reset to original value. */
-			update_option( $whitelisted_option, $original_value );
+			update_option( $allowed_option, $original_value );
 
 			$this->assertNotFalse( $cached_result );
 		}
 
 		/**
-		 * @dataProvider data_whitelisted_options
+		 * @dataProvider data_allowed_options
 		 *
 		 * @ticket 40063
 		 */
-		public function test_update_whitelisted_option_does_not_delete_short_blog_details_cache( $whitelisted_option, $temporary_value ) {
+		public function test_update_allowed_option_does_not_delete_short_blog_details_cache( $allowed_option, $temporary_value ) {
 			$blog_details = get_blog_details( null, false );
 
-			$original_value = get_option( $whitelisted_option );
-			update_option( $whitelisted_option, $temporary_value );
+			$original_value = get_option( $allowed_option );
+			update_option( $allowed_option, $temporary_value );
 
 			$cached_result = wp_cache_get( $blog_details->id . 'short', 'blog-details' );
 
 			/* Reset to original value. */
-			update_option( $whitelisted_option, $original_value );
+			update_option( $allowed_option, $original_value );
 
 			$this->assertNotFalse( $cached_result );
 		}
 
 		/**
-		 * @dataProvider data_whitelisted_options
+		 * @dataProvider data_allowed_options
 		 *
 		 * @ticket 40063
 		 */
-		public function test_update_whitelisted_option_does_not_update_sites_last_changed( $whitelisted_option, $temporary_value ) {
+		public function test_update_allowed_option_does_not_update_sites_last_changed( $allowed_option, $temporary_value ) {
 			$last_changed = wp_cache_get_last_changed( 'sites' );
 
-			$original_value = get_option( $whitelisted_option );
-			update_option( $whitelisted_option, $temporary_value );
+			$original_value = get_option( $allowed_option );
+			update_option( $allowed_option, $temporary_value );
 
 			$new_last_changed = wp_cache_get_last_changed( 'sites' );
 
 			/* Reset to original value. */
-			update_option( $whitelisted_option, $original_value );
+			update_option( $allowed_option, $original_value );
 
 			$this->assertSame( $new_last_changed, $last_changed );
 		}
 
-		public function data_whitelisted_options() {
+		public function data_allowed_options() {
 			return array(
 				array( 'blogname', 'Custom Site' ),
 				array( 'home', 'http://custom-site-url.org' ),
@@ -134,12 +134,12 @@ if ( is_multisite() ) :
 
 			$site = get_site( $id );
 
-			// Trigger retrieving site details (post_count is not set on new sites)
+			// Trigger retrieving site details (post_count is not set on new sites).
 			$post_count = $site->post_count;
 
 			$cached_details = wp_cache_get( $site->id, 'site-details' );
 
-			wpmu_delete_blog( $id, true );
+			wp_delete_site( $id );
 			wp_update_network_site_counts();
 
 			$this->assertNotFalse( $cached_details );
diff --git a/tests/multisite/siteMeta.php b/tests/multisite/siteMeta.php
index bf272b2c0f..8cdac5f946 100644
--- a/tests/multisite/siteMeta.php
+++ b/tests/multisite/siteMeta.php
@@ -41,8 +41,8 @@ if ( is_multisite() ) :
 				delete_network_option( get_main_network_id(), 'site_meta_supported' );
 			}
 
-			wpmu_delete_blog( self::$site_id, true );
-			wpmu_delete_blog( self::$site_id2, true );
+			wp_delete_site( self::$site_id );
+			wp_delete_site( self::$site_id2 );
 
 			wp_update_network_site_counts();
 		}
@@ -121,7 +121,7 @@ if ( is_multisite() ) :
 				'foo1' => array( 'baz' ),
 			);
 
-			$this->assertEqualSets( $expected, $found );
+			$this->assertSameSets( $expected, $found );
 		}
 
 		public function test_get_with_key_should_fetch_all_for_key() {
@@ -136,7 +136,7 @@ if ( is_multisite() ) :
 			$found    = get_site_meta( self::$site_id, 'foo' );
 			$expected = array( 'bar', 'baz' );
 
-			$this->assertEqualSets( $expected, $found );
+			$this->assertSameSets( $expected, $found );
 		}
 
 		public function test_get_should_respect_single_true() {
@@ -186,13 +186,13 @@ if ( is_multisite() ) :
 			add_site_meta( self::$site_id, 'unique_delete_by_key', 'value', true );
 			add_site_meta( self::$site_id2, 'unique_delete_by_key', 'value', true );
 
-			$this->assertEquals( 'value', get_site_meta( self::$site_id, 'unique_delete_by_key', true ) );
-			$this->assertEquals( 'value', get_site_meta( self::$site_id2, 'unique_delete_by_key', true ) );
+			$this->assertSame( 'value', get_site_meta( self::$site_id, 'unique_delete_by_key', true ) );
+			$this->assertSame( 'value', get_site_meta( self::$site_id2, 'unique_delete_by_key', true ) );
 
 			$this->assertTrue( delete_site_meta_by_key( 'unique_delete_by_key' ) );
 
-			$this->assertEquals( '', get_site_meta( self::$site_id, 'unique_delete_by_key', true ) );
-			$this->assertEquals( '', get_site_meta( self::$site_id2, 'unique_delete_by_key', true ) );
+			$this->assertSame( '', get_site_meta( self::$site_id, 'unique_delete_by_key', true ) );
+			$this->assertSame( '', get_site_meta( self::$site_id2, 'unique_delete_by_key', true ) );
 		}
 
 		public function test_site_meta_should_be_deleted_when_site_is_deleted() {
@@ -213,7 +213,7 @@ if ( is_multisite() ) :
 			$this->assertSame( 'bar', get_site_meta( $site_id, 'foo', true ) );
 			$this->assertSame( 'bar', get_site_meta( $site_id, 'foo1', true ) );
 
-			wpmu_delete_blog( $site_id, true );
+			wp_delete_site( $site_id );
 
 			$this->assertSame( '', get_site_meta( $site_id, 'foo', true ) );
 			$this->assertSame( '', get_site_meta( $site_id, 'foo1', true ) );
@@ -299,7 +299,7 @@ if ( is_multisite() ) :
 				)
 			);
 
-			$this->assertEqualSets( array( self::$site_id ), $found );
+			$this->assertSameSets( array( self::$site_id ), $found );
 
 			add_site_meta( self::$site_id2, 'foo', 'bar' );
 
@@ -315,7 +315,7 @@ if ( is_multisite() ) :
 				)
 			);
 
-			$this->assertEqualSets( array( self::$site_id, self::$site_id2 ), $found );
+			$this->assertSameSets( array( self::$site_id, self::$site_id2 ), $found );
 		}
 
 		/**
@@ -342,7 +342,7 @@ if ( is_multisite() ) :
 				)
 			);
 
-			$this->assertEqualSets( array( self::$site_id ), $found );
+			$this->assertSameSets( array( self::$site_id ), $found );
 
 			update_site_meta( self::$site_id2, 'foo', 'bar' );
 
@@ -358,7 +358,7 @@ if ( is_multisite() ) :
 				)
 			);
 
-			$this->assertEqualSets( array( self::$site_id, self::$site_id2 ), $found );
+			$this->assertSameSets( array( self::$site_id, self::$site_id2 ), $found );
 		}
 
 		/**
@@ -385,7 +385,7 @@ if ( is_multisite() ) :
 				)
 			);
 
-			$this->assertEqualSets( array( self::$site_id, self::$site_id2 ), $found );
+			$this->assertSameSets( array( self::$site_id, self::$site_id2 ), $found );
 
 			delete_site_meta( self::$site_id2, 'foo', 'bar' );
 
@@ -401,7 +401,7 @@ if ( is_multisite() ) :
 				)
 			);
 
-			$this->assertEqualSets( array( self::$site_id ), $found );
+			$this->assertSameSets( array( self::$site_id ), $found );
 		}
 	}
 
diff --git a/tests/multisite/siteQuery.php b/tests/multisite/siteQuery.php
index c8bcff2256..6f8f48f4a8 100644
--- a/tests/multisite/siteQuery.php
+++ b/tests/multisite/siteQuery.php
@@ -49,29 +49,29 @@ if ( is_multisite() ) :
 
 			self::$site_ids = array(
 				'wordpress.org/'          => array(
-					'domain'  => 'wordpress.org',
-					'path'    => '/',
-					'site_id' => self::$network_ids['wordpress.org/'],
+					'domain'     => 'wordpress.org',
+					'path'       => '/',
+					'network_id' => self::$network_ids['wordpress.org/'],
 				),
 				'wordpress.org/foo/'      => array(
-					'domain'  => 'wordpress.org',
-					'path'    => '/foo/',
-					'site_id' => self::$network_ids['wordpress.org/'],
+					'domain'     => 'wordpress.org',
+					'path'       => '/foo/',
+					'network_id' => self::$network_ids['wordpress.org/'],
 				),
 				'wordpress.org/foo/bar/'  => array(
-					'domain'  => 'wordpress.org',
-					'path'    => '/foo/bar/',
-					'site_id' => self::$network_ids['wordpress.org/'],
+					'domain'     => 'wordpress.org',
+					'path'       => '/foo/bar/',
+					'network_id' => self::$network_ids['wordpress.org/'],
 				),
 				'make.wordpress.org/'     => array(
-					'domain'  => 'make.wordpress.org',
-					'path'    => '/',
-					'site_id' => self::$network_ids['make.wordpress.org/'],
+					'domain'     => 'make.wordpress.org',
+					'path'       => '/',
+					'network_id' => self::$network_ids['make.wordpress.org/'],
 				),
 				'make.wordpress.org/foo/' => array(
-					'domain'  => 'make.wordpress.org',
-					'path'    => '/foo/',
-					'site_id' => self::$network_ids['make.wordpress.org/'],
+					'domain'     => 'make.wordpress.org',
+					'path'       => '/foo/',
+					'network_id' => self::$network_ids['make.wordpress.org/'],
 				),
 				'www.w.org/'              => array(
 					'domain' => 'www.w.org',
@@ -86,12 +86,10 @@ if ( is_multisite() ) :
 					'path'   => '/foo/bar/',
 				),
 				'www.w.org/make/'         => array(
-					'domain' => 'www.w.org',
-					'path'   => '/make/',
-					'meta'   => array(
-						'public'  => 1,
-						'lang_id' => 1,
-					),
+					'domain'  => 'www.w.org',
+					'path'    => '/make/',
+					'public'  => 1,
+					'lang_id' => 1,
 				),
 			);
 
@@ -105,7 +103,7 @@ if ( is_multisite() ) :
 			global $wpdb;
 
 			foreach ( self::$site_ids as $id ) {
-				wpmu_delete_blog( $id, true );
+				wp_delete_site( $id );
 			}
 
 			foreach ( self::$network_ids as $id ) {
@@ -125,7 +123,7 @@ if ( is_multisite() ) :
 				)
 			);
 
-			$this->assertEqualSets( array( self::$site_ids['www.w.org/'] ), $found );
+			$this->assertSameSets( array( self::$site_ids['www.w.org/'] ), $found );
 		}
 
 		public function test_wp_site_query_by_number() {
@@ -137,7 +135,7 @@ if ( is_multisite() ) :
 				)
 			);
 
-			$this->assertEquals( 3, count( $found ) );
+			$this->assertSame( 3, count( $found ) );
 		}
 
 		public function test_wp_site_query_by_site__in_with_single_id() {
@@ -151,7 +149,7 @@ if ( is_multisite() ) :
 				)
 			);
 
-			$this->assertEqualSets( $expected, $found );
+			$this->assertSameSets( $expected, $found );
 		}
 
 		public function test_wp_site_query_by_site__in_with_multiple_ids() {
@@ -165,7 +163,7 @@ if ( is_multisite() ) :
 				)
 			);
 
-			$this->assertEqualSets( $expected, $found );
+			$this->assertSameSets( $expected, $found );
 		}
 
 		/**
@@ -183,7 +181,7 @@ if ( is_multisite() ) :
 				)
 			);
 
-			$this->assertEquals( 2, $found );
+			$this->assertSame( 2, $found );
 		}
 
 		public function test_wp_site_query_by_site__not_in_with_single_id() {
@@ -201,7 +199,7 @@ if ( is_multisite() ) :
 				)
 			);
 
-			$this->assertEqualSets( $expected, $found );
+			$this->assertSameSets( $expected, $found );
 		}
 
 		public function test_wp_site_query_by_site__not_in_with_multiple_ids() {
@@ -219,7 +217,7 @@ if ( is_multisite() ) :
 				)
 			);
 
-			$this->assertEqualSets( $expected, $found );
+			$this->assertSameSets( $expected, $found );
 		}
 
 		public function test_wp_site_query_by_network_id_with_order() {
@@ -239,7 +237,7 @@ if ( is_multisite() ) :
 				self::$site_ids['wordpress.org/foo/bar/'],
 			);
 
-			$this->assertEquals( $expected, $found );
+			$this->assertSame( $expected, $found );
 
 			$found = $q->query(
 				array(
@@ -250,7 +248,7 @@ if ( is_multisite() ) :
 				)
 			);
 
-			$this->assertEquals( array_reverse( $expected ), $found );
+			$this->assertSame( array_reverse( $expected ), $found );
 		}
 
 		public function test_wp_site_query_by_network_id_with_existing_sites() {
@@ -267,7 +265,7 @@ if ( is_multisite() ) :
 				self::$site_ids['make.wordpress.org/foo/'],
 			);
 
-			$this->assertEqualSets( $expected, $found );
+			$this->assertSameSets( $expected, $found );
 		}
 
 		public function test_wp_site_query_by_network_id_with_no_existing_sites() {
@@ -298,7 +296,7 @@ if ( is_multisite() ) :
 				self::$site_ids['www.w.org/make/'],
 			);
 
-			$this->assertEqualSets( $expected, $found );
+			$this->assertSameSets( $expected, $found );
 		}
 
 		public function test_wp_site_query_by_domain_and_offset() {
@@ -317,7 +315,7 @@ if ( is_multisite() ) :
 				self::$site_ids['www.w.org/make/'],
 			);
 
-			$this->assertEqualSets( $expected, $found );
+			$this->assertSameSets( $expected, $found );
 		}
 
 		public function test_wp_site_query_by_domain_and_number_and_offset() {
@@ -336,7 +334,7 @@ if ( is_multisite() ) :
 				self::$site_ids['www.w.org/foo/bar/'],
 			);
 
-			$this->assertEqualSets( $expected, $found );
+			$this->assertSameSets( $expected, $found );
 		}
 
 		public function test_wp_site_query_by_domain__in_with_single_domain() {
@@ -353,7 +351,7 @@ if ( is_multisite() ) :
 				self::$site_ids['make.wordpress.org/foo/'],
 			);
 
-			$this->assertEqualSets( $expected, $found );
+			$this->assertSameSets( $expected, $found );
 		}
 
 		public function test_wp_site_query_by_domain__in_with_multiple_domains() {
@@ -373,7 +371,7 @@ if ( is_multisite() ) :
 				self::$site_ids['make.wordpress.org/foo/'],
 			);
 
-			$this->assertEqualSets( $expected, $found );
+			$this->assertSameSets( $expected, $found );
 		}
 
 		public function test_wp_site_query_by_domain__not_in_with_single_domain() {
@@ -394,7 +392,7 @@ if ( is_multisite() ) :
 				self::$site_ids['make.wordpress.org/foo/'],
 			);
 
-			$this->assertEqualSets( $expected, $found );
+			$this->assertSameSets( $expected, $found );
 		}
 
 		public function test_wp_site_query_by_domain__not_in_with_multiple_domains() {
@@ -412,7 +410,7 @@ if ( is_multisite() ) :
 				self::$site_ids['make.wordpress.org/foo/'],
 			);
 
-			$this->assertEqualSets( $expected, $found );
+			$this->assertSameSets( $expected, $found );
 		}
 
 		public function test_wp_site_query_by_path_with_expected_results() {
@@ -429,7 +427,7 @@ if ( is_multisite() ) :
 				self::$site_ids['www.w.org/foo/bar/'],
 			);
 
-			$this->assertEqualSets( $expected, $found );
+			$this->assertSameSets( $expected, $found );
 		}
 
 		public function test_wp_site_query_by_path_with_no_expected_results() {
@@ -444,7 +442,7 @@ if ( is_multisite() ) :
 			$this->assertEmpty( $found );
 		}
 
-		// archived, mature, spam, deleted, public
+		// archived, mature, spam, deleted, public.
 
 		public function test_wp_site_query_by_archived() {
 			$q     = new WP_Site_Query();
@@ -457,7 +455,7 @@ if ( is_multisite() ) :
 				)
 			);
 
-			$this->assertEqualSets( array_values( self::$site_ids ), $found );
+			$this->assertSameSets( array_values( self::$site_ids ), $found );
 		}
 
 		public function test_wp_site_query_by_mature() {
@@ -471,7 +469,7 @@ if ( is_multisite() ) :
 				)
 			);
 
-			$this->assertEqualSets( array_values( self::$site_ids ), $found );
+			$this->assertSameSets( array_values( self::$site_ids ), $found );
 		}
 
 		public function test_wp_site_query_by_spam() {
@@ -485,7 +483,7 @@ if ( is_multisite() ) :
 				)
 			);
 
-			$this->assertEqualSets( array_values( self::$site_ids ), $found );
+			$this->assertSameSets( array_values( self::$site_ids ), $found );
 		}
 
 		public function test_wp_site_query_by_deleted() {
@@ -499,7 +497,7 @@ if ( is_multisite() ) :
 				)
 			);
 
-			$this->assertEqualSets( array_values( self::$site_ids ), $found );
+			$this->assertSameSets( array_values( self::$site_ids ), $found );
 		}
 
 		public function test_wp_site_query_by_deleted_with_no_results() {
@@ -525,7 +523,7 @@ if ( is_multisite() ) :
 				)
 			);
 
-			$this->assertEqualSets( array_values( self::$site_ids ), $found );
+			$this->assertSameSets( array_values( self::$site_ids ), $found );
 		}
 
 		public function test_wp_site_query_by_lang_id_with_zero() {
@@ -539,7 +537,7 @@ if ( is_multisite() ) :
 				)
 			);
 
-			$this->assertEqualSets( array_diff( array_values( self::$site_ids ), array( self::$site_ids['www.w.org/make/'] ) ), $found );
+			$this->assertSameSets( array_diff( array_values( self::$site_ids ), array( self::$site_ids['www.w.org/make/'] ) ), $found );
 		}
 
 		public function test_wp_site_query_by_lang_id() {
@@ -555,7 +553,7 @@ if ( is_multisite() ) :
 				self::$site_ids['www.w.org/make/'],
 			);
 
-			$this->assertEqualSets( $expected, $found );
+			$this->assertSameSets( $expected, $found );
 		}
 
 		public function test_wp_site_query_by_lang_id_with_no_results() {
@@ -583,7 +581,7 @@ if ( is_multisite() ) :
 				self::$site_ids['www.w.org/make/'],
 			);
 
-			$this->assertEqualSets( $expected, $found );
+			$this->assertSameSets( $expected, $found );
 		}
 
 		public function test_wp_site_query_by_lang__in_with_multiple_ids() {
@@ -597,7 +595,7 @@ if ( is_multisite() ) :
 				)
 			);
 
-			$this->assertEqualSets( array_values( self::$site_ids ), $found );
+			$this->assertSameSets( array_values( self::$site_ids ), $found );
 		}
 
 		public function test_wp_site_query_by_lang__not_in() {
@@ -613,7 +611,7 @@ if ( is_multisite() ) :
 				self::$site_ids['www.w.org/make/'],
 			);
 
-			$this->assertEqualSets( $expected, $found );
+			$this->assertSameSets( $expected, $found );
 		}
 
 		public function test_wp_site_query_by_lang__not_in_with_multiple_ids() {
@@ -642,7 +640,7 @@ if ( is_multisite() ) :
 				self::$site_ids['make.wordpress.org/foo/'],
 			);
 
-			$this->assertEqualSets( $expected, $found );
+			$this->assertSameSets( $expected, $found );
 		}
 
 		public function test_wp_site_query_by_search_with_text_in_path() {
@@ -662,7 +660,7 @@ if ( is_multisite() ) :
 				self::$site_ids['www.w.org/foo/bar/'],
 			);
 
-			$this->assertEqualSets( $expected, $found );
+			$this->assertSameSets( $expected, $found );
 		}
 
 		public function test_wp_site_query_by_search_with_text_in_path_and_domain() {
@@ -680,7 +678,7 @@ if ( is_multisite() ) :
 				self::$site_ids['www.w.org/make/'],
 			);
 
-			$this->assertEqualSets( $expected, $found );
+			$this->assertSameSets( $expected, $found );
 		}
 
 		public function test_wp_site_query_by_search_with_text_in_path_and_domain_order_by_domain_desc() {
@@ -700,7 +698,7 @@ if ( is_multisite() ) :
 				self::$site_ids['make.wordpress.org/foo/'],
 			);
 
-			$this->assertEquals( $expected, $found );
+			$this->assertSame( $expected, $found );
 		}
 
 		public function test_wp_site_query_by_search_with_text_in_path_exclude_domain_from_search() {
@@ -717,7 +715,7 @@ if ( is_multisite() ) :
 				self::$site_ids['www.w.org/make/'],
 			);
 
-			$this->assertEquals( $expected, $found );
+			$this->assertSame( $expected, $found );
 		}
 
 		public function test_wp_site_query_by_search_with_text_in_domain_exclude_path_from_search() {
@@ -735,7 +733,7 @@ if ( is_multisite() ) :
 				self::$site_ids['make.wordpress.org/foo/'],
 			);
 
-			$this->assertEquals( $expected, $found );
+			$this->assertSame( $expected, $found );
 		}
 
 		public function test_wp_site_query_by_search_with_wildcard_in_text() {
@@ -753,7 +751,7 @@ if ( is_multisite() ) :
 				self::$site_ids['make.wordpress.org/foo/'],
 			);
 
-			$this->assertEqualSets( $expected, $found );
+			$this->assertSameSets( $expected, $found );
 		}
 
 		public function test_wp_site_query_by_search_with_wildcard_in_text_exclude_path_from_search() {
@@ -771,7 +769,7 @@ if ( is_multisite() ) :
 				self::$site_ids['make.wordpress.org/foo/'],
 			);
 
-			$this->assertEqualSets( $expected, $found );
+			$this->assertSameSets( $expected, $found );
 		}
 
 		public function test_wp_site_query_by_search_with_wildcard_in_text_exclude_domain_from_search() {
@@ -788,7 +786,7 @@ if ( is_multisite() ) :
 				self::$site_ids['www.w.org/make/'],
 			);
 
-			$this->assertEqualSets( $expected, $found );
+			$this->assertSameSets( $expected, $found );
 		}
 
 		/**
@@ -816,7 +814,7 @@ if ( is_multisite() ) :
 				)
 			);
 
-			$this->assertEquals( $number_of_queries, $wpdb->num_queries );
+			$this->assertSame( $number_of_queries, $wpdb->num_queries );
 		}
 
 		/**
@@ -846,7 +844,7 @@ if ( is_multisite() ) :
 					'count'      => true,
 				)
 			);
-			$this->assertEquals( $number_of_queries, $wpdb->num_queries );
+			$this->assertSame( $number_of_queries, $wpdb->num_queries );
 		}
 
 		/**
@@ -876,7 +874,7 @@ if ( is_multisite() ) :
 					'count'      => true,
 				)
 			);
-			$this->assertEquals( $number_of_queries + 1, $wpdb->num_queries );
+			$this->assertSame( $number_of_queries + 1, $wpdb->num_queries );
 		}
 
 		/**
@@ -905,9 +903,9 @@ if ( is_multisite() ) :
 			}
 
 			if ( $strict ) {
-				$this->assertEquals( $expected, $found );
+				$this->assertSame( $expected, $found );
 			} else {
-				$this->assertEqualSets( $expected, $found );
+				$this->assertSameSets( $expected, $found );
 			}
 		}
 
@@ -935,7 +933,7 @@ if ( is_multisite() ) :
 			$this->assertSame( array( 555 ), $results );
 
 			// Make sure manually setting total_users doesn't get overwritten.
-			$this->assertEquals( 1, $q->found_sites );
+			$this->assertSame( 1, $q->found_sites );
 		}
 
 		public static function filter_sites_pre_query( $sites, $query ) {
diff --git a/tests/multisite/updateBlogDetails.php b/tests/multisite/updateBlogDetails.php
index 48c3b7cdd8..c3bd0e3cdf 100644
--- a/tests/multisite/updateBlogDetails.php
+++ b/tests/multisite/updateBlogDetails.php
@@ -39,9 +39,9 @@ if ( is_multisite() ) :
 
 			$blog = get_site( $blog_id );
 
-			$this->assertEquals( 'example.com', $blog->domain );
-			$this->assertEquals( '/my_path/', $blog->path );
-			$this->assertEquals( '0', $blog->spam );
+			$this->assertSame( 'example.com', $blog->domain );
+			$this->assertSame( '/my_path/', $blog->path );
+			$this->assertSame( '0', $blog->spam );
 		}
 
 		/**
@@ -71,16 +71,16 @@ if ( is_multisite() ) :
 			update_blog_details( $blog_id, array( $flag => $flag_value ) );
 			$blog = get_site( $blog_id );
 
-			$this->assertEquals( $flag_value, $blog->{$flag} );
+			$this->assertSame( $flag_value, $blog->{$flag} );
 
 			// The hook attached to this flag should have fired once during update_blog_details().
-			$this->assertEquals( 1, $test_action_counter );
+			$this->assertSame( 1, $test_action_counter );
 
 			// Update the site to the exact same flag value for this flag.
 			update_blog_details( $blog_id, array( $flag => $flag_value ) );
 
 			// The hook attached to this flag should not have fired again.
-			$this->assertEquals( 1, $test_action_counter );
+			$this->assertSame( 1, $test_action_counter );
 
 			remove_action( $hook, array( $this, '_action_counter_cb' ), 10 );
 		}
@@ -116,7 +116,7 @@ if ( is_multisite() ) :
 			update_blog_details( 1, array( 'path' => $path ) );
 			$site = get_site( 1 );
 
-			$this->assertEquals( $expected, $site->path );
+			$this->assertSame( $expected, $site->path );
 		}
 
 		public function data_single_directory_path() {
diff --git a/tests/multisite/wpGetSites.php b/tests/multisite/wpGetSites.php
index f42cbb438e..700b8d21c1 100644
--- a/tests/multisite/wpGetSites.php
+++ b/tests/multisite/wpGetSites.php
@@ -13,21 +13,21 @@ if ( is_multisite() ) :
 		public static function wpSetUpBeforeClass( $factory ) {
 			self::$site_ids = array(
 				'w.org/'      => array(
-					'domain'  => 'w.org',
-					'path'    => '/',
-					'site_id' => 2,
+					'domain'     => 'w.org',
+					'path'       => '/',
+					'network_id' => 2,
 				),
 				'wp.org/'     => array(
-					'domain'  => 'wp.org',
-					'path'    => '/',
-					'site_id' => 2,
-					'meta'    => array( 'public' => 0 ),
+					'domain'     => 'wp.org',
+					'path'       => '/',
+					'network_id' => 2,
+					'public'     => 0,
 				),
 				'wp.org/foo/' => array(
-					'domain'  => 'wp.org',
-					'path'    => '/foo/',
-					'site_id' => 1,
-					'meta'    => array( 'public' => 0 ),
+					'domain'     => 'wp.org',
+					'path'       => '/foo/',
+					'network_id' => 1,
+					'public'     => 0,
 				),
 				'wp.org/oof/' => array(
 					'domain' => 'wp.org',
@@ -43,7 +43,7 @@ if ( is_multisite() ) :
 
 		public static function wpTearDownAfterClass() {
 			foreach ( self::$site_ids as $id ) {
-				wpmu_delete_blog( $id, true );
+				wp_delete_site( $id );
 			}
 
 			wp_update_network_site_counts();
@@ -72,7 +72,7 @@ if ( is_multisite() ) :
 
 			$missing_keys = array_diff_key( array_flip( $keys ), $sites[0] );
 
-			$this->assertEquals( array(), $missing_keys, 'Keys are missing from site arrays.' );
+			$this->assertSame( array(), $missing_keys, 'Keys are missing from site arrays.' );
 		}
 
 		/**
diff --git a/tests/multisite/wpInstallDefaults.php b/tests/multisite/wpInstallDefaults.php
index d40930d4e2..05371f2159 100644
--- a/tests/multisite/wpInstallDefaults.php
+++ b/tests/multisite/wpInstallDefaults.php
@@ -21,7 +21,8 @@ if ( is_multisite() ) :
 			$first_comment = get_comments();
 
 			restore_current_blog();
-			wpmu_delete_blog( $blog_id, true );
+
+			wp_delete_site( $blog_id );
 
 			$this->assertNotEmpty( $first_page->post_content );
 			$this->assertNotEmpty( $first_comment[0]->comment_content );
@@ -46,7 +47,8 @@ if ( is_multisite() ) :
 			$first_comment = get_comments();
 
 			restore_current_blog();
-			wpmu_delete_blog( $blog_id, true );
+
+			wp_delete_site( $blog_id );
 
 			$this->assertNotEmpty( $first_page->post_content );
 			$this->assertNotEmpty( $first_comment[0]->comment_content );
@@ -71,10 +73,11 @@ if ( is_multisite() ) :
 			$first_comment = get_comments();
 
 			restore_current_blog();
-			wpmu_delete_blog( $blog_id, true );
 
-			$this->assertEquals( 'Some page content', $first_page->post_content );
-			$this->assertEquals( 'Some comment content', $first_comment[0]->comment_content );
+			wp_delete_site( $blog_id );
+
+			$this->assertSame( 'Some page content', $first_page->post_content );
+			$this->assertSame( 'Some comment content', $first_comment[0]->comment_content );
 		}
 	}
 
diff --git a/tests/multisite/wpMSSitesListTable.php b/tests/multisite/wpMSSitesListTable.php
index dffa8d82af..a49369cca5 100644
--- a/tests/multisite/wpMSSitesListTable.php
+++ b/tests/multisite/wpMSSitesListTable.php
@@ -83,7 +83,7 @@ if ( is_multisite() ) :
 
 		public static function wpTearDownAfterClass() {
 			foreach ( self::$site_ids as $site_id ) {
-				wpmu_delete_blog( $site_id, true );
+				wp_delete_site( $site_id );
 			}
 		}
 
@@ -93,7 +93,7 @@ if ( is_multisite() ) :
 			$items = wp_list_pluck( $this->table->items, 'blog_id' );
 			$items = array_map( 'intval', $items );
 
-			$this->assertEqualSets( array( 1 ) + self::$site_ids, $items );
+			$this->assertSameSets( array( 1 ) + self::$site_ids, $items );
 		}
 
 		public function test_ms_sites_list_table_subdirectory_path_search_items() {
@@ -119,7 +119,7 @@ if ( is_multisite() ) :
 				self::$site_ids['www.w.org/foo/bar/'],
 			);
 
-			$this->assertEqualSets( $expected, $items );
+			$this->assertSameSets( $expected, $items );
 		}
 
 		public function test_ms_sites_list_table_subdirectory_multiple_path_search_items() {
@@ -141,7 +141,7 @@ if ( is_multisite() ) :
 				self::$site_ids['www.w.org/foo/bar/'],
 			);
 
-			$this->assertEqualSets( $expected, $items );
+			$this->assertSameSets( $expected, $items );
 		}
 
 		public function test_ms_sites_list_table_invalid_path_search_items() {
@@ -178,7 +178,7 @@ if ( is_multisite() ) :
 				self::$site_ids['atest.example.org/'],
 			);
 
-			$this->assertEqualSets( $expected, $items );
+			$this->assertSameSets( $expected, $items );
 		}
 
 		public function test_ms_sites_list_table_subdomain_domain_search_items_with_trailing_wildcard() {
@@ -202,7 +202,7 @@ if ( is_multisite() ) :
 				self::$site_ids['atest.example.org/'],
 			);
 
-			$this->assertEqualSets( $expected, $items );
+			$this->assertSameSets( $expected, $items );
 		}
 
 		public function test_ms_sites_list_table_subdirectory_path_search_items_with_trailing_wildcard() {
@@ -228,7 +228,7 @@ if ( is_multisite() ) :
 				self::$site_ids['www.w.org/foo/bar/'],
 			);
 
-			$this->assertEqualSets( $expected, $items );
+			$this->assertSameSets( $expected, $items );
 		}
 	}
 endif;
diff --git a/tests/multisite/wpmuValidateBlogSignup.php b/tests/multisite/wpmuValidateBlogSignup.php
index 892fd521da..42e77a128c 100644
--- a/tests/multisite/wpmuValidateBlogSignup.php
+++ b/tests/multisite/wpmuValidateBlogSignup.php
@@ -34,9 +34,9 @@ if ( is_multisite() ) :
 
 			self::$existing_blog_id = $factory->blog->create(
 				array(
-					'domain'  => $domain,
-					'path'    => $path,
-					'site_id' => $network->id,
+					'domain'     => $domain,
+					'path'       => $path,
+					'network_id' => $network->id,
 				)
 			);
 		}
@@ -47,7 +47,7 @@ if ( is_multisite() ) :
 
 			wpmu_delete_user( self::$existing_user_id );
 
-			wpmu_delete_blog( self::$existing_blog_id, true );
+			wp_delete_site( self::$existing_blog_id );
 		}
 
 		/**
diff --git a/tests/multisite/wpmuValidateUserSignup.php b/tests/multisite/wpmuValidateUserSignup.php
index 02fee8ae5f..7e0ad2750f 100644
--- a/tests/multisite/wpmuValidateUserSignup.php
+++ b/tests/multisite/wpmuValidateUserSignup.php
@@ -54,7 +54,7 @@ if ( is_multisite() ) :
 			remove_filter( 'is_email', '__return_false' );
 		}
 
-		public function test_should_fail_for_emails_from_non_whitelisted_domains() {
+		public function test_should_fail_for_emails_from_disallowed_domains() {
 			$domains = array( 'foo.com', 'bar.org' );
 			update_site_option( 'limited_email_domains', $domains );
 
@@ -62,7 +62,7 @@ if ( is_multisite() ) :
 			$this->assertContains( 'user_email', $v['errors']->get_error_codes() );
 		}
 
-		public function test_should_not_fail_for_emails_from_whitelisted_domains_with_mixed_case() {
+		public function test_should_not_fail_for_emails_from_allowed_domains_with_mixed_case() {
 			$domains = array( 'foo.com', 'bar.org' );
 			update_site_option( 'limited_email_domains', $domains );
 
@@ -84,9 +84,9 @@ if ( is_multisite() ) :
 
 		public function test_should_fail_for_existing_signup_with_same_username() {
 			// Don't send notifications.
-			add_filter( 'wpmu_signup_user_notification', '__return_true' );
+			add_filter( 'wpmu_signup_user_notification', '__return_false' );
 			wpmu_signup_user( 'foo123', 'foo@example.com' );
-			remove_filter( 'wpmu_signup_user_notification', '__return_true' );
+			remove_filter( 'wpmu_signup_user_notification', '__return_false' );
 
 			$v = wpmu_validate_user_signup( 'foo123', 'foo2@example.com' );
 			$this->assertContains( 'user_name', $v['errors']->get_error_codes() );
@@ -94,9 +94,9 @@ if ( is_multisite() ) :
 
 		public function test_should_not_fail_for_existing_signup_with_same_username_if_signup_is_old() {
 			// Don't send notifications.
-			add_filter( 'wpmu_signup_user_notification', '__return_true' );
+			add_filter( 'wpmu_signup_user_notification', '__return_false' );
 			wpmu_signup_user( 'foo123', 'foo@example.com' );
-			remove_filter( 'wpmu_signup_user_notification', '__return_true' );
+			remove_filter( 'wpmu_signup_user_notification', '__return_false' );
 
 			global $wpdb;
 			$date = gmdate( 'Y-m-d H:i:s', time() - ( 2 * DAY_IN_SECONDS ) - 60 );
@@ -108,9 +108,9 @@ if ( is_multisite() ) :
 
 		public function test_should_fail_for_existing_signup_with_same_email() {
 			// Don't send notifications.
-			add_filter( 'wpmu_signup_user_notification', '__return_true' );
+			add_filter( 'wpmu_signup_user_notification', '__return_false' );
 			wpmu_signup_user( 'foo123', 'foo@example.com' );
-			remove_filter( 'wpmu_signup_user_notification', '__return_true' );
+			remove_filter( 'wpmu_signup_user_notification', '__return_false' );
 
 			$v = wpmu_validate_user_signup( 'foo2', 'foo@example.com' );
 			$this->assertContains( 'user_email', $v['errors']->get_error_codes() );
@@ -118,9 +118,9 @@ if ( is_multisite() ) :
 
 		public function test_should_not_fail_for_existing_signup_with_same_email_if_signup_is_old() {
 			// Don't send notifications.
-			add_filter( 'wpmu_signup_user_notification', '__return_true' );
+			add_filter( 'wpmu_signup_user_notification', '__return_false' );
 			wpmu_signup_user( 'foo123', 'foo@example.com' );
-			remove_filter( 'wpmu_signup_user_notification', '__return_true' );
+			remove_filter( 'wpmu_signup_user_notification', '__return_false' );
 
 			global $wpdb;
 			$date = gmdate( 'Y-m-d H:i:s', time() - ( 2 * DAY_IN_SECONDS ) - 60 );
@@ -130,6 +130,31 @@ if ( is_multisite() ) :
 			$this->assertNotContains( 'user_email', $v['errors']->get_error_codes() );
 		}
 
+		/**
+		 * @ticket 43232
+		 */
+		public function test_should_not_fail_for_data_used_by_a_deleted_user() {
+			global $wpdb;
+
+			// Don't send notifications.
+			add_filter( 'wpmu_signup_user_notification', '__return_false' );
+			add_filter( 'wpmu_welcome_user_notification', '__return_false' );
+
+			// Signup, activate and delete new user.
+			wpmu_signup_user( 'foo123', 'foo@example.com' );
+			$key  = $wpdb->get_var( "SELECT activation_key FROM $wpdb->signups WHERE user_login = 'foo123'" );
+			$user = wpmu_activate_signup( $key );
+			wpmu_delete_user( $user['user_id'] );
+
+			$valid = wpmu_validate_user_signup( 'foo123', 'foo2@example.com' );
+
+			remove_filter( 'wpmu_signup_user_notification', '__return_false' );
+			remove_filter( 'wpmu_signup_user_notification', '__return_false' );
+
+			$this->assertNotContains( 'user_name', $valid['errors']->get_error_codes() );
+			$this->assertNotContains( 'user_email', $valid['errors']->get_error_codes() );
+		}
+
 		public function test_invalid_email_address_with_no_banned_domains_results_in_error() {
 			$valid = wpmu_validate_user_signup( 'validusername', 'invalid-email' );
 
diff --git a/tests/oembed/WpEmbed.php b/tests/oembed/WpEmbed.php
index 86f3c32d3a..fea9500d47 100644
--- a/tests/oembed/WpEmbed.php
+++ b/tests/oembed/WpEmbed.php
@@ -58,14 +58,14 @@ class Tests_WP_Embed extends WP_UnitTestCase {
 	}
 
 	public function test_wp_maybe_load_embeds() {
-		$this->assertEqualSets( array( 10, 9999 ), array_keys( $GLOBALS['wp_embed']->handlers ) );
-		$this->assertEqualSets(
+		$this->assertSameSets( array( 10, 9999 ), array_keys( $GLOBALS['wp_embed']->handlers ) );
+		$this->assertSameSets(
 			array(
 				'youtube_embed_url',
 			),
 			array_keys( $GLOBALS['wp_embed']->handlers[10] )
 		);
-		$this->assertEqualSets(
+		$this->assertSameSets(
 			array(
 				'audio',
 				'video',
@@ -109,7 +109,7 @@ class Tests_WP_Embed extends WP_UnitTestCase {
 		$content = "\nhttp://example.com/embed/foo\n";
 
 		$actual = $this->wp_embed->autoembed( $content );
-		$this->assertEquals( $content, $actual );
+		$this->assertSame( $content, $actual );
 	}
 
 	public function test_autoembed_should_return_modified_content() {
@@ -124,7 +124,7 @@ class Tests_WP_Embed extends WP_UnitTestCase {
 		$actual = $GLOBALS['wp_embed']->autoembed( $content );
 		wp_embed_unregister_handler( $handle );
 
-		$this->assertEquals( "\nEmbedded http://example.com/embed/foo\n", $actual );
+		$this->assertSame( "\nEmbedded http://example.com/embed/foo\n", $actual );
 	}
 
 	public function test_delete_oembed_caches() {
@@ -136,8 +136,8 @@ class Tests_WP_Embed extends WP_UnitTestCase {
 
 		$this->wp_embed->delete_oembed_caches( $post_id );
 
-		$this->assertEquals( array(), get_post_meta( $post_id, '_oembed_foo' ) );
-		$this->assertEquals( array(), get_post_meta( $post_id, '_oembed_baz' ) );
+		$this->assertSame( array(), get_post_meta( $post_id, '_oembed_foo' ) );
+		$this->assertSame( array(), get_post_meta( $post_id, '_oembed_baz' ) );
 	}
 
 	public function test_cache_oembed_invalid_post_type() {
@@ -168,7 +168,7 @@ class Tests_WP_Embed extends WP_UnitTestCase {
 		remove_filter( 'pre_oembed_result', array( $this, '_pre_oembed_result_callback' ) );
 
 		$this->assertSame( $post_id, $this->wp_embed->post_ID );
-		$this->assertEquals( $expected, get_post_meta( $post_id, $cachekey, true ) );
+		$this->assertSame( $expected, get_post_meta( $post_id, $cachekey, true ) );
 		$this->assertNotEmpty( get_post_meta( $post_id, $cachekey_time, true ) );
 	}
 
@@ -194,9 +194,9 @@ class Tests_WP_Embed extends WP_UnitTestCase {
 		// Cleanup.
 		unset( $post );
 
-		$this->assertEquals( $expected, $actual );
-		$this->assertEquals( $expected, $actual_2 );
-		$this->assertEquals( $expected, $cached );
+		$this->assertSame( $expected, $actual );
+		$this->assertSame( $expected, $actual_2 );
+		$this->assertSame( $expected, $cached );
 	}
 
 	public function test_shortcode_should_get_cached_failure_from_post_meta_for_known_post() {
@@ -225,10 +225,10 @@ class Tests_WP_Embed extends WP_UnitTestCase {
 		// Cleanup.
 		unset( $post );
 
-		$this->assertEquals( $expected, $actual );
-		$this->assertEquals( '{{unknown}}', $cached );
+		$this->assertSame( $expected, $actual );
+		$this->assertSame( '{{unknown}}', $cached );
 		$this->assertEmpty( $cached_time );
-		$this->assertEquals( $expected, $actual_2 );
+		$this->assertSame( $expected, $actual_2 );
 	}
 
 	/**
@@ -252,9 +252,9 @@ class Tests_WP_Embed extends WP_UnitTestCase {
 		wp_delete_post( $oembed_post_id );
 
 		$this->assertNotNull( $oembed_post_id );
-		$this->assertEquals( $expected, $post_content );
-		$this->assertEquals( $expected, $actual );
-		$this->assertEquals( $expected, $actual_2 );
+		$this->assertSame( $expected, $post_content );
+		$this->assertSame( $expected, $actual );
+		$this->assertSame( $expected, $actual_2 );
 	}
 
 	/**
@@ -277,10 +277,10 @@ class Tests_WP_Embed extends WP_UnitTestCase {
 
 		wp_delete_post( $oembed_post_id );
 
-		$this->assertEquals( $expected, $actual );
-		$this->assertEquals( $expected, $actual_2 );
+		$this->assertSame( $expected, $actual );
+		$this->assertSame( $expected, $actual_2 );
 		$this->assertNotNull( $oembed_post_id );
-		$this->assertEquals( '{{unknown}}', $post_content );
+		$this->assertSame( '{{unknown}}', $post_content );
 	}
 
 	/**
@@ -321,7 +321,7 @@ class Tests_WP_Embed extends WP_UnitTestCase {
 		$url    = 'http://example.com/embed/foo';
 		$actual = $this->wp_embed->shortcode( array( 'src' => $url ) );
 
-		$this->assertEquals( '<a href="' . esc_url( $url ) . '">' . esc_html( $url ) . '</a>', $actual );
+		$this->assertSame( '<a href="' . esc_url( $url ) . '">' . esc_html( $url ) . '</a>', $actual );
 	}
 
 	public function test_shortcode_should_return_empty_string_for_missing_url() {
@@ -332,20 +332,20 @@ class Tests_WP_Embed extends WP_UnitTestCase {
 		$url    = 'http://example.com/embed/foo';
 		$actual = $this->wp_embed->shortcode( array(), $url );
 
-		$this->assertEquals( '<a href="' . esc_url( $url ) . '">' . esc_html( $url ) . '</a>', $actual );
+		$this->assertSame( '<a href="' . esc_url( $url ) . '">' . esc_html( $url ) . '</a>', $actual );
 	}
 
 	public function test_run_shortcode_url_only() {
 		$url    = 'http://example.com/embed/foo';
 		$actual = $this->wp_embed->run_shortcode( '[embed]' . $url . '[/embed]' );
-		$this->assertEquals( '<a href="' . esc_url( $url ) . '">' . esc_html( $url ) . '</a>', $actual );
+		$this->assertSame( '<a href="' . esc_url( $url ) . '">' . esc_html( $url ) . '</a>', $actual );
 	}
 
 	public function test_maybe_make_link() {
 		$url    = 'http://example.com/embed/foo';
 		$actual = $this->wp_embed->maybe_make_link( $url );
 
-		$this->assertEquals( '<a href="' . esc_url( $url ) . '">' . esc_html( $url ) . '</a>', $actual );
+		$this->assertSame( '<a href="' . esc_url( $url ) . '">' . esc_html( $url ) . '</a>', $actual );
 	}
 
 	public function test_maybe_make_link_return_false_on_fail() {
@@ -357,6 +357,6 @@ class Tests_WP_Embed extends WP_UnitTestCase {
 		$url = 'http://example.com/';
 
 		$this->wp_embed->linkifunknown = false;
-		$this->assertEquals( $url, $this->wp_embed->maybe_make_link( $url ) );
+		$this->assertSame( $url, $this->wp_embed->maybe_make_link( $url ) );
 	}
 }
diff --git a/tests/oembed/controller.php b/tests/oembed/controller.php
index b726735152..3facaf0c97 100644
--- a/tests/oembed/controller.php
+++ b/tests/oembed/controller.php
@@ -97,7 +97,7 @@ class Test_oEmbed_Controller extends WP_UnitTestCase {
 		$this->request_count += 1;
 
 		// Mock request to YouTube Embed.
-		if ( ! empty( $query_params['url'] ) && false !== strpos( $query_params['url'], self::YOUTUBE_VIDEO_ID ) ) {
+		if ( ! empty( $query_params['url'] ) && false !== strpos( $query_params['url'], '?v=' . self::YOUTUBE_VIDEO_ID ) ) {
 			return array(
 				'response' => array(
 					'code' => 200,
@@ -175,11 +175,11 @@ class Test_oEmbed_Controller extends WP_UnitTestCase {
 	}
 
 	function test_wp_oembed_ensure_format() {
-		$this->assertEquals( 'json', wp_oembed_ensure_format( 'json' ) );
-		$this->assertEquals( 'xml', wp_oembed_ensure_format( 'xml' ) );
-		$this->assertEquals( 'json', wp_oembed_ensure_format( 123 ) );
-		$this->assertEquals( 'json', wp_oembed_ensure_format( 'random' ) );
-		$this->assertEquals( 'json', wp_oembed_ensure_format( array() ) );
+		$this->assertSame( 'json', wp_oembed_ensure_format( 'json' ) );
+		$this->assertSame( 'xml', wp_oembed_ensure_format( 'xml' ) );
+		$this->assertSame( 'json', wp_oembed_ensure_format( 123 ) );
+		$this->assertSame( 'json', wp_oembed_ensure_format( 'random' ) );
+		$this->assertSame( 'json', wp_oembed_ensure_format( array() ) );
 	}
 
 	function test_oembed_create_xml() {
@@ -265,7 +265,7 @@ class Test_oEmbed_Controller extends WP_UnitTestCase {
 		$response = rest_get_server()->dispatch( $request );
 		$data     = $response->get_data();
 
-		$this->assertEquals( 'rest_no_route', $data['code'] );
+		$this->assertSame( 'rest_no_route', $data['code'] );
 	}
 
 	function test_request_without_url_param() {
@@ -274,8 +274,8 @@ class Test_oEmbed_Controller extends WP_UnitTestCase {
 		$response = rest_get_server()->dispatch( $request );
 		$data     = $response->get_data();
 
-		$this->assertEquals( 'rest_missing_callback_param', $data['code'] );
-		$this->assertEquals( 'url', $data['data']['params'][0] );
+		$this->assertSame( 'rest_missing_callback_param', $data['code'] );
+		$this->assertSame( 'url', $data['data']['params'][0] );
 	}
 
 	function test_request_with_bad_url() {
@@ -285,7 +285,7 @@ class Test_oEmbed_Controller extends WP_UnitTestCase {
 		$response = rest_get_server()->dispatch( $request );
 		$data     = $response->get_data();
 
-		$this->assertEquals( 'oembed_invalid_url', $data['code'] );
+		$this->assertSame( 'oembed_invalid_url', $data['code'] );
 	}
 
 	function test_request_invalid_format() {
@@ -334,13 +334,13 @@ class Test_oEmbed_Controller extends WP_UnitTestCase {
 		$this->assertArrayHasKey( 'type', $data );
 		$this->assertArrayHasKey( 'width', $data );
 
-		$this->assertEquals( '1.0', $data['version'] );
-		$this->assertEquals( get_bloginfo( 'name' ), $data['provider_name'] );
-		$this->assertEquals( get_home_url(), $data['provider_url'] );
-		$this->assertEquals( $user->display_name, $data['author_name'] );
-		$this->assertEquals( get_author_posts_url( $user->ID, $user->user_nicename ), $data['author_url'] );
-		$this->assertEquals( $post->post_title, $data['title'] );
-		$this->assertEquals( 'rich', $data['type'] );
+		$this->assertSame( '1.0', $data['version'] );
+		$this->assertSame( get_bloginfo( 'name' ), $data['provider_name'] );
+		$this->assertSame( home_url(), $data['provider_url'] );
+		$this->assertSame( $user->display_name, $data['author_name'] );
+		$this->assertSame( get_author_posts_url( $user->ID, $user->user_nicename ), $data['author_url'] );
+		$this->assertSame( $post->post_title, $data['title'] );
+		$this->assertSame( 'rich', $data['type'] );
 		$this->assertTrue( $data['width'] <= $request['maxwidth'] );
 	}
 
@@ -377,13 +377,13 @@ class Test_oEmbed_Controller extends WP_UnitTestCase {
 		$this->assertArrayHasKey( 'type', $data );
 		$this->assertArrayHasKey( 'width', $data );
 
-		$this->assertEquals( '1.0', $data['version'] );
-		$this->assertEquals( get_bloginfo( 'name' ), $data['provider_name'] );
-		$this->assertEquals( get_home_url(), $data['provider_url'] );
-		$this->assertEquals( get_bloginfo( 'name' ), $data['author_name'] );
-		$this->assertEquals( get_home_url(), $data['author_url'] );
-		$this->assertEquals( $post->post_title, $data['title'] );
-		$this->assertEquals( 'rich', $data['type'] );
+		$this->assertSame( '1.0', $data['version'] );
+		$this->assertSame( get_bloginfo( 'name' ), $data['provider_name'] );
+		$this->assertSame( home_url(), $data['provider_url'] );
+		$this->assertSame( get_bloginfo( 'name' ), $data['author_name'] );
+		$this->assertSame( home_url(), $data['author_url'] );
+		$this->assertSame( $post->post_title, $data['title'] );
+		$this->assertSame( 'rich', $data['type'] );
 		$this->assertTrue( $data['width'] <= $request['maxwidth'] );
 
 		update_option( 'show_on_front', 'posts' );
@@ -422,13 +422,13 @@ class Test_oEmbed_Controller extends WP_UnitTestCase {
 		$this->assertArrayHasKey( 'type', $data );
 		$this->assertArrayHasKey( 'width', $data );
 
-		$this->assertEquals( '1.0', $data['version'] );
-		$this->assertEquals( get_bloginfo( 'name' ), $data['provider_name'] );
-		$this->assertEquals( get_home_url(), $data['provider_url'] );
-		$this->assertEquals( $user->display_name, $data['author_name'] );
-		$this->assertEquals( get_author_posts_url( $user->ID, $user->user_nicename ), $data['author_url'] );
-		$this->assertEquals( $post->post_title, $data['title'] );
-		$this->assertEquals( 'rich', $data['type'] );
+		$this->assertSame( '1.0', $data['version'] );
+		$this->assertSame( get_bloginfo( 'name' ), $data['provider_name'] );
+		$this->assertSame( home_url(), $data['provider_url'] );
+		$this->assertSame( $user->display_name, $data['author_name'] );
+		$this->assertSame( get_author_posts_url( $user->ID, $user->user_nicename ), $data['author_url'] );
+		$this->assertSame( $post->post_title, $data['title'] );
+		$this->assertSame( 'rich', $data['type'] );
 		$this->assertTrue( $data['width'] <= $request['maxwidth'] );
 	}
 
@@ -508,30 +508,30 @@ class Test_oEmbed_Controller extends WP_UnitTestCase {
 	}
 
 	function test_get_oembed_endpoint_url() {
-		$this->assertEquals( home_url() . '/index.php?rest_route=/oembed/1.0/embed', get_oembed_endpoint_url() );
-		$this->assertEquals( home_url() . '/index.php?rest_route=/oembed/1.0/embed', get_oembed_endpoint_url( '', 'json' ) );
-		$this->assertEquals( home_url() . '/index.php?rest_route=/oembed/1.0/embed', get_oembed_endpoint_url( '', 'xml' ) );
+		$this->assertSame( home_url() . '/index.php?rest_route=/oembed/1.0/embed', get_oembed_endpoint_url() );
+		$this->assertSame( home_url() . '/index.php?rest_route=/oembed/1.0/embed', get_oembed_endpoint_url( '', 'json' ) );
+		$this->assertSame( home_url() . '/index.php?rest_route=/oembed/1.0/embed', get_oembed_endpoint_url( '', 'xml' ) );
 
 		$post_id     = $this->factory()->post->create();
 		$url         = get_permalink( $post_id );
 		$url_encoded = urlencode( $url );
 
-		$this->assertEquals( home_url() . '/index.php?rest_route=%2Foembed%2F1.0%2Fembed&url=' . $url_encoded, get_oembed_endpoint_url( $url ) );
-		$this->assertEquals( home_url() . '/index.php?rest_route=%2Foembed%2F1.0%2Fembed&url=' . $url_encoded . '&format=xml', get_oembed_endpoint_url( $url, 'xml' ) );
+		$this->assertSame( home_url() . '/index.php?rest_route=%2Foembed%2F1.0%2Fembed&url=' . $url_encoded, get_oembed_endpoint_url( $url ) );
+		$this->assertSame( home_url() . '/index.php?rest_route=%2Foembed%2F1.0%2Fembed&url=' . $url_encoded . '&format=xml', get_oembed_endpoint_url( $url, 'xml' ) );
 	}
 
 	function test_get_oembed_endpoint_url_pretty_permalinks() {
 		update_option( 'permalink_structure', '/%postname%' );
 
-		$this->assertEquals( home_url() . '/wp-json/oembed/1.0/embed', get_oembed_endpoint_url() );
-		$this->assertEquals( home_url() . '/wp-json/oembed/1.0/embed', get_oembed_endpoint_url( '', 'xml' ) );
+		$this->assertSame( home_url() . '/wp-json/oembed/1.0/embed', get_oembed_endpoint_url() );
+		$this->assertSame( home_url() . '/wp-json/oembed/1.0/embed', get_oembed_endpoint_url( '', 'xml' ) );
 
 		$post_id     = $this->factory()->post->create();
 		$url         = get_permalink( $post_id );
 		$url_encoded = urlencode( $url );
 
-		$this->assertEquals( home_url() . '/wp-json/oembed/1.0/embed?url=' . $url_encoded, get_oembed_endpoint_url( $url ) );
-		$this->assertEquals( home_url() . '/wp-json/oembed/1.0/embed?url=' . $url_encoded . '&format=xml', get_oembed_endpoint_url( $url, 'xml' ) );
+		$this->assertSame( home_url() . '/wp-json/oembed/1.0/embed?url=' . $url_encoded, get_oembed_endpoint_url( $url ) );
+		$this->assertSame( home_url() . '/wp-json/oembed/1.0/embed?url=' . $url_encoded . '&format=xml', get_oembed_endpoint_url( $url, 'xml' ) );
 
 		update_option( 'permalink_structure', '' );
 	}
@@ -541,7 +541,7 @@ class Test_oEmbed_Controller extends WP_UnitTestCase {
 		$request  = new WP_REST_Request( 'GET', '/oembed/1.0/proxy' );
 		$response = rest_get_server()->dispatch( $request );
 
-		$this->assertEquals( 400, $response->get_status() );
+		$this->assertSame( 400, $response->get_status() );
 
 		// Test with a user that does not have edit_posts capability.
 		wp_set_current_user( self::$subscriber );
@@ -549,9 +549,9 @@ class Test_oEmbed_Controller extends WP_UnitTestCase {
 		$request->set_param( 'url', self::INVALID_OEMBED_URL );
 		$response = rest_get_server()->dispatch( $request );
 
-		$this->assertEquals( 403, $response->get_status() );
+		$this->assertSame( 403, $response->get_status() );
 		$data = $response->get_data();
-		$this->assertEquals( $data['code'], 'rest_forbidden' );
+		$this->assertSame( $data['code'], 'rest_forbidden' );
 	}
 
 	public function test_proxy_with_invalid_oembed_provider() {
@@ -559,9 +559,9 @@ class Test_oEmbed_Controller extends WP_UnitTestCase {
 		$request = new WP_REST_Request( 'GET', '/oembed/1.0/proxy' );
 		$request->set_param( 'url', self::INVALID_OEMBED_URL );
 		$response = rest_get_server()->dispatch( $request );
-		$this->assertEquals( 404, $response->get_status() );
+		$this->assertSame( 404, $response->get_status() );
 		$data = $response->get_data();
-		$this->assertEquals( 'oembed_invalid_url', $data['code'] );
+		$this->assertSame( 'oembed_invalid_url', $data['code'] );
 	}
 
 	public function test_proxy_with_invalid_type() {
@@ -570,7 +570,7 @@ class Test_oEmbed_Controller extends WP_UnitTestCase {
 		$request->set_param( 'type', 'xml' );
 		$response = rest_get_server()->dispatch( $request );
 
-		$this->assertEquals( 400, $response->get_status() );
+		$this->assertSame( 400, $response->get_status() );
 	}
 
 	public function test_proxy_with_valid_oembed_provider() {
@@ -581,12 +581,12 @@ class Test_oEmbed_Controller extends WP_UnitTestCase {
 		$request->set_param( 'maxheight', 789 );
 		$request->set_param( '_wpnonce', wp_create_nonce( 'wp_rest' ) );
 		$response = rest_get_server()->dispatch( $request );
-		$this->assertEquals( 200, $response->get_status() );
-		$this->assertEquals( 1, $this->request_count );
+		$this->assertSame( 200, $response->get_status() );
+		$this->assertSame( 1, $this->request_count );
 
 		// Subsequent request is cached and so it should not cause a request.
 		rest_get_server()->dispatch( $request );
-		$this->assertEquals( 1, $this->request_count );
+		$this->assertSame( 1, $this->request_count );
 
 		// Rest with another user should also be cached.
 		wp_set_current_user( self::$administrator );
@@ -596,40 +596,65 @@ class Test_oEmbed_Controller extends WP_UnitTestCase {
 		$request->set_param( 'maxwidth', 456 );
 		$request->set_param( 'maxheight', 789 );
 		$response = rest_get_server()->dispatch( $request );
-		$this->assertEquals( 1, $this->request_count );
+		$this->assertSame( 1, $this->request_count );
 
 		// Test data object.
 		$data = $response->get_data();
 
 		$this->assertNotEmpty( $data );
 		$this->assertInternalType( 'object', $data );
-		$this->assertEquals( 'YouTube', $data->provider_name );
-		$this->assertEquals( 'https://i.ytimg.com/vi/' . self::YOUTUBE_VIDEO_ID . '/hqdefault.jpg', $data->thumbnail_url );
+		$this->assertSame( 'YouTube', $data->provider_name );
+		$this->assertSame( 'https://i.ytimg.com/vi/' . self::YOUTUBE_VIDEO_ID . '/hqdefault.jpg', $data->thumbnail_url );
 		$this->assertEquals( $data->width, $request['maxwidth'] );
 		$this->assertEquals( $data->height, $request['maxheight'] );
 	}
 
+	/**
+	 * @ticket 45447
+	 *
+	 * @see wp_maybe_load_embeds()
+	 */
+	public function test_proxy_with_classic_embed_provider() {
+		wp_set_current_user( self::$editor );
+		$request = new WP_REST_Request( 'GET', '/oembed/1.0/proxy' );
+		$request->set_param( 'url', 'https://www.youtube.com/embed/' . self::YOUTUBE_VIDEO_ID );
+		$request->set_param( 'maxwidth', 456 );
+		$request->set_param( 'maxheight', 789 );
+		$request->set_param( '_wpnonce', wp_create_nonce( 'wp_rest' ) );
+		$response = rest_get_server()->dispatch( $request );
+		$this->assertSame( 200, $response->get_status() );
+		$this->assertSame( 2, $this->request_count );
+
+		// Test data object.
+		$data = $response->get_data();
+
+		$this->assertNotEmpty( $data );
+		$this->assertInternalType( 'object', $data );
+		$this->assertInternalType( 'string', $data->html );
+		$this->assertInternalType( 'array', $data->scripts );
+	}
+
 	public function test_proxy_with_invalid_oembed_provider_no_discovery() {
 		wp_set_current_user( self::$editor );
 
-		// If discover is false for an unkown provider, no discovery request should take place.
+		// If discover is false for an unknown provider, no discovery request should take place.
 		$request = new WP_REST_Request( 'GET', '/oembed/1.0/proxy' );
 		$request->set_param( 'url', self::INVALID_OEMBED_URL );
-		$request->set_param( 'discover', 0 );
+		$request->set_param( 'discover', false );
 		$response = rest_get_server()->dispatch( $request );
-		$this->assertEquals( 404, $response->get_status() );
-		$this->assertEquals( 0, $this->request_count );
+		$this->assertSame( 404, $response->get_status() );
+		$this->assertSame( 0, $this->request_count );
 	}
 
 	public function test_proxy_with_invalid_oembed_provider_with_default_discover_param() {
 		wp_set_current_user( self::$editor );
 
-		// For an unkown provider, a discovery request should happen.
+		// For an unknown provider, a discovery request should happen.
 		$request = new WP_REST_Request( 'GET', '/oembed/1.0/proxy' );
 		$request->set_param( 'url', self::INVALID_OEMBED_URL );
 		$response = rest_get_server()->dispatch( $request );
-		$this->assertEquals( 404, $response->get_status() );
-		$this->assertEquals( 1, $this->request_count );
+		$this->assertSame( 404, $response->get_status() );
+		$this->assertSame( 1, $this->request_count );
 	}
 
 	public function test_proxy_with_invalid_discover_param() {
@@ -640,9 +665,9 @@ class Test_oEmbed_Controller extends WP_UnitTestCase {
 
 		$response = rest_get_server()->dispatch( $request );
 
-		$this->assertEquals( 400, $response->get_status() );
+		$this->assertSame( 400, $response->get_status() );
 		$data = $response->get_data();
-		$this->assertEquals( $data['code'], 'rest_invalid_param' );
+		$this->assertSame( $data['code'], 'rest_invalid_param' );
 	}
 
 	/**
@@ -683,13 +708,13 @@ class Test_oEmbed_Controller extends WP_UnitTestCase {
 		$this->assertArrayHasKey( 'type', $data );
 		$this->assertArrayHasKey( 'width', $data );
 
-		$this->assertEquals( '1.0', $data['version'] );
-		$this->assertEquals( get_bloginfo( 'name' ), $data['provider_name'] );
-		$this->assertEquals( get_home_url(), $data['provider_url'] );
-		$this->assertEquals( $user->display_name, $data['author_name'] );
-		$this->assertEquals( get_author_posts_url( $user->ID, $user->user_nicename ), $data['author_url'] );
-		$this->assertEquals( $post->post_title, $data['title'] );
-		$this->assertEquals( 'rich', $data['type'] );
+		$this->assertSame( '1.0', $data['version'] );
+		$this->assertSame( get_bloginfo( 'name' ), $data['provider_name'] );
+		$this->assertSame( home_url(), $data['provider_url'] );
+		$this->assertSame( $user->display_name, $data['author_name'] );
+		$this->assertSame( get_author_posts_url( $user->ID, $user->user_nicename ), $data['author_url'] );
+		$this->assertSame( $post->post_title, $data['title'] );
+		$this->assertSame( 'rich', $data['type'] );
 		$this->assertTrue( $data['width'] <= $request['maxwidth'] );
 	}
 
@@ -732,13 +757,13 @@ class Test_oEmbed_Controller extends WP_UnitTestCase {
 		$this->assertArrayHasKey( 'type', $data );
 		$this->assertArrayHasKey( 'width', $data );
 
-		$this->assertEquals( '1.0', $data['version'] );
-		$this->assertEquals( get_bloginfo( 'name' ), $data['provider_name'] );
-		$this->assertEquals( get_home_url(), $data['provider_url'] );
-		$this->assertEquals( get_bloginfo( 'name' ), $data['author_name'] );
-		$this->assertEquals( get_home_url(), $data['author_url'] );
-		$this->assertEquals( $post->post_title, $data['title'] );
-		$this->assertEquals( 'rich', $data['type'] );
+		$this->assertSame( '1.0', $data['version'] );
+		$this->assertSame( get_bloginfo( 'name' ), $data['provider_name'] );
+		$this->assertSame( home_url(), $data['provider_url'] );
+		$this->assertSame( get_bloginfo( 'name' ), $data['author_name'] );
+		$this->assertSame( home_url(), $data['author_url'] );
+		$this->assertSame( $post->post_title, $data['title'] );
+		$this->assertSame( 'rich', $data['type'] );
 		$this->assertTrue( $data['width'] <= $request['maxwidth'] );
 
 		update_option( 'show_on_front', 'posts' );
@@ -759,11 +784,11 @@ class Test_oEmbed_Controller extends WP_UnitTestCase {
 		$response = rest_get_server()->dispatch( $request );
 		$data     = $response->get_data();
 
-		$this->assertEquals( 1, $this->oembed_result_filter_count );
+		$this->assertSame( 1, $this->oembed_result_filter_count );
 		$this->assertInternalType( 'object', $data );
-		$this->assertEquals( 'Untrusted', $data->provider_name );
-		$this->assertEquals( self::UNTRUSTED_PROVIDER_URL, $data->provider_url );
-		$this->assertEquals( 'rich', $data->type );
+		$this->assertSame( 'Untrusted', $data->provider_name );
+		$this->assertSame( self::UNTRUSTED_PROVIDER_URL, $data->provider_url );
+		$this->assertSame( 'rich', $data->type );
 		$this->assertFalse( $data->html );
 	}
 
@@ -782,7 +807,7 @@ class Test_oEmbed_Controller extends WP_UnitTestCase {
 		$response = rest_get_server()->dispatch( $request );
 		$data     = $response->get_data();
 
-		$this->assertEquals( 1, $this->oembed_result_filter_count );
+		$this->assertSame( 1, $this->oembed_result_filter_count );
 		$this->assertInternalType( 'object', $data );
 
 		$this->assertStringStartsWith( '<b>Unfiltered</b>', $data->html );
diff --git a/tests/oembed/discovery.php b/tests/oembed/discovery.php
index 19f9ee2f61..db435490a4 100644
--- a/tests/oembed/discovery.php
+++ b/tests/oembed/discovery.php
@@ -48,7 +48,7 @@ class Tests_oEmbed_Discovery extends WP_UnitTestCase {
 		$expected  = '<link rel="alternate" type="application/json+oembed" href="' . esc_url( get_oembed_endpoint_url( get_permalink() ) ) . '" />' . "\n";
 		$expected .= '<link rel="alternate" type="text/xml+oembed" href="' . esc_url( get_oembed_endpoint_url( get_permalink(), 'xml' ) ) . '" />' . "\n";
 
-		$this->assertEquals( $expected, get_echo( 'wp_oembed_add_discovery_links' ) );
+		$this->assertSame( $expected, get_echo( 'wp_oembed_add_discovery_links' ) );
 	}
 
 	function test_add_oembed_discovery_links_to_page() {
@@ -63,7 +63,7 @@ class Tests_oEmbed_Discovery extends WP_UnitTestCase {
 		$expected  = '<link rel="alternate" type="application/json+oembed" href="' . esc_url( get_oembed_endpoint_url( get_permalink() ) ) . '" />' . "\n";
 		$expected .= '<link rel="alternate" type="text/xml+oembed" href="' . esc_url( get_oembed_endpoint_url( get_permalink(), 'xml' ) ) . '" />' . "\n";
 
-		$this->assertEquals( $expected, get_echo( 'wp_oembed_add_discovery_links' ) );
+		$this->assertSame( $expected, get_echo( 'wp_oembed_add_discovery_links' ) );
 	}
 
 	function test_add_oembed_discovery_links_to_attachment() {
@@ -83,6 +83,6 @@ class Tests_oEmbed_Discovery extends WP_UnitTestCase {
 		$expected  = '<link rel="alternate" type="application/json+oembed" href="' . esc_url( get_oembed_endpoint_url( get_permalink() ) ) . '" />' . "\n";
 		$expected .= '<link rel="alternate" type="text/xml+oembed" href="' . esc_url( get_oembed_endpoint_url( get_permalink(), 'xml' ) ) . '" />' . "\n";
 
-		$this->assertEquals( $expected, get_echo( 'wp_oembed_add_discovery_links' ) );
+		$this->assertSame( $expected, get_echo( 'wp_oembed_add_discovery_links' ) );
 	}
 }
diff --git a/tests/oembed/filterResult.php b/tests/oembed/filterResult.php
index 2f40980ec4..06ed74532a 100644
--- a/tests/oembed/filterResult.php
+++ b/tests/oembed/filterResult.php
@@ -9,7 +9,7 @@ class Tests_Filter_oEmbed_Result extends WP_UnitTestCase {
 
 		$actual = wp_filter_oembed_result( $html, (object) array( 'type' => 'rich' ), 'https://www.youtube.com/watch?v=dQw4w9WgXcQ' );
 
-		$this->assertEquals( $html, $actual );
+		$this->assertSame( $html, $actual );
 	}
 
 	function test_filter_oembed_result_with_untrusted_provider() {
@@ -21,14 +21,14 @@ class Tests_Filter_oEmbed_Result extends WP_UnitTestCase {
 
 		$this->assertTrue( isset( $matches[1] ) );
 		$this->assertTrue( isset( $matches[2] ) );
-		$this->assertEquals( $matches[1], $matches[2] );
+		$this->assertSame( $matches[1], $matches[2] );
 	}
 
 	function test_filter_oembed_result_only_one_iframe_is_allowed() {
 		$html   = '<div><iframe></iframe><iframe></iframe><p></p></div>';
 		$actual = wp_filter_oembed_result( $html, (object) array( 'type' => 'rich' ), '' );
 
-		$this->assertEquals( '<iframe class="wp-embedded-content" sandbox="allow-scripts" security="restricted"></iframe>', $actual );
+		$this->assertSame( '<iframe class="wp-embedded-content" sandbox="allow-scripts" security="restricted"></iframe>', $actual );
 	}
 
 	function test_filter_oembed_result_with_newlines() {
@@ -41,7 +41,7 @@ EOD;
 
 		$actual = wp_filter_oembed_result( $html, (object) array( 'type' => 'rich' ), '' );
 
-		$this->assertEquals( '<iframe class="wp-embedded-content" sandbox="allow-scripts" security="restricted"></iframe>', $actual );
+		$this->assertSame( '<iframe class="wp-embedded-content" sandbox="allow-scripts" security="restricted"></iframe>', $actual );
 	}
 
 	function test_filter_oembed_result_without_iframe() {
@@ -65,13 +65,13 @@ EOD;
 
 		$this->assertTrue( isset( $matches[1] ) );
 		$this->assertTrue( isset( $matches[2] ) );
-		$this->assertEquals( $matches[1], $matches[2] );
+		$this->assertSame( $matches[1], $matches[2] );
 	}
 
 	function test_filter_oembed_result_wrong_type_provided() {
 		$actual = wp_filter_oembed_result( 'some string', (object) array( 'type' => 'link' ), '' );
 
-		$this->assertEquals( 'some string', $actual );
+		$this->assertSame( 'some string', $actual );
 	}
 
 	function test_filter_oembed_result_invalid_result() {
@@ -83,14 +83,48 @@ EOD;
 		$html   = '<blockquote></blockquote><iframe></iframe>';
 		$actual = wp_filter_oembed_result( $html, (object) array( 'type' => 'rich' ), '' );
 
-		$this->assertEquals( '<blockquote class="wp-embedded-content"></blockquote><iframe class="wp-embedded-content" sandbox="allow-scripts" security="restricted" style="position: absolute; clip: rect(1px, 1px, 1px, 1px);"></iframe>', $actual );
+		$this->assertSame( '<blockquote class="wp-embedded-content"></blockquote><iframe class="wp-embedded-content" sandbox="allow-scripts" security="restricted" style="position: absolute; clip: rect(1px, 1px, 1px, 1px);"></iframe>', $actual );
 	}
 
 	function test_filter_oembed_result_allowed_html() {
 		$html   = '<blockquote class="foo" id="bar"><strong><a href="" target=""></a></strong></blockquote><iframe></iframe>';
 		$actual = wp_filter_oembed_result( $html, (object) array( 'type' => 'rich' ), '' );
 
-		$this->assertEquals( '<blockquote class="wp-embedded-content"><a href=""></a></blockquote><iframe class="wp-embedded-content" sandbox="allow-scripts" security="restricted" style="position: absolute; clip: rect(1px, 1px, 1px, 1px);"></iframe>', $actual );
+		$this->assertSame( '<blockquote class="wp-embedded-content"><a href=""></a></blockquote><iframe class="wp-embedded-content" sandbox="allow-scripts" security="restricted" style="position: absolute; clip: rect(1px, 1px, 1px, 1px);"></iframe>', $actual );
+	}
+
+	public function _data_oembed_test_strings() {
+		return array(
+			array(
+				'<blockquote></blockquote><iframe title=""></iframe>',
+				'<blockquote class="wp-embedded-content"></blockquote><iframe class="wp-embedded-content" sandbox="allow-scripts" security="restricted" style="position: absolute; clip: rect(1px, 1px, 1px, 1px);" title="Hola"></iframe>',
+			),
+			array(
+				'<blockquote class="foo" id="bar"><strong><a href="" target=""></a></strong></blockquote><iframe width=123></iframe>',
+				'<blockquote class="wp-embedded-content"><a href=""></a></blockquote><iframe class="wp-embedded-content" sandbox="allow-scripts" security="restricted" style="position: absolute; clip: rect(1px, 1px, 1px, 1px);" title="Hola" width="123"></iframe>',
+			),
+			array(
+				'<blockquote><iframe width="100"></iframe></blockquote><iframe stitle="aaaa"></iframe>',
+				'<blockquote class="wp-embedded-content"><iframe class="wp-embedded-content" sandbox="allow-scripts" security="restricted" style="position: absolute; clip: rect(1px, 1px, 1px, 1px);" title="Hola" width="100"></iframe></blockquote><iframe class="wp-embedded-content" sandbox="allow-scripts" security="restricted" style="position: absolute; clip: rect(1px, 1px, 1px, 1px);" title="Hola"></iframe>',
+			),
+			array(
+				"<blockquote><iframe title=' width=\"'></iframe></blockquote><iframe title='' height=' title=' width=\"'' heigt='123'\"></iframe>",
+				'<blockquote class="wp-embedded-content"><iframe class="wp-embedded-content" sandbox="allow-scripts" security="restricted" style="position: absolute; clip: rect(1px, 1px, 1px, 1px);" title=" width=&quot;"></iframe></blockquote><iframe class="wp-embedded-content" sandbox="allow-scripts" security="restricted" style="position: absolute; clip: rect(1px, 1px, 1px, 1px);" title=" width=&quot;" height=\' title=\' width="\'\' heigt=\'123\'"></iframe>',
+			),
+		);
+	}
+
+	/**
+	 * @dataProvider _data_oembed_test_strings
+	 */
+	public function test_wp_filter_pre_oembed_custom_result( $html, $expected ) {
+		$data   = (object) array(
+			'type'  => 'rich',
+			'title' => 'Hola',
+			'html'  => $html,
+		);
+		$actual = _wp_oembed_get_object()->data2html( $data, 'https://untrusted.localhost' );
+		$this->assertSame( $expected, $actual );
 	}
 
 	/**
@@ -100,6 +134,6 @@ EOD;
 		$html   = '<blockquote></blockquote><iframe></iframe>';
 		$actual = _oembed_filter_feed_content( wp_filter_oembed_result( $html, (object) array( 'type' => 'rich' ), '' ) );
 
-		$this->assertEquals( '<blockquote class="wp-embedded-content"></blockquote><iframe class="wp-embedded-content" sandbox="allow-scripts" security="restricted"></iframe>', $actual );
+		$this->assertSame( '<blockquote class="wp-embedded-content"></blockquote><iframe class="wp-embedded-content" sandbox="allow-scripts" security="restricted"></iframe>', $actual );
 	}
 }
diff --git a/tests/oembed/getResponseData.php b/tests/oembed/getResponseData.php
index de96211f87..9beaf56e7e 100644
--- a/tests/oembed/getResponseData.php
+++ b/tests/oembed/getResponseData.php
@@ -17,13 +17,13 @@ class Tests_oEmbed_Response_Data extends WP_UnitTestCase {
 
 		$data = get_oembed_response_data( $post, 400 );
 
-		$this->assertEqualSets(
+		$this->assertSameSets(
 			array(
 				'version'       => '1.0',
 				'provider_name' => get_bloginfo( 'name' ),
-				'provider_url'  => get_home_url( '/' ),
+				'provider_url'  => home_url(),
 				'author_name'   => get_bloginfo( 'name' ),
-				'author_url'    => get_home_url( '/' ),
+				'author_url'    => home_url(),
 				'title'         => 'Some Post',
 				'type'          => 'rich',
 				'width'         => 400,
@@ -53,11 +53,11 @@ class Tests_oEmbed_Response_Data extends WP_UnitTestCase {
 
 		$data = get_oembed_response_data( $post, 400 );
 
-		$this->assertEqualSets(
+		$this->assertSameSets(
 			array(
 				'version'       => '1.0',
 				'provider_name' => get_bloginfo( 'name' ),
-				'provider_url'  => get_home_url( '/' ),
+				'provider_url'  => home_url(),
 				'author_name'   => 'John Doe',
 				'author_url'    => get_author_posts_url( $user_id ),
 				'title'         => 'Some Post',
@@ -81,13 +81,13 @@ class Tests_oEmbed_Response_Data extends WP_UnitTestCase {
 
 		$data = get_oembed_response_data( $post, 600 );
 
-		$this->assertEqualSets(
+		$this->assertSameSets(
 			array(
 				'version'       => '1.0',
 				'provider_name' => get_bloginfo( 'name' ),
-				'provider_url'  => get_home_url( '/' ),
+				'provider_url'  => home_url(),
 				'author_name'   => get_bloginfo( 'name' ),
-				'author_url'    => get_home_url( '/' ),
+				'author_url'    => home_url(),
 				'title'         => 'Some Post',
 				'type'          => 'link',
 			),
@@ -133,8 +133,8 @@ class Tests_oEmbed_Response_Data extends WP_UnitTestCase {
 
 		$data = get_oembed_response_data( $post, 1000 );
 
-		$this->assertEquals( 600, $data['width'] );
-		$this->assertEquals( 338, $data['height'] );
+		$this->assertSame( 600, $data['width'] );
+		$this->assertSame( 338, $data['height'] );
 	}
 
 	function test_get_oembed_response_data_maxwidth_too_low() {
@@ -142,8 +142,8 @@ class Tests_oEmbed_Response_Data extends WP_UnitTestCase {
 
 		$data = get_oembed_response_data( $post, 100 );
 
-		$this->assertEquals( 200, $data['width'] );
-		$this->assertEquals( 200, $data['height'] );
+		$this->assertSame( 200, $data['width'] );
+		$this->assertSame( 200, $data['height'] );
 	}
 
 	function test_get_oembed_response_data_maxwidth_invalid() {
@@ -151,13 +151,13 @@ class Tests_oEmbed_Response_Data extends WP_UnitTestCase {
 
 		$data = get_oembed_response_data( $post, '400;" DROP TABLES' );
 
-		$this->assertEquals( 400, $data['width'] );
-		$this->assertEquals( 225, $data['height'] );
+		$this->assertSame( 400, $data['width'] );
+		$this->assertSame( 225, $data['height'] );
 
 		$data = get_oembed_response_data( $post, "lol this isn't even a number?!?!?" );
 
-		$this->assertEquals( 200, $data['width'] );
-		$this->assertEquals( 200, $data['height'] );
+		$this->assertSame( 200, $data['width'] );
+		$this->assertSame( 200, $data['height'] );
 	}
 
 	function test_get_oembed_response_data_with_thumbnail() {
diff --git a/tests/oembed/postEmbedUrl.php b/tests/oembed/postEmbedUrl.php
index e6c478f26f..c5613b98f1 100644
--- a/tests/oembed/postEmbedUrl.php
+++ b/tests/oembed/postEmbedUrl.php
@@ -16,7 +16,7 @@ class Tests_Post_Embed_URL extends WP_UnitTestCase {
 		$permalink = get_permalink( $post_id );
 		$embed_url = get_post_embed_url( $post_id );
 
-		$this->assertEquals( $permalink . '/embed', $embed_url );
+		$this->assertSame( $permalink . '/embed', $embed_url );
 	}
 
 	function test_with_ugly_permalinks() {
@@ -24,7 +24,7 @@ class Tests_Post_Embed_URL extends WP_UnitTestCase {
 		$permalink = get_permalink( $post_id );
 		$embed_url = get_post_embed_url( $post_id );
 
-		$this->assertEquals( $permalink . '&embed=true', $embed_url );
+		$this->assertSame( $permalink . '&embed=true', $embed_url );
 	}
 
 	/**
@@ -89,7 +89,7 @@ class Tests_Post_Embed_URL extends WP_UnitTestCase {
 	function test_static_front_page_conflicts_with_embed_slug() {
 		$this->set_permalink_structure( '/%postname%/' );
 
-		// Create a post with the 'embed' post_name
+		// Create a post with the 'embed' post_name.
 		add_filter( 'wp_unique_post_slug', array( $this, 'filter_unique_post_slug' ) );
 		$post_embed_slug = self::factory()->post->create( array( 'post_name' => 'embed' ) );
 		remove_filter( 'wp_unique_post_slug', array( $this, 'filter_unique_post_slug' ) );
diff --git a/tests/oembed/template.php b/tests/oembed/template.php
index 3d9b2b90c1..0eefb8f4c0 100644
--- a/tests/oembed/template.php
+++ b/tests/oembed/template.php
@@ -24,7 +24,7 @@ class Tests_Embed_Template extends WP_UnitTestCase {
 		$this->assertQueryTrue( 'is_single', 'is_singular', 'is_embed' );
 
 		ob_start();
-		include( ABSPATH . WPINC . '/theme-compat/embed.php' );
+		require ABSPATH . WPINC . '/theme-compat/embed.php';
 		$actual = ob_get_clean();
 
 		$doc = new DOMDocument();
@@ -56,7 +56,7 @@ class Tests_Embed_Template extends WP_UnitTestCase {
 		$this->assertQueryTrue( 'is_single', 'is_singular', 'is_embed' );
 
 		ob_start();
-		include( ABSPATH . WPINC . '/theme-compat/embed.php' );
+		require ABSPATH . WPINC . '/theme-compat/embed.php';
 		$actual = ob_get_clean();
 
 		$doc = new DOMDocument();
@@ -73,7 +73,7 @@ class Tests_Embed_Template extends WP_UnitTestCase {
 		$this->assertQueryTrue( 'is_404', 'is_embed' );
 
 		ob_start();
-		include( ABSPATH . WPINC . '/theme-compat/embed.php' );
+		require ABSPATH . WPINC . '/theme-compat/embed.php';
 		$actual = ob_get_clean();
 
 		$doc = new DOMDocument();
@@ -100,7 +100,7 @@ class Tests_Embed_Template extends WP_UnitTestCase {
 		$this->assertQueryTrue( 'is_single', 'is_singular', 'is_attachment', 'is_embed' );
 
 		ob_start();
-		include( ABSPATH . WPINC . '/theme-compat/embed.php' );
+		require ABSPATH . WPINC . '/theme-compat/embed.php';
 		$actual = ob_get_clean();
 
 		$doc = new DOMDocument();
@@ -125,7 +125,7 @@ class Tests_Embed_Template extends WP_UnitTestCase {
 		$this->assertQueryTrue( 'is_404', 'is_embed' );
 
 		ob_start();
-		include( ABSPATH . WPINC . '/theme-compat/embed.php' );
+		require ABSPATH . WPINC . '/theme-compat/embed.php';
 		$actual = ob_get_clean();
 
 		$doc = new DOMDocument();
@@ -149,7 +149,7 @@ class Tests_Embed_Template extends WP_UnitTestCase {
 		$this->assertQueryTrue( 'is_404', 'is_embed' );
 
 		ob_start();
-		include( ABSPATH . WPINC . '/theme-compat/embed.php' );
+		require ABSPATH . WPINC . '/theme-compat/embed.php';
 		$actual = ob_get_clean();
 
 		$doc = new DOMDocument();
@@ -172,7 +172,7 @@ class Tests_Embed_Template extends WP_UnitTestCase {
 		$this->assertQueryTrue( 'is_404', 'is_embed' );
 
 		ob_start();
-		include( ABSPATH . WPINC . '/theme-compat/embed.php' );
+		require ABSPATH . WPINC . '/theme-compat/embed.php';
 		$actual = ob_get_clean();
 
 		$doc = new DOMDocument();
@@ -199,7 +199,7 @@ class Tests_Embed_Template extends WP_UnitTestCase {
 		$this->assertQueryTrue( 'is_single', 'is_singular', 'is_embed' );
 
 		ob_start();
-		include( ABSPATH . WPINC . '/theme-compat/embed.php' );
+		require ABSPATH . WPINC . '/theme-compat/embed.php';
 		$actual = ob_get_clean();
 
 		$doc = new DOMDocument();
@@ -211,7 +211,7 @@ class Tests_Embed_Template extends WP_UnitTestCase {
 	function test_wp_embed_excerpt_more_no_embed() {
 		$GLOBALS['wp_query'] = new WP_Query();
 
-		$this->assertEquals( 'foo bar', wp_embed_excerpt_more( 'foo bar' ) );
+		$this->assertSame( 'foo bar', wp_embed_excerpt_more( 'foo bar' ) );
 	}
 
 	function test_wp_embed_excerpt_more() {
@@ -222,7 +222,7 @@ class Tests_Embed_Template extends WP_UnitTestCase {
 			)
 		);
 
-		$this->assertEquals( '', wp_embed_excerpt_more( '' ) );
+		$this->assertSame( '', wp_embed_excerpt_more( '' ) );
 
 		$this->go_to( get_post_embed_url( $post_id ) );
 
@@ -233,7 +233,7 @@ class Tests_Embed_Template extends WP_UnitTestCase {
 			get_the_permalink()
 		);
 
-		$this->assertEquals( $expected, $actual );
+		$this->assertSame( $expected, $actual );
 	}
 
 	function test_is_embed_post() {
diff --git a/tests/oembed/wpOembed.php b/tests/oembed/wpOembed.php
index 2c029da6b2..1f15abbad8 100644
--- a/tests/oembed/wpOembed.php
+++ b/tests/oembed/wpOembed.php
@@ -37,7 +37,7 @@ class Tests_WP_oEmbed extends WP_UnitTestCase {
 		remove_filter( 'pre_oembed_result', array( $this, '_filter_pre_oembed_result' ) );
 
 		$this->assertNotFalse( $this->pre_oembed_result_filtered );
-		$this->assertEquals( $this->pre_oembed_result_filtered, $actual );
+		$this->assertSame( $this->pre_oembed_result_filtered, $actual );
 	}
 
 	public function test_wp_filter_pre_oembed_result_prevents_http_request_when_viewing_the_post() {
@@ -52,7 +52,7 @@ class Tests_WP_oEmbed extends WP_UnitTestCase {
 		remove_filter( 'pre_oembed_result', array( $this, '_filter_pre_oembed_result' ) );
 
 		$this->assertNotFalse( $this->pre_oembed_result_filtered );
-		$this->assertEquals( $this->pre_oembed_result_filtered, $actual );
+		$this->assertSame( $this->pre_oembed_result_filtered, $actual );
 	}
 
 	public function test_wp_filter_pre_oembed_result_non_existent_post() {
@@ -84,7 +84,7 @@ class Tests_WP_oEmbed extends WP_UnitTestCase {
 		remove_filter( 'pre_oembed_result', array( $this, '_filter_pre_oembed_result' ) );
 
 		$this->assertNotNull( $this->pre_oembed_result_filtered );
-		$this->assertEquals( $this->pre_oembed_result_filtered, $actual );
+		$this->assertSame( $this->pre_oembed_result_filtered, $actual );
 	}
 
 	/**
@@ -113,7 +113,7 @@ class Tests_WP_oEmbed extends WP_UnitTestCase {
 		restore_current_blog();
 
 		$this->assertNotNull( $this->pre_oembed_result_filtered );
-		$this->assertEquals( $this->pre_oembed_result_filtered, $actual );
+		$this->assertSame( $this->pre_oembed_result_filtered, $actual );
 	}
 
 	/**
@@ -150,7 +150,7 @@ class Tests_WP_oEmbed extends WP_UnitTestCase {
 		restore_current_blog();
 
 		$this->assertNotNull( $this->pre_oembed_result_filtered );
-		$this->assertEquals( $this->pre_oembed_result_filtered, $actual );
+		$this->assertSame( $this->pre_oembed_result_filtered, $actual );
 	}
 
 	/**
@@ -177,7 +177,7 @@ class Tests_WP_oEmbed extends WP_UnitTestCase {
 		restore_current_blog();
 
 		$this->assertNotNull( $this->pre_oembed_result_filtered );
-		$this->assertEquals( $this->pre_oembed_result_filtered, $actual );
+		$this->assertSame( $this->pre_oembed_result_filtered, $actual );
 	}
 
 	/**
@@ -205,7 +205,7 @@ class Tests_WP_oEmbed extends WP_UnitTestCase {
 		restore_current_blog();
 
 		$this->assertNotNull( $this->pre_oembed_result_filtered );
-		$this->assertEquals( $this->pre_oembed_result_filtered, $actual );
+		$this->assertSame( $this->pre_oembed_result_filtered, $actual );
 		$this->assertSame( $expected_stack, $actual_stack );
 	}
 
diff --git a/tests/option/multisite.php b/tests/option/multisite.php
index 6d1d256325..49c7197431 100644
--- a/tests/option/multisite.php
+++ b/tests/option/multisite.php
@@ -31,34 +31,34 @@ if ( is_multisite() ) :
 			$value2 = __FUNCTION__ . '_val2';
 
 			$this->assertFalse( get_blog_option( 1, 'doesnotexist' ) );
-			$this->assertFalse( get_option( 'doesnotexist' ) ); // check get_option()
+			$this->assertFalse( get_option( 'doesnotexist' ) );           // Check get_option().
 
 			$this->assertTrue( add_blog_option( 1, $key, $value ) );
 			// Assert all values of $blog_id that means the current or main blog (the same here).
-			$this->assertEquals( $value, get_blog_option( 1, $key ) );
-			$this->assertEquals( $value, get_blog_option( null, $key ) );
-			$this->assertEquals( $value, get_blog_option( '1', $key ) );
-			$this->assertEquals( $value, get_option( $key ) ); // check get_option()
+			$this->assertSame( $value, get_blog_option( 1, $key ) );
+			$this->assertSame( $value, get_blog_option( null, $key ) );
+			$this->assertSame( $value, get_blog_option( '1', $key ) );
+			$this->assertSame( $value, get_option( $key ) );            // Check get_option().
 
-			$this->assertFalse( add_blog_option( 1, $key, $value ) );  // Already exists
-			$this->assertFalse( update_blog_option( 1, $key, $value ) );  // Value is the same
+			$this->assertFalse( add_blog_option( 1, $key, $value ) );     // Already exists.
+			$this->assertFalse( update_blog_option( 1, $key, $value ) );  // Value is the same.
 			$this->assertTrue( update_blog_option( 1, $key, $value2 ) );
-			$this->assertEquals( $value2, get_blog_option( 1, $key ) );
-			$this->assertEquals( $value2, get_option( $key ) ); // check get_option()
+			$this->assertSame( $value2, get_blog_option( 1, $key ) );
+			$this->assertSame( $value2, get_option( $key ) );           // Check get_option().
 			$this->assertFalse( add_blog_option( 1, $key, $value ) );
-			$this->assertEquals( $value2, get_blog_option( 1, $key ) );
-			$this->assertEquals( $value2, get_option( $key ) ); // check get_option()
+			$this->assertSame( $value2, get_blog_option( 1, $key ) );
+			$this->assertSame( $value2, get_option( $key ) );           // Check get_option().
 
 			$this->assertTrue( delete_blog_option( 1, $key ) );
 			$this->assertFalse( get_blog_option( 1, $key ) );
-			$this->assertFalse( get_option( $key ) ); // check get_option()
+			$this->assertFalse( get_option( $key ) );                     // Check get_option().
 			$this->assertFalse( delete_blog_option( 1, $key ) );
 			$this->assertTrue( update_blog_option( 1, $key2, $value2 ) );
-			$this->assertEquals( $value2, get_blog_option( 1, $key2 ) );
-			$this->assertEquals( $value2, get_option( $key2 ) ); // check get_option()
+			$this->assertSame( $value2, get_blog_option( 1, $key2 ) );
+			$this->assertSame( $value2, get_option( $key2 ) );          // Check get_option().
 			$this->assertTrue( delete_blog_option( 1, $key2 ) );
 			$this->assertFalse( get_blog_option( 1, $key2 ) );
-			$this->assertFalse( get_option( $key2 ) ); // check get_option()
+			$this->assertFalse( get_option( $key2 ) );                    // Check get_option().
 		}
 
 		function test_from_same_site_with_null_blog_id() {
@@ -68,33 +68,33 @@ if ( is_multisite() ) :
 			$value2 = __FUNCTION__ . '_val2';
 
 			$this->assertFalse( get_blog_option( null, 'doesnotexist' ) );
-			$this->assertFalse( get_option( 'doesnotexist' ) ); // check get_option()
+			$this->assertFalse( get_option( 'doesnotexist' ) );              // Check get_option().
 
 			$this->assertTrue( add_blog_option( null, $key, $value ) );
 			// Assert all values of $blog_id that means the current or main blog (the same here).
-			$this->assertEquals( $value, get_blog_option( null, $key ) );
-			$this->assertEquals( $value, get_blog_option( null, $key ) );
-			$this->assertEquals( $value, get_option( $key ) ); // check get_option()
+			$this->assertSame( $value, get_blog_option( null, $key ) );
+			$this->assertSame( $value, get_blog_option( null, $key ) );
+			$this->assertSame( $value, get_option( $key ) );               // Check get_option().
 
-			$this->assertFalse( add_blog_option( null, $key, $value ) );  // Already exists
-			$this->assertFalse( update_blog_option( null, $key, $value ) );  // Value is the same
+			$this->assertFalse( add_blog_option( null, $key, $value ) );     // Already exists.
+			$this->assertFalse( update_blog_option( null, $key, $value ) );  // Value is the same.
 			$this->assertTrue( update_blog_option( null, $key, $value2 ) );
-			$this->assertEquals( $value2, get_blog_option( null, $key ) );
-			$this->assertEquals( $value2, get_option( $key ) ); // check get_option()
+			$this->assertSame( $value2, get_blog_option( null, $key ) );
+			$this->assertSame( $value2, get_option( $key ) );              // Check get_option().
 			$this->assertFalse( add_blog_option( null, $key, $value ) );
-			$this->assertEquals( $value2, get_blog_option( null, $key ) );
-			$this->assertEquals( $value2, get_option( $key ) ); // check get_option()
+			$this->assertSame( $value2, get_blog_option( null, $key ) );
+			$this->assertSame( $value2, get_option( $key ) );              // Check get_option().
 
 			$this->assertTrue( delete_blog_option( null, $key ) );
 			$this->assertFalse( get_blog_option( null, $key ) );
-			$this->assertFalse( get_option( $key ) ); // check get_option()
+			$this->assertFalse( get_option( $key ) );                        // Check get_option().
 			$this->assertFalse( delete_blog_option( null, $key ) );
 			$this->assertTrue( update_blog_option( null, $key2, $value2 ) );
-			$this->assertEquals( $value2, get_blog_option( null, $key2 ) );
-			$this->assertEquals( $value2, get_option( $key2 ) ); // check get_option()
+			$this->assertSame( $value2, get_blog_option( null, $key2 ) );
+			$this->assertSame( $value2, get_option( $key2 ) );             // Check get_option().
 			$this->assertTrue( delete_blog_option( null, $key2 ) );
 			$this->assertFalse( get_blog_option( null, $key2 ) );
-			$this->assertFalse( get_option( $key2 ) ); // check get_option()
+			$this->assertFalse( get_option( $key2 ) );                       // Check get_option().
 		}
 
 		function test_with_another_site() {
@@ -104,9 +104,7 @@ if ( is_multisite() ) :
 			$blog_id = self::factory()->blog->create(
 				array(
 					'user_id' => $user_id,
-					'meta'    => array(
-						'public' => 1,
-					),
+					'public'  => 1,
 				)
 			);
 			$this->assertInternalType( 'integer', $blog_id );
@@ -117,33 +115,33 @@ if ( is_multisite() ) :
 			$value2 = __FUNCTION__ . '_val2';
 
 			$this->assertFalse( get_blog_option( $blog_id, 'doesnotexist' ) );
-			//$this->assertFalse( get_option( 'doesnotexist' ) ); // check get_option()
+			// $this->assertFalse( get_option( 'doesnotexist' ) );               // Check get_option().
 
 			$this->assertTrue( add_blog_option( $blog_id, $key, $value ) );
 			// Assert all values of $blog_id that means the current or main blog (the same here).
-			$this->assertEquals( $value, get_blog_option( $blog_id, $key ) );
-			$this->assertEquals( $value, get_blog_option( "$blog_id", $key ) );
-			//$this->assertEquals( $value, get_option( $key ) ); // check get_option()
+			$this->assertSame( $value, get_blog_option( $blog_id, $key ) );
+			$this->assertSame( $value, get_blog_option( "$blog_id", $key ) );
+			// $this->assertSame( $value, get_option( $key ) );                // Check get_option().
 
-			$this->assertFalse( add_blog_option( $blog_id, $key, $value ) );  // Already exists
-			$this->assertFalse( update_blog_option( $blog_id, $key, $value ) );  // Value is the same
+			$this->assertFalse( add_blog_option( $blog_id, $key, $value ) );     // Already exists.
+			$this->assertFalse( update_blog_option( $blog_id, $key, $value ) );  // Value is the same.
 			$this->assertTrue( update_blog_option( $blog_id, $key, $value2 ) );
-			$this->assertEquals( $value2, get_blog_option( $blog_id, $key ) );
-			//$this->assertEquals( $value2, get_option( $key ) ); // check get_option()
+			$this->assertSame( $value2, get_blog_option( $blog_id, $key ) );
+			// $this->assertSame( $value2, get_option( $key ) );               // Check get_option().
 			$this->assertFalse( add_blog_option( $blog_id, $key, $value ) );
-			$this->assertEquals( $value2, get_blog_option( $blog_id, $key ) );
-			//$this->assertEquals( $value2, get_option( $key ) ); // check get_option()
+			$this->assertSame( $value2, get_blog_option( $blog_id, $key ) );
+			// $this->assertSame( $value2, get_option( $key ) );               // Check get_option().
 
 			$this->assertTrue( delete_blog_option( $blog_id, $key ) );
 			$this->assertFalse( get_blog_option( $blog_id, $key ) );
-			//$this->assertFalse( get_option( $key ) ); // check get_option()
+			// $this->assertFalse( get_option( $key ) );                         // Check get_option().
 			$this->assertFalse( delete_blog_option( $blog_id, $key ) );
 			$this->assertTrue( update_blog_option( $blog_id, $key2, $value2 ) );
-			$this->assertEquals( $value2, get_blog_option( $blog_id, $key2 ) );
-			//$this->assertEquals( $value2, get_option( $key2 ) ); // check get_option()
+			$this->assertSame( $value2, get_blog_option( $blog_id, $key2 ) );
+			// $this->assertSame( $value2, get_option( $key2 ) );              // Check get_option().
 			$this->assertTrue( delete_blog_option( $blog_id, $key2 ) );
 			$this->assertFalse( get_blog_option( $blog_id, $key2 ) );
-			//$this->assertFalse( get_option( $key2 ) ); // check get_option()
+			// $this->assertFalse( get_option( $key2 ) );                        // Check get_option().
 		}
 
 		/**
@@ -186,7 +184,7 @@ if ( is_multisite() ) :
 		 */
 		function test_sanitize_network_option_illegal_names( $option_value, $sanitized_option_value ) {
 			update_site_option( 'illegal_names', $option_value );
-			$this->assertEquals( $sanitized_option_value, get_site_option( 'illegal_names' ) );
+			$this->assertSame( $sanitized_option_value, get_site_option( 'illegal_names' ) );
 		}
 
 		function data_illegal_names() {
@@ -205,7 +203,7 @@ if ( is_multisite() ) :
 		 */
 		function test_sanitize_network_option_limited_email_domains( $option_value, $sanitized_option_value ) {
 			update_site_option( 'limited_email_domains', $option_value );
-			$this->assertEquals( $sanitized_option_value, get_site_option( 'limited_email_domains' ) );
+			$this->assertSame( $sanitized_option_value, get_site_option( 'limited_email_domains' ) );
 		}
 
 		/**
@@ -216,7 +214,7 @@ if ( is_multisite() ) :
 		 */
 		function test_sanitize_network_option_banned_email_domains( $option_value, $sanitized_option_value ) {
 			update_site_option( 'banned_email_domains', $option_value );
-			$this->assertEquals( $sanitized_option_value, get_site_option( 'banned_email_domains' ) );
+			$this->assertSame( $sanitized_option_value, get_site_option( 'banned_email_domains' ) );
 		}
 
 		function data_email_domains() {
diff --git a/tests/option/networkOption.php b/tests/option/networkOption.php
index 244ea43898..a6cd1b6690 100644
--- a/tests/option/networkOption.php
+++ b/tests/option/networkOption.php
@@ -33,7 +33,7 @@ class Tests_Option_NetworkOption extends WP_UnitTestCase {
 		$value  = __FUNCTION__;
 
 		add_network_option( $id, $option, $value );
-		$this->assertEquals( $value, get_network_option( $id, $option, false ) );
+		$this->assertSame( $value, get_network_option( $id, $option, false ) );
 	}
 
 	/**
@@ -47,7 +47,7 @@ class Tests_Option_NetworkOption extends WP_UnitTestCase {
 		add_site_option( $option, $value );
 		add_network_option( $id, $option, $value );
 		delete_site_option( $option );
-		$this->assertEquals( $value, get_network_option( $id, $option, false ) );
+		$this->assertSame( $value, get_network_option( $id, $option, false ) );
 	}
 
 	/**
@@ -88,7 +88,7 @@ class Tests_Option_NetworkOption extends WP_UnitTestCase {
 		$option = rand_str();
 		$value  = rand_str();
 
-		$this->assertEquals( $expected_response, add_network_option( $network_id, $option, $value ) );
+		$this->assertSame( $expected_response, add_network_option( $network_id, $option, $value ) );
 	}
 
 	/**
@@ -100,7 +100,7 @@ class Tests_Option_NetworkOption extends WP_UnitTestCase {
 	function test_get_network_option_network_id_parameter( $network_id, $expected_response ) {
 		$option = rand_str();
 
-		$this->assertEquals( $expected_response, get_network_option( $network_id, $option, true ) );
+		$this->assertSame( $expected_response, get_network_option( $network_id, $option, true ) );
 	}
 
 	function data_network_id_parameter() {
@@ -203,6 +203,6 @@ class Tests_Option_NetworkOption extends WP_UnitTestCase {
 		$this->assertFalse( update_network_option( null, 'array_w_object', $array_w_object_2 ) );
 
 		// Check that no new database queries were performed.
-		$this->assertEquals( $num_queries_pre_update, get_num_queries() );
+		$this->assertSame( $num_queries_pre_update, get_num_queries() );
 	}
 }
diff --git a/tests/option/option.php b/tests/option/option.php
index f61f59b88b..f461a7db98 100644
--- a/tests/option/option.php
+++ b/tests/option/option.php
@@ -17,19 +17,19 @@ class Tests_Option_Option extends WP_UnitTestCase {
 
 		$this->assertFalse( get_option( 'doesnotexist' ) );
 		$this->assertTrue( add_option( $key, $value ) );
-		$this->assertEquals( $value, get_option( $key ) );
-		$this->assertFalse( add_option( $key, $value ) );  // Already exists
-		$this->assertFalse( update_option( $key, $value ) );  // Value is the same
+		$this->assertSame( $value, get_option( $key ) );
+		$this->assertFalse( add_option( $key, $value ) );    // Already exists.
+		$this->assertFalse( update_option( $key, $value ) ); // Value is the same.
 		$this->assertTrue( update_option( $key, $value2 ) );
-		$this->assertEquals( $value2, get_option( $key ) );
+		$this->assertSame( $value2, get_option( $key ) );
 		$this->assertFalse( add_option( $key, $value ) );
-		$this->assertEquals( $value2, get_option( $key ) );
+		$this->assertSame( $value2, get_option( $key ) );
 		$this->assertTrue( delete_option( $key ) );
 		$this->assertFalse( get_option( $key ) );
 		$this->assertFalse( delete_option( $key ) );
 
 		$this->assertTrue( update_option( $key2, $value2 ) );
-		$this->assertEquals( $value2, get_option( $key2 ) );
+		$this->assertSame( $value2, get_option( $key2 ) );
 		$this->assertTrue( delete_option( $key2 ) );
 		$this->assertFalse( get_option( $key2 ) );
 	}
@@ -41,20 +41,20 @@ class Tests_Option_Option extends WP_UnitTestCase {
 
 		// Default filter overrides $default arg.
 		add_filter( 'default_option_doesnotexist', array( $this, '__return_foo' ) );
-		$this->assertEquals( 'foo', get_option( 'doesnotexist', 'bar' ) );
+		$this->assertSame( 'foo', get_option( 'doesnotexist', 'bar' ) );
 
 		// Remove the filter and the $default arg is honored.
 		remove_filter( 'default_option_doesnotexist', array( $this, '__return_foo' ) );
-		$this->assertEquals( 'bar', get_option( 'doesnotexist', 'bar' ) );
+		$this->assertSame( 'bar', get_option( 'doesnotexist', 'bar' ) );
 
 		// Once the option exists, the $default arg and the default filter are ignored.
 		add_option( 'doesnotexist', $value );
-		$this->assertEquals( $value, get_option( 'doesnotexist', 'foo' ) );
+		$this->assertSame( $value, get_option( 'doesnotexist', 'foo' ) );
 		add_filter( 'default_option_doesnotexist', array( $this, '__return_foo' ) );
-		$this->assertEquals( $value, get_option( 'doesnotexist', 'foo' ) );
+		$this->assertSame( $value, get_option( 'doesnotexist', 'foo' ) );
 		remove_filter( 'default_option_doesnotexist', array( $this, '__return_foo' ) );
 
-		// Cleanup
+		// Cleanup.
 		$this->assertTrue( delete_option( 'doesnotexist' ) );
 		$this->assertFalse( get_option( 'doesnotexist' ) );
 	}
@@ -79,7 +79,7 @@ class Tests_Option_Option extends WP_UnitTestCase {
 		);
 
 		$this->assertTrue( add_option( $key, $value ) );
-		$this->assertEquals( $value, get_option( $key ) );
+		$this->assertSame( $value, get_option( $key ) );
 
 		$value = (object) $value;
 		$this->assertTrue( update_option( $key, $value ) );
@@ -138,6 +138,6 @@ class Tests_Option_Option extends WP_UnitTestCase {
 		$this->assertTrue( $added );
 
 		$actual = $wpdb->get_row( $wpdb->prepare( "SELECT autoload FROM $wpdb->options WHERE option_name = %s LIMIT 1", $name ) );
-		$this->assertEquals( $expected, $actual->autoload );
+		$this->assertSame( $expected, $actual->autoload );
 	}
 }
diff --git a/tests/option/registration.php b/tests/option/registration.php
index 8e6dd64b41..d60acb9ef1 100644
--- a/tests/option/registration.php
+++ b/tests/option/registration.php
@@ -11,19 +11,19 @@ class Tests_Option_Registration extends WP_UnitTestCase {
 		$this->assertArrayHasKey( 'test_option', $registered );
 
 		$args = $registered['test_option'];
-		$this->assertEquals( 'test_group', $args['group'] );
+		$this->assertSame( 'test_group', $args['group'] );
 
 		// Check defaults.
-		$this->assertEquals( 'string', $args['type'] );
-		$this->assertEquals( false, $args['show_in_rest'] );
-		$this->assertEquals( '', $args['description'] );
+		$this->assertSame( 'string', $args['type'] );
+		$this->assertFalse( $args['show_in_rest'] );
+		$this->assertSame( '', $args['description'] );
 	}
 
 	public function test_register_with_callback() {
 		register_setting( 'test_group', 'test_option', array( $this, 'filter_registered_setting' ) );
 
 		$filtered = apply_filters( 'sanitize_option_test_option', 'smart', 'test_option', 'smart' );
-		$this->assertEquals( 'S-M-R-T', $filtered );
+		$this->assertSame( 'S-M-R-T', $filtered );
 	}
 
 	public function test_register_with_array() {
@@ -36,7 +36,7 @@ class Tests_Option_Registration extends WP_UnitTestCase {
 		);
 
 		$filtered = apply_filters( 'sanitize_option_test_option', 'smart', 'test_option', 'smart' );
-		$this->assertEquals( 'S-M-R-T', $filtered );
+		$this->assertSame( 'S-M-R-T', $filtered );
 	}
 
 	public function filter_registered_setting() {
@@ -55,7 +55,7 @@ class Tests_Option_Registration extends WP_UnitTestCase {
 			)
 		);
 
-		$this->assertEquals( 'Got that Viper with them rally stripes', get_option( 'test_default' ) );
+		$this->assertSame( 'Got that Viper with them rally stripes', get_option( 'test_default' ) );
 	}
 
 	/**
@@ -72,7 +72,7 @@ class Tests_Option_Registration extends WP_UnitTestCase {
 
 		// This set of tests/references (and a previous version) are in support of Viper007Bond.
 		// His Viper doesn't have rally stripes, but for the sake of the Big Tymers, we'll go with it.
-		$this->assertEquals( 'We the #1 Stunnas', get_option( 'test_default', 'We the #1 Stunnas' ) );
+		$this->assertSame( 'We the #1 Stunnas', get_option( 'test_default', 'We the #1 Stunnas' ) );
 	}
 
 	/**
@@ -88,7 +88,7 @@ class Tests_Option_Registration extends WP_UnitTestCase {
 		);
 		wp_cache_delete( 'notoptions', 'options' );
 		$this->assertTrue( add_option( 'test_default', 'hello' ) );
-		$this->assertEquals( 'hello', get_option( 'test_default' ) );
+		$this->assertSame( 'hello', get_option( 'test_default' ) );
 	}
 
 	/**
diff --git a/tests/option/sanitize-option.php b/tests/option/sanitize-option.php
index 0a6ec865bb..3a1c22215d 100644
--- a/tests/option/sanitize-option.php
+++ b/tests/option/sanitize-option.php
@@ -138,7 +138,7 @@ class Tests_Sanitize_Option extends WP_UnitTestCase {
 			$this->assertEmpty( $errors );
 		} else {
 			$this->assertNotEmpty( $errors );
-			$this->assertEquals( 'invalid_permalink_structure', $errors[0]['code'] );
+			$this->assertSame( 'invalid_permalink_structure', $errors[0]['code'] );
 		}
 
 		$this->assertEquals( $expected, $actual );
diff --git a/tests/option/siteOption.php b/tests/option/siteOption.php
index 3210f0eba3..12d25f622b 100644
--- a/tests/option/siteOption.php
+++ b/tests/option/siteOption.php
@@ -24,7 +24,7 @@ class Tests_Option_SiteOption extends WP_UnitTestCase {
 		$key   = __FUNCTION__;
 		$value = __FUNCTION__;
 		add_site_option( $key, $value );
-		$this->assertEquals( $value, get_site_option( $key ) );
+		$this->assertSame( $value, get_site_option( $key ) );
 	}
 
 	function test_get_site_option_returns_updated_value() {
@@ -33,32 +33,32 @@ class Tests_Option_SiteOption extends WP_UnitTestCase {
 		$new_value = __FUNCTION__ . '_2';
 		add_site_option( $key, $value );
 		update_site_option( $key, $new_value );
-		$this->assertEquals( $new_value, get_site_option( $key ) );
+		$this->assertSame( $new_value, get_site_option( $key ) );
 	}
 
 	function test_get_site_option_does_not_exist_returns_filtered_default_with_no_default_provided() {
 		add_filter( 'default_site_option_doesnotexist', array( $this, '__return_foo' ) );
 		$site_option = get_site_option( 'doesnotexist' );
 		remove_filter( 'default_site_option_doesnotexist', array( $this, '__return_foo' ) );
-		$this->assertEquals( 'foo', $site_option );
+		$this->assertSame( 'foo', $site_option );
 	}
 
 	function test_get_site_option_does_not_exist_returns_filtered_default_with_default_provided() {
 		add_filter( 'default_site_option_doesnotexist', array( $this, '__return_foo' ) );
 		$site_option = get_site_option( 'doesnotexist', 'bar' );
 		remove_filter( 'default_site_option_doesnotexist', array( $this, '__return_foo' ) );
-		$this->assertEquals( 'foo', $site_option );
+		$this->assertSame( 'foo', $site_option );
 	}
 
 	function test_get_site_option_does_not_exist_returns_provided_default() {
-		$this->assertEquals( 'bar', get_site_option( 'doesnotexist', 'bar' ) );
+		$this->assertSame( 'bar', get_site_option( 'doesnotexist', 'bar' ) );
 	}
 
 	function test_get_site_option_exists_does_not_return_provided_default() {
 		$key   = __FUNCTION__;
 		$value = __FUNCTION__;
 		add_site_option( $key, $value );
-		$this->assertEquals( $value, get_site_option( $key, 'foo' ) );
+		$this->assertSame( $value, get_site_option( $key, 'foo' ) );
 	}
 
 	function test_get_site_option_exists_does_not_return_filtered_default() {
@@ -68,7 +68,7 @@ class Tests_Option_SiteOption extends WP_UnitTestCase {
 		add_filter( 'default_site_option_' . $key, array( $this, '__return_foo' ) );
 		$site_option = get_site_option( $key );
 		remove_filter( 'default_site_option_' . $key, array( $this, '__return_foo' ) );
-		$this->assertEquals( $value, $site_option );
+		$this->assertSame( $value, $site_option );
 	}
 
 	function test_add_site_option_returns_true_for_new_option() {
@@ -121,7 +121,7 @@ class Tests_Option_SiteOption extends WP_UnitTestCase {
 			'bar' => true,
 		);
 		add_site_option( $key, $value );
-		$this->assertEquals( $value, get_site_option( $key ) );
+		$this->assertSame( $value, get_site_option( $key ) );
 	}
 
 	function test_site_option_add_and_get_serialized_object() {
@@ -133,23 +133,31 @@ class Tests_Option_SiteOption extends WP_UnitTestCase {
 		$this->assertEquals( $value, get_site_option( $key ) );
 	}
 
-	// #15497 - ensure update_site_option will add options with false-y values
+	/**
+	 * Ensure update_site_option() will add options with false-y values.
+	 *
+	 * @ticket 15497
+	 */
 	function test_update_adds_falsey_value() {
 		$key   = __FUNCTION__;
 		$value = 0;
 
 		delete_site_option( $key );
 		$this->assertTrue( update_site_option( $key, $value ) );
-		$this->flush_cache(); // ensure we're getting the value from the DB
+		$this->flush_cache(); // Ensure we're getting the value from the DB.
 		$this->assertEquals( $value, get_site_option( $key ) );
 	}
 
-	// #18955 - ensure get_site_option doesn't cache the default value for non-existent options
+	/**
+	 * Ensure get_site_option() doesn't cache the default value for non-existent options.
+	 *
+	 * @ticket 18955
+	 */
 	function test_get_doesnt_cache_default_value() {
 		$option  = __FUNCTION__;
 		$default = 'a default';
 
-		$this->assertEquals( get_site_option( $option, $default ), $default );
+		$this->assertSame( get_site_option( $option, $default ), $default );
 		$this->assertFalse( get_site_option( $option ) );
 	}
 }
diff --git a/tests/option/siteTransient.php b/tests/option/siteTransient.php
index f9680e6ca3..7050b2cd90 100644
--- a/tests/option/siteTransient.php
+++ b/tests/option/siteTransient.php
@@ -20,10 +20,10 @@ class Tests_Option_SiteTransient extends WP_UnitTestCase {
 
 		$this->assertFalse( get_site_transient( 'doesnotexist' ) );
 		$this->assertTrue( set_site_transient( $key, $value ) );
-		$this->assertEquals( $value, get_site_transient( $key ) );
+		$this->assertSame( $value, get_site_transient( $key ) );
 		$this->assertFalse( set_site_transient( $key, $value ) );
 		$this->assertTrue( set_site_transient( $key, $value2 ) );
-		$this->assertEquals( $value2, get_site_transient( $key ) );
+		$this->assertSame( $value2, get_site_transient( $key ) );
 		$this->assertTrue( delete_site_transient( $key ) );
 		$this->assertFalse( get_site_transient( $key ) );
 		$this->assertFalse( delete_site_transient( $key ) );
@@ -37,7 +37,7 @@ class Tests_Option_SiteTransient extends WP_UnitTestCase {
 		);
 
 		$this->assertTrue( set_site_transient( $key, $value ) );
-		$this->assertEquals( $value, get_site_transient( $key ) );
+		$this->assertSame( $value, get_site_transient( $key ) );
 
 		$value = (object) $value;
 		$this->assertTrue( set_site_transient( $key, $value ) );
diff --git a/tests/option/slashes.php b/tests/option/slashes.php
index 5b88768c32..20220e5d58 100644
--- a/tests/option/slashes.php
+++ b/tests/option/slashes.php
@@ -8,8 +8,8 @@
 class Tests_Option_Slashes extends WP_UnitTestCase {
 	function setUp() {
 		parent::setUp();
-		// it is important to test with both even and odd numbered slashes as
-		// kses does a strip-then-add slashes in some of its function calls
+		// It is important to test with both even and odd numbered slashes,
+		// as KSES does a strip-then-add slashes in some of its function calls.
 		$this->slash_1 = 'String with 1 slash \\';
 		$this->slash_2 = 'String with 2 slashes \\\\';
 		$this->slash_3 = 'String with 3 slashes \\\\\\';
@@ -28,10 +28,10 @@ class Tests_Option_Slashes extends WP_UnitTestCase {
 		add_option( 'slash_test_3', $this->slash_3 );
 		add_option( 'slash_test_4', $this->slash_4 );
 
-		$this->assertEquals( $this->slash_1, get_option( 'slash_test_1' ) );
-		$this->assertEquals( $this->slash_2, get_option( 'slash_test_2' ) );
-		$this->assertEquals( $this->slash_3, get_option( 'slash_test_3' ) );
-		$this->assertEquals( $this->slash_4, get_option( 'slash_test_4' ) );
+		$this->assertSame( $this->slash_1, get_option( 'slash_test_1' ) );
+		$this->assertSame( $this->slash_2, get_option( 'slash_test_2' ) );
+		$this->assertSame( $this->slash_3, get_option( 'slash_test_3' ) );
+		$this->assertSame( $this->slash_4, get_option( 'slash_test_4' ) );
 	}
 
 	/**
@@ -41,15 +41,15 @@ class Tests_Option_Slashes extends WP_UnitTestCase {
 		add_option( 'slash_test_5', 'foo' );
 
 		update_option( 'slash_test_5', $this->slash_1 );
-		$this->assertEquals( $this->slash_1, get_option( 'slash_test_5' ) );
+		$this->assertSame( $this->slash_1, get_option( 'slash_test_5' ) );
 
 		update_option( 'slash_test_5', $this->slash_2 );
-		$this->assertEquals( $this->slash_2, get_option( 'slash_test_5' ) );
+		$this->assertSame( $this->slash_2, get_option( 'slash_test_5' ) );
 
 		update_option( 'slash_test_5', $this->slash_3 );
-		$this->assertEquals( $this->slash_3, get_option( 'slash_test_5' ) );
+		$this->assertSame( $this->slash_3, get_option( 'slash_test_5' ) );
 
 		update_option( 'slash_test_5', $this->slash_4 );
-		$this->assertEquals( $this->slash_4, get_option( 'slash_test_5' ) );
+		$this->assertSame( $this->slash_4, get_option( 'slash_test_5' ) );
 	}
 }
diff --git a/tests/option/themeMods.php b/tests/option/themeMods.php
index 5c39de6b9e..53683f72a0 100644
--- a/tests/option/themeMods.php
+++ b/tests/option/themeMods.php
@@ -6,30 +6,30 @@
 class Tests_Option_Theme_Mods extends WP_UnitTestCase {
 
 	function test_theme_mod_default() {
-		$this->assertEquals( '', get_theme_mod( 'non_existent' ) );
+		$this->assertFalse( get_theme_mod( 'non_existent' ) );
 	}
 
 	function test_theme_mod_defined_default() {
-		$this->assertEquals( 'default', get_theme_mod( 'non_existent', 'default' ) );
+		$this->assertSame( 'default', get_theme_mod( 'non_existent', 'default' ) );
 	}
 
 	function test_theme_mod_set() {
 		$expected = 'value';
 		set_theme_mod( 'test_name', $expected );
-		$this->assertEquals( $expected, get_theme_mod( 'test_name' ) );
+		$this->assertSame( $expected, get_theme_mod( 'test_name' ) );
 	}
 
 	function test_theme_mod_update() {
 		set_theme_mod( 'test_update', 'first_value' );
 		$expected = 'updated_value';
 		set_theme_mod( 'test_update', $expected );
-		$this->assertEquals( $expected, get_theme_mod( 'test_update' ) );
+		$this->assertSame( $expected, get_theme_mod( 'test_update' ) );
 	}
 
 	function test_theme_mod_remove() {
 		set_theme_mod( 'test_remove', 'value' );
 		remove_theme_mod( 'test_remove' );
-		$this->assertEquals( '', get_theme_mod( 'test_remove' ) );
+		$this->assertFalse( get_theme_mod( 'test_remove' ) );
 	}
 
 	/**
@@ -38,7 +38,7 @@ class Tests_Option_Theme_Mods extends WP_UnitTestCase {
 	 * @dataProvider data_theme_mod_default_value_with_percent_symbols
 	 */
 	function test_theme_mod_default_value_with_percent_symbols( $default, $expected ) {
-		$this->assertEquals( $expected, get_theme_mod( 'test_name', $default ) );
+		$this->assertSame( $expected, get_theme_mod( 'test_name', $default ) );
 	}
 
 	function data_theme_mod_default_value_with_percent_symbols() {
diff --git a/tests/option/transient.php b/tests/option/transient.php
index dbeb4e1e92..5f3116a1f4 100644
--- a/tests/option/transient.php
+++ b/tests/option/transient.php
@@ -20,10 +20,10 @@ class Tests_Option_Transient extends WP_UnitTestCase {
 
 		$this->assertFalse( get_transient( 'doesnotexist' ) );
 		$this->assertTrue( set_transient( $key, $value ) );
-		$this->assertEquals( $value, get_transient( $key ) );
+		$this->assertSame( $value, get_transient( $key ) );
 		$this->assertFalse( set_transient( $key, $value ) );
 		$this->assertTrue( set_transient( $key, $value2 ) );
-		$this->assertEquals( $value2, get_transient( $key ) );
+		$this->assertSame( $value2, get_transient( $key ) );
 		$this->assertTrue( delete_transient( $key ) );
 		$this->assertFalse( get_transient( $key ) );
 		$this->assertFalse( delete_transient( $key ) );
@@ -37,7 +37,7 @@ class Tests_Option_Transient extends WP_UnitTestCase {
 		);
 
 		$this->assertTrue( set_transient( $key, $value ) );
-		$this->assertEquals( $value, get_transient( $key ) );
+		$this->assertSame( $value, get_transient( $key ) );
 
 		$value = (object) $value;
 		$this->assertTrue( set_transient( $key, $value ) );
@@ -74,7 +74,7 @@ class Tests_Option_Transient extends WP_UnitTestCase {
 		$value  = rand_str();
 		$value2 = rand_str();
 		$this->assertTrue( set_transient( $key, $value ) );
-		$this->assertEquals( $value, get_transient( $key ) );
+		$this->assertSame( $value, get_transient( $key ) );
 
 		$this->assertFalse( get_option( '_transient_timeout_' . $key ) );
 
@@ -93,55 +93,55 @@ class Tests_Option_Transient extends WP_UnitTestCase {
 	 * @ticket 30380
 	 */
 	function test_nonexistent_key_dont_delete_if_false() {
-		// Create a bogus a transient
+		// Create a bogus a transient.
 		$key = 'test_transient';
 		set_transient( $key, 'test', 60 * 10 );
-		$this->assertEquals( 'test', get_transient( $key ) );
+		$this->assertSame( 'test', get_transient( $key ) );
 
-		// Useful variables for tracking
+		// Useful variables for tracking.
 		$transient_timeout = '_transient_timeout_' . $key;
 
-		// Mock an action for tracking action calls
+		// Mock an action for tracking action calls.
 		$a = new MockAction();
 
-		// Make sure the timeout option returns false
+		// Make sure the timeout option returns false.
 		add_filter( 'option_' . $transient_timeout, '__return_false' );
 
-		// Add some actions to make sure options are _not_ deleted
+		// Add some actions to make sure options are _not_ deleted.
 		add_action( 'delete_option', array( $a, 'action' ) );
 
-		// Act
+		// Act.
 		get_transient( $key );
 
-		// Make sure delete option was not called for both the transient and the timeout
-		$this->assertEquals( 0, $a->get_call_count() );
+		// Make sure 'delete_option' was not called for both the transient and the timeout.
+		$this->assertSame( 0, $a->get_call_count() );
 	}
 
 	/**
 	 * @ticket 30380
 	 */
 	function test_nonexistent_key_old_timeout() {
-		// Create a transient
+		// Create a transient.
 		$key = 'test_transient';
 		set_transient( $key, 'test', 60 * 10 );
-		$this->assertEquals( 'test', get_transient( $key ) );
+		$this->assertSame( 'test', get_transient( $key ) );
 
-		// Make sure the timeout option returns false
+		// Make sure the timeout option returns false.
 		$timeout          = '_transient_timeout_' . $key;
 		$transient_option = '_transient_' . $key;
 		add_filter( 'option_' . $timeout, '__return_zero' );
 
-		// Mock an action for tracking action calls
+		// Mock an action for tracking action calls.
 		$a = new MockAction();
 
-		// Add some actions to make sure options are deleted
+		// Add some actions to make sure options are deleted.
 		add_action( 'delete_option', array( $a, 'action' ) );
 
-		// Act
+		// Act.
 		get_transient( $key );
 
-		// Make sure delete option was called for both the transient and the timeout
-		$this->assertEquals( 2, $a->get_call_count() );
+		// Make sure 'delete_option' was called for both the transient and the timeout.
+		$this->assertSame( 2, $a->get_call_count() );
 
 		$expected = array(
 			array(
@@ -155,6 +155,6 @@ class Tests_Option_Transient extends WP_UnitTestCase {
 				'args'   => array( $timeout ),
 			),
 		);
-		$this->assertEquals( $expected, $a->get_events() );
+		$this->assertSame( $expected, $a->get_events() );
 	}
 }
diff --git a/tests/option/updateOption.php b/tests/option/updateOption.php
index 77a884fc41..db2aab24a2 100644
--- a/tests/option/updateOption.php
+++ b/tests/option/updateOption.php
@@ -32,8 +32,8 @@ class Tests_Option_UpdateOption extends WP_UnitTestCase {
 		$value  = get_option( 'test_update_option_default' );
 		$after  = $wpdb->num_queries;
 
-		$this->assertEquals( $before, $after );
-		$this->assertEquals( $value, 'value' );
+		$this->assertSame( $before, $after );
+		$this->assertSame( $value, 'value' );
 	}
 
 	/**
@@ -52,8 +52,8 @@ class Tests_Option_UpdateOption extends WP_UnitTestCase {
 		$value  = get_option( 'test_update_option_default' );
 		$after  = $wpdb->num_queries;
 
-		$this->assertEquals( $before, $after );
-		$this->assertEquals( $value, 'value' );
+		$this->assertSame( $before, $after );
+		$this->assertSame( $value, 'value' );
 	}
 
 	/**
@@ -73,8 +73,8 @@ class Tests_Option_UpdateOption extends WP_UnitTestCase {
 		$after  = $wpdb->num_queries;
 
 		// Database has been hit.
-		$this->assertEquals( $before + 1, $after );
-		$this->assertEquals( $value, 'value' );
+		$this->assertSame( $before + 1, $after );
+		$this->assertSame( $value, 'value' );
 	}
 
 	/**
@@ -94,8 +94,8 @@ class Tests_Option_UpdateOption extends WP_UnitTestCase {
 		$after  = $wpdb->num_queries;
 
 		// Database has been hit.
-		$this->assertEquals( $before + 1, $after );
-		$this->assertEquals( $value, 'value' );
+		$this->assertSame( $before + 1, $after );
+		$this->assertSame( $value, 'value' );
 	}
 
 	/**
@@ -115,8 +115,8 @@ class Tests_Option_UpdateOption extends WP_UnitTestCase {
 		$before = $wpdb->num_queries;
 		$value  = get_option( 'foo' );
 
-		$this->assertEquals( $before, $wpdb->num_queries );
-		$this->assertEquals( $value, 'bar2' );
+		$this->assertSame( $before, $wpdb->num_queries );
+		$this->assertSame( $value, 'bar2' );
 	}
 
 	/**
@@ -137,8 +137,8 @@ class Tests_Option_UpdateOption extends WP_UnitTestCase {
 		$value  = get_option( 'foo' );
 
 		// 'foo' should still be autoload=yes, so we should see no additional querios.
-		$this->assertEquals( $before, $wpdb->num_queries );
-		$this->assertEquals( $value, 'bar' );
+		$this->assertSame( $before, $wpdb->num_queries );
+		$this->assertSame( $value, 'bar' );
 	}
 
 	/**
@@ -161,8 +161,8 @@ class Tests_Option_UpdateOption extends WP_UnitTestCase {
 		$value  = get_option( 'foo' );
 
 		// 'foo' should still be autoload=yes, so we should see no additional querios.
-		$this->assertEquals( $before, $wpdb->num_queries );
-		$this->assertEquals( $value, 'bar2' );
+		$this->assertSame( $before, $wpdb->num_queries );
+		$this->assertSame( $value, 'bar2' );
 	}
 
 	/**
@@ -187,7 +187,7 @@ class Tests_Option_UpdateOption extends WP_UnitTestCase {
 		$this->assertFalse( update_option( 'array_w_object', $array_w_object ) );
 
 		// Check that no new database queries were performed.
-		$this->assertEquals( $num_queries_pre_update, get_num_queries() );
+		$this->assertSame( $num_queries_pre_update, get_num_queries() );
 	}
 
 	/**
diff --git a/tests/option/userSettings.php b/tests/option/userSettings.php
index d96bcc6589..e09c226355 100644
--- a/tests/option/userSettings.php
+++ b/tests/option/userSettings.php
@@ -27,7 +27,7 @@ class Tests_User_Settings extends WP_UnitTestCase {
 
 		$this->set_user_setting( 'foo', 'bar' );
 
-		$this->assertEquals( 'bar', get_user_setting( 'foo' ) );
+		$this->assertSame( 'bar', get_user_setting( 'foo' ) );
 	}
 
 	function test_set_user_setting_dashes() {
@@ -37,7 +37,7 @@ class Tests_User_Settings extends WP_UnitTestCase {
 
 		$this->set_user_setting( 'foo', 'foo-bar-baz' );
 
-		$this->assertEquals( 'foo-bar-baz', get_user_setting( 'foo' ) );
+		$this->assertSame( 'foo-bar-baz', get_user_setting( 'foo' ) );
 	}
 
 	function test_set_user_setting_strip_asterisks() {
@@ -47,10 +47,10 @@ class Tests_User_Settings extends WP_UnitTestCase {
 
 		$this->set_user_setting( 'foo', 'foo*bar*baz' );
 
-		$this->assertEquals( 'foobarbaz', get_user_setting( 'foo' ) );
+		$this->assertSame( 'foobarbaz', get_user_setting( 'foo' ) );
 	}
 
-	// set_user_setting bails if `headers_sent()` is true
+	// set_user_setting() bails if `headers_sent()` is true.
 	function set_user_setting( $name, $value ) {
 		$all_user_settings          = get_all_user_settings();
 		$all_user_settings[ $name ] = $value;
diff --git a/tests/option/wpLoadAllOptions.php b/tests/option/wpLoadAllOptions.php
index 5088f10b9a..76c23d29e0 100644
--- a/tests/option/wpLoadAllOptions.php
+++ b/tests/option/wpLoadAllOptions.php
@@ -33,7 +33,7 @@ class Tests_Option_WP_Load_Alloptions extends WP_UnitTestCase {
 		$after = $wpdb->num_queries;
 
 		// Database has not been hit.
-		$this->assertEquals( $before, $after );
+		$this->assertSame( $before, $after );
 	}
 
 	/**
@@ -50,7 +50,7 @@ class Tests_Option_WP_Load_Alloptions extends WP_UnitTestCase {
 		$after = $wpdb->num_queries;
 
 		// Database has been hit.
-		$this->assertEquals( $before + 1, $after );
+		$this->assertSame( $before + 1, $after );
 	}
 
 	/**
@@ -76,7 +76,7 @@ class Tests_Option_WP_Load_Alloptions extends WP_UnitTestCase {
 		wp_installing( $temp );
 
 		// Filter was called.
-		$this->assertEquals( $this->alloptions, $all_options );
+		$this->assertSame( $this->alloptions, $all_options );
 	}
 
 	/**
diff --git a/tests/pluggable.php b/tests/pluggable.php
index fd97a2dd77..879f31151d 100644
--- a/tests/pluggable.php
+++ b/tests/pluggable.php
@@ -88,7 +88,7 @@ class Tests_Pluggable extends WP_UnitTestCase {
 			'wp-includes/pluggable.php',
 		);
 
-		// Pluggable function signatures are not tested when an external object cache is in use. #31491
+		// Pluggable function signatures are not tested when an external object cache is in use. See #31491.
 		if ( ! wp_using_ext_object_cache() ) {
 			$test_files[] = 'wp-includes/cache.php';
 		}
@@ -260,7 +260,7 @@ class Tests_Pluggable extends WP_UnitTestCase {
 			'install_global_terms'            => array(),
 		);
 
-		// Pluggable function signatures are not tested when an external object cache is in use. #31491
+		// Pluggable function signatures are not tested when an external object cache is in use. See #31491.
 		if ( ! wp_using_ext_object_cache() ) {
 			$signatures = array_merge(
 				$signatures,
@@ -290,6 +290,11 @@ class Tests_Pluggable extends WP_UnitTestCase {
 						'force' => false,
 						'found' => null,
 					),
+					'wp_cache_get_multiple'              => array(
+						'keys',
+						'group' => '',
+						'force' => false,
+					),
 					'wp_cache_incr'                      => array(
 						'key',
 						'offset' => 1,
diff --git a/tests/pomo/mo.php b/tests/pomo/mo.php
index a3990198dd..5dd9956f9f 100644
--- a/tests/pomo/mo.php
+++ b/tests/pomo/mo.php
@@ -8,48 +8,48 @@ class Tests_POMO_MO extends WP_UnitTestCase {
 	function test_mo_simple() {
 		$mo = new MO();
 		$mo->import_from_file( DIR_TESTDATA . '/pomo/simple.mo' );
-		$this->assertEquals(
+		$this->assertSame(
 			array(
 				'Project-Id-Version'   => 'WordPress 2.6-bleeding',
 				'Report-Msgid-Bugs-To' => 'wp-polyglots@lists.automattic.com',
 			),
 			$mo->headers
 		);
-		$this->assertEquals( 2, count( $mo->entries ) );
-		$this->assertEquals( array( 'dyado' ), $mo->entries['baba']->translations );
-		$this->assertEquals( array( 'yes' ), $mo->entries["kuku\nruku"]->translations );
+		$this->assertSame( 2, count( $mo->entries ) );
+		$this->assertSame( array( 'dyado' ), $mo->entries['baba']->translations );
+		$this->assertSame( array( 'yes' ), $mo->entries["kuku\nruku"]->translations );
 	}
 
 	function test_mo_plural() {
 		$mo = new MO();
 		$mo->import_from_file( DIR_TESTDATA . '/pomo/plural.mo' );
-		$this->assertEquals( 1, count( $mo->entries ) );
-		$this->assertEquals( array( 'oney dragoney', 'twoey dragoney', 'manyey dragoney', 'manyeyey dragoney', 'manyeyeyey dragoney' ), $mo->entries['one dragon']->translations );
+		$this->assertSame( 1, count( $mo->entries ) );
+		$this->assertSame( array( 'oney dragoney', 'twoey dragoney', 'manyey dragoney', 'manyeyey dragoney', 'manyeyeyey dragoney' ), $mo->entries['one dragon']->translations );
 
-		$this->assertEquals( 'oney dragoney', $mo->translate_plural( 'one dragon', '%d dragons', 1 ) );
-		$this->assertEquals( 'twoey dragoney', $mo->translate_plural( 'one dragon', '%d dragons', 2 ) );
-		$this->assertEquals( 'twoey dragoney', $mo->translate_plural( 'one dragon', '%d dragons', -8 ) );
+		$this->assertSame( 'oney dragoney', $mo->translate_plural( 'one dragon', '%d dragons', 1 ) );
+		$this->assertSame( 'twoey dragoney', $mo->translate_plural( 'one dragon', '%d dragons', 2 ) );
+		$this->assertSame( 'twoey dragoney', $mo->translate_plural( 'one dragon', '%d dragons', -8 ) );
 
 		$mo->set_header( 'Plural-Forms', 'nplurals=5; plural=0' );
-		$this->assertEquals( 'oney dragoney', $mo->translate_plural( 'one dragon', '%d dragons', 1 ) );
-		$this->assertEquals( 'oney dragoney', $mo->translate_plural( 'one dragon', '%d dragons', 2 ) );
-		$this->assertEquals( 'oney dragoney', $mo->translate_plural( 'one dragon', '%d dragons', -8 ) );
+		$this->assertSame( 'oney dragoney', $mo->translate_plural( 'one dragon', '%d dragons', 1 ) );
+		$this->assertSame( 'oney dragoney', $mo->translate_plural( 'one dragon', '%d dragons', 2 ) );
+		$this->assertSame( 'oney dragoney', $mo->translate_plural( 'one dragon', '%d dragons', -8 ) );
 
 		$mo->set_header( 'Plural-Forms', 'nplurals=5; plural=n%10==1 && n%100!=11 ? 0 : n%10>=2 && n%10<=4 && (n%100<10 || n%100>=20) ? 1 : 2;' );
-		$this->assertEquals( 'oney dragoney', $mo->translate_plural( 'one dragon', '%d dragons', 1 ) );
-		$this->assertEquals( 'manyey dragoney', $mo->translate_plural( 'one dragon', '%d dragons', 11 ) );
-		$this->assertEquals( 'twoey dragoney', $mo->translate_plural( 'one dragon', '%d dragons', 3 ) );
+		$this->assertSame( 'oney dragoney', $mo->translate_plural( 'one dragon', '%d dragons', 1 ) );
+		$this->assertSame( 'manyey dragoney', $mo->translate_plural( 'one dragon', '%d dragons', 11 ) );
+		$this->assertSame( 'twoey dragoney', $mo->translate_plural( 'one dragon', '%d dragons', 3 ) );
 
 		$mo->set_header( 'Plural-Forms', 'nplurals=2; plural=n !=1;' );
-		$this->assertEquals( 'oney dragoney', $mo->translate_plural( 'one dragon', '%d dragons', 1 ) );
-		$this->assertEquals( 'twoey dragoney', $mo->translate_plural( 'one dragon', '%d dragons', 2 ) );
-		$this->assertEquals( 'twoey dragoney', $mo->translate_plural( 'one dragon', '%d dragons', -8 ) );
+		$this->assertSame( 'oney dragoney', $mo->translate_plural( 'one dragon', '%d dragons', 1 ) );
+		$this->assertSame( 'twoey dragoney', $mo->translate_plural( 'one dragon', '%d dragons', 2 ) );
+		$this->assertSame( 'twoey dragoney', $mo->translate_plural( 'one dragon', '%d dragons', -8 ) );
 	}
 
 	function test_mo_context() {
 		$mo = new MO();
 		$mo->import_from_file( DIR_TESTDATA . '/pomo/context.mo' );
-		$this->assertEquals( 2, count( $mo->entries ) );
+		$this->assertSame( 2, count( $mo->entries ) );
 		$plural_entry = new Translation_Entry(
 			array(
 				'singular'     => 'one dragon',
@@ -59,7 +59,7 @@ class Tests_POMO_MO extends WP_UnitTestCase {
 			)
 		);
 		$this->assertEquals( $plural_entry, $mo->entries[ $plural_entry->key() ] );
-		$this->assertEquals( 'dragonland', $mo->entries[ $plural_entry->key() ]->context );
+		$this->assertSame( 'dragonland', $mo->entries[ $plural_entry->key() ]->context );
 
 		$single_entry = new Translation_Entry(
 			array(
@@ -69,7 +69,7 @@ class Tests_POMO_MO extends WP_UnitTestCase {
 			)
 		);
 		$this->assertEquals( $single_entry, $mo->entries[ $single_entry->key() ] );
-		$this->assertEquals( 'not so dragon', $mo->entries[ $single_entry->key() ]->context );
+		$this->assertSame( 'not so dragon', $mo->entries[ $single_entry->key() ]->context );
 
 	}
 
@@ -81,8 +81,8 @@ class Tests_POMO_MO extends WP_UnitTestCase {
 		$guest->add_entry( new Translation_Entry( array( 'singular' => 'green' ) ) );
 		$guest->add_entry( new Translation_Entry( array( 'singular' => 'red' ) ) );
 		$host->merge_with( $guest );
-		$this->assertEquals( 3, count( $host->entries ) );
-		$this->assertEquals( array(), array_diff( array( 'pink', 'green', 'red' ), array_keys( $host->entries ) ) );
+		$this->assertSame( 3, count( $host->entries ) );
+		$this->assertSame( array(), array_diff( array( 'pink', 'green', 'red' ), array_keys( $host->entries ) ) );
 	}
 
 	function test_export_mo_file() {
@@ -137,7 +137,7 @@ class Tests_POMO_MO extends WP_UnitTestCase {
 		$again = new MO();
 		$again->import_from_file( $temp_fn );
 
-		$this->assertEquals( count( $entries ), count( $again->entries ) );
+		$this->assertSame( count( $entries ), count( $again->entries ) );
 		foreach ( $entries as $entry ) {
 			$this->assertEquals( $entry, $again->entries[ $entry->key() ] );
 		}
@@ -159,15 +159,15 @@ class Tests_POMO_MO extends WP_UnitTestCase {
 		$again = new MO();
 		$again->import_from_file( $temp_fn );
 
-		$this->assertEquals( 0, count( $again->entries ) );
+		$this->assertSame( 0, count( $again->entries ) );
 	}
 
 	function test_nplurals_with_backslashn() {
 		$mo = new MO();
 		$mo->import_from_file( DIR_TESTDATA . '/pomo/bad_nplurals.mo' );
-		$this->assertEquals( '%d foro', $mo->translate_plural( '%d forum', '%d forums', 1 ) );
-		$this->assertEquals( '%d foros', $mo->translate_plural( '%d forum', '%d forums', 2 ) );
-		$this->assertEquals( '%d foros', $mo->translate_plural( '%d forum', '%d forums', -1 ) );
+		$this->assertSame( '%d foro', $mo->translate_plural( '%d forum', '%d forums', 1 ) );
+		$this->assertSame( '%d foros', $mo->translate_plural( '%d forum', '%d forums', 2 ) );
+		$this->assertSame( '%d foros', $mo->translate_plural( '%d forum', '%d forums', -1 ) );
 	}
 
 	function disabled_test_performance() {
@@ -184,11 +184,11 @@ class Tests_POMO_MO extends WP_UnitTestCase {
 
 		$mo = new MO();
 		$mo->import_from_file( DIR_TESTDATA . '/pomo/overload.mo' );
-		$this->assertEquals( array( '–¢–∞–±–ª–æ' ), $mo->entries['Dashboard']->translations );
+		$this->assertSame( array( '–¢–∞–±–ª–æ' ), $mo->entries['Dashboard']->translations );
 	}
 
 	function test_load_pot_file() {
 		$mo = new MO();
-		$this->assertEquals( false, $mo->import_from_file( DIR_TESTDATA . '/pomo/mo.pot' ) );
+		$this->assertFalse( $mo->import_from_file( DIR_TESTDATA . '/pomo/mo.pot' ) );
 	}
 }
diff --git a/tests/pomo/noopTranslations.php b/tests/pomo/noopTranslations.php
index 1e1a60c4c1..13ff9e6187 100644
--- a/tests/pomo/noopTranslations.php
+++ b/tests/pomo/noopTranslations.php
@@ -18,33 +18,33 @@ class Tests_POMO_NOOPTranslations extends WP_UnitTestCase {
 	}
 
 	function test_get_header() {
-		$this->assertEquals( false, $this->noop->get_header( 'Content-Type' ) );
+		$this->assertFalse( $this->noop->get_header( 'Content-Type' ) );
 	}
 
 	function test_add_entry() {
 		$this->noop->add_entry( $this->entry );
-		$this->assertEquals( array(), $this->noop->entries );
+		$this->assertSame( array(), $this->noop->entries );
 	}
 
 	function test_set_header() {
 		$this->noop->set_header( 'header', 'value' );
-		$this->assertEquals( array(), $this->noop->headers );
+		$this->assertSame( array(), $this->noop->headers );
 	}
 
 	function test_translate_entry() {
 		$this->noop->add_entry( $this->entry );
-		$this->assertEquals( false, $this->noop->translate_entry( $this->entry ) );
+		$this->assertFalse( $this->noop->translate_entry( $this->entry ) );
 	}
 
 	function test_translate() {
 		$this->noop->add_entry( $this->entry );
-		$this->assertEquals( 'baba', $this->noop->translate( 'baba' ) );
+		$this->assertSame( 'baba', $this->noop->translate( 'baba' ) );
 	}
 
 	function test_plural() {
 		$this->noop->add_entry( $this->plural_entry );
-		$this->assertEquals( 'dyado', $this->noop->translate_plural( 'dyado', 'dyados', 1 ) );
-		$this->assertEquals( 'dyados', $this->noop->translate_plural( 'dyado', 'dyados', 11 ) );
-		$this->assertEquals( 'dyados', $this->noop->translate_plural( 'dyado', 'dyados', 0 ) );
+		$this->assertSame( 'dyado', $this->noop->translate_plural( 'dyado', 'dyados', 1 ) );
+		$this->assertSame( 'dyados', $this->noop->translate_plural( 'dyado', 'dyados', 11 ) );
+		$this->assertSame( 'dyados', $this->noop->translate_plural( 'dyado', 'dyados', 0 ) );
 	}
 }
diff --git a/tests/pomo/pluralForms.php b/tests/pomo/pluralForms.php
index 2cd283cf95..3c84321652 100644
--- a/tests/pomo/pluralForms.php
+++ b/tests/pomo/pluralForms.php
@@ -74,11 +74,7 @@ class PluralFormsTest extends WP_UnitTestCase {
 	 * @group external-http
 	 */
 	public function test_regression( $lang, $nplurals, $expression ) {
-		if ( version_compare( phpversion(), '7.2', '>=' ) ) {
-			$this->markTestSkipped( 'Lambda functions are deprecated in PHP 7.2' );
-		}
-
-		require_once dirname( dirname( dirname( __FILE__ ) ) ) . '/includes/plural-form-function.php';
+		require_once dirname( dirname( __DIR__ ) ) . '/includes/plural-form-function.php';
 
 		$parenthesized = self::parenthesize_plural_expression( $expression );
 		$old_style     = tests_make_plural_form_function( $nplurals, $parenthesized );
@@ -110,7 +106,7 @@ class PluralFormsTest extends WP_UnitTestCase {
 				),
 			),
 			array(
-				// Ternary
+				// Ternary.
 				'n ? 1 : 2',
 				array(
 					-1 => 1,
@@ -120,7 +116,7 @@ class PluralFormsTest extends WP_UnitTestCase {
 				),
 			),
 			array(
-				// Comparison
+				// Comparison.
 				'n > 1 ? 1 : 2',
 				array(
 					-2 => 2,
@@ -163,9 +159,9 @@ class PluralFormsTest extends WP_UnitTestCase {
 	public function data_exceptions() {
 		return array(
 			array(
-				'n # 2',              // Invalid expression to parse
-				'Unknown symbol "#"', // Expected exception message
-				false,                // Whether to call the get() method or not
+				'n # 2',              // Invalid expression to parse.
+				'Unknown symbol "#"', // Expected exception message.
+				false,                // Whether to call the get() method or not.
 			),
 			array(
 				'n & 1',
@@ -217,7 +213,7 @@ class PluralFormsTest extends WP_UnitTestCase {
 				$plural_forms->get( 1 );
 			}
 		} catch ( Exception $e ) {
-			$this->assertEquals( $expected_exception, $e->getMessage() );
+			$this->assertSame( $expected_exception, $e->getMessage() );
 			return;
 		}
 
@@ -240,6 +236,6 @@ class PluralFormsTest extends WP_UnitTestCase {
 
 		$first  = $mock->get( 2 );
 		$second = $mock->get( 2 );
-		$this->assertEquals( $first, $second );
+		$this->assertSame( $first, $second );
 	}
 }
diff --git a/tests/pomo/po.php b/tests/pomo/po.php
index 0bd6f461dc..028c9ece9a 100644
--- a/tests/pomo/po.php
+++ b/tests/pomo/po.php
@@ -7,7 +7,7 @@ class Tests_POMO_PO extends WP_UnitTestCase {
 	function setUp() {
 		parent::setUp();
 		require_once ABSPATH . '/wp-includes/pomo/po.php';
-		// not so random wordpress.pot string -- multiple lines
+		// Not so random wordpress.pot string -- multiple lines.
 		$this->mail    = 'Your new WordPress blog has been successfully set up at:
 
 %1$s
@@ -43,53 +43,53 @@ http://wordpress.org/
 
 	function test_prepend_each_line() {
 		$po = new PO();
-		$this->assertEquals( 'baba_', $po->prepend_each_line( '', 'baba_' ) );
-		$this->assertEquals( 'baba_dyado', $po->prepend_each_line( 'dyado', 'baba_' ) );
-		$this->assertEquals( "# baba\n# dyado\n# \n", $po->prepend_each_line( "baba\ndyado\n\n", '# ' ) );
+		$this->assertSame( 'baba_', $po->prepend_each_line( '', 'baba_' ) );
+		$this->assertSame( 'baba_dyado', $po->prepend_each_line( 'dyado', 'baba_' ) );
+		$this->assertSame( "# baba\n# dyado\n# \n", $po->prepend_each_line( "baba\ndyado\n\n", '# ' ) );
 	}
 
 	function test_poify() {
 		$po = new PO();
-		//simple
-		$this->assertEquals( '"baba"', $po->poify( 'baba' ) );
-		//long word
-		$this->assertEquals( $this->po_a90, $po->poify( $this->a90 ) );
-		// tab
-		$this->assertEquals( '"ba\tba"', $po->poify( "ba\tba" ) );
-		// do not add leading empty string of one-line string ending on a newline
-		$this->assertEquals( '"\\\\a\\\\n\\n"', $po->poify( "\a\\n\n" ) );
-		// backslash
-		$this->assertEquals( '"ba\\\\ba"', $po->poify( 'ba\\ba' ) );
-		// random wordpress.pot string
+		// Simple.
+		$this->assertSame( '"baba"', $po->poify( 'baba' ) );
+		// Long word.
+		$this->assertSame( $this->po_a90, $po->poify( $this->a90 ) );
+		// Tab.
+		$this->assertSame( '"ba\tba"', $po->poify( "ba\tba" ) );
+		// Do not add leading empty string of one-line string ending on a newline.
+		$this->assertSame( '"\\\\a\\\\n\\n"', $po->poify( "\a\\n\n" ) );
+		// Backslash.
+		$this->assertSame( '"ba\\\\ba"', $po->poify( 'ba\\ba' ) );
+		// Random wordpress.pot string.
 		$src = 'Categories can be selectively converted to tags using the <a href="%s">category to tag converter</a>.';
-		$this->assertEquals( '"Categories can be selectively converted to tags using the <a href=\\"%s\\">category to tag converter</a>."', $po->poify( $src ) );
+		$this->assertSame( '"Categories can be selectively converted to tags using the <a href=\\"%s\\">category to tag converter</a>."', $po->poify( $src ) );
 
-		$this->assertEqualsIgnoreEOL( $this->po_mail, $po->poify( $this->mail ) );
+		$this->assertSameIgnoreEOL( $this->po_mail, $po->poify( $this->mail ) );
 	}
 
 	function test_unpoify() {
 		$po = new PO();
-		$this->assertEquals( 'baba', $po->unpoify( '"baba"' ) );
-		$this->assertEquals( "baba\ngugu", $po->unpoify( '"baba\n"' . "\t\t\t\n" . '"gugu"' ) );
-		$this->assertEquals( $this->a90, $po->unpoify( $this->po_a90 ) );
-		$this->assertEquals( '\\t\\n', $po->unpoify( '"\\\\t\\\\n"' ) );
-		// wordwrapped
-		$this->assertEquals( 'babadyado', $po->unpoify( "\"\"\n\"baba\"\n\"dyado\"" ) );
-		$this->assertEqualsIgnoreEOL( $this->mail, $po->unpoify( $this->po_mail ) );
+		$this->assertSame( 'baba', $po->unpoify( '"baba"' ) );
+		$this->assertSame( "baba\ngugu", $po->unpoify( '"baba\n"' . "\t\t\t\n" . '"gugu"' ) );
+		$this->assertSame( $this->a90, $po->unpoify( $this->po_a90 ) );
+		$this->assertSame( '\\t\\n', $po->unpoify( '"\\\\t\\\\n"' ) );
+		// Wordwrapped.
+		$this->assertSame( 'babadyado', $po->unpoify( "\"\"\n\"baba\"\n\"dyado\"" ) );
+		$this->assertSameIgnoreEOL( $this->mail, $po->unpoify( $this->po_mail ) );
 	}
 
 	function test_export_entry() {
 		$po    = new PO();
 		$entry = new Translation_Entry( array( 'singular' => 'baba' ) );
-		$this->assertEquals( "msgid \"baba\"\nmsgstr \"\"", $po->export_entry( $entry ) );
-		// plural
+		$this->assertSame( "msgid \"baba\"\nmsgstr \"\"", $po->export_entry( $entry ) );
+		// Plural.
 		$entry = new Translation_Entry(
 			array(
 				'singular' => 'baba',
 				'plural'   => 'babas',
 			)
 		);
-		$this->assertEqualsIgnoreEOL(
+		$this->assertSameIgnoreEOL(
 			'msgid "baba"
 msgid_plural "babas"
 msgstr[0] ""
@@ -102,7 +102,7 @@ msgstr[1] ""',
 				'translator_comments' => "baba\ndyado",
 			)
 		);
-		$this->assertEqualsIgnoreEOL(
+		$this->assertSameIgnoreEOL(
 			'#  baba
 #  dyado
 msgid "baba"
@@ -115,7 +115,7 @@ msgstr ""',
 				'extracted_comments' => 'baba',
 			)
 		);
-		$this->assertEqualsIgnoreEOL(
+		$this->assertSameIgnoreEOL(
 			'#. baba
 msgid "baba"
 msgstr ""',
@@ -128,7 +128,7 @@ msgstr ""',
 				'references'         => range( 1, 29 ),
 			)
 		);
-		$this->assertEqualsIgnoreEOL(
+		$this->assertSameIgnoreEOL(
 			'#. baba
 #: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28
 #: 29
@@ -142,7 +142,7 @@ msgstr ""',
 				'translations' => array(),
 			)
 		);
-		$this->assertEquals( "msgid \"baba\"\nmsgstr \"\"", $po->export_entry( $entry ) );
+		$this->assertSame( "msgid \"baba\"\nmsgstr \"\"", $po->export_entry( $entry ) );
 
 		$entry = new Translation_Entry(
 			array(
@@ -150,7 +150,7 @@ msgstr ""',
 				'translations' => array( '–∫—É–∫—É', '–±—É–∫—É' ),
 			)
 		);
-		$this->assertEquals( "msgid \"baba\"\nmsgstr \"–∫—É–∫—É\"", $po->export_entry( $entry ) );
+		$this->assertSame( "msgid \"baba\"\nmsgstr \"–∫—É–∫—É\"", $po->export_entry( $entry ) );
 
 		$entry = new Translation_Entry(
 			array(
@@ -159,7 +159,7 @@ msgstr ""',
 				'translations' => array( '–∫—É–∫—É–±—É–∫—É' ),
 			)
 		);
-		$this->assertEqualsIgnoreEOL(
+		$this->assertSameIgnoreEOL(
 			'msgid "baba"
 msgid_plural "babas"
 msgstr[0] "–∫—É–∫—É–±—É–∫—É"',
@@ -173,7 +173,7 @@ msgstr[0] "–∫—É–∫—É–±—É–∫—É"',
 				'translations' => array( '–∫—É–∫—É–±—É–∫—É', '–∫—É–∫—É—Ä—É–∫—É', '–±–∞–±–∞—è–≥–∞' ),
 			)
 		);
-		$this->assertEqualsIgnoreEOL(
+		$this->assertSameIgnoreEOL(
 			'msgid "baba"
 msgid_plural "babas"
 msgstr[0] "–∫—É–∫—É–±—É–∫—É"
@@ -181,7 +181,7 @@ msgstr[1] "–∫—É–∫—É—Ä—É–∫—É"
 msgstr[2] "–±–∞–±–∞—è–≥–∞"',
 			$po->export_entry( $entry )
 		);
-		// context
+		// Context.
 		$entry = new Translation_Entry(
 			array(
 				'context'      => 'ctxt',
@@ -191,7 +191,7 @@ msgstr[2] "–±–∞–±–∞—è–≥–∞"',
 				'flags'        => array( 'fuzzy', 'php-format' ),
 			)
 		);
-		$this->assertEqualsIgnoreEOL(
+		$this->assertSameIgnoreEOL(
 			'#, fuzzy, php-format
 msgctxt "ctxt"
 msgid "baba"
@@ -209,14 +209,14 @@ msgstr[2] "–±–∞–±–∞—è–≥–∞"',
 		$po     = new PO();
 		$po->add_entry( $entry );
 		$po->add_entry( $entry2 );
-		$this->assertEquals( "msgid \"baba\"\nmsgstr \"\"\n\nmsgid \"dyado\"\nmsgstr \"\"", $po->export_entries() );
+		$this->assertSame( "msgid \"baba\"\nmsgstr \"\"\n\nmsgid \"dyado\"\nmsgstr \"\"", $po->export_entries() );
 	}
 
 	function test_export_headers() {
 		$po = new PO();
 		$po->set_header( 'Project-Id-Version', 'WordPress 2.6-bleeding' );
 		$po->set_header( 'POT-Creation-Date', '2008-04-08 18:00+0000' );
-		$this->assertEquals( "msgid \"\"\nmsgstr \"\"\n\"Project-Id-Version: WordPress 2.6-bleeding\\n\"\n\"POT-Creation-Date: 2008-04-08 18:00+0000\\n\"", $po->export_headers() );
+		$this->assertSame( "msgid \"\"\nmsgstr \"\"\n\"Project-Id-Version: WordPress 2.6-bleeding\\n\"\n\"POT-Creation-Date: 2008-04-08 18:00+0000\\n\"", $po->export_headers() );
 	}
 
 	function test_export() {
@@ -227,8 +227,8 @@ msgstr[2] "–±–∞–±–∞—è–≥–∞"',
 		$po->set_header( 'POT-Creation-Date', '2008-04-08 18:00+0000' );
 		$po->add_entry( $entry );
 		$po->add_entry( $entry2 );
-		$this->assertEquals( "msgid \"baba\"\nmsgstr \"\"\n\nmsgid \"dyado\"\nmsgstr \"\"", $po->export( false ) );
-		$this->assertEquals( "msgid \"\"\nmsgstr \"\"\n\"Project-Id-Version: WordPress 2.6-bleeding\\n\"\n\"POT-Creation-Date: 2008-04-08 18:00+0000\\n\"\n\nmsgid \"baba\"\nmsgstr \"\"\n\nmsgid \"dyado\"\nmsgstr \"\"", $po->export() );
+		$this->assertSame( "msgid \"baba\"\nmsgstr \"\"\n\nmsgid \"dyado\"\nmsgstr \"\"", $po->export( false ) );
+		$this->assertSame( "msgid \"\"\nmsgstr \"\"\n\"Project-Id-Version: WordPress 2.6-bleeding\\n\"\n\"POT-Creation-Date: 2008-04-08 18:00+0000\\n\"\n\nmsgid \"baba\"\nmsgstr \"\"\n\nmsgid \"dyado\"\nmsgstr \"\"", $po->export() );
 	}
 
 
@@ -243,19 +243,19 @@ msgstr[2] "–±–∞–±–∞—è–≥–∞"',
 
 		$temp_fn = $this->temp_filename();
 		$po->export_to_file( $temp_fn, false );
-		$this->assertEquals( $po->export( false ), file_get_contents( $temp_fn ) );
+		$this->assertSame( $po->export( false ), file_get_contents( $temp_fn ) );
 
 		$temp_fn2 = $this->temp_filename();
 		$po->export_to_file( $temp_fn2 );
-		$this->assertEquals( $po->export(), file_get_contents( $temp_fn2 ) );
+		$this->assertSame( $po->export(), file_get_contents( $temp_fn2 ) );
 	}
 
 	function test_import_from_file() {
 		$po  = new PO();
 		$res = $po->import_from_file( DIR_TESTDATA . '/pomo/simple.po' );
-		$this->assertEquals( true, $res );
+		$this->assertTrue( $res );
 
-		$this->assertEquals(
+		$this->assertSame(
 			array(
 				'Project-Id-Version' => 'WordPress 2.6-bleeding',
 				'Plural-Forms'       => 'nplurals=2; plural=n != 1;',
@@ -317,9 +317,9 @@ msgstr[2] "–±–∞–±–∞—è–≥–∞"',
 	function test_import_from_file_with_windows_line_endings_should_work_as_with_unix_line_endings() {
 		$po = new PO();
 		$this->assertTrue( $po->import_from_file( DIR_TESTDATA . '/pomo/windows-line-endings.po' ) );
-		$this->assertEquals( 1, count( $po->entries ) );
+		$this->assertSame( 1, count( $po->entries ) );
 	}
 
-	//TODO: add tests for bad files
+	// TODO: Add tests for bad files.
 }
 
diff --git a/tests/pomo/translationEntry.php b/tests/pomo/translationEntry.php
index 9a8ba46b53..60485cd8aa 100644
--- a/tests/pomo/translationEntry.php
+++ b/tests/pomo/translationEntry.php
@@ -6,12 +6,12 @@
 class Tests_POMO_TranslationEntry extends WP_UnitTestCase {
 
 	function test_create_entry() {
-		// no singular => empty object
+		// No singular => empty object.
 		$entry = new Translation_Entry();
 		$this->assertNull( $entry->singular );
 		$this->assertNull( $entry->plural );
 		$this->assertFalse( $entry->is_plural );
-		// args -> members
+		// args -> members.
 		$entry = new Translation_Entry(
 			array(
 				'singular'     => 'baba',
@@ -21,12 +21,12 @@ class Tests_POMO_TranslationEntry extends WP_UnitTestCase {
 				'flags'        => 'baba',
 			)
 		);
-		$this->assertEquals( 'baba', $entry->singular );
-		$this->assertEquals( 'babas', $entry->plural );
+		$this->assertSame( 'baba', $entry->singular );
+		$this->assertSame( 'babas', $entry->plural );
 		$this->assertTrue( $entry->is_plural );
-		$this->assertEquals( array( '–±–∞–±–∞', '–±–∞–±–∏' ), $entry->translations );
-		$this->assertEquals( array(), $entry->references );
-		$this->assertEquals( array(), $entry->flags );
+		$this->assertSame( array( '–±–∞–±–∞', '–±–∞–±–∏' ), $entry->translations );
+		$this->assertSame( array(), $entry->references );
+		$this->assertSame( array(), $entry->flags );
 	}
 
 	function test_key() {
@@ -44,7 +44,7 @@ class Tests_POMO_TranslationEntry extends WP_UnitTestCase {
 				'plural'   => 'babas',
 			)
 		);
-		$this->assertEquals( $entry_baba->key(), $entry_baba_plural->key() );
+		$this->assertSame( $entry_baba->key(), $entry_baba_plural->key() );
 		$this->assertNotEquals( $entry_baba->key(), $entry_baba_ctxt->key() );
 		$this->assertNotEquals( $entry_baba_plural->key(), $entry_baba_ctxt->key() );
 		$this->assertNotEquals( $entry_baba->key(), $entry_dyado->key() );
diff --git a/tests/pomo/translations.php b/tests/pomo/translations.php
index 36b12fbf7b..daa3f630b2 100644
--- a/tests/pomo/translations.php
+++ b/tests/pomo/translations.php
@@ -11,23 +11,23 @@ class Tests_POMO_Translations extends WP_UnitTestCase {
 		$empty  = new Translation_Entry();
 		$po     = new Translations();
 		$po->add_entry( $entry );
-		$this->assertEquals( array( $entry->key() => $entry ), $po->entries );
-		// add the same entry more than once
-		// we do not need to test proper key generation here, see test_key()
+		$this->assertSame( array( $entry->key() => $entry ), $po->entries );
+		// Add the same entry more than once.
+		// We do not need to test proper key generation here, see test_key().
 		$po->add_entry( $entry );
 		$po->add_entry( $entry );
-		$this->assertEquals( array( $entry->key() => $entry ), $po->entries );
+		$this->assertSame( array( $entry->key() => $entry ), $po->entries );
 		$po->add_entry( $entry2 );
-		$this->assertEquals(
+		$this->assertSame(
 			array(
 				$entry->key()  => $entry,
 				$entry2->key() => $entry2,
 			),
 			$po->entries
 		);
-		// add empty entry
-		$this->assertEquals( false, $po->add_entry( $empty ) );
-		$this->assertEquals(
+		// Add empty entry.
+		$this->assertFalse( $po->add_entry( $empty ) );
+		$this->assertSame(
 			array(
 				$entry->key()  => $entry,
 				$entry2->key() => $entry2,
@@ -35,11 +35,11 @@ class Tests_POMO_Translations extends WP_UnitTestCase {
 			$po->entries
 		);
 
-		// give add_entry() the arguments and let it create the entry itself
+		// Give add_entry() the arguments and let it create the entry itself.
 		$po = new Translations();
 		$po->add_entry( array( 'singular' => 'baba' ) );
 		$entries = array_values( $po->entries );
-		$this->assertEquals( $entry->key(), $entries[0]->key() );
+		$this->assertSame( $entry->key(), $entries[0]->key() );
 	}
 
 	function test_translate() {
@@ -59,10 +59,10 @@ class Tests_POMO_Translations extends WP_UnitTestCase {
 		$domain = new Translations();
 		$domain->add_entry( $entry1 );
 		$domain->add_entry( $entry2 );
-		$this->assertEquals( 'babax', $domain->translate( 'baba' ) );
-		$this->assertEquals( 'babay', $domain->translate( 'baba', 'x' ) );
-		$this->assertEquals( 'baba', $domain->translate( 'baba', 'y' ) );
-		$this->assertEquals( 'babaz', $domain->translate( 'babaz' ) );
+		$this->assertSame( 'babax', $domain->translate( 'baba' ) );
+		$this->assertSame( 'babay', $domain->translate( 'baba', 'x' ) );
+		$this->assertSame( 'baba', $domain->translate( 'baba', 'y' ) );
+		$this->assertSame( 'babaz', $domain->translate( 'babaz' ) );
 	}
 
 	function test_translate_plural() {
@@ -91,18 +91,18 @@ class Tests_POMO_Translations extends WP_UnitTestCase {
 		$domain->add_entry( $entry_incomplete );
 		$domain->add_entry( $entry_toomany );
 		$domain->add_entry( $entry_2 );
-		$this->assertEquals( 'other', $domain->translate_plural( 'other', 'others', 1 ) );
-		$this->assertEquals( 'others', $domain->translate_plural( 'other', 'others', 111 ) );
-		// too few translations + cont logic
-		$this->assertEquals( 'babas', $domain->translate_plural( 'baba', 'babas', 2 ) );
-		$this->assertEquals( 'babas', $domain->translate_plural( 'baba', 'babas', 0 ) );
-		$this->assertEquals( 'babas', $domain->translate_plural( 'baba', 'babas', -1 ) );
-		$this->assertEquals( 'babas', $domain->translate_plural( 'baba', 'babas', 999 ) );
-		// proper
-		$this->assertEquals( 'dyadox', $domain->translate_plural( 'dyado', 'dyados', 1 ) );
-		$this->assertEquals( 'dyadoy', $domain->translate_plural( 'dyado', 'dyados', 0 ) );
-		$this->assertEquals( 'dyadoy', $domain->translate_plural( 'dyado', 'dyados', 18881 ) );
-		$this->assertEquals( 'dyadoy', $domain->translate_plural( 'dyado', 'dyados', -18881 ) );
+		$this->assertSame( 'other', $domain->translate_plural( 'other', 'others', 1 ) );
+		$this->assertSame( 'others', $domain->translate_plural( 'other', 'others', 111 ) );
+		// Too few translations + cont logic.
+		$this->assertSame( 'babas', $domain->translate_plural( 'baba', 'babas', 2 ) );
+		$this->assertSame( 'babas', $domain->translate_plural( 'baba', 'babas', 0 ) );
+		$this->assertSame( 'babas', $domain->translate_plural( 'baba', 'babas', -1 ) );
+		$this->assertSame( 'babas', $domain->translate_plural( 'baba', 'babas', 999 ) );
+		// Proper.
+		$this->assertSame( 'dyadox', $domain->translate_plural( 'dyado', 'dyados', 1 ) );
+		$this->assertSame( 'dyadoy', $domain->translate_plural( 'dyado', 'dyados', 0 ) );
+		$this->assertSame( 'dyadoy', $domain->translate_plural( 'dyado', 'dyados', 18881 ) );
+		$this->assertSame( 'dyadoy', $domain->translate_plural( 'dyado', 'dyados', -18881 ) );
 	}
 
 	function test_digit_and_merge() {
@@ -122,9 +122,9 @@ class Tests_POMO_Translations extends WP_UnitTestCase {
 		$domain->add_entry( $entry_digit_1 );
 		$domain->add_entry( $entry_digit_2 );
 		$dummy_translation = new Translations;
-		$this->assertEquals( '1', $domain->translate( '1' ) );
+		$this->assertSame( '1', $domain->translate( '1' ) );
 		$domain->merge_with( $dummy_translation );
-		$this->assertEquals( '1', $domain->translate( '1' ) );
+		$this->assertSame( '1', $domain->translate( '1' ) );
 	}
 
 }
diff --git a/tests/post.php b/tests/post.php
index 39a8bae14a..bacf9b23c5 100644
--- a/tests/post.php
+++ b/tests/post.php
@@ -39,12 +39,16 @@ class Tests_Post extends WP_UnitTestCase {
 		$this->post_ids = array();
 	}
 
-	// helper function: return the timestamp(s) of cron jobs for the specified hook and post
+	/**
+	 * Helper function: return the timestamp(s) of cron jobs for the specified hook and post.
+	 */
 	function _next_schedule_for_post( $hook, $id ) {
 		return wp_next_scheduled( 'publish_future_post', array( 0 => intval( $id ) ) );
 	}
 
-	// helper function, unsets current user globally
+	/**
+	 * Helper function, unsets current user globally.
+	 */
 	function _unset_current_user() {
 		global $current_user, $user_ID;
 
@@ -52,7 +56,9 @@ class Tests_Post extends WP_UnitTestCase {
 		$user_ID      = null;
 	}
 
-	// test simple valid behavior: insert and get a post
+	/**
+	 * Test simple valid behavior: insert and get a post.
+	 */
 	function test_vb_insert_get_delete() {
 		register_post_type( 'cpt', array( 'taxonomies' => array( 'post_tag', 'ctax' ) ) );
 		register_taxonomy( 'ctax', 'cpt' );
@@ -71,33 +77,33 @@ class Tests_Post extends WP_UnitTestCase {
 				'post_type'    => $post_type,
 			);
 
-			// insert a post and make sure the ID is ok
+			// Insert a post and make sure the ID is OK.
 			$id = wp_insert_post( $post );
 			$this->assertTrue( is_numeric( $id ) );
 			$this->assertTrue( $id > 0 );
 
-			// fetch the post and make sure it matches
+			// Fetch the post and make sure it matches.
 			$out = get_post( $id );
 
-			$this->assertEquals( $post['post_content'], $out->post_content );
-			$this->assertEquals( $post['post_title'], $out->post_title );
-			$this->assertEquals( $post['post_status'], $out->post_status );
+			$this->assertSame( $post['post_content'], $out->post_content );
+			$this->assertSame( $post['post_title'], $out->post_title );
+			$this->assertSame( $post['post_status'], $out->post_status );
 			$this->assertEquals( $post['post_author'], $out->post_author );
 
-			// test cache state
+			// Test cache state.
 			$pcache = wp_cache_get( $id, 'posts' );
 			$this->assertInstanceOf( 'stdClass', $pcache );
-			$this->assertEquals( $id, $pcache->ID );
+			$this->assertSame( $id, $pcache->ID );
 
 			update_object_term_cache( $id, $post_type );
 			$tcache = wp_cache_get( $id, 'post_tag_relationships' );
 			$this->assertInternalType( 'array', $tcache );
-			$this->assertEquals( 2, count( $tcache ) );
+			$this->assertSame( 2, count( $tcache ) );
 
 			$tcache = wp_cache_get( $id, 'ctax_relationships' );
 			if ( 'cpt' === $post_type ) {
 				$this->assertInternalType( 'array', $tcache );
-				$this->assertEquals( 2, count( $tcache ) );
+				$this->assertSame( 2, count( $tcache ) );
 			} else {
 				$this->assertFalse( $tcache );
 			}
@@ -111,9 +117,10 @@ class Tests_Post extends WP_UnitTestCase {
 		$GLOBALS['wp_taxonomies']['post_tag']->object_type = array( 'post' );
 	}
 
+	/**
+	 * Insert a post with a future date, and make sure the status and cron schedule are correct.
+	 */
 	function test_vb_insert_future() {
-		// insert a post with a future date, and make sure the status and cron schedule are correct
-
 		$future_date = strtotime( '+1 day' );
 
 		$post = array(
@@ -124,30 +131,31 @@ class Tests_Post extends WP_UnitTestCase {
 			'post_date'    => strftime( '%Y-%m-%d %H:%M:%S', $future_date ),
 		);
 
-		// insert a post and make sure the ID is ok
+		// Insert a post and make sure the ID is OK.
 		$id               = wp_insert_post( $post );
 		$this->post_ids[] = $id;
-		#dmp(_get_cron_array());
+		// dmp( _get_cron_array() );
 		$this->assertTrue( is_numeric( $id ) );
 		$this->assertTrue( $id > 0 );
 
-		// fetch the post and make sure it matches
+		// Fetch the post and make sure it matches.
 		$out = get_post( $id );
 
-		$this->assertEquals( $post['post_content'], $out->post_content );
-		$this->assertEquals( $post['post_title'], $out->post_title );
-		$this->assertEquals( 'future', $out->post_status );
+		$this->assertSame( $post['post_content'], $out->post_content );
+		$this->assertSame( $post['post_title'], $out->post_title );
+		$this->assertSame( 'future', $out->post_status );
 		$this->assertEquals( $post['post_author'], $out->post_author );
-		$this->assertEquals( $post['post_date'], $out->post_date );
+		$this->assertSame( $post['post_date'], $out->post_date );
 
-		// there should be a publish_future_post hook scheduled on the future date
-		$this->assertEquals( $future_date, $this->_next_schedule_for_post( 'publish_future_post', $id ) );
+		// There should be a publish_future_post hook scheduled on the future date.
+		$this->assertSame( $future_date, $this->_next_schedule_for_post( 'publish_future_post', $id ) );
 	}
 
+	/**
+	 * Insert a post with a future date, and make sure the status and cron schedule are correct.
+	 */
 	function test_vb_insert_future_over_dst() {
-		// insert a post with a future date, and make sure the status and cron schedule are correct
-
-		// Some magic days - one dst one not
+		// Some magic days - one DST one not.
 		$future_date_1 = strtotime( 'June 21st +1 year' );
 		$future_date_2 = strtotime( 'Jan 11th +1 year' );
 
@@ -159,38 +167,40 @@ class Tests_Post extends WP_UnitTestCase {
 			'post_date'    => strftime( '%Y-%m-%d %H:%M:%S', $future_date_1 ),
 		);
 
-		// insert a post and make sure the ID is ok
+		// Insert a post and make sure the ID is OK.
 		$id               = wp_insert_post( $post );
 		$this->post_ids[] = $id;
 
-		// fetch the post and make sure has the correct date and status
+		// Fetch the post and make sure has the correct date and status.
 		$out = get_post( $id );
-		$this->assertEquals( 'future', $out->post_status );
-		$this->assertEquals( $post['post_date'], $out->post_date );
+		$this->assertSame( 'future', $out->post_status );
+		$this->assertSame( $post['post_date'], $out->post_date );
 
-		// check that there's a publish_future_post job scheduled at the right time
-		$this->assertEquals( $future_date_1, $this->_next_schedule_for_post( 'publish_future_post', $id ) );
+		// Check that there's a publish_future_post job scheduled at the right time.
+		$this->assertSame( $future_date_1, $this->_next_schedule_for_post( 'publish_future_post', $id ) );
 
-		// now save it again with a date further in the future
+		// Now save it again with a date further in the future.
 
 		$post['ID']            = $id;
 		$post['post_date']     = strftime( '%Y-%m-%d %H:%M:%S', $future_date_2 );
 		$post['post_date_gmt'] = null;
 		wp_update_post( $post );
 
-		// fetch the post again and make sure it has the new post_date
+		// Fetch the post again and make sure it has the new post_date.
 		$out = get_post( $id );
-		$this->assertEquals( 'future', $out->post_status );
-		$this->assertEquals( $post['post_date'], $out->post_date );
+		$this->assertSame( 'future', $out->post_status );
+		$this->assertSame( $post['post_date'], $out->post_date );
 
-		// and the correct date on the cron job
-		$this->assertEquals( $future_date_2, $this->_next_schedule_for_post( 'publish_future_post', $id ) );
+		// And the correct date on the cron job.
+		$this->assertSame( $future_date_2, $this->_next_schedule_for_post( 'publish_future_post', $id ) );
 	}
 
+	/**
+	 * Future post bug: posts get published at the wrong time if you edit the timestamp.
+	 *
+	 * @ticket 4710
+	 */
 	function test_vb_insert_future_edit_bug() {
-		// future post bug: posts get published at the wrong time if you edit the timestamp
-		// https://core.trac.wordpress.org/ticket/4710
-
 		$future_date_1 = strtotime( '+1 day' );
 		$future_date_2 = strtotime( '+2 day' );
 
@@ -202,37 +212,38 @@ class Tests_Post extends WP_UnitTestCase {
 			'post_date'    => strftime( '%Y-%m-%d %H:%M:%S', $future_date_1 ),
 		);
 
-		// insert a post and make sure the ID is ok
+		// Insert a post and make sure the ID is OK.
 		$id               = wp_insert_post( $post );
 		$this->post_ids[] = $id;
 
-		// fetch the post and make sure has the correct date and status
+		// Fetch the post and make sure has the correct date and status.
 		$out = get_post( $id );
-		$this->assertEquals( 'future', $out->post_status );
-		$this->assertEquals( $post['post_date'], $out->post_date );
+		$this->assertSame( 'future', $out->post_status );
+		$this->assertSame( $post['post_date'], $out->post_date );
 
-		// check that there's a publish_future_post job scheduled at the right time
-		$this->assertEquals( $future_date_1, $this->_next_schedule_for_post( 'publish_future_post', $id ) );
+		// Check that there's a publish_future_post job scheduled at the right time.
+		$this->assertSame( $future_date_1, $this->_next_schedule_for_post( 'publish_future_post', $id ) );
 
-		// now save it again with a date further in the future
+		// Now save it again with a date further in the future.
 
 		$post['ID']            = $id;
 		$post['post_date']     = strftime( '%Y-%m-%d %H:%M:%S', $future_date_2 );
 		$post['post_date_gmt'] = null;
 		wp_update_post( $post );
 
-		// fetch the post again and make sure it has the new post_date
+		// Fetch the post again and make sure it has the new post_date.
 		$out = get_post( $id );
-		$this->assertEquals( 'future', $out->post_status );
-		$this->assertEquals( $post['post_date'], $out->post_date );
+		$this->assertSame( 'future', $out->post_status );
+		$this->assertSame( $post['post_date'], $out->post_date );
 
-		// and the correct date on the cron job
-		$this->assertEquals( $future_date_2, $this->_next_schedule_for_post( 'publish_future_post', $id ) );
+		// And the correct date on the cron job.
+		$this->assertSame( $future_date_2, $this->_next_schedule_for_post( 'publish_future_post', $id ) );
 	}
 
+	/**
+	 * Insert a draft post with a future date, and make sure no cron schedule is set.
+	 */
 	function test_vb_insert_future_draft() {
-		// insert a draft post with a future date, and make sure no cron schedule is set
-
 		$future_date = strtotime( '+1 day' );
 
 		$post = array(
@@ -243,29 +254,31 @@ class Tests_Post extends WP_UnitTestCase {
 			'post_date'    => strftime( '%Y-%m-%d %H:%M:%S', $future_date ),
 		);
 
-		// insert a post and make sure the ID is ok
+		// Insert a post and make sure the ID is OK.
 		$id               = wp_insert_post( $post );
 		$this->post_ids[] = $id;
-		#dmp(_get_cron_array());
+		// dmp( _get_cron_array() );
 		$this->assertTrue( is_numeric( $id ) );
 		$this->assertTrue( $id > 0 );
 
-		// fetch the post and make sure it matches
+		// Fetch the post and make sure it matches.
 		$out = get_post( $id );
 
-		$this->assertEquals( $post['post_content'], $out->post_content );
-		$this->assertEquals( $post['post_title'], $out->post_title );
-		$this->assertEquals( 'draft', $out->post_status );
+		$this->assertSame( $post['post_content'], $out->post_content );
+		$this->assertSame( $post['post_title'], $out->post_title );
+		$this->assertSame( 'draft', $out->post_status );
 		$this->assertEquals( $post['post_author'], $out->post_author );
-		$this->assertEquals( $post['post_date'], $out->post_date );
+		$this->assertSame( $post['post_date'], $out->post_date );
 
-		// there should be a publish_future_post hook scheduled on the future date
-		$this->assertEquals( false, $this->_next_schedule_for_post( 'publish_future_post', $id ) );
+		// There should be a publish_future_post hook scheduled on the future date.
+		$this->assertFalse( $this->_next_schedule_for_post( 'publish_future_post', $id ) );
 
 	}
 
+	/**
+	 * Insert a future post, then edit and change it to draft, and make sure cron gets it right.
+	 */
 	function test_vb_insert_future_change_to_draft() {
-		// insert a future post, then edit and change it to draft, and make sure cron gets it right
 		$future_date_1 = strtotime( '+1 day' );
 
 		$post = array(
@@ -276,35 +289,37 @@ class Tests_Post extends WP_UnitTestCase {
 			'post_date'    => strftime( '%Y-%m-%d %H:%M:%S', $future_date_1 ),
 		);
 
-		// insert a post and make sure the ID is ok
+		// Insert a post and make sure the ID is OK.
 		$id               = wp_insert_post( $post );
 		$this->post_ids[] = $id;
 
-		// fetch the post and make sure has the correct date and status
+		// Fetch the post and make sure has the correct date and status.
 		$out = get_post( $id );
-		$this->assertEquals( 'future', $out->post_status );
-		$this->assertEquals( $post['post_date'], $out->post_date );
+		$this->assertSame( 'future', $out->post_status );
+		$this->assertSame( $post['post_date'], $out->post_date );
 
-		// check that there's a publish_future_post job scheduled at the right time
-		$this->assertEquals( $future_date_1, $this->_next_schedule_for_post( 'publish_future_post', $id ) );
+		// Check that there's a publish_future_post job scheduled at the right time.
+		$this->assertSame( $future_date_1, $this->_next_schedule_for_post( 'publish_future_post', $id ) );
 
-		// now save it again with status set to draft
+		// Now save it again with status set to draft.
 
 		$post['ID']          = $id;
 		$post['post_status'] = 'draft';
 		wp_update_post( $post );
 
-		// fetch the post again and make sure it has the new post_date
+		// Fetch the post again and make sure it has the new post_date.
 		$out = get_post( $id );
-		$this->assertEquals( 'draft', $out->post_status );
-		$this->assertEquals( $post['post_date'], $out->post_date );
+		$this->assertSame( 'draft', $out->post_status );
+		$this->assertSame( $post['post_date'], $out->post_date );
 
-		// and the correct date on the cron job
-		$this->assertEquals( false, $this->_next_schedule_for_post( 'publish_future_post', $id ) );
+		// And the correct date on the cron job.
+		$this->assertFalse( $this->_next_schedule_for_post( 'publish_future_post', $id ) );
 	}
 
+	/**
+	 * Insert a future post, then edit and change the status, and make sure cron gets it right.
+	 */
 	function test_vb_insert_future_change_status() {
-		// insert a future post, then edit and change the status, and make sure cron gets it right
 		$future_date_1 = strtotime( '+1 day' );
 
 		$statuses = array( 'draft', 'static', 'object', 'attachment', 'inherit', 'pending' );
@@ -318,37 +333,38 @@ class Tests_Post extends WP_UnitTestCase {
 				'post_date'    => strftime( '%Y-%m-%d %H:%M:%S', $future_date_1 ),
 			);
 
-			// insert a post and make sure the ID is ok
+			// Insert a post and make sure the ID is OK.
 			$id               = wp_insert_post( $post );
 			$this->post_ids[] = $id;
 
-			// fetch the post and make sure has the correct date and status
+			// Fetch the post and make sure has the correct date and status.
 			$out = get_post( $id );
-			$this->assertEquals( 'future', $out->post_status );
-			$this->assertEquals( $post['post_date'], $out->post_date );
+			$this->assertSame( 'future', $out->post_status );
+			$this->assertSame( $post['post_date'], $out->post_date );
 
-			// check that there's a publish_future_post job scheduled at the right time
-			$this->assertEquals( $future_date_1, $this->_next_schedule_for_post( 'publish_future_post', $id ) );
+			// Check that there's a publish_future_post job scheduled at the right time.
+			$this->assertSame( $future_date_1, $this->_next_schedule_for_post( 'publish_future_post', $id ) );
 
-			// now save it again with status changed
+			// Now save it again with status changed.
 
 			$post['ID']          = $id;
 			$post['post_status'] = $status;
 			wp_update_post( $post );
 
-			// fetch the post again and make sure it has the new post_date
+			// Fetch the post again and make sure it has the new post_date.
 			$out = get_post( $id );
-			$this->assertEquals( $status, $out->post_status );
-			$this->assertEquals( $post['post_date'], $out->post_date );
+			$this->assertSame( $status, $out->post_status );
+			$this->assertSame( $post['post_date'], $out->post_date );
 
-			// and the correct date on the cron job
-			$this->assertEquals( false, $this->_next_schedule_for_post( 'publish_future_post', $id ) );
+			// And the correct date on the cron job.
+			$this->assertFalse( $this->_next_schedule_for_post( 'publish_future_post', $id ) );
 		}
 	}
 
+	/**
+	 * Insert a draft post with a future date, and make sure no cron schedule is set.
+	 */
 	function test_vb_insert_future_private() {
-		// insert a draft post with a future date, and make sure no cron schedule is set
-
 		$future_date = strtotime( '+1 day' );
 
 		$post = array(
@@ -359,32 +375,32 @@ class Tests_Post extends WP_UnitTestCase {
 			'post_date'    => strftime( '%Y-%m-%d %H:%M:%S', $future_date ),
 		);
 
-		// insert a post and make sure the ID is ok
+		// Insert a post and make sure the ID is OK.
 		$id               = wp_insert_post( $post );
 		$this->post_ids[] = $id;
-		#dmp(_get_cron_array());
+		// dmp( _get_cron_array() );
 		$this->assertTrue( is_numeric( $id ) );
 		$this->assertTrue( $id > 0 );
 
-		// fetch the post and make sure it matches
+		// Fetch the post and make sure it matches.
 		$out = get_post( $id );
 
-		$this->assertEquals( $post['post_content'], $out->post_content );
-		$this->assertEquals( $post['post_title'], $out->post_title );
-		$this->assertEquals( 'private', $out->post_status );
+		$this->assertSame( $post['post_content'], $out->post_content );
+		$this->assertSame( $post['post_title'], $out->post_title );
+		$this->assertSame( 'private', $out->post_status );
 		$this->assertEquals( $post['post_author'], $out->post_author );
-		$this->assertEquals( $post['post_date'], $out->post_date );
+		$this->assertSame( $post['post_date'], $out->post_date );
 
-		// there should be a publish_future_post hook scheduled on the future date
-		$this->assertEquals( false, $this->_next_schedule_for_post( 'publish_future_post', $id ) );
+		// There should be a publish_future_post hook scheduled on the future date.
+		$this->assertFalse( $this->_next_schedule_for_post( 'publish_future_post', $id ) );
 	}
 
 	/**
+	 * Insert a post with an invalid date, make sure it fails.
+	 *
 	 * @ticket 17180
 	 */
 	function test_vb_insert_invalid_date() {
-		// insert a post with an invalid date, make sure it fails
-
 		$post = array(
 			'post_author'  => self::$editor_id,
 			'post_status'  => 'public',
@@ -393,17 +409,19 @@ class Tests_Post extends WP_UnitTestCase {
 			'post_date'    => '2012-02-30 00:00:00',
 		);
 
-		// Test both return paths with or without WP_Error
+		// Test both return paths with or without WP_Error.
 		$insert_post = wp_insert_post( $post, true );
 		$this->assertWPError( $insert_post );
-		$this->assertEquals( 'invalid_date', $insert_post->get_error_code() );
+		$this->assertSame( 'invalid_date', $insert_post->get_error_code() );
 
 		$insert_post = wp_insert_post( $post );
-		$this->assertEquals( 0, $insert_post );
+		$this->assertSame( 0, $insert_post );
 	}
 
+	/**
+	 * Insert a future post, then edit and change it to private, and make sure cron gets it right.
+	 */
 	function test_vb_insert_future_change_to_private() {
-		// insert a future post, then edit and change it to private, and make sure cron gets it right
 		$future_date_1 = strtotime( '+1 day' );
 
 		$post = array(
@@ -414,31 +432,31 @@ class Tests_Post extends WP_UnitTestCase {
 			'post_date'    => strftime( '%Y-%m-%d %H:%M:%S', $future_date_1 ),
 		);
 
-		// insert a post and make sure the ID is ok
+		// Insert a post and make sure the ID is OK.
 		$id               = wp_insert_post( $post );
 		$this->post_ids[] = $id;
 
-		// fetch the post and make sure has the correct date and status
+		// Fetch the post and make sure has the correct date and status.
 		$out = get_post( $id );
-		$this->assertEquals( 'future', $out->post_status );
-		$this->assertEquals( $post['post_date'], $out->post_date );
+		$this->assertSame( 'future', $out->post_status );
+		$this->assertSame( $post['post_date'], $out->post_date );
 
-		// check that there's a publish_future_post job scheduled at the right time
-		$this->assertEquals( $future_date_1, $this->_next_schedule_for_post( 'publish_future_post', $id ) );
+		// Check that there's a publish_future_post job scheduled at the right time.
+		$this->assertSame( $future_date_1, $this->_next_schedule_for_post( 'publish_future_post', $id ) );
 
-		// now save it again with status set to draft
+		// Now save it again with status set to draft.
 
 		$post['ID']          = $id;
 		$post['post_status'] = 'private';
 		wp_update_post( $post );
 
-		// fetch the post again and make sure it has the new post_date
+		// Fetch the post again and make sure it has the new post_date.
 		$out = get_post( $id );
-		$this->assertEquals( 'private', $out->post_status );
-		$this->assertEquals( $post['post_date'], $out->post_date );
+		$this->assertSame( 'private', $out->post_status );
+		$this->assertSame( $post['post_date'], $out->post_date );
 
-		// and the correct date on the cron job
-		$this->assertEquals( false, $this->_next_schedule_for_post( 'publish_future_post', $id ) );
+		// And the correct date on the cron job.
+		$this->assertFalse( $this->_next_schedule_for_post( 'publish_future_post', $id ) );
 	}
 
 	/**
@@ -460,7 +478,7 @@ class Tests_Post extends WP_UnitTestCase {
 
 		$this->set_permalink_structure();
 
-		$this->assertEquals( "$p-2", $post->post_name );
+		$this->assertSame( "$p-2", $post->post_name );
 	}
 
 	/**
@@ -500,15 +518,16 @@ class Tests_Post extends WP_UnitTestCase {
 			)
 		);
 
-		$this->assertEquals( 'world', get_post_meta( $post_id, 'hello', true ) );
-		$this->assertEquals( 'bar', get_post_meta( $post_id, 'foo', true ) );
+		$this->assertSame( 'world', get_post_meta( $post_id, 'hello', true ) );
+		$this->assertSame( 'bar', get_post_meta( $post_id, 'foo', true ) );
 	}
 
 	/**
+	 * "When I delete a future post using wp_delete_post( $post->ID ) it does not update the cron correctly."
+	 *
 	 * @ticket 5364
 	 */
 	function test_delete_future_post_cron() {
-		// "When I delete a future post using wp_delete_post($post->ID) it does not update the cron correctly."
 		$future_date = strtotime( '+1 day' );
 
 		$post = array(
@@ -519,26 +538,27 @@ class Tests_Post extends WP_UnitTestCase {
 			'post_date'    => strftime( '%Y-%m-%d %H:%M:%S', $future_date ),
 		);
 
-		// insert a post and make sure the ID is ok
+		// Insert a post and make sure the ID is OK.
 		$id               = wp_insert_post( $post );
 		$this->post_ids[] = $id;
 
-		// check that there's a publish_future_post job scheduled at the right time
-		$this->assertEquals( $future_date, $this->_next_schedule_for_post( 'publish_future_post', $id ) );
+		// Check that there's a publish_future_post job scheduled at the right time.
+		$this->assertSame( $future_date, $this->_next_schedule_for_post( 'publish_future_post', $id ) );
 
-		// now delete the post and make sure the cron entry is removed
+		// Now delete the post and make sure the cron entry is removed.
 		wp_delete_post( $id );
 
 		$this->assertFalse( $this->_next_schedule_for_post( 'publish_future_post', $id ) );
 	}
 
 	/**
+	 * Bug: permalink doesn't work if post title is empty.
+	 *
+	 * Might only fail if the post ID is greater than four characters.
+	 *
 	 * @ticket 5305
 	 */
 	function test_permalink_without_title() {
-		// bug: permalink doesn't work if post title is empty
-		// might only fail if the post ID is greater than four characters
-
 		$this->set_permalink_structure( '/%year%/%monthnum%/%day%/%postname%/' );
 
 		$post = array(
@@ -549,66 +569,26 @@ class Tests_Post extends WP_UnitTestCase {
 			'post_date'    => '2007-10-31 06:15:00',
 		);
 
-		// insert a post and make sure the ID is ok
+		// Insert a post and make sure the ID is OK.
 		$id               = wp_insert_post( $post );
 		$this->post_ids[] = $id;
 
 		$plink = get_permalink( $id );
 
-		// permalink should include the post ID at the end
-		$this->assertEquals( get_option( 'siteurl' ) . '/2007/10/31/' . $id . '/', $plink );
-	}
-
-	/**
-	 * @ticket 15665
-	 */
-	function test_get_page_by_path_priority() {
-		global $wpdb;
-
-		$attachment = self::factory()->post->create_and_get(
-			array(
-				'post_title' => 'some-page',
-				'post_type'  => 'attachment',
-			)
-		);
-		$page       = self::factory()->post->create_and_get(
-			array(
-				'post_title' => 'some-page',
-				'post_type'  => 'page',
-			)
-		);
-		$other_att  = self::factory()->post->create_and_get(
-			array(
-				'post_title' => 'some-other-page',
-				'post_type'  => 'attachment',
-			)
-		);
-
-		$wpdb->update( $wpdb->posts, array( 'post_name' => 'some-page' ), array( 'ID' => $page->ID ) );
-		clean_post_cache( $page->ID );
-
-		$page = get_post( $page->ID );
-
-		$this->assertEquals( 'some-page', $attachment->post_name );
-		$this->assertEquals( 'some-page', $page->post_name );
-
-		// get_page_by_path() should return a post of the requested type before returning an attachment.
-		$this->assertEquals( $page, get_page_by_path( 'some-page' ) );
-
-		// Make sure get_page_by_path() will still select an attachment when a post of the requested type doesn't exist.
-		$this->assertEquals( $other_att, get_page_by_path( 'some-other-page' ) );
+		// Permalink should include the post ID at the end.
+		$this->assertSame( get_option( 'siteurl' ) . '/2007/10/31/' . $id . '/', $plink );
 	}
 
 	function test_wp_publish_post() {
 		$draft_id = self::factory()->post->create( array( 'post_status' => 'draft' ) );
 
 		$post = get_post( $draft_id );
-		$this->assertEquals( 'draft', $post->post_status );
+		$this->assertSame( 'draft', $post->post_status );
 
 		wp_publish_post( $draft_id );
 		$post = get_post( $draft_id );
 
-		$this->assertEquals( 'publish', $post->post_status );
+		$this->assertSame( 'publish', $post->post_status );
 	}
 
 	/**
@@ -624,14 +604,30 @@ class Tests_Post extends WP_UnitTestCase {
 		);
 
 		$post = get_post( $post_id );
-		$this->assertEquals( 'future', $post->post_status );
-		$this->assertEquals( $future_date, $post->post_date );
+		$this->assertSame( 'future', $post->post_status );
+		$this->assertSame( $future_date, $post->post_date );
 
 		wp_publish_post( $post_id );
 		$post = get_post( $post_id );
 
-		$this->assertEquals( 'publish', $post->post_status );
-		$this->assertEquals( $future_date, $post->post_date );
+		$this->assertSame( 'publish', $post->post_status );
+		$this->assertSame( $future_date, $post->post_date );
+	}
+
+	/**
+	 * @ticket 48145
+	 */
+	function test_wp_insert_post_should_default_to_publish_if_post_date_is_within_59_seconds_from_current_time() {
+		$future_date = gmdate( 'Y-m-d H:i:s', time() + 59 );
+		$post_id     = self::factory()->post->create(
+			array(
+				'post_date' => $future_date,
+			)
+		);
+
+		$post = get_post( $post_id );
+		$this->assertSame( 'publish', $post->post_status );
+		$this->assertSame( $future_date, $post->post_date );
 	}
 
 	/**
@@ -642,8 +638,8 @@ class Tests_Post extends WP_UnitTestCase {
 
 		$post_id = wp_insert_post( array( 'post_title' => '<script>Test</script>' ) );
 		$post    = get_post( $post_id );
-		$this->assertEquals( '<script>Test</script>', $post->post_title );
-		$this->assertEquals( 'draft', $post->post_status );
+		$this->assertSame( '<script>Test</script>', $post->post_title );
+		$this->assertSame( 'draft', $post->post_status );
 
 		kses_init_filters();
 
@@ -654,7 +650,7 @@ class Tests_Post extends WP_UnitTestCase {
 			)
 		);
 		$post = get_post( $post->ID );
-		$this->assertEquals( 'Test', $post->post_title );
+		$this->assertSame( 'Test', $post->post_title );
 
 		kses_remove_filters();
 	}
@@ -667,14 +663,14 @@ class Tests_Post extends WP_UnitTestCase {
 
 		$post_id = wp_insert_post( array( 'post_title' => '<script>Test</script>' ) );
 		$post    = get_post( $post_id );
-		$this->assertEquals( '<script>Test</script>', $post->post_title );
-		$this->assertEquals( 'draft', $post->post_status );
+		$this->assertSame( '<script>Test</script>', $post->post_title );
+		$this->assertSame( 'draft', $post->post_status );
 
 		kses_init_filters();
 
 		wp_publish_post( $post->ID );
 		$post = get_post( $post->ID );
-		$this->assertEquals( '<script>Test</script>', $post->post_title );
+		$this->assertSame( '<script>Test</script>', $post->post_title );
 
 		kses_remove_filters();
 	}
@@ -686,7 +682,7 @@ class Tests_Post extends WP_UnitTestCase {
 		global $post;
 		$parent_id = self::factory()->post->create();
 		$post      = self::factory()->post->create_and_get( array( 'post_parent' => $parent_id ) );
-		$this->assertEquals( array( $parent_id ), get_post_ancestors( 0 ) );
+		$this->assertSame( array( $parent_id ), get_post_ancestors( 0 ) );
 	}
 
 	/**
@@ -698,8 +694,8 @@ class Tests_Post extends WP_UnitTestCase {
 
 		$post['ID'] = 123456789;
 
-		$this->assertEquals( 0, wp_insert_post( $post ) );
-		$this->assertEquals( 0, wp_update_post( $post ) );
+		$this->assertSame( 0, wp_insert_post( $post ) );
+		$this->assertSame( 0, wp_update_post( $post ) );
 
 		$this->assertInstanceOf( 'WP_Error', wp_insert_post( $post, true ) );
 		$this->assertInstanceOf( 'WP_Error', wp_update_post( $post, true ) );
@@ -711,10 +707,10 @@ class Tests_Post extends WP_UnitTestCase {
 		$post_id = self::factory()->post->create( array( 'post_content' => 'Page 0' ) );
 		$post    = get_post( $post_id );
 		setup_postdata( $post );
-		$this->assertEquals( 0, $multipage );
+		$this->assertSame( 0, $multipage );
 		$this->assertCount( 1, $pages );
-		$this->assertEquals( 1, $numpages );
-		$this->assertEquals( array( 'Page 0' ), $pages );
+		$this->assertSame( 1, $numpages );
+		$this->assertSame( array( 'Page 0' ), $pages );
 	}
 
 	function test_parse_post_content_multi_page() {
@@ -722,10 +718,10 @@ class Tests_Post extends WP_UnitTestCase {
 		$post_id = self::factory()->post->create( array( 'post_content' => 'Page 0<!--nextpage-->Page 1<!--nextpage-->Page 2<!--nextpage-->Page 3' ) );
 		$post    = get_post( $post_id );
 		setup_postdata( $post );
-		$this->assertEquals( 1, $multipage );
+		$this->assertSame( 1, $multipage );
 		$this->assertCount( 4, $pages );
-		$this->assertEquals( 4, $numpages );
-		$this->assertEquals( array( 'Page 0', 'Page 1', 'Page 2', 'Page 3' ), $pages );
+		$this->assertSame( 4, $numpages );
+		$this->assertSame( array( 'Page 0', 'Page 1', 'Page 2', 'Page 3' ), $pages );
 	}
 
 	function test_parse_post_content_remaining_single_page() {
@@ -733,10 +729,10 @@ class Tests_Post extends WP_UnitTestCase {
 		$post_id = self::factory()->post->create( array( 'post_content' => 'Page 0' ) );
 		$post    = get_post( $post_id );
 		setup_postdata( $post );
-		$this->assertEquals( 0, $multipage );
+		$this->assertSame( 0, $multipage );
 		$this->assertCount( 1, $pages );
-		$this->assertEquals( 1, $numpages );
-		$this->assertEquals( array( 'Page 0' ), $pages );
+		$this->assertSame( 1, $numpages );
+		$this->assertSame( array( 'Page 0' ), $pages );
 	}
 
 	function test_parse_post_content_remaining_multi_page() {
@@ -744,10 +740,10 @@ class Tests_Post extends WP_UnitTestCase {
 		$post_id = self::factory()->post->create( array( 'post_content' => 'Page 0<!--nextpage-->Page 1<!--nextpage-->Page 2<!--nextpage-->Page 3' ) );
 		$post    = get_post( $post_id );
 		setup_postdata( $post );
-		$this->assertEquals( 1, $multipage );
+		$this->assertSame( 1, $multipage );
 		$this->assertCount( 4, $pages );
-		$this->assertEquals( 4, $numpages );
-		$this->assertEquals( array( 'Page 0', 'Page 1', 'Page 2', 'Page 3' ), $pages );
+		$this->assertSame( 4, $numpages );
+		$this->assertSame( array( 'Page 0', 'Page 1', 'Page 2', 'Page 3' ), $pages );
 	}
 
 	/**
@@ -758,10 +754,10 @@ class Tests_Post extends WP_UnitTestCase {
 		$post_id = self::factory()->post->create( array( 'post_content' => '<!--nextpage-->Page 0<!--nextpage-->Page 1<!--nextpage-->Page 2<!--nextpage-->Page 3' ) );
 		$post    = get_post( $post_id );
 		setup_postdata( $post );
-		$this->assertEquals( 1, $multipage );
+		$this->assertSame( 1, $multipage );
 		$this->assertCount( 4, $pages );
-		$this->assertEquals( 4, $numpages );
-		$this->assertEquals( array( 'Page 0', 'Page 1', 'Page 2', 'Page 3' ), $pages );
+		$this->assertSame( 4, $numpages );
+		$this->assertSame( array( 'Page 0', 'Page 1', 'Page 2', 'Page 3' ), $pages );
 	}
 
 	/**
@@ -772,10 +768,10 @@ class Tests_Post extends WP_UnitTestCase {
 		$post_id = self::factory()->post->create( array( 'post_content' => '<!--nextpage-->Page 0' ) );
 		$post    = get_post( $post_id );
 		setup_postdata( $post );
-		$this->assertEquals( 0, $multipage );
+		$this->assertSame( 0, $multipage );
 		$this->assertCount( 1, $pages );
-		$this->assertEquals( 1, $numpages );
-		$this->assertEquals( array( 'Page 0' ), $pages );
+		$this->assertSame( 1, $numpages );
+		$this->assertSame( array( 'Page 0' ), $pages );
 	}
 
 	/**
@@ -801,7 +797,7 @@ class Tests_Post extends WP_UnitTestCase {
 
 		$post = get_post( $insert_post_id );
 		$this->assertEquals( $post->post_author, self::$editor_id );
-		$this->assertEquals( $post->post_title, $title );
+		$this->assertSame( $post->post_title, $title );
 	}
 
 	/**
@@ -856,7 +852,7 @@ class Tests_Post extends WP_UnitTestCase {
 		$_post['post_status'] = 'draft';
 		wp_insert_post( $_post );
 		$post = get_post( $post_ids[ $key ] );
-		$this->assertEquals( 'draft', $post->post_status );
+		$this->assertSame( 'draft', $post->post_status );
 		$this->assertNotEquals( 'publish', $post->post_status );
 
 		$after_draft_counts = wp_count_posts();
@@ -874,7 +870,7 @@ class Tests_Post extends WP_UnitTestCase {
 		wp_trash_post( $post_ids[ $key ] );
 
 		$post = get_post( $post_ids[ $key ] );
-		$this->assertEquals( 'trash', $post->post_status );
+		$this->assertSame( 'trash', $post->post_status );
 		$this->assertNotEquals( 'publish', $post->post_status );
 
 		$after_trash_counts = wp_count_posts();
@@ -884,90 +880,19 @@ class Tests_Post extends WP_UnitTestCase {
 	}
 
 	/**
-	 * @ticket 13771
-	 */
-	function test_get_the_date_with_id_returns_correct_time() {
-		$post_id = self::factory()->post->create( array( 'post_date' => '2014-03-01 16:35:00' ) );
-		$this->assertEquals( 'March 1, 2014', get_the_date( 'F j, Y', $post_id ) );
-	}
-
-	/**
-	 * @ticket 28310
-	 */
-	function test_get_the_date_returns_false_with_null_or_non_existing_post() {
-		$this->assertFalse( get_the_date() );
-		$this->assertFalse( get_the_date( 'F j, Y h:i:s' ) );
-		$this->assertFalse( get_the_date( '', 9 ) );
-		$this->assertFalse( get_the_date( 'F j, Y h:i:s', 9 ) );
-	}
-
-	/**
-	 * @ticket 28310
+	 * @ticket 49685
 	 */
-	function test_get_the_time_with_id_returns_correct_time() {
-		$post_id = self::factory()->post->create( array( 'post_date' => '2014-03-01 16:35:00' ) );
-		$this->assertEquals( '16:35:00', get_the_time( 'H:i:s', $post_id ) );
-	}
+	function test_wp_count_posts_status_changes_visible() {
+		self::factory()->post->create_many( 3 );
 
-	/**
-	 * @ticket 28310
-	 */
-	function test_get_the_time_returns_false_with_null_or_non_existing_post() {
-		$this->assertFalse( get_the_time() );
-		$this->assertFalse( get_the_time( 'h:i:s' ) );
-		$this->assertFalse( get_the_time( '', 9 ) );
-		$this->assertFalse( get_the_time( 'h:i:s', 9 ) );
-	}
-
-	/**
-	 * @ticket 28310
-	 */
-	function test_get_post_time_with_id_returns_correct_time() {
-		$post_id = self::factory()->post->create( array( 'post_date' => '2014-03-01 16:35:00' ) );
-		$this->assertEquals( '16:35:00', get_post_time( 'H:i:s', false, $post_id ) );
-	}
-
-	/**
-	 * @ticket 28310
-	 */
-	function test_get_post_time_returns_false_with_null_or_non_existing_post() {
-		$this->assertFalse( get_post_time() );
-		$this->assertFalse( get_post_time( 'h:i:s' ) );
-		$this->assertFalse( get_post_time( '', false, 9 ) );
-		$this->assertFalse( get_post_time( 'h:i:s', false, 9 ) );
-	}
-
-	/**
-	 * @ticket 28310
-	 */
-	function test_get_post_modified_time_with_id_returns_correct_time() {
-		$post_id = self::factory()->post->create( array( 'post_date' => '2014-03-01 16:35:00' ) );
-		$this->assertEquals( '16:35:00', get_post_modified_time( 'H:i:s', false, $post_id ) );
-	}
-
-	/**
-	 * @ticket 28310
-	 */
-	function test_get_post_modified_time_returns_false_with_null_or_non_existing_post() {
-		$this->assertFalse( get_post_modified_time() );
-		$this->assertFalse( get_post_modified_time( 'h:i:s' ) );
-		$this->assertFalse( get_post_modified_time( '', false, 9 ) );
-		$this->assertFalse( get_post_modified_time( 'h:i:s', false, 9 ) );
-	}
+		// Trigger a cache.
+		wp_count_posts();
 
-	/**
-	 * @ticket 28310
-	 */
-	function test_mysql2date_returns_false_with_no_date() {
-		$this->assertFalse( mysql2date( 'F j, Y H:i:s', '' ) );
-	}
+		register_post_status( 'test' );
 
-	/**
-	 * @ticket 28310
-	 */
-	function test_mysql2date_returns_gmt_or_unix_timestamp() {
-		$this->assertEquals( '441013392', mysql2date( 'G', '1983-12-23 07:43:12' ) );
-		$this->assertEquals( '441013392', mysql2date( 'U', '1983-12-23 07:43:12' ) );
+		$counts = wp_count_posts();
+		$this->assertTrue( isset( $counts->test ) );
+		$this->assertSame( 0, $counts->test );
 	}
 
 	/**
@@ -1008,13 +933,12 @@ class Tests_Post extends WP_UnitTestCase {
 	 */
 	function test_utf8mb3_post_saves_with_emoji() {
 		global $wpdb;
-		$_wpdb = new WpdbExposedMethodsForTesting();
 
-		if ( 'utf8' !== $_wpdb->get_col_charset( $wpdb->posts, 'post_title' ) ) {
+		if ( 'utf8' !== $wpdb->get_col_charset( $wpdb->posts, 'post_title' ) ) {
 			$this->markTestSkipped( 'This test is only useful with the utf8 character set' );
 		}
 
-		require_once( ABSPATH . '/wp-admin/includes/post.php' );
+		require_once ABSPATH . '/wp-admin/includes/post.php';
 
 		$post_id = self::factory()->post->create();
 
@@ -1036,7 +960,7 @@ class Tests_Post extends WP_UnitTestCase {
 		$post = get_post( $post_id );
 
 		foreach ( $expected as $field => $value ) {
-			$this->assertEquals( $value, $post->$field );
+			$this->assertSame( $value, $post->$field );
 		}
 	}
 
@@ -1054,8 +978,8 @@ class Tests_Post extends WP_UnitTestCase {
 		);
 		$post    = get_post( $post_id );
 
-		$this->assertEquals( 'open', $post->comment_status );
-		$this->assertEquals( 'open', $post->ping_status );
+		$this->assertSame( 'open', $post->comment_status );
+		$this->assertSame( 'open', $post->ping_status );
 	}
 
 	/**
@@ -1073,8 +997,8 @@ class Tests_Post extends WP_UnitTestCase {
 		);
 		$post    = get_post( $post_id );
 
-		$this->assertEquals( 'closed', $post->comment_status );
-		$this->assertEquals( 'closed', $post->ping_status );
+		$this->assertSame( 'closed', $post->comment_status );
+		$this->assertSame( 'closed', $post->ping_status );
 	}
 
 	/**
@@ -1094,8 +1018,8 @@ class Tests_Post extends WP_UnitTestCase {
 		);
 		$post    = get_post( $post_id );
 
-		$this->assertEquals( 'open', $post->comment_status );
-		$this->assertEquals( 'open', $post->ping_status );
+		$this->assertSame( 'open', $post->comment_status );
+		$this->assertSame( 'open', $post->ping_status );
 		_unregister_post_type( $post_type );
 	}
 
@@ -1116,21 +1040,21 @@ class Tests_Post extends WP_UnitTestCase {
 		);
 		$post    = get_post( $post_id );
 
-		$this->assertEquals( 'closed', $post->comment_status );
-		$this->assertEquals( 'closed', $post->ping_status );
+		$this->assertSame( 'closed', $post->comment_status );
+		$this->assertSame( 'closed', $post->ping_status );
 		_unregister_post_type( $post_type );
 	}
 
 	/**
-	 * If a post is sticky and is updated by a user that does not have the publish_post capability, it should _stay_
-	 * sticky.
+	 * If a post is sticky and is updated by a user that does not have the publish_post capability,
+	 * it should _stay_ sticky.
 	 *
 	 * @ticket 24153
 	 */
 	function test_user_without_publish_cannot_affect_sticky() {
 		wp_set_current_user( self::$grammarian_id );
 
-		// Sanity Check.
+		// Sanity check.
 		$this->assertFalse( current_user_can( 'publish_posts' ) );
 		$this->assertTrue( current_user_can( 'edit_others_posts' ) );
 		$this->assertTrue( current_user_can( 'edit_published_posts' ) );
@@ -1144,7 +1068,7 @@ class Tests_Post extends WP_UnitTestCase {
 		);
 		stick_post( $post->ID );
 
-		// Sanity Check.
+		// Sanity check.
 		$this->assertTrue( is_sticky( $post->ID ) );
 
 		// Edit the post.
@@ -1155,13 +1079,13 @@ class Tests_Post extends WP_UnitTestCase {
 		// Make sure it's still sticky.
 		$saved_post = get_post( $post->ID );
 		$this->assertTrue( is_sticky( $saved_post->ID ) );
-		$this->assertEquals( 'Updated', $saved_post->post_title );
-		$this->assertEquals( 'Updated', $saved_post->post_content );
+		$this->assertSame( 'Updated', $saved_post->post_title );
+		$this->assertSame( 'Updated', $saved_post->post_content );
 	}
 
 	/**
-	 * If the `edit_post()` method is invoked by a user without publish_posts permission, the sticky status of the post
-	 * should not be changed.
+	 * If the `edit_post()` method is invoked by a user without publish_posts permission,
+	 * the sticky status of the post should not be changed.
 	 *
 	 * @ticket 24153
 	 */
@@ -1175,17 +1099,17 @@ class Tests_Post extends WP_UnitTestCase {
 		);
 		stick_post( $post->ID );
 
-		// Sanity Check.
+		// Sanity check.
 		$this->assertTrue( is_sticky( $post->ID ) );
 
 		wp_set_current_user( self::$grammarian_id );
 
-		// Sanity Check.
+		// Sanity check.
 		$this->assertFalse( current_user_can( 'publish_posts' ) );
 		$this->assertTrue( current_user_can( 'edit_others_posts' ) );
 		$this->assertTrue( current_user_can( 'edit_published_posts' ) );
 
-		// Edit the post - The key 'sticky' is intentionally unset.
+		// Edit the post - the key 'sticky' is intentionally unset.
 		$data = array(
 			'post_ID'      => $post->ID,
 			'post_title'   => 'Updated',
@@ -1193,11 +1117,11 @@ class Tests_Post extends WP_UnitTestCase {
 		);
 		edit_post( $data );
 
-		// Make sure it's still sticky
+		// Make sure it's still sticky.
 		$saved_post = get_post( $post->ID );
 		$this->assertTrue( is_sticky( $saved_post->ID ) );
-		$this->assertEquals( 'Updated', $saved_post->post_title );
-		$this->assertEquals( 'Updated', $saved_post->post_content );
+		$this->assertSame( 'Updated', $saved_post->post_title );
+		$this->assertSame( 'Updated', $saved_post->post_content );
 	}
 
 	/**
@@ -1223,8 +1147,8 @@ class Tests_Post extends WP_UnitTestCase {
 		remove_action( 'post_stuck', array( $a1, 'action' ) );
 		remove_action( 'post_unstuck', array( $a2, 'action' ) );
 
-		$this->assertEquals( 1, $a1->get_call_count() );
-		$this->assertEquals( 1, $a2->get_call_count() );
+		$this->assertSame( 1, $a1->get_call_count() );
+		$this->assertSame( 1, $a2->get_call_count() );
 	}
 
 	/**
@@ -1250,7 +1174,7 @@ class Tests_Post extends WP_UnitTestCase {
 
 		$updated_post = get_post( $post_id );
 		// Ensure changing the post_title didn't modify the post_name.
-		$this->assertEquals( 'stuff', $updated_post->post_name );
+		$this->assertSame( 'stuff', $updated_post->post_name );
 	}
 
 	/**
@@ -1283,16 +1207,16 @@ class Tests_Post extends WP_UnitTestCase {
 			'post_date_gmt' => '2014-01-01 12:00:00',
 		);
 
-		// insert a post and make sure the ID is ok
+		// Insert a post and make sure the ID is OK.
 		$id = wp_insert_post( $post );
 
 		$out = get_post( $id );
 
-		$this->assertEquals( $post['post_content'], $out->post_content );
-		$this->assertEquals( $post['post_title'], $out->post_title );
+		$this->assertSame( $post['post_content'], $out->post_content );
+		$this->assertSame( $post['post_title'], $out->post_title );
 		$this->assertEquals( $post['post_author'], $out->post_author );
-		$this->assertEquals( get_date_from_gmt( $post['post_date_gmt'] ), $out->post_date );
-		$this->assertEquals( $post['post_date_gmt'], $out->post_date_gmt );
+		$this->assertSame( get_date_from_gmt( $post['post_date_gmt'] ), $out->post_date );
+		$this->assertSame( $post['post_date_gmt'], $out->post_date_gmt );
 	}
 
 	function test_wp_delete_post_reassign_hierarchical_post_type() {
@@ -1309,11 +1233,11 @@ class Tests_Post extends WP_UnitTestCase {
 				'post_parent' => $parent_page_id,
 			)
 		);
-		$this->assertEquals( $parent_page_id, get_post( $page_id )->post_parent );
+		$this->assertSame( $parent_page_id, get_post( $page_id )->post_parent );
 		wp_delete_post( $parent_page_id, true );
-		$this->assertEquals( $grandparent_page_id, get_post( $page_id )->post_parent );
+		$this->assertSame( $grandparent_page_id, get_post( $page_id )->post_parent );
 		wp_delete_post( $grandparent_page_id, true );
-		$this->assertEquals( 0, get_post( $page_id )->post_parent );
+		$this->assertSame( 0, get_post( $page_id )->post_parent );
 	}
 
 	/**
@@ -1324,7 +1248,7 @@ class Tests_Post extends WP_UnitTestCase {
 	 */
 	function test_wp_insert_post_for_customize_changeset_should_not_drop_post_name() {
 
-		$this->assertEquals( 10, has_filter( 'wp_insert_post_data', '_wp_customize_changeset_filter_insert_post_data' ) );
+		$this->assertSame( 10, has_filter( 'wp_insert_post_data', '_wp_customize_changeset_filter_insert_post_data' ) );
 
 		$changeset_data = array(
 			'blogname' => array(
@@ -1342,8 +1266,8 @@ class Tests_Post extends WP_UnitTestCase {
 				'post_content' => wp_json_encode( $changeset_data ),
 			)
 		);
-		$this->assertEquals( $uuid, get_post( $post_id )->post_name, 'Expected lower-case UUID4 to be inserted.' );
-		$this->assertEquals( $changeset_data, json_decode( get_post( $post_id )->post_content, true ) );
+		$this->assertSame( $uuid, get_post( $post_id )->post_name, 'Expected lower-case UUID4 to be inserted.' );
+		$this->assertSame( $changeset_data, json_decode( get_post( $post_id )->post_content, true ) );
 
 		$changeset_data['blogname']['value'] = 'Hola Mundo';
 		wp_update_post(
@@ -1353,8 +1277,8 @@ class Tests_Post extends WP_UnitTestCase {
 				'post_content' => wp_json_encode( $changeset_data ),
 			)
 		);
-		$this->assertEquals( $uuid, get_post( $post_id )->post_name, 'Expected post_name to not have been dropped for drafts.' );
-		$this->assertEquals( $changeset_data, json_decode( get_post( $post_id )->post_content, true ) );
+		$this->assertSame( $uuid, get_post( $post_id )->post_name, 'Expected post_name to not have been dropped for drafts.' );
+		$this->assertSame( $changeset_data, json_decode( get_post( $post_id )->post_content, true ) );
 
 		$changeset_data['blogname']['value'] = 'Hallo Welt';
 		wp_update_post(
@@ -1364,8 +1288,8 @@ class Tests_Post extends WP_UnitTestCase {
 				'post_content' => wp_json_encode( $changeset_data ),
 			)
 		);
-		$this->assertEquals( $uuid, get_post( $post_id )->post_name, 'Expected post_name to not have been dropped for pending.' );
-		$this->assertEquals( $changeset_data, json_decode( get_post( $post_id )->post_content, true ) );
+		$this->assertSame( $uuid, get_post( $post_id )->post_name, 'Expected post_name to not have been dropped for pending.' );
+		$this->assertSame( $changeset_data, json_decode( get_post( $post_id )->post_content, true ) );
 	}
 
 	/**
@@ -1386,7 +1310,7 @@ class Tests_Post extends WP_UnitTestCase {
 			)
 		);
 		$post    = get_post( $post_id );
-		$this->assertEquals( 'override-slug-' . $post->post_type, $post->post_name );
+		$this->assertSame( 'override-slug-' . $post->post_type, $post->post_name );
 
 		remove_filter( 'pre_wp_unique_post_slug', array( $this, 'filter_pre_wp_unique_post_slug' ), 10, 6 );
 	}
@@ -1410,7 +1334,7 @@ class Tests_Post extends WP_UnitTestCase {
 		);
 
 		$post = get_post( $post_id );
-		self::assertEquals( '0000-00-00 00:00:00', $post->post_date_gmt );
+		self::assertSame( '0000-00-00 00:00:00', $post->post_date_gmt );
 	}
 
 	/**
@@ -1428,6 +1352,47 @@ class Tests_Post extends WP_UnitTestCase {
 		);
 
 		$post = get_post( $post_id );
-		self::assertEquals( strtotime( gmdate( 'Y-m-d H:i:s' ) ), strtotime( $post->post_date_gmt ), 'The dates should be equal', 2 );
+		self::assertEqualsWithDelta( strtotime( gmdate( 'Y-m-d H:i:s' ) ), strtotime( $post->post_date_gmt ), 2, 'The dates should be equal' );
+	}
+
+	/**
+	 * Test ensuring that wp_update_post() does not unintentionally modify post tags
+	 * if the post has several tags with the same name but different slugs.
+	 *
+	 * Tags should only be modified if 'tags_input' parameter was explicitly provided,
+	 * and is different from the existing tags.
+	 *
+	 * @ticket 45121
+	 */
+	public function test_update_post_should_only_modify_post_tags_if_different_tags_input_was_provided() {
+		$tag_1 = wp_insert_term( 'wp_update_post_tag', 'post_tag', array( 'slug' => 'wp_update_post_tag_1' ) );
+		$tag_2 = wp_insert_term( 'wp_update_post_tag', 'post_tag', array( 'slug' => 'wp_update_post_tag_2' ) );
+		$tag_3 = wp_insert_term( 'wp_update_post_tag', 'post_tag', array( 'slug' => 'wp_update_post_tag_3' ) );
+
+		$post_id = self::factory()->post->create(
+			array(
+				'tags_input' => array( $tag_1['term_id'], $tag_2['term_id'] ),
+			)
+		);
+
+		$post = get_post( $post_id );
+
+		$tags = wp_get_post_tags( $post->ID, array( 'fields' => 'ids' ) );
+		$this->assertSameSets( array( $tag_1['term_id'], $tag_2['term_id'] ), $tags );
+
+		wp_update_post( $post );
+
+		$tags = wp_get_post_tags( $post->ID, array( 'fields' => 'ids' ) );
+		$this->assertSameSets( array( $tag_1['term_id'], $tag_2['term_id'] ), $tags );
+
+		wp_update_post(
+			array(
+				'ID'         => $post->ID,
+				'tags_input' => array( $tag_2['term_id'], $tag_3['term_id'] ),
+			)
+		);
+
+		$tags = wp_get_post_tags( $post->ID, array( 'fields' => 'ids' ) );
+		$this->assertSameSets( array( $tag_2['term_id'], $tag_3['term_id'] ), $tags );
 	}
 }
diff --git a/tests/post/attachments.php b/tests/post/attachments.php
index 70255d5bec..8f75c41b5a 100644
--- a/tests/post/attachments.php
+++ b/tests/post/attachments.php
@@ -23,7 +23,7 @@ class Tests_Post_Attachments extends WP_UnitTestCase {
 
 	function test_insert_image_no_thumb() {
 
-		// this image is smaller than the thumbnail size so it won't have one
+		// This image is smaller than the thumbnail size so it won't have one.
 		$filename = ( DIR_TESTDATA . '/images/test-image.jpg' );
 		$contents = file_get_contents( $filename );
 
@@ -32,27 +32,26 @@ class Tests_Post_Attachments extends WP_UnitTestCase {
 
 		$id = $this->_make_attachment( $upload );
 
-		// intermediate copies should not exist
+		// Intermediate copies should not exist.
 		$this->assertFalse( image_get_intermediate_size( $id, 'thumbnail' ) );
 		$this->assertFalse( image_get_intermediate_size( $id, 'medium' ) );
 		$this->assertFalse( image_get_intermediate_size( $id, 'medium_large' ) );
 
-		// medium, medium_large, and full size will both point to the original
+		// medium, medium_large, and full size will both point to the original.
 		$downsize = image_downsize( $id, 'medium' );
-		$this->assertEquals( wp_basename( $upload['file'] ), wp_basename( $downsize[0] ) );
-		$this->assertEquals( 50, $downsize[1] );
-		$this->assertEquals( 50, $downsize[2] );
+		$this->assertSame( wp_basename( $upload['file'] ), wp_basename( $downsize[0] ) );
+		$this->assertSame( 50, $downsize[1] );
+		$this->assertSame( 50, $downsize[2] );
 
 		$downsize = image_downsize( $id, 'medium_large' );
-		$this->assertEquals( wp_basename( $upload['file'] ), wp_basename( $downsize[0] ) );
-		$this->assertEquals( 50, $downsize[1] );
-		$this->assertEquals( 50, $downsize[2] );
+		$this->assertSame( wp_basename( $upload['file'] ), wp_basename( $downsize[0] ) );
+		$this->assertSame( 50, $downsize[1] );
+		$this->assertSame( 50, $downsize[2] );
 
 		$downsize = image_downsize( $id, 'full' );
-		$this->assertEquals( wp_basename( $upload['file'] ), wp_basename( $downsize[0] ) );
-		$this->assertEquals( 50, $downsize[1] );
-		$this->assertEquals( 50, $downsize[2] );
-
+		$this->assertSame( wp_basename( $upload['file'] ), wp_basename( $downsize[0] ) );
+		$this->assertSame( 50, $downsize[1] );
+		$this->assertSame( 50, $downsize[2] );
 	}
 
 	function test_insert_image_thumb_only() {
@@ -71,9 +70,9 @@ class Tests_Post_Attachments extends WP_UnitTestCase {
 
 		$id = $this->_make_attachment( $upload );
 
-		// intermediate copies should exist: thumbnail only
+		// Intermediate copies should exist: thumbnail only.
 		$thumb = image_get_intermediate_size( $id, 'thumbnail' );
-		$this->assertEquals( 'a2-small-150x150.jpg', $thumb['file'] );
+		$this->assertSame( 'a2-small-150x150.jpg', $thumb['file'] );
 
 		$uploads = wp_upload_dir();
 		$this->assertTrue( is_file( $uploads['basedir'] . DIRECTORY_SEPARATOR . $thumb['path'] ) );
@@ -81,31 +80,30 @@ class Tests_Post_Attachments extends WP_UnitTestCase {
 		$this->assertFalse( image_get_intermediate_size( $id, 'medium' ) );
 		$this->assertFalse( image_get_intermediate_size( $id, 'medium_large' ) );
 
-		// the thumb url should point to the thumbnail intermediate
-		$this->assertEquals( $thumb['url'], wp_get_attachment_thumb_url( $id ) );
+		// The thumb url should point to the thumbnail intermediate.
+		$this->assertSame( $thumb['url'], wp_get_attachment_thumb_url( $id ) );
 
-		// image_downsize() should return the correct images and sizes
+		// image_downsize() should return the correct images and sizes.
 		$downsize = image_downsize( $id, 'thumbnail' );
-		$this->assertEquals( 'a2-small-150x150.jpg', wp_basename( $downsize[0] ) );
-		$this->assertEquals( 150, $downsize[1] );
-		$this->assertEquals( 150, $downsize[2] );
+		$this->assertSame( 'a2-small-150x150.jpg', wp_basename( $downsize[0] ) );
+		$this->assertSame( 150, $downsize[1] );
+		$this->assertSame( 150, $downsize[2] );
 
-		// medium, medium_large, and full will both point to the original
+		// medium, medium_large, and full will both point to the original.
 		$downsize = image_downsize( $id, 'medium' );
-		$this->assertEquals( 'a2-small.jpg', wp_basename( $downsize[0] ) );
-		$this->assertEquals( 400, $downsize[1] );
-		$this->assertEquals( 300, $downsize[2] );
+		$this->assertSame( 'a2-small.jpg', wp_basename( $downsize[0] ) );
+		$this->assertSame( 400, $downsize[1] );
+		$this->assertSame( 300, $downsize[2] );
 
 		$downsize = image_downsize( $id, 'medium_large' );
-		$this->assertEquals( 'a2-small.jpg', wp_basename( $downsize[0] ) );
-		$this->assertEquals( 400, $downsize[1] );
-		$this->assertEquals( 300, $downsize[2] );
+		$this->assertSame( 'a2-small.jpg', wp_basename( $downsize[0] ) );
+		$this->assertSame( 400, $downsize[1] );
+		$this->assertSame( 300, $downsize[2] );
 
 		$downsize = image_downsize( $id, 'full' );
-		$this->assertEquals( 'a2-small.jpg', wp_basename( $downsize[0] ) );
-		$this->assertEquals( 400, $downsize[1] );
-		$this->assertEquals( 300, $downsize[2] );
-
+		$this->assertSame( 'a2-small.jpg', wp_basename( $downsize[0] ) );
+		$this->assertSame( 400, $downsize[1] );
+		$this->assertSame( 300, $downsize[2] );
 	}
 
 	function test_insert_image_medium_sizes() {
@@ -128,42 +126,42 @@ class Tests_Post_Attachments extends WP_UnitTestCase {
 		$id      = $this->_make_attachment( $upload );
 		$uploads = wp_upload_dir();
 
-		// intermediate copies should exist: thumbnail and medium
+		// Intermediate copies should exist: thumbnail and medium.
 		$thumb = image_get_intermediate_size( $id, 'thumbnail' );
-		$this->assertEquals( '2007-06-17DSC_4173-150x150.jpg', $thumb['file'] );
+		$this->assertSame( '2007-06-17DSC_4173-150x150.jpg', $thumb['file'] );
 		$this->assertTrue( is_file( $uploads['basedir'] . DIRECTORY_SEPARATOR . $thumb['path'] ) );
 
 		$medium = image_get_intermediate_size( $id, 'medium' );
-		$this->assertEquals( '2007-06-17DSC_4173-400x602.jpg', $medium['file'] );
+		$this->assertSame( '2007-06-17DSC_4173-400x602.jpg', $medium['file'] );
 		$this->assertTrue( is_file( $uploads['basedir'] . DIRECTORY_SEPARATOR . $medium['path'] ) );
 
 		$medium_large = image_get_intermediate_size( $id, 'medium_large' );
-		$this->assertEquals( '2007-06-17DSC_4173-600x904.jpg', $medium_large['file'] );
+		$this->assertSame( '2007-06-17DSC_4173-600x904.jpg', $medium_large['file'] );
 		$this->assertTrue( is_file( $uploads['basedir'] . DIRECTORY_SEPARATOR . $medium_large['path'] ) );
 
-		// the thumb url should point to the thumbnail intermediate
-		$this->assertEquals( $thumb['url'], wp_get_attachment_thumb_url( $id ) );
+		// The thumb url should point to the thumbnail intermediate.
+		$this->assertSame( $thumb['url'], wp_get_attachment_thumb_url( $id ) );
 
-		// image_downsize() should return the correct images and sizes
+		// image_downsize() should return the correct images and sizes.
 		$downsize = image_downsize( $id, 'thumbnail' );
-		$this->assertEquals( '2007-06-17DSC_4173-150x150.jpg', wp_basename( $downsize[0] ) );
-		$this->assertEquals( 150, $downsize[1] );
-		$this->assertEquals( 150, $downsize[2] );
+		$this->assertSame( '2007-06-17DSC_4173-150x150.jpg', wp_basename( $downsize[0] ) );
+		$this->assertSame( 150, $downsize[1] );
+		$this->assertSame( 150, $downsize[2] );
 
 		$downsize = image_downsize( $id, 'medium' );
-		$this->assertEquals( '2007-06-17DSC_4173-400x602.jpg', wp_basename( $downsize[0] ) );
-		$this->assertEquals( 400, $downsize[1] );
-		$this->assertEquals( 602, $downsize[2] );
+		$this->assertSame( '2007-06-17DSC_4173-400x602.jpg', wp_basename( $downsize[0] ) );
+		$this->assertSame( 400, $downsize[1] );
+		$this->assertSame( 602, $downsize[2] );
 
 		$downsize = image_downsize( $id, 'medium_large' );
-		$this->assertEquals( '2007-06-17DSC_4173-600x904.jpg', wp_basename( $downsize[0] ) );
-		$this->assertEquals( 600, $downsize[1] );
-		$this->assertEquals( 904, $downsize[2] );
+		$this->assertSame( '2007-06-17DSC_4173-600x904.jpg', wp_basename( $downsize[0] ) );
+		$this->assertSame( 600, $downsize[1] );
+		$this->assertSame( 904, $downsize[2] );
 
 		$downsize = image_downsize( $id, 'full' );
-		$this->assertEquals( '2007-06-17DSC_4173.jpg', wp_basename( $downsize[0] ) );
-		$this->assertEquals( 680, $downsize[1] );
-		$this->assertEquals( 1024, $downsize[2] );
+		$this->assertSame( '2007-06-17DSC_4173.jpg', wp_basename( $downsize[0] ) );
+		$this->assertSame( 680, $downsize[1] );
+		$this->assertSame( 1024, $downsize[2] );
 	}
 
 
@@ -187,24 +185,24 @@ class Tests_Post_Attachments extends WP_UnitTestCase {
 		$id      = $this->_make_attachment( $upload );
 		$uploads = wp_upload_dir();
 
-		// check that the file and intermediates exist
+		// Check that the file and intermediates exist.
 		$thumb = image_get_intermediate_size( $id, 'thumbnail' );
-		$this->assertEquals( '2007-06-17DSC_4173-150x150.jpg', $thumb['file'] );
+		$this->assertSame( '2007-06-17DSC_4173-150x150.jpg', $thumb['file'] );
 		$this->assertTrue( is_file( $uploads['basedir'] . DIRECTORY_SEPARATOR . $thumb['path'] ) );
 
 		$medium = image_get_intermediate_size( $id, 'medium' );
-		$this->assertEquals( '2007-06-17DSC_4173-400x602.jpg', $medium['file'] );
+		$this->assertSame( '2007-06-17DSC_4173-400x602.jpg', $medium['file'] );
 		$this->assertTrue( is_file( $uploads['basedir'] . DIRECTORY_SEPARATOR . $medium['path'] ) );
 
 		$medium_large = image_get_intermediate_size( $id, 'medium_large' );
-		$this->assertEquals( '2007-06-17DSC_4173-600x904.jpg', $medium_large['file'] );
+		$this->assertSame( '2007-06-17DSC_4173-600x904.jpg', $medium_large['file'] );
 		$this->assertTrue( is_file( $uploads['basedir'] . DIRECTORY_SEPARATOR . $medium_large['path'] ) );
 
 		$meta     = wp_get_attachment_metadata( $id );
 		$original = $meta['file'];
 		$this->assertTrue( is_file( $uploads['basedir'] . DIRECTORY_SEPARATOR . $original ) );
 
-		// now delete the attachment and make sure all files are gone
+		// Now delete the attachment and make sure all files are gone.
 		wp_delete_attachment( $id );
 
 		$this->assertFalse( is_file( $thumb['path'] ) );
@@ -220,7 +218,7 @@ class Tests_Post_Attachments extends WP_UnitTestCase {
 	 * @ticket 21963
 	 */
 	function test_insert_image_without_guid() {
-		// this image is smaller than the thumbnail size so it won't have one
+		// This image is smaller than the thumbnail size so it won't have one.
 		$filename = ( DIR_TESTDATA . '/images/test-image.jpg' );
 		$contents = file_get_contents( $filename );
 
@@ -257,7 +255,7 @@ class Tests_Post_Attachments extends WP_UnitTestCase {
 		wp_update_post( $post );
 
 		// Make sure the update didn't remove the attached file.
-		$this->assertEquals( $attached_file, get_post_meta( $id, '_wp_attached_file', true ) );
+		$this->assertSame( $attached_file, get_post_meta( $id, '_wp_attached_file', true ) );
 	}
 
 	/**
@@ -272,9 +270,9 @@ class Tests_Post_Attachments extends WP_UnitTestCase {
 
 		$attachment_id = $this->_make_attachment( $upload );
 
-		// Assert that the attachment is an orphan
+		// Assert that the attachment is an orphan.
 		$attachment = get_post( $attachment_id );
-		$this->assertEquals( $attachment->post_parent, 0 );
+		$this->assertSame( $attachment->post_parent, 0 );
 
 		$post_id = wp_insert_post(
 			array(
@@ -283,10 +281,10 @@ class Tests_Post_Attachments extends WP_UnitTestCase {
 			)
 		);
 
-		// Assert that the attachment has a parent
+		// Assert that the attachment has a parent.
 		wp_insert_attachment( $attachment, '', $post_id );
 		$attachment = get_post( $attachment_id );
-		$this->assertEquals( $attachment->post_parent, $post_id );
+		$this->assertSame( $attachment->post_parent, $post_id );
 	}
 
 	/**
@@ -352,7 +350,7 @@ class Tests_Post_Attachments extends WP_UnitTestCase {
 		$upload = wp_upload_bits( wp_basename( $filename ), null, $contents );
 		$this->assertTrue( empty( $upload['error'] ) );
 
-		// Set attachment ID
+		// Set attachment ID.
 		$attachment_id = $this->_make_attachment( $upload );
 
 		$_SERVER['HTTPS'] = 'on';
@@ -408,7 +406,7 @@ class Tests_Post_Attachments extends WP_UnitTestCase {
 		$upload = wp_upload_bits( wp_basename( $filename ), null, $contents );
 		$this->assertTrue( empty( $upload['error'] ) );
 
-		// Set attachment ID
+		// Set attachment ID.
 		$attachment_id = $this->_make_attachment( $upload );
 
 		$_SERVER['HTTPS'] = 'on';
@@ -426,7 +424,7 @@ class Tests_Post_Attachments extends WP_UnitTestCase {
 	 * @ticket 15928
 	 */
 	public function test_wp_get_attachment_url_should_force_https_when_administering_over_https_and_siteurl_is_https() {
-		// Set https upload URL
+		// Set https upload URL.
 		add_filter( 'upload_dir', '_upload_dir_https' );
 
 		$filename = ( DIR_TESTDATA . '/images/test-image.jpg' );
@@ -435,7 +433,7 @@ class Tests_Post_Attachments extends WP_UnitTestCase {
 		$upload = wp_upload_bits( wp_basename( $filename ), null, $contents );
 		$this->assertTrue( empty( $upload['error'] ) );
 
-		// Set attachment ID
+		// Set attachment ID.
 		$attachment_id = $this->_make_attachment( $upload );
 
 		$_SERVER['HTTPS'] = 'on';
@@ -466,7 +464,7 @@ class Tests_Post_Attachments extends WP_UnitTestCase {
 	public function test_wp_attachment_is_default() {
 		// On Multisite, psd is not an allowed mime type by default.
 		if ( is_multisite() ) {
-			add_filter( 'upload_mimes', array( $this, 'whitelist_psd_mime_type' ), 10, 2 );
+			add_filter( 'upload_mimes', array( $this, 'allow_psd_mime_type' ), 10, 2 );
 		}
 
 		$filename = DIR_TESTDATA . '/images/test-image.psd';
@@ -481,7 +479,7 @@ class Tests_Post_Attachments extends WP_UnitTestCase {
 		$this->assertFalse( wp_attachment_is( 'video', $attachment_id ) );
 
 		if ( is_multisite() ) {
-			remove_filter( 'upload_mimes', array( $this, 'whitelist_psd_mime_type' ), 10, 2 );
+			remove_filter( 'upload_mimes', array( $this, 'allow_psd_mime_type' ), 10, 2 );
 		}
 	}
 
@@ -493,21 +491,21 @@ class Tests_Post_Attachments extends WP_UnitTestCase {
 
 		$this->assertFalse( $upload['error'] );
 
-		add_filter( 'upload_mimes', array( $this, 'blacklist_jpg_mime_type' ) );
+		add_filter( 'upload_mimes', array( $this, 'disallow_jpg_mime_type' ) );
 
 		$upload = wp_upload_bits( wp_basename( $filename ), null, $contents );
 
-		remove_filter( 'upload_mimes', array( $this, 'blacklist_jpg_mime_type' ) );
+		remove_filter( 'upload_mimes', array( $this, 'disallow_jpg_mime_type' ) );
 
 		$this->assertNotEmpty( $upload['error'] );
 	}
 
-	public function whitelist_psd_mime_type( $mimes ) {
+	public function allow_psd_mime_type( $mimes ) {
 		$mimes['psd'] = 'application/octet-stream';
 		return $mimes;
 	}
 
-	public function blacklist_jpg_mime_type( $mimes ) {
+	public function disallow_jpg_mime_type( $mimes ) {
 		unset( $mimes['jpg|jpeg|jpe'] );
 		return $mimes;
 	}
diff --git a/tests/post/bodyClass.php b/tests/post/bodyClass.php
new file mode 100644
index 0000000000..dbe65fcd1a
--- /dev/null
+++ b/tests/post/bodyClass.php
@@ -0,0 +1,29 @@
+<?php
+
+/**
+ * @group post
+ * @covers ::body_class
+ */
+class Tests_Post_BodyClass extends WP_UnitTestCase {
+	protected $post_id;
+
+	public function setUp() {
+		parent::setUp();
+		$this->post_id = self::factory()->post->create();
+	}
+
+	public function test_body_class() {
+		$expected = 'class="' . join( ' ', get_body_class( '', $this->post_id ) ) . '"';
+		$this->expectOutputString( $expected );
+		body_class( '', $this->post_id );
+	}
+
+	public function test_body_class_extra_esc_attr() {
+		$classes              = get_body_class( '', $this->post_id );
+		$escaped_again        = array_map( 'esc_attr', $classes );
+		$escaped_another_time = 'class="' . esc_attr( join( ' ', $escaped_again ) ) . '"';
+
+		$this->expectOutputString( $escaped_another_time );
+		body_class( '', $this->post_id );
+	}
+}
diff --git a/tests/post/filtering.php b/tests/post/filtering.php
index dc88930215..7a3a0cb5c6 100644
--- a/tests/post/filtering.php
+++ b/tests/post/filtering.php
@@ -1,9 +1,11 @@
 <?php
 
-// save and fetch posts to make sure content is properly filtered.
-// these tests don't care what code is responsible for filtering or how it is called, just that it happens when a post is saved.
-
 /**
+ * Save and fetch posts to make sure content is properly filtered.
+ *
+ * These tests don't care what code is responsible for filtering
+ * or how it is called, just that it happens when a post is saved.
+ *
  * @group post
  * @group formatting
  */
@@ -20,7 +22,7 @@ class Tests_Post_Filtering extends WP_UnitTestCase {
 		parent::tearDown();
 	}
 
-	// a simple test to make sure unclosed tags are fixed
+	// A simple test to make sure unclosed tags are fixed.
 	function test_post_content_unknown_tag() {
 
 		$content = <<<EOF
@@ -34,10 +36,10 @@ EOF;
 		$id   = self::factory()->post->create( array( 'post_content' => $content ) );
 		$post = get_post( $id );
 
-		$this->assertEquals( $expected, $post->post_content );
+		$this->assertSame( $expected, $post->post_content );
 	}
 
-	// a simple test to make sure unbalanced tags are fixed
+	// A simple test to make sure unbalanced tags are fixed.
 	function test_post_content_unbalanced_tag() {
 
 		$content = <<<EOF
@@ -51,10 +53,10 @@ EOF;
 		$id   = self::factory()->post->create( array( 'post_content' => $content ) );
 		$post = get_post( $id );
 
-		$this->assertEquals( $expected, $post->post_content );
+		$this->assertSame( $expected, $post->post_content );
 	}
 
-	// test kses filtering of disallowed attribute
+	// Test KSES filtering of disallowed attribute.
 	function test_post_content_disallowed_attr() {
 
 		$content = <<<EOF
@@ -68,7 +70,7 @@ EOF;
 		$id   = self::factory()->post->create( array( 'post_content' => $content ) );
 		$post = get_post( $id );
 
-		$this->assertEquals( $expected, $post->post_content );
+		$this->assertSame( $expected, $post->post_content );
 	}
 
 	/**
@@ -88,10 +90,10 @@ EOF;
 		$id   = self::factory()->post->create( array( 'post_content' => $content ) );
 		$post = get_post( $id );
 
-		$this->assertEquals( $expected, $post->post_content );
+		$this->assertSame( $expected, $post->post_content );
 	}
 
-	// make sure unbalanced tags are untouched when the balance option is off
+	// Make sure unbalanced tags are untouched when the balance option is off.
 	function test_post_content_nobalance_nextpage_more() {
 
 		update_option( 'use_balanceTags', 0 );
@@ -108,6 +110,6 @@ EOF;
 		$id   = self::factory()->post->create( array( 'post_content' => $content ) );
 		$post = get_post( $id );
 
-		$this->assertEquals( $content, $post->post_content );
+		$this->assertSame( $content, $post->post_content );
 	}
 }
diff --git a/tests/post/formats.php b/tests/post/formats.php
index 961aa988e7..44cedfc9a6 100644
--- a/tests/post/formats.php
+++ b/tests/post/formats.php
@@ -17,20 +17,20 @@ class Tests_Post_Formats extends WP_UnitTestCase {
 		$result = set_post_format( $post_id, 'aside' );
 		$this->assertNotWPError( $result );
 		$this->assertInternalType( 'array', $result );
-		$this->assertEquals( 1, count( $result ) );
+		$this->assertSame( 1, count( $result ) );
 
 		$format = get_post_format( $post_id );
-		$this->assertEquals( 'aside', $format );
+		$this->assertSame( 'aside', $format );
 
 		$result = set_post_format( $post_id, 'standard' );
 		$this->assertNotWPError( $result );
 		$this->assertInternalType( 'array', $result );
-		$this->assertEquals( 0, count( $result ) );
+		$this->assertSame( 0, count( $result ) );
 
 		$result = set_post_format( $post_id, '' );
 		$this->assertNotWPError( $result );
 		$this->assertInternalType( 'array', $result );
-		$this->assertEquals( 0, count( $result ) );
+		$this->assertSame( 0, count( $result ) );
 	}
 
 	/**
@@ -45,7 +45,7 @@ class Tests_Post_Formats extends WP_UnitTestCase {
 		$result = set_post_format( $post_id, 'aside' );
 		$this->assertNotWPError( $result );
 		$this->assertInternalType( 'array', $result );
-		$this->assertEquals( 1, count( $result ) );
+		$this->assertSame( 1, count( $result ) );
 		// The format can be set but not retrieved until it is registered.
 		$format = get_post_format( $post_id );
 		$this->assertFalse( $format );
@@ -53,17 +53,17 @@ class Tests_Post_Formats extends WP_UnitTestCase {
 		add_post_type_support( 'page', 'post-formats' );
 		// The previous set can now be retrieved.
 		$format = get_post_format( $post_id );
-		$this->assertEquals( 'aside', $format );
+		$this->assertSame( 'aside', $format );
 
 		$result = set_post_format( $post_id, 'standard' );
 		$this->assertNotWPError( $result );
 		$this->assertInternalType( 'array', $result );
-		$this->assertEquals( 0, count( $result ) );
+		$this->assertSame( 0, count( $result ) );
 
 		$result = set_post_format( $post_id, '' );
 		$this->assertNotWPError( $result );
 		$this->assertInternalType( 'array', $result );
-		$this->assertEquals( 0, count( $result ) );
+		$this->assertSame( 0, count( $result ) );
 
 		remove_post_type_support( 'page', 'post-formats' );
 	}
@@ -77,20 +77,20 @@ class Tests_Post_Formats extends WP_UnitTestCase {
 		$result = set_post_format( $post_id, 'aside' );
 		$this->assertNotWPError( $result );
 		$this->assertInternalType( 'array', $result );
-		$this->assertEquals( 1, count( $result ) );
+		$this->assertSame( 1, count( $result ) );
 		$this->assertTrue( has_post_format( 'aside', $post_id ) );
 
 		$result = set_post_format( $post_id, 'standard' );
 		$this->assertNotWPError( $result );
 		$this->assertInternalType( 'array', $result );
-		$this->assertEquals( 0, count( $result ) );
+		$this->assertSame( 0, count( $result ) );
 		// Standard is a special case. It shows as false when set.
 		$this->assertFalse( has_post_format( 'standard', $post_id ) );
 
-		// Dummy format type
+		// Dummy format type.
 		$this->assertFalse( has_post_format( 'dummy', $post_id ) );
 
-		// Dummy post id
+		// Dummy post ID.
 		$this->assertFalse( has_post_format( 'aside', 12345 ) );
 	}
 
@@ -113,47 +113,47 @@ $commentary
 DATA;
 		$link_post_id         = self::factory()->post->create( array( 'post_content' => $link ) );
 		$content_link         = get_url_in_content( get_post_field( 'post_content', $link_post_id ) );
-		$this->assertEquals( false, $content_link );
+		$this->assertFalse( $content_link );
 
 		$link_with_post_id = self::factory()->post->create( array( 'post_content' => $link_with_commentary ) );
 		$content_link      = get_url_in_content( get_post_field( 'post_content', $link_with_post_id ) );
-		$this->assertEquals( false, $content_link );
+		$this->assertFalse( $content_link );
 
 		$content_link = get_url_in_content( get_post_field( 'post_content', $link_post_id ) );
-		$this->assertEquals( false, $content_link );
+		$this->assertFalse( $content_link );
 
 		$content_link = get_url_in_content( get_post_field( 'post_content', $link_with_post_id ) );
-		$this->assertEquals( false, $content_link );
+		$this->assertFalse( $content_link );
 
 		$empty_post_id = self::factory()->post->create( array( 'post_content' => '' ) );
 		$content_link  = get_url_in_content( get_post_field( 'post_content', $empty_post_id ) );
-		$this->assertEquals( false, $content_link );
+		$this->assertFalse( $content_link );
 
 		$comm_post_id = self::factory()->post->create( array( 'post_content' => $commentary ) );
 		$content_link = get_url_in_content( get_post_field( 'post_content', $comm_post_id ) );
-		$this->assertEquals( false, $content_link );
+		$this->assertFalse( $content_link );
 
-		// Now with an href
+		// Now with an href.
 		$href_post_id = self::factory()->post->create( array( 'post_content' => $href ) );
 		$content_link = get_url_in_content( get_post_field( 'post_content', $href_post_id ) );
-		$this->assertEquals( $link, $content_link );
+		$this->assertSame( $link, $content_link );
 
 		$href_with_post_id = self::factory()->post->create( array( 'post_content' => $href_with_commentary ) );
 		$content_link      = get_url_in_content( get_post_field( 'post_content', $href_with_post_id ) );
-		$this->assertEquals( $link, $content_link );
+		$this->assertSame( $link, $content_link );
 
 		$content_link = get_url_in_content( get_post_field( 'post_content', $href_post_id ) );
-		$this->assertEquals( $link, $content_link );
+		$this->assertSame( $link, $content_link );
 
 		$content_link = get_url_in_content( get_post_field( 'post_content', $href_with_post_id ) );
-		$this->assertEquals( $link, $content_link );
+		$this->assertSame( $link, $content_link );
 
 		$empty_post_id = self::factory()->post->create( array( 'post_content' => '' ) );
 		$content_link  = get_url_in_content( get_post_field( 'post_content', $empty_post_id ) );
-		$this->assertEquals( false, $content_link );
+		$this->assertFalse( $content_link );
 
 		$comm_post_id = self::factory()->post->create( array( 'post_content' => $commentary ) );
 		$content_link = get_url_in_content( get_post_field( 'post_content', $comm_post_id ) );
-		$this->assertEquals( false, $content_link );
+		$this->assertFalse( $content_link );
 	}
 }
diff --git a/tests/post/getLastPostDate.php b/tests/post/getLastPostDate.php
new file mode 100644
index 0000000000..8941c52827
--- /dev/null
+++ b/tests/post/getLastPostDate.php
@@ -0,0 +1,58 @@
+<?php
+
+/**
+ * @group post
+ */
+class Tests_Post_GetLastPostDate extends WP_UnitTestCase {
+
+	/**
+	 * @ticket 47777
+	 */
+	public function test_get_lastpostdate() {
+		$post_post_date_first = '2020-01-30 16:09:28';
+		$post_post_date_last  = '2020-02-28 16:09:28';
+
+		$book_post_date_first = '2019-03-30 18:11:30';
+		$book_post_date_last  = '2019-04-30 18:11:30';
+
+		// Register book post type.
+		register_post_type( 'book', array( 'has_archive' => true ) );
+
+		// Create a simple post.
+		$simple_post_id_first = self::factory()->post->create(
+			array(
+				'post_title' => 'Simple Post First',
+				'post_type'  => 'post',
+				'post_date'  => $post_post_date_first,
+			)
+		);
+
+		$simple_post_id_last = self::factory()->post->create(
+			array(
+				'post_title' => 'Simple Post Last',
+				'post_type'  => 'post',
+				'post_date'  => $post_post_date_last,
+			)
+		);
+
+		// Create custom type post.
+		$book_cpt_id_first = self::factory()->post->create(
+			array(
+				'post_title' => 'Book CPT First',
+				'post_type'  => 'book',
+				'post_date'  => $book_post_date_first,
+			)
+		);
+
+		$book_cpt_id_last = self::factory()->post->create(
+			array(
+				'post_title' => 'Book CPT Last',
+				'post_type'  => 'book',
+				'post_date'  => $book_post_date_last,
+			)
+		);
+
+		$this->assertSame( $post_post_date_last, get_lastpostdate( 'blog', 'post' ) );
+		$this->assertSame( $book_post_date_last, get_lastpostdate( 'blog', 'book' ) );
+	}
+}
diff --git a/tests/post/getLastPostModified.php b/tests/post/getLastPostModified.php
new file mode 100644
index 0000000000..45b2cb651d
--- /dev/null
+++ b/tests/post/getLastPostModified.php
@@ -0,0 +1,109 @@
+<?php
+
+/**
+ * @group post
+ */
+class Tests_Post_GetLastPostModified extends WP_UnitTestCase {
+
+	/**
+	 * @ticket 47777
+	 */
+	public function test_get_lastpostmodified() {
+		global $wpdb;
+
+		$post_post_date_first     = '2020-01-30 16:09:28';
+		$post_post_modified_first = '2020-02-28 17:10:29';
+		$post_post_date_last      = '2020-03-30 18:11:30';
+		$post_post_modified_last  = '2020-04-30 19:12:31';
+
+		$book_post_date_first     = '2019-05-30 20:09:28';
+		$book_post_modified_first = '2019-06-30 21:10:29';
+		$book_post_date_last      = '2019-07-30 22:11:30';
+		$book_post_modified_last  = '2019-08-30 23:12:31';
+
+		// Register book post type.
+		register_post_type( 'book', array( 'has_archive' => true ) );
+
+		// Create a simple post.
+		$simple_post_id_first = self::factory()->post->create(
+			array(
+				'post_title' => 'Simple Post First',
+				'post_type'  => 'post',
+				'post_date'  => $post_post_date_first,
+			)
+		);
+
+		$simple_post_id_last = self::factory()->post->create(
+			array(
+				'post_title' => 'Simple Post Last',
+				'post_type'  => 'post',
+				'post_date'  => $post_post_date_last,
+			)
+		);
+
+		// Create custom type post.
+		$book_cpt_id_first = self::factory()->post->create(
+			array(
+				'post_title' => 'Book CPT First',
+				'post_type'  => 'book',
+				'post_date'  => $book_post_date_first,
+			)
+		);
+
+		$book_cpt_id_last = self::factory()->post->create(
+			array(
+				'post_title' => 'Book CPT Last',
+				'post_type'  => 'book',
+				'post_date'  => $book_post_date_last,
+			)
+		);
+
+		// Update `post_modified` and `post_modified_gmt`.
+		$wpdb->update(
+			$wpdb->posts,
+			array(
+				'post_modified'     => $post_post_modified_first,
+				'post_modified_gmt' => $post_post_modified_first,
+			),
+			array(
+				'ID' => $simple_post_id_first,
+			)
+		);
+
+		$wpdb->update(
+			$wpdb->posts,
+			array(
+				'post_modified'     => $post_post_modified_last,
+				'post_modified_gmt' => $post_post_modified_last,
+			),
+			array(
+				'ID' => $simple_post_id_last,
+			)
+		);
+
+		$wpdb->update(
+			$wpdb->posts,
+			array(
+				'post_modified'     => $book_post_modified_first,
+				'post_modified_gmt' => $book_post_modified_first,
+			),
+			array(
+				'ID' => $book_cpt_id_first,
+			)
+		);
+
+		$wpdb->update(
+			$wpdb->posts,
+			array(
+				'post_modified'     => $book_post_modified_last,
+				'post_modified_gmt' => $book_post_modified_last,
+			),
+			array(
+				'ID' => $book_cpt_id_last,
+			)
+		);
+
+		$this->assertSame( $post_post_modified_last, get_lastpostmodified( 'blog', 'post' ) );
+		$this->assertSame( $book_post_modified_last, get_lastpostmodified( 'blog', 'book' ) );
+	}
+}
diff --git a/tests/post/getPageByPath.php b/tests/post/getPageByPath.php
index 9b288b64f6..f7912b87be 100644
--- a/tests/post/getPageByPath.php
+++ b/tests/post/getPageByPath.php
@@ -34,8 +34,8 @@ class Tests_Post_GetPageByPath extends WP_UnitTestCase {
 
 		$page = get_post( $page->ID );
 
-		$this->assertEquals( 'some-page', $attachment->post_name );
-		$this->assertEquals( 'some-page', $page->post_name );
+		$this->assertSame( 'some-page', $attachment->post_name );
+		$this->assertSame( 'some-page', $page->post_name );
 
 		// get_page_by_path() should return a post of the requested type before returning an attachment.
 		$this->assertEquals( $page, get_page_by_path( 'some-page' ) );
diff --git a/tests/post/getPageChildren.php b/tests/post/getPageChildren.php
index 6bd9d453ce..c64b7550cf 100644
--- a/tests/post/getPageChildren.php
+++ b/tests/post/getPageChildren.php
@@ -68,28 +68,28 @@ class Tests_Post_GetPageChildren extends WP_UnitTestCase {
 	public function test_page_id_0_should_return_all_pages_in_tree_and_exclude_pages_not_in_tree() {
 		$expected = array( 100, 101, 102, 103, 105, 106, 107, 108 );
 		$actual   = get_page_children( 0, $this->pages );
-		$this->assertEqualSets( $expected, wp_list_pluck( $actual, 'ID' ) );
+		$this->assertSameSets( $expected, wp_list_pluck( $actual, 'ID' ) );
 	}
 
 	public function test_hierarchical_order_should_be_respected_in_results() {
 		$expected = array( 100, 101, 103, 102, 106, 107, 108, 105 );
 		$actual   = get_page_children( 0, $this->pages );
-		$this->assertEquals( $expected, wp_list_pluck( $actual, 'ID' ) );
+		$this->assertSame( $expected, wp_list_pluck( $actual, 'ID' ) );
 	}
 
 	public function test_not_all_pages_should_be_returned_when_page_id_is_in_the_middle_of_the_tree() {
 		$expected = array( 106, 107, 108 );
 		$actual   = get_page_children( 102, $this->pages );
-		$this->assertEquals( $expected, wp_list_pluck( $actual, 'ID' ) );
+		$this->assertSame( $expected, wp_list_pluck( $actual, 'ID' ) );
 	}
 
 	public function test_page_id_that_is_a_leaf_should_return_empty_array() {
 		$actual = get_page_children( 103, $this->pages );
-		$this->assertEquals( array(), $actual );
+		$this->assertSame( array(), $actual );
 	}
 
 	public function test_nonzero_page_id_not_matching_any_actual_post_id_should_return_empty_array() {
 		$actual = get_page_children( 200, $this->pages );
-		$this->assertEquals( array(), $actual );
+		$this->assertSame( array(), $actual );
 	}
 }
diff --git a/tests/post/getPageUri.php b/tests/post/getPageUri.php
index 8b82612b47..5e33944c09 100644
--- a/tests/post/getPageUri.php
+++ b/tests/post/getPageUri.php
@@ -16,7 +16,7 @@ class Tests_Post_getPageUri extends WP_UnitTestCase {
 		unset( $post_array->ancestors );
 
 		// Dummy assertion. If this test fails, it will actually error out on an E_WARNING.
-		$this->assertEquals( 'get-page-uri-post-name', get_page_uri( $post_array ) );
+		$this->assertSame( 'get-page-uri-post-name', get_page_uri( $post_array ) );
 	}
 
 	/**
@@ -40,15 +40,15 @@ class Tests_Post_getPageUri extends WP_UnitTestCase {
 			)
 		);
 
-		// check the parent for good measure
-		$this->assertEquals( 'parent', get_page_uri( $parent_id ) );
+		// Check the parent for good measure.
+		$this->assertSame( 'parent', get_page_uri( $parent_id ) );
 
-		// try the child normally
-		$this->assertEquals( 'parent/child', get_page_uri( $child_id ) );
+		// Try the child normally.
+		$this->assertSame( 'parent/child', get_page_uri( $child_id ) );
 
-		// now delete the parent from the database and check
+		// Now delete the parent from the database and check.
 		wp_delete_post( $parent_id, true );
-		$this->assertEquals( 'child', get_page_uri( $child_id ) );
+		$this->assertSame( 'child', get_page_uri( $child_id ) );
 	}
 
 	/**
@@ -71,7 +71,7 @@ class Tests_Post_getPageUri extends WP_UnitTestCase {
 			)
 		);
 
-		$this->assertEquals( 'child', get_page_uri( $child_id ) );
+		$this->assertSame( 'child', get_page_uri( $child_id ) );
 	}
 
 	/**
@@ -86,6 +86,6 @@ class Tests_Post_getPageUri extends WP_UnitTestCase {
 		);
 		$post    = get_post( $post_id );
 		$this->go_to( get_permalink( $post_id ) );
-		$this->assertEquals( 'blood-orange-announces-summer-tour-dates', get_page_uri() );
+		$this->assertSame( 'blood-orange-announces-summer-tour-dates', get_page_uri() );
 	}
 }
diff --git a/tests/post/getPages.php b/tests/post/getPages.php
index b92ff088b9..4950b5abb7 100644
--- a/tests/post/getPages.php
+++ b/tests/post/getPages.php
@@ -20,7 +20,7 @@ class Tests_Post_getPages extends WP_UnitTestCase {
 		$this->assertFalse( wp_cache_get( 'last_changed', 'posts' ) );
 
 		$pages = get_pages();
-		$this->assertEquals( 3, count( $pages ) );
+		$this->assertSame( 3, count( $pages ) );
 		$time1 = wp_cache_get( 'last_changed', 'posts' );
 		$this->assertNotEmpty( $time1 );
 		$num_queries = $wpdb->num_queries;
@@ -30,9 +30,9 @@ class Tests_Post_getPages extends WP_UnitTestCase {
 
 		// Again. num_queries and last_changed should remain the same.
 		$pages = get_pages();
-		$this->assertEquals( 3, count( $pages ) );
-		$this->assertEquals( $time1, wp_cache_get( 'last_changed', 'posts' ) );
-		$this->assertEquals( $num_queries, $wpdb->num_queries );
+		$this->assertSame( 3, count( $pages ) );
+		$this->assertSame( $time1, wp_cache_get( 'last_changed', 'posts' ) );
+		$this->assertSame( $num_queries, $wpdb->num_queries );
 		foreach ( $pages as $page ) {
 			$this->assertInstanceOf( 'WP_Post', $page );
 		}
@@ -40,9 +40,9 @@ class Tests_Post_getPages extends WP_UnitTestCase {
 		// Again with different args. last_changed should not increment because of
 		// different args to get_pages(). num_queries should bump by 1.
 		$pages = get_pages( array( 'number' => 2 ) );
-		$this->assertEquals( 2, count( $pages ) );
-		$this->assertEquals( $time1, wp_cache_get( 'last_changed', 'posts' ) );
-		$this->assertEquals( $num_queries + 1, $wpdb->num_queries );
+		$this->assertSame( 2, count( $pages ) );
+		$this->assertSame( $time1, wp_cache_get( 'last_changed', 'posts' ) );
+		$this->assertSame( $num_queries + 1, $wpdb->num_queries );
 		foreach ( $pages as $page ) {
 			$this->assertInstanceOf( 'WP_Post', $page );
 		}
@@ -51,18 +51,18 @@ class Tests_Post_getPages extends WP_UnitTestCase {
 
 		// Again. num_queries and last_changed should remain the same.
 		$pages = get_pages( array( 'number' => 2 ) );
-		$this->assertEquals( 2, count( $pages ) );
-		$this->assertEquals( $time1, wp_cache_get( 'last_changed', 'posts' ) );
-		$this->assertEquals( $num_queries, $wpdb->num_queries );
+		$this->assertSame( 2, count( $pages ) );
+		$this->assertSame( $time1, wp_cache_get( 'last_changed', 'posts' ) );
+		$this->assertSame( $num_queries, $wpdb->num_queries );
 		foreach ( $pages as $page ) {
 			$this->assertInstanceOf( 'WP_Post', $page );
 		}
 
 		// Do the first query again. The interim queries should not affect it.
 		$pages = get_pages();
-		$this->assertEquals( 3, count( $pages ) );
-		$this->assertEquals( $time1, wp_cache_get( 'last_changed', 'posts' ) );
-		$this->assertEquals( $num_queries, $wpdb->num_queries );
+		$this->assertSame( 3, count( $pages ) );
+		$this->assertSame( $time1, wp_cache_get( 'last_changed', 'posts' ) );
+		$this->assertSame( $num_queries, $wpdb->num_queries );
 		foreach ( $pages as $page ) {
 			$this->assertInstanceOf( 'WP_Post', $page );
 		}
@@ -75,9 +75,9 @@ class Tests_Post_getPages extends WP_UnitTestCase {
 
 		// last_changed bumped so num_queries should increment.
 		$pages = get_pages( array( 'number' => 2 ) );
-		$this->assertEquals( 2, count( $pages ) );
-		$this->assertEquals( $time2, wp_cache_get( 'last_changed', 'posts' ) );
-		$this->assertEquals( $num_queries + 1, $wpdb->num_queries );
+		$this->assertSame( 2, count( $pages ) );
+		$this->assertSame( $time2, wp_cache_get( 'last_changed', 'posts' ) );
+		$this->assertSame( $num_queries + 1, $wpdb->num_queries );
 		foreach ( $pages as $page ) {
 			$this->assertInstanceOf( 'WP_Post', $page );
 		}
@@ -95,9 +95,9 @@ class Tests_Post_getPages extends WP_UnitTestCase {
 
 		// num_queries should bump after wp_delete_post() bumps last_changed.
 		$pages = get_pages();
-		$this->assertEquals( 2, count( $pages ) );
-		$this->assertEquals( $last_changed, wp_cache_get( 'last_changed', 'posts' ) );
-		$this->assertEquals( $num_queries + 1, $wpdb->num_queries );
+		$this->assertSame( 2, count( $pages ) );
+		$this->assertSame( $last_changed, wp_cache_get( 'last_changed', 'posts' ) );
+		$this->assertSame( $num_queries + 1, $wpdb->num_queries );
 		foreach ( $pages as $page ) {
 			$this->assertInstanceOf( 'WP_Post', $page );
 		}
@@ -124,7 +124,7 @@ class Tests_Post_getPages extends WP_UnitTestCase {
 		);
 
 		$cached_ids = wp_list_pluck( $cached, 'ID' );
-		$this->assertEqualSets( array( $posts[0] ), $cached_ids );
+		$this->assertSameSets( array( $posts[0] ), $cached_ids );
 
 		add_post_meta( $posts[1], 'foo', 'bar' );
 
@@ -136,7 +136,7 @@ class Tests_Post_getPages extends WP_UnitTestCase {
 		);
 
 		$found_ids = wp_list_pluck( $found, 'ID' );
-		$this->assertEqualSets( $posts, $found_ids );
+		$this->assertSameSets( $posts, $found_ids );
 	}
 
 	/**
@@ -161,7 +161,7 @@ class Tests_Post_getPages extends WP_UnitTestCase {
 		);
 
 		$cached_ids = wp_list_pluck( $cached, 'ID' );
-		$this->assertEqualSets( $posts, $cached_ids );
+		$this->assertSameSets( $posts, $cached_ids );
 
 		update_post_meta( $posts[1], 'foo', 'baz' );
 
@@ -173,7 +173,7 @@ class Tests_Post_getPages extends WP_UnitTestCase {
 		);
 
 		$found_ids = wp_list_pluck( $found, 'ID' );
-		$this->assertEqualSets( array( $posts[0] ), $found_ids );
+		$this->assertSameSets( array( $posts[0] ), $found_ids );
 	}
 
 	/**
@@ -198,7 +198,7 @@ class Tests_Post_getPages extends WP_UnitTestCase {
 		);
 
 		$cached_ids = wp_list_pluck( $cached, 'ID' );
-		$this->assertEqualSets( $posts, $cached_ids );
+		$this->assertSameSets( $posts, $cached_ids );
 
 		delete_post_meta( $posts[1], 'foo' );
 
@@ -210,7 +210,7 @@ class Tests_Post_getPages extends WP_UnitTestCase {
 		);
 
 		$found_ids = wp_list_pluck( $found, 'ID' );
-		$this->assertEqualSets( array( $posts[0] ), $found_ids );
+		$this->assertSameSets( array( $posts[0] ), $found_ids );
 	}
 
 	/**
@@ -235,7 +235,7 @@ class Tests_Post_getPages extends WP_UnitTestCase {
 		);
 
 		$cached_ids = wp_list_pluck( $cached, 'ID' );
-		$this->assertEqualSets( $posts, $cached_ids );
+		$this->assertSameSets( $posts, $cached_ids );
 
 		delete_post_meta_by_key( 'foo' );
 
@@ -247,7 +247,7 @@ class Tests_Post_getPages extends WP_UnitTestCase {
 		);
 
 		$found_ids = wp_list_pluck( $found, 'ID' );
-		$this->assertEqualSets( array(), $found_ids );
+		$this->assertSameSets( array(), $found_ids );
 	}
 
 	/**
@@ -259,7 +259,7 @@ class Tests_Post_getPages extends WP_UnitTestCase {
 		add_post_meta( $posts[1], 'some-meta-key', '' );
 		add_post_meta( $posts[2], 'some-meta-key', '1' );
 
-		$this->assertEquals(
+		$this->assertSame(
 			1,
 			count(
 				get_pages(
@@ -270,7 +270,7 @@ class Tests_Post_getPages extends WP_UnitTestCase {
 				)
 			)
 		);
-		$this->assertEquals(
+		$this->assertSame(
 			1,
 			count(
 				get_pages(
@@ -281,7 +281,7 @@ class Tests_Post_getPages extends WP_UnitTestCase {
 				)
 			)
 		);
-		$this->assertEquals( 3, count( get_pages( array( 'meta_key' => 'some-meta-key' ) ) ) );
+		$this->assertSame( 3, count( get_pages( array( 'meta_key' => 'some-meta-key' ) ) ) );
 	}
 
 	/**
@@ -302,12 +302,12 @@ class Tests_Post_getPages extends WP_UnitTestCase {
 		$include    = get_pages( array( 'include' => $inc ) );
 		$inc_result = wp_list_pluck( $include, 'ID' );
 		sort( $inc_result );
-		$this->assertEquals( $inc, $inc_result );
+		$this->assertSame( $inc, $inc_result );
 
 		$exclude    = get_pages( array( 'exclude' => $exc ) );
 		$exc_result = wp_list_pluck( $exclude, 'ID' );
 		sort( $exc_result );
-		$this->assertEquals( $inc, $exc_result );
+		$this->assertSame( $inc, $exc_result );
 	}
 
 	/**
@@ -340,7 +340,7 @@ class Tests_Post_getPages extends WP_UnitTestCase {
 				'hierarchical' => false,
 			)
 		);
-		$this->assertEqualSets( array( $page_id1 ), wp_list_pluck( $pages, 'ID' ) );
+		$this->assertSameSets( array( $page_id1 ), wp_list_pluck( $pages, 'ID' ) );
 
 		$pages = get_pages(
 			array(
@@ -348,7 +348,7 @@ class Tests_Post_getPages extends WP_UnitTestCase {
 				'hierarchical' => false,
 			)
 		);
-		$this->assertEqualSets( array( $page_id2, $page_id4 ), wp_list_pluck( $pages, 'ID' ) );
+		$this->assertSameSets( array( $page_id2, $page_id4 ), wp_list_pluck( $pages, 'ID' ) );
 
 		$pages = get_pages(
 			array(
@@ -356,16 +356,16 @@ class Tests_Post_getPages extends WP_UnitTestCase {
 				'hierarchical' => false,
 			)
 		);
-		$this->assertEqualSets( array( $page_id2, $page_id3, $page_id4 ), wp_list_pluck( $pages, 'ID' ) );
+		$this->assertSameSets( array( $page_id2, $page_id3, $page_id4 ), wp_list_pluck( $pages, 'ID' ) );
 
 		$pages = get_pages( array( 'parent' => 0 ) );
-		$this->assertEqualSets( array( $page_id1 ), wp_list_pluck( $pages, 'ID' ) );
+		$this->assertSameSets( array( $page_id1 ), wp_list_pluck( $pages, 'ID' ) );
 
 		$pages = get_pages( array( 'parent' => $page_id1 ) );
-		$this->assertEqualSets( array( $page_id2, $page_id4 ), wp_list_pluck( $pages, 'ID' ) );
+		$this->assertSameSets( array( $page_id2, $page_id4 ), wp_list_pluck( $pages, 'ID' ) );
 
 		$pages = get_pages( array( 'parent' => array( $page_id1, $page_id2 ) ) );
-		$this->assertEqualSets( array( $page_id2, $page_id3, $page_id4 ), wp_list_pluck( $pages, 'ID' ) );
+		$this->assertSameSets( array( $page_id2, $page_id3, $page_id4 ), wp_list_pluck( $pages, 'ID' ) );
 	}
 
 	/**
@@ -376,7 +376,7 @@ class Tests_Post_getPages extends WP_UnitTestCase {
 
 		preg_match_all( '#<option#', wp_dropdown_pages( 'echo=0' ), $matches );
 
-		$this->assertEquals( 5, count( $matches[0] ) );
+		$this->assertSame( 5, count( $matches[0] ) );
 	}
 
 	/**
@@ -392,7 +392,7 @@ class Tests_Post_getPages extends WP_UnitTestCase {
 				'post_parent' => $post_id,
 			)
 		);
-		$this->assertEqualSets( $child_ids, $post_ids );
+		$this->assertSameSets( $child_ids, $post_ids );
 	}
 
 	/**
@@ -420,7 +420,7 @@ class Tests_Post_getPages extends WP_UnitTestCase {
 			)
 		);
 
-		$pages              = get_pages(); // Defaults: hierarchical = true, parent = -1
+		$pages              = get_pages(); // Defaults: hierarchical = true, parent = -1.
 		$pages_default_args = get_pages(
 			array(
 				'hierarchical' => true,
@@ -442,7 +442,7 @@ class Tests_Post_getPages extends WP_UnitTestCase {
 		 * If it doesn't, they will be in the creation order, 1,2,3,4.
 		 */
 
-		$this->assertEqualSets( array( $page_1, $page_2, $page_4, $page_3 ), wp_list_pluck( $pages, 'ID' ) );
+		$this->assertSameSets( array( $page_1, $page_2, $page_4, $page_3 ), wp_list_pluck( $pages, 'ID' ) );
 	}
 
 	/**
@@ -464,7 +464,7 @@ class Tests_Post_getPages extends WP_UnitTestCase {
 			)
 		);
 
-		$pages        = get_pages(); // Defaults: hierarchical = true, child_of = '', parent = -1
+		$pages        = get_pages(); // Defaults: hierarchical = true, child_of = '', parent = -1.
 		$default_args = get_pages(
 			array(
 				'hierarchical' => true,
@@ -488,7 +488,7 @@ class Tests_Post_getPages extends WP_UnitTestCase {
 
 		$found_pages = wp_list_filter( $pages, array( 'post_parent' => 0 ) );
 
-		$this->assertEqualSets( array( $page_1, $page_2 ), wp_list_pluck( $found_pages, 'ID' ) );
+		$this->assertSameSets( array( $page_1, $page_2 ), wp_list_pluck( $found_pages, 'ID' ) );
 	}
 
 	/**
@@ -510,7 +510,7 @@ class Tests_Post_getPages extends WP_UnitTestCase {
 			)
 		);
 
-		$pages = get_pages( array( 'hierarchical' => false ) ); // child_of = '', parent = -1
+		$pages = get_pages( array( 'hierarchical' => false ) ); // child_of = '', parent = -1.
 
 		/*
 		 * Page tree:
@@ -524,7 +524,7 @@ class Tests_Post_getPages extends WP_UnitTestCase {
 		 * in order of creation: 1, 2, 3, 4, regardless of parent.
 		 */
 
-		$this->assertEqualSets( array( $page_1, $page_2, $page_3, $page_4 ), wp_list_pluck( $pages, 'ID' ) );
+		$this->assertSameSets( array( $page_1, $page_2, $page_3, $page_4 ), wp_list_pluck( $pages, 'ID' ) );
 	}
 
 	/**
@@ -567,7 +567,7 @@ class Tests_Post_getPages extends WP_UnitTestCase {
 		 * hierarchically in order of creation: 3, 4, 5.
 		 */
 
-		$this->assertEqualSets( array( $page_3, $page_4, $page_5 ), wp_list_pluck( $pages, 'ID' ) );
+		$this->assertSameSets( array( $page_3, $page_4, $page_5 ), wp_list_pluck( $pages, 'ID' ) );
 	}
 
 	/**
@@ -614,11 +614,11 @@ class Tests_Post_getPages extends WP_UnitTestCase {
 		 * If hierarchical is false, and child_of is not empty, pages will (apparently) be returned
 		 * hierarchically anyway in order of creation: 3, 4, 5.
 		 */
-		$this->assertEqualSets( array( $page_3, $page_4, $page_5 ), wp_list_pluck( $pages, 'ID' ) );
+		$this->assertSameSets( array( $page_3, $page_4, $page_5 ), wp_list_pluck( $pages, 'ID' ) );
 
 		// How it should work.
 		$found_pages = wp_list_filter( $pages, array( 'post_parent' => $page_1 ) );
-		$this->assertEqualSets( array( $page_3, $page_5 ), wp_list_pluck( $found_pages, 'ID' ) );
+		$this->assertSameSets( array( $page_3, $page_5 ), wp_list_pluck( $found_pages, 'ID' ) );
 
 	}
 
@@ -637,7 +637,7 @@ class Tests_Post_getPages extends WP_UnitTestCase {
 
 		$this->go_to( "/?p=$post_id&post_type=$type" );
 
-		$this->assertEquals( $post_id, get_queried_object_id() );
+		$this->assertSame( $post_id, get_queried_object_id() );
 
 		$output = wp_list_pages(
 			array(
@@ -648,9 +648,9 @@ class Tests_Post_getPages extends WP_UnitTestCase {
 		);
 
 		$this->assertNotEmpty( $output );
-		$this->assertEquals( 2, substr_count( $output, 'class="page_item ' ) );
+		$this->assertSame( 2, substr_count( $output, 'class="page_item ' ) );
 		$this->assertContains( 'current_page_item', $output );
-		$this->assertEquals( 1, substr_count( $output, 'current_page_item' ) );
+		$this->assertSame( 1, substr_count( $output, 'current_page_item' ) );
 
 		_unregister_post_type( $type );
 	}
@@ -713,14 +713,14 @@ class Tests_Post_getPages extends WP_UnitTestCase {
 
 		$num_queries = $wpdb->num_queries;
 
-		$pages = get_pages(); // Database gets queried
+		$pages = get_pages(); // Database gets queried.
 
-		$this->assertEquals( $num_queries + 1, $wpdb->num_queries );
+		$this->assertSame( $num_queries + 1, $wpdb->num_queries );
 
 		$num_queries = $wpdb->num_queries;
 
-		$pages = get_pages(); // Database should not get queried
+		$pages = get_pages(); // Database should not get queried.
 
-		$this->assertEquals( $num_queries, $wpdb->num_queries );
+		$this->assertSame( $num_queries, $wpdb->num_queries );
 	}
 }
diff --git a/tests/post/getPostClass.php b/tests/post/getPostClass.php
index 12205f0506..03ebac49df 100644
--- a/tests/post/getPostClass.php
+++ b/tests/post/getPostClass.php
@@ -48,9 +48,9 @@ class Tests_Post_GetPostClass extends WP_UnitTestCase {
 	 * @ticket 22271
 	 */
 	public function test_with_custom_classes_and_no_post() {
-		$this->assertEquals( array(), get_post_class( '', null ) );
-		$this->assertEquals( array( 'foo' ), get_post_class( 'foo', null ) );
-		$this->assertEquals( array( 'foo', 'bar' ), get_post_class( array( 'foo', 'bar' ), null ) );
+		$this->assertSame( array(), get_post_class( '', null ) );
+		$this->assertSame( array( 'foo' ), get_post_class( 'foo', null ) );
+		$this->assertSame( array( 'foo', 'bar' ), get_post_class( array( 'foo', 'bar' ), null ) );
 	}
 
 	/**
diff --git a/tests/post/getTheContent.php b/tests/post/getTheContent.php
index 7bb14a1f93..54b8fe318e 100644
--- a/tests/post/getTheContent.php
+++ b/tests/post/getTheContent.php
@@ -75,4 +75,13 @@ class Tests_Post_GetTheContent extends WP_UnitTestCase {
 
 		$this->assertSame( 'Bang', $found );
 	}
+
+	/**
+	 * @ticket 47824
+	 */
+	public function test_should_fall_back_to_post_global_outside_of_the_loop() {
+		$GLOBALS['post'] = self::factory()->post->create( array( 'post_content' => 'Foo' ) );
+
+		$this->assertSame( 'Foo', get_the_content() );
+	}
 }
diff --git a/tests/post/listPages.php b/tests/post/listPages.php
index 01efc5157d..ba9562261c 100644
--- a/tests/post/listPages.php
+++ b/tests/post/listPages.php
@@ -5,35 +5,42 @@
  */
 class Tests_List_Pages extends WP_UnitTestCase {
 	/**
-	 * Author user id.
+	 * Editor user ID.
+	 *
+	 * @var int
+	 */
+	public static $editor;
+
+	/**
+	 * Author user ID.
 	 *
 	 * @var int
 	 */
 	public static $author;
 
 	/**
-	 * Parent page id.
+	 * Parent page ID.
 	 *
 	 * @var int
 	 */
 	public static $parent_1;
 
 	/**
-	 * Parent page id.
+	 * Parent page ID.
 	 *
 	 * @var int
 	 */
 	public static $parent_2;
 
 	/**
-	 * Parent page id.
+	 * Parent page ID.
 	 *
 	 * @var int
 	 */
 	public static $parent_3;
 
 	/**
-	 * Child page ids.
+	 * Child page IDs.
 	 *
 	 * @var array
 	 */
@@ -51,16 +58,18 @@ class Tests_List_Pages extends WP_UnitTestCase {
 
 		$post_date = gmdate( 'Y-m-d H:i:s', self::$time );
 
+		self::$editor = self::factory()->user->create( array( 'role' => 'editor' ) );
+		self::$author = self::factory()->user->create( array( 'role' => 'author' ) );
+
 		self::$parent_1 = self::factory()->post->create(
 			array(
-				'post_type'  => 'page',
-				'post_title' => 'Parent 1',
-				'post_date'  => $post_date,
+				'post_author' => self::$editor,
+				'post_type'   => 'page',
+				'post_title'  => 'Parent 1',
+				'post_date'   => $post_date,
 			)
 		);
 
-		self::$author = self::factory()->user->create( array( 'role' => 'author' ) );
-
 		self::$parent_2 = self::factory()->post->create(
 			array(
 				'post_type'  => 'page',
@@ -134,7 +143,7 @@ class Tests_List_Pages extends WP_UnitTestCase {
 </li>
 </ul></li>';
 
-		$this->assertEqualsIgnoreEOL( $expected, wp_list_pages( $args ) );
+		$this->assertSameIgnoreEOL( $expected, wp_list_pages( $args ) );
 	}
 
 	function test_wp_list_pages_depth() {
@@ -148,7 +157,7 @@ class Tests_List_Pages extends WP_UnitTestCase {
 <li class="page_item page-item-' . self::$parent_3 . ' page_item_has_children"><a href="' . get_permalink( self::$parent_3 ) . '">Parent 3</a></li>
 </ul></li>';
 
-		$this->assertEqualsIgnoreEOL( $expected, wp_list_pages( $args ) );
+		$this->assertSameIgnoreEOL( $expected, wp_list_pages( $args ) );
 	}
 
 	function test_wp_list_pages_show_date() {
@@ -164,7 +173,7 @@ class Tests_List_Pages extends WP_UnitTestCase {
 <li class="page_item page-item-' . self::$parent_3 . ' page_item_has_children"><a href="' . get_permalink( self::$parent_3 ) . '">Parent 3</a> ' . $date . '</li>
 </ul></li>';
 
-		$this->assertEqualsIgnoreEOL( $expected, wp_list_pages( $args ) );
+		$this->assertSameIgnoreEOL( $expected, wp_list_pages( $args ) );
 	}
 
 	function test_wp_list_pages_date_format() {
@@ -198,7 +207,7 @@ class Tests_List_Pages extends WP_UnitTestCase {
 </li>
 </ul></li>';
 
-		$this->assertEqualsIgnoreEOL( $expected, wp_list_pages( $args ) );
+		$this->assertSameIgnoreEOL( $expected, wp_list_pages( $args ) );
 	}
 
 	function test_wp_list_pages_child_of() {
@@ -212,7 +221,7 @@ class Tests_List_Pages extends WP_UnitTestCase {
 <li class="page_item page-item-' . self::$children[ self::$parent_2 ][2] . '"><a href="' . get_permalink( self::$children[ self::$parent_2 ][2] ) . '">Child 3</a></li>
 </ul></li>';
 
-		$this->assertEqualsIgnoreEOL( $expected, wp_list_pages( $args ) );
+		$this->assertSameIgnoreEOL( $expected, wp_list_pages( $args ) );
 	}
 
 	function test_wp_list_pages_exclude() {
@@ -240,7 +249,7 @@ class Tests_List_Pages extends WP_UnitTestCase {
 <li class="page_item page-item-' . self::$children[ self::$parent_2 ][2] . '"><a href="' . get_permalink( self::$children[ self::$parent_2 ][2] ) . '">Child 3</a></li>
 </ul></li>';
 
-		$this->assertEqualsIgnoreEOL( $expected, wp_list_pages( $args ) );
+		$this->assertSameIgnoreEOL( $expected, wp_list_pages( $args ) );
 	}
 
 	function test_wp_list_pages_title_li() {
@@ -255,7 +264,7 @@ class Tests_List_Pages extends WP_UnitTestCase {
 <li class="page_item page-item-' . self::$parent_3 . ' page_item_has_children"><a href="' . get_permalink( self::$parent_3 ) . '">Parent 3</a></li>
 </ul></li>';
 
-		$this->assertEqualsIgnoreEOL( $expected, wp_list_pages( $args ) );
+		$this->assertSameIgnoreEOL( $expected, wp_list_pages( $args ) );
 	}
 
 	function test_wp_list_pages_echo() {
@@ -282,52 +291,36 @@ class Tests_List_Pages extends WP_UnitTestCase {
 		$expected = '<li class="pagenav">Pages<ul><li class="page_item page-item-' . self::$parent_3 . '"><a href="' . get_permalink( self::$parent_3 ) . '">Parent 3</a></li>
 </ul></li>';
 
-		$this->assertEqualsIgnoreEOL( $expected, wp_list_pages( $args ) );
+		$this->assertSameIgnoreEOL( $expected, wp_list_pages( $args ) );
 	}
 
 	function test_wp_list_pages_number() {
 		$args = array(
-			'echo'   => false,
-			'number' => 1,
+			'echo'        => false,
+			'number'      => 1,
+			'sort_column' => 'ID',
 		);
 
-		$expected = '<li class="pagenav">Pages<ul><li class="page_item page-item-' . self::$children[ self::$parent_1 ][0] . '"><a href="' . get_permalink( self::$children[ self::$parent_1 ][0] ) . '">Child 1</a></li>
+		$expected = '<li class="pagenav">Pages<ul><li class="page_item page-item-' . self::$parent_1 . '"><a href="' . get_permalink( self::$parent_1 ) . '">Parent 1</a></li>
 </ul></li>';
 
-		$this->assertEqualsIgnoreEOL( $expected, wp_list_pages( $args ) );
+		$this->assertSameIgnoreEOL( $expected, wp_list_pages( $args ) );
 	}
 
 	function test_wp_list_pages_sort_column() {
 		$args = array(
 			'echo'        => false,
+			'depth'       => 1,
 			'sort_column' => 'post_author',
 			'sort_order'  => 'DESC',
 		);
 
-		$expected = '<li class="pagenav">Pages<ul><li class="page_item page-item-' . self::$parent_3 . ' page_item_has_children"><a href="' . get_permalink( self::$parent_3 ) . '">Parent 3</a>
-<ul class=\'children\'>
-	<li class="page_item page-item-' . self::$children[ self::$parent_3 ][0] . '"><a href="' . get_permalink( self::$children[ self::$parent_3 ][0] ) . '">Child 1</a></li>
-	<li class="page_item page-item-' . self::$children[ self::$parent_3 ][1] . '"><a href="' . get_permalink( self::$children[ self::$parent_3 ][1] ) . '">Child 2</a></li>
-	<li class="page_item page-item-' . self::$children[ self::$parent_3 ][2] . '"><a href="' . get_permalink( self::$children[ self::$parent_3 ][2] ) . '">Child 3</a></li>
-</ul>
-</li>
-<li class="page_item page-item-' . self::$parent_1 . ' page_item_has_children"><a href="' . get_permalink( self::$parent_1 ) . '">Parent 1</a>
-<ul class=\'children\'>
-	<li class="page_item page-item-' . self::$children[ self::$parent_1 ][0] . '"><a href="' . get_permalink( self::$children[ self::$parent_1 ][0] ) . '">Child 1</a></li>
-	<li class="page_item page-item-' . self::$children[ self::$parent_1 ][1] . '"><a href="' . get_permalink( self::$children[ self::$parent_1 ][1] ) . '">Child 2</a></li>
-	<li class="page_item page-item-' . self::$children[ self::$parent_1 ][2] . '"><a href="' . get_permalink( self::$children[ self::$parent_1 ][2] ) . '">Child 3</a></li>
-</ul>
-</li>
-<li class="page_item page-item-' . self::$parent_2 . ' page_item_has_children"><a href="' . get_permalink( self::$parent_2 ) . '">Parent 2</a>
-<ul class=\'children\'>
-	<li class="page_item page-item-' . self::$children[ self::$parent_2 ][0] . '"><a href="' . get_permalink( self::$children[ self::$parent_2 ][0] ) . '">Child 1</a></li>
-	<li class="page_item page-item-' . self::$children[ self::$parent_2 ][1] . '"><a href="' . get_permalink( self::$children[ self::$parent_2 ][1] ) . '">Child 2</a></li>
-	<li class="page_item page-item-' . self::$children[ self::$parent_2 ][2] . '"><a href="' . get_permalink( self::$children[ self::$parent_2 ][2] ) . '">Child 3</a></li>
-</ul>
-</li>
+		$expected = '<li class="pagenav">Pages<ul><li class="page_item page-item-' . self::$parent_3 . ' page_item_has_children"><a href="' . get_permalink( self::$parent_3 ) . '">Parent 3</a></li>
+<li class="page_item page-item-' . self::$parent_1 . ' page_item_has_children"><a href="' . get_permalink( self::$parent_1 ) . '">Parent 1</a></li>
+<li class="page_item page-item-' . self::$parent_2 . ' page_item_has_children"><a href="' . get_permalink( self::$parent_2 ) . '">Parent 2</a></li>
 </ul></li>';
 
-		$this->assertEqualsIgnoreEOL( $expected, wp_list_pages( $args ) );
+		$this->assertSameIgnoreEOL( $expected, wp_list_pages( $args ) );
 	}
 
 	function test_wp_list_pages_link_before() {
@@ -359,7 +352,7 @@ class Tests_List_Pages extends WP_UnitTestCase {
 </li>
 </ul></li>';
 
-		$this->assertEqualsIgnoreEOL( $expected, wp_list_pages( $args ) );
+		$this->assertSameIgnoreEOL( $expected, wp_list_pages( $args ) );
 	}
 
 	function test_wp_list_pages_link_after() {
@@ -391,7 +384,7 @@ class Tests_List_Pages extends WP_UnitTestCase {
 </li>
 </ul></li>';
 
-		$this->assertEqualsIgnoreEOL( $expected, wp_list_pages( $args ) );
+		$this->assertSameIgnoreEOL( $expected, wp_list_pages( $args ) );
 	}
 
 
@@ -405,7 +398,7 @@ class Tests_List_Pages extends WP_UnitTestCase {
 <li class="page_item page-item-' . self::$parent_3 . '"><a href="' . get_permalink( self::$parent_3 ) . '">Parent 3</a></li>
 </ul></li>';
 
-		$this->assertEqualsIgnoreEOL( $expected, wp_list_pages( $args ) );
+		$this->assertSameIgnoreEOL( $expected, wp_list_pages( $args ) );
 	}
 
 	function test_wp_list_pages_exclude_tree() {
@@ -423,7 +416,7 @@ class Tests_List_Pages extends WP_UnitTestCase {
 </li>
 </ul></li>';
 
-		$this->assertEqualsIgnoreEOL( $expected, wp_list_pages( $args ) );
+		$this->assertSameIgnoreEOL( $expected, wp_list_pages( $args ) );
 	}
 
 	function test_wp_list_pages_discarded_whitespace() {
@@ -432,8 +425,27 @@ class Tests_List_Pages extends WP_UnitTestCase {
 			'item_spacing' => 'discard',
 		);
 
-		$expected = '<li class="pagenav">Pages<ul><li class="page_item page-item-' . self::$parent_1 . ' page_item_has_children"><a href="' . get_permalink( self::$parent_1 ) . '">Parent 1</a><ul class=\'children\'><li class="page_item page-item-' . self::$children[ self::$parent_1 ][0] . '"><a href="' . get_permalink( self::$children[ self::$parent_1 ][0] ) . '">Child 1</a></li><li class="page_item page-item-' . self::$children[ self::$parent_1 ][1] . '"><a href="' . get_permalink( self::$children[ self::$parent_1 ][1] ) . '">Child 2</a></li><li class="page_item page-item-' . self::$children[ self::$parent_1 ][2] . '"><a href="' . get_permalink( self::$children[ self::$parent_1 ][2] ) . '">Child 3</a></li></ul></li><li class="page_item page-item-' . self::$parent_2 . ' page_item_has_children"><a href="' . get_permalink( self::$parent_2 ) . '">Parent 2</a><ul class=\'children\'><li class="page_item page-item-' . self::$children[ self::$parent_2 ][0] . '"><a href="' . get_permalink( self::$children[ self::$parent_2 ][0] ) . '">Child 1</a></li><li class="page_item page-item-' . self::$children[ self::$parent_2 ][1] . '"><a href="' . get_permalink( self::$children[ self::$parent_2 ][1] ) . '">Child 2</a></li><li class="page_item page-item-' . self::$children[ self::$parent_2 ][2] . '"><a href="' . get_permalink( self::$children[ self::$parent_2 ][2] ) . '">Child 3</a></li></ul></li><li class="page_item page-item-' . self::$parent_3 . ' page_item_has_children"><a href="' . get_permalink( self::$parent_3 ) . '">Parent 3</a><ul class=\'children\'><li class="page_item page-item-' . self::$children[ self::$parent_3 ][0] . '"><a href="' . get_permalink( self::$children[ self::$parent_3 ][0] ) . '">Child 1</a></li><li class="page_item page-item-' . self::$children[ self::$parent_3 ][1] . '"><a href="' . get_permalink( self::$children[ self::$parent_3 ][1] ) . '">Child 2</a></li><li class="page_item page-item-' . self::$children[ self::$parent_3 ][2] . '"><a href="' . get_permalink( self::$children[ self::$parent_3 ][2] ) . '">Child 3</a></li></ul></li></ul></li>';
+		$expected = '<li class="pagenav">Pages<ul><li class="page_item page-item-' . self::$parent_1 . ' page_item_has_children"><a href="' . get_permalink( self::$parent_1 ) . '">Parent 1</a>
+<ul class=\'children\'><li class="page_item page-item-' . self::$children[ self::$parent_1 ][0] . '"><a href="' . get_permalink( self::$children[ self::$parent_1 ][0] ) . '">Child 1</a></li>
+	<li class="page_item page-item-' . self::$children[ self::$parent_1 ][1] . '"><a href="' . get_permalink( self::$children[ self::$parent_1 ][1] ) . '">Child 2</a></li>
+	<li class="page_item page-item-' . self::$children[ self::$parent_1 ][2] . '"><a href="' . get_permalink( self::$children[ self::$parent_1 ][2] ) . '">Child 3</a></li>
+</ul>
+</li>
+<li class="page_item page-item-' . self::$parent_2 . ' page_item_has_children"><a href="' . get_permalink( self::$parent_2 ) . '">Parent 2</a>
+<ul class=\'children\'><li class="page_item page-item-' . self::$children[ self::$parent_2 ][0] . '"><a href="' . get_permalink( self::$children[ self::$parent_2 ][0] ) . '">Child 1</a></li>
+	<li class="page_item page-item-' . self::$children[ self::$parent_2 ][1] . '"><a href="' . get_permalink( self::$children[ self::$parent_2 ][1] ) . '">Child 2</a></li>
+	<li class="page_item page-item-' . self::$children[ self::$parent_2 ][2] . '"><a href="' . get_permalink( self::$children[ self::$parent_2 ][2] ) . '">Child 3</a></li>
+</ul>
+</li>
+<li class="page_item page-item-' . self::$parent_3 . ' page_item_has_children"><a href="' . get_permalink( self::$parent_3 ) . '">Parent 3</a>
+<ul class=\'children\'><li class="page_item page-item-' . self::$children[ self::$parent_3 ][0] . '"><a href="' . get_permalink( self::$children[ self::$parent_3 ][0] ) . '">Child 1</a></li>
+	<li class="page_item page-item-' . self::$children[ self::$parent_3 ][1] . '"><a href="' . get_permalink( self::$children[ self::$parent_3 ][1] ) . '">Child 2</a></li>
+	<li class="page_item page-item-' . self::$children[ self::$parent_3 ][2] . '"><a href="' . get_permalink( self::$children[ self::$parent_3 ][2] ) . '">Child 3</a></li>
+</ul>
+</li>
+</ul></li>';
+		$expected = str_replace( array( "\r\n", "\n", "\t" ), '', $expected );
 
-		$this->assertEquals( $expected, wp_list_pages( $args ) );
+		$this->assertSame( $expected, wp_list_pages( $args ) );
 	}
 }
diff --git a/tests/post/meta.php b/tests/post/meta.php
index a79228c070..369deef954 100644
--- a/tests/post/meta.php
+++ b/tests/post/meta.php
@@ -45,51 +45,51 @@ class Tests_Post_Meta extends WP_UnitTestCase {
 	}
 
 	function test_unique_postmeta() {
-		// Add a unique post meta item
+		// Add a unique post meta item.
 		$this->assertInternalType( 'integer', add_post_meta( self::$post_id, 'unique', 'value', true ) );
 
-		// Check unique is enforced
+		// Check unique is enforced.
 		$this->assertFalse( add_post_meta( self::$post_id, 'unique', 'another value', true ) );
 
-		//Check it exists
-		$this->assertEquals( 'value', get_post_meta( self::$post_id, 'unique', true ) );
-		$this->assertEquals( array( 'value' ), get_post_meta( self::$post_id, 'unique', false ) );
+		// Check it exists.
+		$this->assertSame( 'value', get_post_meta( self::$post_id, 'unique', true ) );
+		$this->assertSame( array( 'value' ), get_post_meta( self::$post_id, 'unique', false ) );
 
-		//Fail to delete the wrong value
+		// Fail to delete the wrong value.
 		$this->assertFalse( delete_post_meta( self::$post_id, 'unique', 'wrong value' ) );
 
-		//Delete it
+		// Delete it.
 		$this->assertTrue( delete_post_meta( self::$post_id, 'unique', 'value' ) );
 
-		//Check it is deleted
-		$this->assertEquals( '', get_post_meta( self::$post_id, 'unique', true ) );
-		$this->assertEquals( array(), get_post_meta( self::$post_id, 'unique', false ) );
+		// Check it is deleted.
+		$this->assertSame( '', get_post_meta( self::$post_id, 'unique', true ) );
+		$this->assertSame( array(), get_post_meta( self::$post_id, 'unique', false ) );
 
 	}
 
 	function test_nonunique_postmeta() {
-		// Add two non unique post meta item
+		// Add two non-unique post meta items.
 		$this->assertInternalType( 'integer', add_post_meta( self::$post_id, 'nonunique', 'value' ) );
 		$this->assertInternalType( 'integer', add_post_meta( self::$post_id, 'nonunique', 'another value' ) );
 
-		//Check they exists
-		$this->assertEquals( 'value', get_post_meta( self::$post_id, 'nonunique', true ) );
-		$this->assertEquals( array( 'value', 'another value' ), get_post_meta( self::$post_id, 'nonunique', false ) );
+		// Check they exist.
+		$this->assertSame( 'value', get_post_meta( self::$post_id, 'nonunique', true ) );
+		$this->assertSame( array( 'value', 'another value' ), get_post_meta( self::$post_id, 'nonunique', false ) );
 
-		//Fail to delete the wrong value
+		// Fail to delete the wrong value.
 		$this->assertFalse( delete_post_meta( self::$post_id, 'nonunique', 'wrong value' ) );
 
-		//Delete the first one
+		// Delete the first one.
 		$this->assertTrue( delete_post_meta( self::$post_id, 'nonunique', 'value' ) );
 
-		//Check the remainder exists
-		$this->assertEquals( 'another value', get_post_meta( self::$post_id, 'nonunique', true ) );
-		$this->assertEquals( array( 'another value' ), get_post_meta( self::$post_id, 'nonunique', false ) );
+		// Check the remainder exists.
+		$this->assertSame( 'another value', get_post_meta( self::$post_id, 'nonunique', true ) );
+		$this->assertSame( array( 'another value' ), get_post_meta( self::$post_id, 'nonunique', false ) );
 
-		//Add a third one
+		// Add a third one.
 		$this->assertInternalType( 'integer', add_post_meta( self::$post_id, 'nonunique', 'someother value' ) );
 
-		//Check they exists
+		// Check they exist.
 		$expected = array(
 			'someother value',
 			'another value',
@@ -98,71 +98,71 @@ class Tests_Post_Meta extends WP_UnitTestCase {
 		$this->assertTrue( in_array( get_post_meta( self::$post_id, 'nonunique', true ), $expected, true ) );
 		$actual = get_post_meta( self::$post_id, 'nonunique', false );
 		sort( $actual );
-		$this->assertEquals( $expected, $actual );
+		$this->assertSame( $expected, $actual );
 
-		//Delete the lot
+		// Delete the lot.
 		$this->assertTrue( delete_post_meta_by_key( 'nonunique' ) );
 	}
 
 	function test_update_post_meta() {
-		// Add a unique post meta item
+		// Add a unique post meta item.
 		$this->assertInternalType( 'integer', add_post_meta( self::$post_id, 'unique_update', 'value', true ) );
 
-		// Add two non unique post meta item
+		// Add two non-unique post meta items.
 		$this->assertInternalType( 'integer', add_post_meta( self::$post_id, 'nonunique_update', 'value' ) );
 		$this->assertInternalType( 'integer', add_post_meta( self::$post_id, 'nonunique_update', 'another value' ) );
 
-		//Check they exists
-		$this->assertEquals( 'value', get_post_meta( self::$post_id, 'unique_update', true ) );
-		$this->assertEquals( array( 'value' ), get_post_meta( self::$post_id, 'unique_update', false ) );
-		$this->assertEquals( 'value', get_post_meta( self::$post_id, 'nonunique_update', true ) );
-		$this->assertEquals( array( 'value', 'another value' ), get_post_meta( self::$post_id, 'nonunique_update', false ) );
+		// Check they exist.
+		$this->assertSame( 'value', get_post_meta( self::$post_id, 'unique_update', true ) );
+		$this->assertSame( array( 'value' ), get_post_meta( self::$post_id, 'unique_update', false ) );
+		$this->assertSame( 'value', get_post_meta( self::$post_id, 'nonunique_update', true ) );
+		$this->assertSame( array( 'value', 'another value' ), get_post_meta( self::$post_id, 'nonunique_update', false ) );
 
-		// Update them
+		// Update them.
 		$this->assertTrue( update_post_meta( self::$post_id, 'unique_update', 'new', 'value' ) );
 		$this->assertTrue( update_post_meta( self::$post_id, 'nonunique_update', 'new', 'value' ) );
 		$this->assertTrue( update_post_meta( self::$post_id, 'nonunique_update', 'another new', 'another value' ) );
 
-		//Check they updated
-		$this->assertEquals( 'new', get_post_meta( self::$post_id, 'unique_update', true ) );
-		$this->assertEquals( array( 'new' ), get_post_meta( self::$post_id, 'unique_update', false ) );
-		$this->assertEquals( 'new', get_post_meta( self::$post_id, 'nonunique_update', true ) );
-		$this->assertEquals( array( 'new', 'another new' ), get_post_meta( self::$post_id, 'nonunique_update', false ) );
+		// Check they updated.
+		$this->assertSame( 'new', get_post_meta( self::$post_id, 'unique_update', true ) );
+		$this->assertSame( array( 'new' ), get_post_meta( self::$post_id, 'unique_update', false ) );
+		$this->assertSame( 'new', get_post_meta( self::$post_id, 'nonunique_update', true ) );
+		$this->assertSame( array( 'new', 'another new' ), get_post_meta( self::$post_id, 'nonunique_update', false ) );
 
 	}
 
 	function test_delete_post_meta() {
-		// Add a unique post meta item
+		// Add two unique post meta items.
 		$this->assertInternalType( 'integer', add_post_meta( self::$post_id, 'unique_delete', 'value', true ) );
 		$this->assertInternalType( 'integer', add_post_meta( self::$post_id_2, 'unique_delete', 'value', true ) );
 
-		//Check they exists
-		$this->assertEquals( 'value', get_post_meta( self::$post_id, 'unique_delete', true ) );
-		$this->assertEquals( 'value', get_post_meta( self::$post_id_2, 'unique_delete', true ) );
+		// Check they exist.
+		$this->assertSame( 'value', get_post_meta( self::$post_id, 'unique_delete', true ) );
+		$this->assertSame( 'value', get_post_meta( self::$post_id_2, 'unique_delete', true ) );
 
-		//Delete one of them
+		// Delete one of them.
 		$this->assertTrue( delete_post_meta( self::$post_id, 'unique_delete', 'value' ) );
 
-		//Check the other still exitsts
-		$this->assertEquals( 'value', get_post_meta( self::$post_id_2, 'unique_delete', true ) );
+		// Check the other still exists.
+		$this->assertSame( 'value', get_post_meta( self::$post_id_2, 'unique_delete', true ) );
 
 	}
 
 	function test_delete_post_meta_by_key() {
-		// Add a unique post meta item
+		// Add two unique post meta items.
 		$this->assertInternalType( 'integer', add_post_meta( self::$post_id, 'unique_delete_by_key', 'value', true ) );
 		$this->assertInternalType( 'integer', add_post_meta( self::$post_id_2, 'unique_delete_by_key', 'value', true ) );
 
-		//Check they exist
-		$this->assertEquals( 'value', get_post_meta( self::$post_id, 'unique_delete_by_key', true ) );
-		$this->assertEquals( 'value', get_post_meta( self::$post_id_2, 'unique_delete_by_key', true ) );
+		// Check they exist.
+		$this->assertSame( 'value', get_post_meta( self::$post_id, 'unique_delete_by_key', true ) );
+		$this->assertSame( 'value', get_post_meta( self::$post_id_2, 'unique_delete_by_key', true ) );
 
-		//Delete one of them
+		// Delete one of them.
 		$this->assertTrue( delete_post_meta_by_key( 'unique_delete_by_key' ) );
 
-		//Check the other still exists
-		$this->assertEquals( '', get_post_meta( self::$post_id_2, 'unique_delete_by_key', true ) );
-		$this->assertEquals( '', get_post_meta( self::$post_id_2, 'unique_delete_by_key', true ) );
+		// Check the other still exists.
+		$this->assertSame( '', get_post_meta( self::$post_id_2, 'unique_delete_by_key', true ) );
+		$this->assertSame( '', get_post_meta( self::$post_id_2, 'unique_delete_by_key', true ) );
 	}
 
 	function test_get_post_meta_by_id() {
@@ -196,35 +196,35 @@ class Tests_Post_Meta extends WP_UnitTestCase {
 	}
 
 	function test_update_meta() {
-		// Add a unique post meta item
+		// Add a unique post meta item.
 		$this->assertInternalType( 'integer', $mid1 = add_post_meta( self::$post_id, 'unique_update', 'value', true ) );
 
-		// Add two non unique post meta item
+		// Add two non-unique post meta items.
 		$this->assertInternalType( 'integer', $mid2 = add_post_meta( self::$post_id, 'nonunique_update', 'value' ) );
 		$this->assertInternalType( 'integer', $mid3 = add_post_meta( self::$post_id, 'nonunique_update', 'another value' ) );
 
-		//Check they exist
-		$this->assertEquals( 'value', get_post_meta( self::$post_id, 'unique_update', true ) );
-		$this->assertEquals( array( 'value' ), get_post_meta( self::$post_id, 'unique_update', false ) );
-		$this->assertEquals( 'value', get_post_meta( self::$post_id, 'nonunique_update', true ) );
-		$this->assertEquals( array( 'value', 'another value' ), get_post_meta( self::$post_id, 'nonunique_update', false ) );
+		// Check they exist.
+		$this->assertSame( 'value', get_post_meta( self::$post_id, 'unique_update', true ) );
+		$this->assertSame( array( 'value' ), get_post_meta( self::$post_id, 'unique_update', false ) );
+		$this->assertSame( 'value', get_post_meta( self::$post_id, 'nonunique_update', true ) );
+		$this->assertSame( array( 'value', 'another value' ), get_post_meta( self::$post_id, 'nonunique_update', false ) );
 
-		// Update them
+		// Update them.
 		$this->assertTrue( update_meta( $mid1, 'unique_update', 'new' ) );
 		$this->assertTrue( update_meta( $mid2, 'nonunique_update', 'new' ) );
 		$this->assertTrue( update_meta( $mid3, 'nonunique_update', 'another new' ) );
 
-		//Check they updated
-		$this->assertEquals( 'new', get_post_meta( self::$post_id, 'unique_update', true ) );
-		$this->assertEquals( array( 'new' ), get_post_meta( self::$post_id, 'unique_update', false ) );
-		$this->assertEquals( 'new', get_post_meta( self::$post_id, 'nonunique_update', true ) );
-		$this->assertEquals( array( 'new', 'another new' ), get_post_meta( self::$post_id, 'nonunique_update', false ) );
+		// Check they updated.
+		$this->assertSame( 'new', get_post_meta( self::$post_id, 'unique_update', true ) );
+		$this->assertSame( array( 'new' ), get_post_meta( self::$post_id, 'unique_update', false ) );
+		$this->assertSame( 'new', get_post_meta( self::$post_id, 'nonunique_update', true ) );
+		$this->assertSame( array( 'new', 'another new' ), get_post_meta( self::$post_id, 'nonunique_update', false ) );
 
-		// Slashed update
+		// Slashed update.
 		$data = "'quote and \slash";
 		$this->assertTrue( update_meta( $mid1, 'unique_update', addslashes( $data ) ) );
 		$meta = get_metadata_by_mid( 'post', $mid1 );
-		$this->assertEquals( $data, $meta->meta_value );
+		$this->assertSame( $data, $meta->meta_value );
 	}
 
 	/**
@@ -241,10 +241,10 @@ class Tests_Post_Meta extends WP_UnitTestCase {
 		$classy->stringy = 'I love slashes\\\\ more';
 		$funky_meta[]    = $classy;
 
-		// Add a post meta item
+		// Add a post meta item.
 		$this->assertInternalType( 'integer', add_post_meta( self::$post_id, 'test_funky_post_meta', $funky_meta, true ) );
 
-		//Check they exists
+		// Check it exists.
 		$this->assertEquals( $funky_meta, get_post_meta( self::$post_id, 'test_funky_post_meta', true ) );
 
 	}
@@ -263,9 +263,9 @@ class Tests_Post_Meta extends WP_UnitTestCase {
 		// Reset global so subsequent data tests do not get polluted.
 		$GLOBALS['wp_meta_keys'] = array();
 
-		$this->assertEquals( 'post', $this->last_register_meta_call['object_type'] );
-		$this->assertEquals( $meta_key, $this->last_register_meta_call['meta_key'] );
-		$this->assertEquals( $args, $this->last_register_meta_call['args'] );
+		$this->assertSame( 'post', $this->last_register_meta_call['object_type'] );
+		$this->assertSame( $meta_key, $this->last_register_meta_call['meta_key'] );
+		$this->assertSame( $args, $this->last_register_meta_call['args'] );
 	}
 
 	public function data_register_post_meta() {
diff --git a/tests/post/nav-menu.php b/tests/post/nav-menu.php
index 978580e186..d74929966f 100644
--- a/tests/post/nav-menu.php
+++ b/tests/post/nav-menu.php
@@ -40,7 +40,7 @@ class Test_Nav_Menus extends WP_UnitTestCase {
 			)
 		);
 
-		$this->assertEquals( 0, strpos( $menu, '<ul' ) );
+		$this->assertSame( 0, strpos( $menu, '<ul' ) );
 	}
 
 	function test_wp_get_associated_nav_menu_items() {
@@ -83,7 +83,7 @@ class Test_Nav_Menus extends WP_UnitTestCase {
 			)
 		);
 
-		// Item without menu-item-object arg
+		// Item without menu-item-object arg.
 		$post_2_insert = wp_update_nav_menu_item(
 			$this->menu_id,
 			0,
@@ -106,35 +106,35 @@ class Test_Nav_Menus extends WP_UnitTestCase {
 		);
 
 		$tag_items = wp_get_associated_nav_menu_items( $tag_id, 'taxonomy', 'post_tag' );
-		$this->assertEqualSets( array( $tag_insert ), $tag_items );
+		$this->assertSameSets( array( $tag_insert ), $tag_items );
 		$cat_items = wp_get_associated_nav_menu_items( $cat_id, 'taxonomy', 'category' );
-		$this->assertEqualSets( array( $cat_insert ), $cat_items );
+		$this->assertSameSets( array( $cat_insert ), $cat_items );
 		$post_items = wp_get_associated_nav_menu_items( $post_id );
-		$this->assertEqualSets( array( $post_insert ), $post_items );
+		$this->assertSameSets( array( $post_insert ), $post_items );
 		$post_2_items = wp_get_associated_nav_menu_items( $post_2_id );
-		$this->assertEqualSets( array( $post_2_insert ), $post_2_items );
+		$this->assertSameSets( array( $post_2_insert ), $post_2_items );
 		$page_items = wp_get_associated_nav_menu_items( $page_id );
-		$this->assertEqualSets( array( $page_insert ), $page_items );
+		$this->assertSameSets( array( $page_insert ), $page_items );
 
 		wp_delete_term( $tag_id, 'post_tag' );
 		$tag_items = wp_get_associated_nav_menu_items( $tag_id, 'taxonomy', 'post_tag' );
-		$this->assertEqualSets( array(), $tag_items );
+		$this->assertSameSets( array(), $tag_items );
 
 		wp_delete_term( $cat_id, 'category' );
 		$cat_items = wp_get_associated_nav_menu_items( $cat_id, 'taxonomy', 'category' );
-		$this->assertEqualSets( array(), $cat_items );
+		$this->assertSameSets( array(), $cat_items );
 
 		wp_delete_post( $post_id, true );
 		$post_items = wp_get_associated_nav_menu_items( $post_id );
-		$this->assertEqualSets( array(), $post_items );
+		$this->assertSameSets( array(), $post_items );
 
 		wp_delete_post( $post_2_id, true );
 		$post_2_items = wp_get_associated_nav_menu_items( $post_2_id );
-		$this->assertEqualSets( array(), $post_2_items );
+		$this->assertSameSets( array(), $post_2_items );
 
 		wp_delete_post( $page_id, true );
 		$page_items = wp_get_associated_nav_menu_items( $page_id );
-		$this->assertEqualSets( array(), $page_items );
+		$this->assertSameSets( array(), $page_items );
 	}
 
 	/**
@@ -142,7 +142,7 @@ class Test_Nav_Menus extends WP_UnitTestCase {
 	 */
 	function test_orphan_nav_menu_item() {
 
-		// Create an orphan nav menu item
+		// Create an orphan nav menu item.
 		$custom_item_id = wp_update_nav_menu_item(
 			0,
 			0,
@@ -154,11 +154,11 @@ class Test_Nav_Menus extends WP_UnitTestCase {
 			)
 		);
 
-		// Confirm it saved properly
+		// Confirm it saved properly.
 		$custom_item = wp_setup_nav_menu_item( get_post( $custom_item_id ) );
-		$this->assertEquals( 'Wordpress.org', $custom_item->title );
+		$this->assertSame( 'Wordpress.org', $custom_item->title );
 
-		// Update the orphan with an associated nav menu
+		// Update the orphan with an associated nav menu.
 		wp_update_nav_menu_item(
 			$this->menu_id,
 			$custom_item_id,
@@ -169,7 +169,7 @@ class Test_Nav_Menus extends WP_UnitTestCase {
 		$menu_items  = wp_get_nav_menu_items( $this->menu_id );
 		$custom_item = wp_filter_object_list( $menu_items, array( 'db_id' => $custom_item_id ) );
 		$custom_item = array_pop( $custom_item );
-		$this->assertEquals( 'WordPress.org', $custom_item->title );
+		$this->assertSame( 'WordPress.org', $custom_item->title );
 
 	}
 
@@ -218,21 +218,21 @@ class Test_Nav_Menus extends WP_UnitTestCase {
 		$locations['primary'] = $menu_obj->term_id;
 		set_theme_mod( 'nav_menu_locations', $locations );
 
-		$this->assertEquals( 'My Menu', wp_get_nav_menu_name( 'primary' ) );
+		$this->assertSame( 'My Menu', wp_get_nav_menu_name( 'primary' ) );
 	}
 
 	/**
 	 * @ticket 29460
 	 */
 	function test_orderby_name_by_default() {
-		// We are going to create a random number of menus (min 2, max 10)
+		// We are going to create a random number of menus (min 2, max 10).
 		$menus_no = rand( 2, 10 );
 
 		for ( $i = 0; $i <= $menus_no; $i++ ) {
 			wp_create_nav_menu( rand_str() );
 		}
 
-		// This is the expected array of menu names
+		// This is the expected array of menu names.
 		$expected_nav_menus_names = wp_list_pluck(
 			get_terms(
 				'nav_menu',
@@ -244,10 +244,10 @@ class Test_Nav_Menus extends WP_UnitTestCase {
 			'name'
 		);
 
-		// And this is what we got when calling wp_get_nav_menus()
+		// And this is what we got when calling wp_get_nav_menus().
 		$nav_menus_names = wp_list_pluck( wp_get_nav_menus(), 'name' );
 
-		$this->assertEquals( $nav_menus_names, $expected_nav_menus_names );
+		$this->assertSame( $nav_menus_names, $expected_nav_menus_names );
 	}
 
 	/**
@@ -279,8 +279,8 @@ class Test_Nav_Menus extends WP_UnitTestCase {
 		);
 		$post_type_archive_item    = wp_setup_nav_menu_item( get_post( $post_type_archive_item_id ) );
 
-		$this->assertEquals( $post_type_slug, $post_type_archive_item->title );
-		$this->assertEquals( $post_type_description, $post_type_archive_item->description );
+		$this->assertSame( $post_type_slug, $post_type_archive_item->title );
+		$this->assertSame( $post_type_description, $post_type_archive_item->description );
 	}
 
 	/**
@@ -310,8 +310,8 @@ class Test_Nav_Menus extends WP_UnitTestCase {
 		);
 		$post_type_archive_item    = wp_setup_nav_menu_item( get_post( $post_type_archive_item_id ) );
 
-		$this->assertEquals( $post_type_slug, $post_type_archive_item->title );
-		$this->assertEquals( $post_type_description, $post_type_archive_item->description ); //fail!!!
+		$this->assertSame( $post_type_slug, $post_type_archive_item->title );
+		$this->assertSame( $post_type_description, $post_type_archive_item->description ); // Fail!
 	}
 
 	/**
@@ -345,8 +345,8 @@ class Test_Nav_Menus extends WP_UnitTestCase {
 		);
 		$post_type_archive_item    = wp_setup_nav_menu_item( get_post( $post_type_archive_item_id ) );
 
-		$this->assertEquals( $post_type_slug, $post_type_archive_item->title );
-		$this->assertEquals( $menu_item_description, $post_type_archive_item->description );
+		$this->assertSame( $post_type_slug, $post_type_archive_item->title );
+		$this->assertSame( $menu_item_description, $post_type_archive_item->description );
 	}
 
 	/**
@@ -416,7 +416,7 @@ class Test_Nav_Menus extends WP_UnitTestCase {
 			)
 		);
 
-		$post_inser2 = wp_update_nav_menu_item(
+		$post_insert2 = wp_update_nav_menu_item(
 			$this->menu_id,
 			0,
 			array(
@@ -459,11 +459,11 @@ class Test_Nav_Menus extends WP_UnitTestCase {
 			)
 		);
 
-		// The markup should include whitespace between <li>s
+		// The markup should include whitespace between <li>'s.
 		$this->assertRegExp( '/\s<li.*>|<\/li>\s/U', $menu );
 		$this->assertNotRegExp( '/<\/li><li.*>/U', $menu );
 
-		// Whitepsace suppressed.
+		// Whitespace suppressed.
 		$menu = wp_nav_menu(
 			array(
 				'echo'         => false,
@@ -472,7 +472,7 @@ class Test_Nav_Menus extends WP_UnitTestCase {
 			)
 		);
 
-		// The markup should not include whitespace around <li>s
+		// The markup should not include whitespace around <li>'s.
 		$this->assertNotRegExp( '/\s<li.*>|<\/li>\s/U', $menu );
 		$this->assertRegExp( '/><li.*>|<\/li></U', $menu );
 	}
@@ -679,7 +679,7 @@ class Test_Nav_Menus extends WP_UnitTestCase {
 	/**
 	 * Test _wp_delete_customize_changeset_dependent_auto_drafts.
 	 *
-	 * @covers ::_wp_delete_customize_changeset_dependent_auto_drafts()
+	 * @covers ::_wp_delete_customize_changeset_dependent_auto_drafts
 	 */
 	function test_wp_delete_customize_changeset_dependent_auto_drafts() {
 		$auto_draft_post_id = $this->factory()->post->create(
@@ -723,13 +723,13 @@ class Test_Nav_Menus extends WP_UnitTestCase {
 				'data' => $data,
 			)
 		);
-		$this->assertEquals( 'auto-draft', get_post_status( $auto_draft_post_id ) );
-		$this->assertEquals( 'draft', get_post_status( $draft_post_id ) );
-		$this->assertEquals( 'private', get_post_status( $private_post_id ) );
+		$this->assertSame( 'auto-draft', get_post_status( $auto_draft_post_id ) );
+		$this->assertSame( 'draft', get_post_status( $draft_post_id ) );
+		$this->assertSame( 'private', get_post_status( $private_post_id ) );
 		wp_delete_post( $wp_customize->changeset_post_id(), true );
 		$this->assertFalse( get_post_status( $auto_draft_post_id ) );
-		$this->assertEquals( 'trash', get_post_status( $draft_post_id ) );
-		$this->assertEquals( 'private', get_post_status( $private_post_id ) );
+		$this->assertSame( 'trash', get_post_status( $draft_post_id ) );
+		$this->assertSame( 'private', get_post_status( $private_post_id ) );
 	}
 
 	/**
@@ -943,7 +943,7 @@ class Test_Nav_Menus extends WP_UnitTestCase {
 		);
 
 		$custom_item = wp_setup_nav_menu_item( get_post( $custom_item_id ) );
-		$this->assertEquals( $correct_url, $custom_item->url );
+		$this->assertSame( $correct_url, $custom_item->url );
 	}
 
 	/**
@@ -956,4 +956,40 @@ class Test_Nav_Menus extends WP_UnitTestCase {
 		);
 	}
 
+	/**
+	 * Tests `wp_update_nav_menu_item()` with special characters in a category name.
+	 *
+	 * When inserting a category as a nav item, the `post_title` property should
+	 * be empty, as the item should get the title from the category object itself.
+	 *
+	 * @ticket 48011
+	 */
+	function test_wp_update_nav_menu_item_with_special_characters_in_category_name() {
+		$category_name = 'Test Cat - \"Pre-Slashed\" Cat Name & >';
+
+		$category = self::factory()->category->create_and_get(
+			array(
+				'name' => $category_name,
+			)
+		);
+
+		$category_item_id = wp_update_nav_menu_item(
+			$this->menu_id,
+			0,
+			array(
+				'menu-item-type'      => 'taxonomy',
+				'menu-item-object'    => 'category',
+				'menu-item-object-id' => $category->term_id,
+				'menu-item-status'    => 'publish',
+				/*
+				 * Interestingly enough, if we use `$cat->name` for the menu item title,
+				 * we won't be able to replicate the bug because it's in htmlentities form.
+				 */
+				'menu-item-title'     => $category_name,
+			)
+		);
+
+		$category_item = get_post( $category_item_id );
+		$this->assertEmpty( $category_item->post_title );
+	}
 }
diff --git a/tests/post/objects.php b/tests/post/objects.php
index c2d05a555a..d173d1362a 100644
--- a/tests/post/objects.php
+++ b/tests/post/objects.php
@@ -10,28 +10,28 @@ class Tests_Post_Objects extends WP_UnitTestCase {
 
 		$post = get_post( $id );
 		$this->assertInstanceOf( 'WP_Post', $post );
-		$this->assertEquals( $id, $post->ID );
+		$this->assertSame( $id, $post->ID );
 		$this->assertTrue( isset( $post->ancestors ) );
-		$this->assertEquals( array(), $post->ancestors );
+		$this->assertSame( array(), $post->ancestors );
 
-		// Unset and then verify that the magic method fills the property again
+		// Unset and then verify that the magic method fills the property again.
 		unset( $post->ancestors );
-		$this->assertEquals( array(), $post->ancestors );
+		$this->assertSame( array(), $post->ancestors );
 
-		// Magic get should make meta accessible as properties
+		// Magic get should make meta accessible as properties.
 		add_post_meta( $id, 'test', 'test' );
-		$this->assertEquals( 'test', get_post_meta( $id, 'test', true ) );
-		$this->assertEquals( 'test', $post->test );
+		$this->assertSame( 'test', get_post_meta( $id, 'test', true ) );
+		$this->assertSame( 'test', $post->test );
 
-		// Make sure meta does not eclipse true properties
+		// Make sure meta does not eclipse true properties.
 		add_post_meta( $id, 'post_type', 'dummy' );
-		$this->assertEquals( 'dummy', get_post_meta( $id, 'post_type', true ) );
-		$this->assertEquals( 'post', $post->post_type );
+		$this->assertSame( 'dummy', get_post_meta( $id, 'post_type', true ) );
+		$this->assertSame( 'post', $post->post_type );
 
-		// Excercise the output argument
+		// Excercise the output argument.
 		$post = get_post( $id, ARRAY_A );
 		$this->assertInternalType( 'array', $post );
-		$this->assertEquals( 'post', $post['post_type'] );
+		$this->assertSame( 'post', $post['post_type'] );
 
 		$post = get_post( $id, ARRAY_N );
 		$this->assertInternalType( 'array', $post );
@@ -41,22 +41,22 @@ class Tests_Post_Objects extends WP_UnitTestCase {
 		$post = get_post( $id );
 		$post = get_post( $post, ARRAY_A );
 		$this->assertInternalType( 'array', $post );
-		$this->assertEquals( 'post', $post['post_type'] );
-		$this->assertEquals( $id, $post['ID'] );
+		$this->assertSame( 'post', $post['post_type'] );
+		$this->assertSame( $id, $post['ID'] );
 
-		// Should default to OBJECT when given invalid output argument
+		// Should default to OBJECT when given invalid output argument.
 		$post = get_post( $id, 'invalid-output-value' );
 		$this->assertInstanceOf( 'WP_Post', $post );
-		$this->assertEquals( $id, $post->ID );
+		$this->assertSame( $id, $post->ID );
 
-		// Make sure stdClass in $GLOBALS['post'] is handled
+		// Make sure stdClass in $GLOBALS['post'] is handled.
 		$post_std = $post->to_array();
 		$this->assertInternalType( 'array', $post_std );
 		$post_std        = (object) $post_std;
 		$GLOBALS['post'] = $post_std;
 		$post            = get_post( null );
 		$this->assertInstanceOf( 'WP_Post', $post );
-		$this->assertEquals( $id, $post->ID );
+		$this->assertSame( $id, $post->ID );
 		unset( $GLOBALS['post'] );
 
 		// If no global post and passing empty value, expect null.
@@ -76,26 +76,26 @@ class Tests_Post_Objects extends WP_UnitTestCase {
 				'post_parent' => $parent_id,
 			)
 		);
-		$this->assertEquals( $updated, $child_id );
+		$this->assertSame( $updated, $child_id );
 		$updated = wp_update_post(
 			array(
 				'ID'          => $grandchild_id,
 				'post_parent' => $child_id,
 			)
 		);
-		$this->assertEquals( $updated, $grandchild_id );
+		$this->assertSame( $updated, $grandchild_id );
 
-		$this->assertEquals( array( $parent_id ), get_post( $child_id )->ancestors );
-		$this->assertEquals( array( $parent_id ), get_post_ancestors( $child_id ) );
-		$this->assertEquals( array( $parent_id ), get_post_ancestors( get_post( $child_id ) ) );
+		$this->assertSame( array( $parent_id ), get_post( $child_id )->ancestors );
+		$this->assertSame( array( $parent_id ), get_post_ancestors( $child_id ) );
+		$this->assertSame( array( $parent_id ), get_post_ancestors( get_post( $child_id ) ) );
 
-		$this->assertEquals( array( $child_id, $parent_id ), get_post( $grandchild_id )->ancestors );
-		$this->assertEquals( array( $child_id, $parent_id ), get_post_ancestors( $grandchild_id ) );
-		$this->assertEquals( array( $child_id, $parent_id ), get_post_ancestors( get_post( $grandchild_id ) ) );
+		$this->assertSame( array( $child_id, $parent_id ), get_post( $grandchild_id )->ancestors );
+		$this->assertSame( array( $child_id, $parent_id ), get_post_ancestors( $grandchild_id ) );
+		$this->assertSame( array( $child_id, $parent_id ), get_post_ancestors( get_post( $grandchild_id ) ) );
 
-		$this->assertEquals( array(), get_post( $parent_id )->ancestors );
-		$this->assertEquals( array(), get_post_ancestors( $parent_id ) );
-		$this->assertEquals( array(), get_post_ancestors( get_post( $parent_id ) ) );
+		$this->assertSame( array(), get_post( $parent_id )->ancestors );
+		$this->assertSame( array(), get_post_ancestors( $parent_id ) );
+		$this->assertSame( array(), get_post_ancestors( get_post( $parent_id ) ) );
 	}
 
 	/**
@@ -104,7 +104,7 @@ class Tests_Post_Objects extends WP_UnitTestCase {
 	function test_get_post_ancestors_with_falsey_values() {
 		foreach ( array( null, 0, false, '0', '' ) as $post_id ) {
 			$this->assertInternalType( 'array', get_post_ancestors( $post_id ) );
-			$this->assertEquals( array(), get_post_ancestors( $post_id ) );
+			$this->assertSame( array(), get_post_ancestors( $post_id ) );
 		}
 	}
 
@@ -113,18 +113,18 @@ class Tests_Post_Objects extends WP_UnitTestCase {
 		$post    = get_post( $post_id );
 
 		$this->assertInternalType( 'array', $post->post_category );
-		$this->assertEquals( 1, count( $post->post_category ) );
+		$this->assertSame( 1, count( $post->post_category ) );
 		$this->assertEquals( get_option( 'default_category' ), $post->post_category[0] );
 		$term1 = wp_insert_term( 'Foo', 'category' );
 		$term2 = wp_insert_term( 'Bar', 'category' );
 		$term3 = wp_insert_term( 'Baz', 'category' );
 		wp_set_post_categories( $post_id, array( $term1['term_id'], $term2['term_id'], $term3['term_id'] ) );
-		$this->assertEquals( 3, count( $post->post_category ) );
-		$this->assertEquals( array( $term2['term_id'], $term3['term_id'], $term1['term_id'] ), $post->post_category );
+		$this->assertSame( 3, count( $post->post_category ) );
+		$this->assertSame( array( $term2['term_id'], $term3['term_id'], $term1['term_id'] ), $post->post_category );
 
 		$post = get_post( $post_id, ARRAY_A );
-		$this->assertEquals( 3, count( $post['post_category'] ) );
-		$this->assertEquals( array( $term2['term_id'], $term3['term_id'], $term1['term_id'] ), $post['post_category'] );
+		$this->assertSame( 3, count( $post['post_category'] ) );
+		$this->assertSame( array( $term2['term_id'], $term3['term_id'], $term1['term_id'] ), $post['post_category'] );
 	}
 
 	function test_get_tags_input_property() {
@@ -135,13 +135,13 @@ class Tests_Post_Objects extends WP_UnitTestCase {
 		$this->assertEmpty( $post->tags_input );
 		wp_set_post_tags( $post_id, 'Foo, Bar, Baz' );
 		$this->assertInternalType( 'array', $post->tags_input );
-		$this->assertEquals( 3, count( $post->tags_input ) );
-		$this->assertEquals( array( 'Bar', 'Baz', 'Foo' ), $post->tags_input );
+		$this->assertSame( 3, count( $post->tags_input ) );
+		$this->assertSame( array( 'Bar', 'Baz', 'Foo' ), $post->tags_input );
 
 		$post = get_post( $post_id, ARRAY_A );
 		$this->assertInternalType( 'array', $post['tags_input'] );
-		$this->assertEquals( 3, count( $post['tags_input'] ) );
-		$this->assertEquals( array( 'Bar', 'Baz', 'Foo' ), $post['tags_input'] );
+		$this->assertSame( 3, count( $post['tags_input'] ) );
+		$this->assertSame( array( 'Bar', 'Baz', 'Foo' ), $post['tags_input'] );
 	}
 
 	function test_get_page_template_property() {
@@ -149,13 +149,12 @@ class Tests_Post_Objects extends WP_UnitTestCase {
 		$post    = get_post( $post_id );
 
 		$this->assertInternalType( 'string', $post->page_template );
-		$this->assertEmpty( $post->tags_input );
 		$template = get_post_meta( $post->ID, '_wp_page_template', true );
-		$this->assertEquals( $template, $post->page_template );
+		$this->assertSame( $template, $post->page_template );
 		update_post_meta( $post_id, '_wp_page_template', 'foo.php' );
 		$template = get_post_meta( $post->ID, '_wp_page_template', true );
-		$this->assertEquals( 'foo.php', $template );
-		$this->assertEquals( $template, $post->page_template );
+		$this->assertSame( 'foo.php', $template );
+		$this->assertSame( $template, $post->page_template );
 	}
 
 	function test_get_post_filter() {
@@ -167,22 +166,22 @@ class Tests_Post_Objects extends WP_UnitTestCase {
 			)
 		);
 
-		$this->assertEquals( 'raw', $post->filter );
+		$this->assertSame( 'raw', $post->filter );
 		$this->assertInternalType( 'int', $post->post_parent );
 
 		$display_post = get_post( $post, OBJECT, 'js' );
-		$this->assertEquals( 'js', $display_post->filter );
-		$this->assertEquals( esc_js( "Mary's home" ), $display_post->post_title );
+		$this->assertSame( 'js', $display_post->filter );
+		$this->assertSame( esc_js( "Mary's home" ), $display_post->post_title );
 
 		// Pass a js filtered WP_Post to get_post() with the filter set to raw.
 		// The post should be fetched from cache instead of using the passed object.
 		$raw_post = get_post( $display_post, OBJECT, 'raw' );
-		$this->assertEquals( 'raw', $raw_post->filter );
+		$this->assertSame( 'raw', $raw_post->filter );
 		$this->assertNotEquals( esc_js( "Mary's home" ), $raw_post->post_title );
 
 		$raw_post->filter( 'js' );
-		$this->assertEquals( 'js', $post->filter );
-		$this->assertEquals( esc_js( "Mary's home" ), $raw_post->post_title );
+		$this->assertSame( 'js', $post->filter );
+		$this->assertSame( esc_js( "Mary's home" ), $raw_post->post_title );
 	}
 
 	function test_get_post_identity() {
@@ -190,8 +189,8 @@ class Tests_Post_Objects extends WP_UnitTestCase {
 
 		$post->foo = 'bar';
 
-		$this->assertEquals( 'bar', get_post( $post )->foo );
-		$this->assertEquals( 'bar', get_post( $post, OBJECT, 'display' )->foo );
+		$this->assertSame( 'bar', get_post( $post )->foo );
+		$this->assertSame( 'bar', get_post( $post, OBJECT, 'display' )->foo );
 	}
 
 	function test_get_post_array() {
@@ -199,9 +198,9 @@ class Tests_Post_Objects extends WP_UnitTestCase {
 
 		$post = get_post( $id, ARRAY_A );
 
-		$this->assertEquals( $id, $post['ID'] );
+		$this->assertSame( $id, $post['ID'] );
 		$this->assertInternalType( 'array', $post['ancestors'] );
-		$this->assertEquals( 'raw', $post['filter'] );
+		$this->assertSame( 'raw', $post['filter'] );
 	}
 
 	/**
@@ -213,16 +212,16 @@ class Tests_Post_Objects extends WP_UnitTestCase {
 		$id = self::factory()->post->create();
 		wp_cache_delete( $id, 'posts' );
 
-		// get_post( stdClass ) should not prime the cache
+		// get_post( stdClass ) should not prime the cache.
 		$post = $wpdb->get_row( $wpdb->prepare( "SELECT * FROM $wpdb->posts WHERE ID = %d LIMIT 1", $id ) );
 		$post = get_post( $post );
 		$this->assertEmpty( wp_cache_get( $id, 'posts' ) );
 
-		// get_post( WP_Post ) should not prime the cache
+		// get_post( WP_Post ) should not prime the cache.
 		get_post( $post );
 		$this->assertEmpty( wp_cache_get( $id, 'posts' ) );
 
-		// get_post( ID ) should prime the cache
+		// get_post( ID ) should prime the cache.
 		get_post( $post->ID );
 		$this->assertNotEmpty( wp_cache_get( $id, 'posts' ) );
 	}
diff --git a/tests/post/output.php b/tests/post/output.php
index 02be7ffa6e..62f5db9ecf 100644
--- a/tests/post/output.php
+++ b/tests/post/output.php
@@ -1,8 +1,8 @@
 <?php
 
-// test the output of post template tags etc
-
 /**
+ * Test the output of post template tags, etc.
+ *
  * @group post
  * @group formatting
  */
@@ -59,7 +59,7 @@ EOF;
 		$this->assertTrue( have_posts() );
 		$this->assertNull( the_post() );
 
-		$this->assertEquals( strip_ws( $expected ), strip_ws( get_echo( 'the_content' ) ) );
+		$this->assertSame( strip_ws( $expected ), strip_ws( get_echo( 'the_content' ) ) );
 	}
 
 	function test_the_content_shortcode() {
@@ -87,7 +87,7 @@ EOF;
 		$this->assertTrue( have_posts() );
 		$this->assertNull( the_post() );
 
-		$this->assertEquals( strip_ws( $expected ), strip_ws( get_echo( 'the_content' ) ) );
+		$this->assertSame( strip_ws( $expected ), strip_ws( get_echo( 'the_content' ) ) );
 	}
 
 	function test_the_content_shortcode_paragraph() {
@@ -125,14 +125,14 @@ EOF;
 		$this->assertTrue( have_posts() );
 		$this->assertNull( the_post() );
 
-		$this->assertEquals( strip_ws( $expected ), strip_ws( get_echo( 'the_content' ) ) );
+		$this->assertSame( strip_ws( $expected ), strip_ws( get_echo( 'the_content' ) ) );
 	}
 
 	function test_the_content_attribute_filtering() {
 		kses_init_filters();
 
 		// http://bpr3.org/?p=87
-		// the title attribute should make it through unfiltered
+		// The title attribute should make it through unfiltered.
 		$post_content = <<<EOF
 <span class="Z3988" title="ctx_ver=Z39.88-2004&rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal&rft.aulast=Mariat&rft.aufirst=Denis&rft. au=Denis+Mariat&rft.au=Sead+Taourit&rft.au=G%C3%A9rard+Gu%C3%A9rin& rft.title=Genetics+Selection+Evolution&rft.atitle=&rft.date=2003&rft. volume=35&rft.issue=1&rft.spage=119&rft.epage=133&rft.genre=article& rft.id=info:DOI/10.1051%2Fgse%3A2002039"></span>Mariat, D., Taourit, S., Gu√É¬©rin, G. (2003). . <span style="font-style: italic;">Genetics Selection Evolution, 35</span>(1), 119-133. DOI: <a rev="review" href= "http://dx.doi.org/10.1051/gse:2002039">10.1051/gse:2002039</a>
 EOF;
@@ -147,7 +147,7 @@ EOF;
 		$this->assertTrue( have_posts() );
 		$this->assertNull( the_post() );
 
-		$this->assertEquals( strip_ws( $expected ), strip_ws( get_echo( 'the_content' ) ) );
+		$this->assertSame( strip_ws( $expected ), strip_ws( get_echo( 'the_content' ) ) );
 
 		kses_remove_filters();
 	}
@@ -156,7 +156,7 @@ EOF;
 		kses_init_filters();
 
 		// http://bpr3.org/?p=87
-		// the title attribute should make it through unfiltered
+		// The title attribute should make it through unfiltered.
 		$post_content = <<<EOF
 <span title="My friends: Alice, Bob and Carol">foo</span>
 EOF;
@@ -171,7 +171,7 @@ EOF;
 		$this->assertTrue( have_posts() );
 		$this->assertNull( the_post() );
 
-		$this->assertEquals( strip_ws( $expected ), strip_ws( get_echo( 'the_content' ) ) );
+		$this->assertSame( strip_ws( $expected ), strip_ws( get_echo( 'the_content' ) ) );
 
 		kses_remove_filters();
 	}
diff --git a/tests/post/postClass.php b/tests/post/postClass.php
new file mode 100644
index 0000000000..f8501e9dc1
--- /dev/null
+++ b/tests/post/postClass.php
@@ -0,0 +1,29 @@
+<?php
+
+/**
+ * @group post
+ * @covers ::post_class
+ */
+class Tests_Post_PostClass extends WP_UnitTestCase {
+	protected $post_id;
+
+	public function setUp() {
+		parent::setUp();
+		$this->post_id = self::factory()->post->create();
+	}
+
+	public function test_post_class() {
+		$expected = 'class="' . join( ' ', get_post_class( '', $this->post_id ) ) . '"';
+		$this->expectOutputString( $expected );
+		post_class( '', $this->post_id );
+	}
+
+	public function test_post_class_extra_esc_attr() {
+		$classes              = get_post_class( '', $this->post_id );
+		$escaped_again        = array_map( 'esc_attr', $classes );
+		$escaped_another_time = 'class="' . esc_attr( join( ' ', $escaped_again ) ) . '"';
+
+		$this->expectOutputString( $escaped_another_time );
+		post_class( '', $this->post_id );
+	}
+}
diff --git a/tests/post/query.php b/tests/post/query.php
index 4bac94c1bc..1c6e30faf9 100644
--- a/tests/post/query.php
+++ b/tests/post/query.php
@@ -35,7 +35,7 @@ class Tests_Post_Query extends WP_UnitTestCase {
 		$this->assertCount( 1, $q->get( 'category__in' ) );
 
 		$this->assertNotEmpty( $posts );
-		$this->assertEquals( array( $post_id ), wp_list_pluck( $posts, 'ID' ) );
+		$this->assertSame( array( $post_id ), wp_list_pluck( $posts, 'ID' ) );
 
 		$posts2 = $q->query( array( 'category__and' => array( $term_id, $term_id2 ) ) );
 		$this->assertNotEmpty( $q->get( 'category__and' ) );
@@ -95,20 +95,20 @@ class Tests_Post_Query extends WP_UnitTestCase {
 			)
 		);
 
-		// Fourth post added in filter
-		$this->assertEquals( 4, count( $query->posts ) );
-		$this->assertEquals( 4, $query->post_count );
+		// Fourth post added in filter.
+		$this->assertSame( 4, count( $query->posts ) );
+		$this->assertSame( 4, $query->post_count );
 
 		foreach ( $query->posts as $post ) {
 
-			// posts are WP_Post objects
+			// Posts are WP_Post objects.
 			$this->assertTrue( is_a( $post, 'WP_Post' ) );
 
-			// filters are raw
-			$this->assertEquals( 'raw', $post->filter );
+			// Filters are raw.
+			$this->assertSame( 'raw', $post->filter );
 
-			// custom data added in the_posts filter is preserved
-			$this->assertEquals( array( $post->ID, 'custom data' ), $post->custom_data );
+			// Custom data added in the_posts filter is preserved.
+			$this->assertSame( array( $post->ID, 'custom data' ), $post->custom_data );
 		}
 
 		remove_filter( 'the_posts', array( $this, 'the_posts_filter' ) );
@@ -408,31 +408,31 @@ class Tests_Post_Query extends WP_UnitTestCase {
 	 * @ticket 29629
 	 */
 	function test_orderby() {
-		// 'rand' is a valid value
+		// 'rand' is a valid value.
 		$q = new WP_Query( array( 'orderby' => 'rand' ) );
 		$this->assertContains( 'ORDER BY RAND()', $q->request );
 		$this->assertNotContains( 'ASC', $q->request );
 		$this->assertNotContains( 'DESC', $q->request );
 
-		// This isn't allowed
+		// This isn't allowed.
 		$q2 = new WP_Query( array( 'order' => 'rand' ) );
 		$this->assertContains( 'ORDER BY', $q2->request );
 		$this->assertNotContains( 'RAND()', $q2->request );
 		$this->assertContains( 'DESC', $q2->request );
 
-		// 'none' is a valid value
+		// 'none' is a valid value.
 		$q3 = new WP_Query( array( 'orderby' => 'none' ) );
 		$this->assertNotContains( 'ORDER BY', $q3->request );
 		$this->assertNotContains( 'DESC', $q3->request );
 		$this->assertNotContains( 'ASC', $q3->request );
 
-		// false is a valid value
+		// False is a valid value.
 		$q4 = new WP_Query( array( 'orderby' => false ) );
 		$this->assertNotContains( 'ORDER BY', $q4->request );
 		$this->assertNotContains( 'DESC', $q4->request );
 		$this->assertNotContains( 'ASC', $q4->request );
 
-		// empty array() is a valid value
+		// Empty array() is a valid value.
 		$q5 = new WP_Query( array( 'orderby' => array() ) );
 		$this->assertNotContains( 'ORDER BY', $q5->request );
 		$this->assertNotContains( 'DESC', $q5->request );
@@ -519,7 +519,7 @@ class Tests_Post_Query extends WP_UnitTestCase {
 			)
 		);
 		$actual_posts = $q->get_posts();
-		$this->assertEqualSets( $requested, $actual_posts );
+		$this->assertSameSets( $requested, $actual_posts );
 
 		$requested = array( $post_ids[1], $post_ids[2] );
 		$q->query(
@@ -529,7 +529,7 @@ class Tests_Post_Query extends WP_UnitTestCase {
 			)
 		);
 		$actual_posts = $q->get_posts();
-		$this->assertEqualSets( $requested, $actual_posts );
+		$this->assertSameSets( $requested, $actual_posts );
 	}
 
 	/**
@@ -566,11 +566,11 @@ class Tests_Post_Query extends WP_UnitTestCase {
 
 		$this->post_id = self::factory()->post->create();
 
-		// Prevent the DB query
+		// Prevent the DB query.
 		add_filter( 'posts_request', '__return_empty_string' );
 		add_filter( 'found_posts_query', '__return_empty_string' );
 
-		// Add the post and found_posts
+		// Add the post and found_posts.
 		add_filter( 'the_posts', array( $this, 'filter_the_posts' ) );
 		add_filter( 'found_posts', array( $this, 'filter_found_posts' ) );
 
@@ -613,7 +613,7 @@ class Tests_Post_Query extends WP_UnitTestCase {
 			)
 		);
 
-		$this->assertEquals( 2, $q->found_posts );
+		$this->assertSame( 2, $q->found_posts );
 		$this->assertEquals( 2, $q->max_num_pages );
 	}
 
@@ -636,7 +636,7 @@ class Tests_Post_Query extends WP_UnitTestCase {
 			)
 		);
 
-		$this->assertEquals( 2, $q->found_posts );
+		$this->assertSame( 2, $q->found_posts );
 		$this->assertEquals( 2, $q->max_num_pages );
 	}
 
@@ -652,15 +652,17 @@ class Tests_Post_Query extends WP_UnitTestCase {
 		}
 
 		add_filter( 'split_the_query', '__return_true' );
+
 		$q = new WP_Query(
 			array(
 				'post_type'      => 'wptests_pt',
 				'posts_per_page' => 1,
 			)
 		);
+
 		remove_filter( 'split_the_query', '__return_true' );
 
-		$this->assertEquals( 2, $q->found_posts );
+		$this->assertSame( 2, $q->found_posts );
 		$this->assertEquals( 2, $q->max_num_pages );
 	}
 
@@ -677,20 +679,22 @@ class Tests_Post_Query extends WP_UnitTestCase {
 
 		// ! $split_the_query
 		add_filter( 'split_the_query', '__return_false' );
+
 		$q = new WP_Query(
 			array(
 				'post_type'      => 'wptests_pt',
 				'posts_per_page' => 1,
 			)
 		);
+
 		remove_filter( 'split_the_query', '__return_false' );
 
-		$this->assertEquals( 2, $q->found_posts );
+		$this->assertSame( 2, $q->found_posts );
 		$this->assertEquals( 2, $q->max_num_pages );
 	}
 
 	public function set_found_posts_provider() {
-		// count return 0 for null, but 1 for other data you may not expect
+		// Count return 0 for null, but 1 for other data you may not expect.
 		return array(
 			array( null, 0 ),
 			array( '', 1 ),
@@ -718,7 +722,40 @@ class Tests_Post_Query extends WP_UnitTestCase {
 		$methd->setAccessible( true );
 		$methd->invoke( $q, array( 'no_found_rows' => false ), array() );
 
-		$this->assertEquals( $expected, $q->found_posts );
+		$this->assertSame( $expected, $q->found_posts );
 	}
 
+	/**
+	 * @ticket 42469
+	 */
+	public function test_found_posts_should_be_integer_not_string() {
+		$this->post_id = self::factory()->post->create();
+
+		$q = new WP_Query(
+			array(
+				'posts_per_page' => 1,
+			)
+		);
+
+		$this->assertInternalType( 'int', $q->found_posts );
+	}
+
+	/**
+	 * @ticket 42469
+	 */
+	public function test_found_posts_should_be_integer_even_if_found_posts_filter_returns_string_value() {
+		$this->post_id = self::factory()->post->create();
+
+		add_filter( 'found_posts', '__return_empty_string' );
+
+		$q = new WP_Query(
+			array(
+				'posts_per_page' => 1,
+			)
+		);
+
+		remove_filter( 'found_posts', '__return_empty_string' );
+
+		$this->assertInternalType( 'int', $q->found_posts );
+	}
 }
diff --git a/tests/post/revisions.php b/tests/post/revisions.php
index b3927a537e..5e028a304b 100644
--- a/tests/post/revisions.php
+++ b/tests/post/revisions.php
@@ -32,7 +32,7 @@ class Tests_Post_Revisions extends WP_UnitTestCase {
 	 * @ticket 16215
 	 */
 	function test_revision_restore_updates_edit_last_post_meta() {
-		//create a post as Author
+		// Create a post as Author.
 		wp_set_current_user( self::$author_user_id );
 		$post    = get_default_post_to_edit( 'post', true );
 		$post_id = $post->ID;
@@ -45,7 +45,7 @@ class Tests_Post_Revisions extends WP_UnitTestCase {
 			)
 		);
 
-		//update post as Editor
+		// Update post as Editor.
 		wp_set_current_user( self::$editor_user_id );
 		wp_update_post(
 			array(
@@ -54,20 +54,20 @@ class Tests_Post_Revisions extends WP_UnitTestCase {
 			)
 		);
 
-		//restore back as Admin
+		// Restore back as Admin.
 		wp_set_current_user( self::$admin_user_id );
 		$revisions = wp_get_post_revisions( $post->ID );
 		$this->assertCount( 2, $revisions );
 
 		$lastrevision = end( $revisions );
-		$this->assertEquals( 'I cant spel werds.', $lastrevision->post_content );
+		$this->assertSame( 'I cant spel werds.', $lastrevision->post_content );
 		// #16215
 		$this->assertEquals( self::$author_user_id, $lastrevision->post_author );
 
 		wp_restore_post_revision( $lastrevision->ID );
 
-		//is post_meta correctly set to revision author
-		$this->assertEquals( self::$admin_user_id, get_post_meta( $post_id, '_edit_last', true ) ); //after restoring user
+		// Is post_meta correctly set to revision author after restoring user?
+		$this->assertEquals( self::$admin_user_id, get_post_meta( $post_id, '_edit_last', true ) );
 	}
 
 	/**
@@ -89,37 +89,37 @@ class Tests_Post_Revisions extends WP_UnitTestCase {
 			)
 		);
 
-		$this->assertCount( 1, wp_get_post_revisions( $post_id ) ); // Just the initial revision
+		$this->assertCount( 1, wp_get_post_revisions( $post_id ) ); // Just the initial revision.
 
-		// First update
+		// First update.
 		wp_update_post(
 			array(
 				'post_content' => 'some updated content',
 				'ID'           => $post_id,
 			)
-		);
+		); // First revision.
 
-		$this->assertCount( 2, wp_get_post_revisions( $post_id ) ); // should be 2 revisions so far
+		$this->assertCount( 2, wp_get_post_revisions( $post_id ) ); // Should be 2 revisions so far.
 
-		//update the post
+		// Update the post.
 		wp_update_post(
 			array(
 				'post_content' => 'new update for some updated content',
 				'ID'           => $post_id,
 			)
-		); //2nd revision
-		$this->assertCount( 3, wp_get_post_revisions( $post_id ) ); // should be 3 revision so far
+		); // Second revision.
+		$this->assertCount( 3, wp_get_post_revisions( $post_id ) ); // Should be 3 revisions so far.
 
-		//next try to save another identical update, tests for patch that prevents storing duplicates
+		// Next, try to save another identical update, tests for patch that prevents storing duplicates.
 		wp_update_post(
 			array(
 				'post_content' => 'new update for some updated content',
 				'ID'           => $post_id,
 			)
-		); //content unchanged, shouldn't save
-		$this->assertCount( 3, wp_get_post_revisions( $post_id ) ); //should still be 3 revision
+		); // Content unchanged, shouldn't save.
+		$this->assertCount( 3, wp_get_post_revisions( $post_id ) ); // Should still be 3 revisions.
 
-		//next try to save another update, same content, but new ttile, should save revision
+		// Next, try to save another update, same content, but new title, should save revision.
 		wp_update_post(
 			array(
 				'post_title'   => 'some-post-changed',
@@ -127,17 +127,17 @@ class Tests_Post_Revisions extends WP_UnitTestCase {
 				'ID'           => $post_id,
 			)
 		);
-		$this->assertCount( 4, wp_get_post_revisions( $post_id ) ); //should  be 4 revision
+		$this->assertCount( 4, wp_get_post_revisions( $post_id ) ); // Should be 4 revisions.
 
-		//next try to save another identical update
+		// Next, try to save another identical update.
 		wp_update_post(
 			array(
 				'post_title'   => 'some-post-changed',
 				'post_content' => 'new update for some updated content',
 				'ID'           => $post_id,
 			)
-		); //content unchanged, shouldn't save
-		$this->assertCount( 4, wp_get_post_revisions( $post_id ) ); //should still be 4 revision
+		); // Content unchanged, shouldn't save.
+		$this->assertCount( 4, wp_get_post_revisions( $post_id ) ); // Should still be 4 revisions.
 	}
 
 	/**
@@ -164,33 +164,34 @@ class Tests_Post_Revisions extends WP_UnitTestCase {
 
 		$this->assertCount( 1, wp_get_post_revisions( $post_id ) );
 
+		// First update.
 		wp_update_post(
 			array(
 				'post_content' => 'some updated content',
 				'ID'           => $post_id,
 			)
-		);    //1st revision
+		); // First revision.
 		$this->assertCount( 2, wp_get_post_revisions( $post_id ) );
 
-		//update the post
+		// Update the post.
 		wp_update_post(
 			array(
 				'post_content' => 'new update for some updated content',
 				'ID'           => $post_id,
 			)
-		); //2nd revision
+		); // Second revision.
 		$this->assertCount( 3, wp_get_post_revisions( $post_id ) );
 
-		//next try to save another identical update, tests for patch that prevents storing duplicates
+		// Next, try to save another identical update, tests for patch that prevents storing duplicates.
 		wp_update_post(
 			array(
 				'post_content' => 'new update for some updated content',
 				'ID'           => $post_id,
 			)
-		); //content unchanged, shouldn't save
+		); // Content unchanged, shouldn't save.
 		$this->assertCount( 4, wp_get_post_revisions( $post_id ) );
 
-		//next try to save another update, same content, but new ttile, should save revision
+		// Next, try to save another update, same content, but new title, should save revision.
 		wp_update_post(
 			array(
 				'post_title'   => 'some-post-changed',
@@ -200,14 +201,14 @@ class Tests_Post_Revisions extends WP_UnitTestCase {
 		);
 		$this->assertCount( 5, wp_get_post_revisions( $post_id ) );
 
-		//next try to save another identical update
+		// Next, try to save another identical update.
 		wp_update_post(
 			array(
 				'post_title'   => 'some-post-changed',
 				'post_content' => 'new update for some updated content',
 				'ID'           => $post_id,
 			)
-		); //content unchanged, shouldn't save
+		); // Content unchanged, shouldn't save.
 		$this->assertCount( 6, wp_get_post_revisions( $post_id ) );
 
 		remove_filter( 'wp_save_post_revision_check_for_changes', '__return_false' );
@@ -240,7 +241,7 @@ class Tests_Post_Revisions extends WP_UnitTestCase {
 			$this->assertTrue( user_can( self::$editor_user_id, 'read_post', $revision->ID ) );
 		}
 
-		// Author should be able to view the revisions fine
+		// Author should be able to view the revisions fine.
 		foreach ( $revisions as $revision ) {
 			$this->assertTrue( user_can( self::$author_user_id, 'read_post', $revision->ID ) );
 		}
@@ -271,7 +272,7 @@ class Tests_Post_Revisions extends WP_UnitTestCase {
 			$this->assertTrue( user_can( self::$editor_user_id, 'edit_post', $revision->post_parent ) );
 		}
 
-		// Author shouldn't be able to restore the revisions
+		// Author shouldn't be able to restore the revisions.
 		foreach ( $revisions as $revision ) {
 			$this->assertFalse( user_can( self::$author_user_id, 'edit_post', $revision->post_parent ) );
 		}
@@ -302,14 +303,14 @@ class Tests_Post_Revisions extends WP_UnitTestCase {
 			)
 		);
 
-		// Diff checks if you can read both left and right revisions
+		// Diff checks if you can read both left and right revisions.
 		$revisions = wp_get_post_revisions( $post_id );
 		$this->assertCount( 2, $revisions );
 		foreach ( $revisions as $revision ) {
 			$this->assertTrue( user_can( self::$editor_user_id, 'read_post', $revision->ID ) );
 		}
 
-		// Author should be able to diff the revisions fine
+		// Author should be able to diff the revisions fine.
 		foreach ( $revisions as $revision ) {
 			$this->assertTrue( user_can( self::$author_user_id, 'read_post', $revision->ID ) );
 		}
@@ -351,7 +352,7 @@ class Tests_Post_Revisions extends WP_UnitTestCase {
 			$this->assertTrue( user_can( self::$editor_user_id, 'read_post', $revision->ID ) );
 		}
 
-		// Author should be able to view the revisions fine
+		// Author should be able to view the revisions fine.
 		foreach ( $revisions as $revision ) {
 			$this->assertTrue( user_can( self::$author_user_id, 'read_post', $revision->ID ) );
 		}
@@ -376,7 +377,7 @@ class Tests_Post_Revisions extends WP_UnitTestCase {
 		$editor_user = new WP_User( self::$editor_user_id );
 		$editor_user->add_cap( 'edit_published_events' );
 
-		//create a post as Editor
+		// Create a post as Editor.
 		$post_id = self::factory()->post->create(
 			array(
 				'post_type'   => $this->post_type,
@@ -396,7 +397,7 @@ class Tests_Post_Revisions extends WP_UnitTestCase {
 			$this->assertTrue( user_can( self::$editor_user_id, 'edit_post', $revision->post_parent ) );
 		}
 
-		// Author shouldn't be able to restore the revisions
+		// Author shouldn't be able to restore the revisions.
 		wp_set_current_user( self::$author_user_id );
 		foreach ( $revisions as $revision ) {
 			$this->assertFalse( user_can( self::$author_user_id, 'edit_post', $revision->post_parent ) );
@@ -497,14 +498,14 @@ class Tests_Post_Revisions extends WP_UnitTestCase {
 			)
 		);
 
-		// Diff checks if you can read both left and right revisions
+		// Diff checks if you can read both left and right revisions.
 		$revisions = wp_get_post_revisions( $post_id );
 		$this->assertCount( 2, $revisions );
 		foreach ( $revisions as $revision ) {
 			$this->assertTrue( user_can( self::$editor_user_id, 'read_post', $revision->ID ) );
 		}
 
-		// Author should be able to diff the revisions fine
+		// Author should be able to diff the revisions fine.
 		foreach ( $revisions as $revision ) {
 			$this->assertTrue( user_can( self::$author_user_id, 'read_post', $revision->ID ) );
 		}
@@ -543,7 +544,7 @@ class Tests_Post_Revisions extends WP_UnitTestCase {
 
 		$revisions = wp_get_post_revisions( $post['ID'] );
 
-		$this->assertEquals( $revision_ids, array_values( wp_list_pluck( $revisions, 'ID' ) ) );
+		$this->assertSame( $revision_ids, array_values( wp_list_pluck( $revisions, 'ID' ) ) );
 	}
 
 	/**
@@ -578,6 +579,6 @@ class Tests_Post_Revisions extends WP_UnitTestCase {
 
 		$revisions = wp_get_post_revisions( $post['ID'] );
 
-		$this->assertEquals( $revision_ids, array_values( wp_list_pluck( $revisions, 'ID' ) ) );
+		$this->assertSame( $revision_ids, array_values( wp_list_pluck( $revisions, 'ID' ) ) );
 	}
 }
diff --git a/tests/post/slashes.php b/tests/post/slashes.php
index 8187b3cd3c..229ec29aa2 100644
--- a/tests/post/slashes.php
+++ b/tests/post/slashes.php
@@ -12,8 +12,8 @@ class Tests_Post_Slashes extends WP_UnitTestCase {
 
 		wp_set_current_user( $this->author_id );
 
-		// it is important to test with both even and odd numbered slashes as
-		// kses does a strip-then-add slashes in some of its function calls
+		// It is important to test with both even and odd numbered slashes,
+		// as KSES does a strip-then-add slashes in some of its function calls.
 		$this->slash_1 = 'String with 1 slash \\';
 		$this->slash_2 = 'String with 2 slashes \\\\';
 		$this->slash_3 = 'String with 3 slashes \\\\\\';
@@ -24,7 +24,7 @@ class Tests_Post_Slashes extends WP_UnitTestCase {
 	}
 
 	/**
-	 * Tests the controller function that expects slashed data
+	 * Tests the controller function that expects slashed data.
 	 */
 	function test_edit_post() {
 		$id = self::factory()->post->create();
@@ -34,32 +34,34 @@ class Tests_Post_Slashes extends WP_UnitTestCase {
 		$_POST['post_title'] = $this->slash_1;
 		$_POST['content']    = $this->slash_5;
 		$_POST['excerpt']    = $this->slash_7;
-		$_POST               = add_magic_quotes( $_POST ); // the edit_post() function will strip slashes
+
+		$_POST = add_magic_quotes( $_POST ); // The edit_post() function will strip slashes.
 
 		$post_id = edit_post();
 		$post    = get_post( $post_id );
 
-		$this->assertEquals( $this->slash_1, $post->post_title );
-		$this->assertEquals( $this->slash_5, $post->post_content );
-		$this->assertEquals( $this->slash_7, $post->post_excerpt );
+		$this->assertSame( $this->slash_1, $post->post_title );
+		$this->assertSame( $this->slash_5, $post->post_content );
+		$this->assertSame( $this->slash_7, $post->post_excerpt );
 
 		$_POST               = array();
 		$_POST['post_ID']    = $id;
 		$_POST['post_title'] = $this->slash_2;
 		$_POST['content']    = $this->slash_4;
 		$_POST['excerpt']    = $this->slash_6;
-		$_POST               = add_magic_quotes( $_POST );
+
+		$_POST = add_magic_quotes( $_POST ); // The edit_post() function will strip slashes.
 
 		$post_id = edit_post();
 		$post    = get_post( $post_id );
 
-		$this->assertEquals( $this->slash_2, $post->post_title );
-		$this->assertEquals( $this->slash_4, $post->post_content );
-		$this->assertEquals( $this->slash_6, $post->post_excerpt );
+		$this->assertSame( $this->slash_2, $post->post_title );
+		$this->assertSame( $this->slash_4, $post->post_content );
+		$this->assertSame( $this->slash_6, $post->post_excerpt );
 	}
 
 	/**
-	 * Tests the model function that expects slashed data
+	 * Tests the model function that expects slashed data.
 	 */
 	function test_wp_insert_post() {
 		$id   = wp_insert_post(
@@ -74,9 +76,9 @@ class Tests_Post_Slashes extends WP_UnitTestCase {
 		);
 		$post = get_post( $id );
 
-		$this->assertEquals( wp_unslash( $this->slash_1 ), $post->post_title );
-		$this->assertEquals( wp_unslash( $this->slash_3 ), $post->post_content );
-		$this->assertEquals( wp_unslash( $this->slash_5 ), $post->post_excerpt );
+		$this->assertSame( wp_unslash( $this->slash_1 ), $post->post_title );
+		$this->assertSame( wp_unslash( $this->slash_3 ), $post->post_content );
+		$this->assertSame( wp_unslash( $this->slash_5 ), $post->post_excerpt );
 
 		$id   = wp_insert_post(
 			array(
@@ -89,13 +91,13 @@ class Tests_Post_Slashes extends WP_UnitTestCase {
 		);
 		$post = get_post( $id );
 
-		$this->assertEquals( wp_unslash( $this->slash_2 ), $post->post_title );
-		$this->assertEquals( wp_unslash( $this->slash_4 ), $post->post_content );
-		$this->assertEquals( wp_unslash( $this->slash_6 ), $post->post_excerpt );
+		$this->assertSame( wp_unslash( $this->slash_2 ), $post->post_title );
+		$this->assertSame( wp_unslash( $this->slash_4 ), $post->post_content );
+		$this->assertSame( wp_unslash( $this->slash_6 ), $post->post_excerpt );
 	}
 
 	/**
-	 * Tests the model function that expects slashed data
+	 * Tests the model function that expects slashed data.
 	 */
 	function test_wp_update_post() {
 		$id = self::factory()->post->create();
@@ -110,9 +112,9 @@ class Tests_Post_Slashes extends WP_UnitTestCase {
 		);
 		$post = get_post( $id );
 
-		$this->assertEquals( wp_unslash( $this->slash_1 ), $post->post_title );
-		$this->assertEquals( wp_unslash( $this->slash_3 ), $post->post_content );
-		$this->assertEquals( wp_unslash( $this->slash_5 ), $post->post_excerpt );
+		$this->assertSame( wp_unslash( $this->slash_1 ), $post->post_title );
+		$this->assertSame( wp_unslash( $this->slash_3 ), $post->post_content );
+		$this->assertSame( wp_unslash( $this->slash_5 ), $post->post_excerpt );
 
 		wp_update_post(
 			array(
@@ -124,9 +126,9 @@ class Tests_Post_Slashes extends WP_UnitTestCase {
 		);
 		$post = get_post( $id );
 
-		$this->assertEquals( wp_unslash( $this->slash_2 ), $post->post_title );
-		$this->assertEquals( wp_unslash( $this->slash_4 ), $post->post_content );
-		$this->assertEquals( wp_unslash( $this->slash_6 ), $post->post_excerpt );
+		$this->assertSame( wp_unslash( $this->slash_2 ), $post->post_title );
+		$this->assertSame( wp_unslash( $this->slash_4 ), $post->post_content );
+		$this->assertSame( wp_unslash( $this->slash_6 ), $post->post_excerpt );
 	}
 
 	/**
@@ -145,17 +147,17 @@ class Tests_Post_Slashes extends WP_UnitTestCase {
 
 		$post = get_post( $id );
 
-		$this->assertEquals( $this->slash_1, $post->post_title );
-		$this->assertEquals( $this->slash_3, $post->post_content );
-		$this->assertEquals( $this->slash_5, $post->post_excerpt );
+		$this->assertSame( $this->slash_1, $post->post_title );
+		$this->assertSame( $this->slash_3, $post->post_content );
+		$this->assertSame( $this->slash_5, $post->post_excerpt );
 
 		$untrashed = wp_untrash_post( $id );
 		$this->assertNotEmpty( $untrashed );
 
 		$post = get_post( $id );
 
-		$this->assertEquals( $this->slash_1, $post->post_title );
-		$this->assertEquals( $this->slash_3, $post->post_content );
-		$this->assertEquals( $this->slash_5, $post->post_excerpt );
+		$this->assertSame( $this->slash_1, $post->post_title );
+		$this->assertSame( $this->slash_3, $post->post_content );
+		$this->assertSame( $this->slash_5, $post->post_excerpt );
 	}
 }
diff --git a/tests/post/template.php b/tests/post/template.php
index 56d26cf77b..dad6bf1d11 100644
--- a/tests/post/template.php
+++ b/tests/post/template.php
@@ -21,7 +21,7 @@ class Tests_Post_Template extends WP_UnitTestCase {
 		$expected = '<p class="post-nav-links">Pages: <span class="post-page-numbers current" aria-current="page">1</span> ' . $page2 . '2</a> ' . $page3 . '3</a></p>';
 		$output   = wp_link_pages( array( 'echo' => 0 ) );
 
-		$this->assertEquals( $expected, $output );
+		$this->assertSame( $expected, $output );
 
 		$before_after = " <span class=\"post-page-numbers current\" aria-current=\"page\">1</span> {$page2}2</a> {$page3}3</a>";
 		$output       = wp_link_pages(
@@ -32,7 +32,7 @@ class Tests_Post_Template extends WP_UnitTestCase {
 			)
 		);
 
-		$this->assertEquals( $before_after, $output );
+		$this->assertSame( $before_after, $output );
 
 		$separator = " <span class=\"post-page-numbers current\" aria-current=\"page\">1</span>{$page2}2</a>{$page3}3</a>";
 		$output    = wp_link_pages(
@@ -44,7 +44,7 @@ class Tests_Post_Template extends WP_UnitTestCase {
 			)
 		);
 
-		$this->assertEquals( $separator, $output );
+		$this->assertSame( $separator, $output );
 
 		$link   = " <span class=\"post-page-numbers current\" aria-current=\"page\"><em>1</em></span>{$page2}<em>2</em></a>{$page3}<em>3</em></a>";
 		$output = wp_link_pages(
@@ -58,7 +58,7 @@ class Tests_Post_Template extends WP_UnitTestCase {
 			)
 		);
 
-		$this->assertEquals( $link, $output );
+		$this->assertSame( $link, $output );
 
 		$next   = "{$page2}<em>Next page</em></a>";
 		$output = wp_link_pages(
@@ -73,7 +73,7 @@ class Tests_Post_Template extends WP_UnitTestCase {
 			)
 		);
 
-		$this->assertEquals( $next, $output );
+		$this->assertSame( $next, $output );
 
 		$GLOBALS['page'] = 2;
 		$next_prev       = "{$permalink}<em>Previous page</em></a>{$page3}<em>Next page</em></a>";
@@ -89,7 +89,7 @@ class Tests_Post_Template extends WP_UnitTestCase {
 			)
 		);
 
-		$this->assertEquals( $next_prev, $output );
+		$this->assertSame( $next_prev, $output );
 
 		$next_prev_link = "{$permalink}Woo page</a>{$page3}Hoo page</a>";
 		$output         = wp_link_pages(
@@ -104,7 +104,7 @@ class Tests_Post_Template extends WP_UnitTestCase {
 			)
 		);
 
-		$this->assertEquals( $next_prev_link, $output );
+		$this->assertSame( $next_prev_link, $output );
 
 		$GLOBALS['page'] = 1;
 		$separator       = "<p class=\"post-nav-links\">Pages: <span class=\"post-page-numbers current\" aria-current=\"page\">1</span> | {$page2}2</a> | {$page3}3</a></p>";
@@ -115,7 +115,7 @@ class Tests_Post_Template extends WP_UnitTestCase {
 			)
 		);
 
-		$this->assertEquals( $separator, $output );
+		$this->assertSame( $separator, $output );
 
 		$pagelink = " <span class=\"post-page-numbers current\" aria-current=\"page\">Page 1</span> | {$page2}Page 2</a> | {$page3}Page 3</a>";
 		$output   = wp_link_pages(
@@ -128,7 +128,7 @@ class Tests_Post_Template extends WP_UnitTestCase {
 			)
 		);
 
-		$this->assertEquals( $pagelink, $output );
+		$this->assertSame( $pagelink, $output );
 	}
 
 	function test_wp_dropdown_pages() {
@@ -164,7 +164,7 @@ class Tests_Post_Template extends WP_UnitTestCase {
 LINEAGE;
 
 		$output = wp_dropdown_pages( array( 'echo' => 0 ) );
-		$this->assertEqualsIgnoreEOL( $lineage, $output );
+		$this->assertSameIgnoreEOL( $lineage, $output );
 
 		$depth = <<<DEPTH
 <select name='page_id' id='page_id'>
@@ -179,7 +179,7 @@ DEPTH;
 				'depth' => 1,
 			)
 		);
-		$this->assertEqualsIgnoreEOL( $depth, $output );
+		$this->assertSameIgnoreEOL( $depth, $output );
 
 		$option_none = <<<NONE
 <select name='page_id' id='page_id'>
@@ -197,7 +197,7 @@ NONE;
 				'option_none_value' => 'Woo',
 			)
 		);
-		$this->assertEqualsIgnoreEOL( $option_none, $output );
+		$this->assertSameIgnoreEOL( $option_none, $output );
 
 		$option_no_change = <<<NO
 <select name='page_id' id='page_id'>
@@ -217,7 +217,7 @@ NO;
 				'show_option_no_change' => 'Burrito',
 			)
 		);
-		$this->assertEqualsIgnoreEOL( $option_no_change, $output );
+		$this->assertSameIgnoreEOL( $option_no_change, $output );
 	}
 
 	/**
@@ -353,13 +353,13 @@ NO;
 			)
 		);
 
-		$this->assertEquals( '', get_page_template_slug( $page_id ) );
+		$this->assertSame( '', get_page_template_slug( $page_id ) );
 
 		update_post_meta( $page_id, '_wp_page_template', 'default' );
-		$this->assertEquals( '', get_page_template_slug( $page_id ) );
+		$this->assertSame( '', get_page_template_slug( $page_id ) );
 
 		update_post_meta( $page_id, '_wp_page_template', 'example.php' );
-		$this->assertEquals( 'example.php', get_page_template_slug( $page_id ) );
+		$this->assertSame( 'example.php', get_page_template_slug( $page_id ) );
 	}
 
 	/**
@@ -375,7 +375,7 @@ NO;
 		update_post_meta( $page_id, '_wp_page_template', 'example.php' );
 		$this->go_to( get_permalink( $page_id ) );
 
-		$this->assertEquals( 'example.php', get_page_template_slug() );
+		$this->assertSame( 'example.php', get_page_template_slug() );
 	}
 
 	/**
@@ -385,14 +385,14 @@ NO;
 	public function test_get_page_template_slug_non_page() {
 		$post_id = self::factory()->post->create();
 
-		$this->assertEquals( '', get_page_template_slug( $post_id ) );
+		$this->assertSame( '', get_page_template_slug( $post_id ) );
 
 		update_post_meta( $post_id, '_wp_page_template', 'default' );
 
-		$this->assertEquals( '', get_page_template_slug( $post_id ) );
+		$this->assertSame( '', get_page_template_slug( $post_id ) );
 
 		update_post_meta( $post_id, '_wp_page_template', 'example.php' );
-		$this->assertEquals( 'example.php', get_page_template_slug( $post_id ) );
+		$this->assertSame( 'example.php', get_page_template_slug( $post_id ) );
 	}
 
 	/**
@@ -405,7 +405,7 @@ NO;
 
 		$this->go_to( get_permalink( $post_id ) );
 
-		$this->assertEquals( 'example.php', get_page_template_slug() );
+		$this->assertSame( 'example.php', get_page_template_slug() );
 	}
 
 	/**
@@ -424,7 +424,7 @@ NO;
 		// After falling back, the 'after' argument should be set and output as '</ul>'.
 		$this->assertRegExp( '/<\/ul><\/div>/', $menu );
 
-		// After falling back, the markup should include whitespace around <li>s
+		// After falling back, the markup should include whitespace around <li>'s.
 		$this->assertRegExp( '/\s<li.*>|<\/li>\s/U', $menu );
 		$this->assertNotRegExp( '/><li.*>|<\/li></U', $menu );
 
@@ -447,7 +447,7 @@ NO;
 			)
 		);
 
-		// After falling back, the markup should not include whitespace around <li>s
+		// After falling back, the markup should not include whitespace around <li>'s.
 		$this->assertNotRegExp( '/\s<li.*>|<\/li>\s/U', $menu );
 		$this->assertRegExp( '/><li.*>|<\/li></U', $menu );
 
diff --git a/tests/post/thumbnails.php b/tests/post/thumbnails.php
index e8ca9e41a7..36a386d9bd 100644
--- a/tests/post/thumbnails.php
+++ b/tests/post/thumbnails.php
@@ -54,18 +54,18 @@ class Tests_Post_Thumbnail_Template extends WP_UnitTestCase {
 	}
 
 	function test_get_post_thumbnail_id() {
-		$this->assertEmpty( get_post_thumbnail_id( self::$post ) );
-		$this->assertEmpty( get_post_thumbnail_id( self::$post->ID ) );
-		$this->assertEmpty( get_post_thumbnail_id() );
+		$this->assertSame( 0, get_post_thumbnail_id( self::$post ) );
+		$this->assertSame( 0, get_post_thumbnail_id( self::$post->ID ) );
+		$this->assertFalse( get_post_thumbnail_id() );
 
 		set_post_thumbnail( self::$post, self::$attachment_id );
 
-		$this->assertEquals( self::$attachment_id, get_post_thumbnail_id( self::$post ) );
-		$this->assertEquals( self::$attachment_id, get_post_thumbnail_id( self::$post->ID ) );
+		$this->assertSame( self::$attachment_id, get_post_thumbnail_id( self::$post ) );
+		$this->assertSame( self::$attachment_id, get_post_thumbnail_id( self::$post->ID ) );
 
 		$GLOBALS['post'] = self::$post;
 
-		$this->assertEquals( self::$attachment_id, get_post_thumbnail_id() );
+		$this->assertSame( self::$attachment_id, get_post_thumbnail_id() );
 	}
 
 	function test_update_post_thumbnail_cache() {
@@ -90,7 +90,7 @@ class Tests_Post_Thumbnail_Template extends WP_UnitTestCase {
 	 * @ticket 12235
 	 */
 	function test_get_the_post_thumbnail_caption() {
-		$this->assertEquals( '', get_the_post_thumbnail_caption() );
+		$this->assertSame( '', get_the_post_thumbnail_caption() );
 
 		$caption = 'This is a caption.';
 
@@ -107,7 +107,7 @@ class Tests_Post_Thumbnail_Template extends WP_UnitTestCase {
 
 		set_post_thumbnail( $post_id, $attachment_id );
 
-		$this->assertEquals( $caption, get_the_post_thumbnail_caption( $post_id ) );
+		$this->assertSame( $caption, get_the_post_thumbnail_caption( $post_id ) );
 	}
 
 	/**
@@ -127,7 +127,7 @@ class Tests_Post_Thumbnail_Template extends WP_UnitTestCase {
 
 		set_post_thumbnail( $post_id, $attachment_id );
 
-		$this->assertEquals( '', get_the_post_thumbnail_caption( $post_id ) );
+		$this->assertSame( '', get_the_post_thumbnail_caption( $post_id ) );
 	}
 
 	/**
@@ -154,8 +154,8 @@ class Tests_Post_Thumbnail_Template extends WP_UnitTestCase {
 	}
 
 	function test_get_the_post_thumbnail() {
-		$this->assertEquals( '', get_the_post_thumbnail() );
-		$this->assertEquals( '', get_the_post_thumbnail( self::$post ) );
+		$this->assertSame( '', get_the_post_thumbnail() );
+		$this->assertSame( '', get_the_post_thumbnail( self::$post ) );
 		set_post_thumbnail( self::$post, self::$attachment_id );
 
 		$expected = wp_get_attachment_image(
@@ -167,11 +167,11 @@ class Tests_Post_Thumbnail_Template extends WP_UnitTestCase {
 			)
 		);
 
-		$this->assertEquals( $expected, get_the_post_thumbnail( self::$post ) );
+		$this->assertSame( $expected, get_the_post_thumbnail( self::$post ) );
 
 		$GLOBALS['post'] = self::$post;
 
-		$this->assertEquals( $expected, get_the_post_thumbnail() );
+		$this->assertSame( $expected, get_the_post_thumbnail() );
 	}
 
 	function test_the_post_thumbnail() {
@@ -210,11 +210,11 @@ class Tests_Post_Thumbnail_Template extends WP_UnitTestCase {
 		set_post_thumbnail( self::$post, self::$attachment_id );
 
 		$this->assertFalse( get_the_post_thumbnail_url() );
-		$this->assertEquals( wp_get_attachment_url( self::$attachment_id ), get_the_post_thumbnail_url( self::$post ) );
+		$this->assertSame( wp_get_attachment_url( self::$attachment_id ), get_the_post_thumbnail_url( self::$post ) );
 
 		$GLOBALS['post'] = self::$post;
 
-		$this->assertEquals( wp_get_attachment_url( self::$attachment_id ), get_the_post_thumbnail_url() );
+		$this->assertSame( wp_get_attachment_url( self::$attachment_id ), get_the_post_thumbnail_url() );
 	}
 
 	/**
@@ -307,7 +307,7 @@ class Tests_Post_Thumbnail_Template extends WP_UnitTestCase {
 		);
 
 		$thumbnail_id = get_post_thumbnail_id( $post_id );
-		$this->assertEquals( self::$attachment_id, $thumbnail_id );
+		$this->assertSame( self::$attachment_id, $thumbnail_id );
 
 		$post_id = wp_insert_post(
 			array(
@@ -342,7 +342,7 @@ class Tests_Post_Thumbnail_Template extends WP_UnitTestCase {
 		);
 
 		$thumbnail_id = get_post_thumbnail_id( $post_id );
-		$this->assertEquals( self::$attachment_id, $thumbnail_id );
+		$this->assertSame( self::$attachment_id, $thumbnail_id );
 
 		// Images do not support featured images.
 		$post_id = wp_insert_post(
diff --git a/tests/post/types.php b/tests/post/types.php
index cdab0337f3..9090f865c9 100644
--- a/tests/post/types.php
+++ b/tests/post/types.php
@@ -30,22 +30,29 @@ class Tests_Post_Types extends WP_UnitTestCase {
 
 		$pobj = get_post_type_object( 'foo' );
 		$this->assertInstanceOf( 'WP_Post_Type', $pobj );
-		$this->assertEquals( 'foo', $pobj->name );
+		$this->assertSame( 'foo', $pobj->name );
 
-		// Test some defaults
+		// Test some defaults.
 		$this->assertFalse( is_post_type_hierarchical( 'foo' ) );
-		$this->assertEquals( array(), get_object_taxonomies( 'foo' ) );
+		$this->assertSame( array(), get_object_taxonomies( 'foo' ) );
 
 		_unregister_post_type( 'foo' );
 	}
 
+	/**
+	 * @ticket 48558
+	 */
+	function test_register_post_type_return_value() {
+		$this->assertInstanceOf( 'WP_Post_Type', register_post_type( 'foo' ) );
+	}
+
 	/**
 	 * @ticket 31134
 	 *
 	 * @expectedIncorrectUsage register_post_type
 	 */
 	function test_register_post_type_with_too_long_name() {
-		// post type too long
+		// Post type too long.
 		$this->assertInstanceOf( 'WP_Error', register_post_type( 'abcdefghijklmnopqrstuvwxyz0123456789' ) );
 	}
 
@@ -55,55 +62,55 @@ class Tests_Post_Types extends WP_UnitTestCase {
 	 * @expectedIncorrectUsage register_post_type
 	 */
 	function test_register_post_type_with_empty_name() {
-		// post type too short
+		// Post type too short.
 		$this->assertInstanceOf( 'WP_Error', register_post_type( '' ) );
 	}
 
 	/**
 	 * @ticket 35985
-	 * @covers ::register_post_type()
+	 * @covers ::register_post_type
 	 */
 	function test_register_post_type_exclude_from_search_should_default_to_opposite_value_of_public() {
 		/*
 		 * 'public'              Default is false
 		 * 'exclude_from_search' Default is null (opposite 'public')
 		 */
-		$args = $this->register_post_type( array( 'public' => $public = false ) );
+		$args = register_post_type( $this->post_type, array( 'public' => $public = false ) );
 
 		$this->assertNotEquals( $public, $args->exclude_from_search );
 	}
 
 	/**
 	 * @ticket 35985
-	 * @covers ::register_post_type()
+	 * @covers ::register_post_type
 	 */
 	function test_register_post_type_publicly_queryable_should_default_to_value_of_public() {
 		/*
 		 * 'public'             Default is false
 		 * 'publicly_queryable' Default is null ('public')
 		 */
-		$args = $this->register_post_type( array( 'public' => $public = false ) );
+		$args = register_post_type( $this->post_type, array( 'public' => $public = false ) );
 
 		$this->assertSame( $public, $args->publicly_queryable );
 	}
 
 	/**
 	 * @ticket 35985
-	 * @covers ::register_post_type()
+	 * @covers ::register_post_type
 	 */
 	function test_register_post_type_show_ui_should_default_to_value_of_public() {
 		/*
 		 * 'public'  Default is false
 		 * 'show_ui' Default is null ('public')
 		 */
-		$args = $this->register_post_type( array( 'public' => $public = false ) );
+		$args = register_post_type( $this->post_type, array( 'public' => $public = false ) );
 
 		$this->assertSame( $public, $args->show_ui );
 	}
 
 	/**
 	 * @ticket 35985
-	 * @covers ::register_post_type()
+	 * @covers ::register_post_type
 	 */
 	function test_register_post_type_show_in_menu_should_default_to_value_of_show_ui() {
 		/*
@@ -111,7 +118,7 @@ class Tests_Post_Types extends WP_UnitTestCase {
 		 * 'show_ui'     Default is null ('public')
 		 * 'show_in_menu Default is null ('show_ui' > 'public')
 		 */
-		$args = $this->register_post_type( array( 'public' => $public = false ) );
+		$args = register_post_type( $this->post_type, array( 'public' => $public = false ) );
 
 		// Should fall back to 'show_ui'.
 		$this->assertSame( $args->show_ui, $args->show_in_menu );
@@ -122,21 +129,21 @@ class Tests_Post_Types extends WP_UnitTestCase {
 
 	/**
 	 * @ticket 35985
-	 * @covers ::register_post_type()
+	 * @covers ::register_post_type
 	 */
 	function test_register_post_type_show_in_nav_menus_should_default_to_value_of_public() {
 		/*
 		 * 'public'            Default is false
 		 * 'show_in_nav_menus' Default is null ('public')
 		 */
-		$args = $this->register_post_type( array( 'public' => $public = false ) );
+		$args = register_post_type( $this->post_type, array( 'public' => $public = false ) );
 
 		$this->assertSame( $public, $args->show_in_nav_menus );
 	}
 
 	/**
 	 * @ticket 35985
-	 * @covers ::register_post_type()
+	 * @covers ::register_post_type
 	 */
 	function test_register_post_type_show_in_admin_bar_should_default_to_value_of_show_in_menu() {
 		/*
@@ -144,7 +151,7 @@ class Tests_Post_Types extends WP_UnitTestCase {
 		 * 'show_in_menu'      Default is null ('show_ui' > 'public')
 		 * 'show_in_admin_bar' Default is null ('show_in_menu' > 'show_ui' > 'public')
 		 */
-		$args = $this->register_post_type( array( 'public' => $public = false ) );
+		$args = register_post_type( $this->post_type, array( 'public' => $public = false ) );
 
 		// Should fall back to 'show_in_menu'.
 		$this->assertSame( $args->show_in_menu, $args->show_in_admin_bar );
@@ -161,9 +168,9 @@ class Tests_Post_Types extends WP_UnitTestCase {
 
 		register_post_type( 'bar' );
 		register_taxonomy_for_object_type( 'post_tag', 'bar' );
-		$this->assertEquals( array( 'post_tag' ), get_object_taxonomies( 'bar' ) );
+		$this->assertSame( array( 'post_tag' ), get_object_taxonomies( 'bar' ) );
 		register_taxonomy_for_object_type( 'category', 'bar' );
-		$this->assertEquals( array( 'category', 'post_tag' ), get_object_taxonomies( 'bar' ) );
+		$this->assertSame( array( 'category', 'post_tag' ), get_object_taxonomies( 'bar' ) );
 
 		$this->assertTrue( is_object_in_taxonomy( 'bar', 'post_tag' ) );
 		$this->assertTrue( is_object_in_taxonomy( 'bar', 'post_tag' ) );
@@ -256,6 +263,15 @@ class Tests_Post_Types extends WP_UnitTestCase {
 		_unregister_post_type( 'foo' );
 	}
 
+	/**
+	 * @ticket 38844
+	 */
+	public function test_get_post_type_object_includes_menu_icon_for_builtin_post_types() {
+		$this->assertSame( 'dashicons-admin-post', get_post_type_object( 'post' )->menu_icon );
+		$this->assertSame( 'dashicons-admin-page', get_post_type_object( 'page' )->menu_icon );
+		$this->assertSame( 'dashicons-admin-media', get_post_type_object( 'attachment' )->menu_icon );
+	}
+
 	/**
 	 * @ticket 14761
 	 */
@@ -333,7 +349,7 @@ class Tests_Post_Types extends WP_UnitTestCase {
 		$this->assertTrue( unregister_post_type( 'foo' ) );
 		$this->assertNotContains( '%foo%', $wp_rewrite->rewritecode );
 		$this->assertNotContains( 'bar=', $wp_rewrite->queryreplace );
-		$this->assertSame( -- $count_before, count( $wp_rewrite->rewritereplace ) ); // Array was reduced by one value.
+		$this->assertSame( --$count_before, count( $wp_rewrite->rewritereplace ) ); // Array was reduced by one value.
 	}
 
 	/**
@@ -397,7 +413,7 @@ class Tests_Post_Types extends WP_UnitTestCase {
 			)
 		);
 
-		$this->assertEqualSetsWithIndex(
+		$this->assertSameSetsWithIndex(
 			array(
 				'editor' => true,
 				'author' => true,
@@ -547,28 +563,13 @@ class Tests_Post_Types extends WP_UnitTestCase {
 	 * @ticket 34010
 	 */
 	public function test_get_post_types_by_support_excluding_features() {
-		$this->assertEqualSets( array(), get_post_types_by_support( array( 'post-formats', 'page-attributes' ) ) );
+		$this->assertSameSets( array(), get_post_types_by_support( array( 'post-formats', 'page-attributes' ) ) );
 	}
 
 	/**
 	 * @ticket 34010
 	 */
 	public function test_get_post_types_by_support_non_existant_feature() {
-		$this->assertEqualSets( array(), get_post_types_by_support( 'somefeature' ) );
-	}
-
-	/**
-	 * Serves as a helper to register a post type for tests.
-	 *
-	 * Uses `$this->post_type` initialized in setUp().
-	 *
-	 * @since 4.5.0
-	 *
-	 * @param array $args register_post_type() arguments.
-	 * @return WP_Post_Type Post type object for `$this->post_type`.
-	 */
-	public function register_post_type( $args = array() ) {
-		register_post_type( $this->post_type, $args );
-		return get_post_type_object( $this->post_type );
+		$this->assertSameSets( array(), get_post_types_by_support( 'somefeature' ) );
 	}
 }
diff --git a/tests/post/wpInsertPost.php b/tests/post/wpInsertPost.php
index 649dd55e28..4c9f7a6390 100644
--- a/tests/post/wpInsertPost.php
+++ b/tests/post/wpInsertPost.php
@@ -77,7 +77,7 @@ class Tests_WPInsertPost extends WP_UnitTestCase {
 			)
 		);
 		wp_trash_post( $trashed_about_page_id );
-		$this->assertEquals( 'about__trashed', get_post( $trashed_about_page_id )->post_name );
+		$this->assertSame( 'about__trashed', get_post( $trashed_about_page_id )->post_name );
 	}
 
 	/**
@@ -93,7 +93,7 @@ class Tests_WPInsertPost extends WP_UnitTestCase {
 			)
 		);
 		wp_trash_post( $trashed_about_page_id );
-		$this->assertEquals( 'foo__trashed__foo__trashed', get_post( $trashed_about_page_id )->post_name );
+		$this->assertSame( 'foo__trashed__foo__trashed', get_post( $trashed_about_page_id )->post_name );
 	}
 
 	/**
@@ -110,7 +110,7 @@ class Tests_WPInsertPost extends WP_UnitTestCase {
 		wp_trash_post( $about_page_id );
 
 		wp_untrash_post( $about_page_id );
-		$this->assertEquals( 'about', get_post( $about_page_id )->post_name );
+		$this->assertSame( 'about', get_post( $about_page_id )->post_name );
 	}
 
 	/**
@@ -133,8 +133,8 @@ class Tests_WPInsertPost extends WP_UnitTestCase {
 			)
 		);
 
-		$this->assertEquals( 'about__trashed', get_post( $trashed_about_page_id )->post_name );
-		$this->assertEquals( 'about', get_post( $about_page_id )->post_name );
+		$this->assertSame( 'about__trashed', get_post( $trashed_about_page_id )->post_name );
+		$this->assertSame( 'about', get_post( $about_page_id )->post_name );
 	}
 
 	/**
@@ -160,8 +160,8 @@ class Tests_WPInsertPost extends WP_UnitTestCase {
 
 		wp_untrash_post( $about_page_id );
 
-		$this->assertEquals( 'about', get_post( $another_about_page_id )->post_name );
-		$this->assertEquals( 'about-2', get_post( $about_page_id )->post_name );
+		$this->assertSame( 'about', get_post( $another_about_page_id )->post_name );
+		$this->assertSame( 'about-2', get_post( $about_page_id )->post_name );
 	}
 
 	/**
@@ -316,7 +316,7 @@ class Tests_WPInsertPost extends WP_UnitTestCase {
 			)
 		);
 
-		$this->assertEquals( 'publish', get_post_status( $post_id ) );
+		$this->assertSame( 'publish', get_post_status( $post_id ) );
 
 		$post_id = $this->factory()->post->create(
 			array(
@@ -325,6 +325,6 @@ class Tests_WPInsertPost extends WP_UnitTestCase {
 			)
 		);
 
-		$this->assertEquals( 'future', get_post_status( $post_id ) );
+		$this->assertSame( 'future', get_post_status( $post_id ) );
 	}
 }
diff --git a/tests/post/wpPostType.php b/tests/post/wpPostType.php
index 041d1320c2..2cbc624c74 100644
--- a/tests/post/wpPostType.php
+++ b/tests/post/wpPostType.php
@@ -22,14 +22,14 @@ class Tests_WP_Post_Type extends WP_UnitTestCase {
 		$post_type_object->remove_supports();
 		$post_type_supports_after = get_all_post_type_supports( $post_type );
 
-		$this->assertEqualSets(
+		$this->assertSameSets(
 			array(
 				'title'  => true,
 				'editor' => true,
 			),
 			$post_type_supports
 		);
-		$this->assertEqualSets( array(), $post_type_supports_after );
+		$this->assertSameSets( array(), $post_type_supports_after );
 	}
 
 	public function test_add_supports_custom() {
@@ -51,7 +51,7 @@ class Tests_WP_Post_Type extends WP_UnitTestCase {
 		$post_type_object->remove_supports();
 		$post_type_supports_after = get_all_post_type_supports( $post_type );
 
-		$this->assertEqualSets(
+		$this->assertSameSets(
 			array(
 				'editor'    => true,
 				'comments'  => true,
@@ -59,7 +59,7 @@ class Tests_WP_Post_Type extends WP_UnitTestCase {
 			),
 			$post_type_supports
 		);
-		$this->assertEqualSets( array(), $post_type_supports_after );
+		$this->assertSameSets( array(), $post_type_supports_after );
 	}
 
 	/**
@@ -88,7 +88,7 @@ class Tests_WP_Post_Type extends WP_UnitTestCase {
 		$post_type_object->remove_supports();
 		$post_type_supports_after = get_all_post_type_supports( $post_type );
 
-		$this->assertEqualSets(
+		$this->assertSameSets(
 			array(
 				'support_with_args'    => array(
 					array(
@@ -100,7 +100,7 @@ class Tests_WP_Post_Type extends WP_UnitTestCase {
 			),
 			$post_type_supports
 		);
-		$this->assertEqualSets( array(), $post_type_supports_after );
+		$this->assertSameSets( array(), $post_type_supports_after );
 	}
 
 	public function test_does_not_add_query_var_if_not_public() {
@@ -213,7 +213,7 @@ class Tests_WP_Post_Type extends WP_UnitTestCase {
 
 		unset( $wp_post_types[ $post_type ] );
 
-		$this->assertEqualSets( array( 'post_tag' ), $taxonomies );
-		$this->assertEqualSets( array(), $taxonomies_after );
+		$this->assertSameSets( array( 'post_tag' ), $taxonomies );
+		$this->assertSameSets( array(), $taxonomies_after );
 	}
 }
diff --git a/tests/post/wpUniquePostSlug.php b/tests/post/wpUniquePostSlug.php
index eb6d637389..45a8cd7e7d 100644
--- a/tests/post/wpUniquePostSlug.php
+++ b/tests/post/wpUniquePostSlug.php
@@ -36,7 +36,7 @@ class Tests_Post_WpUniquePostSlug extends WP_UnitTestCase {
 			}
 
 			$post = get_post( $id );
-			$this->assertEquals( $outputs[ $k ], urldecode( $post->post_name ) );
+			$this->assertSame( $outputs[ $k ], urldecode( $post->post_name ) );
 		}
 	}
 
@@ -56,11 +56,11 @@ class Tests_Post_WpUniquePostSlug extends WP_UnitTestCase {
 		$args['post_type'] = 'post-type-2';
 		$two               = self::factory()->post->create( $args );
 
-		$this->assertEquals( 'some-slug', get_post( $one )->post_name );
-		$this->assertEquals( 'some-slug', get_post( $two )->post_name );
+		$this->assertSame( 'some-slug', get_post( $one )->post_name );
+		$this->assertSame( 'some-slug', get_post( $two )->post_name );
 
-		$this->assertEquals( 'some-other-slug', wp_unique_post_slug( 'some-other-slug', $one, 'publish', 'post-type-1', 0 ) );
-		$this->assertEquals( 'some-other-slug', wp_unique_post_slug( 'some-other-slug', $one, 'publish', 'post-type-2', 0 ) );
+		$this->assertSame( 'some-other-slug', wp_unique_post_slug( 'some-other-slug', $one, 'publish', 'post-type-1', 0 ) );
+		$this->assertSame( 'some-other-slug', wp_unique_post_slug( 'some-other-slug', $one, 'publish', 'post-type-2', 0 ) );
 
 		_unregister_post_type( 'post-type-1' );
 		_unregister_post_type( 'post-type-2' );
@@ -81,10 +81,10 @@ class Tests_Post_WpUniquePostSlug extends WP_UnitTestCase {
 		$args['post_name'] = 'some-slug-2';
 		$two               = self::factory()->post->create( $args );
 
-		$this->assertEquals( 'some-slug', get_post( $one )->post_name );
-		$this->assertEquals( 'some-slug-2', get_post( $two )->post_name );
+		$this->assertSame( 'some-slug', get_post( $one )->post_name );
+		$this->assertSame( 'some-slug-2', get_post( $two )->post_name );
 
-		$this->assertEquals( 'some-slug-3', wp_unique_post_slug( 'some-slug', 0, 'publish', 'post-type-1', 0 ) );
+		$this->assertSame( 'some-slug-3', wp_unique_post_slug( 'some-slug', 0, 'publish', 'post-type-1', 0 ) );
 
 		_unregister_post_type( 'post-type-1' );
 	}
@@ -117,20 +117,20 @@ class Tests_Post_WpUniquePostSlug extends WP_UnitTestCase {
 		);
 		$two  = self::factory()->post->create( $args );
 
-		$this->assertEquals( 'some-slug', get_post( $one )->post_name );
-		$this->assertEquals( 'image', get_post( $attachment )->post_name );
-		$this->assertEquals( 'image-2', get_post( $two )->post_name );
+		$this->assertSame( 'some-slug', get_post( $one )->post_name );
+		$this->assertSame( 'image', get_post( $attachment )->post_name );
+		$this->assertSame( 'image-2', get_post( $two )->post_name );
 
-		// 'image' can be a child of image-2
-		$this->assertEquals( 'image', wp_unique_post_slug( 'image', 0, 'publish', 'post-type-1', $two ) );
+		// 'image' can be a child of image-2.
+		$this->assertSame( 'image', wp_unique_post_slug( 'image', 0, 'publish', 'post-type-1', $two ) );
 
 		_unregister_post_type( 'post-type-1' );
 	}
 
 	/**
-	 * @dataProvider whitelist_post_statuses
+	 * @dataProvider allowed_post_statuses
 	 */
-	public function test_whitelisted_post_statuses_should_not_be_forced_to_be_unique( $status ) {
+	public function test_allowed_post_statuses_should_not_be_forced_to_be_unique( $status ) {
 		$p1 = self::factory()->post->create(
 			array(
 				'post_type' => 'post',
@@ -149,7 +149,7 @@ class Tests_Post_WpUniquePostSlug extends WP_UnitTestCase {
 		$this->assertSame( 'foo', $actual );
 	}
 
-	public function whitelist_post_statuses() {
+	public function allowed_post_statuses() {
 		return array(
 			array( 'draft' ),
 			array( 'pending' ),
@@ -190,7 +190,7 @@ class Tests_Post_WpUniquePostSlug extends WP_UnitTestCase {
 		);
 
 		$found = wp_unique_post_slug( '2015', $p, 'publish', 'post', 0 );
-		$this->assertEquals( '2015-2', $found );
+		$this->assertSame( '2015-2', $found );
 	}
 
 	/**
@@ -208,7 +208,7 @@ class Tests_Post_WpUniquePostSlug extends WP_UnitTestCase {
 		);
 
 		$found = wp_unique_post_slug( '2015', $p, 'publish', 'post', 0 );
-		$this->assertEquals( '2015-2', $found );
+		$this->assertSame( '2015-2', $found );
 	}
 
 	/**
@@ -225,7 +225,7 @@ class Tests_Post_WpUniquePostSlug extends WP_UnitTestCase {
 		);
 
 		$found = wp_unique_post_slug( '2015', $p, 'publish', 'post', 0 );
-		$this->assertEquals( '2015', $found );
+		$this->assertSame( '2015', $found );
 	}
 
 	/**
@@ -242,7 +242,7 @@ class Tests_Post_WpUniquePostSlug extends WP_UnitTestCase {
 		);
 
 		$found = wp_unique_post_slug( '11', $p, 'publish', 'post', 0 );
-		$this->assertEquals( '11-2', $found );
+		$this->assertSame( '11-2', $found );
 	}
 
 	/**
@@ -259,7 +259,7 @@ class Tests_Post_WpUniquePostSlug extends WP_UnitTestCase {
 		);
 
 		$found = wp_unique_post_slug( '11', $p, 'publish', 'post', 0 );
-		$this->assertEquals( '11', $found );
+		$this->assertSame( '11', $found );
 	}
 
 	/**
@@ -276,7 +276,7 @@ class Tests_Post_WpUniquePostSlug extends WP_UnitTestCase {
 		);
 
 		$found = wp_unique_post_slug( '13', $p, 'publish', 'post', 0 );
-		$this->assertEquals( '13', $found );
+		$this->assertSame( '13', $found );
 	}
 
 	/**
@@ -293,7 +293,7 @@ class Tests_Post_WpUniquePostSlug extends WP_UnitTestCase {
 		);
 
 		$found = wp_unique_post_slug( '30', $p, 'publish', 'post', 0 );
-		$this->assertEquals( '30-2', $found );
+		$this->assertSame( '30-2', $found );
 	}
 
 	/**
@@ -310,7 +310,7 @@ class Tests_Post_WpUniquePostSlug extends WP_UnitTestCase {
 		);
 
 		$found = wp_unique_post_slug( '30', $p, 'publish', 'post', 0 );
-		$this->assertEquals( '30', $found );
+		$this->assertSame( '30', $found );
 	}
 
 	/**
@@ -327,7 +327,7 @@ class Tests_Post_WpUniquePostSlug extends WP_UnitTestCase {
 		);
 
 		$found = wp_unique_post_slug( '32', $p, 'publish', 'post', 0 );
-		$this->assertEquals( '32', $found );
+		$this->assertSame( '32', $found );
 	}
 
 	/**
diff --git a/tests/privacy/wpPrivacyCompletedRequest.php b/tests/privacy/wpPrivacyCompletedRequest.php
index 71884dc7d8..b3d45a9c89 100644
--- a/tests/privacy/wpPrivacyCompletedRequest.php
+++ b/tests/privacy/wpPrivacyCompletedRequest.php
@@ -11,7 +11,7 @@
  * Tests_WpPrivacyCompletedRequest class.
  *
  * @group privacy
- * @covers _wp_privacy_completed_request
+ * @covers ::_wp_privacy_completed_request
  *
  * @since 4.9.6
  */
diff --git a/tests/privacy/wpPrivacyDeleteOldExportFiles.php b/tests/privacy/wpPrivacyDeleteOldExportFiles.php
index 65a827c732..69b0dc129a 100644
--- a/tests/privacy/wpPrivacyDeleteOldExportFiles.php
+++ b/tests/privacy/wpPrivacyDeleteOldExportFiles.php
@@ -56,8 +56,8 @@ class Tests_Privacy_WpPrivacyDeleteOldExportFiles extends WP_UnitTestCase {
 		}
 
 		self::$index_path          = $exports_dir . 'index.html';
-		self::$expired_export_file = $exports_dir . 'wp-personal-data-file-user-at-example-com-0123456789abcdef.zip';
-		self::$active_export_file  = $exports_dir . 'wp-personal-data-file-user-at-example-com-fedcba9876543210.zip';
+		self::$expired_export_file = $exports_dir . 'wp-personal-data-file-0123456789abcdef.zip';
+		self::$active_export_file  = $exports_dir . 'wp-personal-data-file-fedcba9876543210.zip';
 	}
 
 	/**
diff --git a/tests/privacy/wpPrivacyGeneratePersonalDataExportFile.php b/tests/privacy/wpPrivacyGeneratePersonalDataExportFile.php
index 9ca05dadca..36f7945180 100644
--- a/tests/privacy/wpPrivacyGeneratePersonalDataExportFile.php
+++ b/tests/privacy/wpPrivacyGeneratePersonalDataExportFile.php
@@ -237,11 +237,11 @@ class Tests_Privacy_WpPrivacyGeneratePersonalDataExportFile extends WP_UnitTestC
 	}
 
 	/**
-	 * Test the export file has all the expected parts.
+	 * Test the export HTML file has all the expected parts.
 	 *
 	 * @ticket 44233
 	 */
-	public function test_contents() {
+	public function test_html_contents() {
 		$this->expectOutputString( '' );
 		wp_privacy_generate_personal_data_export_file( self::$export_request_id );
 		$this->assertTrue( file_exists( $this->export_file_name ) );
@@ -258,10 +258,400 @@ class Tests_Privacy_WpPrivacyGeneratePersonalDataExportFile extends WP_UnitTestC
 		$this->assertTrue( file_exists( $report_dir . 'index.html' ) );
 
 		$report_contents = file_get_contents( $report_dir . 'index.html' );
-		$request         = wp_get_user_request_data( self::$export_request_id );
+		$request         = wp_get_user_request( self::$export_request_id );
 
-		$this->assertContains( '<h1>Personal Data Export</h1>', $report_contents );
-		$this->assertContains( '<h2>About</h2>', $report_contents );
+		$this->assertContains( '<h1 id="top">Personal Data Export</h1>', $report_contents );
+		$this->assertContains( '<h2 id="about-about">About</h2>', $report_contents );
 		$this->assertContains( $request->email, $report_contents );
 	}
+
+	/**
+	 * Test the export JSON file has all the expected parts.
+	 *
+	 * @ticket 49029
+	 */
+	public function test_json_contents() {
+		$this->expectOutputString( '' );
+		wp_privacy_generate_personal_data_export_file( self::$export_request_id );
+		$this->assertTrue( file_exists( $this->export_file_name ) );
+
+		$report_dir = trailingslashit( self::$exports_dir . 'test_contents' );
+		mkdir( $report_dir );
+
+		$zip        = new ZipArchive();
+		$opened_zip = $zip->open( $this->export_file_name );
+		$this->assertTrue( $opened_zip );
+
+		$zip->extractTo( $report_dir );
+		$zip->close();
+
+		$request = wp_get_user_request( self::$export_request_id );
+
+		$this->assertTrue( file_exists( $report_dir . 'export.json' ) );
+
+		$report_contents_json = file_get_contents( $report_dir . 'export.json' );
+
+		$this->assertContains( '"Personal Data Export for ' . $request->email . '"', $report_contents_json );
+		$this->assertContains( '"about"', $report_contents_json );
+	}
+
+	/**
+	 * Test the export HTML file containing one export group has no table of contents.
+	 *
+	 * @ticket 46894
+	 */
+	public function test_single_group_export_no_toc_or_return_to_top() {
+		$this->expectOutputString( '' );
+		wp_privacy_generate_personal_data_export_file( self::$export_request_id );
+		$this->assertTrue( file_exists( $this->export_file_name ) );
+
+		$report_dir = trailingslashit( self::$exports_dir . 'test_contents' );
+		mkdir( $report_dir );
+
+		$zip        = new ZipArchive();
+		$opened_zip = $zip->open( $this->export_file_name );
+		$this->assertTrue( $opened_zip );
+
+		$zip->extractTo( $report_dir );
+		$zip->close();
+		$this->assertTrue( file_exists( $report_dir . 'index.html' ) );
+
+		$report_contents = file_get_contents( $report_dir . 'index.html' );
+		$request         = wp_get_user_request( self::$export_request_id );
+
+		$this->assertNotContains( '<div id="table_of_contents">', $report_contents );
+		$this->assertNotContains( '<div class="return-to-top">', $report_contents );
+		$this->assertContains( $request->email, $report_contents );
+	}
+
+	/**
+	 * Test the export HTML file containing ore than one export group has a table of contents.
+	 *
+	 * @ticket 46894
+	 */
+	public function test_multiple_group_export_has_toc_and_return_to_top() {
+		$this->expectOutputString( '' );
+
+		// Setup Export Data to contain multiple groups
+		$export_data_grouped = array(
+			'user' => array(
+				'group_label'       => 'User',
+				'group_description' => 'User&#8217;s profile data.',
+				'items'             => array(
+					'user-1' => array(
+						array(
+							'name'  => 'User ID',
+							'value' => 1,
+						),
+						array(
+							'name'  => 'User Login Name',
+							'value' => 'user_login',
+						),
+						array(
+							'name'  => 'User Nice Name',
+							'value' => 'User Name',
+						),
+						array(
+							'name'  => 'User Email',
+							'value' => 'export-requester@example.com',
+						),
+						array(
+							'name'  => 'User Registration Date',
+							'value' => '2020-01-31 19:29:29',
+						),
+						array(
+							'name'  => 'User Display Name',
+							'value' => 'User Name',
+						),
+						array(
+							'name'  => 'User Nickname',
+							'value' => 'User',
+						),
+					),
+				),
+			),
+		);
+		update_post_meta( self::$export_request_id, '_export_data_grouped', $export_data_grouped );
+
+		// Generate Export File
+		wp_privacy_generate_personal_data_export_file( self::$export_request_id );
+		$this->assertTrue( file_exists( $this->export_file_name ) );
+
+		// Cleam-up for subsequent tests
+		update_post_meta( self::$export_request_id, '_export_data_grouped', array() );
+
+		$report_dir = trailingslashit( self::$exports_dir . 'test_contents' );
+		mkdir( $report_dir );
+
+		$zip        = new ZipArchive();
+		$opened_zip = $zip->open( $this->export_file_name );
+		$this->assertTrue( $opened_zip );
+
+		$zip->extractTo( $report_dir );
+		$zip->close();
+		$this->assertTrue( file_exists( $report_dir . 'index.html' ) );
+
+		$report_contents = file_get_contents( $report_dir . 'index.html' );
+		$request         = wp_get_user_request( self::$export_request_id );
+
+		$this->assertContains( '<div id="table_of_contents">', $report_contents );
+		$this->assertContains( '<h2 id="user-user">User</h2>', $report_contents );
+		$this->assertContains( '<div class="return-to-top">', $report_contents );
+		$this->assertContains( $request->email, $report_contents );
+	}
+
+	/**
+	 * Test the export HTML file containing multiple export groups with multiple group items
+	 * has a table of contents with group count.
+	 *
+	 * @ticket 46894
+	 */
+	public function test_multiple_group_export_multiple_items_group_count_in_toc() {
+		$this->expectOutputString( '' );
+
+		// Setup Export Data to contain multiple groups
+		$export_data_grouped = array(
+			'user'     => array(
+				'group_label'       => 'User',
+				'group_description' => 'User&#8217;s profile data.',
+				'items'             => array(
+					'user-1' => array(
+						array(
+							'name'  => 'User ID',
+							'value' => 1,
+						),
+						array(
+							'name'  => 'User Login Name',
+							'value' => 'user_login',
+						),
+						array(
+							'name'  => 'User Nice Name',
+							'value' => 'User Name',
+						),
+						array(
+							'name'  => 'User Email',
+							'value' => 'export-requester@example.com',
+						),
+						array(
+							'name'  => 'User Registration Date',
+							'value' => '2020-01-31 19:29:29',
+						),
+						array(
+							'name'  => 'User Display Name',
+							'value' => 'User Name',
+						),
+						array(
+							'name'  => 'User Nickname',
+							'value' => 'User',
+						),
+					),
+				),
+			),
+			'comments' => array(
+				'group_label'       => 'Comments',
+				'group_description' => 'User&#8217;s comment data.',
+				'items'             => array(
+					'comment-2' => array(
+						array(
+							'name'  => 'Comment Author',
+							'value' => 'User Name',
+						),
+						array(
+							'name'  => 'Comment Author Email',
+							'value' => 'export-requester@example.com',
+						),
+						array(
+							'name'  => 'Comment Author IP',
+							'value' => '::1',
+						),
+						array(
+							'name'  => 'Comment Author User Agent',
+							'value' => 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_2) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/79.0.3945.130 Safari/537.36',
+						),
+						array(
+							'name'  => 'Comment Date',
+							'value' => '2020-01-31 19:55:19',
+						),
+						array(
+							'name'  => 'Comment Content',
+							'value' => 'Test',
+						),
+						array(
+							'name'  => 'Comment URL',
+							'value' => '<a href="http://localhost:8888/46894/2020/01/31/hello-world/#comment-2" target="_blank" rel="noreferrer noopener">http://localhost:8888/46894/2020/01/31/hello-world/#comment-2</a>',
+						),
+					),
+					'comment-3' => array(
+						array(
+							'name'  => 'Comment Author',
+							'value' => 'User Name',
+						),
+						array(
+							'name'  => 'Comment Author Email',
+							'value' => 'export-requester@example.com',
+						),
+						array(
+							'name'  => 'Comment Author IP',
+							'value' => '::1',
+						),
+						array(
+							'name'  => 'Comment Author User Agent',
+							'value' => 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_2) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/79.0.3945.130 Safari/537.36',
+						),
+						array(
+							'name'  => 'Comment Date',
+							'value' => '2020-01-31 20:55:19',
+						),
+						array(
+							'name'  => 'Comment Content',
+							'value' => 'Test #2',
+						),
+						array(
+							'name'  => 'Comment URL',
+							'value' => '<a href="http://localhost:8888/46894/2020/01/31/hello-world/#comment-3" target="_blank" rel="noreferrer noopener">http://localhost:8888/46894/2020/01/31/hello-world/#comment-3</a>',
+						),
+					),
+				),
+			),
+		);
+		update_post_meta( self::$export_request_id, '_export_data_grouped', $export_data_grouped );
+
+		// Generate Export File
+		wp_privacy_generate_personal_data_export_file( self::$export_request_id );
+		$this->assertTrue( file_exists( $this->export_file_name ) );
+
+		// Cleam-up for subsequent tests
+		update_post_meta( self::$export_request_id, '_export_data_grouped', array() );
+
+		$report_dir = trailingslashit( self::$exports_dir . 'test_contents' );
+		mkdir( $report_dir );
+
+		$zip        = new ZipArchive();
+		$opened_zip = $zip->open( $this->export_file_name );
+		$this->assertTrue( $opened_zip );
+
+		$zip->extractTo( $report_dir );
+		$zip->close();
+		$this->assertTrue( file_exists( $report_dir . 'index.html' ) );
+
+		$report_contents = file_get_contents( $report_dir . 'index.html' );
+		$request         = wp_get_user_request( self::$export_request_id );
+
+		$this->assertContains( '<div id="table_of_contents">', $report_contents );
+		$this->assertContains( '<a href="#comments-comments">Comments <span class="count">(2)</span></a>', $report_contents );
+		$this->assertContains( $request->email, $report_contents );
+	}
+
+	/**
+	 * Test the export HTML file containing multiple export groups with no multiple group items
+	 * has a table of contents without group count.
+	 *
+	 * @ticket 46894
+	 */
+	public function test_multiple_group_export_single_items_no_group_count_in_toc() {
+		$this->expectOutputString( '' );
+
+		// Setup Export Data to contain multiple groups
+		$export_data_grouped = array(
+			'user'     => array(
+				'group_label'       => 'User',
+				'group_description' => 'User&#8217;s profile data.',
+				'items'             => array(
+					'user-1' => array(
+						array(
+							'name'  => 'User ID',
+							'value' => 1,
+						),
+						array(
+							'name'  => 'User Login Name',
+							'value' => 'user_login',
+						),
+						array(
+							'name'  => 'User Nice Name',
+							'value' => 'User Name',
+						),
+						array(
+							'name'  => 'User Email',
+							'value' => 'export-requester@example.com',
+						),
+						array(
+							'name'  => 'User Registration Date',
+							'value' => '2020-01-31 19:29:29',
+						),
+						array(
+							'name'  => 'User Display Name',
+							'value' => 'User Name',
+						),
+						array(
+							'name'  => 'User Nickname',
+							'value' => 'User',
+						),
+					),
+				),
+			),
+			'comments' => array(
+				'group_label'       => 'Comments',
+				'group_description' => 'User&#8217;s comment data.',
+				'items'             => array(
+					'comment-2' => array(
+						array(
+							'name'  => 'Comment Author',
+							'value' => 'User Name',
+						),
+						array(
+							'name'  => 'Comment Author Email',
+							'value' => 'export-requester@example.com',
+						),
+						array(
+							'name'  => 'Comment Author IP',
+							'value' => '::1',
+						),
+						array(
+							'name'  => 'Comment Author User Agent',
+							'value' => 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_2) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/79.0.3945.130 Safari/537.36',
+						),
+						array(
+							'name'  => 'Comment Date',
+							'value' => '2020-01-31 19:55:19',
+						),
+						array(
+							'name'  => 'Comment Content',
+							'value' => 'Test',
+						),
+						array(
+							'name'  => 'Comment URL',
+							'value' => '<a href="http://localhost:8888/46894/2020/01/31/hello-world/#comment-2" target="_blank" rel="noreferrer noopener">http://localhost:8888/46894/2020/01/31/hello-world/#comment-2</a>',
+						),
+					),
+				),
+			),
+		);
+		update_post_meta( self::$export_request_id, '_export_data_grouped', $export_data_grouped );
+
+		// Generate Export File
+		wp_privacy_generate_personal_data_export_file( self::$export_request_id );
+		$this->assertTrue( file_exists( $this->export_file_name ) );
+
+		// Cleam-up for subsequent tests
+		update_post_meta( self::$export_request_id, '_export_data_grouped', array() );
+
+		$report_dir = trailingslashit( self::$exports_dir . 'test_contents' );
+		mkdir( $report_dir );
+
+		$zip        = new ZipArchive();
+		$opened_zip = $zip->open( $this->export_file_name );
+		$this->assertTrue( $opened_zip );
+
+		$zip->extractTo( $report_dir );
+		$zip->close();
+		$this->assertTrue( file_exists( $report_dir . 'index.html' ) );
+
+		$report_contents = file_get_contents( $report_dir . 'index.html' );
+		$request         = wp_get_user_request( self::$export_request_id );
+
+		$this->assertContains( '<div id="table_of_contents">', $report_contents );
+		$this->assertNotContains( '<span class="count">', $report_contents );
+		$this->assertContains( $request->email, $report_contents );
+
+	}
 }
diff --git a/tests/privacy/wpPrivacyGeneratePersonalDataExportGroupHtml.php b/tests/privacy/wpPrivacyGeneratePersonalDataExportGroupHtml.php
index 688f790e22..de721ab451 100644
--- a/tests/privacy/wpPrivacyGeneratePersonalDataExportGroupHtml.php
+++ b/tests/privacy/wpPrivacyGeneratePersonalDataExportGroupHtml.php
@@ -39,10 +39,10 @@ class Tests_Privacy_WpPrivacyGeneratePersonalDataExportGroupHtml extends WP_Unit
 			),
 		);
 
-		$actual                = wp_privacy_generate_personal_data_export_group_html( $data );
+		$actual                = wp_privacy_generate_personal_data_export_group_html( $data, 'test-data-group', 2 );
 		$expected_table_markup = '<table><tbody><tr><th>Field 1 Name</th><td>Field 1 Value</td></tr><tr><th>Field 2 Name</th><td>Field 2 Value</td></tr></tbody></table>';
 
-		$this->assertContains( '<h2>Test Data Group</h2>', $actual );
+		$this->assertContains( '<h2 id="test-data-group-test-data-group">Test Data Group</h2>', $actual );
 		$this->assertContains( $expected_table_markup, $actual );
 	}
 
@@ -79,9 +79,9 @@ class Tests_Privacy_WpPrivacyGeneratePersonalDataExportGroupHtml extends WP_Unit
 			),
 		);
 
-		$actual = wp_privacy_generate_personal_data_export_group_html( $data );
+		$actual = wp_privacy_generate_personal_data_export_group_html( $data, 'test-data-group', 2 );
 
-		$this->assertContains( '<h2>Test Data Group', $actual );
+		$this->assertContains( '<h2 id="test-data-group-test-data-group">Test Data Group', $actual );
 		$this->assertContains( '<td>Field 1 Value', $actual );
 		$this->assertContains( '<td>Another Field 1 Value', $actual );
 		$this->assertContains( '<td>Field 2 Value', $actual );
@@ -117,7 +117,7 @@ class Tests_Privacy_WpPrivacyGeneratePersonalDataExportGroupHtml extends WP_Unit
 			),
 		);
 
-		$actual = wp_privacy_generate_personal_data_export_group_html( $data );
+		$actual = wp_privacy_generate_personal_data_export_group_html( $data, 'test-data-group', 2 );
 
 		$this->assertContains( '<a href="http://wordpress.org">http://wordpress.org</a>', $actual );
 		$this->assertContains( '<a href="https://wordpress.org">https://wordpress.org</a>', $actual );
@@ -131,13 +131,13 @@ class Tests_Privacy_WpPrivacyGeneratePersonalDataExportGroupHtml extends WP_Unit
 	 */
 	public function test_group_labels_escaped() {
 		$data = array(
-			'group_label' => '<div>Escape HTML in group lavels</div>',
+			'group_label' => '<div>Escape HTML in group labels</div>',
 			'items'       => array(),
 		);
 
-		$actual = wp_privacy_generate_personal_data_export_group_html( $data );
+		$actual = wp_privacy_generate_personal_data_export_group_html( $data, 'escape-html-in-group-labels', 2 );
 
-		$this->assertContains( '<h2>&lt;div&gt;Escape HTML in group lavels&lt;/div&gt;</h2>', $actual );
+		$this->assertContains( '<h2 id="escape-html-in-group-labels-escape-html-in-group-labels">&lt;div&gt;Escape HTML in group labels&lt;/div&gt;</h2>', $actual );
 	}
 
 	/**
@@ -162,8 +162,7 @@ class Tests_Privacy_WpPrivacyGeneratePersonalDataExportGroupHtml extends WP_Unit
 			),
 		);
 
-		$actual = wp_privacy_generate_personal_data_export_group_html( $data );
-
+		$actual = wp_privacy_generate_personal_data_export_group_html( $data, 'test-data-group', 2 );
 		$this->assertContains( $data['items'][0]['links']['value'], $actual );
 		$this->assertContains( $data['items'][0]['formatting']['value'], $actual );
 	}
@@ -190,7 +189,7 @@ class Tests_Privacy_WpPrivacyGeneratePersonalDataExportGroupHtml extends WP_Unit
 			),
 		);
 
-		$actual = wp_privacy_generate_personal_data_export_group_html( $data );
+		$actual = wp_privacy_generate_personal_data_export_group_html( $data, 'test-data-group', 2 );
 
 		$this->assertNotContains( $data['items'][0]['scripts']['value'], $actual );
 		$this->assertContains( '<td>Testing that script tags are stripped.</td>', $actual );
@@ -223,9 +222,9 @@ class Tests_Privacy_WpPrivacyGeneratePersonalDataExportGroupHtml extends WP_Unit
 			),
 		);
 
-		$actual = wp_privacy_generate_personal_data_export_group_html( $data );
+		$actual = wp_privacy_generate_personal_data_export_group_html( $data, 'test-data-group', 2 );
 
-		$this->assertContains( '<h2>Test Data Group', $actual );
+		$this->assertContains( '<h2 id="test-data-group-test-data-group">Test Data Group', $actual );
 		$this->assertContains( '<span class="count">(2)</span></h2>', $actual );
 		$this->assertSame( 2, substr_count( $actual, '<table>' ) );
 	}
@@ -248,9 +247,9 @@ class Tests_Privacy_WpPrivacyGeneratePersonalDataExportGroupHtml extends WP_Unit
 			),
 		);
 
-		$actual = wp_privacy_generate_personal_data_export_group_html( $data );
+		$actual = wp_privacy_generate_personal_data_export_group_html( $data, 'test-data-group', 2 );
 
-		$this->assertContains( '<h2>Test Data Group</h2>', $actual );
+		$this->assertContains( '<h2 id="test-data-group-test-data-group">Test Data Group</h2>', $actual );
 		$this->assertNotContains( '<span class="count">', $actual );
 		$this->assertSame( 1, substr_count( $actual, '<table>' ) );
 	}
diff --git a/tests/privacy/wpPrivacyProcessPersonalDataExportPage.php b/tests/privacy/wpPrivacyProcessPersonalDataExportPage.php
index baf0db89cc..f676f1ebce 100644
--- a/tests/privacy/wpPrivacyProcessPersonalDataExportPage.php
+++ b/tests/privacy/wpPrivacyProcessPersonalDataExportPage.php
@@ -44,9 +44,27 @@ class Tests_Privacy_WpPrivacyProcessPersonalDataExportPage extends WP_UnitTestCa
 	protected static $response_last_page;
 
 	/**
-	 * Export File Url.
+	 * Exports URL.
 	 *
-	 * @since 5.2.0
+	 * @since 5.5.0
+	 *
+	 * @var string $exports_url
+	 */
+	protected static $exports_url;
+
+	/**
+	 * Export File Name.
+	 *
+	 * @since 5.5.0
+	 *
+	 * @var string $export_file_name
+	 */
+	protected static $export_file_name;
+
+	/**
+	 * Export File URL.
+	 *
+	 * @since 5.5.0
 	 *
 	 * @var string $export_file_url
 	 */
@@ -131,7 +149,9 @@ class Tests_Privacy_WpPrivacyProcessPersonalDataExportPage extends WP_UnitTestCa
 	 */
 	public static function wpSetUpBeforeClass( $factory ) {
 		self::$requester_email      = 'requester@example.com';
-		self::$export_file_url      = wp_privacy_exports_url() . 'wp-personal-data-file-requester-at-example-com-Wv0RfMnGIkl4CFEDEEkSeIdfLmaUrLsl.zip';
+		self::$exports_url          = wp_privacy_exports_url();
+		self::$export_file_name     = 'wp-personal-data-file-Wv0RfMnGIkl4CFEDEEkSeIdfLmaUrLsl.zip';
+		self::$export_file_url      = self::$exports_url . self::$export_file_name;
 		self::$request_id           = wp_create_user_request( self::$requester_email, 'export_personal_data' );
 		self::$page_index_first     = 1;
 		self::$page_index_last      = 2;
@@ -210,7 +230,7 @@ class Tests_Privacy_WpPrivacyProcessPersonalDataExportPage extends WP_UnitTestCa
 	 * @since 5.2.0
 	 *
 	 * @param  array $exporters An array of personal data exporters.
-	 * @return array $exporters An array of personal data exporters.
+	 * @return array An array of personal data exporters.
 	 */
 	public function filter_register_custom_personal_data_exporters( $exporters ) {
 		// Let's override other unrelated exporters.
@@ -502,7 +522,7 @@ class Tests_Privacy_WpPrivacyProcessPersonalDataExportPage extends WP_UnitTestCa
 	 * @ticket 44233
 	 */
 	public function test_return_response_with_export_file_url_when_not_sent_as_email_for_last_exporter_on_last_page() {
-		update_post_meta( self::$request_id, '_export_file_url', self::$export_file_url );
+		update_post_meta( self::$request_id, '_export_file_name', self::$export_file_name );
 
 		// Process data, given the last exporter, on the last page and not send as email.
 		$actual_response = wp_privacy_process_personal_data_export_page(
@@ -528,7 +548,7 @@ class Tests_Privacy_WpPrivacyProcessPersonalDataExportPage extends WP_UnitTestCa
 	 * @ticket 44233
 	 */
 	public function test_return_response_without_export_file_url_when_sent_as_email_for_last_exporter_on_last_page() {
-		update_post_meta( self::$request_id, '_export_file_url', self::$export_file_url );
+		update_post_meta( self::$request_id, '_export_file_name', self::$export_file_name );
 
 		// Process data, given the last exporter, on the last page and send as email.
 		$actual_response = wp_privacy_process_personal_data_export_page(
diff --git a/tests/privacy/wpPrivacySendErasureFulfillmentNotification.php b/tests/privacy/wpPrivacySendErasureFulfillmentNotification.php
index 01c90ae3bc..a30b73f6d9 100644
--- a/tests/privacy/wpPrivacySendErasureFulfillmentNotification.php
+++ b/tests/privacy/wpPrivacySendErasureFulfillmentNotification.php
@@ -198,7 +198,7 @@ class Tests_Privacy_WpPrivacySendErasureFulfillmentNotification extends WP_UnitT
 	 * @since 5.1.0
 	 *
 	 * @param string $user_email The email address of the notification recipient.
-	 * @return string $user_email The email address of the notification recipient.
+	 * @return string The email address of the notification recipient.
 	 */
 	public function filter_email_address( $user_email ) {
 		return 'modified-' . $user_email;
@@ -224,7 +224,7 @@ class Tests_Privacy_WpPrivacySendErasureFulfillmentNotification extends WP_UnitT
 	 * @since 5.1.0
 	 *
 	 * @param string $subject The email subject.
-	 * @return string $subject The email subject.
+	 * @return string The email subject.
 	 */
 	public function filter_email_subject( $subject ) {
 		return 'Modified subject';
@@ -250,12 +250,44 @@ class Tests_Privacy_WpPrivacySendErasureFulfillmentNotification extends WP_UnitT
 	 * @since 5.1.0
 	 *
 	 * @param string $email_text Text in the email.
-	 * @return string $email_text Text in the email.
+	 * @return string Text in the email.
 	 */
 	public function filter_email_body_text( $email_text ) {
 		return 'Modified text';
 	}
 
+	/**
+	 * The email headers of the fulfillment notification should be filterable.
+	 *
+	 * @since 5.4.0
+	 *
+	 * @ticket 44501
+	 */
+	public function test_email_headers_should_be_filterable() {
+		add_filter( 'user_erasure_complete_email_headers', array( $this, 'modify_email_headers' ) );
+		_wp_privacy_send_erasure_fulfillment_notification( self::$request_id );
+
+		$mailer = tests_retrieve_phpmailer_instance();
+
+		$this->assertContains( 'From: Tester <tester@example.com>', $mailer->get_sent()->header );
+	}
+
+	/**
+	 * Filter callback that modifies the email headers of the data erasure fulfillment notification.
+	 *
+	 * @since 5.4.0
+	 *
+	 * @param string|array $headers The email headers.
+	 * @return array The new email headers.
+	 */
+	public function modify_email_headers( $headers ) {
+		$headers = array(
+			'From: Tester <tester@example.com>',
+		);
+
+		return $headers;
+	}
+
 	/**
 	 * The function should not send an email when the request ID does not exist.
 	 *
diff --git a/tests/privacy/wpPrivacySendPersonalDataExportEmail.php b/tests/privacy/wpPrivacySendPersonalDataExportEmail.php
index 13ee61a59d..54c775ae49 100644
--- a/tests/privacy/wpPrivacySendPersonalDataExportEmail.php
+++ b/tests/privacy/wpPrivacySendPersonalDataExportEmail.php
@@ -11,7 +11,7 @@
  * Tests_Privacy_WpPrivacySendPersonalDataExportEmail class.
  *
  * @group privacy
- * @covers wp_privacy_send_personal_data_export_email
+ * @covers ::wp_privacy_send_personal_data_export_email
  *
  * @since 4.9.6
  */
@@ -104,8 +104,10 @@ class Tests_Privacy_WpPrivacySendPersonalDataExportEmail extends WP_UnitTestCase
 	 * The function should send an export link to the requester when the user request is confirmed.
 	 */
 	public function test_function_should_send_export_link_to_requester() {
-		$archive_url = wp_privacy_exports_url() . 'wp-personal-data-file-requester-at-example-com-Wv0RfMnGIkl4CFEDEEkSeIdfLmaUrLsl.zip';
-		update_post_meta( self::$request_id, '_export_file_url', $archive_url );
+		$exports_url      = wp_privacy_exports_url();
+		$export_file_name = 'wp-personal-data-file-Wv0RfMnGIkl4CFEDEEkSeIdfLmaUrLsl.zip';
+		$export_file_url  = $exports_url . $export_file_name;
+		update_post_meta( self::$request_id, '_export_file_name', $export_file_name );
 
 		$email_sent = wp_privacy_send_personal_data_export_email( self::$request_id );
 		$mailer     = tests_retrieve_phpmailer_instance();
@@ -113,7 +115,7 @@ class Tests_Privacy_WpPrivacySendPersonalDataExportEmail extends WP_UnitTestCase
 		$this->assertSame( 'request-confirmed', get_post_status( self::$request_id ) );
 		$this->assertSame( self::$requester_email, $mailer->get_recipient( 'to' )->address );
 		$this->assertContains( 'Personal Data Export', $mailer->get_sent()->subject );
-		$this->assertContains( $archive_url, $mailer->get_sent()->body );
+		$this->assertContains( $export_file_url, $mailer->get_sent()->body );
 		$this->assertContains( 'please download it', $mailer->get_sent()->body );
 		$this->assertTrue( $email_sent );
 	}
@@ -167,7 +169,7 @@ class Tests_Privacy_WpPrivacySendPersonalDataExportEmail extends WP_UnitTestCase
 	 * @since 4.9.6
 	 *
 	 * @param int $expiration The expiration age of the export, in seconds.
-	 * @return int $expiration The expiration age of the export, in seconds.
+	 * @return int The expiration age of the export, in seconds.
 	 */
 	public function modify_export_expiration( $expiration ) {
 		// Set date to always be "Mon, 18 Dec 2017 21:30:00 GMT", so can assert a fixed date.
@@ -194,7 +196,7 @@ class Tests_Privacy_WpPrivacySendPersonalDataExportEmail extends WP_UnitTestCase
 	 * @since 5.3.0
 	 *
 	 * @param  string $user_email The email address of the notification recipient.
-	 * @return string $user_email The modified email address of the notification recipient.
+	 * @return string The modified email address of the notification recipient.
 	 */
 	public function filter_email_address( $user_email ) {
 		return 'modified-' . $user_email;
@@ -220,7 +222,7 @@ class Tests_Privacy_WpPrivacySendPersonalDataExportEmail extends WP_UnitTestCase
 	 * @since 5.3.0
 	 *
 	 * @param string $subject The email subject.
-	 * @return string $subject The email subject.
+	 * @return string The email subject.
 	 */
 	public function filter_email_subject( $subject ) {
 		return 'Modified subject';
@@ -246,12 +248,44 @@ class Tests_Privacy_WpPrivacySendPersonalDataExportEmail extends WP_UnitTestCase
 	 *
 	 * @param string $email_text Text in the email.
 	 * @param int    $request_id The request ID for this personal data export.
-	 * @return string $email_text Text in the email.
+	 * @return string Text in the email.
 	 */
 	public function modify_email_content( $email_text, $request_id ) {
 		return 'Custom content for request ID: ' . $request_id;
 	}
 
+	/**
+	 * The email headers should be filterable.
+	 *
+	 * @since 5.4.0
+	 *
+	 * @ticket 44501
+	 */
+	public function test_email_headers_should_be_filterable() {
+		add_filter( 'wp_privacy_personal_data_email_headers', array( $this, 'modify_email_headers' ) );
+		wp_privacy_send_personal_data_export_email( self::$request_id );
+
+		$mailer = tests_retrieve_phpmailer_instance();
+
+		$this->assertContains( 'From: Tester <tester@example.com>', $mailer->get_sent()->header );
+	}
+
+	/**
+	 * Filter callback to modify the headers of the email sent with a personal data export file.
+	 *
+	 * @since 5.4.0
+	 *
+	 * @param string|array $headers The email headers.
+	 * @return array The new email headers.
+	 */
+	public function modify_email_headers( $headers ) {
+		$headers = array(
+			'From: Tester <tester@example.com>',
+		);
+
+		return $headers;
+	}
+
 	/**
 	 * The email content should be filterable using the $email_data
 	 *
@@ -287,7 +321,7 @@ class Tests_Privacy_WpPrivacySendPersonalDataExportEmail extends WP_UnitTestCase
 	 *     @type string          $siteurl           The site URL sending the mail.
 	 * }
 	 *
-	 * @return string $email_text Text in the email.
+	 * @return string Text in the email.
 	 */
 	public function modify_email_content_with_email_data( $email_text, $request_id, $email_data ) {
 		return 'Custom content using the $site_url of $email_data: ' . $email_data['siteurl'];
diff --git a/tests/privacy/wpPrivacySendRequestConfirmationNotification.php b/tests/privacy/wpPrivacySendRequestConfirmationNotification.php
index 09aa8305a5..5cce5cc02d 100644
--- a/tests/privacy/wpPrivacySendRequestConfirmationNotification.php
+++ b/tests/privacy/wpPrivacySendRequestConfirmationNotification.php
@@ -12,7 +12,7 @@
  *
  * @group privacy
  * @group user
- * @covers _wp_privacy_send_request_confirmation_notification()
+ * @covers ::_wp_privacy_send_request_confirmation_notification
  */
 class Tests_User_WpPrivacySendRequestConfirmationNotification extends WP_UnitTestCase {
 	/**
@@ -152,16 +152,16 @@ class Tests_User_WpPrivacySendRequestConfirmationNotification extends WP_UnitTes
 	}
 
 	/**
-	 * Filter callback that modifies the recipient of the data request confirmation notification.
+	 * Filter callback that modifies the recipient of the user request confirmation notification.
 	 *
 	 * @since 4.9.8
 	 *
-	 * @param string          $admin_email  The email address of the notification recipient.
-	 * @param WP_User_Request $request_data The request that is initiating the notification.
+	 * @param string          $admin_email The email address of the notification recipient.
+	 * @param WP_User_Request $request     The request that is initiating the notification.
 	 * @return string Admin email address.
 	 */
-	public function modify_email_address( $admin_email, $request_data ) {
-		$admin_email = $request_data->email;
+	public function modify_email_address( $admin_email, $request ) {
+		$admin_email = $request->email;
 		return $admin_email;
 	}
 
@@ -207,4 +207,42 @@ class Tests_User_WpPrivacySendRequestConfirmationNotification extends WP_UnitTes
 		return $email_text;
 	}
 
+	/**
+	 * The email headers should be filterable.
+	 *
+	 * @since 5.4.0
+	 *
+	 * @ticket 44501
+	 */
+	public function test_email_headers_should_be_filterable() {
+		$email      = 'export.request.from.unregistered.user@example.com';
+		$request_id = wp_create_user_request( $email, 'export_personal_data' );
+
+		_wp_privacy_account_request_confirmed( $request_id );
+
+		add_filter( 'user_request_confirmed_email_headers', array( $this, 'modify_email_headers' ) );
+		_wp_privacy_send_request_confirmation_notification( $request_id );
+		remove_filter( 'user_request_confirmed_email_headers', array( $this, 'modify_email_headers' ) );
+
+		$mailer = tests_retrieve_phpmailer_instance();
+
+		$this->assertContains( 'From: Tester <tester@example.com>', $mailer->get_sent()->header );
+	}
+
+	/**
+	 * Filter callback that modifies the headers of the user request confirmation email.
+	 *
+	 * @since 5.4.0
+	 *
+	 * @param string|array $headers The email headers.
+	 * @return array The new email headers.
+	 */
+	public function modify_email_headers( $headers ) {
+		$headers = array(
+			'From: Tester <tester@example.com>',
+		);
+
+		return $headers;
+	}
+
 }
diff --git a/tests/query.php b/tests/query.php
index f6a2d28e1e..a13783a95d 100644
--- a/tests/query.php
+++ b/tests/query.php
@@ -22,10 +22,10 @@ class Tests_Query extends WP_UnitTestCase {
 			$second_query = new WP_Query( array( 'post__in' => array( $nested_post_id ) ) );
 			while ( $second_query->have_posts() ) {
 				$second_query->the_post();
-				$this->assertEquals( get_the_ID(), $nested_post_id );
+				$this->assertSame( get_the_ID(), $nested_post_id );
 			}
 			$first_query->reset_postdata();
-			$this->assertEquals( get_the_ID(), $post_id );
+			$this->assertSame( get_the_ID(), $post_id );
 		}
 	}
 
@@ -34,7 +34,7 @@ class Tests_Query extends WP_UnitTestCase {
 	 */
 	function test_default_query_var() {
 		$query = new WP_Query;
-		$this->assertEquals( '', $query->get( 'nonexistent' ) );
+		$this->assertSame( '', $query->get( 'nonexistent' ) );
 		$this->assertFalse( $query->get( 'nonexistent', false ) );
 		$this->assertTrue( $query->get( 'nonexistent', true ) );
 	}
@@ -49,7 +49,7 @@ class Tests_Query extends WP_UnitTestCase {
 
 		$this->go_to( get_feed_link() );
 
-		$this->assertEquals( 30, get_query_var( 'posts_per_page' ) );
+		$this->assertSame( 30, get_query_var( 'posts_per_page' ) );
 	}
 
 	function filter_posts_per_page( &$query ) {
@@ -190,7 +190,7 @@ class Tests_Query extends WP_UnitTestCase {
 
 		$matching_posts = wp_list_pluck( $GLOBALS['wp_query']->posts, 'ID' );
 
-		$this->assertEqualSets( array( $p1, $p2 ), $matching_posts );
+		$this->assertSameSets( array( $p1, $p2 ), $matching_posts );
 	}
 
 	public function test_category_querystring_multiple_terms_comma_separated() {
@@ -234,7 +234,7 @@ class Tests_Query extends WP_UnitTestCase {
 
 		$matching_posts = wp_list_pluck( $GLOBALS['wp_query']->posts, 'ID' );
 
-		$this->assertEqualSets( array( $p1, $p2, $p3 ), $matching_posts );
+		$this->assertSameSets( array( $p1, $p2, $p3 ), $matching_posts );
 	}
 
 	/**
@@ -281,7 +281,7 @@ class Tests_Query extends WP_UnitTestCase {
 
 		$matching_posts = wp_list_pluck( $GLOBALS['wp_query']->posts, 'ID' );
 
-		$this->assertEqualSets( array( $p1, $p2, $p3 ), $matching_posts );
+		$this->assertSameSets( array( $p1, $p2, $p3 ), $matching_posts );
 	}
 
 
@@ -318,7 +318,7 @@ class Tests_Query extends WP_UnitTestCase {
 
 		$matching_posts = wp_list_pluck( $GLOBALS['wp_query']->posts, 'ID' );
 
-		$this->assertEqualSets( array( $p1, $p2 ), $matching_posts );
+		$this->assertSameSets( array( $p1, $p2 ), $matching_posts );
 	}
 
 	public function test_tag_querystring_multiple_terms_comma_separated() {
@@ -362,7 +362,7 @@ class Tests_Query extends WP_UnitTestCase {
 
 		$matching_posts = wp_list_pluck( $GLOBALS['wp_query']->posts, 'ID' );
 
-		$this->assertEqualSets( array( $p1, $p2, $p3 ), $matching_posts );
+		$this->assertSameSets( array( $p1, $p2, $p3 ), $matching_posts );
 	}
 
 	/**
@@ -409,7 +409,7 @@ class Tests_Query extends WP_UnitTestCase {
 
 		$matching_posts = wp_list_pluck( $GLOBALS['wp_query']->posts, 'ID' );
 
-		$this->assertEqualSets( array( $p1, $p2, $p3 ), $matching_posts );
+		$this->assertSameSets( array( $p1, $p2, $p3 ), $matching_posts );
 	}
 
 	public function test_custom_taxonomy_querystring_single_term() {
@@ -436,7 +436,7 @@ class Tests_Query extends WP_UnitTestCase {
 
 		$this->go_to( $url );
 
-		$this->assertEqualSets( array( $p1, $p2 ), wp_list_pluck( $GLOBALS['wp_query']->posts, 'ID' ) );
+		$this->assertSameSets( array( $p1, $p2 ), wp_list_pluck( $GLOBALS['wp_query']->posts, 'ID' ) );
 	}
 
 	public function test_custom_taxonomy_querystring_multiple_terms_comma_separated() {
@@ -465,7 +465,7 @@ class Tests_Query extends WP_UnitTestCase {
 
 		$this->go_to( $url );
 
-		$this->assertEqualSets( array( $p1, $p2, $p3 ), wp_list_pluck( $GLOBALS['wp_query']->posts, 'ID' ) );
+		$this->assertSameSets( array( $p1, $p2, $p3 ), wp_list_pluck( $GLOBALS['wp_query']->posts, 'ID' ) );
 	}
 
 	/**
@@ -497,7 +497,7 @@ class Tests_Query extends WP_UnitTestCase {
 
 		$this->go_to( $url );
 
-		$this->assertEqualSets( array( $p1, $p2, $p3 ), wp_list_pluck( $GLOBALS['wp_query']->posts, 'ID' ) );
+		$this->assertSameSets( array( $p1, $p2, $p3 ), wp_list_pluck( $GLOBALS['wp_query']->posts, 'ID' ) );
 	}
 
 	/**
@@ -519,7 +519,7 @@ class Tests_Query extends WP_UnitTestCase {
 		remove_action( 'parse_query', array( $this, 'filter_parse_query_to_modify_queried_post_id' ) );
 
 		$this->assertFalse( $GLOBALS['wp_query']->is_404() );
-		$this->assertEquals( $post_id, $GLOBALS['wp_query']->post->ID );
+		$this->assertSame( $post_id, $GLOBALS['wp_query']->post->ID );
 	}
 
 	/**
@@ -552,7 +552,7 @@ class Tests_Query extends WP_UnitTestCase {
 		remove_action( 'parse_query', array( $this, 'filter_parse_query_to_modify_queried_post_id' ) );
 
 		$this->assertFalse( $GLOBALS['wp_query']->is_404() );
-		$this->assertEquals( $post_id, $GLOBALS['wp_query']->post->ID );
+		$this->assertSame( $post_id, $GLOBALS['wp_query']->post->ID );
 	}
 
 	public function filter_parse_query_to_modify_queried_post_id( $query ) {
diff --git a/tests/query/commentCount.php b/tests/query/commentCount.php
index 3614f4e8c1..fd72740f7b 100644
--- a/tests/query/commentCount.php
+++ b/tests/query/commentCount.php
@@ -5,7 +5,7 @@
 class Tests_Query_CommentCount extends WP_UnitTestCase {
 	static $post_ids = array();
 	public $q;
-	static $post_type = 'page'; // can be anything
+	static $post_type = 'page'; // Can be anything.
 
 	public function setUp() {
 		parent::setUp();
@@ -81,7 +81,7 @@ class Tests_Query_CommentCount extends WP_UnitTestCase {
 
 		$expected = self::$post_ids[4];
 
-		$this->assertEqualSets( $found_post_ids, $expected );
+		$this->assertSameSets( $found_post_ids, $expected );
 	}
 
 	public function test_operator_greater_than() {
@@ -99,7 +99,7 @@ class Tests_Query_CommentCount extends WP_UnitTestCase {
 
 		$expected = self::$post_ids[5];
 
-		$this->assertEqualSets( $found_post_ids, $expected );
+		$this->assertSameSets( $found_post_ids, $expected );
 	}
 
 	public function test_operator_greater_than_no_results() {
@@ -117,7 +117,7 @@ class Tests_Query_CommentCount extends WP_UnitTestCase {
 
 		$expected = array();
 
-		$this->assertEqualSets( $found_post_ids, $expected );
+		$this->assertSameSets( $found_post_ids, $expected );
 	}
 	public function test_operator_less_than() {
 		$args = array(
@@ -143,7 +143,7 @@ class Tests_Query_CommentCount extends WP_UnitTestCase {
 			$expected[] = $expected_id;
 		}
 
-		$this->assertEqualSets( $found_post_ids, $expected );
+		$this->assertSameSets( $found_post_ids, $expected );
 	}
 
 	public function test_operator_less_than_no_results() {
@@ -161,7 +161,7 @@ class Tests_Query_CommentCount extends WP_UnitTestCase {
 
 		$expected = array();
 
-		$this->assertEqualSets( $found_post_ids, $expected );
+		$this->assertSameSets( $found_post_ids, $expected );
 	}
 
 
@@ -189,7 +189,7 @@ class Tests_Query_CommentCount extends WP_UnitTestCase {
 			$expected[] = $expected_id;
 		}
 
-		$this->assertEqualSets( $found_post_ids, $expected );
+		$this->assertSameSets( $found_post_ids, $expected );
 
 	}
 	public function test_operator_equal_or_greater_than() {
@@ -213,7 +213,7 @@ class Tests_Query_CommentCount extends WP_UnitTestCase {
 			$expected[] = $expected_id;
 		}
 
-		$this->assertEqualSets( $found_post_ids, $expected );
+		$this->assertSameSets( $found_post_ids, $expected );
 	}
 
 	public function test_operator_equal_or_greater_than_no_results() {
@@ -231,7 +231,7 @@ class Tests_Query_CommentCount extends WP_UnitTestCase {
 
 		$expected = array();
 
-		$this->assertEqualSets( $found_post_ids, $expected );
+		$this->assertSameSets( $found_post_ids, $expected );
 	}
 
 	public function test_operator_equal_or_less_than() {
@@ -255,7 +255,7 @@ class Tests_Query_CommentCount extends WP_UnitTestCase {
 			$expected[] = $expected_id;
 		}
 
-		$this->assertEqualSets( $found_post_ids, $expected );
+		$this->assertSameSets( $found_post_ids, $expected );
 	}
 
 	public function test_operator_equal_or_less_than_no_results() {
@@ -273,7 +273,7 @@ class Tests_Query_CommentCount extends WP_UnitTestCase {
 
 		$expected = array();
 
-		$this->assertEqualSets( $found_post_ids, $expected );
+		$this->assertSameSets( $found_post_ids, $expected );
 	}
 
 	public function test_invalid_operator_should_fall_back_on_equals() {
@@ -294,7 +294,7 @@ class Tests_Query_CommentCount extends WP_UnitTestCase {
 			$expected[] = $expected_id;
 		}
 
-		$this->assertEqualSets( $found_post_ids, $expected );
+		$this->assertSameSets( $found_post_ids, $expected );
 	}
 
 	public function test_wrong_count_no_results() {
@@ -312,7 +312,7 @@ class Tests_Query_CommentCount extends WP_UnitTestCase {
 
 		$expected = array();
 
-		$this->assertEqualSets( $found_post_ids, $expected );
+		$this->assertSameSets( $found_post_ids, $expected );
 	}
 
 	public function test_no_operator_no_results() {
@@ -329,7 +329,7 @@ class Tests_Query_CommentCount extends WP_UnitTestCase {
 
 		$expected = self::$post_ids[5];
 
-		$this->assertEqualSets( $found_post_ids, $expected );
+		$this->assertSameSets( $found_post_ids, $expected );
 	}
 
 	public function test_empty_non_numeric_string_should_be_ignored() {
@@ -353,7 +353,7 @@ class Tests_Query_CommentCount extends WP_UnitTestCase {
 			$expected[] = $expected_id;
 		}
 
-		$this->assertEqualSets( $found_post_ids, $expected );
+		$this->assertSameSets( $found_post_ids, $expected );
 	}
 
 	public function test_simple_count() {
@@ -368,7 +368,7 @@ class Tests_Query_CommentCount extends WP_UnitTestCase {
 
 		$expected = self::$post_ids[5];
 
-		$this->assertEqualSets( $found_post_ids, $expected );
+		$this->assertSameSets( $found_post_ids, $expected );
 	}
 }
 
diff --git a/tests/query/conditionals.php b/tests/query/conditionals.php
index a67c6f29fc..c4f36bee8e 100644
--- a/tests/query/conditionals.php
+++ b/tests/query/conditionals.php
@@ -187,16 +187,16 @@ class Tests_Query_Conditionals extends WP_UnitTestCase {
 			$url = get_permalink( $page_id );
 			$this->go_to( "{$url}trackback/" );
 
-			// make sure the correct wp_query flags are set
+			// Make sure the correct WP_Query flags are set.
 			$this->assertQueryTrue( 'is_page', 'is_singular', 'is_trackback' );
 
-			// make sure the correct page was fetched
+			// Make sure the correct page was fetched.
 			global $wp_query;
-			$this->assertEquals( $page_id, $wp_query->get_queried_object()->ID );
+			$this->assertSame( $page_id, $wp_query->get_queried_object()->ID );
 		}
 	}
 
-	//'(about)/feed/(feed|rdf|rss|rss2|atom)/?$' => 'index.php?pagename=$matches[1]&feed=$matches[2]'
+	// '(about)/feed/(feed|rdf|rss|rss2|atom)/?$' => 'index.php?pagename=$matches[1]&feed=$matches[2]'
 	function test_page_feed() {
 		$page_ids   = array();
 		$page_id    = self::factory()->post->create(
@@ -226,12 +226,12 @@ class Tests_Query_Conditionals extends WP_UnitTestCase {
 			$url = get_permalink( $page_id );
 			$this->go_to( "{$url}feed/" );
 
-			// make sure the correct wp_query flags are set
+			// Make sure the correct WP_Query flags are set.
 			$this->assertQueryTrue( 'is_page', 'is_singular', 'is_feed', 'is_comment_feed' );
 
-			// make sure the correct page was fetched
+			// Make sure the correct page was fetched.
 			global $wp_query;
-			$this->assertEquals( $page_id, $wp_query->get_queried_object()->ID );
+			$this->assertSame( $page_id, $wp_query->get_queried_object()->ID );
 		}
 	}
 
@@ -263,12 +263,12 @@ class Tests_Query_Conditionals extends WP_UnitTestCase {
 			$url = get_permalink( $page_id );
 			$this->go_to( "{$url}feed/" );
 
-			// make sure the correct wp_query flags are set
+			// Make sure the correct WP_Query flags are set.
 			$this->assertQueryTrue( 'is_page', 'is_singular', 'is_feed', 'is_comment_feed' );
 
-			// make sure the correct page was fetched
+			// Make sure the correct page was fetched.
 			global $wp_query;
-			$this->assertEquals( $page_id, $wp_query->get_queried_object()->ID );
+			$this->assertSame( $page_id, $wp_query->get_queried_object()->ID );
 		}
 	}
 
@@ -303,12 +303,12 @@ class Tests_Query_Conditionals extends WP_UnitTestCase {
 			$url = get_permalink( $page_id );
 			$this->go_to( "{$url}feed/atom/" );
 
-			// make sure the correct wp_query flags are set
+			// Make sure the correct WP_Query flags are set.
 			$this->assertQueryTrue( 'is_page', 'is_singular', 'is_feed', 'is_comment_feed' );
 
-			// make sure the correct page was fetched
+			// Make sure the correct page was fetched.
 			global $wp_query;
-			$this->assertEquals( $page_id, $wp_query->get_queried_object()->ID );
+			$this->assertSame( $page_id, $wp_query->get_queried_object()->ID );
 		}
 	}
 
@@ -323,12 +323,12 @@ class Tests_Query_Conditionals extends WP_UnitTestCase {
 		);
 		$this->go_to( '/about/page/2/' );
 
-		// make sure the correct wp_query flags are set
+		// Make sure the correct WP_Query flags are set.
 		$this->assertQueryTrue( 'is_page', 'is_singular', 'is_paged' );
 
-		// make sure the correct page was fetched
+		// Make sure the correct page was fetched.
 		global $wp_query;
-		$this->assertEquals( $page_id, $wp_query->get_queried_object()->ID );
+		$this->assertSame( $page_id, $wp_query->get_queried_object()->ID );
 	}
 
 	// '(about)/page/?([0-9]{1,})/?$' => 'index.php?pagename=$matches[1]&paged=$matches[2]'
@@ -342,12 +342,12 @@ class Tests_Query_Conditionals extends WP_UnitTestCase {
 		);
 		$this->go_to( '/about/page2/' );
 
-		// make sure the correct wp_query flags are set
+		// Make sure the correct WP_Query flags are set.
 		$this->assertQueryTrue( 'is_page', 'is_singular', 'is_paged' );
 
-		// make sure the correct page was fetched
+		// Make sure the correct page was fetched.
 		global $wp_query;
-		$this->assertEquals( $page_id, $wp_query->get_queried_object()->ID );
+		$this->assertSame( $page_id, $wp_query->get_queried_object()->ID );
 	}
 
 	// '(about)(/[0-9]+)?/?$' => 'index.php?pagename=$matches[1]&page=$matches[2]'
@@ -366,15 +366,15 @@ class Tests_Query_Conditionals extends WP_UnitTestCase {
 
 		$this->assertQueryTrue( 'is_home', 'is_posts_page' );
 
-		// make sure the correct page was fetched
+		// Make sure the correct page was fetched.
 		global $wp_query;
-		$this->assertEquals( $page_id, $wp_query->get_queried_object()->ID );
+		$this->assertSame( $page_id, $wp_query->get_queried_object()->ID );
 
 		update_option( 'show_on_front', 'posts' );
 		delete_option( 'page_for_posts' );
 	}
 
-	// FIXME: no tests for these yet
+	// FIXME: no tests for these yet:
 	// 'about/attachment/([^/]+)/?$' => 'index.php?attachment=$matches[1]',
 	// 'about/attachment/([^/]+)/trackback/?$' => 'index.php?attachment=$matches[1]&tb=1',
 	// 'about/attachment/([^/]+)/feed/(feed|rdf|rss|rss2|atom)/?$' => 'index.php?attachment=$matches[1]&feed=$matches[2]',
@@ -386,13 +386,13 @@ class Tests_Query_Conditionals extends WP_UnitTestCase {
 		self::factory()->post->create(); // @test_404
 		$feeds = array( 'feed', 'rdf', 'rss', 'rss2', 'atom' );
 
-		// long version
+		// Long version.
 		foreach ( $feeds as $feed ) {
 			$this->go_to( "/feed/{$feed}/" );
 			$this->assertQueryTrue( 'is_feed' );
 		}
 
-		// short version
+		// Short version.
 		foreach ( $feeds as $feed ) {
 			$this->go_to( "/{$feed}/" );
 			$this->assertQueryTrue( 'is_feed' );
@@ -425,18 +425,18 @@ class Tests_Query_Conditionals extends WP_UnitTestCase {
 		$post_id = self::factory()->post->create( array( 'post_title' => 'hello-world' ) );
 		self::factory()->comment->create_post_comments( $post_id, 2 );
 
-		// check the url as generated by get_post_comments_feed_link()
+		// Check the URL as generated by get_post_comments_feed_link().
 		$this->go_to( get_post_comments_feed_link( $post_id ) );
 		$this->assertQueryTrue( 'is_feed', 'is_single', 'is_singular', 'is_comment_feed' );
 
-		// check the long form
+		// Check the long form.
 		$types = array( 'feed', 'rdf', 'rss', 'rss2', 'atom' );
 		foreach ( $types as $type ) {
 				$this->go_to( "/comments/feed/{$type}" );
 				$this->assertQueryTrue( 'is_feed', 'is_comment_feed' );
 		}
 
-		// check the short form
+		// Check the short form.
 		$types = array( 'feed', 'rdf', 'rss', 'rss2', 'atom' );
 		foreach ( $types as $type ) {
 				$this->go_to( "/comments/{$type}" );
@@ -448,14 +448,14 @@ class Tests_Query_Conditionals extends WP_UnitTestCase {
 	// 'search/(.+)/feed/(feed|rdf|rss|rss2|atom)/?$' => 'index.php?s=$matches[1]&feed=$matches[2]',
 	// 'search/(.+)/(feed|rdf|rss|rss2|atom)/?$' => 'index.php?s=$matches[1]&feed=$matches[2]',
 	function test_search_feed() {
-		// check the long form
+		// Check the long form.
 		$types = array( 'feed', 'rdf', 'rss', 'rss2', 'atom' );
 		foreach ( $types as $type ) {
 				$this->go_to( "/search/test/feed/{$type}" );
 				$this->assertQueryTrue( 'is_feed', 'is_search' );
 		}
 
-		// check the short form
+		// –°heck the short form.
 		$types = array( 'feed', 'rdf', 'rss', 'rss2', 'atom' );
 		foreach ( $types as $type ) {
 				$this->go_to( "/search/test/{$type}" );
@@ -482,7 +482,7 @@ class Tests_Query_Conditionals extends WP_UnitTestCase {
 	 */
 	function test_search_encoded_chars() {
 		$this->go_to( '/search/F%C3%BCnf%2Bbar/' );
-		$this->assertEquals( get_query_var( 's' ), 'F√ºnf+bar' );
+		$this->assertSame( get_query_var( 's' ), 'F√ºnf+bar' );
 	}
 
 	// 'category/(.+?)/feed/(feed|rdf|rss|rss2|atom)/?$' => 'index.php?category_name=$matches[1]&feed=$matches[2]',
@@ -495,14 +495,14 @@ class Tests_Query_Conditionals extends WP_UnitTestCase {
 			)
 		);
 
-		// check the long form
+		// Check the long form.
 		$types = array( 'feed', 'rdf', 'rss', 'rss2', 'atom' );
 		foreach ( $types as $type ) {
 			$this->go_to( "/category/cat-a/feed/{$type}" );
 			$this->assertQueryTrue( 'is_archive', 'is_feed', 'is_category' );
 		}
 
-		// check the short form
+		// Check the short form.
 		$types = array( 'feed', 'rdf', 'rss', 'rss2', 'atom' );
 		foreach ( $types as $type ) {
 			$this->go_to( "/category/cat-a/{$type}" );
@@ -539,14 +539,14 @@ class Tests_Query_Conditionals extends WP_UnitTestCase {
 				'taxonomy' => 'post_tag',
 			)
 		);
-		// check the long form
+		// Check the long form.
 		$types = array( 'feed', 'rdf', 'rss', 'rss2', 'atom' );
 		foreach ( $types as $type ) {
 				$this->go_to( "/tag/tag-a/feed/{$type}" );
 				$this->assertQueryTrue( 'is_archive', 'is_feed', 'is_tag' );
 		}
 
-		// check the short form
+		// Check the short form.
 		$types = array( 'feed', 'rdf', 'rss', 'rss2', 'atom' );
 		foreach ( $types as $type ) {
 				$this->go_to( "/tag/tag-a/{$type}" );
@@ -593,14 +593,14 @@ class Tests_Query_Conditionals extends WP_UnitTestCase {
 	// 'author/([^/]+)/(feed|rdf|rss|rss2|atom)/?$' => 'index.php?author_name=$matches[1]&feed=$matches[2]',
 	function test_author_feed() {
 		self::factory()->user->create( array( 'user_login' => 'user-a' ) );
-		// check the long form
+		// Check the long form.
 		$types = array( 'feed', 'rdf', 'rss', 'rss2', 'atom' );
 		foreach ( $types as $type ) {
 				$this->go_to( "/author/user-a/feed/{$type}" );
 				$this->assertQueryTrue( 'is_archive', 'is_feed', 'is_author' );
 		}
 
-		// check the short form
+		// Check the short form.
 		$types = array( 'feed', 'rdf', 'rss', 'rss2', 'atom' );
 		foreach ( $types as $type ) {
 				$this->go_to( "/author/user-a/{$type}" );
@@ -635,14 +635,14 @@ class Tests_Query_Conditionals extends WP_UnitTestCase {
 	// '([0-9]{4})/([0-9]{1,2})/([0-9]{1,2})/(feed|rdf|rss|rss2|atom)/?$' => 'index.php?year=$matches[1]&monthnum=$matches[2]&day=$matches[3]&feed=$matches[4]',
 	function test_ymd_feed() {
 		self::factory()->post->create( array( 'post_date' => '2007-09-04 00:00:00' ) );
-		// check the long form
+		// Check the long form.
 		$types = array( 'feed', 'rdf', 'rss', 'rss2', 'atom' );
 		foreach ( $types as $type ) {
 				$this->go_to( "/2007/09/04/feed/{$type}" );
 				$this->assertQueryTrue( 'is_archive', 'is_feed', 'is_day', 'is_date' );
 		}
 
-		// check the short form
+		// Check the short form.
 		$types = array( 'feed', 'rdf', 'rss', 'rss2', 'atom' );
 		foreach ( $types as $type ) {
 				$this->go_to( "/2007/09/04/{$type}" );
@@ -669,14 +669,14 @@ class Tests_Query_Conditionals extends WP_UnitTestCase {
 	// '([0-9]{4})/([0-9]{1,2})/(feed|rdf|rss|rss2|atom)/?$' => 'index.php?year=$matches[1]&monthnum=$matches[2]&feed=$matches[3]',
 	function test_ym_feed() {
 		self::factory()->post->create( array( 'post_date' => '2007-09-04 00:00:00' ) );
-		// check the long form
+		// Check the long form.
 		$types = array( 'feed', 'rdf', 'rss', 'rss2', 'atom' );
 		foreach ( $types as $type ) {
 				$this->go_to( "/2007/09/feed/{$type}" );
 				$this->assertQueryTrue( 'is_archive', 'is_feed', 'is_month', 'is_date' );
 		}
 
-		// check the short form
+		// Check the short form.
 		$types = array( 'feed', 'rdf', 'rss', 'rss2', 'atom' );
 		foreach ( $types as $type ) {
 				$this->go_to( "/2007/09/{$type}" );
@@ -703,14 +703,14 @@ class Tests_Query_Conditionals extends WP_UnitTestCase {
 	// '([0-9]{4})/(feed|rdf|rss|rss2|atom)/?$' => 'index.php?year=$matches[1]&feed=$matches[2]',
 	function test_y_feed() {
 		self::factory()->post->create( array( 'post_date' => '2007-09-04 00:00:00' ) );
-		// check the long form
+		// Check the long form.
 		$types = array( 'feed', 'rdf', 'rss', 'rss2', 'atom' );
 		foreach ( $types as $type ) {
 				$this->go_to( "/2007/feed/{$type}" );
 				$this->assertQueryTrue( 'is_archive', 'is_feed', 'is_year', 'is_date' );
 		}
 
-		// check the short form
+		// Check the short form.
 		$types = array( 'feed', 'rdf', 'rss', 'rss2', 'atom' );
 		foreach ( $types as $type ) {
 				$this->go_to( "/2007/{$type}" );
@@ -746,14 +746,14 @@ class Tests_Query_Conditionals extends WP_UnitTestCase {
 	function test_post_comment_feed() {
 		$post_id   = self::factory()->post->create();
 		$permalink = get_permalink( $post_id );
-
+		// Check the long form.
 		$types = array( 'feed', 'rdf', 'rss', 'rss2', 'atom' );
 		foreach ( $types as $type ) {
 				$this->go_to( "{$permalink}feed/{$type}" );
 				$this->assertQueryTrue( 'is_single', 'is_singular', 'is_feed', 'is_comment_feed' );
 		}
 
-		// check the short form
+		// Check the short form.
 		$types = array( 'feed', 'rdf', 'rss', 'rss2', 'atom' );
 		foreach ( $types as $type ) {
 				$this->go_to( "{$permalink}{$type}" );
@@ -771,7 +771,7 @@ class Tests_Query_Conditionals extends WP_UnitTestCase {
 			)
 		);
 		$this->go_to( get_permalink( $post_id ) . '2/' );
-		// should is_paged be true also?
+		// Should is_paged be true also?
 		$this->assertQueryTrue( 'is_single', 'is_singular' );
 
 	}
@@ -823,13 +823,13 @@ class Tests_Query_Conditionals extends WP_UnitTestCase {
 
 		$this->go_to( '/ptawtq/' );
 		$this->assertQueryTrue( 'is_post_type_archive', 'is_archive' );
-		$this->assertEquals( get_queried_object(), get_post_type_object( $cpt_name ) );
+		$this->assertSame( get_queried_object(), get_post_type_object( $cpt_name ) );
 
 		add_action( 'pre_get_posts', array( $this, 'pre_get_posts_with_tax_query' ) );
 
 		$this->go_to( '/ptawtq/' );
 		$this->assertQueryTrue( 'is_post_type_archive', 'is_archive' );
-		$this->assertEquals( get_queried_object(), get_post_type_object( $cpt_name ) );
+		$this->assertSame( get_queried_object(), get_post_type_object( $cpt_name ) );
 
 		remove_action( 'pre_get_posts', array( $this, 'pre_get_posts_with_tax_query' ) );
 	}
@@ -865,13 +865,13 @@ class Tests_Query_Conditionals extends WP_UnitTestCase {
 
 		$this->go_to( "/$cpt_name/" );
 		$this->assertQueryTrue( 'is_post_type_archive', 'is_archive' );
-		$this->assertEquals( get_queried_object(), get_post_type_object( $cpt_name ) );
+		$this->assertSame( get_queried_object(), get_post_type_object( $cpt_name ) );
 
 		add_action( 'pre_get_posts', array( $this, 'pre_get_posts_with_type_array' ) );
 
 		$this->go_to( "/$cpt_name/" );
 		$this->assertQueryTrue( 'is_post_type_archive', 'is_archive' );
-		$this->assertEquals( get_queried_object(), get_post_type_object( 'post' ) );
+		$this->assertSame( get_queried_object(), get_post_type_object( 'post' ) );
 
 		remove_action( 'pre_get_posts', array( $this, 'pre_get_posts_with_type_array' ) );
 	}
@@ -901,7 +901,7 @@ class Tests_Query_Conditionals extends WP_UnitTestCase {
 	 * @ticket 16802
 	 */
 	function test_is_single_with_parent() {
-		// Use custom hierarchical post type
+		// Use custom hierarchical post type.
 		$post_type = 'test_hierarchical';
 
 		register_post_type(
@@ -914,7 +914,7 @@ class Tests_Query_Conditionals extends WP_UnitTestCase {
 			)
 		);
 
-		// Create parent and child posts
+		// Create parent and child posts.
 		$parent_id = self::factory()->post->create(
 			array(
 				'post_type' => $post_type,
@@ -930,7 +930,7 @@ class Tests_Query_Conditionals extends WP_UnitTestCase {
 			)
 		);
 
-		// Tests
+		// Tests.
 		$this->go_to( "/?p=$post_id&post_type=$post_type" );
 
 		$post = get_queried_object();
@@ -1199,7 +1199,7 @@ class Tests_Query_Conditionals extends WP_UnitTestCase {
 		$post_id = self::factory()->post->create( array( 'post_type' => 'page' ) );
 		$this->go_to( "/?page_id=$post_id" );
 
-		// override post ID to 0 temporarily for testing
+		// Override post ID to 0 temporarily for testing.
 		$_id                           = $GLOBALS['wp_query']->post->ID;
 		$GLOBALS['wp_query']->post->ID = 0;
 
@@ -1210,7 +1210,7 @@ class Tests_Query_Conditionals extends WP_UnitTestCase {
 		$this->assertFalse( $q->is_page( 'sample-page' ) );
 		$this->assertFalse( $q->is_page( 'random-page-slug' ) );
 
-		// revert $wp_query global change
+		// Revert $wp_query global change.
 		$GLOBALS['wp_query']->post->ID = $_id;
 	}
 
diff --git a/tests/query/date.php b/tests/query/date.php
index 73b6f3ca4a..0372233cfb 100644
--- a/tests/query/date.php
+++ b/tests/query/date.php
@@ -55,9 +55,9 @@ class Tests_Query_Date extends WP_UnitTestCase {
 		$args = wp_parse_args(
 			$args,
 			array(
-				'post_status'    => 'any', // For the future post
-				'posts_per_page' => '-1',  // To make sure results are accurate
-				'orderby'        => 'ID',  // Same order they were created
+				'post_status'    => 'any', // For the future post.
+				'posts_per_page' => '-1',  // To make sure results are accurate.
+				'orderby'        => 'ID',  // Same order they were created.
 				'order'          => 'ASC',
 			)
 		);
@@ -78,7 +78,7 @@ class Tests_Query_Date extends WP_UnitTestCase {
 			'2008-12-10 13:06:27',
 		);
 
-		$this->assertEquals( $expected_dates, wp_list_pluck( $posts, 'post_date' ) );
+		$this->assertSame( $expected_dates, wp_list_pluck( $posts, 'post_date' ) );
 	}
 
 	public function test_simple_year_expecting_noresults() {
@@ -104,7 +104,7 @@ class Tests_Query_Date extends WP_UnitTestCase {
 			'2007-09-24 07:17:23',
 		);
 
-		$this->assertEquals( $expected_dates, wp_list_pluck( $posts, 'post_date' ) );
+		$this->assertSame( $expected_dates, wp_list_pluck( $posts, 'post_date' ) );
 	}
 
 	public function test_simple_m_with_year_expecting_noresults() {
@@ -129,7 +129,7 @@ class Tests_Query_Date extends WP_UnitTestCase {
 			'2025-04-20 10:13:01',
 		);
 
-		$this->assertEquals( $expected_dates, wp_list_pluck( $posts, 'post_date' ) );
+		$this->assertSame( $expected_dates, wp_list_pluck( $posts, 'post_date' ) );
 	}
 
 	public function test_simple_m_with_yearmonth_expecting_noresults() {
@@ -154,7 +154,7 @@ class Tests_Query_Date extends WP_UnitTestCase {
 			'2025-04-20 10:13:01',
 		);
 
-		$this->assertEquals( $expected_dates, wp_list_pluck( $posts, 'post_date' ) );
+		$this->assertSame( $expected_dates, wp_list_pluck( $posts, 'post_date' ) );
 	}
 
 	public function test_simple_m_with_yearmonthday_expecting_noresults() {
@@ -179,7 +179,7 @@ class Tests_Query_Date extends WP_UnitTestCase {
 			'2025-04-20 10:13:01',
 		);
 
-		$this->assertEquals( $expected_dates, wp_list_pluck( $posts, 'post_date' ) );
+		$this->assertSame( $expected_dates, wp_list_pluck( $posts, 'post_date' ) );
 	}
 
 	public function test_simple_m_with_yearmonthdayhour_expecting_noresults() {
@@ -207,7 +207,7 @@ class Tests_Query_Date extends WP_UnitTestCase {
 			'2025-04-20 10:13:01',
 		);
 
-		$this->assertEquals( $expected_dates, wp_list_pluck( $posts, 'post_date' ) );
+		$this->assertSame( $expected_dates, wp_list_pluck( $posts, 'post_date' ) );
 	}
 
 	/**
@@ -237,7 +237,7 @@ class Tests_Query_Date extends WP_UnitTestCase {
 			'2025-04-20 10:13:01',
 		);
 
-		$this->assertEquals( $expected_dates, wp_list_pluck( $posts, 'post_date' ) );
+		$this->assertSame( $expected_dates, wp_list_pluck( $posts, 'post_date' ) );
 	}
 
 	/**
@@ -267,7 +267,7 @@ class Tests_Query_Date extends WP_UnitTestCase {
 			'2025-04-20 10:13:00',
 		);
 
-		$this->assertEquals( $expected_dates, wp_list_pluck( $posts, 'post_date' ) );
+		$this->assertSame( $expected_dates, wp_list_pluck( $posts, 'post_date' ) );
 	}
 
 	/**
@@ -284,7 +284,7 @@ class Tests_Query_Date extends WP_UnitTestCase {
 			'2025-04-20 10:13:00',
 		);
 
-		$this->assertEquals( $expected_dates, wp_list_pluck( $posts, 'post_date' ) );
+		$this->assertSame( $expected_dates, wp_list_pluck( $posts, 'post_date' ) );
 	}
 
 	/**
@@ -294,7 +294,7 @@ class Tests_Query_Date extends WP_UnitTestCase {
 		$expected = $this->_get_query_result();
 		$posts    = $this->_get_query_result(
 			array(
-				'm' => array( '1234' ), // ignored
+				'm' => array( '1234' ), // Ignored.
 			)
 		);
 
@@ -316,7 +316,7 @@ class Tests_Query_Date extends WP_UnitTestCase {
 			'2025-05-20 10:13:01',
 		);
 
-		$this->assertEquals( $expected_dates, wp_list_pluck( $posts, 'post_date' ) );
+		$this->assertSame( $expected_dates, wp_list_pluck( $posts, 'post_date' ) );
 	}
 
 	public function test_simple_monthnum_expecting_noresults() {
@@ -342,7 +342,7 @@ class Tests_Query_Date extends WP_UnitTestCase {
 			'2012-06-13 14:03:34',
 		);
 
-		$this->assertEquals( $expected_dates, wp_list_pluck( $posts, 'post_date' ) );
+		$this->assertSame( $expected_dates, wp_list_pluck( $posts, 'post_date' ) );
 	}
 
 	public function test_simple_w_as_in_week_expecting_noresults() {
@@ -367,7 +367,7 @@ class Tests_Query_Date extends WP_UnitTestCase {
 			'2007-01-22 03:49:21',
 		);
 
-		$this->assertEquals( $expected_dates, wp_list_pluck( $posts, 'post_date' ) );
+		$this->assertSame( $expected_dates, wp_list_pluck( $posts, 'post_date' ) );
 	}
 
 	public function test_simple_day_expecting_noresults() {
@@ -391,7 +391,7 @@ class Tests_Query_Date extends WP_UnitTestCase {
 			'2009-06-11 21:30:28',
 		);
 
-		$this->assertEquals( $expected_dates, wp_list_pluck( $posts, 'post_date' ) );
+		$this->assertSame( $expected_dates, wp_list_pluck( $posts, 'post_date' ) );
 	}
 
 	public function test_simple_hour_expecting_noresults() {
@@ -416,7 +416,7 @@ class Tests_Query_Date extends WP_UnitTestCase {
 			'2008-07-15 11:32:26',
 		);
 
-		$this->assertEquals( $expected_dates, wp_list_pluck( $posts, 'post_date' ) );
+		$this->assertSame( $expected_dates, wp_list_pluck( $posts, 'post_date' ) );
 	}
 
 	public function test_simple_minute_expecting_noresults() {
@@ -440,7 +440,7 @@ class Tests_Query_Date extends WP_UnitTestCase {
 			'2010-06-17 17:09:30',
 		);
 
-		$this->assertEquals( $expected_dates, wp_list_pluck( $posts, 'post_date' ) );
+		$this->assertSame( $expected_dates, wp_list_pluck( $posts, 'post_date' ) );
 	}
 
 	public function test_simple_second_expecting_noresults() {
diff --git a/tests/query/dateQuery.php b/tests/query/dateQuery.php
index ee9864593d..8b97afd17e 100644
--- a/tests/query/dateQuery.php
+++ b/tests/query/dateQuery.php
@@ -23,9 +23,9 @@ class Tests_Query_DateQuery extends WP_UnitTestCase {
 		$args = wp_parse_args(
 			$args,
 			array(
-				'post_status'            => 'any', // For the future post
-				'posts_per_page'         => '-1',  // To make sure results are accurate
-				'orderby'                => 'ID',  // Same order they were created
+				'post_status'            => 'any', // For the future post.
+				'posts_per_page'         => '-1',  // To make sure results are accurate.
+				'orderby'                => 'ID',  // Same order they were created.
 				'order'                  => 'ASC',
 				'update_post_meta_cache' => false,
 				'update_post_term_cache' => false,
@@ -54,7 +54,7 @@ class Tests_Query_DateQuery extends WP_UnitTestCase {
 			)
 		);
 
-		$this->assertEqualSets( array( $p1, $p2 ), wp_list_pluck( $posts, 'ID' ) );
+		$this->assertSameSets( array( $p1, $p2 ), wp_list_pluck( $posts, 'ID' ) );
 	}
 
 	/**
@@ -77,7 +77,7 @@ class Tests_Query_DateQuery extends WP_UnitTestCase {
 			)
 		);
 
-		$this->assertEqualSets( array( $p1 ), wp_list_pluck( $posts, 'ID' ) );
+		$this->assertSameSets( array( $p1 ), wp_list_pluck( $posts, 'ID' ) );
 	}
 
 	public function test_date_query_before_string() {
@@ -96,7 +96,7 @@ class Tests_Query_DateQuery extends WP_UnitTestCase {
 			)
 		);
 
-		$this->assertEquals( array( $p1, $p2 ), wp_list_pluck( $posts, 'ID' ) );
+		$this->assertSame( array( $p1, $p2 ), wp_list_pluck( $posts, 'ID' ) );
 	}
 
 	public function test_date_query_after_array() {
@@ -118,7 +118,7 @@ class Tests_Query_DateQuery extends WP_UnitTestCase {
 			)
 		);
 
-		$this->assertEqualSets( array( $p3 ), wp_list_pluck( $posts, 'ID' ) );
+		$this->assertSameSets( array( $p3 ), wp_list_pluck( $posts, 'ID' ) );
 	}
 
 	/**
@@ -141,7 +141,7 @@ class Tests_Query_DateQuery extends WP_UnitTestCase {
 			)
 		);
 
-		$this->assertEquals( array( $p2 ), wp_list_pluck( $posts, 'ID' ) );
+		$this->assertSame( array( $p2 ), wp_list_pluck( $posts, 'ID' ) );
 	}
 
 	public function test_date_query_after_string() {
@@ -159,7 +159,7 @@ class Tests_Query_DateQuery extends WP_UnitTestCase {
 			)
 		);
 
-		$this->assertEquals( array( $p3 ), wp_list_pluck( $posts, 'ID' ) );
+		$this->assertSame( array( $p3 ), wp_list_pluck( $posts, 'ID' ) );
 	}
 
 	public function test_date_query_after_string_inclusive() {
@@ -178,7 +178,7 @@ class Tests_Query_DateQuery extends WP_UnitTestCase {
 			)
 		);
 
-		$this->assertEquals( array( $p2, $p3 ), wp_list_pluck( $posts, 'ID' ) );
+		$this->assertSame( array( $p2, $p3 ), wp_list_pluck( $posts, 'ID' ) );
 	}
 
 	/**
@@ -207,7 +207,7 @@ class Tests_Query_DateQuery extends WP_UnitTestCase {
 			)
 		);
 
-		$this->assertEquals( array( $p2, $p3, $p4 ), wp_list_pluck( $posts, 'ID' ) );
+		$this->assertSame( array( $p2, $p3, $p4 ), wp_list_pluck( $posts, 'ID' ) );
 	}
 
 	/**
@@ -247,8 +247,8 @@ class Tests_Query_DateQuery extends WP_UnitTestCase {
 			)
 		);
 
-		$this->assertEquals( array( $p2 ), $before_posts );
-		$this->assertEquals( array( $p1 ), $after_posts );
+		$this->assertSame( array( $p2 ), $before_posts );
+		$this->assertSame( array( $p1 ), $after_posts );
 	}
 
 	/**
@@ -290,8 +290,8 @@ class Tests_Query_DateQuery extends WP_UnitTestCase {
 			)
 		);
 
-		$this->assertEqualSets( array( $p1, $p2 ), $before_posts );
-		$this->assertEqualSets( array( $p1, $p2 ), $after_posts );
+		$this->assertSameSets( array( $p1, $p2 ), $before_posts );
+		$this->assertSameSets( array( $p1, $p2 ), $after_posts );
 	}
 
 	/**
@@ -331,8 +331,8 @@ class Tests_Query_DateQuery extends WP_UnitTestCase {
 			)
 		);
 
-		$this->assertEquals( array( $p2 ), $before_posts );
-		$this->assertEquals( array( $p1 ), $after_posts );
+		$this->assertSame( array( $p2 ), $before_posts );
+		$this->assertSame( array( $p1 ), $after_posts );
 	}
 
 	/**
@@ -374,8 +374,8 @@ class Tests_Query_DateQuery extends WP_UnitTestCase {
 			)
 		);
 
-		$this->assertEqualSets( array( $p1, $p2 ), $before_posts );
-		$this->assertEqualSets( array( $p1, $p2 ), $after_posts );
+		$this->assertSameSets( array( $p1, $p2 ), $before_posts );
+		$this->assertSameSets( array( $p1, $p2 ), $after_posts );
 	}
 
 	/**
@@ -415,8 +415,8 @@ class Tests_Query_DateQuery extends WP_UnitTestCase {
 			)
 		);
 
-		$this->assertEquals( array( $p2 ), $before_posts );
-		$this->assertEquals( array( $p1 ), $after_posts );
+		$this->assertSame( array( $p2 ), $before_posts );
+		$this->assertSame( array( $p1 ), $after_posts );
 	}
 
 	/**
@@ -458,8 +458,8 @@ class Tests_Query_DateQuery extends WP_UnitTestCase {
 			)
 		);
 
-		$this->assertEqualSets( array( $p1, $p2 ), $before_posts );
-		$this->assertEqualSets( array( $p1, $p2 ), $after_posts );
+		$this->assertSameSets( array( $p1, $p2 ), $before_posts );
+		$this->assertSameSets( array( $p1, $p2 ), $after_posts );
 	}
 
 	/**
@@ -499,8 +499,8 @@ class Tests_Query_DateQuery extends WP_UnitTestCase {
 			)
 		);
 
-		$this->assertEquals( array( $p2 ), $before_posts );
-		$this->assertEquals( array( $p1 ), $after_posts );
+		$this->assertSame( array( $p2 ), $before_posts );
+		$this->assertSame( array( $p1 ), $after_posts );
 	}
 
 	/**
@@ -542,8 +542,8 @@ class Tests_Query_DateQuery extends WP_UnitTestCase {
 			)
 		);
 
-		$this->assertEqualSets( array( $p1, $p2 ), $before_posts );
-		$this->assertEqualSets( array( $p1, $p2 ), $after_posts );
+		$this->assertSameSets( array( $p1, $p2 ), $before_posts );
+		$this->assertSameSets( array( $p1, $p2 ), $after_posts );
 	}
 
 	/**
@@ -583,8 +583,8 @@ class Tests_Query_DateQuery extends WP_UnitTestCase {
 			)
 		);
 
-		$this->assertEquals( array( $p2 ), $before_posts );
-		$this->assertEquals( array( $p1 ), $after_posts );
+		$this->assertSame( array( $p2 ), $before_posts );
+		$this->assertSame( array( $p1 ), $after_posts );
 	}
 
 	/**
@@ -626,8 +626,8 @@ class Tests_Query_DateQuery extends WP_UnitTestCase {
 			)
 		);
 
-		$this->assertEqualSets( array( $p1, $p2 ), $before_posts );
-		$this->assertEqualSets( array( $p1, $p2 ), $after_posts );
+		$this->assertSameSets( array( $p1, $p2 ), $before_posts );
+		$this->assertSameSets( array( $p1, $p2 ), $after_posts );
 	}
 
 	/**
@@ -667,7 +667,7 @@ class Tests_Query_DateQuery extends WP_UnitTestCase {
 			)
 		);
 
-		$this->assertEquals( array( $p1, $p2 ), $before_posts );
+		$this->assertSame( array( $p1, $p2 ), $before_posts );
 	}
 
 	public function test_date_query_year() {
@@ -683,7 +683,7 @@ class Tests_Query_DateQuery extends WP_UnitTestCase {
 			)
 		);
 
-		$this->assertEquals( array( $p1 ), wp_list_pluck( $posts, 'ID' ) );
+		$this->assertSame( array( $p1 ), wp_list_pluck( $posts, 'ID' ) );
 	}
 
 	public function test_date_query_month() {
@@ -699,7 +699,7 @@ class Tests_Query_DateQuery extends WP_UnitTestCase {
 			)
 		);
 
-		$this->assertEquals( array( $p1 ), wp_list_pluck( $posts, 'ID' ) );
+		$this->assertSame( array( $p1 ), wp_list_pluck( $posts, 'ID' ) );
 	}
 
 	public function test_date_query_week() {
@@ -715,7 +715,7 @@ class Tests_Query_DateQuery extends WP_UnitTestCase {
 			)
 		);
 
-		$this->assertEquals( array( $p1 ), wp_list_pluck( $posts, 'ID' ) );
+		$this->assertSame( array( $p1 ), wp_list_pluck( $posts, 'ID' ) );
 	}
 
 	public function test_date_query_day() {
@@ -732,7 +732,7 @@ class Tests_Query_DateQuery extends WP_UnitTestCase {
 			)
 		);
 
-		$this->assertEquals( array( $p1 ), wp_list_pluck( $posts, 'ID' ) );
+		$this->assertSame( array( $p1 ), wp_list_pluck( $posts, 'ID' ) );
 	}
 
 	public function test_date_query_dayofweek() {
@@ -749,7 +749,7 @@ class Tests_Query_DateQuery extends WP_UnitTestCase {
 			)
 		);
 
-		$this->assertEquals( array( $p1 ), wp_list_pluck( $posts, 'ID' ) );
+		$this->assertSame( array( $p1 ), wp_list_pluck( $posts, 'ID' ) );
 	}
 
 	/**
@@ -769,7 +769,7 @@ class Tests_Query_DateQuery extends WP_UnitTestCase {
 			)
 		);
 
-		$this->assertEquals( array( $p1 ), wp_list_pluck( $posts, 'ID' ) );
+		$this->assertSame( array( $p1 ), wp_list_pluck( $posts, 'ID' ) );
 	}
 
 	public function test_date_query_hour() {
@@ -786,7 +786,7 @@ class Tests_Query_DateQuery extends WP_UnitTestCase {
 			)
 		);
 
-		$this->assertEquals( array( $p1 ), wp_list_pluck( $posts, 'ID' ) );
+		$this->assertSame( array( $p1 ), wp_list_pluck( $posts, 'ID' ) );
 	}
 
 	/**
@@ -806,7 +806,7 @@ class Tests_Query_DateQuery extends WP_UnitTestCase {
 			)
 		);
 
-		$this->assertEquals( array( $p1 ), wp_list_pluck( $posts, 'ID' ) );
+		$this->assertSame( array( $p1 ), wp_list_pluck( $posts, 'ID' ) );
 	}
 
 	public function test_date_query_minute() {
@@ -823,7 +823,7 @@ class Tests_Query_DateQuery extends WP_UnitTestCase {
 			)
 		);
 
-		$this->assertEquals( array( $p1 ), wp_list_pluck( $posts, 'ID' ) );
+		$this->assertSame( array( $p1 ), wp_list_pluck( $posts, 'ID' ) );
 	}
 
 	public function test_date_query_second() {
@@ -840,7 +840,7 @@ class Tests_Query_DateQuery extends WP_UnitTestCase {
 			)
 		);
 
-		$this->assertEquals( array( $p1 ), wp_list_pluck( $posts, 'ID' ) );
+		$this->assertSame( array( $p1 ), wp_list_pluck( $posts, 'ID' ) );
 	}
 
 	public function test_date_query_between_two_times() {
@@ -867,7 +867,7 @@ class Tests_Query_DateQuery extends WP_UnitTestCase {
 			)
 		);
 
-		$this->assertEqualSets( array( $p2, $p3, $p4 ), wp_list_pluck( $posts, 'ID' ) );
+		$this->assertSameSets( array( $p2, $p3, $p4 ), wp_list_pluck( $posts, 'ID' ) );
 	}
 
 	public function test_date_query_relation_or() {
@@ -889,7 +889,7 @@ class Tests_Query_DateQuery extends WP_UnitTestCase {
 			)
 		);
 
-		$this->assertEquals( array( $p1, $p3 ), wp_list_pluck( $posts, 'ID' ) );
+		$this->assertSame( array( $p1, $p3 ), wp_list_pluck( $posts, 'ID' ) );
 	}
 
 	public function test_date_query_compare_greater_than_or_equal_to() {
@@ -910,7 +910,7 @@ class Tests_Query_DateQuery extends WP_UnitTestCase {
 			)
 		);
 
-		$this->assertEquals( array( $p2, $p3, $p4 ), wp_list_pluck( $posts, 'ID' ) );
+		$this->assertSame( array( $p2, $p3, $p4 ), wp_list_pluck( $posts, 'ID' ) );
 	}
 
 	public function test_date_params_monthnum_m_duplicate() {
@@ -929,7 +929,7 @@ class Tests_Query_DateQuery extends WP_UnitTestCase {
 			)
 		);
 
-		$this->assertEquals( array( $p1 ), wp_list_pluck( $posts, 'ID' ) );
+		$this->assertSame( array( $p1 ), wp_list_pluck( $posts, 'ID' ) );
 
 		$this->assertContains( "MONTH( $wpdb->posts.post_date ) = 5", $this->q->request );
 		$this->assertNotContains( "MONTH( $wpdb->posts.post_date ) = 9", $this->q->request );
@@ -951,7 +951,7 @@ class Tests_Query_DateQuery extends WP_UnitTestCase {
 			)
 		);
 
-		$this->assertEquals( array( $p2 ), wp_list_pluck( $posts, 'ID' ) );
+		$this->assertSame( array( $p2 ), wp_list_pluck( $posts, 'ID' ) );
 
 		$this->assertContains( "WEEK( $wpdb->posts.post_date, 1 ) = 43", $this->q->request );
 		$this->assertNotContains( "WEEK( $wpdb->posts.post_date, 1 ) = 42", $this->q->request );
@@ -992,7 +992,7 @@ class Tests_Query_DateQuery extends WP_UnitTestCase {
 
 		_unregister_taxonomy( 'foo' );
 
-		$this->assertEquals( array( $p1 ), wp_list_pluck( $posts, 'ID' ) );
+		$this->assertSame( array( $p1 ), wp_list_pluck( $posts, 'ID' ) );
 	}
 
 	/**
@@ -1023,7 +1023,7 @@ class Tests_Query_DateQuery extends WP_UnitTestCase {
 			)
 		);
 
-		$this->assertEquals( array( $p2, $p3 ), wp_list_pluck( $posts, 'ID' ) );
+		$this->assertSame( array( $p2, $p3 ), wp_list_pluck( $posts, 'ID' ) );
 	}
 
 	/**
@@ -1084,7 +1084,7 @@ class Tests_Query_DateQuery extends WP_UnitTestCase {
 
 		$expected = array( $p1, $p2 );
 
-		$this->assertEqualSets( $expected, $q->posts );
+		$this->assertSameSets( $expected, $q->posts );
 	}
 
 	/**
@@ -1163,6 +1163,6 @@ class Tests_Query_DateQuery extends WP_UnitTestCase {
 		);
 
 		$expected = array( $p1, $p4, $p5 );
-		$this->assertEqualSets( $expected, $q->posts );
+		$this->assertSameSets( $expected, $q->posts );
 	}
 }
diff --git a/tests/query/generatePostdata.php b/tests/query/generatePostdata.php
index fa7d0afb46..c223e4b598 100644
--- a/tests/query/generatePostdata.php
+++ b/tests/query/generatePostdata.php
@@ -94,7 +94,7 @@ class Tests_Query_GeneratePostdata extends WP_UnitTestCase {
 
 		$this->assertSame( 0, $data['multipage'] );
 		$this->assertSame( 1, $data['numpages'] );
-		$this->assertEquals( array( 'Page 0' ), $data['pages'] );
+		$this->assertSame( array( 'Page 0' ), $data['pages'] );
 	}
 
 	/**
@@ -110,7 +110,7 @@ class Tests_Query_GeneratePostdata extends WP_UnitTestCase {
 
 		$this->assertSame( 1, $data['multipage'] );
 		$this->assertSame( 4, $data['numpages'] );
-		$this->assertEquals( array( 'Page 0', 'Page 1', 'Page 2', 'Page 3' ), $data['pages'] );
+		$this->assertSame( array( 'Page 0', 'Page 1', 'Page 2', 'Page 3' ), $data['pages'] );
 	}
 
 	/**
@@ -126,7 +126,7 @@ class Tests_Query_GeneratePostdata extends WP_UnitTestCase {
 
 		$this->assertSame( 1, $data['multipage'] );
 		$this->assertSame( 3, $data['numpages'] );
-		$this->assertEquals( array( 'Page 1', 'Page 2', 'Page 3' ), $data['pages'] );
+		$this->assertSame( array( 'Page 1', 'Page 2', 'Page 3' ), $data['pages'] );
 	}
 
 	/**
@@ -140,6 +140,6 @@ class Tests_Query_GeneratePostdata extends WP_UnitTestCase {
 		);
 		$data = generate_postdata( $post );
 
-		$this->assertEquals( array( 'Page 0', "Page 1\nhas a line break", 'Page 2', "\nPage 3" ), $data['pages'] );
+		$this->assertSame( array( 'Page 0', "Page 1\nhas a line break", 'Page 2', "\nPage 3" ), $data['pages'] );
 	}
 }
diff --git a/tests/query/isTerm.php b/tests/query/isTerm.php
index dbd6c2a2f0..1de8c522e9 100644
--- a/tests/query/isTerm.php
+++ b/tests/query/isTerm.php
@@ -77,7 +77,7 @@ class Tests_Query_IsTerm extends WP_UnitTestCase {
 	}
 
 	function test_tag_action_tax() {
-		// tag with tax added
+		// Tag with taxonomy added.
 		$this->go_to( home_url( '/tag/tag-slug/' ) );
 		$this->assertQueryTrue( 'is_tag', 'is_archive' );
 		$this->assertNotEmpty( get_query_var( 'tax_query' ) );
@@ -88,7 +88,7 @@ class Tests_Query_IsTerm extends WP_UnitTestCase {
 	}
 
 	function test_tag_query_cat_action_tax() {
-		// tag + category with tax added
+		// Tag + category with taxonomy added.
 		$this->go_to( home_url( "/tag/tag-slug/?cat=$this->cat_id" ) );
 		$this->assertQueryTrue( 'is_category', 'is_tag', 'is_archive' );
 		$this->assertNotEmpty( get_query_var( 'tax_query' ) );
@@ -100,7 +100,7 @@ class Tests_Query_IsTerm extends WP_UnitTestCase {
 	}
 
 	function test_tag_query_cat_query_tax_action_tax() {
-		// tag + category + tax with tax added
+		// Tag + category + tax with taxonomy added.
 		$this->go_to( home_url( "/tag/tag-slug/?cat=$this->cat_id&testtax=tax-slug2" ) );
 		$this->assertQueryTrue( 'is_category', 'is_tag', 'is_tax', 'is_archive' );
 		$this->assertNotEmpty( get_query_var( 'tax_query' ) );
@@ -113,7 +113,7 @@ class Tests_Query_IsTerm extends WP_UnitTestCase {
 	}
 
 	function test_cat_action_tax() {
-		// category with tax added
+		// Category with taxonomy added.
 		$this->go_to( home_url( '/category/cat-slug/' ) );
 		$this->assertQueryTrue( 'is_category', 'is_archive' );
 		$this->assertNotEmpty( get_query_var( 'cat' ) );
@@ -127,7 +127,7 @@ class Tests_Query_IsTerm extends WP_UnitTestCase {
 	 * @ticket 26627
 	 */
 	function test_cat_uncat_action_tax() {
-		// category with tax added
+		// Category with taxonomy added.
 		add_action( 'pre_get_posts', array( $this, '_cat_uncat_action_tax' ), 11 );
 
 		$this->go_to( home_url( '/category/uncategorized/' ) );
@@ -153,7 +153,7 @@ class Tests_Query_IsTerm extends WP_UnitTestCase {
 	 * @ticket 26728
 	 */
 	function test_tax_action_tax() {
-		// tax with tax added
+		// Taxonomy with taxonomy added.
 		$this->go_to( home_url( '/testtax/tax-slug2/' ) );
 		$this->assertQueryTrue( 'is_tax', 'is_archive' );
 		$this->assertNotEmpty( get_query_var( 'tax_query' ) );
@@ -163,7 +163,7 @@ class Tests_Query_IsTerm extends WP_UnitTestCase {
 	}
 
 	function test_tax_query_tag_action_tax() {
-		// tax + tag with tax added
+		// Taxonomy + tag with taxonomy added.
 		$this->go_to( home_url( "/testtax/tax-slug2/?tag_id=$this->tag_id" ) );
 		$this->assertQueryTrue( 'is_tag', 'is_tax', 'is_archive' );
 		$this->assertNotEmpty( get_query_var( 'tax_query' ) );
@@ -174,7 +174,7 @@ class Tests_Query_IsTerm extends WP_UnitTestCase {
 	}
 
 	function test_tax_query_cat_action_tax() {
-		// tax + cat with tax added
+		// Taxonomy + category with taxonomy added.
 		$this->go_to( home_url( "/testtax/tax-slug2/?cat=$this->cat_id" ) );
 		$this->assertQueryTrue( 'is_category', 'is_tax', 'is_archive' );
 		$this->assertNotEmpty( get_query_var( 'tax_query' ) );
@@ -251,7 +251,7 @@ class Tests_Query_IsTerm extends WP_UnitTestCase {
 		$expected = get_term( $this->tax_id, 'testtax' );
 
 		// Only compare term_id because object_id may or may not be part of either value.
-		$this->assertEquals( $expected->term_id, $object->term_id );
+		$this->assertSame( $expected->term_id, $object->term_id );
 	}
 
 	/**
@@ -295,6 +295,6 @@ class Tests_Query_IsTerm extends WP_UnitTestCase {
 		$expected = get_term( $this->tax_id, 'testtax' );
 
 		// Only compare term_id because object_id may or may not be part of either value.
-		$this->assertEquals( $expected->term_id, $object->term_id );
+		$this->assertSame( $expected->term_id, $object->term_id );
 	}
 }
diff --git a/tests/query/metaQuery.php b/tests/query/metaQuery.php
index 9303e60b95..5acec55d3f 100644
--- a/tests/query/metaQuery.php
+++ b/tests/query/metaQuery.php
@@ -28,7 +28,7 @@ class Tests_Query_MetaQuery extends WP_UnitTestCase {
 		);
 
 		$expected = array( $p1, $p2 );
-		$this->assertEqualSets( $expected, $query->posts );
+		$this->assertSameSets( $expected, $query->posts );
 	}
 
 	public function test_meta_query_no_value() {
@@ -54,7 +54,7 @@ class Tests_Query_MetaQuery extends WP_UnitTestCase {
 		);
 
 		$expected = array( $p2, $p3 );
-		$this->assertEqualSets( $expected, $query->posts );
+		$this->assertSameSets( $expected, $query->posts );
 	}
 
 	public function test_meta_query_single_query_compare_default() {
@@ -78,7 +78,7 @@ class Tests_Query_MetaQuery extends WP_UnitTestCase {
 		);
 
 		$expected = array( $p1 );
-		$this->assertEqualSets( $expected, $query->posts );
+		$this->assertSameSets( $expected, $query->posts );
 	}
 
 	public function test_meta_query_single_query_compare_equals() {
@@ -103,7 +103,7 @@ class Tests_Query_MetaQuery extends WP_UnitTestCase {
 		);
 
 		$expected = array( $p1 );
-		$this->assertEqualSets( $expected, $query->posts );
+		$this->assertSameSets( $expected, $query->posts );
 	}
 
 	public function test_meta_query_single_query_compare_not_equals() {
@@ -130,7 +130,7 @@ class Tests_Query_MetaQuery extends WP_UnitTestCase {
 		);
 
 		$expected = array( $p2 );
-		$this->assertEqualSets( $expected, $query->posts );
+		$this->assertSameSets( $expected, $query->posts );
 	}
 
 	public function test_meta_query_single_query_compare_arithmetic_comparisons() {
@@ -159,7 +159,7 @@ class Tests_Query_MetaQuery extends WP_UnitTestCase {
 		);
 
 		$expected = array( $p1 );
-		$this->assertEqualSets( $expected, $query->posts );
+		$this->assertSameSets( $expected, $query->posts );
 
 		// <=
 		$query = new WP_Query(
@@ -178,7 +178,7 @@ class Tests_Query_MetaQuery extends WP_UnitTestCase {
 		);
 
 		$expected = array( $p1, $p2 );
-		$this->assertEqualSets( $expected, $query->posts );
+		$this->assertSameSets( $expected, $query->posts );
 
 		// >=
 		$query = new WP_Query(
@@ -197,7 +197,7 @@ class Tests_Query_MetaQuery extends WP_UnitTestCase {
 		);
 
 		$expected = array( $p2, $p3 );
-		$this->assertEqualSets( $expected, $query->posts );
+		$this->assertSameSets( $expected, $query->posts );
 
 		// >
 		$query = new WP_Query(
@@ -216,7 +216,7 @@ class Tests_Query_MetaQuery extends WP_UnitTestCase {
 		);
 
 		$expected = array( $p3 );
-		$this->assertEqualSets( $expected, $query->posts );
+		$this->assertSameSets( $expected, $query->posts );
 	}
 
 	public function test_meta_query_single_query_compare_like() {
@@ -241,7 +241,7 @@ class Tests_Query_MetaQuery extends WP_UnitTestCase {
 		);
 
 		$expected = array( $p1 );
-		$this->assertEqualSets( $expected, $query->posts );
+		$this->assertSameSets( $expected, $query->posts );
 	}
 
 	public function test_meta_query_single_query_compare_not_like() {
@@ -268,7 +268,7 @@ class Tests_Query_MetaQuery extends WP_UnitTestCase {
 		);
 
 		$expected = array( $p2 );
-		$this->assertEqualSets( $expected, $query->posts );
+		$this->assertSameSets( $expected, $query->posts );
 	}
 
 	public function test_meta_query_single_query_compare_between_not_between() {
@@ -297,7 +297,7 @@ class Tests_Query_MetaQuery extends WP_UnitTestCase {
 		);
 
 		$expected = array( $p2 );
-		$this->assertEqualSets( $expected, $query->posts );
+		$this->assertSameSets( $expected, $query->posts );
 
 		$query = new WP_Query(
 			array(
@@ -316,7 +316,7 @@ class Tests_Query_MetaQuery extends WP_UnitTestCase {
 		);
 
 		$expected = array( $p1, $p3 );
-		$this->assertEqualSets( $expected, $query->posts );
+		$this->assertSameSets( $expected, $query->posts );
 	}
 
 	public function test_meta_query_single_query_compare_regexp_rlike() {
@@ -342,7 +342,7 @@ class Tests_Query_MetaQuery extends WP_UnitTestCase {
 		);
 
 		$expected = array( $p2 );
-		$this->assertEqualSets( $expected, $query->posts );
+		$this->assertSameSets( $expected, $query->posts );
 
 		// RLIKE is a synonym for REGEXP.
 		$query = new WP_Query(
@@ -361,7 +361,7 @@ class Tests_Query_MetaQuery extends WP_UnitTestCase {
 		);
 
 		$expected = array( $p2 );
-		$this->assertEqualSets( $expected, $query->posts );
+		$this->assertSameSets( $expected, $query->posts );
 	}
 
 	public function test_meta_query_single_query_compare_not_regexp() {
@@ -387,7 +387,7 @@ class Tests_Query_MetaQuery extends WP_UnitTestCase {
 		);
 
 		$expected = array( $p1 );
-		$this->assertEqualSets( $expected, $query->posts );
+		$this->assertSameSets( $expected, $query->posts );
 	}
 
 	public function test_meta_query_relation_default() {
@@ -419,7 +419,7 @@ class Tests_Query_MetaQuery extends WP_UnitTestCase {
 		);
 
 		$expected = array( $p1 );
-		$this->assertEquals( $expected, $query->posts );
+		$this->assertSame( $expected, $query->posts );
 	}
 
 	public function test_meta_query_relation_or() {
@@ -467,7 +467,7 @@ class Tests_Query_MetaQuery extends WP_UnitTestCase {
 		);
 
 		$expected = array( $post_id, $post_id2, $post_id3, $post_id4 );
-		$this->assertEqualSets( $expected, $query->posts );
+		$this->assertSameSets( $expected, $query->posts );
 	}
 
 	public function test_meta_query_relation_and() {
@@ -523,7 +523,7 @@ class Tests_Query_MetaQuery extends WP_UnitTestCase {
 		);
 
 		$expected = array( $post_id7 );
-		$this->assertEqualSets( $expected, $query->posts );
+		$this->assertSameSets( $expected, $query->posts );
 
 		$query = new WP_Query(
 			array(
@@ -543,7 +543,7 @@ class Tests_Query_MetaQuery extends WP_UnitTestCase {
 		);
 
 		$expected = array( $post_id2, $post_id6, $post_id7 );
-		$this->assertEqualSets( $expected, $query->posts );
+		$this->assertSameSets( $expected, $query->posts );
 	}
 
 	/**
@@ -566,7 +566,7 @@ class Tests_Query_MetaQuery extends WP_UnitTestCase {
 			)
 		);
 
-		$this->assertEqualSets( array( $posts[0], $posts[2] ), $query->posts );
+		$this->assertSameSets( array( $posts[0], $posts[2] ), $query->posts );
 	}
 
 	/**
@@ -590,7 +590,7 @@ class Tests_Query_MetaQuery extends WP_UnitTestCase {
 			)
 		);
 
-		$this->assertEqualSets( array( $posts[2] ), $query->posts );
+		$this->assertSameSets( array( $posts[2] ), $query->posts );
 	}
 
 	/**
@@ -614,7 +614,7 @@ class Tests_Query_MetaQuery extends WP_UnitTestCase {
 			)
 		);
 
-		$this->assertEqualSets( array( $posts[1] ), $query->posts );
+		$this->assertSameSets( array( $posts[1] ), $query->posts );
 	}
 
 	/**
@@ -651,7 +651,7 @@ class Tests_Query_MetaQuery extends WP_UnitTestCase {
 		);
 
 		$expected = array( $post_id2, $post_id3, $post_id4 );
-		$this->assertEqualSets( $expected, $query->posts );
+		$this->assertSameSets( $expected, $query->posts );
 
 		$query = new WP_Query(
 			array(
@@ -672,7 +672,7 @@ class Tests_Query_MetaQuery extends WP_UnitTestCase {
 		);
 
 		$expected = array( $post_id4 );
-		$this->assertEquals( $expected, $query->posts );
+		$this->assertSame( $expected, $query->posts );
 
 		$query = new WP_Query(
 			array(
@@ -696,7 +696,7 @@ class Tests_Query_MetaQuery extends WP_UnitTestCase {
 			)
 		);
 
-		$this->assertEquals( 0, count( $query->posts ) );
+		$this->assertSame( 0, count( $query->posts ) );
 	}
 
 	/**
@@ -734,7 +734,7 @@ class Tests_Query_MetaQuery extends WP_UnitTestCase {
 		);
 
 		$expected = array( $posts[1], $posts[2], $posts[3] );
-		$this->assertEqualSets( $expected, $query->posts );
+		$this->assertSameSets( $expected, $query->posts );
 	}
 
 	/**
@@ -769,7 +769,7 @@ class Tests_Query_MetaQuery extends WP_UnitTestCase {
 		);
 
 		$expected = array( $posts[1], $posts[2] );
-		$this->assertEqualSets( $expected, $query->posts );
+		$this->assertSameSets( $expected, $query->posts );
 	}
 
 	/**
@@ -804,7 +804,7 @@ class Tests_Query_MetaQuery extends WP_UnitTestCase {
 		);
 
 		$expected = array( $posts[0], $posts[1] );
-		$this->assertEqualSets( $expected, $query->posts );
+		$this->assertSameSets( $expected, $query->posts );
 	}
 
 	/**
@@ -839,7 +839,7 @@ class Tests_Query_MetaQuery extends WP_UnitTestCase {
 		);
 
 		$expected = array( $posts[0], $posts[1] );
-		$this->assertEqualSets( $expected, $query->posts );
+		$this->assertSameSets( $expected, $query->posts );
 	}
 
 	/**
@@ -874,7 +874,7 @@ class Tests_Query_MetaQuery extends WP_UnitTestCase {
 		);
 
 		$expected = array( $posts[1], $posts[2] );
-		$this->assertEqualSets( $expected, $query->posts );
+		$this->assertSameSets( $expected, $query->posts );
 	}
 
 	/**
@@ -910,7 +910,7 @@ class Tests_Query_MetaQuery extends WP_UnitTestCase {
 		);
 
 		$expected = array( $posts[0], $posts[2] );
-		$this->assertEqualSets( $expected, $query->posts );
+		$this->assertSameSets( $expected, $query->posts );
 	}
 
 	/**
@@ -947,7 +947,7 @@ class Tests_Query_MetaQuery extends WP_UnitTestCase {
 		);
 
 		$expected = array( $posts[3] );
-		$this->assertEqualSets( $expected, $query->posts );
+		$this->assertSameSets( $expected, $query->posts );
 	}
 
 	/**
@@ -984,7 +984,7 @@ class Tests_Query_MetaQuery extends WP_UnitTestCase {
 		);
 
 		$expected = array( $posts[1] );
-		$this->assertEqualSets( $expected, $query->posts );
+		$this->assertSameSets( $expected, $query->posts );
 	}
 
 	/**
@@ -1020,7 +1020,7 @@ class Tests_Query_MetaQuery extends WP_UnitTestCase {
 		);
 
 		$expected = array( $posts[3] );
-		$this->assertEqualSets( $expected, $query->posts );
+		$this->assertSameSets( $expected, $query->posts );
 	}
 
 	/**
@@ -1063,7 +1063,7 @@ class Tests_Query_MetaQuery extends WP_UnitTestCase {
 		);
 
 		$expected = array( $posts[2] );
-		$this->assertEqualSets( $expected, $query->posts );
+		$this->assertSameSets( $expected, $query->posts );
 	}
 
 	/**
@@ -1099,7 +1099,7 @@ class Tests_Query_MetaQuery extends WP_UnitTestCase {
 		);
 
 		$expected = array( $posts[3] );
-		$this->assertEqualSets( $expected, $query->posts );
+		$this->assertSameSets( $expected, $query->posts );
 	}
 
 	/**
@@ -1135,7 +1135,7 @@ class Tests_Query_MetaQuery extends WP_UnitTestCase {
 		);
 
 		$expected = array( $posts[3] );
-		$this->assertEqualSets( $expected, $query->posts );
+		$this->assertSameSets( $expected, $query->posts );
 	}
 
 	/**
@@ -1167,7 +1167,7 @@ class Tests_Query_MetaQuery extends WP_UnitTestCase {
 				'fields'                 => 'ids',
 			)
 		);
-		$this->assertEqualSets( array( $post_3 ), $query->posts );
+		$this->assertSameSets( array( $post_3 ), $query->posts );
 
 		$query = new WP_Query(
 			array(
@@ -1184,7 +1184,7 @@ class Tests_Query_MetaQuery extends WP_UnitTestCase {
 				'fields'                 => 'ids',
 			)
 		);
-		$this->assertEqualSets( array( $post_4 ), $query->posts );
+		$this->assertSameSets( array( $post_4 ), $query->posts );
 
 		$query = new WP_Query(
 			array(
@@ -1201,7 +1201,7 @@ class Tests_Query_MetaQuery extends WP_UnitTestCase {
 				'fields'                 => 'ids',
 			)
 		);
-		$this->assertEqualSets( array( $post_3, $post_4 ), $query->posts );
+		$this->assertSameSets( array( $post_3, $post_4 ), $query->posts );
 
 		$query = new WP_Query(
 			array(
@@ -1218,7 +1218,7 @@ class Tests_Query_MetaQuery extends WP_UnitTestCase {
 				'fields'                 => 'ids',
 			)
 		);
-		$this->assertEqualSets( array( $post_1 ), $query->posts, 'ID' );
+		$this->assertSameSets( array( $post_1 ), $query->posts, 'ID' );
 
 		$query = new WP_Query(
 			array(
@@ -1235,7 +1235,7 @@ class Tests_Query_MetaQuery extends WP_UnitTestCase {
 				'fields'                 => 'ids',
 			)
 		);
-		$this->assertEqualSets( array( $post_1, $post_2, $post_3 ), $query->posts );
+		$this->assertSameSets( array( $post_1, $post_2, $post_3 ), $query->posts );
 
 		$query = new WP_Query(
 			array(
@@ -1252,7 +1252,7 @@ class Tests_Query_MetaQuery extends WP_UnitTestCase {
 				'fields'                 => 'ids',
 			)
 		);
-		$this->assertEqualSets( array( $post_3 ), $query->posts );
+		$this->assertSameSets( array( $post_3 ), $query->posts );
 
 		$query = new WP_Query(
 			array(
@@ -1269,7 +1269,7 @@ class Tests_Query_MetaQuery extends WP_UnitTestCase {
 				'fields'                 => 'ids',
 			)
 		);
-		$this->assertEqualSets( array( $post_1, $post_2, $post_4 ), $query->posts );
+		$this->assertSameSets( array( $post_1, $post_2, $post_4 ), $query->posts );
 
 		$query = new WP_Query(
 			array(
@@ -1286,7 +1286,7 @@ class Tests_Query_MetaQuery extends WP_UnitTestCase {
 				'fields'                 => 'ids',
 			)
 		);
-		$this->assertEqualSets( array( $post_1, $post_3 ), $query->posts );
+		$this->assertSameSets( array( $post_1, $post_3 ), $query->posts );
 
 		$query = new WP_Query(
 			array(
@@ -1303,7 +1303,7 @@ class Tests_Query_MetaQuery extends WP_UnitTestCase {
 				'fields'                 => 'ids',
 			)
 		);
-		$this->assertEqualSets( array( $post_2, $post_4 ), $query->posts );
+		$this->assertSameSets( array( $post_2, $post_4 ), $query->posts );
 
 		$query = new WP_Query(
 			array(
@@ -1316,7 +1316,7 @@ class Tests_Query_MetaQuery extends WP_UnitTestCase {
 				'fields'                 => 'ids',
 			)
 		);
-		$this->assertEqualSets( array( $post_4, $post_3, $post_2, $post_1 ), $query->posts );
+		$this->assertSameSets( array( $post_4, $post_3, $post_2, $post_1 ), $query->posts );
 	}
 
 	public function test_meta_vars_should_be_converted_to_meta_query() {
@@ -1373,7 +1373,7 @@ class Tests_Query_MetaQuery extends WP_UnitTestCase {
 			)
 		);
 
-		$this->assertEquals( array( $posts[2], $posts[0], $posts[1] ), $query->posts );
+		$this->assertSame( array( $posts[2], $posts[0], $posts[1] ), $query->posts );
 	}
 
 	/**
@@ -1418,7 +1418,7 @@ class Tests_Query_MetaQuery extends WP_UnitTestCase {
 			)
 		);
 
-		$this->assertEquals( array( $posts[2], $posts[0], $posts[1] ), $query->posts );
+		$this->assertSame( array( $posts[2], $posts[0], $posts[1] ), $query->posts );
 	}
 
 	/**
@@ -1461,7 +1461,7 @@ class Tests_Query_MetaQuery extends WP_UnitTestCase {
 		);
 
 		$expected = array( $p1, $p3 );
-		$this->assertEqualSets( $expected, $query->posts );
+		$this->assertSameSets( $expected, $query->posts );
 	}
 
 	/**
@@ -1511,7 +1511,7 @@ class Tests_Query_MetaQuery extends WP_UnitTestCase {
 		);
 
 		$expected = array( $p1, $p3 );
-		$this->assertEqualSets( $expected, $query->posts );
+		$this->assertSameSets( $expected, $query->posts );
 	}
 
 	public function test_meta_between_not_between() {
@@ -1534,13 +1534,13 @@ class Tests_Query_MetaQuery extends WP_UnitTestCase {
 		);
 
 		$query = new WP_Query( $args );
-		$this->assertEquals( 2, count( $query->posts ) );
+		$this->assertSame( 2, count( $query->posts ) );
 		foreach ( $query->posts as $post ) {
 			$this->assertInstanceOf( 'WP_Post', $post );
-			$this->assertEquals( 'raw', $post->filter );
+			$this->assertSame( 'raw', $post->filter );
 		}
 		$posts = wp_list_pluck( $query->posts, 'ID' );
-		$this->assertEqualSets( array( $post_id2, $post_id3 ), $posts );
+		$this->assertSameSets( array( $post_id2, $post_id3 ), $posts );
 
 		$args = array(
 			'meta_key'     => 'time',
@@ -1550,20 +1550,20 @@ class Tests_Query_MetaQuery extends WP_UnitTestCase {
 		);
 
 		$query = new WP_Query( $args );
-		$this->assertEquals( 3, count( $query->posts ) );
+		$this->assertSame( 3, count( $query->posts ) );
 		foreach ( $query->posts as $post ) {
 			$this->assertInstanceOf( 'WP_Post', $post );
-			$this->assertEquals( 'raw', $post->filter );
+			$this->assertSame( 'raw', $post->filter );
 		}
 		$posts = wp_list_pluck( $query->posts, 'ID' );
-		$this->assertEqualSets( array( $post_id, $post_id4, $post_id5 ), $posts );
+		$this->assertSameSets( array( $post_id, $post_id4, $post_id5 ), $posts );
 	}
 
 	/**
 	 * @ticket 16829
 	 */
 	public function test_meta_default_compare() {
-		// compare should default to IN when meta_value is an array
+		// Compare should default to IN when meta_value is an array.
 		$post_id = self::factory()->post->create();
 		add_post_meta( $post_id, 'foo', 'bar' );
 		$post_id2 = self::factory()->post->create();
@@ -1582,9 +1582,9 @@ class Tests_Query_MetaQuery extends WP_UnitTestCase {
 			)
 		);
 
-		$this->assertEquals( 2, count( $posts ) );
+		$this->assertSame( 2, count( $posts ) );
 		$posts = wp_list_pluck( $posts, 'ID' );
-		$this->assertEqualSets( array( $post_id, $post_id3 ), $posts );
+		$this->assertSameSets( array( $post_id, $post_id3 ), $posts );
 
 		$posts = get_posts(
 			array(
@@ -1594,13 +1594,13 @@ class Tests_Query_MetaQuery extends WP_UnitTestCase {
 			)
 		);
 
-		$this->assertEquals( 2, count( $posts ) );
+		$this->assertSame( 2, count( $posts ) );
 		foreach ( $posts as $post ) {
 			$this->assertInstanceOf( 'WP_Post', $post );
-			$this->assertEquals( 'raw', $post->filter );
+			$this->assertSame( 'raw', $post->filter );
 		}
 		$posts = wp_list_pluck( $posts, 'ID' );
-		$this->assertEqualSets( array( $post_id, $post_id3 ), $posts );
+		$this->assertSameSets( array( $post_id, $post_id3 ), $posts );
 	}
 
 	/**
@@ -1625,13 +1625,13 @@ class Tests_Query_MetaQuery extends WP_UnitTestCase {
 		);
 
 		$posts = get_posts( $args );
-		$this->assertEquals( 2, count( $posts ) );
+		$this->assertSame( 2, count( $posts ) );
 		foreach ( $posts as $post ) {
 			$this->assertInstanceOf( 'WP_Post', $post );
-			$this->assertEquals( 'raw', $post->filter );
+			$this->assertSame( 'raw', $post->filter );
 		}
 		$posts = wp_list_pluck( $posts, 'ID' );
-		$this->assertEqualSets( array( $post_id, $post_id2 ), $posts );
+		$this->assertSameSets( array( $post_id, $post_id2 ), $posts );
 	}
 
 	/**
@@ -1659,12 +1659,12 @@ class Tests_Query_MetaQuery extends WP_UnitTestCase {
 				'meta_value' => '0',
 			)
 		);
-		$this->assertEquals( 1, count( $q->posts ) );
+		$this->assertSame( 1, count( $q->posts ) );
 		foreach ( $q->posts as $post ) {
 			$this->assertInstanceOf( 'WP_Post', $post );
-			$this->assertEquals( 'raw', $post->filter );
+			$this->assertSame( 'raw', $post->filter );
 		}
-		$this->assertEquals( $post_id, $q->posts[0]->ID );
+		$this->assertSame( $post_id, $q->posts[0]->ID );
 
 		$posts = get_posts(
 			array(
@@ -1672,13 +1672,13 @@ class Tests_Query_MetaQuery extends WP_UnitTestCase {
 				'meta_value' => '0',
 			)
 		);
-		$this->assertEquals( 2, count( $posts ) );
+		$this->assertSame( 2, count( $posts ) );
 		foreach ( $posts as $post ) {
 			$this->assertInstanceOf( 'WP_Post', $post );
-			$this->assertEquals( 'raw', $post->filter );
+			$this->assertSame( 'raw', $post->filter );
 		}
 		$posts = wp_list_pluck( $posts, 'ID' );
-		$this->assertEqualSets( array( $post_id, $post_id5 ), $posts );
+		$this->assertSameSets( array( $post_id, $post_id5 ), $posts );
 
 		$posts = get_posts(
 			array(
@@ -1686,31 +1686,31 @@ class Tests_Query_MetaQuery extends WP_UnitTestCase {
 				'meta_value' => 0,
 			)
 		);
-		$this->assertEquals( 2, count( $posts ) );
+		$this->assertSame( 2, count( $posts ) );
 		foreach ( $posts as $post ) {
 			$this->assertInstanceOf( 'WP_Post', $post );
-			$this->assertEquals( 'raw', $post->filter );
+			$this->assertSame( 'raw', $post->filter );
 		}
 		$posts = wp_list_pluck( $posts, 'ID' );
-		$this->assertEqualSets( array( $post_id, $post_id5 ), $posts );
+		$this->assertSameSets( array( $post_id, $post_id5 ), $posts );
 
 		$posts = get_posts( array( 'meta_value' => 0 ) );
-		$this->assertEquals( 5, count( $posts ) );
+		$this->assertSame( 5, count( $posts ) );
 		foreach ( $posts as $post ) {
 			$this->assertInstanceOf( 'WP_Post', $post );
-			$this->assertEquals( 'raw', $post->filter );
+			$this->assertSame( 'raw', $post->filter );
 		}
 		$posts = wp_list_pluck( $posts, 'ID' );
-		$this->assertEqualSets( array( $post_id, $post_id3, $post_id4, $post_id5, $post_id6 ), $posts );
+		$this->assertSameSets( array( $post_id, $post_id3, $post_id4, $post_id5, $post_id6 ), $posts );
 
 		$posts = get_posts( array( 'meta_value' => '0' ) );
-		$this->assertEquals( 5, count( $posts ) );
+		$this->assertSame( 5, count( $posts ) );
 		foreach ( $posts as $post ) {
 			$this->assertInstanceOf( 'WP_Post', $post );
-			$this->assertEquals( 'raw', $post->filter );
+			$this->assertSame( 'raw', $post->filter );
 		}
 		$posts = wp_list_pluck( $posts, 'ID' );
-		$this->assertEqualSets( array( $post_id, $post_id3, $post_id4, $post_id5, $post_id6 ), $posts );
+		$this->assertSameSets( array( $post_id, $post_id3, $post_id4, $post_id5, $post_id6 ), $posts );
 	}
 
 	/**
@@ -1736,7 +1736,7 @@ class Tests_Query_MetaQuery extends WP_UnitTestCase {
 			)
 		);
 
-		$this->assertEquals( array( $posts[1], $posts[2], $posts[0] ), $q->posts );
+		$this->assertSame( array( $posts[1], $posts[2], $posts[0] ), $q->posts );
 	}
 
 	/**
@@ -1779,7 +1779,7 @@ class Tests_Query_MetaQuery extends WP_UnitTestCase {
 			)
 		);
 
-		$this->assertEquals( array( $p3, $p1, $p2 ), $q->posts );
+		$this->assertSame( array( $p3, $p1, $p2 ), $q->posts );
 	}
 
 	/**
@@ -1815,7 +1815,7 @@ class Tests_Query_MetaQuery extends WP_UnitTestCase {
 			)
 		);
 
-		$this->assertEquals( array( $posts[2], $posts[0], $posts[1] ), $q->posts );
+		$this->assertSame( array( $posts[2], $posts[0], $posts[1] ), $q->posts );
 	}
 
 	/**
@@ -1846,7 +1846,7 @@ class Tests_Query_MetaQuery extends WP_UnitTestCase {
 			)
 		);
 
-		$this->assertEqualSets( array( 'foo_key', 'foo_key-1', 'foo_key-2' ), array_keys( $q->meta_query->get_clauses() ) );
+		$this->assertSameSets( array( 'foo_key', 'foo_key-1', 'foo_key-2' ), array_keys( $q->meta_query->get_clauses() ) );
 	}
 
 	/**
@@ -1871,7 +1871,7 @@ class Tests_Query_MetaQuery extends WP_UnitTestCase {
 			)
 		);
 
-		$this->assertEqualSets( array( $posts[0], $posts[2] ), $q->posts );
+		$this->assertSameSets( array( $posts[0], $posts[2] ), $q->posts );
 	}
 
 	/**
@@ -1892,7 +1892,7 @@ class Tests_Query_MetaQuery extends WP_UnitTestCase {
 			)
 		);
 
-		$this->assertEqualSets( array( $posts[0], $posts[2] ), $q->posts );
+		$this->assertSameSets( array( $posts[0], $posts[2] ), $q->posts );
 	}
 
 	/**
@@ -1919,7 +1919,7 @@ class Tests_Query_MetaQuery extends WP_UnitTestCase {
 			)
 		);
 
-		$this->assertEqualSets( array( $posts[0] ), $q->posts );
+		$this->assertSameSets( array( $posts[0] ), $q->posts );
 
 	}
 
@@ -1947,7 +1947,7 @@ class Tests_Query_MetaQuery extends WP_UnitTestCase {
 			)
 		);
 
-		$this->assertEqualSets( array( $posts[0], $posts[1] ), $q->posts );
+		$this->assertSameSets( array( $posts[0], $posts[1] ), $q->posts );
 	}
 
 	/**
@@ -1974,7 +1974,7 @@ class Tests_Query_MetaQuery extends WP_UnitTestCase {
 			)
 		);
 
-		$this->assertEqualSets( array( $posts[0], $posts[2] ), $q->posts );
+		$this->assertSameSets( array( $posts[0], $posts[2] ), $q->posts );
 	}
 
 	/**
@@ -1999,7 +1999,7 @@ class Tests_Query_MetaQuery extends WP_UnitTestCase {
 			)
 		);
 
-		$this->assertEqualSets( array( $posts[1], $posts[2] ), $q->posts );
+		$this->assertSameSets( array( $posts[1], $posts[2] ), $q->posts );
 	}
 
 	/**
@@ -2026,7 +2026,7 @@ class Tests_Query_MetaQuery extends WP_UnitTestCase {
 			)
 		);
 
-		$this->assertEqualSets( array( $posts[1] ), $q->posts );
+		$this->assertSameSets( array( $posts[1] ), $q->posts );
 	}
 
 	/**
@@ -2053,7 +2053,7 @@ class Tests_Query_MetaQuery extends WP_UnitTestCase {
 			)
 		);
 
-		$this->assertEqualSets( array( $posts[0], $posts[1] ), $q->posts );
+		$this->assertSameSets( array( $posts[0], $posts[1] ), $q->posts );
 	}
 
 	/**
@@ -2080,7 +2080,7 @@ class Tests_Query_MetaQuery extends WP_UnitTestCase {
 			)
 		);
 
-		$this->assertEqualSets( array( $posts[2] ), $q->posts );
+		$this->assertSameSets( array( $posts[2] ), $q->posts );
 	}
 
 	/**
@@ -2106,7 +2106,7 @@ class Tests_Query_MetaQuery extends WP_UnitTestCase {
 			)
 		);
 
-		$this->assertEqualSets( array( $posts[0], $posts[2] ), $q->posts );
+		$this->assertSameSets( array( $posts[0], $posts[2] ), $q->posts );
 
 		$q = new WP_Query(
 			array(
@@ -2121,7 +2121,7 @@ class Tests_Query_MetaQuery extends WP_UnitTestCase {
 			)
 		);
 
-		$this->assertEqualSets( array( $posts[0] ), $q->posts );
+		$this->assertSameSets( array( $posts[0] ), $q->posts );
 	}
 
 	/**
@@ -2148,7 +2148,7 @@ class Tests_Query_MetaQuery extends WP_UnitTestCase {
 			)
 		);
 
-		$this->assertEqualSets( array( $posts[1] ), $q->posts );
+		$this->assertSameSets( array( $posts[1] ), $q->posts );
 
 		$q = new WP_Query(
 			array(
@@ -2163,6 +2163,6 @@ class Tests_Query_MetaQuery extends WP_UnitTestCase {
 			)
 		);
 
-		$this->assertEqualSets( array( $posts[1], $posts[2] ), $q->posts );
+		$this->assertSameSets( array( $posts[1], $posts[2] ), $q->posts );
 	}
 }
diff --git a/tests/query/parseQuery.php b/tests/query/parseQuery.php
index d3be65ac6c..5b3625ed0f 100644
--- a/tests/query/parseQuery.php
+++ b/tests/query/parseQuery.php
@@ -59,7 +59,7 @@ class Tests_Query_ParseQuery extends WP_UnitTestCase {
 			)
 		);
 
-		$this->assertSame( true, $q->query_vars['s'] );
+		$this->assertTrue( $q->query_vars['s'] );
 	}
 
 	/**
diff --git a/tests/query/postStatus.php b/tests/query/postStatus.php
index d907925907..c0be8b01e4 100644
--- a/tests/query/postStatus.php
+++ b/tests/query/postStatus.php
@@ -82,7 +82,7 @@ class Tests_Query_PostStatus extends WP_UnitTestCase {
 			self::$author_private_post,
 		);
 
-		$this->assertEqualSets( $expected, wp_list_pluck( $q->posts, 'ID' ) );
+		$this->assertSameSets( $expected, wp_list_pluck( $q->posts, 'ID' ) );
 	}
 
 	public function test_private_should_not_be_included_for_non_author_if_perm_is_not_false() {
@@ -112,7 +112,7 @@ class Tests_Query_PostStatus extends WP_UnitTestCase {
 			self::$author_private_post,
 		);
 
-		$this->assertEqualSets( $expected, wp_list_pluck( $q->posts, 'ID' ) );
+		$this->assertSameSets( $expected, wp_list_pluck( $q->posts, 'ID' ) );
 	}
 
 	public function test_private_should_be_included_for_all_users_if_perm_is_readable_and_user_can_read_others_posts() {
@@ -130,7 +130,7 @@ class Tests_Query_PostStatus extends WP_UnitTestCase {
 			self::$editor_private_post,
 		);
 
-		$this->assertEqualSets( $expected, wp_list_pluck( $q->posts, 'ID' ) );
+		$this->assertSameSets( $expected, wp_list_pluck( $q->posts, 'ID' ) );
 	}
 
 	public function test_private_should_be_included_only_for_current_user_if_perm_is_editable_and_user_cannot_read_others_posts() {
@@ -147,7 +147,7 @@ class Tests_Query_PostStatus extends WP_UnitTestCase {
 			self::$author_private_post,
 		);
 
-		$this->assertEqualSets( $expected, wp_list_pluck( $q->posts, 'ID' ) );
+		$this->assertSameSets( $expected, wp_list_pluck( $q->posts, 'ID' ) );
 	}
 
 	public function test_private_should_be_included_for_all_users_if_perm_is_editable_and_user_can_read_others_posts() {
@@ -165,7 +165,7 @@ class Tests_Query_PostStatus extends WP_UnitTestCase {
 			self::$editor_private_post,
 		);
 
-		$this->assertEqualSets( $expected, wp_list_pluck( $q->posts, 'ID' ) );
+		$this->assertSameSets( $expected, wp_list_pluck( $q->posts, 'ID' ) );
 	}
 
 	public function test_all_public_post_stati_should_be_included_when_no_post_status_is_provided() {
@@ -262,6 +262,27 @@ class Tests_Query_PostStatus extends WP_UnitTestCase {
 		$this->assertEmpty( $q->posts );
 	}
 
+	public function test_single_post_with_nonpublic_status_should_not_be_shown_for_any_user() {
+		register_post_type( 'foo_pt' );
+		register_post_status( 'foo_ps', array( 'public' => false ) );
+		$p = self::factory()->post->create(
+			array(
+				'post_status' => 'foo_ps',
+				'post_author' => self::$author_user_id,
+			)
+		);
+
+		wp_set_current_user( self::$editor_user_id );
+
+		$q = new WP_Query(
+			array(
+				'p' => $p,
+			)
+		);
+
+		$this->assertEmpty( $q->posts );
+	}
+
 	public function test_single_post_with_nonpublic_and_protected_status_should_not_be_shown_for_user_who_cannot_edit_others_posts() {
 		register_post_type( 'foo_pt' );
 		register_post_status(
@@ -313,7 +334,7 @@ class Tests_Query_PostStatus extends WP_UnitTestCase {
 			)
 		);
 
-		$this->assertEquals( array( $p ), wp_list_pluck( $q->posts, 'ID' ) );
+		$this->assertSame( array( $p ), wp_list_pluck( $q->posts, 'ID' ) );
 	}
 
 	public function test_single_post_with_nonpublic_and_private_status_should_not_be_shown_for_user_who_cannot_edit_others_posts() {
@@ -367,18 +388,47 @@ class Tests_Query_PostStatus extends WP_UnitTestCase {
 			)
 		);
 
-		$this->assertEquals( array( $p ), wp_list_pluck( $q->posts, 'ID' ) );
+		$this->assertSame( array( $p ), wp_list_pluck( $q->posts, 'ID' ) );
 	}
 
-	public function test_single_post_with_nonpublic_and_protected_status_should_not_be_shown_for_any_user() {
+	/**
+	 * @ticket 48653
+	 */
+	public function test_single_post_with_nonexisting_status_should_not_be_shown_for_user_who_cannot_edit_others_posts() {
 		register_post_type( 'foo_pt' );
-		register_post_status( 'foo_ps', array( 'public' => false ) );
+		register_post_status( 'foo_ps', array( 'public' => true ) );
+		$p = self::factory()->post->create(
+			array(
+				'post_status' => 'foo_ps',
+				'post_author' => self::$editor_user_id,
+			)
+		);
+		_unregister_post_status( 'foo_ps' );
+
+		wp_set_current_user( self::$author_user_id );
+
+		$q = new WP_Query(
+			array(
+				'p' => $p,
+			)
+		);
+
+		$this->assertEmpty( $q->posts );
+	}
+
+	/**
+	 * @ticket 48653
+	 */
+	public function test_single_post_with_nonexisting_status_should_be_shown_for_user_who_can_edit_others_posts() {
+		register_post_type( 'foo_pt' );
+		register_post_status( 'foo_ps', array( 'public' => true ) );
 		$p = self::factory()->post->create(
 			array(
 				'post_status' => 'foo_ps',
 				'post_author' => self::$author_user_id,
 			)
 		);
+		_unregister_post_status( 'foo_ps' );
 
 		wp_set_current_user( self::$editor_user_id );
 
@@ -388,7 +438,7 @@ class Tests_Query_PostStatus extends WP_UnitTestCase {
 			)
 		);
 
-		$this->assertEmpty( $q->posts );
+		$this->assertSame( array( $p ), wp_list_pluck( $q->posts, 'ID' ) );
 	}
 
 	/**
diff --git a/tests/query/results.php b/tests/query/results.php
index daa171efb9..eb801249ab 100644
--- a/tests/query/results.php
+++ b/tests/query/results.php
@@ -304,7 +304,7 @@ class Tests_Query_Results extends WP_UnitTestCase {
 	function test_query_default() {
 		$posts = $this->q->query( '' );
 
-		// the output should be the most recent 10 posts as listed here
+		// The output should be the most recent 10 posts as listed here.
 		$expected = array(
 			0 => 'tags-a-and-c',
 			1 => 'tags-b-and-c',
@@ -318,29 +318,29 @@ class Tests_Query_Results extends WP_UnitTestCase {
 			9 => 'embedded-video',
 		);
 
-		$this->assertEquals( $expected, wp_list_pluck( $posts, 'post_name' ) );
+		$this->assertSame( $expected, wp_list_pluck( $posts, 'post_name' ) );
 	}
 
 	function test_query_tag_a() {
 		$posts = $this->q->query( 'tag=tag-a' );
 
-		// there are 4 posts with Tag A
+		// There are 4 posts with Tag A.
 		$this->assertCount( 4, $posts );
-		$this->assertEquals( 'tags-a-and-c', $posts[0]->post_name );
-		$this->assertEquals( 'tags-a-and-b', $posts[1]->post_name );
-		$this->assertEquals( 'tag-a', $posts[2]->post_name );
-		$this->assertEquals( 'tags-a-b-c', $posts[3]->post_name );
+		$this->assertSame( 'tags-a-and-c', $posts[0]->post_name );
+		$this->assertSame( 'tags-a-and-b', $posts[1]->post_name );
+		$this->assertSame( 'tag-a', $posts[2]->post_name );
+		$this->assertSame( 'tags-a-b-c', $posts[3]->post_name );
 	}
 
 	function test_query_tag_b() {
 		$posts = $this->q->query( 'tag=tag-b' );
 
-		// there are 4 posts with Tag A
+		// There are 4 posts with Tag A.
 		$this->assertCount( 4, $posts );
-		$this->assertEquals( 'tags-b-and-c', $posts[0]->post_name );
-		$this->assertEquals( 'tags-a-and-b', $posts[1]->post_name );
-		$this->assertEquals( 'tag-b', $posts[2]->post_name );
-		$this->assertEquals( 'tags-a-b-c', $posts[3]->post_name );
+		$this->assertSame( 'tags-b-and-c', $posts[0]->post_name );
+		$this->assertSame( 'tags-a-and-b', $posts[1]->post_name );
+		$this->assertSame( 'tag-b', $posts[2]->post_name );
+		$this->assertSame( 'tags-a-b-c', $posts[3]->post_name );
 	}
 
 	/**
@@ -349,34 +349,34 @@ class Tests_Query_Results extends WP_UnitTestCase {
 	function test_query_tag_nun() {
 		$posts = $this->q->query( 'tag=tag-◊†' );
 
-		// there is 1 post with Tag ◊†
+		// There is 1 post with Tag ◊†.
 		$this->assertCount( 1, $posts );
-		$this->assertEquals( 'tag-%d7%a0', $posts[0]->post_name );
+		$this->assertSame( 'tag-%d7%a0', $posts[0]->post_name );
 	}
 
 	function test_query_tag_id() {
 		$tag   = tag_exists( 'tag-a' );
 		$posts = $this->q->query( 'tag_id=' . $tag['term_id'] );
 
-		// there are 4 posts with Tag A
+		// There are 4 posts with Tag A.
 		$this->assertCount( 4, $posts );
-		$this->assertEquals( 'tags-a-and-c', $posts[0]->post_name );
-		$this->assertEquals( 'tags-a-and-b', $posts[1]->post_name );
-		$this->assertEquals( 'tag-a', $posts[2]->post_name );
-		$this->assertEquals( 'tags-a-b-c', $posts[3]->post_name );
+		$this->assertSame( 'tags-a-and-c', $posts[0]->post_name );
+		$this->assertSame( 'tags-a-and-b', $posts[1]->post_name );
+		$this->assertSame( 'tag-a', $posts[2]->post_name );
+		$this->assertSame( 'tags-a-b-c', $posts[3]->post_name );
 	}
 
 	function test_query_tag_slug__in() {
 		$posts = $this->q->query( 'tag_slug__in[]=tag-b&tag_slug__in[]=tag-c' );
 
-		// there are 4 posts with either Tag B or Tag C
+		// There are 4 posts with either Tag B or Tag C.
 		$this->assertCount( 6, $posts );
-		$this->assertEquals( 'tags-a-and-c', $posts[0]->post_name );
-		$this->assertEquals( 'tags-b-and-c', $posts[1]->post_name );
-		$this->assertEquals( 'tags-a-and-b', $posts[2]->post_name );
-		$this->assertEquals( 'tag-c', $posts[3]->post_name );
-		$this->assertEquals( 'tag-b', $posts[4]->post_name );
-		$this->assertEquals( 'tags-a-b-c', $posts[5]->post_name );
+		$this->assertSame( 'tags-a-and-c', $posts[0]->post_name );
+		$this->assertSame( 'tags-b-and-c', $posts[1]->post_name );
+		$this->assertSame( 'tags-a-and-b', $posts[2]->post_name );
+		$this->assertSame( 'tag-c', $posts[3]->post_name );
+		$this->assertSame( 'tag-b', $posts[4]->post_name );
+		$this->assertSame( 'tags-a-b-c', $posts[5]->post_name );
 	}
 
 
@@ -385,22 +385,22 @@ class Tests_Query_Results extends WP_UnitTestCase {
 		$tag_b = tag_exists( 'tag-b' );
 		$posts = $this->q->query( 'tag__in[]=' . $tag_a['term_id'] . '&tag__in[]=' . $tag_b['term_id'] );
 
-		// there are 6 posts with either Tag A or Tag B
+		// There are 6 posts with either Tag A or Tag B.
 		$this->assertCount( 6, $posts );
-		$this->assertEquals( 'tags-a-and-c', $posts[0]->post_name );
-		$this->assertEquals( 'tags-b-and-c', $posts[1]->post_name );
-		$this->assertEquals( 'tags-a-and-b', $posts[2]->post_name );
-		$this->assertEquals( 'tag-b', $posts[3]->post_name );
-		$this->assertEquals( 'tag-a', $posts[4]->post_name );
-		$this->assertEquals( 'tags-a-b-c', $posts[5]->post_name );
+		$this->assertSame( 'tags-a-and-c', $posts[0]->post_name );
+		$this->assertSame( 'tags-b-and-c', $posts[1]->post_name );
+		$this->assertSame( 'tags-a-and-b', $posts[2]->post_name );
+		$this->assertSame( 'tag-b', $posts[3]->post_name );
+		$this->assertSame( 'tag-a', $posts[4]->post_name );
+		$this->assertSame( 'tags-a-b-c', $posts[5]->post_name );
 	}
 
 	function test_query_tag__not_in() {
 		$tag_a = tag_exists( 'tag-a' );
 		$posts = $this->q->query( 'tag__not_in[]=' . $tag_a['term_id'] );
 
-		// the most recent 10 posts with Tag A excluded
-		// (note the different between this and test_query_default)
+		// The most recent 10 posts with Tag A excluded
+		// (note the different between this and test_query_default).
 		$expected = array(
 			0 => 'tags-b-and-c',
 			1 => 'tag-c',
@@ -414,7 +414,7 @@ class Tests_Query_Results extends WP_UnitTestCase {
 			9 => 'many-trackbacks',
 		);
 
-		$this->assertEquals( $expected, wp_list_pluck( $posts, 'post_name' ) );
+		$this->assertSame( $expected, wp_list_pluck( $posts, 'post_name' ) );
 	}
 
 	function test_query_tag__in_but__not_in() {
@@ -422,10 +422,10 @@ class Tests_Query_Results extends WP_UnitTestCase {
 		$tag_b = tag_exists( 'tag-b' );
 		$posts = $this->q->query( 'tag__in[]=' . $tag_a['term_id'] . '&tag__not_in[]=' . $tag_b['term_id'] );
 
-		// there are 4 posts with Tag A, only 2 when we exclude Tag B
+		// There are 4 posts with Tag A, only 2 when we exclude Tag B.
 		$this->assertCount( 2, $posts );
-		$this->assertEquals( 'tags-a-and-c', $posts[0]->post_name );
-		$this->assertEquals( 'tag-a', $posts[1]->post_name );
+		$this->assertSame( 'tags-a-and-c', $posts[0]->post_name );
+		$this->assertSame( 'tag-a', $posts[1]->post_name );
 	}
 
 
@@ -433,24 +433,24 @@ class Tests_Query_Results extends WP_UnitTestCase {
 	function test_query_category_name() {
 		$posts = $this->q->query( 'category_name=cat-a' );
 
-		// there are 4 posts with Cat A, we'll check for them by name
+		// There are 4 posts with Cat A, we'll check for them by name.
 		$this->assertCount( 4, $posts );
-		$this->assertEquals( 'cat-a', $posts[0]->post_name );
-		$this->assertEquals( 'cats-a-and-c', $posts[1]->post_name );
-		$this->assertEquals( 'cats-a-and-b', $posts[2]->post_name );
-		$this->assertEquals( 'cats-a-b-c', $posts[3]->post_name );
+		$this->assertSame( 'cat-a', $posts[0]->post_name );
+		$this->assertSame( 'cats-a-and-c', $posts[1]->post_name );
+		$this->assertSame( 'cats-a-and-b', $posts[2]->post_name );
+		$this->assertSame( 'cats-a-b-c', $posts[3]->post_name );
 	}
 
 	function test_query_cat() {
 		$cat   = category_exists( 'cat-b' );
 		$posts = $this->q->query( "cat=$cat" );
 
-		// there are 4 posts with Cat B
+		// There are 4 posts with Cat B.
 		$this->assertCount( 4, $posts );
-		$this->assertEquals( 'cat-b', $posts[0]->post_name );
-		$this->assertEquals( 'cats-b-and-c', $posts[1]->post_name );
-		$this->assertEquals( 'cats-a-and-b', $posts[2]->post_name );
-		$this->assertEquals( 'cats-a-b-c', $posts[3]->post_name );
+		$this->assertSame( 'cat-b', $posts[0]->post_name );
+		$this->assertSame( 'cats-b-and-c', $posts[1]->post_name );
+		$this->assertSame( 'cats-a-and-b', $posts[2]->post_name );
+		$this->assertSame( 'cats-a-b-c', $posts[3]->post_name );
 	}
 
 	function test_query_posts_per_page() {
@@ -465,7 +465,7 @@ class Tests_Query_Results extends WP_UnitTestCase {
 		);
 
 		$this->assertCount( 5, $posts );
-		$this->assertEquals( $expected, wp_list_pluck( $posts, 'post_name' ) );
+		$this->assertSame( $expected, wp_list_pluck( $posts, 'post_name' ) );
 	}
 
 	function test_query_offset() {
@@ -485,7 +485,7 @@ class Tests_Query_Results extends WP_UnitTestCase {
 		);
 
 		$this->assertCount( 10, $posts );
-		$this->assertEquals( $expected, wp_list_pluck( $posts, 'post_name' ) );
+		$this->assertSame( $expected, wp_list_pluck( $posts, 'post_name' ) );
 	}
 
 	function test_query_paged() {
@@ -506,7 +506,7 @@ class Tests_Query_Results extends WP_UnitTestCase {
 
 		$this->assertCount( 10, $posts );
 		$this->assertTrue( $this->q->is_paged() );
-		$this->assertEquals( $expected, wp_list_pluck( $posts, 'post_name' ) );
+		$this->assertSame( $expected, wp_list_pluck( $posts, 'post_name' ) );
 	}
 
 	function test_query_paged_and_posts_per_page() {
@@ -521,14 +521,14 @@ class Tests_Query_Results extends WP_UnitTestCase {
 
 		$this->assertCount( 4, $posts );
 		$this->assertTrue( $this->q->is_paged() );
-		$this->assertEquals( $expected, wp_list_pluck( $posts, 'post_name' ) );
+		$this->assertSame( $expected, wp_list_pluck( $posts, 'post_name' ) );
 	}
 
 	/**
 	 * @ticket 11056
 	 */
 	function test_query_post_parent__in() {
-		// Query for first parent's children
+		// Query for first parent's children.
 		$posts = $this->q->query(
 			array(
 				'post_parent__in' => array( self::$parent_one ),
@@ -537,7 +537,7 @@ class Tests_Query_Results extends WP_UnitTestCase {
 			)
 		);
 
-		$this->assertEquals(
+		$this->assertSame(
 			array(
 				'child-one',
 				'child-two',
@@ -545,7 +545,7 @@ class Tests_Query_Results extends WP_UnitTestCase {
 			wp_list_pluck( $posts, 'post_title' )
 		);
 
-		// Second parent's children
+		// Second parent's children.
 		$posts = $this->q->query(
 			array(
 				'post_parent__in' => array( self::$parent_two ),
@@ -554,7 +554,7 @@ class Tests_Query_Results extends WP_UnitTestCase {
 			)
 		);
 
-		$this->assertEquals(
+		$this->assertSame(
 			array(
 				'child-three',
 				'child-four',
@@ -562,7 +562,7 @@ class Tests_Query_Results extends WP_UnitTestCase {
 			wp_list_pluck( $posts, 'post_title' )
 		);
 
-		// Both first and second parent's children
+		// Both first and second parent's children.
 		$posts = $this->q->query(
 			array(
 				'post_parent__in' => array( self::$parent_one, self::$parent_two ),
@@ -571,7 +571,7 @@ class Tests_Query_Results extends WP_UnitTestCase {
 			)
 		);
 
-		$this->assertEquals(
+		$this->assertSame(
 			array(
 				'child-one',
 				'child-two',
@@ -581,14 +581,14 @@ class Tests_Query_Results extends WP_UnitTestCase {
 			wp_list_pluck( $posts, 'post_title' )
 		);
 
-		// Third parent's children
+		// Third parent's children.
 		$posts = $this->q->query(
 			array(
 				'post_parent__in' => array( self::$parent_three ),
 			)
 		);
 
-		$this->assertEquals( array(), wp_list_pluck( $posts, 'post_title' ) );
+		$this->assertSame( array(), wp_list_pluck( $posts, 'post_title' ) );
 	}
 
 	/**
@@ -603,7 +603,7 @@ class Tests_Query_Results extends WP_UnitTestCase {
 			)
 		);
 
-		$this->assertEquals(
+		$this->assertSame(
 			array(
 				'child-three',
 				'child-four',
@@ -629,8 +629,8 @@ class Tests_Query_Results extends WP_UnitTestCase {
 			)
 		);
 
-		// order=desc does not influence the order of returned results (returns same order as order=asc)
-		$this->assertEquals( $expected_returned_array, wp_list_pluck( $posts, 'post_title' ) );
+		// 'order=desc' does not influence the order of returned results (returns same order as 'order=asc').
+		$this->assertSame( $expected_returned_array, wp_list_pluck( $posts, 'post_title' ) );
 	}
 
 	/**
@@ -648,7 +648,7 @@ class Tests_Query_Results extends WP_UnitTestCase {
 			)
 		);
 
-		// Expect post ids in the same order as post__in array when no 'order' param is passed in
+		// Expect post IDs in the same order as post__in array when no 'order' param is passed in.
 		$this->assertSame( $expected_returned_array, $q->posts );
 	}
 
@@ -668,7 +668,7 @@ class Tests_Query_Results extends WP_UnitTestCase {
 			)
 		);
 
-		// Expect post ids in the same order as post__in array when order=asc is passed in
+		// Expect post IDs in the same order as post__in array when order=asc is passed in.
 		$this->assertSame( $expected_returned_array, $q->posts );
 	}
 
@@ -688,8 +688,8 @@ class Tests_Query_Results extends WP_UnitTestCase {
 			)
 		);
 
-		// Note that results are returned in the order specified in the post__in array
-		// Order=desc does not have an effect on the order of returned results
+		// Note that results are returned in the order specified in the post__in array.
+		// 'order=desc' does not influence the order of returned results.
 		$this->assertSame( $expected_returned_array, $q->posts );
 	}
 
@@ -724,7 +724,7 @@ class Tests_Query_Results extends WP_UnitTestCase {
 			)
 		);
 
-		// order=desc does not influence the order of returned results (returns same order as order=asc)
+		// 'order=desc' does not influence the order of returned results (returns same order as 'order=asc').
 		$this->assertSame( $post_name__in_array, array_unique( wp_list_pluck( $q->posts, 'post_title' ) ) );
 	}
 
diff --git a/tests/query/search.php b/tests/query/search.php
index 84ea96030f..c1c74c8240 100644
--- a/tests/query/search.php
+++ b/tests/query/search.php
@@ -50,14 +50,14 @@ class Tests_Query_Search extends WP_UnitTestCase {
 		);
 
 		$posts = $this->get_search_results( 'About' );
-		$this->assertEquals( $post_id, reset( $posts )->ID );
+		$this->assertSame( $post_id, reset( $posts )->ID );
 	}
 
 	function test_search_terms_query_var() {
 		$terms = 'This is a search term';
 		$query = new WP_Query( array( 's' => 'This is a search term' ) );
 		$this->assertNotEquals( explode( ' ', $terms ), $query->get( 'search_terms' ) );
-		$this->assertEquals( array( 'search', 'term' ), $query->get( 'search_terms' ) );
+		$this->assertSame( array( 'search', 'term' ), $query->get( 'search_terms' ) );
 	}
 
 	function test_filter_stopwords() {
@@ -67,7 +67,7 @@ class Tests_Query_Search extends WP_UnitTestCase {
 		remove_filter( 'wp_search_stopwords', array( $this, 'filter_wp_search_stopwords' ) );
 
 		$this->assertNotEquals( array( 'search', 'term' ), $query->get( 'search_terms' ) );
-		$this->assertEquals( array( 'This', 'is', 'search', 'term' ), $query->get( 'search_terms' ) );
+		$this->assertSame( array( 'This', 'is', 'search', 'term' ), $query->get( 'search_terms' ) );
 	}
 
 	function filter_wp_search_stopwords() {
@@ -80,7 +80,7 @@ class Tests_Query_Search extends WP_UnitTestCase {
 	function test_disable_search_exclusion_prefix() {
 		$title = '-HYPHENATION_TEST';
 
-		// Create a post with a title which starts with a hyphen
+		// Create a post with a title which starts with a hyphen.
 		$post_id = self::factory()->post->create(
 			array(
 				'post_content' => $title,
@@ -88,14 +88,14 @@ class Tests_Query_Search extends WP_UnitTestCase {
 			)
 		);
 
-		// By default, we can use the hyphen prefix to exclude results
-		$this->assertEquals( array(), $this->get_search_results( $title ) );
+		// By default, we can use the hyphen prefix to exclude results.
+		$this->assertSame( array(), $this->get_search_results( $title ) );
 
-		// After we disable the feature using the filter, we should get the result
+		// After we disable the feature using the filter, we should get the result.
 		add_filter( 'wp_query_search_exclusion_prefix', '__return_false' );
 		$result = $this->get_search_results( $title );
 		$post   = array_pop( $result );
-		$this->assertEquals( $post->ID, $post_id );
+		$this->assertSame( $post->ID, $post_id );
 		remove_filter( 'wp_query_search_exclusion_prefix', '__return_false' );
 	}
 
@@ -116,13 +116,13 @@ class Tests_Query_Search extends WP_UnitTestCase {
 		// By default, we should get the result.
 		$result = $this->get_search_results( $title );
 		$post   = array_pop( $result );
-		$this->assertEquals( $post->ID, $post_id );
+		$this->assertSame( $post->ID, $post_id );
 
 		// After we change the prefix, the result should be excluded.
 		add_filter( 'wp_query_search_exclusion_prefix', array( $this, 'filter_search_exclusion_prefix_octothorpe' ) );
 		$found = $this->get_search_results( $title );
 		remove_filter( 'wp_query_search_exclusion_prefix', array( $this, 'filter_search_exclusion_prefix_octothorpe' ) );
-		$this->assertEquals( array(), $found );
+		$this->assertSame( array(), $found );
 	}
 
 	function filter_search_exclusion_prefix_octothorpe() {
@@ -153,7 +153,7 @@ class Tests_Query_Search extends WP_UnitTestCase {
 			)
 		);
 
-		$this->assertEqualSets( array( $p2 ), $q->posts );
+		$this->assertSameSets( array( $p2 ), $q->posts );
 	}
 
 	/**
@@ -180,7 +180,7 @@ class Tests_Query_Search extends WP_UnitTestCase {
 			)
 		);
 
-		$this->assertEqualSets( array( $p2 ), $q->posts );
+		$this->assertSameSets( array( $p2 ), $q->posts );
 	}
 
 	/**
@@ -213,7 +213,7 @@ class Tests_Query_Search extends WP_UnitTestCase {
 			)
 		);
 
-		$this->assertEqualSets( array( $p3 ), $q->posts );
+		$this->assertSameSets( array( $p3 ), $q->posts );
 	}
 
 	/**
@@ -246,7 +246,7 @@ class Tests_Query_Search extends WP_UnitTestCase {
 			)
 		);
 
-		$this->assertEqualSets( array( $p1, $p3 ), $q->posts );
+		$this->assertSameSets( array( $p1, $p3 ), $q->posts );
 	}
 
 	/**
@@ -292,7 +292,7 @@ class Tests_Query_Search extends WP_UnitTestCase {
 			)
 		);
 
-		$this->assertEqualSets( array( $p2 ), $q->posts );
+		$this->assertSameSets( array( $p2 ), $q->posts );
 	}
 
 	/**
@@ -345,7 +345,7 @@ class Tests_Query_Search extends WP_UnitTestCase {
 			)
 		);
 
-		$this->assertEqualSets( array( $p1, $p3 ), $q->posts );
+		$this->assertSameSets( array( $p1, $p3 ), $q->posts );
 
 		$q = new WP_Query(
 			array(
@@ -354,7 +354,7 @@ class Tests_Query_Search extends WP_UnitTestCase {
 			)
 		);
 
-		$this->assertEqualSets( array( $p1, $p2 ), $q->posts );
+		$this->assertSameSets( array( $p1, $p2 ), $q->posts );
 
 		$q = new WP_Query(
 			array(
@@ -363,7 +363,7 @@ class Tests_Query_Search extends WP_UnitTestCase {
 			)
 		);
 
-		$this->assertEqualSets( array( $p2 ), $q->posts );
+		$this->assertSameSets( array( $p2 ), $q->posts );
 	}
 
 	/**
diff --git a/tests/query/setupPostdata.php b/tests/query/setupPostdata.php
index 38d473065f..234bfdfa4d 100644
--- a/tests/query/setupPostdata.php
+++ b/tests/query/setupPostdata.php
@@ -165,7 +165,7 @@ class Tests_Query_SetupPostdata extends WP_UnitTestCase {
 
 		$this->assertSame( 0, $GLOBALS['multipage'] );
 		$this->assertSame( 1, $GLOBALS['numpages'] );
-		$this->assertEquals( array( 'Page 0' ), $GLOBALS['pages'] );
+		$this->assertSame( array( 'Page 0' ), $GLOBALS['pages'] );
 	}
 
 	public function test_multi_page() {
@@ -178,7 +178,7 @@ class Tests_Query_SetupPostdata extends WP_UnitTestCase {
 
 		$this->assertSame( 1, $GLOBALS['multipage'] );
 		$this->assertSame( 4, $GLOBALS['numpages'] );
-		$this->assertEquals( array( 'Page 0', 'Page 1', 'Page 2', 'Page 3' ), $GLOBALS['pages'] );
+		$this->assertSame( array( 'Page 0', 'Page 1', 'Page 2', 'Page 3' ), $GLOBALS['pages'] );
 	}
 
 	/**
@@ -194,7 +194,7 @@ class Tests_Query_SetupPostdata extends WP_UnitTestCase {
 
 		$this->assertSame( 1, $GLOBALS['multipage'] );
 		$this->assertSame( 3, $GLOBALS['numpages'] );
-		$this->assertEquals( array( 'Page 1', 'Page 2', 'Page 3' ), $GLOBALS['pages'] );
+		$this->assertSame( array( 'Page 1', 'Page 2', 'Page 3' ), $GLOBALS['pages'] );
 	}
 
 	public function test_trim_nextpage_linebreaks() {
@@ -205,7 +205,7 @@ class Tests_Query_SetupPostdata extends WP_UnitTestCase {
 		);
 		setup_postdata( $post );
 
-		$this->assertEquals( array( 'Page 0', "Page 1\nhas a line break", 'Page 2', "\nPage 3" ), $GLOBALS['pages'] );
+		$this->assertSame( array( 'Page 0', "Page 1\nhas a line break", 'Page 2', "\nPage 3" ), $GLOBALS['pages'] );
 	}
 
 	/**
@@ -398,25 +398,22 @@ class Tests_Query_SetupPostdata extends WP_UnitTestCase {
 	/**
 	 * @ticket 24330
 	 *
-	 * setup_postdata( $a_post ) followed by the_content() in a loop that does not update
-	 * global $post should use the content of $a_post rather then the global post.
+	 * setup_postdata( $a_post ) followed by the_content() without updating global $post
+	 * should use the content of $a_post rather then the global post.
 	 */
-	function test_setup_postdata_loop() {
+	function test_setup_postdata_with_the_content() {
 		$post_id                   = self::factory()->post->create( array( 'post_content' => 'global post' ) );
 		$GLOBALS['post']           = get_post( $post_id );
 		$GLOBALS['wp_query']->post = $GLOBALS['post'];
 
-		$ids = self::factory()->post->create_many( 5 );
-		foreach ( $ids as $id ) {
-			$page = get_post( $id );
-			if ( $page ) {
-				setup_postdata( $page );
-				$content = get_echo( 'the_content', array() );
-				$this->assertEquals( $post_id, $GLOBALS['post']->ID );
-				$this->assertNotEquals( '<p>global post</p>', strip_ws( $content ) );
-				wp_reset_postdata();
-			}
-		}
+		$a_post_id = self::factory()->post->create();
+		$a_post    = get_post( $a_post_id );
+
+		setup_postdata( $a_post );
+		$content = get_echo( 'the_content' );
+		$this->assertSame( $post_id, $GLOBALS['post']->ID );
+		$this->assertNotEquals( '<p>global post</p>', strip_ws( $content ) );
+		wp_reset_postdata();
 	}
 
 	/**
@@ -430,7 +427,7 @@ class Tests_Query_SetupPostdata extends WP_UnitTestCase {
 
 		setup_postdata( $post );
 
-		$this->assertEquals( $GLOBALS['pages'], $this->pages_global );
+		$this->assertSame( $GLOBALS['pages'], $this->pages_global );
 	}
 
 	/**
diff --git a/tests/query/stickies.php b/tests/query/stickies.php
index 01e7405e6a..2dc285ade3 100644
--- a/tests/query/stickies.php
+++ b/tests/query/stickies.php
@@ -40,7 +40,7 @@ class Tests_Query_Stickies extends WP_UnitTestCase {
 			self::$posts[2],
 		);
 
-		$this->assertEquals( $expected, $q->posts );
+		$this->assertSame( $expected, $q->posts );
 	}
 
 	public function test_stickies_should_be_included_when_is_home_is_true() {
@@ -48,9 +48,9 @@ class Tests_Query_Stickies extends WP_UnitTestCase {
 
 		$q = $GLOBALS['wp_query'];
 
-		$this->assertEquals( self::$posts[2], $q->posts[0]->ID );
-		$this->assertEquals( self::$posts[8], $q->posts[1]->ID );
-		$this->assertEquals( self::$posts[14], $q->posts[2]->ID );
+		$this->assertSame( self::$posts[2], $q->posts[0]->ID );
+		$this->assertSame( self::$posts[8], $q->posts[1]->ID );
+		$this->assertSame( self::$posts[14], $q->posts[2]->ID );
 	}
 
 	public function test_stickies_should_not_be_included_on_pages_other_than_1() {
@@ -82,7 +82,7 @@ class Tests_Query_Stickies extends WP_UnitTestCase {
 			self::$posts[9],
 		);
 
-		$this->assertEquals( $expected, wp_list_pluck( $q->posts, 'ID' ) );
+		$this->assertSame( $expected, wp_list_pluck( $q->posts, 'ID' ) );
 	}
 
 	public function test_stickies_should_obey_post__not_in() {
@@ -92,8 +92,8 @@ class Tests_Query_Stickies extends WP_UnitTestCase {
 
 		$q = $GLOBALS['wp_query'];
 
-		$this->assertEquals( self::$posts[2], $q->posts[0]->ID );
-		$this->assertEquals( self::$posts[14], $q->posts[1]->ID );
+		$this->assertSame( self::$posts[2], $q->posts[0]->ID );
+		$this->assertSame( self::$posts[14], $q->posts[1]->ID );
 		$this->assertNotContains( self::$posts[8], wp_list_pluck( $q->posts, 'ID' ) );
 	}
 
diff --git a/tests/query/taxQuery.php b/tests/query/taxQuery.php
index 42e73d779e..0fe8a3ee77 100644
--- a/tests/query/taxQuery.php
+++ b/tests/query/taxQuery.php
@@ -33,7 +33,7 @@ class Tests_Query_TaxQuery extends WP_UnitTestCase {
 			)
 		);
 
-		$this->assertEquals( array( $p1 ), $q->posts );
+		$this->assertSame( array( $p1 ), $q->posts );
 	}
 
 	public function test_tax_query_single_query_single_term_field_name() {
@@ -64,7 +64,7 @@ class Tests_Query_TaxQuery extends WP_UnitTestCase {
 			)
 		);
 
-		$this->assertEquals( array( $p1 ), $q->posts );
+		$this->assertSame( array( $p1 ), $q->posts );
 	}
 
 	/**
@@ -98,7 +98,7 @@ class Tests_Query_TaxQuery extends WP_UnitTestCase {
 			)
 		);
 
-		$this->assertEquals( array( $p1 ), $q->posts );
+		$this->assertSame( array( $p1 ), $q->posts );
 	}
 
 	public function test_tax_query_single_query_single_term_field_term_taxonomy_id() {
@@ -129,7 +129,7 @@ class Tests_Query_TaxQuery extends WP_UnitTestCase {
 			)
 		);
 
-		$this->assertEquals( array( $p1 ), $q->posts );
+		$this->assertSame( array( $p1 ), $q->posts );
 	}
 
 	public function test_tax_query_single_query_single_term_field_term_id() {
@@ -160,7 +160,7 @@ class Tests_Query_TaxQuery extends WP_UnitTestCase {
 			)
 		);
 
-		$this->assertEquals( array( $p1 ), $q->posts );
+		$this->assertSame( array( $p1 ), $q->posts );
 	}
 
 	public function test_tax_query_single_query_single_term_operator_in() {
@@ -192,7 +192,7 @@ class Tests_Query_TaxQuery extends WP_UnitTestCase {
 			)
 		);
 
-		$this->assertEquals( array( $p1 ), $q->posts );
+		$this->assertSame( array( $p1 ), $q->posts );
 	}
 
 	public function test_tax_query_single_query_single_term_operator_not_in() {
@@ -224,7 +224,7 @@ class Tests_Query_TaxQuery extends WP_UnitTestCase {
 			)
 		);
 
-		$this->assertEquals( array( $p2 ), $q->posts );
+		$this->assertSame( array( $p2 ), $q->posts );
 	}
 
 	public function test_tax_query_single_query_single_term_operator_and() {
@@ -256,7 +256,7 @@ class Tests_Query_TaxQuery extends WP_UnitTestCase {
 			)
 		);
 
-		$this->assertEquals( array( $p1 ), $q->posts );
+		$this->assertSame( array( $p1 ), $q->posts );
 	}
 
 	public function test_tax_query_single_query_multiple_terms_operator_in() {
@@ -297,7 +297,7 @@ class Tests_Query_TaxQuery extends WP_UnitTestCase {
 			)
 		);
 
-		$this->assertEqualSets( array( $p1, $p2 ), $q->posts );
+		$this->assertSameSets( array( $p1, $p2 ), $q->posts );
 	}
 
 	public function test_tax_query_single_query_multiple_terms_operator_not_in() {
@@ -338,7 +338,7 @@ class Tests_Query_TaxQuery extends WP_UnitTestCase {
 			)
 		);
 
-		$this->assertEquals( array( $p3 ), $q->posts );
+		$this->assertSame( array( $p3 ), $q->posts );
 	}
 
 	/**
@@ -389,7 +389,7 @@ class Tests_Query_TaxQuery extends WP_UnitTestCase {
 			)
 		);
 
-		$this->assertEquals( array( $p3 ), $q->posts );
+		$this->assertSame( array( $p3 ), $q->posts );
 	}
 
 	public function test_tax_query_single_query_multiple_terms_operator_and() {
@@ -430,7 +430,7 @@ class Tests_Query_TaxQuery extends WP_UnitTestCase {
 			)
 		);
 
-		$this->assertEquals( array( $p2 ), $q->posts );
+		$this->assertSame( array( $p2 ), $q->posts );
 	}
 
 	/**
@@ -464,7 +464,7 @@ class Tests_Query_TaxQuery extends WP_UnitTestCase {
 			)
 		);
 
-		$this->assertEqualSets( array( $p1, $p3 ), $q->posts );
+		$this->assertSameSets( array( $p1, $p3 ), $q->posts );
 	}
 
 	/**
@@ -511,7 +511,7 @@ class Tests_Query_TaxQuery extends WP_UnitTestCase {
 		unregister_taxonomy( 'wptests_tax1' );
 		unregister_taxonomy( 'wptests_tax2' );
 
-		$this->assertEqualSets( array( $p1, $p3, $p4 ), $q->posts );
+		$this->assertSameSets( array( $p1, $p3, $p4 ), $q->posts );
 	}
 
 	/**
@@ -545,7 +545,7 @@ class Tests_Query_TaxQuery extends WP_UnitTestCase {
 			)
 		);
 
-		$this->assertEqualSets( array( $p2 ), $q->posts );
+		$this->assertSameSets( array( $p2 ), $q->posts );
 	}
 
 	/**
@@ -580,7 +580,7 @@ class Tests_Query_TaxQuery extends WP_UnitTestCase {
 			)
 		);
 
-		$this->assertEqualSets( array( $p2 ), $q->posts );
+		$this->assertSameSets( array( $p2 ), $q->posts );
 	}
 
 	/**
@@ -659,7 +659,7 @@ class Tests_Query_TaxQuery extends WP_UnitTestCase {
 			)
 		);
 
-		$this->assertEquals( array( $p2 ), $q->posts );
+		$this->assertSame( array( $p2 ), $q->posts );
 	}
 
 	public function test_tax_query_multiple_queries_relation_or() {
@@ -705,7 +705,7 @@ class Tests_Query_TaxQuery extends WP_UnitTestCase {
 			)
 		);
 
-		$this->assertEqualSets( array( $p1, $p2 ), $q->posts );
+		$this->assertSameSets( array( $p1, $p2 ), $q->posts );
 	}
 
 	public function test_tax_query_multiple_queries_different_taxonomies() {
@@ -751,7 +751,7 @@ class Tests_Query_TaxQuery extends WP_UnitTestCase {
 			)
 		);
 
-		$this->assertEqualSets( array( $p1, $p2 ), $q->posts );
+		$this->assertSameSets( array( $p1, $p2 ), $q->posts );
 	}
 
 	/**
@@ -833,7 +833,7 @@ class Tests_Query_TaxQuery extends WP_UnitTestCase {
 		_unregister_taxonomy( 'foo' );
 		_unregister_taxonomy( 'bar' );
 
-		$this->assertEqualSets( array( $p1, $p2 ), $q->posts );
+		$this->assertSameSets( array( $p1, $p2 ), $q->posts );
 	}
 
 	/**
@@ -907,7 +907,7 @@ class Tests_Query_TaxQuery extends WP_UnitTestCase {
 		_unregister_taxonomy( 'foo' );
 		_unregister_taxonomy( 'bar' );
 
-		$this->assertEqualSets( array( $p1, $p2 ), $q->posts );
+		$this->assertSameSets( array( $p1, $p2 ), $q->posts );
 	}
 
 	/**
@@ -990,15 +990,15 @@ class Tests_Query_TaxQuery extends WP_UnitTestCase {
 		_unregister_taxonomy( 'foo' );
 		_unregister_taxonomy( 'bar' );
 
-		$this->assertEqualSets( array( $p1, $p2, $p3 ), $q->posts );
+		$this->assertSameSets( array( $p1, $p2, $p3 ), $q->posts );
 	}
 
 	/**
+	 * An empty tax query should return an empty array, not all posts.
+	 *
 	 * @ticket 20604
 	 */
 	public function test_tax_query_relation_or_both_clauses_empty_terms() {
-		// An empty tax query should return an empty array, not all posts.
-
 		self::factory()->post->create_many( 2 );
 
 		$query = new WP_Query(
@@ -1025,15 +1025,15 @@ class Tests_Query_TaxQuery extends WP_UnitTestCase {
 		);
 
 		$posts = $query->get_posts();
-		$this->assertEquals( 0, count( $posts ) );
+		$this->assertSame( 0, count( $posts ) );
 	}
 
 	/**
+	 * An empty tax query should return an empty array, not all posts.
+	 *
 	 * @ticket 20604
 	 */
 	public function test_tax_query_relation_or_one_clause_empty_terms() {
-		// An empty tax query should return an empty array, not all posts.
-
 		self::factory()->post->create_many( 2 );
 
 		$query = new WP_Query(
@@ -1060,7 +1060,7 @@ class Tests_Query_TaxQuery extends WP_UnitTestCase {
 		);
 
 		$posts = $query->get_posts();
-		$this->assertEquals( 0, count( $posts ) );
+		$this->assertSame( 0, count( $posts ) );
 	}
 
 	public function test_tax_query_include_children() {
@@ -1112,7 +1112,7 @@ class Tests_Query_TaxQuery extends WP_UnitTestCase {
 			)
 		);
 
-		$this->assertEquals( 4, count( $posts ) );
+		$this->assertSame( 4, count( $posts ) );
 
 		$posts = get_posts(
 			array(
@@ -1130,7 +1130,7 @@ class Tests_Query_TaxQuery extends WP_UnitTestCase {
 			)
 		);
 
-		$this->assertEquals( 1, count( $posts ) );
+		$this->assertSame( 1, count( $posts ) );
 
 		$posts = get_posts(
 			array(
@@ -1147,7 +1147,7 @@ class Tests_Query_TaxQuery extends WP_UnitTestCase {
 			)
 		);
 
-		$this->assertEquals( 3, count( $posts ) );
+		$this->assertSame( 3, count( $posts ) );
 
 		$posts = get_posts(
 			array(
@@ -1165,7 +1165,7 @@ class Tests_Query_TaxQuery extends WP_UnitTestCase {
 			)
 		);
 
-		$this->assertEquals( 1, count( $posts ) );
+		$this->assertSame( 1, count( $posts ) );
 
 		$posts = get_posts(
 			array(
@@ -1182,7 +1182,7 @@ class Tests_Query_TaxQuery extends WP_UnitTestCase {
 			)
 		);
 
-		$this->assertEquals( 1, count( $posts ) );
+		$this->assertSame( 1, count( $posts ) );
 
 		$posts = get_posts(
 			array(
@@ -1200,7 +1200,7 @@ class Tests_Query_TaxQuery extends WP_UnitTestCase {
 			)
 		);
 
-		$this->assertEquals( 1, count( $posts ) );
+		$this->assertSame( 1, count( $posts ) );
 	}
 
 	public function test_tax_query_taxonomy_with_attachments() {
@@ -1240,7 +1240,7 @@ class Tests_Query_TaxQuery extends WP_UnitTestCase {
 			)
 		);
 
-		$this->assertEquals( array( $image_id ), $posts );
+		$this->assertSame( array( $image_id ), $posts );
 	}
 
 	public function test_tax_query_no_taxonomy() {
@@ -1301,12 +1301,12 @@ class Tests_Query_TaxQuery extends WP_UnitTestCase {
 		$cats = array();
 		$tags = array();
 
-		// need term_taxonomy_ids in addition to term_ids, so no factory
+		// Need term_taxonomy_ids in addition to term_ids, so no factory.
 		for ( $i = 0; $i < 5; $i++ ) {
 			$cats[ $i ] = wp_insert_term( 'category-' . $i, 'category' );
 			$tags[ $i ] = wp_insert_term( 'tag-' . $i, 'post_tag' );
 
-			// post 0 gets all terms
+			// Post 0 gets all terms.
 			wp_set_object_terms( $posts[0], array( $cats[ $i ]['term_id'] ), 'category', true );
 			wp_set_object_terms( $posts[0], array( $tags[ $i ]['term_id'] ), 'post_tag', true );
 		}
@@ -1345,7 +1345,7 @@ class Tests_Query_TaxQuery extends WP_UnitTestCase {
 			)
 		);
 
-		$this->assertEquals( array( $posts[0], $posts[1], $posts[2] ), $results1, 'Relation: OR; Operator: AND' );
+		$this->assertSame( array( $posts[0], $posts[1], $posts[2] ), $results1, 'Relation: OR; Operator: AND' );
 
 		$results2 = $q->query(
 			array(
@@ -1372,7 +1372,7 @@ class Tests_Query_TaxQuery extends WP_UnitTestCase {
 			)
 		);
 
-		$this->assertEquals( array( $posts[0], $posts[3] ), $results2, 'Relation: AND; Operator: IN' );
+		$this->assertSame( array( $posts[0], $posts[3] ), $results2, 'Relation: AND; Operator: IN' );
 	}
 
 	/**
@@ -1394,13 +1394,13 @@ class Tests_Query_TaxQuery extends WP_UnitTestCase {
 		$q = new WP_Query(
 			array(
 				'tax_query' => array(
-					// Empty terms mean that this one should be skipped
+					// Empty terms mean that this one should be skipped.
 					array(
 						'taxonomy' => 'bar',
 						'terms'    => array(),
 					),
 
-					// Category and post tags should be skipped
+					// Category and post tags should be skipped.
 					array(
 						'taxonomy' => 'category',
 						'terms'    => array( $c ),
@@ -1493,7 +1493,7 @@ class Tests_Query_TaxQuery extends WP_UnitTestCase {
 			)
 		);
 
-		$this->assertEquals( $t, $q->get( 'term_id' ) );
+		$this->assertSame( $t, $q->get( 'term_id' ) );
 
 		_unregister_taxonomy( 'foo' );
 	}
@@ -1518,19 +1518,19 @@ class Tests_Query_TaxQuery extends WP_UnitTestCase {
 		$q = new WP_Query(
 			array(
 				'tax_query' => array(
-					// Non-category should be skipped
+					// Non-category should be skipped.
 					array(
 						'taxonomy' => 'foo',
 						'terms'    => array( $t ),
 					),
 
-					// Empty terms mean that this one should be skipped
+					// Empty terms mean that this one should be skipped.
 					array(
 						'taxonomy' => 'category',
 						'terms'    => array(),
 					),
 
-					// Category and post tags should be skipped
+					// Category and post tags should be skipped.
 					array(
 						'taxonomy' => 'category',
 						'terms'    => array( $c ),
@@ -1539,8 +1539,8 @@ class Tests_Query_TaxQuery extends WP_UnitTestCase {
 			)
 		);
 
-		$this->assertEquals( $c, $q->get( 'cat' ) );
-		$this->assertEquals( 'bar', $q->get( 'category_name' ) );
+		$this->assertSame( $c, $q->get( 'cat' ) );
+		$this->assertSame( 'bar', $q->get( 'category_name' ) );
 
 		_unregister_taxonomy( 'foo' );
 	}
@@ -1565,19 +1565,19 @@ class Tests_Query_TaxQuery extends WP_UnitTestCase {
 		$q = new WP_Query(
 			array(
 				'tax_query' => array(
-					// Non-tag should be skipped
+					// Non-tag should be skipped.
 					array(
 						'taxonomy' => 'foo',
 						'terms'    => array( $t ),
 					),
 
-					// Empty terms mean that this one should be skipped
+					// Empty terms mean that this one should be skipped.
 					array(
 						'taxonomy' => 'post_tag',
 						'terms'    => array(),
 					),
 
-					// Category and post tags should be skipped
+					// Category and post tags should be skipped.
 					array(
 						'taxonomy' => 'post_tag',
 						'terms'    => array( $tag ),
@@ -1586,7 +1586,7 @@ class Tests_Query_TaxQuery extends WP_UnitTestCase {
 			)
 		);
 
-		$this->assertEquals( $tag, $q->get( 'tag_id' ) );
+		$this->assertSame( $tag, $q->get( 'tag_id' ) );
 
 		_unregister_taxonomy( 'foo' );
 	}
@@ -1621,6 +1621,6 @@ class Tests_Query_TaxQuery extends WP_UnitTestCase {
 			)
 		);
 
-		$this->assertEqualSets( array( $p ), $q->posts );
+		$this->assertSameSets( array( $p ), $q->posts );
 	}
 }
diff --git a/tests/query/vars.php b/tests/query/vars.php
index 705d3852b9..7f336908a2 100644
--- a/tests/query/vars.php
+++ b/tests/query/vars.php
@@ -9,6 +9,7 @@ class Tests_Query_Vars extends WP_UnitTestCase {
 
 	/**
 	 * @ticket 35115
+	 * @ticket 51154
 	 */
 	public function testPublicQueryVarsAreAsExpected() {
 		global $wp;
@@ -16,7 +17,7 @@ class Tests_Query_Vars extends WP_UnitTestCase {
 		// Re-initialise any dynamically-added public query vars:
 		do_action( 'init' );
 
-		$this->assertEquals(
+		$this->assertSame(
 			array(
 
 				// Static public query vars:
@@ -60,6 +61,7 @@ class Tests_Query_Vars extends WP_UnitTestCase {
 				'subpost_id',
 				'preview',
 				'robots',
+				'favicon',
 				'taxonomy',
 				'term',
 				'cpage',
@@ -69,6 +71,9 @@ class Tests_Query_Vars extends WP_UnitTestCase {
 				// Dynamically added public query vars:
 				'post_format',
 				'rest_route',
+				'sitemap',
+				'sitemap-subtype',
+				'sitemap-stylesheet',
 
 			),
 			$wp->public_query_vars,
diff --git a/tests/query/verboseRewriteRules.php b/tests/query/verboseRewriteRules.php
index 5414a51a9a..88f2ef38ac 100644
--- a/tests/query/verboseRewriteRules.php
+++ b/tests/query/verboseRewriteRules.php
@@ -1,6 +1,6 @@
 <?php
 
-require_once dirname( __FILE__ ) . '/conditionals.php';
+require_once __DIR__ . '/conditionals.php';
 
 /**
  * @group query
diff --git a/tests/rest-api.php b/tests/rest-api.php
index 1efb81a348..08f498e5bb 100644
--- a/tests/rest-api.php
+++ b/tests/rest-api.php
@@ -8,6 +8,7 @@
 
 require_once ABSPATH . 'wp-admin/includes/admin.php';
 require_once ABSPATH . WPINC . '/rest-api.php';
+require_once __DIR__ . '/../includes/class-jsonserializable-object.php';
 
 /**
  * @group restapi
@@ -41,36 +42,36 @@ class Tests_REST_API extends WP_UnitTestCase {
 	 * have a default priority of 10.
 	 */
 	function test_init_action_added() {
-		$this->assertEquals( 10, has_action( 'init', 'rest_api_init' ) );
+		$this->assertSame( 10, has_action( 'init', 'rest_api_init' ) );
 	}
 
 	public function test_add_extra_api_taxonomy_arguments() {
 		$taxonomy = get_taxonomy( 'category' );
 		$this->assertTrue( $taxonomy->show_in_rest );
-		$this->assertEquals( 'categories', $taxonomy->rest_base );
-		$this->assertEquals( 'WP_REST_Terms_Controller', $taxonomy->rest_controller_class );
+		$this->assertSame( 'categories', $taxonomy->rest_base );
+		$this->assertSame( 'WP_REST_Terms_Controller', $taxonomy->rest_controller_class );
 
 		$taxonomy = get_taxonomy( 'post_tag' );
 		$this->assertTrue( $taxonomy->show_in_rest );
-		$this->assertEquals( 'tags', $taxonomy->rest_base );
-		$this->assertEquals( 'WP_REST_Terms_Controller', $taxonomy->rest_controller_class );
+		$this->assertSame( 'tags', $taxonomy->rest_base );
+		$this->assertSame( 'WP_REST_Terms_Controller', $taxonomy->rest_controller_class );
 	}
 
 	public function test_add_extra_api_post_type_arguments() {
 		$post_type = get_post_type_object( 'post' );
 		$this->assertTrue( $post_type->show_in_rest );
-		$this->assertEquals( 'posts', $post_type->rest_base );
-		$this->assertEquals( 'WP_REST_Posts_Controller', $post_type->rest_controller_class );
+		$this->assertSame( 'posts', $post_type->rest_base );
+		$this->assertSame( 'WP_REST_Posts_Controller', $post_type->rest_controller_class );
 
 		$post_type = get_post_type_object( 'page' );
 		$this->assertTrue( $post_type->show_in_rest );
-		$this->assertEquals( 'pages', $post_type->rest_base );
-		$this->assertEquals( 'WP_REST_Posts_Controller', $post_type->rest_controller_class );
+		$this->assertSame( 'pages', $post_type->rest_base );
+		$this->assertSame( 'WP_REST_Posts_Controller', $post_type->rest_controller_class );
 
 		$post_type = get_post_type_object( 'attachment' );
 		$this->assertTrue( $post_type->show_in_rest );
-		$this->assertEquals( 'media', $post_type->rest_base );
-		$this->assertEquals( 'WP_REST_Attachments_Controller', $post_type->rest_controller_class );
+		$this->assertSame( 'media', $post_type->rest_base );
+		$this->assertSame( 'WP_REST_Attachments_Controller', $post_type->rest_controller_class );
 	}
 
 	/**
@@ -83,8 +84,9 @@ class Tests_REST_API extends WP_UnitTestCase {
 			'test-ns',
 			'/test',
 			array(
-				'methods'  => array( 'GET' ),
-				'callback' => '__return_null',
+				'methods'             => array( 'GET' ),
+				'callback'            => '__return_null',
+				'permission_callback' => '__return_true',
 			)
 		);
 
@@ -96,7 +98,7 @@ class Tests_REST_API extends WP_UnitTestCase {
 		$endpoint = $endpoints['/test-ns/test'];
 		$this->assertArrayNotHasKey( 'callback', $endpoint );
 		$this->assertArrayHasKey( 'namespace', $endpoint );
-		$this->assertEquals( 'test-ns', $endpoint['namespace'] );
+		$this->assertSame( 'test-ns', $endpoint['namespace'] );
 
 		// Grab the filtered data.
 		$filtered_endpoints = $GLOBALS['wp_rest_server']->get_routes();
@@ -119,12 +121,14 @@ class Tests_REST_API extends WP_UnitTestCase {
 			'/test',
 			array(
 				array(
-					'methods'  => array( 'GET' ),
-					'callback' => '__return_null',
+					'methods'             => array( 'GET' ),
+					'callback'            => '__return_null',
+					'permission_callback' => '__return_true',
 				),
 				array(
-					'methods'  => array( 'POST' ),
-					'callback' => '__return_null',
+					'methods'             => array( 'POST' ),
+					'callback'            => '__return_null',
+					'permission_callback' => '__return_true',
 				),
 			)
 		);
@@ -137,7 +141,7 @@ class Tests_REST_API extends WP_UnitTestCase {
 		$endpoint = $endpoints['/test-ns/test'];
 		$this->assertArrayNotHasKey( 'callback', $endpoint );
 		$this->assertArrayHasKey( 'namespace', $endpoint );
-		$this->assertEquals( 'test-ns', $endpoint['namespace'] );
+		$this->assertSame( 'test-ns', $endpoint['namespace'] );
 
 		$filtered_endpoints = $GLOBALS['wp_rest_server']->get_routes();
 		$endpoint           = $filtered_endpoints['/test-ns/test'];
@@ -159,16 +163,18 @@ class Tests_REST_API extends WP_UnitTestCase {
 			'test-ns',
 			'/test',
 			array(
-				'methods'  => array( 'GET' ),
-				'callback' => '__return_null',
+				'methods'             => array( 'GET' ),
+				'callback'            => '__return_null',
+				'permission_callback' => '__return_true',
 			)
 		);
 		register_rest_route(
 			'test-ns',
 			'/test',
 			array(
-				'methods'  => array( 'POST' ),
-				'callback' => '__return_null',
+				'methods'             => array( 'POST' ),
+				'callback'            => '__return_null',
+				'permission_callback' => '__return_true',
 			)
 		);
 
@@ -186,18 +192,20 @@ class Tests_REST_API extends WP_UnitTestCase {
 			'test-ns',
 			'/test',
 			array(
-				'methods'      => array( 'GET' ),
-				'callback'     => '__return_null',
-				'should_exist' => false,
+				'methods'             => array( 'GET' ),
+				'callback'            => '__return_null',
+				'permission_callback' => '__return_true',
+				'should_exist'        => false,
 			)
 		);
 		register_rest_route(
 			'test-ns',
 			'/test',
 			array(
-				'methods'      => array( 'POST' ),
-				'callback'     => '__return_null',
-				'should_exist' => true,
+				'methods'             => array( 'POST' ),
+				'callback'            => '__return_null',
+				'permission_callback' => '__return_true',
+				'should_exist'        => true,
 			),
 			true
 		);
@@ -222,8 +230,9 @@ class Tests_REST_API extends WP_UnitTestCase {
 			'',
 			'/test-empty-namespace',
 			array(
-				'methods'  => array( 'POST' ),
-				'callback' => '__return_null',
+				'methods'             => array( 'POST' ),
+				'callback'            => '__return_null',
+				'permission_callback' => '__return_true',
 			),
 			true
 		);
@@ -241,8 +250,9 @@ class Tests_REST_API extends WP_UnitTestCase {
 			'/test-empty-route',
 			'',
 			array(
-				'methods'  => array( 'POST' ),
-				'callback' => '__return_null',
+				'methods'             => array( 'POST' ),
+				'callback'            => '__return_null',
+				'permission_callback' => '__return_true',
 			),
 			true
 		);
@@ -263,14 +273,15 @@ class Tests_REST_API extends WP_UnitTestCase {
 			'test-ns',
 			'/test',
 			array(
-				'methods'  => array( 'GET' ),
-				'callback' => '__return_null',
+				'methods'             => array( 'GET' ),
+				'callback'            => '__return_null',
+				'permission_callback' => '__return_true',
 			)
 		);
 
 		$routes = $GLOBALS['wp_rest_server']->get_routes();
 
-		$this->assertEquals( $routes['/test-ns/test'][0]['methods'], array( 'GET' => true ) );
+		$this->assertSame( $routes['/test-ns/test'][0]['methods'], array( 'GET' => true ) );
 	}
 
 	/**
@@ -281,14 +292,15 @@ class Tests_REST_API extends WP_UnitTestCase {
 			'test-ns',
 			'/test',
 			array(
-				'methods'  => 'GET',
-				'callback' => '__return_null',
+				'methods'             => 'GET',
+				'callback'            => '__return_null',
+				'permission_callback' => '__return_true',
 			)
 		);
 
 		$routes = $GLOBALS['wp_rest_server']->get_routes();
 
-		$this->assertEquals( $routes['/test-ns/test'][0]['methods'], array( 'GET' => true ) );
+		$this->assertSame( $routes['/test-ns/test'][0]['methods'], array( 'GET' => true ) );
 	}
 
 	/**
@@ -299,14 +311,15 @@ class Tests_REST_API extends WP_UnitTestCase {
 			'test-ns',
 			'/test',
 			array(
-				'methods'  => array( 'GET', 'POST' ),
-				'callback' => '__return_null',
+				'methods'             => array( 'GET', 'POST' ),
+				'callback'            => '__return_null',
+				'permission_callback' => '__return_true',
 			)
 		);
 
 		$routes = $GLOBALS['wp_rest_server']->get_routes();
 
-		$this->assertEquals(
+		$this->assertSame(
 			$routes['/test-ns/test'][0]['methods'],
 			array(
 				'GET'  => true,
@@ -316,21 +329,22 @@ class Tests_REST_API extends WP_UnitTestCase {
 	}
 
 	/**
-	 * The 'methods' arg should a comma seperated string.
+	 * The 'methods' arg should a comma-separated string.
 	 */
-	public function test_route_method_comma_seperated() {
+	public function test_route_method_comma_separated() {
 		register_rest_route(
 			'test-ns',
 			'/test',
 			array(
-				'methods'  => 'GET,POST',
-				'callback' => '__return_null',
+				'methods'             => 'GET,POST',
+				'callback'            => '__return_null',
+				'permission_callback' => '__return_true',
 			)
 		);
 
 		$routes = $GLOBALS['wp_rest_server']->get_routes();
 
-		$this->assertEquals(
+		$this->assertSame(
 			$routes['/test-ns/test'][0]['methods'],
 			array(
 				'GET'  => true,
@@ -344,8 +358,9 @@ class Tests_REST_API extends WP_UnitTestCase {
 			'test-ns',
 			'/test',
 			array(
-				'methods'  => 'GET,POST',
-				'callback' => '__return_null',
+				'methods'             => 'GET,POST',
+				'callback'            => '__return_null',
+				'permission_callback' => '__return_true',
 			)
 		);
 
@@ -355,7 +370,7 @@ class Tests_REST_API extends WP_UnitTestCase {
 		$headers  = $response->get_headers();
 		$this->assertArrayHasKey( 'Allow', $headers );
 
-		$this->assertEquals( 'GET, POST', $headers['Allow'] );
+		$this->assertSame( 'GET, POST', $headers['Allow'] );
 	}
 
 	/**
@@ -366,8 +381,9 @@ class Tests_REST_API extends WP_UnitTestCase {
 			'test-ns',
 			'/test',
 			array(
-				'methods'  => 'GET,POST',
-				'callback' => '__return_true',
+				'methods'             => 'GET,POST',
+				'callback'            => '__return_true',
+				'permission_callback' => '__return_true',
 			)
 		);
 
@@ -378,7 +394,7 @@ class Tests_REST_API extends WP_UnitTestCase {
 	}
 
 	/**
-	 * Ensure that result fields are not whitelisted if no request['_fields'] is present.
+	 * Ensure that result fields are not allowed if no request['_fields'] is present.
 	 */
 	public function test_rest_filter_response_fields_no_request_filter() {
 		$response = new WP_REST_Response();
@@ -386,11 +402,11 @@ class Tests_REST_API extends WP_UnitTestCase {
 		$request = array();
 
 		$response = rest_filter_response_fields( $response, null, $request );
-		$this->assertEquals( array( 'a' => true ), $response->get_data() );
+		$this->assertSame( array( 'a' => true ), $response->get_data() );
 	}
 
 	/**
-	 * Ensure that result fields are whitelisted if request['_fields'] is present.
+	 * Ensure that result fields are allowed if request['_fields'] is present.
 	 */
 	public function test_rest_filter_response_fields_single_field_filter() {
 		$response = new WP_REST_Response();
@@ -406,11 +422,11 @@ class Tests_REST_API extends WP_UnitTestCase {
 		);
 
 		$response = rest_filter_response_fields( $response, null, $request );
-		$this->assertEquals( array( 'b' => 1 ), $response->get_data() );
+		$this->assertSame( array( 'b' => 1 ), $response->get_data() );
 	}
 
 	/**
-	 * Ensure that multiple comma-separated fields may be whitelisted with request['_fields'].
+	 * Ensure that multiple comma-separated fields may be allowed with request['_fields'].
 	 */
 	public function test_rest_filter_response_fields_multi_field_filter() {
 		$response = new WP_REST_Response();
@@ -429,7 +445,7 @@ class Tests_REST_API extends WP_UnitTestCase {
 		);
 
 		$response = rest_filter_response_fields( $response, null, $request );
-		$this->assertEquals(
+		$this->assertSame(
 			array(
 				'b' => 1,
 				'c' => 2,
@@ -440,7 +456,7 @@ class Tests_REST_API extends WP_UnitTestCase {
 	}
 
 	/**
-	 * Ensure that multiple comma-separated fields may be whitelisted
+	 * Ensure that multiple comma-separated fields may be allowed
 	 * with request['_fields'] using query parameter array syntax.
 	 */
 	public function test_rest_filter_response_fields_multi_field_filter_array() {
@@ -461,7 +477,7 @@ class Tests_REST_API extends WP_UnitTestCase {
 		);
 
 		$response = rest_filter_response_fields( $response, null, $request );
-		$this->assertEquals(
+		$this->assertSame(
 			array(
 				'b' => 1,
 				'c' => 2,
@@ -472,7 +488,7 @@ class Tests_REST_API extends WP_UnitTestCase {
 	}
 
 	/**
-	 * Ensure that request['_fields'] whitelists apply to items in response collections.
+	 * Ensure that request['_fields'] allowed list apply to items in response collections.
 	 */
 	public function test_rest_filter_response_fields_numeric_array() {
 		$response = new WP_REST_Response();
@@ -500,7 +516,7 @@ class Tests_REST_API extends WP_UnitTestCase {
 		);
 
 		$response = rest_filter_response_fields( $response, null, $request );
-		$this->assertEquals(
+		$this->assertSame(
 			array(
 				array(
 					'b' => 1,
@@ -520,7 +536,7 @@ class Tests_REST_API extends WP_UnitTestCase {
 	}
 
 	/**
-	 * Ensure that nested fields may be whitelisted with request['_fields'].
+	 * Ensure that nested fields may be allowed with request['_fields'].
 	 *
 	 * @ticket 42094
 	 */
@@ -546,7 +562,7 @@ class Tests_REST_API extends WP_UnitTestCase {
 		);
 
 		$response = rest_filter_response_fields( $response, null, $request );
-		$this->assertEquals(
+		$this->assertSame(
 			array(
 				'b' => array(
 					'1' => 1,
@@ -560,6 +576,48 @@ class Tests_REST_API extends WP_UnitTestCase {
 		);
 	}
 
+	/**
+	 * Ensure inclusion of deeply nested fields may be controlled with request['_fields'].
+	 *
+	 * @ticket 49648
+	 */
+	public function test_rest_filter_response_fields_deeply_nested_field_filter() {
+		$response = new WP_REST_Response();
+
+		$response->set_data(
+			array(
+				'field' => array(
+					'a' => array(
+						'i'  => 'value i',
+						'ii' => 'value ii',
+					),
+					'b' => array(
+						'iii' => 'value iii',
+						'iv'  => 'value iv',
+					),
+				),
+			)
+		);
+		$request = array(
+			'_fields' => 'field.a.i,field.b.iv',
+		);
+
+		$response = rest_filter_response_fields( $response, null, $request );
+		$this->assertSame(
+			array(
+				'field' => array(
+					'a' => array(
+						'i' => 'value i',
+					),
+					'b' => array(
+						'iv' => 'value iv',
+					),
+				),
+			),
+			$response->get_data()
+		);
+	}
+
 	/**
 	 * Ensure that specifying a single top-level key in _fields includes that field and all children.
 	 *
@@ -581,7 +639,7 @@ class Tests_REST_API extends WP_UnitTestCase {
 		);
 
 		$response = rest_filter_response_fields( $response, null, $request );
-		$this->assertEquals(
+		$this->assertSame(
 			array(
 				'meta' => array(
 					'key1' => 1,
@@ -613,7 +671,7 @@ class Tests_REST_API extends WP_UnitTestCase {
 		);
 
 		$response = rest_filter_response_fields( $response, null, $request );
-		$this->assertEquals(
+		$this->assertSame(
 			array(
 				'meta' => array(
 					'key1' => 1,
@@ -645,7 +703,7 @@ class Tests_REST_API extends WP_UnitTestCase {
 		);
 
 		$response = rest_filter_response_fields( $response, null, $request );
-		$this->assertEquals(
+		$this->assertSame(
 			array(
 				'meta' => array(
 					'key1' => 1,
@@ -687,15 +745,15 @@ class Tests_REST_API extends WP_UnitTestCase {
 	public function test_rest_url_generation() {
 		// In pretty permalinks case, we expect a path of wp-json/ with no query.
 		$this->set_permalink_structure( '/%year%/%monthnum%/%day%/%postname%/' );
-		$this->assertEquals( 'http://' . WP_TESTS_DOMAIN . '/wp-json/', get_rest_url() );
+		$this->assertSame( 'http://' . WP_TESTS_DOMAIN . '/wp-json/', get_rest_url() );
 
 		// In index permalinks case, we expect a path of index.php/wp-json/ with no query.
 		$this->set_permalink_structure( '/index.php/%year%/%monthnum%/%day%/%postname%/' );
-		$this->assertEquals( 'http://' . WP_TESTS_DOMAIN . '/index.php/wp-json/', get_rest_url() );
+		$this->assertSame( 'http://' . WP_TESTS_DOMAIN . '/index.php/wp-json/', get_rest_url() );
 
 		// In non-pretty case, we get a query string to invoke the rest router.
 		$this->set_permalink_structure( '' );
-		$this->assertEquals( 'http://' . WP_TESTS_DOMAIN . '/index.php?rest_route=/', get_rest_url() );
+		$this->assertSame( 'http://' . WP_TESTS_DOMAIN . '/index.php?rest_route=/', get_rest_url() );
 	}
 
 	/**
@@ -708,32 +766,32 @@ class Tests_REST_API extends WP_UnitTestCase {
 		set_current_screen( 'edit.php' );
 		$this->assertTrue( is_admin() );
 
-		// Test an HTTP URL
+		// Test an HTTP URL.
 		unset( $_SERVER['HTTPS'] );
 		$url = get_rest_url();
 		$this->assertSame( 'http', parse_url( $url, PHP_URL_SCHEME ) );
 
-		// Test an HTTPS URL
+		// Test an HTTPS URL.
 		$_SERVER['HTTPS'] = 'on';
 		$url              = get_rest_url();
 		$this->assertSame( 'https', parse_url( $url, PHP_URL_SCHEME ) );
 
-		// Switch to an admin request on a different domain name
+		// Switch to an admin request on a different domain name.
 		$_SERVER['SERVER_NAME'] = 'admin.example.org';
 		update_option( 'siteurl', 'http://admin.example.org' );
 		$this->assertNotEquals( $_SERVER['SERVER_NAME'], parse_url( home_url(), PHP_URL_HOST ) );
 
-		// // Test an HTTP URL
+		// Test an HTTP URL.
 		unset( $_SERVER['HTTPS'] );
 		$url = get_rest_url();
 		$this->assertSame( 'http', parse_url( $url, PHP_URL_SCHEME ) );
 
-		// // Test an HTTPS URL
+		// Test an HTTPS URL.
 		$_SERVER['HTTPS'] = 'on';
 		$url              = get_rest_url();
 		$this->assertSame( 'http', parse_url( $url, PHP_URL_SCHEME ) );
 
-		// Reset
+		// Reset.
 		update_option( 'siteurl', $_siteurl );
 		set_current_screen( 'front' );
 
@@ -749,32 +807,32 @@ class Tests_REST_API extends WP_UnitTestCase {
 		// Passing no path should return a slash.
 		get_rest_url();
 		$args = $filter->get_args();
-		$this->assertEquals( '/', $args[0][1] );
+		$this->assertSame( '/', $args[0][1] );
 		$filter->reset();
 
 		// Paths without a prepended slash should have one added.
 		get_rest_url( null, 'wp/media/' );
 		$args = $filter->get_args();
-		$this->assertEquals( '/wp/media/', $args[0][1] );
+		$this->assertSame( '/wp/media/', $args[0][1] );
 		$filter->reset();
 
 		// Do not modify paths with a prepended slash.
 		get_rest_url( null, '/wp/media/' );
 		$args = $filter->get_args();
-		$this->assertEquals( '/wp/media/', $args[0][1] );
+		$this->assertSame( '/wp/media/', $args[0][1] );
 
 		unset( $filter );
 	}
 
 	public function jsonp_callback_provider() {
 		return array(
-			// Standard names
+			// Standard names.
 			array( 'Springfield', true ),
 			array( 'shelby.ville', true ),
 			array( 'cypress_creek', true ),
 			array( 'KampKrusty1', true ),
 
-			// Invalid names
+			// Invalid names.
 			array( 'ogden-ville', false ),
 			array( 'north haverbrook', false ),
 			array( "Terror['Lake']", false ),
@@ -788,12 +846,12 @@ class Tests_REST_API extends WP_UnitTestCase {
 	 * @dataProvider jsonp_callback_provider
 	 */
 	public function test_jsonp_callback_check( $callback, $valid ) {
-		$this->assertEquals( $valid, wp_check_jsonp_callback( $callback ) );
+		$this->assertSame( $valid, wp_check_jsonp_callback( $callback ) );
 	}
 
 	public function rest_date_provider() {
 		return array(
-			// Valid dates with timezones
+			// Valid dates with timezones.
 			array( '2017-01-16T11:30:00-05:00', gmmktime( 11, 30, 0, 1, 16, 2017 ) + 5 * HOUR_IN_SECONDS ),
 			array( '2017-01-16T11:30:00-05:30', gmmktime( 11, 30, 0, 1, 16, 2017 ) + 5.5 * HOUR_IN_SECONDS ),
 			array( '2017-01-16T11:30:00-05', gmmktime( 11, 30, 0, 1, 16, 2017 ) + 5 * HOUR_IN_SECONDS ),
@@ -802,10 +860,10 @@ class Tests_REST_API extends WP_UnitTestCase {
 			array( '2017-01-16T11:30:00+00', gmmktime( 11, 30, 0, 1, 16, 2017 ) ),
 			array( '2017-01-16T11:30:00Z', gmmktime( 11, 30, 0, 1, 16, 2017 ) ),
 
-			// Valid dates without timezones
+			// Valid dates without timezones.
 			array( '2017-01-16T11:30:00', gmmktime( 11, 30, 0, 1, 16, 2017 ) ),
 
-			// Invalid dates (TODO: support parsing partial dates as ranges, see #38641)
+			// Invalid dates (TODO: support parsing partial dates as ranges, see #38641).
 			array( '2017-01-16T11:30:00-5', false ),
 			array( '2017-01-16T11:30', false ),
 			array( '2017-01-16T11', false ),
@@ -825,7 +883,7 @@ class Tests_REST_API extends WP_UnitTestCase {
 
 	public function rest_date_force_utc_provider() {
 		return array(
-			// Valid dates with timezones
+			// Valid dates with timezones.
 			array( '2017-01-16T11:30:00-05:00', gmmktime( 11, 30, 0, 1, 16, 2017 ) ),
 			array( '2017-01-16T11:30:00-05:30', gmmktime( 11, 30, 0, 1, 16, 2017 ) ),
 			array( '2017-01-16T11:30:00-05', gmmktime( 11, 30, 0, 1, 16, 2017 ) ),
@@ -834,10 +892,10 @@ class Tests_REST_API extends WP_UnitTestCase {
 			array( '2017-01-16T11:30:00+00', gmmktime( 11, 30, 0, 1, 16, 2017 ) ),
 			array( '2017-01-16T11:30:00Z', gmmktime( 11, 30, 0, 1, 16, 2017 ) ),
 
-			// Valid dates without timezones
+			// Valid dates without timezones.
 			array( '2017-01-16T11:30:00', gmmktime( 11, 30, 0, 1, 16, 2017 ) ),
 
-			// Invalid dates (TODO: support parsing partial dates as ranges, see #38641)
+			// Invalid dates (TODO: support parsing partial dates as ranges, see #38641).
 			array( '2017-01-16T11:30:00-5', false ),
 			array( '2017-01-16T11:30', false ),
 			array( '2017-01-16T11', false ),
@@ -852,7 +910,7 @@ class Tests_REST_API extends WP_UnitTestCase {
 	 * @dataProvider rest_date_force_utc_provider
 	 */
 	public function test_rest_parse_date_force_utc( $string, $value ) {
-		$this->assertEquals( $value, rest_parse_date( $string, true ) );
+		$this->assertSame( $value, rest_parse_date( $string, true ) );
 	}
 
 	public function filter_wp_rest_server_class( $class_name ) {
@@ -867,13 +925,14 @@ class Tests_REST_API extends WP_UnitTestCase {
 			'test-ns',
 			'/test',
 			array(
-				'methods'  => array( 'GET' ),
-				'callback' => '__return_null',
+				'methods'             => array( 'GET' ),
+				'callback'            => '__return_null',
+				'permission_callback' => '__return_true',
 			)
 		);
 
 		$routes = $GLOBALS['wp_rest_server']->get_routes();
-		$this->assertEquals( $routes['/test-ns/test'][0]['methods'], array( 'GET' => true ) );
+		$this->assertSame( $routes['/test-ns/test'][0]['methods'], array( 'GET' => true ) );
 	}
 
 	function test_rest_preload_api_request_with_method() {
@@ -900,10 +959,1133 @@ class Tests_REST_API extends WP_UnitTestCase {
 	/**
 	 * @ticket 40614
 	 */
-	function test_rest_ensure_response_accepts_path_string() {
+	function test_rest_ensure_request_accepts_path_string() {
 		$request = rest_ensure_request( '/wp/v2/posts' );
 		$this->assertInstanceOf( 'WP_REST_Request', $request );
-		$this->assertEquals( '/wp/v2/posts', $request->get_route() );
-		$this->assertEquals( 'GET', $request->get_method() );
+		$this->assertSame( '/wp/v2/posts', $request->get_route() );
+		$this->assertSame( 'GET', $request->get_method() );
+	}
+
+	/**
+	 * @dataProvider _dp_rest_parse_embed_param
+	 */
+	public function test_rest_parse_embed_param( $expected, $embed ) {
+		$this->assertSame( $expected, rest_parse_embed_param( $embed ) );
+	}
+
+	public function _dp_rest_parse_embed_param() {
+		return array(
+			array( true, '' ),
+			array( true, null ),
+			array( true, '1' ),
+			array( true, 'true' ),
+			array( true, array() ),
+			array( array( 'author' ), 'author' ),
+			array( array( 'author', 'replies' ), 'author,replies' ),
+			array( array( 'author', 'replies' ), 'author,replies ' ),
+			array( array( 'wp:term' ), 'wp:term' ),
+			array( array( 'wp:term', 'wp:attachment' ), 'wp:term,wp:attachment' ),
+			array( array( 'author' ), array( 'author' ) ),
+			array( array( 'author', 'replies' ), array( 'author', 'replies' ) ),
+			array( array( 'https://api.w.org/term' ), 'https://api.w.org/term' ),
+			array( array( 'https://api.w.org/term', 'https://api.w.org/attachment' ), 'https://api.w.org/term,https://api.w.org/attachment' ),
+			array( array( 'https://api.w.org/term', 'https://api.w.org/attachment' ), array( 'https://api.w.org/term', 'https://api.w.org/attachment' ) ),
+		);
+	}
+
+	/**
+	 * @ticket 48819
+	 *
+	 * @dataProvider _dp_rest_filter_response_by_context
+	 */
+	public function test_rest_filter_response_by_context( $schema, $data, $expected ) {
+		$this->assertSame( $expected, rest_filter_response_by_context( $data, $schema, 'view' ) );
+	}
+
+	/**
+	 * @ticket 49749
+	 */
+	public function test_register_route_with_invalid_namespace() {
+		$this->setExpectedIncorrectUsage( 'register_rest_route' );
+
+		register_rest_route(
+			'/my-namespace/v1/',
+			'/my-route',
+			array(
+				'callback'            => '__return_true',
+				'permission_callback' => '__return_true',
+			)
+		);
+
+		$routes = rest_get_server()->get_routes( 'my-namespace/v1' );
+		$this->assertCount( 2, $routes );
+
+		$this->assertTrue( rest_do_request( '/my-namespace/v1/my-route' )->get_data() );
+	}
+
+	/**
+	 * @ticket 50075
+	 */
+	public function test_register_route_with_missing_permission_callback_top_level_route() {
+		$this->setExpectedIncorrectUsage( 'register_rest_route' );
+
+		$registered = register_rest_route(
+			'my-ns/v1',
+			'/my-route',
+			array(
+				'callback' => '__return_true',
+			)
+		);
+
+		$this->assertTrue( $registered );
+	}
+
+	/**
+	 * @ticket 50075
+	 */
+	public function test_register_route_with_missing_permission_callback_single_wrapped_route() {
+		$this->setExpectedIncorrectUsage( 'register_rest_route' );
+
+		$registered = register_rest_route(
+			'my-ns/v1',
+			'/my-route',
+			array(
+				array(
+					'callback' => '__return_true',
+				),
+			)
+		);
+
+		$this->assertTrue( $registered );
+	}
+
+
+	/**
+	 * @ticket 50075
+	 */
+	public function test_register_route_with_missing_permission_callback_multiple_wrapped_route() {
+		$this->setExpectedIncorrectUsage( 'register_rest_route' );
+
+		$registered = register_rest_route(
+			'my-ns/v1',
+			'/my-route',
+			array(
+				array(
+					'callback' => '__return_true',
+				),
+				array(
+					'callback'            => '__return_true',
+					'permission_callback' => '__return_true',
+				),
+			)
+		);
+
+		$this->assertTrue( $registered );
+	}
+
+	public function _dp_rest_filter_response_by_context() {
+		return array(
+			'default'                             => array(
+				array(
+					'$schema'    => 'http://json-schema.org/draft-04/schema#',
+					'type'       => 'object',
+					'properties' => array(
+						'first'  => array(
+							'type'    => 'string',
+							'context' => array( 'view', 'edit' ),
+						),
+						'second' => array(
+							'type'    => 'string',
+							'context' => array( 'edit' ),
+						),
+					),
+				),
+				array(
+					'first'  => 'a',
+					'second' => 'b',
+				),
+				array( 'first' => 'a' ),
+			),
+			'keeps missing context'               => array(
+				array(
+					'$schema'    => 'http://json-schema.org/draft-04/schema#',
+					'type'       => 'object',
+					'properties' => array(
+						'first'  => array(
+							'type'    => 'string',
+							'context' => array( 'view', 'edit' ),
+						),
+						'second' => array(
+							'type' => 'string',
+						),
+					),
+				),
+				array(
+					'first'  => 'a',
+					'second' => 'b',
+				),
+				array(
+					'first'  => 'a',
+					'second' => 'b',
+				),
+			),
+			'removes empty context'               => array(
+				array(
+					'$schema'    => 'http://json-schema.org/draft-04/schema#',
+					'type'       => 'object',
+					'properties' => array(
+						'first'  => array(
+							'type'    => 'string',
+							'context' => array( 'view', 'edit' ),
+						),
+						'second' => array(
+							'type'    => 'string',
+							'context' => array(),
+						),
+					),
+				),
+				array(
+					'first'  => 'a',
+					'second' => 'b',
+				),
+				array( 'first' => 'a' ),
+			),
+			'nested properties'                   => array(
+				array(
+					'$schema'    => 'http://json-schema.org/draft-04/schema#',
+					'type'       => 'object',
+					'properties' => array(
+						'parent' => array(
+							'type'       => 'object',
+							'context'    => array( 'view', 'edit' ),
+							'properties' => array(
+								'child'  => array(
+									'type'    => 'string',
+									'context' => array( 'view', 'edit' ),
+								),
+								'hidden' => array(
+									'type'    => 'string',
+									'context' => array( 'edit' ),
+								),
+							),
+						),
+					),
+				),
+				array(
+					'parent' => array(
+						'child'  => 'hi',
+						'hidden' => 'there',
+					),
+				),
+				array( 'parent' => array( 'child' => 'hi' ) ),
+			),
+			'grand child properties'              => array(
+				array(
+					'$schema'    => 'http://json-schema.org/draft-04/schema#',
+					'type'       => 'object',
+					'properties' => array(
+						'parent' => array(
+							'type'       => 'object',
+							'context'    => array( 'view', 'edit' ),
+							'properties' => array(
+								'child' => array(
+									'type'       => 'object',
+									'context'    => array( 'view', 'edit' ),
+									'properties' => array(
+										'grand'  => array(
+											'type'    => 'string',
+											'context' => array( 'view', 'edit' ),
+										),
+										'hidden' => array(
+											'type'    => 'string',
+											'context' => array( 'edit' ),
+										),
+									),
+								),
+							),
+						),
+					),
+				),
+				array(
+					'parent' => array(
+						'child' => array(
+							'grand' => 'hi',
+						),
+					),
+				),
+				array( 'parent' => array( 'child' => array( 'grand' => 'hi' ) ) ),
+			),
+			'array'                               => array(
+				array(
+					'$schema'    => 'http://json-schema.org/draft-04/schema#',
+					'type'       => 'object',
+					'properties' => array(
+						'arr' => array(
+							'type'    => 'array',
+							'context' => array( 'view', 'edit' ),
+							'items'   => array(
+								'type'       => 'object',
+								'context'    => array( 'view', 'edit' ),
+								'properties' => array(
+									'visible' => array(
+										'type'    => 'string',
+										'context' => array( 'view', 'edit' ),
+									),
+									'hidden'  => array(
+										'type'    => 'string',
+										'context' => array( 'edit' ),
+									),
+								),
+							),
+						),
+					),
+				),
+				array(
+					'arr' => array(
+						array(
+							'visible' => 'hi',
+							'hidden'  => 'there',
+						),
+					),
+				),
+				array( 'arr' => array( array( 'visible' => 'hi' ) ) ),
+			),
+			'additional properties'               => array(
+				array(
+					'$schema'    => 'http://json-schema.org/draft-04/schema#',
+					'type'       => 'object',
+					'properties' => array(
+						'additional' => array(
+							'type'                 => 'object',
+							'context'              => array( 'view', 'edit' ),
+							'properties'           => array(
+								'a' => array(
+									'type'    => 'string',
+									'context' => array( 'view', 'edit' ),
+								),
+								'b' => array(
+									'type'    => 'string',
+									'context' => array( 'edit' ),
+								),
+							),
+							'additionalProperties' => array(
+								'type'    => 'string',
+								'context' => array( 'edit' ),
+							),
+						),
+					),
+				),
+				array(
+					'additional' => array(
+						'a' => '1',
+						'b' => '2',
+						'c' => '3',
+					),
+				),
+				array( 'additional' => array( 'a' => '1' ) ),
+			),
+			'multiple types object'               => array(
+				array(
+					'$schema'    => 'http://json-schema.org/draft-04/schema#',
+					'type'       => 'object',
+					'properties' => array(
+						'multi' => array(
+							'type'       => array( 'object', 'string' ),
+							'context'    => array( 'view', 'edit' ),
+							'properties' => array(
+								'a' => array(
+									'type'    => 'string',
+									'context' => array( 'view', 'edit' ),
+								),
+								'b' => array(
+									'type'    => 'string',
+									'context' => array( 'edit' ),
+								),
+							),
+						),
+					),
+				),
+				array(
+					'multi' => array(
+						'a' => '1',
+						'b' => '2',
+					),
+				),
+				array( 'multi' => array( 'a' => '1' ) ),
+			),
+			'multiple types array'                => array(
+				array(
+					'$schema'    => 'http://json-schema.org/draft-04/schema#',
+					'type'       => 'object',
+					'properties' => array(
+						'multi' => array(
+							'type'    => array( 'array', 'string' ),
+							'context' => array( 'view', 'edit' ),
+							'items'   => array(
+								'type'       => 'object',
+								'context'    => array( 'view', 'edit' ),
+								'properties' => array(
+									'visible' => array(
+										'type'    => 'string',
+										'context' => array( 'view', 'edit' ),
+									),
+									'hidden'  => array(
+										'type'    => 'string',
+										'context' => array( 'edit' ),
+									),
+								),
+							),
+						),
+					),
+				),
+				array(
+					'multi' => array(
+						array(
+							'visible' => '1',
+							'hidden'  => '2',
+						),
+					),
+				),
+				array( 'multi' => array( array( 'visible' => '1' ) ) ),
+			),
+			'does not traverse missing context'   => array(
+				array(
+					'$schema'    => 'http://json-schema.org/draft-04/schema#',
+					'type'       => 'object',
+					'properties' => array(
+						'parent' => array(
+							'type'       => 'object',
+							'context'    => array( 'view', 'edit' ),
+							'properties' => array(
+								'child' => array(
+									'type'       => 'object',
+									'properties' => array(
+										'grand'  => array(
+											'type'    => 'string',
+											'context' => array( 'view', 'edit' ),
+										),
+										'hidden' => array(
+											'type'    => 'string',
+											'context' => array( 'edit' ),
+										),
+									),
+								),
+							),
+						),
+					),
+				),
+				array(
+					'parent' => array(
+						'child' => array(
+							'grand'  => 'hi',
+							'hidden' => 'there',
+						),
+					),
+				),
+				array(
+					'parent' => array(
+						'child' => array(
+							'grand'  => 'hi',
+							'hidden' => 'there',
+						),
+					),
+				),
+			),
+			'object with no matching properties'  => array(
+				array(
+					'$schema'    => 'http://json-schema.org/draft-04/schema#',
+					'type'       => 'object',
+					'properties' => array(
+						'a' => array(
+							'type'    => 'string',
+							'context' => array( 'edit' ),
+						),
+						'b' => array(
+							'type'    => 'string',
+							'context' => array( 'edit' ),
+						),
+					),
+				),
+				array(
+					'a' => 'hi',
+					'b' => 'hello',
+				),
+				array(),
+			),
+			'array whose type does not match'     => array(
+				array(
+					'$schema'    => 'http://json-schema.org/draft-04/schema#',
+					'type'       => 'object',
+					'properties' => array(
+						'arr' => array(
+							'type'    => 'array',
+							'context' => array( 'view' ),
+							'items'   => array(
+								'type'    => 'string',
+								'context' => array( 'edit' ),
+							),
+						),
+					),
+				),
+				array(
+					'arr' => array( 'foo', 'bar', 'baz' ),
+				),
+				array( 'arr' => array() ),
+			),
+			'array and object type passed object' => array(
+				array(
+					'$schema'    => 'http://json-schema.org/draft-04/schema#',
+					'type'       => array( 'array', 'object' ),
+					'properties' => array(
+						'a' => array(
+							'type'    => 'string',
+							'context' => array( 'view' ),
+						),
+						'b' => array(
+							'type'    => 'string',
+							'context' => array( 'view' ),
+						),
+					),
+					'items'      => array(
+						'type'       => 'object',
+						'context'    => array( 'edit' ),
+						'properties' => array(
+							'a' => array(
+								'type'    => 'string',
+								'context' => array( 'view' ),
+							),
+							'b' => array(
+								'type'    => 'string',
+								'context' => array( 'view' ),
+							),
+						),
+					),
+				),
+				array(
+					'a' => 'foo',
+					'b' => 'bar',
+				),
+				array(
+					'a' => 'foo',
+					'b' => 'bar',
+				),
+			),
+			'array and object type passed array'  => array(
+				array(
+					'$schema'    => 'http://json-schema.org/draft-04/schema#',
+					'type'       => array( 'array', 'object' ),
+					'properties' => array(
+						'a' => array(
+							'type'    => 'string',
+							'context' => array( 'view' ),
+						),
+						'b' => array(
+							'type'    => 'string',
+							'context' => array( 'view' ),
+						),
+					),
+					'items'      => array(
+						'type'       => 'object',
+						'context'    => array( 'edit' ),
+						'properties' => array(
+							'a' => array(
+								'type'    => 'string',
+								'context' => array( 'view' ),
+							),
+							'b' => array(
+								'type'    => 'string',
+								'context' => array( 'view' ),
+							),
+						),
+					),
+				),
+				array(
+					array(
+						'a' => 'foo',
+						'b' => 'bar',
+					),
+					array(
+						'a' => 'foo',
+						'b' => 'bar',
+					),
+				),
+				array(),
+			),
+		);
+	}
+
+	function test_rest_ensure_response_accepts_wp_error_and_returns_wp_error() {
+		$response = rest_ensure_response( new WP_Error() );
+		$this->assertInstanceOf( 'WP_Error', $response );
+	}
+
+	/**
+	 * @dataProvider rest_ensure_response_data_provider
+	 *
+	 * @param mixed $response      The response passed to rest_ensure_response().
+	 * @param mixed $expected_data The expected data a response should include.
+	 */
+	function test_rest_ensure_response_returns_instance_of_wp_rest_response( $response, $expected_data ) {
+		$response_object = rest_ensure_response( $response );
+		$this->assertInstanceOf( 'WP_REST_Response', $response_object );
+		$this->assertSame( $expected_data, $response_object->get_data() );
+	}
+
+	/**
+	 * Data provider for test_rest_ensure_response_returns_instance_of_wp_rest_response().
+	 *
+	 * @return array
+	 */
+	function rest_ensure_response_data_provider() {
+		return array(
+			array( null, null ),
+			array( array( 'chocolate' => 'cookies' ), array( 'chocolate' => 'cookies' ) ),
+			array( 123, 123 ),
+			array( true, true ),
+			array( 'chocolate', 'chocolate' ),
+			array( new WP_HTTP_Response( 'http' ), 'http' ),
+			array( new WP_REST_Response( 'rest' ), 'rest' ),
+		);
+	}
+
+	/**
+	 * @ticket 49116
+	 */
+	public function test_rest_get_route_for_post_non_post() {
+		$this->assertSame( '', rest_get_route_for_post( 'garbage' ) );
+	}
+
+	/**
+	 * @ticket 49116
+	 */
+	public function test_rest_get_route_for_post_invalid_post_type() {
+		register_post_type( 'invalid' );
+		$post = self::factory()->post->create_and_get( array( 'post_type' => 'invalid' ) );
+		unregister_post_type( 'invalid' );
+
+		$this->assertSame( '', rest_get_route_for_post( $post ) );
+	}
+
+	/**
+	 * @ticket 49116
+	 */
+	public function test_rest_get_route_for_post_non_rest() {
+		$post = self::factory()->post->create_and_get( array( 'post_type' => 'custom_css' ) );
+		$this->assertSame( '', rest_get_route_for_post( $post ) );
+	}
+
+	/**
+	 * @ticket 49116
+	 */
+	public function test_rest_get_route_for_post_custom_controller() {
+		$post = self::factory()->post->create_and_get( array( 'post_type' => 'wp_block' ) );
+		$this->assertSame( '', rest_get_route_for_post( $post ) );
+	}
+
+	/**
+	 * @ticket 49116
+	 */
+	public function test_rest_get_route_for_post() {
+		$post = self::factory()->post->create_and_get();
+		$this->assertSame( '/wp/v2/posts/' . $post->ID, rest_get_route_for_post( $post ) );
+	}
+
+	/**
+	 * @ticket 49116
+	 */
+	public function test_rest_get_route_for_media() {
+		$post = self::factory()->attachment->create_and_get();
+		$this->assertSame( '/wp/v2/media/' . $post->ID, rest_get_route_for_post( $post ) );
+	}
+
+	/**
+	 * @ticket 49116
+	 */
+	public function test_rest_get_route_for_post_id() {
+		$post = self::factory()->post->create_and_get();
+		$this->assertSame( '/wp/v2/posts/' . $post->ID, rest_get_route_for_post( $post->ID ) );
+	}
+
+	/**
+	 * @ticket 49116
+	 */
+	public function test_rest_get_route_for_term_non_term() {
+		$this->assertSame( '', rest_get_route_for_term( 'garbage' ) );
+	}
+
+	/**
+	 * @ticket 49116
+	 */
+	public function test_rest_get_route_for_term_invalid_term_type() {
+		register_taxonomy( 'invalid', 'post' );
+		$term = self::factory()->term->create_and_get( array( 'taxonomy' => 'invalid' ) );
+		unregister_taxonomy( 'invalid' );
+
+		$this->assertSame( '', rest_get_route_for_term( $term ) );
+	}
+
+	/**
+	 * @ticket 49116
+	 */
+	public function test_rest_get_route_for_term_non_rest() {
+		$term = self::factory()->term->create_and_get( array( 'taxonomy' => 'post_format' ) );
+		$this->assertSame( '', rest_get_route_for_term( $term ) );
+	}
+
+	/**
+	 * @ticket 49116
+	 */
+	public function test_rest_get_route_for_term() {
+		$term = self::factory()->term->create_and_get();
+		$this->assertSame( '/wp/v2/tags/' . $term->term_id, rest_get_route_for_term( $term ) );
+	}
+
+	/**
+	 * @ticket 49116
+	 */
+	public function test_rest_get_route_for_category() {
+		$term = self::factory()->category->create_and_get();
+		$this->assertSame( '/wp/v2/categories/' . $term->term_id, rest_get_route_for_term( $term ) );
+	}
+
+	/**
+	 * @ticket 49116
+	 */
+	public function test_rest_get_route_for_term_id() {
+		$term = self::factory()->term->create_and_get();
+		$this->assertSame( '/wp/v2/tags/' . $term->term_id, rest_get_route_for_term( $term->term_id ) );
+	}
+
+	/**
+	 * @ticket 50300
+	 *
+	 * @dataProvider _dp_rest_is_object
+	 *
+	 * @param bool  $expected Expected result of the check.
+	 * @param mixed $value    The value to check.
+	 */
+	public function test_rest_is_object( $expected, $value ) {
+		$is_object = rest_is_object( $value );
+
+		if ( $expected ) {
+			$this->assertTrue( $is_object );
+		} else {
+			$this->assertFalse( $is_object );
+		}
+	}
+
+	public function _dp_rest_is_object() {
+		return array(
+			array(
+				true,
+				'',
+			),
+			array(
+				true,
+				new stdClass(),
+			),
+			array(
+				true,
+				new JsonSerializable_Object( array( 'hi' => 'there' ) ),
+			),
+			array(
+				true,
+				array( 'hi' => 'there' ),
+			),
+			array(
+				true,
+				array(),
+			),
+			array(
+				true,
+				array( 'a', 'b' ),
+			),
+			array(
+				false,
+				new Basic_Object(),
+			),
+			array(
+				false,
+				new JsonSerializable_Object( 'str' ),
+			),
+			array(
+				false,
+				'str',
+			),
+			array(
+				false,
+				5,
+			),
+		);
+	}
+
+	/**
+	 * @ticket 50300
+	 *
+	 * @dataProvider _dp_rest_sanitize_object
+	 *
+	 * @param array $expected Expected sanitized version.
+	 * @param mixed $value    The value to sanitize.
+	 */
+	public function test_rest_sanitize_object( $expected, $value ) {
+		$sanitized = rest_sanitize_object( $value );
+		$this->assertSame( $expected, $sanitized );
+	}
+
+	public function _dp_rest_sanitize_object() {
+		return array(
+			array(
+				array(),
+				'',
+			),
+			array(
+				array( 'a' => '1' ),
+				(object) array( 'a' => '1' ),
+			),
+			array(
+				array( 'hi' => 'there' ),
+				new JsonSerializable_Object( array( 'hi' => 'there' ) ),
+			),
+			array(
+				array( 'hi' => 'there' ),
+				array( 'hi' => 'there' ),
+			),
+			array(
+				array(),
+				array(),
+			),
+			array(
+				array( 'a', 'b' ),
+				array( 'a', 'b' ),
+			),
+			array(
+				array(),
+				new Basic_Object(),
+			),
+			array(
+				array(),
+				new JsonSerializable_Object( 'str' ),
+			),
+			array(
+				array(),
+				'str',
+			),
+			array(
+				array(),
+				5,
+			),
+		);
+	}
+
+	/**
+	 * @ticket 50300
+	 *
+	 * @dataProvider _dp_rest_is_array
+	 *
+	 * @param bool  $expected Expected result of the check.
+	 * @param mixed $value    The value to check.
+	 */
+	public function test_rest_is_array( $expected, $value ) {
+		$is_array = rest_is_array( $value );
+
+		if ( $expected ) {
+			$this->assertTrue( $is_array );
+		} else {
+			$this->assertFalse( $is_array );
+		}
+	}
+
+	public function _dp_rest_is_array() {
+		return array(
+			array(
+				true,
+				'',
+			),
+			array(
+				true,
+				array( 'a', 'b' ),
+			),
+			array(
+				true,
+				array(),
+			),
+			array(
+				true,
+				'a,b,c',
+			),
+			array(
+				true,
+				'a',
+			),
+			array(
+				true,
+				5,
+			),
+			array(
+				false,
+				new stdClass(),
+			),
+			array(
+				false,
+				new JsonSerializable_Object( array( 'hi' => 'there' ) ),
+			),
+			array(
+				false,
+				array( 'hi' => 'there' ),
+			),
+			array(
+				false,
+				new Basic_Object(),
+			),
+			array(
+				false,
+				new JsonSerializable_Object( 'str' ),
+			),
+			array(
+				false,
+				null,
+			),
+		);
+	}
+
+	/**
+	 * @ticket 50300
+	 *
+	 * @dataProvider _dp_rest_sanitize_array
+	 *
+	 * @param array $expected Expected sanitized version.
+	 * @param mixed $value    The value to sanitize.
+	 */
+	public function test_rest_sanitize_array( $expected, $value ) {
+		$sanitized = rest_sanitize_array( $value );
+		$this->assertSame( $expected, $sanitized );
+	}
+
+	public function _dp_rest_sanitize_array() {
+		return array(
+			array(
+				array(),
+				'',
+			),
+			array(
+				array( 'a', 'b' ),
+				array( 'a', 'b' ),
+			),
+			array(
+				array(),
+				array(),
+			),
+			array(
+				array( 'a', 'b', 'c' ),
+				'a,b,c',
+			),
+			array(
+				array( 'a' ),
+				'a',
+			),
+			array(
+				array( 'a', 'b' ),
+				'a,b,',
+			),
+			array(
+				array( '5' ),
+				5,
+			),
+			array(
+				array(),
+				new stdClass(),
+			),
+			array(
+				array(),
+				new JsonSerializable_Object( array( 'hi' => 'there' ) ),
+			),
+			array(
+				array( 'there' ),
+				array( 'hi' => 'there' ),
+			),
+			array(
+				array(),
+				new Basic_Object(),
+			),
+			array(
+				array(),
+				new JsonSerializable_Object( 'str' ),
+			),
+			array(
+				array(),
+				null,
+			),
+		);
+	}
+
+	/**
+	 * @ticket 51146
+	 *
+	 * @dataProvider _dp_rest_is_integer
+	 *
+	 * @param bool  $expected Expected result of the check.
+	 * @param mixed $value    The value to check.
+	 */
+	public function test_rest_is_integer( $expected, $value ) {
+		$is_integer = rest_is_integer( $value );
+
+		if ( $expected ) {
+			$this->assertTrue( $is_integer );
+		} else {
+			$this->assertFalse( $is_integer );
+		}
+	}
+
+	public function _dp_rest_is_integer() {
+		return array(
+			array(
+				true,
+				1,
+			),
+			array(
+				true,
+				'1',
+			),
+			array(
+				true,
+				0,
+			),
+			array(
+				true,
+				-1,
+			),
+			array(
+				true,
+				'05',
+			),
+			array(
+				false,
+				'garbage',
+			),
+			array(
+				false,
+				5.5,
+			),
+			array(
+				false,
+				'5.5',
+			),
+			array(
+				false,
+				array(),
+			),
+			array(
+				false,
+				true,
+			),
+		);
+	}
+
+	/**
+	 * @ticket 50300
+	 *
+	 * @dataProvider _dp_get_best_type_for_value
+	 *
+	 * @param string $expected The expected best type.
+	 * @param mixed  $value    The value to test.
+	 * @param array  $types    The list of available types.
+	 */
+	public function test_get_best_type_for_value( $expected, $value, $types ) {
+		$this->assertSame( $expected, rest_get_best_type_for_value( $value, $types ) );
+	}
+
+	public function _dp_get_best_type_for_value() {
+		return array(
+			array(
+				'array',
+				array( 'hi' ),
+				array( 'array' ),
+			),
+			array(
+				'object',
+				array( 'hi' => 'there' ),
+				array( 'object' ),
+			),
+			array(
+				'integer',
+				5,
+				array( 'integer' ),
+			),
+			array(
+				'number',
+				4.0,
+				array( 'number' ),
+			),
+			array(
+				'boolean',
+				true,
+				array( 'boolean' ),
+			),
+			array(
+				'string',
+				'str',
+				array( 'string' ),
+			),
+			array(
+				'null',
+				null,
+				array( 'null' ),
+			),
+			array(
+				'string',
+				'',
+				array( 'array', 'string' ),
+			),
+			array(
+				'string',
+				'',
+				array( 'object', 'string' ),
+			),
+			array(
+				'string',
+				'Hello',
+				array( 'object', 'string' ),
+			),
+			array(
+				'object',
+				array( 'hello' => 'world' ),
+				array( 'object', 'string' ),
+			),
+			array(
+				'number',
+				'5.0',
+				array( 'number', 'string' ),
+			),
+			array(
+				'string',
+				'5.0',
+				array( 'string', 'number' ),
+			),
+			array(
+				'boolean',
+				'false',
+				array( 'boolean', 'string' ),
+			),
+			array(
+				'string',
+				'false',
+				array( 'string', 'boolean' ),
+			),
+			array(
+				'string',
+				'a,b',
+				array( 'string', 'array' ),
+			),
+			array(
+				'array',
+				'a,b',
+				array( 'array', 'string' ),
+			),
+			array(
+				'string',
+				'hello',
+				array( 'integer', 'string' ),
+			),
+		);
 	}
 }
diff --git a/tests/rest-api/json_schema_test_suite/uniqueitems.json b/tests/rest-api/json_schema_test_suite/uniqueitems.json
new file mode 100644
index 0000000000..4c22e21ea7
--- /dev/null
+++ b/tests/rest-api/json_schema_test_suite/uniqueitems.json
@@ -0,0 +1,374 @@
+[
+  {
+	"description": "uniqueItems validation",
+	"schema": {"uniqueItems": true},
+	"tests": [
+	  {
+		"description": "unique array of integers is valid",
+		"data": [1, 2],
+		"valid": true
+	  },
+	  {
+		"description": "non-unique array of integers is invalid",
+		"data": [1, 1],
+		"valid": false
+	  },
+	  {
+		"description": "numbers are unique if mathematically unequal",
+		"data": [1.0, 1.00, 1],
+		"valid": false
+	  },
+	  {
+		"description": "false is not equal to zero",
+		"data": [0, false],
+		"valid": true
+	  },
+	  {
+		"description": "true is not equal to one",
+		"data": [1, true],
+		"valid": true
+	  },
+	  {
+		"description": "unique array of objects is valid",
+		"data": [{"foo": "bar"}, {"foo": "baz"}],
+		"valid": true
+	  },
+	  {
+		"description": "non-unique array of objects is invalid",
+		"data": [{"foo": "bar"}, {"foo": "bar"}],
+		"valid": false
+	  },
+	  {
+		"description": "unique array of nested objects is valid",
+		"data": [
+		  {"foo": {"bar" : {"baz" : true}}},
+		  {"foo": {"bar" : {"baz" : false}}}
+		],
+		"valid": true
+	  },
+	  {
+		"description": "non-unique array of nested objects is invalid",
+		"data": [
+		  {"foo": {"bar" : {"baz" : true}}},
+		  {"foo": {"bar" : {"baz" : true}}}
+		],
+		"valid": false
+	  },
+	  {
+		"description": "unique array of arrays is valid",
+		"data": [["foo"], ["bar"]],
+		"valid": true
+	  },
+	  {
+		"description": "non-unique array of arrays is invalid",
+		"data": [["foo"], ["foo"]],
+		"valid": false
+	  },
+	  {
+		"description": "1 and true are unique",
+		"data": [1, true],
+		"valid": true
+	  },
+	  {
+		"description": "0 and false are unique",
+		"data": [0, false],
+		"valid": true
+	  },
+	  {
+		"description": "[1] and [true] are unique",
+		"data": [[1], [true]],
+		"valid": true
+	  },
+	  {
+		"description": "[0] and [false] are unique",
+		"data": [[0], [false]],
+		"valid": true
+	  },
+	  {
+		"description": "nested [1] and [true] are unique",
+		"data": [[[1], "foo"], [[true], "foo"]],
+		"valid": true
+	  },
+	  {
+		"description": "nested [0] and [false] are unique",
+		"data": [[[0], "foo"], [[false], "foo"]],
+		"valid": true
+	  },
+	  {
+		"description": "unique heterogeneous types are valid",
+		"data": [{}, [1], true, null, 1, "{}"],
+		"valid": true
+	  },
+	  {
+		"description": "non-unique heterogeneous types are invalid",
+		"data": [{}, [1], true, null, {}, 1],
+		"valid": false
+	  },
+	  {
+		"description": "different objects are unique",
+		"data": [{"a": 1, "b": 2}, {"a": 2, "b": 1}],
+		"valid": true
+	  },
+	  {
+		"description": "objects are non-unique despite key order",
+		"data": [{"a": 1, "b": 2}, {"b": 2, "a": 1}],
+		"valid": false
+	  }
+	]
+  },
+  {
+	"description": "uniqueItems with an array of items",
+	"schema": {
+	  "items": [{"type": "boolean"}, {"type": "boolean"}],
+	  "uniqueItems": true
+	},
+	"tests": [
+	  {
+		"description": "[false, true] from items array is valid",
+		"data": [false, true],
+		"valid": true
+	  },
+	  {
+		"description": "[true, false] from items array is valid",
+		"data": [true, false],
+		"valid": true
+	  },
+	  {
+		"description": "[false, false] from items array is not valid",
+		"data": [false, false],
+		"valid": false
+	  },
+	  {
+		"description": "[true, true] from items array is not valid",
+		"data": [true, true],
+		"valid": false
+	  },
+	  {
+		"description": "unique array extended from [false, true] is valid",
+		"data": [false, true, "foo", "bar"],
+		"valid": true
+	  },
+	  {
+		"description": "unique array extended from [true, false] is valid",
+		"data": [true, false, "foo", "bar"],
+		"valid": true
+	  },
+	  {
+		"description": "non-unique array extended from [false, true] is not valid",
+		"data": [false, true, "foo", "foo"],
+		"valid": false
+	  },
+	  {
+		"description": "non-unique array extended from [true, false] is not valid",
+		"data": [true, false, "foo", "foo"],
+		"valid": false
+	  }
+	]
+  },
+  {
+	"description": "uniqueItems with an array of items and additionalItems=false",
+	"schema": {
+	  "items": [{"type": "boolean"}, {"type": "boolean"}],
+	  "uniqueItems": true,
+	  "additionalItems": false
+	},
+	"tests": [
+	  {
+		"description": "[false, true] from items array is valid",
+		"data": [false, true],
+		"valid": true
+	  },
+	  {
+		"description": "[true, false] from items array is valid",
+		"data": [true, false],
+		"valid": true
+	  },
+	  {
+		"description": "[false, false] from items array is not valid",
+		"data": [false, false],
+		"valid": false
+	  },
+	  {
+		"description": "[true, true] from items array is not valid",
+		"data": [true, true],
+		"valid": false
+	  },
+	  {
+		"description": "extra items are invalid even if unique",
+		"data": [false, true, null],
+		"valid": false
+	  }
+	]
+  },
+  {
+	"description": "uniqueItems=false validation",
+	"schema": { "uniqueItems": false },
+	"tests": [
+	  {
+		"description": "unique array of integers is valid",
+		"data": [1, 2],
+		"valid": true
+	  },
+	  {
+		"description": "non-unique array of integers is valid",
+		"data": [1, 1],
+		"valid": true
+	  },
+	  {
+		"description": "numbers are unique if mathematically unequal",
+		"data": [1.0, 1.00, 1],
+		"valid": true
+	  },
+	  {
+		"description": "false is not equal to zero",
+		"data": [0, false],
+		"valid": true
+	  },
+	  {
+		"description": "true is not equal to one",
+		"data": [1, true],
+		"valid": true
+	  },
+	  {
+		"description": "unique array of objects is valid",
+		"data": [{"foo": "bar"}, {"foo": "baz"}],
+		"valid": true
+	  },
+	  {
+		"description": "non-unique array of objects is valid",
+		"data": [{"foo": "bar"}, {"foo": "bar"}],
+		"valid": true
+	  },
+	  {
+		"description": "unique array of nested objects is valid",
+		"data": [
+		  {"foo": {"bar" : {"baz" : true}}},
+		  {"foo": {"bar" : {"baz" : false}}}
+		],
+		"valid": true
+	  },
+	  {
+		"description": "non-unique array of nested objects is valid",
+		"data": [
+		  {"foo": {"bar" : {"baz" : true}}},
+		  {"foo": {"bar" : {"baz" : true}}}
+		],
+		"valid": true
+	  },
+	  {
+		"description": "unique array of arrays is valid",
+		"data": [["foo"], ["bar"]],
+		"valid": true
+	  },
+	  {
+		"description": "non-unique array of arrays is valid",
+		"data": [["foo"], ["foo"]],
+		"valid": true
+	  },
+	  {
+		"description": "1 and true are unique",
+		"data": [1, true],
+		"valid": true
+	  },
+	  {
+		"description": "0 and false are unique",
+		"data": [0, false],
+		"valid": true
+	  },
+	  {
+		"description": "unique heterogeneous types are valid",
+		"data": [{}, [1], true, null, 1],
+		"valid": true
+	  },
+	  {
+		"description": "non-unique heterogeneous types are valid",
+		"data": [{}, [1], true, null, {}, 1],
+		"valid": true
+	  }
+	]
+  },
+  {
+	"description": "uniqueItems=false with an array of items",
+	"schema": {
+	  "items": [{"type": "boolean"}, {"type": "boolean"}],
+	  "uniqueItems": false
+	},
+	"tests": [
+	  {
+		"description": "[false, true] from items array is valid",
+		"data": [false, true],
+		"valid": true
+	  },
+	  {
+		"description": "[true, false] from items array is valid",
+		"data": [true, false],
+		"valid": true
+	  },
+	  {
+		"description": "[false, false] from items array is valid",
+		"data": [false, false],
+		"valid": true
+	  },
+	  {
+		"description": "[true, true] from items array is valid",
+		"data": [true, true],
+		"valid": true
+	  },
+	  {
+		"description": "unique array extended from [false, true] is valid",
+		"data": [false, true, "foo", "bar"],
+		"valid": true
+	  },
+	  {
+		"description": "unique array extended from [true, false] is valid",
+		"data": [true, false, "foo", "bar"],
+		"valid": true
+	  },
+	  {
+		"description": "non-unique array extended from [false, true] is valid",
+		"data": [false, true, "foo", "foo"],
+		"valid": true
+	  },
+	  {
+		"description": "non-unique array extended from [true, false] is valid",
+		"data": [true, false, "foo", "foo"],
+		"valid": true
+	  }
+	]
+  },
+  {
+	"description": "uniqueItems=false with an array of items and additionalItems=false",
+	"schema": {
+	  "items": [{"type": "boolean"}, {"type": "boolean"}],
+	  "uniqueItems": false,
+	  "additionalItems": false
+	},
+	"tests": [
+	  {
+		"description": "[false, true] from items array is valid",
+		"data": [false, true],
+		"valid": true
+	  },
+	  {
+		"description": "[true, false] from items array is valid",
+		"data": [true, false],
+		"valid": true
+	  },
+	  {
+		"description": "[false, false] from items array is valid",
+		"data": [false, false],
+		"valid": true
+	  },
+	  {
+		"description": "[true, true] from items array is valid",
+		"data": [true, true],
+		"valid": true
+	  },
+	  {
+		"description": "extra items are invalid even if unique",
+		"data": [false, true, null],
+		"valid": false
+	  }
+	]
+  }
+]
diff --git a/tests/rest-api/rest-attachments-controller.php b/tests/rest-api/rest-attachments-controller.php
index dc0b61835d..571337f6d4 100644
--- a/tests/rest-api/rest-attachments-controller.php
+++ b/tests/rest-api/rest-attachments-controller.php
@@ -19,6 +19,16 @@ class WP_Test_REST_Attachments_Controller extends WP_Test_REST_Post_Type_Control
 	protected static $rest_after_insert_attachment_count;
 	protected static $rest_insert_attachment_count;
 
+	/**
+	 * @var string The path to a test file.
+	 */
+	private $test_file;
+
+	/**
+	 * @var string The path to a second test file.
+	 */
+	private $test_file2;
+
 	public static function wpSetUpBeforeClass( $factory ) {
 		self::$superadmin_id  = $factory->user->create(
 			array(
@@ -70,13 +80,35 @@ class WP_Test_REST_Attachments_Controller extends WP_Test_REST_Post_Type_Control
 		$role->add_cap( 'level_0' );
 
 		$orig_file       = DIR_TESTDATA . '/images/canola.jpg';
-		$this->test_file = '/tmp/canola.jpg';
+		$this->test_file = get_temp_dir() . 'canola.jpg';
 		copy( $orig_file, $this->test_file );
 		$orig_file2       = DIR_TESTDATA . '/images/codeispoetry.png';
-		$this->test_file2 = '/tmp/codeispoetry.png';
+		$this->test_file2 = get_temp_dir() . 'codeispoetry.png';
 		copy( $orig_file2, $this->test_file2 );
 	}
 
+	public function tearDown() {
+		parent::tearDown();
+
+		if ( file_exists( $this->test_file ) ) {
+			unlink( $this->test_file );
+		}
+		if ( file_exists( $this->test_file2 ) ) {
+			unlink( $this->test_file2 );
+		}
+
+		remove_action( 'rest_insert_attachment', array( $this, 'filter_rest_insert_attachment' ) );
+		remove_action( 'rest_after_insert_attachment', array( $this, 'filter_rest_after_insert_attachment' ) );
+
+		$this->remove_added_uploads();
+
+		if ( class_exists( WP_Image_Editor_Mock::class ) ) {
+			WP_Image_Editor_Mock::$spy         = array();
+			WP_Image_Editor_Mock::$edit_return = array();
+			WP_Image_Editor_Mock::$size_return = null;
+		}
+	}
+
 	public function test_register_routes() {
 		$routes = rest_get_server()->get_routes();
 		$this->assertArrayHasKey( '/wp/v2/media', $routes );
@@ -87,12 +119,12 @@ class WP_Test_REST_Attachments_Controller extends WP_Test_REST_Post_Type_Control
 
 	public static function disposition_provider() {
 		return array(
-			// Types
+			// Types.
 			array( 'attachment; filename="foo.jpg"', 'foo.jpg' ),
 			array( 'inline; filename="foo.jpg"', 'foo.jpg' ),
 			array( 'form-data; filename="foo.jpg"', 'foo.jpg' ),
 
-			// Formatting
+			// Formatting.
 			array( 'attachment; filename="foo.jpg"', 'foo.jpg' ),
 			array( 'attachment; filename=foo.jpg', 'foo.jpg' ),
 			array( 'attachment;filename="foo.jpg"', 'foo.jpg' ),
@@ -103,13 +135,13 @@ class WP_Test_REST_Attachments_Controller extends WP_Test_REST_Post_Type_Control
 			array( "attachment;\tfilename\t=\tfoo.jpg", 'foo.jpg' ),
 			array( 'attachment; filename = my foo picture.jpg', 'my foo picture.jpg' ),
 
-			// Extensions
+			// Extensions.
 			array( 'form-data; name="myfile"; filename="foo.jpg"', 'foo.jpg' ),
 			array( 'form-data; name="myfile"; filename="foo.jpg"; something="else"', 'foo.jpg' ),
 			array( 'form-data; name=myfile; filename=foo.jpg; something=else', 'foo.jpg' ),
 			array( 'form-data; name=myfile; filename=my foo.jpg; something=else', 'my foo.jpg' ),
 
-			// Invalid
+			// Invalid.
 			array( 'filename="foo.jpg"', null ),
 			array( 'filename-foo.jpg', null ),
 			array( 'foo.jpg', null ),
@@ -123,17 +155,17 @@ class WP_Test_REST_Attachments_Controller extends WP_Test_REST_Post_Type_Control
 	public function test_parse_disposition( $header, $expected ) {
 		$header_list = array( $header );
 		$parsed      = WP_REST_Attachments_Controller::get_filename_from_disposition( $header_list );
-		$this->assertEquals( $expected, $parsed );
+		$this->assertSame( $expected, $parsed );
 	}
 
 	public function test_context_param() {
-		// Collection
+		// Collection.
 		$request  = new WP_REST_Request( 'OPTIONS', '/wp/v2/media' );
 		$response = rest_get_server()->dispatch( $request );
 		$data     = $response->get_data();
-		$this->assertEquals( 'view', $data['endpoints'][0]['args']['context']['default'] );
-		$this->assertEquals( array( 'view', 'embed', 'edit' ), $data['endpoints'][0]['args']['context']['enum'] );
-		// Single
+		$this->assertSame( 'view', $data['endpoints'][0]['args']['context']['default'] );
+		$this->assertSame( array( 'view', 'embed', 'edit' ), $data['endpoints'][0]['args']['context']['enum'] );
+		// Single.
 		$attachment_id = $this->factory->attachment->create_object(
 			$this->test_file,
 			0,
@@ -145,8 +177,8 @@ class WP_Test_REST_Attachments_Controller extends WP_Test_REST_Post_Type_Control
 		$request       = new WP_REST_Request( 'OPTIONS', '/wp/v2/media/' . $attachment_id );
 		$response      = rest_get_server()->dispatch( $request );
 		$data          = $response->get_data();
-		$this->assertEquals( 'view', $data['endpoints'][0]['args']['context']['default'] );
-		$this->assertEquals( array( 'view', 'embed', 'edit' ), $data['endpoints'][0]['args']['context']['enum'] );
+		$this->assertSame( 'view', $data['endpoints'][0]['args']['context']['default'] );
+		$this->assertSame( array( 'view', 'embed', 'edit' ), $data['endpoints'][0]['args']['context']['enum'] );
 	}
 
 	public function test_registered_query_params() {
@@ -155,7 +187,7 @@ class WP_Test_REST_Attachments_Controller extends WP_Test_REST_Post_Type_Control
 		$data     = $response->get_data();
 		$keys     = array_keys( $data['endpoints'][0]['args'] );
 		sort( $keys );
-		$this->assertEquals(
+		$this->assertSame(
 			array(
 				'after',
 				'author',
@@ -188,7 +220,7 @@ class WP_Test_REST_Attachments_Controller extends WP_Test_REST_Post_Type_Control
 		if ( ! is_multisite() ) {
 			$media_types[] = 'text';
 		}
-		$this->assertEqualSets( $media_types, $data['endpoints'][0]['args']['media_type']['enum'] );
+		$this->assertSameSets( $media_types, $data['endpoints'][0]['args']['media_type']['enum'] );
 	}
 
 	public function test_registered_get_item_params() {
@@ -205,7 +237,7 @@ class WP_Test_REST_Attachments_Controller extends WP_Test_REST_Post_Type_Control
 		$data     = $response->get_data();
 		$keys     = array_keys( $data['endpoints'][0]['args'] );
 		sort( $keys );
-		$this->assertEquals( array( 'context', 'id' ), $keys );
+		$this->assertSame( array( 'context', 'id' ), $keys );
 	}
 
 	/**
@@ -226,7 +258,7 @@ class WP_Test_REST_Attachments_Controller extends WP_Test_REST_Post_Type_Control
 		$headers  = $response->get_headers();
 
 		$this->assertNotEmpty( $headers['Allow'] );
-		$this->assertEquals( $headers['Allow'], 'GET' );
+		$this->assertSame( $headers['Allow'], 'GET' );
 
 		wp_set_current_user( self::$editor_id );
 		$request  = new WP_REST_Request( 'OPTIONS', sprintf( '/wp/v2/media/%d', $id1 ) );
@@ -235,7 +267,7 @@ class WP_Test_REST_Attachments_Controller extends WP_Test_REST_Post_Type_Control
 		$headers  = $response->get_headers();
 
 		$this->assertNotEmpty( $headers['Allow'] );
-		$this->assertEquals( $headers['Allow'], 'GET, POST, PUT, PATCH, DELETE' );
+		$this->assertSame( $headers['Allow'], 'GET, POST, PUT, PATCH, DELETE' );
 	}
 
 	public function test_get_items() {
@@ -328,16 +360,16 @@ class WP_Test_REST_Attachments_Controller extends WP_Test_REST_Post_Type_Control
 		$request  = new WP_REST_Request( 'GET', '/wp/v2/media' );
 		$response = rest_get_server()->dispatch( $request );
 		$data     = $response->get_data();
-		$this->assertEquals( $id1, $data[0]['id'] );
-		// media_type=video
+		$this->assertSame( $id1, $data[0]['id'] );
+		// 'media_type' => 'video'.
 		$request->set_param( 'media_type', 'video' );
 		$response = rest_get_server()->dispatch( $request );
 		$this->assertCount( 0, $response->get_data() );
-		// media_type=image
+		// 'media_type' => 'image'.
 		$request->set_param( 'media_type', 'image' );
 		$response = rest_get_server()->dispatch( $request );
 		$data     = $response->get_data();
-		$this->assertEquals( $id1, $data[0]['id'] );
+		$this->assertSame( $id1, $data[0]['id'] );
 	}
 
 	public function test_get_items_mime_type() {
@@ -351,16 +383,16 @@ class WP_Test_REST_Attachments_Controller extends WP_Test_REST_Post_Type_Control
 		$request  = new WP_REST_Request( 'GET', '/wp/v2/media' );
 		$response = rest_get_server()->dispatch( $request );
 		$data     = $response->get_data();
-		$this->assertEquals( $id1, $data[0]['id'] );
-		// mime_type=image/png
+		$this->assertSame( $id1, $data[0]['id'] );
+		// 'mime_type' => 'image/png'.
 		$request->set_param( 'mime_type', 'image/png' );
 		$response = rest_get_server()->dispatch( $request );
 		$this->assertCount( 0, $response->get_data() );
-		// mime_type=image/jpeg
+		// 'mime_type' => 'image/jpeg'.
 		$request->set_param( 'mime_type', 'image/jpeg' );
 		$response = rest_get_server()->dispatch( $request );
 		$data     = $response->get_data();
-		$this->assertEquals( $id1, $data[0]['id'] );
+		$this->assertSame( $id1, $data[0]['id'] );
 	}
 
 	public function test_get_items_parent() {
@@ -381,30 +413,30 @@ class WP_Test_REST_Attachments_Controller extends WP_Test_REST_Post_Type_Control
 				'post_excerpt'   => 'A sample caption',
 			)
 		);
-		// all attachments
+		// All attachments.
 		$request  = new WP_REST_Request( 'GET', '/wp/v2/media' );
 		$response = rest_get_server()->dispatch( $request );
-		$this->assertEquals( 2, count( $response->get_data() ) );
+		$this->assertSame( 2, count( $response->get_data() ) );
 		$request = new WP_REST_Request( 'GET', '/wp/v2/media' );
-		// attachments without a parent
+		// Attachments without a parent.
 		$request->set_param( 'parent', 0 );
 		$response = rest_get_server()->dispatch( $request );
 		$data     = $response->get_data();
-		$this->assertEquals( 1, count( $data ) );
-		$this->assertEquals( $attachment_id2, $data[0]['id'] );
-		// attachments with parent=post_id
+		$this->assertSame( 1, count( $data ) );
+		$this->assertSame( $attachment_id2, $data[0]['id'] );
+		// Attachments with parent=post_id.
 		$request = new WP_REST_Request( 'GET', '/wp/v2/media' );
 		$request->set_param( 'parent', $post_id );
 		$response = rest_get_server()->dispatch( $request );
 		$data     = $response->get_data();
-		$this->assertEquals( 1, count( $data ) );
-		$this->assertEquals( $attachment_id, $data[0]['id'] );
-		// attachments with invalid parent
+		$this->assertSame( 1, count( $data ) );
+		$this->assertSame( $attachment_id, $data[0]['id'] );
+		// Attachments with invalid parent.
 		$request = new WP_REST_Request( 'GET', '/wp/v2/media' );
 		$request->set_param( 'parent', REST_TESTS_IMPOSSIBLY_HIGH_NUMBER );
 		$response = rest_get_server()->dispatch( $request );
 		$data     = $response->get_data();
-		$this->assertEquals( 0, count( $data ) );
+		$this->assertSame( 0, count( $data ) );
 	}
 
 	public function test_get_items_invalid_status_param_is_error_response() {
@@ -423,11 +455,11 @@ class WP_Test_REST_Attachments_Controller extends WP_Test_REST_Post_Type_Control
 		$response = rest_get_server()->dispatch( $request );
 		$data     = $response->get_data();
 		$this->assertCount( 3, $data );
-		$this->assertEquals( 'rest_invalid_param', $data['code'] );
+		$this->assertSame( 'rest_invalid_param', $data['code'] );
 	}
 
 	public function test_get_items_private_status() {
-		// Logged out users can't make the request
+		// Logged out users can't make the request.
 		wp_set_current_user( 0 );
 		$attachment_id1 = $this->factory->attachment->create_object(
 			$this->test_file,
@@ -442,16 +474,16 @@ class WP_Test_REST_Attachments_Controller extends WP_Test_REST_Post_Type_Control
 		$request->set_param( 'status', 'private' );
 		$response = rest_get_server()->dispatch( $request );
 		$this->assertErrorResponse( 'rest_invalid_param', $response, 400 );
-		// Properly authorized users can make the request
+		// Properly authorized users can make the request.
 		wp_set_current_user( self::$editor_id );
 		$response = rest_get_server()->dispatch( $request );
-		$this->assertEquals( 200, $response->get_status() );
+		$this->assertSame( 200, $response->get_status() );
 		$data = $response->get_data();
-		$this->assertEquals( $attachment_id1, $data[0]['id'] );
+		$this->assertSame( $attachment_id1, $data[0]['id'] );
 	}
 
 	public function test_get_items_multiple_statuses() {
-		// Logged out users can't make the request
+		// Logged out users can't make the request.
 		wp_set_current_user( 0 );
 		$attachment_id1 = $this->factory->attachment->create_object(
 			$this->test_file,
@@ -475,18 +507,18 @@ class WP_Test_REST_Attachments_Controller extends WP_Test_REST_Post_Type_Control
 		$request->set_param( 'status', array( 'private', 'trash' ) );
 		$response = rest_get_server()->dispatch( $request );
 		$this->assertErrorResponse( 'rest_invalid_param', $response, 400 );
-		// Properly authorized users can make the request
+		// Properly authorized users can make the request.
 		wp_set_current_user( self::$editor_id );
 		$response = rest_get_server()->dispatch( $request );
-		$this->assertEquals( 200, $response->get_status() );
+		$this->assertSame( 200, $response->get_status() );
 		$data = $response->get_data();
-		$this->assertEquals( 2, count( $data ) );
+		$this->assertSame( 2, count( $data ) );
 		$ids = array(
 			$data[0]['id'],
 			$data[1]['id'],
 		);
 		sort( $ids );
-		$this->assertEquals( array( $attachment_id1, $attachment_id2 ), $ids );
+		$this->assertSame( array( $attachment_id1, $attachment_id2 ), $ids );
 	}
 
 	public function test_get_items_invalid_date() {
@@ -531,7 +563,7 @@ class WP_Test_REST_Attachments_Controller extends WP_Test_REST_Post_Type_Control
 		$response = rest_get_server()->dispatch( $request );
 		$data     = $response->get_data();
 		$this->assertCount( 1, $data );
-		$this->assertEquals( $id2, $data[0]['id'] );
+		$this->assertSame( $id2, $data[0]['id'] );
 	}
 
 	public function test_get_item() {
@@ -548,7 +580,7 @@ class WP_Test_REST_Attachments_Controller extends WP_Test_REST_Post_Type_Control
 		$response = rest_get_server()->dispatch( $request );
 		$this->check_get_post_response( $response );
 		$data = $response->get_data();
-		$this->assertEquals( 'image/jpeg', $data['mime_type'] );
+		$this->assertSame( 'image/jpeg', $data['mime_type'] );
 	}
 
 	public function test_get_item_sizes() {
@@ -572,10 +604,10 @@ class WP_Test_REST_Attachments_Controller extends WP_Test_REST_Post_Type_Control
 		$original_image_src = wp_get_attachment_image_src( $attachment_id, 'full' );
 		remove_image_size( 'rest-api-test' );
 
-		$this->assertEquals( $image_src[0], $data['media_details']['sizes']['rest-api-test']['source_url'] );
-		$this->assertEquals( 'image/jpeg', $data['media_details']['sizes']['rest-api-test']['mime_type'] );
-		$this->assertEquals( $original_image_src[0], $data['media_details']['sizes']['full']['source_url'] );
-		$this->assertEquals( 'image/jpeg', $data['media_details']['sizes']['full']['mime_type'] );
+		$this->assertSame( $image_src[0], $data['media_details']['sizes']['rest-api-test']['source_url'] );
+		$this->assertSame( 'image/jpeg', $data['media_details']['sizes']['rest-api-test']['mime_type'] );
+		$this->assertSame( $original_image_src[0], $data['media_details']['sizes']['full']['source_url'] );
+		$this->assertSame( 'image/jpeg', $data['media_details']['sizes']['full']['mime_type'] );
 	}
 
 	public function test_get_item_sizes_with_no_url() {
@@ -616,7 +648,7 @@ class WP_Test_REST_Attachments_Controller extends WP_Test_REST_Post_Type_Control
 		);
 		$request    = new WP_REST_Request( 'GET', '/wp/v2/media/' . $id1 );
 		$response   = rest_get_server()->dispatch( $request );
-		$this->assertEquals( 401, $response->get_status() );
+		$this->assertSame( 401, $response->get_status() );
 	}
 
 	public function test_get_item_inherit_status_with_invalid_parent() {
@@ -632,8 +664,8 @@ class WP_Test_REST_Attachments_Controller extends WP_Test_REST_Post_Type_Control
 		$response      = rest_get_server()->dispatch( $request );
 		$data          = $response->get_data();
 
-		$this->assertEquals( 200, $response->get_status() );
-		$this->assertEquals( $attachment_id, $data['id'] );
+		$this->assertSame( 200, $response->get_status() );
+		$this->assertSame( $attachment_id, $data['id'] );
 	}
 
 	public function test_get_item_auto_status_with_invalid_parent_not_authenticated_returns_error() {
@@ -667,18 +699,18 @@ class WP_Test_REST_Attachments_Controller extends WP_Test_REST_Post_Type_Control
 		$response = rest_get_server()->dispatch( $request );
 		$data     = $response->get_data();
 
-		$this->assertEquals( 201, $response->get_status() );
-		$this->assertEquals( 'image', $data['media_type'] );
+		$this->assertSame( 201, $response->get_status() );
+		$this->assertSame( 'image', $data['media_type'] );
 
 		$attachment = get_post( $data['id'] );
-		$this->assertEquals( 'My title is very cool', $data['title']['raw'] );
-		$this->assertEquals( 'My title is very cool', $attachment->post_title );
-		$this->assertEquals( 'This is a better caption.', $data['caption']['raw'] );
-		$this->assertEquals( 'This is a better caption.', $attachment->post_excerpt );
-		$this->assertEquals( 'Without a description, my attachment is descriptionless.', $data['description']['raw'] );
-		$this->assertEquals( 'Without a description, my attachment is descriptionless.', $attachment->post_content );
-		$this->assertEquals( 'Alt text is stored outside post schema.', $data['alt_text'] );
-		$this->assertEquals( 'Alt text is stored outside post schema.', get_post_meta( $attachment->ID, '_wp_attachment_image_alt', true ) );
+		$this->assertSame( 'My title is very cool', $data['title']['raw'] );
+		$this->assertSame( 'My title is very cool', $attachment->post_title );
+		$this->assertSame( 'This is a better caption.', $data['caption']['raw'] );
+		$this->assertSame( 'This is a better caption.', $attachment->post_excerpt );
+		$this->assertSame( 'Without a description, my attachment is descriptionless.', $data['description']['raw'] );
+		$this->assertSame( 'Without a description, my attachment is descriptionless.', $attachment->post_content );
+		$this->assertSame( 'Alt text is stored outside post schema.', $data['alt_text'] );
+		$this->assertSame( 'Alt text is stored outside post schema.', get_post_meta( $attachment->ID, '_wp_attachment_image_alt', true ) );
 	}
 
 	public function test_create_item_default_filename_title() {
@@ -696,9 +728,9 @@ class WP_Test_REST_Attachments_Controller extends WP_Test_REST_Post_Type_Control
 		);
 		$request->set_header( 'Content-MD5', md5_file( $this->test_file2 ) );
 		$response = rest_get_server()->dispatch( $request );
-		$this->assertEquals( 201, $response->get_status() );
+		$this->assertSame( 201, $response->get_status() );
 		$data = $response->get_data();
-		$this->assertEquals( 'codeispoetry', $data['title']['raw'] );
+		$this->assertSame( 'codeispoetry', $data['title']['raw'] );
 	}
 
 	public function test_create_item_with_files() {
@@ -716,7 +748,7 @@ class WP_Test_REST_Attachments_Controller extends WP_Test_REST_Post_Type_Control
 		);
 		$request->set_header( 'Content-MD5', md5_file( $this->test_file ) );
 		$response = rest_get_server()->dispatch( $request );
-		$this->assertEquals( 201, $response->get_status() );
+		$this->assertSame( 201, $response->get_status() );
 	}
 
 	public function test_create_item_with_upload_files_role() {
@@ -734,7 +766,7 @@ class WP_Test_REST_Attachments_Controller extends WP_Test_REST_Post_Type_Control
 		);
 		$request->set_header( 'Content-MD5', md5_file( $this->test_file ) );
 		$response = rest_get_server()->dispatch( $request );
-		$this->assertEquals( 201, $response->get_status() );
+		$this->assertSame( 201, $response->get_status() );
 	}
 
 	public function test_create_item_empty_body() {
@@ -843,7 +875,7 @@ class WP_Test_REST_Attachments_Controller extends WP_Test_REST_Post_Type_Control
 		$request->set_param( 'alt_text', 'test alt text' );
 		$response   = rest_get_server()->dispatch( $request );
 		$attachment = $response->get_data();
-		$this->assertEquals( 'test alt text', $attachment['alt_text'] );
+		$this->assertSame( 'test alt text', $attachment['alt_text'] );
 	}
 
 	public function test_create_item_unsafe_alt_text() {
@@ -855,7 +887,7 @@ class WP_Test_REST_Attachments_Controller extends WP_Test_REST_Post_Type_Control
 		$request->set_param( 'alt_text', '<script>alert(document.cookie)</script>' );
 		$response   = rest_get_server()->dispatch( $request );
 		$attachment = $response->get_data();
-		$this->assertEquals( '', $attachment['alt_text'] );
+		$this->assertSame( '', $attachment['alt_text'] );
 	}
 
 	/**
@@ -891,14 +923,14 @@ class WP_Test_REST_Attachments_Controller extends WP_Test_REST_Post_Type_Control
 		$response   = rest_get_server()->dispatch( $request );
 		$data       = $response->get_data();
 		$attachment = get_post( $data['id'] );
-		$this->assertEquals( 'My title is very cool', $data['title']['raw'] );
-		$this->assertEquals( 'My title is very cool', $attachment->post_title );
-		$this->assertEquals( 'This is a better caption.', $data['caption']['raw'] );
-		$this->assertEquals( 'This is a better caption.', $attachment->post_excerpt );
-		$this->assertEquals( 'Without a description, my attachment is descriptionless.', $data['description']['raw'] );
-		$this->assertEquals( 'Without a description, my attachment is descriptionless.', $attachment->post_content );
-		$this->assertEquals( 'Alt text is stored outside post schema.', $data['alt_text'] );
-		$this->assertEquals( 'Alt text is stored outside post schema.', get_post_meta( $attachment->ID, '_wp_attachment_image_alt', true ) );
+		$this->assertSame( 'My title is very cool', $data['title']['raw'] );
+		$this->assertSame( 'My title is very cool', $attachment->post_title );
+		$this->assertSame( 'This is a better caption.', $data['caption']['raw'] );
+		$this->assertSame( 'This is a better caption.', $attachment->post_excerpt );
+		$this->assertSame( 'Without a description, my attachment is descriptionless.', $data['description']['raw'] );
+		$this->assertSame( 'Without a description, my attachment is descriptionless.', $attachment->post_content );
+		$this->assertSame( 'Alt text is stored outside post schema.', $data['alt_text'] );
+		$this->assertSame( 'Alt text is stored outside post schema.', get_post_meta( $attachment->ID, '_wp_attachment_image_alt', true ) );
 	}
 
 	public function test_update_item_parent() {
@@ -915,7 +947,7 @@ class WP_Test_REST_Attachments_Controller extends WP_Test_REST_Post_Type_Control
 		);
 
 		$attachment = get_post( $attachment_id );
-		$this->assertEquals( $original_parent, $attachment->post_parent );
+		$this->assertSame( $original_parent, $attachment->post_parent );
 
 		$new_parent = $this->factory->post->create( array() );
 		$request    = new WP_REST_Request( 'POST', '/wp/v2/media/' . $attachment_id );
@@ -923,7 +955,7 @@ class WP_Test_REST_Attachments_Controller extends WP_Test_REST_Post_Type_Control
 		rest_get_server()->dispatch( $request );
 
 		$attachment = get_post( $attachment_id );
-		$this->assertEquals( $new_parent, $attachment->post_parent );
+		$this->assertSame( $new_parent, $attachment->post_parent );
 	}
 
 	public function test_update_item_invalid_permissions() {
@@ -968,7 +1000,7 @@ class WP_Test_REST_Attachments_Controller extends WP_Test_REST_Post_Type_Control
 	}
 
 	public function verify_attachment_roundtrip( $input = array(), $expected_output = array() ) {
-		// Create the post
+		// Create the post.
 		$request = new WP_REST_Request( 'POST', '/wp/v2/media' );
 		$request->set_header( 'Content-Type', 'image/jpeg' );
 		$request->set_header( 'Content-Disposition', 'attachment; filename=canola.jpg' );
@@ -978,11 +1010,11 @@ class WP_Test_REST_Attachments_Controller extends WP_Test_REST_Post_Type_Control
 			$request->set_param( $name, $value );
 		}
 		$response = rest_get_server()->dispatch( $request );
-		$this->assertEquals( 201, $response->get_status() );
+		$this->assertSame( 201, $response->get_status() );
 		$actual_output = $response->get_data();
 
-		// Remove <p class="attachment"> from rendered description
-		// see https://core.trac.wordpress.org/ticket/38679
+		// Remove <p class="attachment"> from rendered description.
+		// See https://core.trac.wordpress.org/ticket/38679
 		$content = $actual_output['description']['rendered'];
 		$content = explode( "\n", trim( $content ) );
 		if ( preg_match( '/^<p class="attachment">/', $content[0] ) ) {
@@ -990,31 +1022,31 @@ class WP_Test_REST_Attachments_Controller extends WP_Test_REST_Post_Type_Control
 			$actual_output['description']['rendered'] = $content;
 		}
 
-		// Compare expected API output to actual API output
-		$this->assertEquals( $expected_output['title']['raw'], $actual_output['title']['raw'] );
-		$this->assertEquals( $expected_output['title']['rendered'], trim( $actual_output['title']['rendered'] ) );
-		$this->assertEquals( $expected_output['description']['raw'], $actual_output['description']['raw'] );
-		$this->assertEquals( $expected_output['description']['rendered'], trim( $actual_output['description']['rendered'] ) );
-		$this->assertEquals( $expected_output['caption']['raw'], $actual_output['caption']['raw'] );
-		$this->assertEquals( $expected_output['caption']['rendered'], trim( $actual_output['caption']['rendered'] ) );
+		// Compare expected API output to actual API output.
+		$this->assertSame( $expected_output['title']['raw'], $actual_output['title']['raw'] );
+		$this->assertSame( $expected_output['title']['rendered'], trim( $actual_output['title']['rendered'] ) );
+		$this->assertSame( $expected_output['description']['raw'], $actual_output['description']['raw'] );
+		$this->assertSame( $expected_output['description']['rendered'], trim( $actual_output['description']['rendered'] ) );
+		$this->assertSame( $expected_output['caption']['raw'], $actual_output['caption']['raw'] );
+		$this->assertSame( $expected_output['caption']['rendered'], trim( $actual_output['caption']['rendered'] ) );
 
-		// Compare expected API output to WP internal values
+		// Compare expected API output to WP internal values.
 		$post = get_post( $actual_output['id'] );
-		$this->assertEquals( $expected_output['title']['raw'], $post->post_title );
-		$this->assertEquals( $expected_output['description']['raw'], $post->post_content );
-		$this->assertEquals( $expected_output['caption']['raw'], $post->post_excerpt );
+		$this->assertSame( $expected_output['title']['raw'], $post->post_title );
+		$this->assertSame( $expected_output['description']['raw'], $post->post_content );
+		$this->assertSame( $expected_output['caption']['raw'], $post->post_excerpt );
 
-		// Update the post
+		// Update the post.
 		$request = new WP_REST_Request( 'PUT', sprintf( '/wp/v2/media/%d', $actual_output['id'] ) );
 		foreach ( $input as $name => $value ) {
 			$request->set_param( $name, $value );
 		}
 		$response = rest_get_server()->dispatch( $request );
-		$this->assertEquals( 200, $response->get_status() );
+		$this->assertSame( 200, $response->get_status() );
 		$actual_output = $response->get_data();
 
-		// Remove <p class="attachment"> from rendered description
-		// see https://core.trac.wordpress.org/ticket/38679
+		// Remove <p class="attachment"> from rendered description.
+		// See https://core.trac.wordpress.org/ticket/38679
 		$content = $actual_output['description']['rendered'];
 		$content = explode( "\n", trim( $content ) );
 		if ( preg_match( '/^<p class="attachment">/', $content[0] ) ) {
@@ -1022,19 +1054,19 @@ class WP_Test_REST_Attachments_Controller extends WP_Test_REST_Post_Type_Control
 			$actual_output['description']['rendered'] = $content;
 		}
 
-		// Compare expected API output to actual API output
-		$this->assertEquals( $expected_output['title']['raw'], $actual_output['title']['raw'] );
-		$this->assertEquals( $expected_output['title']['rendered'], trim( $actual_output['title']['rendered'] ) );
-		$this->assertEquals( $expected_output['description']['raw'], $actual_output['description']['raw'] );
-		$this->assertEquals( $expected_output['description']['rendered'], trim( $actual_output['description']['rendered'] ) );
-		$this->assertEquals( $expected_output['caption']['raw'], $actual_output['caption']['raw'] );
-		$this->assertEquals( $expected_output['caption']['rendered'], trim( $actual_output['caption']['rendered'] ) );
+		// Compare expected API output to actual API output.
+		$this->assertSame( $expected_output['title']['raw'], $actual_output['title']['raw'] );
+		$this->assertSame( $expected_output['title']['rendered'], trim( $actual_output['title']['rendered'] ) );
+		$this->assertSame( $expected_output['description']['raw'], $actual_output['description']['raw'] );
+		$this->assertSame( $expected_output['description']['rendered'], trim( $actual_output['description']['rendered'] ) );
+		$this->assertSame( $expected_output['caption']['raw'], $actual_output['caption']['raw'] );
+		$this->assertSame( $expected_output['caption']['rendered'], trim( $actual_output['caption']['rendered'] ) );
 
-		// Compare expected API output to WP internal values
+		// Compare expected API output to WP internal values.
 		$post = get_post( $actual_output['id'] );
-		$this->assertEquals( $expected_output['title']['raw'], $post->post_title );
-		$this->assertEquals( $expected_output['description']['raw'], $post->post_content );
-		$this->assertEquals( $expected_output['caption']['raw'], $post->post_excerpt );
+		$this->assertSame( $expected_output['title']['raw'], $post->post_title );
+		$this->assertSame( $expected_output['description']['raw'], $post->post_content );
+		$this->assertSame( $expected_output['caption']['raw'], $post->post_excerpt );
 	}
 
 	public static function attachment_roundtrip_provider() {
@@ -1233,7 +1265,7 @@ class WP_Test_REST_Attachments_Controller extends WP_Test_REST_Post_Type_Control
 		$request          = new WP_REST_Request( 'DELETE', '/wp/v2/media/' . $attachment_id );
 		$request['force'] = true;
 		$response         = rest_get_server()->dispatch( $request );
-		$this->assertEquals( 200, $response->get_status() );
+		$this->assertSame( 200, $response->get_status() );
 	}
 
 	public function test_delete_item_no_trash() {
@@ -1247,7 +1279,7 @@ class WP_Test_REST_Attachments_Controller extends WP_Test_REST_Post_Type_Control
 			)
 		);
 
-		// Attempt trashing
+		// Attempt trashing.
 		$request  = new WP_REST_Request( 'DELETE', '/wp/v2/media/' . $attachment_id );
 		$response = rest_get_server()->dispatch( $request );
 		$this->assertErrorResponse( 'rest_trash_not_supported', $response, 501 );
@@ -1256,7 +1288,7 @@ class WP_Test_REST_Attachments_Controller extends WP_Test_REST_Post_Type_Control
 		$response = rest_get_server()->dispatch( $request );
 		$this->assertErrorResponse( 'rest_trash_not_supported', $response, 501 );
 
-		// Ensure the post still exists
+		// Ensure the post still exists.
 		$post = get_post( $attachment_id );
 		$this->assertNotEmpty( $post );
 	}
@@ -1313,7 +1345,7 @@ class WP_Test_REST_Attachments_Controller extends WP_Test_REST_Post_Type_Control
 		$request->set_param( '_fields', 'id,slug' );
 		$obj      = get_post( $attachment_id );
 		$response = $endpoint->prepare_item_for_response( $obj, $request );
-		$this->assertEquals(
+		$this->assertSame(
 			array(
 				'id',
 				'slug',
@@ -1327,7 +1359,7 @@ class WP_Test_REST_Attachments_Controller extends WP_Test_REST_Post_Type_Control
 		$response   = rest_get_server()->dispatch( $request );
 		$data       = $response->get_data();
 		$properties = $data['schema']['properties'];
-		$this->assertEquals( 27, count( $properties ) );
+		$this->assertSame( 27, count( $properties ) );
 		$this->assertArrayHasKey( 'author', $properties );
 		$this->assertArrayHasKey( 'alt_text', $properties );
 		$this->assertArrayHasKey( 'caption', $properties );
@@ -1386,7 +1418,7 @@ class WP_Test_REST_Attachments_Controller extends WP_Test_REST_Post_Type_Control
 		$response = rest_get_server()->dispatch( $request );
 		$data     = $response->get_data();
 		$this->assertArrayHasKey( 'my_custom_int', $data['schema']['properties'] );
-		$this->assertEquals( $schema, $data['schema']['properties']['my_custom_int'] );
+		$this->assertSame( $schema, $data['schema']['properties']['my_custom_int'] );
 
 		$attachment_id = $this->factory->attachment->create_object(
 			$this->test_file,
@@ -1451,7 +1483,7 @@ class WP_Test_REST_Attachments_Controller extends WP_Test_REST_Post_Type_Control
 	}
 
 	public function test_search_item_by_filename() {
-		$id  = $this->factory->attachment->create_object(
+		$id1 = $this->factory->attachment->create_object(
 			$this->test_file,
 			0,
 			array(
@@ -1474,8 +1506,8 @@ class WP_Test_REST_Attachments_Controller extends WP_Test_REST_Post_Type_Control
 		$data     = $response->get_data();
 
 		$this->assertCount( 1, $data );
-		$this->assertEquals( $id2, $data[0]['id'] );
-		$this->assertEquals( 'image/png', $data[0]['mime_type'] );
+		$this->assertSame( $id2, $data[0]['id'] );
+		$this->assertSame( 'image/png', $data[0]['mime_type'] );
 	}
 
 	public function additional_field_get_callback( $object, $request ) {
@@ -1537,31 +1569,16 @@ class WP_Test_REST_Attachments_Controller extends WP_Test_REST_Post_Type_Control
 		$this->assertArrayNotHasKey( 'https://api.w.org/action-publish', $links );
 	}
 
-	public function tearDown() {
-		parent::tearDown();
-		if ( file_exists( $this->test_file ) ) {
-			unlink( $this->test_file );
-		}
-		if ( file_exists( $this->test_file2 ) ) {
-			unlink( $this->test_file2 );
-		}
-
-		remove_action( 'rest_insert_attachment', array( $this, 'filter_rest_insert_attachment' ) );
-		remove_action( 'rest_after_insert_attachment', array( $this, 'filter_rest_after_insert_attachment' ) );
-
-		$this->remove_added_uploads();
-	}
-
-	protected function check_post_data( $attachment, $data, $context = 'view', $links ) {
+	protected function check_post_data( $attachment, $data, $context = 'view', $links = array() ) {
 		parent::check_post_data( $attachment, $data, $context, $links );
 
 		$this->assertArrayNotHasKey( 'content', $data );
 		$this->assertArrayNotHasKey( 'excerpt', $data );
 
-		$this->assertEquals( get_post_meta( $attachment->ID, '_wp_attachment_image_alt', true ), $data['alt_text'] );
+		$this->assertSame( get_post_meta( $attachment->ID, '_wp_attachment_image_alt', true ), $data['alt_text'] );
 		if ( 'edit' === $context ) {
-			$this->assertEquals( $attachment->post_excerpt, $data['caption']['raw'] );
-			$this->assertEquals( $attachment->post_content, $data['description']['raw'] );
+			$this->assertSame( $attachment->post_excerpt, $data['caption']['raw'] );
+			$this->assertSame( $attachment->post_content, $data['description']['raw'] );
 		} else {
 			$this->assertFalse( isset( $data['caption']['raw'] ) );
 			$this->assertFalse( isset( $data['description']['raw'] ) );
@@ -1569,12 +1586,12 @@ class WP_Test_REST_Attachments_Controller extends WP_Test_REST_Post_Type_Control
 		$this->assertTrue( isset( $data['media_details'] ) );
 
 		if ( $attachment->post_parent ) {
-			$this->assertEquals( $attachment->post_parent, $data['post'] );
+			$this->assertSame( $attachment->post_parent, $data['post'] );
 		} else {
 			$this->assertNull( $data['post'] );
 		}
 
-		$this->assertEquals( wp_get_attachment_url( $attachment->ID ), $data['source_url'] );
+		$this->assertSame( wp_get_attachment_url( $attachment->ID ), $data['source_url'] );
 
 	}
 
@@ -1704,7 +1721,7 @@ class WP_Test_REST_Attachments_Controller extends WP_Test_REST_Post_Type_Control
 		$request->set_body( file_get_contents( $this->test_file ) );
 		$response = rest_get_server()->dispatch( $request );
 		$data     = $response->get_data();
-		$this->assertEquals( 201, $response->get_status() );
+		$this->assertSame( 201, $response->get_status() );
 
 		$this->assertSame( 1, self::$rest_insert_attachment_count );
 		$this->assertSame( 1, self::$rest_after_insert_attachment_count );
@@ -1740,6 +1757,35 @@ class WP_Test_REST_Attachments_Controller extends WP_Test_REST_Post_Type_Control
 		$this->assertSame( 1, self::$rest_after_insert_attachment_count );
 	}
 
+	/**
+	 * @ticket 44567
+	 */
+	public function test_create_item_with_meta_values() {
+		register_post_meta(
+			'attachment',
+			'best_cannoli',
+			array(
+				'type'         => 'string',
+				'single'       => true,
+				'show_in_rest' => true,
+			)
+		);
+
+		wp_set_current_user( self::$author_id );
+
+		$request = new WP_REST_Request( 'POST', '/wp/v2/media' );
+		$request->set_header( 'Content-Type', 'image/jpeg' );
+		$request->set_header( 'Content-Disposition', 'attachment; filename=cannoli.jpg' );
+		$request->set_param( 'meta', array( 'best_cannoli' => 'Chocolate-dipped, no filling' ) );
+
+		$request->set_body( file_get_contents( $this->test_file ) );
+		$response = rest_get_server()->dispatch( $request );
+		$data     = $response->get_data();
+
+		$this->assertSame( 201, $response->get_status() );
+		$this->assertSame( 'Chocolate-dipped, no filling', get_post_meta( $response->get_data()['id'], 'best_cannoli', true ) );
+	}
+
 	public function filter_rest_insert_attachment( $attachment ) {
 		self::$rest_insert_attachment_count++;
 	}
@@ -1747,4 +1793,228 @@ class WP_Test_REST_Attachments_Controller extends WP_Test_REST_Post_Type_Control
 	public function filter_rest_after_insert_attachment( $attachment ) {
 		self::$rest_after_insert_attachment_count++;
 	}
+
+	/**
+	 * @ticket 44405
+	 */
+	public function test_edit_image_returns_error_if_logged_out() {
+		$attachment = self::factory()->attachment->create_upload_object( $this->test_file );
+
+		$request = new WP_REST_Request( 'POST', "/wp/v2/media/{$attachment}/edit" );
+		$request->set_body_params( array( 'src' => wp_get_attachment_image_url( $attachment, 'full' ) ) );
+		$response = rest_do_request( $request );
+		$this->assertErrorResponse( 'rest_cannot_edit_image', $response, 401 );
+	}
+
+	/**
+	 * @ticket 44405
+	 */
+	public function test_edit_image_returns_error_if_cannot_upload() {
+		$user = self::factory()->user->create_and_get( array( 'role' => 'editor' ) );
+		$user->add_cap( 'upload_files', false );
+
+		wp_set_current_user( $user->ID );
+		$attachment = self::factory()->attachment->create_upload_object( $this->test_file );
+
+		$request = new WP_REST_Request( 'POST', "/wp/v2/media/{$attachment}/edit" );
+		$request->set_body_params( array( 'src' => wp_get_attachment_image_url( $attachment, 'full' ) ) );
+		$response = rest_do_request( $request );
+		$this->assertErrorResponse( 'rest_cannot_edit_image', $response, 403 );
+	}
+
+	/**
+	 * @ticket 44405
+	 */
+	public function test_edit_image_returns_error_if_cannot_edit() {
+		wp_set_current_user( self::$uploader_id );
+		$attachment = self::factory()->attachment->create_upload_object( $this->test_file );
+
+		$request = new WP_REST_Request( 'POST', "/wp/v2/media/{$attachment}/edit" );
+		$request->set_body_params( array( 'src' => wp_get_attachment_image_url( $attachment, 'full' ) ) );
+		$response = rest_do_request( $request );
+		$this->assertErrorResponse( 'rest_cannot_edit', $response, 403 );
+	}
+
+	/**
+	 * @ticket 44405
+	 */
+	public function test_edit_image_returns_error_if_no_attachment() {
+		wp_set_current_user( self::$superadmin_id );
+		$attachment = self::factory()->attachment->create();
+
+		$request = new WP_REST_Request( 'POST', "/wp/v2/media/{$attachment}/edit" );
+		$request->set_body_params( array( 'src' => '/wp-content/uploads/2020/07/canola.jpg' ) );
+		$response = rest_do_request( $request );
+		$this->assertErrorResponse( 'rest_unknown_attachment', $response, 404 );
+	}
+
+	/**
+	 * @ticket 44405
+	 */
+	public function test_edit_image_returns_error_if_unsupported_mime_type() {
+		wp_set_current_user( self::$superadmin_id );
+		$attachment = self::factory()->attachment->create_upload_object( $this->test_file );
+		wp_update_post(
+			array(
+				'ID'             => $attachment,
+				'post_mime_type' => 'image/invalid',
+			)
+		);
+
+		$request = new WP_REST_Request( 'POST', "/wp/v2/media/{$attachment}/edit" );
+		$request->set_body_params( array( 'src' => wp_get_attachment_image_url( $attachment, 'full' ) ) );
+		$response = rest_do_request( $request );
+		$this->assertErrorResponse( 'rest_cannot_edit_file_type', $response, 400 );
+	}
+
+	/**
+	 * @ticket 44405
+	 */
+	public function test_edit_image_returns_error_if_no_edits() {
+		wp_set_current_user( self::$superadmin_id );
+		$attachment = self::factory()->attachment->create_upload_object( $this->test_file );
+
+		$request = new WP_REST_Request( 'POST', "/wp/v2/media/{$attachment}/edit" );
+		$request->set_body_params( array( 'src' => wp_get_attachment_image_url( $attachment, 'full' ) ) );
+		$response = rest_do_request( $request );
+		$this->assertErrorResponse( 'rest_image_not_edited', $response, 400 );
+	}
+
+	/**
+	 * @ticket 44405
+	 */
+	public function test_edit_image_rotate() {
+		wp_set_current_user( self::$superadmin_id );
+		$attachment = self::factory()->attachment->create_upload_object( $this->test_file );
+
+		$this->setup_mock_editor();
+		WP_Image_Editor_Mock::$edit_return['rotate'] = new WP_Error();
+
+		$params = array(
+			'rotation' => 60,
+			'src'      => wp_get_attachment_image_url( $attachment, 'full' ),
+		);
+
+		$request = new WP_REST_Request( 'POST', "/wp/v2/media/{$attachment}/edit" );
+		$request->set_body_params( $params );
+		$response = rest_do_request( $request );
+		$this->assertErrorResponse( 'rest_image_rotation_failed', $response, 500 );
+
+		$this->assertCount( 1, WP_Image_Editor_Mock::$spy['rotate'] );
+		$this->assertSame( array( -60 ), WP_Image_Editor_Mock::$spy['rotate'][0] );
+	}
+
+	/**
+	 * @ticket 44405
+	 */
+	public function test_edit_image_crop() {
+		wp_set_current_user( self::$superadmin_id );
+		$attachment = self::factory()->attachment->create_upload_object( $this->test_file );
+
+		$this->setup_mock_editor();
+		WP_Image_Editor_Mock::$size_return = array(
+			'width'  => 640,
+			'height' => 480,
+		);
+
+		WP_Image_Editor_Mock::$edit_return['crop'] = new WP_Error();
+
+		$request = new WP_REST_Request( 'POST', "/wp/v2/media/{$attachment}/edit" );
+		$request->set_body_params(
+			array(
+				'x'      => 50,
+				'y'      => 10,
+				'width'  => 10,
+				'height' => 5,
+				'src'    => wp_get_attachment_image_url( $attachment, 'full' ),
+
+			)
+		);
+		$response = rest_do_request( $request );
+		$this->assertErrorResponse( 'rest_image_crop_failed', $response, 500 );
+
+		$this->assertCount( 1, WP_Image_Editor_Mock::$spy['crop'] );
+		$this->assertSame(
+			array( 320.0, 48.0, 64.0, 24.0 ),
+			WP_Image_Editor_Mock::$spy['crop'][0]
+		);
+	}
+
+	/**
+	 * @ticket 44405
+	 */
+	public function test_edit_image() {
+		wp_set_current_user( self::$superadmin_id );
+		$attachment = self::factory()->attachment->create_upload_object( $this->test_file );
+
+		$params = array(
+			'rotation' => 60,
+			'src'      => wp_get_attachment_image_url( $attachment, 'full' ),
+		);
+
+		$request = new WP_REST_Request( 'POST', "/wp/v2/media/{$attachment}/edit" );
+		$request->set_body_params( $params );
+		$response = rest_do_request( $request );
+		$item     = $response->get_data();
+
+		$this->assertSame( 201, $response->get_status() );
+		$this->assertSame( rest_url( '/wp/v2/media/' . $item['id'] ), $response->get_headers()['Location'] );
+
+		$this->assertStringEndsWith( '-edited.jpg', $item['media_details']['file'] );
+		$this->assertArrayHasKey( 'parent_image', $item['media_details'] );
+		$this->assertEquals( $attachment, $item['media_details']['parent_image']['attachment_id'] );
+		$this->assertContains( 'canola', $item['media_details']['parent_image']['file'] );
+	}
+
+	/**
+	 * @ticket 50565
+	 */
+	public function test_edit_image_returns_error_if_mismatched_src() {
+		wp_set_current_user( self::$superadmin_id );
+		$attachment_id_image1 = self::factory()->attachment->create_upload_object( $this->test_file );
+		$attachment_id_image2 = self::factory()->attachment->create_upload_object( $this->test_file2 );
+		$attachment_id_file   = self::factory()->attachment->create();
+
+		// URL to the first uploaded image.
+		$image_src = wp_get_attachment_image_url( $attachment_id_image1, 'large' );
+
+		// Test: attachment ID points to a different, non-image attachment.
+		$request_1 = new WP_REST_Request( 'POST', "/wp/v2/media/{$attachment_id_file}/edit" );
+		$request_1->set_body_params( array( 'src' => $image_src ) );
+
+		$response_1 = rest_do_request( $request_1 );
+		$this->assertErrorResponse( 'rest_unknown_attachment', $response_1, 404 );
+
+		// Test: attachment ID points to a different image attachment.
+		$request_2 = new WP_REST_Request( 'POST', "/wp/v2/media/{$attachment_id_image2}/edit" );
+		$request_2->set_body_params( array( 'src' => $image_src ) );
+
+		$response_2 = rest_do_request( $request_2 );
+		$this->assertErrorResponse( 'rest_unknown_attachment', $response_2, 404 );
+
+		// Test: attachment src points to a sub-size of the image.
+		$request_3 = new WP_REST_Request( 'POST', "/wp/v2/media/{$attachment_id_image1}/edit" );
+		$request_3->set_body_params( array( 'src' => wp_get_attachment_image_url( $attachment_id_image1, 'medium' ) ) );
+
+		$response_3 = rest_do_request( $request_3 );
+		// 'rest_image_not_edited' as the file wasn't edited.
+		$this->assertErrorResponse( 'rest_image_not_edited', $response_3, 400 );
+	}
+
+	/**
+	 * Sets up the mock image editor.
+	 *
+	 * @since 5.5.0
+	 */
+	protected function setup_mock_editor() {
+		require_once ABSPATH . WPINC . '/class-wp-image-editor.php';
+		require_once DIR_TESTDATA . '/../includes/mock-image-editor.php';
+
+		add_filter(
+			'wp_image_editors',
+			static function () {
+				return array( 'WP_Image_Editor_Mock' );
+			}
+		);
+	}
 }
diff --git a/tests/rest-api/rest-autosaves-controller.php b/tests/rest-api/rest-autosaves-controller.php
index 8d989f7df7..e5ec08f66e 100644
--- a/tests/rest-api/rest-autosaves-controller.php
+++ b/tests/rest-api/rest-autosaves-controller.php
@@ -140,15 +140,15 @@ class WP_Test_REST_Autosaves_Controller extends WP_Test_REST_Post_Type_Controlle
 		$request  = new WP_REST_Request( 'OPTIONS', '/wp/v2/posts/' . self::$post_id . '/autosaves' );
 		$response = rest_get_server()->dispatch( $request );
 		$data     = $response->get_data();
-		$this->assertEquals( 'view', $data['endpoints'][0]['args']['context']['default'] );
-		$this->assertEqualSets( array( 'view', 'edit', 'embed' ), $data['endpoints'][0]['args']['context']['enum'] );
+		$this->assertSame( 'view', $data['endpoints'][0]['args']['context']['default'] );
+		$this->assertSameSets( array( 'view', 'edit', 'embed' ), $data['endpoints'][0]['args']['context']['enum'] );
 
 		// Single.
 		$request  = new WP_REST_Request( 'OPTIONS', '/wp/v2/posts/' . self::$post_id . '/autosaves/' . self::$autosave_post_id );
 		$response = rest_get_server()->dispatch( $request );
 		$data     = $response->get_data();
-		$this->assertEquals( 'view', $data['endpoints'][0]['args']['context']['default'] );
-		$this->assertEqualSets( array( 'view', 'edit', 'embed' ), $data['endpoints'][0]['args']['context']['enum'] );
+		$this->assertSame( 'view', $data['endpoints'][0]['args']['context']['default'] );
+		$this->assertSameSets( array( 'view', 'edit', 'embed' ), $data['endpoints'][0]['args']['context']['enum'] );
 	}
 
 	public function test_registered_query_params() {
@@ -157,7 +157,7 @@ class WP_Test_REST_Autosaves_Controller extends WP_Test_REST_Post_Type_Controlle
 		$data     = $response->get_data();
 		$keys     = array_keys( $data['endpoints'][0]['args'] );
 		sort( $keys );
-		$this->assertEquals(
+		$this->assertSame(
 			array(
 				'context',
 				'parent',
@@ -171,10 +171,10 @@ class WP_Test_REST_Autosaves_Controller extends WP_Test_REST_Post_Type_Controlle
 		$request  = new WP_REST_Request( 'GET', '/wp/v2/posts/' . self::$post_id . '/autosaves' );
 		$response = rest_get_server()->dispatch( $request );
 		$data     = $response->get_data();
-		$this->assertEquals( 200, $response->get_status() );
+		$this->assertSame( 200, $response->get_status() );
 		$this->assertCount( 1, $data );
 
-		$this->assertEquals( self::$autosave_post_id, $data[0]['id'] );
+		$this->assertSame( self::$autosave_post_id, $data[0]['id'] );
 
 		$this->check_get_autosave_response( $data[0], $this->post_autosave );
 	}
@@ -207,7 +207,7 @@ class WP_Test_REST_Autosaves_Controller extends WP_Test_REST_Post_Type_Controlle
 		wp_set_current_user( self::$editor_id );
 		$request  = new WP_REST_Request( 'GET', '/wp/v2/posts/' . self::$post_id . '/autosaves/' . self::$autosave_post_id );
 		$response = rest_get_server()->dispatch( $request );
-		$this->assertEquals( 200, $response->get_status() );
+		$this->assertSame( 200, $response->get_status() );
 		$data = $response->get_data();
 
 		$this->check_get_autosave_response( $response, $this->post_autosave );
@@ -225,7 +225,7 @@ class WP_Test_REST_Autosaves_Controller extends WP_Test_REST_Post_Type_Controlle
 			'excerpt',
 			'content',
 		);
-		$this->assertEqualSets( $fields, array_keys( $data ) );
+		$this->assertSameSets( $fields, array_keys( $data ) );
 		$this->assertSame( self::$editor_id, $data['author'] );
 	}
 
@@ -244,7 +244,7 @@ class WP_Test_REST_Autosaves_Controller extends WP_Test_REST_Post_Type_Controlle
 			'excerpt',
 		);
 		$data     = $response->get_data();
-		$this->assertEqualSets( $fields, array_keys( $data ) );
+		$this->assertSameSets( $fields, array_keys( $data ) );
 	}
 
 	public function test_get_item_no_permission() {
@@ -277,7 +277,7 @@ class WP_Test_REST_Autosaves_Controller extends WP_Test_REST_Post_Type_Controlle
 		wp_set_current_user( self::$editor_id );
 		$request  = new WP_REST_Request( 'GET', '/wp/v2/posts/' . self::$post_id . '/autosaves/' . self::$autosave_post_id );
 		$response = rest_get_server()->dispatch( $request );
-		$this->assertEquals( 200, $response->get_status() );
+		$this->assertSame( 200, $response->get_status() );
 		$this->check_get_autosave_response( $response, $this->post_autosave );
 	}
 
@@ -286,7 +286,7 @@ class WP_Test_REST_Autosaves_Controller extends WP_Test_REST_Post_Type_Controlle
 		$response   = rest_get_server()->dispatch( $request );
 		$data       = $response->get_data();
 		$properties = $data['schema']['properties'];
-		$this->assertEquals( 13, count( $properties ) );
+		$this->assertSame( 13, count( $properties ) );
 		$this->assertArrayHasKey( 'author', $properties );
 		$this->assertArrayHasKey( 'content', $properties );
 		$this->assertArrayHasKey( 'date', $properties );
@@ -377,17 +377,17 @@ class WP_Test_REST_Autosaves_Controller extends WP_Test_REST_Post_Type_Controlle
 		$response = rest_get_server()->dispatch( $request );
 		$new_data = $response->get_data();
 
-		$this->assertEquals( $current_post->ID, $new_data['parent'] );
-		$this->assertEquals( $current_post->post_title, $new_data['title']['raw'] );
-		$this->assertEquals( $current_post->post_excerpt, $new_data['excerpt']['raw'] );
+		$this->assertSame( $current_post->ID, $new_data['parent'] );
+		$this->assertSame( $current_post->post_title, $new_data['title']['raw'] );
+		$this->assertSame( $current_post->post_excerpt, $new_data['excerpt']['raw'] );
 
 		// Updated post_content.
 		$this->assertNotEquals( $current_post->post_content, $new_data['content']['raw'] );
 
 		$autosave_post = wp_get_post_autosave( self::$post_id );
-		$this->assertEquals( $autosave_data['title'], $autosave_post->post_title );
-		$this->assertEquals( $autosave_data['content'], $autosave_post->post_content );
-		$this->assertEquals( $autosave_data['excerpt'], $autosave_post->post_excerpt );
+		$this->assertSame( $autosave_data['title'], $autosave_post->post_title );
+		$this->assertSame( $autosave_data['content'], $autosave_post->post_content );
+		$this->assertSame( $autosave_data['excerpt'], $autosave_post->post_excerpt );
 	}
 
 	public function test_rest_autosave_draft_post_same_author() {
@@ -414,15 +414,15 @@ class WP_Test_REST_Autosaves_Controller extends WP_Test_REST_Post_Type_Controlle
 		$new_data = $response->get_data();
 		$post     = get_post( $post_id );
 
-		$this->assertEquals( $post_id, $new_data['id'] );
+		$this->assertSame( $post_id, $new_data['id'] );
 		// The draft post should be updated.
-		$this->assertEquals( $autosave_data['content'], $new_data['content']['raw'] );
-		$this->assertEquals( $autosave_data['title'], $new_data['title']['raw'] );
-		$this->assertEquals( $autosave_data['content'], $post->post_content );
-		$this->assertEquals( $autosave_data['title'], $post->post_title );
+		$this->assertSame( $autosave_data['content'], $new_data['content']['raw'] );
+		$this->assertSame( $autosave_data['title'], $new_data['title']['raw'] );
+		$this->assertSame( $autosave_data['content'], $post->post_content );
+		$this->assertSame( $autosave_data['title'], $post->post_title );
 
 		// Not updated.
-		$this->assertEquals( $post_data['post_excerpt'], $post->post_excerpt );
+		$this->assertSame( $post_data['post_excerpt'], $post->post_excerpt );
 
 		wp_delete_post( $post_id );
 	}
@@ -453,21 +453,21 @@ class WP_Test_REST_Autosaves_Controller extends WP_Test_REST_Post_Type_Controlle
 		$new_data     = $response->get_data();
 		$current_post = get_post( $post_id );
 
-		$this->assertEquals( $current_post->ID, $new_data['parent'] );
+		$this->assertSame( $current_post->ID, $new_data['parent'] );
 
 		// The draft post shouldn't change.
-		$this->assertEquals( $current_post->post_title, $post_data['post_title'] );
-		$this->assertEquals( $current_post->post_content, $post_data['post_content'] );
-		$this->assertEquals( $current_post->post_excerpt, $post_data['post_excerpt'] );
+		$this->assertSame( $current_post->post_title, $post_data['post_title'] );
+		$this->assertSame( $current_post->post_content, $post_data['post_content'] );
+		$this->assertSame( $current_post->post_excerpt, $post_data['post_excerpt'] );
 
 		$autosave_post = wp_get_post_autosave( $post_id );
 
 		// No changes.
-		$this->assertEquals( $current_post->post_title, $autosave_post->post_title );
-		$this->assertEquals( $current_post->post_excerpt, $autosave_post->post_excerpt );
+		$this->assertSame( $current_post->post_title, $autosave_post->post_title );
+		$this->assertSame( $current_post->post_excerpt, $autosave_post->post_excerpt );
 
 		// Has changes.
-		$this->assertEquals( $autosave_data['content'], $autosave_post->post_content );
+		$this->assertSame( $autosave_data['content'], $autosave_post->post_content );
 
 		wp_delete_post( $post_id );
 	}
@@ -496,7 +496,7 @@ class WP_Test_REST_Autosaves_Controller extends WP_Test_REST_Post_Type_Controlle
 		$data     = $response->get_data();
 
 		$this->assertArrayHasKey( 'my_custom_int', $data['schema']['properties'] );
-		$this->assertEquals( $schema, $data['schema']['properties']['my_custom_int'] );
+		$this->assertSame( $schema, $data['schema']['properties']['my_custom_int'] );
 
 		wp_set_current_user( 1 );
 
@@ -529,27 +529,27 @@ class WP_Test_REST_Autosaves_Controller extends WP_Test_REST_Post_Type_Controlle
 		$this->assertEquals( $autosave->post_author, $response['author'] );
 
 		$rendered_content = apply_filters( 'the_content', $autosave->post_content );
-		$this->assertEquals( $rendered_content, $response['content']['rendered'] );
+		$this->assertSame( $rendered_content, $response['content']['rendered'] );
 
-		$this->assertEquals( mysql_to_rfc3339( $autosave->post_date ), $response['date'] ); //@codingStandardsIgnoreLine
-		$this->assertEquals( mysql_to_rfc3339( $autosave->post_date_gmt ), $response['date_gmt'] ); //@codingStandardsIgnoreLine
+		$this->assertSame( mysql_to_rfc3339( $autosave->post_date ), $response['date'] ); //@codingStandardsIgnoreLine
+		$this->assertSame( mysql_to_rfc3339( $autosave->post_date_gmt ), $response['date_gmt'] ); //@codingStandardsIgnoreLine
 
 		$rendered_guid = apply_filters( 'get_the_guid', $autosave->guid, $autosave->ID );
-		$this->assertEquals( $rendered_guid, $response['guid']['rendered'] );
+		$this->assertSame( $rendered_guid, $response['guid']['rendered'] );
 
-		$this->assertEquals( $autosave->ID, $response['id'] );
-		$this->assertEquals( mysql_to_rfc3339( $autosave->post_modified ), $response['modified'] ); //@codingStandardsIgnoreLine
-		$this->assertEquals( mysql_to_rfc3339( $autosave->post_modified_gmt ), $response['modified_gmt'] ); //@codingStandardsIgnoreLine
-		$this->assertEquals( $autosave->post_name, $response['slug'] );
+		$this->assertSame( $autosave->ID, $response['id'] );
+		$this->assertSame( mysql_to_rfc3339( $autosave->post_modified ), $response['modified'] ); //@codingStandardsIgnoreLine
+		$this->assertSame( mysql_to_rfc3339( $autosave->post_modified_gmt ), $response['modified_gmt'] ); //@codingStandardsIgnoreLine
+		$this->assertSame( $autosave->post_name, $response['slug'] );
 
 		$rendered_title = get_the_title( $autosave->ID );
-		$this->assertEquals( $rendered_title, $response['title']['rendered'] );
+		$this->assertSame( $rendered_title, $response['title']['rendered'] );
 
 		$parent            = get_post( $autosave->post_parent );
 		$parent_controller = new WP_REST_Posts_Controller( $parent->post_type );
 		$parent_object     = get_post_type_object( $parent->post_type );
 		$parent_base       = ! empty( $parent_object->rest_base ) ? $parent_object->rest_base : $parent_object->name;
-		$this->assertEquals( rest_url( '/wp/v2/' . $parent_base . '/' . $autosave->post_parent ), $links['parent'][0]['href'] );
+		$this->assertSame( rest_url( '/wp/v2/' . $parent_base . '/' . $autosave->post_parent ), $links['parent'][0]['href'] );
 	}
 
 	public function test_get_item_sets_up_postdata() {
@@ -560,8 +560,8 @@ class WP_Test_REST_Autosaves_Controller extends WP_Test_REST_Post_Type_Controlle
 		$post           = get_post();
 		$parent_post_id = wp_is_post_revision( $post->ID );
 
-		$this->assertEquals( $post->ID, self::$autosave_post_id );
-		$this->assertEquals( $parent_post_id, self::$post_id );
+		$this->assertSame( $post->ID, self::$autosave_post_id );
+		$this->assertSame( $parent_post_id, self::$post_id );
 	}
 
 	public function test_update_item_draft_page_with_parent() {
@@ -580,8 +580,8 @@ class WP_Test_REST_Autosaves_Controller extends WP_Test_REST_Post_Type_Controlle
 		$response = rest_get_server()->dispatch( $request );
 		$data     = $response->get_data();
 
-		$this->assertEquals( self::$child_draft_page_id, $data['id'] );
-		$this->assertEquals( self::$parent_page_id, $data['parent'] );
+		$this->assertSame( self::$child_draft_page_id, $data['id'] );
+		$this->assertSame( self::$parent_page_id, $data['parent'] );
 	}
 
 	public function test_schema_validation_is_applied() {
diff --git a/tests/rest-api/rest-block-directory-controller.php b/tests/rest-api/rest-block-directory-controller.php
new file mode 100644
index 0000000000..3060efb0c1
--- /dev/null
+++ b/tests/rest-api/rest-block-directory-controller.php
@@ -0,0 +1,290 @@
+<?php
+/**
+ * Unit tests covering WP_REST_Block_Directory_Controller functionality.
+ *
+ * @package WordPress
+ * @subpackage REST API
+ */
+
+/**
+ * @group restapi
+ */
+class WP_REST_Block_Directory_Controller_Test extends WP_Test_REST_Controller_Testcase {
+
+	/**
+	 * Administrator user id.
+	 *
+	 * @since 5.5.0
+	 *
+	 * @var int
+	 */
+	protected static $admin_id;
+
+	/**
+	 * Set up class test fixtures.
+	 *
+	 * @since 5.5.0
+	 *
+	 * @param WP_UnitTest_Factory $factory WordPress unit test factory.
+	 */
+	public static function wpSetUpBeforeClass( $factory ) {
+		self::$admin_id = $factory->user->create(
+			array(
+				'role' => 'administrator',
+			)
+		);
+
+		if ( is_multisite() ) {
+			grant_super_admin( self::$admin_id );
+		}
+	}
+
+	public static function wpTearDownAfterClass() {
+		self::delete_user( self::$admin_id );
+	}
+
+	/**
+	 * @ticket 50321
+	 */
+	public function test_register_routes() {
+		$routes = rest_get_server()->get_routes();
+
+		$this->assertArrayHasKey( '/wp/v2/block-directory/search', $routes );
+	}
+
+	/**
+	 * @ticket 50321
+	 */
+	public function test_context_param() {
+		// Collection.
+		$request  = new WP_REST_Request( 'OPTIONS', '/wp/v2/block-directory/search' );
+		$response = rest_get_server()->dispatch( $request );
+		$data     = $response->get_data();
+		$this->assertSame( 'view', $data['endpoints'][0]['args']['context']['default'] );
+		$this->assertSame( array( 'view' ), $data['endpoints'][0]['args']['context']['enum'] );
+	}
+
+	/**
+	 * @ticket 50321
+	 */
+	public function test_get_items() {
+		wp_set_current_user( self::$admin_id );
+
+		$request = new WP_REST_Request( 'GET', '/wp/v2/block-directory/search' );
+		$request->set_query_params( array( 'term' => 'foo' ) );
+
+		$result = rest_do_request( $request );
+		$this->assertNotWPError( $result->as_error() );
+		$this->assertSame( 200, $result->status );
+	}
+
+	/**
+	 * @ticket 50321
+	 */
+	public function test_get_items_wdotorg_unavailable() {
+		wp_set_current_user( self::$admin_id );
+
+		$request = new WP_REST_Request( 'GET', '/wp/v2/block-directory/search' );
+		$request->set_query_params( array( 'term' => 'foo' ) );
+
+		$this->prevent_requests_to_host( 'api.wordpress.org' );
+
+		$this->expectException( 'PHPUnit_Framework_Error_Warning' );
+		$response = rest_do_request( $request );
+		$this->assertErrorResponse( 'plugins_api_failed', $response, 500 );
+	}
+
+	/**
+	 * @ticket 50321
+	 */
+	public function test_get_items_logged_out() {
+		$request = new WP_REST_Request( 'GET', '/wp/v2/block-directory/search' );
+		$request->set_query_params( array( 'term' => 'foo' ) );
+		$response = rest_do_request( $request );
+		$this->assertErrorResponse( 'rest_block_directory_cannot_view', $response );
+	}
+
+	/**
+	 * @ticket 50321
+	 */
+	public function test_get_items_no_results() {
+		wp_set_current_user( self::$admin_id );
+
+		$request = new WP_REST_Request( 'GET', '/wp/v2/block-directory/search' );
+		$request->set_query_params( array( 'term' => '0c4549ee68f24eaaed46a49dc983ecde' ) );
+		$response = rest_do_request( $request );
+		$data     = $response->get_data();
+
+		// Should produce a 200 status with an empty array.
+		$this->assertSame( 200, $response->status );
+		$this->assertSame( array(), $data );
+	}
+
+	public function test_get_item() {
+		$this->markTestSkipped( 'Controller does not have get_item route.' );
+	}
+
+	public function test_create_item() {
+		$this->markTestSkipped( 'Controller does not have create_item route.' );
+	}
+
+	public function test_update_item() {
+		$this->markTestSkipped( 'Controller does not have update_item route.' );
+	}
+
+	public function test_delete_item() {
+		$this->markTestSkipped( 'Controller does not have delete_item route.' );
+	}
+
+	/**
+	 * @ticket 50321
+	 */
+	public function test_prepare_item() {
+		wp_set_current_user( self::$admin_id );
+
+		$controller = new WP_REST_Block_Directory_Controller();
+
+		$plugin  = $this->get_mock_plugin();
+		$request = new WP_REST_Request( 'GET', '/wp/v2/block-directory/search' );
+		$request->set_query_params( array( 'term' => 'block' ) );
+
+		$response = $controller->prepare_item_for_response( $plugin, $request );
+
+		$expected = array(
+			'name'                => 'sortabrilliant/guidepost',
+			'title'               => 'Guidepost',
+			'description'         => 'A guidepost gives you directions. It lets you know where you‚Äôre going. It gives you a preview of what‚Äôs to come. How does it work? Guideposts are magic, no they...',
+			'id'                  => 'guidepost',
+			'rating'              => 4.3,
+			'rating_count'        => 90,
+			'active_installs'     => 100,
+			'author_block_rating' => 0,
+			'author_block_count'  => 1,
+			'author'              => 'sorta brilliant',
+			'icon'                => 'https://ps.w.org/guidepost/assets/icon-128x128.jpg?rev=2235512',
+			'last_updated'        => gmdate( 'Y-m-d\TH:i:s', strtotime( $plugin['last_updated'] ) ),
+			'humanized_updated'   => sprintf( '%s ago', human_time_diff( strtotime( $plugin['last_updated'] ) ) ),
+		);
+
+		$this->assertSame( $expected, $response->get_data() );
+	}
+
+	/**
+	 * @ticket 50321
+	 */
+	public function test_get_item_schema() {
+		wp_set_current_user( self::$admin_id );
+
+		$request = new WP_REST_Request( 'OPTIONS', '/wp/v2/block-directory/search' );
+		$request->set_query_params( array( 'term' => 'foo' ) );
+		$response = rest_do_request( $request );
+		$data     = $response->get_data();
+
+		// Check endpoints
+		$this->assertSame( array( 'GET' ), $data['endpoints'][0]['methods'] );
+		$this->assertTrue( $data['endpoints'][0]['args']['term']['required'] );
+
+		$properties = $data['schema']['properties'];
+
+		$this->assertCount( 13, $properties );
+		$this->assertArrayHasKey( 'name', $properties );
+		$this->assertArrayHasKey( 'title', $properties );
+		$this->assertArrayHasKey( 'description', $properties );
+		$this->assertArrayHasKey( 'id', $properties );
+		$this->assertArrayHasKey( 'rating', $properties );
+		$this->assertArrayHasKey( 'rating_count', $properties );
+		$this->assertArrayHasKey( 'active_installs', $properties );
+		$this->assertArrayHasKey( 'author_block_rating', $properties );
+		$this->assertArrayHasKey( 'author_block_count', $properties );
+		$this->assertArrayHasKey( 'author', $properties );
+		$this->assertArrayHasKey( 'icon', $properties );
+		$this->assertArrayHasKey( 'last_updated', $properties );
+		$this->assertArrayHasKey( 'humanized_updated', $properties );
+	}
+
+	/**
+	 * Simulate a network failure on outbound http requests to a given hostname.
+	 *
+	 * @since 5.5.0
+	 *
+	 * @param string $blocked_host The host to block connections to.
+	 */
+	private function prevent_requests_to_host( $blocked_host = 'api.wordpress.org' ) {
+		add_filter(
+			'pre_http_request',
+			static function ( $return, $args, $url ) use ( $blocked_host ) {
+				if ( @parse_url( $url, PHP_URL_HOST ) === $blocked_host ) {
+					return new WP_Error( 'plugins_api_failed', "An expected error occurred connecting to $blocked_host because of a unit test", "cURL error 7: Failed to connect to $blocked_host port 80: Connection refused" );
+
+				}
+
+				return $return;
+			},
+			10,
+			3
+		);
+	}
+
+	/**
+	 * Gets an example of the data returned from the {@see plugins_api()} for a block.
+	 *
+	 * @since 5.5.0
+	 *
+	 * @return array
+	 */
+	private function get_mock_plugin() {
+		return array(
+			'name'                     => 'Guidepost',
+			'slug'                     => 'guidepost',
+			'version'                  => '1.2.1',
+			'author'                   => '<a href="https://sortabrilliant.com">sorta brilliant</a>',
+			'author_profile'           => 'https://profiles.wordpress.org/sortabrilliant',
+			'requires'                 => '5.0',
+			'tested'                   => '5.4.0',
+			'requires_php'             => '5.6',
+			'rating'                   => 86,
+			'ratings'                  => array(
+				5 => 50,
+				4 => 25,
+				3 => 7,
+				2 => 5,
+				1 => 3,
+			),
+			'num_ratings'              => 90,
+			'support_threads'          => 1,
+			'support_threads_resolved' => 0,
+			'active_installs'          => 100,
+			'downloaded'               => 1112,
+			'last_updated'             => '2020-03-23 5:13am GMT',
+			'added'                    => '2020-01-29',
+			'homepage'                 => 'https://sortabrilliant.com/guidepost/',
+			'description'              => '<p>A guidepost gives you directions. It lets you know where you‚Äôre going. It gives you a preview of what‚Äôs to come. How does it work? Guideposts are magic, no they really are.</p>',
+			'short_description'        => 'A guidepost gives you directions. It lets you know where you‚Äôre going. It gives you a preview of what‚Äôs to come.',
+			'download_link'            => 'https://downloads.wordpress.org/plugin/guidepost.1.2.1.zip',
+			'tags'                     => array(
+				'block'   => 'block',
+				'heading' => 'heading',
+				'style'   => 'style',
+			),
+			'donate_link'              => '',
+			'icons'                    => array(
+				'1x' => 'https://ps.w.org/guidepost/assets/icon-128x128.jpg?rev=2235512',
+				'2x' => 'https://ps.w.org/guidepost/assets/icon-256x256.jpg?rev=2235512',
+			),
+			'blocks'                   => array(
+				'sortabrilliant/guidepost' => array(
+					'name'  => 'sortabrilliant/guidepost',
+					'title' => 'Guidepost',
+				),
+			),
+			'block_assets'             => array(
+				0 => '/tags/1.2.1/build/index.js',
+				1 => '/tags/1.2.1/build/guidepost-editor.css',
+				2 => '/tags/1.2.1/build/guidepost-style.css',
+				3 => '/tags/1.2.1/build/guidepost-theme.js',
+			),
+			'author_block_count'       => 1,
+			'author_block_rating'      => 0,
+		);
+	}
+}
diff --git a/tests/rest-api/rest-block-renderer-controller.php b/tests/rest-api/rest-block-renderer-controller.php
index dbc094ce98..0e8dddc25a 100644
--- a/tests/rest-api/rest-block-renderer-controller.php
+++ b/tests/rest-api/rest-block-renderer-controller.php
@@ -46,6 +46,24 @@ class REST_Block_Renderer_Controller_Test extends WP_Test_REST_Controller_Testca
 	 */
 	protected static $context_block_name = 'core/context-test-block';
 
+	/**
+	 * Non-dynamic block name.
+	 *
+	 * @since 5.5.0
+	 *
+	 * @var string
+	 */
+	protected static $non_dynamic_block_name = 'core/non-dynamic';
+
+	/**
+	 * Dynamic block with boolean attributes block name.
+	 *
+	 * @since 5.5.0
+	 *
+	 * @var string
+	 */
+	protected static $dynamic_block_with_boolean_attributes_block_name = 'core/dynamic-block-with-boolean-attributes';
+
 	/**
 	 * Test API user's ID.
 	 *
@@ -117,6 +135,8 @@ class REST_Block_Renderer_Controller_Test extends WP_Test_REST_Controller_Testca
 	public function setUp() {
 		$this->register_test_block();
 		$this->register_post_context_test_block();
+		$this->register_non_dynamic_block();
+		$this->register_dynamic_block_with_boolean_attributes();
 		parent::setUp();
 	}
 
@@ -128,6 +148,8 @@ class REST_Block_Renderer_Controller_Test extends WP_Test_REST_Controller_Testca
 	public function tearDown() {
 		WP_Block_Type_Registry::get_instance()->unregister( self::$block_name );
 		WP_Block_Type_Registry::get_instance()->unregister( self::$context_block_name );
+		WP_Block_Type_Registry::get_instance()->unregister( self::$non_dynamic_block_name );
+		WP_Block_Type_Registry::get_instance()->unregister( self::$dynamic_block_with_boolean_attributes_block_name );
 		parent::tearDown();
 	}
 
@@ -175,6 +197,39 @@ class REST_Block_Renderer_Controller_Test extends WP_Test_REST_Controller_Testca
 		);
 	}
 
+	/**
+	 * Registers the non-dynamic block name.
+	 *
+	 * @since 5.5.0
+	 */
+	protected function register_non_dynamic_block() {
+		register_block_type( self::$non_dynamic_block_name );
+	}
+
+	/**
+	 * Registers the dynamic with boolean attributes block name.
+	 *
+	 * @since 5.5.0
+	 */
+	protected function register_dynamic_block_with_boolean_attributes() {
+		register_block_type(
+			self::$dynamic_block_with_boolean_attributes_block_name,
+			array(
+				'attributes'      => array(
+					'boolean_true_attribute'  => array(
+						'type'    => 'boolean',
+						'default' => true,
+					),
+					'boolean_false_attribute' => array(
+						'type'    => 'boolean',
+						'default' => false,
+					),
+				),
+				'render_callback' => array( $this, 'render_test_block' ),
+			)
+		);
+	}
+
 	/**
 	 * Test render callback.
 	 *
@@ -203,16 +258,14 @@ class REST_Block_Renderer_Controller_Test extends WP_Test_REST_Controller_Testca
 	 *
 	 * @ticket 45098
 	 *
-	 * @covers WP_REST_Block_Renderer_Controller::register_routes()
+	 * @covers WP_REST_Block_Renderer_Controller::register_routes
 	 */
 	public function test_register_routes() {
 		$dynamic_block_names = get_dynamic_block_names();
 		$this->assertContains( self::$block_name, $dynamic_block_names );
 
 		$routes = rest_get_server()->get_routes();
-		foreach ( $dynamic_block_names as $dynamic_block_name ) {
-			$this->assertArrayHasKey( self::$rest_api_route . "(?P<name>$dynamic_block_name)", $routes );
-		}
+		$this->assertArrayHasKey( self::$rest_api_route . '(?P<name>[a-z0-9-]+/[a-z0-9-]+)', $routes );
 	}
 
 	/**
@@ -220,7 +273,7 @@ class REST_Block_Renderer_Controller_Test extends WP_Test_REST_Controller_Testca
 	 *
 	 * @ticket 45098
 	 *
-	 * @covers WP_REST_Block_Renderer_Controller::get_item()
+	 * @covers WP_REST_Block_Renderer_Controller::get_item
 	 */
 	public function test_get_item_without_permissions() {
 		wp_set_current_user( 0 );
@@ -252,7 +305,7 @@ class REST_Block_Renderer_Controller_Test extends WP_Test_REST_Controller_Testca
 	 *
 	 * @ticket 45098
 	 *
-	 * @covers WP_REST_Block_Renderer_Controller::get_item()
+	 * @covers WP_REST_Block_Renderer_Controller::get_item
 	 */
 	public function test_get_item_invalid_block_name() {
 		wp_set_current_user( self::$user_id );
@@ -261,7 +314,7 @@ class REST_Block_Renderer_Controller_Test extends WP_Test_REST_Controller_Testca
 		$request->set_param( 'context', 'edit' );
 		$response = rest_get_server()->dispatch( $request );
 
-		$this->assertErrorResponse( 'rest_no_route', $response, 404 );
+		$this->assertErrorResponse( 'block_invalid', $response, 404 );
 	}
 
 	/**
@@ -269,7 +322,7 @@ class REST_Block_Renderer_Controller_Test extends WP_Test_REST_Controller_Testca
 	 *
 	 * @ticket 45098
 	 *
-	 * @covers WP_REST_Block_Renderer_Controller::get_item()
+	 * @covers WP_REST_Block_Renderer_Controller::get_item
 	 */
 	public function test_get_item_invalid_attribute() {
 		wp_set_current_user( self::$user_id );
@@ -282,7 +335,7 @@ class REST_Block_Renderer_Controller_Test extends WP_Test_REST_Controller_Testca
 			)
 		);
 		$response = rest_get_server()->dispatch( $request );
-		$this->assertEquals( 400, $response->get_status() );
+		$this->assertSame( 400, $response->get_status() );
 	}
 
 	/**
@@ -290,7 +343,7 @@ class REST_Block_Renderer_Controller_Test extends WP_Test_REST_Controller_Testca
 	 *
 	 * @ticket 45098
 	 *
-	 * @covers WP_REST_Block_Renderer_Controller::get_item()
+	 * @covers WP_REST_Block_Renderer_Controller::get_item
 	 */
 	public function test_get_item_unrecognized_attribute() {
 		wp_set_current_user( self::$user_id );
@@ -303,7 +356,7 @@ class REST_Block_Renderer_Controller_Test extends WP_Test_REST_Controller_Testca
 			)
 		);
 		$response = rest_get_server()->dispatch( $request );
-		$this->assertEquals( 400, $response->get_status() );
+		$this->assertSame( 400, $response->get_status() );
 	}
 
 	/**
@@ -311,7 +364,7 @@ class REST_Block_Renderer_Controller_Test extends WP_Test_REST_Controller_Testca
 	 *
 	 * @ticket 45098
 	 *
-	 * @covers WP_REST_Block_Renderer_Controller::get_item()
+	 * @covers WP_REST_Block_Renderer_Controller::get_item
 	 */
 	public function test_get_item_default_attributes() {
 		wp_set_current_user( self::$user_id );
@@ -328,10 +381,10 @@ class REST_Block_Renderer_Controller_Test extends WP_Test_REST_Controller_Testca
 		$request->set_param( 'context', 'edit' );
 		$request->set_param( 'attributes', array() );
 		$response = rest_get_server()->dispatch( $request );
-		$this->assertEquals( 200, $response->get_status() );
+		$this->assertSame( 200, $response->get_status() );
 		$data = $response->get_data();
 
-		$this->assertEquals( $defaults, json_decode( $data['rendered'], true ) );
+		$this->assertSame( $defaults, json_decode( $data['rendered'], true ) );
 		$this->assertEquals(
 			json_decode( $block_type->render( $defaults ) ),
 			json_decode( $data['rendered'] )
@@ -343,7 +396,7 @@ class REST_Block_Renderer_Controller_Test extends WP_Test_REST_Controller_Testca
 	 *
 	 * @ticket 45098
 	 *
-	 * @covers WP_REST_Block_Renderer_Controller::get_item()
+	 * @covers WP_REST_Block_Renderer_Controller::get_item
 	 */
 	public function test_get_item() {
 		wp_set_current_user( self::$user_id );
@@ -363,35 +416,47 @@ class REST_Block_Renderer_Controller_Test extends WP_Test_REST_Controller_Testca
 		$request->set_param( 'context', 'edit' );
 		$request->set_param( 'attributes', $attributes );
 		$response = rest_get_server()->dispatch( $request );
-		$this->assertEquals( 200, $response->get_status() );
+		$this->assertSame( 200, $response->get_status() );
 		$data = $response->get_data();
 
-		$this->assertEquals( $expected_attributes, json_decode( $data['rendered'], true ) );
+		$this->assertSame( $expected_attributes, json_decode( $data['rendered'], true ) );
 		$this->assertEquals(
 			json_decode( $block_type->render( $attributes ), true ),
 			json_decode( $data['rendered'], true )
 		);
 	}
 
-
-
 	/**
-	 * Check success response for getting item with layout attribute provided.
+	 * Check filtering block output using the pre_render_block filter.
 	 *
-	 * @ticket 45098
+	 * @ticket 49387
 	 */
-	public function test_get_item_with_layout() {
+	public function test_get_item_with_pre_render_block_filter() {
 		wp_set_current_user( self::$user_id );
 
+		$pre_render_filter = function( $output, $block ) {
+			if ( $block['blockName'] === self::$block_name ) {
+				return '<p>Alternate content.</p>';
+			}
+		};
+		add_filter( 'pre_render_block', $pre_render_filter, 10, 2 );
+
 		$attributes = array(
-			'layout' => 'foo',
+			'some_int'    => '123',
+			'some_string' => 'foo',
+			'some_array'  => array( 1, '2', 3 ),
 		);
 
 		$request = new WP_REST_Request( 'GET', self::$rest_api_route . self::$block_name );
 		$request->set_param( 'context', 'edit' );
 		$request->set_param( 'attributes', $attributes );
 		$response = rest_get_server()->dispatch( $request );
-		$this->assertEquals( 200, $response->get_status() );
+		$this->assertSame( 200, $response->get_status() );
+
+		$data = $response->get_data();
+		$this->assertSame( '<p>Alternate content.</p>', $data['rendered'] );
+
+		remove_filter( 'pre_render_block', $pre_render_filter );
 	}
 
 	/**
@@ -409,7 +474,7 @@ class REST_Block_Renderer_Controller_Test extends WP_Test_REST_Controller_Testca
 		// Test without post ID.
 		$response = rest_get_server()->dispatch( $request );
 
-		$this->assertEquals( 200, $response->get_status() );
+		$this->assertSame( 200, $response->get_status() );
 		$data = $response->get_data();
 
 		$this->assertTrue( empty( $data['rendered'] ) );
@@ -418,10 +483,29 @@ class REST_Block_Renderer_Controller_Test extends WP_Test_REST_Controller_Testca
 		$request->set_param( 'post_id', self::$post_id );
 		$response = rest_get_server()->dispatch( $request );
 
-		$this->assertEquals( 200, $response->get_status() );
+		$this->assertSame( 200, $response->get_status() );
 		$data = $response->get_data();
 
-		$this->assertEquals( $expected_title, $data['rendered'] );
+		$this->assertSame( $expected_title, $data['rendered'] );
+	}
+
+	/**
+	 * Test a POST request, with the attributes in the body.
+	 *
+	 * @ticket 49680
+	 */
+	public function test_get_item_post_request() {
+		wp_set_current_user( self::$user_id );
+		$string_attribute = 'Lorem ipsum dolor';
+		$attributes       = array( 'some_string' => $string_attribute );
+		$request          = new WP_REST_Request( 'POST', self::$rest_api_route . self::$block_name );
+		$request->set_param( 'context', 'edit' );
+		$request->set_header( 'content-type', 'application/json' );
+		$request->set_body( wp_json_encode( compact( 'attributes' ) ) );
+		$response = rest_get_server()->dispatch( $request );
+
+		$this->assertSame( 200, $response->get_status() );
+		$this->assertContains( $string_attribute, $response->get_data()['rendered'] );
 	}
 
 	/**
@@ -460,31 +544,71 @@ class REST_Block_Renderer_Controller_Test extends WP_Test_REST_Controller_Testca
 		$this->assertErrorResponse( 'block_cannot_read', $response, 403 );
 	}
 
+	/**
+	 * @ticket 48079
+	 */
+	public function test_get_item_non_dynamic_block() {
+		wp_set_current_user( self::$user_id );
+		$request = new WP_REST_Request( 'GET', self::$rest_api_route . self::$non_dynamic_block_name );
+
+		$request->set_param( 'context', 'edit' );
+		$response = rest_get_server()->dispatch( $request );
+
+		$this->assertErrorResponse( 'block_invalid', $response, 404 );
+	}
+
+	/**
+	 * @ticket 50620
+	 */
+	public function test_get_sanitized_attributes_for_dynamic_block_with_boolean_attributes() {
+		wp_set_current_user( self::$user_id );
+
+		$request = new WP_REST_Request( 'GET', self::$rest_api_route . self::$dynamic_block_with_boolean_attributes_block_name );
+
+		$attributes = array(
+			'boolean_true_attribute'  => 'true',
+			'boolean_false_attribute' => 'false',
+		);
+
+		$expected = array(
+			'boolean_true_attribute'  => true,
+			'boolean_false_attribute' => false,
+		);
+
+		$request->set_param( 'context', 'edit' );
+		$request->set_param( 'attributes', $attributes );
+		$response = rest_get_server()->dispatch( $request );
+		$this->assertSame( 200, $response->get_status() );
+		$data = $response->get_data();
+
+		$this->assertSame( $expected, json_decode( $data['rendered'], true ) );
+	}
+
 	/**
 	 * Get item schema.
 	 *
 	 * @ticket 45098
 	 *
-	 * @covers WP_REST_Block_Renderer_Controller::get_item_schema()
+	 * @covers WP_REST_Block_Renderer_Controller::get_item_schema
 	 */
 	public function test_get_item_schema() {
 		$request  = new WP_REST_Request( 'OPTIONS', self::$rest_api_route . self::$block_name );
 		$response = rest_get_server()->dispatch( $request );
 		$data     = $response->get_data();
 
-		$this->assertEqualSets( array( 'GET' ), $data['endpoints'][0]['methods'] );
-		$this->assertEqualSets(
+		$this->assertSameSets( array( 'GET', 'POST' ), $data['endpoints'][0]['methods'] );
+		$this->assertSameSets(
 			array( 'name', 'context', 'attributes', 'post_id' ),
 			array_keys( $data['endpoints'][0]['args'] )
 		);
-		$this->assertEquals( 'object', $data['endpoints'][0]['args']['attributes']['type'] );
+		$this->assertSame( 'object', $data['endpoints'][0]['args']['attributes']['type'] );
 
 		$this->assertArrayHasKey( 'schema', $data );
-		$this->assertEquals( 'rendered-block', $data['schema']['title'] );
-		$this->assertEquals( 'object', $data['schema']['type'] );
+		$this->assertSame( 'rendered-block', $data['schema']['title'] );
+		$this->assertSame( 'object', $data['schema']['type'] );
 		$this->arrayHasKey( 'rendered', $data['schema']['properties'] );
 		$this->arrayHasKey( 'string', $data['schema']['properties']['rendered']['type'] );
-		$this->assertEquals( array( 'edit' ), $data['schema']['properties']['rendered']['context'] );
+		$this->assertSame( array( 'edit' ), $data['schema']['properties']['rendered']['context'] );
 	}
 
 	/**
diff --git a/tests/rest-api/rest-block-type-controller.php b/tests/rest-api/rest-block-type-controller.php
new file mode 100644
index 0000000000..272709e008
--- /dev/null
+++ b/tests/rest-api/rest-block-type-controller.php
@@ -0,0 +1,481 @@
+<?php
+/**
+ * WP_REST_Block_Types_Controller tests.
+ *
+ * @package WordPress
+ * @subpackage REST_API
+ * @since 5.5.0
+ */
+
+/**
+ * Tests for WP_REST_Block_Types_Controller.
+ *
+ * @since 5.5.0
+ *
+ * @covers WP_REST_Block_Types_Controller
+ *
+ * @group restapi-blocks
+ * @group restapi
+ */
+class REST_Block_Type_Controller_Test extends WP_Test_REST_Controller_Testcase {
+
+	/**
+	 * Admin user ID.
+	 *
+	 * @since 5.5.0
+	 *
+	 * @var int $subscriber_id
+	 */
+	protected static $admin_id;
+
+	/**
+	 * Subscriber user ID.
+	 *
+	 * @since 5.5.0
+	 *
+	 * @var int $subscriber_id
+	 */
+	protected static $subscriber_id;
+
+	/**
+	 * Create fake data before our tests run.
+	 *
+	 * @since 5.5.0
+	 *
+	 * @param WP_UnitTest_Factory $factory Helper that lets us create fake data.
+	 */
+	public static function wpSetUpBeforeClass( $factory ) {
+		self::$admin_id      = $factory->user->create(
+			array(
+				'role' => 'administrator',
+			)
+		);
+		self::$subscriber_id = $factory->user->create(
+			array(
+				'role' => 'subscriber',
+			)
+		);
+
+		$name     = 'fake/test';
+		$settings = array(
+			'icon' => 'text',
+		);
+
+		register_block_type( $name, $settings );
+	}
+
+	public static function wpTearDownAfterClass() {
+		self::delete_user( self::$admin_id );
+		self::delete_user( self::$subscriber_id );
+		unregister_block_type( 'fake/test' );
+	}
+
+	/**
+	 * @ticket 47620
+	 */
+	public function test_register_routes() {
+		$routes = rest_get_server()->get_routes();
+		$this->assertArrayHasKey( '/wp/v2/block-types', $routes );
+		$this->assertCount( 1, $routes['/wp/v2/block-types'] );
+		$this->assertArrayHasKey( '/wp/v2/block-types/(?P<namespace>[a-zA-Z0-9_-]+)', $routes );
+		$this->assertCount( 1, $routes['/wp/v2/block-types/(?P<namespace>[a-zA-Z0-9_-]+)'] );
+		$this->assertArrayHasKey( '/wp/v2/block-types/(?P<namespace>[a-zA-Z0-9_-]+)/(?P<name>[a-zA-Z0-9_-]+)', $routes );
+		$this->assertCount( 1, $routes['/wp/v2/block-types/(?P<namespace>[a-zA-Z0-9_-]+)/(?P<name>[a-zA-Z0-9_-]+)'] );
+	}
+
+	/**
+	 * @ticket 47620
+	 */
+	public function test_context_param() {
+		// Collection.
+		$request  = new WP_REST_Request( 'OPTIONS', '/wp/v2/block-types' );
+		$response = rest_get_server()->dispatch( $request );
+		$data     = $response->get_data();
+		$this->assertSame( 'view', $data['endpoints'][0]['args']['context']['default'] );
+		$this->assertSame( array( 'view', 'embed', 'edit' ), $data['endpoints'][0]['args']['context']['enum'] );
+		// Single.
+		$request  = new WP_REST_Request( 'OPTIONS', '/wp/v2/block-types/fake/test' );
+		$response = rest_get_server()->dispatch( $request );
+		$data     = $response->get_data();
+		$this->assertSame( 'view', $data['endpoints'][0]['args']['context']['default'] );
+		$this->assertSame( array( 'view', 'embed', 'edit' ), $data['endpoints'][0]['args']['context']['enum'] );
+	}
+
+	/**
+	 * @ticket 47620
+	 */
+	public function test_get_items() {
+		$block_name = 'fake/test';
+		wp_set_current_user( self::$admin_id );
+		$request  = new WP_REST_Request( 'GET', '/wp/v2/block-types/fake' );
+		$response = rest_get_server()->dispatch( $request );
+		$data     = $response->get_data();
+		$this->assertCount( 1, $data );
+		$block_type = WP_Block_Type_Registry::get_instance()->get_registered( $block_name );
+		$this->check_block_type_object( $block_type, $data[0], $data[0]['_links'] );
+	}
+
+	/**
+	 * @ticket 47620
+	 */
+	public function test_get_item() {
+		$block_name = 'fake/test';
+		wp_set_current_user( self::$admin_id );
+		$request    = new WP_REST_Request( 'GET', '/wp/v2/block-types/' . $block_name );
+		$response   = rest_get_server()->dispatch( $request );
+		$block_type = WP_Block_Type_Registry::get_instance()->get_registered( $block_name );
+		$this->check_block_type_object( $block_type, $response->get_data(), $response->get_links() );
+	}
+
+	/**
+	 * @ticket 47620
+	 */
+	public function test_get_item_with_styles() {
+		$block_name   = 'fake/styles';
+		$block_styles = array(
+			'name'         => 'fancy-quote',
+			'label'        => 'Fancy Quote',
+			'style_handle' => 'myguten-style',
+		);
+		register_block_type( $block_name );
+		register_block_style( $block_name, $block_styles );
+		wp_set_current_user( self::$admin_id );
+		$request  = new WP_REST_Request( 'GET', '/wp/v2/block-types/' . $block_name );
+		$response = rest_get_server()->dispatch( $request );
+		$data     = $response->get_data();
+		$this->assertSameSets( array( $block_styles ), $data['styles'] );
+
+	}
+
+	/**
+	 * @ticket 47620
+	 */
+	public function test_get_item_with_styles_merge() {
+		$block_name   = 'fake/styles2';
+		$block_styles = array(
+			'name'         => 'fancy-quote',
+			'label'        => 'Fancy Quote',
+			'style_handle' => 'myguten-style',
+		);
+		$settings     = array(
+			'styles' => array(
+				array(
+					'name'         => 'blue-quote',
+					'label'        => 'Blue Quote',
+					'style_handle' => 'myguten-style',
+				),
+			),
+		);
+		register_block_type( $block_name, $settings );
+		register_block_style( $block_name, $block_styles );
+		wp_set_current_user( self::$admin_id );
+		$request  = new WP_REST_Request( 'GET', '/wp/v2/block-types/' . $block_name );
+		$response = rest_get_server()->dispatch( $request );
+		$data     = $response->get_data();
+		$expected = array(
+			array(
+				'name'         => 'fancy-quote',
+				'label'        => 'Fancy Quote',
+				'style_handle' => 'myguten-style',
+			),
+			array(
+				'name'         => 'blue-quote',
+				'label'        => 'Blue Quote',
+				'style_handle' => 'myguten-style',
+			),
+		);
+		$this->assertSameSets( $expected, $data['styles'] );
+
+	}
+
+	/**
+	 * @ticket 47620
+	 */
+	public function test_get_block_invalid_name() {
+		$block_type = 'fake/block';
+		wp_set_current_user( self::$admin_id );
+		$request  = new WP_REST_Request( 'GET', '/wp/v2/block-types/' . $block_type );
+		$response = rest_get_server()->dispatch( $request );
+
+		$this->assertErrorResponse( 'rest_block_type_invalid', $response, 404 );
+	}
+
+	/**
+	 * @ticket 47620
+	 */
+	public function test_get_item_invalid() {
+		$block_type = 'fake/invalid';
+		$settings   = array(
+			'title'            => true,
+			'description'      => true,
+			'icon'             => true,
+			'attributes'       => 'invalid_attributes',
+			'provides_context' => 'invalid_provides_context',
+			'uses_context'     => 'invalid_uses_context',
+			'category'         => true,
+			'editor_script'    => true,
+			'script'           => true,
+			'editor_style'     => true,
+			'style'            => true,
+			'keywords'         => 'invalid_keywords',
+			'example'          => 'invalid_example',
+			'parent'           => 'invalid_parent',
+			'supports'         => 'invalid_supports',
+			'styles'           => 'invalid_styles',
+			'render_callback'  => 'invalid_callback',
+			'textdomain'       => true,
+		);
+		register_block_type( $block_type, $settings );
+		wp_set_current_user( self::$admin_id );
+		$request  = new WP_REST_Request( 'GET', '/wp/v2/block-types/' . $block_type );
+		$response = rest_get_server()->dispatch( $request );
+		$data     = $response->get_data();
+		$this->assertSame( $block_type, $data['name'] );
+		$this->assertSame( '1', $data['title'] );
+		$this->assertSame( '1', $data['description'] );
+		$this->assertNull( $data['icon'] );
+		$this->assertNull( $data['editor_script'] );
+		$this->assertNull( $data['script'] );
+		$this->assertNull( $data['editor_style'] );
+		$this->assertNull( $data['style'] );
+		$this->assertSameSets( array(), $data['provides_context'] );
+		$this->assertSameSets( array(), $data['attributes'] );
+		$this->assertSameSets( array( 'invalid_uses_context' ), $data['uses_context'] );
+		$this->assertSameSets( array( 'invalid_keywords' ), $data['keywords'] );
+		$this->assertSameSets( array( 'invalid_parent' ), $data['parent'] );
+		$this->assertSameSets( array(), $data['supports'] );
+		$this->assertSameSets( array(), $data['styles'] );
+		$this->assertNull( $data['example'] );
+		$this->assertNull( $data['category'] );
+		$this->assertNull( $data['textdomain'] );
+		$this->assertFalse( $data['is_dynamic'] );
+	}
+
+	/**
+	 * @ticket 47620
+	 */
+	public function test_get_item_defaults() {
+		$block_type = 'fake/false';
+		$settings   = array(
+			'title'            => false,
+			'description'      => false,
+			'icon'             => false,
+			'attributes'       => false,
+			'provides_context' => false,
+			'uses_context'     => false,
+			'category'         => false,
+			'editor_script'    => false,
+			'script'           => false,
+			'editor_style'     => false,
+			'style'            => false,
+			'keywords'         => false,
+			'parent'           => false,
+			'supports'         => false,
+			'styles'           => false,
+			'render_callback'  => false,
+			'textdomain'       => false,
+			'example'          => false,
+		);
+		register_block_type( $block_type, $settings );
+		wp_set_current_user( self::$admin_id );
+		$request  = new WP_REST_Request( 'GET', '/wp/v2/block-types/' . $block_type );
+		$response = rest_get_server()->dispatch( $request );
+		$data     = $response->get_data();
+		$this->assertSame( $block_type, $data['name'] );
+		$this->assertSame( '', $data['title'] );
+		$this->assertSame( '', $data['description'] );
+		$this->assertNull( $data['icon'] );
+		$this->assertNull( $data['editor_script'] );
+		$this->assertNull( $data['script'] );
+		$this->assertNull( $data['editor_style'] );
+		$this->assertNull( $data['style'] );
+		$this->assertSameSets( array(), $data['attributes'] );
+		$this->assertSameSets( array(), $data['provides_context'] );
+		$this->assertSameSets( array(), $data['uses_context'] );
+		$this->assertSameSets( array(), $data['keywords'] );
+		$this->assertSameSets( array(), $data['parent'] );
+		$this->assertSameSets( array(), $data['supports'] );
+		$this->assertSameSets( array(), $data['styles'] );
+		$this->assertNull( $data['example'] );
+		$this->assertNull( $data['category'] );
+		$this->assertNull( $data['example'] );
+		$this->assertNull( $data['textdomain'] );
+		$this->assertFalse( $data['is_dynamic'] );
+	}
+
+	/**
+	 * @ticket 47620
+	 */
+	public function test_get_item_schema() {
+		wp_set_current_user( self::$admin_id );
+		$request    = new WP_REST_Request( 'OPTIONS', '/wp/v2/block-types' );
+		$response   = rest_get_server()->dispatch( $request );
+		$data       = $response->get_data();
+		$properties = $data['schema']['properties'];
+		$this->assertCount( 19, $properties );
+		$this->assertArrayHasKey( 'title', $properties );
+		$this->assertArrayHasKey( 'icon', $properties );
+		$this->assertArrayHasKey( 'description', $properties );
+		$this->assertArrayHasKey( 'keywords', $properties );
+		$this->assertArrayHasKey( 'styles', $properties );
+		$this->assertArrayHasKey( 'textdomain', $properties );
+		$this->assertArrayHasKey( 'name', $properties );
+		$this->assertArrayHasKey( 'attributes', $properties );
+		$this->assertArrayHasKey( 'supports', $properties );
+		$this->assertArrayHasKey( 'category', $properties );
+		$this->assertArrayHasKey( 'is_dynamic', $properties );
+		$this->assertArrayHasKey( 'editor_script', $properties );
+		$this->assertArrayHasKey( 'script', $properties );
+		$this->assertArrayHasKey( 'editor_style', $properties );
+		$this->assertArrayHasKey( 'style', $properties );
+		$this->assertArrayHasKey( 'parent', $properties );
+		$this->assertArrayHasKey( 'example', $properties );
+		$this->assertArrayHasKey( 'uses_context', $properties );
+		$this->assertArrayHasKey( 'provides_context', $properties );
+	}
+
+	/**
+	 * @ticket 47620
+	 */
+	public function test_get_items_wrong_permission() {
+		wp_set_current_user( self::$subscriber_id );
+		$request  = new WP_REST_Request( 'GET', '/wp/v2/block-types' );
+		$response = rest_get_server()->dispatch( $request );
+		$this->assertErrorResponse( 'rest_block_type_cannot_view', $response, 403 );
+	}
+
+	/**
+	 * @ticket 47620
+	 */
+	public function test_get_item_wrong_permission() {
+		wp_set_current_user( self::$subscriber_id );
+		$request  = new WP_REST_Request( 'GET', '/wp/v2/block-types/fake/test' );
+		$response = rest_get_server()->dispatch( $request );
+		$this->assertErrorResponse( 'rest_block_type_cannot_view', $response, 403 );
+	}
+
+	/**
+	 * @ticket 47620
+	 */
+	public function test_get_items_no_permission() {
+		wp_set_current_user( 0 );
+		$request  = new WP_REST_Request( 'GET', '/wp/v2/block-types' );
+		$response = rest_get_server()->dispatch( $request );
+		$this->assertErrorResponse( 'rest_block_type_cannot_view', $response, 401 );
+	}
+
+	/**
+	 * @ticket 47620
+	 */
+	public function test_get_item_no_permission() {
+		wp_set_current_user( 0 );
+		$request  = new WP_REST_Request( 'GET', '/wp/v2/block-types/fake/test' );
+		$response = rest_get_server()->dispatch( $request );
+		$this->assertErrorResponse( 'rest_block_type_cannot_view', $response, 401 );
+	}
+
+	/**
+	 * @ticket 47620
+	 */
+	public function test_prepare_item() {
+		$registry = new WP_Block_Type_Registry;
+		$settings = array(
+			'icon'            => 'text',
+			'render_callback' => '__return_null',
+		);
+		$registry->register( 'fake/line', $settings );
+		$block_type = $registry->get_registered( 'fake/line' );
+		$endpoint   = new WP_REST_Block_Types_Controller;
+		$request    = new WP_REST_Request;
+		$request->set_param( 'context', 'edit' );
+		$response = $endpoint->prepare_item_for_response( $block_type, $request );
+		$this->check_block_type_object( $block_type, $response->get_data(), $response->get_links() );
+	}
+
+	/**
+	 * @ticket 47620
+	 */
+	public function test_prepare_item_limit_fields() {
+		$registry = new WP_Block_Type_Registry;
+		$settings = array(
+			'icon'            => 'text',
+			'render_callback' => '__return_null',
+		);
+		$registry->register( 'fake/line', $settings );
+		$block_type = $registry->get_registered( 'fake/line' );
+		$request    = new WP_REST_Request;
+		$endpoint   = new WP_REST_Block_Types_Controller;
+		$request->set_param( 'context', 'edit' );
+		$request->set_param( '_fields', 'name' );
+		$response = $endpoint->prepare_item_for_response( $block_type, $request );
+		$this->assertSame(
+			array(
+				'name',
+			),
+			array_keys( $response->get_data() )
+		);
+	}
+
+	/**
+	 * Util check block type object against.
+	 *
+	 * @since 5.5.0
+	 *
+	 * @param WP_Block_Type $block_type Sample block type.
+	 * @param array         $data Data to compare against.
+	 * @param array         $links Links to compare again.
+	 */
+	protected function check_block_type_object( $block_type, $data, $links ) {
+		// Test data.
+		$this->assertSame( $data['attributes'], $block_type->get_attributes() );
+		$this->assertSame( $data['is_dynamic'], $block_type->is_dynamic() );
+
+		$extra_fields = array(
+			'name',
+			'category',
+			'editor_script',
+			'script',
+			'editor_style',
+			'style',
+			'title',
+			'icon',
+			'description',
+			'keywords',
+			'parent',
+			'provides_context',
+			'uses_context',
+			'supports',
+			'styles',
+			'textdomain',
+			'example',
+		);
+
+		foreach ( $extra_fields as $extra_field ) {
+			if ( isset( $block_type->$extra_field ) ) {
+				$this->assertSame( $data[ $extra_field ], $block_type->$extra_field );
+			}
+		}
+
+		// Test links.
+		$this->assertSame( rest_url( 'wp/v2/block-types' ), $links['collection'][0]['href'] );
+		$this->assertSame( rest_url( 'wp/v2/block-types/' . $block_type->name ), $links['self'][0]['href'] );
+		if ( $block_type->is_dynamic() ) {
+			$this->assertArrayHasKey( 'https://api.w.org/render-block', $links );
+		}
+	}
+
+	/**
+	 * The test_create_item() method does not exist for block types.
+	 */
+	public function test_create_item() {}
+
+	/**
+	 * The test_update_item() method does not exist for block types.
+	 */
+	public function test_update_item() {}
+
+	/**
+	 * The test_delete_item() method does not exist for block types.
+	 */
+	public function test_delete_item() {}
+}
diff --git a/tests/rest-api/rest-blocks-controller.php b/tests/rest-api/rest-blocks-controller.php
index 1c77633f0b..e5fbb33302 100644
--- a/tests/rest-api/rest-blocks-controller.php
+++ b/tests/rest-api/rest-blocks-controller.php
@@ -133,7 +133,7 @@ class REST_Blocks_Controller_Test extends WP_UnitTestCase {
 				);
 
 				$response = rest_get_server()->dispatch( $request );
-				$this->assertEquals( $expected_status, $response->get_status() );
+				$this->assertSame( $expected_status, $response->get_status() );
 
 				break;
 
@@ -141,7 +141,7 @@ class REST_Blocks_Controller_Test extends WP_UnitTestCase {
 				$request = new WP_REST_Request( 'GET', '/wp/v2/blocks/' . self::$post_id );
 
 				$response = rest_get_server()->dispatch( $request );
-				$this->assertEquals( $expected_status, $response->get_status() );
+				$this->assertSame( $expected_status, $response->get_status() );
 
 				break;
 
@@ -165,12 +165,12 @@ class REST_Blocks_Controller_Test extends WP_UnitTestCase {
 				);
 
 				$response = rest_get_server()->dispatch( $request );
-				$this->assertEquals( $expected_status, $response->get_status() );
+				$this->assertSame( $expected_status, $response->get_status() );
 
 				$request = new WP_REST_Request( 'DELETE', '/wp/v2/blocks/' . $post_id );
 
 				$response = rest_get_server()->dispatch( $request );
-				$this->assertEquals( $expected_status, $response->get_status() );
+				$this->assertSame( $expected_status, $response->get_status() );
 
 				wp_delete_post( $post_id );
 
@@ -186,12 +186,12 @@ class REST_Blocks_Controller_Test extends WP_UnitTestCase {
 				);
 
 				$response = rest_get_server()->dispatch( $request );
-				$this->assertEquals( $expected_status, $response->get_status() );
+				$this->assertSame( $expected_status, $response->get_status() );
 
 				$request = new WP_REST_Request( 'DELETE', '/wp/v2/blocks/' . self::$post_id );
 
 				$response = rest_get_server()->dispatch( $request );
-				$this->assertEquals( $expected_status, $response->get_status() );
+				$this->assertSame( $expected_status, $response->get_status() );
 
 				break;
 
@@ -212,13 +212,13 @@ class REST_Blocks_Controller_Test extends WP_UnitTestCase {
 		$response = rest_get_server()->dispatch( $request );
 		$data     = $response->get_data();
 
-		$this->assertEquals(
+		$this->assertSame(
 			array(
 				'raw' => 'My cool block',
 			),
 			$data['title']
 		);
-		$this->assertEquals(
+		$this->assertSame(
 			array(
 				'raw'       => '<!-- wp:paragraph --><p>Hello!</p><!-- /wp:paragraph -->',
 				'protected' => false,
diff --git a/tests/rest-api/rest-categories-controller.php b/tests/rest-api/rest-categories-controller.php
index 8d44e282db..2899602451 100644
--- a/tests/rest-api/rest-categories-controller.php
+++ b/tests/rest-api/rest-categories-controller.php
@@ -15,6 +15,10 @@ class WP_Test_REST_Categories_Controller extends WP_Test_REST_Controller_Testcas
 	protected static $contributor;
 	protected static $subscriber;
 
+	protected static $category_ids     = array();
+	protected static $total_categories = 30;
+	protected static $per_page         = 50;
+
 	public static function wpSetUpBeforeClass( $factory ) {
 		self::$administrator = $factory->user->create(
 			array(
@@ -31,11 +35,25 @@ class WP_Test_REST_Categories_Controller extends WP_Test_REST_Controller_Testcas
 				'role' => 'subscriber',
 			)
 		);
+
+		// Set up categories for pagination tests.
+		for ( $i = 0; $i < self::$total_categories - 1; $i++ ) {
+			$category_ids[] = $factory->category->create(
+				array(
+					'name' => "Category {$i}",
+				)
+			);
+		}
 	}
 
 	public static function wpTearDownAfterClass() {
 		self::delete_user( self::$administrator );
 		self::delete_user( self::$subscriber );
+
+		// Remove categories for pagination tests.
+		foreach ( self::$category_ids as $category_id ) {
+			wp_delete_term( $category_id, 'category' );
+		}
 	}
 
 	public function setUp() {
@@ -95,19 +113,19 @@ class WP_Test_REST_Categories_Controller extends WP_Test_REST_Controller_Testcas
 	}
 
 	public function test_context_param() {
-		// Collection
+		// Collection.
 		$request  = new WP_REST_Request( 'OPTIONS', '/wp/v2/categories' );
 		$response = rest_get_server()->dispatch( $request );
 		$data     = $response->get_data();
-		$this->assertEquals( 'view', $data['endpoints'][0]['args']['context']['default'] );
-		$this->assertEqualSets( array( 'view', 'embed', 'edit' ), $data['endpoints'][0]['args']['context']['enum'] );
-		// Single
+		$this->assertSame( 'view', $data['endpoints'][0]['args']['context']['default'] );
+		$this->assertSameSets( array( 'view', 'embed', 'edit' ), $data['endpoints'][0]['args']['context']['enum'] );
+		// Single.
 		$category1 = $this->factory->category->create( array( 'name' => 'Season 5' ) );
 		$request   = new WP_REST_Request( 'OPTIONS', '/wp/v2/categories/' . $category1 );
 		$response  = rest_get_server()->dispatch( $request );
 		$data      = $response->get_data();
-		$this->assertEquals( 'view', $data['endpoints'][0]['args']['context']['default'] );
-		$this->assertEqualSets( array( 'view', 'embed', 'edit' ), $data['endpoints'][0]['args']['context']['enum'] );
+		$this->assertSame( 'view', $data['endpoints'][0]['args']['context']['default'] );
+		$this->assertSameSets( array( 'view', 'embed', 'edit' ), $data['endpoints'][0]['args']['context']['enum'] );
 	}
 
 	public function test_registered_query_params() {
@@ -116,7 +134,7 @@ class WP_Test_REST_Categories_Controller extends WP_Test_REST_Controller_Testcas
 		$data     = $response->get_data();
 		$keys     = array_keys( $data['endpoints'][0]['args'] );
 		sort( $keys );
-		$this->assertEquals(
+		$this->assertSame(
 			array(
 				'context',
 				'exclude',
@@ -136,13 +154,15 @@ class WP_Test_REST_Categories_Controller extends WP_Test_REST_Controller_Testcas
 	}
 
 	public function test_get_items() {
-		$request  = new WP_REST_Request( 'GET', '/wp/v2/categories' );
+		$request = new WP_REST_Request( 'GET', '/wp/v2/categories' );
+		$request->set_param( 'per_page', self::$per_page );
 		$response = rest_get_server()->dispatch( $request );
 		$this->check_get_taxonomy_terms_response( $response );
 	}
 
 	public function test_get_items_invalid_permission_for_context() {
 		wp_set_current_user( 0 );
+
 		$request = new WP_REST_Request( 'GET', '/wp/v2/categories' );
 		$request->set_param( 'context', 'edit' );
 		$response = rest_get_server()->dispatch( $request );
@@ -153,20 +173,25 @@ class WP_Test_REST_Categories_Controller extends WP_Test_REST_Controller_Testcas
 		$post_id   = $this->factory->post->create();
 		$category1 = $this->factory->category->create( array( 'name' => 'Season 5' ) );
 		$category2 = $this->factory->category->create( array( 'name' => 'The Be Sharps' ) );
+
+		$total_categories = self::$total_categories + 2;
+
 		wp_set_object_terms( $post_id, array( $category1, $category2 ), 'category' );
+
 		$request = new WP_REST_Request( 'GET', '/wp/v2/categories' );
+		$request->set_param( 'per_page', self::$per_page );
 		$request->set_param( 'hide_empty', true );
 		$response = rest_get_server()->dispatch( $request );
 		$data     = $response->get_data();
-		$this->assertEquals( 2, count( $data ) );
-		$this->assertEquals( 'Season 5', $data[0]['name'] );
-		$this->assertEquals( 'The Be Sharps', $data[1]['name'] );
+		$this->assertSame( 2, count( $data ) );
+		$this->assertSame( 'Season 5', $data[0]['name'] );
+		$this->assertSame( 'The Be Sharps', $data[1]['name'] );
 
 		// Confirm the empty category "Uncategorized" category appears.
 		$request->set_param( 'hide_empty', 'false' );
 		$response = rest_get_server()->dispatch( $request );
 		$data     = $response->get_data();
-		$this->assertEquals( 3, count( $data ) );
+		$this->assertSame( $total_categories, count( $data ) );
 	}
 
 	public function test_get_items_parent_zero_arg() {
@@ -184,11 +209,13 @@ class WP_Test_REST_Categories_Controller extends WP_Test_REST_Controller_Testcas
 				'parent' => $parent2,
 			)
 		);
+
 		$request = new WP_REST_Request( 'GET', '/wp/v2/categories' );
+		$request->set_param( 'per_page', self::$per_page );
 		$request->set_param( 'parent', 0 );
 		$response = rest_get_server()->dispatch( $request );
 
-		$this->assertEquals( 200, $response->get_status() );
+		$this->assertSame( 200, $response->get_status() );
 		$data = $response->get_data();
 
 		$args       = array(
@@ -196,7 +223,7 @@ class WP_Test_REST_Categories_Controller extends WP_Test_REST_Controller_Testcas
 			'parent'     => 0,
 		);
 		$categories = get_terms( 'category', $args );
-		$this->assertEquals( count( $categories ), count( $data ) );
+		$this->assertSame( count( $categories ), count( $data ) );
 	}
 
 	public function test_get_items_parent_zero_arg_string() {
@@ -214,11 +241,13 @@ class WP_Test_REST_Categories_Controller extends WP_Test_REST_Controller_Testcas
 				'parent' => $parent2,
 			)
 		);
+
 		$request = new WP_REST_Request( 'GET', '/wp/v2/categories' );
+		$request->set_param( 'per_page', self::$per_page );
 		$request->set_param( 'parent', '0' );
 		$response = rest_get_server()->dispatch( $request );
 
-		$this->assertEquals( 200, $response->get_status() );
+		$this->assertSame( 200, $response->get_status() );
 		$data = $response->get_data();
 
 		$args       = array(
@@ -226,7 +255,7 @@ class WP_Test_REST_Categories_Controller extends WP_Test_REST_Controller_Testcas
 			'parent'     => 0,
 		);
 		$categories = get_terms( 'category', $args );
-		$this->assertEquals( count( $categories ), count( $data ) );
+		$this->assertSame( count( $categories ), count( $data ) );
 	}
 
 	public function test_get_items_by_parent_non_found() {
@@ -236,10 +265,10 @@ class WP_Test_REST_Categories_Controller extends WP_Test_REST_Controller_Testcas
 		$request->set_param( 'parent', $parent1 );
 		$response = rest_get_server()->dispatch( $request );
 
-		$this->assertEquals( 200, $response->get_status() );
+		$this->assertSame( 200, $response->get_status() );
 		$data = $response->get_data();
 
-		$this->assertEquals( array(), $data );
+		$this->assertSame( array(), $data );
 	}
 
 	public function test_get_items_invalid_page() {
@@ -254,41 +283,49 @@ class WP_Test_REST_Categories_Controller extends WP_Test_REST_Controller_Testcas
 
 	public function test_get_items_include_query() {
 		$id1 = $this->factory->category->create();
-		$this->factory->category->create();
-		$id3     = $this->factory->category->create();
+		$id2 = $this->factory->category->create();
+
 		$request = new WP_REST_Request( 'GET', '/wp/v2/categories' );
-		// Orderby=>asc
-		$request->set_param( 'include', array( $id3, $id1 ) );
+
+		// 'orderby' => 'asc'.
+		$request->set_param( 'include', array( $id2, $id1 ) );
 		$response = rest_get_server()->dispatch( $request );
 		$data     = $response->get_data();
-		$this->assertEquals( 2, count( $data ) );
-		$this->assertEquals( $id1, $data[0]['id'] );
-		// Orderby=>include
+		$this->assertSame( 2, count( $data ) );
+		$this->assertSame( $id1, $data[0]['id'] );
+
+		// 'orderby' => 'include'.
 		$request->set_param( 'orderby', 'include' );
 		$response = rest_get_server()->dispatch( $request );
 		$data     = $response->get_data();
-		$this->assertEquals( 2, count( $data ) );
-		$this->assertEquals( $id3, $data[0]['id'] );
+		$this->assertSame( 2, count( $data ) );
+		$this->assertSame( $id2, $data[0]['id'] );
 	}
 
 	public function test_get_items_exclude_query() {
-		$id1      = $this->factory->category->create();
-		$id2      = $this->factory->category->create();
-		$request  = new WP_REST_Request( 'GET', '/wp/v2/categories' );
+		$id1 = $this->factory->category->create();
+		$id2 = $this->factory->category->create();
+
+		$request = new WP_REST_Request( 'GET', '/wp/v2/categories' );
+		$request->set_param( 'per_page', self::$per_page );
 		$response = rest_get_server()->dispatch( $request );
 		$data     = $response->get_data();
-		$this->assertTrue( in_array( $id1, wp_list_pluck( $data, 'id' ), true ) );
-		$this->assertTrue( in_array( $id2, wp_list_pluck( $data, 'id' ), true ) );
+		$ids      = wp_list_pluck( $data, 'id' );
+		$this->assertTrue( in_array( $id1, $ids, true ) );
+		$this->assertTrue( in_array( $id2, $ids, true ) );
+
 		$request->set_param( 'exclude', array( $id2 ) );
 		$response = rest_get_server()->dispatch( $request );
 		$data     = $response->get_data();
-		$this->assertTrue( in_array( $id1, wp_list_pluck( $data, 'id' ), true ) );
-		$this->assertFalse( in_array( $id2, wp_list_pluck( $data, 'id' ), true ) );
+		$ids      = wp_list_pluck( $data, 'id' );
+		$this->assertTrue( in_array( $id1, $ids, true ) );
+		$this->assertFalse( in_array( $id2, $ids, true ) );
 	}
 
 	public function test_get_items_orderby_args() {
 		$this->factory->category->create( array( 'name' => 'Apple' ) );
 		$this->factory->category->create( array( 'name' => 'Banana' ) );
+
 		/*
 		 * Tests:
 		 * - orderby
@@ -300,54 +337,56 @@ class WP_Test_REST_Categories_Controller extends WP_Test_REST_Controller_Testcas
 		$request->set_param( 'order', 'desc' );
 		$request->set_param( 'per_page', 1 );
 		$response = rest_get_server()->dispatch( $request );
-		$this->assertEquals( 200, $response->get_status() );
+		$this->assertSame( 200, $response->get_status() );
 		$data = $response->get_data();
-		$this->assertEquals( 1, count( $data ) );
-		$this->assertEquals( 'Uncategorized', $data[0]['name'] );
+		$this->assertSame( 1, count( $data ) );
+		$this->assertSame( 'Uncategorized', $data[0]['name'] );
+
 		$request = new WP_REST_Request( 'GET', '/wp/v2/categories' );
 		$request->set_param( 'orderby', 'name' );
 		$request->set_param( 'order', 'asc' );
 		$request->set_param( 'per_page', 2 );
 		$response = rest_get_server()->dispatch( $request );
-		$this->assertEquals( 200, $response->get_status() );
+		$this->assertSame( 200, $response->get_status() );
 		$data = $response->get_data();
-		$this->assertEquals( 2, count( $data ) );
-		$this->assertEquals( 'Apple', $data[0]['name'] );
+		$this->assertSame( 2, count( $data ) );
+		$this->assertSame( 'Apple', $data[0]['name'] );
 	}
 
 	public function test_get_items_orderby_id() {
 		$this->factory->category->create( array( 'name' => 'Cantaloupe' ) );
 		$this->factory->category->create( array( 'name' => 'Apple' ) );
 		$this->factory->category->create( array( 'name' => 'Banana' ) );
-		// defaults to orderby=name, order=asc
+
+		// Defaults to 'orderby' => 'name', 'order' => 'asc'.
 		$request  = new WP_REST_Request( 'GET', '/wp/v2/categories' );
 		$response = rest_get_server()->dispatch( $request );
-		$this->assertEquals( 200, $response->get_status() );
+		$this->assertSame( 200, $response->get_status() );
 		$data = $response->get_data();
-		$this->assertEquals( 'Apple', $data[0]['name'] );
-		$this->assertEquals( 'Banana', $data[1]['name'] );
-		$this->assertEquals( 'Cantaloupe', $data[2]['name'] );
-		$this->assertEquals( 'Uncategorized', $data[3]['name'] );
-		// orderby=id, with default order=asc
+		$this->assertSame( 'Apple', $data[0]['name'] );
+		$this->assertSame( 'Banana', $data[1]['name'] );
+		$this->assertSame( 'Cantaloupe', $data[2]['name'] );
+
+		// 'orderby' => 'id', with default 'order' => 'asc'.
 		$request = new WP_REST_Request( 'GET', '/wp/v2/categories' );
 		$request->set_param( 'orderby', 'id' );
 		$response = rest_get_server()->dispatch( $request );
-		$this->assertEquals( 200, $response->get_status() );
+		$this->assertSame( 200, $response->get_status() );
 		$data = $response->get_data();
-		$this->assertEquals( 'Uncategorized', $data[0]['name'] );
-		$this->assertEquals( 'Cantaloupe', $data[1]['name'] );
-		$this->assertEquals( 'Apple', $data[2]['name'] );
-		$this->assertEquals( 'Banana', $data[3]['name'] );
-		// orderby=id, order=desc
+		$this->assertSame( 'Category 0', $data[1]['name'] );
+		$this->assertSame( 'Category 1', $data[2]['name'] );
+		$this->assertSame( 'Category 2', $data[3]['name'] );
+
+		// 'orderby' => 'id', 'order' => 'desc'.
 		$request = new WP_REST_Request( 'GET', '/wp/v2/categories' );
 		$request->set_param( 'orderby', 'id' );
 		$request->set_param( 'order', 'desc' );
 		$response = rest_get_server()->dispatch( $request );
 		$data     = $response->get_data();
-		$this->assertEquals( 200, $response->get_status() );
-		$this->assertEquals( 'Banana', $data[0]['name'] );
-		$this->assertEquals( 'Apple', $data[1]['name'] );
-		$this->assertEquals( 'Cantaloupe', $data[2]['name'] );
+		$this->assertSame( 200, $response->get_status() );
+		$this->assertSame( 'Banana', $data[0]['name'] );
+		$this->assertSame( 'Apple', $data[1]['name'] );
+		$this->assertSame( 'Cantaloupe', $data[2]['name'] );
 	}
 
 	public function test_get_items_orderby_slugs() {
@@ -360,10 +399,10 @@ class WP_Test_REST_Categories_Controller extends WP_Test_REST_Controller_Testcas
 		$request->set_param( 'slug', array( 'taco', 'burrito', 'chalupa' ) );
 		$response = rest_get_server()->dispatch( $request );
 		$data     = $response->get_data();
-		$this->assertEquals( 200, $response->get_status() );
-		$this->assertEquals( 'taco', $data[0]['slug'] );
-		$this->assertEquals( 'burrito', $data[1]['slug'] );
-		$this->assertEquals( 'chalupa', $data[2]['slug'] );
+		$this->assertSame( 200, $response->get_status() );
+		$this->assertSame( 'taco', $data[0]['slug'] );
+		$this->assertSame( 'burrito', $data[1]['slug'] );
+		$this->assertSame( 'chalupa', $data[2]['slug'] );
 	}
 
 	protected function post_with_categories() {
@@ -397,40 +436,40 @@ class WP_Test_REST_Categories_Controller extends WP_Test_REST_Controller_Testcas
 		$request = new WP_REST_Request( 'GET', '/wp/v2/categories' );
 		$request->set_param( 'post', $post_id );
 		$response = rest_get_server()->dispatch( $request );
-		$this->assertEquals( 200, $response->get_status() );
+		$this->assertSame( 200, $response->get_status() );
 
 		$data = $response->get_data();
-		$this->assertEquals( 3, count( $data ) );
+		$this->assertSame( 3, count( $data ) );
 
-		// Check ordered by name by default
+		// Check ordered by name by default.
 		$names = wp_list_pluck( $data, 'name' );
-		$this->assertEquals( array( 'DC', 'Image', 'Marvel' ), $names );
+		$this->assertSame( array( 'DC', 'Image', 'Marvel' ), $names );
 	}
 
 	public function test_get_items_post_ordered_by_description() {
 		$post_id = $this->post_with_categories();
 
-		// Regular request
+		// Regular request.
 		$request = new WP_REST_Request( 'GET', '/wp/v2/categories' );
 		$request->set_param( 'post', $post_id );
 		$request->set_param( 'orderby', 'description' );
 		$response = rest_get_server()->dispatch( $request );
-		$this->assertEquals( 200, $response->get_status() );
+		$this->assertSame( 200, $response->get_status() );
 
 		$data = $response->get_data();
-		$this->assertEquals( 3, count( $data ) );
+		$this->assertSame( 3, count( $data ) );
 		$names = wp_list_pluck( $data, 'name' );
-		$this->assertEquals( array( 'Image', 'Marvel', 'DC' ), $names, 'Terms should be ordered by description' );
+		$this->assertSame( array( 'Image', 'Marvel', 'DC' ), $names, 'Terms should be ordered by description' );
 
-		// Flip the order
+		// Flip the order.
 		$request->set_param( 'order', 'desc' );
 		$response = rest_get_server()->dispatch( $request );
-		$this->assertEquals( 200, $response->get_status() );
+		$this->assertSame( 200, $response->get_status() );
 
 		$data = $response->get_data();
-		$this->assertEquals( 3, count( $data ) );
+		$this->assertSame( 3, count( $data ) );
 		$names = wp_list_pluck( $data, 'name' );
-		$this->assertEquals( array( 'DC', 'Marvel', 'Image' ), $names, 'Terms should be reverse-ordered by description' );
+		$this->assertSame( array( 'DC', 'Marvel', 'Image' ), $names, 'Terms should be reverse-ordered by description' );
 	}
 
 	public function test_get_items_post_ordered_by_id() {
@@ -440,12 +479,12 @@ class WP_Test_REST_Categories_Controller extends WP_Test_REST_Controller_Testcas
 		$request->set_param( 'post', $post_id );
 		$request->set_param( 'orderby', 'id' );
 		$response = rest_get_server()->dispatch( $request );
-		$this->assertEquals( 200, $response->get_status() );
+		$this->assertSame( 200, $response->get_status() );
 
 		$data = $response->get_data();
-		$this->assertEquals( 3, count( $data ) );
+		$this->assertSame( 3, count( $data ) );
 		$names = wp_list_pluck( $data, 'name' );
-		$this->assertEquals( array( 'DC', 'Marvel', 'Image' ), $names );
+		$this->assertSame( array( 'DC', 'Marvel', 'Image' ), $names );
 	}
 
 	public function test_get_items_custom_tax_post_args() {
@@ -476,16 +515,17 @@ class WP_Test_REST_Categories_Controller extends WP_Test_REST_Controller_Testcas
 		$request = new WP_REST_Request( 'GET', '/wp/v2/batman' );
 		$request->set_param( 'post', $post_id );
 		$response = rest_get_server()->dispatch( $request );
-		$this->assertEquals( 200, $response->get_status() );
+		$this->assertSame( 200, $response->get_status() );
 
 		$data = $response->get_data();
-		$this->assertEquals( 2, count( $data ) );
-		$this->assertEquals( 'Cape', $data[0]['name'] );
+		$this->assertSame( 2, count( $data ) );
+		$this->assertSame( 'Cape', $data[0]['name'] );
 	}
 
 	public function test_get_items_search_args() {
 		$this->factory->category->create( array( 'name' => 'Apple' ) );
 		$this->factory->category->create( array( 'name' => 'Banana' ) );
+
 		/*
 		 * Tests:
 		 * - search
@@ -493,28 +533,30 @@ class WP_Test_REST_Categories_Controller extends WP_Test_REST_Controller_Testcas
 		$request = new WP_REST_Request( 'GET', '/wp/v2/categories' );
 		$request->set_param( 'search', 'App' );
 		$response = rest_get_server()->dispatch( $request );
-		$this->assertEquals( 200, $response->get_status() );
+		$this->assertSame( 200, $response->get_status() );
 		$data = $response->get_data();
-		$this->assertEquals( 1, count( $data ) );
-		$this->assertEquals( 'Apple', $data[0]['name'] );
+		$this->assertSame( 1, count( $data ) );
+		$this->assertSame( 'Apple', $data[0]['name'] );
+
 		$request = new WP_REST_Request( 'GET', '/wp/v2/categories' );
 		$request->set_param( 'search', 'Garbage' );
 		$response = rest_get_server()->dispatch( $request );
-		$this->assertEquals( 200, $response->get_status() );
+		$this->assertSame( 200, $response->get_status() );
 		$data = $response->get_data();
-		$this->assertEquals( 0, count( $data ) );
+		$this->assertSame( 0, count( $data ) );
 	}
 
 	public function test_get_items_slug_arg() {
 		$this->factory->category->create( array( 'name' => 'Apple' ) );
 		$this->factory->category->create( array( 'name' => 'Banana' ) );
+
 		$request = new WP_REST_Request( 'GET', '/wp/v2/categories' );
 		$request->set_param( 'slug', 'apple' );
 		$response = rest_get_server()->dispatch( $request );
-		$this->assertEquals( 200, $response->get_status() );
+		$this->assertSame( 200, $response->get_status() );
 		$data = $response->get_data();
-		$this->assertEquals( 1, count( $data ) );
-		$this->assertEquals( 'Apple', $data[0]['name'] );
+		$this->assertSame( 1, count( $data ) );
+		$this->assertSame( 'Apple', $data[0]['name'] );
 	}
 
 	public function test_get_terms_parent_arg() {
@@ -525,22 +567,16 @@ class WP_Test_REST_Categories_Controller extends WP_Test_REST_Controller_Testcas
 				'parent' => $category1,
 			)
 		);
+
 		$request = new WP_REST_Request( 'GET', '/wp/v2/categories' );
 		$request->set_param( 'parent', $category1 );
 		$response = rest_get_server()->dispatch( $request );
 		$data     = $response->get_data();
-		$this->assertEquals( 1, count( $data ) );
-		$this->assertEquals( 'Child', $data[0]['name'] );
+		$this->assertSame( 1, count( $data ) );
+		$this->assertSame( 'Child', $data[0]['name'] );
 	}
 
 	public function test_get_terms_invalid_parent_arg() {
-		$category1 = $this->factory->category->create( array( 'name' => 'Parent' ) );
-		$this->factory->category->create(
-			array(
-				'name'   => 'Child',
-				'parent' => $category1,
-			)
-		);
 		$request = new WP_REST_Request( 'GET', '/wp/v2/categories' );
 		$request->set_param( 'parent', 'invalid-parent' );
 		$response = rest_get_server()->dispatch( $request );
@@ -574,19 +610,15 @@ class WP_Test_REST_Categories_Controller extends WP_Test_REST_Controller_Testcas
 	}
 
 	public function test_get_terms_pagination_headers() {
-		// Start of the index + Uncategorized default term
-		for ( $i = 0; $i < 49; $i++ ) {
-			$this->factory->category->create(
-				array(
-					'name' => "Category {$i}",
-				)
-			);
-		}
+		$total_categories = self::$total_categories;
+		$total_pages      = (int) ceil( $total_categories / 10 );
+
+		// Start of the index + Uncategorized default term.
 		$request  = new WP_REST_Request( 'GET', '/wp/v2/categories' );
 		$response = rest_get_server()->dispatch( $request );
 		$headers  = $response->get_headers();
-		$this->assertEquals( 50, $headers['X-WP-Total'] );
-		$this->assertEquals( 5, $headers['X-WP-TotalPages'] );
+		$this->assertSame( $total_categories, $headers['X-WP-Total'] );
+		$this->assertSame( $total_pages, $headers['X-WP-TotalPages'] );
 		$this->assertCount( 10, $response->get_data() );
 		$next_link = add_query_arg(
 			array(
@@ -596,18 +628,17 @@ class WP_Test_REST_Categories_Controller extends WP_Test_REST_Controller_Testcas
 		);
 		$this->assertFalse( stripos( $headers['Link'], 'rel="prev"' ) );
 		$this->assertContains( '<' . $next_link . '>; rel="next"', $headers['Link'] );
-		// 3rd page
-		$this->factory->category->create(
-			array(
-				'name' => 'Category 51',
-			)
-		);
+
+		// 3rd page.
+		$this->factory->category->create();
+		$total_categories++;
+		$total_pages++;
 		$request = new WP_REST_Request( 'GET', '/wp/v2/categories' );
 		$request->set_param( 'page', 3 );
 		$response = rest_get_server()->dispatch( $request );
 		$headers  = $response->get_headers();
-		$this->assertEquals( 51, $headers['X-WP-Total'] );
-		$this->assertEquals( 6, $headers['X-WP-TotalPages'] );
+		$this->assertSame( $total_categories, $headers['X-WP-Total'] );
+		$this->assertSame( $total_pages, $headers['X-WP-TotalPages'] );
 		$this->assertCount( 10, $response->get_data() );
 		$prev_link = add_query_arg(
 			array(
@@ -623,33 +654,35 @@ class WP_Test_REST_Categories_Controller extends WP_Test_REST_Controller_Testcas
 			rest_url( 'wp/v2/categories' )
 		);
 		$this->assertContains( '<' . $next_link . '>; rel="next"', $headers['Link'] );
-		// Last page
+
+		// Last page.
 		$request = new WP_REST_Request( 'GET', '/wp/v2/categories' );
-		$request->set_param( 'page', 6 );
+		$request->set_param( 'page', $total_pages );
 		$response = rest_get_server()->dispatch( $request );
 		$headers  = $response->get_headers();
-		$this->assertEquals( 51, $headers['X-WP-Total'] );
-		$this->assertEquals( 6, $headers['X-WP-TotalPages'] );
+		$this->assertSame( $total_categories, $headers['X-WP-Total'] );
+		$this->assertSame( $total_pages, $headers['X-WP-TotalPages'] );
 		$this->assertCount( 1, $response->get_data() );
 		$prev_link = add_query_arg(
 			array(
-				'page' => 5,
+				'page' => $total_pages - 1,
 			),
 			rest_url( 'wp/v2/categories' )
 		);
 		$this->assertContains( '<' . $prev_link . '>; rel="prev"', $headers['Link'] );
 		$this->assertFalse( stripos( $headers['Link'], 'rel="next"' ) );
-		// Out of bounds
+
+		// Out of bounds.
 		$request = new WP_REST_Request( 'GET', '/wp/v2/categories' );
-		$request->set_param( 'page', 8 );
+		$request->set_param( 'page', 100 );
 		$response = rest_get_server()->dispatch( $request );
 		$headers  = $response->get_headers();
-		$this->assertEquals( 51, $headers['X-WP-Total'] );
-		$this->assertEquals( 6, $headers['X-WP-TotalPages'] );
+		$this->assertSame( $total_categories, $headers['X-WP-Total'] );
+		$this->assertSame( $total_pages, $headers['X-WP-TotalPages'] );
 		$this->assertCount( 0, $response->get_data() );
 		$prev_link = add_query_arg(
 			array(
-				'page' => 6,
+				'page' => $total_pages,
 			),
 			rest_url( 'wp/v2/categories' )
 		);
@@ -658,29 +691,23 @@ class WP_Test_REST_Categories_Controller extends WP_Test_REST_Controller_Testcas
 	}
 
 	public function test_get_items_per_page_exceeds_number_of_items() {
-		// Start of the index + Uncategorized default term
-		for ( $i = 0; $i < 17; $i++ ) {
-			$this->factory->category->create(
-				array(
-					'name' => "Category {$i}",
-				)
-			);
-		}
+		// Start of the index + Uncategorized default term.
 		$request = new WP_REST_Request( 'GET', '/wp/v2/categories' );
 		$request->set_param( 'page', 1 );
 		$request->set_param( 'per_page', 100 );
 		$response = rest_get_server()->dispatch( $request );
 		$headers  = $response->get_headers();
-		$this->assertEquals( 18, $headers['X-WP-Total'] );
-		$this->assertEquals( 1, $headers['X-WP-TotalPages'] );
-		$this->assertCount( 18, $response->get_data() );
+		$this->assertSame( self::$total_categories, $headers['X-WP-Total'] );
+		$this->assertSame( 1, $headers['X-WP-TotalPages'] );
+		$this->assertCount( self::$total_categories, $response->get_data() );
+
 		$request = new WP_REST_Request( 'GET', '/wp/v2/categories' );
 		$request->set_param( 'page', 2 );
 		$request->set_param( 'per_page', 100 );
 		$response = rest_get_server()->dispatch( $request );
 		$headers  = $response->get_headers();
-		$this->assertEquals( 18, $headers['X-WP-Total'] );
-		$this->assertEquals( 1, $headers['X-WP-TotalPages'] );
+		$this->assertSame( self::$total_categories, $headers['X-WP-Total'] );
+		$this->assertSame( 1, $headers['X-WP-TotalPages'] );
 		$this->assertCount( 0, $response->get_data() );
 	}
 
@@ -737,6 +764,7 @@ class WP_Test_REST_Categories_Controller extends WP_Test_REST_Controller_Testcas
 
 	public function test_get_item_invalid_permission_for_context() {
 		wp_set_current_user( 0 );
+
 		$request = new WP_REST_Request( 'GET', '/wp/v2/categories/1' );
 		$request->set_param( 'context', 'edit' );
 		$response = rest_get_server()->dispatch( $request );
@@ -759,12 +787,13 @@ class WP_Test_REST_Categories_Controller extends WP_Test_REST_Controller_Testcas
 
 	public function test_get_item_incorrect_taxonomy() {
 		register_taxonomy( 'robin', 'post' );
-		$term1    = $this->factory->term->create(
+		$term1 = $this->factory->term->create(
 			array(
 				'name'     => 'Cape',
 				'taxonomy' => 'robin',
 			)
 		);
+
 		$request  = new WP_REST_Request( 'GET', '/wp/v2/categories/' . $term1 );
 		$response = rest_get_server()->dispatch( $request );
 		$this->assertErrorResponse( 'rest_term_invalid', $response, 404 );
@@ -772,18 +801,19 @@ class WP_Test_REST_Categories_Controller extends WP_Test_REST_Controller_Testcas
 
 	public function test_create_item() {
 		wp_set_current_user( self::$administrator );
+
 		$request = new WP_REST_Request( 'POST', '/wp/v2/categories' );
 		$request->set_param( 'name', 'My Awesome Term' );
 		$request->set_param( 'description', 'This term is so awesome.' );
 		$request->set_param( 'slug', 'so-awesome' );
 		$response = rest_get_server()->dispatch( $request );
-		$this->assertEquals( 201, $response->get_status() );
+		$this->assertSame( 201, $response->get_status() );
 		$headers = $response->get_headers();
 		$data    = $response->get_data();
 		$this->assertContains( '/wp/v2/categories/' . $data['id'], $headers['Location'] );
-		$this->assertEquals( 'My Awesome Term', $data['name'] );
-		$this->assertEquals( 'This term is so awesome.', $data['description'] );
-		$this->assertEquals( 'so-awesome', $data['slug'] );
+		$this->assertSame( 'My Awesome Term', $data['name'] );
+		$this->assertSame( 'This term is so awesome.', $data['description'] );
+		$this->assertSame( 'so-awesome', $data['slug'] );
 	}
 
 	/**
@@ -791,22 +821,24 @@ class WP_Test_REST_Categories_Controller extends WP_Test_REST_Controller_Testcas
 	 */
 	public function test_create_item_term_already_exists() {
 		wp_set_current_user( self::$administrator );
+
 		$existing_id = $this->factory->category->create( array( 'name' => 'Existing' ) );
 
 		$request = new WP_REST_Request( 'POST', '/wp/v2/categories' );
 		$request->set_param( 'name', 'Existing' );
 
 		$response = rest_get_server()->dispatch( $request );
-		$this->assertEquals( 400, $response->get_status() );
+		$this->assertSame( 400, $response->get_status() );
 		$data = $response->get_data();
-		$this->assertEquals( 'term_exists', $data['code'] );
-		$this->assertEquals( $existing_id, (int) $data['data']['term_id'] );
+		$this->assertSame( 'term_exists', $data['code'] );
+		$this->assertSame( $existing_id, (int) $data['data']['term_id'] );
 
 		wp_delete_term( $existing_id, 'category' );
 	}
 
 	public function test_create_item_invalid_taxonomy() {
 		wp_set_current_user( self::$administrator );
+
 		$request = new WP_REST_Request( 'POST', '/wp/v2/invalid-taxonomy' );
 		$request->set_param( 'name', 'Invalid Taxonomy' );
 		$response = rest_get_server()->dispatch( $request );
@@ -815,6 +847,7 @@ class WP_Test_REST_Categories_Controller extends WP_Test_REST_Controller_Testcas
 
 	public function test_create_item_incorrect_permissions() {
 		wp_set_current_user( self::$subscriber );
+
 		$request = new WP_REST_Request( 'POST', '/wp/v2/categories' );
 		$request->set_param( 'name', 'Incorrect permissions' );
 		$response = rest_get_server()->dispatch( $request );
@@ -823,6 +856,7 @@ class WP_Test_REST_Categories_Controller extends WP_Test_REST_Controller_Testcas
 
 	public function test_create_item_incorrect_permissions_contributor() {
 		wp_set_current_user( self::$contributor );
+
 		$request = new WP_REST_Request( 'POST', '/wp/v2/categories' );
 		$request->set_param( 'name', 'Incorrect permissions' );
 		$response = rest_get_server()->dispatch( $request );
@@ -831,6 +865,7 @@ class WP_Test_REST_Categories_Controller extends WP_Test_REST_Controller_Testcas
 
 	public function test_create_item_missing_arguments() {
 		wp_set_current_user( self::$administrator );
+
 		$request  = new WP_REST_Request( 'POST', '/wp/v2/categories' );
 		$response = rest_get_server()->dispatch( $request );
 		$this->assertErrorResponse( 'rest_missing_callback_param', $response, 400 );
@@ -838,18 +873,21 @@ class WP_Test_REST_Categories_Controller extends WP_Test_REST_Controller_Testcas
 
 	public function test_create_item_with_parent() {
 		wp_set_current_user( self::$administrator );
-		$parent  = wp_insert_term( 'test-category', 'category' );
+
+		$parent = wp_insert_term( 'test-category', 'category' );
+
 		$request = new WP_REST_Request( 'POST', '/wp/v2/categories' );
 		$request->set_param( 'name', 'My Awesome Term' );
 		$request->set_param( 'parent', $parent['term_id'] );
 		$response = rest_get_server()->dispatch( $request );
-		$this->assertEquals( 201, $response->get_status() );
+		$this->assertSame( 201, $response->get_status() );
 		$data = $response->get_data();
-		$this->assertEquals( $parent['term_id'], $data['parent'] );
+		$this->assertSame( $parent['term_id'], $data['parent'] );
 	}
 
 	public function test_create_item_invalid_parent() {
 		wp_set_current_user( self::$administrator );
+
 		$term = get_term_by( 'id', $this->factory->category->create(), 'category' );
 
 		$request = new WP_REST_Request( 'POST', '/wp/v2/categories/' . $term->term_id );
@@ -861,25 +899,30 @@ class WP_Test_REST_Categories_Controller extends WP_Test_REST_Controller_Testcas
 
 	public function test_create_item_with_no_parent() {
 		wp_set_current_user( self::$administrator );
-		$parent  = 0;
+
+		$parent = 0;
+
 		$request = new WP_REST_Request( 'POST', '/wp/v2/categories' );
 		$request->set_param( 'name', 'My Awesome Term' );
 		$request->set_param( 'parent', $parent );
 		$response = rest_get_server()->dispatch( $request );
-		$this->assertEquals( 201, $response->get_status() );
+		$this->assertSame( 201, $response->get_status() );
 		$data = $response->get_data();
-		$this->assertEquals( $parent, $data['parent'] );
+		$this->assertSame( $parent, $data['parent'] );
 	}
 
 	public function test_update_item() {
 		wp_set_current_user( self::$administrator );
+
 		$orig_args = array(
 			'name'        => 'Original Name',
 			'description' => 'Original Description',
 			'slug'        => 'original-slug',
 		);
-		$term      = get_term_by( 'id', $this->factory->category->create( $orig_args ), 'category' );
-		$request   = new WP_REST_Request( 'POST', '/wp/v2/categories/' . $term->term_id );
+
+		$term = get_term_by( 'id', $this->factory->category->create( $orig_args ), 'category' );
+
+		$request = new WP_REST_Request( 'POST', '/wp/v2/categories/' . $term->term_id );
 		$request->set_param( 'name', 'New Name' );
 		$request->set_param( 'description', 'New Description' );
 		$request->set_param( 'slug', 'new-slug' );
@@ -892,18 +935,19 @@ class WP_Test_REST_Categories_Controller extends WP_Test_REST_Controller_Testcas
 			)
 		);
 		$response = rest_get_server()->dispatch( $request );
-		$this->assertEquals( 200, $response->get_status() );
+		$this->assertSame( 200, $response->get_status() );
 		$data = $response->get_data();
-		$this->assertEquals( 'New Name', $data['name'] );
-		$this->assertEquals( 'New Description', $data['description'] );
-		$this->assertEquals( 'new-slug', $data['slug'] );
-		$this->assertEquals( 'just meta', $data['meta']['test_single'] );
-		$this->assertEquals( 'category-specific meta', $data['meta']['test_cat_single'] );
+		$this->assertSame( 'New Name', $data['name'] );
+		$this->assertSame( 'New Description', $data['description'] );
+		$this->assertSame( 'new-slug', $data['slug'] );
+		$this->assertSame( 'just meta', $data['meta']['test_single'] );
+		$this->assertSame( 'category-specific meta', $data['meta']['test_cat_single'] );
 		$this->assertFalse( isset( $data['meta']['test_tag_meta'] ) );
 	}
 
 	public function test_update_item_invalid_taxonomy() {
 		wp_set_current_user( self::$administrator );
+
 		$request = new WP_REST_Request( 'POST', '/wp/v2/invalid-taxonomy/' . REST_TESTS_IMPOSSIBLY_HIGH_NUMBER );
 		$request->set_param( 'name', 'Invalid Taxonomy' );
 		$response = rest_get_server()->dispatch( $request );
@@ -912,6 +956,7 @@ class WP_Test_REST_Categories_Controller extends WP_Test_REST_Controller_Testcas
 
 	public function test_update_item_invalid_term() {
 		wp_set_current_user( self::$administrator );
+
 		$request = new WP_REST_Request( 'POST', '/wp/v2/categories/' . REST_TESTS_IMPOSSIBLY_HIGH_NUMBER );
 		$request->set_param( 'name', 'Invalid Term' );
 		$response = rest_get_server()->dispatch( $request );
@@ -920,7 +965,9 @@ class WP_Test_REST_Categories_Controller extends WP_Test_REST_Controller_Testcas
 
 	public function test_update_item_incorrect_permissions() {
 		wp_set_current_user( self::$subscriber );
-		$term    = get_term_by( 'id', $this->factory->category->create(), 'category' );
+
+		$term = get_term_by( 'id', $this->factory->category->create(), 'category' );
+
 		$request = new WP_REST_Request( 'POST', '/wp/v2/categories/' . $term->term_id );
 		$request->set_param( 'name', 'Incorrect permissions' );
 		$response = rest_get_server()->dispatch( $request );
@@ -929,16 +976,17 @@ class WP_Test_REST_Categories_Controller extends WP_Test_REST_Controller_Testcas
 
 	public function test_update_item_parent() {
 		wp_set_current_user( self::$administrator );
+
 		$parent = get_term_by( 'id', $this->factory->category->create(), 'category' );
 		$term   = get_term_by( 'id', $this->factory->category->create(), 'category' );
 
 		$request = new WP_REST_Request( 'POST', '/wp/v2/categories/' . $term->term_id );
 		$request->set_param( 'parent', $parent->term_id );
 		$response = rest_get_server()->dispatch( $request );
-		$this->assertEquals( 200, $response->get_status() );
+		$this->assertSame( 200, $response->get_status() );
 
 		$data = $response->get_data();
-		$this->assertEquals( $parent->term_id, $data['parent'] );
+		$this->assertSame( $parent->term_id, $data['parent'] );
 	}
 
 	public function test_update_item_remove_parent() {
@@ -950,26 +998,27 @@ class WP_Test_REST_Categories_Controller extends WP_Test_REST_Controller_Testcas
 		$term = get_term_by(
 			'id',
 			$this->factory->category->create(
-				[
+				array(
 					'parent' => $old_parent_term->term_id,
-				]
+				)
 			),
 			'category'
 		);
 
-		$this->assertEquals( $old_parent_term->term_id, $term->parent );
+		$this->assertSame( $old_parent_term->term_id, $term->parent );
 
 		$request = new WP_REST_Request( 'POST', '/wp/v2/categories/' . $term->term_id );
 		$request->set_param( 'parent', $new_parent_id );
 		$response = rest_get_server()->dispatch( $request );
-		$this->assertEquals( 200, $response->get_status() );
+		$this->assertSame( 200, $response->get_status() );
 
 		$data = $response->get_data();
-		$this->assertEquals( $new_parent_id, $data['parent'] );
+		$this->assertSame( $new_parent_id, $data['parent'] );
 	}
 
 	public function test_update_item_invalid_parent() {
 		wp_set_current_user( self::$administrator );
+
 		$term = get_term_by( 'id', $this->factory->category->create(), 'category' );
 
 		$request = new WP_REST_Request( 'POST', '/wp/v2/categories/' . $term->term_id );
@@ -980,18 +1029,21 @@ class WP_Test_REST_Categories_Controller extends WP_Test_REST_Controller_Testcas
 
 	public function test_delete_item() {
 		wp_set_current_user( self::$administrator );
-		$term    = get_term_by( 'id', $this->factory->category->create( array( 'name' => 'Deleted Category' ) ), 'category' );
+
+		$term = get_term_by( 'id', $this->factory->category->create( array( 'name' => 'Deleted Category' ) ), 'category' );
+
 		$request = new WP_REST_Request( 'DELETE', '/wp/v2/categories/' . $term->term_id );
 		$request->set_param( 'force', true );
 		$response = rest_get_server()->dispatch( $request );
-		$this->assertEquals( 200, $response->get_status() );
+		$this->assertSame( 200, $response->get_status() );
 		$data = $response->get_data();
 		$this->assertTrue( $data['deleted'] );
-		$this->assertEquals( 'Deleted Category', $data['previous']['name'] );
+		$this->assertSame( 'Deleted Category', $data['previous']['name'] );
 	}
 
 	public function test_delete_item_no_trash() {
 		wp_set_current_user( self::$administrator );
+
 		$term = get_term_by( 'id', $this->factory->category->create( array( 'name' => 'Deleted Category' ) ), 'category' );
 
 		$request  = new WP_REST_Request( 'DELETE', '/wp/v2/categories/' . $term->term_id );
@@ -1005,6 +1057,7 @@ class WP_Test_REST_Categories_Controller extends WP_Test_REST_Controller_Testcas
 
 	public function test_delete_item_invalid_taxonomy() {
 		wp_set_current_user( self::$administrator );
+
 		$request  = new WP_REST_Request( 'DELETE', '/wp/v2/invalid-taxonomy/' . REST_TESTS_IMPOSSIBLY_HIGH_NUMBER );
 		$response = rest_get_server()->dispatch( $request );
 		$this->assertErrorResponse( 'rest_no_route', $response, 404 );
@@ -1012,6 +1065,7 @@ class WP_Test_REST_Categories_Controller extends WP_Test_REST_Controller_Testcas
 
 	public function test_delete_item_invalid_term() {
 		wp_set_current_user( self::$administrator );
+
 		$request  = new WP_REST_Request( 'DELETE', '/wp/v2/categories/' . REST_TESTS_IMPOSSIBLY_HIGH_NUMBER );
 		$response = rest_get_server()->dispatch( $request );
 		$this->assertErrorResponse( 'rest_term_invalid', $response, 404 );
@@ -1019,6 +1073,7 @@ class WP_Test_REST_Categories_Controller extends WP_Test_REST_Controller_Testcas
 
 	public function test_delete_item_incorrect_permissions() {
 		wp_set_current_user( self::$subscriber );
+
 		$term     = get_term_by( 'id', $this->factory->category->create(), 'category' );
 		$request  = new WP_REST_Request( 'DELETE', '/wp/v2/categories/' . $term->term_id );
 		$response = rest_get_server()->dispatch( $request );
@@ -1041,7 +1096,7 @@ class WP_Test_REST_Categories_Controller extends WP_Test_REST_Controller_Testcas
 		$request->set_param( '_fields', 'id,name' );
 		$term     = get_term( 1, 'category' );
 		$response = $endpoint->prepare_item_for_response( $term, $request );
-		$this->assertEquals(
+		$this->assertSame(
 			array(
 				'id',
 				'name',
@@ -1064,10 +1119,10 @@ class WP_Test_REST_Categories_Controller extends WP_Test_REST_Controller_Testcas
 
 		$this->check_taxonomy_term( $term, $data, $response->get_links() );
 
-		$this->assertEquals( 1, $data['parent'] );
+		$this->assertSame( 1, $data['parent'] );
 
 		$links = $response->get_links();
-		$this->assertEquals( rest_url( 'wp/v2/categories/1' ), $links['up'][0]['href'] );
+		$this->assertSame( rest_url( 'wp/v2/categories/1' ), $links['up'][0]['href'] );
 	}
 
 	public function test_get_item_schema() {
@@ -1075,7 +1130,7 @@ class WP_Test_REST_Categories_Controller extends WP_Test_REST_Controller_Testcas
 		$response   = rest_get_server()->dispatch( $request );
 		$data       = $response->get_data();
 		$properties = $data['schema']['properties'];
-		$this->assertEquals( 9, count( $properties ) );
+		$this->assertSame( 9, count( $properties ) );
 		$this->assertArrayHasKey( 'id', $properties );
 		$this->assertArrayHasKey( 'count', $properties );
 		$this->assertArrayHasKey( 'description', $properties );
@@ -1085,7 +1140,7 @@ class WP_Test_REST_Categories_Controller extends WP_Test_REST_Controller_Testcas
 		$this->assertArrayHasKey( 'parent', $properties );
 		$this->assertArrayHasKey( 'slug', $properties );
 		$this->assertArrayHasKey( 'taxonomy', $properties );
-		$this->assertEquals( array_keys( get_taxonomies() ), $properties['taxonomy']['enum'] );
+		$this->assertSame( array_keys( get_taxonomies() ), $properties['taxonomy']['enum'] );
 	}
 
 	public function test_get_additional_field_registration() {
@@ -1111,7 +1166,7 @@ class WP_Test_REST_Categories_Controller extends WP_Test_REST_Controller_Testcas
 		$response = rest_get_server()->dispatch( $request );
 		$data     = $response->get_data();
 		$this->assertArrayHasKey( 'my_custom_int', $data['schema']['properties'] );
-		$this->assertEquals( $schema, $data['schema']['properties']['my_custom_int'] );
+		$this->assertSame( $schema, $data['schema']['properties']['my_custom_int'] );
 
 		$category_id = $this->factory->category->create();
 		$request     = new WP_REST_Request( 'GET', '/wp/v2/categories/' . $category_id );
@@ -1134,31 +1189,31 @@ class WP_Test_REST_Categories_Controller extends WP_Test_REST_Controller_Testcas
 	}
 
 	protected function check_get_taxonomy_terms_response( $response ) {
-		$this->assertEquals( 200, $response->get_status() );
+		$this->assertSame( 200, $response->get_status() );
 		$data       = $response->get_data();
 		$args       = array(
 			'hide_empty' => false,
 		);
 		$categories = get_terms( 'category', $args );
-		$this->assertEquals( count( $categories ), count( $data ) );
-		$this->assertEquals( $categories[0]->term_id, $data[0]['id'] );
-		$this->assertEquals( $categories[0]->name, $data[0]['name'] );
-		$this->assertEquals( $categories[0]->slug, $data[0]['slug'] );
-		$this->assertEquals( $categories[0]->taxonomy, $data[0]['taxonomy'] );
-		$this->assertEquals( $categories[0]->description, $data[0]['description'] );
-		$this->assertEquals( $categories[0]->count, $data[0]['count'] );
+		$this->assertSame( count( $categories ), count( $data ) );
+		$this->assertSame( $categories[0]->term_id, $data[0]['id'] );
+		$this->assertSame( $categories[0]->name, $data[0]['name'] );
+		$this->assertSame( $categories[0]->slug, $data[0]['slug'] );
+		$this->assertSame( $categories[0]->taxonomy, $data[0]['taxonomy'] );
+		$this->assertSame( $categories[0]->description, $data[0]['description'] );
+		$this->assertSame( $categories[0]->count, $data[0]['count'] );
 	}
 
 	protected function check_taxonomy_term( $term, $data, $links ) {
-		$this->assertEquals( $term->term_id, $data['id'] );
-		$this->assertEquals( $term->name, $data['name'] );
-		$this->assertEquals( $term->slug, $data['slug'] );
-		$this->assertEquals( $term->description, $data['description'] );
-		$this->assertEquals( get_term_link( $term ), $data['link'] );
-		$this->assertEquals( $term->count, $data['count'] );
+		$this->assertSame( $term->term_id, $data['id'] );
+		$this->assertSame( $term->name, $data['name'] );
+		$this->assertSame( $term->slug, $data['slug'] );
+		$this->assertSame( $term->description, $data['description'] );
+		$this->assertSame( get_term_link( $term ), $data['link'] );
+		$this->assertSame( $term->count, $data['count'] );
 		$taxonomy = get_taxonomy( $term->taxonomy );
 		if ( $taxonomy->hierarchical ) {
-			$this->assertEquals( $term->parent, $data['parent'] );
+			$this->assertSame( $term->parent, $data['parent'] );
 		} else {
 			$this->assertFalse( isset( $term->parent ) );
 		}
@@ -1174,14 +1229,14 @@ class WP_Test_REST_Categories_Controller extends WP_Test_REST_Controller_Testcas
 			$relations[] = 'up';
 		}
 
-		$this->assertEqualSets( $relations, array_keys( $links ) );
+		$this->assertSameSets( $relations, array_keys( $links ) );
 		$this->assertContains( 'wp/v2/taxonomies/' . $term->taxonomy, $links['about'][0]['href'] );
-		$this->assertEquals( add_query_arg( 'categories', $term->term_id, rest_url( 'wp/v2/posts' ) ), $links['https://api.w.org/post_type'][0]['href'] );
+		$this->assertSame( add_query_arg( 'categories', $term->term_id, rest_url( 'wp/v2/posts' ) ), $links['https://api.w.org/post_type'][0]['href'] );
 	}
 
 	protected function check_get_taxonomy_term_response( $response ) {
 
-		$this->assertEquals( 200, $response->get_status() );
+		$this->assertSame( 200, $response->get_status() );
 
 		$data     = $response->get_data();
 		$category = get_term( 1, 'category' );
diff --git a/tests/rest-api/rest-comments-controller.php b/tests/rest-api/rest-comments-controller.php
index aa77f481ab..9d35a747f9 100644
--- a/tests/rest-api/rest-comments-controller.php
+++ b/tests/rest-api/rest-comments-controller.php
@@ -25,6 +25,10 @@ class WP_Test_REST_Comments_Controller extends WP_Test_REST_Controller_Testcase
 	protected static $approved_id;
 	protected static $hold_id;
 
+	protected static $comment_ids    = array();
+	protected static $total_comments = 30;
+	protected static $per_page       = 50;
+
 	protected $endpoint;
 
 	public static function wpSetUpBeforeClass( $factory ) {
@@ -110,6 +114,16 @@ class WP_Test_REST_Comments_Controller extends WP_Test_REST_Controller_Testcase
 				'user_id'          => self::$subscriber_id,
 			)
 		);
+
+		// Set up comments for pagination tests.
+		for ( $i = 0; $i < self::$total_comments - 1; $i++ ) {
+			$comment_ids[] = $factory->comment->create(
+				array(
+					'comment_content' => "Comment {$i}",
+					'comment_post_ID' => self::$post_id,
+				)
+			);
+		}
 	}
 
 	public static function wpTearDownAfterClass() {
@@ -129,6 +143,11 @@ class WP_Test_REST_Comments_Controller extends WP_Test_REST_Controller_Testcase
 		wp_delete_post( self::$trash_id, true );
 		wp_delete_post( self::$approved_id, true );
 		wp_delete_post( self::$hold_id, true );
+
+		// Remove comments for pagination tests.
+		foreach ( self::$comment_ids as $comment_id ) {
+			wp_delete_comment( $comment_id, true );
+		}
 	}
 
 	public function setUp() {
@@ -149,18 +168,18 @@ class WP_Test_REST_Comments_Controller extends WP_Test_REST_Controller_Testcase
 	}
 
 	public function test_context_param() {
-		// Collection
+		// Collection.
 		$request  = new WP_REST_Request( 'OPTIONS', '/wp/v2/comments' );
 		$response = rest_get_server()->dispatch( $request );
 		$data     = $response->get_data();
-		$this->assertEquals( 'view', $data['endpoints'][0]['args']['context']['default'] );
-		$this->assertEquals( array( 'view', 'embed', 'edit' ), $data['endpoints'][0]['args']['context']['enum'] );
-		// Single
+		$this->assertSame( 'view', $data['endpoints'][0]['args']['context']['default'] );
+		$this->assertSame( array( 'view', 'embed', 'edit' ), $data['endpoints'][0]['args']['context']['enum'] );
+		// Single.
 		$request  = new WP_REST_Request( 'OPTIONS', '/wp/v2/comments/' . self::$approved_id );
 		$response = rest_get_server()->dispatch( $request );
 		$data     = $response->get_data();
-		$this->assertEquals( 'view', $data['endpoints'][0]['args']['context']['default'] );
-		$this->assertEquals( array( 'view', 'embed', 'edit' ), $data['endpoints'][0]['args']['context']['enum'] );
+		$this->assertSame( 'view', $data['endpoints'][0]['args']['context']['default'] );
+		$this->assertSame( array( 'view', 'embed', 'edit' ), $data['endpoints'][0]['args']['context']['enum'] );
 	}
 
 	public function test_registered_query_params() {
@@ -169,7 +188,7 @@ class WP_Test_REST_Comments_Controller extends WP_Test_REST_Controller_Testcase
 		$data     = $response->get_data();
 		$keys     = array_keys( $data['endpoints'][0]['args'] );
 		sort( $keys );
-		$this->assertEquals(
+		$this->assertSame(
 			array(
 				'after',
 				'author',
@@ -197,16 +216,14 @@ class WP_Test_REST_Comments_Controller extends WP_Test_REST_Controller_Testcase
 	}
 
 	public function test_get_items() {
-		$this->factory->comment->create_post_comments( self::$post_id, 6 );
-
 		$request = new WP_REST_Request( 'GET', '/wp/v2/comments' );
+		$request->set_param( 'per_page', self::$per_page );
 
 		$response = rest_get_server()->dispatch( $request );
-		$this->assertEquals( 200, $response->get_status() );
+		$this->assertSame( 200, $response->get_status() );
 
 		$comments = $response->get_data();
-		// We created 6 comments in this method, plus self::$approved_id.
-		$this->assertCount( 7, $comments );
+		$this->assertCount( self::$total_comments, $comments );
 	}
 
 	/**
@@ -215,10 +232,11 @@ class WP_Test_REST_Comments_Controller extends WP_Test_REST_Controller_Testcase
 	public function test_get_items_with_password() {
 		wp_set_current_user( 0 );
 
-		$args             = array(
+		$args = array(
 			'comment_approved' => 1,
 			'comment_post_ID'  => self::$password_id,
 		);
+
 		$password_comment = $this->factory->comment->create( $args );
 
 		$request = new WP_REST_Request( 'GET', '/wp/v2/comments' );
@@ -226,7 +244,7 @@ class WP_Test_REST_Comments_Controller extends WP_Test_REST_Controller_Testcase
 		$request->set_param( 'post', self::$password_id );
 
 		$response = rest_get_server()->dispatch( $request );
-		$this->assertEquals( 200, $response->get_status() );
+		$this->assertSame( 200, $response->get_status() );
 
 		$collection_data = $response->get_data();
 		$this->assertTrue( in_array( $password_comment, wp_list_pluck( $collection_data, 'id' ), true ) );
@@ -237,17 +255,19 @@ class WP_Test_REST_Comments_Controller extends WP_Test_REST_Controller_Testcase
 	 */
 	public function test_get_items_with_password_without_post() {
 		wp_set_current_user( 0 );
-		$args             = array(
+
+		$args = array(
 			'comment_approved' => 1,
 			'comment_post_ID'  => self::$password_id,
 		);
+
 		$password_comment = $this->factory->comment->create( $args );
 
 		$request = new WP_REST_Request( 'GET', '/wp/v2/comments' );
 		$request->set_param( 'password', 'toomanysecrets' );
 
 		$response = rest_get_server()->dispatch( $request );
-		$this->assertEquals( 200, $response->get_status() );
+		$this->assertSame( 200, $response->get_status() );
 
 		$collection_data = $response->get_data();
 		$this->assertFalse( in_array( $password_comment, wp_list_pluck( $collection_data, 'id' ), true ) );
@@ -258,10 +278,12 @@ class WP_Test_REST_Comments_Controller extends WP_Test_REST_Controller_Testcase
 	 */
 	public function test_get_items_with_password_with_multiple_post() {
 		wp_set_current_user( 0 );
-		$args             = array(
+
+		$args = array(
 			'comment_approved' => 1,
 			'comment_post_ID'  => self::$password_id,
 		);
+
 		$password_comment = $this->factory->comment->create( $args );
 
 		$request = new WP_REST_Request( 'GET', '/wp/v2/comments' );
@@ -275,16 +297,17 @@ class WP_Test_REST_Comments_Controller extends WP_Test_REST_Controller_Testcase
 	public function test_get_password_items_without_edit_post_permission() {
 		wp_set_current_user( 0 );
 
-		$args             = array(
+		$args = array(
 			'comment_approved' => 1,
 			'comment_post_ID'  => self::$password_id,
 		);
+
 		$password_comment = $this->factory->comment->create( $args );
 
 		$request = new WP_REST_Request( 'GET', '/wp/v2/comments' );
 
 		$response = rest_get_server()->dispatch( $request );
-		$this->assertEquals( 200, $response->get_status() );
+		$this->assertSame( 200, $response->get_status() );
 
 		$collection_data = $response->get_data();
 		$this->assertFalse( in_array( $password_comment, wp_list_pluck( $collection_data, 'id' ), true ) );
@@ -293,16 +316,17 @@ class WP_Test_REST_Comments_Controller extends WP_Test_REST_Controller_Testcase
 	public function test_get_password_items_with_edit_post_permission() {
 		wp_set_current_user( self::$admin_id );
 
-		$args             = array(
+		$args = array(
 			'comment_approved' => 1,
 			'comment_post_ID'  => self::$password_id,
 		);
+
 		$password_comment = $this->factory->comment->create( $args );
 
 		$request = new WP_REST_Request( 'GET', '/wp/v2/comments' );
 
 		$response = rest_get_server()->dispatch( $request );
-		$this->assertEquals( 200, $response->get_status() );
+		$this->assertSame( 200, $response->get_status() );
 
 		$collection_data = $response->get_data();
 		$this->assertTrue( in_array( $password_comment, wp_list_pluck( $collection_data, 'id' ), true ) );
@@ -311,16 +335,17 @@ class WP_Test_REST_Comments_Controller extends WP_Test_REST_Controller_Testcase
 	public function test_get_items_without_private_post_permission() {
 		wp_set_current_user( 0 );
 
-		$args            = array(
+		$args = array(
 			'comment_approved' => 1,
 			'comment_post_ID'  => self::$private_id,
 		);
+
 		$private_comment = $this->factory->comment->create( $args );
 
 		$request = new WP_REST_Request( 'GET', '/wp/v2/comments' );
 
 		$response = rest_get_server()->dispatch( $request );
-		$this->assertEquals( 200, $response->get_status() );
+		$this->assertSame( 200, $response->get_status() );
 
 		$collection_data = $response->get_data();
 		$this->assertFalse( in_array( $private_comment, wp_list_pluck( $collection_data, 'id' ), true ) );
@@ -329,16 +354,17 @@ class WP_Test_REST_Comments_Controller extends WP_Test_REST_Controller_Testcase
 	public function test_get_items_with_private_post_permission() {
 		wp_set_current_user( self::$admin_id );
 
-		$args            = array(
+		$args = array(
 			'comment_approved' => 1,
 			'comment_post_ID'  => self::$private_id,
 		);
+
 		$private_comment = $this->factory->comment->create( $args );
 
 		$request = new WP_REST_Request( 'GET', '/wp/v2/comments' );
 
 		$response = rest_get_server()->dispatch( $request );
-		$this->assertEquals( 200, $response->get_status() );
+		$this->assertSame( 200, $response->get_status() );
 
 		$collection_data = $response->get_data();
 		$this->assertTrue( in_array( $private_comment, wp_list_pluck( $collection_data, 'id' ), true ) );
@@ -357,7 +383,7 @@ class WP_Test_REST_Comments_Controller extends WP_Test_REST_Controller_Testcase
 		$request = new WP_REST_Request( 'GET', '/wp/v2/comments' );
 
 		$response = rest_get_server()->dispatch( $request );
-		$this->assertEquals( 200, $response->get_status() );
+		$this->assertSame( 200, $response->get_status() );
 
 		$collection_data = $response->get_data();
 		$this->assertFalse( in_array( $comment_id, wp_list_pluck( $collection_data, 'id' ), true ) );
@@ -378,7 +404,7 @@ class WP_Test_REST_Comments_Controller extends WP_Test_REST_Controller_Testcase
 		$request = new WP_REST_Request( 'GET', '/wp/v2/comments' );
 
 		$response = rest_get_server()->dispatch( $request );
-		$this->assertEquals( 200, $response->get_status() );
+		$this->assertSame( 200, $response->get_status() );
 
 		$collection_data = $response->get_data();
 		$this->assertTrue( in_array( $comment_id, wp_list_pluck( $collection_data, 'id' ), true ) );
@@ -388,6 +414,7 @@ class WP_Test_REST_Comments_Controller extends WP_Test_REST_Controller_Testcase
 
 	public function test_get_items_no_permission_for_context() {
 		wp_set_current_user( 0 );
+
 		$request = new WP_REST_Request( 'GET', '/wp/v2/comments' );
 		$request->set_param( 'context', 'edit' );
 		$response = rest_get_server()->dispatch( $request );
@@ -395,18 +422,21 @@ class WP_Test_REST_Comments_Controller extends WP_Test_REST_Controller_Testcase
 	}
 
 	public function test_get_items_no_post() {
-		$this->factory->comment->create_post_comments( 0, 2 );
 		wp_set_current_user( self::$admin_id );
+
+		$this->factory->comment->create_post_comments( 0, 2 );
+
 		$request = new WP_REST_Request( 'GET', '/wp/v2/comments' );
 		$request->set_param( 'post', 0 );
 		$response = rest_get_server()->dispatch( $request );
-		$this->assertEquals( 200, $response->get_status() );
+		$this->assertSame( 200, $response->get_status() );
 		$comments = $response->get_data();
 		$this->assertCount( 2, $comments );
 	}
 
 	public function test_get_items_no_permission_for_no_post() {
 		wp_set_current_user( 0 );
+
 		$request = new WP_REST_Request( 'GET', '/wp/v2/comments' );
 		$request->set_param( 'post', 0 );
 		$response = rest_get_server()->dispatch( $request );
@@ -415,10 +445,11 @@ class WP_Test_REST_Comments_Controller extends WP_Test_REST_Controller_Testcase
 
 	public function test_get_items_edit_context() {
 		wp_set_current_user( self::$admin_id );
+
 		$request = new WP_REST_Request( 'GET', '/wp/v2/comments' );
 		$request->set_param( 'context', 'edit' );
 		$response = rest_get_server()->dispatch( $request );
-		$this->assertEquals( 200, $response->get_status() );
+		$this->assertSame( 200, $response->get_status() );
 	}
 
 	public function test_get_items_for_post() {
@@ -433,7 +464,7 @@ class WP_Test_REST_Comments_Controller extends WP_Test_REST_Controller_Testcase
 		);
 
 		$response = rest_get_server()->dispatch( $request );
-		$this->assertEquals( 200, $response->get_status() );
+		$this->assertSame( 200, $response->get_status() );
 
 		$comments = $response->get_data();
 		$this->assertCount( 2, $comments );
@@ -441,32 +472,38 @@ class WP_Test_REST_Comments_Controller extends WP_Test_REST_Controller_Testcase
 
 	public function test_get_items_include_query() {
 		wp_set_current_user( self::$admin_id );
+
 		$args = array(
 			'comment_approved' => 1,
 			'comment_post_ID'  => self::$post_id,
 		);
-		$id1  = $this->factory->comment->create( $args );
-		$this->factory->comment->create( $args );
-		$id3     = $this->factory->comment->create( $args );
+
+		$id1 = $this->factory->comment->create( $args );
+		$id2 = $this->factory->comment->create( $args );
+
 		$request = new WP_REST_Request( 'GET', '/wp/v2/comments' );
-		// Order=>asc
+
+		// 'order' => 'asc'.
 		$request->set_param( 'order', 'asc' );
-		$request->set_param( 'include', array( $id3, $id1 ) );
+		$request->set_param( 'include', array( $id2, $id1 ) );
 		$response = rest_get_server()->dispatch( $request );
 		$data     = $response->get_data();
-		$this->assertEquals( 2, count( $data ) );
-		$this->assertEquals( $id1, $data[0]['id'] );
-		// Orderby=>include
+		$this->assertSame( 2, count( $data ) );
+		$this->assertSame( $id1, $data[0]['id'] );
+
+		// 'orderby' => 'include'.
 		$request->set_param( 'orderby', 'include' );
 		$response = rest_get_server()->dispatch( $request );
 		$data     = $response->get_data();
-		$this->assertEquals( 2, count( $data ) );
-		$this->assertEquals( $id3, $data[0]['id'] );
-		// Orderby=>invalid should fail.
+		$this->assertSame( 2, count( $data ) );
+		$this->assertSame( $id2, $data[0]['id'] );
+
+		// Invalid 'orderby' should error.
 		$request->set_param( 'orderby', 'invalid' );
 		$response = rest_get_server()->dispatch( $request );
 		$this->assertErrorResponse( 'rest_invalid_param', $response, 400 );
-		// fails on invalid id.
+
+		// Invalid 'include' should error.
 		$request->set_param( 'orderby', array( 'include' ) );
 		$request->set_param( 'include', array( 'invalid' ) );
 		$response = rest_get_server()->dispatch( $request );
@@ -475,24 +512,30 @@ class WP_Test_REST_Comments_Controller extends WP_Test_REST_Controller_Testcase
 
 	public function test_get_items_exclude_query() {
 		wp_set_current_user( self::$admin_id );
-		$args     = array(
+
+		$args = array(
 			'comment_approved' => 1,
 			'comment_post_ID'  => self::$post_id,
 		);
-		$id1      = $this->factory->comment->create( $args );
-		$id2      = $this->factory->comment->create( $args );
+
+		$id1 = $this->factory->comment->create( $args );
+		$id2 = $this->factory->comment->create( $args );
+
 		$request  = new WP_REST_Request( 'GET', '/wp/v2/comments' );
 		$response = rest_get_server()->dispatch( $request );
 		$data     = $response->get_data();
-		$this->assertTrue( in_array( $id1, wp_list_pluck( $data, 'id' ), true ) );
-		$this->assertTrue( in_array( $id2, wp_list_pluck( $data, 'id' ), true ) );
+		$ids      = wp_list_pluck( $data, 'id' );
+		$this->assertTrue( in_array( $id1, $ids, true ) );
+		$this->assertTrue( in_array( $id2, $ids, true ) );
+
 		$request->set_param( 'exclude', array( $id2 ) );
 		$response = rest_get_server()->dispatch( $request );
 		$data     = $response->get_data();
-		$this->assertTrue( in_array( $id1, wp_list_pluck( $data, 'id' ), true ) );
-		$this->assertFalse( in_array( $id2, wp_list_pluck( $data, 'id' ), true ) );
+		$ids      = wp_list_pluck( $data, 'id' );
+		$this->assertTrue( in_array( $id1, $ids, true ) );
+		$this->assertFalse( in_array( $id2, $ids, true ) );
 
-		// fails on invalid id.
+		// Invalid 'exclude' should error.
 		$request->set_param( 'exclude', array( 'invalid' ) );
 		$response = rest_get_server()->dispatch( $request );
 		$this->assertErrorResponse( 'rest_invalid_param', $response, 400 );
@@ -500,26 +543,24 @@ class WP_Test_REST_Comments_Controller extends WP_Test_REST_Controller_Testcase
 
 	public function test_get_items_offset_query() {
 		wp_set_current_user( self::$admin_id );
-		$args = array(
-			'comment_approved' => 1,
-			'comment_post_ID'  => self::$post_id,
-		);
-		$this->factory->comment->create( $args );
-		$this->factory->comment->create( $args );
-		$this->factory->comment->create( $args );
+
 		$request = new WP_REST_Request( 'GET', '/wp/v2/comments' );
+		$request->set_param( 'per_page', self::$per_page );
 		$request->set_param( 'offset', 1 );
 		$response = rest_get_server()->dispatch( $request );
-		$this->assertCount( 3, $response->get_data() );
-		// 'offset' works with 'per_page'
+		$this->assertCount( self::$total_comments - 1, $response->get_data() );
+
+		// 'offset' works with 'per_page'.
 		$request->set_param( 'per_page', 2 );
 		$response = rest_get_server()->dispatch( $request );
 		$this->assertCount( 2, $response->get_data() );
-		// 'offset' takes priority over 'page'
+
+		// 'offset' takes priority over 'page'.
 		$request->set_param( 'page', 3 );
 		$response = rest_get_server()->dispatch( $request );
 		$this->assertCount( 2, $response->get_data() );
-		// 'offset' with invalid value errors.
+
+		// Invalid 'offset' should error.
 		$request->set_param( 'offset', 'moreplease' );
 		$response = rest_get_server()->dispatch( $request );
 		$this->assertErrorResponse( 'rest_invalid_param', $response, 400 );
@@ -527,24 +568,28 @@ class WP_Test_REST_Comments_Controller extends WP_Test_REST_Controller_Testcase
 
 	public function test_get_items_order_query() {
 		wp_set_current_user( self::$admin_id );
+
 		$args = array(
 			'comment_approved' => 1,
 			'comment_post_ID'  => self::$post_id,
 		);
-		$this->factory->comment->create( $args );
-		$this->factory->comment->create( $args );
-		$id3     = $this->factory->comment->create( $args );
+
+		$id = $this->factory->comment->create( $args );
+
 		$request = new WP_REST_Request( 'GET', '/wp/v2/comments' );
-		// order defaults to 'desc'
+
+		// Order defaults to 'desc'.
 		$response = rest_get_server()->dispatch( $request );
 		$data     = $response->get_data();
-		$this->assertEquals( $id3, $data[0]['id'] );
-		// order=>asc
+		$this->assertSame( $id, $data[0]['id'] );
+
+		// 'order' => 'asc'.
 		$request->set_param( 'order', 'asc' );
 		$response = rest_get_server()->dispatch( $request );
 		$data     = $response->get_data();
-		$this->assertEquals( self::$approved_id, $data[0]['id'] );
-		// order=>asc,id should fail
+		$this->assertSame( self::$approved_id, $data[0]['id'] );
+
+		// 'order' => 'asc,id' should error.
 		$request->set_param( 'order', 'asc,id' );
 		$response = rest_get_server()->dispatch( $request );
 		$this->assertErrorResponse( 'rest_invalid_param', $response, 400 );
@@ -552,7 +597,9 @@ class WP_Test_REST_Comments_Controller extends WP_Test_REST_Controller_Testcase
 
 	public function test_get_items_private_post_no_permissions() {
 		wp_set_current_user( 0 );
+
 		$post_id = $this->factory->post->create( array( 'post_status' => 'private' ) );
+
 		$request = new WP_REST_Request( 'GET', '/wp/v2/comments' );
 		$request->set_param( 'post', $post_id );
 		$response = rest_get_server()->dispatch( $request );
@@ -560,37 +607,42 @@ class WP_Test_REST_Comments_Controller extends WP_Test_REST_Controller_Testcase
 	}
 
 	public function test_get_items_author_arg() {
-		// Authorized
+		// Authorized.
 		wp_set_current_user( self::$admin_id );
+
 		$args = array(
 			'comment_approved' => 1,
 			'comment_post_ID'  => self::$post_id,
 			'user_id'          => self::$author_id,
 		);
+
 		$this->factory->comment->create( $args );
 		$args['user_id'] = self::$subscriber_id;
 		$this->factory->comment->create( $args );
 		unset( $args['user_id'] );
 		$this->factory->comment->create( $args );
 
-		// 'author' limits result to 1 of 3
+		// Limit to comment author.
 		$request = new WP_REST_Request( 'GET', '/wp/v2/comments' );
 		$request->set_param( 'author', self::$author_id );
 		$response = rest_get_server()->dispatch( $request );
-		$this->assertEquals( 200, $response->get_status() );
+		$this->assertSame( 200, $response->get_status() );
 		$comments = $response->get_data();
 		$this->assertCount( 1, $comments );
-		// Multiple authors are supported
+
+		// Multiple authors are supported.
 		$request->set_param( 'author', array( self::$author_id, self::$subscriber_id ) );
 		$response = rest_get_server()->dispatch( $request );
-		$this->assertEquals( 200, $response->get_status() );
+		$this->assertSame( 200, $response->get_status() );
 		$comments = $response->get_data();
 		$this->assertCount( 2, $comments );
-		// Invalid author param errors
+
+		// Invalid 'author' should error.
 		$request->set_param( 'author', 'skippy' );
 		$response = rest_get_server()->dispatch( $request );
 		$this->assertErrorResponse( 'rest_invalid_param', $response, 400 );
-		// Unavailable to unauthenticated; defaults to error
+
+		// Unavailable to unauthenticated; defaults to error.
 		wp_set_current_user( 0 );
 		$request->set_param( 'author', array( self::$author_id, self::$subscriber_id ) );
 		$response = rest_get_server()->dispatch( $request );
@@ -598,44 +650,54 @@ class WP_Test_REST_Comments_Controller extends WP_Test_REST_Controller_Testcase
 	}
 
 	public function test_get_items_author_exclude_arg() {
-		// Authorized
+		// Authorized.
 		wp_set_current_user( self::$admin_id );
+
 		$args = array(
 			'comment_approved' => 1,
 			'comment_post_ID'  => self::$post_id,
 			'user_id'          => self::$author_id,
 		);
+
 		$this->factory->comment->create( $args );
 		$args['user_id'] = self::$subscriber_id;
 		$this->factory->comment->create( $args );
 		unset( $args['user_id'] );
 		$this->factory->comment->create( $args );
 
-		$request  = new WP_REST_Request( 'GET', '/wp/v2/comments' );
+		$total_comments = self::$total_comments + 3;
+
+		$request = new WP_REST_Request( 'GET', '/wp/v2/comments' );
+		$request->set_param( 'per_page', self::$per_page );
 		$response = rest_get_server()->dispatch( $request );
 		$comments = $response->get_data();
-		$this->assertCount( 4, $comments );
+		$this->assertCount( $total_comments, $comments );
 
-		// 'author_exclude' limits result to 3 of 4
+		// Exclude comment author.
 		$request = new WP_REST_Request( 'GET', '/wp/v2/comments' );
+		$request->set_param( 'per_page', self::$per_page );
 		$request->set_param( 'author_exclude', self::$author_id );
 		$response = rest_get_server()->dispatch( $request );
-		$this->assertEquals( 200, $response->get_status() );
+		$this->assertSame( 200, $response->get_status() );
 		$comments = $response->get_data();
-		$this->assertCount( 3, $comments );
-		// 'author_exclude' for both comment authors (2 of 4)
+		$this->assertCount( $total_comments - 1, $comments );
+
+		// Exclude both comment authors.
 		$request = new WP_REST_Request( 'GET', '/wp/v2/comments' );
+		$request->set_param( 'per_page', self::$per_page );
 		$request->set_param( 'author_exclude', array( self::$author_id, self::$subscriber_id ) );
 		$response = rest_get_server()->dispatch( $request );
-		$this->assertEquals( 200, $response->get_status() );
+		$this->assertSame( 200, $response->get_status() );
 		$comments = $response->get_data();
-		$this->assertCount( 2, $comments );
-		// 'author_exclude' for both invalid author
+		$this->assertCount( $total_comments - 2, $comments );
+
+		// 'author_exclude' for invalid author.
 		$request = new WP_REST_Request( 'GET', '/wp/v2/comments' );
 		$request->set_param( 'author_exclude', 'skippy' );
 		$response = rest_get_server()->dispatch( $request );
 		$this->assertErrorResponse( 'rest_invalid_param', $response, 400 );
-		// Unavailable to unauthenticated; defaults to error
+
+		// Unavailable to unauthenticated; defaults to error.
 		wp_set_current_user( 0 );
 		$request->set_param( 'author_exclude', array( self::$author_id, self::$subscriber_id ) );
 		$response = rest_get_server()->dispatch( $request );
@@ -653,19 +715,26 @@ class WP_Test_REST_Comments_Controller extends WP_Test_REST_Controller_Testcase
 		$this->factory->comment->create( $args );
 		$args['comment_parent'] = $parent_id2;
 		$this->factory->comment->create( $args );
-		// All comments in the database
-		$request  = new WP_REST_Request( 'GET', '/wp/v2/comments' );
+
+		$total_comments = self::$total_comments + 4;
+
+		// All comments in the database.
+		$request = new WP_REST_Request( 'GET', '/wp/v2/comments' );
+		$request->set_param( 'per_page', self::$per_page );
 		$response = rest_get_server()->dispatch( $request );
-		$this->assertCount( 5, $response->get_data() );
-		// Limit to the parent
+		$this->assertCount( $total_comments, $response->get_data() );
+
+		// Limit to the parent.
 		$request->set_param( 'parent', $parent_id );
 		$response = rest_get_server()->dispatch( $request );
 		$this->assertCount( 1, $response->get_data() );
-		// Limit to two parents
+
+		// Limit to two parents.
 		$request->set_param( 'parent', array( $parent_id, $parent_id2 ) );
 		$response = rest_get_server()->dispatch( $request );
 		$this->assertCount( 2, $response->get_data() );
-		// Invalid parent should error
+
+		// Invalid 'parent' should error.
 		$request->set_param( 'parent', 'invalid' );
 		$response = rest_get_server()->dispatch( $request );
 		$this->assertErrorResponse( 'rest_invalid_param', $response, 400 );
@@ -682,19 +751,26 @@ class WP_Test_REST_Comments_Controller extends WP_Test_REST_Controller_Testcase
 		$this->factory->comment->create( $args );
 		$args['comment_parent'] = $parent_id2;
 		$this->factory->comment->create( $args );
-		// All comments in the database
-		$request  = new WP_REST_Request( 'GET', '/wp/v2/comments' );
+
+		$total_comments = self::$total_comments + 4;
+
+		// All comments in the database.
+		$request = new WP_REST_Request( 'GET', '/wp/v2/comments' );
+		$request->set_param( 'per_page', self::$per_page );
 		$response = rest_get_server()->dispatch( $request );
-		$this->assertCount( 5, $response->get_data() );
-		// Exclude this particular parent
+		$this->assertCount( $total_comments, $response->get_data() );
+
+		// Exclude this particular parent.
 		$request->set_param( 'parent_exclude', $parent_id );
 		$response = rest_get_server()->dispatch( $request );
-		$this->assertCount( 4, $response->get_data() );
-		// Exclude both comment parents
+		$this->assertCount( $total_comments - 1, $response->get_data() );
+
+		// Exclude both comment parents.
 		$request->set_param( 'parent_exclude', array( $parent_id, $parent_id2 ) );
 		$response = rest_get_server()->dispatch( $request );
-		$this->assertCount( 3, $response->get_data() );
-		// Invalid parent id should error
+		$this->assertCount( $total_comments - 2, $response->get_data() );
+
+		// Invalid 'parent_exclude' should error.
 		$request->set_param( 'parent_exclude', 'invalid' );
 		$response = rest_get_server()->dispatch( $request );
 		$this->assertErrorResponse( 'rest_invalid_param', $response, 400 );
@@ -702,45 +778,43 @@ class WP_Test_REST_Comments_Controller extends WP_Test_REST_Controller_Testcase
 
 	public function test_get_items_search_query() {
 		wp_set_current_user( self::$admin_id );
-		$args                    = array(
+
+		$args = array(
 			'comment_approved' => 1,
 			'comment_post_ID'  => self::$post_id,
 			'comment_content'  => 'foo',
 			'comment_author'   => 'Homer J Simpson',
 		);
-		$id1                     = $this->factory->comment->create( $args );
-		$args['comment_content'] = 'bar';
-		$this->factory->comment->create( $args );
-		$args['comment_content'] = 'burrito';
-		$this->factory->comment->create( $args );
-		// 3 comments, plus 1 created in construct
-		$request  = new WP_REST_Request( 'GET', '/wp/v2/comments' );
+
+		$id = $this->factory->comment->create( $args );
+
+		$total_comments = self::$total_comments + 1;
+
+		$request = new WP_REST_Request( 'GET', '/wp/v2/comments' );
+		$request->set_param( 'per_page', self::$per_page );
 		$response = rest_get_server()->dispatch( $request );
-		$this->assertCount( 4, $response->get_data() );
-		// One matching comments
+		$this->assertCount( $total_comments, $response->get_data() );
+
+		// One matching comment.
 		$request->set_param( 'search', 'foo' );
 		$response = rest_get_server()->dispatch( $request );
 		$data     = $response->get_data();
 		$this->assertCount( 1, $data );
-		$this->assertEquals( $id1, $data[0]['id'] );
+		$this->assertSame( $id, $data[0]['id'] );
 	}
 
 	public function test_get_comments_pagination_headers() {
+		$total_comments = self::$total_comments;
+		$total_pages    = (int) ceil( $total_comments / 10 );
+
 		wp_set_current_user( self::$admin_id );
-		// Start of the index
-		for ( $i = 0; $i < 49; $i++ ) {
-			$this->factory->comment->create(
-				array(
-					'comment_content' => "Comment {$i}",
-					'comment_post_ID' => self::$post_id,
-				)
-			);
-		}
+
+		// Start of the index.
 		$request  = new WP_REST_Request( 'GET', '/wp/v2/comments' );
 		$response = rest_get_server()->dispatch( $request );
 		$headers  = $response->get_headers();
-		$this->assertEquals( 50, $headers['X-WP-Total'] );
-		$this->assertEquals( 5, $headers['X-WP-TotalPages'] );
+		$this->assertSame( $total_comments, $headers['X-WP-Total'] );
+		$this->assertSame( $total_pages, $headers['X-WP-TotalPages'] );
 		$next_link = add_query_arg(
 			array(
 				'page' => 2,
@@ -749,19 +823,21 @@ class WP_Test_REST_Comments_Controller extends WP_Test_REST_Controller_Testcase
 		);
 		$this->assertFalse( stripos( $headers['Link'], 'rel="prev"' ) );
 		$this->assertContains( '<' . $next_link . '>; rel="next"', $headers['Link'] );
-		// 3rd page
+
+		// 3rd page.
 		$this->factory->comment->create(
 			array(
-				'comment_content' => 'Comment 51',
 				'comment_post_ID' => self::$post_id,
 			)
 		);
+		$total_comments++;
+		$total_pages++;
 		$request = new WP_REST_Request( 'GET', '/wp/v2/comments' );
 		$request->set_param( 'page', 3 );
 		$response = rest_get_server()->dispatch( $request );
 		$headers  = $response->get_headers();
-		$this->assertEquals( 51, $headers['X-WP-Total'] );
-		$this->assertEquals( 6, $headers['X-WP-TotalPages'] );
+		$this->assertSame( $total_comments, $headers['X-WP-Total'] );
+		$this->assertSame( $total_pages, $headers['X-WP-TotalPages'] );
 		$prev_link = add_query_arg(
 			array(
 				'page' => 2,
@@ -776,31 +852,33 @@ class WP_Test_REST_Comments_Controller extends WP_Test_REST_Controller_Testcase
 			rest_url( '/wp/v2/comments' )
 		);
 		$this->assertContains( '<' . $next_link . '>; rel="next"', $headers['Link'] );
-		// Last page
+
+		// Last page.
 		$request = new WP_REST_Request( 'GET', '/wp/v2/comments' );
-		$request->set_param( 'page', 6 );
+		$request->set_param( 'page', $total_pages );
 		$response = rest_get_server()->dispatch( $request );
 		$headers  = $response->get_headers();
-		$this->assertEquals( 51, $headers['X-WP-Total'] );
-		$this->assertEquals( 6, $headers['X-WP-TotalPages'] );
+		$this->assertSame( $total_comments, $headers['X-WP-Total'] );
+		$this->assertSame( $total_pages, $headers['X-WP-TotalPages'] );
 		$prev_link = add_query_arg(
 			array(
-				'page' => 5,
+				'page' => $total_pages - 1,
 			),
 			rest_url( '/wp/v2/comments' )
 		);
 		$this->assertContains( '<' . $prev_link . '>; rel="prev"', $headers['Link'] );
 		$this->assertFalse( stripos( $headers['Link'], 'rel="next"' ) );
-		// Out of bounds
+
+		// Out of bounds.
 		$request = new WP_REST_Request( 'GET', '/wp/v2/comments' );
-		$request->set_param( 'page', 8 );
+		$request->set_param( 'page', 100 );
 		$response = rest_get_server()->dispatch( $request );
 		$headers  = $response->get_headers();
-		$this->assertEquals( 51, $headers['X-WP-Total'] );
-		$this->assertEquals( 6, $headers['X-WP-TotalPages'] );
+		$this->assertSame( $total_comments, $headers['X-WP-Total'] );
+		$this->assertEquals( $total_pages, $headers['X-WP-TotalPages'] );
 		$prev_link = add_query_arg(
 			array(
-				'page' => 6,
+				'page' => $total_pages,
 			),
 			rest_url( '/wp/v2/comments' )
 		);
@@ -842,14 +920,14 @@ class WP_Test_REST_Comments_Controller extends WP_Test_REST_Controller_Testcase
 		$response = rest_get_server()->dispatch( $request );
 		$data     = $response->get_data();
 		$this->assertCount( 1, $data );
-		$this->assertEquals( $comment2, $data[0]['id'] );
+		$this->assertSame( $comment2, $data[0]['id'] );
 	}
 
 	public function test_get_item() {
 		$request = new WP_REST_Request( 'GET', sprintf( '/wp/v2/comments/%d', self::$approved_id ) );
 
 		$response = rest_get_server()->dispatch( $request );
-		$this->assertEquals( 200, $response->get_status() );
+		$this->assertSame( 200, $response->get_status() );
 
 		$data = $response->get_data();
 		$this->check_comment_data( $data, 'view', $response->get_links() );
@@ -857,6 +935,7 @@ class WP_Test_REST_Comments_Controller extends WP_Test_REST_Controller_Testcase
 
 	public function test_prepare_item() {
 		wp_set_current_user( self::$admin_id );
+
 		$request = new WP_REST_Request( 'GET', sprintf( '/wp/v2/comments/%d', self::$approved_id ) );
 		$request->set_query_params(
 			array(
@@ -865,7 +944,7 @@ class WP_Test_REST_Comments_Controller extends WP_Test_REST_Controller_Testcase
 		);
 
 		$response = rest_get_server()->dispatch( $request );
-		$this->assertEquals( 200, $response->get_status() );
+		$this->assertSame( 200, $response->get_status() );
 
 		$data = $response->get_data();
 		$this->check_comment_data( $data, 'edit', $response->get_links() );
@@ -873,13 +952,14 @@ class WP_Test_REST_Comments_Controller extends WP_Test_REST_Controller_Testcase
 
 	public function test_prepare_item_limit_fields() {
 		wp_set_current_user( self::$admin_id );
+
 		$endpoint = new WP_REST_Comments_Controller;
 		$request  = new WP_REST_Request( 'GET', sprintf( '/wp/v2/comments/%d', self::$approved_id ) );
 		$request->set_param( 'context', 'edit' );
 		$request->set_param( '_fields', 'id,status' );
 		$obj      = get_comment( self::$approved_id );
 		$response = $endpoint->prepare_item_for_response( $obj, $request );
-		$this->assertEquals(
+		$this->assertSame(
 			array(
 				'id',
 				'status',
@@ -899,11 +979,9 @@ class WP_Test_REST_Comments_Controller extends WP_Test_REST_Controller_Testcase
 		$this->assertArrayHasKey( 96, $data['author_avatar_urls'] );
 
 		$comment = get_comment( self::$approved_id );
-		/**
-		 * Ignore the subdomain, since 'get_avatar_url randomly sets the Gravatar
-		 * server when building the url string.
-		 */
-		$this->assertEquals( substr( get_avatar_url( $comment->comment_author_email ), 9 ), substr( $data['author_avatar_urls'][96], 9 ) );
+		// Ignore the subdomain, since get_avatar_url() randomly sets
+		// the Gravatar server when building the URL string.
+		$this->assertSame( substr( get_avatar_url( $comment->comment_author_email ), 9 ), substr( $data['author_avatar_urls'][96], 9 ) );
 	}
 
 	public function test_get_comment_invalid_id() {
@@ -915,6 +993,7 @@ class WP_Test_REST_Comments_Controller extends WP_Test_REST_Controller_Testcase
 
 	public function test_get_comment_invalid_context() {
 		wp_set_current_user( 0 );
+
 		$request = new WP_REST_Request( 'GET', sprintf( '/wp/v2/comments/%s', self::$approved_id ) );
 		$request->set_param( 'context', 'edit' );
 		$response = rest_get_server()->dispatch( $request );
@@ -923,28 +1002,30 @@ class WP_Test_REST_Comments_Controller extends WP_Test_REST_Controller_Testcase
 
 	public function test_get_comment_invalid_post_id() {
 		wp_set_current_user( 0 );
+
 		$comment_id = $this->factory->comment->create(
 			array(
 				'comment_approved' => 1,
 				'comment_post_ID'  => REST_TESTS_IMPOSSIBLY_HIGH_NUMBER,
 			)
 		);
-		$request    = new WP_REST_Request( 'GET', '/wp/v2/comments/' . $comment_id );
 
+		$request  = new WP_REST_Request( 'GET', '/wp/v2/comments/' . $comment_id );
 		$response = rest_get_server()->dispatch( $request );
 		$this->assertErrorResponse( 'rest_post_invalid_id', $response, 404 );
 	}
 
 	public function test_get_comment_invalid_post_id_as_admin() {
 		wp_set_current_user( self::$admin_id );
+
 		$comment_id = $this->factory->comment->create(
 			array(
 				'comment_approved' => 1,
 				'comment_post_ID'  => REST_TESTS_IMPOSSIBLY_HIGH_NUMBER,
 			)
 		);
-		$request    = new WP_REST_Request( 'GET', '/wp/v2/comments/' . $comment_id );
 
+		$request  = new WP_REST_Request( 'GET', '/wp/v2/comments/' . $comment_id );
 		$response = rest_get_server()->dispatch( $request );
 		$this->assertErrorResponse( 'rest_post_invalid_id', $response, 404 );
 	}
@@ -952,8 +1033,7 @@ class WP_Test_REST_Comments_Controller extends WP_Test_REST_Controller_Testcase
 	public function test_get_comment_not_approved() {
 		wp_set_current_user( 0 );
 
-		$request = new WP_REST_Request( 'GET', sprintf( '/wp/v2/comments/%d', self::$hold_id ) );
-
+		$request  = new WP_REST_Request( 'GET', sprintf( '/wp/v2/comments/%d', self::$hold_id ) );
 		$response = rest_get_server()->dispatch( $request );
 		$this->assertErrorResponse( 'rest_cannot_read', $response, 401 );
 	}
@@ -961,10 +1041,9 @@ class WP_Test_REST_Comments_Controller extends WP_Test_REST_Controller_Testcase
 	public function test_get_comment_not_approved_same_user() {
 		wp_set_current_user( self::$admin_id );
 
-		$request = new WP_REST_Request( 'GET', sprintf( '/wp/v2/comments/%d', self::$hold_id ) );
-
+		$request  = new WP_REST_Request( 'GET', sprintf( '/wp/v2/comments/%d', self::$hold_id ) );
 		$response = rest_get_server()->dispatch( $request );
-		$this->assertEquals( 200, $response->get_status() );
+		$this->assertSame( 200, $response->get_status() );
 	}
 
 	public function test_get_comment_with_children_link() {
@@ -987,7 +1066,7 @@ class WP_Test_REST_Comments_Controller extends WP_Test_REST_Controller_Testcase
 
 		$request  = new WP_REST_Request( 'GET', sprintf( '/wp/v2/comments/%s', $comment_id_1 ) );
 		$response = rest_get_server()->dispatch( $request );
-		$this->assertEquals( 200, $response->get_status() );
+		$this->assertSame( 200, $response->get_status() );
 		$this->assertArrayHasKey( 'children', $response->get_links() );
 	}
 
@@ -1002,19 +1081,22 @@ class WP_Test_REST_Comments_Controller extends WP_Test_REST_Controller_Testcase
 
 		$request  = new WP_REST_Request( 'GET', sprintf( '/wp/v2/comments/%s', $comment_id_1 ) );
 		$response = rest_get_server()->dispatch( $request );
-		$this->assertEquals( 200, $response->get_status() );
+		$this->assertSame( 200, $response->get_status() );
 		$this->assertArrayNotHasKey( 'children', $response->get_links() );
 	}
 
 	public function test_get_comment_with_password_without_edit_post_permission() {
 		wp_set_current_user( self::$subscriber_id );
-		$args             = array(
+
+		$args = array(
 			'comment_approved' => 1,
 			'comment_post_ID'  => self::$password_id,
 		);
+
 		$password_comment = $this->factory->comment->create( $args );
-		$request          = new WP_REST_Request( 'GET', sprintf( '/wp/v2/comments/%s', $password_comment ) );
-		$response         = rest_get_server()->dispatch( $request );
+
+		$request  = new WP_REST_Request( 'GET', sprintf( '/wp/v2/comments/%s', $password_comment ) );
+		$response = rest_get_server()->dispatch( $request );
 		$this->assertErrorResponse( 'rest_cannot_read', $response, 403 );
 	}
 
@@ -1024,17 +1106,18 @@ class WP_Test_REST_Comments_Controller extends WP_Test_REST_Controller_Testcase
 	public function test_get_comment_with_password_with_valid_password() {
 		wp_set_current_user( self::$subscriber_id );
 
-		$args             = array(
+		$args = array(
 			'comment_approved' => 1,
 			'comment_post_ID'  => self::$password_id,
 		);
+
 		$password_comment = $this->factory->comment->create( $args );
 
 		$request = new WP_REST_Request( 'GET', sprintf( '/wp/v2/comments/%s', $password_comment ) );
 		$request->set_param( 'password', 'toomanysecrets' );
 
 		$response = rest_get_server()->dispatch( $request );
-		$this->assertEquals( 200, $response->get_status() );
+		$this->assertSame( 200, $response->get_status() );
 	}
 
 	public function test_create_item() {
@@ -1054,13 +1137,13 @@ class WP_Test_REST_Comments_Controller extends WP_Test_REST_Controller_Testcase
 		$request->set_body( wp_json_encode( $params ) );
 
 		$response = rest_get_server()->dispatch( $request );
-		$this->assertEquals( 201, $response->get_status() );
+		$this->assertSame( 201, $response->get_status() );
 
 		$data = $response->get_data();
 		$this->check_comment_data( $data, 'edit', $response->get_links() );
-		$this->assertEquals( 'hold', $data['status'] );
-		$this->assertEquals( '2014-11-07T10:14:25', $data['date'] );
-		$this->assertEquals( self::$post_id, $data['post'] );
+		$this->assertSame( 'hold', $data['status'] );
+		$this->assertSame( '2014-11-07T10:14:25', $data['date'] );
+		$this->assertSame( self::$post_id, $data['post'] );
 	}
 
 	public function comment_dates_provider() {
@@ -1113,6 +1196,7 @@ class WP_Test_REST_Comments_Controller extends WP_Test_REST_Controller_Testcase
 	 */
 	public function test_create_comment_date( $params, $results ) {
 		wp_set_current_user( self::$admin_id );
+
 		update_option( 'timezone_string', $params['timezone_string'] );
 
 		$request = new WP_REST_Request( 'POST', '/wp/v2/comments' );
@@ -1128,17 +1212,17 @@ class WP_Test_REST_Comments_Controller extends WP_Test_REST_Controller_Testcase
 
 		update_option( 'timezone_string', '' );
 
-		$this->assertEquals( 201, $response->get_status() );
+		$this->assertSame( 201, $response->get_status() );
 		$data    = $response->get_data();
 		$comment = get_comment( $data['id'] );
 
-		$this->assertEquals( $results['date'], $data['date'] );
+		$this->assertSame( $results['date'], $data['date'] );
 		$comment_date = str_replace( 'T', ' ', $results['date'] );
-		$this->assertEquals( $comment_date, $comment->comment_date );
+		$this->assertSame( $comment_date, $comment->comment_date );
 
-		$this->assertEquals( $results['date_gmt'], $data['date_gmt'] );
+		$this->assertSame( $results['date_gmt'], $data['date_gmt'] );
 		$comment_date_gmt = str_replace( 'T', ' ', $results['date_gmt'] );
-		$this->assertEquals( $comment_date_gmt, $comment->comment_date_gmt );
+		$this->assertSame( $comment_date_gmt, $comment->comment_date_gmt );
 	}
 
 	public function test_create_item_using_accepted_content_raw_value() {
@@ -1159,11 +1243,11 @@ class WP_Test_REST_Comments_Controller extends WP_Test_REST_Controller_Testcase
 		$request->set_body( wp_json_encode( $params ) );
 
 		$response = rest_get_server()->dispatch( $request );
-		$this->assertEquals( 201, $response->get_status() );
+		$this->assertSame( 201, $response->get_status() );
 
 		$data        = $response->get_data();
 		$new_comment = get_comment( $data['id'] );
-		$this->assertEquals( $params['content']['raw'], $new_comment->comment_content );
+		$this->assertSame( $params['content']['raw'], $new_comment->comment_content );
 	}
 
 	public function test_create_item_error_from_filter() {
@@ -1233,6 +1317,7 @@ class WP_Test_REST_Comments_Controller extends WP_Test_REST_Controller_Testcase
 
 	public function test_create_comment_missing_required_author_email() {
 		wp_set_current_user( self::$admin_id );
+
 		update_option( 'require_name_email', 1 );
 
 		$params = array(
@@ -1251,6 +1336,7 @@ class WP_Test_REST_Comments_Controller extends WP_Test_REST_Controller_Testcase
 
 	public function test_create_comment_empty_required_author_email() {
 		wp_set_current_user( self::$admin_id );
+
 		update_option( 'require_name_email', 1 );
 
 		$params = array(
@@ -1342,7 +1428,8 @@ class WP_Test_REST_Comments_Controller extends WP_Test_REST_Controller_Testcase
 		);
 
 		wp_set_current_user( self::$admin_id );
-		$params  = array(
+
+		$params = array(
 			'post'         => self::$post_id,
 			'author_name'  => 'Comic Book Guy',
 			'author_email' => 'cbg@androidsdungeon.com',
@@ -1351,19 +1438,21 @@ class WP_Test_REST_Comments_Controller extends WP_Test_REST_Controller_Testcase
 			'content'      => 'Worst Comment Ever!',
 			'date'         => '2014-11-07T10:14:25',
 		);
+
 		$request = new WP_REST_Request( 'POST', '/wp/v2/comments' );
 		$request->add_header( 'content-type', 'application/json' );
 		$request->set_body( wp_json_encode( $params ) );
 		$response = rest_get_server()->dispatch( $request );
-		$this->assertEquals( 201, $response->get_status() );
+		$this->assertSame( 201, $response->get_status() );
 
 		$data = $response->get_data();
-		$this->assertEquals( $subscriber_id, $data['author'] );
-		$this->assertEquals( '127.0.0.1', $data['author_ip'] );
+		$this->assertSame( $subscriber_id, $data['author'] );
+		$this->assertSame( '127.0.0.1', $data['author_ip'] );
 	}
 
 	public function test_create_comment_without_type() {
 		$post_id = $this->factory->post->create();
+
 		wp_set_current_user( self::$admin_id );
 
 		$params = array(
@@ -1381,10 +1470,10 @@ class WP_Test_REST_Comments_Controller extends WP_Test_REST_Controller_Testcase
 		$request->set_body( wp_json_encode( $params ) );
 
 		$response = rest_get_server()->dispatch( $request );
-		$this->assertEquals( 201, $response->get_status() );
+		$this->assertSame( 201, $response->get_status() );
 
 		$data = $response->get_data();
-		$this->assertEquals( 'comment', $data['type'] );
+		$this->assertSame( 'comment', $data['type'] );
 
 		$comment_id = $data['id'];
 
@@ -1393,7 +1482,7 @@ class WP_Test_REST_Comments_Controller extends WP_Test_REST_Controller_Testcase
 		$collection->set_param( 'post', $post_id );
 		$collection_response = rest_get_server()->dispatch( $collection );
 		$collection_data     = $collection_response->get_data();
-		$this->assertEquals( $comment_id, $collection_data[0]['id'] );
+		$this->assertSame( $comment_id, $collection_data[0]['id'] );
 	}
 
 	/**
@@ -1401,6 +1490,7 @@ class WP_Test_REST_Comments_Controller extends WP_Test_REST_Controller_Testcase
 	 */
 	public function test_create_comment_with_invalid_type() {
 		$post_id = $this->factory->post->create();
+
 		wp_set_current_user( self::$admin_id );
 
 		$params = array(
@@ -1424,6 +1514,7 @@ class WP_Test_REST_Comments_Controller extends WP_Test_REST_Controller_Testcase
 
 	public function test_create_comment_invalid_email() {
 		$post_id = $this->factory->post->create();
+
 		wp_set_current_user( self::$admin_id );
 
 		$params = array(
@@ -1468,16 +1559,16 @@ class WP_Test_REST_Comments_Controller extends WP_Test_REST_Controller_Testcase
 		$request->set_body( wp_json_encode( $params ) );
 		$response = rest_get_server()->dispatch( $request );
 
-		$this->assertEquals( 201, $response->get_status() );
+		$this->assertSame( 201, $response->get_status() );
 		$data = $response->get_data();
-		$this->assertEquals( $user_id, $data['author'] );
+		$this->assertSame( $user_id, $data['author'] );
 
-		// Check author data matches
+		// Check author data matches.
 		$author  = get_user_by( 'id', $user_id );
 		$comment = get_comment( $data['id'] );
-		$this->assertEquals( $author->display_name, $comment->comment_author );
-		$this->assertEquals( $author->user_email, $comment->comment_author_email );
-		$this->assertEquals( $author->user_url, $comment->comment_author_url );
+		$this->assertSame( $author->display_name, $comment->comment_author );
+		$this->assertSame( $author->user_email, $comment->comment_author_email );
+		$this->assertSame( $author->user_url, $comment->comment_author_url );
 	}
 
 	public function test_create_comment_other_user() {
@@ -1497,12 +1588,12 @@ class WP_Test_REST_Comments_Controller extends WP_Test_REST_Controller_Testcase
 		$request->set_body( wp_json_encode( $params ) );
 		$response = rest_get_server()->dispatch( $request );
 
-		$this->assertEquals( 201, $response->get_status() );
+		$this->assertSame( 201, $response->get_status() );
 		$data = $response->get_data();
-		$this->assertEquals( self::$subscriber_id, $data['author'] );
-		$this->assertEquals( 'Homer Jay Simpson', $data['author_name'] );
-		$this->assertEquals( 'chunkylover53@aol.com', $data['author_email'] );
-		$this->assertEquals( 'http://compuglobalhypermeganet.com', $data['author_url'] );
+		$this->assertSame( self::$subscriber_id, $data['author'] );
+		$this->assertSame( 'Homer Jay Simpson', $data['author_name'] );
+		$this->assertSame( 'chunkylover53@aol.com', $data['author_email'] );
+		$this->assertSame( 'http://compuglobalhypermeganet.com', $data['author_url'] );
 	}
 
 	public function test_create_comment_other_user_without_permission() {
@@ -1568,6 +1659,7 @@ class WP_Test_REST_Comments_Controller extends WP_Test_REST_Controller_Testcase
 
 	public function test_create_comment_with_status_IP_and_user_agent() {
 		$post_id = $this->factory->post->create();
+
 		wp_set_current_user( self::$admin_id );
 
 		$params = array(
@@ -1586,12 +1678,12 @@ class WP_Test_REST_Comments_Controller extends WP_Test_REST_Controller_Testcase
 		$request->set_body( wp_json_encode( $params ) );
 
 		$response = rest_get_server()->dispatch( $request );
-		$this->assertEquals( 201, $response->get_status() );
+		$this->assertSame( 201, $response->get_status() );
 
 		$data = $response->get_data();
-		$this->assertEquals( 'approved', $data['status'] );
-		$this->assertEquals( '139.130.4.5', $data['author_ip'] );
-		$this->assertEquals( 'Mozilla/5.0 (Windows NT 6.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/41.0.2228.0 Safari/537.36', $data['author_user_agent'] );
+		$this->assertSame( 'approved', $data['status'] );
+		$this->assertSame( '139.130.4.5', $data['author_ip'] );
+		$this->assertSame( 'Mozilla/5.0 (Windows NT 6.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/41.0.2228.0 Safari/537.36', $data['author_user_agent'] );
 	}
 
 	public function test_create_comment_user_agent_header() {
@@ -1611,12 +1703,12 @@ class WP_Test_REST_Comments_Controller extends WP_Test_REST_Controller_Testcase
 		$request->set_body( wp_json_encode( $params ) );
 
 		$response = rest_get_server()->dispatch( $request );
-		$this->assertEquals( 201, $response->get_status() );
+		$this->assertSame( 201, $response->get_status() );
 
 		$data = $response->get_data();
 
 		$new_comment = get_comment( $data['id'] );
-		$this->assertEquals( 'Mozilla/4.0 (compatible; MSIE 5.5; AOL 4.0; Windows 95)', $new_comment->comment_agent );
+		$this->assertSame( 'Mozilla/4.0 (compatible; MSIE 5.5; AOL 4.0; Windows 95)', $new_comment->comment_agent );
 	}
 
 	public function test_create_comment_author_ip() {
@@ -1637,7 +1729,7 @@ class WP_Test_REST_Comments_Controller extends WP_Test_REST_Controller_Testcase
 		$response    = rest_get_server()->dispatch( $request );
 		$data        = $response->get_data();
 		$new_comment = get_comment( $data['id'] );
-		$this->assertEquals( '127.0.0.3', $new_comment->comment_author_IP );
+		$this->assertSame( '127.0.0.3', $new_comment->comment_author_IP );
 	}
 
 	public function test_create_comment_invalid_author_IP() {
@@ -1662,7 +1754,8 @@ class WP_Test_REST_Comments_Controller extends WP_Test_REST_Controller_Testcase
 
 	public function test_create_comment_author_ip_no_permission() {
 		wp_set_current_user( self::$subscriber_id );
-		$params  = array(
+
+		$params = array(
 			'author_name'  => 'Comic Book Guy',
 			'author_email' => 'cbg@androidsdungeon.com',
 			'author_url'   => 'http://androidsdungeon.com',
@@ -1670,6 +1763,7 @@ class WP_Test_REST_Comments_Controller extends WP_Test_REST_Controller_Testcase
 			'content'      => 'Worst Comment Ever!',
 			'status'       => 'approved',
 		);
+
 		$request = new WP_REST_Request( 'POST', '/wp/v2/comments' );
 		$request->add_header( 'content-type', 'application/json' );
 		$request->set_body( wp_json_encode( $params ) );
@@ -1679,33 +1773,37 @@ class WP_Test_REST_Comments_Controller extends WP_Test_REST_Controller_Testcase
 
 	public function test_create_comment_author_ip_defaults_to_remote_addr() {
 		wp_set_current_user( self::$admin_id );
+
 		$_SERVER['REMOTE_ADDR'] = '127.0.0.2';
-		$params                 = array(
+
+		$params = array(
 			'post'         => self::$post_id,
 			'author_name'  => 'Comic Book Guy',
 			'author_email' => 'cbg@androidsdungeon.com',
 			'author_url'   => 'http://androidsdungeon.com',
 			'content'      => 'Worst Comment Ever!',
 		);
-		$request                = new WP_REST_Request( 'POST', '/wp/v2/comments' );
+
+		$request = new WP_REST_Request( 'POST', '/wp/v2/comments' );
 		$request->add_header( 'content-type', 'application/json' );
 		$request->set_body( wp_json_encode( $params ) );
 		$response    = rest_get_server()->dispatch( $request );
 		$data        = $response->get_data();
 		$new_comment = get_comment( $data['id'] );
-		$this->assertEquals( '127.0.0.2', $new_comment->comment_author_IP );
+		$this->assertSame( '127.0.0.2', $new_comment->comment_author_IP );
 	}
 
 	public function test_create_comment_no_post_id() {
 		wp_set_current_user( self::$admin_id );
 
-		$params  = array(
+		$params = array(
 			'author_name'  => 'Comic Book Guy',
 			'author_email' => 'cbg@androidsdungeon.com',
 			'author_url'   => 'http://androidsdungeon.com',
 			'content'      => 'Worst Comment Ever!',
 			'status'       => 'approved',
 		);
+
 		$request = new WP_REST_Request( 'POST', '/wp/v2/comments' );
 		$request->add_header( 'content-type', 'application/json' );
 		$request->set_body( wp_json_encode( $params ) );
@@ -1718,13 +1816,14 @@ class WP_Test_REST_Comments_Controller extends WP_Test_REST_Controller_Testcase
 	public function test_create_comment_no_post_id_no_permission() {
 		wp_set_current_user( self::$subscriber_id );
 
-		$params  = array(
+		$params = array(
 			'author_name'  => 'Homer Jay Simpson',
 			'author_email' => 'chunkylover53@aol.com',
 			'author_url'   => 'http://compuglobalhypermeganet.com',
 			'content'      => 'Here\‚Äôs to alcohol: the cause of, and solution to, all of life\‚Äôs problems.',
 			'author'       => self::$subscriber_id,
 		);
+
 		$request = new WP_REST_Request( 'POST', '/wp/v2/comments' );
 		$request->add_header( 'content-type', 'application/json' );
 		$request->set_body( wp_json_encode( $params ) );
@@ -1756,7 +1855,7 @@ class WP_Test_REST_Comments_Controller extends WP_Test_REST_Controller_Testcase
 	public function test_create_comment_draft_post() {
 		wp_set_current_user( self::$subscriber_id );
 
-		$params  = array(
+		$params = array(
 			'post'         => self::$draft_id,
 			'author_name'  => 'Ishmael',
 			'author_email' => 'herman-melville@earthlink.net',
@@ -1764,19 +1863,19 @@ class WP_Test_REST_Comments_Controller extends WP_Test_REST_Controller_Testcase
 			'content'      => 'Call me Ishmael.',
 			'author'       => self::$subscriber_id,
 		);
+
 		$request = new WP_REST_Request( 'POST', '/wp/v2/comments' );
 		$request->add_header( 'content-type', 'application/json' );
 		$request->set_body( wp_json_encode( $params ) );
 
 		$response = rest_get_server()->dispatch( $request );
-
 		$this->assertErrorResponse( 'rest_comment_draft_post', $response, 403 );
 	}
 
 	public function test_create_comment_trash_post() {
 		wp_set_current_user( self::$subscriber_id );
 
-		$params  = array(
+		$params = array(
 			'post'         => self::$trash_id,
 			'author_name'  => 'Ishmael',
 			'author_email' => 'herman-melville@earthlink.net',
@@ -1784,6 +1883,7 @@ class WP_Test_REST_Comments_Controller extends WP_Test_REST_Controller_Testcase
 			'content'      => 'Call me Ishmael.',
 			'author'       => self::$subscriber_id,
 		);
+
 		$request = new WP_REST_Request( 'POST', '/wp/v2/comments' );
 		$request->add_header( 'content-type', 'application/json' );
 		$request->set_body( wp_json_encode( $params ) );
@@ -1796,7 +1896,7 @@ class WP_Test_REST_Comments_Controller extends WP_Test_REST_Controller_Testcase
 	public function test_create_comment_private_post_invalid_permission() {
 		wp_set_current_user( self::$subscriber_id );
 
-		$params  = array(
+		$params = array(
 			'post'         => self::$private_id,
 			'author_name'  => 'Homer Jay Simpson',
 			'author_email' => 'chunkylover53@aol.com',
@@ -1804,19 +1904,19 @@ class WP_Test_REST_Comments_Controller extends WP_Test_REST_Controller_Testcase
 			'content'      => 'I\‚Äôd be a vegetarian if bacon grew on trees.',
 			'author'       => self::$subscriber_id,
 		);
+
 		$request = new WP_REST_Request( 'POST', '/wp/v2/comments' );
 		$request->add_header( 'content-type', 'application/json' );
 		$request->set_body( wp_json_encode( $params ) );
 
 		$response = rest_get_server()->dispatch( $request );
-
 		$this->assertErrorResponse( 'rest_cannot_read_post', $response, 403 );
 	}
 
 	public function test_create_comment_password_post_invalid_permission() {
 		wp_set_current_user( self::$subscriber_id );
 
-		$params  = array(
+		$params = array(
 			'post'         => self::$password_id,
 			'author_name'  => 'Homer Jay Simpson',
 			'author_email' => 'chunkylover53@aol.com',
@@ -1824,6 +1924,7 @@ class WP_Test_REST_Comments_Controller extends WP_Test_REST_Controller_Testcase
 			'content'      => 'I\‚Äôd be a vegetarian if bacon grew on trees.',
 			'author'       => self::$subscriber_id,
 		);
+
 		$request = new WP_REST_Request( 'POST', '/wp/v2/comments' );
 		$request->add_header( 'content-type', 'application/json' );
 		$request->set_body( wp_json_encode( $params ) );
@@ -1834,6 +1935,7 @@ class WP_Test_REST_Comments_Controller extends WP_Test_REST_Controller_Testcase
 
 	public function test_create_item_duplicate() {
 		wp_set_current_user( self::$subscriber_id );
+
 		$this->factory->comment->create(
 			array(
 				'comment_post_ID'      => self::$post_id,
@@ -1855,7 +1957,7 @@ class WP_Test_REST_Comments_Controller extends WP_Test_REST_Controller_Testcase
 		$request->set_body( wp_json_encode( $params ) );
 		$response = rest_get_server()->dispatch( $request );
 
-		$this->assertEquals( 409, $response->get_status() );
+		$this->assertSame( 409, $response->get_status() );
 	}
 
 	public function test_create_comment_closed() {
@@ -1864,6 +1966,7 @@ class WP_Test_REST_Comments_Controller extends WP_Test_REST_Controller_Testcase
 				'comment_status' => 'closed',
 			)
 		);
+
 		wp_set_current_user( self::$subscriber_id );
 
 		$params = array(
@@ -1875,19 +1978,21 @@ class WP_Test_REST_Comments_Controller extends WP_Test_REST_Controller_Testcase
 		$request->set_body( wp_json_encode( $params ) );
 		$response = rest_get_server()->dispatch( $request );
 
-		$this->assertEquals( 403, $response->get_status() );
+		$this->assertSame( 403, $response->get_status() );
 	}
 
 	public function test_create_comment_require_login() {
 		wp_set_current_user( 0 );
+
 		update_option( 'comment_registration', 1 );
 		add_filter( 'rest_allow_anonymous_comments', '__return_true' );
+
 		$request = new WP_REST_Request( 'POST', '/wp/v2/comments' );
 		$request->set_param( 'post', self::$post_id );
 		$response = rest_get_server()->dispatch( $request );
-		$this->assertEquals( 401, $response->get_status() );
+		$this->assertSame( 401, $response->get_status() );
 		$data = $response->get_data();
-		$this->assertEquals( 'rest_comment_login_required', $data['code'] );
+		$this->assertSame( 'rest_comment_login_required', $data['code'] );
 	}
 
 	public function test_create_item_invalid_author() {
@@ -1946,7 +2051,7 @@ class WP_Test_REST_Comments_Controller extends WP_Test_REST_Controller_Testcase
 		$request->set_body( wp_json_encode( $params ) );
 
 		$response = rest_get_server()->dispatch( $request );
-		$this->assertEquals( 201, $response->get_status() );
+		$this->assertSame( 201, $response->get_status() );
 
 		$params = array(
 			'post'         => self::$post_id,
@@ -1961,12 +2066,12 @@ class WP_Test_REST_Comments_Controller extends WP_Test_REST_Controller_Testcase
 		$request->set_body( wp_json_encode( $params ) );
 
 		$response = rest_get_server()->dispatch( $request );
-		$this->assertEquals( 400, $response->get_status() );
+		$this->assertSame( 400, $response->get_status() );
 	}
 
 	public function anonymous_comments_callback_null() {
-		// I'm a plugin developer who forgot to include a return value for some
-		// code path in my 'rest_allow_anonymous_comments' filter.
+		// I'm a plugin developer who forgot to include a return value
+		// for some code path in my 'rest_allow_anonymous_comments' filter.
 	}
 
 	public function test_allow_anonymous_comments_null() {
@@ -1997,7 +2102,7 @@ class WP_Test_REST_Comments_Controller extends WP_Test_REST_Controller_Testcase
 	public function test_create_comment_author_name_too_long() {
 		wp_set_current_user( self::$subscriber_id );
 
-		$params  = array(
+		$params = array(
 			'post'         => self::$post_id,
 			'author_name'  => rand_long_str( 246 ),
 			'author_email' => 'murphy@gingivitis.com',
@@ -2005,6 +2110,7 @@ class WP_Test_REST_Comments_Controller extends WP_Test_REST_Controller_Testcase
 			'content'      => 'This isn\'t a saxophone. It\'s an umbrella.',
 			'date'         => '1995-04-30T10:22:00',
 		);
+
 		$request = new WP_REST_Request( 'POST', '/wp/v2/comments' );
 
 		$request->add_header( 'content-type', 'application/json' );
@@ -2020,7 +2126,7 @@ class WP_Test_REST_Comments_Controller extends WP_Test_REST_Controller_Testcase
 	public function test_create_comment_author_email_too_long() {
 		wp_set_current_user( self::$subscriber_id );
 
-		$params  = array(
+		$params = array(
 			'post'         => self::$post_id,
 			'author_name'  => 'Bleeding Gums Murphy',
 			'author_email' => 'murphy@' . rand_long_str( 190 ) . '.com',
@@ -2028,6 +2134,7 @@ class WP_Test_REST_Comments_Controller extends WP_Test_REST_Controller_Testcase
 			'content'      => 'This isn\'t a saxophone. It\'s an umbrella.',
 			'date'         => '1995-04-30T10:22:00',
 		);
+
 		$request = new WP_REST_Request( 'POST', '/wp/v2/comments' );
 
 		$request->add_header( 'content-type', 'application/json' );
@@ -2043,7 +2150,7 @@ class WP_Test_REST_Comments_Controller extends WP_Test_REST_Controller_Testcase
 	public function test_create_comment_author_url_too_long() {
 		wp_set_current_user( self::$subscriber_id );
 
-		$params  = array(
+		$params = array(
 			'post'         => self::$post_id,
 			'author_name'  => 'Bleeding Gums Murphy',
 			'author_email' => 'murphy@gingivitis.com',
@@ -2051,6 +2158,7 @@ class WP_Test_REST_Comments_Controller extends WP_Test_REST_Controller_Testcase
 			'content'      => 'This isn\'t a saxophone. It\'s an umbrella.',
 			'date'         => '1995-04-30T10:22:00',
 		);
+
 		$request = new WP_REST_Request( 'POST', '/wp/v2/comments' );
 
 		$request->add_header( 'content-type', 'application/json' );
@@ -2066,7 +2174,7 @@ class WP_Test_REST_Comments_Controller extends WP_Test_REST_Controller_Testcase
 	public function test_create_comment_content_too_long() {
 		wp_set_current_user( self::$subscriber_id );
 
-		$params  = array(
+		$params = array(
 			'post'         => self::$post_id,
 			'author_name'  => 'Bleeding Gums Murphy',
 			'author_email' => 'murphy@gingivitis.com',
@@ -2074,6 +2182,7 @@ class WP_Test_REST_Comments_Controller extends WP_Test_REST_Controller_Testcase
 			'content'      => rand_long_str( 66525 ),
 			'date'         => '1995-04-30T10:22:00',
 		);
+
 		$request = new WP_REST_Request( 'POST', '/wp/v2/comments' );
 
 		$request->add_header( 'content-type', 'application/json' );
@@ -2086,13 +2195,14 @@ class WP_Test_REST_Comments_Controller extends WP_Test_REST_Controller_Testcase
 	public function test_create_comment_without_password() {
 		wp_set_current_user( self::$subscriber_id );
 
-		$params  = array(
+		$params = array(
 			'post'         => self::$password_id,
 			'author_name'  => 'Bleeding Gums Murphy',
 			'author_email' => 'murphy@gingivitis.com',
 			'author_url'   => 'http://jazz.gingivitis.com',
 			'content'      => 'This isn\'t a saxophone. It\'s an umbrella.',
 		);
+
 		$request = new WP_REST_Request( 'POST', '/wp/v2/comments' );
 
 		$request->add_header( 'content-type', 'application/json' );
@@ -2105,7 +2215,7 @@ class WP_Test_REST_Comments_Controller extends WP_Test_REST_Controller_Testcase
 	public function test_create_comment_with_password() {
 		add_filter( 'rest_allow_anonymous_comments', '__return_true' );
 
-		$params  = array(
+		$params = array(
 			'post'         => self::$password_id,
 			'author_name'  => 'Bleeding Gums Murphy',
 			'author_email' => 'murphy@gingivitis.com',
@@ -2113,12 +2223,13 @@ class WP_Test_REST_Comments_Controller extends WP_Test_REST_Controller_Testcase
 			'content'      => 'This isn\'t a saxophone. It\'s an umbrella.',
 			'password'     => 'toomanysecrets',
 		);
+
 		$request = new WP_REST_Request( 'POST', '/wp/v2/comments' );
 
 		$request->add_header( 'content-type', 'application/json' );
 		$request->set_body( wp_json_encode( $params ) );
 		$response = rest_get_server()->dispatch( $request );
-		$this->assertEquals( 201, $response->get_status() );
+		$this->assertSame( 201, $response->get_status() );
 	}
 
 	public function test_update_item() {
@@ -2126,7 +2237,7 @@ class WP_Test_REST_Comments_Controller extends WP_Test_REST_Controller_Testcase
 
 		wp_set_current_user( self::$admin_id );
 
-		$params  = array(
+		$params = array(
 			'author'       => self::$subscriber_id,
 			'author_name'  => 'Disco Stu',
 			'author_url'   => 'http://stusdisco.com',
@@ -2136,25 +2247,26 @@ class WP_Test_REST_Comments_Controller extends WP_Test_REST_Controller_Testcase
 			'date'         => '2014-11-07T10:14:25',
 			'post'         => $post_id,
 		);
+
 		$request = new WP_REST_Request( 'PUT', sprintf( '/wp/v2/comments/%d', self::$approved_id ) );
 		$request->add_header( 'content-type', 'application/json' );
 		$request->set_body( wp_json_encode( $params ) );
 
 		$response = rest_get_server()->dispatch( $request );
-		$this->assertEquals( 200, $response->get_status() );
+		$this->assertSame( 200, $response->get_status() );
 
 		$comment = $response->get_data();
 		$updated = get_comment( self::$approved_id );
-		$this->assertEquals( $params['content'], $comment['content']['raw'] );
-		$this->assertEquals( $params['author'], $comment['author'] );
-		$this->assertEquals( $params['author_name'], $comment['author_name'] );
-		$this->assertEquals( $params['author_url'], $comment['author_url'] );
-		$this->assertEquals( $params['author_email'], $comment['author_email'] );
-		$this->assertEquals( $params['author_ip'], $comment['author_ip'] );
-		$this->assertEquals( $params['post'], $comment['post'] );
+		$this->assertSame( $params['content'], $comment['content']['raw'] );
+		$this->assertSame( $params['author'], $comment['author'] );
+		$this->assertSame( $params['author_name'], $comment['author_name'] );
+		$this->assertSame( $params['author_url'], $comment['author_url'] );
+		$this->assertSame( $params['author_email'], $comment['author_email'] );
+		$this->assertSame( $params['author_ip'], $comment['author_ip'] );
+		$this->assertSame( $params['post'], $comment['post'] );
 
-		$this->assertEquals( mysql_to_rfc3339( $updated->comment_date ), $comment['date'] );
-		$this->assertEquals( '2014-11-07T10:14:25', $comment['date'] );
+		$this->assertSame( mysql_to_rfc3339( $updated->comment_date ), $comment['date'] );
+		$this->assertSame( '2014-11-07T10:14:25', $comment['date'] );
 	}
 
 	/**
@@ -2162,6 +2274,7 @@ class WP_Test_REST_Comments_Controller extends WP_Test_REST_Controller_Testcase
 	 */
 	public function test_update_comment_date( $params, $results ) {
 		wp_set_current_user( self::$editor_id );
+
 		update_option( 'timezone_string', $params['timezone_string'] );
 
 		$comment_id = $this->factory->comment->create();
@@ -2177,17 +2290,17 @@ class WP_Test_REST_Comments_Controller extends WP_Test_REST_Controller_Testcase
 
 		update_option( 'timezone_string', '' );
 
-		$this->assertEquals( 200, $response->get_status() );
+		$this->assertSame( 200, $response->get_status() );
 		$data    = $response->get_data();
 		$comment = get_comment( $data['id'] );
 
-		$this->assertEquals( $results['date'], $data['date'] );
+		$this->assertSame( $results['date'], $data['date'] );
 		$comment_date = str_replace( 'T', ' ', $results['date'] );
-		$this->assertEquals( $comment_date, $comment->comment_date );
+		$this->assertSame( $comment_date, $comment->comment_date );
 
-		$this->assertEquals( $results['date_gmt'], $data['date_gmt'] );
+		$this->assertSame( $results['date_gmt'], $data['date_gmt'] );
 		$comment_date_gmt = str_replace( 'T', ' ', $results['date_gmt'] );
-		$this->assertEquals( $comment_date_gmt, $comment->comment_date_gmt );
+		$this->assertSame( $comment_date_gmt, $comment->comment_date_gmt );
 	}
 
 	public function test_update_item_no_content() {
@@ -2200,7 +2313,7 @@ class WP_Test_REST_Comments_Controller extends WP_Test_REST_Controller_Testcase
 
 		// Sending a request without content is fine.
 		$response = rest_get_server()->dispatch( $request );
-		$this->assertEquals( 200, $response->get_status() );
+		$this->assertSame( 200, $response->get_status() );
 
 		// Sending a request with empty comment is not fine.
 		$request->set_param( 'author_email', 'yetanother@email.com' );
@@ -2213,16 +2326,17 @@ class WP_Test_REST_Comments_Controller extends WP_Test_REST_Controller_Testcase
 		$comment = get_comment( self::$approved_id );
 
 		wp_set_current_user( self::$admin_id );
+
 		$request = new WP_REST_Request( 'PUT', sprintf( '/wp/v2/comments/%d', self::$approved_id ) );
 		$request->set_param( 'post', $comment->comment_post_ID );
 
-		// Run twice to make sure that the update still succeeds even if no DB
-		// rows are updated.
+		// Run twice to make sure that the update still succeeds
+		// even if no DB rows are updated.
 		$response = rest_get_server()->dispatch( $request );
-		$this->assertEquals( 200, $response->get_status() );
+		$this->assertSame( 200, $response->get_status() );
 
 		$response = rest_get_server()->dispatch( $request );
-		$this->assertEquals( 200, $response->get_status() );
+		$this->assertSame( 200, $response->get_status() );
 	}
 
 	public function test_update_comment_status() {
@@ -2235,19 +2349,20 @@ class WP_Test_REST_Comments_Controller extends WP_Test_REST_Controller_Testcase
 			)
 		);
 
-		$params  = array(
+		$params = array(
 			'status' => 'approve',
 		);
+
 		$request = new WP_REST_Request( 'PUT', sprintf( '/wp/v2/comments/%d', $comment_id ) );
 		$request->add_header( 'content-type', 'application/json' );
 		$request->set_body( wp_json_encode( $params ) );
 
 		$response = rest_get_server()->dispatch( $request );
-		$this->assertEquals( 200, $response->get_status() );
+		$this->assertSame( 200, $response->get_status() );
 
 		$comment = $response->get_data();
 		$updated = get_comment( $comment_id );
-		$this->assertEquals( 'approved', $comment['status'] );
+		$this->assertSame( 'approved', $comment['status'] );
 		$this->assertEquals( 1, $updated->comment_approved );
 	}
 
@@ -2262,45 +2377,48 @@ class WP_Test_REST_Comments_Controller extends WP_Test_REST_Controller_Testcase
 			)
 		);
 
-		$params  = array(
+		$params = array(
 			'status' => 'approve',
 		);
+
 		$request = new WP_REST_Request( 'PUT', sprintf( '/wp/v2/comments/%d', $comment_id ) );
 		$request->add_header( 'content-type', 'application/json' );
 		$request->set_body( wp_json_encode( $params ) );
 
 		$response = rest_get_server()->dispatch( $request );
-		$this->assertEquals( 200, $response->get_status() );
+		$this->assertSame( 200, $response->get_status() );
 
 		$comment = $response->get_data();
 		$updated = get_comment( $comment_id );
-		$this->assertEquals( 'approved', $comment['status'] );
+		$this->assertSame( 'approved', $comment['status'] );
 		$this->assertEquals( 1, $updated->comment_approved );
-		$this->assertEquals( 'some content', $updated->comment_content );
+		$this->assertSame( 'some content', $updated->comment_content );
 	}
 
 	public function test_update_comment_date_gmt() {
 		wp_set_current_user( self::$admin_id );
 
-		$params  = array(
+		$params = array(
 			'date_gmt' => '2015-05-07T10:14:25',
 			'content'  => 'I\'ll be deep in the cold, cold ground before I recognize Missouri.',
 		);
+
 		$request = new WP_REST_Request( 'PUT', sprintf( '/wp/v2/comments/%d', self::$approved_id ) );
 		$request->add_header( 'content-type', 'application/json' );
 		$request->set_body( wp_json_encode( $params ) );
 
 		$response = rest_get_server()->dispatch( $request );
-		$this->assertEquals( 200, $response->get_status() );
+		$this->assertSame( 200, $response->get_status() );
 
 		$comment = $response->get_data();
 		$updated = get_comment( self::$approved_id );
-		$this->assertEquals( $params['date_gmt'], $comment['date_gmt'] );
-		$this->assertEquals( $params['date_gmt'], mysql_to_rfc3339( $updated->comment_date_gmt ) );
+		$this->assertSame( $params['date_gmt'], $comment['date_gmt'] );
+		$this->assertSame( $params['date_gmt'], mysql_to_rfc3339( $updated->comment_date_gmt ) );
 	}
 
 	public function test_update_comment_author_email_only() {
 		wp_set_current_user( self::$editor_id );
+
 		update_option( 'require_name_email', 1 );
 
 		$params = array(
@@ -2314,11 +2432,12 @@ class WP_Test_REST_Comments_Controller extends WP_Test_REST_Controller_Testcase
 		$request->set_body( wp_json_encode( $params ) );
 
 		$response = rest_get_server()->dispatch( $request );
-		$this->assertEquals( 200, $response->get_status() );
+		$this->assertSame( 200, $response->get_status() );
 	}
 
 	public function test_update_comment_empty_author_name() {
 		wp_set_current_user( self::$editor_id );
+
 		update_option( 'require_name_email', 1 );
 
 		$params = array(
@@ -2333,11 +2452,12 @@ class WP_Test_REST_Comments_Controller extends WP_Test_REST_Controller_Testcase
 		$request->set_body( wp_json_encode( $params ) );
 
 		$response = rest_get_server()->dispatch( $request );
-		$this->assertEquals( 200, $response->get_status() );
+		$this->assertSame( 200, $response->get_status() );
 	}
 
 	public function test_update_comment_author_name_only() {
 		wp_set_current_user( self::$admin_id );
+
 		update_option( 'require_name_email', 1 );
 
 		$params = array(
@@ -2351,11 +2471,12 @@ class WP_Test_REST_Comments_Controller extends WP_Test_REST_Controller_Testcase
 		$request->set_body( wp_json_encode( $params ) );
 
 		$response = rest_get_server()->dispatch( $request );
-		$this->assertEquals( 200, $response->get_status() );
+		$this->assertSame( 200, $response->get_status() );
 	}
 
 	public function test_update_comment_empty_author_email() {
 		wp_set_current_user( self::$admin_id );
+
 		update_option( 'require_name_email', 1 );
 
 		$params = array(
@@ -2370,7 +2491,7 @@ class WP_Test_REST_Comments_Controller extends WP_Test_REST_Controller_Testcase
 		$request->set_body( wp_json_encode( $params ) );
 
 		$response = rest_get_server()->dispatch( $request );
-		$this->assertEquals( 200, $response->get_status() );
+		$this->assertSame( 200, $response->get_status() );
 	}
 
 	public function test_update_comment_author_email_too_short() {
@@ -2396,9 +2517,10 @@ class WP_Test_REST_Comments_Controller extends WP_Test_REST_Controller_Testcase
 	public function test_update_comment_invalid_type() {
 		wp_set_current_user( self::$admin_id );
 
-		$params  = array(
+		$params = array(
 			'type' => 'trackback',
 		);
+
 		$request = new WP_REST_Request( 'PUT', sprintf( '/wp/v2/comments/%d', self::$approved_id ) );
 		$request->add_header( 'content-type', 'application/json' );
 		$request->set_body( wp_json_encode( $params ) );
@@ -2410,22 +2532,23 @@ class WP_Test_REST_Comments_Controller extends WP_Test_REST_Controller_Testcase
 	public function test_update_comment_with_raw_property() {
 		wp_set_current_user( self::$admin_id );
 
-		$params  = array(
+		$params = array(
 			'content' => array(
 				'raw' => 'What the heck kind of name is Persephone?',
 			),
 		);
+
 		$request = new WP_REST_Request( 'PUT', sprintf( '/wp/v2/comments/%d', self::$approved_id ) );
 		$request->add_header( 'content-type', 'application/json' );
 		$request->set_body( wp_json_encode( $params ) );
 
 		$response = rest_get_server()->dispatch( $request );
 
-		$this->assertEquals( 200, $response->get_status() );
+		$this->assertSame( 200, $response->get_status() );
 
 		$comment = $response->get_data();
 		$updated = get_comment( self::$approved_id );
-		$this->assertEquals( $params['content']['raw'], $updated->comment_content );
+		$this->assertSame( $params['content']['raw'], $updated->comment_content );
 	}
 
 	public function test_update_item_invalid_date() {
@@ -2463,9 +2586,10 @@ class WP_Test_REST_Comments_Controller extends WP_Test_REST_Controller_Testcase
 	public function test_update_comment_invalid_id() {
 		wp_set_current_user( self::$subscriber_id );
 
-		$params  = array(
+		$params = array(
 			'content' => 'Oh, they have the internet on computers now!',
 		);
+
 		$request = new WP_REST_Request( 'PUT', '/wp/v2/comments/' . REST_TESTS_IMPOSSIBLY_HIGH_NUMBER );
 		$request->add_header( 'content-type', 'application/json' );
 		$request->set_body( wp_json_encode( $params ) );
@@ -2487,9 +2611,10 @@ class WP_Test_REST_Comments_Controller extends WP_Test_REST_Controller_Testcase
 	public function test_update_comment_invalid_permission() {
 		add_filter( 'rest_allow_anonymous_comments', '__return_true' );
 
-		$params  = array(
+		$params = array(
 			'content' => 'Disco Stu likes disco music.',
 		);
+
 		$request = new WP_REST_Request( 'PUT', sprintf( '/wp/v2/comments/%d', self::$hold_id ) );
 		$request->add_header( 'content-type', 'application/json' );
 		$request->set_body( wp_json_encode( $params ) );
@@ -2504,23 +2629,24 @@ class WP_Test_REST_Comments_Controller extends WP_Test_REST_Controller_Testcase
 	public function test_update_comment_when_can_moderate_comments() {
 		wp_set_current_user( self::$moderator_id );
 
-		$request = new WP_REST_Request( 'PUT', sprintf( '/wp/v2/comments/%d', self::$approved_id ) );
-		$params  = array(
+		$params = array(
 			'content' => 'Updated comment.',
 			'date'    => '2019-10-07T23:14:25',
 		);
+
+		$request = new WP_REST_Request( 'PUT', sprintf( '/wp/v2/comments/%d', self::$approved_id ) );
 		$request->add_header( 'content-type', 'application/json' );
 		$request->set_body( wp_json_encode( $params ) );
 
 		$response = rest_get_server()->dispatch( $request );
-		$this->assertEquals( 200, $response->get_status() );
+		$this->assertSame( 200, $response->get_status() );
 
 		$comment = $response->get_data();
 		$updated = get_comment( self::$approved_id );
 
-		$this->assertEquals( $params['content'], $updated->comment_content );
-		$this->assertEquals( self::$post_id, $comment['post'] );
-		$this->assertEquals( '2019-10-07T23:14:25', $comment['date'] );
+		$this->assertSame( $params['content'], $updated->comment_content );
+		$this->assertSame( self::$post_id, $comment['post'] );
+		$this->assertSame( '2019-10-07T23:14:25', $comment['date'] );
 	}
 
 	public function test_update_comment_private_post_invalid_permission() {
@@ -2534,9 +2660,10 @@ class WP_Test_REST_Comments_Controller extends WP_Test_REST_Controller_Testcase
 
 		wp_set_current_user( self::$subscriber_id );
 
-		$params  = array(
+		$params = array(
 			'content' => 'Disco Stu likes disco music.',
 		);
+
 		$request = new WP_REST_Request( 'PUT', sprintf( '/wp/v2/comments/%d', $private_comment_id ) );
 		$request->add_header( 'content-type', 'application/json' );
 		$request->set_body( wp_json_encode( $params ) );
@@ -2547,6 +2674,7 @@ class WP_Test_REST_Comments_Controller extends WP_Test_REST_Controller_Testcase
 
 	public function test_update_comment_with_children_link() {
 		wp_set_current_user( self::$admin_id );
+
 		$comment_id_1 = $this->factory->comment->create(
 			array(
 				'comment_approved' => 1,
@@ -2566,7 +2694,7 @@ class WP_Test_REST_Comments_Controller extends WP_Test_REST_Controller_Testcase
 		// Check if comment 1 does not have the child link.
 		$request  = new WP_REST_Request( 'GET', sprintf( '/wp/v2/comments/%s', $comment_id_1 ) );
 		$response = rest_get_server()->dispatch( $request );
-		$this->assertEquals( 200, $response->get_status() );
+		$this->assertSame( 200, $response->get_status() );
 		$this->assertArrayNotHasKey( 'children', $response->get_links() );
 
 		// Change the comment parent.
@@ -2574,12 +2702,12 @@ class WP_Test_REST_Comments_Controller extends WP_Test_REST_Controller_Testcase
 		$request->set_param( 'parent', $comment_id_1 );
 		$request->set_param( 'content', rand_str() );
 		$response = rest_get_server()->dispatch( $request );
-		$this->assertEquals( 200, $response->get_status() );
+		$this->assertSame( 200, $response->get_status() );
 
 		// Check if comment 1 now has the child link.
 		$request  = new WP_REST_Request( 'GET', sprintf( '/wp/v2/comments/%s', $comment_id_1 ) );
 		$response = rest_get_server()->dispatch( $request );
-		$this->assertEquals( 200, $response->get_status() );
+		$this->assertSame( 200, $response->get_status() );
 		$this->assertArrayHasKey( 'children', $response->get_links() );
 	}
 
@@ -2589,10 +2717,11 @@ class WP_Test_REST_Comments_Controller extends WP_Test_REST_Controller_Testcase
 	public function test_update_comment_author_name_too_long() {
 		wp_set_current_user( self::$admin_id );
 
-		$params  = array(
+		$params = array(
 			'author_name' => rand_long_str( 246 ),
 			'content'     => 'This isn\'t a saxophone. It\'s an umbrella.',
 		);
+
 		$request = new WP_REST_Request( 'PUT', sprintf( '/wp/v2/comments/%d', self::$approved_id ) );
 
 		$request->add_header( 'content-type', 'application/json' );
@@ -2608,10 +2737,11 @@ class WP_Test_REST_Comments_Controller extends WP_Test_REST_Controller_Testcase
 	public function test_update_comment_author_email_too_long() {
 		wp_set_current_user( self::$admin_id );
 
-		$params  = array(
+		$params = array(
 			'author_email' => 'murphy@' . rand_long_str( 190 ) . '.com',
 			'content'      => 'This isn\'t a saxophone. It\'s an umbrella.',
 		);
+
 		$request = new WP_REST_Request( 'PUT', sprintf( '/wp/v2/comments/%d', self::$approved_id ) );
 
 		$request->add_header( 'content-type', 'application/json' );
@@ -2627,10 +2757,11 @@ class WP_Test_REST_Comments_Controller extends WP_Test_REST_Controller_Testcase
 	public function test_update_comment_author_url_too_long() {
 		wp_set_current_user( self::$admin_id );
 
-		$params  = array(
+		$params = array(
 			'author_url' => 'http://jazz.' . rand_long_str( 185 ) . '.com',
 			'content'    => 'This isn\'t a saxophone. It\'s an umbrella.',
 		);
+
 		$request = new WP_REST_Request( 'PUT', sprintf( '/wp/v2/comments/%d', self::$approved_id ) );
 
 		$request->add_header( 'content-type', 'application/json' );
@@ -2646,9 +2777,10 @@ class WP_Test_REST_Comments_Controller extends WP_Test_REST_Controller_Testcase
 	public function test_update_comment_content_too_long() {
 		wp_set_current_user( self::$admin_id );
 
-		$params  = array(
+		$params = array(
 			'content' => rand_long_str( 66525 ),
 		);
+
 		$request = new WP_REST_Request( 'PUT', sprintf( '/wp/v2/comments/%d', self::$approved_id ) );
 
 		$request->add_header( 'content-type', 'application/json' );
@@ -2658,8 +2790,38 @@ class WP_Test_REST_Comments_Controller extends WP_Test_REST_Controller_Testcase
 		$this->assertErrorResponse( 'comment_content_column_length', $response, 400 );
 	}
 
+	/**
+	 * @ticket 39732
+	 */
+	public function test_update_comment_is_wp_error() {
+		wp_set_current_user( self::$admin_id );
+
+		$params = array(
+			'content' => 'This isn\'t a saxophone. It\'s an umbrella.',
+		);
+
+		add_filter( 'wp_update_comment_data', array( $this, '_wp_update_comment_data_filter' ), 10, 3 );
+
+		$request = new WP_REST_Request( 'PUT', sprintf( '/wp/v2/comments/%d', self::$approved_id ) );
+
+		$request->add_header( 'content-type', 'application/json' );
+		$request->set_body( wp_json_encode( $params ) );
+		$response = rest_get_server()->dispatch( $request );
+
+		remove_filter( 'wp_update_comment_data', array( $this, '_wp_update_comment_data_filter' ), 10, 3 );
+
+		$this->assertErrorResponse( 'rest_comment_failed_edit', $response, 500 );
+	}
+
+	/**
+	 * Blocks comments from being updated by returning WP_Error.
+	 */
+	public function _wp_update_comment_data_filter( $data, $comment, $commentarr ) {
+		return new WP_Error( 'comment_wrong', 'wp_update_comment_data filter fails for this comment.', array( 'status' => 500 ) );
+	}
+
 	public function verify_comment_roundtrip( $input = array(), $expected_output = array() ) {
-		// Create the comment
+		// Create the comment.
 		$request = new WP_REST_Request( 'POST', '/wp/v2/comments' );
 		$request->set_param( 'author_email', 'cbg@androidsdungeon.com' );
 		$request->set_param( 'post', self::$post_id );
@@ -2667,51 +2829,52 @@ class WP_Test_REST_Comments_Controller extends WP_Test_REST_Controller_Testcase
 			$request->set_param( $name, $value );
 		}
 		$response = rest_get_server()->dispatch( $request );
-		$this->assertEquals( 201, $response->get_status() );
+		$this->assertSame( 201, $response->get_status() );
 		$actual_output = $response->get_data();
 
-		// Compare expected API output to actual API output
+		// Compare expected API output to actual API output.
 		$this->assertInternalType( 'array', $actual_output['content'] );
 		$this->assertArrayHasKey( 'raw', $actual_output['content'] );
-		$this->assertEquals( $expected_output['content']['raw'], $actual_output['content']['raw'] );
-		$this->assertEquals( $expected_output['content']['rendered'], trim( $actual_output['content']['rendered'] ) );
-		$this->assertEquals( $expected_output['author_name'], $actual_output['author_name'] );
-		$this->assertEquals( $expected_output['author_user_agent'], $actual_output['author_user_agent'] );
+		$this->assertSame( $expected_output['content']['raw'], $actual_output['content']['raw'] );
+		$this->assertSame( $expected_output['content']['rendered'], trim( $actual_output['content']['rendered'] ) );
+		$this->assertSame( $expected_output['author_name'], $actual_output['author_name'] );
+		$this->assertSame( $expected_output['author_user_agent'], $actual_output['author_user_agent'] );
 
-		// Compare expected API output to WP internal values
+		// Compare expected API output to WP internal values.
 		$comment = get_comment( $actual_output['id'] );
-		$this->assertEquals( $expected_output['content']['raw'], $comment->comment_content );
-		$this->assertEquals( $expected_output['author_name'], $comment->comment_author );
-		$this->assertEquals( $expected_output['author_user_agent'], $comment->comment_agent );
+		$this->assertSame( $expected_output['content']['raw'], $comment->comment_content );
+		$this->assertSame( $expected_output['author_name'], $comment->comment_author );
+		$this->assertSame( $expected_output['author_user_agent'], $comment->comment_agent );
 
-		// Update the comment
+		// Update the comment.
 		$request = new WP_REST_Request( 'PUT', sprintf( '/wp/v2/comments/%d', $actual_output['id'] ) );
 		foreach ( $input as $name => $value ) {
 			$request->set_param( $name, $value );
 		}
-		// FIXME at least one value must change, or update fails
+		// FIXME At least one value must change, or update fails.
 		// See https://core.trac.wordpress.org/ticket/38700
 		$request->set_param( 'author_ip', '127.0.0.2' );
 		$response = rest_get_server()->dispatch( $request );
-		$this->assertEquals( 200, $response->get_status() );
+		$this->assertSame( 200, $response->get_status() );
 		$actual_output = $response->get_data();
 
-		// Compare expected API output to actual API output
-		$this->assertEquals( $expected_output['content']['raw'], $actual_output['content']['raw'] );
-		$this->assertEquals( $expected_output['content']['rendered'], trim( $actual_output['content']['rendered'] ) );
-		$this->assertEquals( $expected_output['author_name'], $actual_output['author_name'] );
-		$this->assertEquals( $expected_output['author_user_agent'], $actual_output['author_user_agent'] );
+		// Compare expected API output to actual API output.
+		$this->assertSame( $expected_output['content']['raw'], $actual_output['content']['raw'] );
+		$this->assertSame( $expected_output['content']['rendered'], trim( $actual_output['content']['rendered'] ) );
+		$this->assertSame( $expected_output['author_name'], $actual_output['author_name'] );
+		$this->assertSame( $expected_output['author_user_agent'], $actual_output['author_user_agent'] );
 
-		// Compare expected API output to WP internal values
+		// Compare expected API output to WP internal values.
 		$comment = get_comment( $actual_output['id'] );
-		$this->assertEquals( $expected_output['content']['raw'], $comment->comment_content );
-		$this->assertEquals( $expected_output['author_name'], $comment->comment_author );
-		$this->assertEquals( $expected_output['author_user_agent'], $comment->comment_agent );
+		$this->assertSame( $expected_output['content']['raw'], $comment->comment_content );
+		$this->assertSame( $expected_output['author_name'], $comment->comment_author );
+		$this->assertSame( $expected_output['author_user_agent'], $comment->comment_agent );
 	}
 
 	public function test_comment_roundtrip_as_editor() {
 		wp_set_current_user( self::$editor_id );
-		$this->assertEquals( ! is_multisite(), current_user_can( 'unfiltered_html' ) );
+
+		$this->assertSame( ! is_multisite(), current_user_can( 'unfiltered_html' ) );
 		$this->verify_comment_roundtrip(
 			array(
 				'content'           => '\o/ ¬Ø\_(„ÉÑ)_/¬Ø',
@@ -2731,6 +2894,7 @@ class WP_Test_REST_Comments_Controller extends WP_Test_REST_Controller_Testcase
 
 	public function test_comment_roundtrip_as_editor_unfiltered_html() {
 		wp_set_current_user( self::$editor_id );
+
 		if ( is_multisite() ) {
 			$this->assertFalse( current_user_can( 'unfiltered_html' ) );
 			$this->verify_comment_roundtrip(
@@ -2770,6 +2934,7 @@ class WP_Test_REST_Comments_Controller extends WP_Test_REST_Controller_Testcase
 
 	public function test_comment_roundtrip_as_superadmin() {
 		wp_set_current_user( self::$superadmin_id );
+
 		$this->assertTrue( current_user_can( 'unfiltered_html' ) );
 		$this->verify_comment_roundtrip(
 			array(
@@ -2790,6 +2955,7 @@ class WP_Test_REST_Comments_Controller extends WP_Test_REST_Controller_Testcase
 
 	public function test_comment_roundtrip_as_superadmin_unfiltered_html() {
 		wp_set_current_user( self::$superadmin_id );
+
 		$this->assertTrue( current_user_can( 'unfiltered_html' ) );
 		$this->verify_comment_roundtrip(
 			array(
@@ -2822,27 +2988,28 @@ class WP_Test_REST_Comments_Controller extends WP_Test_REST_Controller_Testcase
 		$request = new WP_REST_Request( 'DELETE', sprintf( '/wp/v2/comments/%d', $comment_id ) );
 		$request->set_param( 'force', 'false' );
 		$response = rest_get_server()->dispatch( $request );
-		$this->assertEquals( 200, $response->get_status() );
+		$this->assertSame( 200, $response->get_status() );
 
 		$data = $response->get_data();
-		$this->assertEquals( 'trash', $data['status'] );
+		$this->assertSame( 'trash', $data['status'] );
 	}
 
 	public function test_delete_item_skip_trash() {
 		wp_set_current_user( self::$admin_id );
 
-		$comment_id       = $this->factory->comment->create(
+		$comment_id = $this->factory->comment->create(
 			array(
 				'comment_approved' => 1,
 				'comment_post_ID'  => self::$post_id,
 				'user_id'          => self::$subscriber_id,
 			)
 		);
+
 		$request          = new WP_REST_Request( 'DELETE', sprintf( '/wp/v2/comments/%d', $comment_id ) );
 		$request['force'] = true;
 
 		$response = rest_get_server()->dispatch( $request );
-		$this->assertEquals( 200, $response->get_status() );
+		$this->assertSame( 200, $response->get_status() );
 		$data = $response->get_data();
 		$this->assertTrue( $data['deleted'] );
 		$this->assertNotEmpty( $data['previous']['post'] );
@@ -2858,9 +3025,10 @@ class WP_Test_REST_Comments_Controller extends WP_Test_REST_Controller_Testcase
 				'user_id'          => self::$subscriber_id,
 			)
 		);
-		$request    = new WP_REST_Request( 'DELETE', sprintf( '/wp/v2/comments/%d', $comment_id ) );
-		$response   = rest_get_server()->dispatch( $request );
-		$this->assertEquals( 200, $response->get_status() );
+
+		$request  = new WP_REST_Request( 'DELETE', sprintf( '/wp/v2/comments/%d', $comment_id ) );
+		$response = rest_get_server()->dispatch( $request );
+		$this->assertSame( 200, $response->get_status() );
 		$data     = $response->get_data();
 		$response = rest_get_server()->dispatch( $request );
 		$this->assertErrorResponse( 'rest_already_trashed', $response, 410 );
@@ -2869,8 +3037,7 @@ class WP_Test_REST_Comments_Controller extends WP_Test_REST_Controller_Testcase
 	public function test_delete_comment_invalid_id() {
 		wp_set_current_user( self::$admin_id );
 
-		$request = new WP_REST_Request( 'DELETE', sprintf( '/wp/v2/comments/%d', REST_TESTS_IMPOSSIBLY_HIGH_NUMBER ) );
-
+		$request  = new WP_REST_Request( 'DELETE', sprintf( '/wp/v2/comments/%d', REST_TESTS_IMPOSSIBLY_HIGH_NUMBER ) );
 		$response = rest_get_server()->dispatch( $request );
 		$this->assertErrorResponse( 'rest_comment_invalid_id', $response, 404 );
 	}
@@ -2878,14 +3045,14 @@ class WP_Test_REST_Comments_Controller extends WP_Test_REST_Controller_Testcase
 	public function test_delete_comment_without_permission() {
 		wp_set_current_user( self::$subscriber_id );
 
-		$request = new WP_REST_Request( 'DELETE', sprintf( '/wp/v2/comments/%d', self::$approved_id ) );
-
+		$request  = new WP_REST_Request( 'DELETE', sprintf( '/wp/v2/comments/%d', self::$approved_id ) );
 		$response = rest_get_server()->dispatch( $request );
 		$this->assertErrorResponse( 'rest_cannot_delete', $response, 403 );
 	}
 
 	public function test_delete_child_comment_link() {
 		wp_set_current_user( self::$admin_id );
+
 		$comment_id_1 = $this->factory->comment->create(
 			array(
 				'comment_approved' => 1,
@@ -2905,12 +3072,12 @@ class WP_Test_REST_Comments_Controller extends WP_Test_REST_Controller_Testcase
 
 		$request  = new WP_REST_Request( 'DELETE', sprintf( '/wp/v2/comments/%s', $child_comment ) );
 		$response = rest_get_server()->dispatch( $request );
-		$this->assertEquals( 200, $response->get_status() );
+		$this->assertSame( 200, $response->get_status() );
 
 		// Verify children link is gone.
 		$request  = new WP_REST_Request( 'GET', sprintf( '/wp/v2/comments/%s', $comment_id_1 ) );
 		$response = rest_get_server()->dispatch( $request );
-		$this->assertEquals( 200, $response->get_status() );
+		$this->assertSame( 200, $response->get_status() );
 		$this->assertArrayNotHasKey( 'children', $response->get_links() );
 	}
 
@@ -2919,7 +3086,7 @@ class WP_Test_REST_Comments_Controller extends WP_Test_REST_Controller_Testcase
 		$response   = rest_get_server()->dispatch( $request );
 		$data       = $response->get_data();
 		$properties = $data['schema']['properties'];
-		$this->assertEquals( 17, count( $properties ) );
+		$this->assertSame( 17, count( $properties ) );
 		$this->assertArrayHasKey( 'id', $properties );
 		$this->assertArrayHasKey( 'author', $properties );
 		$this->assertArrayHasKey( 'author_avatar_urls', $properties );
@@ -2938,15 +3105,16 @@ class WP_Test_REST_Comments_Controller extends WP_Test_REST_Controller_Testcase
 		$this->assertArrayHasKey( 'status', $properties );
 		$this->assertArrayHasKey( 'type', $properties );
 
-		$this->assertEquals( 0, $properties['parent']['default'] );
-		$this->assertEquals( 0, $properties['post']['default'] );
+		$this->assertSame( 0, $properties['parent']['default'] );
+		$this->assertSame( 0, $properties['post']['default'] );
 
-		$this->assertEquals( true, $properties['link']['readonly'] );
-		$this->assertEquals( true, $properties['type']['readonly'] );
+		$this->assertTrue( $properties['link']['readonly'] );
+		$this->assertTrue( $properties['type']['readonly'] );
 	}
 
 	public function test_get_item_schema_show_avatar() {
 		update_option( 'show_avatars', false );
+
 		$request    = new WP_REST_Request( 'OPTIONS', '/wp/v2/users' );
 		$response   = rest_get_server()->dispatch( $request );
 		$data       = $response->get_data();
@@ -2974,16 +3142,14 @@ class WP_Test_REST_Comments_Controller extends WP_Test_REST_Controller_Testcase
 			)
 		);
 
-		$request = new WP_REST_Request( 'OPTIONS', '/wp/v2/comments' );
-
+		$request  = new WP_REST_Request( 'OPTIONS', '/wp/v2/comments' );
 		$response = rest_get_server()->dispatch( $request );
 		$data     = $response->get_data();
 
 		$this->assertArrayHasKey( 'my_custom_int', $data['schema']['properties'] );
-		$this->assertEquals( $schema, $data['schema']['properties']['my_custom_int'] );
-
-		$request = new WP_REST_Request( 'GET', '/wp/v2/comments/' . self::$approved_id );
+		$this->assertSame( $schema, $data['schema']['properties']['my_custom_int'] );
 
+		$request  = new WP_REST_Request( 'GET', '/wp/v2/comments/' . self::$approved_id );
 		$response = rest_get_server()->dispatch( $request );
 		$this->assertArrayHasKey( 'my_custom_int', $response->data );
 
@@ -3072,14 +3238,14 @@ class WP_Test_REST_Comments_Controller extends WP_Test_REST_Controller_Testcase
 		$this->assertEquals( $comment->comment_post_ID, $data['post'] );
 		$this->assertEquals( $comment->comment_parent, $data['parent'] );
 		$this->assertEquals( $comment->user_id, $data['author'] );
-		$this->assertEquals( $comment->comment_author, $data['author_name'] );
-		$this->assertEquals( $comment->comment_author_url, $data['author_url'] );
-		$this->assertEquals( wpautop( $comment->comment_content ), $data['content']['rendered'] );
-		$this->assertEquals( mysql_to_rfc3339( $comment->comment_date ), $data['date'] );
-		$this->assertEquals( mysql_to_rfc3339( $comment->comment_date_gmt ), $data['date_gmt'] );
-		$this->assertEquals( get_comment_link( $comment ), $data['link'] );
+		$this->assertSame( $comment->comment_author, $data['author_name'] );
+		$this->assertSame( $comment->comment_author_url, $data['author_url'] );
+		$this->assertSame( wpautop( $comment->comment_content ), $data['content']['rendered'] );
+		$this->assertSame( mysql_to_rfc3339( $comment->comment_date ), $data['date'] );
+		$this->assertSame( mysql_to_rfc3339( $comment->comment_date_gmt ), $data['date_gmt'] );
+		$this->assertSame( get_comment_link( $comment ), $data['link'] );
 		$this->assertContains( 'author_avatar_urls', $data );
-		$this->assertEqualSets(
+		$this->assertSameSets(
 			array(
 				'self',
 				'collection',
@@ -3089,10 +3255,10 @@ class WP_Test_REST_Comments_Controller extends WP_Test_REST_Controller_Testcase
 		);
 
 		if ( 'edit' === $context ) {
-			$this->assertEquals( $comment->comment_author_email, $data['author_email'] );
-			$this->assertEquals( $comment->comment_author_IP, $data['author_ip'] );
-			$this->assertEquals( $comment->comment_agent, $data['author_user_agent'] );
-			$this->assertEquals( $comment->comment_content, $data['content']['raw'] );
+			$this->assertSame( $comment->comment_author_email, $data['author_email'] );
+			$this->assertSame( $comment->comment_author_IP, $data['author_ip'] );
+			$this->assertSame( $comment->comment_agent, $data['author_user_agent'] );
+			$this->assertSame( $comment->comment_content, $data['content']['raw'] );
 		}
 
 		if ( 'edit' !== $context ) {
@@ -3102,4 +3268,31 @@ class WP_Test_REST_Comments_Controller extends WP_Test_REST_Controller_Testcase
 			$this->assertArrayNotHasKey( 'raw', $data['content'] );
 		}
 	}
+
+	/**
+	 * @ticket 42238
+	 */
+	public function test_check_read_post_permission_with_invalid_post_type() {
+		register_post_type(
+			'bug-post',
+			array(
+				'label'        => 'Bug Posts',
+				'supports'     => array( 'title', 'editor', 'author', 'comments' ),
+				'show_in_rest' => true,
+				'public'       => true,
+			)
+		);
+		create_initial_rest_routes();
+
+		$post_id    = self::factory()->post->create( array( 'post_type' => 'bug-post' ) );
+		$comment_id = self::factory()->comment->create( array( 'comment_post_ID' => $post_id ) );
+		_unregister_post_type( 'bug-post' );
+
+		$this->setExpectedIncorrectUsage( 'map_meta_cap' );
+
+		wp_set_current_user( self::$admin_id );
+		$request  = new WP_REST_Request( 'GET', '/wp/v2/comments/' . $comment_id );
+		$response = rest_get_server()->dispatch( $request );
+		$this->assertSame( 403, $response->get_status() );
+	}
 }
diff --git a/tests/rest-api/rest-controller.php b/tests/rest-api/rest-controller.php
index 91e1d0c5b7..c98e8045e4 100644
--- a/tests/rest-api/rest-controller.php
+++ b/tests/rest-api/rest-controller.php
@@ -27,6 +27,10 @@ class WP_Test_REST_Controller extends WP_Test_REST_TestCase {
 					'somestring'  => array(
 						'type' => 'string',
 					),
+					'somehex'     => array(
+						'type'   => 'string',
+						'format' => 'hex-color',
+					),
 					'someenum'    => array(
 						'type' => 'string',
 						'enum' => array( 'a' ),
@@ -39,11 +43,22 @@ class WP_Test_REST_Controller extends WP_Test_REST_TestCase {
 						'type'   => 'string',
 						'format' => 'email',
 					),
+					'someuuid'    => array(
+						'type'   => 'string',
+						'format' => 'uuid',
+					),
 				),
 			)
 		);
 	}
 
+	public function tearDown() {
+		parent::tearDown();
+
+		global $wp_rest_additional_fields;
+		$wp_rest_additional_fields = array();
+	}
+
 	public function test_validate_schema_type_integer() {
 
 		$this->assertTrue(
@@ -91,35 +106,35 @@ class WP_Test_REST_Controller extends WP_Test_REST_TestCase {
 		);
 
 		// Check sanitize testing.
-		$this->assertEquals(
+		$this->assertSame(
 			false,
 			rest_sanitize_request_arg( 'false', $this->request, 'someboolean' )
 		);
-		$this->assertEquals(
+		$this->assertSame(
 			false,
 			rest_sanitize_request_arg( '0', $this->request, 'someboolean' )
 		);
-		$this->assertEquals(
+		$this->assertSame(
 			false,
 			rest_sanitize_request_arg( 0, $this->request, 'someboolean' )
 		);
-		$this->assertEquals(
+		$this->assertSame(
 			false,
 			rest_sanitize_request_arg( 'FALSE', $this->request, 'someboolean' )
 		);
-		$this->assertEquals(
+		$this->assertSame(
 			true,
 			rest_sanitize_request_arg( 'true', $this->request, 'someboolean' )
 		);
-		$this->assertEquals(
+		$this->assertSame(
 			true,
 			rest_sanitize_request_arg( '1', $this->request, 'someboolean' )
 		);
-		$this->assertEquals(
+		$this->assertSame(
 			true,
 			rest_sanitize_request_arg( 1, $this->request, 'someboolean' )
 		);
-		$this->assertEquals(
+		$this->assertSame(
 			true,
 			rest_sanitize_request_arg( 'TRUE', $this->request, 'someboolean' )
 		);
@@ -166,6 +181,21 @@ class WP_Test_REST_Controller extends WP_Test_REST_TestCase {
 		);
 	}
 
+	/**
+	 * @ticket 49270
+	 */
+	public function test_validate_schema_format_hex_color() {
+
+		$this->assertTrue(
+			rest_validate_request_arg( '#000000', $this->request, 'somehex' )
+		);
+
+		$this->assertErrorResponse(
+			'rest_invalid_hex_color',
+			rest_validate_request_arg( 'wibble', $this->request, 'somehex' )
+		);
+	}
+
 	public function test_validate_schema_format_date_time() {
 
 		$this->assertTrue(
@@ -178,9 +208,46 @@ class WP_Test_REST_Controller extends WP_Test_REST_TestCase {
 		);
 	}
 
-	public function test_get_endpoint_args_for_item_schema_description() {
+	/**
+	 * @ticket 50053
+	 */
+	public function test_validate_schema_format_uuid() {
+		$this->assertTrue(
+			rest_validate_request_arg( '123e4567-e89b-12d3-a456-426655440000', $this->request, 'someuuid' )
+		);
+
+		$this->assertErrorResponse(
+			'rest_invalid_uuid',
+			rest_validate_request_arg( '123e4567-e89b-12d3-a456-426655440000X', $this->request, 'someuuid' )
+		);
+	}
+
+	/**
+	 * @ticket 50876
+	 */
+	public function test_get_endpoint_args_for_item_schema() {
 		$controller = new WP_REST_Test_Controller();
 		$args       = $controller->get_endpoint_args_for_item_schema();
+
+		$this->assertArrayHasKey( 'somestring', $args );
+		$this->assertArrayHasKey( 'someinteger', $args );
+		$this->assertArrayHasKey( 'someboolean', $args );
+		$this->assertArrayHasKey( 'someurl', $args );
+		$this->assertArrayHasKey( 'somedate', $args );
+		$this->assertArrayHasKey( 'someemail', $args );
+		$this->assertArrayHasKey( 'somehex', $args );
+		$this->assertArrayHasKey( 'someuuid', $args );
+		$this->assertArrayHasKey( 'someenum', $args );
+		$this->assertArrayHasKey( 'someargoptions', $args );
+		$this->assertArrayHasKey( 'somedefault', $args );
+		$this->assertArrayHasKey( 'somearray', $args );
+		$this->assertArrayHasKey( 'someobject', $args );
+	}
+
+	public function test_get_endpoint_args_for_item_schema_description() {
+		$controller = new WP_REST_Test_Controller();
+		$args       = rest_get_endpoint_args_for_schema( $controller->get_item_schema() );
+
 		$this->assertEquals( 'A pretty string.', $args['somestring']['description'] );
 		$this->assertFalse( isset( $args['someinteger']['description'] ) );
 	}
@@ -188,29 +255,59 @@ class WP_Test_REST_Controller extends WP_Test_REST_TestCase {
 	public function test_get_endpoint_args_for_item_schema_arg_options() {
 
 		$controller = new WP_REST_Test_Controller();
-		$args       = $controller->get_endpoint_args_for_item_schema();
+		$args       = rest_get_endpoint_args_for_schema( $controller->get_item_schema() );
 
 		$this->assertFalse( $args['someargoptions']['required'] );
-		$this->assertEquals( '__return_true', $args['someargoptions']['sanitize_callback'] );
+		$this->assertSame( '__return_true', $args['someargoptions']['sanitize_callback'] );
 	}
 
 	public function test_get_endpoint_args_for_item_schema_default_value() {
 
 		$controller = new WP_REST_Test_Controller();
+		$args       = rest_get_endpoint_args_for_schema( $controller->get_item_schema() );
+
+		$this->assertSame( 'a', $args['somedefault']['default'] );
+	}
+
+	/**
+	 * @ticket 50301
+	 */
+	public function test_get_endpoint_args_for_item_schema_arg_properties() {
+
+		$controller = new WP_REST_Test_Controller();
+		$args       = rest_get_endpoint_args_for_schema( $controller->get_item_schema() );
+
+		foreach ( array( 'minLength', 'maxLength', 'pattern' ) as $property ) {
+			$this->assertArrayHasKey( $property, $args['somestring'] );
+		}
 
-		$args = $controller->get_endpoint_args_for_item_schema();
+		foreach ( array( 'minimum', 'maximum', 'exclusiveMinimum', 'exclusiveMaximum' ) as $property ) {
+			$this->assertArrayHasKey( $property, $args['someinteger'] );
+		}
+
+		$this->assertArrayHasKey( 'items', $args['somearray'] );
+
+		foreach ( array( 'minItems', 'maxItems', 'uniqueItems' ) as $property ) {
+			$this->assertArrayHasKey( $property, $args['somearray'] );
+		}
+
+		foreach ( array( 'properties', 'additionalProperties' ) as $property ) {
+			$this->assertArrayHasKey( $property, $args['someobject'] );
+		}
+
+		// Ignored properties.
+		$this->assertArrayNotHasKey( 'ignored_prop', $args['someobject'] );
 
-		$this->assertEquals( 'a', $args['somedefault']['default'] );
 	}
 
 	/**
-	 * @dataProvider data_get_fields_for_response,
+	 * @dataProvider data_get_fields_for_response
 	 */
 	public function test_get_fields_for_response( $param, $expected ) {
 		$controller = new WP_REST_Test_Controller();
 		$request    = new WP_REST_Request( 'GET', '/wp/v2/testroute' );
 		$fields     = $controller->get_fields_for_response( $request );
-		$this->assertEquals(
+		$this->assertSame(
 			array(
 				'somestring',
 				'someinteger',
@@ -218,15 +315,19 @@ class WP_Test_REST_Controller extends WP_Test_REST_TestCase {
 				'someurl',
 				'somedate',
 				'someemail',
+				'somehex',
+				'someuuid',
 				'someenum',
 				'someargoptions',
 				'somedefault',
+				'somearray',
+				'someobject',
 			),
 			$fields
 		);
 		$request->set_param( '_fields', $param );
 		$fields = $controller->get_fields_for_response( $request );
-		$this->assertEquals( $expected, $fields );
+		$this->assertSame( $expected, $fields );
 	}
 
 	public function data_get_fields_for_response() {
@@ -247,9 +348,13 @@ class WP_Test_REST_Controller extends WP_Test_REST_TestCase {
 					'someurl',
 					'somedate',
 					'someemail',
+					'somehex',
+					'someuuid',
 					'someenum',
 					'someargoptions',
 					'somedefault',
+					'somearray',
+					'someobject',
 				),
 			),
 		);
@@ -343,6 +448,39 @@ class WP_Test_REST_Controller extends WP_Test_REST_TestCase {
 		$this->assertGreaterThan( 0, $listener->get_call_count( $method ) );
 	}
 
+	/**
+	 * @ticket 48785
+	 */
+	public function test_get_public_item_schema_with_properties() {
+		$schema = ( new WP_REST_Test_Controller() )->get_public_item_schema();
+
+		// Double-check that the public item schema set in WP_REST_Test_Controller still has properties.
+		$this->assertArrayHasKey( 'properties', $schema );
+
+		// But arg_options should be removed.
+		$this->assertArrayNotHasKey( 'arg_options', $schema['properties']['someargoptions'] );
+	}
+
+	/**
+	 * @ticket 48785
+	 */
+	public function test_get_public_item_schema_no_properties() {
+		$controller = new WP_REST_Test_Configurable_Controller(
+			array(
+				'$schema'     => 'http://json-schema.org/draft-04/schema#',
+				'title'       => 'foo',
+				'type'        => 'string',
+				'description' => 'This is my magical endpoint that just returns a string.',
+			)
+		);
+
+		// Initial check that the test class is working as expected.
+		$this->assertArrayNotHasKey( 'properties', $controller->get_public_item_schema() );
+
+		// Test that the schema lacking 'properties' is returned as expected.
+		$this->assertSameSetsWithIndex( $controller->get_public_item_schema(), $controller->get_test_schema() );
+	}
+
 	public function test_add_additional_fields_to_object_respects_fields_param() {
 		$controller = new WP_REST_Test_Controller();
 		$request    = new WP_REST_Request( 'GET', '/wp/v2/testroute' );
@@ -383,4 +521,125 @@ class WP_Test_REST_Controller extends WP_Test_REST_TestCase {
 
 		$this->assertTrue( $listener->get_call_count( $method ) > $first_call_count );
 	}
+
+	/**
+	 * @dataProvider data_filter_nested_registered_rest_fields
+	 * @ticket 49648
+	 */
+	public function test_filter_nested_registered_rest_fields( $filter, $expected ) {
+		$controller = new WP_REST_Test_Controller();
+
+		register_rest_field(
+			'type',
+			'field',
+			array(
+				'schema'       => array(
+					'type'        => 'object',
+					'description' => 'A complex object',
+					'context'     => array( 'view', 'edit' ),
+					'properties'  => array(
+						'a' => array(
+							'i'  => 'string',
+							'ii' => 'string',
+						),
+						'b' => array(
+							'iii' => 'string',
+							'iv'  => 'string',
+						),
+					),
+				),
+				'get_callback' => array( $this, 'register_nested_rest_field_get_callback' ),
+			)
+		);
+
+		$request = new WP_REST_Request( 'GET', '/wp/v2/testroute' );
+		$request->set_param( '_fields', $filter );
+
+		$response = $controller->prepare_item_for_response( array(), $request );
+		$response = rest_filter_response_fields( $response, rest_get_server(), $request );
+
+		$this->assertSame( $expected, $response->get_data() );
+	}
+
+	public function register_nested_rest_field_get_callback() {
+		return array(
+			'a' => array(
+				'i'  => 'value i',
+				'ii' => 'value ii',
+			),
+			'b' => array(
+				'iii' => 'value iii',
+				'iv'  => 'value iv',
+			),
+		);
+	}
+
+	public function data_filter_nested_registered_rest_fields() {
+		return array(
+			array(
+				'field',
+				array(
+					'field' => array(
+						'a' => array(
+							'i'  => 'value i',
+							'ii' => 'value ii',
+						),
+						'b' => array(
+							'iii' => 'value iii',
+							'iv'  => 'value iv',
+						),
+					),
+				),
+			),
+			array(
+				'field.a',
+				array(
+					'field' => array(
+						'a' => array(
+							'i'  => 'value i',
+							'ii' => 'value ii',
+						),
+					),
+				),
+			),
+			array(
+				'field.b',
+				array(
+					'field' => array(
+						'b' => array(
+							'iii' => 'value iii',
+							'iv'  => 'value iv',
+						),
+					),
+				),
+			),
+			array(
+				'field.a.i,field.b.iv',
+				array(
+					'field' => array(
+						'a' => array(
+							'i' => 'value i',
+						),
+						'b' => array(
+							'iv' => 'value iv',
+						),
+					),
+				),
+			),
+			array(
+				'field.a,field.b.iii',
+				array(
+					'field' => array(
+						'a' => array(
+							'i'  => 'value i',
+							'ii' => 'value ii',
+						),
+						'b' => array(
+							'iii' => 'value iii',
+						),
+					),
+				),
+			),
+		);
+	}
 }
diff --git a/tests/rest-api/rest-pages-controller.php b/tests/rest-api/rest-pages-controller.php
index 79da6b05e8..768a0f03b6 100644
--- a/tests/rest-api/rest-pages-controller.php
+++ b/tests/rest-api/rest-pages-controller.php
@@ -29,7 +29,7 @@ class WP_Test_REST_Pages_Controller extends WP_Test_REST_Post_Type_Controller_Te
 		parent::setUp();
 		$this->has_setup_template = false;
 		add_filter( 'theme_page_templates', array( $this, 'filter_theme_page_templates' ) );
-		// reregister the route as we now have a template available.
+		// Re-register the route as we now have a template available.
 		$GLOBALS['wp_rest_server']->override_by_default = true;
 		$controller                                     = new WP_REST_Posts_Controller( 'page' );
 		$controller->register_routes();
@@ -45,19 +45,19 @@ class WP_Test_REST_Pages_Controller extends WP_Test_REST_Post_Type_Controller_Te
 	}
 
 	public function test_context_param() {
-		// Collection
+		// Collection.
 		$request  = new WP_REST_Request( 'OPTIONS', '/wp/v2/pages' );
 		$response = rest_get_server()->dispatch( $request );
 		$data     = $response->get_data();
-		$this->assertEquals( 'view', $data['endpoints'][0]['args']['context']['default'] );
-		$this->assertEquals( array( 'view', 'embed', 'edit' ), $data['endpoints'][0]['args']['context']['enum'] );
-		// Single
+		$this->assertSame( 'view', $data['endpoints'][0]['args']['context']['default'] );
+		$this->assertSame( array( 'view', 'embed', 'edit' ), $data['endpoints'][0]['args']['context']['enum'] );
+		// Single.
 		$page_id  = $this->factory->post->create( array( 'post_type' => 'page' ) );
 		$request  = new WP_REST_Request( 'OPTIONS', '/wp/v2/pages/' . $page_id );
 		$response = rest_get_server()->dispatch( $request );
 		$data     = $response->get_data();
-		$this->assertEquals( 'view', $data['endpoints'][0]['args']['context']['default'] );
-		$this->assertEquals( array( 'view', 'embed', 'edit' ), $data['endpoints'][0]['args']['context']['enum'] );
+		$this->assertSame( 'view', $data['endpoints'][0]['args']['context']['default'] );
+		$this->assertSame( array( 'view', 'embed', 'edit' ), $data['endpoints'][0]['args']['context']['enum'] );
 	}
 
 	public function test_registered_query_params() {
@@ -66,7 +66,7 @@ class WP_Test_REST_Pages_Controller extends WP_Test_REST_Post_Type_Controller_Te
 		$data     = $response->get_data();
 		$keys     = array_keys( $data['endpoints'][0]['args'] );
 		sort( $keys );
-		$this->assertEquals(
+		$this->assertSame(
 			array(
 				'after',
 				'author',
@@ -107,8 +107,8 @@ class WP_Test_REST_Pages_Controller extends WP_Test_REST_Post_Type_Controller_Te
 		$request  = new WP_REST_Request( 'GET', '/wp/v2/pages' );
 		$response = rest_get_server()->dispatch( $request );
 		$data     = $response->get_data();
-		$this->assertEquals( 1, count( $data ) );
-		$this->assertEquals( $id1, $data[0]['id'] );
+		$this->assertSame( 1, count( $data ) );
+		$this->assertSame( $id1, $data[0]['id'] );
 	}
 
 	public function test_get_items_parent_query() {
@@ -125,18 +125,21 @@ class WP_Test_REST_Pages_Controller extends WP_Test_REST_Post_Type_Controller_Te
 				'post_parent' => $id1,
 			)
 		);
-		// No parent
+
+		// No parent.
 		$request  = new WP_REST_Request( 'GET', '/wp/v2/pages' );
 		$response = rest_get_server()->dispatch( $request );
 		$data     = $response->get_data();
-		$this->assertEquals( 2, count( $data ) );
-		// Filter to parent
+		$this->assertSame( 2, count( $data ) );
+
+		// Filter to parent.
 		$request->set_param( 'parent', $id1 );
 		$response = rest_get_server()->dispatch( $request );
 		$data     = $response->get_data();
-		$this->assertEquals( 1, count( $data ) );
-		$this->assertEquals( $id2, $data[0]['id'] );
-		// Invalid parent should fail
+		$this->assertSame( 1, count( $data ) );
+		$this->assertSame( $id2, $data[0]['id'] );
+
+		// Invalid 'parent' should error.
 		$request->set_param( 'parent', 'some-slug' );
 		$response = rest_get_server()->dispatch( $request );
 		$this->assertErrorResponse( 'rest_invalid_param', $response, 400 );
@@ -169,17 +172,19 @@ class WP_Test_REST_Pages_Controller extends WP_Test_REST_Post_Type_Controller_Te
 				'post_parent' => $id3,
 			)
 		);
-		// No parent
+
+		// No parent.
 		$request  = new WP_REST_Request( 'GET', '/wp/v2/pages' );
 		$response = rest_get_server()->dispatch( $request );
 		$data     = $response->get_data();
-		$this->assertEquals( 4, count( $data ) );
-		// Filter to parents
+		$this->assertSame( 4, count( $data ) );
+
+		// Filter to parents.
 		$request->set_param( 'parent', array( $id1, $id3 ) );
 		$response = rest_get_server()->dispatch( $request );
 		$data     = $response->get_data();
-		$this->assertEquals( 2, count( $data ) );
-		$this->assertEqualSets( array( $id2, $id4 ), wp_list_pluck( $data, 'id' ) );
+		$this->assertSame( 2, count( $data ) );
+		$this->assertSameSets( array( $id2, $id4 ), wp_list_pluck( $data, 'id' ) );
 	}
 
 	public function test_get_items_parent_exclude_query() {
@@ -196,18 +201,21 @@ class WP_Test_REST_Pages_Controller extends WP_Test_REST_Post_Type_Controller_Te
 				'post_parent' => $id1,
 			)
 		);
-		// No parent
+
+		// No parent.
 		$request  = new WP_REST_Request( 'GET', '/wp/v2/pages' );
 		$response = rest_get_server()->dispatch( $request );
 		$data     = $response->get_data();
-		$this->assertEquals( 2, count( $data ) );
-		// Filter to parent
+		$this->assertSame( 2, count( $data ) );
+
+		// Filter to parent.
 		$request->set_param( 'parent_exclude', $id1 );
 		$response = rest_get_server()->dispatch( $request );
 		$data     = $response->get_data();
-		$this->assertEquals( 1, count( $data ) );
-		$this->assertEquals( $id1, $data[0]['id'] );
-		// Invalid parent_exclude should error
+		$this->assertSame( 1, count( $data ) );
+		$this->assertSame( $id1, $data[0]['id'] );
+
+		// Invalid 'parent_exclude' should error.
 		$request->set_param( 'parent_exclude', 'some-slug' );
 		$response = rest_get_server()->dispatch( $request );
 		$this->assertErrorResponse( 'rest_invalid_param', $response, 400 );
@@ -241,27 +249,31 @@ class WP_Test_REST_Pages_Controller extends WP_Test_REST_Post_Type_Controller_Te
 				'menu_order'  => 1,
 			)
 		);
-		// No parent
+
+		// No parent.
 		$request  = new WP_REST_Request( 'GET', '/wp/v2/pages' );
 		$response = rest_get_server()->dispatch( $request );
 		$data     = $response->get_data();
-		$this->assertEqualSets( array( $id1, $id2, $id3, $id4 ), wp_list_pluck( $data, 'id' ) );
-		// Filter to menu_order
+		$this->assertSameSets( array( $id1, $id2, $id3, $id4 ), wp_list_pluck( $data, 'id' ) );
+
+		// Filter to 'menu_order'.
 		$request->set_param( 'menu_order', 1 );
 		$response = rest_get_server()->dispatch( $request );
 		$data     = $response->get_data();
-		$this->assertEqualSets( array( $id4 ), wp_list_pluck( $data, 'id' ) );
-		// Order by menu order
+		$this->assertSameSets( array( $id4 ), wp_list_pluck( $data, 'id' ) );
+
+		// Order by 'menu order'.
 		$request = new WP_REST_Request( 'GET', '/wp/v2/pages' );
 		$request->set_param( 'order', 'asc' );
 		$request->set_param( 'orderby', 'menu_order' );
 		$response = rest_get_server()->dispatch( $request );
 		$data     = $response->get_data();
-		$this->assertEquals( $id1, $data[0]['id'] );
-		$this->assertEquals( $id4, $data[1]['id'] );
-		$this->assertEquals( $id2, $data[2]['id'] );
-		$this->assertEquals( $id3, $data[3]['id'] );
-		// Invalid menu_order should fail
+		$this->assertSame( $id1, $data[0]['id'] );
+		$this->assertSame( $id4, $data[1]['id'] );
+		$this->assertSame( $id2, $data[2]['id'] );
+		$this->assertSame( $id3, $data[3]['id'] );
+
+		// Invalid 'menu_order' should error.
 		$request = new WP_REST_Request( 'GET', '/wp/v2/pages' );
 		$request->set_param( 'menu_order', 'top-first' );
 		$response = rest_get_server()->dispatch( $request );
@@ -274,7 +286,7 @@ class WP_Test_REST_Pages_Controller extends WP_Test_REST_Post_Type_Controller_Te
 		$response = rest_get_server()->dispatch( $request );
 		$this->assertErrorResponse( 'rest_invalid_param', $response, 400 );
 		$data = $response->get_data();
-		// Safe format for 4.4 and 4.5 https://core.trac.wordpress.org/ticket/35028
+		// Safe format for 4.4 and 4.5. See https://core.trac.wordpress.org/ticket/35028
 		$first_error = array_shift( $data['data']['params'] );
 		$this->assertContains( 'per_page must be between 1 (inclusive) and 100 (inclusive)', $first_error );
 		$request->set_param( 'per_page', 101 );
@@ -286,7 +298,7 @@ class WP_Test_REST_Pages_Controller extends WP_Test_REST_Post_Type_Controller_Te
 	}
 
 	public function test_get_items_private_filter_query_var() {
-		// Private query vars inaccessible to unauthorized users
+		// Private query vars inaccessible to unauthorized users.
 		wp_set_current_user( 0 );
 		$page_id  = $this->factory->post->create(
 			array(
@@ -305,12 +317,12 @@ class WP_Test_REST_Pages_Controller extends WP_Test_REST_Post_Type_Controller_Te
 		$response = rest_get_server()->dispatch( $request );
 		$this->assertErrorResponse( 'rest_invalid_param', $response, 400 );
 
-		// But they are accessible to authorized users
+		// But they are accessible to authorized users.
 		wp_set_current_user( self::$editor_id );
 		$response = rest_get_server()->dispatch( $request );
 		$data     = $response->get_data();
 		$this->assertCount( 1, $data );
-		$this->assertEquals( $draft_id, $data[0]['id'] );
+		$this->assertSame( $draft_id, $data[0]['id'] );
 	}
 
 	public function test_get_items_invalid_date() {
@@ -346,7 +358,7 @@ class WP_Test_REST_Pages_Controller extends WP_Test_REST_Post_Type_Controller_Te
 		$response = rest_get_server()->dispatch( $request );
 		$data     = $response->get_data();
 		$this->assertCount( 1, $data );
-		$this->assertEquals( $post2, $data[0]['id'] );
+		$this->assertSame( $post2, $data[0]['id'] );
 	}
 
 	public function test_get_item() {
@@ -357,7 +369,7 @@ class WP_Test_REST_Pages_Controller extends WP_Test_REST_Post_Type_Controller_Te
 		$post_id  = $this->factory->post->create();
 		$request  = new WP_REST_Request( 'GET', '/wp/v2/pages/' . $post_id );
 		$response = rest_get_server()->dispatch( $request );
-		$this->assertEquals( 404, $response->get_status() );
+		$this->assertSame( 404, $response->get_status() );
 	}
 
 	public function test_create_item() {
@@ -378,8 +390,8 @@ class WP_Test_REST_Pages_Controller extends WP_Test_REST_Post_Type_Controller_Te
 
 		$data     = $response->get_data();
 		$new_post = get_post( $data['id'] );
-		$this->assertEquals( 'page-my-test-template.php', $data['template'] );
-		$this->assertEquals( 'page-my-test-template.php', get_page_template_slug( $new_post->ID ) );
+		$this->assertSame( 'page-my-test-template.php', $data['template'] );
+		$this->assertSame( 'page-my-test-template.php', get_page_template_slug( $new_post->ID ) );
 	}
 
 	public function test_create_page_with_parent() {
@@ -399,15 +411,15 @@ class WP_Test_REST_Pages_Controller extends WP_Test_REST_Post_Type_Controller_Te
 		$request->set_body_params( $params );
 		$response = rest_get_server()->dispatch( $request );
 
-		$this->assertEquals( 201, $response->get_status() );
+		$this->assertSame( 201, $response->get_status() );
 
 		$links = $response->get_links();
 		$this->assertArrayHasKey( 'up', $links );
 
 		$data     = $response->get_data();
 		$new_post = get_post( $data['id'] );
-		$this->assertEquals( $page_id, $data['parent'] );
-		$this->assertEquals( $page_id, $new_post->post_parent );
+		$this->assertSame( $page_id, $data['parent'] );
+		$this->assertSame( $page_id, $new_post->post_parent );
 	}
 
 	public function test_create_page_with_invalid_parent() {
@@ -442,10 +454,10 @@ class WP_Test_REST_Pages_Controller extends WP_Test_REST_Post_Type_Controller_Te
 		$request->set_param( 'force', 'false' );
 		$response = rest_get_server()->dispatch( $request );
 
-		$this->assertEquals( 200, $response->get_status() );
+		$this->assertSame( 200, $response->get_status() );
 		$data = $response->get_data();
-		$this->assertEquals( 'Deleted page', $data['title']['raw'] );
-		$this->assertEquals( 'trash', $data['status'] );
+		$this->assertSame( 'Deleted page', $data['title']['raw'] );
+		$this->assertSame( 'trash', $data['status'] );
 	}
 
 	public function test_prepare_item() {
@@ -466,7 +478,7 @@ class WP_Test_REST_Pages_Controller extends WP_Test_REST_Post_Type_Controller_Te
 		$request->set_param( '_fields', 'id,slug' );
 		$obj      = get_post( $page_id );
 		$response = $endpoint->prepare_item_for_response( $obj, $request );
-		$this->assertEquals(
+		$this->assertSame(
 			array(
 				'id',
 				'slug',
@@ -492,16 +504,16 @@ class WP_Test_REST_Pages_Controller extends WP_Test_REST_Post_Type_Controller_Te
 		);
 		$response = rest_get_server()->dispatch( $request );
 
-		$this->assertEquals( 200, $response->get_status() );
+		$this->assertSame( 200, $response->get_status() );
 
 		$headers = $response->get_headers();
-		$this->assertEquals( 8, $headers['X-WP-Total'] );
-		$this->assertEquals( 2, $headers['X-WP-TotalPages'] );
+		$this->assertSame( 8, $headers['X-WP-Total'] );
+		$this->assertSame( 2, $headers['X-WP-TotalPages'] );
 
 		$all_data = $response->get_data();
-		$this->assertEquals( 4, count( $all_data ) );
+		$this->assertSame( 4, count( $all_data ) );
 		foreach ( $all_data as $post ) {
-			$this->assertEquals( 'page', $post['type'] );
+			$this->assertSame( 'page', $post['type'] );
 		}
 	}
 
@@ -525,7 +537,7 @@ class WP_Test_REST_Pages_Controller extends WP_Test_REST_Post_Type_Controller_Te
 		$response = rest_get_server()->dispatch( $request );
 
 		$new_data = $response->get_data();
-		$this->assertEquals( 1, $new_data['menu_order'] );
+		$this->assertSame( 1, $new_data['menu_order'] );
 	}
 
 	public function test_update_page_menu_order_to_zero() {
@@ -549,7 +561,7 @@ class WP_Test_REST_Pages_Controller extends WP_Test_REST_Post_Type_Controller_Te
 		$response = rest_get_server()->dispatch( $request );
 
 		$new_data = $response->get_data();
-		$this->assertEquals( 0, $new_data['menu_order'] );
+		$this->assertSame( 0, $new_data['menu_order'] );
 	}
 
 	public function test_update_page_parent_non_zero() {
@@ -572,7 +584,7 @@ class WP_Test_REST_Pages_Controller extends WP_Test_REST_Post_Type_Controller_Te
 		);
 		$response = rest_get_server()->dispatch( $request );
 		$new_data = $response->get_data();
-		$this->assertEquals( $page_id1, $new_data['parent'] );
+		$this->assertSame( $page_id1, $new_data['parent'] );
 	}
 
 	public function test_update_page_parent_zero() {
@@ -596,7 +608,7 @@ class WP_Test_REST_Pages_Controller extends WP_Test_REST_Post_Type_Controller_Te
 		);
 		$response = rest_get_server()->dispatch( $request );
 		$new_data = $response->get_data();
-		$this->assertEquals( 0, $new_data['parent'] );
+		$this->assertSame( 0, $new_data['parent'] );
 	}
 
 	public function test_get_page_with_password() {
@@ -611,9 +623,9 @@ class WP_Test_REST_Pages_Controller extends WP_Test_REST_Post_Type_Controller_Te
 		$response = rest_get_server()->dispatch( $request );
 
 		$data = $response->get_data();
-		$this->assertEquals( '', $data['content']['rendered'] );
+		$this->assertSame( '', $data['content']['rendered'] );
 		$this->assertTrue( $data['content']['protected'] );
-		$this->assertEquals( '', $data['excerpt']['rendered'] );
+		$this->assertSame( '', $data['excerpt']['rendered'] );
 		$this->assertTrue( $data['excerpt']['protected'] );
 	}
 
@@ -633,9 +645,9 @@ class WP_Test_REST_Pages_Controller extends WP_Test_REST_Post_Type_Controller_Te
 		$response = rest_get_server()->dispatch( $request );
 
 		$data = $response->get_data();
-		$this->assertEquals( wpautop( $page->post_content ), $data['content']['rendered'] );
+		$this->assertSame( wpautop( $page->post_content ), $data['content']['rendered'] );
 		$this->assertTrue( $data['content']['protected'] );
-		$this->assertEquals( wpautop( $page->post_excerpt ), $data['excerpt']['rendered'] );
+		$this->assertSame( wpautop( $page->post_excerpt ), $data['excerpt']['rendered'] );
 		$this->assertTrue( $data['excerpt']['protected'] );
 	}
 
@@ -667,9 +679,9 @@ class WP_Test_REST_Pages_Controller extends WP_Test_REST_Post_Type_Controller_Te
 		$request  = new WP_REST_Request( 'GET', sprintf( '/wp/v2/pages/%d', $page_id ) );
 		$response = rest_get_server()->dispatch( $request );
 		$data     = $response->get_data();
-		$this->assertEquals( '', $data['content']['rendered'] );
+		$this->assertSame( '', $data['content']['rendered'] );
 		$this->assertTrue( $data['content']['protected'] );
-		$this->assertEquals( '', $data['excerpt']['rendered'] );
+		$this->assertSame( '', $data['excerpt']['rendered'] );
 		$this->assertTrue( $data['excerpt']['protected'] );
 	}
 
@@ -678,7 +690,7 @@ class WP_Test_REST_Pages_Controller extends WP_Test_REST_Post_Type_Controller_Te
 		$response   = rest_get_server()->dispatch( $request );
 		$data       = $response->get_data();
 		$properties = $data['schema']['properties'];
-		$this->assertEquals( 24, count( $properties ) );
+		$this->assertSame( 24, count( $properties ) );
 		$this->assertArrayHasKey( 'author', $properties );
 		$this->assertArrayHasKey( 'comment_status', $properties );
 		$this->assertArrayHasKey( 'content', $properties );
diff --git a/tests/rest-api/rest-plugins-controller.php b/tests/rest-api/rest-plugins-controller.php
new file mode 100644
index 0000000000..22b2f0a40c
--- /dev/null
+++ b/tests/rest-api/rest-plugins-controller.php
@@ -0,0 +1,1133 @@
+<?php
+/**
+ * Unit tests covering WP_REST_Plugins_Controller functionality.
+ *
+ * @package WordPress
+ * @subpackage REST API
+ */
+
+/**
+ * @group restapi
+ */
+class WP_REST_Plugins_Controller_Test extends WP_Test_REST_Controller_Testcase {
+
+	const BASE        = '/wp/v2/plugins';
+	const PLUGIN      = 'test-plugin/test-plugin';
+	const PLUGIN_FILE = self::PLUGIN . '.php';
+
+	/**
+	 * Subscriber user ID.
+	 *
+	 * @since 5.5.0
+	 *
+	 * @var int
+	 */
+	private static $subscriber_id;
+
+	/**
+	 * Super administrator user ID.
+	 *
+	 * @since 5.5.0
+	 *
+	 * @var int
+	 */
+	private static $super_admin;
+
+	/**
+	 * Administrator user id.
+	 *
+	 * @since 5.5.0
+	 *
+	 * @var int
+	 */
+	private static $admin;
+
+	/**
+	 * Set up class test fixtures.
+	 *
+	 * @since 5.5.0
+	 *
+	 * @param WP_UnitTest_Factory $factory WordPress unit test factory.
+	 */
+	public static function wpSetUpBeforeClass( $factory ) {
+		self::$subscriber_id = $factory->user->create(
+			array(
+				'role' => 'subscriber',
+			)
+		);
+		self::$super_admin   = $factory->user->create(
+			array(
+				'role' => 'administrator',
+			)
+		);
+		self::$admin         = $factory->user->create(
+			array(
+				'role' => 'administrator',
+			)
+		);
+
+		if ( is_multisite() ) {
+			grant_super_admin( self::$super_admin );
+		}
+	}
+
+	/**
+	 * Clean up test fixtures.
+	 *
+	 * @since 5.5.0
+	 */
+	public static function wpTearDownAfterClass() {
+		self::delete_user( self::$subscriber_id );
+		self::delete_user( self::$super_admin );
+		self::delete_user( self::$admin );
+	}
+
+	public function tearDown() {
+		parent::tearDown();
+
+		if ( file_exists( WP_PLUGIN_DIR . '/test-plugin/test-plugin.php' ) ) {
+			$this->rmdir( WP_PLUGIN_DIR . '/test-plugin' );
+		}
+	}
+
+	/**
+	 * @ticket 50321
+	 */
+	public function test_register_routes() {
+		$routes = rest_get_server()->get_routes();
+		$this->assertArrayHasKey( self::BASE, $routes );
+		$this->assertArrayHasKey( self::BASE . '/(?P<plugin>[^.\/]+(?:\/[^.\/]+)?)', $routes );
+	}
+
+	/**
+	 * @ticket 50321
+	 */
+	public function test_context_param() {
+		// Collection.
+		$request  = new WP_REST_Request( 'OPTIONS', self::BASE );
+		$response = rest_get_server()->dispatch( $request );
+		$data     = $response->get_data();
+		$this->assertSame( 'view', $data['endpoints'][0]['args']['context']['default'] );
+		$this->assertSame( array( 'view', 'embed', 'edit' ), $data['endpoints'][0]['args']['context']['enum'] );
+		// Single.
+		$request  = new WP_REST_Request( 'OPTIONS', self::BASE . '/' . self::PLUGIN );
+		$response = rest_get_server()->dispatch( $request );
+		$data     = $response->get_data();
+		$this->assertSame( 'view', $data['endpoints'][0]['args']['context']['default'] );
+		$this->assertSame( array( 'view', 'embed', 'edit' ), $data['endpoints'][0]['args']['context']['enum'] );
+	}
+
+	/**
+	 * @ticket 50321
+	 */
+	public function test_get_items() {
+		$this->create_test_plugin();
+		wp_set_current_user( self::$super_admin );
+
+		$response = rest_do_request( self::BASE );
+		$this->assertSame( 200, $response->get_status() );
+
+		$items = wp_list_filter( $response->get_data(), array( 'plugin' => self::PLUGIN ) );
+
+		$this->assertCount( 1, $items );
+		$this->check_get_plugin_data( array_shift( $items ) );
+	}
+
+	/**
+	 * @ticket 50321
+	 */
+	public function test_get_items_search() {
+		$this->create_test_plugin();
+		wp_set_current_user( self::$super_admin );
+
+		$request = new WP_REST_Request( 'GET', self::BASE );
+		$request->set_query_params( array( 'search' => 'testeroni' ) );
+		$response = rest_do_request( $request );
+		$this->assertCount( 0, $response->get_data() );
+
+		$request = new WP_REST_Request( 'GET', self::BASE );
+		$request->set_query_params( array( 'search' => 'Cool' ) );
+		$response = rest_do_request( $request );
+		$this->assertCount( 1, wp_list_filter( $response->get_data(), array( 'plugin' => self::PLUGIN ) ) );
+	}
+
+	/**
+	 * @ticket 50321
+	 */
+	public function test_get_items_status() {
+		$this->create_test_plugin();
+		wp_set_current_user( self::$super_admin );
+
+		$request = new WP_REST_Request( 'GET', self::BASE );
+		$request->set_query_params( array( 'status' => 'inactive' ) );
+		$response = rest_do_request( $request );
+		$this->assertCount( 1, wp_list_filter( $response->get_data(), array( 'plugin' => self::PLUGIN ) ) );
+
+		$request = new WP_REST_Request( 'GET', self::BASE );
+		$request->set_query_params( array( 'status' => 'active' ) );
+		$response = rest_do_request( $request );
+		$this->assertCount( 0, wp_list_filter( $response->get_data(), array( 'plugin' => self::PLUGIN ) ) );
+	}
+
+	/**
+	 * @ticket 50321
+	 */
+	public function test_get_items_status_multiple() {
+		$this->create_test_plugin();
+		wp_set_current_user( self::$super_admin );
+
+		$request = new WP_REST_Request( 'GET', self::BASE );
+		$request->set_query_params( array( 'status' => array( 'inactive', 'active' ) ) );
+		$response = rest_do_request( $request );
+
+		$this->assertGreaterThan( 0, count( wp_list_filter( $response->get_data(), array( 'plugin' => self::PLUGIN ), 'NOT' ) ) );
+		$this->assertCount( 1, wp_list_filter( $response->get_data(), array( 'plugin' => self::PLUGIN ) ) );
+	}
+
+	/**
+	 * @group ms-required
+	 * @ticket 50321
+	 */
+	public function test_get_items_status_network_active() {
+		$this->create_test_plugin();
+		wp_set_current_user( self::$super_admin );
+
+		$request = new WP_REST_Request( 'GET', self::BASE );
+		$request->set_query_params( array( 'status' => 'network-active' ) );
+		$response = rest_do_request( $request );
+		$this->assertCount( 0, wp_list_filter( $response->get_data(), array( 'plugin' => self::PLUGIN ) ) );
+
+		activate_plugin( self::PLUGIN_FILE, '', true );
+		$request = new WP_REST_Request( 'GET', self::BASE );
+		$request->set_query_params( array( 'status' => 'network-active' ) );
+		$response = rest_do_request( $request );
+		$this->assertCount( 1, wp_list_filter( $response->get_data(), array( 'plugin' => self::PLUGIN ) ) );
+	}
+
+	/**
+	 * @ticket 50321
+	 */
+	public function test_get_items_logged_out() {
+		$response = rest_do_request( self::BASE );
+		$this->assertSame( 401, $response->get_status() );
+	}
+
+	/**
+	 * @ticket 50321
+	 */
+	public function test_get_items_insufficient_permissions() {
+		wp_set_current_user( self::$subscriber_id );
+		$response = rest_do_request( self::BASE );
+		$this->assertSame( 403, $response->get_status() );
+	}
+
+	/**
+	 * @group ms-required
+	 * @ticket 50321
+	 */
+	public function test_cannot_get_items_if_plugins_menu_not_available() {
+		$this->create_test_plugin();
+		wp_set_current_user( self::$admin );
+
+		$request  = new WP_REST_Request( 'GET', self::BASE );
+		$response = rest_do_request( $request );
+
+		$this->assertErrorResponse( 'rest_cannot_view_plugins', $response->as_error(), 403 );
+	}
+
+	/**
+	 * @group ms-required
+	 * @ticket 50321
+	 */
+	public function test_get_items_if_plugins_menu_available() {
+		$this->create_test_plugin();
+		$this->enable_plugins_menu_item();
+		wp_set_current_user( self::$admin );
+
+		$response = rest_do_request( self::BASE );
+		$this->assertSame( 200, $response->get_status() );
+	}
+
+	/**
+	 * @group ms-required
+	 * @ticket 50321
+	 */
+	public function test_get_items_excludes_network_only_plugin_if_not_active() {
+		$this->create_test_plugin( true );
+		$this->enable_plugins_menu_item();
+		wp_set_current_user( self::$admin );
+
+		$response = rest_do_request( self::BASE );
+		$this->assertSame( 200, $response->get_status() );
+
+		$items = wp_list_filter( $response->get_data(), array( 'plugin' => self::PLUGIN ) );
+		$this->assertCount( 0, $items );
+	}
+
+	/**
+	 * @group ms-excluded
+	 * @ticket 50321
+	 */
+	public function test_get_items_does_not_exclude_network_only_plugin_if_not_active_on_single_site() {
+		$this->create_test_plugin( true );
+		wp_set_current_user( self::$admin );
+
+		$response = rest_do_request( self::BASE );
+		$this->assertSame( 200, $response->get_status() );
+
+		$items = wp_list_filter( $response->get_data(), array( 'plugin' => self::PLUGIN ) );
+		$this->assertCount( 1, $items );
+		$this->check_get_plugin_data( array_shift( $items ), true );
+	}
+
+	/**
+	 * @group ms-required
+	 * @ticket 50321
+	 */
+	public function test_get_items_does_not_exclude_network_only_plugin_if_not_active_but_has_network_caps() {
+		$this->create_test_plugin( true );
+		$this->enable_plugins_menu_item();
+		wp_set_current_user( self::$super_admin );
+
+		$response = rest_do_request( self::BASE );
+		$this->assertSame( 200, $response->get_status() );
+
+		$items = wp_list_filter( $response->get_data(), array( 'plugin' => self::PLUGIN ) );
+		$this->assertCount( 1, $items );
+		$this->check_get_plugin_data( array_shift( $items ), true );
+	}
+
+	/**
+	 * @ticket 50321
+	 */
+	public function test_get_item() {
+		$this->create_test_plugin();
+		wp_set_current_user( self::$super_admin );
+
+		$response = rest_do_request( self::BASE . '/' . self::PLUGIN );
+		$this->assertSame( 200, $response->get_status() );
+		$this->check_get_plugin_data( $response->get_data() );
+	}
+
+	/**
+	 * @ticket 50321
+	 */
+	public function test_get_item_logged_out() {
+		$response = rest_do_request( self::BASE . '/' . self::PLUGIN );
+		$this->assertSame( 401, $response->get_status() );
+	}
+
+	/**
+	 * @ticket 50321
+	 */
+	public function test_get_item_insufficient_permissions() {
+		wp_set_current_user( self::$subscriber_id );
+		$response = rest_do_request( self::BASE . '/' . self::PLUGIN );
+		$this->assertSame( 403, $response->get_status() );
+	}
+
+	/**
+	 * @group ms-required
+	 * @ticket 50321
+	 */
+	public function test_cannot_get_item_if_plugins_menu_not_available() {
+		$this->create_test_plugin();
+		wp_set_current_user( self::$admin );
+
+		$request  = new WP_REST_Request( 'GET', self::BASE . '/' . self::PLUGIN );
+		$response = rest_do_request( $request );
+
+		$this->assertErrorResponse( 'rest_cannot_view_plugin', $response->as_error(), 403 );
+	}
+
+	/**
+	 * @group ms-required
+	 * @ticket 50321
+	 */
+	public function test_get_item_if_plugins_menu_available() {
+		$this->create_test_plugin();
+		$this->enable_plugins_menu_item();
+		wp_set_current_user( self::$admin );
+
+		$response = rest_do_request( self::BASE . '/' . self::PLUGIN );
+		$this->assertSame( 200, $response->get_status() );
+	}
+
+	/**
+	 * @ticket 50321
+	 */
+	public function test_get_item_invalid_plugin() {
+		wp_set_current_user( self::$super_admin );
+		$response = rest_do_request( self::BASE . '/' . self::PLUGIN );
+		$this->assertSame( 404, $response->get_status() );
+	}
+
+	/**
+	 * @ticket 50321
+	 */
+	public function test_create_item() {
+		if ( isset( get_plugins()['link-manager/link-manager.php'] ) ) {
+			delete_plugins( array( 'link-manager/link-manager.php' ) );
+		}
+
+		wp_set_current_user( self::$super_admin );
+		$this->setup_plugin_download();
+
+		$request = new WP_REST_Request( 'POST', self::BASE );
+		$request->set_body_params( array( 'slug' => 'link-manager' ) );
+
+		$response = rest_do_request( $request );
+		$this->assertNotWPError( $response->as_error() );
+		$this->assertSame( 201, $response->get_status() );
+		$this->assertSame( 'Link Manager', $response->get_data()['name'] );
+	}
+
+	/**
+	 * @ticket 50321
+	 */
+	public function test_create_item_and_activate() {
+		if ( isset( get_plugins()['link-manager/link-manager.php'] ) ) {
+			delete_plugins( array( 'link-manager/link-manager.php' ) );
+		}
+
+		wp_set_current_user( self::$super_admin );
+		$this->setup_plugin_download();
+
+		$request = new WP_REST_Request( 'POST', self::BASE );
+		$request->set_body_params(
+			array(
+				'slug'   => 'link-manager',
+				'status' => 'active',
+			)
+		);
+
+		$response = rest_do_request( $request );
+		$this->assertNotWPError( $response->as_error() );
+		$this->assertSame( 201, $response->get_status() );
+		$this->assertSame( 'Link Manager', $response->get_data()['name'] );
+		$this->assertTrue( is_plugin_active( 'link-manager/link-manager.php' ) );
+	}
+
+	/**
+	 * @ticket 50321
+	 */
+	public function test_create_item_and_activate_errors_if_no_permission_to_activate_plugin() {
+		if ( isset( get_plugins()['link-manager/link-manager.php'] ) ) {
+			delete_plugins( array( 'link-manager/link-manager.php' ) );
+		}
+
+		wp_set_current_user( self::$super_admin );
+		$this->setup_plugin_download();
+		$this->disable_activate_permission( 'link-manager/link-manager.php' );
+
+		$request = new WP_REST_Request( 'POST', self::BASE );
+		$request->set_body_params(
+			array(
+				'slug'   => 'link-manager',
+				'status' => 'active',
+			)
+		);
+
+		$response = rest_do_request( $request );
+		$this->assertErrorResponse( 'rest_cannot_activate_plugin', $response );
+		$this->assertFalse( is_plugin_active( 'link-manager/link-manager.php' ) );
+	}
+
+	/**
+	 * @group ms-excluded
+	 * @ticket 50321
+	 */
+	public function test_create_item_and_network_activate_rejected_if_not_multisite() {
+		if ( isset( get_plugins()['link-manager/link-manager.php'] ) ) {
+			delete_plugins( array( 'link-manager/link-manager.php' ) );
+		}
+
+		wp_set_current_user( self::$super_admin );
+
+		$request = new WP_REST_Request( 'POST', self::BASE );
+		$request->set_body_params(
+			array(
+				'slug'   => 'link-manager',
+				'status' => 'network-active',
+			)
+		);
+
+		$response = rest_do_request( $request );
+		$this->assertErrorResponse( 'rest_invalid_param', $response );
+	}
+
+	/**
+	 * @group ms-required
+	 * @ticket 50321
+	 */
+	public function test_create_item_and_network_activate() {
+		if ( isset( get_plugins()['link-manager/link-manager.php'] ) ) {
+			delete_plugins( array( 'link-manager/link-manager.php' ) );
+		}
+
+		wp_set_current_user( self::$super_admin );
+
+		$request = new WP_REST_Request( 'POST', self::BASE );
+		$request->set_body_params(
+			array(
+				'slug'   => 'link-manager',
+				'status' => 'network-active',
+			)
+		);
+
+		$response = rest_do_request( $request );
+		$this->assertNotWPError( $response->as_error() );
+		$this->assertSame( 201, $response->get_status() );
+		$this->assertSame( 'Link Manager', $response->get_data()['name'] );
+		$this->assertTrue( is_plugin_active_for_network( 'link-manager/link-manager.php' ) );
+	}
+
+	/**
+	 * @ticket 50321
+	 */
+	public function test_create_item_logged_out() {
+		$request = new WP_REST_Request( 'POST', self::BASE );
+		$request->set_body_params( array( 'slug' => 'link-manager' ) );
+
+		$response = rest_do_request( $request );
+		$this->assertSame( 401, $response->get_status() );
+	}
+
+	/**
+	 * @ticket 50321
+	 */
+	public function test_create_item_insufficient_permissions() {
+		wp_set_current_user( self::$subscriber_id );
+		$request = new WP_REST_Request( 'POST', self::BASE );
+		$request->set_body_params( array( 'slug' => 'link-manager' ) );
+
+		$response = rest_do_request( $request );
+		$this->assertSame( 403, $response->get_status() );
+	}
+
+	/**
+	 * @group ms-required
+	 * @ticket 50321
+	 */
+	public function test_cannot_create_item_if_not_super_admin() {
+		$this->create_test_plugin();
+		wp_set_current_user( self::$admin );
+
+		$request = new WP_REST_Request( 'POST', self::BASE );
+		$request->set_body_params( array( 'slug' => 'link-manager' ) );
+		$response = rest_do_request( $request );
+
+		$this->assertErrorResponse( 'rest_cannot_install_plugin', $response->as_error(), 403 );
+	}
+
+	/**
+	 * @ticket 50321
+	 */
+	public function test_create_item_wdotorg_unreachable() {
+		wp_set_current_user( self::$super_admin );
+
+		$request = new WP_REST_Request( 'POST', self::BASE );
+		$request->set_body_params( array( 'slug' => 'foo' ) );
+
+		$this->prevent_requests_to_host( 'api.wordpress.org' );
+
+		$this->expectException( 'PHPUnit_Framework_Error_Warning' );
+		$response = rest_do_request( $request );
+		$this->assertErrorResponse( 'plugins_api_failed', $response, 500 );
+	}
+
+	/**
+	 * @ticket 50321
+	 */
+	public function test_create_item_unknown_plugin() {
+		wp_set_current_user( self::$super_admin );
+
+		// This will hit the live API.
+		$request = new WP_REST_Request( 'POST', self::BASE );
+		$request->set_body_params( array( 'slug' => 'alex-says-this-block-definitely-doesnt-exist' ) );
+		$response = rest_do_request( $request );
+
+		// Is this an appropriate status?
+		$this->assertErrorResponse( 'plugins_api_failed', $response, 404 );
+	}
+
+	/**
+	 * @ticket 50321
+	 */
+	public function test_update_item() {
+		$this->create_test_plugin();
+		wp_set_current_user( self::$super_admin );
+
+		$request  = new WP_REST_Request( 'PUT', self::BASE . '/' . self::PLUGIN );
+		$response = rest_do_request( $request );
+
+		$this->assertSame( 200, $response->get_status() );
+	}
+
+	/**
+	 * @ticket 50321
+	 */
+	public function test_update_item_logged_out() {
+		$request  = new WP_REST_Request( 'PUT', self::BASE . '/' . self::PLUGIN );
+		$response = rest_do_request( $request );
+
+		$this->assertSame( 401, $response->get_status() );
+	}
+
+	/**
+	 * @ticket 50321
+	 */
+	public function test_update_item_insufficient_permissions() {
+		wp_set_current_user( self::$subscriber_id );
+
+		$request  = new WP_REST_Request( 'PUT', self::BASE . '/' . self::PLUGIN );
+		$response = rest_do_request( $request );
+
+		$this->assertSame( 403, $response->get_status() );
+	}
+
+	/**
+	 * @group ms-required
+	 * @ticket 50321
+	 */
+	public function test_cannot_update_item_if_plugins_menu_not_available() {
+		$this->create_test_plugin();
+		wp_set_current_user( self::$admin );
+
+		$request  = new WP_REST_Request( 'PUT', self::BASE . '/' . self::PLUGIN );
+		$response = rest_do_request( $request );
+
+		$this->assertErrorResponse( 'rest_cannot_manage_plugins', $response->as_error(), 403 );
+	}
+
+	/**
+	 * @ticket 50321
+	 */
+	public function test_update_item_activate_plugin() {
+		$this->create_test_plugin();
+		wp_set_current_user( self::$super_admin );
+
+		$request = new WP_REST_Request( 'PUT', self::BASE . '/' . self::PLUGIN );
+		$request->set_body_params( array( 'status' => 'active' ) );
+		$response = rest_do_request( $request );
+
+		$this->assertSame( 200, $response->get_status() );
+		$this->assertTrue( is_plugin_active( self::PLUGIN_FILE ) );
+	}
+
+	/**
+	 * @ticket 50321
+	 */
+	public function test_update_item_activate_plugin_fails_if_no_activate_cap() {
+		$this->create_test_plugin();
+		wp_set_current_user( self::$super_admin );
+		$this->disable_activate_permission( self::PLUGIN_FILE );
+
+		$request = new WP_REST_Request( 'PUT', self::BASE . '/' . self::PLUGIN );
+		$request->set_body_params( array( 'status' => 'active' ) );
+		$response = rest_do_request( $request );
+
+		$this->assertErrorResponse( 'rest_cannot_activate_plugin', $response, 403 );
+	}
+
+	/**
+	 * @group ms-excluded
+	 * @ticket 50321
+	 */
+	public function test_update_item_network_activate_plugin_rejected_if_not_multisite() {
+		$this->create_test_plugin();
+		wp_set_current_user( self::$super_admin );
+
+		$request = new WP_REST_Request( 'PUT', self::BASE . '/' . self::PLUGIN );
+		$request->set_body_params( array( 'status' => 'network-active' ) );
+		$response = rest_do_request( $request );
+
+		$this->assertErrorResponse( 'rest_invalid_param', $response );
+	}
+
+	/**
+	 * @group ms-required
+	 * @ticket 50321
+	 */
+	public function test_update_item_network_activate_plugin() {
+		$this->create_test_plugin();
+		wp_set_current_user( self::$super_admin );
+
+		$request = new WP_REST_Request( 'PUT', self::BASE . '/' . self::PLUGIN );
+		$request->set_body_params( array( 'status' => 'network-active' ) );
+		$response = rest_do_request( $request );
+
+		$this->assertSame( 200, $response->get_status() );
+		$this->assertTrue( is_plugin_active_for_network( self::PLUGIN_FILE ) );
+	}
+
+	/**
+	 * @group ms-required
+	 * @ticket 50321
+	 */
+	public function test_update_item_network_activate_plugin_that_was_active_on_single_site() {
+		$this->create_test_plugin();
+		activate_plugin( self::PLUGIN_FILE );
+		wp_set_current_user( self::$super_admin );
+
+		$request = new WP_REST_Request( 'PUT', self::BASE . '/' . self::PLUGIN );
+		$request->set_body_params( array( 'status' => 'network-active' ) );
+		$response = rest_do_request( $request );
+
+		$this->assertSame( 200, $response->get_status() );
+		$this->assertTrue( is_plugin_active_for_network( self::PLUGIN_FILE ) );
+	}
+
+	/**
+	 * @group ms-required
+	 * @ticket 50321
+	 */
+	public function test_update_item_activate_network_only_plugin() {
+		$this->create_test_plugin( true );
+		wp_set_current_user( self::$super_admin );
+
+		$request = new WP_REST_Request( 'PUT', self::BASE . '/' . self::PLUGIN );
+		$request->set_body_params( array( 'status' => 'active' ) );
+		$response = rest_do_request( $request );
+
+		$this->assertErrorResponse( 'rest_network_only_plugin', $response, 400 );
+	}
+
+	/**
+	 * @group ms-required
+	 * @ticket 50321
+	 */
+	public function test_update_item_network_activate_network_only_plugin() {
+		$this->create_test_plugin( true );
+		wp_set_current_user( self::$super_admin );
+
+		$request = new WP_REST_Request( 'PUT', self::BASE . '/' . self::PLUGIN );
+		$request->set_body_params( array( 'status' => 'network-active' ) );
+		$response = rest_do_request( $request );
+
+		$this->assertSame( 200, $response->get_status() );
+		$this->assertTrue( is_plugin_active_for_network( self::PLUGIN_FILE ) );
+	}
+
+	/**
+	 * @group ms-excluded
+	 * @ticket 50321
+	 */
+	public function test_update_item_activate_network_only_plugin_on_non_multisite() {
+		$this->create_test_plugin( true );
+		wp_set_current_user( self::$super_admin );
+
+		$request = new WP_REST_Request( 'PUT', self::BASE . '/' . self::PLUGIN );
+		$request->set_body_params( array( 'status' => 'active' ) );
+		$response = rest_do_request( $request );
+
+		$this->assertSame( 200, $response->get_status() );
+		$this->assertTrue( is_plugin_active( self::PLUGIN_FILE ) );
+	}
+
+	/**
+	 * @group ms-required
+	 * @ticket 50321
+	 */
+	public function test_update_item_activate_plugin_for_site_if_menu_item_available() {
+		$this->create_test_plugin();
+		$this->enable_plugins_menu_item();
+		wp_set_current_user( self::$admin );
+
+		$request = new WP_REST_Request( 'PUT', self::BASE . '/' . self::PLUGIN );
+		$request->set_body_params( array( 'status' => 'active' ) );
+		$response = rest_do_request( $request );
+
+		$this->assertNotWPError( $response->as_error() );
+		$this->assertSame( 200, $response->get_status() );
+		$this->assertTrue( is_plugin_active( self::PLUGIN_FILE ) );
+	}
+
+	/**
+	 * @group ms-required
+	 * @ticket 50321
+	 */
+	public function test_update_item_network_activate_plugin_for_site_if_menu_item_available() {
+		$this->create_test_plugin();
+		$this->enable_plugins_menu_item();
+		wp_set_current_user( self::$admin );
+
+		$request = new WP_REST_Request( 'PUT', self::BASE . '/' . self::PLUGIN );
+		$request->set_body_params( array( 'status' => 'network-active' ) );
+		$response = rest_do_request( $request );
+
+		$this->assertErrorResponse( 'rest_cannot_manage_network_plugins', $response, 403 );
+	}
+
+	/**
+	 * @ticket 50321
+	 */
+	public function test_update_item_deactivate_plugin() {
+		$this->create_test_plugin();
+		activate_plugin( self::PLUGIN_FILE );
+		wp_set_current_user( self::$super_admin );
+
+		$request = new WP_REST_Request( 'PUT', self::BASE . '/' . self::PLUGIN );
+		$request->set_body_params( array( 'status' => 'inactive' ) );
+		$response = rest_do_request( $request );
+
+		$this->assertSame( 200, $response->get_status() );
+		$this->assertTrue( is_plugin_inactive( self::PLUGIN_FILE ) );
+	}
+
+	/**
+	 * @ticket 50321
+	 */
+	public function test_update_item_deactivate_plugin_fails_if_no_deactivate_cap() {
+		$this->create_test_plugin();
+		activate_plugin( self::PLUGIN_FILE );
+		wp_set_current_user( self::$super_admin );
+		$this->disable_deactivate_permission( self::PLUGIN_FILE );
+
+		$request = new WP_REST_Request( 'PUT', self::BASE . '/' . self::PLUGIN );
+		$request->set_body_params( array( 'status' => 'inactive' ) );
+		$response = rest_do_request( $request );
+
+		$this->assertErrorResponse( 'rest_cannot_deactivate_plugin', $response, 403 );
+	}
+
+	/**
+	 * @group ms-required
+	 * @ticket 50321
+	 */
+	public function test_update_item_deactivate_network_active_plugin() {
+		$this->create_test_plugin();
+		activate_plugin( self::PLUGIN_FILE, '', true );
+		wp_set_current_user( self::$super_admin );
+
+		$request = new WP_REST_Request( 'PUT', self::BASE . '/' . self::PLUGIN );
+		$request->set_body_params( array( 'status' => 'inactive' ) );
+		$response = rest_do_request( $request );
+
+		$this->assertSame( 200, $response->get_status() );
+		$this->assertTrue( is_plugin_inactive( self::PLUGIN_FILE ) );
+	}
+
+	/**
+	 * @group ms-required
+	 * @ticket 50321
+	 */
+	public function test_update_item_deactivate_network_active_plugin_if_not_super_admin() {
+		$this->enable_plugins_menu_item();
+		$this->create_test_plugin();
+		activate_plugin( self::PLUGIN_FILE, '', true );
+		wp_set_current_user( self::$admin );
+
+		$request = new WP_REST_Request( 'PUT', self::BASE . '/' . self::PLUGIN );
+		$request->set_body_params( array( 'status' => 'inactive' ) );
+		$response = rest_do_request( $request );
+
+		$this->assertErrorResponse( 'rest_cannot_manage_network_plugins', $response, 403 );
+	}
+
+	/**
+	 * @ticket 50321
+	 */
+	public function test_delete_item() {
+		$this->create_test_plugin();
+		wp_set_current_user( self::$super_admin );
+
+		$request  = new WP_REST_Request( 'DELETE', self::BASE . '/' . self::PLUGIN );
+		$response = rest_do_request( $request );
+
+		$this->assertNotWPError( $response->as_error() );
+		$this->assertSame( 200, $response->get_status() );
+		$this->assertTrue( $response->get_data()['deleted'] );
+		$this->assertSame( self::PLUGIN, $response->get_data()['previous']['plugin'] );
+		$this->assertFileNotExists( WP_PLUGIN_DIR . '/' . self::PLUGIN_FILE );
+	}
+
+	/**
+	 * @ticket 50321
+	 */
+	public function test_delete_item_logged_out() {
+		$request  = new WP_REST_Request( 'DELETE', self::BASE . '/' . self::PLUGIN );
+		$response = rest_do_request( $request );
+
+		$this->assertSame( 401, $response->get_status() );
+	}
+
+	/**
+	 * @ticket 50321
+	 */
+	public function test_delete_item_insufficient_permissions() {
+		wp_set_current_user( self::$subscriber_id );
+
+		$request  = new WP_REST_Request( 'DELETE', self::BASE . '/' . self::PLUGIN );
+		$response = rest_do_request( $request );
+
+		$this->assertSame( 403, $response->get_status() );
+	}
+
+	/**
+	 * @group ms-required
+	 * @ticket 50321
+	 */
+	public function test_cannot_delete_item_if_plugins_menu_not_available() {
+		wp_set_current_user( self::$admin );
+
+		$request  = new WP_REST_Request( 'DELETE', self::BASE . '/' . self::PLUGIN );
+		$response = rest_do_request( $request );
+
+		$this->assertErrorResponse( 'rest_cannot_manage_plugins', $response->as_error(), 403 );
+	}
+
+	/**
+	 * @group ms-required
+	 * @ticket 50321
+	 */
+	public function test_cannot_delete_item_if_plugins_menu_is_available() {
+		wp_set_current_user( self::$admin );
+		$this->enable_plugins_menu_item();
+
+		$request  = new WP_REST_Request( 'DELETE', self::BASE . '/' . self::PLUGIN );
+		$response = rest_do_request( $request );
+
+		$this->assertErrorResponse( 'rest_cannot_manage_plugins', $response->as_error(), 403 );
+	}
+
+	/**
+	 * @ticket 50321
+	 */
+	public function test_delete_item_active_plugin() {
+		$this->create_test_plugin();
+		activate_plugin( self::PLUGIN_FILE );
+		wp_set_current_user( self::$super_admin );
+
+		$request  = new WP_REST_Request( 'DELETE', self::BASE . '/' . self::PLUGIN );
+		$response = rest_do_request( $request );
+
+		$this->assertErrorResponse( 'rest_cannot_delete_active_plugin', $response );
+	}
+
+	/**
+	 * @ticket 50321
+	 */
+	public function test_prepare_item() {
+		$this->create_test_plugin();
+
+		$item          = get_plugins()[ self::PLUGIN_FILE ];
+		$item['_file'] = self::PLUGIN_FILE;
+
+		$endpoint = new WP_REST_Plugins_Controller();
+		$response = $endpoint->prepare_item_for_response( $item, new WP_REST_Request( 'GET', self::BASE . '/' . self::PLUGIN ) );
+
+		$this->check_get_plugin_data( $response->get_data() );
+		$links = $response->get_links();
+		$this->assertArrayHasKey( 'self', $links );
+		$this->assertSame( rest_url( self::BASE . '/' . self::PLUGIN ), $links['self'][0]['href'] );
+	}
+
+	/**
+	 * @group ms-required
+	 * @ticket 50321
+	 */
+	public function test_prepare_item_network_active() {
+		$this->create_test_plugin();
+		activate_plugin( self::PLUGIN_FILE, '', true );
+
+		$item          = get_plugins()[ self::PLUGIN_FILE ];
+		$item['_file'] = self::PLUGIN_FILE;
+
+		$endpoint = new WP_REST_Plugins_Controller();
+		$response = $endpoint->prepare_item_for_response( $item, new WP_REST_Request( 'GET', self::BASE . '/' . self::PLUGIN ) );
+
+		$this->assertSame( 'network-active', $response->get_data()['status'] );
+	}
+
+	/**
+	 * @group ms-required
+	 * @ticket 50321
+	 */
+	public function test_prepare_item_network_only() {
+		$this->create_test_plugin( true );
+
+		$item          = get_plugins()[ self::PLUGIN_FILE ];
+		$item['_file'] = self::PLUGIN_FILE;
+
+		$endpoint = new WP_REST_Plugins_Controller();
+		$response = $endpoint->prepare_item_for_response( $item, new WP_REST_Request( 'GET', self::BASE . '/' . self::PLUGIN ) );
+
+		$this->check_get_plugin_data( $response->get_data(), true );
+	}
+
+	/**
+	 * @ticket 50321
+	 */
+	public function test_get_item_schema() {
+		$request    = new WP_REST_Request( 'OPTIONS', self::BASE );
+		$response   = rest_get_server()->dispatch( $request );
+		$data       = $response->get_data();
+		$properties = $data['schema']['properties'];
+
+		$this->assertCount( 12, $properties );
+		$this->assertArrayHasKey( 'plugin', $properties );
+		$this->assertArrayHasKey( 'status', $properties );
+		$this->assertArrayHasKey( 'name', $properties );
+		$this->assertArrayHasKey( 'plugin_uri', $properties );
+		$this->assertArrayHasKey( 'description', $properties );
+		$this->assertArrayHasKey( 'author', $properties );
+		$this->assertArrayHasKey( 'author_uri', $properties );
+		$this->assertArrayHasKey( 'version', $properties );
+		$this->assertArrayHasKey( 'network_only', $properties );
+		$this->assertArrayHasKey( 'requires_wp', $properties );
+		$this->assertArrayHasKey( 'requires_php', $properties );
+		$this->assertArrayHasKey( 'textdomain', $properties );
+	}
+
+	/**
+	 * Checks the response data.
+	 *
+	 * @since 5.5.0
+	 *
+	 * @param array $data         Prepared plugin data.
+	 * @param bool  $network_only Whether the plugin is network only.
+	 */
+	protected function check_get_plugin_data( $data, $network_only = false ) {
+		$this->assertSame( 'test-plugin/test-plugin', $data['plugin'] );
+		$this->assertSame( '1.5.4', $data['version'] );
+		$this->assertSame( 'inactive', $data['status'] );
+		$this->assertSame( 'Test Plugin', $data['name'] );
+		$this->assertSame( 'https://wordpress.org/plugins/test-plugin/', $data['plugin_uri'] );
+		$this->assertSame( 'WordPress.org', $data['author'] );
+		$this->assertSame( 'https://wordpress.org/', $data['author_uri'] );
+		$this->assertSame( "My 'Cool' Plugin", $data['description']['raw'] );
+		$this->assertSame( 'My &#8216;Cool&#8217; Plugin <cite>By <a href="https://wordpress.org/">WordPress.org</a>.</cite>', $data['description']['rendered'] );
+		$this->assertSame( $network_only, $data['network_only'] );
+		$this->assertSame( '5.6.0', $data['requires_php'] );
+		$this->assertSame( '5.4.0', $data['requires_wp'] );
+		$this->assertSame( 'test-plugin', $data['textdomain'] );
+	}
+
+	/**
+	 * Sets up the plugin download to come locally instead of downloading it from .org
+	 *
+	 * @since 5.5.0
+	 */
+	protected function setup_plugin_download() {
+		copy( DIR_TESTDATA . '/plugins/link-manager.zip', DIR_TESTDATA . '/link-manager.zip' );
+		add_filter(
+			'upgrader_pre_download',
+			static function ( $reply, $package, $upgrader ) {
+				if ( $upgrader instanceof Plugin_Upgrader ) {
+					$reply = DIR_TESTDATA . '/link-manager.zip';
+				}
+
+				return $reply;
+			},
+			10,
+			3
+		);
+	}
+
+	/**
+	 * Disables permission for activating a specific plugin.
+	 *
+	 * @since 5.5.0
+	 *
+	 * @param string $plugin The plugin file to disable.
+	 */
+	protected function disable_activate_permission( $plugin ) {
+		add_filter(
+			'map_meta_cap',
+			static function ( $caps, $cap, $user, $args ) use ( $plugin ) {
+				if ( 'activate_plugin' === $cap && $plugin === $args[0] ) {
+					$caps = array( 'do_not_allow' );
+				}
+
+				return $caps;
+			},
+			10,
+			4
+		);
+	}
+
+	/**
+	 * Disables permission for deactivating a specific plugin.
+	 *
+	 * @since 5.5.0
+	 *
+	 * @param string $plugin The plugin file to disable.
+	 */
+	protected function disable_deactivate_permission( $plugin ) {
+		add_filter(
+			'map_meta_cap',
+			static function ( $caps, $cap, $user, $args ) use ( $plugin ) {
+				if ( 'deactivate_plugin' === $cap && $plugin === $args[0] ) {
+					$caps = array( 'do_not_allow' );
+				}
+
+				return $caps;
+			},
+			10,
+			4
+		);
+	}
+
+	/**
+	 * Enables the "plugins" as an available menu item.
+	 *
+	 * @since 5.5.0
+	 */
+	protected function enable_plugins_menu_item() {
+		$menu_perms            = get_site_option( 'menu_items', array() );
+		$menu_perms['plugins'] = true;
+		update_site_option( 'menu_items', $menu_perms );
+	}
+
+	/**
+	 * Creates a test plugin.
+	 *
+	 * @since 5.5.0
+	 *
+	 * @param bool $network_only Whether to make this a network only plugin.
+	 */
+	private function create_test_plugin( $network_only = false ) {
+		$network = $network_only ? PHP_EOL . ' * Network: true' . PHP_EOL : '';
+
+		$php = <<<PHP
+<?php
+/*
+ * Plugin Name: Test Plugin
+ * Plugin URI: https://wordpress.org/plugins/test-plugin/
+ * Description: My 'Cool' Plugin
+ * Version: 1.5.4
+ * Author: WordPress.org
+ * Author URI: https://wordpress.org/
+ * Text Domain: test-plugin
+ * Requires PHP: 5.6.0
+ * Requires at least: 5.4.0{$network}
+ */
+PHP;
+		wp_mkdir_p( WP_PLUGIN_DIR . '/test-plugin' );
+		file_put_contents( WP_PLUGIN_DIR . '/test-plugin/test-plugin.php', $php );
+	}
+
+	/**
+	 * Simulate a network failure on outbound http requests to a given hostname.
+	 *
+	 * @since 5.5.0
+	 *
+	 * @param string $blocked_host The host to block connections to.
+	 */
+	private function prevent_requests_to_host( $blocked_host = 'api.wordpress.org' ) {
+		add_filter(
+			'pre_http_request',
+			static function ( $return, $args, $url ) use ( $blocked_host ) {
+				if ( @parse_url( $url, PHP_URL_HOST ) === $blocked_host ) {
+					return new WP_Error( 'plugins_api_failed', "An expected error occurred connecting to $blocked_host because of a unit test", "cURL error 7: Failed to connect to $blocked_host port 80: Connection refused" );
+
+				}
+
+				return $return;
+			},
+			10,
+			3
+		);
+	}
+}
diff --git a/tests/rest-api/rest-post-meta-fields.php b/tests/rest-api/rest-post-meta-fields.php
index 02f70545c5..dd17c54a8a 100644
--- a/tests/rest-api/rest-post-meta-fields.php
+++ b/tests/rest-api/rest-post-meta-fields.php
@@ -234,6 +234,17 @@ class WP_Test_REST_Post_Meta_Fields extends WP_Test_REST_TestCase {
 			)
 		);
 
+		register_post_meta(
+			'post',
+			'with_default',
+			array(
+				'type'         => 'string',
+				'single'       => true,
+				'show_in_rest' => true,
+				'default'      => 'Goodnight Moon',
+			)
+		);
+
 		/** @var WP_REST_Server $wp_rest_server */
 		global $wp_rest_server;
 		$wp_rest_server = new Spy_REST_Server;
@@ -256,14 +267,14 @@ class WP_Test_REST_Post_Meta_Fields extends WP_Test_REST_TestCase {
 		$request  = new WP_REST_Request( 'GET', sprintf( '/wp/v2/posts/%d', self::$post_id ) );
 		$response = rest_get_server()->dispatch( $request );
 
-		$this->assertEquals( 200, $response->get_status() );
+		$this->assertSame( 200, $response->get_status() );
 
 		$data = $response->get_data();
 		$this->assertArrayHasKey( 'meta', $data );
 
 		$meta = (array) $data['meta'];
 		$this->assertArrayHasKey( 'test_single', $meta );
-		$this->assertEquals( 'testvalue', $meta['test_single'] );
+		$this->assertSame( 'testvalue', $meta['test_single'] );
 	}
 
 	/**
@@ -274,7 +285,7 @@ class WP_Test_REST_Post_Meta_Fields extends WP_Test_REST_TestCase {
 		$request = new WP_REST_Request( 'GET', sprintf( '/wp/v2/posts/%d', self::$post_id ) );
 
 		$response = rest_get_server()->dispatch( $request );
-		$this->assertEquals( 200, $response->get_status() );
+		$this->assertSame( 200, $response->get_status() );
 
 		$data = $response->get_data();
 		$meta = (array) $data['meta'];
@@ -286,7 +297,7 @@ class WP_Test_REST_Post_Meta_Fields extends WP_Test_REST_TestCase {
 		add_post_meta( self::$post_id, 'test_multi', 'value2' );
 
 		$response = rest_get_server()->dispatch( $request );
-		$this->assertEquals( 200, $response->get_status() );
+		$this->assertSame( 200, $response->get_status() );
 		$data = $response->get_data();
 		$meta = (array) $data['meta'];
 		$this->assertContains( 'value1', $meta['test_multi'] );
@@ -301,7 +312,7 @@ class WP_Test_REST_Post_Meta_Fields extends WP_Test_REST_TestCase {
 		$request = new WP_REST_Request( 'GET', sprintf( '/wp/v2/posts/%d', self::$post_id ) );
 
 		$response = rest_get_server()->dispatch( $request );
-		$this->assertEquals( 200, $response->get_status() );
+		$this->assertSame( 200, $response->get_status() );
 
 		$data = $response->get_data();
 		$meta = (array) $data['meta'];
@@ -316,7 +327,7 @@ class WP_Test_REST_Post_Meta_Fields extends WP_Test_REST_TestCase {
 		$request = new WP_REST_Request( 'GET', sprintf( '/wp/v2/posts/%d', self::$post_id ) );
 
 		$response = rest_get_server()->dispatch( $request );
-		$this->assertEquals( 200, $response->get_status() );
+		$this->assertSame( 200, $response->get_status() );
 
 		$data = $response->get_data();
 		$meta = (array) $data['meta'];
@@ -331,7 +342,7 @@ class WP_Test_REST_Post_Meta_Fields extends WP_Test_REST_TestCase {
 		$request = new WP_REST_Request( 'GET', sprintf( '/wp/v2/posts/%d', self::$post_id ) );
 
 		$response = rest_get_server()->dispatch( $request );
-		$this->assertEquals( 200, $response->get_status() );
+		$this->assertSame( 200, $response->get_status() );
 
 		$data = $response->get_data();
 		$meta = (array) $data['meta'];
@@ -378,7 +389,7 @@ class WP_Test_REST_Post_Meta_Fields extends WP_Test_REST_TestCase {
 
 		$request  = new WP_REST_Request( 'GET', sprintf( '/wp/v2/posts/%d', self::$post_id ) );
 		$response = rest_get_server()->dispatch( $request );
-		$this->assertEquals( 200, $response->get_status() );
+		$this->assertSame( 200, $response->get_status() );
 
 		$data = $response->get_data();
 		$meta = (array) $data['meta'];
@@ -393,7 +404,7 @@ class WP_Test_REST_Post_Meta_Fields extends WP_Test_REST_TestCase {
 
 		$this->assertArrayHasKey( 'test_bool', $meta );
 		$this->assertInternalType( 'boolean', $meta['test_bool'] );
-		$this->assertSame( true, $meta['test_bool'] );
+		$this->assertTrue( $meta['test_bool'] );
 	}
 
 	public function test_get_value_custom_name() {
@@ -402,14 +413,14 @@ class WP_Test_REST_Post_Meta_Fields extends WP_Test_REST_TestCase {
 		$request  = new WP_REST_Request( 'GET', sprintf( '/wp/v2/posts/%d', self::$post_id ) );
 		$response = rest_get_server()->dispatch( $request );
 
-		$this->assertEquals( 200, $response->get_status() );
+		$this->assertSame( 200, $response->get_status() );
 
 		$data = $response->get_data();
 		$this->assertArrayHasKey( 'meta', $data );
 
 		$meta = (array) $data['meta'];
 		$this->assertArrayHasKey( 'new_name', $meta );
-		$this->assertEquals( 'janet', $meta['new_name'] );
+		$this->assertSame( 'janet', $meta['new_name'] );
 	}
 
 	/**
@@ -431,17 +442,17 @@ class WP_Test_REST_Post_Meta_Fields extends WP_Test_REST_TestCase {
 		$request->set_body_params( $data );
 
 		$response = rest_get_server()->dispatch( $request );
-		$this->assertEquals( 200, $response->get_status() );
+		$this->assertSame( 200, $response->get_status() );
 
 		$meta = get_post_meta( self::$post_id, 'test_single', false );
 		$this->assertNotEmpty( $meta );
 		$this->assertCount( 1, $meta );
-		$this->assertEquals( 'test_value', $meta[0] );
+		$this->assertSame( 'test_value', $meta[0] );
 
 		$data = $response->get_data();
 		$meta = (array) $data['meta'];
 		$this->assertArrayHasKey( 'test_single', $meta );
-		$this->assertEquals( 'test_value', $meta['test_single'] );
+		$this->assertSame( 'test_value', $meta['test_single'] );
 	}
 
 	/**
@@ -450,7 +461,7 @@ class WP_Test_REST_Post_Meta_Fields extends WP_Test_REST_TestCase {
 	public function test_set_duplicate_single_value() {
 		// Start with an existing metakey and value.
 		$values = update_post_meta( self::$post_id, 'test_single', 'test_value' );
-		$this->assertEquals( 'test_value', get_post_meta( self::$post_id, 'test_single', true ) );
+		$this->assertSame( 'test_value', get_post_meta( self::$post_id, 'test_single', true ) );
 
 		$this->grant_write_permission();
 
@@ -463,16 +474,16 @@ class WP_Test_REST_Post_Meta_Fields extends WP_Test_REST_TestCase {
 		$request->set_body_params( $data );
 
 		$response = rest_get_server()->dispatch( $request );
-		$this->assertEquals( 200, $response->get_status() );
+		$this->assertSame( 200, $response->get_status() );
 
 		$meta = get_post_meta( self::$post_id, 'test_single', true );
 		$this->assertNotEmpty( $meta );
-		$this->assertEquals( 'test_value', $meta );
+		$this->assertSame( 'test_value', $meta );
 
 		$data = $response->get_data();
 		$meta = (array) $data['meta'];
 		$this->assertArrayHasKey( 'test_single', $meta );
-		$this->assertEquals( 'test_value', $meta['test_single'] );
+		$this->assertSame( 'test_value', $meta['test_single'] );
 	}
 
 	/**
@@ -581,12 +592,12 @@ class WP_Test_REST_Post_Meta_Fields extends WP_Test_REST_TestCase {
 		$request->set_body_params( $data );
 
 		$response = rest_get_server()->dispatch( $request );
-		$this->assertEquals( 200, $response->get_status() );
+		$this->assertSame( 200, $response->get_status() );
 
 		$meta = get_post_meta( self::$post_id, 'test_multi', false );
 		$this->assertNotEmpty( $meta );
 		$this->assertCount( 1, $meta );
-		$this->assertEquals( 'val1', $meta[0] );
+		$this->assertSame( 'val1', $meta[0] );
 
 		// Add another value.
 		$data = array(
@@ -597,7 +608,7 @@ class WP_Test_REST_Post_Meta_Fields extends WP_Test_REST_TestCase {
 		$request->set_body_params( $data );
 
 		$response = rest_get_server()->dispatch( $request );
-		$this->assertEquals( 200, $response->get_status() );
+		$this->assertSame( 200, $response->get_status() );
 
 		$meta = get_post_meta( self::$post_id, 'test_multi', false );
 		$this->assertNotEmpty( $meta );
@@ -625,7 +636,7 @@ class WP_Test_REST_Post_Meta_Fields extends WP_Test_REST_TestCase {
 		$request->set_body_params( $data );
 
 		$response = rest_get_server()->dispatch( $request );
-		$this->assertEquals( 200, $response->get_status() );
+		$this->assertSame( 200, $response->get_status() );
 
 		$meta = get_post_meta( self::$post_id, 'test_multi', false );
 		$this->assertNotEmpty( $meta );
@@ -732,7 +743,7 @@ class WP_Test_REST_Post_Meta_Fields extends WP_Test_REST_TestCase {
 
 		$response = rest_get_server()->dispatch( $request );
 		$data     = $response->get_data();
-		$this->assertEquals( 1, $data['meta']['my_meta_key'] );
+		$this->assertSame( 1, $data['meta']['my_meta_key'] );
 	}
 
 	public function test_set_value_csv() {
@@ -758,7 +769,7 @@ class WP_Test_REST_Post_Meta_Fields extends WP_Test_REST_TestCase {
 
 		$response = rest_get_server()->dispatch( $request );
 		$data     = $response->get_data();
-		$this->assertEquals( array( 1, 2, 3 ), $data['meta']['my_meta_key'] );
+		$this->assertSame( array( 1, 2, 3 ), $data['meta']['my_meta_key'] );
 	}
 
 	/**
@@ -830,7 +841,7 @@ class WP_Test_REST_Post_Meta_Fields extends WP_Test_REST_TestCase {
 		$request->set_body_params( $data );
 
 		$response = rest_get_server()->dispatch( $request );
-		$this->assertEquals( 200, $response->get_status() );
+		$this->assertSame( 200, $response->get_status() );
 
 		$meta = get_post_meta( self::$post_id, 'test_custom_schema', false );
 		$this->assertNotEmpty( $meta );
@@ -859,7 +870,7 @@ class WP_Test_REST_Post_Meta_Fields extends WP_Test_REST_TestCase {
 		$request->set_body_params( $data );
 
 		$response = rest_get_server()->dispatch( $request );
-		$this->assertEquals( 200, $response->get_status() );
+		$this->assertSame( 200, $response->get_status() );
 
 		$meta = get_post_meta( self::$post_id, 'test_custom_schema_multi', false );
 		$this->assertNotEmpty( $meta );
@@ -875,7 +886,7 @@ class WP_Test_REST_Post_Meta_Fields extends WP_Test_REST_TestCase {
 		$request->set_body_params( $data );
 
 		$response = rest_get_server()->dispatch( $request );
-		$this->assertEquals( 200, $response->get_status() );
+		$this->assertSame( 200, $response->get_status() );
 
 		$meta = get_post_meta( self::$post_id, 'test_custom_schema_multi', false );
 		$this->assertNotEmpty( $meta );
@@ -903,17 +914,17 @@ class WP_Test_REST_Post_Meta_Fields extends WP_Test_REST_TestCase {
 		$request->set_body_params( $data );
 
 		$response = rest_get_server()->dispatch( $request );
-		$this->assertEquals( 200, $response->get_status() );
+		$this->assertSame( 200, $response->get_status() );
 
 		$meta = get_post_meta( self::$post_id, 'test_custom_name', false );
 		$this->assertNotEmpty( $meta );
 		$this->assertCount( 1, $meta );
-		$this->assertEquals( 'janet', $meta[0] );
+		$this->assertSame( 'janet', $meta[0] );
 
 		$data = $response->get_data();
 		$meta = (array) $data['meta'];
 		$this->assertArrayHasKey( 'new_name', $meta );
-		$this->assertEquals( 'janet', $meta['new_name'] );
+		$this->assertSame( 'janet', $meta['new_name'] );
 	}
 
 	public function test_set_value_custom_name_multiple() {
@@ -932,12 +943,12 @@ class WP_Test_REST_Post_Meta_Fields extends WP_Test_REST_TestCase {
 		$request->set_body_params( $data );
 
 		$response = rest_get_server()->dispatch( $request );
-		$this->assertEquals( 200, $response->get_status() );
+		$this->assertSame( 200, $response->get_status() );
 
 		$meta = get_post_meta( self::$post_id, 'test_custom_name_multi', false );
 		$this->assertNotEmpty( $meta );
 		$this->assertCount( 1, $meta );
-		$this->assertEquals( 'janet', $meta[0] );
+		$this->assertSame( 'janet', $meta[0] );
 
 		// Add another value.
 		$data = array(
@@ -948,7 +959,7 @@ class WP_Test_REST_Post_Meta_Fields extends WP_Test_REST_TestCase {
 		$request->set_body_params( $data );
 
 		$response = rest_get_server()->dispatch( $request );
-		$this->assertEquals( 200, $response->get_status() );
+		$this->assertSame( 200, $response->get_status() );
 
 		$meta = get_post_meta( self::$post_id, 'test_custom_name_multi', false );
 		$this->assertNotEmpty( $meta );
@@ -980,11 +991,11 @@ class WP_Test_REST_Post_Meta_Fields extends WP_Test_REST_TestCase {
 
 		// The meta value should not have changed.
 		$current_value = get_post_meta( self::$post_id, 'test_single', true );
-		$this->assertEquals( 'So I tied an onion to my belt, which was the style at the time.', $current_value );
+		$this->assertSame( 'So I tied an onion to my belt, which was the style at the time.', $current_value );
 
 		// Ensure the post title update was not processed.
 		$post_updated = get_post( self::$post_id );
-		$this->assertEquals( $post_original->post_title, $post_updated->post_title );
+		$this->assertSame( $post_original->post_title, $post_updated->post_title );
 	}
 
 	/**
@@ -1009,17 +1020,17 @@ class WP_Test_REST_Post_Meta_Fields extends WP_Test_REST_TestCase {
 
 		// The meta value should not have changed.
 		$current_value = get_post_meta( self::$post_id, 'test_single', true );
-		$this->assertEquals( 'Now, to take the ferry cost a nickel, and in those days, nickels had pictures of bumblebees on them.', $current_value );
+		$this->assertSame( 'Now, to take the ferry cost a nickel, and in those days, nickels had pictures of bumblebees on them.', $current_value );
 
 		// Ensure the post content update was not processed.
 		$post_updated = get_post( self::$post_id );
-		$this->assertEquals( $post_original->post_content, $post_updated->post_content );
+		$this->assertSame( $post_original->post_content, $post_updated->post_content );
 	}
 
 	public function test_remove_multi_value_db_error() {
 		add_post_meta( self::$post_id, 'test_multi', 'val1' );
 		$values = get_post_meta( self::$post_id, 'test_multi', false );
-		$this->assertEquals( array( 'val1' ), $values );
+		$this->assertSame( array( 'val1' ), $values );
 
 		$this->grant_write_permission();
 
@@ -1050,7 +1061,7 @@ class WP_Test_REST_Post_Meta_Fields extends WP_Test_REST_TestCase {
 	public function test_delete_value() {
 		add_post_meta( self::$post_id, 'test_single', 'val1' );
 		$current = get_post_meta( self::$post_id, 'test_single', true );
-		$this->assertEquals( 'val1', $current );
+		$this->assertSame( 'val1', $current );
 
 		$this->grant_write_permission();
 
@@ -1063,7 +1074,7 @@ class WP_Test_REST_Post_Meta_Fields extends WP_Test_REST_TestCase {
 		$request->set_body_params( $data );
 
 		$response = rest_get_server()->dispatch( $request );
-		$this->assertEquals( 200, $response->get_status() );
+		$this->assertSame( 200, $response->get_status() );
 
 		$meta = get_post_meta( self::$post_id, 'test_single', false );
 		$this->assertEmpty( $meta );
@@ -1075,7 +1086,7 @@ class WP_Test_REST_Post_Meta_Fields extends WP_Test_REST_TestCase {
 	public function test_delete_value_blocked() {
 		add_post_meta( self::$post_id, 'test_bad_auth', 'val1' );
 		$current = get_post_meta( self::$post_id, 'test_bad_auth', true );
-		$this->assertEquals( 'val1', $current );
+		$this->assertSame( 'val1', $current );
 
 		$this->grant_write_permission();
 
@@ -1091,7 +1102,7 @@ class WP_Test_REST_Post_Meta_Fields extends WP_Test_REST_TestCase {
 		$this->assertErrorResponse( 'rest_cannot_delete', $response, 403 );
 
 		$meta = get_post_meta( self::$post_id, 'test_bad_auth', true );
-		$this->assertEquals( 'val1', $meta );
+		$this->assertSame( 'val1', $meta );
 	}
 
 	/**
@@ -1100,7 +1111,7 @@ class WP_Test_REST_Post_Meta_Fields extends WP_Test_REST_TestCase {
 	public function test_delete_value_db_error() {
 		add_post_meta( self::$post_id, 'test_single', 'val1' );
 		$current = get_post_meta( self::$post_id, 'test_single', true );
-		$this->assertEquals( 'val1', $current );
+		$this->assertSame( 'val1', $current );
 
 		$this->grant_write_permission();
 
@@ -1129,7 +1140,7 @@ class WP_Test_REST_Post_Meta_Fields extends WP_Test_REST_TestCase {
 	public function test_delete_value_custom_name() {
 		add_post_meta( self::$post_id, 'test_custom_name', 'janet' );
 		$current = get_post_meta( self::$post_id, 'test_custom_name', true );
-		$this->assertEquals( 'janet', $current );
+		$this->assertSame( 'janet', $current );
 
 		$this->grant_write_permission();
 
@@ -1142,7 +1153,7 @@ class WP_Test_REST_Post_Meta_Fields extends WP_Test_REST_TestCase {
 		$request->set_body_params( $data );
 
 		$response = rest_get_server()->dispatch( $request );
-		$this->assertEquals( 200, $response->get_status() );
+		$this->assertSame( 200, $response->get_status() );
 
 		$meta = get_post_meta( self::$post_id, 'test_custom_name', false );
 		$this->assertEmpty( $meta );
@@ -1159,15 +1170,15 @@ class WP_Test_REST_Post_Meta_Fields extends WP_Test_REST_TestCase {
 		$meta_schema = $schema['properties']['meta']['properties'];
 
 		$this->assertArrayHasKey( 'test_single', $meta_schema );
-		$this->assertEquals( 'string', $meta_schema['test_single']['type'] );
+		$this->assertSame( 'string', $meta_schema['test_single']['type'] );
 
 		$this->assertArrayHasKey( 'test_multi', $meta_schema );
-		$this->assertEquals( 'array', $meta_schema['test_multi']['type'] );
+		$this->assertSame( 'array', $meta_schema['test_multi']['type'] );
 		$this->assertArrayHasKey( 'items', $meta_schema['test_multi'] );
-		$this->assertEquals( 'string', $meta_schema['test_multi']['items']['type'] );
+		$this->assertSame( 'string', $meta_schema['test_multi']['items']['type'] );
 
 		$this->assertArrayHasKey( 'test_custom_schema', $meta_schema );
-		$this->assertEquals( 'number', $meta_schema['test_custom_schema']['type'] );
+		$this->assertSame( 'number', $meta_schema['test_custom_schema']['type'] );
 
 		$this->assertArrayNotHasKey( 'test_no_rest', $meta_schema );
 		$this->assertArrayNotHasKey( 'test_rest_disabled', $meta_schema );
@@ -1176,7 +1187,8 @@ class WP_Test_REST_Post_Meta_Fields extends WP_Test_REST_TestCase {
 	}
 
 	/**
-	 * @ticket       38323
+	 * @ticket 38323
+	 *
 	 * @dataProvider data_get_subtype_meta_value
 	 */
 	public function test_get_subtype_meta_value( $post_type, $meta_key, $single, $in_post_type ) {
@@ -1194,7 +1206,7 @@ class WP_Test_REST_Post_Meta_Fields extends WP_Test_REST_TestCase {
 		$request  = new WP_REST_Request( 'GET', sprintf( '/wp/v2/%s/%d', $endpoint, $post_id ) );
 		$response = rest_get_server()->dispatch( $request );
 
-		$this->assertEquals( 200, $response->get_status() );
+		$this->assertSame( 200, $response->get_status() );
 
 		$data = $response->get_data();
 
@@ -1208,7 +1220,7 @@ class WP_Test_REST_Post_Meta_Fields extends WP_Test_REST_TestCase {
 			}
 
 			$this->assertArrayHasKey( $meta_key, $data['meta'] );
-			$this->assertEquals( $expected_value, $data['meta'][ $meta_key ] );
+			$this->assertSame( $expected_value, $data['meta'][ $meta_key ] );
 		} else {
 			$this->assertArrayNotHasKey( $meta_key, $data['meta'] );
 		}
@@ -1228,7 +1240,8 @@ class WP_Test_REST_Post_Meta_Fields extends WP_Test_REST_TestCase {
 	}
 
 	/**
-	 * @ticket       38323
+	 * @ticket 38323
+	 *
 	 * @dataProvider data_set_subtype_meta_value
 	 */
 	public function test_set_subtype_meta_value( $post_type, $meta_key, $single, $in_post_type, $can_write ) {
@@ -1254,13 +1267,13 @@ class WP_Test_REST_Post_Meta_Fields extends WP_Test_REST_TestCase {
 
 		$response = rest_get_server()->dispatch( $request );
 		if ( ! $can_write ) {
-			$this->assertEquals( 403, $response->get_status() );
+			$this->assertSame( 403, $response->get_status() );
 			$this->assertEmpty( get_post_meta( $post_id, $meta_key, $single ) );
 
 			return;
 		}
 
-		$this->assertEquals( 200, $response->get_status() );
+		$this->assertSame( 200, $response->get_status() );
 
 		$data = $response->get_data();
 		$this->assertArrayHasKey( 'meta', $data );
@@ -1272,9 +1285,9 @@ class WP_Test_REST_Post_Meta_Fields extends WP_Test_REST_TestCase {
 				$expected_value = array( $expected_value );
 			}
 
-			$this->assertEquals( $expected_value, get_post_meta( $post_id, $meta_key, $single ) );
+			$this->assertSame( $expected_value, get_post_meta( $post_id, $meta_key, $single ) );
 			$this->assertArrayHasKey( $meta_key, $data['meta'] );
-			$this->assertEquals( $expected_value, $data['meta'][ $meta_key ] );
+			$this->assertSame( $expected_value, $data['meta'][ $meta_key ] );
 		} else {
 			$this->assertEmpty( get_post_meta( $post_id, $meta_key, $single ) );
 			$this->assertArrayNotHasKey( $meta_key, $data['meta'] );
@@ -1299,7 +1312,8 @@ class WP_Test_REST_Post_Meta_Fields extends WP_Test_REST_TestCase {
 	}
 
 	/**
-	 * @ticket       42069
+	 * @ticket 42069
+	 *
 	 * @dataProvider data_update_value_return_success_with_same_value
 	 */
 	public function test_update_value_return_success_with_same_value( $meta_key, $meta_value ) {
@@ -1318,7 +1332,7 @@ class WP_Test_REST_Post_Meta_Fields extends WP_Test_REST_TestCase {
 
 		$response = rest_get_server()->dispatch( $request );
 
-		$this->assertEquals( 200, $response->get_status() );
+		$this->assertSame( 200, $response->get_status() );
 	}
 
 	public function data_update_value_return_success_with_same_value() {
@@ -1345,7 +1359,7 @@ class WP_Test_REST_Post_Meta_Fields extends WP_Test_REST_TestCase {
 		$data     = $response->get_data();
 
 		$this->assertArrayHasKey( 'test\'slashed\'key', $data['meta'] );
-		$this->assertEquals( 'Hello', $data['meta']['test\'slashed\'key'] );
+		$this->assertSame( 'Hello', $data['meta']['test\'slashed\'key'] );
 	}
 
 	/**
@@ -1389,11 +1403,11 @@ class WP_Test_REST_Post_Meta_Fields extends WP_Test_REST_TestCase {
 
 		$this->assertArrayHasKey( 'object', $data['meta'] );
 		$this->assertArrayHasKey( 'project', $data['meta']['object'] );
-		$this->assertEquals( 'WordPress', $data['meta']['object']['project'] );
+		$this->assertSame( 'WordPress', $data['meta']['object']['project'] );
 
 		$meta = get_post_meta( self::$post_id, 'object', true );
 		$this->assertArrayHasKey( 'project', $meta );
-		$this->assertEquals( 'WordPress', $meta['project'] );
+		$this->assertSame( 'WordPress', $meta['project'] );
 	}
 
 	/**
@@ -1444,20 +1458,20 @@ class WP_Test_REST_Post_Meta_Fields extends WP_Test_REST_TestCase {
 		$this->assertCount( 2, $data['meta']['object'] );
 
 		$this->assertArrayHasKey( 'project', $data['meta']['object'][0] );
-		$this->assertEquals( 'WordPress', $data['meta']['object'][0]['project'] );
+		$this->assertSame( 'WordPress', $data['meta']['object'][0]['project'] );
 
 		$this->assertArrayHasKey( 'project', $data['meta']['object'][1] );
-		$this->assertEquals( 'bbPress', $data['meta']['object'][1]['project'] );
+		$this->assertSame( 'bbPress', $data['meta']['object'][1]['project'] );
 
 		$meta = get_post_meta( self::$post_id, 'object' );
 
 		$this->assertCount( 2, $meta );
 
 		$this->assertArrayHasKey( 'project', $meta[0] );
-		$this->assertEquals( 'WordPress', $meta[0]['project'] );
+		$this->assertSame( 'WordPress', $meta[0]['project'] );
 
 		$this->assertArrayHasKey( 'project', $meta[1] );
-		$this->assertEquals( 'bbPress', $meta[1]['project'] );
+		$this->assertSame( 'bbPress', $meta[1]['project'] );
 	}
 
 	/**
@@ -1496,10 +1510,10 @@ class WP_Test_REST_Post_Meta_Fields extends WP_Test_REST_TestCase {
 		$data     = $response->get_data();
 
 		$this->assertArrayHasKey( 'list', $data['meta'] );
-		$this->assertEquals( array( 'WordPress', 'bbPress' ), $data['meta']['list'] );
+		$this->assertSame( array( 'WordPress', 'bbPress' ), $data['meta']['list'] );
 
 		$meta = get_post_meta( self::$post_id, 'list', true );
-		$this->assertEquals( array( 'WordPress', 'bbPress' ), $meta );
+		$this->assertSame( array( 'WordPress', 'bbPress' ), $meta );
 	}
 
 	/**
@@ -1538,7 +1552,7 @@ class WP_Test_REST_Post_Meta_Fields extends WP_Test_REST_TestCase {
 			array(
 				'meta' => array(
 					'list_of_objects' => array(
-						// Meta 1
+						// Meta 1.
 						array(
 							array(
 								'version' => '5.2',
@@ -1549,7 +1563,7 @@ class WP_Test_REST_Post_Meta_Fields extends WP_Test_REST_TestCase {
 								'artist'  => 'Betty',
 							),
 						),
-						// Meta 2
+						// Meta 2.
 						array(
 							array(
 								'version' => '4.9',
@@ -1567,7 +1581,7 @@ class WP_Test_REST_Post_Meta_Fields extends WP_Test_REST_TestCase {
 		$this->assertArrayHasKey( 'list_of_objects', $data['meta'] );
 		$this->assertCount( 2, $data['meta']['list_of_objects'] );
 
-		$this->assertEquals(
+		$this->assertSame(
 			array(
 				array(
 					'version' => '5.2',
@@ -1581,7 +1595,7 @@ class WP_Test_REST_Post_Meta_Fields extends WP_Test_REST_TestCase {
 			$data['meta']['list_of_objects'][0]
 		);
 
-		$this->assertEquals(
+		$this->assertSame(
 			array(
 				array(
 					'version' => '4.9',
@@ -1595,7 +1609,7 @@ class WP_Test_REST_Post_Meta_Fields extends WP_Test_REST_TestCase {
 
 		$this->assertCount( 2, $meta );
 
-		$this->assertEquals(
+		$this->assertSame(
 			array(
 				array(
 					'version' => '5.2',
@@ -1609,7 +1623,7 @@ class WP_Test_REST_Post_Meta_Fields extends WP_Test_REST_TestCase {
 			$meta[0]
 		);
 
-		$this->assertEquals(
+		$this->assertSame(
 			array(
 				array(
 					'version' => '4.9',
@@ -1689,7 +1703,7 @@ class WP_Test_REST_Post_Meta_Fields extends WP_Test_REST_TestCase {
 
 		$this->assertArrayHasKey( 'object', $data['meta'] );
 		$this->assertCount( 2, $data['meta']['object'] );
-		$this->assertEquals( array( 'project' => 'bbPress' ), $data['meta']['object'][0] );
+		$this->assertSame( array( 'project' => 'bbPress' ), $data['meta']['object'][0] );
 		$this->assertNull( $data['meta']['object'][1] );
 	}
 
@@ -1725,7 +1739,7 @@ class WP_Test_REST_Post_Meta_Fields extends WP_Test_REST_TestCase {
 		$data     = $response->get_data();
 
 		$this->assertArrayHasKey( 'object', $data['meta'] );
-		$this->assertEquals( array( 'project' => 'WordPress' ), $data['meta']['object'] );
+		$this->assertSame( array( 'project' => 'WordPress' ), $data['meta']['object'] );
 	}
 
 	/**
@@ -1767,7 +1781,7 @@ class WP_Test_REST_Post_Meta_Fields extends WP_Test_REST_TestCase {
 		);
 
 		$response = rest_get_server()->dispatch( $request );
-		$this->assertEquals( 500, $response->get_status() );
+		$this->assertSame( 500, $response->get_status() );
 	}
 
 	/**
@@ -1813,7 +1827,7 @@ class WP_Test_REST_Post_Meta_Fields extends WP_Test_REST_TestCase {
 		);
 
 		$response = rest_get_server()->dispatch( $request );
-		$this->assertEquals( 500, $response->get_status() );
+		$this->assertSame( 500, $response->get_status() );
 	}
 
 	/**
@@ -1854,7 +1868,7 @@ class WP_Test_REST_Post_Meta_Fields extends WP_Test_REST_TestCase {
 		);
 
 		$response = rest_get_server()->dispatch( $request );
-		$this->assertEquals( 400, $response->get_status() );
+		$this->assertSame( 400, $response->get_status() );
 	}
 
 	/**
@@ -1898,10 +1912,10 @@ class WP_Test_REST_Post_Meta_Fields extends WP_Test_REST_TestCase {
 		);
 
 		$response = rest_get_server()->dispatch( $request );
-		$this->assertEquals( 200, $response->get_status() );
-		$this->assertEquals( $value, $response->get_data()['meta']['object'] );
+		$this->assertSame( 200, $response->get_status() );
+		$this->assertSame( $value, $response->get_data()['meta']['object'] );
 
-		$this->assertEquals( $value, get_post_meta( self::$post_id, 'object', true ) );
+		$this->assertSame( $value, get_post_meta( self::$post_id, 'object', true ) );
 	}
 
 	/**
@@ -1947,7 +1961,7 @@ class WP_Test_REST_Post_Meta_Fields extends WP_Test_REST_TestCase {
 		);
 
 		$response = rest_get_server()->dispatch( $request );
-		$this->assertEquals( 400, $response->get_status() );
+		$this->assertSame( 400, $response->get_status() );
 	}
 
 	/**
@@ -2074,19 +2088,19 @@ class WP_Test_REST_Post_Meta_Fields extends WP_Test_REST_TestCase {
 		);
 
 		$response = rest_get_server()->dispatch( $request );
-		$this->assertEquals( 200, $response->get_status() );
+		$this->assertSame( 200, $response->get_status() );
 
 		$data = $response->get_data();
 		$this->assertArrayHasKey( 'object', $data['meta'] );
 
 		$this->assertCount( 2, $data['meta']['object'] );
-		$this->assertEquals( array( 'project' => 'WordPress' ), $data['meta']['object'][0] );
-		$this->assertEquals( array( 'project' => 'BuddyPress' ), $data['meta']['object'][1] );
+		$this->assertSame( array( 'project' => 'WordPress' ), $data['meta']['object'][0] );
+		$this->assertSame( array( 'project' => 'BuddyPress' ), $data['meta']['object'][1] );
 
 		$meta = get_post_meta( self::$post_id, 'object' );
 		$this->assertCount( 2, $meta );
-		$this->assertEquals( array( 'project' => 'WordPress' ), $meta[0] );
-		$this->assertEquals( array( 'project' => 'BuddyPress' ), $meta[1] );
+		$this->assertSame( array( 'project' => 'WordPress' ), $meta[0] );
+		$this->assertSame( array( 'project' => 'BuddyPress' ), $meta[1] );
 	}
 
 	/**
@@ -2127,19 +2141,19 @@ class WP_Test_REST_Post_Meta_Fields extends WP_Test_REST_TestCase {
 		);
 
 		$response = rest_get_server()->dispatch( $request );
-		$this->assertEquals( 200, $response->get_status() );
+		$this->assertSame( 200, $response->get_status() );
 
 		$data = $response->get_data();
 		$this->assertArrayHasKey( 'list', $data['meta'] );
 
 		$this->assertCount( 2, $data['meta']['list'] );
-		$this->assertEquals( array( 'WordPress', 'bbPress' ), $data['meta']['list'][0] );
-		$this->assertEquals( array( 'BuddyPress' ), $data['meta']['list'][1] );
+		$this->assertSame( array( 'WordPress', 'bbPress' ), $data['meta']['list'][0] );
+		$this->assertSame( array( 'BuddyPress' ), $data['meta']['list'][1] );
 
 		$meta = get_post_meta( self::$post_id, 'list' );
 		$this->assertCount( 2, $meta );
-		$this->assertEquals( array( 'WordPress', 'bbPress' ), $meta[0] );
-		$this->assertEquals( array( 'BuddyPress' ), $meta[1] );
+		$this->assertSame( array( 'WordPress', 'bbPress' ), $meta[0] );
+		$this->assertSame( array( 'BuddyPress' ), $meta[1] );
 	}
 
 	/**
@@ -2177,10 +2191,10 @@ class WP_Test_REST_Post_Meta_Fields extends WP_Test_REST_TestCase {
 		);
 
 		$response = rest_get_server()->dispatch( $request );
-		$this->assertEquals( 200, $response->get_status() );
+		$this->assertSame( 200, $response->get_status() );
 
 		$data = $response->get_data();
-		$this->assertEquals( array( 'WordCamp' ), $data['meta']['list'] );
+		$this->assertSame( array( 'WordCamp' ), $data['meta']['list'] );
 	}
 
 	/**
@@ -2220,10 +2234,10 @@ class WP_Test_REST_Post_Meta_Fields extends WP_Test_REST_TestCase {
 		);
 
 		$response = rest_get_server()->dispatch( $request );
-		$this->assertEquals( 200, $response->get_status() );
+		$this->assertSame( 200, $response->get_status() );
 
 		$data = $response->get_data();
-		$this->assertEquals( array( 'project' => 'WordCamp' ), $data['meta']['object'] );
+		$this->assertSame( array( 'project' => 'WordCamp' ), $data['meta']['object'] );
 	}
 
 	/**
@@ -2318,7 +2332,7 @@ class WP_Test_REST_Post_Meta_Fields extends WP_Test_REST_TestCase {
 
 		rest_get_server()->dispatch( $request );
 		$response = rest_get_server()->dispatch( $request );
-		$this->assertEquals( 200, $response->get_status() );
+		$this->assertSame( 200, $response->get_status() );
 	}
 
 	/**
@@ -2344,7 +2358,7 @@ class WP_Test_REST_Post_Meta_Fields extends WP_Test_REST_TestCase {
 
 		update_post_meta( self::$post_id, 'items', array( '1', '2', '3' ) );
 		$response = rest_get_server()->dispatch( new WP_REST_Request( 'GET', sprintf( '/wp/v2/posts/%d', self::$post_id ) ) );
-		$this->assertEquals( array( 1, 2, 3 ), $response->get_data()['meta']['items'] );
+		$this->assertSame( array( 1, 2, 3 ), $response->get_data()['meta']['items'] );
 
 		$request = new WP_REST_Request( 'PUT', sprintf( '/wp/v2/posts/%d', self::$post_id ) );
 		$request->set_body_params(
@@ -2356,7 +2370,7 @@ class WP_Test_REST_Post_Meta_Fields extends WP_Test_REST_TestCase {
 		);
 
 		$response = rest_get_server()->dispatch( $request );
-		$this->assertEquals( 200, $response->get_status() );
+		$this->assertSame( 200, $response->get_status() );
 		$this->assertSame( array( 1, 2, 3 ), get_post_meta( self::$post_id, 'items', true ) );
 	}
 
@@ -2393,7 +2407,7 @@ class WP_Test_REST_Post_Meta_Fields extends WP_Test_REST_TestCase {
 		);
 
 		$response = rest_get_server()->dispatch( $request );
-		$this->assertEquals( 200, $response->get_status() );
+		$this->assertSame( 200, $response->get_status() );
 		$this->assertSame( array( 1, 2, 3 ), get_post_meta( self::$post_id, 'items', true ) );
 	}
 
@@ -2430,7 +2444,7 @@ class WP_Test_REST_Post_Meta_Fields extends WP_Test_REST_TestCase {
 		);
 
 		$response = rest_get_server()->dispatch( $request );
-		$this->assertEquals( 200, $response->get_status() );
+		$this->assertSame( 200, $response->get_status() );
 		$this->assertSame( array( 1, 2, 3 ), get_post_meta( self::$post_id, 'items', true ) );
 	}
 
@@ -2466,7 +2480,7 @@ class WP_Test_REST_Post_Meta_Fields extends WP_Test_REST_TestCase {
 
 		rest_get_server()->dispatch( $request );
 		$response = rest_get_server()->dispatch( $request );
-		$this->assertEquals( 200, $response->get_status() );
+		$this->assertSame( 200, $response->get_status() );
 	}
 
 	/**
@@ -2493,7 +2507,7 @@ class WP_Test_REST_Post_Meta_Fields extends WP_Test_REST_TestCase {
 		update_post_meta( self::$post_id, 'items', array( '1', '0' ) );
 
 		$response = rest_get_server()->dispatch( new WP_REST_Request( 'GET', sprintf( '/wp/v2/posts/%d', self::$post_id ) ) );
-		$this->assertEquals( array( true, false ), $response->get_data()['meta']['items'] );
+		$this->assertSame( array( true, false ), $response->get_data()['meta']['items'] );
 
 		$request = new WP_REST_Request( 'PUT', sprintf( '/wp/v2/posts/%d', self::$post_id ) );
 		$request->set_body_params(
@@ -2505,7 +2519,7 @@ class WP_Test_REST_Post_Meta_Fields extends WP_Test_REST_TestCase {
 		);
 
 		$response = rest_get_server()->dispatch( $request );
-		$this->assertEquals( 200, $response->get_status() );
+		$this->assertSame( 200, $response->get_status() );
 		$this->assertSame( array( true, false ), get_post_meta( self::$post_id, 'items', true ) );
 	}
 
@@ -2542,7 +2556,7 @@ class WP_Test_REST_Post_Meta_Fields extends WP_Test_REST_TestCase {
 		);
 
 		$response = rest_get_server()->dispatch( $request );
-		$this->assertEquals( 200, $response->get_status() );
+		$this->assertSame( 200, $response->get_status() );
 		$this->assertSame( array( true, false ), get_post_meta( self::$post_id, 'items', true ) );
 	}
 
@@ -2579,7 +2593,7 @@ class WP_Test_REST_Post_Meta_Fields extends WP_Test_REST_TestCase {
 		);
 
 		$response = rest_get_server()->dispatch( $request );
-		$this->assertEquals( 200, $response->get_status() );
+		$this->assertSame( 200, $response->get_status() );
 		$this->assertSame( array( true, false ), get_post_meta( self::$post_id, 'items', true ) );
 	}
 
@@ -2616,7 +2630,7 @@ class WP_Test_REST_Post_Meta_Fields extends WP_Test_REST_TestCase {
 		);
 
 		$response = rest_get_server()->dispatch( $request );
-		$this->assertEquals( 200, $response->get_status() );
+		$this->assertSame( 200, $response->get_status() );
 		$this->assertSame( array( false, true ), get_post_meta( self::$post_id, 'items', true ) );
 	}
 
@@ -2651,8 +2665,335 @@ class WP_Test_REST_Post_Meta_Fields extends WP_Test_REST_TestCase {
 		);
 
 		$response = rest_get_server()->dispatch( $request );
-		$this->assertEquals( 200, $response->get_status() );
-		$this->assertEquals( '0', get_post_meta( self::$post_id, 'boolean', true ) );
+		$this->assertSame( 200, $response->get_status() );
+		$this->assertSame( '0', get_post_meta( self::$post_id, 'boolean', true ) );
+	}
+
+	/**
+	 * @ticket 49339
+	 */
+	public function test_update_multi_meta_value_handles_integer_types() {
+		$this->grant_write_permission();
+
+		register_post_meta(
+			'post',
+			'multi_integer',
+			array(
+				'type'         => 'integer',
+				'show_in_rest' => true,
+			)
+		);
+
+		$mid1 = add_post_meta( self::$post_id, 'multi_integer', 1 );
+		$mid2 = add_post_meta( self::$post_id, 'multi_integer', 2 );
+
+		$request = new WP_REST_Request( 'PUT', sprintf( '/wp/v2/posts/%d', self::$post_id ) );
+		$request->set_body_params(
+			array(
+				'meta' => array(
+					'multi_integer' => array( 2, 3 ),
+				),
+			)
+		);
+
+		$response = rest_get_server()->dispatch( $request );
+
+		$this->assertSame( 200, $response->get_status() );
+		$this->assertSame( array( 2, 3 ), $response->get_data()['meta']['multi_integer'] );
+
+		$this->assertFalse( get_metadata_by_mid( 'post', $mid1 ) );
+		$this->assertNotFalse( get_metadata_by_mid( 'post', $mid2 ) );
+	}
+
+	/**
+	 * @ticket 49339
+	 */
+	public function test_update_multi_meta_value_handles_boolean_types() {
+		$this->grant_write_permission();
+
+		register_post_meta(
+			'post',
+			'multi_boolean',
+			array(
+				'type'              => 'boolean',
+				'sanitize_callback' => 'absint',
+				'show_in_rest'      => true,
+			)
+		);
+
+		$mid1 = add_post_meta( self::$post_id, 'multi_boolean', 1 );
+		$mid2 = add_post_meta( self::$post_id, 'multi_boolean', 0 );
+
+		$request = new WP_REST_Request( 'PUT', sprintf( '/wp/v2/posts/%d', self::$post_id ) );
+		$request->set_body_params(
+			array(
+				'meta' => array(
+					'multi_boolean' => array( 0 ),
+				),
+			)
+		);
+
+		$response = rest_get_server()->dispatch( $request );
+
+		$this->assertSame( 200, $response->get_status() );
+		$this->assertEquals( array( 0 ), $response->get_data()['meta']['multi_boolean'] );
+
+		$this->assertFalse( get_metadata_by_mid( 'post', $mid1 ) );
+		$this->assertNotFalse( get_metadata_by_mid( 'post', $mid2 ) );
+	}
+
+	/**
+	 * @ticket 49339
+	 */
+	public function test_update_multi_meta_value_handles_object_types() {
+		$this->grant_write_permission();
+
+		register_post_meta(
+			'post',
+			'multi_object',
+			array(
+				'type'         => 'object',
+				'show_in_rest' => array(
+					'schema' => array(
+						'type'       => 'object',
+						'properties' => array(
+							'a' => array(
+								'type' => 'string',
+							),
+						),
+					),
+				),
+			)
+		);
+
+		$mid1 = add_post_meta( self::$post_id, 'multi_object', array( 'a' => 'ant' ) );
+		$mid2 = add_post_meta( self::$post_id, 'multi_object', array( 'a' => 'anaconda' ) );
+
+		$request = new WP_REST_Request( 'PUT', sprintf( '/wp/v2/posts/%d', self::$post_id ) );
+		$request->set_body_params(
+			array(
+				'meta' => array(
+					'multi_object' => array(
+						array( 'a' => 'anaconda' ),
+						array( 'a' => 'alpaca' ),
+					),
+				),
+			)
+		);
+
+		$response = rest_get_server()->dispatch( $request );
+
+		$this->assertSame( 200, $response->get_status() );
+		$this->assertSame(
+			array(
+				array( 'a' => 'anaconda' ),
+				array( 'a' => 'alpaca' ),
+			),
+			$response->get_data()['meta']['multi_object']
+		);
+
+		$this->assertFalse( get_metadata_by_mid( 'post', $mid1 ) );
+		$this->assertNotFalse( get_metadata_by_mid( 'post', $mid2 ) );
+	}
+
+	/**
+	 * @ticket 43941
+	 * @dataProvider data_get_default_data
+	 */
+	public function test_get_default_value( $args, $expected ) {
+		$object_type = 'post';
+		$meta_key    = 'registered_key1';
+		$registered  = register_meta(
+			$object_type,
+			$meta_key,
+			$args
+		);
+
+		$this->assertTrue( $registered );
+
+		// Check for default value.
+		$request  = new WP_REST_Request( 'GET', sprintf( '/wp/v2/posts/%d', self::$post_id ) );
+		$response = rest_get_server()->dispatch( $request );
+
+		$this->assertSame( 200, $response->get_status() );
+
+		$data = $response->get_data();
+		$this->assertArrayHasKey( 'meta', $data );
+
+		$meta = (array) $data['meta'];
+		$this->assertArrayHasKey( $meta_key, $meta );
+		$this->assertSame( $expected, $meta[ $meta_key ] );
+	}
+
+	public function data_get_default_data() {
+		return array(
+			array(
+				array(
+					'show_in_rest' => true,
+					'single'       => true,
+					'default'      => 'wibble',
+				),
+				'wibble',
+			),
+			array(
+				array(
+					'show_in_rest' => true,
+					'single'       => false,
+					'default'      => 'wibble',
+				),
+				array( 'wibble' ),
+			),
+			array(
+				array(
+					'show_in_rest'   => true,
+					'single'         => true,
+					'object_subtype' => 'post',
+					'default'        => 'wibble',
+				),
+				'wibble',
+			),
+			array(
+				array(
+					'show_in_rest'   => true,
+					'single'         => false,
+					'object_subtype' => 'post',
+					'default'        => 'wibble',
+				),
+				array( 'wibble' ),
+			),
+			array(
+				array(
+					'single'       => true,
+					'show_in_rest' => array(
+						'schema' => array(
+							'type'       => 'object',
+							'properties' => array(
+								'wibble' => array(
+									'type' => 'string',
+								),
+							),
+						),
+					),
+					'type'         => 'object',
+					'default'      => array( 'wibble' => 'dibble' ),
+				),
+				array( 'wibble' => 'dibble' ),
+			),
+			array(
+				array(
+					'show_in_rest' => array(
+						'schema' => array(
+							'type'       => 'object',
+							'properties' => array(
+								'wibble' => array(
+									'type' => 'string',
+								),
+							),
+						),
+					),
+					'type'         => 'object',
+					'single'       => false,
+					'default'      => array( 'wibble' => 'dibble' ),
+				),
+				array( array( 'wibble' => 'dibble' ) ),
+			),
+
+			array(
+				array(
+					'show_in_rest' => array(
+						'schema' => array(
+							'type'  => 'array',
+							'items' => array(
+								'type' => 'string',
+							),
+						),
+					),
+					'single'       => true,
+					'type'         => 'array',
+					'default'      => array( 'dibble' ),
+				),
+				array( 'dibble' ),
+			),
+			array(
+				array(
+					'show_in_rest' => array(
+						'schema' => array(
+							'type'  => 'array',
+							'items' => array(
+								'type' => 'string',
+							),
+						),
+					),
+					'single'       => false,
+					'type'         => 'array',
+					'default'      => array( 'dibble' ),
+				),
+				array( array( 'dibble' ) ),
+			),
+			'array of objects' => array(
+				array(
+					'type'         => 'array',
+					'single'       => true,
+					'show_in_rest' => array(
+						'schema' => array(
+							'type'  => 'array',
+							'items' => array(
+								'type'       => 'object',
+								'properties' => array(
+									'name' => array(
+										'type' => 'string',
+									),
+								),
+							),
+						),
+					),
+					'default'      => array(
+						array(
+							'name' => 'Kirk',
+						),
+					),
+				),
+				array(
+					array(
+						'name' => 'Kirk',
+					),
+				),
+			),
+		);
+	}
+
+	/**
+	 * @ticket 43941
+	 */
+	public function test_set_default_in_schema() {
+		register_post_meta(
+			'post',
+			'greeting',
+			array(
+				'type'         => 'string',
+				'single'       => true,
+				'show_in_rest' => array(
+					'schema' => array(
+						'default' => 'Hello World',
+					),
+				),
+			)
+		);
+
+		$response = rest_do_request( '/wp/v2/posts/' . self::$post_id );
+		$this->assertSame( 'Hello World', $response->get_data()['meta']['greeting'] );
+	}
+
+	/**
+	 * @ticket 43941
+	 */
+	public function test_default_is_added_to_schema() {
+		$request  = new WP_REST_Request( 'OPTIONS', '/wp/v2/posts' );
+		$response = rest_do_request( $request );
+
+		$schema = $response->get_data()['schema']['properties']['meta']['properties']['with_default'];
+		$this->assertArrayHasKey( 'default', $schema );
+		$this->assertSame( 'Goodnight Moon', $schema['default'] );
 	}
 
 	/**
diff --git a/tests/rest-api/rest-post-statuses-controller.php b/tests/rest-api/rest-post-statuses-controller.php
index 43b85289b7..76ff41fe6b 100644
--- a/tests/rest-api/rest-post-statuses-controller.php
+++ b/tests/rest-api/rest-post-statuses-controller.php
@@ -18,18 +18,18 @@ class WP_Test_REST_Post_Statuses_Controller extends WP_Test_REST_Controller_Test
 	}
 
 	public function test_context_param() {
-		// Collection
+		// Collection.
 		$request  = new WP_REST_Request( 'OPTIONS', '/wp/v2/statuses' );
 		$response = rest_get_server()->dispatch( $request );
 		$data     = $response->get_data();
-		$this->assertEquals( 'view', $data['endpoints'][0]['args']['context']['default'] );
-		$this->assertEqualSets( array( 'embed', 'view', 'edit' ), $data['endpoints'][0]['args']['context']['enum'] );
-		// Single
+		$this->assertSame( 'view', $data['endpoints'][0]['args']['context']['default'] );
+		$this->assertSameSets( array( 'embed', 'view', 'edit' ), $data['endpoints'][0]['args']['context']['enum'] );
+		// Single.
 		$request  = new WP_REST_Request( 'OPTIONS', '/wp/v2/statuses/publish' );
 		$response = rest_get_server()->dispatch( $request );
 		$data     = $response->get_data();
-		$this->assertEquals( 'view', $data['endpoints'][0]['args']['context']['default'] );
-		$this->assertEqualSets( array( 'embed', 'view', 'edit' ), $data['endpoints'][0]['args']['context']['enum'] );
+		$this->assertSame( 'view', $data['endpoints'][0]['args']['context']['default'] );
+		$this->assertSameSets( array( 'embed', 'view', 'edit' ), $data['endpoints'][0]['args']['context']['enum'] );
 	}
 
 	public function test_get_items() {
@@ -38,8 +38,8 @@ class WP_Test_REST_Post_Statuses_Controller extends WP_Test_REST_Controller_Test
 
 		$data     = $response->get_data();
 		$statuses = get_post_stati( array( 'public' => true ), 'objects' );
-		$this->assertEquals( 1, count( $data ) );
-		$this->assertEquals( 'publish', $data['publish']['slug'] );
+		$this->assertSame( 1, count( $data ) );
+		$this->assertSame( 'publish', $data['publish']['slug'] );
 	}
 
 	public function test_get_items_logged_in() {
@@ -50,8 +50,8 @@ class WP_Test_REST_Post_Statuses_Controller extends WP_Test_REST_Controller_Test
 		$response = rest_get_server()->dispatch( $request );
 
 		$data = $response->get_data();
-		$this->assertEquals( 6, count( $data ) );
-		$this->assertEqualSets(
+		$this->assertSame( 6, count( $data ) );
+		$this->assertSameSets(
 			array(
 				'publish',
 				'private',
@@ -106,21 +106,21 @@ class WP_Test_REST_Post_Statuses_Controller extends WP_Test_REST_Controller_Test
 		/** Post statuses can't be created */
 		$request  = new WP_REST_Request( 'POST', '/wp/v2/statuses' );
 		$response = rest_get_server()->dispatch( $request );
-		$this->assertEquals( 404, $response->get_status() );
+		$this->assertSame( 404, $response->get_status() );
 	}
 
 	public function test_update_item() {
 		/** Post statuses can't be updated */
 		$request  = new WP_REST_Request( 'POST', '/wp/v2/statuses/draft' );
 		$response = rest_get_server()->dispatch( $request );
-		$this->assertEquals( 404, $response->get_status() );
+		$this->assertSame( 404, $response->get_status() );
 	}
 
 	public function test_delete_item() {
 		/** Post statuses can't be deleted */
 		$request  = new WP_REST_Request( 'DELETE', '/wp/v2/statuses/draft' );
 		$response = rest_get_server()->dispatch( $request );
-		$this->assertEquals( 404, $response->get_status() );
+		$this->assertSame( 404, $response->get_status() );
 	}
 
 	public function test_prepare_item() {
@@ -139,7 +139,7 @@ class WP_Test_REST_Post_Statuses_Controller extends WP_Test_REST_Controller_Test
 		$request->set_param( 'context', 'edit' );
 		$request->set_param( '_fields', 'id,name' );
 		$response = $endpoint->prepare_item_for_response( $obj, $request );
-		$this->assertEquals(
+		$this->assertSame(
 			array(
 				// 'id' doesn't exist in this context.
 				'name',
@@ -153,7 +153,7 @@ class WP_Test_REST_Post_Statuses_Controller extends WP_Test_REST_Controller_Test
 		$response   = rest_get_server()->dispatch( $request );
 		$data       = $response->get_data();
 		$properties = $data['schema']['properties'];
-		$this->assertEquals( 8, count( $properties ) );
+		$this->assertSame( 8, count( $properties ) );
 		$this->assertArrayHasKey( 'name', $properties );
 		$this->assertArrayHasKey( 'private', $properties );
 		$this->assertArrayHasKey( 'protected', $properties );
@@ -189,7 +189,7 @@ class WP_Test_REST_Post_Statuses_Controller extends WP_Test_REST_Controller_Test
 		$data     = $response->get_data();
 
 		$this->assertArrayHasKey( 'my_custom_int', $data['schema']['properties'] );
-		$this->assertEquals( $schema, $data['schema']['properties']['my_custom_int'] );
+		$this->assertSame( $schema, $data['schema']['properties']['my_custom_int'] );
 
 		$request = new WP_REST_Request( 'GET', '/wp/v2/statuses/publish' );
 
@@ -205,24 +205,24 @@ class WP_Test_REST_Post_Statuses_Controller extends WP_Test_REST_Controller_Test
 	}
 
 	protected function check_post_status_obj( $status_obj, $data, $links ) {
-		$this->assertEquals( $status_obj->label, $data['name'] );
-		$this->assertEquals( $status_obj->private, $data['private'] );
-		$this->assertEquals( $status_obj->protected, $data['protected'] );
-		$this->assertEquals( $status_obj->public, $data['public'] );
-		$this->assertEquals( $status_obj->publicly_queryable, $data['queryable'] );
-		$this->assertEquals( $status_obj->show_in_admin_all_list, $data['show_in_list'] );
-		$this->assertEquals( $status_obj->name, $data['slug'] );
-		$this->assertEqualSets(
+		$this->assertSame( $status_obj->label, $data['name'] );
+		$this->assertSame( $status_obj->private, $data['private'] );
+		$this->assertSame( $status_obj->protected, $data['protected'] );
+		$this->assertSame( $status_obj->public, $data['public'] );
+		$this->assertSame( $status_obj->publicly_queryable, $data['queryable'] );
+		$this->assertSame( $status_obj->show_in_admin_all_list, $data['show_in_list'] );
+		$this->assertSame( $status_obj->name, $data['slug'] );
+		$this->assertSameSets(
 			array(
 				'archives',
 			),
 			array_keys( $links )
 		);
-		$this->assertEquals( $status_obj->date_floating, $data['date_floating'] );
+		$this->assertSame( $status_obj->date_floating, $data['date_floating'] );
 	}
 
 	protected function check_post_status_object_response( $response ) {
-		$this->assertEquals( 200, $response->get_status() );
+		$this->assertSame( 200, $response->get_status() );
 		$data = $response->get_data();
 		$obj  = get_post_status_object( 'publish' );
 		$this->check_post_status_obj( $obj, $data, $response->get_links() );
diff --git a/tests/rest-api/rest-post-types-controller.php b/tests/rest-api/rest-post-types-controller.php
index d0b49c1e21..bc99650c25 100644
--- a/tests/rest-api/rest-post-types-controller.php
+++ b/tests/rest-api/rest-post-types-controller.php
@@ -18,18 +18,18 @@ class WP_Test_REST_Post_Types_Controller extends WP_Test_REST_Controller_Testcas
 	}
 
 	public function test_context_param() {
-		// Collection
+		// Collection.
 		$request  = new WP_REST_Request( 'OPTIONS', '/wp/v2/types' );
 		$response = rest_get_server()->dispatch( $request );
 		$data     = $response->get_data();
-		$this->assertEquals( 'view', $data['endpoints'][0]['args']['context']['default'] );
-		$this->assertEqualSets( array( 'view', 'edit', 'embed' ), $data['endpoints'][0]['args']['context']['enum'] );
-		// Single
+		$this->assertSame( 'view', $data['endpoints'][0]['args']['context']['default'] );
+		$this->assertSameSets( array( 'view', 'edit', 'embed' ), $data['endpoints'][0]['args']['context']['enum'] );
+		// Single.
 		$request  = new WP_REST_Request( 'OPTIONS', '/wp/v2/types/post' );
 		$response = rest_get_server()->dispatch( $request );
 		$data     = $response->get_data();
-		$this->assertEquals( 'view', $data['endpoints'][0]['args']['context']['default'] );
-		$this->assertEqualSets( array( 'view', 'edit', 'embed' ), $data['endpoints'][0]['args']['context']['enum'] );
+		$this->assertSame( 'view', $data['endpoints'][0]['args']['context']['default'] );
+		$this->assertSameSets( array( 'view', 'edit', 'embed' ), $data['endpoints'][0]['args']['context']['enum'] );
 	}
 
 	public function test_get_items() {
@@ -38,10 +38,10 @@ class WP_Test_REST_Post_Types_Controller extends WP_Test_REST_Controller_Testcas
 
 		$data       = $response->get_data();
 		$post_types = get_post_types( array( 'show_in_rest' => true ), 'objects' );
-		$this->assertEquals( count( $post_types ), count( $data ) );
-		$this->assertEquals( $post_types['post']->name, $data['post']['slug'] );
+		$this->assertSame( count( $post_types ), count( $data ) );
+		$this->assertSame( $post_types['post']->name, $data['post']['slug'] );
 		$this->check_post_type_obj( 'view', $post_types['post'], $data['post'], $data['post']['_links'] );
-		$this->assertEquals( $post_types['page']->name, $data['page']['slug'] );
+		$this->assertSame( $post_types['page']->name, $data['page']['slug'] );
 		$this->check_post_type_obj( 'view', $post_types['page'], $data['page'], $data['page']['_links'] );
 		$this->assertFalse( isset( $data['revision'] ) );
 	}
@@ -59,7 +59,7 @@ class WP_Test_REST_Post_Types_Controller extends WP_Test_REST_Controller_Testcas
 		$response = rest_get_server()->dispatch( $request );
 		$this->check_post_type_object_response( 'view', $response );
 		$data = $response->get_data();
-		$this->assertEquals( array( 'category', 'post_tag' ), $data['taxonomies'] );
+		$this->assertSame( array( 'category', 'post_tag' ), $data['taxonomies'] );
 	}
 
 	public function test_get_item_page() {
@@ -67,7 +67,7 @@ class WP_Test_REST_Post_Types_Controller extends WP_Test_REST_Controller_Testcas
 		$response = rest_get_server()->dispatch( $request );
 		$this->check_post_type_object_response( 'view', $response, 'page' );
 		$data = $response->get_data();
-		$this->assertEquals( array(), $data['taxonomies'] );
+		$this->assertSame( array(), $data['taxonomies'] );
 	}
 
 	public function test_get_item_invalid_type() {
@@ -97,21 +97,21 @@ class WP_Test_REST_Post_Types_Controller extends WP_Test_REST_Controller_Testcas
 		/** Post types can't be created */
 		$request  = new WP_REST_Request( 'POST', '/wp/v2/types' );
 		$response = rest_get_server()->dispatch( $request );
-		$this->assertEquals( 404, $response->get_status() );
+		$this->assertSame( 404, $response->get_status() );
 	}
 
 	public function test_update_item() {
 		/** Post types can't be updated */
 		$request  = new WP_REST_Request( 'POST', '/wp/v2/types/post' );
 		$response = rest_get_server()->dispatch( $request );
-		$this->assertEquals( 404, $response->get_status() );
+		$this->assertSame( 404, $response->get_status() );
 	}
 
 	public function test_delete_item() {
 		/** Post types can't be deleted */
 		$request  = new WP_REST_Request( 'DELETE', '/wp/v2/types/post' );
 		$response = rest_get_server()->dispatch( $request );
-		$this->assertEquals( 404, $response->get_status() );
+		$this->assertSame( 404, $response->get_status() );
 	}
 
 	public function test_prepare_item() {
@@ -130,7 +130,7 @@ class WP_Test_REST_Post_Types_Controller extends WP_Test_REST_Controller_Testcas
 		$request->set_param( 'context', 'edit' );
 		$request->set_param( '_fields', 'id,name' );
 		$response = $endpoint->prepare_item_for_response( $obj, $request );
-		$this->assertEquals(
+		$this->assertSame(
 			array(
 				// 'id' doesn't exist in this context.
 				'name',
@@ -144,7 +144,7 @@ class WP_Test_REST_Post_Types_Controller extends WP_Test_REST_Controller_Testcas
 		$response   = rest_get_server()->dispatch( $request );
 		$data       = $response->get_data();
 		$properties = $data['schema']['properties'];
-		$this->assertEquals( 10, count( $properties ) );
+		$this->assertSame( 10, count( $properties ) );
 		$this->assertArrayHasKey( 'capabilities', $properties );
 		$this->assertArrayHasKey( 'description', $properties );
 		$this->assertArrayHasKey( 'hierarchical', $properties );
@@ -182,7 +182,7 @@ class WP_Test_REST_Post_Types_Controller extends WP_Test_REST_Controller_Testcas
 		$data     = $response->get_data();
 
 		$this->assertArrayHasKey( 'my_custom_int', $data['schema']['properties'] );
-		$this->assertEquals( $schema, $data['schema']['properties']['my_custom_int'] );
+		$this->assertSame( $schema, $data['schema']['properties']['my_custom_int'] );
 
 		$request = new WP_REST_Request( 'GET', '/wp/v2/types/post' );
 
@@ -198,25 +198,25 @@ class WP_Test_REST_Post_Types_Controller extends WP_Test_REST_Controller_Testcas
 	}
 
 	protected function check_post_type_obj( $context, $post_type_obj, $data, $links ) {
-		$this->assertEquals( $post_type_obj->label, $data['name'] );
-		$this->assertEquals( $post_type_obj->name, $data['slug'] );
-		$this->assertEquals( $post_type_obj->description, $data['description'] );
-		$this->assertEquals( $post_type_obj->hierarchical, $data['hierarchical'] );
-		$this->assertEquals( $post_type_obj->rest_base, $data['rest_base'] );
+		$this->assertSame( $post_type_obj->label, $data['name'] );
+		$this->assertSame( $post_type_obj->name, $data['slug'] );
+		$this->assertSame( $post_type_obj->description, $data['description'] );
+		$this->assertSame( $post_type_obj->hierarchical, $data['hierarchical'] );
+		$this->assertSame( $post_type_obj->rest_base, $data['rest_base'] );
 
 		$links = test_rest_expand_compact_links( $links );
-		$this->assertEquals( rest_url( 'wp/v2/types' ), $links['collection'][0]['href'] );
+		$this->assertSame( rest_url( 'wp/v2/types' ), $links['collection'][0]['href'] );
 		$this->assertArrayHasKey( 'https://api.w.org/items', $links );
 		if ( 'edit' === $context ) {
-			$this->assertEquals( $post_type_obj->cap, $data['capabilities'] );
-			$this->assertEquals( $post_type_obj->labels, $data['labels'] );
+			$this->assertSame( $post_type_obj->cap, $data['capabilities'] );
+			$this->assertSame( $post_type_obj->labels, $data['labels'] );
 			if ( in_array( $post_type_obj->name, array( 'post', 'page' ), true ) ) {
 				$viewable = true;
 			} else {
 				$viewable = is_post_type_viewable( $post_type_obj );
 			}
-			$this->assertEquals( $viewable, $data['viewable'] );
-			$this->assertEquals( get_all_post_type_supports( $post_type_obj->name ), $data['supports'] );
+			$this->assertSame( $viewable, $data['viewable'] );
+			$this->assertSame( get_all_post_type_supports( $post_type_obj->name ), $data['supports'] );
 		} else {
 			$this->assertFalse( isset( $data['capabilities'] ) );
 			$this->assertFalse( isset( $data['viewable'] ) );
@@ -226,7 +226,7 @@ class WP_Test_REST_Post_Types_Controller extends WP_Test_REST_Controller_Testcas
 	}
 
 	protected function check_post_type_object_response( $context, $response, $post_type = 'post' ) {
-		$this->assertEquals( 200, $response->get_status() );
+		$this->assertSame( 200, $response->get_status() );
 		$data = $response->get_data();
 		$obj  = get_post_type_object( $post_type );
 		$this->check_post_type_obj( $context, $obj, $data, $response->get_links() );
diff --git a/tests/rest-api/rest-posts-controller.php b/tests/rest-api/rest-posts-controller.php
index 37ee1ac02c..9831bb0aab 100644
--- a/tests/rest-api/rest-posts-controller.php
+++ b/tests/rest-api/rest-posts-controller.php
@@ -19,6 +19,9 @@ class WP_Test_REST_Posts_Controller extends WP_Test_REST_Post_Type_Controller_Te
 	protected static $private_reader_id;
 
 	protected static $supported_formats;
+	protected static $post_ids    = array();
+	protected static $total_posts = 30;
+	protected static $per_page    = 50;
 
 	protected $forbidden_cat;
 	protected $posts_clauses;
@@ -58,9 +61,18 @@ class WP_Test_REST_Posts_Controller extends WP_Test_REST_Post_Type_Controller_Te
 			update_site_option( 'site_admins', array( 'superadmin' ) );
 		}
 
-		// Only support 'post' and 'gallery'
+		// Only support 'post' and 'gallery'.
 		self::$supported_formats = get_theme_support( 'post-formats' );
 		add_theme_support( 'post-formats', array( 'post', 'gallery' ) );
+
+		// Set up posts for pagination tests.
+		for ( $i = 0; $i < self::$total_posts - 1; $i++ ) {
+			self::$post_ids[] = $factory->post->create(
+				array(
+					'post_title' => "Post {$i}",
+				)
+			);
+		}
 	}
 
 	public static function wpTearDownAfterClass() {
@@ -71,6 +83,11 @@ class WP_Test_REST_Posts_Controller extends WP_Test_REST_Post_Type_Controller_Te
 			remove_theme_support( 'post-formats' );
 		}
 
+		// Remove posts for pagination tests.
+		foreach ( self::$post_ids as $post_id ) {
+			wp_delete_post( $post_id, true );
+		}
+
 		wp_delete_post( self::$post_id, true );
 
 		self::delete_user( self::$superadmin_id );
@@ -112,7 +129,7 @@ class WP_Test_REST_Posts_Controller extends WP_Test_REST_Post_Type_Controller_Te
 		global $wpdb;
 		$expected_clause = str_replace( '{posts}', $wpdb->posts, $pattern );
 		$this->assertCount( 1, $this->posts_clauses );
-		$this->assertEquals( $expected_clause, $wpdb->remove_placeholder_escape( $this->posts_clauses[0][ $clause ] ) );
+		$this->assertSame( $expected_clause, $wpdb->remove_placeholder_escape( $this->posts_clauses[0][ $clause ] ) );
 	}
 
 	public function assertPostsOrderedBy( $pattern ) {
@@ -133,18 +150,18 @@ class WP_Test_REST_Posts_Controller extends WP_Test_REST_Post_Type_Controller_Te
 	}
 
 	public function test_context_param() {
-		// Collection
+		// Collection.
 		$request  = new WP_REST_Request( 'OPTIONS', '/wp/v2/posts' );
 		$response = rest_get_server()->dispatch( $request );
 		$data     = $response->get_data();
-		$this->assertEquals( 'view', $data['endpoints'][0]['args']['context']['default'] );
-		$this->assertEquals( array( 'view', 'embed', 'edit' ), $data['endpoints'][0]['args']['context']['enum'] );
-		// Single
+		$this->assertSame( 'view', $data['endpoints'][0]['args']['context']['default'] );
+		$this->assertSame( array( 'view', 'embed', 'edit' ), $data['endpoints'][0]['args']['context']['enum'] );
+		// Single.
 		$request  = new WP_REST_Request( 'OPTIONS', '/wp/v2/posts/' . self::$post_id );
 		$response = rest_get_server()->dispatch( $request );
 		$data     = $response->get_data();
-		$this->assertEquals( 'view', $data['endpoints'][0]['args']['context']['default'] );
-		$this->assertEquals( array( 'view', 'embed', 'edit' ), $data['endpoints'][0]['args']['context']['enum'] );
+		$this->assertSame( 'view', $data['endpoints'][0]['args']['context']['default'] );
+		$this->assertSame( array( 'view', 'embed', 'edit' ), $data['endpoints'][0]['args']['context']['enum'] );
 	}
 
 	public function test_registered_query_params() {
@@ -153,7 +170,7 @@ class WP_Test_REST_Posts_Controller extends WP_Test_REST_Post_Type_Controller_Te
 		$data     = $response->get_data();
 		$keys     = array_keys( $data['endpoints'][0]['args'] );
 		sort( $keys );
-		$this->assertEquals(
+		$this->assertSame(
 			array(
 				'after',
 				'author',
@@ -175,6 +192,7 @@ class WP_Test_REST_Posts_Controller extends WP_Test_REST_Post_Type_Controller_Te
 				'sticky',
 				'tags',
 				'tags_exclude',
+				'tax_relation',
 			),
 			$keys
 		);
@@ -186,7 +204,7 @@ class WP_Test_REST_Posts_Controller extends WP_Test_REST_Post_Type_Controller_Te
 		$data     = $response->get_data();
 		$keys     = array_keys( $data['endpoints'][0]['args'] );
 		sort( $keys );
-		$this->assertEquals( array( 'context', 'id', 'password' ), $keys );
+		$this->assertSame( array( 'context', 'id', 'password' ), $keys );
 	}
 
 	/**
@@ -199,16 +217,17 @@ class WP_Test_REST_Posts_Controller extends WP_Test_REST_Post_Type_Controller_Te
 		$headers  = $response->get_headers();
 
 		$this->assertNotEmpty( $headers['Allow'] );
-		$this->assertEquals( $headers['Allow'], 'GET' );
+		$this->assertSame( $headers['Allow'], 'GET' );
 
 		wp_set_current_user( self::$editor_id );
+
 		$request  = new WP_REST_Request( 'OPTIONS', sprintf( '/wp/v2/posts/%d', self::$post_id ) );
 		$response = rest_get_server()->dispatch( $request );
 		$response = apply_filters( 'rest_post_dispatch', $response, rest_get_server(), $request );
 		$headers  = $response->get_headers();
 
 		$this->assertNotEmpty( $headers['Allow'] );
-		$this->assertEquals( $headers['Allow'], 'GET, POST, PUT, PATCH, DELETE' );
+		$this->assertSame( $headers['Allow'], 'GET, POST, PUT, PATCH, DELETE' );
 	}
 
 	public function test_get_items() {
@@ -233,62 +252,77 @@ class WP_Test_REST_Posts_Controller extends WP_Test_REST_Post_Type_Controller_Te
 		$response = rest_get_server()->dispatch( $request );
 
 		$this->assertEmpty( $response->get_data() );
-		$this->assertEquals( 200, $response->get_status() );
+		$this->assertSame( 200, $response->get_status() );
 	}
 
 	public function test_get_items_author_query() {
 		$this->factory->post->create( array( 'post_author' => self::$editor_id ) );
 		$this->factory->post->create( array( 'post_author' => self::$author_id ) );
-		// All 3 posts
-		$request  = new WP_REST_Request( 'GET', '/wp/v2/posts' );
+
+		$total_posts = self::$total_posts + 2;
+
+		// All posts in the database.
+		$request = new WP_REST_Request( 'GET', '/wp/v2/posts' );
+		$request->set_param( 'per_page', self::$per_page );
 		$response = rest_get_server()->dispatch( $request );
-		$this->assertEquals( 200, $response->get_status() );
-		$this->assertEquals( 3, count( $response->get_data() ) );
-		// 2 of 3 posts
+		$this->assertSame( 200, $response->get_status() );
+		$this->assertSame( $total_posts, count( $response->get_data() ) );
+
+		// Limit to editor and author.
 		$request = new WP_REST_Request( 'GET', '/wp/v2/posts' );
 		$request->set_param( 'author', array( self::$editor_id, self::$author_id ) );
 		$response = rest_get_server()->dispatch( $request );
-		$this->assertEquals( 200, $response->get_status() );
+		$this->assertSame( 200, $response->get_status() );
 		$data = $response->get_data();
-		$this->assertEquals( 2, count( $data ) );
-		$this->assertEqualSets( array( self::$editor_id, self::$author_id ), wp_list_pluck( $data, 'author' ) );
-		// 1 of 3 posts
+		$this->assertSame( 2, count( $data ) );
+		$this->assertSameSets( array( self::$editor_id, self::$author_id ), wp_list_pluck( $data, 'author' ) );
+
+		// Limit to editor.
 		$request = new WP_REST_Request( 'GET', '/wp/v2/posts' );
 		$request->set_param( 'author', self::$editor_id );
 		$response = rest_get_server()->dispatch( $request );
-		$this->assertEquals( 200, $response->get_status() );
+		$this->assertSame( 200, $response->get_status() );
 		$data = $response->get_data();
-		$this->assertEquals( 1, count( $data ) );
-		$this->assertEquals( self::$editor_id, $data[0]['author'] );
+		$this->assertSame( 1, count( $data ) );
+		$this->assertSame( self::$editor_id, $data[0]['author'] );
 	}
 
 	public function test_get_items_author_exclude_query() {
 		$this->factory->post->create( array( 'post_author' => self::$editor_id ) );
 		$this->factory->post->create( array( 'post_author' => self::$author_id ) );
-		// All 3 posts
-		$request  = new WP_REST_Request( 'GET', '/wp/v2/posts' );
+
+		$total_posts = self::$total_posts + 2;
+
+		// All posts in the database.
+		$request = new WP_REST_Request( 'GET', '/wp/v2/posts' );
+		$request->set_param( 'per_page', self::$per_page );
 		$response = rest_get_server()->dispatch( $request );
-		$this->assertEquals( 200, $response->get_status() );
-		$this->assertEquals( 3, count( $response->get_data() ) );
-		// 1 of 3 posts
+		$this->assertSame( 200, $response->get_status() );
+		$this->assertSame( $total_posts, count( $response->get_data() ) );
+
+		// Exclude editor and author.
 		$request = new WP_REST_Request( 'GET', '/wp/v2/posts' );
+		$request->set_param( 'per_page', self::$per_page );
 		$request->set_param( 'author_exclude', array( self::$editor_id, self::$author_id ) );
 		$response = rest_get_server()->dispatch( $request );
-		$this->assertEquals( 200, $response->get_status() );
+		$this->assertSame( 200, $response->get_status() );
 		$data = $response->get_data();
-		$this->assertEquals( 1, count( $data ) );
+		$this->assertSame( $total_posts - 2, count( $data ) );
 		$this->assertNotEquals( self::$editor_id, $data[0]['author'] );
 		$this->assertNotEquals( self::$author_id, $data[0]['author'] );
-		// 2 of 3 posts
+
+		// Exclude editor.
 		$request = new WP_REST_Request( 'GET', '/wp/v2/posts' );
+		$request->set_param( 'per_page', self::$per_page );
 		$request->set_param( 'author_exclude', self::$editor_id );
 		$response = rest_get_server()->dispatch( $request );
-		$this->assertEquals( 200, $response->get_status() );
+		$this->assertSame( 200, $response->get_status() );
 		$data = $response->get_data();
-		$this->assertEquals( 2, count( $data ) );
+		$this->assertSame( $total_posts - 1, count( $data ) );
 		$this->assertNotEquals( self::$editor_id, $data[0]['author'] );
 		$this->assertNotEquals( self::$editor_id, $data[1]['author'] );
-		// invalid author_exclude errors
+
+		// Invalid 'author_exclude' should error.
 		$request = new WP_REST_Request( 'GET', '/wp/v2/posts' );
 		$request->set_param( 'author_exclude', 'invalid' );
 		$response = rest_get_server()->dispatch( $request );
@@ -296,25 +330,38 @@ class WP_Test_REST_Posts_Controller extends WP_Test_REST_Post_Type_Controller_Te
 	}
 
 	public function test_get_items_include_query() {
-		$id1 = $this->factory->post->create( array( 'post_status' => 'publish' ) );
-		$this->factory->post->create( array( 'post_status' => 'publish' ) );
-		$id3     = $this->factory->post->create( array( 'post_status' => 'publish' ) );
+		$id1 = $this->factory->post->create(
+			array(
+				'post_status' => 'publish',
+				'post_date'   => '2001-02-03 04:05:06',
+			)
+		);
+		$id2 = $this->factory->post->create(
+			array(
+				'post_status' => 'publish',
+				'post_date'   => '2001-02-03 04:05:07',
+			)
+		);
+
 		$request = new WP_REST_Request( 'GET', '/wp/v2/posts' );
-		// Orderby=>desc
-		$request->set_param( 'include', array( $id1, $id3 ) );
+
+		// Order defaults to date descending.
+		$request->set_param( 'include', array( $id1, $id2 ) );
 		$response = rest_get_server()->dispatch( $request );
 		$data     = $response->get_data();
-		$this->assertEquals( 2, count( $data ) );
-		$this->assertEquals( $id3, $data[0]['id'] );
+		$this->assertSame( 2, count( $data ) );
+		$this->assertSame( $id2, $data[0]['id'] );
 		$this->assertPostsOrderedBy( '{posts}.post_date DESC' );
-		// Orderby=>include
+
+		// 'orderby' => 'include'.
 		$request->set_param( 'orderby', 'include' );
 		$response = rest_get_server()->dispatch( $request );
 		$data     = $response->get_data();
-		$this->assertEquals( 2, count( $data ) );
-		$this->assertEquals( $id1, $data[0]['id'] );
-		$this->assertPostsOrderedBy( "FIELD({posts}.ID,$id1,$id3)" );
-		// Invalid include should error
+		$this->assertSame( 2, count( $data ) );
+		$this->assertSame( $id1, $data[0]['id'] );
+		$this->assertPostsOrderedBy( "FIELD({posts}.ID,$id1,$id2)" );
+
+		// Invalid 'include' should error.
 		$request = new WP_REST_Request( 'GET', '/wp/v2/posts' );
 		$request->set_param( 'include', 'invalid' );
 		$response = rest_get_server()->dispatch( $request );
@@ -348,10 +395,10 @@ class WP_Test_REST_Posts_Controller extends WP_Test_REST_Post_Type_Controller_Te
 		$response = rest_get_server()->dispatch( $request );
 		$data     = $response->get_data();
 
-		$this->assertEquals( 200, $response->get_status() );
-		$this->assertEquals( self::$author_id, $data[0]['author'] );
-		$this->assertEquals( self::$editor_id, $data[1]['author'] );
-		$this->assertEquals( self::$editor_id, $data[2]['author'] );
+		$this->assertSame( 200, $response->get_status() );
+		$this->assertSame( self::$author_id, $data[0]['author'] );
+		$this->assertSame( self::$editor_id, $data[1]['author'] );
+		$this->assertSame( self::$editor_id, $data[2]['author'] );
 
 		$this->assertPostsOrderedBy( '{posts}.post_author DESC' );
 	}
@@ -372,10 +419,10 @@ class WP_Test_REST_Posts_Controller extends WP_Test_REST_Post_Type_Controller_Te
 		$response = rest_get_server()->dispatch( $request );
 		$data     = $response->get_data();
 
-		$this->assertEquals( 200, $response->get_status() );
-		$this->assertEquals( $id1, $data[0]['id'] );
-		$this->assertEquals( $id3, $data[1]['id'] );
-		$this->assertEquals( $id2, $data[2]['id'] );
+		$this->assertSame( 200, $response->get_status() );
+		$this->assertSame( $id1, $data[0]['id'] );
+		$this->assertSame( $id3, $data[1]['id'] );
+		$this->assertSame( $id2, $data[2]['id'] );
 
 		$this->assertPostsOrderedBy( '{posts}.post_modified DESC' );
 	}
@@ -408,36 +455,40 @@ class WP_Test_REST_Posts_Controller extends WP_Test_REST_Post_Type_Controller_Te
 		$response = rest_get_server()->dispatch( $request );
 		$data     = $response->get_data();
 
-		$this->assertEquals( 200, $response->get_status() );
-		$this->assertEquals( $id3, $data[0]['id'] );
+		$this->assertSame( 200, $response->get_status() );
+		$this->assertSame( $id3, $data[0]['id'] );
 		// Check ordering. Default ORDER is DESC.
-		$this->assertEquals( $id1, $data[0]['parent'] );
-		$this->assertEquals( 0, $data[1]['parent'] );
-		$this->assertEquals( 0, $data[2]['parent'] );
+		$this->assertSame( $id1, $data[0]['parent'] );
+		$this->assertSame( 0, $data[1]['parent'] );
+		$this->assertSame( 0, $data[2]['parent'] );
 
 		$this->assertPostsOrderedBy( '{posts}.post_parent DESC' );
 	}
 
 	public function test_get_items_exclude_query() {
-		$id1      = $this->factory->post->create( array( 'post_status' => 'publish' ) );
-		$id2      = $this->factory->post->create( array( 'post_status' => 'publish' ) );
+		$id1 = $this->factory->post->create( array( 'post_status' => 'publish' ) );
+		$id2 = $this->factory->post->create( array( 'post_status' => 'publish' ) );
+
 		$request  = new WP_REST_Request( 'GET', '/wp/v2/posts' );
 		$response = rest_get_server()->dispatch( $request );
 		$data     = $response->get_data();
-		$this->assertTrue( in_array( $id1, wp_list_pluck( $data, 'id' ), true ) );
-		$this->assertTrue( in_array( $id2, wp_list_pluck( $data, 'id' ), true ) );
+		$ids      = wp_list_pluck( $data, 'id' );
+		$this->assertTrue( in_array( $id1, $ids, true ) );
+		$this->assertTrue( in_array( $id2, $ids, true ) );
 
 		$request->set_param( 'exclude', array( $id2 ) );
 		$response = rest_get_server()->dispatch( $request );
 		$data     = $response->get_data();
-		$this->assertTrue( in_array( $id1, wp_list_pluck( $data, 'id' ), true ) );
-		$this->assertFalse( in_array( $id2, wp_list_pluck( $data, 'id' ), true ) );
+		$ids      = wp_list_pluck( $data, 'id' );
+		$this->assertTrue( in_array( $id1, $ids, true ) );
+		$this->assertFalse( in_array( $id2, $ids, true ) );
 
 		$request->set_param( 'exclude', "$id2" );
 		$response = rest_get_server()->dispatch( $request );
 		$data     = $response->get_data();
-		$this->assertTrue( in_array( $id1, wp_list_pluck( $data, 'id' ), true ) );
-		$this->assertFalse( in_array( $id2, wp_list_pluck( $data, 'id' ), true ) );
+		$ids      = wp_list_pluck( $data, 'id' );
+		$this->assertTrue( in_array( $id1, $ids, true ) );
+		$this->assertFalse( in_array( $id2, $ids, true ) );
 
 		$request->set_param( 'exclude', 'invalid' );
 		$response = rest_get_server()->dispatch( $request );
@@ -445,24 +496,25 @@ class WP_Test_REST_Posts_Controller extends WP_Test_REST_Post_Type_Controller_Te
 	}
 
 	public function test_get_items_search_query() {
-		for ( $i = 0;  $i < 5;  $i++ ) {
-			$this->factory->post->create( array( 'post_status' => 'publish' ) );
-		}
 		$this->factory->post->create(
 			array(
 				'post_title'  => 'Search Result',
 				'post_status' => 'publish',
 			)
 		);
-		$request  = new WP_REST_Request( 'GET', '/wp/v2/posts' );
+		$total_posts = self::$total_posts + 1;
+
+		$request = new WP_REST_Request( 'GET', '/wp/v2/posts' );
+		$request->set_param( 'per_page', self::$per_page );
 		$response = rest_get_server()->dispatch( $request );
-		$this->assertEquals( 7, count( $response->get_data() ) );
+		$this->assertSame( $total_posts, count( $response->get_data() ) );
+
 		$request = new WP_REST_Request( 'GET', '/wp/v2/posts' );
 		$request->set_param( 'search', 'Search Result' );
 		$response = rest_get_server()->dispatch( $request );
 		$data     = $response->get_data();
-		$this->assertEquals( 1, count( $data ) );
-		$this->assertEquals( 'Search Result', $data[0]['title']['rendered'] );
+		$this->assertSame( 1, count( $data ) );
+		$this->assertSame( 'Search Result', $data[0]['title']['rendered'] );
 	}
 
 	public function test_get_items_slug_query() {
@@ -478,13 +530,14 @@ class WP_Test_REST_Posts_Controller extends WP_Test_REST_Post_Type_Controller_Te
 				'post_status' => 'publish',
 			)
 		);
+
 		$request = new WP_REST_Request( 'GET', '/wp/v2/posts' );
 		$request->set_param( 'slug', 'apple' );
 		$response = rest_get_server()->dispatch( $request );
-		$this->assertEquals( 200, $response->get_status() );
+		$this->assertSame( 200, $response->get_status() );
 		$data = $response->get_data();
-		$this->assertEquals( 1, count( $data ) );
-		$this->assertEquals( 'Apple', $data[0]['title']['rendered'] );
+		$this->assertSame( 1, count( $data ) );
+		$this->assertSame( 'Apple', $data[0]['title']['rendered'] );
 	}
 
 	public function test_get_items_multiple_slugs_array_query() {
@@ -506,18 +559,19 @@ class WP_Test_REST_Posts_Controller extends WP_Test_REST_Post_Type_Controller_Te
 				'post_status' => 'publish',
 			)
 		);
+
 		$request = new WP_REST_Request( 'GET', '/wp/v2/posts' );
 		$request->set_param( 'slug', array( 'banana', 'peach' ) );
 		$response = rest_get_server()->dispatch( $request );
-		$this->assertEquals( 200, $response->get_status() );
+		$this->assertSame( 200, $response->get_status() );
 		$data = $response->get_data();
-		$this->assertEquals( 2, count( $data ) );
+		$this->assertSame( 2, count( $data ) );
 		$titles = array(
 			$data[0]['title']['rendered'],
 			$data[1]['title']['rendered'],
 		);
 		sort( $titles );
-		$this->assertEquals( array( 'Banana', 'Peach' ), $titles );
+		$this->assertSame( array( 'Banana', 'Peach' ), $titles );
 	}
 
 	public function test_get_items_multiple_slugs_string_query() {
@@ -539,38 +593,45 @@ class WP_Test_REST_Posts_Controller extends WP_Test_REST_Post_Type_Controller_Te
 				'post_status' => 'publish',
 			)
 		);
+
 		$request = new WP_REST_Request( 'GET', '/wp/v2/posts' );
 		$request->set_param( 'slug', 'apple,banana' );
 		$response = rest_get_server()->dispatch( $request );
-		$this->assertEquals( 200, $response->get_status() );
+		$this->assertSame( 200, $response->get_status() );
 		$data = $response->get_data();
-		$this->assertEquals( 2, count( $data ) );
+		$this->assertSame( 2, count( $data ) );
 		$titles = array(
 			$data[0]['title']['rendered'],
 			$data[1]['title']['rendered'],
 		);
 		sort( $titles );
-		$this->assertEquals( array( 'Apple', 'Banana' ), $titles );
+		$this->assertSame( array( 'Apple', 'Banana' ), $titles );
 	}
 
 	public function test_get_items_status_query() {
 		wp_set_current_user( 0 );
+
 		$this->factory->post->create( array( 'post_status' => 'draft' ) );
+
 		$request = new WP_REST_Request( 'GET', '/wp/v2/posts' );
+		$request->set_param( 'per_page', self::$per_page );
 		$request->set_param( 'status', 'publish' );
 		$response = rest_get_server()->dispatch( $request );
-		$this->assertEquals( 200, $response->get_status() );
-		$this->assertEquals( 1, count( $response->get_data() ) );
+		$this->assertSame( 200, $response->get_status() );
+		$this->assertSame( self::$total_posts, count( $response->get_data() ) );
+
 		$request = new WP_REST_Request( 'GET', '/wp/v2/posts' );
 		$request->set_param( 'status', 'draft' );
 		$response = rest_get_server()->dispatch( $request );
 		$this->assertErrorResponse( 'rest_invalid_param', $response, 400 );
+
 		wp_set_current_user( self::$editor_id );
+
 		$request = new WP_REST_Request( 'GET', '/wp/v2/posts' );
 		$request->set_param( 'status', 'draft' );
 		$response = rest_get_server()->dispatch( $request );
-		$this->assertEquals( 200, $response->get_status() );
-		$this->assertEquals( 1, count( $response->get_data() ) );
+		$this->assertSame( 200, $response->get_status() );
+		$this->assertSame( 1, count( $response->get_data() ) );
 	}
 
 	public function test_get_items_multiple_statuses_string_query() {
@@ -585,15 +646,15 @@ class WP_Test_REST_Posts_Controller extends WP_Test_REST_Post_Type_Controller_Te
 		$request->set_param( 'status', 'draft,private' );
 
 		$response = rest_get_server()->dispatch( $request );
-		$this->assertEquals( 200, $response->get_status() );
+		$this->assertSame( 200, $response->get_status() );
 		$data = $response->get_data();
-		$this->assertEquals( 2, count( $data ) );
+		$this->assertSame( 2, count( $data ) );
 		$statuses = array(
 			$data[0]['status'],
 			$data[1]['status'],
 		);
 		sort( $statuses );
-		$this->assertEquals( array( 'draft', 'private' ), $statuses );
+		$this->assertSame( array( 'draft', 'private' ), $statuses );
 	}
 
 	public function test_get_items_multiple_statuses_array_query() {
@@ -608,15 +669,15 @@ class WP_Test_REST_Posts_Controller extends WP_Test_REST_Post_Type_Controller_Te
 		$request->set_param( 'status', array( 'draft', 'pending' ) );
 
 		$response = rest_get_server()->dispatch( $request );
-		$this->assertEquals( 200, $response->get_status() );
+		$this->assertSame( 200, $response->get_status() );
 		$data = $response->get_data();
-		$this->assertEquals( 2, count( $data ) );
+		$this->assertSame( 2, count( $data ) );
 		$statuses = array(
 			$data[0]['status'],
 			$data[1]['status'],
 		);
 		sort( $statuses );
-		$this->assertEquals( array( 'draft', 'pending' ), $statuses );
+		$this->assertSame( array( 'draft', 'pending' ), $statuses );
 	}
 
 	public function test_get_items_multiple_statuses_one_invalid_query() {
@@ -634,6 +695,7 @@ class WP_Test_REST_Posts_Controller extends WP_Test_REST_Post_Type_Controller_Te
 		$private_post_id = $this->factory->post->create( array( 'post_status' => 'private' ) );
 
 		wp_set_current_user( self::$private_reader_id );
+
 		$request = new WP_REST_Request( 'GET', '/wp/v2/posts' );
 		$request->set_param( 'status', array( 'private', 'future' ) );
 
@@ -643,6 +705,7 @@ class WP_Test_REST_Posts_Controller extends WP_Test_REST_Post_Type_Controller_Te
 
 	public function test_get_items_invalid_status_query() {
 		wp_set_current_user( 0 );
+
 		$request = new WP_REST_Request( 'GET', '/wp/v2/posts' );
 		$request->set_param( 'status', 'invalid' );
 		$response = rest_get_server()->dispatch( $request );
@@ -655,12 +718,13 @@ class WP_Test_REST_Posts_Controller extends WP_Test_REST_Post_Type_Controller_Te
 				'post_status' => 'draft',
 			)
 		);
+
 		wp_set_current_user( 0 );
 
 		$request  = new WP_REST_Request( 'GET', '/wp/v2/posts' );
 		$response = rest_get_server()->dispatch( $request );
 
-		$this->assertEquals( 200, $response->get_status() );
+		$this->assertSame( 200, $response->get_status() );
 
 		$all_data = $response->get_data();
 		foreach ( $all_data as $post ) {
@@ -693,25 +757,30 @@ class WP_Test_REST_Posts_Controller extends WP_Test_REST_Post_Type_Controller_Te
 				'post_status' => 'publish',
 			)
 		);
+
 		$request = new WP_REST_Request( 'GET', '/wp/v2/posts' );
 		$request->set_param( 'search', 'Apple' );
-		// order defaults to 'desc'
+
+		// Order defaults to 'desc'.
 		$request->set_param( 'orderby', 'title' );
 		$response = rest_get_server()->dispatch( $request );
 		$data     = $response->get_data();
-		$this->assertEquals( 'Apple Sauce', $data[0]['title']['rendered'] );
+		$this->assertSame( 'Apple Sauce', $data[0]['title']['rendered'] );
 		$this->assertPostsOrderedBy( '{posts}.post_title DESC' );
-		// order=>asc
+
+		// 'order' => 'asc'.
 		$request->set_param( 'order', 'asc' );
 		$response = rest_get_server()->dispatch( $request );
 		$data     = $response->get_data();
-		$this->assertEquals( 'Apple Cobbler', $data[0]['title']['rendered'] );
+		$this->assertSame( 'Apple Cobbler', $data[0]['title']['rendered'] );
 		$this->assertPostsOrderedBy( '{posts}.post_title ASC' );
-		// order=>asc,id should fail
+
+		// 'order' => 'asc,id' should error.
 		$request->set_param( 'order', 'asc,id' );
 		$response = rest_get_server()->dispatch( $request );
 		$this->assertErrorResponse( 'rest_invalid_param', $response, 400 );
-		// orderby=>content should fail (invalid param test)
+
+		// 'orderby' => 'content' should error (invalid param test).
 		$request->set_param( 'order', 'asc' );
 		$request->set_param( 'orderby', 'content' );
 		$response = rest_get_server()->dispatch( $request );
@@ -720,6 +789,7 @@ class WP_Test_REST_Posts_Controller extends WP_Test_REST_Post_Type_Controller_Te
 
 	public function test_get_items_with_orderby_include_without_include_param() {
 		$this->factory->post->create( array( 'post_status' => 'publish' ) );
+
 		$request = new WP_REST_Request( 'GET', '/wp/v2/posts' );
 		$request->set_param( 'orderby', 'include' );
 
@@ -756,9 +826,9 @@ class WP_Test_REST_Posts_Controller extends WP_Test_REST_Post_Type_Controller_Te
 		$data     = $response->get_data();
 
 		// Default ORDER is DESC.
-		$this->assertEquals( $id3, $data[0]['id'] );
-		$this->assertEquals( $id2, $data[1]['id'] );
-		$this->assertEquals( $id1, $data[2]['id'] );
+		$this->assertSame( $id3, $data[0]['id'] );
+		$this->assertSame( $id2, $data[1]['id'] );
+		$this->assertSame( $id1, $data[2]['id'] );
 		$this->assertPostsOrderedBy( '{posts}.ID DESC' );
 	}
 
@@ -786,8 +856,8 @@ class WP_Test_REST_Posts_Controller extends WP_Test_REST_Post_Type_Controller_Te
 		$data     = $response->get_data();
 
 		// Default ORDER is DESC.
-		$this->assertEquals( 'xyz', $data[0]['slug'] );
-		$this->assertEquals( 'abc', $data[1]['slug'] );
+		$this->assertSame( 'xyz', $data[0]['slug'] );
+		$this->assertSame( 'abc', $data[1]['slug'] );
 		$this->assertPostsOrderedBy( '{posts}.post_name DESC' );
 	}
 
@@ -810,62 +880,64 @@ class WP_Test_REST_Posts_Controller extends WP_Test_REST_Post_Type_Controller_Te
 		$response = rest_get_server()->dispatch( $request );
 		$data     = $response->get_data();
 
-		$this->assertEquals( 'taco', $data[0]['slug'] );
-		$this->assertEquals( 'chalupa', $data[1]['slug'] );
-		$this->assertEquals( 'burrito', $data[2]['slug'] );
+		$this->assertSame( 'taco', $data[0]['slug'] );
+		$this->assertSame( 'chalupa', $data[1]['slug'] );
+		$this->assertSame( 'burrito', $data[2]['slug'] );
 	}
 
 	public function test_get_items_with_orderby_relevance() {
-		$id1     = $this->factory->post->create(
+		$id1 = $this->factory->post->create(
 			array(
 				'post_title'   => 'Title is more relevant',
 				'post_content' => 'Content is',
 				'post_status'  => 'publish',
 			)
 		);
-		$id2     = $this->factory->post->create(
+		$id2 = $this->factory->post->create(
 			array(
 				'post_title'   => 'Title is',
 				'post_content' => 'Content is less relevant',
 				'post_status'  => 'publish',
 			)
 		);
+
 		$request = new WP_REST_Request( 'GET', '/wp/v2/posts' );
 		$request->set_param( 'orderby', 'relevance' );
 		$request->set_param( 'search', 'relevant' );
 		$response = rest_get_server()->dispatch( $request );
-		$this->assertEquals( 200, $response->get_status() );
+		$this->assertSame( 200, $response->get_status() );
 		$data = $response->get_data();
 		$this->assertCount( 2, $data );
-		$this->assertEquals( $id1, $data[0]['id'] );
-		$this->assertEquals( $id2, $data[1]['id'] );
+		$this->assertSame( $id1, $data[0]['id'] );
+		$this->assertSame( $id2, $data[1]['id'] );
 		$this->assertPostsOrderedBy( '{posts}.post_title LIKE \'%relevant%\' DESC, {posts}.post_date DESC' );
 	}
 
 	public function test_get_items_with_orderby_relevance_two_terms() {
-		$id1     = $this->factory->post->create(
+		$id1 = $this->factory->post->create(
 			array(
 				'post_title'   => 'Title is more relevant',
 				'post_content' => 'Content is',
 				'post_status'  => 'publish',
 			)
 		);
-		$id2     = $this->factory->post->create(
+		$id2 = $this->factory->post->create(
 			array(
 				'post_title'   => 'Title is',
 				'post_content' => 'Content is less relevant',
 				'post_status'  => 'publish',
 			)
 		);
+
 		$request = new WP_REST_Request( 'GET', '/wp/v2/posts' );
 		$request->set_param( 'orderby', 'relevance' );
 		$request->set_param( 'search', 'relevant content' );
 		$response = rest_get_server()->dispatch( $request );
-		$this->assertEquals( 200, $response->get_status() );
+		$this->assertSame( 200, $response->get_status() );
 		$data = $response->get_data();
 		$this->assertCount( 2, $data );
-		$this->assertEquals( $id1, $data[0]['id'] );
-		$this->assertEquals( $id2, $data[1]['id'] );
+		$this->assertSame( $id1, $data[0]['id'] );
+		$this->assertSame( $id2, $data[1]['id'] );
 		$this->assertPostsOrderedBy( '(CASE WHEN {posts}.post_title LIKE \'%relevant content%\' THEN 1 WHEN {posts}.post_title LIKE \'%relevant%\' AND {posts}.post_title LIKE \'%content%\' THEN 2 WHEN {posts}.post_title LIKE \'%relevant%\' OR {posts}.post_title LIKE \'%content%\' THEN 3 WHEN {posts}.post_excerpt LIKE \'%relevant content%\' THEN 4 WHEN {posts}.post_content LIKE \'%relevant content%\' THEN 5 ELSE 6 END), {posts}.post_date DESC' );
 	}
 
@@ -877,23 +949,23 @@ class WP_Test_REST_Posts_Controller extends WP_Test_REST_Post_Type_Controller_Te
 	}
 
 	public function test_get_items_offset_query() {
-		$id1     = self::$post_id;
-		$id2     = $this->factory->post->create( array( 'post_status' => 'publish' ) );
-		$id3     = $this->factory->post->create( array( 'post_status' => 'publish' ) );
-		$id4     = $this->factory->post->create( array( 'post_status' => 'publish' ) );
 		$request = new WP_REST_Request( 'GET', '/wp/v2/posts' );
+		$request->set_param( 'per_page', self::$per_page );
 		$request->set_param( 'offset', 1 );
 		$response = rest_get_server()->dispatch( $request );
-		$this->assertCount( 3, $response->get_data() );
-		// 'offset' works with 'per_page'
+		$this->assertCount( self::$total_posts - 1, $response->get_data() );
+
+		// 'offset' works with 'per_page'.
 		$request->set_param( 'per_page', 2 );
 		$response = rest_get_server()->dispatch( $request );
 		$this->assertCount( 2, $response->get_data() );
-		// 'offset' takes priority over 'page'
+
+		// 'offset' takes priority over 'page'.
 		$request->set_param( 'page', 2 );
 		$response = rest_get_server()->dispatch( $request );
 		$this->assertCount( 2, $response->get_data() );
-		// Invalid 'offset' should error
+
+		// Invalid 'offset' should error.
 		$request->set_param( 'offset', 'moreplease' );
 		$response = rest_get_server()->dispatch( $request );
 		$this->assertErrorResponse( 'rest_invalid_param', $response, 400 );
@@ -901,19 +973,17 @@ class WP_Test_REST_Posts_Controller extends WP_Test_REST_Post_Type_Controller_Te
 
 	public function test_get_items_tags_query() {
 		$id1 = self::$post_id;
-		$id2 = $this->factory->post->create( array( 'post_status' => 'publish' ) );
-		$id3 = $this->factory->post->create( array( 'post_status' => 'publish' ) );
-		$id4 = $this->factory->post->create( array( 'post_status' => 'publish' ) );
 		$tag = wp_insert_term( 'My Tag', 'post_tag' );
 
 		wp_set_object_terms( $id1, array( $tag['term_id'] ), 'post_tag' );
+
 		$request = new WP_REST_Request( 'GET', '/wp/v2/posts' );
 		$request->set_param( 'tags', array( $tag['term_id'] ) );
 
 		$response = rest_get_server()->dispatch( $request );
 		$data     = $response->get_data();
 		$this->assertCount( 1, $data );
-		$this->assertEquals( $id1, $data[0]['id'] );
+		$this->assertSame( $id1, $data[0]['id'] );
 	}
 
 	public function test_get_items_tags_exclude_query() {
@@ -923,23 +993,25 @@ class WP_Test_REST_Posts_Controller extends WP_Test_REST_Post_Type_Controller_Te
 		$id4 = $this->factory->post->create( array( 'post_status' => 'publish' ) );
 		$tag = wp_insert_term( 'My Tag', 'post_tag' );
 
+		$total_posts = self::$total_posts + 3;
+
 		wp_set_object_terms( $id1, array( $tag['term_id'] ), 'post_tag' );
+
 		$request = new WP_REST_Request( 'GET', '/wp/v2/posts' );
+		$request->set_param( 'per_page', self::$per_page );
 		$request->set_param( 'tags_exclude', array( $tag['term_id'] ) );
 
 		$response = rest_get_server()->dispatch( $request );
 		$data     = $response->get_data();
-		$this->assertCount( 3, $data );
-		$this->assertEquals( $id4, $data[0]['id'] );
-		$this->assertEquals( $id3, $data[1]['id'] );
-		$this->assertEquals( $id2, $data[2]['id'] );
+		$this->assertCount( $total_posts - 1, $data );
+		$this->assertSame( $id4, $data[0]['id'] );
+		$this->assertSame( $id3, $data[1]['id'] );
+		$this->assertSame( $id2, $data[2]['id'] );
 	}
 
 	public function test_get_items_tags_and_categories_query() {
 		$id1      = self::$post_id;
 		$id2      = $this->factory->post->create( array( 'post_status' => 'publish' ) );
-		$id3      = $this->factory->post->create( array( 'post_status' => 'publish' ) );
-		$id4      = $this->factory->post->create( array( 'post_status' => 'publish' ) );
 		$tag      = wp_insert_term( 'My Tag', 'post_tag' );
 		$category = wp_insert_term( 'My Category', 'category' );
 
@@ -959,11 +1031,34 @@ class WP_Test_REST_Posts_Controller extends WP_Test_REST_Post_Type_Controller_Te
 		$this->assertErrorResponse( 'rest_invalid_param', $response, 400 );
 	}
 
+	/**
+	 * @ticket 44326
+	 */
+	public function test_get_items_tags_or_categories_query() {
+		$id1      = self::$post_id;
+		$id2      = $this->factory->post->create( array( 'post_status' => 'publish' ) );
+		$tag      = wp_insert_term( 'My Tag', 'post_tag' );
+		$category = wp_insert_term( 'My Category', 'category' );
+
+		wp_set_object_terms( $id1, array( $tag['term_id'] ), 'post_tag' );
+		wp_set_object_terms( $id2, array( $category['term_id'] ), 'category' );
+
+		$request = new WP_REST_Request( 'GET', '/wp/v2/posts' );
+		$request->set_param( 'tax_relation', 'OR' );
+		$request->set_param( 'tags', array( $tag['term_id'] ) );
+		$request->set_param( 'categories', array( $category['term_id'] ) );
+		$request->set_param( 'orderby', 'id' );
+
+		$response = rest_get_server()->dispatch( $request );
+		$data     = $response->get_data();
+		$this->assertCount( 2, $data );
+		$this->assertSame( $id2, $data[0]['id'] );
+		$this->assertSame( $id1, $data[1]['id'] );
+	}
+
 	public function test_get_items_tags_and_categories_exclude_query() {
 		$id1      = self::$post_id;
 		$id2      = $this->factory->post->create( array( 'post_status' => 'publish' ) );
-		$id3      = $this->factory->post->create( array( 'post_status' => 'publish' ) );
-		$id4      = $this->factory->post->create( array( 'post_status' => 'publish' ) );
 		$tag      = wp_insert_term( 'My Tag', 'post_tag' );
 		$category = wp_insert_term( 'My Category', 'category' );
 
@@ -978,13 +1073,60 @@ class WP_Test_REST_Posts_Controller extends WP_Test_REST_Post_Type_Controller_Te
 		$response = rest_get_server()->dispatch( $request );
 		$data     = $response->get_data();
 		$this->assertCount( 1, $data );
-		$this->assertEquals( $id2, $data[0]['id'] );
+		$this->assertSame( $id2, $data[0]['id'] );
 
 		$request->set_param( 'tags_exclude', array( 'my-tag' ) );
 		$response = rest_get_server()->dispatch( $request );
 		$this->assertErrorResponse( 'rest_invalid_param', $response, 400 );
 	}
 
+	/**
+	 * @ticket 44326
+	 */
+	public function test_get_items_tags_or_categories_exclude_query() {
+		$id1      = end( self::$post_ids );
+		$id2      = $this->factory->post->create( array( 'post_status' => 'publish' ) );
+		$id3      = $this->factory->post->create( array( 'post_status' => 'publish' ) );
+		$id4      = $this->factory->post->create( array( 'post_status' => 'publish' ) );
+		$tag      = wp_insert_term( 'My Tag', 'post_tag' );
+		$category = wp_insert_term( 'My Category', 'category' );
+
+		$total_posts = self::$total_posts + 3;
+
+		wp_set_object_terms( $id1, array( $tag['term_id'] ), 'post_tag' );
+		wp_set_object_terms( $id2, array( $tag['term_id'] ), 'post_tag' );
+		wp_set_object_terms( $id2, array( $category['term_id'] ), 'category' );
+		wp_set_object_terms( $id3, array( $category['term_id'] ), 'category' );
+
+		$request = new WP_REST_Request( 'GET', '/wp/v2/posts' );
+		$request->set_param( 'per_page', self::$per_page );
+		$request->set_param( 'tags', array( $tag['term_id'] ) );
+		$request->set_param( 'categories_exclude', array( $category['term_id'] ) );
+		$request->set_param( 'tax_relation', 'OR' );
+		$request->set_param( 'orderby', 'id' );
+
+		$response = rest_get_server()->dispatch( $request );
+		$data     = $response->get_data();
+		$this->assertCount( $total_posts - 1, $data );
+		$this->assertSame( $id4, $data[0]['id'] );
+		$this->assertSame( $id2, $data[1]['id'] );
+		$this->assertSame( $id1, $data[2]['id'] );
+	}
+
+	/**
+	 * @ticket 44326
+	 */
+	public function test_get_items_relation_with_no_tax_query() {
+		$request = new WP_REST_Request( 'GET', '/wp/v2/posts' );
+		$request->set_param( 'tax_relation', 'OR' );
+		$request->set_param( 'include', self::$post_id );
+
+		$response = rest_get_server()->dispatch( $request );
+		$this->assertSame( 200, $response->get_status() );
+		$this->assertCount( 1, $response->get_data() );
+		$this->assertSame( self::$post_id, $response->get_data()[0]['id'] );
+	}
+
 	public function test_get_items_sticky() {
 		$id1 = self::$post_id;
 		$id2 = $this->factory->post->create( array( 'post_status' => 'publish' ) );
@@ -999,7 +1141,7 @@ class WP_Test_REST_Posts_Controller extends WP_Test_REST_Post_Type_Controller_Te
 
 		$posts = $response->get_data();
 		$post  = $posts[0];
-		$this->assertEquals( $id2, $post['id'] );
+		$this->assertSame( $id2, $post['id'] );
 
 		$request->set_param( 'sticky', 'nothanks' );
 		$response = rest_get_server()->dispatch( $request );
@@ -1009,7 +1151,6 @@ class WP_Test_REST_Posts_Controller extends WP_Test_REST_Post_Type_Controller_Te
 	public function test_get_items_sticky_with_include() {
 		$id1 = self::$post_id;
 		$id2 = $this->factory->post->create( array( 'post_status' => 'publish' ) );
-		$id3 = $this->factory->post->create( array( 'post_status' => 'publish' ) );
 
 		update_option( 'sticky_posts', array( $id2 ) );
 
@@ -1038,14 +1179,12 @@ class WP_Test_REST_Posts_Controller extends WP_Test_REST_Post_Type_Controller_Te
 
 		$posts = $response->get_data();
 		$post  = $posts[0];
-		$this->assertEquals( $id1, $post['id'] );
+		$this->assertSame( $id1, $post['id'] );
 
 		$this->assertPostsWhere( " AND {posts}.ID IN ($id1) AND {posts}.post_type = 'post' AND (({posts}.post_status = 'publish'))" );
 	}
 
 	public function test_get_items_sticky_no_sticky_posts() {
-		$id1 = self::$post_id;
-
 		update_option( 'sticky_posts', array() );
 
 		$request = new WP_REST_Request( 'GET', '/wp/v2/posts' );
@@ -1081,41 +1220,49 @@ class WP_Test_REST_Posts_Controller extends WP_Test_REST_Post_Type_Controller_Te
 	}
 
 	public function test_get_items_not_sticky() {
-		$id1 = self::$post_id;
+		$id1 = end( self::$post_ids );
 		$id2 = $this->factory->post->create( array( 'post_status' => 'publish' ) );
 
+		$total_posts = self::$total_posts + 1;
+
 		update_option( 'sticky_posts', array( $id2 ) );
 
 		$request = new WP_REST_Request( 'GET', '/wp/v2/posts' );
+		$request->set_param( 'per_page', self::$per_page );
 		$request->set_param( 'sticky', false );
 
 		$response = rest_get_server()->dispatch( $request );
-		$this->assertCount( 1, $response->get_data() );
+		$this->assertCount( $total_posts - 1, $response->get_data() );
 
 		$posts = $response->get_data();
 		$post  = $posts[0];
-		$this->assertEquals( $id1, $post['id'] );
+		$this->assertSame( $id1, $post['id'] );
 
 		$this->assertPostsWhere( " AND {posts}.ID NOT IN ($id2) AND {posts}.post_type = 'post' AND (({posts}.post_status = 'publish'))" );
 	}
 
 	public function test_get_items_not_sticky_with_exclude() {
-		$id1 = self::$post_id;
+		$id1 = end( self::$post_ids );
 		$id2 = $this->factory->post->create( array( 'post_status' => 'publish' ) );
 		$id3 = $this->factory->post->create( array( 'post_status' => 'publish' ) );
 
+		$total_posts = self::$total_posts + 2;
+
 		update_option( 'sticky_posts', array( $id2 ) );
 
 		$request = new WP_REST_Request( 'GET', '/wp/v2/posts' );
+		$request->set_param( 'per_page', self::$per_page );
 		$request->set_param( 'sticky', false );
 		$request->set_param( 'exclude', array( $id3 ) );
 
 		$response = rest_get_server()->dispatch( $request );
-		$this->assertCount( 1, $response->get_data() );
+		$this->assertCount( $total_posts - 2, $response->get_data() );
 
 		$posts = $response->get_data();
-		$post  = $posts[0];
-		$this->assertEquals( $id1, $post['id'] );
+		$ids   = wp_list_pluck( $posts, 'id' );
+		$this->assertTrue( in_array( $id1, $ids, true ) );
+		$this->assertFalse( in_array( $id2, $ids, true ) );
+		$this->assertFalse( in_array( $id3, $ids, true ) );
 
 		$this->assertPostsWhere( " AND {posts}.ID NOT IN ($id3,$id2) AND {posts}.post_type = 'post' AND (({posts}.post_status = 'publish'))" );
 	}
@@ -1125,37 +1272,37 @@ class WP_Test_REST_Posts_Controller extends WP_Test_REST_Post_Type_Controller_Te
 		$id2 = $this->factory->post->create( array( 'post_status' => 'publish' ) );
 		$id3 = $this->factory->post->create( array( 'post_status' => 'publish' ) );
 
+		$total_posts = self::$total_posts + 2;
+
 		update_option( 'sticky_posts', array() );
 
 		$request = new WP_REST_Request( 'GET', '/wp/v2/posts' );
+		$request->set_param( 'per_page', self::$per_page );
 		$request->set_param( 'sticky', false );
 		$request->set_param( 'exclude', array( $id3 ) );
 
 		$response = rest_get_server()->dispatch( $request );
-		$this->assertCount( 2, $response->get_data() );
+		$this->assertCount( $total_posts - 1, $response->get_data() );
 
 		$posts = $response->get_data();
 		$ids   = wp_list_pluck( $posts, 'id' );
-		sort( $ids );
-		$this->assertEquals( array( $id1, $id2 ), $ids );
+		$this->assertTrue( in_array( $id1, $ids, true ) );
+		$this->assertTrue( in_array( $id2, $ids, true ) );
+		$this->assertFalse( in_array( $id3, $ids, true ) );
 
 		$this->assertPostsWhere( " AND {posts}.ID NOT IN ($id3) AND {posts}.post_type = 'post' AND (({posts}.post_status = 'publish'))" );
 	}
 
 	public function test_get_items_pagination_headers() {
-		// Start of the index
-		for ( $i = 0; $i < 49; $i++ ) {
-			$this->factory->post->create(
-				array(
-					'post_title' => "Post {$i}",
-				)
-			);
-		}
+		$total_posts = self::$total_posts;
+		$total_pages = (int) ceil( $total_posts / 10 );
+
+		// Start of the index.
 		$request  = new WP_REST_Request( 'GET', '/wp/v2/posts' );
 		$response = rest_get_server()->dispatch( $request );
 		$headers  = $response->get_headers();
-		$this->assertEquals( 50, $headers['X-WP-Total'] );
-		$this->assertEquals( 5, $headers['X-WP-TotalPages'] );
+		$this->assertSame( $total_posts, $headers['X-WP-Total'] );
+		$this->assertSame( $total_pages, $headers['X-WP-TotalPages'] );
 		$next_link = add_query_arg(
 			array(
 				'page' => 2,
@@ -1164,18 +1311,17 @@ class WP_Test_REST_Posts_Controller extends WP_Test_REST_Post_Type_Controller_Te
 		);
 		$this->assertFalse( stripos( $headers['Link'], 'rel="prev"' ) );
 		$this->assertContains( '<' . $next_link . '>; rel="next"', $headers['Link'] );
-		// 3rd page
-		$this->factory->post->create(
-			array(
-				'post_title' => 'Post 51',
-			)
-		);
+
+		// 3rd page.
+		$this->factory->post->create();
+		$total_posts++;
+		$total_pages++;
 		$request = new WP_REST_Request( 'GET', '/wp/v2/posts' );
 		$request->set_param( 'page', 3 );
 		$response = rest_get_server()->dispatch( $request );
 		$headers  = $response->get_headers();
-		$this->assertEquals( 51, $headers['X-WP-Total'] );
-		$this->assertEquals( 6, $headers['X-WP-TotalPages'] );
+		$this->assertSame( $total_posts, $headers['X-WP-Total'] );
+		$this->assertSame( $total_pages, $headers['X-WP-TotalPages'] );
 		$prev_link = add_query_arg(
 			array(
 				'page' => 2,
@@ -1190,31 +1336,33 @@ class WP_Test_REST_Posts_Controller extends WP_Test_REST_Post_Type_Controller_Te
 			rest_url( '/wp/v2/posts' )
 		);
 		$this->assertContains( '<' . $next_link . '>; rel="next"', $headers['Link'] );
-		// Last page
+
+		// Last page.
 		$request = new WP_REST_Request( 'GET', '/wp/v2/posts' );
-		$request->set_param( 'page', 6 );
+		$request->set_param( 'page', $total_pages );
 		$response = rest_get_server()->dispatch( $request );
 		$headers  = $response->get_headers();
-		$this->assertEquals( 51, $headers['X-WP-Total'] );
-		$this->assertEquals( 6, $headers['X-WP-TotalPages'] );
+		$this->assertSame( $total_posts, $headers['X-WP-Total'] );
+		$this->assertSame( $total_pages, $headers['X-WP-TotalPages'] );
 		$prev_link = add_query_arg(
 			array(
-				'page' => 5,
+				'page' => $total_pages - 1,
 			),
 			rest_url( '/wp/v2/posts' )
 		);
 		$this->assertContains( '<' . $prev_link . '>; rel="prev"', $headers['Link'] );
 		$this->assertFalse( stripos( $headers['Link'], 'rel="next"' ) );
 
-		// Out of bounds
+		// Out of bounds.
 		$request = new WP_REST_Request( 'GET', '/wp/v2/posts' );
-		$request->set_param( 'page', 8 );
+		$request->set_param( 'page', 100 );
 		$response = rest_get_server()->dispatch( $request );
 		$headers  = $response->get_headers();
 		$this->assertErrorResponse( 'rest_post_invalid_page_number', $response, 400 );
 
 		// With query params.
-		$request = new WP_REST_Request( 'GET', '/wp/v2/posts' );
+		$total_pages = (int) ceil( $total_posts / 5 );
+		$request     = new WP_REST_Request( 'GET', '/wp/v2/posts' );
 		$request->set_query_params(
 			array(
 				'per_page' => 5,
@@ -1223,8 +1371,8 @@ class WP_Test_REST_Posts_Controller extends WP_Test_REST_Post_Type_Controller_Te
 		);
 		$response = rest_get_server()->dispatch( $request );
 		$headers  = $response->get_headers();
-		$this->assertEquals( 51, $headers['X-WP-Total'] );
-		$this->assertEquals( 11, $headers['X-WP-TotalPages'] );
+		$this->assertSame( $total_posts, $headers['X-WP-Total'] );
+		$this->assertSame( $total_pages, $headers['X-WP-TotalPages'] );
 		$prev_link = add_query_arg(
 			array(
 				'per_page' => 5,
@@ -1248,6 +1396,7 @@ class WP_Test_REST_Posts_Controller extends WP_Test_REST_Post_Type_Controller_Te
 
 		// Drafts status query var inaccessible to unauthorized users.
 		wp_set_current_user( 0 );
+
 		$request = new WP_REST_Request( 'GET', '/wp/v2/posts' );
 		$request->set_param( 'status', 'draft' );
 		$response = rest_get_server()->dispatch( $request );
@@ -1255,6 +1404,7 @@ class WP_Test_REST_Posts_Controller extends WP_Test_REST_Post_Type_Controller_Te
 
 		// Users with 'read_private_posts' cap shouldn't also be able to view drafts.
 		wp_set_current_user( self::$private_reader_id );
+
 		$request = new WP_REST_Request( 'GET', '/wp/v2/posts' );
 		$request->set_param( 'status', 'draft' );
 		$response = rest_get_server()->dispatch( $request );
@@ -1262,10 +1412,10 @@ class WP_Test_REST_Posts_Controller extends WP_Test_REST_Post_Type_Controller_Te
 
 		// But drafts are accessible to authorized users.
 		wp_set_current_user( self::$editor_id );
+
 		$response = rest_get_server()->dispatch( $request );
 		$data     = $response->get_data();
-
-		$this->assertEquals( $draft_id, $data[0]['id'] );
+		$this->assertSame( $draft_id, $data[0]['id'] );
 	}
 
 	/**
@@ -1275,20 +1425,22 @@ class WP_Test_REST_Posts_Controller extends WP_Test_REST_Post_Type_Controller_Te
 		$private_post_id = $this->factory->post->create( array( 'post_status' => 'private' ) );
 
 		wp_set_current_user( 0 );
+
 		$request = new WP_REST_Request( 'GET', '/wp/v2/posts' );
 		$request->set_param( 'status', 'private' );
 		$response = rest_get_server()->dispatch( $request );
 		$this->assertErrorResponse( 'rest_invalid_param', $response, 400 );
 
 		wp_set_current_user( self::$private_reader_id );
+
 		$request = new WP_REST_Request( 'GET', '/wp/v2/posts' );
 		$request->set_param( 'status', 'private' );
 
 		$response = rest_get_server()->dispatch( $request );
 		$data     = $response->get_data();
-		$this->assertEquals( 200, $response->get_status() );
+		$this->assertSame( 200, $response->get_status() );
 		$this->assertCount( 1, $data );
-		$this->assertEquals( $private_post_id, $data[0]['id'] );
+		$this->assertSame( $private_post_id, $data[0]['id'] );
 	}
 
 	public function test_get_items_invalid_per_page() {
@@ -1302,7 +1454,7 @@ class WP_Test_REST_Posts_Controller extends WP_Test_REST_Post_Type_Controller_Te
 	 * @ticket 39061
 	 */
 	public function test_get_items_invalid_max_pages() {
-		// Out of bounds
+		// Out of bounds.
 		$request = new WP_REST_Request( 'GET', '/wp/v2/posts' );
 		$request->set_param( 'page', REST_TESTS_IMPOSSIBLY_HIGH_NUMBER );
 		$response = rest_get_server()->dispatch( $request );
@@ -1335,7 +1487,7 @@ class WP_Test_REST_Posts_Controller extends WP_Test_REST_Post_Type_Controller_Te
 		$response = rest_get_server()->dispatch( $request );
 		$data     = $response->get_data();
 		$this->assertCount( 1, $data );
-		$this->assertEquals( $post2, $data[0]['id'] );
+		$this->assertSame( $post2, $data[0]['id'] );
 	}
 
 	public function test_get_items_all_post_formats() {
@@ -1345,7 +1497,7 @@ class WP_Test_REST_Posts_Controller extends WP_Test_REST_Post_Type_Controller_Te
 
 		$formats = array_values( get_post_format_slugs() );
 
-		$this->assertEquals( $formats, $data['schema']['properties']['format']['enum'] );
+		$this->assertSame( $formats, $data['schema']['properties']['format']['enum'] );
 	}
 
 	public function test_get_item() {
@@ -1361,23 +1513,23 @@ class WP_Test_REST_Posts_Controller extends WP_Test_REST_Post_Type_Controller_Te
 
 		$links = $response->get_links();
 
-		$this->assertEquals( rest_url( '/wp/v2/posts/' . self::$post_id ), $links['self'][0]['href'] );
-		$this->assertEquals( rest_url( '/wp/v2/posts' ), $links['collection'][0]['href'] );
+		$this->assertSame( rest_url( '/wp/v2/posts/' . self::$post_id ), $links['self'][0]['href'] );
+		$this->assertSame( rest_url( '/wp/v2/posts' ), $links['collection'][0]['href'] );
 		$this->assertArrayNotHasKey( 'embeddable', $links['self'][0]['attributes'] );
 
-		$this->assertEquals( rest_url( '/wp/v2/types/' . get_post_type( self::$post_id ) ), $links['about'][0]['href'] );
+		$this->assertSame( rest_url( '/wp/v2/types/' . get_post_type( self::$post_id ) ), $links['about'][0]['href'] );
 
 		$replies_url = rest_url( '/wp/v2/comments' );
 		$replies_url = add_query_arg( 'post', self::$post_id, $replies_url );
-		$this->assertEquals( $replies_url, $links['replies'][0]['href'] );
+		$this->assertSame( $replies_url, $links['replies'][0]['href'] );
 
-		$this->assertEquals( rest_url( '/wp/v2/posts/' . self::$post_id . '/revisions' ), $links['version-history'][0]['href'] );
-		$this->assertEquals( 0, $links['version-history'][0]['attributes']['count'] );
+		$this->assertSame( rest_url( '/wp/v2/posts/' . self::$post_id . '/revisions' ), $links['version-history'][0]['href'] );
+		$this->assertSame( 0, $links['version-history'][0]['attributes']['count'] );
 		$this->assertFalse( isset( $links['predecessor-version'] ) );
 
 		$attachments_url = rest_url( '/wp/v2/media' );
 		$attachments_url = add_query_arg( 'parent', self::$post_id, $attachments_url );
-		$this->assertEquals( $attachments_url, $links['https://api.w.org/attachment'][0]['href'] );
+		$this->assertSame( $attachments_url, $links['https://api.w.org/attachment'][0]['href'] );
 
 		$term_links  = $links['https://api.w.org/term'];
 		$tag_link    = null;
@@ -1397,10 +1549,10 @@ class WP_Test_REST_Posts_Controller extends WP_Test_REST_Post_Type_Controller_Te
 		$this->assertNull( $format_link );
 
 		$tags_url = add_query_arg( 'post', self::$post_id, rest_url( '/wp/v2/tags' ) );
-		$this->assertEquals( $tags_url, $tag_link['href'] );
+		$this->assertSame( $tags_url, $tag_link['href'] );
 
 		$category_url = add_query_arg( 'post', self::$post_id, rest_url( '/wp/v2/categories' ) );
-		$this->assertEquals( $category_url, $cat_link['href'] );
+		$this->assertSame( $category_url, $cat_link['href'] );
 	}
 
 	public function test_get_item_links_predecessor() {
@@ -1418,11 +1570,11 @@ class WP_Test_REST_Posts_Controller extends WP_Test_REST_Post_Type_Controller_Te
 
 		$links = $response->get_links();
 
-		$this->assertEquals( rest_url( '/wp/v2/posts/' . self::$post_id . '/revisions' ), $links['version-history'][0]['href'] );
-		$this->assertEquals( 1, $links['version-history'][0]['attributes']['count'] );
+		$this->assertSame( rest_url( '/wp/v2/posts/' . self::$post_id . '/revisions' ), $links['version-history'][0]['href'] );
+		$this->assertSame( 1, $links['version-history'][0]['attributes']['count'] );
 
-		$this->assertEquals( rest_url( '/wp/v2/posts/' . self::$post_id . '/revisions/' . $revision_1->ID ), $links['predecessor-version'][0]['href'] );
-		$this->assertEquals( $revision_1->ID, $links['predecessor-version'][0]['attributes']['id'] );
+		$this->assertSame( rest_url( '/wp/v2/posts/' . self::$post_id . '/revisions/' . $revision_1->ID ), $links['predecessor-version'][0]['href'] );
+		$this->assertSame( $revision_1->ID, $links['predecessor-version'][0]['attributes']['id'] );
 	}
 
 	public function test_get_item_links_no_author() {
@@ -1439,7 +1591,7 @@ class WP_Test_REST_Posts_Controller extends WP_Test_REST_Post_Type_Controller_Te
 		$request  = new WP_REST_Request( 'GET', sprintf( '/wp/v2/posts/%d', self::$post_id ) );
 		$response = rest_get_server()->dispatch( $request );
 		$links    = $response->get_links();
-		$this->assertEquals( rest_url( '/wp/v2/users/' . self::$author_id ), $links['author'][0]['href'] );
+		$this->assertSame( rest_url( '/wp/v2/users/' . self::$author_id ), $links['author'][0]['href'] );
 	}
 
 	public function test_get_post_draft_status_not_authenicated() {
@@ -1448,6 +1600,7 @@ class WP_Test_REST_Posts_Controller extends WP_Test_REST_Post_Type_Controller_Te
 				'post_status' => 'draft',
 			)
 		);
+
 		wp_set_current_user( 0 );
 
 		$request  = new WP_REST_Request( 'GET', sprintf( '/wp/v2/posts/%d', $draft_id ) );
@@ -1480,6 +1633,7 @@ class WP_Test_REST_Posts_Controller extends WP_Test_REST_Post_Type_Controller_Te
 
 	public function test_get_post_list_context_without_permission() {
 		wp_set_current_user( 0 );
+
 		$request = new WP_REST_Request( 'GET', '/wp/v2/posts' );
 		$request->set_query_params(
 			array(
@@ -1493,6 +1647,7 @@ class WP_Test_REST_Posts_Controller extends WP_Test_REST_Post_Type_Controller_Te
 
 	public function test_get_post_context_without_permission() {
 		wp_set_current_user( 0 );
+
 		$request = new WP_REST_Request( 'GET', sprintf( '/wp/v2/posts/%d', self::$post_id ) );
 		$request->set_query_params(
 			array(
@@ -1517,9 +1672,9 @@ class WP_Test_REST_Posts_Controller extends WP_Test_REST_Post_Type_Controller_Te
 		$this->check_get_post_response( $response, 'view' );
 
 		$data = $response->get_data();
-		$this->assertEquals( '', $data['content']['rendered'] );
+		$this->assertSame( '', $data['content']['rendered'] );
 		$this->assertTrue( $data['content']['protected'] );
-		$this->assertEquals( '', $data['excerpt']['rendered'] );
+		$this->assertSame( '', $data['excerpt']['rendered'] );
 		$this->assertTrue( $data['excerpt']['protected'] );
 	}
 
@@ -1532,7 +1687,8 @@ class WP_Test_REST_Posts_Controller extends WP_Test_REST_Post_Type_Controller_Te
 			)
 		);
 
-		$post    = get_post( $post_id );
+		$post = get_post( $post_id );
+
 		$request = new WP_REST_Request( 'GET', sprintf( '/wp/v2/posts/%d', $post_id ) );
 		$request->set_param( 'password', '$inthebananastand' );
 		$response = rest_get_server()->dispatch( $request );
@@ -1540,9 +1696,9 @@ class WP_Test_REST_Posts_Controller extends WP_Test_REST_Post_Type_Controller_Te
 		$this->check_get_post_response( $response, 'view' );
 
 		$data = $response->get_data();
-		$this->assertEquals( wpautop( $post->post_content ), $data['content']['rendered'] );
+		$this->assertSame( wpautop( $post->post_content ), $data['content']['rendered'] );
 		$this->assertTrue( $data['content']['protected'] );
-		$this->assertEquals( wpautop( $post->post_excerpt ), $data['excerpt']['rendered'] );
+		$this->assertSame( wpautop( $post->post_excerpt ), $data['excerpt']['rendered'] );
 		$this->assertTrue( $data['excerpt']['protected'] );
 	}
 
@@ -1553,7 +1709,8 @@ class WP_Test_REST_Posts_Controller extends WP_Test_REST_Post_Type_Controller_Te
 			)
 		);
 
-		$post    = get_post( $post_id );
+		$post = get_post( $post_id );
+
 		$request = new WP_REST_Request( 'GET', sprintf( '/wp/v2/posts/%d', $post_id ) );
 		$request->set_param( 'password', 'wrongpassword' );
 		$response = rest_get_server()->dispatch( $request );
@@ -1562,20 +1719,21 @@ class WP_Test_REST_Posts_Controller extends WP_Test_REST_Post_Type_Controller_Te
 	}
 
 	public function test_get_post_with_password_without_permission() {
-		$post_id  = $this->factory->post->create(
+		$post_id = $this->factory->post->create(
 			array(
 				'post_password' => '$inthebananastand',
 				'post_content'  => 'Some secret content.',
 				'post_excerpt'  => 'Some secret excerpt.',
 			)
 		);
+
 		$request  = new WP_REST_Request( 'GET', sprintf( '/wp/v2/posts/%d', $post_id ) );
 		$response = rest_get_server()->dispatch( $request );
 		$data     = $response->get_data();
 		$this->check_get_post_response( $response, 'view' );
-		$this->assertEquals( '', $data['content']['rendered'] );
+		$this->assertSame( '', $data['content']['rendered'] );
 		$this->assertTrue( $data['content']['protected'] );
-		$this->assertEquals( '', $data['excerpt']['rendered'] );
+		$this->assertSame( '', $data['excerpt']['rendered'] );
 		$this->assertTrue( $data['excerpt']['protected'] );
 	}
 
@@ -1631,6 +1789,7 @@ class WP_Test_REST_Posts_Controller extends WP_Test_REST_Post_Type_Controller_Te
 				'post_content' => '<hr />',
 			)
 		);
+
 		$request = new WP_REST_Request( 'GET', sprintf( '/wp/v2/posts/%d', $post_id ) );
 		$request->set_param( 'context', 'edit' );
 		$response = rest_get_server()->dispatch( $request );
@@ -1641,26 +1800,30 @@ class WP_Test_REST_Posts_Controller extends WP_Test_REST_Post_Type_Controller_Te
 	public function test_get_item_read_permission_custom_post_status_not_authenticated() {
 		register_post_status( 'testpubstatus', array( 'public' => true ) );
 		register_post_status( 'testprivtatus', array( 'public' => false ) );
-		// Public status
+
+		// Public status.
 		wp_update_post(
 			array(
 				'ID'          => self::$post_id,
 				'post_status' => 'testpubstatus',
 			)
 		);
+
 		$request  = new WP_REST_Request( 'GET', sprintf( '/wp/v2/posts/%d', self::$post_id ) );
 		$response = rest_get_server()->dispatch( $request );
-		$this->assertEquals( 200, $response->get_status() );
-		// Private status
+		$this->assertSame( 200, $response->get_status() );
+
+		// Private status.
 		wp_update_post(
 			array(
 				'ID'          => self::$post_id,
 				'post_status' => 'testprivtatus',
 			)
 		);
+
 		$request  = new WP_REST_Request( 'GET', sprintf( '/wp/v2/posts/%d', self::$post_id ) );
 		$response = rest_get_server()->dispatch( $request );
-		$this->assertEquals( 401, $response->get_status() );
+		$this->assertSame( 401, $response->get_status() );
 	}
 
 	public function test_prepare_item() {
@@ -1675,13 +1838,14 @@ class WP_Test_REST_Posts_Controller extends WP_Test_REST_Post_Type_Controller_Te
 
 	public function test_prepare_item_limit_fields() {
 		wp_set_current_user( self::$editor_id );
+
 		$endpoint = new WP_REST_Posts_Controller( 'post' );
 		$request  = new WP_REST_Request( 'GET', sprintf( '/wp/v2/posts/%d', self::$post_id ) );
 		$request->set_param( 'context', 'edit' );
 		$request->set_param( '_fields', 'id,slug' );
 		$obj      = get_post( self::$post_id );
 		$response = $endpoint->prepare_item_for_response( $obj, $request );
-		$this->assertEquals(
+		$this->assertSame(
 			array(
 				'id',
 				'slug',
@@ -1702,8 +1866,9 @@ class WP_Test_REST_Posts_Controller extends WP_Test_REST_Post_Type_Controller_Te
 		add_filter( 'the_content', $filter_content );
 
 		wp_set_current_user( self::$editor_id );
+
 		$endpoint = new WP_REST_Posts_Controller( 'post' );
-		$request  = new WP_REST_REQUEST( 'GET', sprintf( '/wp/v2/posts/%d', self::$post_id ) );
+		$request  = new WP_REST_Request( 'GET', sprintf( '/wp/v2/posts/%d', self::$post_id ) );
 
 		$request->set_param( 'context', 'edit' );
 		$request->set_param( '_fields', 'content.rendered' );
@@ -1713,7 +1878,7 @@ class WP_Test_REST_Posts_Controller extends WP_Test_REST_Post_Type_Controller_Te
 
 		remove_filter( 'the_content', $filter_content );
 
-		$this->assertEquals(
+		$this->assertSame(
 			array(
 				'id'      => self::$post_id,
 				'content' => array(
@@ -1737,8 +1902,9 @@ class WP_Test_REST_Posts_Controller extends WP_Test_REST_Post_Type_Controller_Te
 		add_filter( 'the_content', $filter_content );
 
 		wp_set_current_user( self::$editor_id );
+
 		$endpoint = new WP_REST_Posts_Controller( 'post' );
-		$request  = new WP_REST_REQUEST( 'GET', sprintf( '/wp/v2/posts/%d', self::$post_id ) );
+		$request  = new WP_REST_Request( 'GET', sprintf( '/wp/v2/posts/%d', self::$post_id ) );
 
 		$request->set_param( 'context', 'edit' );
 		$request->set_param( '_fields', 'content.raw' );
@@ -1748,7 +1914,7 @@ class WP_Test_REST_Posts_Controller extends WP_Test_REST_Post_Type_Controller_Te
 
 		remove_filter( 'the_content', $filter_content );
 
-		$this->assertEquals(
+		$this->assertSame(
 			array(
 				'id'      => $post->ID,
 				'content' => array(
@@ -1847,6 +2013,7 @@ class WP_Test_REST_Posts_Controller extends WP_Test_REST_Post_Type_Controller_Te
 	 */
 	public function test_create_post_date( $status, $params, $results ) {
 		wp_set_current_user( self::$editor_id );
+
 		update_option( 'timezone_string', $params['timezone_string'] );
 
 		$request = new WP_REST_Request( 'POST', '/wp/v2/posts' );
@@ -1862,17 +2029,17 @@ class WP_Test_REST_Posts_Controller extends WP_Test_REST_Post_Type_Controller_Te
 
 		update_option( 'timezone_string', '' );
 
-		$this->assertEquals( 201, $response->get_status() );
+		$this->assertSame( 201, $response->get_status() );
 		$data = $response->get_data();
 		$post = get_post( $data['id'] );
 
-		$this->assertEquals( $results['date'], $data['date'] );
+		$this->assertSame( $results['date'], $data['date'] );
 		$post_date = str_replace( 'T', ' ', $results['date'] );
-		$this->assertEquals( $post_date, $post->post_date );
+		$this->assertSame( $post_date, $post->post_date );
 
-		$this->assertEquals( $results['date_gmt'], $data['date_gmt'] );
+		$this->assertSame( $results['date_gmt'], $data['date_gmt'] );
 		$post_date_gmt = str_replace( 'T', ' ', $results['date_gmt'] );
-		$this->assertEquals( $post_date_gmt, $post->post_date_gmt );
+		$this->assertSame( $post_date_gmt, $post->post_date_gmt );
 	}
 
 	/**
@@ -1880,9 +2047,10 @@ class WP_Test_REST_Posts_Controller extends WP_Test_REST_Post_Type_Controller_Te
 	 */
 	public function test_create_item_with_template() {
 		wp_set_current_user( self::$editor_id );
+
 		add_filter( 'theme_post_templates', array( $this, 'filter_theme_post_templates' ) );
 
-		// reregister the route as we now have a template available.
+		// Re-register the route as we now have a template available.
 		$GLOBALS['wp_rest_server']->override_by_default = true;
 		$controller                                     = new WP_REST_Posts_Controller( 'post' );
 		$controller->register_routes();
@@ -1902,8 +2070,8 @@ class WP_Test_REST_Posts_Controller extends WP_Test_REST_Post_Type_Controller_Te
 
 		remove_filter( 'theme_post_templates', array( $this, 'filter_theme_post_templates' ) );
 
-		$this->assertEquals( 'post-my-test-template.php', $data['template'] );
-		$this->assertEquals( 'post-my-test-template.php', $post_template );
+		$this->assertSame( 'post-my-test-template.php', $data['template'] );
+		$this->assertSame( 'post-my-test-template.php', $post_template );
 	}
 
 	/**
@@ -1929,6 +2097,7 @@ class WP_Test_REST_Posts_Controller extends WP_Test_REST_Post_Type_Controller_Te
 	 */
 	public function test_create_item_with_template_none() {
 		wp_set_current_user( self::$editor_id );
+
 		add_filter( 'theme_post_templates', array( $this, 'filter_theme_post_templates' ) );
 		update_post_meta( self::$post_id, '_wp_page_template', 'post-my-test-template.php' );
 
@@ -1944,8 +2113,8 @@ class WP_Test_REST_Posts_Controller extends WP_Test_REST_Post_Type_Controller_Te
 		$data          = $response->get_data();
 		$post_template = get_page_template_slug( get_post( $data['id'] ) );
 
-		$this->assertEquals( '', $data['template'] );
-		$this->assertEquals( '', $post_template );
+		$this->assertSame( '', $data['template'] );
+		$this->assertSame( '', $post_template );
 	}
 
 	public function test_rest_create_item() {
@@ -1977,24 +2146,25 @@ class WP_Test_REST_Posts_Controller extends WP_Test_REST_Post_Type_Controller_Te
 
 	public function test_create_post_as_contributor() {
 		wp_set_current_user( self::$contributor_id );
+
 		update_option( 'timezone_string', 'America/Chicago' );
 
 		$request = new WP_REST_Request( 'POST', '/wp/v2/posts' );
 		$params  = $this->set_post_data(
 			array(
-				// This results in a special `post_date_gmt` value of
-				// '0000-00-00 00:00:00'.  See #38883.
+				// This results in a special `post_date_gmt` value
+				// of '0000-00-00 00:00:00'. See #38883.
 				'status' => 'pending',
 			)
 		);
 
 		$request->set_body_params( $params );
 		$response = rest_get_server()->dispatch( $request );
-		$this->assertEquals( 201, $response->get_status() );
+		$this->assertSame( 201, $response->get_status() );
 
 		$data = $response->get_data();
 		$post = get_post( $data['id'] );
-		$this->assertEquals( '0000-00-00 00:00:00', $post->post_date_gmt );
+		$this->assertSame( '0000-00-00 00:00:00', $post->post_date_gmt );
 		$this->assertNotEquals( '0000-00-00T00:00:00', $data['date_gmt'] );
 
 		$this->check_create_post_response( $response );
@@ -2015,9 +2185,9 @@ class WP_Test_REST_Posts_Controller extends WP_Test_REST_Post_Type_Controller_Te
 		$response = rest_get_server()->dispatch( $request );
 
 		$new_data = $response->get_data();
-		$this->assertEquals( true, $new_data['sticky'] );
+		$this->assertTrue( $new_data['sticky'] );
 		$post = get_post( $new_data['id'] );
-		$this->assertEquals( true, is_sticky( $post->ID ) );
+		$this->assertTrue( is_sticky( $post->ID ) );
 	}
 
 	public function test_create_post_sticky_as_contributor() {
@@ -2080,14 +2250,14 @@ class WP_Test_REST_Posts_Controller extends WP_Test_REST_Post_Type_Controller_Te
 
 		$data     = $response->get_data();
 		$new_post = get_post( $data['id'] );
-		$this->assertEquals( 'draft', $data['status'] );
-		$this->assertEquals( 'draft', $new_post->post_status );
-		// Confirm dates are shimmed for gmt_offset
+		$this->assertSame( 'draft', $data['status'] );
+		$this->assertSame( 'draft', $new_post->post_status );
+		// Confirm dates are shimmed for gmt_offset.
 		$post_modified_gmt = gmdate( 'Y-m-d H:i:s', strtotime( $new_post->post_modified ) + ( get_option( 'gmt_offset' ) * 3600 ) );
 		$post_date_gmt     = gmdate( 'Y-m-d H:i:s', strtotime( $new_post->post_date ) + ( get_option( 'gmt_offset' ) * 3600 ) );
 
-		$this->assertEquals( mysql_to_rfc3339( $post_modified_gmt ), $data['modified_gmt'] );
-		$this->assertEquals( mysql_to_rfc3339( $post_date_gmt ), $data['date_gmt'] );
+		$this->assertSame( mysql_to_rfc3339( $post_modified_gmt ), $data['modified_gmt'] );
+		$this->assertSame( mysql_to_rfc3339( $post_date_gmt ), $data['date_gmt'] );
 	}
 
 	public function test_create_post_private() {
@@ -2104,12 +2274,13 @@ class WP_Test_REST_Posts_Controller extends WP_Test_REST_Post_Type_Controller_Te
 
 		$data     = $response->get_data();
 		$new_post = get_post( $data['id'] );
-		$this->assertEquals( 'private', $data['status'] );
-		$this->assertEquals( 'private', $new_post->post_status );
+		$this->assertSame( 'private', $data['status'] );
+		$this->assertSame( 'private', $new_post->post_status );
 	}
 
 	public function test_create_post_private_without_permission() {
 		wp_set_current_user( self::$author_id );
+
 		$user = wp_get_current_user();
 		$user->add_cap( 'publish_posts', false );
 		// Flush capabilities, https://core.trac.wordpress.org/ticket/28374
@@ -2131,6 +2302,7 @@ class WP_Test_REST_Posts_Controller extends WP_Test_REST_Post_Type_Controller_Te
 
 	public function test_create_post_publish_without_permission() {
 		wp_set_current_user( self::$author_id );
+
 		$user = wp_get_current_user();
 		$user->add_cap( 'publish_posts', false );
 		// Flush capabilities, https://core.trac.wordpress.org/ticket/28374
@@ -2178,8 +2350,8 @@ class WP_Test_REST_Posts_Controller extends WP_Test_REST_Post_Type_Controller_Te
 
 		$data     = $response->get_data();
 		$new_post = get_post( $data['id'] );
-		$this->assertEquals( 'gallery', $data['format'] );
-		$this->assertEquals( 'gallery', get_post_format( $new_post->ID ) );
+		$this->assertSame( 'gallery', $data['format'] );
+		$this->assertSame( 'gallery', get_post_format( $new_post->ID ) );
 	}
 
 	public function test_create_post_with_standard_format() {
@@ -2196,7 +2368,7 @@ class WP_Test_REST_Posts_Controller extends WP_Test_REST_Post_Type_Controller_Te
 
 		$data     = $response->get_data();
 		$new_post = get_post( $data['id'] );
-		$this->assertEquals( 'standard', $data['format'] );
+		$this->assertSame( 'standard', $data['format'] );
 		$this->assertFalse( get_post_format( $new_post->ID ) );
 	}
 
@@ -2231,10 +2403,10 @@ class WP_Test_REST_Posts_Controller extends WP_Test_REST_Post_Type_Controller_Te
 		);
 		$request->set_body_params( $params );
 		$response = rest_get_server()->dispatch( $request );
-		$this->assertEquals( 201, $response->get_status() );
+		$this->assertSame( 201, $response->get_status() );
 
 		$data = $response->get_data();
-		$this->assertEquals( 'link', $data['format'] );
+		$this->assertSame( 'link', $data['format'] );
 	}
 
 	public function test_create_update_post_with_featured_media() {
@@ -2261,8 +2433,8 @@ class WP_Test_REST_Posts_Controller extends WP_Test_REST_Post_Type_Controller_Te
 		$response = rest_get_server()->dispatch( $request );
 		$data     = $response->get_data();
 		$new_post = get_post( $data['id'] );
-		$this->assertEquals( $this->attachment_id, $data['featured_media'] );
-		$this->assertEquals( $this->attachment_id, (int) get_post_thumbnail_id( $new_post->ID ) );
+		$this->assertSame( $this->attachment_id, $data['featured_media'] );
+		$this->assertSame( $this->attachment_id, (int) get_post_thumbnail_id( $new_post->ID ) );
 
 		$request = new WP_REST_Request( 'POST', '/wp/v2/posts/' . $new_post->ID );
 		$params  = $this->set_post_data(
@@ -2273,8 +2445,8 @@ class WP_Test_REST_Posts_Controller extends WP_Test_REST_Post_Type_Controller_Te
 		$request->set_body_params( $params );
 		$response = rest_get_server()->dispatch( $request );
 		$data     = $response->get_data();
-		$this->assertEquals( 0, $data['featured_media'] );
-		$this->assertEquals( 0, (int) get_post_thumbnail_id( $new_post->ID ) );
+		$this->assertSame( 0, $data['featured_media'] );
+		$this->assertSame( 0, (int) get_post_thumbnail_id( $new_post->ID ) );
 	}
 
 	public function test_create_post_invalid_author() {
@@ -2320,10 +2492,10 @@ class WP_Test_REST_Posts_Controller extends WP_Test_REST_Post_Type_Controller_Te
 		$response = rest_get_server()->dispatch( $request );
 
 		$data = $response->get_data();
-		$this->assertEquals( 'testing', $data['password'] );
+		$this->assertSame( 'testing', $data['password'] );
 	}
 
-	public function test_create_post_with_falsy_password() {
+	public function test_create_post_with_falsey_password() {
 		wp_set_current_user( self::$editor_id );
 
 		$request = new WP_REST_Request( 'POST', '/wp/v2/posts' );
@@ -2336,8 +2508,7 @@ class WP_Test_REST_Posts_Controller extends WP_Test_REST_Post_Type_Controller_Te
 		$response = rest_get_server()->dispatch( $request );
 
 		$data = $response->get_data();
-
-		$this->assertEquals( '0', $data['password'] );
+		$this->assertSame( '0', $data['password'] );
 	}
 
 	public function test_create_post_with_empty_string_password_and_sticky() {
@@ -2353,9 +2524,9 @@ class WP_Test_REST_Posts_Controller extends WP_Test_REST_Post_Type_Controller_Te
 		$request->set_body_params( $params );
 		$response = rest_get_server()->dispatch( $request );
 
-		$this->assertEquals( 201, $response->get_status() );
+		$this->assertSame( 201, $response->get_status() );
 		$data = $response->get_data();
-		$this->assertEquals( '', $data['password'] );
+		$this->assertSame( '', $data['password'] );
 	}
 
 	public function test_create_post_with_password_and_sticky_fails() {
@@ -2389,8 +2560,8 @@ class WP_Test_REST_Posts_Controller extends WP_Test_REST_Post_Type_Controller_Te
 		$data     = $response->get_data();
 		$new_post = get_post( $data['id'] );
 		$time     = gmmktime( 2, 0, 0, 1, 1, 2010 );
-		$this->assertEquals( '2010-01-01T02:00:00', $data['date'] );
-		$this->assertEquals( $time, strtotime( $new_post->post_date ) );
+		$this->assertSame( '2010-01-01T02:00:00', $data['date'] );
+		$this->assertSame( $time, strtotime( $new_post->post_date ) );
 	}
 
 	public function test_create_post_custom_date_with_timezone() {
@@ -2409,11 +2580,11 @@ class WP_Test_REST_Posts_Controller extends WP_Test_REST_Post_Type_Controller_Te
 		$new_post = get_post( $data['id'] );
 		$time     = gmmktime( 12, 0, 0, 1, 1, 2010 );
 
-		$this->assertEquals( '2010-01-01T12:00:00', $data['date'] );
-		$this->assertEquals( '2010-01-01T12:00:00', $data['modified'] );
+		$this->assertSame( '2010-01-01T12:00:00', $data['date'] );
+		$this->assertSame( '2010-01-01T12:00:00', $data['modified'] );
 
-		$this->assertEquals( $time, strtotime( $new_post->post_date ) );
-		$this->assertEquals( $time, strtotime( $new_post->post_modified ) );
+		$this->assertSame( $time, strtotime( $new_post->post_date ) );
+		$this->assertSame( $time, strtotime( $new_post->post_modified ) );
 	}
 
 	public function test_create_post_with_db_error() {
@@ -2479,15 +2650,18 @@ class WP_Test_REST_Posts_Controller extends WP_Test_REST_Post_Type_Controller_Te
 		);
 		$request->set_body_params( $params );
 		$response = rest_get_server()->dispatch( $request );
-		$new_data = $response->get_data();
-		$this->assertEquals( "Rob O'Rourke's Diary", $new_data['title']['raw'] );
+
+		$data = $response->get_data();
+		$this->assertSame( "Rob O'Rourke's Diary", $data['title']['raw'] );
 	}
 
 	public function test_create_post_with_categories() {
 		wp_set_current_user( self::$editor_id );
+
 		$category = wp_insert_term( 'Test Category', 'category' );
-		$request  = new WP_REST_Request( 'POST', '/wp/v2/posts' );
-		$params   = $this->set_post_data(
+
+		$request = new WP_REST_Request( 'POST', '/wp/v2/posts' );
+		$params  = $this->set_post_data(
 			array(
 				'password'   => 'testing',
 				'categories' => array(
@@ -2499,15 +2673,17 @@ class WP_Test_REST_Posts_Controller extends WP_Test_REST_Post_Type_Controller_Te
 		$response = rest_get_server()->dispatch( $request );
 
 		$data = $response->get_data();
-		$this->assertEquals( array( $category['term_id'] ), $data['categories'] );
+		$this->assertSame( array( $category['term_id'] ), $data['categories'] );
 	}
 
 	public function test_create_post_with_categories_as_csv() {
 		wp_set_current_user( self::$editor_id );
+
 		$category  = wp_insert_term( 'Chicken', 'category' );
 		$category2 = wp_insert_term( 'Ribs', 'category' );
-		$request   = new WP_REST_Request( 'POST', '/wp/v2/posts' );
-		$params    = $this->set_post_data(
+
+		$request = new WP_REST_Request( 'POST', '/wp/v2/posts' );
+		$params  = $this->set_post_data(
 			array(
 				'categories' => $category['term_id'] . ',' . $category2['term_id'],
 			)
@@ -2516,11 +2692,12 @@ class WP_Test_REST_Posts_Controller extends WP_Test_REST_Post_Type_Controller_Te
 		$response = rest_get_server()->dispatch( $request );
 
 		$data = $response->get_data();
-		$this->assertEquals( array( $category['term_id'], $category2['term_id'] ), $data['categories'] );
+		$this->assertSame( array( $category['term_id'], $category2['term_id'] ), $data['categories'] );
 	}
 
 	public function test_create_post_with_invalid_categories() {
 		wp_set_current_user( self::$editor_id );
+
 		$request = new WP_REST_Request( 'POST', '/wp/v2/posts' );
 		$params  = $this->set_post_data(
 			array(
@@ -2534,7 +2711,7 @@ class WP_Test_REST_Posts_Controller extends WP_Test_REST_Post_Type_Controller_Te
 		$response = rest_get_server()->dispatch( $request );
 
 		$data = $response->get_data();
-		$this->assertEquals( array(), $data['categories'] );
+		$this->assertSame( array(), $data['categories'] );
 	}
 
 	/**
@@ -2545,6 +2722,7 @@ class WP_Test_REST_Posts_Controller extends WP_Test_REST_Post_Type_Controller_Te
 		$this->forbidden_cat = $cats[1];
 
 		wp_set_current_user( self::$editor_id );
+
 		$request = new WP_REST_Request( 'POST', '/wp/v2/posts' );
 		$params  = $this->set_post_data(
 			array(
@@ -2579,25 +2757,26 @@ class WP_Test_REST_Posts_Controller extends WP_Test_REST_Post_Type_Controller_Te
 
 		$this->check_update_post_response( $response );
 		$new_data = $response->get_data();
-		$this->assertEquals( self::$post_id, $new_data['id'] );
-		$this->assertEquals( $params['title'], $new_data['title']['raw'] );
-		$this->assertEquals( $params['content'], $new_data['content']['raw'] );
-		$this->assertEquals( $params['excerpt'], $new_data['excerpt']['raw'] );
+		$this->assertSame( self::$post_id, $new_data['id'] );
+		$this->assertSame( $params['title'], $new_data['title']['raw'] );
+		$this->assertSame( $params['content'], $new_data['content']['raw'] );
+		$this->assertSame( $params['excerpt'], $new_data['excerpt']['raw'] );
 		$post = get_post( self::$post_id );
-		$this->assertEquals( $params['title'], $post->post_title );
-		$this->assertEquals( $params['content'], $post->post_content );
-		$this->assertEquals( $params['excerpt'], $post->post_excerpt );
+		$this->assertSame( $params['title'], $post->post_title );
+		$this->assertSame( $params['content'], $post->post_content );
+		$this->assertSame( $params['excerpt'], $post->post_excerpt );
 	}
 
 	public function test_update_item_no_change() {
 		wp_set_current_user( self::$editor_id );
+
 		$post = get_post( self::$post_id );
 
 		$request = new WP_REST_Request( 'PUT', sprintf( '/wp/v2/posts/%d', self::$post_id ) );
 		$request->set_param( 'author', $post->post_author );
 
-		// Run twice to make sure that the update still succeeds even if no DB
-		// rows are updated.
+		// Run twice to make sure that the update still succeeds
+		// even if no DB rows are updated.
 		$response = rest_get_server()->dispatch( $request );
 		$this->check_update_post_response( $response );
 
@@ -2616,14 +2795,14 @@ class WP_Test_REST_Posts_Controller extends WP_Test_REST_Post_Type_Controller_Te
 
 		$this->check_update_post_response( $response );
 		$new_data = $response->get_data();
-		$this->assertEquals( self::$post_id, $new_data['id'] );
-		$this->assertEquals( $params['title'], $new_data['title']['raw'] );
-		$this->assertEquals( $params['content'], $new_data['content']['raw'] );
-		$this->assertEquals( $params['excerpt'], $new_data['excerpt']['raw'] );
+		$this->assertSame( self::$post_id, $new_data['id'] );
+		$this->assertSame( $params['title'], $new_data['title']['raw'] );
+		$this->assertSame( $params['content'], $new_data['content']['raw'] );
+		$this->assertSame( $params['excerpt'], $new_data['excerpt']['raw'] );
 		$post = get_post( self::$post_id );
-		$this->assertEquals( $params['title'], $post->post_title );
-		$this->assertEquals( $params['content'], $post->post_content );
-		$this->assertEquals( $params['excerpt'], $post->post_excerpt );
+		$this->assertSame( $params['title'], $post->post_title );
+		$this->assertSame( $params['content'], $post->post_content );
+		$this->assertSame( $params['excerpt'], $post->post_excerpt );
 	}
 
 	/**
@@ -2636,11 +2815,13 @@ class WP_Test_REST_Posts_Controller extends WP_Test_REST_Post_Type_Controller_Te
 	public function test_rest_update_post_with_empty_date() {
 		// Create a new test post.
 		$post_id = $this->factory->post->create();
+
 		wp_set_current_user( self::$editor_id );
 
 		// Set the post date to the future.
 		$future_date = '2919-07-29T18:00:00';
-		$request     = new WP_REST_Request( 'PUT', sprintf( '/wp/v2/posts/%d', $post_id ) );
+
+		$request = new WP_REST_Request( 'PUT', sprintf( '/wp/v2/posts/%d', $post_id ) );
 		$request->add_header( 'content-type', 'application/json' );
 		$params = $this->set_post_data(
 			array(
@@ -2656,8 +2837,8 @@ class WP_Test_REST_Posts_Controller extends WP_Test_REST_Post_Type_Controller_Te
 		$new_data = $response->get_data();
 
 		// Verify the post is set to the future date.
-		$this->assertEquals( $new_data['date_gmt'], $future_date );
-		$this->assertEquals( $new_data['date'], $future_date );
+		$this->assertSame( $new_data['date_gmt'], $future_date );
+		$this->assertSame( $new_data['date'], $future_date );
 		$this->assertNotEquals( $new_data['date_gmt'], $new_data['modified_gmt'] );
 		$this->assertNotEquals( $new_data['date'], $new_data['modified'] );
 
@@ -2677,11 +2858,11 @@ class WP_Test_REST_Posts_Controller extends WP_Test_REST_Post_Type_Controller_Te
 		// Verify the date field values are reset in the API response.
 		$this->check_update_post_response( $response );
 		$new_data = $response->get_data();
-		$this->assertEquals( $new_data['date_gmt'], $new_data['date'] );
+		$this->assertSame( $new_data['date_gmt'], $new_data['date'] );
 		$this->assertNotEquals( $new_data['date_gmt'], $future_date );
 
 		$post = get_post( $post_id, 'ARRAY_A' );
-		$this->assertEquals( $post['post_date_gmt'], '0000-00-00 00:00:00' );
+		$this->assertSame( $post['post_date_gmt'], '0000-00-00 00:00:00' );
 		$this->assertNotEquals( $new_data['date_gmt'], $future_date );
 		$this->assertNotEquals( $new_data['date'], $future_date );
 	}
@@ -2697,14 +2878,14 @@ class WP_Test_REST_Posts_Controller extends WP_Test_REST_Post_Type_Controller_Te
 
 		$this->check_update_post_response( $response );
 		$new_data = $response->get_data();
-		$this->assertEquals( self::$post_id, $new_data['id'] );
-		$this->assertEquals( $params['title']['raw'], $new_data['title']['raw'] );
-		$this->assertEquals( $params['content']['raw'], $new_data['content']['raw'] );
-		$this->assertEquals( $params['excerpt']['raw'], $new_data['excerpt']['raw'] );
+		$this->assertSame( self::$post_id, $new_data['id'] );
+		$this->assertSame( $params['title']['raw'], $new_data['title']['raw'] );
+		$this->assertSame( $params['content']['raw'], $new_data['content']['raw'] );
+		$this->assertSame( $params['excerpt']['raw'], $new_data['excerpt']['raw'] );
 		$post = get_post( self::$post_id );
-		$this->assertEquals( $params['title']['raw'], $post->post_title );
-		$this->assertEquals( $params['content']['raw'], $post->post_content );
-		$this->assertEquals( $params['excerpt']['raw'], $post->post_excerpt );
+		$this->assertSame( $params['title']['raw'], $post->post_title );
+		$this->assertSame( $params['content']['raw'], $post->post_content );
+		$this->assertSame( $params['excerpt']['raw'], $post->post_excerpt );
 	}
 
 	public function test_update_post_without_extra_params() {
@@ -2724,6 +2905,7 @@ class WP_Test_REST_Posts_Controller extends WP_Test_REST_Post_Type_Controller_Te
 
 	public function test_update_post_without_permission() {
 		wp_set_current_user( self::$editor_id );
+
 		$user = wp_get_current_user();
 		$user->add_cap( 'edit_published_posts', false );
 		// Flush capabilities, https://core.trac.wordpress.org/ticket/28374
@@ -2786,8 +2968,8 @@ class WP_Test_REST_Posts_Controller extends WP_Test_REST_Post_Type_Controller_Te
 
 		$data     = $response->get_data();
 		$new_post = get_post( $data['id'] );
-		$this->assertEquals( 'gallery', $data['format'] );
-		$this->assertEquals( 'gallery', get_post_format( $new_post->ID ) );
+		$this->assertSame( 'gallery', $data['format'] );
+		$this->assertSame( 'gallery', get_post_format( $new_post->ID ) );
 	}
 
 	public function test_update_post_with_standard_format() {
@@ -2804,7 +2986,7 @@ class WP_Test_REST_Posts_Controller extends WP_Test_REST_Post_Type_Controller_Te
 
 		$data     = $response->get_data();
 		$new_post = get_post( $data['id'] );
-		$this->assertEquals( 'standard', $data['format'] );
+		$this->assertSame( 'standard', $data['format'] );
 		$this->assertFalse( get_post_format( $new_post->ID ) );
 	}
 
@@ -2839,10 +3021,10 @@ class WP_Test_REST_Posts_Controller extends WP_Test_REST_Post_Type_Controller_Te
 		);
 		$request->set_body_params( $params );
 		$response = rest_get_server()->dispatch( $request );
-		$this->assertEquals( 200, $response->get_status() );
+		$this->assertSame( 200, $response->get_status() );
 
 		$data = $response->get_data();
-		$this->assertEquals( 'link', $data['format'] );
+		$this->assertSame( 'link', $data['format'] );
 	}
 
 	public function test_update_post_ignore_readonly() {
@@ -2865,12 +3047,12 @@ class WP_Test_REST_Posts_Controller extends WP_Test_REST_Post_Type_Controller_Te
 		$data     = $response->get_data();
 		$new_post = get_post( $data['id'] );
 
-		$this->assertEquals( $new_content, $data['content']['raw'] );
-		$this->assertEquals( $new_content, $new_post->post_content );
+		$this->assertSame( $new_content, $data['content']['raw'] );
+		$this->assertSame( $new_content, $new_post->post_content );
 
 		// The modified date should equal the current time.
-		$this->assertEquals( gmdate( 'Y-m-d', strtotime( mysql_to_rfc3339( $expected_modified ) ) ), gmdate( 'Y-m-d', strtotime( $data['modified'] ) ) );
-		$this->assertEquals( gmdate( 'Y-m-d', strtotime( $expected_modified ) ), gmdate( 'Y-m-d', strtotime( $new_post->post_modified ) ) );
+		$this->assertSame( gmdate( 'Y-m-d', strtotime( mysql_to_rfc3339( $expected_modified ) ) ), gmdate( 'Y-m-d', strtotime( $data['modified'] ) ) );
+		$this->assertSame( gmdate( 'Y-m-d', strtotime( $expected_modified ) ), gmdate( 'Y-m-d', strtotime( $new_post->post_modified ) ) );
 	}
 
 	/**
@@ -2878,6 +3060,7 @@ class WP_Test_REST_Posts_Controller extends WP_Test_REST_Post_Type_Controller_Te
 	 */
 	public function test_update_post_date( $status, $params, $results ) {
 		wp_set_current_user( self::$editor_id );
+
 		update_option( 'timezone_string', $params['timezone_string'] );
 
 		$post_id = $this->factory->post->create( array( 'post_status' => $status ) );
@@ -2893,17 +3076,17 @@ class WP_Test_REST_Posts_Controller extends WP_Test_REST_Post_Type_Controller_Te
 
 		update_option( 'timezone_string', '' );
 
-		$this->assertEquals( 200, $response->get_status() );
+		$this->assertSame( 200, $response->get_status() );
 		$data = $response->get_data();
 		$post = get_post( $data['id'] );
 
-		$this->assertEquals( $results['date'], $data['date'] );
+		$this->assertSame( $results['date'], $data['date'] );
 		$post_date = str_replace( 'T', ' ', $results['date'] );
-		$this->assertEquals( $post_date, $post->post_date );
+		$this->assertSame( $post_date, $post->post_date );
 
-		$this->assertEquals( $results['date_gmt'], $data['date_gmt'] );
+		$this->assertSame( $results['date_gmt'], $data['date_gmt'] );
 		$post_date_gmt = str_replace( 'T', ' ', $results['date_gmt'] );
-		$this->assertEquals( $post_date_gmt, $post->post_date_gmt );
+		$this->assertSame( $post_date_gmt, $post->post_date_gmt );
 	}
 
 	public function test_update_post_with_invalid_date() {
@@ -2940,6 +3123,7 @@ class WP_Test_REST_Posts_Controller extends WP_Test_REST_Post_Type_Controller_Te
 		global $wpdb;
 
 		wp_set_current_user( self::$editor_id );
+
 		update_option( 'timezone_string', 'America/Chicago' );
 
 		// Need to set dates using wpdb directly because `wp_update_post` and
@@ -2960,29 +3144,29 @@ class WP_Test_REST_Posts_Controller extends WP_Test_REST_Post_Type_Controller_Te
 		wp_cache_delete( $post_id, 'posts' );
 
 		$post = get_post( $post_id );
-		$this->assertEquals( $post->post_date, '2016-02-23 12:00:00' );
-		$this->assertEquals( $post->post_date_gmt, '0000-00-00 00:00:00' );
+		$this->assertSame( $post->post_date, '2016-02-23 12:00:00' );
+		$this->assertSame( $post->post_date_gmt, '0000-00-00 00:00:00' );
 
 		$request  = new WP_REST_Request( 'GET', sprintf( '/wp/v2/posts/%d', $post_id ) );
 		$response = rest_get_server()->dispatch( $request );
-		$this->assertEquals( 200, $response->get_status() );
+		$this->assertSame( 200, $response->get_status() );
 		$data = $response->get_data();
 
-		$this->assertEquals( '2016-02-23T12:00:00', $data['date'] );
-		$this->assertEquals( '2016-02-23T18:00:00', $data['date_gmt'] );
+		$this->assertSame( '2016-02-23T12:00:00', $data['date'] );
+		$this->assertSame( '2016-02-23T18:00:00', $data['date_gmt'] );
 
 		$request = new WP_REST_Request( 'PUT', sprintf( '/wp/v2/posts/%d', $post_id ) );
 		$request->set_param( 'date', '2016-02-23T13:00:00' );
 		$response = rest_get_server()->dispatch( $request );
-		$this->assertEquals( 200, $response->get_status() );
+		$this->assertSame( 200, $response->get_status() );
 		$data = $response->get_data();
 
-		$this->assertEquals( '2016-02-23T13:00:00', $data['date'] );
-		$this->assertEquals( '2016-02-23T19:00:00', $data['date_gmt'] );
+		$this->assertSame( '2016-02-23T13:00:00', $data['date'] );
+		$this->assertSame( '2016-02-23T19:00:00', $data['date_gmt'] );
 
 		$post = get_post( $post_id );
-		$this->assertEquals( $post->post_date, '2016-02-23 13:00:00' );
-		$this->assertEquals( $post->post_date_gmt, '2016-02-23 19:00:00' );
+		$this->assertSame( $post->post_date, '2016-02-23 13:00:00' );
+		$this->assertSame( $post->post_date_gmt, '2016-02-23 19:00:00' );
 
 		update_option( 'timezone_string', '' );
 	}
@@ -3000,9 +3184,9 @@ class WP_Test_REST_Posts_Controller extends WP_Test_REST_Post_Type_Controller_Te
 		$response = rest_get_server()->dispatch( $request );
 
 		$new_data = $response->get_data();
-		$this->assertEquals( 'sample-slug', $new_data['slug'] );
+		$this->assertSame( 'sample-slug', $new_data['slug'] );
 		$post = get_post( $new_data['id'] );
-		$this->assertEquals( 'sample-slug', $post->post_name );
+		$this->assertSame( 'sample-slug', $post->post_name );
 	}
 
 	public function test_update_post_slug_accented_chars() {
@@ -3018,9 +3202,9 @@ class WP_Test_REST_Posts_Controller extends WP_Test_REST_Post_Type_Controller_Te
 		$response = rest_get_server()->dispatch( $request );
 
 		$new_data = $response->get_data();
-		$this->assertEquals( 'test-accented-charaecters', $new_data['slug'] );
+		$this->assertSame( 'test-accented-charaecters', $new_data['slug'] );
 		$post = get_post( $new_data['id'] );
-		$this->assertEquals( 'test-accented-charaecters', $post->post_name );
+		$this->assertSame( 'test-accented-charaecters', $post->post_name );
 	}
 
 	public function test_update_post_sticky() {
@@ -3036,11 +3220,11 @@ class WP_Test_REST_Posts_Controller extends WP_Test_REST_Post_Type_Controller_Te
 		$response = rest_get_server()->dispatch( $request );
 
 		$new_data = $response->get_data();
-		$this->assertEquals( true, $new_data['sticky'] );
+		$this->assertTrue( $new_data['sticky'] );
 		$post = get_post( $new_data['id'] );
-		$this->assertEquals( true, is_sticky( $post->ID ) );
+		$this->assertTrue( is_sticky( $post->ID ) );
 
-		// Updating another field shouldn't change sticky status
+		// Updating another field shouldn't change sticky status.
 		$request = new WP_REST_Request( 'PUT', sprintf( '/wp/v2/posts/%d', self::$post_id ) );
 		$params  = $this->set_post_data(
 			array(
@@ -3051,9 +3235,9 @@ class WP_Test_REST_Posts_Controller extends WP_Test_REST_Post_Type_Controller_Te
 		$response = rest_get_server()->dispatch( $request );
 
 		$new_data = $response->get_data();
-		$this->assertEquals( true, $new_data['sticky'] );
+		$this->assertTrue( $new_data['sticky'] );
 		$post = get_post( $new_data['id'] );
-		$this->assertEquals( true, is_sticky( $post->ID ) );
+		$this->assertTrue( is_sticky( $post->ID ) );
 	}
 
 	public function test_update_post_excerpt() {
@@ -3068,7 +3252,7 @@ class WP_Test_REST_Posts_Controller extends WP_Test_REST_Post_Type_Controller_Te
 
 		$response = rest_get_server()->dispatch( $request );
 		$new_data = $response->get_data();
-		$this->assertEquals( 'An Excerpt', $new_data['excerpt']['raw'] );
+		$this->assertSame( 'An Excerpt', $new_data['excerpt']['raw'] );
 	}
 
 	public function test_update_post_empty_excerpt() {
@@ -3083,7 +3267,7 @@ class WP_Test_REST_Posts_Controller extends WP_Test_REST_Post_Type_Controller_Te
 
 		$response = rest_get_server()->dispatch( $request );
 		$new_data = $response->get_data();
-		$this->assertEquals( '', $new_data['excerpt']['raw'] );
+		$this->assertSame( '', $new_data['excerpt']['raw'] );
 	}
 
 	public function test_update_post_content() {
@@ -3098,7 +3282,7 @@ class WP_Test_REST_Posts_Controller extends WP_Test_REST_Post_Type_Controller_Te
 
 		$response = rest_get_server()->dispatch( $request );
 		$new_data = $response->get_data();
-		$this->assertEquals( 'Some Content', $new_data['content']['raw'] );
+		$this->assertSame( 'Some Content', $new_data['content']['raw'] );
 	}
 
 	public function test_update_post_empty_content() {
@@ -3113,11 +3297,12 @@ class WP_Test_REST_Posts_Controller extends WP_Test_REST_Post_Type_Controller_Te
 
 		$response = rest_get_server()->dispatch( $request );
 		$new_data = $response->get_data();
-		$this->assertEquals( '', $new_data['content']['raw'] );
+		$this->assertSame( '', $new_data['content']['raw'] );
 	}
 
 	public function test_update_post_with_empty_password() {
 		wp_set_current_user( self::$editor_id );
+
 		wp_update_post(
 			array(
 				'ID'            => self::$post_id,
@@ -3134,7 +3319,7 @@ class WP_Test_REST_Posts_Controller extends WP_Test_REST_Post_Type_Controller_Te
 		$request->set_body_params( $params );
 		$response = rest_get_server()->dispatch( $request );
 		$data     = $response->get_data();
-		$this->assertEquals( '', $data['password'] );
+		$this->assertSame( '', $data['password'] );
 	}
 
 	public function test_update_post_with_password_and_sticky_fails() {
@@ -3204,12 +3389,12 @@ class WP_Test_REST_Posts_Controller extends WP_Test_REST_Post_Type_Controller_Te
 		$request->set_body_params( $params );
 		$response = rest_get_server()->dispatch( $request );
 		$new_data = $response->get_data();
-		$this->assertEquals( "Rob O'Rourke's Diary", $new_data['title']['raw'] );
+		$this->assertSame( "Rob O'Rourke's Diary", $new_data['title']['raw'] );
 	}
 
 	public function test_update_post_with_categories() {
-
 		wp_set_current_user( self::$editor_id );
+
 		$category = wp_insert_term( 'Test Category', 'category' );
 
 		$request = new WP_REST_Request( 'PUT', sprintf( '/wp/v2/posts/%d', self::$post_id ) );
@@ -3224,7 +3409,7 @@ class WP_Test_REST_Posts_Controller extends WP_Test_REST_Post_Type_Controller_Te
 		$request->set_body_params( $params );
 		$response = rest_get_server()->dispatch( $request );
 		$new_data = $response->get_data();
-		$this->assertEquals( array( $category['term_id'] ), $new_data['categories'] );
+		$this->assertSame( array( $category['term_id'] ), $new_data['categories'] );
 		$categories_path = '';
 		$links           = $response->get_links();
 		foreach ( $links['https://api.w.org/term'] as $link ) {
@@ -3234,18 +3419,19 @@ class WP_Test_REST_Posts_Controller extends WP_Test_REST_Post_Type_Controller_Te
 		}
 		$query = parse_url( $categories_path, PHP_URL_QUERY );
 		parse_str( $query, $args );
+
 		$request = new WP_REST_Request( 'GET', $args['rest_route'] );
 		unset( $args['rest_route'] );
 		$request->set_query_params( $args );
 		$response = rest_get_server()->dispatch( $request );
 		$data     = $response->get_data();
 		$this->assertCount( 1, $data );
-		$this->assertEquals( 'Test Category', $data[0]['name'] );
+		$this->assertSame( 'Test Category', $data[0]['name'] );
 	}
 
 	public function test_update_post_with_empty_categories() {
-
 		wp_set_current_user( self::$editor_id );
+
 		$category = wp_insert_term( 'Test Category', 'category' );
 		wp_set_object_terms( self::$post_id, $category['term_id'], 'category' );
 
@@ -3259,7 +3445,7 @@ class WP_Test_REST_Posts_Controller extends WP_Test_REST_Post_Type_Controller_Te
 		$request->set_body_params( $params );
 		$response = rest_get_server()->dispatch( $request );
 		$new_data = $response->get_data();
-		$this->assertEquals( array(), $new_data['categories'] );
+		$this->assertSame( array(), $new_data['categories'] );
 	}
 
 	/**
@@ -3270,6 +3456,7 @@ class WP_Test_REST_Posts_Controller extends WP_Test_REST_Post_Type_Controller_Te
 		$this->forbidden_cat = $cats[1];
 
 		wp_set_current_user( self::$editor_id );
+
 		$request = new WP_REST_Request( 'PUT', sprintf( '/wp/v2/posts/%d', self::$post_id ) );
 		$params  = $this->set_post_data(
 			array(
@@ -3291,6 +3478,7 @@ class WP_Test_REST_Posts_Controller extends WP_Test_REST_Post_Type_Controller_Te
 	 */
 	public function test_update_item_with_template() {
 		wp_set_current_user( self::$editor_id );
+
 		add_filter( 'theme_post_templates', array( $this, 'filter_theme_post_templates' ) );
 
 		// reregister the route as we now have a template available.
@@ -3311,8 +3499,8 @@ class WP_Test_REST_Posts_Controller extends WP_Test_REST_Post_Type_Controller_Te
 		$data          = $response->get_data();
 		$post_template = get_page_template_slug( get_post( $data['id'] ) );
 
-		$this->assertEquals( 'post-my-test-template.php', $data['template'] );
-		$this->assertEquals( 'post-my-test-template.php', $post_template );
+		$this->assertSame( 'post-my-test-template.php', $data['template'] );
+		$this->assertSame( 'post-my-test-template.php', $post_template );
 	}
 
 	/**
@@ -3320,6 +3508,7 @@ class WP_Test_REST_Posts_Controller extends WP_Test_REST_Post_Type_Controller_Te
 	 */
 	public function test_update_item_with_template_none() {
 		wp_set_current_user( self::$editor_id );
+
 		add_filter( 'theme_post_templates', array( $this, 'filter_theme_post_templates' ) );
 		update_post_meta( self::$post_id, '_wp_page_template', 'post-my-test-template.php' );
 
@@ -3341,18 +3530,17 @@ class WP_Test_REST_Posts_Controller extends WP_Test_REST_Post_Type_Controller_Te
 		$data          = $response->get_data();
 		$post_template = get_page_template_slug( get_post( $data['id'] ) );
 
-		$this->assertEquals( '', $data['template'] );
-		$this->assertEquals( '', $post_template );
+		$this->assertSame( '', $data['template'] );
+		$this->assertSame( '', $post_template );
 	}
 
 	/**
 	 * Test update_item() with same template that no longer exists.
 	 *
-	 * @covers WP_REST_Posts_Controller::check_template()
+	 * @covers WP_REST_Posts_Controller::check_template
 	 * @ticket 39996
 	 */
 	public function test_update_item_with_same_template_that_no_longer_exists() {
-
 		wp_set_current_user( self::$editor_id );
 
 		update_post_meta( self::$post_id, '_wp_page_template', 'post-my-invalid-template.php' );
@@ -3366,61 +3554,61 @@ class WP_Test_REST_Posts_Controller extends WP_Test_REST_Post_Type_Controller_Te
 		$request->set_body_params( $params );
 		$response = rest_get_server()->dispatch( $request );
 
-		$this->assertEquals( 200, $response->get_status() );
+		$this->assertSame( 200, $response->get_status() );
 
 		$data          = $response->get_data();
 		$post_template = get_page_template_slug( get_post( $data['id'] ) );
 
-		$this->assertEquals( 'post-my-invalid-template.php', $post_template );
-		$this->assertEquals( 'post-my-invalid-template.php', $data['template'] );
+		$this->assertSame( 'post-my-invalid-template.php', $post_template );
+		$this->assertSame( 'post-my-invalid-template.php', $data['template'] );
 	}
 
 	public function verify_post_roundtrip( $input = array(), $expected_output = array() ) {
-		// Create the post
+		// Create the post.
 		$request = new WP_REST_Request( 'POST', '/wp/v2/posts' );
 		foreach ( $input as $name => $value ) {
 			$request->set_param( $name, $value );
 		}
 		$response = rest_get_server()->dispatch( $request );
-		$this->assertEquals( 201, $response->get_status() );
+		$this->assertSame( 201, $response->get_status() );
 		$actual_output = $response->get_data();
 
-		// Compare expected API output to actual API output
-		$this->assertEquals( $expected_output['title']['raw'], $actual_output['title']['raw'] );
-		$this->assertEquals( $expected_output['title']['rendered'], trim( $actual_output['title']['rendered'] ) );
-		$this->assertEquals( $expected_output['content']['raw'], $actual_output['content']['raw'] );
-		$this->assertEquals( $expected_output['content']['rendered'], trim( $actual_output['content']['rendered'] ) );
-		$this->assertEquals( $expected_output['excerpt']['raw'], $actual_output['excerpt']['raw'] );
-		$this->assertEquals( $expected_output['excerpt']['rendered'], trim( $actual_output['excerpt']['rendered'] ) );
+		// Compare expected API output to actual API output.
+		$this->assertSame( $expected_output['title']['raw'], $actual_output['title']['raw'] );
+		$this->assertSame( $expected_output['title']['rendered'], trim( $actual_output['title']['rendered'] ) );
+		$this->assertSame( $expected_output['content']['raw'], $actual_output['content']['raw'] );
+		$this->assertSame( $expected_output['content']['rendered'], trim( $actual_output['content']['rendered'] ) );
+		$this->assertSame( $expected_output['excerpt']['raw'], $actual_output['excerpt']['raw'] );
+		$this->assertSame( $expected_output['excerpt']['rendered'], trim( $actual_output['excerpt']['rendered'] ) );
 
-		// Compare expected API output to WP internal values
+		// Compare expected API output to WP internal values.
 		$post = get_post( $actual_output['id'] );
-		$this->assertEquals( $expected_output['title']['raw'], $post->post_title );
-		$this->assertEquals( $expected_output['content']['raw'], $post->post_content );
-		$this->assertEquals( $expected_output['excerpt']['raw'], $post->post_excerpt );
+		$this->assertSame( $expected_output['title']['raw'], $post->post_title );
+		$this->assertSame( $expected_output['content']['raw'], $post->post_content );
+		$this->assertSame( $expected_output['excerpt']['raw'], $post->post_excerpt );
 
-		// Update the post
+		// Update the post.
 		$request = new WP_REST_Request( 'PUT', sprintf( '/wp/v2/posts/%d', $actual_output['id'] ) );
 		foreach ( $input as $name => $value ) {
 			$request->set_param( $name, $value );
 		}
 		$response = rest_get_server()->dispatch( $request );
-		$this->assertEquals( 200, $response->get_status() );
+		$this->assertSame( 200, $response->get_status() );
 		$actual_output = $response->get_data();
 
-		// Compare expected API output to actual API output
-		$this->assertEquals( $expected_output['title']['raw'], $actual_output['title']['raw'] );
-		$this->assertEquals( $expected_output['title']['rendered'], trim( $actual_output['title']['rendered'] ) );
-		$this->assertEquals( $expected_output['content']['raw'], $actual_output['content']['raw'] );
-		$this->assertEquals( $expected_output['content']['rendered'], trim( $actual_output['content']['rendered'] ) );
-		$this->assertEquals( $expected_output['excerpt']['raw'], $actual_output['excerpt']['raw'] );
-		$this->assertEquals( $expected_output['excerpt']['rendered'], trim( $actual_output['excerpt']['rendered'] ) );
+		// Compare expected API output to actual API output.
+		$this->assertSame( $expected_output['title']['raw'], $actual_output['title']['raw'] );
+		$this->assertSame( $expected_output['title']['rendered'], trim( $actual_output['title']['rendered'] ) );
+		$this->assertSame( $expected_output['content']['raw'], $actual_output['content']['raw'] );
+		$this->assertSame( $expected_output['content']['rendered'], trim( $actual_output['content']['rendered'] ) );
+		$this->assertSame( $expected_output['excerpt']['raw'], $actual_output['excerpt']['raw'] );
+		$this->assertSame( $expected_output['excerpt']['rendered'], trim( $actual_output['excerpt']['rendered'] ) );
 
-		// Compare expected API output to WP internal values
+		// Compare expected API output to WP internal values.
 		$post = get_post( $actual_output['id'] );
-		$this->assertEquals( $expected_output['title']['raw'], $post->post_title );
-		$this->assertEquals( $expected_output['content']['raw'], $post->post_content );
-		$this->assertEquals( $expected_output['excerpt']['raw'], $post->post_excerpt );
+		$this->assertSame( $expected_output['title']['raw'], $post->post_title );
+		$this->assertSame( $expected_output['content']['raw'], $post->post_content );
+		$this->assertSame( $expected_output['excerpt']['raw'], $post->post_excerpt );
 	}
 
 	public static function post_roundtrip_provider() {
@@ -3525,12 +3713,14 @@ class WP_Test_REST_Posts_Controller extends WP_Test_REST_Post_Type_Controller_Te
 	 */
 	public function test_post_roundtrip_as_author( $raw, $expected ) {
 		wp_set_current_user( self::$author_id );
+
 		$this->assertFalse( current_user_can( 'unfiltered_html' ) );
 		$this->verify_post_roundtrip( $raw, $expected );
 	}
 
 	public function test_post_roundtrip_as_editor_unfiltered_html() {
 		wp_set_current_user( self::$editor_id );
+
 		if ( is_multisite() ) {
 			$this->assertFalse( current_user_can( 'unfiltered_html' ) );
 			$this->verify_post_roundtrip(
@@ -3582,6 +3772,7 @@ class WP_Test_REST_Posts_Controller extends WP_Test_REST_Post_Type_Controller_Te
 
 	public function test_post_roundtrip_as_superadmin_unfiltered_html() {
 		wp_set_current_user( self::$superadmin_id );
+
 		$this->assertTrue( current_user_can( 'unfiltered_html' ) );
 		$this->verify_post_roundtrip(
 			array(
@@ -3608,27 +3799,29 @@ class WP_Test_REST_Posts_Controller extends WP_Test_REST_Post_Type_Controller_Te
 
 	public function test_delete_item() {
 		$post_id = $this->factory->post->create( array( 'post_title' => 'Deleted post' ) );
+
 		wp_set_current_user( self::$editor_id );
 
 		$request = new WP_REST_Request( 'DELETE', sprintf( '/wp/v2/posts/%d', $post_id ) );
 		$request->set_param( 'force', 'false' );
 		$response = rest_get_server()->dispatch( $request );
 
-		$this->assertEquals( 200, $response->get_status() );
+		$this->assertSame( 200, $response->get_status() );
 		$data = $response->get_data();
-		$this->assertEquals( 'Deleted post', $data['title']['raw'] );
-		$this->assertEquals( 'trash', $data['status'] );
+		$this->assertSame( 'Deleted post', $data['title']['raw'] );
+		$this->assertSame( 'trash', $data['status'] );
 	}
 
 	public function test_delete_item_skip_trash() {
 		$post_id = $this->factory->post->create( array( 'post_title' => 'Deleted post' ) );
+
 		wp_set_current_user( self::$editor_id );
 
 		$request          = new WP_REST_Request( 'DELETE', sprintf( '/wp/v2/posts/%d', $post_id ) );
 		$request['force'] = true;
 		$response         = rest_get_server()->dispatch( $request );
 
-		$this->assertEquals( 200, $response->get_status() );
+		$this->assertSame( 200, $response->get_status() );
 		$data = $response->get_data();
 		$this->assertTrue( $data['deleted'] );
 		$this->assertNotEmpty( $data['previous'] );
@@ -3636,10 +3829,12 @@ class WP_Test_REST_Posts_Controller extends WP_Test_REST_Post_Type_Controller_Te
 
 	public function test_delete_item_already_trashed() {
 		$post_id = $this->factory->post->create( array( 'post_title' => 'Deleted post' ) );
+
 		wp_set_current_user( self::$editor_id );
+
 		$request  = new WP_REST_Request( 'DELETE', sprintf( '/wp/v2/posts/%d', $post_id ) );
 		$response = rest_get_server()->dispatch( $request );
-		$this->assertEquals( 200, $response->get_status() );
+		$this->assertSame( 200, $response->get_status() );
 		$response = rest_get_server()->dispatch( $request );
 		$this->assertErrorResponse( 'rest_already_trashed', $response, 410 );
 	}
@@ -3655,6 +3850,7 @@ class WP_Test_REST_Posts_Controller extends WP_Test_REST_Post_Type_Controller_Te
 
 	public function test_delete_post_invalid_post_type() {
 		$page_id = $this->factory->post->create( array( 'post_type' => 'page' ) );
+
 		wp_set_current_user( self::$editor_id );
 
 		$request  = new WP_REST_Request( 'DELETE', '/wp/v2/posts/' . $page_id );
@@ -3693,7 +3889,7 @@ class WP_Test_REST_Posts_Controller extends WP_Test_REST_Post_Type_Controller_Te
 		$response   = rest_get_server()->dispatch( $request );
 		$data       = $response->get_data();
 		$properties = $data['schema']['properties'];
-		$this->assertEquals( 26, count( $properties ) );
+		$this->assertSame( 26, count( $properties ) );
 		$this->assertArrayHasKey( 'author', $properties );
 		$this->assertArrayHasKey( 'comment_status', $properties );
 		$this->assertArrayHasKey( 'content', $properties );
@@ -3722,6 +3918,20 @@ class WP_Test_REST_Posts_Controller extends WP_Test_REST_Post_Type_Controller_Te
 		$this->assertArrayHasKey( 'categories', $properties );
 	}
 
+	/**
+	 * @ticket 48401
+	 */
+	public function test_get_item_schema_issues_doing_it_wrong_when_taxonomy_name_is_already_set_in_properties() {
+		$this->setExpectedIncorrectUsage( 'register_taxonomy' );
+
+		// Register a taxonomy with 'status' as name.
+		register_taxonomy( 'status', 'post', array( 'show_in_rest' => true ) );
+
+		// Re-initialize the controller.
+		$controller = new WP_REST_Posts_Controller( 'post' );
+		$controller->register_routes();
+	}
+
 	/**
 	 * @ticket 39805
 	 */
@@ -3758,7 +3968,7 @@ class WP_Test_REST_Posts_Controller extends WP_Test_REST_Post_Type_Controller_Te
 			'type',
 		);
 
-		$this->assertEquals( $expected_keys, $keys );
+		$this->assertSame( $expected_keys, $keys );
 	}
 
 	public function test_get_post_edit_context_properties() {
@@ -3799,7 +4009,7 @@ class WP_Test_REST_Posts_Controller extends WP_Test_REST_Post_Type_Controller_Te
 			'type',
 		);
 
-		$this->assertEquals( $expected_keys, $keys );
+		$this->assertSame( $expected_keys, $keys );
 	}
 
 	public function test_get_post_embed_context_properties() {
@@ -3821,7 +4031,7 @@ class WP_Test_REST_Posts_Controller extends WP_Test_REST_Post_Type_Controller_Te
 			'type',
 		);
 
-		$this->assertEquals( $expected_keys, $keys );
+		$this->assertSame( $expected_keys, $keys );
 	}
 
 	public function test_status_array_enum_args() {
@@ -3830,10 +4040,9 @@ class WP_Test_REST_Posts_Controller extends WP_Test_REST_Post_Type_Controller_Te
 		$data            = $response->get_data();
 		$list_posts_args = $data['routes']['/wp/v2/posts']['endpoints'][0]['args'];
 		$status_arg      = $list_posts_args['status'];
-		$this->assertEquals( 'array', $status_arg['type'] );
-		$this->assertEquals(
+		$this->assertSame( 'array', $status_arg['type'] );
+		$this->assertSame(
 			array(
-				'type' => 'string',
 				'enum' => array(
 					'publish',
 					'future',
@@ -3849,6 +4058,7 @@ class WP_Test_REST_Posts_Controller extends WP_Test_REST_Post_Type_Controller_Te
 					'request-completed',
 					'any',
 				),
+				'type' => 'string',
 			),
 			$status_arg['items']
 		);
@@ -3873,20 +4083,18 @@ class WP_Test_REST_Posts_Controller extends WP_Test_REST_Post_Type_Controller_Te
 			)
 		);
 
-		$request = new WP_REST_Request( 'OPTIONS', '/wp/v2/posts' );
-
+		$request  = new WP_REST_Request( 'OPTIONS', '/wp/v2/posts' );
 		$response = rest_get_server()->dispatch( $request );
 		$data     = $response->get_data();
 
 		$this->assertArrayHasKey( 'my_custom_int', $data['schema']['properties'] );
-		$this->assertEquals( $schema, $data['schema']['properties']['my_custom_int'] );
+		$this->assertSame( $schema, $data['schema']['properties']['my_custom_int'] );
 
 		wp_set_current_user( 1 );
 
 		$post_id = $this->factory->post->create();
 
-		$request = new WP_REST_Request( 'GET', '/wp/v2/posts/' . $post_id );
-
+		$request  = new WP_REST_Request( 'GET', '/wp/v2/posts/' . $post_id );
 		$response = rest_get_server()->dispatch( $request );
 		$this->assertArrayHasKey( 'my_custom_int', $response->data );
 
@@ -3971,6 +4179,7 @@ class WP_Test_REST_Posts_Controller extends WP_Test_REST_Post_Type_Controller_Te
 		);
 
 		wp_set_current_user( self::$editor_id );
+
 		// Check for error on update.
 		$request = new WP_REST_Request( 'POST', sprintf( '/wp/v2/posts/%d', self::$post_id ) );
 		$request->set_body_params(
@@ -3999,7 +4208,6 @@ class WP_Test_REST_Posts_Controller extends WP_Test_REST_Post_Type_Controller_Te
 	}
 
 	public function test_publish_action_ldo_registered() {
-
 		$response = rest_get_server()->dispatch( new WP_REST_Request( 'OPTIONS', '/wp/v2/posts' ) );
 		$data     = $response->get_data();
 		$schema   = $data['schema'];
@@ -4011,7 +4219,6 @@ class WP_Test_REST_Posts_Controller extends WP_Test_REST_Post_Type_Controller_Te
 	}
 
 	public function test_sticky_action_ldo_registered_for_posts() {
-
 		$response = rest_get_server()->dispatch( new WP_REST_Request( 'OPTIONS', '/wp/v2/posts' ) );
 		$data     = $response->get_data();
 		$schema   = $data['schema'];
@@ -4023,7 +4230,6 @@ class WP_Test_REST_Posts_Controller extends WP_Test_REST_Post_Type_Controller_Te
 	}
 
 	public function test_sticky_action_ldo_not_registered_for_non_posts() {
-
 		$response = rest_get_server()->dispatch( new WP_REST_Request( 'OPTIONS', '/wp/v2/pages' ) );
 		$data     = $response->get_data();
 		$schema   = $data['schema'];
@@ -4035,7 +4241,6 @@ class WP_Test_REST_Posts_Controller extends WP_Test_REST_Post_Type_Controller_Te
 	}
 
 	public function test_author_action_ldo_registered_for_post_types_with_author_support() {
-
 		$response = rest_get_server()->dispatch( new WP_REST_Request( 'OPTIONS', '/wp/v2/posts' ) );
 		$data     = $response->get_data();
 		$schema   = $data['schema'];
@@ -4047,7 +4252,6 @@ class WP_Test_REST_Posts_Controller extends WP_Test_REST_Post_Type_Controller_Te
 	}
 
 	public function test_author_action_ldo_not_registered_for_post_types_without_author_support() {
-
 		remove_post_type_support( 'post', 'author' );
 
 		// Re-initialize the controller to cache-bust schemas from prior test runs.
@@ -4067,7 +4271,6 @@ class WP_Test_REST_Posts_Controller extends WP_Test_REST_Post_Type_Controller_Te
 	}
 
 	public function test_term_action_ldos_registered() {
-
 		$response = rest_get_server()->dispatch( new WP_REST_Request( 'OPTIONS', '/wp/v2/posts' ) );
 		$data     = $response->get_data();
 		$schema   = $data['schema'];
@@ -4087,7 +4290,6 @@ class WP_Test_REST_Posts_Controller extends WP_Test_REST_Post_Type_Controller_Te
 	}
 
 	public function test_action_links_only_available_in_edit_context() {
-
 		wp_set_current_user( self::$author_id );
 
 		$post = self::factory()->post->create( array( 'post_author' => self::$author_id ) );
@@ -4103,7 +4305,6 @@ class WP_Test_REST_Posts_Controller extends WP_Test_REST_Post_Type_Controller_Te
 	}
 
 	public function test_publish_action_link_exists_for_author() {
-
 		wp_set_current_user( self::$author_id );
 
 		$post = self::factory()->post->create( array( 'post_author' => self::$author_id ) );
@@ -4119,7 +4320,6 @@ class WP_Test_REST_Posts_Controller extends WP_Test_REST_Post_Type_Controller_Te
 	}
 
 	public function test_publish_action_link_does_not_exist_for_contributor() {
-
 		wp_set_current_user( self::$contributor_id );
 
 		$post = self::factory()->post->create( array( 'post_author' => self::$contributor_id ) );
@@ -4135,7 +4335,6 @@ class WP_Test_REST_Posts_Controller extends WP_Test_REST_Post_Type_Controller_Te
 	}
 
 	public function test_sticky_action_exists_for_editor() {
-
 		wp_set_current_user( self::$editor_id );
 
 		$post = self::factory()->post->create( array( 'post_author' => self::$author_id ) );
@@ -4151,7 +4350,6 @@ class WP_Test_REST_Posts_Controller extends WP_Test_REST_Post_Type_Controller_Te
 	}
 
 	public function test_sticky_action_does_not_exist_for_author() {
-
 		wp_set_current_user( self::$author_id );
 
 		$post = self::factory()->post->create( array( 'post_author' => self::$author_id ) );
@@ -4167,7 +4365,6 @@ class WP_Test_REST_Posts_Controller extends WP_Test_REST_Post_Type_Controller_Te
 	}
 
 	public function test_sticky_action_does_not_exist_for_non_post_posts() {
-
 		wp_set_current_user( self::$editor_id );
 
 		$post = self::factory()->post->create(
@@ -4189,7 +4386,6 @@ class WP_Test_REST_Posts_Controller extends WP_Test_REST_Post_Type_Controller_Te
 
 
 	public function test_assign_author_action_exists_for_editor() {
-
 		wp_set_current_user( self::$editor_id );
 
 		$post = self::factory()->post->create( array( 'post_author' => self::$author_id ) );
@@ -4205,7 +4401,6 @@ class WP_Test_REST_Posts_Controller extends WP_Test_REST_Post_Type_Controller_Te
 	}
 
 	public function test_assign_author_action_does_not_exist_for_author() {
-
 		wp_set_current_user( self::$author_id );
 
 		$post = self::factory()->post->create( array( 'post_author' => self::$author_id ) );
@@ -4221,7 +4416,6 @@ class WP_Test_REST_Posts_Controller extends WP_Test_REST_Post_Type_Controller_Te
 	}
 
 	public function test_assign_author_action_does_not_exist_for_post_types_without_author_support() {
-
 		remove_post_type_support( 'post', 'author' );
 
 		wp_set_current_user( self::$editor_id );
@@ -4239,7 +4433,6 @@ class WP_Test_REST_Posts_Controller extends WP_Test_REST_Post_Type_Controller_Te
 	}
 
 	public function test_create_term_action_exists_for_editor() {
-
 		wp_set_current_user( self::$editor_id );
 
 		$post = self::factory()->post->create( array( 'post_author' => self::$author_id ) );
@@ -4257,7 +4450,6 @@ class WP_Test_REST_Posts_Controller extends WP_Test_REST_Post_Type_Controller_Te
 	}
 
 	public function test_create_term_action_non_hierarchical_exists_for_author() {
-
 		wp_set_current_user( self::$author_id );
 
 		$post = self::factory()->post->create( array( 'post_author' => self::$author_id ) );
@@ -4273,7 +4465,6 @@ class WP_Test_REST_Posts_Controller extends WP_Test_REST_Post_Type_Controller_Te
 	}
 
 	public function test_create_term_action_hierarchical_does_not_exists_for_author() {
-
 		wp_set_current_user( self::$author_id );
 
 		$post = self::factory()->post->create( array( 'post_author' => self::$author_id ) );
@@ -4289,7 +4480,6 @@ class WP_Test_REST_Posts_Controller extends WP_Test_REST_Post_Type_Controller_Te
 	}
 
 	public function test_assign_term_action_exists_for_contributor() {
-
 		wp_set_current_user( self::$contributor_id );
 
 		$post = self::factory()->post->create(
@@ -4312,7 +4502,9 @@ class WP_Test_REST_Posts_Controller extends WP_Test_REST_Post_Type_Controller_Te
 
 	public function test_assign_unfiltered_html_action_superadmin() {
 		$post_id = self::factory()->post->create();
+
 		wp_set_current_user( self::$superadmin_id );
+
 		$request = new WP_REST_Request( 'GET', '/wp/v2/posts/' . $post_id );
 		$request->set_param( 'context', 'edit' );
 		$response = rest_do_request( $request );
@@ -4322,7 +4514,9 @@ class WP_Test_REST_Posts_Controller extends WP_Test_REST_Post_Type_Controller_Te
 
 	public function test_assign_unfiltered_html_action_editor() {
 		$post_id = self::factory()->post->create();
+
 		wp_set_current_user( self::$editor_id );
+
 		$request = new WP_REST_Request( 'GET', '/wp/v2/posts/' . $post_id );
 		$request->set_param( 'context', 'edit' );
 		$response = rest_do_request( $request );
@@ -4337,12 +4531,14 @@ class WP_Test_REST_Posts_Controller extends WP_Test_REST_Post_Type_Controller_Te
 
 	public function test_assign_unfiltered_html_action_author() {
 		$post_id = self::factory()->post->create();
+
 		wp_set_current_user( self::$author_id );
+
 		$request = new WP_REST_Request( 'GET', '/wp/v2/posts/' . $post_id );
 		$request->set_param( 'context', 'edit' );
 		$response = rest_do_request( $request );
 		$links    = $response->get_links();
-		// Authors can't ever unfiltered html
+		// Authors can't ever unfiltered html.
 		$this->assertArrayNotHasKey( 'https://api.w.org/action-unfiltered-html', $links );
 	}
 
@@ -4375,7 +4571,7 @@ class WP_Test_REST_Posts_Controller extends WP_Test_REST_Post_Type_Controller_Te
 		$request->set_param( 'context', 'edit' );
 		$response = rest_get_server()->dispatch( $request );
 		$data     = $response->get_data();
-		$this->assertEquals( 200, $response->get_status() );
+		$this->assertSame( 200, $response->get_status() );
 		$this->assertArrayNotHasKey( 'permalink_template', $data );
 		$this->assertArrayNotHasKey( 'generated_slug', $data );
 	}
@@ -4399,16 +4595,16 @@ class WP_Test_REST_Posts_Controller extends WP_Test_REST_Post_Type_Controller_Te
 		$request->set_param( 'context', 'edit' );
 		$response = rest_get_server()->dispatch( $request );
 		$data     = $response->get_data();
-		$this->assertEquals( 200, $response->get_status() );
-		$this->assertEquals( $expected_permalink_template, $data['permalink_template'] );
-		$this->assertEquals( 'permalink-template', $data['generated_slug'] );
+		$this->assertSame( 200, $response->get_status() );
+		$this->assertSame( $expected_permalink_template, $data['permalink_template'] );
+		$this->assertSame( 'permalink-template', $data['generated_slug'] );
 
 		// Neither 'permalink_template' and 'generated_slug' are expected for context=view.
 		$request = new WP_REST_Request( 'GET', '/wp/v2/posts/' . $post_id );
 		$request->set_param( 'context', 'view' );
 		$response = rest_get_server()->dispatch( $request );
 		$data     = $response->get_data();
-		$this->assertEquals( 200, $response->get_status() );
+		$this->assertSame( 200, $response->get_status() );
 		$this->assertArrayNotHasKey( 'permalink_template', $data );
 		$this->assertArrayNotHasKey( 'generated_slug', $data );
 
@@ -4418,10 +4614,9 @@ class WP_Test_REST_Posts_Controller extends WP_Test_REST_Post_Type_Controller_Te
 	 * @ticket 39953
 	 */
 	public function test_putting_same_publish_date_does_not_remove_floating_date() {
-
 		wp_set_current_user( self::$superadmin_id );
 
-		$time = date( 'Y-m-d H:i:s' );
+		$time = gmdate( 'Y-m-d H:i:s' );
 
 		$post = self::factory()->post->create_and_get(
 			array(
@@ -4430,7 +4625,7 @@ class WP_Test_REST_Posts_Controller extends WP_Test_REST_Post_Type_Controller_Te
 			)
 		);
 
-		$this->assertEquals( '0000-00-00 00:00:00', $post->post_date_gmt );
+		$this->assertSame( '0000-00-00 00:00:00', $post->post_date_gmt );
 
 		$get = new WP_REST_Request( 'GET', "/wp/v2/posts/{$post->ID}" );
 		$get->set_query_params( array( 'context' => 'edit' ) );
@@ -4444,21 +4639,20 @@ class WP_Test_REST_Posts_Controller extends WP_Test_REST_Post_Type_Controller_Te
 		$response = rest_get_server()->dispatch( $put );
 		$body     = $response->get_data();
 
-		$this->assertEquals( strtotime( $get_body['date'] ), strtotime( $body['date'] ), 'The dates should be equal', 2 );
-		$this->assertEquals( strtotime( $get_body['date_gmt'] ), strtotime( $body['date_gmt'] ), 'The dates should be equal', 2 );
+		$this->assertEqualsWithDelta( strtotime( $get_body['date'] ), strtotime( $body['date'] ), 2, 'The dates should be equal' );
+		$this->assertEqualsWithDelta( strtotime( $get_body['date_gmt'] ), strtotime( $body['date_gmt'] ), 2, 'The dates should be equal' );
 
-		$this->assertEquals( '0000-00-00 00:00:00', get_post( $post->ID )->post_date_gmt );
+		$this->assertSame( '0000-00-00 00:00:00', get_post( $post->ID )->post_date_gmt );
 	}
 
 	/**
 	 * @ticket 39953
 	 */
 	public function test_putting_different_publish_date_removes_floating_date() {
-
 		wp_set_current_user( self::$superadmin_id );
 
-		$time     = date( 'Y-m-d H:i:s' );
-		$new_time = date( 'Y-m-d H:i:s', strtotime( '+1 week' ) );
+		$time     = gmdate( 'Y-m-d H:i:s' );
+		$new_time = gmdate( 'Y-m-d H:i:s', strtotime( '+1 week' ) );
 
 		$post = self::factory()->post->create_and_get(
 			array(
@@ -4467,7 +4661,7 @@ class WP_Test_REST_Posts_Controller extends WP_Test_REST_Post_Type_Controller_Te
 			)
 		);
 
-		$this->assertEquals( '0000-00-00 00:00:00', $post->post_date_gmt );
+		$this->assertSame( '0000-00-00 00:00:00', $post->post_date_gmt );
 
 		$get = new WP_REST_Request( 'GET', "/wp/v2/posts/{$post->ID}" );
 		$get->set_query_params( array( 'context' => 'edit' ) );
@@ -4488,7 +4682,7 @@ class WP_Test_REST_Posts_Controller extends WP_Test_REST_Post_Type_Controller_Te
 		$response = rest_get_server()->dispatch( $put );
 		$body     = $response->get_data();
 
-		$this->assertEquals( strtotime( mysql_to_rfc3339( $new_time ) ), strtotime( $body['date'] ), 'The dates should be equal', 2 );
+		$this->assertEqualsWithDelta( strtotime( mysql_to_rfc3339( $new_time ) ), strtotime( $body['date'] ), 2, 'The dates should be equal' );
 
 		$this->assertNotEquals( '0000-00-00 00:00:00', get_post( $post->ID )->post_date_gmt );
 	}
@@ -4497,10 +4691,9 @@ class WP_Test_REST_Posts_Controller extends WP_Test_REST_Post_Type_Controller_Te
 	 * @ticket 39953
 	 */
 	public function test_publishing_post_with_same_date_removes_floating_date() {
-
 		wp_set_current_user( self::$superadmin_id );
 
-		$time = date( 'Y-m-d H:i:s' );
+		$time = gmdate( 'Y-m-d H:i:s' );
 
 		$post = self::factory()->post->create_and_get(
 			array(
@@ -4509,7 +4702,7 @@ class WP_Test_REST_Posts_Controller extends WP_Test_REST_Post_Type_Controller_Te
 			)
 		);
 
-		$this->assertEquals( '0000-00-00 00:00:00', $post->post_date_gmt );
+		$this->assertSame( '0000-00-00 00:00:00', $post->post_date_gmt );
 
 		$get = new WP_REST_Request( 'GET', "/wp/v2/posts/{$post->ID}" );
 		$get->set_query_params( array( 'context' => 'edit' ) );
@@ -4530,8 +4723,8 @@ class WP_Test_REST_Posts_Controller extends WP_Test_REST_Post_Type_Controller_Te
 		$response = rest_get_server()->dispatch( $put );
 		$body     = $response->get_data();
 
-		$this->assertEquals( strtotime( $get_body['date'] ), strtotime( $body['date'] ), 'The dates should be equal', 2 );
-		$this->assertEquals( strtotime( $get_body['date_gmt'] ), strtotime( $body['date_gmt'] ), 'The dates should be equal', 2 );
+		$this->assertEqualsWithDelta( strtotime( $get_body['date'] ), strtotime( $body['date'] ), 2, 'The dates should be equal' );
+		$this->assertEqualsWithDelta( strtotime( $get_body['date_gmt'] ), strtotime( $body['date_gmt'] ), 2, 'The dates should be equal' );
 
 		$this->assertNotEquals( '0000-00-00 00:00:00', get_post( $post->ID )->post_date_gmt );
 	}
@@ -4648,6 +4841,41 @@ class WP_Test_REST_Posts_Controller extends WP_Test_REST_Post_Type_Controller_Te
 		$this->assertNull( get_post_type_object( 'test' )->get_rest_controller() );
 	}
 
+	/**
+	 * @ticket 47779
+	 */
+	public function test_rest_post_type_item_schema_filter_change_property() {
+		add_filter( 'rest_post_item_schema', array( $this, 'filter_post_item_schema' ) );
+
+		// Re-initialize the controller to cache-bust schemas from prior test runs.
+		$GLOBALS['wp_rest_server']->override_by_default = true;
+		$controller                                     = new WP_REST_Posts_Controller( 'post' );
+		$controller->register_routes();
+		$GLOBALS['wp_rest_server']->override_by_default = false;
+
+		$request    = new WP_REST_Request( 'OPTIONS', '/wp/v2/posts' );
+		$response   = rest_get_server()->dispatch( $request );
+		$data       = $response->get_data();
+		$properties = $data['schema']['properties']['content']['properties'];
+
+		$this->assertArrayHasKey( 'new_prop', $properties );
+		$this->assertSame( array( 'new_context' ), $properties['new_prop']['context'] );
+	}
+
+	/**
+	 * @ticket 47779
+	 */
+	public function test_rest_post_type_item_schema_filter_add_property_triggers_doing_it_wrong() {
+		add_filter( 'rest_post_item_schema', array( $this, 'filter_post_item_schema_add_property' ) );
+		$this->setExpectedIncorrectUsage( 'WP_REST_Posts_Controller::get_item_schema' );
+
+		// Re-initialize the controller to cache-bust schemas from prior test runs.
+		$GLOBALS['wp_rest_server']->override_by_default = true;
+		$controller                                     = new WP_REST_Posts_Controller( 'post' );
+		$controller->register_routes();
+		$GLOBALS['wp_rest_server']->override_by_default = false;
+	}
+
 	public function tearDown() {
 		_unregister_post_type( 'private-post' );
 		_unregister_post_type( 'youseeme' );
@@ -4675,4 +4903,22 @@ class WP_Test_REST_Posts_Controller extends WP_Test_REST_Post_Type_Controller_Te
 			'post-my-test-template.php' => 'My Test Template',
 		);
 	}
+
+	public function filter_post_item_schema( $schema ) {
+		$schema['properties']['content']['properties']['new_prop'] = array(
+			'description' => __( 'A new prop added with a the rest_post_item_schema filter.' ),
+			'type'        => 'string',
+			'context'     => array( 'new_context' ),
+		);
+		return $schema;
+	}
+
+	public function filter_post_item_schema_add_property( $schema ) {
+		$schema['properties']['something_entirely_new'] = array(
+			'description' => __( 'A new prop added with a the rest_post_item_schema filter.' ),
+			'type'        => 'string',
+			'context'     => array( 'new_context' ),
+		);
+		return $schema;
+	}
 }
diff --git a/tests/rest-api/rest-request-validation.php b/tests/rest-api/rest-request-validation.php
index 14ea7541f7..aab01f2902 100644
--- a/tests/rest-api/rest-request-validation.php
+++ b/tests/rest-api/rest-request-validation.php
@@ -26,13 +26,13 @@ class WP_Test_REST_Request_Validation extends WP_Test_REST_TestCase {
 			)
 		);
 		$ret     = rest_validate_request_arg( 1, $request, 'minmaxrange' );
-		$this->assertEquals( 'minmaxrange must be between 2 (inclusive) and 10 (inclusive)', $ret->get_error_message() );
+		$this->assertSame( 'minmaxrange must be between 2 (inclusive) and 10 (inclusive)', $ret->get_error_message() );
 		$ret = rest_validate_request_arg( 2, $request, 'minmaxrange' );
 		$this->assertTrue( $ret );
 		$ret = rest_validate_request_arg( 10, $request, 'minmaxrange' );
 		$this->assertTrue( $ret );
 		$ret = rest_validate_request_arg( 11, $request, 'minmaxrange' );
-		$this->assertEquals( 'minmaxrange must be between 2 (inclusive) and 10 (inclusive)', $ret->get_error_message() );
+		$this->assertSame( 'minmaxrange must be between 2 (inclusive) and 10 (inclusive)', $ret->get_error_message() );
 	}
 
 	public function test_validate_within_min_max_range_min_exclusive() {
@@ -51,9 +51,9 @@ class WP_Test_REST_Request_Validation extends WP_Test_REST_TestCase {
 			)
 		);
 		$ret     = rest_validate_request_arg( 1, $request, 'minmaxrange' );
-		$this->assertEquals( 'minmaxrange must be between 2 (exclusive) and 10 (inclusive)', $ret->get_error_message() );
+		$this->assertSame( 'minmaxrange must be between 2 (exclusive) and 10 (inclusive)', $ret->get_error_message() );
 		$ret = rest_validate_request_arg( 2, $request, 'minmaxrange' );
-		$this->assertEquals( 'minmaxrange must be between 2 (exclusive) and 10 (inclusive)', $ret->get_error_message() );
+		$this->assertSame( 'minmaxrange must be between 2 (exclusive) and 10 (inclusive)', $ret->get_error_message() );
 		$ret = rest_validate_request_arg( 3, $request, 'minmaxrange' );
 		$this->assertTrue( $ret );
 		$ret = rest_validate_request_arg( 9, $request, 'minmaxrange' );
@@ -61,7 +61,7 @@ class WP_Test_REST_Request_Validation extends WP_Test_REST_TestCase {
 		$ret = rest_validate_request_arg( 10, $request, 'minmaxrange' );
 		$this->assertTrue( $ret );
 		$ret = rest_validate_request_arg( 11, $request, 'minmaxrange' );
-		$this->assertEquals( 'minmaxrange must be between 2 (exclusive) and 10 (inclusive)', $ret->get_error_message() );
+		$this->assertSame( 'minmaxrange must be between 2 (exclusive) and 10 (inclusive)', $ret->get_error_message() );
 	}
 
 	public function test_validate_within_min_max_range_max_exclusive() {
@@ -80,7 +80,7 @@ class WP_Test_REST_Request_Validation extends WP_Test_REST_TestCase {
 			)
 		);
 		$ret     = rest_validate_request_arg( 1, $request, 'minmaxrange' );
-		$this->assertEquals( 'minmaxrange must be between 2 (inclusive) and 10 (exclusive)', $ret->get_error_message() );
+		$this->assertSame( 'minmaxrange must be between 2 (inclusive) and 10 (exclusive)', $ret->get_error_message() );
 		$ret = rest_validate_request_arg( 2, $request, 'minmaxrange' );
 		$this->assertTrue( $ret );
 		$ret = rest_validate_request_arg( 3, $request, 'minmaxrange' );
@@ -88,9 +88,9 @@ class WP_Test_REST_Request_Validation extends WP_Test_REST_TestCase {
 		$ret = rest_validate_request_arg( 9, $request, 'minmaxrange' );
 		$this->assertTrue( $ret );
 		$ret = rest_validate_request_arg( 10, $request, 'minmaxrange' );
-		$this->assertEquals( 'minmaxrange must be between 2 (inclusive) and 10 (exclusive)', $ret->get_error_message() );
+		$this->assertSame( 'minmaxrange must be between 2 (inclusive) and 10 (exclusive)', $ret->get_error_message() );
 		$ret = rest_validate_request_arg( 11, $request, 'minmaxrange' );
-		$this->assertEquals( 'minmaxrange must be between 2 (inclusive) and 10 (exclusive)', $ret->get_error_message() );
+		$this->assertSame( 'minmaxrange must be between 2 (inclusive) and 10 (exclusive)', $ret->get_error_message() );
 	}
 
 	public function test_validate_within_min_max_range_both_exclusive() {
@@ -110,17 +110,17 @@ class WP_Test_REST_Request_Validation extends WP_Test_REST_TestCase {
 			)
 		);
 		$ret     = rest_validate_request_arg( 1, $request, 'minmaxrange' );
-		$this->assertEquals( 'minmaxrange must be between 2 (exclusive) and 10 (exclusive)', $ret->get_error_message() );
+		$this->assertSame( 'minmaxrange must be between 2 (exclusive) and 10 (exclusive)', $ret->get_error_message() );
 		$ret = rest_validate_request_arg( 2, $request, 'minmaxrange' );
-		$this->assertEquals( 'minmaxrange must be between 2 (exclusive) and 10 (exclusive)', $ret->get_error_message() );
+		$this->assertSame( 'minmaxrange must be between 2 (exclusive) and 10 (exclusive)', $ret->get_error_message() );
 		$ret = rest_validate_request_arg( 3, $request, 'minmaxrange' );
 		$this->assertTrue( $ret );
 		$ret = rest_validate_request_arg( 9, $request, 'minmaxrange' );
 		$this->assertTrue( $ret );
 		$ret = rest_validate_request_arg( 10, $request, 'minmaxrange' );
-		$this->assertEquals( 'minmaxrange must be between 2 (exclusive) and 10 (exclusive)', $ret->get_error_message() );
+		$this->assertSame( 'minmaxrange must be between 2 (exclusive) and 10 (exclusive)', $ret->get_error_message() );
 		$ret = rest_validate_request_arg( 11, $request, 'minmaxrange' );
-		$this->assertEquals( 'minmaxrange must be between 2 (exclusive) and 10 (exclusive)', $ret->get_error_message() );
+		$this->assertSame( 'minmaxrange must be between 2 (exclusive) and 10 (exclusive)', $ret->get_error_message() );
 	}
 
 	public function test_validate_greater_than_min_inclusive() {
@@ -137,7 +137,7 @@ class WP_Test_REST_Request_Validation extends WP_Test_REST_TestCase {
 			)
 		);
 		$ret     = rest_validate_request_arg( 1, $request, 'greaterthanmin' );
-		$this->assertEquals( 'greaterthanmin must be greater than or equal to 2', $ret->get_error_message() );
+		$this->assertSame( 'greaterthanmin must be greater than or equal to 2', $ret->get_error_message() );
 		$ret = rest_validate_request_arg( 2, $request, 'greaterthanmin' );
 		$this->assertTrue( $ret );
 	}
@@ -157,9 +157,9 @@ class WP_Test_REST_Request_Validation extends WP_Test_REST_TestCase {
 			)
 		);
 		$ret     = rest_validate_request_arg( 1, $request, 'greaterthanmin' );
-		$this->assertEquals( 'greaterthanmin must be greater than 2', $ret->get_error_message() );
+		$this->assertSame( 'greaterthanmin must be greater than 2', $ret->get_error_message() );
 		$ret = rest_validate_request_arg( 2, $request, 'greaterthanmin' );
-		$this->assertEquals( 'greaterthanmin must be greater than 2', $ret->get_error_message() );
+		$this->assertSame( 'greaterthanmin must be greater than 2', $ret->get_error_message() );
 		$ret = rest_validate_request_arg( 3, $request, 'greaterthanmin' );
 		$this->assertTrue( $ret );
 	}
@@ -178,7 +178,7 @@ class WP_Test_REST_Request_Validation extends WP_Test_REST_TestCase {
 			)
 		);
 		$ret     = rest_validate_request_arg( 11, $request, 'lessthanmax' );
-		$this->assertEquals( 'lessthanmax must be less than or equal to 10', $ret->get_error_message() );
+		$this->assertSame( 'lessthanmax must be less than or equal to 10', $ret->get_error_message() );
 		$ret = rest_validate_request_arg( 10, $request, 'lessthanmax' );
 		$this->assertTrue( $ret );
 	}
@@ -198,9 +198,9 @@ class WP_Test_REST_Request_Validation extends WP_Test_REST_TestCase {
 			)
 		);
 		$ret     = rest_validate_request_arg( 11, $request, 'lessthanmax' );
-		$this->assertEquals( 'lessthanmax must be less than 10', $ret->get_error_message() );
+		$this->assertSame( 'lessthanmax must be less than 10', $ret->get_error_message() );
 		$ret = rest_validate_request_arg( 10, $request, 'lessthanmax' );
-		$this->assertEquals( 'lessthanmax must be less than 10', $ret->get_error_message() );
+		$this->assertSame( 'lessthanmax must be less than 10', $ret->get_error_message() );
 		$ret = rest_validate_request_arg( 9, $request, 'lessthanmax' );
 		$this->assertTrue( $ret );
 	}
diff --git a/tests/rest-api/rest-request.php b/tests/rest-api/rest-request.php
index 2dd539a509..d2f5021ce2 100644
--- a/tests/rest-api/rest-request.php
+++ b/tests/rest-api/rest-request.php
@@ -23,7 +23,7 @@ class Tests_REST_Request extends WP_UnitTestCase {
 
 		$this->request->set_header( 'Content-Type', $value );
 
-		$this->assertEquals( $value, $this->request->get_header( 'Content-Type' ) );
+		$this->assertSame( $value, $this->request->get_header( 'Content-Type' ) );
 	}
 
 	public function test_header_missing() {
@@ -33,7 +33,7 @@ class Tests_REST_Request extends WP_UnitTestCase {
 
 	public function test_remove_header() {
 		$this->request->add_header( 'Test-Header', 'value' );
-		$this->assertEquals( 'value', $this->request->get_header( 'Test-Header' ) );
+		$this->assertSame( 'value', $this->request->get_header( 'Test-Header' ) );
 
 		$this->request->remove_header( 'Test-Header' );
 		$this->assertNull( $this->request->get_header( 'Test-Header' ) );
@@ -45,8 +45,8 @@ class Tests_REST_Request extends WP_UnitTestCase {
 		$this->request->add_header( 'Accept', $value1 );
 		$this->request->add_header( 'Accept', $value2 );
 
-		$this->assertEquals( $value1 . ',' . $value2, $this->request->get_header( 'Accept' ) );
-		$this->assertEquals( array( $value1, $value2 ), $this->request->get_header_as_array( 'Accept' ) );
+		$this->assertSame( $value1 . ',' . $value2, $this->request->get_header( 'Accept' ) );
+		$this->assertSame( array( $value1, $value2 ), $this->request->get_header_as_array( 'Accept' ) );
 	}
 
 	public static function header_provider() {
@@ -66,7 +66,7 @@ class Tests_REST_Request extends WP_UnitTestCase {
 	 * @param string $expected Expected canonicalized version.
 	 */
 	public function test_header_canonicalization( $original, $expected ) {
-		$this->assertEquals( $expected, $this->request->canonicalize_header_name( $original ) );
+		$this->assertSame( $expected, $this->request->canonicalize_header_name( $original ) );
 	}
 
 	public static function content_type_provider() {
@@ -96,10 +96,10 @@ class Tests_REST_Request extends WP_UnitTestCase {
 		$this->request->set_header( 'Content-Type', $header );
 		$parsed = $this->request->get_content_type();
 
-		$this->assertEquals( $value, $parsed['value'] );
-		$this->assertEquals( $type, $parsed['type'] );
-		$this->assertEquals( $subtype, $parsed['subtype'] );
-		$this->assertEquals( $parameters, $parsed['parameters'] );
+		$this->assertSame( $value, $parsed['value'] );
+		$this->assertSame( $type, $parsed['type'] );
+		$this->assertSame( $subtype, $parsed['subtype'] );
+		$this->assertSame( $parameters, $parsed['parameters'] );
 	}
 
 	protected function request_with_parameters() {
@@ -144,7 +144,7 @@ class Tests_REST_Request extends WP_UnitTestCase {
 		$this->request->set_method( 'GET' );
 
 		// Check that query takes precedence.
-		$this->assertEquals( 'query', $this->request->get_param( 'source' ) );
+		$this->assertSame( 'query', $this->request->get_param( 'source' ) );
 
 		// Check that the correct arguments are parsed (and that falling through
 		// the stack works).
@@ -165,7 +165,7 @@ class Tests_REST_Request extends WP_UnitTestCase {
 		$this->request->set_attributes( array( 'accept_json' => true ) );
 
 		// Check that POST takes precedence.
-		$this->assertEquals( 'body', $this->request->get_param( 'source' ) );
+		$this->assertSame( 'body', $this->request->get_param( 'source' ) );
 
 		// Check that the correct arguments are parsed (and that falling through
 		// the stack works).
@@ -186,7 +186,7 @@ class Tests_REST_Request extends WP_UnitTestCase {
 		$this->request->set_attributes( array( 'accept_json' => true ) );
 
 		// Check that JSON takes precedence.
-		$this->assertEquals( 'json', $this->request->get_param( 'source' ) );
+		$this->assertSame( 'json', $this->request->get_param( 'source' ) );
 
 		// Check that the correct arguments are parsed (and that falling through
 		// the stack works).
@@ -208,7 +208,7 @@ class Tests_REST_Request extends WP_UnitTestCase {
 		$this->request->set_body( '{ this is not json }' );
 
 		// Check that JSON is ignored.
-		$this->assertEquals( 'body', $this->request->get_param( 'source' ) );
+		$this->assertSame( 'body', $this->request->get_param( 'source' ) );
 
 		// Check that the correct arguments are parsed (and that falling through
 		// the stack works).
@@ -252,7 +252,7 @@ class Tests_REST_Request extends WP_UnitTestCase {
 		$this->request->set_body_params( array() );
 		$this->request->set_body( http_build_query( $data ) );
 		foreach ( $data as $key => $expected_value ) {
-			$this->assertEquals( $expected_value, $this->request->get_param( $key ) );
+			$this->assertSame( $expected_value, $this->request->get_param( $key ) );
 		}
 	}
 
@@ -274,7 +274,7 @@ class Tests_REST_Request extends WP_UnitTestCase {
 		$this->request->set_body( wp_json_encode( $data ) );
 
 		foreach ( $data as $key => $expected_value ) {
-			$this->assertEquals( $expected_value, $this->request->get_param( $key ) );
+			$this->assertSame( $expected_value, $this->request->get_param( $key ) );
 		}
 	}
 
@@ -296,7 +296,7 @@ class Tests_REST_Request extends WP_UnitTestCase {
 		$this->request->set_body( wp_json_encode( $data ) );
 
 		foreach ( $data as $key => $expected_value ) {
-			$this->assertEquals( $expected_value, $this->request->get_param( $key ) );
+			$this->assertSame( $expected_value, $this->request->get_param( $key ) );
 		}
 	}
 
@@ -307,12 +307,12 @@ class Tests_REST_Request extends WP_UnitTestCase {
 
 		$expected = array(
 			'source'             => 'body',
+			'has_default_params' => true,
 			'has_url_params'     => true,
 			'has_query_params'   => true,
 			'has_body_params'    => true,
-			'has_default_params' => true,
 		);
-		$this->assertEquals( $expected, $this->request->get_params() );
+		$this->assertSame( $expected, $this->request->get_params() );
 	}
 
 	public function test_parameter_merging_with_numeric_keys() {
@@ -326,7 +326,7 @@ class Tests_REST_Request extends WP_UnitTestCase {
 			'1' => 'hello',
 			'2' => 'goodbye',
 		);
-		$this->assertEquals( $expected, $this->request->get_params() );
+		$this->assertSame( $expected, $this->request->get_params() );
 	}
 
 	public function test_sanitize_params() {
@@ -352,8 +352,8 @@ class Tests_REST_Request extends WP_UnitTestCase {
 
 		$this->request->sanitize_params();
 
-		$this->assertEquals( 123, $this->request->get_param( 'someinteger' ) );
-		$this->assertEquals( 0, $this->request->get_param( 'somestring' ) );
+		$this->assertSame( 123, $this->request->get_param( 'someinteger' ) );
+		$this->assertSame( 0, $this->request->get_param( 'somestring' ) );
 	}
 
 	public function test_sanitize_params_error() {
@@ -378,7 +378,7 @@ class Tests_REST_Request extends WP_UnitTestCase {
 
 		$valid = $this->request->sanitize_params();
 		$this->assertWPError( $valid );
-		$this->assertEquals( 'rest_invalid_param', $valid->get_error_code() );
+		$this->assertSame( 'rest_invalid_param', $valid->get_error_code() );
 	}
 
 	public function test_sanitize_params_with_null_callback() {
@@ -439,7 +439,7 @@ class Tests_REST_Request extends WP_UnitTestCase {
 		$valid = $this->request->has_valid_params();
 
 		$this->assertWPError( $valid );
-		$this->assertEquals( 'rest_missing_callback_param', $valid->get_error_code() );
+		$this->assertSame( 'rest_missing_callback_param', $valid->get_error_code() );
 	}
 
 	public function test_has_valid_params_required_flag_multiple() {
@@ -459,7 +459,7 @@ class Tests_REST_Request extends WP_UnitTestCase {
 		$valid = $this->request->has_valid_params();
 
 		$this->assertWPError( $valid );
-		$this->assertEquals( 'rest_missing_callback_param', $valid->get_error_code() );
+		$this->assertSame( 'rest_missing_callback_param', $valid->get_error_code() );
 
 		$data = $valid->get_error_data( 'rest_missing_callback_param' );
 
@@ -487,7 +487,7 @@ class Tests_REST_Request extends WP_UnitTestCase {
 		$valid = $this->request->has_valid_params();
 
 		$this->assertWPError( $valid );
-		$this->assertEquals( 'rest_invalid_param', $valid->get_error_code() );
+		$this->assertSame( 'rest_invalid_param', $valid->get_error_code() );
 	}
 
 	public function test_has_valid_params_json_error() {
@@ -496,9 +496,9 @@ class Tests_REST_Request extends WP_UnitTestCase {
 
 		$valid = $this->request->has_valid_params();
 		$this->assertWPError( $valid );
-		$this->assertEquals( 'rest_invalid_json', $valid->get_error_code() );
+		$this->assertSame( 'rest_invalid_json', $valid->get_error_code() );
 		$data = $valid->get_error_data();
-		$this->assertEquals( JSON_ERROR_SYNTAX, $data['json_error_code'] );
+		$this->assertSame( JSON_ERROR_SYNTAX, $data['json_error_code'] );
 	}
 
 
@@ -534,7 +534,7 @@ class Tests_REST_Request extends WP_UnitTestCase {
 		$valid = $this->request->has_valid_params();
 
 		$this->assertWPError( $valid );
-		$this->assertEquals( 'rest_invalid_param', $valid->get_error_code() );
+		$this->assertSame( 'rest_invalid_param', $valid->get_error_code() );
 
 		$data = $valid->get_error_data( 'rest_invalid_param' );
 
@@ -567,8 +567,8 @@ class Tests_REST_Request extends WP_UnitTestCase {
 		$this->assertWPError( $valid );
 		$error_data = $valid->get_error_data();
 
-		$this->assertEquals( array( 'someinteger', 'someotherparams' ), array_keys( $error_data['params'] ) );
-		$this->assertEquals( 'This is not valid!', $error_data['params']['someotherparams'] );
+		$this->assertSame( array( 'someinteger', 'someotherparams' ), array_keys( $error_data['params'] ) );
+		$this->assertSame( 'This is not valid!', $error_data['params']['someotherparams'] );
 	}
 
 	public function _return_wp_error_on_validate_callback() {
@@ -594,11 +594,11 @@ class Tests_REST_Request extends WP_UnitTestCase {
 	public function test_from_url( $permalink_structure, $original_url ) {
 		update_option( 'permalink_structure', $permalink_structure );
 		$url = add_query_arg( 'foo', 'bar', rest_url( '/wp/v2/posts/1' ) );
-		$this->assertEquals( $original_url, $url );
+		$this->assertSame( $original_url, $url );
 		$request = WP_REST_Request::from_url( $url );
 		$this->assertInstanceOf( 'WP_REST_Request', $request );
-		$this->assertEquals( '/wp/v2/posts/1', $request->get_route() );
-		$this->assertEqualSets(
+		$this->assertSame( '/wp/v2/posts/1', $request->get_route() );
+		$this->assertSameSets(
 			array(
 				'foo' => 'bar',
 			),
@@ -623,7 +623,7 @@ class Tests_REST_Request extends WP_UnitTestCase {
 	public function test_set_param() {
 		$request = new WP_REST_Request();
 		$request->set_param( 'param', 'value' );
-		$this->assertEquals( 'value', $request->get_param( 'param' ) );
+		$this->assertSame( 'value', $request->get_param( 'param' ) );
 	}
 
 	public function test_set_param_follows_parameter_order() {
@@ -637,17 +637,214 @@ class Tests_REST_Request extends WP_UnitTestCase {
 				)
 			)
 		);
-		$this->assertEquals( 'value', $request->get_param( 'param' ) );
-		$this->assertEquals(
+		$this->assertSame( 'value', $request->get_param( 'param' ) );
+		$this->assertSame(
 			array( 'param' => 'value' ),
 			$request->get_json_params()
 		);
 
 		$request->set_param( 'param', 'new_value' );
-		$this->assertEquals( 'new_value', $request->get_param( 'param' ) );
-		$this->assertEquals(
+		$this->assertSame( 'new_value', $request->get_param( 'param' ) );
+		$this->assertSame(
 			array( 'param' => 'new_value' ),
 			$request->get_json_params()
 		);
 	}
+
+	/**
+	 * @ticket 40838
+	 */
+	public function test_set_param_updates_param_in_json_and_query() {
+		$request = new WP_REST_Request();
+		$request->add_header( 'content-type', 'application/json' );
+		$request->set_method( 'POST' );
+		$request->set_body(
+			wp_json_encode(
+				array(
+					'param' => 'value_body',
+				)
+			)
+		);
+		$request->set_query_params(
+			array(
+				'param' => 'value_query',
+			)
+		);
+		$request->set_param( 'param', 'new_value' );
+
+		$this->assertSame( 'new_value', $request->get_param( 'param' ) );
+		$this->assertSame( array(), $request->get_body_params() );
+		$this->assertSame( array( 'param' => 'new_value' ), $request->get_json_params() );
+		$this->assertSame( array( 'param' => 'new_value' ), $request->get_query_params() );
+	}
+
+	/**
+	 * @ticket 40838
+	 */
+	public function test_set_param_updates_param_if_already_exists_in_query() {
+		$request = new WP_REST_Request();
+		$request->add_header( 'content-type', 'application/json' );
+		$request->set_method( 'POST' );
+		$request->set_body(
+			wp_json_encode(
+				array(
+					'param_body' => 'value_body',
+				)
+			)
+		);
+		$original_defaults = array(
+			'param_query' => 'default_query_value',
+			'param_body'  => 'default_body_value',
+		);
+		$request->set_default_params( $original_defaults );
+		$request->set_query_params(
+			array(
+				'param_query' => 'value_query',
+			)
+		);
+		$request->set_param( 'param_query', 'new_value' );
+
+		$this->assertSame( 'new_value', $request->get_param( 'param_query' ) );
+		$this->assertSame( array(), $request->get_body_params() );
+		$this->assertSame( array( 'param_body' => 'value_body' ), $request->get_json_params() );
+		$this->assertSame( array( 'param_query' => 'new_value' ), $request->get_query_params() );
+		// Verify the default wasn't overwritten.
+		$this->assertSame( $original_defaults, $request->get_default_params() );
+	}
+
+	/**
+	 * @ticket 40838
+	 */
+	public function test_set_param_to_null_updates_param_in_json_and_query() {
+		$request = new WP_REST_Request();
+		$request->add_header( 'content-type', 'application/json' );
+		$request->set_method( 'POST' );
+		$request->set_body(
+			wp_json_encode(
+				array(
+					'param' => 'value_body',
+				)
+			)
+		);
+		$request->set_query_params(
+			array(
+				'param' => 'value_query',
+			)
+		);
+		$request->set_param( 'param', null );
+
+		$this->assertNull( $request->get_param( 'param' ) );
+		$this->assertSame( array(), $request->get_body_params() );
+		$this->assertSame( array( 'param' => null ), $request->get_json_params() );
+		$this->assertSame( array( 'param' => null ), $request->get_query_params() );
+	}
+
+	/**
+	 * @ticket 40838
+	 */
+	public function test_set_param_from_null_updates_param_in_json_and_query_with_null() {
+		$request = new WP_REST_Request();
+		$request->add_header( 'content-type', 'application/json' );
+		$request->set_method( 'POST' );
+		$request->set_body(
+			wp_json_encode(
+				array(
+					'param' => null,
+				)
+			)
+		);
+		$request->set_query_params(
+			array(
+				'param' => null,
+			)
+		);
+		$request->set_param( 'param', 'new_value' );
+
+		$this->assertSame( 'new_value', $request->get_param( 'param' ) );
+		$this->assertSame( array(), $request->get_body_params() );
+		$this->assertSame( array( 'param' => 'new_value' ), $request->get_json_params() );
+		$this->assertSame( array( 'param' => 'new_value' ), $request->get_query_params() );
+	}
+
+	/**
+	 * @ticket 50786
+	 */
+	public function test_set_param_with_invalid_json() {
+		$request = new WP_REST_Request();
+		$request->add_header( 'content-type', 'application/json' );
+		$request->set_method( 'POST' );
+		$request->set_body( '' );
+		$request->set_param( 'param', 'value' );
+
+		$this->assertTrue( $request->has_param( 'param' ) );
+		$this->assertSame( 'value', $request->get_param( 'param' ) );
+	}
+
+	/**
+	 * @ticket 51255
+	 */
+	public function test_route_level_validate_callback() {
+		$request = new WP_REST_Request();
+		$request->set_query_params( array( 'test' => 'value' ) );
+
+		$error    = new WP_Error( 'error_code', __( 'Error Message' ), array( 'status' => 400 ) );
+		$callback = $this->createPartialMock( 'stdClass', array( '__invoke' ) );
+		$callback->expects( self::once() )->method( '__invoke' )->with( self::identicalTo( $request ) )->willReturn( $error );
+		$request->set_attributes(
+			array(
+				'args'              => array(
+					'test' => array(
+						'validate_callback' => '__return_true',
+					),
+				),
+				'validate_callback' => $callback,
+			)
+		);
+
+		$this->assertSame( $error, $request->has_valid_params() );
+	}
+
+	/**
+	 * @ticket 51255
+	 */
+	public function test_route_level_validate_callback_no_parameter_callbacks() {
+		$request = new WP_REST_Request();
+		$request->set_query_params( array( 'test' => 'value' ) );
+
+		$error    = new WP_Error( 'error_code', __( 'Error Message' ), array( 'status' => 400 ) );
+		$callback = $this->createPartialMock( 'stdClass', array( '__invoke' ) );
+		$callback->expects( self::once() )->method( '__invoke' )->with( self::identicalTo( $request ) )->willReturn( $error );
+		$request->set_attributes(
+			array(
+				'validate_callback' => $callback,
+			)
+		);
+
+		$this->assertSame( $error, $request->has_valid_params() );
+	}
+
+	/**
+	 * @ticket 51255
+	 */
+	public function test_route_level_validate_callback_is_not_executed_if_parameter_validation_fails() {
+		$request = new WP_REST_Request();
+		$request->set_query_params( array( 'test' => 'value' ) );
+
+		$callback = $this->createPartialMock( 'stdClass', array( '__invoke' ) );
+		$callback->expects( self::never() )->method( '__invoke' );
+		$request->set_attributes(
+			array(
+				'validate_callback' => $callback,
+				'args'              => array(
+					'test' => array(
+						'validate_callback' => '__return_false',
+					),
+				),
+			)
+		);
+
+		$valid = $request->has_valid_params();
+		$this->assertWPError( $valid );
+		$this->assertEquals( 'rest_invalid_param', $valid->get_error_code() );
+	}
 }
diff --git a/tests/rest-api/rest-revisions-controller.php b/tests/rest-api/rest-revisions-controller.php
index b181c2d5ee..8a7ad9fbfa 100644
--- a/tests/rest-api/rest-revisions-controller.php
+++ b/tests/rest-api/rest-revisions-controller.php
@@ -106,18 +106,18 @@ class WP_Test_REST_Revisions_Controller extends WP_Test_REST_Controller_Testcase
 	}
 
 	public function test_context_param() {
-		// Collection
+		// Collection.
 		$request  = new WP_REST_Request( 'OPTIONS', '/wp/v2/posts/' . self::$post_id . '/revisions' );
 		$response = rest_get_server()->dispatch( $request );
 		$data     = $response->get_data();
-		$this->assertEquals( 'view', $data['endpoints'][0]['args']['context']['default'] );
-		$this->assertEqualSets( array( 'view', 'edit', 'embed' ), $data['endpoints'][0]['args']['context']['enum'] );
-		// Single
+		$this->assertSame( 'view', $data['endpoints'][0]['args']['context']['default'] );
+		$this->assertSameSets( array( 'view', 'edit', 'embed' ), $data['endpoints'][0]['args']['context']['enum'] );
+		// Single.
 		$request  = new WP_REST_Request( 'OPTIONS', '/wp/v2/posts/' . self::$post_id . '/revisions/' . $this->revision_1->ID );
 		$response = rest_get_server()->dispatch( $request );
 		$data     = $response->get_data();
-		$this->assertEquals( 'view', $data['endpoints'][0]['args']['context']['default'] );
-		$this->assertEqualSets( array( 'view', 'edit', 'embed' ), $data['endpoints'][0]['args']['context']['enum'] );
+		$this->assertSame( 'view', $data['endpoints'][0]['args']['context']['default'] );
+		$this->assertSameSets( array( 'view', 'edit', 'embed' ), $data['endpoints'][0]['args']['context']['enum'] );
 	}
 
 	public function test_get_items() {
@@ -125,17 +125,17 @@ class WP_Test_REST_Revisions_Controller extends WP_Test_REST_Controller_Testcase
 		$request  = new WP_REST_Request( 'GET', '/wp/v2/posts/' . self::$post_id . '/revisions' );
 		$response = rest_get_server()->dispatch( $request );
 		$data     = $response->get_data();
-		$this->assertEquals( 200, $response->get_status() );
+		$this->assertSame( 200, $response->get_status() );
 		$this->assertCount( $this->total_revisions, $data );
 
-		// Reverse chron
-		$this->assertEquals( $this->revision_id3, $data[0]['id'] );
+		// Reverse chronology.
+		$this->assertSame( $this->revision_id3, $data[0]['id'] );
 		$this->check_get_revision_response( $data[0], $this->revision_3 );
 
-		$this->assertEquals( $this->revision_id2, $data[1]['id'] );
+		$this->assertSame( $this->revision_id2, $data[1]['id'] );
 		$this->check_get_revision_response( $data[1], $this->revision_2 );
 
-		$this->assertEquals( $this->revision_id1, $data[2]['id'] );
+		$this->assertSame( $this->revision_id1, $data[2]['id'] );
 		$this->check_get_revision_response( $data[2], $this->revision_1 );
 	}
 
@@ -168,7 +168,7 @@ class WP_Test_REST_Revisions_Controller extends WP_Test_REST_Controller_Testcase
 		wp_set_current_user( self::$editor_id );
 		$request  = new WP_REST_Request( 'GET', '/wp/v2/posts/' . self::$post_id . '/revisions/' . $this->revision_id1 );
 		$response = rest_get_server()->dispatch( $request );
-		$this->assertEquals( 200, $response->get_status() );
+		$this->assertSame( 200, $response->get_status() );
 		$this->check_get_revision_response( $response, $this->revision_1 );
 		$fields = array(
 			'author',
@@ -185,7 +185,7 @@ class WP_Test_REST_Revisions_Controller extends WP_Test_REST_Controller_Testcase
 			'content',
 		);
 		$data   = $response->get_data();
-		$this->assertEqualSets( $fields, array_keys( $data ) );
+		$this->assertSameSets( $fields, array_keys( $data ) );
 		$this->assertSame( self::$editor_id, $data['author'] );
 	}
 
@@ -204,7 +204,7 @@ class WP_Test_REST_Revisions_Controller extends WP_Test_REST_Controller_Testcase
 			'excerpt',
 		);
 		$data     = $response->get_data();
-		$this->assertEqualSets( $fields, array_keys( $data ) );
+		$this->assertSameSets( $fields, array_keys( $data ) );
 	}
 
 	public function test_get_item_no_permission() {
@@ -241,6 +241,18 @@ class WP_Test_REST_Revisions_Controller extends WP_Test_REST_Controller_Testcase
 		$this->assertNotNull( get_post( $this->revision_id1 ) );
 	}
 
+	/**
+	 * @ticket 49645
+	 */
+	public function test_delete_item_parent_check() {
+		wp_set_current_user( self::$contributor_id );
+		$request = new WP_REST_Request( 'DELETE', '/wp/v2/posts/' . self::$post_id . '/revisions/' . $this->revision_id1 );
+		$request->set_param( 'force', true );
+		$response = rest_get_server()->dispatch( $request );
+		$this->assertErrorResponse( 'rest_cannot_delete', $response, 403 );
+		$this->assertNotNull( get_post( $this->revision_id1 ) );
+	}
+
 	/**
 	 * @ticket 43709
 	 */
@@ -250,7 +262,7 @@ class WP_Test_REST_Revisions_Controller extends WP_Test_REST_Controller_Testcase
 		$request = new WP_REST_Request( 'DELETE', '/wp/v2/posts/' . self::$post_id . '/revisions/' . $this->revision_id1 );
 		$request->set_param( 'force', true );
 		$response = rest_get_server()->dispatch( $request );
-		$this->assertEquals( 200, $response->get_status() );
+		$this->assertSame( 200, $response->get_status() );
 		$this->assertNull( get_post( $this->revision_id1 ) );
 	}
 
@@ -281,7 +293,7 @@ class WP_Test_REST_Revisions_Controller extends WP_Test_REST_Controller_Testcase
 		$response = rest_get_server()->dispatch( $request );
 		$this->assertErrorResponse( 'rest_trash_not_supported', $response, 501 );
 
-		// Ensure the revision still exists
+		// Ensure the revision still exists.
 		$this->assertNotNull( get_post( $this->revision_id1 ) );
 	}
 
@@ -289,14 +301,14 @@ class WP_Test_REST_Revisions_Controller extends WP_Test_REST_Controller_Testcase
 		wp_set_current_user( self::$contributor_id );
 		$request  = new WP_REST_Request( 'DELETE', '/wp/v2/posts/' . self::$post_id . '/revisions/' . $this->revision_id1 );
 		$response = rest_get_server()->dispatch( $request );
-		$this->assertErrorResponse( 'rest_cannot_read', $response, 403 );
+		$this->assertErrorResponse( 'rest_cannot_delete', $response, 403 );
 	}
 
 	public function test_prepare_item() {
 		wp_set_current_user( self::$editor_id );
 		$request  = new WP_REST_Request( 'GET', '/wp/v2/posts/' . self::$post_id . '/revisions/' . $this->revision_id1 );
 		$response = rest_get_server()->dispatch( $request );
-		$this->assertEquals( 200, $response->get_status() );
+		$this->assertSame( 200, $response->get_status() );
 		$this->check_get_revision_response( $response, $this->revision_1 );
 	}
 
@@ -308,7 +320,7 @@ class WP_Test_REST_Revisions_Controller extends WP_Test_REST_Controller_Testcase
 		$request->set_param( '_fields', 'id,slug' );
 		$revision = get_post( $this->revision_id1 );
 		$response = $endpoint->prepare_item_for_response( $revision, $request );
-		$this->assertEquals(
+		$this->assertSame(
 			array(
 				'id',
 				'slug',
@@ -322,7 +334,7 @@ class WP_Test_REST_Revisions_Controller extends WP_Test_REST_Controller_Testcase
 		$response   = rest_get_server()->dispatch( $request );
 		$data       = $response->get_data();
 		$properties = $data['schema']['properties'];
-		$this->assertEquals( 12, count( $properties ) );
+		$this->assertSame( 12, count( $properties ) );
 		$this->assertArrayHasKey( 'author', $properties );
 		$this->assertArrayHasKey( 'content', $properties );
 		$this->assertArrayHasKey( 'date', $properties );
@@ -374,7 +386,7 @@ class WP_Test_REST_Revisions_Controller extends WP_Test_REST_Controller_Testcase
 		$data     = $response->get_data();
 
 		$this->assertArrayHasKey( 'my_custom_int', $data['schema']['properties'] );
-		$this->assertEquals( $schema, $data['schema']['properties']['my_custom_int'] );
+		$this->assertSame( $schema, $data['schema']['properties']['my_custom_int'] );
 
 		wp_set_current_user( 1 );
 
@@ -407,30 +419,30 @@ class WP_Test_REST_Revisions_Controller extends WP_Test_REST_Controller_Testcase
 		$this->assertEquals( $revision->post_author, $response['author'] );
 
 		$rendered_content = apply_filters( 'the_content', $revision->post_content );
-		$this->assertEquals( $rendered_content, $response['content']['rendered'] );
+		$this->assertSame( $rendered_content, $response['content']['rendered'] );
 
-		$this->assertEquals( mysql_to_rfc3339( $revision->post_date ), $response['date'] );
-		$this->assertEquals( mysql_to_rfc3339( $revision->post_date_gmt ), $response['date_gmt'] );
+		$this->assertSame( mysql_to_rfc3339( $revision->post_date ), $response['date'] );
+		$this->assertSame( mysql_to_rfc3339( $revision->post_date_gmt ), $response['date_gmt'] );
 
 		$rendered_excerpt = apply_filters( 'the_excerpt', apply_filters( 'get_the_excerpt', $revision->post_excerpt, $revision ) );
-		$this->assertEquals( $rendered_excerpt, $response['excerpt']['rendered'] );
+		$this->assertSame( $rendered_excerpt, $response['excerpt']['rendered'] );
 
 		$rendered_guid = apply_filters( 'get_the_guid', $revision->guid, $revision->ID );
-		$this->assertEquals( $rendered_guid, $response['guid']['rendered'] );
+		$this->assertSame( $rendered_guid, $response['guid']['rendered'] );
 
-		$this->assertEquals( $revision->ID, $response['id'] );
-		$this->assertEquals( mysql_to_rfc3339( $revision->post_modified ), $response['modified'] );
-		$this->assertEquals( mysql_to_rfc3339( $revision->post_modified_gmt ), $response['modified_gmt'] );
-		$this->assertEquals( $revision->post_name, $response['slug'] );
+		$this->assertSame( $revision->ID, $response['id'] );
+		$this->assertSame( mysql_to_rfc3339( $revision->post_modified ), $response['modified'] );
+		$this->assertSame( mysql_to_rfc3339( $revision->post_modified_gmt ), $response['modified_gmt'] );
+		$this->assertSame( $revision->post_name, $response['slug'] );
 
 		$rendered_title = get_the_title( $revision->ID );
-		$this->assertEquals( $rendered_title, $response['title']['rendered'] );
+		$this->assertSame( $rendered_title, $response['title']['rendered'] );
 
 		$parent            = get_post( $revision->post_parent );
 		$parent_controller = new WP_REST_Posts_Controller( $parent->post_type );
 		$parent_object     = get_post_type_object( $parent->post_type );
 		$parent_base       = ! empty( $parent_object->rest_base ) ? $parent_object->rest_base : $parent_object->name;
-		$this->assertEquals( rest_url( '/wp/v2/' . $parent_base . '/' . $revision->post_parent ), $links['parent'][0]['href'] );
+		$this->assertSame( rest_url( '/wp/v2/' . $parent_base . '/' . $revision->post_parent ), $links['parent'][0]['href'] );
 	}
 
 	public function test_get_item_sets_up_postdata() {
@@ -441,8 +453,8 @@ class WP_Test_REST_Revisions_Controller extends WP_Test_REST_Controller_Testcase
 		$post           = get_post();
 		$parent_post_id = wp_is_post_revision( $post->ID );
 
-		$this->assertEquals( $post->ID, $this->revision_id1 );
-		$this->assertEquals( $parent_post_id, self::$post_id );
+		$this->assertSame( $post->ID, $this->revision_id1 );
+		$this->assertSame( $parent_post_id, self::$post_id );
 	}
 
 	/**
diff --git a/tests/rest-api/rest-schema-sanitization.php b/tests/rest-api/rest-schema-sanitization.php
index 1b2fd1d90c..e91278bca5 100644
--- a/tests/rest-api/rest-schema-sanitization.php
+++ b/tests/rest-api/rest-schema-sanitization.php
@@ -16,7 +16,7 @@ class WP_Test_REST_Schema_Sanitization extends WP_UnitTestCase {
 			'type' => 'number',
 		);
 		$this->assertEquals( 1, rest_sanitize_value_from_schema( 1, $schema ) );
-		$this->assertEquals( 1.10, rest_sanitize_value_from_schema( '1.10', $schema ) );
+		$this->assertSame( 1.10, rest_sanitize_value_from_schema( '1.10', $schema ) );
 		$this->assertEquals( 1, rest_sanitize_value_from_schema( '1abc', $schema ) );
 		$this->assertEquals( 0, rest_sanitize_value_from_schema( 'abc', $schema ) );
 		$this->assertEquals( 0, rest_sanitize_value_from_schema( array(), $schema ) );
@@ -26,34 +26,34 @@ class WP_Test_REST_Schema_Sanitization extends WP_UnitTestCase {
 		$schema = array(
 			'type' => 'integer',
 		);
-		$this->assertEquals( 1, rest_sanitize_value_from_schema( 1, $schema ) );
-		$this->assertEquals( 1, rest_sanitize_value_from_schema( '1.10', $schema ) );
-		$this->assertEquals( 1, rest_sanitize_value_from_schema( '1abc', $schema ) );
-		$this->assertEquals( 0, rest_sanitize_value_from_schema( 'abc', $schema ) );
-		$this->assertEquals( 0, rest_sanitize_value_from_schema( array(), $schema ) );
+		$this->assertSame( 1, rest_sanitize_value_from_schema( 1, $schema ) );
+		$this->assertSame( 1, rest_sanitize_value_from_schema( '1.10', $schema ) );
+		$this->assertSame( 1, rest_sanitize_value_from_schema( '1abc', $schema ) );
+		$this->assertSame( 0, rest_sanitize_value_from_schema( 'abc', $schema ) );
+		$this->assertSame( 0, rest_sanitize_value_from_schema( array(), $schema ) );
 	}
 
 	public function test_type_string() {
 		$schema = array(
 			'type' => 'string',
 		);
-		$this->assertEquals( 'Hello', rest_sanitize_value_from_schema( 'Hello', $schema ) );
-		$this->assertEquals( '1.10', rest_sanitize_value_from_schema( '1.10', $schema ) );
-		$this->assertEquals( '1.1', rest_sanitize_value_from_schema( 1.1, $schema ) );
-		$this->assertEquals( '1', rest_sanitize_value_from_schema( 1, $schema ) );
+		$this->assertSame( 'Hello', rest_sanitize_value_from_schema( 'Hello', $schema ) );
+		$this->assertSame( '1.10', rest_sanitize_value_from_schema( '1.10', $schema ) );
+		$this->assertSame( '1.1', rest_sanitize_value_from_schema( 1.1, $schema ) );
+		$this->assertSame( '1', rest_sanitize_value_from_schema( 1, $schema ) );
 	}
 
 	public function test_type_boolean() {
 		$schema = array(
 			'type' => 'boolean',
 		);
-		$this->assertEquals( true, rest_sanitize_value_from_schema( '1', $schema ) );
-		$this->assertEquals( true, rest_sanitize_value_from_schema( 'true', $schema ) );
-		$this->assertEquals( true, rest_sanitize_value_from_schema( '100', $schema ) );
-		$this->assertEquals( true, rest_sanitize_value_from_schema( 1, $schema ) );
-		$this->assertEquals( false, rest_sanitize_value_from_schema( '0', $schema ) );
-		$this->assertEquals( false, rest_sanitize_value_from_schema( 'false', $schema ) );
-		$this->assertEquals( false, rest_sanitize_value_from_schema( 0, $schema ) );
+		$this->assertTrue( rest_sanitize_value_from_schema( '1', $schema ) );
+		$this->assertTrue( rest_sanitize_value_from_schema( 'true', $schema ) );
+		$this->assertTrue( rest_sanitize_value_from_schema( '100', $schema ) );
+		$this->assertTrue( rest_sanitize_value_from_schema( 1, $schema ) );
+		$this->assertFalse( rest_sanitize_value_from_schema( '0', $schema ) );
+		$this->assertFalse( rest_sanitize_value_from_schema( 'false', $schema ) );
+		$this->assertFalse( rest_sanitize_value_from_schema( 0, $schema ) );
 	}
 
 	public function test_format_email() {
@@ -61,9 +61,9 @@ class WP_Test_REST_Schema_Sanitization extends WP_UnitTestCase {
 			'type'   => 'string',
 			'format' => 'email',
 		);
-		$this->assertEquals( 'email@example.com', rest_sanitize_value_from_schema( 'email@example.com', $schema ) );
-		$this->assertEquals( 'a@b.c', rest_sanitize_value_from_schema( 'a@b.c', $schema ) );
-		$this->assertEquals( 'invalid', rest_sanitize_value_from_schema( 'invalid', $schema ) );
+		$this->assertSame( 'email@example.com', rest_sanitize_value_from_schema( 'email@example.com', $schema ) );
+		$this->assertSame( 'a@b.c', rest_sanitize_value_from_schema( 'a@b.c', $schema ) );
+		$this->assertSame( 'invalid', rest_sanitize_value_from_schema( 'invalid', $schema ) );
 	}
 
 	public function test_format_ip() {
@@ -72,9 +72,38 @@ class WP_Test_REST_Schema_Sanitization extends WP_UnitTestCase {
 			'format' => 'ip',
 		);
 
-		$this->assertEquals( '127.0.0.1', rest_sanitize_value_from_schema( '127.0.0.1', $schema ) );
-		$this->assertEquals( 'hello', rest_sanitize_value_from_schema( 'hello', $schema ) );
-		$this->assertEquals( '2001:DB8:0:0:8:800:200C:417A', rest_sanitize_value_from_schema( '2001:DB8:0:0:8:800:200C:417A', $schema ) );
+		$this->assertSame( '127.0.0.1', rest_sanitize_value_from_schema( '127.0.0.1', $schema ) );
+		$this->assertSame( 'hello', rest_sanitize_value_from_schema( 'hello', $schema ) );
+		$this->assertSame( '2001:DB8:0:0:8:800:200C:417A', rest_sanitize_value_from_schema( '2001:DB8:0:0:8:800:200C:417A', $schema ) );
+	}
+
+	/**
+	 * @ticket 49270
+	 */
+	public function test_format_hex_color() {
+		$schema = array(
+			'type'   => 'string',
+			'format' => 'hex-color',
+		);
+		$this->assertSame( '#000000', rest_sanitize_value_from_schema( '#000000', $schema ) );
+		$this->assertSame( '#FFF', rest_sanitize_value_from_schema( '#FFF', $schema ) );
+		$this->assertSame( '', rest_sanitize_value_from_schema( 'WordPress', $schema ) );
+	}
+
+	/**
+	 * @ticket 50053
+	 */
+	public function test_format_uuid() {
+		$schema = array(
+			'type'   => 'string',
+			'format' => 'uuid',
+		);
+		$this->assertSame( '44', rest_sanitize_value_from_schema( 44, $schema ) );
+		$this->assertSame( 'hello', rest_sanitize_value_from_schema( 'hello', $schema ) );
+		$this->assertSame(
+			'123e4567-e89b-12d3-a456-426655440000',
+			rest_sanitize_value_from_schema( '123e4567-e89b-12d3-a456-426655440000', $schema )
+		);
 	}
 
 	public function test_type_array() {
@@ -122,8 +151,8 @@ class WP_Test_REST_Schema_Sanitization extends WP_UnitTestCase {
 				'type' => 'string',
 			),
 		);
-		$this->assertEquals( array( 'ribs', 'brisket' ), rest_sanitize_value_from_schema( array( 'ribs', 'brisket' ), $schema ) );
-		$this->assertEquals( array( 'coleslaw' ), rest_sanitize_value_from_schema( array( 'coleslaw' ), $schema ) );
+		$this->assertSame( array( 'ribs', 'brisket' ), rest_sanitize_value_from_schema( array( 'ribs', 'brisket' ), $schema ) );
+		$this->assertSame( array( 'coleslaw' ), rest_sanitize_value_from_schema( array( 'coleslaw' ), $schema ) );
 	}
 
 	public function test_type_array_with_enum_as_csv() {
@@ -134,9 +163,9 @@ class WP_Test_REST_Schema_Sanitization extends WP_UnitTestCase {
 				'type' => 'string',
 			),
 		);
-		$this->assertEquals( array( 'ribs', 'chicken' ), rest_sanitize_value_from_schema( 'ribs,chicken', $schema ) );
-		$this->assertEquals( array( 'chicken', 'coleslaw' ), rest_sanitize_value_from_schema( 'chicken,coleslaw', $schema ) );
-		$this->assertEquals( array( 'chicken', 'coleslaw' ), rest_sanitize_value_from_schema( 'chicken,coleslaw,', $schema ) );
+		$this->assertSame( array( 'ribs', 'chicken' ), rest_sanitize_value_from_schema( 'ribs,chicken', $schema ) );
+		$this->assertSame( array( 'chicken', 'coleslaw' ), rest_sanitize_value_from_schema( 'chicken,coleslaw', $schema ) );
+		$this->assertSame( array( 'chicken', 'coleslaw' ), rest_sanitize_value_from_schema( 'chicken,coleslaw,', $schema ) );
 	}
 
 	public function test_type_array_is_associative() {
@@ -146,7 +175,7 @@ class WP_Test_REST_Schema_Sanitization extends WP_UnitTestCase {
 				'type' => 'string',
 			),
 		);
-		$this->assertEquals(
+		$this->assertSame(
 			array( '1', '2' ),
 			rest_sanitize_value_from_schema(
 				array(
@@ -260,7 +289,7 @@ class WP_Test_REST_Schema_Sanitization extends WP_UnitTestCase {
 				$schema
 			)
 		);
-		$this->assertEquals( array( 'a' => array() ), rest_sanitize_value_from_schema( array( 'a' => null ), $schema ) );
+		$this->assertSame( array( 'a' => array() ), rest_sanitize_value_from_schema( array( 'a' => null ), $schema ) );
 	}
 
 	public function test_type_object_stdclass() {
@@ -275,22 +304,33 @@ class WP_Test_REST_Schema_Sanitization extends WP_UnitTestCase {
 		$this->assertEquals( array( 'a' => 1 ), rest_sanitize_value_from_schema( (object) array( 'a' => '1' ), $schema ) );
 	}
 
+	/**
+	 * @ticket 42961
+	 */
+	public function test_type_object_accepts_empty_string() {
+		$this->assertSame( array(), rest_sanitize_value_from_schema( '', array( 'type' => 'object' ) ) );
+	}
+
 	public function test_type_unknown() {
+		$this->setExpectedIncorrectUsage( 'rest_sanitize_value_from_schema' );
+
 		$schema = array(
 			'type' => 'lalala',
 		);
-		$this->assertEquals( 'Best lyrics', rest_sanitize_value_from_schema( 'Best lyrics', $schema ) );
-		$this->assertEquals( 1.10, rest_sanitize_value_from_schema( 1.10, $schema ) );
-		$this->assertEquals( 1, rest_sanitize_value_from_schema( 1, $schema ) );
+		$this->assertSame( 'Best lyrics', rest_sanitize_value_from_schema( 'Best lyrics', $schema ) );
+		$this->assertSame( 1.10, rest_sanitize_value_from_schema( 1.10, $schema ) );
+		$this->assertSame( 1, rest_sanitize_value_from_schema( 1, $schema ) );
 	}
 
 	public function test_no_type() {
+		$this->setExpectedIncorrectUsage( 'rest_sanitize_value_from_schema' );
+
 		$schema = array(
 			'type' => null,
 		);
-		$this->assertEquals( 'Nothing', rest_sanitize_value_from_schema( 'Nothing', $schema ) );
-		$this->assertEquals( 1.10, rest_sanitize_value_from_schema( 1.10, $schema ) );
-		$this->assertEquals( 1, rest_sanitize_value_from_schema( 1, $schema ) );
+		$this->assertSame( 'Nothing', rest_sanitize_value_from_schema( 'Nothing', $schema ) );
+		$this->assertSame( 1.10, rest_sanitize_value_from_schema( 1.10, $schema ) );
+		$this->assertSame( 1, rest_sanitize_value_from_schema( 1, $schema ) );
 	}
 
 	public function test_nullable_date() {
@@ -300,8 +340,46 @@ class WP_Test_REST_Schema_Sanitization extends WP_UnitTestCase {
 		);
 
 		$this->assertNull( rest_sanitize_value_from_schema( null, $schema ) );
-		$this->assertEquals( '2019-09-19T18:00:00', rest_sanitize_value_from_schema( '2019-09-19T18:00:00', $schema ) );
-		$this->assertNull( rest_sanitize_value_from_schema( 'lalala', $schema ) );
+		$this->assertSame( '2019-09-19T18:00:00', rest_sanitize_value_from_schema( '2019-09-19T18:00:00', $schema ) );
+		$this->assertSame( 'lalala', rest_sanitize_value_from_schema( 'lalala', $schema ) );
+	}
+
+	/**
+	 * @ticket 50189
+	 */
+	public function test_format_validation_is_skipped_if_non_string_type() {
+		$schema = array(
+			'type'   => 'array',
+			'format' => 'hex-color',
+		);
+		$this->assertSame( array( '#fff' ), rest_sanitize_value_from_schema( '#fff', $schema ) );
+		$this->assertSame( array( '#qrst' ), rest_sanitize_value_from_schema( '#qrst', $schema ) );
+	}
+
+	/**
+	 * @ticket 50189
+	 */
+	public function test_format_validation_is_applied_if_missing_type() {
+		$this->expectException( 'PHPUnit_Framework_Error_Notice' ); // For the undefined index.
+		$this->setExpectedIncorrectUsage( 'rest_sanitize_value_from_schema' );
+
+		$schema = array( 'format' => 'hex-color' );
+		$this->assertSame( '#abc', rest_sanitize_value_from_schema( '#abc', $schema ) );
+		$this->assertSame( '', rest_sanitize_value_from_schema( '#jkl', $schema ) );
+	}
+
+	/**
+	 * @ticket 50189
+	 */
+	public function test_format_validation_is_applied_if_unknown_type() {
+		$this->setExpectedIncorrectUsage( 'rest_sanitize_value_from_schema' );
+
+		$schema = array(
+			'format' => 'hex-color',
+			'type'   => 'str',
+		);
+		$this->assertSame( '#abc', rest_sanitize_value_from_schema( '#abc', $schema ) );
+		$this->assertSame( '', rest_sanitize_value_from_schema( '#jkl', $schema ) );
 	}
 
 	public function test_object_or_string() {
@@ -314,9 +392,9 @@ class WP_Test_REST_Schema_Sanitization extends WP_UnitTestCase {
 			),
 		);
 
-		$this->assertEquals( 'My Value', rest_sanitize_value_from_schema( 'My Value', $schema ) );
-		$this->assertEquals( array( 'raw' => 'My Value' ), rest_sanitize_value_from_schema( array( 'raw' => 'My Value' ), $schema ) );
-		$this->assertNull( rest_sanitize_value_from_schema( array( 'raw' => 1 ), $schema ) );
+		$this->assertSame( 'My Value', rest_sanitize_value_from_schema( 'My Value', $schema ) );
+		$this->assertSame( array( 'raw' => 'My Value' ), rest_sanitize_value_from_schema( array( 'raw' => 'My Value' ), $schema ) );
+		$this->assertSame( array( 'raw' => '1' ), rest_sanitize_value_from_schema( array( 'raw' => 1 ), $schema ) );
 	}
 
 	public function test_object_or_bool() {
@@ -337,14 +415,75 @@ class WP_Test_REST_Schema_Sanitization extends WP_UnitTestCase {
 		$this->assertFalse( rest_sanitize_value_from_schema( '0', $schema ) );
 		$this->assertFalse( rest_sanitize_value_from_schema( 0, $schema ) );
 
-		$this->assertEquals( array( 'raw' => true ), rest_sanitize_value_from_schema( array( 'raw' => true ), $schema ) );
-		$this->assertEquals( array( 'raw' => true ), rest_sanitize_value_from_schema( array( 'raw' => '1' ), $schema ) );
-		$this->assertEquals( array( 'raw' => true ), rest_sanitize_value_from_schema( array( 'raw' => 1 ), $schema ) );
+		$this->assertSame( array( 'raw' => true ), rest_sanitize_value_from_schema( array( 'raw' => true ), $schema ) );
+		$this->assertSame( array( 'raw' => true ), rest_sanitize_value_from_schema( array( 'raw' => '1' ), $schema ) );
+		$this->assertSame( array( 'raw' => true ), rest_sanitize_value_from_schema( array( 'raw' => 1 ), $schema ) );
+
+		$this->assertSame( array( 'raw' => false ), rest_sanitize_value_from_schema( array( 'raw' => false ), $schema ) );
+		$this->assertSame( array( 'raw' => false ), rest_sanitize_value_from_schema( array( 'raw' => '0' ), $schema ) );
+		$this->assertSame( array( 'raw' => false ), rest_sanitize_value_from_schema( array( 'raw' => 0 ), $schema ) );
+
+		$this->assertSame( array( 'raw' => true ), rest_sanitize_value_from_schema( array( 'raw' => 'something non boolean' ), $schema ) );
+	}
+
+	/**
+	 * @ticket 50300
+	 */
+	public function test_multi_type_with_no_known_types() {
+		$this->setExpectedIncorrectUsage( 'rest_handle_multi_type_schema' );
+		$this->setExpectedIncorrectUsage( 'rest_sanitize_value_from_schema' );
+
+		$schema = array(
+			'type' => array( 'invalid', 'type' ),
+		);
+
+		$this->assertSame( 'My Value', rest_sanitize_value_from_schema( 'My Value', $schema ) );
+	}
+
+	/**
+	 * @ticket 50300
+	 */
+	public function test_multi_type_with_some_unknown_types() {
+		$this->setExpectedIncorrectUsage( 'rest_handle_multi_type_schema' );
+		$this->setExpectedIncorrectUsage( 'rest_sanitize_value_from_schema' );
 
-		$this->assertEquals( array( 'raw' => false ), rest_sanitize_value_from_schema( array( 'raw' => false ), $schema ) );
-		$this->assertEquals( array( 'raw' => false ), rest_sanitize_value_from_schema( array( 'raw' => '0' ), $schema ) );
-		$this->assertEquals( array( 'raw' => false ), rest_sanitize_value_from_schema( array( 'raw' => 0 ), $schema ) );
+		$schema = array(
+			'type' => array( 'object', 'type' ),
+		);
+
+		$this->assertSame( 'My Value', rest_sanitize_value_from_schema( 'My Value', $schema ) );
+	}
+
+	/**
+	 * @ticket 50300
+	 */
+	public function test_multi_type_returns_null_if_no_valid_type() {
+		$schema = array(
+			'type' => array( 'number', 'string' ),
+		);
+
+		$this->assertNull( rest_sanitize_value_from_schema( array( 'Hello!' ), $schema ) );
+	}
+
+	/**
+	 * @ticket 48821
+	 */
+	public function test_unique_items_after_sanitization() {
+		$schema = array(
+			'type'        => 'array',
+			'uniqueItems' => true,
+			'items'       => array(
+				'type'   => 'string',
+				'format' => 'uri',
+			),
+		);
+
+		$data = array(
+			'https://example.org/hello%20world',
+			'https://example.org/hello world',
+		);
 
-		$this->assertNull( rest_sanitize_value_from_schema( array( 'raw' => 'something non boolean' ), $schema ) );
+		$this->assertTrue( rest_validate_value_from_schema( $data, $schema ) );
+		$this->assertWPError( rest_sanitize_value_from_schema( $data, $schema ) );
 	}
 }
diff --git a/tests/rest-api/rest-schema-setup.php b/tests/rest-api/rest-schema-setup.php
index 0aeebb4352..ffcbfd757b 100644
--- a/tests/rest-api/rest-schema-setup.php
+++ b/tests/rest-api/rest-schema-setup.php
@@ -100,6 +100,7 @@ class WP_Test_REST_Schema_Initialization extends WP_Test_REST_TestCase {
 			'/wp/v2/media',
 			'/wp/v2/media/(?P<id>[\\d]+)',
 			'/wp/v2/media/(?P<id>[\\d]+)/post-process',
+			'/wp/v2/media/(?P<id>[\\d]+)/edit',
 			'/wp/v2/blocks',
 			'/wp/v2/blocks/(?P<id>[\d]+)',
 			'/wp/v2/blocks/(?P<id>[\d]+)/autosaves',
@@ -120,21 +121,18 @@ class WP_Test_REST_Schema_Initialization extends WP_Test_REST_TestCase {
 			'/wp/v2/comments',
 			'/wp/v2/comments/(?P<id>[\\d]+)',
 			'/wp/v2/search',
-			'/wp/v2/block-renderer/(?P<name>core/archives)',
-			'/wp/v2/block-renderer/(?P<name>core/block)',
-			'/wp/v2/block-renderer/(?P<name>core/calendar)',
-			'/wp/v2/block-renderer/(?P<name>core/categories)',
-			'/wp/v2/block-renderer/(?P<name>core/latest-comments)',
-			'/wp/v2/block-renderer/(?P<name>core/latest-posts)',
-			'/wp/v2/block-renderer/(?P<name>core/rss)',
-			'/wp/v2/block-renderer/(?P<name>core/search)',
-			'/wp/v2/block-renderer/(?P<name>core/shortcode)',
-			'/wp/v2/block-renderer/(?P<name>core/tag-cloud)',
+			'/wp/v2/block-renderer/(?P<name>[a-z0-9-]+/[a-z0-9-]+)',
+			'/wp/v2/block-types',
+			'/wp/v2/block-types/(?P<namespace>[a-zA-Z0-9_-]+)',
+			'/wp/v2/block-types/(?P<namespace>[a-zA-Z0-9_-]+)/(?P<name>[a-zA-Z0-9_-]+)',
 			'/wp/v2/settings',
 			'/wp/v2/themes',
+			'/wp/v2/plugins',
+			'/wp/v2/plugins/(?P<plugin>[^.\/]+(?:\/[^.\/]+)?)',
+			'/wp/v2/block-directory/search',
 		);
 
-		$this->assertEquals( $expected_routes, $routes );
+		$this->assertSame( $expected_routes, $routes );
 	}
 
 	private function is_builtin_route( $route ) {
@@ -228,7 +226,7 @@ class WP_Test_REST_Schema_Initialization extends WP_Test_REST_TestCase {
 		);
 
 		$media_id = $this->factory->attachment->create_object(
-			'/tmp/canola.jpg',
+			get_temp_dir() . 'canola.jpg',
 			0,
 			array(
 				'post_mime_type' => 'image/jpeg',
@@ -443,7 +441,7 @@ class WP_Test_REST_Schema_Initialization extends WP_Test_REST_TestCase {
 			$status   = $response->get_status();
 			$data     = $response->get_data();
 
-			$this->assertEquals(
+			$this->assertSame(
 				200,
 				$response->get_status(),
 				"HTTP $status from $route[route]: " . json_encode( $data )
diff --git a/tests/rest-api/rest-schema-validation.php b/tests/rest-api/rest-schema-validation.php
index 9c18a846dc..4cb27010b8 100644
--- a/tests/rest-api/rest-schema-validation.php
+++ b/tests/rest-api/rest-schema-validation.php
@@ -2,7 +2,7 @@
 /**
  * Unit tests covering schema validation and sanitization functionality.
  *
- * @package WordPress
+ * @package    WordPress
  * @subpackage REST API
  */
 
@@ -72,6 +72,32 @@ class WP_Test_REST_Schema_Validation extends WP_UnitTestCase {
 		$this->assertWPError( rest_validate_value_from_schema( 'email', $schema ) );
 	}
 
+	/**
+	 * @ticket 49270
+	 */
+	public function test_format_hex_color() {
+		$schema = array(
+			'type'   => 'string',
+			'format' => 'hex-color',
+		);
+		$this->assertTrue( rest_validate_value_from_schema( '#000000', $schema ) );
+		$this->assertTrue( rest_validate_value_from_schema( '#FFF', $schema ) );
+		$this->assertWPError( rest_validate_value_from_schema( 'WordPress', $schema ) );
+	}
+
+	/**
+	 * @ticket 50053
+	 */
+	public function test_format_uuid() {
+		$schema = array(
+			'type'   => 'string',
+			'format' => 'uuid',
+		);
+		$this->assertTrue( rest_validate_value_from_schema( '123e4567-e89b-12d3-a456-426655440000', $schema ) );
+		$this->assertWPError( rest_validate_value_from_schema( '123e4567-e89b-12d3-a456-426655440000X', $schema ) );
+		$this->assertWPError( rest_validate_value_from_schema( '123e4567-e89b-?2d3-a456-426655440000', $schema ) );
+	}
+
 	public function test_format_date_time() {
 		$schema = array(
 			'type'   => 'string',
@@ -111,6 +137,47 @@ class WP_Test_REST_Schema_Validation extends WP_UnitTestCase {
 		$this->assertWPError( rest_validate_value_from_schema( 'FF01::101::2', $schema ) ); // Multicast, compressed.
 	}
 
+	/**
+	 * @ticket 50189
+	 */
+	public function test_format_validation_is_skipped_if_non_string_type() {
+		$schema = array(
+			'type'   => 'array',
+			'items'  => array(
+				'type' => 'string',
+			),
+			'format' => 'email',
+		);
+		$this->assertTrue( rest_validate_value_from_schema( 'email@example.com', $schema ) );
+		$this->assertTrue( rest_validate_value_from_schema( 'email', $schema ) );
+	}
+
+	/**
+	 * @ticket 50189
+	 */
+	public function test_format_validation_is_applied_if_missing_type() {
+		$this->expectException( 'PHPUnit_Framework_Error_Notice' ); // For the undefined index.
+		$this->setExpectedIncorrectUsage( 'rest_validate_value_from_schema' );
+
+		$schema = array( 'format' => 'email' );
+		$this->assertTrue( rest_validate_value_from_schema( 'email@example.com', $schema ) );
+		$this->assertWPError( rest_validate_value_from_schema( 'email', $schema ) );
+	}
+
+	/**
+	 * @ticket 50189
+	 */
+	public function test_format_validation_is_applied_if_unknown_type() {
+		$this->setExpectedIncorrectUsage( 'rest_validate_value_from_schema' );
+
+		$schema = array(
+			'format' => 'email',
+			'type'   => 'str',
+		);
+		$this->assertTrue( rest_validate_value_from_schema( 'email@example.com', $schema ) );
+		$this->assertWPError( rest_validate_value_from_schema( 'email', $schema ) );
+	}
+
 	public function test_type_array() {
 		$schema = array(
 			'type'  => 'array',
@@ -288,7 +355,16 @@ class WP_Test_REST_Schema_Validation extends WP_UnitTestCase {
 		$this->assertTrue( rest_validate_value_from_schema( (object) array( 'a' => 1 ), $schema ) );
 	}
 
+	/**
+	 * @ticket 42961
+	 */
+	public function test_type_object_allows_empty_string() {
+		$this->assertTrue( rest_validate_value_from_schema( '', array( 'type' => 'object' ) ) );
+	}
+
 	public function test_type_unknown() {
+		$this->setExpectedIncorrectUsage( 'rest_validate_value_from_schema' );
+
 		$schema = array(
 			'type' => 'lalala',
 		);
@@ -311,7 +387,10 @@ class WP_Test_REST_Schema_Validation extends WP_UnitTestCase {
 
 		$this->assertTrue( rest_validate_value_from_schema( null, $schema ) );
 		$this->assertTrue( rest_validate_value_from_schema( '2019-09-19T18:00:00', $schema ) );
-		$this->assertWPError( rest_validate_value_from_schema( 'some random string', $schema ) );
+
+		$error = rest_validate_value_from_schema( 'some random string', $schema );
+		$this->assertWPError( $error );
+		$this->assertSame( 'Invalid date.', $error->get_error_message() );
 	}
 
 	public function test_object_or_string() {
@@ -326,6 +405,655 @@ class WP_Test_REST_Schema_Validation extends WP_UnitTestCase {
 
 		$this->assertTrue( rest_validate_value_from_schema( 'My Value', $schema ) );
 		$this->assertTrue( rest_validate_value_from_schema( array( 'raw' => 'My Value' ), $schema ) );
-		$this->assertWPError( rest_validate_value_from_schema( array( 'raw' => array( 'a list' ) ), $schema ) );
+
+		$error = rest_validate_value_from_schema( array( 'raw' => array( 'a list' ) ), $schema );
+		$this->assertWPError( $error );
+		$this->assertSame( '[raw] is not of type string.', $error->get_error_message() );
+	}
+
+	/**
+	 * @ticket 50300
+	 */
+	public function test_null_or_integer() {
+		$schema = array(
+			'type'    => array( 'null', 'integer' ),
+			'minimum' => 10,
+			'maximum' => 20,
+		);
+
+		$this->assertTrue( rest_validate_value_from_schema( null, $schema ) );
+		$this->assertTrue( rest_validate_value_from_schema( 15, $schema ) );
+		$this->assertTrue( rest_validate_value_from_schema( '15', $schema ) );
+
+		$error = rest_validate_value_from_schema( 30, $schema, 'param' );
+		$this->assertWPError( $error );
+		$this->assertSame( 'param must be between 10 (inclusive) and 20 (inclusive)', $error->get_error_message() );
+	}
+
+	/**
+	 * @ticket 50300
+	 */
+	public function test_multi_type_with_no_known_types() {
+		$this->setExpectedIncorrectUsage( 'rest_handle_multi_type_schema' );
+		$this->setExpectedIncorrectUsage( 'rest_validate_value_from_schema' );
+
+		$schema = array(
+			'type' => array( 'invalid', 'type' ),
+		);
+
+		$this->assertTrue( rest_validate_value_from_schema( 'My Value', $schema ) );
+	}
+
+	/**
+	 * @ticket 50300
+	 */
+	public function test_multi_type_with_some_unknown_types() {
+		$this->setExpectedIncorrectUsage( 'rest_handle_multi_type_schema' );
+		$this->setExpectedIncorrectUsage( 'rest_validate_value_from_schema' );
+
+		$schema = array(
+			'type' => array( 'object', 'type' ),
+		);
+
+		$this->assertTrue( rest_validate_value_from_schema( 'My Value', $schema ) );
+	}
+
+	/**
+	 * @ticket 48820
+	 */
+	public function test_string_min_length() {
+		$schema = array(
+			'type'      => 'string',
+			'minLength' => 2,
+		);
+
+		// longer
+		$this->assertTrue( rest_validate_value_from_schema( 'foo', $schema ) );
+		// exact
+		$this->assertTrue( rest_validate_value_from_schema( 'fo', $schema ) );
+		// non-strings does not validate
+		$this->assertWPError( rest_validate_value_from_schema( 1, $schema ) );
+		// to short
+		$this->assertWPError( rest_validate_value_from_schema( 'f', $schema ) );
+		// one supplementary Unicode code point is not long enough
+		$mb_char = mb_convert_encoding( '&#x1000;', 'UTF-8', 'HTML-ENTITIES' );
+		$this->assertWPError( rest_validate_value_from_schema( $mb_char, $schema ) );
+		// two supplementary Unicode code point is long enough
+		$this->assertTrue( rest_validate_value_from_schema( $mb_char . $mb_char, $schema ) );
+	}
+
+	/**
+	 * @ticket 48820
+	 */
+	public function test_string_max_length() {
+		$schema = array(
+			'type'      => 'string',
+			'maxLength' => 2,
+		);
+
+		// shorter
+		$this->assertTrue( rest_validate_value_from_schema( 'f', $schema ) );
+		// exact
+		$this->assertTrue( rest_validate_value_from_schema( 'fo', $schema ) );
+		// to long
+		$this->assertWPError( rest_validate_value_from_schema( 'foo', $schema ) );
+		// non string
+		$this->assertWPError( rest_validate_value_from_schema( 100, $schema ) );
+		// two supplementary Unicode code point is long enough
+		$mb_char = mb_convert_encoding( '&#x1000;', 'UTF-8', 'HTML-ENTITIES' );
+		$this->assertTrue( rest_validate_value_from_schema( $mb_char, $schema ) );
+		// three supplementary Unicode code point is to long
+		$this->assertWPError( rest_validate_value_from_schema( $mb_char . $mb_char . $mb_char, $schema ) );
+	}
+
+	/**
+	 * @ticket 48818
+	 *
+	 * @dataProvider data_required_property
+	 */
+	public function test_property_is_required( $data, $expected ) {
+		$schema = array(
+			'type'       => 'object',
+			'properties' => array(
+				'my_prop'          => array(
+					'type' => 'string',
+				),
+				'my_required_prop' => array(
+					'type'     => 'string',
+					'required' => true,
+				),
+			),
+		);
+
+		$valid = rest_validate_value_from_schema( $data, $schema );
+
+		if ( $expected ) {
+			$this->assertTrue( $valid );
+		} else {
+			$this->assertWPError( $valid );
+		}
 	}
+
+	/**
+	 * @ticket 48818
+	 *
+	 * @dataProvider data_required_property
+	 */
+	public function test_property_is_required_v4( $data, $expected ) {
+		$schema = array(
+			'type'       => 'object',
+			'properties' => array(
+				'my_prop'          => array(
+					'type' => 'string',
+				),
+				'my_required_prop' => array(
+					'type' => 'string',
+				),
+			),
+			'required'   => array( 'my_required_prop' ),
+		);
+
+		$valid = rest_validate_value_from_schema( $data, $schema );
+
+		if ( $expected ) {
+			$this->assertTrue( $valid );
+		} else {
+			$this->assertWPError( $valid );
+		}
+	}
+
+	public function data_required_property() {
+		return array(
+			array(
+				array(
+					'my_required_prop' => 'test',
+					'my_prop'          => 'test',
+				),
+				true,
+			),
+			array( array( 'my_prop' => 'test' ), false ),
+			array( array(), false ),
+		);
+	}
+
+	/**
+	 * @ticket 48818
+	 *
+	 * @dataProvider data_required_nested_property
+	 */
+	public function test_nested_property_is_required( $data, $expected ) {
+		$schema = array(
+			'type'       => 'object',
+			'properties' => array(
+				'my_object' => array(
+					'type'       => 'object',
+					'properties' => array(
+						'my_nested_prop'          => array(
+							'type' => 'string',
+						),
+						'my_required_nested_prop' => array(
+							'type'     => 'string',
+							'required' => true,
+						),
+					),
+				),
+			),
+		);
+
+		$valid = rest_validate_value_from_schema( $data, $schema );
+
+		if ( $expected ) {
+			$this->assertTrue( $valid );
+		} else {
+			$this->assertWPError( $valid );
+		}
+	}
+
+	/**
+	 * @ticket 48818
+	 *
+	 * @dataProvider data_required_nested_property
+	 */
+	public function test_nested_property_is_required_v4( $data, $expected ) {
+		$schema = array(
+			'type'       => 'object',
+			'properties' => array(
+				'my_object' => array(
+					'type'       => 'object',
+					'properties' => array(
+						'my_nested_prop'          => array(
+							'type' => 'string',
+						),
+						'my_required_nested_prop' => array(
+							'type' => 'string',
+						),
+					),
+					'required'   => array( 'my_required_nested_prop' ),
+				),
+			),
+		);
+
+		$valid = rest_validate_value_from_schema( $data, $schema );
+
+		if ( $expected ) {
+			$this->assertTrue( $valid );
+		} else {
+			$this->assertWPError( $valid );
+		}
+	}
+
+	public function data_required_nested_property() {
+		return array(
+			array(
+				array(
+					'my_object' => array(
+						'my_required_nested_prop' => 'test',
+						'my_nested_prop'          => 'test',
+					),
+				),
+				true,
+			),
+			array(
+				array(
+					'my_object' => array(
+						'my_nested_prop' => 'test',
+					),
+				),
+				false,
+			),
+			array(
+				array(),
+				true,
+			),
+		);
+	}
+
+	/**
+	 * @ticket 48818
+	 *
+	 * @dataProvider data_required_deeply_nested_property
+	 */
+	public function test_deeply_nested_v3_required_property( $value, $expected ) {
+		$schema = array(
+			'type'       => 'object',
+			'properties' => array(
+				'propA' => array(
+					'type'       => 'object',
+					'required'   => true,
+					'properties' => array(
+						'propB' => array(
+							'type'       => 'object',
+							'required'   => true,
+							'properties' => array(
+								'propC' => array(
+									'type'     => 'string',
+									'required' => true,
+								),
+								'propD' => array(
+									'type' => 'string',
+								),
+							),
+						),
+					),
+				),
+			),
+		);
+
+		$valid = rest_validate_value_from_schema( $value, $schema );
+
+		if ( $expected ) {
+			$this->assertTrue( $valid );
+		} else {
+			$this->assertWPError( $valid );
+		}
+	}
+
+	/**
+	 * @ticket 48818
+	 *
+	 * @dataProvider data_required_deeply_nested_property
+	 */
+	public function test_deeply_nested_v4_required_property( $value, $expected ) {
+		$schema = array(
+			'type'       => 'object',
+			'required'   => array( 'propA' ),
+			'properties' => array(
+				'propA' => array(
+					'type'       => 'object',
+					'required'   => array( 'propB' ),
+					'properties' => array(
+						'propB' => array(
+							'type'       => 'object',
+							'required'   => array( 'propC' ),
+							'properties' => array(
+								'propC' => array(
+									'type' => 'string',
+								),
+								'propD' => array(
+									'type' => 'string',
+								),
+							),
+						),
+					),
+				),
+			),
+		);
+
+		$valid = rest_validate_value_from_schema( $value, $schema );
+
+		if ( $expected ) {
+			$this->assertTrue( $valid );
+		} else {
+			$this->assertWPError( $valid );
+		}
+	}
+
+	/**
+	 * @ticket 48818
+	 *
+	 * @dataProvider data_required_deeply_nested_property
+	 */
+	public function test_deeply_nested_mixed_version_required_property( $value, $expected ) {
+		$schema = array(
+			'type'       => 'object',
+			'required'   => array( 'propA' ),
+			'properties' => array(
+				'propA' => array(
+					'type'       => 'object',
+					'required'   => array( 'propB' ),
+					'properties' => array(
+						'propB' => array(
+							'type'       => 'object',
+							'properties' => array(
+								'propC' => array(
+									'type'     => 'string',
+									'required' => true,
+								),
+								'propD' => array(
+									'type' => 'string',
+								),
+							),
+						),
+					),
+				),
+			),
+		);
+
+		$valid = rest_validate_value_from_schema( $value, $schema );
+
+		if ( $expected ) {
+			$this->assertTrue( $valid );
+		} else {
+			$this->assertWPError( $valid );
+		}
+	}
+
+	public function data_required_deeply_nested_property() {
+		return array(
+			array(
+				array(),
+				false,
+			),
+			array(
+				array(
+					'propA' => array(),
+				),
+				false,
+			),
+			array(
+				array(
+					'propA' => array(
+						'propB' => array(),
+					),
+				),
+				false,
+			),
+			array(
+				array(
+					'propA' => array(
+						'propB' => array(
+							'propD' => 'd',
+						),
+					),
+				),
+				false,
+			),
+			array(
+				array(
+					'propA' => array(
+						'propB' => array(
+							'propC' => 'c',
+						),
+					),
+				),
+				true,
+			),
+		);
+	}
+
+	/**
+	 * @ticket 44949
+	 */
+	public function test_string_pattern() {
+		$schema = array(
+			'type'    => 'string',
+			'pattern' => '^a*$',
+		);
+
+		$this->assertTrue( rest_validate_value_from_schema( 'a', $schema ) );
+		$this->assertWPError( rest_validate_value_from_schema( 'b', $schema ) );
+	}
+
+	/**
+	 * @ticket 44949
+	 */
+	public function test_string_pattern_with_escaped_delimiter() {
+		$schema = array(
+			'type'    => 'string',
+			'pattern' => '#[0-9]+',
+		);
+
+		$this->assertTrue( rest_validate_value_from_schema( '#123', $schema ) );
+		$this->assertWPError( rest_validate_value_from_schema( '#abc', $schema ) );
+	}
+
+	/**
+	 * @ticket 44949
+	 */
+	public function test_string_pattern_with_utf8() {
+		$schema = array(
+			'type'    => 'string',
+			'pattern' => '^√¢{1}$',
+		);
+
+		$this->assertTrue( rest_validate_value_from_schema( '√¢', $schema ) );
+		$this->assertWPError( rest_validate_value_from_schema( '√¢√¢', $schema ) );
+	}
+
+	/**
+	 * @ticket 48821
+	 */
+	public function test_array_min_items() {
+		$schema = array(
+			'type'     => 'array',
+			'minItems' => 1,
+			'items'    => array(
+				'type' => 'number',
+			),
+		);
+
+		$this->assertTrue( rest_validate_value_from_schema( array( 1, 2 ), $schema ) );
+		$this->assertTrue( rest_validate_value_from_schema( array( 1 ), $schema ) );
+		$this->assertWPError( rest_validate_value_from_schema( array(), $schema ) );
+		$this->assertWPError( rest_validate_value_from_schema( '', $schema ) );
+	}
+
+	/**
+	 * @ticket 48821
+	 */
+	public function test_array_max_items() {
+		$schema = array(
+			'type'     => 'array',
+			'maxItems' => 2,
+			'items'    => array(
+				'type' => 'number',
+			),
+		);
+
+		$this->assertTrue( rest_validate_value_from_schema( array( 1 ), $schema ) );
+		$this->assertTrue( rest_validate_value_from_schema( array( 1, 2 ), $schema ) );
+		$this->assertWPError( rest_validate_value_from_schema( array( 1, 2, 3 ), $schema ) );
+		$this->assertWPError( rest_validate_value_from_schema( 'foobar', $schema ) );
+	}
+
+	/**
+	 * @ticket 48821
+	 *
+	 * @dataProvider data_unique_items
+	 */
+	public function test_unique_items( $test, $suite ) {
+		$test_description = $suite['description'] . ': ' . $test['description'];
+		$message          = $test_description . ': ' . var_export( $test['data'], true );
+
+		$valid = rest_validate_value_from_schema( $test['data'], $suite['schema'] );
+
+		if ( $test['valid'] ) {
+			$this->assertTrue( $valid, $message );
+		} else {
+			$this->assertWPError( $valid, $message );
+		}
+	}
+
+	public function data_unique_items() {
+		$all_types = array( 'object', 'array', 'null', 'number', 'integer', 'boolean', 'string' );
+
+		// the following test suites is not supported at the moment
+		$skip   = array(
+			'uniqueItems with an array of items',
+			'uniqueItems with an array of items and additionalItems=false',
+			'uniqueItems=false with an array of items',
+			'uniqueItems=false with an array of items and additionalItems=false',
+		);
+		$suites = json_decode( file_get_contents( __DIR__ . '/json_schema_test_suite/uniqueitems.json' ), true );
+
+		$tests = array();
+
+		foreach ( $suites as $suite ) {
+			if ( in_array( $suite['description'], $skip, true ) ) {
+				continue;
+			}
+			// type is required for our implementation
+			if ( ! isset( $suite['schema']['type'] ) ) {
+				$suite['schema']['type'] = 'array';
+			}
+			// items is required for our implementation
+			if ( ! isset( $suite['schema']['items'] ) ) {
+				$suite['schema']['items'] = array(
+					'type'  => $all_types,
+					'items' => array(
+						'type' => $all_types,
+					),
+				);
+			}
+			foreach ( $suite['tests'] as $test ) {
+				$tests[] = array( $test, $suite );
+			}
+		}
+
+		return $tests;
+	}
+
+	/**
+	 * @ticket 48821
+	 */
+	public function test_unique_items_deep_objects() {
+		$schema = array(
+			'type'        => 'array',
+			'uniqueItems' => true,
+			'items'       => array(
+				'type'       => 'object',
+				'properties' => array(
+					'release' => array(
+						'type'       => 'object',
+						'properties' => array(
+							'name'    => array(
+								'type' => 'string',
+							),
+							'version' => array(
+								'type' => 'string',
+							),
+						),
+					),
+				),
+			),
+		);
+
+		$data = array(
+			array(
+				'release' => array(
+					'name'    => 'Kirk',
+					'version' => '5.3',
+				),
+			),
+			array(
+				'release' => array(
+					'version' => '5.3',
+					'name'    => 'Kirk',
+				),
+			),
+		);
+
+		$this->assertWPError( rest_validate_value_from_schema( $data, $schema ) );
+
+		$data[0]['release']['version'] = '5.3.0';
+		$this->assertTrue( rest_validate_value_from_schema( $data, $schema ) );
+	}
+
+	/**
+	 * @ticket 48821
+	 */
+	public function test_unique_items_deep_arrays() {
+		$schema = array(
+			'type'        => 'array',
+			'uniqueItems' => true,
+			'items'       => array(
+				'type'  => 'array',
+				'items' => array(
+					'type' => 'string',
+				),
+			),
+		);
+
+		$data = array(
+			array(
+				'Kirk',
+				'Jaco',
+			),
+			array(
+				'Kirk',
+				'Jaco',
+			),
+		);
+
+		$this->assertWPError( rest_validate_value_from_schema( $data, $schema ) );
+
+		$data[1] = array_reverse( $data[1] );
+		$this->assertTrue( rest_validate_value_from_schema( $data, $schema ) );
+	}
+
+	/**
+	 * @ticket 50300
+	 */
+	public function test_string_or_integer() {
+		$schema = array(
+			'type' => array( 'integer', 'string' ),
+		);
+
+		$this->assertTrue( rest_validate_value_from_schema( 'garbage', $schema ) );
+		$this->assertTrue( rest_validate_value_from_schema( 15, $schema ) );
+		$this->assertTrue( rest_validate_value_from_schema( '15', $schema ) );
+		$this->assertTrue( rest_validate_value_from_schema( '15.5', $schema ) );
+		$this->assertWPError( rest_validate_value_from_schema( 15.5, $schema ) );
+	}
+
 }
diff --git a/tests/rest-api/rest-search-controller.php b/tests/rest-api/rest-search-controller.php
index 9a3982a701..491196c4a4 100644
--- a/tests/rest-api/rest-search-controller.php
+++ b/tests/rest-api/rest-search-controller.php
@@ -96,8 +96,8 @@ class WP_Test_REST_Search_Controller extends WP_Test_REST_Controller_Testcase {
 		$response = $this->do_request_with_params( array(), 'OPTIONS' );
 		$data     = $response->get_data();
 
-		$this->assertEquals( 'view', $data['endpoints'][0]['args']['context']['default'] );
-		$this->assertEquals( array( 'view', 'embed' ), $data['endpoints'][0]['args']['context']['enum'] );
+		$this->assertSame( 'view', $data['endpoints'][0]['args']['context']['default'] );
+		$this->assertSame( array( 'view', 'embed' ), $data['endpoints'][0]['args']['context']['enum'] );
 	}
 
 	/**
@@ -110,8 +110,8 @@ class WP_Test_REST_Search_Controller extends WP_Test_REST_Controller_Testcase {
 			)
 		);
 
-		$this->assertEquals( 200, $response->get_status() );
-		$this->assertEqualSets(
+		$this->assertSame( 200, $response->get_status() );
+		$this->assertSameSets(
 			array_merge(
 				self::$my_title_post_ids,
 				self::$my_title_page_ids,
@@ -131,8 +131,8 @@ class WP_Test_REST_Search_Controller extends WP_Test_REST_Controller_Testcase {
 			)
 		);
 
-		$this->assertEquals( 200, $response->get_status() );
-		$this->assertEquals( 3, count( $response->get_data() ) );
+		$this->assertSame( 200, $response->get_status() );
+		$this->assertSame( 3, count( $response->get_data() ) );
 	}
 
 	/**
@@ -146,8 +146,8 @@ class WP_Test_REST_Search_Controller extends WP_Test_REST_Controller_Testcase {
 			)
 		);
 
-		$this->assertEquals( 200, $response->get_status() );
-		$this->assertEqualSets(
+		$this->assertSame( 200, $response->get_status() );
+		$this->assertSameSets(
 			array_merge(
 				self::$my_title_post_ids,
 				self::$my_title_page_ids,
@@ -169,8 +169,8 @@ class WP_Test_REST_Search_Controller extends WP_Test_REST_Controller_Testcase {
 			)
 		);
 
-		$this->assertEquals( 200, $response->get_status() );
-		$this->assertEqualSets(
+		$this->assertSame( 200, $response->get_status() );
+		$this->assertSameSets(
 			array_merge(
 				self::$my_title_post_ids,
 				self::$my_content_post_ids
@@ -191,8 +191,8 @@ class WP_Test_REST_Search_Controller extends WP_Test_REST_Controller_Testcase {
 			)
 		);
 
-		$this->assertEquals( 200, $response->get_status() );
-		$this->assertEqualSets(
+		$this->assertSame( 200, $response->get_status() );
+		$this->assertSameSets(
 			self::$my_title_page_ids,
 			wp_list_pluck( $response->get_data(), 'id' )
 		);
@@ -239,8 +239,8 @@ class WP_Test_REST_Search_Controller extends WP_Test_REST_Controller_Testcase {
 			)
 		);
 
-		$this->assertEquals( 200, $response->get_status() );
-		$this->assertEqualSets(
+		$this->assertSame( 200, $response->get_status() );
+		$this->assertSameSets(
 			array_merge(
 				self::$my_title_post_ids,
 				self::$my_title_page_ids,
@@ -261,8 +261,8 @@ class WP_Test_REST_Search_Controller extends WP_Test_REST_Controller_Testcase {
 			)
 		);
 
-		$this->assertEquals( 200, $response->get_status() );
-		$this->assertEqualSets(
+		$this->assertSame( 200, $response->get_status() );
+		$this->assertSameSets(
 			array_merge(
 				self::$my_title_post_ids,
 				self::$my_title_page_ids
@@ -282,8 +282,8 @@ class WP_Test_REST_Search_Controller extends WP_Test_REST_Controller_Testcase {
 			)
 		);
 
-		$this->assertEquals( 200, $response->get_status() );
-		$this->assertEqualSets(
+		$this->assertSame( 200, $response->get_status() );
+		$this->assertSameSets(
 			self::$my_content_post_ids,
 			wp_list_pluck( $response->get_data(), 'id' )
 		);
@@ -296,7 +296,7 @@ class WP_Test_REST_Search_Controller extends WP_Test_REST_Controller_Testcase {
 		/** The search controller does not allow getting individual item content */
 		$request  = new WP_REST_Request( 'GET', '/wp/v2/search' . self::$my_title_post_ids[0] );
 		$response = rest_get_server()->dispatch( $request );
-		$this->assertEquals( 404, $response->get_status() );
+		$this->assertSame( 404, $response->get_status() );
 	}
 
 	/**
@@ -306,7 +306,7 @@ class WP_Test_REST_Search_Controller extends WP_Test_REST_Controller_Testcase {
 		/** The search controller does not allow creating content */
 		$request  = new WP_REST_Request( 'POST', '/wp/v2/search' );
 		$response = rest_get_server()->dispatch( $request );
-		$this->assertEquals( 404, $response->get_status() );
+		$this->assertSame( 404, $response->get_status() );
 	}
 
 	/**
@@ -316,7 +316,7 @@ class WP_Test_REST_Search_Controller extends WP_Test_REST_Controller_Testcase {
 		/** The search controller does not allow upading content */
 		$request  = new WP_REST_Request( 'POST', '/wp/v2/search' . self::$my_title_post_ids[0] );
 		$response = rest_get_server()->dispatch( $request );
-		$this->assertEquals( 404, $response->get_status() );
+		$this->assertSame( 404, $response->get_status() );
 	}
 
 	/**
@@ -326,7 +326,7 @@ class WP_Test_REST_Search_Controller extends WP_Test_REST_Controller_Testcase {
 		/** The search controller does not allow deleting content */
 		$request  = new WP_REST_Request( 'DELETE', '/wp/v2/search' . self::$my_title_post_ids[0] );
 		$response = rest_get_server()->dispatch( $request );
-		$this->assertEquals( 404, $response->get_status() );
+		$this->assertSame( 404, $response->get_status() );
 	}
 
 	/**
@@ -334,10 +334,10 @@ class WP_Test_REST_Search_Controller extends WP_Test_REST_Controller_Testcase {
 	 */
 	public function test_prepare_item() {
 		$response = $this->do_request_with_params();
-		$this->assertEquals( 200, $response->get_status() );
+		$this->assertSame( 200, $response->get_status() );
 
 		$data = $response->get_data();
-		$this->assertEquals(
+		$this->assertSame(
 			array(
 				'id',
 				'title',
@@ -363,10 +363,10 @@ class WP_Test_REST_Search_Controller extends WP_Test_REST_Controller_Testcase {
 				'_fields' => 'id,title',
 			)
 		);
-		$this->assertEquals( 200, $response->get_status() );
+		$this->assertSame( 200, $response->get_status() );
 
 		$data = $response->get_data();
-		$this->assertEquals(
+		$this->assertSame(
 			array(
 				'id',
 				'title',
@@ -420,7 +420,7 @@ class WP_Test_REST_Search_Controller extends WP_Test_REST_Controller_Testcase {
 			)
 		);
 		$response = $controller->get_items( $request );
-		$this->assertEqualSets( range( 1, 10 ), wp_list_pluck( $response->get_data(), 'id' ) );
+		$this->assertSameSets( range( 1, 10 ), wp_list_pluck( $response->get_data(), 'id' ) );
 
 		$request  = $this->get_request(
 			array(
@@ -431,7 +431,7 @@ class WP_Test_REST_Search_Controller extends WP_Test_REST_Controller_Testcase {
 			)
 		);
 		$response = $controller->get_items( $request );
-		$this->assertEqualSets( range( 1, 5 ), wp_list_pluck( $response->get_data(), 'id' ) );
+		$this->assertSameSets( range( 1, 5 ), wp_list_pluck( $response->get_data(), 'id' ) );
 	}
 
 	/**
@@ -448,7 +448,7 @@ class WP_Test_REST_Search_Controller extends WP_Test_REST_Controller_Testcase {
 		);
 		$response = $controller->prepare_item_for_response( 1, $request );
 		$data     = $response->get_data();
-		$this->assertEquals(
+		$this->assertSame(
 			array(
 				'id',
 				'title',
@@ -479,7 +479,7 @@ class WP_Test_REST_Search_Controller extends WP_Test_REST_Controller_Testcase {
 		);
 		$response = $controller->prepare_item_for_response( 1, $request );
 		$data     = $response->get_data();
-		$this->assertEquals(
+		$this->assertSame(
 			array(
 				'id',
 				'title',
@@ -495,9 +495,9 @@ class WP_Test_REST_Search_Controller extends WP_Test_REST_Controller_Testcase {
 		$controller = new WP_REST_Search_Controller( array( new WP_REST_Test_Search_Handler( 10 ) ) );
 
 		$params = $controller->get_collection_params();
-		$this->assertEquals( 'test', $params[ WP_REST_Search_Controller::PROP_TYPE ]['default'] );
-		$this->assertEqualSets( array( 'test' ), $params[ WP_REST_Search_Controller::PROP_TYPE ]['enum'] );
-		$this->assertEqualSets( array( 'test_first_type', 'test_second_type', WP_REST_Search_Controller::TYPE_ANY ), $params[ WP_REST_Search_Controller::PROP_SUBTYPE ]['items']['enum'] );
+		$this->assertSame( 'test', $params[ WP_REST_Search_Controller::PROP_TYPE ]['default'] );
+		$this->assertSameSets( array( 'test' ), $params[ WP_REST_Search_Controller::PROP_TYPE ]['enum'] );
+		$this->assertSameSets( array( 'test_first_type', 'test_second_type', WP_REST_Search_Controller::TYPE_ANY ), $params[ WP_REST_Search_Controller::PROP_SUBTYPE ]['items']['enum'] );
 	}
 
 	/**
@@ -511,7 +511,7 @@ class WP_Test_REST_Search_Controller extends WP_Test_REST_Controller_Testcase {
 		$this->assertArrayHasKey( 'self', $data['_embedded'] );
 		$this->assertCount( 1, $data['_embedded']['self'] );
 		$this->assertArrayHasKey( WP_REST_Search_Controller::PROP_ID, $data['_embedded']['self'][0] );
-		$this->assertEquals( $data[ WP_REST_Search_Controller::PROP_ID ], $data['_embedded']['self'][0][ WP_REST_Search_Controller::PROP_ID ] );
+		$this->assertSame( $data[ WP_REST_Search_Controller::PROP_ID ], $data['_embedded']['self'][0][ WP_REST_Search_Controller::PROP_ID ] );
 	}
 
 	/**
diff --git a/tests/rest-api/rest-server.php b/tests/rest-api/rest-server.php
index 74d957cbe5..bfd5959449 100644
--- a/tests/rest-api/rest-server.php
+++ b/tests/rest-api/rest-server.php
@@ -13,7 +13,7 @@ class Tests_REST_Server extends WP_Test_REST_TestCase {
 	public function setUp() {
 		parent::setUp();
 
-		// Reset REST server to ensure only our routes are registered
+		// Reset REST server to ensure only our routes are registered.
 		$GLOBALS['wp_rest_server'] = null;
 		add_filter( 'wp_rest_server_class', array( $this, 'filter_wp_rest_server_class' ) );
 		$GLOBALS['wp_rest_server'] = rest_get_server();
@@ -21,7 +21,7 @@ class Tests_REST_Server extends WP_Test_REST_TestCase {
 	}
 
 	public function tearDown() {
-		// Remove our temporary spy server
+		// Remove our temporary spy server.
 		$GLOBALS['wp_rest_server'] = null;
 		unset( $_REQUEST['_wpnonce'] );
 
@@ -49,15 +49,15 @@ class Tests_REST_Server extends WP_Test_REST_TestCase {
 
 		// The envelope should still be a response, but with defaults.
 		$this->assertInstanceOf( 'WP_REST_Response', $envelope_response );
-		$this->assertEquals( 200, $envelope_response->get_status() );
+		$this->assertSame( 200, $envelope_response->get_status() );
 		$this->assertEmpty( $envelope_response->get_headers() );
 		$this->assertEmpty( $envelope_response->get_links() );
 
 		$enveloped = $envelope_response->get_data();
 
-		$this->assertEquals( $data, $enveloped['body'] );
-		$this->assertEquals( $status, $enveloped['status'] );
-		$this->assertEquals( $headers, $enveloped['headers'] );
+		$this->assertSame( $data, $enveloped['body'] );
+		$this->assertSame( $status, $enveloped['status'] );
+		$this->assertSame( $headers, $enveloped['headers'] );
 	}
 
 	public function test_default_param() {
@@ -66,9 +66,10 @@ class Tests_REST_Server extends WP_Test_REST_TestCase {
 			'test-ns',
 			'/test',
 			array(
-				'methods'  => array( 'GET' ),
-				'callback' => '__return_null',
-				'args'     => array(
+				'methods'             => array( 'GET' ),
+				'callback'            => '__return_null',
+				'permission_callback' => '__return_true',
+				'args'                => array(
 					'foo' => array(
 						'default' => 'bar',
 					),
@@ -79,7 +80,7 @@ class Tests_REST_Server extends WP_Test_REST_TestCase {
 		$request  = new WP_REST_Request( 'GET', '/test-ns/test' );
 		$response = rest_get_server()->dispatch( $request );
 
-		$this->assertEquals( 'bar', $request['foo'] );
+		$this->assertSame( 'bar', $request['foo'] );
 	}
 
 	public function test_default_param_is_overridden() {
@@ -88,9 +89,10 @@ class Tests_REST_Server extends WP_Test_REST_TestCase {
 			'test-ns',
 			'/test',
 			array(
-				'methods'  => array( 'GET' ),
-				'callback' => '__return_null',
-				'args'     => array(
+				'methods'             => array( 'GET' ),
+				'callback'            => '__return_null',
+				'permission_callback' => '__return_true',
+				'args'                => array(
 					'foo' => array(
 						'default' => 'bar',
 					),
@@ -110,9 +112,10 @@ class Tests_REST_Server extends WP_Test_REST_TestCase {
 			'optional',
 			'/test',
 			array(
-				'methods'  => array( 'GET' ),
-				'callback' => '__return_null',
-				'args'     => array(
+				'methods'             => array( 'GET' ),
+				'callback'            => '__return_null',
+				'permission_callback' => '__return_true',
+				'args'                => array(
 					'foo' => array(),
 				),
 			)
@@ -122,7 +125,7 @@ class Tests_REST_Server extends WP_Test_REST_TestCase {
 		$request->set_query_params( array() );
 		$response = rest_get_server()->dispatch( $request );
 		$this->assertInstanceOf( 'WP_REST_Response', $response );
-		$this->assertEquals( 200, $response->get_status() );
+		$this->assertSame( 200, $response->get_status() );
 		$this->assertArrayNotHasKey( 'foo', (array) $request );
 	}
 
@@ -131,9 +134,10 @@ class Tests_REST_Server extends WP_Test_REST_TestCase {
 			'no-zero',
 			'/test',
 			array(
-				'methods'  => array( 'GET' ),
-				'callback' => '__return_null',
-				'args'     => array(
+				'methods'             => array( 'GET' ),
+				'callback'            => '__return_null',
+				'permission_callback' => '__return_true',
+				'args'                => array(
 					'foo' => array(
 						'default' => 'bar',
 					),
@@ -142,7 +146,7 @@ class Tests_REST_Server extends WP_Test_REST_TestCase {
 		);
 		$request = new WP_REST_Request( 'GET', '/no-zero/test' );
 		rest_get_server()->dispatch( $request );
-		$this->assertEquals( array( 'foo' => 'bar' ), $request->get_params() );
+		$this->assertSame( array( 'foo' => 'bar' ), $request->get_params() );
 	}
 
 	public function test_head_request_handled_by_get() {
@@ -150,13 +154,14 @@ class Tests_REST_Server extends WP_Test_REST_TestCase {
 			'head-request',
 			'/test',
 			array(
-				'methods'  => array( 'GET' ),
-				'callback' => '__return_true',
+				'methods'             => array( 'GET' ),
+				'callback'            => '__return_true',
+				'permission_callback' => '__return_true',
 			)
 		);
 		$request  = new WP_REST_Request( 'HEAD', '/head-request/test' );
 		$response = rest_get_server()->dispatch( $request );
-		$this->assertEquals( 200, $response->get_status() );
+		$this->assertSame( 200, $response->get_status() );
 	}
 
 	/**
@@ -171,8 +176,9 @@ class Tests_REST_Server extends WP_Test_REST_TestCase {
 			'/test',
 			array(
 				array(
-					'methods'  => array( 'HEAD' ),
-					'callback' => '__return_true',
+					'methods'             => array( 'HEAD' ),
+					'callback'            => '__return_true',
+					'permission_callback' => '__return_true',
 				),
 				array(
 					'methods'             => array( 'GET' ),
@@ -183,7 +189,7 @@ class Tests_REST_Server extends WP_Test_REST_TestCase {
 		);
 		$request  = new WP_REST_Request( 'HEAD', '/head-request/test' );
 		$response = rest_get_server()->dispatch( $request );
-		$this->assertEquals( 200, $response->get_status() );
+		$this->assertSame( 200, $response->get_status() );
 	}
 
 	public function test_url_params_no_numeric_keys() {
@@ -193,9 +199,10 @@ class Tests_REST_Server extends WP_Test_REST_TestCase {
 			'/test/(?P<data>.*)',
 			array(
 				array(
-					'methods'  => WP_REST_Server::READABLE,
-					'callback' => '__return_false',
-					'args'     => array(
+					'methods'             => WP_REST_Server::READABLE,
+					'callback'            => '__return_false',
+					'permission_callback' => '__return_true',
+					'args'                => array(
 						'data' => array(),
 					),
 				),
@@ -204,7 +211,7 @@ class Tests_REST_Server extends WP_Test_REST_TestCase {
 
 		$request = new WP_REST_Request( 'GET', '/test/some-value' );
 		rest_get_server()->dispatch( $request );
-		$this->assertEquals( array( 'data' => 'some-value' ), $request->get_params() );
+		$this->assertSame( array( 'data' => 'some-value' ), $request->get_params() );
 	}
 
 	/**
@@ -226,7 +233,7 @@ class Tests_REST_Server extends WP_Test_REST_TestCase {
 		$request = new WP_REST_Request( 'GET', '/test-ns/test', array() );
 		$result  = rest_get_server()->dispatch( $request );
 
-		$this->assertEquals( 403, $result->get_status() );
+		$this->assertSame( 403, $result->get_status() );
 	}
 
 	/**
@@ -253,7 +260,7 @@ class Tests_REST_Server extends WP_Test_REST_TestCase {
 
 		$result = rest_get_server()->dispatch( $request );
 
-		$this->assertEquals( 200, $result->get_status() );
+		$this->assertSame( 200, $result->get_status() );
 	}
 
 	/**
@@ -266,9 +273,10 @@ class Tests_REST_Server extends WP_Test_REST_TestCase {
 			'test-ns',
 			'/test',
 			array(
-				'methods'      => 'GET',
-				'callback'     => '__return_null',
-				'should_exist' => false,
+				'methods'             => 'GET',
+				'callback'            => '__return_null',
+				'permission_callback' => '__return_true',
+				'should_exist'        => false,
 			)
 		);
 
@@ -280,7 +288,7 @@ class Tests_REST_Server extends WP_Test_REST_TestCase {
 		$this->assertFalse( $result->get_status() !== 200 );
 
 		$sent_headers = $result->get_headers();
-		$this->assertEquals( $sent_headers['Allow'], 'GET' );
+		$this->assertSame( $sent_headers['Allow'], 'GET' );
 	}
 
 	/**
@@ -293,9 +301,10 @@ class Tests_REST_Server extends WP_Test_REST_TestCase {
 			'test-ns',
 			'/test',
 			array(
-				'methods'      => 'GET',
-				'callback'     => '__return_null',
-				'should_exist' => false,
+				'methods'             => 'GET',
+				'callback'            => '__return_null',
+				'permission_callback' => '__return_true',
+				'should_exist'        => false,
 			)
 		);
 
@@ -303,9 +312,10 @@ class Tests_REST_Server extends WP_Test_REST_TestCase {
 			'test-ns',
 			'/test',
 			array(
-				'methods'      => 'POST',
-				'callback'     => '__return_null',
-				'should_exist' => false,
+				'methods'             => 'POST',
+				'callback'            => '__return_null',
+				'permission_callback' => '__return_true',
+				'should_exist'        => false,
 			)
 		);
 
@@ -318,7 +328,7 @@ class Tests_REST_Server extends WP_Test_REST_TestCase {
 		$result = apply_filters( 'rest_post_dispatch', $result, rest_get_server(), $request );
 
 		$sent_headers = $result->get_headers();
-		$this->assertEquals( $sent_headers['Allow'], 'GET, POST' );
+		$this->assertSame( $sent_headers['Allow'], 'GET, POST' );
 	}
 
 	/**
@@ -342,9 +352,10 @@ class Tests_REST_Server extends WP_Test_REST_TestCase {
 			'test-ns',
 			'/test',
 			array(
-				'methods'      => 'POST',
-				'callback'     => '__return_null',
-				'should_exist' => false,
+				'methods'             => 'POST',
+				'callback'            => '__return_null',
+				'permission_callback' => '__return_true',
+				'should_exist'        => false,
 			)
 		);
 
@@ -353,10 +364,10 @@ class Tests_REST_Server extends WP_Test_REST_TestCase {
 		$result = rest_get_server()->dispatch( $request );
 		$result = apply_filters( 'rest_post_dispatch', $result, rest_get_server(), $request );
 
-		$this->assertEquals( $result->get_status(), 403 );
+		$this->assertSame( $result->get_status(), 403 );
 
 		$sent_headers = $result->get_headers();
-		$this->assertEquals( $sent_headers['Allow'], 'POST' );
+		$this->assertSame( $sent_headers['Allow'], 'POST' );
 	}
 
 	public function test_allow_header_sent_on_options_request() {
@@ -365,8 +376,9 @@ class Tests_REST_Server extends WP_Test_REST_TestCase {
 			'/test',
 			array(
 				array(
-					'methods'  => array( 'GET' ),
-					'callback' => '__return_null',
+					'methods'             => array( 'GET' ),
+					'callback'            => '__return_null',
+					'permission_callback' => '__return_true',
 				),
 				array(
 					'methods'             => array( 'POST' ),
@@ -383,7 +395,7 @@ class Tests_REST_Server extends WP_Test_REST_TestCase {
 
 		$headers = $result->get_headers();
 
-		$this->assertEquals( 'GET', $headers['Allow'] );
+		$this->assertSame( 'GET', $headers['Allow'] );
 	}
 
 	public function permission_denied() {
@@ -399,12 +411,12 @@ class Tests_REST_Server extends WP_Test_REST_TestCase {
 		$this->assertInstanceOf( 'WP_REST_Response', $response );
 
 		// Make sure we default to a 500 error.
-		$this->assertEquals( 500, $response->get_status() );
+		$this->assertSame( 500, $response->get_status() );
 
 		$data = $response->get_data();
 
-		$this->assertEquals( $code, $data['code'] );
-		$this->assertEquals( $message, $data['message'] );
+		$this->assertSame( $code, $data['code'] );
+		$this->assertSame( $message, $data['message'] );
 	}
 
 	public function test_error_to_response_with_status() {
@@ -415,12 +427,12 @@ class Tests_REST_Server extends WP_Test_REST_TestCase {
 		$response = rest_get_server()->error_to_response( $error );
 		$this->assertInstanceOf( 'WP_REST_Response', $response );
 
-		$this->assertEquals( 400, $response->get_status() );
+		$this->assertSame( 400, $response->get_status() );
 
 		$data = $response->get_data();
 
-		$this->assertEquals( $code, $data['code'] );
-		$this->assertEquals( $message, $data['message'] );
+		$this->assertSame( $code, $data['code'] );
+		$this->assertSame( $message, $data['message'] );
 	}
 
 	public function test_error_to_response_to_error() {
@@ -434,14 +446,14 @@ class Tests_REST_Server extends WP_Test_REST_TestCase {
 		$response = rest_get_server()->error_to_response( $error );
 		$this->assertInstanceOf( 'WP_REST_Response', $response );
 
-		$this->assertEquals( 400, $response->get_status() );
+		$this->assertSame( 400, $response->get_status() );
 
 		$error = $response->as_error();
 		$this->assertInstanceOf( 'WP_Error', $error );
-		$this->assertEquals( $code, $error->get_error_code() );
-		$this->assertEquals( $message, $error->get_error_message() );
-		$this->assertEquals( $message2, $error->errors[ $code2 ][0] );
-		$this->assertEquals( array( 'status' => 403 ), $error->error_data[ $code2 ] );
+		$this->assertSame( $code, $error->get_error_code() );
+		$this->assertSame( $message, $error->get_error_message() );
+		$this->assertSame( $message2, $error->errors[ $code2 ][0] );
+		$this->assertSame( array( 'status' => 403 ), $error->error_data[ $code2 ] );
 	}
 
 	public function test_rest_error() {
@@ -452,7 +464,7 @@ class Tests_REST_Server extends WP_Test_REST_TestCase {
 		$expected = wp_json_encode( $data );
 		$response = rest_get_server()->json_error( 'wp-api-test-error', 'Message text' );
 
-		$this->assertEquals( $expected, $response );
+		$this->assertSame( $expected, $response );
 	}
 
 	public function test_json_error_with_status() {
@@ -472,7 +484,7 @@ class Tests_REST_Server extends WP_Test_REST_TestCase {
 
 		$response = $stub->json_error( 'wp-api-test-error', 'Message text', 400 );
 
-		$this->assertEquals( $expected, $response );
+		$this->assertSame( $expected, $response );
 	}
 
 	public function test_response_to_data_links() {
@@ -486,13 +498,13 @@ class Tests_REST_Server extends WP_Test_REST_TestCase {
 		$self = array(
 			'href' => 'http://example.com/',
 		);
-		$this->assertEquals( $self, $data['_links']['self'][0] );
+		$this->assertSame( $self, $data['_links']['self'][0] );
 
 		$alternate = array(
-			'href' => 'http://example.org/',
 			'type' => 'application/xml',
+			'href' => 'http://example.org/',
 		);
-		$this->assertEquals( $alternate, $data['_links']['alternate'][0] );
+		$this->assertSame( $alternate, $data['_links']['alternate'][0] );
 	}
 
 	public function test_link_embedding() {
@@ -525,7 +537,7 @@ class Tests_REST_Server extends WP_Test_REST_TestCase {
 		$this->assertTrue( $alternate[1]['hello'] );
 
 		// Ensure the context is set to embed when requesting.
-		$this->assertEquals( 'embed', $alternate[1]['parameters']['context'] );
+		$this->assertSame( 'embed', $alternate[1]['parameters']['context'] );
 	}
 
 	public function test_link_curies() {
@@ -640,7 +652,7 @@ class Tests_REST_Server extends WP_Test_REST_TestCase {
 		$this->assertArrayHasKey( 'alternate', $data['_embedded'] );
 		$data = $data['_embedded']['alternate'][0];
 
-		$this->assertEquals( 'yes', $data['parameters']['parsed_params'] );
+		$this->assertSame( 'yes', $data['parameters']['parsed_params'] );
 	}
 
 	/**
@@ -672,9 +684,111 @@ class Tests_REST_Server extends WP_Test_REST_TestCase {
 		$this->assertCount( 1, $up );
 
 		$up_data = $up[0];
-		$this->assertEquals( 'wp-api-test-error', $up_data['code'] );
-		$this->assertEquals( 'Test message', $up_data['message'] );
-		$this->assertEquals( 403, $up_data['data']['status'] );
+		$this->assertSame( 'wp-api-test-error', $up_data['code'] );
+		$this->assertSame( 'Test message', $up_data['message'] );
+		$this->assertSame( 403, $up_data['data']['status'] );
+	}
+
+	/**
+	 * @ticket 48838
+	 */
+	public function test_link_embedding_clears_cache() {
+		$post_id = self::factory()->post->create();
+
+		$response = new WP_REST_Response();
+		$response->add_link( 'post', rest_url( 'wp/v2/posts/' . $post_id ), array( 'embeddable' => true ) );
+
+		$data = rest_get_server()->response_to_data( $response, true );
+		$this->assertArrayHasKey( 'post', $data['_embedded'] );
+		$this->assertCount( 1, $data['_embedded']['post'] );
+
+		wp_update_post(
+			array(
+				'ID'         => $post_id,
+				'post_title' => 'My Awesome Title',
+			)
+		);
+
+		$data = rest_get_server()->response_to_data( $response, true );
+		$this->assertArrayHasKey( 'post', $data['_embedded'] );
+		$this->assertCount( 1, $data['_embedded']['post'] );
+		$this->assertSame( 'My Awesome Title', $data['_embedded']['post'][0]['title']['rendered'] );
+	}
+
+	/**
+	 * @ticket 48838
+	 */
+	public function test_link_embedding_cache() {
+		$response = new WP_REST_Response(
+			array(
+				'id' => 1,
+			)
+		);
+		$response->add_link(
+			'author',
+			rest_url( 'wp/v2/users/1' ),
+			array( 'embeddable' => true )
+		);
+		$response->add_link(
+			'author',
+			rest_url( 'wp/v2/users/1' ),
+			array( 'embeddable' => true )
+		);
+
+		$mock = new MockAction();
+		add_filter( 'rest_post_dispatch', array( $mock, 'filter' ) );
+
+		$data = rest_get_server()->response_to_data( $response, true );
+
+		$this->assertArrayHasKey( '_embedded', $data );
+		$this->assertArrayHasKey( 'author', $data['_embedded'] );
+		$this->assertCount( 2, $data['_embedded']['author'] );
+
+		$this->assertCount( 1, $mock->get_events() );
+	}
+
+	/**
+	 * @ticket 48838
+	 */
+	public function test_link_embedding_cache_collection() {
+		$response = new WP_REST_Response(
+			array(
+				array(
+					'id'     => 1,
+					'_links' => array(
+						'author' => array(
+							array(
+								'href'       => rest_url( 'wp/v2/users/1' ),
+								'embeddable' => true,
+							),
+						),
+					),
+				),
+				array(
+					'id'     => 2,
+					'_links' => array(
+						'author' => array(
+							array(
+								'href'       => rest_url( 'wp/v2/users/1' ),
+								'embeddable' => true,
+							),
+						),
+					),
+				),
+			)
+		);
+
+		$mock = new MockAction();
+		add_filter( 'rest_post_dispatch', array( $mock, 'filter' ) );
+
+		$data = rest_get_server()->response_to_data( $response, true );
+
+		$embeds = wp_list_pluck( $data, '_embedded' );
+		$this->assertCount( 2, $embeds );
+		$this->assertArrayHasKey( 'author', $embeds[0] );
+		$this->assertArrayHasKey( 'author', $embeds[1] );
+
+		$this->assertCount( 1, $mock->get_events() );
 	}
 
 	/**
@@ -688,7 +802,7 @@ class Tests_REST_Server extends WP_Test_REST_TestCase {
 
 		$this->assertArrayNotHasKey( '_links', $data );
 		$this->assertArrayNotHasKey( '_embedded', $data );
-		$this->assertEquals( 'data', $data['untouched'] );
+		$this->assertSame( 'data', $data['untouched'] );
 	}
 
 	public function embedded_response_callback( $request ) {
@@ -719,10 +833,10 @@ class Tests_REST_Server extends WP_Test_REST_TestCase {
 		$this->assertArrayNotHasKey( 'self', $data['_links'] );
 
 		$alternate = array(
-			'href' => 'http://example.org/',
 			'type' => 'application/xml',
+			'href' => 'http://example.org/',
 		);
-		$this->assertEquals( $alternate, $data['_links']['alternate'][0] );
+		$this->assertSame( $alternate, $data['_links']['alternate'][0] );
 	}
 
 	public function test_removing_links_for_href() {
@@ -740,7 +854,67 @@ class Tests_REST_Server extends WP_Test_REST_TestCase {
 		$self_not_filtered = array(
 			'href' => 'http://example.com/',
 		);
-		$this->assertEquals( $self_not_filtered, $data['_links']['self'][0] );
+		$this->assertSame( $self_not_filtered, $data['_links']['self'][0] );
+	}
+
+	/**
+	 * @dataProvider _dp_response_to_data_embedding
+	 */
+	public function test_response_to_data_embedding( $expected, $embed ) {
+		$response = new WP_REST_Response();
+		$response->add_link( 'author', rest_url( '404' ), array( 'embeddable' => true ) );
+		$response->add_link( 'https://api.w.org/term', rest_url( '404' ), array( 'embeddable' => true ) );
+		$response->add_link( 'https://wordpress.org', rest_url( '404' ), array( 'embeddable' => true ) );
+		$response->add_link( 'no-embed', rest_url( '404' ) );
+
+		$data = rest_get_server()->response_to_data( $response, $embed );
+
+		if ( false === $expected ) {
+			$this->assertArrayNotHasKey( '_embedded', $data );
+		} else {
+			$this->assertSameSets( $expected, array_keys( $data['_embedded'] ) );
+		}
+	}
+
+	public function _dp_response_to_data_embedding() {
+		return array(
+			array(
+				array( 'author', 'wp:term', 'https://wordpress.org' ),
+				true,
+			),
+			array(
+				array( 'author', 'wp:term', 'https://wordpress.org' ),
+				array( 'author', 'wp:term', 'https://wordpress.org' ),
+			),
+			array(
+				array( 'author' ),
+				array( 'author' ),
+			),
+			array(
+				array( 'wp:term' ),
+				array( 'wp:term' ),
+			),
+			array(
+				array( 'https://wordpress.org' ),
+				array( 'https://wordpress.org' ),
+			),
+			array(
+				array( 'author', 'wp:term' ),
+				array( 'author', 'wp:term' ),
+			),
+			array(
+				false,
+				false,
+			),
+			array(
+				false,
+				array( 'no-embed' ),
+			),
+			array(
+				array( 'author' ),
+				array( 'author', 'no-embed' ),
+			),
+		);
 	}
 
 	public function test_get_index() {
@@ -780,7 +954,7 @@ class Tests_REST_Server extends WP_Test_REST_TestCase {
 		// Check the route.
 		$this->assertArrayHasKey( '/test/example/some-route', $data['routes'] );
 		$route = $data['routes']['/test/example/some-route'];
-		$this->assertEquals( 'test/example', $route['namespace'] );
+		$this->assertSame( 'test/example', $route['namespace'] );
 		$this->assertArrayHasKey( 'methods', $route );
 		$this->assertContains( 'GET', $route['methods'] );
 		$this->assertContains( 'DELETE', $route['methods'] );
@@ -820,7 +994,7 @@ class Tests_REST_Server extends WP_Test_REST_TestCase {
 		$data  = $index->get_data();
 
 		// Check top-level.
-		$this->assertEquals( 'test/example', $data['namespace'] );
+		$this->assertSame( 'test/example', $data['namespace'] );
 		$this->assertArrayHasKey( 'routes', $data );
 
 		// Check we have the route we expect...
@@ -858,13 +1032,36 @@ class Tests_REST_Server extends WP_Test_REST_TestCase {
 		$this->assertContains( 'test/another', $namespaces );
 	}
 
+	/**
+	 * @ticket 49147
+	 */
+	public function test_get_data_for_non_variable_route_includes_links() {
+		$expected = array(
+			'self' => array(
+				array( 'href' => rest_url( 'wp/v2/posts' ) ),
+			),
+		);
+
+		$actual = rest_get_server()->get_data_for_route(
+			'/wp/v2/posts',
+			array(
+				array(
+					'methods'       => array( 'OPTIONS' => 1 ),
+					'show_in_index' => true,
+				),
+			)
+		);
+
+		$this->assertSame( $expected, $actual['_links'] );
+	}
+
 	public function test_x_robot_tag_header_on_requests() {
 		$request = new WP_REST_Request( 'GET', '/', array() );
 
 		$result  = rest_get_server()->serve_request( '/' );
 		$headers = rest_get_server()->sent_headers;
 
-		$this->assertEquals( 'noindex', $headers['X-Robots-Tag'] );
+		$this->assertSame( 'noindex', $headers['X-Robots-Tag'] );
 	}
 
 	/**
@@ -889,7 +1086,7 @@ class Tests_REST_Server extends WP_Test_REST_TestCase {
 		$result  = rest_get_server()->serve_request( '/' );
 		$headers = rest_get_server()->sent_headers;
 
-		$this->assertEquals( '<' . esc_url_raw( $api_root ) . '>; rel="https://api.w.org/"', $headers['Link'] );
+		$this->assertSame( '<' . esc_url_raw( $api_root ) . '>; rel="https://api.w.org/"', $headers['Link'] );
 	}
 
 	public function test_nocache_headers_on_authenticated_requests() {
@@ -906,10 +1103,10 @@ class Tests_REST_Server extends WP_Test_REST_TestCase {
 			}
 
 			$this->assertTrue( isset( $headers[ $header ] ), sprintf( 'Header %s is not present in the response.', $header ) );
-			$this->assertEquals( $value, $headers[ $header ] );
+			$this->assertSame( $value, $headers[ $header ] );
 		}
 
-		// Last-Modified should be unset as per #WP23021
+		// Last-Modified should be unset as per #WP23021.
 		$this->assertFalse( isset( $headers['Last-Modified'] ), 'Last-Modified should not be sent.' );
 	}
 
@@ -943,7 +1140,7 @@ class Tests_REST_Server extends WP_Test_REST_TestCase {
 
 		$result     = rest_get_server()->serve_request( '/test/data\\with\\slashes' );
 		$url_params = rest_get_server()->last_request->get_url_params();
-		$this->assertEquals( 'data\\with\\slashes', $url_params['data'] );
+		$this->assertSame( 'data\\with\\slashes', $url_params['data'] );
 	}
 
 	public function test_serve_request_query_params_are_unslashed() {
@@ -962,7 +1159,7 @@ class Tests_REST_Server extends WP_Test_REST_TestCase {
 			)
 		);
 
-		// WordPress internally will slash the superglobals on bootstrap
+		// WordPress internally will slash the superglobals on bootstrap.
 		$_GET = wp_slash(
 			array(
 				'data' => 'data\\with\\slashes',
@@ -971,7 +1168,7 @@ class Tests_REST_Server extends WP_Test_REST_TestCase {
 
 		$result       = rest_get_server()->serve_request( '/test' );
 		$query_params = rest_get_server()->last_request->get_query_params();
-		$this->assertEquals( 'data\\with\\slashes', $query_params['data'] );
+		$this->assertSame( 'data\\with\\slashes', $query_params['data'] );
 	}
 
 	public function test_serve_request_body_params_are_unslashed() {
@@ -990,7 +1187,7 @@ class Tests_REST_Server extends WP_Test_REST_TestCase {
 			)
 		);
 
-		// WordPress internally will slash the superglobals on bootstrap
+		// WordPress internally will slash the superglobals on bootstrap.
 		$_POST = wp_slash(
 			array(
 				'data' => 'data\\with\\slashes',
@@ -1000,7 +1197,7 @@ class Tests_REST_Server extends WP_Test_REST_TestCase {
 		$result = rest_get_server()->serve_request( '/test/data' );
 
 		$body_params = rest_get_server()->last_request->get_body_params();
-		$this->assertEquals( 'data\\with\\slashes', $body_params['data'] );
+		$this->assertSame( 'data\\with\\slashes', $body_params['data'] );
 	}
 
 	public function test_serve_request_json_params_are_unslashed() {
@@ -1028,7 +1225,7 @@ class Tests_REST_Server extends WP_Test_REST_TestCase {
 
 		$result      = rest_get_server()->serve_request( '/test' );
 		$json_params = rest_get_server()->last_request->get_json_params();
-		$this->assertEquals( 'data\\with\\slashes', $json_params['data'] );
+		$this->assertSame( 'data\\with\\slashes', $json_params['data'] );
 	}
 
 	public function test_serve_request_file_params_are_unslashed() {
@@ -1047,7 +1244,7 @@ class Tests_REST_Server extends WP_Test_REST_TestCase {
 			)
 		);
 
-		// WordPress internally will slash the superglobals on bootstrap
+		// WordPress internally will slash the superglobals on bootstrap.
 		$_FILES = array(
 			'data' => array(
 				'name' => 'data\\with\\slashes',
@@ -1056,7 +1253,7 @@ class Tests_REST_Server extends WP_Test_REST_TestCase {
 
 		$result      = rest_get_server()->serve_request( '/test/data\\with\\slashes' );
 		$file_params = rest_get_server()->last_request->get_file_params();
-		$this->assertEquals( 'data\\with\\slashes', $file_params['data']['name'] );
+		$this->assertSame( 'data\\with\\slashes', $file_params['data']['name'] );
 	}
 
 	public function test_serve_request_headers_are_unslashed() {
@@ -1075,11 +1272,11 @@ class Tests_REST_Server extends WP_Test_REST_TestCase {
 			)
 		);
 
-		// WordPress internally will slash the superglobals on bootstrap
+		// WordPress internally will slash the superglobals on bootstrap.
 		$_SERVER['HTTP_X_MY_HEADER'] = wp_slash( 'data\\with\\slashes' );
 
 		$result = rest_get_server()->serve_request( '/test/data\\with\\slashes' );
-		$this->assertEquals( 'data\\with\\slashes', rest_get_server()->last_request->get_header( 'x_my_header' ) );
+		$this->assertSame( 'data\\with\\slashes', rest_get_server()->last_request->get_header( 'x_my_header' ) );
 	}
 
 	public function filter_wp_rest_server_class() {
@@ -1142,9 +1339,10 @@ class Tests_REST_Server extends WP_Test_REST_TestCase {
 			'test-ns',
 			'/test',
 			array(
-				'methods'  => array( 'GET' ),
-				'callback' => '__return_null',
-				'args'     => array(
+				'methods'             => array( 'GET' ),
+				'callback'            => '__return_null',
+				'permission_callback' => '__return_true',
+				'args'                => array(
 					'someinteger' => array(
 						'validate_callback' => array( $this, '_validate_as_integer_123' ),
 						'sanitize_callback' => 'absint',
@@ -1166,7 +1364,7 @@ class Tests_REST_Server extends WP_Test_REST_TestCase {
 		);
 		$response = rest_get_server()->dispatch( $request );
 
-		$this->assertEquals( 200, $response->get_status() );
+		$this->assertSame( 200, $response->get_status() );
 	}
 
 	/**
@@ -1177,17 +1375,18 @@ class Tests_REST_Server extends WP_Test_REST_TestCase {
 			'test-ns',
 			'/test',
 			array(
-				'methods'  => array( 'GET' ),
-				'callback' => function () {
+				'methods'             => array( 'GET' ),
+				'callback'            => function () {
 					return new WP_REST_Response();
 				},
+				'permission_callback' => '__return_true',
 			)
 		);
 
 		$result = rest_get_server()->serve_request( '/test-ns/test' );
 
 		$this->assertNull( $result );
-		$this->assertEquals( '', rest_get_server()->sent_body );
+		$this->assertSame( '', rest_get_server()->sent_body );
 	}
 
 	/**
@@ -1198,17 +1397,224 @@ class Tests_REST_Server extends WP_Test_REST_TestCase {
 			'test-ns',
 			'/test',
 			array(
-				'methods'  => array( 'GET' ),
-				'callback' => function () {
+				'methods'             => array( 'GET' ),
+				'callback'            => function () {
 					return new WP_REST_Response( 'data', 204 );
 				},
+				'permission_callback' => '__return_true',
 			)
 		);
 
 		$result = rest_get_server()->serve_request( '/test-ns/test' );
 
 		$this->assertNull( $result );
-		$this->assertEquals( '', rest_get_server()->sent_body );
+		$this->assertSame( '', rest_get_server()->sent_body );
+	}
+
+	/**
+	 * @ticket 47077
+	 */
+	public function test_http_authorization_header_substitution() {
+		$headers        = array( 'HTTP_AUTHORIZATION' => 'foo' );
+		$parsed_headers = rest_get_server()->get_headers( $headers );
+
+		$this->assertSame(
+			array( 'AUTHORIZATION' => 'foo' ),
+			$parsed_headers
+		);
+	}
+
+	/**
+	 * @ticket 47077
+	 */
+	public function test_redirect_http_authorization_header_substitution() {
+		$headers        = array( 'REDIRECT_HTTP_AUTHORIZATION' => 'foo' );
+		$parsed_headers = rest_get_server()->get_headers( $headers );
+
+		$this->assertSame(
+			array( 'AUTHORIZATION' => 'foo' ),
+			$parsed_headers
+		);
+	}
+
+	/**
+	 * @ticket 47077
+	 */
+	public function test_redirect_http_authorization_with_http_authorization_header_substitution() {
+		$headers        = array(
+			'HTTP_AUTHORIZATION'          => 'foo',
+			'REDIRECT_HTTP_AUTHORIZATION' => 'bar',
+		);
+		$parsed_headers = rest_get_server()->get_headers( $headers );
+
+		$this->assertSame(
+			array( 'AUTHORIZATION' => 'foo' ),
+			$parsed_headers
+		);
+	}
+
+	/**
+	 * @ticket 47077
+	 */
+	public function test_redirect_http_authorization_with_empty_http_authorization_header_substitution() {
+		$headers        = array(
+			'HTTP_AUTHORIZATION'          => '',
+			'REDIRECT_HTTP_AUTHORIZATION' => 'bar',
+		);
+		$parsed_headers = rest_get_server()->get_headers( $headers );
+
+		$this->assertSame(
+			array( 'AUTHORIZATION' => 'bar' ),
+			$parsed_headers
+		);
+	}
+
+	/**
+	 * @ticket 48530
+	 */
+	public function test_get_routes_respects_namespace_parameter() {
+		$routes = rest_get_server()->get_routes( 'oembed/1.0' );
+
+		foreach ( $routes as $route => $handlers ) {
+			$this->assertStringStartsWith( '/oembed/1.0', $route );
+		}
+	}
+
+	/**
+	 * @ticket 48530
+	 */
+	public function test_get_routes_no_namespace_overriding() {
+		register_rest_route(
+			'test-ns',
+			'/test',
+			array(
+				'methods'             => array( 'GET' ),
+				'callback'            => function() {
+					return new WP_REST_Response( 'data', 204 );
+				},
+				'permission_callback' => '__return_true',
+			)
+		);
+		register_rest_route(
+			'test-ns/v1',
+			'/test',
+			array(
+				'methods'             => array( 'GET' ),
+				'callback'            => function() {
+					return new WP_REST_Response( 'data', 204 );
+				},
+				'permission_callback' => '__return_true',
+			)
+		);
+
+		$request  = new WP_REST_Request( 'GET', '/test-ns/v1/test' );
+		$response = rest_get_server()->dispatch( $request );
+
+		$this->assertSame( 204, $response->get_status(), '/test-ns/v1/test' );
+	}
+
+	/**
+	 * @ticket 50244
+	 */
+	public function test_no_route() {
+		$mock_hook = new MockAction();
+		add_filter( 'rest_request_after_callbacks', array( $mock_hook, 'filter' ) );
+
+		$response = rest_do_request( '/test-ns/v1/test' );
+		$this->assertErrorResponse( 'rest_no_route', $response, 404 );
+
+		// Verify that the no route error was not filtered.
+		$this->assertCount( 0, $mock_hook->get_events() );
+	}
+
+	/**
+	 * @ticket 50244
+	 */
+	public function test_invalid_handler() {
+		register_rest_route(
+			'test-ns/v1',
+			'/test',
+			array(
+				'callback'            => 'invalid_callback',
+				'permission_callback' => '__return_true',
+			)
+		);
+
+		$mock_hook = new MockAction();
+		add_filter( 'rest_request_after_callbacks', array( $mock_hook, 'filter' ) );
+
+		$response = rest_do_request( '/test-ns/v1/test' );
+		$this->assertErrorResponse( 'rest_invalid_handler', $response, 500 );
+
+		// Verify that the invalid handler error was filtered.
+		$events = $mock_hook->get_events();
+		$this->assertCount( 1, $events );
+		$this->assertWPError( $events[0]['args'][0] );
+		$this->assertEquals( 'rest_invalid_handler', $events[0]['args'][0]->get_error_code() );
+	}
+
+	/**
+	 * @ticket 50244
+	 */
+	public function test_callbacks_are_not_executed_if_request_validation_fails() {
+		$callback = $this->createPartialMock( 'stdClass', array( '__invoke' ) );
+		$callback->expects( self::never() )->method( '__invoke' );
+		$permission_callback = $this->createPartialMock( 'stdClass', array( '__invoke' ) );
+		$permission_callback->expects( self::never() )->method( '__invoke' );
+
+		register_rest_route(
+			'test-ns/v1',
+			'/test',
+			array(
+				'callback'            => $callback,
+				'permission_callback' => $permission_callback,
+				'args'                => array(
+					'test' => array(
+						'validate_callback' => '__return_false',
+					),
+				),
+			)
+		);
+
+		$request = new WP_REST_Request( 'GET', '/test-ns/v1/test' );
+		$request->set_query_params( array( 'test' => 'world' ) );
+		$response = rest_do_request( $request );
+
+		$this->assertErrorResponse( 'rest_invalid_param', $response, 400 );
+	}
+
+	/**
+	 * @ticket 50244
+	 */
+	public function test_filters_are_executed_if_request_validation_fails() {
+		register_rest_route(
+			'test-ns/v1',
+			'/test',
+			array(
+				'callback'            => '__return_empty_array',
+				'permission_callback' => '__return_true',
+				'args'                => array(
+					'test' => array(
+						'validate_callback' => '__return_false',
+					),
+				),
+			)
+		);
+
+		$mock_hook = new MockAction();
+		add_filter( 'rest_request_after_callbacks', array( $mock_hook, 'filter' ) );
+
+		$request = new WP_REST_Request( 'GET', '/test-ns/v1/test' );
+		$request->set_query_params( array( 'test' => 'world' ) );
+		$response = rest_do_request( $request );
+
+		$this->assertErrorResponse( 'rest_invalid_param', $response, 400 );
+
+		// Verify that the invalid param error was filtered.
+		$events = $mock_hook->get_events();
+		$this->assertCount( 1, $events );
+		$this->assertWPError( $events[0]['args'][0] );
+		$this->assertEquals( 'rest_invalid_param', $events[0]['args'][0]->get_error_code() );
 	}
 
 	public function _validate_as_integer_123( $value, $request, $key ) {
diff --git a/tests/rest-api/rest-settings-controller.php b/tests/rest-api/rest-settings-controller.php
index 73805b4d38..1466a93f6e 100644
--- a/tests/rest-api/rest-settings-controller.php
+++ b/tests/rest-api/rest-settings-controller.php
@@ -38,6 +38,25 @@ class WP_Test_REST_Settings_Controller extends WP_Test_REST_Controller_Testcase
 		$this->endpoint = new WP_REST_Settings_Controller();
 	}
 
+	public function tearDown() {
+		parent::tearDown();
+
+		$settings_to_unregister = array(
+			'mycustomsetting',
+			'mycustomsetting1',
+			'mycustomsetting2',
+			'mycustomarraysetting',
+		);
+
+		$registered_settings = get_registered_settings();
+
+		foreach ( $settings_to_unregister as $setting ) {
+			if ( isset( $registered_settings[ $setting ] ) ) {
+				unregister_setting( 'somegroup', $setting );
+			}
+		}
+	}
+
 	public function test_register_routes() {
 		$routes = rest_get_server()->get_routes();
 		$this->assertArrayHasKey( '/wp/v2/settings', $routes );
@@ -48,7 +67,7 @@ class WP_Test_REST_Settings_Controller extends WP_Test_REST_Controller_Testcase
 		wp_set_current_user( self::$administrator );
 		$request  = new WP_REST_Request( 'GET', '/wp/v2/settings/title' );
 		$response = rest_get_server()->dispatch( $request );
-		$this->assertEquals( 404, $response->get_status() );
+		$this->assertSame( 404, $response->get_status() );
 	}
 
 	public function test_context_param() {
@@ -57,14 +76,14 @@ class WP_Test_REST_Settings_Controller extends WP_Test_REST_Controller_Testcase
 	public function test_get_item_is_not_public_not_authenticated() {
 		$request  = new WP_REST_Request( 'GET', '/wp/v2/settings' );
 		$response = rest_get_server()->dispatch( $request );
-		$this->assertEquals( 401, $response->get_status() );
+		$this->assertSame( 401, $response->get_status() );
 	}
 
 	public function test_get_item_is_not_public_no_permission() {
 		wp_set_current_user( self::$author );
 		$request  = new WP_REST_Request( 'GET', '/wp/v2/settings' );
 		$response = rest_get_server()->dispatch( $request );
-		$this->assertEquals( 403, $response->get_status() );
+		$this->assertSame( 403, $response->get_status() );
 	}
 
 	public function test_get_items() {
@@ -98,19 +117,19 @@ class WP_Test_REST_Settings_Controller extends WP_Test_REST_Controller_Testcase
 		sort( $expected );
 		sort( $actual );
 
-		$this->assertEquals( 200, $response->get_status() );
-		$this->assertEquals( $expected, $actual );
+		$this->assertSame( 200, $response->get_status() );
+		$this->assertSame( $expected, $actual );
 	}
 
 	public function test_get_item_value_is_cast_to_type() {
 		wp_set_current_user( self::$administrator );
-		update_option( 'posts_per_page', 'invalid_number' ); // this is cast to (int) 1
+		update_option( 'posts_per_page', 'invalid_number' ); // This is cast to (int) 1.
 		$request  = new WP_REST_Request( 'GET', '/wp/v2/settings' );
 		$response = rest_get_server()->dispatch( $request );
 		$data     = $response->get_data();
 
-		$this->assertEquals( 200, $response->get_status() );
-		$this->assertEquals( 1, $data['posts_per_page'] );
+		$this->assertSame( 200, $response->get_status() );
+		$this->assertSame( 1, $data['posts_per_page'] );
 	}
 
 	public function test_get_item_with_custom_setting() {
@@ -135,18 +154,16 @@ class WP_Test_REST_Settings_Controller extends WP_Test_REST_Controller_Testcase
 		$response = rest_get_server()->dispatch( $request );
 		$data     = $response->get_data();
 
-		$this->assertEquals( 200, $response->get_status() );
+		$this->assertSame( 200, $response->get_status() );
 		$this->assertArrayHasKey( 'mycustomsettinginrest', $data );
-		$this->assertEquals( 'validvalue1', $data['mycustomsettinginrest'] );
+		$this->assertSame( 'validvalue1', $data['mycustomsettinginrest'] );
 
 		update_option( 'mycustomsetting', 'validvalue2' );
 
 		$request  = new WP_REST_Request( 'GET', '/wp/v2/settings' );
 		$response = rest_get_server()->dispatch( $request );
 		$data     = $response->get_data();
-		$this->assertEquals( 'validvalue2', $data['mycustomsettinginrest'] );
-
-		unregister_setting( 'somegroup', 'mycustomsetting' );
+		$this->assertSame( 'validvalue2', $data['mycustomsettinginrest'] );
 	}
 
 	public function test_get_item_with_custom_array_setting() {
@@ -173,30 +190,28 @@ class WP_Test_REST_Settings_Controller extends WP_Test_REST_Controller_Testcase
 		$request  = new WP_REST_Request( 'GET', '/wp/v2/settings' );
 		$response = rest_get_server()->dispatch( $request );
 		$data     = $response->get_data();
-		$this->assertEquals( array( 1, 2 ), $data['mycustomsetting'] );
+		$this->assertSame( array( 1, 2 ), $data['mycustomsetting'] );
 
 		// Empty array works as expected.
 		update_option( 'mycustomsetting', array() );
 		$request  = new WP_REST_Request( 'GET', '/wp/v2/settings' );
 		$response = rest_get_server()->dispatch( $request );
 		$data     = $response->get_data();
-		$this->assertEquals( array(), $data['mycustomsetting'] );
+		$this->assertSame( array(), $data['mycustomsetting'] );
 
-		// Invalid value
+		// Invalid value.
 		update_option( 'mycustomsetting', array( array( 1 ) ) );
 		$request  = new WP_REST_Request( 'GET', '/wp/v2/settings' );
 		$response = rest_get_server()->dispatch( $request );
 		$data     = $response->get_data();
-		$this->assertEquals( null, $data['mycustomsetting'] );
+		$this->assertNull( $data['mycustomsetting'] );
 
-		// No option value
+		// No option value.
 		delete_option( 'mycustomsetting' );
 		$request  = new WP_REST_Request( 'GET', '/wp/v2/settings' );
 		$response = rest_get_server()->dispatch( $request );
 		$data     = $response->get_data();
-		$this->assertEquals( null, $data['mycustomsetting'] );
-
-		unregister_setting( 'somegroup', 'mycustomsetting' );
+		$this->assertNull( $data['mycustomsetting'] );
 	}
 
 	public function test_get_item_with_custom_object_setting() {
@@ -229,16 +244,16 @@ class WP_Test_REST_Settings_Controller extends WP_Test_REST_Controller_Testcase
 		$request  = new WP_REST_Request( 'GET', '/wp/v2/settings' );
 		$response = rest_get_server()->dispatch( $request );
 		$data     = $response->get_data();
-		$this->assertEquals( array( 'a' => 1 ), $data['mycustomsetting'] );
+		$this->assertSame( array( 'a' => 1 ), $data['mycustomsetting'] );
 
 		// Empty array works as expected.
 		update_option( 'mycustomsetting', array() );
 		$request  = new WP_REST_Request( 'GET', '/wp/v2/settings' );
 		$response = rest_get_server()->dispatch( $request );
 		$data     = $response->get_data();
-		$this->assertEquals( array(), $data['mycustomsetting'] );
+		$this->assertSame( array(), $data['mycustomsetting'] );
 
-		// Invalid value
+		// Invalid value.
 		update_option(
 			'mycustomsetting',
 			array(
@@ -249,9 +264,7 @@ class WP_Test_REST_Settings_Controller extends WP_Test_REST_Controller_Testcase
 		$request  = new WP_REST_Request( 'GET', '/wp/v2/settings' );
 		$response = rest_get_server()->dispatch( $request );
 		$data     = $response->get_data();
-		$this->assertEquals( null, $data['mycustomsetting'] );
-
-		unregister_setting( 'somegroup', 'mycustomsetting' );
+		$this->assertNull( $data['mycustomsetting'] );
 	}
 
 	public function get_setting_custom_callback( $result, $name, $args ) {
@@ -296,15 +309,14 @@ class WP_Test_REST_Settings_Controller extends WP_Test_REST_Controller_Testcase
 		$response = rest_get_server()->dispatch( $request );
 		$data     = $response->get_data();
 
-		$this->assertEquals( 200, $response->get_status() );
+		$this->assertSame( 200, $response->get_status() );
 
 		$this->assertArrayHasKey( 'mycustomsettinginrest1', $data );
-		$this->assertEquals( 'unfiltered1', $data['mycustomsettinginrest1'] );
+		$this->assertSame( 'unfiltered1', $data['mycustomsettinginrest1'] );
 
 		$this->assertArrayHasKey( 'mycustomsettinginrest2', $data );
-		$this->assertEquals( 'unfiltered2', $data['mycustomsettinginrest2'] );
+		$this->assertSame( 'unfiltered2', $data['mycustomsettinginrest2'] );
 
-		unregister_setting( 'somegroup', 'mycustomsetting' );
 		remove_all_filters( 'rest_pre_get_setting' );
 	}
 
@@ -331,7 +343,7 @@ class WP_Test_REST_Settings_Controller extends WP_Test_REST_Controller_Testcase
 		$request  = new WP_REST_Request( 'GET', '/wp/v2/settings' );
 		$response = rest_get_server()->dispatch( $request );
 		$data     = $response->get_data();
-		$this->assertEquals( null, $data['mycustomsettinginrest'] );
+		$this->assertNull( $data['mycustomsettinginrest'] );
 	}
 
 	public function test_get_item_with_invalid_object_array_in_options() {
@@ -357,8 +369,7 @@ class WP_Test_REST_Settings_Controller extends WP_Test_REST_Controller_Testcase
 		$request  = new WP_REST_Request( 'GET', '/wp/v2/settings' );
 		$response = rest_get_server()->dispatch( $request );
 		$data     = $response->get_data();
-		$this->assertEquals( null, $data['mycustomsettinginrest'] );
-		unregister_setting( 'somegroup', 'mycustomsetting' );
+		$this->assertNull( $data['mycustomsettinginrest'] );
 	}
 
 
@@ -372,14 +383,14 @@ class WP_Test_REST_Settings_Controller extends WP_Test_REST_Controller_Testcase
 		$response = rest_get_server()->dispatch( $request );
 		$data     = $response->get_data();
 
-		$this->assertEquals( 200, $response->get_status() );
-		$this->assertEquals( 'The new title!', $data['title'] );
-		$this->assertEquals( get_option( 'blogname' ), $data['title'] );
+		$this->assertSame( 200, $response->get_status() );
+		$this->assertSame( 'The new title!', $data['title'] );
+		$this->assertSame( get_option( 'blogname' ), $data['title'] );
 	}
 
 	public function update_setting_custom_callback( $result, $name, $value, $args ) {
 		if ( 'title' === $name && 'The new title!' === $value ) {
-			// Do not allow changing the title in this case
+			// Do not allow changing the title in this case.
 			return true;
 		}
 
@@ -412,16 +423,16 @@ class WP_Test_REST_Settings_Controller extends WP_Test_REST_Controller_Testcase
 		$request->set_param( 'mycustomsetting', array( '1', '2' ) );
 		$response = rest_get_server()->dispatch( $request );
 		$data     = $response->get_data();
-		$this->assertEquals( array( 1, 2 ), $data['mycustomsetting'] );
-		$this->assertEquals( array( 1, 2 ), get_option( 'mycustomsetting' ) );
+		$this->assertSame( array( 1, 2 ), $data['mycustomsetting'] );
+		$this->assertSame( array( 1, 2 ), get_option( 'mycustomsetting' ) );
 
 		// Setting an empty array.
 		$request = new WP_REST_Request( 'PUT', '/wp/v2/settings' );
 		$request->set_param( 'mycustomsetting', array() );
 		$response = rest_get_server()->dispatch( $request );
 		$data     = $response->get_data();
-		$this->assertEquals( array(), $data['mycustomsetting'] );
-		$this->assertEquals( array(), get_option( 'mycustomsetting' ) );
+		$this->assertSame( array(), $data['mycustomsetting'] );
+		$this->assertSame( array(), get_option( 'mycustomsetting' ) );
 
 		// Setting an invalid array.
 		$request = new WP_REST_Request( 'PUT', '/wp/v2/settings' );
@@ -429,7 +440,6 @@ class WP_Test_REST_Settings_Controller extends WP_Test_REST_Controller_Testcase
 		$response = rest_get_server()->dispatch( $request );
 
 		$this->assertErrorResponse( 'rest_invalid_param', $response, 400 );
-		unregister_setting( 'somegroup', 'mycustomsetting' );
 	}
 
 	public function test_update_item_with_nested_object() {
@@ -503,16 +513,16 @@ class WP_Test_REST_Settings_Controller extends WP_Test_REST_Controller_Testcase
 		$request->set_param( 'mycustomsetting', array( 'a' => 1 ) );
 		$response = rest_get_server()->dispatch( $request );
 		$data     = $response->get_data();
-		$this->assertEquals( array( 'a' => 1 ), $data['mycustomsetting'] );
-		$this->assertEquals( array( 'a' => 1 ), get_option( 'mycustomsetting' ) );
+		$this->assertSame( array( 'a' => 1 ), $data['mycustomsetting'] );
+		$this->assertSame( array( 'a' => 1 ), get_option( 'mycustomsetting' ) );
 
 		// Setting an empty object.
 		$request = new WP_REST_Request( 'PUT', '/wp/v2/settings' );
 		$request->set_param( 'mycustomsetting', array() );
 		$response = rest_get_server()->dispatch( $request );
 		$data     = $response->get_data();
-		$this->assertEquals( array(), $data['mycustomsetting'] );
-		$this->assertEquals( array(), get_option( 'mycustomsetting' ) );
+		$this->assertSame( array(), $data['mycustomsetting'] );
+		$this->assertSame( array(), get_option( 'mycustomsetting' ) );
 
 		// Provide more keys.
 		$request = new WP_REST_Request( 'PUT', '/wp/v2/settings' );
@@ -532,7 +542,6 @@ class WP_Test_REST_Settings_Controller extends WP_Test_REST_Controller_Testcase
 		$request->set_param( 'mycustomsetting', array( 'a' => 'invalid' ) );
 		$response = rest_get_server()->dispatch( $request );
 		$this->assertErrorResponse( 'rest_invalid_param', $response, 400 );
-		unregister_setting( 'somegroup', 'mycustomsetting' );
 	}
 
 	public function test_update_item_with_filter() {
@@ -543,11 +552,11 @@ class WP_Test_REST_Settings_Controller extends WP_Test_REST_Controller_Testcase
 		$request->set_param( 'description', 'The old description!' );
 		$response = rest_get_server()->dispatch( $request );
 		$data     = $response->get_data();
-		$this->assertEquals( 200, $response->get_status() );
-		$this->assertEquals( 'The old title!', $data['title'] );
-		$this->assertEquals( 'The old description!', $data['description'] );
-		$this->assertEquals( get_option( 'blogname' ), $data['title'] );
-		$this->assertEquals( get_option( 'blogdescription' ), $data['description'] );
+		$this->assertSame( 200, $response->get_status() );
+		$this->assertSame( 'The old title!', $data['title'] );
+		$this->assertSame( 'The old description!', $data['description'] );
+		$this->assertSame( get_option( 'blogname' ), $data['title'] );
+		$this->assertSame( get_option( 'blogdescription' ), $data['description'] );
 
 		add_filter( 'rest_pre_update_setting', array( $this, 'update_setting_custom_callback' ), 10, 4 );
 
@@ -557,11 +566,11 @@ class WP_Test_REST_Settings_Controller extends WP_Test_REST_Controller_Testcase
 		$response = rest_get_server()->dispatch( $request );
 		$data     = $response->get_data();
 
-		$this->assertEquals( 200, $response->get_status() );
-		$this->assertEquals( 'The old title!', $data['title'] );
-		$this->assertEquals( 'The new description!', $data['description'] );
-		$this->assertEquals( get_option( 'blogname' ), $data['title'] );
-		$this->assertEquals( get_option( 'blogdescription' ), $data['description'] );
+		$this->assertSame( 200, $response->get_status() );
+		$this->assertSame( 'The old title!', $data['title'] );
+		$this->assertSame( 'The new description!', $data['description'] );
+		$this->assertSame( get_option( 'blogname' ), $data['title'] );
+		$this->assertSame( get_option( 'blogdescription' ), $data['description'] );
 
 		remove_all_filters( 'rest_pre_update_setting' );
 	}
@@ -579,7 +588,7 @@ class WP_Test_REST_Settings_Controller extends WP_Test_REST_Controller_Testcase
 		$request = new WP_REST_Request( 'PUT', '/wp/v2/settings' );
 		$request->set_param( 'posts_per_page', 11 );
 		$response = rest_get_server()->dispatch( $request );
-		$this->assertEquals( 200, $response->get_status() );
+		$this->assertSame( 200, $response->get_status() );
 	}
 
 	public function test_update_item_with_invalid_float_for_integer() {
@@ -602,8 +611,8 @@ class WP_Test_REST_Settings_Controller extends WP_Test_REST_Controller_Testcase
 		$response = rest_get_server()->dispatch( $request );
 		$data     = $response->get_data();
 
-		$this->assertEquals( 200, $response->get_status() );
-		$this->assertEquals( 10, $data['posts_per_page'] );
+		$this->assertSame( 200, $response->get_status() );
+		$this->assertSame( 10, $data['posts_per_page'] );
 	}
 
 	public function test_update_item_with_invalid_enum() {
@@ -641,7 +650,7 @@ class WP_Test_REST_Settings_Controller extends WP_Test_REST_Controller_Testcase
 		/** Settings can't be deleted */
 		$request  = new WP_REST_Request( 'DELETE', '/wp/v2/settings/title' );
 		$response = rest_get_server()->dispatch( $request );
-		$this->assertEquals( 404, $response->get_status() );
+		$this->assertSame( 404, $response->get_status() );
 	}
 
 	public function test_prepare_item() {
@@ -649,4 +658,58 @@ class WP_Test_REST_Settings_Controller extends WP_Test_REST_Controller_Testcase
 
 	public function test_get_item_schema() {
 	}
+
+	/**
+	 * @ticket 42875
+	 */
+	public function test_register_setting_issues_doing_it_wrong_when_show_in_rest_is_true() {
+		$this->setExpectedIncorrectUsage( 'register_setting' );
+
+		register_setting(
+			'somegroup',
+			'mycustomarraysetting',
+			array(
+				'type'         => 'array',
+				'show_in_rest' => true,
+			)
+		);
+	}
+
+	/**
+	 * @ticket 42875
+	 */
+	public function test_register_setting_issues_doing_it_wrong_when_show_in_rest_omits_schema() {
+		$this->setExpectedIncorrectUsage( 'register_setting' );
+
+		register_setting(
+			'somegroup',
+			'mycustomarraysetting',
+			array(
+				'type'         => 'array',
+				'show_in_rest' => array(
+					'prepare_callback' => 'rest_sanitize_value_from_schema',
+				),
+			)
+		);
+	}
+
+	/**
+	 * @ticket 42875
+	 */
+	public function test_register_setting_issues_doing_it_wrong_when_show_in_rest_omits_schema_items() {
+		$this->setExpectedIncorrectUsage( 'register_setting' );
+
+		register_setting(
+			'somegroup',
+			'mycustomarraysetting',
+			array(
+				'type'         => 'array',
+				'show_in_rest' => array(
+					'schema' => array(
+						'default' => array( 'Hi!' ),
+					),
+				),
+			)
+		);
+	}
 }
diff --git a/tests/rest-api/rest-tags-controller.php b/tests/rest-api/rest-tags-controller.php
index ec17bc71e9..bae98da827 100644
--- a/tests/rest-api/rest-tags-controller.php
+++ b/tests/rest-api/rest-tags-controller.php
@@ -16,6 +16,10 @@ class WP_Test_REST_Tags_Controller extends WP_Test_REST_Controller_Testcase {
 	protected static $contributor;
 	protected static $subscriber;
 
+	protected static $tag_ids    = array();
+	protected static $total_tags = 30;
+	protected static $per_page   = 50;
+
 	public static function wpSetUpBeforeClass( $factory ) {
 		self::$superadmin    = $factory->user->create(
 			array(
@@ -43,9 +47,19 @@ class WP_Test_REST_Tags_Controller extends WP_Test_REST_Controller_Testcase {
 				'role' => 'subscriber',
 			)
 		);
+
 		if ( is_multisite() ) {
 			update_site_option( 'site_admins', array( 'superadmin' ) );
 		}
+
+		// Set up tags for pagination tests.
+		for ( $i = 0; $i < self::$total_tags; $i++ ) {
+			$tag_ids[] = $factory->tag->create(
+				array(
+					'name' => "Tag {$i}",
+				)
+			);
+		}
 	}
 
 	public static function wpTearDownAfterClass() {
@@ -53,6 +67,11 @@ class WP_Test_REST_Tags_Controller extends WP_Test_REST_Controller_Testcase {
 		self::delete_user( self::$administrator );
 		self::delete_user( self::$editor );
 		self::delete_user( self::$subscriber );
+
+		// Remove tags for pagination tests.
+		foreach ( self::$tag_ids as $tag_id ) {
+			wp_delete_term( $tag_id, 'post_tag' );
+		}
 	}
 
 	public function setUp() {
@@ -112,19 +131,19 @@ class WP_Test_REST_Tags_Controller extends WP_Test_REST_Controller_Testcase {
 	}
 
 	public function test_context_param() {
-		// Collection
+		// Collection.
 		$request  = new WP_REST_Request( 'OPTIONS', '/wp/v2/tags' );
 		$response = rest_get_server()->dispatch( $request );
 		$data     = $response->get_data();
-		$this->assertEquals( 'view', $data['endpoints'][0]['args']['context']['default'] );
-		$this->assertEqualSets( array( 'view', 'embed', 'edit' ), $data['endpoints'][0]['args']['context']['enum'] );
-		// Single
+		$this->assertSame( 'view', $data['endpoints'][0]['args']['context']['default'] );
+		$this->assertSameSets( array( 'view', 'embed', 'edit' ), $data['endpoints'][0]['args']['context']['enum'] );
+		// Single.
 		$tag1     = $this->factory->tag->create( array( 'name' => 'Season 5' ) );
 		$request  = new WP_REST_Request( 'OPTIONS', '/wp/v2/tags/' . $tag1 );
 		$response = rest_get_server()->dispatch( $request );
 		$data     = $response->get_data();
-		$this->assertEquals( 'view', $data['endpoints'][0]['args']['context']['default'] );
-		$this->assertEqualSets( array( 'view', 'embed', 'edit' ), $data['endpoints'][0]['args']['context']['enum'] );
+		$this->assertSame( 'view', $data['endpoints'][0]['args']['context']['default'] );
+		$this->assertSameSets( array( 'view', 'embed', 'edit' ), $data['endpoints'][0]['args']['context']['enum'] );
 	}
 
 	public function test_registered_query_params() {
@@ -133,7 +152,7 @@ class WP_Test_REST_Tags_Controller extends WP_Test_REST_Controller_Testcase {
 		$data     = $response->get_data();
 		$keys     = array_keys( $data['endpoints'][0]['args'] );
 		sort( $keys );
-		$this->assertEquals(
+		$this->assertSame(
 			array(
 				'context',
 				'exclude',
@@ -154,13 +173,16 @@ class WP_Test_REST_Tags_Controller extends WP_Test_REST_Controller_Testcase {
 
 	public function test_get_items() {
 		$this->factory->tag->create();
-		$request  = new WP_REST_Request( 'GET', '/wp/v2/tags' );
+
+		$request = new WP_REST_Request( 'GET', '/wp/v2/tags' );
+		$request->set_param( 'per_page', self::$per_page );
 		$response = rest_get_server()->dispatch( $request );
 		$this->check_get_taxonomy_terms_response( $response );
 	}
 
 	public function test_get_items_invalid_permission_for_context() {
 		wp_set_current_user( 0 );
+
 		$request = new WP_REST_Request( 'GET', '/wp/v2/tags' );
 		$request->set_param( 'context', 'edit' );
 		$response = rest_get_server()->dispatch( $request );
@@ -171,80 +193,92 @@ class WP_Test_REST_Tags_Controller extends WP_Test_REST_Controller_Testcase {
 		$post_id = $this->factory->post->create();
 		$tag1    = $this->factory->tag->create( array( 'name' => 'Season 5' ) );
 		$tag2    = $this->factory->tag->create( array( 'name' => 'The Be Sharps' ) );
+
 		wp_set_object_terms( $post_id, array( $tag1, $tag2 ), 'post_tag' );
+
 		$request = new WP_REST_Request( 'GET', '/wp/v2/tags' );
 		$request->set_param( 'hide_empty', true );
 		$response = rest_get_server()->dispatch( $request );
 		$data     = $response->get_data();
-		$this->assertEquals( 2, count( $data ) );
-		$this->assertEquals( 'Season 5', $data[0]['name'] );
-		$this->assertEquals( 'The Be Sharps', $data[1]['name'] );
-		// invalid value should fail
+		$this->assertSame( 2, count( $data ) );
+		$this->assertSame( 'Season 5', $data[0]['name'] );
+		$this->assertSame( 'The Be Sharps', $data[1]['name'] );
+
+		// Invalid 'hide_empty' should error.
 		$request->set_param( 'hide_empty', 'nothanks' );
 		$response = rest_get_server()->dispatch( $request );
 		$this->assertErrorResponse( 'rest_invalid_param', $response, 400 );
 	}
 
 	public function test_get_items_include_query() {
-		$id1     = $this->factory->tag->create();
-		$id2     = $this->factory->tag->create();
-		$id3     = $this->factory->tag->create();
+		$id1 = $this->factory->tag->create();
+		$id2 = $this->factory->tag->create();
+
 		$request = new WP_REST_Request( 'GET', '/wp/v2/tags' );
-		// Orderby=>asc
-		$request->set_param( 'include', array( $id3, $id1 ) );
+
+		// 'orderby' => 'asc'.
+		$request->set_param( 'include', array( $id2, $id1 ) );
 		$response = rest_get_server()->dispatch( $request );
 		$data     = $response->get_data();
-		$this->assertEquals( 2, count( $data ) );
-		$this->assertEquals( $id1, $data[0]['id'] );
-		// Orderby=>include
+		$this->assertSame( 2, count( $data ) );
+		$this->assertSame( $id1, $data[0]['id'] );
+
+		// 'orderby' => 'include'.
 		$request->set_param( 'orderby', 'include' );
 		$response = rest_get_server()->dispatch( $request );
 		$data     = $response->get_data();
-		$this->assertEquals( 2, count( $data ) );
-		$this->assertEquals( $id3, $data[0]['id'] );
-		// Include invalid value shoud fail
+		$this->assertSame( 2, count( $data ) );
+		$this->assertSame( $id2, $data[0]['id'] );
+
+		// Invalid 'include' should error.
 		$request->set_param( 'include', array( 'myterm' ) );
 		$response = rest_get_server()->dispatch( $request );
 		$this->assertErrorResponse( 'rest_invalid_param', $response, 400 );
 	}
 
 	public function test_get_items_exclude_query() {
-		$id1      = $this->factory->tag->create();
-		$id2      = $this->factory->tag->create();
-		$request  = new WP_REST_Request( 'GET', '/wp/v2/tags' );
+		$id1 = $this->factory->tag->create();
+		$id2 = $this->factory->tag->create();
+
+		$request = new WP_REST_Request( 'GET', '/wp/v2/tags' );
+		$request->set_param( 'per_page', self::$per_page );
 		$response = rest_get_server()->dispatch( $request );
 		$data     = $response->get_data();
-		$this->assertTrue( in_array( $id1, wp_list_pluck( $data, 'id' ), true ) );
-		$this->assertTrue( in_array( $id2, wp_list_pluck( $data, 'id' ), true ) );
+		$ids      = wp_list_pluck( $data, 'id' );
+		$this->assertTrue( in_array( $id1, $ids, true ) );
+		$this->assertTrue( in_array( $id2, $ids, true ) );
+
 		$request->set_param( 'exclude', array( $id2 ) );
 		$response = rest_get_server()->dispatch( $request );
 		$data     = $response->get_data();
-		$this->assertTrue( in_array( $id1, wp_list_pluck( $data, 'id' ), true ) );
-		$this->assertFalse( in_array( $id2, wp_list_pluck( $data, 'id' ), true ) );
-		// Invalid exclude value should fail
+		$ids      = wp_list_pluck( $data, 'id' );
+		$this->assertTrue( in_array( $id1, $ids, true ) );
+		$this->assertFalse( in_array( $id2, $ids, true ) );
+
+		// Invalid 'exclude' should error.
 		$request->set_param( 'exclude', array( 'invalid' ) );
 		$response = rest_get_server()->dispatch( $request );
 		$this->assertErrorResponse( 'rest_invalid_param', $response, 400 );
 	}
 
 	public function test_get_items_offset_query() {
-		$id1     = $this->factory->tag->create();
-		$id2     = $this->factory->tag->create();
-		$id3     = $this->factory->tag->create();
-		$id4     = $this->factory->tag->create();
 		$request = new WP_REST_Request( 'GET', '/wp/v2/tags' );
+		$request->set_param( 'per_page', self::$per_page );
 		$request->set_param( 'offset', 1 );
 		$response = rest_get_server()->dispatch( $request );
-		$this->assertCount( 3, $response->get_data() );
-		// 'offset' works with 'per_page'
+		$this->assertCount( self::$total_tags - 1, $response->get_data() );
+
+		// 'offset' works with 'per_page'.
 		$request->set_param( 'per_page', 2 );
 		$response = rest_get_server()->dispatch( $request );
 		$this->assertCount( 2, $response->get_data() );
-		// 'offset' takes priority over 'page'
+
+		// 'offset' takes priority over 'page'.
 		$request->set_param( 'page', 3 );
 		$response = rest_get_server()->dispatch( $request );
 		$this->assertCount( 2, $response->get_data() );
-		// 'offset' invalid value shoudl fail
+
+		// Invalid 'offset' should error.
 		$request->set_param( 'offset', 'moreplease' );
 		$response = rest_get_server()->dispatch( $request );
 		$this->assertErrorResponse( 'rest_invalid_param', $response, 400 );
@@ -253,7 +287,8 @@ class WP_Test_REST_Tags_Controller extends WP_Test_REST_Controller_Testcase {
 
 	public function test_get_items_orderby_args() {
 		$tag1 = $this->factory->tag->create( array( 'name' => 'Apple' ) );
-		$tag2 = $this->factory->tag->create( array( 'name' => 'Banana' ) );
+		$tag2 = $this->factory->tag->create( array( 'name' => 'Zucchini' ) );
+
 		/*
 		 * Tests:
 		 * - orderby
@@ -265,20 +300,22 @@ class WP_Test_REST_Tags_Controller extends WP_Test_REST_Controller_Testcase {
 		$request->set_param( 'order', 'desc' );
 		$request->set_param( 'per_page', 1 );
 		$response = rest_get_server()->dispatch( $request );
-		$this->assertEquals( 200, $response->get_status() );
+		$this->assertSame( 200, $response->get_status() );
 		$data = $response->get_data();
-		$this->assertEquals( 1, count( $data ) );
-		$this->assertEquals( 'Banana', $data[0]['name'] );
+		$this->assertSame( 1, count( $data ) );
+		$this->assertSame( 'Zucchini', $data[0]['name'] );
+
 		$request = new WP_REST_Request( 'GET', '/wp/v2/tags' );
 		$request->set_param( 'orderby', 'name' );
 		$request->set_param( 'order', 'asc' );
 		$request->set_param( 'per_page', 2 );
 		$response = rest_get_server()->dispatch( $request );
-		$this->assertEquals( 200, $response->get_status() );
+		$this->assertSame( 200, $response->get_status() );
 		$data = $response->get_data();
-		$this->assertEquals( 2, count( $data ) );
-		$this->assertEquals( 'Apple', $data[0]['name'] );
-		// Invalid orderby should fail.
+		$this->assertSame( 2, count( $data ) );
+		$this->assertSame( 'Apple', $data[0]['name'] );
+
+		// Invalid 'orderby' should error.
 		$request->set_param( 'orderby', 'invalid' );
 		$response = rest_get_server()->dispatch( $request );
 		$this->assertErrorResponse( 'rest_invalid_param', $response, 400 );
@@ -288,33 +325,36 @@ class WP_Test_REST_Tags_Controller extends WP_Test_REST_Controller_Testcase {
 		$tag0 = $this->factory->tag->create( array( 'name' => 'Cantaloupe' ) );
 		$tag1 = $this->factory->tag->create( array( 'name' => 'Apple' ) );
 		$tag2 = $this->factory->tag->create( array( 'name' => 'Banana' ) );
-		// defaults to orderby=name, order=asc
+
+		// Defaults to 'orderby' => 'name', 'order' => 'asc'.
 		$request  = new WP_REST_Request( 'GET', '/wp/v2/tags' );
 		$response = rest_get_server()->dispatch( $request );
-		$this->assertEquals( 200, $response->get_status() );
+		$this->assertSame( 200, $response->get_status() );
 		$data = $response->get_data();
-		$this->assertEquals( 'Apple', $data[0]['name'] );
-		$this->assertEquals( 'Banana', $data[1]['name'] );
-		$this->assertEquals( 'Cantaloupe', $data[2]['name'] );
-		// orderby=id, with default order=asc
+		$this->assertSame( 'Apple', $data[0]['name'] );
+		$this->assertSame( 'Banana', $data[1]['name'] );
+		$this->assertSame( 'Cantaloupe', $data[2]['name'] );
+
+		// 'orderby' => 'id', with default 'order' => 'asc'.
 		$request = new WP_REST_Request( 'GET', '/wp/v2/tags' );
 		$request->set_param( 'orderby', 'id' );
 		$response = rest_get_server()->dispatch( $request );
-		$this->assertEquals( 200, $response->get_status() );
+		$this->assertSame( 200, $response->get_status() );
 		$data = $response->get_data();
-		$this->assertEquals( 'Cantaloupe', $data[0]['name'] );
-		$this->assertEquals( 'Apple', $data[1]['name'] );
-		$this->assertEquals( 'Banana', $data[2]['name'] );
-		// orderby=id, order=desc
+		$this->assertSame( 'Tag 0', $data[0]['name'] );
+		$this->assertSame( 'Tag 1', $data[1]['name'] );
+		$this->assertSame( 'Tag 2', $data[2]['name'] );
+
+		// 'orderby' => 'id', 'order' => 'desc'.
 		$request = new WP_REST_Request( 'GET', '/wp/v2/tags' );
 		$request->set_param( 'orderby', 'id' );
 		$request->set_param( 'order', 'desc' );
 		$response = rest_get_server()->dispatch( $request );
 		$data     = $response->get_data();
-		$this->assertEquals( 200, $response->get_status() );
-		$this->assertEquals( 'Banana', $data[0]['name'] );
-		$this->assertEquals( 'Apple', $data[1]['name'] );
-		$this->assertEquals( 'Cantaloupe', $data[2]['name'] );
+		$this->assertSame( 200, $response->get_status() );
+		$this->assertSame( 'Banana', $data[0]['name'] );
+		$this->assertSame( 'Apple', $data[1]['name'] );
+		$this->assertSame( 'Cantaloupe', $data[2]['name'] );
 	}
 
 	public function test_get_items_orderby_slugs() {
@@ -327,10 +367,10 @@ class WP_Test_REST_Tags_Controller extends WP_Test_REST_Controller_Testcase {
 		$request->set_param( 'slug', array( 'taco', 'burrito', 'chalupa' ) );
 		$response = rest_get_server()->dispatch( $request );
 		$data     = $response->get_data();
-		$this->assertEquals( 200, $response->get_status() );
-		$this->assertEquals( 'taco', $data[0]['slug'] );
-		$this->assertEquals( 'burrito', $data[1]['slug'] );
-		$this->assertEquals( 'chalupa', $data[2]['slug'] );
+		$this->assertSame( 200, $response->get_status() );
+		$this->assertSame( 'taco', $data[0]['slug'] );
+		$this->assertSame( 'burrito', $data[1]['slug'] );
+		$this->assertSame( 'chalupa', $data[2]['slug'] );
 	}
 
 	public function test_get_items_post_args() {
@@ -338,18 +378,19 @@ class WP_Test_REST_Tags_Controller extends WP_Test_REST_Controller_Testcase {
 		$tag1    = $this->factory->tag->create( array( 'name' => 'DC' ) );
 		$tag2    = $this->factory->tag->create( array( 'name' => 'Marvel' ) );
 		$this->factory->tag->create( array( 'name' => 'Dark Horse' ) );
+
 		wp_set_object_terms( $post_id, array( $tag1, $tag2 ), 'post_tag' );
 
 		$request = new WP_REST_Request( 'GET', '/wp/v2/tags' );
 		$request->set_param( 'post', $post_id );
 		$response = rest_get_server()->dispatch( $request );
-		$this->assertEquals( 200, $response->get_status() );
+		$this->assertSame( 200, $response->get_status() );
 
 		$data = $response->get_data();
-		$this->assertEquals( 2, count( $data ) );
-		$this->assertEquals( 'DC', $data[0]['name'] );
+		$this->assertSame( 2, count( $data ) );
+		$this->assertSame( 'DC', $data[0]['name'] );
 
-		// Invalid post should error.
+		// Invalid 'post' should error.
 		$request = new WP_REST_Request( 'GET', '/wp/v2/tags' );
 		$request->set_param( 'post', 'invalid-post' );
 		$response = rest_get_server()->dispatch( $request );
@@ -358,16 +399,8 @@ class WP_Test_REST_Tags_Controller extends WP_Test_REST_Controller_Testcase {
 
 	public function test_get_terms_post_args_paging() {
 		$post_id = $this->factory->post->create();
-		$tag_ids = array();
 
-		for ( $i = 0; $i < 30; $i++ ) {
-			$tag_ids[] = $this->factory->tag->create(
-				array(
-					'name' => "Tag {$i}",
-				)
-			);
-		}
-		wp_set_object_terms( $post_id, $tag_ids, 'post_tag' );
+		wp_set_object_terms( $post_id, self::$tag_ids, 'post_tag' );
 
 		$request = new WP_REST_Request( 'GET', '/wp/v2/tags' );
 		$request->set_param( 'post', $post_id );
@@ -379,7 +412,7 @@ class WP_Test_REST_Tags_Controller extends WP_Test_REST_Controller_Testcase {
 
 		$i = 0;
 		foreach ( $tags as $tag ) {
-			$this->assertEquals( $tag['name'], "Tag {$i}" );
+			$this->assertSame( $tag['name'], "Tag {$i}" );
 			$i++;
 		}
 
@@ -392,7 +425,7 @@ class WP_Test_REST_Tags_Controller extends WP_Test_REST_Controller_Testcase {
 		$tags     = $response->get_data();
 
 		foreach ( $tags as $tag ) {
-			$this->assertEquals( $tag['name'], "Tag {$i}" );
+			$this->assertSame( $tag['name'], "Tag {$i}" );
 			$i++;
 		}
 	}
@@ -403,7 +436,7 @@ class WP_Test_REST_Tags_Controller extends WP_Test_REST_Controller_Testcase {
 		$request = new WP_REST_Request( 'GET', '/wp/v2/tags' );
 		$request->set_param( 'post', $post_id );
 		$response = rest_get_server()->dispatch( $request );
-		$this->assertEquals( 200, $response->get_status() );
+		$this->assertSame( 200, $response->get_status() );
 
 		$data = $response->get_data();
 		$this->assertCount( 0, $data );
@@ -432,21 +465,23 @@ class WP_Test_REST_Tags_Controller extends WP_Test_REST_Controller_Testcase {
 			)
 		);
 		$post_id = $this->factory->post->create();
+
 		wp_set_object_terms( $post_id, array( $term1, $term2 ), 'batman' );
 
 		$request = new WP_REST_Request( 'GET', '/wp/v2/batman' );
 		$request->set_param( 'post', $post_id );
 		$response = rest_get_server()->dispatch( $request );
-		$this->assertEquals( 200, $response->get_status() );
+		$this->assertSame( 200, $response->get_status() );
 
 		$data = $response->get_data();
-		$this->assertEquals( 2, count( $data ) );
-		$this->assertEquals( 'Cape', $data[0]['name'] );
+		$this->assertSame( 2, count( $data ) );
+		$this->assertSame( 'Cape', $data[0]['name'] );
 	}
 
 	public function test_get_items_search_args() {
 		$tag1 = $this->factory->tag->create( array( 'name' => 'Apple' ) );
 		$tag2 = $this->factory->tag->create( array( 'name' => 'Banana' ) );
+
 		/*
 		 * Tests:
 		 * - search
@@ -454,28 +489,30 @@ class WP_Test_REST_Tags_Controller extends WP_Test_REST_Controller_Testcase {
 		$request = new WP_REST_Request( 'GET', '/wp/v2/tags' );
 		$request->set_param( 'search', 'App' );
 		$response = rest_get_server()->dispatch( $request );
-		$this->assertEquals( 200, $response->get_status() );
+		$this->assertSame( 200, $response->get_status() );
 		$data = $response->get_data();
-		$this->assertEquals( 1, count( $data ) );
-		$this->assertEquals( 'Apple', $data[0]['name'] );
+		$this->assertSame( 1, count( $data ) );
+		$this->assertSame( 'Apple', $data[0]['name'] );
+
 		$request = new WP_REST_Request( 'GET', '/wp/v2/tags' );
 		$request->set_param( 'search', 'Garbage' );
 		$response = rest_get_server()->dispatch( $request );
-		$this->assertEquals( 200, $response->get_status() );
+		$this->assertSame( 200, $response->get_status() );
 		$data = $response->get_data();
-		$this->assertEquals( 0, count( $data ) );
+		$this->assertSame( 0, count( $data ) );
 	}
 
 	public function test_get_items_slug_arg() {
-		$tag1    = $this->factory->tag->create( array( 'name' => 'Apple' ) );
-		$tag2    = $this->factory->tag->create( array( 'name' => 'Banana' ) );
+		$tag1 = $this->factory->tag->create( array( 'name' => 'Apple' ) );
+		$tag2 = $this->factory->tag->create( array( 'name' => 'Banana' ) );
+
 		$request = new WP_REST_Request( 'GET', '/wp/v2/tags' );
 		$request->set_param( 'slug', 'apple' );
 		$response = rest_get_server()->dispatch( $request );
-		$this->assertEquals( 200, $response->get_status() );
+		$this->assertSame( 200, $response->get_status() );
 		$data = $response->get_data();
-		$this->assertEquals( 1, count( $data ) );
-		$this->assertEquals( 'Apple', $data[0]['name'] );
+		$this->assertSame( 1, count( $data ) );
+		$this->assertSame( 'Apple', $data[0]['name'] );
 	}
 
 	public function test_get_items_slug_array_arg() {
@@ -483,6 +520,7 @@ class WP_Test_REST_Tags_Controller extends WP_Test_REST_Controller_Testcase {
 		$id2 = $this->factory->tag->create( array( 'name' => 'Enchilada' ) );
 		$id3 = $this->factory->tag->create( array( 'name' => 'Burrito' ) );
 		$this->factory->tag->create( array( 'name' => 'Pizza' ) );
+
 		$request = new WP_REST_Request( 'GET', '/wp/v2/tags' );
 		$request->set_param(
 			'slug',
@@ -493,11 +531,11 @@ class WP_Test_REST_Tags_Controller extends WP_Test_REST_Controller_Testcase {
 			)
 		);
 		$response = rest_get_server()->dispatch( $request );
-		$this->assertEquals( 200, $response->get_status() );
+		$this->assertSame( 200, $response->get_status() );
 		$data  = $response->get_data();
 		$names = wp_list_pluck( $data, 'name' );
 		sort( $names );
-		$this->assertEquals( array( 'Burrito', 'Enchilada', 'Taco' ), $names );
+		$this->assertSame( array( 'Burrito', 'Enchilada', 'Taco' ), $names );
 	}
 
 	public function test_get_items_slug_csv_arg() {
@@ -505,14 +543,15 @@ class WP_Test_REST_Tags_Controller extends WP_Test_REST_Controller_Testcase {
 		$id2 = $this->factory->tag->create( array( 'name' => 'Enchilada' ) );
 		$id3 = $this->factory->tag->create( array( 'name' => 'Burrito' ) );
 		$this->factory->tag->create( array( 'name' => 'Pizza' ) );
+
 		$request = new WP_REST_Request( 'GET', '/wp/v2/tags' );
 		$request->set_param( 'slug', 'taco,burrito, enchilada' );
 		$response = rest_get_server()->dispatch( $request );
-		$this->assertEquals( 200, $response->get_status() );
+		$this->assertSame( 200, $response->get_status() );
 		$data  = $response->get_data();
 		$names = wp_list_pluck( $data, 'name' );
 		sort( $names );
-		$this->assertEquals( array( 'Burrito', 'Enchilada', 'Taco' ), $names );
+		$this->assertSame( array( 'Burrito', 'Enchilada', 'Taco' ), $names );
 	}
 
 	public function test_get_terms_private_taxonomy() {
@@ -536,19 +575,15 @@ class WP_Test_REST_Tags_Controller extends WP_Test_REST_Controller_Testcase {
 	}
 
 	public function test_get_terms_pagination_headers() {
-		// Start of the index
-		for ( $i = 0; $i < 50; $i++ ) {
-			$this->factory->tag->create(
-				array(
-					'name' => "Tag {$i}",
-				)
-			);
-		}
+		$total_tags  = self::$total_tags;
+		$total_pages = (int) ceil( $total_tags / 10 );
+
+		// Start of the index.
 		$request  = new WP_REST_Request( 'GET', '/wp/v2/tags' );
 		$response = rest_get_server()->dispatch( $request );
 		$headers  = $response->get_headers();
-		$this->assertEquals( 50, $headers['X-WP-Total'] );
-		$this->assertEquals( 5, $headers['X-WP-TotalPages'] );
+		$this->assertSame( $total_tags, $headers['X-WP-Total'] );
+		$this->assertSame( $total_pages, $headers['X-WP-TotalPages'] );
 		$next_link = add_query_arg(
 			array(
 				'page' => 2,
@@ -557,18 +592,17 @@ class WP_Test_REST_Tags_Controller extends WP_Test_REST_Controller_Testcase {
 		);
 		$this->assertFalse( stripos( $headers['Link'], 'rel="prev"' ) );
 		$this->assertContains( '<' . $next_link . '>; rel="next"', $headers['Link'] );
-		// 3rd page
-		$this->factory->tag->create(
-			array(
-				'name' => 'Tag 51',
-			)
-		);
+
+		// 3rd page.
+		$this->factory->tag->create();
+		$total_tags++;
+		$total_pages++;
 		$request = new WP_REST_Request( 'GET', '/wp/v2/tags' );
 		$request->set_param( 'page', 3 );
 		$response = rest_get_server()->dispatch( $request );
 		$headers  = $response->get_headers();
-		$this->assertEquals( 51, $headers['X-WP-Total'] );
-		$this->assertEquals( 6, $headers['X-WP-TotalPages'] );
+		$this->assertSame( $total_tags, $headers['X-WP-Total'] );
+		$this->assertSame( $total_pages, $headers['X-WP-TotalPages'] );
 		$prev_link = add_query_arg(
 			array(
 				'page' => 2,
@@ -583,31 +617,33 @@ class WP_Test_REST_Tags_Controller extends WP_Test_REST_Controller_Testcase {
 			rest_url( 'wp/v2/tags' )
 		);
 		$this->assertContains( '<' . $next_link . '>; rel="next"', $headers['Link'] );
-		// Last page
+
+		// Last page.
 		$request = new WP_REST_Request( 'GET', '/wp/v2/tags' );
-		$request->set_param( 'page', 6 );
+		$request->set_param( 'page', $total_pages );
 		$response = rest_get_server()->dispatch( $request );
 		$headers  = $response->get_headers();
-		$this->assertEquals( 51, $headers['X-WP-Total'] );
-		$this->assertEquals( 6, $headers['X-WP-TotalPages'] );
+		$this->assertSame( $total_tags, $headers['X-WP-Total'] );
+		$this->assertSame( $total_pages, $headers['X-WP-TotalPages'] );
 		$prev_link = add_query_arg(
 			array(
-				'page' => 5,
+				'page' => $total_pages - 1,
 			),
 			rest_url( 'wp/v2/tags' )
 		);
 		$this->assertContains( '<' . $prev_link . '>; rel="prev"', $headers['Link'] );
 		$this->assertFalse( stripos( $headers['Link'], 'rel="next"' ) );
-		// Out of bounds
+
+		// Out of bounds.
 		$request = new WP_REST_Request( 'GET', '/wp/v2/tags' );
-		$request->set_param( 'page', 8 );
+		$request->set_param( 'page', 100 );
 		$response = rest_get_server()->dispatch( $request );
 		$headers  = $response->get_headers();
-		$this->assertEquals( 51, $headers['X-WP-Total'] );
-		$this->assertEquals( 6, $headers['X-WP-TotalPages'] );
+		$this->assertSame( $total_tags, $headers['X-WP-Total'] );
+		$this->assertSame( $total_pages, $headers['X-WP-TotalPages'] );
 		$prev_link = add_query_arg(
 			array(
-				'page' => 6,
+				'page' => $total_pages,
 			),
 			rest_url( 'wp/v2/tags' )
 		);
@@ -623,7 +659,8 @@ class WP_Test_REST_Tags_Controller extends WP_Test_REST_Controller_Testcase {
 	}
 
 	public function test_get_item() {
-		$id       = $this->factory->tag->create();
+		$id = $this->factory->tag->create();
+
 		$request  = new WP_REST_Request( 'GET', '/wp/v2/tags/' . $id );
 		$response = rest_get_server()->dispatch( $request );
 		$this->check_get_taxonomy_term_response( $response, $id );
@@ -633,7 +670,8 @@ class WP_Test_REST_Tags_Controller extends WP_Test_REST_Controller_Testcase {
 	 * @ticket 39122
 	 */
 	public function test_get_item_meta() {
-		$id       = $this->factory->tag->create();
+		$id = $this->factory->tag->create();
+
 		$request  = new WP_REST_Request( 'GET', '/wp/v2/tags/' . $id );
 		$response = rest_get_server()->dispatch( $request );
 		$data     = $response->get_data();
@@ -654,7 +692,8 @@ class WP_Test_REST_Tags_Controller extends WP_Test_REST_Controller_Testcase {
 	 * @ticket 39122
 	 */
 	public function test_get_item_meta_registered_for_different_taxonomy() {
-		$id       = $this->factory->tag->create();
+		$id = $this->factory->tag->create();
+
 		$request  = new WP_REST_Request( 'GET', '/wp/v2/tags/' . $id );
 		$response = rest_get_server()->dispatch( $request );
 		$data     = $response->get_data();
@@ -672,7 +711,9 @@ class WP_Test_REST_Tags_Controller extends WP_Test_REST_Controller_Testcase {
 
 	public function test_get_item_invalid_permission_for_context() {
 		$id = $this->factory->tag->create();
+
 		wp_set_current_user( 0 );
+
 		$request = new WP_REST_Request( 'GET', '/wp/v2/tags/' . $id );
 		$request->set_param( 'context', 'edit' );
 		$response = rest_get_server()->dispatch( $request );
@@ -695,12 +736,13 @@ class WP_Test_REST_Tags_Controller extends WP_Test_REST_Controller_Testcase {
 
 	public function test_get_item_incorrect_taxonomy() {
 		register_taxonomy( 'robin', 'post' );
-		$term1    = $this->factory->term->create(
+		$term1 = $this->factory->term->create(
 			array(
 				'name'     => 'Cape',
 				'taxonomy' => 'robin',
 			)
 		);
+
 		$request  = new WP_REST_Request( 'GET', '/wp/v2/tags/' . $term1 );
 		$response = rest_get_server()->dispatch( $request );
 		$this->assertErrorResponse( 'rest_term_invalid', $response, 404 );
@@ -708,38 +750,41 @@ class WP_Test_REST_Tags_Controller extends WP_Test_REST_Controller_Testcase {
 
 	public function test_create_item() {
 		wp_set_current_user( self::$administrator );
+
 		$request = new WP_REST_Request( 'POST', '/wp/v2/tags' );
 		$request->set_param( 'name', 'My Awesome Term' );
 		$request->set_param( 'description', 'This term is so awesome.' );
 		$request->set_param( 'slug', 'so-awesome' );
 		$response = rest_get_server()->dispatch( $request );
-		$this->assertEquals( 201, $response->get_status() );
+		$this->assertSame( 201, $response->get_status() );
 		$headers = $response->get_headers();
 		$data    = $response->get_data();
 		$this->assertContains( '/wp/v2/tags/' . $data['id'], $headers['Location'] );
-		$this->assertEquals( 'My Awesome Term', $data['name'] );
-		$this->assertEquals( 'This term is so awesome.', $data['description'] );
-		$this->assertEquals( 'so-awesome', $data['slug'] );
+		$this->assertSame( 'My Awesome Term', $data['name'] );
+		$this->assertSame( 'This term is so awesome.', $data['description'] );
+		$this->assertSame( 'so-awesome', $data['slug'] );
 	}
 
 	public function test_create_item_contributor() {
 		wp_set_current_user( self::$contributor );
+
 		$request = new WP_REST_Request( 'POST', '/wp/v2/tags' );
 		$request->set_param( 'name', 'My Awesome Term' );
 		$request->set_param( 'description', 'This term is so awesome.' );
 		$request->set_param( 'slug', 'so-awesome' );
 		$response = rest_get_server()->dispatch( $request );
-		$this->assertEquals( 201, $response->get_status() );
+		$this->assertSame( 201, $response->get_status() );
 		$headers = $response->get_headers();
 		$data    = $response->get_data();
 		$this->assertContains( '/wp/v2/tags/' . $data['id'], $headers['Location'] );
-		$this->assertEquals( 'My Awesome Term', $data['name'] );
-		$this->assertEquals( 'This term is so awesome.', $data['description'] );
-		$this->assertEquals( 'so-awesome', $data['slug'] );
+		$this->assertSame( 'My Awesome Term', $data['name'] );
+		$this->assertSame( 'This term is so awesome.', $data['description'] );
+		$this->assertSame( 'so-awesome', $data['slug'] );
 	}
 
 	public function test_create_item_incorrect_permissions() {
 		wp_set_current_user( self::$subscriber );
+
 		$request = new WP_REST_Request( 'POST', '/wp/v2/tags' );
 		$request->set_param( 'name', 'Incorrect permissions' );
 		$response = rest_get_server()->dispatch( $request );
@@ -748,6 +793,7 @@ class WP_Test_REST_Tags_Controller extends WP_Test_REST_Controller_Testcase {
 
 	public function test_create_item_missing_arguments() {
 		wp_set_current_user( self::$administrator );
+
 		$request  = new WP_REST_Request( 'POST', '/wp/v2/tags' );
 		$response = rest_get_server()->dispatch( $request );
 		$this->assertErrorResponse( 'rest_missing_callback_param', $response, 400 );
@@ -765,44 +811,50 @@ class WP_Test_REST_Tags_Controller extends WP_Test_REST_Controller_Testcase {
 
 	public function test_create_item_with_meta() {
 		wp_set_current_user( self::$administrator );
+
 		$request = new WP_REST_Request( 'POST', '/wp/v2/tags' );
 		$request->set_param( 'name', 'My Awesome Term' );
 		$request->set_param( 'meta', array( 'test_tag_single' => 'hello' ) );
 		$response = rest_get_server()->dispatch( $request );
-		$this->assertEquals( 201, $response->get_status() );
+		$this->assertSame( 201, $response->get_status() );
 		$headers = $response->get_headers();
 		$data    = $response->get_data();
 		$this->assertContains( '/wp/v2/tags/' . $data['id'], $headers['Location'] );
-		$this->assertEquals( 'My Awesome Term', $data['name'] );
-		$this->assertEquals( 'hello', get_term_meta( $data['id'], 'test_tag_single', true ) );
+		$this->assertSame( 'My Awesome Term', $data['name'] );
+		$this->assertSame( 'hello', get_term_meta( $data['id'], 'test_tag_single', true ) );
 	}
 
 	public function test_create_item_with_meta_wrong_id() {
 		wp_set_current_user( self::$administrator );
+
 		$existing_tag_id = $this->factory->tag->create( array( 'name' => 'My Not So Awesome Term' ) );
-		$request         = new WP_REST_Request( 'POST', '/wp/v2/tags' );
+
+		$request = new WP_REST_Request( 'POST', '/wp/v2/tags' );
 		$request->set_param( 'name', 'My Awesome Term' );
 		$request->set_param( 'meta', array( 'test_tag_single' => 'hello' ) );
 		$request->set_param( 'id', $existing_tag_id );
 		$response = rest_get_server()->dispatch( $request );
-		$this->assertEquals( 201, $response->get_status() );
+		$this->assertSame( 201, $response->get_status() );
 		$headers = $response->get_headers();
 		$data    = $response->get_data();
 		$this->assertContains( '/wp/v2/tags/' . $data['id'], $headers['Location'] );
-		$this->assertEquals( 'My Awesome Term', $data['name'] );
-		$this->assertEquals( '', get_term_meta( $existing_tag_id, 'test_tag_single', true ) );
-		$this->assertEquals( 'hello', get_term_meta( $data['id'], 'test_tag_single', true ) );
+		$this->assertSame( 'My Awesome Term', $data['name'] );
+		$this->assertSame( '', get_term_meta( $existing_tag_id, 'test_tag_single', true ) );
+		$this->assertSame( 'hello', get_term_meta( $data['id'], 'test_tag_single', true ) );
 	}
 
 	public function test_update_item() {
 		wp_set_current_user( self::$administrator );
+
 		$orig_args = array(
 			'name'        => 'Original Name',
 			'description' => 'Original Description',
 			'slug'        => 'original-slug',
 		);
-		$term      = get_term_by( 'id', $this->factory->tag->create( $orig_args ), 'post_tag' );
-		$request   = new WP_REST_Request( 'POST', '/wp/v2/tags/' . $term->term_id );
+
+		$term = get_term_by( 'id', $this->factory->tag->create( $orig_args ), 'post_tag' );
+
+		$request = new WP_REST_Request( 'POST', '/wp/v2/tags/' . $term->term_id );
 		$request->set_param( 'name', 'New Name' );
 		$request->set_param( 'description', 'New Description' );
 		$request->set_param( 'slug', 'new-slug' );
@@ -815,37 +867,38 @@ class WP_Test_REST_Tags_Controller extends WP_Test_REST_Controller_Testcase {
 			)
 		);
 		$response = rest_get_server()->dispatch( $request );
-		$this->assertEquals( 200, $response->get_status() );
+		$this->assertSame( 200, $response->get_status() );
 		$data = $response->get_data();
-		$this->assertEquals( 'New Name', $data['name'] );
-		$this->assertEquals( 'New Description', $data['description'] );
-		$this->assertEquals( 'new-slug', $data['slug'] );
-		$this->assertEquals( 'just meta', $data['meta']['test_single'] );
-		$this->assertEquals( 'tag-specific meta', $data['meta']['test_tag_single'] );
+		$this->assertSame( 'New Name', $data['name'] );
+		$this->assertSame( 'New Description', $data['description'] );
+		$this->assertSame( 'new-slug', $data['slug'] );
+		$this->assertSame( 'just meta', $data['meta']['test_single'] );
+		$this->assertSame( 'tag-specific meta', $data['meta']['test_tag_single'] );
 		$this->assertFalse( isset( $data['meta']['test_cat_meta'] ) );
 	}
 
 	public function test_update_item_no_change() {
 		wp_set_current_user( self::$administrator );
-		$term = get_term_by( 'id', $this->factory->tag->create(), 'post_tag' );
 
-		$request = new WP_REST_Request( 'PUT', '/wp/v2/tags/' . $term->term_id );
+		$term = get_term_by( 'id', $this->factory->tag->create(), 'post_tag' );
 
+		$request  = new WP_REST_Request( 'PUT', '/wp/v2/tags/' . $term->term_id );
 		$response = rest_get_server()->dispatch( $request );
-		$this->assertEquals( 200, $response->get_status() );
+		$this->assertSame( 200, $response->get_status() );
 		$request->set_param( 'slug', $term->slug );
 
-		// Run twice to make sure that the update still succeeds even if no DB
-		// rows are updated.
+		// Run twice to make sure that the update still succeeds
+		// even if no DB rows are updated.
 		$response = rest_get_server()->dispatch( $request );
-		$this->assertEquals( 200, $response->get_status() );
+		$this->assertSame( 200, $response->get_status() );
 
 		$response = rest_get_server()->dispatch( $request );
-		$this->assertEquals( 200, $response->get_status() );
+		$this->assertSame( 200, $response->get_status() );
 	}
 
 	public function test_update_item_invalid_term() {
 		wp_set_current_user( self::$administrator );
+
 		$request = new WP_REST_Request( 'POST', '/wp/v2/tags/' . REST_TESTS_IMPOSSIBLY_HIGH_NUMBER );
 		$request->set_param( 'name', 'Invalid Term' );
 		$response = rest_get_server()->dispatch( $request );
@@ -854,7 +907,9 @@ class WP_Test_REST_Tags_Controller extends WP_Test_REST_Controller_Testcase {
 
 	public function test_update_item_incorrect_permissions() {
 		wp_set_current_user( self::$subscriber );
-		$term    = get_term_by( 'id', $this->factory->tag->create(), 'post_tag' );
+
+		$term = get_term_by( 'id', $this->factory->tag->create(), 'post_tag' );
+
 		$request = new WP_REST_Request( 'POST', '/wp/v2/tags/' . $term->term_id );
 		$request->set_param( 'name', 'Incorrect permissions' );
 		$response = rest_get_server()->dispatch( $request );
@@ -866,7 +921,9 @@ class WP_Test_REST_Tags_Controller extends WP_Test_REST_Controller_Testcase {
 	 */
 	public function test_update_item_with_edit_term_cap_granted() {
 		wp_set_current_user( self::$subscriber );
-		$term    = $this->factory->tag->create_and_get();
+
+		$term = $this->factory->tag->create_and_get();
+
 		$request = new WP_REST_Request( 'POST', '/wp/v2/tags/' . $term->term_id );
 		$request->set_param( 'name', 'New Name' );
 
@@ -874,9 +931,9 @@ class WP_Test_REST_Tags_Controller extends WP_Test_REST_Controller_Testcase {
 		$response = rest_get_server()->dispatch( $request );
 		remove_filter( 'user_has_cap', array( $this, 'grant_edit_term' ), 10, 2 );
 
-		$this->assertEquals( 200, $response->get_status() );
+		$this->assertSame( 200, $response->get_status() );
 		$data = $response->get_data();
-		$this->assertEquals( 'New Name', $data['name'] );
+		$this->assertSame( 'New Name', $data['name'] );
 	}
 
 	public function grant_edit_term( $caps, $cap ) {
@@ -891,7 +948,9 @@ class WP_Test_REST_Tags_Controller extends WP_Test_REST_Controller_Testcase {
 	 */
 	public function test_update_item_with_edit_term_cap_revoked() {
 		wp_set_current_user( self::$administrator );
-		$term    = $this->factory->tag->create_and_get();
+
+		$term = $this->factory->tag->create_and_get();
+
 		$request = new WP_REST_Request( 'POST', '/wp/v2/tags/' . $term->term_id );
 		$request->set_param( 'name', 'New Name' );
 
@@ -911,6 +970,7 @@ class WP_Test_REST_Tags_Controller extends WP_Test_REST_Controller_Testcase {
 
 	public function test_update_item_parent_non_hierarchical_taxonomy() {
 		wp_set_current_user( self::$administrator );
+
 		$term = get_term_by( 'id', $this->factory->tag->create(), 'post_tag' );
 
 		$request = new WP_REST_Request( 'POST', '/wp/v2/tags/' . $term->term_id );
@@ -920,46 +980,47 @@ class WP_Test_REST_Tags_Controller extends WP_Test_REST_Controller_Testcase {
 	}
 
 	public function verify_tag_roundtrip( $input = array(), $expected_output = array() ) {
-		// Create the tag
+		// Create the tag.
 		$request = new WP_REST_Request( 'POST', '/wp/v2/tags' );
 		foreach ( $input as $name => $value ) {
 			$request->set_param( $name, $value );
 		}
 		$response = rest_get_server()->dispatch( $request );
-		$this->assertEquals( 201, $response->get_status() );
+		$this->assertSame( 201, $response->get_status() );
 		$actual_output = $response->get_data();
 
-		// Compare expected API output to actual API output
-		$this->assertEquals( $expected_output['name'], $actual_output['name'] );
-		$this->assertEquals( $expected_output['description'], $actual_output['description'] );
+		// Compare expected API output to actual API output.
+		$this->assertSame( $expected_output['name'], $actual_output['name'] );
+		$this->assertSame( $expected_output['description'], $actual_output['description'] );
 
-		// Compare expected API output to WP internal values
+		// Compare expected API output to WP internal values.
 		$tag = get_term_by( 'id', $actual_output['id'], 'post_tag' );
-		$this->assertEquals( $expected_output['name'], $tag->name );
-		$this->assertEquals( $expected_output['description'], $tag->description );
+		$this->assertSame( $expected_output['name'], $tag->name );
+		$this->assertSame( $expected_output['description'], $tag->description );
 
-		// Update the tag
+		// Update the tag.
 		$request = new WP_REST_Request( 'PUT', sprintf( '/wp/v2/tags/%d', $actual_output['id'] ) );
 		foreach ( $input as $name => $value ) {
 			$request->set_param( $name, $value );
 		}
 		$response = rest_get_server()->dispatch( $request );
-		$this->assertEquals( 200, $response->get_status() );
+		$this->assertSame( 200, $response->get_status() );
 		$actual_output = $response->get_data();
 
-		// Compare expected API output to actual API output
-		$this->assertEquals( $expected_output['name'], $actual_output['name'] );
-		$this->assertEquals( $expected_output['description'], $actual_output['description'] );
+		// Compare expected API output to actual API output.
+		$this->assertSame( $expected_output['name'], $actual_output['name'] );
+		$this->assertSame( $expected_output['description'], $actual_output['description'] );
 
-		// Compare expected API output to WP internal values
+		// Compare expected API output to WP internal values.
 		$tag = get_term_by( 'id', $actual_output['id'], 'post_tag' );
-		$this->assertEquals( $expected_output['name'], $tag->name );
-		$this->assertEquals( $expected_output['description'], $tag->description );
+		$this->assertSame( $expected_output['name'], $tag->name );
+		$this->assertSame( $expected_output['description'], $tag->description );
 	}
 
 	public function test_tag_roundtrip_as_editor() {
 		wp_set_current_user( self::$editor );
-		$this->assertEquals( ! is_multisite(), current_user_can( 'unfiltered_html' ) );
+
+		$this->assertSame( ! is_multisite(), current_user_can( 'unfiltered_html' ) );
 		$this->verify_tag_roundtrip(
 			array(
 				'name'        => '\o/ ¬Ø\_(„ÉÑ)_/¬Ø',
@@ -974,6 +1035,7 @@ class WP_Test_REST_Tags_Controller extends WP_Test_REST_Controller_Testcase {
 
 	public function test_tag_roundtrip_as_editor_html() {
 		wp_set_current_user( self::$editor );
+
 		if ( is_multisite() ) {
 			$this->assertFalse( current_user_can( 'unfiltered_html' ) );
 			$this->verify_tag_roundtrip(
@@ -1003,6 +1065,7 @@ class WP_Test_REST_Tags_Controller extends WP_Test_REST_Controller_Testcase {
 
 	public function test_tag_roundtrip_as_superadmin() {
 		wp_set_current_user( self::$superadmin );
+
 		$this->assertTrue( current_user_can( 'unfiltered_html' ) );
 		$this->verify_tag_roundtrip(
 			array(
@@ -1018,6 +1081,7 @@ class WP_Test_REST_Tags_Controller extends WP_Test_REST_Controller_Testcase {
 
 	public function test_tag_roundtrip_as_superadmin_html() {
 		wp_set_current_user( self::$superadmin );
+
 		$this->assertTrue( current_user_can( 'unfiltered_html' ) );
 		$this->verify_tag_roundtrip(
 			array(
@@ -1033,18 +1097,21 @@ class WP_Test_REST_Tags_Controller extends WP_Test_REST_Controller_Testcase {
 
 	public function test_delete_item() {
 		wp_set_current_user( self::$administrator );
-		$term    = get_term_by( 'id', $this->factory->tag->create( array( 'name' => 'Deleted Tag' ) ), 'post_tag' );
+
+		$term = get_term_by( 'id', $this->factory->tag->create( array( 'name' => 'Deleted Tag' ) ), 'post_tag' );
+
 		$request = new WP_REST_Request( 'DELETE', '/wp/v2/tags/' . $term->term_id );
 		$request->set_param( 'force', true );
 		$response = rest_get_server()->dispatch( $request );
-		$this->assertEquals( 200, $response->get_status() );
+		$this->assertSame( 200, $response->get_status() );
 		$data = $response->get_data();
 		$this->assertTrue( $data['deleted'] );
-		$this->assertEquals( 'Deleted Tag', $data['previous']['name'] );
+		$this->assertSame( 'Deleted Tag', $data['previous']['name'] );
 	}
 
 	public function test_delete_item_no_trash() {
 		wp_set_current_user( self::$administrator );
+
 		$term = get_term_by( 'id', $this->factory->tag->create( array( 'name' => 'Deleted Tag' ) ), 'post_tag' );
 
 		$request  = new WP_REST_Request( 'DELETE', '/wp/v2/tags/' . $term->term_id );
@@ -1058,6 +1125,7 @@ class WP_Test_REST_Tags_Controller extends WP_Test_REST_Controller_Testcase {
 
 	public function test_delete_item_invalid_term() {
 		wp_set_current_user( self::$administrator );
+
 		$request  = new WP_REST_Request( 'DELETE', '/wp/v2/tags/' . REST_TESTS_IMPOSSIBLY_HIGH_NUMBER );
 		$response = rest_get_server()->dispatch( $request );
 		$this->assertErrorResponse( 'rest_term_invalid', $response, 404 );
@@ -1065,7 +1133,9 @@ class WP_Test_REST_Tags_Controller extends WP_Test_REST_Controller_Testcase {
 
 	public function test_delete_item_incorrect_permissions() {
 		wp_set_current_user( self::$subscriber );
-		$term     = get_term_by( 'id', $this->factory->tag->create(), 'post_tag' );
+
+		$term = get_term_by( 'id', $this->factory->tag->create(), 'post_tag' );
+
 		$request  = new WP_REST_Request( 'DELETE', '/wp/v2/tags/' . $term->term_id );
 		$response = rest_get_server()->dispatch( $request );
 		$this->assertErrorResponse( 'rest_cannot_delete', $response, 403 );
@@ -1076,7 +1146,9 @@ class WP_Test_REST_Tags_Controller extends WP_Test_REST_Controller_Testcase {
 	 */
 	public function test_delete_item_with_delete_term_cap_granted() {
 		wp_set_current_user( self::$subscriber );
-		$term    = get_term_by( 'id', $this->factory->tag->create( array( 'name' => 'Deleted Tag' ) ), 'post_tag' );
+
+		$term = get_term_by( 'id', $this->factory->tag->create( array( 'name' => 'Deleted Tag' ) ), 'post_tag' );
+
 		$request = new WP_REST_Request( 'DELETE', '/wp/v2/tags/' . $term->term_id );
 		$request->set_param( 'force', true );
 
@@ -1084,10 +1156,10 @@ class WP_Test_REST_Tags_Controller extends WP_Test_REST_Controller_Testcase {
 		$response = rest_get_server()->dispatch( $request );
 		remove_filter( 'map_meta_cap', array( $this, 'grant_delete_term' ), 10, 2 );
 
-		$this->assertEquals( 200, $response->get_status() );
+		$this->assertSame( 200, $response->get_status() );
 		$data = $response->get_data();
 		$this->assertTrue( $data['deleted'] );
-		$this->assertEquals( 'Deleted Tag', $data['previous']['name'] );
+		$this->assertSame( 'Deleted Tag', $data['previous']['name'] );
 	}
 
 	public function grant_delete_term( $caps, $cap ) {
@@ -1102,7 +1174,9 @@ class WP_Test_REST_Tags_Controller extends WP_Test_REST_Controller_Testcase {
 	 */
 	public function test_delete_item_with_delete_term_cap_revoked() {
 		wp_set_current_user( self::$administrator );
-		$term    = get_term_by( 'id', $this->factory->tag->create( array( 'name' => 'Deleted Tag' ) ), 'post_tag' );
+
+		$term = get_term_by( 'id', $this->factory->tag->create( array( 'name' => 'Deleted Tag' ) ), 'post_tag' );
+
 		$request = new WP_REST_Request( 'DELETE', '/wp/v2/tags/' . $term->term_id );
 		$request->set_param( 'force', true );
 
@@ -1121,7 +1195,8 @@ class WP_Test_REST_Tags_Controller extends WP_Test_REST_Controller_Testcase {
 	}
 
 	public function test_prepare_item() {
-		$term     = get_term_by( 'id', $this->factory->tag->create(), 'post_tag' );
+		$term = get_term_by( 'id', $this->factory->tag->create(), 'post_tag' );
+
 		$request  = new WP_REST_Request( 'GET', '/wp/v2/tags/' . $term->term_id );
 		$response = rest_get_server()->dispatch( $request );
 		$data     = $response->get_data();
@@ -1135,7 +1210,7 @@ class WP_Test_REST_Tags_Controller extends WP_Test_REST_Controller_Testcase {
 		$request->set_param( '_fields', 'id,name' );
 		$term     = get_term_by( 'id', $this->factory->tag->create(), 'post_tag' );
 		$response = $endpoint->prepare_item_for_response( $term, $request );
-		$this->assertEquals(
+		$this->assertSame(
 			array(
 				'id',
 				'name',
@@ -1149,7 +1224,7 @@ class WP_Test_REST_Tags_Controller extends WP_Test_REST_Controller_Testcase {
 		$response   = rest_get_server()->dispatch( $request );
 		$data       = $response->get_data();
 		$properties = $data['schema']['properties'];
-		$this->assertEquals( 8, count( $properties ) );
+		$this->assertSame( 8, count( $properties ) );
 		$this->assertArrayHasKey( 'id', $properties );
 		$this->assertArrayHasKey( 'count', $properties );
 		$this->assertArrayHasKey( 'description', $properties );
@@ -1158,7 +1233,7 @@ class WP_Test_REST_Tags_Controller extends WP_Test_REST_Controller_Testcase {
 		$this->assertArrayHasKey( 'name', $properties );
 		$this->assertArrayHasKey( 'slug', $properties );
 		$this->assertArrayHasKey( 'taxonomy', $properties );
-		$this->assertEquals( array_keys( get_taxonomies() ), $properties['taxonomy']['enum'] );
+		$this->assertSame( array_keys( get_taxonomies() ), $properties['taxonomy']['enum'] );
 	}
 
 	public function test_get_item_schema_non_hierarchical() {
@@ -1193,11 +1268,11 @@ class WP_Test_REST_Tags_Controller extends WP_Test_REST_Controller_Testcase {
 		$response = rest_get_server()->dispatch( $request );
 		$data     = $response->get_data();
 		$this->assertArrayHasKey( 'my_custom_int', $data['schema']['properties'] );
-		$this->assertEquals( $schema, $data['schema']['properties']['my_custom_int'] );
+		$this->assertSame( $schema, $data['schema']['properties']['my_custom_int'] );
 
-		$tag_id  = $this->factory->tag->create();
-		$request = new WP_REST_Request( 'GET', '/wp/v2/tags/' . $tag_id );
+		$tag_id = $this->factory->tag->create();
 
+		$request  = new WP_REST_Request( 'GET', '/wp/v2/tags/' . $tag_id );
 		$response = rest_get_server()->dispatch( $request );
 		$this->assertArrayHasKey( 'my_custom_int', $response->data );
 
@@ -1224,7 +1299,9 @@ class WP_Test_REST_Tags_Controller extends WP_Test_REST_Controller_Testcase {
 		);
 
 		wp_set_current_user( self::$administrator );
+
 		$tag_id = $this->factory->tag->create();
+
 		// Check for error on update.
 		$request = new WP_REST_Request( 'POST', sprintf( '/wp/v2/tags/%d', $tag_id ) );
 		$request->set_body_params(
@@ -1265,7 +1342,7 @@ class WP_Test_REST_Tags_Controller extends WP_Test_REST_Controller_Testcase {
 		$response = rest_get_server()->dispatch( $request );
 		$found_2  = wp_list_pluck( $response->data, 'id' );
 
-		$this->assertEqualSets( $found_1, $found_2 );
+		$this->assertSameSets( $found_1, $found_2 );
 		$this->assertSame( $num_queries, $wpdb->num_queries );
 	}
 
@@ -1299,7 +1376,7 @@ class WP_Test_REST_Tags_Controller extends WP_Test_REST_Controller_Testcase {
 		$create = new WP_REST_Request( 'POST', '/wp/v2/tags' );
 		$create->set_param( 'name', 'My New Term' );
 		$response = rest_get_server()->dispatch( $create );
-		$this->assertEquals( 201, $response->get_status() );
+		$this->assertSame( 201, $response->get_status() );
 		$data = $response->get_data();
 		$this->assertArrayHasKey( $edit_field, $data );
 		$this->assertArrayNotHasKey( $view_field, $data );
@@ -1307,7 +1384,7 @@ class WP_Test_REST_Tags_Controller extends WP_Test_REST_Controller_Testcase {
 		$update = new WP_REST_Request( 'PUT', '/wp/v2/tags/' . $data['id'] );
 		$update->set_param( 'name', 'My Awesome New Term' );
 		$response = rest_get_server()->dispatch( $update );
-		$this->assertEquals( 200, $response->get_status() );
+		$this->assertSame( 200, $response->get_status() );
 		$data = $response->get_data();
 		$this->assertArrayHasKey( $edit_field, $data );
 		$this->assertArrayNotHasKey( $view_field, $data );
@@ -1330,31 +1407,31 @@ class WP_Test_REST_Tags_Controller extends WP_Test_REST_Controller_Testcase {
 	}
 
 	protected function check_get_taxonomy_terms_response( $response ) {
-		$this->assertEquals( 200, $response->get_status() );
+		$this->assertSame( 200, $response->get_status() );
 		$data = $response->get_data();
 		$args = array(
 			'hide_empty' => false,
 		);
 		$tags = get_terms( 'post_tag', $args );
-		$this->assertEquals( count( $tags ), count( $data ) );
-		$this->assertEquals( $tags[0]->term_id, $data[0]['id'] );
-		$this->assertEquals( $tags[0]->name, $data[0]['name'] );
-		$this->assertEquals( $tags[0]->slug, $data[0]['slug'] );
-		$this->assertEquals( $tags[0]->taxonomy, $data[0]['taxonomy'] );
-		$this->assertEquals( $tags[0]->description, $data[0]['description'] );
-		$this->assertEquals( $tags[0]->count, $data[0]['count'] );
+		$this->assertSame( count( $tags ), count( $data ) );
+		$this->assertSame( $tags[0]->term_id, $data[0]['id'] );
+		$this->assertSame( $tags[0]->name, $data[0]['name'] );
+		$this->assertSame( $tags[0]->slug, $data[0]['slug'] );
+		$this->assertSame( $tags[0]->taxonomy, $data[0]['taxonomy'] );
+		$this->assertSame( $tags[0]->description, $data[0]['description'] );
+		$this->assertSame( $tags[0]->count, $data[0]['count'] );
 	}
 
 	protected function check_taxonomy_term( $term, $data, $links ) {
-		$this->assertEquals( $term->term_id, $data['id'] );
-		$this->assertEquals( $term->name, $data['name'] );
-		$this->assertEquals( $term->slug, $data['slug'] );
-		$this->assertEquals( $term->description, $data['description'] );
-		$this->assertEquals( get_term_link( $term ), $data['link'] );
-		$this->assertEquals( $term->count, $data['count'] );
+		$this->assertSame( $term->term_id, $data['id'] );
+		$this->assertSame( $term->name, $data['name'] );
+		$this->assertSame( $term->slug, $data['slug'] );
+		$this->assertSame( $term->description, $data['description'] );
+		$this->assertSame( get_term_link( $term ), $data['link'] );
+		$this->assertSame( $term->count, $data['count'] );
 		$taxonomy = get_taxonomy( $term->taxonomy );
 		if ( $taxonomy->hierarchical ) {
-			$this->assertEquals( $term->parent, $data['parent'] );
+			$this->assertSame( $term->parent, $data['parent'] );
 		} else {
 			$this->assertFalse( isset( $data['parent'] ) );
 		}
@@ -1367,14 +1444,14 @@ class WP_Test_REST_Tags_Controller extends WP_Test_REST_Controller_Testcase {
 		if ( $taxonomy->hierarchical && $term->parent ) {
 			$expected_links[] = 'up';
 		}
-		$this->assertEqualSets( $expected_links, array_keys( $links ) );
+		$this->assertSameSets( $expected_links, array_keys( $links ) );
 		$this->assertContains( 'wp/v2/taxonomies/' . $term->taxonomy, $links['about'][0]['href'] );
-		$this->assertEquals( add_query_arg( 'tags', $term->term_id, rest_url( 'wp/v2/posts' ) ), $links['https://api.w.org/post_type'][0]['href'] );
+		$this->assertSame( add_query_arg( 'tags', $term->term_id, rest_url( 'wp/v2/posts' ) ), $links['https://api.w.org/post_type'][0]['href'] );
 	}
 
 	protected function check_get_taxonomy_term_response( $response, $id ) {
 
-		$this->assertEquals( 200, $response->get_status() );
+		$this->assertSame( 200, $response->get_status() );
 
 		$data = $response->get_data();
 		$tag  = get_term( $id, 'post_tag' );
diff --git a/tests/rest-api/rest-taxonomies-controller.php b/tests/rest-api/rest-taxonomies-controller.php
index 7b367b09a1..14c3c955d8 100644
--- a/tests/rest-api/rest-taxonomies-controller.php
+++ b/tests/rest-api/rest-taxonomies-controller.php
@@ -33,18 +33,18 @@ class WP_Test_REST_Taxonomies_Controller extends WP_Test_REST_Controller_Testcas
 	}
 
 	public function test_context_param() {
-		// Collection
+		// Collection.
 		$request  = new WP_REST_Request( 'OPTIONS', '/wp/v2/taxonomies' );
 		$response = rest_get_server()->dispatch( $request );
 		$data     = $response->get_data();
-		$this->assertEquals( 'view', $data['endpoints'][0]['args']['context']['default'] );
-		$this->assertEqualSets( array( 'view', 'edit', 'embed' ), $data['endpoints'][0]['args']['context']['enum'] );
-		// Single
+		$this->assertSame( 'view', $data['endpoints'][0]['args']['context']['default'] );
+		$this->assertSameSets( array( 'view', 'edit', 'embed' ), $data['endpoints'][0]['args']['context']['enum'] );
+		// Single.
 		$request  = new WP_REST_Request( 'OPTIONS', '/wp/v2/taxonomies/post_tag' );
 		$response = rest_get_server()->dispatch( $request );
 		$data     = $response->get_data();
-		$this->assertEquals( 'view', $data['endpoints'][0]['args']['context']['default'] );
-		$this->assertEqualSets( array( 'view', 'edit', 'embed' ), $data['endpoints'][0]['args']['context']['enum'] );
+		$this->assertSame( 'view', $data['endpoints'][0]['args']['context']['default'] );
+		$this->assertSameSets( array( 'view', 'edit', 'embed' ), $data['endpoints'][0]['args']['context']['enum'] );
 	}
 
 	public function test_get_items() {
@@ -52,14 +52,14 @@ class WP_Test_REST_Taxonomies_Controller extends WP_Test_REST_Controller_Testcas
 		$response   = rest_get_server()->dispatch( $request );
 		$data       = $response->get_data();
 		$taxonomies = $this->get_public_taxonomies( get_taxonomies( '', 'objects' ) );
-		$this->assertEquals( count( $taxonomies ), count( $data ) );
-		$this->assertEquals( 'Categories', $data['category']['name'] );
-		$this->assertEquals( 'category', $data['category']['slug'] );
-		$this->assertEquals( true, $data['category']['hierarchical'] );
-		$this->assertEquals( 'Tags', $data['post_tag']['name'] );
-		$this->assertEquals( 'post_tag', $data['post_tag']['slug'] );
-		$this->assertEquals( false, $data['post_tag']['hierarchical'] );
-		$this->assertEquals( 'tags', $data['post_tag']['rest_base'] );
+		$this->assertSame( count( $taxonomies ), count( $data ) );
+		$this->assertSame( 'Categories', $data['category']['name'] );
+		$this->assertSame( 'category', $data['category']['slug'] );
+		$this->assertTrue( $data['category']['hierarchical'] );
+		$this->assertSame( 'Tags', $data['post_tag']['name'] );
+		$this->assertSame( 'post_tag', $data['post_tag']['slug'] );
+		$this->assertFalse( $data['post_tag']['hierarchical'] );
+		$this->assertSame( 'tags', $data['post_tag']['rest_base'] );
 	}
 
 	public function test_get_items_context_edit() {
@@ -69,14 +69,14 @@ class WP_Test_REST_Taxonomies_Controller extends WP_Test_REST_Controller_Testcas
 		$response   = rest_get_server()->dispatch( $request );
 		$data       = $response->get_data();
 		$taxonomies = $this->get_public_taxonomies( get_taxonomies( '', 'objects' ) );
-		$this->assertEquals( count( $taxonomies ), count( $data ) );
-		$this->assertEquals( 'Categories', $data['category']['name'] );
-		$this->assertEquals( 'category', $data['category']['slug'] );
-		$this->assertEquals( true, $data['category']['hierarchical'] );
-		$this->assertEquals( 'Tags', $data['post_tag']['name'] );
-		$this->assertEquals( 'post_tag', $data['post_tag']['slug'] );
-		$this->assertEquals( false, $data['post_tag']['hierarchical'] );
-		$this->assertEquals( 'tags', $data['post_tag']['rest_base'] );
+		$this->assertSame( count( $taxonomies ), count( $data ) );
+		$this->assertSame( 'Categories', $data['category']['name'] );
+		$this->assertSame( 'category', $data['category']['slug'] );
+		$this->assertTrue( $data['category']['hierarchical'] );
+		$this->assertSame( 'Tags', $data['post_tag']['name'] );
+		$this->assertSame( 'post_tag', $data['post_tag']['slug'] );
+		$this->assertFalse( $data['post_tag']['hierarchical'] );
+		$this->assertSame( 'tags', $data['post_tag']['rest_base'] );
 	}
 
 	public function test_get_items_invalid_permission_for_context() {
@@ -98,9 +98,9 @@ class WP_Test_REST_Taxonomies_Controller extends WP_Test_REST_Controller_Testcas
 		$request = new WP_REST_Request( 'GET', '/wp/v2/taxonomies' );
 		$request->set_param( 'type', 'wingding' );
 		$response = rest_get_server()->dispatch( $request );
-		$this->assertEquals( 200, $response->get_status() );
+		$this->assertSame( 200, $response->get_status() );
 		$data = $response->get_data();
-		$this->assertEquals( '{}', json_encode( $data ) );
+		$this->assertSame( '{}', json_encode( $data ) );
 	}
 
 	public function test_get_item() {
@@ -153,21 +153,21 @@ class WP_Test_REST_Taxonomies_Controller extends WP_Test_REST_Controller_Testcas
 		/** Taxonomies can't be created */
 		$request  = new WP_REST_Request( 'POST', '/wp/v2/taxonomies' );
 		$response = rest_get_server()->dispatch( $request );
-		$this->assertEquals( 404, $response->get_status() );
+		$this->assertSame( 404, $response->get_status() );
 	}
 
 	public function test_update_item() {
 		/** Taxonomies can't be updated */
 		$request  = new WP_REST_Request( 'POST', '/wp/v2/taxonomies/category' );
 		$response = rest_get_server()->dispatch( $request );
-		$this->assertEquals( 404, $response->get_status() );
+		$this->assertSame( 404, $response->get_status() );
 	}
 
 	public function test_delete_item() {
 		/** Taxonomies can't be deleted */
 		$request  = new WP_REST_Request( 'DELETE', '/wp/v2/taxonomies/category' );
 		$response = rest_get_server()->dispatch( $request );
-		$this->assertEquals( 404, $response->get_status() );
+		$this->assertSame( 404, $response->get_status() );
 	}
 
 	public function test_prepare_item() {
@@ -186,7 +186,7 @@ class WP_Test_REST_Taxonomies_Controller extends WP_Test_REST_Controller_Testcas
 		$request->set_param( 'context', 'edit' );
 		$request->set_param( '_fields', 'id,name' );
 		$response = $endpoint->prepare_item_for_response( $tax, $request );
-		$this->assertEquals(
+		$this->assertSame(
 			array(
 				// 'id' doesn't exist in this context.
 				'name',
@@ -208,10 +208,10 @@ class WP_Test_REST_Taxonomies_Controller extends WP_Test_REST_Controller_Testcas
 
 		$types = $response->get_data()['types'];
 		$this->assertArrayHasKey( 0, $types );
-		$this->assertEquals( 'post', $types[0] );
+		$this->assertSame( 'post', $types[0] );
 		$this->assertArrayHasKey( 1, $types );
-		$this->assertEquals( 'attachment', $types[1] );
-		$this->assertEquals( 2, count( $types ) );
+		$this->assertSame( 'attachment', $types[1] );
+		$this->assertSame( 2, count( $types ) );
 	}
 
 	public function test_get_item_schema() {
@@ -219,7 +219,7 @@ class WP_Test_REST_Taxonomies_Controller extends WP_Test_REST_Controller_Testcas
 		$response   = rest_get_server()->dispatch( $request );
 		$data       = $response->get_data();
 		$properties = $data['schema']['properties'];
-		$this->assertEquals( 10, count( $properties ) );
+		$this->assertSame( 10, count( $properties ) );
 		$this->assertArrayHasKey( 'capabilities', $properties );
 		$this->assertArrayHasKey( 'description', $properties );
 		$this->assertArrayHasKey( 'hierarchical', $properties );
@@ -246,29 +246,29 @@ class WP_Test_REST_Taxonomies_Controller extends WP_Test_REST_Controller_Testcas
 	 * Utility function to filter down to only public taxonomies
 	 */
 	private function get_public_taxonomies( $taxonomies ) {
-		// Pass through array_values to re-index after filtering
+		// Pass through array_values to re-index after filtering.
 		return array_values( array_filter( $taxonomies, array( $this, 'is_public' ) ) );
 	}
 
 	protected function check_taxonomy_object( $context, $tax_obj, $data, $links ) {
-		$this->assertEquals( $tax_obj->label, $data['name'] );
-		$this->assertEquals( $tax_obj->name, $data['slug'] );
-		$this->assertEquals( $tax_obj->description, $data['description'] );
-		$this->assertEquals( $tax_obj->hierarchical, $data['hierarchical'] );
-		$this->assertEquals( $tax_obj->rest_base, $data['rest_base'] );
-		$this->assertEquals( rest_url( 'wp/v2/taxonomies' ), $links['collection'][0]['href'] );
+		$this->assertSame( $tax_obj->label, $data['name'] );
+		$this->assertSame( $tax_obj->name, $data['slug'] );
+		$this->assertSame( $tax_obj->description, $data['description'] );
+		$this->assertSame( $tax_obj->hierarchical, $data['hierarchical'] );
+		$this->assertSame( $tax_obj->rest_base, $data['rest_base'] );
+		$this->assertSame( rest_url( 'wp/v2/taxonomies' ), $links['collection'][0]['href'] );
 		$this->assertArrayHasKey( 'https://api.w.org/items', $links );
 		if ( 'edit' === $context ) {
-			$this->assertEquals( $tax_obj->cap, $data['capabilities'] );
-			$this->assertEquals( $tax_obj->labels, $data['labels'] );
-			$this->assertEquals( $tax_obj->show_tagcloud, $data['show_cloud'] );
-
-			$this->assertEquals( $tax_obj->public, $data['visibility']['public'] );
-			$this->assertEquals( $tax_obj->publicly_queryable, $data['visibility']['publicly_queryable'] );
-			$this->assertEquals( $tax_obj->show_admin_column, $data['visibility']['show_admin_column'] );
-			$this->assertEquals( $tax_obj->show_in_nav_menus, $data['visibility']['show_in_nav_menus'] );
-			$this->assertEquals( $tax_obj->show_in_quick_edit, $data['visibility']['show_in_quick_edit'] );
-			$this->assertEquals( $tax_obj->show_ui, $data['visibility']['show_ui'] );
+			$this->assertSame( $tax_obj->cap, $data['capabilities'] );
+			$this->assertSame( $tax_obj->labels, $data['labels'] );
+			$this->assertSame( $tax_obj->show_tagcloud, $data['show_cloud'] );
+
+			$this->assertSame( $tax_obj->public, $data['visibility']['public'] );
+			$this->assertSame( $tax_obj->publicly_queryable, $data['visibility']['publicly_queryable'] );
+			$this->assertSame( $tax_obj->show_admin_column, $data['visibility']['show_admin_column'] );
+			$this->assertSame( $tax_obj->show_in_nav_menus, $data['visibility']['show_in_nav_menus'] );
+			$this->assertSame( $tax_obj->show_in_quick_edit, $data['visibility']['show_in_quick_edit'] );
+			$this->assertSame( $tax_obj->show_ui, $data['visibility']['show_ui'] );
 		} else {
 			$this->assertFalse( isset( $data['capabilities'] ) );
 			$this->assertFalse( isset( $data['labels'] ) );
@@ -278,17 +278,45 @@ class WP_Test_REST_Taxonomies_Controller extends WP_Test_REST_Controller_Testcas
 	}
 
 	protected function check_taxonomy_object_response( $context, $response ) {
-		$this->assertEquals( 200, $response->get_status() );
+		$this->assertSame( 200, $response->get_status() );
 		$data     = $response->get_data();
 		$category = get_taxonomy( 'category' );
 		$this->check_taxonomy_object( $context, $category, $data, $response->get_links() );
 	}
 
 	protected function check_taxonomies_for_type_response( $type, $response ) {
-		$this->assertEquals( 200, $response->get_status() );
+		$this->assertSame( 200, $response->get_status() );
 		$data       = $response->get_data();
 		$taxonomies = $this->get_public_taxonomies( get_object_taxonomies( $type, 'objects' ) );
-		$this->assertEquals( count( $taxonomies ), count( $data ) );
+		$this->assertSame( count( $taxonomies ), count( $data ) );
+	}
+
+	/**
+	 * @ticket 49116
+	 */
+	public function test_get_for_taxonomy_reuses_same_instance() {
+		$this->assertSame(
+			get_taxonomy( 'category' )->get_rest_controller(),
+			get_taxonomy( 'category' )->get_rest_controller()
+		);
+	}
+
+	/**
+	 * @ticket 49116
+	 */
+	public function test_get_for_taxonomy_returns_terms_controller_if_custom_class_not_specified() {
+		register_taxonomy(
+			'test',
+			'post',
+			array(
+				'show_in_rest' => true,
+			)
+		);
+
+		$this->assertInstanceOf(
+			WP_REST_Terms_Controller::class,
+			get_taxonomy( 'test' )->get_rest_controller()
+		);
 	}
 
 }
diff --git a/tests/rest-api/rest-term-meta-fields.php b/tests/rest-api/rest-term-meta-fields.php
index 51e392edc8..9038e01998 100644
--- a/tests/rest-api/rest-term-meta-fields.php
+++ b/tests/rest-api/rest-term-meta-fields.php
@@ -214,14 +214,14 @@ class WP_Test_REST_Term_Meta_Fields extends WP_Test_REST_TestCase {
 		$request  = new WP_REST_Request( 'GET', sprintf( '/wp/v2/categories/%d', self::$category_id ) );
 		$response = rest_get_server()->dispatch( $request );
 
-		$this->assertEquals( 200, $response->get_status() );
+		$this->assertSame( 200, $response->get_status() );
 
 		$data = $response->get_data();
 		$this->assertArrayHasKey( 'meta', $data );
 
 		$meta = (array) $data['meta'];
 		$this->assertArrayHasKey( 'test_single', $meta );
-		$this->assertEquals( 'testvalue', $meta['test_single'] );
+		$this->assertSame( 'testvalue', $meta['test_single'] );
 	}
 
 	/**
@@ -232,7 +232,7 @@ class WP_Test_REST_Term_Meta_Fields extends WP_Test_REST_TestCase {
 		$request = new WP_REST_Request( 'GET', sprintf( '/wp/v2/categories/%d', self::$category_id ) );
 
 		$response = rest_get_server()->dispatch( $request );
-		$this->assertEquals( 200, $response->get_status() );
+		$this->assertSame( 200, $response->get_status() );
 
 		$data = $response->get_data();
 		$meta = (array) $data['meta'];
@@ -244,7 +244,7 @@ class WP_Test_REST_Term_Meta_Fields extends WP_Test_REST_TestCase {
 		add_term_meta( self::$category_id, 'test_multi', 'value2' );
 
 		$response = rest_get_server()->dispatch( $request );
-		$this->assertEquals( 200, $response->get_status() );
+		$this->assertSame( 200, $response->get_status() );
 		$data = $response->get_data();
 		$meta = (array) $data['meta'];
 		$this->assertContains( 'value1', $meta['test_multi'] );
@@ -259,7 +259,7 @@ class WP_Test_REST_Term_Meta_Fields extends WP_Test_REST_TestCase {
 		$request = new WP_REST_Request( 'GET', sprintf( '/wp/v2/categories/%d', self::$category_id ) );
 
 		$response = rest_get_server()->dispatch( $request );
-		$this->assertEquals( 200, $response->get_status() );
+		$this->assertSame( 200, $response->get_status() );
 
 		$data = $response->get_data();
 		$meta = (array) $data['meta'];
@@ -274,7 +274,7 @@ class WP_Test_REST_Term_Meta_Fields extends WP_Test_REST_TestCase {
 		$request = new WP_REST_Request( 'GET', sprintf( '/wp/v2/categories/%d', self::$category_id ) );
 
 		$response = rest_get_server()->dispatch( $request );
-		$this->assertEquals( 200, $response->get_status() );
+		$this->assertSame( 200, $response->get_status() );
 
 		$data = $response->get_data();
 		$meta = (array) $data['meta'];
@@ -289,7 +289,7 @@ class WP_Test_REST_Term_Meta_Fields extends WP_Test_REST_TestCase {
 		$request = new WP_REST_Request( 'GET', sprintf( '/wp/v2/categories/%d', self::$category_id ) );
 
 		$response = rest_get_server()->dispatch( $request );
-		$this->assertEquals( 200, $response->get_status() );
+		$this->assertSame( 200, $response->get_status() );
 
 		$data = $response->get_data();
 		$meta = (array) $data['meta'];
@@ -336,7 +336,7 @@ class WP_Test_REST_Term_Meta_Fields extends WP_Test_REST_TestCase {
 
 		$request  = new WP_REST_Request( 'GET', sprintf( '/wp/v2/categories/%d', self::$category_id ) );
 		$response = rest_get_server()->dispatch( $request );
-		$this->assertEquals( 200, $response->get_status() );
+		$this->assertSame( 200, $response->get_status() );
 
 		$data = $response->get_data();
 		$meta = (array) $data['meta'];
@@ -351,7 +351,7 @@ class WP_Test_REST_Term_Meta_Fields extends WP_Test_REST_TestCase {
 
 		$this->assertArrayHasKey( 'test_bool', $meta );
 		$this->assertInternalType( 'boolean', $meta['test_bool'] );
-		$this->assertSame( true, $meta['test_bool'] );
+		$this->assertTrue( $meta['test_bool'] );
 	}
 
 	public function test_get_value_custom_name() {
@@ -360,14 +360,14 @@ class WP_Test_REST_Term_Meta_Fields extends WP_Test_REST_TestCase {
 		$request  = new WP_REST_Request( 'GET', sprintf( '/wp/v2/categories/%d', self::$category_id ) );
 		$response = rest_get_server()->dispatch( $request );
 
-		$this->assertEquals( 200, $response->get_status() );
+		$this->assertSame( 200, $response->get_status() );
 
 		$data = $response->get_data();
 		$this->assertArrayHasKey( 'meta', $data );
 
 		$meta = (array) $data['meta'];
 		$this->assertArrayHasKey( 'new_name', $meta );
-		$this->assertEquals( 'janet', $meta['new_name'] );
+		$this->assertSame( 'janet', $meta['new_name'] );
 	}
 
 	/**
@@ -389,17 +389,17 @@ class WP_Test_REST_Term_Meta_Fields extends WP_Test_REST_TestCase {
 		$request->set_body_params( $data );
 
 		$response = rest_get_server()->dispatch( $request );
-		$this->assertEquals( 200, $response->get_status() );
+		$this->assertSame( 200, $response->get_status() );
 
 		$meta = get_term_meta( self::$category_id, 'test_single', false );
 		$this->assertNotEmpty( $meta );
 		$this->assertCount( 1, $meta );
-		$this->assertEquals( 'test_value', $meta[0] );
+		$this->assertSame( 'test_value', $meta[0] );
 
 		$data = $response->get_data();
 		$meta = (array) $data['meta'];
 		$this->assertArrayHasKey( 'test_single', $meta );
-		$this->assertEquals( 'test_value', $meta['test_single'] );
+		$this->assertSame( 'test_value', $meta['test_single'] );
 	}
 
 	/**
@@ -408,7 +408,7 @@ class WP_Test_REST_Term_Meta_Fields extends WP_Test_REST_TestCase {
 	public function test_set_duplicate_single_value() {
 		// Start with an existing metakey and value.
 		$values = update_term_meta( self::$category_id, 'test_single', 'test_value' );
-		$this->assertEquals( 'test_value', get_term_meta( self::$category_id, 'test_single', true ) );
+		$this->assertSame( 'test_value', get_term_meta( self::$category_id, 'test_single', true ) );
 
 		$this->grant_write_permission();
 
@@ -421,16 +421,16 @@ class WP_Test_REST_Term_Meta_Fields extends WP_Test_REST_TestCase {
 		$request->set_body_params( $data );
 
 		$response = rest_get_server()->dispatch( $request );
-		$this->assertEquals( 200, $response->get_status() );
+		$this->assertSame( 200, $response->get_status() );
 
 		$meta = get_term_meta( self::$category_id, 'test_single', true );
 		$this->assertNotEmpty( $meta );
-		$this->assertEquals( 'test_value', $meta );
+		$this->assertSame( 'test_value', $meta );
 
 		$data = $response->get_data();
 		$meta = (array) $data['meta'];
 		$this->assertArrayHasKey( 'test_single', $meta );
-		$this->assertEquals( 'test_value', $meta['test_single'] );
+		$this->assertSame( 'test_value', $meta['test_single'] );
 	}
 
 	/**
@@ -539,12 +539,12 @@ class WP_Test_REST_Term_Meta_Fields extends WP_Test_REST_TestCase {
 		$request->set_body_params( $data );
 
 		$response = rest_get_server()->dispatch( $request );
-		$this->assertEquals( 200, $response->get_status() );
+		$this->assertSame( 200, $response->get_status() );
 
 		$meta = get_term_meta( self::$category_id, 'test_multi', false );
 		$this->assertNotEmpty( $meta );
 		$this->assertCount( 1, $meta );
-		$this->assertEquals( 'val1', $meta[0] );
+		$this->assertSame( 'val1', $meta[0] );
 
 		// Add another value.
 		$data = array(
@@ -555,7 +555,7 @@ class WP_Test_REST_Term_Meta_Fields extends WP_Test_REST_TestCase {
 		$request->set_body_params( $data );
 
 		$response = rest_get_server()->dispatch( $request );
-		$this->assertEquals( 200, $response->get_status() );
+		$this->assertSame( 200, $response->get_status() );
 
 		$meta = get_term_meta( self::$category_id, 'test_multi', false );
 		$this->assertNotEmpty( $meta );
@@ -583,7 +583,7 @@ class WP_Test_REST_Term_Meta_Fields extends WP_Test_REST_TestCase {
 		$request->set_body_params( $data );
 
 		$response = rest_get_server()->dispatch( $request );
-		$this->assertEquals( 200, $response->get_status() );
+		$this->assertSame( 200, $response->get_status() );
 
 		$meta = get_term_meta( self::$category_id, 'test_multi', false );
 		$this->assertNotEmpty( $meta );
@@ -690,7 +690,7 @@ class WP_Test_REST_Term_Meta_Fields extends WP_Test_REST_TestCase {
 
 		$response = rest_get_server()->dispatch( $request );
 		$data     = $response->get_data();
-		$this->assertEquals( 1, $data['meta']['my_meta_key'] );
+		$this->assertSame( 1, $data['meta']['my_meta_key'] );
 	}
 
 	public function test_set_value_csv() {
@@ -716,7 +716,7 @@ class WP_Test_REST_Term_Meta_Fields extends WP_Test_REST_TestCase {
 
 		$response = rest_get_server()->dispatch( $request );
 		$data     = $response->get_data();
-		$this->assertEquals( array( 1, 2, 3 ), $data['meta']['my_meta_key'] );
+		$this->assertSame( array( 1, 2, 3 ), $data['meta']['my_meta_key'] );
 	}
 
 	/**
@@ -788,7 +788,7 @@ class WP_Test_REST_Term_Meta_Fields extends WP_Test_REST_TestCase {
 		$request->set_body_params( $data );
 
 		$response = rest_get_server()->dispatch( $request );
-		$this->assertEquals( 200, $response->get_status() );
+		$this->assertSame( 200, $response->get_status() );
 
 		$meta = get_term_meta( self::$category_id, 'test_custom_schema', false );
 		$this->assertNotEmpty( $meta );
@@ -817,7 +817,7 @@ class WP_Test_REST_Term_Meta_Fields extends WP_Test_REST_TestCase {
 		$request->set_body_params( $data );
 
 		$response = rest_get_server()->dispatch( $request );
-		$this->assertEquals( 200, $response->get_status() );
+		$this->assertSame( 200, $response->get_status() );
 
 		$meta = get_term_meta( self::$category_id, 'test_custom_schema_multi', false );
 		$this->assertNotEmpty( $meta );
@@ -833,7 +833,7 @@ class WP_Test_REST_Term_Meta_Fields extends WP_Test_REST_TestCase {
 		$request->set_body_params( $data );
 
 		$response = rest_get_server()->dispatch( $request );
-		$this->assertEquals( 200, $response->get_status() );
+		$this->assertSame( 200, $response->get_status() );
 
 		$meta = get_term_meta( self::$category_id, 'test_custom_schema_multi', false );
 		$this->assertNotEmpty( $meta );
@@ -861,17 +861,17 @@ class WP_Test_REST_Term_Meta_Fields extends WP_Test_REST_TestCase {
 		$request->set_body_params( $data );
 
 		$response = rest_get_server()->dispatch( $request );
-		$this->assertEquals( 200, $response->get_status() );
+		$this->assertSame( 200, $response->get_status() );
 
 		$meta = get_term_meta( self::$category_id, 'test_custom_name', false );
 		$this->assertNotEmpty( $meta );
 		$this->assertCount( 1, $meta );
-		$this->assertEquals( 'janet', $meta[0] );
+		$this->assertSame( 'janet', $meta[0] );
 
 		$data = $response->get_data();
 		$meta = (array) $data['meta'];
 		$this->assertArrayHasKey( 'new_name', $meta );
-		$this->assertEquals( 'janet', $meta['new_name'] );
+		$this->assertSame( 'janet', $meta['new_name'] );
 	}
 
 	public function test_set_value_custom_name_multiple() {
@@ -890,12 +890,12 @@ class WP_Test_REST_Term_Meta_Fields extends WP_Test_REST_TestCase {
 		$request->set_body_params( $data );
 
 		$response = rest_get_server()->dispatch( $request );
-		$this->assertEquals( 200, $response->get_status() );
+		$this->assertSame( 200, $response->get_status() );
 
 		$meta = get_term_meta( self::$category_id, 'test_custom_name_multi', false );
 		$this->assertNotEmpty( $meta );
 		$this->assertCount( 1, $meta );
-		$this->assertEquals( 'janet', $meta[0] );
+		$this->assertSame( 'janet', $meta[0] );
 
 		// Add another value.
 		$data = array(
@@ -906,7 +906,7 @@ class WP_Test_REST_Term_Meta_Fields extends WP_Test_REST_TestCase {
 		$request->set_body_params( $data );
 
 		$response = rest_get_server()->dispatch( $request );
-		$this->assertEquals( 200, $response->get_status() );
+		$this->assertSame( 200, $response->get_status() );
 
 		$meta = get_term_meta( self::$category_id, 'test_custom_name_multi', false );
 		$this->assertNotEmpty( $meta );
@@ -938,11 +938,11 @@ class WP_Test_REST_Term_Meta_Fields extends WP_Test_REST_TestCase {
 
 		// The meta value should not have changed.
 		$current_value = get_term_meta( self::$category_id, 'test_single', true );
-		$this->assertEquals( 'So I tied an onion to my belt, which was the style at the time.', $current_value );
+		$this->assertSame( 'So I tied an onion to my belt, which was the style at the time.', $current_value );
 
 		// Ensure the term name update was not processed.
 		$term_updated = get_term( self::$category_id );
-		$this->assertEquals( $term_original->name, $term_updated->name );
+		$this->assertSame( $term_original->name, $term_updated->name );
 	}
 
 	/**
@@ -967,17 +967,17 @@ class WP_Test_REST_Term_Meta_Fields extends WP_Test_REST_TestCase {
 
 		// The meta value should not have changed.
 		$current_value = get_term_meta( self::$category_id, 'test_single', true );
-		$this->assertEquals( 'Now, to take the ferry cost a nickel, and in those days, nickels had pictures of bumblebees on them.', $current_value );
+		$this->assertSame( 'Now, to take the ferry cost a nickel, and in those days, nickels had pictures of bumblebees on them.', $current_value );
 
 		// Ensure the term name update was not processed.
 		$term_updated = get_term( self::$category_id );
-		$this->assertEquals( $term_original->name, $term_updated->name );
+		$this->assertSame( $term_original->name, $term_updated->name );
 	}
 
 	public function test_remove_multi_value_db_error() {
 		add_term_meta( self::$category_id, 'test_multi', 'val1' );
 		$values = get_term_meta( self::$category_id, 'test_multi', false );
-		$this->assertEquals( array( 'val1' ), $values );
+		$this->assertSame( array( 'val1' ), $values );
 
 		$this->grant_write_permission();
 
@@ -1008,7 +1008,7 @@ class WP_Test_REST_Term_Meta_Fields extends WP_Test_REST_TestCase {
 	public function test_delete_value() {
 		add_term_meta( self::$category_id, 'test_single', 'val1' );
 		$current = get_term_meta( self::$category_id, 'test_single', true );
-		$this->assertEquals( 'val1', $current );
+		$this->assertSame( 'val1', $current );
 
 		$this->grant_write_permission();
 
@@ -1021,7 +1021,7 @@ class WP_Test_REST_Term_Meta_Fields extends WP_Test_REST_TestCase {
 		$request->set_body_params( $data );
 
 		$response = rest_get_server()->dispatch( $request );
-		$this->assertEquals( 200, $response->get_status() );
+		$this->assertSame( 200, $response->get_status() );
 
 		$meta = get_term_meta( self::$category_id, 'test_single', false );
 		$this->assertEmpty( $meta );
@@ -1033,7 +1033,7 @@ class WP_Test_REST_Term_Meta_Fields extends WP_Test_REST_TestCase {
 	public function test_delete_value_blocked() {
 		add_term_meta( self::$category_id, 'test_bad_auth', 'val1' );
 		$current = get_term_meta( self::$category_id, 'test_bad_auth', true );
-		$this->assertEquals( 'val1', $current );
+		$this->assertSame( 'val1', $current );
 
 		$this->grant_write_permission();
 
@@ -1049,7 +1049,7 @@ class WP_Test_REST_Term_Meta_Fields extends WP_Test_REST_TestCase {
 		$this->assertErrorResponse( 'rest_cannot_delete', $response, 403 );
 
 		$meta = get_term_meta( self::$category_id, 'test_bad_auth', true );
-		$this->assertEquals( 'val1', $meta );
+		$this->assertSame( 'val1', $meta );
 	}
 
 	/**
@@ -1058,7 +1058,7 @@ class WP_Test_REST_Term_Meta_Fields extends WP_Test_REST_TestCase {
 	public function test_delete_value_db_error() {
 		add_term_meta( self::$category_id, 'test_single', 'val1' );
 		$current = get_term_meta( self::$category_id, 'test_single', true );
-		$this->assertEquals( 'val1', $current );
+		$this->assertSame( 'val1', $current );
 
 		$this->grant_write_permission();
 
@@ -1087,7 +1087,7 @@ class WP_Test_REST_Term_Meta_Fields extends WP_Test_REST_TestCase {
 	public function test_delete_value_custom_name() {
 		add_term_meta( self::$category_id, 'test_custom_name', 'janet' );
 		$current = get_term_meta( self::$category_id, 'test_custom_name', true );
-		$this->assertEquals( 'janet', $current );
+		$this->assertSame( 'janet', $current );
 
 		$this->grant_write_permission();
 
@@ -1100,7 +1100,7 @@ class WP_Test_REST_Term_Meta_Fields extends WP_Test_REST_TestCase {
 		$request->set_body_params( $data );
 
 		$response = rest_get_server()->dispatch( $request );
-		$this->assertEquals( 200, $response->get_status() );
+		$this->assertSame( 200, $response->get_status() );
 
 		$meta = get_term_meta( self::$category_id, 'test_custom_name', false );
 		$this->assertEmpty( $meta );
@@ -1117,15 +1117,15 @@ class WP_Test_REST_Term_Meta_Fields extends WP_Test_REST_TestCase {
 		$meta_schema = $schema['properties']['meta']['properties'];
 
 		$this->assertArrayHasKey( 'test_single', $meta_schema );
-		$this->assertEquals( 'string', $meta_schema['test_single']['type'] );
+		$this->assertSame( 'string', $meta_schema['test_single']['type'] );
 
 		$this->assertArrayHasKey( 'test_multi', $meta_schema );
-		$this->assertEquals( 'array', $meta_schema['test_multi']['type'] );
+		$this->assertSame( 'array', $meta_schema['test_multi']['type'] );
 		$this->assertArrayHasKey( 'items', $meta_schema['test_multi'] );
-		$this->assertEquals( 'string', $meta_schema['test_multi']['items']['type'] );
+		$this->assertSame( 'string', $meta_schema['test_multi']['items']['type'] );
 
 		$this->assertArrayHasKey( 'test_custom_schema', $meta_schema );
-		$this->assertEquals( 'number', $meta_schema['test_custom_schema']['type'] );
+		$this->assertSame( 'number', $meta_schema['test_custom_schema']['type'] );
 
 		$this->assertArrayNotHasKey( 'test_no_rest', $meta_schema );
 		$this->assertArrayNotHasKey( 'test_rest_disabled', $meta_schema );
@@ -1152,7 +1152,7 @@ class WP_Test_REST_Term_Meta_Fields extends WP_Test_REST_TestCase {
 		$request  = new WP_REST_Request( 'GET', sprintf( '/wp/v2/%s/%d', $endpoint, $term_id ) );
 		$response = rest_get_server()->dispatch( $request );
 
-		$this->assertEquals( 200, $response->get_status() );
+		$this->assertSame( 200, $response->get_status() );
 
 		$data = $response->get_data();
 
@@ -1166,7 +1166,7 @@ class WP_Test_REST_Term_Meta_Fields extends WP_Test_REST_TestCase {
 			}
 
 			$this->assertArrayHasKey( $meta_key, $data['meta'] );
-			$this->assertEquals( $expected_value, $data['meta'][ $meta_key ] );
+			$this->assertSame( $expected_value, $data['meta'][ $meta_key ] );
 		} else {
 			$this->assertArrayNotHasKey( $meta_key, $data['meta'] );
 		}
@@ -1212,12 +1212,12 @@ class WP_Test_REST_Term_Meta_Fields extends WP_Test_REST_TestCase {
 
 		$response = rest_get_server()->dispatch( $request );
 		if ( ! $can_write ) {
-			$this->assertEquals( 403, $response->get_status() );
+			$this->assertSame( 403, $response->get_status() );
 			$this->assertEmpty( get_term_meta( $term_id, $meta_key, $single ) );
 			return;
 		}
 
-		$this->assertEquals( 200, $response->get_status() );
+		$this->assertSame( 200, $response->get_status() );
 
 		$data = $response->get_data();
 		$this->assertArrayHasKey( 'meta', $data );
@@ -1229,9 +1229,9 @@ class WP_Test_REST_Term_Meta_Fields extends WP_Test_REST_TestCase {
 				$expected_value = array( $expected_value );
 			}
 
-			$this->assertEquals( $expected_value, get_term_meta( $term_id, $meta_key, $single ) );
+			$this->assertSame( $expected_value, get_term_meta( $term_id, $meta_key, $single ) );
 			$this->assertArrayHasKey( $meta_key, $data['meta'] );
-			$this->assertEquals( $expected_value, $data['meta'][ $meta_key ] );
+			$this->assertSame( $expected_value, $data['meta'][ $meta_key ] );
 		} else {
 			$this->assertEmpty( get_term_meta( $term_id, $meta_key, $single ) );
 			$this->assertArrayNotHasKey( $meta_key, $data['meta'] );
@@ -1255,6 +1255,36 @@ class WP_Test_REST_Term_Meta_Fields extends WP_Test_REST_TestCase {
 		return $data;
 	}
 
+	/**
+	 * @ticket 43941
+	 */
+	public function test_get_default_value() {
+		$meta_key = 'registered_key1';
+		register_term_meta(
+			'category',
+			$meta_key,
+			array(
+				'single'       => true,
+				'type'         => 'string',
+				'default'      => 'Goodbye',
+				'show_in_rest' => true,
+			)
+		);
+
+		// Check for default value.
+		$request  = new WP_REST_Request( 'GET', sprintf( '/wp/v2/categories/%d', self::$category_id ) );
+		$response = rest_get_server()->dispatch( $request );
+
+		$this->assertSame( 200, $response->get_status() );
+
+		$data = $response->get_data();
+		$this->assertArrayHasKey( 'meta', $data );
+
+		$meta = (array) $data['meta'];
+		$this->assertArrayHasKey( $meta_key, $meta );
+		$this->assertSame( 'Goodbye', $meta[ $meta_key ] );
+	}
+
 	/**
 	 * Internal function used to disable an insert query which
 	 * will trigger a wpdb error for testing purposes.
diff --git a/tests/rest-api/rest-test-controller.php b/tests/rest-api/rest-test-controller.php
index b72ed7a415..35175f35b1 100644
--- a/tests/rest-api/rest-test-controller.php
+++ b/tests/rest-api/rest-test-controller.php
@@ -15,7 +15,7 @@ class WP_REST_Test_Controller extends WP_REST_Controller {
 	 *
 	 * @param mixed           $item    WordPress representation of the item.
 	 * @param WP_REST_Request $request Request object.
-	 * @return WP_Error|WP_REST_Response Response object on success, or WP_Error object on failure.
+	 * @return WP_REST_Response|WP_Error Response object on success, or WP_Error object on failure.
 	 */
 	public function prepare_item_for_response( $item, $request ) {
 		$context  = ! empty( $request['context'] ) ? $request['context'] : 'view';
@@ -39,11 +39,18 @@ class WP_REST_Test_Controller extends WP_REST_Controller {
 				'somestring'     => array(
 					'type'        => 'string',
 					'description' => 'A pretty string.',
+					'minLength'   => 3,
+					'maxLength'   => 3,
+					'pattern'     => '[a-zA-Z]+',
 					'context'     => array( 'view' ),
 				),
 				'someinteger'    => array(
-					'type'    => 'integer',
-					'context' => array( 'view' ),
+					'type'             => 'integer',
+					'minimum'          => 100,
+					'maximum'          => 200,
+					'exclusiveMinimum' => true,
+					'exclusiveMaximum' => true,
+					'context'          => array( 'view' ),
 				),
 				'someboolean'    => array(
 					'type'    => 'boolean',
@@ -64,6 +71,16 @@ class WP_REST_Test_Controller extends WP_REST_Controller {
 					'format'  => 'email',
 					'context' => array( 'view' ),
 				),
+				'somehex'        => array(
+					'type'    => 'string',
+					'format'  => 'hex-color',
+					'context' => array( 'view' ),
+				),
+				'someuuid'       => array(
+					'type'    => 'string',
+					'format'  => 'uuid',
+					'context' => array( 'view' ),
+				),
 				'someenum'       => array(
 					'type'    => 'string',
 					'enum'    => array( 'a', 'b', 'c' ),
@@ -83,6 +100,29 @@ class WP_REST_Test_Controller extends WP_REST_Controller {
 					'context' => array( 'view' ),
 					'default' => 'a',
 				),
+				'somearray'      => array(
+					'type'        => 'array',
+					'items'       => array(
+						'type' => 'string',
+					),
+					'minItems'    => 1,
+					'maxItems'    => 10,
+					'uniqueItems' => true,
+					'context'     => array( 'view' ),
+				),
+				'someobject'     => array(
+					'type'                 => 'object',
+					'additionalProperties' => array(
+						'type' => 'string',
+					),
+					'properties'           => array(
+						'object_id' => array(
+							'type' => 'integer',
+						),
+					),
+					'ignored_prop'         => 'ignored_prop',
+					'context'              => array( 'view' ),
+				),
 			),
 		);
 
diff --git a/tests/rest-api/rest-themes-controller.php b/tests/rest-api/rest-themes-controller.php
index 520dbed9d0..1689879845 100644
--- a/tests/rest-api/rest-themes-controller.php
+++ b/tests/rest-api/rest-themes-controller.php
@@ -78,9 +78,9 @@ class WP_Test_REST_Themes_Controller extends WP_Test_REST_Controller_Testcase {
 		}
 
 		$this->assertArrayHasKey( 'X-WP-Total', $headers );
-		$this->assertEquals( 1, $headers['X-WP-Total'] );
+		$this->assertSame( 1, $headers['X-WP-Total'] );
 		$this->assertArrayHasKey( 'X-WP-TotalPages', $headers );
-		$this->assertEquals( 1, $headers['X-WP-TotalPages'] );
+		$this->assertSame( 1, $headers['X-WP-TotalPages'] );
 	}
 
 	/**
@@ -125,6 +125,7 @@ class WP_Test_REST_Themes_Controller extends WP_Test_REST_Controller_Testcase {
 		parent::setUp();
 
 		wp_set_current_user( self::$contributor_id );
+		switch_theme( 'rest-api' );
 	}
 
 	/**
@@ -145,14 +146,36 @@ class WP_Test_REST_Themes_Controller extends WP_Test_REST_Controller_Testcase {
 	public function test_get_items() {
 		$response = self::perform_active_theme_request();
 
-		$this->assertEquals( 200, $response->get_status() );
+		$this->assertSame( 200, $response->get_status() );
 		$data = $response->get_data();
 
 		$this->check_get_theme_response( $response );
 		$fields = array(
+			'author',
+			'author_uri',
+			'description',
+			'name',
+			'requires_php',
+			'requires_wp',
+			'screenshot',
+			'stylesheet',
+			'tags',
+			'template',
+			'textdomain',
 			'theme_supports',
+			'theme_uri',
+			'version',
 		);
-		$this->assertEqualSets( $fields, array_keys( $data[0] ) );
+		$this->assertSameSets( $fields, array_keys( $data[0] ) );
+	}
+
+	/**
+	 * @ticket 46723
+	 */
+	public function test_get_items_logged_out() {
+		wp_set_current_user( 0 );
+		$response = self::perform_active_theme_request();
+		$this->assertErrorResponse( 'rest_user_cannot_view', $response, 401 );
 	}
 
 	/**
@@ -166,6 +189,18 @@ class WP_Test_REST_Themes_Controller extends WP_Test_REST_Controller_Testcase {
 		$this->assertErrorResponse( 'rest_user_cannot_view', $response, 403 );
 	}
 
+	/**
+	 * @ticket 46723
+	 */
+	public function test_get_item_single_post_type_cap() {
+		$user = self::factory()->user->create_and_get();
+		$user->add_cap( 'edit_pages' );
+		wp_set_current_user( $user->ID );
+
+		$response = self::perform_active_theme_request();
+		$this->assertSame( 200, $response->get_status() );
+	}
+
 	/**
 	 * Test an item is prepared for the response.
 	 *
@@ -173,7 +208,7 @@ class WP_Test_REST_Themes_Controller extends WP_Test_REST_Controller_Testcase {
 	 */
 	public function test_prepare_item() {
 		$response = self::perform_active_theme_request();
-		$this->assertEquals( 200, $response->get_status() );
+		$this->assertSame( 200, $response->get_status() );
 		$this->check_get_theme_response( $response );
 	}
 
@@ -186,13 +221,681 @@ class WP_Test_REST_Themes_Controller extends WP_Test_REST_Controller_Testcase {
 		$response   = self::perform_active_theme_request( 'OPTIONS' );
 		$data       = $response->get_data();
 		$properties = $data['schema']['properties'];
-		$this->assertEquals( 1, count( $properties ) );
+		$this->assertSame( 14, count( $properties ) );
+
+		$this->assertArrayHasKey( 'author', $properties );
+		$this->assertArrayHasKey( 'raw', $properties['author']['properties'] );
+		$this->assertArrayHasKey( 'rendered', $properties['author']['properties'] );
+
+		$this->assertArrayHasKey( 'author_uri', $properties );
+		$this->assertArrayHasKey( 'raw', $properties['author_uri']['properties'] );
+		$this->assertArrayHasKey( 'rendered', $properties['author_uri']['properties'] );
+
+		$this->assertArrayHasKey( 'description', $properties );
+		$this->assertArrayHasKey( 'raw', $properties['description']['properties'] );
+		$this->assertArrayHasKey( 'rendered', $properties['description']['properties'] );
+
+		$this->assertArrayHasKey( 'name', $properties );
+		$this->assertArrayHasKey( 'raw', $properties['name']['properties'] );
+		$this->assertArrayHasKey( 'rendered', $properties['name']['properties'] );
+
+		$this->assertArrayHasKey( 'requires_php', $properties );
+		$this->assertArrayHasKey( 'requires_wp', $properties );
+		$this->assertArrayHasKey( 'screenshot', $properties );
+		$this->assertArrayHasKey( 'stylesheet', $properties );
+
+		$this->assertArrayHasKey( 'tags', $properties );
+		$this->assertArrayHasKey( 'raw', $properties['tags']['properties'] );
+		$this->assertArrayHasKey( 'items', $properties['tags']['properties']['raw'] );
+		$this->assertArrayHasKey( 'rendered', $properties['tags']['properties'] );
+
+		$this->assertArrayHasKey( 'template', $properties );
+		$this->assertArrayHasKey( 'textdomain', $properties );
 		$this->assertArrayHasKey( 'theme_supports', $properties );
 
-		$this->assertEquals( 3, count( $properties['theme_supports']['properties'] ) );
-		$this->assertArrayHasKey( 'formats', $properties['theme_supports']['properties'] );
-		$this->assertArrayHasKey( 'post-thumbnails', $properties['theme_supports']['properties'] );
-		$this->assertArrayHasKey( 'responsive-embeds', $properties['theme_supports']['properties'] );
+		$this->assertArrayHasKey( 'theme_uri', $properties );
+		$this->assertArrayHasKey( 'raw', $properties['theme_uri']['properties'] );
+		$this->assertArrayHasKey( 'rendered', $properties['theme_uri']['properties'] );
+
+		$this->assertArrayHasKey( 'version', $properties );
+
+		$theme_supports = $properties['theme_supports']['properties'];
+		$this->assertArrayHasKey( 'align-wide', $theme_supports );
+		$this->assertArrayHasKey( 'automatic-feed-links', $theme_supports );
+		$this->assertArrayHasKey( 'custom-header', $theme_supports );
+		$this->assertArrayHasKey( 'custom-background', $theme_supports );
+		$this->assertArrayHasKey( 'custom-logo', $theme_supports );
+		$this->assertArrayHasKey( 'customize-selective-refresh-widgets', $theme_supports );
+		$this->assertArrayHasKey( 'title-tag', $theme_supports );
+		$this->assertArrayHasKey( 'dark-editor-style', $theme_supports );
+		$this->assertArrayHasKey( 'disable-custom-font-sizes', $theme_supports );
+		$this->assertArrayHasKey( 'disable-custom-gradients', $theme_supports );
+		$this->assertArrayHasKey( 'editor-color-palette', $theme_supports );
+		$this->assertArrayHasKey( 'editor-font-sizes', $theme_supports );
+		$this->assertArrayHasKey( 'editor-gradient-presets', $theme_supports );
+		$this->assertArrayHasKey( 'editor-styles', $theme_supports );
+		$this->assertArrayHasKey( 'formats', $theme_supports );
+		$this->assertArrayHasKey( 'html5', $theme_supports );
+		$this->assertArrayHasKey( 'post-thumbnails', $theme_supports );
+		$this->assertArrayHasKey( 'responsive-embeds', $theme_supports );
+		$this->assertArrayHasKey( 'title-tag', $theme_supports );
+		$this->assertArrayHasKey( 'wp-block-styles', $theme_supports );
+		$this->assertCount( 20, $theme_supports );
+	}
+
+	/**
+	 * @ticket 49906
+	 */
+	public function test_theme_author() {
+		$response = self::perform_active_theme_request();
+		$result   = $response->get_data();
+		$this->assertArrayHasKey( 'author', $result[0] );
+		$this->assertSame( 'Michael Heilemann', $result[0]['author']['raw'] );
+		$this->assertSame(
+			'<a href="http://binarybonsai.com/?search=1&#038;term=2">Michael Heilemann</a>',
+			$result[0]['author']['rendered']
+		);
+	}
+
+	/**
+	 * @ticket 49906
+	 */
+	public function test_theme_author_uri() {
+		$response = self::perform_active_theme_request();
+		$result   = $response->get_data();
+		$this->assertArrayHasKey( 'author_uri', $result[0] );
+		$this->assertSame( 'http://binarybonsai.com/?search=1&term=2', $result[0]['author_uri']['raw'] );
+		$this->assertSame( 'http://binarybonsai.com/?search=1&#038;term=2', $result[0]['author_uri']['rendered'] );
+	}
+
+	/**
+	 * @ticket 49906
+	 */
+	public function test_theme_description() {
+		$response = self::perform_active_theme_request();
+		$result   = $response->get_data();
+		$this->assertArrayHasKey( 'description', $result[0] );
+		$this->assertSame(
+			'The 9\' foot tall theme.',
+			$result[0]['description']['raw']
+		);
+		$this->assertSame(
+			'The 9&#8242; foot tall theme.',
+			$result[0]['description']['rendered']
+		);
+	}
+
+	/**
+	 * @ticket 49906
+	 */
+	public function test_theme_requires_php() {
+		$response = self::perform_active_theme_request();
+		$result   = $response->get_data();
+		$this->assertArrayHasKey( 'requires_php', $result[0] );
+		$this->assertSame( '5.6', $result[0]['requires_php'] );
+	}
+
+	/**
+	 * @ticket 49906
+	 */
+	public function test_theme_requires_wp() {
+		$response = self::perform_active_theme_request();
+		$result   = $response->get_data();
+		$this->assertArrayHasKey( 'requires_wp', $result[0] );
+		$this->assertSame( '5.3', $result[0]['requires_wp'] );
+	}
+
+	/**
+	 * @ticket 49906
+	 */
+	public function test_theme_name() {
+		$response = self::perform_active_theme_request();
+		$result   = $response->get_data();
+		$this->assertArrayHasKey( 'name', $result[0] );
+		$this->assertSame( 'REST Theme', $result[0]['name']['raw'] );
+		$this->assertSame( 'REST Theme', $result[0]['name']['rendered'] );
+	}
+
+	/**
+	 * @ticket 49906
+	 */
+	public function test_theme_screenshot() {
+		$response = self::perform_active_theme_request();
+		$result   = $response->get_data();
+		$this->assertArrayHasKey( 'screenshot', $result[0] );
+		$this->assertSame( '', $result[0]['screenshot'] ); // No screenshot for default theme
+	}
+
+	/**
+	 * @ticket 49906
+	 */
+	public function test_theme_stylesheet() {
+		$response = self::perform_active_theme_request();
+		$result   = $response->get_data();
+		$this->assertArrayHasKey( 'stylesheet', $result[0] );
+		$this->assertSame( 'rest-api', $result[0]['stylesheet'] );
+	}
+
+	/**
+	 * @ticket 49906
+	 */
+	public function test_theme_tags() {
+		$response = self::perform_active_theme_request();
+		$result   = $response->get_data();
+		$this->assertArrayHasKey( 'tags', $result[0] );
+		$this->assertSame( array( 'holiday', 'custom-menu' ), $result[0]['tags']['raw'] );
+		$this->assertSame( 'holiday, custom-menu', $result[0]['tags']['rendered'] );
+	}
+
+	/**
+	 * @ticket 49906
+	 */
+	public function test_theme_template() {
+		$response = self::perform_active_theme_request();
+		$result   = $response->get_data();
+		$this->assertArrayHasKey( 'template', $result[0] );
+		$this->assertSame( 'default', $result[0]['template'] );
+	}
+
+	/**
+	 * @ticket 49906
+	 */
+	public function test_theme_textdomain() {
+		$response = self::perform_active_theme_request();
+		$result   = $response->get_data();
+		$this->assertArrayHasKey( 'textdomain', $result[0] );
+		$this->assertSame( 'rest-api', $result[0]['textdomain'] );
+	}
+
+	public function test_theme_theme_uri() {
+		$response = self::perform_active_theme_request();
+		$result   = $response->get_data();
+		$this->assertArrayHasKey( 'theme_uri', $result[0] );
+		$this->assertSame( 'http://wordpress.org/?search=1&term=2', $result[0]['theme_uri']['raw'] );
+		$this->assertSame( 'http://wordpress.org/?search=1&#038;term=2', $result[0]['theme_uri']['rendered'] );
+	}
+
+	/**
+	 * @ticket 49906
+	 */
+	public function test_theme_version() {
+		$response = self::perform_active_theme_request();
+		$result   = $response->get_data();
+		$this->assertArrayHasKey( 'version', $result[0] );
+		$this->assertSame( '1.6', $result[0]['version'] );
+	}
+
+	/**
+	 * @ticket 49037
+	 */
+	public function test_theme_supports_disable_custom_colors_false() {
+		remove_theme_support( 'disable-custom-colors' );
+		$response = self::perform_active_theme_request();
+		$result   = $response->get_data();
+		$this->assertArrayHasKey( 'theme_supports', $result[0] );
+		$this->assertArrayHasKey( 'disable-custom-colors', $result[0]['theme_supports'] );
+		$this->assertFalse( $result[0]['theme_supports']['disable-custom-colors'] );
+	}
+
+	/**
+	 * @ticket 49037
+	 */
+	public function test_theme_supports_disable_custom_colors_true() {
+		remove_theme_support( 'disable-custom-colors' );
+		add_theme_support( 'disable-custom-colors' );
+		$response = self::perform_active_theme_request();
+		$result   = $response->get_data();
+		$this->assertArrayHasKey( 'theme_supports', $result[0] );
+		$this->assertTrue( $result[0]['theme_supports']['disable-custom-colors'] );
+	}
+
+	/**
+	 * @ticket 49037
+	 */
+	public function test_theme_supports_disable_custom_font_sizes_false() {
+		remove_theme_support( 'disable-custom-font-sizes' );
+		$response = self::perform_active_theme_request();
+		$result   = $response->get_data();
+		$this->assertArrayHasKey( 'theme_supports', $result[0] );
+		$this->assertArrayHasKey( 'disable-custom-font-sizes', $result[0]['theme_supports'] );
+		$this->assertFalse( $result[0]['theme_supports']['disable-custom-font-sizes'] );
+	}
+
+	/**
+	 * @ticket 49037
+	 */
+	public function test_theme_supports_disable_custom_font_sizes_true() {
+		remove_theme_support( 'disable-custom-font-sizes' );
+		add_theme_support( 'disable-custom-font-sizes' );
+		$response = self::perform_active_theme_request();
+		$result   = $response->get_data();
+		$this->assertArrayHasKey( 'theme_supports', $result[0] );
+		$this->assertTrue( $result[0]['theme_supports']['disable-custom-font-sizes'] );
+	}
+
+	/**
+	 * @ticket 49037
+	 */
+	public function test_theme_supports_editor_font_sizes_false() {
+		remove_theme_support( 'editor-font-sizes' );
+		$response = self::perform_active_theme_request();
+		$result   = $response->get_data();
+		$this->assertArrayHasKey( 'theme_supports', $result[0] );
+		$this->assertArrayHasKey( 'editor-font-sizes', $result[0]['theme_supports'] );
+		$this->assertFalse( $result[0]['theme_supports']['editor-font-sizes'] );
+	}
+
+	/**
+	 * @ticket 49037
+	 */
+	public function test_theme_supports_editor_font_sizes_array() {
+		remove_theme_support( 'editor-font-sizes' );
+		$tiny = array(
+			'name' => 'Tiny',
+			'size' => 8,
+			'slug' => 'tiny',
+		);
+		add_theme_support( 'editor-font-sizes', array( $tiny ) );
+		$response = self::perform_active_theme_request();
+		$result   = $response->get_data();
+		$this->assertArrayHasKey( 'theme_supports', $result[0] );
+		$this->assertArrayHasKey( 'editor-font-sizes', $result[0]['theme_supports'] );
+		$this->assertEquals( array( $tiny ), $result[0]['theme_supports']['editor-font-sizes'] );
+	}
+
+	/**
+	 * @ticket 49037
+	 */
+	public function test_theme_supports_editor_color_palette_false() {
+		remove_theme_support( 'editor-color-palette' );
+		$response = self::perform_active_theme_request();
+		$result   = $response->get_data();
+		$this->assertArrayHasKey( 'theme_supports', $result[0] );
+		$this->assertArrayHasKey( 'editor-color-palette', $result[0]['theme_supports'] );
+		$this->assertFalse( $result[0]['theme_supports']['editor-color-palette'] );
+	}
+
+	/**
+	 * @ticket 49037
+	 */
+	public function test_theme_supports_editor_color_palette_array() {
+		remove_theme_support( 'editor-color-palette' );
+		$wordpress_blue = array(
+			'name'  => 'WordPress Blue',
+			'slug'  => 'wordpress-blue',
+			'color' => '#0073AA',
+		);
+		add_theme_support( 'editor-color-palette', array( $wordpress_blue ) );
+		$response = self::perform_active_theme_request();
+		$result   = $response->get_data();
+		$this->assertArrayHasKey( 'theme_supports', $result[0] );
+		$this->assertSame( array( $wordpress_blue ), $result[0]['theme_supports']['editor-color-palette'] );
+	}
+
+	/**
+	 * @ticket 49037
+	 */
+	public function test_theme_supports_enable_automatic_feed_links() {
+		remove_theme_support( 'automatic-feed-links' );
+		add_theme_support( 'automatic-feed-links' );
+		$response = self::perform_active_theme_request();
+		$result   = $response->get_data();
+		$this->assertArrayHasKey( 'theme_supports', $result[0] );
+		$this->assertTrue( $result[0]['theme_supports']['automatic-feed-links'] );
+	}
+
+	/**
+	 * @ticket 49037
+	 */
+	public function test_theme_supports_does_not_enable_automatic_feed_links() {
+		remove_theme_support( 'automatic-feed-links' );
+		$response = self::perform_active_theme_request();
+		$result   = $response->get_data();
+		$this->assertArrayHasKey( 'theme_supports', $result[0] );
+		$this->assertArrayHasKey( 'automatic-feed-links', $result[0]['theme_supports'] );
+		$this->assertFalse( $result[0]['theme_supports']['automatic-feed-links'] );
+	}
+
+	/**
+	 * @ticket 49037
+	 */
+	public function test_theme_does_not_support_custom_logo() {
+		remove_theme_support( 'custom-logo' );
+		$response = self::perform_active_theme_request();
+		$result   = $response->get_data();
+		$this->assertArrayHasKey( 'theme_supports', $result[0] );
+		$this->assertArrayHasKey( 'custom-logo', $result[0]['theme_supports'] );
+		$this->assertFalse( $result[0]['theme_supports']['custom-logo'] );
+	}
+
+	/**
+	 * @ticket 49037
+	 */
+	public function test_theme_supports_custom_logo() {
+		remove_theme_support( 'custom-logo' );
+		$wordpress_logo = array(
+			'width'                => 400,
+			'height'               => 100,
+			'flex-width'           => true,
+			'flex-height'          => true,
+			'header-text'          => array( 'site-title', 'site-description' ),
+			'unlink-homepage-logo' => false,
+		);
+		add_theme_support( 'custom-logo', $wordpress_logo );
+		$response = self::perform_active_theme_request();
+		$result   = $response->get_data();
+		$this->assertArrayHasKey( 'theme_supports', $result[0] );
+		$this->assertSame( $wordpress_logo, $result[0]['theme_supports']['custom-logo'] );
+	}
+
+	/**
+	 * @ticket 49037
+	 */
+	public function test_theme_does_not_support_custom_header() {
+		remove_theme_support( 'custom-header' );
+		$response = self::perform_active_theme_request();
+		$result   = $response->get_data();
+		$this->assertArrayHasKey( 'theme_supports', $result[0] );
+		$this->assertArrayHasKey( 'custom-header', $result[0]['theme_supports'] );
+		$this->assertFalse( $result[0]['theme_supports']['custom-header'] );
+	}
+
+	/**
+	 * @ticket 49037
+	 */
+	public function test_theme_supports_custom_header() {
+		remove_theme_support( 'custom-header' );
+		$wordpress_header = array(
+			'default-image'          => '',
+			'random-default'         => false,
+			'width'                  => 0,
+			'height'                 => 0,
+			'flex-height'            => false,
+			'flex-width'             => false,
+			'default-text-color'     => '',
+			'header-text'            => true,
+			'uploads'                => true,
+			'wp-head-callback'       => '',
+			'admin-head-callback'    => '',
+			'admin-preview-callback' => '',
+			'video'                  => false,
+			'video-active-callback'  => 'is_front_page',
+		);
+		$excluded         = array(
+			'wp-head-callback',
+			'admin-head-callback',
+			'admin-preview-callback',
+			'video-active-callback',
+		);
+		add_theme_support( 'custom-header', $wordpress_header );
+		$response = self::perform_active_theme_request();
+		$result   = $response->get_data();
+		$this->assertArrayHasKey( 'theme_supports', $result[0] );
+
+		$expected = array_diff_key( $wordpress_header, array_flip( $excluded ) );
+		$this->assertSame( $expected, $result[0]['theme_supports']['custom-header'] );
+	}
+
+	/**
+	 * @ticket 49037
+	 */
+	public function test_theme_does_not_support_custom_background() {
+		remove_theme_support( 'custom-background' );
+		$response = self::perform_active_theme_request();
+		$result   = $response->get_data();
+		$this->assertArrayHasKey( 'theme_supports', $result[0] );
+		$this->assertArrayHasKey( 'custom-background', $result[0]['theme_supports'] );
+		$this->assertFalse( $result[0]['theme_supports']['custom-background'] );
+	}
+
+	/**
+	 * @ticket 49037
+	 */
+	public function test_theme_supports_custom_background() {
+		remove_theme_support( 'custom-background' );
+		$background = array(
+			'default-image'          => '',
+			'default-preset'         => 'default',
+			'default-position-x'     => 'left',
+			'default-position-y'     => 'top',
+			'default-size'           => 'auto',
+			'default-repeat'         => 'repeat',
+			'default-attachment'     => 'scroll',
+			'default-color'          => '',
+			'wp-head-callback'       => '_custom_background_cb',
+			'admin-head-callback'    => '',
+			'admin-preview-callback' => '',
+		);
+		$excluded   = array(
+			'wp-head-callback',
+			'admin-head-callback',
+			'admin-preview-callback',
+		);
+		add_theme_support( 'custom-background', $background );
+		$response = self::perform_active_theme_request();
+		$result   = $response->get_data();
+		$this->assertArrayHasKey( 'theme_supports', $result[0] );
+
+		$expected = array_diff_key( $background, array_flip( $excluded ) );
+		$this->assertSame( $expected, $result[0]['theme_supports']['custom-background'] );
+	}
+
+	/**
+	 * @ticket 49037
+	 */
+	public function test_theme_does_not_support_html5() {
+		remove_theme_support( 'html5' );
+		$response = self::perform_active_theme_request();
+		$result   = $response->get_data();
+		$this->assertArrayHasKey( 'theme_supports', $result[0] );
+		$this->assertArrayHasKey( 'html5', $result[0]['theme_supports'] );
+		$this->assertFalse( $result[0]['theme_supports']['html5'] );
+	}
+
+	/**
+	 * @ticket 49037
+	 */
+	public function test_theme_supports_html5() {
+		remove_theme_support( 'html5' );
+		$html5 = array(
+			'search-form',
+			'comment-form',
+			'comment-list',
+			'gallery',
+			'caption',
+			'script',
+			'style',
+		);
+		add_theme_support( 'html5', $html5 );
+		$response = self::perform_active_theme_request();
+		$result   = $response->get_data();
+		$this->assertArrayHasKey( 'theme_supports', $result[0] );
+		$this->assertSame( $html5, $result[0]['theme_supports']['html5'] );
+	}
+
+	/**
+	 * @ticket 49037
+	 */
+	public function test_theme_cannot_manage_title_tag() {
+		remove_theme_support( 'title-tag' );
+		$response = self::perform_active_theme_request();
+		$result   = $response->get_data();
+		$this->assertArrayHasKey( 'theme_supports', $result[0] );
+		$this->assertArrayHasKey( 'title-tag', $result[0]['theme_supports'] );
+		$this->assertFalse( $result[0]['theme_supports']['title-tag'] );
+	}
+
+	/**
+	 * @ticket 49037
+	 */
+	public function test_theme_can_manage_title_tag() {
+		global $_wp_theme_features;
+		$_wp_theme_features['title-tag'] = true;
+		$response                        = self::perform_active_theme_request();
+		$result                          = $response->get_data();
+		$this->assertArrayHasKey( 'theme_supports', $result[0] );
+		$this->assertTrue( $result[0]['theme_supports']['title-tag'] );
+	}
+
+	/**
+	 * @ticket 49037
+	 */
+	public function test_theme_cannot_manage_selective_refresh_for_widgets() {
+		remove_theme_support( 'customize-selective-refresh-widgets' );
+		$response = self::perform_active_theme_request();
+		$result   = $response->get_data();
+		$this->assertArrayHasKey( 'theme_supports', $result[0] );
+		$this->assertArrayHasKey( 'customize-selective-refresh-widgets', $result[0]['theme_supports'] );
+		$this->assertFalse( $result[0]['theme_supports']['customize-selective-refresh-widgets'] );
+	}
+
+	/**
+	 * @ticket 49037
+	 */
+	public function test_theme_can_manage_selective_refresh_for_widgets() {
+		remove_theme_support( 'customize-selective-refresh-widgets' );
+		add_theme_support( 'customize-selective-refresh-widgets' );
+		$response = self::perform_active_theme_request();
+		$result   = $response->get_data();
+		$this->assertArrayHasKey( 'theme_supports', $result[0] );
+		$this->assertTrue( $result[0]['theme_supports']['customize-selective-refresh-widgets'] );
+	}
+
+	/**
+	 * @ticket 49037
+	 */
+	public function test_theme_no_wp_block_styles() {
+		remove_theme_support( 'wp-block-styles' );
+		$response = self::perform_active_theme_request();
+		$result   = $response->get_data();
+		$this->assertArrayHasKey( 'theme_supports', $result[0] );
+		$this->assertArrayHasKey( 'wp-block-styles', $result[0]['theme_supports'] );
+		$this->assertFalse( $result[0]['theme_supports']['wp-block-styles'] );
+	}
+
+	/**
+	 * @ticket 49037
+	 */
+	public function test_theme_wp_block_styles_optin() {
+		remove_theme_support( 'wp-block-styles' );
+		add_theme_support( 'wp-block-styles' );
+		$response = self::perform_active_theme_request();
+		$result   = $response->get_data();
+		$this->assertArrayHasKey( 'theme_supports', $result[0] );
+		$this->assertTrue( $result[0]['theme_supports']['wp-block-styles'] );
+	}
+
+	/**
+	 * @ticket 49037
+	 */
+	public function test_theme_no_align_wide() {
+		remove_theme_support( 'align-wide' );
+		$response = self::perform_active_theme_request();
+		$result   = $response->get_data();
+		$this->assertArrayHasKey( 'theme_supports', $result[0] );
+		$this->assertArrayHasKey( 'align-wide', $result[0]['theme_supports'] );
+		$this->assertFalse( $result[0]['theme_supports']['align-wide'] );
+	}
+
+	/**
+	 * @ticket 49037
+	 */
+	public function test_theme_align_wide_optin() {
+		remove_theme_support( 'align-wide' );
+		add_theme_support( 'align-wide' );
+		$response = self::perform_active_theme_request();
+		$result   = $response->get_data();
+		$this->assertArrayHasKey( 'theme_supports', $result[0] );
+		$this->assertTrue( $result[0]['theme_supports']['align-wide'] );
+	}
+
+	/**
+	 * @ticket 49037
+	 */
+	public function test_theme_no_editor_styles() {
+		remove_theme_support( 'editor-styles' );
+		$response = self::perform_active_theme_request();
+		$result   = $response->get_data();
+		$this->assertArrayHasKey( 'theme_supports', $result[0] );
+		$this->assertArrayHasKey( 'editor-styles', $result[0]['theme_supports'] );
+		$this->assertFalse( $result[0]['theme_supports']['editor-styles'] );
+	}
+
+	/**
+	 * @ticket 49037
+	 */
+	public function test_theme_editor_styles_optin() {
+		remove_theme_support( 'editor-styles' );
+		add_theme_support( 'editor-styles' );
+		$response = self::perform_active_theme_request();
+		$result   = $response->get_data();
+		$this->assertArrayHasKey( 'theme_supports', $result[0] );
+		$this->assertTrue( $result[0]['theme_supports']['editor-styles'] );
+	}
+
+	/**
+	 * @ticket 49037
+	 */
+	public function test_theme_no_dark_editor_style() {
+		remove_theme_support( 'dark-editor-style' );
+		$response = self::perform_active_theme_request();
+		$result   = $response->get_data();
+		$this->assertArrayHasKey( 'theme_supports', $result[0] );
+		$this->assertArrayHasKey( 'dark-editor-style', $result[0]['theme_supports'] );
+		$this->assertFalse( $result[0]['theme_supports']['dark-editor-style'] );
+	}
+
+	/**
+	 * @ticket 49037
+	 */
+	public function test_theme_dark_editor_style_optin() {
+		remove_theme_support( 'dark-editor-style' );
+		add_theme_support( 'dark-editor-style' );
+		$response = self::perform_active_theme_request();
+		$result   = $response->get_data();
+		$this->assertArrayHasKey( 'theme_supports', $result[0] );
+		$this->assertTrue( $result[0]['theme_supports']['dark-editor-style'] );
+	}
+
+	/**
+	 * @ticket 49037
+	 */
+	public function test_theme_no_disable_custom_gradients() {
+		remove_theme_support( 'disable-custom-gradients' );
+		$response = self::perform_active_theme_request();
+		$result   = $response->get_data();
+		$this->assertArrayHasKey( 'theme_supports', $result[0] );
+		$this->assertArrayHasKey( 'disable-custom-gradients', $result[0]['theme_supports'] );
+		$this->assertFalse( $result[0]['theme_supports']['disable-custom-gradients'] );
+	}
+
+	/**
+	 * @ticket 49037
+	 */
+	public function test_theme_disable_custom_gradients() {
+		remove_theme_support( 'disable-custom-gradients' );
+		add_theme_support( 'disable-custom-gradients' );
+		$response = self::perform_active_theme_request();
+		$result   = $response->get_data();
+		$this->assertArrayHasKey( 'theme_supports', $result[0] );
+		$this->assertTrue( $result[0]['theme_supports']['disable-custom-gradients'] );
+	}
+
+	/**
+	 * @ticket 49037
+	 */
+	public function test_theme_supports_editor_gradient_presets_array() {
+		remove_theme_support( 'editor-gradient-presets' );
+		$gradient = array(
+			'name'     => __( 'Vivid cyan blue to vivid purple', 'themeLangDomain' ),
+			'gradient' => 'linear-gradient(135deg,rgba(6,147,227,1) 0%,rgb(155,81,224) 100%)',
+			'slug'     => 'vivid-cyan-blue-to-vivid-purple',
+		);
+		add_theme_support( 'editor-gradient-presets', array( $gradient ) );
+		$response = self::perform_active_theme_request();
+		$result   = $response->get_data();
+		$this->assertArrayHasKey( 'theme_supports', $result[0] );
+		$this->assertSame( array( $gradient ), $result[0]['theme_supports']['editor-gradient-presets'] );
 	}
 
 	/**
@@ -292,7 +995,33 @@ class WP_Test_REST_Themes_Controller extends WP_Test_REST_Controller_Testcase {
 		$response = self::perform_active_theme_request();
 		$result   = $response->get_data();
 		$this->assertTrue( isset( $result[0]['theme_supports'] ) );
-		$this->assertEquals( array( 'post' ), $result[0]['theme_supports']['post-thumbnails'] );
+		$this->assertSame( array( 'post' ), $result[0]['theme_supports']['post-thumbnails'] );
+	}
+
+	/**
+	 * @ticket 49406
+	 */
+	public function test_variadic_theme_support() {
+		register_theme_feature(
+			'test-feature',
+			array(
+				'type'         => 'array',
+				'variadic'     => true,
+				'show_in_rest' => array(
+					'schema' => array(
+						'items' => array(
+							'type' => 'string',
+						),
+					),
+				),
+			)
+		);
+		add_theme_support( 'test-feature', 'a', 'b', 'c' );
+
+		$response = self::perform_active_theme_request();
+		$result   = $response->get_data();
+		$this->assertTrue( isset( $result[0]['theme_supports'] ) );
+		$this->assertSame( array( 'a', 'b', 'c' ), $result[0]['theme_supports']['test-feature'] );
 	}
 
 	/**
@@ -320,7 +1049,7 @@ class WP_Test_REST_Themes_Controller extends WP_Test_REST_Controller_Testcase {
 		$data     = $response->get_data();
 
 		$this->assertArrayHasKey( 'my_custom_int', $data['schema']['properties'] );
-		$this->assertEquals( $schema, $data['schema']['properties']['my_custom_int'] );
+		$this->assertSame( $schema, $data['schema']['properties']['my_custom_int'] );
 
 		$response = self::perform_active_theme_request( 'GET' );
 		$data     = $response->get_data();
diff --git a/tests/rest-api/rest-users-controller.php b/tests/rest-api/rest-users-controller.php
index 28755a97d1..bf8adbf671 100644
--- a/tests/rest-api/rest-users-controller.php
+++ b/tests/rest-api/rest-users-controller.php
@@ -15,8 +15,13 @@ class WP_Test_REST_Users_Controller extends WP_Test_REST_Controller_Testcase {
 	protected static $editor;
 	protected static $draft_editor;
 	protected static $subscriber;
-	protected static $authors = array();
-	protected static $posts   = array();
+
+	protected static $authors     = array();
+	protected static $posts       = array();
+	protected static $user_ids    = array();
+	protected static $total_users = 30;
+	protected static $per_page    = 50;
+
 	protected static $site;
 
 	public static function wpSetUpBeforeClass( $factory ) {
@@ -100,6 +105,16 @@ class WP_Test_REST_Users_Controller extends WP_Test_REST_Controller_Testcase {
 			);
 			update_site_option( 'site_admins', array( 'superadmin' ) );
 		}
+
+		// Set up users for pagination tests.
+		for ( $i = 0; $i < self::$total_users - 10; $i++ ) {
+			self::$user_ids[] = $factory->user->create(
+				array(
+					'role'         => 'contributor',
+					'display_name' => "User {$i}",
+				)
+			);
+		}
 	}
 
 	public static function wpTearDownAfterClass() {
@@ -110,16 +125,23 @@ class WP_Test_REST_Users_Controller extends WP_Test_REST_Controller_Testcase {
 		foreach ( self::$posts as $post ) {
 			wp_delete_post( $post, true );
 		}
+
 		foreach ( self::$authors as $author ) {
 			self::delete_user( $author );
 		}
+
 		_unregister_post_type( 'r_true_p_true' );
 		_unregister_post_type( 'r_true_p_false' );
 		_unregister_post_type( 'r_false_p_true' );
 		_unregister_post_type( 'r_false_p_false' );
 
 		if ( is_multisite() ) {
-			wpmu_delete_blog( self::$site, true );
+			wp_delete_site( self::$site );
+		}
+
+		// Remove users for pagination tests.
+		foreach ( self::$user_ids as $user_id ) {
+			self::delete_user( $user_id );
 		}
 	}
 
@@ -142,18 +164,18 @@ class WP_Test_REST_Users_Controller extends WP_Test_REST_Controller_Testcase {
 	}
 
 	public function test_context_param() {
-		// Collection
+		// Collection.
 		$request  = new WP_REST_Request( 'OPTIONS', '/wp/v2/users' );
 		$response = rest_get_server()->dispatch( $request );
 		$data     = $response->get_data();
-		$this->assertEquals( 'view', $data['endpoints'][0]['args']['context']['default'] );
-		$this->assertEquals( array( 'view', 'embed', 'edit' ), $data['endpoints'][0]['args']['context']['enum'] );
-		// Single
+		$this->assertSame( 'view', $data['endpoints'][0]['args']['context']['default'] );
+		$this->assertSame( array( 'view', 'embed', 'edit' ), $data['endpoints'][0]['args']['context']['enum'] );
+		// Single.
 		$request  = new WP_REST_Request( 'OPTIONS', '/wp/v2/users/' . self::$user );
 		$response = rest_get_server()->dispatch( $request );
 		$data     = $response->get_data();
-		$this->assertEquals( 'view', $data['endpoints'][0]['args']['context']['default'] );
-		$this->assertEquals( array( 'view', 'embed', 'edit' ), $data['endpoints'][0]['args']['context']['enum'] );
+		$this->assertSame( 'view', $data['endpoints'][0]['args']['context']['default'] );
+		$this->assertSame( array( 'view', 'embed', 'edit' ), $data['endpoints'][0]['args']['context']['enum'] );
 	}
 
 	public function test_registered_query_params() {
@@ -162,7 +184,7 @@ class WP_Test_REST_Users_Controller extends WP_Test_REST_Controller_Testcase {
 		$data     = $response->get_data();
 		$keys     = array_keys( $data['endpoints'][0]['args'] );
 		sort( $keys );
-		$this->assertEquals(
+		$this->assertSame(
 			array(
 				'context',
 				'exclude',
@@ -188,7 +210,7 @@ class WP_Test_REST_Users_Controller extends WP_Test_REST_Controller_Testcase {
 		$request->set_param( 'context', 'view' );
 		$response = rest_get_server()->dispatch( $request );
 
-		$this->assertEquals( 200, $response->get_status() );
+		$this->assertSame( 200, $response->get_status() );
 
 		$all_data = $response->get_data();
 		$data     = $all_data[0];
@@ -203,7 +225,7 @@ class WP_Test_REST_Users_Controller extends WP_Test_REST_Controller_Testcase {
 		$request->set_param( 'context', 'edit' );
 		$response = rest_get_server()->dispatch( $request );
 
-		$this->assertEquals( 200, $response->get_status() );
+		$this->assertSame( 200, $response->get_status() );
 
 		$all_data = $response->get_data();
 		$data     = $all_data[0];
@@ -212,20 +234,22 @@ class WP_Test_REST_Users_Controller extends WP_Test_REST_Controller_Testcase {
 	}
 
 	public function test_get_items_with_edit_context_without_permission() {
-		//test with a user not logged in
+		// Test with a user not logged in.
 		$request = new WP_REST_Request( 'GET', '/wp/v2/users' );
 		$request->set_param( 'context', 'edit' );
 		$response = rest_get_server()->dispatch( $request );
 
-		$this->assertEquals( 401, $response->get_status() );
+		$this->assertSame( 401, $response->get_status() );
 
-		//test with a user logged in but without sufficient capabilities; capability in question: 'list_users'
+		// Test with a user logged in but without sufficient capabilities;
+		// capability in question: 'list_users'.
 		wp_set_current_user( self::$editor );
+
 		$request = new WP_REST_Request( 'GET', '/wp/v2/users' );
 		$request->set_param( 'context', 'edit' );
 		$response = rest_get_server()->dispatch( $request );
 
-		$this->assertEquals( 403, $response->get_status() );
+		$this->assertSame( 403, $response->get_status() );
 	}
 
 	public function test_get_items_unauthenticated_includes_authors_of_post_types_shown_in_rest() {
@@ -280,19 +304,17 @@ class WP_Test_REST_Users_Controller extends WP_Test_REST_Controller_Testcase {
 	}
 
 	public function test_get_items_pagination_headers() {
+		$total_users = self::$total_users;
+		$total_pages = (int) ceil( $total_users / 10 );
+
 		wp_set_current_user( self::$user );
-		for ( $i = 0; $i < 44; $i++ ) {
-			$this->factory->user->create(
-				array(
-					'name' => "User {$i}",
-				)
-			);
-		}
+
+		// Start of the index.
 		$request  = new WP_REST_Request( 'GET', '/wp/v2/users' );
 		$response = rest_get_server()->dispatch( $request );
 		$headers  = $response->get_headers();
-		$this->assertEquals( 54, $headers['X-WP-Total'] );
-		$this->assertEquals( 6, $headers['X-WP-TotalPages'] );
+		$this->assertSame( $total_users, $headers['X-WP-Total'] );
+		$this->assertSame( $total_pages, $headers['X-WP-TotalPages'] );
 		$next_link = add_query_arg(
 			array(
 				'page' => 2,
@@ -301,18 +323,17 @@ class WP_Test_REST_Users_Controller extends WP_Test_REST_Controller_Testcase {
 		);
 		$this->assertFalse( stripos( $headers['Link'], 'rel="prev"' ) );
 		$this->assertContains( '<' . $next_link . '>; rel="next"', $headers['Link'] );
-		// 3rd page
-		$this->factory->user->create(
-			array(
-				'name' => 'User 51',
-			)
-		);
+
+		// 3rd page.
+		$this->factory->user->create();
+		$total_users++;
+		$total_pages++;
 		$request = new WP_REST_Request( 'GET', '/wp/v2/users' );
 		$request->set_param( 'page', 3 );
 		$response = rest_get_server()->dispatch( $request );
 		$headers  = $response->get_headers();
-		$this->assertEquals( 55, $headers['X-WP-Total'] );
-		$this->assertEquals( 6, $headers['X-WP-TotalPages'] );
+		$this->assertSame( $total_users, $headers['X-WP-Total'] );
+		$this->assertSame( $total_pages, $headers['X-WP-TotalPages'] );
 		$prev_link = add_query_arg(
 			array(
 				'page' => 2,
@@ -327,31 +348,33 @@ class WP_Test_REST_Users_Controller extends WP_Test_REST_Controller_Testcase {
 			rest_url( 'wp/v2/users' )
 		);
 		$this->assertContains( '<' . $next_link . '>; rel="next"', $headers['Link'] );
-		// Last page
+
+		// Last page.
 		$request = new WP_REST_Request( 'GET', '/wp/v2/users' );
-		$request->set_param( 'page', 6 );
+		$request->set_param( 'page', $total_pages );
 		$response = rest_get_server()->dispatch( $request );
 		$headers  = $response->get_headers();
-		$this->assertEquals( 55, $headers['X-WP-Total'] );
-		$this->assertEquals( 6, $headers['X-WP-TotalPages'] );
+		$this->assertSame( $total_users, $headers['X-WP-Total'] );
+		$this->assertSame( $total_pages, $headers['X-WP-TotalPages'] );
 		$prev_link = add_query_arg(
 			array(
-				'page' => 5,
+				'page' => $total_pages - 1,
 			),
 			rest_url( 'wp/v2/users' )
 		);
 		$this->assertContains( '<' . $prev_link . '>; rel="prev"', $headers['Link'] );
 		$this->assertFalse( stripos( $headers['Link'], 'rel="next"' ) );
-		// Out of bounds
+
+		// Out of bounds.
 		$request = new WP_REST_Request( 'GET', '/wp/v2/users' );
-		$request->set_param( 'page', 8 );
+		$request->set_param( 'page', 100 );
 		$response = rest_get_server()->dispatch( $request );
 		$headers  = $response->get_headers();
-		$this->assertEquals( 55, $headers['X-WP-Total'] );
-		$this->assertEquals( 6, $headers['X-WP-TotalPages'] );
+		$this->assertSame( $total_users, $headers['X-WP-Total'] );
+		$this->assertSame( $total_pages, $headers['X-WP-TotalPages'] );
 		$prev_link = add_query_arg(
 			array(
-				'page' => 6,
+				'page' => $total_pages,
 			),
 			rest_url( 'wp/v2/users' )
 		);
@@ -361,28 +384,25 @@ class WP_Test_REST_Users_Controller extends WP_Test_REST_Controller_Testcase {
 
 	public function test_get_items_per_page() {
 		wp_set_current_user( self::$user );
-		for ( $i = 0; $i < 20; $i++ ) {
-			$this->factory->user->create( array( 'display_name' => "User {$i}" ) );
-		}
+
 		$request  = new WP_REST_Request( 'GET', '/wp/v2/users' );
 		$response = rest_get_server()->dispatch( $request );
-		$this->assertEquals( 10, count( $response->get_data() ) );
+		$this->assertSame( 10, count( $response->get_data() ) );
+
 		$request = new WP_REST_Request( 'GET', '/wp/v2/users' );
 		$request->set_param( 'per_page', 5 );
 		$response = rest_get_server()->dispatch( $request );
-		$this->assertEquals( 5, count( $response->get_data() ) );
+		$this->assertSame( 5, count( $response->get_data() ) );
 	}
 
 	public function test_get_items_page() {
 		wp_set_current_user( self::$user );
-		for ( $i = 0; $i < 20; $i++ ) {
-			$this->factory->user->create( array( 'display_name' => "User {$i}" ) );
-		}
+
 		$request = new WP_REST_Request( 'GET', '/wp/v2/users' );
 		$request->set_param( 'per_page', 5 );
 		$request->set_param( 'page', 2 );
 		$response = rest_get_server()->dispatch( $request );
-		$this->assertEquals( 5, count( $response->get_data() ) );
+		$this->assertSame( 5, count( $response->get_data() ) );
 		$prev_link = add_query_arg(
 			array(
 				'per_page' => 5,
@@ -396,23 +416,26 @@ class WP_Test_REST_Users_Controller extends WP_Test_REST_Controller_Testcase {
 
 	public function test_get_items_orderby_name() {
 		wp_set_current_user( self::$user );
+
 		$low_id  = $this->factory->user->create( array( 'display_name' => 'AAAAA' ) );
 		$mid_id  = $this->factory->user->create( array( 'display_name' => 'NNNNN' ) );
 		$high_id = $this->factory->user->create( array( 'display_name' => 'ZZZZ' ) );
+
 		$request = new WP_REST_Request( 'GET', '/wp/v2/users' );
 		$request->set_param( 'orderby', 'name' );
 		$request->set_param( 'order', 'desc' );
 		$request->set_param( 'per_page', 1 );
 		$response = rest_get_server()->dispatch( $request );
 		$data     = $response->get_data();
-		$this->assertEquals( $high_id, $data[0]['id'] );
+		$this->assertSame( $high_id, $data[0]['id'] );
+
 		$request = new WP_REST_Request( 'GET', '/wp/v2/users' );
 		$request->set_param( 'orderby', 'name' );
 		$request->set_param( 'order', 'asc' );
 		$request->set_param( 'per_page', 1 );
 		$response = rest_get_server()->dispatch( $request );
 		$data     = $response->get_data();
-		$this->assertEquals( $low_id, $data[0]['id'] );
+		$this->assertSame( $low_id, $data[0]['id'] );
 	}
 
 	public function test_get_items_orderby_url() {
@@ -428,8 +451,7 @@ class WP_Test_REST_Users_Controller extends WP_Test_REST_Controller_Testcase {
 		$request->set_param( 'include', array( $low_id, $high_id ) );
 		$response = rest_get_server()->dispatch( $request );
 		$data     = $response->get_data();
-
-		$this->assertEquals( $high_id, $data[0]['id'] );
+		$this->assertSame( $high_id, $data[0]['id'] );
 
 		$request = new WP_REST_Request( 'GET', '/wp/v2/users' );
 		$request->set_param( 'orderby', 'url' );
@@ -438,7 +460,7 @@ class WP_Test_REST_Users_Controller extends WP_Test_REST_Controller_Testcase {
 		$request->set_param( 'include', array( $low_id, $high_id ) );
 		$response = rest_get_server()->dispatch( $request );
 		$data     = $response->get_data();
-		$this->assertEquals( $low_id, $data[0]['id'] );
+		$this->assertSame( $low_id, $data[0]['id'] );
 	}
 
 	public function test_get_items_orderby_slug() {
@@ -454,8 +476,7 @@ class WP_Test_REST_Users_Controller extends WP_Test_REST_Controller_Testcase {
 		$request->set_param( 'include', array( $low_id, $high_id ) );
 		$response = rest_get_server()->dispatch( $request );
 		$data     = $response->get_data();
-
-		$this->assertEquals( $high_id, $data[0]['id'] );
+		$this->assertSame( $high_id, $data[0]['id'] );
 
 		$request = new WP_REST_Request( 'GET', '/wp/v2/users' );
 		$request->set_param( 'orderby', 'slug' );
@@ -464,7 +485,7 @@ class WP_Test_REST_Users_Controller extends WP_Test_REST_Controller_Testcase {
 		$request->set_param( 'include', array( $low_id, $high_id ) );
 		$response = rest_get_server()->dispatch( $request );
 		$data     = $response->get_data();
-		$this->assertEquals( $low_id, $data[0]['id'] );
+		$this->assertSame( $low_id, $data[0]['id'] );
 	}
 
 	public function test_get_items_orderby_slugs() {
@@ -480,9 +501,9 @@ class WP_Test_REST_Users_Controller extends WP_Test_REST_Controller_Testcase {
 		$response = rest_get_server()->dispatch( $request );
 		$data     = $response->get_data();
 
-		$this->assertEquals( 'taco', $data[0]['slug'] );
-		$this->assertEquals( 'burrito', $data[1]['slug'] );
-		$this->assertEquals( 'chalupa', $data[2]['slug'] );
+		$this->assertSame( 'taco', $data[0]['slug'] );
+		$this->assertSame( 'burrito', $data[1]['slug'] );
+		$this->assertSame( 'chalupa', $data[2]['slug'] );
 	}
 
 	public function test_get_items_orderby_email() {
@@ -498,7 +519,7 @@ class WP_Test_REST_Users_Controller extends WP_Test_REST_Controller_Testcase {
 		$request->set_param( 'include', array( $low_id, $high_id ) );
 		$response = rest_get_server()->dispatch( $request );
 		$data     = $response->get_data();
-		$this->assertEquals( $high_id, $data[0]['id'] );
+		$this->assertSame( $high_id, $data[0]['id'] );
 
 		$request = new WP_REST_Request( 'GET', '/wp/v2/users' );
 		$request->set_param( 'orderby', 'email' );
@@ -507,7 +528,7 @@ class WP_Test_REST_Users_Controller extends WP_Test_REST_Controller_Testcase {
 		$request->set_param( 'include', array( $low_id, $high_id ) );
 		$response = rest_get_server()->dispatch( $request );
 		$data     = $response->get_data();
-		$this->assertEquals( $low_id, $data[0]['id'] );
+		$this->assertSame( $low_id, $data[0]['id'] );
 	}
 
 	public function test_get_items_orderby_email_unauthenticated() {
@@ -542,21 +563,24 @@ class WP_Test_REST_Users_Controller extends WP_Test_REST_Controller_Testcase {
 
 	public function test_get_items_offset() {
 		wp_set_current_user( self::$user );
-		// 9 users created in wpSetUpBeforeClass(), plus default user.
-		$this->factory->user->create();
+
 		$request = new WP_REST_Request( 'GET', '/wp/v2/users' );
+		$request->set_param( 'per_page', self::$per_page );
 		$request->set_param( 'offset', 1 );
 		$response = rest_get_server()->dispatch( $request );
-		$this->assertCount( 10, $response->get_data() );
-		// 'offset' works with 'per_page'
+		$this->assertCount( self::$total_users - 1, $response->get_data() );
+
+		// 'offset' works with 'per_page'.
 		$request->set_param( 'per_page', 2 );
 		$response = rest_get_server()->dispatch( $request );
 		$this->assertCount( 2, $response->get_data() );
-		// 'offset' takes priority over 'page'
+
+		// 'offset' takes priority over 'page'.
 		$request->set_param( 'page', 3 );
 		$response = rest_get_server()->dispatch( $request );
 		$this->assertCount( 2, $response->get_data() );
-		// 'offset' invalid value should error
+
+		// Invalid 'offset' should error.
 		$request->set_param( 'offset', 'moreplease' );
 		$response = rest_get_server()->dispatch( $request );
 		$this->assertErrorResponse( 'rest_invalid_param', $response, 400 );
@@ -564,51 +588,62 @@ class WP_Test_REST_Users_Controller extends WP_Test_REST_Controller_Testcase {
 
 	public function test_get_items_include_query() {
 		wp_set_current_user( self::$user );
-		$id1     = $this->factory->user->create();
-		$id2     = $this->factory->user->create();
-		$id3     = $this->factory->user->create();
+
+		$id1 = $this->factory->user->create();
+		$id2 = $this->factory->user->create();
+
 		$request = new WP_REST_Request( 'GET', '/wp/v2/users' );
-		// Orderby=>asc
-		$request->set_param( 'include', array( $id3, $id1 ) );
+
+		// 'orderby' => 'asc'.
+		$request->set_param( 'include', array( $id2, $id1 ) );
 		$response = rest_get_server()->dispatch( $request );
 		$data     = $response->get_data();
-		$this->assertEquals( 2, count( $data ) );
-		$this->assertEquals( $id1, $data[0]['id'] );
-		// Orderby=>include
+		$this->assertSame( 2, count( $data ) );
+		$this->assertSame( $id1, $data[0]['id'] );
+
+		// 'orderby' => 'include'.
 		$request->set_param( 'orderby', 'include' );
 		$response = rest_get_server()->dispatch( $request );
 		$data     = $response->get_data();
-		$this->assertEquals( 2, count( $data ) );
-		$this->assertEquals( $id3, $data[0]['id'] );
-		// Invalid include should fail
+		$this->assertSame( 2, count( $data ) );
+		$this->assertSame( $id2, $data[0]['id'] );
+
+		// Invalid 'include' should error.
 		$request->set_param( 'include', 'invalid' );
 		$response = rest_get_server()->dispatch( $request );
 		$this->assertErrorResponse( 'rest_invalid_param', $response, 400 );
-		// No privileges
-		$request->set_param( 'include', array( $id3, $id1 ) );
+
+		// No privileges.
+		$request->set_param( 'include', array( $id2, $id1 ) );
 		wp_set_current_user( 0 );
 		$response = rest_get_server()->dispatch( $request );
 		$data     = $response->get_data();
-		$this->assertEquals( 0, count( $data ) );
+		$this->assertSame( 0, count( $data ) );
 
 	}
 
 	public function test_get_items_exclude_query() {
 		wp_set_current_user( self::$user );
-		$id1     = $this->factory->user->create();
-		$id2     = $this->factory->user->create();
+
+		$id1 = $this->factory->user->create();
+		$id2 = $this->factory->user->create();
+
 		$request = new WP_REST_Request( 'GET', '/wp/v2/users' );
-		$request->set_param( 'per_page', 20 ); // there are >10 users at this point
+		$request->set_param( 'per_page', self::$per_page ); // There are >10 users at this point.
 		$response = rest_get_server()->dispatch( $request );
 		$data     = $response->get_data();
-		$this->assertTrue( in_array( $id1, wp_list_pluck( $data, 'id' ), true ) );
-		$this->assertTrue( in_array( $id2, wp_list_pluck( $data, 'id' ), true ) );
+		$ids      = wp_list_pluck( $data, 'id' );
+		$this->assertTrue( in_array( $id1, $ids, true ) );
+		$this->assertTrue( in_array( $id2, $ids, true ) );
+
 		$request->set_param( 'exclude', array( $id2 ) );
 		$response = rest_get_server()->dispatch( $request );
 		$data     = $response->get_data();
-		$this->assertTrue( in_array( $id1, wp_list_pluck( $data, 'id' ), true ) );
-		$this->assertFalse( in_array( $id2, wp_list_pluck( $data, 'id' ), true ) );
-		// Invalid exlude value should error.
+		$ids      = wp_list_pluck( $data, 'id' );
+		$this->assertTrue( in_array( $id1, $ids, true ) );
+		$this->assertFalse( in_array( $id2, $ids, true ) );
+
+		// Invalid 'exclude' should error.
 		$request->set_param( 'exclude', 'none-of-those-please' );
 		$response = rest_get_server()->dispatch( $request );
 		$this->assertErrorResponse( 'rest_invalid_param', $response, 400 );
@@ -616,54 +651,61 @@ class WP_Test_REST_Users_Controller extends WP_Test_REST_Controller_Testcase {
 
 	public function test_get_items_search() {
 		wp_set_current_user( self::$user );
+
 		$request = new WP_REST_Request( 'GET', '/wp/v2/users' );
 		$request->set_param( 'search', 'yololololo' );
 		$response = rest_get_server()->dispatch( $request );
-		$this->assertEquals( 0, count( $response->get_data() ) );
+		$this->assertSame( 0, count( $response->get_data() ) );
+
 		$yolo_id = $this->factory->user->create( array( 'display_name' => 'yololololo' ) );
+
 		$request = new WP_REST_Request( 'GET', '/wp/v2/users' );
 		$request->set_param( 'search', 'yololololo' );
 		$response = rest_get_server()->dispatch( $request );
-		$this->assertEquals( 1, count( $response->get_data() ) );
-		// default to wildcard search
+		$this->assertSame( 1, count( $response->get_data() ) );
+		// Default to wildcard search.
 		$adam_id = $this->factory->user->create(
 			array(
 				'role'          => 'author',
 				'user_nicename' => 'adam',
 			)
 		);
+
 		$request = new WP_REST_Request( 'GET', '/wp/v2/users' );
 		$request->set_param( 'search', 'ada' );
 		$response = rest_get_server()->dispatch( $request );
 		$data     = $response->get_data();
-		$this->assertEquals( 1, count( $data ) );
-		$this->assertEquals( $adam_id, $data[0]['id'] );
+		$this->assertSame( 1, count( $data ) );
+		$this->assertSame( $adam_id, $data[0]['id'] );
 	}
 
 	public function test_get_items_slug_query() {
 		wp_set_current_user( self::$user );
+
 		$this->factory->user->create(
 			array(
 				'display_name' => 'foo',
 				'user_login'   => 'bar',
 			)
 		);
-		$id2     = $this->factory->user->create(
+		$id2 = $this->factory->user->create(
 			array(
 				'display_name' => 'Moo',
 				'user_login'   => 'foo',
 			)
 		);
+
 		$request = new WP_REST_Request( 'GET', '/wp/v2/users' );
 		$request->set_param( 'slug', 'foo' );
 		$response = rest_get_server()->dispatch( $request );
 		$data     = $response->get_data();
-		$this->assertEquals( 1, count( $data ) );
-		$this->assertEquals( $id2, $data[0]['id'] );
+		$this->assertSame( 1, count( $data ) );
+		$this->assertSame( $id2, $data[0]['id'] );
 	}
 
 	public function test_get_items_slug_array_query() {
 		wp_set_current_user( self::$user );
+
 		$id1 = $this->factory->user->create(
 			array(
 				'display_name' => 'Taco',
@@ -688,6 +730,7 @@ class WP_Test_REST_Users_Controller extends WP_Test_REST_Controller_Testcase {
 				'user_login'   => 'pizza',
 			)
 		);
+
 		$request = new WP_REST_Request( 'GET', '/wp/v2/users' );
 		$request->set_param(
 			'slug',
@@ -700,14 +743,15 @@ class WP_Test_REST_Users_Controller extends WP_Test_REST_Controller_Testcase {
 		$request->set_param( 'orderby', 'slug' );
 		$request->set_param( 'order', 'asc' );
 		$response = rest_get_server()->dispatch( $request );
-		$this->assertEquals( 200, $response->get_status() );
+		$this->assertSame( 200, $response->get_status() );
 		$data  = $response->get_data();
 		$slugs = wp_list_pluck( $data, 'slug' );
-		$this->assertEquals( array( 'burrito', 'enchilada', 'taco' ), $slugs );
+		$this->assertSame( array( 'burrito', 'enchilada', 'taco' ), $slugs );
 	}
 
 	public function test_get_items_slug_csv_query() {
 		wp_set_current_user( self::$user );
+
 		$id1 = $this->factory->user->create(
 			array(
 				'display_name' => 'Taco',
@@ -732,49 +776,60 @@ class WP_Test_REST_Users_Controller extends WP_Test_REST_Controller_Testcase {
 				'user_login'   => 'pizza',
 			)
 		);
+
 		$request = new WP_REST_Request( 'GET', '/wp/v2/users' );
 		$request->set_param( 'slug', 'taco,burrito , enchilada' );
 		$request->set_param( 'orderby', 'slug' );
 		$request->set_param( 'order', 'desc' );
 		$response = rest_get_server()->dispatch( $request );
-		$this->assertEquals( 200, $response->get_status() );
+		$this->assertSame( 200, $response->get_status() );
 		$data  = $response->get_data();
 		$slugs = wp_list_pluck( $data, 'slug' );
-		$this->assertEquals( array( 'taco', 'enchilada', 'burrito' ), $slugs );
+		$this->assertSame( array( 'taco', 'enchilada', 'burrito' ), $slugs );
 	}
 
-	// Note: Do not test using editor role as there is an editor role created in testing and it makes it hard to test this functionality.
+	/**
+	 * Note: Do not test using editor role as there is an editor role created in testing,
+	 * and it makes it hard to test this functionality.
+	 */
 	public function test_get_items_roles() {
 		wp_set_current_user( self::$user );
-		$tango   = $this->factory->user->create(
+
+		$tango = $this->factory->user->create(
 			array(
 				'display_name' => 'tango',
 				'role'         => 'subscriber',
 			)
 		);
-		$yolo    = $this->factory->user->create(
+		$yolo  = $this->factory->user->create(
 			array(
 				'display_name' => 'yolo',
 				'role'         => 'author',
 			)
 		);
+
 		$request = new WP_REST_Request( 'GET', '/wp/v2/users' );
 		$request->set_param( 'roles', 'author,subscriber' );
 		$response = rest_get_server()->dispatch( $request );
 		$data     = $response->get_data();
-		$this->assertEquals( 3, count( $data ) );
-		$this->assertEquals( $tango, $data[1]['id'] );
-		$this->assertEquals( $yolo, $data[2]['id'] );
+		$this->assertSame( 3, count( $data ) );
+		$this->assertSame( $tango, $data[1]['id'] );
+		$this->assertSame( $yolo, $data[2]['id'] );
+
 		$request->set_param( 'roles', 'author' );
 		$response = rest_get_server()->dispatch( $request );
 		$data     = $response->get_data();
-		$this->assertEquals( 1, count( $data ) );
-		$this->assertEquals( $yolo, $data[0]['id'] );
+		$this->assertSame( 1, count( $data ) );
+		$this->assertSame( $yolo, $data[0]['id'] );
+
 		wp_set_current_user( 0 );
+
 		$request->set_param( 'roles', 'author' );
 		$response = rest_get_server()->dispatch( $request );
 		$this->assertErrorResponse( 'rest_user_cannot_view', $response, 401 );
+
 		wp_set_current_user( self::$editor );
+
 		$request->set_param( 'roles', 'author' );
 		$response = rest_get_server()->dispatch( $request );
 		$this->assertErrorResponse( 'rest_user_cannot_view', $response, 403 );
@@ -782,45 +837,51 @@ class WP_Test_REST_Users_Controller extends WP_Test_REST_Controller_Testcase {
 
 	public function test_get_items_invalid_roles() {
 		wp_set_current_user( self::$user );
-		$lolz    = $this->factory->user->create(
+
+		$lolz = $this->factory->user->create(
 			array(
 				'display_name' => 'lolz',
 				'role'         => 'author',
 			)
 		);
+
 		$request = new WP_REST_Request( 'GET', '/wp/v2/users' );
 		$request->set_param( 'roles', 'ilovesteak,author' );
 		$response = rest_get_server()->dispatch( $request );
 		$data     = $response->get_data();
-		$this->assertEquals( 1, count( $data ) );
-		$this->assertEquals( $lolz, $data[0]['id'] );
+		$this->assertSame( 1, count( $data ) );
+		$this->assertSame( $lolz, $data[0]['id'] );
+
 		$request = new WP_REST_Request( 'GET', '/wp/v2/users' );
 		$request->set_param( 'roles', 'steakisgood' );
 		$response = rest_get_server()->dispatch( $request );
 		$data     = $response->get_data();
-		$this->assertEquals( 0, count( $data ) );
-		$this->assertEquals( array(), $data );
+		$this->assertSame( 0, count( $data ) );
+		$this->assertSame( array(), $data );
 	}
 
 	public function test_get_items_who_author_query() {
 		wp_set_current_user( self::$superadmin );
+
 		// First request should include subscriber in the set.
 		$request = new WP_REST_Request( 'GET', '/wp/v2/users' );
 		$request->set_param( 'search', 'subscriber' );
 		$response = rest_get_server()->dispatch( $request );
-		$this->assertEquals( 200, $response->get_status() );
+		$this->assertSame( 200, $response->get_status() );
 		$this->assertCount( 1, $response->get_data() );
+
 		// Second request should exclude subscriber.
 		$request = new WP_REST_Request( 'GET', '/wp/v2/users' );
 		$request->set_param( 'who', 'authors' );
 		$request->set_param( 'search', 'subscriber' );
 		$response = rest_get_server()->dispatch( $request );
-		$this->assertEquals( 200, $response->get_status() );
+		$this->assertSame( 200, $response->get_status() );
 		$this->assertCount( 0, $response->get_data() );
 	}
 
 	public function test_get_items_who_invalid_query() {
 		wp_set_current_user( self::$user );
+
 		$request = new WP_REST_Request( 'GET', '/wp/v2/users' );
 		$request->set_param( 'who', 'editor' );
 		$response = rest_get_server()->dispatch( $request );
@@ -833,6 +894,7 @@ class WP_Test_REST_Users_Controller extends WP_Test_REST_Controller_Testcase {
 	 */
 	public function test_get_items_who_unauthorized_query() {
 		wp_set_current_user( self::$subscriber );
+
 		$request = new WP_REST_Request( 'GET', '/wp/v2/users' );
 		$request->set_param( 'who', 'authors' );
 		$response = rest_get_server()->dispatch( $request );
@@ -841,16 +903,17 @@ class WP_Test_REST_Users_Controller extends WP_Test_REST_Controller_Testcase {
 
 	public function test_get_item() {
 		$user_id = $this->factory->user->create();
-		wp_set_current_user( self::$user );
 
-		$request = new WP_REST_Request( 'GET', sprintf( '/wp/v2/users/%d', $user_id ) );
+		wp_set_current_user( self::$user );
 
+		$request  = new WP_REST_Request( 'GET', sprintf( '/wp/v2/users/%d', $user_id ) );
 		$response = rest_get_server()->dispatch( $request );
 		$this->check_get_user_response( $response, 'embed' );
 	}
 
 	public function test_prepare_item() {
 		wp_set_current_user( self::$user );
+
 		$request = new WP_REST_Request;
 		$request->set_param( 'context', 'edit' );
 		$user = get_user_by( 'id', get_current_user_id() );
@@ -860,12 +923,13 @@ class WP_Test_REST_Users_Controller extends WP_Test_REST_Controller_Testcase {
 
 	public function test_prepare_item_limit_fields() {
 		wp_set_current_user( self::$user );
+
 		$request = new WP_REST_Request;
 		$request->set_param( 'context', 'edit' );
 		$request->set_param( '_fields', 'id,name' );
 		$user     = get_user_by( 'id', get_current_user_id() );
 		$response = $this->endpoint->prepare_item_for_response( $user, $request );
-		$this->assertEquals(
+		$this->assertSame(
 			array(
 				'id',
 				'name',
@@ -877,8 +941,7 @@ class WP_Test_REST_Users_Controller extends WP_Test_REST_Controller_Testcase {
 	public function test_get_user_avatar_urls() {
 		wp_set_current_user( self::$user );
 
-		$request = new WP_REST_Request( 'GET', sprintf( '/wp/v2/users/%d', self::$editor ) );
-
+		$request  = new WP_REST_Request( 'GET', sprintf( '/wp/v2/users/%d', self::$editor ) );
 		$response = rest_get_server()->dispatch( $request );
 
 		$data = $response->get_data();
@@ -887,11 +950,9 @@ class WP_Test_REST_Users_Controller extends WP_Test_REST_Controller_Testcase {
 		$this->assertArrayHasKey( 96, $data['avatar_urls'] );
 
 		$user = get_user_by( 'id', self::$editor );
-		/**
-		 * Ignore the subdomain, since 'get_avatar_url randomly sets the Gravatar
-		 * server when building the url string.
-		 */
-		$this->assertEquals( substr( get_avatar_url( $user->user_email ), 9 ), substr( $data['avatar_urls'][96], 9 ) );
+		// Ignore the subdomain, since get_avatar_url() randomly sets
+		// the Gravatar server when building the URL string.
+		$this->assertSame( substr( get_avatar_url( $user->user_email ), 9 ), substr( $data['avatar_urls'][96], 9 ) );
 	}
 
 	public function test_get_user_invalid_id() {
@@ -905,6 +966,7 @@ class WP_Test_REST_Users_Controller extends WP_Test_REST_Controller_Testcase {
 
 	public function test_get_user_empty_capabilities() {
 		wp_set_current_user( self::$user );
+
 		$this->allow_user_to_manage_multisite();
 
 		$lolz = $this->factory->user->create(
@@ -913,8 +975,10 @@ class WP_Test_REST_Users_Controller extends WP_Test_REST_Controller_Testcase {
 				'roles'        => '',
 			)
 		);
+
 		delete_user_option( $lolz, 'capabilities' );
 		delete_user_option( $lolz, 'user_level' );
+
 		$request = new WP_REST_Request( 'GET', '/wp/v2/users/' . $lolz );
 		$request->set_param( 'context', 'edit' );
 		$response = rest_get_server()->dispatch( $request );
@@ -931,6 +995,7 @@ class WP_Test_REST_Users_Controller extends WP_Test_REST_Controller_Testcase {
 
 	public function test_cannot_get_item_without_permission() {
 		wp_set_current_user( self::$editor );
+
 		$request  = new WP_REST_Request( 'GET', sprintf( '/wp/v2/users/%d', self::$user ) );
 		$response = rest_get_server()->dispatch( $request );
 		$this->assertErrorResponse( 'rest_user_cannot_view', $response, 403 );
@@ -939,20 +1004,21 @@ class WP_Test_REST_Users_Controller extends WP_Test_REST_Controller_Testcase {
 	public function test_can_get_item_author_of_rest_true_public_true_unauthenticated() {
 		$request  = new WP_REST_Request( 'GET', sprintf( '/wp/v2/users/%d', self::$authors['r_true_p_true'] ) );
 		$response = rest_get_server()->dispatch( $request );
-		$this->assertEquals( 200, $response->get_status() );
+		$this->assertSame( 200, $response->get_status() );
 	}
 
 	public function test_can_get_item_author_of_rest_true_public_true_authenticated() {
 		wp_set_current_user( self::$editor );
+
 		$request  = new WP_REST_Request( 'GET', sprintf( '/wp/v2/users/%d', self::$authors['r_true_p_true'] ) );
 		$response = rest_get_server()->dispatch( $request );
-		$this->assertEquals( 200, $response->get_status() );
+		$this->assertSame( 200, $response->get_status() );
 	}
 
 	public function test_can_get_item_author_of_rest_true_public_false() {
 		$request  = new WP_REST_Request( 'GET', sprintf( '/wp/v2/users/%d', self::$authors['r_true_p_false'] ) );
 		$response = rest_get_server()->dispatch( $request );
-		$this->assertEquals( 200, $response->get_status() );
+		$this->assertSame( 200, $response->get_status() );
 	}
 
 	public function test_cannot_get_item_author_of_rest_false_public_true_unauthenticated() {
@@ -963,6 +1029,7 @@ class WP_Test_REST_Users_Controller extends WP_Test_REST_Controller_Testcase {
 
 	public function test_cannot_get_item_author_of_rest_false_public_true_without_permission() {
 		wp_set_current_user( self::$editor );
+
 		$request  = new WP_REST_Request( 'GET', sprintf( '/wp/v2/users/%d', self::$authors['r_false_p_true'] ) );
 		$response = rest_get_server()->dispatch( $request );
 		$this->assertErrorResponse( 'rest_user_cannot_view', $response, 403 );
@@ -977,7 +1044,7 @@ class WP_Test_REST_Users_Controller extends WP_Test_REST_Controller_Testcase {
 	public function test_can_get_item_author_of_post() {
 		$request  = new WP_REST_Request( 'GET', sprintf( '/wp/v2/users/%d', self::$editor ) );
 		$response = rest_get_server()->dispatch( $request );
-		$this->assertEquals( 200, $response->get_status() );
+		$this->assertSame( 200, $response->get_status() );
 	}
 
 	public function test_cannot_get_item_author_of_draft() {
@@ -992,12 +1059,15 @@ class WP_Test_REST_Users_Controller extends WP_Test_REST_Controller_Testcase {
 				'role' => 'author',
 			)
 		);
-		$this->post_id   = $this->factory->post->create(
+
+		$this->post_id = $this->factory->post->create(
 			array(
 				'post_author' => $this->author_id,
 			)
 		);
+
 		wp_set_current_user( 0 );
+
 		$request  = new WP_REST_Request( 'GET', sprintf( '/wp/v2/users/%d', $this->author_id ) );
 		$response = rest_get_server()->dispatch( $request );
 		$this->check_get_user_response( $response, 'embed' );
@@ -1009,27 +1079,31 @@ class WP_Test_REST_Users_Controller extends WP_Test_REST_Controller_Testcase {
 				'role' => 'author',
 			)
 		);
+
 		wp_set_current_user( 0 );
+
 		$request  = new WP_REST_Request( 'GET', sprintf( '/wp/v2/users/%d', $this->author_id ) );
 		$response = rest_get_server()->dispatch( $request );
-		$this->assertEquals( 401, $response->get_status() );
+		$this->assertSame( 401, $response->get_status() );
+
 		$this->post_id = $this->factory->post->create(
 			array(
 				'post_author' => $this->author_id,
 				'post_type'   => 'page',
 			)
 		);
-		$response      = rest_get_server()->dispatch( $request );
+
+		$response = rest_get_server()->dispatch( $request );
 		$this->check_get_user_response( $response, 'embed' );
 	}
 
 	public function test_get_user_with_edit_context() {
 		$user_id = $this->factory->user->create();
+
 		$this->allow_user_to_manage_multisite();
 
 		$request = new WP_REST_Request( 'GET', sprintf( '/wp/v2/users/%d', $user_id ) );
 		$request->set_param( 'context', 'edit' );
-
 		$response = rest_get_server()->dispatch( $request );
 		$this->check_get_user_response( $response, 'edit' );
 	}
@@ -1040,12 +1114,15 @@ class WP_Test_REST_Users_Controller extends WP_Test_REST_Controller_Testcase {
 				'role' => 'author',
 			)
 		);
-		$this->post_id   = $this->factory->post->create(
+
+		$this->post_id = $this->factory->post->create(
 			array(
 				'post_author' => $this->author_id,
 			)
 		);
+
 		wp_set_current_user( 0 );
+
 		$request = new WP_REST_Request( 'GET', sprintf( '/wp/v2/users/%d', $this->author_id ) );
 		$request->set_param( 'context', 'edit' );
 		$response = rest_get_server()->dispatch( $request );
@@ -1055,29 +1132,29 @@ class WP_Test_REST_Users_Controller extends WP_Test_REST_Controller_Testcase {
 	public function test_get_current_user() {
 		wp_set_current_user( self::$user );
 
-		$request = new WP_REST_Request( 'GET', '/wp/v2/users/me' );
-
+		$request  = new WP_REST_Request( 'GET', '/wp/v2/users/me' );
 		$response = rest_get_server()->dispatch( $request );
-		$this->assertEquals( 200, $response->get_status() );
+		$this->assertSame( 200, $response->get_status() );
 		$this->check_get_user_response( $response, 'view' );
 
 		$headers = $response->get_headers();
 		$this->assertArrayNotHasKey( 'Location', $headers );
 
 		$links = $response->get_links();
-		$this->assertEquals( rest_url( 'wp/v2/users/' . self::$user ), $links['self'][0]['href'] );
+		$this->assertSame( rest_url( 'wp/v2/users/' . self::$user ), $links['self'][0]['href'] );
 	}
 
 	public function test_get_current_user_without_permission() {
 		wp_set_current_user( 0 );
+
 		$request  = new WP_REST_Request( 'GET', '/wp/v2/users/me' );
 		$response = rest_get_server()->dispatch( $request );
-
 		$this->assertErrorResponse( 'rest_not_logged_in', $response, 401 );
 	}
 
 	public function test_create_item() {
 		$this->allow_user_to_manage_multisite();
+
 		wp_set_current_user( self::$user );
 
 		$params = array(
@@ -1095,16 +1172,17 @@ class WP_Test_REST_Users_Controller extends WP_Test_REST_Controller_Testcase {
 		$request = new WP_REST_Request( 'POST', '/wp/v2/users' );
 		$request->add_header( 'content-type', 'application/x-www-form-urlencoded' );
 		$request->set_body_params( $params );
-
 		$response = rest_get_server()->dispatch( $request );
-		$data     = $response->get_data();
-		$this->assertEquals( 'http://example.com', $data['url'] );
-		$this->assertEquals( array( 'editor' ), $data['roles'] );
+
+		$data = $response->get_data();
+		$this->assertSame( 'http://example.com', $data['url'] );
+		$this->assertSame( array( 'editor' ), $data['roles'] );
 		$this->check_add_edit_user_response( $response );
 	}
 
 	public function test_create_item_invalid_username() {
 		$this->allow_user_to_manage_multisite();
+
 		wp_set_current_user( self::$user );
 
 		$params = array(
@@ -1119,7 +1197,7 @@ class WP_Test_REST_Users_Controller extends WP_Test_REST_Controller_Testcase {
 			'url'         => 'http://example.com',
 		);
 
-		// Username rules are different (more strict) for multisite; see `wpmu_validate_user_signup`
+		// Username rules are different (more strict) for multisite; see `wpmu_validate_user_signup`.
 		if ( is_multisite() ) {
 			$params['username'] = 'no-dashes-allowed';
 		}
@@ -1127,22 +1205,22 @@ class WP_Test_REST_Users_Controller extends WP_Test_REST_Controller_Testcase {
 		$request = new WP_REST_Request( 'POST', '/wp/v2/users' );
 		$request->add_header( 'content-type', 'application/x-www-form-urlencoded' );
 		$request->set_body_params( $params );
-
 		$response = rest_get_server()->dispatch( $request );
 		$this->assertErrorResponse( 'rest_invalid_param', $response, 400 );
 
 		$data = $response->get_data();
+
 		if ( is_multisite() ) {
 			$this->assertInternalType( 'array', $data['additional_errors'] );
 			$this->assertCount( 1, $data['additional_errors'] );
 			$error = $data['additional_errors'][0];
-			$this->assertEquals( 'user_name', $error['code'] );
-			$this->assertEquals( 'Usernames can only contain lowercase letters (a-z) and numbers.', $error['message'] );
+			$this->assertSame( 'user_name', $error['code'] );
+			$this->assertSame( 'Usernames can only contain lowercase letters (a-z) and numbers.', $error['message'] );
 		} else {
 			$this->assertInternalType( 'array', $data['data']['params'] );
 			$errors = $data['data']['params'];
 			$this->assertInternalType( 'string', $errors['username'] );
-			$this->assertEquals( 'Username contains invalid characters.', $errors['username'] );
+			$this->assertSame( 'This username is invalid because it uses illegal characters. Please enter a valid username.', $errors['username'] );
 		}
 	}
 
@@ -1152,6 +1230,7 @@ class WP_Test_REST_Users_Controller extends WP_Test_REST_Controller_Testcase {
 
 	public function test_create_item_illegal_username() {
 		$this->allow_user_to_manage_multisite();
+
 		wp_set_current_user( self::$user );
 
 		add_filter( 'illegal_user_logins', array( $this, 'get_illegal_user_logins' ) );
@@ -1171,7 +1250,6 @@ class WP_Test_REST_Users_Controller extends WP_Test_REST_Controller_Testcase {
 		$request = new WP_REST_Request( 'POST', '/wp/v2/users' );
 		$request->add_header( 'content-type', 'application/x-www-form-urlencoded' );
 		$request->set_body_params( $params );
-
 		$response = rest_get_server()->dispatch( $request );
 
 		remove_filter( 'illegal_user_logins', array( $this, 'get_illegal_user_logins' ) );
@@ -1182,7 +1260,7 @@ class WP_Test_REST_Users_Controller extends WP_Test_REST_Controller_Testcase {
 		$this->assertInternalType( 'array', $data['data']['params'] );
 		$errors = $data['data']['params'];
 		$this->assertInternalType( 'string', $errors['username'] );
-		$this->assertEquals( 'Sorry, that username is not allowed.', $errors['username'] );
+		$this->assertSame( 'Sorry, that username is not allowed.', $errors['username'] );
 	}
 
 	/**
@@ -1310,15 +1388,16 @@ class WP_Test_REST_Users_Controller extends WP_Test_REST_Controller_Testcase {
 			// Check the code matches one we know.
 			$this->assertContains( $error['code'], array( 'user_name', 'user_email' ) );
 			if ( 'user_name' === $error['code'] ) {
-				$this->assertEquals( 'Sorry, that username already exists!', $error['message'] );
+				$this->assertSame( 'Sorry, that username already exists!', $error['message'] );
 			} else {
-				$this->assertEquals( 'Sorry, that email address is already used!', $error['message'] );
+				$this->assertSame( 'Sorry, that email address is already used!', $error['message'] );
 			}
 		}
 	}
 
 	public function test_json_create_user() {
 		$this->allow_user_to_manage_multisite();
+
 		wp_set_current_user( self::$user );
 
 		$params = array(
@@ -1330,8 +1409,8 @@ class WP_Test_REST_Users_Controller extends WP_Test_REST_Controller_Testcase {
 		$request = new WP_REST_Request( 'POST', '/wp/v2/users' );
 		$request->add_header( 'content-type', 'application/json' );
 		$request->set_body( wp_json_encode( $params ) );
-
 		$response = rest_get_server()->dispatch( $request );
+
 		$this->check_add_edit_user_response( $response );
 	}
 
@@ -1354,6 +1433,7 @@ class WP_Test_REST_Users_Controller extends WP_Test_REST_Controller_Testcase {
 
 	public function test_create_user_invalid_id() {
 		$this->allow_user_to_manage_multisite();
+
 		wp_set_current_user( self::$user );
 
 		$params = array(
@@ -1373,6 +1453,7 @@ class WP_Test_REST_Users_Controller extends WP_Test_REST_Controller_Testcase {
 
 	public function test_create_user_invalid_email() {
 		$this->allow_user_to_manage_multisite();
+
 		wp_set_current_user( self::$user );
 
 		$params = array(
@@ -1391,6 +1472,7 @@ class WP_Test_REST_Users_Controller extends WP_Test_REST_Controller_Testcase {
 
 	public function test_create_user_invalid_role() {
 		$this->allow_user_to_manage_multisite();
+
 		wp_set_current_user( self::$user );
 
 		$params = array(
@@ -1419,7 +1501,9 @@ class WP_Test_REST_Users_Controller extends WP_Test_REST_Controller_Testcase {
 				'locale'     => 'en_US',
 			)
 		);
+
 		$this->allow_user_to_manage_multisite();
+
 		wp_set_current_user( self::$user );
 
 		$userdata  = get_userdata( $user_id );
@@ -1434,40 +1518,42 @@ class WP_Test_REST_Users_Controller extends WP_Test_REST_Controller_Testcase {
 		$request = new WP_REST_Request( 'PUT', sprintf( '/wp/v2/users/%d', $user_id ) );
 		$request->add_header( 'content-type', 'application/x-www-form-urlencoded' );
 		$request->set_body_params( $_POST );
-
 		$response = rest_get_server()->dispatch( $request );
+
 		$this->check_add_edit_user_response( $response, true );
 
-		// Check that the name has been updated correctly
+		// Check that the name has been updated correctly.
 		$new_data = $response->get_data();
-		$this->assertEquals( 'New Name', $new_data['first_name'] );
+		$this->assertSame( 'New Name', $new_data['first_name'] );
 		$user = get_userdata( $user_id );
-		$this->assertEquals( 'New Name', $user->first_name );
+		$this->assertSame( 'New Name', $user->first_name );
 
-		$this->assertEquals( 'http://google.com', $new_data['url'] );
-		$this->assertEquals( 'http://google.com', $user->user_url );
-		$this->assertEquals( 'de_DE', $user->locale );
+		$this->assertSame( 'http://google.com', $new_data['url'] );
+		$this->assertSame( 'http://google.com', $user->user_url );
+		$this->assertSame( 'de_DE', $user->locale );
 
 		// Check that we haven't inadvertently changed the user's password,
 		// as per https://core.trac.wordpress.org/ticket/21429
-		$this->assertEquals( $pw_before, $user->user_pass );
+		$this->assertSame( $pw_before, $user->user_pass );
 	}
 
 	public function test_update_item_no_change() {
 		$this->allow_user_to_manage_multisite();
+
 		wp_set_current_user( self::$user );
+
 		$user = get_userdata( self::$editor );
 
 		$request = new WP_REST_Request( 'PUT', sprintf( '/wp/v2/users/%d', self::$editor ) );
 		$request->set_param( 'slug', $user->user_nicename );
 
-		// Run twice to make sure that the update still succeeds even if no DB
-		// rows are updated.
+		// Run twice to make sure that the update still succeeds
+		// even if no DB rows are updated.
 		$response = rest_get_server()->dispatch( $request );
-		$this->assertEquals( 200, $response->get_status() );
+		$this->assertSame( 200, $response->get_status() );
 
 		$response = rest_get_server()->dispatch( $request );
-		$this->assertEquals( 200, $response->get_status() );
+		$this->assertSame( 200, $response->get_status() );
 	}
 
 	public function test_update_item_existing_email() {
@@ -1483,14 +1569,16 @@ class WP_Test_REST_Users_Controller extends WP_Test_REST_Controller_Testcase {
 				'user_email' => 'testjson2@example.com',
 			)
 		);
+
 		$this->allow_user_to_manage_multisite();
+
 		wp_set_current_user( self::$user );
 
 		$request = new WP_REST_Request( 'PUT', '/wp/v2/users/' . $user2 );
 		$request->set_param( 'email', 'testjson@example.com' );
 		$response = rest_get_server()->dispatch( $request );
 		$this->assertInstanceOf( 'WP_Error', $response->as_error() );
-		$this->assertEquals( 'rest_user_invalid_email', $response->as_error()->get_error_code() );
+		$this->assertSame( 'rest_user_invalid_email', $response->as_error()->get_error_code() );
 	}
 
 	/**
@@ -1508,8 +1596,8 @@ class WP_Test_REST_Users_Controller extends WP_Test_REST_Controller_Testcase {
 		$response = rest_get_server()->dispatch( $request );
 		$data     = $response->get_data();
 
-		$this->assertEquals( 200, $response->get_status() );
-		$this->assertEquals( $updated_email_with_case_change, $data['email'] );
+		$this->assertSame( 200, $response->get_status() );
+		$this->assertSame( $updated_email_with_case_change, $data['email'] );
 	}
 
 	/**
@@ -1528,7 +1616,7 @@ class WP_Test_REST_Users_Controller extends WP_Test_REST_Controller_Testcase {
 		$response = rest_get_server()->dispatch( $request );
 		$data     = $response->get_data();
 
-		$this->assertEquals( 400, $response->get_status() );
+		$this->assertSame( 400, $response->get_status() );
 		$this->assertSame( 'rest_user_invalid_email', $data['code'] );
 	}
 
@@ -1539,14 +1627,16 @@ class WP_Test_REST_Users_Controller extends WP_Test_REST_Controller_Testcase {
 				'user_email' => 'testjson@example.com',
 			)
 		);
+
 		$this->allow_user_to_manage_multisite();
+
 		wp_set_current_user( self::$user );
 
 		$request = new WP_REST_Request( 'PUT', '/wp/v2/users/' . $user1 );
 		$request->set_param( 'locale', 'klingon' );
 		$response = rest_get_server()->dispatch( $request );
 		$this->assertInstanceOf( 'WP_Error', $response->as_error() );
-		$this->assertEquals( 'rest_invalid_param', $response->as_error()->get_error_code() );
+		$this->assertSame( 'rest_invalid_param', $response->as_error()->get_error_code() );
 	}
 
 	public function test_update_item_en_US_locale() {
@@ -1556,7 +1646,9 @@ class WP_Test_REST_Users_Controller extends WP_Test_REST_Controller_Testcase {
 				'user_email' => 'testjson@example.com',
 			)
 		);
+
 		$this->allow_user_to_manage_multisite();
+
 		wp_set_current_user( self::$user );
 
 		$request = new WP_REST_Request( 'PUT', '/wp/v2/users/' . $user_id );
@@ -1565,7 +1657,7 @@ class WP_Test_REST_Users_Controller extends WP_Test_REST_Controller_Testcase {
 		$this->check_add_edit_user_response( $response, true );
 
 		$user = get_userdata( $user_id );
-		$this->assertEquals( 'en_US', $user->locale );
+		$this->assertSame( 'en_US', $user->locale );
 	}
 
 	/**
@@ -1579,7 +1671,9 @@ class WP_Test_REST_Users_Controller extends WP_Test_REST_Controller_Testcase {
 				'locale'     => 'de_DE',
 			)
 		);
+
 		$this->allow_user_to_manage_multisite();
+
 		wp_set_current_user( self::$user );
 
 		$request = new WP_REST_Request( 'PUT', '/wp/v2/users/' . $user_id );
@@ -1588,9 +1682,9 @@ class WP_Test_REST_Users_Controller extends WP_Test_REST_Controller_Testcase {
 		$this->check_add_edit_user_response( $response, true );
 
 		$data = $response->get_data();
-		$this->assertEquals( get_locale(), $data['locale'] );
+		$this->assertSame( get_locale(), $data['locale'] );
 		$user = get_userdata( $user_id );
-		$this->assertEquals( '', $user->locale );
+		$this->assertSame( '', $user->locale );
 	}
 
 	public function test_update_item_username_attempt() {
@@ -1606,14 +1700,16 @@ class WP_Test_REST_Users_Controller extends WP_Test_REST_Controller_Testcase {
 				'user_email' => 'testjson2@example.com',
 			)
 		);
+
 		$this->allow_user_to_manage_multisite();
+
 		wp_set_current_user( self::$user );
 
 		$request = new WP_REST_Request( 'PUT', '/wp/v2/users/' . $user2 );
 		$request->set_param( 'username', 'test_json_user' );
 		$response = rest_get_server()->dispatch( $request );
 		$this->assertInstanceOf( 'WP_Error', $response->as_error() );
-		$this->assertEquals( 'rest_user_invalid_argument', $response->as_error()->get_error_code() );
+		$this->assertSame( 'rest_user_invalid_argument', $response->as_error()->get_error_code() );
 	}
 
 	public function test_update_item_existing_nicename() {
@@ -1629,14 +1725,16 @@ class WP_Test_REST_Users_Controller extends WP_Test_REST_Controller_Testcase {
 				'user_email' => 'testjson2@example.com',
 			)
 		);
+
 		$this->allow_user_to_manage_multisite();
+
 		wp_set_current_user( self::$user );
 
 		$request = new WP_REST_Request( 'PUT', '/wp/v2/users/' . $user2 );
 		$request->set_param( 'slug', 'test_json_user' );
 		$response = rest_get_server()->dispatch( $request );
 		$this->assertInstanceOf( 'WP_Error', $response->as_error() );
-		$this->assertEquals( 'rest_user_invalid_slug', $response->as_error()->get_error_code() );
+		$this->assertSame( 'rest_user_invalid_slug', $response->as_error()->get_error_code() );
 	}
 
 	public function test_json_update_user() {
@@ -1649,7 +1747,9 @@ class WP_Test_REST_Users_Controller extends WP_Test_REST_Controller_Testcase {
 				'last_name'  => 'Original Last',
 			)
 		);
+
 		$this->allow_user_to_manage_multisite();
+
 		wp_set_current_user( self::$user );
 
 		$params = array(
@@ -1669,23 +1769,24 @@ class WP_Test_REST_Users_Controller extends WP_Test_REST_Controller_Testcase {
 		$response = rest_get_server()->dispatch( $request );
 		$this->check_add_edit_user_response( $response, true );
 
-		// Check that the name has been updated correctly
+		// Check that the name has been updated correctly.
 		$new_data = $response->get_data();
-		$this->assertEquals( 'JSON Name', $new_data['first_name'] );
-		$this->assertEquals( 'New Last', $new_data['last_name'] );
+		$this->assertSame( 'JSON Name', $new_data['first_name'] );
+		$this->assertSame( 'New Last', $new_data['last_name'] );
 		$user = get_userdata( $user_id );
-		$this->assertEquals( 'JSON Name', $user->first_name );
-		$this->assertEquals( 'New Last', $user->last_name );
+		$this->assertSame( 'JSON Name', $user->first_name );
+		$this->assertSame( 'New Last', $user->last_name );
 
 		// Check that we haven't inadvertently changed the user's password,
 		// as per https://core.trac.wordpress.org/ticket/21429
-		$this->assertEquals( $pw_before, $user->user_pass );
+		$this->assertSame( $pw_before, $user->user_pass );
 	}
 
 	public function test_update_user_role() {
 		$user_id = $this->factory->user->create( array( 'role' => 'administrator' ) );
 
 		wp_set_current_user( self::$user );
+
 		$this->allow_user_to_manage_multisite();
 
 		$request = new WP_REST_Request( 'PUT', sprintf( '/wp/v2/users/%d', $user_id ) );
@@ -1694,7 +1795,7 @@ class WP_Test_REST_Users_Controller extends WP_Test_REST_Controller_Testcase {
 
 		$new_data = $response->get_data();
 
-		$this->assertEquals( 'editor', $new_data['roles'][0] );
+		$this->assertSame( 'editor', $new_data['roles'][0] );
 		$this->assertNotEquals( 'administrator', $new_data['roles'][0] );
 
 		$user = get_userdata( $user_id );
@@ -1706,6 +1807,7 @@ class WP_Test_REST_Users_Controller extends WP_Test_REST_Controller_Testcase {
 		$user_id = $this->factory->user->create( array( 'role' => 'administrator' ) );
 
 		wp_set_current_user( self::$user );
+
 		$this->allow_user_to_manage_multisite();
 
 		$request = new WP_REST_Request( 'PUT', sprintf( '/wp/v2/users/%d', $user_id ) );
@@ -1714,7 +1816,7 @@ class WP_Test_REST_Users_Controller extends WP_Test_REST_Controller_Testcase {
 
 		$new_data = $response->get_data();
 
-		$this->assertEquals( array( 'author', 'editor' ), $new_data['roles'] );
+		$this->assertSame( array( 'author', 'editor' ), $new_data['roles'] );
 
 		$user = get_userdata( $user_id );
 		$this->assertArrayHasKey( 'author', $user->caps );
@@ -1788,7 +1890,7 @@ class WP_Test_REST_Users_Controller extends WP_Test_REST_Controller_Testcase {
 		$response = rest_get_server()->dispatch( $request );
 
 		$new_data = $response->get_data();
-		$this->assertEquals( 'editor', $new_data['roles'][0] );
+		$this->assertSame( 'editor', $new_data['roles'][0] );
 		$this->assertNotEquals( 'administrator', $new_data['roles'][0] );
 
 		$user_id = $this->factory->user->create( array( 'role' => 'administrator' ) );
@@ -1802,13 +1904,14 @@ class WP_Test_REST_Users_Controller extends WP_Test_REST_Controller_Testcase {
 		$response = rest_get_server()->dispatch( $request );
 
 		$new_data = $response->get_data();
-		$this->assertEquals( 'editor', $new_data['roles'][0] );
+		$this->assertSame( 'editor', $new_data['roles'][0] );
 		$this->assertNotEquals( 'administrator', $new_data['roles'][0] );
 	}
 
 
 	public function test_update_user_role_invalid_role() {
 		wp_set_current_user( self::$user );
+
 		$this->allow_user_to_manage_multisite();
 
 		$request = new WP_REST_Request( 'PUT', sprintf( '/wp/v2/users/%d', self::$editor ) );
@@ -1858,10 +1961,11 @@ class WP_Test_REST_Users_Controller extends WP_Test_REST_Controller_Testcase {
 
 	public function test_update_user_invalid_id() {
 		$this->allow_user_to_manage_multisite();
+
 		wp_set_current_user( self::$user );
 
 		$params = array(
-			'id'       => '156',
+			'id'       => '0',
 			'username' => 'lisasimpson',
 			'password' => 'DavidHasselhoff',
 			'email'    => 'smartgirl63_@yahoo.com',
@@ -1886,6 +1990,7 @@ class WP_Test_REST_Users_Controller extends WP_Test_REST_Controller_Testcase {
 		);
 
 		wp_set_current_user( self::$editor );
+
 		$request = new WP_REST_Request( 'PUT', sprintf( '/wp/v2/users/%d', $user_id ) );
 		$request->set_param( 'roles', array( 'editor' ) );
 		$response = rest_get_server()->dispatch( $request );
@@ -1903,13 +2008,14 @@ class WP_Test_REST_Users_Controller extends WP_Test_REST_Controller_Testcase {
 		);
 
 		wp_set_current_user( self::$user );
+
 		$request = new WP_REST_Request( 'PUT', sprintf( '/wp/v2/users/%d', $user_id ) );
 		$request->set_param( 'roles', array( 'editor' ) );
 		$response = rest_get_server()->dispatch( $request );
-		$this->assertEquals( 200, $response->get_status() );
+		$this->assertSame( 200, $response->get_status() );
 
 		$new_data = $response->get_data();
-		$this->assertEquals( 'editor', $new_data['roles'][0] );
+		$this->assertSame( 'editor', $new_data['roles'][0] );
 	}
 
 	/**
@@ -1923,32 +2029,34 @@ class WP_Test_REST_Users_Controller extends WP_Test_REST_Controller_Testcase {
 		);
 
 		wp_set_current_user( self::$user );
+
 		$request = new WP_REST_Request( 'PUT', sprintf( '/wp/v2/users/%d', $user_id ) );
 		$request->set_param( 'roles', array( 'editor' ) );
 		$request->set_param( 'name', 'Short-Lived User' );
 		$response = rest_get_server()->dispatch( $request );
 
 		if ( is_multisite() ) {
-			// Site administrators can promote users, as verified by the
-			// previous test, but they cannot perform other user-editing
-			// operations.  This also tests the branch of logic that verifies
-			// that no parameters other than 'id' and 'roles' are specified for
-			// a roles update.
+			/*
+			 * Site administrators can promote users, as verified by the previous test,
+			 * but they cannot perform other user-editing operations.
+			 * This also tests the branch of logic that verifies that no parameters
+			 * other than 'id' and 'roles' are specified for a roles update.
+			 */
 			$this->assertErrorResponse( 'rest_cannot_edit', $response, 403 );
 		} else {
-			$this->assertEquals( 200, $response->get_status() );
+			$this->assertSame( 200, $response->get_status() );
 
 			$new_data = $response->get_data();
-			$this->assertEquals( 'editor', $new_data['roles'][0] );
+			$this->assertSame( 'editor', $new_data['roles'][0] );
 		}
 	}
 
 	public function test_update_item_invalid_password() {
 		$this->allow_user_to_manage_multisite();
+
 		wp_set_current_user( self::$user );
 
 		$request = new WP_REST_Request( 'PUT', sprintf( '/wp/v2/users/%d', self::$editor ) );
-
 		$request->set_param( 'password', 'no\\backslashes\\allowed' );
 		$response = rest_get_server()->dispatch( $request );
 		$this->assertErrorResponse( 'rest_invalid_param', $response, 400 );
@@ -1960,43 +2068,43 @@ class WP_Test_REST_Users_Controller extends WP_Test_REST_Controller_Testcase {
 
 	public function verify_user_roundtrip( $input = array(), $expected_output = array() ) {
 		if ( isset( $input['id'] ) ) {
-			// Existing user; don't try to create one
+			// Existing user; don't try to create one.
 			$user_id = $input['id'];
 		} else {
-			// Create a new user
+			// Create a new user.
 			$request = new WP_REST_Request( 'POST', '/wp/v2/users' );
 			foreach ( $input as $name => $value ) {
 				$request->set_param( $name, $value );
 			}
 			$request->set_param( 'email', 'cbg@androidsdungeon.com' );
 			$response = rest_get_server()->dispatch( $request );
-			$this->assertEquals( 201, $response->get_status() );
+			$this->assertSame( 201, $response->get_status() );
 			$actual_output = $response->get_data();
 
-			// Compare expected API output to actual API output
-			$this->assertEquals( $expected_output['username'], $actual_output['username'] );
-			$this->assertEquals( $expected_output['name'], $actual_output['name'] );
-			$this->assertEquals( $expected_output['first_name'], $actual_output['first_name'] );
-			$this->assertEquals( $expected_output['last_name'], $actual_output['last_name'] );
-			$this->assertEquals( $expected_output['url'], $actual_output['url'] );
-			$this->assertEquals( $expected_output['description'], $actual_output['description'] );
-			$this->assertEquals( $expected_output['nickname'], $actual_output['nickname'] );
+			// Compare expected API output to actual API output.
+			$this->assertSame( $expected_output['username'], $actual_output['username'] );
+			$this->assertSame( $expected_output['name'], $actual_output['name'] );
+			$this->assertSame( $expected_output['first_name'], $actual_output['first_name'] );
+			$this->assertSame( $expected_output['last_name'], $actual_output['last_name'] );
+			$this->assertSame( $expected_output['url'], $actual_output['url'] );
+			$this->assertSame( $expected_output['description'], $actual_output['description'] );
+			$this->assertSame( $expected_output['nickname'], $actual_output['nickname'] );
 
-			// Compare expected API output to WP internal values
+			// Compare expected API output to WP internal values.
 			$user = get_userdata( $actual_output['id'] );
-			$this->assertEquals( $expected_output['username'], $user->user_login );
-			$this->assertEquals( $expected_output['name'], $user->display_name );
-			$this->assertEquals( $expected_output['first_name'], $user->first_name );
-			$this->assertEquals( $expected_output['last_name'], $user->last_name );
-			$this->assertEquals( $expected_output['url'], $user->user_url );
-			$this->assertEquals( $expected_output['description'], $user->description );
-			$this->assertEquals( $expected_output['nickname'], $user->nickname );
+			$this->assertSame( $expected_output['username'], $user->user_login );
+			$this->assertSame( $expected_output['name'], $user->display_name );
+			$this->assertSame( $expected_output['first_name'], $user->first_name );
+			$this->assertSame( $expected_output['last_name'], $user->last_name );
+			$this->assertSame( $expected_output['url'], $user->user_url );
+			$this->assertSame( $expected_output['description'], $user->description );
+			$this->assertSame( $expected_output['nickname'], $user->nickname );
 			$this->assertTrue( wp_check_password( addslashes( $expected_output['password'] ), $user->user_pass ) );
 
 			$user_id = $actual_output['id'];
 		}
 
-		// Update the user
+		// Update the user.
 		$request = new WP_REST_Request( 'PUT', sprintf( '/wp/v2/users/%d', $user_id ) );
 		foreach ( $input as $name => $value ) {
 			if ( 'username' !== $name ) {
@@ -2004,37 +2112,38 @@ class WP_Test_REST_Users_Controller extends WP_Test_REST_Controller_Testcase {
 			}
 		}
 		$response = rest_get_server()->dispatch( $request );
-		$this->assertEquals( 200, $response->get_status() );
+		$this->assertSame( 200, $response->get_status() );
 		$actual_output = $response->get_data();
 
-		// Compare expected API output to actual API output
+		// Compare expected API output to actual API output.
 		if ( isset( $expected_output['username'] ) ) {
-			$this->assertEquals( $expected_output['username'], $actual_output['username'] );
+			$this->assertSame( $expected_output['username'], $actual_output['username'] );
 		}
-		$this->assertEquals( $expected_output['name'], $actual_output['name'] );
-		$this->assertEquals( $expected_output['first_name'], $actual_output['first_name'] );
-		$this->assertEquals( $expected_output['last_name'], $actual_output['last_name'] );
-		$this->assertEquals( $expected_output['url'], $actual_output['url'] );
-		$this->assertEquals( $expected_output['description'], $actual_output['description'] );
-		$this->assertEquals( $expected_output['nickname'], $actual_output['nickname'] );
-
-		// Compare expected API output to WP internal values
+		$this->assertSame( $expected_output['name'], $actual_output['name'] );
+		$this->assertSame( $expected_output['first_name'], $actual_output['first_name'] );
+		$this->assertSame( $expected_output['last_name'], $actual_output['last_name'] );
+		$this->assertSame( $expected_output['url'], $actual_output['url'] );
+		$this->assertSame( $expected_output['description'], $actual_output['description'] );
+		$this->assertSame( $expected_output['nickname'], $actual_output['nickname'] );
+
+		// Compare expected API output to WP internal values.
 		$user = get_userdata( $actual_output['id'] );
 		if ( isset( $expected_output['username'] ) ) {
-			$this->assertEquals( $expected_output['username'], $user->user_login );
+			$this->assertSame( $expected_output['username'], $user->user_login );
 		}
-		$this->assertEquals( $expected_output['name'], $user->display_name );
-		$this->assertEquals( $expected_output['first_name'], $user->first_name );
-		$this->assertEquals( $expected_output['last_name'], $user->last_name );
-		$this->assertEquals( $expected_output['url'], $user->user_url );
-		$this->assertEquals( $expected_output['description'], $user->description );
-		$this->assertEquals( $expected_output['nickname'], $user->nickname );
+		$this->assertSame( $expected_output['name'], $user->display_name );
+		$this->assertSame( $expected_output['first_name'], $user->first_name );
+		$this->assertSame( $expected_output['last_name'], $user->last_name );
+		$this->assertSame( $expected_output['url'], $user->user_url );
+		$this->assertSame( $expected_output['description'], $user->description );
+		$this->assertSame( $expected_output['nickname'], $user->nickname );
 		$this->assertTrue( wp_check_password( addslashes( $expected_output['password'] ), $user->user_pass ) );
 	}
 
 	public function test_user_roundtrip_as_editor() {
 		wp_set_current_user( self::$editor );
-		$this->assertEquals( ! is_multisite(), current_user_can( 'unfiltered_html' ) );
+
+		$this->assertSame( ! is_multisite(), current_user_can( 'unfiltered_html' ) );
 		$this->verify_user_roundtrip(
 			array(
 				'id'          => self::$editor,
@@ -2060,6 +2169,7 @@ class WP_Test_REST_Users_Controller extends WP_Test_REST_Controller_Testcase {
 
 	public function test_user_roundtrip_as_editor_html() {
 		wp_set_current_user( self::$editor );
+
 		if ( is_multisite() ) {
 			$this->assertFalse( current_user_can( 'unfiltered_html' ) );
 			$this->verify_user_roundtrip(
@@ -2111,6 +2221,7 @@ class WP_Test_REST_Users_Controller extends WP_Test_REST_Controller_Testcase {
 
 	public function test_user_roundtrip_as_superadmin() {
 		wp_set_current_user( self::$superadmin );
+
 		$this->assertTrue( current_user_can( 'unfiltered_html' ) );
 		$valid_username = is_multisite() ? 'noinvalidcharshere' : 'no-invalid-chars-here';
 		$this->verify_user_roundtrip(
@@ -2139,6 +2250,7 @@ class WP_Test_REST_Users_Controller extends WP_Test_REST_Controller_Testcase {
 
 	public function test_user_roundtrip_as_superadmin_html() {
 		wp_set_current_user( self::$superadmin );
+
 		$this->assertTrue( current_user_can( 'unfiltered_html' ) );
 		$valid_username = is_multisite() ? 'noinvalidcharshere' : 'no-invalid-chars-here';
 		$this->verify_user_roundtrip(
@@ -2169,9 +2281,10 @@ class WP_Test_REST_Users_Controller extends WP_Test_REST_Controller_Testcase {
 		$user_id = $this->factory->user->create( array( 'display_name' => 'Deleted User' ) );
 
 		$this->allow_user_to_manage_multisite();
+
 		wp_set_current_user( self::$user );
 
-		$userdata = get_userdata( $user_id ); // cache for later
+		$userdata = get_userdata( $user_id ); // Cache for later.
 		$request  = new WP_REST_Request( 'DELETE', sprintf( '/wp/v2/users/%d', $user_id ) );
 		$request->set_param( 'force', true );
 		$request->set_param( 'reassign', false );
@@ -2183,19 +2296,20 @@ class WP_Test_REST_Users_Controller extends WP_Test_REST_Controller_Testcase {
 			return;
 		}
 
-		$this->assertEquals( 200, $response->get_status() );
+		$this->assertSame( 200, $response->get_status() );
 		$data = $response->get_data();
 		$this->assertTrue( $data['deleted'] );
-		$this->assertEquals( 'Deleted User', $data['previous']['name'] );
+		$this->assertSame( 'Deleted User', $data['previous']['name'] );
 	}
 
 	public function test_delete_item_no_trash() {
 		$user_id = $this->factory->user->create( array( 'display_name' => 'Deleted User' ) );
 
 		$this->allow_user_to_manage_multisite();
+
 		wp_set_current_user( self::$user );
 
-		$userdata = get_userdata( $user_id ); // cache for later
+		$userdata = get_userdata( $user_id ); // Cache for later.
 
 		$request = new WP_REST_Request( 'DELETE', sprintf( '/wp/v2/users/%d', $user_id ) );
 		$request->set_param( 'reassign', false );
@@ -2213,7 +2327,7 @@ class WP_Test_REST_Users_Controller extends WP_Test_REST_Controller_Testcase {
 		$response = rest_get_server()->dispatch( $request );
 		$this->assertErrorResponse( 'rest_trash_not_supported', $response, 501 );
 
-		// Ensure the user still exists
+		// Ensure the user still exists.
 		$user = get_user_by( 'id', $user_id );
 		$this->assertNotEmpty( $user );
 	}
@@ -2241,10 +2355,10 @@ class WP_Test_REST_Users_Controller extends WP_Test_REST_Controller_Testcase {
 			return;
 		}
 
-		$this->assertEquals( 200, $response->get_status() );
+		$this->assertSame( 200, $response->get_status() );
 		$data = $response->get_data();
 		$this->assertTrue( $data['deleted'] );
-		$this->assertEquals( 'Deleted User', $data['previous']['name'] );
+		$this->assertSame( 'Deleted User', $data['previous']['name'] );
 	}
 
 	public function test_delete_current_item_no_trash() {
@@ -2275,7 +2389,7 @@ class WP_Test_REST_Users_Controller extends WP_Test_REST_Controller_Testcase {
 		$response = rest_get_server()->dispatch( $request );
 		$this->assertErrorResponse( 'rest_trash_not_supported', $response, 501 );
 
-		// Ensure the user still exists
+		// Ensure the user still exists.
 		$user = get_user_by( 'id', $user_id );
 		$this->assertNotEmpty( $user );
 	}
@@ -2284,6 +2398,7 @@ class WP_Test_REST_Users_Controller extends WP_Test_REST_Controller_Testcase {
 		$user_id = $this->factory->user->create();
 
 		$this->allow_user_to_manage_multisite();
+
 		wp_set_current_user( self::$editor );
 
 		$request          = new WP_REST_Request( 'DELETE', sprintf( '/wp/v2/users/%d', $user_id ) );
@@ -2303,6 +2418,7 @@ class WP_Test_REST_Users_Controller extends WP_Test_REST_Controller_Testcase {
 
 	public function test_delete_user_invalid_id() {
 		$this->allow_user_to_manage_multisite();
+
 		wp_set_current_user( self::$user );
 
 		$request          = new WP_REST_Request( 'DELETE', '/wp/v2/users/' . REST_TESTS_IMPOSSIBLY_HIGH_NUMBER );
@@ -2316,7 +2432,7 @@ class WP_Test_REST_Users_Controller extends WP_Test_REST_Controller_Testcase {
 	public function test_delete_user_reassign() {
 		$this->allow_user_to_manage_multisite();
 
-		// Test with a new user, to avoid any complications
+		// Test with a new user, to avoid any complications.
 		$user_id     = $this->factory->user->create();
 		$reassign_id = $this->factory->user->create();
 		$test_post   = $this->factory->post->create(
@@ -2325,12 +2441,13 @@ class WP_Test_REST_Users_Controller extends WP_Test_REST_Controller_Testcase {
 			)
 		);
 
-		// Sanity check to ensure the factory created the post correctly
+		// Sanity check to ensure the factory created the post correctly.
 		$post = get_post( $test_post );
 		$this->assertEquals( $user_id, $post->post_author );
 
-		// Delete our test user, and reassign to the new author
 		wp_set_current_user( self::$user );
+
+		// Delete our test user, and reassign to the new author.
 		$request          = new WP_REST_Request( 'DELETE', sprintf( '/wp/v2/users/%d', $user_id ) );
 		$request['force'] = true;
 		$request->set_param( 'reassign', $reassign_id );
@@ -2342,9 +2459,9 @@ class WP_Test_REST_Users_Controller extends WP_Test_REST_Controller_Testcase {
 			return;
 		}
 
-		$this->assertEquals( 200, $response->get_status() );
+		$this->assertSame( 200, $response->get_status() );
 
-		// Check that the post has been updated correctly
+		// Check that the post has been updated correctly.
 		$post = get_post( $test_post );
 		$this->assertEquals( $reassign_id, $post->post_author );
 	}
@@ -2353,6 +2470,7 @@ class WP_Test_REST_Users_Controller extends WP_Test_REST_Controller_Testcase {
 		$user_id = $this->factory->user->create();
 
 		$this->allow_user_to_manage_multisite();
+
 		wp_set_current_user( self::$user );
 
 		$request          = new WP_REST_Request( 'DELETE', sprintf( '/wp/v2/users/%d', $user_id ) );
@@ -2373,6 +2491,7 @@ class WP_Test_REST_Users_Controller extends WP_Test_REST_Controller_Testcase {
 		$user_id = $this->factory->user->create();
 
 		$this->allow_user_to_manage_multisite();
+
 		wp_set_current_user( self::$user );
 
 		$request          = new WP_REST_Request( 'DELETE', sprintf( '/wp/v2/users/%d', $user_id ) );
@@ -2387,6 +2506,7 @@ class WP_Test_REST_Users_Controller extends WP_Test_REST_Controller_Testcase {
 		$user_id = $this->factory->user->create();
 
 		$this->allow_user_to_manage_multisite();
+
 		wp_set_current_user( self::$user );
 
 		$test_post = $this->factory->post->create(
@@ -2407,13 +2527,14 @@ class WP_Test_REST_Users_Controller extends WP_Test_REST_Controller_Testcase {
 		}
 
 		$test_post = get_post( $test_post );
-		$this->assertEquals( 'trash', $test_post->post_status );
+		$this->assertSame( 'trash', $test_post->post_status );
 	}
 
 	public function test_delete_user_reassign_passed_as_string_false_trashes_post() {
 		$user_id = $this->factory->user->create();
 
 		$this->allow_user_to_manage_multisite();
+
 		wp_set_current_user( self::$user );
 
 		$test_post = $this->factory->post->create(
@@ -2434,13 +2555,14 @@ class WP_Test_REST_Users_Controller extends WP_Test_REST_Controller_Testcase {
 		}
 
 		$test_post = get_post( $test_post );
-		$this->assertEquals( 'trash', $test_post->post_status );
+		$this->assertSame( 'trash', $test_post->post_status );
 	}
 
 	public function test_delete_user_reassign_passed_as_empty_string_trashes_post() {
 		$user_id = $this->factory->user->create();
 
 		$this->allow_user_to_manage_multisite();
+
 		wp_set_current_user( self::$user );
 
 		$test_post = $this->factory->post->create(
@@ -2461,13 +2583,14 @@ class WP_Test_REST_Users_Controller extends WP_Test_REST_Controller_Testcase {
 		}
 
 		$test_post = get_post( $test_post );
-		$this->assertEquals( 'trash', $test_post->post_status );
+		$this->assertSame( 'trash', $test_post->post_status );
 	}
 
 	public function test_delete_user_reassign_passed_as_0_reassigns_author() {
 		$user_id = $this->factory->user->create();
 
 		$this->allow_user_to_manage_multisite();
+
 		wp_set_current_user( self::$user );
 
 		$test_post = $this->factory->post->create(
@@ -2497,7 +2620,7 @@ class WP_Test_REST_Users_Controller extends WP_Test_REST_Controller_Testcase {
 		$data       = $response->get_data();
 		$properties = $data['schema']['properties'];
 
-		$this->assertEquals( 19, count( $properties ) );
+		$this->assertSame( 19, count( $properties ) );
 		$this->assertArrayHasKey( 'avatar_urls', $properties );
 		$this->assertArrayHasKey( 'capabilities', $properties );
 		$this->assertArrayHasKey( 'description', $properties );
@@ -2556,22 +2679,21 @@ class WP_Test_REST_Users_Controller extends WP_Test_REST_Controller_Testcase {
 			)
 		);
 
-		$request = new WP_REST_Request( 'OPTIONS', '/wp/v2/users' );
-
+		$request  = new WP_REST_Request( 'OPTIONS', '/wp/v2/users' );
 		$response = rest_get_server()->dispatch( $request );
 		$data     = $response->get_data();
 
 		$this->assertArrayHasKey( 'my_custom_int', $data['schema']['properties'] );
-		$this->assertEquals( $schema, $data['schema']['properties']['my_custom_int'] );
+		$this->assertSame( $schema, $data['schema']['properties']['my_custom_int'] );
 
 		wp_set_current_user( 1 );
+
 		if ( is_multisite() ) {
 			$current_user = wp_get_current_user( 1 );
 			update_site_option( 'site_admins', array( $current_user->user_login ) );
 		}
 
-		$request = new WP_REST_Request( 'GET', '/wp/v2/users/1' );
-
+		$request  = new WP_REST_Request( 'GET', '/wp/v2/users/1' );
 		$response = rest_get_server()->dispatch( $request );
 		$this->assertArrayHasKey( 'my_custom_int', $response->data );
 
@@ -2581,7 +2703,6 @@ class WP_Test_REST_Users_Controller extends WP_Test_REST_Controller_Testcase {
 				'my_custom_int' => 123,
 			)
 		);
-
 		$response = rest_get_server()->dispatch( $request );
 		$this->assertEquals( 123, get_user_meta( 1, 'my_custom_int', true ) );
 
@@ -2594,9 +2715,7 @@ class WP_Test_REST_Users_Controller extends WP_Test_REST_Controller_Testcase {
 				'password'      => 'hello',
 			)
 		);
-
 		$response = rest_get_server()->dispatch( $request );
-
 		$this->assertEquals( 123, $response->data['my_custom_int'] );
 
 		global $wp_rest_additional_fields;
@@ -2622,6 +2741,7 @@ class WP_Test_REST_Users_Controller extends WP_Test_REST_Controller_Testcase {
 		);
 
 		wp_set_current_user( 1 );
+
 		if ( is_multisite() ) {
 			$current_user = wp_get_current_user( 1 );
 			update_site_option( 'site_admins', array( $current_user->user_login ) );
@@ -2634,7 +2754,6 @@ class WP_Test_REST_Users_Controller extends WP_Test_REST_Controller_Testcase {
 				'my_custom_int' => 'returnError',
 			)
 		);
-
 		$response = rest_get_server()->dispatch( $request );
 
 		$this->assertErrorResponse( 'rest_invalid_param', $response, 400 );
@@ -2657,8 +2776,8 @@ class WP_Test_REST_Users_Controller extends WP_Test_REST_Controller_Testcase {
 		restore_current_blog();
 
 		wp_set_current_user( self::$user );
-		$request = new WP_REST_Request( 'GET', sprintf( '/wp/v2/users/%d', $user_id ) );
 
+		$request  = new WP_REST_Request( 'GET', sprintf( '/wp/v2/users/%d', $user_id ) );
 		$response = rest_get_server()->dispatch( $request );
 		$this->assertErrorResponse( 'rest_user_invalid_id', $response, 404 );
 	}
@@ -2677,8 +2796,8 @@ class WP_Test_REST_Users_Controller extends WP_Test_REST_Controller_Testcase {
 		restore_current_blog();
 
 		wp_set_current_user( self::$superadmin );
-		$request = new WP_REST_Request( 'GET', sprintf( '/wp/v2/users/%d', $user_id ) );
 
+		$request  = new WP_REST_Request( 'GET', sprintf( '/wp/v2/users/%d', $user_id ) );
 		$response = rest_get_server()->dispatch( $request );
 		$this->assertErrorResponse( 'rest_user_invalid_id', $response, 404 );
 	}
@@ -2697,10 +2816,10 @@ class WP_Test_REST_Users_Controller extends WP_Test_REST_Controller_Testcase {
 		restore_current_blog();
 
 		wp_set_current_user( self::$user );
+
 		$request = new WP_REST_Request( 'PUT', sprintf( '/wp/v2/users/%d', $user_id ) );
 		$request->add_header( 'content-type', 'application/x-www-form-urlencoded' );
 		$request->set_body_params( array( 'first_name' => 'New Name' ) );
-
 		$response = rest_get_server()->dispatch( $request );
 		$this->assertErrorResponse( 'rest_user_invalid_id', $response, 404 );
 	}
@@ -2719,10 +2838,10 @@ class WP_Test_REST_Users_Controller extends WP_Test_REST_Controller_Testcase {
 		restore_current_blog();
 
 		wp_set_current_user( self::$superadmin );
+
 		$request = new WP_REST_Request( 'PUT', sprintf( '/wp/v2/users/%d', $user_id ) );
 		$request->add_header( 'content-type', 'application/x-www-form-urlencoded' );
 		$request->set_body_params( array( 'first_name' => 'New Name' ) );
-
 		$response = rest_get_server()->dispatch( $request );
 		$this->assertErrorResponse( 'rest_user_invalid_id', $response, 404 );
 	}
@@ -2741,10 +2860,10 @@ class WP_Test_REST_Users_Controller extends WP_Test_REST_Controller_Testcase {
 		restore_current_blog();
 
 		wp_set_current_user( self::$user );
+
 		$request = new WP_REST_Request( 'DELETE', sprintf( '/wp/v2/users/%d', $user_id ) );
 		$request->set_param( 'force', true );
 		$request->set_param( 'reassign', false );
-
 		$response = rest_get_server()->dispatch( $request );
 		$this->assertErrorResponse( 'rest_user_invalid_id', $response, 404 );
 	}
@@ -2763,14 +2882,133 @@ class WP_Test_REST_Users_Controller extends WP_Test_REST_Controller_Testcase {
 		restore_current_blog();
 
 		wp_set_current_user( self::$superadmin );
+
 		$request = new WP_REST_Request( 'DELETE', sprintf( '/wp/v2/users/%d', $user_id ) );
 		$request->set_param( 'force', true );
 		$request->set_param( 'reassign', false );
-
 		$response = rest_get_server()->dispatch( $request );
 		$this->assertErrorResponse( 'rest_user_invalid_id', $response, 404 );
 	}
 
+	/**
+	 * @ticket 43941
+	 * @dataProvider data_get_default_data
+	 */
+	public function test_get_default_value( $args, $expected ) {
+		wp_set_current_user( self::$user );
+
+		$object_type = 'user';
+		$meta_key    = 'registered_key1';
+		register_meta(
+			$object_type,
+			$meta_key,
+			$args
+		);
+
+		// Check for default value.
+		$request  = new WP_REST_Request( 'GET', sprintf( '/wp/v2/users/%d', self::$user ) );
+		$response = rest_get_server()->dispatch( $request );
+
+		$this->assertSame( 200, $response->get_status() );
+
+		$data = $response->get_data();
+		$this->assertArrayHasKey( 'meta', $data );
+
+		$meta = (array) $data['meta'];
+		$this->assertArrayHasKey( $meta_key, $meta );
+		$this->assertSame( $expected, $meta[ $meta_key ] );
+	}
+
+	public function data_get_default_data() {
+		return array(
+			array(
+				array(
+					'show_in_rest' => true,
+					'single'       => true,
+					'default'      => 'wibble',
+				),
+				'wibble',
+			),
+			array(
+				array(
+					'show_in_rest' => true,
+					'single'       => false,
+					'default'      => 'wibble',
+				),
+				array( 'wibble' ),
+			),
+			array(
+				array(
+					'single'       => true,
+					'show_in_rest' => array(
+						'schema' => array(
+							'type'       => 'object',
+							'properties' => array(
+								'wibble' => array(
+									'type' => 'string',
+								),
+							),
+						),
+					),
+					'type'         => 'object',
+					'default'      => array( 'wibble' => 'dibble' ),
+				),
+				array( 'wibble' => 'dibble' ),
+			),
+			array(
+				array(
+					'show_in_rest' => array(
+						'schema' => array(
+							'type'       => 'object',
+							'properties' => array(
+								'wibble' => array(
+									'type' => 'string',
+								),
+							),
+						),
+					),
+					'type'         => 'object',
+					'single'       => false,
+					'default'      => array( 'wibble' => 'dibble' ),
+				),
+				array( array( 'wibble' => 'dibble' ) ),
+			),
+
+			array(
+				array(
+					'show_in_rest' => array(
+						'schema' => array(
+							'type'  => 'array',
+							'items' => array(
+								'type' => 'string',
+							),
+						),
+					),
+					'single'       => true,
+					'type'         => 'array',
+					'default'      => array( 'dibble' ),
+				),
+				array( 'dibble' ),
+			),
+			array(
+				array(
+					'show_in_rest' => array(
+						'schema' => array(
+							'type'  => 'array',
+							'items' => array(
+								'type' => 'string',
+							),
+						),
+					),
+					'single'       => false,
+					'type'         => 'array',
+					'default'      => array( 'dibble' ),
+				),
+				array( array( 'dibble' ) ),
+			),
+		);
+	}
+
 	public function additional_field_get_callback( $object ) {
 		return get_user_meta( $object['id'], 'my_custom_int', true );
 	}
@@ -2783,25 +3021,25 @@ class WP_Test_REST_Users_Controller extends WP_Test_REST_Controller_Testcase {
 	}
 
 	protected function check_user_data( $user, $data, $context, $links ) {
-		$this->assertEquals( $user->ID, $data['id'] );
-		$this->assertEquals( $user->display_name, $data['name'] );
-		$this->assertEquals( $user->user_url, $data['url'] );
-		$this->assertEquals( $user->description, $data['description'] );
-		$this->assertEquals( get_author_posts_url( $user->ID ), $data['link'] );
+		$this->assertSame( $user->ID, $data['id'] );
+		$this->assertSame( $user->display_name, $data['name'] );
+		$this->assertSame( $user->user_url, $data['url'] );
+		$this->assertSame( $user->description, $data['description'] );
+		$this->assertSame( get_author_posts_url( $user->ID ), $data['link'] );
 		$this->assertArrayHasKey( 'avatar_urls', $data );
-		$this->assertEquals( $user->user_nicename, $data['slug'] );
+		$this->assertSame( $user->user_nicename, $data['slug'] );
 
 		if ( 'edit' === $context ) {
-			$this->assertEquals( $user->first_name, $data['first_name'] );
-			$this->assertEquals( $user->last_name, $data['last_name'] );
-			$this->assertEquals( $user->nickname, $data['nickname'] );
-			$this->assertEquals( $user->user_email, $data['email'] );
+			$this->assertSame( $user->first_name, $data['first_name'] );
+			$this->assertSame( $user->last_name, $data['last_name'] );
+			$this->assertSame( $user->nickname, $data['nickname'] );
+			$this->assertSame( $user->user_email, $data['email'] );
 			$this->assertEquals( (object) $user->allcaps, $data['capabilities'] );
 			$this->assertEquals( (object) $user->caps, $data['extra_capabilities'] );
-			$this->assertEquals( gmdate( 'c', strtotime( $user->user_registered ) ), $data['registered_date'] );
-			$this->assertEquals( $user->user_login, $data['username'] );
-			$this->assertEquals( $user->roles, $data['roles'] );
-			$this->assertEquals( get_user_locale( $user ), $data['locale'] );
+			$this->assertSame( gmdate( 'c', strtotime( $user->user_registered ) ), $data['registered_date'] );
+			$this->assertSame( $user->user_login, $data['username'] );
+			$this->assertSame( $user->roles, $data['roles'] );
+			$this->assertSame( get_user_locale( $user ), $data['locale'] );
 		}
 
 		if ( 'edit' !== $context ) {
@@ -2817,7 +3055,7 @@ class WP_Test_REST_Users_Controller extends WP_Test_REST_Controller_Testcase {
 			$this->assertArrayNotHasKey( 'locale', $data );
 		}
 
-		$this->assertEqualSets(
+		$this->assertSameSets(
 			array(
 				'self',
 				'collection',
@@ -2829,7 +3067,7 @@ class WP_Test_REST_Users_Controller extends WP_Test_REST_Controller_Testcase {
 	}
 
 	protected function check_get_user_response( $response, $context = 'view' ) {
-		$this->assertEquals( 200, $response->get_status() );
+		$this->assertSame( 200, $response->get_status() );
 
 		$data     = $response->get_data();
 		$userdata = get_userdata( $data['id'] );
@@ -2838,9 +3076,9 @@ class WP_Test_REST_Users_Controller extends WP_Test_REST_Controller_Testcase {
 
 	protected function check_add_edit_user_response( $response, $update = false ) {
 		if ( $update ) {
-			$this->assertEquals( 200, $response->get_status() );
+			$this->assertSame( 200, $response->get_status() );
 		} else {
-			$this->assertEquals( 201, $response->get_status() );
+			$this->assertSame( 201, $response->get_status() );
 		}
 
 		$data     = $response->get_data();
diff --git a/tests/rewrite.php b/tests/rewrite.php
index 76c1cc4712..0b653f9d28 100644
--- a/tests/rewrite.php
+++ b/tests/rewrite.php
@@ -88,20 +88,20 @@ class Tests_Rewrite extends WP_UnitTestCase {
 	function test_url_to_postid() {
 
 		$id = self::factory()->post->create();
-		$this->assertEquals( $id, url_to_postid( get_permalink( $id ) ) );
+		$this->assertSame( $id, url_to_postid( get_permalink( $id ) ) );
 
 		$id = self::factory()->post->create( array( 'post_type' => 'page' ) );
-		$this->assertEquals( $id, url_to_postid( get_permalink( $id ) ) );
+		$this->assertSame( $id, url_to_postid( get_permalink( $id ) ) );
 	}
 
 	function test_url_to_postid_set_url_scheme_https_to_http() {
 		$post_id   = self::factory()->post->create();
 		$permalink = get_permalink( $post_id );
-		$this->assertEquals( $post_id, url_to_postid( set_url_scheme( $permalink, 'https' ) ) );
+		$this->assertSame( $post_id, url_to_postid( set_url_scheme( $permalink, 'https' ) ) );
 
 		$post_id   = self::factory()->post->create( array( 'post_type' => 'page' ) );
 		$permalink = get_permalink( $post_id );
-		$this->assertEquals( $post_id, url_to_postid( set_url_scheme( $permalink, 'https' ) ) );
+		$this->assertSame( $post_id, url_to_postid( set_url_scheme( $permalink, 'https' ) ) );
 	}
 
 	function test_url_to_postid_set_url_scheme_http_to_https() {
@@ -115,8 +115,8 @@ class Tests_Rewrite extends WP_UnitTestCase {
 		$page_permalink = get_permalink( $page_id );
 		$page_url_to_id = url_to_postid( set_url_scheme( $page_permalink, 'http' ) );
 
-		$this->assertEquals( $post_id, $post_url_to_id );
-		$this->assertEquals( $page_id, $page_url_to_id );
+		$this->assertSame( $post_id, $post_url_to_id );
+		$this->assertSame( $page_id, $page_url_to_id );
 	}
 
 	/**
@@ -143,12 +143,12 @@ class Tests_Rewrite extends WP_UnitTestCase {
 		// Cleanup.
 		remove_filter( 'home_url', array( $this, '_filter_http_home_url' ), 10 );
 
-		// Test the tests:
+		// Test the tests.
 		$this->assertSame( 'http', parse_url( $permalink, PHP_URL_SCHEME ) );
 		$this->assertSame( 'https', parse_url( $network_home, PHP_URL_SCHEME ) );
 
-		// Test that the url_to_postid() call matched:
-		$this->assertEquals( $post_id, $url_to_postid );
+		// Test that the url_to_postid() call matched.
+		$this->assertSame( $post_id, $url_to_postid );
 	}
 
 	/**
@@ -177,7 +177,7 @@ class Tests_Rewrite extends WP_UnitTestCase {
 		register_post_type( $post_type, array( 'public' => true ) );
 
 		$id = self::factory()->post->create( array( 'post_type' => $post_type ) );
-		$this->assertEquals( $id, url_to_postid( get_permalink( $id ) ) );
+		$this->assertSame( $id, url_to_postid( get_permalink( $id ) ) );
 
 		_unregister_post_type( $post_type );
 	}
@@ -198,8 +198,8 @@ class Tests_Rewrite extends WP_UnitTestCase {
 			)
 		);
 
-		$this->assertEquals( $parent_id, url_to_postid( get_permalink( $parent_id ) ) );
-		$this->assertEquals( $child_id, url_to_postid( get_permalink( $child_id ) ) );
+		$this->assertSame( $parent_id, url_to_postid( get_permalink( $parent_id ) ) );
+		$this->assertSame( $child_id, url_to_postid( get_permalink( $child_id ) ) );
 	}
 
 	function test_url_to_postid_hierarchical_with_matching_leaves() {
@@ -239,10 +239,10 @@ class Tests_Rewrite extends WP_UnitTestCase {
 			)
 		);
 
-		$this->assertEquals( home_url( 'parent/child1/grandchild/' ), get_permalink( $grandchild_id_1 ) );
-		$this->assertEquals( home_url( 'parent/child2/grandchild/' ), get_permalink( $grandchild_id_2 ) );
-		$this->assertEquals( $grandchild_id_1, url_to_postid( get_permalink( $grandchild_id_1 ) ) );
-		$this->assertEquals( $grandchild_id_2, url_to_postid( get_permalink( $grandchild_id_2 ) ) );
+		$this->assertSame( home_url( 'parent/child1/grandchild/' ), get_permalink( $grandchild_id_1 ) );
+		$this->assertSame( home_url( 'parent/child2/grandchild/' ), get_permalink( $grandchild_id_2 ) );
+		$this->assertSame( $grandchild_id_1, url_to_postid( get_permalink( $grandchild_id_1 ) ) );
+		$this->assertSame( $grandchild_id_2, url_to_postid( get_permalink( $grandchild_id_2 ) ) );
 	}
 
 	function test_url_to_postid_home_has_path() {
@@ -256,16 +256,16 @@ class Tests_Rewrite extends WP_UnitTestCase {
 				'post_name'  => 'examp',
 			)
 		);
-		$this->assertEquals( $id, url_to_postid( get_permalink( $id ) ) );
-		$this->assertEquals( $id, url_to_postid( site_url( '/example/examp' ) ) );
-		$this->assertEquals( $id, url_to_postid( '/example/examp/' ) );
-		$this->assertEquals( $id, url_to_postid( '/example/examp' ) );
-
-		$this->assertEquals( 0, url_to_postid( site_url( '/example/ex' ) ) );
-		$this->assertEquals( 0, url_to_postid( '/example/ex' ) );
-		$this->assertEquals( 0, url_to_postid( '/example/ex/' ) );
-		$this->assertEquals( 0, url_to_postid( '/example-page/example/' ) );
-		$this->assertEquals( 0, url_to_postid( '/example-page/ex/' ) );
+		$this->assertSame( $id, url_to_postid( get_permalink( $id ) ) );
+		$this->assertSame( $id, url_to_postid( site_url( '/example/examp' ) ) );
+		$this->assertSame( $id, url_to_postid( '/example/examp/' ) );
+		$this->assertSame( $id, url_to_postid( '/example/examp' ) );
+
+		$this->assertSame( 0, url_to_postid( site_url( '/example/ex' ) ) );
+		$this->assertSame( 0, url_to_postid( '/example/ex' ) );
+		$this->assertSame( 0, url_to_postid( '/example/ex/' ) );
+		$this->assertSame( 0, url_to_postid( '/example-page/example/' ) );
+		$this->assertSame( 0, url_to_postid( '/example-page/ex/' ) );
 	}
 
 	/**
@@ -276,10 +276,10 @@ class Tests_Rewrite extends WP_UnitTestCase {
 		update_option( 'home', $home_url );
 
 		$this->go_to( $home_url );
-		$this->assertEquals( array(), $GLOBALS['wp']->query_vars );
+		$this->assertSame( array(), $GLOBALS['wp']->query_vars );
 
 		$this->go_to( $home_url . 'page' );
-		$this->assertEquals(
+		$this->assertSame(
 			array(
 				'page'     => '',
 				'pagename' => 'page',
@@ -297,10 +297,10 @@ class Tests_Rewrite extends WP_UnitTestCase {
 		update_option( 'home', $home_url );
 
 		$this->go_to( $home_url );
-		$this->assertEquals( array(), $GLOBALS['wp']->query_vars );
+		$this->assertSame( array(), $GLOBALS['wp']->query_vars );
 
 		$this->go_to( $home_url . 'page' );
-		$this->assertEquals(
+		$this->assertSame(
 			array(
 				'page'     => '',
 				'pagename' => 'page',
@@ -316,7 +316,7 @@ class Tests_Rewrite extends WP_UnitTestCase {
 			),
 			$GLOBALS['wp']->query_vars
 		);
-		$this->assertEquals(
+		$this->assertSame(
 			array(
 				'page'     => '',
 				'pagename' => 'match/page',
@@ -337,7 +337,7 @@ class Tests_Rewrite extends WP_UnitTestCase {
 
 		_unregister_post_type( 'foo' );
 
-		$this->assertEquals( array(), $GLOBALS['wp']->query_vars );
+		$this->assertSame( array(), $GLOBALS['wp']->query_vars );
 	}
 
 	function test_url_to_postid_dupe_path() {
@@ -351,10 +351,10 @@ class Tests_Rewrite extends WP_UnitTestCase {
 			)
 		);
 
-		$this->assertEquals( $id, url_to_postid( get_permalink( $id ) ) );
-		$this->assertEquals( $id, url_to_postid( site_url( '/example/example/' ) ) );
-		$this->assertEquals( $id, url_to_postid( '/example/example/' ) );
-		$this->assertEquals( $id, url_to_postid( '/example/example' ) );
+		$this->assertSame( $id, url_to_postid( get_permalink( $id ) ) );
+		$this->assertSame( $id, url_to_postid( site_url( '/example/example/' ) ) );
+		$this->assertSame( $id, url_to_postid( '/example/example/' ) );
+		$this->assertSame( $id, url_to_postid( '/example/example' ) );
 	}
 
 	/**
@@ -371,9 +371,9 @@ class Tests_Rewrite extends WP_UnitTestCase {
 			)
 		);
 
-		// This url should NOT return a post ID
+		// This url should NOT return a post ID.
 		$badurl = site_url( '/example-collision' );
-		$this->assertEquals( 0, url_to_postid( $badurl ) );
+		$this->assertSame( 0, url_to_postid( $badurl ) );
 	}
 
 	/**
@@ -392,9 +392,9 @@ class Tests_Rewrite extends WP_UnitTestCase {
 			)
 		);
 
-		// This url should NOT return a post ID
+		// This url should NOT return a post ID.
 		$badurl = network_home_url( '/example-collision' );
-		$this->assertEquals( 0, url_to_postid( $badurl ) );
+		$this->assertSame( 0, url_to_postid( $badurl ) );
 
 		restore_current_blog();
 	}
@@ -413,7 +413,7 @@ class Tests_Rewrite extends WP_UnitTestCase {
 		);
 		$post_id = self::factory()->post->create( array( 'post_title' => get_post( $page_id )->post_title ) );
 
-		$this->assertEquals( $post_id, url_to_postid( get_permalink( $post_id ) ) );
+		$this->assertSame( $post_id, url_to_postid( get_permalink( $post_id ) ) );
 	}
 
 	/**
diff --git a/tests/rewrite/numericSlugs.php b/tests/rewrite/numericSlugs.php
index 83e1443985..98f1368d42 100644
--- a/tests/rewrite/numericSlugs.php
+++ b/tests/rewrite/numericSlugs.php
@@ -35,7 +35,7 @@ class Tests_Rewrite_NumericSlugs extends WP_UnitTestCase {
 			)
 		);
 
-		// Force an ID that resembles a year format
+		// Force an ID that resembles a year format.
 		$wpdb->update(
 			$wpdb->posts,
 			array(
@@ -65,7 +65,7 @@ class Tests_Rewrite_NumericSlugs extends WP_UnitTestCase {
 			)
 		);
 
-		// Force an ID that resembles a year format
+		// Force an ID that resembles a year format.
 		$wpdb->update(
 			$wpdb->posts,
 			array(
@@ -75,7 +75,7 @@ class Tests_Rewrite_NumericSlugs extends WP_UnitTestCase {
 			array( 'ID' => $id )
 		);
 
-		$this->assertEquals( '2015', url_to_postid( get_permalink( '2015' ) ) );
+		$this->assertSame( 2015, url_to_postid( get_permalink( '2015' ) ) );
 	}
 
 	public function test_go_to_year_segment_collision_with_title() {
@@ -109,7 +109,7 @@ class Tests_Rewrite_NumericSlugs extends WP_UnitTestCase {
 			)
 		);
 
-		$this->assertEquals( $id, url_to_postid( get_permalink( $id ) ) );
+		$this->assertSame( $id, url_to_postid( get_permalink( $id ) ) );
 	}
 
 	public function test_go_to_month_segment_collision_without_title() {
@@ -145,7 +145,7 @@ class Tests_Rewrite_NumericSlugs extends WP_UnitTestCase {
 			)
 		);
 
-		$this->assertEquals( $id, url_to_postid( get_permalink( $id ) ) );
+		$this->assertSame( $id, url_to_postid( get_permalink( $id ) ) );
 	}
 
 	public function test_go_to_month_segment_collision_without_title_no_leading_zero() {
@@ -181,7 +181,7 @@ class Tests_Rewrite_NumericSlugs extends WP_UnitTestCase {
 			)
 		);
 
-		$this->assertEquals( $id, url_to_postid( get_permalink( $id ) ) );
+		$this->assertSame( $id, url_to_postid( get_permalink( $id ) ) );
 	}
 
 	public function test_go_to_month_segment_collision_with_title() {
@@ -215,7 +215,7 @@ class Tests_Rewrite_NumericSlugs extends WP_UnitTestCase {
 			)
 		);
 
-		$this->assertEquals( $id, url_to_postid( get_permalink( $id ) ) );
+		$this->assertSame( $id, url_to_postid( get_permalink( $id ) ) );
 	}
 
 	public function test_go_to_month_segment_collision_with_title_no_leading_zero() {
@@ -249,7 +249,7 @@ class Tests_Rewrite_NumericSlugs extends WP_UnitTestCase {
 			)
 		);
 
-		$this->assertEquals( $id, url_to_postid( get_permalink( $id ) ) );
+		$this->assertSame( $id, url_to_postid( get_permalink( $id ) ) );
 	}
 
 	public function test_go_to_day_segment_collision_without_title() {
@@ -285,7 +285,7 @@ class Tests_Rewrite_NumericSlugs extends WP_UnitTestCase {
 			)
 		);
 
-		$this->assertEquals( $id, url_to_postid( get_permalink( $id ) ) );
+		$this->assertSame( $id, url_to_postid( get_permalink( $id ) ) );
 	}
 
 	public function test_go_to_day_segment_collision_with_title() {
@@ -319,7 +319,7 @@ class Tests_Rewrite_NumericSlugs extends WP_UnitTestCase {
 			)
 		);
 
-		$this->assertEquals( $id, url_to_postid( get_permalink( $id ) ) );
+		$this->assertSame( $id, url_to_postid( get_permalink( $id ) ) );
 	}
 
 	public function test_numeric_slug_permalink_conflicts_should_only_be_resolved_for_the_main_query() {
diff --git a/tests/rewrite/oldSlugRedirect.php b/tests/rewrite/oldSlugRedirect.php
index afc8865348..2bd27398ad 100644
--- a/tests/rewrite/oldSlugRedirect.php
+++ b/tests/rewrite/oldSlugRedirect.php
@@ -51,7 +51,7 @@ class Tests_Rewrite_OldSlugRedirect extends WP_UnitTestCase {
 
 		$this->go_to( $old_permalink );
 		wp_old_slug_redirect();
-		$this->assertEquals( $permalink, $this->old_slug_redirect_url );
+		$this->assertSame( $permalink, $this->old_slug_redirect_url );
 	}
 
 	public function test_old_slug_redirect_attachment() {
@@ -92,7 +92,7 @@ class Tests_Rewrite_OldSlugRedirect extends WP_UnitTestCase {
 
 		$this->go_to( $old_permalink );
 		wp_old_slug_redirect();
-		$this->assertEquals( $permalink, $this->old_slug_redirect_url );
+		$this->assertSame( $permalink, $this->old_slug_redirect_url );
 	}
 
 	public function test_old_slug_redirect_paged() {
@@ -116,7 +116,7 @@ class Tests_Rewrite_OldSlugRedirect extends WP_UnitTestCase {
 
 		$this->go_to( $old_permalink );
 		wp_old_slug_redirect();
-		$this->assertEquals( $permalink, $this->old_slug_redirect_url );
+		$this->assertSame( $permalink, $this->old_slug_redirect_url );
 	}
 
 	/**
@@ -141,7 +141,7 @@ class Tests_Rewrite_OldSlugRedirect extends WP_UnitTestCase {
 
 		$permalink = user_trailingslashit( get_permalink( $new_post_id ) );
 
-		$this->assertEquals( $old_permalink, $permalink );
+		$this->assertSame( $old_permalink, $permalink );
 
 		$this->go_to( $old_permalink );
 		wp_old_slug_redirect();
diff --git a/tests/rewrite/permastructs.php b/tests/rewrite/permastructs.php
index e93062bb46..548f64bbfd 100644
--- a/tests/rewrite/permastructs.php
+++ b/tests/rewrite/permastructs.php
@@ -15,7 +15,7 @@ class Tests_Rewrite_Permastructs extends WP_UnitTestCase {
 		global $wp_rewrite;
 
 		add_permastruct( 'foo', 'bar/%foo%' );
-		$this->assertEqualSetsWithIndex(
+		$this->assertSameSetsWithIndex(
 			array(
 				'with_front'  => true,
 				'ep_mask'     => EP_NONE,
diff --git a/tests/rewrite/rewriteTags.php b/tests/rewrite/rewriteTags.php
index a636b9fd63..402f5ed4c6 100644
--- a/tests/rewrite/rewriteTags.php
+++ b/tests/rewrite/rewriteTags.php
@@ -48,9 +48,9 @@ class Tests_Rewrite_Tags extends WP_UnitTestCase {
 		global $wp_rewrite;
 
 		add_rewrite_tag( $tag, $regex );
-		$this->assertEqualSets( $this->rewritecode, $wp_rewrite->rewritecode );
-		$this->assertEqualSets( $this->rewritereplace, $wp_rewrite->rewritereplace );
-		$this->assertEqualSets( $this->queryreplace, $wp_rewrite->queryreplace );
+		$this->assertSameSets( $this->rewritecode, $wp_rewrite->rewritecode );
+		$this->assertSameSets( $this->rewritereplace, $wp_rewrite->rewritereplace );
+		$this->assertSameSets( $this->queryreplace, $wp_rewrite->queryreplace );
 	}
 
 	public function test_add_rewrite_tag_empty_query() {
@@ -60,9 +60,9 @@ class Tests_Rewrite_Tags extends WP_UnitTestCase {
 		$rewritecode[] = '%foo%';
 		add_rewrite_tag( '%foo%', 'bar' );
 
-		$this->assertEqualSets( $rewritecode, $wp_rewrite->rewritecode );
-		$this->assertEqualSets( array_merge( $this->rewritereplace, array( 'bar' ) ), $wp_rewrite->rewritereplace );
-		$this->assertEqualSets( array_merge( $this->queryreplace, array( 'foo=' ) ), $wp_rewrite->queryreplace );
+		$this->assertSameSets( $rewritecode, $wp_rewrite->rewritecode );
+		$this->assertSameSets( array_merge( $this->rewritereplace, array( 'bar' ) ), $wp_rewrite->rewritereplace );
+		$this->assertSameSets( array_merge( $this->queryreplace, array( 'foo=' ) ), $wp_rewrite->queryreplace );
 	}
 
 	public function test_add_rewrite_tag_custom_query() {
@@ -72,9 +72,9 @@ class Tests_Rewrite_Tags extends WP_UnitTestCase {
 		$rewritecode[] = '%foo%';
 		add_rewrite_tag( '%foo%', 'bar', 'baz=' );
 
-		$this->assertEqualSets( $rewritecode, $wp_rewrite->rewritecode );
-		$this->assertEqualSets( array_merge( $this->rewritereplace, array( 'bar' ) ), $wp_rewrite->rewritereplace );
-		$this->assertEqualSets( array_merge( $this->queryreplace, array( 'baz=' ) ), $wp_rewrite->queryreplace );
+		$this->assertSameSets( $rewritecode, $wp_rewrite->rewritecode );
+		$this->assertSameSets( array_merge( $this->rewritereplace, array( 'bar' ) ), $wp_rewrite->rewritereplace );
+		$this->assertSameSets( array_merge( $this->queryreplace, array( 'baz=' ) ), $wp_rewrite->queryreplace );
 	}
 
 	public function test_add_rewrite_tag_updates_existing() {
@@ -94,14 +94,14 @@ class Tests_Rewrite_Tags extends WP_UnitTestCase {
 		$rewritecode   = $wp_rewrite->rewritecode;
 		$rewritecode[] = '%foo%';
 		add_rewrite_tag( '%foo%', 'bar', 'baz=' );
-		$this->assertEqualSets( $rewritecode, $wp_rewrite->rewritecode );
-		$this->assertEqualSets( array_merge( $this->rewritereplace, array( 'bar' ) ), $wp_rewrite->rewritereplace );
-		$this->assertEqualSets( array_merge( $this->queryreplace, array( 'baz=' ) ), $wp_rewrite->queryreplace );
+		$this->assertSameSets( $rewritecode, $wp_rewrite->rewritecode );
+		$this->assertSameSets( array_merge( $this->rewritereplace, array( 'bar' ) ), $wp_rewrite->rewritereplace );
+		$this->assertSameSets( array_merge( $this->queryreplace, array( 'baz=' ) ), $wp_rewrite->queryreplace );
 
 		remove_rewrite_tag( '%foo%' );
-		$this->assertEqualSets( $this->rewritecode, $wp_rewrite->rewritecode );
-		$this->assertEqualSets( $this->rewritereplace, $wp_rewrite->rewritereplace );
-		$this->assertEqualSets( $this->queryreplace, $wp_rewrite->queryreplace );
+		$this->assertSameSets( $this->rewritecode, $wp_rewrite->rewritecode );
+		$this->assertSameSets( $this->rewritereplace, $wp_rewrite->rewritereplace );
+		$this->assertSameSets( $this->queryreplace, $wp_rewrite->queryreplace );
 	}
 
 	public function test_remove_rewrite_tag_internal_tag() {
@@ -126,14 +126,14 @@ class Tests_Rewrite_Tags extends WP_UnitTestCase {
 		$rewritereplace   = $wp_rewrite->rewritereplace;
 		$rewritereplace[] = '([0-9]{1,2})';
 		add_rewrite_tag( '%foo%', '([0-9]{1,2})', 'post_type=foo&name=' );
-		$this->assertEqualSets( $rewritecode, $wp_rewrite->rewritecode );
-		$this->assertEqualSets( $rewritereplace, $wp_rewrite->rewritereplace );
-		$this->assertEqualSets( array_merge( $this->queryreplace, array( 'post_type=foo&name=' ) ), $wp_rewrite->queryreplace );
+		$this->assertSameSets( $rewritecode, $wp_rewrite->rewritecode );
+		$this->assertSameSets( $rewritereplace, $wp_rewrite->rewritereplace );
+		$this->assertSameSets( array_merge( $this->queryreplace, array( 'post_type=foo&name=' ) ), $wp_rewrite->queryreplace );
 
 		remove_rewrite_tag( '%foo%' );
-		$this->assertEqualSets( $this->rewritecode, $wp_rewrite->rewritecode );
-		$this->assertEqualSets( $this->rewritereplace, $wp_rewrite->rewritereplace );
-		$this->assertEqualSets( $this->queryreplace, $wp_rewrite->queryreplace );
+		$this->assertSameSets( $this->rewritecode, $wp_rewrite->rewritecode );
+		$this->assertSameSets( $this->rewritereplace, $wp_rewrite->rewritereplace );
+		$this->assertSameSets( $this->queryreplace, $wp_rewrite->queryreplace );
 
 		$this->assertNotContains( '%foo%', $wp_rewrite->rewritecode );
 		$this->assertContains( '([0-9]{1,2})', $wp_rewrite->rewritereplace );
diff --git a/tests/shortcode.php b/tests/shortcode.php
index a978779c9a..ec53317af4 100644
--- a/tests/shortcode.php
+++ b/tests/shortcode.php
@@ -97,19 +97,19 @@ class Tests_Shortcode extends WP_UnitTestCase {
 
 	function test_noatts() {
 		do_shortcode( '[test-shortcode-tag /]' );
-		$this->assertEquals( '', $this->atts );
-		$this->assertEquals( 'test-shortcode-tag', $this->tagname );
+		$this->assertSame( '', $this->atts );
+		$this->assertSame( 'test-shortcode-tag', $this->tagname );
 	}
 
 	function test_one_att() {
 		do_shortcode( '[test-shortcode-tag foo="asdf" /]' );
-		$this->assertEquals( array( 'foo' => 'asdf' ), $this->atts );
-		$this->assertEquals( 'test-shortcode-tag', $this->tagname );
+		$this->assertSame( array( 'foo' => 'asdf' ), $this->atts );
+		$this->assertSame( 'test-shortcode-tag', $this->tagname );
 	}
 
 	function test_not_a_tag() {
 		$out = do_shortcode( '[not-a-shortcode-tag]' );
-		$this->assertEquals( '[not-a-shortcode-tag]', $out );
+		$this->assertSame( '[not-a-shortcode-tag]', $out );
 	}
 
 	/**
@@ -117,28 +117,28 @@ class Tests_Shortcode extends WP_UnitTestCase {
 	 */
 	function test_tag_hyphen_not_tag() {
 		$out = do_shortcode( '[dumptag-notreal]' );
-		$this->assertEquals( '[dumptag-notreal]', $out );
+		$this->assertSame( '[dumptag-notreal]', $out );
 	}
 
 	function test_tag_underscore_not_tag() {
 		$out = do_shortcode( '[dumptag_notreal]' );
-		$this->assertEquals( '[dumptag_notreal]', $out );
+		$this->assertSame( '[dumptag_notreal]', $out );
 	}
 
 	function test_tag_not_tag() {
 		$out = do_shortcode( '[dumptagnotreal]' );
-		$this->assertEquals( '[dumptagnotreal]', $out );
+		$this->assertSame( '[dumptagnotreal]', $out );
 	}
 
 	/**
 	 * @ticket 17657
 	 */
 	function test_tag_hyphen() {
-		$this->assertEquals( '_shortcode_hyphen', do_shortcode( '[hyphen]' ) );
-		$this->assertEquals( '_shortcode_hyphen_foo', do_shortcode( '[hyphen-foo]' ) );
-		$this->assertEquals( '_shortcode_hyphen_foo_bar', do_shortcode( '[hyphen-foo-bar]' ) );
-		$this->assertEquals( '[hyphen-baz]', do_shortcode( '[hyphen-baz]' ) );
-		$this->assertEquals( '[hyphen-foo-bar-baz]', do_shortcode( '[hyphen-foo-bar-baz]' ) );
+		$this->assertSame( '_shortcode_hyphen', do_shortcode( '[hyphen]' ) );
+		$this->assertSame( '_shortcode_hyphen_foo', do_shortcode( '[hyphen-foo]' ) );
+		$this->assertSame( '_shortcode_hyphen_foo_bar', do_shortcode( '[hyphen-foo-bar]' ) );
+		$this->assertSame( '[hyphen-baz]', do_shortcode( '[hyphen-baz]' ) );
+		$this->assertSame( '[hyphen-foo-bar-baz]', do_shortcode( '[hyphen-foo-bar-baz]' ) );
 	}
 
 	/**
@@ -156,86 +156,86 @@ class Tests_Shortcode extends WP_UnitTestCase {
 			'-foo-bar-baz' => '-foo-bar-baz',
 			'foo--bar'     => 'foo--bar',
 		);
-		$this->assertEquals( $expected_attrs, $this->atts );
+		$this->assertSame( $expected_attrs, $this->atts );
 	}
 
 	function test_two_atts() {
 		do_shortcode( '[test-shortcode-tag foo="asdf" bar="bing" /]' );
-		$this->assertEquals(
+		$this->assertSame(
 			array(
 				'foo' => 'asdf',
 				'bar' => 'bing',
 			),
 			$this->atts
 		);
-		$this->assertEquals( 'test-shortcode-tag', $this->tagname );
+		$this->assertSame( 'test-shortcode-tag', $this->tagname );
 	}
 
 	function test_noatts_enclosing() {
 		do_shortcode( '[test-shortcode-tag]content[/test-shortcode-tag]' );
-		$this->assertEquals( '', $this->atts );
-		$this->assertEquals( 'content', $this->content );
-		$this->assertEquals( 'test-shortcode-tag', $this->tagname );
+		$this->assertSame( '', $this->atts );
+		$this->assertSame( 'content', $this->content );
+		$this->assertSame( 'test-shortcode-tag', $this->tagname );
 	}
 
 	function test_one_att_enclosing() {
 		do_shortcode( '[test-shortcode-tag foo="bar"]content[/test-shortcode-tag]' );
-		$this->assertEquals( array( 'foo' => 'bar' ), $this->atts );
-		$this->assertEquals( 'content', $this->content );
-		$this->assertEquals( 'test-shortcode-tag', $this->tagname );
+		$this->assertSame( array( 'foo' => 'bar' ), $this->atts );
+		$this->assertSame( 'content', $this->content );
+		$this->assertSame( 'test-shortcode-tag', $this->tagname );
 	}
 
 	function test_two_atts_enclosing() {
 		do_shortcode( '[test-shortcode-tag foo="bar" baz="bing"]content[/test-shortcode-tag]' );
-		$this->assertEquals(
+		$this->assertSame(
 			array(
 				'foo' => 'bar',
 				'baz' => 'bing',
 			),
 			$this->atts
 		);
-		$this->assertEquals( 'content', $this->content );
-		$this->assertEquals( 'test-shortcode-tag', $this->tagname );
+		$this->assertSame( 'content', $this->content );
+		$this->assertSame( 'test-shortcode-tag', $this->tagname );
 	}
 
 	function test_unclosed() {
 		$out = do_shortcode( '[test-shortcode-tag]' );
-		$this->assertEquals( '', $out );
-		$this->assertEquals( '', $this->atts );
-		$this->assertEquals( 'test-shortcode-tag', $this->tagname );
+		$this->assertSame( '', $out );
+		$this->assertSame( '', $this->atts );
+		$this->assertSame( 'test-shortcode-tag', $this->tagname );
 	}
 
 	function test_positional_atts_num() {
 		$out = do_shortcode( '[test-shortcode-tag 123]' );
-		$this->assertEquals( '', $out );
-		$this->assertEquals( array( 0 => '123' ), $this->atts );
-		$this->assertEquals( 'test-shortcode-tag', $this->tagname );
+		$this->assertSame( '', $out );
+		$this->assertSame( array( 0 => '123' ), $this->atts );
+		$this->assertSame( 'test-shortcode-tag', $this->tagname );
 	}
 
 	function test_positional_atts_url() {
 		$out = do_shortcode( '[test-shortcode-tag http://www.youtube.com/watch?v=eBGIQ7ZuuiU]' );
-		$this->assertEquals( '', $out );
-		$this->assertEquals( array( 0 => 'http://www.youtube.com/watch?v=eBGIQ7ZuuiU' ), $this->atts );
-		$this->assertEquals( 'test-shortcode-tag', $this->tagname );
+		$this->assertSame( '', $out );
+		$this->assertSame( array( 0 => 'http://www.youtube.com/watch?v=eBGIQ7ZuuiU' ), $this->atts );
+		$this->assertSame( 'test-shortcode-tag', $this->tagname );
 	}
 
 	function test_positional_atts_quotes() {
 		$out = do_shortcode( '[test-shortcode-tag "something in quotes" "something else"]' );
-		$this->assertEquals( '', $out );
-		$this->assertEquals(
+		$this->assertSame( '', $out );
+		$this->assertSame(
 			array(
 				0 => 'something in quotes',
 				1 => 'something else',
 			),
 			$this->atts
 		);
-		$this->assertEquals( 'test-shortcode-tag', $this->tagname );
+		$this->assertSame( 'test-shortcode-tag', $this->tagname );
 	}
 
 	function test_positional_atts_mixed() {
 		$out = do_shortcode( '[test-shortcode-tag 123 https://wordpress.org/ 0 "foo" bar]' );
-		$this->assertEquals( '', $out );
-		$this->assertEquals(
+		$this->assertSame( '', $out );
+		$this->assertSame(
 			array(
 				0 => '123',
 				1 => 'https://wordpress.org/',
@@ -245,13 +245,13 @@ class Tests_Shortcode extends WP_UnitTestCase {
 			),
 			$this->atts
 		);
-		$this->assertEquals( 'test-shortcode-tag', $this->tagname );
+		$this->assertSame( 'test-shortcode-tag', $this->tagname );
 	}
 
 	function test_positional_and_named_atts() {
 		$out = do_shortcode( '[test-shortcode-tag 123 url=https://wordpress.org/ foo bar="baz"]' );
-		$this->assertEquals( '', $out );
-		$this->assertEquals(
+		$this->assertSame( '', $out );
+		$this->assertSame(
 			array(
 				0     => '123',
 				'url' => 'https://wordpress.org/',
@@ -260,24 +260,24 @@ class Tests_Shortcode extends WP_UnitTestCase {
 			),
 			$this->atts
 		);
-		$this->assertEquals( 'test-shortcode-tag', $this->tagname );
+		$this->assertSame( 'test-shortcode-tag', $this->tagname );
 	}
 
 	function test_footag_default() {
 		$out = do_shortcode( '[footag]' );
-		$this->assertEquals( 'foo = ', $out );
+		$this->assertSame( 'foo = ', $out );
 	}
 
 	function test_footag_val() {
 		$val = rand_str();
 		$out = do_shortcode( '[footag foo="' . $val . '"]' );
-		$this->assertEquals( 'foo = ' . $val, $out );
+		$this->assertSame( 'foo = ' . $val, $out );
 	}
 
 	function test_nested_tags() {
 		$out      = do_shortcode( '[baztag][dumptag abc="foo" def=123 https://wordpress.org/][/baztag]' );
 		$expected = "content = abc = foo\ndef = 123\n0 = https://wordpress.org\n";
-		$this->assertEquals( $expected, $out );
+		$this->assertSame( $expected, $out );
 	}
 
 	/**
@@ -285,35 +285,35 @@ class Tests_Shortcode extends WP_UnitTestCase {
 	 */
 	function test_tag_escaped() {
 		$out = do_shortcode( '[[footag]] [[bartag foo="bar"]]' );
-		$this->assertEquals( '[footag] [bartag foo="bar"]', $out );
+		$this->assertSame( '[footag] [bartag foo="bar"]', $out );
 
 		$out = do_shortcode( '[[footag /]] [[bartag foo="bar" /]]' );
-		$this->assertEquals( '[footag /] [bartag foo="bar" /]', $out );
+		$this->assertSame( '[footag /] [bartag foo="bar" /]', $out );
 
 		$out = do_shortcode( '[[baztag foo="bar"]the content[/baztag]]' );
-		$this->assertEquals( '[baztag foo="bar"]the content[/baztag]', $out );
+		$this->assertSame( '[baztag foo="bar"]the content[/baztag]', $out );
 
-		// double escaped
+		// Double escaped.
 		$out = do_shortcode( '[[[footag]]] [[[bartag foo="bar"]]]' );
-		$this->assertEquals( '[[footag]] [[bartag foo="bar"]]', $out );
+		$this->assertSame( '[[footag]] [[bartag foo="bar"]]', $out );
 	}
 
 	function test_tag_not_escaped() {
-		// these have square brackets on either end but aren't actually escaped
+		// These have square brackets on either end but aren't actually escaped.
 		$out = do_shortcode( '[[footag] [bartag foo="bar"]]' );
-		$this->assertEquals( '[foo =  foo = bar]', $out );
+		$this->assertSame( '[foo =  foo = bar]', $out );
 
 		$out = do_shortcode( '[[footag /] [bartag foo="bar" /]]' );
-		$this->assertEquals( '[foo =  foo = bar]', $out );
+		$this->assertSame( '[foo =  foo = bar]', $out );
 
 		$out = do_shortcode( '[[baztag foo="bar"]the content[/baztag]' );
-		$this->assertEquals( '[content = the content', $out );
+		$this->assertSame( '[content = the content', $out );
 
 		$out = do_shortcode( '[[not-a-tag]]' );
-		$this->assertEquals( '[[not-a-tag]]', $out );
+		$this->assertSame( '[[not-a-tag]]', $out );
 
 		$out = do_shortcode( '[[[footag] [bartag foo="bar"]]]' );
-		$this->assertEquals( '[[foo =  foo = bar]]', $out );
+		$this->assertSame( '[[foo =  foo = bar]]', $out );
 	}
 
 	function test_mixed_tags() {
@@ -350,48 +350,48 @@ more content
 
 EOF;
 		$out      = do_shortcode( $in );
-		$this->assertEquals( strip_ws( $expected ), strip_ws( $out ) );
+		$this->assertSame( strip_ws( $expected ), strip_ws( $out ) );
 	}
 
 	/**
 	 * @ticket 6562
 	 */
 	function test_utf8_whitespace_1() {
-		// NO-BREAK SPACE: U+00A0
+		// NO-BREAK SPACE: U+00A0.
 		do_shortcode( "[test-shortcode-tag foo=\"bar\" \xC2\xA0baz=\"123\"]" );
-		$this->assertEquals(
+		$this->assertSame(
 			array(
 				'foo' => 'bar',
 				'baz' => '123',
 			),
 			$this->atts
 		);
-		$this->assertEquals( '', $this->content );
+		$this->assertSame( '', $this->content );
 	}
 
 	/**
 	 * @ticket 6562
 	 */
 	function test_utf8_whitespace_2() {
-		// ZERO WIDTH SPACE: U+200B
+		// ZERO WIDTH SPACE: U+200B.
 		do_shortcode( "[test-shortcode-tag foo=\"bar\" \xE2\x80\x8Babc=\"def\"]" );
-		$this->assertEquals(
+		$this->assertSame(
 			array(
 				'foo' => 'bar',
 				'abc' => 'def',
 			),
 			$this->atts
 		);
-		$this->assertEquals( '', $this->content );
+		$this->assertSame( '', $this->content );
 	}
 
 	/**
 	 * @ticket 14050
 	 */
 	function test_shortcode_unautop() {
-		// a blank line is added at the end, so test with it already there
+		// A blank line is added at the end, so test with it already there.
 		$test_string = "[footag]\n";
-		$this->assertEquals( $test_string, shortcode_unautop( wpautop( $test_string ) ) );
+		$this->assertSame( $test_string, shortcode_unautop( wpautop( $test_string ) ) );
 	}
 
 	function data_test_strip_shortcodes() {
@@ -418,7 +418,7 @@ EOF;
 	 * @param string $content   Content to run strip_shortcodes() on.
 	 */
 	function test_strip_shortcodes( $expected, $content ) {
-		$this->assertEquals( $expected, strip_shortcodes( $content ) );
+		$this->assertSame( $expected, strip_shortcodes( $content ) );
 	}
 
 	/**
@@ -426,7 +426,7 @@ EOF;
 	 */
 	function test_strip_shortcodes_filter() {
 		add_filter( 'strip_shortcodes_tagnames', array( $this, '_filter_strip_shortcodes_tagnames' ) );
-		$this->assertEquals( 'beforemiddle [footag]after', strip_shortcodes( 'before[gallery]middle [footag]after' ) );
+		$this->assertSame( 'beforemiddle [footag]after', strip_shortcodes( 'before[gallery]middle [footag]after' ) );
 		remove_filter( 'strip_shortcodes_tagnames', array( $this, '_filter_strip_shortcodes_tagnames' ) );
 	}
 
@@ -434,7 +434,7 @@ EOF;
 		return array( 'gallery' );
 	}
 
-	// Store passed in shortcode_atts_{$shortcode} args
+	// Store passed in shortcode_atts_{$shortcode} args.
 	function _filter_atts( $out, $pairs, $atts ) {
 		$this->filter_atts_out   = $out;
 		$this->filter_atts_pairs = $pairs;
@@ -442,14 +442,14 @@ EOF;
 		return $out;
 	}
 
-	// Filter shortcode atts in various ways
+	// Filter shortcode atts in various ways.
 	function _filter_atts2( $out, $pairs, $atts ) {
-		// If foo attribute equals "foo1", change it to be default value
+		// If foo attribute equals "foo1", change it to be default value.
 		if ( isset( $out['foo'] ) && 'foo1' === $out['foo'] ) {
 			$out['foo'] = $pairs['foo'];
 		}
 
-		// If baz attribute is set, remove it
+		// If baz attribute is set, remove it.
 		if ( isset( $out['baz'] ) ) {
 			unset( $out['baz'] );
 		}
@@ -462,21 +462,21 @@ EOF;
 		add_filter( 'shortcode_atts_bartag', array( $this, '_filter_atts' ), 10, 3 );
 
 		do_shortcode( '[bartag foo="foo1" /]' );
-		$this->assertEquals(
+		$this->assertSame(
 			array(
 				'foo' => 'foo1',
 				'baz' => 'default baz',
 			),
 			$this->filter_atts_out
 		);
-		$this->assertEquals(
+		$this->assertSame(
 			array(
 				'foo' => 'no foo',
 				'baz' => 'default baz',
 			),
 			$this->filter_atts_pairs
 		);
-		$this->assertEquals( array( 'foo' => 'foo1' ), $this->filter_atts_atts );
+		$this->assertSame( array( 'foo' => 'foo1' ), $this->filter_atts_atts );
 
 		remove_filter( 'shortcode_atts_bartag', array( $this, '_filter_atts' ), 10, 3 );
 	}
@@ -485,11 +485,11 @@ EOF;
 		add_filter( 'shortcode_atts_bartag', array( $this, '_filter_atts2' ), 10, 3 );
 
 		$out = do_shortcode( '[bartag foo="foo1" baz="baz1" /]' );
-		$this->assertEquals( array( 'foo' => 'no foo' ), $this->filter_atts_out );
-		$this->assertEquals( 'foo = no foo', $out );
+		$this->assertSame( array( 'foo' => 'no foo' ), $this->filter_atts_out );
+		$this->assertSame( 'foo = no foo', $out );
 
 		$out = do_shortcode( '[bartag foo="foo2" /]' );
-		$this->assertEquals( 'foo = foo2', $out );
+		$this->assertSame( 'foo = foo2', $out );
 
 		remove_filter( 'shortcode_atts_bartag', array( $this, '_filter_atts2' ), 10, 3 );
 	}
@@ -512,7 +512,7 @@ EOF;
 		$output = '[gallery ids="37,15,11"]';
 
 		foreach ( $input as $in ) {
-			$this->assertEquals( $output, shortcode_unautop( $in ) );
+			$this->assertSame( $output, shortcode_unautop( $in ) );
 		}
 	}
 
@@ -522,7 +522,7 @@ EOF;
 	 * @dataProvider data_escaping
 	 */
 	function test_escaping( $input, $output ) {
-		return $this->assertEquals( $output, do_shortcode( $input ) );
+		return $this->assertSame( $output, do_shortcode( $input ) );
 	}
 
 	function data_escaping() {
@@ -600,7 +600,7 @@ EOF;
 	 * @dataProvider data_escaping2
 	 */
 	function test_escaping2( $input, $output ) {
-		return $this->assertEquals( $output, strip_shortcodes( $input ) );
+		return $this->assertSame( $output, strip_shortcodes( $input ) );
 	}
 
 	function data_escaping2() {
@@ -618,7 +618,7 @@ EOF;
 				'',
 			),
 			array(
-				'<div [gallery]>', // Shortcodes will never be stripped inside elements.
+				'<div [gallery]>',   // Shortcodes will never be stripped inside elements.
 				'<div [gallery]>',
 			),
 			array(
@@ -671,7 +671,7 @@ EOF;
 	function sub_registration( $input, $expected ) {
 		add_shortcode( $input, '' );
 		$actual = shortcode_exists( $input );
-		$test   = $this->assertEquals( $expected, $actual );
+		$test   = $this->assertSame( $expected, $actual );
 		if ( $actual ) {
 			remove_shortcode( $input );
 		}
@@ -740,7 +740,7 @@ EOF;
 	}
 
 	function data_whole_posts() {
-		require_once( DIR_TESTDATA . '/formatting/whole-posts.php' );
+		require_once DIR_TESTDATA . '/formatting/whole-posts.php';
 		return data_whole_posts();
 	}
 
@@ -765,7 +765,7 @@ EOF;
 	function test_unnamed_attribute() {
 		$out      = do_shortcode( '[dumptag=https://wordpress.org/]' );
 		$expected = "0 = =https://wordpress.org\n";
-		$this->assertEquals( $expected, $out );
+		$this->assertSame( $expected, $out );
 	}
 
 	/**
@@ -774,30 +774,30 @@ EOF;
 	function test_smilies_arent_converted() {
 		$out      = apply_filters( 'the_content', '[img alt="Hello :-) World"]' );
 		$expected = "<img alt=\"Hello :-) World\" />\n";
-		$this->assertEquals( $expected, $out );
+		$this->assertSame( $expected, $out );
 	}
 
 	/**
 	 * @ticket 37906
 	 */
 	public function test_pre_do_shortcode_tag() {
-		// does nothing if no filters are set up
+		// Does nothing if no filters are set up.
 		$str = 'pre_do_shortcode_tag';
 		add_shortcode( $str, array( $this, '_shortcode_pre_do_shortcode_tag' ) );
 		$result_nofilter = do_shortcode( "[{$str}]" );
 		$this->assertSame( 'foo', $result_nofilter );
 
-		// short-circuit with filter
+		// Short-circuit with filter.
 		add_filter( 'pre_do_shortcode_tag', array( $this, '_filter_pre_do_shortcode_tag_bar' ) );
 		$result_filter = do_shortcode( "[{$str}]" );
 		$this->assertSame( 'bar', $result_filter );
 
-		// respect priority
+		// Respect priority.
 		add_filter( 'pre_do_shortcode_tag', array( $this, '_filter_pre_do_shortcode_tag_p11' ), 11 );
 		$result_priority = do_shortcode( "[{$str}]" );
 		$this->assertSame( 'p11', $result_priority );
 
-		// pass arguments
+		// Pass arguments.
 		$arr = array(
 			'return' => 'p11',
 			'key'    => $str,
@@ -851,23 +851,23 @@ EOF;
 	 * @ticket 32790
 	 */
 	public function test_do_shortcode_tag_filter() {
-		// does nothing if no filters are set up
+		// Does nothing if no filters are set up.
 		$str = 'do_shortcode_tag';
 		add_shortcode( $str, array( $this, '_shortcode_do_shortcode_tag' ) );
 		$result_nofilter = do_shortcode( "[{$str}]" );
 		$this->assertSame( 'foo', $result_nofilter );
 
-		// modify output with filter
+		// Modify output with filter.
 		add_filter( 'do_shortcode_tag', array( $this, '_filter_do_shortcode_tag_replace' ) );
 		$result_filter = do_shortcode( "[{$str}]" );
 		$this->assertSame( 'fee', $result_filter );
 
-		// respect priority
+		// Respect priority.
 		add_filter( 'do_shortcode_tag', array( $this, '_filter_do_shortcode_tag_generate' ), 11 );
 		$result_priority = do_shortcode( "[{$str}]" );
 		$this->assertSame( 'foobar', $result_priority );
 
-		// pass arguments
+		// Pass arguments.
 		$arr = array(
 			'return' => 'foobar',
 			'key'    => $str,
@@ -924,7 +924,7 @@ EOF;
 	 */
 	function test_empty_single_quote_attribute() {
 		$out = do_shortcode( '[test-shortcode-tag a="foo" b=\'bar\' c=baz foo \'bar\' "baz" ]test empty atts[/test-shortcode-tag]' );
-		$this->assertEquals(
+		$this->assertSame(
 			array(
 				'a' => 'foo',
 				'b' => 'bar',
@@ -942,15 +942,15 @@ EOF;
 	 */
 	function test_positional_atts_single_quotes() {
 		$out = do_shortcode( "[test-shortcode-tag 'something in quotes' 'something else']" );
-		$this->assertEquals( '', $out );
-		$this->assertEquals(
+		$this->assertSame( '', $out );
+		$this->assertSame(
 			array(
 				0 => 'something in quotes',
 				1 => 'something else',
 			),
 			$this->atts
 		);
-		$this->assertEquals( 'test-shortcode-tag', $this->tagname );
+		$this->assertSame( 'test-shortcode-tag', $this->tagname );
 	}
 
 	/**
@@ -958,8 +958,8 @@ EOF;
 	 */
 	function test_positional_atts_mixed_quotes() {
 		$out = do_shortcode( "[test-shortcode-tag 'something in quotes' \"something else\" 123 foo bar='baz' example=\"test\" ]" );
-		$this->assertEquals( '', $out );
-		$this->assertEquals(
+		$this->assertSame( '', $out );
+		$this->assertSame(
 			array(
 				0         => 'something in quotes',
 				1         => 'something else',
@@ -970,6 +970,6 @@ EOF;
 			),
 			$this->atts
 		);
-		$this->assertEquals( 'test-shortcode-tag', $this->tagname );
+		$this->assertSame( 'test-shortcode-tag', $this->tagname );
 	}
 }
diff --git a/tests/site-health.php b/tests/site-health.php
index 6c22fe4ddf..75f1045562 100644
--- a/tests/site-health.php
+++ b/tests/site-health.php
@@ -6,7 +6,7 @@
 class Tests_Site_Health extends WP_UnitTestCase {
 	public static function wpSetUpBeforeClass() {
 		// Include the `WP_Site_Health` file.
-		include_once( ABSPATH . 'wp-admin/includes/class-wp-site-health.php' );
+		require_once ABSPATH . 'wp-admin/includes/class-wp-site-health.php';
 	}
 
 	/**
@@ -15,10 +15,12 @@ class Tests_Site_Health extends WP_UnitTestCase {
 	 * @ticket 47223
 	 */
 	function test_cron_health_checks_critical() {
+		$wp_site_health = new WP_Site_Health();
+
 		// Clear the cron array.
 		_set_cron_array( array() );
-		$wp_site_health = new WP_Site_Health();
-		$cron_health    = $wp_site_health->get_test_scheduled_events();
+
+		$cron_health = $wp_site_health->get_test_scheduled_events();
 
 		$this->assertSame( 'critical', $cron_health['status'] );
 		$this->assertSame( __( 'It was not possible to check your scheduled events' ), $cron_health['label'] );
@@ -33,6 +35,8 @@ class Tests_Site_Health extends WP_UnitTestCase {
 	 * @ticket 47223
 	 */
 	function test_cron_health_checks( $times, $expected_status, $expected_label, $expected_late, $expected_missed ) {
+		$wp_site_health = new WP_Site_Health();
+
 		/*
 		 * Clear the cron array.
 		 *
@@ -47,8 +51,7 @@ class Tests_Site_Health extends WP_UnitTestCase {
 			wp_schedule_event( $timestamp, 'daily', __FUNCTION__ . "_{$job}" );
 		}
 
-		$wp_site_health = new WP_Site_Health();
-		$cron_health    = $wp_site_health->get_test_scheduled_events();
+		$cron_health = $wp_site_health->get_test_scheduled_events();
 
 		$this->assertSame( $expected_status, $cron_health['status'] );
 		$this->assertSame( $expected_label, $cron_health['label'] );
diff --git a/tests/sitemaps/functions.php b/tests/sitemaps/functions.php
new file mode 100644
index 0000000000..2a2d0da204
--- /dev/null
+++ b/tests/sitemaps/functions.php
@@ -0,0 +1,149 @@
+<?php
+
+/**
+ * @group sitemaps
+ */
+class Test_Sitemaps_Functions extends WP_UnitTestCase {
+	/**
+	 * Test getting the correct number of URLs for a sitemap.
+	 */
+	public function test_wp_sitemaps_get_max_urls() {
+		// Apply a filter to test filterable values.
+		add_filter( 'wp_sitemaps_max_urls', array( $this, '_filter_max_url_value' ), 10, 2 );
+
+		$expected_posts      = wp_sitemaps_get_max_urls( 'post' );
+		$expected_taxonomies = wp_sitemaps_get_max_urls( 'term' );
+		$expected_users      = wp_sitemaps_get_max_urls( 'user' );
+
+		$this->assertSame( $expected_posts, 300, 'Can not confirm max URL number for posts.' );
+		$this->assertSame( $expected_taxonomies, 50, 'Can not confirm max URL number for taxonomies.' );
+		$this->assertSame( $expected_users, 1, 'Can not confirm max URL number for users.' );
+	}
+
+	/**
+	 * Callback function for testing the `sitemaps_max_urls` filter.
+	 *
+	 * @param int    $max_urls The maximum number of URLs included in a sitemap. Default 2000.
+	 * @param string $type     Optional. The type of sitemap to be filtered. Default empty.
+	 * @return int The maximum number of URLs.
+	 */
+	public function _filter_max_url_value( $max_urls, $type ) {
+		switch ( $type ) {
+			case 'post':
+				return 300;
+			case 'term':
+				return 50;
+			case 'user':
+				return 1;
+			default:
+				return $max_urls;
+		}
+	}
+
+	/**
+	 * Test wp_get_sitemap_providers default functionality.
+	 */
+	public function test_wp_get_sitemap_providers() {
+		$sitemaps = wp_get_sitemap_providers();
+
+		$expected = array(
+			'posts'      => 'WP_Sitemaps_Posts',
+			'taxonomies' => 'WP_Sitemaps_Taxonomies',
+			'users'      => 'WP_Sitemaps_Users',
+		);
+
+		$this->assertSame( array_keys( $expected ), array_keys( $sitemaps ), 'Unable to confirm default sitemap types are registered.' );
+
+		foreach ( $expected as $name => $provider ) {
+			$this->assertTrue( is_a( $sitemaps[ $name ], $provider ), "Default $name sitemap is not a $provider object." );
+		}
+	}
+
+	/**
+	 * Test get_sitemap_url() with ugly permalinks.
+	 *
+	 * @dataProvider ugly_permalinks_provider
+	 */
+	public function test_get_sitemap_url_ugly_permalinks( $name, $subtype_name, $page, $expected ) {
+		$actual = get_sitemap_url( $name, $subtype_name, $page );
+
+		$this->assertSame( $expected, $actual );
+	}
+
+	/**
+	 * Test get_sitemap_url() with pretty permalinks.
+	 *
+	 * @dataProvider pretty_permalinks_provider
+	 */
+	public function test_get_sitemap_url_pretty_permalinks( $name, $subtype_name, $page, $expected ) {
+		$this->set_permalink_structure( '/%postname%/' );
+
+		$actual = get_sitemap_url( $name, $subtype_name, $page );
+
+		$this->assertSame( $expected, $actual );
+	}
+
+	/**
+	 * Data provider for test_get_sitemap_url_ugly_permalinks.
+	 *
+	 * @return array[] {
+	 *     Data to test with.
+	 *
+	 *     @type string       $0 Sitemap name.
+	 *     @type string       $1 Sitemap subtype name.
+	 *     @type int          $3 Sitemap page.
+	 *     @type string|false $4 Sitemap URL.
+	 * }
+	 */
+	function ugly_permalinks_provider() {
+		return array(
+			array( 'posts', 'post', 1, home_url( '/?sitemap=posts&sitemap-subtype=post&paged=1' ) ),
+			array( 'posts', 'post', 0, home_url( '/?sitemap=posts&sitemap-subtype=post&paged=1' ) ),
+			array( 'posts', 'page', 1, home_url( '/?sitemap=posts&sitemap-subtype=page&paged=1' ) ),
+			array( 'posts', 'page', 5, home_url( '/?sitemap=posts&sitemap-subtype=page&paged=5' ) ),
+			// post_type doesn't exist.
+			array( 'posts', 'foo', 5, false ),
+			array( 'taxonomies', 'category', 1, home_url( '/?sitemap=taxonomies&sitemap-subtype=category&paged=1' ) ),
+			array( 'taxonomies', 'post_tag', 1, home_url( '/?sitemap=taxonomies&sitemap-subtype=post_tag&paged=1' ) ),
+			array( 'taxonomies', 'post_tag', -1, home_url( '/?sitemap=taxonomies&sitemap-subtype=post_tag&paged=1' ) ),
+			// negative paged, gets converted to it's absolute value.
+			array( 'users', '', 4, home_url( '/?sitemap=users&paged=4' ) ),
+			// users provider doesn't allow subtypes.
+			array( 'users', 'foo', 4, false ),
+			// provider doesn't exist.
+			array( 'foo', '', 4, false ),
+		);
+	}
+
+	/**
+	 * Data provider for test_get_sitemap_url_pretty_permalinks
+	 *
+	 * @return array[] {
+	 *     Data to test with.
+	 *
+	 *     @type string       $0 Sitemap name.
+	 *     @type string       $1 Sitemap subtype name.
+	 *     @type int          $3 Sitemap page.
+	 *     @type string|false $4 Sitemap URL.
+	 * }
+	 */
+	function pretty_permalinks_provider() {
+		return array(
+			array( 'posts', 'post', 1, home_url( '/wp-sitemap-posts-post-1.xml' ) ),
+			array( 'posts', 'post', 0, home_url( '/wp-sitemap-posts-post-1.xml' ) ),
+			array( 'posts', 'page', 1, home_url( '/wp-sitemap-posts-page-1.xml' ) ),
+			array( 'posts', 'page', 5, home_url( '/wp-sitemap-posts-page-5.xml' ) ),
+			// post_type doesn't exist.
+			array( 'posts', 'foo', 5, false ),
+			array( 'taxonomies', 'category', 1, home_url( '/wp-sitemap-taxonomies-category-1.xml' ) ),
+			array( 'taxonomies', 'post_tag', 1, home_url( '/wp-sitemap-taxonomies-post_tag-1.xml' ) ),
+			// negative paged, gets converted to it's absolute value.
+			array( 'taxonomies', 'post_tag', -1, home_url( '/wp-sitemap-taxonomies-post_tag-1.xml' ) ),
+			array( 'users', '', 4, home_url( '/wp-sitemap-users-4.xml' ) ),
+			// users provider doesn't allow subtypes.
+			array( 'users', 'foo', 4, false ),
+			// provider doesn't exist.
+			array( 'foo', '', 4, false ),
+		);
+	}
+}
diff --git a/tests/sitemaps/sitemaps-index.php b/tests/sitemaps/sitemaps-index.php
new file mode 100644
index 0000000000..f959da8344
--- /dev/null
+++ b/tests/sitemaps/sitemaps-index.php
@@ -0,0 +1,74 @@
+<?php
+
+/**
+ * @group sitemaps
+ */
+class Test_WP_Sitemaps_Index extends WP_UnitTestCase {
+	public function test_get_sitemap_list() {
+		$registry = new WP_Sitemaps_Registry();
+
+		/*
+		 * The test provider has 3 subtypes.
+		 * Each subtype has 4 pages with results.
+		 * There are 2 providers registered.
+		 * Hence, 3*4*2=24.
+		 */
+		$registry->add_provider( 'foo', new WP_Sitemaps_Test_Provider( 'foo' ) );
+		$registry->add_provider( 'bar', new WP_Sitemaps_Test_Provider( 'bar' ) );
+
+		$sitemap_index = new WP_Sitemaps_Index( $registry );
+		$this->assertCount( 24, $sitemap_index->get_sitemap_list() );
+	}
+
+	/**
+	 * Test that a sitemap index won't contain more than 50000 sitemaps.
+	 *
+	 * @ticket 50666
+	 */
+	public function test_get_sitemap_list_limit() {
+		$registry = new WP_Sitemaps_Registry();
+
+		// add 3 providers, which combined produce more than the maximum 50000 sitemaps in the index.
+		$registry->add_provider( 'provider_1', new WP_Sitemaps_Large_Test_Provider( 25000 ) );
+		$registry->add_provider( 'provider_2', new WP_Sitemaps_Large_Test_Provider( 25000 ) );
+		$registry->add_provider( 'provider_3', new WP_Sitemaps_Large_Test_Provider( 25000 ) );
+
+		$count = 0;
+		foreach ( $registry->get_providers() as $provider ) {
+			$count += count( $provider->get_url_list( 1 ) );
+		}
+		$this->assertGreaterThan( 50000, $count );
+
+		$sitemap_index = new WP_Sitemaps_Index( $registry );
+		$this->assertCount( 50000, $sitemap_index->get_sitemap_list() );
+	}
+
+	public function test_get_sitemap_list_no_entries() {
+		$registry = new WP_Sitemaps_Registry();
+
+		$registry->add_provider( 'foo', new WP_Sitemaps_Empty_Test_Provider( 'foo' ) );
+
+		$sitemap_index = new WP_Sitemaps_Index( $registry );
+		$this->assertCount( 0, $sitemap_index->get_sitemap_list() );
+	}
+
+	public function test_get_index_url() {
+		$sitemap_index = new WP_Sitemaps_Index( new WP_Sitemaps_Registry() );
+		$index_url     = $sitemap_index->get_index_url();
+
+		$this->assertStringEndsWith( '/?sitemap=index', $index_url );
+	}
+
+	public function test_get_index_url_pretty_permalinks() {
+		// Set permalinks for testing.
+		$this->set_permalink_structure( '/%year%/%postname%/' );
+
+		$sitemap_index = new WP_Sitemaps_Index( new WP_Sitemaps_Registry() );
+		$index_url     = $sitemap_index->get_index_url();
+
+		// Clean up permalinks.
+		$this->set_permalink_structure();
+
+		$this->assertStringEndsWith( '/wp-sitemap.xml', $index_url );
+	}
+}
diff --git a/tests/sitemaps/sitemaps-posts.php b/tests/sitemaps/sitemaps-posts.php
new file mode 100644
index 0000000000..a5be317ce4
--- /dev/null
+++ b/tests/sitemaps/sitemaps-posts.php
@@ -0,0 +1,72 @@
+<?php
+
+/**
+ * @group sitemaps
+ */
+class Test_WP_Sitemaps_Posts extends WP_UnitTestCase {
+	/**
+	 * Tests getting sitemap entries for post type page with 'posts' homepage.
+	 *
+	 * Ensures that an entry is added even if there are no pages.
+	 *
+	 * @ticket 50571
+	 */
+	public function test_get_sitemap_entries_homepage() {
+		update_option( 'show_on_front', 'posts' );
+
+		$posts_provider = new WP_Sitemaps_Posts();
+
+		$post_list = $posts_provider->get_sitemap_entries();
+
+		$expected = array(
+			array(
+				'loc' => home_url( '/?sitemap=posts&sitemap-subtype=page&paged=1' ),
+			),
+		);
+
+		$this->assertSame( $expected, $post_list );
+	}
+
+	/**
+	 * Test ability to filter object subtypes.
+	 */
+	public function test_filter_sitemaps_post_types() {
+		$posts_provider = new WP_Sitemaps_Posts();
+
+		// Return an empty array to show that the list of subtypes is filterable.
+		add_filter( 'wp_sitemaps_post_types', '__return_empty_array' );
+		$subtypes = $posts_provider->get_object_subtypes();
+
+		$this->assertSame( array(), $subtypes, 'Could not filter posts subtypes.' );
+	}
+
+	/**
+	 * Test `wp_sitemaps_posts_show_on_front_entry` filter.
+	 */
+	public function test_posts_show_on_front_entry() {
+		$posts_provider = new WP_Sitemaps_Posts();
+		update_option( 'show_on_front', 'page' );
+
+		add_filter( 'wp_sitemaps_posts_show_on_front_entry', array( $this, '_show_on_front_entry' ) );
+
+		$url_list = $posts_provider->get_url_list( 1, 'page' );
+
+		$this->assertSame( array(), $url_list );
+
+		update_option( 'show_on_front', 'posts' );
+
+		$url_list      = $posts_provider->get_url_list( 1, 'page' );
+		$sitemap_entry = array_shift( $url_list );
+
+		$this->assertTrue( isset( $sitemap_entry['lastmod'] ) );
+	}
+
+	/**
+	 * Callback for 'wp_sitemaps_posts_show_on_front_entry' filter.
+	 */
+	public function _show_on_front_entry( $sitemap_entry ) {
+		$sitemap_entry['lastmod'] = wp_date( DATE_W3C, time() );
+
+		return $sitemap_entry;
+	}
+}
diff --git a/tests/sitemaps/sitemaps-registry.php b/tests/sitemaps/sitemaps-registry.php
new file mode 100644
index 0000000000..b5ac7e952c
--- /dev/null
+++ b/tests/sitemaps/sitemaps-registry.php
@@ -0,0 +1,33 @@
+<?php
+
+/**
+ * @group sitemaps
+ */
+class Test_WP_Sitemaps_Registry extends WP_UnitTestCase {
+	public function test_add_provider() {
+		$provider = new WP_Sitemaps_Test_Provider();
+		$registry = new WP_Sitemaps_Registry();
+
+		$actual    = $registry->add_provider( 'foo', $provider );
+		$providers = $registry->get_providers();
+
+		$this->assertTrue( $actual );
+		$this->assertCount( 1, $providers );
+		$this->assertSame( $providers['foo'], $provider, 'Can not confirm sitemap registration is working.' );
+	}
+
+	public function test_add_provider_prevent_duplicates() {
+		$provider1 = new WP_Sitemaps_Test_Provider();
+		$provider2 = new WP_Sitemaps_Test_Provider();
+		$registry  = new WP_Sitemaps_Registry();
+
+		$actual1   = $registry->add_provider( 'foo', $provider1 );
+		$actual2   = $registry->add_provider( 'foo', $provider2 );
+		$providers = $registry->get_providers();
+
+		$this->assertTrue( $actual1 );
+		$this->assertFalse( $actual2 );
+		$this->assertCount( 1, $providers );
+		$this->assertSame( $providers['foo'], $provider1, 'Can not confirm sitemap registration is working.' );
+	}
+}
diff --git a/tests/sitemaps/sitemaps-renderer.php b/tests/sitemaps/sitemaps-renderer.php
new file mode 100644
index 0000000000..f2ee1de1c7
--- /dev/null
+++ b/tests/sitemaps/sitemaps-renderer.php
@@ -0,0 +1,283 @@
+<?php
+
+/**
+ * @group sitemaps
+ */
+class Test_WP_Sitemaps_Renderer extends WP_Test_XML_TestCase {
+	public function test_get_sitemap_stylesheet_url() {
+		$sitemap_renderer = new WP_Sitemaps_Renderer();
+		$stylesheet_url   = $sitemap_renderer->get_sitemap_stylesheet_url();
+
+		$this->assertStringEndsWith( '/?sitemap-stylesheet=sitemap', $stylesheet_url );
+	}
+
+	public function test_get_sitemap_stylesheet_url_pretty_permalinks() {
+		// Set permalinks for testing.
+		$this->set_permalink_structure( '/%year%/%postname%/' );
+
+		$sitemap_renderer = new WP_Sitemaps_Renderer();
+		$stylesheet_url   = $sitemap_renderer->get_sitemap_stylesheet_url();
+
+		// Clean up permalinks.
+		$this->set_permalink_structure();
+
+		$this->assertStringEndsWith( '/wp-sitemap.xsl', $stylesheet_url );
+	}
+
+	public function test_get_sitemap_index_stylesheet_url() {
+		$sitemap_renderer = new WP_Sitemaps_Renderer();
+		$stylesheet_url   = $sitemap_renderer->get_sitemap_index_stylesheet_url();
+
+		$this->assertStringEndsWith( '/?sitemap-stylesheet=index', $stylesheet_url );
+	}
+
+	public function test_get_sitemap_index_stylesheet_url_pretty_permalinks() {
+		// Set permalinks for testing.
+		$this->set_permalink_structure( '/%year%/%postname%/' );
+
+		$sitemap_renderer = new WP_Sitemaps_Renderer();
+		$stylesheet_url   = $sitemap_renderer->get_sitemap_index_stylesheet_url();
+
+		// Clean up permalinks.
+		$this->set_permalink_structure();
+
+		$this->assertStringEndsWith( '/wp-sitemap-index.xsl', $stylesheet_url );
+	}
+
+	/**
+	 * Test XML output for the sitemap index renderer.
+	 */
+	public function test_get_sitemap_index_xml() {
+		$entries = array(
+			array(
+				'loc' => 'http://' . WP_TESTS_DOMAIN . '/wp-sitemap-posts-post-1.xml',
+			),
+			array(
+				'loc' => 'http://' . WP_TESTS_DOMAIN . '/wp-sitemap-posts-page-1.xml',
+			),
+			array(
+				'loc' => 'http://' . WP_TESTS_DOMAIN . '/wp-sitemap-taxonomies-category-1.xml',
+			),
+			array(
+				'loc' => 'http://' . WP_TESTS_DOMAIN . '/wp-sitemap-taxonomies-post_tag-1.xml',
+			),
+			array(
+				'loc' => 'http://' . WP_TESTS_DOMAIN . '/wp-sitemap-users-1.xml',
+			),
+		);
+
+		$renderer = new WP_Sitemaps_Renderer();
+
+		$actual   = $renderer->get_sitemap_index_xml( $entries );
+		$expected = '<?xml version="1.0" encoding="UTF-8"?>' .
+					'<?xml-stylesheet type="text/xsl" href="http://' . WP_TESTS_DOMAIN . '/?sitemap-stylesheet=index" ?>' .
+					'<sitemapindex xmlns="http://www.sitemaps.org/schemas/sitemap/0.9">' .
+					'<sitemap><loc>http://' . WP_TESTS_DOMAIN . '/wp-sitemap-posts-post-1.xml</loc></sitemap>' .
+					'<sitemap><loc>http://' . WP_TESTS_DOMAIN . '/wp-sitemap-posts-page-1.xml</loc></sitemap>' .
+					'<sitemap><loc>http://' . WP_TESTS_DOMAIN . '/wp-sitemap-taxonomies-category-1.xml</loc></sitemap>' .
+					'<sitemap><loc>http://' . WP_TESTS_DOMAIN . '/wp-sitemap-taxonomies-post_tag-1.xml</loc></sitemap>' .
+					'<sitemap><loc>http://' . WP_TESTS_DOMAIN . '/wp-sitemap-users-1.xml</loc></sitemap>' .
+					'</sitemapindex>';
+
+		$this->assertXMLEquals( $expected, $actual, 'Sitemap index markup incorrect.' );
+	}
+
+	/**
+	 * Test XML output for the sitemap index renderer with lastmod attributes.
+	 */
+	public function test_get_sitemap_index_xml_with_lastmod() {
+		$entries = array(
+			array(
+				'loc'     => 'http://' . WP_TESTS_DOMAIN . '/wp-sitemap-posts-post-1.xml',
+				'lastmod' => '2005-01-01',
+			),
+			array(
+				'loc'     => 'http://' . WP_TESTS_DOMAIN . '/wp-sitemap-posts-page-1.xml',
+				'lastmod' => '2005-01-01',
+			),
+			array(
+				'loc'     => 'http://' . WP_TESTS_DOMAIN . '/wp-sitemap-taxonomies-category-1.xml',
+				'lastmod' => '2005-01-01',
+			),
+			array(
+				'loc'     => 'http://' . WP_TESTS_DOMAIN . '/wp-sitemap-taxonomies-post_tag-1.xml',
+				'lastmod' => '2005-01-01',
+			),
+			array(
+				'loc'     => 'http://' . WP_TESTS_DOMAIN . '/wp-sitemap-users-1.xml',
+				'lastmod' => '2005-01-01',
+			),
+		);
+
+		$renderer = new WP_Sitemaps_Renderer();
+
+		$actual   = $renderer->get_sitemap_index_xml( $entries );
+		$expected = '<?xml version="1.0" encoding="UTF-8"?>' .
+			'<?xml-stylesheet type="text/xsl" href="http://' . WP_TESTS_DOMAIN . '/?sitemap-stylesheet=index" ?>' .
+			'<sitemapindex xmlns="http://www.sitemaps.org/schemas/sitemap/0.9">' .
+			'<sitemap><loc>http://' . WP_TESTS_DOMAIN . '/wp-sitemap-posts-post-1.xml</loc><lastmod>2005-01-01</lastmod></sitemap>' .
+			'<sitemap><loc>http://' . WP_TESTS_DOMAIN . '/wp-sitemap-posts-page-1.xml</loc><lastmod>2005-01-01</lastmod></sitemap>' .
+			'<sitemap><loc>http://' . WP_TESTS_DOMAIN . '/wp-sitemap-taxonomies-category-1.xml</loc><lastmod>2005-01-01</lastmod></sitemap>' .
+			'<sitemap><loc>http://' . WP_TESTS_DOMAIN . '/wp-sitemap-taxonomies-post_tag-1.xml</loc><lastmod>2005-01-01</lastmod></sitemap>' .
+			'<sitemap><loc>http://' . WP_TESTS_DOMAIN . '/wp-sitemap-users-1.xml</loc><lastmod>2005-01-01</lastmod></sitemap>' .
+			'</sitemapindex>';
+
+		$this->assertXMLEquals( $expected, $actual, 'Sitemap index markup incorrect.' );
+	}
+
+	/**
+	 * Test that all children of Q{http://www.sitemaps.org/schemas/sitemap/0.9}sitemap in the
+	 * rendered index XML are defined in the Sitemaps spec (i.e., loc, lastmod).
+	 *
+	 * Note that when a means of adding elements in extension namespaces is settled on,
+	 * this test will need to be updated accordingly.
+	 *
+	 * @expectedIncorrectUsage WP_Sitemaps_Renderer::get_sitemap_index_xml
+	 */
+	public function test_get_sitemap_index_xml_extra_elements() {
+		$url_list = array(
+			array(
+				'loc'     => 'http://' . WP_TESTS_DOMAIN . '/wp-sitemap-posts-post-1.xml',
+				'unknown' => 'this is a test',
+			),
+			array(
+				'loc'     => 'http://' . WP_TESTS_DOMAIN . '/wp-sitemap-posts-page-1.xml',
+				'unknown' => 'that was a test',
+			),
+		);
+
+		$renderer = new WP_Sitemaps_Renderer();
+
+		$xml_dom = $this->loadXML( $renderer->get_sitemap_index_xml( $url_list ) );
+		$xpath   = new DOMXPath( $xml_dom );
+		$xpath->registerNamespace( 'sitemap', 'http://www.sitemaps.org/schemas/sitemap/0.9' );
+
+		$this->assertEquals(
+			0,
+			$xpath->evaluate( "count( /sitemap:sitemapindex/sitemap:sitemap/*[  namespace-uri() != 'http://www.sitemaps.org/schemas/sitemap/0.9' or not( local-name() = 'loc' or local-name() = 'lastmod' ) ] )" ),
+			'Invalid child of "sitemap:sitemap" in rendered index XML.'
+		);
+	}
+
+	/**
+	 * Test XML output for the sitemap index renderer when stylesheet is disabled.
+	 */
+	public function test_get_sitemap_index_xml_without_stylesheet() {
+		$entries = array(
+			array(
+				'loc' => 'http://' . WP_TESTS_DOMAIN . '/wp-sitemap-posts-post-1.xml',
+			),
+		);
+
+		add_filter( 'wp_sitemaps_stylesheet_index_url', '__return_false' );
+
+		$renderer = new WP_Sitemaps_Renderer();
+
+		$xml_dom = $this->loadXML( $renderer->get_sitemap_index_xml( $entries ) );
+		$xpath   = new DOMXPath( $xml_dom );
+
+		$this->assertSame(
+			0,
+			$xpath->query( '//processing-instruction( "xml-stylesheet" )' )->length,
+			'Sitemap index incorrectly contains the xml-stylesheet processing instruction.'
+		);
+	}
+
+	/**
+	 * Test XML output for the sitemap page renderer.
+	 */
+	public function test_get_sitemap_xml() {
+		$url_list = array(
+			array(
+				'loc' => 'http://' . WP_TESTS_DOMAIN . '/2019/10/post-1',
+			),
+			array(
+				'loc' => 'http://' . WP_TESTS_DOMAIN . '/2019/10/post-2',
+			),
+			array(
+				'loc' => 'http://' . WP_TESTS_DOMAIN . '/2019/10/post-3',
+			),
+			array(
+				'loc' => 'http://' . WP_TESTS_DOMAIN . '/2019/10/post-4',
+			),
+			array(
+				'loc' => 'http://' . WP_TESTS_DOMAIN . '/2019/10/post-5',
+			),
+		);
+
+		$renderer = new WP_Sitemaps_Renderer();
+
+		$actual   = $renderer->get_sitemap_xml( $url_list );
+		$expected = '<?xml version="1.0" encoding="UTF-8"?>' .
+					'<?xml-stylesheet type="text/xsl" href="http://' . WP_TESTS_DOMAIN . '/?sitemap-stylesheet=sitemap" ?>' .
+					'<urlset xmlns="http://www.sitemaps.org/schemas/sitemap/0.9">' .
+					'<url><loc>http://' . WP_TESTS_DOMAIN . '/2019/10/post-1</loc></url>' .
+					'<url><loc>http://' . WP_TESTS_DOMAIN . '/2019/10/post-2</loc></url>' .
+					'<url><loc>http://' . WP_TESTS_DOMAIN . '/2019/10/post-3</loc></url>' .
+					'<url><loc>http://' . WP_TESTS_DOMAIN . '/2019/10/post-4</loc></url>' .
+					'<url><loc>http://' . WP_TESTS_DOMAIN . '/2019/10/post-5</loc></url>' .
+					'</urlset>';
+
+		$this->assertXMLEquals( $expected, $actual, 'Sitemap page markup incorrect.' );
+	}
+
+	/**
+	 * Test XML output for the sitemap page renderer when stylesheet is disabled.
+	 */
+	public function test_get_sitemap_xml_without_stylesheet() {
+		$url_list = array(
+			array(
+				'loc' => 'http://' . WP_TESTS_DOMAIN . '/2019/10/post-1',
+			),
+		);
+
+		add_filter( 'wp_sitemaps_stylesheet_url', '__return_false' );
+
+		$renderer = new WP_Sitemaps_Renderer();
+
+		$xml_dom = $this->loadXML( $renderer->get_sitemap_xml( $url_list ) );
+		$xpath   = new DOMXPath( $xml_dom );
+
+		$this->assertSame(
+			0,
+			$xpath->query( '//processing-instruction( "xml-stylesheet" )' )->length,
+			'Sitemap incorrectly contains the xml-stylesheet processing instruction.'
+		);
+	}
+
+	/**
+	 * Test that all children of Q{http://www.sitemaps.org/schemas/sitemap/0.9}url in the
+	 * rendered sitemap XML are defined in the Sitemaps spec (i.e., loc, lastmod, changefreq, priority).
+	 *
+	 * Note that when a means of adding elements in extension namespaces is settled on,
+	 * this test will need to be updated accordingly.
+	 *
+	 * @expectedIncorrectUsage WP_Sitemaps_Renderer::get_sitemap_xml
+	 */
+	public function test_get_sitemap_xml_extra_elements() {
+		$url_list = array(
+			array(
+				'loc'    => 'http://' . WP_TESTS_DOMAIN . '/2019/10/post-1',
+				'string' => 'value',
+				'number' => 200,
+			),
+			array(
+				'loc'    => 'http://' . WP_TESTS_DOMAIN . '/2019/10/post-2',
+				'string' => 'another value',
+				'number' => 300,
+			),
+		);
+
+		$renderer = new WP_Sitemaps_Renderer();
+
+		$xml_dom = $this->loadXML( $renderer->get_sitemap_xml( $url_list ) );
+		$xpath   = new DOMXPath( $xml_dom );
+		$xpath->registerNamespace( 'sitemap', 'http://www.sitemaps.org/schemas/sitemap/0.9' );
+
+		$this->assertEquals(
+			0,
+			$xpath->evaluate( "count( /sitemap:urlset/sitemap:url/*[  namespace-uri() != 'http://www.sitemaps.org/schemas/sitemap/0.9' or not( local-name() = 'loc' or local-name() = 'lastmod' or local-name() = 'changefreq' or local-name() = 'priority' ) ] )" ),
+			'Invalid child of "sitemap:url" in rendered XML.'
+		);
+	}
+}
diff --git a/tests/sitemaps/sitemaps-stylesheet.php b/tests/sitemaps/sitemaps-stylesheet.php
new file mode 100644
index 0000000000..09aacf0440
--- /dev/null
+++ b/tests/sitemaps/sitemaps-stylesheet.php
@@ -0,0 +1,42 @@
+<?php
+
+/**
+ * @group sitemaps
+ */
+class Test_WP_Sitemaps_Stylesheet extends WP_UnitTestCase {
+	/**
+	 * Test that stylesheet content can be filtered.
+	 */
+	public function test_filter_sitemaps_stylesheet_content() {
+		$stylesheet = new WP_Sitemaps_Stylesheet();
+
+		add_filter( 'wp_sitemaps_stylesheet_content', '__return_empty_string' );
+		$content = $stylesheet->get_sitemap_stylesheet();
+
+		$this->assertSame( '', $content, 'Could not filter stylesheet content' );
+	}
+
+	/**
+	 * Test that sitemap index stylesheet content can be filtered.
+	 */
+	public function test_filter_sitemaps_stylesheet_index_content() {
+		$stylesheet = new WP_Sitemaps_Stylesheet();
+
+		add_filter( 'wp_sitemaps_stylesheet_index_content', '__return_empty_string' );
+		$content = $stylesheet->get_sitemap_index_stylesheet();
+
+		$this->assertSame( '', $content, 'Could not filter sitemap index stylesheet content' );
+	}
+
+	/**
+	 * Test that sitemap stylesheet CSS can be filtered.
+	 */
+	public function test_filter_sitemaps_stylesheet_css() {
+		$stylesheet = new WP_Sitemaps_Stylesheet();
+
+		add_filter( 'wp_sitemaps_stylesheet_css', '__return_empty_string' );
+		$css = $stylesheet->get_stylesheet_css();
+
+		$this->assertSame( '', $css, 'Could not filter sitemap stylesheet CSS' );
+	}
+}
diff --git a/tests/sitemaps/sitemaps-taxonomies.php b/tests/sitemaps/sitemaps-taxonomies.php
new file mode 100644
index 0000000000..bc43c8a227
--- /dev/null
+++ b/tests/sitemaps/sitemaps-taxonomies.php
@@ -0,0 +1,221 @@
+<?php
+
+/**
+ * @group sitemaps
+ */
+class Test_WP_Sitemaps_Taxonomies extends WP_UnitTestCase {
+	/**
+	 * List of post_tag IDs.
+	 *
+	 * @var array
+	 */
+	public static $post_tags;
+
+	/**
+	 * List of category IDs.
+	 *
+	 * @var array
+	 */
+	public static $cats;
+
+	/**
+	 * Editor ID for use in some tests.
+	 *
+	 * @var int
+	 */
+	public static $editor_id;
+
+	/**
+	 * Set up fixtures.
+	 *
+	 * @param WP_UnitTest_Factory $factory A WP_UnitTest_Factory object.
+	 */
+	public static function wpSetUpBeforeClass( $factory ) {
+		self::$cats      = $factory->term->create_many( 10, array( 'taxonomy' => 'category' ) );
+		self::$post_tags = $factory->term->create_many( 10 );
+		self::$editor_id = $factory->user->create( array( 'role' => 'editor' ) );
+	}
+
+	/**
+	 * Test getting a URL list for default taxonomies via
+	 * WP_Sitemaps_Taxonomies::get_url_list().
+	 */
+	public function test_get_url_list_taxonomies() {
+		// Add the default category to the list of categories we're testing.
+		$categories = array_merge( array( 1 ), self::$cats );
+
+		// Create a test post to calculate update times.
+		$post = self::factory()->post->create_and_get(
+			array(
+				'tags_input'    => self::$post_tags,
+				'post_category' => $categories,
+			)
+		);
+
+		$tax_provider = new WP_Sitemaps_Taxonomies();
+
+		$cat_list = $tax_provider->get_url_list( 1, 'category' );
+
+		$expected_cats = array_map(
+			static function ( $id ) use ( $post ) {
+				return array(
+					'loc' => get_term_link( $id, 'category' ),
+				);
+			},
+			$categories
+		);
+
+		$this->assertSame( $expected_cats, $cat_list, 'Category URL list does not match.' );
+
+		$tag_list = $tax_provider->get_url_list( 1, 'post_tag' );
+
+		$expected_tags = array_map(
+			static function ( $id ) use ( $post ) {
+				return array(
+					'loc' => get_term_link( $id, 'post_tag' ),
+				);
+			},
+			self::$post_tags
+		);
+
+		$this->assertSame( $expected_tags, $tag_list, 'Post Tags URL list does not match.' );
+	}
+
+	/**
+	 * Test getting a URL list for a custom taxonomy via
+	 * WP_Sitemaps_Taxonomies::get_url_list().
+	 */
+	public function test_get_url_list_custom_taxonomy() {
+		wp_set_current_user( self::$editor_id );
+
+		// Create a custom taxonomy for this test.
+		$taxonomy = 'test_taxonomy';
+		register_taxonomy( $taxonomy, 'post' );
+
+		// Create test terms in the custom taxonomy.
+		$terms = self::factory()->term->create_many( 10, array( 'taxonomy' => $taxonomy ) );
+
+		// Create a test post applied to all test terms.
+		$post = self::factory()->post->create_and_get( array( 'tax_input' => array( $taxonomy => $terms ) ) );
+
+		$expected = array_map(
+			static function ( $id ) use ( $taxonomy, $post ) {
+				return array(
+					'loc' => get_term_link( $id, $taxonomy ),
+				);
+			},
+			$terms
+		);
+
+		$tax_provider = new WP_Sitemaps_Taxonomies();
+
+		$post_list = $tax_provider->get_url_list( 1, $taxonomy );
+
+		// Clean up.
+		unregister_taxonomy_for_object_type( $taxonomy, 'post' );
+
+		$this->assertSame( $expected, $post_list, 'Custom taxonomy term links are not visible.' );
+	}
+
+	/**
+	 * Test getting a URL list for a private custom taxonomy via
+	 * WP_Sitemaps_Taxonomies::get_url_list().
+	 */
+	public function test_get_url_list_custom_taxonomy_private() {
+		// Create a custom taxonomy for this test.
+		$taxonomy = 'private_taxonomy';
+		register_taxonomy( $taxonomy, 'post', array( 'public' => false ) );
+
+		// Create test terms in the custom taxonomy.
+		$terms = self::factory()->term->create_many( 10, array( 'taxonomy' => $taxonomy ) );
+
+		// Create a test post applied to all test terms.
+		self::factory()->post->create( array( 'tax_input' => array( $taxonomy => $terms ) ) );
+
+		$tax_provider = new WP_Sitemaps_Taxonomies();
+
+		$post_list = $tax_provider->get_url_list( 1, $taxonomy );
+
+		// Clean up.
+		unregister_taxonomy_for_object_type( $taxonomy, 'post' );
+
+		$this->assertEmpty( $post_list, 'Private taxonomy term links are visible.' );
+	}
+
+	/**
+	 * Test getting a URL list for a custom taxonomy that is not publicly queryable.
+	 */
+	public function test_get_url_list_custom_taxonomy_not_publicly_queryable() {
+		// Create a custom taxonomy for this test.
+		$taxonomy = 'non_queryable_tax';
+		register_taxonomy( $taxonomy, 'post', array( 'publicly_queryable' => false ) );
+
+		// Create test terms in the custom taxonomy.
+		$terms = self::factory()->term->create_many( 10, array( 'taxonomy' => $taxonomy ) );
+
+		// Create a test post applied to all test terms.
+		self::factory()->post->create( array( 'tax_input' => array( $taxonomy => $terms ) ) );
+
+		$tax_provider = new WP_Sitemaps_Taxonomies();
+
+		$post_list = $tax_provider->get_url_list( 1, $taxonomy );
+
+		// Clean up.
+		unregister_taxonomy_for_object_type( $taxonomy, 'post' );
+
+		$this->assertEmpty( $post_list, 'Private taxonomy term links are visible.' );
+	}
+
+	/**
+	 * Test sitemap index entries with public and private taxonomies.
+	 */
+	public function test_get_sitemap_entries_custom_taxonomies() {
+		wp_set_current_user( self::$editor_id );
+
+		// Create a custom public and private taxonomies for this test.
+		register_taxonomy( 'public_taxonomy', 'post' );
+		register_taxonomy( 'non_queryable_taxonomy', 'post', array( 'publicly_queryable' => false ) );
+		register_taxonomy( 'private_taxonomy', 'post', array( 'public' => false ) );
+
+		// Create test terms in the custom taxonomy.
+		$public_term        = self::factory()->term->create( array( 'taxonomy' => 'public_taxonomy' ) );
+		$non_queryable_term = self::factory()->term->create( array( 'taxonomy' => 'non_queryable_taxonomy' ) );
+		$private_term       = self::factory()->term->create( array( 'taxonomy' => 'private_taxonomy' ) );
+
+		// Create a test post applied to all test terms.
+		self::factory()->post->create_and_get(
+			array(
+				'tax_input' => array(
+					'public_taxonomy'        => array( $public_term ),
+					'non_queryable_taxonomy' => array( $non_queryable_term ),
+					'private_taxonomy'       => array( $private_term ),
+				),
+			)
+		);
+
+		$tax_provider = new WP_Sitemaps_Taxonomies();
+		$entries      = wp_list_pluck( $tax_provider->get_sitemap_entries(), 'loc' );
+
+		// Clean up.
+		unregister_taxonomy_for_object_type( 'public_taxonomy', 'post' );
+		unregister_taxonomy_for_object_type( 'non_queryable_taxonomy', 'post' );
+		unregister_taxonomy_for_object_type( 'private_taxonomy', 'post' );
+
+		$this->assertContains( 'http://' . WP_TESTS_DOMAIN . '/?sitemap=taxonomies&sitemap-subtype=public_taxonomy&paged=1', $entries, 'Public Taxonomies are not in the index.' );
+		$this->assertNotContains( 'http://' . WP_TESTS_DOMAIN . '/?sitemap=taxonomies&sitemap-subtype=non_queryable_taxonomy&paged=1', $entries, 'Private Taxonomies are visible in the index.' );
+		$this->assertNotContains( 'http://' . WP_TESTS_DOMAIN . '/?sitemap=taxonomies&sitemap-subtype=private_taxonomy&paged=1', $entries, 'Private Taxonomies are visible in the index.' );
+	}
+
+	/**
+	 * Test ability to filter object subtypes.
+	 */
+	public function test_filter_sitemaps_taxonomies() {
+		$taxonomies_provider = new WP_Sitemaps_Taxonomies();
+
+		// Return an empty array to show that the list of subtypes is filterable.
+		add_filter( 'wp_sitemaps_taxonomies', '__return_empty_array' );
+		$subtypes = $taxonomies_provider->get_object_subtypes();
+
+		$this->assertSame( array(), $subtypes, 'Could not filter taxonomies subtypes.' );
+	}
+}
diff --git a/tests/sitemaps/sitemaps-users.php b/tests/sitemaps/sitemaps-users.php
new file mode 100644
index 0000000000..6e625f5fcc
--- /dev/null
+++ b/tests/sitemaps/sitemaps-users.php
@@ -0,0 +1,57 @@
+<?php
+
+/**
+ * @group sitemaps
+ */
+class Test_WP_Sitemaps_Users extends WP_UnitTestCase {
+	/**
+	 * List of user IDs.
+	 *
+	 * @var array
+	 */
+	public static $users;
+
+	/**
+	 * Editor ID for use in some tests.
+	 *
+	 * @var int
+	 */
+	public static $editor_id;
+
+	/**
+	 * Set up fixtures.
+	 *
+	 * @param WP_UnitTest_Factory $factory A WP_UnitTest_Factory object.
+	 */
+	public static function wpSetUpBeforeClass( $factory ) {
+		self::$users     = $factory->user->create_many( 10, array( 'role' => 'editor' ) );
+		self::$editor_id = self::$users[0];
+	}
+
+	/**
+	 * Test getting a URL list for a users sitemap page via
+	 * WP_Sitemaps_Users::get_url_list().
+	 */
+	public function test_get_url_list_users() {
+		// Set up the user to an editor to assign posts to other users.
+		wp_set_current_user( self::$editor_id );
+
+		// Create a set of posts for each user and generate the expected URL list data.
+		$expected = array_map(
+			static function ( $user_id ) {
+				$post = self::factory()->post->create_and_get( array( 'post_author' => $user_id ) );
+
+				return array(
+					'loc' => get_author_posts_url( $user_id ),
+				);
+			},
+			self::$users
+		);
+
+		$user_provider = new WP_Sitemaps_Users();
+
+		$url_list = $user_provider->get_url_list( 1 );
+
+		$this->assertSameSets( $expected, $url_list );
+	}
+}
diff --git a/tests/sitemaps/sitemaps.php b/tests/sitemaps/sitemaps.php
new file mode 100644
index 0000000000..1ce512c6ac
--- /dev/null
+++ b/tests/sitemaps/sitemaps.php
@@ -0,0 +1,492 @@
+<?php
+/**
+ * Sitemaps: Sitemaps_Tests class
+ *
+ * Main test class.
+ *
+ * @package   Sitemaps
+ * @copyright 2019 The Core Sitemaps Contributors
+ * @license   GNU General Public License, version 2
+ * @link      https://github.com/GoogleChromeLabs/wp-sitemaps
+ */
+
+/**
+ * Core sitemaps test cases.
+ *
+ * @group sitemaps
+ */
+class Test_Sitemaps extends WP_UnitTestCase {
+
+	/**
+	 * List of user IDs.
+	 *
+	 * @var array
+	 */
+	public static $users;
+
+	/**
+	 * List of post_tag IDs.
+	 *
+	 * @var array
+	 */
+	public static $post_tags;
+
+	/**
+	 * List of category IDs.
+	 *
+	 * @var array
+	 */
+	public static $cats;
+
+	/**
+	 * List of post type post IDs.
+	 *
+	 * @var array
+	 */
+	public static $posts;
+
+	/**
+	 * List of post type page IDs.
+	 *
+	 * @var array
+	 */
+	public static $pages;
+
+	/**
+	 * Editor ID for use in some tests.
+	 *
+	 * @var int
+	 */
+	public static $editor_id;
+
+	/**
+	 * Test sitemap provider.
+	 *
+	 * @var WP_Sitemaps_Test_Provider
+	 */
+	public static $test_provider;
+
+	/**
+	 * Set up fixtures.
+	 *
+	 * @param WP_UnitTest_Factory $factory A WP_UnitTest_Factory object.
+	 */
+	public static function wpSetUpBeforeClass( $factory ) {
+		self::$users     = $factory->user->create_many( 10 );
+		self::$post_tags = $factory->term->create_many( 10 );
+		self::$cats      = $factory->term->create_many( 10, array( 'taxonomy' => 'category' ) );
+		self::$pages     = $factory->post->create_many( 10, array( 'post_type' => 'page' ) );
+
+		// Create a set of posts pre-assigned to tags and authors.
+		self::$posts = $factory->post->create_many(
+			10,
+			array(
+				'tags_input'  => self::$post_tags,
+				'post_author' => reset( self::$users ),
+			)
+		);
+
+		// Create a user with an editor role to complete some tests.
+		self::$editor_id = $factory->user->create( array( 'role' => 'editor' ) );
+
+		self::$test_provider = new WP_Sitemaps_Test_Provider();
+	}
+
+	/**
+	 * Helper function to get all sitemap entries data.
+	 *
+	 * @return array A list of sitemap entires.
+	 */
+	public function _get_sitemap_entries() {
+		$entries = array();
+
+		$providers = wp_get_sitemap_providers();
+
+		foreach ( $providers as $provider ) {
+			// Using `array_push` is more efficient than `array_merge` in the loop.
+			array_push( $entries, ...$provider->get_sitemap_entries() );
+		}
+
+		return $entries;
+	}
+
+	/**
+	 * Test default sitemap entries.
+	 */
+	public function test_get_sitemap_entries() {
+		$entries = $this->_get_sitemap_entries();
+
+		$expected = array(
+			array(
+				'loc' => 'http://' . WP_TESTS_DOMAIN . '/?sitemap=posts&sitemap-subtype=post&paged=1',
+			),
+			array(
+				'loc' => 'http://' . WP_TESTS_DOMAIN . '/?sitemap=posts&sitemap-subtype=page&paged=1',
+			),
+			array(
+				'loc' => 'http://' . WP_TESTS_DOMAIN . '/?sitemap=taxonomies&sitemap-subtype=category&paged=1',
+			),
+			array(
+				'loc' => 'http://' . WP_TESTS_DOMAIN . '/?sitemap=taxonomies&sitemap-subtype=post_tag&paged=1',
+			),
+			array(
+				'loc' => 'http://' . WP_TESTS_DOMAIN . '/?sitemap=users&paged=1',
+			),
+		);
+
+		$this->assertSame( $expected, $entries );
+	}
+
+	/**
+	 * Test default sitemap entries with permalinks on.
+	 */
+	public function test_get_sitemap_entries_post_with_permalinks() {
+		$this->set_permalink_structure( '/%year%/%postname%/' );
+
+		$entries = $this->_get_sitemap_entries();
+
+		$expected = array(
+			array(
+				'loc' => 'http://' . WP_TESTS_DOMAIN . '/wp-sitemap-posts-post-1.xml',
+			),
+			array(
+				'loc' => 'http://' . WP_TESTS_DOMAIN . '/wp-sitemap-posts-page-1.xml',
+			),
+			array(
+				'loc' => 'http://' . WP_TESTS_DOMAIN . '/wp-sitemap-taxonomies-category-1.xml',
+			),
+			array(
+				'loc' => 'http://' . WP_TESTS_DOMAIN . '/wp-sitemap-taxonomies-post_tag-1.xml',
+			),
+			array(
+				'loc' => 'http://' . WP_TESTS_DOMAIN . '/wp-sitemap-users-1.xml',
+			),
+		);
+
+		// Clean up permalinks.
+		$this->set_permalink_structure();
+
+		$this->assertSame( $expected, $entries );
+	}
+
+	/**
+	 * Test sitemap index entries with public and private custom post types.
+	 */
+	public function test_get_sitemap_entries_custom_post_types() {
+		// Register and create a public post type post.
+		register_post_type( 'public_cpt', array( 'public' => true ) );
+		self::factory()->post->create( array( 'post_type' => 'public_cpt' ) );
+
+		// Register and create a private post type post.
+		register_post_type( 'private_cpt', array( 'public' => false ) );
+		self::factory()->post->create( array( 'post_type' => 'private_cpt' ) );
+
+		$entries = wp_list_pluck( $this->_get_sitemap_entries(), 'loc' );
+
+		// Clean up.
+		unregister_post_type( 'public_cpt' );
+		unregister_post_type( 'private_cpt' );
+
+		$this->assertContains( 'http://' . WP_TESTS_DOMAIN . '/?sitemap=posts&sitemap-subtype=public_cpt&paged=1', $entries, 'Public CPTs are not in the index.' );
+		$this->assertNotContains( 'http://' . WP_TESTS_DOMAIN . '/?sitemap=posts&sitemap-subtype=private_cpt&paged=1', $entries, 'Private CPTs are visible in the index.' );
+	}
+
+	/**
+	 * Test sitemap index entries with public and private custom post types.
+	 *
+	 * @ticket 50607
+	 */
+	public function test_get_sitemap_entries_not_publicly_queryable_post_types() {
+		register_post_type(
+			'non_queryable_cpt',
+			array(
+				'public'             => true,
+				'publicly_queryable' => false,
+			)
+		);
+		self::factory()->post->create( array( 'post_type' => 'non_queryable_cpt' ) );
+
+		$entries = wp_list_pluck( $this->_get_sitemap_entries(), 'loc' );
+
+		// Clean up.
+		unregister_post_type( 'non_queryable_cpt' );
+
+		$this->assertNotContains( 'http://' . WP_TESTS_DOMAIN . '/?sitemap=posts&sitemap-subtype=non_queryable_cpt&paged=1', $entries, 'Non-publicly queryable CPTs are visible in the index.' );
+	}
+
+	/**
+	 * Tests getting a URL list for post type post.
+	 */
+	public function test_get_url_list_post() {
+		$providers = wp_get_sitemap_providers();
+
+		$post_list = $providers['posts']->get_url_list( 1, 'post' );
+
+		$expected = $this->_get_expected_url_list( 'post', self::$posts );
+
+		$this->assertSame( $expected, $post_list );
+	}
+
+	/**
+	 * Tests getting a URL list for post type page.
+	 */
+	public function test_get_url_list_page() {
+		// Short circuit the show on front option.
+		add_filter( 'pre_option_show_on_front', '__return_true' );
+
+		$providers = wp_get_sitemap_providers();
+
+		$post_list = $providers['posts']->get_url_list( 1, 'page' );
+
+		$expected = $this->_get_expected_url_list( 'page', self::$pages );
+
+		$this->assertSame( $expected, $post_list );
+	}
+
+	/**
+	 * Tests getting a URL list for post type page with included home page.
+	 */
+	public function test_get_url_list_page_with_home() {
+		$providers = wp_get_sitemap_providers();
+
+		$post_list = $providers['posts']->get_url_list( 1, 'page' );
+
+		$expected = $this->_get_expected_url_list( 'page', self::$pages );
+
+		// Add the homepage to the front of the URL list.
+		array_unshift(
+			$expected,
+			array(
+				'loc' => home_url( '/' ),
+			)
+		);
+
+		$this->assertSame( $expected, $post_list );
+	}
+
+	/**
+	 * Tests getting a URL list for post with private post.
+	 */
+	public function test_get_url_list_private_post() {
+		wp_set_current_user( self::$editor_id );
+
+		$providers = wp_get_sitemap_providers();
+
+		$post_list_before = $providers['posts']->get_url_list( 1, 'post' );
+
+		$private_post_id = self::factory()->post->create( array( 'post_status' => 'private' ) );
+
+		$post_list_after = $providers['posts']->get_url_list( 1, 'post' );
+
+		$private_post = array(
+			'loc' => get_permalink( $private_post_id ),
+		);
+
+		$this->assertNotContains( $private_post, $post_list_after );
+		$this->assertSameSets( $post_list_before, $post_list_after );
+	}
+
+	/**
+	 * Tests getting a URL list for a custom post type.
+	 */
+	public function test_get_url_list_cpt() {
+		$post_type = 'custom_type';
+
+		// Registered post types are private unless explicitly set to public.
+		register_post_type( $post_type, array( 'public' => true ) );
+
+		$ids = self::factory()->post->create_many( 10, array( 'post_type' => $post_type ) );
+
+		$providers = wp_get_sitemap_providers();
+
+		$post_list = $providers['posts']->get_url_list( 1, $post_type );
+
+		$expected = $this->_get_expected_url_list( $post_type, $ids );
+
+		// Clean up.
+		unregister_post_type( $post_type );
+
+		$this->assertSame( $expected, $post_list, 'Custom post type posts are not visible.' );
+	}
+
+	/**
+	 * Tests getting a URL list for a private custom post type.
+	 */
+	public function test_get_url_list_cpt_private() {
+		$post_type = 'private_type';
+
+		// Create a private post type for testing against data leaking.
+		register_post_type( $post_type, array( 'public' => false ) );
+
+		self::factory()->post->create_many( 10, array( 'post_type' => $post_type ) );
+
+		$providers = wp_get_sitemap_providers();
+
+		$post_list = $providers['posts']->get_url_list( 1, $post_type );
+
+		// Clean up.
+		unregister_post_type( $post_type );
+
+		$this->assertEmpty( $post_list, 'Private post types may be returned by the post provider.' );
+	}
+
+	/**
+	 * Tests getting a URL list for a private custom post type.
+	 *
+	 * @ticket 50607
+	 */
+	public function test_get_url_list_cpt_not_publicly_queryable() {
+		$post_type = 'non_queryable_cpt';
+
+		register_post_type(
+			$post_type,
+			array(
+				'public'             => true,
+				'publicly_queryable' => false,
+			)
+		);
+
+		self::factory()->post->create_many( 10, array( 'post_type' => $post_type ) );
+
+		$providers = wp_get_sitemap_providers();
+
+		$post_list = $providers['posts']->get_url_list( 1, $post_type );
+
+		// Clean up.
+		unregister_post_type( $post_type );
+
+		$this->assertEmpty( $post_list, 'Non-publicly queryable post types may be returned by the post provider.' );
+	}
+
+	/**
+	 * Helper function for building an expected url list.
+	 *
+	 * @param string $type An object sub type, e.g., post type.
+	 * @param array  $ids  Array of object IDs.
+	 * @return array A formed URL list.
+	 */
+	public function _get_expected_url_list( $type, $ids ) {
+		$posts = get_posts(
+			array(
+				'include'   => $ids,
+				'orderby'   => 'ID',
+				'order'     => 'ASC',
+				'post_type' => $type,
+			)
+		);
+
+		return array_map(
+			static function ( $post ) {
+				return array(
+					'loc' => get_permalink( $post ),
+				);
+			},
+			$posts
+		);
+	}
+
+	/**
+	 * Test functionality that adds a new sitemap provider to the registry.
+	 */
+	public function test_register_sitemap_provider() {
+		wp_register_sitemap_provider( 'test_sitemap', self::$test_provider );
+
+		$sitemaps = wp_get_sitemap_providers();
+
+		$this->assertSame( $sitemaps['test_sitemap'], self::$test_provider, 'Can not confirm sitemap registration is working.' );
+	}
+
+	/**
+	 * Test robots.txt output.
+	 */
+	public function test_robots_text() {
+		// Get the text added to the default robots text output.
+		$robots_text    = apply_filters( 'robots_txt', '', true );
+		$sitemap_string = 'Sitemap: http://' . WP_TESTS_DOMAIN . '/?sitemap=index';
+
+		$this->assertContains( $sitemap_string, $robots_text, 'Sitemap URL not included in robots text.' );
+	}
+
+	/**
+	 * Test robots.txt output for a private site.
+	 */
+	public function test_robots_text_private_site() {
+		$robots_text    = apply_filters( 'robots_txt', '', false );
+		$sitemap_string = 'Sitemap: http://' . WP_TESTS_DOMAIN . '/?sitemap=index';
+
+		$this->assertNotContains( $sitemap_string, $robots_text );
+	}
+
+	/**
+	 * Test robots.txt output with permalinks set.
+	 */
+	public function test_robots_text_with_permalinks() {
+		// Set permalinks for testing.
+		$this->set_permalink_structure( '/%year%/%postname%/' );
+
+		// Get the text added to the default robots text output.
+		$robots_text    = apply_filters( 'robots_txt', '', true );
+		$sitemap_string = 'Sitemap: http://' . WP_TESTS_DOMAIN . '/wp-sitemap.xml';
+
+		// Clean up permalinks.
+		$this->set_permalink_structure();
+
+		$this->assertContains( $sitemap_string, $robots_text, 'Sitemap URL not included in robots text.' );
+	}
+
+	/**
+	 * Test robots.txt output with line feed prefix.
+	 */
+	public function test_robots_text_prefixed_with_line_feed() {
+		// Get the text added to the default robots text output.
+		$robots_text    = apply_filters( 'robots_txt', '', true );
+		$sitemap_string = "\nSitemap: ";
+
+		$this->assertContains( $sitemap_string, $robots_text, 'Sitemap URL not prefixed with "\n".' );
+	}
+
+	/**
+	 * @ticket 50643
+	 */
+	public function test_sitemaps_enabled() {
+		$before = wp_sitemaps_get_server()->sitemaps_enabled();
+		add_filter( 'wp_sitemaps_enabled', '__return_false' );
+		$after = wp_sitemaps_get_server()->sitemaps_enabled();
+		remove_filter( 'wp_sitemaps_enabled', '__return_false' );
+
+		$this->assertTrue( $before );
+		$this->assertFalse( $after );
+	}
+
+	/**
+	 * @ticket 50643
+	 * @runInSeparateProcess
+	 * @preserveGlobalState disabled
+	 */
+	public function test_disable_sitemap_should_return_404() {
+		add_filter( 'wp_sitemaps_enabled', '__return_false' );
+
+		$this->go_to( home_url( '/?sitemap=index' ) );
+
+		wp_sitemaps_get_server()->render_sitemaps();
+
+		remove_filter( 'wp_sitemaps_enabled', '__return_false' );
+
+		$this->assertTrue( is_404() );
+	}
+
+	/**
+	 * @ticket 50643
+	 * @runInSeparateProcess
+	 * @preserveGlobalState disabled
+	 */
+	public function test_empty_url_list_should_return_404() {
+		wp_register_sitemap_provider( 'foo', new WP_Sitemaps_Empty_Test_Provider( 'foo' ) );
+
+		$this->go_to( home_url( '/?sitemap=foo' ) );
+
+		wp_sitemaps_get_server()->render_sitemaps();
+
+		$this->assertTrue( is_404() );
+	}
+}
diff --git a/tests/taxonomy.php b/tests/taxonomy.php
index 6d30ccf778..f2f023dbad 100644
--- a/tests/taxonomy.php
+++ b/tests/taxonomy.php
@@ -5,31 +5,31 @@
  */
 class Tests_Taxonomy extends WP_UnitTestCase {
 	function test_get_post_taxonomies() {
-		$this->assertEquals( array( 'category', 'post_tag', 'post_format' ), get_object_taxonomies( 'post' ) );
+		$this->assertSame( array( 'category', 'post_tag', 'post_format' ), get_object_taxonomies( 'post' ) );
 	}
 
 	function test_get_link_taxonomies() {
-		$this->assertEquals( array( 'link_category' ), get_object_taxonomies( 'link' ) );
+		$this->assertSame( array( 'link_category' ), get_object_taxonomies( 'link' ) );
 	}
 
 	/**
 	 * @ticket 5417
 	 */
 	function test_get_unknown_taxonomies() {
-		// taxonomies for an unknown object type
-		$this->assertEquals( array(), get_object_taxonomies( rand_str() ) );
-		$this->assertEquals( array(), get_object_taxonomies( '' ) );
-		$this->assertEquals( array(), get_object_taxonomies( 0 ) );
-		$this->assertEquals( array(), get_object_taxonomies( null ) );
+		// Taxonomies for an unknown object type.
+		$this->assertSame( array(), get_object_taxonomies( rand_str() ) );
+		$this->assertSame( array(), get_object_taxonomies( '' ) );
+		$this->assertSame( array(), get_object_taxonomies( 0 ) );
+		$this->assertSame( array(), get_object_taxonomies( null ) );
 	}
 
 	function test_get_post_taxonomy() {
 		foreach ( get_object_taxonomies( 'post' ) as $taxonomy ) {
 			$tax = get_taxonomy( $taxonomy );
-			// should return an object with the correct taxonomy object type
+			// Should return an object with the correct taxonomy object type.
 			$this->assertTrue( is_object( $tax ) );
 			$this->assertTrue( is_array( $tax->object_type ) );
-			$this->assertEquals( array( 'post' ), $tax->object_type );
+			$this->assertSame( array( 'post' ), $tax->object_type );
 		}
 	}
 
@@ -38,7 +38,7 @@ class Tests_Taxonomy extends WP_UnitTestCase {
 
 		$taxes = get_the_taxonomies( $post_id );
 		$this->assertNotEmpty( $taxes );
-		$this->assertEquals( array( 'category' ), array_keys( $taxes ) );
+		$this->assertSame( array( 'category' ), array_keys( $taxes ) );
 
 		$id = self::factory()->tag->create();
 		wp_set_post_tags( $post_id, array( $id ) );
@@ -46,7 +46,7 @@ class Tests_Taxonomy extends WP_UnitTestCase {
 		$taxes = get_the_taxonomies( $post_id );
 		$this->assertNotEmpty( $taxes );
 		$this->assertCount( 2, $taxes );
-		$this->assertEquals( array( 'category', 'post_tag' ), array_keys( $taxes ) );
+		$this->assertSame( array( 'category', 'post_tag' ), array_keys( $taxes ) );
 	}
 
 	/**
@@ -56,11 +56,11 @@ class Tests_Taxonomy extends WP_UnitTestCase {
 		$post_id = self::factory()->post->create();
 
 		$taxes = get_the_taxonomies( $post_id, array( 'term_template' => '%2$s' ) );
-		$this->assertEquals( 'Categories: Uncategorized.', $taxes['category'] );
+		$this->assertSame( 'Categories: Uncategorized.', $taxes['category'] );
 
 		$taxes = get_the_taxonomies( $post_id, array( 'term_template' => '<span class="foo"><a href="%1$s">%2$s</a></span>' ) );
 		$link  = get_category_link( 1 );
-		$this->assertEquals( 'Categories: <span class="foo"><a href="' . $link . '">Uncategorized</a></span>.', $taxes['category'] );
+		$this->assertSame( 'Categories: <span class="foo"><a href="' . $link . '">Uncategorized</a></span>.', $taxes['category'] );
 	}
 
 	function test_the_taxonomies() {
@@ -90,7 +90,7 @@ class Tests_Taxonomy extends WP_UnitTestCase {
 				),
 			)
 		);
-		$this->assertEquals( 'Categories: Uncategorized.', $output );
+		$this->assertSame( 'Categories: Uncategorized.', $output );
 
 		$output = get_echo(
 			'the_taxonomies',
@@ -102,16 +102,16 @@ class Tests_Taxonomy extends WP_UnitTestCase {
 			)
 		);
 		$link   = get_category_link( 1 );
-		$this->assertEquals( 'Categories: <span class="foo"><a href="' . $link . '">Uncategorized</a></span>.', $output );
+		$this->assertSame( 'Categories: <span class="foo"><a href="' . $link . '">Uncategorized</a></span>.', $output );
 	}
 
 	function test_get_link_taxonomy() {
 		foreach ( get_object_taxonomies( 'link' ) as $taxonomy ) {
 			$tax = get_taxonomy( $taxonomy );
-			// should return an object with the correct taxonomy object type
+			// Should return an object with the correct taxonomy object type.
 			$this->assertTrue( is_object( $tax ) );
 			$this->assertTrue( is_array( $tax->object_type ) );
-			$this->assertEquals( array( 'link' ), $tax->object_type );
+			$this->assertSame( array( 'link' ), $tax->object_type );
 		}
 	}
 
@@ -143,7 +143,7 @@ class Tests_Taxonomy extends WP_UnitTestCase {
 
 	function test_register_taxonomy() {
 
-		// make up a new taxonomy name, and ensure it's unused
+		// Make up a new taxonomy name, and ensure it's unused.
 		$tax = rand_str();
 		$this->assertFalse( taxonomy_exists( $tax ) );
 
@@ -151,13 +151,13 @@ class Tests_Taxonomy extends WP_UnitTestCase {
 		$this->assertTrue( taxonomy_exists( $tax ) );
 		$this->assertFalse( is_taxonomy_hierarchical( $tax ) );
 
-		// clean up
+		// Clean up.
 		unset( $GLOBALS['wp_taxonomies'][ $tax ] );
 	}
 
 	function test_register_hierarchical_taxonomy() {
 
-		// make up a new taxonomy name, and ensure it's unused
+		// Make up a new taxonomy name, and ensure it's unused.
 		$tax = rand_str();
 		$this->assertFalse( taxonomy_exists( $tax ) );
 
@@ -165,10 +165,17 @@ class Tests_Taxonomy extends WP_UnitTestCase {
 		$this->assertTrue( taxonomy_exists( $tax ) );
 		$this->assertTrue( is_taxonomy_hierarchical( $tax ) );
 
-		// clean up
+		// Clean up.
 		unset( $GLOBALS['wp_taxonomies'][ $tax ] );
 	}
 
+	/**
+	 * @ticket 48558
+	 */
+	function test_register_taxonomy_return_value() {
+		$this->assertInstanceOf( 'WP_Taxonomy', register_taxonomy( 'foo', 'post' ) );
+	}
+
 	/**
 	 * @ticket 21593
 	 *
@@ -218,43 +225,43 @@ class Tests_Taxonomy extends WP_UnitTestCase {
 	 * @ticket 11058
 	 */
 	function test_registering_taxonomies_to_object_types() {
-		// Create a taxonomy to test with
+		// Create a taxonomy to test with.
 		$tax = 'test_tax';
 		$this->assertFalse( taxonomy_exists( $tax ) );
 		register_taxonomy( $tax, 'post', array( 'hierarchical' => true ) );
 
-		// Create a post type to test with
+		// Create a post type to test with.
 		$post_type = 'test_cpt';
 		$this->assertFalse( get_post_type( $post_type ) );
 		$this->assertObjectHasAttribute( 'name', register_post_type( $post_type ) );
 
-		// Core taxonomy, core post type
+		// Core taxonomy, core post type.
 		$this->assertTrue( unregister_taxonomy_for_object_type( 'category', 'post' ) );
 		$this->assertFalse( unregister_taxonomy_for_object_type( 'category', 'post' ) );
 		$this->assertTrue( register_taxonomy_for_object_type( 'category', 'post' ) );
 
-		// Core taxonomy, non-core post type
+		// Core taxonomy, non-core post type.
 		$this->assertTrue( register_taxonomy_for_object_type( 'category', $post_type ) );
 		$this->assertTrue( unregister_taxonomy_for_object_type( 'category', $post_type ) );
 		$this->assertFalse( unregister_taxonomy_for_object_type( 'category', $post_type ) );
 		$this->assertTrue( register_taxonomy_for_object_type( 'category', $post_type ) );
 
-		// Core taxonomies, non-post object types
+		// Core taxonomies, non-post object types.
 		$this->assertFalse( register_taxonomy_for_object_type( 'category', 'user' ) );
 		$this->assertFalse( unregister_taxonomy_for_object_type( 'category', 'user' ) );
 
-		// Non-core taxonomy, core post type
+		// Non-core taxonomy, core post type.
 		$this->assertTrue( unregister_taxonomy_for_object_type( $tax, 'post' ) );
 		$this->assertFalse( unregister_taxonomy_for_object_type( $tax, 'post' ) );
 		$this->assertTrue( register_taxonomy_for_object_type( $tax, 'post' ) );
 
-		// Non-core taxonomy, non-core post type
+		// Non-core taxonomy, non-core post type.
 		$this->assertTrue( register_taxonomy_for_object_type( $tax, $post_type ) );
 		$this->assertTrue( unregister_taxonomy_for_object_type( $tax, $post_type ) );
 		$this->assertFalse( unregister_taxonomy_for_object_type( $tax, $post_type ) );
 		$this->assertTrue( register_taxonomy_for_object_type( $tax, $post_type ) );
 
-		// Non-core taxonomies, non-post object types
+		// Non-core taxonomies, non-post object types.
 		$this->assertFalse( register_taxonomy_for_object_type( $tax, 'user' ) );
 		$this->assertFalse( unregister_taxonomy_for_object_type( $tax, 'user' ) );
 
@@ -272,17 +279,17 @@ class Tests_Taxonomy extends WP_UnitTestCase {
 		$tax = get_taxonomy( 'wptests_tax' );
 
 		$expected = array( 'post' );
-		$this->assertEqualSets( $expected, $tax->object_type );
+		$this->assertSameSets( $expected, $tax->object_type );
 	}
 
 	public function test_get_objects_in_term_should_return_invalid_taxonomy_error() {
 		$terms = get_objects_in_term( 1, 'invalid_taxonomy' );
 		$this->assertInstanceOf( 'WP_Error', $terms );
-		$this->assertEquals( 'invalid_taxonomy', $terms->get_error_code() );
+		$this->assertSame( 'invalid_taxonomy', $terms->get_error_code() );
 	}
 
 	public function test_get_objects_in_term_should_return_empty_array() {
-		$this->assertEquals( array(), get_objects_in_term( 1, 'post_tag' ) );
+		$this->assertSame( array(), get_objects_in_term( 1, 'post_tag' ) );
 	}
 
 	public function test_get_objects_in_term_should_return_objects_ids() {
@@ -396,12 +403,12 @@ class Tests_Taxonomy extends WP_UnitTestCase {
 	function test_in_category() {
 		$post = self::factory()->post->create_and_get();
 
-		// in_category() returns false when first parameter is empty()
+		// in_category() returns false when first parameter is empty().
 		$this->assertFalse( in_category( '', $post ) );
 		$this->assertFalse( in_category( false, $post ) );
 		$this->assertFalse( in_category( null, $post ) );
 
-		// Test expected behavior of in_category()
+		// Test expected behavior of in_category().
 		$term = wp_insert_term( 'Test', 'category' );
 		wp_set_object_terms( $post->ID, $term['term_id'], 'category' );
 		$this->assertTrue( in_category( $term['term_id'], $post ) );
@@ -422,7 +429,7 @@ class Tests_Taxonomy extends WP_UnitTestCase {
 			'taxonomy' => 'category',
 			'cat_name' => 'Updated Name',
 		);
-		$this->assertEquals( 1, wp_insert_category( $cat ) );
+		$this->assertSame( 1, wp_insert_category( $cat ) );
 	}
 
 	function test_insert_category_force_error_handle() {
@@ -440,7 +447,7 @@ class Tests_Taxonomy extends WP_UnitTestCase {
 			'taxonomy' => 'force_error',
 			'cat_name' => 'Error',
 		);
-		$this->assertEquals( 0, wp_insert_category( $cat, false ) );
+		$this->assertSame( 0, wp_insert_category( $cat, false ) );
 	}
 
 	public function test_get_ancestors_taxonomy_non_hierarchical() {
@@ -487,7 +494,7 @@ class Tests_Taxonomy extends WP_UnitTestCase {
 			)
 		);
 
-		$this->assertEqualSets( array( $t2, $t1 ), get_ancestors( $t3, 'wptests_tax' ) );
+		$this->assertSameSets( array( $t2, $t1 ), get_ancestors( $t3, 'wptests_tax' ) );
 		_unregister_taxonomy( 'wptests_tax' );
 	}
 
@@ -499,7 +506,7 @@ class Tests_Taxonomy extends WP_UnitTestCase {
 			)
 		);
 
-		$this->assertEqualSets( array(), get_ancestors( $p, 'wptests_tax' ) );
+		$this->assertSameSets( array(), get_ancestors( $p, 'wptests_tax' ) );
 	}
 
 	public function test_get_ancestors_post_type() {
@@ -533,7 +540,7 @@ class Tests_Taxonomy extends WP_UnitTestCase {
 			)
 		);
 
-		$this->assertEqualSets( array( $p2, $p1 ), get_ancestors( $p3, 'wptests_pt' ) );
+		$this->assertSameSets( array( $p2, $p1 ), get_ancestors( $p3, 'wptests_pt' ) );
 		_unregister_post_type( 'wptests_pt' );
 	}
 
@@ -578,9 +585,9 @@ class Tests_Taxonomy extends WP_UnitTestCase {
 			)
 		);
 
-		$this->assertEqualSets( array( $p1 ), get_ancestors( $p2, 'wptests_conflict', 'post_type' ) );
-		$this->assertEqualSets( array( $t1 ), get_ancestors( $t2, 'wptests_conflict', 'taxonomy' ) );
-		$this->assertEqualSets( array( $t1 ), get_ancestors( $t2, 'wptests_conflict' ) );
+		$this->assertSameSets( array( $p1 ), get_ancestors( $p2, 'wptests_conflict', 'post_type' ) );
+		$this->assertSameSets( array( $t1 ), get_ancestors( $t2, 'wptests_conflict', 'taxonomy' ) );
+		$this->assertSameSets( array( $t1 ), get_ancestors( $t2, 'wptests_conflict' ) );
 		_unregister_post_type( 'wptests_pt' );
 	}
 
@@ -947,7 +954,7 @@ class Tests_Taxonomy extends WP_UnitTestCase {
 				'post_type' => 'post',
 				'tax_input' => array(
 					$taxonomy_name => array(
-						(string) $term_id, // Cast term_id as string to match whats sent in WP Admin.
+						(string) $term_id, // Cast term_id as string to match what's sent in WP Admin.
 					),
 				),
 			)
@@ -956,6 +963,71 @@ class Tests_Taxonomy extends WP_UnitTestCase {
 		$terms_obj        = get_the_terms( $updated_post_id, $taxonomy_name );
 		$problematic_term = current( wp_list_pluck( $terms_obj, 'name' ) );
 
-		$this->assertEquals( $problematic_term, $term_name );
+		$this->assertSame( $problematic_term, $term_name );
+	}
+
+	/**
+	 * Test default term for custom taxonomy.
+	 *
+	 * @ticket 43517
+	 */
+	function test_default_term_for_custom_taxonomy() {
+
+		wp_set_current_user( self::factory()->user->create( array( 'role' => 'editor' ) ) );
+
+		$tax = 'custom-tax';
+
+		// Create custom taxonomy to test with.
+		register_taxonomy(
+			$tax,
+			'post',
+			array(
+				'hierarchical' => true,
+				'public'       => true,
+				'default_term' => array(
+					'name' => 'Default category',
+					'slug' => 'default-category',
+				),
+			)
+		);
+
+		// Add post.
+		$post_id = wp_insert_post(
+			array(
+				'post_title' => 'Foo',
+				'post_type'  => 'post',
+			)
+		);
+
+		// Test default category.
+		$term = wp_get_post_terms( $post_id, $tax );
+		$this->assertSame( get_option( 'default_term_' . $tax ), $term[0]->term_id );
+
+		// Test default term deletion.
+		$this->assertSame( wp_delete_term( $term[0]->term_id, $tax ), 0 );
+
+		// Add custom post type.
+		register_post_type(
+			'post-custom-tax',
+			array(
+				'taxonomies' => array( $tax ),
+			)
+		);
+		$post_id = wp_insert_post(
+			array(
+				'post_title' => 'Foo',
+				'post_type'  => 'post-custom-tax',
+			)
+		);
+		$term    = wp_get_post_terms( $post_id, $tax );
+		$this->assertSame( get_option( 'default_term_' . $tax ), $term[0]->term_id );
+
+		// wp_set_object_terms shouldn't assign default category.
+		wp_set_object_terms( $post_id, array(), $tax );
+		$term = wp_get_post_terms( $post_id, $tax );
+		$this->assertSame( array(), $term );
+
+		unregister_taxonomy( $tax );
+		$this->assertSame( get_option( 'default_term_' . $tax ), false );
 	}
 }
diff --git a/tests/template.php b/tests/template.php
index 7178d7a3cd..981a72b4f5 100644
--- a/tests/template.php
+++ b/tests/template.php
@@ -231,7 +231,7 @@ class Tests_Template extends WP_UnitTestCase {
 	}
 
 	public function test_front_page_template_hierarchy_with_posts_on_front() {
-		$this->assertEquals( 'posts', get_option( 'show_on_front' ) );
+		$this->assertSame( 'posts', get_option( 'show_on_front' ) );
 		$this->assertTemplateHierarchy(
 			home_url(),
 			array(
@@ -461,7 +461,7 @@ class Tests_Template extends WP_UnitTestCase {
 		$this->go_to( $url );
 		$hierarchy = $this->get_template_hierarchy();
 
-		$this->assertEquals( $expected, $hierarchy, $message );
+		$this->assertSame( $expected, $hierarchy, $message );
 	}
 
 	protected static function get_query_template_conditions() {
diff --git a/tests/term.php b/tests/term.php
index 0ab90d8189..9454bd0e87 100644
--- a/tests/term.php
+++ b/tests/term.php
@@ -50,14 +50,14 @@ class Tests_Term extends WP_UnitTestCase {
 	 * @ticket 5381
 	 */
 	function test_is_term_type() {
-		// insert a term
+		// Insert a term.
 		$term = rand_str();
 		$t    = wp_insert_term( $term, $this->taxonomy );
 		$this->assertInternalType( 'array', $t );
 		$term_obj = get_term_by( 'name', $term, $this->taxonomy );
 		$this->assertEquals( $t['term_id'], term_exists( $term_obj->slug ) );
 
-		// clean up
+		// Clean up.
 		$this->assertTrue( wp_delete_term( $t['term_id'], $this->taxonomy ) );
 	}
 
@@ -65,11 +65,34 @@ class Tests_Term extends WP_UnitTestCase {
 	 * @ticket 15919
 	 */
 	function test_wp_count_terms() {
-		$count = wp_count_terms( 'category', array( 'hide_empty' => true ) );
-		// there are 5 posts, all Uncategorized
+		$count = wp_count_terms(
+			array(
+				'hide_empty' => true,
+				'taxonomy'   => 'category',
+			)
+		);
+		// There are 5 posts, all Uncategorized.
 		$this->assertEquals( 1, $count );
 	}
 
+	/**
+	 * @ticket 36399
+	 */
+	function test_wp_count_terms_legacy_interoperability() {
+		self::factory()->tag->create_many( 5 );
+
+		// Counts all terms (1 default category, 5 tags).
+		$count = wp_count_terms();
+		$this->assertEquals( 6, $count );
+
+		// Counts only tags (5), with both current and legacy signature.
+		// Legacy usage should not trigger deprecated notice.
+		$count        = wp_count_terms( array( 'taxonomy' => 'post_tag' ) );
+		$legacy_count = wp_count_terms( 'post_tag' );
+		$this->assertEquals( 5, $count );
+		$this->assertEquals( $count, $legacy_count );
+	}
+
 	/**
 	 * @ticket 15475
 	 */
@@ -78,19 +101,19 @@ class Tests_Term extends WP_UnitTestCase {
 		$tags  = self::factory()->tag->create_many( 5 );
 
 		$tt = wp_add_object_terms( $posts[0], $tags[1], 'post_tag' );
-		$this->assertEquals( 1, count( $tt ) );
-		$this->assertEquals( array( $tags[1] ), wp_get_object_terms( $posts[0], 'post_tag', array( 'fields' => 'ids' ) ) );
+		$this->assertSame( 1, count( $tt ) );
+		$this->assertSame( array( $tags[1] ), wp_get_object_terms( $posts[0], 'post_tag', array( 'fields' => 'ids' ) ) );
 
 		$three_tags = array( $tags[0], $tags[1], $tags[2] );
 		$tt         = wp_add_object_terms( $posts[1], $three_tags, 'post_tag' );
-		$this->assertEquals( 3, count( $tt ) );
-		$this->assertEquals( $three_tags, wp_get_object_terms( $posts[1], 'post_tag', array( 'fields' => 'ids' ) ) );
+		$this->assertSame( 3, count( $tt ) );
+		$this->assertSame( $three_tags, wp_get_object_terms( $posts[1], 'post_tag', array( 'fields' => 'ids' ) ) );
 
 		$this->assertTrue( wp_remove_object_terms( $posts[0], $tags[1], 'post_tag' ) );
 		$this->assertFalse( wp_remove_object_terms( $posts[0], $tags[0], 'post_tag' ) );
 		$this->assertInstanceOf( 'WP_Error', wp_remove_object_terms( $posts[0], $tags[1], 'non_existing_taxonomy' ) );
 		$this->assertTrue( wp_remove_object_terms( $posts[1], $three_tags, 'post_tag' ) );
-		$this->assertEquals( 0, count( wp_get_object_terms( $posts[1], 'post_tag' ) ) );
+		$this->assertSame( 0, count( wp_get_object_terms( $posts[1], 'post_tag' ) ) );
 
 		foreach ( $tags as $term_id ) {
 			$this->assertTrue( wp_delete_term( $term_id, 'post_tag' ) );
@@ -127,23 +150,23 @@ class Tests_Term extends WP_UnitTestCase {
 		$term = rand_str();
 		$this->assertNull( category_exists( $term ) );
 
-		$initial_count = wp_count_terms( 'category' );
+		$initial_count = wp_count_terms( array( 'taxonomy' => 'category' ) );
 
 		$t = wp_insert_category( array( 'cat_name' => $term ) );
 		$this->assertTrue( is_numeric( $t ) );
 		$this->assertNotWPError( $t );
 		$this->assertTrue( $t > 0 );
-		$this->assertEquals( $initial_count + 1, wp_count_terms( 'category' ) );
+		$this->assertEquals( $initial_count + 1, wp_count_terms( array( 'taxonomy' => 'category' ) ) );
 
-		// make sure the term exists
+		// Make sure the term exists.
 		$this->assertTrue( term_exists( $term ) > 0 );
 		$this->assertTrue( term_exists( $t ) > 0 );
 
-		// now delete it
+		// Now delete it.
 		$this->assertTrue( wp_delete_category( $t ) );
 		$this->assertNull( term_exists( $term ) );
 		$this->assertNull( term_exists( $t ) );
-		$this->assertEquals( $initial_count, wp_count_terms( 'category' ) );
+		$this->assertEquals( $initial_count, wp_count_terms( array( 'taxonomy' => 'category' ) ) );
 	}
 
 	/**
@@ -154,56 +177,76 @@ class Tests_Term extends WP_UnitTestCase {
 		$post    = get_post( $post_id );
 
 		$this->assertInternalType( 'array', $post->post_category );
-		$this->assertEquals( 1, count( $post->post_category ) );
+		$this->assertSame( 1, count( $post->post_category ) );
 		$this->assertEquals( get_option( 'default_category' ), $post->post_category[0] );
+
 		$term1 = wp_insert_term( 'Foo', 'category' );
 		$term2 = wp_insert_term( 'Bar', 'category' );
 		$term3 = wp_insert_term( 'Baz', 'category' );
+
 		wp_set_post_categories( $post_id, array( $term1['term_id'], $term2['term_id'] ) );
-		$this->assertEquals( 2, count( $post->post_category ) );
-		$this->assertEquals( array( $term2['term_id'], $term1['term_id'] ), $post->post_category );
+		$this->assertSame( 2, count( $post->post_category ) );
+		$this->assertSame( array( $term2['term_id'], $term1['term_id'] ), $post->post_category );
 
 		wp_set_post_categories( $post_id, $term3['term_id'], true );
-		$this->assertEquals( array( $term2['term_id'], $term3['term_id'], $term1['term_id'] ), $post->post_category );
+		$this->assertSame( array( $term2['term_id'], $term3['term_id'], $term1['term_id'] ), $post->post_category );
 
 		$term4 = wp_insert_term( 'Burrito', 'category' );
+
 		wp_set_post_categories( $post_id, $term4['term_id'] );
-		$this->assertEquals( array( $term4['term_id'] ), $post->post_category );
+		$this->assertSame( array( $term4['term_id'] ), $post->post_category );
 
 		wp_set_post_categories( $post_id, array( $term1['term_id'], $term2['term_id'] ), true );
-		$this->assertEquals( array( $term2['term_id'], $term4['term_id'], $term1['term_id'] ), $post->post_category );
+		$this->assertSame( array( $term2['term_id'], $term4['term_id'], $term1['term_id'] ), $post->post_category );
 
 		wp_set_post_categories( $post_id, array(), true );
-		$this->assertEquals( 1, count( $post->post_category ) );
+		$this->assertSame( 1, count( $post->post_category ) );
 		$this->assertEquals( get_option( 'default_category' ), $post->post_category[0] );
 
 		wp_set_post_categories( $post_id, array() );
-		$this->assertEquals( 1, count( $post->post_category ) );
+		$this->assertSame( 1, count( $post->post_category ) );
 		$this->assertEquals( get_option( 'default_category' ), $post->post_category[0] );
 	}
 
 	/**
-	 * @ticket 25852
+	 * @ticket 43516
 	 */
-	function test_sanitize_term_field() {
-		$term = wp_insert_term( 'foo', $this->taxonomy );
+	function test_wp_set_post_categories_sets_default_category_for_custom_post_types() {
+		add_filter( 'default_category_post_types', array( $this, 'filter_default_category_post_types' ) );
 
-		$this->assertEquals( 0, sanitize_term_field( 'parent', 0, $term['term_id'], $this->taxonomy, 'raw' ) );
-		$this->assertEquals( 1, sanitize_term_field( 'parent', 1, $term['term_id'], $this->taxonomy, 'raw' ) );
-		$this->assertEquals( 0, sanitize_term_field( 'parent', -1, $term['term_id'], $this->taxonomy, 'raw' ) );
-		$this->assertEquals( 0, sanitize_term_field( 'parent', '', $term['term_id'], $this->taxonomy, 'raw' ) );
+		register_post_type( 'cpt', array( 'taxonomies' => array( 'category' ) ) );
+
+		$post_id = self::factory()->post->create( array( 'post_type' => 'cpt' ) );
+		$post    = get_post( $post_id );
+
+		$this->assertEquals( get_option( 'default_category' ), $post->post_category[0] );
+
+		$term = wp_insert_term( 'Foo', 'category' );
+
+		wp_set_post_categories( $post_id, $term['term_id'] );
+		$this->assertSame( $term['term_id'], $post->post_category[0] );
+
+		wp_set_post_categories( $post_id, array() );
+		$this->assertEquals( get_option( 'default_category' ), $post->post_category[0] );
+
+		remove_filter( 'default_category_post_types', array( $this, 'filter_default_category_post_types' ) );
 	}
 
-	private function assertPostHasTerms( $post_id, $expected_term_ids, $taxonomy ) {
-		$assigned_term_ids = wp_get_object_terms(
-			$post_id,
-			$taxonomy,
-			array(
-				'fields' => 'ids',
-			)
-		);
+	function filter_default_category_post_types( $post_types ) {
+		$post_types[] = 'cpt';
+		return $post_types;
+	}
+
+	/**
+	 * @ticket 25852
+	 */
+	function test_sanitize_term_field() {
+		$term = wp_insert_term( 'foo', $this->taxonomy );
 
-		$this->assertEquals( $expected_term_ids, $assigned_term_ids );
+		$this->assertSame( 0, sanitize_term_field( 'parent', 0, $term['term_id'], $this->taxonomy, 'raw' ) );
+		$this->assertSame( 1, sanitize_term_field( 'parent', 1, $term['term_id'], $this->taxonomy, 'raw' ) );
+		$this->assertSame( 0, sanitize_term_field( 'parent', -1, $term['term_id'], $this->taxonomy, 'raw' ) );
+		$this->assertSame( 0, sanitize_term_field( 'parent', '', $term['term_id'], $this->taxonomy, 'raw' ) );
 	}
 
 	/**
diff --git a/tests/term/cache.php b/tests/term/cache.php
index bfebe9338e..9847f37460 100644
--- a/tests/term/cache.php
+++ b/tests/term/cache.php
@@ -14,19 +14,19 @@ class Tests_Term_Cache extends WP_UnitTestCase {
 	 * @ticket 25711
 	 */
 	function test_category_children_cache() {
-		// Test with only one Parent => Child
+		// Test with only one Parent => Child.
 		$term_id1       = self::factory()->category->create();
 		$term_id1_child = self::factory()->category->create( array( 'parent' => $term_id1 ) );
 		$hierarchy      = _get_term_hierarchy( 'category' );
 
-		$this->assertEquals( array( $term_id1 => array( $term_id1_child ) ), $hierarchy );
+		$this->assertSame( array( $term_id1 => array( $term_id1_child ) ), $hierarchy );
 
-		// Add another Parent => Child
+		// Add another Parent => Child.
 		$term_id2       = self::factory()->category->create();
 		$term_id2_child = self::factory()->category->create( array( 'parent' => $term_id2 ) );
 		$hierarchy      = _get_term_hierarchy( 'category' );
 
-		$this->assertEquals(
+		$this->assertSame(
 			array(
 				$term_id1 => array( $term_id1_child ),
 				$term_id2 => array( $term_id2_child ),
@@ -45,7 +45,7 @@ class Tests_Term_Cache extends WP_UnitTestCase {
 
 		$post  = get_post( $post_id );
 		$cats1 = get_the_category( $post->ID );
-		$this->assertEquals( $term->name, reset( $cats1 )->name );
+		$this->assertSame( $term->name, reset( $cats1 )->name );
 
 		wp_update_term( $term->term_id, 'category', array( 'name' => 'Bar' ) );
 		$cats2 = get_the_category( $post->ID );
@@ -83,11 +83,11 @@ class Tests_Term_Cache extends WP_UnitTestCase {
 			}
 
 			$terms = get_terms( $tax, array( 'hide_empty' => false ) );
-			$this->assertEquals( $i, count( $terms ) );
+			$this->assertSame( $i, count( $terms ) );
 			if ( $i > 1 ) {
 				$hierarchy = _get_term_hierarchy( $tax );
 				$this->assertNotEmpty( $hierarchy );
-				$this->assertEquals( $children, count( $hierarchy, COUNT_RECURSIVE ) - count( $hierarchy ) );
+				$this->assertSame( $children, count( $hierarchy, COUNT_RECURSIVE ) - count( $hierarchy ) );
 			}
 
 			if ( 0 === ( $i % 3 ) ) {
@@ -125,7 +125,7 @@ class Tests_Term_Cache extends WP_UnitTestCase {
 
 		// No new queries should have fired.
 		$this->assertSame( $num_queries, $wpdb->num_queries );
-		$this->assertEquals( $term_object, $term_object_2 );
+		$this->assertSame( $term_object, $term_object_2 );
 	}
 
 	public function test_get_term_should_update_term_cache_when_passed_a_valid_term_identifier() {
@@ -257,16 +257,16 @@ class Tests_Term_Cache extends WP_UnitTestCase {
 
 		$term = get_term_by( 'slug', 'burrito', 'post_tag' );
 		$num_queries++;
-		$this->assertEquals( 'Taco', $term->name );
-		$this->assertEquals( $num_queries, $wpdb->num_queries );
+		$this->assertSame( 'Taco', $term->name );
+		$this->assertSame( $num_queries, $wpdb->num_queries );
 
 		// This should now hit cache.
 		$term = get_term_by( 'slug', 'burrito', 'post_tag' );
-		$this->assertEquals( 'Taco', $term->name );
-		$this->assertEquals( $num_queries, $wpdb->num_queries );
+		$this->assertSame( 'Taco', $term->name );
+		$this->assertSame( $num_queries, $wpdb->num_queries );
 
 		$this->assertEquals( get_term( $term_id, 'post_tag' ), $term );
-		$this->assertEquals( $num_queries, $wpdb->num_queries );
+		$this->assertSame( $num_queries, $wpdb->num_queries );
 	}
 
 	/**
@@ -288,13 +288,13 @@ class Tests_Term_Cache extends WP_UnitTestCase {
 
 		$term = get_term_by( 'slug', 'burrito', 'post_tag' );
 		$num_queries++;
-		$this->assertEquals( 'Taco', $term->name );
-		$this->assertEquals( $num_queries, $wpdb->num_queries );
+		$this->assertSame( 'Taco', $term->name );
+		$this->assertSame( $num_queries, $wpdb->num_queries );
 
 		// This should now hit cache.
 		$term = get_term_by( 'slug', 'burrito', 'post_tag' );
-		$this->assertEquals( 'Taco', $term->name );
-		$this->assertEquals( $num_queries, $wpdb->num_queries );
+		$this->assertSame( 'Taco', $term->name );
+		$this->assertSame( $num_queries, $wpdb->num_queries );
 
 		// Update the tag which invalidates the cache.
 		wp_update_term( $term_id, 'post_tag', array( 'name' => 'No Taco' ) );
@@ -303,8 +303,8 @@ class Tests_Term_Cache extends WP_UnitTestCase {
 		// This should not hit cache.
 		$term = get_term_by( 'slug', 'burrito', 'post_tag' );
 		$num_queries++;
-		$this->assertEquals( 'No Taco', $term->name );
-		$this->assertEquals( $num_queries, $wpdb->num_queries );
+		$this->assertSame( 'No Taco', $term->name );
+		$this->assertSame( $num_queries, $wpdb->num_queries );
 	}
 
 	/**
@@ -326,14 +326,14 @@ class Tests_Term_Cache extends WP_UnitTestCase {
 
 		get_term_by( 'name', 'Burrito', 'post_tag' );
 		$num_queries++;
-		$this->assertEquals( $num_queries, $wpdb->num_queries );
+		$this->assertSame( $num_queries, $wpdb->num_queries );
 
 		// This should now hit cache.
 		$term = get_term_by( 'name', 'Burrito', 'post_tag' );
-		$this->assertEquals( $num_queries, $wpdb->num_queries );
+		$this->assertSame( $num_queries, $wpdb->num_queries );
 
 		$this->assertEquals( get_term( $term_id, 'post_tag' ), $term );
-		$this->assertEquals( $num_queries, $wpdb->num_queries );
+		$this->assertSame( $num_queries, $wpdb->num_queries );
 	}
 
 	/**
@@ -355,11 +355,11 @@ class Tests_Term_Cache extends WP_UnitTestCase {
 
 		get_term_by( 'name', 'Burrito', 'post_tag' );
 		$num_queries++;
-		$this->assertEquals( $num_queries, $wpdb->num_queries );
+		$this->assertSame( $num_queries, $wpdb->num_queries );
 
 		// This should now hit cache.
 		get_term_by( 'name', 'Burrito', 'post_tag' );
-		$this->assertEquals( $num_queries, $wpdb->num_queries );
+		$this->assertSame( $num_queries, $wpdb->num_queries );
 
 		// Update the tag which invalidates the cache.
 		wp_update_term( $term_id, 'post_tag', array( 'slug' => 'taco' ) );
@@ -368,7 +368,7 @@ class Tests_Term_Cache extends WP_UnitTestCase {
 		// This should not hit cache.
 		get_term_by( 'name', 'burrito', 'post_tag' );
 		$num_queries++;
-		$this->assertEquals( $num_queries, $wpdb->num_queries );
+		$this->assertSame( $num_queries, $wpdb->num_queries );
 	}
 
 	/**
@@ -393,7 +393,7 @@ class Tests_Term_Cache extends WP_UnitTestCase {
 
 		// Verify the term is cached.
 		$term2 = get_term_by( 'name', 'Burrito', 'post_tag' );
-		$this->assertEquals( $num_queries, $wpdb->num_queries );
+		$this->assertSame( $num_queries, $wpdb->num_queries );
 		$this->assertEquals( $term1, $term2 );
 
 		$suspend = wp_suspend_cache_invalidation();
@@ -404,7 +404,7 @@ class Tests_Term_Cache extends WP_UnitTestCase {
 
 		// Verify that the cached term still matches the initial cached term.
 		$term3 = get_term_by( 'name', 'Burrito', 'post_tag' );
-		$this->assertEquals( $num_queries, $wpdb->num_queries );
+		$this->assertSame( $num_queries, $wpdb->num_queries );
 		$this->assertEquals( $term1, $term3 );
 
 		// Verify that last changed has not been updated as part of an invalidation routine.
@@ -435,12 +435,12 @@ class Tests_Term_Cache extends WP_UnitTestCase {
 		$num_queries++;
 		$this->assertTrue( $term instanceof WP_Term );
 		$this->assertSame( $term_id, $term->term_id );
-		$this->assertEquals( $num_queries, $wpdb->num_queries );
+		$this->assertSame( $num_queries, $wpdb->num_queries );
 
 		$term_meta = get_term_meta( $term_id, 'foo', true );
 		$num_queries++;
 		$this->assertSame( $term_meta, 'bar' );
-		$this->assertEquals( $num_queries, $wpdb->num_queries );
+		$this->assertSame( $num_queries, $wpdb->num_queries );
 	}
 
 	/**
@@ -455,7 +455,7 @@ class Tests_Term_Cache extends WP_UnitTestCase {
 
 		// Prime cache.
 		$terms = get_the_terms( $p, 'wptests_tax' );
-		$this->assertEqualSets( array( $t ), wp_list_pluck( $terms, 'term_id' ) );
+		$this->assertSameSets( array( $t ), wp_list_pluck( $terms, 'term_id' ) );
 
 		/*
 		 * Modify cached array to insert an empty term ID,
diff --git a/tests/term/getEditTermLink.php b/tests/term/getEditTermLink.php
index 3eea826b11..887b55bf86 100644
--- a/tests/term/getEditTermLink.php
+++ b/tests/term/getEditTermLink.php
@@ -20,7 +20,7 @@ class Tests_Term_GetEditTermLink extends WP_UnitTestCase {
 
 		$actual   = get_edit_term_link( $term1, 'wptests_tax' );
 		$expected = 'http://' . WP_TESTS_DOMAIN . '/wp-admin/term.php?taxonomy=wptests_tax&tag_ID=' . $term1 . '&post_type=post';
-		$this->assertEquals( $expected, $actual );
+		$this->assertSame( $expected, $actual );
 	}
 
 	/**
diff --git a/tests/term/getTerm.php b/tests/term/getTerm.php
index 4a2b9b0ffb..22ae4d527e 100644
--- a/tests/term/getTerm.php
+++ b/tests/term/getTerm.php
@@ -72,11 +72,11 @@ class Tests_Term_GetTerm extends WP_UnitTestCase {
 	}
 
 	public function test_passing_term_string_that_casts_to_int_0_should_return_null() {
-		$this->assertSame( null, get_term( 'abc', 'wptests_tax' ) );
+		$this->assertNull( get_term( 'abc', 'wptests_tax' ) );
 	}
 
 	public function test_should_return_null_for_invalid_term_id() {
-		$this->assertSame( null, get_term( 99999999, 'wptests_tax' ) );
+		$this->assertNull( get_term( 99999999, 'wptests_tax' ) );
 	}
 
 	public function test_cache_should_be_populated_by_successful_fetch() {
diff --git a/tests/term/getTermBy.php b/tests/term/getTermBy.php
index caf5a6ea98..037bef0419 100644
--- a/tests/term/getTermBy.php
+++ b/tests/term/getTermBy.php
@@ -32,6 +32,15 @@ class Tests_Term_GetTermBy extends WP_UnitTestCase {
 		$this->assertEquals( get_term( $term1['term_id'], 'category' ), $term2 );
 	}
 
+	/**
+	 * @ticket 45163
+	 */
+	function test_get_term_by_uppercase_id() {
+		$term1 = wp_insert_term( 'Foo', 'category', array( 'slug' => 'foo' ) );
+		$term2 = get_term_by( 'ID', $term1['term_id'], 'category' );
+		$this->assertEquals( get_term( $term1['term_id'], 'category' ), $term2 );
+	}
+
 	/**
 	 * @ticket 21651
 	 */
@@ -223,7 +232,7 @@ class Tests_Term_GetTermBy extends WP_UnitTestCase {
 		get_term_by( 'name', 'burrito', 'post_tag' );
 		remove_filter( 'get_terms', array( $action, 'filter' ) );
 
-		$this->assertEquals( 0, $action->get_call_count() );
+		$this->assertSame( 0, $action->get_call_count() );
 	}
 
 	/**
diff --git a/tests/term/getTermParentsList.php b/tests/term/getTermParentsList.php
index a8f2bc6f05..8d660bbb50 100644
--- a/tests/term/getTermParentsList.php
+++ b/tests/term/getTermParentsList.php
@@ -34,7 +34,7 @@ class Tests_Terms_GetTermsParentsList extends WP_UnitTestCase {
 	}
 
 	public function test_should_return_empty_for_invalid_id() {
-		$this->assertEquals( '', get_term_parents_list( 99999999, 'wptests_tax' ) );
+		$this->assertSame( '', get_term_parents_list( 99999999, 'wptests_tax' ) );
 	}
 
 	public function test_should_return_wp_error_for_invalid_taxonomy() {
diff --git a/tests/term/getTerms.php b/tests/term/getTerms.php
index 6b8145e845..cb17e84238 100644
--- a/tests/term/getTerms.php
+++ b/tests/term/getTerms.php
@@ -33,7 +33,7 @@ class Tests_Term_getTerms extends WP_UnitTestCase {
 			)
 		);
 
-		$this->assertEqualSets( array( $term1 ), wp_list_pluck( $found, 'term_id' ) );
+		$this->assertSameSets( array( $term1 ), wp_list_pluck( $found, 'term_id' ) );
 	}
 
 	/**
@@ -52,7 +52,7 @@ class Tests_Term_getTerms extends WP_UnitTestCase {
 			)
 		);
 
-		$this->assertEqualSets( array( $term ), $found );
+		$this->assertSameSets( array( $term ), $found );
 	}
 
 	/**
@@ -65,7 +65,7 @@ class Tests_Term_getTerms extends WP_UnitTestCase {
 
 		$found = get_terms( 'wptests_tax', 'hide_empty=0&fields=ids&update_term_meta_cache=0' );
 
-		$this->assertEqualSets( array( $term ), $found );
+		$this->assertSameSets( array( $term ), $found );
 	}
 
 	/**
@@ -78,7 +78,7 @@ class Tests_Term_getTerms extends WP_UnitTestCase {
 
 		$found = get_terms( 'taxonomy=wptests_tax&hide_empty=0&fields=ids&update_term_meta_cache=0' );
 
-		$this->assertEqualSets( array( $term ), $found );
+		$this->assertSameSets( array( $term ), $found );
 	}
 
 	/**
@@ -113,20 +113,20 @@ class Tests_Term_getTerms extends WP_UnitTestCase {
 
 		$num_queries = $wpdb->num_queries;
 
-		// last_changed and num_queries should bump
+		// last_changed and num_queries should bump.
 		$terms = get_terms( 'post_tag', array( 'update_term_meta_cache' => false ) );
-		$this->assertEquals( 3, count( $terms ) );
+		$this->assertSame( 3, count( $terms ) );
 		$time1 = wp_cache_get( 'last_changed', 'terms' );
 		$this->assertNotEmpty( $time1 );
-		$this->assertEquals( $num_queries + 1, $wpdb->num_queries );
+		$this->assertSame( $num_queries + 1, $wpdb->num_queries );
 
 		$num_queries = $wpdb->num_queries;
 
 		// Again. last_changed and num_queries should remain the same.
 		$terms = get_terms( 'post_tag', array( 'update_term_meta_cache' => false ) );
-		$this->assertEquals( 3, count( $terms ) );
-		$this->assertEquals( $time1, wp_cache_get( 'last_changed', 'terms' ) );
-		$this->assertEquals( $num_queries, $wpdb->num_queries );
+		$this->assertSame( 3, count( $terms ) );
+		$this->assertSame( $time1, wp_cache_get( 'last_changed', 'terms' ) );
+		$this->assertSame( $num_queries, $wpdb->num_queries );
 	}
 
 	/**
@@ -137,24 +137,24 @@ class Tests_Term_getTerms extends WP_UnitTestCase {
 
 		$this->set_up_three_posts_and_tags();
 
-		// Prime cache
+		// Prime cache.
 		$terms       = get_terms( 'post_tag' );
 		$time1       = wp_cache_get( 'last_changed', 'terms' );
 		$num_queries = $wpdb->num_queries;
 
 		// num_queries should bump, last_changed should remain the same.
 		$terms = get_terms( 'post_tag', array( 'number' => 2 ) );
-		$this->assertEquals( 2, count( $terms ) );
-		$this->assertEquals( $time1, wp_cache_get( 'last_changed', 'terms' ) );
-		$this->assertEquals( $num_queries + 1, $wpdb->num_queries );
+		$this->assertSame( 2, count( $terms ) );
+		$this->assertSame( $time1, wp_cache_get( 'last_changed', 'terms' ) );
+		$this->assertSame( $num_queries + 1, $wpdb->num_queries );
 
 		$num_queries = $wpdb->num_queries;
 
 		// Again. last_changed and num_queries should remain the same.
 		$terms = get_terms( 'post_tag', array( 'number' => 2 ) );
-		$this->assertEquals( 2, count( $terms ) );
-		$this->assertEquals( $time1, wp_cache_get( 'last_changed', 'terms' ) );
-		$this->assertEquals( $num_queries, $wpdb->num_queries );
+		$this->assertSame( 2, count( $terms ) );
+		$this->assertSame( $time1, wp_cache_get( 'last_changed', 'terms' ) );
+		$this->assertSame( $num_queries, $wpdb->num_queries );
 	}
 
 	/**
@@ -165,7 +165,7 @@ class Tests_Term_getTerms extends WP_UnitTestCase {
 
 		$this->set_up_three_posts_and_tags();
 
-		// Prime cache
+		// Prime cache.
 		$terms       = get_terms( 'post_tag' );
 		$time1       = wp_cache_get( 'last_changed', 'terms' );
 		$num_queries = $wpdb->num_queries;
@@ -179,17 +179,17 @@ class Tests_Term_getTerms extends WP_UnitTestCase {
 
 		// last_changed and num_queries should bump after a term is deleted.
 		$terms = get_terms( 'post_tag' );
-		$this->assertEquals( 2, count( $terms ) );
-		$this->assertEquals( $time2, wp_cache_get( 'last_changed', 'terms' ) );
-		$this->assertEquals( $num_queries + 1, $wpdb->num_queries );
+		$this->assertSame( 2, count( $terms ) );
+		$this->assertSame( $time2, wp_cache_get( 'last_changed', 'terms' ) );
+		$this->assertSame( $num_queries + 1, $wpdb->num_queries );
 
 		$num_queries = $wpdb->num_queries;
 
 		// Again. last_changed and num_queries should remain the same.
 		$terms = get_terms( 'post_tag' );
-		$this->assertEquals( 2, count( $terms ) );
-		$this->assertEquals( $time2, wp_cache_get( 'last_changed', 'terms' ) );
-		$this->assertEquals( $num_queries, $wpdb->num_queries );
+		$this->assertSame( 2, count( $terms ) );
+		$this->assertSame( $time2, wp_cache_get( 'last_changed', 'terms' ) );
+		$this->assertSame( $num_queries, $wpdb->num_queries );
 
 		// @todo Repeat with term insert and update.
 	}
@@ -200,7 +200,7 @@ class Tests_Term_getTerms extends WP_UnitTestCase {
 	function test_get_terms_should_allow_arbitrary_indexed_taxonomies_array() {
 		$term_id = self::factory()->tag->create();
 		$terms   = get_terms( array( '111' => 'post_tag' ), array( 'hide_empty' => false ) );
-		$this->assertEquals( $term_id, reset( $terms )->term_id );
+		$this->assertSame( $term_id, reset( $terms )->term_id );
 	}
 
 	/**
@@ -243,7 +243,7 @@ class Tests_Term_getTerms extends WP_UnitTestCase {
 				'fields'     => 'ids',
 			)
 		);
-		$this->assertEqualSets( array( $term_id1, $term_id2 ), $terms_ids );
+		$this->assertSameSets( array( $term_id1, $term_id2 ), $terms_ids );
 
 		$terms_name = get_terms(
 			'post_tag',
@@ -252,7 +252,7 @@ class Tests_Term_getTerms extends WP_UnitTestCase {
 				'fields'     => 'names',
 			)
 		);
-		$this->assertEqualSets( array( 'WOO!', 'HOO!' ), $terms_name );
+		$this->assertSameSets( array( 'WOO!', 'HOO!' ), $terms_name );
 
 		$terms_id_name = get_terms(
 			'post_tag',
@@ -300,7 +300,7 @@ class Tests_Term_getTerms extends WP_UnitTestCase {
 				'hide_empty' => false,
 			)
 		);
-		$this->assertEquals( array( $term_id1, $term_id2 ), wp_list_pluck( $inc_terms, 'term_id' ) );
+		$this->assertSame( array( $term_id1, $term_id2 ), wp_list_pluck( $inc_terms, 'term_id' ) );
 
 		$exc_terms = get_terms(
 			'post_tag',
@@ -309,7 +309,7 @@ class Tests_Term_getTerms extends WP_UnitTestCase {
 				'hide_empty' => false,
 			)
 		);
-		$this->assertEquals( array(), wp_list_pluck( $exc_terms, 'term_id' ) );
+		$this->assertSame( array(), wp_list_pluck( $exc_terms, 'term_id' ) );
 
 		// These should not generate query errors.
 		get_terms(
@@ -363,7 +363,7 @@ class Tests_Term_getTerms extends WP_UnitTestCase {
 			)
 		);
 
-		$this->assertEquals( array( $terms[1] ), wp_list_pluck( $found, 'term_id' ) );
+		$this->assertSame( array( $terms[1] ), wp_list_pluck( $found, 'term_id' ) );
 
 		_unregister_taxonomy( 'wptests_tax' );
 	}
@@ -388,7 +388,7 @@ class Tests_Term_getTerms extends WP_UnitTestCase {
 				'hide_empty' => false,
 			)
 		);
-		$this->assertEquals( array( $term_id1, $term_id11, $term_id2, $term_id22 ), $terms );
+		$this->assertSame( array( $term_id1, $term_id11, $term_id2, $term_id22 ), $terms );
 
 		$terms = get_terms(
 			'category',
@@ -399,7 +399,7 @@ class Tests_Term_getTerms extends WP_UnitTestCase {
 			)
 		);
 
-		$this->assertEquals( array( $term_id2, $term_id22 ), $terms );
+		$this->assertSame( array( $term_id2, $term_id22 ), $terms );
 
 	}
 
@@ -419,7 +419,7 @@ class Tests_Term_getTerms extends WP_UnitTestCase {
 				'fields'     => 'ids',
 			)
 		);
-		$this->assertEqualSets( array( $term_id1, $term_id2 ), $terms );
+		$this->assertSameSets( array( $term_id1, $term_id2 ), $terms );
 	}
 
 	/**
@@ -447,7 +447,7 @@ class Tests_Term_getTerms extends WP_UnitTestCase {
 				'fields'     => 'ids',
 			)
 		);
-		$this->assertEqualSets( array( $term_id1 ), $terms );
+		$this->assertSameSets( array( $term_id1 ), $terms );
 
 		$terms2 = get_terms(
 			'post_tag',
@@ -457,7 +457,7 @@ class Tests_Term_getTerms extends WP_UnitTestCase {
 				'fields'            => 'ids',
 			)
 		);
-		$this->assertEqualSets( array( $term_id1, $term_id2 ), $terms2 );
+		$this->assertSameSets( array( $term_id1, $term_id2 ), $terms2 );
 
 		$terms3 = get_terms(
 			'post_tag',
@@ -467,7 +467,7 @@ class Tests_Term_getTerms extends WP_UnitTestCase {
 				'fields'     => 'ids',
 			)
 		);
-		$this->assertEqualSets( array( $term_id1 ), $terms3 );
+		$this->assertSameSets( array( $term_id1 ), $terms3 );
 
 		$terms4 = get_terms(
 			'post_tag',
@@ -477,7 +477,7 @@ class Tests_Term_getTerms extends WP_UnitTestCase {
 				'fields'            => 'ids',
 			)
 		);
-		$this->assertEqualSets( array( $term_id1, $term_id2 ), $terms4 );
+		$this->assertSameSets( array( $term_id1, $term_id2 ), $terms4 );
 
 		$terms5 = get_terms(
 			'post_tag',
@@ -507,7 +507,7 @@ class Tests_Term_getTerms extends WP_UnitTestCase {
 				'fields'     => 'ids',
 			)
 		);
-		$this->assertEqualSets( array( $term_id1, $term_id2 ), $terms7 );
+		$this->assertSameSets( array( $term_id1, $term_id2 ), $terms7 );
 
 		$terms8 = get_terms(
 			'post_tag',
@@ -517,7 +517,7 @@ class Tests_Term_getTerms extends WP_UnitTestCase {
 				'fields'            => 'ids',
 			)
 		);
-		$this->assertEqualSets( array( $term_id1, $term_id2 ), $terms8 );
+		$this->assertSameSets( array( $term_id1, $term_id2 ), $terms8 );
 	}
 
 	/**
@@ -547,7 +547,7 @@ class Tests_Term_getTerms extends WP_UnitTestCase {
 			wp_set_post_terms( $id, $cheddar, $tax );
 		}
 		$term = get_term( $cheddar, $tax );
-		$this->assertEquals( 2, $term->count );
+		$this->assertSame( 2, $term->count );
 
 		$brie    = self::factory()->term->create(
 			array(
@@ -559,7 +559,7 @@ class Tests_Term_getTerms extends WP_UnitTestCase {
 		$post_id = self::factory()->post->create();
 		wp_set_post_terms( $post_id, $brie, $tax );
 		$term = get_term( $brie, $tax );
-		$this->assertEquals( 1, $term->count );
+		$this->assertSame( 1, $term->count );
 
 		$crackers = self::factory()->term->create(
 			array(
@@ -580,7 +580,7 @@ class Tests_Term_getTerms extends WP_UnitTestCase {
 			wp_set_post_terms( $id, $butter, $tax );
 		}
 		$term = get_term( $butter, $tax );
-		$this->assertEquals( 1, $term->count );
+		$this->assertSame( 1, $term->count );
 
 		$multigrain = self::factory()->term->create(
 			array(
@@ -594,7 +594,7 @@ class Tests_Term_getTerms extends WP_UnitTestCase {
 			wp_set_post_terms( $id, $multigrain, $tax );
 		}
 		$term = get_term( $multigrain, $tax );
-		$this->assertEquals( 1, $term->count );
+		$this->assertSame( 1, $term->count );
 
 		$fruit       = self::factory()->term->create(
 			array(
@@ -617,8 +617,8 @@ class Tests_Term_getTerms extends WP_UnitTestCase {
 				'cache_domain' => $tax,
 			)
 		);
-		$this->assertEquals( 2, count( $terms ) );
-		$this->assertEquals( wp_list_pluck( $terms, 'name' ), array( 'Cheese', 'Crackers' ) );
+		$this->assertSame( 2, count( $terms ) );
+		$this->assertSame( wp_list_pluck( $terms, 'name' ), array( 'Cheese', 'Crackers' ) );
 	}
 
 	/**
@@ -651,7 +651,7 @@ class Tests_Term_getTerms extends WP_UnitTestCase {
 		$post_id = self::factory()->post->create();
 		wp_set_post_terms( $post_id, $spread, $tax );
 		$term = get_term( $spread, $tax );
-		$this->assertEquals( 1, $term->count );
+		$this->assertSame( 1, $term->count );
 
 		$terms = get_terms(
 			$tax,
@@ -660,8 +660,8 @@ class Tests_Term_getTerms extends WP_UnitTestCase {
 				'cache_domain' => $tax,
 			)
 		);
-		$this->assertEquals( 1, count( $terms ) );
-		$this->assertEquals( array( 'Cheese' ), wp_list_pluck( $terms, 'name' ) );
+		$this->assertSame( 1, count( $terms ) );
+		$this->assertSame( array( 'Cheese' ), wp_list_pluck( $terms, 'name' ) );
 
 		_unregister_taxonomy( $tax );
 	}
@@ -687,7 +687,7 @@ class Tests_Term_getTerms extends WP_UnitTestCase {
 		$post_id = self::factory()->post->create();
 		wp_set_post_terms( $post_id, $t[7], $tax );
 		$term = get_term( $t[7], $tax );
-		$this->assertEquals( 1, $term->count );
+		$this->assertSame( 1, $term->count );
 
 		$terms = get_terms(
 			$tax,
@@ -696,8 +696,8 @@ class Tests_Term_getTerms extends WP_UnitTestCase {
 				'cache_domain' => $tax,
 			)
 		);
-		$this->assertEquals( 1, count( $terms ) );
-		$this->assertEquals( array( 'term1' ), wp_list_pluck( $terms, 'name' ) );
+		$this->assertSame( 1, count( $terms ) );
+		$this->assertSame( array( 'term1' ), wp_list_pluck( $terms, 'name' ) );
 
 		_unregister_taxonomy( $tax );
 	}
@@ -716,7 +716,84 @@ class Tests_Term_getTerms extends WP_UnitTestCase {
 				'hide_empty' => false,
 			)
 		);
-		$this->assertEquals( 1, count( $terms ) );
+		$this->assertSame( 1, count( $terms ) );
+	}
+
+	/**
+	 * @ticket 46768
+	 */
+	function test_get_terms_child_of_fields_id_name() {
+		$parent = self::factory()->category->create();
+		$child  = self::factory()->category->create(
+			array(
+				'parent' => $parent,
+				'slug'   => 'test-1',
+				'name'   => 'Test 1',
+			)
+		);
+		$child2 = self::factory()->category->create(
+			array(
+				'parent' => $parent,
+				'slug'   => 'test-2',
+				'name'   => 'Test 2',
+			)
+		);
+
+		$terms = get_terms(
+			'category',
+			array(
+				'child_of'   => $parent,
+				'hide_empty' => false,
+				'fields'     => 'id=>name',
+			)
+		);
+
+		$this->assertSame(
+			array(
+				$child  => 'Test 1',
+				$child2 => 'Test 2',
+			),
+			$terms
+		);
+
+	}
+
+	/**
+	 * @ticket 46768
+	 */
+	function test_get_terms_child_of_fields_id_slug() {
+		$parent = self::factory()->category->create();
+		$child  = self::factory()->category->create(
+			array(
+				'parent' => $parent,
+				'slug'   => 'test-1',
+				'name'   => 'Test 1',
+			)
+		);
+		$child2 = self::factory()->category->create(
+			array(
+				'parent' => $parent,
+				'slug'   => 'test-2',
+				'name'   => 'Test 2',
+			)
+		);
+
+		$terms = get_terms(
+			'category',
+			array(
+				'child_of'   => $parent,
+				'hide_empty' => false,
+				'fields'     => 'id=>slug',
+			)
+		);
+
+		$this->assertSame(
+			array(
+				$child  => 'test-1',
+				$child2 => 'test-2',
+			),
+			$terms
+		);
 	}
 
 	/**
@@ -768,14 +845,14 @@ class Tests_Term_getTerms extends WP_UnitTestCase {
 			)
 		);
 
-		$this->assertEqualSets( array( $t3 ), $found );
+		$this->assertSameSets( array( $t3 ), $found );
 	}
 
 	/**
 	 * @ticket 27123
 	 */
 	function test_get_term_children_recursion() {
-		// Assume there is a way to insert a term with the parent pointing to itself
+		// Assume there is a way to insert a term with the parent pointing to itself.
 		// See: https://core.trac.wordpress.org/changeset/15806
 		remove_filter( 'wp_update_term_parent', 'wp_check_term_hierarchy_for_loops', 10 );
 
@@ -783,7 +860,7 @@ class Tests_Term_getTerms extends WP_UnitTestCase {
 		$term = wp_update_term( $term['term_id'], 'category', array( 'parent' => $term['term_id'] ) );
 		$term = get_term( $term['term_id'], 'category' );
 
-		$this->assertEquals( $term->term_id, $term->parent );
+		$this->assertSame( $term->term_id, $term->parent );
 		$this->assertInternalType( 'array', get_term_children( $term->term_id, 'category' ) );
 
 		add_filter( 'wp_update_term_parent', 'wp_check_term_hierarchy_for_loops', 10, 3 );
@@ -805,7 +882,7 @@ class Tests_Term_getTerms extends WP_UnitTestCase {
 
 		$result = _get_term_children( $c1, array( $c1, $c2, $c3 ), 'category' );
 
-		$this->assertEqualSets( array( $c2, $c3 ), $result );
+		$this->assertSameSets( array( $c2, $c3 ), $result );
 	}
 
 	/**
@@ -824,7 +901,7 @@ class Tests_Term_getTerms extends WP_UnitTestCase {
 
 		$result = _get_term_children( $c1->term_id, array( $c1, $c2, $c3 ), 'category' );
 
-		$this->assertEqualSets( array( $c2, $c3 ), $result );
+		$this->assertSameSets( array( $c2, $c3 ), $result );
 	}
 
 	public function test_get_terms_by_slug() {
@@ -840,7 +917,7 @@ class Tests_Term_getTerms extends WP_UnitTestCase {
 			)
 		);
 
-		$this->assertEquals( array( $t1 ), $found );
+		$this->assertSame( array( $t1 ), $found );
 	}
 
 	/**
@@ -860,7 +937,7 @@ class Tests_Term_getTerms extends WP_UnitTestCase {
 			)
 		);
 
-		$this->assertEquals( array( $t1, $t3 ), $found );
+		$this->assertSame( array( $t1, $t3 ), $found );
 	}
 
 	/**
@@ -879,7 +956,7 @@ class Tests_Term_getTerms extends WP_UnitTestCase {
 			)
 		);
 
-		$this->assertEquals( array( $t1 ), $found );
+		$this->assertSame( array( $t1 ), $found );
 	}
 
 	/**
@@ -899,7 +976,7 @@ class Tests_Term_getTerms extends WP_UnitTestCase {
 			)
 		);
 
-		$this->assertEqualSets( array( $t3, $t1 ), $found );
+		$this->assertSameSets( array( $t3, $t1 ), $found );
 	}
 
 	/**
@@ -924,9 +1001,9 @@ class Tests_Term_getTerms extends WP_UnitTestCase {
 				'name'       => 'Foo & Bar',
 			)
 		);
-		$this->assertEqualSets( array( $t ), $found );
+		$this->assertSameSets( array( $t ), $found );
 
-		// array format.
+		// Array format.
 		$found = get_terms(
 			'wptests_tax',
 			array(
@@ -935,7 +1012,7 @@ class Tests_Term_getTerms extends WP_UnitTestCase {
 				'name'       => array( 'Foo & Bar' ),
 			)
 		);
-		$this->assertEqualSets( array( $t ), $found );
+		$this->assertSameSets( array( $t ), $found );
 	}
 
 	/**
@@ -966,7 +1043,7 @@ class Tests_Term_getTerms extends WP_UnitTestCase {
 			)
 		);
 
-		$this->assertEqualSets( array( $t ), $found );
+		$this->assertSameSets( array( $t ), $found );
 	}
 
 	/**
@@ -1005,7 +1082,7 @@ class Tests_Term_getTerms extends WP_UnitTestCase {
 		);
 
 		$expected = array( $australia, $china, $tanzania );
-		$this->assertEqualSets( $expected, $terms );
+		$this->assertSameSets( $expected, $terms );
 	}
 
 
@@ -1025,7 +1102,7 @@ class Tests_Term_getTerms extends WP_UnitTestCase {
 				Montreal
 			PEI
 		*/
-		// Level 1
+		// Level 1.
 		$canada = self::factory()->term->create(
 			array(
 				'name'     => 'Canada',
@@ -1033,7 +1110,7 @@ class Tests_Term_getTerms extends WP_UnitTestCase {
 			)
 		);
 
-		// Level 2
+		// Level 2.
 		$ontario = self::factory()->term->create(
 			array(
 				'name'     => 'Ontario',
@@ -1056,7 +1133,7 @@ class Tests_Term_getTerms extends WP_UnitTestCase {
 			)
 		);
 
-		// Level 3
+		// Level 3.
 		$toronto  = self::factory()->term->create(
 			array(
 				'name'     => 'Toronto',
@@ -1079,7 +1156,7 @@ class Tests_Term_getTerms extends WP_UnitTestCase {
 			)
 		);
 
-		// Level 4
+		// Level 4.
 		$nepean = self::factory()->term->create(
 			array(
 				'name'     => 'Nepean',
@@ -1097,7 +1174,7 @@ class Tests_Term_getTerms extends WP_UnitTestCase {
 			)
 		);
 
-		$this->assertEqualSets( array( $montreal, $nepean, $toronto, $pei ), $terms );
+		$this->assertSameSets( array( $montreal, $nepean, $toronto, $pei ), $terms );
 	}
 
 	/**
@@ -1107,7 +1184,7 @@ class Tests_Term_getTerms extends WP_UnitTestCase {
 		$tax = 'location';
 		register_taxonomy( $tax, 'post', array( 'hierarchical' => true ) );
 
-		// Level 1
+		// Level 1.
 		$canada = self::factory()->term->create(
 			array(
 				'name'     => 'Canada',
@@ -1115,7 +1192,7 @@ class Tests_Term_getTerms extends WP_UnitTestCase {
 			)
 		);
 
-		// Level 2
+		// Level 2.
 		$ontario = self::factory()->term->create(
 			array(
 				'name'     => 'Ontario',
@@ -1131,7 +1208,7 @@ class Tests_Term_getTerms extends WP_UnitTestCase {
 			)
 		);
 
-		// Level 3
+		// Level 3.
 		$laval    = self::factory()->term->create(
 			array(
 				'name'     => 'Laval',
@@ -1147,7 +1224,7 @@ class Tests_Term_getTerms extends WP_UnitTestCase {
 			)
 		);
 
-		// Level 4
+		// Level 4.
 		$dorval = self::factory()->term->create(
 			array(
 				'name'     => 'Dorval',
@@ -1166,7 +1243,7 @@ class Tests_Term_getTerms extends WP_UnitTestCase {
 			)
 		);
 
-		$this->assertEqualSets( array( $laval ), $terms );
+		$this->assertSameSets( array( $laval ), $terms );
 	}
 
 	/**
@@ -1200,7 +1277,7 @@ class Tests_Term_getTerms extends WP_UnitTestCase {
 			)
 		);
 
-		$this->assertEqualSets( array( $t2, $t4 ), $found );
+		$this->assertSameSets( array( $t2, $t4 ), $found );
 	}
 
 	public function test_get_terms_hierarchical_tax_hide_empty_false_fields_ids() {
@@ -1228,7 +1305,7 @@ class Tests_Term_getTerms extends WP_UnitTestCase {
 
 		_unregister_taxonomy( 'hierarchical_fields' );
 
-		$this->assertEqualSets( $expected, $found );
+		$this->assertSameSets( $expected, $found );
 	}
 
 	public function test_get_terms_hierarchical_tax_hide_empty_true_fields_ids() {
@@ -1254,7 +1331,7 @@ class Tests_Term_getTerms extends WP_UnitTestCase {
 
 		_unregister_taxonomy( 'hierarchical_fields' );
 
-		$this->assertEqualSets( $expected, $found );
+		$this->assertSameSets( $expected, $found );
 	}
 
 	public function test_get_terms_hierarchical_tax_hide_empty_true_fields_ids_hierarchical_false() {
@@ -1280,7 +1357,7 @@ class Tests_Term_getTerms extends WP_UnitTestCase {
 
 		_unregister_taxonomy( 'hierarchical_fields' );
 
-		$this->assertEqualSets( $expected, $found );
+		$this->assertSameSets( $expected, $found );
 	}
 
 	public function test_get_terms_hierarchical_tax_hide_empty_false_fields_names() {
@@ -1308,7 +1385,7 @@ class Tests_Term_getTerms extends WP_UnitTestCase {
 
 		_unregister_taxonomy( 'hierarchical_fields' );
 
-		$this->assertEqualSets( $expected, $found );
+		$this->assertSameSets( $expected, $found );
 	}
 
 	public function test_get_terms_hierarchical_tax_hide_empty_true_fields_names() {
@@ -1334,7 +1411,7 @@ class Tests_Term_getTerms extends WP_UnitTestCase {
 
 		_unregister_taxonomy( 'hierarchical_fields' );
 
-		$this->assertEqualSets( $expected, $found );
+		$this->assertSameSets( $expected, $found );
 	}
 
 	public function test_get_terms_hierarchical_tax_hide_empty_true_fields_names_hierarchical_false() {
@@ -1360,7 +1437,7 @@ class Tests_Term_getTerms extends WP_UnitTestCase {
 
 		_unregister_taxonomy( 'hierarchical_fields' );
 
-		$this->assertEqualSets( $expected, $found );
+		$this->assertSameSets( $expected, $found );
 	}
 
 	public function test_get_terms_hierarchical_tax_hide_empty_false_fields_count() {
@@ -1530,7 +1607,7 @@ class Tests_Term_getTerms extends WP_UnitTestCase {
 
 		_unregister_taxonomy( 'hierarchical_fields' );
 
-		$this->assertEqualSetsWithIndex( $expected, $found );
+		$this->assertSameSetsWithIndex( $expected, $found );
 	}
 
 	/**
@@ -1559,7 +1636,7 @@ class Tests_Term_getTerms extends WP_UnitTestCase {
 
 		_unregister_taxonomy( 'hierarchical_fields' );
 
-		$this->assertEqualSetsWithIndex( $expected, $found );
+		$this->assertSameSetsWithIndex( $expected, $found );
 	}
 
 	public function test_get_terms_hierarchical_tax_hide_empty_true_fields_idslug_hierarchical_false() {
@@ -1585,7 +1662,7 @@ class Tests_Term_getTerms extends WP_UnitTestCase {
 
 		_unregister_taxonomy( 'hierarchical_fields' );
 
-		$this->assertEqualSetsWithIndex( $expected, $found );
+		$this->assertSameSetsWithIndex( $expected, $found );
 	}
 
 	public function test_get_terms_hierarchical_tax_hide_empty_false_fields_idname() {
@@ -1613,7 +1690,7 @@ class Tests_Term_getTerms extends WP_UnitTestCase {
 
 		_unregister_taxonomy( 'hierarchical_fields' );
 
-		$this->assertEqualSetsWithIndex( $expected, $found );
+		$this->assertSameSetsWithIndex( $expected, $found );
 	}
 
 	/**
@@ -1642,7 +1719,7 @@ class Tests_Term_getTerms extends WP_UnitTestCase {
 
 		_unregister_taxonomy( 'hierarchical_fields' );
 
-		$this->assertEqualSetsWithIndex( $expected, $found );
+		$this->assertSameSetsWithIndex( $expected, $found );
 	}
 
 	public function test_get_terms_hierarchical_tax_hide_empty_true_fields_idname_hierarchical_false() {
@@ -1668,7 +1745,7 @@ class Tests_Term_getTerms extends WP_UnitTestCase {
 
 		_unregister_taxonomy( 'hierarchical_fields' );
 
-		$this->assertEqualSetsWithIndex( $expected, $found );
+		$this->assertSameSetsWithIndex( $expected, $found );
 	}
 
 	/**
@@ -1760,7 +1837,7 @@ class Tests_Term_getTerms extends WP_UnitTestCase {
 
 		_unregister_taxonomy( 'wptests_tax' );
 
-		$this->assertEquals( array( $t4, $t1, $t2 ), $found );
+		$this->assertSame( array( $t4, $t1, $t2 ), $found );
 	}
 
 	/**
@@ -1806,7 +1883,7 @@ class Tests_Term_getTerms extends WP_UnitTestCase {
 
 		_unregister_taxonomy( 'wptests_tax' );
 
-		$this->assertEquals( array( $t2, $t1, $t4, $t3 ), $found );
+		$this->assertSame( array( $t2, $t1, $t4, $t3 ), $found );
 	}
 
 	/**
@@ -1842,7 +1919,7 @@ class Tests_Term_getTerms extends WP_UnitTestCase {
 			)
 		);
 
-		$this->assertEquals( array( $t1, $t2, $t3 ), $found );
+		$this->assertSame( array( $t1, $t2, $t3 ), $found );
 	}
 
 	/**
@@ -1880,7 +1957,7 @@ class Tests_Term_getTerms extends WP_UnitTestCase {
 			)
 		);
 
-		$this->assertEqualSets( array( $terms[1], $terms[2], $terms[0] ), $found );
+		$this->assertSameSets( array( $terms[1], $terms[2], $terms[0] ), $found );
 	}
 
 	/**
@@ -1918,7 +1995,7 @@ class Tests_Term_getTerms extends WP_UnitTestCase {
 			)
 		);
 
-		$this->assertEqualSets( array( $terms[1], $terms[2], $terms[0] ), $found );
+		$this->assertSameSets( array( $terms[1], $terms[2], $terms[0] ), $found );
 	}
 
 	/**
@@ -1948,7 +2025,7 @@ class Tests_Term_getTerms extends WP_UnitTestCase {
 			)
 		);
 
-		$this->assertEqualSets( array( $terms[1], $terms[2], $terms[0] ), $found );
+		$this->assertSameSets( array( $terms[1], $terms[2], $terms[0] ), $found );
 
 		$found = get_terms(
 			'wptests_tax',
@@ -1967,7 +2044,7 @@ class Tests_Term_getTerms extends WP_UnitTestCase {
 			)
 		);
 
-		$this->assertEqualSets( array( $terms[1], $terms[2], $terms[0] ), $found );
+		$this->assertSameSets( array( $terms[1], $terms[2], $terms[0] ), $found );
 
 		// Matches the first meta query clause.
 		$found = get_terms(
@@ -1992,7 +2069,7 @@ class Tests_Term_getTerms extends WP_UnitTestCase {
 			)
 		);
 
-		$this->assertEqualSets( array( $terms[1], $terms[2], $terms[0] ), $found );
+		$this->assertSameSets( array( $terms[1], $terms[2], $terms[0] ), $found );
 
 		// Matches the meta query clause corresponding to the 'meta_key' param.
 		$found = get_terms(
@@ -2017,7 +2094,7 @@ class Tests_Term_getTerms extends WP_UnitTestCase {
 			)
 		);
 
-		$this->assertEqualSets( array( $terms[1], $terms[0], $terms[2] ), $found );
+		$this->assertSameSets( array( $terms[1], $terms[0], $terms[2] ), $found );
 	}
 
 	/**
@@ -2047,7 +2124,7 @@ class Tests_Term_getTerms extends WP_UnitTestCase {
 			)
 		);
 
-		$this->assertEqualSets( array( $terms[1], $terms[2], $terms[0] ), $found );
+		$this->assertSameSets( array( $terms[1], $terms[2], $terms[0] ), $found );
 
 		$found = get_terms(
 			'wptests_tax',
@@ -2066,7 +2143,7 @@ class Tests_Term_getTerms extends WP_UnitTestCase {
 			)
 		);
 
-		$this->assertEqualSets( array( $terms[1], $terms[2], $terms[0] ), $found );
+		$this->assertSameSets( array( $terms[1], $terms[2], $terms[0] ), $found );
 
 		$found = get_terms(
 			'wptests_tax',
@@ -2090,7 +2167,7 @@ class Tests_Term_getTerms extends WP_UnitTestCase {
 			)
 		);
 
-		$this->assertEqualSets( array( $terms[1], $terms[2], $terms[0] ), $found );
+		$this->assertSameSets( array( $terms[1], $terms[2], $terms[0] ), $found );
 
 		$found = get_terms(
 			'wptests_tax',
@@ -2114,7 +2191,7 @@ class Tests_Term_getTerms extends WP_UnitTestCase {
 			)
 		);
 
-		$this->assertEqualSets( array( $terms[1], $terms[0], $terms[2] ), $found );
+		$this->assertSameSets( array( $terms[1], $terms[0], $terms[2] ), $found );
 	}
 
 	/**
@@ -2151,7 +2228,7 @@ class Tests_Term_getTerms extends WP_UnitTestCase {
 			)
 		);
 
-		$this->assertEqualSets( array( $terms[1], $terms[2], $terms[0] ), $found );
+		$this->assertSameSets( array( $terms[1], $terms[2], $terms[0] ), $found );
 
 		$found = get_terms(
 			'wptests_tax',
@@ -2174,7 +2251,7 @@ class Tests_Term_getTerms extends WP_UnitTestCase {
 			)
 		);
 
-		$this->assertEqualSets( array( $terms[1], $terms[0], $terms[2] ), $found );
+		$this->assertSameSets( array( $terms[1], $terms[0], $terms[2] ), $found );
 
 		$expected = get_terms(
 			'wptests_tax',
@@ -2215,13 +2292,13 @@ class Tests_Term_getTerms extends WP_UnitTestCase {
 			)
 		);
 
-		$this->assertEqualSets( $expected, $found );
+		$this->assertSameSets( $expected, $found );
 	}
 
 	public function test_hierarchical_false_with_parent() {
 		$initial_terms = $this->create_hierarchical_terms();
 
-		// Case where hierarchical is false
+		// Case where hierarchical is false.
 		$terms = get_terms(
 			'category',
 			array(
@@ -2230,8 +2307,8 @@ class Tests_Term_getTerms extends WP_UnitTestCase {
 			)
 		);
 
-		// Verify that there are no children
-		$this->assertEquals( 0, count( $terms ) );
+		// Verify that there are no children.
+		$this->assertSame( 0, count( $terms ) );
 	}
 
 	/**
@@ -2240,7 +2317,7 @@ class Tests_Term_getTerms extends WP_UnitTestCase {
 	public function test_hierarchical_true_with_parent() {
 		$initial_terms = $this->create_hierarchical_terms();
 
-		// Case where hierarchical is true
+		// Case where hierarchical is true.
 		$terms = get_terms(
 			'category',
 			array(
@@ -2249,13 +2326,13 @@ class Tests_Term_getTerms extends WP_UnitTestCase {
 			)
 		);
 
-		// Verify that the children with non-empty descendants are returned
+		// Verify that the children with non-empty descendants are returned.
 		$expected = array(
 			$initial_terms['two_term']['term_id'],
 			$initial_terms['five_term']['term_id'],
 		);
 		$actual   = wp_list_pluck( $terms, 'term_id' );
-		$this->assertEqualSets( $expected, $actual );
+		$this->assertSameSets( $expected, $actual );
 	}
 
 	public function test_hierarchical_false_with_child_of_and_direct_child() {
@@ -2267,7 +2344,7 @@ class Tests_Term_getTerms extends WP_UnitTestCase {
 			'category'
 		);
 
-		// Case where hierarchical is false
+		// Case where hierarchical is false.
 		$terms = get_terms(
 			'category',
 			array(
@@ -2281,13 +2358,13 @@ class Tests_Term_getTerms extends WP_UnitTestCase {
 		);
 
 		$actual = wp_list_pluck( $terms, 'term_id' );
-		$this->assertEqualSets( $expected, $actual );
+		$this->assertSameSets( $expected, $actual );
 	}
 
 	public function test_hierarchical_false_with_child_of_should_not_return_grandchildren() {
 		$initial_terms = $this->create_hierarchical_terms();
 
-		// Case where hierarchical is false
+		// Case where hierarchical is false.
 		$terms = get_terms(
 			'category',
 			array(
@@ -2296,14 +2373,14 @@ class Tests_Term_getTerms extends WP_UnitTestCase {
 			)
 		);
 
-		// Verify that there are no children
-		$this->assertEquals( 0, count( $terms ) );
+		// Verify that there are no children.
+		$this->assertSame( 0, count( $terms ) );
 	}
 
 	public function test_hierarchical_true_with_child_of_should_return_grandchildren() {
 		$initial_terms = $this->create_hierarchical_terms();
 
-		// Case where hierarchical is true
+		// Case where hierarchical is true.
 		$terms = get_terms(
 			'category',
 			array(
@@ -2319,7 +2396,7 @@ class Tests_Term_getTerms extends WP_UnitTestCase {
 			$initial_terms['six_term']['term_id'],
 		);
 		$actual   = wp_list_pluck( $terms, 'term_id' );
-		$this->assertEqualSets( $expected, $actual );
+		$this->assertSameSets( $expected, $actual );
 	}
 
 	public function test_parent_should_override_child_of() {
@@ -2341,7 +2418,7 @@ class Tests_Term_getTerms extends WP_UnitTestCase {
 			$initial_terms['seven_term']['term_id'],
 		);
 		$actual   = wp_list_pluck( $terms, 'term_id' );
-		$this->assertEqualSets( $expected, $actual );
+		$this->assertSameSets( $expected, $actual );
 	}
 
 	/**
@@ -2393,13 +2470,13 @@ class Tests_Term_getTerms extends WP_UnitTestCase {
 			)
 		);
 
-		$this->assertEqualSets( array( $t3 ), $found );
+		$this->assertSameSets( array( $t3 ), $found );
 	}
 
 	public function test_hierarchical_false_parent_should_override_child_of() {
 		$initial_terms = $this->create_hierarchical_terms();
 
-		// Case where hierarchical is false
+		// Case where hierarchical is false.
 		$terms = get_terms(
 			'category',
 			array(
@@ -2409,8 +2486,8 @@ class Tests_Term_getTerms extends WP_UnitTestCase {
 			)
 		);
 
-		// hierarchical=false means that descendants are not fetched.
-		$this->assertEquals( 0, count( $terms ) );
+		// 'hierarchical=false' means that descendants are not fetched.
+		$this->assertSame( 0, count( $terms ) );
 	}
 
 	/**
@@ -2419,7 +2496,7 @@ class Tests_Term_getTerms extends WP_UnitTestCase {
 	public function test_hierarchical_true_parent_overrides_child_of() {
 		$initial_terms = $this->create_hierarchical_terms();
 
-		// Case where hierarchical is true
+		// Case where hierarchical is true.
 		$terms = get_terms(
 			'category',
 			array(
@@ -2429,13 +2506,13 @@ class Tests_Term_getTerms extends WP_UnitTestCase {
 			)
 		);
 
-		// Verify that parent takes precedence over child_of
+		// Verify that parent takes precedence over child_of.
 		$expected = array(
 			$initial_terms['two_term']['term_id'],
 			$initial_terms['five_term']['term_id'],
 		);
 		$actual   = wp_list_pluck( $terms, 'term_id' );
-		$this->assertEqualSets( $expected, $actual );
+		$this->assertSameSets( $expected, $actual );
 	}
 
 	public function test_pad_counts() {
@@ -2472,7 +2549,7 @@ class Tests_Term_getTerms extends WP_UnitTestCase {
 			)
 		);
 
-		$this->assertEqualSets( array( $t1, $t2, $t3 ), wp_list_pluck( $found, 'term_id' ) );
+		$this->assertSameSets( array( $t1, $t2, $t3 ), wp_list_pluck( $found, 'term_id' ) );
 
 		foreach ( $found as $f ) {
 			if ( $t1 === $f->term_id ) {
@@ -2510,7 +2587,7 @@ class Tests_Term_getTerms extends WP_UnitTestCase {
 			)
 		);
 
-		$this->assertEqualSets( array( $c1, $c2, $c3 ), wp_list_pluck( $terms, 'term_id' ) );
+		$this->assertSameSets( array( $c1, $c2, $c3 ), wp_list_pluck( $terms, 'term_id' ) );
 
 		foreach ( $terms as $term ) {
 			$this->assertSame( 3, $term->count );
@@ -2545,15 +2622,15 @@ class Tests_Term_getTerms extends WP_UnitTestCase {
 			)
 		);
 
-		$this->assertEqualSets( array( $t1, $t2, $t3 ), wp_list_pluck( $found, 'term_id' ) );
+		$this->assertSameSets( array( $t1, $t2, $t3 ), wp_list_pluck( $found, 'term_id' ) );
 
 		foreach ( $found as $f ) {
 			if ( $t1 === $f->term_id ) {
-				$this->assertEquals( 1, $f->count );
+				$this->assertSame( 1, $f->count );
 			} elseif ( $t2 === $f->term_id ) {
-				$this->assertEquals( 2, $f->count );
+				$this->assertSame( 2, $f->count );
 			} else {
-				$this->assertEquals( 1, $f->count );
+				$this->assertSame( 1, $f->count );
 			}
 		}
 	}
@@ -2642,7 +2719,7 @@ class Tests_Term_getTerms extends WP_UnitTestCase {
 			)
 		);
 
-		$this->assertEqualSets( array( $terms[0], $terms[1] ), $found );
+		$this->assertSameSets( array( $terms[0], $terms[1] ), $found );
 	}
 
 	/**
@@ -2669,7 +2746,7 @@ class Tests_Term_getTerms extends WP_UnitTestCase {
 			)
 		);
 
-		$this->assertEqualSets( array( $terms[0] ), $found );
+		$this->assertSameSets( array( $terms[0] ), $found );
 	}
 
 	/**
@@ -2794,7 +2871,7 @@ class Tests_Term_getTerms extends WP_UnitTestCase {
 				'fields'     => 'ids',
 			)
 		);
-		$this->assertEqualSets( $terms, $found );
+		$this->assertSameSets( $terms, $found );
 	}
 
 	/**
@@ -2816,7 +2893,7 @@ class Tests_Term_getTerms extends WP_UnitTestCase {
 				'order'      => 'ASC',
 			)
 		);
-		$this->assertEqualSets( array( $terms[1] ), $found );
+		$this->assertSameSets( array( $terms[1] ), $found );
 	}
 
 	/**
@@ -2838,7 +2915,7 @@ class Tests_Term_getTerms extends WP_UnitTestCase {
 				'order'      => 'ASC',
 			)
 		);
-		$this->assertEqualSets( array( $terms[1] ), $found );
+		$this->assertSameSets( array( $terms[1] ), $found );
 	}
 
 	/**
@@ -2860,7 +2937,7 @@ class Tests_Term_getTerms extends WP_UnitTestCase {
 				'order'      => 'ASC',
 			)
 		);
-		$this->assertEqualSets( array(), $found );
+		$this->assertSameSets( array(), $found );
 	}
 
 	/**
@@ -2908,7 +2985,7 @@ class Tests_Term_getTerms extends WP_UnitTestCase {
 			)
 		);
 
-		$this->assertEqualSets( array( $term_id ), wp_list_pluck( $found, 'term_id' ) );
+		$this->assertSameSets( array( $term_id ), wp_list_pluck( $found, 'term_id' ) );
 	}
 
 	/**
@@ -2944,7 +3021,7 @@ class Tests_Term_getTerms extends WP_UnitTestCase {
 			)
 		);
 
-		$this->assertEqualSets( array( $term_id1, $term_id2 ), wp_list_pluck( $found, 'term_id' ) );
+		$this->assertSameSets( array( $term_id1, $term_id2 ), wp_list_pluck( $found, 'term_id' ) );
 	}
 
 	protected function create_hierarchical_terms_and_posts() {
@@ -2997,14 +3074,16 @@ class Tests_Term_getTerms extends WP_UnitTestCase {
 	}
 
 	protected function create_hierarchical_terms() {
-		// Set up the following hierarchy:
-		// - One
-		//   - Two
-		//     - Three (1)
-		//     - Four
-		//   - Five
-		//     - Six (1)
-		//   - Seven
+		/*
+		 * Set up the following hierarchy:
+		 * - One
+		 *   - Two
+		 *     - Three (1)
+		 *     - Four
+		 *   - Five
+		 *     - Six (1)
+		 *   - Seven
+		 */
 		$one_term   = wp_insert_term(
 			'One',
 			'category'
@@ -3052,7 +3131,7 @@ class Tests_Term_getTerms extends WP_UnitTestCase {
 			)
 		);
 
-		// Ensure child terms are not empty
+		// Ensure child terms are not empty.
 		$first_post_id  = self::factory()->post->create();
 		$second_post_id = self::factory()->post->create();
 		wp_set_post_terms( $first_post_id, array( $three_term['term_id'] ), 'category' );
diff --git a/tests/term/getTheTerms.php b/tests/term/getTheTerms.php
index 54450a7c81..af59c1b752 100644
--- a/tests/term/getTheTerms.php
+++ b/tests/term/getTheTerms.php
@@ -22,7 +22,7 @@ class Tests_Term_GetTheTerms extends WP_UnitTestCase {
 
 		// Cache should be empty after a set.
 		$tt_1 = wp_set_object_terms( $post_id, $terms_1, $this->taxonomy );
-		$this->assertEquals( 3, count( $tt_1 ) );
+		$this->assertSame( 3, count( $tt_1 ) );
 		$this->assertFalse( wp_cache_get( $post_id, $this->taxonomy . '_relationships' ) );
 
 		// wp_get_object_terms() does not prime the cache.
@@ -43,7 +43,7 @@ class Tests_Term_GetTheTerms extends WP_UnitTestCase {
 
 		// Cache should be empty after a set.
 		$tt_2 = wp_set_object_terms( $post_id, $terms_2, $this->taxonomy );
-		$this->assertEquals( 2, count( $tt_2 ) );
+		$this->assertSame( 2, count( $tt_2 ) );
 		$this->assertFalse( wp_cache_get( $post_id, $this->taxonomy . '_relationships' ) );
 	}
 
@@ -62,8 +62,8 @@ class Tests_Term_GetTheTerms extends WP_UnitTestCase {
 		$tt_1 = wp_set_object_terms( $post_id, $tag_id, 'post_tag' );
 
 		$terms = get_the_terms( $post_id, 'post_tag' );
-		$this->assertEquals( $tag_id, $terms[0]->term_id );
-		$this->assertEquals( 'My Amazing Tag', $terms[0]->description );
+		$this->assertSame( $tag_id, $terms[0]->term_id );
+		$this->assertSame( 'My Amazing Tag', $terms[0]->description );
 
 		$_updated = wp_update_term(
 			$tag_id,
@@ -74,12 +74,12 @@ class Tests_Term_GetTheTerms extends WP_UnitTestCase {
 		);
 
 		$_new_term = get_term( $tag_id, 'post_tag' );
-		$this->assertEquals( $tag_id, $_new_term->term_id );
-		$this->assertEquals( 'This description is even more amazing!', $_new_term->description );
+		$this->assertSame( $tag_id, $_new_term->term_id );
+		$this->assertSame( 'This description is even more amazing!', $_new_term->description );
 
 		$terms = get_the_terms( $post_id, 'post_tag' );
-		$this->assertEquals( $tag_id, $terms[0]->term_id );
-		$this->assertEquals( 'This description is even more amazing!', $terms[0]->description );
+		$this->assertSame( $tag_id, $terms[0]->term_id );
+		$this->assertSame( 'This description is even more amazing!', $terms[0]->description );
 	}
 
 	/**
@@ -111,7 +111,7 @@ class Tests_Term_GetTheTerms extends WP_UnitTestCase {
 
 		$found = get_the_terms( $p, 'wptests_tax' );
 
-		$this->assertEqualSets( array( 0, 1 ), array_keys( $found ) );
+		$this->assertSameSets( array( 0, 1 ), array_keys( $found ) );
 	}
 
 	/**
@@ -127,7 +127,7 @@ class Tests_Term_GetTheTerms extends WP_UnitTestCase {
 
 		$found = get_the_terms( $p, 'wptests_tax' );
 
-		$this->assertEqualSets( array( 0, 1 ), array_keys( $found ) );
+		$this->assertSameSets( array( 0, 1 ), array_keys( $found ) );
 	}
 
 	/**
@@ -213,7 +213,7 @@ class Tests_Term_GetTheTerms extends WP_UnitTestCase {
 		$num_queries = $wpdb->num_queries;
 		$found       = get_the_terms( self::$post_ids[0], 'wptests_tax' );
 
-		$this->assertEqualSets( $terms, wp_list_pluck( $found, 'term_id' ) );
+		$this->assertSameSets( $terms, wp_list_pluck( $found, 'term_id' ) );
 
 		$num_queries++;
 		$this->assertSame( $num_queries, $wpdb->num_queries );
diff --git a/tests/term/meta.php b/tests/term/meta.php
index 74c1e633f8..efde245153 100644
--- a/tests/term/meta.php
+++ b/tests/term/meta.php
@@ -66,7 +66,7 @@ class Tests_Term_Meta extends WP_UnitTestCase {
 			'foo1' => array( 'baz' ),
 		);
 
-		$this->assertEqualSets( $expected, $found );
+		$this->assertSameSets( $expected, $found );
 	}
 
 	public function test_get_with_key_should_fetch_all_for_key() {
@@ -78,7 +78,7 @@ class Tests_Term_Meta extends WP_UnitTestCase {
 		$found    = get_term_meta( $t, 'foo' );
 		$expected = array( 'bar', 'baz' );
 
-		$this->assertEqualSets( $expected, $found );
+		$this->assertSameSets( $expected, $found );
 	}
 
 	public function test_get_should_respect_single_true() {
@@ -87,7 +87,7 @@ class Tests_Term_Meta extends WP_UnitTestCase {
 		add_term_meta( $t, 'foo', 'baz' );
 
 		$found = get_term_meta( $t, 'foo', true );
-		$this->assertEquals( 'bar', $found );
+		$this->assertSame( 'bar', $found );
 	}
 
 	public function test_update_should_pass_to_add_when_no_value_exists_for_key() {
@@ -116,6 +116,9 @@ class Tests_Term_Meta extends WP_UnitTestCase {
 	public function test_term_meta_should_be_lazy_loaded_for_all_terms_in_wp_query_loop() {
 		global $wpdb;
 
+		// Clear any previous term IDs from the queue.
+		wp_metadata_lazyloader()->reset_queue( 'term' );
+
 		$p = self::factory()->post->create( array( 'post_status' => 'publish' ) );
 
 		register_taxonomy( 'wptests_tax', 'post' );
@@ -157,6 +160,10 @@ class Tests_Term_Meta extends WP_UnitTestCase {
 		}
 	}
 
+	public static function set_cache_results( $q ) {
+		$q->set( 'cache_results', true );
+	}
+
 	/**
 	 * @ticket 36593
 	 */
@@ -238,7 +245,7 @@ class Tests_Term_Meta extends WP_UnitTestCase {
 			)
 		);
 
-		$this->assertEqualSets( array( $terms[0] ), $found );
+		$this->assertSameSets( array( $terms[0] ), $found );
 
 		add_term_meta( $terms[1], 'foo', 'bar' );
 
@@ -256,7 +263,7 @@ class Tests_Term_Meta extends WP_UnitTestCase {
 			)
 		);
 
-		$this->assertEqualSets( array( $terms[0], $terms[1] ), $found );
+		$this->assertSameSets( array( $terms[0], $terms[1] ), $found );
 	}
 
 	public function test_updating_term_meta_should_bust_get_terms_cache() {
@@ -280,7 +287,7 @@ class Tests_Term_Meta extends WP_UnitTestCase {
 			)
 		);
 
-		$this->assertEqualSets( array( $terms[0] ), $found );
+		$this->assertSameSets( array( $terms[0] ), $found );
 
 		update_term_meta( $terms[1], 'foo', 'bar' );
 
@@ -298,7 +305,7 @@ class Tests_Term_Meta extends WP_UnitTestCase {
 			)
 		);
 
-		$this->assertEqualSets( array( $terms[0], $terms[1] ), $found );
+		$this->assertSameSets( array( $terms[0], $terms[1] ), $found );
 	}
 
 	public function test_deleting_term_meta_should_bust_get_terms_cache() {
@@ -322,7 +329,7 @@ class Tests_Term_Meta extends WP_UnitTestCase {
 			)
 		);
 
-		$this->assertEqualSets( array( $terms[0], $terms[1] ), $found );
+		$this->assertSameSets( array( $terms[0], $terms[1] ), $found );
 
 		delete_term_meta( $terms[1], 'foo', 'bar' );
 
@@ -340,7 +347,7 @@ class Tests_Term_Meta extends WP_UnitTestCase {
 			)
 		);
 
-		$this->assertEqualSets( array( $terms[0] ), $found );
+		$this->assertSameSets( array( $terms[0] ), $found );
 	}
 
 	/**
@@ -473,10 +480,6 @@ class Tests_Term_Meta extends WP_UnitTestCase {
 		$this->assertSame( array(), $meta );
 	}
 
-	public static function set_cache_results( $q ) {
-		$q->set( 'cache_results', true );
-	}
-
 	/**
 	 * @ticket 38323
 	 * @dataProvider data_register_term_meta
@@ -491,9 +494,9 @@ class Tests_Term_Meta extends WP_UnitTestCase {
 		// Reset global so subsequent data tests do not get polluted.
 		$GLOBALS['wp_meta_keys'] = array();
 
-		$this->assertEquals( 'term', $this->last_register_meta_call['object_type'] );
-		$this->assertEquals( $meta_key, $this->last_register_meta_call['meta_key'] );
-		$this->assertEquals( $args, $this->last_register_meta_call['args'] );
+		$this->assertSame( 'term', $this->last_register_meta_call['object_type'] );
+		$this->assertSame( $meta_key, $this->last_register_meta_call['meta_key'] );
+		$this->assertSame( $args, $this->last_register_meta_call['args'] );
 	}
 
 	public function data_register_term_meta() {
diff --git a/tests/term/query.php b/tests/term/query.php
index 699330851b..425815cd17 100644
--- a/tests/term/query.php
+++ b/tests/term/query.php
@@ -22,7 +22,7 @@ class Tests_Term_Query extends WP_UnitTestCase {
 			)
 		);
 
-		$this->assertEqualSets( array( $term_2 ), $q->terms );
+		$this->assertSameSets( array( $term_2 ), $q->terms );
 	}
 
 	public function test_taxonomy_should_accept_taxonomy_array() {
@@ -40,7 +40,7 @@ class Tests_Term_Query extends WP_UnitTestCase {
 			)
 		);
 
-		$this->assertEqualSets( array( $term_2 ), $q->terms );
+		$this->assertSameSets( array( $term_2 ), $q->terms );
 	}
 
 	/**
@@ -68,7 +68,7 @@ class Tests_Term_Query extends WP_UnitTestCase {
 			)
 		);
 
-		$this->assertEqualSets( array( $terms[0] ), $q->terms );
+		$this->assertSameSets( array( $terms[0] ), $q->terms );
 	}
 
 	/**
@@ -102,7 +102,7 @@ class Tests_Term_Query extends WP_UnitTestCase {
 			)
 		);
 
-		$this->assertEqualSets( array( $terms[0], $terms[2] ), $q->terms );
+		$this->assertSameSets( array( $terms[0], $terms[2] ), $q->terms );
 	}
 
 	/**
@@ -243,7 +243,7 @@ class Tests_Term_Query extends WP_UnitTestCase {
 			)
 		);
 
-		$this->assertEqualSets( array( $t ), $query->terms );
+		$this->assertSameSets( array( $t ), $query->terms );
 	}
 
 	/**
@@ -265,7 +265,7 @@ class Tests_Term_Query extends WP_UnitTestCase {
 			)
 		);
 
-		$this->assertEqualSets( array( $t ), $query->terms );
+		$this->assertSameSets( array( $t ), $query->terms );
 	}
 
 	/**
@@ -374,7 +374,7 @@ class Tests_Term_Query extends WP_UnitTestCase {
 		);
 		$found = $query->get_terms();
 
-		$this->assertEqualSets( array( $terms[0] ), $found );
+		$this->assertSameSets( array( $terms[0] ), $found );
 
 		wp_set_object_terms( $p, array( $terms[1] ), 'wptests_tax_1' );
 
@@ -387,7 +387,7 @@ class Tests_Term_Query extends WP_UnitTestCase {
 		);
 		$found = $query->get_terms();
 
-		$this->assertEqualSets( array( $terms[1] ), $found );
+		$this->assertSameSets( array( $terms[1] ), $found );
 	}
 
 	/**
@@ -480,11 +480,11 @@ class Tests_Term_Query extends WP_UnitTestCase {
 		$post_id  = self::factory()->post->create();
 		wp_set_object_terms( $post_id, array( $term_ids[0], $term_ids[1] ), 'wptests_tax' );
 		$terms = get_the_terms( $post_id, 'wptests_tax' );
-		$this->assertEquals( array( $term_ids[0], $term_ids[1] ), wp_list_pluck( $terms, 'term_id' ) );
-		// Flip the order
+		$this->assertSame( array( $term_ids[0], $term_ids[1] ), wp_list_pluck( $terms, 'term_id' ) );
+		// Flip the order.
 		wp_set_object_terms( $post_id, array( $term_ids[1], $term_ids[0] ), 'wptests_tax' );
 		$terms = get_the_terms( $post_id, 'wptests_tax' );
-		$this->assertEquals( array( $term_ids[1], $term_ids[0] ), wp_list_pluck( $terms, 'term_id' ) );
+		$this->assertSame( array( $term_ids[1], $term_ids[0] ), wp_list_pluck( $terms, 'term_id' ) );
 	}
 
 	/**
@@ -510,11 +510,11 @@ class Tests_Term_Query extends WP_UnitTestCase {
 		$post_id  = self::factory()->post->create();
 		wp_set_object_terms( $post_id, array( $term_ids[0], $term_ids[1] ), 'wptests_tax' );
 		$terms = wp_get_object_terms( $post_id, array( 'category', 'wptests_tax' ) );
-		$this->assertEquals( array( $term_ids[0], $term_ids[1], 1 ), wp_list_pluck( $terms, 'term_id' ) );
-		// Flip the order
+		$this->assertSame( array( $term_ids[0], $term_ids[1], 1 ), wp_list_pluck( $terms, 'term_id' ) );
+		// Flip the order.
 		wp_set_object_terms( $post_id, array( $term_ids[1], $term_ids[0] ), 'wptests_tax' );
 		$terms = wp_get_object_terms( $post_id, array( 'category', 'wptests_tax' ) );
-		$this->assertEquals( array( $term_ids[1], $term_ids[0], 1 ), wp_list_pluck( $terms, 'term_id' ) );
+		$this->assertSame( array( $term_ids[1], $term_ids[0], 1 ), wp_list_pluck( $terms, 'term_id' ) );
 	}
 
 	/**
@@ -690,7 +690,7 @@ class Tests_Term_Query extends WP_UnitTestCase {
 
 		$expected = array( $terms[0], $terms[2] );
 
-		$this->assertEqualSets( $expected, wp_list_pluck( $found, 'term_id' ) );
+		$this->assertSameSets( $expected, wp_list_pluck( $found, 'term_id' ) );
 	}
 
 	public function filter_term_to_null( $term ) {
@@ -727,7 +727,7 @@ class Tests_Term_Query extends WP_UnitTestCase {
 
 		$expected = array( $terms[0], $terms[2] );
 
-		$this->assertEqualSets( $expected, wp_list_pluck( $found, 'term_id' ) );
+		$this->assertSameSets( $expected, wp_list_pluck( $found, 'term_id' ) );
 	}
 
 	public function filter_term_to_wp_error( $term ) {
diff --git a/tests/term/slashes.php b/tests/term/slashes.php
index 414b831238..ea04097bbe 100644
--- a/tests/term/slashes.php
+++ b/tests/term/slashes.php
@@ -22,7 +22,7 @@ class Tests_Term_Slashes extends WP_Ajax_UnitTestCase {
 	}
 
 	/**
-	 * Tests the model function that expects slashed data
+	 * Tests the model function that expects slashed data.
 	 */
 	function test_wp_insert_term() {
 		$taxonomies = array(
@@ -39,8 +39,8 @@ class Tests_Term_Slashes extends WP_Ajax_UnitTestCase {
 				)
 			);
 			$term   = get_term( $insert['term_id'], $taxonomy );
-			$this->assertEquals( wp_unslash( $this->slash_1 ), $term->name );
-			$this->assertEquals( wp_unslash( $this->slash_3 ), $term->description );
+			$this->assertSame( wp_unslash( $this->slash_1 ), $term->name );
+			$this->assertSame( wp_unslash( $this->slash_3 ), $term->description );
 
 			$insert = wp_insert_term(
 				$this->slash_3,
@@ -51,8 +51,8 @@ class Tests_Term_Slashes extends WP_Ajax_UnitTestCase {
 				)
 			);
 			$term   = get_term( $insert['term_id'], $taxonomy );
-			$this->assertEquals( wp_unslash( $this->slash_3 ), $term->name );
-			$this->assertEquals( wp_unslash( $this->slash_5 ), $term->description );
+			$this->assertSame( wp_unslash( $this->slash_3 ), $term->name );
+			$this->assertSame( wp_unslash( $this->slash_5 ), $term->description );
 
 			$insert = wp_insert_term(
 				$this->slash_2,
@@ -63,13 +63,13 @@ class Tests_Term_Slashes extends WP_Ajax_UnitTestCase {
 				)
 			);
 			$term   = get_term( $insert['term_id'], $taxonomy );
-			$this->assertEquals( wp_unslash( $this->slash_2 ), $term->name );
-			$this->assertEquals( wp_unslash( $this->slash_4 ), $term->description );
+			$this->assertSame( wp_unslash( $this->slash_2 ), $term->name );
+			$this->assertSame( wp_unslash( $this->slash_4 ), $term->description );
 		}
 	}
 
 	/**
-	 * Tests the model function that expects slashed data
+	 * Tests the model function that expects slashed data.
 	 */
 	function test_wp_update_term() {
 		$taxonomies = array(
@@ -93,8 +93,8 @@ class Tests_Term_Slashes extends WP_Ajax_UnitTestCase {
 			);
 
 			$term = get_term( $id, $taxonomy );
-			$this->assertEquals( wp_unslash( $this->slash_1 ), $term->name );
-			$this->assertEquals( wp_unslash( $this->slash_3 ), $term->description );
+			$this->assertSame( wp_unslash( $this->slash_1 ), $term->name );
+			$this->assertSame( wp_unslash( $this->slash_3 ), $term->description );
 
 			$update = wp_update_term(
 				$id,
@@ -105,8 +105,8 @@ class Tests_Term_Slashes extends WP_Ajax_UnitTestCase {
 				)
 			);
 			$term   = get_term( $id, $taxonomy );
-			$this->assertEquals( wp_unslash( $this->slash_3 ), $term->name );
-			$this->assertEquals( wp_unslash( $this->slash_5 ), $term->description );
+			$this->assertSame( wp_unslash( $this->slash_3 ), $term->name );
+			$this->assertSame( wp_unslash( $this->slash_5 ), $term->description );
 
 			$update = wp_update_term(
 				$id,
@@ -117,8 +117,8 @@ class Tests_Term_Slashes extends WP_Ajax_UnitTestCase {
 				)
 			);
 			$term   = get_term( $id, $taxonomy );
-			$this->assertEquals( wp_unslash( $this->slash_2 ), $term->name );
-			$this->assertEquals( wp_unslash( $this->slash_4 ), $term->description );
+			$this->assertSame( wp_unslash( $this->slash_2 ), $term->name );
+			$this->assertSame( wp_unslash( $this->slash_4 ), $term->description );
 		}
 	}
 }
diff --git a/tests/term/splitSharedTerm.php b/tests/term/splitSharedTerm.php
index ff540f68db..71acca0c77 100644
--- a/tests/term/splitSharedTerm.php
+++ b/tests/term/splitSharedTerm.php
@@ -100,7 +100,7 @@ class Tests_Term_SplitSharedTerm extends WP_UnitTestCase {
 			)
 		);
 
-		$this->assertEquals( $this->terms['t2_child']['term_taxonomy_id'], $children[0]->term_taxonomy_id );
+		$this->assertSame( $this->terms['t2_child']['term_taxonomy_id'], $children[0]->term_taxonomy_id );
 	}
 
 	/**
@@ -115,7 +115,7 @@ class Tests_Term_SplitSharedTerm extends WP_UnitTestCase {
 			)
 		);
 
-		$this->assertEquals( $this->terms['t2_child']['term_taxonomy_id'], $children[0]->term_taxonomy_id );
+		$this->assertSame( $this->terms['t2_child']['term_taxonomy_id'], $children[0]->term_taxonomy_id );
 	}
 
 	/**
@@ -156,7 +156,7 @@ class Tests_Term_SplitSharedTerm extends WP_UnitTestCase {
 		$new_term_id = _split_shared_term( $t1['term_id'], $t3['term_taxonomy_id'] );
 
 		$t2_children = get_term_children( $t2['term_id'], 'wptests_tax_4' );
-		$this->assertEquals( array( $new_term_id ), $t2_children );
+		$this->assertSame( array( $new_term_id ), $t2_children );
 	}
 
 	/**
@@ -180,12 +180,12 @@ class Tests_Term_SplitSharedTerm extends WP_UnitTestCase {
 			array( '%d' )
 		);
 
-		$this->assertEquals( $t1['term_id'], get_option( 'default_category', -1 ) );
+		$this->assertSame( $t1['term_id'], get_option( 'default_category', -1 ) );
 
 		$new_term_id = _split_shared_term( $t1['term_id'], $t1['term_taxonomy_id'] );
 
 		$this->assertNotEquals( $new_term_id, $t1['term_id'] );
-		$this->assertEquals( $new_term_id, get_option( 'default_category', -1 ) );
+		$this->assertSame( $new_term_id, get_option( 'default_category', -1 ) );
 	}
 
 	/**
@@ -252,7 +252,7 @@ class Tests_Term_SplitSharedTerm extends WP_UnitTestCase {
 		$new_term_id = _split_shared_term( $shared_term_id, $nav_term->term_taxonomy_id );
 
 		$locations = get_nav_menu_locations();
-		$this->assertEquals( $new_term_id, $locations['foo'] );
+		$this->assertSame( $new_term_id, $locations['foo'] );
 	}
 
 	/**
@@ -301,7 +301,7 @@ class Tests_Term_SplitSharedTerm extends WP_UnitTestCase {
 		$this->assertSame( 'Updated Foo Menu', $menu->description );
 
 		$menu_items = wp_get_nav_menu_items( $new_nav_menu_id );
-		$this->assertEquals( array( $cat_menu_item ), wp_list_pluck( $menu_items, 'ID' ) );
+		$this->assertSame( array( $cat_menu_item ), wp_list_pluck( $menu_items, 'ID' ) );
 	}
 
 	public function test_wp_get_split_terms() {
@@ -312,11 +312,11 @@ class Tests_Term_SplitSharedTerm extends WP_UnitTestCase {
 			'wptests_tax_3' => $this->terms['t3']['term_id'],
 		);
 
-		$this->assertEqualSets( $expected, $found );
+		$this->assertSameSets( $expected, $found );
 	}
 
 	public function test_wp_get_split_term() {
 		$found = wp_get_split_term( $this->terms['t1']['term_id'], 'wptests_tax_3' );
-		$this->assertEquals( $this->terms['t3']['term_id'], $found );
+		$this->assertSame( $this->terms['t3']['term_id'], $found );
 	}
 }
diff --git a/tests/term/taxQuery.php b/tests/term/taxQuery.php
index 58b57599d7..495a21ea5f 100644
--- a/tests/term/taxQuery.php
+++ b/tests/term/taxQuery.php
@@ -94,7 +94,7 @@ class Tests_Term_Tax_Query extends WP_UnitTestCase {
 			)
 		);
 
-		$this->assertEquals( array( 'foo' ), $tq->queries[0]['terms'] );
+		$this->assertSame( array( 'foo' ), $tq->queries[0]['terms'] );
 	}
 
 	/**
@@ -237,7 +237,7 @@ class Tests_Term_Tax_Query extends WP_UnitTestCase {
 		);
 		$tq->transform_query( $tq->queries[0], 'term_id' );
 
-		$this->assertEquals( array( $t1 ), $tq->queries[0]['terms'] );
+		$this->assertSame( array( $t1 ), $tq->queries[0]['terms'] );
 		$this->assertSame( 'term_id', $tq->queries[0]['field'] );
 	}
 
@@ -256,7 +256,7 @@ class Tests_Term_Tax_Query extends WP_UnitTestCase {
 				array(
 					'taxonomy' => 'category',
 					'terms'    => array( $t1 ),
-					'field'    => 'foo', // Anything defaults to term_id
+					'field'    => 'foo', // Anything defaults to term_id.
 				),
 			)
 		);
diff --git a/tests/term/termExists.php b/tests/term/termExists.php
index a99aefbb76..0cf7d79250 100644
--- a/tests/term/termExists.php
+++ b/tests/term/termExists.php
@@ -150,7 +150,7 @@ class Tests_TermExists extends WP_UnitTestCase {
 
 		_unregister_taxonomy( 'foo' );
 
-		$this->assertSame( null, $found );
+		$this->assertNull( $found );
 	}
 
 	public function test_term_exists_taxonomy_nonempty_parent_nonempty_match_name() {
@@ -259,22 +259,22 @@ class Tests_TermExists extends WP_UnitTestCase {
 	function test_term_exists_known() {
 		register_taxonomy( 'wptests_tax', 'post' );
 
-		// insert a term
+		// Insert a term.
 		$term = rand_str();
 		$t    = wp_insert_term( $term, 'wptests_tax' );
 		$this->assertInternalType( 'array', $t );
 		$this->assertEquals( $t['term_id'], term_exists( $t['term_id'] ) );
 		$this->assertEquals( $t['term_id'], term_exists( $term ) );
 
-		// clean up
+		// Clean up.
 		$this->assertTrue( wp_delete_term( $t['term_id'], 'wptests_tax' ) );
 		_unregister_taxonomy( 'wptests_tax' );
 	}
 
 	function test_term_exists_unknown() {
 		$this->assertNull( term_exists( rand_str() ) );
-		$this->assertEquals( 0, term_exists( 0 ) );
-		$this->assertEquals( 0, term_exists( '' ) );
-		$this->assertEquals( 0, term_exists( null ) );
+		$this->assertSame( 0, term_exists( 0 ) );
+		$this->assertNull( term_exists( '' ) );
+		$this->assertNull( term_exists( null ) );
 	}
 }
diff --git a/tests/term/wpDeleteObjectTermRelationships.php b/tests/term/wpDeleteObjectTermRelationships.php
index 319a8186f6..e4ee55f46d 100644
--- a/tests/term/wpDeleteObjectTermRelationships.php
+++ b/tests/term/wpDeleteObjectTermRelationships.php
@@ -19,13 +19,13 @@ class Tests_Term_WpDeleteObjectTermRelationships extends WP_UnitTestCase {
 
 		// Confirm the setup.
 		$terms = wp_get_object_terms( $object_id, array( 'wptests_tax1', 'wptests_tax2' ), array( 'fields' => 'ids' ) );
-		$this->assertEqualSets( array( $t1, $t2 ), $terms );
+		$this->assertSameSets( array( $t1, $t2 ), $terms );
 
 		// wp_delete_object_term_relationships() doesn't have a return value.
 		wp_delete_object_term_relationships( $object_id, 'wptests_tax2' );
 		$terms = wp_get_object_terms( $object_id, array( 'wptests_tax1', 'wptests_tax2' ), array( 'fields' => 'ids' ) );
 
-		$this->assertEqualSets( array( $t1 ), $terms );
+		$this->assertSameSets( array( $t1 ), $terms );
 	}
 
 	public function test_array_of_taxonomies() {
@@ -45,12 +45,12 @@ class Tests_Term_WpDeleteObjectTermRelationships extends WP_UnitTestCase {
 
 		// Confirm the setup.
 		$terms = wp_get_object_terms( $object_id, array( 'wptests_tax1', 'wptests_tax2', 'wptests_tax3' ), array( 'fields' => 'ids' ) );
-		$this->assertEqualSets( array( $t1, $t2, $t3 ), $terms );
+		$this->assertSameSets( array( $t1, $t2, $t3 ), $terms );
 
 		// wp_delete_object_term_relationships() doesn't have a return value.
 		wp_delete_object_term_relationships( $object_id, array( 'wptests_tax1', 'wptests_tax3' ) );
 		$terms = wp_get_object_terms( $object_id, array( 'wptests_tax1', 'wptests_tax2', 'wptests_tax3' ), array( 'fields' => 'ids' ) );
 
-		$this->assertEqualSets( array( $t2 ), $terms );
+		$this->assertSameSets( array( $t2 ), $terms );
 	}
 }
diff --git a/tests/term/wpDeleteTerm.php b/tests/term/wpDeleteTerm.php
index 2385c8d08d..83855e17cd 100644
--- a/tests/term/wpDeleteTerm.php
+++ b/tests/term/wpDeleteTerm.php
@@ -28,11 +28,11 @@ class Tests_Term_WpDeleteTerm extends WP_UnitTestCase {
 		add_action( 'delete_term', array( $this, 'catch_deleted_term' ), 10, 5 );
 
 		wp_delete_term( $terms[0], 'wptests_tax' );
-		$this->assertEquals( 1, $this->deleted_term->count );
+		$this->assertSame( 1, $this->deleted_term->count );
 		$this->assertSame( $this->object_ids, array( "$post_id" ) );
 
 		wp_delete_term( $terms[1], 'wptests_tax' );
-		$this->assertEquals( 0, $this->deleted_term->count );
+		$this->assertSame( 0, $this->deleted_term->count );
 		$this->assertSame( $this->object_ids, array() );
 	}
 
diff --git a/tests/term/wpGenerateTagCloud.php b/tests/term/wpGenerateTagCloud.php
index ef64bd7686..dec65d440e 100644
--- a/tests/term/wpGenerateTagCloud.php
+++ b/tests/term/wpGenerateTagCloud.php
@@ -43,23 +43,17 @@ class Tests_WP_Generate_Tag_Cloud extends WP_UnitTestCase {
 	 */
 	function empty_tags_data_provider() {
 		return array(
-			/**
-			 * when format => array, we should be getting an empty array back
-			 */
+			// When 'format' => 'array', we should be getting an empty array back.
 			array(
 				array(),
 				array( 'format' => 'array' ),
 			),
-			/**
-			 * List format returns an empty string
-			 */
+			// List format returns an empty string.
 			array(
 				'',
 				array( 'format' => 'list' ),
 			),
-			/**
-			 * $args can be an array or ''. Either should return an empty string
-			 */
+			// $args can be an array or ''. Either should return an empty string.
 			array(
 				'',
 				array(),
@@ -302,7 +296,7 @@ class Tests_WP_Generate_Tag_Cloud extends WP_UnitTestCase {
 
 		$tags = array();
 		foreach ( $terms as $term ) {
-			//add the link
+			// Add the link.
 			$term->link = get_term_link( $term );
 			$tags[]     = $term;
 
diff --git a/tests/term/wpGetObjectTerms.php b/tests/term/wpGetObjectTerms.php
index 0c64872497..53bbf22de9 100644
--- a/tests/term/wpGetObjectTerms.php
+++ b/tests/term/wpGetObjectTerms.php
@@ -18,11 +18,11 @@ class Tests_Term_WpGetObjectTerms extends WP_UnitTestCase {
 		$terms_1       = array( 'Foo', 'Bar', 'Baz' );
 		$terms_1_slugs = array( 'foo', 'bar', 'baz' );
 
-		// set the initial terms
+		// Set the initial terms.
 		$tt_1 = wp_set_object_terms( $post_id, $terms_1, $this->taxonomy );
-		$this->assertEquals( 3, count( $tt_1 ) );
+		$this->assertSame( 3, count( $tt_1 ) );
 
-		// make sure they're correct
+		// Make sure they're correct.
 		$terms = wp_get_object_terms(
 			$post_id,
 			$this->taxonomy,
@@ -31,7 +31,7 @@ class Tests_Term_WpGetObjectTerms extends WP_UnitTestCase {
 				'orderby' => 'term_id',
 			)
 		);
-		$this->assertEquals( $terms_1_slugs, $terms );
+		$this->assertSame( $terms_1_slugs, $terms );
 	}
 
 	/**
@@ -47,7 +47,7 @@ class Tests_Term_WpGetObjectTerms extends WP_UnitTestCase {
 
 		$terms = wp_get_object_terms( array( $post_id1, $post_id2 ), 'category' );
 		$this->assertCount( 2, $terms );
-		$this->assertEquals( array( $cat_id, $cat_id2 ), wp_list_pluck( $terms, 'term_id' ) );
+		$this->assertSame( array( $cat_id, $cat_id2 ), wp_list_pluck( $terms, 'term_id' ) );
 
 		$terms2 = wp_get_object_terms(
 			array( $post_id1, $post_id2 ),
@@ -58,7 +58,7 @@ class Tests_Term_WpGetObjectTerms extends WP_UnitTestCase {
 		);
 
 		$this->assertCount( 3, $terms2 );
-		$this->assertEquals( array( $cat_id, $cat_id, $cat_id2 ), wp_list_pluck( $terms2, 'term_id' ) );
+		$this->assertSame( array( $cat_id, $cat_id, $cat_id2 ), wp_list_pluck( $terms2, 'term_id' ) );
 	}
 
 	/**
@@ -149,7 +149,7 @@ class Tests_Term_WpGetObjectTerms extends WP_UnitTestCase {
 			)
 		);
 
-		$this->assertEquals( array( $t1, $t3, $t2 ), $found );
+		$this->assertSame( array( $t1, $t3, $t2 ), $found );
 	}
 
 	public function test_orderby_count() {
@@ -187,7 +187,7 @@ class Tests_Term_WpGetObjectTerms extends WP_UnitTestCase {
 			)
 		);
 
-		$this->assertEquals( array( $t2, $t1, $t3 ), $found );
+		$this->assertSame( array( $t2, $t1, $t3 ), $found );
 	}
 
 	public function test_orderby_slug() {
@@ -223,7 +223,7 @@ class Tests_Term_WpGetObjectTerms extends WP_UnitTestCase {
 			)
 		);
 
-		$this->assertEquals( array( $t1, $t3, $t2 ), $found );
+		$this->assertSame( array( $t1, $t3, $t2 ), $found );
 	}
 
 	public function test_orderby_term_group() {
@@ -262,7 +262,7 @@ class Tests_Term_WpGetObjectTerms extends WP_UnitTestCase {
 			)
 		);
 
-		$this->assertEquals( array( $t1, $t3, $t2 ), $found );
+		$this->assertSame( array( $t1, $t3, $t2 ), $found );
 	}
 
 	public function test_orderby_term_order() {
@@ -326,7 +326,7 @@ class Tests_Term_WpGetObjectTerms extends WP_UnitTestCase {
 			)
 		);
 
-		$this->assertEquals( array( $t1, $t3, $t2 ), $found );
+		$this->assertSame( array( $t1, $t3, $t2 ), $found );
 	}
 
 	/**
@@ -371,7 +371,7 @@ class Tests_Term_WpGetObjectTerms extends WP_UnitTestCase {
 			)
 		);
 
-		$this->assertEquals( array( $t1, $t3, $t2 ), $found );
+		$this->assertSame( array( $t1, $t3, $t2 ), $found );
 	}
 
 	/**
@@ -412,7 +412,7 @@ class Tests_Term_WpGetObjectTerms extends WP_UnitTestCase {
 			)
 		);
 
-		$this->assertEquals( array( $t1, $t3, $t2 ), $found );
+		$this->assertSame( array( $t1, $t3, $t2 ), $found );
 	}
 
 	/**
@@ -458,7 +458,7 @@ class Tests_Term_WpGetObjectTerms extends WP_UnitTestCase {
 			)
 		);
 
-		$this->assertEquals( array( $t1, $t3, $t2 ), $found );
+		$this->assertSame( array( $t1, $t3, $t2 ), $found );
 	}
 
 	public function test_order_desc() {
@@ -495,7 +495,7 @@ class Tests_Term_WpGetObjectTerms extends WP_UnitTestCase {
 			)
 		);
 
-		$this->assertEquals( array( $t2, $t3, $t1 ), $found );
+		$this->assertSame( array( $t2, $t3, $t1 ), $found );
 	}
 
 	/**
@@ -546,7 +546,7 @@ class Tests_Term_WpGetObjectTerms extends WP_UnitTestCase {
 			)
 		);
 
-		$this->assertEquals( array( $t3 ), $found );
+		$this->assertSame( array( $t3 ), $found );
 	}
 
 	/**
@@ -589,7 +589,7 @@ class Tests_Term_WpGetObjectTerms extends WP_UnitTestCase {
 			)
 		);
 
-		$this->assertEqualSets( array( $t1, $t2 ), $found );
+		$this->assertSameSets( array( $t1, $t2 ), $found );
 	}
 
 	/**
@@ -743,7 +743,7 @@ class Tests_Term_WpGetObjectTerms extends WP_UnitTestCase {
 			)
 		);
 
-		$this->assertEqualSets( array( $terms[0], $terms[1] ), wp_list_pluck( $found, 'term_id' ) );
+		$this->assertSameSets( array( $terms[0], $terms[1] ), wp_list_pluck( $found, 'term_id' ) );
 	}
 
 	/**
@@ -866,7 +866,7 @@ class Tests_Term_WpGetObjectTerms extends WP_UnitTestCase {
 			)
 		);
 
-		$this->assertEqualSets( array( $t1, $t2 ), wp_list_pluck( $found, 'term_id' ) );
+		$this->assertSameSets( array( $t1, $t2 ), wp_list_pluck( $found, 'term_id' ) );
 
 		$num_queries = $wpdb->num_queries;
 		$term1       = get_term( $t1 );
@@ -892,12 +892,12 @@ class Tests_Term_WpGetObjectTerms extends WP_UnitTestCase {
 			)
 		);
 
-		$this->assertEqualSets( $posts, wp_list_pluck( $found, 'object_id' ) );
+		$this->assertSameSets( $posts, wp_list_pluck( $found, 'object_id' ) );
 	}
 
 	public function filter_get_object_terms( $terms ) {
 		$term_ids = wp_list_pluck( $terms, 'term_id' );
-		// all terms should still be objects
+		// All terms should still be objects.
 		return $terms;
 	}
 
@@ -927,7 +927,7 @@ class Tests_Term_WpGetObjectTerms extends WP_UnitTestCase {
 
 		$found = wp_get_object_terms( $p, $this->taxonomy, 'orderby=name&fields=ids' );
 
-		$this->assertEquals( array( $t1, $t3, $t2 ), $found );
+		$this->assertSame( array( $t1, $t3, $t2 ), $found );
 	}
 
 	/**
@@ -941,16 +941,16 @@ class Tests_Term_WpGetObjectTerms extends WP_UnitTestCase {
 		$terms   = array( 'foo', 'bar', 'baz' );
 		$set     = wp_set_object_terms( $post_id, $terms, $taxonomy );
 
-		// Filter for maintaining term order
+		// Filter for maintaining term order.
 		add_filter( 'wp_get_object_terms_args', array( $this, 'filter_wp_get_object_terms_args' ), 10, 3 );
 
-		// Test directly
+		// Test directly.
 		$get_object_terms = wp_get_object_terms( $post_id, $taxonomy, array( 'fields' => 'names' ) );
-		$this->assertEquals( $terms, $get_object_terms );
+		$this->assertSame( $terms, $get_object_terms );
 
-		// Test metabox taxonomy (admin advanced edit)
+		// Test metabox taxonomy (admin advanced edit).
 		$terms_to_edit = get_terms_to_edit( $post_id, $taxonomy );
-		$this->assertEquals( implode( ',', $terms ), $terms_to_edit );
+		$this->assertSame( implode( ',', $terms ), $terms_to_edit );
 	}
 
 	function filter_wp_get_object_terms_args( $args, $object_ids, $taxonomies ) {
@@ -999,6 +999,6 @@ class Tests_Term_WpGetObjectTerms extends WP_UnitTestCase {
 			)
 		);
 
-		$this->assertEqualSets( $expected, $actual );
+		$this->assertSameSets( $expected, $actual );
 	}
 }
diff --git a/tests/term/wpInsertTerm.php b/tests/term/wpInsertTerm.php
index 160bbab62e..a28d3c4065 100644
--- a/tests/term/wpInsertTerm.php
+++ b/tests/term/wpInsertTerm.php
@@ -8,8 +8,8 @@ class Tests_Term_WpInsertTerm extends WP_UnitTestCase {
 		parent::setUp();
 
 		_clean_term_filters();
-		// insert one term into every post taxonomy
-		// otherwise term_ids and term_taxonomy_ids might be identical, which could mask bugs
+		// Insert one term into every post taxonomy.
+		// Otherwise term_ids and term_taxonomy_ids might be identical, which could mask bugs.
 		$term = 'seed_term';
 		foreach ( get_object_taxonomies( 'post' ) as $tax ) {
 			wp_insert_term( $term, $tax );
@@ -20,30 +20,30 @@ class Tests_Term_WpInsertTerm extends WP_UnitTestCase {
 		$taxonomy = 'wptests_tax';
 		register_taxonomy( $taxonomy, 'post' );
 
-		// a new unused term
+		// A new unused term.
 		$term = 'term';
 		$this->assertNull( term_exists( $term ) );
 
-		$initial_count = wp_count_terms( $taxonomy );
+		$initial_count = wp_count_terms( array( 'taxonomy' => $taxonomy ) );
 
 		$t = wp_insert_term( $term, $taxonomy );
 		$this->assertInternalType( 'array', $t );
 		$this->assertNotWPError( $t );
 		$this->assertTrue( $t['term_id'] > 0 );
 		$this->assertTrue( $t['term_taxonomy_id'] > 0 );
-		$this->assertEquals( $initial_count + 1, wp_count_terms( $taxonomy ) );
+		$this->assertEquals( $initial_count + 1, wp_count_terms( array( 'taxonomy' => $taxonomy ) ) );
 
-		// make sure the term exists
+		// Make sure the term exists.
 		$this->assertTrue( term_exists( $term ) > 0 );
 		$this->assertTrue( term_exists( $t['term_id'] ) > 0 );
 
-		// now delete it
+		// Now delete it.
 		add_filter( 'delete_term', array( $this, 'deleted_term_cb' ), 10, 5 );
 		$this->assertTrue( wp_delete_term( $t['term_id'], $taxonomy ) );
 		remove_filter( 'delete_term', array( $this, 'deleted_term_cb' ), 10, 5 );
 		$this->assertNull( term_exists( $term ) );
 		$this->assertNull( term_exists( $t['term_id'] ) );
-		$this->assertEquals( $initial_count, wp_count_terms( $taxonomy ) );
+		$this->assertEquals( $initial_count, wp_count_terms( array( 'taxonomy' => $taxonomy ) ) );
 	}
 
 	public function test_wp_insert_term_taxonomy_does_not_exist() {
@@ -189,7 +189,7 @@ class Tests_Term_WpInsertTerm extends WP_UnitTestCase {
 		$this->assertNotWPError( $term );
 		$this->assertTrue( empty( $term->errors ) );
 
-		// Test existing term name with unique slug
+		// Test existing term name with unique slug.
 		$term1 = self::factory()->tag->create(
 			array(
 				'name' => 'Bozo',
@@ -198,12 +198,12 @@ class Tests_Term_WpInsertTerm extends WP_UnitTestCase {
 		);
 		$this->assertNotWPError( $term1 );
 
-		// Test an existing term name
+		// Test an existing term name.
 		$term2 = self::factory()->tag->create( array( 'name' => 'Bozo' ) );
 		$this->assertWPError( $term2 );
 		$this->assertNotEmpty( $term2->errors );
 
-		// Test named terms ending in special characters
+		// Test named terms ending in special characters.
 		$term3 = self::factory()->tag->create( array( 'name' => 'T$' ) );
 		$term4 = self::factory()->tag->create( array( 'name' => 'T$$' ) );
 		$term5 = self::factory()->tag->create( array( 'name' => 'T$$$' ) );
@@ -211,12 +211,12 @@ class Tests_Term_WpInsertTerm extends WP_UnitTestCase {
 		$term7 = self::factory()->tag->create( array( 'name' => 'T$$$$' ) );
 		$this->assertWPError( $term7 );
 		$this->assertNotEmpty( $term7->errors );
-		$this->assertEquals( $term6, $term7->error_data['term_exists'] );
+		$this->assertSame( $term6, $term7->error_data['term_exists'] );
 
 		$terms = array_map( 'get_tag', array( $term3, $term4, $term5, $term6 ) );
 		$this->assertCount( 4, array_unique( wp_list_pluck( $terms, 'slug' ) ) );
 
-		// Test named terms with only special characters
+		// Test named terms with only special characters.
 		$term8  = self::factory()->tag->create( array( 'name' => '$' ) );
 		$term9  = self::factory()->tag->create( array( 'name' => '$$' ) );
 		$term10 = self::factory()->tag->create( array( 'name' => '$$$' ) );
@@ -224,7 +224,7 @@ class Tests_Term_WpInsertTerm extends WP_UnitTestCase {
 		$term12 = self::factory()->tag->create( array( 'name' => '$$$$' ) );
 		$this->assertWPError( $term12 );
 		$this->assertNotEmpty( $term12->errors );
-		$this->assertEquals( $term11, $term12->error_data['term_exists'] );
+		$this->assertSame( $term11, $term12->error_data['term_exists'] );
 
 		$terms = array_map( 'get_tag', array( $term8, $term9, $term10, $term11 ) );
 		$this->assertCount( 4, array_unique( wp_list_pluck( $terms, 'slug' ) ) );
@@ -817,8 +817,8 @@ class Tests_Term_WpInsertTerm extends WP_UnitTestCase {
 		);
 		_unregister_taxonomy( 'wptests_tax' );
 
-		$this->assertSame( false, wp_cache_get( 'all_ids', 'wptests_tax' ) );
-		$this->assertSame( false, wp_cache_get( 'get', 'wptests_tax' ) );
+		$this->assertFalse( wp_cache_get( 'all_ids', 'wptests_tax' ) );
+		$this->assertFalse( wp_cache_get( 'get', 'wptests_tax' ) );
 
 		$cached_children = get_option( 'wptests_tax_children' );
 		$this->assertNotEmpty( $cached_children[ $t ] );
@@ -904,8 +904,8 @@ class Tests_Term_WpInsertTerm extends WP_UnitTestCase {
 		$this->assertInternalType( 'int', $term );
 		$this->assertInternalType( 'array', $object_ids );
 		// Pesky string $this->assertInternalType( 'int', $tt_id );
-		$this->assertEquals( $term, $deleted_term->term_id );
-		$this->assertEquals( $taxonomy, $deleted_term->taxonomy );
+		$this->assertSame( $term, $deleted_term->term_id );
+		$this->assertSame( $taxonomy, $deleted_term->taxonomy );
 		$this->assertEquals( $tt_id, $deleted_term->term_taxonomy_id );
 		$this->assertEmpty( $object_ids );
 	}
diff --git a/tests/term/wpSetObjectTerms.php b/tests/term/wpSetObjectTerms.php
index c49899623f..8984dc940d 100644
--- a/tests/term/wpSetObjectTerms.php
+++ b/tests/term/wpSetObjectTerms.php
@@ -18,7 +18,7 @@ class Tests_Term_WpSetObjectTerms extends WP_UnitTestCase {
 		$non_hier = rand_str( 10 );
 		$hier     = rand_str( 10 );
 
-		// Register taxonomies
+		// Register taxonomies.
 		register_taxonomy( $non_hier, array() );
 		register_taxonomy( $hier, array( 'hierarchical' => true ) );
 
@@ -112,20 +112,20 @@ class Tests_Term_WpSetObjectTerms extends WP_UnitTestCase {
 
 		foreach ( $ids as $id ) {
 			$tt = wp_set_object_terms( $id, array_values( $term_id ), $this->taxonomy );
-			// should return three term taxonomy ids
-			$this->assertEquals( 3, count( $tt ) );
+			// Should return three term taxonomy IDs.
+			$this->assertSame( 3, count( $tt ) );
 		}
 
-		// each term should be associated with every post
+		// Each term should be associated with every post.
 		foreach ( $term_id as $term => $id ) {
 			$actual = get_objects_in_term( $id, $this->taxonomy );
-			$this->assertEquals( $ids, array_map( 'intval', $actual ) );
+			$this->assertSame( $ids, array_map( 'intval', $actual ) );
 		}
 
-		// each term should have a count of 5
+		// Each term should have a count of 5.
 		foreach ( array_keys( $term_id ) as $term ) {
 			$t = get_term_by( 'name', $term, $this->taxonomy );
-			$this->assertEquals( 5, $t->count );
+			$this->assertSame( 5, $t->count );
 		}
 	}
 
@@ -140,30 +140,30 @@ class Tests_Term_WpSetObjectTerms extends WP_UnitTestCase {
 
 		foreach ( $ids as $id ) {
 			$tt = wp_set_object_terms( $id, $terms, $this->taxonomy );
-			// should return three term taxonomy ids
-			$this->assertEquals( 3, count( $tt ) );
-			// remember which term has which term_id
+			// Should return three term taxonomy IDs.
+			$this->assertSame( 3, count( $tt ) );
+			// Remember which term has which term_id.
 			for ( $i = 0; $i < 3; $i++ ) {
 				$term                    = get_term_by( 'name', $terms[ $i ], $this->taxonomy );
 				$term_id[ $terms[ $i ] ] = intval( $term->term_id );
 			}
 		}
 
-		// each term should be associated with every post
+		// Each term should be associated with every post.
 		foreach ( $term_id as $term => $id ) {
 			$actual = get_objects_in_term( $id, $this->taxonomy );
-			$this->assertEquals( $ids, array_map( 'intval', $actual ) );
+			$this->assertSame( $ids, array_map( 'intval', $actual ) );
 		}
 
-		// each term should have a count of 5
+		// Each term should have a count of 5.
 		foreach ( $terms as $term ) {
 			$t = get_term_by( 'name', $term, $this->taxonomy );
-			$this->assertEquals( 5, $t->count );
+			$this->assertSame( 5, $t->count );
 		}
 	}
 
 	function test_set_object_terms_invalid() {
-		// bogus taxonomy
+		// Bogus taxonomy.
 		$result = wp_set_object_terms( self::$post_ids[0], array( rand_str() ), rand_str() );
 		$this->assertWPError( $result );
 	}
@@ -184,11 +184,11 @@ class Tests_Term_WpSetObjectTerms extends WP_UnitTestCase {
 
 		$added1 = wp_set_object_terms( $p, array( $t1 ), 'wptests_tax' );
 		$this->assertNotEmpty( $added1 );
-		$this->assertEqualSets( array( $t1 ), wp_get_object_terms( $p, 'wptests_tax', array( 'fields' => 'ids' ) ) );
+		$this->assertSameSets( array( $t1 ), wp_get_object_terms( $p, 'wptests_tax', array( 'fields' => 'ids' ) ) );
 
 		$added2 = wp_set_object_terms( $p, array( $t2 ), 'wptests_tax', true );
 		$this->assertNotEmpty( $added2 );
-		$this->assertEqualSets( array( $t1, $t2 ), wp_get_object_terms( $p, 'wptests_tax', array( 'fields' => 'ids' ) ) );
+		$this->assertSameSets( array( $t1, $t2 ), wp_get_object_terms( $p, 'wptests_tax', array( 'fields' => 'ids' ) ) );
 
 		_unregister_taxonomy( 'wptests_tax' );
 	}
@@ -209,11 +209,11 @@ class Tests_Term_WpSetObjectTerms extends WP_UnitTestCase {
 
 		$added1 = wp_set_object_terms( $p, array( $t1 ), 'wptests_tax' );
 		$this->assertNotEmpty( $added1 );
-		$this->assertEqualSets( array( $t1 ), wp_get_object_terms( $p, 'wptests_tax', array( 'fields' => 'ids' ) ) );
+		$this->assertSameSets( array( $t1 ), wp_get_object_terms( $p, 'wptests_tax', array( 'fields' => 'ids' ) ) );
 
 		$added2 = wp_set_object_terms( $p, array( $t2 ), 'wptests_tax', false );
 		$this->assertNotEmpty( $added2 );
-		$this->assertEqualSets( array( $t2 ), wp_get_object_terms( $p, 'wptests_tax', array( 'fields' => 'ids' ) ) );
+		$this->assertSameSets( array( $t2 ), wp_get_object_terms( $p, 'wptests_tax', array( 'fields' => 'ids' ) ) );
 
 		_unregister_taxonomy( 'wptests_tax' );
 	}
@@ -234,21 +234,22 @@ class Tests_Term_WpSetObjectTerms extends WP_UnitTestCase {
 
 		$added1 = wp_set_object_terms( $p, array( $t1 ), 'wptests_tax' );
 		$this->assertNotEmpty( $added1 );
-		$this->assertEqualSets( array( $t1 ), wp_get_object_terms( $p, 'wptests_tax', array( 'fields' => 'ids' ) ) );
+		$this->assertSameSets( array( $t1 ), wp_get_object_terms( $p, 'wptests_tax', array( 'fields' => 'ids' ) ) );
 
 		$added2 = wp_set_object_terms( $p, array( $t2 ), 'wptests_tax' );
 		$this->assertNotEmpty( $added2 );
-		$this->assertEqualSets( array( $t2 ), wp_get_object_terms( $p, 'wptests_tax', array( 'fields' => 'ids' ) ) );
+		$this->assertSameSets( array( $t2 ), wp_get_object_terms( $p, 'wptests_tax', array( 'fields' => 'ids' ) ) );
 
 		_unregister_taxonomy( 'wptests_tax' );
 	}
 
+	/**
+	 * Set some terms on an object; then change them while leaving one intact.
+	 */
 	function test_change_object_terms_by_id() {
-		// set some terms on an object; then change them while leaving one intact
-
 		$post_id = self::$post_ids[0];
 
-		// first set: 3 terms
+		// First set: 3 terms.
 		$terms_1 = array();
 		for ( $i = 0; $i < 3; $i++ ) {
 			$term   = "term_{$i}";
@@ -257,7 +258,7 @@ class Tests_Term_WpSetObjectTerms extends WP_UnitTestCase {
 			$terms_1[ $i ] = $result['term_id'];
 		}
 
-		// second set: one of the original terms, plus one new term
+		// Second set: one of the original terms, plus one new term.
 		$terms_2    = array();
 		$terms_2[0] = $terms_1[1];
 
@@ -265,11 +266,11 @@ class Tests_Term_WpSetObjectTerms extends WP_UnitTestCase {
 		$result     = wp_insert_term( $term, $this->taxonomy );
 		$terms_2[1] = $result['term_id'];
 
-		// set the initial terms
+		// Set the initial terms.
 		$tt_1 = wp_set_object_terms( $post_id, $terms_1, $this->taxonomy );
-		$this->assertEquals( 3, count( $tt_1 ) );
+		$this->assertSame( 3, count( $tt_1 ) );
 
-		// make sure they're correct
+		// Make sure they're correct.
 		$terms = wp_get_object_terms(
 			$post_id,
 			$this->taxonomy,
@@ -278,13 +279,13 @@ class Tests_Term_WpSetObjectTerms extends WP_UnitTestCase {
 				'orderby' => 'term_id',
 			)
 		);
-		$this->assertEquals( $terms_1, $terms );
+		$this->assertSame( $terms_1, $terms );
 
-		// change the terms
+		// Change the terms.
 		$tt_2 = wp_set_object_terms( $post_id, $terms_2, $this->taxonomy );
-		$this->assertEquals( 2, count( $tt_2 ) );
+		$this->assertSame( 2, count( $tt_2 ) );
 
-		// make sure they're correct
+		// Make sure they're correct.
 		$terms = wp_get_object_terms(
 			$post_id,
 			$this->taxonomy,
@@ -293,26 +294,27 @@ class Tests_Term_WpSetObjectTerms extends WP_UnitTestCase {
 				'orderby' => 'term_id',
 			)
 		);
-		$this->assertEquals( $terms_2, $terms );
+		$this->assertSame( $terms_2, $terms );
 
-		// make sure the tt id for 'bar' matches
-		$this->assertEquals( $tt_1[1], $tt_2[0] );
+		// Make sure the term taxonomy ID for 'bar' matches.
+		$this->assertSame( $tt_1[1], $tt_2[0] );
 
 	}
 
+	/**
+	 * Set some terms on an object; then change them while leaving one intact.
+	 */
 	function test_change_object_terms_by_name() {
-		// set some terms on an object; then change them while leaving one intact
-
 		$post_id = self::$post_ids[0];
 
 		$terms_1 = array( 'foo', 'bar', 'baz' );
 		$terms_2 = array( 'bar', 'bing' );
 
-		// set the initial terms
+		// Set the initial terms.
 		$tt_1 = wp_set_object_terms( $post_id, $terms_1, $this->taxonomy );
-		$this->assertEquals( 3, count( $tt_1 ) );
+		$this->assertSame( 3, count( $tt_1 ) );
 
-		// make sure they're correct
+		// Make sure they're correct.
 		$terms = wp_get_object_terms(
 			$post_id,
 			$this->taxonomy,
@@ -321,13 +323,13 @@ class Tests_Term_WpSetObjectTerms extends WP_UnitTestCase {
 				'orderby' => 'term_id',
 			)
 		);
-		$this->assertEquals( $terms_1, $terms );
+		$this->assertSame( $terms_1, $terms );
 
-		// change the terms
+		// Change the terms.
 		$tt_2 = wp_set_object_terms( $post_id, $terms_2, $this->taxonomy );
-		$this->assertEquals( 2, count( $tt_2 ) );
+		$this->assertSame( 2, count( $tt_2 ) );
 
-		// make sure they're correct
+		// Make sure they're correct.
 		$terms = wp_get_object_terms(
 			$post_id,
 			$this->taxonomy,
@@ -336,9 +338,9 @@ class Tests_Term_WpSetObjectTerms extends WP_UnitTestCase {
 				'orderby' => 'term_id',
 			)
 		);
-		$this->assertEquals( $terms_2, $terms );
+		$this->assertSame( $terms_2, $terms );
 
-		// make sure the tt id for 'bar' matches
+		// Make sure the term taxonomy ID for 'bar' matches.
 		$this->assertEquals( $tt_1[1], $tt_2[0] );
 
 	}
diff --git a/tests/term/wpUniqueTermSlug.php b/tests/term/wpUniqueTermSlug.php
index 75501edab6..c2efa334a1 100644
--- a/tests/term/wpUniqueTermSlug.php
+++ b/tests/term/wpUniqueTermSlug.php
@@ -20,7 +20,7 @@ class Tests_Term_WpUniqueTermSlug extends WP_UnitTestCase {
 		);
 
 		$actual = wp_unique_term_slug( 'bar', $term );
-		$this->assertEquals( 'bar', $actual );
+		$this->assertSame( 'bar', $actual );
 	}
 
 	public function test_nonunique_slug_in_different_taxonomy_should_be_unchanged() {
@@ -42,7 +42,7 @@ class Tests_Term_WpUniqueTermSlug extends WP_UnitTestCase {
 		$term2_object = get_term( $term2, 'wptests_tax1' );
 
 		$actual = wp_unique_term_slug( 'bar', $term2_object );
-		$this->assertEquals( 'bar', $actual );
+		$this->assertSame( 'bar', $actual );
 	}
 
 	public function test_nonunique_slug_in_same_nonhierarchical_taxonomy_should_be_changed() {
@@ -64,7 +64,7 @@ class Tests_Term_WpUniqueTermSlug extends WP_UnitTestCase {
 		$term2_object = get_term( $term2, 'wptests_tax1' );
 
 		$actual = wp_unique_term_slug( 'bar', $term2_object );
-		$this->assertEquals( 'bar-2', $actual );
+		$this->assertSame( 'bar-2', $actual );
 	}
 
 	public function test_nonunique_slug_in_same_hierarchical_taxonomy_with_same_parent_should_be_suffixed_with_parent_slug() {
@@ -95,7 +95,7 @@ class Tests_Term_WpUniqueTermSlug extends WP_UnitTestCase {
 		$term2_object = get_term( $term2, 'wptests_tax2' );
 
 		$actual = wp_unique_term_slug( 'bar', $term2_object );
-		$this->assertEquals( 'bar-parent-term', $actual );
+		$this->assertSame( 'bar-parent-term', $actual );
 	}
 
 	public function test_nonunique_slug_in_same_hierarchical_taxonomy_at_different_level_of_hierarchy_should_be_suffixed_with_number() {
@@ -125,7 +125,7 @@ class Tests_Term_WpUniqueTermSlug extends WP_UnitTestCase {
 		$term2_object = get_term( $term2, 'wptests_tax2' );
 
 		$actual = wp_unique_term_slug( 'bar', $term2_object );
-		$this->assertEquals( 'bar-2', $actual );
+		$this->assertSame( 'bar-2', $actual );
 	}
 
 	/**
diff --git a/tests/term/wpUpdateTerm.php b/tests/term/wpUpdateTerm.php
index 5de6d83c59..2f4b23120d 100644
--- a/tests/term/wpUpdateTerm.php
+++ b/tests/term/wpUpdateTerm.php
@@ -115,7 +115,7 @@ class Tests_Term_WpUpdateTerm extends WP_UnitTestCase {
 		$this->assertSame( 'missing_parent', $found->get_error_code() );
 
 		$term = get_term( $t, 'wptests_tax' );
-		$this->assertEquals( 0, $term->parent );
+		$this->assertSame( 0, $term->parent );
 		_unregister_taxonomy( 'wptests_tax' );
 	}
 
@@ -680,8 +680,8 @@ class Tests_Term_WpUpdateTerm extends WP_UnitTestCase {
 		);
 		_unregister_taxonomy( 'wptests_tax' );
 
-		$this->assertSame( false, wp_cache_get( 'all_ids', 'wptests_tax' ) );
-		$this->assertSame( false, wp_cache_get( 'get', 'wptests_tax' ) );
+		$this->assertFalse( wp_cache_get( 'all_ids', 'wptests_tax' ) );
+		$this->assertFalse( wp_cache_get( 'get', 'wptests_tax' ) );
 
 		$cached_children = get_option( 'wptests_tax_children' );
 		$this->assertNotEmpty( $cached_children[ $t2 ] );
diff --git a/tests/theme.php b/tests/theme.php
index 2f114d43e2..50bb911cee 100644
--- a/tests/theme.php
+++ b/tests/theme.php
@@ -49,10 +49,10 @@ class Tests_Theme extends WP_UnitTestCase {
 	function test_wp_get_themes_default() {
 		$themes = wp_get_themes();
 		$this->assertInstanceOf( 'WP_Theme', $themes[ $this->theme_slug ] );
-		$this->assertEquals( $this->theme_name, $themes[ $this->theme_slug ]->get( 'Name' ) );
+		$this->assertSame( $this->theme_name, $themes[ $this->theme_slug ]->get( 'Name' ) );
 
 		$single_theme = wp_get_theme( $this->theme_slug );
-		$this->assertEquals( $single_theme->get( 'Name' ), $themes[ $this->theme_slug ]->get( 'Name' ) );
+		$this->assertSame( $single_theme->get( 'Name' ), $themes[ $this->theme_slug ]->get( 'Name' ) );
 		$this->assertEquals( $themes[ $this->theme_slug ], $single_theme );
 	}
 
@@ -63,11 +63,11 @@ class Tests_Theme extends WP_UnitTestCase {
 	function test_get_themes_default() {
 		$themes = get_themes();
 		$this->assertInstanceOf( 'WP_Theme', $themes[ $this->theme_name ] );
-		$this->assertEquals( $themes[ $this->theme_name ], get_theme( $this->theme_name ) );
+		$this->assertSame( $themes[ $this->theme_name ], get_theme( $this->theme_name ) );
 
-		$this->assertEquals( $this->theme_name, $themes[ $this->theme_name ]['Name'] );
-		$this->assertEquals( $this->theme_name, $themes[ $this->theme_name ]->Name );
-		$this->assertEquals( $this->theme_name, $themes[ $this->theme_name ]->name );
+		$this->assertSame( $this->theme_name, $themes[ $this->theme_name ]['Name'] );
+		$this->assertSame( $this->theme_name, $themes[ $this->theme_name ]->Name );
+		$this->assertSame( $this->theme_name, $themes[ $this->theme_name ]->name );
 	}
 
 	/**
@@ -81,7 +81,7 @@ class Tests_Theme extends WP_UnitTestCase {
 			// WP_Theme implements ArrayAccess. Even ArrayObject returns false for is_array().
 			$this->assertFalse( is_array( $theme ) );
 			$this->assertInstanceOf( 'WP_Theme', $theme );
-			$this->assertEquals( $theme, $themes[ $name ] );
+			$this->assertSame( $theme, $themes[ $name ] );
 		}
 	}
 
@@ -91,8 +91,8 @@ class Tests_Theme extends WP_UnitTestCase {
 			$this->assertInstanceOf( 'WP_Theme', $theme );
 			$this->assertFalse( $theme->errors() );
 			$_theme = wp_get_theme( $theme->get_stylesheet() );
-			// This primes internal WP_Theme caches for the next assertion (headers_sanitized, textdomain_loaded)
-			$this->assertEquals( $theme->get( 'Name' ), $_theme->get( 'Name' ) );
+			// This primes internal WP_Theme caches for the next assertion (headers_sanitized, textdomain_loaded).
+			$this->assertSame( $theme->get( 'Name' ), $_theme->get( 'Name' ) );
 			$this->assertEquals( $theme, $_theme );
 		}
 	}
@@ -102,17 +102,17 @@ class Tests_Theme extends WP_UnitTestCase {
 	 */
 	function test_get_themes_contents() {
 		$themes = get_themes();
-		// Generic tests that should hold true for any theme
+		// Generic tests that should hold true for any theme.
 		foreach ( $themes as $k => $theme ) {
 			// Don't run these checks for custom themes.
 			if ( empty( $theme['Author'] ) || false === strpos( $theme['Author'], 'WordPress' ) ) {
 				continue;
 			}
 
-			$this->assertEquals( $theme['Name'], $k );
+			$this->assertSame( $theme['Name'], $k );
 			$this->assertNotEmpty( $theme['Title'] );
 
-			// important attributes should all be set
+			// Important attributes should all be set.
 			$default_headers = array(
 				'Title'          => 'Theme Title',
 				'Version'        => 'Version',
@@ -125,7 +125,7 @@ class Tests_Theme extends WP_UnitTestCase {
 				'Description'    => 'Description',
 				'Author'         => 'Author',
 				'Tags'           => 'Tags',
-				// Introduced in WordPress 2.9
+				// Introduced in WordPress 2.9.
 				'Theme Root'     => 'Theme Root',
 				'Theme Root URI' => 'Theme Root URI',
 			);
@@ -133,17 +133,17 @@ class Tests_Theme extends WP_UnitTestCase {
 				$this->assertTrue( isset( $theme[ $name ] ) );
 			}
 
-			// Make the tests work both for WordPress 2.8.5 and WordPress 2.9-rare
+			// Make the tests work both for WordPress 2.8.5 and WordPress 2.9-rare.
 			$dir = isset( $theme['Theme Root'] ) ? '' : WP_CONTENT_DIR;
 
-			// important attributes should all not be empty as well
+			// Important attributes should all not be empty as well.
 			$this->assertNotEmpty( $theme['Description'] );
 			$this->assertNotEmpty( $theme['Author'] );
 			$this->assertTrue( version_compare( $theme['Version'], 0 ) > 0 );
 			$this->assertNotEmpty( $theme['Template'] );
 			$this->assertNotEmpty( $theme['Stylesheet'] );
 
-			// template files should all exist
+			// Template files should all exist.
 			$this->assertTrue( is_array( $theme['Template Files'] ) );
 			$this->assertTrue( count( $theme['Template Files'] ) > 0 );
 			foreach ( $theme['Template Files'] as $file ) {
@@ -151,7 +151,7 @@ class Tests_Theme extends WP_UnitTestCase {
 				$this->assertTrue( is_readable( $dir . $file ) );
 			}
 
-			// css files should all exist
+			// CSS files should all exist.
 			$this->assertTrue( is_array( $theme['Stylesheet Files'] ) );
 			$this->assertTrue( count( $theme['Stylesheet Files'] ) > 0 );
 			foreach ( $theme['Stylesheet Files'] as $file ) {
@@ -162,7 +162,7 @@ class Tests_Theme extends WP_UnitTestCase {
 			$this->assertTrue( is_dir( $dir . $theme['Template Dir'] ) );
 			$this->assertTrue( is_dir( $dir . $theme['Stylesheet Dir'] ) );
 
-			$this->assertEquals( 'publish', $theme['Status'] );
+			$this->assertSame( 'publish', $theme['Status'] );
 
 			$this->assertTrue( is_file( $dir . $theme['Stylesheet Dir'] . '/' . $theme['Screenshot'] ) );
 			$this->assertTrue( is_readable( $dir . $theme['Stylesheet Dir'] . '/' . $theme['Screenshot'] ) );
@@ -172,21 +172,21 @@ class Tests_Theme extends WP_UnitTestCase {
 	function test_wp_get_theme_contents() {
 		$theme = wp_get_theme( $this->theme_slug );
 
-		$this->assertEquals( $this->theme_name, $theme->get( 'Name' ) );
+		$this->assertSame( $this->theme_name, $theme->get( 'Name' ) );
 		$this->assertNotEmpty( $theme->get( 'Description' ) );
 		$this->assertNotEmpty( $theme->get( 'Author' ) );
 		$this->assertNotEmpty( $theme->get( 'Version' ) );
 		$this->assertNotEmpty( $theme->get( 'AuthorURI' ) );
 		$this->assertNotEmpty( $theme->get( 'ThemeURI' ) );
-		$this->assertEquals( $this->theme_slug, $theme->get_stylesheet() );
-		$this->assertEquals( $this->theme_slug, $theme->get_template() );
+		$this->assertSame( $this->theme_slug, $theme->get_stylesheet() );
+		$this->assertSame( $this->theme_slug, $theme->get_template() );
 
-		$this->assertEquals( 'publish', $theme->get( 'Status' ) );
+		$this->assertSame( 'publish', $theme->get( 'Status' ) );
 
-		$this->assertEquals( WP_CONTENT_DIR . '/themes/' . $this->theme_slug, $theme->get_stylesheet_directory(), 'get_stylesheet_directory' );
-		$this->assertEquals( WP_CONTENT_DIR . '/themes/' . $this->theme_slug, $theme->get_template_directory(), 'get_template_directory' );
-		$this->assertEquals( content_url( 'themes/' . $this->theme_slug ), $theme->get_stylesheet_directory_uri(), 'get_stylesheet_directory_uri' );
-		$this->assertEquals( content_url( 'themes/' . $this->theme_slug ), $theme->get_template_directory_uri(), 'get_template_directory_uri' );
+		$this->assertSame( WP_CONTENT_DIR . '/themes/' . $this->theme_slug, $theme->get_stylesheet_directory(), 'get_stylesheet_directory' );
+		$this->assertSame( WP_CONTENT_DIR . '/themes/' . $this->theme_slug, $theme->get_template_directory(), 'get_template_directory' );
+		$this->assertSame( content_url( 'themes/' . $this->theme_slug ), $theme->get_stylesheet_directory_uri(), 'get_stylesheet_directory_uri' );
+		$this->assertSame( content_url( 'themes/' . $this->theme_slug ), $theme->get_template_directory_uri(), 'get_template_directory_uri' );
 	}
 
 	/**
@@ -205,7 +205,34 @@ class Tests_Theme extends WP_UnitTestCase {
 	function test_default_themes_have_textdomain() {
 		foreach ( $this->default_themes as $theme ) {
 			if ( wp_get_theme( $theme )->exists() ) {
-				$this->assertEquals( $theme, wp_get_theme( $theme )->get( 'TextDomain' ) );
+				$this->assertSame( $theme, wp_get_theme( $theme )->get( 'TextDomain' ) );
+			}
+		}
+	}
+
+	/**
+	 * @ticket 48566
+	 */
+	function test_year_in_readme() {
+		// This test is designed to only run on trunk/master.
+		$this->skipOnAutomatedBranches();
+
+		foreach ( $this->default_themes as $theme ) {
+			$wp_theme = wp_get_theme( $theme );
+
+			$path_to_readme_txt = $wp_theme->get_theme_root() . '/' . $wp_theme->get_stylesheet() . '/readme.txt';
+			$this->assertFileExists( $path_to_readme_txt );
+			$readme    = file_get_contents( $path_to_readme_txt );
+			$this_year = gmdate( 'Y' );
+
+			preg_match( '#Copyright (\d+) WordPress.org#', $readme, $matches );
+			if ( $matches ) {
+				$this->assertSame( $this_year, trim( $matches[1] ), "Bundled themes readme.txt's year needs to be updated to $this_year." );
+			}
+
+			preg_match( '#Copyright 20\d\d-(\d+) WordPress.org#', $readme, $matches );
+			if ( $matches ) {
+				$this->assertSame( $this_year, trim( $matches[1] ), "Bundled themes readme.txt's year needs to be updated to $this_year." );
 			}
 		}
 	}
@@ -243,18 +270,18 @@ class Tests_Theme extends WP_UnitTestCase {
 
 		for ( $i = 0; $i < 3; $i++ ) {
 			foreach ( $themes as $name => $theme ) {
-				// switch to this theme
+				// Switch to this theme.
 				if ( 2 === $i ) {
 					switch_theme( $theme['Template'], $theme['Stylesheet'] );
 				} else {
 					switch_theme( $theme['Stylesheet'] );
 				}
 
-				$this->assertEquals( $name, get_current_theme() );
+				$this->assertSame( $name, get_current_theme() );
 
-				// make sure the various get_* functions return the correct values
-				$this->assertEquals( $theme['Template'], get_template() );
-				$this->assertEquals( $theme['Stylesheet'], get_stylesheet() );
+				// Make sure the various get_* functions return the correct values.
+				$this->assertSame( $theme['Template'], get_template() );
+				$this->assertSame( $theme['Stylesheet'], get_stylesheet() );
 
 				$root_fs = get_theme_root();
 				$this->assertTrue( is_dir( $root_fs ) );
@@ -262,68 +289,70 @@ class Tests_Theme extends WP_UnitTestCase {
 				$root_uri = get_theme_root_uri();
 				$this->assertTrue( ! empty( $root_uri ) );
 
-				$this->assertEquals( $root_fs . '/' . get_stylesheet(), get_stylesheet_directory() );
-				$this->assertEquals( $root_uri . '/' . get_stylesheet(), get_stylesheet_directory_uri() );
-				$this->assertEquals( $root_uri . '/' . get_stylesheet() . '/style.css', get_stylesheet_uri() );
-				#               $this->assertEquals($root_uri . '/' . get_stylesheet(), get_locale_stylesheet_uri());
-
-				$this->assertEquals( $root_fs . '/' . get_template(), get_template_directory() );
-				$this->assertEquals( $root_uri . '/' . get_template(), get_template_directory_uri() );
-
-				//get_query_template
-
-				// template file that doesn't exist
-				$this->assertEquals( '', get_query_template( rand_str() ) );
-
-				// template files that do exist
-				//foreach ($theme['Template Files'] as $path) {
-				//$file = basename($path, '.php');
-				// FIXME: untestable because get_query_template uses TEMPLATEPATH
-				//$this->assertEquals('', get_query_template($file));
-				//}
-
-				// these are kind of tautologies but at least exercise the code
-				$this->assertEquals( get_404_template(), get_query_template( '404' ) );
-				$this->assertEquals( get_archive_template(), get_query_template( 'archive' ) );
-				$this->assertEquals( get_author_template(), get_query_template( 'author' ) );
-				$this->assertEquals( get_category_template(), get_query_template( 'category' ) );
-				$this->assertEquals( get_date_template(), get_query_template( 'date' ) );
-				$this->assertEquals( get_home_template(), get_query_template( 'home', array( 'home.php', 'index.php' ) ) );
-				$this->assertEquals( get_privacy_policy_template(), get_query_template( 'privacy_policy', array( 'privacy-policy.php' ) ) );
-				$this->assertEquals( get_page_template(), get_query_template( 'page' ) );
-				$this->assertEquals( get_search_template(), get_query_template( 'search' ) );
-				$this->assertEquals( get_single_template(), get_query_template( 'single' ) );
-				$this->assertEquals( get_attachment_template(), get_query_template( 'attachment' ) );
-
-				$this->assertEquals( get_tag_template(), get_query_template( 'tag' ) );
-
-				// nb: this probably doesn't run because WP_INSTALLING is defined
+				$this->assertSame( $root_fs . '/' . get_stylesheet(), get_stylesheet_directory() );
+				$this->assertSame( $root_uri . '/' . get_stylesheet(), get_stylesheet_directory_uri() );
+				$this->assertSame( $root_uri . '/' . get_stylesheet() . '/style.css', get_stylesheet_uri() );
+				// $this->assertSame( $root_uri . '/' . get_stylesheet(), get_locale_stylesheet_uri() );
+
+				$this->assertSame( $root_fs . '/' . get_template(), get_template_directory() );
+				$this->assertSame( $root_uri . '/' . get_template(), get_template_directory_uri() );
+
+				// get_query_template()
+
+				// Template file that doesn't exist.
+				$this->assertSame( '', get_query_template( rand_str() ) );
+
+				// Template files that do exist.
+				/*
+				foreach ( $theme['Template Files'] as $path ) {
+					$file = basename($path, '.php');
+					FIXME: untestable because get_query_template() uses TEMPLATEPATH.
+					$this->assertSame('', get_query_template($file));
+				}
+				*/
+
+				// These are kind of tautologies but at least exercise the code.
+				$this->assertSame( get_404_template(), get_query_template( '404' ) );
+				$this->assertSame( get_archive_template(), get_query_template( 'archive' ) );
+				$this->assertSame( get_author_template(), get_query_template( 'author' ) );
+				$this->assertSame( get_category_template(), get_query_template( 'category' ) );
+				$this->assertSame( get_date_template(), get_query_template( 'date' ) );
+				$this->assertSame( get_home_template(), get_query_template( 'home', array( 'home.php', 'index.php' ) ) );
+				$this->assertSame( get_privacy_policy_template(), get_query_template( 'privacy_policy', array( 'privacy-policy.php' ) ) );
+				$this->assertSame( get_page_template(), get_query_template( 'page' ) );
+				$this->assertSame( get_search_template(), get_query_template( 'search' ) );
+				$this->assertSame( get_single_template(), get_query_template( 'single' ) );
+				$this->assertSame( get_attachment_template(), get_query_template( 'attachment' ) );
+
+				$this->assertSame( get_tag_template(), get_query_template( 'tag' ) );
+
+				// nb: This probably doesn't run because WP_INSTALLING is defined.
 				$this->assertTrue( validate_current_theme() );
 			}
 		}
 	}
 
 	function test_switch_theme_bogus() {
-		// try switching to a theme that doesn't exist
+		// Try switching to a theme that doesn't exist.
 		$template = rand_str();
 		$style    = rand_str();
 		update_option( 'template', $template );
 		update_option( 'stylesheet', $style );
 
 		$theme = wp_get_theme();
-		$this->assertEquals( $style, (string) $theme );
+		$this->assertSame( $style, (string) $theme );
 		$this->assertNotFalse( $theme->errors() );
 		$this->assertFalse( $theme->exists() );
 
-		// these return the bogus name - perhaps not ideal behaviour?
-		$this->assertEquals( $template, get_template() );
-		$this->assertEquals( $style, get_stylesheet() );
+		// These return the bogus name - perhaps not ideal behaviour?
+		$this->assertSame( $template, get_template() );
+		$this->assertSame( $style, get_stylesheet() );
 	}
 
 	/**
 	 * Test _wp_keep_alive_customize_changeset_dependent_auto_drafts.
 	 *
-	 * @covers ::_wp_keep_alive_customize_changeset_dependent_auto_drafts()
+	 * @covers ::_wp_keep_alive_customize_changeset_dependent_auto_drafts
 	 */
 	function test_wp_keep_alive_customize_changeset_dependent_auto_drafts() {
 		$nav_created_post_ids = $this->factory()->post->create_many(
@@ -343,16 +372,17 @@ class Tests_Theme extends WP_UnitTestCase {
 		$wp_customize = new WP_Customize_Manager();
 		do_action( 'customize_register', $wp_customize );
 
-		// The post_date for auto-drafts is bumped to match the changeset post_date whenever it is modified to keep them from from being garbage collected by wp_delete_auto_drafts().
+		// The post_date for auto-drafts is bumped to match the changeset post_date whenever it is modified
+		// to keep them from from being garbage collected by wp_delete_auto_drafts().
 		$wp_customize->save_changeset_post(
 			array(
 				'data' => $data,
 			)
 		);
-		$this->assertEquals( get_post( $wp_customize->changeset_post_id() )->post_date, get_post( $nav_created_post_ids[0] )->post_date );
-		$this->assertEquals( get_post( $wp_customize->changeset_post_id() )->post_date, get_post( $nav_created_post_ids[1] )->post_date );
-		$this->assertEquals( 'auto-draft', get_post_status( $nav_created_post_ids[0] ) );
-		$this->assertEquals( 'auto-draft', get_post_status( $nav_created_post_ids[1] ) );
+		$this->assertSame( get_post( $wp_customize->changeset_post_id() )->post_date, get_post( $nav_created_post_ids[0] )->post_date );
+		$this->assertSame( get_post( $wp_customize->changeset_post_id() )->post_date, get_post( $nav_created_post_ids[1] )->post_date );
+		$this->assertSame( 'auto-draft', get_post_status( $nav_created_post_ids[0] ) );
+		$this->assertSame( 'auto-draft', get_post_status( $nav_created_post_ids[1] ) );
 
 		// Stubs transition to drafts when changeset is saved as a draft.
 		$wp_customize->save_changeset_post(
@@ -361,8 +391,8 @@ class Tests_Theme extends WP_UnitTestCase {
 				'data'   => $data,
 			)
 		);
-		$this->assertEquals( 'draft', get_post_status( $nav_created_post_ids[0] ) );
-		$this->assertEquals( 'draft', get_post_status( $nav_created_post_ids[1] ) );
+		$this->assertSame( 'draft', get_post_status( $nav_created_post_ids[0] ) );
+		$this->assertSame( 'draft', get_post_status( $nav_created_post_ids[1] ) );
 
 		// Status remains unchanged for stub that the user broke out of the changeset.
 		wp_update_post(
@@ -377,12 +407,298 @@ class Tests_Theme extends WP_UnitTestCase {
 				'data'   => $data,
 			)
 		);
-		$this->assertEquals( 'draft', get_post_status( $nav_created_post_ids[0] ) );
-		$this->assertEquals( 'private', get_post_status( $nav_created_post_ids[1] ) );
+		$this->assertSame( 'draft', get_post_status( $nav_created_post_ids[0] ) );
+		$this->assertSame( 'private', get_post_status( $nav_created_post_ids[1] ) );
 
 		// Draft stub is trashed when the changeset is trashed.
 		$wp_customize->trash_changeset_post( $wp_customize->changeset_post_id() );
-		$this->assertEquals( 'trash', get_post_status( $nav_created_post_ids[0] ) );
-		$this->assertEquals( 'private', get_post_status( $nav_created_post_ids[1] ) );
+		$this->assertSame( 'trash', get_post_status( $nav_created_post_ids[0] ) );
+		$this->assertSame( 'private', get_post_status( $nav_created_post_ids[1] ) );
+	}
+
+	/**
+	 * @ticket 49406
+	 */
+	public function test_register_theme_support_defaults() {
+		$registered = register_theme_feature( 'test-feature' );
+		$this->assertTrue( $registered );
+
+		$expected = array(
+			'type'         => 'boolean',
+			'variadic'     => false,
+			'description'  => '',
+			'show_in_rest' => false,
+		);
+		$this->assertSameSets( $expected, get_registered_theme_feature( 'test-feature' ) );
+	}
+
+	/**
+	 * @ticket 49406
+	 */
+	public function test_register_theme_support_explicit() {
+		$args = array(
+			'type'         => 'array',
+			'variadic'     => true,
+			'description'  => 'My Feature',
+			'show_in_rest' => array(
+				'schema' => array(
+					'items' => array(
+						'type' => 'string',
+					),
+				),
+			),
+		);
+
+		register_theme_feature( 'test-feature', $args );
+		$actual = get_registered_theme_feature( 'test-feature' );
+
+		$this->assertSame( 'array', $actual['type'] );
+		$this->assertTrue( $actual['variadic'] );
+		$this->assertSame( 'My Feature', $actual['description'] );
+		$this->assertSame( array( 'type' => 'string' ), $actual['show_in_rest']['schema']['items'] );
+	}
+
+	/**
+	 * @ticket 49406
+	 */
+	public function test_register_theme_support_upgrades_show_in_rest() {
+		register_theme_feature( 'test-feature', array( 'show_in_rest' => true ) );
+
+		$expected = array(
+			'schema'           => array(
+				'description' => '',
+				'type'        => 'boolean',
+				'default'     => false,
+			),
+			'name'             => 'test-feature',
+			'prepare_callback' => null,
+		);
+		$actual   = get_registered_theme_feature( 'test-feature' )['show_in_rest'];
+
+		$this->assertSameSets( $expected, $actual );
+	}
+
+	/**
+	 * @ticket 49406
+	 */
+	public function test_register_theme_support_fills_schema() {
+		register_theme_feature(
+			'test-feature',
+			array(
+				'type'         => 'array',
+				'description'  => 'Cool Feature',
+				'show_in_rest' => array(
+					'schema' => array(
+						'items'    => array(
+							'type' => 'string',
+						),
+						'minItems' => 1,
+					),
+				),
+			)
+		);
+
+		$expected = array(
+			'description' => 'Cool Feature',
+			'type'        => array( 'boolean', 'array' ),
+			'items'       => array(
+				'type' => 'string',
+			),
+			'minItems'    => 1,
+			'default'     => false,
+		);
+		$actual   = get_registered_theme_feature( 'test-feature' )['show_in_rest']['schema'];
+
+		$this->assertSameSets( $expected, $actual );
+	}
+
+	/**
+	 * @ticket 49406
+	 */
+	public function test_register_theme_support_does_not_add_boolean_type_if_non_bool_default() {
+		register_theme_feature(
+			'test-feature',
+			array(
+				'type'         => 'array',
+				'show_in_rest' => array(
+					'schema' => array(
+						'items'   => array(
+							'type' => 'string',
+						),
+						'default' => array( 'standard' ),
+					),
+				),
+			)
+		);
+
+		$actual = get_registered_theme_feature( 'test-feature' )['show_in_rest']['schema']['type'];
+		$this->assertSame( 'array', $actual );
+	}
+
+	/**
+	 * @ticket 49406
+	 */
+	public function test_register_theme_support_defaults_additional_properties_to_false() {
+		register_theme_feature(
+			'test-feature',
+			array(
+				'type'         => 'object',
+				'description'  => 'Cool Feature',
+				'show_in_rest' => array(
+					'schema' => array(
+						'properties' => array(
+							'a' => array(
+								'type' => 'string',
+							),
+						),
+					),
+				),
+			)
+		);
+
+		$actual = get_registered_theme_feature( 'test-feature' )['show_in_rest']['schema'];
+
+		$this->assertArrayHasKey( 'additionalProperties', $actual );
+		$this->assertFalse( $actual['additionalProperties'] );
+	}
+
+	/**
+	 * @ticket 49406
+	 */
+	public function test_register_theme_support_with_additional_properties() {
+		register_theme_feature(
+			'test-feature',
+			array(
+				'type'         => 'object',
+				'description'  => 'Cool Feature',
+				'show_in_rest' => array(
+					'schema' => array(
+						'properties'           => array(),
+						'additionalProperties' => array(
+							'type' => 'string',
+						),
+					),
+				),
+			)
+		);
+
+		$expected = array(
+			'type' => 'string',
+		);
+		$actual   = get_registered_theme_feature( 'test-feature' )['show_in_rest']['schema']['additionalProperties'];
+
+		$this->assertSameSets( $expected, $actual );
+	}
+
+	/**
+	 * @ticket 49406
+	 */
+	public function test_register_theme_support_defaults_additional_properties_to_false_in_array() {
+		register_theme_feature(
+			'test-feature',
+			array(
+				'type'         => 'array',
+				'description'  => 'Cool Feature',
+				'show_in_rest' => array(
+					'schema' => array(
+						'items' => array(
+							'type'       => 'object',
+							'properties' => array(
+								'a' => array(
+									'type' => 'string',
+								),
+							),
+						),
+					),
+				),
+			)
+		);
+
+		$actual = get_registered_theme_feature( 'test-feature' )['show_in_rest']['schema']['items'];
+
+		$this->assertArrayHasKey( 'additionalProperties', $actual );
+		$this->assertFalse( $actual['additionalProperties'] );
+	}
+
+	/**
+	 * @ticket 49406
+	 *
+	 * @dataProvider _dp_register_theme_support_validation
+	 *
+	 * @param string $error_code The error code expected.
+	 * @param array  $args       The args to register.
+	 */
+	public function test_register_theme_support_validation( $error_code, $args ) {
+		$registered = register_theme_feature( 'test-feature', $args );
+
+		$this->assertWPError( $registered );
+		$this->assertSame( $error_code, $registered->get_error_code() );
+	}
+
+	public function _dp_register_theme_support_validation() {
+		return array(
+			array(
+				'invalid_type',
+				array(
+					'type' => 'float',
+				),
+			),
+			array(
+				'invalid_type',
+				array(
+					'type' => array( 'string' ),
+				),
+			),
+			array(
+				'variadic_must_be_array',
+				array(
+					'variadic' => true,
+				),
+			),
+			array(
+				'missing_schema',
+				array(
+					'type'         => 'object',
+					'show_in_rest' => true,
+				),
+			),
+			array(
+				'missing_schema',
+				array(
+					'type'         => 'array',
+					'show_in_rest' => true,
+				),
+			),
+			array(
+				'missing_schema_items',
+				array(
+					'type'         => 'array',
+					'show_in_rest' => array(
+						'schema' => array(
+							'type' => 'array',
+						),
+					),
+				),
+			),
+			array(
+				'missing_schema_properties',
+				array(
+					'type'         => 'object',
+					'show_in_rest' => array(
+						'schema' => array(
+							'type' => 'object',
+						),
+					),
+				),
+			),
+			array(
+				'invalid_rest_prepare_callback',
+				array(
+					'show_in_rest' => array(
+						'prepare_callback' => 'this is not a valid function',
+					),
+				),
+			),
+		);
 	}
 }
diff --git a/tests/theme/WPTheme.php b/tests/theme/WPTheme.php
index 1761e1d721..28edec92ed 100644
--- a/tests/theme/WPTheme.php
+++ b/tests/theme/WPTheme.php
@@ -13,7 +13,7 @@ class Tests_Theme_WPTheme extends WP_UnitTestCase {
 		add_filter( 'theme_root', array( $this, '_theme_root' ) );
 		add_filter( 'stylesheet_root', array( $this, '_theme_root' ) );
 		add_filter( 'template_root', array( $this, '_theme_root' ) );
-		// clear caches
+		// Clear caches.
 		wp_clean_themes_cache();
 		unset( $GLOBALS['wp_themes'] );
 	}
@@ -28,69 +28,69 @@ class Tests_Theme_WPTheme extends WP_UnitTestCase {
 		parent::tearDown();
 	}
 
-	// replace the normal theme root dir with our premade test dir
+	// Replace the normal theme root directory with our premade test directory.
 	function _theme_root( $dir ) {
 		return $this->theme_root;
 	}
 	function test_new_WP_Theme_top_level() {
 		$theme = new WP_Theme( 'theme1', $this->theme_root );
 
-		//Meta
-		$this->assertEquals( 'My Theme', $theme->get( 'Name' ) );
-		$this->assertEquals( 'http://example.org/', $theme->get( 'ThemeURI' ) );
-		$this->assertEquals( 'An example theme', $theme->get( 'Description' ) );
-		$this->assertEquals( 'Minnie Bannister', $theme->get( 'Author' ) );
-		$this->assertEquals( 'http://example.com/', $theme->get( 'AuthorURI' ) );
-		$this->assertEquals( '1.3', $theme->get( 'Version' ) );
-		$this->assertEquals( '', $theme->get( 'Template' ) );
-		$this->assertEquals( 'publish', $theme->get( 'Status' ) );
-		$this->assertEquals( array(), $theme->get( 'Tags' ) );
-
-		//Important
-		$this->assertEquals( 'theme1', $theme->get_stylesheet() );
-		$this->assertEquals( 'theme1', $theme->get_template() );
+		// Meta.
+		$this->assertSame( 'My Theme', $theme->get( 'Name' ) );
+		$this->assertSame( 'http://example.org/', $theme->get( 'ThemeURI' ) );
+		$this->assertSame( 'An example theme', $theme->get( 'Description' ) );
+		$this->assertSame( 'Minnie Bannister', $theme->get( 'Author' ) );
+		$this->assertSame( 'http://example.com/', $theme->get( 'AuthorURI' ) );
+		$this->assertSame( '1.3', $theme->get( 'Version' ) );
+		$this->assertSame( '', $theme->get( 'Template' ) );
+		$this->assertSame( 'publish', $theme->get( 'Status' ) );
+		$this->assertSame( array(), $theme->get( 'Tags' ) );
+
+		// Important.
+		$this->assertSame( 'theme1', $theme->get_stylesheet() );
+		$this->assertSame( 'theme1', $theme->get_template() );
 	}
 
 	function test_new_WP_Theme_subdir() {
 		$theme = new WP_Theme( 'subdir/theme2', $this->theme_root );
 
-		//Meta
-		$this->assertEquals( 'My Subdir Theme', $theme->get( 'Name' ) );
-		$this->assertEquals( 'http://example.org/', $theme->get( 'ThemeURI' ) );
-		$this->assertEquals( 'An example theme in a sub directory', $theme->get( 'Description' ) );
-		$this->assertEquals( 'Mr. WordPress', $theme->get( 'Author' ) );
-		$this->assertEquals( 'http://wordpress.org/', $theme->get( 'AuthorURI' ) );
-		$this->assertEquals( '0.1', $theme->get( 'Version' ) );
-		$this->assertEquals( '', $theme->get( 'Template' ) );
-		$this->assertEquals( 'publish', $theme->get( 'Status' ) );
-		$this->assertEquals( array(), $theme->get( 'Tags' ) );
-
-		//Important
-		$this->assertEquals( 'subdir/theme2', $theme->get_stylesheet() );
-		$this->assertEquals( 'subdir/theme2', $theme->get_template() );
+		// Meta.
+		$this->assertSame( 'My Subdir Theme', $theme->get( 'Name' ) );
+		$this->assertSame( 'http://example.org/', $theme->get( 'ThemeURI' ) );
+		$this->assertSame( 'An example theme in a sub directory', $theme->get( 'Description' ) );
+		$this->assertSame( 'Mr. WordPress', $theme->get( 'Author' ) );
+		$this->assertSame( 'http://wordpress.org/', $theme->get( 'AuthorURI' ) );
+		$this->assertSame( '0.1', $theme->get( 'Version' ) );
+		$this->assertSame( '', $theme->get( 'Template' ) );
+		$this->assertSame( 'publish', $theme->get( 'Status' ) );
+		$this->assertSame( array(), $theme->get( 'Tags' ) );
+
+		// Important.
+		$this->assertSame( 'subdir/theme2', $theme->get_stylesheet() );
+		$this->assertSame( 'subdir/theme2', $theme->get_template() );
 	}
 
 	/**
 	 * @ticket 20313
 	 */
 	function test_new_WP_Theme_subdir_bad_root() {
-		// This is what get_theme_data() does when you pass it a style.css file for a theme in a subdir.
+		// This is what get_theme_data() does when you pass it a style.css file for a theme in a subdirectory.
 		$theme = new WP_Theme( 'theme2', $this->theme_root . '/subdir' );
 
-		//Meta
-		$this->assertEquals( 'My Subdir Theme', $theme->get( 'Name' ) );
-		$this->assertEquals( 'http://example.org/', $theme->get( 'ThemeURI' ) );
-		$this->assertEquals( 'An example theme in a sub directory', $theme->get( 'Description' ) );
-		$this->assertEquals( 'Mr. WordPress', $theme->get( 'Author' ) );
-		$this->assertEquals( 'http://wordpress.org/', $theme->get( 'AuthorURI' ) );
-		$this->assertEquals( '0.1', $theme->get( 'Version' ) );
-		$this->assertEquals( '', $theme->get( 'Template' ) );
-		$this->assertEquals( 'publish', $theme->get( 'Status' ) );
-		$this->assertEquals( array(), $theme->get( 'Tags' ) );
-
-		//Important
-		$this->assertEquals( 'subdir/theme2', $theme->get_stylesheet() );
-		$this->assertEquals( 'subdir/theme2', $theme->get_template() );
+		// Meta.
+		$this->assertSame( 'My Subdir Theme', $theme->get( 'Name' ) );
+		$this->assertSame( 'http://example.org/', $theme->get( 'ThemeURI' ) );
+		$this->assertSame( 'An example theme in a sub directory', $theme->get( 'Description' ) );
+		$this->assertSame( 'Mr. WordPress', $theme->get( 'Author' ) );
+		$this->assertSame( 'http://wordpress.org/', $theme->get( 'AuthorURI' ) );
+		$this->assertSame( '0.1', $theme->get( 'Version' ) );
+		$this->assertSame( '', $theme->get( 'Template' ) );
+		$this->assertSame( 'publish', $theme->get( 'Status' ) );
+		$this->assertSame( array(), $theme->get( 'Tags' ) );
+
+		// Important.
+		$this->assertSame( 'subdir/theme2', $theme->get_stylesheet() );
+		$this->assertSame( 'subdir/theme2', $theme->get_template() );
 	}
 
 	/**
@@ -99,15 +99,15 @@ class Tests_Theme_WPTheme extends WP_UnitTestCase {
 	function test_wp_theme_uris_with_spaces() {
 		$theme = new WP_Theme( 'theme with spaces', $this->theme_root . '/subdir' );
 		// Make sure subdir/ is considered part of the stylesheet, as we must avoid encoding /'s.
-		$this->assertEquals( 'subdir/theme with spaces', $theme->get_stylesheet() );
+		$this->assertSame( 'subdir/theme with spaces', $theme->get_stylesheet() );
 
-		// Check that in a URI path, we have raw url encoding (spaces become %20)
+		// Check that in a URI path, we have raw URL encoding (spaces become %20).
 		// Don't try to verify the complete URI path. get_theme_root_uri() breaks down quickly.
-		$this->assertEquals( 'theme%20with%20spaces', basename( $theme->get_stylesheet_directory_uri() ) );
-		$this->assertEquals( 'theme%20with%20spaces', basename( $theme->get_template_directory_uri() ) );
+		$this->assertSame( 'theme%20with%20spaces', basename( $theme->get_stylesheet_directory_uri() ) );
+		$this->assertSame( 'theme%20with%20spaces', basename( $theme->get_template_directory_uri() ) );
 
-		// Check that wp_customize_url() uses url encoding, as it is a query arg (spaces become +)
-		$this->assertEquals( admin_url( 'customize.php?theme=theme+with+spaces' ), wp_customize_url( 'theme with spaces' ) );
+		// Check that wp_customize_url() uses URL encoding, as it is a query arg (spaces become +).
+		$this->assertSame( admin_url( 'customize.php?theme=theme+with+spaces' ), wp_customize_url( 'theme with spaces' ) );
 	}
 
 	/**
@@ -118,8 +118,8 @@ class Tests_Theme_WPTheme extends WP_UnitTestCase {
 		add_filter( 'stylesheet', $callback );
 		add_filter( 'template', $callback );
 
-		$this->assertEquals( get_theme_root_uri() . '/subdir/theme%20with%20spaces', get_stylesheet_directory_uri() );
-		$this->assertEquals( get_theme_root_uri() . '/subdir/theme%20with%20spaces', get_template_directory_uri() );
+		$this->assertSame( get_theme_root_uri() . '/subdir/theme%20with%20spaces', get_stylesheet_directory_uri() );
+		$this->assertSame( get_theme_root_uri() . '/subdir/theme%20with%20spaces', get_template_directory_uri() );
 
 		remove_filter( 'stylesheet', $callback );
 		remove_filter( 'template', $callback );
@@ -134,7 +134,7 @@ class Tests_Theme_WPTheme extends WP_UnitTestCase {
 	 */
 	function test_display_method_on_get_method_failure() {
 		$theme = new WP_Theme( 'nonexistent', $this->theme_root );
-		$this->assertEquals( 'nonexistent', $theme->get( 'Name' ) );
+		$this->assertSame( 'nonexistent', $theme->get( 'Name' ) );
 		$this->assertFalse( $theme->get( 'AuthorURI' ) );
 		$this->assertFalse( $theme->get( 'Tags' ) );
 		$this->assertFalse( $theme->display( 'Tags' ) );
@@ -147,7 +147,7 @@ class Tests_Theme_WPTheme extends WP_UnitTestCase {
 		$theme  = new WP_Theme( 'child-parent-itself', $this->theme_root );
 		$errors = $theme->errors();
 		$this->assertWPError( $errors );
-		$this->assertEquals( 'theme_child_invalid', $errors->get_error_code() );
+		$this->assertSame( 'theme_child_invalid', $errors->get_error_code() );
 	}
 
 
@@ -162,10 +162,10 @@ class Tests_Theme_WPTheme extends WP_UnitTestCase {
 		$current_allowed_themes = get_site_option( 'allowedthemes' );
 		WP_Theme::network_enable_theme( $theme );
 		$new_allowed_themes = get_site_option( 'allowedthemes' );
-		update_site_option( 'allowedthemes', $current_allowed_themes ); // reset previous value.
+		update_site_option( 'allowedthemes', $current_allowed_themes ); // Reset previous value.
 		$current_allowed_themes['testtheme-1'] = true; // Add the new theme to the previous set.
 
-		$this->assertEqualSetsWithIndex( $current_allowed_themes, $new_allowed_themes );
+		$this->assertSameSetsWithIndex( $current_allowed_themes, $new_allowed_themes );
 	}
 
 	/**
@@ -179,7 +179,7 @@ class Tests_Theme_WPTheme extends WP_UnitTestCase {
 		$current_allowed_themes = get_site_option( 'allowedthemes' );
 		WP_Theme::network_enable_theme( $themes );
 		$new_allowed_themes = get_site_option( 'allowedthemes' );
-		update_site_option( 'allowedthemes', $current_allowed_themes ); // reset previous value.
+		update_site_option( 'allowedthemes', $current_allowed_themes ); // Reset previous value.
 		$current_allowed_themes = array_merge(
 			$current_allowed_themes,
 			array(
@@ -188,7 +188,7 @@ class Tests_Theme_WPTheme extends WP_UnitTestCase {
 			)
 		);
 
-		$this->assertEqualSetsWithIndex( $current_allowed_themes, $new_allowed_themes );
+		$this->assertSameSetsWithIndex( $current_allowed_themes, $new_allowed_themes );
 	}
 
 	/**
@@ -210,10 +210,10 @@ class Tests_Theme_WPTheme extends WP_UnitTestCase {
 		$disable_theme = 'existing-2';
 		WP_Theme::network_disable_theme( $disable_theme );
 		$new_allowed_themes = get_site_option( 'allowedthemes' );
-		update_site_option( 'allowedthemes', $current_allowed_themes ); // reset previous value.
+		update_site_option( 'allowedthemes', $current_allowed_themes ); // Reset previous value.
 		unset( $allowed_themes[ $disable_theme ] ); // Remove deleted theme from initial set.
 
-		$this->assertEqualSetsWithIndex( $allowed_themes, $new_allowed_themes );
+		$this->assertSameSetsWithIndex( $allowed_themes, $new_allowed_themes );
 	}
 
 	/**
@@ -235,10 +235,10 @@ class Tests_Theme_WPTheme extends WP_UnitTestCase {
 		$disable_themes = array( 'existing-4', 'existing-5' );
 		WP_Theme::network_disable_theme( $disable_themes );
 		$new_allowed_themes = get_site_option( 'allowedthemes' );
-		update_site_option( 'allowedthemes', $current_allowed_themes ); // reset previous value.
+		update_site_option( 'allowedthemes', $current_allowed_themes ); // Reset previous value.
 		unset( $allowed_themes['existing-4'] );
 		unset( $allowed_themes['existing-5'] );
 
-		$this->assertEqualSetsWithIndex( $allowed_themes, $new_allowed_themes );
+		$this->assertSameSetsWithIndex( $allowed_themes, $new_allowed_themes );
 	}
 }
diff --git a/tests/theme/customHeader.php b/tests/theme/customHeader.php
index 65b037042a..229b85dec1 100644
--- a/tests/theme/customHeader.php
+++ b/tests/theme/customHeader.php
@@ -22,7 +22,7 @@ class Tests_Theme_Custom_Header extends WP_UnitTestCase {
 	function setUp() {
 		parent::setUp();
 
-		require_once( ABSPATH . WPINC . '/class-wp-customize-manager.php' );
+		require_once ABSPATH . WPINC . '/class-wp-customize-manager.php';
 		$GLOBALS['wp_customize'] = new WP_Customize_Manager();
 		$this->customize_manager = $GLOBALS['wp_customize'];
 
@@ -62,7 +62,7 @@ class Tests_Theme_Custom_Header extends WP_UnitTestCase {
 
 		$image = get_header_image();
 		$this->assertTrue( has_header_image() );
-		$this->assertEquals( $default, $image );
+		$this->assertSame( $default, $image );
 	}
 
 	function test_get_header_image_from_theme_mod() {
@@ -72,7 +72,7 @@ class Tests_Theme_Custom_Header extends WP_UnitTestCase {
 
 		set_theme_mod( 'header_image', $custom );
 		$image = get_header_image();
-		$this->assertEquals( $custom, $image );
+		$this->assertSame( $custom, $image );
 		$this->assertTrue( has_header_image() );
 
 		set_theme_mod( 'header_image', 'remove-header' );
@@ -129,7 +129,7 @@ class Tests_Theme_Custom_Header extends WP_UnitTestCase {
 		// The container should always be returned in the Customizer preview.
 		$this->_set_customize_previewing( true );
 		$html = get_custom_header_markup();
-		$this->assertEquals( '<div id="wp-custom-header" class="wp-custom-header"></div>', $html );
+		$this->assertSame( '<div id="wp-custom-header" class="wp-custom-header"></div>', $html );
 	}
 
 	function test_get_custom_header_markup_with_registered_default_image() {
@@ -147,7 +147,7 @@ class Tests_Theme_Custom_Header extends WP_UnitTestCase {
 		$this->assertFalse( has_header_video() );
 		set_theme_mod( 'header_video', self::$header_video_id );
 		$this->assertTrue( has_header_video() );
-		$this->assertEquals( wp_get_attachment_url( self::$header_video_id ), get_header_video_url() );
+		$this->assertSame( wp_get_attachment_url( self::$header_video_id ), get_header_video_url() );
 	}
 
 	function test_get_external_header_video_url() {
@@ -157,7 +157,7 @@ class Tests_Theme_Custom_Header extends WP_UnitTestCase {
 		$this->assertFalse( has_header_video() );
 		set_theme_mod( 'external_header_video', $external );
 		$this->assertTrue( has_header_video() );
-		$this->assertEquals( $external, get_header_video_url() );
+		$this->assertSame( $external, get_header_video_url() );
 	}
 
 	function test_get_header_video_url_prefers_local_video() {
@@ -166,7 +166,7 @@ class Tests_Theme_Custom_Header extends WP_UnitTestCase {
 
 		set_theme_mod( 'header_video', self::$header_video_id );
 		set_theme_mod( 'external_header_video', $external );
-		$this->assertEquals( wp_get_attachment_url( self::$header_video_id ), get_header_video_url() );
+		$this->assertSame( wp_get_attachment_url( self::$header_video_id ), get_header_video_url() );
 	}
 
 	function test_get_custom_header_markup_with_video_and_without_an_image() {
@@ -182,7 +182,7 @@ class Tests_Theme_Custom_Header extends WP_UnitTestCase {
 		$html = get_custom_header_markup();
 		$this->assertTrue( has_header_video() );
 		$this->assertTrue( has_custom_header() );
-		$this->assertEquals( '<div id="wp-custom-header" class="wp-custom-header"></div>', $html );
+		$this->assertSame( '<div id="wp-custom-header" class="wp-custom-header"></div>', $html );
 	}
 
 	function test_header_script_is_not_enqueued_by_the_custom_header_markup_without_video() {
diff --git a/tests/theme/getAllowedFilters.php b/tests/theme/getAllowedFilters.php
index 00f198a237..212d44ccb9 100644
--- a/tests/theme/getAllowedFilters.php
+++ b/tests/theme/getAllowedFilters.php
@@ -21,8 +21,8 @@ if ( is_multisite() ) :
 			WP_Theme::get_allowed( $blog_id );
 			remove_filter( 'network_allowed_themes', array( $this, 'filter_network_allowed_themes' ) );
 
-			$this->assertEquals( 2, count( $this->filter_network_allowed_themes_args ) );
-			$this->assertEquals( $blog_id, $this->filter_network_allowed_themes_args[1] );
+			$this->assertSame( 2, count( $this->filter_network_allowed_themes_args ) );
+			$this->assertSame( $blog_id, $this->filter_network_allowed_themes_args[1] );
 		}
 
 		/**
@@ -39,7 +39,7 @@ if ( is_multisite() ) :
 
 			$expected = $this->default_allowed + array( 'allow-on-network' => true );
 
-			$this->assertEquals( $expected, $allowed );
+			$this->assertSame( $expected, $allowed );
 		}
 
 		/**
@@ -56,7 +56,7 @@ if ( is_multisite() ) :
 
 			$expected = $this->default_allowed + array( 'network-allowed-theme' => true );
 
-			$this->assertEquals( $expected, $allowed );
+			$this->assertSame( $expected, $allowed );
 		}
 
 		/**
@@ -73,7 +73,7 @@ if ( is_multisite() ) :
 
 			$expected = $this->default_allowed + array( 'site-allowed-theme' => true );
 
-			$this->assertEquals( $expected, $allowed );
+			$this->assertSame( $expected, $allowed );
 		}
 
 		public function filter_allowed_themes( $allowed_themes ) {
diff --git a/tests/theme/getThemeStarterContent.php b/tests/theme/getThemeStarterContent.php
index b4ff34cdaf..a0425c8748 100644
--- a/tests/theme/getThemeStarterContent.php
+++ b/tests/theme/getThemeStarterContent.php
@@ -148,14 +148,14 @@ class Tests_WP_Theme_Get_Theme_Starter_Content extends WP_UnitTestCase {
 			$this->assertInternalType( 'array', $widget[1] );
 			$this->assertArrayHasKey( 'title', $widget[1] );
 		}
-		$this->assertEquals( 'text', $hydrated_starter_content['widgets']['sidebar-1'][1][0], 'Core content extended' );
-		$this->assertEquals( 'Our Story', $hydrated_starter_content['widgets']['sidebar-1'][1][1]['title'], 'Core content extended' );
+		$this->assertSame( 'text', $hydrated_starter_content['widgets']['sidebar-1'][1][0], 'Core content extended' );
+		$this->assertSame( 'Our Story', $hydrated_starter_content['widgets']['sidebar-1'][1][1]['title'], 'Core content extended' );
 
 		foreach ( $hydrated_starter_content['nav_menus']['top']['items'] as $nav_menu_item ) {
 			$this->assertInternalType( 'array', $nav_menu_item );
 			$this->assertTrue( ! empty( $nav_menu_item['object_id'] ) || ! empty( $nav_menu_item['url'] ) );
 		}
-		$this->assertEquals( 'Email Us', $hydrated_starter_content['nav_menus']['top']['items'][4]['title'], 'Core content extended' );
+		$this->assertSame( 'Email Us', $hydrated_starter_content['nav_menus']['top']['items'][4]['title'], 'Core content extended' );
 
 		foreach ( $hydrated_starter_content['posts'] as $key => $post ) {
 			$this->assertInternalType( 'string', $key );
@@ -164,9 +164,9 @@ class Tests_WP_Theme_Get_Theme_Starter_Content extends WP_UnitTestCase {
 			$this->assertArrayHasKey( 'post_type', $post );
 			$this->assertArrayHasKey( 'post_title', $post );
 		}
-		$this->assertEquals( 'Extended', $hydrated_starter_content['posts']['blog']['post_excerpt'], 'Core content extended' );
-		$this->assertEquals( 'blog.php', $hydrated_starter_content['posts']['blog']['template'], 'Core content extended' );
-		$this->assertEquals( '{{featured-image-logo}}', $hydrated_starter_content['posts']['custom']['thumbnail'], 'Core content extended' );
+		$this->assertSame( 'Extended', $hydrated_starter_content['posts']['blog']['post_excerpt'], 'Core content extended' );
+		$this->assertSame( 'blog.php', $hydrated_starter_content['posts']['blog']['template'], 'Core content extended' );
+		$this->assertSame( '{{featured-image-logo}}', $hydrated_starter_content['posts']['custom']['thumbnail'], 'Core content extended' );
 	}
 
 	/**
@@ -189,7 +189,7 @@ class Tests_WP_Theme_Get_Theme_Starter_Content extends WP_UnitTestCase {
 		$starter_content = get_theme_starter_content();
 
 		$this->assertCount( 2, $starter_content['widgets']['sidebar-1'] );
-		$this->assertEquals( 'Filtered Widget', $starter_content['widgets']['sidebar-1'][1][1]['title'] );
+		$this->assertSame( 'Filtered Widget', $starter_content['widgets']['sidebar-1'][1][1]['title'] );
 	}
 
 	/**
diff --git a/tests/theme/support.php b/tests/theme/support.php
index 86561a5c9b..25100c46ac 100644
--- a/tests/theme/support.php
+++ b/tests/theme/support.php
@@ -25,7 +25,7 @@ class Tests_Theme_Support extends WP_UnitTestCase {
 		add_theme_support( 'admin-bar', array( 'callback' => '__return_false' ) );
 		$this->assertTrue( current_theme_supports( 'admin-bar' ) );
 
-		$this->assertEquals(
+		$this->assertSame(
 			array( 0 => array( 'callback' => '__return_false' ) ),
 			get_theme_support( 'admin-bar' )
 		);
@@ -61,28 +61,19 @@ class Tests_Theme_Support extends WP_UnitTestCase {
 		add_theme_support( 'post-thumbnails', array( 'page' ) );
 		$this->assertTrue( current_theme_supports( 'post-thumbnails', 'post' ) );
 		$this->assertFalse( current_theme_supports( 'post-thumbnails', 'book' ) );
-		$this->assertEquals(
+		$this->assertSame(
 			array( 0 => array( 'post', 'page' ) ),
 			get_theme_support( 'post-thumbnails' )
 		);
 
 		add_theme_support( 'post-thumbnails' );
-		$this->assertTrue( current_theme_supports( 'post-thumbnails', 'book' ) );
+		$this->assertTrue( current_theme_supports( 'post-thumbnails', 'any-type' ) );
 
 		// Reset post-thumbnails theme support.
 		remove_theme_support( 'post-thumbnails' );
 		$this->assertFalse( current_theme_supports( 'post-thumbnails' ) );
 	}
 
-	public function test_post_thumbnails_types_true() {
-		// array of arguments, with the key of 'types' holding the post types.
-		add_theme_support( 'post-thumbnails', array( 'types' => true ) );
-		$this->assertTrue( current_theme_supports( 'post-thumbnails' ) );
-		$this->assertTrue( current_theme_supports( 'post-thumbnails', rand_str() ) ); // any type
-		remove_theme_support( 'post-thumbnails' );
-		$this->assertFalse( current_theme_supports( 'post-thumbnails' ) );
-	}
-
 	/**
 	 * @ticket 24932
 	 */
@@ -167,7 +158,7 @@ class Tests_Theme_Support extends WP_UnitTestCase {
 	 * @ticket 26900
 	 */
 	function test_supports_menus() {
-		// Start fresh
+		// Start fresh.
 		foreach ( get_registered_nav_menus() as $location => $desc ) {
 			unregister_nav_menu( $location );
 		}
diff --git a/tests/theme/themeDir.php b/tests/theme/themeDir.php
index 51e5046bae..ae02c39008 100644
--- a/tests/theme/themeDir.php
+++ b/tests/theme/themeDir.php
@@ -19,7 +19,7 @@ class Tests_Theme_ThemeDir extends WP_UnitTestCase {
 		add_filter( 'theme_root', array( $this, '_theme_root' ) );
 		add_filter( 'stylesheet_root', array( $this, '_theme_root' ) );
 		add_filter( 'template_root', array( $this, '_theme_root' ) );
-		// clear caches
+		// Clear caches.
 		wp_clean_themes_cache();
 		unset( $GLOBALS['wp_themes'] );
 	}
@@ -34,7 +34,7 @@ class Tests_Theme_ThemeDir extends WP_UnitTestCase {
 		parent::tearDown();
 	}
 
-	// replace the normal theme root dir with our premade test dir
+	// Replace the normal theme root directory with our premade test directory.
 	function _theme_root( $dir ) {
 		return $this->theme_root;
 	}
@@ -46,28 +46,28 @@ class Tests_Theme_ThemeDir extends WP_UnitTestCase {
 	function test_theme_default() {
 		$themes = get_themes();
 		$theme  = get_theme( 'WordPress Default' );
-		$this->assertEquals( $themes['WordPress Default'], $theme );
+		$this->assertSame( $themes['WordPress Default'], $theme );
 
 		$this->assertFalse( empty( $theme ) );
 
-		#echo gen_tests_array('theme', $theme);
+		// echo gen_tests_array( 'theme', $theme );
 
-		$this->assertEquals( 'WordPress Default', $theme['Name'] );
-		$this->assertEquals( 'WordPress Default', $theme['Title'] );
-		$this->assertEquals( 'The default WordPress theme based on the famous <a href="http://binarybonsai.com/kubrick/">Kubrick</a>.', $theme['Description'] );
-		$this->assertEquals( '<a href="http://binarybonsai.com/">Michael Heilemann</a>', $theme['Author'] );
-		$this->assertEquals( '1.6', $theme['Version'] );
-		$this->assertEquals( 'default', $theme['Template'] );
-		$this->assertEquals( 'default', $theme['Stylesheet'] );
+		$this->assertSame( 'WordPress Default', $theme['Name'] );
+		$this->assertSame( 'WordPress Default', $theme['Title'] );
+		$this->assertSame( 'The default WordPress theme based on the famous <a href="http://binarybonsai.com/kubrick/">Kubrick</a>.', $theme['Description'] );
+		$this->assertSame( '<a href="http://binarybonsai.com/">Michael Heilemann</a>', $theme['Author'] );
+		$this->assertSame( '1.6', $theme['Version'] );
+		$this->assertSame( 'default', $theme['Template'] );
+		$this->assertSame( 'default', $theme['Stylesheet'] );
 
 		$this->assertContains( $this->theme_root . '/default/functions.php', $theme['Template Files'] );
 		$this->assertContains( $this->theme_root . '/default/index.php', $theme['Template Files'] );
 		$this->assertContains( $this->theme_root . '/default/style.css', $theme['Stylesheet Files'] );
 
-		$this->assertEquals( $this->theme_root . '/default', $theme['Template Dir'] );
-		$this->assertEquals( $this->theme_root . '/default', $theme['Stylesheet Dir'] );
-		$this->assertEquals( 'publish', $theme['Status'] );
-		$this->assertEquals( '', $theme['Parent Theme'] );
+		$this->assertSame( $this->theme_root . '/default', $theme['Template Dir'] );
+		$this->assertSame( $this->theme_root . '/default', $theme['Stylesheet Dir'] );
+		$this->assertSame( 'publish', $theme['Status'] );
+		$this->assertSame( '', $theme['Parent Theme'] );
 	}
 
 	/**
@@ -79,29 +79,29 @@ class Tests_Theme_ThemeDir extends WP_UnitTestCase {
 
 		$this->assertFalse( empty( $theme ) );
 
-		#echo gen_tests_array('theme', $theme);
+		// echo gen_tests_array( 'theme', $theme );
 
-		$this->assertEquals( 'Sandbox', $theme['Name'] );
-		$this->assertEquals( 'Sandbox', $theme['Title'] );
-		$this->assertEquals( 'A theme with powerful, semantic CSS selectors and the ability to add new skins.', $theme['Description'] );
-		$this->assertEquals( '<a href="http://andy.wordpress.com/">Andy Skelton</a> &amp; <a href="http://www.plaintxt.org/">Scott Allan Wallick</a>', $theme['Author'] );
-		$this->assertEquals( '0.6.1-wpcom', $theme['Version'] );
-		$this->assertEquals( 'sandbox', $theme['Template'] );
-		$this->assertEquals( 'sandbox', $theme['Stylesheet'] );
+		$this->assertSame( 'Sandbox', $theme['Name'] );
+		$this->assertSame( 'Sandbox', $theme['Title'] );
+		$this->assertSame( 'A theme with powerful, semantic CSS selectors and the ability to add new skins.', $theme['Description'] );
+		$this->assertSame( '<a href="http://andy.wordpress.com/">Andy Skelton</a> &amp; <a href="http://www.plaintxt.org/">Scott Allan Wallick</a>', $theme['Author'] );
+		$this->assertSame( '0.6.1-wpcom', $theme['Version'] );
+		$this->assertSame( 'sandbox', $theme['Template'] );
+		$this->assertSame( 'sandbox', $theme['Stylesheet'] );
 
 		$template_files = $theme['Template Files'];
 
-		$this->assertEquals( $this->theme_root . '/sandbox/functions.php', reset( $template_files ) );
-		$this->assertEquals( $this->theme_root . '/sandbox/index.php', next( $template_files ) );
+		$this->assertSame( $this->theme_root . '/sandbox/functions.php', reset( $template_files ) );
+		$this->assertSame( $this->theme_root . '/sandbox/index.php', next( $template_files ) );
 
 		$stylesheet_files = $theme['Stylesheet Files'];
 
-		$this->assertEquals( $this->theme_root . '/sandbox/style.css', reset( $stylesheet_files ) );
+		$this->assertSame( $this->theme_root . '/sandbox/style.css', reset( $stylesheet_files ) );
 
-		$this->assertEquals( $this->theme_root . '/sandbox', $theme['Template Dir'] );
-		$this->assertEquals( $this->theme_root . '/sandbox', $theme['Stylesheet Dir'] );
-		$this->assertEquals( 'publish', $theme['Status'] );
-		$this->assertEquals( '', $theme['Parent Theme'] );
+		$this->assertSame( $this->theme_root . '/sandbox', $theme['Template Dir'] );
+		$this->assertSame( $this->theme_root . '/sandbox', $theme['Stylesheet Dir'] );
+		$this->assertSame( 'publish', $theme['Status'] );
+		$this->assertSame( '', $theme['Parent Theme'] );
 
 	}
 
@@ -116,24 +116,24 @@ class Tests_Theme_ThemeDir extends WP_UnitTestCase {
 		$theme = $themes['Stylesheet Only'];
 		$this->assertFalse( empty( $theme ) );
 
-		#echo gen_tests_array('theme', $theme);
+		// echo gen_tests_array( 'theme', $theme );
 
-		$this->assertEquals( 'Stylesheet Only', $theme['Name'] );
-		$this->assertEquals( 'Stylesheet Only', $theme['Title'] );
-		$this->assertEquals( 'A three-column widget-ready theme in dark blue.', $theme['Description'] );
-		$this->assertEquals( '<a href="http://www.example.com/">Henry Crun</a>', $theme['Author'] );
-		$this->assertEquals( '1.0', $theme['Version'] );
-		$this->assertEquals( 'sandbox', $theme['Template'] );
-		$this->assertEquals( 'stylesheetonly', $theme['Stylesheet'] );
+		$this->assertSame( 'Stylesheet Only', $theme['Name'] );
+		$this->assertSame( 'Stylesheet Only', $theme['Title'] );
+		$this->assertSame( 'A three-column widget-ready theme in dark blue.', $theme['Description'] );
+		$this->assertSame( '<a href="http://www.example.com/">Henry Crun</a>', $theme['Author'] );
+		$this->assertSame( '1.0', $theme['Version'] );
+		$this->assertSame( 'sandbox', $theme['Template'] );
+		$this->assertSame( 'stylesheetonly', $theme['Stylesheet'] );
 		$this->assertContains( $this->theme_root . '/sandbox/functions.php', $theme['Template Files'] );
 		$this->assertContains( $this->theme_root . '/sandbox/index.php', $theme['Template Files'] );
 
 		$this->assertContains( $this->theme_root . '/stylesheetonly/style.css', $theme['Stylesheet Files'] );
 
-		$this->assertEquals( $this->theme_root . '/sandbox', $theme['Template Dir'] );
-		$this->assertEquals( $this->theme_root . '/stylesheetonly', $theme['Stylesheet Dir'] );
-		$this->assertEquals( 'publish', $theme['Status'] );
-		$this->assertEquals( 'Sandbox', $theme['Parent Theme'] );
+		$this->assertSame( $this->theme_root . '/sandbox', $theme['Template Dir'] );
+		$this->assertSame( $this->theme_root . '/stylesheetonly', $theme['Stylesheet Dir'] );
+		$this->assertSame( 'publish', $theme['Status'] );
+		$this->assertSame( 'Sandbox', $theme['Parent Theme'] );
 
 	}
 
@@ -156,19 +156,20 @@ class Tests_Theme_ThemeDir extends WP_UnitTestCase {
 			'Sandbox',
 			'Stylesheet Only',
 			'My Theme',
-			'My Theme/theme1', // duplicate theme should be given a unique name
-			'My Subdir Theme', // theme in a subdirectory should work
-			'Page Template Child Theme', // theme which inherits page templates
-			'Page Template Theme', // theme with page templates for other test code
+			'My Theme/theme1',                    // Duplicate theme should be given a unique name.
+			'My Subdir Theme',                    // Theme in a subdirectory should work.
+			'Page Template Child Theme',          // Theme which inherits page templates.
+			'Page Template Theme',                // Theme with page templates for other test code.
 			'Theme with Spaces in the Directory',
 			'Internationalized Theme',
 			'camelCase',
+			'REST Theme',
 		);
 
 		sort( $theme_names );
 		sort( $expected );
 
-		$this->assertEquals( $expected, $theme_names );
+		$this->assertSame( $expected, $theme_names );
 	}
 
 	/**
@@ -191,7 +192,7 @@ class Tests_Theme_ThemeDir extends WP_UnitTestCase {
 			),
 		);
 
-		$this->assertEquals( $expected, get_broken_themes() );
+		$this->assertSame( $expected, get_broken_themes() );
 	}
 
 	function test_wp_get_theme_with_non_default_theme_root() {
@@ -218,17 +219,17 @@ class Tests_Theme_ThemeDir extends WP_UnitTestCase {
 	function test_get_theme_data_top_level() {
 		$theme_data = get_theme_data( DIR_TESTDATA . '/themedir1/theme1/style.css' );
 
-		$this->assertEquals( 'My Theme', $theme_data['Name'] );
-		$this->assertEquals( 'http://example.org/', $theme_data['URI'] );
-		$this->assertEquals( 'An example theme', $theme_data['Description'] );
-		$this->assertEquals( '<a href="http://example.com/">Minnie Bannister</a>', $theme_data['Author'] );
-		$this->assertEquals( 'http://example.com/', $theme_data['AuthorURI'] );
-		$this->assertEquals( '1.3', $theme_data['Version'] );
-		$this->assertEquals( '', $theme_data['Template'] );
-		$this->assertEquals( 'publish', $theme_data['Status'] );
-		$this->assertEquals( array(), $theme_data['Tags'] );
-		$this->assertEquals( 'My Theme', $theme_data['Title'] );
-		$this->assertEquals( 'Minnie Bannister', $theme_data['AuthorName'] );
+		$this->assertSame( 'My Theme', $theme_data['Name'] );
+		$this->assertSame( 'http://example.org/', $theme_data['URI'] );
+		$this->assertSame( 'An example theme', $theme_data['Description'] );
+		$this->assertSame( '<a href="http://example.com/">Minnie Bannister</a>', $theme_data['Author'] );
+		$this->assertSame( 'http://example.com/', $theme_data['AuthorURI'] );
+		$this->assertSame( '1.3', $theme_data['Version'] );
+		$this->assertSame( '', $theme_data['Template'] );
+		$this->assertSame( 'publish', $theme_data['Status'] );
+		$this->assertSame( array(), $theme_data['Tags'] );
+		$this->assertSame( 'My Theme', $theme_data['Title'] );
+		$this->assertSame( 'Minnie Bannister', $theme_data['AuthorName'] );
 	}
 
 	/**
@@ -237,17 +238,17 @@ class Tests_Theme_ThemeDir extends WP_UnitTestCase {
 	function test_get_theme_data_subdir() {
 		$theme_data = get_theme_data( $this->theme_root . '/subdir/theme2/style.css' );
 
-		$this->assertEquals( 'My Subdir Theme', $theme_data['Name'] );
-		$this->assertEquals( 'http://example.org/', $theme_data['URI'] );
-		$this->assertEquals( 'An example theme in a sub directory', $theme_data['Description'] );
-		$this->assertEquals( '<a href="http://wordpress.org/">Mr. WordPress</a>', $theme_data['Author'] );
-		$this->assertEquals( 'http://wordpress.org/', $theme_data['AuthorURI'] );
-		$this->assertEquals( '0.1', $theme_data['Version'] );
-		$this->assertEquals( '', $theme_data['Template'] );
-		$this->assertEquals( 'publish', $theme_data['Status'] );
-		$this->assertEquals( array(), $theme_data['Tags'] );
-		$this->assertEquals( 'My Subdir Theme', $theme_data['Title'] );
-		$this->assertEquals( 'Mr. WordPress', $theme_data['AuthorName'] );
+		$this->assertSame( 'My Subdir Theme', $theme_data['Name'] );
+		$this->assertSame( 'http://example.org/', $theme_data['URI'] );
+		$this->assertSame( 'An example theme in a sub directory', $theme_data['Description'] );
+		$this->assertSame( '<a href="http://wordpress.org/">Mr. WordPress</a>', $theme_data['Author'] );
+		$this->assertSame( 'http://wordpress.org/', $theme_data['AuthorURI'] );
+		$this->assertSame( '0.1', $theme_data['Version'] );
+		$this->assertSame( '', $theme_data['Template'] );
+		$this->assertSame( 'publish', $theme_data['Status'] );
+		$this->assertSame( array(), $theme_data['Tags'] );
+		$this->assertSame( 'My Subdir Theme', $theme_data['Title'] );
+		$this->assertSame( 'Mr. WordPress', $theme_data['AuthorName'] );
 	}
 
 	/**
diff --git a/tests/upload.php b/tests/upload.php
index 751bb709cd..8fe2f9e91d 100644
--- a/tests/upload.php
+++ b/tests/upload.php
@@ -13,45 +13,45 @@ class Tests_Upload extends WP_UnitTestCase {
 	}
 
 	function _reset_options() {
-		// system defaults
+		// System defaults.
 		update_option( 'upload_path', 'wp-content/uploads' );
 		update_option( 'upload_url_path', '' );
 		update_option( 'uploads_use_yearmonth_folders', 1 );
 	}
 
 	function test_upload_dir_default() {
-		// wp_upload_dir() with default parameters
+		// wp_upload_dir() with default parameters.
 		$info   = wp_upload_dir();
 		$subdir = gmstrftime( '/%Y/%m' );
 
-		$this->assertEquals( get_option( 'siteurl' ) . '/wp-content/uploads' . $subdir, $info['url'] );
-		$this->assertEquals( ABSPATH . 'wp-content/uploads' . $subdir, $info['path'] );
-		$this->assertEquals( $subdir, $info['subdir'] );
-		$this->assertEquals( false, $info['error'] );
+		$this->assertSame( get_option( 'siteurl' ) . '/wp-content/uploads' . $subdir, $info['url'] );
+		$this->assertSame( ABSPATH . 'wp-content/uploads' . $subdir, $info['path'] );
+		$this->assertSame( $subdir, $info['subdir'] );
+		$this->assertFalse( $info['error'] );
 	}
 
 	function test_upload_dir_relative() {
-		// wp_upload_dir() with a relative upload path that is not 'wp-content/uploads'
+		// wp_upload_dir() with a relative upload path that is not 'wp-content/uploads'.
 		update_option( 'upload_path', 'foo/bar' );
 		$info   = _wp_upload_dir();
 		$subdir = gmstrftime( '/%Y/%m' );
 
-		$this->assertEquals( get_option( 'siteurl' ) . '/foo/bar' . $subdir, $info['url'] );
-		$this->assertEquals( ABSPATH . 'foo/bar' . $subdir, $info['path'] );
-		$this->assertEquals( $subdir, $info['subdir'] );
-		$this->assertEquals( false, $info['error'] );
+		$this->assertSame( get_option( 'siteurl' ) . '/foo/bar' . $subdir, $info['url'] );
+		$this->assertSame( ABSPATH . 'foo/bar' . $subdir, $info['path'] );
+		$this->assertSame( $subdir, $info['subdir'] );
+		$this->assertFalse( $info['error'] );
 	}
 
 	/**
 	 * @ticket 5953
 	 */
 	function test_upload_dir_absolute() {
-		$path = '/tmp/wp-unit-test';
+		$path = get_temp_dir() . 'wp-unit-test';
 
-		// wp_upload_dir() with an absolute upload path
+		// wp_upload_dir() with an absolute upload path.
 		update_option( 'upload_path', $path );
 
-		// doesn't make sense to use an absolute file path without setting the url path
+		// Doesn't make sense to use an absolute file path without setting the url path.
 		update_option( 'upload_url_path', '/baz' );
 
 		// Use `_wp_upload_dir()` directly to bypass caching and work with the changed options.
@@ -59,10 +59,10 @@ class Tests_Upload extends WP_UnitTestCase {
 		$info   = _wp_upload_dir();
 		$subdir = gmstrftime( '/%Y/%m' );
 
-		$this->assertEquals( '/baz' . $subdir, $info['url'] );
-		$this->assertEquals( $path . $subdir, $info['path'] );
-		$this->assertEquals( $subdir, $info['subdir'] );
-		$this->assertEquals( false, $info['error'] );
+		$this->assertSame( '/baz' . $subdir, $info['url'] );
+		$this->assertSame( $path . $subdir, $info['path'] );
+		$this->assertSame( $subdir, $info['subdir'] );
+		$this->assertFalse( $info['error'] );
 	}
 
 	function test_upload_dir_no_yearnum() {
@@ -71,10 +71,10 @@ class Tests_Upload extends WP_UnitTestCase {
 		// Use `_wp_upload_dir()` directly to bypass caching and work with the changed options.
 		$info = _wp_upload_dir();
 
-		$this->assertEquals( get_option( 'siteurl' ) . '/wp-content/uploads', $info['url'] );
-		$this->assertEquals( ABSPATH . 'wp-content/uploads', $info['path'] );
-		$this->assertEquals( '', $info['subdir'] );
-		$this->assertEquals( false, $info['error'] );
+		$this->assertSame( get_option( 'siteurl' ) . '/wp-content/uploads', $info['url'] );
+		$this->assertSame( ABSPATH . 'wp-content/uploads', $info['path'] );
+		$this->assertSame( '', $info['subdir'] );
+		$this->assertFalse( $info['error'] );
 	}
 
 	function test_upload_path_absolute() {
@@ -85,14 +85,14 @@ class Tests_Upload extends WP_UnitTestCase {
 		$info   = _wp_upload_dir();
 		$subdir = gmstrftime( '/%Y/%m' );
 
-		$this->assertEquals( 'http://' . WP_TESTS_DOMAIN . '/asdf' . $subdir, $info['url'] );
-		$this->assertEquals( ABSPATH . 'wp-content/uploads' . $subdir, $info['path'] );
-		$this->assertEquals( $subdir, $info['subdir'] );
-		$this->assertEquals( false, $info['error'] );
+		$this->assertSame( 'http://' . WP_TESTS_DOMAIN . '/asdf' . $subdir, $info['url'] );
+		$this->assertSame( ABSPATH . 'wp-content/uploads' . $subdir, $info['path'] );
+		$this->assertSame( $subdir, $info['subdir'] );
+		$this->assertFalse( $info['error'] );
 	}
 
 	function test_upload_dir_empty() {
-		// upload path setting is empty - it should default to 'wp-content/uploads'
+		// Upload path setting is empty - it should default to 'wp-content/uploads'.
 		update_option( 'upload_path', '' );
 
 		// Use `_wp_upload_dir()` directly to bypass caching and work with the changed options.
@@ -100,10 +100,10 @@ class Tests_Upload extends WP_UnitTestCase {
 		$info   = _wp_upload_dir();
 		$subdir = gmstrftime( '/%Y/%m' );
 
-		$this->assertEquals( get_option( 'siteurl' ) . '/wp-content/uploads' . $subdir, $info['url'] );
-		$this->assertEquals( ABSPATH . 'wp-content/uploads' . $subdir, $info['path'] );
-		$this->assertEquals( $subdir, $info['subdir'] );
-		$this->assertEquals( false, $info['error'] );
+		$this->assertSame( get_option( 'siteurl' ) . '/wp-content/uploads' . $subdir, $info['url'] );
+		$this->assertSame( ABSPATH . 'wp-content/uploads' . $subdir, $info['path'] );
+		$this->assertSame( $subdir, $info['subdir'] );
+		$this->assertFalse( $info['error'] );
 	}
 
 }
diff --git a/tests/url.php b/tests/url.php
index 66f4b77eb6..0e02963725 100644
--- a/tests/url.php
+++ b/tests/url.php
@@ -1,7 +1,8 @@
 <?php
 
-// tests for link-template.php and related URL functions
 /**
+ * Tests for link-template.php and related URL functions.
+ *
  * @group url
  */
 class Tests_URL extends WP_UnitTestCase {
@@ -76,8 +77,8 @@ class Tests_URL extends WP_UnitTestCase {
 		$siteurl_https   = set_url_scheme( $siteurl_http, 'https' );
 		$admin_url_https = admin_url( $url );
 
-		$this->assertEquals( $siteurl_http . $expected, $admin_url_http );
-		$this->assertEquals( $siteurl_https . $expected, $admin_url_https );
+		$this->assertSame( $siteurl_http . $expected, $admin_url_http );
+		$this->assertSame( $siteurl_https . $expected, $admin_url_https );
 	}
 
 	function data_admin_urls() {
@@ -144,8 +145,8 @@ class Tests_URL extends WP_UnitTestCase {
 		$homeurl_https  = set_url_scheme( $homeurl_http, 'https' );
 		$home_url_https = home_url( $url );
 
-		$this->assertEquals( $homeurl_http . $expected, $home_url_http );
-		$this->assertEquals( $homeurl_https . $expected, $home_url_https );
+		$this->assertSame( $homeurl_http . $expected, $home_url_http );
+		$this->assertSame( $homeurl_https . $expected, $home_url_https );
 	}
 
 	function data_home_urls() {
@@ -200,45 +201,45 @@ class Tests_URL extends WP_UnitTestCase {
 	function test_home_url_from_admin() {
 		$screen = get_current_screen();
 
-		// Pretend to be in the site admin
+		// Pretend to be in the site admin.
 		set_current_screen( 'dashboard' );
 		$home = get_option( 'home' );
 
-		// home_url() should return http when in the admin
+		// home_url() should return http when in the admin.
 		$_SERVER['HTTPS'] = 'on';
-		$this->assertEquals( $home, home_url() );
+		$this->assertSame( $home, home_url() );
 
 		$_SERVER['HTTPS'] = 'off';
-		$this->assertEquals( $home, home_url() );
+		$this->assertSame( $home, home_url() );
 
-		// If not in the admin, is_ssl() should determine the scheme
+		// If not in the admin, is_ssl() should determine the scheme.
 		set_current_screen( 'front' );
-		$this->assertEquals( $home, home_url() );
+		$this->assertSame( $home, home_url() );
 		$_SERVER['HTTPS'] = 'on';
 		$home             = str_replace( 'http://', 'https://', $home );
-		$this->assertEquals( $home, home_url() );
+		$this->assertSame( $home, home_url() );
 
-		// Test with https in home
+		// Test with https in home.
 		update_option( 'home', set_url_scheme( $home, 'https' ) );
 
-		// Pretend to be in the site admin
+		// Pretend to be in the site admin.
 		set_current_screen( 'dashboard' );
 		$home = get_option( 'home' );
 
-		// home_url() should return whatever scheme is set in the home option when in the admin
+		// home_url() should return whatever scheme is set in the home option when in the admin.
 		$_SERVER['HTTPS'] = 'on';
-		$this->assertEquals( $home, home_url() );
+		$this->assertSame( $home, home_url() );
 
 		$_SERVER['HTTPS'] = 'off';
-		$this->assertEquals( $home, home_url() );
+		$this->assertSame( $home, home_url() );
 
-		// If not in the admin, is_ssl() should determine the scheme unless https hard-coded in home
+		// If not in the admin, is_ssl() should determine the scheme unless https hard-coded in home.
 		set_current_screen( 'front' );
-		$this->assertEquals( $home, home_url() );
+		$this->assertSame( $home, home_url() );
 		$_SERVER['HTTPS'] = 'on';
-		$this->assertEquals( $home, home_url() );
+		$this->assertSame( $home, home_url() );
 		$_SERVER['HTTPS'] = 'off';
-		$this->assertEquals( $home, home_url() );
+		$this->assertSame( $home, home_url() );
 
 		update_option( 'home', set_url_scheme( $home, 'http' ) );
 
@@ -248,24 +249,24 @@ class Tests_URL extends WP_UnitTestCase {
 	function test_network_home_url_from_admin() {
 		$screen = get_current_screen();
 
-		// Pretend to be in the site admin
+		// Pretend to be in the site admin.
 		set_current_screen( 'dashboard' );
 		$home = network_home_url();
 
-		// home_url() should return http when in the admin
-		$this->assertEquals( 0, strpos( $home, 'http://' ) );
+		// home_url() should return http when in the admin.
+		$this->assertSame( 0, strpos( $home, 'http://' ) );
 		$_SERVER['HTTPS'] = 'on';
-		$this->assertEquals( $home, network_home_url() );
+		$this->assertSame( $home, network_home_url() );
 
 		$_SERVER['HTTPS'] = 'off';
-		$this->assertEquals( $home, network_home_url() );
+		$this->assertSame( $home, network_home_url() );
 
-		// If not in the admin, is_ssl() should determine the scheme
+		// If not in the admin, is_ssl() should determine the scheme.
 		set_current_screen( 'front' );
-		$this->assertEquals( $home, network_home_url() );
+		$this->assertSame( $home, network_home_url() );
 		$_SERVER['HTTPS'] = 'on';
 		$home             = str_replace( 'http://', 'https://', $home );
-		$this->assertEquals( $home, network_home_url() );
+		$this->assertSame( $home, network_home_url() );
 
 		$GLOBALS['current_screen'] = $screen;
 	}
@@ -306,27 +307,27 @@ class Tests_URL extends WP_UnitTestCase {
 		$forced_admin = force_ssl_admin();
 		$i            = 0;
 		foreach ( $links as $link ) {
-			$this->assertEquals( $https_links[ $i ], set_url_scheme( $link, 'https' ) );
-			$this->assertEquals( $http_links[ $i ], set_url_scheme( $link, 'http' ) );
-			$this->assertEquals( $relative_links[ $i ], set_url_scheme( $link, 'relative' ) );
+			$this->assertSame( $https_links[ $i ], set_url_scheme( $link, 'https' ) );
+			$this->assertSame( $http_links[ $i ], set_url_scheme( $link, 'http' ) );
+			$this->assertSame( $relative_links[ $i ], set_url_scheme( $link, 'relative' ) );
 
 			$_SERVER['HTTPS'] = 'on';
-			$this->assertEquals( $https_links[ $i ], set_url_scheme( $link ) );
+			$this->assertSame( $https_links[ $i ], set_url_scheme( $link ) );
 
 			$_SERVER['HTTPS'] = 'off';
-			$this->assertEquals( $http_links[ $i ], set_url_scheme( $link ) );
+			$this->assertSame( $http_links[ $i ], set_url_scheme( $link ) );
 
 			force_ssl_admin( true );
-			$this->assertEquals( $https_links[ $i ], set_url_scheme( $link, 'admin' ) );
-			$this->assertEquals( $https_links[ $i ], set_url_scheme( $link, 'login_post' ) );
-			$this->assertEquals( $https_links[ $i ], set_url_scheme( $link, 'login' ) );
-			$this->assertEquals( $https_links[ $i ], set_url_scheme( $link, 'rpc' ) );
+			$this->assertSame( $https_links[ $i ], set_url_scheme( $link, 'admin' ) );
+			$this->assertSame( $https_links[ $i ], set_url_scheme( $link, 'login_post' ) );
+			$this->assertSame( $https_links[ $i ], set_url_scheme( $link, 'login' ) );
+			$this->assertSame( $https_links[ $i ], set_url_scheme( $link, 'rpc' ) );
 
 			force_ssl_admin( false );
-			$this->assertEquals( $http_links[ $i ], set_url_scheme( $link, 'admin' ) );
-			$this->assertEquals( $http_links[ $i ], set_url_scheme( $link, 'login_post' ) );
-			$this->assertEquals( $http_links[ $i ], set_url_scheme( $link, 'login' ) );
-			$this->assertEquals( $http_links[ $i ], set_url_scheme( $link, 'rpc' ) );
+			$this->assertSame( $http_links[ $i ], set_url_scheme( $link, 'admin' ) );
+			$this->assertSame( $http_links[ $i ], set_url_scheme( $link, 'login_post' ) );
+			$this->assertSame( $http_links[ $i ], set_url_scheme( $link, 'login' ) );
+			$this->assertSame( $http_links[ $i ], set_url_scheme( $link, 'rpc' ) );
 
 			$i++;
 		}
@@ -347,16 +348,16 @@ class Tests_URL extends WP_UnitTestCase {
 
 		$p = get_adjacent_post();
 		$this->assertInstanceOf( 'WP_Post', $p );
-		$this->assertEquals( $post_id, $p->ID );
+		$this->assertSame( $post_id, $p->ID );
 
-		// The same again to make sure a cached query returns the same result
+		// The same again to make sure a cached query returns the same result.
 		$p = get_adjacent_post();
 		$this->assertInstanceOf( 'WP_Post', $p );
-		$this->assertEquals( $post_id, $p->ID );
+		$this->assertSame( $post_id, $p->ID );
 
-		// Test next
+		// Test next.
 		$p = get_adjacent_post( false, '', false );
-		$this->assertEquals( '', $p );
+		$this->assertSame( '', $p );
 
 		unset( $GLOBALS['post'] );
 		$this->assertNull( get_adjacent_post() );
@@ -397,7 +398,7 @@ class Tests_URL extends WP_UnitTestCase {
 		$GLOBALS['post'] = get_post( $p2 );
 
 		$p = get_adjacent_post();
-		$this->assertEquals( $p1, $p->ID );
+		$this->assertSame( $p1, $p->ID );
 
 		$GLOBALS['post'] = $orig_post;
 		wp_set_current_user( $old_uid );
@@ -435,7 +436,7 @@ class Tests_URL extends WP_UnitTestCase {
 		$GLOBALS['post'] = get_post( $p2 );
 
 		$p = get_adjacent_post();
-		$this->assertEquals( $p1, $p->ID );
+		$this->assertSame( $p1, $p->ID );
 
 		$GLOBALS['post'] = $orig_post;
 		wp_set_current_user( $old_uid );
@@ -479,7 +480,7 @@ class Tests_URL extends WP_UnitTestCase {
 		$GLOBALS['post'] = get_post( $p3 );
 
 		$p = get_adjacent_post();
-		$this->assertEquals( $p1, $p->ID );
+		$this->assertSame( $p1, $p->ID );
 
 		$GLOBALS['post'] = $orig_post;
 		wp_set_current_user( $old_uid );
@@ -505,11 +506,11 @@ class Tests_URL extends WP_UnitTestCase {
 		);
 
 		foreach ( $functions as $function ) {
-			$this->assertEquals(
+			$this->assertSame(
 				call_user_func( $function, '/' ) . '../',
 				call_user_func( $function, '../' )
 			);
-			$this->assertEquals(
+			$this->assertSame(
 				call_user_func( $function, '/' ) . 'something...here',
 				call_user_func( $function, 'something...here' )
 			);
@@ -517,11 +518,11 @@ class Tests_URL extends WP_UnitTestCase {
 
 		// These functions accept a blog ID argument.
 		foreach ( array( 'get_site_url', 'get_home_url', 'get_admin_url' ) as $function ) {
-			$this->assertEquals(
+			$this->assertSame(
 				call_user_func( $function, null, '/' ) . '../',
 				call_user_func( $function, null, '../' )
 			);
-			$this->assertEquals(
+			$this->assertSame(
 				call_user_func( $function, null, '/' ) . 'something...here',
 				call_user_func( $function, null, 'something...here' )
 			);
diff --git a/tests/url/getPrivacyPolicyUrl.php b/tests/url/getPrivacyPolicyUrl.php
index 69384702da..67d10a6a3d 100644
--- a/tests/url/getPrivacyPolicyUrl.php
+++ b/tests/url/getPrivacyPolicyUrl.php
@@ -12,7 +12,7 @@
  *
  * @group url
  * @group privacy
- * @covers get_privacy_policy_url
+ * @covers ::get_privacy_policy_url
  *
  * @since 4.9.6
  */
diff --git a/tests/user.php b/tests/user.php
index d90793958b..b9d93325aa 100644
--- a/tests/user.php
+++ b/tests/user.php
@@ -1,7 +1,8 @@
 <?php
 
-// test functions in wp-includes/user.php
 /**
+ * Test functions in wp-includes/user.php
+ *
  * @group user
  */
 class Tests_User extends WP_UnitTestCase {
@@ -48,8 +49,8 @@ class Tests_User extends WP_UnitTestCase {
 		self::$user_ids[] = self::$admin_id;
 		self::$editor_id  = $factory->user->create(
 			array(
-				'role'       => 'editor',
 				'user_email' => 'test@test.com',
+				'role'       => 'editor',
 			)
 		);
 		self::$user_ids[] = self::$editor_id;
@@ -66,7 +67,7 @@ class Tests_User extends WP_UnitTestCase {
 	}
 
 	function test_get_users_of_blog() {
-		// add one of each user role
+		// Add one of each user role.
 		$nusers = array(
 			self::$contrib_id,
 			self::$author_id,
@@ -77,98 +78,102 @@ class Tests_User extends WP_UnitTestCase {
 
 		$user_list = get_users();
 
-		// find the role of each user as returned by get_users_of_blog
+		// Find the role of each user as returned by get_users_of_blog().
 		$found = array();
 		foreach ( $user_list as $user ) {
-			// only include the users we just created - there might be some others that existed previously
+			// Only include the users we just created - there might be some others that existed previously.
 			if ( in_array( $user->ID, $nusers, true ) ) {
 				$found[] = $user->ID;
 			}
 		}
 
-		// make sure every user we created was returned
-		$this->assertEqualSets( $nusers, $found );
+		// Make sure every user we created was returned.
+		$this->assertSameSets( $nusers, $found );
 	}
 
-	// simple get/set tests for user_option functions
+	// Simple get/set tests for user_option functions.
 	function test_user_option() {
 		$key = rand_str();
 		$val = rand_str();
 
-		// get an option that doesn't exist
+		// Get an option that doesn't exist.
 		$this->assertFalse( get_user_option( $key, self::$author_id ) );
 
-		// set and get
+		// Set and get.
 		update_user_option( self::$author_id, $key, $val );
-		$this->assertEquals( $val, get_user_option( $key, self::$author_id ) );
+		$this->assertSame( $val, get_user_option( $key, self::$author_id ) );
 
-		// change and get again
+		// Change and get again.
 		$val2 = rand_str();
 		update_user_option( self::$author_id, $key, $val2 );
-		$this->assertEquals( $val2, get_user_option( $key, self::$author_id ) );
+		$this->assertSame( $val2, get_user_option( $key, self::$author_id ) );
 	}
 
-	// simple tests for usermeta functions
+	/**
+	 * Simple tests for usermeta functions.
+	 */
 	function test_usermeta() {
 		$key = 'key';
 		$val = 'value1';
 
-		// get a meta key that doesn't exist
-		$this->assertEquals( '', get_user_meta( self::$author_id, $key, true ) );
+		// Get a meta key that doesn't exist.
+		$this->assertSame( '', get_user_meta( self::$author_id, $key, true ) );
 
-		// set and get
+		// Set and get.
 		update_user_meta( self::$author_id, $key, $val );
-		$this->assertEquals( $val, get_user_meta( self::$author_id, $key, true ) );
+		$this->assertSame( $val, get_user_meta( self::$author_id, $key, true ) );
 
-		// change and get again
+		// Change and get again.
 		$val2 = 'value2';
 		update_user_meta( self::$author_id, $key, $val2 );
-		$this->assertEquals( $val2, get_user_meta( self::$author_id, $key, true ) );
+		$this->assertSame( $val2, get_user_meta( self::$author_id, $key, true ) );
 
-		// delete and get
+		// Delete and get.
 		delete_user_meta( self::$author_id, $key );
-		$this->assertEquals( '', get_user_meta( self::$author_id, $key, true ) );
+		$this->assertSame( '', get_user_meta( self::$author_id, $key, true ) );
 
-		// delete by key AND value
+		// Delete by key AND value.
 		update_user_meta( self::$author_id, $key, $val );
-		// incorrect key: key still exists
+		// Incorrect key: key still exists.
 		delete_user_meta( self::$author_id, $key, rand_str() );
-		$this->assertEquals( $val, get_user_meta( self::$author_id, $key, true ) );
-		// correct key: deleted
+		$this->assertSame( $val, get_user_meta( self::$author_id, $key, true ) );
+		// Correct key: deleted.
 		delete_user_meta( self::$author_id, $key, $val );
-		$this->assertEquals( '', get_user_meta( self::$author_id, $key, true ) );
+		$this->assertSame( '', get_user_meta( self::$author_id, $key, true ) );
 
 	}
 
-	// test usermeta functions in array mode
+	/**
+	 * Test usermeta functions in array mode.
+	 */
 	function test_usermeta_array() {
-		// some values to set
+		// Some values to set.
 		$vals = array(
 			rand_str() => 'val-' . rand_str(),
 			rand_str() => 'val-' . rand_str(),
 			rand_str() => 'val-' . rand_str(),
 		);
 
-		// there is already some stuff in the array
+		// There is already some stuff in the array.
 		$this->assertTrue( is_array( get_user_meta( self::$author_id ) ) );
 
 		foreach ( $vals as $k => $v ) {
 			update_user_meta( self::$author_id, $k, $v );
 		}
-		// get the complete usermeta array
+		// Get the complete usermeta array.
 		$out = get_user_meta( self::$author_id );
 
-		// for reasons unclear, the resulting array is indexed numerically; meta keys are not included anywhere.
-		// so we'll just check to make sure our values are included somewhere.
+		// For reasons unclear, the resulting array is indexed numerically; meta keys are not included anywhere.
+		// So we'll just check to make sure our values are included somewhere.
 		foreach ( $vals as $k => $v ) {
 			$this->assertTrue( isset( $out[ $k ] ) && $out[ $k ][0] === $v );
 		}
-		// delete one key and check again
+		// Delete one key and check again.
 		$keys          = array_keys( $vals );
 		$key_to_delete = array_pop( $keys );
 		delete_user_meta( self::$author_id, $key_to_delete );
 		$out = get_user_meta( self::$author_id );
-		// make sure that key is excluded from the results
+		// Make sure that key is excluded from the results.
 		foreach ( $vals as $k => $v ) {
 			if ( $k === $key_to_delete ) {
 				$this->assertFalse( isset( $out[ $k ] ) );
@@ -178,7 +183,9 @@ class Tests_User extends WP_UnitTestCase {
 		}
 	}
 
-	// Test property magic functions for property get/set/isset.
+	/**
+	 * Test property magic functions for property get/set/isset.
+	 */
 	function test_user_properties() {
 		$user = new WP_User( self::$author_id );
 
@@ -190,16 +197,16 @@ class Tests_User extends WP_UnitTestCase {
 		$this->assertFalse( isset( $user->fooooooooo ) );
 
 		$user->$key = 'foo';
-		$this->assertEquals( 'foo', $user->$key );
-		$this->assertEquals( 'foo', $user->data->$key );  // This will fail with WP < 3.3
+		$this->assertSame( 'foo', $user->$key );
+		$this->assertSame( 'foo', $user->data->$key );  // This will fail with WP < 3.3.
 
 		foreach ( get_object_vars( $user ) as $key => $value ) {
-			$this->assertEquals( $value, $user->$key );
+			$this->assertSame( $value, $user->$key );
 		}
 	}
 
 	/**
-	 * Test the magic __unset method
+	 * Test the magic __unset() method.
 	 *
 	 * @ticket 20043
 	 */
@@ -207,9 +214,9 @@ class Tests_User extends WP_UnitTestCase {
 		// phpcs:disable WordPress.NamingConventions.ValidVariableName.UsedPropertyNotSnakeCase
 		$user = new WP_User( self::$author_id );
 
-		// Test custom fields
+		// Test custom fields.
 		$user->customField = 123;
-		$this->assertEquals( $user->customField, 123 );
+		$this->assertSame( $user->customField, 123 );
 		unset( $user->customField );
 		$this->assertFalse( isset( $user->customField ) );
 		return $user;
@@ -217,12 +224,13 @@ class Tests_User extends WP_UnitTestCase {
 	}
 
 	/**
+	 * Test 'id' (lowercase).
+	 *
 	 * @depends test_user_unset
 	 * @expectedDeprecated WP_User->id
 	 * @ticket 20043
 	 */
 	function test_user_unset_lowercase_id( $user ) {
-		// Test 'id' (lowercase)
 		$id = $user->id;
 		unset( $user->id );
 		$this->assertSame( $id, $user->id );
@@ -230,17 +238,20 @@ class Tests_User extends WP_UnitTestCase {
 	}
 
 	/**
+	 * Test 'ID'.
+	 *
 	 * @depends test_user_unset_lowercase_id
 	 * @ticket 20043
 	 */
 	function test_user_unset_uppercase_id( $user ) {
-		// Test 'ID'
 		$this->assertNotEmpty( $user->ID );
 		unset( $user->ID );
 		$this->assertNotEmpty( $user->ID );
 	}
 
-	// Test meta property magic functions for property get/set/isset.
+	/**
+	 * Test meta property magic functions for property get/set/isset.
+	 */
 	function test_user_meta_properties() {
 		$user = new WP_User( self::$author_id );
 
@@ -248,7 +259,7 @@ class Tests_User extends WP_UnitTestCase {
 
 		$this->assertTrue( isset( $user->foo ) );
 
-		$this->assertEquals( 'foo', $user->foo );
+		$this->assertSame( 'foo', $user->foo );
 	}
 
 	/**
@@ -258,9 +269,9 @@ class Tests_User extends WP_UnitTestCase {
 		$user = new WP_User( self::$author_id );
 
 		$this->assertTrue( isset( $user->id ) );
-		$this->assertEquals( $user->ID, $user->id );
+		$this->assertSame( $user->ID, $user->id );
 		$user->id = 1234;
-		$this->assertEquals( $user->ID, $user->id );
+		$this->assertSame( $user->ID, $user->id );
 	}
 
 	/**
@@ -286,51 +297,51 @@ class Tests_User extends WP_UnitTestCase {
 	function test_construction() {
 		$user = new WP_User( self::$author_id );
 		$this->assertInstanceOf( 'WP_User', $user );
-		$this->assertEquals( self::$author_id, $user->ID );
+		$this->assertSame( self::$author_id, $user->ID );
 
 		$user2 = new WP_User( 0, $user->user_login );
 		$this->assertInstanceOf( 'WP_User', $user2 );
-		$this->assertEquals( self::$author_id, $user2->ID );
-		$this->assertEquals( $user->user_login, $user2->user_login );
+		$this->assertSame( self::$author_id, $user2->ID );
+		$this->assertSame( $user->user_login, $user2->user_login );
 
 		$user3 = new WP_User();
 		$this->assertInstanceOf( 'WP_User', $user3 );
-		$this->assertEquals( 0, $user3->ID );
+		$this->assertSame( 0, $user3->ID );
 		$this->assertFalse( isset( $user3->user_login ) );
 
 		$user3->init( $user->data );
-		$this->assertEquals( self::$author_id, $user3->ID );
+		$this->assertSame( self::$author_id, $user3->ID );
 
 		$user4 = new WP_User( $user->user_login );
 		$this->assertInstanceOf( 'WP_User', $user4 );
-		$this->assertEquals( self::$author_id, $user4->ID );
-		$this->assertEquals( $user->user_login, $user4->user_login );
+		$this->assertSame( self::$author_id, $user4->ID );
+		$this->assertSame( $user->user_login, $user4->user_login );
 
 		$user5 = new WP_User( null, $user->user_login );
 		$this->assertInstanceOf( 'WP_User', $user5 );
-		$this->assertEquals( self::$author_id, $user5->ID );
-		$this->assertEquals( $user->user_login, $user5->user_login );
+		$this->assertSame( self::$author_id, $user5->ID );
+		$this->assertSame( $user->user_login, $user5->user_login );
 
 		$user6 = new WP_User( $user );
 		$this->assertInstanceOf( 'WP_User', $user6 );
-		$this->assertEquals( self::$author_id, $user6->ID );
-		$this->assertEquals( $user->user_login, $user6->user_login );
+		$this->assertSame( self::$author_id, $user6->ID );
+		$this->assertSame( $user->user_login, $user6->user_login );
 
 		$user7 = new WP_User( $user->data );
 		$this->assertInstanceOf( 'WP_User', $user7 );
-		$this->assertEquals( self::$author_id, $user7->ID );
-		$this->assertEquals( $user->user_login, $user7->user_login );
+		$this->assertSame( self::$author_id, $user7->ID );
+		$this->assertSame( $user->user_login, $user7->user_login );
 	}
 
 	function test_get() {
 		$user = new WP_User( self::$author_id );
-		$this->assertEquals( 'author_login', $user->get( 'user_login' ) );
-		$this->assertEquals( 'author@email.com', $user->get( 'user_email' ) );
+		$this->assertSame( 'author_login', $user->get( 'user_login' ) );
+		$this->assertSame( 'author@email.com', $user->get( 'user_email' ) );
 		$this->assertEquals( 0, $user->get( 'use_ssl' ) );
-		$this->assertEquals( '', $user->get( 'field_that_does_not_exist' ) );
+		$this->assertSame( '', $user->get( 'field_that_does_not_exist' ) );
 
 		update_user_meta( self::$author_id, 'dashed-key', 'abcdefg' );
-		$this->assertEquals( 'abcdefg', $user->get( 'dashed-key' ) );
+		$this->assertSame( 'abcdefg', $user->get( 'dashed-key' ) );
 	}
 
 	function test_has_prop() {
@@ -347,7 +358,7 @@ class Tests_User extends WP_UnitTestCase {
 		$user = new WP_User( self::$author_id );
 
 		update_user_meta( self::$author_id, 'description', 'about me' );
-		$this->assertEquals( 'about me', $user->get( 'description' ) );
+		$this->assertSame( 'about me', $user->get( 'description' ) );
 
 		$user_data = array(
 			'ID'           => self::$author_id,
@@ -356,12 +367,12 @@ class Tests_User extends WP_UnitTestCase {
 		wp_update_user( $user_data );
 
 		$user = new WP_User( self::$author_id );
-		$this->assertEquals( 'test user', $user->get( 'display_name' ) );
+		$this->assertSame( 'test user', $user->get( 'display_name' ) );
 
-		// Make sure there is no collateral damage to fields not in $user_data
-		$this->assertEquals( 'about me', $user->get( 'description' ) );
+		// Make sure there is no collateral damage to fields not in $user_data.
+		$this->assertSame( 'about me', $user->get( 'description' ) );
 
-		// Pass as stdClass
+		// Pass as stdClass.
 		$user_data = array(
 			'ID'           => self::$author_id,
 			'display_name' => 'a test user',
@@ -369,14 +380,14 @@ class Tests_User extends WP_UnitTestCase {
 		wp_update_user( (object) $user_data );
 
 		$user = new WP_User( self::$author_id );
-		$this->assertEquals( 'a test user', $user->get( 'display_name' ) );
+		$this->assertSame( 'a test user', $user->get( 'display_name' ) );
 
 		$user->display_name = 'some test user';
 		wp_update_user( $user );
 
-		$this->assertEquals( 'some test user', $user->get( 'display_name' ) );
+		$this->assertSame( 'some test user', $user->get( 'display_name' ) );
 
-		// Test update of fields in _get_additional_user_keys()
+		// Test update of fields in _get_additional_user_keys().
 		$user_data = array(
 			'ID'                   => self::$author_id,
 			'use_ssl'              => 1,
@@ -408,7 +419,7 @@ class Tests_User extends WP_UnitTestCase {
 
 		$this->assertNotEmpty( $userdata );
 		$this->assertInstanceOf( 'WP_User', $userdata );
-		$this->assertEquals( $userdata->ID, self::$sub_id );
+		$this->assertSame( $userdata->ID, self::$sub_id );
 		$prefix  = $wpdb->get_blog_prefix();
 		$cap_key = $prefix . 'capabilities';
 		$this->assertTrue( isset( $userdata->$cap_key ) );
@@ -452,7 +463,7 @@ class Tests_User extends WP_UnitTestCase {
 			'post_type'    => 'post',
 		);
 
-		// insert a post and make sure the ID is ok
+		// Insert a post and make sure the ID is OK.
 		$post_id = wp_insert_post( $post );
 		$this->assertTrue( is_numeric( $post_id ) );
 
@@ -460,7 +471,7 @@ class Tests_User extends WP_UnitTestCase {
 
 		$this->assertNotEmpty( $authordata );
 		$this->assertInstanceOf( 'WP_User', $authordata );
-		$this->assertEquals( $authordata->ID, self::$author_id );
+		$this->assertSame( $authordata->ID, self::$author_id );
 
 		if ( $old_post_id ) {
 			setup_postdata( get_post( $old_post_id ) );
@@ -477,6 +488,9 @@ class Tests_User extends WP_UnitTestCase {
 		$this->assertFalse( get_userdata( array( 'array' ) ) );
 	}
 
+	/**
+	 * @ticket 23480
+	 */
 	function test_user_get_data_by_id() {
 		$user = WP_User::get_data_by( 'id', self::$author_id );
 		$this->assertInstanceOf( 'stdClass', $user );
@@ -484,25 +498,25 @@ class Tests_User extends WP_UnitTestCase {
 
 		// @ticket 23480
 		$user1 = WP_User::get_data_by( 'id', -1 );
-		$this->assertEquals( false, $user1 );
+		$this->assertFalse( $user1 );
 
 		$user2 = WP_User::get_data_by( 'id', 0 );
-		$this->assertEquals( false, $user2 );
+		$this->assertFalse( $user2 );
 
 		$user3 = WP_User::get_data_by( 'id', null );
-		$this->assertEquals( false, $user3 );
+		$this->assertFalse( $user3 );
 
 		$user4 = WP_User::get_data_by( 'id', '' );
-		$this->assertEquals( false, $user4 );
+		$this->assertFalse( $user4 );
 
 		$user5 = WP_User::get_data_by( 'id', false );
-		$this->assertEquals( false, $user5 );
+		$this->assertFalse( $user5 );
 
 		$user6 = WP_User::get_data_by( 'id', $user->user_nicename );
-		$this->assertEquals( false, $user6 );
+		$this->assertFalse( $user6 );
 
 		$user7 = WP_User::get_data_by( 'id', 99999 );
-		$this->assertEquals( false, $user7 );
+		$this->assertFalse( $user7 );
 	}
 
 	/**
@@ -569,19 +583,16 @@ class Tests_User extends WP_UnitTestCase {
 		$pwd_before = $user->user_pass;
 		wp_update_user( $user );
 
-		// Reload the data
+		// Reload the data.
 		$pwd_after = get_userdata( $testuserid )->user_pass;
-		$this->assertEquals( $pwd_before, $pwd_after );
+		$this->assertSame( $pwd_before, $pwd_after );
 	}
 
 	/**
 	 * @ticket 45747
+	 * @group ms-excluded
 	 */
 	function test_wp_update_user_should_not_mark_user_as_spam_on_single_site() {
-		if ( is_multisite() ) {
-			$this->markTestSkipped( 'This test is intended for single site.' );
-		}
-
 		$u = wp_update_user(
 			array(
 				'ID'   => self::$contrib_id,
@@ -613,7 +624,7 @@ class Tests_User extends WP_UnitTestCase {
 				'user_email' => 'taco@burrito.com',
 			)
 		);
-		$this->assertEquals( $id1, email_exists( 'taco@burrito.com' ) );
+		$this->assertSame( $id1, email_exists( 'taco@burrito.com' ) );
 
 		$id2 = wp_insert_user(
 			array(
@@ -644,7 +655,7 @@ class Tests_User extends WP_UnitTestCase {
 				'user_email' => 'blackburn@battlefield4.com',
 			)
 		);
-		$this->assertEquals( $id1, email_exists( 'blackburn@battlefield4.com' ) );
+		$this->assertSame( $id1, email_exists( 'blackburn@battlefield4.com' ) );
 
 		$id2 = wp_insert_user(
 			array(
@@ -653,7 +664,7 @@ class Tests_User extends WP_UnitTestCase {
 				'user_email' => 'miller@battlefield4.com',
 			)
 		);
-		$this->assertEquals( $id2, email_exists( 'miller@battlefield4.com' ) );
+		$this->assertSame( $id2, email_exists( 'miller@battlefield4.com' ) );
 
 		if ( ! is_wp_error( $id2 ) ) {
 			wp_update_user(
@@ -662,7 +673,7 @@ class Tests_User extends WP_UnitTestCase {
 					'user_email' => 'david@battlefield4.com',
 				)
 			);
-			$this->assertEquals( $id2, email_exists( 'david@battlefield4.com' ) );
+			$this->assertSame( $id2, email_exists( 'david@battlefield4.com' ) );
 
 			$return = wp_update_user(
 				array(
@@ -692,7 +703,7 @@ class Tests_User extends WP_UnitTestCase {
 
 		$response = wp_insert_user( $user_data );
 		$this->assertInstanceOf( 'WP_Error', $response );
-		$this->assertEquals( 'invalid_username', $response->get_error_code() );
+		$this->assertSame( 'invalid_username', $response->get_error_code() );
 
 		remove_filter( 'illegal_user_logins', array( $this, '_illegal_user_logins' ) );
 
@@ -712,7 +723,7 @@ class Tests_User extends WP_UnitTestCase {
 
 		$response = register_new_user( $user_login, $user_email );
 		$this->assertInstanceOf( 'WP_Error', $response );
-		$this->assertEquals( 'invalid_username', $response->get_error_code() );
+		$this->assertSame( 'invalid_username', $response->get_error_code() );
 
 		remove_filter( 'illegal_user_logins', array( $this, '_illegal_user_logins' ) );
 
@@ -735,13 +746,13 @@ class Tests_User extends WP_UnitTestCase {
 
 		$response = wpmu_validate_user_signup( $user_data['user_login'], $user_data['user_email'] );
 		$this->assertInstanceOf( 'WP_Error', $response['errors'] );
-		$this->assertEquals( 'user_name', $response['errors']->get_error_code() );
+		$this->assertSame( 'user_name', $response['errors']->get_error_code() );
 
 		remove_filter( 'illegal_user_logins', array( $this, '_illegal_user_logins' ) );
 
 		$response = wpmu_validate_user_signup( $user_data['user_login'], $user_data['user_email'] );
 		$this->assertInstanceOf( 'WP_Error', $response['errors'] );
-		$this->assertEquals( 0, count( $response['errors']->get_error_codes() ) );
+		$this->assertSame( 0, count( $response['errors']->get_error_codes() ) );
 	}
 
 	function _illegal_user_logins_data() {
@@ -749,7 +760,7 @@ class Tests_User extends WP_UnitTestCase {
 			array( 'testuser' ),
 		);
 
-		// Multisite doesn't allow mixed case logins ever
+		// Multisite doesn't allow mixed case logins ever.
 		if ( ! is_multisite() ) {
 			$data[] = array( 'TestUser' );
 		}
@@ -804,7 +815,7 @@ class Tests_User extends WP_UnitTestCase {
 		);
 
 		$user_id = wp_insert_user( $user_details );
-		$this->assertEquals( $user_id, email_exists( $user_details['user_email'] ) );
+		$this->assertSame( $user_id, email_exists( $user_details['user_email'] ) );
 
 		// Check that providing an empty password doesn't remove a user's password.
 		$user_details['ID']        = $user_id;
@@ -1025,7 +1036,7 @@ class Tests_User extends WP_UnitTestCase {
 		$this->assertEquals( $u, wp_cache_get( $updated_user->user_nicename, 'userslugs' ) );
 	}
 
-	function test_changing_email_invalidates_password_reset_key() {
+	public function test_changing_email_invalidates_password_reset_key() {
 		global $wpdb;
 
 		$user = $this->author;
@@ -1033,7 +1044,7 @@ class Tests_User extends WP_UnitTestCase {
 		clean_user_cache( $user );
 
 		$user = get_userdata( $user->ID );
-		$this->assertEquals( 'key', $user->user_activation_key );
+		$this->assertSame( 'key', $user->user_activation_key );
 
 		// Check that changing something other than the email doesn't remove the key.
 		$userdata = array(
@@ -1043,7 +1054,7 @@ class Tests_User extends WP_UnitTestCase {
 		wp_update_user( $userdata );
 
 		$user = get_userdata( $user->ID );
-		$this->assertEquals( 'key', $user->user_activation_key );
+		$this->assertSame( 'key', $user->user_activation_key );
 
 		// Now check that changing the email does remove it.
 		$userdata = array(
@@ -1057,6 +1068,26 @@ class Tests_User extends WP_UnitTestCase {
 		$this->assertEmpty( $user->user_activation_key );
 	}
 
+	public function test_changing_password_invalidates_password_reset_key() {
+		global $wpdb;
+
+		$user = $this->author;
+		$wpdb->update( $wpdb->users, array( 'user_activation_key' => 'key' ), array( 'ID' => $user->ID ) );
+		clean_user_cache( $user );
+
+		$user = get_userdata( $user->ID );
+		$this->assertSame( 'key', $user->user_activation_key );
+
+		$userdata = array(
+			'ID'        => $user->ID,
+			'user_pass' => 'password',
+		);
+		wp_update_user( $userdata );
+
+		$user = get_userdata( $user->ID );
+		$this->assertEmpty( $user->user_activation_key );
+	}
+
 	public function test_search_users_login() {
 		$users = get_users(
 			array(
@@ -1123,7 +1154,7 @@ class Tests_User extends WP_UnitTestCase {
 		);
 		$update   = wp_update_user( $userdata );
 
-		$this->assertEquals( self::$editor_id, $update );
+		$this->assertSame( self::$editor_id, $update );
 	}
 
 	/**
@@ -1138,11 +1169,11 @@ class Tests_User extends WP_UnitTestCase {
 		$update   = wp_update_user( $userdata );
 
 		// Was this successful?
-		$this->assertEquals( self::$editor_id, $update );
+		$this->assertSame( self::$editor_id, $update );
 
 		// Verify that the email address has been updated.
 		$user = get_userdata( self::$editor_id );
-		$this->assertEquals( $user->user_email, 'test2@test.com' );
+		$this->assertSame( $user->user_email, 'test2@test.com' );
 	}
 
 	/**
@@ -1290,7 +1321,7 @@ class Tests_User extends WP_UnitTestCase {
 		$existing_email = get_option( 'admin_email' );
 		$new_email      = 'new-admin-email@test.dev';
 
-		// Give the site a name containing HTML entities
+		// Give the site a name containing HTML entities.
 		update_option( 'blogname', '&#039;Test&#039; blog&#039;s &quot;name&quot; has &lt;html entities&gt; &amp;' );
 
 		update_option_new_admin_email( $existing_email, $new_email );
@@ -1300,10 +1331,10 @@ class Tests_User extends WP_UnitTestCase {
 		$recipient = $mailer->get_recipient( 'to' );
 		$email     = $mailer->get_sent();
 
-		// Assert reciepient is correct
+		// Assert recipient is correct.
 		$this->assertSame( $new_email, $recipient->address, 'Admin email change notification recipient not as expected' );
 
-		// Assert that HTML entites have been decode in body and subject
+		// Assert that HTML entites have been decode in body and subject.
 		$this->assertContains( '\'Test\' blog\'s "name" has <html entities> &', $email->subject, 'Email subject does not contain the decoded HTML entities' );
 		$this->assertNotContains( '&#039;Test&#039; blog&#039;s &quot;name&quot; has &lt;html entities&gt; &amp;', $email->subject, $email->subject, 'Email subject does contains HTML entities' );
 	}
@@ -1437,7 +1468,7 @@ class Tests_User extends WP_UnitTestCase {
 		$response = edit_user();
 
 		$this->assertInstanceOf( 'WP_Error', $response );
-		$this->assertEquals( 'pass', $response->get_error_code() );
+		$this->assertSame( 'pass', $response->get_error_code() );
 
 		// Check new user with password set.
 		$_POST['pass1'] = 'password';
@@ -1448,7 +1479,7 @@ class Tests_User extends WP_UnitTestCase {
 
 		$this->assertInternalType( 'int', $user_id );
 		$this->assertInstanceOf( 'WP_User', $user );
-		$this->assertEquals( 'nickname1', $user->nickname );
+		$this->assertSame( 'nickname1', $user->nickname );
 
 		// Check updating user with empty password.
 		$_POST['nickname'] = 'nickname_updated';
@@ -1458,7 +1489,7 @@ class Tests_User extends WP_UnitTestCase {
 		$user_id = edit_user( $user_id );
 
 		$this->assertInternalType( 'int', $user_id );
-		$this->assertEquals( 'nickname_updated', $user->nickname );
+		$this->assertSame( 'nickname_updated', $user->nickname );
 
 		// Check updating user with missing second password.
 		$_POST['nickname'] = 'nickname_updated2';
@@ -1468,8 +1499,8 @@ class Tests_User extends WP_UnitTestCase {
 		$response = edit_user( $user_id );
 
 		$this->assertInstanceOf( 'WP_Error', $response );
-		$this->assertEquals( 'pass', $response->get_error_code() );
-		$this->assertEquals( 'nickname_updated', $user->nickname );
+		$this->assertSame( 'pass', $response->get_error_code() );
+		$this->assertSame( 'nickname_updated', $user->nickname );
 
 		// Check updating user with empty password via `check_passwords` action.
 		add_action( 'check_passwords', array( $this, 'action_check_passwords_blank_pw' ), 10, 2 );
@@ -1477,7 +1508,7 @@ class Tests_User extends WP_UnitTestCase {
 		remove_action( 'check_passwords', array( $this, 'action_check_passwords_blank_pw' ) );
 
 		$this->assertInternalType( 'int', $user_id );
-		$this->assertEquals( 'nickname_updated2', $user->nickname );
+		$this->assertSame( 'nickname_updated2', $user->nickname );
 	}
 
 	/**
@@ -1516,10 +1547,10 @@ class Tests_User extends WP_UnitTestCase {
 
 		// The new email address gets put into user_meta.
 		$new_email_meta = get_user_meta( $user->ID, '_new_email', true );
-		$this->assertEquals( 'after@example.com', $new_email_meta['newemail'] );
+		$this->assertSame( 'after@example.com', $new_email_meta['newemail'] );
 
 		// The email address of the user doesn't change. $_POST['email'] should be the email address pre-update.
-		$this->assertEquals( $_POST['email'], $user->user_email );
+		$this->assertSame( $_POST['email'], $user->user_email );
 	}
 
 	/**
@@ -1556,7 +1587,7 @@ class Tests_User extends WP_UnitTestCase {
 		$this->assertEmpty( $new_email_meta );
 
 		// $_POST['email'] should be the email address posted from the form.
-		$this->assertEquals( $_POST['email'], 'after@example.com' );
+		$this->assertSame( $_POST['email'], 'after@example.com' );
 	}
 
 	/**
@@ -1576,7 +1607,7 @@ class Tests_User extends WP_UnitTestCase {
 
 		reset_phpmailer_instance();
 
-		// Give the site a name containing HTML entities
+		// Give the site a name containing HTML entities.
 		update_option( 'blogname', '&#039;Test&#039; blog&#039;s &quot;name&quot; has &lt;html entities&gt; &amp;' );
 
 		// Set $_POST['email'] with new e-mail and $_POST['user_id'] with user's ID.
@@ -1590,10 +1621,10 @@ class Tests_User extends WP_UnitTestCase {
 		$recipient = $mailer->get_recipient( 'to' );
 		$email     = $mailer->get_sent();
 
-		// Assert recipient is correct
+		// Assert recipient is correct.
 		$this->assertSame( 'new-email@test.dev', $recipient->address, 'User email change confirmation recipient not as expected' );
 
-		// Assert that HTML entites have been decoded in body and subject
+		// Assert that HTML entites have been decoded in body and subject.
 		$this->assertContains( '\'Test\' blog\'s "name" has <html entities> &', $email->subject, 'Email subject does not contain the decoded HTML entities' );
 		$this->assertNotContains( '&#039;Test&#039; blog&#039;s &quot;name&quot; has &lt;html entities&gt; &amp;', $email->subject, 'Email subject does contains HTML entities' );
 	}
@@ -1640,7 +1671,7 @@ class Tests_User extends WP_UnitTestCase {
 	}
 
 	/**
-	 * Testing the `wp_user_personal_data_exporter_no_user` function when no user exists.
+	 * Testing the `wp_user_personal_data_exporter()` function when no user exists.
 	 *
 	 * @ticket 43547
 	 */
@@ -1656,7 +1687,7 @@ class Tests_User extends WP_UnitTestCase {
 	}
 
 	/**
-	 * Testing the `wp_user_personal_data_exporter_no_user` function when the requested
+	 * Testing the `wp_user_personal_data_exporter()` function when the requested
 	 * user exists.
 	 *
 	 * @ticket 43547
@@ -1674,4 +1705,248 @@ class Tests_User extends WP_UnitTestCase {
 		// Number of exported user properties.
 		$this->assertSame( 11, count( $actual['data'][0]['data'] ) );
 	}
+
+	/**
+	 * Testing the `wp_user_personal_data_exporter()` function
+	 * with Community Events Location IP data.
+	 *
+	 * @ticket 43921
+	 */
+	function test_wp_community_events_location_ip_personal_data_exporter() {
+		$test_user = new WP_User( self::$contrib_id );
+
+		$location_data = array( 'ip' => '0.0.0.0' );
+		update_user_option( $test_user->ID, 'community-events-location', $location_data, true );
+
+		$actual = wp_user_personal_data_exporter( $test_user->user_email );
+
+		$this->assertTrue( $actual['done'] );
+
+		// Contains 'Community Events Location'.
+		$this->assertSame( 'Community Events Location', $actual['data'][1]['group_label'] );
+
+		// Contains location IP.
+		$this->assertSame( 'IP', $actual['data'][1]['data'][0]['name'] );
+		$this->assertSame( '0.0.0.0', $actual['data'][1]['data'][0]['value'] );
+	}
+
+	/**
+	 * Testing the `wp_user_personal_data_exporter()` function
+	 * with Community Events Location city data.
+	 *
+	 * @ticket 43921
+	 */
+	function test_wp_community_events_location_city_personal_data_exporter() {
+		$test_user = new WP_User( self::$contrib_id );
+
+		$location_data = array(
+			'description' => 'Cincinnati',
+			'country'     => 'US',
+			'latitude'    => '39.1271100',
+			'longitude'   => '-84.5143900',
+		);
+		update_user_option( $test_user->ID, 'community-events-location', $location_data, true );
+
+		$actual = wp_user_personal_data_exporter( $test_user->user_email );
+
+		$this->assertTrue( $actual['done'] );
+
+		// Contains 'Community Events Location'.
+		$this->assertSame( 'Community Events Location', $actual['data'][1]['group_label'] );
+
+		// Contains location city.
+		$this->assertSame( 'City', $actual['data'][1]['data'][0]['name'] );
+		$this->assertSame( 'Cincinnati', $actual['data'][1]['data'][0]['value'] );
+
+		// Contains location country.
+		$this->assertSame( 'Country', $actual['data'][1]['data'][1]['name'] );
+		$this->assertSame( 'US', $actual['data'][1]['data'][1]['value'] );
+
+		// Contains location latitude.
+		$this->assertSame( 'Latitude', $actual['data'][1]['data'][2]['name'] );
+		$this->assertSame( '39.1271100', $actual['data'][1]['data'][2]['value'] );
+
+		// Contains location longitude.
+		$this->assertSame( 'Longitude', $actual['data'][1]['data'][3]['name'] );
+		$this->assertSame( '-84.5143900', $actual['data'][1]['data'][3]['value'] );
+
+	}
+
+	/**
+	 * Testing the `wp_user_personal_data_exporter()` function
+	 * with Session Tokens data.
+	 *
+	 * @ticket 45889
+	 */
+	function test_wp_session_tokens_personal_data_exporter() {
+		$test_user = new WP_User( self::$contrib_id );
+
+		$session_tokens_data = array(
+			'yft87y56457687sfd897867545fg76ds78iyuhgjyui7865' => array(
+				'expiration' => 1580461981,
+				'ip'         => '0.0.0.0',
+				'ua'         => 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/79.0.3945.117 Safari/537.36',
+				'login'      => 1580289181,
+			),
+		);
+		update_user_option( $test_user->ID, 'session_tokens', $session_tokens_data, true );
+
+		$actual = wp_user_personal_data_exporter( $test_user->user_email );
+
+		$this->assertTrue( $actual['done'] );
+
+		// Contains Session Tokens.
+		$this->assertSame( 'Session Tokens', $actual['data'][1]['group_label'] );
+
+		// Contains Expiration.
+		$this->assertSame( 'Expiration', $actual['data'][1]['data'][0]['name'] );
+		$this->assertSame( 'January 31, 2020 09:13 AM', $actual['data'][1]['data'][0]['value'] );
+
+		// Contains IP.
+		$this->assertSame( 'IP', $actual['data'][1]['data'][1]['name'] );
+		$this->assertSame( '0.0.0.0', $actual['data'][1]['data'][1]['value'] );
+
+		// Contains IP.
+		$this->assertSame( 'User Agent', $actual['data'][1]['data'][2]['name'] );
+		$this->assertSame( 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/79.0.3945.117 Safari/537.36', $actual['data'][1]['data'][2]['value'] );
+
+		// Contains IP.
+		$this->assertSame( 'Last Login', $actual['data'][1]['data'][3]['name'] );
+		$this->assertSame( 'January 29, 2020 09:13 AM', $actual['data'][1]['data'][3]['value'] );
+	}
+
+	/**
+	 * Testing the `wp_privacy_additional_user_profile_data` filter works.
+	 *
+	 * @since 5.4.0
+	 *
+	 * @ticket 47509
+	 */
+	function test_filter_wp_privacy_additional_user_profile_data() {
+		$test_user = new WP_User( self::$contrib_id );
+
+		add_filter( 'wp_privacy_additional_user_profile_data', array( $this, 'export_additional_user_profile_data' ) );
+
+		$actual = wp_user_personal_data_exporter( $test_user->user_email );
+
+		remove_filter( 'wp_privacy_additional_user_profile_data', array( $this, 'export_additional_user_profile_data' ) );
+
+		$this->assertTrue( $actual['done'] );
+
+		// Number of exported users.
+		$this->assertSame( 1, count( $actual['data'] ) );
+
+		// Number of exported user properties (the 11 core properties,
+		// plus 1 additional from the filter).
+		$this->assertSame( 12, count( $actual['data'][0]['data'] ) );
+
+		// Check that the item added by the filter was retained.
+		$this->assertSame(
+			1,
+			count(
+				wp_list_filter(
+					$actual['data'][0]['data'],
+					array(
+						'name'  => 'Test Additional Data Name',
+						'value' => 'Test Additional Data Value',
+					)
+				)
+			)
+		);
+
+		// _doing_wrong() should be called because the filter callback
+		// adds a item with a 'name' that is the same as one generated by core.
+		$this->setExpectedIncorrectUsage( 'wp_user_personal_data_exporter' );
+		add_filter( 'wp_privacy_additional_user_profile_data', array( $this, 'export_additional_user_profile_data_with_dup_name' ) );
+
+		$actual = wp_user_personal_data_exporter( $test_user->user_email );
+
+		remove_filter( 'wp_privacy_additional_user_profile_data', array( $this, 'export_additional_user_profile_data' ) );
+
+		$this->assertTrue( $actual['done'] );
+
+		// Number of exported users.
+		$this->assertSame( 1, count( $actual['data'] ) );
+
+		// Number of exported user properties
+		// (the 11 core properties, plus 1 additional from the filter).
+		$this->assertSame( 12, count( $actual['data'][0]['data'] ) );
+
+		// Check that the duplicate 'name' => 'User ID' was stripped.
+		$this->assertSame(
+			1,
+			count(
+				wp_list_filter(
+					$actual['data'][0]['data'],
+					array(
+						'name' => 'User ID',
+					)
+				)
+			)
+		);
+
+		// Check that the item added by the filter was retained.
+		$this->assertSame(
+			1,
+			count(
+				wp_list_filter(
+					$actual['data'][0]['data'],
+					array(
+						'name'  => 'Test Additional Data Name',
+						'value' => 'Test Additional Data Value',
+					)
+				)
+			)
+		);
+	}
+
+	/**
+	 * Filter callback to add additional profile data to the User Group on Export Requests.
+	 *
+	 * @since 5.4.0
+	 *
+	 * @ticket 47509
+	 *
+	 * @return array The additional user data.
+	 */
+	public function export_additional_user_profile_data() {
+		$additional_profile_data = array(
+			// This item should be retained and included in the export.
+			array(
+				'name'  => 'Test Additional Data Name',
+				'value' => 'Test Additional Data Value',
+			),
+		);
+
+		return $additional_profile_data;
+	}
+
+	/**
+	 * Filter callback to add additional profile data to the User Group on Export Requests.
+	 *
+	 * This callback should generate a `_doing_it_wrong()`.
+	 *
+	 * @since 5.4.0
+	 *
+	 * @ticket 47509
+	 *
+	 * @return array The additional user data.
+	 */
+	public function export_additional_user_profile_data_with_dup_name() {
+		$additional_profile_data = array(
+			// This item should be stripped out by wp_user_personal_data_exporter()
+			// because it's 'name' duplicates one exported by core.
+			array(
+				'name'  => 'User ID',
+				'value' => 'Some User ID',
+			),
+			// This item should be retained and included in the export.
+			array(
+				'name'  => 'Test Additional Data Name',
+				'value' => 'Test Additional Data Value',
+			),
+		);
+
+		return $additional_profile_data;
+	}
 }
diff --git a/tests/user/author.php b/tests/user/author.php
index 9793f09b1c..472e7a2b73 100644
--- a/tests/user/author.php
+++ b/tests/user/author.php
@@ -47,41 +47,41 @@ class Tests_User_Author_Template extends WP_UnitTestCase {
 		$author_name = get_the_author();
 		$user        = new WP_User( self::$author_id );
 
-		$this->assertEquals( $user->display_name, $author_name );
-		$this->assertEquals( 'test_author', $author_name );
+		$this->assertSame( $user->display_name, $author_name );
+		$this->assertSame( 'test_author', $author_name );
 	}
 
 	function test_get_the_author_meta() {
-		$this->assertEquals( 'test_author', get_the_author_meta( 'login' ) );
-		$this->assertEquals( 'test_author', get_the_author_meta( 'user_login' ) );
-		$this->assertEquals( 'test_author', get_the_author_meta( 'display_name' ) );
+		$this->assertSame( 'test_author', get_the_author_meta( 'login' ) );
+		$this->assertSame( 'test_author', get_the_author_meta( 'user_login' ) );
+		$this->assertSame( 'test_author', get_the_author_meta( 'display_name' ) );
 
-		$this->assertEquals( 'test_author', trim( get_the_author_meta( 'description' ) ) );
-		$this->assertEquals( 'test_author', get_the_author_meta( 'user_description' ) );
+		$this->assertSame( 'test_author', trim( get_the_author_meta( 'description' ) ) );
+		$this->assertSame( 'test_author', get_the_author_meta( 'user_description' ) );
 		add_user_meta( self::$author_id, 'user_description', 'user description' );
-		$this->assertEquals( 'user description', get_user_meta( self::$author_id, 'user_description', true ) );
+		$this->assertSame( 'user description', get_user_meta( self::$author_id, 'user_description', true ) );
 		// user_description in meta is ignored. The content of description is returned instead.
-		// See #20285
-		$this->assertEquals( 'test_author', get_the_author_meta( 'user_description' ) );
-		$this->assertEquals( 'test_author', trim( get_the_author_meta( 'description' ) ) );
+		// See #20285.
+		$this->assertSame( 'test_author', get_the_author_meta( 'user_description' ) );
+		$this->assertSame( 'test_author', trim( get_the_author_meta( 'description' ) ) );
 		update_user_meta( self::$author_id, 'user_description', '' );
-		$this->assertEquals( '', get_user_meta( self::$author_id, 'user_description', true ) );
-		$this->assertEquals( 'test_author', get_the_author_meta( 'user_description' ) );
-		$this->assertEquals( 'test_author', trim( get_the_author_meta( 'description' ) ) );
+		$this->assertSame( '', get_user_meta( self::$author_id, 'user_description', true ) );
+		$this->assertSame( 'test_author', get_the_author_meta( 'user_description' ) );
+		$this->assertSame( 'test_author', trim( get_the_author_meta( 'description' ) ) );
 
-		$this->assertEquals( '', get_the_author_meta( 'does_not_exist' ) );
+		$this->assertSame( '', get_the_author_meta( 'does_not_exist' ) );
 	}
 
 	function test_get_the_author_meta_no_authordata() {
 		unset( $GLOBALS['authordata'] );
-		$this->assertEquals( '', get_the_author_meta( 'id' ) );
-		$this->assertEquals( '', get_the_author_meta( 'user_login' ) );
-		$this->assertEquals( '', get_the_author_meta( 'does_not_exist' ) );
+		$this->assertSame( '', get_the_author_meta( 'id' ) );
+		$this->assertSame( '', get_the_author_meta( 'user_login' ) );
+		$this->assertSame( '', get_the_author_meta( 'does_not_exist' ) );
 	}
 
 	function test_get_the_author_posts() {
-		// Test with no global post, result should be 0 because no author is found
-		$this->assertEquals( 0, get_the_author_posts() );
+		// Test with no global post, result should be 0 because no author is found.
+		$this->assertSame( 0, get_the_author_posts() );
 		$GLOBALS['post'] = self::$post_id;
 		$this->assertEquals( 1, get_the_author_posts() );
 	}
diff --git a/tests/user/capabilities.php b/tests/user/capabilities.php
index 487dcf25bf..11d0e2ace8 100644
--- a/tests/user/capabilities.php
+++ b/tests/user/capabilities.php
@@ -1,8 +1,8 @@
 <?php
 
-// Test roles and capabilities via the WP_User class
-
 /**
+ * Test roles and capabilities via the WP_User class.
+ *
  * @group user
  * @group capabilities
  */
@@ -43,7 +43,7 @@ class Tests_User_Capabilities extends WP_UnitTestCase {
 
 	function setUp() {
 		parent::setUp();
-		// keep track of users we create
+		// Keep track of users we create.
 		$this->_flush_roles();
 
 	}
@@ -54,8 +54,8 @@ class Tests_User_Capabilities extends WP_UnitTestCase {
 
 
 	function _flush_roles() {
-		// we want to make sure we're testing against the db, not just in-memory data
-		// this will flush everything and reload it from the db
+		// We want to make sure we're testing against the DB, not just in-memory data.
+		// This will flush everything and reload it from the DB.
 		unset( $GLOBALS['wp_user_roles'] );
 		global $wp_roles;
 		$wp_roles = new WP_Roles();
@@ -73,7 +73,7 @@ class Tests_User_Capabilities extends WP_UnitTestCase {
 		return $meta_value;
 	}
 
-	final private function _getSingleSitePrimitiveCaps() {
+	private function _getSingleSitePrimitiveCaps() {
 		return array(
 
 			'unfiltered_html'         => array( 'administrator', 'editor' ),
@@ -155,7 +155,7 @@ class Tests_User_Capabilities extends WP_UnitTestCase {
 
 	}
 
-	final private function _getMultiSitePrimitiveCaps() {
+	private function _getMultiSitePrimitiveCaps() {
 		return array(
 
 			'unfiltered_html'         => array(),
@@ -238,7 +238,7 @@ class Tests_User_Capabilities extends WP_UnitTestCase {
 
 	}
 
-	final private function _getSingleSiteMetaCaps() {
+	private function _getSingleSiteMetaCaps() {
 		return array(
 			'create_sites'                => array(),
 			'delete_sites'                => array(),
@@ -276,7 +276,7 @@ class Tests_User_Capabilities extends WP_UnitTestCase {
 		);
 	}
 
-	final private function _getMultiSiteMetaCaps() {
+	private function _getMultiSiteMetaCaps() {
 		return array(
 			'create_sites'                => array(),
 			'delete_sites'                => array(),
@@ -334,47 +334,51 @@ class Tests_User_Capabilities extends WP_UnitTestCase {
 		}
 	}
 
-	// test the tests
+	/**
+	 * Test the tests.
+	 */
 	function test_single_and_multisite_cap_tests_match() {
 		$single_primitive = array_keys( $this->_getSingleSitePrimitiveCaps() );
 		$multi_primitive  = array_keys( $this->_getMultiSitePrimitiveCaps() );
 		sort( $single_primitive );
 		sort( $multi_primitive );
-		$this->assertEquals( $single_primitive, $multi_primitive );
+		$this->assertSame( $single_primitive, $multi_primitive );
 
 		$single_meta = array_keys( $this->_getSingleSiteMetaCaps() );
 		$multi_meta  = array_keys( $this->_getMultiSiteMetaCaps() );
 		sort( $single_meta );
 		sort( $multi_meta );
-		$this->assertEquals( $single_meta, $multi_meta );
+		$this->assertSame( $single_meta, $multi_meta );
 	}
 
-	// test the tests
+	/**
+	 * Test the tests.
+	 */
 	function test_all_caps_of_users_are_being_tested() {
 		$caps = $this->getPrimitiveCapsAndRoles();
 
-		// `manage_links` is a special case
+		// `manage_links` is a special case.
 		$this->assertSame( '0', get_option( 'link_manager_enabled' ) );
-		// `unfiltered_upload` is a special case
+		// `unfiltered_upload` is a special case.
 		$this->assertFalse( defined( 'ALLOW_UNFILTERED_UPLOADS' ) );
 
 		foreach ( self::$users as $role => $user ) {
 
-			// make sure the user is valid
+			// Make sure the user is valid.
 			$this->assertTrue( $user->exists(), "User with {$role} role does not exist" );
 
 			$user_caps = $user->allcaps;
 
 			unset(
-				// `manage_links` is a special case
+				// `manage_links` is a special case.
 				$user_caps['manage_links'],
-				// `unfiltered_upload` is a special case
+				// `unfiltered_upload` is a special case.
 				$user_caps['unfiltered_upload']
 			);
 
 			$diff = array_diff( array_keys( $user_caps ), array_keys( $caps ) );
 
-			$this->assertEquals( array(), $diff, "User with {$role} role has capabilities that aren't being tested" );
+			$this->assertSame( array(), $diff, "User with {$role} role has capabilities that aren't being tested" );
 
 		}
 
@@ -406,9 +410,9 @@ class Tests_User_Capabilities extends WP_UnitTestCase {
 		);
 
 		unset(
-			// `manage_links` is a special case in the caps tests:
+			// `manage_links` is a special case in the caps tests.
 			$expected['manage_links'],
-			// `unfiltered_upload` is a special case in the caps tests:
+			// `unfiltered_upload` is a special case in the caps tests.
 			$expected['unfiltered_upload']
 		);
 
@@ -505,17 +509,19 @@ class Tests_User_Capabilities extends WP_UnitTestCase {
 		$this->assertSame( array(), $incorrect_meta_cap_checks, 'These capabilities are not meta' );
 	}
 
-	// test the default roles and caps
+	/**
+	 * Test the default roles and caps.
+	 */
 	function test_all_roles_and_caps() {
 		$caps = $this->getAllCapsAndRoles();
 
 		foreach ( self::$users as $role => $user ) {
 
-			// make sure the user is valid
+			// Make sure the user is valid.
 			$this->assertTrue( $user->exists(), "User with {$role} role does not exist" );
 
-			// make sure the role name is correct
-			$this->assertEquals( array( $role ), $user->roles, "User should only have the {$role} role" );
+			// Make sure the role name is correct.
+			$this->assertSame( array( $role ), $user->roles, "User should only have the {$role} role" );
 
 			foreach ( $caps as $cap => $roles ) {
 				if ( in_array( $role, $roles, true ) ) {
@@ -589,7 +595,9 @@ class Tests_User_Capabilities extends WP_UnitTestCase {
 		return $allcaps;
 	}
 
-	// special case for the link manager
+	/**
+	 * Special case for the link manager.
+	 */
 	function test_link_manager_caps() {
 		$caps = array(
 			'manage_links' => array( 'administrator', 'editor' ),
@@ -597,7 +605,7 @@ class Tests_User_Capabilities extends WP_UnitTestCase {
 
 		$this->assertSame( '0', get_option( 'link_manager_enabled' ) );
 
-		// no-one should have access to the link manager by default
+		// No-one should have access to the link manager by default.
 		foreach ( self::$users as $role => $user ) {
 			foreach ( $caps as $cap => $roles ) {
 				$this->assertFalse( $user->has_cap( $cap ), "User with the {$role} role should not have the {$cap} capability" );
@@ -625,11 +633,13 @@ class Tests_User_Capabilities extends WP_UnitTestCase {
 
 	}
 
-	// special case for unfiltered uploads
+	/**
+	 * Special case for unfiltered uploads.
+	 */
 	function test_unfiltered_upload_caps() {
 		$this->assertFalse( defined( 'ALLOW_UNFILTERED_UPLOADS' ) );
 
-		// no-one should have this cap
+		// No-one should have this cap.
 		foreach ( self::$users as $role => $user ) {
 			$this->assertFalse( $user->has_cap( 'unfiltered_upload' ), "User with the {$role} role should not have the unfiltered_upload capability" );
 			$this->assertFalse( user_can( $user, 'unfiltered_upload' ), "User with the {$role} role should not have the unfiltered_upload capability" );
@@ -741,15 +751,17 @@ class Tests_User_Capabilities extends WP_UnitTestCase {
 		$this->assertFalse( user_can( $user, 'unfiltered_upload' ), 'Super Admins should not have the unfiltered_upload capability' );
 	}
 
-	// a role that doesn't exist
+	/**
+	 * A role that doesn't exist.
+	 */
 	function test_bogus_role() {
 		$user = self::factory()->user->create_and_get( array( 'role' => 'invalid_role' ) );
 
-		// make sure the user is valid
+		// Make sure the user is valid.
 		$this->assertTrue( $user->exists(), 'User does not exist' );
 
-		// make sure the role name is correct
-		$this->assertEquals( array(), $user->roles, 'User should not have any roles' );
+		// Make sure the role name is correct.
+		$this->assertSame( array(), $user->roles, 'User should not have any roles' );
 
 		$caps = $this->getAllCapsAndRoles();
 
@@ -759,17 +771,19 @@ class Tests_User_Capabilities extends WP_UnitTestCase {
 		}
 	}
 
-	// a user with multiple roles
+	/**
+	 * A user with multiple roles.
+	 */
 	function test_user_subscriber_contributor() {
 		$user = self::$users['subscriber'];
 
-		// make sure the user is valid
+		// Make sure the user is valid.
 		$this->assertTrue( $user->exists(), 'User does not exist' );
 
 		$user->add_role( 'contributor' );
 
-		// user should have two roles now
-		$this->assertEquals( array( 'subscriber', 'contributor' ), $user->roles );
+		// User should have two roles now.
+		$this->assertSame( array( 'subscriber', 'contributor' ), $user->roles );
 
 		$caps = $this->getAllCapsAndRoles();
 
@@ -784,12 +798,14 @@ class Tests_User_Capabilities extends WP_UnitTestCase {
 		}
 
 		$user->remove_role( 'contributor' );
-		// user should have one role now
-		$this->assertEquals( array( 'subscriber' ), $user->roles );
+		// User should have one role now.
+		$this->assertSame( array( 'subscriber' ), $user->roles );
 
 	}
 
-	// newly added empty role
+	/**
+	 * Newly added empty role.
+	 */
 	function test_add_empty_role() {
 		global $wp_roles;
 
@@ -801,11 +817,11 @@ class Tests_User_Capabilities extends WP_UnitTestCase {
 
 		$user = self::factory()->user->create_and_get( array( 'role' => $role_name ) );
 
-		// make sure the user is valid
+		// Make sure the user is valid.
 		$this->assertTrue( $user->exists(), 'User does not exist' );
 
-		// make sure the role name is correct
-		$this->assertEquals( array( $role_name ), $user->roles );
+		// Make sure the role name is correct.
+		$this->assertSame( array( $role_name ), $user->roles );
 
 		$caps = $this->getAllCapsAndRoles();
 
@@ -814,13 +830,15 @@ class Tests_User_Capabilities extends WP_UnitTestCase {
 			$this->assertFalse( user_can( $user, $cap ), "User should not have the {$cap} capability" );
 		}
 
-		// clean up
+		// Clean up.
 		remove_role( $role_name );
 		$this->_flush_roles();
 		$this->assertFalse( $wp_roles->is_role( $role_name ) );
 	}
 
-	// newly added role
+	/**
+	 * Newly added role.
+	 */
 	function test_add_role() {
 		global $wp_roles;
 
@@ -838,16 +856,16 @@ class Tests_User_Capabilities extends WP_UnitTestCase {
 
 		$user = self::factory()->user->create_and_get( array( 'role' => $role_name ) );
 
-		// make sure the user is valid
+		// Make sure the user is valid.
 		$this->assertTrue( $user->exists(), 'User does not exist' );
 
-		// make sure the role name is correct
-		$this->assertEquals( array( $role_name ), $user->roles );
+		// Make sure the role name is correct.
+		$this->assertSame( array( $role_name ), $user->roles );
 
 		$caps = $this->getPrimitiveCapsAndRoles();
 
 		foreach ( $caps as $cap => $roles ) {
-			// the user should have all the above caps
+			// The user should have all the above caps.
 			if ( isset( $expected_caps[ $cap ] ) ) {
 				$this->assertTrue( $user->has_cap( $cap ), "User should have the {$cap} capability" );
 				$this->assertTrue( user_can( $user, $cap ), "User should have the {$cap} capability" );
@@ -857,38 +875,40 @@ class Tests_User_Capabilities extends WP_UnitTestCase {
 			}
 		}
 
-		// clean up
+		// Clean up.
 		remove_role( $role_name );
 		$this->_flush_roles();
 		$this->assertFalse( $wp_roles->is_role( $role_name ) );
 	}
 
+	/**
+	 * Change the capabilites associated with a role and make sure the change
+	 * is reflected in has_cap().
+	 */
 	function test_role_add_cap() {
-		// change the capabilites associated with a role and make sure the change is reflected in has_cap()
-
 		global $wp_roles;
 		$role_name = 'janitor';
 		add_role( $role_name, 'Janitor', array( 'level_1' => true ) );
 		$this->_flush_roles();
 		$this->assertTrue( $wp_roles->is_role( $role_name ) );
 
-		// assign a user to that role
+		// Assign a user to that role.
 		$id = self::factory()->user->create( array( 'role' => $role_name ) );
 
-		// now add a cap to the role
+		// Now add a cap to the role.
 		$wp_roles->add_cap( $role_name, 'sweep_floor' );
 		$this->_flush_roles();
 
 		$user = new WP_User( $id );
 		$this->assertTrue( $user->exists(), "Problem getting user $id" );
-		$this->assertEquals( array( $role_name ), $user->roles );
+		$this->assertSame( array( $role_name ), $user->roles );
 
-		// the user should have all the above caps
+		// The user should have all the above caps.
 		$this->assertTrue( $user->has_cap( $role_name ) );
 		$this->assertTrue( $user->has_cap( 'level_1' ) );
 		$this->assertTrue( $user->has_cap( 'sweep_floor' ) );
 
-		// shouldn't have any other caps
+		// Shouldn't have any other caps.
 		$caps = $this->getAllCapsAndRoles();
 		foreach ( $caps as $cap => $roles ) {
 			if ( 'level_1' !== $cap ) {
@@ -896,16 +916,18 @@ class Tests_User_Capabilities extends WP_UnitTestCase {
 			}
 		}
 
-		// clean up
+		// Clean up.
 		remove_role( $role_name );
 		$this->_flush_roles();
 		$this->assertFalse( $wp_roles->is_role( $role_name ) );
 
 	}
 
+	/**
+	 * Change the capabilites associated with a role and make sure the change
+	 * is reflected in has_cap().
+	 */
 	function test_role_remove_cap() {
-		// change the capabilites associated with a role and make sure the change is reflected in has_cap()
-
 		global $wp_roles;
 		$role_name = 'janitor';
 		add_role(
@@ -920,59 +942,60 @@ class Tests_User_Capabilities extends WP_UnitTestCase {
 		$this->_flush_roles();
 		$this->assertTrue( $wp_roles->is_role( $role_name ) );
 
-		// assign a user to that role
+		// Assign a user to that role.
 		$id = self::factory()->user->create( array( 'role' => $role_name ) );
 
-		// now remove a cap from the role
+		// Now remove a cap from the role.
 		$wp_roles->remove_cap( $role_name, 'polish_doorknobs' );
 		$this->_flush_roles();
 
 		$user = new WP_User( $id );
 		$this->assertTrue( $user->exists(), "Problem getting user $id" );
-		$this->assertEquals( array( $role_name ), $user->roles );
+		$this->assertSame( array( $role_name ), $user->roles );
 
-		// the user should have all the above caps
+		// The user should have all the above caps.
 		$this->assertTrue( $user->has_cap( $role_name ) );
 		$this->assertTrue( $user->has_cap( 'level_1' ) );
 		$this->assertTrue( $user->has_cap( 'sweep_floor' ) );
 
-		// shouldn't have the removed cap
+		// Shouldn't have the removed cap.
 		$this->assertFalse( $user->has_cap( 'polish_doorknobs' ) );
 
-		// clean up
+		// Clean up.
 		remove_role( $role_name );
 		$this->_flush_roles();
 		$this->assertFalse( $wp_roles->is_role( $role_name ) );
 
 	}
 
+	/**
+	 * Add an extra capability to a user.
+	 */
 	function test_user_add_cap() {
-		// add an extra capability to a user
-
-		// there are two contributors
+		// There are two contributors.
 		$id_1 = self::factory()->user->create( array( 'role' => 'contributor' ) );
 		$id_2 = self::factory()->user->create( array( 'role' => 'contributor' ) );
 
-		// user 1 has an extra capability
+		// User 1 has an extra capability.
 		$user_1 = new WP_User( $id_1 );
 		$this->assertTrue( $user_1->exists(), "Problem getting user $id_1" );
 		$user_1->add_cap( 'publish_posts' );
 
-		// re-fetch both users from the db
+		// Re-fetch both users from the DB.
 		$user_1 = new WP_User( $id_1 );
 		$this->assertTrue( $user_1->exists(), "Problem getting user $id_1" );
 		$user_2 = new WP_User( $id_2 );
 		$this->assertTrue( $user_2->exists(), "Problem getting user $id_2" );
 
-		// make sure they're both still contributors
-		$this->assertEquals( array( 'contributor' ), $user_1->roles );
-		$this->assertEquals( array( 'contributor' ), $user_2->roles );
+		// Make sure they're both still contributors.
+		$this->assertSame( array( 'contributor' ), $user_1->roles );
+		$this->assertSame( array( 'contributor' ), $user_2->roles );
 
-		// check the extra cap on both users
+		// Check the extra cap on both users.
 		$this->assertTrue( $user_1->has_cap( 'publish_posts' ) );
 		$this->assertFalse( $user_2->has_cap( 'publish_posts' ) );
 
-		// make sure the other caps didn't get messed up
+		// Make sure the other caps didn't get messed up.
 		$caps = $this->getAllCapsAndRoles();
 		foreach ( $caps as $cap => $roles ) {
 			if ( in_array( 'contributor', $roles, true ) || 'publish_posts' === $cap ) {
@@ -984,107 +1007,110 @@ class Tests_User_Capabilities extends WP_UnitTestCase {
 
 	}
 
+	/**
+	 * Add an extra capability to a user then remove it.
+	 */
 	function test_user_remove_cap() {
-		// add an extra capability to a user then remove it
-
-		// there are two contributors
+		// There are two contributors.
 		$id_1 = self::factory()->user->create( array( 'role' => 'contributor' ) );
 		$id_2 = self::factory()->user->create( array( 'role' => 'contributor' ) );
 
-		// user 1 has an extra capability
+		// User 1 has an extra capability.
 		$user_1 = new WP_User( $id_1 );
 		$this->assertTrue( $user_1->exists(), "Problem getting user $id_1" );
 		$user_1->add_cap( 'publish_posts' );
 
-		// now remove the extra cap
+		// Now remove the extra cap.
 		$user_1->remove_cap( 'publish_posts' );
 
-		// re-fetch both users from the db
+		// Re-fetch both users from the DB.
 		$user_1 = new WP_User( $id_1 );
 		$this->assertTrue( $user_1->exists(), "Problem getting user $id_1" );
 		$user_2 = new WP_User( $id_2 );
 		$this->assertTrue( $user_2->exists(), "Problem getting user $id_2" );
 
-		// make sure they're both still contributors
-		$this->assertEquals( array( 'contributor' ), $user_1->roles );
-		$this->assertEquals( array( 'contributor' ), $user_2->roles );
+		// Make sure they're both still contributors.
+		$this->assertSame( array( 'contributor' ), $user_1->roles );
+		$this->assertSame( array( 'contributor' ), $user_2->roles );
 
-		// check the removed cap on both users
+		// Check the removed cap on both users.
 		$this->assertFalse( $user_1->has_cap( 'publish_posts' ) );
 		$this->assertFalse( $user_2->has_cap( 'publish_posts' ) );
 
 	}
 
+	/**
+	 * Make sure the user_level is correctly set and changed with the user's role.
+	 */
 	function test_user_level_update() {
-		// make sure the user_level is correctly set and changed with the user's role
-
-		// user starts as an author
+		// User starts as an author.
 		$id   = self::factory()->user->create( array( 'role' => 'author' ) );
 		$user = new WP_User( $id );
 		$this->assertTrue( $user->exists(), "Problem getting user $id" );
 
-		// author = user level 2
+		// Author = user level 2.
 		$this->assertEquals( 2, $user->user_level );
 
-		// they get promoted to editor - level should get bumped to 7
+		// They get promoted to editor - level should get bumped to 7.
 		$user->set_role( 'editor' );
-		$this->assertEquals( 7, $user->user_level );
+		$this->assertSame( 7, $user->user_level );
 
-		// demoted to contributor - level is reduced to 1
+		// Demoted to contributor - level is reduced to 1.
 		$user->set_role( 'contributor' );
-		$this->assertEquals( 1, $user->user_level );
+		$this->assertSame( 1, $user->user_level );
 
-		// if they have two roles, user_level should be the max of the two
+		// If they have two roles, user_level should be the max of the two.
 		$user->add_role( 'editor' );
-		$this->assertEquals( array( 'contributor', 'editor' ), $user->roles );
-		$this->assertEquals( 7, $user->user_level );
+		$this->assertSame( array( 'contributor', 'editor' ), $user->roles );
+		$this->assertSame( 7, $user->user_level );
 	}
 
 	function test_user_remove_all_caps() {
-		// user starts as an author
+		// User starts as an author.
 		$id   = self::factory()->user->create( array( 'role' => 'author' ) );
 		$user = new WP_User( $id );
 		$this->assertTrue( $user->exists(), "Problem getting user $id" );
 
-		// add some extra capabilities
+		// Add some extra capabilities.
 		$user->add_cap( 'make_coffee' );
 		$user->add_cap( 'drink_coffee' );
 
-		// re-fetch
+		// Re-fetch.
 		$user = new WP_User( $id );
 		$this->assertTrue( $user->exists(), "Problem getting user $id" );
 
 		$this->assertTrue( $user->has_cap( 'make_coffee' ) );
 		$this->assertTrue( $user->has_cap( 'drink_coffee' ) );
 
-		// all caps are removed
+		// All caps are removed.
 		$user->remove_all_caps();
 
-		// re-fetch
+		// Re-fetch.
 		$user = new WP_User( $id );
 		$this->assertTrue( $user->exists(), "Problem getting user $id" );
 
-		// all capabilities for the user should be gone
+		// All capabilities for the user should be gone.
 		foreach ( $this->getAllCapsAndRoles() as $cap => $roles ) {
 			$this->assertFalse( $user->has_cap( $cap ), "User should not have the {$cap} capability" );
 		}
 
-		// the extra capabilities should be gone
+		// The extra capabilities should be gone.
 		$this->assertFalse( $user->has_cap( 'make_coffee' ) );
 		$this->assertFalse( $user->has_cap( 'drink_coffee' ) );
 
-		// user level should be empty
+		// User level should be empty.
 		$this->assertEmpty( $user->user_level );
 
 	}
 
+	/**
+	 * Simple tests for some common meta capabilities.
+	 */
 	function test_post_meta_caps() {
-		// simple tests for some common meta capabilities
-
-		// Get our author
+		// Get our author.
 		$author = self::$users['author'];
 
-		// make a post
+		// Make a post.
 		$post = self::factory()->post->create(
 			array(
 				'post_author' => $author->ID,
@@ -1092,43 +1118,43 @@ class Tests_User_Capabilities extends WP_UnitTestCase {
 			)
 		);
 
-		// the author of the post
+		// The author of the post.
 		$this->assertTrue( $author->exists(), "Problem getting user $author->ID" );
 
-		// add some other users
+		// Add some other users.
 		$admin       = new WP_User( self::factory()->user->create( array( 'role' => 'administrator' ) ) );
 		$author_2    = new WP_User( self::factory()->user->create( array( 'role' => 'author' ) ) );
 		$editor      = new WP_User( self::factory()->user->create( array( 'role' => 'editor' ) ) );
 		$contributor = new WP_User( self::factory()->user->create( array( 'role' => 'contributor' ) ) );
 
-		// administrators, editors and the post owner can edit it
+		// Administrators, editors and the post owner can edit it.
 		$this->assertTrue( $admin->has_cap( 'edit_post', $post ) );
 		$this->assertTrue( $author->has_cap( 'edit_post', $post ) );
 		$this->assertTrue( $editor->has_cap( 'edit_post', $post ) );
-		// other authors and contributors can't
+		// Other authors and contributors can't.
 		$this->assertFalse( $author_2->has_cap( 'edit_post', $post ) );
 		$this->assertFalse( $contributor->has_cap( 'edit_post', $post ) );
 
-		// administrators, editors and the post owner can delete it
+		// Administrators, editors and the post owner can delete it.
 		$this->assertTrue( $admin->has_cap( 'delete_post', $post ) );
 		$this->assertTrue( $author->has_cap( 'delete_post', $post ) );
 		$this->assertTrue( $editor->has_cap( 'delete_post', $post ) );
-		// other authors and contributors can't
+		// Other authors and contributors can't.
 		$this->assertFalse( $author_2->has_cap( 'delete_post', $post ) );
 		$this->assertFalse( $contributor->has_cap( 'delete_post', $post ) );
 
-		// administrators, editors, and authors can publish it
+		// Administrators, editors, and authors can publish it.
 		$this->assertTrue( $admin->has_cap( 'publish_post', $post ) );
 		$this->assertTrue( $author->has_cap( 'publish_post', $post ) );
 		$this->assertTrue( $editor->has_cap( 'publish_post', $post ) );
 		$this->assertTrue( $author_2->has_cap( 'publish_post', $post ) );
-		// contributors can't
+		// Contributors can't.
 		$this->assertFalse( $contributor->has_cap( 'publish_post', $post ) );
 
 		register_post_type( 'something', array( 'capabilities' => array( 'edit_posts' => 'draw_somethings' ) ) );
 		$something = get_post_type_object( 'something' );
-		$this->assertEquals( 'draw_somethings', $something->cap->edit_posts );
-		$this->assertEquals( 'draw_somethings', $something->cap->create_posts );
+		$this->assertSame( 'draw_somethings', $something->cap->edit_posts );
+		$this->assertSame( 'draw_somethings', $something->cap->create_posts );
 
 		register_post_type(
 			'something',
@@ -1141,11 +1167,11 @@ class Tests_User_Capabilities extends WP_UnitTestCase {
 			)
 		);
 		$something = get_post_type_object( 'something' );
-		$this->assertEquals( 'draw_somethings', $something->cap->edit_posts );
-		$this->assertEquals( 'create_somethings', $something->cap->create_posts );
+		$this->assertSame( 'draw_somethings', $something->cap->edit_posts );
+		$this->assertSame( 'create_somethings', $something->cap->create_posts );
 		_unregister_post_type( 'something' );
 
-		// Test meta authorization callbacks
+		// Test meta authorization callbacks.
 		if ( function_exists( 'register_meta' ) ) {
 			$this->assertTrue( $admin->has_cap( 'edit_post_meta', $post ) );
 			$this->assertTrue( $admin->has_cap( 'add_post_meta', $post ) );
@@ -1180,7 +1206,7 @@ class Tests_User_Capabilities extends WP_UnitTestCase {
 	 * @dataProvider authorless_post_statuses
 	 */
 	function test_authorless_post( $status ) {
-		// Make a post without an author
+		// Make a post without an author.
 		$post = self::factory()->post->create(
 			array(
 				'post_author' => 0,
@@ -1189,21 +1215,21 @@ class Tests_User_Capabilities extends WP_UnitTestCase {
 			)
 		);
 
-		// Add an editor and contributor
+		// Add an editor and contributor.
 		$editor      = self::$users['editor'];
 		$contributor = self::$users['contributor'];
 
-		// editor can publish, edit, view, and trash
+		// Editor can publish, edit, view, and trash.
 		$this->assertTrue( $editor->has_cap( 'publish_post', $post ) );
 		$this->assertTrue( $editor->has_cap( 'edit_post', $post ) );
 		$this->assertTrue( $editor->has_cap( 'delete_post', $post ) );
 		$this->assertTrue( $editor->has_cap( 'read_post', $post ) );
 
-		// a contributor cannot (except read a published post)
+		// A contributor cannot (except read a published post).
 		$this->assertFalse( $contributor->has_cap( 'publish_post', $post ) );
 		$this->assertFalse( $contributor->has_cap( 'edit_post', $post ) );
 		$this->assertFalse( $contributor->has_cap( 'delete_post', $post ) );
-		$this->assertEquals( 'publish' === $status, $contributor->has_cap( 'read_post', $post ) );
+		$this->assertSame( 'publish' === $status, $contributor->has_cap( 'read_post', $post ) );
 	}
 
 	/**
@@ -1216,7 +1242,7 @@ class Tests_User_Capabilities extends WP_UnitTestCase {
 		$contributor = self::$users['contributor'];
 		$subscriber  = self::$users['subscriber'];
 
-		// create_posts isn't a real cap.
+		// 'create_posts' isn't a real cap.
 		$this->assertFalse( $admin->has_cap( 'create_posts' ) );
 		$this->assertFalse( $author->has_cap( 'create_posts' ) );
 		$this->assertFalse( $editor->has_cap( 'create_posts' ) );
@@ -1226,7 +1252,7 @@ class Tests_User_Capabilities extends WP_UnitTestCase {
 		register_post_type( 'foobar' );
 		$cap = get_post_type_object( 'foobar' )->cap;
 
-		$this->assertEquals( 'edit_posts', $cap->create_posts );
+		$this->assertSame( 'edit_posts', $cap->create_posts );
 
 		$this->assertTrue( $admin->has_cap( $cap->create_posts ) );
 		$this->assertTrue( $author->has_cap( $cap->create_posts ) );
@@ -1236,11 +1262,11 @@ class Tests_User_Capabilities extends WP_UnitTestCase {
 
 		_unregister_post_type( 'foobar' );
 
-		// Primitive capability edit_foobars is not assigned to any users.
+		// Primitive capability 'edit_foobars' is not assigned to any users.
 		register_post_type( 'foobar', array( 'capability_type' => array( 'foobar', 'foobars' ) ) );
 		$cap = get_post_type_object( 'foobar' )->cap;
 
-		$this->assertEquals( 'edit_foobars', $cap->create_posts );
+		$this->assertSame( 'edit_foobars', $cap->create_posts );
 
 		$this->assertFalse( $admin->has_cap( $cap->create_posts ) );
 		$this->assertFalse( $author->has_cap( $cap->create_posts ) );
@@ -1248,7 +1274,7 @@ class Tests_User_Capabilities extends WP_UnitTestCase {
 		$this->assertFalse( $contributor->has_cap( $cap->create_posts ) );
 		$this->assertFalse( $subscriber->has_cap( $cap->create_posts ) );
 
-		// Add edit_foobars primitive cap to a user.
+		// Add 'edit_foobars' primitive cap to a user.
 		$admin->add_cap( 'edit_foobars', true );
 		$admin = new WP_User( $admin->ID );
 		$this->assertTrue( $admin->has_cap( $cap->create_posts ) );
@@ -1262,8 +1288,8 @@ class Tests_User_Capabilities extends WP_UnitTestCase {
 		_unregister_post_type( 'foobar' );
 
 		$cap = get_post_type_object( 'attachment' )->cap;
-		$this->assertEquals( 'upload_files', $cap->create_posts );
-		$this->assertEquals( 'edit_posts', $cap->edit_posts );
+		$this->assertSame( 'upload_files', $cap->create_posts );
+		$this->assertSame( 'edit_posts', $cap->edit_posts );
 
 		$this->assertTrue( $author->has_cap( $cap->create_posts ) );
 		$this->assertTrue( $author->has_cap( $cap->edit_posts ) );
@@ -1272,13 +1298,14 @@ class Tests_User_Capabilities extends WP_UnitTestCase {
 		$this->assertFalse( $subscriber->has_cap( $cap->create_posts ) );
 	}
 
+	/**
+	 * Simple tests for some common meta capabilities.
+	 */
 	function test_page_meta_caps() {
-		// simple tests for some common meta capabilities
-
-		// Get our author
+		// Get our author.
 		$author = self::$users['author'];
 
-		// make a page
+		// Make a page.
 		$page = self::factory()->post->create(
 			array(
 				'post_author' => $author->ID,
@@ -1286,27 +1313,27 @@ class Tests_User_Capabilities extends WP_UnitTestCase {
 			)
 		);
 
-		// the author of the page
+		// The author of the page.
 		$this->assertTrue( $author->exists(), 'Problem getting user ' . $author->ID );
 
-		// add some other users
+		// Add some other users.
 		$admin       = self::$users['administrator'];
 		$author_2    = new WP_User( self::factory()->user->create( array( 'role' => 'author' ) ) );
 		$editor      = self::$users['editor'];
 		$contributor = self::$users['contributor'];
 
-		// administrators, editors and the post owner can edit it
+		// Administrators, editors and the post owner can edit it.
 		$this->assertTrue( $admin->has_cap( 'edit_page', $page ) );
 		$this->assertTrue( $editor->has_cap( 'edit_page', $page ) );
-		// other authors and contributors can't
+		// Other authors and contributors can't.
 		$this->assertFalse( $author->has_cap( 'edit_page', $page ) );
 		$this->assertFalse( $author_2->has_cap( 'edit_page', $page ) );
 		$this->assertFalse( $contributor->has_cap( 'edit_page', $page ) );
 
-		// administrators, editors and the post owner can delete it
+		// Administrators, editors and the post owner can delete it.
 		$this->assertTrue( $admin->has_cap( 'delete_page', $page ) );
 		$this->assertTrue( $editor->has_cap( 'delete_page', $page ) );
-		// other authors and contributors can't
+		// Other authors and contributors can't.
 		$this->assertFalse( $author->has_cap( 'delete_page', $page ) );
 		$this->assertFalse( $author_2->has_cap( 'delete_page', $page ) );
 		$this->assertFalse( $contributor->has_cap( 'delete_page', $page ) );
@@ -1335,7 +1362,7 @@ class Tests_User_Capabilities extends WP_UnitTestCase {
 
 		foreach ( $expected as $meta_cap => $primitive_cap ) {
 			$caps = map_meta_cap( $tax->cap->$meta_cap, $user->ID );
-			$this->assertEquals(
+			$this->assertSame(
 				array(
 					$primitive_cap,
 				),
@@ -1444,7 +1471,7 @@ class Tests_User_Capabilities extends WP_UnitTestCase {
 
 		foreach ( $expected as $meta_cap => $primitive_cap ) {
 			$caps = map_meta_cap( $tax->cap->$meta_cap, $user->ID );
-			$this->assertEquals(
+			$this->assertSame(
 				array(
 					$primitive_cap,
 				),
@@ -1499,7 +1526,7 @@ class Tests_User_Capabilities extends WP_UnitTestCase {
 		$this->assertNotEmpty( $user->caps );
 		$user->set_role( 'administrator' );
 		$this->assertNotEmpty( $user->caps );
-		$this->assertEquals( $caps, $user->caps );
+		$this->assertSame( $caps, $user->caps );
 	}
 
 	function test_current_user_can_for_blog() {
@@ -1540,11 +1567,11 @@ class Tests_User_Capabilities extends WP_UnitTestCase {
 
 		current_user_can_for_blog( $blog_id, 'edit_posts' );
 
-		$this->assertEquals( $orig_blog_id, get_current_blog_id() );
+		$this->assertSame( $orig_blog_id, get_current_blog_id() );
 	}
 
 	function _nullify_current_user() {
-		// Prevents fatal errors in ::tearDown()'s and other uses of restore_current_blog()
+		// Prevents fatal errors in ::tearDown()'s and other uses of restore_current_blog().
 		$function_stack = wp_debug_backtrace_summary( null, 0, false );
 		if ( in_array( 'restore_current_blog', $function_stack, true ) ) {
 			return;
@@ -1661,10 +1688,10 @@ class Tests_User_Capabilities extends WP_UnitTestCase {
 	 */
 	function test_contributor_cannot_edit_scheduled_post() {
 
-		// Add a contributor
+		// Add a contributor.
 		$contributor = self::$users['contributor'];
 
-		// Give them a scheduled post
+		// Give them a scheduled post.
 		$post = $this->factory->post->create_and_get(
 			array(
 				'post_author' => $contributor->ID,
@@ -1672,19 +1699,19 @@ class Tests_User_Capabilities extends WP_UnitTestCase {
 			)
 		);
 
-		// Ensure contributor can't edit or trash the post
+		// Ensure contributor can't edit or trash the post.
 		$this->assertFalse( user_can( $contributor->ID, 'edit_post', $post->ID ) );
 		$this->assertFalse( user_can( $contributor->ID, 'delete_post', $post->ID ) );
 
-		// Test the tests
+		// Test the tests.
 		$this->assertTrue( defined( 'EMPTY_TRASH_DAYS' ) );
 		$this->assertNotEmpty( EMPTY_TRASH_DAYS );
 
-		// Trash it
+		// Trash it.
 		$trashed = wp_trash_post( $post->ID );
 		$this->assertNotEmpty( $trashed );
 
-		// Ensure contributor can't edit, un-trash, or delete the post
+		// Ensure contributor can't edit, un-trash, or delete the post.
 		$this->assertFalse( user_can( $contributor->ID, 'edit_post', $post->ID ) );
 		$this->assertFalse( user_can( $contributor->ID, 'delete_post', $post->ID ) );
 
@@ -1746,6 +1773,29 @@ class Tests_User_Capabilities extends WP_UnitTestCase {
 		}
 	}
 
+	/**
+	 * @ticket 48653
+	 * @expectedIncorrectUsage map_meta_cap
+	 */
+	function test_require_edit_others_posts_if_post_status_doesnt_exist() {
+		register_post_status( 'existed' );
+		$post_id = self::factory()->post->create( array( 'post_status' => 'existed' ) );
+		_unregister_post_status( 'existed' );
+
+		$subscriber_id = self::$users['subscriber']->ID;
+		$editor_id     = self::$users['editor']->ID;
+
+		foreach ( array( 'read_post', 'read_page' ) as $cap ) {
+			wp_set_current_user( $subscriber_id );
+			$this->assertSame( array( 'edit_others_posts' ), map_meta_cap( $cap, $subscriber_id, $post_id ) );
+			$this->assertFalse( current_user_can( $cap, $post_id ) );
+
+			wp_set_current_user( $editor_id );
+			$this->assertSame( array( 'edit_others_posts' ), map_meta_cap( $cap, $editor_id, $post_id ) );
+			$this->assertTrue( current_user_can( $cap, $post_id ) );
+		}
+	}
+
 	/**
 	 * @ticket 17253
 	 */
@@ -1764,7 +1814,7 @@ class Tests_User_Capabilities extends WP_UnitTestCase {
 		$author      = self::$users['author'];
 		$contributor = self::$users['contributor'];
 
-		$this->assertEquals( 'edit_pages', $cpt->cap->edit_posts );
+		$this->assertSame( 'edit_pages', $cpt->cap->edit_posts );
 		$this->assertTrue( user_can( $admin->ID, $cpt->cap->edit_posts ) );
 		$this->assertTrue( user_can( $editor->ID, $cpt->cap->edit_posts ) );
 		$this->assertFalse( user_can( $author->ID, $cpt->cap->edit_posts ) );
@@ -1807,7 +1857,7 @@ class Tests_User_Capabilities extends WP_UnitTestCase {
 			$this->assertFalse( current_user_can( $cap ), "Non-logged-in user should not have the {$cap} capability" );
 		}
 
-		// Special cases for link manager and unfiltered uploads:
+		// Special cases for link manager and unfiltered uploads.
 		$this->assertFalse( current_user_can( 'manage_links' ), 'Non-logged-in user should not have the manage_links capability' );
 		$this->assertFalse( current_user_can( 'unfiltered_upload' ), 'Non-logged-in user should not have the unfiltered_upload capability' );
 
@@ -1824,7 +1874,7 @@ class Tests_User_Capabilities extends WP_UnitTestCase {
 
 		wp_logout();
 
-		$this->assertEquals( 0, get_current_user_id() );
+		$this->assertSame( 0, get_current_user_id() );
 
 	}
 
@@ -2142,9 +2192,9 @@ class Tests_User_Capabilities extends WP_UnitTestCase {
 	 */
 	function test_block_caps( $role, $cap, $use_post, $expected ) {
 		if ( $use_post ) {
-			$this->assertEquals( $expected, self::$users[ $role ]->has_cap( $cap, self::$block_id ) );
+			$this->assertSame( $expected, self::$users[ $role ]->has_cap( $cap, self::$block_id ) );
 		} else {
-			$this->assertEquals( $expected, self::$users[ $role ]->has_cap( $cap ) );
+			$this->assertSame( $expected, self::$users[ $role ]->has_cap( $cap ) );
 		}
 	}
 
diff --git a/tests/user/countUsers.php b/tests/user/countUsers.php
index 2f36ed75c8..e782f90f8d 100644
--- a/tests/user/countUsers.php
+++ b/tests/user/countUsers.php
@@ -12,7 +12,7 @@ class Tests_User_CountUsers extends WP_UnitTestCase {
 	 * @group ms-excluded
 	 */
 	public function test_count_users_is_accurate( $strategy ) {
-		// Setup users
+		// Setup users.
 		$admin       = self::factory()->user->create(
 			array(
 				'role' => 'administrator',
@@ -49,10 +49,10 @@ class Tests_User_CountUsers extends WP_UnitTestCase {
 			)
 		);
 
-		// Test user counts
+		// Test user counts.
 		$count = count_users( $strategy );
 
-		$this->assertEquals( 8, $count['total_users'] );
+		$this->assertSame( 8, $count['total_users'] );
 		$this->assertEquals(
 			array(
 				'administrator' => 2,
@@ -76,7 +76,7 @@ class Tests_User_CountUsers extends WP_UnitTestCase {
 	 * @dataProvider data_count_users_strategies
 	 */
 	public function test_count_users_multisite_is_accurate( $strategy ) {
-		// Setup users
+		// Setup users.
 		$admin       = self::factory()->user->create(
 			array(
 				'role' => 'administrator',
@@ -113,7 +113,7 @@ class Tests_User_CountUsers extends WP_UnitTestCase {
 			)
 		);
 
-		// Setup blogs
+		// Setup blogs.
 		$blog_1 = (int) self::factory()->blog->create(
 			array(
 				'user_id' => $editor,
@@ -125,14 +125,14 @@ class Tests_User_CountUsers extends WP_UnitTestCase {
 			)
 		);
 
-		// Add users to blogs
+		// Add users to blogs.
 		add_user_to_blog( $blog_1, $subscriber, 'editor' );
 		add_user_to_blog( $blog_2, $none, 'contributor' );
 
-		// Test users counts on root site
+		// Test users counts on root site.
 		$count = count_users( $strategy );
 
-		$this->assertEquals( 8, $count['total_users'] );
+		$this->assertSame( 8, $count['total_users'] );
 		$this->assertEquals(
 			array(
 				'administrator' => 2,
@@ -145,12 +145,12 @@ class Tests_User_CountUsers extends WP_UnitTestCase {
 			$count['avail_roles']
 		);
 
-		// Test users counts on blog 1
+		// Test users counts on blog 1.
 		switch_to_blog( $blog_1 );
 		$count = count_users( $strategy );
 		restore_current_blog();
 
-		$this->assertEquals( 2, $count['total_users'] );
+		$this->assertSame( 2, $count['total_users'] );
 		$this->assertEquals(
 			array(
 				'administrator' => 1,
@@ -160,12 +160,12 @@ class Tests_User_CountUsers extends WP_UnitTestCase {
 			$count['avail_roles']
 		);
 
-		// Test users counts on blog 2
+		// Test users counts on blog 2.
 		switch_to_blog( $blog_2 );
 		$count = count_users( $strategy );
 		restore_current_blog();
 
-		$this->assertEquals( 2, $count['total_users'] );
+		$this->assertSame( 2, $count['total_users'] );
 		$this->assertEquals(
 			array(
 				'administrator' => 1,
@@ -197,7 +197,7 @@ class Tests_User_CountUsers extends WP_UnitTestCase {
 		restore_current_blog();
 
 		$count = count_users( $strategy, $site_id );
-		$this->assertEqualSetsWithIndex(
+		$this->assertSameSetsWithIndex(
 			array(
 				'tester' => 1,
 				'none'   => 0,
@@ -213,7 +213,7 @@ class Tests_User_CountUsers extends WP_UnitTestCase {
 	 */
 	public function test_count_users_is_accurate_with_multiple_roles( $strategy ) {
 
-		// Setup users
+		// Setup users.
 		$admin  = self::factory()->user->create(
 			array(
 				'role' => 'administrator',
@@ -227,7 +227,7 @@ class Tests_User_CountUsers extends WP_UnitTestCase {
 
 		get_userdata( $editor )->add_role( 'author' );
 
-		$this->assertEquals(
+		$this->assertSame(
 			array(
 				'editor',
 				'author',
@@ -235,10 +235,10 @@ class Tests_User_CountUsers extends WP_UnitTestCase {
 			get_userdata( $editor )->roles
 		);
 
-		// Test user counts
+		// Test user counts.
 		$count = count_users( $strategy );
 
-		$this->assertEquals( 3, $count['total_users'] );
+		$this->assertSame( 3, $count['total_users'] );
 		$this->assertEquals(
 			array(
 				'administrator' => 2,
@@ -278,7 +278,7 @@ class Tests_User_CountUsers extends WP_UnitTestCase {
 
 		$count2 = count_users( $strategy );
 
-		$this->assertEqualSets( $count, $count2 );
+		$this->assertSameSets( $count, $count2 );
 	}
 
 	function data_count_users_strategies() {
diff --git a/tests/user/dateQuery.php b/tests/user/dateQuery.php
index 434fd236d4..2dcfb02394 100644
--- a/tests/user/dateQuery.php
+++ b/tests/user/dateQuery.php
@@ -30,7 +30,7 @@ class Tests_User_DateQuery extends WP_UnitTestCase {
 			)
 		);
 
-		$this->assertEqualSets( array( $u1 ), wp_list_pluck( $uq->results, 'ID' ) );
+		$this->assertSameSets( array( $u1 ), wp_list_pluck( $uq->results, 'ID' ) );
 	}
 
 	/**
@@ -67,6 +67,6 @@ class Tests_User_DateQuery extends WP_UnitTestCase {
 			)
 		);
 
-		$this->assertEqualSets( array( $u1, $u2 ), wp_list_pluck( $uq->results, 'ID' ) );
+		$this->assertSameSets( array( $u1, $u2 ), wp_list_pluck( $uq->results, 'ID' ) );
 	}
 }
diff --git a/tests/user/getActiveBlogForUser.php b/tests/user/getActiveBlogForUser.php
index d6e792e26c..0d13583ae0 100644
--- a/tests/user/getActiveBlogForUser.php
+++ b/tests/user/getActiveBlogForUser.php
@@ -51,10 +51,10 @@ if ( is_multisite() ) :
 
 			$result = get_active_blog_for_user( self::$user_id );
 
-			wpmu_delete_blog( $site_id_one, true );
-			wpmu_delete_blog( $site_id_two, true );
+			wp_delete_site( $site_id_one );
+			wp_delete_site( $site_id_two );
 
-			$this->assertEquals( $primary_site_id, $result->id );
+			$this->assertSame( $primary_site_id, $result->id );
 		}
 
 		/**
@@ -69,9 +69,9 @@ if ( is_multisite() ) :
 
 			$result = get_active_blog_for_user( self::$user_id );
 
-			wpmu_delete_blog( $primary_site_id, true );
+			wp_delete_site( $primary_site_id );
 
-			$this->assertEquals( $primary_site_id, $result->id );
+			$this->assertSame( $primary_site_id, $result->id );
 		}
 
 		/**
@@ -83,7 +83,7 @@ if ( is_multisite() ) :
 			$site_id = self::factory()->blog->create(
 				array(
 					'user_id' => self::$user_id,
-					'meta'    => array( 'spam' => 1 ),
+					'spam'    => 1,
 				)
 			);
 
@@ -92,9 +92,9 @@ if ( is_multisite() ) :
 
 			$result = get_active_blog_for_user( self::$user_id );
 
-			wpmu_delete_blog( $site_id, true );
+			wp_delete_site( $site_id );
 
-			$this->assertEquals( $current_site_id, $result->id );
+			$this->assertSame( $current_site_id, $result->id );
 		}
 	}
 
diff --git a/tests/user/listAuthors.php b/tests/user/listAuthors.php
index ccaa733551..8908b39d0b 100644
--- a/tests/user/listAuthors.php
+++ b/tests/user/listAuthors.php
@@ -80,7 +80,7 @@ class Tests_User_ListAuthors extends WP_UnitTestCase {
 			'<li><a href="' . self::$user_urls[2] . '" title="Posts by paul">paul</a></li>' .
 			'<li><a href="' . self::$user_urls[0] . '" title="Posts by zack">zack</a></li>';
 
-		$this->AssertEquals( $expected['default'], wp_list_authors( array( 'echo' => false ) ) );
+		$this->assertSame( $expected['default'], wp_list_authors( array( 'echo' => false ) ) );
 	}
 
 	function test_wp_list_authors_orderby() {
@@ -89,7 +89,7 @@ class Tests_User_ListAuthors extends WP_UnitTestCase {
 			'<li><a href="' . self::$user_urls[1] . '" title="Posts by bob">bob</a></li>' .
 			'<li><a href="' . self::$user_urls[2] . '" title="Posts by paul">paul</a></li>';
 
-		$this->AssertEquals(
+		$this->assertSame(
 			$expected['post_count'],
 			wp_list_authors(
 				array(
@@ -106,7 +106,7 @@ class Tests_User_ListAuthors extends WP_UnitTestCase {
 			'<li><a href="' . self::$user_urls[1] . '" title="Posts by bob">bob</a></li>' .
 			'<li><a href="' . self::$user_urls[0] . '" title="Posts by zack">zack</a></li>';
 
-		$this->AssertEquals(
+		$this->assertSame(
 			$expected['id'],
 			wp_list_authors(
 				array(
@@ -124,7 +124,7 @@ class Tests_User_ListAuthors extends WP_UnitTestCase {
 			'<li><a href="' . self::$user_urls[2] . '" title="Posts by paul">paul</a> (3)</li>' .
 			'<li><a href="' . self::$user_urls[0] . '" title="Posts by zack">zack</a> (1)</li>';
 
-		$this->AssertEquals(
+		$this->assertSame(
 			$expected['optioncount'],
 			wp_list_authors(
 				array(
@@ -149,7 +149,7 @@ class Tests_User_ListAuthors extends WP_UnitTestCase {
 			'<li><a href="' . self::$user_urls[2] . '" title="Posts by paul">paul</a></li>' .
 			'<li><a href="' . self::$user_urls[0] . '" title="Posts by zack">zack</a></li>';
 
-		$this->AssertEquals(
+		$this->assertSame(
 			$expected['exclude_admin'],
 			wp_list_authors(
 				array(
@@ -166,7 +166,7 @@ class Tests_User_ListAuthors extends WP_UnitTestCase {
 			'<li><a href="' . self::$user_urls[2] . '" title="Posts by paul">paul norris</a></li>' .
 			'<li><a href="' . self::$user_urls[0] . '" title="Posts by zack">zack moon</a></li>';
 
-		$this->AssertEquals(
+		$this->assertSame(
 			$expected['show_fullname'],
 			wp_list_authors(
 				array(
@@ -186,7 +186,7 @@ class Tests_User_ListAuthors extends WP_UnitTestCase {
 			'<li><a href="' . self::$user_urls[2] . '" title="Posts by paul">paul</a></li>' .
 			'<li><a href="' . self::$user_urls[0] . '" title="Posts by zack">zack</a></li>';
 
-		$this->AssertEquals(
+		$this->assertSame(
 			$expected['hide_empty'],
 			wp_list_authors(
 				array(
@@ -217,7 +217,7 @@ class Tests_User_ListAuthors extends WP_UnitTestCase {
 			'<li><a href="' . self::$user_urls[2] . '" title="Posts by paul">paul</a> (<a href="' . $url2 . '">link to feed</a>)</li>' .
 			'<li><a href="' . self::$user_urls[0] . '" title="Posts by zack">zack</a> (<a href="' . $url0 . '">link to feed</a>)</li>';
 
-		$this->AssertEquals(
+		$this->assertSame(
 			$expected['feed'],
 			wp_list_authors(
 				array(
@@ -238,7 +238,7 @@ class Tests_User_ListAuthors extends WP_UnitTestCase {
 			'<li><a href="' . self::$user_urls[2] . '" title="Posts by paul">paul</a> <a href="' . $url2 . '"><img src="http://' . WP_TESTS_DOMAIN . '/path/to/a/graphic.png" style="border: none;" /></a></li>' .
 			'<li><a href="' . self::$user_urls[0] . '" title="Posts by zack">zack</a> <a href="' . $url0 . '"><img src="http://' . WP_TESTS_DOMAIN . '/path/to/a/graphic.png" style="border: none;" /></a></li>';
 
-		$this->AssertEquals(
+		$this->assertSame(
 			$expected['feed_image'],
 			wp_list_authors(
 				array(
@@ -262,7 +262,7 @@ class Tests_User_ListAuthors extends WP_UnitTestCase {
 			'<li><a href="' . self::$user_urls[2] . '" title="Posts by paul">paul</a> (<a href="' . $url2 . '">link to feed</a>)</li>' .
 			'<li><a href="' . self::$user_urls[0] . '" title="Posts by zack">zack</a> (<a href="' . $url0 . '">link to feed</a>)</li>';
 
-		$this->AssertEquals(
+		$this->assertSame(
 			$expected['feed_type'],
 			wp_list_authors(
 				array(
@@ -280,7 +280,7 @@ class Tests_User_ListAuthors extends WP_UnitTestCase {
 			'<a href="' . self::$user_urls[2] . '" title="Posts by paul">paul</a>, ' .
 			'<a href="' . self::$user_urls[0] . '" title="Posts by zack">zack</a>';
 
-		$this->AssertEquals(
+		$this->assertSame(
 			$expected['style'],
 			wp_list_authors(
 				array(
@@ -294,7 +294,7 @@ class Tests_User_ListAuthors extends WP_UnitTestCase {
 	function test_wp_list_authors_html() {
 		$expected['html'] = 'bob, paul, zack';
 
-		$this->AssertEquals(
+		$this->assertSame(
 			$expected['html'],
 			wp_list_authors(
 				array(
diff --git a/tests/user/mapMetaCap.php b/tests/user/mapMetaCap.php
index dc67dfeef9..9223a57d8d 100644
--- a/tests/user/mapMetaCap.php
+++ b/tests/user/mapMetaCap.php
@@ -42,7 +42,7 @@ class Tests_User_MapMetaCap extends WP_UnitTestCase {
 	 * @ticket 13905
 	 */
 	function test_capability_type_post_with_invalid_id() {
-		$this->assertEquals(
+		$this->assertSame(
 			array( 'do_not_allow' ),
 			map_meta_cap( 'edit_post', self::$user_id, self::$post_id + 1 )
 		);
@@ -60,29 +60,29 @@ class Tests_User_MapMetaCap extends WP_UnitTestCase {
 
 		$this->assertTrue( $post_type_object->map_meta_cap );
 
-		$this->assertEquals(
+		$this->assertSame(
 			array( 'edit_others_posts', 'edit_private_posts' ),
 			map_meta_cap( 'edit_post', self::$user_id, self::$post_id )
 		);
-		$this->assertEquals(
+		$this->assertSame(
 			array( 'edit_others_posts', 'edit_private_posts' ),
 			map_meta_cap( $post_type_object->cap->edit_post, self::$user_id, self::$post_id )
 		);
 
-		$this->assertEquals(
+		$this->assertSame(
 			array( 'read_private_posts' ),
 			map_meta_cap( 'read_post', self::$user_id, self::$post_id )
 		);
-		$this->assertEquals(
+		$this->assertSame(
 			array( 'read_private_posts' ),
 			map_meta_cap( $post_type_object->cap->read_post, self::$user_id, self::$post_id )
 		);
 
-		$this->assertEquals(
+		$this->assertSame(
 			array( 'delete_others_posts', 'delete_private_posts' ),
 			map_meta_cap( 'delete_post', self::$user_id, self::$post_id )
 		);
-		$this->assertEquals(
+		$this->assertSame(
 			array( 'delete_others_posts', 'delete_private_posts' ),
 			map_meta_cap( $post_type_object->cap->delete_post, self::$user_id, self::$post_id )
 		);
@@ -99,29 +99,29 @@ class Tests_User_MapMetaCap extends WP_UnitTestCase {
 
 		$post_type_object = get_post_type_object( self::$post_type );
 
-		$this->assertEquals(
+		$this->assertSame(
 			array( 'edit_others_books', 'edit_private_books' ),
 			map_meta_cap( 'edit_post', self::$user_id, self::$post_id )
 		);
-		$this->assertEquals(
+		$this->assertSame(
 			array( 'edit_others_books', 'edit_private_books' ),
 			map_meta_cap( $post_type_object->cap->edit_post, self::$user_id, self::$post_id )
 		);
 
-		$this->assertEquals(
+		$this->assertSame(
 			array( 'read_private_books' ),
 			map_meta_cap( 'read_post', self::$user_id, self::$post_id )
 		);
-		$this->assertEquals(
+		$this->assertSame(
 			array( 'read_private_books' ),
 			map_meta_cap( $post_type_object->cap->read_post, self::$user_id, self::$post_id )
 		);
 
-		$this->assertEquals(
+		$this->assertSame(
 			array( 'delete_others_books', 'delete_private_books' ),
 			map_meta_cap( 'delete_post', self::$user_id, self::$post_id )
 		);
-		$this->assertEquals(
+		$this->assertSame(
 			array( 'delete_others_books', 'delete_private_books' ),
 			map_meta_cap( $post_type_object->cap->delete_post, self::$user_id, self::$post_id )
 		);
@@ -140,29 +140,29 @@ class Tests_User_MapMetaCap extends WP_UnitTestCase {
 
 		$this->assertFalse( $post_type_object->map_meta_cap );
 
-		$this->assertEquals(
+		$this->assertSame(
 			array( 'edit_post' ),
 			map_meta_cap( 'edit_post', self::$user_id, self::$post_id )
 		);
-		$this->assertEquals(
+		$this->assertSame(
 			array( 'edit_post' ),
 			map_meta_cap( $post_type_object->cap->edit_post, self::$user_id, self::$post_id )
 		);
 
-		$this->assertEquals(
+		$this->assertSame(
 			array( 'read_post' ),
 			map_meta_cap( 'read_post', self::$user_id, self::$post_id )
 		);
-		$this->assertEquals(
+		$this->assertSame(
 			array( 'read_post' ),
 			map_meta_cap( $post_type_object->cap->read_post, self::$user_id, self::$post_id )
 		);
 
-		$this->assertEquals(
+		$this->assertSame(
 			array( 'delete_post' ),
 			map_meta_cap( 'delete_post', self::$user_id, self::$post_id )
 		);
-		$this->assertEquals(
+		$this->assertSame(
 			array( 'delete_post' ),
 			map_meta_cap( $post_type_object->cap->delete_post, self::$user_id, self::$post_id )
 		);
@@ -185,29 +185,29 @@ class Tests_User_MapMetaCap extends WP_UnitTestCase {
 
 		$this->assertTrue( $post_type_object->map_meta_cap );
 
-		$this->assertEquals(
+		$this->assertSame(
 			array( 'edit_others_books', 'edit_private_posts' ),
 			map_meta_cap( 'edit_post', self::$user_id, self::$post_id )
 		);
-		$this->assertEquals(
+		$this->assertSame(
 			array( 'edit_others_books', 'edit_private_posts' ),
 			map_meta_cap( $post_type_object->cap->edit_post, self::$user_id, self::$post_id )
 		);
 
-		$this->assertEquals(
+		$this->assertSame(
 			array( 'read_private_posts' ),
 			map_meta_cap( 'read_post', self::$user_id, self::$post_id )
 		);
-		$this->assertEquals(
+		$this->assertSame(
 			array( 'read_private_posts' ),
 			map_meta_cap( $post_type_object->cap->read_post, self::$user_id, self::$post_id )
 		);
 
-		$this->assertEquals(
+		$this->assertSame(
 			array( 'delete_others_posts', 'delete_private_posts' ),
 			map_meta_cap( 'delete_post', self::$user_id, self::$post_id )
 		);
-		$this->assertEquals(
+		$this->assertSame(
 			array( 'delete_others_posts', 'delete_private_posts' ),
 			map_meta_cap( $post_type_object->cap->delete_post, self::$user_id, self::$post_id )
 		);
@@ -230,29 +230,29 @@ class Tests_User_MapMetaCap extends WP_UnitTestCase {
 
 		$this->assertFalse( $post_type_object->map_meta_cap );
 
-		$this->assertEquals(
+		$this->assertSame(
 			array( 'edit_book' ),
 			map_meta_cap( 'edit_post', self::$user_id, self::$post_id )
 		);
-		$this->assertEquals(
+		$this->assertSame(
 			array( 'edit_book' ),
 			map_meta_cap( $post_type_object->cap->edit_post, self::$user_id, self::$post_id )
 		);
 
-		$this->assertEquals(
+		$this->assertSame(
 			array( 'read_book' ),
 			map_meta_cap( 'read_post', self::$user_id, self::$post_id )
 		);
-		$this->assertEquals(
+		$this->assertSame(
 			array( 'read_book' ),
 			map_meta_cap( $post_type_object->cap->read_post, self::$user_id, self::$post_id )
 		);
 
-		$this->assertEquals(
+		$this->assertSame(
 			array( 'delete_book' ),
 			map_meta_cap( 'delete_post', self::$user_id, self::$post_id )
 		);
-		$this->assertEquals(
+		$this->assertSame(
 			array( 'delete_book' ),
 			map_meta_cap( $post_type_object->cap->delete_post, self::$user_id, self::$post_id )
 		);
@@ -276,44 +276,62 @@ class Tests_User_MapMetaCap extends WP_UnitTestCase {
 
 		$this->assertTrue( $post_type_object->map_meta_cap );
 
-		$this->assertEquals(
+		$this->assertSame(
 			array( 'edit_others_posts', 'edit_private_posts' ),
 			map_meta_cap( 'edit_post', self::$user_id, self::$post_id )
 		);
-		$this->assertEquals(
+		$this->assertSame(
 			array( 'edit_others_posts', 'edit_private_posts' ),
 			map_meta_cap( $post_type_object->cap->edit_post, self::$user_id, self::$post_id )
 		);
 
-		$this->assertEquals(
+		$this->assertSame(
 			array( 'read_private_posts' ),
 			map_meta_cap( 'read_post', self::$user_id, self::$post_id )
 		);
-		$this->assertEquals(
+		$this->assertSame(
 			array( 'read_private_posts' ),
 			map_meta_cap( $post_type_object->cap->read_post, self::$user_id, self::$post_id )
 		);
 
-		$this->assertEquals(
+		$this->assertSame(
 			array( 'delete_others_posts', 'delete_private_posts' ),
 			map_meta_cap( 'delete_post', self::$user_id, self::$post_id )
 		);
-		$this->assertEquals(
+		$this->assertSame(
 			array( 'delete_others_posts', 'delete_private_posts' ),
 			map_meta_cap( $post_type_object->cap->delete_post, self::$user_id, self::$post_id )
 		);
 	}
 
+	/**
+	 * @ticket 30991
+	 */
+	function test_delete_posts_cap_without_map_meta_cap() {
+		register_post_type(
+			self::$post_type,
+			array(
+				'capability_type' => 'post',
+				'map_meta_cap'    => false,
+			)
+		);
+
+		$post_type_object = get_post_type_object( self::$post_type );
+
+		$this->assertFalse( $post_type_object->map_meta_cap );
+		$this->assertSame( 'delete_posts', $post_type_object->cap->delete_posts );
+	}
+
 	function test_unfiltered_html_cap() {
 		if ( defined( 'DISALLOW_UNFILTERED_HTML' ) ) {
 			$this->assertFalse( DISALLOW_UNFILTERED_HTML );
 		}
 
 		if ( is_multisite() ) {
-			$this->assertEquals( array( 'do_not_allow' ), map_meta_cap( 'unfiltered_html', 0 ) );
-			$this->assertEquals( array( 'unfiltered_html' ), map_meta_cap( 'unfiltered_html', self::$user_id ) );
+			$this->assertSame( array( 'do_not_allow' ), map_meta_cap( 'unfiltered_html', 0 ) );
+			$this->assertSame( array( 'unfiltered_html' ), map_meta_cap( 'unfiltered_html', self::$user_id ) );
 		} else {
-			$this->assertEquals( array( 'unfiltered_html' ), map_meta_cap( 'unfiltered_html', self::$user_id ) );
+			$this->assertSame( array( 'unfiltered_html' ), map_meta_cap( 'unfiltered_html', self::$user_id ) );
 		}
 	}
 
@@ -329,8 +347,8 @@ class Tests_User_MapMetaCap extends WP_UnitTestCase {
 		}
 
 		$this->assertTrue( DISALLOW_UNFILTERED_HTML );
-		$this->assertEquals( array( 'update_core' ), map_meta_cap( 'update_core', self::$user_id ) );
-		$this->assertEquals( array( 'edit_plugins' ), map_meta_cap( 'edit_plugins', self::$user_id ) );
+		$this->assertSame( array( 'update_core' ), map_meta_cap( 'update_core', self::$user_id ) );
+		$this->assertSame( array( 'edit_plugins' ), map_meta_cap( 'edit_plugins', self::$user_id ) );
 	}
 
 	/**
@@ -348,8 +366,8 @@ class Tests_User_MapMetaCap extends WP_UnitTestCase {
 		);
 		$editor  = self::factory()->user->create( array( 'role' => 'editor' ) );
 
-		$this->assertEquals( array( 'edit_others_posts', 'edit_published_posts' ), map_meta_cap( 'edit_post', $editor, $post_id ) );
-		$this->assertEquals( array( 'delete_others_posts', 'delete_published_posts' ), map_meta_cap( 'delete_post', $editor, $post_id ) );
+		$this->assertSame( array( 'edit_others_posts', 'edit_published_posts' ), map_meta_cap( 'edit_post', $editor, $post_id ) );
+		$this->assertSame( array( 'delete_others_posts', 'delete_published_posts' ), map_meta_cap( 'delete_post', $editor, $post_id ) );
 
 	}
 
@@ -370,7 +388,7 @@ class Tests_User_MapMetaCap extends WP_UnitTestCase {
 		$caps = map_meta_cap( 'delete_page', self::$user_id, $post_id );
 		delete_option( 'page_on_front' );
 
-		$this->assertEquals( array( 'manage_options' ), $caps );
+		$this->assertSame( array( 'manage_options' ), $caps );
 	}
 
 	/**
@@ -390,6 +408,6 @@ class Tests_User_MapMetaCap extends WP_UnitTestCase {
 		$caps = map_meta_cap( 'delete_page', self::$user_id, $post_id );
 		delete_option( 'page_for_posts' );
 
-		$this->assertEquals( array( 'manage_options' ), $caps );
+		$this->assertSame( array( 'manage_options' ), $caps );
 	}
 }
diff --git a/tests/user/multisite.php b/tests/user/multisite.php
index 01c7b7d096..be74597277 100644
--- a/tests/user/multisite.php
+++ b/tests/user/multisite.php
@@ -52,7 +52,7 @@ if ( is_multisite() ) :
 			$blog_ids_of_user = array_keys( get_blogs_of_user( $user1_id ) );
 
 			// User should be a member of the created sites and the network's initial site.
-			$this->assertEquals( $blog_ids, $blog_ids_of_user );
+			$this->assertSame( $blog_ids, $blog_ids_of_user );
 
 			$this->assertTrue( remove_user_from_blog( $user1_id, $blog_ids[0] ) );
 			$this->assertTrue( remove_user_from_blog( $user1_id, $blog_ids[2] ) );
@@ -67,11 +67,11 @@ if ( is_multisite() ) :
 
 			// The user should still be a member of all remaining sites.
 			$blog_ids_of_user = array_keys( $blogs_of_user );
-			$this->assertEquals( $blog_ids, $blog_ids_of_user );
+			$this->assertSame( $blog_ids, $blog_ids_of_user );
 
 			// Each site retrieved should match the expected structure.
 			foreach ( $blogs_of_user as $blog_id => $blog ) {
-				$this->assertEquals( $blog_id, $blog->userblog_id );
+				$this->assertSame( $blog_id, $blog->userblog_id );
 				$this->assertTrue( isset( $blog->userblog_id ) );
 				$this->assertTrue( isset( $blog->blogname ) );
 				$this->assertTrue( isset( $blog->domain ) );
@@ -91,7 +91,7 @@ if ( is_multisite() ) :
 			// Passing true as the second parameter should retrieve ALL sites, even if marked.
 			$blogs_of_user    = get_blogs_of_user( $user1_id, true );
 			$blog_ids_of_user = array_keys( $blogs_of_user );
-			$this->assertEquals( $blog_ids, $blog_ids_of_user );
+			$this->assertSame( $blog_ids, $blog_ids_of_user );
 
 			// Check if sites are flagged as expected.
 			$this->assertEquals( 1, $blogs_of_user[ $blog_ids[0] ]->spam );
@@ -105,7 +105,7 @@ if ( is_multisite() ) :
 
 			// Passing false (the default) as the second parameter should retrieve only good sites.
 			$blog_ids_of_user = array_keys( get_blogs_of_user( $user1_id, false ) );
-			$this->assertEquals( $blog_ids, $blog_ids_of_user );
+			$this->assertSame( $blog_ids, $blog_ids_of_user );
 		}
 
 		/**
@@ -122,15 +122,12 @@ if ( is_multisite() ) :
 			$this->assertTrue( is_blog_user() );
 			$this->assertTrue( is_blog_user( get_current_blog_id() ) );
 
-			$blog_ids = array();
+			$blog_id = self::factory()->blog->create( array( 'user_id' => get_current_user_id() ) );
 
-			$blog_ids = self::factory()->blog->create_many( 1 );
-			foreach ( $blog_ids as $blog_id ) {
-				$this->assertInternalType( 'int', $blog_id );
-				$this->assertTrue( is_blog_user( $blog_id ) );
-				$this->assertTrue( remove_user_from_blog( $user1_id, $blog_id ) );
-				$this->assertFalse( is_blog_user( $blog_id ) );
-			}
+			$this->assertInternalType( 'int', $blog_id );
+			$this->assertTrue( is_blog_user( $blog_id ) );
+			$this->assertTrue( remove_user_from_blog( $user1_id, $blog_id ) );
+			$this->assertFalse( is_blog_user( $blog_id ) );
 
 			wp_set_current_user( $old_current );
 		}
@@ -145,7 +142,7 @@ if ( is_multisite() ) :
 
 			$this->assertSame( 0, $old_current );
 
-			// test for "get current user" when not logged in
+			// Test for "get current user" when not logged in.
 			$this->assertFalse( is_user_member_of_blog() );
 
 			wp_set_current_user( $user1_id );
@@ -157,34 +154,33 @@ if ( is_multisite() ) :
 			$this->assertTrue( is_user_member_of_blog( $user1_id ) );
 			$this->assertTrue( is_user_member_of_blog( $user1_id, $site_id ) );
 
-			$blog_ids = self::factory()->blog->create_many( 1 );
-			foreach ( $blog_ids as $blog_id ) {
-				$this->assertInternalType( 'int', $blog_id );
+			$blog_id = self::factory()->blog->create( array( 'user_id' => get_current_user_id() ) );
+
+			$this->assertInternalType( 'int', $blog_id );
 
-				// Current user gets added to new blogs
-				$this->assertTrue( is_user_member_of_blog( $user1_id, $blog_id ) );
-				// Other users should not
-				$this->assertFalse( is_user_member_of_blog( $user2_id, $blog_id ) );
+			// Current user gets added to new blogs.
+			$this->assertTrue( is_user_member_of_blog( $user1_id, $blog_id ) );
+			// Other users should not.
+			$this->assertFalse( is_user_member_of_blog( $user2_id, $blog_id ) );
 
-				switch_to_blog( $blog_id );
+			switch_to_blog( $blog_id );
 
-				$this->assertTrue( is_user_member_of_blog( $user1_id ) );
-				$this->assertFalse( is_user_member_of_blog( $user2_id ) );
+			$this->assertTrue( is_user_member_of_blog( $user1_id ) );
+			$this->assertFalse( is_user_member_of_blog( $user2_id ) );
 
-				// Remove user 1 from blog
-				$this->assertTrue( remove_user_from_blog( $user1_id, $blog_id ) );
+			// Remove user 1 from blog.
+			$this->assertTrue( remove_user_from_blog( $user1_id, $blog_id ) );
 
-				// Add user 2 to blog
-				$this->assertTrue( add_user_to_blog( $blog_id, $user2_id, 'subscriber' ) );
+			// Add user 2 to blog.
+			$this->assertTrue( add_user_to_blog( $blog_id, $user2_id, 'subscriber' ) );
 
-				$this->assertFalse( is_user_member_of_blog( $user1_id ) );
-				$this->assertTrue( is_user_member_of_blog( $user2_id ) );
+			$this->assertFalse( is_user_member_of_blog( $user1_id ) );
+			$this->assertTrue( is_user_member_of_blog( $user2_id ) );
 
-				restore_current_blog();
+			restore_current_blog();
 
-				$this->assertFalse( is_user_member_of_blog( $user1_id, $blog_id ) );
-				$this->assertTrue( is_user_member_of_blog( $user2_id, $blog_id ) );
-			}
+			$this->assertFalse( is_user_member_of_blog( $user1_id, $blog_id ) );
+			$this->assertTrue( is_user_member_of_blog( $user2_id, $blog_id ) );
 
 			wpmu_delete_user( $user1_id );
 			$user = new WP_User( $user1_id );
@@ -373,7 +369,7 @@ if ( is_multisite() ) :
 		public function test_should_return_false_for_object_user_id() {
 			$u_obj = self::factory()->user->create_and_get();
 			$this->assertFalse( wpmu_delete_user( $u_obj ) );
-			$this->assertEquals( $u_obj->ID, username_exists( $u_obj->user_login ) );
+			$this->assertSame( $u_obj->ID, username_exists( $u_obj->user_login ) );
 		}
 
 		/**
@@ -389,7 +385,7 @@ if ( is_multisite() ) :
 			$user = get_user_by( 'id', $user_id );
 			restore_current_blog();
 
-			wpmu_delete_blog( $site_id );
+			wp_delete_site( $site_id );
 			wpmu_delete_user( $user_id );
 
 			$this->assertContains( 'subscriber', $user->roles );
@@ -402,7 +398,8 @@ if ( is_multisite() ) :
 			$site_id = self::factory()->blog->create();
 
 			$result = add_user_to_blog( 73622, $site_id, 'subscriber' );
-			wpmu_delete_blog( $site_id );
+
+			wp_delete_site( $site_id );
 
 			$this->assertWPError( $result );
 		}
diff --git a/tests/user/query.php b/tests/user/query.php
index c094360ebc..d2a732db46 100644
--- a/tests/user/query.php
+++ b/tests/user/query.php
@@ -54,17 +54,17 @@ class Tests_User_Query extends WP_UnitTestCase {
 
 		$this->assertEquals( '', $users->get( 'fields' ) );
 		if ( isset( $users->query_vars['fields'] ) ) {
-			$this->assertEquals( '', $users->query_vars['fields'] );
+			$this->assertSame( '', $users->query_vars['fields'] );
 		}
 
 		$users->set( 'fields', 'all' );
 
-		$this->assertEquals( 'all', $users->get( 'fields' ) );
-		$this->assertEquals( 'all', $users->query_vars['fields'] );
+		$this->assertSame( 'all', $users->get( 'fields' ) );
+		$this->assertSame( 'all', $users->query_vars['fields'] );
 
 		$users->set( 'fields', '' );
-		$this->assertEquals( '', $users->get( 'fields' ) );
-		$this->assertEquals( '', $users->query_vars['fields'] );
+		$this->assertSame( '', $users->get( 'fields' ) );
+		$this->assertSame( '', $users->query_vars['fields'] );
 
 		$this->assertNull( $users->get( 'does-not-exist' ) );
 	}
@@ -78,7 +78,7 @@ class Tests_User_Query extends WP_UnitTestCase {
 		);
 		$ids = $q->get_results();
 
-		$this->assertEquals( array( self::$author_ids[0] ), $ids );
+		$this->assertEqualSets( array( self::$author_ids[0] ), $ids );
 	}
 
 	public function test_include_comma_separated() {
@@ -137,7 +137,7 @@ class Tests_User_Query extends WP_UnitTestCase {
 		$users = $users->get_results();
 
 		// +1 for the default user created during installation.
-		$this->assertEquals( 13, count( $users ) );
+		$this->assertSame( 13, count( $users ) );
 		foreach ( $users as $user ) {
 			$this->assertInstanceOf( 'WP_User', $user );
 		}
@@ -149,7 +149,7 @@ class Tests_User_Query extends WP_UnitTestCase {
 			)
 		);
 		$users = $users->get_results();
-		$this->assertEquals( 13, count( $users ) );
+		$this->assertSame( 13, count( $users ) );
 		foreach ( $users as $user ) {
 			$this->assertInstanceOf( 'WP_User', $user );
 		}
@@ -502,7 +502,7 @@ class Tests_User_Query extends WP_UnitTestCase {
 		// +1 for the default user created by the test suite.
 		$users = new WP_User_Query( array( 'blog_id' => get_current_blog_id() ) );
 		$users = $users->get_results();
-		$this->assertEquals( 13, count( $users ) );
+		$this->assertSame( 13, count( $users ) );
 
 		$users = new WP_User_Query(
 			array(
@@ -511,7 +511,7 @@ class Tests_User_Query extends WP_UnitTestCase {
 			)
 		);
 		$users = $users->get_results();
-		$this->assertEquals( 10, count( $users ) );
+		$this->assertSame( 10, count( $users ) );
 
 		$users = new WP_User_Query(
 			array(
@@ -520,7 +520,7 @@ class Tests_User_Query extends WP_UnitTestCase {
 			)
 		);
 		$users = $users->get_results();
-		$this->assertEquals( 2, count( $users ) );
+		$this->assertSame( 2, count( $users ) );
 
 		$users = new WP_User_Query(
 			array(
@@ -529,7 +529,7 @@ class Tests_User_Query extends WP_UnitTestCase {
 			)
 		);
 		$users = $users->get_results();
-		$this->assertEquals( 13, count( $users ) );
+		$this->assertSame( 13, count( $users ) );
 	}
 
 	/**
@@ -554,19 +554,19 @@ class Tests_User_Query extends WP_UnitTestCase {
 		$this->assertNotEmpty( $query->query_vars );
 		$this->assertNotEquals( $_query_vars, $query->query_vars );
 
-		// All values get reset
+		// All values get reset.
 		$query->prepare_query( array( 'number' => 8 ) );
 		$this->assertNotEmpty( $query->query_limit );
-		$this->assertEquals( 'LIMIT 0, 8', $query->query_limit );
+		$this->assertSame( 'LIMIT 0, 8', $query->query_limit );
 
-		// All values get reset
+		// All values get reset.
 		$query->prepare_query( array( 'fields' => 'all' ) );
 		$this->assertEmpty( $query->query_limit );
 		$this->assertEquals( '', $query->query_limit );
 		$_query_vars = $query->query_vars;
 
 		$query->prepare_query();
-		$this->assertEquals( $_query_vars, $query->query_vars );
+		$this->assertSame( $_query_vars, $query->query_vars );
 
 		$query->prepare_query( array( 'number' => -1 ) );
 		$this->assertNotEquals( 'LIMIT -1', $query->query_limit );
@@ -847,7 +847,7 @@ class Tests_User_Query extends WP_UnitTestCase {
 		$found    = wp_list_pluck( $q->get_results(), 'ID' );
 		$expected = array( self::$author_ids[0] );
 
-		$this->assertEqualSets( $expected, $found );
+		$this->assertSameSets( $expected, $found );
 	}
 
 	/**
@@ -888,7 +888,7 @@ class Tests_User_Query extends WP_UnitTestCase {
 		$found    = wp_list_pluck( $q->get_results(), 'ID' );
 		$expected = array( self::$author_ids[1], self::$author_ids[2] );
 
-		$this->assertEqualSets( $expected, $found );
+		$this->assertSameSets( $expected, $found );
 	}
 
 	/**
@@ -929,7 +929,7 @@ class Tests_User_Query extends WP_UnitTestCase {
 		$found    = wp_list_pluck( $q->get_results(), 'ID' );
 		$expected = array( self::$author_ids[2] );
 
-		$this->assertEqualSets( $expected, $found );
+		$this->assertSameSets( $expected, $found );
 	}
 
 	/**
@@ -974,7 +974,7 @@ class Tests_User_Query extends WP_UnitTestCase {
 		$found    = wp_list_pluck( $q->get_results(), 'ID' );
 		$expected = array( self::$author_ids[1] );
 
-		$this->assertEqualSets( $expected, $found );
+		$this->assertSameSets( $expected, $found );
 	}
 
 	/**
@@ -1004,7 +1004,7 @@ class Tests_User_Query extends WP_UnitTestCase {
 		$found    = wp_list_pluck( $q->get_results(), 'ID' );
 		$expected = array( self::$author_ids[0], self::$author_ids[1] );
 
-		$this->assertEqualSets( $expected, $found );
+		$this->assertSameSets( $expected, $found );
 	}
 
 	/**
@@ -1042,7 +1042,7 @@ class Tests_User_Query extends WP_UnitTestCase {
 		$found    = wp_list_pluck( $q->get_results(), 'ID' );
 		$expected = array( self::$author_ids[0], self::$author_ids[1] );
 
-		$this->assertEqualSets( $expected, $found );
+		$this->assertSameSets( $expected, $found );
 	}
 
 	/**
@@ -1066,7 +1066,7 @@ class Tests_User_Query extends WP_UnitTestCase {
 		$expected = array( self::$author_ids[0] );
 
 		$this->assertContains( "AND user_nicename = 'peter'", $q->query_where );
-		$this->assertEqualSets( $expected, $found );
+		$this->assertSameSets( $expected, $found );
 	}
 
 	/**
@@ -1104,7 +1104,7 @@ class Tests_User_Query extends WP_UnitTestCase {
 		$expected = array( self::$author_ids[0], self::$author_ids[1], self::$author_ids[2] );
 
 		$this->assertContains( "AND user_nicename IN ( 'peter','paul','mary' )", $q->query_where );
-		$this->assertEqualSets( $expected, $found );
+		$this->assertSameSets( $expected, $found );
 	}
 
 	/**
@@ -1139,10 +1139,10 @@ class Tests_User_Query extends WP_UnitTestCase {
 		);
 
 		$found_count    = count( $q->get_results() );
-		$expected_count = 10; // 13 total users minus 3 from query
+		$expected_count = 10; // 13 total users minus 3 from query.
 
 		$this->assertContains( "AND user_nicename NOT IN ( 'peter','paul','mary' )", $q->query_where );
-		$this->assertEquals( $expected_count, $found_count );
+		$this->assertSame( $expected_count, $found_count );
 	}
 
 	/**
@@ -1201,7 +1201,7 @@ class Tests_User_Query extends WP_UnitTestCase {
 		$expected = array( self::$author_ids[0] );
 
 		$this->assertContains( "AND user_login = '$user_login'", $q->query_where );
-		$this->assertEqualSets( $expected, $found );
+		$this->assertSameSets( $expected, $found );
 	}
 
 	/**
@@ -1222,7 +1222,7 @@ class Tests_User_Query extends WP_UnitTestCase {
 		$expected = array( self::$author_ids[0], self::$author_ids[1], self::$author_ids[2] );
 
 		$this->assertContains( "AND user_login IN ( '$user_login1','$user_login2','$user_login3' )", $q->query_where );
-		$this->assertEqualSets( $expected, $found );
+		$this->assertSameSets( $expected, $found );
 	}
 
 	/**
@@ -1240,10 +1240,10 @@ class Tests_User_Query extends WP_UnitTestCase {
 		);
 
 		$found_count    = count( $q->get_results() );
-		$expected_count = 10; // 13 total users minus 3 from query
+		$expected_count = 10; // 13 total users minus 3 from query.
 
 		$this->assertContains( "AND user_login NOT IN ( '$user_login1','$user_login2','$user_login3' )", $q->query_where );
-		$this->assertEquals( $expected_count, $found_count );
+		$this->assertSame( $expected_count, $found_count );
 	}
 
 	/**
@@ -1314,7 +1314,7 @@ class Tests_User_Query extends WP_UnitTestCase {
 		$wp_user_search = new WP_User_Query( array( 'role' => 'subscriber' ) );
 		$users          = $wp_user_search->get_results();
 
-		$this->assertEquals( 2, count( $users ) );
+		$this->assertSame( 2, count( $users ) );
 	}
 
 	/**
@@ -1323,7 +1323,7 @@ class Tests_User_Query extends WP_UnitTestCase {
 	public function test_get_multiple_roles_by_user_query() {
 		$wp_user_search = new WP_User_Query( array( 'role__in' => array( 'subscriber', 'editor' ) ) );
 		$users          = $wp_user_search->get_results();
-		$this->assertEquals( 5, count( $users ) );
+		$this->assertSame( 5, count( $users ) );
 	}
 
 	/**
@@ -1336,7 +1336,7 @@ class Tests_User_Query extends WP_UnitTestCase {
 			)
 		);
 
-		$this->assertEquals( 2, count( $users ) );
+		$this->assertSame( 2, count( $users ) );
 	}
 
 	/**
@@ -1372,7 +1372,7 @@ class Tests_User_Query extends WP_UnitTestCase {
 			)
 		);
 
-		$this->assertEquals( 2, count( $users ) );
+		$this->assertSame( 2, count( $users ) );
 	}
 
 	/**
@@ -1392,7 +1392,7 @@ class Tests_User_Query extends WP_UnitTestCase {
 		$users = new WP_User_Query( array( 'role' => array( 'subscriber', 'editor' ) ) );
 		$users = $users->get_results();
 
-		$this->assertEquals( 2, count( $users ) );
+		$this->assertSame( 2, count( $users ) );
 
 		foreach ( $users as $user ) {
 			$this->assertInstanceOf( 'WP_User', $user );
@@ -1407,7 +1407,7 @@ class Tests_User_Query extends WP_UnitTestCase {
 		$users = $users->get_results();
 
 		// +1 for the default user created during installation.
-		$this->assertEquals( 8, count( $users ) );
+		$this->assertSame( 8, count( $users ) );
 		foreach ( $users as $user ) {
 			$this->assertInstanceOf( 'WP_User', $user );
 		}
@@ -1436,30 +1436,30 @@ class Tests_User_Query extends WP_UnitTestCase {
 			)
 		);
 
-		$this->assertEquals( 2, count( $users ) );
+		$this->assertSame( 2, count( $users ) );
 	}
 
 	/**
 	 * @ticket 22212
 	 */
 	public function test_get_multiple_roles_with_meta() {
-		// Create administrator user + meta
+		// Create administrator user + meta.
 		update_user_meta( self::$admin_ids[0], 'mk1', 1 );
 		update_user_meta( self::$admin_ids[0], 'mk2', 1 );
 
-		// Create editor user + meta
+		// Create editor user + meta.
 		update_user_meta( self::$editor_ids[0], 'mk1', 1 );
 		update_user_meta( self::$editor_ids[0], 'mk2', 2 );
 
-		// Create subscriber user + meta
+		// Create subscriber user + meta.
 		update_user_meta( self::$sub_ids[0], 'mk1', 1 );
 		update_user_meta( self::$sub_ids[0], 'mk2', 1 );
 
-		// Create contributor user + meta
+		// Create contributor user + meta.
 		update_user_meta( self::$contrib_id, 'mk1', 1 );
 		update_user_meta( self::$contrib_id, 'mk2', 2 );
 
-		// Fetch users
+		// Fetch users.
 		$users = get_users(
 			array(
 				'role__in'   => array( 'administrator', 'editor', 'subscriber' ),
@@ -1481,8 +1481,8 @@ class Tests_User_Query extends WP_UnitTestCase {
 			)
 		);
 
-		// Check results
-		$this->assertEquals( 1, count( $users ) );
+		// Check results.
+		$this->assertSame( 1, count( $users ) );
 		$this->assertSame( self::$editor_ids[0], (int) $users[0]->ID );
 	}
 
@@ -1497,7 +1497,7 @@ class Tests_User_Query extends WP_UnitTestCase {
 		);
 
 		// +1 for the default user created during installation.
-		$this->assertEquals( 11, count( $users ) );
+		$this->assertSame( 11, count( $users ) );
 
 		$users = get_users(
 			array(
@@ -1506,7 +1506,7 @@ class Tests_User_Query extends WP_UnitTestCase {
 		);
 
 		// +1 for the default user created during installation.
-		$this->assertEquals( 10, count( $users ) );
+		$this->assertSame( 10, count( $users ) );
 	}
 
 	/**
@@ -1524,7 +1524,7 @@ class Tests_User_Query extends WP_UnitTestCase {
 			)
 		);
 
-		$this->assertEquals( 5, count( $users ) );
+		$this->assertSame( 5, count( $users ) );
 
 		$users = get_users(
 			array(
@@ -1533,7 +1533,7 @@ class Tests_User_Query extends WP_UnitTestCase {
 			)
 		);
 
-		$this->assertEquals( 3, count( $users ) );
+		$this->assertSame( 3, count( $users ) );
 	}
 
 	/**
@@ -1550,7 +1550,7 @@ class Tests_User_Query extends WP_UnitTestCase {
 			)
 		);
 
-		$this->assertEquals( 1, count( $users ) );
+		$this->assertSame( 1, count( $users ) );
 	}
 
 	/**
@@ -1568,7 +1568,7 @@ class Tests_User_Query extends WP_UnitTestCase {
 		);
 
 		// +1 for the default user created during installation.
-		$this->assertEquals( 12, count( $users ) );
+		$this->assertSame( 12, count( $users ) );
 
 		$users = get_users(
 			array(
@@ -1577,7 +1577,7 @@ class Tests_User_Query extends WP_UnitTestCase {
 		);
 
 		// +1 for the default user created during installation.
-		$this->assertEquals( 10, count( $users ) );
+		$this->assertSame( 10, count( $users ) );
 	}
 
 	/**
@@ -1661,7 +1661,7 @@ class Tests_User_Query extends WP_UnitTestCase {
 
 		$ids = $q->get_results();
 
-		/* must include user that has same string in display_name */
+		// Must include user that has the same string in display_name.
 		$this->assertEquals( array( $new_user1 ), $ids );
 	}
 
@@ -1689,8 +1689,8 @@ class Tests_User_Query extends WP_UnitTestCase {
 
 		$ids = $q->get_results();
 
-		/* must not include user that has same string in other fields */
-		$this->assertEquals( array(), $ids );
+		// Must not include user that has the same string in other fields.
+		$this->assertSame( array(), $ids );
 	}
 
 	/**
@@ -1717,7 +1717,7 @@ class Tests_User_Query extends WP_UnitTestCase {
 		$this->assertSame( array( 555 ), $q->results );
 
 		// Make sure manually setting total_users doesn't get overwritten.
-		$this->assertEquals( 1, $q->total_users );
+		$this->assertSame( 1, $q->total_users );
 	}
 
 	public static function filter_users_pre_query( $posts, $query ) {
diff --git a/tests/user/slashes.php b/tests/user/slashes.php
index 202d6a1622..e5675abb5d 100644
--- a/tests/user/slashes.php
+++ b/tests/user/slashes.php
@@ -12,8 +12,8 @@ class Tests_User_Slashes extends WP_UnitTestCase {
 
 		wp_set_current_user( $this->author_id );
 
-		// it is important to test with both even and odd numbered slashes as
-		// kses does a strip-then-add slashes in some of its function calls
+		// It is important to test with both even and odd numbered slashes,
+		// as KSES does a strip-then-add slashes in some of its function calls.
 		$this->slash_1 = 'String with 1 slash \\';
 		$this->slash_2 = 'String with 2 slashes \\\\';
 		$this->slash_3 = 'String with 3 slashes \\\\\\';
@@ -24,7 +24,7 @@ class Tests_User_Slashes extends WP_UnitTestCase {
 	}
 
 	/**
-	 * Tests the controller function that expects slashed data
+	 * Tests the controller function that expects slashed data.
 	 */
 	function test_add_user() {
 		$_POST                 = array();
@@ -40,16 +40,17 @@ class Tests_User_Slashes extends WP_UnitTestCase {
 		$_POST['nickname']     = $this->slash_5;
 		$_POST['display_name'] = $this->slash_7;
 		$_POST['description']  = $this->slash_3;
-		$_POST                 = add_magic_quotes( $_POST ); // the edit_post() function will strip slashes
+
+		$_POST = add_magic_quotes( $_POST ); // The add_user() function will strip slashes.
 
 		$id   = add_user();
 		$user = get_user_to_edit( $id );
 
-		$this->assertEquals( $this->slash_1, $user->first_name );
-		$this->assertEquals( $this->slash_3, $user->last_name );
-		$this->assertEquals( $this->slash_5, $user->nickname );
-		$this->assertEquals( $this->slash_7, $user->display_name );
-		$this->assertEquals( $this->slash_3, $user->description );
+		$this->assertSame( $this->slash_1, $user->first_name );
+		$this->assertSame( $this->slash_3, $user->last_name );
+		$this->assertSame( $this->slash_5, $user->nickname );
+		$this->assertSame( $this->slash_7, $user->display_name );
+		$this->assertSame( $this->slash_3, $user->description );
 
 		$_POST                 = array();
 		$_GET                  = array();
@@ -64,20 +65,21 @@ class Tests_User_Slashes extends WP_UnitTestCase {
 		$_POST['nickname']     = $this->slash_6;
 		$_POST['display_name'] = $this->slash_2;
 		$_POST['description']  = $this->slash_4;
-		$_POST                 = add_magic_quotes( $_POST ); // the edit_post() function will strip slashes
+
+		$_POST = add_magic_quotes( $_POST ); // The add_user() function will strip slashes.
 
 		$id   = add_user();
 		$user = get_user_to_edit( $id );
 
-		$this->assertEquals( $this->slash_2, $user->first_name );
-		$this->assertEquals( $this->slash_4, $user->last_name );
-		$this->assertEquals( $this->slash_6, $user->nickname );
-		$this->assertEquals( $this->slash_2, $user->display_name );
-		$this->assertEquals( $this->slash_4, $user->description );
+		$this->assertSame( $this->slash_2, $user->first_name );
+		$this->assertSame( $this->slash_4, $user->last_name );
+		$this->assertSame( $this->slash_6, $user->nickname );
+		$this->assertSame( $this->slash_2, $user->display_name );
+		$this->assertSame( $this->slash_4, $user->description );
 	}
 
 	/**
-	 * Tests the controller function that expects slashed data
+	 * Tests the controller function that expects slashed data.
 	 */
 	function test_edit_user() {
 		$id = self::factory()->user->create();
@@ -92,16 +94,17 @@ class Tests_User_Slashes extends WP_UnitTestCase {
 		$_POST['nickname']     = $this->slash_5;
 		$_POST['display_name'] = $this->slash_7;
 		$_POST['description']  = $this->slash_3;
-		$_POST                 = add_magic_quotes( $_POST ); // the edit_post() function will strip slashes
+
+		$_POST = add_magic_quotes( $_POST ); // The edit_user() function will strip slashes.
 
 		$id   = edit_user( $id );
 		$user = get_user_to_edit( $id );
 
-		$this->assertEquals( $this->slash_1, $user->first_name );
-		$this->assertEquals( $this->slash_3, $user->last_name );
-		$this->assertEquals( $this->slash_5, $user->nickname );
-		$this->assertEquals( $this->slash_7, $user->display_name );
-		$this->assertEquals( $this->slash_3, $user->description );
+		$this->assertSame( $this->slash_1, $user->first_name );
+		$this->assertSame( $this->slash_3, $user->last_name );
+		$this->assertSame( $this->slash_5, $user->nickname );
+		$this->assertSame( $this->slash_7, $user->display_name );
+		$this->assertSame( $this->slash_3, $user->description );
 
 		$_POST                 = array();
 		$_GET                  = array();
@@ -113,20 +116,21 @@ class Tests_User_Slashes extends WP_UnitTestCase {
 		$_POST['nickname']     = $this->slash_6;
 		$_POST['display_name'] = $this->slash_2;
 		$_POST['description']  = $this->slash_4;
-		$_POST                 = add_magic_quotes( $_POST ); // the edit_post() function will strip slashes
+
+		$_POST = add_magic_quotes( $_POST ); // The edit_user() function will strip slashes.
 
 		$id   = edit_user( $id );
 		$user = get_user_to_edit( $id );
 
-		$this->assertEquals( $this->slash_2, $user->first_name );
-		$this->assertEquals( $this->slash_4, $user->last_name );
-		$this->assertEquals( $this->slash_6, $user->nickname );
-		$this->assertEquals( $this->slash_2, $user->display_name );
-		$this->assertEquals( $this->slash_4, $user->description );
+		$this->assertSame( $this->slash_2, $user->first_name );
+		$this->assertSame( $this->slash_4, $user->last_name );
+		$this->assertSame( $this->slash_6, $user->nickname );
+		$this->assertSame( $this->slash_2, $user->display_name );
+		$this->assertSame( $this->slash_4, $user->description );
 	}
 
 	/**
-	 * Tests the model function that expects slashed data
+	 * Tests the model function that expects slashed data.
 	 */
 	function test_wp_insert_user() {
 		$id   = wp_insert_user(
@@ -144,11 +148,11 @@ class Tests_User_Slashes extends WP_UnitTestCase {
 		);
 		$user = get_user_to_edit( $id );
 
-		$this->assertEquals( wp_unslash( $this->slash_1 ), $user->first_name );
-		$this->assertEquals( wp_unslash( $this->slash_3 ), $user->last_name );
-		$this->assertEquals( wp_unslash( $this->slash_5 ), $user->nickname );
-		$this->assertEquals( wp_unslash( $this->slash_7 ), $user->display_name );
-		$this->assertEquals( wp_unslash( $this->slash_3 ), $user->description );
+		$this->assertSame( wp_unslash( $this->slash_1 ), $user->first_name );
+		$this->assertSame( wp_unslash( $this->slash_3 ), $user->last_name );
+		$this->assertSame( wp_unslash( $this->slash_5 ), $user->nickname );
+		$this->assertSame( wp_unslash( $this->slash_7 ), $user->display_name );
+		$this->assertSame( wp_unslash( $this->slash_3 ), $user->description );
 
 		$id   = wp_insert_user(
 			array(
@@ -165,15 +169,15 @@ class Tests_User_Slashes extends WP_UnitTestCase {
 		);
 		$user = get_user_to_edit( $id );
 
-		$this->assertEquals( wp_unslash( $this->slash_2 ), $user->first_name );
-		$this->assertEquals( wp_unslash( $this->slash_4 ), $user->last_name );
-		$this->assertEquals( wp_unslash( $this->slash_6 ), $user->nickname );
-		$this->assertEquals( wp_unslash( $this->slash_2 ), $user->display_name );
-		$this->assertEquals( wp_unslash( $this->slash_4 ), $user->description );
+		$this->assertSame( wp_unslash( $this->slash_2 ), $user->first_name );
+		$this->assertSame( wp_unslash( $this->slash_4 ), $user->last_name );
+		$this->assertSame( wp_unslash( $this->slash_6 ), $user->nickname );
+		$this->assertSame( wp_unslash( $this->slash_2 ), $user->display_name );
+		$this->assertSame( wp_unslash( $this->slash_4 ), $user->description );
 	}
 
 	/**
-	 * Tests the model function that expects slashed data
+	 * Tests the model function that expects slashed data.
 	 */
 	function test_wp_update_user() {
 		$id   = self::factory()->user->create();
@@ -190,11 +194,11 @@ class Tests_User_Slashes extends WP_UnitTestCase {
 		);
 		$user = get_user_to_edit( $id );
 
-		$this->assertEquals( wp_unslash( $this->slash_1 ), $user->first_name );
-		$this->assertEquals( wp_unslash( $this->slash_3 ), $user->last_name );
-		$this->assertEquals( wp_unslash( $this->slash_5 ), $user->nickname );
-		$this->assertEquals( wp_unslash( $this->slash_7 ), $user->display_name );
-		$this->assertEquals( wp_unslash( $this->slash_3 ), $user->description );
+		$this->assertSame( wp_unslash( $this->slash_1 ), $user->first_name );
+		$this->assertSame( wp_unslash( $this->slash_3 ), $user->last_name );
+		$this->assertSame( wp_unslash( $this->slash_5 ), $user->nickname );
+		$this->assertSame( wp_unslash( $this->slash_7 ), $user->display_name );
+		$this->assertSame( wp_unslash( $this->slash_3 ), $user->description );
 
 		$id   = wp_update_user(
 			array(
@@ -209,11 +213,11 @@ class Tests_User_Slashes extends WP_UnitTestCase {
 		);
 		$user = get_user_to_edit( $id );
 
-		$this->assertEquals( wp_unslash( $this->slash_2 ), $user->first_name );
-		$this->assertEquals( wp_unslash( $this->slash_4 ), $user->last_name );
-		$this->assertEquals( wp_unslash( $this->slash_6 ), $user->nickname );
-		$this->assertEquals( wp_unslash( $this->slash_2 ), $user->display_name );
-		$this->assertEquals( wp_unslash( $this->slash_4 ), $user->description );
+		$this->assertSame( wp_unslash( $this->slash_2 ), $user->first_name );
+		$this->assertSame( wp_unslash( $this->slash_4 ), $user->last_name );
+		$this->assertSame( wp_unslash( $this->slash_6 ), $user->nickname );
+		$this->assertSame( wp_unslash( $this->slash_2 ), $user->display_name );
+		$this->assertSame( wp_unslash( $this->slash_4 ), $user->description );
 	}
 
 }
diff --git a/tests/user/updateUserCaches.php b/tests/user/updateUserCaches.php
index 6a65192ee7..6797ec229b 100644
--- a/tests/user/updateUserCaches.php
+++ b/tests/user/updateUserCaches.php
@@ -24,7 +24,7 @@ class Tests_User_UpdateUserCaches extends WP_UnitTestCase {
 
 		update_user_caches( $data );
 
-		$this->assertEquals( 12345, wp_cache_get( 'foo', 'userlogins' ) );
+		$this->assertSame( 12345, wp_cache_get( 'foo', 'userlogins' ) );
 	}
 
 	public function test_should_store_user_id_in_useremail_bucket() {
@@ -36,7 +36,7 @@ class Tests_User_UpdateUserCaches extends WP_UnitTestCase {
 
 		update_user_caches( $data );
 
-		$this->assertEquals( 12345, wp_cache_get( 'foo@example.com', 'useremail' ) );
+		$this->assertSame( 12345, wp_cache_get( 'foo@example.com', 'useremail' ) );
 	}
 
 	public function test_should_store_user_id_in_userslugs_bucket() {
@@ -48,7 +48,7 @@ class Tests_User_UpdateUserCaches extends WP_UnitTestCase {
 
 		update_user_caches( $data );
 
-		$this->assertEquals( 12345, wp_cache_get( 'bar', 'userslugs' ) );
+		$this->assertSame( 12345, wp_cache_get( 'bar', 'userslugs' ) );
 	}
 
 	/**
diff --git a/tests/user/wpAuthenticateSpamCheck.php b/tests/user/wpAuthenticateSpamCheck.php
index 8cf2fd4abd..1d7d93d2f1 100644
--- a/tests/user/wpAuthenticateSpamCheck.php
+++ b/tests/user/wpAuthenticateSpamCheck.php
@@ -14,7 +14,7 @@ class Tests_User_WpAuthenticateSpamCheck extends WP_UnitTestCase {
 		$actual_user = wp_authenticate_spam_check( $user );
 		wp_delete_user( $user_id );
 
-		$this->assertEquals( $user->user_login, $actual_user->user_login );
+		$this->assertSame( $user->user_login, $actual_user->user_login );
 	}
 
 	/**
@@ -26,7 +26,7 @@ class Tests_User_WpAuthenticateSpamCheck extends WP_UnitTestCase {
 		$actual_user = wp_authenticate_spam_check( $user );
 		wpmu_delete_user( $user_id );
 
-		$this->assertEquals( $user->user_login, $actual_user->user_login );
+		$this->assertSame( $user->user_login, $actual_user->user_login );
 	}
 
 	/**
diff --git a/tests/user/wpDeleteUser.php b/tests/user/wpDeleteUser.php
index bc9a53c54f..8bbf351bb2 100644
--- a/tests/user/wpDeleteUser.php
+++ b/tests/user/wpDeleteUser.php
@@ -12,18 +12,18 @@ class Tests_User_WpDeleteUser extends WP_UnitTestCase {
 	 */
 	function test_get_blogs_of_user() {
 		// Logged out users don't have blogs.
-		$this->assertEquals( array(), get_blogs_of_user( 0 ) );
+		$this->assertSame( array(), get_blogs_of_user( 0 ) );
 
 		$user_id = self::factory()->user->create( array( 'role' => 'subscriber' ) );
 		$blogs   = get_blogs_of_user( $user_id );
-		$this->assertEquals( array( 1 ), array_keys( $blogs ) );
+		$this->assertSame( array( 1 ), array_keys( $blogs ) );
 
 		// Non-existent users don't have blogs.
 		self::delete_user( $user_id );
 
 		$user = new WP_User( $user_id );
 		$this->assertFalse( $user->exists(), 'WP_User->exists' );
-		$this->assertEquals( array(), get_blogs_of_user( $user_id ) );
+		$this->assertSame( array(), get_blogs_of_user( $user_id ) );
 	}
 
 	/**
@@ -65,13 +65,13 @@ class Tests_User_WpDeleteUser extends WP_UnitTestCase {
 			'post_type'    => 'post',
 		);
 
-		// insert a post and make sure the ID is ok
+		// Insert a post and make sure the ID is OK.
 		$post_id = wp_insert_post( $post );
 		$this->assertTrue( is_numeric( $post_id ) );
 		$this->assertTrue( $post_id > 0 );
 
 		$post = get_post( $post_id );
-		$this->assertEquals( $post_id, $post->ID );
+		$this->assertSame( $post_id, $post->ID );
 
 		$post = array(
 			'post_author'  => $user_id,
@@ -81,13 +81,13 @@ class Tests_User_WpDeleteUser extends WP_UnitTestCase {
 			'post_type'    => 'nav_menu_item',
 		);
 
-		// insert a post and make sure the ID is ok
+		// Insert a post and make sure the ID is OK.
 		$nav_id = wp_insert_post( $post );
 		$this->assertTrue( is_numeric( $nav_id ) );
 		$this->assertTrue( $nav_id > 0 );
 
 		$post = get_post( $nav_id );
-		$this->assertEquals( $nav_id, $post->ID );
+		$this->assertSame( $nav_id, $post->ID );
 
 		wp_delete_user( $user_id );
 		$user = new WP_User( $user_id );
@@ -98,10 +98,10 @@ class Tests_User_WpDeleteUser extends WP_UnitTestCase {
 		}
 
 		$this->assertNotNull( get_post( $post_id ) );
-		$this->assertEquals( 'trash', get_post( $post_id )->post_status );
-		// nav_menu_item is delete_with_user = false so the nav post should remain published.
+		$this->assertSame( 'trash', get_post( $post_id )->post_status );
+		// 'nav_menu_item' is `delete_with_user = false` so the nav post should remain published.
 		$this->assertNotNull( get_post( $nav_id ) );
-		$this->assertEquals( 'publish', get_post( $nav_id )->post_status );
+		$this->assertSame( 'publish', get_post( $nav_id )->post_status );
 		wp_delete_post( $nav_id, true );
 		$this->assertNull( get_post( $nav_id ) );
 		wp_delete_post( $post_id, true );
@@ -149,6 +149,6 @@ class Tests_User_WpDeleteUser extends WP_UnitTestCase {
 	public function test_should_return_false_for_object_user_id() {
 		$u_obj = self::factory()->user->create_and_get();
 		$this->assertFalse( wp_delete_user( $u_obj ) );
-		$this->assertEquals( $u_obj->ID, username_exists( $u_obj->user_login ) );
+		$this->assertSame( $u_obj->ID, username_exists( $u_obj->user_login ) );
 	}
 }
diff --git a/tests/user/wpDropdownUsers.php b/tests/user/wpDropdownUsers.php
index d6ee6c3c43..4f6b89db77 100644
--- a/tests/user/wpDropdownUsers.php
+++ b/tests/user/wpDropdownUsers.php
@@ -12,7 +12,7 @@ class Tests_User_WpDropdownUsers extends WP_UnitTestCase {
 	 */
 	public function test_default_value_of_show_should_be_display_name() {
 
-		// create a user with a different display_name
+		// Create a user with a different display_name.
 		$u = $this->factory->user->create(
 			array(
 				'user_login'   => 'foo',
@@ -36,7 +36,7 @@ class Tests_User_WpDropdownUsers extends WP_UnitTestCase {
 	 */
 	public function test_show_should_display_display_name_show_is_specified_as_empty() {
 
-		// create a user with a different display_name
+		// Create a user with a different display_name.
 		$u = $this->factory->user->create(
 			array(
 				'user_login'   => 'foo',
@@ -62,7 +62,7 @@ class Tests_User_WpDropdownUsers extends WP_UnitTestCase {
 	 */
 	public function test_show_should_display_user_property_when_the_value_of_show_is_a_valid_user_property() {
 
-		// create a user with a different display_name
+		// Create a user with a different display_name.
 		$u = $this->factory->user->create(
 			array(
 				'user_login'   => 'foo',
@@ -88,7 +88,7 @@ class Tests_User_WpDropdownUsers extends WP_UnitTestCase {
 	 */
 	public function test_show_display_name_with_login() {
 
-		// create a user with a different display_name
+		// Create a user with a different display_name.
 		$u = $this->factory->user->create(
 			array(
 				'user_login'   => 'foo',
diff --git a/tests/user/wpGetUsersWithNoRole.php b/tests/user/wpGetUsersWithNoRole.php
index 8decde8171..46b8bafbdb 100644
--- a/tests/user/wpGetUsersWithNoRole.php
+++ b/tests/user/wpGetUsersWithNoRole.php
@@ -10,7 +10,7 @@ class Tests_User_GetUsersWithNoRole extends WP_UnitTestCase {
 	 * @group ms-excluded
 	 */
 	public function test_get_users_with_no_role_is_accurate() {
-		// Setup users
+		// Setup users.
 		$admin       = self::factory()->user->create(
 			array(
 				'role' => 'administrator',
@@ -32,7 +32,7 @@ class Tests_User_GetUsersWithNoRole extends WP_UnitTestCase {
 			)
 		);
 
-		// Test users
+		// Test users.
 		$users = wp_get_users_with_no_role();
 
 		$this->assertEquals(
@@ -52,7 +52,7 @@ class Tests_User_GetUsersWithNoRole extends WP_UnitTestCase {
 	 * @group ms-required
 	 */
 	public function test_get_users_with_no_role_multisite_is_accurate() {
-		// Setup users
+		// Setup users.
 		$admin  = self::factory()->user->create(
 			array(
 				'role' => 'administrator',
@@ -69,17 +69,17 @@ class Tests_User_GetUsersWithNoRole extends WP_UnitTestCase {
 			)
 		);
 
-		// Setup blogs
+		// Setup blogs.
 		$blog_1 = (int) self::factory()->blog->create(
 			array(
 				'user_id' => $editor,
 			)
 		);
 
-		// Add editor to blog 1
+		// Add editor to blog 1.
 		add_user_to_blog( $blog_1, $editor, 'editor' );
 
-		// Test users on root site
+		// Test users on root site.
 		$users = wp_get_users_with_no_role();
 		$this->assertSame(
 			array(
@@ -88,14 +88,14 @@ class Tests_User_GetUsersWithNoRole extends WP_UnitTestCase {
 			$users
 		);
 
-		// Test users counts on blog 1
+		// Test users counts on blog 1.
 		$users = wp_get_users_with_no_role( $blog_1 );
 		$this->assertSame( array(), $users );
 
-		// Add admin to blog 1 with no role
+		// Add admin to blog 1 with no role.
 		add_user_to_blog( $blog_1, $admin, '' );
 
-		// Re-test users counts on blog 1
+		// Re-test users counts on blog 1.
 		$users = wp_get_users_with_no_role( $blog_1 );
 		$this->assertSame(
 			array(
diff --git a/tests/user/wpSendUserRequest.php b/tests/user/wpSendUserRequest.php
index 2ccbe19e28..bbc02ea98d 100644
--- a/tests/user/wpSendUserRequest.php
+++ b/tests/user/wpSendUserRequest.php
@@ -13,7 +13,7 @@
  *
  * @group privacy
  * @group user
- * @covers wp_send_user_request
+ * @covers ::wp_send_user_request
  */
 class Tests_User_WpSendUserRequest extends WP_UnitTestCase {
 
@@ -222,12 +222,46 @@ class Tests_User_WpSendUserRequest extends WP_UnitTestCase {
 	 * @since 4.9.9
 	 *
 	 * @param string $email_text Confirmation email text.
-	 * @return string $email_text Filtered email text.
+	 * @return string Filtered email text.
 	 */
 	public function modify_email_content( $email_text ) {
 		return 'Custom Email Content.';
 	}
 
+	/**
+	 * The email headers should be filterable.
+	 *
+	 * @since 5.4.0
+	 *
+	 * @ticket 44501
+	 */
+	public function test_email_headers_should_be_filterable() {
+		$request_id = wp_create_user_request( self::$test_user->user_email, 'remove_personal_data' );
+
+		add_filter( 'user_request_action_email_headers', array( $this, 'modify_email_headers' ) );
+		$result = wp_send_user_request( $request_id );
+
+		$mailer = tests_retrieve_phpmailer_instance();
+
+		$this->assertContains( 'From: Tester <tester@example.com>', $mailer->get_sent()->header );
+	}
+
+	/**
+	 * Filter callback to modify the headers of the email sent when an account action is attempted.
+	 *
+	 * @since 5.4.0
+	 *
+	 * @param string|array $headers The email headers.
+	 * @return array The new email headers.
+	 */
+	public function modify_email_headers( $headers ) {
+		$headers = array(
+			'From: Tester <tester@example.com>',
+		);
+
+		return $headers;
+	}
+
 	/**
 	 * The function should error when the email was not sent.
 	 *
@@ -258,7 +292,7 @@ class Tests_User_WpSendUserRequest extends WP_UnitTestCase {
 		wp_send_user_request( $request_id );
 		$mailer = tests_retrieve_phpmailer_instance();
 
-		$this->assertContains( 'Confirma la', $mailer->get_sent()->subject );
+		$this->assertContains( 'Confirmar la', $mailer->get_sent()->subject );
 	}
 
 	/**
@@ -302,7 +336,7 @@ class Tests_User_WpSendUserRequest extends WP_UnitTestCase {
 		wp_send_user_request( $request_id );
 		$mailer = tests_retrieve_phpmailer_instance();
 
-		$this->assertContains( 'Confirma la', $mailer->get_sent()->subject );
+		$this->assertContains( 'Confirmar la', $mailer->get_sent()->subject );
 	}
 
 	/**
@@ -367,6 +401,6 @@ class Tests_User_WpSendUserRequest extends WP_UnitTestCase {
 		wp_send_user_request( $request_id );
 		$mailer = tests_retrieve_phpmailer_instance();
 
-		$this->assertContains( 'Confirma la', $mailer->get_sent()->subject );
+		$this->assertContains( 'Confirmar la', $mailer->get_sent()->subject );
 	}
 }
diff --git a/tests/user/wpSetCurrentUser.php b/tests/user/wpSetCurrentUser.php
index ec720b814e..b14a1c0d3d 100644
--- a/tests/user/wpSetCurrentUser.php
+++ b/tests/user/wpSetCurrentUser.php
@@ -19,7 +19,7 @@ class Tests_User_WpSetCurrentUser extends WP_UnitTestCase {
 		$user = wp_set_current_user( self::$user_id );
 
 		$this->assertSame( self::$user_id, $user->ID );
-		$this->assertEquals( $user, wp_get_current_user() );
+		$this->assertSame( $user, wp_get_current_user() );
 		$this->assertSame( self::$user_id, get_current_user_id() );
 	}
 
@@ -27,7 +27,7 @@ class Tests_User_WpSetCurrentUser extends WP_UnitTestCase {
 		$user = wp_set_current_user( self::$user_id, 'foo' );
 
 		$this->assertSame( self::$user_id, $user->ID );
-		$this->assertEquals( $user, wp_get_current_user() );
+		$this->assertSame( $user, wp_get_current_user() );
 		$this->assertSame( self::$user_id, get_current_user_id() );
 	}
 
@@ -38,7 +38,7 @@ class Tests_User_WpSetCurrentUser extends WP_UnitTestCase {
 		$user = wp_set_current_user( null, 'foo' );
 
 		$this->assertSame( self::$user_id2, $user->ID );
-		$this->assertEquals( $user, wp_get_current_user() );
+		$this->assertSame( $user, wp_get_current_user() );
 		$this->assertSame( self::$user_id2, get_current_user_id() );
 	}
 
@@ -54,7 +54,7 @@ class Tests_User_WpSetCurrentUser extends WP_UnitTestCase {
 		$user = wp_set_current_user( null, 'foo' );
 
 		$this->assertSame( self::$user_id2, $user->ID );
-		$this->assertEquals( $user, wp_get_current_user() );
+		$this->assertSame( $user, wp_get_current_user() );
 		$this->assertSame( self::$user_id2, get_current_user_id() );
 	}
 }
diff --git a/tests/walker.php b/tests/walker.php
index 0cb2ad232c..5ab08b1579 100644
--- a/tests/walker.php
+++ b/tests/walker.php
@@ -26,8 +26,8 @@ class Tests_Walker extends WP_UnitTestCase {
 		);
 		$output = $this->walker->walk( $items, 0 );
 
-		$this->assertEquals( 1, $this->walker->get_number_of_root_elements( $items ) );
-		$this->assertEquals( '<li>1</li>', $output );
+		$this->assertSame( 1, $this->walker->get_number_of_root_elements( $items ) );
+		$this->assertSame( '<li>1</li>', $output );
 
 	}
 
@@ -41,8 +41,8 @@ class Tests_Walker extends WP_UnitTestCase {
 		);
 		$output = $this->walker->walk( $items, -1 );
 
-		$this->assertEquals( 1, $this->walker->get_number_of_root_elements( $items ) );
-		$this->assertEquals( '<li>1</li>', $output );
+		$this->assertSame( 1, $this->walker->get_number_of_root_elements( $items ) );
+		$this->assertSame( '<li>1</li>', $output );
 
 	}
 
@@ -56,8 +56,8 @@ class Tests_Walker extends WP_UnitTestCase {
 		);
 		$output = $this->walker->walk( $items, 1 );
 
-		$this->assertEquals( 1, $this->walker->get_number_of_root_elements( $items ) );
-		$this->assertEquals( '<li>1</li>', $output );
+		$this->assertSame( 1, $this->walker->get_number_of_root_elements( $items ) );
+		$this->assertSame( '<li>1</li>', $output );
 
 	}
 
@@ -76,8 +76,8 @@ class Tests_Walker extends WP_UnitTestCase {
 
 		$output = $this->walker->walk( $items, 0 );
 
-		$this->assertEquals( 2, $this->walker->get_number_of_root_elements( $items ) );
-		$this->assertEquals( '<li>1</li><li>2</li>', $output );
+		$this->assertSame( 2, $this->walker->get_number_of_root_elements( $items ) );
+		$this->assertSame( '<li>1</li><li>2</li>', $output );
 
 	}
 
@@ -96,8 +96,8 @@ class Tests_Walker extends WP_UnitTestCase {
 
 		$output = $this->walker->walk( $items, 0 );
 
-		$this->assertEquals( 1, $this->walker->get_number_of_root_elements( $items ) );
-		$this->assertEquals( '<li>1<ul><li>2</li></ul></li>', $output );
+		$this->assertSame( 1, $this->walker->get_number_of_root_elements( $items ) );
+		$this->assertSame( '<li>1<ul><li>2</li></ul></li>', $output );
 
 	}
 
@@ -116,8 +116,8 @@ class Tests_Walker extends WP_UnitTestCase {
 
 		$output = $this->walker->walk( $items, -1 );
 
-		$this->assertEquals( 1, $this->walker->get_number_of_root_elements( $items ) );
-		$this->assertEquals( '<li>1</li><li>2</li>', $output );
+		$this->assertSame( 1, $this->walker->get_number_of_root_elements( $items ) );
+		$this->assertSame( '<li>1</li><li>2</li>', $output );
 
 	}
 
@@ -136,8 +136,8 @@ class Tests_Walker extends WP_UnitTestCase {
 
 		$output = $this->walker->walk( $items, 1 );
 
-		$this->assertEquals( 1, $this->walker->get_number_of_root_elements( $items ) );
-		$this->assertEquals( '<li>1</li>', $output );
+		$this->assertSame( 1, $this->walker->get_number_of_root_elements( $items ) );
+		$this->assertSame( '<li>1</li>', $output );
 
 	}
 
@@ -160,8 +160,8 @@ class Tests_Walker extends WP_UnitTestCase {
 
 		$output = $this->walker->walk( $items, 2 );
 
-		$this->assertEquals( 1, $this->walker->get_number_of_root_elements( $items ) );
-		$this->assertEquals( '<li>1<ul><li>2</li></ul></li>', $output );
+		$this->assertSame( 1, $this->walker->get_number_of_root_elements( $items ) );
+		$this->assertSame( '<li>1<ul><li>2</li></ul></li>', $output );
 
 	}
 
@@ -180,8 +180,8 @@ class Tests_Walker extends WP_UnitTestCase {
 
 		$output = $this->walker->walk( $items, 0 );
 
-		$this->assertEquals( 0, $this->walker->get_number_of_root_elements( $items ) );
-		$this->assertEquals( '<li>1<ul><li>2</li></ul></li>', $output );
+		$this->assertSame( 0, $this->walker->get_number_of_root_elements( $items ) );
+		$this->assertSame( '<li>1<ul><li>2</li></ul></li>', $output );
 
 	}
 
@@ -196,8 +196,8 @@ class Tests_Walker extends WP_UnitTestCase {
 
 		$output = $this->walker->walk( $items, 0 );
 
-		$this->assertEquals( 0, $this->walker->get_number_of_root_elements( $items ) );
-		$this->assertEquals( '<li>1</li>', $output );
+		$this->assertSame( 0, $this->walker->get_number_of_root_elements( $items ) );
+		$this->assertSame( '<li>1</li>', $output );
 
 	}
 
@@ -212,15 +212,15 @@ class Tests_Walker extends WP_UnitTestCase {
 
 		$output = $this->walker->walk( $items, 1 );
 
-		$this->assertEquals( 0, $this->walker->get_number_of_root_elements( $items ) );
+		$this->assertSame( 0, $this->walker->get_number_of_root_elements( $items ) );
 
-		// It's not clear what the output of this "should" be
+		// It's not clear what the output of this "should" be.
 
-		// Currently the item is simply returned
-		$this->assertEquals( '<li>1</li>', $output );
+		// Currently the item is simply returned.
+		$this->assertSame( '<li>1</li>', $output );
 
 		// But as we've only asked for the first depth maybe nothing should be returned?
-		//$this->assertEquals( '', $output );
+		// $this->assertSame( '', $output );
 
 	}
 
@@ -243,8 +243,8 @@ class Tests_Walker extends WP_UnitTestCase {
 
 		$output = $this->walker->walk( $items, 0 );
 
-		$this->assertEquals( 0, $this->walker->get_number_of_root_elements( $items ) );
-		$this->assertEquals( '<li>4</li><li>5</li><li>6</li>', $output );
+		$this->assertSame( 0, $this->walker->get_number_of_root_elements( $items ) );
+		$this->assertSame( '<li>4</li><li>5</li><li>6</li>', $output );
 
 	}
 
@@ -267,18 +267,18 @@ class Tests_Walker extends WP_UnitTestCase {
 
 		$output = $this->walker->walk( $items, 1 );
 
-		$this->assertEquals( 0, $this->walker->get_number_of_root_elements( $items ) );
+		$this->assertSame( 0, $this->walker->get_number_of_root_elements( $items ) );
 
-		// It's not clear what the output of this "should" be
+		// It's not clear what the output of this "should" be.
 
-		// Currently the first item is simply returned
-		$this->assertEquals( '<li>4</li>', $output );
+		// Currently the first item is simply returned.
+		$this->assertSame( '<li>4</li>', $output );
 
 		// But as we've only asked for the first depth maybe nothing should be returned?
-		//$this->assertEquals( '', $output );
+		// $this->assertSame( '', $output );
 
 		// Or maybe all items which are missing parents should simply be treat top level?
-		//$this->assertEquals( '<li>4</li><li>5</li><li>6</li>', $output );
+		// $this->assertSame( '<li>4</li><li>5</li><li>6</li>', $output );
 
 	}
 
diff --git a/tests/widgets.php b/tests/widgets.php
index 9d5f547dc6..1347de0be7 100644
--- a/tests/widgets.php
+++ b/tests/widgets.php
@@ -155,7 +155,7 @@ class Tests_Widgets extends WP_UnitTestCase {
 			}
 		}
 
-		$this->assertEquals( $num, count( $result ) );
+		$this->assertSame( $num, count( $result ) );
 
 	}
 
@@ -288,7 +288,7 @@ class Tests_Widgets extends WP_UnitTestCase {
 		 * If the sidebar ID is invalid, the second argument passed to
 		 * the 'dynamic_sidebar_before' hook will be false.
 		 */
-		$this->assertSame( false, $this->valid_sidebar );
+		$this->assertFalse( $this->valid_sidebar );
 	}
 
 	/**
@@ -349,7 +349,7 @@ class Tests_Widgets extends WP_UnitTestCase {
 		ob_start();
 		$retval = $widget->form( array() );
 		$output = ob_get_clean();
-		$this->assertEquals( 'noform', $retval );
+		$this->assertSame( 'noform', $retval );
 		$this->assertContains( 'no-options-widget', $output );
 	}
 
@@ -361,13 +361,13 @@ class Tests_Widgets extends WP_UnitTestCase {
 		$name       = 'Foo';
 		$foo_widget = new WP_Widget( $id_base, $name );
 
-		$this->assertEquals( $id_base, $foo_widget->id_base );
-		$this->assertEquals( $name, $foo_widget->name );
-		$this->assertEquals( "widget_{$id_base}", $foo_widget->option_name );
+		$this->assertSame( $id_base, $foo_widget->id_base );
+		$this->assertSame( $name, $foo_widget->name );
+		$this->assertSame( "widget_{$id_base}", $foo_widget->option_name );
 		$this->assertArrayHasKey( 'classname', $foo_widget->widget_options );
-		$this->assertEquals( "widget_{$id_base}", $foo_widget->widget_options['classname'] );
+		$this->assertSame( "widget_{$id_base}", $foo_widget->widget_options['classname'] );
 		$this->assertArrayHasKey( 'id_base', $foo_widget->control_options );
-		$this->assertEquals( $id_base, $foo_widget->control_options['id_base'] );
+		$this->assertSame( $id_base, $foo_widget->control_options['id_base'] );
 
 		$id_base         = 'bar';
 		$name            = 'Bar';
@@ -378,8 +378,8 @@ class Tests_Widgets extends WP_UnitTestCase {
 			'id_base' => 'bar_id_base',
 		);
 		$bar_widget      = new WP_Widget( $id_base, $name, $widget_options, $control_options );
-		$this->assertEquals( $widget_options['classname'], $bar_widget->widget_options['classname'] );
-		$this->assertEquals( $control_options['id_base'], $bar_widget->control_options['id_base'] );
+		$this->assertSame( $widget_options['classname'], $bar_widget->widget_options['classname'] );
+		$this->assertSame( $control_options['id_base'], $bar_widget->control_options['id_base'] );
 	}
 
 	/**
@@ -389,7 +389,7 @@ class Tests_Widgets extends WP_UnitTestCase {
 	function test_wp_widget_get_field_name( $expected, $value_to_test ) {
 		$widget = new WP_Widget( 'foo', 'Foo' );
 		$widget->_set( 2 );
-		$this->assertEquals( $expected, $widget->get_field_name( $value_to_test ) );
+		$this->assertSame( $expected, $widget->get_field_name( $value_to_test ) );
 	}
 
 	/**
@@ -439,7 +439,7 @@ class Tests_Widgets extends WP_UnitTestCase {
 	function test_wp_widget_get_field_id( $expected, $value_to_test ) {
 		$widget = new WP_Widget( 'foo', 'Foo' );
 		$widget->_set( 2 );
-		$this->assertEquals( $expected, $widget->get_field_id( $value_to_test ) );
+		$this->assertSame( $expected, $widget->get_field_id( $value_to_test ) );
 	}
 
 
@@ -495,14 +495,14 @@ class Tests_Widgets extends WP_UnitTestCase {
 		$this->assertEmpty( $wp_registered_widgets );
 		wp_widgets_init();
 
-		// Note: We cannot use array_keys() here because $settings could be an ArrayIterator
+		// Note: We cannot use array_keys() here because $settings could be an ArrayIterator.
 		foreach ( $settings as $widget_number => $instance ) {
 			$widget_id = "search-$widget_number";
 			$this->assertArrayHasKey( $widget_id, $wp_registered_widgets );
 		}
 	}
 
-	// @todo test WP_Widget::display_callback()
+	// @todo Test WP_Widget::display_callback().
 
 	/**
 	 * @see WP_Widget::is_preview()
@@ -523,9 +523,9 @@ class Tests_Widgets extends WP_UnitTestCase {
 		$this->assertTrue( $widget->is_preview() );
 	}
 
-	// @todo test WP_Widget::update_callback()
-	// @todo test WP_Widget::form_callback()
-	// @todo test WP_Widget::_register_one()
+	// @todo Test WP_Widget::update_callback().
+	// @todo Test WP_Widget::form_callback().
+	// @todo Test WP_Widget::_register_one().
 
 	/**
 	 * @see WP_Widget::get_settings()
@@ -535,7 +535,7 @@ class Tests_Widgets extends WP_UnitTestCase {
 
 		$option_value = get_option( 'widget_search' );
 		$this->assertArrayHasKey( '_multiwidget', $option_value );
-		$this->assertEquals( 1, $option_value['_multiwidget'] );
+		$this->assertSame( 1, $option_value['_multiwidget'] );
 		$this->assertArrayHasKey( 2, $option_value );
 		$instance = $option_value[2];
 		$this->assertInternalType( 'array', $instance );
@@ -545,7 +545,7 @@ class Tests_Widgets extends WP_UnitTestCase {
 		// Pretend this widget is new.
 		delete_option( 'widget_nav_menu' );
 		$never_used = get_option( 'widget_nav_menu', array() );
-		$this->assertEquals( array(), (array) $never_used );
+		$this->assertSame( array(), (array) $never_used );
 
 		wp_widgets_init();
 		$wp_widget_search = $wp_registered_widgets['search-2']['callback'][0];
@@ -555,12 +555,12 @@ class Tests_Widgets extends WP_UnitTestCase {
 		$this->assertArrayHasKey( 2, $settings );
 
 		foreach ( $option_value as $widget_number => $instance ) {
-			$this->assertEquals( $settings[ $widget_number ], $option_value[ $widget_number ] );
+			$this->assertSame( $settings[ $widget_number ], $option_value[ $widget_number ] );
 		}
 
 		// After widgets_init(), get_settings() should create the widget option.
 		$never_used = get_option( 'widget_nav_menu' );
-		$this->assertEquals( 1, $never_used['_multiwidget'] );
+		$this->assertSame( 1, $never_used['_multiwidget'] );
 		$this->assertArrayNotHasKey( 0, $never_used );
 	}
 
@@ -592,7 +592,7 @@ class Tests_Widgets extends WP_UnitTestCase {
 
 		$option_value = get_option( $wp_widget_search->option_name );
 		$this->assertArrayHasKey( '_multiwidget', $option_value );
-		$this->assertEquals( $overridden_title, $option_value[2]['title'] );
+		$this->assertSame( $overridden_title, $option_value[2]['title'] );
 	}
 
 	/**
@@ -740,7 +740,7 @@ class Tests_Widgets extends WP_UnitTestCase {
 	/**
 	 * Tests for when 'sidebars_widgets' theme mod is populated.
 	 *
-	 * @covers ::retrieve_widgets()
+	 * @covers ::retrieve_widgets
 	 */
 	function test_retrieve_widgets_with_theme_mod() {
 		global $sidebars_widgets, $_wp_sidebars_widgets;
@@ -773,7 +773,7 @@ class Tests_Widgets extends WP_UnitTestCase {
 		$result = retrieve_widgets( true );
 
 		$this->assertInternalType( 'array', $result );
-		$this->assertEquals( $result, $sidebars_widgets );
+		$this->assertSame( $result, $sidebars_widgets );
 
 		foreach ( $sidebars_widgets as $widgets ) {
 			$this->assertInternalType( 'array', $widgets );
@@ -798,13 +798,13 @@ class Tests_Widgets extends WP_UnitTestCase {
 		$this->assertContains( 'recent-comments-2', $sidebars_widgets['wp_inactive_widgets'] );
 
 		// Sidebar_widgets option was updated.
-		$this->assertEquals( $sidebars_widgets, wp_get_sidebars_widgets() );
+		$this->assertSame( $sidebars_widgets, wp_get_sidebars_widgets() );
 	}
 
 	/**
 	 * Tests for when sidebars widgets matches registered sidebars.
 	 *
-	 * @covers ::retrieve_widgets()
+	 * @covers ::retrieve_widgets
 	 */
 	function test_retrieve_widgets_with_sidebars_widgets_matching_registered_sidebars() {
 		global $sidebars_widgets;
@@ -823,7 +823,7 @@ class Tests_Widgets extends WP_UnitTestCase {
 
 		// $sidebars_widgets matches registered sidebars.
 		$this->assertInternalType( 'array', $result );
-		$this->assertEquals( $result, $sidebars_widgets );
+		$this->assertSame( $result, $sidebars_widgets );
 
 		foreach ( $sidebars_widgets as $widgets ) {
 			$this->assertInternalType( 'array', $widgets );
@@ -842,7 +842,7 @@ class Tests_Widgets extends WP_UnitTestCase {
 	/**
 	 * Tests for when sidebars widgets doesn't match registered sidebars.
 	 *
-	 * @covers ::retrieve_widgets()
+	 * @covers ::retrieve_widgets
 	 */
 	function test_retrieve_widgets_with_sidebars_widgets_not_matching_registered_sidebars() {
 		global $sidebars_widgets, $_wp_sidebars_widgets;
@@ -862,7 +862,7 @@ class Tests_Widgets extends WP_UnitTestCase {
 
 		$_wp_sidebars_widgets = array();
 		$this->assertInternalType( 'array', $result );
-		$this->assertEquals( $result, $sidebars_widgets );
+		$this->assertSame( $result, $sidebars_widgets );
 
 		foreach ( $sidebars_widgets as $widgets ) {
 			$this->assertInternalType( 'array', $widgets );
@@ -890,7 +890,7 @@ class Tests_Widgets extends WP_UnitTestCase {
 		$this->assertContains( 'recent-comments-2', $sidebars_widgets['wp_inactive_widgets'] );
 
 		// Sidebar_widgets option was updated.
-		$this->assertEquals( $sidebars_widgets, wp_get_sidebars_widgets() );
+		$this->assertSame( $sidebars_widgets, wp_get_sidebars_widgets() );
 
 		// Reset.
 		$sidebars_widgets = array(
@@ -905,7 +905,7 @@ class Tests_Widgets extends WP_UnitTestCase {
 
 		$_wp_sidebars_widgets = array();
 		$this->assertInternalType( 'array', $result );
-		$this->assertEquals( $result, $sidebars_widgets );
+		$this->assertSame( $result, $sidebars_widgets );
 
 		foreach ( $sidebars_widgets as $widgets ) {
 			$this->assertInternalType( 'array', $widgets );
@@ -930,13 +930,13 @@ class Tests_Widgets extends WP_UnitTestCase {
 		$this->assertContains( 'recent-comments-2', $sidebars_widgets['wp_inactive_widgets'] );
 
 		// Sidebar_widgets option was updated.
-		$this->assertEquals( $sidebars_widgets, wp_get_sidebars_widgets() );
+		$this->assertSame( $sidebars_widgets, wp_get_sidebars_widgets() );
 	}
 
 	/**
 	 * Tests for Customizer mode.
 	 *
-	 * @covers ::retrieve_widgets()
+	 * @covers ::retrieve_widgets
 	 */
 	function test_retrieve_widgets_for_customizer() {
 		global $sidebars_widgets, $_wp_sidebars_widgets;
@@ -957,7 +957,7 @@ class Tests_Widgets extends WP_UnitTestCase {
 
 		$_wp_sidebars_widgets = array();
 		$this->assertInternalType( 'array', $result );
-		$this->assertEquals( $result, $sidebars_widgets );
+		$this->assertSame( $result, $sidebars_widgets );
 
 		foreach ( $sidebars_widgets as $widgets ) {
 			$this->assertInternalType( 'array', $widgets );
@@ -977,7 +977,7 @@ class Tests_Widgets extends WP_UnitTestCase {
 		$this->assertContains( 'recent-comments-2', $sidebars_widgets['wp_inactive_widgets'] );
 
 		// Theme mod with previous widgets was not removed.
-		$this->assertEqualSets( $old_sidebars_widgets, get_theme_mod( 'sidebars_widgets' ) );
+		$this->assertSameSets( $old_sidebars_widgets, get_theme_mod( 'sidebars_widgets' ) );
 
 		// Sidebar_widgets option was not updated.
 		$this->assertNotEquals( $sidebars_widgets, wp_get_sidebars_widgets() );
@@ -1008,7 +1008,7 @@ class Tests_Widgets extends WP_UnitTestCase {
 	/**
 	 * Tests for orphaned widgets being moved into inactive widgets.
 	 *
-	 * @covers ::retrieve_widgets()
+	 * @covers ::retrieve_widgets
 	 */
 	function test_retrieve_widgets_move_orphaned_widgets_to_inactive() {
 		global $sidebars_widgets;
@@ -1037,13 +1037,13 @@ class Tests_Widgets extends WP_UnitTestCase {
 		$this->assertArrayNotHasKey( 'orphaned_widgets_1', $sidebars_widgets );
 
 		// Sidebar_widgets option was updated.
-		$this->assertEquals( $sidebars_widgets, wp_get_sidebars_widgets() );
+		$this->assertSame( $sidebars_widgets, wp_get_sidebars_widgets() );
 	}
 
 	/**
 	 * Test _wp_remove_unregistered_widgets.
 	 *
-	 * @covers ::_wp_remove_unregistered_widgets()
+	 * @covers ::_wp_remove_unregistered_widgets
 	 */
 	public function test__wp_remove_unregistered_widgets() {
 		$widgets = array(
@@ -1054,15 +1054,15 @@ class Tests_Widgets extends WP_UnitTestCase {
 			'array_version'       => 3,
 		);
 
-		$whitelist = array( 'tag_cloud-1', 'text-1' );
+		$allowed_widgets = array( 'tag_cloud-1', 'text-1' );
 
-		$filtered_widgets = _wp_remove_unregistered_widgets( $widgets, $whitelist );
+		$filtered_widgets = _wp_remove_unregistered_widgets( $widgets, $allowed_widgets );
 
 		$this->assertInternalType( 'array', $filtered_widgets );
 		$this->assertArrayHasKey( 'fantasy', $filtered_widgets );
 		$this->assertEmpty( $filtered_widgets['fantasy'] );
 		$this->assertArrayHasKey( 'array_version', $filtered_widgets );
-		$this->assertEquals( 3, $filtered_widgets['array_version'] );
+		$this->assertSame( 3, $filtered_widgets['array_version'] );
 		$this->assertInternalType( 'integer', $filtered_widgets['array_version'] );
 	}
 
@@ -1073,7 +1073,7 @@ class Tests_Widgets extends WP_UnitTestCase {
 	/**
 	 * Two themes with one sidebar each should just map, switching to a theme not previously-active.
 	 *
-	 * @covers ::wp_map_sidebars_widgets()
+	 * @covers ::wp_map_sidebars_widgets
 	 */
 	public function test_one_sidebar_each() {
 		$this->register_sidebars( array( 'primary' ) );
@@ -1093,7 +1093,7 @@ class Tests_Widgets extends WP_UnitTestCase {
 	/**
 	 * Sidebars with the same name should map, switching to a theme not previously-active.
 	 *
-	 * @covers ::wp_map_sidebars_widgets()
+	 * @covers ::wp_map_sidebars_widgets
 	 */
 	public function test_sidebars_with_same_slug() {
 		$this->register_sidebars( array( 'primary', 'secondary' ) );
@@ -1111,7 +1111,7 @@ class Tests_Widgets extends WP_UnitTestCase {
 	/**
 	 * Make educated guesses on theme sidebars.
 	 *
-	 * @covers ::wp_map_sidebars_widgets()
+	 * @covers ::wp_map_sidebars_widgets
 	 */
 	public function test_sidebar_guessing() {
 		$this->register_sidebars( array( 'primary', 'secondary' ) );
@@ -1134,7 +1134,7 @@ class Tests_Widgets extends WP_UnitTestCase {
 	/**
 	 * Make sure two sidebars that fall in the same group don't get the same menu assigned.
 	 *
-	 * @covers ::wp_map_sidebars_widgets()
+	 * @covers ::wp_map_sidebars_widgets
 	 */
 	public function test_sidebar_guessing_one_menu_per_group() {
 		$this->register_sidebars( array( 'primary' ) );
@@ -1149,13 +1149,13 @@ class Tests_Widgets extends WP_UnitTestCase {
 			'main'                => array(),
 			'wp_inactive_widgets' => array(),
 		);
-		$this->assertEqualSets( $expected_sidebars, $new_next_theme_sidebars );
+		$this->assertSameSets( $expected_sidebars, $new_next_theme_sidebars );
 	}
 
 	/**
 	 * Make sure two sidebars that fall in the same group get menus assigned from the same group.
 	 *
-	 * @covers ::wp_map_sidebars_widgets()
+	 * @covers ::wp_map_sidebars_widgets
 	 */
 	public function test_sidebar_guessing_one_menu_per_sidebar() {
 		$this->register_sidebars( array( 'primary', 'main' ) );
diff --git a/tests/widgets/custom-html-widget.php b/tests/widgets/custom-html-widget.php
index 3a31a7d9a5..ad6a39b464 100644
--- a/tests/widgets/custom-html-widget.php
+++ b/tests/widgets/custom-html-widget.php
@@ -47,10 +47,10 @@ class Test_WP_Widget_Custom_HTML extends WP_UnitTestCase {
 	 */
 	public function test_construct() {
 		$widget = new WP_Widget_Custom_HTML();
-		$this->assertEquals( 'custom_html', $widget->id_base );
-		$this->assertEquals( 'widget_custom_html', $widget->widget_options['classname'] );
-		$this->assertEquals( 400, $widget->control_options['width'] );
-		$this->assertEquals( 350, $widget->control_options['height'] );
+		$this->assertSame( 'custom_html', $widget->id_base );
+		$this->assertSame( 'widget_custom_html', $widget->widget_options['classname'] );
+		$this->assertSame( 400, $widget->control_options['width'] );
+		$this->assertSame( 350, $widget->control_options['height'] );
 		$this->assertTrue( $widget->widget_options['customize_selective_refresh'] );
 	}
 
@@ -64,9 +64,9 @@ class Test_WP_Widget_Custom_HTML extends WP_UnitTestCase {
 		$widget = new WP_Widget_Custom_HTML();
 		$widget->_register();
 
-		$this->assertEquals( 10, has_action( 'admin_print_scripts-widgets.php', array( $widget, 'enqueue_admin_scripts' ) ) );
-		$this->assertEquals( 10, has_action( 'admin_footer-widgets.php', array( 'WP_Widget_Custom_HTML', 'render_control_template_scripts' ) ) );
-		$this->assertEquals( 10, has_action( 'admin_head-widgets.php', array( 'WP_Widget_Custom_HTML', 'add_help_text' ) ) );
+		$this->assertSame( 10, has_action( 'admin_print_scripts-widgets.php', array( $widget, 'enqueue_admin_scripts' ) ) );
+		$this->assertSame( 10, has_action( 'admin_footer-widgets.php', array( 'WP_Widget_Custom_HTML', 'render_control_template_scripts' ) ) );
+		$this->assertSame( 10, has_action( 'admin_head-widgets.php', array( 'WP_Widget_Custom_HTML', 'add_help_text' ) ) );
 		$this->assertContains( 'wp.customHtmlWidgets.idBases.push( "custom_html" );', wp_scripts()->registered['custom-html-widgets']->extra['after'] );
 	}
 
@@ -117,8 +117,8 @@ class Test_WP_Widget_Custom_HTML extends WP_UnitTestCase {
 		$this->assertNotContains( '<p>', $output );
 		$this->assertNotContains( '<br>', $output );
 		$this->assertNotContains( '</u>', $output );
-		$this->assertEquals( $text_widget_instance, $this->widget_text_args[1] );
-		$this->assertEquals( $instance, $this->widget_custom_html_content_args[1] );
+		$this->assertSame( $text_widget_instance, $this->widget_text_args[1] );
+		$this->assertSame( $instance, $this->widget_custom_html_content_args[1] );
 		$this->assertSame( $widget, $this->widget_text_args[2] );
 		$this->assertSame( $widget, $this->widget_custom_html_content_args[2] );
 		remove_filter( 'widget_custom_html_content', array( $this, 'filter_widget_custom_html_content' ), 5 );
@@ -185,7 +185,7 @@ class Test_WP_Widget_Custom_HTML extends WP_UnitTestCase {
 			'content' => $instance['content'],
 		);
 		$result   = $widget->update( $instance, array() );
-		$this->assertEquals( $result, $expected );
+		$this->assertSame( $result, $expected );
 
 		// Make sure KSES is applying as expected.
 		add_filter( 'map_meta_cap', array( $this, 'grant_unfiltered_html_cap' ), 10, 2 );
@@ -193,7 +193,7 @@ class Test_WP_Widget_Custom_HTML extends WP_UnitTestCase {
 		$instance['content'] = '<script>alert( "Howdy!" );</script>';
 		$expected['content'] = $instance['content'];
 		$result              = $widget->update( $instance, array() );
-		$this->assertEquals( $result, $expected );
+		$this->assertSame( $result, $expected );
 		remove_filter( 'map_meta_cap', array( $this, 'grant_unfiltered_html_cap' ) );
 
 		add_filter( 'map_meta_cap', array( $this, 'revoke_unfiltered_html_cap' ), 10, 2 );
@@ -201,7 +201,7 @@ class Test_WP_Widget_Custom_HTML extends WP_UnitTestCase {
 		$instance['content'] = '<script>alert( "Howdy!" );</script>';
 		$expected['content'] = wp_kses_post( $instance['content'] );
 		$result              = $widget->update( $instance, array() );
-		$this->assertEquals( $result, $expected );
+		$this->assertSame( $result, $expected );
 		remove_filter( 'map_meta_cap', array( $this, 'revoke_unfiltered_html_cap' ), 10 );
 	}
 
diff --git a/tests/widgets/media-audio-widget.php b/tests/widgets/media-audio-widget.php
index aceba85711..a4e3afd60f 100644
--- a/tests/widgets/media-audio-widget.php
+++ b/tests/widgets/media-audio-widget.php
@@ -35,7 +35,7 @@ class Test_WP_Widget_Media_Audio extends WP_UnitTestCase {
 		$wp_widget_audio = new WP_Widget_Media_Audio();
 		$schema          = $wp_widget_audio->get_instance_schema();
 
-		$this->assertEqualSets(
+		$this->assertSameSets(
 			array_merge(
 				array(
 					'attachment_id',
@@ -85,7 +85,7 @@ class Test_WP_Widget_Media_Audio extends WP_UnitTestCase {
 	/**
 	 * Test constructor.
 	 *
-	 * @covers WP_Widget_Media_Audio::__construct()
+	 * @covers WP_Widget_Media_Audio::__construct
 	 */
 	function test_constructor() {
 		$widget = new WP_Widget_Media_Audio();
@@ -94,8 +94,8 @@ class Test_WP_Widget_Media_Audio extends WP_UnitTestCase {
 		$this->assertArrayHasKey( 'customize_selective_refresh', $widget->widget_options );
 		$this->assertArrayHasKey( 'description', $widget->widget_options );
 		$this->assertTrue( $widget->widget_options['customize_selective_refresh'] );
-		$this->assertEquals( 'audio', $widget->widget_options['mime_type'] );
-		$this->assertEqualSets(
+		$this->assertSame( 'audio', $widget->widget_options['mime_type'] );
+		$this->assertSameSets(
 			array(
 				'add_to_widget',
 				'replace_media',
diff --git a/tests/widgets/media-gallery-widget.php b/tests/widgets/media-gallery-widget.php
index 401a788e5d..091b3b3c5f 100644
--- a/tests/widgets/media-gallery-widget.php
+++ b/tests/widgets/media-gallery-widget.php
@@ -29,13 +29,13 @@ class Test_WP_Widget_Media_Gallery extends WP_UnitTestCase {
 	/**
 	 * Test get_instance_schema method.
 	 *
-	 * @covers WP_Widget_Media_Gallery::get_instance_schema()
+	 * @covers WP_Widget_Media_Gallery::get_instance_schema
 	 */
 	public function test_get_instance_schema() {
 		$widget = new WP_Widget_Media_Gallery();
 		$schema = $widget->get_instance_schema();
 
-		$this->assertEqualSets(
+		$this->assertSameSets(
 			array(
 				'title',
 				'ids',
@@ -51,14 +51,14 @@ class Test_WP_Widget_Media_Gallery extends WP_UnitTestCase {
 	/**
 	 * Test update() method.
 	 *
-	 * @covers WP_Widget_Media_Gallery::render_media()
+	 * @covers WP_Widget_Media_Gallery::render_media
 	 */
 	public function test_render_media() {
 		$widget = new WP_Widget_Media_Gallery();
 
 		$attachments = array();
 		foreach ( array( 'canola.jpg', 'waffles.jpg' ) as $filename ) {
-			$test_image = '/tmp/' . $filename;
+			$test_image = get_temp_dir() . $filename;
 			copy( DIR_TESTDATA . '/images/canola.jpg', $test_image );
 			$attachment_id = self::factory()->attachment->create_object(
 				array(
@@ -89,7 +89,7 @@ class Test_WP_Widget_Media_Gallery extends WP_UnitTestCase {
 	/**
 	 * Test enqueue_admin_scripts() method.
 	 *
-	 * @covers WP_Widget_Media_Gallery::enqueue_admin_scripts()
+	 * @covers WP_Widget_Media_Gallery::enqueue_admin_scripts
 	 */
 	public function test_enqueue_admin_scripts() {
 		set_current_screen( 'widgets.php' );
@@ -108,7 +108,7 @@ class Test_WP_Widget_Media_Gallery extends WP_UnitTestCase {
 	/**
 	 * Test update() method.
 	 *
-	 * @covers WP_Widget_Media_Gallery::update()
+	 * @covers WP_Widget_Media_Gallery::update
 	 */
 	public function test_update() {
 		$widget   = new WP_Widget_Media_Gallery();
@@ -118,7 +118,7 @@ class Test_WP_Widget_Media_Gallery extends WP_UnitTestCase {
 		// Field: title.
 		$instance['title'] = 'Hello <b>World</b> ';
 		$instance          = $widget->update( $instance, array() );
-		$this->assertEquals( 'Hello World', $instance['title'] );
+		$this->assertSame( 'Hello World', $instance['title'] );
 
 		// Field: ids.
 		$instance['ids'] = '1,2,3';
@@ -189,7 +189,7 @@ class Test_WP_Widget_Media_Gallery extends WP_UnitTestCase {
 	/**
 	 * Test render_control_template_scripts() method.
 	 *
-	 * @covers WP_Widget_Media_Gallery::render_control_template_scripts()
+	 * @covers WP_Widget_Media_Gallery::render_control_template_scripts
 	 */
 	public function test_render_control_template_scripts() {
 		$widget = new WP_Widget_Media_Gallery();
diff --git a/tests/widgets/media-image-widget.php b/tests/widgets/media-image-widget.php
index aa4e65f267..a89c8ad6b6 100644
--- a/tests/widgets/media-image-widget.php
+++ b/tests/widgets/media-image-widget.php
@@ -35,7 +35,7 @@ class Test_WP_Widget_Media_Image extends WP_UnitTestCase {
 		$widget = new WP_Widget_Media_Image();
 		$schema = $widget->get_instance_schema();
 
-		$this->assertEqualSets(
+		$this->assertSameSets(
 			array(
 				'alt',
 				'attachment_id',
@@ -92,7 +92,7 @@ class Test_WP_Widget_Media_Image extends WP_UnitTestCase {
 	/**
 	 * Test constructor.
 	 *
-	 * @covers WP_Widget_Media_Image::__construct()
+	 * @covers WP_Widget_Media_Image::__construct
 	 */
 	function test_constructor() {
 		$widget = new WP_Widget_Media_Image();
@@ -101,8 +101,8 @@ class Test_WP_Widget_Media_Image extends WP_UnitTestCase {
 		$this->assertArrayHasKey( 'customize_selective_refresh', $widget->widget_options );
 		$this->assertArrayHasKey( 'description', $widget->widget_options );
 		$this->assertTrue( $widget->widget_options['customize_selective_refresh'] );
-		$this->assertEquals( 'image', $widget->widget_options['mime_type'] );
-		$this->assertEqualSets(
+		$this->assertSame( 'image', $widget->widget_options['mime_type'] );
+		$this->assertSameSets(
 			array(
 				'add_to_widget',
 				'replace_media',
@@ -412,7 +412,7 @@ class Test_WP_Widget_Media_Image extends WP_UnitTestCase {
 	function test_render_media() {
 		$widget = new WP_Widget_Media_Image();
 
-		$test_image = '/tmp/canola.jpg';
+		$test_image = get_temp_dir() . 'canola.jpg';
 		copy( DIR_TESTDATA . '/images/canola.jpg', $test_image );
 		$attachment_id = self::factory()->attachment->create_object(
 			array(
@@ -585,6 +585,21 @@ class Test_WP_Widget_Media_Image extends WP_UnitTestCase {
 		$output = ob_get_clean();
 		$this->assertContains( 'class="wp-caption alignnone"', $output );
 		$this->assertContains( '<p class="wp-caption-text">Custom caption</p>', $output );
+
+		// Attachments with custom sizes can render captions.
+		ob_start();
+		$widget->render_media(
+			array(
+				'attachment_id' => $attachment_id,
+				'size'          => 'custom',
+				'width'         => '300',
+				'height'        => '200',
+				'caption'       => 'Caption for an image with custom size',
+			)
+		);
+		$output = ob_get_clean();
+		$this->assertContains( 'style="width: 310px"', $output );
+		$this->assertContains( '<p class="wp-caption-text">Caption for an image with custom size</p>', $output );
 	}
 
 	/**
diff --git a/tests/widgets/media-video-widget.php b/tests/widgets/media-video-widget.php
index fa37e44c7b..77a83c6ef0 100644
--- a/tests/widgets/media-video-widget.php
+++ b/tests/widgets/media-video-widget.php
@@ -29,13 +29,13 @@ class Test_WP_Widget_Media_Video extends WP_UnitTestCase {
 	/**
 	 * Test get_instance_schema method.
 	 *
-	 * @covers WP_Widget_Media_Video::get_instance_schema()
+	 * @covers WP_Widget_Media_Video::get_instance_schema
 	 */
 	function test_get_instance_schema() {
 		$widget = new WP_Widget_Media_Video();
 		$schema = $widget->get_instance_schema();
 
-		$this->assertEqualSets(
+		$this->assertSameSets(
 			array_merge(
 				array(
 					'attachment_id',
@@ -86,7 +86,7 @@ class Test_WP_Widget_Media_Video extends WP_UnitTestCase {
 	/**
 	 * Test constructor.
 	 *
-	 * @covers WP_Widget_Media_Video::__construct()
+	 * @covers WP_Widget_Media_Video::__construct
 	 */
 	function test_constructor() {
 		$widget = new WP_Widget_Media_Video();
@@ -95,8 +95,8 @@ class Test_WP_Widget_Media_Video extends WP_UnitTestCase {
 		$this->assertArrayHasKey( 'customize_selective_refresh', $widget->widget_options );
 		$this->assertArrayHasKey( 'description', $widget->widget_options );
 		$this->assertTrue( $widget->widget_options['customize_selective_refresh'] );
-		$this->assertEquals( 'video', $widget->widget_options['mime_type'] );
-		$this->assertEqualSets(
+		$this->assertSame( 'video', $widget->widget_options['mime_type'] );
+		$this->assertSameSets(
 			array(
 				'add_to_widget',
 				'replace_media',
@@ -115,7 +115,7 @@ class Test_WP_Widget_Media_Video extends WP_UnitTestCase {
 	/**
 	 * Test get_instance_schema method.
 	 *
-	 * @covers WP_Widget_Media_Video::update()
+	 * @covers WP_Widget_Media_Video::update
 	 */
 	function test_update() {
 		$widget   = new WP_Widget_Media_Video();
@@ -215,8 +215,8 @@ class Test_WP_Widget_Media_Video extends WP_UnitTestCase {
 	/**
 	 * Test render_media method.
 	 *
-	 * @covers WP_Widget_Media_Video::render_media()
-	 * @covers WP_Widget_Media_Video::inject_video_max_width_style()
+	 * @covers WP_Widget_Media_Video::render_media
+	 * @covers WP_Widget_Media_Video::inject_video_max_width_style
 	 */
 	function test_render_media() {
 		$test_movie_file = __FILE__ . '../../data/uploads/small-video.m4v';
@@ -303,7 +303,7 @@ class Test_WP_Widget_Media_Video extends WP_UnitTestCase {
 	 *
 	 * @global WP_Scripts $wp_scripts
 	 * @global WP_Styles $wp_styles
-	 * @covers WP_Widget_Media_Video::enqueue_preview_scripts()
+	 * @covers WP_Widget_Media_Video::enqueue_preview_scripts
 	 */
 	function test_enqueue_preview_scripts() {
 		global $wp_scripts, $wp_styles;
@@ -328,7 +328,7 @@ class Test_WP_Widget_Media_Video extends WP_UnitTestCase {
 	/**
 	 * Test enqueue_admin_scripts method.
 	 *
-	 * @covers WP_Widget_Media_Video::enqueue_admin_scripts()
+	 * @covers WP_Widget_Media_Video::enqueue_admin_scripts
 	 */
 	function test_enqueue_admin_scripts() {
 		set_current_screen( 'widgets.php' );
@@ -341,7 +341,7 @@ class Test_WP_Widget_Media_Video extends WP_UnitTestCase {
 	/**
 	 * Test render_control_template_scripts method.
 	 *
-	 * @covers WP_Widget_Media_Video::render_control_template_scripts()
+	 * @covers WP_Widget_Media_Video::render_control_template_scripts
 	 */
 	function test_render_control_template_scripts() {
 		$widget = new WP_Widget_Media_Video();
diff --git a/tests/widgets/media-widget.php b/tests/widgets/media-widget.php
index 6b9dc926ce..f91b5e12c1 100644
--- a/tests/widgets/media-widget.php
+++ b/tests/widgets/media-widget.php
@@ -50,8 +50,8 @@ class Test_WP_Widget_Media extends WP_UnitTestCase {
 	/**
 	 * Test constructor.
 	 *
-	 * @covers WP_Widget_Media::__construct()
-	 * @covers WP_Widget_Media::_register()
+	 * @covers WP_Widget_Media::__construct
+	 * @covers WP_Widget_Media::_register
 	 */
 	function test_constructor() {
 		$widget = $this->get_mocked_class_instance();
@@ -62,7 +62,7 @@ class Test_WP_Widget_Media extends WP_UnitTestCase {
 		$this->assertArrayHasKey( 'description', $widget->widget_options );
 		$this->assertTrue( $widget->widget_options['customize_selective_refresh'] );
 		$this->assertEmpty( $widget->widget_options['mime_type'] );
-		$this->assertEqualSets(
+		$this->assertSameSets(
 			array(
 				'add_to_widget',
 				'replace_media',
@@ -76,10 +76,10 @@ class Test_WP_Widget_Media extends WP_UnitTestCase {
 			),
 			array_keys( $widget->l10n )
 		);
-		$this->assertEquals( count( $widget->l10n ), count( array_filter( $widget->l10n ) ), 'Expected all translation strings to be defined.' );
-		$this->assertEquals( 10, has_action( 'admin_print_scripts-widgets.php', array( $widget, 'enqueue_admin_scripts' ) ) );
+		$this->assertSame( count( $widget->l10n ), count( array_filter( $widget->l10n ) ), 'Expected all translation strings to be defined.' );
+		$this->assertSame( 10, has_action( 'admin_print_scripts-widgets.php', array( $widget, 'enqueue_admin_scripts' ) ) );
 		$this->assertFalse( has_action( 'wp_enqueue_scripts', array( $widget, 'enqueue_preview_scripts' ) ), 'Did not expect preview scripts to be enqueued when not in customize preview context.' );
-		$this->assertEquals( 10, has_action( 'admin_footer-widgets.php', array( $widget, 'render_control_template_scripts' ) ) );
+		$this->assertSame( 10, has_action( 'admin_footer-widgets.php', array( $widget, 'render_control_template_scripts' ) ) );
 
 		// With non-default args.
 		$id_base         = 'media_pdf';
@@ -92,8 +92,8 @@ class Test_WP_Widget_Media extends WP_UnitTestCase {
 			'height' => 1100,
 		);
 		$widget          = $this->get_mocked_class_instance( $id_base, $name, $widget_options, $control_options );
-		$this->assertEquals( $id_base, $widget->id_base );
-		$this->assertEquals( $name, $widget->name );
+		$this->assertSame( $id_base, $widget->id_base );
+		$this->assertSame( $name, $widget->name );
 
 		// Method assertArraySubset doesn't exist in phpunit versions compatible with PHP 5.2.
 		if ( method_exists( $this, 'assertArraySubset' ) ) {
@@ -106,8 +106,8 @@ class Test_WP_Widget_Media extends WP_UnitTestCase {
 	 * Test constructor in customize preview.
 	 *
 	 * @global WP_Customize_Manager $wp_customize
-	 * @covers WP_Widget_Media::__construct()
-	 * @covers WP_Widget_Media::_register()
+	 * @covers WP_Widget_Media::__construct
+	 * @covers WP_Widget_Media::_register
 	 */
 	function test_constructor_in_customize_preview() {
 		global $wp_customize;
@@ -128,7 +128,7 @@ class Test_WP_Widget_Media extends WP_UnitTestCase {
 
 		$widget = $this->get_mocked_class_instance();
 		$widget->_register();
-		$this->assertEquals( 10, has_action( 'wp_enqueue_scripts', array( $widget, 'enqueue_preview_scripts' ) ) );
+		$this->assertSame( 10, has_action( 'wp_enqueue_scripts', array( $widget, 'enqueue_preview_scripts' ) ) );
 	}
 
 	/**
@@ -138,7 +138,7 @@ class Test_WP_Widget_Media extends WP_UnitTestCase {
 	 */
 	function test_is_attachment_with_mime_type() {
 
-		$test_image = '/tmp/canola.jpg';
+		$test_image = get_temp_dir() . 'canola.jpg';
 		copy( DIR_TESTDATA . '/images/canola.jpg', $test_image );
 		$attachment_id = self::factory()->attachment->create_object(
 			array(
@@ -169,10 +169,10 @@ class Test_WP_Widget_Media extends WP_UnitTestCase {
 		$widget = $this->get_mocked_class_instance();
 
 		$result = $widget->sanitize_token_list( 'What A false class with-token <a href="#">and link</a>' );
-		$this->assertEquals( 'What A false class with-token a hrefand linka', $result );
+		$this->assertSame( 'What A false class with-token a hrefand linka', $result );
 
 		$result = $widget->sanitize_token_list( array( 'foo', '<i>bar', '">NO' ) );
-		$this->assertEquals( $result, 'foo ibar NO' );
+		$this->assertSame( $result, 'foo ibar NO' );
 	}
 
 	/**
@@ -206,7 +206,7 @@ class Test_WP_Widget_Media extends WP_UnitTestCase {
 		$widget = $this->get_mocked_class_instance();
 		$schema = $widget->get_instance_schema();
 
-		$this->assertEqualSets(
+		$this->assertSameSets(
 			array(
 				'attachment_id',
 				'title',
@@ -221,14 +221,14 @@ class Test_WP_Widget_Media extends WP_UnitTestCase {
 		$schema = $widget->get_instance_schema();
 		$this->assertInternalType( 'array', $this->filter_instance_schema_args );
 		$this->assertSame( $widget, $this->filter_instance_schema_args['widget'] );
-		$this->assertEqualSets( array( 'attachment_id', 'title', 'url' ), array_keys( $this->filter_instance_schema_args['schema'] ) );
+		$this->assertSameSets( array( 'attachment_id', 'title', 'url' ), array_keys( $this->filter_instance_schema_args['schema'] ) );
 		$this->assertArrayHasKey( 'injected', $schema );
 	}
 
 	/**
 	 * Test update method.
 	 *
-	 * @covers WP_Widget_Media::update()
+	 * @covers WP_Widget_Media::update
 	 */
 	function test_update() {
 		$widget   = $this->get_mocked_class_instance();
@@ -314,8 +314,8 @@ class Test_WP_Widget_Media extends WP_UnitTestCase {
 	/**
 	 * Test widget method.
 	 *
-	 * @covers WP_Widget_Media::widget()
-	 * @covers WP_Widget_Media::render_media()
+	 * @covers WP_Widget_Media::widget
+	 * @covers WP_Widget_Media::render_media
 	 */
 	function test_widget() {
 		$args     = array(
@@ -339,8 +339,8 @@ class Test_WP_Widget_Media extends WP_UnitTestCase {
 		$widget->widget( $args, $instance );
 		$this->assertCount( 3, $this->widget_instance_filter_args );
 		$this->assertEquals( $instance, $this->widget_instance_filter_args[0] );
-		$this->assertEquals( $args, $this->widget_instance_filter_args[1] );
-		$this->assertEquals( $widget, $this->widget_instance_filter_args[2] );
+		$this->assertSame( $args, $this->widget_instance_filter_args[1] );
+		$this->assertSame( $widget, $this->widget_instance_filter_args[2] );
 		$output = ob_get_clean();
 
 		$this->assertContains( '<h2>Foo</h2>', $output );
@@ -389,7 +389,7 @@ class Test_WP_Widget_Media extends WP_UnitTestCase {
 	/**
 	 * Test form method.
 	 *
-	 * @covers WP_Widget_Media::form()
+	 * @covers WP_Widget_Media::form
 	 */
 	function test_form() {
 		$widget = $this->get_mocked_class_instance();
@@ -406,7 +406,7 @@ class Test_WP_Widget_Media extends WP_UnitTestCase {
 	/**
 	 * Test display_media_state method.
 	 *
-	 * @covers WP_Widget_Media::display_media_state()
+	 * @covers WP_Widget_Media::display_media_state
 	 */
 	function test_display_media_state() {
 		$widget        = $this->get_mocked_class_instance();
@@ -419,7 +419,7 @@ class Test_WP_Widget_Media extends WP_UnitTestCase {
 		);
 
 		$result = $widget->display_media_state( array(), get_post( $attachment_id ) );
-		$this->assertEqualSets( array(), $result );
+		$this->assertSameSets( array(), $result );
 
 		$widget->save_settings(
 			array(
@@ -429,7 +429,7 @@ class Test_WP_Widget_Media extends WP_UnitTestCase {
 			)
 		);
 		$result = $widget->display_media_state( array(), get_post( $attachment_id ) );
-		$this->assertEqualSets( array( $widget->l10n['media_library_state_single'] ), $result );
+		$this->assertSameSets( array( $widget->l10n['media_library_state_single'] ), $result );
 
 		$widget->save_settings(
 			array(
@@ -442,13 +442,13 @@ class Test_WP_Widget_Media extends WP_UnitTestCase {
 			)
 		);
 		$result = $widget->display_media_state( array(), get_post( $attachment_id ) );
-		$this->assertEqualSets( array( sprintf( $widget->l10n['media_library_state_multi']['singular'], 2 ) ), $result );
+		$this->assertSameSets( array( sprintf( $widget->l10n['media_library_state_multi']['singular'], 2 ) ), $result );
 	}
 
 	/**
 	 * Test enqueue_admin_scripts method.
 	 *
-	 * @covers WP_Widget_Media::enqueue_admin_scripts()
+	 * @covers WP_Widget_Media::enqueue_admin_scripts
 	 */
 	function test_enqueue_admin_scripts() {
 		set_current_screen( 'widgets.php' );
@@ -476,7 +476,7 @@ class Test_WP_Widget_Media extends WP_UnitTestCase {
 	/**
 	 * Test has_content method.
 	 *
-	 * @covers WP_Widget_Media::has_content()
+	 * @covers WP_Widget_Media::has_content
 	 */
 	function test_has_content() {
 		$attachment_id = self::factory()->attachment->create_object(
diff --git a/tests/widgets/text-widget.php b/tests/widgets/text-widget.php
index eeb37c7ce3..42ca86d709 100644
--- a/tests/widgets/text-widget.php
+++ b/tests/widgets/text-widget.php
@@ -48,11 +48,11 @@ class Test_WP_Widget_Text extends WP_UnitTestCase {
 	 */
 	function test_construct() {
 		$widget = new WP_Widget_Text();
-		$this->assertEquals( 'text', $widget->id_base );
-		$this->assertEquals( 'widget_text', $widget->widget_options['classname'] );
+		$this->assertSame( 'text', $widget->id_base );
+		$this->assertSame( 'widget_text', $widget->widget_options['classname'] );
 		$this->assertTrue( $widget->widget_options['customize_selective_refresh'] );
-		$this->assertEquals( 400, $widget->control_options['width'] );
-		$this->assertEquals( 350, $widget->control_options['height'] );
+		$this->assertSame( 400, $widget->control_options['width'] );
+		$this->assertSame( 350, $widget->control_options['height'] );
 	}
 
 	/**
@@ -65,8 +65,8 @@ class Test_WP_Widget_Text extends WP_UnitTestCase {
 		$widget = new WP_Widget_Text();
 		$widget->_register();
 
-		$this->assertEquals( 10, has_action( 'admin_print_scripts-widgets.php', array( $widget, 'enqueue_admin_scripts' ) ) );
-		$this->assertEquals( 10, has_action( 'admin_footer-widgets.php', array( 'WP_Widget_Text', 'render_control_template_scripts' ) ) );
+		$this->assertSame( 10, has_action( 'admin_print_scripts-widgets.php', array( $widget, 'enqueue_admin_scripts' ) ) );
+		$this->assertSame( 10, has_action( 'admin_footer-widgets.php', array( 'WP_Widget_Text', 'render_control_template_scripts' ) ) );
 		$this->assertContains( 'wp.textWidgets.idBases.push( "text" );', wp_scripts()->registered['text-widgets']->extra['after'] );
 		$this->assertFalse( has_action( 'wp_enqueue_scripts', array( $widget, 'enqueue_preview_scripts' ) ) );
 	}
@@ -75,8 +75,8 @@ class Test_WP_Widget_Text extends WP_UnitTestCase {
 	 * Test register in customize preview.
 	 *
 	 * @global WP_Customize_Manager $wp_customize
-	 * @covers WP_Widget_Text::__construct()
-	 * @covers WP_Widget_Text::_register()
+	 * @covers WP_Widget_Text::__construct
+	 * @covers WP_Widget_Text::_register
 	 */
 	function test__register_in_customize_preview() {
 		global $wp_customize;
@@ -97,7 +97,7 @@ class Test_WP_Widget_Text extends WP_UnitTestCase {
 
 		$widget = new WP_Widget_Text();
 		$widget->_register();
-		$this->assertEquals( 10, has_action( 'wp_enqueue_scripts', array( $widget, 'enqueue_preview_scripts' ) ) );
+		$this->assertSame( 10, has_action( 'wp_enqueue_scripts', array( $widget, 'enqueue_preview_scripts' ) ) );
 	}
 
 	/**
@@ -173,9 +173,9 @@ class Test_WP_Widget_Text extends WP_UnitTestCase {
 		$this->assertContains( '<p>', $output );
 		$this->assertContains( '<br />', $output );
 		$this->assertNotEmpty( $this->widget_text_args );
-		$this->assertEquals( $instance['text'], $this->widget_text_args[0] );
-		$this->assertEquals( $instance, $this->widget_text_args[1] );
-		$this->assertEquals( $widget, $this->widget_text_args[2] );
+		$this->assertSame( $instance['text'], $this->widget_text_args[0] );
+		$this->assertSame( $instance, $this->widget_text_args[1] );
+		$this->assertSame( $widget, $this->widget_text_args[2] );
 		$this->assertEmpty( $this->widget_text_content_args );
 		$this->assertContains( '[filter:widget_text]', $output );
 		$this->assertNotContains( '[filter:widget_text_content]', $output );
@@ -200,13 +200,13 @@ class Test_WP_Widget_Text extends WP_UnitTestCase {
 		$this->assertContains( '<p>', $output );
 		$this->assertContains( '<br />', $output );
 		$this->assertCount( 3, $this->widget_text_args );
-		$this->assertEquals( $expected_instance['text'], $this->widget_text_args[0] );
-		$this->assertEquals( $expected_instance, $this->widget_text_args[1] );
-		$this->assertEquals( $widget, $this->widget_text_args[2] );
+		$this->assertSame( $expected_instance['text'], $this->widget_text_args[0] );
+		$this->assertSame( $expected_instance, $this->widget_text_args[1] );
+		$this->assertSame( $widget, $this->widget_text_args[2] );
 		$this->assertCount( 3, $this->widget_text_content_args );
-		$this->assertEquals( $expected_instance['text'] . '[filter:widget_text]', $this->widget_text_content_args[0] );
-		$this->assertEquals( $expected_instance, $this->widget_text_content_args[1] );
-		$this->assertEquals( $widget, $this->widget_text_content_args[2] );
+		$this->assertSame( $expected_instance['text'] . '[filter:widget_text]', $this->widget_text_content_args[0] );
+		$this->assertSame( $expected_instance, $this->widget_text_content_args[1] );
+		$this->assertSame( $widget, $this->widget_text_content_args[2] );
 		$this->assertContains( wpautop( $expected_instance['text'] . '[filter:widget_text][filter:widget_text_content]' ), $output );
 
 		// Test with filter=true&visual=true, the upgraded widget, in 4.8.1 and above.
@@ -224,13 +224,13 @@ class Test_WP_Widget_Text extends WP_UnitTestCase {
 		$this->assertContains( '<p>', $output );
 		$this->assertContains( '<br />', $output );
 		$this->assertCount( 3, $this->widget_text_args );
-		$this->assertEquals( $expected_instance['text'], $this->widget_text_args[0] );
-		$this->assertEquals( $expected_instance, $this->widget_text_args[1] );
-		$this->assertEquals( $widget, $this->widget_text_args[2] );
+		$this->assertSame( $expected_instance['text'], $this->widget_text_args[0] );
+		$this->assertSame( $expected_instance, $this->widget_text_args[1] );
+		$this->assertSame( $widget, $this->widget_text_args[2] );
 		$this->assertCount( 3, $this->widget_text_content_args );
-		$this->assertEquals( $expected_instance['text'] . '[filter:widget_text]', $this->widget_text_content_args[0] );
-		$this->assertEquals( $expected_instance, $this->widget_text_content_args[1] );
-		$this->assertEquals( $widget, $this->widget_text_content_args[2] );
+		$this->assertSame( $expected_instance['text'] . '[filter:widget_text]', $this->widget_text_content_args[0] );
+		$this->assertSame( $expected_instance, $this->widget_text_content_args[1] );
+		$this->assertSame( $widget, $this->widget_text_content_args[2] );
 		$this->assertContains( wpautop( $expected_instance['text'] . '[filter:widget_text][filter:widget_text_content]' ), $output );
 
 		// Test with filter=true&visual=true, the upgraded widget, in 4.8.1 and above.
@@ -248,9 +248,9 @@ class Test_WP_Widget_Text extends WP_UnitTestCase {
 		$this->assertContains( '<p>', $output );
 		$this->assertContains( '<br />', $output );
 		$this->assertCount( 3, $this->widget_text_args );
-		$this->assertEquals( $expected_instance['text'], $this->widget_text_args[0] );
-		$this->assertEquals( $expected_instance, $this->widget_text_args[1] );
-		$this->assertEquals( $widget, $this->widget_text_args[2] );
+		$this->assertSame( $expected_instance['text'], $this->widget_text_args[0] );
+		$this->assertSame( $expected_instance, $this->widget_text_args[1] );
+		$this->assertSame( $widget, $this->widget_text_args[2] );
 		$this->assertNull( $this->widget_text_content_args );
 		$this->assertContains( wpautop( $expected_instance['text'] . '[filter:widget_text]' ), $output );
 
@@ -269,9 +269,9 @@ class Test_WP_Widget_Text extends WP_UnitTestCase {
 		$this->assertNotContains( '<p>', $output );
 		$this->assertNotContains( '<br />', $output );
 		$this->assertCount( 3, $this->widget_text_args );
-		$this->assertEquals( $expected_instance['text'], $this->widget_text_args[0] );
-		$this->assertEquals( $expected_instance, $this->widget_text_args[1] );
-		$this->assertEquals( $widget, $this->widget_text_args[2] );
+		$this->assertSame( $expected_instance['text'], $this->widget_text_args[0] );
+		$this->assertSame( $expected_instance, $this->widget_text_args[1] );
+		$this->assertSame( $widget, $this->widget_text_args[2] );
 		$this->assertNull( $this->widget_text_content_args );
 		$this->assertContains( $expected_instance['text'] . '[filter:widget_text]', $output );
 	}
@@ -333,7 +333,7 @@ class Test_WP_Widget_Text extends WP_UnitTestCase {
 			'filter' => false,
 		);
 
-		// Legacy Text Widget without wpautop.
+		// Legacy Text Widget without wpautop().
 		$instance                     = array_merge(
 			$base_instance,
 			array(
@@ -344,13 +344,13 @@ class Test_WP_Widget_Text extends WP_UnitTestCase {
 		ob_start();
 		$widget->widget( $args, $instance );
 		$output = ob_get_clean();
-		$this->assertEquals( 1, $this->shortcode_render_count );
+		$this->assertSame( 1, $this->shortcode_render_count );
 		$this->assertNotContains( '[example]', $output, 'Expected shortcode to be processed in legacy widget with plugin adding filter' );
 		$this->assertContains( $this->example_shortcode_content, $output, 'Shortcode was applied without wpautop corrupting it.' );
 		$this->assertNotContains( '<p>' . $this->example_shortcode_content . '</p>', $output, 'Expected shortcode_unautop() to have run.' );
 		$this->assertNull( $this->post_during_shortcode );
 
-		// Legacy Text Widget with wpautop.
+		// Legacy Text Widget with wpautop().
 		$instance                     = array_merge(
 			$base_instance,
 			array(
@@ -362,7 +362,7 @@ class Test_WP_Widget_Text extends WP_UnitTestCase {
 		ob_start();
 		$widget->widget( $args, $instance );
 		$output = ob_get_clean();
-		$this->assertEquals( 1, $this->shortcode_render_count );
+		$this->assertSame( 1, $this->shortcode_render_count );
 		$this->assertNotContains( '[example]', $output, 'Expected shortcode to be processed in legacy widget with plugin adding filter' );
 		$this->assertContains( $this->example_shortcode_content, $output, 'Shortcode was applied without wpautop corrupting it.' );
 		$this->assertNotContains( '<p>' . $this->example_shortcode_content . '</p>', $output, 'Expected shortcode_unautop() to have run.' );
@@ -374,7 +374,7 @@ class Test_WP_Widget_Text extends WP_UnitTestCase {
 		ob_start();
 		$widget->widget( $args, $instance );
 		$output = ob_get_clean();
-		$this->assertEquals( 1, $this->shortcode_render_count );
+		$this->assertSame( 1, $this->shortcode_render_count );
 		$this->assertNotContains( '[example]', $output, 'Expected shortcode to be processed in legacy widget with plugin adding filter' );
 		$this->assertContains( wpautop( $this->example_shortcode_content ), $output, 'Shortcode was applied *with* wpautop() applying to shortcode output since plugin used legacy filter.' );
 		$this->assertNull( $this->post_during_shortcode );
@@ -388,18 +388,18 @@ class Test_WP_Widget_Text extends WP_UnitTestCase {
 			)
 		);
 
-		// Visual Text Widget with only core-added widget_text_content filter for do_shortcode.
+		// Visual Text Widget with only core-added widget_text_content filter for do_shortcode().
 		$this->assertFalse( has_filter( 'widget_text', 'do_shortcode' ) );
-		$this->assertEquals( 11, has_filter( 'widget_text_content', 'do_shortcode' ), 'Expected core to have set do_shortcode as widget_text_content filter.' );
+		$this->assertSame( 11, has_filter( 'widget_text_content', 'do_shortcode' ), 'Expected core to have set do_shortcode as widget_text_content filter.' );
 		$this->shortcode_render_count = 0;
 		ob_start();
 		$widget->widget( $args, $instance );
 		$output = ob_get_clean();
-		$this->assertEquals( 1, $this->shortcode_render_count );
+		$this->assertSame( 1, $this->shortcode_render_count );
 		$this->assertContains( $this->example_shortcode_content, $output, 'Shortcode was applied without wpautop corrupting it.' );
 		$this->assertNotContains( '<p>' . $this->example_shortcode_content . '</p>', $output, 'Expected shortcode_unautop() to have run.' );
 		$this->assertFalse( has_filter( 'widget_text', 'do_shortcode' ), 'The widget_text filter still lacks do_shortcode handler.' );
-		$this->assertEquals( 11, has_filter( 'widget_text_content', 'do_shortcode' ), 'The widget_text_content filter still has do_shortcode handler.' );
+		$this->assertSame( 11, has_filter( 'widget_text_content', 'do_shortcode' ), 'The widget_text_content filter still has do_shortcode handler.' );
 		$this->assertNull( $this->post_during_shortcode );
 
 		// Visual Text Widget with both filters applied added, one from core and another via plugin.
@@ -408,10 +408,10 @@ class Test_WP_Widget_Text extends WP_UnitTestCase {
 		ob_start();
 		$widget->widget( $args, $instance );
 		$output = ob_get_clean();
-		$this->assertEquals( 1, $this->shortcode_render_count );
+		$this->assertSame( 1, $this->shortcode_render_count );
 		$this->assertContains( $this->example_shortcode_content, $output, 'Shortcode was applied without wpautop corrupting it.' );
 		$this->assertNotContains( '<p>' . $this->example_shortcode_content . '</p>', $output, 'Expected shortcode_unautop() to have run.' );
-		$this->assertEquals( 10, has_filter( 'widget_text', 'do_shortcode' ), 'Expected do_shortcode to be restored to widget_text.' );
+		$this->assertSame( 10, has_filter( 'widget_text', 'do_shortcode' ), 'Expected do_shortcode to be restored to widget_text.' );
 		$this->assertNull( $this->post_during_shortcode );
 		$this->assertNull( $this->post_during_shortcode );
 		remove_filter( 'widget_text', 'do_shortcode' );
@@ -423,7 +423,7 @@ class Test_WP_Widget_Text extends WP_UnitTestCase {
 		ob_start();
 		$widget->widget( $args, $instance );
 		$output = ob_get_clean();
-		$this->assertEquals( 0, $this->shortcode_render_count );
+		$this->assertSame( 0, $this->shortcode_render_count );
 		$this->assertContains( '[example]', $output );
 		$this->assertNotContains( $this->example_shortcode_content, $output );
 		$this->assertFalse( has_filter( 'widget_text', 'do_shortcode' ) );
@@ -602,7 +602,7 @@ class Test_WP_Widget_Text extends WP_UnitTestCase {
 			$this->assertTrue( $widget->is_legacy_instance( $instance ), 'Legacy when not-wpautop and there is HTML that is not liable to be mutated.' );
 		}
 
-		// Check text examples that will migrate to TinyMCE, where elements and attributes are not in whitelist.
+		// Check text examples that will migrate to TinyMCE, where elements and attributes are not in the allowed list.
 		$migratable_text_examples = array(
 			'Check out <a href="http://example.com">Example</a>',
 			'<img src="http://example.com/img.jpg" alt="Img">',
@@ -730,7 +730,7 @@ class Test_WP_Widget_Text extends WP_UnitTestCase {
 			'visual' => true,
 		);
 		$result   = $widget->update( $instance, array() );
-		$this->assertEquals( $expected, $result );
+		$this->assertSame( $expected, $result );
 		$this->assertTrue( ! empty( $expected['filter'] ), 'Expected filter prop to be truthy, to handle case where 4.8 is downgraded to 4.7.' );
 
 		add_filter( 'map_meta_cap', array( $this, 'grant_unfiltered_html_cap' ), 10, 2 );
@@ -738,7 +738,7 @@ class Test_WP_Widget_Text extends WP_UnitTestCase {
 		$instance['text'] = '<script>alert( "Howdy!" );</script>';
 		$expected['text'] = $instance['text'];
 		$result           = $widget->update( $instance, array() );
-		$this->assertEquals( $expected, $result, 'KSES should apply as expected.' );
+		$this->assertSame( $expected, $result, 'KSES should apply as expected.' );
 		remove_filter( 'map_meta_cap', array( $this, 'grant_unfiltered_html_cap' ) );
 
 		add_filter( 'map_meta_cap', array( $this, 'revoke_unfiltered_html_cap' ), 10, 2 );
@@ -746,7 +746,7 @@ class Test_WP_Widget_Text extends WP_UnitTestCase {
 		$instance['text'] = '<script>alert( "Howdy!" );</script>';
 		$expected['text'] = wp_kses_post( $instance['text'] );
 		$result           = $widget->update( $instance, array() );
-		$this->assertEquals( $expected, $result, 'KSES should not apply since user can unfiltered_html.' );
+		$this->assertSame( $expected, $result, 'KSES should not apply since user can unfiltered_html.' );
 		remove_filter( 'map_meta_cap', array( $this, 'revoke_unfiltered_html_cap' ), 10 );
 	}
 
@@ -765,7 +765,7 @@ class Test_WP_Widget_Text extends WP_UnitTestCase {
 			'filter' => false,
 		);
 		$result   = $widget->update( $instance, array() );
-		$this->assertEquals( $instance, $result, 'Updating a widget without visual prop and explicit filter=false leaves visual prop absent' );
+		$this->assertSame( $instance, $result, 'Updating a widget without visual prop and explicit filter=false leaves visual prop absent' );
 
 		// --
 		$instance = array(
@@ -774,7 +774,7 @@ class Test_WP_Widget_Text extends WP_UnitTestCase {
 			'filter' => true,
 		);
 		$result   = $widget->update( $instance, array() );
-		$this->assertEquals( $instance, $result, 'Updating a widget without visual prop and explicit filter=true leaves legacy prop absent.' );
+		$this->assertSame( $instance, $result, 'Updating a widget without visual prop and explicit filter=true leaves legacy prop absent.' );
 
 		// --
 		$instance     = array(
@@ -795,7 +795,7 @@ class Test_WP_Widget_Text extends WP_UnitTestCase {
 			)
 		);
 		$result       = $widget->update( $instance, $old_instance );
-		$this->assertEquals( $expected, $result, 'Updating a pre-existing widget with visual mode forces filter to be true.' );
+		$this->assertSame( $expected, $result, 'Updating a pre-existing widget with visual mode forces filter to be true.' );
 
 		// --
 		$instance     = array(
@@ -816,7 +816,7 @@ class Test_WP_Widget_Text extends WP_UnitTestCase {
 				'visual' => true,
 			)
 		);
-		$this->assertEquals( $expected, $result, 'Updating a pre-existing visual widget retains visual mode when updated.' );
+		$this->assertSame( $expected, $result, 'Updating a pre-existing visual widget retains visual mode when updated.' );
 
 		// --
 		$instance     = array(
@@ -837,7 +837,7 @@ class Test_WP_Widget_Text extends WP_UnitTestCase {
 				'filter' => true,
 			)
 		);
-		$this->assertEquals( $expected, $result, 'Updating a pre-existing visual widget retains visual=true and supplies missing filter=true.' );
+		$this->assertSame( $expected, $result, 'Updating a pre-existing visual widget retains visual=true and supplies missing filter=true.' );
 
 		// --
 		$instance = array(
@@ -890,7 +890,7 @@ class Test_WP_Widget_Text extends WP_UnitTestCase {
 				'filter' => false,
 			)
 		);
-		$this->assertEquals( $expected, $result, 'Updating a widget that previously had legacy form results in filter allowed to be false.' );
+		$this->assertSame( $expected, $result, 'Updating a widget that previously had legacy form results in filter allowed to be false.' );
 
 		// --
 		$instance = array(
@@ -906,7 +906,7 @@ class Test_WP_Widget_Text extends WP_UnitTestCase {
 				'visual' => true,
 			)
 		);
-		$this->assertEquals( $expected, $result, 'Updating a widget that had \'content\' as its filter value persists non-legacy mode. This only existed in WP 4.8.0.' );
+		$this->assertSame( $expected, $result, 'Updating a widget that had \'content\' as its filter value persists non-legacy mode. This only existed in WP 4.8.0.' );
 
 		// --
 		$instance     = array(
@@ -943,7 +943,7 @@ class Test_WP_Widget_Text extends WP_UnitTestCase {
 				'visual' => true,
 			)
 		);
-		$this->assertEquals( $expected, $result, 'Updating a widget with filter=content (from WP 4.8.0) upgrades to filter=true&visual=true.' );
+		$this->assertSame( $expected, $result, 'Updating a widget with filter=content (from WP 4.8.0) upgrades to filter=true&visual=true.' );
 	}
 
 	/**
diff --git a/tests/xmlrpc/basic.php b/tests/xmlrpc/basic.php
index 68c8e8f0df..25e36f7204 100644
--- a/tests/xmlrpc/basic.php
+++ b/tests/xmlrpc/basic.php
@@ -13,7 +13,7 @@ class Tests_XMLRPC_Basic extends WP_XMLRPC_UnitTestCase {
 
 		$this->assertIXRError( $result );
 		// If disabled, 405 would result.
-		$this->assertEquals( 403, $result->code );
+		$this->assertSame( 403, $result->code );
 	}
 
 	function test_login_pass_ok() {
@@ -29,7 +29,7 @@ class Tests_XMLRPC_Basic extends WP_XMLRPC_UnitTestCase {
 		$this->assertFalse( $this->myxmlrpcserver->login_pass_ok( 'username', 'password' ) );
 		$this->assertFalse( $this->myxmlrpcserver->login( 'username', 'password' ) );
 
-		// The auth will still fail due to authentication blocking after the first failed attempt
+		// The auth will still fail due to authentication blocking after the first failed attempt.
 		$this->assertFalse( $this->myxmlrpcserver->login_pass_ok( 'subscriber', 'subscriber' ) );
 	}
 
@@ -45,7 +45,7 @@ class Tests_XMLRPC_Basic extends WP_XMLRPC_UnitTestCase {
 		);
 
 		$method_calls = array(
-			// Valid login
+			// Valid login.
 			array(
 				'methodName' => 'wp.editPost',
 				'params'     => array(
@@ -58,7 +58,7 @@ class Tests_XMLRPC_Basic extends WP_XMLRPC_UnitTestCase {
 					),
 				),
 			),
-			// *Invalid* login
+			// *Invalid* login.
 			array(
 				'methodName' => 'wp.editPost',
 				'params'     => array(
@@ -71,7 +71,7 @@ class Tests_XMLRPC_Basic extends WP_XMLRPC_UnitTestCase {
 					),
 				),
 			),
-			// Valid login
+			// Valid login.
 			array(
 				'methodName' => 'wp.editPost',
 				'params'     => array(
diff --git a/tests/xmlrpc/client.php b/tests/xmlrpc/client.php
index 8b45017321..7234b2fa67 100644
--- a/tests/xmlrpc/client.php
+++ b/tests/xmlrpc/client.php
@@ -12,9 +12,9 @@ class Tests_XMLRPC_Client extends WP_XMLRPC_UnitTestCase {
 	 */
 	function test_ixr_client_allows_query_strings() {
 		$client = new IXR_Client( 'http://example.com/server.php?this-is-needed=true#not-this' );
-		$this->assertEquals( 'example.com', $client->server );
-		$this->assertEquals( 80, $client->port );
-		$this->assertEquals( '/server.php?this-is-needed=true', $client->path );
+		$this->assertSame( 'example.com', $client->server );
+		$this->assertSame( 80, $client->port );
+		$this->assertSame( '/server.php?this-is-needed=true', $client->path );
 	}
 
 	/**
@@ -22,9 +22,9 @@ class Tests_XMLRPC_Client extends WP_XMLRPC_UnitTestCase {
 	 */
 	function test_wp_ixr_client_allows_query_strings() {
 		$client = new WP_HTTP_IXR_Client( 'http://example.com/server.php?this-is-needed=true#not-this' );
-		$this->assertEquals( 'example.com', $client->server );
+		$this->assertSame( 'example.com', $client->server );
 		$this->assertFalse( $client->port );
-		$this->assertEquals( '/server.php?this-is-needed=true', $client->path );
+		$this->assertSame( '/server.php?this-is-needed=true', $client->path );
 	}
 }
 
diff --git a/tests/xmlrpc/mt/getRecentPostTitles.php b/tests/xmlrpc/mt/getRecentPostTitles.php
index 5ae61d3923..c615a26b7d 100644
--- a/tests/xmlrpc/mt/getRecentPostTitles.php
+++ b/tests/xmlrpc/mt/getRecentPostTitles.php
@@ -8,7 +8,7 @@ class Tests_XMLRPC_mt_getRecentPostTitles extends WP_XMLRPC_UnitTestCase {
 	function test_invalid_username_password() {
 		$result = $this->myxmlrpcserver->mt_getRecentPostTitles( array( 1, 'username', 'password' ) );
 		$this->assertIXRError( $result );
-		$this->assertEquals( 403, $result->code );
+		$this->assertSame( 403, $result->code );
 	}
 
 	function test_no_posts() {
@@ -16,7 +16,7 @@ class Tests_XMLRPC_mt_getRecentPostTitles extends WP_XMLRPC_UnitTestCase {
 
 		$result = $this->myxmlrpcserver->mt_getRecentPostTitles( array( 1, 'author', 'author' ) );
 		$this->assertIXRError( $result );
-		$this->assertEquals( 500, $result->code );
+		$this->assertSame( 500, $result->code );
 	}
 
 	function test_no_editable_posts() {
@@ -26,7 +26,7 @@ class Tests_XMLRPC_mt_getRecentPostTitles extends WP_XMLRPC_UnitTestCase {
 
 		$result = $this->myxmlrpcserver->mt_getRecentPostTitles( array( 1, 'author', 'author' ) );
 		$this->assertNotIXRError( $result );
-		$this->assertEquals( 0, count( $result ) );
+		$this->assertSame( 0, count( $result ) );
 	}
 
 	function test_date() {
@@ -44,8 +44,8 @@ class Tests_XMLRPC_mt_getRecentPostTitles extends WP_XMLRPC_UnitTestCase {
 			$this->assertInstanceOf( 'IXR_Date', $result['dateCreated'] );
 			$this->assertInstanceOf( 'IXR_Date', $result['date_created_gmt'] );
 
-			$this->assertEquals( strtotime( $post->post_date ), $result['dateCreated']->getTimestamp() );
-			$this->assertEquals( $date_gmt, $result['date_created_gmt']->getTimestamp() );
+			$this->assertSame( strtotime( $post->post_date ), $result['dateCreated']->getTimestamp() );
+			$this->assertSame( $date_gmt, $result['date_created_gmt']->getTimestamp() );
 		}
 	}
 }
diff --git a/tests/xmlrpc/mw/editPost.php b/tests/xmlrpc/mw/editPost.php
index 77653cfa86..271ad36f56 100644
--- a/tests/xmlrpc/mw/editPost.php
+++ b/tests/xmlrpc/mw/editPost.php
@@ -9,7 +9,7 @@ class Tests_XMLRPC_mw_editPost extends WP_XMLRPC_UnitTestCase {
 		$post   = array();
 		$result = $this->myxmlrpcserver->mw_editPost( array( 1, 'username', 'password', $post ) );
 		$this->assertIXRError( $result );
-		$this->assertEquals( 403, $result->code );
+		$this->assertSame( 403, $result->code );
 	}
 
 	function test_edit_own_post() {
@@ -27,7 +27,7 @@ class Tests_XMLRPC_mw_editPost extends WP_XMLRPC_UnitTestCase {
 		$this->assertTrue( $result );
 
 		$out = get_post( $post_id );
-		$this->assertEquals( $new_title, $out->post_title );
+		$this->assertSame( $new_title, $out->post_title );
 	}
 
 	function test_capable_edit_others_post() {
@@ -47,7 +47,7 @@ class Tests_XMLRPC_mw_editPost extends WP_XMLRPC_UnitTestCase {
 		$this->assertTrue( $result );
 
 		$out = get_post( $post_id );
-		$this->assertEquals( $new_title, $out->post_title );
+		$this->assertSame( $new_title, $out->post_title );
 	}
 
 	function test_incapable_edit_others_post() {
@@ -65,10 +65,10 @@ class Tests_XMLRPC_mw_editPost extends WP_XMLRPC_UnitTestCase {
 		$post2     = array( 'title' => $new_title );
 		$result    = $this->myxmlrpcserver->mw_editPost( array( $post_id, 'contributor', 'contributor', $post2 ) );
 		$this->assertIXRError( $result );
-		$this->assertEquals( 401, $result->code );
+		$this->assertSame( 401, $result->code );
 
 		$out = get_post( $post_id );
-		$this->assertEquals( $original_title, $out->post_title );
+		$this->assertSame( $original_title, $out->post_title );
 	}
 
 	function test_capable_reassign_author() {
@@ -104,7 +104,7 @@ class Tests_XMLRPC_mw_editPost extends WP_XMLRPC_UnitTestCase {
 		$post2  = array( 'wp_author_id' => $author_id );
 		$result = $this->myxmlrpcserver->mw_editPost( array( $post_id, 'contributor', 'contributor', $post2 ) );
 		$this->assertIXRError( $result );
-		$this->assertEquals( 401, $result->code );
+		$this->assertSame( 401, $result->code );
 
 		$out = get_post( $post_id );
 		$this->assertEquals( $contributor_id, $out->post_author );
@@ -143,38 +143,38 @@ class Tests_XMLRPC_mw_editPost extends WP_XMLRPC_UnitTestCase {
 		);
 		$post_id = wp_insert_post( $post );
 
-		$this->assertEquals( '', get_post_meta( $post_id, '_thumbnail_id', true ) );
+		$this->assertSame( '', get_post_meta( $post_id, '_thumbnail_id', true ) );
 
-		// create attachment
+		// Create attachment.
 		$filename      = ( DIR_TESTDATA . '/images/a2-small.jpg' );
 		$attachment_id = self::factory()->attachment->create_upload_object( $filename, $post_id );
 
-		// add post thumbnail to post that does not have one
+		// Add post thumbnail to post that does not have one.
 		$post2  = array( 'wp_post_thumbnail' => $attachment_id );
 		$result = $this->myxmlrpcserver->mw_editPost( array( $post_id, 'author', 'author', $post2 ) );
 		$this->assertNotIXRError( $result );
 		$this->assertEquals( $attachment_id, get_post_meta( $post_id, '_thumbnail_id', true ) );
 
-		// edit the post without supplying a post_thumbnail and check that it didn't change
+		// Edit the post without supplying a post_thumbnail and check that it didn't change.
 		$post3  = array( 'post_content' => 'Updated post' );
 		$result = $this->myxmlrpcserver->mw_editPost( array( $post_id, 'author', 'author', $post3 ) );
 		$this->assertNotIXRError( $result );
 		$this->assertEquals( $attachment_id, get_post_meta( $post_id, '_thumbnail_id', true ) );
 
-		// create another attachment
+		// Create another attachment.
 		$attachment2_id = self::factory()->attachment->create_upload_object( $filename, $post_id );
 
-		// change the post's post_thumbnail
+		// Change the post's post_thumbnail.
 		$post4  = array( 'wp_post_thumbnail' => $attachment2_id );
 		$result = $this->myxmlrpcserver->mw_editPost( array( $post_id, 'author', 'author', $post4 ) );
 		$this->assertNotIXRError( $result );
 		$this->assertEquals( $attachment2_id, get_post_meta( $post_id, '_thumbnail_id', true ) );
 
-		// unset the post's post_thumbnail
+		// Unset the post's post_thumbnail.
 		$post5  = array( 'wp_post_thumbnail' => '' );
 		$result = $this->myxmlrpcserver->mw_editPost( array( $post_id, 'author', 'author', $post5 ) );
 		$this->assertNotIXRError( $result );
-		$this->assertEquals( '', get_post_meta( $post_id, '_thumbnail_id', true ) );
+		$this->assertSame( '', get_post_meta( $post_id, '_thumbnail_id', true ) );
 
 		remove_theme_support( 'post-thumbnails' );
 	}
@@ -199,7 +199,7 @@ class Tests_XMLRPC_mw_editPost extends WP_XMLRPC_UnitTestCase {
 		$this->assertTrue( $result );
 
 		$out = get_post( $post_id );
-		$this->assertEquals( $post2['title'], $out->post_title );
+		$this->assertSame( $post2['title'], $out->post_title );
 
 		$post3  = array(
 			'description' => 'New Content',
@@ -210,8 +210,8 @@ class Tests_XMLRPC_mw_editPost extends WP_XMLRPC_UnitTestCase {
 		$this->assertTrue( $result );
 
 		$out = get_post( $post_id );
-		$this->assertEquals( $post2['title'], $out->post_title );
-		$this->assertEquals( $post3['description'], $out->post_content );
+		$this->assertSame( $post2['title'], $out->post_title );
+		$this->assertSame( $post3['description'], $out->post_content );
 
 		$post4  = array(
 			'mt_excerpt'  => 'New Excerpt',
@@ -222,9 +222,9 @@ class Tests_XMLRPC_mw_editPost extends WP_XMLRPC_UnitTestCase {
 		$this->assertTrue( $result );
 
 		$out = get_post( $post_id );
-		$this->assertEquals( $post2['title'], $out->post_title );
-		$this->assertEquals( $post3['description'], $out->post_content );
-		$this->assertEquals( $post4['mt_excerpt'], $out->post_excerpt );
+		$this->assertSame( $post2['title'], $out->post_title );
+		$this->assertSame( $post3['description'], $out->post_content );
+		$this->assertSame( $post4['mt_excerpt'], $out->post_excerpt );
 	}
 
 	/**
@@ -246,7 +246,7 @@ class Tests_XMLRPC_mw_editPost extends WP_XMLRPC_UnitTestCase {
 		$this->assertTrue( $result );
 	}
 
-	// Not allowed since [19914]
+	// Not allowed since [19914].
 	function test_change_post_type() {
 		$contributor_id = $this->make_user_by_role( 'contributor' );
 
@@ -259,7 +259,7 @@ class Tests_XMLRPC_mw_editPost extends WP_XMLRPC_UnitTestCase {
 		$post2  = array( 'post_type' => 'page' );
 		$result = $this->myxmlrpcserver->mw_editPost( array( $post_id, 'contributor', 'contributor', $post2 ) );
 		$this->assertIXRError( $result );
-		$this->assertEquals( $result->code, 401 );
+		$this->assertSame( $result->code, 401 );
 	}
 
 	/**
@@ -327,9 +327,9 @@ class Tests_XMLRPC_mw_editPost extends WP_XMLRPC_UnitTestCase {
 		);
 
 		$after = get_post( $post_id );
-		$this->assertEquals( 'future', $after->post_status );
+		$this->assertSame( 'future', $after->post_status );
 
 		$future_date_string = strftime( '%Y-%m-%d %H:%M:%S', $future_time );
-		$this->assertEquals( $future_date_string, $after->post_date );
+		$this->assertSame( $future_date_string, $after->post_date );
 	}
 }
diff --git a/tests/xmlrpc/mw/getPost.php b/tests/xmlrpc/mw/getPost.php
index d9389c1892..4522b7d943 100644
--- a/tests/xmlrpc/mw/getPost.php
+++ b/tests/xmlrpc/mw/getPost.php
@@ -24,7 +24,7 @@ class Tests_XMLRPC_mw_getPost extends WP_XMLRPC_UnitTestCase {
 	function test_invalid_username_password() {
 		$result = $this->myxmlrpcserver->mw_getPost( array( self::$post_id, 'username', 'password' ) );
 		$this->assertIXRError( $result );
-		$this->assertEquals( 403, $result->code );
+		$this->assertSame( 403, $result->code );
 	}
 
 	function test_incapable_user() {
@@ -32,7 +32,7 @@ class Tests_XMLRPC_mw_getPost extends WP_XMLRPC_UnitTestCase {
 
 		$result = $this->myxmlrpcserver->mw_getPost( array( self::$post_id, 'subscriber', 'subscriber' ) );
 		$this->assertIXRError( $result );
-		$this->assertEquals( 401, $result->code );
+		$this->assertSame( 401, $result->code );
 	}
 
 	/**
@@ -41,7 +41,7 @@ class Tests_XMLRPC_mw_getPost extends WP_XMLRPC_UnitTestCase {
 	function test_invalid_postid() {
 		$result = $this->myxmlrpcserver->mw_getPost( array( 9999, 'author', 'author' ) );
 		$this->assertIXRError( $result );
-		$this->assertEquals( 404, $result->code );
+		$this->assertSame( 404, $result->code );
 	}
 
 	function test_valid_post() {
@@ -51,7 +51,7 @@ class Tests_XMLRPC_mw_getPost extends WP_XMLRPC_UnitTestCase {
 		$result = $this->myxmlrpcserver->mw_getPost( array( self::$post_id, 'author', 'author' ) );
 		$this->assertNotIXRError( $result );
 
-		// Check data types
+		// Check data types.
 		$this->assertInternalType( 'string', $result['userid'] );
 		$this->assertInternalType( 'int', $result['postid'] );
 		$this->assertInternalType( 'string', $result['description'] );
@@ -76,15 +76,15 @@ class Tests_XMLRPC_mw_getPost extends WP_XMLRPC_UnitTestCase {
 
 		$post_data = get_post( self::$post_id );
 
-		// Check expected values
+		// Check expected values.
 		$this->assertStringMatchesFormat( '%d', $result['userid'] );
-		$this->assertEquals( $post_data->post_title, $result['title'] );
-		$this->assertEquals( 'publish', $result['post_status'] );
+		$this->assertSame( $post_data->post_title, $result['title'] );
+		$this->assertSame( 'publish', $result['post_status'] );
 		$this->assertStringMatchesFormat( '%d', $result['wp_author_id'] );
-		$this->assertEquals( $post_data->post_excerpt, $result['mt_excerpt'] );
-		$this->assertEquals( url_to_postid( $result['link'] ), self::$post_id );
+		$this->assertSame( $post_data->post_excerpt, $result['mt_excerpt'] );
+		$this->assertSame( url_to_postid( $result['link'] ), self::$post_id );
 
-		$this->assertEquals( '', $result['wp_post_thumbnail'] );
+		$this->assertSame( 0, $result['wp_post_thumbnail'] );
 
 		remove_theme_support( 'post-thumbnails' );
 	}
@@ -92,7 +92,7 @@ class Tests_XMLRPC_mw_getPost extends WP_XMLRPC_UnitTestCase {
 	function test_post_thumbnail() {
 		add_theme_support( 'post-thumbnails' );
 
-		// create attachment
+		// Create attachment.
 		$filename      = ( DIR_TESTDATA . '/images/a2-small.jpg' );
 		$attachment_id = self::factory()->attachment->create_upload_object( $filename );
 
@@ -102,9 +102,8 @@ class Tests_XMLRPC_mw_getPost extends WP_XMLRPC_UnitTestCase {
 		$result = $this->myxmlrpcserver->mw_getPost( array( self::$post_id, 'author', 'author' ) );
 		$this->assertNotIXRError( $result );
 
-		$this->assertInternalType( 'string', $result['wp_post_thumbnail'] );
-		$this->assertStringMatchesFormat( '%d', $result['wp_post_thumbnail'] );
-		$this->assertEquals( $attachment_id, $result['wp_post_thumbnail'] );
+		$this->assertInternalType( 'int', $result['wp_post_thumbnail'] );
+		$this->assertSame( $attachment_id, $result['wp_post_thumbnail'] );
 
 		remove_theme_support( 'post-thumbnails' );
 	}
@@ -121,13 +120,13 @@ class Tests_XMLRPC_mw_getPost extends WP_XMLRPC_UnitTestCase {
 
 		$post_data = get_post( self::$post_id );
 
-		$this->assertEquals( strtotime( $post_data->post_date ), $result['dateCreated']->getTimestamp() );
-		$this->assertEquals( strtotime( $post_data->post_date ), $result['date_modified']->getTimestamp() );
+		$this->assertSame( strtotime( $post_data->post_date ), $result['dateCreated']->getTimestamp() );
+		$this->assertSame( strtotime( $post_data->post_date ), $result['date_modified']->getTimestamp() );
 
 		$post_date_gmt     = strtotime( get_gmt_from_date( mysql2date( 'Y-m-d H:i:s', $post_data->post_date, false ), 'Ymd\TH:i:s' ) );
 		$post_modified_gmt = strtotime( get_gmt_from_date( mysql2date( 'Y-m-d H:i:s', $post_data->post_date, false ), 'Ymd\TH:i:s' ) );
 
-		$this->assertEquals( $post_date_gmt, $result['date_created_gmt']->getTimestamp() );
-		$this->assertEquals( $post_modified_gmt, $result['date_modified_gmt']->getTimestamp() );
+		$this->assertSame( $post_date_gmt, $result['date_created_gmt']->getTimestamp() );
+		$this->assertSame( $post_modified_gmt, $result['date_modified_gmt']->getTimestamp() );
 	}
 }
diff --git a/tests/xmlrpc/mw/getRecentPosts.php b/tests/xmlrpc/mw/getRecentPosts.php
index a976ffafa2..e7338a569c 100644
--- a/tests/xmlrpc/mw/getRecentPosts.php
+++ b/tests/xmlrpc/mw/getRecentPosts.php
@@ -25,7 +25,7 @@ class Tests_XMLRPC_mw_getRecentPosts extends WP_XMLRPC_UnitTestCase {
 	function test_invalid_username_password() {
 		$result = $this->myxmlrpcserver->mw_getRecentPosts( array( 1, 'username', 'password' ) );
 		$this->assertIXRError( $result );
-		$this->assertEquals( 403, $result->code );
+		$this->assertSame( 403, $result->code );
 	}
 
 	/**
@@ -36,7 +36,7 @@ class Tests_XMLRPC_mw_getRecentPosts extends WP_XMLRPC_UnitTestCase {
 
 		$result = $this->myxmlrpcserver->mw_getRecentPosts( array( 1, 'subscriber', 'subscriber' ) );
 		$this->assertIXRError( $result );
-		$this->assertEquals( 401, $result->code );
+		$this->assertSame( 401, $result->code );
 	}
 
 	function test_no_editable_posts() {
@@ -44,7 +44,7 @@ class Tests_XMLRPC_mw_getRecentPosts extends WP_XMLRPC_UnitTestCase {
 
 		$result = $this->myxmlrpcserver->mw_getRecentPosts( array( 1, 'author', 'author' ) );
 		$this->assertNotIXRError( $result );
-		$this->assertEquals( 0, count( $result ) );
+		$this->assertSame( 0, count( $result ) );
 	}
 
 	function test_valid_post() {
@@ -57,7 +57,7 @@ class Tests_XMLRPC_mw_getRecentPosts extends WP_XMLRPC_UnitTestCase {
 		foreach ( $results as $result ) {
 			$post = get_post( $result['postid'] );
 
-			// Check data types
+			// Check data types.
 			$this->assertInternalType( 'string', $result['userid'] );
 			$this->assertInternalType( 'string', $result['postid'] );
 			$this->assertInternalType( 'string', $result['description'] );
@@ -79,16 +79,16 @@ class Tests_XMLRPC_mw_getRecentPosts extends WP_XMLRPC_UnitTestCase {
 			$this->assertInternalType( 'array', $result['custom_fields'] );
 			$this->assertInternalType( 'string', $result['wp_post_format'] );
 
-			// Check expected values
+			// Check expected values.
 			$this->assertStringMatchesFormat( '%d', $result['userid'] );
 			$this->assertStringMatchesFormat( '%d', $result['postid'] );
-			$this->assertEquals( $post->post_title, $result['title'] );
-			$this->assertEquals( 'draft', $result['post_status'] );
+			$this->assertSame( $post->post_title, $result['title'] );
+			$this->assertSame( 'draft', $result['post_status'] );
 			$this->assertStringMatchesFormat( '%d', $result['wp_author_id'] );
-			$this->assertEquals( $post->post_excerpt, $result['mt_excerpt'] );
-			$this->assertEquals( url_to_postid( $result['link'] ), $post->ID );
+			$this->assertSame( $post->post_excerpt, $result['mt_excerpt'] );
+			$this->assertSame( url_to_postid( $result['link'] ), $post->ID );
 
-			$this->assertEquals( '', $result['wp_post_thumbnail'] );
+			$this->assertSame( '', $result['wp_post_thumbnail'] );
 		}
 
 		remove_theme_support( 'post-thumbnails' );
@@ -97,7 +97,7 @@ class Tests_XMLRPC_mw_getRecentPosts extends WP_XMLRPC_UnitTestCase {
 	function test_post_thumbnail() {
 		add_theme_support( 'post-thumbnails' );
 
-		// create attachment
+		// Create attachment.
 		$filename      = ( DIR_TESTDATA . '/images/a2-small.jpg' );
 		$attachment_id = self::factory()->attachment->create_upload_object( $filename, self::$post_id );
 		set_post_thumbnail( self::$post_id, $attachment_id );
@@ -112,7 +112,7 @@ class Tests_XMLRPC_mw_getRecentPosts extends WP_XMLRPC_UnitTestCase {
 			if ( ! empty( $result['wp_post_thumbnail'] ) || $result['postid'] === self::$post_id ) {
 				$attachment_id = get_post_meta( $result['postid'], '_thumbnail_id', true );
 
-				$this->assertEquals( $attachment_id, $result['wp_post_thumbnail'] );
+				$this->assertSame( $attachment_id, $result['wp_post_thumbnail'] );
 			}
 		}
 
@@ -135,10 +135,10 @@ class Tests_XMLRPC_mw_getRecentPosts extends WP_XMLRPC_UnitTestCase {
 			$this->assertInstanceOf( 'IXR_Date', $result['date_modified'] );
 			$this->assertInstanceOf( 'IXR_Date', $result['date_modified_gmt'] );
 
-			$this->assertEquals( strtotime( $post->post_date ), $result['dateCreated']->getTimestamp() );
-			$this->assertEquals( $date_gmt, $result['date_created_gmt']->getTimestamp() );
-			$this->assertEquals( strtotime( $post->post_date ), $result['date_modified']->getTimestamp() );
-			$this->assertEquals( $date_modified_gmt, $result['date_modified_gmt']->getTimestamp() );
+			$this->assertSame( strtotime( $post->post_date ), $result['dateCreated']->getTimestamp() );
+			$this->assertSame( $date_gmt, $result['date_created_gmt']->getTimestamp() );
+			$this->assertSame( strtotime( $post->post_date ), $result['date_modified']->getTimestamp() );
+			$this->assertSame( $date_modified_gmt, $result['date_modified_gmt']->getTimestamp() );
 		}
 	}
 }
diff --git a/tests/xmlrpc/mw/newPost.php b/tests/xmlrpc/mw/newPost.php
index 7e29020a07..456acbd31e 100644
--- a/tests/xmlrpc/mw/newPost.php
+++ b/tests/xmlrpc/mw/newPost.php
@@ -9,7 +9,7 @@ class Tests_XMLRPC_mw_newPost extends WP_XMLRPC_UnitTestCase {
 		$post   = array();
 		$result = $this->myxmlrpcserver->mw_newPost( array( 1, 'username', 'password', $post ) );
 		$this->assertIXRError( $result );
-		$this->assertEquals( 403, $result->code );
+		$this->assertSame( 403, $result->code );
 	}
 
 	function test_incapable_user() {
@@ -18,7 +18,7 @@ class Tests_XMLRPC_mw_newPost extends WP_XMLRPC_UnitTestCase {
 		$post   = array();
 		$result = $this->myxmlrpcserver->mw_newPost( array( 1, 'subscriber', 'subscriber', $post ) );
 		$this->assertIXRError( $result );
-		$this->assertEquals( 401, $result->code );
+		$this->assertSame( 401, $result->code );
 	}
 
 	function test_no_content() {
@@ -27,8 +27,8 @@ class Tests_XMLRPC_mw_newPost extends WP_XMLRPC_UnitTestCase {
 		$post   = array();
 		$result = $this->myxmlrpcserver->mw_newPost( array( 1, 'author', 'author', $post ) );
 		$this->assertIXRError( $result );
-		$this->assertEquals( 500, $result->code );
-		$this->assertEquals( 'Content, title, and excerpt are empty.', $result->message );
+		$this->assertSame( 500, $result->code );
+		$this->assertSame( 'Content, title, and excerpt are empty.', $result->message );
 	}
 
 	function test_basic_content() {
@@ -72,7 +72,7 @@ class Tests_XMLRPC_mw_newPost extends WP_XMLRPC_UnitTestCase {
 		);
 		$result = $this->myxmlrpcserver->mw_newPost( array( 1, 'contributor', 'contributor', $post ) );
 		$this->assertIXRError( $result );
-		$this->assertEquals( 401, $result->code );
+		$this->assertSame( 401, $result->code );
 	}
 
 	function test_capable_other_author() {
@@ -97,7 +97,7 @@ class Tests_XMLRPC_mw_newPost extends WP_XMLRPC_UnitTestCase {
 		);
 		$result = $this->myxmlrpcserver->mw_newPost( array( 1, 'contributor', 'contributor', $post ) );
 		$this->assertIXRError( $result );
-		$this->assertEquals( 401, $result->code );
+		$this->assertSame( 401, $result->code );
 	}
 
 	/**
@@ -112,7 +112,7 @@ class Tests_XMLRPC_mw_newPost extends WP_XMLRPC_UnitTestCase {
 		);
 		$result = $this->myxmlrpcserver->mw_newPost( array( 1, 'editor', 'editor', $post ) );
 		$this->assertIXRError( $result );
-		$this->assertEquals( 404, $result->code );
+		$this->assertSame( 404, $result->code );
 	}
 
 	function test_empty_author() {
@@ -125,7 +125,7 @@ class Tests_XMLRPC_mw_newPost extends WP_XMLRPC_UnitTestCase {
 
 		$out = get_post( $result );
 		$this->assertEquals( $my_author_id, $out->post_author );
-		$this->assertEquals( 'Test', $out->post_title );
+		$this->assertSame( 'Test', $out->post_title );
 	}
 
 	function test_post_thumbnail() {
@@ -133,7 +133,7 @@ class Tests_XMLRPC_mw_newPost extends WP_XMLRPC_UnitTestCase {
 
 		$this->make_user_by_role( 'author' );
 
-		// create attachment
+		// Create attachment.
 		$filename      = ( DIR_TESTDATA . '/images/a2-small.jpg' );
 		$attachment_id = self::factory()->attachment->create_upload_object( $filename );
 
@@ -157,7 +157,7 @@ class Tests_XMLRPC_mw_newPost extends WP_XMLRPC_UnitTestCase {
 		);
 		$result = $this->myxmlrpcserver->mw_newPost( array( 1, 'author', 'author', $post ) );
 		$this->assertIXRError( $result );
-		$this->assertEquals( 401, $result->code );
+		$this->assertSame( 401, $result->code );
 	}
 
 	function test_capable_set_post_type_as_page() {
@@ -172,8 +172,8 @@ class Tests_XMLRPC_mw_newPost extends WP_XMLRPC_UnitTestCase {
 		$this->assertStringMatchesFormat( '%d', $result );
 
 		$out = get_post( $result );
-		$this->assertEquals( 'Test', $out->post_title );
-		$this->assertEquals( 'page', $out->post_type );
+		$this->assertSame( 'Test', $out->post_title );
+		$this->assertSame( 'page', $out->post_type );
 	}
 
 
@@ -193,8 +193,8 @@ class Tests_XMLRPC_mw_newPost extends WP_XMLRPC_UnitTestCase {
 		$this->assertStringMatchesFormat( '%d', $result );
 
 		$out = get_post( $result );
-		$this->assertEquals( 'post', $out->post_type );
-		$this->assertEquals( 'draft', $out->post_status );
-		$this->assertEquals( '0000-00-00 00:00:00', $out->post_date_gmt );
+		$this->assertSame( 'post', $out->post_type );
+		$this->assertSame( 'draft', $out->post_status );
+		$this->assertSame( '0000-00-00 00:00:00', $out->post_date_gmt );
 	}
 }
diff --git a/tests/xmlrpc/wp/deletePost.php b/tests/xmlrpc/wp/deletePost.php
index 96c0c89cf4..85c6472e52 100644
--- a/tests/xmlrpc/wp/deletePost.php
+++ b/tests/xmlrpc/wp/deletePost.php
@@ -8,7 +8,7 @@ class Tests_XMLRPC_wp_deletePost extends WP_XMLRPC_UnitTestCase {
 	function test_invalid_username_password() {
 		$result = $this->myxmlrpcserver->wp_deletePost( array( 1, 'username', 'password', 0 ) );
 		$this->assertIXRError( $result );
-		$this->assertEquals( 403, $result->code );
+		$this->assertSame( 403, $result->code );
 	}
 
 	function test_invalid_post() {
@@ -16,7 +16,7 @@ class Tests_XMLRPC_wp_deletePost extends WP_XMLRPC_UnitTestCase {
 
 		$result = $this->myxmlrpcserver->wp_deletePost( array( 1, 'editor', 'editor', 340982340 ) );
 		$this->assertIXRError( $result );
-		$this->assertEquals( 404, $result->code );
+		$this->assertSame( 404, $result->code );
 	}
 
 	function test_incapable_user() {
@@ -25,7 +25,7 @@ class Tests_XMLRPC_wp_deletePost extends WP_XMLRPC_UnitTestCase {
 
 		$result = $this->myxmlrpcserver->wp_deletePost( array( 1, 'subscriber', 'subscriber', $post_id ) );
 		$this->assertIXRError( $result );
-		$this->assertEquals( 401, $result->code );
+		$this->assertSame( 401, $result->code );
 	}
 
 	function test_post_deleted() {
@@ -37,6 +37,6 @@ class Tests_XMLRPC_wp_deletePost extends WP_XMLRPC_UnitTestCase {
 		$this->assertTrue( $result );
 
 		$post = get_post( $post_id );
-		$this->assertEquals( 'trash', $post->post_status );
+		$this->assertSame( 'trash', $post->post_status );
 	}
 }
diff --git a/tests/xmlrpc/wp/deleteTerm.php b/tests/xmlrpc/wp/deleteTerm.php
index 40601246c2..086bc4ad25 100644
--- a/tests/xmlrpc/wp/deleteTerm.php
+++ b/tests/xmlrpc/wp/deleteTerm.php
@@ -17,7 +17,7 @@ class Tests_XMLRPC_wp_deleteTerm extends WP_XMLRPC_UnitTestCase {
 	function test_invalid_username_password() {
 		$result = $this->myxmlrpcserver->wp_deleteTerm( array( 1, 'username', 'password', 'category', 0 ) );
 		$this->assertIXRError( $result );
-		$this->assertEquals( 403, $result->code );
+		$this->assertSame( 403, $result->code );
 	}
 
 	function test_empty_taxonomy() {
@@ -25,8 +25,8 @@ class Tests_XMLRPC_wp_deleteTerm extends WP_XMLRPC_UnitTestCase {
 
 		$result = $this->myxmlrpcserver->wp_deleteTerm( array( 1, 'subscriber', 'subscriber', '', 0 ) );
 		$this->assertIXRError( $result );
-		$this->assertEquals( 403, $result->code );
-		$this->assertEquals( __( 'Invalid taxonomy.' ), $result->message );
+		$this->assertSame( 403, $result->code );
+		$this->assertSame( __( 'Invalid taxonomy.' ), $result->message );
 	}
 
 	function test_invalid_taxonomy() {
@@ -34,8 +34,8 @@ class Tests_XMLRPC_wp_deleteTerm extends WP_XMLRPC_UnitTestCase {
 
 		$result = $this->myxmlrpcserver->wp_deleteTerm( array( 1, 'subscriber', 'subscriber', 'not_existing', 0 ) );
 		$this->assertIXRError( $result );
-		$this->assertEquals( 403, $result->code );
-		$this->assertEquals( __( 'Invalid taxonomy.' ), $result->message );
+		$this->assertSame( 403, $result->code );
+		$this->assertSame( __( 'Invalid taxonomy.' ), $result->message );
 	}
 
 	function test_incapable_user() {
@@ -43,8 +43,8 @@ class Tests_XMLRPC_wp_deleteTerm extends WP_XMLRPC_UnitTestCase {
 
 		$result = $this->myxmlrpcserver->wp_deleteTerm( array( 1, 'subscriber', 'subscriber', 'category', self::$term_id ) );
 		$this->assertIXRError( $result );
-		$this->assertEquals( 401, $result->code );
-		$this->assertEquals( __( 'Sorry, you are not allowed to delete this term.' ), $result->message );
+		$this->assertSame( 401, $result->code );
+		$this->assertSame( __( 'Sorry, you are not allowed to delete this term.' ), $result->message );
 	}
 
 	function test_empty_term() {
@@ -52,8 +52,8 @@ class Tests_XMLRPC_wp_deleteTerm extends WP_XMLRPC_UnitTestCase {
 
 		$result = $this->myxmlrpcserver->wp_deleteTerm( array( 1, 'editor', 'editor', 'category', '' ) );
 		$this->assertIXRError( $result );
-		$this->assertEquals( 500, $result->code );
-		$this->assertEquals( __( 'Empty Term.' ), $result->message );
+		$this->assertSame( 500, $result->code );
+		$this->assertSame( __( 'Empty Term.' ), $result->message );
 	}
 
 	function test_invalid_term() {
@@ -61,8 +61,8 @@ class Tests_XMLRPC_wp_deleteTerm extends WP_XMLRPC_UnitTestCase {
 
 		$result = $this->myxmlrpcserver->wp_deleteTerm( array( 1, 'editor', 'editor', 'category', 9999 ) );
 		$this->assertIXRError( $result );
-		$this->assertEquals( 404, $result->code );
-		$this->assertEquals( __( 'Invalid term ID.' ), $result->message );
+		$this->assertSame( 404, $result->code );
+		$this->assertSame( __( 'Invalid term ID.' ), $result->message );
 	}
 
 	function test_term_deleted() {
diff --git a/tests/xmlrpc/wp/editComment.php b/tests/xmlrpc/wp/editComment.php
index b4fd559543..9a4acf7522 100644
--- a/tests/xmlrpc/wp/editComment.php
+++ b/tests/xmlrpc/wp/editComment.php
@@ -59,8 +59,8 @@ class Tests_XMLRPC_wp_editComment extends WP_XMLRPC_UnitTestCase {
 
 		$result = $this->myxmlrpcserver->wp_editComment( array( 1, 'author', 'author', $comment_id, array( 'status' => 'hold' ) ) );
 		$this->assertIXRError( $result );
-		$this->assertEquals( 403, $result->code );
-		$this->assertEquals( __( 'Sorry, you are not allowed to moderate or edit this comment.' ), $result->message );
+		$this->assertSame( 403, $result->code );
+		$this->assertSame( __( 'Sorry, you are not allowed to moderate or edit this comment.' ), $result->message );
 	}
 
 	function test_trash_comment() {
@@ -77,7 +77,7 @@ class Tests_XMLRPC_wp_editComment extends WP_XMLRPC_UnitTestCase {
 		);
 		$comment_id   = wp_insert_comment( $comment_data );
 
-		$this->assertEquals( '1', get_comment( $comment_id )->comment_approved );
+		$this->assertSame( '1', get_comment( $comment_id )->comment_approved );
 
 		$this->myxmlrpcserver->wp_editComment(
 			array(
@@ -91,6 +91,6 @@ class Tests_XMLRPC_wp_editComment extends WP_XMLRPC_UnitTestCase {
 			)
 		);
 
-		$this->assertEquals( 'trash', get_comment( $comment_id )->comment_approved );
+		$this->assertSame( 'trash', get_comment( $comment_id )->comment_approved );
 	}
 }
diff --git a/tests/xmlrpc/wp/editPost.php b/tests/xmlrpc/wp/editPost.php
index fc822a251c..84ca2788c7 100644
--- a/tests/xmlrpc/wp/editPost.php
+++ b/tests/xmlrpc/wp/editPost.php
@@ -8,7 +8,7 @@ class Tests_XMLRPC_wp_editPost extends WP_XMLRPC_UnitTestCase {
 	function test_invalid_username_password() {
 		$result = $this->myxmlrpcserver->wp_editPost( array( 1, 'username', 'password', 0, array() ) );
 		$this->assertIXRError( $result );
-		$this->assertEquals( 403, $result->code );
+		$this->assertSame( 403, $result->code );
 	}
 
 	function test_edit_own_post() {
@@ -27,7 +27,7 @@ class Tests_XMLRPC_wp_editPost extends WP_XMLRPC_UnitTestCase {
 		$this->assertTrue( $result );
 
 		$out = get_post( $post_id );
-		$this->assertEquals( $new_title, $out->post_title );
+		$this->assertSame( $new_title, $out->post_title );
 	}
 
 	function test_capable_edit_others_post() {
@@ -47,7 +47,7 @@ class Tests_XMLRPC_wp_editPost extends WP_XMLRPC_UnitTestCase {
 		$this->assertTrue( $result );
 
 		$out = get_post( $post_id );
-		$this->assertEquals( $new_title, $out->post_title );
+		$this->assertSame( $new_title, $out->post_title );
 	}
 
 	function test_incapable_edit_others_post() {
@@ -65,10 +65,10 @@ class Tests_XMLRPC_wp_editPost extends WP_XMLRPC_UnitTestCase {
 		$post2     = array( 'post_title' => $new_title );
 		$result    = $this->myxmlrpcserver->wp_editPost( array( 1, 'contributor', 'contributor', $post_id, $post2 ) );
 		$this->assertIXRError( $result );
-		$this->assertEquals( 401, $result->code );
+		$this->assertSame( 401, $result->code );
 
 		$out = get_post( $post_id );
-		$this->assertEquals( $original_title, $out->post_title );
+		$this->assertSame( $original_title, $out->post_title );
 	}
 
 	function test_capable_reassign_author() {
@@ -104,7 +104,7 @@ class Tests_XMLRPC_wp_editPost extends WP_XMLRPC_UnitTestCase {
 		$post2  = array( 'post_author' => $author_id );
 		$result = $this->myxmlrpcserver->wp_editPost( array( 1, 'contributor', 'contributor', $post_id, $post2 ) );
 		$this->assertIXRError( $result );
-		$this->assertEquals( 401, $result->code );
+		$this->assertSame( 401, $result->code );
 
 		$out = get_post( $post_id );
 		$this->assertEquals( $contributor_id, $out->post_author );
@@ -143,51 +143,51 @@ class Tests_XMLRPC_wp_editPost extends WP_XMLRPC_UnitTestCase {
 		);
 		$post_id = wp_insert_post( $post );
 
-		$this->assertEquals( '', get_post_meta( $post_id, '_thumbnail_id', true ) );
+		$this->assertSame( '', get_post_meta( $post_id, '_thumbnail_id', true ) );
 
-		// create attachment
+		// Create attachment.
 		$filename      = ( DIR_TESTDATA . '/images/a2-small.jpg' );
 		$attachment_id = self::factory()->attachment->create_upload_object( $filename, $post_id );
 
-		// add post thumbnail to post that does not have one
+		// Add post thumbnail to post that does not have one.
 		$post2  = array( 'post_thumbnail' => $attachment_id );
 		$result = $this->myxmlrpcserver->wp_editPost( array( 1, 'author', 'author', $post_id, $post2 ) );
 		$this->assertNotIXRError( $result );
 		$this->assertEquals( $attachment_id, get_post_meta( $post_id, '_thumbnail_id', true ) );
 
-		// fetch the post to verify that it appears
+		// Fetch the post to verify that it appears.
 		$result = $this->myxmlrpcserver->wp_getPost( array( 1, 'author', 'author', $post_id ) );
 		$this->assertNotIXRError( $result );
 		$this->assertArrayHasKey( 'post_thumbnail', $result );
 		$this->assertInternalType( 'array', $result['post_thumbnail'] );
 		$this->assertEquals( $attachment_id, $result['post_thumbnail']['attachment_id'] );
 
-		// edit the post without supplying a post_thumbnail and check that it didn't change
+		// Edit the post without supplying a post_thumbnail and check that it didn't change.
 		$post3  = array( 'post_content' => 'Updated post' );
 		$result = $this->myxmlrpcserver->wp_editPost( array( 1, 'author', 'author', $post_id, $post3 ) );
 		$this->assertNotIXRError( $result );
 		$this->assertEquals( $attachment_id, get_post_meta( $post_id, '_thumbnail_id', true ) );
 
-		// create another attachment
+		// Create another attachment.
 		$attachment2_id = self::factory()->attachment->create_upload_object( $filename, $post_id );
 
-		// change the post's post_thumbnail
+		// Change the post's post_thumbnail.
 		$post4  = array( 'post_thumbnail' => $attachment2_id );
 		$result = $this->myxmlrpcserver->wp_editPost( array( 1, 'author', 'author', $post_id, $post4 ) );
 		$this->assertNotIXRError( $result );
 		$this->assertEquals( $attachment2_id, get_post_meta( $post_id, '_thumbnail_id', true ) );
 
-		// unset the post's post_thumbnail
+		// Unset the post's post_thumbnail.
 		$post5  = array( 'post_thumbnail' => '' );
 		$result = $this->myxmlrpcserver->wp_editPost( array( 1, 'author', 'author', $post_id, $post5 ) );
 		$this->assertNotIXRError( $result );
-		$this->assertEquals( '', get_post_meta( $post_id, '_thumbnail_id', true ) );
+		$this->assertSame( '', get_post_meta( $post_id, '_thumbnail_id', true ) );
 
-		// use invalid ID
+		// Use invalid ID.
 		$post6  = array( 'post_thumbnail' => 398420983409 );
 		$result = $this->myxmlrpcserver->wp_editPost( array( 1, 'author', 'author', $post_id, $post6 ) );
 		$this->assertIXRError( $result );
-		$this->assertEquals( 404, $result->code );
+		$this->assertSame( 404, $result->code );
 
 		remove_theme_support( 'post-thumbnails' );
 	}
@@ -226,14 +226,14 @@ class Tests_XMLRPC_wp_editPost extends WP_XMLRPC_UnitTestCase {
 		$this->assertTrue( $result );
 
 		$out = get_post( $post_id );
-		$this->assertEquals( $new_title, $out->post_title );
+		$this->assertSame( $new_title, $out->post_title );
 
 		$edited_object = get_metadata_by_mid( 'post', $mid_edit );
-		$this->assertEquals( '87654321', $edited_object->meta_value );
+		$this->assertSame( '87654321', $edited_object->meta_value );
 		$this->assertFalse( get_metadata_by_mid( 'post', $mid_delete ) );
 
 		$created_object = get_post_meta( $post_id, 'custom_field_to_create', true );
-		$this->assertEquals( $created_object, '12345678' );
+		$this->assertSame( $created_object, '12345678' );
 	}
 
 	function test_capable_unsticky() {
@@ -249,7 +249,7 @@ class Tests_XMLRPC_wp_editPost extends WP_XMLRPC_UnitTestCase {
 	}
 
 	function test_password_transition_unsticky() {
-		// when transitioning to private status or adding a post password, post should be un-stuck
+		// When transitioning to private status or adding a post password, post should be un-stuck.
 		$editor_id = $this->make_user_by_role( 'editor' );
 		$post_id   = self::factory()->post->create( array( 'post_author' => $editor_id ) );
 		stick_post( $post_id );
@@ -287,7 +287,7 @@ class Tests_XMLRPC_wp_editPost extends WP_XMLRPC_UnitTestCase {
 		$this->assertNotIXRError( $result );
 
 		// Make sure the edit went through.
-		$this->assertEquals( 'First edit', get_post( $post_id )->post_content );
+		$this->assertSame( 'First edit', get_post( $post_id )->post_content );
 
 		// Modify it again. We think it was last modified yesterday, but we actually just modified it above.
 		$struct = array(
@@ -296,10 +296,10 @@ class Tests_XMLRPC_wp_editPost extends WP_XMLRPC_UnitTestCase {
 		);
 		$result = $this->myxmlrpcserver->wp_editPost( array( 1, 'editor', 'editor', $post_id, $struct ) );
 		$this->assertIXRError( $result );
-		$this->assertEquals( 409, $result->code );
+		$this->assertSame( 409, $result->code );
 
 		// Make sure the edit did not go through.
-		$this->assertEquals( 'First edit', get_post( $post_id )->post_content );
+		$this->assertSame( 'First edit', get_post( $post_id )->post_content );
 	}
 
 	function test_edit_attachment() {
@@ -319,8 +319,8 @@ class Tests_XMLRPC_wp_editPost extends WP_XMLRPC_UnitTestCase {
 		$result = $this->myxmlrpcserver->wp_editPost( array( 1, 'editor', 'editor', $post_id, $struct ) );
 		$this->assertNotIXRError( $result );
 
-		// Make sure that the post status is still inherit
-		$this->assertEquals( 'inherit', get_post( $post_id )->post_status );
+		// Make sure that the post status is still inherit.
+		$this->assertSame( 'inherit', get_post( $post_id )->post_status );
 	}
 
 	function test_use_invalid_post_status() {
@@ -338,8 +338,8 @@ class Tests_XMLRPC_wp_editPost extends WP_XMLRPC_UnitTestCase {
 		$result = $this->myxmlrpcserver->wp_editPost( array( 1, 'editor', 'editor', $post_id, $struct ) );
 		$this->assertNotIXRError( $result );
 
-		// Make sure that the post status is still inherit
-		$this->assertEquals( 'draft', get_post( $post_id )->post_status );
+		// Make sure that the post status is still inherit.
+		$this->assertSame( 'draft', get_post( $post_id )->post_status );
 	}
 
 	/**
@@ -367,7 +367,7 @@ class Tests_XMLRPC_wp_editPost extends WP_XMLRPC_UnitTestCase {
 			)
 		);
 		$this->assertNotIXRError( $result );
-		$this->assertEquals( 'Updated', get_post( $post_id )->post_title );
+		$this->assertSame( 'Updated', get_post( $post_id )->post_title );
 
 		$term_ids = wp_list_pluck( get_the_category( $post_id ), 'term_id' );
 		$this->assertContains( $term_id, $term_ids );
@@ -394,7 +394,7 @@ class Tests_XMLRPC_wp_editPost extends WP_XMLRPC_UnitTestCase {
 		);
 		$result           = $this->myxmlrpcserver->wp_editPost( array( 1, 'editor', 'editor', $post_id, $new_post_content ) );
 		$this->assertNotIXRError( $result );
-		$this->assertEquals( 'Updated', get_post( $post_id )->post_title );
+		$this->assertSame( 'Updated', get_post( $post_id )->post_title );
 
 		$term_ids = wp_list_pluck( get_the_category( $post_id ), 'term_id' );
 		$this->assertNotContains( $term_id, $term_ids );
@@ -404,24 +404,24 @@ class Tests_XMLRPC_wp_editPost extends WP_XMLRPC_UnitTestCase {
 	 * @ticket 23219
 	 */
 	function test_add_enclosure_if_new() {
-		// Sample enclosure data
+		// Sample enclosure data.
 		$enclosure = array(
 			'url'    => 'http://example.com/sound.mp3',
 			'length' => 12345,
 			'type'   => 'audio/mpeg',
 		);
 
-		// Second sample enclosure data array
+		// Second sample enclosure data array.
 		$new_enclosure = array(
 			'url'    => 'http://example.com/sound2.mp3',
 			'length' => 12345,
 			'type'   => 'audio/mpeg',
 		);
 
-		// Create a test user
+		// Create a test user.
 		$editor_id = $this->make_user_by_role( 'editor' );
 
-		// Add a dummy post
+		// Add a dummy post.
 		$post_id = self::factory()->post->create(
 			array(
 				'post_title'   => 'Post Enclosure Test',
@@ -431,33 +431,33 @@ class Tests_XMLRPC_wp_editPost extends WP_XMLRPC_UnitTestCase {
 			)
 		);
 
-		// Add the enclosure as it is added in "do_enclose()"
+		// Add the enclosure as it is added in "do_enclose()".
 		$enclosure_string = "{$enclosure['url']}\n{$enclosure['length']}\n{$enclosure['type']}\n";
 		add_post_meta( $post_id, 'enclosure', $enclosure_string );
 
-		// Verify that the correct data is there
-		$this->assertEquals( $enclosure_string, get_post_meta( $post_id, 'enclosure', true ) );
+		// Verify that the correct data is there.
+		$this->assertSame( $enclosure_string, get_post_meta( $post_id, 'enclosure', true ) );
 
-		// Attempt to add the enclosure a second time
+		// Attempt to add the enclosure a second time.
 		$this->myxmlrpcserver->add_enclosure_if_new( $post_id, $enclosure );
 
-		// Verify that there is only a single value in the array and that a duplicate is not present
-		$this->assertEquals( 1, count( get_post_meta( $post_id, 'enclosure' ) ) );
+		// Verify that there is only a single value in the array and that a duplicate is not present.
+		$this->assertSame( 1, count( get_post_meta( $post_id, 'enclosure' ) ) );
 
-		// For good measure, check that the expected value is in the array
+		// For good measure, check that the expected value is in the array.
 		$this->assertTrue( in_array( $enclosure_string, get_post_meta( $post_id, 'enclosure' ), true ) );
 
-		// Attempt to add a brand new enclosure via XML-RPC
+		// Attempt to add a brand new enclosure via XML-RPC.
 		$this->myxmlrpcserver->add_enclosure_if_new( $post_id, $new_enclosure );
 
-		// Having added the new enclosure, 2 values are expected in the array
-		$this->assertEquals( 2, count( get_post_meta( $post_id, 'enclosure' ) ) );
+		// Having added the new enclosure, 2 values are expected in the array.
+		$this->assertSame( 2, count( get_post_meta( $post_id, 'enclosure' ) ) );
 
-		// Check that the new enclosure is in the enclosure meta
+		// Check that the new enclosure is in the enclosure meta.
 		$new_enclosure_string = "{$new_enclosure['url']}\n{$new_enclosure['length']}\n{$new_enclosure['type']}\n";
 		$this->assertTrue( in_array( $new_enclosure_string, get_post_meta( $post_id, 'enclosure' ), true ) );
 
-		// Check that the old enclosure is in the enclosure meta
+		// Check that the old enclosure is in the enclosure meta.
 		$this->assertTrue( in_array( $enclosure_string, get_post_meta( $post_id, 'enclosure' ), true ) );
 	}
 
@@ -491,10 +491,10 @@ class Tests_XMLRPC_wp_editPost extends WP_XMLRPC_UnitTestCase {
 		$this->myxmlrpcserver->wp_editPost( array( 1, 'editor', 'editor', $post_id, $new_post_content ) );
 
 		$after = get_post( $post_id );
-		$this->assertEquals( 'future', $after->post_status );
+		$this->assertSame( 'future', $after->post_status );
 
 		$future_date_string = strftime( '%Y-%m-%d %H:%M:%S', $future_time );
-		$this->assertEquals( $future_date_string, $after->post_date );
+		$this->assertSame( $future_date_string, $after->post_date );
 	}
 
 	/**
@@ -511,7 +511,7 @@ class Tests_XMLRPC_wp_editPost extends WP_XMLRPC_UnitTestCase {
 		$post_id = $this->myxmlrpcserver->wp_newPost( array( 1, 'editor', 'editor', $post ) );
 
 		$before = get_post( $post_id );
-		$this->assertEquals( '0000-00-00 00:00:00', $before->post_date_gmt );
+		$this->assertSame( '0000-00-00 00:00:00', $before->post_date_gmt );
 
 		// Edit the post without specifying any dates.
 		$new_post_content = array(
@@ -523,6 +523,6 @@ class Tests_XMLRPC_wp_editPost extends WP_XMLRPC_UnitTestCase {
 
 		// The published date should still be zero.
 		$after = get_post( $post_id );
-		$this->assertEquals( '0000-00-00 00:00:00', $after->post_date_gmt );
+		$this->assertSame( '0000-00-00 00:00:00', $after->post_date_gmt );
 	}
 }
diff --git a/tests/xmlrpc/wp/editProfile.php b/tests/xmlrpc/wp/editProfile.php
index e637016ef9..570de27220 100644
--- a/tests/xmlrpc/wp/editProfile.php
+++ b/tests/xmlrpc/wp/editProfile.php
@@ -9,7 +9,7 @@ class Tests_XMLRPC_wp_editProfile extends WP_XMLRPC_UnitTestCase {
 	function test_invalid_username_password() {
 		$result = $this->myxmlrpcserver->wp_editProfile( array( 1, 'username', 'password', array() ) );
 		$this->assertIXRError( $result );
-		$this->assertEquals( 403, $result->code );
+		$this->assertSame( 403, $result->code );
 	}
 
 	function test_subscriber_profile() {
@@ -28,15 +28,15 @@ class Tests_XMLRPC_wp_editProfile extends WP_XMLRPC_UnitTestCase {
 		$this->assertNotIXRError( $result );
 		$this->assertTrue( $result );
 
-		// verify that the new values were stored
+		// Verify that the new values were stored.
 		$user_data = get_userdata( $subscriber_id );
-		$this->assertEquals( $new_data['first_name'], $user_data->first_name );
-		$this->assertEquals( $new_data['last_name'], $user_data->last_name );
-		$this->assertEquals( $new_data['url'], $user_data->user_url );
-		$this->assertEquals( $new_data['display_name'], $user_data->display_name );
-		$this->assertEquals( $new_data['nickname'], $user_data->nickname );
-		$this->assertEquals( $new_data['nicename'], $user_data->user_nicename );
-		$this->assertEquals( $new_data['bio'], $user_data->description );
+		$this->assertSame( $new_data['first_name'], $user_data->first_name );
+		$this->assertSame( $new_data['last_name'], $user_data->last_name );
+		$this->assertSame( $new_data['url'], $user_data->user_url );
+		$this->assertSame( $new_data['display_name'], $user_data->display_name );
+		$this->assertSame( $new_data['nickname'], $user_data->nickname );
+		$this->assertSame( $new_data['nicename'], $user_data->user_nicename );
+		$this->assertSame( $new_data['bio'], $user_data->description );
 	}
 
 	function test_ignore_password_change() {
diff --git a/tests/xmlrpc/wp/editTerm.php b/tests/xmlrpc/wp/editTerm.php
index bea3dde304..27070140af 100644
--- a/tests/xmlrpc/wp/editTerm.php
+++ b/tests/xmlrpc/wp/editTerm.php
@@ -29,7 +29,7 @@ class Tests_XMLRPC_wp_editTerm extends WP_XMLRPC_UnitTestCase {
 	function test_invalid_username_password() {
 		$result = $this->myxmlrpcserver->wp_editTerm( array( 1, 'username', 'password', 'category', 1 ) );
 		$this->assertIXRError( $result );
-		$this->assertEquals( 403, $result->code );
+		$this->assertSame( 403, $result->code );
 	}
 
 	function test_empty_taxonomy() {
@@ -37,8 +37,8 @@ class Tests_XMLRPC_wp_editTerm extends WP_XMLRPC_UnitTestCase {
 
 		$result = $this->myxmlrpcserver->wp_editTerm( array( 1, 'subscriber', 'subscriber', '', array( 'taxonomy' => '' ) ) );
 		$this->assertIXRError( $result );
-		$this->assertEquals( 403, $result->code );
-		$this->assertEquals( __( 'Invalid taxonomy.' ), $result->message );
+		$this->assertSame( 403, $result->code );
+		$this->assertSame( __( 'Invalid taxonomy.' ), $result->message );
 	}
 
 	function test_invalid_taxonomy() {
@@ -46,8 +46,8 @@ class Tests_XMLRPC_wp_editTerm extends WP_XMLRPC_UnitTestCase {
 
 		$result = $this->myxmlrpcserver->wp_editTerm( array( 1, 'subscriber', 'subscriber', self::$parent_term, array( 'taxonomy' => 'not_existing' ) ) );
 		$this->assertIXRError( $result );
-		$this->assertEquals( 403, $result->code );
-		$this->assertEquals( __( 'Invalid taxonomy.' ), $result->message );
+		$this->assertSame( 403, $result->code );
+		$this->assertSame( __( 'Invalid taxonomy.' ), $result->message );
 	}
 
 	function test_incapable_user() {
@@ -55,8 +55,8 @@ class Tests_XMLRPC_wp_editTerm extends WP_XMLRPC_UnitTestCase {
 
 		$result = $this->myxmlrpcserver->wp_editTerm( array( 1, 'subscriber', 'subscriber', self::$parent_term, array( 'taxonomy' => 'category' ) ) );
 		$this->assertIXRError( $result );
-		$this->assertEquals( 401, $result->code );
-		$this->assertEquals( __( 'Sorry, you are not allowed to edit this term.' ), $result->message );
+		$this->assertSame( 401, $result->code );
+		$this->assertSame( __( 'Sorry, you are not allowed to edit this term.' ), $result->message );
 	}
 
 	function test_term_not_exists() {
@@ -64,8 +64,8 @@ class Tests_XMLRPC_wp_editTerm extends WP_XMLRPC_UnitTestCase {
 
 		$result = $this->myxmlrpcserver->wp_editTerm( array( 1, 'editor', 'editor', 9999, array( 'taxonomy' => 'category' ) ) );
 		$this->assertIXRError( $result );
-		$this->assertEquals( 404, $result->code );
-		$this->assertEquals( __( 'Invalid term ID.' ), $result->message );
+		$this->assertSame( 404, $result->code );
+		$this->assertSame( __( 'Invalid term ID.' ), $result->message );
 	}
 
 	function test_empty_term() {
@@ -73,8 +73,8 @@ class Tests_XMLRPC_wp_editTerm extends WP_XMLRPC_UnitTestCase {
 
 		$result = $this->myxmlrpcserver->wp_editTerm( array( 1, 'editor', 'editor', '', array( 'taxonomy' => 'category' ) ) );
 		$this->assertIXRError( $result );
-		$this->assertEquals( 500, $result->code );
-		$this->assertEquals( __( 'Empty Term.' ), $result->message );
+		$this->assertSame( 500, $result->code );
+		$this->assertSame( __( 'Empty Term.' ), $result->message );
 	}
 
 	function test_empty_term_name() {
@@ -93,8 +93,8 @@ class Tests_XMLRPC_wp_editTerm extends WP_XMLRPC_UnitTestCase {
 			)
 		);
 		$this->assertIXRError( $result );
-		$this->assertEquals( 403, $result->code );
-		$this->assertEquals( __( 'The term name cannot be empty.' ), $result->message );
+		$this->assertSame( 403, $result->code );
+		$this->assertSame( __( 'The term name cannot be empty.' ), $result->message );
 	}
 
 	function test_parent_for_nonhierarchical() {
@@ -113,8 +113,8 @@ class Tests_XMLRPC_wp_editTerm extends WP_XMLRPC_UnitTestCase {
 			)
 		);
 		$this->assertIXRError( $result );
-		$this->assertEquals( 403, $result->code );
-		$this->assertEquals( __( 'Cannot set parent term, taxonomy is not hierarchical.' ), $result->message );
+		$this->assertSame( 403, $result->code );
+		$this->assertSame( __( 'Cannot set parent term, taxonomy is not hierarchical.' ), $result->message );
 	}
 
 	function test_parent_empty() {
@@ -178,7 +178,7 @@ class Tests_XMLRPC_wp_editTerm extends WP_XMLRPC_UnitTestCase {
 			)
 		);
 		$this->assertIXRError( $result );
-		$this->assertEquals( 500, $result->code );
+		$this->assertSame( 500, $result->code );
 	}
 
 	function test_parent_not_existing() {
@@ -198,8 +198,8 @@ class Tests_XMLRPC_wp_editTerm extends WP_XMLRPC_UnitTestCase {
 			)
 		);
 		$this->assertIXRError( $result );
-		$this->assertEquals( 403, $result->code );
-		$this->assertEquals( __( 'Parent term does not exist.' ), $result->message );
+		$this->assertSame( 403, $result->code );
+		$this->assertSame( __( 'Parent term does not exist.' ), $result->message );
 	}
 
 	function test_parent_duplicate_slug() {
@@ -219,8 +219,8 @@ class Tests_XMLRPC_wp_editTerm extends WP_XMLRPC_UnitTestCase {
 			)
 		);
 		$this->assertIXRError( $result );
-		$this->assertEquals( 500, $result->code );
-		$this->assertEquals( htmlspecialchars( sprintf( __( 'The slug &#8220;%s&#8221; is already in use by another term.' ), $parent_term->slug ) ), $result->message );
+		$this->assertSame( 500, $result->code );
+		$this->assertSame( htmlspecialchars( sprintf( __( 'The slug &#8220;%s&#8221; is already in use by another term.' ), $parent_term->slug ) ), $result->message );
 	}
 
 	function test_edit_all_fields() {
diff --git a/tests/xmlrpc/wp/getComment.php b/tests/xmlrpc/wp/getComment.php
index 200f71ec53..bf5d01b454 100644
--- a/tests/xmlrpc/wp/getComment.php
+++ b/tests/xmlrpc/wp/getComment.php
@@ -36,7 +36,7 @@ class Tests_XMLRPC_wp_getComment extends WP_XMLRPC_UnitTestCase {
 	function test_invalid_username_password() {
 		$result = $this->myxmlrpcserver->wp_getComment( array( 1, 'username', 'password', self::$parent_comment_id ) );
 		$this->assertIXRError( $result );
-		$this->assertEquals( 403, $result->code );
+		$this->assertSame( 403, $result->code );
 	}
 
 	function test_incapable_user() {
@@ -44,7 +44,7 @@ class Tests_XMLRPC_wp_getComment extends WP_XMLRPC_UnitTestCase {
 
 		$result = $this->myxmlrpcserver->wp_getComment( array( 1, 'contributor', 'contributor', self::$parent_comment_id ) );
 		$this->assertIXRError( $result );
-		$this->assertEquals( 403, $result->code );
+		$this->assertSame( 403, $result->code );
 	}
 
 	function test_valid_comment() {
@@ -53,7 +53,7 @@ class Tests_XMLRPC_wp_getComment extends WP_XMLRPC_UnitTestCase {
 		$result = $this->myxmlrpcserver->wp_getComment( array( 1, 'editor', 'editor', self::$parent_comment_id ) );
 		$this->assertNotIXRError( $result );
 
-		// Check data types
+		// Check data types.
 		$this->assertInternalType( 'string', $result['user_id'] );
 		$this->assertInternalType( 'string', $result['comment_id'] );
 		$this->assertInstanceOf( 'IXR_Date', $result['date_created_gmt'] );
@@ -69,18 +69,18 @@ class Tests_XMLRPC_wp_getComment extends WP_XMLRPC_UnitTestCase {
 		$this->assertInternalType( 'string', $result['author_ip'] );
 		$this->assertInternalType( 'string', $result['type'] );
 
-		// Check expected values
+		// Check expected values.
 		$this->assertStringMatchesFormat( '%d', $result['user_id'] );
 		$this->assertStringMatchesFormat( '%d', $result['comment_id'] );
 		$this->assertStringMatchesFormat( '%d', $result['parent'] );
 		$this->assertStringMatchesFormat( '%d', $result['post_id'] );
 		$this->assertEquals( self::$parent_comment_id, $result['comment_id'] );
 		$this->assertEquals( 0, $result['parent'] );
-		$this->assertEquals( self::$parent_comment_data['comment_content'], $result['content'] );
+		$this->assertSame( self::$parent_comment_data['comment_content'], $result['content'] );
 		$this->assertEquals( self::$post_id, $result['post_id'] );
-		$this->assertEquals( self::$parent_comment_data['comment_author'], $result['author'] );
-		$this->assertEquals( self::$parent_comment_data['comment_author_url'], $result['author_url'] );
-		$this->assertEquals( self::$parent_comment_data['comment_author_email'], $result['author_email'] );
+		$this->assertSame( self::$parent_comment_data['comment_author'], $result['author'] );
+		$this->assertSame( self::$parent_comment_data['comment_author_url'], $result['author_url'] );
+		$this->assertSame( self::$parent_comment_data['comment_author_email'], $result['author_email'] );
 	}
 
 	function test_valid_child_comment() {
@@ -98,6 +98,6 @@ class Tests_XMLRPC_wp_getComment extends WP_XMLRPC_UnitTestCase {
 
 		$result = $this->myxmlrpcserver->wp_getComment( array( 1, 'editor', 'editor', 123456789 ) );
 		$this->assertIXRError( $result );
-		$this->assertEquals( 404, $result->code );
+		$this->assertSame( 404, $result->code );
 	}
 }
diff --git a/tests/xmlrpc/wp/getComments.php b/tests/xmlrpc/wp/getComments.php
index 5d9278907e..07d78e0b0f 100644
--- a/tests/xmlrpc/wp/getComments.php
+++ b/tests/xmlrpc/wp/getComments.php
@@ -9,7 +9,7 @@ class Tests_XMLRPC_wp_getComments extends WP_XMLRPC_UnitTestCase {
 	function test_invalid_username_password() {
 		$result = $this->myxmlrpcserver->wp_getComments( array( 1, 'username', 'password', array() ) );
 		$this->assertIXRError( $result );
-		$this->assertEquals( 403, $result->code );
+		$this->assertSame( 403, $result->code );
 	}
 
 	function test_incapable_user() {
@@ -17,7 +17,7 @@ class Tests_XMLRPC_wp_getComments extends WP_XMLRPC_UnitTestCase {
 
 		$result = $this->myxmlrpcserver->wp_getComments( array( 1, 'contributor', 'contributor', array() ) );
 		$this->assertIXRError( $result );
-		$this->assertEquals( 401, $result->code );
+		$this->assertSame( 401, $result->code );
 	}
 
 	function test_capable_user() {
@@ -31,7 +31,7 @@ class Tests_XMLRPC_wp_getComments extends WP_XMLRPC_UnitTestCase {
 
 		foreach ( $results as $result ) {
 			$comment = get_comment( $result['comment_id'], ARRAY_A );
-			$this->assertEquals( $comment['comment_post_ID'], $result['post_id'] );
+			$this->assertSame( $comment['comment_post_ID'], $result['post_id'] );
 		}
 	}
 
@@ -76,7 +76,7 @@ class Tests_XMLRPC_wp_getComments extends WP_XMLRPC_UnitTestCase {
 		);
 		$this->assertNotIXRError( $results );
 
-		// if no 'number' filter is specified, default should be 10
+		// If no 'number' filter is specified, default should be 10.
 		$this->assertCount( 10, $results );
 
 		$results2 = $this->myxmlrpcserver->wp_getComments(
@@ -134,7 +134,7 @@ class Tests_XMLRPC_wp_getComments extends WP_XMLRPC_UnitTestCase {
 
 		$result = $this->myxmlrpcserver->wp_getComments( array( 1, 'contributor', 'contributor' ) );
 		$this->assertIXRError( $result );
-		$this->assertEquals( 401, $result->code );
+		$this->assertSame( 401, $result->code );
 	}
 
 	function test_author_capabilities() {
diff --git a/tests/xmlrpc/wp/getMediaItem.php b/tests/xmlrpc/wp/getMediaItem.php
index 7c46ded316..6312cdda44 100644
--- a/tests/xmlrpc/wp/getMediaItem.php
+++ b/tests/xmlrpc/wp/getMediaItem.php
@@ -39,7 +39,7 @@ class Tests_XMLRPC_wp_getMediaItem extends WP_XMLRPC_UnitTestCase {
 	function test_invalid_username_password() {
 		$result = $this->myxmlrpcserver->wp_getMediaItem( array( 1, 'username', 'password', 0 ) );
 		$this->assertIXRError( $result );
-		$this->assertEquals( 403, $result->code );
+		$this->assertSame( 403, $result->code );
 	}
 
 	function test_valid_media_item() {
@@ -49,7 +49,7 @@ class Tests_XMLRPC_wp_getMediaItem extends WP_XMLRPC_UnitTestCase {
 		$result = $this->myxmlrpcserver->wp_getMediaItem( array( 1, 'author', 'author', $this->attachment_id, $fields ) );
 		$this->assertNotIXRError( $result );
 
-		// Check data types
+		// Check data types.
 		$this->assertInternalType( 'string', $result['attachment_id'] );
 		$this->assertInternalType( 'int', $result['parent'] );
 		$this->assertInternalType( 'string', $result['title'] );
@@ -60,10 +60,10 @@ class Tests_XMLRPC_wp_getMediaItem extends WP_XMLRPC_UnitTestCase {
 		$this->assertInternalType( 'string', $result['thumbnail'] );
 		$this->assertInternalType( 'array', $result['metadata'] );
 
-		// Check expected values
+		// Check expected values.
 		$this->assertStringMatchesFormat( '%d', $result['attachment_id'] );
-		$this->assertEquals( $this->attachment_data['post_title'], $result['title'] );
-		$this->assertEquals( wp_get_attachment_url( $this->attachment_id ), $result['link'] );
-		$this->assertEquals( wp_get_attachment_thumb_url( $this->attachment_id ), $result['thumbnail'] );
+		$this->assertSame( $this->attachment_data['post_title'], $result['title'] );
+		$this->assertSame( wp_get_attachment_url( $this->attachment_id ), $result['link'] );
+		$this->assertSame( wp_get_attachment_thumb_url( $this->attachment_id ), $result['thumbnail'] );
 	}
 }
diff --git a/tests/xmlrpc/wp/getOptions.php b/tests/xmlrpc/wp/getOptions.php
index 6a5f1d172d..6ffdf4503d 100644
--- a/tests/xmlrpc/wp/getOptions.php
+++ b/tests/xmlrpc/wp/getOptions.php
@@ -8,7 +8,7 @@ class Tests_XMLRPC_wp_getOptions extends WP_XMLRPC_UnitTestCase {
 	function test_invalid_username_password() {
 		$result = $this->myxmlrpcserver->wp_getOptions( array( 1, 'username', 'password' ) );
 		$this->assertIXRError( $result );
-		$this->assertEquals( 403, $result->code );
+		$this->assertSame( 403, $result->code );
 	}
 
 	function test_valid_username_password() {
@@ -16,7 +16,7 @@ class Tests_XMLRPC_wp_getOptions extends WP_XMLRPC_UnitTestCase {
 
 		$result = $this->myxmlrpcserver->wp_getOptions( array( 1, 'subscriber', 'subscriber' ) );
 		$this->assertInternalType( 'array', $result );
-		$this->assertEquals( 'WordPress', $result['software_name']['value'] );
+		$this->assertSame( 'WordPress', $result['software_name']['value'] );
 	}
 
 	function test_option_value() {
@@ -25,7 +25,7 @@ class Tests_XMLRPC_wp_getOptions extends WP_XMLRPC_UnitTestCase {
 		$result = $this->myxmlrpcserver->wp_getOptions( array( 1, 'administrator', 'administrator', 'default_comment_status' ) );
 		$this->assertInternalType( 'array', $result );
 
-		$this->assertEquals( get_option( 'default_comment_status' ), $result['default_comment_status']['value'] );
+		$this->assertSame( get_option( 'default_comment_status' ), $result['default_comment_status']['value'] );
 		$this->assertFalse( $result['default_comment_status']['readonly'] );
 	}
 
@@ -39,84 +39,84 @@ class Tests_XMLRPC_wp_getOptions extends WP_XMLRPC_UnitTestCase {
 		$result = $this->myxmlrpcserver->wp_getOptions( array( 1, 'subscriber', 'subscriber' ) );
 		$this->assertInternalType( 'array', $result );
 
-		// Read Only options
-		$this->assertEquals( 'WordPress', $result['software_name']['value'] );
+		// Read-only options.
+		$this->assertSame( 'WordPress', $result['software_name']['value'] );
 		$this->assertTrue( $result['software_name']['readonly'] );
 
-		$this->assertEquals( $wp_version, $result['software_version']['value'] );
+		$this->assertSame( $wp_version, $result['software_version']['value'] );
 		$this->assertTrue( $result['software_version']['readonly'] );
 
-		$this->assertEquals( get_site_url(), $result['blog_url']['value'] );
+		$this->assertSame( get_site_url(), $result['blog_url']['value'] );
 		$this->assertTrue( $result['blog_url']['readonly'] );
 
-		$this->assertEquals( wp_login_url(), $result['login_url']['value'] );
+		$this->assertSame( wp_login_url(), $result['login_url']['value'] );
 		$this->assertTrue( $result['login_url']['readonly'] );
 
-		$this->assertEquals( get_admin_url(), $result['admin_url']['value'] );
+		$this->assertSame( get_admin_url(), $result['admin_url']['value'] );
 		$this->assertTrue( $result['admin_url']['readonly'] );
 
-		$this->assertEquals( get_option( 'image_default_link_type' ), $result['image_default_link_type']['value'] );
+		$this->assertSame( get_option( 'image_default_link_type' ), $result['image_default_link_type']['value'] );
 		$this->assertTrue( $result['image_default_link_type']['readonly'] );
 
-		$this->assertEquals( get_option( 'image_default_size' ), $result['image_default_size']['value'] );
+		$this->assertSame( get_option( 'image_default_size' ), $result['image_default_size']['value'] );
 		$this->assertTrue( $result['image_default_size']['readonly'] );
 
-		$this->assertEquals( get_option( 'image_default_align' ), $result['image_default_align']['value'] );
+		$this->assertSame( get_option( 'image_default_align' ), $result['image_default_align']['value'] );
 		$this->assertTrue( $result['image_default_align']['readonly'] );
 
-		$this->assertEquals( get_template(), $result['template']['value'] );
+		$this->assertSame( get_template(), $result['template']['value'] );
 		$this->assertTrue( $result['template']['readonly'] );
 
-		$this->assertEquals( get_stylesheet(), $result['stylesheet']['value'] );
+		$this->assertSame( get_stylesheet(), $result['stylesheet']['value'] );
 		$this->assertTrue( $result['stylesheet']['readonly'] );
 
-		$this->assertEquals( current_theme_supports( 'post-thumbnails' ), $result['post_thumbnail']['value'] );
+		$this->assertSame( current_theme_supports( 'post-thumbnails' ), $result['post_thumbnail']['value'] );
 		$this->assertTrue( $result['post_thumbnail']['readonly'] );
 
-		// Updatable options
-		$this->assertEquals( get_option( 'gmt_offset' ), $result['time_zone']['value'] );
+		// Updatable options.
+		$this->assertSame( get_option( 'gmt_offset' ), $result['time_zone']['value'] );
 		$this->assertTrue( $result['time_zone']['readonly'] );
 
-		$this->assertEquals( get_option( 'blogname' ), $result['blog_title']['value'] );
+		$this->assertSame( get_option( 'blogname' ), $result['blog_title']['value'] );
 		$this->assertTrue( $result['blog_title']['readonly'] );
 
-		$this->assertEquals( get_option( 'blogdescription' ), $result['blog_tagline']['value'] );
+		$this->assertSame( get_option( 'blogdescription' ), $result['blog_tagline']['value'] );
 		$this->assertTrue( $result['blog_tagline']['readonly'] );
 
-		$this->assertEquals( get_option( 'date_format' ), $result['date_format']['value'] );
+		$this->assertSame( get_option( 'date_format' ), $result['date_format']['value'] );
 		$this->assertTrue( $result['date_format']['readonly'] );
 
-		$this->assertEquals( get_option( 'time_format' ), $result['time_format']['value'] );
+		$this->assertSame( get_option( 'time_format' ), $result['time_format']['value'] );
 		$this->assertTrue( $result['time_format']['readonly'] );
 
-		$this->assertEquals( get_option( 'users_can_register' ), $result['users_can_register']['value'] );
+		$this->assertSame( get_option( 'users_can_register' ), $result['users_can_register']['value'] );
 		$this->assertTrue( $result['users_can_register']['readonly'] );
 
-		$this->assertEquals( get_option( 'thumbnail_size_w' ), $result['thumbnail_size_w']['value'] );
+		$this->assertSame( get_option( 'thumbnail_size_w' ), $result['thumbnail_size_w']['value'] );
 		$this->assertTrue( $result['thumbnail_size_w']['readonly'] );
 
-		$this->assertEquals( get_option( 'thumbnail_size_h' ), $result['thumbnail_size_h']['value'] );
+		$this->assertSame( get_option( 'thumbnail_size_h' ), $result['thumbnail_size_h']['value'] );
 		$this->assertTrue( $result['thumbnail_size_h']['readonly'] );
 
-		$this->assertEquals( get_option( 'thumbnail_crop' ), $result['thumbnail_crop']['value'] );
+		$this->assertSame( get_option( 'thumbnail_crop' ), $result['thumbnail_crop']['value'] );
 		$this->assertTrue( $result['thumbnail_crop']['readonly'] );
 
-		$this->assertEquals( get_option( 'medium_size_w' ), $result['medium_size_w']['value'] );
+		$this->assertSame( get_option( 'medium_size_w' ), $result['medium_size_w']['value'] );
 		$this->assertTrue( $result['medium_size_w']['readonly'] );
 
-		$this->assertEquals( get_option( 'medium_size_h' ), $result['medium_size_h']['value'] );
+		$this->assertSame( get_option( 'medium_size_h' ), $result['medium_size_h']['value'] );
 		$this->assertTrue( $result['medium_size_h']['readonly'] );
 
-		$this->assertEquals( get_option( 'large_size_w' ), $result['large_size_w']['value'] );
+		$this->assertSame( get_option( 'large_size_w' ), $result['large_size_w']['value'] );
 		$this->assertTrue( $result['large_size_w']['readonly'] );
 
-		$this->assertEquals( get_option( 'large_size_h' ), $result['large_size_h']['value'] );
+		$this->assertSame( get_option( 'large_size_h' ), $result['large_size_h']['value'] );
 		$this->assertTrue( $result['large_size_h']['readonly'] );
 
-		$this->assertEquals( get_option( 'default_comment_status' ), $result['default_comment_status']['value'] );
+		$this->assertSame( get_option( 'default_comment_status' ), $result['default_comment_status']['value'] );
 		$this->assertTrue( $result['default_comment_status']['readonly'] );
 
-		$this->assertEquals( get_option( 'default_ping_status' ), $result['default_ping_status']['value'] );
+		$this->assertSame( get_option( 'default_ping_status' ), $result['default_ping_status']['value'] );
 		$this->assertTrue( $result['default_ping_status']['readonly'] );
 	}
 
@@ -128,84 +128,84 @@ class Tests_XMLRPC_wp_getOptions extends WP_XMLRPC_UnitTestCase {
 		$result = $this->myxmlrpcserver->wp_getOptions( array( 1, 'administrator', 'administrator' ) );
 		$this->assertInternalType( 'array', $result );
 
-		// Read Only options
-		$this->assertEquals( 'WordPress', $result['software_name']['value'] );
+		// Read-only options.
+		$this->assertSame( 'WordPress', $result['software_name']['value'] );
 		$this->assertTrue( $result['software_name']['readonly'] );
 
-		$this->assertEquals( $wp_version, $result['software_version']['value'] );
+		$this->assertSame( $wp_version, $result['software_version']['value'] );
 		$this->assertTrue( $result['software_version']['readonly'] );
 
-		$this->assertEquals( get_site_url(), $result['blog_url']['value'] );
+		$this->assertSame( get_site_url(), $result['blog_url']['value'] );
 		$this->assertTrue( $result['blog_url']['readonly'] );
 
-		$this->assertEquals( wp_login_url(), $result['login_url']['value'] );
+		$this->assertSame( wp_login_url(), $result['login_url']['value'] );
 		$this->assertTrue( $result['login_url']['readonly'] );
 
-		$this->assertEquals( get_admin_url(), $result['admin_url']['value'] );
+		$this->assertSame( get_admin_url(), $result['admin_url']['value'] );
 		$this->assertTrue( $result['admin_url']['readonly'] );
 
-		$this->assertEquals( get_option( 'image_default_link_type' ), $result['image_default_link_type']['value'] );
+		$this->assertSame( get_option( 'image_default_link_type' ), $result['image_default_link_type']['value'] );
 		$this->assertTrue( $result['image_default_link_type']['readonly'] );
 
-		$this->assertEquals( get_option( 'image_default_size' ), $result['image_default_size']['value'] );
+		$this->assertSame( get_option( 'image_default_size' ), $result['image_default_size']['value'] );
 		$this->assertTrue( $result['image_default_size']['readonly'] );
 
-		$this->assertEquals( get_option( 'image_default_align' ), $result['image_default_align']['value'] );
+		$this->assertSame( get_option( 'image_default_align' ), $result['image_default_align']['value'] );
 		$this->assertTrue( $result['image_default_align']['readonly'] );
 
-		$this->assertEquals( get_template(), $result['template']['value'] );
+		$this->assertSame( get_template(), $result['template']['value'] );
 		$this->assertTrue( $result['template']['readonly'] );
 
-		$this->assertEquals( get_stylesheet(), $result['stylesheet']['value'] );
+		$this->assertSame( get_stylesheet(), $result['stylesheet']['value'] );
 		$this->assertTrue( $result['stylesheet']['readonly'] );
 
-		$this->assertEquals( current_theme_supports( 'post-thumbnails' ), $result['post_thumbnail']['value'] );
+		$this->assertSame( current_theme_supports( 'post-thumbnails' ), $result['post_thumbnail']['value'] );
 		$this->assertTrue( $result['post_thumbnail']['readonly'] );
 
-		// Updatable options
-		$this->assertEquals( get_option( 'gmt_offset' ), $result['time_zone']['value'] );
+		// Updatable options.
+		$this->assertSame( get_option( 'gmt_offset' ), $result['time_zone']['value'] );
 		$this->assertFalse( $result['time_zone']['readonly'] );
 
-		$this->assertEquals( get_option( 'blogname' ), $result['blog_title']['value'] );
+		$this->assertSame( get_option( 'blogname' ), $result['blog_title']['value'] );
 		$this->assertFalse( $result['blog_title']['readonly'] );
 
-		$this->assertEquals( get_option( 'blogdescription' ), $result['blog_tagline']['value'] );
+		$this->assertSame( get_option( 'blogdescription' ), $result['blog_tagline']['value'] );
 		$this->assertFalse( $result['blog_tagline']['readonly'] );
 
-		$this->assertEquals( get_option( 'date_format' ), $result['date_format']['value'] );
+		$this->assertSame( get_option( 'date_format' ), $result['date_format']['value'] );
 		$this->assertFalse( $result['date_format']['readonly'] );
 
-		$this->assertEquals( get_option( 'time_format' ), $result['time_format']['value'] );
+		$this->assertSame( get_option( 'time_format' ), $result['time_format']['value'] );
 		$this->assertFalse( $result['time_format']['readonly'] );
 
-		$this->assertEquals( get_option( 'users_can_register' ), $result['users_can_register']['value'] );
+		$this->assertSame( get_option( 'users_can_register' ), $result['users_can_register']['value'] );
 		$this->assertFalse( $result['users_can_register']['readonly'] );
 
-		$this->assertEquals( get_option( 'thumbnail_size_w' ), $result['thumbnail_size_w']['value'] );
+		$this->assertSame( get_option( 'thumbnail_size_w' ), $result['thumbnail_size_w']['value'] );
 		$this->assertFalse( $result['thumbnail_size_w']['readonly'] );
 
-		$this->assertEquals( get_option( 'thumbnail_size_h' ), $result['thumbnail_size_h']['value'] );
+		$this->assertSame( get_option( 'thumbnail_size_h' ), $result['thumbnail_size_h']['value'] );
 		$this->assertFalse( $result['thumbnail_size_h']['readonly'] );
 
-		$this->assertEquals( get_option( 'thumbnail_crop' ), $result['thumbnail_crop']['value'] );
+		$this->assertSame( get_option( 'thumbnail_crop' ), $result['thumbnail_crop']['value'] );
 		$this->assertFalse( $result['thumbnail_crop']['readonly'] );
 
-		$this->assertEquals( get_option( 'medium_size_w' ), $result['medium_size_w']['value'] );
+		$this->assertSame( get_option( 'medium_size_w' ), $result['medium_size_w']['value'] );
 		$this->assertFalse( $result['medium_size_w']['readonly'] );
 
-		$this->assertEquals( get_option( 'medium_size_h' ), $result['medium_size_h']['value'] );
+		$this->assertSame( get_option( 'medium_size_h' ), $result['medium_size_h']['value'] );
 		$this->assertFalse( $result['medium_size_h']['readonly'] );
 
-		$this->assertEquals( get_option( 'large_size_w' ), $result['large_size_w']['value'] );
+		$this->assertSame( get_option( 'large_size_w' ), $result['large_size_w']['value'] );
 		$this->assertFalse( $result['large_size_w']['readonly'] );
 
-		$this->assertEquals( get_option( 'large_size_h' ), $result['large_size_h']['value'] );
+		$this->assertSame( get_option( 'large_size_h' ), $result['large_size_h']['value'] );
 		$this->assertFalse( $result['large_size_h']['readonly'] );
 
-		$this->assertEquals( get_option( 'default_comment_status' ), $result['default_comment_status']['value'] );
+		$this->assertSame( get_option( 'default_comment_status' ), $result['default_comment_status']['value'] );
 		$this->assertFalse( $result['default_comment_status']['readonly'] );
 
-		$this->assertEquals( get_option( 'default_ping_status' ), $result['default_ping_status']['value'] );
+		$this->assertSame( get_option( 'default_ping_status' ), $result['default_ping_status']['value'] );
 		$this->assertFalse( $result['default_ping_status']['readonly'] );
 	}
 }
diff --git a/tests/xmlrpc/wp/getPage.php b/tests/xmlrpc/wp/getPage.php
index 8ece6e1254..03b54a58b6 100644
--- a/tests/xmlrpc/wp/getPage.php
+++ b/tests/xmlrpc/wp/getPage.php
@@ -25,7 +25,7 @@ class Tests_XMLRPC_wp_getPage extends WP_XMLRPC_UnitTestCase {
 	function test_invalid_username_password() {
 		$result = $this->myxmlrpcserver->wp_getPage( array( 1, self::$post_id, 'username', 'password' ) );
 		$this->assertIXRError( $result );
-		$this->assertEquals( 403, $result->code );
+		$this->assertSame( 403, $result->code );
 	}
 
 	/**
@@ -36,7 +36,7 @@ class Tests_XMLRPC_wp_getPage extends WP_XMLRPC_UnitTestCase {
 
 		$result = $this->myxmlrpcserver->wp_getPage( array( 1, 9999, 'editor', 'editor' ) );
 		$this->assertIXRError( $result );
-		$this->assertEquals( 404, $result->code );
+		$this->assertSame( 404, $result->code );
 	}
 
 	function test_valid_page() {
@@ -45,7 +45,7 @@ class Tests_XMLRPC_wp_getPage extends WP_XMLRPC_UnitTestCase {
 		$result = $this->myxmlrpcserver->wp_getPage( array( 1, self::$post_id, 'editor', 'editor' ) );
 		$this->assertNotIXRError( $result );
 
-		// Check data types
+		// Check data types.
 		$this->assertInternalType( 'string', $result['userid'] );
 		$this->assertInternalType( 'int', $result['page_id'] );
 		$this->assertInternalType( 'string', $result['page_status'] );
@@ -71,12 +71,12 @@ class Tests_XMLRPC_wp_getPage extends WP_XMLRPC_UnitTestCase {
 
 		$post_data = get_post( self::$post_id );
 
-		// Check expected values
+		// Check expected values.
 		$this->assertStringMatchesFormat( '%d', $result['userid'] );
-		$this->assertEquals( 'future', $result['page_status'] );
-		$this->assertEquals( $post_data->post_title, $result['title'] );
-		$this->assertEquals( url_to_postid( $result['link'] ), self::$post_id );
-		$this->assertEquals( $post_data->post_excerpt, $result['excerpt'] );
+		$this->assertSame( 'future', $result['page_status'] );
+		$this->assertSame( $post_data->post_title, $result['title'] );
+		$this->assertSame( url_to_postid( $result['link'] ), self::$post_id );
+		$this->assertSame( $post_data->post_excerpt, $result['excerpt'] );
 		$this->assertStringMatchesFormat( '%d', $result['wp_author_id'] );
 	}
 
@@ -93,7 +93,7 @@ class Tests_XMLRPC_wp_getPage extends WP_XMLRPC_UnitTestCase {
 
 		$date_gmt = strtotime( get_gmt_from_date( mysql2date( 'Y-m-d H:i:s', $post_data->post_date, false ), 'Ymd\TH:i:s' ) );
 
-		$this->assertEquals( strtotime( $post_data->post_date ), $result['dateCreated']->getTimestamp() );
-		$this->assertEquals( $date_gmt, $result['date_created_gmt']->getTimestamp() );
+		$this->assertSame( strtotime( $post_data->post_date ), $result['dateCreated']->getTimestamp() );
+		$this->assertSame( $date_gmt, $result['date_created_gmt']->getTimestamp() );
 	}
 }
diff --git a/tests/xmlrpc/wp/getPageList.php b/tests/xmlrpc/wp/getPageList.php
index 8205befb2d..e3ad2e0e84 100644
--- a/tests/xmlrpc/wp/getPageList.php
+++ b/tests/xmlrpc/wp/getPageList.php
@@ -25,7 +25,7 @@ class Tests_XMLRPC_wp_getPageList extends WP_XMLRPC_UnitTestCase {
 	function test_invalid_username_password() {
 		$result = $this->myxmlrpcserver->wp_getPageList( array( 1, 'username', 'password' ) );
 		$this->assertIXRError( $result );
-		$this->assertEquals( 403, $result->code );
+		$this->assertSame( 403, $result->code );
 	}
 
 	function test_incapable_user() {
@@ -33,7 +33,7 @@ class Tests_XMLRPC_wp_getPageList extends WP_XMLRPC_UnitTestCase {
 
 		$result = $this->myxmlrpcserver->wp_getPageList( array( 1, 'contributor', 'contributor' ) );
 		$this->assertIXRError( $result );
-		$this->assertEquals( 401, $result->code );
+		$this->assertSame( 401, $result->code );
 	}
 
 	function test_date() {
@@ -49,8 +49,8 @@ class Tests_XMLRPC_wp_getPageList extends WP_XMLRPC_UnitTestCase {
 			$this->assertInstanceOf( 'IXR_Date', $result->dateCreated );
 			$this->assertInstanceOf( 'IXR_Date', $result->date_created_gmt );
 
-			$this->assertEquals( strtotime( $page->post_date ), $result->dateCreated->getTimestamp() );
-			$this->assertEquals( $date_gmt, $result->date_created_gmt->getTimestamp() );
+			$this->assertSame( strtotime( $page->post_date ), $result->dateCreated->getTimestamp() );
+			$this->assertSame( $date_gmt, $result->date_created_gmt->getTimestamp() );
 		}
 	}
 }
diff --git a/tests/xmlrpc/wp/getPages.php b/tests/xmlrpc/wp/getPages.php
index 40da0ea891..ee90a12480 100644
--- a/tests/xmlrpc/wp/getPages.php
+++ b/tests/xmlrpc/wp/getPages.php
@@ -33,7 +33,7 @@ class Tests_XMLRPC_wp_getPages extends WP_XMLRPC_UnitTestCase {
 	function test_invalid_username_password() {
 		$result = $this->myxmlrpcserver->wp_getPages( array( 1, 'username', 'password' ) );
 		$this->assertIXRError( $result );
-		$this->assertEquals( 403, $result->code );
+		$this->assertSame( 403, $result->code );
 	}
 
 	function test_incapable_user() {
@@ -41,7 +41,7 @@ class Tests_XMLRPC_wp_getPages extends WP_XMLRPC_UnitTestCase {
 
 		$result = $this->myxmlrpcserver->wp_getPages( array( 1, 'contributor', 'contributor' ) );
 		$this->assertIXRError( $result );
-		$this->assertEquals( 401, $result->code );
+		$this->assertSame( 401, $result->code );
 	}
 
 	function test_capable_user() {
@@ -50,7 +50,7 @@ class Tests_XMLRPC_wp_getPages extends WP_XMLRPC_UnitTestCase {
 
 		foreach ( $results as $result ) {
 			$page = get_post( $result['page_id'] );
-			$this->assertEquals( $page->post_type, 'page' );
+			$this->assertSame( $page->post_type, 'page' );
 		}
 	}
 
diff --git a/tests/xmlrpc/wp/getPost.php b/tests/xmlrpc/wp/getPost.php
index 8a3cf7469d..30b8addf6c 100644
--- a/tests/xmlrpc/wp/getPost.php
+++ b/tests/xmlrpc/wp/getPost.php
@@ -31,7 +31,7 @@ class Tests_XMLRPC_wp_getPost extends WP_XMLRPC_UnitTestCase {
 	function test_invalid_username_password() {
 		$result = $this->myxmlrpcserver->wp_getPost( array( 1, 'username', 'password', 1 ) );
 		$this->assertIXRError( $result );
-		$this->assertEquals( 403, $result->code );
+		$this->assertSame( 403, $result->code );
 	}
 
 	function test_valid_post() {
@@ -41,7 +41,7 @@ class Tests_XMLRPC_wp_getPost extends WP_XMLRPC_UnitTestCase {
 		$result = $this->myxmlrpcserver->wp_getPost( array( 1, 'author', 'author', $this->post_id, $fields ) );
 		$this->assertNotIXRError( $result );
 
-		// Check data types
+		// Check data types.
 		$this->assertInternalType( 'string', $result['post_id'] );
 		$this->assertInternalType( 'string', $result['post_title'] );
 		$this->assertInstanceOf( 'IXR_Date', $result['post_date'] );
@@ -63,17 +63,17 @@ class Tests_XMLRPC_wp_getPost extends WP_XMLRPC_UnitTestCase {
 		$this->assertInternalType( 'array', $result['post_thumbnail'] );
 		$this->assertInternalType( 'array', $result['custom_fields'] );
 
-		// Check expected values
+		// Check expected values.
 		$this->assertStringMatchesFormat( '%d', $result['post_id'] );
-		$this->assertEquals( $this->post_data['post_title'], $result['post_title'] );
-		$this->assertEquals( 'draft', $result['post_status'] );
-		$this->assertEquals( 'post', $result['post_type'] );
+		$this->assertSame( $this->post_data['post_title'], $result['post_title'] );
+		$this->assertSame( 'draft', $result['post_status'] );
+		$this->assertSame( 'post', $result['post_type'] );
 		$this->assertStringMatchesFormat( '%d', $result['post_author'] );
-		$this->assertEquals( $this->post_data['post_excerpt'], $result['post_excerpt'] );
-		$this->assertEquals( $this->post_data['post_content'], $result['post_content'] );
-		$this->assertEquals( url_to_postid( $result['link'] ), $this->post_id );
+		$this->assertSame( $this->post_data['post_excerpt'], $result['post_excerpt'] );
+		$this->assertSame( $this->post_data['post_content'], $result['post_content'] );
+		$this->assertSame( url_to_postid( $result['link'] ), $this->post_id );
 		$this->assertEquals( $this->post_custom_field['id'], $result['custom_fields'][0]['id'] );
-		$this->assertEquals( $this->post_custom_field['key'], $result['custom_fields'][0]['key'] );
+		$this->assertSame( $this->post_custom_field['key'], $result['custom_fields'][0]['key'] );
 		$this->assertEquals( $this->post_custom_field['value'], $result['custom_fields'][0]['value'] );
 
 		remove_theme_support( 'post-thumbnails' );
@@ -84,9 +84,9 @@ class Tests_XMLRPC_wp_getPost extends WP_XMLRPC_UnitTestCase {
 		$result = $this->myxmlrpcserver->wp_getPost( array( 1, 'author', 'author', $this->post_id, $fields ) );
 		$this->assertNotIXRError( $result );
 
-		// when no fields are requested, only the IDs should be returned
-		$this->assertEquals( 1, count( $result ) );
-		$this->assertEquals( array( 'post_id' ), array_keys( $result ) );
+		// When no fields are requested, only the IDs should be returned.
+		$this->assertSame( 1, count( $result ) );
+		$this->assertSame( array( 'post_id' ), array_keys( $result ) );
 	}
 
 	function test_default_fields() {
@@ -94,7 +94,7 @@ class Tests_XMLRPC_wp_getPost extends WP_XMLRPC_UnitTestCase {
 		$this->assertNotIXRError( $result );
 
 		$this->assertArrayHasKey( 'post_id', $result );
-		$this->assertArrayHasKey( 'link', $result ); // random field from 'posts' group
+		$this->assertArrayHasKey( 'link', $result ); // Random field from 'posts' group.
 		$this->assertArrayHasKey( 'terms', $result );
 		$this->assertArrayHasKey( 'custom_fields', $result );
 	}
@@ -109,14 +109,14 @@ class Tests_XMLRPC_wp_getPost extends WP_XMLRPC_UnitTestCase {
 		$this->assertInstanceOf( 'IXR_Date', $result['post_modified'] );
 		$this->assertInstanceOf( 'IXR_Date', $result['post_modified_gmt'] );
 
-		$this->assertEquals( $this->post_date_ts, $result['post_date']->getTimestamp() );
-		$this->assertEquals( $this->post_date_ts, $result['post_modified']->getTimestamp() );
+		$this->assertSame( $this->post_date_ts, $result['post_date']->getTimestamp() );
+		$this->assertSame( $this->post_date_ts, $result['post_modified']->getTimestamp() );
 
 		$post_date_gmt     = strtotime( get_gmt_from_date( mysql2date( 'Y-m-d H:i:s', $this->post_data['post_date'], false ), 'Ymd\TH:i:s' ) );
 		$post_modified_gmt = strtotime( get_gmt_from_date( mysql2date( 'Y-m-d H:i:s', $this->post_data['post_date'], false ), 'Ymd\TH:i:s' ) );
 
-		$this->assertEquals( $post_date_gmt, $result['post_date_gmt']->getTimestamp() );
-		$this->assertEquals( $post_modified_gmt, $result['post_modified_gmt']->getTimestamp() );
+		$this->assertSame( $post_date_gmt, $result['post_date_gmt']->getTimestamp() );
+		$this->assertSame( $post_modified_gmt, $result['post_modified_gmt']->getTimestamp() );
 	}
 
 	/**
@@ -143,8 +143,8 @@ class Tests_XMLRPC_wp_getPost extends WP_XMLRPC_UnitTestCase {
 		$this->assertInternalType( 'string', $result['guid'] );
 		$this->assertInternalType( 'string', $result['post_mime_type'] );
 
-		$this->assertEquals( 'page', $result['post_type'] );
+		$this->assertSame( 'page', $result['post_type'] );
 		$this->assertEquals( $parent_page_id, $result['post_parent'] );
-		$this->assertEquals( 2, $result['menu_order'] );
+		$this->assertSame( 2, $result['menu_order'] );
 	}
 }
diff --git a/tests/xmlrpc/wp/getPostType.php b/tests/xmlrpc/wp/getPostType.php
index 1f5ffe621e..3781dc0674 100644
--- a/tests/xmlrpc/wp/getPostType.php
+++ b/tests/xmlrpc/wp/getPostType.php
@@ -32,7 +32,7 @@ class Tests_XMLRPC_wp_getPostType extends WP_XMLRPC_UnitTestCase {
 	function test_invalid_username_password() {
 		$result = $this->myxmlrpcserver->wp_getPostType( array( 1, 'username', 'password', 'post' ) );
 		$this->assertIXRError( $result );
-		$this->assertEquals( 403, $result->code );
+		$this->assertSame( 403, $result->code );
 	}
 
 	function test_invalid_post_type_name() {
@@ -40,7 +40,7 @@ class Tests_XMLRPC_wp_getPostType extends WP_XMLRPC_UnitTestCase {
 
 		$result = $this->myxmlrpcserver->wp_getPostType( array( 1, 'editor', 'editor', 'foobar' ) );
 		$this->assertIXRError( $result );
-		$this->assertEquals( 403, $result->code );
+		$this->assertSame( 403, $result->code );
 	}
 
 	function test_valid_post_type_name() {
@@ -55,7 +55,7 @@ class Tests_XMLRPC_wp_getPostType extends WP_XMLRPC_UnitTestCase {
 
 		$result = $this->myxmlrpcserver->wp_getPostType( array( 1, 'subscriber', 'subscriber', 'post' ) );
 		$this->assertIXRError( $result );
-		$this->assertEquals( 401, $result->code );
+		$this->assertSame( 401, $result->code );
 	}
 
 	function test_valid_type() {
@@ -64,7 +64,7 @@ class Tests_XMLRPC_wp_getPostType extends WP_XMLRPC_UnitTestCase {
 		$result = $this->myxmlrpcserver->wp_getPostType( array( 1, 'editor', 'editor', $this->cpt_name, array( 'labels', 'cap', 'menu', 'taxonomies' ) ) );
 		$this->assertNotIXRError( $result );
 
-		// check data types
+		// Check data types.
 		$this->assertInternalType( 'string', $result['name'] );
 		$this->assertInternalType( 'string', $result['label'] );
 		$this->assertInternalType( 'bool', $result['hierarchical'] );
@@ -80,7 +80,7 @@ class Tests_XMLRPC_wp_getPostType extends WP_XMLRPC_UnitTestCase {
 		$this->assertInternalType( 'array', $result['taxonomies'] );
 		$this->assertInternalType( 'array', $result['supports'] );
 
-		// check label data types
+		// Check label data types.
 		$this->assertInternalType( 'string', $result['labels']['name'] );
 		$this->assertInternalType( 'string', $result['labels']['singular_name'] );
 		$this->assertInternalType( 'string', $result['labels']['add_new'] );
@@ -96,7 +96,7 @@ class Tests_XMLRPC_wp_getPostType extends WP_XMLRPC_UnitTestCase {
 		$this->assertInternalType( 'string', $result['labels']['menu_name'] );
 		$this->assertInternalType( 'string', $result['labels']['name_admin_bar'] );
 
-		// check cap data types
+		// Check cap data types.
 		$this->assertInternalType( 'string', $result['cap']['edit_post'] );
 		$this->assertInternalType( 'string', $result['cap']['read_post'] );
 		$this->assertInternalType( 'string', $result['cap']['delete_post'] );
@@ -112,21 +112,21 @@ class Tests_XMLRPC_wp_getPostType extends WP_XMLRPC_UnitTestCase {
 		$this->assertInternalType( 'string', $result['cap']['edit_private_posts'] );
 		$this->assertInternalType( 'string', $result['cap']['edit_published_posts'] );
 
-		// check taxonomy data types
+		// Check taxonomy data types.
 		foreach ( $result['taxonomies'] as $taxonomy ) {
 			$this->assertInternalType( 'string', $taxonomy );
 		}
 
-		// check taxonomy data types
+		// Check support data types.
 		foreach ( $result['supports'] as $key => $value ) {
 			$this->assertInternalType( 'string', $key );
 			$this->assertInternalType( 'bool', $value );
 		}
 
-		// Check expected values
-		$this->assertEquals( $this->cpt_name, $result['name'] );
+		// Check expected values.
+		$this->assertSame( $this->cpt_name, $result['name'] );
 		foreach ( $this->cpt_args as $key => $value ) {
-			$this->assertEquals( $value, $result[ $key ] );
+			$this->assertSame( $value, $result[ $key ] );
 		}
 	}
 }
diff --git a/tests/xmlrpc/wp/getPostTypes.php b/tests/xmlrpc/wp/getPostTypes.php
index f0717adcfe..3afa962d34 100644
--- a/tests/xmlrpc/wp/getPostTypes.php
+++ b/tests/xmlrpc/wp/getPostTypes.php
@@ -7,7 +7,7 @@ class Tests_XMLRPC_wp_getPostTypes extends WP_XMLRPC_UnitTestCase {
 	function test_invalid_username_password() {
 		$result = $this->myxmlrpcserver->wp_getPostTypes( array( 1, 'username', 'password', 'post' ) );
 		$this->assertIXRError( $result );
-		$this->assertEquals( 403, $result->code );
+		$this->assertSame( 403, $result->code );
 	}
 
 	function test_incapable_user() {
@@ -16,7 +16,7 @@ class Tests_XMLRPC_wp_getPostTypes extends WP_XMLRPC_UnitTestCase {
 		$result = $this->myxmlrpcserver->wp_getPostTypes( array( 1, 'subscriber', 'subscriber' ) );
 		$this->assertNotIXRError( $result );
 		$this->assertInternalType( 'array', $result );
-		$this->assertEquals( 0, count( $result ) );
+		$this->assertSame( 0, count( $result ) );
 	}
 
 	function test_capable_user() {
@@ -35,7 +35,7 @@ class Tests_XMLRPC_wp_getPostTypes extends WP_XMLRPC_UnitTestCase {
 		$this->assertNotIXRError( $result );
 		$this->assertInternalType( 'array', $result );
 
-		// verify that pages is in the result, and post is not
+		// Verify that page is in the result, and post is not.
 		$result_names = wp_list_pluck( $result, 'name' );
 		$this->assertContains( 'page', $result_names );
 		$this->assertNotContains( 'post', $result_names );
diff --git a/tests/xmlrpc/wp/getPosts.php b/tests/xmlrpc/wp/getPosts.php
index c9a1b4cce1..8571969f13 100644
--- a/tests/xmlrpc/wp/getPosts.php
+++ b/tests/xmlrpc/wp/getPosts.php
@@ -8,7 +8,7 @@ class Tests_XMLRPC_wp_getPosts extends WP_XMLRPC_UnitTestCase {
 	function test_invalid_username_password() {
 		$result = $this->myxmlrpcserver->wp_getPosts( array( 1, 'username', 'password' ) );
 		$this->assertIXRError( $result );
-		$this->assertEquals( 403, $result->code );
+		$this->assertSame( 403, $result->code );
 	}
 
 	/**
@@ -19,12 +19,12 @@ class Tests_XMLRPC_wp_getPosts extends WP_XMLRPC_UnitTestCase {
 
 		$result = $this->myxmlrpcserver->wp_getPosts( array( 1, 'subscriber', 'subscriber' ) );
 		$this->assertIXRError( $result );
-		$this->assertEquals( 401, $result->code );
+		$this->assertSame( 401, $result->code );
 
 		$filter = array( 'post_type' => 'page' );
 		$result = $this->myxmlrpcserver->wp_getPosts( array( 1, 'subscriber', 'subscriber', $filter ) );
 		$this->assertIXRError( $result );
-		$this->assertEquals( 401, $result->code );
+		$this->assertSame( 401, $result->code );
 	}
 
 	function test_capable_user() {
@@ -64,16 +64,16 @@ class Tests_XMLRPC_wp_getPosts extends WP_XMLRPC_UnitTestCase {
 				)
 			);
 		}
-		// get them all
+		// Get them all.
 		$filter  = array(
 			'post_type' => $cpt_name,
 			'number'    => $num_posts + 10,
 		);
 		$results = $this->myxmlrpcserver->wp_getPosts( array( 1, 'editor', 'editor', $filter ) );
 		$this->assertNotIXRError( $results );
-		$this->assertEquals( $num_posts, count( $results ) );
+		$this->assertSame( $num_posts, count( $results ) );
 
-		// page through results
+		// Page through results.
 		$posts_found      = array();
 		$filter['number'] = 2;
 		$filter['offset'] = 0;
@@ -82,16 +82,16 @@ class Tests_XMLRPC_wp_getPosts extends WP_XMLRPC_UnitTestCase {
 			$posts_found       = array_merge( $posts_found, wp_list_pluck( $presults, 'post_id' ) );
 			$filter['offset'] += $filter['number'];
 		} while ( count( $presults ) > 0 );
-		// verify that $post_ids matches $posts_found
-		$this->assertEquals( 0, count( array_diff( $post_ids, $posts_found ) ) );
+		// Verify that $post_ids matches $posts_found.
+		$this->assertSame( 0, count( array_diff( $post_ids, $posts_found ) ) );
 
-		// add comments to some of the posts
+		// Add comments to some of the posts.
 		foreach ( $post_ids as $key => $post_id ) {
 			// Larger post IDs will get more comments.
 			self::factory()->comment->create_post_comments( $post_id, $key );
 		}
 
-		// get results ordered by comment count
+		// Get results ordered by comment count.
 		$filter2  = array(
 			'post_type' => $cpt_name,
 			'number'    => $num_posts,
@@ -107,7 +107,7 @@ class Tests_XMLRPC_wp_getPosts extends WP_XMLRPC_UnitTestCase {
 			$last_comment_count = $comment_count;
 		}
 
-		// set one of the posts to draft and get drafts
+		// Set one of the posts to draft and get drafts.
 		$post              = get_post( $post_ids[0] );
 		$post->post_status = 'draft';
 		wp_update_post( $post );
@@ -117,7 +117,7 @@ class Tests_XMLRPC_wp_getPosts extends WP_XMLRPC_UnitTestCase {
 		);
 		$results3 = $this->myxmlrpcserver->wp_getPosts( array( 1, 'editor', 'editor', $filter3 ) );
 		$this->assertNotIXRError( $results3 );
-		$this->assertEquals( 1, count( $results3 ) );
+		$this->assertSame( 1, count( $results3 ) );
 		$this->assertEquals( $post->ID, $results3[0]['post_id'] );
 
 		_unregister_post_type( $cpt_name );
@@ -127,15 +127,15 @@ class Tests_XMLRPC_wp_getPosts extends WP_XMLRPC_UnitTestCase {
 		$this->make_user_by_role( 'editor' );
 		self::factory()->post->create();
 
-		// check default fields
+		// Check default fields.
 		$results = $this->myxmlrpcserver->wp_getPosts( array( 1, 'editor', 'editor' ) );
 		$this->assertNotIXRError( $results );
-		$expected_fields = array( 'post_id', 'post_title', 'terms', 'custom_fields', 'link' ); // subset of expected fields
+		$expected_fields = array( 'post_id', 'post_title', 'terms', 'custom_fields', 'link' ); // Subset of expected fields.
 		foreach ( $expected_fields as $field ) {
 			$this->assertArrayHasKey( $field, $results[0] );
 		}
 
-		// request specific fields and verify that only those are returned
+		// Request specific fields and verify that only those are returned.
 		$filter   = array();
 		$fields   = array( 'post_name', 'post_author', 'enclosure' );
 		$results2 = $this->myxmlrpcserver->wp_getPosts( array( 1, 'editor', 'editor', $filter, $fields ) );
@@ -155,17 +155,17 @@ class Tests_XMLRPC_wp_getPosts extends WP_XMLRPC_UnitTestCase {
 		$post_ids[] = self::factory()->post->create( array( 'post_title' => 'First: Hello, World!' ) );
 		$post_ids[] = self::factory()->post->create( array( 'post_title' => 'Second: Hello, World!' ) );
 
-		// Search for none of them
+		// Search for none of them.
 		$filter  = array( 's' => 'Third' );
 		$results = $this->myxmlrpcserver->wp_getPosts( array( 1, 'editor', 'editor', $filter ) );
 		$this->assertNotIXRError( $results );
-		$this->assertEquals( 0, count( $results ) );
+		$this->assertSame( 0, count( $results ) );
 
-		// Search for one of them
+		// Search for one of them.
 		$filter  = array( 's' => 'First:' );
 		$results = $this->myxmlrpcserver->wp_getPosts( array( 1, 'editor', 'editor', $filter ) );
 		$this->assertNotIXRError( $results );
-		$this->assertEquals( 1, count( $results ) );
+		$this->assertSame( 1, count( $results ) );
 	}
 
 }
diff --git a/tests/xmlrpc/wp/getProfile.php b/tests/xmlrpc/wp/getProfile.php
index d84ac9a803..5d57301ae3 100644
--- a/tests/xmlrpc/wp/getProfile.php
+++ b/tests/xmlrpc/wp/getProfile.php
@@ -9,7 +9,7 @@ class Tests_XMLRPC_wp_getProfile extends WP_XMLRPC_UnitTestCase {
 	function test_invalid_username_password() {
 		$result = $this->myxmlrpcserver->wp_getProfile( array( 1, 'username', 'password' ) );
 		$this->assertIXRError( $result );
-		$this->assertEquals( 403, $result->code );
+		$this->assertSame( 403, $result->code );
 	}
 
 	function test_subscriber() {
@@ -43,6 +43,6 @@ class Tests_XMLRPC_wp_getProfile extends WP_XMLRPC_UnitTestCase {
 		$keys            = array_keys( $result );
 		sort( $expected_fields );
 		sort( $keys );
-		$this->assertEqualSets( $expected_fields, $keys );
+		$this->assertSameSets( $expected_fields, $keys );
 	}
 }
diff --git a/tests/xmlrpc/wp/getRevisions.php b/tests/xmlrpc/wp/getRevisions.php
index 966c59f387..c80e55ac9e 100644
--- a/tests/xmlrpc/wp/getRevisions.php
+++ b/tests/xmlrpc/wp/getRevisions.php
@@ -8,7 +8,7 @@ class Tests_XMLRPC_wp_getRevisions extends WP_XMLRPC_UnitTestCase {
 	function test_invalid_username_password() {
 		$result = $this->myxmlrpcserver->wp_getRevisions( array( 1, 'username', 'password', 0 ) );
 		$this->assertIXRError( $result );
-		$this->assertEquals( 403, $result->code );
+		$this->assertSame( 403, $result->code );
 	}
 
 	function test_incapable_user() {
@@ -18,7 +18,7 @@ class Tests_XMLRPC_wp_getRevisions extends WP_XMLRPC_UnitTestCase {
 
 		$result = $this->myxmlrpcserver->wp_getRevisions( array( 1, 'subscriber', 'subscriber', $post_id ) );
 		$this->assertIXRError( $result );
-		$this->assertEquals( 401, $result->code );
+		$this->assertSame( 401, $result->code );
 	}
 
 	function test_capable_user() {
@@ -38,7 +38,7 @@ class Tests_XMLRPC_wp_getRevisions extends WP_XMLRPC_UnitTestCase {
 				'ID'           => $post_id,
 				'post_content' => 'Edit 1',
 			)
-		); // Create the initial revision
+		); // Create the initial revision.
 
 		$result = $this->myxmlrpcserver->wp_getRevisions( array( 1, 'editor', 'editor', $post_id ) );
 		$this->assertInternalType( 'array', $result );
diff --git a/tests/xmlrpc/wp/getTaxonomies.php b/tests/xmlrpc/wp/getTaxonomies.php
index 77c1dd9e05..0bf6482d1f 100644
--- a/tests/xmlrpc/wp/getTaxonomies.php
+++ b/tests/xmlrpc/wp/getTaxonomies.php
@@ -8,7 +8,7 @@ class Tests_XMLRPC_wp_getTaxonomies extends WP_XMLRPC_UnitTestCase {
 	function test_invalid_username_password() {
 		$result = $this->myxmlrpcserver->wp_getTaxonomies( array( 1, 'username', 'password' ) );
 		$this->assertIXRError( $result );
-		$this->assertEquals( 403, $result->code );
+		$this->assertSame( 403, $result->code );
 	}
 
 	function test_taxonomy_validated() {
diff --git a/tests/xmlrpc/wp/getTaxonomy.php b/tests/xmlrpc/wp/getTaxonomy.php
index 5ffff80a81..eb3997527d 100644
--- a/tests/xmlrpc/wp/getTaxonomy.php
+++ b/tests/xmlrpc/wp/getTaxonomy.php
@@ -8,7 +8,7 @@ class Tests_XMLRPC_wp_getTaxonomy extends WP_XMLRPC_UnitTestCase {
 	function test_invalid_username_password() {
 		$result = $this->myxmlrpcserver->wp_getTaxonomy( array( 1, 'username', 'password', 'category' ) );
 		$this->assertIXRError( $result );
-		$this->assertEquals( 403, $result->code );
+		$this->assertSame( 403, $result->code );
 	}
 
 	function test_empty_taxonomy() {
@@ -16,8 +16,8 @@ class Tests_XMLRPC_wp_getTaxonomy extends WP_XMLRPC_UnitTestCase {
 
 		$result = $this->myxmlrpcserver->wp_getTaxonomy( array( 1, 'editor', 'editor', '' ) );
 		$this->assertIXRError( $result );
-		$this->assertEquals( 403, $result->code );
-		$this->assertEquals( __( 'Invalid taxonomy.' ), $result->message );
+		$this->assertSame( 403, $result->code );
+		$this->assertSame( __( 'Invalid taxonomy.' ), $result->message );
 	}
 
 	function test_invalid_taxonomy() {
@@ -25,8 +25,8 @@ class Tests_XMLRPC_wp_getTaxonomy extends WP_XMLRPC_UnitTestCase {
 
 		$result = $this->myxmlrpcserver->wp_getTaxonomy( array( 1, 'editor', 'editor', 'not_existing' ) );
 		$this->assertIXRError( $result );
-		$this->assertEquals( 403, $result->code );
-		$this->assertEquals( __( 'Invalid taxonomy.' ), $result->message );
+		$this->assertSame( 403, $result->code );
+		$this->assertSame( __( 'Invalid taxonomy.' ), $result->message );
 	}
 
 	function test_incapable_user() {
@@ -34,8 +34,8 @@ class Tests_XMLRPC_wp_getTaxonomy extends WP_XMLRPC_UnitTestCase {
 
 		$result = $this->myxmlrpcserver->wp_getTaxonomy( array( 1, 'subscriber', 'subscriber', 'category' ) );
 		$this->assertIXRError( $result );
-		$this->assertEquals( 401, $result->code );
-		$this->assertEquals( __( 'Sorry, you are not allowed to assign terms in this taxonomy.' ), $result->message );
+		$this->assertSame( 401, $result->code );
+		$this->assertSame( __( 'Sorry, you are not allowed to assign terms in this taxonomy.' ), $result->message );
 	}
 
 	function test_taxonomy_validated() {
@@ -51,13 +51,13 @@ class Tests_XMLRPC_wp_getTaxonomy extends WP_XMLRPC_UnitTestCase {
 		$result = $this->myxmlrpcserver->wp_getTaxonomy( array( 1, 'editor', 'editor', 'category' ) );
 		$this->assertNotIXRError( $result );
 		$taxonomy = get_taxonomy( 'category' );
-		$this->assertEquals( 'category', $result['name'], 'name' );
-		$this->assertEquals( true, $result['_builtin'], '_builtin' );
-		$this->assertEquals( $taxonomy->show_ui, $result['show_ui'], 'show_ui' );
-		$this->assertEquals( $taxonomy->public, $result['public'], 'public' );
-		$this->assertEquals( $taxonomy->hierarchical, $result['hierarchical'], 'hierarchical' );
-		$this->assertEquals( (array) $taxonomy->labels, $result['labels'], 'labels' );
-		$this->assertEquals( (array) $taxonomy->cap, $result['cap'], 'capabilities' );
-		$this->assertEquals( (array) $taxonomy->object_type, $result['object_type'], 'object_types' );
+		$this->assertSame( 'category', $result['name'], 'name' );
+		$this->assertTrue( $result['_builtin'], '_builtin' );
+		$this->assertSame( $taxonomy->show_ui, $result['show_ui'], 'show_ui' );
+		$this->assertSame( $taxonomy->public, $result['public'], 'public' );
+		$this->assertSame( $taxonomy->hierarchical, $result['hierarchical'], 'hierarchical' );
+		$this->assertSame( (array) $taxonomy->labels, $result['labels'], 'labels' );
+		$this->assertSame( (array) $taxonomy->cap, $result['cap'], 'capabilities' );
+		$this->assertSame( (array) $taxonomy->object_type, $result['object_type'], 'object_types' );
 	}
 }
diff --git a/tests/xmlrpc/wp/getTerm.php b/tests/xmlrpc/wp/getTerm.php
index 9266c47cb3..13b1698a49 100644
--- a/tests/xmlrpc/wp/getTerm.php
+++ b/tests/xmlrpc/wp/getTerm.php
@@ -18,7 +18,7 @@ class Tests_XMLRPC_wp_getTerm extends WP_XMLRPC_UnitTestCase {
 	function test_invalid_username_password() {
 		$result = $this->myxmlrpcserver->wp_getTerm( array( 1, 'username', 'password', 'category', 1 ) );
 		$this->assertIXRError( $result );
-		$this->assertEquals( 403, $result->code );
+		$this->assertSame( 403, $result->code );
 	}
 
 	function test_empty_taxonomy() {
@@ -26,8 +26,8 @@ class Tests_XMLRPC_wp_getTerm extends WP_XMLRPC_UnitTestCase {
 
 		$result = $this->myxmlrpcserver->wp_getTerm( array( 1, 'editor', 'editor', '', 0 ) );
 		$this->assertIXRError( $result );
-		$this->assertEquals( 403, $result->code );
-		$this->assertEquals( __( 'Invalid taxonomy.' ), $result->message );
+		$this->assertSame( 403, $result->code );
+		$this->assertSame( __( 'Invalid taxonomy.' ), $result->message );
 	}
 
 	function test_invalid_taxonomy() {
@@ -35,8 +35,8 @@ class Tests_XMLRPC_wp_getTerm extends WP_XMLRPC_UnitTestCase {
 
 		$result = $this->myxmlrpcserver->wp_getTerm( array( 1, 'editor', 'editor', 'not_existing', 0 ) );
 		$this->assertIXRError( $result );
-		$this->assertEquals( 403, $result->code );
-		$this->assertEquals( __( 'Invalid taxonomy.' ), $result->message );
+		$this->assertSame( 403, $result->code );
+		$this->assertSame( __( 'Invalid taxonomy.' ), $result->message );
 	}
 
 	function test_incapable_user() {
@@ -44,8 +44,8 @@ class Tests_XMLRPC_wp_getTerm extends WP_XMLRPC_UnitTestCase {
 
 		$result = $this->myxmlrpcserver->wp_getTerm( array( 1, 'subscriber', 'subscriber', 'category', self::$term_id ) );
 		$this->assertIXRError( $result );
-		$this->assertEquals( 401, $result->code );
-		$this->assertEquals( __( 'Sorry, you are not allowed to assign this term.' ), $result->message );
+		$this->assertSame( 401, $result->code );
+		$this->assertSame( __( 'Sorry, you are not allowed to assign this term.' ), $result->message );
 	}
 
 
@@ -54,8 +54,8 @@ class Tests_XMLRPC_wp_getTerm extends WP_XMLRPC_UnitTestCase {
 
 		$result = $this->myxmlrpcserver->wp_getTerm( array( 1, 'editor', 'editor', 'category', '' ) );
 		$this->assertIXRError( $result );
-		$this->assertEquals( 500, $result->code );
-		$this->assertEquals( __( 'Empty Term.' ), $result->message );
+		$this->assertSame( 500, $result->code );
+		$this->assertSame( __( 'Empty Term.' ), $result->message );
 	}
 
 	function test_invalid_term() {
@@ -63,8 +63,8 @@ class Tests_XMLRPC_wp_getTerm extends WP_XMLRPC_UnitTestCase {
 
 		$result = $this->myxmlrpcserver->wp_getTerm( array( 1, 'editor', 'editor', 'category', 9999 ) );
 		$this->assertIXRError( $result );
-		$this->assertEquals( 404, $result->code );
-		$this->assertEquals( __( 'Invalid term ID.' ), $result->message );
+		$this->assertSame( 404, $result->code );
+		$this->assertSame( __( 'Invalid term ID.' ), $result->message );
 	}
 
 	function test_valid_term() {
@@ -78,7 +78,7 @@ class Tests_XMLRPC_wp_getTerm extends WP_XMLRPC_UnitTestCase {
 		$this->assertNotIXRError( $result );
 		$this->assertEquals( $result, $term );
 
-		// Check DataTypes
+		// Check data types.
 		$this->assertInternalType( 'string', $result['name'] );
 		$this->assertInternalType( 'string', $result['slug'] );
 		$this->assertInternalType( 'string', $result['taxonomy'] );
@@ -91,12 +91,12 @@ class Tests_XMLRPC_wp_getTerm extends WP_XMLRPC_UnitTestCase {
 		$this->assertStringMatchesFormat( '%d', $result['term_taxonomy_id'] );
 		$this->assertStringMatchesFormat( '%d', $result['parent'] );
 
-		// Check Data
-		$this->assertEquals( 0, $result['count'] );
-		$this->assertEquals( $term['name'], $result['name'] );
-		$this->assertEquals( $term['slug'], $result['slug'] );
-		$this->assertEquals( 'category', $result['taxonomy'] );
-		$this->assertEquals( $term['description'], $result['description'] );
+		// Check data.
+		$this->assertSame( 0, $result['count'] );
+		$this->assertSame( $term['name'], $result['name'] );
+		$this->assertSame( $term['slug'], $result['slug'] );
+		$this->assertSame( 'category', $result['taxonomy'] );
+		$this->assertSame( $term['description'], $result['description'] );
 	}
 
 	/**
@@ -123,6 +123,6 @@ class Tests_XMLRPC_wp_getTerm extends WP_XMLRPC_UnitTestCase {
 
 		$this->assertInternalType( 'array', $result['custom_fields'] );
 		$term_meta = get_term_meta( self::$term_id, '', true );
-		$this->assertEquals( $term_meta['foo'][0], $result['custom_fields'][0]['value'] );
+		$this->assertSame( $term_meta['foo'][0], $result['custom_fields'][0]['value'] );
 	}
 }
diff --git a/tests/xmlrpc/wp/getTerms.php b/tests/xmlrpc/wp/getTerms.php
index 477bed7195..0fb8b0962d 100644
--- a/tests/xmlrpc/wp/getTerms.php
+++ b/tests/xmlrpc/wp/getTerms.php
@@ -8,7 +8,7 @@ class Tests_XMLRPC_wp_getTerms extends WP_XMLRPC_UnitTestCase {
 	function test_invalid_username_password() {
 		$result = $this->myxmlrpcserver->wp_getTerms( array( 1, 'username', 'password', 'category' ) );
 		$this->assertIXRError( $result );
-		$this->assertEquals( 403, $result->code );
+		$this->assertSame( 403, $result->code );
 	}
 
 	function test_empty_taxonomy() {
@@ -16,8 +16,8 @@ class Tests_XMLRPC_wp_getTerms extends WP_XMLRPC_UnitTestCase {
 
 		$result = $this->myxmlrpcserver->wp_getTerms( array( 1, 'editor', 'editor', '' ) );
 		$this->assertIXRError( $result );
-		$this->assertEquals( 403, $result->code );
-		$this->assertEquals( __( 'Invalid taxonomy.' ), $result->message );
+		$this->assertSame( 403, $result->code );
+		$this->assertSame( __( 'Invalid taxonomy.' ), $result->message );
 	}
 
 	function test_invalid_taxonomy() {
@@ -25,8 +25,8 @@ class Tests_XMLRPC_wp_getTerms extends WP_XMLRPC_UnitTestCase {
 
 		$result = $this->myxmlrpcserver->wp_getTerms( array( 1, 'editor', 'editor', 'not_existing' ) );
 		$this->assertIXRError( $result );
-		$this->assertEquals( 403, $result->code );
-		$this->assertEquals( __( 'Invalid taxonomy.' ), $result->message );
+		$this->assertSame( 403, $result->code );
+		$this->assertSame( __( 'Invalid taxonomy.' ), $result->message );
 	}
 
 	function test_incapable_user() {
@@ -34,14 +34,14 @@ class Tests_XMLRPC_wp_getTerms extends WP_XMLRPC_UnitTestCase {
 
 		$result = $this->myxmlrpcserver->wp_getTerms( array( 1, 'subscriber', 'subscriber', 'category' ) );
 		$this->assertIXRError( $result );
-		$this->assertEquals( 401, $result->code );
-		$this->assertEquals( __( 'Sorry, you are not allowed to assign terms in this taxonomy.' ), $result->message );
+		$this->assertSame( 401, $result->code );
+		$this->assertSame( __( 'Sorry, you are not allowed to assign terms in this taxonomy.' ), $result->message );
 	}
 
 	function test_valid_terms() {
 		$this->make_user_by_role( 'editor' );
 
-		// make sure there's at least one category
+		// Make sure there's at least one category.
 		$cat = wp_insert_term( 'term_' . __FUNCTION__, 'category' );
 
 		$results = $this->myxmlrpcserver->wp_getTerms( array( 1, 'editor', 'editor', 'category' ) );
@@ -50,10 +50,11 @@ class Tests_XMLRPC_wp_getTerms extends WP_XMLRPC_UnitTestCase {
 		foreach ( $results as $term ) {
 			$this->assertInternalType( 'int', $term['count'] );
 
-			// Check custom term meta
+			// Check custom term meta.
 			$this->assertInternalType( 'array', $term['custom_fields'] );
 
-			// We expect all other IDs to be strings not integers so we don't return something larger than an XMLRPC integer can describe.
+			// We expect all other IDs to be strings, not integers,
+			// so we don't return something larger than an XMLRPC integer can describe.
 			$this->assertStringMatchesFormat( '%d', $term['term_id'] );
 			$this->assertStringMatchesFormat( '%d', $term['term_group'] );
 			$this->assertStringMatchesFormat( '%d', $term['term_taxonomy_id'] );
@@ -64,7 +65,7 @@ class Tests_XMLRPC_wp_getTerms extends WP_XMLRPC_UnitTestCase {
 	function test_custom_taxonomy() {
 		$this->make_user_by_role( 'editor' );
 
-		// create a taxonomy and some terms for it
+		// Create a taxonomy and some terms for it.
 		$tax_name  = 'wp_getTerms_custom_taxonomy';
 		$num_terms = 12;
 		register_taxonomy( $tax_name, 'post' );
@@ -72,33 +73,33 @@ class Tests_XMLRPC_wp_getTerms extends WP_XMLRPC_UnitTestCase {
 			wp_insert_term( "term_{$i}", $tax_name );
 		}
 
-		// test fetching all terms
+		// Test fetching all terms.
 		$results = $this->myxmlrpcserver->wp_getTerms( array( 1, 'editor', 'editor', $tax_name ) );
 		$this->assertNotIXRError( $results );
 
-		$this->assertEquals( $num_terms, count( $results ) );
+		$this->assertSame( $num_terms, count( $results ) );
 		foreach ( $results as $term ) {
-			$this->assertEquals( $tax_name, $term['taxonomy'] );
+			$this->assertSame( $tax_name, $term['taxonomy'] );
 		}
 
-		// test paged results
+		// Test paged results.
 		$filter   = array( 'number' => 5 );
 		$results2 = $this->myxmlrpcserver->wp_getTerms( array( 1, 'editor', 'editor', $tax_name, $filter ) );
 		$this->assertNotIXRError( $results );
-		$this->assertEquals( 5, count( $results2 ) );
-		$this->assertEquals( $results[1]['term_id'], $results2[1]['term_id'] ); // check one of the terms
+		$this->assertSame( 5, count( $results2 ) );
+		$this->assertSame( $results[1]['term_id'], $results2[1]['term_id'] ); // Check one of the terms.
 
 		$filter['offset'] = 10;
 		$results3         = $this->myxmlrpcserver->wp_getTerms( array( 1, 'editor', 'editor', $tax_name, $filter ) );
 		$this->assertNotIXRError( $results3 );
-		$this->assertEquals( $num_terms - 10, count( $results3 ) );
-		$this->assertEquals( $results[11]['term_id'], $results3[1]['term_id'] );
+		$this->assertSame( $num_terms - 10, count( $results3 ) );
+		$this->assertSame( $results[11]['term_id'], $results3[1]['term_id'] );
 
-		// test hide_empty (since none have been attached to posts yet, all should be hidden
+		// Test hide_empty (since none have been attached to posts yet, all should be hidden.
 		$filter   = array( 'hide_empty' => true );
 		$results4 = $this->myxmlrpcserver->wp_getTerms( array( 1, 'editor', 'editor', $tax_name, $filter ) );
 		$this->assertNotIXRError( $results4 );
-		$this->assertEquals( 0, count( $results4 ) );
+		$this->assertSame( 0, count( $results4 ) );
 
 		unset( $GLOBALS['wp_taxonomies'][ $tax_name ] );
 	}
@@ -122,7 +123,7 @@ class Tests_XMLRPC_wp_getTerms extends WP_XMLRPC_UnitTestCase {
 
 		foreach ( $results as $term ) {
 			if ( $term['term_id'] === $cat1 ) {
-				break;  // found cat1 first as expected
+				break; // Found cat1 first as expected.
 			} elseif ( $term['term_id'] === $cat2 ) {
 				$this->assertFalse( false, 'Incorrect category ordering.' );
 			}
@@ -135,20 +136,20 @@ class Tests_XMLRPC_wp_getTerms extends WP_XMLRPC_UnitTestCase {
 		$name    = __FUNCTION__;
 		$name_id = wp_create_category( $name );
 
-		// search by full name
+		// Search by full name.
 		$filter  = array( 'search' => $name );
 		$results = $this->myxmlrpcserver->wp_getTerms( array( 1, 'editor', 'editor', 'category', $filter ) );
 		$this->assertNotIXRError( $results );
-		$this->assertEquals( 1, count( $results ) );
-		$this->assertEquals( $name, $results[0]['name'] );
+		$this->assertSame( 1, count( $results ) );
+		$this->assertSame( $name, $results[0]['name'] );
 		$this->assertEquals( $name_id, $results[0]['term_id'] );
 
-		// search by partial name
+		// Search by partial name.
 		$filter   = array( 'search' => substr( $name, 0, 10 ) );
 		$results2 = $this->myxmlrpcserver->wp_getTerms( array( 1, 'editor', 'editor', 'category', $filter ) );
 		$this->assertNotIXRError( $results2 );
-		$this->assertEquals( 1, count( $results2 ) );
-		$this->assertEquals( $name, $results2[0]['name'] );
+		$this->assertSame( 1, count( $results2 ) );
+		$this->assertSame( $name, $results2[0]['name'] );
 		$this->assertEquals( $name_id, $results2[0]['term_id'] );
 	}
 }
diff --git a/tests/xmlrpc/wp/getUser.php b/tests/xmlrpc/wp/getUser.php
index b7361a125b..9412dea89b 100644
--- a/tests/xmlrpc/wp/getUser.php
+++ b/tests/xmlrpc/wp/getUser.php
@@ -10,7 +10,7 @@ class Tests_XMLRPC_wp_getUser extends WP_XMLRPC_UnitTestCase {
 	function setUp() {
 		parent::setUp();
 
-		// create a super-admin
+		// Create a super admin.
 		$this->administrator_id = $this->make_user_by_role( 'administrator' );
 		if ( is_multisite() ) {
 			grant_super_admin( $this->administrator_id );
@@ -27,13 +27,13 @@ class Tests_XMLRPC_wp_getUser extends WP_XMLRPC_UnitTestCase {
 	function test_invalid_username_password() {
 		$result = $this->myxmlrpcserver->wp_getUser( array( 1, 'username', 'password', 1 ) );
 		$this->assertIXRError( $result );
-		$this->assertEquals( 403, $result->code );
+		$this->assertSame( 403, $result->code );
 	}
 
 	function test_invalid_user() {
 		$result = $this->myxmlrpcserver->wp_getUser( array( 1, 'administrator', 'administrator', 34902348908234 ) );
 		$this->assertIXRError( $result );
-		$this->assertEquals( 404, $result->code );
+		$this->assertSame( 404, $result->code );
 	}
 
 	function test_incapable_user() {
@@ -42,7 +42,7 @@ class Tests_XMLRPC_wp_getUser extends WP_XMLRPC_UnitTestCase {
 
 		$result = $this->myxmlrpcserver->wp_getUser( array( 1, 'subscriber', 'subscriber', $editor_id ) );
 		$this->assertIXRError( $result );
-		$this->assertEquals( 401, $result->code );
+		$this->assertSame( 401, $result->code );
 	}
 
 	function test_subscriber_self() {
@@ -75,7 +75,7 @@ class Tests_XMLRPC_wp_getUser extends WP_XMLRPC_UnitTestCase {
 		$result = $this->myxmlrpcserver->wp_getUser( array( 1, 'administrator', 'administrator', $user_id ) );
 		$this->assertNotIXRError( $result );
 
-		// check data types
+		// Check data types.
 		$this->assertInternalType( 'string', $result['user_id'] );
 		$this->assertStringMatchesFormat( '%d', $result['user_id'] );
 		$this->assertInternalType( 'string', $result['username'] );
@@ -90,19 +90,19 @@ class Tests_XMLRPC_wp_getUser extends WP_XMLRPC_UnitTestCase {
 		$this->assertInternalType( 'string', $result['display_name'] );
 		$this->assertInternalType( 'array', $result['roles'] );
 
-		// check expected values
+		// Check expected values.
 		$this->assertEquals( $user_id, $result['user_id'] );
-		$this->assertEquals( $user_data['user_login'], $result['username'] );
-		$this->assertEquals( $user_data['first_name'], $result['first_name'] );
-		$this->assertEquals( $user_data['last_name'], $result['last_name'] );
-		$this->assertEquals( $registered_date, $result['registered']->getTimestamp() );
-		$this->assertEquals( $user_data['description'], $result['bio'] );
-		$this->assertEquals( $user_data['user_email'], $result['email'] );
-		$this->assertEquals( $user_data['nickname'], $result['nickname'] );
-		$this->assertEquals( $user_data['user_nicename'], $result['nicename'] );
-		$this->assertEquals( $user_data['user_url'], $result['url'] );
-		$this->assertEquals( $user_data['display_name'], $result['display_name'] );
-		$this->assertEquals( $user_data['user_login'], $result['username'] );
+		$this->assertSame( $user_data['user_login'], $result['username'] );
+		$this->assertSame( $user_data['first_name'], $result['first_name'] );
+		$this->assertSame( $user_data['last_name'], $result['last_name'] );
+		$this->assertSame( $registered_date, $result['registered']->getTimestamp() );
+		$this->assertSame( $user_data['description'], $result['bio'] );
+		$this->assertSame( $user_data['user_email'], $result['email'] );
+		$this->assertSame( $user_data['nickname'], $result['nickname'] );
+		$this->assertSame( $user_data['user_nicename'], $result['nicename'] );
+		$this->assertSame( $user_data['user_url'], $result['url'] );
+		$this->assertSame( $user_data['display_name'], $result['display_name'] );
+		$this->assertSame( $user_data['user_login'], $result['username'] );
 		$this->assertContains( $user_data['role'], $result['roles'] );
 
 		wp_delete_user( $user_id );
@@ -116,7 +116,7 @@ class Tests_XMLRPC_wp_getUser extends WP_XMLRPC_UnitTestCase {
 		$this->assertEquals( $editor_id, $result['user_id'] );
 
 		$expected_fields = array( 'user_id' );
-		$this->assertEquals( $expected_fields, array_keys( $result ) );
+		$this->assertSame( $expected_fields, array_keys( $result ) );
 	}
 
 	function test_basic_fields() {
@@ -130,7 +130,7 @@ class Tests_XMLRPC_wp_getUser extends WP_XMLRPC_UnitTestCase {
 		$keys            = array_keys( $result );
 		sort( $expected_fields );
 		sort( $keys );
-		$this->assertEqualSets( $expected_fields, $keys );
+		$this->assertSameSets( $expected_fields, $keys );
 	}
 
 	function test_arbitrary_fields() {
@@ -146,6 +146,6 @@ class Tests_XMLRPC_wp_getUser extends WP_XMLRPC_UnitTestCase {
 		$keys            = array_keys( $result );
 		sort( $expected_fields );
 		sort( $keys );
-		$this->assertEqualSets( $expected_fields, $keys );
+		$this->assertSameSets( $expected_fields, $keys );
 	}
 }
diff --git a/tests/xmlrpc/wp/getUsers.php b/tests/xmlrpc/wp/getUsers.php
index bddafcf39a..a7dfcf2562 100644
--- a/tests/xmlrpc/wp/getUsers.php
+++ b/tests/xmlrpc/wp/getUsers.php
@@ -9,7 +9,7 @@ class Tests_XMLRPC_wp_getUsers extends WP_XMLRPC_UnitTestCase {
 	function test_invalid_username_password() {
 		$results = $this->myxmlrpcserver->wp_getUsers( array( 1, 'username', 'password' ) );
 		$this->assertIXRError( $results );
-		$this->assertEquals( 403, $results->code );
+		$this->assertSame( 403, $results->code );
 	}
 
 	function test_incapable_user() {
@@ -17,7 +17,7 @@ class Tests_XMLRPC_wp_getUsers extends WP_XMLRPC_UnitTestCase {
 
 		$results = $this->myxmlrpcserver->wp_getUsers( array( 1, 'subscriber', 'subscriber' ) );
 		$this->assertIXRError( $results );
-		$this->assertEquals( 401, $results->code );
+		$this->assertSame( 401, $results->code );
 	}
 
 	function test_capable_user() {
@@ -26,7 +26,7 @@ class Tests_XMLRPC_wp_getUsers extends WP_XMLRPC_UnitTestCase {
 		$result = $this->myxmlrpcserver->wp_getUsers( array( 1, 'administrator', 'administrator' ) );
 		$this->assertNotIXRError( $result );
 
-		// check data types
+		// Check data types.
 		$this->assertInternalType( 'string', $result[0]['user_id'] );
 		$this->assertStringMatchesFormat( '%d', $result[0]['user_id'] );
 		$this->assertInternalType( 'string', $result[0]['username'] );
@@ -51,7 +51,7 @@ class Tests_XMLRPC_wp_getUsers extends WP_XMLRPC_UnitTestCase {
 		$filter  = array( 'role' => 'invalidrole' );
 		$results = $this->myxmlrpcserver->wp_getUsers( array( 1, 'administrator', 'administrator', $filter ) );
 		$this->assertIXRError( $results );
-		$this->assertEquals( 403, $results->code );
+		$this->assertSame( 403, $results->code );
 	}
 
 	function test_role_filter() {
@@ -62,14 +62,14 @@ class Tests_XMLRPC_wp_getUsers extends WP_XMLRPC_UnitTestCase {
 			grant_super_admin( $administrator_id );
 		}
 
-		// test a single role ('editor')
+		// Test a single role ('editor').
 		$filter  = array( 'role' => 'editor' );
 		$results = $this->myxmlrpcserver->wp_getUsers( array( 1, 'administrator', 'administrator', $filter ) );
 		$this->assertNotIXRError( $results );
 		$this->assertCount( 1, $results );
 		$this->assertEquals( $editor_id, $results[0]['user_id'] );
 
-		// test 'authors', which should return all non-subscribers
+		// Test 'authors', which should return all non-subscribers.
 		$filter2  = array( 'who' => 'authors' );
 		$results2 = $this->myxmlrpcserver->wp_getUsers( array( 1, 'administrator', 'administrator', $filter2 ) );
 		$this->assertNotIXRError( $results2 );
@@ -101,8 +101,8 @@ class Tests_XMLRPC_wp_getUsers extends WP_XMLRPC_UnitTestCase {
 			$filter['offset'] += $page_size;
 		} while ( count( $presults ) > 0 );
 
-		// verify that $user_ids matches $users_found
-		$this->assertEquals( 0, count( array_diff( $user_ids, $users_found ) ) );
+		// Verify that $user_ids matches $users_found.
+		$this->assertSame( 0, count( array_diff( $user_ids, $users_found ) ) );
 	}
 
 	function test_order_filters() {
diff --git a/tests/xmlrpc/wp/newComment.php b/tests/xmlrpc/wp/newComment.php
index 4336e5b1e6..82dcc5b9a0 100644
--- a/tests/xmlrpc/wp/newComment.php
+++ b/tests/xmlrpc/wp/newComment.php
@@ -41,7 +41,7 @@ class Tests_XMLRPC_wp_newComment extends WP_XMLRPC_UnitTestCase {
 		);
 
 		$this->assertIXRError( $result );
-		$this->assertEquals( 403, $result->code );
+		$this->assertSame( 403, $result->code );
 	}
 
 	function test_new_comment_post_closed() {
@@ -52,7 +52,7 @@ class Tests_XMLRPC_wp_newComment extends WP_XMLRPC_UnitTestCase {
 			)
 		);
 
-		$this->assertEquals( 'closed', $post->comment_status );
+		$this->assertSame( 'closed', $post->comment_status );
 
 		$result = $this->myxmlrpcserver->wp_newComment(
 			array(
@@ -67,7 +67,7 @@ class Tests_XMLRPC_wp_newComment extends WP_XMLRPC_UnitTestCase {
 		);
 
 		$this->assertIXRError( $result );
-		$this->assertEquals( 403, $result->code );
+		$this->assertSame( 403, $result->code );
 	}
 
 	function test_new_comment_duplicated() {
@@ -84,15 +84,15 @@ class Tests_XMLRPC_wp_newComment extends WP_XMLRPC_UnitTestCase {
 			),
 		);
 
-		// First time it's a valid comment
+		// First time it's a valid comment.
 		$result = $this->myxmlrpcserver->wp_newComment( $comment_args );
 		$this->assertNotIXRError( $result );
 
-		// Run second time for duplication error
+		// Run second time for duplication error.
 		$result = $this->myxmlrpcserver->wp_newComment( $comment_args );
 
 		$this->assertIXRError( $result );
-		$this->assertEquals( 403, $result->code );
+		$this->assertSame( 403, $result->code );
 	}
 
 }
diff --git a/tests/xmlrpc/wp/newPost.php b/tests/xmlrpc/wp/newPost.php
index 7e37333254..a24a803c6d 100644
--- a/tests/xmlrpc/wp/newPost.php
+++ b/tests/xmlrpc/wp/newPost.php
@@ -8,7 +8,7 @@ class Tests_XMLRPC_wp_newPost extends WP_XMLRPC_UnitTestCase {
 	function test_invalid_username_password() {
 		$result = $this->myxmlrpcserver->wp_newPost( array( 1, 'username', 'password', array() ) );
 		$this->assertIXRError( $result );
-		$this->assertEquals( 403, $result->code );
+		$this->assertSame( 403, $result->code );
 	}
 
 	function test_incapable_user() {
@@ -16,7 +16,7 @@ class Tests_XMLRPC_wp_newPost extends WP_XMLRPC_UnitTestCase {
 
 		$result = $this->myxmlrpcserver->wp_newPost( array( 1, 'subscriber', 'subscriber', array() ) );
 		$this->assertIXRError( $result );
-		$this->assertEquals( 401, $result->code );
+		$this->assertSame( 401, $result->code );
 	}
 
 	function test_no_content() {
@@ -24,8 +24,8 @@ class Tests_XMLRPC_wp_newPost extends WP_XMLRPC_UnitTestCase {
 
 		$result = $this->myxmlrpcserver->wp_newPost( array( 1, 'author', 'author', array() ) );
 		$this->assertIXRError( $result );
-		$this->assertEquals( 500, $result->code );
-		$this->assertEquals( 'Content, title, and excerpt are empty.', $result->message );
+		$this->assertSame( 500, $result->code );
+		$this->assertSame( 'Content, title, and excerpt are empty.', $result->message );
 	}
 
 	function test_basic_content() {
@@ -69,7 +69,7 @@ class Tests_XMLRPC_wp_newPost extends WP_XMLRPC_UnitTestCase {
 		);
 		$result = $this->myxmlrpcserver->wp_newPost( array( 1, 'contributor', 'contributor', $post ) );
 		$this->assertIXRError( $result );
-		$this->assertEquals( 401, $result->code );
+		$this->assertSame( 401, $result->code );
 	}
 
 	function test_capable_private() {
@@ -92,7 +92,7 @@ class Tests_XMLRPC_wp_newPost extends WP_XMLRPC_UnitTestCase {
 		);
 		$result = $this->myxmlrpcserver->wp_newPost( array( 1, 'contributor', 'contributor', $post ) );
 		$this->assertIXRError( $result );
-		$this->assertEquals( 401, $result->code );
+		$this->assertSame( 401, $result->code );
 	}
 
 	function test_capable_other_author() {
@@ -117,7 +117,7 @@ class Tests_XMLRPC_wp_newPost extends WP_XMLRPC_UnitTestCase {
 		);
 		$result = $this->myxmlrpcserver->wp_newPost( array( 1, 'contributor', 'contributor', $post ) );
 		$this->assertIXRError( $result );
-		$this->assertEquals( 401, $result->code );
+		$this->assertSame( 401, $result->code );
 	}
 
 	function test_invalid_author() {
@@ -129,7 +129,7 @@ class Tests_XMLRPC_wp_newPost extends WP_XMLRPC_UnitTestCase {
 		);
 		$result = $this->myxmlrpcserver->wp_newPost( array( 1, 'editor', 'editor', $post ) );
 		$this->assertIXRError( $result );
-		$this->assertEquals( 404, $result->code );
+		$this->assertSame( 404, $result->code );
 	}
 
 	function test_empty_author() {
@@ -142,7 +142,7 @@ class Tests_XMLRPC_wp_newPost extends WP_XMLRPC_UnitTestCase {
 
 		$out = get_post( $result );
 		$this->assertEquals( $my_author_id, $out->post_author );
-		$this->assertEquals( 'Test', $out->post_title );
+		$this->assertSame( 'Test', $out->post_title );
 	}
 
 	function test_post_thumbnail() {
@@ -150,7 +150,7 @@ class Tests_XMLRPC_wp_newPost extends WP_XMLRPC_UnitTestCase {
 
 		$this->make_user_by_role( 'author' );
 
-		// create attachment
+		// Create attachment.
 		$filename      = ( DIR_TESTDATA . '/images/a2-small.jpg' );
 		$attachment_id = self::factory()->attachment->create_upload_object( $filename );
 
@@ -174,7 +174,7 @@ class Tests_XMLRPC_wp_newPost extends WP_XMLRPC_UnitTestCase {
 		);
 		$result = $this->myxmlrpcserver->wp_newPost( array( 1, 'author', 'author', $post ) );
 		$this->assertNotIXRError( $result );
-		$this->assertEquals( 'draft', get_post_status( $result ) );
+		$this->assertSame( 'draft', get_post_status( $result ) );
 	}
 
 	function test_incapable_sticky() {
@@ -186,7 +186,7 @@ class Tests_XMLRPC_wp_newPost extends WP_XMLRPC_UnitTestCase {
 		);
 		$result = $this->myxmlrpcserver->wp_newPost( array( 1, 'contributor', 'contributor', $post ) );
 		$this->assertIXRError( $result );
-		$this->assertEquals( 401, $result->code );
+		$this->assertSame( 401, $result->code );
 	}
 
 	function test_capable_sticky() {
@@ -211,7 +211,7 @@ class Tests_XMLRPC_wp_newPost extends WP_XMLRPC_UnitTestCase {
 		);
 		$result = $this->myxmlrpcserver->wp_newPost( array( 1, 'editor', 'editor', $post ) );
 		$this->assertIXRError( $result );
-		$this->assertEquals( 401, $result->code );
+		$this->assertSame( 401, $result->code );
 	}
 
 	function test_post_format() {
@@ -223,7 +223,7 @@ class Tests_XMLRPC_wp_newPost extends WP_XMLRPC_UnitTestCase {
 		);
 		$result = $this->myxmlrpcserver->wp_newPost( array( 1, 'editor', 'editor', $post ) );
 		$this->assertNotIXRError( $result );
-		$this->assertEquals( 'quote', get_post_format( $result ) );
+		$this->assertSame( 'quote', get_post_format( $result ) );
 	}
 
 	function test_invalid_post_format() {
@@ -249,7 +249,7 @@ class Tests_XMLRPC_wp_newPost extends WP_XMLRPC_UnitTestCase {
 		);
 		$result = $this->myxmlrpcserver->wp_newPost( array( 1, 'editor', 'editor', $post ) );
 		$this->assertIXRError( $result );
-		$this->assertEquals( 401, $result->code );
+		$this->assertSame( 401, $result->code );
 
 		$post2   = array(
 			'post_title'  => 'Test',
@@ -259,7 +259,7 @@ class Tests_XMLRPC_wp_newPost extends WP_XMLRPC_UnitTestCase {
 		);
 		$result2 = $this->myxmlrpcserver->wp_newPost( array( 1, 'editor', 'editor', $post2 ) );
 		$this->assertIXRError( $result2 );
-		$this->assertEquals( 401, $result2->code );
+		$this->assertSame( 401, $result2->code );
 	}
 
 	function test_invalid_term_id() {
@@ -273,7 +273,7 @@ class Tests_XMLRPC_wp_newPost extends WP_XMLRPC_UnitTestCase {
 		);
 		$result = $this->myxmlrpcserver->wp_newPost( array( 1, 'editor', 'editor', $post ) );
 		$this->assertIXRError( $result );
-		$this->assertEquals( 403, $result->code );
+		$this->assertSame( 403, $result->code );
 	}
 
 	function test_terms() {
@@ -312,7 +312,7 @@ class Tests_XMLRPC_wp_newPost extends WP_XMLRPC_UnitTestCase {
 		$cat1      = wp_create_category( $cat1_name, $parent_cat );
 		$cat2_name = 'cat2';
 
-		// first a post with valid categories; one that already exists and one to be created
+		// First a post with valid categories; one that already exists and one to be created.
 		$post   = array(
 			'post_title'  => 'Test',
 			'terms_names' => array(
@@ -321,15 +321,15 @@ class Tests_XMLRPC_wp_newPost extends WP_XMLRPC_UnitTestCase {
 		);
 		$result = $this->myxmlrpcserver->wp_newPost( array( 1, 'editor', 'editor', $post ) );
 		$this->assertNotIXRError( $result );
-		// verify that cat2 was created
+		// Verify that cat2 was created.
 		$cat2 = get_term_by( 'name', $cat2_name, 'category' );
 		$this->assertNotEmpty( $cat2 );
-		// check that both categories were set on the post
+		// Check that both categories were set on the post.
 		$post_cats = wp_get_object_terms( $result, 'category', array( 'fields' => 'ids' ) );
 		$this->assertContains( $cat1, $post_cats );
 		$this->assertContains( $cat2->term_id, $post_cats );
 
-		// create a second post attempting to use the ambiguous name
+		// Create a second post attempting to use the ambiguous name.
 		$post2   = array(
 			'post_title'  => 'Test',
 			'terms_names' => array(
@@ -338,7 +338,7 @@ class Tests_XMLRPC_wp_newPost extends WP_XMLRPC_UnitTestCase {
 		);
 		$result2 = $this->myxmlrpcserver->wp_newPost( array( 1, 'editor', 'editor', $post2 ) );
 		$this->assertIXRError( $result2 );
-		$this->assertEquals( 401, $result2->code );
+		$this->assertSame( 401, $result2->code );
 	}
 
 	/**
@@ -355,7 +355,7 @@ class Tests_XMLRPC_wp_newPost extends WP_XMLRPC_UnitTestCase {
 		$result       = $this->myxmlrpcserver->wp_newPost( array( 1, 'author', 'author', $post ) );
 		$fetched_post = get_post( $result );
 		$this->assertStringMatchesFormat( '%d', $result );
-		$this->assertEquals( current_time( 'Y-m-d' ), substr( $fetched_post->post_date, 0, 10 ) );
+		$this->assertSame( current_time( 'Y-m-d' ), substr( $fetched_post->post_date, 0, 10 ) );
 	}
 
 	/**
@@ -372,7 +372,7 @@ class Tests_XMLRPC_wp_newPost extends WP_XMLRPC_UnitTestCase {
 		$result       = $this->myxmlrpcserver->wp_newPost( array( 1, 'author', 'author', $post ) );
 		$fetched_post = get_post( $result );
 		$this->assertStringMatchesFormat( '%d', $result );
-		$this->assertEquals( '0000-00-00', substr( $fetched_post->post_date_gmt, 0, 10 ) );
+		$this->assertSame( '0000-00-00', substr( $fetched_post->post_date_gmt, 0, 10 ) );
 	}
 
 	/**
@@ -389,7 +389,7 @@ class Tests_XMLRPC_wp_newPost extends WP_XMLRPC_UnitTestCase {
 		$result       = $this->myxmlrpcserver->wp_newPost( array( 1, 'author', 'author', $post ) );
 		$fetched_post = get_post( $result );
 		$this->assertStringMatchesFormat( '%d', $result );
-		$this->assertEquals( $date_string, $fetched_post->post_date );
+		$this->assertSame( $date_string, $fetched_post->post_date );
 	}
 
 	/**
@@ -406,7 +406,7 @@ class Tests_XMLRPC_wp_newPost extends WP_XMLRPC_UnitTestCase {
 		$result       = $this->myxmlrpcserver->wp_newPost( array( 1, 'author', 'author', $post ) );
 		$fetched_post = get_post( $result );
 		$this->assertStringMatchesFormat( '%d', $result );
-		$this->assertEquals( $date_string, $fetched_post->post_date_gmt );
+		$this->assertSame( $date_string, $fetched_post->post_date_gmt );
 	}
 
 	/**
@@ -423,7 +423,7 @@ class Tests_XMLRPC_wp_newPost extends WP_XMLRPC_UnitTestCase {
 		$result       = $this->myxmlrpcserver->wp_newPost( array( 1, 'author', 'author', $post ) );
 		$fetched_post = get_post( $result );
 		$this->assertStringMatchesFormat( '%d', $result );
-		$this->assertEquals( $date_string, $fetched_post->post_date );
+		$this->assertSame( $date_string, $fetched_post->post_date );
 	}
 
 	/**
@@ -440,7 +440,7 @@ class Tests_XMLRPC_wp_newPost extends WP_XMLRPC_UnitTestCase {
 		$result       = $this->myxmlrpcserver->wp_newPost( array( 1, 'author', 'author', $post ) );
 		$fetched_post = get_post( $result );
 		$this->assertStringMatchesFormat( '%d', $result );
-		$this->assertEquals( $date_string, $fetched_post->post_date_gmt );
+		$this->assertSame( $date_string, $fetched_post->post_date_gmt );
 	}
 
 }
diff --git a/tests/xmlrpc/wp/newTerm.php b/tests/xmlrpc/wp/newTerm.php
index 28bb0e3d6d..b3b5e23bf8 100644
--- a/tests/xmlrpc/wp/newTerm.php
+++ b/tests/xmlrpc/wp/newTerm.php
@@ -18,7 +18,7 @@ class Tests_XMLRPC_wp_newTerm extends WP_XMLRPC_UnitTestCase {
 	function test_invalid_username_password() {
 		$result = $this->myxmlrpcserver->wp_newTerm( array( 1, 'username', 'password', array() ) );
 		$this->assertIXRError( $result );
-		$this->assertEquals( 403, $result->code );
+		$this->assertSame( 403, $result->code );
 	}
 
 	function test_empty_taxonomy() {
@@ -26,8 +26,8 @@ class Tests_XMLRPC_wp_newTerm extends WP_XMLRPC_UnitTestCase {
 
 		$result = $this->myxmlrpcserver->wp_newTerm( array( 1, 'editor', 'editor', array( 'taxonomy' => '' ) ) );
 		$this->assertIXRError( $result );
-		$this->assertEquals( 403, $result->code );
-		$this->assertEquals( __( 'Invalid taxonomy.' ), $result->message );
+		$this->assertSame( 403, $result->code );
+		$this->assertSame( __( 'Invalid taxonomy.' ), $result->message );
 	}
 
 	function test_invalid_taxonomy() {
@@ -35,8 +35,8 @@ class Tests_XMLRPC_wp_newTerm extends WP_XMLRPC_UnitTestCase {
 
 		$result = $this->myxmlrpcserver->wp_newTerm( array( 1, 'editor', 'editor', array( 'taxonomy' => 'not_existing' ) ) );
 		$this->assertIXRError( $result );
-		$this->assertEquals( 403, $result->code );
-		$this->assertEquals( __( 'Invalid taxonomy.' ), $result->message );
+		$this->assertSame( 403, $result->code );
+		$this->assertSame( __( 'Invalid taxonomy.' ), $result->message );
 	}
 
 	function test_incapable_user() {
@@ -44,8 +44,8 @@ class Tests_XMLRPC_wp_newTerm extends WP_XMLRPC_UnitTestCase {
 
 		$result = $this->myxmlrpcserver->wp_newTerm( array( 1, 'subscriber', 'subscriber', array( 'taxonomy' => 'category' ) ) );
 		$this->assertIXRError( $result );
-		$this->assertEquals( 401, $result->code );
-		$this->assertEquals( __( 'Sorry, you are not allowed to create terms in this taxonomy.' ), $result->message );
+		$this->assertSame( 401, $result->code );
+		$this->assertSame( __( 'Sorry, you are not allowed to create terms in this taxonomy.' ), $result->message );
 	}
 
 	function test_empty_term() {
@@ -63,8 +63,8 @@ class Tests_XMLRPC_wp_newTerm extends WP_XMLRPC_UnitTestCase {
 			)
 		);
 		$this->assertIXRError( $result );
-		$this->assertEquals( 403, $result->code );
-		$this->assertEquals( __( 'The term name cannot be empty.' ), $result->message );
+		$this->assertSame( 403, $result->code );
+		$this->assertSame( __( 'The term name cannot be empty.' ), $result->message );
 	}
 
 	function test_parent_for_nonhierarchical() {
@@ -83,8 +83,8 @@ class Tests_XMLRPC_wp_newTerm extends WP_XMLRPC_UnitTestCase {
 			)
 		);
 		$this->assertIXRError( $result );
-		$this->assertEquals( 403, $result->code );
-		$this->assertEquals( __( 'This taxonomy is not hierarchical.' ), $result->message );
+		$this->assertSame( 403, $result->code );
+		$this->assertSame( __( 'This taxonomy is not hierarchical.' ), $result->message );
 	}
 
 	function test_parent_invalid() {
@@ -103,7 +103,7 @@ class Tests_XMLRPC_wp_newTerm extends WP_XMLRPC_UnitTestCase {
 			)
 		);
 		$this->assertIXRError( $result );
-		$this->assertEquals( 500, $result->code );
+		$this->assertSame( 500, $result->code );
 	}
 
 	function test_parent_not_existing() {
@@ -122,8 +122,8 @@ class Tests_XMLRPC_wp_newTerm extends WP_XMLRPC_UnitTestCase {
 			)
 		);
 		$this->assertIXRError( $result );
-		$this->assertEquals( 403, $result->code );
-		$this->assertEquals( __( 'Parent term does not exist.' ), $result->message );
+		$this->assertSame( 403, $result->code );
+		$this->assertSame( __( 'Parent term does not exist.' ), $result->message );
 	}
 
 
diff --git a/tests/xmlrpc/wp/restoreRevision.php b/tests/xmlrpc/wp/restoreRevision.php
index ca15a2d358..b3ef2731a2 100644
--- a/tests/xmlrpc/wp/restoreRevision.php
+++ b/tests/xmlrpc/wp/restoreRevision.php
@@ -10,7 +10,7 @@ class Tests_XMLRPC_wp_restoreRevision extends WP_XMLRPC_UnitTestCase {
 	function setUp() {
 		parent::setUp();
 
-		$this->post_id = self::factory()->post->create( array( 'post_content' => 'edit1' ) ); // Not saved as a revision
+		$this->post_id = self::factory()->post->create( array( 'post_content' => 'edit1' ) ); // Not saved as a revision.
 		// First saved revision on update, see https://core.trac.wordpress.org/changeset/24650
 		wp_insert_post(
 			array(
@@ -20,7 +20,8 @@ class Tests_XMLRPC_wp_restoreRevision extends WP_XMLRPC_UnitTestCase {
 		);
 
 		$revisions = wp_get_post_revisions( $this->post_id );
-		//$revision = array_shift( $revisions ); // First revision is empty - https://core.trac.wordpress.org/changeset/23842
+		// First revision is empty, see https://core.trac.wordpress.org/changeset/23842
+		// $revision = array_shift( $revisions );
 		// First revision is NOT empty, see https://core.trac.wordpress.org/changeset/24650
 		$revision          = array_shift( $revisions );
 		$this->revision_id = $revision->ID;
@@ -29,7 +30,7 @@ class Tests_XMLRPC_wp_restoreRevision extends WP_XMLRPC_UnitTestCase {
 	function test_invalid_username_password() {
 		$result = $this->myxmlrpcserver->wp_restoreRevision( array( 1, 'username', 'password', $this->revision_id ) );
 		$this->assertIXRError( $result );
-		$this->assertEquals( 403, $result->code );
+		$this->assertSame( 403, $result->code );
 	}
 
 	function test_incapable_user() {
@@ -37,7 +38,7 @@ class Tests_XMLRPC_wp_restoreRevision extends WP_XMLRPC_UnitTestCase {
 
 		$result = $this->myxmlrpcserver->wp_restoreRevision( array( 1, 'subscriber', 'subscriber', $this->revision_id ) );
 		$this->assertIXRError( $result );
-		$this->assertEquals( 401, $result->code );
+		$this->assertSame( 401, $result->code );
 	}
 
 	function test_capable_user() {
@@ -52,6 +53,6 @@ class Tests_XMLRPC_wp_restoreRevision extends WP_XMLRPC_UnitTestCase {
 
 		$result = $this->myxmlrpcserver->wp_restoreRevision( array( 1, 'editor', 'editor', $this->revision_id ) );
 		$this->assertTrue( $result );
-		$this->assertEquals( 'edit2', get_post( $this->post_id )->post_content );
+		$this->assertSame( 'edit2', get_post( $this->post_id )->post_content );
 	}
 }
diff --git a/tests/xmlrpc/wp/setOptions.php b/tests/xmlrpc/wp/setOptions.php
index 36e85a92c7..f99dcc1024 100644
--- a/tests/xmlrpc/wp/setOptions.php
+++ b/tests/xmlrpc/wp/setOptions.php
@@ -10,10 +10,10 @@ class Tests_XMLRPC_wp_setOptions extends WP_XMLRPC_UnitTestCase {
 	function test_set_option_no_escape_strings() {
 		$this->make_user_by_role( 'administrator' );
 		$string_with_quote         = "Mary's Lamb Shop";
-		$escaped_string_with_quote = esc_html( $string_with_quote ); // title is passed through esc_html()
+		$escaped_string_with_quote = esc_html( $string_with_quote ); // Title is passed through esc_html().
 
 		update_option( 'default_comment_status', 'closed' );
-		$this->assertEquals( 'closed', get_option( 'default_comment_status' ) );
+		$this->assertSame( 'closed', get_option( 'default_comment_status' ) );
 		$result = $this->myxmlrpcserver->wp_setOptions(
 			array(
 				1,
@@ -27,7 +27,7 @@ class Tests_XMLRPC_wp_setOptions extends WP_XMLRPC_UnitTestCase {
 		);
 
 		$this->assertInternalType( 'array', $result );
-		$this->assertEquals( $escaped_string_with_quote, $result['blog_title']['value'] );
-		$this->assertEquals( 'open', $result['default_comment_status']['value'] );
+		$this->assertSame( $escaped_string_with_quote, $result['blog_title']['value'] );
+		$this->assertSame( 'open', $result['default_comment_status']['value'] );
 	}
 }
diff --git a/tests/xmlrpc/wp/uploadFile.php b/tests/xmlrpc/wp/uploadFile.php
index f11f15c77e..2f365d7f93 100644
--- a/tests/xmlrpc/wp/uploadFile.php
+++ b/tests/xmlrpc/wp/uploadFile.php
@@ -14,7 +14,7 @@ class Tests_XMLRPC_wp_uploadFile extends WP_XMLRPC_UnitTestCase {
 	function test_valid_attachment() {
 		$this->make_user_by_role( 'editor' );
 
-		// create attachment
+		// Create attachment.
 		$filename = ( DIR_TESTDATA . '/images/a2-small.jpg' );
 		$contents = file_get_contents( $filename );
 		$data     = array(
@@ -26,7 +26,7 @@ class Tests_XMLRPC_wp_uploadFile extends WP_XMLRPC_UnitTestCase {
 		$result = $this->myxmlrpcserver->mw_newMediaObject( array( 0, 'editor', 'editor', $data ) );
 		$this->assertNotIXRError( $result );
 
-		// check data types
+		// Check data types.
 		$this->assertInternalType( 'string', $result['id'] );
 		$this->assertStringMatchesFormat( '%d', $result['id'] );
 		$this->assertInternalType( 'string', $result['file'] );
diff --git a/wp-mail-real-test.php b/wp-mail-real-test.php
index 67da30ef86..467442249f 100644
--- a/wp-mail-real-test.php
+++ b/wp-mail-real-test.php
@@ -5,16 +5,16 @@
  * Test script for wp_mail with real addresses.
  */
 
-// parse options
+// Parse options.
 $options = 'v:r:d';
 if ( is_callable( 'getopt' ) ) {
 	$opts = getopt( $options );
 } else {
-	include( dirname( __FILE__ ) . '/wp-testlib/getopt.php' );
+	require __DIR__ . '/wp-testlib/getopt.php';
 	$opts = getoptParser::getopt( $options );
 }
 
-define( 'DIR_TESTROOT', realpath( dirname( __FILE__ ) ) );
+define( 'DIR_TESTROOT', realpath( __DIR__ ) );
 
 define( 'TEST_WP', true );
 define( 'WP_DEBUG', array_key_exists( 'd', $opts ) );
@@ -27,39 +27,39 @@ if ( ! empty( $opts['r'] ) ) {
 	define( 'DIR_WP', DIR_TESTROOT . '/wordpress' );
 }
 
-// make sure all useful errors are displayed during setup
+// Make sure all useful errors are displayed during setup.
 error_reporting( E_ALL & ~E_DEPRECATED );
 ini_set( 'display_errors', true );
 
-require_once( DIR_TESTROOT . '/wp-testlib/utils.php' );
+require_once DIR_TESTROOT . '/wp-testlib/utils.php';
 
-// configure wp
-require_once( DIR_TESTROOT . '/wp-config.php' );
+// Configure WP.
+require_once DIR_TESTROOT . '/wp-config.php';
 define( 'ABSPATH', realpath( DIR_WP ) . '/' );
 
-// install wp
+// Install WP.
 define( 'WP_BLOG_TITLE', rand_str() );
 define( 'WP_USER_NAME', rand_str() );
 define( 'WP_USER_EMAIL', rand_str() . '@example.com' );
 
-// initialize wp
+// Initialize WP.
 define( 'WP_INSTALLING', 1 );
-$_SERVER['PATH_INFO'] = $_SERVER['SCRIPT_NAME']; // prevent a warning from some sloppy code in wp-settings.php
-require_once( ABSPATH . 'wp-settings.php' );
+$_SERVER['PATH_INFO'] = $_SERVER['SCRIPT_NAME']; // Prevent a warning from some sloppy code in wp-settings.php.
+require_once ABSPATH . 'wp-settings.php';
 
 drop_tables();
 
-require_once( ABSPATH . 'wp-admin/includes/upgrade.php' );
+require_once ABSPATH . 'wp-admin/includes/upgrade.php';
 wp_install( WP_BLOG_TITLE, WP_USER_NAME, WP_USER_EMAIL, true );
 
-// make sure we're installed
+// Make sure we're installed.
 assert( true === is_blog_installed() );
 
 // phpcs:ignore Generic.NamingConventions.UpperCaseConstantName.ConstantNotUpperCase
 define( 'PHPUnit_MAIN_METHOD', false );
 $original_wpdb = $GLOBALS['wpdb'];
 
-// hide warnings during testing, since that's the normal WP behaviour
+// Hide warnings during testing, since that's the normal WP behaviour.
 if ( ! WP_DEBUG ) {
 	error_reporting( E_ALL ^ E_NOTICE );
 }
