#!/bin/bash

#####################################################################################
#
# Test our code against various unit test systems and linters and prevent commit
# if any of them fail.
#
# @version 6.2.0
#
# Adjusted for use with this specific project.
#
####################################################################################

LEGACY_PHP_VERSION="7.4"
PHP_VERSION="8.3"
PHPUNIT_DIR="dev/wp-unit"

PLUGIN_PATH="";
THEME_PATH=""
#####################################################################################

GREEN="$(tput setaf 2)"
WHITE="$(tput setaf 7)"
YELLOW="$(tput setaf 3)"
RED="$(tput setaf 1)"
BLUE="$(tput setaf 6)"
RESET_COLOR="$(tput sgr0)"

# Point to specific version of PHP if supported via environmental variables.
if [[ "true" == "$PHP_MULTI_VERSION_SUPPORT" ]]; then
    PHP="php ${PHP_VERSION}"
    PHPSTAN="phpstan ${PHP_VERSION}"
else
    PHP='php'
    PHPSTAN='phpstan'
fi
PROJECT=$(${PHP} -r "echo dirname(realpath('$0'), 3);")
## Fix windows paths
PROJECT=${PROJECT//\\//}

PHP_FILES=$(git diff-index --cached --name-only --diff-filter=ACMR HEAD | grep "${THEME_PATH}/.*\
.php$\|${PLUGIN_PATH}/.*\.php$")

if [[ ! "$PHP_FILES" ]]; then
    echo "${YELLOW}[pre-commit]${BLUE} No Lintable PHP Files Changed ${RESET_COLOR}"
fi

function exit_reset_colors() {
    echo "${RESET_COLOR}"
    exit 1
}

# Must run them consecutively to prevent conflicts.
function php_units() {
    php_unit "phpunit ${LEGACY_PHP_VERSION}"
    php_unit "phpunit ${PHP_VERSION}"
}

function php_unit() {
    if [[ ! -f ${PROJECT}/${PHPUNIT_DIR}/phpunit.xml ]] && [[ ! -f ${PROJECT}/${PHPUNIT_DIR}/phpunit.xml.dist ]]; then
        echo "${YELLOW}[pre-commit]${RED} ${PROJECT}/${PHPUNIT_DIR}/phpunit.xml or ${PROJECT}/${PHPUNIT_DIR}/phpunit.xml.dist not found!"
        exit_reset_colors
    fi
    echo "${YELLOW}[pre-commit]${BLUE} Running ${1^^}... ${WHITE}"
    cd "${PROJECT}/${PHPUNIT_DIR}" || exit
    OUTPUT=$(${1})
    if [[ $? != 0 ]]; then
        echo
        echo "${BLUE}${1^^} Failed! Fix the error before commit!"
        echo "${RED}$OUTPUT"
        exit_reset_colors
    fi
    echo "${YELLOW}[pre-commit]${GREEN} ${1^^} Tests Passed!${RESET_COLOR}"
}
php_units &

function php_lint() {
    if [[ "$PHP_FILES" ]]; then
        echo "${YELLOW}[pre-commit]${BLUE} Checking ${1^^} Lint... ${WHITE}"
        for FILE in ${PHP_FILES}; do
            OUTPUT=$(${1} -l -d display_errors=0 ${PROJECT}/${FILE})
            if [[ $? != 0 ]]; then
                echo
                echo "${BLUE}${1^^} Failed. Fix the error before commit."
                echo "${RED}$OUTPUT"
                exit_reset_colors
            fi
        done
        echo "${YELLOW}[pre-commit]${GREEN} ${1^^} Lint Passed!${RESET_COLOR}"
    fi
}
php_lint "php ${LEGACY_PHP_VERSION}" &
php_lint "php ${PHP_VERSION}" &

function php_stan() {
    if [[ ! -f ${PROJECT}/phpstan.neon ]] && [[ ! -f ${PROJECT}/phpstan.neon.dist ]]; then
        echo "${YELLOW}[pre-commit]${RED} ${PROJECT}/phpstan.neon or ${PROJECT}/phpstan.neon.dist not found!"
        exit_reset_colors
    fi

    echo "${YELLOW}[pre-commit]${BLUE} Running PHP Stan... ${WHITE}"
    OUTPUT=$(${PHPSTAN} analyse --no-progress --memory-limit=2G)
    if [[ $? != 0 ]]; then
        echo
        echo "${BLUE}PHP Stan Failed. Fix the error before commit."
        echo "${RED}$OUTPUT"
        exit_reset_colors
    fi
    echo "${YELLOW}[pre-commit]${GREEN} PHP Stan Passed!${RESET_COLOR}"
}
php_stan &


# Go through each background task
# If it sent exit code 1, it failed and the result from `wait` will be false.
FAIL=0
for job in $(jobs -p); do
    wait "$job" || (( FAIL+=1 ))
done

echo "${RESET_COLOR}"

# If any of the background tasks failed, we exit 1
if [[ $FAIL -ne 0 ]]; then
    exit 1
else
    exit 0
fi
